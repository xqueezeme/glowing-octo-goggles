{
    "title": "Lucky Man Ch. 08",
    "pages": [
        "Duncan\n\nDuncan chuckled when he thought of his wife. He was glad that she was feeling better than she'd been on Sunday, not that he didn't understand the reason behind it. He was a little somber that Heidi had to leave. She was a good friend to his wife, sure, but she was also incredible in bed, and he'd never forget the times he shared with her, both on Friday and on Saturday.\n\nHe sighed as he thought back about the fun, but then smiled when he heard the familiar click-clack of Kara's footsteps as she walked towards her desk. He glanced up from his work and through the window to her area.\n\nKara dropped her purse into the drawer she kept it in and turned to smile and wave at him. Turning, she knocked on his door and popped her head in.\n\n\"Coffee?\" she asked.\n\nDuncan nodded and she disappeared again. The click-clack faded away slightly and then returned as she pushed the door open completely and brought his coffee in.\n\nShe seemed to be all business at the moment, standing in front of his desk and going over his schedule for the day. Duncan's gaze wandered though, and he found himself staring at her gorgeous body. He thought back to when he'd gotten her top at Double D's, and how perky and perfect her boobs were then. She must have sensed him staring because she playfully cocked her hips with a hand on them and eyed him suspiciously.\n\nChuckling, he shrugged.\n\n\"I got a very odd text from Kelly this morning,\" she said eventually.\n\nHe laughed. \"I'm sorry. She's... a little over-zealous sometimes when she gets excited.\"\n\nKara smiled and walked towards his office door, but surprised him when she closed it instead of walking out. Turning back towards him, she lowered a smoldering gaze at him. He gulped.\n\n\"She told me to wear something sexy. I hope I picked something suitable.\" She turned and showed him the little black skirt she was wearing. It was very tight on her, and it looked spectacular. She had a white button-down shirt on, but it was undone down past her cleavage and he could see her pretty pink bra. Bending over slightly, she put her palms on the chair in front of her and looked back.\n\n\"Do you like the color of my panties?\" she asked.\n\nHe chuckled and looked, but was briefly shocked to see that she wasn't wearing any. He saw a few wispy strands of red pubic hair in the light coming from behind her. She stood and came around the desk. Placing her hands on the arms of his chair, she pushed until he bumped into the cabinet behind him, his eyes never leaving her gorgeous body. \n\n\"When she told me on Friday that you guys had fooled around with Heidi, I was really excited. I got all wet thinking about you guys, I hope that's okay.\"\n\nDuncan smiled as she looked at him with a pouting, innocent face.\n\nShe turned and faced her rear towards him as she laid her arms on his desk. \"I can understand if you need to spank me for such lascivious thoughts about my boss and his wife. Not to mention, I'm such a naughty girl for not wearing panties.\"\n\nHe gulped again, but didn't move.\n\nShe turned and looked at him intensely, waiting. Finally, he stood and came up behind her as she turned back around. He came forwards and stopped just short of letting his cock brush against her. It was protruding outwards rudely, demanding to be allowed to penetrate her waiting pussy. He ignored it and glanced up and looked around. There wasn't anyone else in the office as of yet, so he decided to acquiesce to her request. Gingerly, he placed both hands on her shapely ass and squeezed, eliciting a moan from the redhead in front of him.\n\nShe turned and glanced back through a lock of red-hair. \"I really should be punished. I'm being such a... distraction.\"\n\nHe smiled and caressed both of her cheeks. She had a wonderfully curvy rump. He playfully swatted at it, but she reached back and pulled her skirt up, revealing her pale buttocks. He fought the urge to drop to his knees and devour her snatch then and there.\n\n\"Please,\" she moaned, turning back to look at him through the same lock of hair. \"Please punish me for being so naughty.\"\n\nDuncan smiled again, and pulled his hand back to spank her. Someone crossed in front of his window then, on their way to another office and spooked the both of them. She stood quickly and lowered her skirt, coming back around to the front of his desk.\n\nHe sat back in his chair and wheeled it up close to his desk to hide his erection should someone enter. She walked to his door but stopped as she opened it.\n\n\"I'll be at my desk, should you need anything, Sir,\" she said. \"I fully expect you to punish me for my transgressions this morning.\"\n\nHe smiled and looked down at her ass, admiring the shapely feature for a few moments before he realized she wasn't leaving. He glanced up and saw her looking back at him intensely, like she needed something. A moment later he couldn't stand it. He stood and came around his desk quickly as she whimpered and shut the door, coming around to hide and squirming in place behind it as he came up to her quickly.\n\nAs he neared her, she practically leapt into his arms and spread her legs around him as he caught her and pressed her up against the door. She moaned as their lips met and he roughly began to kiss her. Her pussy pressed against the bulge in his pants and she reached down between them to stroke his erection. She groaned in pleasure as it slid up her pussy, and she began to desperately claw at his slacks, trying to free it. There was no subtlety in her actions. She wasn't performing for him, she simply wanted him to fuck her at that moment.\n\nDuncan wanted nothing more than to start pounding into her up against his door, then and there, but he knew the timing wasn't right. Her kisses grew desperate, almost frantic as she pulled his belt free and began to work on the button.\n\nHe groaned and pulled her hand up. \"We can't, not here, someone will see and I don't want anyone to think badly of you.\"\n\nShe whimpered and pouted briefly for a second, but it ended with a naughty grin.\n\n\"Are you sure you don't want to nail me to this door?\" she asked, leaning back and splaying both arms above her head as he continued to press her against it. His erection was forced between then, squishing up against her bare pussy and his own stomach.\n\nGroaning, he sighed and began to set her down. Backing up, he turned and sat in his desk. She smiled at him. \n\n\"I'm impressed by your willpower. I definitely wouldn't have stopped you from fucking my tight little pussy.\" As she spoke, she lowered herself to her knees and looked over at him. \"See, all you have to do is walk over here and stick your cock in my mouth. I've made it easy for you.\"\n\nHe groaned loudly and chuckled. \"You're making this really difficult,\" he allowed. \n\nShe pouted then. \"Can I please?\" she asked, looking up at him with wide-innocent eyes.\n\nHe sighed and ran a hand through his hair. \"What the fuck is wrong with me?\" he asked aloud.\n\nGiggling, she stood and began to smooth herself out. Satisfied she looked okay, she came around to him and grabbed a tissue to wipe his face free of her lipstick. \"Just getting you presentable again,\" she said as she worked. Her other hand was sneakily worming its way down his chest, but he stopped her and brought it up to his lips.\n\nShe sighed. \"God, you're just too well-behaved,\" she said with another pout.\n\nHe chuckled and helped her stand up completely.\n\n\"Are you sure there's nothing you need?\" Kara asked, looking down at him as he stared at her cleavage. \"Anything at all?\"\n\nDuncan sighed a final time and shook his head. \"Unfortunately, my dear, sweet Kara, there's nothing I need at this moment.\"\n\nShe frowned then. \"Pity,\" she said. \"Still, Kelly said I need to get a selfie with you, so let me sit in your lap for a second and then I'll really go back to work.\"\n\nChuckling, he sighed but eventually opened his arms while she pulled his phone from his shirt pocket. She unlocked it and opened the camera. A smile played across her face as he glanced at her, wondering how she knew the code. She turned and slid into his lap like silk draped across a mannequin.\n\nHe kept his hands beside him, but she immediately wiggled into his crotch and brought one of them up and slid it inside her top. \"I want to make sure she knows that I was doing what she asked,\" she said. \"Get your other hand up here.\"\n\nDuncan sighed again but complied, placing the other hand on her waist and pulling gently. A moan of pleasure spilled from her lips. \"God,\" she whispered, feeling his erection pressing into her butt. \"Just think of how easy it would be for me to spin around and shove this thing in my hungry little pussy.\"\n\nHe groaned audibly and she snapped the picture. Giggling, she stood and checked out her work. The expression on Duncan's face was priceless. His eyes were rolled back in mid-groan, and one hand was in her shirt, obviously playing with her breast.\n\nShe quickly fired it off to Kelly and attached a quick note saying that it was a present from her, signing it -Kara.\n\nFinally standing, Kara turned and left the office without another word, though she did bend low in front of her desk and \"retrieve\" something from the bottom drawer.\n\nHe chuckled and shook his head. \"I'm not gonna get a damn thing done if she doesn't start behaving.\"\n\nAfter that, the morning actually seemed to pass normally. Kara behaved herself, for the most part, and only flashed him her ass a few times when she bent over her desk for something. His mind was constantly on sex, though, and he had to force himself back to task multiple times.\n\n*****\n\nKelly\n\nShe smiled as she walked away, enjoying the sensation of her boss' eyes on her ass as she walked in front of him. She added a little extra oomph to her sway as she headed to her desk, and even bent down low when he passed by. Her shapely rump poked outwards, and she swore she could feel him watching it. Her pussy was getting squishy in her panties when she finally sat down and began her work day. A few minutes later, Marie emerged and waved at Kelly with a wide grin.\n\n\"Slut,\" Kelly whispered with a wink.\n\n\"Tramp,\" Marie shot back.\n\nShe glanced down as she heard her phone buzz and saw that Amy was calling her.\n\n\"Hello, this is Kelly,\" she said, picking it up.\n\n\"Hey Kelly, it's Amy Winger,\" came the familiar voice.\n\n\"Hi, Amy! How are you?\" she answered.\n\n\"Oh, I'm fine. I just had a quick proposition for you. Zeke and I felt bad that we kind of sprung that on you guys without much warning, and we wanted to talk about it. Would you guys like to go to dinner with us some time tonight? We're both off and we'd be delighted to treat you again.\"\n\nKelly smiled into the phone and laughed lightly. \"Dinner sounds lovely. I'll just make sure that Duncan hasn't made plans for us. You guys pick the place and time and we'll meet you there.\"\n\n\"That sounds great! I look forward to seeing you guys again,\" Amy said.\n\n\"Me too! It'll be good to catch up! I'll talk to you later then.\" After a few quick goodbyes, she hung up the phone and immediately sent a message to Duncan about what happened.\n\n\"Sounds awesome,\" he said. \"Maybe I'll get another blowjob.\" He sent a widely grinning smiley face with the last message.\n\nShe snickered. \"Don't make me punish you,\" she replied and included a smiling devil-face smiley. He replied with a frowny-face.\n\nShe giggled and told him she'd send him the details later.\n\n\"Been flirting?\" he asked.\n\n\"Oh yeah, I'll tell you all about it this evening. You?\"\n\n\"Kara is being a naughty girl, but somehow I think you knew that,\" he replied.\n\nShe sent the widely grinning smiley back to him and went back to work after sending a quick \"love you, ttyl\" to him.\n\nThat evening, the two of them got home around the same time.\n\n\"So, what happened today?\" Duncan asked.\n\nKelly giggled as she slid on the supremely sexy and skimpy little black dress that she'd been embarrassed to wear a few weeks before.\n\n\"Well, Mr. Sellers and I arrived at the same time, so we rode the elevator up together. When we got off, we heard Marie and Bob Deekins making a racket and we peeked around the corner. Marie was on her desk with her boss' face between her legs.\n\nDuncan chuckled and pulled on a pair of tight blue jeans that Kelly had selected for him. She said it showed his package nicely. After, he reached for the tight fitting shirt that she's picked and slid it on.\n\n\"Damn you look good,\" Kelly said, admiring her handiwork.\n\n\"Back at you, sexy,\" he said, stopping her to twirl her around. \"Zeke's gonna be drooling all over you!\"\n\n\"Isn't that the idea?\" Kelly asked playfully. She wiggled a finger at him to follow her to the bathroom so she could finish getting ready. She entered and began to fix her hair. She'd been blessed with perfect hair, or so all of her friends were fond of saying. She never needed to curl it to give the sexy bounce and allure that other women did. Most times, she just needed to dry it and run a brush through it. More than once, women had stated that they hated her because of it, in jest of course.\n\nDuncan briefly groomed his beard and combed his hair. \"So what happened after you saw Marie and her boss.\"\n\n\"Well,\" Kelly said, leaning close to the mirror as she put on a little makeup. \"I was positioned in front, and I reached back to grab Mr. Sellers and pull him around so that he could see. I felt him put a hand on my shoulder to steady himself, and then I could feel him as he got an erection.\"\n\nDuncan grinned. \"That deviant old bastard,\" he chuckled.\n\n\"I reached back at one point and might have stroked it a second,\" she said, winking at him. \"I turned around after that and told him he was such a naughty man for what he'd done and you should have seen the look on his face. I told him I wanted him to stare at my ass while I walked away from him, and he groaned again.\"\n\nDuncan's smile was wide as she glanced over. \"And your adventures?\" she asked.\n\nHe shrugged and began to relate the morning's shenanigans to her. \"I believe she would have had sex then and there,\" he said. \n\n\"Well who can blame her, with my sexy man-candy tantalizing her,\" Kelly said. She stepped back and admired herself in the mirror. \"Damn I look good, too.\"\n\nDuncan nodded vigorously. \"Hell yes you do.\" They quickly began to disagree on who won the actual bet though, and decided it was a tie.\n\n\"I was thinking,\" she said as they hopped in his truck.\n\n\"What's that, Babe?\" he asked.\n\n\"I really like that we're challenging each other. I think we need to do that more. I think we need to text each other missions and we have to accomplish them.\"\n\nHe cocked his head at her. \"Missions?\"\n\nShe nodded. \"Like I tell you to go flirt with someone new, or you tell me to go and flash Marie, or flirt with my boss.\"\n\nDuncan smiled. \"I like that idea,\" he said, grinning wickedly.\n\nShe smirked and shook her head. \"I think I've made a mistake.\"\n\nHe laughed.\n\nAmy texted that Zeke had, unsurprisingly, picked Double D's as the restaurant they were going to meet at.\n\nKelly slid next to Duncan as they drove and absentmindedly stroked the outside of his bulge. He began to grow tumescent, but only slightly as his cock began to stir from its slumber. It seemed to grow to the perfect size to be delectable looking and desirable, but not obscene.\n\nAs they pulled in, Duncan helped her out of the truck and held her hand as they walked to the door. Paris, the attractive black hostess, smiled as they came in. \"Hello Mr. and Mrs. Thomas. We're so glad you could join us this evening. Is it just the two of you again?\"\n\nDuncan began to say no, but he saw Amy and Zeke approaching from the bar area.\n\n\"Can you believe this place?\" Zeke asked, smiling widely as he shook Duncan's hand firmly. Amy immediately embraced Kelly and kissed her on the cheek.\n\n\"You both look so sexy tonight,\" she said, briefly eyeing Kelly and Duncan up and down. Kelly saw her eyes fixate on Duncan's crotch for a second before flashing back up to her. \n\n\"Wow,\" she mouthed. Kelly giggled and drew her in for a hug. She decided then and there that she liked the two eccentric police officers.\n\n\"You look incredible,\" Duncan said, leaning down and kissing Amy on the cheek. He held her out at arm's length briefly. She was wearing a very sexy tight dress in the same style as Kelly's, though hers was red. Her gorgeous blonde locks were pulled up off of her neck and styled to one side, giving a tantalizing view of her spectacular breasts and very alluring cleavage. She smiled as he kissed her cheek.\n\nZeke admired Kelly for a second before leaning down and pulling her in for a kiss on the cheek. \"You look stunning,\" he said with a smile. \"I think we're the two luckiest sons of bitches in town tonight,\" he said with a grin and clapped Duncan on the shoulder. \n\n\"I couldn't agree more,\" he said.\n\n\"So four of you?\" Paris interjected.\n\n\"Oh, I'm sorry, Paris,\" Kelly said. \"Yes, the four of us. Kara or Kimber if possible please,\" she said, selecting their two favorite waitresses.\n\nThe gorgeous, ebony skinned beauty checked her chart and then disappeared for a minute. Reappearing a few seconds later, she frowned. \"I'm sorry guys, it's going to be a wait for those sections. Is there anywhere else we can seat you?\"\n\n\"We don't mind waiting,\" Zeke said, glancing at Duncan and Kelly.\n\n\"Absolutely,\" Amy agreed. \"If those are y'all's favorites, we'll gladly wait.\"\n\nKelly smiled and glanced at Duncan, who nodded. \"We'll wait in the bar.\"\n\nParis smiled widely and gestured towards the other door. \"It shouldn't longer than 30 minutes,\" she said. \"I'll tell the bartender to let you know.\"\n\n\"Thanks,\" Kelly said with a smile. She followed Zeke and Duncan, entwining her arm with Amy's as the two women followed behind. Finding a few seats at the bar, they quickly arranged themselves and Duncan bought a round of drinks. Duncan sat on one end, Zeke on the other, and the wives in between.\n\nTaking a big swallow, Amy dove right in to address the elephant in the room. \"So... Zeke and I wanted to make sure you guys knew that we weren't always like that.\"\n\nKelly and Duncan both smiled. \"Well, we didn't figure you were.\"\n\nZeke laughed. \"I know, it must seem really odd, especially to another guy.\"\n\nDuncan nodded. \"It did throw me for a loop, but who am I to judge.\"\n\n\"I'm a normal dude,\" he said, looking at Duncan. \"I love football, barbecue, and poker just as much as the next fella.\"\n\nDuncan chuckled. \"I never assumed differently.\" Conversation was light for a few minutes then, but it was obvious that it was being steered back to what had occurred a few nights ago.\n\nZeke nodded. \"Well, Amy and I have recently decided to try and expand our horizons, as it were.\"\n\nDuncan chuckled and looked at Kelly, who was giggling. \"There must be something in the water,\" he said. \"That's what we decided recently too.\"\n\n\"We even call it the same thing,\" Kelly said with a smirk.\n\n\"No way!\" Amy said. \"We thought you guys were long time swingers!\"\n\nKelly shook her head. \"Nope, in fact, the girl you saw us with, my very dear friend Heidi, was our first foray into that world.\"\n\n\"Wow,\" Zeke said. \"I hope we didn't intrude on anything.\"\n\n\"Oh, no, no,\" Duncan said, smiling. \"It was fine. I certainly didn't mind,\" he grinned, winking at Amy. She blushed briefly and smiled at him.\n\nZeke spoke next. \"Well, we were always fans of the thought of sharing each other, though neither of us had ever done it. I've always been fascinated with being humiliated by my lovers for some reason, even growing up,\" he admitted.\n\n\"Was there a certain event that triggered this fetish?\" Kelly asked, genuinely curious.\n\n\"You know, we've discussed that before, but he can't recall the specific moment,\" Amy replied.\n\n\"My dad was a collector of porn, and so I was exposed to it earlier than most folks. I'm sure I saw something that triggered it when I was snooping around his stash. Amy and I would talk and fantasize about such things when we were intimate, but I really don't have a clue where it came from.\"",
        "\"We're just glad that you guys were so open to our little charade,\" Amy said. \"Anytime we discuss it with anyone, they just tend to think we're freaks.\"\n\n\"Aww, no way,\" Kelly said, smiling at Duncan.\n\n\"Well, you're in good company now, we don't think you're freaks,\" he said. He raised his glass and smiled.\n\n\"To not being freaks,\" Zeke said with a grin, and raised his. The group repeated it and downed their refreshments. Quickly ordering another round, Zeke glanced back at them.\n\n\"So that was actually our first time acting on that particular fantasy,\" he admitted.\n\n\"Wow, really?\" Kelly asked. \"That's actually quite surprising. Amy seemed to be such a natural at being a ball-buster that I figured she'd been doing it for awhile.\"\n\nShe giggled and glanced at Kelly. \"Well, being a cop definitely has its advantages,\" she agreed.\n\n\"That was really your first time?\" Duncan asked.\n\nZeke nodded. \"I think it went well. Amy did wonderfully, in my opinion. So what about you guys? Have y'all explored any other things with another couple yet?\"\n\nKelly shook her head. \"Just the couple of threesomes we had with Heidi so far.\"\n\nDuncan nodded in agreement. \"I think we're still trying to push our boundaries. We're working up to being able to share Kelly. We're not quite able to let ourselves go that far completely yet.\"\n\nZeke and Amy both nodded. \"What are you guys looking for in another couple?\"\n\nKelly and Duncan both looked at each other and shrugged. \"I'm not really sure we know that yet. We definitely want to be attracted to them, but that's obvious. What about y'all?\"\n\nHe coughed nervously and glanced at his wife. \"Well, we're looking for a couple that doesn't mind being in charge, so to speak,\" she whispered.\n\nZeke nodded. \"See, we're used to being the one in charge all the time. You kind of have to, being cops. The last thing we want in our sex lives is to be some ball-busting asshole. Amy likes it from time to time, but what really gets her going is to be under someone's control. We tend to switch off being the ball-buster in our own sex life, so when we thought about fooling around with another couple, we figured we could include that in our list of what we were looking for.\n\n\"That makes sense,\" Kelly said with a smile.\n\nAmy nodded. \"We thought so too. So what do you guys do to get out of your comfort zone?\" the little blonde asked.\n\n\"Well,\" Kelly said. \"Duncan picks my clothes out for me and he takes me out on the town and shows me off. That's how we started at least. We went on vacation recently to The Bahamas and we flirted a little bit more there.\" She told them the story of the trip while they listened.\n\n\"That's so hot,\" Amy agreed.\n\n\"You have to start out slow, though,\" said Duncan. \"We just get her out of her shell more, and then it's easier for me to follow.\"\n\n\"Your table is ready sir,\" the bartender said. Duncan tipped him and stood as the four began to head back to the hostess station.\n\n\"Right this way,\" Paris said as she saw them come into view. \"It looks like Kimber opened up first,\" she said.\n\nParis led them to their booth and set menus down. \"Kimber will be here shortly.\"\n\nKelly and Zeke slid in first followed by their spouses. \"Don't be surprised if Kimber doesn't have her top on,\" Kelly warned. \"She's got spectacular breasts and you can purchase her top for an hour.\"\n\nZeke glanced at Amy and grinned.\n\n\"I don't think we've come when she hasn't either already been topless, or gone topless halfway through.\"\n\nJust then, Kimber appeared carrying some drinks for a table near theirs. She glanced over and waved before making her rounds. She was indeed very, very topless.\n\nDuncan grinned at the wide-eyed stares of their guests.\n\n\"She's gorgeous, isn't she?\" Kelly asked.\n\nAmy nodded. \"Very,\" she agreed.\n\nDuncan chuckled.\n\nKimber finally made her way over to them. \"Hey Duncan, Kel, how are y'all?\" Kelly smiled and waved but Duncan stood to give her a quick hug, her magnificent breasts squishing excitingly into his chest.\n\n\"These are our good friends, Amy and Zeke Winger,\" Duncan said. Both smiled and shook her hand.\n\n\"You are incredible,\" Amy said.\n\n\"Thanks!\" Kimber said with a wide smile. She saw Zeke trying not to look at her chest and giggled. \"It's okay, Sweetie,\" she said, reaching over and lifting his chin. \"Duncan should have told you that it was okay to stare.\" She pulled his chin towards her face and stuck her breasts out tantalizingly.\n\n\"Wow,\" Zeke said. Kimber released his chin and winked at Kelly and Duncan. \"You can look too gorgeous,\" she said, looking at Amy. \"Don't think that I don't wanna see what you've got under that dress either.\" Amy blushed but smiled.\n\n\"Oh Kimber, behave,\" came a voice from behind her. Kara came around her then and hugged Duncan and waved at Kelly.\n\nAfter a few quick introductions, Kara had to return to her section. \"I wish I had room for you guys,\" she said, frowning. \"I've got to go. Nice to meet you guys!\" she said, waving at the other couple.\n\n\"Wow, she really does...\" Amy started to say.\n\n\"We know,\" Duncan interrupted with a chuckle. \"It's really uncanny.\"\n\n\"So what can I get you kids to drink?\" Kimber asked. They ordered drinks and Kimber disappeared.\n\n\"You've got some gorgeous friends,\" Zeke said.\n\n\"We usually get together with the whole group on Saturdays. You guys should think about coming.\"\n\n\"Is it...\" Amy started.\n\nKelly suddenly realized what she must be thinking and smiled. \"Well, it's not like we have orgies or anything, but this is the group we're most comfortable around. You'll see us loosen up and be freer than with other folks. Normally it's just dinner and drinking with friends, and we usually play a fun game or tell naughty stories to each other.\"\n\nDuncan nodded in agreement. \"When we first thought about fooling around with another couple, it was because of Marie and Ed, one of our sets of friends. They have an open marriage.\"\n\nAmy and Zeke listened intently for awhile as Kelly and Duncan described the group.\n\n\"Anyways, it's a good bunch of people. You guys will fit right in. We'll let you know when and where this week's is going to be held,\" Kelly said.\n\n\"So how flirtatious do you guys get?\" Amy asked as Kimber reappeared with their drinks. Conversation paused for a bit while they ordered, and only resumed when Kimber and her gorgeous knockers had disappeared.\n\nKelly smiled and slipped her foot out of her shoe quietly. \"We can get pretty friendly,\" she said, lifting her foot and running it up Zeke's leg. He looked up and chuckled, drawing Amy's gaze under the table. Snickering, Amy shook her head. \n\n\"You little tease,\" she said. She saw Amy scoot down in her seat a little and smiled when Duncan looked down. Her small foot appeared between her husband's legs. Amy was apparently, not going to be outdone.\n\nKelly smiled wider and lifted her foot, sliding it between Zeke's legs until it rested comfortably against his thigh.\n\nAmy glanced down and smiled, turning her gaze back to Kelly and winking. Kelly dropped her foot then and put her shoe back on, nudging Duncan to let her out.\n\n\"I'm going to run to the ladies' room,\" she whispered.\n\n\"I think I'll join you,\" Amy said. She slid up close to Kelly as they walked towards the bathroom together. \"I've got an idea, and a proposition for you.\"\n\n*****\n\nDuncan\n\nDuncan laughed and talked with Zeke for a few minutes while the ladies were gone. A short wait later, they reappeared but surprised the two men when Kelly took Amy's seat and Amy waited for Duncan to move so she could slide in beside him.\n\n\"We're expanding our horizons more,\" Amy said, glancing at her husband.\n\nDuncan thought it was a moot point, given that the blonde had given him an outstanding blowjob, he'd come in her mouth, and she'd subsequently swallowed it.\n\nKimber appeared then with a food runner and distributed their food.\n\n\"Everything good you guys?\" she asked.\n\nDuncan smiled and nodded. \"Thanks, Sexy,\" he said. She came over and glanced around, then pulled both of her breasts up with her hands and rubbed them in his face.\n\nHe chuckled as she turned and headed to check on her other tables.\n\n\"Little hussy didn't ask permission,\" Amy said, her hand straying to Duncan's leg.\n\nHe smiled and looked over. \"Sorry, Hon,\" he said playfully.\n\nHe looked up and smiled at his wife as the four began to eat. As they finished, Amy slid close to him again and began to stroke his thigh.\n\nKelly sat relatively close to Zeke, but Duncan knew that she wasn't being near as adventurous as Amy was.\n\n\"Your wife is trying to turn my husband on,\" she whispered, leaning over to Zeke. He smiled and looked up at Amy. She winked at him and nodded.\n\nThe check came, and the four got ready to leave.\n\n\"That was fun. We'll have to do it again,\" Duncan said, offering his arm to Kelly as they began to leave.\n\n\"Definitely,\" Zeke said, taking Amy's hand.\n\nAs they got to their vehicles, Amy came forwards and kissed Kelly on the cheek. \"Let us know what you guys decide!\" she said excitedly. Turning, she came up and pulled Duncan down for a more intimate kiss. \"I wish we had more time to play this evening, but Zeke's got the early shift tomorrow morning.\"\n\nDuncan smiled and pressed his lips to her silky smooth cheek. \"I'm sure we'll see you guys again soon.\" Turning, he shook Zeke's hand again. Kelly slid in between them then, and quickly pulled the back of Zeke's head down, her lips quickly finding his as Duncan stared in mild surprise. A quick, though intimate, kiss followed and Kelly released him as he grinned down at her. Looking up, he raised an eyebrow to Duncan and chuckled, causing Duncan to laugh in turn.\n\n\"Night guys,\" Amy said, pulling at Zeke's arm.\n\n\"Night!\" Kelly and Duncan called. Driving home, they spoke about what had happened.\n\n\"Shower?\" Kelly asked as they entered.\n\n\"Shower,\" Duncan nodded. A few minutes later, they were both naked and soapy, washing each other in their bathroom.\n\n\"I think everything went great,\" Kelly said.\n\n\"Truthfully, I'm surprised that it went as well as it did. That first dinner we had was pretty awkward with them.\"\n\nKelly nodded in agreement. \"I guess we needed to have something in common, sex!\"\n\n\"I think we need to slow down a little, though,\" Duncan said. She turned, a worried look on her face.\n\n\"No, no, no regrets,\" he said, smiling. \"I just don't want us to move too fast. There's a whole world out there and we just did like... 3 new things in 3 days.\"\n\nKelly grinned and relaxed. \"So what you're saying is you don't want that sexy little police girl to come over and suck the cum right out of you on a regular basis?\"\n\nDuncan smirked at her and shook his head. \"You're right. Ignore what I'm saying.\"\n\nShe giggled and pulled him down for a kiss. \"Still, though. I'm sure it will be a few days before we actually find another opportunity to fool around with anyone. Zeke and Amy are probably pretty busy, and for them to have a night off together is probably pretty rare.\"\n\nDuncan nodded as she washed him. \"So what did you guys decide in the bathroom.\"\n\nKelly grinned. \"First, she asked me if we could switch places and torture Zeke. Then she got in real close and asked if you and I would like to be the couple that they'd been looking for.\"\n\n\"Really?\" he asked.\n\nShe nodded and absentmindedly stroked his cock with a soapy hand. \"I was pretty surprised, but I told her that we would have to discuss it. She kind of... backpedaled then, embarrassed I suppose, and stammered that she didn't mean tonight. I shushed her and assured her that if we had time to talk, we would gladly take the opportunity and play with them tonight. I told her that we just weren't at that level of sharing yet.\"\n\nHe chuckled and shook his head. \"She's quite a walking juxtaposition, you know? She's a police officer by trade, someone who I wouldn't want to mess with during the day, and yet she's this timid, shy, unsure creature in the evening.\"\n\nKelly snickered. \"I don't know if I'd call her unsure. I think she likes falling into different characters. She was pretty convincing as the no-nonsense bitch.\"\n\nHe laughed and nodded. \"I'd forgotten about that.\"\n\n\"She's beautiful though, you know?\" Kelly said, washing the soap from her hands. \n\n\"I know, trust me,\" Duncan said. \"I really like the freckles on her face and the curly bounce to her hair.\"\n\nShe giggled and stroked him. Looking up, she reached around his neck and pulled him down for a kiss. \"I love you so much, Duncan.\"\n\nHe smiled and picked her up to kiss her. \"I love you, Kelly.\" She steadied herself on the wall as he returned her safely back to the ground. The two finished showering and went to relax in the living room. It was still relatively early in the evening, and Kelly went to check the email. Her dummy account had over a hundred new emails. Shocked, she hopped onto the couch next to Duncan to show him. All of the emails were nice, though some were a little icky or creepy in nature. Most were men and women telling her how gorgeous she was, how much they wanted to sleep with her, or to have her suck their cock. A few were rude, but she quickly learned to just delete those. Some people had been burned in their lives, and there wasn't anything she could do to fix that.\n\nThey read through most of them and then checked the main email account. Camille had sent another email, this time asking if they could come in on Tuesday evening for another shoot. She even offered to pay her more.\n\nDuncan smiled and looked down. \"It's up to you baby. I'm all for it. I love the way she makes you look.\"\n\nSmiling, Kelly agreed and quickly shot off a reply to Camille.\n\nThe next day, work was busy for the both of them again. They both tried to flirt a little, but it wasn't the same as Monday.\n\nKelly was stuck in meetings with potential clients all day and had dressed provocatively as a favor to her boss.\n\nShe kept thinking about the photo shoot that evening though, and was getting excited. Duncan picked her up at home after work and they both went to the studio to meet Camille. There were two cars there this time, so they entered quietly and waited. Camille came out and greeted them, waving them back.\n\n\"We can wait if you've got someone else,\" Duncan said. She glanced outside at the other car and smiled.\n\n\"That's what we need to discuss,\" she said. \"Y'all come on back to my office.\"\n\nKelly looked at him apprehensively and shrugged. He patted her back comfortingly and led her down the hallway behind Camille.\n\n\"The reception to your wife has been outstanding. I want to expand her photos and I'm even thinking about devoting a special section just to her. My subscribers are rabid for more content. I've teased the Yoga set to come out at the beginning of next month, but they want more!\"\n\nKelly blushed but smiled. \"I'm just so flattered, especially by most of the fan mail. Oh my God,\" she said. \"I just can't believe how much there was!\"\n\nDuncan nodded. \"I've always known she was a sexy thing, but this is crazy.\"\n\nCamille nodded. \"I'm not gonna lie, I'm making a killing off of your sexiness, and like I said, I want more of you. I'm here to convince you to do more photo sets. Hopefully eventually a video.\"\n\nDuncan and Kelly glanced at each other, and she could tell that neither were having second thoughts yet.\n\n\"What did you have in mind?\" Duncan asked.\n\nCamille smiled. \"Here's what I'm thinking, and please add or correct what you think would or wouldn't work.\"\n\nBoth nodded and leaned in to listen.\n\n\"First, we shoot Kelly and the other model I have here, Brigitte. It'll be a nice, non-sex type of shoot, but it will appear to the viewers that they are having sex. Like I said, this isn't really a hardcore type of website. I'm not opposed to that type of porn, but I'd rather shoot something that elicits a different type of response, you know? Something that resonates with my subscribers.\"\n\n\"Brigitte is a tall, Nordic goddess that will be a great visual juxtaposition with Kelly's small frame, short stature and fiery red hair.\"\n\nKelly nodded. \"I think I can handle that if you can, Honey,\" she said, glancing at Duncan. He smiled and nodded.\n\n\"Next, I want to shoot just Kelly by herself, and then we expand again. We do a shoot with another man, or with Duncan. I want to make it a massage type of set. This is where I want to convince her to start doing videos. I want it to start out with him massaging her, and then her massaging him.\"\n\nKelly smiled. \"I'm sure we'll consider it, but we'd definitely have to talk about that.\"\n\nCamille nodded. \"Once we get that one done, I want to do another just Kelly set, or two. Then, we can do another with more than one guy. I want to do a simulated sex video with two men and Kelly, maybe Duncan and one of my steady male models.\"\n\nKelly blushed but grinned. \"We'd definitely have to talk about that one,\" she said.\n\nDuncan chuckled. \"I don't know baby, I might like to see you squirm a little,\" he said with smile.\n\n\"I'm getting carried away though. Let's just focus on today. I want you to shoot with Brigitte. It's not sexual in nature, not really,\" Camille said. \"I mean, yes, you'll both be nude eventually and there will be some touching, but I'm not trying for this set to be just pornographic, just erotic. I want to see what it looks like when two very different women are together. You're very small and the model you'd be shooting with is 6'3\", I think.\"\n\nKelly nodded. The idea was intriguing, after all. The doorbell to the studio buzzed and Camille stood. \"That's Brigitte,\" she said. \"Think about it while I go let her in.\"\n\n*****\n\nKelly\n\nKelly turned and looked at Duncan. \"I don't know,\" she said. \"What if she's like...ugly... or something,\" she said, whispering the word ugly.\n\nDuncan laughed at her. \"I don't think Camille would want to take pictures of her then.\"\n\nThe door opened then and Camille entered with a large blonde woman, obviously of Scandinavian descent.\n\n\"Kelly, Brigitte, Brigitte, Kelly,\" Camille said, introducing the two.\n\n\"Hello,\" the tall woman said. She had an amusingly thick Scandinavian accent. Her body was flawless, however, and Kelly was immediately intimidated.\n\n\"Wow,\" she said. \"You're gorgeous.\"\n\nThe tall blonde woman smiled. \"Thank you, but you're just as beautiful,\" she said.\n\n\"So what do you say?\" Camille asked, smiling.\n\n\"Let's do it!\" Kelly said, smiling up at the large woman.\n\nCamille had the two enter the photo studio and strip down, electing to start the shoot with them completely dressed. They took an entire series of pictures with clothes on in a variety of positions. The photographer had Brigitte hold Kelly in a variety of poses. Finally, she had the two models strip down completely.\n\nKelly continued to feel intimidated by the larger woman, but gradually began to feel more comfortable as the photo shoot progressed.\n\nThe first of the nude series of shots was of the two standing next to each other. They faced different directions, held different poses and the like. Eventually satisfied, Camille had Kelly stand in front of Brigitte. She felt tiny in front of the giant blonde, but it was still pretty exciting. She giggled when she felt the blonde's large breasts brush against her head.\n\n\"Let's work up to some simulated sexual positions,\" Camille said. \"Kelly, Brigitte, if you get uncomfortable just let me know.\"\n\nBoth girls nodded.\n\n\"Okay, Kelly why don't you reach up behind you and hold up both of Brigitte's breasts. Nice. Okay, not so high this time.\" Kelly tried to do as she was asked, and fought to keep from laughing.\n\nCamille had Brigitte cup a hand over both of Kelly's breasts, and then had Kelly facing towards the tall blonde, her face buried in her cleavage.\n\n\"Okay, Brigitte, lift Kelly up from behind.\"\n",
        "Kelly looked back and felt the strong woman lift her easily up. \"Woop!\" Kelly said, trying not to fall.\n\nDuncan chuckled across the room.\n\n\"Excellent, now spread her legs,\" she said. \"Kelly let us know when your legs get tight.\"\n\nShe felt the woman spread her legs out until her pussy was spread, and she was basically doing the splits snugly in the woman's arms.\n\n\"That's fucking hot,\" Duncan said.\n\n\"Okay, you can put her down,\" Camille said. \"Let's move over to the bed now. Kelly, let's get you up on your knees, Brigitte, you come up behind and on top of her.\"\n\nKelly did as she was told, moving quickly to her knees as she felt the larger woman over the top of her. She didn't even have to crouch, the woman actually dwarfed her.\n\n\"That's hot,\" Camille said, snapping a few pictures. \"Kelly, look back at her like she's doing something naughty.\"\n\nKelly turned her head back and caught herself looking up at the gorgeous woman. She had very pretty blue eyes.\n\n\"Very nice, now grab a handful of Kelly's hair and act like your pulling it. Beautiful,\" Camille said.\n\nKelly felt Brigitte's hand grab a handful of her long red tresses and pull. Gentle pain shot through her head and she winced slightly, but the sensation passed and she felt herself getting slightly turned on.\n\n\"Gorgeous,\" Camille said. \"You two look great together.\"\n\nShe moved Kelly to lay on the bed prone, with Brigitte's larger form directly over the top of her, as if she were fucking her. The image of the larger woman dwarfing the smaller was strangely very erotic.\n\n\"Okay Kelly, give me a face like there's something nice and hard inside you right now.\"\n\nShe did her best to comply with what the photographer was asking, her face contorted in mock pleasure.\n\n\"Gorgeous,\" Camille remarked and snapped off a dozen more pictures. \"Okay, Brigitte, move back behind Kelly and let's do some simulated oral sex on her, with her on her knees. Everyone okay with that?\"\n\nKelly nodded along with her partner, who moved back as Kelly returned to her knees. She felt the woman's long blonde hair tickling her butt cheeks as she lowered her face down to make it look like she was licking her ass.\n\n\"Okay, now spread both of her cheeks if you can,\" Camille ordered. \n\nKelly inhaled then, feeling herself getting more turned on and briefly felt a slight brushing of something against her slit.\n\n\"Sorry,\" Brigitte said. \"I'm trying not to get too carried away, but you're absolutely intoxicating.\"\n\nKelly absolutely loved her thick accent, and it was definitely having an effect on her. She bit her lip seductively and looked behind her as Camille continued to shoot pictures. The blonde woman had her tongue out and was pretending to lick at Kelly while looking up at her. \n\n\"You don't need to apologize,\" Kelly said, winking back and hoping that Camille got it all.\n\nIn response, Kelly felt a warm tongue slide slowly up her pussy and probe gently at her asshole.\n\nKelly moaned and closed her eyes. \n\n\"I'm sorry,\" Brigitte said, as she stopped tonguing Kelly.\n\n\"As I said, you don't need to apologize.\"\n\n\"Very nice,\" Camille called. \"Let's get another set of those. You two can get as friendly as you like as long as we can keep changing positions,\" Camille said.\n\nKelly grinned and glanced over at Duncan. He was sporting an erection she could see from across the room. She looked back at the large blonde woman as she resumed the pose behind her. Camille continued clicking away as Brigitte came forwards and ran her tongue up Kelly's slit again. She gasped in pleasure as the blonde gently pushed her tongue into Kelly's ass.\n\nCamille continued to take pictures, and Kelly knew that she had to have captured a particularly erotic look on her face.\n\n\"Very nice,\" Camille said. \"Now hold your pose and let me come around. She clicked the camera off the tripod and moved quickly, getting a few pictures of Brigitte holding Kelly's ass cheeks open, and then some more of the gorgeous blonde's tongue pushing into Kelly's soaked pussy.\n\n\"God that's hot,\" Camille said. \"Okay, Brigitte, let's get you on your back and underneath Kelly.\"\n\nThe blonde complied quickly, turning over and sliding underneath the diminutive redhead.\n\n\"Okay, let's transpose positions a little. Brigitte you're the big and strong one, but this time I want Kelly to be pulling your face up into her, if that's okay.\"\n\nKelly grinned and reached underneath and back behind her. The blonde helped Kelly find her head and lifted her face to Kelly's pussy once again.\n\nCamille's camera clicked repeatedly as Brigitte licked at her pussy again and again.\n\n\"Whew, she's really good at that,\" Kelly said, moaning in pleasure.\n\nCamille took a few dozen more pictures of the blonde sucking at Kelly's pussy before having them change again.\n\n\"Okay, let's go back to the first dynamic of Brigitte being the dominant one. Kelly, you lay down between her legs and let's simulate some oral sex on her. Brigitte, you let Kelly do it her way for a second, but then you take over and grab her by the hair and make her do it the way you like. Kelly, I want you to keep your gorgeous ass in the air the whole time, and arch your back.\"\n\nGrinning, Kelly nodded and moved into her appointed position. She looked up at the gorgeous blonde as she peered down over her mountainous breasts. \"Do you mind if I return the favor?\" Kelly asked playfully.\n\nThe blonde nodded her assent silently and smiled.\n\n\"Let's start slowly, kissing thighs and what not. If it's simulated or not is up to you two, of course,\" Camille said.\n\nKelly nodded and lowered her head, kissing the woman's thighs and then moving to nuzzle the tall blonde's pussy. She lowered her head then, her eyes just at the level of the blonde's pubis and pressed her tongue flat against her pussy.\n\nThe camera clicking repeatedly, Camille moved quickly around them and got a variety of shots of the action. Kelly licked at the blonde gently, obviously still a little nervous and didn't penetrate very much.\n\n\"Okay Brigitte, go ahead and take over,\" Camille ordered.\n\nBrigitte lifted her head up then and reached down, grabbing two handfuls of Kelly's gorgeous hair and pulling on it. The action pulled Kelly deep against her pussy. Unable to resist, and thoroughly turned on by the roughness with which she was being handled, Kelly plunged her tongue deeply into the blonde, who moaned in pleasure and craned her neck back.\n\nKelly moved upwards, her tongue sliding up and her lips finding the blonde's clitoris. Camille was quiet then, continuing to shoot pictures as the smaller woman was forced to lick the blonde's pussy.\n\n\"Okay,\" Camille said. \"Let's move back to a standing position for these next shots.\"\n\nBoth girls extricated themselves from the position and wiped themselves clean with a couple of towels.\n\nShe had Brigitte lift Kelly up again, this time sitting on her shoulder so that Brigitte could appear to lick her pussy. It was a little awkward positioning, but it still felt good. After that series, she had her spin Kelly upside down and lay her legs over the blonde's shoulders. She got a few more up close shots of the blonde's tongue dunking into Kelly's soaked cunt.\n\n\"That's good. Okay, so this last set is where Brigitte establishes her total dominance over the nubile redhead. Kelly, let's get you sitting on your knees, legs folded underneath you and your feet flat out behind...exactly, perfect,\" Camille said.\n\n\"Okay now, Brigitte I think you know where I want you,\" she said.\n\nSmiling, Brigitte nodded and walked directly up to Kelly, her pussy a few inches from her face as Camille took more pictures.\n\n\"Okay, now reach down and grab her head.\" Camille snapped a few more pictures.\n\n\"Tilt it back,\" she said, still clicking. \"Nice, now drop your pussy directly onto her mouth,\" she ordered.\n\nKelly grinned and opened her lips, her tongue waiting as the blonde came up and began to rub her face up against her pussy.\n\n\"God that's hot,\" Camille said, snapping the last few pictures. \"Okay girls, that's got it for today,\" she said. \"I'm sorry to end the fun.\"\n\nKelly slurped rudely at the pussy in front of her one more time and smiled. The two women embraced then and went to get cleaned up and get dressed.\n\nThe tall blonde came over then, after the two had finished getting dressed again and leaned down to give Kelly a quick peck on the cheek.\n\n\"I hope we can work together again sometime,\" she said.\n\n\"Me too,\" Kelly replied, smiling excitedly.\n\nThe Scandinavian turned and left then as Duncan came over and smiled. \"That was really hot, baby! You're going to love them!\"\n\nShe came over smirking and quickly put on her clothes. \"Did you see how tall she was?\" Kelly asked.\n\nDuncan nodded. \"She's about my height. That was something else. Did you enjoy yourself?\"\n\nKelly nodded after a few seconds of contemplation.\n\nChuckling, Duncan went and collected her check from Camille. \"Call me if you guys want to shoot a video any time soon,\" she said, smiling. \"Otherwise, I'll call you next week for another photo shoot.\"\n\nChuckling, Duncan nodded and took Kelly by the hand and led her out. As they hopped into Duncan's truck, Kelly immediately slid over in her seat and began to work his cock free. As he pulled out of the parking lot, she inhaled the tip of his cock and began to suck, her tongue swirling around the bulbous head. \n\n\"Mmm,\" she mumbled, licking the tip as pre-cum oozed out. He swelled to full size quickly, still thoroughly excited from her session with the blonde giant. Kelly grinned up at him and then took his cock back in her mouth.\n\n\"Did you like when that gorgeous stranger was licking your pussy?\" he asked. She moaned around his cock as she slurped. Pulling the tip out, she giggled and turned her head to look up.\n\n\"I certainly did. She had a very persuasive tongue.\"\n\nDuncan grinned and forced his gaze back to the road. He kept it under the speed limit, but barely. While Kelly continued to rhythmically suck up and down on his iron staff, he forced himself to watch the road. Eventually they made it home, and Kelly quickly hopped out after him, her hand stroking his cock as he desperately tried to find his key for the door. He managed to drop it twice before finally sliding it into the lock as Kelly dropped to her knees and sucked him in at the front door. \n\nGroaning as she took him as deep as she could, he raised his arms above his head and moaned skywards. A few seconds of his gorgeous redhead bobbing at his crotch was all he could stand before he finished opening the door and lifting her up. Kicking the door closed with his foot, he spun her around and yanked her skirt up. Sliding her panties to the side, he pushed her to the kitchen table and rubbed the tip of his cock against her sopping pussy.\n\nGroaning, she pushed backwards against him in a successful attempt to get him to slide into her. It worked, surprisingly, and he groaned as her silky pussy slid completely down on him, its warm slithering wetness enveloping and caressing his thickness. She absolutely loved the way it felt.\n\nHe groaned and she felt his hands on her hips. Turning back and smiling, she watched as his expression contorted. She knew he was close, but he was trying to fight it. He looked down at her and grinned. A thoroughly naughty idea popped into her head.\n\n\"Close your eyes,\" she ordered. He smirked but did what she asked, though he didn't stop sliding into her drenched cunt. She glanced back and verified that he wasn't looking before continuing.\n\n\"I want you to picture the very womanly curve of Amy's beautiful ass. I want you to picture her on her knees with you behind her, her face buried in my pussy.\"\n\nDuncan grinned, though he kept his eyes closed and gripped Kelly's hips even more roughly.\n\nShe could feel her own orgasm getting close as she spoke.\n\n\"Fuck...\" she moaned. \"Think about her blonde hair bouncing as she devours my cunt, and how much you want to cum inside her.\"\n\nDuncan groaned then, and Kelly could tell he was there. She felt her own orgasm crest then and soon it washed over her, her body filling with pleasure as she grunted and groaned, her pussy clenching down on him.\n\nAs he finished, Duncan pulled his still erect cock out and slid it up and down her snatch for a few seconds, before coming forwards and lifting her up to go shower.\n\n\"I think it's safe to say you liked the photo shoot,\" she said.\n\nHe smiled. \"Hell yes I did.\"\n\n*****\n\nKelly\n\nThe rest of the week seemed to fly by as Duncan and Kelly went about their work. They were able to spend a little time in the evenings together, have dinner and make love, but then it was back to work. By the time Saturday rolled around, the two were pretty well worn out. They decided to relax all day Saturday, though they both did do a few chores around the house.\n\nMarie called them to let them know that she was hosting the party that evening, and that they should bring bathing suits.\n\n\"Would you like to invite Kara, and the Wingers?\" he asked as they lounged on the couch.\n\n\"Sure,\" Kelly said, picking up her phone. She quickly called Amy and asked what they were doing. They conversed politely for a few minutes before Kelly let her know what was going on tonight. She smiled then. After finishing the conversation, Kelly turned and nodded.\n\n\"Amy and Zeke are free but can't stay too late; both are working the next day. They're trying to get it worked out so they'll have some Saturdays off going forwards. She said they'd meet us there.\"\n\n\"Kara should be free, too,\" Duncan said. Kelly nodded and called her look-alike. Grinning, she nodded and told Kara just to meet them at their house and they could all go together.\n\nThat evening, Duncan and Kelly got dressed in clothes they picked out for each other. Duncan selected a slinky red dress that accentuated Kelly's curves. Kara rang the doorbell and Kelly went to let her in. She was wearing a similar dress, but hers was blue. The two women began to chatter and complement each other.\n\n\"Hey, Boss,\" Kara said. \"You look handsome.\" She leaned in as he bent down to kiss her cheek.\n\n\"You ladies look stunning,\" he said, smiling. \"Are y'all ready to head out?\"\n\nKelly ran to the restroom very quickly, but then they all piled into Duncan's truck and drove to Ed and Marie's house. Zeke and Amy arrived at the same time as Duncan, and he hopped out to go greet the two.\n\nQuickly introducing Kara to the two again, Duncan took a second to whisper how gorgeous Amy looked, and to shake Zeke's hand.\n\nKelly and Kara were holding hands and whispering closely with Amy as Duncan and Zeke walked behind them. Kelly glanced back and whispered to her cohort briefly, causing them both to giggle. Duncan shook his head and smirked.\n\nReaching up, Kelly rang the doorbell. A few seconds later, Ed's goofy, smiling face appeared.\n\n\"Smurfette number 1 and Smurfette number 2!\"\n\nKelly and Kara giggled and hugged Ed as he opened the door.\n\n\"Hi, Ed. You goofy bastard,\" Kelly jabbed.\n\nHis smile didn't diminish, but he did turn and shake Duncan's hand. \"Hey there, Kemo-sabe,\" he said. \"I've got some spectacular Scotch that you just have to try.\"\n\n\"Ed, these are our good friends Zeke and Amy Winger.\"\n\n\"Any friend of Duncan's is a friend of mine. Can I offer you a Scotch, Zeke?\"\n\nNodding and shaking the older man's hand, Zeke entered after his wife.\n\n\"Kelly, would you be a dear and get yourself and these other two lovely ladies a glass of wine?\"\n\n\"Certainly,\" Kelly said, turning and leading the two away.\n\nAfter everyone was sufficiently refreshed with drinks, Kelly headed towards the back.\n\n\"Ladies, everyone is outside so just head on back,\" Ed said.\n\nThe six of them, led by Kelly, made their way through the house. She turned and looked at Duncan, Zeke, and Ed and raised a warning finger. \"We know you're watching our asses,\" she said, smirking.\n\nThe three men looked at each other and then back at her. \"And?\" Ed said. \"You're not wrong.\"\n\n\"I was just making sure you were,\" she said, turning around and continuing on. She added a little extra bounce to her step, her hips swaying seductively. \n\nThey laughed and followed, the three of them watching the two redheads and their blonde companion as they taunted them with their superior posteriors. Kelly led them through the house and then out to the expansive backyard. The pool light was on, and the hot tub was running. There was a large table that a few people were sitting at, the rest were getting food from another table.\n\nEveryone turned and milled around to hug Kelly, Duncan, and Kara.\n\nKelly cleared her throat then and stood by Zeke and Amy.\n\n\"Everyone, I'd like you to meet a couple of new, but very good friends of ours. This is Zeke and this is Amy,\" she said, pointing to each of them in turn.\n\n\"You sure, I thought she was Zeke,\" Mark said, drawing a kicked shin from Becky.\n\n\"Shut it, Mark,\" Kelly said. \"Zeke and Amy are police officers, so behave yourselves.\"\n\nSmiling shyly, they both waved. \n\n\"Anyone got any weed?\" Zeke said suddenly.\n\nCaught off guard, everyone laughed loudly.\n\n\"You're so bad,\" Amy said, leaning into him.\n\n\"Zeke and Amy, let me introduce you to our steadily growing group. You met Ed, he's Marie's husband.\" She pointed to the leggy brunette who waved in response. \"This is their lovely home. Standing next to them are the beautiful sisters, Rachel and Becky. They are currently both involved with that rakishly handsome fellow standing next to them.\"\n\nBecky and Rachel both waved politely, but Mark came up close behind the two sisters and grabbed a breast of each of the girls, causing them both to roll their eyes and shake their heads in resigned acceptance.\n\n\"Just marking my territory,\" he said with a grin.\n\nRachel shook his hand off and walked over to Ed to snuggle close. \"I might have to just change my mind if you don't watch it, buster.\"\n\nThe two newcomers chuckled along with everyone else.\n\n\"Mark... behave yourself,\" Kelly said sternly. He held up his hands in defeat as Rachel came back to stand next to her older sister. \"Next is Dana, Drake, and Molly. Dana is currently unattached, but Drake and Molly are married.\"\n\nKelly turned then and smiled widely.\n\n\"Kimber and Erin!\" Kelly she said, and ran over to hug the two. \"What are you two doing here?\"\n\n\"Marie and Ed invited us,\" Erin said. Duncan came over then and kissed both on the cheek.\n\n\"Hi, Duncan,\" Erin gushed, her smile wide.\n\nKimber rolled her eyes and nudged her roommate. \"Hi, guys,\" she said. \"Contain yourself,\" she said, turning back to Erin.\n\nErin stuck her tongue out at her friend, drawing a laugh.\n\n\"Hi, Kara,\" Kimber said. \n\n\"Hey Kimber,\" she replied.\n\n\"I think that's everyone,\" Kelly said, smiling. \"I didn't get a chance to tell any of my gang what type of party this is, Marie, other than a pool party. Care to enlighten everyone?\"\n\nMarie smiled as everyone turned. \"Well, as some of you know, this my first official \"No Penetration Pool Party\"\n\nThere was a low rumble of conversation briefly.\n\n\"That sounds like an odd name for a party,\" Becky said.\n\n\"Well,\" Marie began, \"We talked about swinging a month or so ago, and I could tell that you guys weren't quite ready yet. I just figured that this was a fun way to broach the subject again. We're all getting pretty friendly with each other, and I don't think anyone would mind seeing each other naked. Obviously, if you don't want to participate, you don't have to.\"\n\nThere were more than a few snickers then, and a few cursory glances around at the others.\n\n\"So once we finish this delicious meal my husband made, we'll strip down to whatever you feel is a comfortable level of undress and get in the pool to play some games. You're welcome to wear a bathing suit, or go completely nude.\"\n\n\"And the No Penetration part?\" Mark asked.",
        "She smiled. \"Well, once everyone is nice and a little drunk, things can get a little handsy and gropey.\"\n\n\"Wasn't that two of the seven dwarves,\" Drake quipped, drawing a laugh. Molly slapped his shoulder.\n\n\"Here are the rules. One, light touching, rubbing, and kissing is allowed. Two, no penetration of the mouth or any other orifice. Three, no means no, though I don't think that one is going to be an issue. Everyone agree?\"\n\nNods and smiles greeted her in response, and everyone agreed to the rules. The general mood seemed to Kelly to be one of nervous cheerfulness, and everyone seemed to be excited about the rules and the party. There was definitely an air of electricity though, and Kelly supposed it was the notion of seeing each other naked.\n\nThe murmur of conversation rose again as everyone began to talk and prepare their plates.\n\nDinner was nice and the conversation was light. Kelly figured that Marie wouldn't behave herself and would spill the beans; either about the threesome they'd had the week before, or the photo-shoot. She was proud that her friend made it through the whole meal without embarrassing her, nearly one whole hour.\n\n\"Anything new happen lately, Kelly?\" Marie said after they'd finished and were milling around the backyard and talking.\n\nKelly grinned and shrugged. \"I did a new photo-shoot this week.\" she said with a smile. \n\nMarie then interjected and began to tell everyone about Kelly's photo shoots and the website.\n\n\"So yeah,\" Kelly said finally. \"My third shoot was on... Tuesday. Camille sent me one of her favorite photos, and I have it here if anyone wants to see it.\"\n\nDuncan chuckled as the rest of the guys immediately moved forward.\n\nKelly opened her phone as they crowded around, then opened her email up and found the pictures. She clicked the first one and made it full screen and then handed it around. Everyone really seemed to like it. The photo was of Brigitte and Kelly, both in lingerie and standing, one in front of the other.\n\nShe could tell that Marie was a little disappointed, but she had a trick up her sleeve. Winking at her, she clicked the photo off and then went to the next one. \n\n\"This one is a little bit more risqu\u00e9, so if you're easily offended...\" she said, trailing off. She clicked the picture to full screen and handed the phone to Kara.\n\n\"Oh my God!\" Kara said, smiling. The phone began its trek around the group, each one surprised at Kelly's brazenness and the eroticism of the photo.\n\nKelly was on her knees on the bed, nude, her red hair was splayed across one shoulder and across her back. Brigitte was behind her, her eyes visible just above Kelly's gorgeous rump, her nose seemingly pressed into Kelly's supple flesh. One arm was visibly coming up and pulling a bit of red hair, drawing Kelly's face upwards. Her eyes were closed and mouth open in a look of pure ecstasy. The photo made her feel very sexy, and she was very proud of it.\n\n\"Wow,\" Marie said, handing the phone back.\n\nThe ruckus of the conversation drew the attention of the men, and soon they had wandered back over. Kelly finally relented and showed them the pictures. Duncan grinned widely as he looked.\n\n\"Wow, Baby!\" he said. \"Those turned out really sexy!\"\n\nShe winked and smiled at him. \n\n\"Damn,\" Mark said. \"What's this website and when are these gonna be up?\" \n\n\"Month or so,\" she said. \"There's a yoga set going up this weekend I think, and then this one will go up after that. I'm still not sure of the schedule. I've got another shoot coming up this coming week. I'll send you the link, though,\" she said with a wink.\n\n*****\n\nDuncan\n\nThe evening progressed nicely. Kara had gone and talked to several different people and was integrating nicely. Amy and her husband were comfortable as well. They'd begun to ask Marie and Ed a plethora of questions about the Lifestyle and the choices they'd made. The liquor was flowing freely and everyone seemed to really be enjoying themselves. Amy made a point to come over when Duncan wasn't occupied and draw him to the side. She got really close to him and looked up at him innocently.\n\n\"You know, if you and Kelly are the couple that my husband and I have been looking for, all you have to do is tell me what you want, and I'll do it.\"\n\nDuncan smiled and kissed her forehead. \"Just have fun tonight.\"\n\nShe smiled and sighed happily as he kissed her. \"I definitely will. I just wanted you to know that if you want anything, anything at all, all you have to do is ask me and I'll do it.\"\n\n\"So... hypothetically...\" he began, a mischievous look on his face, \"If I told you to drop to your knees and give me a blowjob...\"\n\n\"All you need to do is ask,\" she said, smiling innocently up at him.\n\nHe grinned and nodded. \"I will definitely remember that.\" She moved back over to her husband and smiled back at Duncan while he went back to talking to the guys.\n\n\"That water looks really nice,\" Kara said, moving over to stand next to Duncan, Drake, and Ed.\n\n\"You're welcome to jump in,\" Ed said with a grin.\n\nKara smiled. \"Well, I wouldn't wanna to get in alone, plus I don't know about being the first to get undressed.\"\n\n\"You don't have to get undressed if you're uncomfortable,\" Duncan said.\n\n\"Well, it's not that. I'm going to play along as much as everyone else.\"\n\n\"Maybe this will help,\" Ed said, heading over to the pump and switching off the pool light. The backyard darkened considerably, but with the tiki-torches and the back porch and lawn lights, you could still see a good deal.\n\nGrinning, she nudged Kelly and whispered something. Duncan saw Kelly grin and nod quickly. The two girls walked hand in hand to the edge of the pool behind where he was standing. He turned and saw them beginning to strip. Kara had on a black silk dress that hugged her form seductively, and black g-string panties. She smiled at the three men as they watched her with rapt attention. Her 26 year old, nubile young body was incredible. Her breasts were perky and full, and her nipples were erect from the excitement of the situation. The garment slid off of her shoulders and then she stepped out of it, before tossing her shoes aside. The small crowd of onlookers cheered at her boldness, and she blushed.\n\nKelly caught their attention then as she stripped out of her blue skirt and black top. Her breasts were smaller, but still impressive as she shed her clothes. Biting her lip, she smiled back at Duncan before stepping out of her shoes and slipping into the water with Kara holding her hand. Gentle ripples lapped at the succulent flesh of the two young women.\n\n\"Wow!\" Kara said, looking up at Duncan. \"This water feels great! You guys have to come in.\"\n\nMarie came over then and began to strip down. The other girls seemed to cave, seeing Marie, and all crowded around and began to get undressed. They all went in with panties on, but nothing else.\n\nEd was the first to join the group of women. He stripped out of his clothes and quickly hopped in, in his boxers. Drake followed suit, but was sure to keep his boxers on as well. Finally, Mark shrugged and stripped, joining the growing group. Amy and Zeke even began to strip down to their underwear, both electing to stay clad in their bottoms, and slid in to the cool water. Eventually, only Duncan, Dana, and Molly were left.\n\nThe two sisters came over to him then and he smiled.\n\n\"So are you going to get in?\" Dana asked, looking up at him hopefully.\n\nHe chuckled. \"I tell you what, I'll get in if you ladies get in.\"\n\nDana shook her head. \"Oh no, I'm way too self-conscious for that.\"\n\nHe turned to Molly. \"What about you?\" he asked, his finger sliding underneath her spaghetti strap dress.\n\nShe eyed him suspiciously and grinned. \"Well, if you keep doing that, I guess I'll have to.\"\n\nDuncan smiled knowingly and pulled the strap, moving around behind her and then lifting the other off her shoulder. In the pool, everyone had started splashing each other, but stopped when Duncan began to undress Molly.\n\nShe bit her lip nervously as she felt everyone's eyes on her. He chuckled and came up close behind her.\n\n\"You're gorgeous baby,\" Drake called.\n\nShe sighed with a smile on her face as Duncan dropped her dress to the floor. She quickly took off her own bra though, and slid into the water with everyone else.\n\nDuncan turned and saw the trepidation in Dana's eyes.\n\nHe put a hand up and shushed her. \"Come here,\" he said, his voice calm, but deep and commanding.\n\nShe chewed her lips but obeyed, shuffling forwards.\n\n\"Close your eyes,\" he said.\n\nNervously, she looked up at him briefly before doing as he commanded. He ran a finger along her neck and then down, to the strap holding her dress up.\n\n\"You have an incredible body, you are a beautiful woman, and any guy would be lucky to have you,\" he said. He slowly slid the strap off, and then began to slide the other one.\n\nShe reached up with both hands then to stop the garment from falling, and looked up at him.\n\nHe kissed her on the forehead and reached down to her hips. \n\n\"I promise, I'll get in with you.\"\n\nShe nodded nervously as he turned and began to take off his clothes. \n\nThe girls in the pool began to whistle then, and the splashing game resumed. Duncan glanced over at Kelly, who smiled and nodded at him.\n\nHe stripped off his pants then, and tossed the rest of his clothes clear of the splash zone. Glancing over at Dana, he chuckled when he saw she hadn't made any progress.\n\n\"Come on,\" he said, holding out his hand.\n\nShe grimaced in embarrassed silence, but reached out for him and let her garment drop. She wasn't wearing a bra, and Duncan was truly taken aback at how nice her breasts were.\n\nSeeing him staring, she blushed.\n\nHe quickly smiled and shook his head. \"You are magnificent,\" he commented.\n\nShe smiled shyly at him, but grasped his hand, nonetheless.\n\n\"Ready when you are,\" she said.\n\nGrinning, he slid into the water with her and began to join in the fun. Someone found a ball and a game of keep away began. The drinks flowed liberally and the evening wore on. The group friends played several different games that allowed for the occasional grope.\n\nAt one point, Mark dunked Rachel and she came up sputtering for a moment before diving underwater. He yelled and kicked for a minute, but she emerged with his boxers and tossed them to the side of the pool.\n\n\"Ow,\" he said, \"No grabbing the junk.\"\n\n\"Don't dunk me,\" she warned, grinning.\n\nMark dunked her again, and her sister came to her rescue, surging from the water and landing both hands on his head to try and pull him down. Rachel came up and began to assist her, but it was no use. Mark shrugged them off easily, and managed to yank Becky's panties off in the process.\n\nKimber came up behind him then, and the three of then fought to take him down. Finally, with a yell of triumph, the three women succeeded in forcing him under the water. He didn't immediately emerge, but then Rachel and Kimber suddenly squealed in alarm and began to slap the water.\n\n\"Stop it!\" Kimber yelled.\n\nDuncan chuckled as Mark came up, holding two more pairs of panties.\n\n\"Serves you girls right,\" Ed said. \"Three versus one is hardly fair.\"\n\nKelly grinned over at Duncan and nudged Amy and then nodded at Ed. Smiling, she nodded and the two moved forwards and began to circle him.\n\n\"Ladies...\" he warned. \"I don't fight fair.\"\n\nBoth girls ignored him and surged forwards. He caught Kelly and wrapped an arm around her. She slapped at his arm to get him to let go, but it was to no avail. Amy proved to be harder to get to and she slipped past his grasp and dove under the water, emerging with the boxers that they'd sought.\n\nCheering, Kelly stopped fighting him and relaxed in his arm. He lazily wrapped it around her torso, his arm crossing her collar and resting on her shoulder. She floated lazily in the water, her perky nipples and the rings in them just breaking the surface.\n\nErin swam too close to Duncan then, and he grabbed her and pulled her to him. Her hand wandered back to brush against his swelling member.\n\n\"I like this game,\" she said, smiling up at him. He winked and released her. She dove underwater.\n\n\"Last one with underwear on gets the prize,\" Marie yelled, causing a sudden surge of splashing water. \"If you get your underwear removed, you have to move out of the way and can't participate.\"\n\nEd, Mark, Rachel, Becky, and Kimber all grumbled and moved to the edge of the pool.\n\nErin and Molly both surged for Duncan, but he stopped them both and pulled them to him.\n\n\"Amy,\" he called, holding both of the women out of the water. \"Would you be so kind as to remove their panties for me?\" he said.\n\nShe grinned widely at him and mouthed, \"Yes, sir,\" her eyes smoldering at him. She reached down to a kicking Erin's waist and quickly stripped off her panties, and then followed suit with Molly. The crowd cheered briefly as they got an eyeful of Erin's bald pussy and Molly's modestly trimmed one.\n\nEd was still holding Kelly, and Drake seemed to be sweet talking her out of hers. Duncan could only guess as to what was going on under the water. Kelly rolled her eyes and giggled and he saw Drake suddenly holding her panties.\n\nShe wriggled free and swam away as he tossed them out. Turning, she winked at Duncan. He released Molly and Erin, but only Molly swam away. Kelly came up to him and kissed him deeply as Erin hovered near the two of them. She pulled the younger girls close as both girl's hands began to wander under the water. He could see one of Kelly's hands stray forwards across Erin's breasts, eliciting a surprised gasp from the pretty girl, and the other went back to join Erin's other hand as they both began to gently stroke Duncan as he wrapped his arms around them.\n\n\"A fella could get used to this,\" he said. Kelly giggled and turned to kiss Erin. \n\n\"She's just so damn cute, you know?\" she asked him, indicating Erin. The look on Erin's face was humorous, but spoke volumes about how turned on she was getting.\n\nDrake and Molly both moved towards Dana, who was backpedaling to the deep-end. She couldn't outrun them, though, and they quickly dove towards her. Her panties successfully removed, she moved towards the edge of the pool and began to talk with Mark and Rachel. Finally, it was Duncan, Marie, Amy, Molly, Zeke, and Drake left.\n\nMolly and Amy both turned and surged towards Drake. \"Augh, traitor!\" he yelled towards his wife. She giggled and dove, coming up with Drake's boxers.\n\nZeke quickly moved away from his wife when the two of them turned on him, but she snapped her fingers and pointed at him, causing him to freeze.\n\n\"Give them to me, now,\" she ordered, drawing a smile from several of the guests. Zeke nodded and quickly stripped. Giggling, Molly high-fived Amy as she tossed his drawers outside the pool.\n\nDuncan laughed easily, but then saw it was three women versus him and he was still in the shallow end. He chuckled and shook his head as Kelly and Erin moved to get out of the way.\n\n\"Bring it on ladies,\" he said.\n\nAll three moved quickly towards him, and he caught Molly and Marie both in his arms and pulled them close. He felt Amy's hand begin to pull at his boxer-briefs then, but he stopped her.\n\n\"Amy,\" he said. \"Would you be so kind as to remove Molly's panties for me?\"\n\nShe grinned at him again, and quickly pulled off the unsuspecting woman's underwear.\n\n\"Ack!\" she yelled, not expecting the attack. Amy smiled and came up brandishing Molly's and tossed them away.\n\n\"And now, Marie's,\" he said, winking.\n\nShe turned and grinned at the brunette.\n\n\"Oh shit,\" Marie said, seeing Amy turn and move towards her. She turned to swim towards the other end of the pool, and the blonde took the opportunity to grasp one side of her panties and hold on, letting the momentum do the rest.\n\n\"Well shit, that didn't work,\" Marie said, coming up and reaching for her underwear.\n\nAmy giggled and tossed them out of the pool.\n\nShe turned then and moved towards Duncan.\n\n\"Amy, my sweet,\" he said. \"Would you give me your panties?\" he said.\n\nShe winked at him and mouthed, \"Yes, sir,\" a final time and quickly stripped out of her panties.\n\nHe laughed and tossed them aside, then raised his arms in triumph.\n\nEveryone booed at him, good-naturedly of course.\n\n\"So what does he win?\" Kelly asked.\n\n\"I don't know,\" Marie said. \"I didn't think that far ahead. Still though, it doesn't seem right that everyone else is naked and he's not.\" She turned around then, looking for support. \"Girls?\" she asked.\n\nHe glanced over at Kelly, who was floating between Mark and Drake, her breasts bobbing gently at the surface of the water. She winked at him as the rest of the ladies surged forwards.\n\nHe felt more than one hand grab at his cock then, and quickly dove underneath the water to escape as they tossed his boxer-briefs away.\n\nSurfacing, he swam over to Kelly and smiled. She slid up next to him and wrapped her small hand around his member, stroking slowly. \n\n\"Hi, Baby,\" she said.\n\n\"Hello, my love. Having fun?\"\n\nShe nodded. \"No regrets.\"\n\nHe smiled and winked.\n\n\"Come on,\" Kimber said. She had slid in front of Molly and was crouched down in the water. \"Chicken fight.\"\n\nMolly giggled and then cried out in mild surprise as Drake lifted her from the water and placed her on Kimber's shoulders. The tall waitress stood easily. \n\n\"Come on, any challengers?\" Molly yelled.\n\nDana swam behind Mark then, and surprised everyone when she pushed him under and mounted his shoulders.\n\n\"You're going down!\" she yelled to her sister.\n\nMark moved to the center of the pool, followed by Kimber and then surged forwards. Kimber, not one to shy away from fighting dirty, immediately moved to reach for his dick. She was too tall, however, and would have had to lean down to reach him.\n\nMolly and Dana however, had grasped hands and were yanking and pulling at each other. Mark reached up and began to tickle Kimber, who was apparently extremely ticklish, and the two women fell into the water, sputtering.\n\n\"No one can beat us!\" Dana yelled, flexing and causing everyone to laugh. It was genuinely good to see her having such a good time. Mark patted her thighs, laughing. He reached up then and briefly fondled her immense breasts, resting on top of his head as they were. She laughed and slapped his hands away.\n\n\"My horse is getting a little gropey,\" she said, drawing a laugh.\n\n\"Alcohol,\" Ed said, smiling.\n\n\"Come on redheaded slut,\" Drake called, reaching out for Kelly. She cackled at him but quickly mounted his shoulders.\n\n\"We're so gonna lose,\" Kelly said as Drake surged from the water, her perched precariously on his shoulders.\n\nDuncan chuckled at the sight. Kelly shook her torso back and forth, her breasts and nipple rings shaking in the night air as Drake moved towards the center of the pool.\n\n\"No grabbing my dick,\" he said to Mark, who flipped him off in response.\n\nKelly rubbed her breasts on Drake's bald head, \"for good luck,\" she said, winking at Duncan.\n\nDana reached forwards then, and grabbed both of Kelly's arms, but Drake saved them then, by reaching up and grabbing Dana's arms himself and pulling her forwards. Kelly moved to the side as Dana and then Mark came crashing in to Drake.\n\nSputtering, Mark came up swearing. \"Dude,\" he yelled. \"I just got a face full of your junk, not cool!\"\n\nEveryone roared with laughter then and for a few minutes, the game was paused.\n\nKelly was still mounted on top of Drake though, as they waited for the next challenger.\n\n\"You look cute up there Kelly,\" Erin said. \"Your nipple rings go nicely with Drake's bald head.\"\n\nShe laughed and wiggled her hips and torso. \"Oo,\" she said, her eyes wide. \"I like it up here,\" she said, wriggling her hips again. \"Don't move,\" she said, rubbing his head again, \"I just need a few more minutes.\" Duncan saw that her pussy was grinding into the back of Drake's neck. He laughed, as did the others that got the joke.",
        "\"Alright, Duncan, let's go,\" Marie said. She'd come up in front of Duncan, faced his crotch, and crouched low in front of him and patted her shoulders. She grinned over at Kelly as the group laughed again.\n\nDuncan chuckled and shoved her under the water. \n\nAmy did move towards Marie though, and quickly mounted her shoulders. Kelly proved to be no match for her though, and soon she and Drake were sputtering as they came to the surface.\n\n\"You're going down,\" Erin said, swimming over to Zeke and climbing on top of him as he dropped low. True to her word, she quickly unhorsed Amy and flexed atop the young policeman.\n\nRachel and Becky teamed up then, with Rachel on top. The two quickly made short work of Erin and Zeke, sending the other two splashing backwards into the deep end.\n\nKara swam over to Duncan then, seeing as they were the last two, and quickly mounted his broad shoulders.\n\nDuncan then knew how much he could actually feel of his partner's feminine parts, and knew why Kelly had been wriggling around so much. He glanced over and saw her talking quietly with Drake, who had her between him and the wall. Rachel and Becky moved over and whispered something to Kelly who nodded and laughed.\n\nShe glanced over then, and blew him a kiss, and then looked back at Drake and nodded, answering his question.\n\nKara patted him on the head and they made their way towards the sisters, who had switched positions.\n\nThey'd obviously been conferring and had a plan. Kara reached for Becky, and then cried out in alarm as Rachel dipped low in the water and brought her sister low with her.\n\nDuncan yelped in alarm then as he felt some warm lips encircle his cock and a pair of hands pull him forwards by his buttocks.\n\n\"Whoa!\" he yelped, falling forwards.\n\nRachel surfaced as Kara dove to the side, Duncan following.\n\nAs he surfaced, he shook his head at the sisters, who were cheering and congratulating each other.\n\n\"What the heck happened?\" Kelly asked, grinning.\n\n\"Somehow, I think you already know,\" he said, shaking his head at her.\n\n\"Isn't dick-sucking against the chicken fighting rules?\" Drake asked, having heard the question that Rachel asked.\n\nThe backyard filled with uproarious laughter then, and Duncan glared playfully at Rachel and Becky.\n\n\"Well shit, I need a cigarette now,\" Rachel said, grinning wildly and drawing more laughter from everyone. \"Wow!\"\n\nDuncan felt Kara move behind him then, and he pulled her quickly to his shoulders.\n\n\"Rematch you two, and please don't suck my dick this time,\" he said, grinning widely.\n\nThe sisters shook their heads, declaring themselves the \"Ultimate Winners for All Time Forever and Ever.\"\n\n\"Boo,\" Duncan said, and began to slide Kara off of him. She slid around his body then, and down, spinning around to the front and suddenly froze as she looked at him wide-eyed. She'd slid perfectly down onto him, her pussy impacting with the tip of his cock, and stopping just before penetration. Everyone seemed to disappear into their own conversations. She gasped slightly, and leaned into him as he moved to the side of the pool. She didn't dare move, and in truth, he didn't want her to.\n\n\"I... I... th... think we're breaking Marie's rules,\" she said, but stayed still, her pussy practically sucking at the tip of his cock.\n\nHe stared directly at her, unable to tear his eyes from her blue orbs. Biting her lip gently, she slid slowly downwards until he was just inside. They both glanced around, but everyone else was lost in conversation in smaller groups. They might as well have been alone in the pool. \n\n*****\n\nKelly\n\n\"Do you mind if I throw Duncan off by just... really quickly sucking his dick,\" Rachel asked.\n\nKelly giggled and nodded. \"Be my guest,\" she said.\n\nShe turned and saw Duncan looking at her. She blew him a kiss and turned back to Drake.\n\n\"So you guys had a threesome with Heidi?\" he asked.\n\nShe nodded, smiling. \"Two times last weekend. It was mind-blowing each time.\" She glanced down and saw his erection bobbing underneath the water.\n\nGiggling, she pulled him forwards slightly and let the tip brush against her stomach.\n\n\"I highly recommend it,\" she said, as he reached down and began to play with a nipple ring.\n\nHe smiled. \"Was alcohol involved, or were you thinking clearly?\" he asked, drawing a sigh and moan from her.\n\nShe glanced upwards at him then and smiled. \"Oh, alcohol was definitely involved, but we knew what we were doing.\"\n\nShe turned then as Duncan yelped and sputtered. He glanced over at her then and she asked him, \"What the heck happened?\"\n\n\"Somehow I think you already know,\" he said, shaking his head at her.\n\nShe grinned and winked at him, turning back to look up at Drake. He resumed tweaking her nipple then, not bothering with the nipple ring. She glanced down as he pushed forwards, his erection hitting her in the belly again.\n\n\"Is that for me?\" she asked.\n\nHe chuckled. \"You were definitely a contributor,\" he replied.\n\nMolly swam beside them then and moved close. She kissed her husband and then kissed Kelly.\n\n\"Did you see what your husband wants me to have?\" Kelly asked.\n\nMolly turned and looked up at him. \"Ooh, my favorite gift,\" she said. She reached down and grasped her husband's cock then and began stroking gently before looking around sneakily and pushing it low in the water.\n\n\"You know, I really like the size of what you're working with,\" Kelly said, grinning up at him. Her eyes grew wide for a second when she felt Molly brush her husband's cock downwards across her stomach. Smiling, she pulled herself up on the edge of the pool and wrapped her legs around Drake and pulled gently.\n\n\"Kelly says that a threesome is a great way to start fooling around,\" he said, trying to concentrate. \"Apparently, she, Duncan and Heidi had a little bit of fun last weekend.\"\n\nMolly smiled and snaked his cock up and then back down across Kelly's pussy. She moaned slightly, and then he suddenly moved forwards, his cock sliding directly back and underneath her, practically giving her snatch a resting pedestal.\n\nGrinning, she kissed Molly and then slid off of him. \n\nKelly smiled and reached down, her hand brushing past the tip of Drake's cock as he pulled back to a safe distance. \"Actually, we had a lot of fun last weekend, and then I made my husband have sex with my friend for most of the day, Saturday.\" She finished her sentence by wrapping her hand around his cock and slowly stroking. He groaned in pleasure.\n\n\"Duncan is one lucky man,\" he said.\n\n\"Did you know this is only the second cock I've touched after my husband's?\n\nHe groaned as Molly wrapped her hand around Kelly's and stroked with her.\n\nKelly turned and looked at her. \"How much do you think your husband wants to lift me up and stick his cock in me right now?\"\n\nMolly looked very turned on at that point, but turned and looked up at her husband. \"Probably more than he can stand, I'd say.\"\n\nGiggling, Kelly released her hold on Drake's cock. She moved forwards and wrapped her arms around his shoulders to pull herself up. The move caused his painfully erect dick to slide deliciously across her hungry cunt and even elicited a whimper of pleasure from the delectable redhead. \"Not tonight,\" she said, regaining her composure frowning. \"I'm sorry.\" She slid out from between the two of them and the wall and turned, coming around behind him and sliding up close. Reaching around, she slid her hand around his cock and slowly stroked in time with Molly's.\n\nDrake groaned. \n\n\"You can have me, one day... ,\" she said cryptically, and then released him and swam towards Heidi and Marie.\n\nShe turned as she reached them and saw Duncan and Kara. She smiled and listened to the conversation the two women next to her were having.\n\n*****\n\nDuncan\n\nKara slid completely down onto him, his cock filling up her pussy as she wrapped her legs around his waist and stared at him. They were in a darker part of the pool area, and though you could see their torsos, it looked like they were simply standing very close to each other.\n\nHe didn't move, though his cock was aching to begin thrusting in and out of her, simply resting inside her tight pussy was incredible. She was very tight, more so than his wife, he figured.\n\nShe flexed her Kegels and he groaned softly as a ripple of muscles coursed down his cock and squeezed it tightly.\n\n\"We should really stop,\" she said, sighing gently. \"I don't know if I can, though. I definitely don't want to. I just want to keep doing... that until I make you cum.\" She'd flexed her Kegels again and caused another ripple of muscle to clench his shaft and rip another groan of pleasure from him.\n\n\"If you keep doing that, you most definitely will.\"\n\nShe looked incredibly turned on, and almost like she was about to have an orgasm. \"I guess we better stop then,\" she said softly.\n\nDuncan lifted her up then, causing her to gasp slightly as she slid off his cock and then down his body. She leaned into his chest then and gently nibbled at him.\n\nLooking up, she asked, \"Do you think your wife will want to share you soon? It's going to be downright cruel if I have to wait very long.\"\n\nHe smiled and nodded. \"You should go ask her about that,\" he said, grinning. \n\nRachel, Mark, Becky, and Kimber all climbed out of the pool at that moment and began to get dressed. It was a little suspicious that the four of them had decided to leave at the same time, especially since they'd been talking quietly in a close group together.\n\nOthers must have sensed it too, as Drake flipped Mark off as they began to say their goodbyes.\n\n\"Lucky prick,\" he yelled.\n\nMark grinned, uncharacteristically and shrugged. \"What can I say, when you got it, you got it.\"\n\nBecky slapped him on the head and pushed him into the house.\n\nErin got out of the pool then, speaking briefly with Kimber who handed her some keys and then left with the other three.\n\n\"Have fun!\" she called. Kimber grinned and disappeared into the house, heading to the front door.\n\nA round of shots appeared then, and the group began drinking again, Kara especially. Conversation quickly turned raunchy, and people began talking about Duncan and Kelly's threesome with Heidi and asking all sorts of questions. An hour later, Kara was pretty well gone, and had passed out naked on a lounge chair.\n\nMarie and Ed got out, and showed Erin to the door after she'd gotten dressed, followed soon after by Drake, Molly, and Dana. Amy and Zeke swam over and said goodbye to Kelly and Duncan.\n\n\"Sorry we're having to leave so soon,\" Zeke said. \"We'd love nothing more than to have a repeat of last Saturday,\" he said, \"But we're both working and it's past time to for us to go home.\"\n\nEd and Marie appeared and showed Zeke and Amy to the door after they'd gotten dressed.\n\nKelly swam over to her husband and wrapped her legs around him. \"Earlier, Kara said that she accidentally had you inside her for a little bit. I asked her if she had an orgasm, and she said that you both decided to stop. I assured her that I would have been okay with it, and then I told her about Heidi and you and me, and then Heidi and you today.\"\n\nHe chuckled. \"I'm not surprised.\"\n\n\"I asked her if she wanted to come home with us, and I assured her that she'd have a great time, and she said she wanted to drink a little more to loosen up. We didn't mean for her to get that drunk, though,\" glancing over at Kara's alluring form on the lounge chair.\n\nEd and Marie emerged then and came over.\n\n\"You guys gonna want to leave her in our spare room?\" Ed asked.\n\nKelly shook her head. \"Her car is at our house anyways, I'm sure we'll manage.\"\n\n\"Well you guys don't have to leave yet,\" Marie said, practically pouting.\n\n\"It's getting late,\" Kelly said. \"I want to go home and... have some fun.\"\n\nThe four quickly said their goodbyes. Kelly kissed Marie and Ed goodbye and gathered up Kara's belongings as Duncan carried her into the truck. She briefly opened her eyes and smiled at him as he lifted her easily.\n\nThey wormed her into the truck and Duncan tenderly lifted her head so that he could slide in, while Kelly held her feet. When they reached their house, Kelly suggested that they just put her in bed with them so she wouldn't freak out if she woke up in the morning, or if she had to get sick, she wouldn't know where the bathroom was.\n\nThe logic seemed relatively sound to him, so Duncan walked her towards their bedroom and slid her nude form into the bed on one side.\n\nIt was pretty late, so Kelly went and locked up and the two of them slid in next to their snoozing guest.\n\n\"I'm sorry it didn't work out like we wanted,\" she whispered as he spooned up next to her.\n\nHe chuckled. \"I'm fine baby. I've had more sex than any husband is entitled to in his life, and if it was just you from now on, I'd be a very happy man.\"\n\nShe smiled in the darkness and wiggled up to him. \"I didn't tell you. I touched my first cock tonight, other than yours.\"\n\nDuncan smiled. \"I figured you had. Was it Mark?\"\n\nShe snickered. \"He wishes. No, it was when Drake and I were talking and you and Kara were chicken fighting.\"\n\nHe nodded. \"Did you enjoy it?\"\n\nShe giggled playfully. \"I really did, baby.\"\n\nPulling her close, he kissed the top of her head. \"Good. Did he get to play with you any?\"\n\nShe nodded. \"Only my breasts though. Molly came up to us at one point and caused all sorts of mischief. We were positioned facing each other and I had my arms up on the rail, and she rubbed his cock across my pussy. Eventually he slid forwards and it rubbed so nicely across me. God...\"\n\nShe sighed in his arms. \"I have to admit, that I really wanted him to \"accidentally\" slide it in.\"\n\nHe smiled and squeezed her. \"I'm glad. That's what we're working towards, isn't it?\"\n\n\"It doesn't bother you?\" she asked.\n\nHe chuckled. \"Baby, I'd be quite the hypocrite if I admitted that I had \"accidentally\" fucked my secretary and said that my wife couldn't do the same to Drake.\"\n\n\"Still, you're allowed to have second thoughts.\"\n\nHe sighed. \"Baby, I promise, I'm okay with it. I'm glad you told me. Had it happened and you didn't tell me, I might feel differently, but we're honest and open with each other.\"\n\nShe smiled in the darkness, seemingly content with the answer.\n\n\"Besides, I kind of like the thought of you being fucked in front of all our friends,\" he said.\n\nShe gasped and turned to slap him on the shoulder. \"Duncan!\" she admonished.\n\nChuckling, he kissed her on the forehead and pulled her close. Nuzzling his chest, the two of them slowly fell asleep to the rhythmic breathing of their very drunk friend.\n\nDawn roared through the window the next morning, the sun high in the sky by the time one of them started stirring. Stretching, Duncan looked to his right and saw Kara facing away, but awake. His movement woke Kelly and she turned over to kiss him. He nudged her and cocked his head towards Kara.\n\nKelly slid out of bed and came around. \"Good morning,\" she said.\n\n\"What happened last night?\" Kara asked. She sat up, but clutched the covers to her chest protectively.\n\n\"Hey...\" Kelly said, suddenly concerned. \"Hey, no, shh,\" she said. \"Calm down, nothing happened.\"\n\nShe looked over, unconvinced. \n\n\"No, no,\" Kelly said. \"Nothing happened. You drank too much at the party and we brought you back to our house. We put you in here because we didn't want you to freak out if you woke up in the middle of the night in a strange house, or if you needed to throw up in the middle of the night and couldn't find the bathroom. Nothing inappropriate happened, I promise.\"\n\nA huge sigh of relief escaped her lips then and she smiled happily. \"Oh thank God!\" she said. \"I was worried I'd made a fool of myself, or forced myself on Duncan, or something. I don't remember anything after we started drinking.\"\n\nDuncan chuckled and shook his head. \"You know us better than that,\" he said. \"We wouldn't take advantage of you like that.\"\n\nShe smiled but he could tell she was embarrassed.\n\nKelly came back around then and slid in behind him. Putting a pillow or two behind his back, she pushed him up so that he was in a sitting position and the two of them slid easily into his arms and onto his chest.\n\n\"See, that's better,\" Kelly said.\n\nSmiling, Kara agreed. \"I'm sorry I was freaking out,\" she said.\n\nKelly shook her head. \"Think nothing of it.\" She lifted a hand and brushed Kara's hair back behind her ear. \"Hung over?\"\n\nKara shook her head. \"I never get hung-over,\" she said. \"I don't know why, I just never do.\"\n\n\"Lucky girl,\" Kelly said, smiling. \"So how about we spend the day together?\" Kelly asked.\n\nKara smiled. \"You guys wouldn't mind a third wheel?\"\n\nDuncan chuckled. \"You're no third wheel,\" he said. She smiled and stretched upwards to briefly kiss him.\n\n\"So, how about the two of us take a shower?\" Kelly asked.\n\nKara smiled, her face lighting up.\n\nSliding out of bed, Kelly held up a hand and led her to the bathroom, shutting the door but leaving it open just a crack.\n\nDuncan chuckled to himself and headed across the house to the guest bathroom to relieve himself. Heading back, he heard the water running and the telltale giggling of the two women.\n\nMoving up to the door, he peered in briefly and saw the two soaping each other up and giggling to each other. It was really hard to tell them apart with their wet hair. He saw the glint of Kelly's nipple rings then, and knew which was which.\n\nClearing his throat, he stepped in and peered around the curtain. Both girls smiled and turned towards him. \"Enjoying the view?\"\n\nHe nodded and soaked it all in. Water and soap ran in thin rivulets over the lithe bodies of the two women. Their full breasts were taut and nipples erect from the brushing fingertips passing across them every few seconds.\n\n\"We were just talking about how she's never been with more than one person, though she has fooled around with another woman before.\"\n\nKara smiled and nodded. \"My college roommate and I got really drunk one night,\" she said. \"There were several more times after that.\"\n\nDuncan grinned. \"Ooh, a story for the campfire sometime.\"\n\nKelly grinned and nodded again.\n\n\"I guess I'll leave you two alone then.\"\n\n\"We won't be too long,\" Kelly said. \"You might want to stick around and watch us though, we might get a little frisky.\"\n\nKara blushed then briefly and covered her face, to which Kelly took the opportunity to surprise her and drop to her knees. Yelping in surprise, Kara uncovered her face and looked down to see Kelly's green eyes peering up at the small thatch of red pubic hair she kept. Both of Kelly's hands were around the back, cradling Kara's butt cheeks and her warm tongue was slurping rudely at her pussy.\n\n\"Oh God,\" Kara moaned, leaning back into the cold tile of the shower. She reached down and caressed Kelly's face briefly, and then moved to steady herself on the wall. Duncan smiled, but was watching in rapt attention.\n\n\"Fuck,\" Kara moaned as Kelly slurped. His wife's tongue appeared as she licked upwards and then back down, her lips locked on the younger girl's cunt. Her nipples were severely erect, almost like small diamonds atop Kara's magnificent breasts.\n\n\"Oh God,\" she moaned, her body undulating against his wife. \"She's... she's...\" she gasped.\n\n\"Fuck!\" she moaned, as the orgasm released and washed over her. She gasped repeatedly and swore softly, her body shivering and quaking as she came, her tender pussy convulsing down.\n\nShe dropped to her knees and quickly began to kiss Kelly, her lips pulling Kelly's tongue in and slurping at it, seemingly trying to devour the juices left on it.\n\nFiguring that they'd be awhile, Duncan left the room and pulled on a pair of his black boxer-briefs and went to make some coffee.\n\nThe two girls appeared a few minutes later, bodies dry but hair still damp and joined him in the living room after grabbing coffee for themselves.",
        "The girls moved to either side of him as he looked out their large bay window. Wrapping them both in his arms, he kissed them both on the forehead as they settled onto his chest.\n\n\"Did everyone have a good time last night?\" he asked.\n\nThey both nodded, but Kara looked up at Kelly. \"I really wish you'd been there when our happy little accident had happened.\"\n\nKelly giggled. \"I was busy being molested by Drake and Molly, though. You can tell me about it.\"\n\nSmiling, Kara began rubbing her hand up and down Duncan's chest. \"Well,\" she began, \"Duncan had me up on his strong shoulders and I'm sure you know how sensitive and exciting being up there can be.\"\n\nKelly nodded. \"My pussy could feel every little bump and move that Drake made. I was really turned on!\"\n\nKara nodded. \"Me too. I thought I might have an orgasm if he kept me up there for very long.\"\n\nKara's fingers traveled low, but then back up to his chest and repeated the path.\n\n\"Well, Duncan spun me around his shoulders and slid me down the front of his sexy body,\" she said. \"It must have been luck, or fate, that we were positioned just right and his cock hit just the right spot. We didn't let it slide in right off, though. We were careful. Slowly, though, my pussy got the right idea and began to slide slowly down his shaft. I thought I might cum again, but he was such a gentleman. He didn't move, and didn't push me any further than I'd already gone.\"\n\nKelly smiled and nodded.\n\n\"I finally hit bottom after sliding down that entire length and... oh my God... did I want him to start fucking me then.\" She turned and kissed his chest briefly, her eyes lingering on him. \"He didn't though,\" she said, her tongue trailing out lazily and licking his chest. \"Such a gentleman.\"\n\nKelly did likewise and snuck her tongue out to lick his chest for a second.\n\n\"Eventually I realized that I would have to take matters into my own hands, so I squeezed my pussy as tight as I could down on him and nearly caused myself to orgasm, yet again. He still didn't move though, so I did it again. Still, he stood perfectly... rigid. There was no throwing me to the pool deck and fucking my brains out. There was no bending me over the edge of the pool and hammering at my tight little pussy from behind.\"\n\n\"Such willpower,\" Kelly giggled.\n\nThe two girls fell silent then and lay their heads on his chest as they all watched the world pass by outside the window. It was peaceful, but Duncan's erection eventually demanded attention.\n\nHe noticed Kara slide slowly down, followed by Kelly, until the two women were inches from his throbbing erection, pushing forcefully against his underwear. Kelly slid off the couch then and reached up to guide Kara's face lower. He watched as she turned her head upwards to look at him, while his wife pulled her face lower and lower, until his cock was pushing through his underwear and towards her mouth. It was unbelievably erotic, almost like his wife was forcing her lower, forcing her to start sucking his cock.\n\nSensing his excitement, Kelly pushed the envelope. She reached up then and pulled his cock out, snapping his underwear underneath his balls. Kara smiled at the sudden appearance of the object of her desire, and opened her mouth wider. Slowly, Kelly pulled downwards, drawing the younger girl's mouth inexorably closer and closer until he could feel her warm breath on the tip. Kelly grinned and pulled harder, drawing the tip in and then back, but Kara didn't close her mouth. \n\nIt almost felt like he was violating her, or Kelly was making him violate her. He groaned as the excitement washed away the moment of concern. Kelly knelt and pulled Kara around to the front of his legs as he spread them. She began to push Kara's face down, causing Duncan's cock to slide roughly in and along her lips and cheek. Again and again Kelly pushed down, until she was practically shoving it down her throat. Every once in a while, Kara would jerk slightly and a strange gluck noise would issue from her throat. All the while, she stared up at him, her gorgeous blue eyes driving into him and driving him wild. \n\nAgain and again Kelly pushed the younger girl's face down until finally, Kara couldn't take it anymore and sucked on the tip as hard as she could.\n\nDuncan gasped in pleasure and threw his head back. Kelly stood behind Kara then and wrapped both hands around his swollen shaft and began to jerk while Kara continued to slurp at the tip.\n\n\"Ooh... fu... fu.. fuck...\" he groaned, his orgasm suddenly appearing and cresting in a flurry of movement. \"Holy shit!\" he gasped, his cock head swelling as it burst its contents forth in Kara's waiting mouth. Still, she stared up at him with her crystalline blue eyes. His cock pumped again and again, the tip exploding into Kara's mouth while his wife furiously stroked back and forth and the younger girl swallowed, desperately trying to keep it all contained.\n\n\"Jesus... fucking... Christ...\" he said, his body twitching in pure endorphin filled ecstasy. Kara swallowed again and again as he emptied his spunk into her hungry mouth, her lips closed tightly around it to prevent any from escaping. Finally, she swallowed the last of his delicious gift and licked her lips before lowering her face and slowly beginning to bob up and down on his cock again.\n\nKelly giggled. \"I don't think she wants to stop,\" she said, looking up at him.\n\n\"Uh, unh,\" she replied, her mouth still full of his cock and her lips tightly wrapped around it. She brought her hands up to replace Kelly's and went to work on him. Clamping her lips down again, she looked up at him and began to stroke with both hands. Her saliva drooled down around her lips as she stroked and he felt himself get fully erect again. He didn't think he would be able to cum again soon, though, but he was thoroughly enjoying it, and apparently so was Kara.\n\nShe popped him out of her mouth and looked at Kelly. \"I really hope you guys don't have any plans today. I can be damn near insatiable when you get me going.\"\n\n\"I know we're definitely not going anywhere now,\" she replied.\n\n\"Good, because I don't want to have to tie you two to the bed and suck the life out of you,\" she said.\n\nDuncan groaned as she pulled him deeply into her mouth again, finally breaking eye contact with him and going as deeply as she could. Groaning loudly, he reached down to pull her hair out of the way and she looked up at him, his dick probing the back of her mouth, desperately trying to get to her throat. Swiftly rising, she pulled his cock out of her mouth and throat in one quick movement, gasping for breath. She didn't wait long though, and quickly impaled her face again. Gluck gluck gluck echoed in the room again as she began to gag herself on him.\n\n\"Jesus Christ!\" he groaned again. \"She's fucking incredible,\" he gasped.\n\nShe ignored him and continued to push his cock deeper and deeper, forcing it as far as she could before yanking it out and gasping for breath for a few seconds, only to repeat the process over and over.\n\nFinally, he felt himself churning again, but was so lost in pleasure than he couldn't even speak to warn her.\n\nAn odd cacophony of noises filled the room. Gluck gluck gluck \"Oh God,\" he moaned. His second load of the day was definitely smaller than the first, though he enjoyed it just as much as he felt his cock head expand a little and spray the inside of her mouth as she looked up, a wicked look in her eyes. Again and again she swallowed, taking his gift and moaning as she did so, pure wanton pleasure in her eyes the whole time.\n\nKelly, sensing that she wasn't needed, started to stand to leave the room, but Kara stopped her quickly, extricating the cock from her throat and shaking her head, long ropes of saliva and sperm hanging in lines back to his cock.\n\n\"Don't you dare fucking leave,\" she said, pushing her back to the couch.\n\n\"Oh my goodness,\" Kelly said, glancing over at Duncan.\n\nKara immediately dove between her legs and caused Kelly's to widen at the sudden intrusion.\n\n\"Oh my God,\" she groaned, her mouth open wide. She glanced from Kara back to Duncan and back to Kara repeatedly. \"Jesus she's really fucking... Oh Ggggggod daaaaamnit,\" Kelly moaned, as Kara slurped furiously at her suddenly drenched pussy. \n\nSliding a hand underneath her, she gently probed at Kelly's ass while her lips and tongue assaulted the tender young snatch. \n\nDuncan was debating if she'd noticed the finger when Kelly suddenly spread her legs and reached down with her hands to spread her ass apart for her.\n\n\"Jeeeessssuss,\" she groaned, her eyes rolling back into her head. Kara's head was rotating in a slightly circular motion as Kelly's body went rigid. Beside her, Duncan could only watch in exhaustion and amazement as the young woman forced an orgasm from his wife.\n\n\"Oh my fucking God,\" Kelly groaned as Kara slid a single finger into her ass, her tongue probing deeply before sliding upwards and rubbing rhythmically against her clitoris.\n\n\"God...baby...\" she moaned, her body locked rigid and quivering as she began to come. Finally, her muscles released and she began yelping in consummate pleasure as Kara finally began to slow to allow Kelly to enjoy the bliss of her orgasm.\n\n\"Holy shit,\" she said finally. Kara hadn't completely stopped however, and was still slowly slurping at Kelly's pussy.\n\n\"When you get hard, I want you to fuck me,\" Kara said, turning briefly and looking at Duncan.\n\nHe smiled and looked down at his semi-hard shaft. \"That might be awhile.\"\n\nKara smirked. \"Hell no it won't,\" she said. Turning, she quickly slid between his legs again and sucked his cock back into her mouth, the shaft sliding all the way back into her throat in its diminished condition. Once it reached the back, she stayed there as it grew, slowly filling up her throat until she finally had to extricate it to breath. Again, she lowered her face to it and pulled it as deeply as she could. Finally satisfied she'd gotten him sufficiently hard enough for her pussy to accept him and let it do the rest, she stood and straddled him.\n\nLooking down, she gripped his slime coated shaft and rubbed it against her pussy, causing her eyes to flutter and her body to shiver for a moment. Finally, she slid it to her opening, and slid slowly, inexorably down onto him, causing his own eyes to roll back in pleasure.\n\n\"God you feel so tight,\" he moaned. She smiled down at him as he looked up at her. \"Not for long with this monster,\" she said. Both of her hands were pulling roughly at her tender nipples as she finally slid all the way on to him.\n\n\"Ohh,\" she moaned briefly, her hardened sex-goddess expression briefly falling to reveal the purely sexual beast that she'd become. \"God, that's the best,\" she moaned. \"That's the best cock ever. Fuck you fill me up.\"\n\nKelly was still trying to catch her breath, having been thoroughly violated by the nubile young redhead. She giggled in pleasure, unable to contain her influx of emotions.\n\nKara leaned down and kissed Duncan deeply, her eyes locking on his again as she began to slide up and down slowly. \"God, you're the biggest ever,\" she moaned. \"So fucking big.\"\n\nDuncan reached up to grip her hips and pulled, her pussy sliding slowly down again and then back up, every delicious inch was a storm of pleasure for the two of them.\n\n\"Fuck,\" she moaned, grinding slowly but growing faster. \"God,\" she moaned, a final time, before he felt her quaking pussy clench down on him and a ripple of muscle run down his shaft. \"God fucking damnit,\" she whispered, almost crying, and began to undulate on top of him, her orgasm gently washing over her. She continued to shiver and wiggle on top of him for several minutes, amazing the two of them as they watched.\n\nThe doorbell rang then. Both of them turned and chuckled. \"Marie,\" Kelly said and began to rise.\n\nKara smiled and stopped the two of them with an outstretched hand. \"Allow me,\" she said. Standing, she turned and looked at Duncan, \"Keep that precious thing hard. We're not done.\"\n\nSmiling, he turned and pulled Kelly over to him. Kelly kissed him deeply as he went to his knees between her legs and pulled her lower. Sliding in, he gently began to stroke into his wife's red and abused pussy, tenderly penetrating her as she sighed in happiness.\n\nKara came back then, leading a wide-eyed Marie into the room.\n\n\"Well hel...\" Marie began to say, but Kara quickly began to undo the buttons on her top, causing Marie to grin.\n\n\"Oh my goodness,\" she said, as Kara quickly stripped her. \n\nKara turned then and looked over at Duncan. \"Can we move this whole thing to the floor? I want to try something.\"\n\nSmiling, he nodded and easily lifted his wife to lay her on the ground. \n\n\"Perfect,\" Kara said, turning and pulling Marie down to lay in front of her as she positioned herself above Kelly's face.\n\n\"Oh my...\" Marie said again. Kara held a hand up to her lips for a second before pulling close for a kiss. Falling backwards, Duncan saw her pussy brush Kelly's lips as he slid rhythmically into her.\n\nMoaning in uncontrollable passion, Kelly's arms shot up and around Kara's thighs, pulling her thighs outward and her pussy downward to her waiting lips and tongue. Hungrily, Kelly began to slurp and suck at Kara's drenched cunt while Kara herself immediately dove for Marie's pussy. Duncan smiled as Marie looked at him in wide-eyed amazement.\n\nKara's lips were hungrily sucking at Marie while Kelly did the same to her. Tongue probed deeply into pussies, rubbed across clitorises and lips sucked at drenched cunts. Moaning, Marie reached down to grab to handfuls of Kara's damp hair, wrapping her fingers up in it and pulling the delicious young women deep against her. Moaning, Kara reached back underneath her to pull briefly at Kelly's hair. \n\nDuncan slid deeply into his wife again and again, his cock pistoning repeatedly. Soon, the little train of sex began to arrive at their destination as Kelly's pussy clenched around him and her muffled cries of pleasure were drowned out by Kara's lips pressing down. Soon, Kara herself was coming and had briefly stopped, her high pitched yelps of pleasure echoing. She quickly recovered and dove back into Marie and slid to the floor as Marie began to gyrate against her face. Duncan moved up then, his cock an angry red tower as he slid up behind Kara. She forced an orgasm out of Marie then, the brunette yelping and squeezing her eyes closed as she yanked Kara's head back and forth across her quivering cunt.\n\nKara moaned loudly as Duncan entered her from behind, and he was suddenly struck at how long her hair actually was, and how much of it she had. Reaching up, he pulled it from Marie's grasp and wrapped up two great handful, the rest spilling sexily over her rump as he powered into her from behind. Growing faster by the second, he pushed deeply into her and caused her to groan in pleasure from the fingers of ecstasy that the action caused. Sliding back caused a sigh of pleasure, followed by a quick yelp and groan as he began the trip again. Swiftly he shoved his cock into her, drawing out her coming orgasm and pulling roughly on her hair. \n\nHe released one hand and gripped one of her hips, the other pulling her hair and forcing her to her hands and knees. Yelping repeatedly, she bounced forwards and then backwards again and again as his cock thrust into her repeatedly. Finally he felt her clench down on him much harder than she had before. He winced in temporary pain as she began to come, her thoroughly worked pussy convulsing and contracting down on him as she bounced back into him on her own. Yelps filled the room and made the other two smile as they basked in the afterglow of their own orgasms. Finally, he released her hair, but she didn't stop bouncing. Her orgasm was long and hard, but she finally slowed as he slid into her one final time.\n\nGlancing around, he smiled and laughed at the sweat soaked foursome. The ladies grinned at each other and then all of them burst into a round of raucous laughter. Kara turned then and pulled Marie close as Duncan stood. A single finger came up as she reached for him. Smiling, he looked down at the two, Marie looking very excited to finally be able to have a chance at him. \n\nShe immediately moved forwards and took his cock in her mouth, causing Duncan's head to fall back in pleasure. He didn't think he would be able to come a third time with so little recovery, but Marie was an expert and she knew exactly what she was doing. \n\nKara came up to the side and then moved up directly beside him. She looked up with Marie as Duncan stared down at the two mouths sucking at either side of his shaft. First one, and then the other would take it in their mouths.\n\n\"You better share,\" Kara said.\n\nMarie grinned and nodded. Rising on her knees, she began to roughly pull at Duncan's buttocks until he was as far as he could go in her throat. Again and again he slid in, causing her to moan and gag every once in awhile. He switched briefly to Kara, and then Marie took him back when he finally started to come. The first spurt dumped completely into Marie's mouth, and she moaned in pleasure. Kara quickly took it back and the second spurt coated her face from her chin to her nose. Grinning, she pulled him in and hungrily took the next one before handing him back to Marie so she's could have the rest. Finally spent and thoroughly exhausted, Duncan collapsed back to the ground as Kara and Marie began to slurp and suck at each other in a delicious cummy kiss.\n\nKelly slid over next to him and smiled.\n\n\"That was fun,\" she said simply.\n\nDuncan chuckled weakly. \"Good God, what the hell did she do to us?\"\n\n\"I think she just fucked our brains out,\" Marie said, causing the others to giggle.\n\nKara rose from her spot on the floor next to Marie and pulled Kelly up.\n\n\"Come on,\" she said as she pulled her up despite her protests. \"We're gonna go shower,\" she said, looking at Duncan and Marie. \"If you hear any yelps of pleasure, don't worry. It's just Kelly.\" Grinning wickedly, she pulled his wife towards their bedroom.\n\nTurning, he looked at Marie who was still laying there panting. \"God I think we unleashed a monster.\"\n\nShe nodded and looked up. \"Damn if she's not a fun little monster though. Thank God you guys brought her to the party. I hope all your friends are like this!\"\n\nHe smiled knowingly and closed his eyes, intent on getting a little rest.\n\n\"Fuck,\" Marie said. \n\nHe raised his head slightly and looked down. \"What?\" he asked.\n\nShe frowned and gestured towards him. \"I have an opportunity to go a few rounds with that monster and I can't because we're both exhausted.\"\n\nHe chuckled again and fell back. \"Don't worry. I'm sure you'll get another chance.\"\n\n\"Promise?\" she asked.\n\n\"Absolutely,\" came the reply."
    ],
    "authorname": "Mentalcase",
    "tags": [
        "group",
        "threesome",
        "lesbian",
        "blowjob",
        "exhibitionism",
        "hotwife",
        "swallow",
        "foursome"
    ],
    "category": "Group Sex",
    "url": "https://www.literotica.com/s/lucky-man-ch-08"
}
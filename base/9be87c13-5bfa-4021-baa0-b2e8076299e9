{
    "title": "14 Hours Pt. 10",
    "pages": [
        "-Will-\n\nLili's next appointment came sooner than I expected, or at least sooner than it felt. She is sitting upright on the table, with me sitting next to her on the chair while we waited for the results. Apparently, her last appointment the nurse drew some blood and we were here for those results. Why this could not be done by phone, eludes me, but I guess that only reveals my own ignorance of this process. \n\nHer doctor came in ten minutes after we were placed in this room, sitting uncomfortably and silently next to each other. I kept hoping the doctor would come sooner, just to break the atmosphere. \n\n\"How are we doing Lili?\" The doctor asks, looking very much like a doctor with a white coat, stethoscope around her neck, pocket protector, and a clipboard with her patient's medical chart.\n\n\"Morning sickness is getting better, that stuff you gave me last week is really helping,\" Lili replies with a smile, the doctor writing something before placing the clipboard down.\n\n\"That's good to hear,\" the doctor says, readying a blood pressure wrap, Lili rolling up her sleeve a little. The doctor wrapped it around her bicep and placed a pulse checker on her right index finger before starting the machine that constricted her arm.  \n\n\"Any concerns?\" The doctor asks.\n\n\"Not right now, but you were concerned about my weight last week,\" Lili said, the doctor nodding while her pulse finished. \n\n\"You were one-o-five last time, I would recommend you gain some weight even if you weren't pregnant. What did you weigh in at again?\" The doctor asks, leaning over and looking at her chart. \"You gained two pounds. What diet are you using?\" \n\n\"I'm really just eating more, and I've added a protein shake in between lunch and dinner,\" Lili replies, the doctor smiling and nodding.\n\n\"That's good, healthy momma is a healthy baby,\" the doctor says before looking at me for the first time since this entering the room. \"You can help by keeping her on track with that diet. Not to be presumptuous but I'm assuming you are the father.\"\n\n\"Yeah,\" I say, with barely any volume. \n\n\"I have to say, I don't see many fathers in this room. There is no need to feel embarrassed, you're already better at managing this than a majority of men your age.\"\n\n\"The timing isn't perfect, but we'll both be graduating college before the baby's due,\" Lili says, grabbing my hand and smiling at me. Thanks for the save. \n\n\"Pressure is good,\" the doctor says, removing the wrap from her arm and replacing it into the small basket hanging on the stem of the machine. \"You are remarkably healthy, weight is a little lower than I like to see for a pregnancy, but you're already on the path to a healthy gain. Nothing of concern in your blood work either. I won't need to see you until you enter second trimester.\"\n\n\"Thank you,\" Lili says before placing her feet on the floor and leaving the room with the doctor and me. Lili makes her appointment for the start of the second trimester and we leave the doctor's, which is a private practice, a town over from ours just off the highway. \n\n\"That went well,\" Lili says, pulling car keys from her purse and unlocking her car. She sits at the wheel and I sit passenger. Lili starts the car to get the air blowing, but keeps it in park.\n\n\"I though you would chicken out,\" Lili says, tilting her head to look at me from the corner of her eye.\n\n\"I was adopted,\" I say, starting the conversation, Lili completing her head turn, \"I literally met my birth mother last month. Regardless of how it happens, my kids will know me.\"\n\n\"Damn,\" Lili says, laughing a little.\n\n\"What?\"\n\n\"That was badass. I got a small lady boner when you said that,\" Lili says, smiling wide at me, me looking down and away. \"You told Kori yet?\"\n\n\"Trying to,\" I reply.\n\nI started my relationship completely and intentionally as upfront with Kori as possible. This was done to avoid the situation where I fail to tell her something, and it blows up in my face later because she hears it from someone else first. Kori keeps telling me she'll forgive anything I did before we met as long as I'm open with it, but that promise is already showing signs of exhaustion to keep it. \n\nHow exactly do I tell my girlfriend I knocked up the other girl I slept with the night we met, the same girl who attacked you in what appeared to be a crazy jealous rage. \n\n\"It's either she gets it, or she doesn't. I really don't see much middle ground,\" Lili says, and I hate to admit she is right. There is no third result. Kori has already had me stop the investigation of my black out night because being reminded of it bothers her, and now she'll always have a constant reminder. I wouldn't blame her if she wanted nothing to do with that. \n\n\"Where am I dropping you?\" Lili asks, shifting the car into reverse to back out of her space.\n\n\"Home I guess,\" I say. \n\n-Kori\u2014\n\nWill has been behaving weird for about a week now. I can almost trace it exactly back to a single moment; when he talked to Lili. I know I have a tendency to freak out over things that often result in being nothing, but my gut feels different with this one. \n\nSomething feels worse, and when I try asking him what that worse is, he keeps assuring me it was nothing. Nothing would not change his behavior around me. \n\nSamantha has a theory and I hate it. \n\n\"Maybe she's pregnant,\" Samantha suggests as she walks with me while I'm stocking shelves in the book store.\n\n\"Doubt it, because I know where he came on her,\" I say, Samantha laughing with a bewildered face, \"Will had pictures he didn't remember taking. Facial finale.\"\n\n\"Does he still have them, I have to see this shit,\" Samantha says, and I shrug. He better of have deleted her photos. \n\n\"That was the start of our disclosure policy,\" I explain.\n\n\"His hall pass of if it happened before you met, all is forgiven so long as all is revealed?\" Samantha asks and I nod in reply, \"You've heard of precum right?\"\n\n\"Of course of I have...\"\n\n\"Then my theory is still viable,\" Samantha interrupts, and I relent that she could be correct. I do not want her to be right, and because it is her theory, I feel a little better. Samantha is usually wrong. \n\n\"You going to break your promise if that's the case?\" Samantha asks, and I have no idea how to respond. I have a plan, and this kind of drama is exactly why I never placed relationships as a part of that plan. It is one thing if my boyfriend has a psychotic ex, I've dealt with that because she's generally not around much. If she has his baby, the only way I avoid her then, is if I break up with Will.\n\n\"Part of that,\" I start to say, placing a book on the shelf and leaning on my cart, \"Is contingent on Will being upfront with me. So far, he's been distant and shady.\" \n\n\"Good point,\" Samantha says and picks up a new release from our romance section. Dime store smut, but it sells. \"Steve McBigDick, a former Navy Seal returns home, only to see his high school flame working at the local diner. Has their former love died, or will this book be about a cheating wife fucking a failed relationship and honestly attempt to tell me a lesson about love and loyalty when the entire plot circles around infidelity?\" \n\nSamantha drops the book in the cart, and points at the covers, \"Any guy who looks like that,\" Samantha says, pointing at the chiseled abs in flannel shirt, \"In my experience is either gay, or fucks while looking at himself in the mirror.\"\n\n\"Will is the extent of my experience,\" I say. I think Samantha forgets how awkward I feel talking sex with her sometimes. \n\n\"I know I tease you two a lot, and your romance is nauseating, but Will is a good guy. That's his best and worst quality, and it's yours too. You are both really good people, and anyone else would walk all over both of you. I'm terrible girlfriend material,\" Samantha says.\n\n\"You are not...\"\n\n\"Bitch don't even try...\"\n\n\"Have you ever actually tried?\" I ask, Samantha placing her hand on her hips, before buzzing her lips in frustration and submitting.\n\n\"Not really. I like two things in life, freedom and fucking. All American,\" Samantha says, both of us laughing.\n\n\"I like sex as much as the next girl. Probably not as much as you, but you know the sex gets better when you actually let a guy stick around for a while. Your sexual satisfaction ratio has to be extremely inconsistent.\" \n\n\"Will is only guy I've fucked twice,\" Samantha says, and I do not even feel weird that she said that, \"Hope that wasn't strange to say.\" Samantha looks very unsure of what that means, or what that says about her.\n\n\"It's okay,\" I say to assure her I am okay with that, \"Kind of unfair to be mad when I was there for one of them.\"\n\n-Samantha\u2014\n\nI feel like a cunt. A flaming fuck of a cunt. I left my book at Will's on purpose, to create the reason I needed to go back. My heart was racing when I did it too. Kori, Will and me were studying, and I placed my book on the side of his desk, to prevent him from seeing it before I left and handing it back to me. What the hell am I doing?\n\nWhen I pull onto his street, there is already another car there. I know it isn't a friend of his parents, because the company they keep drive Mercedes and BMW, they don't drive ten year old hatchbacks. Who is at Will's?\n\nI park my car across the street and three houses down, like I'm a cop watching his house. His door opens, and I see Will step onto his porch, a moment later he's followed by the Crimson Cunt. What kind of shady shit are you up two up to. I'm one to talk, I'm here for some shady shit.\n\nI can tell even from the distance that Will is uncomfortable with her. His posture is guarded, he's never closer than three feet from her, and his hands are in his pockets the entire time. That's a better sign I guess, but why is she there then. Only one thing comes to mind. God I hate being right. Lili is pregnant. \n\nLili leaves a few minutes later, and I exit my car and walk across the street. I cut across his lawn and arrive at his porch, knocking on his door and shoving my hands in my pockets. Will opens the door a few seconds later, and oddly doesn't look surprised to see me.\n\n\"You forget something?\" Will asks. \n\n\"Is Lili pregnant?\" I asked, and Will's face goes pale, \"That's a yes.\"\n\n\"How do you...\" \n\n\"I saw Big Red leave as I pulled in. You don't cheat, so that's the only reason you'd be talking to her. Have you tried talking her into an abortion?\"\n\n\"Not an option to her, and really isn't one to me either,\" Will says.\n\n\"You need to tell Kori. If that was her who pulled in after she left, you'd know she'd be calculating her weight to milligram ratios for an overdose. She's a pill girl, I can tell.\"\n\n\"How the hell do I start that conversation?\"\n\n\"The same way you've started all of the other ones where you have to reveal the weird shit you did that night,\" I say. This shit really isn't that hard. Every second he delays, he's digging his hole deeper. \n\n\"Why did you come back?\" Will asks to change the topic I'll assume.\n\n\"I left my book in your room. My notes are in the pages,\" I answer, and Will gestures to the stairs. When I start to walk up the stairs, he stays at the bottom. My plan sucks right now. He's not taking the bait. \n\nI retrieve my book from next to his desk, and sit on his chair, placing the book on the desk top. \n\nKori has a bombshell heading her way, and here I am, trying to drop a second one on her. I've fucked a lot of girls boyfriends, but this is the first time I'm reconsidering it. Being a popular girl, doesn't mean I have a lot friends. I don't actually have any real friends, except for Kori and Will. \n\nWill is the only guy I've ever wanted to have sex with again, and I don't think his big dick is the only reason. He's the first person who ever asked me what was wrong, and actually gave a shit, and called me out on my bullshit. \n\nI love Kori, but she wouldn't stay around even if he was open with Lili's pregnancy immediately. Kori will not stay around for any baby mama drama. That kind of drama is literally my entire life, I know how to deal with it. Lili doesn't scare me in the slightest, and unfortunately I must admit that is going to be a cute kid. \n\nI'm done reconsidering. Kori will break up with him anyway. What's another reason?\n\nI take my book and walk to the stairs where he is still waiting at the bottom. He sitting on the second stair, his chin in his palms. The look on his face is deep in thought and intense. Will is so hot when he looks intense. \n\n\"Honest question,\" I say and sit next to him. \n\n\"What?\"\n\n\"Do you actually think Kori will accept this?\" I ask, Will releasing a deep sigh before shaking his head. \n\n\"I don't. That's part of the reason I've been putting off telling her,\" Will says, and I understand that completely. They're breaking up regardless. That should make it easier, but it doesn't.\n\n\"You going to try to make something work with Lili?\" I ask. It's a legitimately possibility.\n\n\"We've already both decided trying to force it wouldn't work,\" Will says, and I look away to smile. Kori is not going to last and Lili won't even start. This moment is mine. \n\n\"I'll still be around,\" I say, Will looking at me, and I turn back to face him, \"My college is pretty close. You're going to have a cute fucking kid, I'm not missing that.\"\n\n\"I'm going to tell Kori tomorrow,\" Will says as I'm sliding my hand to his, and I stop. I'm not reconsidering, I'll just delay. Last thing I need is for that break up to be worse than it has to be. If he's less guilty it'll be easier.\n\n\"Sooner the better,\" I say.\n\n\"Why did you hide your book in my room?\" Will asks, and I freeze. I thought I was more discrete than that.\n\n\"If you saw me do it, why didn't you say something then?\" \n\n\"You want me to address that with Kori in the room?\" \n\n\"Good point,\" I say, and look at my feet. Why am I so nervous? I hate the way he makes me feel. When I turn back he's looking straight at me.\n\n\"Never answered the question.\"\n\n\"Because I'm a terrible friend who has no respect for boundaries,\" I admit, and I hope that's enough to explain my already apparent intent. \n\n\"What are you looking for? A quick fix?\" He asks.\n\n\"I can get that anywhere. I've never been in a relationship longer than an orgasm. Honestly I wanted to give one a try, even if that meant taking you.\"\n\n\"I don't know much,\" Will begins, \"But how sound do you think a relationship founded on infidelity will be?\"\n\n\"That's kind of a technicality at this point,\" I say, and Will laughs a little. I see where this is going, and it's not where I want it. I stand up with my book and walk to his door. I look over my shoulder and say, \"I'll see you later.\"\n\nBefore I can turn the handle, Will stands up and spins me. He pushes me into the door and presses his lips to mine. My book fumbles to the ground as I wrap my arms over his shoulders. His arms slid behind my back and drift pass my ass then to the back of my thighs. I know what he's doing, so I jump a little, allowing his hands to grasp the back of my knees and lift me up. I hold myself on his neck and he turns and starts to ascend the stairs with his tongue in my mouth.\n\nWill misses the doorknob of his room, accidently slamming my back against it. If he did it any harder, he might have broken it, and knowing that only made me want this more. He opened the door on the second attempt, closing it behind us. \n\nI'm dropped on his bed, Will falling on top of me. I'm not inexperienced by any measure, but I've never kissed this much during sex. By now I'm sucking the guys dick, because I'm the one in control of it. I own the situation. I've done a lot of fucking, but I've never been fucked. I fuck them, not the other way around.\n\nWill is dominating this situation, and it scares me. He makes me feel vulnerable, and I'm terrified of letting the control go. I push him off me reflexively, and he looks at me with concern. \n\n\"Want to stop?\" Will asks, and I feel heat rush to my cheeks and I turn away from him, but he takes a finger and rotates my head right back.\n\n\"I feel weird,\" I say.\n\n\"Kori?\" Will asks, and I shake my head.\n\n\"I've done this too many times to feel bad about it now,\" I say and I push him more, until I have enough room to sit up. I slid away and sit with my back against the wall, while Will leans against the bed with his arms fully extended.\n\n\"If you don't want to, we don't have to,\" Will says.\n\n\"It's not that, it's just that I'm never not in charge,\" I say, and Will laughs, \"I'm serious. I'm the aggressor. I'm damn near a predator.\"\n\n\"You don't know how to be the prey,\" Will says with smile, and I nod.\n\n\"A few months ago, you were easy prey too. That charismatic guy on an Ativan trip I met, that is who you really are. You had already knocked a girl up and popped a cherry before you even got to my doorstep. I wanted to keep exploring that night, because I wanted more of that guy. The deeper we went into that night, the more you gave yourself permission to be yourself, and I really like that guy.\n\n\"I know the final clue. The chap stick is mine,\" I say, Will looking at his desk drawer, which holds the shoebox of clues we had collected.\n\n\"Why didn't you tell me?\" Will asks\n\n\"Because then we have nothing left to explore. I don't know about that last seven hours, but that bridge is pretty close to my house. After the night you had, I wouldn't be surprised if you burned out and collapsed.\"\n\n\"Did you think we stop being friends when we solve the mystery?\" Will asks, and I nod. It's a stupid fear, but I felt it. What happens when the only thing that unified us is resolved. \n\n\"I didn't tell you about the chap stick, and now I'm acting like a chicken shit about sex,\" I say, and Will places his hand on my knees.\n\n\"Do you trust me?\" Will asks, and after a moment's hesitation, I nod. Will immediately pulls me to my back by my legs resumes where we left off. My mind's reflect is to resist, but my body submits. \n\nWill knows this is uncomfortable to me, so he takes his time. Shirt slides off, my bra follows, and his mouth begins to suck my nipples. I mess with his hair, and I tug when his finger traces my down my body and slips into my jeans. I gasp as he plunges it into my pussy, and I had no idea how wet I already was. It glides in so easy and smooth. \n\nHe pulls his hand out and undoes my button and zipper. My breasts go cold when he leaves them to tug my jeans and panties off, but he's not gone for long. He returns to caress my tits with his mouth while sliding his finger, then fingers into me. I'm usually fucking by now, but I'm not in control. Will is in control of me. \n\nI feel his lips trace my stomach, and I quiver a little. My entire body trembled, and it tremored when his tongue licked up my slit. I've had my pussy eaten out plenty, by a few chicks too, so why does he make me squirm? Will shoves his tongue in, and I spasm. Stop teasing me already. \n\nThat's exactly what he does though. He's lapping me up longer than anyone ever as, and I can't handle it. I'm wiggling and whimpering, gripping his hair with one hand and the sheets with the other. Then I feel it, that glorious orgasm I love so much. My body language must be screaming I'm close, because his tongue went to my clit and he hammers his fingers into me, and I start to come hard. I know no one is home but us so I shout out my satisfaction. I scream louder as he keeps drilling me with his fingers, making me dance awkwardly. \n\n\"Take your pants off,\" I say between breaths. Will pulls himself up, and strips his shirt off. While he's standing I slide up and start undoing his belt. His pants fall to the ground with his boxers, and he's hard as a rock. I lean down to gobble him up, but he bends away from me. He's still teasing me.\n\n\"Let me get comfy,\" Will says before laying on his bed. I crawl over to him and drop my mouth onto his cock. His hand holds my hair up, but also uses it like reigns to guide me. With small tugs and pushes he controls my depth and speed. A little pull up and I'm circling my tongue around the top, a hard push I try not to gag as it goes into my throat.",
        "He's in control, and I'm starting to like it. \n\nI jerk him with my right while I reach through my legs to finger and rub my clit. I want him to come so bad, and I want us to do it at the same time. I know he has a pretty solid reset time, but I don't want an intermission.\n\nI suck hard as I pull back up, my lips leaves his cock releasing a loud suction cup sound. \"Fuck me,\" I say. It sounds more like a plea.\n\nWill pulls me up and turns as I fall, make me land on my back and him on top of me. With our all natural lube he slips into my pussy with ease, the only effort is pushing it all of the way in. Will hurts just a little, and it literally takes my breath away. His arms wraps around me, and he presses his lips to mine. \n\nIt's hypnotic. Slow deep thrusts while he kisses my lips, neck, and shoulder. I have most guys flip me over and pound me from behind because doggy is my orgasm position, but he's intimate. Will wants me to enjoy it too. His rhythm is perfect, and I start to move my hips to follow it. We're in synch, and I already start to feel it. I'm going to come again. We're not even five minutes in, and I feel it.\n\nI lock onto his movement, and before I know it, I grab his back and move my face to the side to shout. My scream echoes in his room for a moment before he pulls my mouth back, making me yelp into him. His speed increases, making my muffled volume increase. \n\nI'm normally in a different position by now, but we stay in different variations of missionary. Laying on our sides with my left leg up, both of my legs over his shoulders, him holding my ankles to really open me up and go deep. \n\n\"I'm almost there,\" He groans mid dive. \n\nHow do I want him? Drill it into me and cream pie? Pull out and cover my snatch and belly? Face fuck me and swallow or facial. If we were doggy I weirdly like it when a guy sprays all over my back. I'm not in charge though, Will is. \n\nWill starts to ram me hard, pulling my legs wider, allowing him to push into me to the base for the first time. It hurts so good, and I come again. Our moans complement each other as pushes deep and holds it, and I feel his cum begin to spurt inside of me. His cock pulsates, and I feel every expansion intensely. He moves his hips in shallow motions to massage himself, to milk out the last drops. \n\nWe're both breathing hard, a thin layer of sweat on our bodies, as he leans downs and begins to kiss me again. His lips are firm and passionate, and our bodies are still attached at the hip. Minutes after he filled my pussy, he slowly slid himself out, lying next to me and continuing our tongue spiral.\n\nI'm entranced, and his assault on my senses are dizzying. His hands never leave my form, caressing and massage me. I lose track of time before I reach down and feel his firmness has returned. My body is aching to feel him again, so I begin to rotate, but he's knows my intent before I did and pulls me up on top of him. I align the head of his cock with my slit and drop down. I'm still sobbing wet, my pussy eats his cock, our hips colliding, making me exclaim with a squeal. I arch my back up and place my palms on his thighs, using my arms and knees to rise and fall.\n\nWill's hands grip my ass, assisting me and saving some of my energy. I'm about to come again, and every orgasm has been a different experience. When I start to scream, his hands move to my tits and clit, and I lose my strength and collapse backward. Even while leaned back, Will keeps massage my clit, my hand reaches to pry him away. His other hand holds mine at bay, leaving me helpless to mumble and squirm.\n\nShowing me mercy, he stops to adjust us into missionary again.\n\n\"Fuck me from behind,\" I whisper, my voice gone, the words falling out of my mouth limply. I have no strength left, my body is putty, my mind is mush. I'm left to communicate with minimal body motion and hushed tones. \n\nI'm flipped to my knees, Will pushing pillows beneath me to keep me upright. He enters me, inch by inch, slowly, as if to determine how much my cunt could comfortably manage. My knuckles go white gripping the sheet when he decided only all of him would do, his balls swing up into my pelvis. \n\nHis pull back feels like half, his thrust is all. It's slow, but it's forceful, my body rocking forward and back, the only thing keeping my tits from uncomfortably moving was the pillow beneath them. Pushing all of the way in, he tilts his body down on top of mine, returning to those shallow orgasm thrusts. His lips warm my back, both of his hands shoved between the pillow and me to cup my breasts. \n\nOne hand leaves and travels to my clit, making me gasp as I feel it again. I've never had this many orgasms, but he's perceptive of when and where to place his hands to match the cadence of his dick in me. Only a few months ago he had never done any of this. \n\nWhat a difference a few months make. \n\n\"What number was that?\" Will teases, that cocky bastard.\n\n\"Harder,\" I say, almost a dare to myself. Can I take an even larger beating than I've been taking? \n\nWill's hands returns to my hips, and he obliges. His half thrust becomes a full, and he's beating the shit out of my snatch. I pull the pillow up to bite into it, pushing it into my face to suppress my cries. I lose my breathe and come up for air, struggling to inhale enough to revitalize myself. My voice bellows out, and when I try to hush it with the pillows, my hair is pulled back, leaving me no choice but to fill his room and likely his entire house with my screams. \n\nWill tires out a few minutes later, and I'm grateful and disappointed.\n\n\"I'm there,\" Will says, pausing, likely to decide where the finale where be. \n\n\"Give me your dick,\" I say, Will pulling out and laying back. I turn around and immediately lunge my mouth onto his cock and feverishly start sucking and stroking. I want him to come so bad, he deserves the best orgasm of his life right now. \n\nHis voice goes jagged, and I start jerking him hard with my lips wrapped around his head. His cock pushes against my lips, and he shots into the back of my mouth. The moment I taste it, I jerk harder, swallow the first spurt as the second and third follow. It's Will's turn to squirm, and I enjoy watching him dance. I drink him up, but I don't stop playing with him until he goes limp in my mouth.\n\nI fall next to him in bed, both of us catching our breath and laughing. I don't try to kiss him, but I kiss his chest. I've never been this satisfied or content in my entire life. I've had good sex, even great sex. I can't conceive what made this one different. With my head on his chest, his arm draped over my body, only one thing was bouncing around my head. I don't know if I'm scared or happy with what I said next, but said it, more to myself than to him.\n\n\"I love you.\""
    ],
    "authorname": "CaffeineFetish",
    "tags": [
        "relationship",
        "love",
        "cheating",
        "infidelity",
        "romantic",
        "doggy",
        "blowjob",
        "series",
        "teen"
    ],
    "category": "Humor & Satire",
    "url": "https://www.literotica.com/s/14-hours-pt-10"
}
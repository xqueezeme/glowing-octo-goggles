{
    "title": "Mandy's Sexcapade: Anal Virgin No More",
    "pages": [
        "Author's note:\n\nToday is Tuesday, 3/24/2020, and the world is currently dealing with the coronavirus pandemic. I hope \"Anal Virgin No More\"--- and my wife's incredible ass--- will provide you with a pleasant escape, however brief. Please stay safe!\n\nThis series is a non-sequential addendum to the \"Sharing My Wife Amanda\" storyline. \n\n******************************************************************************\n\nPrologue\n\nI'm a very lucky man to be married to the sexiest, most beautiful woman in the world.\n\nThis is, by no means, intended to objectify or demean my wife, but Amanda possesses 3 tangible characteristics --- in no specific order--- that, in my humble opinion, place her in the highest echelons of physical beauty.\n\nThe first is the flawlessness of her face and the unblemished texture of her naturally tan skin. I've come to fetishize Amanda's adorable freckles, which is perhaps her sexiest feature of all, but the way her brown eyes always twinkle with mischief, like there's an inside joke that only she's aware of, is equally mesmerizing. And her smile... it lights up the world more brilliantly than the sun on my darkest days\n\nAside from her supermodel-like good looks, people probably notice Amanda's amazing breasts first when she enters the room: 34c... perfect in shape, size, and firmness... perfect in every way! Amanda's breasts are obviously glorious when fully exposed, but I somehow adore them even more when they're wrapped in a snug, sweaty sports bra.\n\nLastly, of course, is Amanda's incomparable ass. My wife doesn't possess a \"bubble butt\" or an \"apple bottom\"; far from it. In fact, she would be highly insulted were anyone to describe her bottom as such! No, she flaunts a sleek, super-toned bottom, achieved from strenuous workouts at the gym and running 20+ miles weekly, that is as firm as I get whenever I see it. And like Amanda's breasts, the sight of her bare bottom is an ungodly pleasure, yet it's even more arousing when she wears her sexy yoga pants.\n\nAh, how I adore my wife's incredible ass...\n\n******************************************************************************\n\nSeveral strands of Amanda's long black silky hair fell over her face, and she blew them aside through the corner of her mouth. Though my wife had just returned from the gym, she was diligently washing dishes that I had oafishly forgotten in the sink. Her back was to me, and I stood behind her unnoticed.\n\nI stared at Amanda in admiration. Her hair covered most of her backside. However, clad in a snug sports bra and yoga pants that left little to the imagination, it was difficult not to notice the chiseled muscles of my wife's V-shaped upper torso. Her body was sculpted as if made of granite, and she was, literally, a model of health and fitness. But my eyes insidiously drifted downward as they always did when Amanda's back was to me.\n\nThat ass... my god... that incredible, perfect ass...\n\nI stood in the middle of our kitchen and gazed at Amanda vacuously. The mere sight of her bottom, especially in those sexy yoga pants, made me harder than diamond. I was so engrossed by its perfection that I didn't realize she had shut off the water until she turned around.\n\nMy wife regarded with me with a bemused expression, but I hardly noticed. I went from being mesmerized by her behind to fixating on her beautiful breasts and sexy 6-pack abs that rippled impressively with the slightest movement. \"Are you staring at my ass again, babe?\" Ironically, she was only joking.\n\nI blushed. \"Yea... uh... actually, I was, Mandy.\" At that, her freckled cheeks turned a darker shade than mine. \"Sorry, you caught me red-handed.\"\n\nAmanda threw a dishrag that narrowly missed my head. \"You're horribly, you know that?\" But she was smiling and clearly appreciated my attentiveness to her form.\n\nI quickly glided towards her, placed my hands on her hips, and spun her around. Driving my crotch into her behind, I playfully pinned Amanda to the kitchen sink. My burgeoning erection pressed into the crease of her ass as I encircled her with my arms. Amanda squealed and attempted to squirm away, but I had her trapped precisely where I wanted her.\n\nThe firmness of her bottom... the softness of her hair... even her sweaty fragrance was like an irresistible pheromone.\n\nI rubbed my crotch against Amanda's behind even harder; I wanted her to feel it.\n\nMy wife giggled. \"Um, what are you doing?\"\n\n\"I'm showing you how crazy your ass is making me,\" I breathed in her ear.\n\nAmanda purred, \"I can tell. Maybe we should continue this discussion in the shower.\" Normally, that would've sounded perfect because some of the best sex that we ever experienced had taken place there.\n\nBut I required instant gratification.\n\n\"I can't wait,\" I confessed in a pained tone. \"I'm so fucking hot for you that I need you right now.\" Amanda's luscious bottom had me so sex-crazed that I spoke my next words without thinking, and immediately regretted it: \"I want to bend you over this sink and nail your ass.\"\n\nMy wife was typically adventuresome in bed. Save for the extremely bizarre, there wasn't anything that she wasn't willing to try at least once. We often watched porn together, dabbled with sex toys, and even practiced light bondage while taking turns being the \"dom/domme\" and \"sub\". But there were 2 specific boundaries that she unyieldingly maintained.\n\nAmanda had a designated \"No Fly Zone\", which essentially meant that I was forbidden to cum anywhere above her neck. To put it succinctly, she would not finish my blowjobs by swallowing or allowing me to jack off near her face. I never pushed the issue. After all, oral sex was already an intimate act that required a great deal of trust between us, and my wife understandably considered swallowing semen grotesque, much less wearing it on her face! While I secretly fantasized about both, I was just happy to be receiving blowjobs fairly regularly.\n\nBut nailing Amanda in her incredible ass... now that was a different story. Unfortunately, her 2<sup>nd</sup> sexual exclusion was anal sex. Each time I would bring it up or even hedge around the topic, my wife would crinkle her nose and immediately end the discussion with a resounding \"No!\"\n\nBut the more Amanda denied me anal sex, the more I craved it. Her ass was so absurdly perfect that sodomizing it became an obsession. Sure, traditional vaginal sex, as well as oral sex, with my wife was as incredible as ever, but every time she was naked or simply walked by, I couldn't help but dream about poking her in the butt.\n\nMy wife grunted irritably, snapping me out of my thoughts, and immediately pushed me away. \"Babe, you know how I feel about that.\"\n\nDamn it, you're such an idiot, I berated myself. \"I know, I know,\" I grumbled lamely. \"But I was just hoping... I mean, I was really hoping that you might, you know... \" My voice trailed off as I lifted my hands imploringly.\n\nAmanda rolled her eyes with a look of immense disgust that almost killed the mood and shriveled my engorged penis to its original size.\n\nAlmost.\n\n\"Dishes are done, I'm going to take a shower,\" she hastily announced.\n\nBut I kept her pinned against the kitchen sink. \"What if I just bend you over and take your pussy instead?\" Sure, I was acting like a Neanderthal... but I was getting desperate!\n\nAmanda chuckled evilly. \"How mad would you be if I said 'no'... how frustrated would you be... huh?\" My wife was relishing the absolute power that she wielded over me.\n\n\"Christ, Mandy. Are you going to make me get on my knees and beg? Because I will.\"\n\nAmanda was amused by my pitiful desperation but, without even realizing it, was gently grinding her bottom against my crotch. I was so aroused that my penis was erect in my pants, and its underside was pinned along her vertical crease. I began to shift my body against hers, too, essentially dry-humping her butt.\n\nI emitted a drawn-out moan. \"Fffffuuuuuccccckkkkk....that feels SO good....\"\n\n\"Yea? You like that, babe? You like it when I rub against my ass against your cock?\" It was a rhetorical question, of course.\n\n\"Take off the leggings,\" I whispered. \"I want to make love to you right now.\"\n\n\"Mmmm... but I like this. It's kind of kinky. And I like feeling you so hard against me. Don't you like it?\" For emphasis, Amanda pressed her bottom more heavily into me, and the contact was overwhelmingly stimulating.\n\n\"God, yes. I love it, I fucking love it.... Christ, that feels good.... mmm, so good.... shit, Mandy, if you don't stop I'm going to explode in my pants.\" I was so out of control that I was talking like a foul-mouthed sailor.\n\n\"That's sort of the point, silly.\"\n\nAmanda wiggled her hips, and that was my tipping point.\n\n\"OH....FUCK!\"\n\nA powerful climax surged between my legs as I dry-humped my wife's ass. I was howling and pumping wildly, and my arms automatically snaked around her body. A lesser woman wouldn't have tolerated how harshly I squeezed her breasts, but my wife merely cackled as I used her entire body to pleasure myself.\n\nWhen I was finally spent, I backed away from Amanda gingerly, in utter disbelief that I had used her ass--- and to a lesser extent, her breasts--- to get off. I moved awkwardly, afraid to get the foul mess in my pants all over myself. My wife took one look at me and chortled.\n\n\"This isn't funny!\"\n\n\"Are you complaining?\" she asked me pointedly.\n\n\"Um, no. I am most certainly not.\" Dry-humping my wife's butt was like tittyfucking her: heavenly in every way imaginable.\n\nMy eyes were drawn back to Amanda's ass as she strode past me. Just as she was about to exit the kitchen, however, she stopped to look at me over her shoulder. \"I'm going to shower now. Come join me.\" It was a statement, not a request. \"Maybe I can clean you up before we make another mess.\"\n\nMy erection instantaneously returned.\n\n******************************************************************************\n\nA week later, Amanda and I were getting ready for a dinner date with my best friend Dimitri and his new girlfriend Kate, whom we'd be meeting for the first time. Dimitri was as dear to my wife as he was to me, so we both wanted to make a good impression on Kate for his sake. I was in our walk-in closet searching for a nice shirt when Amanda entered.\n\n\"How do I look?\" she asked casually.\n\nI turned around and, naturally, my breath caught in my throat.\n\nAmanda was wearing a slinky black mini-dress. Composed of a very soft and stretchy material, the mini-dress was so thin and form-fitting that that it was like another layer of skin. It was strapless and sleeveless with an extremely low neckline that screamed attention to Amanda's eye-popping cleavage. The bottom of the minidress barely reached halfway down her thighs, showing off am exorbitant amount of her fabulously toned runner's legs. Combined with the stiletto heels that Amanda was wearing, the outfit made her legs appear obscenely long.\n\nDespite Amanda's smorgasbord of sexiness, I was once again enthralled by her unbelievable ass. The way the minidress swaddled it so snuggly like plastic wrap was like a powerful magnet that I could not tear my eyes away from. It was blatantly obviously that my wife wasn't wearing any panties, which made her appearance impossibly sexier.\n\nI had seen Amanda in this minidress before, of course. I had purchased it for a surprise dinner date [refers to \"Mandy's Sexcapade: Pantyless &amp; Proud\"]. Now, 1 child and a few years later, my wife somehow appeared insanely hotter wearing it now compared to the first time.\n\n\"Still fits,\" she declared proudly while studying her profile in a full-length mirror.\n\nMotherhood did not ruin my wife's figure in the least bit. She was clearly getting better with time, just like fine wine. I gazed at her rapturously. \"Kate is going to hate you.\"\n\nAmanda's was genuinely mortified as she spun to face me. \"Why do you say that?\"\n\n\"Because she's going to feel ugly and inadequate when she sees you in that dress.\"\n\n\"Omigod, babe. Please don't say that! Should I change?\"\n\nIt was both a blessing and a curse for a woman to be so beautiful. Yet Amanda's humility was endearing. Along with her intelligence, wry sense of humor, and overall charm, it easily outshined her physical attributes, which was why I loved her so dearly.\n\n\"I'm only teasing you, Mandy. You look fantastic. Of course you shouldn't change!\"\n\n\"Thank you, babe.\" Amanda beamed me a devastating smile that actually made me stagger back. She noticed my reaction, and her expression turned from loving appreciation to downright predatory. \"We still have some time before we need to leave.\"\n\nMy wife threw an even more mischievous smile my way as she turned and sauntered into the bathroom without further comment. With a bulge in my pants and my heart thumping hard, I quickly followed. Amanda stopped to regard me demurely as she pulled the bottom the mini-dress above her hips.\n\nShe wasn't wearing any underwear.\n\n\"Jesus Christ, Mandy. Your ass is fucking incredible.\"\n\nMy wife stepped to the bathroom sink and promptly leaned over it. With her face inches from the mirror and her upper half parallel to the floor, Amanda waggled her bottom seductively. As if her invitation wasn't clear enough, she reached back with one had to spread her pussy.\n\nAll I saw was pink.\n\nI immediately dropped my pants.\n\nI came right up to Amanda from behind. She brought her face to mine, and we kissed like 2 wild animals succumbing to their primal needs. Gripping my erection like a sword, I playfully slapped her ass with it and rubbed it along her vertical crease.\n\n\"Don't tease me like that, babe,\" she pouted girlishly. \"I need you inside of me.\"\n\nMy wife received no arguments as I mounted her doggy-style. Knowing that she liked it a little rough, I palmed the back of her head to force Amanda to stare at herself in the mirror. \"Watch as I bang the hell out of you,\" I growled.\n\nAmanda and I had 3 specifics places where we especially enjoyed having sex: in front of a mirror, in the shower, and outdoor on a clear and sunny day. Currently, her eyes were as wide as her mouth as we gazed at our own reflection while making love. But I happened to catch sight of her puckered hole as I glanced down.\n\nMy cock throbbed even harder in Amanda's pussy. It was as if her asshole was calling to me... beckoning me... teasing me as it flashed before my eyes. Without thinking, I brushed the pad of my index finger over it.\n\nAmanda flinched and she stared at me hard through the bathroom mirror but remained silent as I continued driving into her from behind. Somewhat emboldened, I licked my fingertip and traced it around the rim of her anus. I could see that her expression was somewhat wary now, but when my wife still didn't react negatively, I slipped the tip of my index finger in.\n\nIt was as if Amanda suddenly suffered an electric shock. Her head and spine instantly arched backwards and she gasped loudly. Furthermore, the entrance of her anus reflexively constricted. I couldn't believe that my fingertip had elicited such a dramatic reaction!\n\nI realized it was now or never. \"Please, Mandy,\" I begged. \"Let me dry it.\" I didn't need to explain what I meant by \"it\".\n\nTo my utmost disbelief, she nodded!\n\nI instantly slid out of her pussy and excitement filled my thoughts as I brought the tip of my erection to Amanda's anus.\n\nI can't believe it, it's finally happening!\n\nI missed my wife's nervous expression in the mirror as I began to penetrate her, but winced when her internal muscles automatically contracted at my intrusion.\n\nGoddamn, she's got a tight ass!\n\nUndaunted, I pushed harder, gritting my teeth as I was barely able to fit my bulbous head in halfway. It wasn't that my erection was a beastly size; rather, Amanda's anus was spasming so uncontrollably now that it was getting even tighter. But the sight of my cock partially buried in her ass so visually stimulating---- there mere fact that I was finally having anal sex with my wife so thrilling--- that it was worth the physical discomfort.\n\nSo I forced my manhood a quarter of the way in.\n\nAmanda's expression quickly changed from apprehension to outright agony, but I was so engrossed in my own selfishness that I didn't notice it until she screamed.\n\n\"Babe, you're hurting me!\"\n\nI swore and immediately pulled out. \"I'm so sorry, Mandy! Are you ok? I'm so sorry!\"\n\nMy wife bore a painful expression, one that I had never seen before and tore at my heart, as she pulled her dress back down. She was grimacing when she replied unconvincingly, \"I'm fine.\"\n\n\"Are you sure? You don't look fine. Here, let me---\"\n\n\"I said, I'm fine!\" she snapped.\n\nI immediately grew silent, unsure of what to do, suddenly loathing myself for hurting the woman whom I loved more than life itself. Amanda limped slightly as she paced back and forth to walk off the lingering discomfort. She continued to shift awkwardly and still appeared uncomfortable, which was heartbreaking.\n\nFinally, she stated brusquely, \"Come on, let's go. I don't want to be late.\"\n\nAmanda's gait gradually returned to normal as I followed her to the garage. Her demeanor also softened, and she was back to her bubbly, talkative self by the time we were on the road. But she noticeably didn't bring up our 1st attempt at anal sex for the rest of the night.\n\nI felt like such a horrible husband.\n\n******************************************************************************\n\nAn odd, gentle shaking woke me early the next morning. It was Sunday--- my day to sleep in. Somewhat annoyed, I rolled onto my side and tried to fall back asleep.\n\nThen the gentle shaking happened again.\n\nCurious, I opened my eyes and lifted my head. Amanda was curled up in a ball reading an e-book on her tablet. The shaking occurred for yet a 3<sup>rd</sup> time.\n\nIt took me a moment to realize that she was stifling laughter.\n\nI asked glibly, \"Good book ya got there?\"\n\nAmanda rolled to face me, and there were actual tears in her eyes. \"I'm sorry, babe. I was trying hard not to wake you.\"\n\nMy annoyance instantly evaporated. There was nothing my wife could ever do to irritate me. \"It's ok, Mandy. What are you reading?\"\n\nShe flushed in embarrassment. \"Another one of my romance novels.\"\n\nI chuckled. While my wife could be very girlish at times, it still surprised me that she enjoyed those cheesy \"happily ever after\" stories so much. But we both had our vices. \"Oh yea? Any good sex scenes?\"\n\nAmanda started laughing again and, as always, it was like beautiful music. \"I think I know where we went wrong yesterday.\"\n\nI was still half asleep and didn't comprehend what she was referring to. \"Huh?\"\n\n\"When you tried to poke me in the butt before we went to hang out with Dimitri and Kate.\"\n\nThat got my attention. \"What do you mean?\"\n\n\"We should've stretched my, uh, back door first before we did anything.\" I was in such disbelief at the topic of conversation that I gaped at my wife. \"Using fingers is obvious, but anal beads are highly recommended, too.\"\n\n\"Did you really just say 'anal beads'?\"\n\n\"Yes, silly. You know, the silicone ones that start small and get bigger?\"\n\n\"Like the ones in the porno video that we watched the other day.\"\n\nAmanda let that pass. \"Anal beads can be less painful than fingers,\" she continued in a scholarly tone that was endearing and absolutely adorable, \"since you can modulate the amount of stretch with the size of the beads. And we definitely should've used lube yesterday, too!\"\n\n\"Ok...\" I responded carefully, not sure where this was leading. Then I suddenly became suspicious. \"Mandy, where are you getting this info from? Did you actually research this stuff?\"",
        "Her expression was angelic. \"I'm reading about it in my romance novel.\" I was about to utter a crude comment when she continued animatedly, \"I have to be honest, babe. It actually felt good when you were in... there... at first.\" My eyes widened. \"But then I got kind of scared,\" she confessed, \"and it started to hurt, and I felt like I was losing control of my body and that everything inside was going to shoot out. I know, TMI, right?\" Before I could even respond, Amanda became much more subdued and added, \"Not to sound ever more disgusting, but I also read that kissing and licking a woman back there can help to inhibit those reflexes before anal penetration. If you do it the right way.\" She paused to let that sink in.\n\nI was momentarily dumbfounded by the amount of information that Amanda was presenting me. But while I had never rimmed her before, the mere fact that she was bringing it up was very appealing in a depraved sort of way. \"Yea? So that's what you've been reading in your smut romance novels, eh?\"\n\nAmanda burst out laughing again. \"I know, right?\"\n\nOur conversation had me hard as a rock, and even though I was smart enough to realize that we weren't going to attempt anal sex again just yet, I figured that we were, at the very least, going to indulge in some very incredible morning sex. But Amanda glanced at the time and exclaimed, \"Omigod! I'm going to be late.\" It was early Sunday morning, which meant it was time for her to meet with her training group for another 10 mile run in the hills.\n\nI groaned as she rolled out of bed. \"Why don't you show up a little late? Or, better yet, why don't you not show up at all, and stay here with me? I got a really bad itch that only you can scratch.\"\n\nAmanda leveled me with another one of her patented stunning smiles. She was wearing one of my old, raggedy concert t-shirts as a nightie, and nothing else save for a pair of pink panties. They were cut in the \"boyshort\" style, which complemented her athletic frame and hugged the curves of her bottom perfectly. Most women who dressed themselves nicely couldn't compare with my wife's natural beauty first thing in the morning.\n\n\"Tempting,\" she responded impudently, \"but running the trails with my team gives me a better workout than you do in bed!\"\n\nI feigned feeling insulted as Amanda grinned. Then I happily watched her strip naked and don her running attire: a snug sports bra and tight leggings, an outfit that would undoubtedly cause anyone within a 100ft radius to stare at her and drool. My wife tied her hair into a cute ponytail and kissed me on the lips, and I stared longingly at her beautiful ass as she swiftly departed to meet her training group.\n\nBefore Amanda could leave, however, I called her name and she halted. Communication was the key to any relationship, and I told her, \"I'm really sorry for hurting you yesterday.\"\n\nMy wife touched her forehead to mine. \"I know,\" she responded tenderly. \"It's ok, babe. We didn't know what we were doing and, like I said, I was scared and couldn't relax.\" Then she smirked. \"And you're just so big that I couldn't fit you.\"\n\nI sighed and gazed at Amanda in adoration. I freely admitted that my manhood was average-sized and not some overgrown monstrosity, and knew that she was exaggerating simply to assuage my guilt. The gesture warmed my heart, and I hugged my wife fiercely, afraid to let go because I knew I didn't deserve her. \"I love you so much, Mandy.\"\n\n\"I love you, too. At least we'll know better for next time.\" She turned and was suddenly gone.\n\nNext time? \n\nAmanda's offhand comment gave me hope, and that hope gave me an erection as I remained in bed to daydream about being balls-deep in her fantastic ass.\n\n******************************************************************************\n\n\"Next time\", unfortunately, didn't arrive for a long time.\n\nWeeks later, I found myself at the gym with Amanda. She was clad in her customary sports bra and leggings again, which I had come to seriously fetishize over time. While we normally spent about 2 hours here, we usually separated to pursue our own goals. I concentrated more on upper body strengthening, while my wife's regimen focused more on lower body and toning.\n\nI was currently seated in a chest press machine, but Amanda was just approaching the \"Roman chair\", much to my delight. She placed her cell phone and water bottle on the matted floor. After climbing in, my wife aligned herself at about a 45 degree angle to the ground with her back straight and arms crossed in an \"X\" over her ample chest. Then, flexing at the waist, Amanda formed a perfect upside \"V\" before extending back to her original position. This particular workout targeted her lower back and gluteal muscles... and also gave me an unimpeded view of her incredible ass every time she bent forward.\n\nThere were always plenty of hard female bodies at the gym flaunting their sexy skin, but I hardly noticed them when my wife was around.\n\nThe \"Roman chair\" was stationed at the front of the gym in clear view. I humorously wondered if its strategic location had been on purpose as I ceased my exercise to stare at Amanda's toned ass. She was making me hard, and I almost didn't care if anyone noticed. Suddenly feeling mischievous, I withdrew my cellphone and sent her a playful text.\n\nI'm staring at your ass right now, and I'm using it as inspiration for my workout.\n\nAmanda's cellphone vibrated, and I watched as she paused to retrieve it. After reading my message, she responded without turning back to me: Good. Because I have a surprise for you later! LOL!\n\nOh, how my wife loved to tease! But this time, I wasn't falling for it. I purposefully waited before adding: There's now a bunch of guys staring at your ass with me. Should I charge them admission? Shit, the dude next to me looks like he's about to blow his load!\n\nAmanda's ponytail flapped adorably as she shook her head in exasperation. Whatever. She tossed her cell phone back onto the floor.\n\nI laughed and resumed my workout, but my eyes didn't stray from my wife's incredible bottom as she continued hers.\n\nNor did the eyes of the numerous men around me.\n\n******************************************************************************\n\nAmanda and I stripped our sweaty gym close off when we arrived home and immediately hopped in the shower together. There probably wasn't anything I enjoyed more in life--- aside from making love to my beautiful wife and staring at her incredible ass--- than bathing with her. The combination of being wet and naked with Amanda was a wonderful thing, indeed!\n\nAmanda closed her eyes as she shampooed her hair. Lathering my hands with a bar of soap, I pressed my crotch into her bottom as I reached around to soap her engorged tits. At 34c, they were a handful and extremely firm, but were too slippery as I tried to squeeze them hard... which only fanned my lust even more. My wife cooed softly and smiled, but remained silent and allowed me to continue.\n\nMy hands covered the entire front of her body with suds, working from her illustrious breasts and down to her tummy, where I lightly scoured the impressive ridges of her abdominal muscles with my fingertips. From there, I felt the smooth curves of her hips and the firmness of her muscular thighs. I then traced back around and found my hands on Amanda's bottom.\n\nGod... that ass again! I couldn't get enough of it; I was obsessed with it!\n\nThe soap had rinsed from my hands, but that didn't prevent me from rubbing my palms all over Amanda's ass. It was exquisitely toned like the rest of her body and, literally, resembled a work of art as the glistening water flowed over it. Unable to help myself, I pinned the underside of my rock-hard erection along her vertical crease.\n\nI brought my lips close to her ear. \"Remember what you did to me in the kitchen... what you did to me with your ass? Fuck, that drove me so crazy.\"\n\nAmanda giggled as she slowly began to undulate her bottom against my crotch in a very sensual, stimulating way. \"I remember,\" she answered quietly. \"You were so hard for me...\"\n\n\"Just like I am now.\" I started to meet her movements with my own, and knew that I would cum before too long.\n\nMy wife knew it, too. \"Cum all over my ass,\" she breathed softly.\n\nThat was the awesome thing about shower sex. We were always wildly adventuresome in the bedroom, but my wife was often willing to be much more depraved here in the shower. Save for under the bright sun and clear blue sky, there was no other place where we enjoyed having sex more. Not to mention, there was just something very practical about being able to clean up immediately after making a filthy mess!\n\nBut as I considered jacking off all over Amanda's scrumptious ass after using it to masturbate, I suddenly recalled the comment she had made about rimming. We had never discussed it again, but her curiosity was obvious; clearly, she wanted to experience it. And while I wanted to keep our sex life fresh, more than anything I just wanted to make my wonderful wife happy.\n\nAmanda knew I was fixated on her ass, and well aware how I loved to dry hump it and jack off all over her bare skin. That was why she was so surprised when I pulled away. \"What are you doing?\"\n\nMy wife loved dirty sex talk, so I didn't hold back. \"I'm going to kiss that pretty ass of yours, then I'm going to lick your asshole before I shove my tongue in it.\"\n\nAmanda started to turn around. \"Omigod, babe, you're so silly. I was only joking when I said---\"\n\nBut I spun her back around so quickly that she yelped. \"I told you, Mandy: I'm going to kiss that pretty ass of yours... then I'm going to lick your asshole before I shove my tongue in it.\"\n\nAmanda's puckered hole was suddenly staring at me as I spread her asscheeks. I had never examined it so closely, and it actually winked at me like an eye as she attempted to control her excitement. My mouth watered.\n\nI gave my wife's anus a long, slow lick.\n\n\"Omigod...\" she breathed.\n\nTo be honest, I had to fight back some initial revulsion as the tip of my tongue made contact with Amanda's backdoor entrance. The mere thought of rimming someone, even my wife, would've been disgusting to me not that long ago, but now, as I pleasured her, I harbored no abhorrence. In fact, her ass tasted the same as her lips or her pussy.\n\nSweet and delicious.\n\nSuddenly ravenous and perhaps a little crazed from adrenaline, I stretched Amanda's asscheeks even further apart and buried my face between them, eating her ass like a starving man at a banquet. Amanda's entire body twitched as I rolled my tongue and inserted it, and her shrill squeal of enthusiasm only emboldened me.\n\nWhy haven't I done this sooner?\n\nBut just like I had surprised Amanda moments ago by pulling away, now she did the same to me. \"Let's go to the bedroom,\" she insisted.\n\nI shook my head emphatically; I was having too much fun to stop and relocate.\n\n\"Trust me, I'm enjoying this way more than you are, but I have a surprise for you.\" She smiled mischievously. \"I promise it'll be worth your while.\"\n\nHow could I possibly argue? I quickly jumped out of the shower and retrieved a towel before Amanda shut the water off. Then I savored the moment as I toweled her off before drying myself, and excitedly led her to our bedroom.\n\n******************************************************************************\n\nWhen we reached the bedroom, Amanda immediately crawled onto our bed on all 4's. With her bare bottom presented to me so irresistibly, I knelt onto the carpet and buried my face into her behind again. My hunger returned instantly.\n\n\"Babe, what's gotten into you?\" There was amusement in her voice from my unbridled enthusiasm, but I knew she was as excited from the anal play as I was.\n\nMy response was a dull murmur into her nether region.\n\nI licked and slurped noisily. My inhibitions had totally dissipated as I rimmed my wife with the same fervor as if I was kissing her or performing cunnilingus. But Amanda suddenly shifted, prostrating herself on the bed with her face turned as she reached back to spread her asscheeks for me. Her anus was gaping now, and it wasn't seizing as uncontrollably as before. I lathered it with my tongue until she called out softly, \"Use your finger.\"\n\nDamn, she really IS into it!\n\nI happily pounced onto the bed next to my wife. But I didn't immediately finger her anus. Instead, I caught her off guard by gently rubbing her clit, which was already engorged and as hard as my cock. Amanda cooed and involuntarily waggled her ass before my adoring eyes in response. As bottom undulated hypnotically, I slipped 2 fingers into her slick pussy.\n\nAmanda sighed contently, but it wasn't her pussy that required attention today.\n\nKeeping both fingers inside her vagina, I stuck the index finger of my other hand into my mouth to wet it. Amanda's eyes were closed and the side of her pretty face remained resting on the mattress, so she didn't see me poke my glistening digit into her ass. Her entire body trembled and her sphincter muscles contracted upon insertion.\n\nI almost pulled out, but a 6<sup>th</sup> senses told me to hold. So I waited breathlessly, gauging Amanda's reaction by the rapid rising and falling of her shoulders. Her internal muscles clenched around my fingers like some kind of obscene Chinese finger trap, but gradually relaxed as did her breathing. Taking this as a sign, I began sliding my fingers in and out of both holes in an alternating motion, careful to keep a steady but gentle rhythm.\n\nAmanda expressed spiritedly, \"I never knew this could feel so good!\"\n\nI nimbly attempted to slide my middle finger into her anus along with my index finger. But my wife was still tight in her backdoor in stark contrast to her pussy, which was so wet and loose that I could've driven a truck into it! Her anus tightened instantaneously as the tip of my middle finger merely pressed against its outer rim. I continued with just 1 finger, but Amanda truly did have a surprise for me.\n\nAs I probed both holes, Amanda reached under a pillow and withdrew a bottle of personal lubricant and a set of anal beads! Shaped like a sword, the sex toy was lavender in color and composed entirely of flexible silicone. The first bead was only the size of a pea, but each subsequent one was slightly bigger until they culminated into a large ring-handle that was intended to guard against injury from over-penetration.\n\nShe handed me the latter to me and instructed softly, \"Use this.\"\n\nI immediately withdrew from her vagina and anus to slather the anal beads with lubricant. My heart was thundering in my chest, as I knew that, despite the countless sexual adventures we had enjoyed together, this was a huge step for her... for us. I pressed the tip to her rear entrance.\n\n\"Are you ready for this, Mandy?\"\n\nShe looked back at me and nodded.\n\nI slipped the sex toy into her ass.\n\nAmanda exhaled sharply, but didn't flinch. I inserted only 2 beads and paused to let her body adjust. When she didn't react negatively, I began gliding them in and out of her anus. Gradually--- and very slowly--- I penetrated more deeply until she was able to comfortably accommodate about half of the sword-shaped sex toy.\n\nAmanda's clenched the bedsheets, but maintained control of her body and of the situation. \"Right there, babe... right there.\"\n\nI went no further than driving halfway into her ass. Amanda writhed rapturously as the beads rubbed against her sphincter walls and stretched her back door. Once I had established her comfort zone, I reached under to touch my wife... to massage her engorged clit... to trace my fingertips along the ridges of her inspiring 6-pack... to play with her swollen breasts and tweak her nipples as her magnificent breasts dangled like udders.\n\nAmanda moaned loudly.\n\nMy cock normally craved to be inside of her... mouth, pussy, ass, it didn't matter... but the sight Amanda prostrated on our bed and succumbing to anal pleasure provided me with more joy than anything else could have. My free hand shifted from her firm breasts back to her pussy again as I continued to slide the anal beads in her anus. I could fit almost my entire fist into my wife's pussy on a typical day, but my 2 fingers were, literally, in a fierce competition with the sex toy for space in her body!\n\nBut the competition didn't last long.\n\nI plunged my digits and anal beads into both holes several more times before Amanda suddenly arched her back towards the ceiling and shuddered before collapsing onto our bed prone. My fingers glistened as did the sex toy that I held in my opposite hand. Grinning, I scooted next to my wife and playfully nuzzled my nose at the base of her neck. It wasn't until Amanda rolled onto her back to regard me solemnly that I noticed the huge wet spot on the bedsheets.\n\nShe had climaxed in a serious way!\n\nAmanda shifted onto her side as I lay next to her and embraced her from behind. In a spoon position that was so unbelievably comfortable, her firm button pressed into my crotch. I savored the warm touch of her body against mine, and knowing that I had pleased the woman whom I loved more than anything in the world, save our son, left me deeply satisfied.\n\nWe basked in that soothing state between sleep and wakefulness for a while until Amanda snapped me wide awake with a whisper: \"I'm ready to try it again.\"\n\nAt first, I assumed that she merely wanted me to use the dildo on her ass or rim her again, which I would've been more than happy to do. But the tone of her voice indicated something more. My heart suddenly beat faster with excitement. \"Mandy, are you sure? I mean, after what happened last time...\"\n\nShe rolled to face me. \"I'm still a little nervous. But I think I'm ready this time.\"\n\nI repeated her statement in my mind. I'm still a little nervous. But I think I'm ready this time.\n\nShe did not sound ready.\n\n\"I don't know,\" I began with uncertainty. \"You never wanted to try anal until I kept begging and begging, and finally talked you into it. And you hated every minute of it.\"\n\n\"I wouldn't say that I hated it, babe,\" Amanda conceded. \"I will admit that we weren't prepared, but we know better now. Using the beads and your fingers back there stretched me without pain, and rimming definitely relaxed my muscles.\" It was endearing how she spoke about anal play in such a clinical tone. \"I feel like I have control of my body now.\" She looked at me hard. \"This time, I'm ready.\"\n\nI could still discern a considerable amount of trepidation beneath her solemn exterior, and it broke my heart to realize that Mandy didn't really want to try it again, but was willing to let me sodomize her once more out of pure love.\n\n\"God, I love you, Mandy. I don't deserve you.\" I shook my head without any regrets. \"I can't.\"\n\n\"What if I told you that I want it, too? Badly.\"\n\n\"I would say that I don't believe you.\n\nAmanda reached between my legs and made me completely hard with only 2 swift strokes. \"You've never be able to say 'no' to be before, and I don't want you to start getting in the habit!\"\n\nThe moment of levity made us laugh, and we pressed our foreheads together in another sign of unyielding love. \"Mandy, are you really sure about this? I don't want to hurt you again, and I sure as hell don't want you to hate me.\"\n\n\"I'm sure, babe. I wouldn't be offering if I wasn't, you know that. And I could never hate you. Just used the lubricant... and be gentle with me.\"\n\nAmanda slowly reassumed her prostrated position with a feline gracefulness. Taking the bottle of personal lubricant, I scooted behind where her incomparable ass awaited me. I leaned down to give her right cheek an affectionate kiss and then a light, playful slap. She giggled and teased me by wiggling her bottom; a sexy invitation, to say the least!",
        "I swathed my erection with an exorbitant amount of lubrication then slowly--- very carefully--- entered my wife's anus.\n\nThis time, the experience was MUCH different for both of us.\n\nWe sighed contently as my helmet-head slid into Amanda. I could feel her sphincter muscles squeezing around my girth ever-so-slightly, but nowhere near as uncontrollably as during our initial foray. Except for the anticipation, she didn't appear to be in any distress, nor was I caught up in a blind, sex-crazed lust like previously.\n\nGripping my erection at its base, I delicately eased into my wife's bottom, gliding myself in a bit further and mindful of any discomfort on her part. Amanda remained still, but I heard her breathing in a steady rhythm to keep her body relaxed. We both kept calm.\n\n\"That's it, babe,\" she breathed encouragingly. \"Nice and slow... that's it... aaahhhh... that feels good... now give me a little more.\"\n\nThe slow friction against Amanda's rectal walls was incomprehensibly exquisite, and I couldn't believe that anal sex could feel so amazing. It was comparable experiencing traditional vaginal sex with my wife or making love to her throat. I glided my free hand all over her bottom and lower back. Rather than thrust hard or push, I leaned in carefully, and slipped my cock halfway into my Amanda's anus.\n\nThe sensation of it all was so stimulating that I lolled my head back and moaned.\n\n\"Right there, babe. That's perfect... right there.\" Establishing her new comfort zone, I retracted my hips until I was almost completely dislodged then slowly sunk in again. \"Omigod... yes! Right there! Keep going... right there! Don't stop!\"\n\nGuided by Amanda's physical and verbal reactions, I progressively ramped up the pace. I was still careful not to penetrate too deeply or thrust too fast, but I was so fervent in my movements that I quickly worked up as sweat. Her tight sphincter muscles gradually relaxed, and seeing my manhood buried in her ass, even if it was only halfway, made the wonderful sensations even better.\n\nAfter only 15 seconds, my body required release.\n\nHowever, I still wasn't sure of Amanda's boundaries when it pertained to orgasming in her rectum. \"I'm going to cum!\" I warned her frantically. \"I'm going to cum!\"\n\nBut Amanda could always read my mind and understood that I was seeking direction on where to deposit my load. \"Pull out,\" she instructed. \"I want to feel you all over my ass!\"\n\nI emitted a guttural roar as I withdrew from Amanda's anal orifice. She immediately flattened herself on the bed as I straddled her and stroked myself feverishly. My aim was true, and I showered my love all over my wife's pert bottom. When I was finally spent and panting, I gazed down upon the work of art that I had just created.\n\nHer incredible ass glistened with my semen.\n\nAmanda rolled onto her back, reached up, and pulled me onto her in a fierce hug. We held each other close and didn't speak for a long time. Though we had been married for almost a decade and enjoyed a fulfilling sex life that would make any couple envious, something profound still managed to transpire between us.\n\n******************************************************************************\n\nAmanda and I had sex of the traditional variety--- vaginal and oral--- in the days that followed, but we didn't attempt anal again. While I was hopeful, I wasn't upset when she didn't bring it up. My wife had already done more for me than any husband could rightfully expect, and I didn't couldn't ask for anything more. If Amanda wanted to experience anal sex again, she would ask; if not, our love wouldn't be any worse for the lack of it.\n\nApproximately 2 weeks later, Amanda and I decided to go out for a fancy date night in Center City. She was wearing the sexy black minidress again. It wasn't that my wife didn't have any other nice clothes to wear. While Amanda genuinely liked the minidress, she was actually indulging me because she knew how much I enjoyed seeing her wear it.\n\nAs we drove to our favorite restaurant, however, I noticed that Amanda oddly couldn't sit still. \"Mandy, are you ok?\" I asked, casting her a quick glance as I drove.\n\n\"Yes... sort of. I just can't seem to get comfortable.\" She fidgeted and tugged at the short bottom as if attempting to conceal her fabulous legs.\n\n\"The dress is a little tight on you,\" I replied drolly. \"Not that I'm complaining!\"\n\nMy wife snorted in amusement but didn't respond.\n\n******************************************************************************\n\nWhen we finally arrived at our destination, I pulled into the crowded parking garage and took the first available spot. Jumping out of our SUV, I circled around to open the passenger door and lend Amanda a hand. She took it and exited awkwardly without her usual grace.\n\n\"Mandy, are you sure you're ok? You're moving kind of funny.\"\n\nI was growing concerned, but my wife's face split into a naughty grin as she glanced about. Then, to my utmost astonishment, Amanda pulled the bottom of the minidress up over her midsection. As usual, she wasn't wearing panties with the outfit, so that didn't surprise me.\n\nBut what did surprise me was the blue gleaming jewel that was lodged in her butt.\n\n\"What the... what is that?\"\n\nAmanda laughed out loud as she looked around the parking garage again. After making certain that there was no one else around, she reached towards her bottom. But what she extricated wasn't just a blue jewel. My wife held up a small, shiny, bullet-shaped object that had a short narrow neck and a flat, round base to which the faux sapphire was attached.\n\nA butt plug!\n\nI gaped at my wife.\n\n\"What?\" Amanda asked as if pulling an inanimate object from one's ass was an everyday occurrence. \"I'm just prepping myself for tonight.\"\n\nI was delighted at the insinuation but in disbelief that she would actually go to such extremes. I actually sputtered, unable to express my thoughts, as my wife continued to grin at me in amusement. \"Good lord, Mandy!\" I blurted in a strangled tone. \"How can you even fit that thing in your ass? I mean, doesn't it hurt?\"\n\nAmanda threw her head back and laughed, and the musical sound echoed in the parking garage so loudly that someone was bound to hear. \"I've been wearing it since Monday,\" she confessed.\n\n\"What!\"\n\n\"Not continuously,\" Amanda quickly added. \"I only wore it for 5 minutes that day, and have been gradually increasing the duration. Omigod, it took me forever to get the plug into my ass that first time!\" For whatever reason, Amanda found that hysterical, and there were tears in her eyes as she laughed yet again.\n\nI shook my head incredulously. My wife and I enjoyed a sex life that would've been considered extremely hardcore even by the most seasoned porn star, but she could still wow me with new things. \"You're full of surprises, aren't you?\"\n\n\"I'm not doing this just for you, you know,\" she replied with feigned haughtiness. \"I like feeling you in my ass, too.\" Her smirk was absolutely devious.\n\nWe suddenly heard footsteps and voices.\n\nAmanda quickly reinserted the butt plug with a surprising ease and lowered the minidress over her bottom once more. Everything was abruptly back to normal as she smoothed out the fabric and took my arm. \"Come on, babe. We don't want to be late to our dinner reservation.\"\n\n******************************************************************************\n\nI sat across the elegantly set table from Amanda as she perused the menu. My beautiful wife bore that same intense yet lovable expression that she always did when focusing on something. I gazed at her in adoration, but she peeked over the top of the menu and furrowed her brows questioningly.\n\n\"What?\"\n\n\"Oh nothing. I'm just admiring your cute freckles... and thinking about the butt plug that's currently shoved up your ass.\"\n\nAmanda blushed at my candid remark and glanced around guiltily. Then, after taking a sip of wine from an ornate crystal goblet, she dabbed her blood red lips with a napkin and casually tossed it onto the floor. \"Babe, would you be a dear and pick that up for me?\" She asked innocently while batting her long eyelashes.\n\nI grin roguishly. This was a game that we had played before [refers to \"Mandy's Sexcapade: Pantyless &amp; Proud\"], but one that would never grow old.\n\n\"Of course.\" As I reached down to retrieve the napkin, Amanda surreptitiously spread her legs wide beneath the table. The minidress normally rode dangerously high on her long legs, anyway, but a quick glance was all I needed to discern that her pussy was bare and smooth... exactly the way I liked it.\n\nI picked up her napkin and returned it without comment.\n\nWe enjoyed an incredible meal and maintained a casual conversation throughout the night. But the thoughts of my wife's long sexy legs, smooth pussy, and, most predominantly, her incredible ass that presently housed a butt plug proved to be a major distraction, as did the painful erection in my pants that screamed for attention.\n\n******************************************************************************\n\nAmanda and I stumbled into the living room in a tangle of limbs and lips. She had unzipped my pants and started giving me a handjob before we were even halfway home, and I had deftly driven with one hand while fingering her pussy. It was a minor miracle that I didn't crash and kill us, but we didn't have the willpower to resist touching each other.\n\nAmanda and I were in such a fit of lust that we didn't even make it to the bedroom. Instead, we wrestled each other towards the couch, where she relieved me of my clothing. And I returned the favor by peeling the tight minidress over her head and tossing it aside. My wife whimsically twirled as if allowing me to inspect every inch of her luscious body. The faux sapphire flashed as her bottom passed before my eyes.\n\n\"God, I want to stick my dick up your ass so bad,\" I growled.\n\nAmanda spanked herself wickedly. \"What's stopping you?\"\n\nMy erection was, literally, trembling and leaking for my sexy wife and her hot ass. \"Fuck,\" I swore. \"Give me a sec to get the lube.\"\n\nI was about to hurry to our bedroom, but Amanda interjected, \"Don't bother.\"\n\nI was like a dog in heat, craving to nail Amanda in the butt and ride her doggy style again. But her happiness and safety were my priority. \"It'll take me 2 seconds,\" I assured her. \"I'll be fast!\"\n\nBut my wife threw me onto the couch with a force that was derived as much from physical strength as it was from impatience. She regarded me with a smoldering intensity and informed me quietly, \"I have all the lubrication we need.\"\n\nAmanda dropped to her knees and forced my knees apart.\n\n\"Oh god... fuck...\" I moaned as she gulped me into her mouth.\n\nThe blowjob was unlike any my wife had ever given me before. Aggressive, and on the verge of being outright violent, it was loud, wet, and extremely sloppy. She slurped vigorously as a thick spittle seeped from her mouth and down her chin to coat my engorged penis.\n\nLubrication, indeed!\n\nWhen Amanda rose, I expected that she'd bend over the couch so I could take her from behind. But she turned, facing away from me, while reaching behind to grasp my erection and align it with her anus. Then assuming a \"skier's position\", Amanda gently pressed her bottom against my penile tip and hovered there for a moment to measure my response.\n\nThis was a brand new position for us, and I was thrilled!\n\nI placed my hands on my Amanda's hips to guide her movements. There was a brief searing pain as I pierced her anal entrance, but it quickly passed as she smoothly lowered herself halfway. There was a loving quality to my wife's movement despite the fact that many people would consider our act \"dirty\" in every sense of the word.\n\nWith my palms still on Amanda's hips, I slowly pulled her onto me, careful not to yank her off balance and keeping a close eye on her reaction, as well. But her only response was to sigh contently as she sank lower and lower onto me. I opened my legs wide as my wife fit perfectly between them even as she kept her thighs pressed together.\n\n\"Omigod,\" Amanda breathed once I was almost completely rooted inside of her. She was still leaning forward with much of her weight displaced anteriorly on her feet. It was clear that my wife was still apprehensive to drop her full weight, but that was ok. I was willing to give her as much cock--- or as little--- as she wanted.\n\n\"Your ass feels fantastic, Mandy... you feel fantastic.\"\n\nAmanda answered me with a purr. Rocking from the balls of her feet onto her heels and back again, she rode me rhythmically. I didn't need to do anything but sit back and relax as I let my sexy wife assume control. The sight of her bottom engulfing my erection only to reappear was hypnotic. She took me in a little bit deeper each time, pacing herself, letting my hard girth gradually stretch and relax her sphincter muscles, and allowing ourselves to enjoy the wonderful, intimate friction.\n\nAmanda soon started riding me faster, pumping her powerful thighs and scaling almost the entire length of my manhood. Though I couldn't see around her body, I could tell that she was cupping the undersides of her swollen breasts, and rolling her harden nipples between thumb and forefinger to pleasure herself further. Hungrily, I batted her hands away and replaced them with my own.\n\nIt was the best of both worlds: being rooted in my wife's beautiful ass and fondling her equally exquisite breasts.\n\nAmanda's breathing became more ragged as she started moaning in irregular intervals. Still, save for my hands groping her chest, I remained still and let her set the pace. Her smooth, toned body was emanating a considering amount of heat as she rose and fell on my stiff member. Then, without warning, Amanda sat fully upright, backing into me and allowing her hips to fully drop on my lap.\n\nAmanda emitted a shrill scream as her ass swallowed my cock completely.\n\nShe trembled and exhaled sharply, and for a moment I thought the deep penetration might be too for her much to handle. But my wife remained seated on me. Her anal muscles were contracting around my penis uncontrollably, but it gradually subsided as Amanda started breathing more steadily. But rather than thrust my hips in an effort to discharge my cum as all men are hardwired to do, I encircled her with my arms. I held my wife in a crushing embrace even as I felt her press herself into my lap more firmly. It was as if we were two powerful magnets attracted to each other.\n\nWe were one.\n\nFor a long while, Amanda and I didn't move. We were more than content to feel our warm naked bodies against each other, and being completely rooted in her bottom was a sensation unlike any other. I could've remained in this position until the end of time, but I wanted more for her.\n\nCareful not to move too quickly so I wouldn't hurt her, I shifted my bottom forward so that I was now slouched on the couch with my feet firmly planted on the carpet. Amanda, as a result, fell gently into a reclined position against my chest. She murmured a quizzical sound, and I whispered instructions into her ear. Nodding with only the faintest hint of trepidation, she lifted her feet and placed them atop my thighs.\n\nThen, with her arms fully extended behind her and on their side of my hips, my wife began slowly sodomizing herself in reverse cowgirl.\n\nI clenched my abdominal muscles and remained perfectly still as Amanda controlled every aspect of our anal union. She bucked her hips smoothly, raising her bottom until her chiseled midsection was nearly parallel to the floor, then let them sink. Like before, she gradually worked my cock into her anus until it was able to consume every inch. The tightness of her sphincter muscles felt superb, comparable to the best blowjob, tittyfuck, or handjob that my wife had ever given me.\n\nAmanda grunted and moaned as she pumped her hips more robustly now. Her lust matched my own, and I snaked my arms around her body to seek out her breasts again. But as my hands squeezed and mashed them together, Amanda commanded hoarsely, \"Play with my pussy!\"\n\nKeeping my left hand where it was--- Amanda's tits were just too irresistible to abandon--- I slipped my right index and middle fingers into her mouth. She sucked and licked them suggestively and, using her own saliva as lubrication, I slipped my digits into her vagina. But the move proved unnecessary as Amanda's hole was already sopping wet.\n\nMy hand on my hot wife's perfect breasts... my fingers in her warm pussy... my cock up her incredible ass... I was, literally, in heaven!\n\nAmanda pumped me more rabidly. She was slamming the full weight of her bottom onto me when she wasn't grinding against my lap and playing my erection like a joystick, and the dull thud of skin against skin sounded with each impact. I was helpless, and my cock was harder for it.\n\nBut, as usual, I could never stave off orgasm for long whenever I was naked with my beautiful wife. I had not only longed to penetrate her anus, but fantasized filling it to the brim with my cum. And now, I was ready to inject a full load into her rectum.\n\nBut it needed to be on her terms.\n\n\"Fuck, Mandy,\" I moaned. \"You keep that up, and I'm gonna cream in your ass!\"\n\n\"Give it to me...I know you want to, babe. Cum in my ass... cum for me!\"\n\nChrist! How Amanda could edge me so intensely with mere words! But she suffered the consequences by losing control of the situation because I lost control.\n\nI embraced her from behind in a ferocious bear hug, and Amanda yelped in surprise as she was suddenly unable to move. She realized that she was at my mercy--- more specifically, her ass was at my mercy--- as I began to thrust up into her HARD. The impact of our bodies went from a dull thud to a sharper smack with each of my controlled bursts.\n\nI commenced in at a medium paced, but the tantalizing sensation of Amanda's naked body against mine, and of her sphincter muscles wrapped so heavenly around my manhood, caused my lust for her to boil over. My pace quickened, and soon I was jackhammering into her pretty ass as if my life depended on it. Amanda's repeated cries of \"Oh god! Oh god!\" drowned out my primal roar as I pounded into her bottom repeatedly with all the force I could muster.\n\nI tightened my pelvic muscles to prolong the sweet moment, but to no available. \"I'm gonna cum,\" I warned my wife. \"I'm gonna cum!\"\n\nBut Amanda's response was to gyrate against me sensually and very, very wickedly.\n\nI thrusted hard one final time and remained rooted in her ass, balls-deep, as my thick, hot sperm spewed into her rectum.\n\nThe powerful surge made me feel as though I was falling through the floor, and I rolled my head back and howled. My crotched was compressed against Amanda's bottom and though that afforded her very little room to maneuver, she was still able to squirm on my lap, intent to coax every last drop from me.\n\nWhen I finally had no more to give, all tension abruptly left my body and I sunk into the couch with a loud, content sigh. Amanda giggled proudly as she, in turn, relaxed and lay against me. But I continued to hold her close, our chests heaving and our bodies steaming from exertion.\n\nWe never realized that anal sex could be such a beautiful act of love.\n\nThough my erection was rapidly dissipating, I remained rooted in my wife's anus, the pressure from her inner muscles securing me in place. Eventually, we rolled as one, still connected to each other, and lay in an extremely comfortable spoon position. I playfully rubbed my nose against the side of her neck and wondered, for the countless time, how any woman could feel so perfect.\n\nAmanda and I didn't dabble in anal sex again for a long time. Though she came to enjoy it as much as I did, we seldom included it our sexual repertoire. Unlike oral sex and vaginal sex, we treated anal sex like a rare, special occasion.",
        "And that's precisely why making love to my wife's ass was so wonderful!"
    ],
    "authorname": "Syzoth",
    "tags": [
        "anal",
        "analingus",
        "anus",
        "blowjob",
        "dildo",
        "oral",
        "rim job",
        "wife",
        "yoga pants",
        "rimming"
    ],
    "category": "Anal",
    "url": "https://www.literotica.com/s/mandys-sexcapade-anal-virgin-no-more"
}
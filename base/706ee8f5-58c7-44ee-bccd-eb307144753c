{
    "title": "The Claims Adjuster Pt. 02",
    "pages": [
        "Hello Everyone! First, I'd like to say thank you for all the love you've shown my first story, it was great encouragement for writing part two. Second, thank you for your patience. 2017 has proven to be a trying year so far in every part of my life, and it's only half over. Third, while this can be read as a standalone story, I encourage you to read part one if you have not done so already. There, you will find the development of the characters. \n\nLastly, I hope you enjoy part two. While I struggled, I did have some fun writing it. I had an end goal for this portion, but I had a tough time deciding on how to actually get there. I have an idea for a part 3, and depending on the response this gets, I may or may not continue. If you have an idea that you would like to see written into the story, please let me know! As usual, feedback is always welcome, be it positive or negative. Thank you again. \n\n~Redbone \n\n***** \n\nI hadn't spoken to her since we broke up, which was roughly seven months ago. And for the last two of those seven months, I had been sitting outside of her house, observing her activity. Every now and then, I would see her new girlfriend entering and leaving. I must admit, the first time that I saw them together, it took everything in me not to whoop that bitch's ass. But once I calmed myself and my initial irritation began to fade, a more appropriate course of action started to formulate: learn everything there is to know about this new mystery woman and destroy their relationship from the inside out. \n\nMy name is Racheal, and not too long ago, I began to miss my ex-girlfriend Kenny. At the time of our break up, I thought it was a mutual separation. That it was what was best for the both of us. But as the months wore on, I realized that I was trying to fill the void she left behind with the few women I encountered. It was fun, but they weren't her, and I grew tired of them rather quickly. So, I decided to swallow my pride and persuade her to give us another shot. \n\nThat was the first time I saw them together. I originally thought it was some sort of fling and that I had nothing to worry about. Then I saw the way Kenny looked at her, and my stomach dropped. She never looked at me that way. In the four years that we were together, she'd never shown me that level of love. And it pissed me the fuck off. \n\nThe first step in my plan wouldn't be too difficult since my profession consists gathering intelligence for the government. I followed her new girlfriend one morning, which lead me to a bakery called Piece of Cake II. After a Google search of the business, I learned her name: Olivia Taylor. Just a few quick follow-up searches, and I would have everything that I needed to get started. \n\nUnfortunately, Olivia Grace Taylor was as boring as watching someone else watching paint dry. I easily located her social media pages, and took the time to get a good look at her. If I had to be honest, she was pretty. She had beautiful, curly hair and her complexion was flawless. She had full lips, a cute nose, and expressive, deep brown eyes. She was thick in all the right places, which didn't surprise me since Kenny had a type. This did nothing but increase my hatred for her. \n\nDon't get me wrong though, I am in no way insecure. I stand at about 5'9\", with long, thick, deep burgundy hair, hazel eyes that lean more towards green, and a figure that turns the heads of men and women alike. As I said, far from insecure. From what I could gather, she seemed likable and genuine. It would be difficult to defame her character, but I never back down from a challenge. She had a squeaky-clean record, which provided me with a blank slate to accomplish the second half of my plan. Olivia needed to learn that Kenny belonged to me, and that she was in no way competition. If that meant that she had to suffer, then so be it. \n\nOLIVIA \n\nBeing with Kenny brought so much joy to my life. She was passionate, attentive, genuine, and the laughter we shared always brightened my days. There were a few adjustments in the beginning, as there are with all relationships. She was more meticulous than I was, preferring things to be a certain way. I was a little more easygoing than she, allowing things to happen, and adapting to them accordingly. I thought that we balanced each other well, and based on the way she interacted with me, I was inclined to believe that Kenny felt the same. \n\nWe had graduated to the stage of having a reserved drawer at our respective residences with a few of the necessities required for spending the night. I had never been happier. \n\nHowever, a strange sequence of events began to occur, leaving me more than confused. \n\nAfter spending a blissful evening with Kenny, I left her house the next morning for work. About halfway through the drive, I noticed red and blue lights flashing in my rearview mirror, along with the customary alert siren. I signaled, merging into the next lane to make way for the officer to pass. However, he mirrored my movements. Odd. \n\nI signaled once more, and pulled over to an open area at the curb. The officer followed me again, and parked behind me. My anxiety began to rise as I tried to think of what I did to cause this. I reached for my license and registration, in preparation of the exchange. Shortly after we pulled over, he exited his vehicle and approached my driver's side window. \n\n\"Good morning, officer,\" I greeted him. \n\n\"License and registration, please?\" he curtly replied. \n\n\"Of course,\" I said handing him the requested documentation. I didn't want to agitate him, so I kept quiet, waiting for his next instruction. He proceeded to his vehicle, where I assumed he was running my information through his system to check if I had a prior record. Luckily for me, I've never had an issue with law enforcement. After a few minutes, he returned. \n\n\"Do you know why I stopped you today?\" he inquired. \n\n\"Honestly, sir, I'm not sure,\" I answered. \n\n\"You blew through a stop sign a few blocks back, failed to signal before turning, and were exceeding the speed limit,\" he informed me. I looked at him with surprise as I tried to remember doing all of those things. I had made the trip from Kenny's house to the bakery numerous times, and had never had an issue. But, I guess I could have been preoccupied with my thoughts. \n\n\"If you had only committed one of those infractions, I would let you off with a warning. However, I have to issue you a ticket,\" he said handing me the marked piece of paper. \"Be more careful,\" he concluded before returning to his vehicle. I waited for him to leave before continuing to the cake shop. I parked my car, and took a deep breath as I reviewed the ticket. \n\n$90! What the hell? \n\nThere was no way that I should have been fined that much. I sighed deeply as I tried to calm myself. I had a business to run, and I would deal with it later. The morning rush was like any other day, and I tried my best not to let my rough start effect my attitude. I didn't have much of an appetite by lunch, but was pleasantly surprised when Kenny walked through the door. I could already feel my day turning around. \n\n\"Hey, babe,\" she said, \"I thought I'd bring you lunch.\" She handed me a brown paper bag which contained my favorite panini. She always remembered the little things. \n\n\"Thanks, love,\" I pecked her on the cheek. \"Are you staying, or do you have to get back to work?\" I asked her. She held up another brown bag that I hadn't noticed and smiled at me. I led her back to my office. She told me of her morning, which consisted of the usual Cherri story. That woman amused me with her failed attempts of luring Kenny away from me. When she finished, I filled her in on my morning. \n\n\"Really? He gave you a $90 ticket?\" she asked with the same level of confusion I had been feeling. \"You should fight it,\" she suggested. \n\n\"I was thinking the same thing, but I don't know. I guess I could have been distracted,\" I rationalized. \n\n\"Liv, you're way too nice. You know that he was being an asshole. I bet if you challenge it, it'll work out in your favor,\" she said as she finished her sandwich. \n\nShe had a way of bringing to my attention when I was being a push over, and I loved her for it. \"What would I do without you?\" I smiled at her. \n\n\"You'd be missing out on things like this,\" she replied as she leaned in and kissed me. Kissing Kenny had become one of my favorite pass times. Regardless of how many times she kissed me, it always felt just as good as the first time. I melted into her soft lips and the kiss heated up quickly. I could already feel the dampness in my underwear. I pushed her away before things went a step too far. \n\n\"We should both get back to work,\" I said breathlessly, \"Before this gets too intense.\" \n\nHer eyes had darkened to a deep honey, which was the telltale sign of her arousal. She used that dangerous smirk of hers as she replied, \"Or, I'm sure you have some extra frosting lying around that can be put to good use.\" I felt my face flush as it instantly became unbearably warm in my office. She must have noticed me blush, chuckling at my reaction to her statement. Damned tease. \n\n\"Okay,\" I said standing up to open the door before she had a chance to take me right there on my desk, \"There will be none of that here.\" She rolled her eyes while standing to follow me to the front of the shop. \n\n\"Fine, but you won't get away so easily tonight,\" she kissed me one last time before leaving. I shook my head and laughed to myself. That woman is going to be death of me. \n\nKENDRA \n\nI couldn't get enough of her. It didn't matter how much time we spent together, I always missed Liv when we were apart. It was a slow start, and the adjustment period had its ups and downs, but I honestly couldn't imagine my life without her. Her enthusiasm, compassion and ability to always see the bright side of every situation continued to draw me in. Not to mention the fact that her smile set my core on fire. I had never loved a woman the way I loved Liv, and I was grateful to her for helping me connect to those emotions. \n\nBy the time I got back to my office, I had cooled down, but images of Liv's naked body threatened to distract me for the rest of the afternoon. It was more of a welcome distraction than the woman who wouldn't take no for an answer. As if she could read my thoughts, Cherri sauntered into my office. \n\n\"Hey, Kenny,\" she began as she perched her ass on the edge of my desk, \"Based on the look on your face, I assume you just had lunch with your little girlfriend.\" \n\nI didn't even try to hide my boredom, \"Mmmhhmm,\" I replied. \n\n\"You know, I could do things to you and for you that I guarantee she can't. I know all kinds of tricks and techniques that would take you to heights you never even knew existed. All you have to do is say the word,\" she propositioned as she leaned forward to provide me with a view of her ample chest. I turned towards my computer. \n\n\"Thanks, but I'm busy. And happily taken,\" I dismissed her. She scoffed while turning to leave. \n\n\"You say that now, but we'll see,\" she said as she walked away. She got on my damn nerves, and I wasn't sure how much more I could tolerate. While she had never been physical, her constant attempts to interfere with my personal life were starting to wear on my patience. Thankfully, I had appointments lined up for the remainder of the day, granting me a break from Cherri's foolishness. \n\nI was exhausted when all was said and done, but the mere thought of having my way with Liv gave me my second wind. She wasn't home when I arrived, so I sent her a text to check on her. She said she was about twenty minutes away, so I decided to make her evening as relaxing as possible. I dimmed the lights and lit a path of candles from the front door to guide her. I placed a few candles around the bedroom, mixed a few oils, lit some incense, and turned on a playlist to set the mood. Just as I finished, I heard the front door open and close. I waited for her to find her way to me. I could see that she was tired, but the ambiance seemed to brighten her mood. \n\n\"So, I guess it's safe to say that you weren't kidding earlier?\" she asked as I wrapped my arms around her waist. \n\nI kissed her softly while replying, \"Actually, I wanted to give you an opportunity to relax with a full body massage since you've had a long day... But, if it happens to lead to something more, I won't stop it,\" I finished as I grinned at her. \n\n\"You're insatiable, you know that?\" she shook her head. \n\n\"You love it, though,\" I replied. \"Now, get naked,\" I instructed. I released her, but she turned to walk away, \"Where are you going?\" I asked her. \n\n\"To undress in the bathroom. If I do it here, I'll never get a massage,\" she called over her shoulder as she turned the corner. I couldn't be mad; she had a point. She returned a few minutes later wrapped in a towel. \n\nShe laid down on the bed, making herself comfortable. I rolled the towel down to her hips and reached for the bowl of oil that had been warming on the nightstand. I poured a generous amount in my hand, allowing the excess to spill over onto her back. I started with her shoulders, slowly kneading away the tension. I gently moved down her back, applying slight pressure to each vertebra. My hands roamed towards her sides, fingertips lightly grazing the sides of her breasts. I felt her shiver under my touch, and my arousal deepened. I changed position to focus on her feet, attending to her arches. My hands slid past her ankle, stopping to concentrate on her left calf muscle. \n\n\"Mmmmm,\" she moaned softly, \"That feels incredible.\" \n\nI pressed my thumbs upward, enjoying her pliable thighs, gingerly caressing her nether lips under the towel. After a few minutes, I repeated the same process on her right leg, taking note of the juices that began to leak from her center as she subconsciously spread her legs. I climbed on the bed, straddling her thighs, and removed the towel to pay special attention to her perfect ass. I took a globe in each hand, pushing and squeezing to my heart's content. I released them, and was satisfied with the way they jiggled. I lightly drummed on them, and in response I heard her giggle. \n\n\"Seems like someone is having a little too much fun back there,\" she remarked. \n\n\"Hey, this is your fault. If your ass wasn't so tempting, we wouldn't be having this problem,\" I replied as I reached between her legs to make small circles around her clit. She gasped, arching her back to grant me further access. I reached under her torso to cup her right breast. Soon, she was rolling her hips, trying to increase the pressure. I dipped a finger into her pussy, marveling at how wet she was already. I brought it to her lips, offering her a taste. She slowly took my finger into her mouth, sucking it clean of her juices. I returned it to her pussy while gripping her hardened nipple. She whimpered as I leaned forward and kissed behind her ear. \n\nI took her earlobe between my teeth as I added a second finger, leisurely sliding in and out. I could feel her walls gripping me, trying to pull me further in. I dragged my tongue down her neck and nibbled on her shoulder. She started to push back, silently willing me to increase my speed. I ignored her efforts, continuing to take my time with her. She grunted in frustration as her hand shot down between her legs. \n\n\"Kenny, please,\" she pleaded as she feverishly worked her clit, \"I need you to fuck me, baby.\" Making her beg for it always excited me. I could feel my own juices begin to flow. \n\nI pressed my lips to her ear, \"How bad do you need it?\" \n\n\"I'm so close, baby, please. I need to feel you deeper,\" she breathed. I added a third finger, pumping deeper and faster. \"Mmmm,\" she moaned, biting her lip. \n\n\"You don't stop rubbing until I tell you,\" I told her. She nodded in response, her eyes closed in ecstasy. I moved my right hand from her nipple down to her waist, bringing her up to her knees. I rotated my left hand, palm down, and curved my fingers, locating her g-spot. \n\n\"Uggghhh!\" she groaned as I made contact. \n\nI leaned into her once more, \"You ready?\" I asked. I didn't give her a chance to respond. I kissed behind her ear, sending her over the edge. \n\n\"Uggghhhh! Fuck, fuck, fuck!\" she screamed. I covered her hand that was working her clit with my own, maintaining contact. I withdrew my fingers, swiftly replacing them with my tongue. She immediately tensed into another orgasm. \n\n\"Oh my God!\" she screamed as her essence covered my face. I had to fight to maintain contact as she bucked uncontrollably. I let go of her hand, giving her permission to release her clit, and eased her hips back onto the bed. I kissed my way up her spine, as she struggled to regain control of her breathing. \n\n\"You... are going to kill me... one of these days,\" she panted. I chuckled as I continued to place soft kisses on her shoulders. She shifted underneath me, turning over to meet me face to face. Her curls were all over her head, there was a light sheen of sweat covering her body, and her face was flushed a deep crimson. She was beyond sexy. I started to lower my lips to hers, when suddenly, I was lying on my back looking up at her. The look in her eyes made my pussy twitch. \n\nShe gripped my tank top, practically ripping it off me. She threw it to the side and attacked my mouth, sucking my tongue into hers. Her hands fumbled with my belt buckle, until she was able to loosen it, then it too was on the floor. My pants quickly followed suit, and before I could process what was happening, Liv stripped me of my boxers. She was hardly ever aggressive when we made love, but when she was, it drove me crazy. Just as quickly as she sucking on my tongue, she was sucking on my clit. \n\n\"Shit, Liv,\" I gasped as two of her fingers easily entered me. Over the months, she had become familiar with all of my hot spots. I hadn't even known that I was sensitive just to the right of my clit, but somehow, Liv figured it out. And she made sure I never forgot that she did. I hadn't realized that I was so aroused, and was shocked that I was so close to cumming. Her fingers went into overdrive, and she slid her tongue to the right. \n\n\"Fuck!\" I yelled as my hips jerked upwards into her face. She didn't let up, though. Instead, she began massaging my g-spot. My eyes slammed shut, and I bit my lip so hard I swear I tasted blood as my climax engulfed me. I had never cum so hard, and I was positive that if she didn't stop, I would pass out. I tried in vain to pull away from her, weakly scooting further up the bed as my body continued to convulse. Thankfully, she had mercy on me and backed off. My body continued to shake with post orgasmic tremors as I stared at the ceiling, dumbfounded. \n\n\"What the hell was that?\" I managed to breathe. I looked down to see her licking her fingers, one by one. \n\nShe smiled at me deviously with a twinkle in her eye, \"And now, we're even.\" It was at that moment that I realized that I had created a monster. \n\nOLIVIA \n\nKenny thought that she was the only one who could deliver immense pleasure. I had to show her otherwise. I loved the taste of her, and would have stayed there between her legs all night, but I was exhausted. I crawled back up the bed, cuddling with her. I felt her kiss my forehead before I drifted off to sleep. \n\nThe next morning, I was awakened by the bed shifting. I looked over to see Kenny picking her clothes up off the floor. I could see her taught leg muscles contracting each time she bent over. I hadn't even been awake for an entire minute, and my pussy was already slickening. Before I could say good morning, she picked up her pants, and I noticed something shiny fall to the floor. I looked down, realizing that it was an earring. And it wasn't mine. ",
        "\"Babe, what is that?\" I asked, calmly reaching over to pick it up. \n\n\"What's what?\" she asked, looking down to see what I had found. \n\n\"Who's earring is this?\" I looked her in the eye. She genuinely looked confused as she surveyed the gold dangle. I watched her closely, looking for any signs of recognition. \n\n\"I've never seen it before,\" she answered, shrugging her shoulders. \n\nI pressed her further, \"Really? Because it fell to the floor when you picked up your pants.\" Her eyes lifted to mine, looking at me in surprise. Her face scrunched up into confusion. \n\n\"It did?\" I was becoming annoyed with her ignorance, and I was sure it showed on my face. \n\n\"So, you expect me to believe that you have no idea as to whom this earring belongs, or how it ended up in your pants?\" It was becoming difficult for me to suppress the agitation in my voice. Her expression changed from confusion to mild anger. That irritated me even more. \n\nShe crossed her arms, taking a defensive stance, \"I feel like you really want to ask me something else.\" \n\nI took a deep breath, steadying myself before I asked her, \"Are you sleeping with someone else?\" She stared at me for a moment, and for a quick second, I noticed shock cross her face. \n\n\"You're serious?\" she asked. I stood my ground. Her eyes hardened and I could see her jaw tensing. \"No,\" she answered. I wanted to believe her, but the whole situation perplexed me. We stared at each other in silence. Her eyes darkened to a deep brown that I had yet to encounter and it scared me. I broke eye contact first, looking to the floor. She sighed as she walked out of the room. I heard the bathroom door slam shut, and I immediately regretted the whole thing. Kenny had never given me a reason to believe that she was unfaithful. But still, there I was, holding another woman's earring in my hand. I needed air, and time to process. I got dressed and left before she emerged from the bathroom. \n\nI drove home, and sat in the driveway for a few minutes, staring at the earring. \n\nStaring at it isn't going to help you make sense of any of this, Olivia. I exited my car and went inside. I showered, dressed, and left for work. \n\nDuring the commute, my mind drifted back to a particularly dark time in my life. Before I made the choice to make a life change, I suffered from low self-esteem. During that time, I was involved in a toxic relationship with a man who took advantage of that. Once I separated myself from him, I vowed to never let anyone treat me that way again. The whole earring debacle took me back to that time, and definitely left me uneasy. The rest of the day was a forgettable blur. I was sitting in my office, still preoccupied with my thoughts when Tanya walked in as we were closing. \n\n\"Hey Liv, you okay? All day, you've been somewhere else,\" she asked me. I internally cursed myself for being so transparent. I mustered up the best fake smile that I could. \n\n\"I'm fine, thanks. I'm just a little tired today,\" I lied. I could tell that she didn't buy it, but Tanya never pressed you further than you were willing to go. That was one of the many attributes that made her such an invaluable friend. \n\n\"Okay,\" she hesitantly replied, \"Well, try to get some rest tonight. I'll see you in the morning.\" I told her goodnight as she exited my office. I hadn't heard from Kenny all day, but I couldn't blame her for keeping her distance. I had practically accused her of cheating on me, and I was fully aware that that wasn't her style. I had to make it right. I locked up the cake shop, and drove to Kenny's house. Her car in the driveway indicated that she was home, and I let myself in. I found her in the living room watching television. She didn't even acknowledge my presence. I sat down next to her on the couch. \n\n\"Hi,\" I said quietly. \n\n\"Hey,\" she replied, still refusing to look at me. I took a deep breath. \n\n\"Kenny, I apologize for accusing you of being unfaithful this morning. I know that's not who you are, and I owe you an explanation,\" I started. She finally turned to look at me, waiting for me to continue. \"I wasn't always as confident in myself as I am now, and I once dated a man who did his best to keep me that way. He would sleep around, and tell me that it was my fault. That I would never find anyone else who would tolerate my weight like he did. \n\n\"When I finally found the courage to walk away, I promised myself that I would never stay in that type of relationship again. It doesn't excuse how I acted this morning, and I'm not asking for your sympathy. I just thought you deserved to know that my first instinct is to protect myself. But I should have known that I don't have to protect myself from you.\" Her features softened. \n\n\"I understand why you felt like you needed to question me, but we've all been through some shit babe. Just talk to me next time. You know that I love you, and the last thing I want to do is hurt you,\" she said. I could see the sincerity in her eyes, letting me know that all was forgiven. \n\nI smiled at her, \"Thanks. I promise to try.\" She leaned over and kissed me. \n\n\"I had all day to think about where that earring could have come from, and I have a pretty good idea,\" she informed me. I looked at her curiously. \"I think it was Cherri. She's been practically harassing me lately, and it would make sense that she would try something like this. I don't know how she did it, but I'm sure I can figure it out,\" she finished. \n\nIt always baffled me that some people put in time and effort to try to sabotage others. I had way too much going on in my life to even think about concentrating my energy on bringing others down. I initially thought Cherri's infatuation with Kenny was comical, but now she was doing too much. \"Do I need to talk to her?\" I asked. \n\nKenny shook her head, \"No, I'll deal with her. Are you hungry?\" It occurred to me that I was in such a bad mood all day, that I hadn't really eaten. My stomach grumbled, answering for me. I blushed, embarrassed. She grinned at me, \"Good. I'm glad you're here, I really didn't want to eat alone.\" \n\nAs we ate breakfast the following morning, I remembered the news that I wanted to share with Kenny. \n\n\"So, I called and scheduled a hearing with the traffic court to challenge the ticket. It's set for next week,\" I told her. \n\n\"Do you want me to go with you? I'm sure I could get the time off,\" she offered. \n\n\"Thanks, but I think I'll be fine,\" I thanked her as I cleared the dishes. \"But what I would like you to do is keep an eye on Cherri. I know it's tricky for you since you two are co-workers, but I don't have to worry about that obstacle.\" She chuckled as she pulled me close by the hips. \n\n\"Calm down Warrior Princess, it won't have to come to that,\" she placed a soft kiss on my lips. \"Have a good day, I love you,\" she said as we left for our respective vehicles. I wished her the same as we parted. \n\nI arrived at the cake shop to find everyone standing outside. I immediately feared the worst, panicking that the past was repeating itself. As I parked my car, I noticed the cake shop was cordoned off. I found Tanya among the crowd. \"Tanya, what's going on?\" I questioned. \n\nShe looked at me with concern, \"Apparently, the Health Department received an anonymous tip that the shop has rats.\" \n\nMy eyes nearly popped out of my head. \"What!\" I shouted. \"That's not true! Why would someone do that?\" \n\n\"The Health Inspector is inside now, taking a look around. He says we have to shut down until they're able to do a full sweep of the building,\" she informed me. Unfortunately, I was barely listening. What the hell was going on? I knew for a fact that we kept the shop spotless and up to code. I waited impatiently for the Health Inspector to finish. When he finally emerged from the shop, my anxiety was through the roof. \n\n\"Who is the owner of this establishment?\" he asked, surveying the crowd. I stepped forward. \n\n\"That would be me,\" I answered. He extended his hand, which I shook. \n\n\"Hi, I'm Tony. I'm from the Health Department,\" he explained. \n\n\"Yes, I was told that there was a complaint of rodents. I just wanted to tell you that that's impossible,\" I said. \n\nHe offered a reassuring smile, \"From what I saw inside, I'm sure that's true. However, it's our responsibility to complete a thorough inspection. Based on the claim in question, it may take up to five days. Until we are sure, you must close down.\" My face fell. How could this be happening? \"I'll give you a call when this is all sorted out,\" he finished. I couldn't find the words to respond. I turned to face my staff, on the verge of tears. \n\nDana stepped forward to comfort me, \"It's okay Liv. We've been through worse, and somehow managed to come out on top. This will be no different,\" she said taking my hand, giving it a gentle squeeze. I appreciated her optimism, and tried to imitate her positivity. \n\n\"You're right,\" I replied, \"Let's look at these next few days as an involuntary mini vacation. I'll call you all the moment we are cleared to reopen.\" I watched as they all retrieved their belongings and left, one by one. I lingered behind, witnessing Tony hanging the sign alerting possible patrons of our temporary closure. \n\nThese last few days have been so bizarre. I just hope Dana is right, and that this doesn't kill us. I got back in my car and started home. Things can't possibly get any worse. \n\nLittle did I know. \n\nRACHEAL \n\nI watched her, and all her little friends, from the coffee shop across the street. My cheeks hurt, I was smiling so hard. The phone call to the Health Department was simple enough. Granted, there were no rats in the cake shop, but the seed would still be planted with all of those who visited within the next few days. \n\nThe traffic ticket was child's play. All I had to do was call in a favor to my good friend Allen. He kept an eye out for her license plate, and in return, I helped keep his record blemish free. Allen told me that he issued her a ticket. Since it wasn't for the customary amount, I planned to check the parking court database frequently, in the event that she brought forth a dispute. \n\nI left the coffee shop, and returned to my office. I checked my email, and was pleasantly surprised to find a message from my best friend Michelle. Michelle and I grew up together, and have been thick as thieves since the day we met. She was very much aware of my past relationship with Kenny, and was my support system when we separated. Michelle was the first person I called when I found out about Olivia, and she promised to help me get my woman back, no matter what it took. Always my ride or die.  \n\nMichelle was never one to withhold information from me, even when it came to her profession. Her email provided me what I needed, and I sent her a response, thanking her and letting her know the next move. I concluded the message by asking her to continue to keep me informed. While that part of the plan was underway, I decided it was time to step it up. \n\nBecause she had nothing to hide, I easily located Olivia's personal information, and put it in my phone for safe keeping. The rest of the day was agonizingly boring. When it was time to finally go home, I made a stop at a local dollar store, and purchased a few necessary items. I hoped Olivia was ready for what was coming her way. On second thought... \n\nKENDRA \n\nCherri hadn't said a word to me, but I could tell that she was watching me. Closely. She was rarely ever this quiet, and her silence spoke volumes. I thought about how I was going to talk to her while avoiding a possible scene. That would more than likely be difficult, Cherri lived for unnecessary drama. I decided the best way to handle the situation was to be straightforward. So, around 5:00 p.m., I approached her desk. \n\n\"Cherri, you busy after work?\" I asked. She looked at me, wary of my intentions. Good. She should be. \n\n\"Not really. Did you need something?\" she answered. Any other time, she would jump at the smallest sign of my interest. Red flag number one. \n\n\"I'm going to White Ice, and was wondering if you wanted to join me,\" I told her. Her face was a mixture of confusion and curiosity. I maintained my cool. \n\n\"Did you invite anyone else?\" she inquired. \n\n\"Nope, just you and me,\" I replied, offering a small smile. \n\nShe thought for a moment, before responding to my offer, \"Okay, sure.\" \n\nWe walked to the bar, making small talk to fill the silence. I could tell she was uncomfortable, which was entertaining, considering she was usually all over me. Red flag number two. The bar was relatively empty, so finding an available table was no problem. Once we were seated, the waitress took our drink orders, and an awkward silence fell between us. When we had our drinks in hand, I broke the tension. \n\n\"I brought you here to ask you a question. And I want you to be honest with me,\" I started, \"Does this belong to you?\" I placed the earring on the table. She stared at it in silence, recognition quickly flickered in her eyes. Red flag number three. I watched her, waiting for a response. After a few moments, she finally looked at me. \n\n\"I've never seen it before,\" Cherri answered as she picked up her drink to take a sip. She was trying her damnedest to maintain a serious expression. But she was failing. Miserably. \n\nI narrowed my eyes, \"I'm really trying to give you an opportunity to explain yourself. Please, just be honest.\" She shifted in her chair, a slow smile crept across her face. I could feel my temper begin to flare. I took a deep breath. \n\n\"I honestly don't know. Maybe your girlfriend's cheating on you,\" she cocked her head to the side. \"I would never cheat on you,\" she finished, tracing the rim of her glass with her finger. \n\nI had had enough. \"Look, I've tolerated your bullshit for too long, and I'm over it,\" I drained my beer and placed the bottle on the table. \"So, I'm only going to say this once. Stop trying to fuck up my relationship.\" I got up and left before she had the chance to respond. I needed to calm down, and only one person had the ability to help me do that. \n\nI sent Liv a text as I walked to my car, letting her know that I needed her. After she told me she was at her house, I let her know that I was on my way. I was all set to tell Liv about Cherri's refusal to be honest, but none of that mattered the moment I saw her face. \n\n\"What happened?\" I asked. She was sitting on the couch, wrapped in a blanket. A half empty glass of wine and an open bottle sat on her coffee table. She looked as though she had been crying. \n\nShe stared off into the distance, \"The Health Department temporarily shut us down today. They received an anonymous tip that the cake shop has rats.\" I sat down next to her, pulling her into my chest. \"I don't understand. It's like we can't catch a break,\" she whispered as I held her close. \n\n\"While this isn't ideal, it's better than another fire. You came through that situation stronger than ever. This will be a piece of cake,\" she giggled at my unintentional play on words. \n\n\"So, what did you want to talk about?\" she questioned. Compared to her day, my meeting with Cherri was insignificant. \n\n\"It wasn't important. In fact, how would you feel about a pineapple upside down cake?\" she looked up at me, and I was graced with her brilliant smile. \n\n\"You? Bake a cake?\" she inquired, her face showing some disbelief. I put on my best offended expression. \n\n\"I happen to be damned good at baking, thank you,\" I responded, \"I bet it will be the best thing you've ever tasted.\" She raised an eyebrow. \n\n\"Hmmm. Well, now I'm intrigued. How about we place a wager on the cake. We'll have a bake-off. If my cake is better, then you owe me dinner for a week. And I mean homemade, no restaurants or take out,\" she challenged, extending her hand to shake mine. \n\nI took her hand, \"And if I win, which I will by the way, you can't wear any panties in the house. For an entire week.\" I grinned as her eyes widened and her cheeks flushed. \n\n\"What? I don't agree to that!\" her voice rose in bewilderment. \n\n\"Too late!\" I shouted, jumping up from the couch, and sprinting towards the kitchen. I looked over my shoulder to see that she was right behind me. We spent the next couple of hours prepping, mixing and baking our ingredients. We talked about nothing and everything, all at the same time. We even trashed talked each other while waiting for the cakes to finish baking. I enjoyed seeing her smiling and laughing again. \n\nWhen the cakes were finished and cool enough, she cut us each a slice and plated them. We started with Liv's cake. I expected her to make the same pineapple upside down cake that she had made many times before. However, this one had an almond flavoring. While it was delicious, I still had the utmost confidence in my cake. I watched her take a forkful of my cake in her mouth. Her eyes closed, and she moaned with satisfaction. I couldn't stop the smile that lit up my face. \n\n\"Oh my God, Kenny. This is the best version of pineapple upside down cake I've ever tasted. You caramelized the pecans, and is that coconut?\" she asked as she continued to devour the cake. I allowed her to finish eating before I extended my hand, palm open. She looked down in confusion. \n\n\"Hand them over,\" I instructed. She stared at me, still unsure as to what it was that I wanted. \"You remember what the deal was. Based on your admiration of my cake, you owe me your panties,\" I reminded her. \n\nLiv shook her head, \"No way. You're crazy.\" I slowly rose from the stool where I was sitting, and began to make my way to her side of the island. \n\n\"They belong to me,\" I said as I closed in on her. She shot up from her stool and began running towards her bedroom. I quickly followed. She wasn't getting away from me without honoring her end of the bet. She made it to her bedroom, but I didn't give her enough time to close the door. I gripped her hips, picking her up, and tossed her onto the bed. I straddled her legs before she had the opportunity to squirm away. Due to all the activity, her shirt had started to ride up. I took one look, and instantly knew what I had to do. \n\nMy fingers descended on her torso, and I began tickling her. Mercilessly. One of the things that I learned by accident over the months was that Liv was extremely ticklish. That piece of information came in handy when I wanted things to go my way. Liv burst into a fit of shrieking giggles, struggling to separate herself from me. \n\n\"Give me what's mine, and I'll let you go,\" I taunted her as I continued my assault on her rib cage. At this point, tears were streaming down her face, she was laughing so hard. About a minute later, she finally conceded, slapping the bed to signal her surrender. I released her and stood at the foot of the bed, waiting for my reward. She regained her composure and began to strip from the waist down. She slowly peeled out of her leggings, flinging them to side. She pushed her underwear down her legs, stopping at her ankles. She removed one foot, and tossed them in my direction with the other. I caught them and automatically brought them to my face. I inhaled deeply, and felt my pussy tingle. \n\nI looked up to find Liv's legs spread wide and a seductive smirk on her face. She silently beckoned me to her. I hastily removed my shirt and pants before crawling back on the bed, straddling her waist. I dove in, attacking her full lips with mine. I ran my tongue over her bottom lip before dipping it into her mouth to explore further. I felt her hands come in contact with my back, as mine slid underneath her shirt to unclasp her bra. I sat up long enough to remove her shirt and bra, before returning my lips to hers. \n\nI broke away, trailing kisses down her jaw to her neck. I locked onto her pulse point, gently massaging it with the tip of my tongue. Liv's breathing deepened as her body began to squirm. I then dragged my tongue downward, in search of a taught nipple. Stopping short, I slowly circled her areola, deliberately avoiding the extended nub. Fingers intertwined in my locs, and I could feel her trying to direct me. I moved lower, lightly nipping the underside of her breast. ",
        "\"Why are you such a damn tease?\" she whined. I chuckled as I took as much of her breast into my mouth as I could. I sucked long and hard, lightly caressing the tip of her nipple with my tongue. Liv inhaled sharply, and her back arched, shoving more of her chest into my face. I reached over, rolling her other nipple between my left thumb and forefinger. My right hand moved lower, eager to play in her wetness. I parted her lips, taking pleasure in how ready she was for me. It was time to fuck her. \n\nI pulled away, ignoring her baffled protests. \"What are you doing?\" she asked. I walked over to my designated drawer, and pulled out my strap-on. I discarded my briefs and stepped into the harness before turning to look at her as I tightened the straps. Her hand was buried deep inside her pussy, and her eyes displayed wanton need. I reached in the drawer again, locating the lube. After properly preparing the dildo, I returned to the bed. \n\n\"Nope,\" Liv said as she wrestled me to my back. \"I'm taking control from this point forward,\" she declared as she positioned herself above me. With the head in place, she maintained eye contact as she slowly lowered herself onto the shaft. Her hips began to rise and fall, setting a deliberate rhythm. The base of the dildo had a clit stimulator, and each time she slid downwards, I experienced a jolt of pleasure. But it wasn't enough to bring me anywhere near close to cumming. \n\nI began stroking upward to meet Liv's movements, but each time I tried, she would stop all together. I looked at her with a raised brow. She returned my look with a mischievous grin. I instantly regretted letting her get on top. \n\n\"I told you, I'm in control,\" she stated, \"You'll just have to sit back and enjoy the ride.\" She quickened her pace, grinding her hips each time she met my pelvis. I could feel a liquid puddle pooling between my legs. But I still wasn't close enough to cumming. Liv grabbed my hands, placing them on her breasts. I took the hint, kneading them and pulling on her hardened nipples. Her eyes began to glaze over, and her lips parted slightly as she neared orgasm. \n\nI sat up, leaning close to her ear, and whispered, \"I love you.\" I grazed my lips behind her ear, effectively triggering her release. Her eyes rolled back, as a low moan erupted from her throat. I hurriedly leaned back, grabbed her hips, and thrusted into her, prolonging her blissful state. \n\nShe found her voice, crying out, \"Ugghhh! Yesss!\" I was so focused on pleasing her, that I missed her hand disappearing between my legs. She easily sunk two fingers into my dripping pussy, surprising me so much, that my rhythm faltered. She leaned down as she rapidly slid her fingers in and out, still grinding into my pelvis. I was so close to losing it. We locked eyes. \"I love you too,\" she whispered. \n\n\"Mmmmmm,\" I moaned as the waves crashed over me. My walls contracted, tightly gripping her fingers. I felt her soft lips meet mine as her fingers slowed, easing me back down. I returned her kiss, bringing my hands up to hold her face to mine. When we finally gave each other the opportunity to breathe, she slowly lifted herself off the dildo. I lazily removed the harness, pulling her into my chest. She pulled the sheets over us and I kissed her on her forehead. \n\nAs we drifted off to sleep, she whispered, \"A week without underwear may be more fun than I thought.\" I smiled. It would be if I had anything to do with it. \n\nOLIVIA \n\nA night with Kenny always produced the best sleep. And last night was no exception. I awoke just as she was leaving for work. When she noticed that I was watching her, she walked over to the bed, and gave me a quick peck on the lips. \n\n\"Have a good day, I love you,\" I told her. \n\n\"I love you too,\" she responded. \"Remember our bet,\" she winked as she walked out of the room. \n\n\"Yeah, yeah,\" I called after her, then I heard the front door close. Just as I was about to get up to use the bathroom, my cell phone buzzed, alerting me of a text message. I grabbed my phone, thinking it was Kenny sending me one of her daily messages. However, the phone number was private. I hesitantly slid the notification to view the text. It consisted of pictures of Kenny sleeping in her bed. It struck me as odd, especially since they were from angles that made it impossible for her to have taken them herself. \n\nI scrolled to the end of the text, and instantly felt sick to my stomach. Accompanying the pictures was a message: \n\n'She belongs to me. You either back off, or I make you.' \n\nWhat the fuck? The photos looked recent, but Kenny had already told me that she wasn't sleeping with anyone else. But how was she going to explain this? I showered and dressed to go for a run. I needed to try to make sense of this, and not being able to go to work didn't make the situation any better. I left my house, setting my phone to silent. I turned on my playlist, and jogged to the nearest park. Once there, I set off on my favorite trail. \n\nShe never once lied to me, and never gave me a reason to think that she would. But this was all too much. First the earring, and now the threatening messages. They all pointed towards the possibility of there being another woman who was determined to make her presence known. I came to the end of the trail, which showcased a beautiful stream, stemming from a small waterfall. The ambiance always helped me sort out my thoughts. \n\nI found a rock and sat for a while, my mind racing. Should I even ask Kenny about the pictures? What would she say? I'm not even sure I would want to hear her excuses. And what if she gets mad again, I don't think I could remain as calm as I was before. I needed someone to confide in. Naturally, the first person to come to mind was Tanya. But I felt she was too close to the both of us to be neutral. I could only think of one other person who would be impartial, and play devil's advocate if necessary. I jogged back to my house to retrieve my car. \n\nI pulled up in front of her house about 45 minutes later. I sat in the car for a couple of minutes, trying to determine how I was going to tell her. I took a deep breath. Okay, Olivia. Mind as well get this over and done with. I exited my car, and walked up the pathway to her front door. I rang the doorbell, and waited. A few minutes later, she opened the door. \n\n\"Well, if it isn't my Livy! I've missed you, sweetheart,\" she exclaimed as she pulled me in for a hug. I smiled as I returned her embrace. \n\n\"Hi Nana. I've missed you too,\" I responded. I walked in and felt my stomach growl. She chuckled at the sound. \n\n\"I'm assuming you're hungry,\" she said. I blushed in response. I had been so frustrated, I forgot to eat before leaving. \"Luckily for you, I just finished baking an orange cake,\" she told me with a knowing look. I nearly drooled, I was so excited. She led me to the kitchen, and I sat at the table as she sliced the cake. She set our plates on the table, and sat across from me. \n\nI took a bite, and was instantly reminded of why I loved cake so much. She noticed that I had already consumed two thirds of my piece, so she decided to bring the rest of it to the table. \n\nOnce I had my second slice of cake on my plate, she broke the ice, \"While it is always a pleasure to see my only granddaughter, I can't shake the feeling that you're here because there's something bothering you.\" I never could get anything past her. \n\nI set down my fork, and met her gaze. \"I've met someone,\" I started. Her eyes lit up as she beamed at me. \n\n\"Oh, honey! That's wonderful!\" she exclaimed. \n\n\"Thanks. I'm really happy,\" I replied with a small smile. \n\n\"Then, what's the problem?\" she inquired, seeing through my fa\u00e7ade. I picked up my fork and began poking at the cake. \n\n\"Nana, I have something I need to tell you,\" she looked at me with concern. I dropped my eyes to my plate, \"It's a woman.\" The room fell silent for a few seconds. I glanced at her face, worried that she would be upset. I couldn't read her expression. \n\n\"You said that you're happy?\" she questioned. I nodded. \"Then I'm happy for you,\" she reached out, placing her hand on mine. \"Baby, I don't care who you're with, as long as they treat you right. I love you just the same, and I always will\" she told me. I sighed with relief. \"But that's not the only reason why you're here, is it?\" she asked. Once again, knowing everything. \n\nI smiled at her, \"No, it's not.\" She waited for me to continue. \"We've been dating for about five months now, and things have been wonderful. We've had our moments, like any other couple. But recently, things have been... off. The other day, an earring fell out of her pocket. And it didn't belong to either one of us. And this morning,\" I pulled out my phone and located the text, \"I received these messages from a blocked number.\" She scrolled through them, reading the threat. I bit my lip as I waited for her to finish. \n\n\"You think she's cheating on you?\" she inquired. \n\n\"I don't think so. She of course said she wasn't, and she's been nothing but honest and faithful to me. But those pictures caught me completely off guard, and I don't know how to handle this,\" I explained. \n\n\"And you've asked her about these things?\" \n\n\"Just the earring. She doesn't know about the pictures yet,\" I answered. \n\n\"Well, honey,\" she began as she returned my phone, \"I know what Daniel put you through, and I can understand how that could make it difficult to trust again. Now, I don't know this young lady, but according to you, she's pretty remarkable. I could tell you what your next step should be, but I'm sure you already know what it is. What you choose to do afterwards, though, is up to you.\" \n\nIt wasn't what I wanted to hear. But I knew she was right. I continued to poke at my cake. \"I've never felt this way about any relationship that I've had, and I'm afraid that if I question her about these things, it won't end well. I don't want to lose her,\" I confessed, tears welling up in my eyes. \n\nNana stood from her chair, coming around the table to pull me into a hug. I wrapped my arms around her waist. \"Relationships are tricky things, and the unknown is always frightening. It took your Grandfather and I a long time to find a rhythm that worked for us. But when we did, it made us stronger than ever. What you have is still fresh, but if you both care about each other as much as you've lead me to believe, I think you two can work through whatever this is. And of course, I will always be here for you,\" she said as she wiped away the tear that rolled down my cheek. \n\n\"But I want you to promise me something,\" she said, placing her finger under my chin to lift my face to hers, \"Always remember your worth, Livy, and never settle for anything less than that.\" I smiled up at her though my tears. \n\n\"Yes, ma'am,\" I promised. When I was finally able to stop crying, we shared a few more hours together, enjoying each other's company. As with all Grandmother's, she fed me lunch, and wouldn't let me leave without taking what remained of the cake.  \n\nI hugged her tightly and kissed her on the cheek, \"Thank you, Nana.\" \n\n\"Of course, baby. Now, don't be a stranger. It would also be nice to see you when things are going well in your life,\" she chastised me. \n\nI chuckled as I turned to leave, \"Yes ma'am.\" \n\n\"And bring your girlfriend with you. I would very much like to meet her,\" she told me. \n\n\"I will. I love you.\" \n\n\"I love you, too,\" she replied as she watched me get in my car and drive away. \n\nIt was early afternoon when I returned home. After parking my car, I picked up my phone to text Nana, letting her know that I got home safely. It was then that I saw that I had a few missed calls and text messages. All from Kenny. But I still wasn't ready to talk to her. I went inside to shower, using that time to plan the rest of the evening. By late afternoon, I decided that I had kept her waiting long enough. I sent her a message, letting her know that I was fine and at home. She walked in the door around 5:30 p.m.; I already had dinner on the table. \n\n\"Hey babe,\" she greeted me as she entered the dining room, \"It smells amazing in here.\" She kissed me briefly before turning her attention to the table. Her face immediately lit up. \"You know how much I love your chicken penne,\" she said as she sat down to eat. \n\nI smiled, \"I know. Tell me about your day.\" She gave a brief overview of the cases she was currently working on. I didn't really hear much of what she said. Unfortunately for me, she noticed. \n\n\"You okay, Liv? You were pretty much M.I.A. today, and you seem preoccupied at the moment,\" she asked. I slowly placed my phone on the table. \n\n\"This morning, right after you left, I received a text. I thought maybe it was from you, but the number was private. There were pictures of...\" My voice faded, and I felt my eyes begin to water. I picked up my phone to open the message, and slid it across the table. Kenny picked up the phone to view the pictures. Her face displayed confusion until she read the message. She looked at me with surprise. \n\n\"Liv, I have no idea what this is, or who it's from,\" she quietly stated. \"I meant it when I said that I wasn't seeing anyone else,\" she tried to reassure me. I bit my lip, fighting back the tears that threatened to spill over. \n\n\"These are recent pictures, Kenny. And judging by the message, someone is obviously tired of being ignored. You said you thought the earring came from Cherri. Could this be her, too? And if it is, how the hell did she get these pictures?\" My voice shook, betraying my attempt to sound firm. \n\n\"Cherri never admitted to the earring, but she doesn't have to, her reaction to my asking said everything. But this,\" she held up the phone, \"There is no way that this is her, she doesn't even know where I live. I honestly don't know what's going on, but I'm not lying. I'm not a cheater.\" \n\nWe stared at each other in silence for a few moments. Her honey brown eyes pleading with me to believe her. \"I think you should go,\" I managed as I rose from the table, walking towards the door. She didn't move at first, staring at me in disbelief. I stood, holding the door open, waiting. She finally got up to leave. \n\nWhen she reached the door, she stopped to look at me, \"What does this mean?\" she asked. I half-heartedly shrugged my shoulders, staring at the floor. \"I don't know what's going on Liv, but I promise I'm going to find out. I'm not going to lose you,\" she swore as she walked away. I managed to close the door, before I broke down, sobbing. \n\nRACHEAL \n\nI entered the courthouse, located my desired courtroom, and sat in the back row. I was earlier than necessary, but I wanted to make sure I didn't miss anything. About twenty minutes after I arrived, the back door swung open, and in walked Olivia Grace Taylor. She was dressed appropriately, wearing a black knee length skirt, a white blouse, and modest black heels. None of that mattered though, because the look on her face was priceless. \n\nShe obviously received the text message that I sent her, and it seemed as though it caused some trouble in paradise. She looked exhausted; like she was currently just going through the motions. We waited as the judge went through her list, calling forth the scheduled cases alphabetically. After a boring thirty minutes, it was finally Olivia's turn. \n\n\"Taylor,\" Judge Walker called out. Olivia rose to her feet, gathered her belongings, and walked forward to her designated podium. \"In the case of parking ticket number 175009463, how do you plead?\" the Judge demanded. \n\n\"Not guilty, Your Honor,\" Olivia timidly answered. \n\nJudge Walker ruffled through some papers, then turned to Allen, \"Officer Nichols, would you please explain to the Court why you issued a ticket in the amount of $90 to Ms. Taylor?\" \n\n\"Well, Your Honor, she failed to adhere to a stop sign, failed to signal before making a turn, and exceeded the speed limit by 20 miles per hour in a residential area,\" Allen stated. Judge Walker made a show of reviewing the documents she had placed before her. \n\n\"Ms. Taylor, you're here today to dispute the dollar amount, not the violations, correct?\" she peered at Olivia over her glasses. \n\n\"Yes, Your Honor, I- \" \n\n\"Ms. Taylor,\" the Judge cut Olivia off, \"Based on the violations stated by Officer Nichols, the dollar amount in question is justified. You are required to pay the amount in full before the end of the day. Failure to do so will result in the suspension of your license.\" \n\n\"But-\" Olivia tried. \n\n\"I've made my decision-\" the Judge began. \n\n\"Your Honor, please-\" Olivia interrupted. \n\n\"Ms. Taylor, I will not tolerate outbursts in my Courtroom! Therefore, I am ordering you to pay twice the original amount, and your license is hereby suspended for the next thirty days,\" Judge Walker ruled. \"Bailiff, please remove her from my Court!\" she yelled. I watched as he ushered Olivia towards the door. Thankfully, I was seated on the opposite side of the courtroom, because I wouldn't have been able to explain why I was so amused. \n\nOnce the final case concluded, I exited the courtroom, and headed down the hall. I found the office I was looking for, and knocked on the door. \"You may enter,\" a voice called out from the other side. I let myself in, closing the door behind me. \n\nThe Honorable Judge Michelle Walker stood from her chair to hug me. \"Hey Rach! Did you enjoy the show?\" she asked with a knowing smirk. \n\n\"You have no idea Mickey! It took all of my power not to laugh when you suspended her license. I've never seen someone so dazed and confused,\" I replied with a giggle. \n\nMichelle offered me a chair as she returned to her seat, \"I was only trying to make sure she doesn't disobey the law, ever again. Did you send her the pictures?\" she eagerly inquired. \n\n\"Yep. And judging by how she carried herself today, I think it's safe to say that she and Kenny are not doing so well,\" I proudly stated. \n\n\"Girl, you are too much! I'm just glad that we're best friends, I would hate to ever be on your bad side,\" Michelle laughed. \n\nI shrugged my shoulders, \"What can I say? I'm a girl who knows what she wants, and is willing to do whatever it takes to get it. Regardless of who's in my way.\" \n\n\"I get it. Just let me know if there is anything else that you need me to do. It gets boring around here sometimes,\" Michelle offered. \"So, what else is in store for Ms. Taylor?\" she asked. \n\n\"I have something that I'm currently working on. Once I have more details, I'll fill you in,\" I replied. \n\nOLIVIA \n\nI exited the courtroom, speechless. What the hell just happened? The next few minutes were a complete haze. I paid the clerk, completed some paperwork, and found myself outside of the courthouse, walking in the direction of my car. I turned the corner, and felt my chest tighten. \n\nMy car was gone. I frantically spun around, not sure exactly what I was expecting to find. Then, I spotted it. My car was strapped to a flatbed tow truck, and was being taken to God knows where. Somewhere inside my brain, a signal went off, telling me to take down the name of the towing company. I fumbled for my phone. Thankfully, the truck was stopped at a red light. I took a quick picture, just as the light turned green. Ridge Valley Towing. I would have to call them when I got home. How am I getting home? I hadn't spoken to Kenny in a week, and I really didn't want to call her. So, I called the only other person that I could depend on. \n\nTwenty minutes later, Tanya pulled up to the courthouse. \"Thanks, Tanya. You have no idea how much I appreciate this. I have had a day, and it's only 11:00 a.m.\" I thanked her as I slid into the passenger seat. \n\n\"No problem at all, Liv. I'm sorry to hear about your morning. Did you want to talk about it?\" Tanya asked. \n\n\"Not really,\" I answered. \"How's the shop?\" ",
        "\"It's doing well. It seems that the temporary closure hasn't affected our revenue. Not to mention the fact that we now have an \"A\" rating from the Health Department. I'd say that's been a contribution as well,\" she smiled at me. \n\nI exhaled, relieved that Piece of Cake II was still thriving. \"That's good the hear. Tanya, I have a favor to ask of you. Would I be able to carpool with you for a little while?\" I asked. \n\n\"Of course, anything you need,\" she responded. I thanked her again, and we spent the rest of the ride to work in silence. I pushed everything aside, and forced myself to be the boss that I am every day. Thankfully, we were as busy as usual, if not more so, and being with my team helped raise my spirits. I was exhausted by closing time, but it was better than being alone and depressed. \n\nI was sitting in my office, closing out some end of the day tasks, when Tanya came rushing in. \"Hey Liv, I'm really sorry, but there's been a family emergency, and I need to go,\" she stated hysterically. \"I can still take you home, but we have to leave now,\" she offered. \n\n\"No, don't worry about me, go be with your family. Keep me posted,\" I told her. She thanked me, and was gone. I sighed, leaning back in my chair. Everyone else was gone for the day, so asking someone to come back for me was out of the question. I reluctantly picked up my phone, and sent a quick text. I received a response a few minutes later. I wrapped up closing the shop, and patiently waited for my ride to arrive. Ten minutes later, I received a message letting me know that they were outside. I locked up, walked over to the car and slipped into the passenger seat. \n\n\"Hi,\" I said as I closed the door. \n\n\"Hi,\" Kenny replied as she pulled away from the curb. \n\n\"Thanks,\" I said quietly after a few minutes. She grunted in response. The atmosphere inside of the car was awkwardly intense, and I found myself wishing I hadn't asked her to take me home. I leaned back on the headrest, and closed my eyes. I tried reflecting on my day, but was assaulted by the scent of Obsession for Him by Calvin Klein, her favorite cologne. My mind drifted to the first time Kenny came to my house, and a small smile graced my lips. I slowly opened my eyes, and surreptitiously looked her way. \n\nI focused on her strong hands gripping the wheel, and I could almost feel her touch. I dragged my eyes down her arms, and up to her broad shoulders. I stopped at her jaw line, and felt my body temperature rise. \n\nShe raised an eyebrow, glancing my way \"May I help you with something?\" I cleared my throat, and averted my eyes, shifting uncomfortably in my seat. Of course she caught me. \"I've missed that blush,\" she said, with that dangerous smirk. \n\nThe buzzing of my phone was my saving grace. Unfortunately, it was a message from Tanya, letting me know that she would need to take the next few days off to be with her family. Shit! Now, how was I supposed to get to work. There was no form of public transportation that would get me there early enough, using ride sharing services could become costly, and I couldn't afford a rental. I had been so absorbed in devising a plan, that I hadn't even noticed we were parked in front of my house. I looked up to find Kenny staring at me with that same smirk. I looked away, feeling my face flush in embarrassment. \"Thanks again,\" I mumbled. \n\n\"Mmhhmm,\" she answered. \"So, are you going to tell me what happened to your car?\" she asked. \n\nI looked down and began fidgeting with my fingers, trying to swallow my pride. \"I went to traffic court today...\" I began. \n\n\"And?\" she asked. \n\n\"The judge suspended my license for thirty days. And then my car was towed. But, Tanya agreed to let me carpool with her for a while,\" I answered. I kept my gaze focused on my fingers. \n\n\"And, Tanya is where?\" she inquired. \n\n\"She had a family emergency... And she needs to take the next few days off,\" I replied. \n\n\"So, you need a ride to and from work?\" she questioned. I nodded, unable to speak. \"Liv,\" she said as she used her finger to gently raise my face to hers. I met those warm, honey brown eyes, and felt my stomach flop. \"I know I'm not your favorite person right now, but you know that there isn't anything that I wouldn't do for you. I meant it when I said that I wasn't going anywhere,\" Kenny reassured me. \n\nI longed to press my lips against hers, and found myself slowly leaning in. Before I could process what I was doing and stop myself, Kenny closed the distance, attacking my lips with hers. I felt my stomach flutter, and I instantly melted into her mouth. My fingers tangled into her locs as I pulled her in closer. I needed to taste more of her. My tongue slithered forward, brushing her lower lip. She graciously allowed me entry, and I explored her mouth as if it were the first time. \n\nMy breathing became labored and the temperature in the car became unbearably warm. But that was nothing compared to the heat that was rising between my legs. I fumbled with my seatbelt, frantically trying to free myself. When I finally heard the click of release, I briefly broke away to climb onto her lap. We locked eyes, and it was as if the world stopped. I gazed into those deep, honey brown eyes, and knew my underwear would soon be soaked through. \n\nKenny leaned in, softly placing kisses along my collar bone. I felt her tongue snake up my neck, before her teeth caught my earlobe. \"I think we should go inside,\" she whispered, kissing behind my ear. I couldn't control the whimper that flowed from my mouth as I nodded in agreement. My pussy pulsed in anticipation. We couldn't untangle and get to the house quick enough. I felt her hands on every inch of my body as I struggled to open the door. Somehow, we made it inside. \n\nKENDRA \n\nI was surprised to hear from Liv, but I was more than excited to see her. The week apart was torture. But now that I had her, I intended to remind her of how much she meant to me. Liv never had to do much to get me hot and bothered, and when we finally stumbled through her front door, my arousal took over. I pinned her to the door, and slowly reached under her skit. I made eye contact, only inches from her face, \"Don't move.\" My right hand slid up her thigh, until I reached my desired destination, gently cupping her heated center. \n\nI could feel her slickness through the gusset of her panties. I pulled my hand out, bringing my fingers to my nose, deeply inhaling her scent. Her lips parted slightly and her breathing became uneven. I grabbed her skirt, sliding it up her thighs, clearing hips, and letting it bunch around her waist. My right hand found its way into her underwear, and my fingers parted her lips, gliding through her wetness. I let my fingers lazily explore, before landing on her clit. I began by making light circles around the hardening nub with my middle finger, occasionally pinching it. Each time, her breath caught in her chest. I moved lower, searching for her entrance. \n\nI easily entered her with my middle and ring fingers, allowing my palm to rest on her clit. I quickly established a rhythm, enjoying the feeling of her essence dripping down my hand. Each time I slid back into her, my palm massaged her clit. Her walls eagerly gripped me, begging me to go deeper. Her eyes started to glaze over, and she took her bottom lip between her teeth. \n\nLiv's hips began to undulate involuntarily, as she neared orgasm. The sound of her juices echoed throughout the entryway, competing with the sound of her heavy panting. Her face screwed up in pleasure, and I felt her hands grip my wrist. She fought to keep eye contact as she pushed herself towards release. Suddenly, her eyes rolled back into her head and her mouth fell open into a silent scream. I curled my fingers, coming in contact with her g-spot. Her knees gave out, and she slowly slid down towards the floor. I followed her, easing my fingers from her before she finished her descent. \n\nI gave her a moment to catch her breath before scooping her up in my arms. I carried her to her bedroom, and gently laid her down on the bed. She pulled me close, wrapping herself around me, before slipping into an easy slumber. I held her close, peering down into her face, praying that she wouldn't regret this when she woke up. \n\nIt's so hot... Why am I so hot? I slowly opened my eyes, waiting for them to adjust to the darkness. Then I felt it. The tingling sensation between my legs; in my chest. My eyes lowered to see Liv attached to my right breast. It was then that I realized her thumb was stroking my clit. Her tongue slithered around my erect nipple, and her fingers slid between my nether lips. \n\nMy legs spread on their own accord, giving her further access. She hummed her approval, sending shockwaves of electricity straight to my clit. My breath caught as my back arched in response. She released my nipple, blazing a trail of kisses up my chest, towards my neck. She stopped to focus on the hollow of my throat, swirling her tongue. \n\n\"Mmmm,\" I grunted, biting my lip. Liv's lips moved up my neck and over my jawline. Just as she reached my lips, her fingers slipped inside me. I felt my body tense up. We fell into a slow, sensual kiss, her fingers presenting no rush to take me higher. My tongue found its way into her mouth as my hands landed on her full ass. I squeezed each cheek, drawing a low growl from the pit of her stomach. It excited the shit out of me. \n\nLiv pulled away, lowering her mouth to my ear. \"I'm supposed to be mad at you,\" she whispered, her left hand gripping my nipple. \"But I can't help myself when you're near me. It doesn't make it any easier when you look at me like you do. You make me so weak, and I hate it. But I love it. I love you,\" I felt her warm, wet tongue glide up my ear. I inhaled sharply as my body began to tremble. \"I want you to cum for me,\" she breathed. \n\nI buried my face in her neck, pulling her tightly into me. I bucked into her, wanting to give her exactly what she asked for. My walls contracted around her fingers. \"That's right baby, give it to me,\" she whispered. It didn't matter what she was begging for, just as long as she was begging. \n\n\"Shit, Liv,\" I hissed, as the waves crept up on me. \n\n\"Give it me,\" she repeated. My eyes closed as my body shook at her command. Her fingers continued their torture, prolonging the ecstasy. She withdrew, gently rubbing my clit, as she waited for me to relax. I struggled to breathe, but I was beyond satisfied. Liv nuzzled into my neck as she sucked her fingers into her mouth. \"Mmmm,\" she moaned. Tremors racked my body at the sound. I dozed off, still holding her close. \n\nI awoke the same way that I fell asleep: holding her. Her face was engulfed in her curls in the cutest way. She stirred slightly, gripping me tighter. I ran my fingers through her hair, attempting to gently wake her. \"Liv, baby. It's time to get up,\" I quietly told her. She buried her head further into my chest, grumbling her resistance. I chuckled, teasing her, \"Bet you wouldn't be this tired, had you kept your hands to yourself last night.\" \n\n\"You loved it,\" she countered. A slow smile crept across my face at the memory. \n\n\"I'm not arguing that point. But, we still have to get up if you're going to make it to work on time,\" I replied, loosening her grip. \"I'll shower first to give you time to wake up,\" I said as I walked towards the bathroom. \n\nI stood under the stream of hot water, images of the previous night running through my head. I was almost finished, when a pair of hands snaked around my waist. Soft, supple lips planted butterfly kisses along my shoulder blades. \"You know we don't have time for this,\" I said without turning around. Liv continued to nibble on my shoulder. I spun around, pinning her to the back wall of the shower. Surprise flashed in her eyes, before it was replaced with arousal. Her chest heaved as she breathed deeply. She sucked in her bottom lip as I ran my finger down her neck, tracing her shoulder. \n\n\"Don't start something you can't finish,\" I warned her, arching my brow. She smirked at me, fixing me with a challenging stare. I stole a quick kiss, then exited the shower. \"I'll make us a light breakfast,\" I called over my shoulder as I walked out the door. I heard her whine in frustration. \n\nThirty minutes later, Liv joined me in the kitchen. I could tell she was upset I left her in the shower. If she gave me the chance, I would make up for it later. After some fruit and small talk, we left her house. Just before I opened my car door, a car in the distance caught my attention. It looked vaguely familiar... \n\nRACHEAL \n\nWhat. The. Fuck? This was not supposed to happen. I came by that bitch's house last night to see how she was getting along without a car, and what do I find? Kenny's car, sitting out front. I know I saw her leave the courthouse with one of her employees. So, what the hell was Kenny doing here? Especially since I know those pictures that I sent did their job. And now, they walk out of her house together, all happy and shit. Early enough for me to conclude that Kenny spent the night. No. There was no way I was going to let her sink her claws back into my woman. I had to step my game up. She had no idea who she was fucking with... \n\nOLIVIA \n\n\"What'd you say?\" I asked as Kenny climbed into the driver's seat. She looked as if she saw something unpleasant. \n\n\"I thought I saw something. Someone possibly. I'm not sure,\" she replied. \n\n\"Someone that you're not too fond of?\" I inquired. \n\n\"I don't know. But if it's who I think it was, then there's a problem,\" Kenny mumbled. That statement didn't sit well with me, but I chose to let it go. When she was ready to talk about it, she would let me know. The rest of the car ride was filled with a tense silence. Kenny was clearly lost in her thoughts, and it didn't help ease my growing anxiety. What could have possibly changed her mood so quickly? \n\nShe dropped me off at work and barely looked in my direction as she drove away. I could feel a knot forming in the pit of my stomach. The rest of the day was a clumsy blur. I lost count of how many times I dropped or spilled something. \n\nI had gone all day without hearing from Kenny, and closing time was no different. I sent her a few messages, but received no reply. By 6:30 p.m., I gave up trying to reach her and called a cab. The rest of the evening seemed to drag, the knot in my stomach growing larger as the hours passed. Sleeping was going to be impossible. \n\nI tossed and turned all night, frequently checking my phone, only to find no new notifications. When my alarm clock alerted me that it was time to get ready for work, I had accepted the fact that I wasn't going to hear from Kenny anytime soon. \n\nI couldn't shake my attitude, and was more than grateful for the end of the work day. I stayed behind, as usual, and missed Tanya's attention to detail. I may not have felt comfortable enough to share my problems, but knowing that someone cared enough to ask is somewhat of a mood booster. I locked up the cake shop and was about to call another cab, when I heard a familiar voice. \n\n\"Butterball? Is that you?\" \n\nI immediately felt bile rise to the back of my throat. I fought to swallow it down, refusing to turn around. My eyes slammed shut. No. It can't be. \n\nThen, the voice came again. \n\n\"I know it's you, Liv. You gonna say hi, or keep ignoring me?\" \n\nShit. I took a few deep breaths to calm my nerves. Slowly, I turned, coming face to face with Daniel. He wrapped his arms around me, embracing me as if we were two old friends who were overjoyed to see each other. I felt the bile rise once more. \n\n\"I guess I can't call you Butterball anymore, huh?\" he asked as he stepped back to observe me. \"You still got that fat ass, though. I think Chunky Monkey still fits,\" he winked. I felt my face flush as I fought to keep from covering myself to hide from his gaze. \"It doesn't surprise me that you work at a cake shop. You never could stop eating it,\" he murmured. \n\n\"Daniel, what are you doing here?\" I weakly asked as I stared at the ground. We hadn't spoken in years, but now, here he was, bringing back unpleasant memories. \n\n\"What am I doing here? I got your text, asking me to take you home because your car was towed,\" he replied as he opened his messages. \n\n\"What are you talking about? I didn't text you,\" I told him. Obviously, he had lost his mind. \n\n\"Yeah, you did,\" he said as he showed me the thread. There it was, plain as day. Messages from my phone number. How the hell? \n\nHe linked his arm in mine and began leading me towards his car, \"You can tell me all about your car, and how much cake you eat on the job, on the way.\" \n\nMy body was moving, but my brain was screaming in protest. I shouldn't go with him. I need to stop this! But for some reason, my body wasn't responding to my brain. Before I knew it, I was in his car as he rambled on about how much he missed me. \n\nSuddenly, we were parked in front of The Vineyard, my favorite Italian restaurant. He exited the vehicle, then walked around to open my door. I numbly followed him inside, and shortly thereafter, we were seated in a quiet booth in the back. I was amazed attempt at being gentlemanly. Maybe he's trying to change. He ordered a bottle of wine, and I awkwardly settled into the booth, waiting for the other shoe to drop. Then, the real Daniel resurfaced. \n\n\"So, Porkchop, you're looking good these days,\" he eyeballed my breasts. There it is. \"You look like you've lost some weight. Still not enough, though,\" he mumbled, sipping his wine. \n\n\"You brought me to dinner just to insult me?\" I asked. \n\n\"Of course not,\" he laughed, \"I know how much you love the food here. Or food in general.\" Our waiter returned at that moment to take our orders. Before I could open my mouth, Daniel interrupted me, \"I'm sure you can tell that the lady is hungry just by looking at her. Be prepared, she usually orders at least half of the menu,\" he rudely joked. The waiter shifted uncomfortably, and I felt my face go bright red. \n\n\"Really?\" I hissed, \"That was ridiculously inappropriate.\" The waiter quickly excused himself before the moment could become anymore painful. \n\nDaniel shrugged his shoulders, \"What? I was just kidding. I'm sure you would order more than half.\" I had heard enough. I finished my wine, and promptly left the restaurant. \n\nI decided to walk for a while, fighting back the tears that clouded my vision. Even after all this time, he still had a way of tapping into my insecurities, and reminding me of what I hate most about myself. I finally looked around and discovered that I was in the park where Kenny and I shared our first kiss. It was far from romantic, but it reminded me that I hadn't heard from her in two days. I sat down on a bench and tried to figure out how my life had turned around so quickly. \n\nI was so engrossed in my thoughts, that I didn't notice someone sitting next to me, \"You look like you could use a friend.\" I turned to stare into beautiful, hazel green eyes. Something about her seemed oddly familiar, but I couldn't put my finger on it. I looked down to see her handing me a tissue. I hadn't even noticed that I was crying. \n\n\"Thank you,\" I replied as I took the tissue, giving her an inquisitive look. \n\n\"Racheal,\" she responded with a smile as she extended her hand. I shook it, returning her warm gesture. Her eyes exuded a friendly vibe, and I immediately felt at ease in her presence. \"It's getting late, and it probably wouldn't be safe for two pretty women to be here after dark. We should get going,\" she said as she stood to her feet. \"Let me walk you to your car,\" she offered. \n\nI sheepishly answered, \"I don't have a car right now. But I'm going to call a cab,\" I quickly finished. Racheal shook her head in response. ",
        "\"There's no way I'm letting you call a cab. I'll take you home,\" she grabbed my hand, and began leading me towards her car. \n\n\"It's okay, really. I'll be fine,\" I tried to convince her. \n\n\"Nonsense. Look, I know you don't know me, but I would hate myself if I didn't make sure you got home safely. Please, just let me take you home,\" she pleaded. I reluctantly agreed. \n\nWe made small talk during the ride, and I found myself opening up to her. She was extremely easy to talk to. Before long, I felt like I had known her my whole life. We exchanged numbers before I got out of her car, and I looked forward to crossing paths with her again. As she drove away, it occurred to me that I never gave her my address. Or did I? I must have. How else would she know where I lived? Man, I must be losing my mind. \n\nI went inside, had a quick dinner, and prepared for bed. I called Kenny one last time, but it went straight to voicemail. I didn't know why she was ignoring me, but if she wanted to play that game, fine. I knew when to take a hint. \n\nKENDRA \n\nI hated ignoring Liv, but I needed time to sort out what I was almost positive I saw. I had spent the last two days trying to track Racheal in my spare time. It proved to be uneventful, until I saw her sit next to Liv in the park. What the hell was she doing? \n\nI watched them exchange words, before Racheal pulled Liv to her car. I quickly followed them, and was utterly confused to see the look on Liv's face after Racheal dropped her off. Liv looked happy, like she'd found a new friend. But Racheal was selfish and manipulative. There was no way her intentions were good. \n\nI waited until Liv went inside to continue following Racheal, but by then, I had lost her. I decided to go home, and do some research to prove my theory. I knew that Racheal had access to personal information through her profession, which would make it easy for her tamper with peoples' lives. And her sudden interest in Liv could explain why the last few weeks had been crazy. \n\nI logged onto my computer, and searched for Liv's traffic court case. Nothing about the transcript jumped out at me, until I came across the presiding judge. I Googled the name, and felt my stomach drop when I clicked the link to the bio. It was Mickey. I had only met her a few times, but I knew Michelle was Racheal's best friend, and the two of them were known for abusing their positions of power for their own benefit. \n\nI reviewed the case again, and decided to search the name of the officer involved. He was assigned to the precinct that worked closely with Racheal's branch office. Which meant Racheal probably had him in her pocket as well. \n\nIf Racheal could do all this, then what else was she capable of? Then, I thought about the pictures that Liv showed me. It had Racheal's name all over it. I don't know why it didn't occur to me before. I needed to talk to Racheal, try to figure out why she was suddenly back, and so interested in Liv. But first, I needed to talk to Liv, and see how much information she shared with Racheal. \n\nThe next day was annoyingly busy, and I barely had time to formulate what I was going to say to Liv when I saw her. I was deep in thought, trying to organize my words, when I felt a pair of hands grip my shoulders. \n\n\"You look incredibly tense today. Is there trouble at home?\" Cherri whispered in my ear. I felt her warm breath before she gently kissed my earlobe as she massaged my shoulders. My stomach turned in disgust. \n\nI jerked my head away, \"Cherri, I told you, I'm not interested. Please, leave me alone.\" I tried to remain as calm as possible. The last thing I wanted was to cause a scene at work, jeopardizing my career. Cherri, however, didn't seem to care. \n\nShe spun me around in my chair, and straddled my lap, \"Come on, Kenny,\" she rolled her eyes. \"You've been moping around here for the last two days. It's obvious your little straight girl isn't doing what she should be doing. I've already told you, all you have to do is ask, and I'd fix that,\" she ran her finger across my jaw. \n\n\"You've got five seconds to remove yourself. Or I'll do it for you,\" I warned her, my eyes narrowing as my jaw tightened. She smugly returned my gaze. \n\n\"I think I'll chose option number two, please,\" she grinned. I gripped her hips, careful not to use too much force, and lifted her off my lap. I stood simultaneously, placing her at arms length. \n\n\"Out. Now,\" I glared at her, exhibiting the disgust that I felt in my voice. \n\nShe rolled her eyes for a second time, sighing impatiently, \"I don't know why you insist on fighting me Kenny. I always get what I want.\" Cherri turned and crossed my office towards the door. She stopped to wink at me, before finally leaving. I quickly followed and closed the door behind her. \n\nI returned to my desk, and picked up my phone. I needed to make a call. \n\nThat evening, I drove to the cake shop. I wanted to get there before Liv locked up for the night. I walked in as the last of her staff were leaving. I found her in her office, going over some paperwork. Her hair was pulled up into a messy, curly bun. Her eyebrows were etched together in deep concentration, as she chewed on the end of her pen. I felt my insides tingle. \n\nI tapped on the door frame to get her attention. She looked up, slightly startled that she wasn't alone. Her face instantly burned with embarrassment. I smirked at her, \"May I come in?\" \n\nShe placed the papers and her pen to the side, nodding her head. I sat down across from her, readying myself to apologize for my recent absence. But before I could ask for her forgiveness, Liv spoke first. \n\n\"I didn't think I'd hear from you so soon. Especially since you've been ignoring me,\" she stated evenly, raising a brow in my direction. \n\nI shifted in my seat, immediately forgetting everything that I planned to say. \"I'm sorry. I was dealing with some personal stuff, and I wasn't sure how to tell you,\" I explained. \n\n\"You could have at least tried. You're the one that told me to talk you when I was going through things, and then you disappear. Slightly hypocritical, don't you think?\" she asked. \n\nI looked away, avoiding her accusing stare, \"You're right. It won't happen again. I promise.\" She looked at me for a few seconds, assessing my apology before accepting it. She graced me with her brilliant smile. \n\n\"It's okay, we all have our moments. I'm just glad that yours wasn't permanent. Anyway, I have so much to tell you. These last few days have been a whirlwind.\" Liv launched into a story of her ex-boyfriend somehow receiving messages from her phone, and how he embarrassed her at dinner. But her night was turned around by a pretty woman who offered her kindness. \n\n\"What's her name again?\" I asked, trying to be as nonchalant as I could. \n\n\"Racheal,\" she replied. \"And we planned to meet up this weekend. She knows the tow yard where my car was taken, and she insisted on helping me get it back,\" Liv said brightly as she locked up the shop. \n\nThat let me know what my weekend would consist of. I let her talk about how she felt close to Racheal, and how happy she was to make a new friend. I interjected with non-committed grunts every now and then, while cataloging all the information she provided. \n\nI decided to keep my story about Cherri to myself for the moment, I didn't want to derail Liv's focus. It didn't take long for me to realize that Racheal used her skills to extract information from Liv, while giving very little of her own. \n\nWhen I pulled up outside of Liv's house, I was met with a curious gaze, \"You're not coming inside?\" she asked. \n\n\"Not tonight,\" I smiled, \"I have a lot of work to take care of.\" I saw some of the spark die down in her eyes. I hated keeping secrets from her, but the less she knew, the better. I leaned over and kissed her goodnight before she reluctantly exited the car. I saw her in before driving off. \n\nI was parked down the street from Racheal's house early the next morning. I didn't have to wait long before she appeared, heading towards her car. She was on the phone, probably letting Liv know that she was on her way. I maintained a safe distance as I followed her through the city towards Liv's house. Seeing Liv emerge from her house, smiling excitedly, was a reminder to stay as close as possible. If Racheal decided to do anything to Liv, I would be there. \n\nSo, imagine my surprise when an hour later, we were actually approaching Ridge Valley Towing. I waited outside for about twenty minutes, until I saw Liv leaving, looking defeated. Shortly after, my phone buzzed, alerting me of an incoming call. A glance at the display let me know that it was Liv. \n\n\"Hey, Liv,\" I answered. \n\n\"Hi,\" she quietly responded. \n\n\"Something wrong?\" I asked, hearing the disappointment in her voice. She hesitated before answering. \n\n\"My car's been impounded. And after fees and charges, it'll cost me roughly $1,200 to retrieve it. Which is $1,200 more than I have to give at the moment,\" she mumbled. \"To top it all off, the impound lot is clear across the state,\" she finished, the frustration evident in her voice. \n\n\"I'm sorry, babe,\" I started, \"But don't worry, we'll figure this out. I promise,\" I assured her. I received an impassive grunt in response. She was close to the end of her rope, and I needed to figure out a way to improve her mood. Fast. \"Let me take you to dinner tonight,\" I offered, hoping to turn her day around. \n\nShe hesitated before answering, \"I already have plans tonight.\" \n\n\"With Racheal?\" I asked, doing my best to keep a neutral tone. \n\n\"Yes. I'm sorry,\" Liv sincerely apologized. \n\n\"It's cool,\" I told her, \"Just call me if you need anything.\" We ended the call. I couldn't be mad at Liv, but sometimes she was just too damned nice for her own good. I needed to end this. A.S.A.P. \n\nRACHEAL \n\nThis was just too easy. So much so, that I was becoming bored. Olivia was so damn gullible, and in desperate need of a friend. She never once questioned my sudden appearance and interest in being such a great friend to her. And now, she was in my car, complaining about her car and her life and blah, blah, blah. Having her car moved only took a brief phone call early this morning. And while I enjoyed watching her suffer, I was growing tired of listening to her talk about her problems. \n\nShe called someone as soon as we left the towing company. It was obvious that she was on the phone with Kenny, and her lack of mentioning my name made me wonder if she told Kenny about me. \n\n\"Was that your boyfriend?\" I inquired after she hung up the phone. Her brief pause before answering my question let me know that she was somewhat uncomfortable discussing her sexuality with me. \n\n\"No... Girlfriend,\" she slowly responded. \n\nI glanced at her, \"Like, a friend who's a girl, or a girlfriend?\" Her face turned crimson. It was kind of cute. Kind of. I smiled to try to put her at ease, \"It's okay, I like women too,\" I winked at her. \n\nShe visibly exhaled, \"Sorry, it's just you never know how people are going to react.\" \n\n\"No problem, I completely understand,\" I assured her. She droned on some more about her life, while saying very little about Kenny. I couldn't get her home fast enough. Before she got out of the car, I told her to make sure that she was dressed to impress and ready by 8:00 p.m. \n\nI knew exactly where I was going to take her. \n\nOLIVIA \n\nRacheal was so sweet. And thank God she didn't judge me; I wouldn't have been able to handle losing a friendship so early on. I did feel bad about not spending time with Kenny, but she seemed genuinely happy that I had made a new friend. I used the rest of the afternoon gathering all the necessary paperwork to retrieve my car. I would worry about the money another day. \n\nAs the evening approached, I showered and stood in my closet, trying to decide what to wear. I wasn't feeling the brightest, so I decided on a little black dress with a lace back and sleeves. I paired the dress with red, heeled sandals that buckled around the ankle, and a red clutch. I shook out my curls, and completed the look with a simple smoky eye and red lipstick. I was putting on my jewelry when Racheal let me know that she was on her way. I was curious to know where we were going. \n\nWe must have been going somewhere fancy, because Racheal looked amazing. She was wearing a gold, geometric print dress that had a deep, plunging neckline that showcased her cleavage perfectly. Her hair fell over her shoulders in loose waves, and her makeup was flawless. I climbed in the passenger seat, and we fell into easy conversation as she drove. \n\nAbout twenty minutes later, she pulled up in front of a nightclub called The Cherry Pit. I'd never heard of it, but I was usually up to trying new things. She valeted her car, and we were able to skip the line since Racheal knew the bouncer. \n\nUpon entry, it was like any other nightclub: loud music, flashing lights, and people on top of people. I felt her grab my hand, and pull me towards the bar. She ordered us drinks, and before I could reach in my purse to pay, she leaned over and shouted over the music, \"Don't worry about it, I know the bartender.\" \n\n\"Then I'm glad I know you,\" I yelled back while grinning. I reached for my drink, but instead, I was met with three shots of what I assumed was vodka. I turned to look at Racheal, confusion in my eyes. She returned my surprise with a smirk before throwing back her first shot. \"I don't think I can handle this,\" I tried. I wasn't a heavy drinker, and I didn't want to get sloppy. \n\n\"Come on! You've had a long day, you deserve to have fun,\" she encouraged me. I thought about it for a second. Fuck it. I kicked back the shots, and chased them with my drink, which consisted of twice the amount of liquor than mixer. As soon as we finished, Racheal pulled me to the dance floor. I fell in sync with the rhythm of the music, allowing the bass to flow through my body. \n\nIt didn't take long for the alcohol to hit me, filling me with a warm buzz. I felt a pair of hands take hold of my hips. I turned to refuse the dance, and was shocked to see a pretty, feminine face. The liquor slowed my response time, and she took that as an open invitation. She pulled me close, and began grinding her hips into mine. I clumsily pulled away, trying to decline her advances politely. \n\nI took that moment to look around, and noticed a significant amount of female faces. In fact, there were only female faces. As I kept looking, I noticed that some of them were paired off, engaging in intimate activities. I froze, panicked. Oh, shit. This is a lesbian club! While I had been dating a woman for a few months, I was in no way ready for this type of atmosphere. \n\nI frantically scanned the crowd for Racheal, but I didn't see her. I went back to the bar, hoping that she'd be there. When she wasn't, I decided to check the restroom. As I pushed through the crowd, I felt a hand grab hold of my wrist. I tried to pull away and keep walking, but whoever it was insisted on getting my attention. \n\nI turned impatiently, and felt a small flutter in my stomach. The woman holding my wrist was light skinned, with soft brown eyes, close cut, curly hair, and kissable lips that were upturned in a seductive smirk. Damn. \"Dance with me, beautiful,\" she said. \n\nAfter a moment of staring, I came to my senses, \"I'm sorry, I'm looking for someone,\" I said as I turned to leave. She wasn't so easily deterred. \n\n\"Come on, just one dance?\" she pleaded as she pulled me into her arms. \n\n\"I-I have a girlfriend,\" I tried. I needed to find Racheal. \n\n\"But she's not here,\" she replied. \n\n\"I really don't want to dance right now,\" I said. At that moment, a hand landed on her shoulder. We both turned to see Racheal glaring at the woman. Finally. \n\n\"She's with me, and she said no,\" Racheal declared. The woman eyed us both, before finally deciding it wasn't worth it. \n\nWhen she was out of earshot, I turned to Racheal, \"Oh, thank God. Where have you been?\" My anxiety was sky high. \n\nShe smiled as she gently placed a hand on my arm, \"I'm sorry, I saw someone I knew. Are you okay?\" she inquired, noticing that I was visibly shaken. \n\n\"I think so. But you didn't tell me this was a lesbian bar,\" I said, still trying to adjust to my surroundings. \"I'm kind of new to this, and I don't think I'm ready to be here, especially without my girlfriend,\" I explained. \n\n\"I'm sorry,\" she said sincerely, \"Come on.\" Racheal took my hand, and we made our way towards the exit. When we were safely in her car, and on our way to my house, she apologized once more. \"I didn't know that you would be uncomfortable. I should have asked you first. I was just trying to take your mind off of things,\" she offered. \n\n\"No, it's okay,\" I assured her. \"I shouldn't have spazzed out like that. I know you were just trying to be a good friend.\" \n\nAs she parked in front of my house, Racheal turned to look at me, \"Let me make it up to you. How about brunch tomorrow? Let's say 11:00 a.m.?\" she suggested. I agreed, and was happily looking forward to seeing her in the morning. \n\nThe next morning, I received a text from Kenny, asking if I wanted to meet for lunch. My heart sank at the thought of having to decline her invitation for the second day in a row. I promised myself that I would make it up to her later, and told her to meet me at my house around 3:00 p.m. I figured I would be done with Racheal by then. \n\nBrunch was filled with plenty of laughter and mimosa's. Many times throughout the meal, I thanked my lucky stars that she found me in the park. We finished up early, and Racheal suggested doing some shopping before taking me home. I eagerly agreed, since I had some time to kill before I was supposed to meet Kenny. \n\nWe got back in her car, and she headed north. I didn't pay much attention to my surroundings, but soon realized that we were outside of town and on the highway. I tried to not worry about it. About thirty minutes later, Racheal steered the car towards an outlet mall. I strolled around for a while, until I found a lingerie store. I decided to buy Kenny a gift to make up for the lost time. \n\nSuddenly, it was 2:30 p.m. I called Racheal to let her know that I had to be home by 3:00 p.m., but she didn't answer. I left a voicemail and sent a quick text trying to determine her location. Fifteen minutes later, she finally responded that she ready and in the car. I shot Kenny a text letting her know that I was running a little behind, but I would be home soon. \n\nUnfortunately, we ran into traffic on the way back into town. Racheal took the closest exit letting me know that she was going to use the back roads instead to save time. I checked the time and saw that it was already 3:30 p.m. That turned into 4:00 p.m. Which turned into 4:30 p.m. By the time I got home, it was 5:00 p.m. I was relieved to see Kenny's car still in the driveway. I thanked Racheal, and quickly went inside to find Kenny waiting for me in the living room. \n\nShe was reasonably irritated, and I did my best to apologize and explain what happened. I noticed her eyes darken at the mention of Racheal. I lifted the bag with her gift in hopes of changing the mood in the room. But, before I could tell her what was inside, her phone buzzed with an incoming message. \n\nShe opened it, and her eyes went wide before she fixed me with a withering gaze. I stopped cold, wondering what I could have done wrong. Her eyes were that color brown that scared the shit out of me. She stood and began slowly walking towards me.  \n\nKENDRA \n\n\"So, what did you do last night?\" I questioned. \n\n\"I-I was with Racheal. And she took me to a club. I-It ended up being a...\" Liv struggled to finish the sentence. \n\n\"A lesbian bar,\" I finished as I showed her the message that I received. Her mouth fell open as she stared at the picture. It was of her being held by some woman. Clearly, it was meant to look as if they shared a mutual attraction. She looked up at me, desperately trying to find the right words to say. I stood staring at her, arms crossed over my chest, waiting for her to explain. ",
        "Liv opened her mouth, but I spoke first, \"Who took the picture?\" Her face twisted up in confusion. I'm sure it was an odd question, but I wanted her to really think about it. Then, it hit her. \n\n\"You think Racheal did this, don't you? Why would she? And how would she even have your number?\" she shot off, the disbelief etched on her face. \n\nI closed her eyes and sighed deeply. I looked at her as I spoke, \"Racheal is my ex.\" She gaped at my confession. I continued, \"That day that I became distant, I was sure that I saw her outside of your house, so I did some digging. It turned out that her best friend was the judge for your traffic court case. \n\n\"Racheal gathers intelligence for the government, so it wouldn't have been difficult for her to interfere with our lives. I started following her, and eventually, she led me to you. I didn't say anything at first, because I wanted to be positive that it was her. She's sneaky and determined. If she wants to ruin someone's life, she'll do whatever it takes to get her way. Answer me this, when you were with that woman in the picture, was Racheal with you?\" I asked. \n\nThe look on her face answered my question. \"If that was her outside your house, she knows that we're together. Which would explain why she's been messing with you. Fortunately for me, I've kept in touch with a few people, so I just need to make a few calls,\" I finished. A range of emotions flashed across Liv's face. The final expression was that of anger. \n\n\"I should have told you, I'm sorry. I just wanted to fix it before it got any worse. I-,\" I rambled out an apology as quickly as I could. \n\nShe cut me off, shouting, \"I'm not mad at you. I'm pissed at myself. It's okay, though, I'll just call that bitch now and -.\" \n\n\"No,\" I stopped her, \"I've been thinking, and I may have a plan. Just, trust me, please?\" She paused, midway through calling Racheal. Liv looked at me for a moment, contemplating my proposal. \n\nI started to get nervous. Finally, she spoke, \"Fine. So, what do we do?\" I shared my idea with her, and as I continued to speak, Liv broke out in a broad grin. When I finished, she was brimming with excitement. \n\n\"You can call her whenever you're ready,\" I told her. She took a moment to get into character, and resumed making her phone call. \n\nShe waited a few seconds, until she received an answer, \"Hey, Racheal? It's Liv...\" \n\nThe following day started out as any other. By mid-morning, there was a knock at my door. I looked up to see the Director of Human Resources. He briefly informed me that based on my complaint, an investigation took place, and Cherri was relocated to another office. I thanked him as he left, and fought to remain neutral until he was gone. Today was going to be a good day. \n\nThat evening, I sat on Liv's couch, waiting patiently. Finally, I heard the front door open and close. The expression on her face when she saw me was almost as satisfying as knowing how this meeting would end. I smiled as I spoke, \"Hello, Racheal.\" \n\nShe quickly calmed herself before responding, \"Kenny. I knew you would find out, I just didn't think it would be so soon. What tipped you off?\" \n\n\"You got sloppy. You were always too cocky for your own good,\" I answered. I gestured toward the opposite end of the couch, offering her a seat. She slowly crossed the room, before choosing an armchair directly across from me. I smirked at her attempt to protect herself. \n\n\"Where's Olivia?\" she questioned. \n\n\"Don't worry, no one's going to assault you,\" I assured her. She eyed me with skepticism. I couldn't blame her; it wasn't as if she didn't deserve it. \"I'm here to give you a chance to walk away,\" I finished. \n\nA vicious smile spread across Racheal's face, \"Really, Kenny. I would think that you of all people would know me better than that. If anyone is going to walk away from this situation, it's not going to be me.\" \n\n\"So, your plan was to what? Make life hard for Liv, hoping that she would leave to make my life easier? Or, I would get tired of all her issues, and push her away? Leaving room for you to swoop in and unbreak my heart?\" I questioned. \n\n\"We're good together, and I know you know it too. If there happens to be some collateral damage, not my problem,\" she shrugged her shoulders. \n\nI shook my head. \"I know about you using Michelle to sit as the Judge for Liv's traffic court case, so I'm assuming you had something to do with her car being towed and impounded. I also know you sent us the text messages. And I bet it was you who called the Health Department falsely claiming Liv's cake shop had rats. Am I right?\" I looked Racheal in the eye. Once again, she displayed her smile full of malice. How did we last for four years? \n\n\"I can, and will, do whatever I need to do to make sure that you are mine. You and I belong together. I was only trying to give you two the opportunity to see that on your own, before I had to forcefully remove Olivia myself. You are still just as stubborn as I remember,\" Racheal said as she stood to leave. \"What has happened to your little Olivia up to this point is nothing compared to what I plan to do. Just know that you brought this on yourself,\" she finished. \n\nI watched her walk away. \"Just let it go, Racheal. Don't make this harder for yourself,\" I tried. \n\n\"You haven't seen hard,\" she laughed as she closed the door. I watched her drive away before I made a phone call. \n\n\"Hey, Kurt, it's Kenny... I'm good... Yeah, it's been a while ... Listen, I have something that I'm sure would be of value to you. Why don't we meet for a drink?\" I concluded the call, grabbed what I needed, and left for the bar. \n\nAfter my meeting with Kurt, I text Liv to let her know that it was done, and invited her to meet me at the bar for a celebratory drink. Liv walked in about 20 minutes later, and after she had her drink, I told her the good news. \n\n\"First,\" I started, \"Cherri was moved to a different location. Cheers to that,\" I held up my glass. She touched her glass to mine before we both took a sip. I continued on, \"The plan worked perfectly. I gave the video of Racheal's confession to her boss, and he's going to dig deeper into her recent activities. The consequences she'll face will be far worse than anything she planned for you. She is officially a non-factor,\" I smiled at Liv. \n\n\"Good. Because, I now know what she looks like. So, she can try it again if she wants to,\" Liv dared. \n\nI chuckled at her, \"Calm down, Warrior Princess. We don't have anything to worry about anymore. Therefore, I propose we focus on more important things,\" I said as I stood to leave. I took Liv's hand in mine, prompting her to follow. \n\nShe looked at me, puzzled, \"Like what?\" \n\n\"Like that bag I bet was full of lingerie that we didn't get to explore yesterday,\" I replied with a smirk. She graced me with her brilliant smile as we hurried out the door. \n\n\"Too bad you won't be able to enjoy any of it,\" she said as we walked to the car. \n\n\"Why not?\" I questioned. \n\n\"Because, I'm not supposed to be wearing any underwear,\" she winked as she got in the car. \n\nI couldn't drive home fast enough."
    ],
    "authorname": "RedVelvetRedbone",
    "tags": [
        "black lesbian",
        "lesbian",
        "black love",
        "orgasm",
        "strap-on",
        "ex-girlfriend",
        "fingering",
        "love",
        "romance"
    ],
    "category": "Lesbian Sex",
    "url": "https://www.literotica.com/s/the-claims-adjuster-pt-02"
}
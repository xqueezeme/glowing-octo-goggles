{
    "title": "The Reluctant Psychic Ch. 17",
    "pages": [
        "If you are new to my Reluctant Psychic series, please consider starting from the beginning. The story, characters and events in this chapter will make more sense when given context from the preceding chapters.\n\nIf you're returning, welcome back and I hope you enjoy the story.\n\n*\n\nAnna and I stared at each other, both at a loss for what to do. The only doors in the room led to my memories and my emotions. The former was a source of shame, and the latter something too disturbing to confront. Even if I did go through those doors, they didn't provide an exit. That only left the window.\n\nI looked out the window of Anna's room and my view of the girls was suddenly eveloped by a blinding light. The light seemed to warp my view of the girls and form a tunnel into the distance. I felt a sudden heaviness in my stomach as I realized I must be dying.\n\nI must have said something to that affect, since I felt a sudden slap on my shoulder and Anna said, \"You aren't dying, just watch for a minute.\" I rubbed my shoulder, a bit surprised to realize I could feel pain in what felt like a dream.\n\nI watched, and sure enough the light went away. There was a dark spot floating in space where the light had been. On the edge of the dark spot, I could make out what appeared to be a penlight. Soon the penlight disappeared once again behind the bright light. On either side of the light I could just make out Magda's face.\n\nI corrected myself, one of the images was Magda and the other was Katia. I couldn't tell them apart from their appearance, but my powers had no problem discerning the difference. Suddenly the shade was dropped and Anna pushed herself between me and the window. As the shade closed, my powers evaporated.\n\n\"How did you do that?\" I asked. But another question came to mind, \"How did you know about the flashlight?\"\n\n\"This isn't the first time you've passed out, you know,\" she said. \"Normally they don't do the whole flashlight thing, but now that you have a doctor in your h\u2014\" she stopped, reconsidering what she was going to say. \"Your home,\" she finally concluded, shrugging her shoulders.\n\nBefore I could say I wasn't aware of having flashlights being shined in my eyes, she said, \"as for the other thing. I hoped that it would work. Since you've been here the only time you've used your powers was when you looked out the window.\" She pushed me away from the window and said, \"now turn around, I want to hear what's going on.\"\n\nI walked sullenly over to the bed, sitting on the far side. I hear the shade being raised and the window being opened. Then I heard the girl's voices fill the room.\n\n\"This has happened before?\" a slightly anxious Katia said.\n\n\"It's happened a few times,\" Magda answered. By the way she said it, I could hear the lie. Apparently Katia heard the lie as well, since Magda quickly amended, \"It happens every couple of months. He doesn't do well with surprises.\"\n\n\"How long does it usually last?\"\n\n\"Usually only a couple of minutes, but once it took a whole day.\"\n\n\"What did the doctors say? Did they do a CT scan? An MRI?\"\n\nI heard Betsy's voice chime in, \"We didn't take him to the hospital, we were,\" she paused. I could guess the look she exchanged with the other girls before she finished, \"busy.\"\n\nI felt my gaze pulled towards the door to the hall. As I watched the hall door opened of its own accord and I felt the memory coming for me. That would have been the hand washing episode, when I'd lost control of my powers and thrown what amounted to a tantrum. I felt grateful that Katia didn't ask what had kept them too busy to call for an ambulance.\n\n\"Well, if he doesn't wake up soon, he'll need to go to the hospital for some tests. Even if he does wake up soon, he should go to the hospital for tests. A man his age, and with his health shouldn't pass out from a little surprise.\"\n\nThere was a long silence and Katia asked, \"What did she say? I still don't know much sign language.\"\n\n\"Tiff said that it was a big surprise. He thought we were all on the pill.\"\n\n\"Well, the pill isn't 100%, so with the amount of sex going on it's still a possibility,\" Katia said. The way she said it sounded odd. I turned back to the window, to try to see the expression on her face. But Anna must have anticipated the move since I felt her hands on either side of my head, directing it back to the far wall.\n\n\"Just pay attention. You might learn something so you don't have to rely on your powers so much.\"\n\nThere was a silence, finally broken by Gwen, \"He got snipped.\" The silence was almost palpable. The girls must have been starring at Gwen because she added, \"What? That's what he said when I asked him about the little scar. I cried the whole day when I found out what that meant.\" From the sound of things, she was crying again.\n\n\"So, he's had a vasectomy and he managed to get eight of you pregnant?\"\n\n\"Actually,\" I heard Susan pipe in, \"I think I might be pregnant too. I kind of feel it, even if it's too early for the test.\" This announcement was met by a soft murmur of excitement.\n\nKatia's voice cut through the whispered encouragements and asked, \"How does a man who's had a vasectomy father ten children? Maybe even eleven?\"\n\n\"That's what I'd like to know,\" Anna and I said in unison. I was secretly pleased to hear our voices mingle like that. But the pleasure quickly evaporated as Anna's hands on the sides of my head kept me from turning to see if it'd made her smile too. Then something else clicked in my head, \"Did she say ten?\"\n\n\"Shhhh... I'm trying to listen.\"\n\nThere wasn't much to listen to. The girls were all talking so quickly it was hard to make anything out. One thing that did become clear was that Gwen was the only one to have noticed the vasectomy scar, or at least to understand what it meant.\n\nI heard Gwen's humming. The humming seemed to be growing louder because one by one the girls stopped speaking. The room was silent except for Gwen's music for a minute before Betsy said, \"Gwen is there something else you want to tell us?\"\n\n\"Well, I was going to wait, but I really want to get a dog, one of those little ones with the floppy ears.\"\n\n\"No, Gwen is there something about the vasectomy, about being snipped?\"\n\n\"Oh! I asked him why he made it so he couldn't have any children. He said it was because he had crummy jeans he didn't want to pass on to his children and that if it weren't for that he'd love to have children. Then one day on TV I saw a show where a guy got unsnipped at the hospital,\" Gwen slowed to a stop. \"Did I do something bad?\"\n\nPoor Gwen, I thought. She saw the world through the eyes of a child, everything in such simple terms. But behind the seemingly vacuous gaze lay a mind as clever as any adult. I'd wondered why all of my jeans had disappeared after my appendectomy. I briefly wondered how Gwen had talked the surgeon into reversing my vasectomy when he did the appendectomy, but it didn't really matter.\n\nThe girls were all chattering again, but I didn't want to listen. \"Anna, could you please close the window.\" Apparently she was just as surprised by the latest revelation, since it took her a moment to register what I said. With a hasty, \"of course,\" she moved across the room, closing the window and lowering the blind.\n\nI laid down on the bed, turning my back on the window, and the confusing world that lay outside of it.\n\n* * *\n\nI don't know how long I lay there, curled up on my side. I was too stunned by the recent revelations to think, let alone face what seemed to be happening. After a time, I heard Anna open the window once again. The girls' voices intruded on the silence, but my mind was incapable of understanding anything they said. The ebb and flow of the mingled voices soon lulled me to a sort of half sleep.\n\nNightmarish flashes intruded on my thoughts. They arrived and disappeared so quickly that I couldn't even tell what they were about, only that they scared me to my very core. Each time I would become aware of my body, lying locked in sleep paralysis.\n\nA number of flashes went by, before I remembered that this wasn't really my body lying curled up on my side. Were these nightmares part of my dream of Anna's room? Was I finally going crazy, like my grandfather?\n\nEventually, the aftershock of the terror induced by the nightmare flashes subsided, and I could once again think rationally. As rational thought became dominate, my pulse slowed, my adrenalin ebbed and I would be lulled once again into the state between waking and sleeping. But the peace never lasted long before another nightmare would flash through my mind, starting the cycle again. The only thing that changed was that I became increasingly aware of the cycle itself, which in no way mollified the abject terror of each episode.\n\n* * *\n\nI was trapped in my dream body, a body that was paralyzed by sleep, when something changed. The world seemed to heave around, and I couldn't even reach out an arm to brace myself. I could feel my body resting heavily on the bed, but my other senses told me I was falling.\n\nA hand on my shoulder suddenly snapped me out of the nightmare cycle, and my hands instinctively grabbed the bed to brace against the spinning of the world.\n\n\"You were twitching again. I can't even imagine the nightmares you were having,\" I heard Anna's voice say. It wasn't the often angry voice that I usually heard in my head. It was the soft, loving voice I remembered from before, before I'd ruined her life and my own.\n\n\"You've been asleep for a long time. It's hardly surprising considering how little you've slept in the past few weeks.\" I rolled onto my back and looked up into Anna's face. She sat on the bed next to me, looking down with a mixture of compassion and something darker.\n\n\"What do you mean? I've been sleeping fine,\" I said.\n\n\"So having sex two or three times a night for the past month doesn't interfere with your sleep?\" She crossed her arms and the compassion quickly faded from her face.\n\n\"What are you talking about? I haven't been having sex two or three times a night.\" Anna was glaring at me fiercely and I amended, \"Sure I usually have sex before going to bed, but I certainly haven't been waking up to have more sex.\"\n\nShe continued to glare at me. \"You don't think I know when you have sex? I won't say my world gets rocked, but the lights dim, and a veritable flood of lust pours into the room.\" She stopped for a moment, and I was greatly disturbed by the look that crossed her face. Lust was a strong component of the expression, but there was anger as well. \"And I feel it. Every time you enter another woman, I feel it as if you were entering me. I could be sitting at my desk writing, when I suddenly feel a wave of lust and your cock entering my vagina, my mouth, or my ass. The closer you are to the woman, the more strongly I feel it.\"\n\n\"When you contented yourself with one-night stands, I hardly even noticed. But when you make love to the girls, it's like you are making love to me, especially the ones that have been with you the longest.\" She seemed almost ashamed, \"I feel so dirty.\"\n\nI tried to stammer an apology, but nothing seemed adequate. Had I been raping Anna all these years? I don't think I could live with that sort of shame. I tried again to express this, but Anna put a finger to my lips. \"Let me finish,\" she sad quietly, insistently. \"It doesn't feel like rape, at least not what I think rape would feel like. I feel dirty, because I want it. I want to take the girls' places, to actually be able to wrap my arms and legs around you. Then, when it's over, I'm alone again, thrown back into my own body. If this can be called a body,\" she said, gesturing to herself.\n\nShe sighed, the points of color on her cheeks slowly fading, \"But my point is, I know when you have sex: Two or three times every night, not including the nightcap.\"\n\n\"But I don't remember any of that,\" I said vehemently. But even as the words slipped out of me, I remembered waking up to find Linda having sex with me. \"Was I awake?\" I burst out.\n\n\"What do you mean were you awake?\" she asked.\n\n\"Was I awake for the two or three times during the night?\" I asked. She still looked incredulous, so I added, \"I woke up the other morning to find Linda having sex with me, or just finishing up.\" I thought back and added, \"and it's happened with Gwen as well.\"\n\n\"Are you suggesting that the girls have sex with you while you're asleep?\" she asked. After a moment, the look on my face must have convinced her, since she sighed and said, \"I guess it makes sense, since you were pretty lousy.\" She thought about it a moment longer, \"Now that you mention it, it did feel like I was,\" she blushed and stammered a correction, \"that the girls were just trying to make you come, rather than enjoying the act itself.\"\n\n\"Why would they do that? If I were asleep, it isn't like I'd be enjoying it, at least not consciously. And if they were just trying to make me come, they wouldn't be enjoying it.\"\n\n\"No, they enjoyed it, just not as much as usual,\" she said. She thought for another minute before saying, \"What if it has to do with your powers?\"\n\n\"You mean: I make them have sex with me because I dreamt about it?\" I asked. I really tried not to use my powers to take women against what would normally be their will. But, even though I tried to control the subconscious use of my powers, I wasn't perfect. Apparently, even unconscious my powers leaked.\n\n\"What did you say about using your powers unconsciously?\" she asked.\n\n\"I didn't. At least not out loud,\" I replied. She waved her hand as if whether I said it out loud or not was irrelevant. I responded by saying, \"I was just thinking, and I mean thinking, that maybe I made them do it unconsciously. I have always had a problem with my subconscious using my powers, what if I can do it unconsciously as well.\"\n\n\"You can definitely use your powers unconsciously. That's why the girls' part of the house is so far way, to help prevent your dreams from taking over theirs.\" Her face suddenly lit up, \"But what if that isn't enough?\"\n\n\"What do you mean? That they need to move to another house now? Or I do?\"\n\n\"No, what happens after you have sex?\"\n\n\"Well, generally a bit of cuddling, and a nap,\" I said, at a loss for where this was heading.\n\n\"No, you lose your powers. If the girls figured out that you have mental powers, then they are probably sharp enough to have figured out that you lose your powers after you have sex!\"\n\nI thought about that for a moment and blurted out, \"Katia!\"\n\n\"What's she got to do with this?\" Anna said, a bit peckishly.\n\n\"Every time I've been around Katia, I haven't had my powers. Every time I felt my powers coming back, something would happen and I'd have sex with one of the girls. Like during dinner her first night here. Heck, I couldn't use my powers at all the first day she was here.\"\n\nAnother light went off in my head, \"And the only reason I had my powers for the funeral was because I locked the door to my room.\" I looked at Anna, and remember that she'd warned me to lock the door. \"How did you know?\"\n\n\"I didn't. At least, I didn't know that they were preventing you from using your powers.\" She took a moment to gather her thoughts before saying, \"When you left the table to go find Betsy, it felt like the times you've had to deal with your grandfather. It spooked me, especially when you got up in the middle of the night to try to open the door.\"\n\n\"You don't think that there is someone else out there who has my powers, do you?\" I asked. \"I've never encountered anyone outside my family who has even a trace. Aside from my grandfather and my mom's Aunt Gretchen, both being locked in an asylum, I'm the last.\"\n\n\"Or at least you were,\" she said. She stood up and walked over to the window, opening the blinds to see out. \"They're taking you to the hospital.\"\n\n* * *\n\nAnna did not object this time as I joined her at the window. The paramedics allowed Betsy and Gwen to ride with them, since they were legally my daughters and Katia because she was my doctor. I could sense that the rest of the girls were following in a number of vehicles. As we travelled to the hospital, the paramedic took various readings, and although I could see him acting on what I knew was my body, I couldn't feel any of it.\n\nKatia spent the trip reassuring Betsy. She reminded Betsy that we were going to the best hospital in the world for neurological disorders. Betsy was well aware of this, since her donations and influence had brought it about. But in spite of that knowledge, she could only think that her real father had never woken up from his coma.\n\nWhen we got to the hospital, we skipped the emergency room and went directly to testing. Apparently it had all been arranged before the paramedics had been called to transfer me to the hospital. A few of the technicians inwardly grumbled about my special treatment, but were professional enough not to say anything. The doctors on the other hand were anxious to give me special treatment, since they felt they had let down Betsy, their benefactor.\n\nAs the tests progressed, I could tell the doctors were confused by the results.\n\n\"The EEG says that he's awake. If I didn't see his body lying perfectly still, I would say the EEG says he's up and walking around.\"\n\n\"The MRI shows activity in the motor centers as well.\"\n\n\"The patient's Basal Ganglia are incredibly overdeveloped. At first I thought it must be a tumor, but it seems to be a perfectly healthy development. Actually, his Amygdala is the size of a lemon, and incredibly active.\" The last comment was followed by the thought that the Amygdala's size would explain why there were twenty women waiting for the test results.\n\nThere were plenty of other comments, but the general consensus seemed to be that there was nothing wrong with my brain, and that I should be awake. Most of the doctors wanted to concentrate on the structural abnormalities.\n\nWhile the doctors were discussing my chart, a nurse came in. I vaguely recognized the man, which was hardly surprising considering the number of times I'd visited Betsy's father at this hospital. The man's handlebar mustache and longish hair belied the gentle way he approached me, and saw to my bedding and various machines I was now attached to.\n\nHe heard what the doctors were saying, and shook his head slightly. The man turned to the doctor, and just before he began to speak I recognized him. Not from my trips to visit Betsy's father, but before that, when I visited Anna. \"Is it possible this condition can be contagious, or hereditary?\"\n\nA couple of the doctors looked with scorn at a nurse presuming to tell them their job. But a couple of the doctors knew the man well. One of these asked, \"Why do you ask?\"\n\n\"You said all the tests seem to indicate that he's awake. There is another case down the hall that's very similar.\"\n\n\"There are plenty of cases that are similar,\" snapped one of the other doctors. \"But the abnormal Basal Ganglia is unique and must be the cause of the problem.\"\n\nI could see the nurse working to maintain control. I also could see he was about to reveal my connection to Anna. I wanted to stop him, but Anna put a hand on my arm, whispering, \"He's a good man, don't touch him with your powers. If you didn't resort to them so often consciously, you wouldn't use them so often subconsciously.\"\n\n\"I know this man,\" the nurse began again, only to get cut off.\n\n\"We all know this man. He's Elizabeth Haufman's guardian, and rumored to be the richest man in the state.\" And, the doctor quipped to himself: he seems to have more girlfriends than Hugh Hefner.\n\n\"Enough Richard, let the man speak,\" said Doctor Conners, one of the doctors who respected the nurse. I made a note to make sure the man got a raise or a promotion when I woke up.\n\n\"The patient down the hall, the one who has the same mysterious EEG, is this man's,\" he hesitated. He didn't actually know our relationship, only that I was legally responsible for her. \"Well, he's either related to her or married to her. Either way, he's listed as her next of kin, and I regularly had to roust him from her room when visiting hours were over.\"",
        "\"Well, genetics is certainly a possibility, although if memory serves, the girl presented as a teenager, and this patient is in his thirties. Contagion is also a possibility, although it would be an incredibly long incubation period,\" Dr. Conners said.\n\nThere was some more discussion, but it ended with Dr. Conners telling the nurse that I could have visitors. The doctors filed out, and soon the girls filed in. Even without my powers, I could see all too clearly the concern on their faces, but with my powers it was agonizing. I turned away from the window, and gratefully, as before, my powers shut off when I stopped looking out the window.\n\nI sat down on the bed, with my back against the headboard and my legs stretched out in front of me. I kept my head turned away from the window until I heard Anna draw the blinds again. She came over and sat cross-legged at the foot of the bed, her knees scant inches from my feet.\n\nAs I looked at her, the unreality of the situation hit home once more. She was just as beautiful as I remembered, more beautiful if that was possible. She was the sum total of everything I ever wanted in a woman, plus all the things that I never knew I needed. My eyes began to tear, and I felt both doors swing open, flooding me with memories and emotions I hadn't faced in years.\n\n* * *\n\nIt happened during winter break my sophomore year of college.\n\nThe year before, I had made the mistake of going home for the holidays. I'd thought that I could hang out with my high school friends, and not have to be alone. But they had all changed, and we'd grown apart. I also couldn't take the pity: every time they looked at me I could see them thinking about my dead parents. We were all uncomfortable, so I returned to school before New Years, switching off the TV in my dorm room an hour before the ball dropped.\n\nBut my sophomore year had been much better. Once I stopped moping around, I started making friends. I was no longer the guy who'd lost his parents; most of my friends didn't even know what happened. Before my friends left for Christmas, we all made plans to have a giant New Year's party back at school.\n\nUnfortunately, a blizzard hit two days before hand, followed by a second squall the day after. The roads were impassible, the power lines were down, and the entire school was closed. The school's administrators shoved those of us who hadn't gone home for break into the smallest dormitory. Even with a dozen generators, they could barely keep the temperature above sixty and they definitely couldn't spare electricity for lights.\n\nMost of us were huddled together in one of the common rooms, playing cards by candlelight. Some people were walking around with blankets wrapped around them and the others were resigned to wearing their jackets indoors. I had just given up trying to learn cribbage from a thoroughly sloshed English student, when I felt it. I looked around the dark cramped room, and knew I needed to leave.\n\nI zipped up my jacket, grabbed my hat and hurried down the dark hallway to the lobby. I pushed through the doors to the outside and immediately felt the slap of cold air. The sharp cold immediately broke through the ennui that had been growing inside of me. As my boots crunched in the snow, I was amazed to see how bright it was outside. The further I walked, the brighter it became, as the moon drifted higher in the sky.\n\nI found that I was walking directly toward the student center. I tended to avoid the student center at this time of year, because the giant Christmas tree out front tore at my heart. My mother had always loved Christmas, and facing it without her hurt too much. But, in spite of my feelings, I felt inexorably drawn forward.\n\nThe tree was unlit and heavily covered by snow. As I crunched closer to the tree, I saw that a ring of snow had been stomped flat. I also heard a voice singing, \"Fah Who, For-aze, Dah Who, Dor-Aze.\" My face scrunched up at the oddity of hearing the song from the \"Grinch who Stole Christmas.\" I started walking around the tree, trying to find who was singing.\n\nThe singer must have been circling the tree as well, since she was still on the opposite side of the tree when I'd made it halfway around. I stopped and heard that the voice was still singing and travelling around the tree. Eventually I saw an overstuffed parka come twirling around the tree. I couldn't tell if the girl was so tightly bundled that she couldn't drop her arms, or if she just enjoyed spinning with her arms out.\n\nBecause her hood was drawn so tightly, she didn't notice me until she nearly spun into me. She stopped abruptly when she did, and cut her singing off mid-note. I could barely make out a bright red nose, clear blue eyes, and wisps of blonde hair peeking through the hood. I can only imagine what she saw on my face, but she said, \"Merry Christmas, Mr. Grinch,\" before bursting into laughter.\n\n\"It's nearly New Year's, not Christmas,\" I said.\n\n\"But you don't mind being called a Grinch?\" she asked.\n\n\"I'm more the Ebenezer Scrooge sort, I don't want to steal Christmas, it's just not my thing,\" I said. Then I added quietly, \"any more.\" Before she could say anything else, I asked, \"What are you doing out here? It's freezing.\"\n\n\"I could ask you the same thing,\" she said. \"But to answer your question, I'm just having fun, being silly. Don't you ever want to be silly?\" Before I could answer, she continued, \"I know it's not Christmas anymore, but the tree is still here, so it can be Christmas just a little bit longer.\"\n\nI sensed, as much as saw a shiver run through her. A bad memory had surfaced in her mind. I quickly withdrew my thoughts from her mind, feeling dirty for having invaded her so. But even without reading her thoughts, I could tell she was in a fragile state, so I blurted out the first thing that came to mind, \"Why not Jingle Bells?\"\n\n\"Because Christmas doesn't have to make sense,\" she said. \"It isn't about going places, or presents, it's about good cheer, and glad tidings.\"\n\n\"And family, and friends,\" I added to her list. It seemed natural, even if this particular year, I was sorely lacking in both.\n\n\"They help,\" she said, a bit hollowly. She pulled in her arms as if she suddenly started feeling the cold. I realized in a flash that she was as alone this holiday season as I was.\n\n\"None of my friends stuck around for Christmas either,\" I said. \"I can't blame them, I'd go home too if\u2014\" I looked at the mysterious girl, all bundled up against the cold. I wanted to tell her, but I just couldn't open myself in such a way to a stranger.\n\n\"Too far away?\" she asked, going with the more obvious and least painful choice.\n\n\"More like too long ago,\" I said. \"All my friends changed their first semester away at college, and things just weren't the same.\"\n\n\"And your family?\" she asked. She looked at me earnestly, and at some point had taken a step closer to me. As she spoke, the fog from her breath briefly bridged the gap between us.\n\n\"If I asked about your family, I think you would dodge my question, as I'm dodging yours,\" I said.\n\n\"I suppose I shouldn't pry. But, I like to know what people are thinking,\" she said. She looked up at me, and I felt myself falling into her clear blue eyes. \"Especially what could turn a handsome young man into Ebenezer the Grinch.\"\n\n\"You would probably be disappointed to know what most people are thinking,\" I said, with more truth than she could possibly understand. \"But prying isn't so bad. It can lead to a very healthy catharsis.\"\n\n\"Are you a psychology major too?\" she asked.\n\n\"It kind of runs in the family,\" I replied.\n\n\"I thought you were dodging questions about your family?\"\n\n\"That wasn't a question about my family,\" I said. She was looking at me so intensely that I felt compelled to say, \"My parent's were both psychologists.\" She kept looking at me, not voicing the obvious question, \"Were?\" So I added, \"My father was killed by a patient, and my mother died a week later.\"\n\n\"She was also attacked?\" she asked. She was a step closer. So close that she could have wrapped her arms around me, if she chose.\n\n\"No, she died\u2014\" I could hardly believe I was going to say it. Even after more than a year, it sounded corny. Worse, it sounded like a lie. That I made it up so I wouldn't have to say she took her own life. But she hadn't taken her life, she had died the same day as my father, it just took her body a week to realize it. \"She died of a broken heart.\"\n\nI felt her mitten against my cheek. She pulled it away, and held it in front of me. It glistened slightly from the tear she'd wiped away. \"I didn't mean to be so cathartic,\" she said. I could hear the regret in her voice, but there was more sadness. The sadness wasn't from my story but from her story. I watched her as she considered the freezing tear on her mitten.\n\nShe caught me staring at her, and said, \"You seemed to have already guessed that my parents are dead as well. It was a car accident when I was ten. We were on our way home from visiting my grandmother for Christmas,\" she shrugged. The shrug said all the things that she couldn't say out loud. \"I lived with my grandmother after that. She hung on long enough to get me to college, but her mind can no longer take the loss of her daughter.\"\n\n\"The same thing happened to my grandfather when his wife was\u2014\" I didn't want to seem too dramatic with all my relatives meeting violent ends, so I concluded simply, \"died.\"\n\n\"Another death by broken heart?\" she asked, as much to distract herself from the feelings thrashing inside of her.\n\n\"No, he's in the Met,\" I said, referring to the Metzger Memorial Psychiatric Hospital.\n\n\"So it really does run in the family,\" she said. It was a poor joke, but enough of one to break the melancholy atmosphere that had developed.\n\n\"Well, I'm not the one dancing around a Christmas tree singing a song from a Christmas movie,\" I said, then added, \"On New Year's Eve.\"\n\n\"You should try it Mr. Grinch.\" She looked up at me, and I felt a jolt shoot through my body. It was like a giant bass drum was causing my insides to vibrate. She added very quietly, \"Maybe your heart will grow two sizes this day.\"\n\nI leaned down to kiss her, but the fur surrounding the opening to her hood stymied me. I couldn't even see her lips. My nose managed to pierce the confines of her hood, and for a brief moment our noses rubbed against each other. Her eyes grew wide, and I knew she felt the same spark that I did.\n\nHer mittened hand grasped my gloved hand and she pulled me along as she started backwards. \"You should try it,\" she said giving my hand a squeeze. Then she started singing again. I looked around, as if anyone would be outside to see us. She led me halfway around the tree, singing the whole time, before I tentatively joined in.\n\nWe circled the tree a half dozen times before heading back to the dorm, singing the entire way. She didn't let go of my hand until we were all the way back to her temporary dorm room, and then just long enough to remove out mittens, gloves and jackets.\n\nWe sat together the whole night, talking and laughing. We kissed briefly when our eyes grew too tired to stay open any longer. She drifted off to sleep lying against me. I fell asleep as well, pulling the thick comforter around us both.\n\nI was half awake, in the close heavy air of our shared cocoon, when I felt her lips seek mine once again. There was a brief moment of intense passion that threatened to wake me fully. But before the kiss was over, I was asleep once more. I didn't even know if she awoke at all.\n\n* * *\n\n\"My jacket didn't look that silly, did it?\" Anna asked. I was once more back in the present, as if being trapped in Anna's college dorm room was really the present.\n\n\"You saw all of that?\" I asked.\n\n\"Yes,\" she said. I hoped that she'd say something else, but she lapsed into silence, alone with her thoughts.\n\nThe silence grew too uncomfortable for me, but I was unwilling to break it by speaking. Instead, I stood up and walked to the window. I slowly lifted the blinds, and looked outside. Only six of the girls were present, three standing on either side of the bed. They were talking to me, and each other, making the half-hearted jokes that keep a person from facing a tragedy directly.\n\n\"I wish they wouldn't stand three to a side like that. They look like pall-bearers.\"\n\n\"They are too young and beautiful to be pall-bearers,\" Anna said from the bed. I turned by back on the window, and sat down on the sill. She had come to some decision: I could see it in her face. \"I think I know why you're here.\"\n\n\"Because I'm dying?\" I asked.\n\n\"It has nothing to do with the pall-bearers; it has to do with you and me. I know you have never forgiven yourself for what you did to me. It is especially hard when the person you hurt can't grant you that forgiveness. So, you've tried to atone. When that atonement failed, spectacularly I might add, it was too much for your psyche.\"\n\n\"Can't forgive me, or won't?\" I asked.\n\n\"If I said, 'I forgive you,' would you believe me? Could you believe that it was the real Anna speaking and not a delusion or a coping mechanism?\"\n\n\"No, I don't suppose I could,\" I said. I thought for a minute and added, \"So, I have to forgive myself for failing to atone for the mistake I made?\"\n\n\"Either that or find your ruby slippers.\"\n\n\"But, I've just fathered a dozen monsters!\"\n\n\"They aren't monsters! You aren't a monster. You are a human being with powers he didn't understand. They will be human beings who do understand their powers. They will have a father, who can make sure they don't make his mistakes, and mothers who are beautiful and generous spirits.\"\n\nI shook my head, doubtful that the solution could be so trivial. \"So, instead of ensuring there are no more people in the world like me, I should just be sure to raise them properly? It's that simple?\"\n\n\"Raising children isn't simple. But just think of all the good they could do in the world? How much good you've done in the world?\"\n\n\"I put a few criminals behind bars. That hardly evens the tally sheet compared to the harm I've caused.\"\n\n\"What about Bambi? How long do you think she could have lasted in that strip club before she lost her virtue, or had it taken? What about Gwen? Do you think she would enjoy life as a sex slave? Do you think Betsy would have enjoyed the foster care system? Do you think Stefani would even be alive?\"\n\n\"What about you?\" I asked.\n\n\"What's one life against a dozen?\" she asked.\n\n\"Everything,\" I said. Before she could respond, I added, \"But I meant, what about your part in all of that? I couldn't have done half of that without your guidance. I might have conquered half the world by now, if you hadn't have been my conscience.\"\n\n\"Then listen to your conscience. Go back to your girls, they need you. Raise your sons and daughters to be strong of body and conscience.\"\n\n\"What about you?\" I asked as I started to feel the room fading away.\n\n\"Do me a favor,\" she said. I saw tears forming in her eyes as she spoke. I tried to reach out to her, but I was fading too quickly.\n\n\"Anything,\" I said.\n\n\"Anything?\" she asked.\n\n\"Anything, I promise.\"\n\n\"Turn off the machines, let me die.\"\n\n\"I ca\u2014\" I tried to say no. I desperately wanted to say no. But, I couldn't refuse, no matter how much it hurt. I drifted closer to her, seeking to hold her in my arms one last time. My arms passed right through her. She reached a hand up, stroking what would have been my cheek. \"I promise,\" I said as the room filled with white.\n\n\"I forgive you,\" I heard as the white light consumed me.\n\n* * *\n\nI hope you enjoyed reading this installment as much as I enjoyed writing it.\n\nAs always, I appreciate your votes and comments, they have really helped motivate me to write. I especially enjoy hearing your thoughts on how the story is going and where it's headed. "
    ],
    "authorname": "only_more_so",
    "tags": [
        "no-sex",
        "christmas",
        "pregnancy",
        "mind control novella"
    ],
    "category": "Mind Control",
    "url": "https://www.literotica.com/s/the-reluctant-psychic-ch-17"
}
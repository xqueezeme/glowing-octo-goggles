{
    "title": "The State Amateur Pt. 02",
    "pages": [
        "I couldn't believe that I had just walked into my house bare ass naked! i was pissed at Josh for \"making\" me do that. (But actually I would have done it for him without complaining a bit, even though now it was terrifying to me! What if someone had seen me?)\n\nI was standing in the living room, just inside the front door, bare ass but for my shoes and so very turned on! And I thought of going upstairs to dress but then thought, Rob will be home soon. And I can meet him naked! I wondered if he would notice my freshly shaved cunt? I reached up and gently touched a nipple and gasped. God were they sensitive and erect! I took some time to stroke them with both hands, starting to pant with desire and forced myself to stop it, but one hand slid down my belly to my pussy, no my cunt. I gasped again, I was wet and tingling. I rubbed my cunt lips gently, my breath hissing into my mouth. I couldn't wait for Rob to get home.\n\nIt wasn't much longer and thankfully I had managed to stop feeling myself by then. Rob walked in from the garage and stopped, staring at me, at his bare ass naked wife.\n\n\"Jesus Christ Beth, what is going on with you?\"\n\n\"I'm just really horny honey. Don't you like me like this?\"\n\n\"Well yeah, I do, but it isn't like you at all Beth. Are you sure that you are all right?\"\n\nI lied to my husband. I wasn't all right but I told him that I was. Josh had turned me into a raving nymphomaniac. I wanted to be naked, I wanted to be fucked.\n\n\"Rob let's get pizza for tonight, with the tournament and all I haven't had time for dinner.\"\n\n\"OK honey, I'll order it. The usual?\"\n\n\"Thats fine Rob.\"\n\nI followed my husband to the phone and as he began to dial, I dropped to my knees in front of him, unzipped his pants and fished out his dick. He stared down at me as I opened my mouth and slid his dick inside it. Not like me at all, I didn't like sucking dick.\n\n\"Jesus Beth, what is going on with you?\"\n\nI let his stiffening dick out of my mouth.\n\n\"Just order Rob.\"\n\nAnd I stuffed his dick back in my mouth, sucking him, listening to him order the pizza. Rob hung up the phone and stared down at his naked wife while she sucked on him. I ignored him concentrating on sucking until his dick was stiff as a baseball bat. Then I looked up, took his dick out of her mouth and smiled at him.\n\n\"You need to fuck your slut Rob, wherever you want in the house. Stick that big hard cock of yours in her and fuck your wife's ass off, please. Treat her like the slut she is.\"\n\nRob stared at Beth for a few moments. Maybe she had gone too far. Then he reached down, grabbed one of her arms and pulled her up.\n\n\"So you want to get fucked you dirty fucking bitch? Anywhere I want?\"\n\nHe dragged Beth into the living room and pushed her up on the window cushion. Last night she had just been kneeling on the floor with her hands on the cushion. Tonight she was kneeling on the cushion, the bay window framing her naked body, her tits hanging down, face in plain view, her entire body in plain view. Rob didn't even touch her pussy to see if she was wet. He just pushed his stiff cock inside her and she was certainly wet enough. She gasped as she felt the stiff meat sliding inside her.\n\n\"You want me to fuck your ass off?\"\n\nRob was pumping me hard. I could hear slapping sounds as his hips hit my ass. My tits were bouncing wildly under my chest. Oh God it felt heavenly!\n\n\"Oh God yes, Rob, fuck your sluts cunt hard! But don't cum yet, Rob, save it for me, please.\"\n\nI stared out the front window, hoping that no one would walk by but also hoping that someone would. That someone would see me being a total slut, a whore. Rob slammed right up inside me, deep as he could go.\n\n\"OK bitch, squeeze those twat muscles on my cock.\"\n\nI moaned and began doing kegels, squeezing and relaxing my pussy on his dick. Rob reached out and grapped my hair, pulling up and back, wrenching my head up so my face was staring out the window. With his other hand he reached under me and grasped a tit, lifting and squeezing it, then letting go of it so it swung down, back and forth. Then he slapped my bare ass. Hard!\n\n\"Come on bitch, squeeze.\"\n\nI clenched my pussy harder.\n\n\"That was great honey, slap my slut ass some more.\"\n\nAnd Rob started slapping my ass furiously. One cheek then the other. Until I squealed and said...\n\n\"Ah God Rob, no more, please, no more. Take it out so you don't come yet, please.\"\n\nRob was confused but he was a good husband and withdrew. I swiveled around, fell on my knees again, my reddened, hot ass in the air and sucked him into my mouth again. I sucked and licked his stiff cock clean and then sat back up, wincing as my hot ass touched my heels.\n\n\"Beth, what the fuck is going on with you?\"\n\n\"Nothing.\"\n\n\"You're lying to me Beth and I am going to find out what the hell is going on, even if I have to take my belt to your ass. And if you don't tell me, you are going to regret it Beth. That I promise you.\"\n\n\"There is nothing going on, Rob.\"\n\n\"Don't lie to me Beth. This time I mean it.\"\n\nI looked at Rob and realized that I wasn't going to get away with anything.\n\n\"All right Rob, I'll tell you after dinner. But you have to do something for me first.\"\n\n\"What?\"\n\n\"Make me get the pizza Rob.\"\n\n\"What?\"\n\n\"Make me get the pizza, just like this, Rob. Just like this.\"\n\nRob just stared at her, shocked. I knelt up, cupped my tits in my hands, lifting them up. I rubbed my thumbs over my erect nipples.\n\n\"Just like this Rob, just like this. Make your wife get the pizza bare ass naked. Tell me if I refuse you're going to beat my ass red. Tell me just like that Rob, tell me to get the pizza bare ass naked. Tell your dumb cunt wife to do it!\"\n\nRob stood up, stared at Beth again, put his stiff dick back in his pants and walked away from her. Then he turned back to her.\n\n\"If I tell you to get the pizza naked, you'll do it? And then you will tell me what the hell is going on?\"\n\nI looked down and in a timid voice...\n\n\"Yes, just promise me you won't hate me Rob, promise me that, please. Promise me that and I will tell you everything.\"\n\n\"I don't know what it is, so I can't make that promise Beth, but you will get the pizza bare ass and I hope that you are so embarrassed it will change your attitude.\"\n\nSo I knelt on the living room carpet, bare ass and Rob sat on the couch, both waiting. The doorbell rang.\n\n\"Well, Beth, here you go. Get the fucking pizza.\"\n\nI stood up and looked at him.\n\n\"I want you to do something else honey. I'll ask you for the money. Get it out and then drop it on the floor so I have to bend over to get it. I want the delivery guy to see my cunt and asshole and I am going to give him a good look at it.\"\n\nRob just shook his head and I walked to the door.\n\n\"This is going to humiliate me so much Rob and also turn me on so much it isn't funny.\"\n\nThen I turned back to the door and opened it. The delivery guy was a kid from down the block. I whimpered but stood in the doorway, not covering up at all. He looked me up and down, smirking. Rob just snorted as he looked at his wife, his conservative wife, standing naked in the front door with a teen age kid staring at her naked body.\n\n\"The pizza?\"\n\n\"Oh, yeah, Mrs. Johnson.\"\n\nThe kid got out the pizza from the hot bag and extended it to me. I took it and turned and walked to the coffee table and set it down.\n\n\"Rob, the money?\"\n\nHe started and took out his wallet, pulled out a twenty and a ten and sucked in a breath. Then he dropped the two bills on the carpet. I gave him a nervous smile, walked past him, turned to face him and away from the kid, moved my feet apart and bent over at the waist. I held that pose, slowly picked up the bills and still stayed bent over. making sure the kid got a complete look at everything I have. Then I slowly straightened up and walked to the kid, held out the bills to him. The kid had such a huge smirk on his face I had to..\n\n\"Go ahead and say it.\"\n\n\"Nice tits, nice pussy Mrs. Johnson.\"\n\nMy face had been red before but now it got even redder. But I was made of sterner stuff than I had realized. I gave him a small smile.\n\n\"Thank you.\"\n\nI slowly shut the door and turned back to Rob.\n\n\"Take your cock out honey.\"\n\n\"Tell me what the fuck is wrong with you Beth.\"\n\n\"After dinner Rob, but right now get your cock out. Then sit on the couch.\"\n\nRob growled to himself but did as she asked. I moved over to him, grasped his cock, pointed it up and impaled myself on it, then reached over and opened the pizza box.\n\n\"You can fuck your bitch, your dumb cunt, Rob, while you eat and afterwards I will tell you. You can cum now too, honey. Don't worry about satisfying me.\"\n\nSo, they sat, me naked and impaled, Rob, clothed and steaming hot. And they ate and I worked my pussy muscles until Rob shot off inside me. He stayed half hard. When they had finished, I got off him and knelt, sucking him clean. Then I sat across from Rob in an arm chair, ass at the edge, legs over the chair arms, wide open, semen oozing out of me. And I told him everything. When I finished...\n\n\"That little fuck!\"\n\n\"It isn't his fault Rob, it's mine. I could have refused and nothing would have happened. I know because I begged him to fuck me and he wouldn't. Oh he sure enjoyed getting me naked but he didn't take advantage of me, Rob. I was humiliated and embarrassed but I also found out it was a total turn on for me. I want the whole thing to continue from now on. With you and if you can allow it, with him too. Except I will be fucking you and he won't be fucking me. I want you to show me off too, Rob. To the guys at work if you want, whoever you want. I want to hear you tell me to strip, in front of anyone you choose, anywhere, anytime. I want to hear you tell me to show my cunt to people, call me a bitch, slut, dumb cunt. I want that from you too, honey. But I don't want you to take it out on Josh. Because he found out for us what a slut I can be, your slut, if you want me to be your slut.\"\n\n\"I have to think about this Beth.\"\n\n\"I understand Rob. Josh will be here tomorrow for a practice round. Don't be angry with him. Think about what everything can be like with us from now on. You know how I hated sucking you? Did you notice that I didn't hold back on that today? All because Josh got me so turned on when we were out. Think on that honey.\"\n\nRob went to his home office and I gave him space. I knew that he needed to think all this over. I hoped that he wouldn't still be angry with me, that this wouldn't break up our marraige, but I had gotten it all out and I was determined to keep Rob anyway I could.\n\nI was upstairs in their bedroom when Rob came up, I was still bare ass naked. \n\n\"I washed up honey and if you want, I can suck you hard again and you can fuck your cunt again.\"\n\nRob shook his head.\n\n\"Get undressed honey and let me make you feel good, please.\"\n\nHe undressed and laid down on the bed and to his surprise, I knelt next to him and as I had said I began sucking his cock again. Without him taking a shower, with cum on his dick. As soon as he was hard once more, I knelt over him, fit his cock at my hole and slowly slid down until he was buried deep inside.\n\n\"Just lay there honey and let me do you. It you want, play with my tits.\"\n\nHe watched his totally different wife as she fucked him, her face above his, her tits swaying back and forth and her tight warm pussy clenching on his cock.\n\n\"Um, Rob, if you want we can get some toys and stuff. Dildoes, handcuffs, stuff like that. If you want. I'm yours, Rob, totally yours. I'll do whatever you want me to do. Just one thing for me, Rob, show me off as much as you can, please. Humiliate me, embarrass me.\"\n\nThen he felt her shudder and she got tighter, panting, still pumping her ass up and down on him. When her orgasm finished she kept pumping her ass until he came in her again. And then...\n\n\"Rob if you want my ass sometime, that is fine too. Well, I'll at least try it, don't know if I can do it, but I'll sure try.\"\n\nRob looked at her disbelieving.\n\n\"Where is Beth and what have you done with her?\"\n\nI just smiled at him.\n\n\"It's the new me, Rob. Enjoy me.\"\n\nThey went to sleep. Both of them nude. Always before Beth had to put on a nightgown. Not tonight. Tonight she slept nude, her warm body, smooth silky skin pressed up against him.\n\nThe next morning they got up and Beth was going to stay naked but Rob made her get dressed. And he didn't go to work. They waited for Josh. And he was so surprised to see Rob there. Rob had him sit down and there was silence for a few moments.\n\n\"Beth told me everything Josh.\"\n\n\"Ah, God.\"\n\n\"Yeah, ah God is right.\"\n\n\"Do you want me to leave?\"\n\n\"Yes and no, Josh. Now that I know, are you still going to tell her no fucking?\"\n\n\"Yes sir. I won't fuck her.\"\n\n\"OK, what will you do?\"\n\n\"Well, what is all right with you?\"\n\n\"Well, if I said you can use her mouth, will that be good enough? Because if I find you that you fucked her I might be tempted to kill you.\"\n\n\"Shit. I won't even use her mouth sir. Yesterday I just rubbed in her ass crack and then jacked off in her face.\"\n\n\"Can I trust you?\"\n\n\"I promise you can, sir.\"\n\n\"Stay here.\"\n\nRob got up and walked out to the kitchen.\n\n\"Why did you tell him?\"\n\n\"Because he was going to swat my ass until I did, Josh.\n\n\"Fuck.\"\n\nRob walked back into the living room, looking at the two of them. The silence in the room was deafening.\n\n\"Beth, stand up.\"\n\nShe did.\n\n\"Strip her.\"\n\n\"Sir?\"\n\n\"Strip her, take her fucking clothes off, everything she has on.\"\n\nJosh nervously got up and walked up to Beth, then he turned to Rob.\n\n\"Are you sure sir?\"\n\n\"No, but strip her anyway. Just a minute.\"\n\nRob left again and came back with a pair of scissors.\n\n\"Cut her fucking clothes off of her.\"\n\nAnd Josh did just that, shredding a $200 outfit, leaving Beth in a pair of low heels.\n\n\"Now, you can feel the cunt's tits if you want.\"\n\n\"Sir, are you sure about this?\"\n\n\"Look, don't look a gift horse in the mouth.\"\n\nAnd Josh took Beth's tits in his hands squeezing and hefting them, rubbing his thumbs over her nipples, listening to her whimper. Then he looked at Rob.\n\n\"Go ahead and sit down Josh. Beth get on your hands and knees and back up to him.\"\n\nThey both did as he said. Rob took a deep breath. He looked at his nude wife and the young man.\n\n\"Finger fuck her.\"\n\nJosh didn't ask if he was sure this time, he just stuck a finger, then two right up her cunt. He thrust them in and out of her hole and she began to pant and push back against his hand.\n\n\"Do you feel like a slut, Beth?\"\n\n\"Y-y-yes.\"\n\n\"Are you feeling a little bit humiliated and embarrassed?\"\n\n\"Oh yes, yes, yes.\"\n\n\"Josh, stick a finger up her ass.\"\n\nJosh looked at Rob and did as he said. Beth gasped and wriggled her ass as he did.\n\n\"Feel like a dumb cunt now Beth?\"\n\n\"Y-y-yes.\"\n\n\"Well Josh, since you've seen everything the cunt has, I have to get to work. Make the stupid cow cum and then, Beth do you want to suck him off?\"\n\n\"Y-y-yes.\"\n\n\"OK Josh she can blow you today after you get her off. But cum in the cunt's mouth and have her swallow it. Play with her tits while she's sucking, keep her good and horny. She doesn't get to wear a bra or panties today either. Maybe never again. And get her bare ass as much as you want today Josh. Enjoy yourself with her, just no fucking, got it?\"\n\n\"Yes sir, got it.\"\n\nJust then I exploded in an tremendous orgasm, squealing and yowling, my ass pumping on Josh's hand.\n\n\"Get busy cunt.\"\n\nI turned and began to unzip Josh as Rob walked out. I reached into his pants and fished out his cock and my mouth latched onto him, sucking like mad.\n\nJosh just stared down at the naked housewife who was suckiing his cock. It was fucking unbelievable. Yeah he had seen her naked a lot before this but never like this, mostly because he had told her no. But now she was a sucking machine. It felt really good and he was thinking how lucky he was. Beth looked up at him and took her mouth off his cock.\n\n\"Just one thing, just for me Josh. One thing and I won't ever ask for anything again. I'm going to turn around and I want to feel your cock inside me. Just push it all the way in and then take it out and I'll finish you off with my mouth, but I need to feel it at least once inside me.\"\n\nBeth turned around, her ass facing Josh, on her hands and knees.\n\n\"I promised I wouldn't do this.\"\n\n\"I don't give a shit. Stick that hard cock up inside me now!\"\n\nJosh's little head took over and he slipped off the couch, knelt behind the naked Beth and slowly rubbed his cock head up and down her cunt lips. She gasped and then...he pushed the tip in and stopped.\n\n\"Mrs. Johnson, I can't..\"\n\nAnd my hips slid back, sheathing him fully inside my cunt. I moaned softly. I was so tight, wet, warm and clenching on Josh's cock. I held him right up inside me and clenched my muscles on him, squeezing.\n\n\"God, your cock feels so good!\"\n\n\"Shit!\"\n\nJosh pulled out making me moan and I felt him shoot all over my ass and lower back.\n\n\"Sorry.\"\n\n\"Not a problem. I'm just sorry it wasn't in me.\"\n\n\"I promised that I wouldn't fuck you.\"\n\n\"True, but it still felt good didn't it?\"\n\n\"Yes, it did.\"\n\nI stayed on my hands and knees and looked back at Josh.\n\n\"I'm supposed to swallow that, right?\"\n\nJosh grinned at me, his cock softening. Then he reached out and scooped up the cum running down my ass cheek. He held out his fingers and I turned and sucked them into my mouth, cleaning them off. Then he scooped more off my back and fed that to me also. He had a huge grin on his face as he watched me eating his cum. I could still feel the wetness of his cum on my back and ass.\n\n\"We need to get going Beth. Clothes in the same place?\"\n\n\"Yes. why?\"\n\n\"Because you are going to stand in the window while I pick out clothes for you.\"\n\nI shivered. I was wide eyed. Josh took my elbow and walked me over to the bay windown facing the street.\n\n\"Take your shoes off and climb up Beth.\"\n\nI toed my shoes off and stepped up on the cushion which exposed me from just above my ankles to my face.\n\n\"Hands on your head please and move your feet shoulder width apart. Good girl. Now just wait there for me.\"\n\nI stood there shivering, staring out at the street in front of my house, bare ass naked, as I heard Josh walk away and up the stairs. My nipples had gotten hard. God, I felt aroused and hot all over. How long was I going to have to stand here? I was nervous, scared and so aroused it wasn't funny. It seemed like hours but finally Josh came back. He walked up behind me and caressed my bare ass, making me gasp.\n\n\"Step down but still face the window, please.\"\n\nI did as I was told, this was exciting and scary for me. Then I felt his hand move between my legs and I moved my feet apart involuntarily. And a finger went right up my pussy, my cunt. His other hand came around my body and grasped a tit, squeezing it and fondling a nipple. Soon my ass was moving in time with his finger inside me. I was panting hard. God I wanted to fuck!\n\nWay too soon Josh pulled his finger out of me.\n\n\"Bend over and touch the floor.\"\n\nShuddering I did, His hand caressed my ass cheeks and then he spanked me, one cheek after the other until my ass was good and hot.\n\n\"Stand up and turn around Beth.\"\n\nI did what he told me again. God I was loving being ordered to this stuff! I was facing him, he was grinning at me. He reached out and pinched both nipples. Made them harder than they were. Lifted each tit and squeezed them, then let them drop and bounce off my chest.\n\n\"All right, Beth, put the dress on and carry the other clothes to the car.\"\n\nThe dress was a sundress that buttoned all the way from top to bottom. I slipped it on and started to button it.\n\n\"Did I tell you to button it Beth?\"\n\n\"Ah, no.\"",
        "\"Well?\"\n\nI undid the one button that I had gotten done. I had to look down at myself, and I could see the inside slopes of my tits and the strip of hair above my cunt, my cunt lips and the insides of my bare thighs. I shivered.\n\n\"Get the other clothes and let's go Beth.\"\n\nI picked up a golf shirt and a pair of, shit, hot pants. An old pair of hot pants that I hadn't worn in years.\n\n\"Josh, I need a different pair of shorts.\"\n\n\"No, you don't. Come on.\"\n\nI sighed and started to walk towards the garage for my clubs and the dress just floated away from my body. I glanced down and I was completely bare in front! Tits out, cunt out, everything. I shivered again.\n\nWe got into the garage and he opened the overhead door. He found my clubs and we began to walk out and I noticed that his car was not in the driveway but parked on the street. Josh got my garage door opener out of my car, picked up my golf clubs and started walking to his car. And I walked with him, my dress billowing out around me, showing everything but my ass. God, this was so damn crazy!\n\nHe made me stand at the car while he put the clubs in his trunk and then let me get in, still unbuttoned. He got in and looked at me grinning. Then he started the car and drove off.\n\n\"Now, Mrs. Johnson, God I love calling you that when your tits and cunt are showing! We're going to do a little showing off. Do you know that street downtown with the restaurants that have outside seating?\"\n\nI nodded dumbly.\n\n\"We're going there and you are going to show off.\"\n\nI swallowed a lump in my throat. And I sat getting more and more nervous but also excited as we drove downtown. Josh was grinning at me from time to time. Almost there and Josh looked at me, smirking.\n\n\"Get rid of the dress please.\"\n\nNow that we were close I didn't want to do this, I really didn't want to do what he had said. But that little voice inside me was egging me on. Josh was studying the first restaurants as we drove up and he pulled over to the curb by the first one. I glanced and the tables outside were pretty much full. My window slid down. I gulped.\n\n\"OK Mrs. Johnson, sit up with your tits and face in the window.\"\n\nAnd God help me, I did just what he said. And he waited until a few people pointed at me and I could hear some laughing at me. Christ, was I turned on by showing my face and tits! He slowly pulled away and I still kept my face and tits in the window. He went past two more restaurants and slowed by the fourth. Then he stopped giving the people a good look, a really good look. I heard him say...\n\n\"Turn to face me, ass up, in the window and reach back and pull your ass cheeks apart Mrs. Johnson.\"\n\nGod help me I did exactly as I was told! Letting the people sitting for lunch see my bare ass and then my asshole and bare cunt. He sat there for what seemed hours and he chuckled as he pulled away once more. Driving further along he came to one of the last of a stretch of restaurants with outdoor seating. This time...\n\n\"I'm going to stop Mrs. Johnson, and you will get out of the car, stand and lift up your tits, pose, then turn and show your ass, bend over at the waist and then you can get back in the car.\"\n\nHe stopped the car, I was shaking. He looked at me and grinned. I opened the car door, took a breath, and stepped out, bare ass. I looked at the people sitting there, eating lunch, having a drink and didn't even see them. My hands lifted my tits up, pointing my erect nipples at them. And I held that pose, my entire naked front on display. Then I turned so my back, my bare ass was facing the crowd and slowly bent over. My feet automatically moved apart and I knew my bare cunt was visible. Then I shakily got back in the car and Josh pulled away. chuckling.\n\n\"Well Mrs. Johnson, I wonder how many cell phone pictures of you are going to be passed around later today.\"\n\nI just whimpered. But God was I hot! I also realized what I had just done and started praying that no one that I knew was at any of those restaurants. We are driving to the golf club and my phone starts ringing. I fumble it out of my purse and answer it. It's Rob. And he tells me that his boss Tom was at the last restaurant! My stomach plummeted to my feet! After I got over the panic attack, I got awfully fatalistic. There was nothing that I could do to change anything. And I was with Josh and he was going to do things to me that I was probably going to like and hate at the same time.\n\nUnfortunately Rob sounded pretty unhappy.\n\nI got a text further along from Rob that I was to come to his office once I was done with Josh. It sounded ominous to me.\n\nBut soon we were at the club. Josh parked way in the back of the lot and turned to look at me. I had the dress on, partially buttoned.\n\n\"Well, let's see what we can do Mrs. Johnson.\"\n\n\"I'm not doing too well Josh.\"\n\n\"Actually, I don't really care\".(He knew that acting like an asshole would turn me on)\n\nI felt a twinge, even though I was still sort of thinking about Rob's boss. He smirked at me.\n\n\"I'd like to see you bare ass again Mrs. Johnson.\"\n\nShit, I just shuddered.\n\n\"Where?\"\n\n\"Right outside my car door, right here.\"\n\nThat said with a dirty smirk. And figuring that nothing worse would or could happen to me, I got out of his car, walked around to his side. I slowly unbuttoned my sundress and opened it. He smirked again as my tits and pussy came on show for him.\n\n\"Hand me the dress.\"\n\nAnd I did, standing bare ass naked in the parking lot. Yeah, I was nervous, worried and getting hot. He gazed at me, then reached over and got the golf shirt and hot pants, slowly opened the door and handed them to me.\n\n\"Shirt first, but don't pull it down. I want your tits out longer.\"\n\nI did as I was told. Then he handed me the hot pants. I got my feet through the legs and began to pull them up. It was a struggle but I finally got them to where I could button them, barely. I couldn't get the zipper all the way up.\n\n\"Josh, I can't wear these, they're too tight on me now.\"\n\n\"I don't think you want to go in just the shirt, do you?\"\n\nThen he reached out and fondled my tits and nipples, then when my nipples were so hard they almost hurt he tugged the shirt down. And then he grasped the waistband of the hot pants and pulled them up higher.\n\n\"Turn around.\"\n\nI did. He stopped me facing away from him. He chuckled.\n\n\"Half your ass is showing Mrs.Johnson. This is going to be fun.\"\n\nHe got my clubs and shoes and we walked to the clubhouse where I, of course, had to pay for a round and a cart. He had me stand by the clubhouse with my ass hanging out while he got the cart. I hurriedly jumped on and sat down, hiding my ass as best I could. We played the first three holes like normal but after my drive on four when we turned at the dog leg with some large trees shielding us, he reached over and undid the hot pants. He tugged the zipper down. He chuckled and lifted up my shirt so my tits were out. We got to my ball and he got out with me as I addressed it. I had lowered the shirt, he pulled it back up and grasped my hot pants and yanked them hard and they slid down my legs.\n\n\"Go ahead and hit the ball, Mrs. Johnson.\"\n\nThere I was, tits showing and pants around my ankles. He chuckled again. And I did my best to hit the ball. He took my arm and made me walk to the cart with my hot pants still down. Sat me in it and got in. Lifted my shirt over my head and behind it so I was exposed all down my front and as he drove off his right hand went right between my legs. And God help me, I opened them so he could get at me easier. Josh fingerfucked me as he drove and asked me...\n\n\"Did you see where your ball went?\"\n\n\"N-n-no.\"\n\nI was getting hot as hell. He let me pull the hot pants up before we got to the green and lower my shirt but he wouldn't let me fasten the hot pants, just let the shirt hang over them with the fly open wide, my pubic hair showing. But every time we were in the golf cart he would have me pull the hot pants down a bit and lift the golf shirt so he could see my tits and feel my cunt.\n\nThis went on every hole until we got to 16. This hole the tee box is up on a hill with trees blocking the view of it from 15 and it is a long hole. The group in front of us was a long way ahead. Josh grinned. I got out and teed up my ball and he walked over to me, smirking again. His hands went to my hot pants and slowly pulled them down.\n\n\"Step out of them.\"\n\nI lifted one foot, then the other as he got the off of me completely. And then he pulled my golf shirt over my head and off.\n\n\"Hit the ball.\"\n\nI did and he motioned me to move my legs apart, and bare ass naked I did. Josh reached in his pocket and took out a golf ball and really slowly pushed it up inside my cunt. Then he picked up my clothes and smirked.\n\n\"Hold it in and come on.\"\n\nI could feel the ball movingt inside me as I walked to the cart and the feeling of being naked, on a golf course was turning me on so much. He dropped my clothes, such as they were, on the floor of the cart and we drove off, Josh feeling my bare tits I was only wearing a visor, footy socks and golf shoes. Got to my ball.\n\n\"Get out and hit it again then put your hands on the front of the cart and bend over.\"\n\nI did.\n\n\"Sorry Mrs. Johnson, I know that I promised but..\"\n\nAnd he slid a very stiff, very nice cock right up my cunt. I stood there like a dumb cow and let him pump me, really fast, really hard, not caring that someone could come along at any moment. He reached under me and fondled my tits and then he suddenly pulled out, making me moan and I felt his cum splattering on my ass and lower back.\n\n\"Lets go, Mrs. Johnson.\n\nI obediently got in the cart and off we went, me with fresh cum oozing down my back and ass, still bare ass. His cock was still out.\n\n\"Bend over and clean me off.\"\n\nAnd yeah, I did it. His cum and my cunt juice in my mouth. And he made me hit my next shot and put out on the green bare ass naked before he let me put my golf shirt and hot pants back on. But not before he wiped the cum on my back and ass off with the shirt.\n\nWe finished and left, he made me get naked again in the car on the drive to my husband's office, only letting me put on the sundress when we had parked in the parking ramp. Then Josh kissed me goodbye, feeling both tits again, making my nipples erect and very visible through my sundress."
    ],
    "authorname": "Sabineteas",
    "tags": [
        "exhibitionist",
        "voyeur",
        "amateur"
    ],
    "category": "Exhibitionist & Voyeur",
    "url": "https://www.literotica.com/s/the-state-amateur-pt-02"
}
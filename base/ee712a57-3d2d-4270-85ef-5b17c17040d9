{
    "title": "A Phone Call to Judy Ch. 01",
    "pages": [
        "Judy and I went to work at our small company at about the same time. She as administrative assistant to the CEO and me as a marketing rep. We were about the same age\u2014early twenties when we first started, but didn't work too closely together being in different branches of the company. Judy started out as administrative assistant in the executive offices, while I went on the road as a marketing rep.\n\nOver the years, we both rose through the ranks. Judy finished her college degree and eventually became director of human resources, and I was promoted to vice president for marketing, after making my mark as one of our most productive reps.\n\nDuring these ten years, Judy and I had an easy relationship. I thought she was really smart and funny. She had a wonderful and wicked sense of humor, and she told people exactly what she thought, whether they wanted to hear it or not. This made her a bit of a polarizing figure, but I was on the side that liked and enjoyed her.\n\nBesides, she was very cute. She was about my height, around 5-3, but with a softer, more rounded figure. My breasts were a nice size, 34-C, especially when contrasted against my slender frame. But Judy was much curvier, with full-round hips and breasts that usually strained against the smart outfits she wore to work.\n\nHer hair was dark brown like mine, and she often wore it curly as I did. But occasionally, she would let it grow into a long mane and let it fall in waves against her shoulders, giving her a decidedly sexy look. But the thing you noticed first, or at least right after her easy laugh, were her eyes. They were a remarkably clear blue and looked quite striking framed with her mane of dark brown hair.\n\nJudy and I didn't \"hang out\" together, having lunches or anything like that. I was usually on the road and she was making her mark in administration. But we did have fairly frequent interaction on business matters, and we would often take the opportunity to gossip about what was going on in the company, talk a little about our own lives, and exchange a few off color jokes.\n\nI could tell that Judy had \"been around\" quite a bit more than I had, and she didn't mind dropping a few comments to let you know it. She was one of those people who made her sexuality \"available\" more than most. She didn't seem at all embarrassed to talk about it if the occasion arose. And I found myself trying to think of ways to talk and joke about it more and more when we got together. There was something about Judy and her past experiences that fascinated me.\n\n\"Proper\" women in the company were a bit put off by her bluntness and ability to curse like a sailor. And they certainly didn't like her sexual references. But I did. Perhaps it was because I saw her as the \"bad girl\" that I knew I had hiding inside me somewhere but had never let out.\n\nMen, of course, liked Judy. She was cute and sexy and enjoyed teasing with them, even while talking behind their backs about what simpletons they were to let you lead them around by their cocks. My husband liked her, too, of course, calling her \"eminently fuckable.\"\n\nI knew I could always get my husband David in the mood by telling him my latest \"Judy story.\" He loved it when I'd relate something she told me about her past, and I could almost see his cock spring to life at the mention of her name.\n\nA few times, when we were making love, I would whisper to him about Judy, telling him how sexy all the guys thought she was; telling him how cute she thought he was; and asking what he'd like to do to her. When we played this game, I could feel his cock swell inside me with every word. I knew he was imagining that he was fucking Judy at that moment, even though he had his cock buried deep inside me.\n\nBut what David probably didn't know was that I was imagining it, too. I could picture the two of them together, rolling around bed, locked in each other's arms. My husband's eight inches buried to the hilt in her wet sex and Judy moaning and shouting at him.\n\n\"Fuck me you bastard,\" she would pant. \"Shove that big cock in my cunt! I'm gonna cum all over you!\" I just knew that's how Judy must be when she was really turned on.\n\nAnd then, she'd roll David onto his back and begin to ride him, sliding her slick pussy up and down his thick shaft, her luscious round tits bouncing, her body coated with sweat from the exertion. I'd close my eyes tight, the way hers were in my fantasy, and grind myself as hard as possible onto David's cock until we both exploded into an amazing orgasm.\n\nI didn't cry out as Judy did, it just wasn't how I acted, even during sex. But in my mind, I was screaming the words right along with Judy.\n\n****\n\nBut despite my fantasies, as far as I knew, Judy never played around on her husband, at least not with anyone in the company. The gossip certainly would have made the rounds and I'd have known about it.\n\nOver the ten years we worked together, there were a few times when we went to the same conferences or meetings out of town, although never just the two of us. There were other coworkers always along, too. But I looked forward to these trips and always made it a point to spend as much time with Judy as I could outside the meetings. She was just a hell of a lot of fun, and you never quite knew what might happen.\n\nOn one of these trips, she told me about Mr. Big. Judy and I and another of our coworkers were having a few drinks after the conference had ended for the day. We had been in the lobby bar for a couple of hours and were feeling no pain.\n\nThe other woman with us, Jane, was much closer to Judy than I, and it was obvious that they had exchanged a lot more stories over the years. Finally, Jane mentioned something about Mr. Big and the name of course caught my attention.\n\nI asked for an explanation. Jane looked at Judy smiling, waiting for her to tell the story, and with very little prodding she began.\n\n\"Well, he was this guy I dated my last year in college. He was on the wrestling team. Wrestled at heavyweight, must have weighed 260 or so. But he wasn't fat at all. He was about 6-5 and really cut.\"\n\n\"Thus the name, Mr. Big,\" I chimed in.\n\nJane was just grinning at the two of us as Judy went on with her story. \"Well, not exactly,\" Judy corrected me. \"I called him Mr. Big because he had the biggest cock I'd ever seen!\"\n\nShe and Jane burst out laughing as my eyes widened a bit and I moved a little closer to Judy so she wouldn't have to talk so loud. Not that I thought she would quiet down much, especially after several drinks. But I was hoping not to create a scene there in the lobby bar of our very swanky hotel.\n\n\"Not only that,\" Judy continued, \"but it's still the biggest cock I've ever seen even after all these years. And, god knows, I've seen more than my fair share.\"\n\n\"Don't waste our time telling us something we already know,\" Jane teased, as Judy stuck her tongue out at her.\n\n\"We actually measured the thing one night when we were playing around,\" she went on, \"and it was a little over ten inches long. But the thing that I really loved about it was that it was six inches around. It was like wrapping your fingers around one of those cardboard cylinders in a roll of paper towel. Only it was so warm and . . . alive. I loved to feel it throb in my hand.\" Her voice trailed off and she closed her eyes for just a second.\n\n\"Come on,\" I chided, \"you have to be exaggerating. The only guys hung like that are in pornos.\"\n\n\"Oh, really,\" Judy shot back with a big grin. \"And how would you know about that Miss Goodie Two Shoes?\"\n\nI could feel my face turn crimson, partly because she had called me on my sexual naivet\u00e9 and partly because I'd tacitly admitted that I'd watched pornos. Actually, David and I enjoyed them every now and then as one form of foreplay. But I didn't make a habit of advertising it.\n\nJane was enjoying our little back and forth, but she wanted Judy to get on with her story. \"All right, you two, that's enough. Judy, quit screwing around and get to the good part.\"\n\n\"I thought screwing was the good part,\" Judy deadpanned. But then she went on with her story.\n\n\"So one night we were at my apartment, fooling around in the bedroom. Mr. Big was lying back on the bed, we were both naked, and I was pumping that big ole cock of his up and down with both hands.\" She put one fist on top of the other and lifted them up and down a couple of times just to make sure we got the picture.\n\n\"Finally, I could feel him beginning to swell, so I started using just one hand so I could jack it off as fast as I could. Then all of a sudden, that big purple head of his swelled up and he shot a load of cum sort of above and behind us. It splattered against the wall at least four feet above my headboard.\"\n\nMy mouth and eyes were both open by this time, and Jane just sat there smiling and nodding her head in approval. \"My god, Judy, I've never seen a guy shoot it that far,\" I marveled.\n\n\"Oh, wait,\" Jane interrupted, \"that's not the best part. Go ahead, Judy. Tell her the rest.\"\n\n\"Well, there wasn't much more that night,\" Judy said. \"It's just that I decided to leave it there.\"\n\n\"On the wall?\" I asked incredulously.\n\n\"Yeah and . . .\"\n\n\"Where everyone could see it?\" I still couldn't believe it.\n\n\"Sure, that was the point,\" Judy laughed. \"What good is it to set some kind of record for sperm slinging if no one knows about it? I left it up for the rest of the semester. It was a great conversation starter. Besides, it gave other guys something to aspire to!\"\n\nWell, Judy never ceased to amaze me. But the story of Mr. Big was one for the books. I was both fascinated and turned on, and I filed it away in the back of my mind for future reference.\n\nI also went back to my hotel room that night and masturbated while I played the scene over and over in my mind. I knew Judy had given us the shorthand version of the story, probably because servicing that huge cock with her mouth might not have fit her image of always having the upper hand on guys.\n\nBut I just knew that she had taken Mr. Big in her mouth, licked that big purple head with her tongue and made him all slick before she started using her hand to bring him home. I saw it all as I lay there in the hotel and fingered myself to a very satisfying orgasm.\n\n****\n\nI thought about Judy and Mr. Big from time to time over the next couple of years. The image provided a great masturbation fantasy, and I even replayed the scene in my mind occasionally when David and I were making love. But unlike other \"Judy stories,\" I didn't tell David about Mr. Big. I don't know exactly why, because I'm confident he would have loved it. But there was just something about that one I wanted to keep all to myself.\n\nThen came one of our annual planning retreats. It was a time when almost the entire company would shut down for a couple of days and go away to assess where we were for the current year and develop objectives for the next. The actual work sessions were usually pretty boring, but I enjoyed the retreats because they allowed for a lot of socializing in the evening, and with people that I didn't get to see in an informal setting very often. Judy, for example.\n\nThis particular year, the retreat was to be held in a small lodge about 75 miles away from our headquarters. It was out in the middle of nowhere, a picturesque little place nestled in the rolling hills of western Oklahoma. Everyone would certainly stay right there during the one night we stayed over, because there was simply nowhere else to go for any night life. Our company rented the entire lodge for two days, so we had the place all to ourselves.\n\nAbout 70 of us attended the retreat. After the first day's meetings and a mandatory dinner, people began to drift to one part of the lodge or another for the evening. Some went straight to their rooms, others gathered in little groups to share stories and, believe it or not, some even talked about the next day's meetings.\n\nBut a good number of us, probably 25 or so, congregated in this recreation room that featured a bar, juke box, ping pong table, pool table and television. The group included Judy and me.\n\nWhile some decided to get competitive at the various games that were available, probably 15 of us gathered around the bar and began mixing drinks from the liquor we had brought for the occasion. We had been warned in advance that the lodge didn't provide liquor for its guests, so several of us brought our own. And it was, shall we say, an eclectic assortment, everything from Jack Daniels to some god awful thing called Hot Damn.\n\nBut those of us gathered around the bar did our dead level best to make sure that none of it had to be toted home the next day. Of course, as the bottles were emptied one by one, the conversation got looser and bolder, until there was a lot of kidding about all things sexual. Not surprisingly, Judy was right in the middle of it all, giving just as good as she got. I, on the other hand, sort of sat back, got mellow and just took it all in.\n\nFinally, we got around to sort of a PG-rated version of truth or dare. Most of us in the group were married, so we didn't dare get too risqu\u00e9. Nonetheless, soon came the dare for Judy to flash us all. And wouldn't you know, she refused to back down and calmly raised her sweatshirt and showed us her tits.\n\nNow, don't get me wrong, it was not a Mardi Gras flash. She was wearing a bra underneath. But we all still got a good look at her pretty lace bra and some wonderful cleavage. Not to mention the soft, milky skin that covered her belly.\n\nI don't know if it was the flash per se, or the fact that the liquor was almost gone. But for whatever reason, our group began to break up soon after. I think most of us realized, at least subconsciously, that there was nowhere else we could go with our game without the potential for some major trouble. So people began to head back to their rooms.\n\nHowever, there was a small group of us girls, Judy and I included, who were not quite ready to call it an evening. So we accepted an invitation from one to join her in her room to watch a little TV before bedtime.\n\nIt wasn't long before six of us were sprawled out on the two beds in the room, shoes off while our hostess began to flip through the channels to see what was on. As luck would have it, she came across a show on HBO called Real Sex, which is sort of an R-rated news magazine with stories about all kinds of sexual things. Of course, when we saw what it was, everyone yelled \"stop,\" and we proceeded to watch.\n\nI can still remember vividly how quiet the room got as six women, away from their husbands for the night and each in various states of drunkenness, watched the sexual images that flashed across that screen. Yes, at first there were some hoots and whistles during the segment about the male strippers with unusually large cocks. But as the segment went on, the only sound was some pretty heavy breathing.\n\nAnd it truly was a sexy segment, showing those strippers performing for an enthusiastic group of women who were grabbing them, stroking them, rubbing their tits all over them, all while these amazing cocks swung lewdly as the guys danced.\n\nAs the show ended, everyone seemed a little unsure about what to say or do next. Did anyone dare speak about what we were obviously all feeling\u2014this tremendous sense of arousal? The answer, as it turned out, was no. One of the girls mumbled something about needing to call her husband before it got too late, and that comment broke the spell.\n\nWe all said our goodnights and drifted back to our various rooms. I expected there would be some serious masturbation going on.\n\nI went back to my room, extremely aroused by all that had gone on during the evening. Besides, I was still slightly drunk. I normally sleep in an oversized tee shirt and panties, but that night I quickly shed my clothes, went to the bathroom, then slid naked between the cool sheets.\n\nMy head had barely hit the pillow before I began running my hands over my breasts, letting my mind drift back over the night's events, especially the image of Judy flashing us. That glimpse of her body was sexy, all right. But it was her willingness to do it that really got to me. Her daring\u2014that \"bad girl\" daring-- made me tingle all over. I knew right then that I was truly attracted to a woman sexually for the first time.\n\nSo on impulse, I reached over and picked up the phone from my bedside table and dialed Judy's room. She answered on the first ring, leading me to believe that she was in bed, too, and very close to the phone. Her voice sounded a little sleepy, even though neither of us had been in our rooms long enough to have dropped off.\n\nI tried to make a little small talk about the day, but quickly came around to mentioning the show we had all watched just a few moments before. And I knew exactly where I wanted the conversation to go. I wanted to get Judy thinking . . . and talking . . . about her Mr. Big.\n\nI wanted to hear the story again from her. But this time, I didn't want to hear her tell it in the kidding way she had done with Jane and me. I wanted her to focus on the sexuality of the experience. I wanted to know how it made her feel. I already knew how it made me feel.\n\nSo I tried a leading comment. \"That one guy tonight must have reminded you of Mr. Big.\" I tried to keep a light tone in my voice, even though I was very serious, just in case she wasn't in the mood to talk about it. But, fortunately, she was in the mood to talk, or at least to answer my questions.\n\n\"Mmmmmmm. Yeah, he did,\" she responded, her voice sort of husky.\n\n\"That guy really got to you, didn't he? You still think about him after all these years.\"\n\n\"Um, yes. Sometimes.\"\n\nAs she answered my questions, I propped the phone against my ear and began to caress my breasts again. \"I can't believe you left that 'trophy' on your wall all that time.\"\n\nGiggling, \"Well, it seemed like a good idea at the time.\"\n\nI wanted her to volunteer more information, but it was clear that she wasn't going to. So I decided to see how long she'd answer my questions. \n\nI began to ask her for details about him. How he looked. How he felt. What they did other times they were together. What it was about this guy that made her remember him so vividly after 15 years. And she answered all my questions.\n\nAs she told me details about Mr. Big, I allowed my hands to roam over my body. I pinched my nipples, ran my fingernails lightly over my belly, before finally sliding two fingers just inside my wet slit, dipping into the nectar that had been flowing ever since Judy flashed us earlier that evening. I used it to lubricate my clit, which by now was simply begging to be touched. I made slow circles, up, over, down and around, over and over, trying to match the rhythm of Judy's words on the other end of the line.\n\nI was almost certain that Judy was doing the same thing as we talked. I could hear her breathing grow faster, movements on her bed. I'm sure she could hear the same thing on her end of the phone.\n\n\"What did he feel like, Judy?\" My voice was barely above a whisper by this time.\n\n\"Oh my god, Sarah,\" she sighed. \"It was like I was impaled . . . ummm . . . on this huge pole. The only way I could take it . . . mmmmm . . . was with me on top. I'd just slide down as far as I could . . . ohhh . . . and ride up and down real slow.\"\n\nBy this time I had buried three fingers inside me, trying to feel the fullness that Judy was describing, while the fingers of my other hand moved furiously over my clit. I was close and I knew my breathing must surely be giving me away. But I didn't care. I wanted to hear Judy's voice in my ear when I came.\n\n\"Then what?\" I hissed through clenched teeth.\n\n\"He'd grab my tits . . . hard . . . ohhhh . . . and by then I'd just be bouncing up and down . . . mmmmm . . . on that big cock.\"",
        "And when she told me what it felt like when he exploded inside her, it was like a jolt of electricity directly to my clit. My cunt began to throb and contract, squeezing my fingers over and over again, as I pressed my legs together, trying to hold on to those last delicious feelings. It was one of the best orgasms I'd ever experienced. I was too wrapped up in my own sensations to know for sure, but I think Judy came with me at that moment.\n\nWhen my mind cleared and I could talk again, I quickly said good night and hung up the phone, embarrassed at what I must have sounded like when I climaxed. \n\nLater, it was as if that night had never happened. Judy and I never talked about it, but happily, things seemed to be the same between us as before, at least on the surface. But for me, it was not the same. I was attracted to Judy, but had no idea what to do about it.\n\n****\n\nA few years later, our company was taken over by a larger competitor and there was a big shakeup in management. Judy and I were among those who were laid off in the reorganization and \"downsizing.\" Both of us had spent over 15 years with that company\u2014our entire working lives.\n\nI understood intellectually that it was just business and no real reflection on me, but it was a devastating blow. I know Judy felt the same, but we didn't have much of a chance to talk about it before our final day at the company rolled around.\n\nI was fortunate in that my husband had just landed a great new job with a salary that made it unnecessary for me to work. But I decided to start a consulting business to help me stay busy. We moved to the city where his new position was located and I left my friends from my old company, including Judy, behind.\n\nI stayed in touch with a few of them and exchanged a few e-mails with Judy. But even though I often thought of Mr. Big and our late night telephone conversation at that planning retreat, we sort of went our own ways and lost touch.\n\nBut as the days went on, I felt as if something very important was missing from my life. I missed my friends, I missed going in every day to the company where I had worked ever since college.\n\nMy husband was terribly busy with his own career and we hardly saw each other. Our sex life went to hell in a hand basket. I knew I wanted something more. But what?\n\nOne day I was surfing the internet and out of curiosity, I tried to find some erotic stories online. David and I had always enjoyed reading erotica as part of our foreplay, and I thought some new stories might spice things up for us. I stumbled across literotica.com and began to read.\n\nThe site opened a whole new world to me and caused me to begin thinking about my sexuality in new ways. I was fascinated, intrigued, and frequently turned on. I left comments on the stories that I read and wrote to authors telling them how I had enjoyed their work. I struck up a couple of good online friendships with some authors, and that led me into the world of chatting, and yes, cybering.\n\nAfter reading the stories for a couple of months, I decided I could probably write something as good as some of the things I had read on the site. I didn't have much real life experience to draw on, but the stories and chats had begun to expand my imagination about sex, so I gave it a try.\n\nMy first story was to be a multipart series about some experiences during my college days. But after the first installment I lost interest (goes to show about my real life experiences) and I moved on to other topics.\n\nOne of the stories I wrote was a fictionalized account of my company's planning retreat and all the things that led up to my masturbation session on the phone with Judy. I recounted her tales of Mr. Big, and told how I felt as I got myself off listening to her. It was a pretty good story, if I say so myself. And I got a lot of great feedback from the readers.\n\nIt's funny, but the thought kept running through my head, wondering whether Judy might somehow stumble across the story and realize it was about her . . . and me, even though I had changed the names and some of the other details. I knew it was a million to one chance that she would ever see it. But the idea that she might just kept swirling around in my brain, making me excited, aroused and apprehensive, all at the same time.\n\nThen one day, my consulting business took me back to the town where I had lived and worked those many years. And, as fate would have it, I ran into Judy having lunch at a restaurant. We hugged warmly, tried quickly to catch up on what we had been doing. It was obvious we had too much to say for just a quick chat, so we agreed to meet for a drink and catch up later that day.\n\nWhen we got together at the bar that evening, I could tell that the past year had taken its toll on Judy. She wasn't the same ebullient woman I remembered. I had been fortunate to be able to move on with my life after we were laid off. She, on the other hand, had to stay there in town because of her husband's job and try to find other work. And jobs were not easy to find in such a small town, especially a position like the one Judy had worked herself into at our old company.\n\nThey got by for nearly a year on the generous severance package she'd received, but the time came when she had to go back to work to help ends meet. So she took a job as a secretary at another large company there in town, and she was understandably feeling that she was right back where she started nearly fifteen years ago.\n\nI studied her face as we sat there and sipped our drinks. She was not the young girl that I had met over 15 years before when we started working together. But she was still lovely, perhaps even more so. Her face was a bit fuller now, her curves a bit rounder. But those deep blue eyes were still mesmerizing, though they didn't seem to have quite the sparkle that evening. Her dark brown hair was still full and thick, and it fell in soft waves to her shoulders.\n\nAs we talked about our new lives, I could see this sadness in her body language, even though she was too \"tough\" to let anyone see her cry. So I reached over and hugged her tight and told her how sorry I was for how things had turned out.\n\nI went on to tell her about the sense of loss I had been feeling, too, and how it had affected my life. I told her, half kidding, that I had resorted to writing porn for this internet site to help fill my days.\n\nShe looked at me in disbelief. I had never been very open about my own sex life with her because I didn't really have that much to tell. So the idea that I would be writing erotica seemed to surprise and fascinate her.\n\n\"So my straight laced Sarah is a pornographer,\" she teased. \"I could have thought for a year and not come up with that hobby for you.\"\n\nThen she looked at me and said softly, \"Can I read some of your stories?\"\n\nRight then I had a decision to make. And I didn't make it without a great inner struggle. But I thought back to that night at the planning retreat. How I had felt hearing her talk in soft tones about how Mr. Big had fucked her, how he had turned her on like no one else ever had. And I knew what I would do.\n\n\"I'll send you a link,\" I told her, trying to keep my voice from shaking. \n\nWhen I got home late that night, I turned on my computer and sent a quick e-mail to Judy. \"Here's a little sample,\" it read. \"Hope you enjoy it.\"\n\nAnd then I sent the link to the story about our planning retreat. I was almost hyperventilating by the time I copied the link to the e-mail, but I quickly hit send before I could back out. I sat there and stared at the computer screen for a very long time, wondering what I had done.\n\n****\n\nFor the next week, I couldn't wait to jump out of bed and check my e-mail, hoping for some kind of response from Judy. But by the end of the week, I had decided that I'd made a very big mistake. She had undoubtedly been royally pissed off that I had turned that experience into an erotic story and posted it online for the whole world to see. She was probably telling everyone that we used to work with what a pervert I'd become.\n\nBut late Friday afternoon my cell phone rang. I could see from the caller ID that it was Judy. My hands were shaking so hard that I could barely push the button to answer it.\n\n\"I read your story,' she whispered.\n\nThen there was this long pause. It was excruciating.\n\n\"So, what did you think?\" I asked, trying to sound as nonchalant as I could under the circumstances.\n\n\"I came that night, too,\" she sighed, \"at the planning retreat.\" \n\nMy knees turned to jelly and I collapsed into the chair, not knowing what to say next. But she didn't wait for me to respond.\n\n\"That was the sexiest thing I have ever read,\" she continued, her voice still unusually quiet.\n\n\"Oh god, Judy, I'm so glad you liked it! I can't tell you how many times I've wanted to talk with you about that night, but I just couldn't bring myself to do it.\"\n\n\"It's okay. It's probably a good thing you didn't tell me about it sooner. I would have probably called you a perv and cussed you out.\"\n\n\"So what changed?\" \n\n\"I think it was that day you came to town and we talked. You really 'got' how I was feeling and you were willing to be so honest with me about yourself. And besides,\" she added, \"I really needed that hug right then.\"\n\n\"Where do we go from here?\" I asked, having absolutely no idea what she might say.\n\n\"So, do you want to hear more about Mr. Big?\" This time I could hear a smile in her voice. But I also knew she wasn't kidding.\n\n\"Of course I do!\"\n\n\"All right, Sarah, are you by yourself?\"\n\n\"Yes.\"\n\n\"Then take your clothes off and go lie on your bed.\" Her voice was barely above a whisper. It had that same breathy sound I remembered from that night at the retreat.\n\n\"I'm already undressed, Sarah,\" she whispered, \"and I've been lying here getting ready, thinking about how you must have looked that night. My nipples are hard and you wouldn't believe how wet I am.\"\n\nWell, she hardly had the words out of her mouth before I was exactly the same way. Wet. Open. Needing to be touched.\n\n\"I'm ready, Judy,\" I told her breathlessly after I had shed my clothes in record time and thrown myself onto the bed. \"God, am I ever ready.\"\n\n\"All right, Sarah,\" she instructed. \"You don't have to say anything unless you want to. But if you want to tell me what you're doing or feeling, I'd love that. Okay?\"\n\n\"Okay,\" I said, the word almost sticking in my throat, which had gone dry with nervousness and excitement.\n\n\"The thing I've never told you about Mr. Big, his name was actually Gary, was how he literally owned me,\" she began, her voice low and breathy. \"Once I saw his cock for the first time, that was it. I had to have it. I just needed it, you know? I would have done anything to have him.\"\n\n\"Um hum,\" I responded softly, as I let my hands drift over my neck, my chest, my breasts.\n\n\"And god, when he fucked me for the first time, I knew I would do anything for him. I mean anything.\" I could hear Judy shifting the phone around, presumably to allow her hands the freedom to touch herself as I was doing.\n\n\"One night he called me and said he wanted to take me out dancing. He said to be sure and wear a skirt, a sort one. So I thought I'd go him one better. I found this little thing with a tartan plaid that made me look just like a school girl, and I knew it was the one.\"\n\n\"Mmmmm. How short was it?\"\n\n\"It barely covered my ass, Sarah. But I knew that's how he wanted it. I borrowed a white button up shirt from one of my guy friends and bought a pair of knee socks to wear with my Mary Janes. I looked like quite the little teenage slut.\"\n\n\"Oh fuck,\" was all I could manage as I began to pinch my nipples, sending little jolts of pleasure directly to my clit.\n\n\"So when Gary came to pick me up, he loved it. I could see that big cock of his starting to make a tent out of his jeans.\"\n\n\"Mmmmmm,\" I moaned softly. \"What are you doing right now, Judy?\"\n\n\"I'm lying here with my legs spread apart with one hand on my clit, rubbing it very slowly and touching my breasts with the other one.\"\n\n\"Oh god, Judy, I can just picture you.\"\n\n\"I know. I can see you, too, baby.\"\n\nI left one hand on my breast and moved the other one slowly and lightly over my belly until I could feel the coarse dark hair on my mound. It was already wet with my arousal, and I slipped two fingers inside just a little, not wanting to move too fast.\n\n\"Sarah,\" she whispered. \"I want us to cum together.\"\n\nI felt a little spasm in my pussy when she said that. \"Ohhhhhh, I want that, too.\"\n\n\"So he took me out to this little club where they had a small dance floor with several tables and booths in the back. It was pretty dark, you know. I felt really self-conscious being dressed like that, but when I reached down and put my hand on Gary's cock, I knew he was as excited as I was, so it seemed okay.\"\n\nThe thought of her caressing that big tool on the ride to the bar made my juices flow even more freely, and I raised my fingers to my lips to taste myself. Of course, in my mind, I was tasting Judy.\n\n\"So we sat in a back booth, and Gary ran his hand up the inside of my thigh.\" She was almost breathless now, whispering these intimate things to me as I lay there with the phone propped against my ear, my feet flat on the bed, knees wide apart. \"And he ran his finger over the outside of my panties. Of course, they were already soaked.\"\n\nI let out a soft moan and slid two fingers deep inside and used the heel of my hand to grind on my swollen clit, rocking back and forth to the sound of Judy's voice.\n\n\"Then he whispered in my ear, 'Take them off. Now.' And, Sarah, I did what he said. I took my panties off right there in the booth. He took them from my hand, held them to his face, held them to my face, so we could both smell my arousal. Then he shoved them in his pocket.\"\n\n\"Ohhhhhhhh,\" was all I could manage.\n\n\"Then he led me out onto the dance floor for this slow dance. He was so tall, I had to reach way up to put my arms around his neck, and I knew my bare ass would show if I did. And, my god, I did it anyway. I just showed myself to anyone who wanted to look. And Gary took those big hands of his and put one on each side of my ass and pulled me to him, until his cock was rubbing against my belly. We didn't really dance; we just sort of stood there and swayed with the music.\"\n\n\"Oh fuck, Judy,\" I hissed, \"are you close?\" My three fingers were plunging in and out of my wet cunt, while my other hand worked my clit.\n\n\"Yesssssssssss,\" she said breathlessly, I'm so close. My ass is propped up on a pillow and I'm fucking myself with my fingers.\"\n\n\"Oh my god, if I touch myself one more time, I can't hold back anymore,\" I panted. \"But I have to know what happened.\"\n\n\"I'm barely hanging on by my fingernails, Sarah. I'll try and hold off so we can cum together.\" \n\nShe tried to finish the rest of her story between her panting and moaning. \"So after the song was over . . . mmmmm . . . Gary led me from the dance floor and down this dark hall toward the bathrooms . . . Ohhhhh . . . but before we got to the bathrooms . . . he leaned me up against the wall and slipped his hand under my skirt . . . mmmmm . . . and started playing with me. Fuck, I was so wet, my thighs and crack were just slick.\"\n\nWith that, I drew my feet up even closer to me and forced my knees wider apart. The skin was stretched tight around my clit and the tingling was almost unbearable. The spasms were getting more frequent as my fingers slowed their movement to match Judy's pace.\n\n\"While he was fingering me with one hand, he used the other to unfasten his belt, and then his jeans. I was going crazy wanting him. I was past the point of caring . . . mmmmm. . . whether anyone saw us, but I was scared to death . . . ummmm . . . that we'd get thrown out and arrested. But I just closed my eyes and reached up, grabbed his neck and helped him as he lifted me up and pinned me against the wall with his cock buried deep inside me.\"\n\n\"Fuccckkkkk!\" I screamed into the receiver as my orgasm ripped through my body.\n\n\"I'm cummmmminggggg! Judy screamed back, her words punctuated with pants, groans, then finally whimpers.\n\nAs I listened to her on the other end of the line, my back arched, my hips bucked up and down on the bed as I tried to force my fingers as far inside my throbbing cunt as they could possibly go. I bit my lower lip until I tasted blood, but I couldn't have cared less. All I could think about at that moment was this intense burning at the very center of my being that seemed to radiate out to every extremity, and back again to my cunt.\n\nMy eyes were clamped shut, but I could still see a picture of Judy, shoved up against the wall, impaled on that huge cock and begging to be taken by Mr. Big.\n\nAs I was coming down from that incredible orgasm, I suddenly realized that the phone had been thrown off the bed. I reached quickly down on the floor to pick it up, my hand still wet with my cum.\n\n\"Judy?\" I panted into the phone. \"Are you there?\"\n\n\"Oh, fuck, Sarah. I think I am. That was amazing.\"\n\n\"Oh god, I know it. Thank you so much . . . for everything.\"\n\n\"Shit! My husband's going to be home in 20 minutes. I'm so sorry, but I have to go. I just wish we could lie here and enjoy this a little more.\"\n\n\"It's okay, Judy. I understand. And it was truly wonderful. Do you think . . . we can do it again?\" I asked, my voice trailing off.\n\n\"Hell yes we're gonna do it again,\" Judy laughed. \"But there's one condition.\"\n\n\"What's that?\"\n\n\"Next time we'll be in the same place, and I'll get to see the expression on your beautiful face when I make you cum.\"\n\nAnd with that, I heard a click and the dial tone. And all I could do was whisper, \"Oh my god,\" over and over again. "
    ],
    "authorname": "pixie2002",
    "tags": [
        "phone sex",
        "big cock",
        "large breasts",
        "female masturbation",
        "flashing",
        "showing off"
    ],
    "category": "Toys & Masturbation",
    "url": "https://www.literotica.com/s/a-phone-call-to-judy-ch-01"
}
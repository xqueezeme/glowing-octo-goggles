{
    "title": "Country Boy Ch. 02",
    "pages": [
        "It's been two months since I returned home to Chicago.\n\nThat first week, I would burst into tears at the drop of a hat. I cried myself to sleep every night. I wasn't crying as much these days, but I still thought of Butch often and it made me miserable.\n\nJen called me regularly to make sure I was okay. I know she's worried about me. If I didn't have her to talk to, I don't know what I would do.\n\nButch and I talked on the phone a few times, but it was awkward. I loved hearing his voice, but it really hurt being apart from him. It seemed like every time we talked, one of us would eventually end up getting upset or frustrated. It's been a couple of weeks since we last talked. It feels like we're drifting apart and that just makes it worse.\n\nI haven't spoken to my dad since that morning we returned home. Mom would call to check on me once a week like usual, but it felt like she didn't really care about anything I had to say. It was just for appearances.\n\nSo here I was on a Thursday morning sitting on the couch eating a bowl of cereal. My dog, Rocky, laid down next to me with his chin on my thigh. I swear that he could tell that there was something wrong with me. He was much more calm around me than he normally was and he was always cuddling up on me.\n\nRocky is a three year old miniature schnauzer. He's all black with natural ears and a docked tail. He has a long beard and bushy eyebrows and is groomed in a typical schnauzer cut, complete with a skirt of hair around his belly. He's my little guy and I love him to death.\n\nAfter I gave Rocky kisses on top of his head, I put him up in his crate and headed in to work. I've been having a rough time at work. I found that I was impatient with the employees and I wasn't paying attention to what I was doing or what people were saying. My mind was distracted and thinking of Butch.\n\nAt lunch, I headed out and walked a couple of blocks towards my favorite deli. I saw my Dad walking out of a fancy restaurant with a young blond bimbo. They were headed my way, presumably towards my Dad's office, which was in a high-rise a couple of blocks from where I worked. I thought for a second about turning and walking the other way, but instead I decided to keep going. Dad had his hand on her back and she was giggling and flipping her hair. He was so caught up in his tramp that he didn't even see me approaching.\n\n\"Dad,\" I said as I got right up to them and stopped.\n\n\"Philip,\" Dad said, looking a little flustered. \"This is, uh, Mary. She and her husband are clients of mine. Mary, this is my son, Philip Junior.\"\n\nNice. Dad is a defense attorney and makes his living representing criminals with deep pockets. I'm sure his client would be happy to know that Dad's banging his wife while he sits in jail or whatever.\n\n\"It's nice to meet you, Philip Junior,\" she said with an embarrassed smile.\n\nGod, it's bad enough that I'm Philip Junior, but I absolutely hate it when people address me as 'Philip Junior' as if that's my name.\n\nI tilted my head and regarded her. \"Actually, we met about four months ago, didn't we? You and Dad outside the hotel over there?\"\n\n\"No, I don't think so,\" she said. \"That wasn't me.\"\n\n\"Oh, right. Who can keep track? Anyway, it was good seeing you. Bye, Dad.\"\n\nDad shot me a look that spoke volumes. An evil little grin spread across my face as I resumed walking. I'm sure I would suffer for it later, but it felt really good to see Dad so pissed off. It got my mind off Butch for a little bit at least.\n\nButch.\n\nI hadn't been back at work long when I got a call on the help desk line from one of the executive vice presidents who was having trouble printing. I made my way to his office. I sat down at his desk and I realized that his problem was the same problem that Butch had. Then to compound the fact, he wasn't connected to the network so I couldn't open his mapped P drive to get the drivers. Crap. That wasn't the problem. He wasn't connected to the network. Wait a minute. Shit. What was I doing?\n\nThe man was hovering over my shoulder, pointing at the screen. \"None of those work.\"\n\nI started to get flustered and annoyed.\n\n\"I got it,\" I snapped. \"Just give me some room.\"\n\nHe straightened up his posture stiffened.\n\nI started to backtrack. \"I'm really sorry. I didn't mean to--\"\n\n\"Yeahhh.... Why don't we get someone else to look at this.\"\n\nI opened my mouth to speak and then my eyes started to tear up. I got up from his desk and hurried out of his office. I stopped in the restroom and splashed my face with water and blew my nose. By the time I got back to my cubicle, my boss Jonas was already there waiting for me. I let out a deep breath and followed him into his office and he shut the door behind me.\n\n\"Look, PJ,\" Jonas said. \"Ever since you came back from your grandmother's funeral, you haven't been yourself. You're making mistakes and your work is suffering. You're a good employee. One of my best. But if something doesn't change... Look. Why don't you take a week off? Get yourself together. Go talk to someone if you need to.\"\n\nI stared at him blankly, trying to process what he was saying.\n\n\"I'm not asking,\" he said. \"I'm telling. Go home. I'll see you Monday after next.\"\n\nI stood up and nodded. \"Yes, sir,\" I said quietly.\n\nI walked to the door and stopped and turned around. I knew what I needed to do.\n\n\"Can I have two weeks, Jonas? I have a lot of vacation saved up... and, uh...\"\n\n\"Fine. But when you come back, I expect a complete turnaround. I've convinced them to give you this one chance, PJ. Don't let make me regret it. Understand?\"\n\n\"Yes, sir. Thank you.\"\n\nI walked back to my cubicle and shut down my computer and turned off the cube lights. I pulled my Blackberry out of my pocket and turned it off and left it on my desk.\n\n***\n\nOn my way home, I made a quick stop at the AT&T store and bought a new iPhone. The process took a little longer than I would have liked, but I was glad to be rid of my work phone, for a couple of weeks anyway.\n\nWhen I got home, I let Rocky out of his crate. He jumped up on my legs and I bent down and scratched on his head and under his beard, then took him downstairs to go potty.\n\nAfter Rocky finished his business in the courtyard, I went up to my bedroom and pulled my work clothes off and put on a pair of jeans and a t-shirt. I pulled my boots from the closet and pulled them on.\n\nRocky jumped onto my bed and laid down, his legs pointed backwards and his chin resting on his front legs. He watched me as I pulled my two suitcases from the closet. I packed a couple weeks worth of clothes into the suitcases. I grabbed my backpack with my laptop. I poured Rocky's food into a big plastic container and filled a two liter bottle with water from the fridge.\n\nI put everything into the back of my navy blue Saturn Vue hybrid SUV. I folded up Rocky's kennel crate and put that in the back as well.\n\nI opened the SUV's back driver's door and Rocky bounced up into the back seat. I laid out his blanket for him and gave him his squeaky stuffed bunny.\n\n\"Here's your baby, Rock,\" I said.\n\nHe took the bunny in his mouth and proceeded to squeak it over and over in rapid fire succession.\n\n\"If you're gonna do that the whole trip, I'm gonna throw it out the window,\" I told him with a chuckle and I tickled him under his beard.\n\nI pulled the camouflage cap Butch gave me onto my head and before long, we were headed south on I-65.\n\nWhen we got to Nashville, I stopped at a Subway and got a sandwich and Coke to go. I checked into a motel that allowed pets and Rocky and I settled in for the night. I put out a bowl of food and water for Rocky and I ate my sub while sitting on the bed watching TV.\n\nAfter we finished eating our dinner, I took Rocky outside to potty.\n\nI turned off the TV and the lights and got into bed. Rocky jumped up onto the bed and curled up into a ball next to me.\n\nAs I laid in the strange bed listening to the hum of the window unit's fan, I hoped that I wasn't making a mistake. I have never ever done anything this impulsive in my life.\n\nI had two weeks. I had to see him. I had to know. Was it the real thing?\n\n***\n\nWhen I pulled into town, I drove right to Roberts Farm Supply. I sat in the car for a really long time trying to calm my nerves. I looked into the back seat at my pup.\n\n\"This is it, Rock. Come on.\"\n\nI put Rocky on his retractable leash and took him to a grassy area to go potty. Rocky stuck right by my side, sniffing around on the ground as we went inside.\n\n\"Be a good boy,\" I whispered to Rocky.\n\nI saw Butch's sales clerk, Chris, behind the counter. Chris was a young guy in his early twenties, a chubby guy with dark hair. He was talking to an attractive, young, red-haired woman, who was visibly pregnant. Chris's face was beaming as he talked to her and she actually had that glow that people said pregnant women have.\n\nI walked up to the counter and held out my fist above Rocky's head and he looked up and sat down.\n\n\"Hi, Chris,\" I said.\n\nA grin spread across Chris's face and he said, \"Hey, PJ! This is a surprise. Welcome back. This is my wife, Tish.\"\n\n\"Nice to meet you,\" I said and shook her hand.\n\n\"It's nice to finally meet you,\" she said as she rested her hand on her belly.\n\n\"Does Butch know you're here?\" Chris asked me.\n\n\"No...\"\n\n\"Why don't you go wait in the office?\" Chris offered. \"I'll call Butch in. He's wandering around here somewhere.\"\n\nI looked down at Rocky. \"Oh, I'd better wait out back.\"\n\nChris looked down over the counter at Rocky and smiled.\n\n\"Aw, he's so cute,\" Tish said.\n\n\"Thanks,\" I replied.\n\nI led Rocky out back and when he saw Duke in the fenced in area behind the greenhouse, he pulled hard on the leash to get to him. I hurried up to the fence and let Duke and Rocky sniff each other. I wasn't sure if I should open the fence and let them play.\n\n\"How can I help you?\" his deep voice asked from behind me.\n\nI stood up straight and turned around. My stomach started doing flips and my heart was racing at the sight of him.\n\nButch was wearing a green shirt with the Roberts Farm Supply logo on it, blue jeans and black boots and his black cowboy hat. Oh my god, he was so handsome. I looked into his blue eyes and let out a soft sigh.\n\nButch's jaw dropped open. \"PJ?\"\n\n\"Hey, Butch.\"\n\nButch quickly closed the distance between us and pulled me into a bear hug. He lifted me off the ground and squeezed the wind out of me. He grabbed my face and kissed me. I brought my hands up to his face and rubbed his beard and returned his kiss.\n\n\"I missed you so much,\" I whispered.\n\n\"I missed you, too,\" he said, then hugged me again.\n\nI started to cry and he held me tight to his chest and let me bawl. I could feel his lips and nose in my hair and I gripped his back harder. It felt so good to be in his arms. He was so big and so tall. He smelled so good. For the first time in two months, I felt at peace.\n\nI pulled myself together and stepped back and smiled at him and wiped my face with my hands. He looked down at my feet and saw Rocky sitting calmly next to me.\n\n\"Is this Rocky?\" he asked.\n\n\"Yup. That's my baby,\" I chuckled.\n\nButch squatted down and let Rocky sniff him and then he pet him and scratched his ears. When he scratched under Rocky's collar, Rocky leaned his head into his hands and nearly tipped over. Butch chuckled and asked him excitedly, \"You wanna meet Duke? Huh, boy?\"\n\nButch opened the gate and unclipped the leash from Rocky's collar. Rocky ran inside and he and Duke sniffed each other thoroughly and then proceeded to chase each other. They jumped all over each other and rolled around in the grass, then chased each other some more.\n\n\"What are you doing here?\" Butch asked me as we watched the dogs play.\n\n\"My boss told me to take two weeks off work. I was...\"\n\nI sighed and shook my head with a shrug of my shoulders. \"I packed up Rocky and drove down here.\"\n\nChris's voice came over the loudspeaker to let Butch know that he had a customer waiting up front. Butch mumbled under his breath, then pulled his keys out of his pocket and took one off the key ring and held it out to me.\n\n\"Here's my house key. Go home and get yourself settled and cleaned up. Take a nap. I'll be home in a couple hours, okay? Then we can talk.\"\n\n\"Okay,\" I said with a nod.\n\n\"You can leave Rocky here with Duke. I'll bring 'em both home with me.\"\n\n\"Okay.\"\n\n\"I'm so glad you're here,\" he said and gave me another hug.\n\n\"Me, too, Butch.\"\n\nI said goodbye and then drove to his house. I wasn't sure where I would be staying, so I left my suitcases in the SUV and brought in my overnight bag.\n\nOnce inside, I went to the bathroom and took a nice warm shower. I pulled out a clean t-shirt from my overnight bag and put on my pajama bottoms. I went to the living room and laid down on the couch. I pulled the fleece throw over me and I was instantly asleep.\n\nI was startled awake when something cold touched my nose. I opened my eyes to see Rocky sniffing my face. His cold wet nose touched my face again and I smiled at him and rubbed his head and back. \"Hi, sweetie,\" I whispered.\n\nI looked up to see Butch standing in the doorway watching me with a smile on his face.\n\n\"You were sleeping so hard,\" he said. \"You looked like an angel.\"\n\nI blushed in embarrassment. \"Whatever...\"\n\nButch chuckled.\n\nDuke ran up to Butch and let out a quiet whine. Butch looked down at him and asked, \"You gotta go outside, Duke?\"\n\nDuke ran out of the room to the back door.\n\n\"Rocky. C'mon, boy,\" Butch called as he followed Duke.\n\nRocky ran out of the room and followed Butch. I sat up and stretched my arms.\n\nI heard the back door open and then Butch told Duke, \"Show your little brother where to go potty.\"\n\nI giggled softly to myself. 'Little brother'. Cute. When Butch came back in the living room, he sat down on the couch with me and set his hat on the coffee table. He put his arm around me and I laid my head on his shoulder.\n\n\"You have a good nap?\" he asked.\n\n\"Yeah. I needed that.\"\n\n\"So, tell me what's going on,\" he said.\n\nI told him how I had been having a rough time at home and at work and my boss told me to take two weeks off to get myself together.\n\nI looked at him nervously. \"And I thought... maybe I should come see you... I guess I should have called first... I don't know what I was thinking, just coming down here....\"\n\n\"Shh. It's okay. So... You're gonna stay with me... For two weeks?\"\n\n\"Here... Or at grandma's, or the motel... I guess.\"\n\nButch's expression changed to a look of hurt. \"You don't want to stay here, in my home?\" he asked.\n\n\"I didn't want to presume that, you know, you'd want me to be here, in your house.\"\n\n\"Are you kidding? I wouldn't let you go anywhere else,\" he said before chuckling and adding, \"I guess that means I got two weeks to convince you to stay with me permanently.\"\n\n\"I... I wasn't sure if you meant it,\" I whispered.\n\nMy eyes filled with tears and I closed them and sighed softly.\n\n\"Meant what?\" he asked.\n\n\"When you asked me not to go. When you asked me to stay with you.\"\n\n\"PJ? Look at me.\"\n\nI looked up at him as he grabbed me and pulled me onto his lap so that I was straddling him. We were now eye to eye.\n\n\"What are you saying?\" he asked. \"Are you thinking you might wanna move here?\" he asked. \"To be with me?\" he added quietly as his eyes glistened with unshed tears.\n\nI nodded. \"Yes. I think so.... But I... I'm scared, Butch.\"\n\nI laid my head on his shoulder and let the tears fall as Butch wrapped his arms around my trembling body, one hand on the back of my head and the other around my waist. I could feel him shaking and his breathing was ragged. I heard him sniffle and I knew he was crying too.\n\nWe held each other for a few minutes and I suddenly became aware that Butch was no longer crying. His breathing was a little raspy and his hands were slowly moving around my body. I felt his cock hardening in his pants, pushing into me. I kissed his shoulder and then nuzzled my nose and lips into his neck and beard.\n\n\"I love you, Butch,\" I whispered into his ear. \"I missed you so much.\"\n\nButch leaned his head back and stared deep into my eyes.\n\n\"It's you, PJ, for the rest of my life. I love you, baby.\"\n\n\"Make me yours, Butch.\"\n\n\"You already are, PJ.\"\n\nButch wrapped his arms around me and stood up. I dropped to my feet and he grabbed my hand and led me to the stairs. A bark from outside had him cursing under his breath. He walked to the back door and opened it and Duke and Rocky came running in.\n\nButch grabbed my hand and dragged me up the stairs to his bedroom. He shut the door behind us and turned on the lamp on the nightstand.\n\nHe was kissing me hard as he pulled his clothes off. He pulled my shirt off and pushed me back towards the bed. I stepped on a hand towel and it crunched under my feet. I looked down and picked it up. It was crusty with dried semen, but still a little damp, obviously well used, and more than once.\n\nButch groaned and blushed in embarrassment and grabbed it out of my hand and tossed it into a laundry basket.\n\n\"I, uh... couldn't stop thinking about you,\" he said.\n\nI smiled at him, feeling a strange sense of joy that he had thought about me while pleasuring himself, and said, \"You've got the real thing here now.\"\n\nI knelt in front of him and pulled his boxer shorts down. His gorgeous cock sprung up in front of my face and I ran my tongue along the shaft. I wrapped both of my hands around it and still had a couple inches left over. I slowly but firmly moved my hands up and down. I took hold of the base and brought it down to my mouth. I slurped up and down the length of it, then taking him into my mouth and sucking him nice and slow. I massaged his large balls with my left hand as I worked him with my right.\n\n\"Fuck... That's good, baby... I missed your mouth...\"\n\nI looked up at Butch and moaned around his cock. My mouth and hand moved faster on him and I felt him trembling and his knees buckled. He wasn't going to last long. I felt his nuts pull up and his dick swelled.\n\n\"Baby, I can't hold it back anymore. You're gonna make me shoot.\"\n\nWith groan and a loud series of grunts, Butch grabbed my head and thrust his hips forward as he came hard. He shot a huge load into my mouth and I greedily swallowed every drop.\n\nButch pulled me to my feet and pushed me onto the bed. He pulled my pajama pants off and my hard dick snapped up against my belly. With a noise that sounded like a growl, Butch took me into his mouth and easily swallowed me to the root. I was so turned on and it felt so good, that I couldn't hold back. I moaned wantonly and called out his name as my climax hit me, sending my seed into his hot mouth.\n\nI pushed myself back onto the bed properly and Butch crawled in and pulled the sheet over us. I laid my head down on his furry chest and put my arm around him. His arm moved around me and he kissed the top of my head. We laid there together peacefully for a while when Butch's stomach growled loudly. I started to giggle and I rubbed my hand over his furry belly.\n\n\"I guess we should get up and get you dinner,\" I said.\n\n\"I don't want to go out or cook. Let's just order a pizza.\"\n\n\"That sounds good.\"\n\nButch gave me a kiss and then pushed himself out of the bed and pulled on his boxer shorts and his tank undershirt. I pulled on my pajama bottoms and t-shirt. We headed downstairs to the living room. I stopped in my tracks when I looked in the corner of the room. Duke was laying on his big doggy bed, surrounding Rocky, who was on the bed with him, curled up in a little ball. Rocky opened his eyes and lifted his head up at me. He blinked at me and then put his head back down. It was the cutest thing I had ever seen.\n\n\"That is so sweet,\" I said.\n\n\"Looks like Rocky likes his new brother.\"\n\nButch kissed my temple, then grabbed the phone to order the pizza.",
        "***\n\nThat night Butch was all over me as soon as we got to bed.\n\n\"Turn over. Spread your legs,\" he growled huskily.\n\nI instantly obeyed him. He moved between my legs and spread my cheeks with his hands. I cried out when his tongue ran over my hole. I pulled a pillow to my face and gripped it. His tongue was driving me insane. I writhed around on the bed as he licked and probed.\n\n\"Butch, please... I need you...\"\n\n\"Roll over, baby,\" he growled.\n\nI turned over onto my back as Butch pulled away. He grabbed the lube and I spread my legs for him. He moved between my legs and I watched him pour lube onto his hand. He slid a finger into me and I threw my head back and moaned. I had two fingers in me before I knew it. I was panting as he finger fucked me, twisting and stretching while probing and pushing at my prostate. By the time he added a third finger, I was on the verge of coming all over the place.\n\nI grabbed at his arms and pulled him up. \"Make love with me, Butch. I need you inside me.\"\n\nButch didn't deny my request. He quickly lubed up his thick erection and knelt between my legs. He grabbed my hips and pulled me up, locking my legs around his waist. He slowly pushed inside me and I groaned at the sudden burst of pain. He remained still. I closed my eyes, willing myself to relax, and ran my hands up and down his chest, resting them on his soft hips. I urged him to move as I pushed my hips back against him.\n\nButch groaned and grabbed my waist and began sliding in and out of me. He slowly rocked in and out of me, driving me crazy as he brushed against my hidden bundle of nerves. I reached between my legs and Butch grabbed my wrists. I whimpered in frustration as he pulled my arms above my head and pinned them to the bed.\n\nButch leaned over me and I tightened my thighs on his hips. He kissed me passionately and began moving faster. His hands tightened on my wrists. His mouth moved down to my neck.\n\n\"Harder, Butch,\" I gasped. \"I need it so bad...\"\n\nHe growled and jackhammered into me hard and fast. He gripped my wrists tighter. My fists clenched and unclenched as I moaned his name over and over.\n\n\"Butch... Don't stop...\"\n\n\"You are so fucking hot, baby,\" he whispered in my ear.\n\nHe was sucking and biting hard on my neck and I was building up fast. I balled my hands into fists and pushed my dick up into his belly. I was so close.\n\nI let out a sob. \"Butch!\"\n\n\"Come for me, baby,\" he whispered into my ear and I lost it.\n\nI arched my back and my entire body tightened.\n\n\"Butch!\" I screamed as I experienced the hardest, most intense orgasm of my life.\n\nI breathed in shallow gasps as I spurt my seed all over our bodies. Butch was pounding my ass hard and when I came, he couldn't hold back. He shouted my name and then slammed into me one last time as his cock jerked inside me. I felt it throbbing and jerking as it pulsed jets of hot come into my contracting tunnel.\n\n\"Oh god,\" I whispered.\n\nButch collapsed on top of me, his weight pinning me to the bed. His hands loosened and then let go of my wrists. I whimpered and wrapped my arms around him.\n\n\"Love you, baby,\" he whispered. \"Love you so much.\"\n\nI was so exhausted, I couldn't speak. Butch got up and grabbed his boxer shorts and wiped us down. He crawled back into bed and laid down on his back and pulled me to him.\n\nAs I fell asleep on his chest, I heard him whisper, \"Goodnight, my baby.\"\n\n***\n\nSaturday morning, Butch had to work and I got up with him. After a quick shower, we headed downstairs and both of us had a bowl of cereal. I told him I'd meet him for lunch and then kissed him goodbye as he hurried out the door. He headed to work with Duke and Rocky in tow.\n\nI sat on the couch alone. I hadn't really had a chance to really talk with Butch. I was still scared and I had doubts about what he wanted. Did he really want me to live here with him? Were we moving too fast? Did he really mean it was forever? What was I going to do for work?\n\nI needed to call Jen to tell her where I was and give her my new phone number, but I didn't know what to say yet. Not to mention, I didn't want to have to hear her freak out, because that would only cause me to panic.\n\nI pulled my suitcases from my truck and brought them inside. I dug around and got dressed.\n\nI spent a couple of hours cleaning up around the house just for something to do and to keep my mind from thinking too much.\n\nI then decided to walk into town. It was only a couple miles, so it wasn't that far of a walk. I went to the park and sat for a while collecting my thoughts. I still had no idea what I was going to do. There certainly wasn't a demand in town for an IT help desk geek.\n\nI got up and walked over to Butch's store before lunch time and greeted Chris, who told me that Butch was in the office. I peeked into the office and tapped on the door.\n\nButch looked up at me from the papers he was reading. He was wearing his glasses again and I smiled really big.\n\n\"You look cute when you're concentrating on reading with your glasses on,\" I told him.\n\n\"Yeah, sure,\" he said sarcastically as he tossed the glasses onto the desk.\n\nI walked in and gave him a hug as he stood. He bent down and kissed me.\n\n\"You okay?\" he asked.\n\n\"Yeah. I'm fine.\"\n\nHe frowned, but nodded. \"Okay. You ready for lunch?\"\n\nI nodded and he grabbed his hat and we headed over to Lucille's. I opened the door for him and then followed him inside.\n\n\"Well, Butch, look at you,\" Lucille said to him. \"You been moping around for weeks, so what's got you all smiles today?\"\n\nButch stepped to the side and put his hand on my back, bringing me up next to him.\n\n\"Oh, I see,\" she said as she gave me a smile.\n\nWe sat down in a booth and she brought me a Coke and Butch a sweet tea. After we gave her our lunch order, Butch excused himself to use the restroom.\n\n\"You here for good, then?\" she asked me.\n\n\"I think so.\"\n\n\"You 'think so'? It broke Butch's heart when you left. If you leave him again...\"\n\n\"I don't want to hurt him. It's just... a lot,\" I said with a sigh.\n\n\"I bet you like to over-think things. Just decide with your heart, sweetie. You'll do the right thing.\"\n\nShe patted my arm and I smiled at her as she left to put in our order with the cook.\n\nAfter Butch and I had lunch, we walked back to his store. We headed out back to check on Duke and Rocky. They were still running around playing.\n\n\"Butch, we have to talk.\"\n\nHe shifted nervously. \"Okay...\"\n\n\"Are you sure, Butch? About us?\"\n\n\"Of course I am, PJ.\"\n\nButch took my hand. \"What's wrong?\" he asked.\n\n\"It's just... We've only known each other such a short time. This is a really big decision. I'm talking about me quitting my job... Selling my condo... Moving halfway across the country... I just want to be sure.\"\n\n\"PJ. You're my soul-mate. I've never felt this way about anyone. And I know that I never will. I know that it's scary for you, baby, but you're mine. Your place is here with me. In my home. In my bed. Look at Duke and Rocky. They're brothers now. They belong together. Just like we belong together.\"\n\n\"I want that, Butch. I want forever with you. You know I do. But I'm terrified.\"\n\n\"I know you are.\"\n\nButch put his arms around me.\n\nI sighed. \"And what am I gonna do for work? You don't happen to have any open positions?\" I said with a chuckle.\n\n\"On top of you, face to face, is best. But doggy ain't so bad either.\"\n\n\"Pig.\"\n\nButch laughed loudly and I joined in.\n\n\"Seriously though, if I didn't have Chris, I'd hire you. He's expecting his first child, so I can't just let him go. I just don't have enough work for two people, especially at this time of the year.\"\n\n\"God, I wouldn't expect you to do that to Chris. I was just joking with you.\"\n\n\"Don't worry, we'll figure something out.\"\n\n***\n\nThat evening we were in the backyard grilling chicken on the barbecue. Our dogs were playing in the back yard. I looked over at my man. He was flipping the chicken, then brushing it with sauce. He licked his fingers and shut the grill lid.\n\nI walked up behind him and put my arms around him, laying my cheek against his back and inhaling his masculine scent.\n\n\"Butch... Can it be like this forever?\"\n\n\"Forever, PJ. I told you. You're mine. You ain't ever getting away from me.\"\n\n\"Promise?\"\n\nButch turned around and took me in his arms. \"I promise,\" he reassured me.\n\nI knew that I was sounding pathetic, needing to be constantly reassured, but I couldn't help myself.\n\nHe leaned down and kissed me slowly and deeply. His tongue pushed into my mouth and teased and tickled mine. When he pulled back, I squeezed my arms around him and gave him a tight hug.\n\nAfter dinner, we sat together on the couch. Butch watched some sports highlights and I grabbed my laptop to look for a job.\n\n\"Crap,\" I muttered.\n\n\"What's wrong?\"\n\n\"I forgot you don't have Internet access.\"\n\n\"Sorry, babe. I'll call the phone company on Monday.\"\n\n\"I need to make a list of all the things I need to do on Monday. I have to call my boss. I have to call Jen. I need to find a realtor. I'm gonna need to go back and pack. You should come with me. See Chicago. We can fly up there and have a moving company haul whatever we decide we want to keep.\"\n\n\"Sure, baby. I'd like to see your home.\"\n\n\"This is my home now.\"\n\nButch looked at me. His blue eyes darkened. \"You're definitely getting laid tonight,\" he growled.\n\nI laughed at him and returned my attention to my laptop. I typed up my 'To Do' list while Butch watched TV, then synced my phone to my iTunes.\n\n\"Butch?\"\n\n\"Yeah?\"\n\n\"Don't you have a website for your business?\"\n\n\"No. Can you make me one?\"\n\n\"Sure. It'll give me something to do.\"\n\nWhen I got Butch to bed that night, I pushed him flat onto his back and straddled him. I grabbed the lube and poured it onto his hard cock. I smeared the lube all over his thick eight inches, then held it upright as I slowly slid down onto him. I braced myself on his belly and threw my head back, holding still until I was stretched enough to take him.\n\nButch's hands moved up to my hips. \"Ride me, baby. Fuck my cock.\"\n\nWith Butch's help, I bounced hard on him, up and down his shaft. I found the right angle to hit my prostate repeatedly and Butch thrust up into me to make sure I felt the maximum amount of ecstasy with each thrust.\n\nWhen Butch's cold, lubed up hand wrapped around my leaking and throbbing dick, I cried out. I grit my teeth and bore down.\n\n\"Yeah, that's it. Come for me, baby.\"\n\n\"Butch! Yes!\"\n\n\"Oh fuck, yeah! You're gonna get my load. I'm gonna shoot it up your tight little butt.\"\n\n\"Oh god, Butch!\"\n\nButch's fist was flying up and down my shaft. My mouth fell open to scream, but no sound came out as I exploded. I covered Butch from chin to stomach in hot semen.\n\nButch grabbed me and in one swift move, rolled me onto my back. He loomed over me and ruthlessly pounded into my ass. With a roar of my name, he shoved into me and filled me with his load.\n\nAs we laid cuddled up together, I let out a quiet sigh.\n\n\"Butch?\"\n\n\"Hmm?\" he responded, half-asleep.\n\n\"What we have... Is it... I mean, just a look from you and I want you so bad it hurts.\"\n\n\"What? You're scared that what we have is just lust?\"\n\n\"Yes. No. I don't know. I've never been like this with anyone else.\"\n\n\"PJ. You gotta stop over-analyzing things and just... live.\"\n\nButch kissed my forehead. \"We're newly in love. We're gonna have sex. And lots of it, if I have my way.\"\n\nHe nipped my nose with his teeth and we laughed.\n\n\"You're right,\" I said. \"I think too much.\"\n\n\"Damn straight.\"\n\n***\n\nMonday morning, I went with Butch to work so that I could use his computer and take some pictures to put on the web site.\n\nI called Jen first. She was shocked when I told her that I was in Georgia. And that I was moving in with Butch. For a second I thought we had been disconnected because she was speechless. She said she was happy for me, but she was going to miss me. She also said I needed to tell mom and dad, but I wasn't ready to do that yet. I asked her to help me with a realtor, and I'd see her when we returned to pack my things.\n\nButch called the phone company to order DSL for the house and the office. He handed me the phone when they started asking him questions. I ordered the middle package for his office and the highest speed package for home.\n\nI then called my boss and gave him my notice. He was surprised, but didn't seem that upset that I was going. He told me that I could just take the next two weeks as my last vacation. I told him I'd be in the office within a week to turn in my phone, my ID badge and other things.\n\nI then booked tickets for us to fly to Chicago on Friday.\n\nI hung out a Butch's store for the next couple of days, with nothing really to do but work on his web page. It was a very simple design, with a picture of Butch and Chris standing in front of the building. It included the store hours, email address and phone numbers, as well as a paragraph explaining what they offered. When I showed it to Butch, he loved it and I got a hug and a kiss from him.\n\nBesides that, the only 'excitement' I had was when I installed one of the wireless routers I ordered off the Net and connected it to the newly installed DSL in Butch's office. The other one I had installed at home. Butch was impressed that I could get on the Internet on my laptop from anywhere in his store now.\n\nLater that day, I was hanging out with Chris behind the counter when Mr. Murray, the man who owned the sporting goods shop, came in with his laptop and asked me to look at it.\n\n\"I was talking to Butch and he said you know computers,\" Murray said. \"It's running real slow and it keeps telling me I have viruses.\"\n\nI fired it up and took a look. It was completely overrun with spyware was practically unusable. I had it fixed for him by the end of the day and made a quick $50.\n\nI showed the check to Butch and said, \"We're having steak tonight,\" with a laugh.\n\nButch laughed. \"You're so damn smart. I'm proud of you, babe.\"\n\nOn Thursday, I walked into town to have lunch with Butch as always. I said 'hi' to Chris and we chatted while I waited for Butch to finish up with a customer. I heard the clopping of Butch's boots and I turned around. He was beaming when he saw me.\n\n\"I figured out what you're gonna do, baby,\" he said excitedly.\n\n\"What?\"\n\n\"After lunch.\"\n\nWe walked down the street to the deli and ordered sandwiches and ate them in the park. After lunch, we walked down the street back towards Butch's store. I was sipping a Coke while Butch had a smoke.\n\n\"So, what were you going to tell me?\" I asked.\n\n\"We're almost there.\"\n\nWe walked past Lucille's, then passed the sporting goods store, then stopped in front of Grandma's empty storefront.\n\n\"We're here,\" Butch said.\n\nI looked at the empty store. It had a 'For Sale' sign in the window, but was otherwise empty and sad looking.\n\n\"I don't get it,\" I said.\n\n\"Your grandma's store.\"\n\n\"You think I should re-open Grandma's arts and crafts store? I'm not *that* gay.\"\n\n\"No,\" he laughed. \"Open a computer repair shop.\"\n\nButch was grinning, obviously pleased with himself.\n\n\"What? That's crazy. I don't know anything about running a store. Is there even enough work to keep me in business?\"\n\nButch frowned. \"We don't have anything like that here. You could fix computers. Give lessons. People would come to you for help. I know they would. Plus, I can help you. I know a thing or two about running a business.\"\n\nI thought about it for a second.\n\n\"I guess I could sell computers as well. Or maybe have a few machines set up that people can use by the hour to get on the Internet, like an Internet caf\u00e9...\"\n\nButch was grinning at me and his enthusiasm was catchy.\n\n\"Call the realtor,\" Butch said.\n\nI called the number and spoke with Mr. Madsen. I told him I was moving here and I wanted to keep the store space. I already owned half of the shop, so I would just need to buy out Jen's half if I wanted to own it outright. I told him that I could do that when I sold my condo in Chicago. He said he'd get everything worked out and he'd take the listing down. He then asked if I would be buying my grandma's house. I told him that I already had living arrangements. He didn't really respond to that, not that I really cared what he thought.\n\nAfter I hung up the phone, I looked at Butch and grinned. He grabbed me in a big bear hug right there in front of the store and I giggled excitedly.\n\n***\n\nWhen we touched down in Chicago on Friday afternoon, I thought Butch was about to have a nervous breakdown.\n\n\"I fucking hate flying,\" he grumbled. \"Fucking hate it. I need a smoke.\"\n\nHe pulled his camo hunting cap down low over his brow and stormed through the airport with a scowl on his face. I was practically running to keep up with him.\n\n\"Slow down, you big lug,\" I whined.\n\nI checked in at the car rental kiosk and we headed out to take the shuttle to the rental facility. While waiting for the shuttle, Butch lit a smoke and took a deep drag and held it before exhaling. It seemed to calm him down a little.\n\n\"Thanks for coming with me,\" I said quietly. \"I means a lot, especially knowing how much you hate planes.\"\n\nHis face softened. \"I'd do anything for you, baby. Sorry I was being a grump.\"\n\nI looked up at him and smiled warmly and he winked at me and took another drag of his smoke.\n\nI pulled out my phone and turned it on. I saw that I had a voice mail and groaned when I saw Dad's name and number. I wondered how he got my new number. I guess Jen gave it to him. He sounded really pissed when he asked me to call him back ASAP. I deleted the message and shoved the phone back into my pocket.\n\nAbout an hour later, we were pulling into the garage of my condo townhouse. Butch grabbed our bags and we went inside.\n\n\"Wow, this is nice, PJ,\" Butch said as he looked around.\n\nI shrugged. \"It's not bad, but it's not nearly as nice and comfortable and homey as your home.\"\n\n\"Our home,\" he corrected.\n\n\"Our home.\"\n\nHe walked into the living room and looked at the 46\" flat panel TV. \"We're taking that, right?\" he said.\n\nI laughed. \"Sure. If there's anything you want, we can take it. I thought maybe we'd take some of my bedroom furniture and put it in the guest bedroom, if that's okay.\"\n\n\"Sure. That furniture's old and crappy.\"\n\n\"I'd like to take my office furniture, too. But I'm not attached to anything else.\"\n\nButch sat down in one of the leather club chairs and leaned back, linking his fingers behind his head. \"Nice. Can we take these, too?\"\n\nI gave Butch a tour and we made note of the few things I might want to bring. We ended up in my bedroom. Butch came up behind me and put his arms around me. He leaned down and nibbled my ear.\n\n\"Your house is nice, baby. But everything is so clean and uncluttered. I don't see any of your personality here.\"\n\n\"Jen came by and cleaned up and boxed up a lot of my personal stuff to show it off to prospective buyers. But even so, I never took the time to paint the walls or really decorate the place. I just lived here. When I look at it, it reminds me of how lonely I was.\"\n\nButch turned me around in his arms and leaned down and kissed me passionately. My arms moved around my lover's bigger and taller body and I returned his kiss.\n\n\"I love you,\" I said.\n\n\"I love you, too.\"\n\nButch pushed me back onto the bed and crawled on top of me. I instinctively spread my legs for him as he settled his big body on top of me.\n\nI moaned in pleasure as he sucked on my neck. He licked up my neck and nibbled my ear and my body shuddered as he whispered into my ear, \"I'm gonna fuck you, PJ. Gonna make you mine, right here in your old bed. Gonna make you come with my big cock, then I'm gonna shoot my load inside your hot little ass.\"\n\nI whimpered and quivered as Butch pulled all of my clothes off, leaving me completely naked on the bed. He was still fully clothed, even still wearing his cowboy boots and his camouflage hunting ball cap. I pulled his cap off and tossed it aside and ran my hands over his short hair. I reached between our bodies and unbuckled his belt, then unzipped his jeans. I pushed them down his butt and his erect cock sprung free.",
        "\"Now, Butch. Take me now.\"\n\n\"Lube?\" he asked as he pulled open the nightstand drawer. He pulled out the small bottle of lube. A smile moved across his face and he pulled out a DVD case. I closed my eyes and groaned in embarrassment when he showed me the 'World of Men' DVD with Axel Ryder on the cover.\n\n\"You won't be needing this anymore,\" he chuckled and tossed it back into the drawer.\n\nHe quickly got me stretched and ready to take him. And he soon had the head of his generous cock pushing against my entrance. I wrapped my legs around him and moaned as he slid into me. I grabbed at his still clothed back, moaning and whimpering. As he began thrusting, he lowered his mouth to me and kissed me hard.\n\nI pulled his shirt up so that I could run my hands over his bare skin. I pushed my hips back at him, rubbing my hard and leaking dick against his padded furry belly.\n\nI was panting hard, and high-pitched whimpers spilled out of my mouth every time he bottomed out. I was writhing underneath him. My back arched, pushing myself closer to his body.\n\n\"God damn, baby,\" Butch grunted. \"Love the way your body responds to me. Love those little sounds you make. You're the best fuck I ever had. Oh sweet Jesus, you're gonna get my load.\"\n\nI moaned loudly at Butch's words, pulling him in closer to me with my hands and legs.\n\n\"I want your load, Butch,\" I whispered huskily. \"Give it to me. I love it when you come inside me.\"\n\nButch growled and sped up his movements, pounding me harder and faster, slamming into me over and over. My bed thumped against the wall as my boyfriend ravaged my ass.\n\nHis body continuously rubbing over my dick and his cock rubbing against my prostate was too much for me. My climax was quickly building.\n\n\"Come for me, baby! Make me shoot inside you!\"\n\nEvery muscle in my body tensed and then I exploded in an intense release. With a cry of his name, I sprayed come all over our bodies. At the same time, my tight tunnel contracted around him and he shouted my name and thrust erratically as he pumped his seed deep inside me.\n\nButch collapsed on top of me. I felt his full weight on me and his breathing changed. I knew before I heard the snoring that he had fallen asleep, still on top of me and inside me.\n\n\"Butch,\" I grunted.\n\nI pushed him to roll over and he woke enough to roll us over so that he was on his back. I cuddled up to his chest and joined him in sleep.\n\n***\n\nAfter we woke from our nap, we took a shower together then quickly got dressed. We were meeting Jen for dinner and she'd be here any minute.\n\n\"You look so handsome,\" I said as I ran my hands down Butch's shirt. He was wearing a white Polo shirt and a pair of navy Dockers. He had only brought his cowboy boots and so he had those on as well. He looked very sexy.\n\nWhen the doorbell rang, I opened the door for Jen and gave her a big hug. She then gave Butch a hug as well and that made me really happy.\n\nWe got into our rental SUV and I drove us to the restaurant. As we drove, she told us that we had a couple of potential buyers that seemed really interested in my house and I'll hopefully have at least one offer soon. I then told her that I wanted to buy her half of grandma's store.\n\n\"I know,\" she said. \"The realtor called Dad. Dad asked me what was going on.\"\n\n\"Shit.\"\n\n\"Have you talked to him?\"\n\n\"No. After the way he treated me, I don't have anything to say to him.\"\n\n\"He's your dad, baby,\" Butch said as he squeezed my hand. \"You'll regret it later if you cut him out of your life.\"\n\n\"Maybe. I just need a little more time. Maybe if he hadn't hit me, I could bring myself to deal with him.\"\n\n\"He hit you?\" Butch said, his voice raising in volume.\n\nI looked at him out of the corner of my eye. His eyes were narrowed and his face was turning red. I could see him clenching his jaw and grinding his teeth.\n\n\"I don't want to talk about him,\" I said as I pulled into the parking lot.\n\nWe got out of the truck and walked towards the front door.\n\n\"PJ... Don't be mad at me,\" Jen said quietly, her eyes filling with tears.\n\nI looked at her questioningly and took her hand. \"Why would I be mad at you?\"\n\nI looked up to see Mom and Dad walking towards us. I pushed Jen's hand away and folded my arms across my chest and scowled. Butch rubbed a circle in my back with his hand and whispered into my ear, \"It's okay, baby. Relax.\"\n\nI took a deep breath as Mom gave me a hug. She looked at Butch nervously and then shook his hand. Dad glared at me and didn't say a word, then walked past Butch without acknowledging him. I could tell that this was going to be a really fun evening.\n\nWe walked into the restaurant and Jen told the hostess we had a reservation. We sat down at the table and the waitress greeted us and took our drink order.\n\n\"So, Philip. What's new?\" Dad asked me, his voice dripping with sarcasm.\n\n\"I'm moving to Georgia. To be with Butch. We're in love.\"\n\n\"Love. Right.\"\n\nI ignored his snide comment. \"I'm going to open a computer shop.\"\n\n\"I wasn't aware that you knew anything about running your own business.\"\n\n\"Butch runs a very successful business. He's going to help me.\"\n\nThe waitress appeared then to take our order, interrupting the uncomfortable conversation. After she left, Jen tried to steer the conversation to other topics, leaving Dad to seethe quietly.\n\nThe food was really good and I tried to enjoy it, but the entire meal was just uncomfortable. I could tell that it was stressing Butch out as well, but he mostly remained quiet the entire dinner. When the bill came, I took it and put my card in the presenter and gave it back to the waiter. After he brought the receipt back, I wrote in the tip and signed it and stood up.\n\n\"Thanks for a lovely dinner,\" I said with a fake smile on my face.\n\nButch stood and we walked out of the restaurant with Jen scurrying behind us.\n\n\"Don't you walk away from me, boy,\" Dad said angrily as he stormed up behind me.\n\nI stopped and turned to face him.\n\n\"What, Dad? I don't think we have anything more to say to each other.\"\n\n\"You are not moving in with this man. And you are not buying that store. I forbid it.\"\n\n\"You 'forbid' it? I'm 28 years old. I can make my own decisions.\"\n\n\"I won't let you ruin this family's reputation. I gave you everything. I gave you my name. And this is how you repay me? You are nothing but a selfish brat.\"\n\n\"I'm selfish? You're such a hypocrite,\" I scoffed. \"Being gay and living with my life partner isn't going to ruin our family's reputation. Your business practices and personal life will do that without any help from me.\"\n\nDad's face turned red with anger. He stepped up to me, but Butch moved between us and pushed his chest up against Dad.\n\n\"You better back off,\" Butch warned him. \"You lay a hand on PJ and you're gonna have me to deal with. I'm not afraid to hit back.\"\n\nMom glared at me. I realized then that she knew what I was talking about and she didn't like me bringing it up one bit. It ruined the illusion of our perfect family. Maybe she could live with Dad's cheating and his sleazy law practices, but that didn't mean I had to.\n\n\"I'll be in the car, Philip,\" Mom said as she gave Dad a scowl. She turned on her heels and walked away.\n\nDad looked at me with cold eyes. \"You're no longer part of this family.\"\n\n\"Fine!\" I shouted. \"I don't need you. Just stay out of my life or I'll make sure everyone knows all of your little secrets.\"\n\nWith that, Dad turned and walked away. A choked sob from Jen had me turning to her. I hugged her and held her for a minute while she cried.\n\n\"I'm sorry,\" she cried.\n\n\"It's okay.\"\n\n\"Give him time. He'll come around.\"\n\n\"No. He won't.\"\n\nI took her hand and said, \"Come on. Let's go.\"\n\nI was trying to be strong and hold myself together. I got in the drivers seat of the SUV and shut the door. My hands were shaking as I tried to put the key into the ignition. I took a deep breath and tried again to get the key into the slot. \"It won't fit,\" I mumbled to myself.\n\nButch grabbed my hand and I looked up into his eyes. He was looking at me with concern all over his face. That did it. I hung my head down and started to cry. He leaned over and took me into his arms and my crying turned to full blown sobs. I could feel him rubbing my head and back, peppering light kisses on my head.\n\n\"It's okay, sweetheart,\" he whispered. \"It's okay... I love you so much, PJ.\"\n\nI looked up at him and sniffled and wiped my face and my nose. He cupped my face in his hands and pressed his lips to mine softly and tenderly.\n\n\"Do you want me to drive?\" he asked.\n\nI nodded and gave him the keys. He got out out of the truck and we switched seats. He backed out of the parking lot and as we pulled onto the road, he reached over and took my hand. I interlinked my fingers with his and sat quietly.\n\n\"You really do love my brother, don't you?\" Jen asked Butch quietly from the back seat.\n\nI saw him looking at her in the rear view mirror. \"More than anything. He's my soul-mate.\"\n\nHe pulled my hand up to his face and kissed the back of it, then returned our hands to rest on the console between our seats.\n\n\"Thank you, Butch,\" she replied back and she reached up and rubbed his arm.\n\nButch easily found our way back to my condo with minimal directions from me or Jen. Once we arrived, Jen didn't want to stick around. She reminded me that we were both meeting with the realtor the next afternoon and that one of the potential buyers wanted to take a second look. She gave both of us a hug and a kiss on the cheek and then left for the night.\n\n\"Take me to bed, Butch,\" I said as I wrapped my arms around him. \"Show me how much you love me.\"\n\nButch took my hand and we retired to my bedroom. We slowly stripped down naked and I crawled into bed, pulling him on top of me.\n\nWhen he entered me while looking into my eyes, I nearly came undone. He moved slowly, but steadily in long strokes, in and out. The slow grind along my prostate was intense. His blue eyes never wavered from mine. He was holding back as he slowly built me up to an explosive climax. As my body contracted, I broke eye contact with him. My back arched and my head flew back and my eyes rolled back in my head. Colorful explosions of light danced in my head as I cried out Butch's name, and my hot come splattered all over our chests and stomachs. Simultaneously, Butch groaned and gasped as his cock jerked and pumped me full of his cream.\n\n***\n\nThe next morning, Butch dragged me out of bed and pulled me into the shower. We started kissing and our kisses and touches grew more passionate. He pinned me against the shower wall, holding my arms above my head, while kicking my legs apart with his.\n\n\"I'm gonna fuck you so good, baby,\" he growled.\n\nHe squatted down and positioned himself between my legs, pushing up. The head of his cock found its target and he slid right in. I wrapped my left leg around him as he pinned me to the wall and thrust up into me. Butch let my arms go and I wrapped them around his neck, holding on tight as he slammed into me.\n\n\"Fuck, I love your tight little ass! You like my cock, baby?\"\n\n\"I love your cock, Butch,\" I moaned. \"It's so big, so thick, so... Oh god, you make me feel so good.\"\n\n\"Is my big cock gonna make you come, baby?\" he grunted.\n\n\"Oh, Butch... I'm getting so close... Please...\"\n\n\"Who's your man?\" he grunted.\n\n\"You are.\"\n\n\"Who owns this ass?\"\n\n\"You do,\" I panted. \"Butch, please, don't stop... don't... stop...\"\n\n\"Come with me, baby.\"\n\nButch bit down on my shoulder and groaned as he thrust hard up into me. I think I screamed as I climaxed. Butch groaned and grunted into my shoulder as he came. When he finally let go of me, I nearly slid down the wall onto the floor, but he caught me and pulled me to him.\n\nAfter we dried off each other and I went into my closet and got dressed. When I walked back into the room and looked at Butch, I laughed because we ended up dressed alike. I was wearing a plain black t-shirt with jeans. Butch had on a black t-shirt with the Harley-Davidson logo and a pair of jeans. I blushed when he caught me staring at the big bulge in his crotch. I knew his body very well and I could tell exactly where his flaccid penis was laying. He pulled on his boots and I put mine on as well.\n\nHe put his hunting baseball cap on and I decided not to put mine on because I didn't want to look like we were trying to match. While Butch ordered some subs for delivery, I changed the sheets and made the bed, then started straightening up the house.\n\nJen arrived shortly after we finished up lunch, and the realtor arrived within minutes. I was quite happy that she had an offer with her. She and Jen said they were a newly married couple, just moving into the city.\n\nThe other man interested in buying the house arrived on time for his second look with his realtor. He also had another man with him, and it was obvious that they were a couple. I gave Butch a knowing smile. Butch and I followed them through the condo since they were asking me all kinds of questions about the house, as well as the neighborhood.\n\n\"This is a great place,\" he said. \"Why are you selling it, if you don't mind me asking?\"\n\n\"I'm moving to Georgia,\" I answered. I looked up at Butch and smiled at him. He put his hand on the small of my back.\n\n\"Oh, I see,\" the man grinned.\n\nWe let them have some alone time to discuss things. Their realtor then brought an offer letter to mine. We stepped out onto the balcony to discuss it. Even though the gay couple's offer was below the other, I told her to accept their offer and if it fell through to go with the other.\n\nAfter they were gone, I was so relieved to have that over with. The moving company was coming Sunday afternoon, so we had a day to pack up my personal things and the furniture we wanted to keep. Jen said she'd take care of the rest of the stuff, sell it or donate it. She also said she'd be at the closing in case anything came up, so I was glad that I wouldn't have to come back in a month. Once I got the check, then I'd pay her for her half of Grandma's store.\n\nAfter Jen was gone, Butch and I plopped down on the couch with a beer.\n\n\"I'm so glad that's done,\" I said with a sigh.\n\n\"PJ? If you don't mind my asking... How much did you sell this place for?\"\n\n\"I don't mind. You're my partner. I don't have any secrets from you. I sold it for $545.\"\n\nButch nearly choked on his beer. \"Thousand?\"\n\n\"Yeah,\" I blushed.\n\n\"That's like three times what my house is worth!\"\n\n\"Well, it's the location.\"\n\nButch shook his head and took a sip of his beer.\n\n\"Does it bother you?\" I asked. \"I know a lot of that will probably end up going into the business. But the rest... it's ours to do whatever we want with. If you want to make improvements to our home or your business, I'm okay with that.\"\n\nButch shrugged and looked away. \"I guess. We'll see.\"\n\n\"Butch. Tell me what you're thinking.\"\n\nButch sighed and looked at me. \"It's stupid.\"\n\n\"Please.\"\n\n\"It's... I feel like I'm supposed to provide for us, you know. I'm the man. I mean, I know we're both men, but that's how I was raised. I'm supposed to take care of you.\"\n\nHe reached over and brushed the hair off my forehead.\n\n\"But you've got all this money,\" he continued, his voice softer. \"I feel like you don't need me.\"\n\n\"It's not that much money, all things considered. And you're wrong. I do need you. What you give me, money can't buy. Last night, you took charge when I fell apart. How can you say I don't need you? I needed you then and you took care of me. Just like you always do, and like I know you always will.\"\n\n\"C'mere,\" he said as he crooked his index finger.\n\nI leaned in and we kissed tenderly.\n\nWe spent the afternoon packing and re-arranging furniture. We made sure we put everything we wanted the movers to take into a couple of locations.\n\n***\n\nI drove us down to Boystown so we could have dinner and then maybe have a drink. He had a look of shock on his face when he saw two guys walk past us holding hands.\n\nWhen he reached down and took my hand, it was my turn to look shocked. My shock quickly turned to glee as I walked down the sidewalk holding my partner's hand. We walked and browsed around some of the shops.\n\nI was looking around an antique store while Butch stood around pretending not to be bored. I thought maybe I should get Chris and Tish something since they were nice enough to look after our dogs while we were out of town.\n\nA guy walked up to Butch and started talking to him. Butch was being his normal friendly self, but I could tell that the guy was flirting with him. He was looking Butch up and down and when his eyes rested on the bulge in Butch's crotch, I had had enough. \n\nI walked over to Butch and took his hand. \"I wanna show you something,\" I said as I led him away from the guy.\n\n\"What did you want to show me?\"\n\n\"Nothing. That guy was flirting with you,\" I said, annoyed.\n\n\"I know.\"\n\nI frowned. \"You knew?\"\n\n\"I'm not stupid, baby. But what do I care,\" he said with a shrug. \"I've got you. I'm not interested in him. Or anyone else. Wait. Are you jealous?\"\n\nI huffed. I was going to deny it. \"Yes, I'm jealous. You're mine. I'm not gonna let someone steal you away from me.\"\n\nThe corners of Butch's mouth turned up slightly as he tried not to smile. \"Trust me, baby. No one is going to steal me away from you.\"\n\n\"I don't mean to be insecure, but...\"\n\nButch leaned down and kissed my forehead. \"Don't worry about it. C'mon. Let's go.\"\n\nHe took my hand and we left the store.\n\nWe stopped and had a casual dinner. We were talking and laughing and it felt really good to be able to touch Butch in public. At one point, he even leaned over the table and kissed me.\n\nAfter dinner, we walked hand in hand while Butch smoked a cigarette. We passed a bar and I asked if he wanted a drink. We went inside and Butch pushed up to the bar and ordered a couple of beers. We found an empty table and sat down. We were having a really good time talking and laughing, even kissing a little bit.\n\nWe had just enjoyed a steamy kiss with lots of tongue. My face was flushed bright red and Butch was smirking, obviously pleased with himself for causing that reaction.\n\n\"PJ?\" a familiar voice called out.\n\nI turned, surprised to hear my name. I looked up in shock to see my ex-boyfriend, Larry, walking up to the table.\n\n\"I thought that was you,\" Larry said as he sat down at our table.\n\nButch's arm moved around my shoulders and he pulled me slightly closer to him in a show of possession.\n\n\"I'm surprised to see you here,\" Larry said, looking between Butch and myself.\n\n\"Larry, um... This is Butch, my partner. And Butch, this is Larry.\"\n\n\"Larry the ex?\" Butch asked with a raised eyebrow.\n\n\"Ah, I see you've been talking about me. Not all bad, I hope,\" he said with a wink. \"So... Partner, huh?\"\n\n\"Yeah,\" I said with a grin. \"So where's what's-his-name? Tristan was it?\"\n\n\"Eh. That didn't last,\" Larry said casually. \"I'm seeing Zak now. That's him over there in the red.\"\n\nMy mouth fell open at the sight of the very young blond haired twink chatting with another young guy. When he saw us all looking, he smiled and waved.\n\n\"Christ. Does his mommy know he's out past curfew?\" Butch asked and I burst out laughing.\n\nLarry shot Butch a hateful look, but Butch didn't flinch. He met his stare and took a drink of his beer.\n\nWhen he saw he wasn't going to win the staring match, Larry turned his gaze back to me. \"So, PJ. We should get together for dinner sometime. Catch up. Just the two of us.\"\n\n\"We're flying out on Monday,\" Butch said before I could respond. \"So, that's not gonna happen, bub.\"\n\n\"I'm moving,\" I explained as I tried not to smile at Butch's jealousy. \"To Georgia.\"\n\n\"You're what?\"\n\n\"I'm moving in with Butch. My house is already under contract and we're flying back home on Monday.\"",
        "\"No shit? Well. Good for you, I guess.\"\n\n\"I couldn't be happier,\" I said. I gave Butch a smile and he bent down and kissed me.\n\nWe said goodnight to Larry and got up and left. As soon as we got out side, Butch lit a smoke and grabbed my hand as we walked back towards our rental car.\n\n\"What an asshole,\" Butch said as he exhaled.\n\nI chuckled. \"Yeah. But you don't need be jealous, you know.\"\n\n\"What? I ain't jealous of that piece of shit.\"\n\n\"If you say so,\" I smiled.\n\n***\n\nSunday night, we went out to a really nice steakhouse. Butch absolutely loved it. He said it was the best steak he ever had. I took care of the bill, which I knew he wasn't comfortable with, but he didn't say anything.\n\nWe spent all day Monday taking care of the last of my affairs, including returning all of my company's property to my boss.\n\nMonday night we were heading back home on a late flight. The plane wasn't very full, so it was nice and quiet and we had lots of room. I pulled up the arm rest between our seats and cuddled up to Butch. I thought it might soothe him because he was really on edge.\n\n\"Try to get some sleep,\" I said as they dimmed the cabin lights.\n\nHe shot me a look. \"You gotta be fucking kidding me,\" he grumbled.\n\nWhen we ran into some turbulence, Butch grabbed my hand and squeezed it tight. I thought it was really cute that he was scared, even though he about snapped my hand off.\n\n\"Ow! My big, tough bear,\" I chuckled.\n\nHe furrowed his brow and gave me a dirty look. Oops. I guess he wasn't in the mood for jokes.\n\nEven after the air calmed, he was still nervous and fidgety. I knew the perfect way to relax him. I looked around and there was no one in the seats around us and the flight attendants weren't paying attention.\n\nI slipped my right hand under the blanket on his lap onto his thigh. I gently squeezed it and rubbed up and down. He looked over at me with a raised eyebrow and I shot him a sly grin.\n\nMy hand moved to his inner thigh and slowly moved it up to his crotch. I could feel the beginnings of an erection underneath his jeans and I gently squeezed and rubbed. Butch drew in a sharp breath and fidgeted in his seat.\n\n\"Cocktease,\" he whispered with a hint of laughter in his voice.\n\n\"I'm not teasing,\" I whispered back.\n\nI managed to get his belt unbuckled and his jeans unbuttoned and unzipped. I reached into his boxers and squeezed his warm cock. It rapidly surged to full hardness in my hand. I managed to get it out of his boxers and I began slowly gliding my hand up and down his shaft. I teased the head with my thumb, smearing the pre-come that had oozed out of the tip. I marveled at how nice and easy it was to jerk him off with his foreskin.\n\nButch closed his eyes and leaned his seat back and I moved my hand up and down in a steady rhythm. Every once in a while, I'd twist my hand or tease the head with my thumb. After a few minutes, Butch's breathing grew faster and he was near panting. He was bucking his hips up into my hand, causing the blanket to slip down. I was now jerking him off in the open. If anyone walked by they would get an eyeful. Thankfully there was no one around.\n\nHis dick pulsed and throbbed and swelled and stiffened even further in my hand.\n\n\"I'm about to make a big mess,\" he hissed through clenched teeth.\n\nShit. I hadn't thought that far.\n\nButch stifled a grunt and brought his hand to the back of my head. He pushed me down onto his cock and I took him into my mouth as the first shot hit the roof of my mouth. I quietly moaned as he blasted a huge load of come into my mouth, causing me to swallow repeatedly to get it all down.\n\nButch's grip on my head loosened after he finished coming and I sat back up and wiped my mouth with the back of my hand. I looked around and no one seemed to have noticed what we'd done.\n\nButch sniffed, then put his cock away and did up his pants. His eyes were heavy and he looked at me and smiled. I could see how much he loved me in the expression on his face.\n\n\"Thanks, PJ. I'm gonna love you good when we get home, babe,\" he said quietly.\n\nWithin seconds, his eyes were shut and he was starting to snore softly. I cuddled up to him and his arm moved around me and pulled me to him. I laid my head on his shoulder and I fell right asleep.\n\nAs soon as we exited the airport terminal, Butch lit a cigarette and we walked to the parking deck where his truck was parked. A couple hours later we were pulling into the driveway.\n\nWe were home.\n\nWhen we opened the door, the dogs went crazy. They were so happy to see us. Rocky was always so happy to see me when I came in, but here he was running past me and jumping up onto Butch. The little traitor.\n\n\"What about your other Daddy? You don't love me anymore, Rock?\" I teased.\n\nI squatted down and Rocky yipped and jumped at me and I pet him and kissed his little head, then Duke pushed up to me for some love, too.\n\nDuke ran to the back door and looked at us, and I went and opened it and he and Rocky ran into the backyard. I waited for them to do their business and then Butch and I went up to bed.\n\nI was lying in bed naked under the covers when Butch moved on top of me, straddling my leg with his. He lowered his body onto me and kissed me slowly and sensually. I returned his kiss with passion as I rubbed my hands all over his broad back.\n\n\"I can't believe you're here with me,\" he said quietly.\n\n\"There's no going back now. You're stuck with me,\" I said with a giggle.\n\n\"I'll show you stuck,\" he said, trying to be sexy, which made us both laugh.\n\nButch grabbed the lube and began sucking my neck. His slippery fingers moved between my legs and stretched me out for him. He moved between my legs and knealt back onto his haunches. He grabbed my legs and pulled them up onto his thighs and I wrapped them around his waist. He grabbed the base of his cock and pointed it down towards me and slid forward into me.\n\n\"Aw fuck,\" he groaned. \"You feel so good, baby.\"\n\nHe grabbed my waist and began thrusting slowly, rapidly gaining speed and intensity.\n\nI grabbed his hands and held onto them tightly as he held me in place. I was whimpering and writhing around on the bed, lost in pleasure.\n\n\"Kiss me, Butch.\"\n\nButch leaned down over me and I moved my legs behind his waist. I moved my hand to the back of his neck and pulled him down to me.\n\nOur kisses were hard and intense as he slammed in and out of my tight hole. My prostate was throbbing from the punishment he was giving me. My dick was leaking all over my belly. The slippery fluid against his hairy belly had me quickly building towards a hard climax.\n\n\"Butch, please,\" I gasped.\n\n\"What do you need, baby?\"\n\n\"Make me come, Butch. Please!\"\n\nButch spit into his hand and reached between our bodies. As soon as I felt his fist grip me and slide up, then down, I lost it.\n\n\"OH! BUTCH!\" I screamed as I came. My whole body contracted and then exploded and I shuddered as the first wad of come splattered all over my face.\n\n\"Oh, shit!\" Butch cried out. \"I'm gonna fucking come. Unh! P!J!\"\n\nButch kept thrusting erratically as he emptied his heavy nuts into me.\n\nI laid back limply on the bed, covered in my own release. I drew in a gasp of air as Butch's big body fell on top of me. His arms encircled me and he held me tight to him. He nuzzled his bearded face into my neck and then licked my ear lobe.\n\n\"I love you, PJ.\"\n\n\"I love you, Butch.\"\n\n***\n\nEPILOGUE\n\nA month later, I was sitting on a stool behind the counter of Big City Computers, building a new computer for our home office. It was my first official day of business. Butch came up with the name and the slogan: \"Big City Prices/Small Town Service\".\n\nAs I screwed the motherboard into the stand-offs, I looked out the window and across the street at Roberts Farm Supply and smiled. Butch was standing out front smoking a cigarette, much like the first time I saw him. His black hat was slung low over his eyes.\n\nThe beep of the door opening diverted my attention away from him.\n\n\"Hi, Miss Anne,\" I said with a smile. \"What can I do for you?\"\n\nAnne was an older woman, in her 50s. She was a cashier at the grocery store. She was very sweet, with big fluffy blond hair. She reminded me of Rose from \"The Golden Girls\". I smiled to myself at the thought.\n\nI came from behind the counter as she pulled out a piece of paper from her purse.\n\n\"Hey, PJ. My son -- he's over in Iraq -- he gave me this web site. He said there are pictures there.\"\n\n\"Okay. Let's have a look.\"\n\nI led her over to one of the computers by the front window and we pulled up the Picasa web site. I showed her how to get into the photo album and then let her browse the photos while I returned to what I was doing.\n\nAfter about 30 minutes, she called out to me. \"PJ?\"\n\n\"Yes?\"\n\n\"Is there a way to print a couple of these?\"\n\n\"Sure.\"\n\nShe showed me which ones she wanted to print and I right-clicked and sent them to the 4x6 specialty photo printer. The last one was a picture of her son in his desert camouflage uniform. He was standing in front of a jeep holding a rifle looking very tough.\n\n\"He's handsome, isn't he?\" she said with a smile.\n\n\"Yes, he is. You must be very proud of him.\"\n\nI showed her the pictures and then gave her a padded envelope to protect them until she got home.\n\n\"Thank you so much. How much do I owe you?\"\n\nI looked up at the clock. 45 minutes. \"Internet usage is $20 an hour. So, $15 will cover it.\"\n\n\"What about the pictures?\"\n\n\"Don't worry about it.\"\n\n\"Aren't you sweet?\" she said with a smile.\n\nI rang up the sale and she gave me the $15 and I put the bills in the register drawer. She then put another $10 into the bin I had on the counter for holding my build screws.\n\n\"Oh, that's not for tips. You don't have to do that. Just tell your friends to come on down.\"\n\nShe just smiled at me and said \"thank you\" and left. I shrugged and put the tip under the cash register drawer.\n\nAround 11:00, I was rearranging the shelves of software when Mr. Madsen came in with a laptop bag. It was running slow and he wanted me to take a look at it. It sounded like he had some spyware. I entered his info into my computer system and printed out a receipt for him as he looked around the shop.\n\n\"Do you sell laptops?\" he asked as he looked at the desktop PCs I had for sale.\n\n\"Sure. I can get whatever you need.\"\n\nWe talked over what he was looking for and I recommended a nice name brand, mid-range laptop for him. He also ordered a new desktop computer. I couldn't contain my smile when I rang up the two computers. I told him I'd have everything ready in three days and I'd even bring them to his office and set them up for him. I shook his hand when he left and thanked him again.\n\nButch walked in a short time later for our lunch date. He was carrying a shopping bag. I tried to peek into it, but he moved it behind his back.\n\n\"Hey, baby,\" he said as he bent down to give me a kiss. \"How's business?\"\n\n\"Good. Miss Anne came in to use the Internet and print some pictures. I sold Madsen a laptop and a desktop, plus I have his old laptop in for repair.\"\n\n\"That's great. I'm really proud of you.\"\n\n\"You know what the best part is? There's this hunky cowboy bear across the street who comes outside to smoke. I like to watch him from my window.\"\n\n\"Oh, is that right?\" he said with a smug grin.\n\n\"Yeah,\" I said. I looked up into his eyes. \"And I'm head over heels in love with him.\"\n\nButch cupped my face with his hands and gave me a intense, passionate kiss. He twirled his fingers in the long and curling hair hanging down to the nape of my neck while he looked me in the eye.\n\n\"I love you, too, PJ.\"\n\nHe gave me another quick kiss and we walked out of the shop. I set the sign that I'd be back in an hour and locked the front door.\n\nI looked up at my partner. His blue eyes sparkled as he looked down at me. He pulled a black hat out of the shopping bag. It was just like the one he wore. He put it on my head and adjusted it.\n\n\"Let's go to lunch, country boy,\" he grinned and put his arm around my shoulders.\n\nI chuckled and grinned back at him. I finally belonged. "
    ],
    "authorname": "robcub32",
    "tags": [
        "gay novella",
        "romance novella",
        "gay romance",
        "gay redneck",
        "bareback",
        "bear",
        "drama",
        "gay drama"
    ],
    "category": "Gay Male",
    "url": "https://www.literotica.com/s/country-boy-ch-02"
}
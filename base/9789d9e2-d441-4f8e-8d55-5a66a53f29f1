{
    "title": "Amanda and Grace Share Everything",
    "pages": [
        "\"Amanda, why are there panties on the kitchen countertop?\" Joe Johnston hollered to his 21-year-old daughter.\n\nAs single parent for the last 11 years, Joe had survived a constant volley of unpredictable, awkward situations that come with the territory when a father raises a daughter on his own. Puberty, periods, and proms. Bras, boyfriends, and breakups. However, after Amanda had gone off to college, Joe had settled back into a relatively ordinary life. It took all of two days since his daughter returned home from her junior year to throw him another curveball.\n\n\"There aren't panties on the countertop, daddy. Because nobody's called them panties since 1992,\" Amanda replied entering the kitchen wearing a white sports bra and barely there black running shorts -- their ultra-high cut exposed the curve of her butt. \"Undies, underwear, drawers... or in this case, thong, would be more accurate.\"\n\nJoe saluted in return. \"Got it. But the question remains. What are they doing on our counter?\"\n\n\"They're cute aren't they?\" Amanda said, never missing an opportunity to make her father squirm. Picking up the lavender lace thong, she unfolded it, and held it out in front of her dad.\n\nJoe rolled his eyes but briefly admired the thong, noticing the delicate white satin ribbon in the middle waistband.\n\nAs Amanda refolded the undergarment neatly and placed it in her leather handbag, she replied, \"But to answer your question, I borrowed it from a friend and I'm giving it back to her this morning.\"\n\nJoe wrinkled his brow. \"Since when do girls share panties... undies, I mean?\"\n\n\"They're my friend Grace's. I met her at school last semester. She actually grew up here but went to Jefferson High. We've gotten pretty close. We share everything.\"\n\n\"And why on Earth did you need to borrow them?\" Joe inquired.\n\n\"Dad, I really, really don't think you want to go there,\" smirked Amanda. \"But since you're so inquisitive, they're too tight and pinched my cooter so I'm giving it back to her. She's quite petite. Just your type.\"\n\n\"What's that supposed to mean?\" Joe retorted, raising an eyebrow.\n\n\"Oh c'mon. Don't deny it. 'Petite blondes in their twenties.' It's all over your browser search history, daddy.\"\n\nJoe's eyes bulged and his cheeks flushed. \"I...umm...I thought I cleared my history.\"\n\n\"Daddy, I'm a computer science major. Do you really think I can't get past that? Anyway, there's no need to be embarrassed. We're both adults. Besides, mom was a petite blonde hottie back in the day so it's no surprise you're into that. It's endearing actually.\"\n\nSipping his piping hot cup of black dark roast, Joe reflected back on his wife Jennifer, who passed away 11 years earlier from a stroke. From the first time he saw her, he was enamored with her cute body, pert boobs and amazing ass.\n\nAmanda on the other hand had gotten her genes from Joe's side of the family. At 5'10\", the brunette bombshell had a stunning athletic physique. Toned arms. Washboard stomach. Deep brown eyes. Though her breasts were confined by her sports bra, her cleavage announced Amanda was blessed with a bountiful chest.\n\nA scar on her left knee was the only flaw on an otherwise glorious set of legs. Reconstructive surgery to repair two ligaments had caused Amanda to lose a bit of her burst and ended her promising university tennis career two years ago. Rather than wallowing in sorrow, she committed herself to distance running.\n\n\"So anyway...\" Joe said, desperate to change the subject to anything other than his internet search history. \"What's on your docket for today?\"\n\nAmanda ran through her schedule, which included a morning 10K run, followed by lunch with Grace, a trip to make some returns at the mall, and a movie with her boyfriend, Ethan.\n\n\"And at what point in there are you going to look for a job?\" Joe asked.\n\n\"I know. I know. I just want to take this first week home from school to chill,\" Amanda replied. \"Besides, everyone is desperate for help with the pandemic. I can get a job anywhere, just like that.\" Amanda snapped her fingers.\n\nShe has a point, Joe conceded. Not up for an argument with his daughter so soon after she had come back home.\n\nAmanda gave her dad a peck on the cheek, put in her AirPods and headed out the front door for her run. \"Have a great day at work, daddy. Love you.\"\n\n\"Love you, too, honey.\"\n\nJoe turned and began tidying up the kitchen, wiping down the counter and putting a few stray dishes in the dishwasher. As he grabbed his worn leather laptop case, he noticed Amanda's handbag sitting on the stool. A flash of lavender fabric caught his eye. He paused before reaching in and grabbing the thong.\n\nUnfolding it, Joe grazed a thumb over the tiny white satin bow. He admired the intricately decorated waistband with violet lace, which subtly offset the luxurious, lacy lavender fabric. It didn't seem like the type of undergarment you'd find at Target. Taking measure of its size, he agreed with his daughter's depiction of Grace. She must be petite, indeed.\n\nJoe folded the thong back up and placed it back in his daughter's handbag. He grabbed the keys and headed to work.\n\nTwo Weeks Later\n\nHaving wrapped up his last conference call of the day with a sports drink client, Joe packed up his laptop case, flipped the switch and headed for the door. As head of account services for a major advertising firm in town, Joe and the rest of the executive team had implemented a half-day workday on Fridays during the summer.\n\nPulling onto the freeway, his navigation system alerted him to a car accident ahead. His time to arrival to home added another 45 minutes. \"Crap,\" he thought.\n\nSeeing the exit for Pine Street less than 1/8th of a mile away, Joe veered off the freeway and took the exit. Five block later, a bright yellow and white canopy caught his eye. He deftly maneuvered across a lane of traffic and pulled his Acura to the curb. Kozak's Bakery. When Amanda was a girl, Kozak's was a frequent stop for the Johnston family. Amanda loved the lemon paczkis with powdered sugar. The Czech pastries were similar to jelly donuts. Kozak's made them bigger than what's traditional, requiring Amanda to use two of her hands.\n\nJennifer usually got a chocolate croissant. Joe didn't have much of a sweet tooth but always ordered something to keep his ladies happy.\n\nFive years after Jennifer died, the bakery closed its doors. The building had sat empty ever since but Joe read somewhere that a new owner was going to reopen the place.\n\nA black and white sign hanging on the front door window indicated it was open for business. \"Well, I'll be damned,\" Joe thought. Leaning forward, he took a moment to admire the building, which had a fresh coat of paint and a new canopy. It was almost exactly as it had been 15 years ago.\n\nTurning off the car and unbuckling his seatbelt, Joe wondered if the new owners had gotten their hands on the old recipes. How fun would it be to surprise Amanda with her favorite treat? \"Worth a shot,\" he thought, opening the car door.\n\nJoe strolled up to the bakery door and pulled it up. A jingle jangle of the bell hanging above jogged more fond memories. He looked around noticing the counter with stools and a handful of tables spread around the small bakery.\n\nA young woman wearing a white apron pushed open the kitchen door. Observing Joe, she put him in his early-to-mid 40s. Grey slacks. Dark hair. Olive complexion. It looked like he kept himself in shape though there were signs of a developing dad bod. \"Hi, welcome to Kozak's, how can I help you?\"\n\nJoe stepped to the display case and observed the store worker, a cute blonde with upswept hair tied up in a blue handkerchief. In her 20s. He noted her name badge that read 'Sam.' \"Hi, Sam, my family used to come here at least once a week back when it was open. My daughter used to get these pastries with powdered sugar. Any chance you make those?\"\n\n\"Paczkis? Yes, actually, the new owner says he missed them so much, that's one of the reasons he decided to reopen the bakery.\" She stepped toward the case and leaned over. \"We have raspberry, cream cheese and strawberry.\"\n\nJoe clucked. \"No lemon?\"\n\n\"Sorry, we're out of lemon. It's our most popular. I actually just sold the last two but if you can wait 20 minutes there's a batch of lemon in the kitchen that's almost done.\"\n\n\"I guess that'll be fine. I'm not in a rush,\" answered Joe.\n\n\"Anything I can interest you in while you wait?\"\n\n\"Sure, what do you recommend?\" said Joe looking through the dessert window.\n\n\"My favorites are the chocolate and caramel petit fours,\" Sam said with a French accent on the dessert name. They're a little messy but if you like chocolate, they're the bomb.\"\n\nJoe was indifferent toward chocolate but enjoyed the irony in being served a desert called \"petit\" by a stunning petite server. He told Sam that sounded delicious.\n\nSam placed four of the square deserts on a vintage patterned plate and set it in front of Joe on the counter, where he had taken a seat on a barstool.\n\n\"Here you are. Chocolate and caramel petit fours. Bon Appetit,\" winked Sam.\n\nJoe arched an eyebrow and thought, \"Had this sassy vixen used the word \"petit\" twice in one sentence on purpose?\"\n\nSam pirouetted and walked back toward the other side of the bakery. Joe caught his first real glimpse of her backside. Form fitting white jeans hugged an impossibly tight ass, accentuating the curve or her hips and thin waist. The straps of her apron hung just below her waistline. A cropped light blue shirt revealed her pale white skin with dimples on each side of her spine. The sway of her body mesmerized Joe. Sam peeked over her shoulder and Joe quickly averted his eyes from her butt.\n\n\"Busted,\" Joe thought. He assessed the desserts. Gooey chocolate ganache drizzled over chocolate cake with a layer of caramel in the middle -- topped with a dusting of powdered sugar.\n\nWith no forks in sight, Joe peered in Sam's direction. She had gathered her iphone and was tapping away. It looked like an important text conversation. Not wanting to interrupt her, Joe decided he'd use his fingers.\n\nJust as Sam had suggested, the cake squares were an ooey gooey mess to eat. He bit into one and was astonished by its lusciously rich texture. The sugar gave him an instant head rush.\n\nSeveral minutes later, Sam returned to the counter, noting that all that remained of the desserts was a few globs of chocolate ganache.\n\n\"I think I need a napkin,\" said Joe.\n\nSam brought her hand to her mouth, covering a giggle. Joe had chocolate both corners of his mouth, with smears on his chin and right cheek. The backs of his palms rested on the counter, displaying his fingers, which were covered in chocolate, caramel and powdered sugar on one hand. \"You look like a 4-year-old who tried to lick the mixing bowl and whisk after his mom made a chocolate cake.\" She lowered her hand, revealing a gorgeous smile.\n\n\"You're really enjoying this, aren't you?\"\n\n\"I don't think there are enough napkins in this town to help you,\" Sam quipped. \"You need a bath.\"\n\n\"Only if you wash my back,\" Joe replied before measuring the words he had spoken.\n\n\"Naughty, naughty,\" Sam flirted, twirling a few loose strands of her blonde hair. \"I am studying to be a nurse. It might be good practice,\" she winked. \"But, seriously, we're all out napkins.\"\n\n\"You're joking.\"\n\nNow in a full belly laugh, Sam responded. \"I swear to God,\" raising her right hand in testimony. \"Soft opening. Supply chain issues. Pick your excuse.\" Sam looked down at his chocolate covered fingers. \"Let me find you a towel.\"\n\nShe paced toward the kitchen and pushed the two-way swinging door in.\n\n\"Was she swaying her hips like that on purpose?\"\n\nA half-minute later the door swung back open. Sam walked to the counter and handed Joe the dry towel. \"Here you go.\"\n\nAfter wringing his hands on the towel, Joe looked down and realized he wasn't making much progress on the sticky caramel and chocolate. He tried a different tactic, wiping each finger one at a time. Looking again, most of the mess remained.\n\nNoticing Joe's predicament, Sam stepped toward him, gently took the towel and said, \"Here, let me help.\"\n\nSam leaned down, placing both elbows on the countertop and grabbed one of Joe's hands.\n\nHe was struck by the softness of her palms, the delicate touch of her fingers and the perfection of her manicured nails.\n\nSam gracefully folded his pinky into his palm, followed by his ring finger. Then, as she did the same with his middle finger, Sam looked into Joe's blue eyes, pausing a half second before bringing his pointer finger closer to her face.\n\n\"What is she doing?\" Joe thought.\n\nSam parted her pink lips and guided Joe's finger to her tongue. Closing her mouth, she suckled his finger. As she swirled her tongue around, she tasted the sticky, sweet chocolate and felt the intricate ridges of Joe's fingerprint. Then she curled her tongue, placed his finger beneath it and moved her tongue side to side on top of Joe's fingernail taking care to lick up the chocolate from his cuticle. Satisfied with her work, she slowly slid the finger from her mouth, keeping suction on the digit. After the fingertip exited with a pop, she dried it off with the towel and went to work on the next finger. Then the next. Until all five fingers were clean.\n\n\"There, all better,\" Sam said, still holding Joe's hands.\n\nJoe sat speechless. It was the sexiest, most unexpected experience of his life. He became starkly aware of his erect cock. It pulsated, resting on his left upper thigh. \"This girl is incredible,\" Joe thought, sensing Sam's mutual state of arousal.\n\nStill leaning with both elbows on the counter, Sam's flirty blue eyes flashed down to the counter then back up to Joe's. She wet her lips. They stared at each other for a tense moment. Then both leaned a smidge closer, an almost imperceptible distance. Reading each other's cues, they relented, urgently crashing into a furious embrace.\n\nSam's lips were icy cool. Her tongue, an arrow, darting in and out of Joe's mouth, grazing against his front teeth.\n\nIt was the type of make-out session Joe hadn't experienced in years. Urgent. Hungry. Lustful. After what must've been a minute of tongue and lip play, Sam broke their kiss. Both of them were breathing hard.\n\nJoe's heart was racing. He looked at Sam in state of bewilderment. \"Wow.\"\n\nSmiling, Sam lifted her elbows and walked from around the counter to the front door. Joe's eyes followed her movement, spinning in his barstool. She flipped the black and white door sign to read \"Closed\" and locked the door. Turning off the light switch, she glided toward Joe. Now standing between his spread legs, she leaned down for another kiss. This time Sam's lips were pillowy soft, the kiss slower, hungrier. Their tongue's danced.\n\nJoe's hands, moved to Sam's hips and around to back, grazing the two inches of skin beneath her midriff-bearing shirt. Her body responded, edging closer to the barstool, and leaning into the embrace. Joe scooted to the edge of the barstool, his groin making contact with her mound.\n\nSam felt his hardness pushing against her and grinded her hips forward. Once again breaking the kiss, she turned, grabbed Joe's hand and led him around the counter in through the swinging door.\n\nJoe assessed his new surroundings. The kitchen was a stainless-steel palace. The new owners apparently had spared no expense in refurbishing the bakery.\n\nSam pushed Joe up against a long steel prep table with powdered sugar, dough, mixing bowls and utensils strewn about. She reached around to her back and unfastened the apron knot. Joe pulled the strap over her head and discarded the apron on the floor.\n\nLooking at her body for the first time was like a shot of nitroglycerin to his arousal. A tight blue shirt hugged her firm breasts. By most men's standards, Grace had smallish boobs. She was petite but by no means flat-chested. Her half-coconut-sized tits looked perfect on her pixie-like body, Joe thought. He stole a quick peek at Sam's hard nipples teasing through the fabric, suggesting she had opted for no bra.\n\nInching closer, Sam resumed the kiss. With both of them standing, Joe's throbbing bulge was now pushing against her stomach, just below her navel. Placing her hand on his chest, she traced a line down his sternum, over his belly button and past his belt. As her hand contacted his erection, she gave it two strokes through his cotton slacks. Joe growled with pleasure. His hands drifted to her breasts, where he rubbed her nipples with the pads of his thumbs.\n\nSam grabbed her shirt and lifted it over her head. Joe was instantly spellbound by her breasts -- two perfectly round orbs that had no sag whatsoever. Her pink areolas were dainty and nickel sized. Her nipples were half-inch daggers. Joe lowered his mouth to her chest, flicking one nipple with his tongue before grazing his teeth gently over it.\n\nSam felt a wave of pleasure shoot to her pussy. Sensing Joe's own yearning, she let go of his dick. A quick flick of her wrist released his belt buckle. After unfastening the button of his pants, she gently opened his zipper. His pants dropped to the porcelain tile floor.\n\nSlowly lowering herself into a crouch, Sam grabbed the waist of his boxer briefs and pulled them down to his ankles. His cock snapped to full attention, arching in a crooked crescent. Tenderly grasping it in her right hand she gave it a slow stroke from its base to its fat purple head. A few drops of pre-cum coated her hands, allowing her to stroke more firmly.\n\nWith Joe's natural lubrication waning, she stopped her hand movement. She traced an angry blue vein that ran the length of his cock with her fingernail, admired cute mole near its base, and appreciated Joe's neatly trimmed patch of dark brown pubic hair. As a student, she'd spent hours in human anatomy classes in her nursing program and the male form had always fascinated her.\n\nLooking up at Joe, Sam licked the tip of his penis before taking four inches of his length into her mouth. Her lips, slick with saliva, slowly glided back. As she approached the head of his cock head, she instinctively firmed her mouth.\n\nJoe felt her lips purse.\n\nErotically dragging her mouth over the sensitive purple rim, her taut lips pulled against it with enough tension to curl the ridge of his bell toward the tip of his cock. Joe found sensation incredible. This girl was a blow job maestro.\n\nFeeling his knees getting wobbly, he steadied himself by leaning his bare ass against the cold stainless-steel table. She continued a consistent head bobbing motion, slowly taking him deeper and eventually bumping against the back of her throat. He watched Sam work his unit, her wolf-like, steely bluish grey eyes never breaking contact with his. Admiring her rhythmic technique and gentle caress of his balls, he felt himself edging closer to the brink.\n\nSam noticed Joe begin to slowly rock his hips, gently fucking her mouth. With one hand massaging his testicles, she felt the muscles at the base of his penis constrict. She knew he was asking, begging his body to withhold his ejaculation for a moment or two longer. Sam removed the shaft from her mouth, a string of saliva dribble from her mouth to the tip of his penis. Taking a deep breath, she went back for what she knew was the final act, bobbing up and down with more speed.\n\nJoe rocked his hips and grunted, \"I'm going to come... ugh, ugh.\"\n\nSam took the first string of cum in the back of her throat and swallowed, the warm salty ejaculate filling her up. Then, quickly removing his cock from her mouth, she began to pump. Aiming the tip at her chest, a glob of milky white semen splashed the base of her neck. Then, a second, much larger rope hit her left boob. Continuing to pump a last burst of cum landed in the valley between her breasts.",
        "Joe was spent. He placed both hands on the table for support and looked down at Sam, who had grabbed a kitchen towel and cleaned off her chest and lips.\n\nStanding up she leaned into him, flattened her breasts against his shirted chest and kissed him deeply. Joe tasted her salty kiss, his still erect and sticky cock poked against her flat, firm stomach.\n\nWith his hands on her hips, Joe found a second burst of energy. He spun Sam around and pushed her against the kitchen prep table he had just been leaning against. Next, he reached down to her jeans, unfastened the button and lowered the zipper. Grasping the waistband with each thumb, he lowered the tight, form-fitting pants, tugging over her the curve of her ass.\n\nJoe placed his hands on her butt and pulled himself closer. Swirling his tongue in her bellybutton, he left a trail of passionate kisses down to her underwear. He prepared to remove the last of her clothes by hooking both sets of his fingers into the waistband.\n\nAs he opened his eyes, he caught a glimpse of her lingerie -- perhaps a nanosecond before he intended to yank them down and go to work on her clit. A white bow stared him in the eye. The cute satin embellishment was sewn directly above the lacy lavender V-shaped patch covering her pussy, the material completely soaked with her juices. Intricate violet lace circled the entire elastic waistline. As he smelled the fragrant musk of her womanhood, the recognition that Sam's thong had been on his kitchen countertop two weeks ago hit like a headfirst dive into an ice-cold pool.\n\n\"Your name isn't Sam, is it?\"\n\n\"What?\"\n\n\"Your name,\" Joe insisted. \"I've been calling you Sam. What's your real name?\"\n\nLetting out an exhale, the young woman in front of him answered, \"My name is Grace.\"\n\n\"Ho. Lee. Fucking. Shit.\" Joe replied, running his fingers through his hair.\n\n\"What? What's wrong?\" Grace replied.\n\n\"No. No. No. No. Your nametag said Sam,\" Joe questioned, standing up and pacing around the kitchen in a state of panic and using his hands to express the gravity of the situation.\n\n\"I just started work here last week,\" Grace replied. \"They haven't made a nametag for me yet, so I borrowed one.\"\n\nJoe took a breath and said, \"Grace, don't freak out but my daughter goes to school with you and is one of your friends.\"\n\nGrace paused, measuring her response. \"Yes, I texted Amanda after I realized who you were. You were busy eating the desserts and I told her you were at the bakery.\"\n\nConfused, Joe responded, \"What?\" Grabbing his clothes, he began getting dressed and added, \"Are you saying she put you up to this?\"\n\n\"No, of course not. Does that sound like Amanda?\" Grace questioned, also beginning to re-clothe herself. \"It's the opposite. I texted her and told her that her foxy dad was in the bakery.\"\n\nJoe responded, \"And when did you realize I was Amanda's father?\"\n\n\"About 10 seconds after you asked for the lemon packzis. It was funny because 15 minutes earlier Amanda was here. She told the exact same story about coming to Kozak's as a kid. She bought the last two lemon packzis and was going to surprise you with them tomorrow morning. I also remembered seeing your picture on the desk in her bedroom at college. But the photo didn't do you justice,\" she grinned. \"How did you know who I was?\"\n\nJoe squinted, \"The lavender thong. I saw it two weeks ago. Amanda borrowed it from you.\" He was still unsure about the sequence of events that led to his daughter's friend giving him perhaps the best blowjob of his life. \"Who's Sam?\"\n\n\"He's the son of the new owner. He's about a 275-pound polish guy with a beard,\" Grace answered. \"Not your type,\" she winked.\n\n\"We can't tell Amanda what happened,\" Joe said in a panicky voice.\n\n\"But I kind of already told her,\" Grace replied. \"We share everything.\"\n\n\"What? How?\" Joe said dumbfounded.\n\n\"When we were texting, I told her that I thought you were sexy. She replied that you have a thing for petite girls. I told her that made me horny. Then she said you were a sweet man and encouraged me to pursue you on one condition.\"\n\n\"What condition? Joe replied.\n\n\"That I couldn't fuck you. Something about not wanting me to become pregnant and becoming her de facto stepmother.\"\n\n\"What do you call what we just did if that wasn't fucking?\"\n\n\"I call it an afternoon snack,\" Grace naughtily replied, licking her lips.\n\nNow fully dressed, Joe walked through the swinging door and back into the front of the bakery. He paced back and forth, still confused about the entire situation.\n\nGrace moved toward Joe, blocked his path and grabbed one of his hands in both of hers. In a calming voice, she said, \"We didn't do anything wrong, Joe. We're just having fun and messing around. You have a thing for women like me. I have a thing for guys like you. The chemistry was real. It was hot. It felt right.\"\n\nJoe was still skeptical that this wasn't some sort of twisted prank his daughter and her friend were playing on him. He silently looked in her eyes, feeling conflicted.\n\n\"Look, it's only 1:45,\" Grace said. \"I close the bakery in 15 minutes. Why don't you spend the afternoon with me? I could use some help with something, and I think you'll be perfect for the job.\"\n\nJoe was still unconvinced, but Grace saw his eyes soften. He was wavering. \"C'mon, I'm not taking no for an answer,\" pulling him by the hand back toward the kitchen. I \"just need to lock up.\"\n\nAfter double-checking all the ovens were turned off and tidying up the kitchen, Grace and Sam exited the backdoor of the bakery into the alley.\n\n\"I have the clothes I need in my car, so we'll leave your car here. But you can drive,\" said Grace tossing him the keys to a black Volvo SUV.\n\nJoe got in the car, adjusted the black leather seat and mirrors and started it up. \"Where to?\"\n\nGrace told him to head east on highway 85 into downtown.\n\n\"Amanda told me you're in advertising and are always flying to New York and LA to shoot commercials. I want your help. You get to be my producer, director and cameraman today.\"\n\nLooking in the rearview mirror at a long of clothes hanging on a bar across the back seat, Joe asked, \"Are you a model?\"\n\n\"Not exactly.\"\n\n\"Porn star?\" Joe said, offered.\n\nGrace punched him on the arm. \"No, I'm an influencer. A micro-influencer, actually.\" She explained that she was building a following on Tik-Tok. She didn't yet have enough followers to earn significant money but explained to Joe that top influencers can earn six figure annual income. As much as she loved the idea of being a nurse, the freedom of living a life on her own schedule was a dream.\n\n\"So what kind of videos are we shooting?\"\n\n\"Mostly me dancing in skimpy athletic clothing,\" Grace answered. \"You'll love it. I've taken dance classes ever since I was four. I'm kinda good at it.\"\n\nReading the tone of her voice, Joe suspected she was more than 'kinda good.'\n\n\"The creativity of expressing myself is what drew me to Tik-Tok in the first place.\" As they entered the city center, Grace directed Joe to a parking ramp.\n\nExiting the car, Grace handed Joe an armful of clothes that included leggings, shorts, sports bras and athletic tops. She grabbed a few shoeboxes from the trunk and headed for the stairs, with Joe trailing a step behind.\n\nThey entered the Benton Hotel lobby and Grace walked directly to the concierge. \"Hey, Parker.\"\n\n\"Hey, Grace. Are you Tik-Toking again on the roof?\"\n\n\"Yep, mind if I borrow your keycard?\"\n\nParker handed her the plastic card and Grace thanked him. She headed to the elevator followed closely by Joe. Pushing \"R\" on the keypad, the door closed. The old elevator wobbled and made a few rattles, carrying them to the rooftop. After Grace swiped the keycard, she pushed the steel door open, revealing a luscious, green garden. Grace told Joe the hotel restaurant used it for growing herbs and vegetables.\n\nAs Joe explored the roof, Grace spread out her clothes on a couple patio chairs. Next, she removed her top, exposing her bare breasts. As one of the taller buildings in the city, the Benton rooftop offered privacy. She quickly put on a white sports bra, followed by a fitted mint-green athletic crop top. Then she unbuttoned her jeans, replacing them with what would best be described as booty shorts. The micro-sized black bottoms looked like they were painted on her, accentuating the crack of her butt and her roundness cheeks.\n\nShe picked out a pair of vintage Nike sneakers and told Joe she was ready to shoot. After a few instructions, they were off and running. Joe manned the iphone, which Grace had attached to a tripod, and he helped with a portable light.\n\nWatching Grace do her thing was entrancing. With her fast feet and dizzying moves, it was hard to know where to look. Several times, Joe caught himself staring at her cute ass or down her shirt when she bent over. He had to snap himself back to reality before he messed up the shoot.\n\nThree outfit changes, three dance routines and twenty-some takes later, Grace was spent. She grabbed a bottle of Smart Water and took a long drink.\n\n\"Well, I think that's it, unless you have any tips for me, Mr. Producer\"\n\nJoe pondered for a moment, tapping into 16 years' worth of experience in the branding and advertising market. \"Who's your audience, your followers?\"\n\nGrace said, \"Well, about 60% are females 17-35. And maybe 20% who are men in their 20s and another 20%, who are older men.\"\n\n\"Okay, good, and which group do you need more of?\"\n\n\"Well that's just it,\" Grace replied. \"At this point, I just need to grow my number of followers into the hundreds of thousands. Once that happens, the algorithms will prioritize my videos and boom.\"\n\nJoe thought, looking out over the city skyline. \"She needs to capture attention quickly or she'll lose her audience.\" A minute or so later, he had an idea. \"Okay, come here, let's try something,\" he said, beckoning her with his finger. As she approached, he said, \"Take off your shirt and your bra.\"\n\n\"Oh, I like where this is going but Tok-Tok has a strict policy against nudity. You'll get me banned.\"\n\n\"Trust me,\" said Joe.\n\nGrace peeled her shirt over her head, followed by her sports bra. The warmth of the summer air washed over her. She stood unashamedly in front of Joe, hands on her hips. \"What next?\"\n\nHe admired her majestic body, silhouetted against the sun. Grabbing her by her slim waist, he pulled her a step closer. \"This is for professional purposes only,\" he said. Then he bent down to her breasts and began nuzzling her right nipple. He gently sucked and twirled his tongue around the pert bud, feeling it harden in his mouth. Satisfied, he moved onto the other nipple and repeated the process.\n\nGrace caressed his head running her fingers through his thick black hair. She softly moaned. Her clitoris tingled.\n\nJoe stopped and admired his work. Grace's nipples were pink and hard. Reaching toward them, he took each bud between his finger and thumb and gently twisted and pulled, causing them to stiffen and stretch even more. Then he moved his face closer and blew his cool breath on them. Satisfied, he instructed Grace to put her shirt back on. \"No bra.\"\n\nGrace reached for the black tank-top she had on before but Joe suggested the light blue top instead. Pulling it over her head and past her chest, she looked down and noticed her round globes stretching the material of the shirt, her rock-hard nipples angrily poking through. \"Well, I definitely see where you're going with this. The problem is my female followers will think I'm a slut whore.\"\n\n\"Maybe, but you'll have men everywhere reaching for tissue and hand lotion,\" Joe predicted. \"Now start dancing. Do the second song and dance routine. Your nipples will slowly regress and we'll choose... I'll choose... the clip with the right balance of sophistication and sluttiness.\"\n\nGrace resumed her routine. After they'd shot about seven takes, she was spent. She took a long drink of water and dabbed a few drops of perspiration from her cleavage. Assessing her nips, she realized Joe was right, while still noticeable, they were no longer poking through like arrows. She began her post-workout stretching routine, spreading her legs wide and placing her palms on the ground. She felt the stretch in her hamstrings and glutes.\n\nJoe, who had begun gathering and folding the various outfits she'd worn throughout the day, cast his gaze her way. Grace's ass was high in the air, pointed to the sky. As she stretched, her shorts creeped an inch higher. The curves where her butt met her legs became visible. Through her legs, Joe could see her breasts, nipples still pointing through proudly. Joe's groin stirred, blood rushing to his cock.\n\nWith her stretches finished, Grace turned toward Joe. As she approached, she recognized a change in his eyes. The professional, mentor-like demeanor he'd shown throughout the session was gone. The lust she'd seen in him back at the bakery was back. A quick glimpse at his crotch showed a bulge.\n\n\"I think I picked up at least one new follower on Tik-Tok today.\" As she moved within arms' reach, Joe grabbed her by the hips and pulled her to his body. He took her mouth in his. Then cupping his hands under the curves of her ass, easily hoisted her in the air. Reading his cue, she wrapped her legs tightly around his torso.\n\nJoe, carried his prey to a private corner of the rooftop garden and placed her on a chaise lounge chair, between two trellises. He peeled her shorts off her trim body, once again revealing the lavender thong with the tiny white bow. \"I didn't get to finish what I started back at the bakery,\" Joe said.\n\n\"This is the second time today you've caused me to soak my favorite pair of undies, Mister.\"\n\nJoe smiled. As he grabbed the thong, Grace lifted her hips allowing him to slowly pull it off her long tan legs. At the same time, she pulled the blue tank-top over her head and cast it aside.\n\nNow with Grace completely nude, Joe spread her legs and observed her clean-shaven pussy in wonderment. Bending down he flattened his tongue against her wet slit. Joe found the combination of her sweat and natural essence erotic. Locating her clit, he worked his tongue from side to side.\n\n\"I need your cock now,\" Grace insisted. She sat up and made quick work of his shirt, pants and boxer briefs. Though it'd only been two hours since she'd last held his throbbing shaft, Grace yearned to feel it's girth again. While sitting on the edge of the chair, she took Joe's rock-hard penis in her mouth.\n\nHer technique was again impeccable. With a thick layer of saliva coating the length of his rod, Joe nudged her to stop. She removed his cock from her mouth with a pop and give it a few firm strokes.\n\n\"So about that no fucking rule?\" Joe questioned with a pouty face.\n\n\"Yep, it's still in effect, but don't worry. I have an idea I think you'll like,\" Grace replied, standing up. \"I dated a Catholic boy for a couple years who was committed to celibacy. I came up with all kinds of creative ways to get him off.\" She lowered the back rest of the lounge chair a couple notches and patted the cushion, directing him to lay down on his back.\n\nWith his mast pointing to the afternoon sky, Grace straddled his body while facing away from him. Inching her knees and butt backward, she felt her labia brush his genitals. Looking between her legs she slid another inch backward, her pink lips split apart, enveloping both sides of the base of Joe's cock. As she lowered her hips, Joe's shaft pressed firmly against his stomach, held in place tightly by her pussy. \"Gotcha,\" Grace thought.\n\nShe continued to slide her vagina up the sensitive underside of his cock until she'd reached the middle. Riding him backward, Grace slowly began twerking her hips so her pussy lips dragged to the base of his stiffness all the way to its tip. Other than her thrusting hips, the rest of her body remained completely motionless. The movement required the strength of a ballet dancer, the hip action of a hula dancer, and the rhythmic seduction of a stripper.\n\nAs the vaginal stroking of his cock continued, Joe noticed the flow of Grace's pussy juices increasing. Mixed with his own pre-cum leaking from the tip of his penis, it was as if someone had squirted a bottle of KY Jelly on them. Looking down at his stomach, the sight of Grace's labia wrapped around his cock, slowly gliding back and forth, with almost zero resistance was captivating. The rising wetness created a sloshing sound to the beat of Grace's hip thrusts.\n\nAs her velvety, shaved pussy reached his mushroom head, Grace ventured further than she previously had been. She dragged her clitoral hood over the ridge of his cock and to its tip. In that moment, a wave of pleasure washed over her. \"Oh, yes. Oh, oh, um.\" A small squirt of fluid ejected from her vagina, further drenching their erotic grind. Grace fell forward and Joe steadied her grabbing her around the hips just above her spectacular ass. Her pink anal hole was now fully exposed to him.\n\nRecovering from her orgasm, Grace lifted herself upright on her knees. Their genitals breaking contact. For a split second, Joe thought the carnal wet humping session was finished. But Grace was merely getting started. Spinning around in the lounge chair, she repositioned herself. This time with her front facing Joe's. Reaching between her legs, she grabbed his shaft and flattened it to his stomach. Lowering her hips, her pussy lips again enveloped his cock like a taco.\n\nGrace resumed her twerking. This time with more urgency. Up and down his shaft she glided. Each time her clit brushed against this tip a wave of gratification hit her. But from this position, she had to be more careful. Every thrust forward, she pushed further until Joe's purple mushroom arrived mere millimeters from her vaginal opening. Teasing. Taunting\n\nAfter one more aggressive twerk back and forth, the tip of his cock -- like a heat seeking missile -- found its target and entered her. But only to the ridge. The friction provided by the curvature of his bell was the only thing that had prevented his penis from sliding in the whole way. It was not enough to be considered penetration, but there was no doubt. Joe felt himself inside her warm, wet cavity.\n\nWith the amount of lubricant between them, all it would take is the slightest hip movement in the right direction by either of them to consummate the act. They locked eyes for a moment. Desperate. Wanting each other to take the plunge. Finally, Grace closed her eyes and reluctantly lifted her hips, relieving the pressure and dragging her pussy back down his length.\n\nSensing Joe's frustration, she thrust her hips forward once more until her labia was back on his sensitive cock tip. This time, rather than dragging it all the way back down, she began a series of shorter thrusts, concentrating her pussy's assault directly on his sensitive purple head.\n\nAs the volume of the smacking of her fluids on his prick grew in intensity, so did Joe's pleasure. \"Mmm...uhh...uhh.\"\n\nKnowing he was on the cusp of release, Grace reached behind herself and grabbed the base of his penis. As she continued to grind her pussy into his cock head, she firmly pressed her thumb onto his urethra. The pressure prevented his ejaculation and prolonged his orgasm for a few more seconds.\n\nJoe was never much of a moaner during sex. However, this orgasm was different. Instead of one quick release, he felt several waves of pleasure shoot to his head. \"Ohhh, fuck,\" he yelled. \"Ohhh...uhh...fuck.\"\n\nWhen Grace released her thumb from his urethra, a thick rope of cum instantly exploded on to his chest. The another onto Grace's leg. Followed by a final string that landed on the chair cushion. Grace fell forward onto his chest. Her breasts flattening against him, smearing his cum on her boobs.\n\nLaying completely still, Joe gathered his wits. \"What just happened?\" he thought. That was possibly the greatest sex of his life. Yet they hadn't actually had intercourse. He'd only known Grace for a few hours, but he felt his attraction to her blossom.",
        "\"I've never had a guy have that effect on me.\"\n\n\"What do you mean?\"\n\n\"Did you feel my pussy? It was like a firehose. I even squirted.\"\n\nJoe smiled, \"And I've never met anyone like you, Grace. That thing you did with your thumb. That split second where I was almost inside you... I...\"\n\n\"I know. Me, too.\" Grace kissed him. Then she climbed off and began collecting her gear. The couple got dressed and headed back to the parking ramp, thanking her friend Parker on the way through the hotel lobby.\n\n\"Where to now, my lady?\" Joe asked.\n\n\"Well, I was hoping you'd invite me back to your house and help me edit the videos.\" Grace hinted.\n\n\"Yes, I'd like that very much.\" Joe responded. He recounted that Amanda was going on a date with Ethan right her shift ended at her new job. She wouldn't be home until after midnight. Eventually, they'd talk about what happened with Grace but he wasn't ready just yet.\n\nJoe drove them back to the bakery where he picked up his car. Grace followed him to an affluent neighborhood and into the driveway of a classic brick two story that Grace thought resembled the house from Home Alone.\n\nJoe led her into the house through the garage and gave her the tour. Amanda had invited Grace over a few times but so far their schedules hadn't meshed. Grace was awestruck by the home. Although her family was upper middle class, their house was nowhere near as modern, fresh and striking.\n\nThe tour concluded in Joe's favorite room, the library. \"I thought we could do the video editing in here,\" he said.\n\nAfter watching Grace edit through the videos for 15 minutes, he had the gist of it. \"Do you mind if I take a stab?\"\n\nJoe thumbed through the video footage, watching carefully to find a clip that Grace had both nailed the performance and the \"nipple-forward\" look he preferred. Finally satisfied, he went to work adjusting the filters and lighting. When finished, he handed the phone back to Grace and confidently said, \"There's your winner.\"\n\nGrace retrieved the iphone and tapped play. She was immediately impressed with Joe's work and pleased with the result. Although her nipples were prominent, Grace's dancing was still the star. She loved the way the light hit her body and how the shorts accentuated every curve of her butt. She added Joe's video and two of her own to her Tik-Tok queue timing their publication to be staggered over the next hour. She exhaled and looked at Joe, \"All done.\"\n\n\"That was fun,\" Joe said. \"I'm starving. Would you like to meet me out by the pool? I can bring us some food and drinks out. Chips and guac sound good?\"\n\n\"Absolutely, I have a couple swimsuits in my car.\"\n\n\"Fabulous. You can get changed in any one of the bathrooms. Make yourself at home,\" said Joe.\n\nBy the time Joe went upstairs to change into his bathing suit and come back down to the kitchen, Grace was already by the pool. He glanced out the window and saw her climb onto the diving board. Wearing a barely-there pink bikini, she was a true knockout. Her breasts oozed out the sides of the tiny triangles of material. She leapt into the pool in a perfect dive and swam to the other end.\n\nJoe finished prepping some snacks and grabbed a few craft beers to bring to the patio.\n\n\"This feels so good,\" Grace said. \"Just what my muscles needed after you put me through that hard afternoon of work.\"\n\n\"I'm sure all that dancing makes you sore,\" Joe responded, lowering himself into the pool.\n\n\"I wasn't talking about the dancing,\" Grace winked.\n\nFor the next half hour, Joe and Grace splashed around the pool. The chatted about nursing school, Grace's family, Amanda, her previous boyfriends, and his career. Both found it easy to talk to one another despite their age difference.\n\n\"What do you think is the best part of my body?\" Grace asked.\n\n\"Don't you mean the 'breast part' of your body?\" Joe raised his eyebrows.\n\n\"Hashtag Dad Jokes,\" Grace laughed, splashing him with water and swimming away.\n\nLike a predator, Joe pursued, finally catching her in the shallow end of the pool. He pulled her to his body. Her breasts matted against his chest, he kissed her lips, tasting the saltwater from the pool.\n\n<ding> A single chime from Grace's phone interrupted their make out session.\n\n\"It's nothing,\" she responded. \"That just means the first Tik-Tok video posted and someone liked it.\" Grace pulled him back to her mouth, seductively biting his lip. With one hand in the water, she reached to the front of his swimsuit and began massaging his cock. She felt the wrinkles of his balls, which had shriveled like a raisin in response to the cool saltwater. His dick began to stiffen in her hand and she marveled to herself at beauty of the male anatomy.\n\nding\n\nding ding ding\n\nding ding ding ding ding ding\n\nJoe and Grace turned to the patio end table, on which Grace's phone was blinking to life with notifications. An endless string of chimes.\n\nStepping to the ladder, Grace climbed out of the pool and walked toward her phone.\n\n\"Holy shit!\" Grace exclaimed. \"The Tik-Tok you put together already has 75,000 likes.\"\n\n\"Is that a lot?\" Joe asked.\n\n\"It's insane. The most likes I've ever had on a Tik-Tok is about 150,000 and it took days to get there,\" she explained. \"This one just went live seven minutes ago.\"\n\nGrabbing her handbag, Grace went into the house.\n\nJoe could hear the constant stream of notifications until she slid the glass door shut.\n\nAfter climbing out of the pool and toweling off, Joe met Grace in the kitchen. She had dried herself and put on a pair of ultra-short denim cutoffs but left her pink bikini top on.\n\n\"Now it's over 100,000, which makes it officially viral!\" Grace celebrated. She checked her number of followers. \"Whoa, I have 15,000 new followers, too.\"\n\nScrolling through the comments, Grace smiled. A mix of emojis -- fire, hearts and bulging heart-eyes -- told the story. Some male commenters had written messages like \"So friggin' hot\" or \"Marry me.\" Females commented on her outfit and her dance moves. And, of course, a few trolls suggested she needed to wear a bra.\n\nJoe moved behind her, rubbing her bare shoulders and kissing her on her damp hair. He looked over her shoulder at the phone\n\n\"Why are there so many peach emojis?\" Joe asked.\n\n\"It means they think I have a nice ass.\"\n\n\"Oh.\" Joe recalled the shorts from the session that accentuated her ass crack. Reaching down, Joe grabbed her butt, cupping her cheeks with two hands. \"I can confirm.\"\n\n\"The video is off the charts. I had to shut my notifications off. Look,\" she pointed, \"Now it's over 220,000 likes.\"\n\n\"Grace, I'm really proud of you. Congratulations. Are you happy?\"\n\nSetting her phone face down on the countertop, Grace turned around to face Joe. \"It's incredible. I'm so happy and it's all because of you.\" She gave him a kiss on the mouth. \"I think... you... should invite me upstairs,\" she said tapping him lightly on his clean-shaven chest.\n\n\"Follow me.\" Joe took her by the hand a led her to the staircase. When they reached the second floor, Joe started to the left toward the master bedroom.\n\nGrace stopped. \"Would you mind if we use Amanda's room?\"\n\n\"Umm...why?\"\n\n\"We share everything,\" Grace answered, winking. \"It's a joke between us. We always try to one up one another on what we can borrow without asking. My thong?\" Grace said, pulling down the top of her jean shorts to reveal the lavender underwear. \"She knew it was my favorite, so she swiped it from my dresser and wore it out for a night of dancing. While we were on the dance floor she lifted her mini-skirt and flashed me.\"\n\n\"So you want revenge. And to get it, you want to borrow her bed? That's twisted.\"\n\n\"Correction, I want to borrow her bed and her dad. And then I want to fuck her borrowed dad in her borrowed bed.\" Grace replied. \"Amanda will never top this.\" Not waiting for Joe to answer, she dropped his hand and sprinted toward Amanda's room.\n\nJoe chased after her down the long hallway.\n\nBy the time he got to Amanda's room, Grace had already removed her bikini top and ripped the comforter off Amanda's bed. She unbuttoned her jean shorts, leaving her in nothing but the lavender thong with the white satin bow.\n\nJoe stepped into the room and placed one hand on the small of Grace's back, then slid it to her impossibly firm bare bottom and traced the thin thong fabric between the crack of her ass. His other hand touched her face and her lightly freckled cheek before moving it down her neck to her breast. Grace gasped as he teased her nipple, causing it to jump to attention.\n\nPulling Grace tighter to his body, she whimpered as she felt his bulge press against her flat tummy. She moved one of her hands to Joe's waist and down the outside front of his swimming suit, gripping his hardness and giving it a squeeze.\n\nAt this, Joe moaned. Removing his hand from her boob, he swiftly swept the tiny young woman up off the ground, carrying her to the bed and laying her down. Joe stood awestruck at the petite, young blonde goddess looking back at him. Only her thong remained. Without breaking eye contact, he peeled off his swim trunks, whispering, \"My God, Grace, you are amazing.\"\n\nGrace grabbed hold of Joe's thick, fully erect cock and used it to like a leash to pull him toward the bed. She slathered his slick pre-cum over the head and gave the veiny staff a few strokes. Joe's hips slowly rocked in unison with her movements. Sensing he yearned for more, Grace leaned toward him and teased him with a few long licks on his raging hard-on, starting at the base and ending at the tip with a swirl.\n\n\"Oh, that's so fucking good,\" Joe groaned.\n\nGrace smiled and finally took his member into her mouth. Her slow, methodical movements drove Joe to the edge. With each bob of her head Grace's tongue twirled around the tip of his cock.\n\nJoe gently guided Grace off his member and climbed into the bed laying on top of her. Making like Lewis and Clark, he ventured to all parts of her body, leaving a trail of soft wet kisses. He started at her neck and paused at her breasts. Gently sucking her nipples, he moved lower over her ribcage, onto her bellybutton, and to each of her sexy hip bones. Then, biting the waist of the lavender thong with his teeth, he pulled it down to her womanhood, causing Grace to giggle.\n\nEager to taste her, Joe use his hands to remove the thong, which was drenched with Grace's sweet honey. Parting her legs, he kissed her thigh. Again. And again.\n\nAs Joe inched closer to Grace's wet opening, she shuddered in anticipation. Losing patience for his teasing. She grabbed his head with two hands in his thick hair and pulled him tight to her slit.\n\nFinally, Joe obliged. He flattened his tongue and softly touched it to the folds of her womanhood. He tasted her tangy nectar combined with the salt from the pool. After three long licks of her vaginal lips, Grace arched her hips and placed one leg over his shoulder. Joe flattened a hand on her mound and applied light pressure. Her clitoral hood lifted like a theater curtain, revealing Grace's delicate bud. Joe stimulated it with gentle swirls, up and down, then side to side.\n\nGrace squealed, \"Yes! Oh! Holy shit!\"\n\nJoe curled a finger into her opening while still teasing her clit with his tongue. This pushed Grace closer to climaxing. She screamed, \"Yes!.\" Removing his finger, Joe worked his tongue into her hole. Grasping Joe's head with both hands she forced him deep into her vagina, and she told him she needed him his cock inside her.\n\n\"Are you sure, Grace?\"\n\nShe thrust her hips up. \"Stop talking. I need it. Now.\"\n\nWith that, Joe crawled on his knees and laid himself on top of her.\n\nGrace grabbed his cock and guided it to her dripping wet entrance. Not wanting to risk either of them changing their mind, Joe wasted no time pushing his full length into her tight cavity in one motion. Her snug young pussy held his cock like a vice grip.\n\n\"Oh, yes. God, you feel so big inside me.\"\n\nJoe began thrust his hips. \"Holy shit, you're so tight.\" He slowly pulled nearly the length of his cock out, then quickly driving it back in until his pubic bone grinded against her clit. After repeating this rhythm several times, he quickened his pace.\n\n\"Play with my nipples while you fuck me,\" Grace commanded.\n\nJoe eased himself up with his elbows into a kneeling position, his engorged member still inside her. With two hands, he began massaging Grace's firm tits and delicately stimulated her small areolas and stiff nipples.\n\nGrace moaned. \"Harder. Twist them,\" she coached. As Joe increased the pressure, Grace arched her back and started to thrust her hips, causing Joe's cock to penetrate her further.\n\nLetting go of her breasts, Joe reached back to grab her tight calves. Lifting them up, he spread her legs wide and plunged his erect member deep into her, his balls slapped against her magnificent ass. Next, he brought her legs over his shoulders and worked his cock faster. Leaning into her, Grace's thighs settled into on her chest.\n\nJoe was in full control, using the full weight of his body to pump away. Grace's sopping wet pussy overflowed with liquid, creating a suction sound with each thrust.\n\nGrace screamed as she climaxed, pulling Joe's ass and causing his cock to reach its max depth and holding it there as a wave of pleasure crashed over her.\n\nJoe recognized he wasn't far behind. He eased her legs from his shoulders, removed his cock from the warmth of her womanhood, and grabbed her hips to flip her on her tummy.\n\nGrace climbed to her knees, lifting her bottom into the air and offering it to Joe. It was a sight Joe had been dreaming of all afternoon.\n\nWith one hand on Grace's flawless ass, Joe took hold of his cock and placed it on her slick opening. Slowly, he shifted his weight pressed forward and began plunging in and then all the way out.\n\n\"Oh, shit. That feels so good,\" Grace exclaimed. Shifting her knees slightly forward, Grace pushed her ass even higher into the air, and began twerking her hips.\n\n\"Urumph,\" Joe grunted. Taking Grace's cue, Joe stopped pumping and removed his hands from her body. Steadying himself and remaining totally motionless with his hands on his own hips, he watched as Grace did all the work. Over and over, she impaled her pussy on his erect shaft. With each thrust her magnificent ass shifted forward then back.\n\nJoe once again was astonished by her hip action, honed from almost two decades of dance.\n\nAs her pace quickened, Grace wailed. \"Yesss...yesss!\"\n\nJoe reaffirmed his grip on her. Placing one hand on her hip, he reached around to her pussy with the other and rubbed her clit side to side.\n\n\"Yesss...yesss!\"\n\n\"I'm close,\" Joe said.\n\n\"Cum inside me. Shoot that load in my pussy,\" Grace begged.\n\nRemembering Grace's technique in their afternoon rooftop fling, Joe placed his index finger on the base of his cock and pinched his urethra. Still working his cock in and out, he felt one shockwave of pleasure after another until he finally relented and released the pressure. Instantly, he felt his seed explode into the depths of her body.\n\nGrace felt Joe's cum fill her. It warmed her insides.\n\nJoe hugged her from behind, caressing her boobs. As he unsheathed his cock from her hole, he leaned back and witnessed a milky trail of cum dribble out of her pussy. He flopped onto the bed beside her. Grace shifted to her side and placed her head on his chest.\n\nThe two lay in each other's arms silently for a few minutes, their heavy breathing began to slow.\n\n\"That was amazing,\" Joe said. \"Are you going to tell Amanda you fucked her dad in her bed?\"\n\n\"Of course, we share everything,\" Grace responded."
    ],
    "authorname": "SmutMerchant7",
    "tags": [
        "petite",
        "blonde",
        "blowjob",
        "dad",
        "20s",
        "oral sex"
    ],
    "category": "Erotic Couplings",
    "url": "https://www.literotica.com/s/amanda-and-grace-share-everything"
}
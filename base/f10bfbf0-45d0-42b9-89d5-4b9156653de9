{
    "title": "A Kiss is a Question",
    "pages": [
        "Hello All! This story was the second place winner of the 2011 Nude Day progress, and even though it was second, it turned out to be the most popular story I ever posted up here on Literotica.\n\nThis was a fun one to write, and the funny thing is -- even with a rather exotic locale and a fair share of sex, this is pretty darned old-fashioned love story. \n\nSincere thanks to GaleWillow for giving this the editor's eye. \n\nThanks, as always, for taking the time to read my story. Please do vote, comment, and favorite if you are so inclined.\n\n***\n\nThe comm screen flashed that there was an incoming message and Captain Julia Yamamoto tapped the accept code.\n\n\"Hello, Admiral Christiansen\" she said to the aging man on the screen.\n\n\"Hello Julia, let's drop the formal crap. How are you doing?\"\n\n\"Well, Jake, a little shook up, but happy we're intact.\"\n\n\"I've gotta tell you,\" said the Admiral, \"when we heard you'd been attacked by Aquilans we were stuck somewhere between disbelief and excitement. We've been trying to establish contact with those bastards for years and we can't get 'em to pay the slightest attention. They just swim around in their pools, or pods, or energy shells, or whatever they're called and never spare us so much as a 'hello'.\"\n\n\"I know,\" said Julia, \"we can't get them to pay the slightest attention to us, and then wham, they swoop in and attack my ship.\"\n\n\"Any casualties?\" asked Jake.\n\n\"None,\" said Julia. \"They were more efficient than a team of SEALS - precision attack, disabling tactics, got in and got out, and gone - jetting straight back to NGC 6751. They worked like surgeons, even using some sort of plasma technique to cauterize their path, sealing up all of the leaks as they went so none of our chambers lost pressure.\"\n\n\"Amazing. What did they get?\" asked the Admiral.\n\n\"That's the oddest thing,\" said Julia. \"They grabbed the science lab and the backup medical suite. They cut the entire thing directly out of the ship. They took everything in the bio labs and the gene labs. From what we can tell, they also pulled the engineering data for every ship we've ever built. Other than that - nothing else was taken.\"\n\n\"What the hell?\" mused Jake. \"I suppose I understand the engineering information -- but after the way they cut through your ship, it wouldn't seem like they need that sort of data to conduct further attacks.\"\n\n\"I know,\" agreed Julia. \"Speaking of attacks, how are we going to classify this, Jake? We've experienced no loss of life and no significant damage. Hell, except for the fact that we have to go the long way between two parts of the ship -- I could keep going without a single repair. It's hard to call this an act of war.\"\n\n\"You're exactly right,\" agreed the admiral. \"I've already tangled with a couple of hotheads who are ready to mount a full on attack.\"\n\n\"Full on attack on what?\" asked Julia. \"The Aquilans are energy-based beings that float in random pods across this entire nebula. Do these hotheads want to light up the entire cloud?\"\n\n\"If they had their way, yeah,\" said the Admiral. \"You take care of your repairs, Julia. I'll take care of the idiots. We'll classify this as the Aquilan Encounter, and leave it at that.\"\n\n\"Sounds good, Jake,\" said Julia.\n\nAfter signing off, the captain did have one thought lingering in her mind. What in the world were the Aquilans going to do with the genetic info and the labs.\n\n***\n\nTWENTY YEARS AFTER THE AQUILAN ENCOUNTER\n\nHe had once had a name. It was now unpronounceable, or perhaps unthinkable in ways this new brain could comprehend. The name had meant countless things. It had involved the places he'd gone and the ancestors who had led to his creation. However, the name had been in a language that was unfathomable to this form.\n\nHis name was now simply 'Marcus'. He was created from genetic stock from the massive planet Rmavsh and his background indicated traits toward strong diplomacy.\n\nHe opened his eyes.\n\nThere were signals passing through his optic nerves. He could make no sense of them.\n\nThere were other nerves. They were in his skin. He could make little sense of those sensations either, but he did seem to sense he was in some sort of fluid.\n\nHe sensed motion near him. Soon, he felt added pressure on what he was later to learn were called arms and legs.\n\nHis limbs began to move. As they had, several times a day for the past two decades, his arms and legs began pushing and rotating in response to the machines who were tasked with exercising this body. The body had been little more than a living cadaver during its relatively brief existence.\n\nUntil today, the brain had not been capable of thought. A few simple commands had been programmed into a specialized region of the hippocampus so the body might respond correctly to fitness regime -- assuring a properly formed body and alleviating any chance of atrophy.\n\nFor now, he allowed the autonomic exercises to continue. It gave him time to observe and learn the intricacies of this unfamiliar and strange body.\n\nHis awareness continued to expand and he simply stayed suspended, thinking, for several days.\n\nHe awoke from sleep one morning to discover he could now make sense of the visual signals transmitted from the eyes.\n\nHe was in a great room - The Center. Before him he could see his relatives floating in a gaseous tank. He looked with longing at the form he had once held. Though he was gaining a familiarity with his human shape -- it still felt as though he was a guest in this body.\n\nHe turned his head and saw the others. In the great circular track around the Center were three hundred and twenty-eight tanks each containing a human body in an equal ratio of males and females.\n\nThese humans were quite nearly every size, shape, and color within the spectrum of the human race. From dark-skinned individuals tracing their lineage back to the African continent of Earth to blue-skinned Xflesian stock -- the Aquilans had taken a heterogeneous approach to the bodies they would eventually inhabit.\n\nHe studied the woman in the tank to the left. Her form was long and willowy, her hair of a color he would later learn to call blonde. Marcus could see her eyes were open but showed no signs of recognition. He surmised that she must have awoken later and was still not yet capable of processing the visual stimuli. He found his eyes lingering on her naked form and was surprised to feel a rush of blood to his pelvic region. He looked down to discover his sexual organ had grown much larger and was now rigid. He felt a familiar longing begin.\n\nHe turned to the other side. Here was a woman whose skin was of a much darker shade than his own. The breasts on her body were much larger than the lighter-skinned one he had just observed. Her eyes were open, also and they showed recognition. She seemed to be evaluating his form and her eyes lingered on the rigid organ he himself had noticed.\n\nTheir eyes met. They evaluated each other for quite some time. He felt the longing increase.\n\nThe next moment, the machines kicked in. He allowed them to exercise his body for a few minutes, but for the first time he grew resentful of it. He wished to interact with the female he had been watching. He wasn't certain how he wished to interact, but he suspected it had something to do with the rather uncomfortable rigidity between his legs.\n\nHe pushed back on the exercise machine, dragging against the motions it wished for him to perform. It was a struggle at first, but the machine soon stopped. This was actually a trigger. The machines had been programmed to recognize that if a body resisted the exercises rather than complying -- it had become aware and was ready to leave its life within the tank.\n\nThe machines stopped and the tank began to drain. The feeding and breathing tubes, and other requisite attachments were soon removed. Minutes later, Marcus found himself standing unsteadily on the floor.\n\nHis slow awakening had actually given him a surprising familiarity with his new body. He was able to stand and move. He became aware that he was capable of speech -- using the seventeen languages, including Galactic Standard, which had been pre-loaded into his brain and had simply waited there until the day a consciousness entered the body. What all of the words meant were more of a mystery. Blue, red, brown -- they seemed to make sense. It would be several weeks before he could string these odd words together into a coherent sentence of more than a few words.\n\nLanguage was not his concern, however. He felt he had to interact with the creature in the next tank.\n\nOn moderately shaky legs, he walked slowly to the dark-skinned woman he had observed. She had seen him resist the exercises and had followed suit. Her tank was nearly drained and she gingerly stepped out to greet him.\n\nThey stood and evaluated each other. The woman was still glistening with the aqueous fluids which had sustained her throughout her formative life. She stepped forward and leaned into him, her high and large breasts being the first bodily parts to touch his. Both of them gave an involuntary gasp at the electrifying jolt of first bodily contact.\n\nPerfectly nourished for her genetic make-up, she was actually a bit taller than he was since his stock was descended from a planet with heavier gravity. As a result, her breasts touched high on his chest.\n\n\"Marcus,\" he said, indicating himself.\n\n\"A'nish,\" she said.\n\nShe bent her head down to be near his.\n\n\"Kiss,\" she said simply.\n\n\"Kiss,\" he replied.\n\nThis word made sense.\n\nTheir lips met. It was awkward at first but they soon discovered that moving their lips in certain ways brought more pleasurable stimulation.\n\nAs they kissed, they began to explore each other's bodies with their hands.\n\nHe soon found his hand on her breast.\n\n\"Soft,\" he commented.\n\nShe nodded in agreement.\n\nShe soon found her hand on his penis.\n\n\"Hard,\" she commented.\n\nHe also nodded in agreement.\n\nThey began pushing against each other, also enjoying the sensations of exploring each other through greater skin contact and not just their hands.\n\nHer greater height was a good thing. As they continued 'exploring' and their bodies began naturally responding to the lovely contact, they eventually found his hard member brushing against her nether lips which were now moistened from more than the fluid in which she had lived.\n\nThey knew what to do. Both through instinct and through the limited knowledge with which they had been pre-loaded and were just beginning to unlock. Yes, they knew what to do.\n\nShe moaned involuntarily at the feeling of his long organ sliding into her.\n\n\"Penis,\" she gasped.\n\n\"Vagina,\" he replied.\n\n\"Prick,\" she moaned.\n\n\"Pussy,\" he groaned.\n\n\"Cock,\" she growled.\n\n\"Cunt,\" he cried with a thrust.\n\nThese words which had drifted curiously in their brains now made sense.\n\nIt was time to learn what to do with the things to which these names belonged.\n\nIt was not elegant or graceful, their first sex, but it was certainly intense. They looked into each other's eyes as they began moving together. Each evaluated the reactions of the other body as they coupled in a somewhat awkward standing position.\n\nPerhaps it was due to being in perfect physical condition due to the automated routine his body had undergone every day. Perhaps it was because his entire system was still not entirely linked together and his brain was still learning his body. Whatever the reason, Marcus lasted a surprising long time for his first ever sexual experience. He lasted so long, in fact, that it was A'nish who first climaxed.\n\nMarcus paused as the orgasm overtook her. He watched with some curiosity and then experimented with his lips upon her nipples as the last waves rocked through her. When she was done, he began thrusting again. It was only a few minutes later when he felt the odd almost pulling sensation in his loins. In some way, it felt as though A'nish was drawing the semen out of him. He moaned as the first spurt shot out and seemed to gush endlessly into her 'pussy' as he knew the word to be.\n\nAnother followed, and then another. She observed him with a kindly expression as his climax progressed. When he was done, he removed himself from her. The two of them turned to examine their Aquilan relations -- floating about in the huge gaseous environs just beyond the thick plasteel. Marcus and A'nish were forced to squint at the beautiful brightness of their kin.\n\n\"Not - same,\" observed Marcus, contemplating the creatures beyond -- creatures which they had once been.\n\n\"No,\" agreed A'nish. \"S... s... sex not same. Sex, not as good.\"\n\n\"Practice,\" said Marcus. \"We must - practice.\"\n\n\"Agreed,\" said A'nish.\n\nThey heard a noise and turned to see two other individuals approaching. It was another couple, who must have been from tanks further around the arc of the Center. They were a fascinating contrast in color and shape. The male was quite tall, even taller than A'nish and his skin was shockingly white. The woman was shorter than Marcus, and her skin was a crimson red. If measured, her breasts were possibly smaller than A'nish's but did not appear so due to her smaller frame.\n\nA'nish crossed to the tall, ivory man of Venatacorion stock and pulled him into an intense kiss. Marcus approached the voluptuous rubicund woman and they contemplated each other.\n\nShe reached down to grasp his cock, which had rapidly recovered -- having twenty years of waiting stored up inside.\n\n\"Hard,\" she commented.\n\nHe reached down and dipped two fingers into her pussy.\n\n\"Wet,\" he observed.\n\n\"Sex,\" she stated, simply -- nodding her head toward the male now entangled with A'nish.\n\nMarcus understood.\n\nHe began kissing her. They also rubbed together and were well-stimulated.\n\nCopulating, however, was not as seamless as it had been with A'nish. He tried bending his knees and she tried standing on her tiptoes -- but they could not find a way to make it work.\n\nShe shrugged and lay down upon the floor, beckoning him to lie upon her and enter her from above.\n\nAs he slid into her, he looked up and saw three more couples who had recently emerged. All of them were doing the same. As they began to move, he contemplated that his body was emanating something called 'hunger' -- but that would have to wait. He had at least this union to attend to, if not several more before he needed to seek out nourishment.\n\n***\n\nTWENTY-FIVE YEARS AFTER THE AQUILAN ENCOUNTER\n\nCommander Angelo Telegin watched through the view port as the Aquilan ship Alshain. It was legendary throughout the universe for both its beauty and its mysteries. It resembled a great and elegant mechanical bird. In the center was a huge body, and out from that sprang wings formed of delicate looking spines and tubes. In truth, these 'wings' were quite large. The crew was believed to live in the wing areas. The equivalent head and the tail sections were believed to be the engineering and navigation sections.\n\nIt was thought the body contained the power source, though no one was certain what form of energy source the Aquilans used.\n\nIt was known the Alshain could navigate nearly any environment. It had originally appeared in NGC 6751, the planetary nebula where the Aquilans resided. The Alshain was perfectly capable of FTL travel as well as atmospheric navigation. In fact, its FTL was so sophisticated the Aquilans had no weaponry. Once, a paranoid captain had switched on his weaponry and the Alshain had popped out instantaneously -- reappearing four systems away within seconds.\n\nOther than the fact that there were human forms aboard the Alshain, and that the ship was beautifully engineered - the Aquilans and their ship were still a mystery to the greater population and even members of the fleet.\n\nAngelo had won the chance to explore these mysteries.\n\nHe sat patiently waiting for the hatch to open. He couldn't believe this was actually happening. He'd been assigned the most coveted position in the fleet - liaison to the Aquilans. Technically, the officially term for their people was Aquilis Humanis, to differentiate the human denizens of the Alshain from their plasma/chemical-based counterparts, but in common vernacular, 'Aquilan' was the term everyone used for both forms of these mysterious people.\n\nEven after the initial contact with the Aquilans five years prior, when the Alshain had appeared with Galactic-speaking humans, there was still very little known about the Aquilans. Their primary purpose, as the human Aquilans had plainly stated, was to serve as representatives for their race, who lived mostly in nebulae and upon gaseous planets where their native forms were long and beautiful cylinders filled with pulsating energy.\n\nIn that shape, the Aquilans had found it too difficult to communicate with humans. That had been the purpose of their incursion two decades prior. They had absconded with the laboratory and genetic materials from the ship and had grown a pool of three hundred-plus human ambassadors through whom they could speak.\n\nThese humans had been grown in vitro for the first twenty years of their existence. The bodies had been manually exercised and conditioned as they formed, but no brain functions had been allowed.\n\nThen, as the story went, over three hundred Aquilans had willed themselves to transfer their consciousnesses into the waiting bodies. It was through those bodies, now sentient, that the Aquilans had made the first true intelligible contact with the human race.\n\nIt seemed that the first encounters had been unusual or troubling in some fashion. They had made contact with the science explorer ship Basset and no details regarding that first meeting had ever been released -- except that all military and civilian ships were ordered to avoid any contact with the Alshain.\n\nWhat was certainly known about the human Aquilans was they were fierce negotiators. The Aquilans had grown concerned with human encroachment into their space. The first demands had been for the Republic to cease their movement into Aquilan territory and to sign treaties assuring specific planets and nebula would remain untouched.\n\nWhat was rumored about the human Aquilans was wide and varied. It was said they rarely wore clothes aboard their own ship. It was further said they were sexually aggressive and insatiable. During initial encounters, people whispered that Aquilans had coupled during meetings until diplomats had convinced them it could be a distraction from proper negotiations. Since that time, Aquilan envoys had learned more decorum - but the rumors ran rampant about what exactly the Aquilans got up to aboard the Alshain.\n\nA little over three years prior, excitement had spread through the fleet when the Aquilan liaison program was announced. For three months at a time, a fleet representative was chosen to serve a tour of duty aboard the Alshain. The Aquilans had further requested that the liaisons alternate between male and female candidates -- under thirty years of age.\n\nWhat specifically happened with those liaisons was anyone's guess. The liaisons spoke to no one about their experiences except to designated members of the Science Corps whose reports were triple classified.\n\nNow Angelo was to discover for himself. He had graduated from the academy top-of-class, worked his way up quickly in the ranks, and was poised to Captain his first ship after his three-month rotation aboard the Alshain. He was the eleventh liaison to be assigned to the ship. The liaison's duties were to assist with any technologies within their realm of expertise, learn about the Aquilans, but above all to serve as ambassadors for the human race to these fascinating creatures who were human in form -- but inhabited by a consciousness that had once been a coalescing jellyfish-like creature.",
        "Angelo said his farewells to the friends he had made aboard ship and then walked down the long boarding tube toward the Alshain. He waited for the hatch to open.\n\nThe protocol was clearly defined. He was to board the ship and debrief with his predecessor, in this case Neirna Lappeng, a woman who had been an upperclassman when Angelo entered the Academy. She was intelligent, disciplined, and possessed of the kind of beauty that was not conventional, but seemed to linger in one's mind.\n\nThe boarding hatch slid open and the first thing that struck Angelo was the air. It was humid and bore a sweet, musky smell. It wasn't unpleasant, but seemed much more 'earthy' than one would expect aboard a space vessel. Next, he saw Neirna. She was as striking as he had remembered her. Yet, there was something in her eyes. They were haunted.\n\nHe flashed her a quick smile during his salute and he saw a strange transformation in her face. She quickly smiled as well, then took his hand in hers and pulled him down the corridor. She led him to a door marked 'liaison quarters' and led him in.\n\n\"Well Neirna, I look forward to hearing...\"\n\nHe never got any further, she was suddenly wrapped around him, her lips seeking his, her legs wrapped around his hips, her arms holding him close.\n\n\"You have the best smile,\" she said in an intense whisper. \"Your smile is so amazing. It is the most beautiful thing I've seen in three months.\"\n\n\"Okay, but Neirna...\"\n\n\"Shh!\" she said, \"don't talk about official nonsense - it's all in my report. For now, let's just talk about us.\"\n\nThere wasn't much talking involved, however. She soon had his shirt open and was kissing his neck and chest lovingly, looking up occasionally to study his face. Then she had his pants open and his cock free. She stroked it lovingly and sucked it the rest of the way to hardness (there wasn't far to go). The next thing he knew her clothes were also off and she was climbing up to straddle him in the chair.\n\nWith a deep intake of breath and of cock, she was soon enveloping him and moaning with pleasure as she reached the base of his shaft, her warmth enfolding him.\n\n\"Neirna...\" started Angelo, but again, she silenced him - this time with a finger to his lips.\n\n\"Shh,\" she urged him, \"just let me watch your face.\"\n\nShe began a slow, sensuous ride of his cock and the entire time she was intensely focused on his face - watching his every expression with unusual fascination.\n\nAngelo soon gave up thinking about the oddness of her sexual attack and simply surrendered to the passion she was emanating.\n\n\"God, I could watch you all night. I could watch you forever,\" she sighed.\n\nHe reached up and kissed her passionately, to which she responded instantly.\n\n\"Oh gods,\" she moaned as spasms began in her hips. \"Oh gods, Angelo, I haven't felt like this, not like this in the longest time. Oh GODS!\"\n\nShe froze in divine climax, her face a mask of pleasure, her body hot from passion. When the strongest part of her orgasm was past, she looked deeply into his eyes - a glint of a tear forming in the corners of her own.\n\n\"Can I ask you something, and will you promise not to get too freaked out by it?\"\n\n\"Of course,\" said Angelo tenderly.\n\n\"Do you think,\" she started, and then had to suppress some tears, \"do you think you could love me? If the situation was different, do you think I'm someone you could fall in love with?\"\n\n\"Of course,\" said Angelo, though he was a bit taken aback by the question. \"I always admired you at the Academy. You're smart, pretty, compassionate - of course I could fall in love with you.\"\n\n\"You're telling the truth, aren't you?\" she sobbed. \"You really mean it.\"\n\nHer hips began bucking and her inner muscles began squeezing his cock intensely. It was clear she only had one goal in mind now, and she worked with a fervor to achieve it. Within minutes, she had ridden Angelo to his own climax and he moaned as he spilled himself into her.\n\nShe cried a bit more, holding him tightly to her chest as he pumped his cum deep into her warm cavern.\n\nMoments later, she was dressing, her face wearing a mask of embarrassment.\n\n\"What was all of that about?\" he asked her softly.\n\n\"I... I'm sorry Angelo. That was a shameful display, really?\"\n\n\"I disagree,\" said the young Commander. \"It was amazing. Confusing - but amazing all the same. You were so intense, so wonderful.\"\n\n\"Thank you,\" she said, brushing back some tears. \"Now I must be going.\"\n\nShe noticed that Angelo was starting to put on his own uniform.\n\n\"Oh, don't bother,\" she said. \"Clothes make them terribly uncomfortable.\"\n\n\"They do?\" he asked. \"So it's true?\"\n\n\"The nudity, the constant sex, yes, those rumors are all true. You'll see.\"\n\n\"But, the debrief,\" he asked, \"aren't you going to tell me more?\"\n\n\"No point,\" she said quietly. \"You wouldn't understand, no matter what I told you.\"\n\n\"Wouldn't understand what?\"\n\n\"It's in the vidlog,\" she explained.\n\n\"What vidlog?\"\n\n\"The one that only the liaisons make entries in. The one that only the liaisons can read. This cabin and everything in it is ours. Diplomatically protected - no Aquilans are allowed in here.\"\n\n\"Okay?\" he said, more curious than ever.\n\nShe finished buttoning her uniform and pulled him up from the bunk, pulling him tightly to her and pulling his head down for a gentle kiss.\n\n\"Don't despair,\" she said in a terribly serious tone. \"No matter how dark it looks, don't give up hope. There is love. There is passion somewhere in the universe. You and I just proved it.\"\n\n\"I still don't...\"\n\n\"Others have tried,\" she stammered. \"Others have tried to explain what it's like, but none of them can. Watch the vidlogs, they bring some comfort - but only you can come to know what this place will mean to you.\"\n\n\"But...\"\n\n\"Goodbye, Angelo. Stay strong.\"\n\nAnd with that, she was gone, departing toward the hatch which would take her back to the fleet transport.\n\nOnce the hatch was closed, Angelo stood very self-consciously in the corridor. He suddenly had the feeling he was being watched - and he was. Three stunningly beautiful women suddenly peeked around the corner. The three women approached him in almost stalking fashion, evaluating his body with such scrutiny that he felt even more self-conscious.\n\nOne was a brunette with fair skin, high round breasts, her eyes were a piercing blue.\n\nThe next was undoubtedly from ancient African stock, chocolate-skin, long neck and body, ample hips, and big beautiful breasts. The third seemed to borrow from many ancestries, olive-shaped eyes with a slight upturn that spoke of some sort of mixed ancient Asian ancestry, light-brown skin, smaller breasts but wider hips and thighs, yet blond hair that stood in fascinating contrast to her slightly darker complexion.\n\n\"Greetings, Liaison Angelo Telegin,\" said the darker skinned woman. I am crewmember A'nish and it is my honor to welcome you aboard.\"\n\n\"I am Flennie,\" said the brunette. \"It is also my honor to extend the greetings of the crew.\"\n\n\"I am called Leneria,\" said the exotic blond.\n\nThe women were slowly circling Angelo in a sensuous dance. Their hands were brushing playfully across his skin, their bodies rubbing against him now and again.\n\n\"You have a pleasing form,\" said A'nish, \"well muscled, seemingly fit, and your sexual organ gives the appearance of being very capable. Oh, and recently used - it appears from the remaining fluids.\"\n\n\"Though we will be able to teach you much in the ways of pleasure and endurance,\" continued the chocolate-skinned A'nish, whose large breasts had just brushed against Angelo's back.\n\n\"Now for your first partnering,\" said Flennie. \"We prefer that we be the ones to determine who your sexual partner should be.\"\n\n\"Do you kiss?\" asked A'nish. \"Your kind almost always does, or so we have noticed. Kissing is a common element of foreplay.\"\n\n\"I... yes, of course,\" stammered Angelo.\n\nHis mind was a jumble of thoughts. He was still reeling from his encounter with Neirna. He was torn between being affronted and flattered at the frank sexual approach of the Aquilans. There was a fleeting thought in his mind that he might not be able to recover quickly enough after the recent sex, though his 'sexual organ' seemed to be indicating quite otherwise as it grew larger and stiffer with each tug the three women were giving it.\n\n\"Good,\" said Flennie. \"I will kiss you first, my crew members will observe. Please keep your eyes open, it assists in evaluation.\"\n\nFlennie stood up on her tiptoes, pushing her supple body into his and kissing him with a calculated approach.\n\nAngelo found it to be an exciting, but disturbing kiss. Flennie's beautiful body seemed to be moving against him in such a way as to be almost instinctive, yet calculated. Her nipples brushed against his chest before pushing into him more firmly, her arms and hands caressed his back, and her lips were indeed very kissable. Yet, her eyes were cold. They were watching him from a clinical distance and there was no sign of the passion the rest of her body was relaying.\n\n\"Very good,\" she said upon finishing the kiss. \"His pupils responded well, his nerves were sensitive. The vessels in his penis seemed to dilate a satisfactory amount, wouldn't you agree?\"\n\n\"We would,\" concurred the other two women.\n\nNow it was A'nish's turn, she was a bit taller - almost as tall as him - their lips met easily and he had to fight a bit of dizziness from the intensity of their kiss. His hands rose unbidden to the ample breasts pressed against him and caressed them tenderly. Yet again, however, there was the cold removal in her eyes.\n\n\"I thank you for that added stimulation,\" said A'nish. \"Whether you are chosen for me on this occasion, I look forward to copulating with you at some point during your time on the ship. Crewmates, how would you rate our kiss?\"\n\n\"It was quite satisfactory,\" said Flennie. \"Yet, I am having difficulty in differentiating my kiss from yours in any qualitative fashion.\"\n\n\"I must agree,\" said the dark-skinned beauty. \"It remains to Leneria to see whom might gain honor of first coitus with you, our new liaison.\"\n\n\"Very well,\" said the exotic woman. \"We shall see if I elicit any greater circulatory or nervous responses in Commander Angelo Telegin.\"\n\nShe pushed her body into his and rapped a hand around his neck, pulling him down into a passionate, open-mouthed kiss.\n\nThe effect was immediate and startling for Angelo. While his lovemaking session with Neirna had been unique and amazing, and his kisses with the first two women had been 'stimulating' as they put it, his body instantly sang out to Leneria. Forgetting the directions they had given him, he closed his eyes as they kissed. Fireworks, constellations, pathways of light burst in his mind at the intensity of their kiss. He opened his eyes and saw with some satisfaction that her eyes were closed, too. Pulling back from her, he watched her in wonder as she stayed there, her eyes still closed, her lips still parted. Her eyes suddenly flew open and she held her hand to her mouth in shock.\n\n\"I am somewhat disappointed,\" said A'nish, \"it is clear his body responds most readily to yours.\"\n\n\"Indeed,\" said the brunette who called herself Flennie. \"You are well matched and the first coupling should indeed be with Leneria.\"\n\nThey had not noticed Leneria's response, but Angelo had. She was looking down at the ground, blushing.\n\n\"Are you alright?\" he asked with some concern.\"\n\n\"I am perfectly right,\" said Leneria. \"All of me. However, I must disagree with your analysis. It is A'nish who provoked the greatest response. I will leave it to you to welcome Commander Telegin aboard. Flennie, I will give the responsibility of observing and reporting on the copulation. I have business to attend to elsewhere.\"\n\n\"But, I'd like to try it with Leneria,\" said Angelo, quite seriously.\n\n\"But it isn't your decision, is it,\" said Leneria, with more than just a slight bit of annoyance. \"It was ours to choose, and A'nish will couple with you now. Goodbye.\"\n\nWith something akin to a huff, Leneria turned on her heel and departed to other portions of the ship.\n\n\"Come, Commander Angelo Telegin,\" said A'nish, \"we will find surroundings more comfortable for sexual congress.\"\n\nA'nish took Angelo's hand and led him to a cabin. As the hatch slid open, Angelo was first worried that she had led him to a padded cell. From floor to ceiling, the room was covered in padding, silks, and sheets.\n\n\"Umm, she's coming with? Is she going to join in?\" he said, indicating Flennie who had taken a seat with an electronic writing tablet.\n\n\"No, Flennie is merely here to observe our sexual union and take notes on your strengths and deficiencies.\"\n\n\"Deficiencies?\"\n\nCommander Telegin, we take our copulation quite seriously, there is always room for improvement. Practice until perfection; that is our motto.\n\n\"Where've you been all of my life?\" said Angelo with a grin.\n\nFlennie took a note.\n\n\"We hear that quite frequently from the liaisons,\" she said, \"especially from the males. Now, it is time for us to couple.\"\n\nA'nish, the stunning chocolate-skinned beauty began to do just that. Her body was soon pressed against him and she was lowering him to the floor, kissing her way down his torso.\n\nAll the while, Flennie sat by and continued a steady stream of typing as she observed the two together.\n\nWhen A'nish arrived at his cock, she examined it both sensuously and clinically (if such a thing was possible).\n\n\"Reasonable size,\" she said. \"Aesthetically pleasing glans, circumcision providing more ready access for oral stimulation.\"\n\n\"Is she going to... okay!\"\n\nThe oral stimulation A'nish had been referring to had just begun, stopping Angelo mid-sentence, making him quite readily forget any objections he had to the side-by-side examination and seduction.\n\nA'nish then proceeded to give Angelo a truly crippling blowjob. If he'd been asked to do anything at all while her gorgeous full lips were wrapped around his shaft, he would have been truly incapable of even responding. Just as his balls began to simmer with the hints of an orgasm, she backed off, making him moan with the divine torture of her ceasing her activities.\n\n\"You may now stimulate me,\" she said calmly.\n\nRolling off of him and lying back - she beckoned him to her.\n\nIf Angelo had been uncomfortable with the scrutiny he'd been receiving, now he was more than a bit nervous. A'nish laid back to receive his attentions, Flennie continued observing and notating.\n\n\"I feel like I'm being graded as a lover,\" he said with a nervous chuckle.\n\n\"But you are,\" said A'nish, \"though we prefer the term sexual partner.\"\n\n\"However, there is no specific grade if you are referring to typical human school grading systems,\" continued Flennie. \"You are merely being evaluated for strengths, weaknesses, and predilections.\"\n\n\"Oh,\" said Angelo, \"that makes me feel better. Well, here goes.\"\n\nHe began kissing A'nish, and she responded in ways that certainly led him to believe he would get some sort of passing grade in at least some areas.\n\nThere was an oddness about the encounter, however - and that was in the lack of talk. Not that Angelo was obsessed with dirty talk, or expected A'nish to be screaming out 'lick me' or something else along those lines - but her silence was off-putting. The only clue he had of his effectiveness was the way her body responded and increases in her breathing. Occasionally she would moan slightly with pleasure - but anything audible seemed more involuntary.\n\nWorking his way down her body, he was soon kissing away at her vulva and paying special attention to her clitoris. With his index finger, he reached inside of her and was pleased to quickly find her G-spot and elicit the first true moan from his odd yet beautiful partner.\n\n\"That is very good,\" she sighed. \"Very good, indeed. Oh! I'm going to climax now.\"\n\nA'nish gave a huge sigh as her body began to shake with tremors of pleasure. When her body had recovered, she gave him a slight smile and complimented him.\n\n\"Excellent manual manipulation, Commander Telegin, your oral endeavors could use some improved technique - but we will be pleased with you. Now, let us proceed to full copulation.\"\n\nAngelo soon found his cock pressing against his partner's moist pussy, dripping from his recent attentions.\n\nThey began the slow and sensuous horizontal dance known throughout the universe to all of human form. Never before had Angelo lain with such a responsive lover. Every move she made seemed perfectly calculated to heighten his pleasure. Her hands on his back, her hips against his pelvis, her lips on his chest - it was though she was plugged directly into his nervous system.\n\nHe felt he was doing his best to respond in kind, but knew somehow he was falling short. Had he not been so deep in the throes of pleasure, he might have felt more guilty about it. As it was, he was lost to passion.\n\n\"You are amazing,\" he moaned as A'nish rode him with great expertise after they had spun around and she had taken him cowgirl style.\n\n\"No, I am not,\" said A'nish - while at the same time massaging his cock with her inner muscles. \"Our union has been clumsy and inefficient, but that can be rectified with further practice between the two of us.\"\n\nThis statement seemed to be a challenge of sorts, and one which Angelo felt he must rise to.\n\nHe began pounding his cock into her from below, taking full of advantage of the hours of intense physical workouts he had engaged in on the trip out. Her dark skin soon flushed and he was pleased to see his rapid-fire thrusts had pushed her over the edge into a second orgasm. As she collapsed against him, he still felt stung by her comment. He kept going, rocking her body on top of him, her weight resting on her ample breasts and her body shifting back and forth atop him in almost fluid-like fashion.\n\n\"Ve-ry en-thus-i-as-tic if no-thing else,\" said A'nish, her words coming out in pulses between thrusts.\"\n\n\"Oh Gods, A'nish,\" he cried out, his sudden attack having a quite expected effect on his own body. He felt the second cum of the day gathering in his cock and preparing to burst forth.\n\nHis body stiffened and the white pool waiting inside of him shot forward. It surprised him, in a way, because it as though even more semen sprayed deep into her silky cavern than his prior ejaculation with Neirna.\n\n\"Our session is complete,\" said A'nish in a tone that showed the first sign of emotion Angelo had yet to hear.\n\nHe pulled her face down to kiss her, but she turned her face away.\n\n\"Again, the curious kiss,\" she said. \"So many of your kind seem to rudely prolong intimacy.\"\n\n\"Rudely? Don't you like kissing?\" asked Angelo.\n\n\"My likes and dislikes don't enter the picture,\" said A'nish. \"Kissing is effective stimulation - but it is considered rude among our kind to initiate intimacy after-the-fact.\"\n\n\"Why?\" asked Angelo. \"Why is it rude?\"\n\n\"It simply is,\" she replied coldly. \"You have been welcomed aboard with intimacy. Be grateful and take comfort that I haven't taken offense.\"\n\nAngelo was grateful...and perplexed. Physically, he had just experienced some of the most intense sex of his life - but emotionally he was reeling. First there had been the desperate fuck with Neirna, then the clinical/erotic session with A'nish - but there was no sense of closure. No goodbye kiss, not even a thank you. It wasn't like he needed an after-sex cuddle, but something was needed.\n\nA'nish was already standing and Flennie was offering him a hand up.\n\n\"A'nish, this is most interesting,\" said Flennie. \"Look at his sexual organ. It has already passed tumescent recovery and seems well on its way to an erection again. It seems his body is extremely responsive to the pheromonized atmosphere.\"",
        "\"Tumescent what? Pheruh-what?\"\n\n\"We prefer to maintain a high state of sexual arousal in our ship,\" explained Flennie. \"As such, our scientists have designed a custom pheromone/hormone mixture for our internal atmosphere to which all human forms respond with varying degrees. The fact that this is your second copulation in the past hour and that you are visibly approaching erection once more indicates your body is well attuned to the mixture. Now, it is meal time - come to the galley where you can meet the majority of the crew.\n\nThey re-entered the hallway. Angelo was wishing for some sort of cloth to cover the object of Flennie's inspection, but they were soon greeted by several naked crew members of both sexes, the male members of which displayed prominent evidence of the 'high state of sexual arousal' desired.\n\nOne couple appeared to be mechanics of some sort -- complete with tool belts, but nothing else. The woman, a green-tinted beauty of Alluvian stock, was patiently repairing a power conduit as a man of slightly greater height than Angelo took her from behind - though still handing her tools as she needed them.\n\nThis was nothing compared to the scene which greeted them when they entered the galley. The closest thing Angelo could think of was the banquets and orgies described to have happened in the days of ancient Rome. There were platters of food spread about, and on every table and bench were naked bodies - a great many of them joined together in some form of sexual union. The coupling stopped, however, upon their entrance.\n\n\"Attention please, attention,\" said a male Adonis of impressive proportions (in all aspects). Please join me in welcoming Commander Angelo Telegin, our newest fleet liaison.\n\n\"Greetings Commander Telegin,\" said the masses as one.\n\nHad Angelo been in a state of mind to observe smaller details, he would have noticed a majority of the females turning to their info tablets. Instead, he simply tried to stay focused and cross to the man who had made the announcement.\n\n\"Am I to assume you are the captain?\" he asked.\n\n\"No,\" said the muscular crewman. \"We don't have captains as you would think of them. I am, however, part of the navigation team and seem to have certain natural predispositions toward being a better host. Marcus, at your service.\"\n\n\"Marcus, nice to meet you,\" said Angelo, shaking his hand.\n\n\"I too, am fascinated to meet another representative of your race,\" said Marcus warmly. \"Tell me, did you know Captain Neirna... I mean, beyond the sexual congress we believe you shared with her upon your arrival?\"\n\n\"I uh... wow, you are one frank race. I knew Neirna at the Fleet Academy and served under her in two battle exercises - but I wouldn't say I knew her all that well.\"\n\n\"She was a good liaison,\" said Marcus. \"Competent, intelligent, and a most able and enthusiastic sexual partner.\"\n\n\"Yes, about the sex,\" said Angelo, stammering. \"It's very... very...\"\n\n\"Perplexing?\" offered Marcus. \"That was a word Neirna often used.\"\n\n\"Yes, that's a good word.\"\n\n\"Come with me, Commander Angelo Telegin,\" said Marcus. \"I believe I can shed some light on our race.\"\n\nThey walked past steady line of sex in the galley and were about to leave when a svelte young blond disentangled herself from her partners and scurried to Angelo's side.\n\n\"Hello Commander Angelo. I am Lietseleh. I saw the report,\" she said with an almost smile.\n\n\"The report?\" asked Angelo.\n\n\"Yes,\" she said, tapping an info screen by the door. \"Flennie's report. And the vid she recorded?\"\n\n\"She recorded a vid?\"\n\n\"Of course,\" she said, \"How else could we help each other improve? I am considered a particularly apt tutor in oral stimulation. I would like to teach you. It could be a most pleasurable experience. How about now?\"\n\nMarcus intervened.\n\n\"Lietseleh, we have three months with the Commander, give me some time to show him around the ship before we initiate him any further.\"\n\n\"Very well, but don't forget me, Commander.\"\n\nThey departed the galley and started down a more secluded corridor where there were far fewer Aquilans and they seemed to be busy at chores too serious to multitask between sex and work.\n\n\"Where are we going?\" asked Angelo.\n\n\"To the heart of the ship. We simply call it the Center,\" explained Marcus. \"I am hoping to shed some light on our unusual ways.\"\n\nThey paused at a large armored door and Marcus turned to Angelo with a quite serious expression.\n\n\"Commander, you are about to see a sight few Galactic humans have been privileged to witness. In the Center are our relatives, over five hundred true Aquilans, contained in a tank of nebula-like atmosphere. Here are some goggles to shield our eyes from the most intense output from their coupling.\"\n\nThey donned darkened goggles and Marcus pressed a button which opened the great hatch.\n\nBefore Angelo was a sight he knew he would never forget. In a huge tank of transparent plasteel floated countless creatures, pulsating with bursts and trails of light. Jellyfish crossed with mitochondria might have been an adequate description, but they were infinitely more complex and beautiful.\n\n\"There we are,\" said Marcus in a hushed tone. \"Aquilans in their true form. Do you see the tube-like creature there?\"\n\n\"Yes,\" whispered Angelo.\n\n\"That is a female, actually one of my cousins - or as close as one can get in relative human terms. You will notice, all females are cylindrical, but with hollow centers. The shape of a tube is the easiest way to identify Aquilan females. They are also slightly larger. Do you see that cylindrical form approaching her? The one with tapered ends?\"\n\n\"Yes.\"\n\n\"That is a male, he is about to pass through her. This is an oversimplification because our race is composed of far more than electrical current - but I will try to state it in coherent terms. Think of the females possessing negative polarity and the males possessing positive. It is the interaction between the two which brings the energy of life - the currents and interactions which make us capable of sentience, thought, and creativity.\"\n\n\"Strand a male or female Aquilan alone for more than a few hours without a sexual union and they must quickly enter a dormant state. If they attempt to exist for very long without coupling - they will quickly devolve back to the simple nebula gasses from whence they came.\"\n\n\"So, Aquilans can't think if you haven't had sex?\" asked Angelo.\n\n\"It even goes beyond that,\" explained Marcus. \"We can certainly persist for long periods without copulating - but it is akin to a computer which isn't in use. A dormant Aquilan is not unlike a computer which has been put in hibernate mode. The memory is intact, but without the chemical/electric power of sexual stimulation we aren't truly functioning beyond base operations and the minimum awareness of our surroundings in order to navigate safely. Ah, that pair is about to couple.\"\n\nThe long tapered creature soon entered the cylindrical tube, and even with their goggles Angelo had to squint from the brightness of the sparks they formed.\n\n\"So, is it really sex?\" asked Angelo. \"Or is it simply a static electricity generator.\"\n\n\"Oh Commander, do not underestimate the pleasure of Aquilan sex. In any life form, sexual pleasure is a natural evolutionary development. Those that find sex more pleasurable thrive. Those that do not, fall by the wayside.\"\n\n\"Aquilan skin is made of a complex membrane,\" said Marcus. \"There are one hundred times more nerves per every square centimeter of their skin than in the most sensitive erogenous zones of human lips or sexual organs. In each union, we exchange and generate both chemical and electrical energy in the process. In fact, our relatives here in the Center are the only power supply our ship needs. There is nothing more intense, powerful, or pleasurable than an Aquilan union.\"\n\n\"What you must understand is, we all began as true Aquilans. My consciousness resided for over six-hundred Earth years in a male Aquilan shell before I volunteered to make the transference to this body. Aquilans take one hundred years to mature, so that means I had five hundred years of existence where sex was essential to survive.\"\n\n\"So that's why you...\"\n\n\"Why we fuck like rabbits, as more than one liaison has put it. Yes, though we have left our Aquilan bodies our memories and our instincts remain. It is a difficult phenomena to explain, but even in our new 'shells' we are still driven by the fierce survival instinct which tells us we must copulate as often as possible.\"\n\nAngelo looked about the huge tank and even through the dense gaseous atmosphere could see several unions occurring. He continued watching quietly, finding himself actually a bit aroused at the gaseous orgy taking place before him.\n\n\"What are those?\" he asked, pointing to smaller creatures flitting about more rapidly.\n\n\"Why, children of course,\" explained Marcus. \"You will notice they are not coupling, they've no need. It is not until we reach full maturity that this intense desire and need for sexual congress develops. In some ways, we are very similar to your kind.\"\n\n\"Why aren't there more?\" asked Angelo. \"I mean, with all of this sex, why isn't the tank swimming with children?\"\n\n\"Because, like your race, children do not result from every sexual union.\"\n\n\"Then where do the children come from?\"\n\nMarcus was suddenly more quiet. His face seemed almost angry.\n\n\"Marcus, the children? How do they come about?\"\n\n\"That is private,\" said Marcus coldly. \"It is a matter for us alone, and is none of your affair.\"\n\n\"Oh, alright... it just seems like, people and creatures willing to have sex all over the place would...\"\n\n\"It is quite a different matter,\" said Marcus. \"And I will thank you not to bring up the subject again.\"\n\nThey returned to the main part of the ship in silence - Angelo still perplexed at the odd ways he kept offending these beings who seemed defined by sex and wore no clothes. No kissing after sex. No asking where children came from. Who knew what other boundaries he would overstep unwittingly?\n\nMarcus seemed to recover from his anger, however, and showed Angelo around the rest of the ship in a relatively amiable fashion (amiable for an Aquilan, at least).\n\n\"There is the quiet sex lounge, and the rambunctious sex room, the group sex lounge for celebrations and the... what is so funny?\"\n\n\"It's just, we've passed at least six couples 'coupling' in the corridors,\" chuckled Angelo. \"It seems odd that you need rooms set aside for it.\"\n\n\"I suppose,\" said Marcus, allowing a half smile. \"But for ones such as ourselves, it is necessary.\"\n\nAngelo was propositioned several times along the way, and though he was sporting a massive erection, he resisted - even though Marcus would have had no problems with any side trips the new liaison wished to take.\n\nThey rounded the corner to a more casual area where there were a few couples paired off, but it was the exotic Leneria who caught his eye - it was the first time he'd seen her since the greeting party.\n\n\"Leneria!\" he called out, \"It's good to see you again.\"\n\n\"Ah, Commander Angelo Telegin, I see you are faring well. I trust Marcus has been giving you a good tour of the ship.\"\n\n\"He has indeed. We saw the Aquilans, they were beautiful.\"\n\n\"Yes, our relatives are quite remarkable,\" agreed Leneria.\n\nAngelo couldn't take his eyes off of her. While he was surrounded by beautiful naked bodies, it was her face that his eyes were drawn to the most. Her Earth-Asian facial features, her light brown skin, her blond hair, and the haunting look in her deep blue eyes - they were truly captivating. Of course, his gaze inevitably drifted south, and he was just as enamored with her trim but ripe body which seemed to call out to him.\n\nHe considered the frank nature of the Aquilans and decided to dive in head first.\n\n\"Listen, Leneria, I was wondering if we could get together, you know, sexually.\"\n\nHer face grew cloudy and she looked down.\n\n\"I don't think so. Not at this time,\" she replied.\n\n\"I'm sorry if I've offended you,\" he said. \"I meant no disrespect by propositioning you so directly.\"\n\n\"It is no disrespect to make such a request of an Aquilan,\" said Marcus. \"However, I find it odd that one of our women would refuse a liaison. Leneria, can you explain yourself?\"\n\n\"I'm simply not in the mood,\" said Leneria. \"That answer should suffice. It is a phrase I learned from Neirna - so I would think you would respect that, Marcus.\"\n\n\"Of course,\" said Marcus in a patient tone, \"it is perfectly satisfactory.\"\n\n\"I am in the mood,\" said a lilting voice belonging to the willowy Lietseleh, \"would you care to begin your learning, Commander Angelo Telegin. I am prepared to educate your tongue.\"\n\n\"I would be delighted,\" said Angelo, sparing a backward glance toward Leneria as he was led off to more comfortable quarters.\n\n\"I am still curious about your refusal,\" said Marcus to Leneria. \"Now that the liaison is gone, would you mind elaborating?\"\n\nLeneria gathered her thoughts.\n\n\"It is their emotions,\" she said quietly. \"They continue to show rude tendencies of attachment and improper emotions.\"\n\n\"I understand,\" said Marcus. \"Many people have commented about Neirna's primary preference toward me as a sexual partner in her last few weeks. Her emotional outbursts in the final days are still puzzling to me.\"\n\n\"Exactly,\" said Leneria. \"I am very busy in studying to be the ship physician. I want sex and I want my job, I have no time to indulge an emotional alien right now.\"\n\n\"Understood,\" said Marcus, \"though I might remind you, the purpose of the liaisons is to teach us how to be less alien. We are, after all, no longer Aquilan, but Aquilis Humanis. Such human emotions might someday be visited upon us.\"\n\nLeneria turned away from Marcus, not wanting him to see her expression.\n\n\"I would hope it would never come to such a thing,\" she muttered quietly.\n\nShe gave silent thanks that Marcus had not asked - why then, if she had objections to the liaisons, had she volunteered to be a member of the greeting party.\n\n***\n\n33, that was the number of women he had slept with in his first two weeks on board.\n\nHe had thought about counting the actual number of ejaculations, but had given up. The pheromone-charged air was analogous to an IV drip of old-school Viagra, and many of his fuck-sessions had involved several eruptions - his cock recovering more quickly by the day.\n\nAs a result, he was keeping track of one other number - how many ejaculations in one session. The number - eight during his second partnering with Lietseleh: Once in her mouth; twice in her pussy (within the space of five minutes); again in her mouth while they were engaged in a fierce sixty-nine; once deep into her ass; once while she washed him slowly and sensuously; again into her pussy while he took her from behind, and one final time which started with her licking the cum off of his cock and then sucking him to hardness for one final bout.\n\nIf there was one thing he was missing - it was a sleeping partner. He'd had 32 sex partners (several of them more than once), but the Aquilans showed no inclination toward sticking around after sex. Without fail, sex would finish and the woman would stand up and leave - ready to pick up with her shipboard duties without missing a beat. He had asked a couple of women to stay the night - but they had simply taken it as an invitation for further coupling.\n\nAngelo thought about it and realized that this could probably be attributed directly to the plasma-based origins. For that form, sleep was a dormant time. The Aquilans around him always slept alone in darkened, private sleep quarters.\n\nNow he was with number 33 - Menaea. She had crimson skin and a startlingly voluptuous body that seemed built for pleasure. In fact, she was built for pleasure. The majority of her genetic code had been pulled from sequences designed during the gene wars of the late 22nd century. Her 'ancestors' had been designed to be the ultimate courtesans and her specific model had been patterned after a character named Dejah Thoris from an ancient science fiction series. She was three quarters 'Dejah' and one quarter Geisha - both portions designed by genetic engineers given free rein to craft the ultimate fantasy woman built for sex and pleasure.\n\nThere were many such evocative combinations aboard the ship. It was clear the Aquilans had done quite a bit of experimenting with the genetic materials they had absconded with those many years before.\n\nHe certainly had no complaints regarding their tinkering. It was a true rainbow aboard ship, and each Aquilan - man or woman - was a startling yet unique study in physical beauty.\n\nHe was currently enraptured watching Menaea's head bob up and down his lighter shaft and the wonderful contrast between her skin and his own. It added to the erotic element.\n\n\"Commander Telegin.\"\n\nShe was so talented. Menaea's hands corkscrewed around his cock, her tongue licked tortuously at the top of every stroke.\n\n\"Commander Telegin?\"\n\nAngelo could feel the beginnings of an orgasm. He debated... prolong things, or simply surrender. The (literally) sex-charged atmosphere of the ship had certainly changed his attitude regarding when to climax. He voted for waiting, but then Menaea pulled her mouth off and slid his cock between her red breasts. Just the visual of his pale cock nestled between her red orbs was all it took to change his mind. A mere four or five strokes was all it took for him to let loose and send the first ivory blast across her crimson mounds.\n\n\"Oh gods,\" he moaned.\n\n\"Commander Telegin!\"\n\n\"What?\" he cried, and looked up from his bliss to see Leneria waiting to the side.\n\n\"Oh goddds... hello Leneria.\"\n\n\"By all means finish,\" she said calmly.\n\nAngelo finished and Menaea stood up, wiping the creamy liquid into her skin.\n\n\"We can finish another time, Commander,\" she said, and without another word she departed.\n\n\"Commander,\" said Leneria, \"it has been two weeks since you came aboard and it is customary for the liaisons to undergo a physical examination.\"\n\n\"Oh, I've been examined,\" said Angelo.\n\nLeneria turned to him in surprise.\n\n\"But I'm the primary medical expert on the ship, who else would have done an examination?\"\n\n\"Inspected, probed a couple of times, I'd say a great many women are intimately familiar with great portions of my body.\"\n\n\"I see,\" said Leneria, \"it's a double entendre.\"\n\nShe turned back and continued leading Angelo to the medical suite.\n\n\"If you weren't aware, double entendre has little relevance in our culture. I suppose it was an attempt at humor, but it fell on deaf ears.\"\n\n\"Point taken,\" said Angelo.\n\nThey arrived at the medical suite and Angelo was impressed to see they had the most modern of modern medical technology.\n\nOnce inside, Leneria was all business.\n\n\"Lie down please,\" she said, gesturing him to an examining couch.\n\n\"You bet, doctor,\" he said with a smile.\n\n\"I am not a doctor yet,\" she said. \"I am preparing to sit the examination for my medical certificate in approximately six months' time.\"\n\n\"Okay.\"\n\n\"Now, let me check these readings.\"\n\nShe examined the holographic projection of countless statistics that the med scanner had gathered from Angelo as soon as he sat down. She tapped out a few notes.\n\n\"Well?\" he asked.\n\n\"All systems seem to be optimal. If I would have any concerns it would be your hormone levels. It seems you are responding particularly well to our air mixture. All varieties of leutinizing and follicle stimulating hormone are in the top end of acceptable levels. I'm guessing you are having no problems maintaining erections, nor in producing seminal fluid?\"\n\n\"True to both of those statements,\" agreed Angelo.",
        "\"Have you experienced any undue aggressive behavior?\"\n\n\"No... but frankly I haven't had much chance to enter that arena. Most of that aggression is pretty much being channeled into sexual pursuits.\n\n\"I see,\" said Leneria. \"Well, the androgens our atmosphere cause the male body to produce are primarily based toward sexual activity - your circulatory system shows no signs adverse side effects. You also exhibit only a slight increase in muscle tone, but no excessive bulking as one would see with artificial hormones and steroids. I am putting in a note about the elevated levels, however, and would like to examine you again in a week.\"\n\nAngelo was having problems focusing on what she was saying. Lying there, looking up at her beautiful body and face, he was mesmerized. He tried telling himself it was simply sexual attraction, resulting from the very same hormonal levels she had been describing - but this was a different feeling. Her face was captivating, her words were magical - the tone in her voice made the hair on the back of his neck stand up and feel the good kind of drowsy.\n\nAlmost unconsciously, he reached out and took her hand in his. Surprisingly, she unconsciously returned the gesture and held his hand in hers for several moments as she continued examining the readouts. Eventually, she realized what she had been doing and dropped the hand - blushing slightly.\n\n\"Leneria, I...\"\n\n\"I do not wish to copulate with you,\" she said coldly, turning away.\n\n\"Neither do I,\" said Angelo.\n\nHe sat up so he could be more on her level.\n\n\"Then what do you want?\" asked Leneria, turning back to him.\n\n\"This,\" he said tenderly.\n\nTaking her face in his hands, he bent down to kiss her oh-so-gently. She returned it, and just as he'd felt when she had been there in the greeting party - he was incredibly dizzy, and he had no doubt she felt the same.\n\n\"Why did you do that?\" inquired Leneria. \"I made it clear I do not desire sexual congress with you. You also stated you didn't want that. Why would you kiss me, then?\"\n\n\"Because that's not what kissing is always about.\"\n\n\"Of course it is,\" she insisted. \"Kissing stimulates countless nerves in the lips and erogenous zones, particularly when the two people kissing have their bodies touching. What other reason would there be to kiss? I have heard reports from other women aboard who have told of you kissing them after the fact. Other fleet liaisons exhibited similar behavior until we trained them otherwise. Why do you do such things?\"\n\n\"Because... sometimes,\" stammered Angelo, \"sometimes... kissing doesn't have to lead to sex. Sometimes it is an expression of emotion, of love, of like, of whatever.\"\n\n\"I see,\" said Leneria, quite coldly. \"Is that what that kiss was? An expression of love?\"\n\n\"Maybe it was... but sometimes a kiss can be a question?\"\n\n\"A question?\" asked Leneria, incredulous.\n\n\"Yes, you see, with love it is often a question. A question that can't be answered with words.\"\n\n\"Nonsense. A question is formed with words,\" insisted Leneria. \"In response, the answer also comes in words.\"\n\n\"But not always the true answers. Not when it comes to love. You see, I can ask you if you love me and you will say...\"\n\n\"No, of course. What a ridiculous notion. Aquilans do not love. Not in the fashion you understand.\"\n\n\"And you are an Aquilan?\"\n\n\"Yes.\"\n\n\"There, you just lied. You are not an Aquilan. You are a human. Yes, yes, yes - your consciousness began as an Aquilan but you have been living as a human, in the same body for several years now.\"\n\n\"What does that matter?\"\n\n\"It matters because I'm trying to teach you how to be human.\"\n\n\"I have no desire to be human if it involves such disgusting, taboo subjects as love and emotions.\"\n\n\"Taboo!?! What the hell is it with you people? I can do anything with anyone... and I've done a hell of a lot... but when it comes to babies or love, you get offended?\"\n\n\"Of course we do!\" shouted Leneria.\n\n\"Look, you're angry!\" shouted Angelo right back. \"Good for you! That's an emotion!\"\n\n\"I AM NOT!\" screamed Leneria.\n\nShe caught herself.\n\n\"I am not,\" she said, more calmly.\n\n\"Yes, you are,\" insisted Angelo. \"But, to get back to my original point. I could ask you if you loved me, and you might speak the words 'yes' or 'no', but the answer you gave me in a kiss could be quite different.\"\n\n\"That's ridiculous,\" she muttered.\n\n\"Is it? Let's just see about that.\"\n\nHe pulled her into another kiss. She fought him at first, then surrendered to his embrace, her body softening against his. After well over a minute, she pulled back - gasping. However, her face hardened again and she turned from him.\n\n\"I need you to leave now, Commander Telegin.\"\n\n\"Sure, I'll leave - but now I definitely know the answer.\"\n\n\"Leave!\"\n\n\"I'm going,\" said Angelo, \"but who can I talk to about this emotional stuff?\"\n\n\"No one! Now go!\"\n\n***\n\n\"Movie Night,\" cried out Menaea with the closest thing to excitement Angelo had seen since coming aboard.\n\n\"Movies, awesome!\" cried Angelo. \"Hey Menaea, do you want to be my date?\"\n\n\"Your date?\" she asked, perplexed. \"What is a date?\"\n\n\"A date is a custom back on earth where someone asks someone they are attracted to accompany them to an event like a dance, or a dinner, or a movie.\"\n\n\"Why don't they just go by themselves?\"\n\n\"It's part of a courting ritual,\" explained Angelo.\n\n\"Courting? As in legal matters?\"\n\nAngelo rolled his eyes.\n\n\"No, a mating ritual.\"\n\n\"Like foreplay?\" asked the buxom scarlet-skinned woman.\n\n\"Sure, like foreplay,\" said Angelo with a shrug of his shoulders.\n\n\"Very well - but the movies are already a form of foreplay in a way. Someone came up with the idea that we all sit next to each other and not touch each other, no matter how tempted we are, for the entire length of the movie. I will confess that some of us often slip. What is involved in and earth date?\"\n\n\"Pretty much the same thing, I guess -- especially in the earlier years,\" said Angelo with a laugh. \"You just choose someone specific to go with and sit next to. So, I choose you.\"\n\n\"Good,\" said Menaea, \"if the evening goes well, it will give us the chance to complete what we started yesterday before Leneria interrupted.\"\n\nThe room was soon set up with chairs, enough for looked to be the entire crew compliment. Angelo and Menaea found seats and waited patiently.\n\n\"What do you think they'll show?\" asked Angelo.\n\n\"It's hard telling,\" said Menaea, \"but it is always something good.\"\n\n\"Hey Marcus,\" said Angelo to the strapping young man who was walking in with a tiny young woman wrapped around his waist, suspended on his great cock.\n\n\"Angelo!\" called Marcus, lifting off the young woman and setting her down with no apology. \"I've been meaning to speak to you.\"\n\n\"Fire away,\" said Angelo, patting the seat next to him.\n\nMarcus sat down and greeted Angelo with a proper handshake.\n\n\"I studied Leneria's report of your examination. The part that fascinated me the most was what you said about kissing. You said a kiss is a question. I don't understand. How can one ask a question with no words?\"\n\n\"Hmm, there's a lot of unspoken questions - at least in ordinary society. I'm sure you have a shoulder shrug, I've seen it. 'What's for dinner?' I ask you. You don't know, but instead of saying 'I don't know' you just...\"\n\nTo illustrate, Angelo shrugged his shoulders, holding his hands up.\n\n\"We do do that, don't we?\" exclaimed Marcus. \"I don't know if we always did, or if it's something we learned from the liaisons. How fascinating. So, if a kiss is a question - is it merely asking \"do you want to have sex?\"\n\n\"No,\" explained Angelo. \"It's a question of 'do you like me?' or... well, of other things that seem to be pretty off-limits around here.\"\n\n\"Amazing,\" mused Marcus. \"Neirna, your predecessor - she showed a great affinity toward me. I was her primary sexual companion for the last few weeks of her stay with us. She kissed me a great deal: Before sex; after sex; sometimes she would simply kiss me as we passed in the hallway for no apparent reason at all. Do you think she was asking me questions?\"\n\n\"I'm sure of it,\" said Angelo quietly.\n\n\"I fear my answers were not to her satisfaction,\" mused Marcus.\n\n\"I'm sure of that too,\" said Angelo.\n\nJust then, the lights dimmed and the couples yet to be seated proceeded to their seats.\n\nAngelo looked about at the gathered crowd. Going to the movies was one of the fascinating traditions that had survived over the centuries. Time and again, it had been predicted that people would cease attending videos en masse, but the group gathering always made a resurgence. Like many people, he wasn't even sure why they were called movies - but he loved them all the same. He was looking very forward to what they were going to show.\n\nHis jaw dropped, however, when the screen lit up and the first words to show was a disclaimer that all performers in the video were of legal age and had given consent to be in explicit scenes.\n\nCheesy music began, and Angelo groaned as the screen showed the title \"Assteroid Whores - The Sequel - starring Andromeda Mist\"\n\n\"I admire Andromeda,\" whispered Menaea, \"she's so flexible.\"\n\nAngelo tried watching for a little while but then excused himself, though Menaea seemed too entranced to even notice his departure.\n\nHe was soon wandering the mostly empty corridors of the ship, an odd experience in two ways. One, the ship was always bustling with life. Two, that bustling life was always 'bustling' in many other ways - quite often sexual.\n\nAngelo found it refreshing. It gave him a chance to truly appreciate the elegant engineering of the Aquilans. They had borrowed from every style going from ancient art deco to aqueous modern, forging the Alshain into a ship with sleek and sensuous lines throughout.\n\nHe found himself passing the med center and was surprised to see Leneria working inside. He stepped in and she looked up with a mixture of annoyance and feigned patience.\n\n\"Greetings, Commander Telegin. I would have thought you would be at the movies.\"\n\n\"I tried, but since I'm pretty much surrounded by the real thing - it wasn't all that entertaining.\"\n\n\"What do you mean the real thing?\" inquired Leneria.\n\n\"I mean, if I wanted to see a bunch of people having sex, I would have just gone to the nearest 'lounge'.\"\n\n\"But it isn't the same at all,\" argued Leneria, \"the people in the movies are professionals. The camera, the lighting - it changes the experience entirely.\"\n\n\"Okay, whatever you say. But do you ever watch real movies?\"\n\n\"By real, I suppose you mean the pornographic variety where people expose themselves,\" said Leneria with an air of disgust.\n\n\"Expose themselves?\" asked Angelo, perplexed. \"How exactly do they expose themselves?\"\n\n\"Emotionally. They are naked, exposed to their very core. It is shameful.\"\n\n\"That's your definition of exposed?\"\n\nAngelo was finally starting to make a tiny bit of sense of the Aquilans.\n\n\"Commander, you no doubt have some understanding of our race. We find our bodies to be joyful things which bring us great pleasure. It is in our very core to do so. However, it continues to perplex us that humans are so frank and open with their emotions.\"\n\n\"Why?\" asked Angelo, desperately. \"Why are you so guarded with your emotions?\"\n\n\"Again, I will warn you that is private. It is the most private thing you could ask.\"\n\nAngelo persisted.\n\n\"But that's the point, isn't it? That's what I'm supposed to find out. The inhabitants of the Alshain are supposed to come to an understanding about humanity and vice-versa.\"\n\n\"To an extent,\" replied Leneria through a tight-lipped scowl. \"But there are boundaries.\"\n\n\"Fine!\" said Angelo.\n\n\"Fine!\" said Leneria in a tone she did not wish to take.\n\nAngelo stormed back to his cabin.\n\nIt had been a little over two weeks. He had yet to examine the vidlogs of his predecessors. He was tempted to start with Neirna, but decided to go all the way back to the beginning.\n\nThe very first liaison had been one Captain Macy Quextil, a blue-skinned woman no-doubt descended from the Xfelsians. She was a striking, powerful looking woman. The camera turned on her and she had tousled hair and was holding a towel to her chest. She was giggling.\n\n\"Well now,\" she said with a smile. \"The instructions were very specific regarding these records. They are only for the liaisons and we are to be as frank as we wish.\"\n\nInadvertently, she let the towel fall.\n\n\"Oops,\" she said with a sigh. \"Well, if you're watching this, seeing a bit of my skin won't mean all that much, will it? In a word, this ship - is - heaven. I have had more men here in a few weeks than in all my years combined, even on my spring break to the pleasure planets. They are wonderful lovers, too - each of them.\n\n\"I know they've spiked the air, but I really don't care. As for their emotions - well, I don't know what to say about that. I think it's just that they've never had someone to show them. I have my eyes on Paulus, who I suspect may be particularly ready to tip over into emotions once he has the chance. But for now, I'm just having a hell of a good time - I hope you do, too.\"\n\nThe next entry was marked three weeks later. Macy had a colder look in her eyes - an exhausted, forlorn expression.\n\n\"I don't know what to do,\" she said in a tired tone. \"I keep thinking I see a glimmer, but then it goes away. There's some barrier between them and emotions. I try talking to them about love and caring - and it's like I said I was into incest to a religious zealot. They just shut down and turn away. These men are so beautiful, they're all so beautiful, but without anything underneath they might as well be statues.\"\n\nHer final entry was one of tears, and anger.\n\n\"I can't wait,\" she said, \"I can't wait to get back to the real world - to real men. I don't know what I'm going to do other than grab the first man I see - any man, and take him to bed. I want to make love, I don't want to fuck. I've been fucking my brains out for three months now and I've never felt so empty. Just a smile, just a laugh while a man is inside me - that's all I want now.\"\n\nAngelo started skipping through ten vidlogs and he was struck by the nearly identical pattern in each of them. Week two, euphoria. Week four - frustration. Week eight - anger. Week ten - depression. Final week, defeated resignation.\n\nHere he was, week two, but the euphoria had already begun to flag. There were several women who lingered in his mind; Menaea, with her lush body and beautiful skin; A'nish with her dark beauty; and above all Leneria - with whom he had never shared the slightest true physical intimacy.\n\nHe pondered his situation for a while and then emerged from the liaison cabin on a mission.\n\nHe first went to the medical quarters, but Leneria wasn't there. Next, he began a search of the ship. She was nowhere to be found, yet he kept searching - turning down propositions right and left.\n\nAt last, he was able to find someone who had seen Leneria in the Center. Donning goggles, it was there that he found her. She was looking up in to the gaseous expanse, her hands and body pressed against the glass as though communing with the inhabitants.\n\n\"Can you speak with them?\" he asked softly.\n\n\"Oh, hello Commander Angelo,\" she said. \"No, we cannot communicate with them, per se. We can detect their concerns and sense a general tone - but it is only through a special interface in a separate room that we can have a coherent conversation.\"\n\n\"I see,\" said Angelo, though it wasn't quite clear.\n\n\"I can tell some of their thoughts, however, by inference. Do you see that female there?\"\n\nShe pointed to large tubule to their left.\n\n\"Yes.\"\n\n\"She is our most proficient engineer,\" said Leneria. \"She was a lead engineer for the Alshain and is near completion of designs for the Alshain II, a ship which will make this one seem primitive by comparison. Ah, here comes a male to help her complete her designs?\"\n\nThey watched as a non-hollow cylinder drifted toward the female in question and began to slide into her opening.\n\nSubconsciously, Angelo now found himself behind Leneria. His skin was just brushing hers, his painfully rigid member was nestled prominently against her shapely ass.\n\n\"Is he an engineer, too?\" asked Angelo.\n\nLeneria turned to look at him, pushing instinctively back against his firmness.\n\n\"The male,\" continued Angelo (though he was having difficulty concentrating), \"is he also an engineer? So he can help?\"\n\n\"No,\" said Leneria softly.\n\nIt seemed she was also having difficulty concentrating.\n\n\"The uh... the way we... the way they work,\" she said in a near whisper - her hand reached behind her to gently stroke Angelo. That contact seemed to provide some sort of anchor to help her concentrate again. \"The way Aquilans think is through the energy provided by sexual contact. They think all of the time, of course, but for difficult tasks such as what she is doing - she needs that added energy.\"\n\n\"Like computers?\" suggested Angelo. \"A computer needs extra power for the extra cycles.\"\n\n\"In a way.\"\n\nLeneria sighed as Angelo's shaft found its way into her. Entering her from behind, she simply braced herself against the glass and the two of them kept watching the union in the tank - as they formed a union of their own.\n\n\"Too bad humans don't work that way,\" said Angelo. \"If we could think and fuck, I'd have won the Galactic Nobel in the last couple of weeks.\"\n\n\"We have noticed that about this form,\" said Leneria with a gasp and a thrust backward against his cock. \"We find it a bit frustrating that our cognitive reasoning is impaired by sexual congress. However, we have endeavored to overcome this shortcoming in our own unions.\"\n\n\"Yes,\" grunted Angelo with thrust. \"I was amazed at the way Bellen was able to review some schematics while she was giving me oral pleasure.\"\n\n\"Indeed,\" agreed Leneria. \"She has always been gifted in splitting her focus. Oh look, the engineer is doubtless making progress on her designs.\"\n\nThe pair they were watching was now in full union. The male was sliding through to one end of the female, fully emerging, then diving back through her inner cavity. With each slide a lightning-storm of electrical and chemical activity lit up the Center and the female was glowing brighter.\n\nHalf-consciously, Angelo began timing his thrusts to match those of the male. He was even removing himself and plunging back into Leneria. The aura infusing the Center was palpable and it was clear (if what Leneria said was true) that the female had climaxed and doubtless reached some sort of clear breakthrough in her ship designs.\n\n\"Oh Commander,\" cried Leneria. \"I desire you, so.\"\n\nShe pulled off of him and turned to face him. She leapt into his arms and wrapped herself around him. He lifted her onto a nearby railing against a wall and began pumping with even more energy.\n\nHis body was reveling in the feeling. As had happened with their very first kiss, there was that indescribable 'more' between the two of them. Each place their bodies touched, each plunge into her moist pussy, his body practically sang in celebration. What was more, she seemed to be returning the feeling - to be experiencing it herself. More than any other Aquilan woman, she was moaning and panting at their union. Others had made some noises - but ones akin to what someone might make at a difficult sporting match in the heat of a difficult tennis volley or the like. Leneria was moaning from pleasure and he thought he detected the slightest hint of a smile on her face.\n\n\"Fill me up, Commander Angelo,\" she panted, \"fill me up with your beautiful cock and your delicious semen. I've been desiring it for so long. Oh. Ohhhh!\"",
        "His long and powerful thrusts had at last achieved their goal. Her body began to shake as the climax arrived and she clawed at him desperate, raking her fingernails across his back.\n\n\"Oh, so beautiful, so beautiful this feels,\" she moaned. \"Never have I... felt... oh!\"\n\nShe was wracked by an even larger orgasm and now all she could do was arch her back and cry out silently, her mouth open but no sounds capable of coming out.\n\nOnce it had passed she begged him to do the same.\n\n\"Now you, Commander. Now you, let me feel your pleasure.\"\n\nAngelo soon did as she asked - his body responding to her overwhelming pleasure. He didn't know how, but he was able to remain standing as volumes of cum emptied into her moist and ready interior.\n\n\"That's it, commander,\" she murmured. \"Fill me up. How I love the feeling of you.\"\n\nAs his last load was finishing, he lowered his lips to hers and they began to kiss fervently. They continued doing so, even as his cock temporarily lost its stiffness and slipped out of her, sending a gush down her thighs.\n\n\"I love kissing you,\" he whispered. \"Your lips are electric, magical.\"\n\n\"I love kissing you, too...\" she began - and then she stopped herself short.\n\n\"What are you doing?\" she said.\n\n\"Kissing you,\" he said, confused.\n\n\"Stop,\" she demanded. \"We are done with coitus. There is no need for such things - they serve no purpose - these extra kisses.\"\n\n\"But they feel good,\" protested Angelo, trying to kiss her again.\n\n\"No. They don't,\" she argued and she pushed herself away from his embrace. \"We are done. I knew this was a mistake. I knew you would try to insinuate yourself further with improper emotions.\"\n\n\"But...\"\n\n\"Goodbye, Commander.\"\n\nShe left. Just like that.\n\nAngelo turned to the tank where the tube-like female Aquilan was floating close by, her own post-sex glow beginning to diminish.\n\n\"I don't suppose you'd like to explain,\" he said in a wry tone.\n\nThe glowing creature had nothing to offer.\n\n***\n\nThe next two days were ones of frustration for Angelo. As before, Leneria was now avoiding any sort of contact with him. While he did couple with two other women, it felt empty and more boring - satisfying a mere yearning from his heightened sexual state, not anything like the near-spiritual union he had experienced with Leneria.\n\nHe finally found her one day, passing her in the corridor.\n\n\"Leneria,\" he said, taking her wrist.\n\n\"Commander Telegin,\" she said, \"I take it from your physical contact that you desire to copulate. I do not wish to do so with you at this time, but thank you.\"\n\nShe tried to pull away, but he insisted, pulling her to the side.\n\n\"Leneria,\" he said in a whisper. \"I don't wish to copulate, either.\"\n\n\"You don't?\" she asked, curiously.\n\n\"No, well, I would, but I wish to speak to you,\" he said. \"I want to talk about our time together. When we made love.\"\n\n\"Such a vulgar expression you have,\" complained Leneria. \"Adding emotional overtones to such a marvelous physical act. I do recall having sex with you. What do you wish to discuss about our coupling?\"\n\n\"The feeling,\" he said. \"How wonderful it felt. That's what I'd like to discuss. It was amazing.\"\n\n\"Yes,\" she agreed. \"There was a great deal of physical pleasure in the act. I thank you for that. Now, I have duties to attend to.\"\n\n\"No,\" insisted Angelo. \"It was more than that. It felt good here.\"\n\nHe tapped his heart to illustrate.\n\n\"It felt good here, and I think it felt good to you, too. You know, emotionally.\"\n\nHer eyes clouded over with darkness and she looked down.\n\n\"No, it didn't,\" she argued. \"And how dare you make such accusations toward me. I am not some common human, Commander Telegin. Aquilans do not tangle up our physical pleasures with improper emotions.\"\n\n\"Why not?\" cried Angelo. \"Why the hell not?!\"\n\n\"It is not done,\" said Leneria.\n\nJust then, a very tall bronze-skinned Aquilan male rounded the corner and she pulled away and dashed to him.\n\n\"Ganling, I have an intense need for sex right now,\" she said, taking him by the hand.\n\n\"Very well, Leneria. I will gladly assist,\" he said calmly.\n\nShe sat him down in a nearby chair and was kneeling before him within seconds. Angelo could only watch in stunned silence as she brought Ganling to firmness and then mounted him.\n\n\"That's it, Ganling,\" she said, though her gaze was aimed directly at Angelo. \"Plain and pure sex, that is all I need or desire.\"\n\nAngelo turned in humiliation, not wishing her to see the shocked tears forming in his eyes.\n\nOnce he was around a corner, he stopped and gathered himself.\n\n\"Fuck it,\" he said to himself through gritted teeth. \"If I'm going to be here, and if it is really like the others said - I might as well get the most out of it.\"\n\n***\n\n107. That was the count. One hundred and seven separate bodies out of the 160-plus women aboard. Five weeks in, and he was damned sure he was going to bed them all.\n\nHe would have been even further along, if it weren't for the lovely Menaea who kept beckoning his body with her crimson skin and supple body.\n\nIt was clear her seductive pleasure-based charms had their sway over Angelo. It was rare that a day went by when he didn't partner up with her at least once - and she seemed quite amenable to his attentions.\n\nIf she were a true human, she might have detected an odd emotional removal in his manner - but in her eyes, he was simply becoming more Aquilan with each union.\n\nAngelo also wasn't wanting for partners. Not that there were many unwilling participants in the oversexed atmosphere of the ship, but if practice makes perfect, Angelo was practicing a great amount and his sexual reputation began to precede him.\n\nHis reserves were apparently unlimited. He was almost always erect and his time from ejaculation to firmness was generally less than a minute. Even sleep seemed less necessary. He found himself frequently waking up from stiff yearning - seeking out partners after scarcely an hour of sleep.\n\nIt was one such occasion that spurred him onto his greatest heights (or lows, as it might have seemed in hindsight). He awoke with his hand stroking a painful erection - dreamlike images of Leneria still lingering in his mind.\n\nHe sent a quick message seeking out Menaea and then started for the group sex lounge, hoping to find it full. All he found, however, were two women lingering outside and waiting for more to gather. A'nish and Ophalis greeted him courteously.\n\nA'nish, of course, he knew from many occasions. Ophalis, however, he had yet to have sex with.\n\n\"I am pleased to see you here,\" said the lithe brunette. \"I have heard from many that you are quite expert in sexual endeavors and have learned a great deal since you came aboard.\"\n\n\"Yes, I certainly came aboard,\" muttered Angelo.\n\n\"What was that?\"\n\n\"Oh nothing,\" he replied. \"Ah, you're here,\" he said to Menaea who had just arrived. \"Now we can get this party started.\"\n\n\"Shouldn't we wait for others?\" asked Ophalis.\n\n\"I think I can take more than good care of you,\" said Angelo. \"If anyone else comes along, they can just dive in when they get here.\"\n\nWithin minutes of entering the lounge, Angelo was enjoying the pleasures of number 108, Ophalis, who was riding him reverse cowgirl, while he also lapped hungrily away at A'nish who sat astride his face while she stimulating Menaea.\n\nGiven the very polarized sexual origins of the Aquilans, there was little true homosexuality aboard the ship - but they had no problem with stimulating others of the same sex when awaiting a new partner.\n\nThe yearning Angelo had felt since he awakened that day soon reached the boiling point. A'nish sensed it and crawled off of him as he gasped out in pleasure. He reached around Ophalis, grabbed her tiny breasts and caressed them as he exploded inside of her. She arched her back in pleasure and leaned back into him as he continued pounding, even as he squirted. Soon, she was gasping with her own orgasm - Angelo never breaking his pace.\n\n\"You are good,\" she complimented him. \"I look forward to coupling with you again.\"\n\n\"That might be sooner than you think,\" he said in a determined tone.\n\nThere was something different inside of him. He had experienced the joy of climax and the spray of ejaculation, but no release. He felt the same hunger inside that he'd felt when he awoke and his cock was, if anything, even more rigid.\n\n\"You are certainly ready,\" said A'nish. \"Do you wish for me to assist with that?\"\n\n\"Absolutely,\" said Angelo, \"but not with your mouth. I only want one thing right now.\"\n\nAngelo lifted A'nish up on a nearby couch, perfectly designed and padded for the activity at hand. He pushed up her legs to her chest and spread them wide, placing his cock at her moistened opening.\n\n\"Are you ready,\" he asked.\n\n\"Absolutely, Commander Telegin, Oh!\"\n\nHe had buried himself entirely into her with one surprising thrust, causing her to gasp.\n\n\"You are quite deep, Commander,\" she said. \"It feels quite pleasurable in this... oh!\"\n\nHe had done it again. Had he been capable of coherent thought, the nearest emotion he could have found would have been 'rage'. He felt angry, somehow, and the only way to quench this torrid fire in his body was to fuck with absolute abandon. He began pounding at a slow, determined pace - each thrust a lunge of passion, stabbing deep into A'nish's cunt.\n\n\"Oh! My!\" she cried repeatedly.\n\nThe other two women simply watched in wonder as Angelo continued with the same force, but ever-so-slowly increased his pace. Though the Aquilans were mostly silent, A'nish was soon moaning as each thrust rocked her body - her melon-like breasts flowing in wavelike motion. After nearly twenty minutes, he was only up to a pace of perhaps one thrust per second - but he showed no mercy.\n\nA'nish was feeling the results of his onslaught, however, and her climax soon arrived.\n\n\"Ooh,\" she cried.\n\n\"Ooh,\" she moaned.\n\n\"Oooh!\" she cried out. \"Oh Commander, what are you doing to me?\"\n\nShe gasped out in ecstasy, her hands clenching and unclenching at open air, her eyelids closed in rapture.\n\nAnd still, Angelo didn't waver. For another several minutes he kept going, still not varying his pace. At the twenty-two minute mark, A'nish fell into another climax. At twenty-four, yet another, and that one didn't stop - she was crying out in ways she never had before, even with the best lovers aboard the ship.\n\nAt twenty-six minutes she begged him -\n\n\"Please, Commander. Please fill me up. Cum for me.\"\n\nHe did just that, his heart pounding insistently, he dumped another load into a willing partner - if there wasn't as much cum this time, the climax itself was more intense and he fell upon her, kissing her desperately as his hips contracted in pleasure.\n\nStill, there was no release. He was just as hard, just as hungry for more.\n\nHe stumbled to the refreshment bar in the room, gulping down almost two liters of water to replenish the fluids he had both surrendered to sweat and expelled from his cock.\n\nHe looked up to see that a crowd had gathered around the edges of the room. Some were engaged in light sex, but the majority - it seemed - were merely there to observe the sexual display - the word of which had spread like wildfire through the ship.\n\n\"My turn?\" asked the sensuous Menaea.\n\n\"Absolutely,\" agreed Angelo.\n\nIn terms of practice, he and Menaea had certainly perfected a great deal of their technique. With their frequent partnering, they had developed that unique shorthand of familiar lovers. They proceeded to put on an extraordinary sexual exhibition - transitioning from one position to the next with Angelo rarely needing to pull his cock from inside of her.\n\nFrom sitting to standing to lying down, Angelo and Menaea essentially worked their way through the ancient Kama Sutra before the gathering crowd.\n\nIn part owed to her genetic legacy, Menaea was multi-orgasmic and each position had the reward of hearing her squeal with joy.\n\nAngelo himself continued to be tireless.\n\nIt was while they were standing, her arms wrapped around his neck, his hands beneath her ass as he suspended her on his cock, that he had the first truly surprising eruption.\n\nShe was cumming, gasping in his arms, when he felt his loins tighten. Together, they climaxed even further, his white syrup pouring into her. Yet, that wasn't the end. Scarcely had the eruption finished when he felt another orgasm beginning. He wasn't sure how, but he was able to keep holding onto her as she bounced on his tireless cock - another rope of white heat shot into her already dripping pussy. The orgasm was so intense he had no choice but to drop down as his knees buckled - but still they stayed connected - cock-to-pussy.\n\nHe fell atop her, his hips still pounding and she cried out in a raspy voice as he pushed her over the edge once again.\n\nHe was on a mission, one he couldn't stop. Once she seemed satisfied, he stood and grabbed a water bottle someone offered him - guzzling the majority of it and spraying the remainder over his chest.\n\n\"All three of you,\" he rasped. \"On your hands and knees and get ready.\"\n\nHe placed himself behind Ophalis, admiring the view of her long body - the way her narrow hips curved into her long and beautiful back. He pushed himself into her and began.\n\nHe was done with the regulated pace he had taken with A'nish. There was an urgency now that he had to satisfy. One thrust, two thrusts, and then - attack. He started jackhammering his hips with rapidity that amazed even himself. Though his heart was pounding, he would not stop. Faster and faster he pounded until he heard the telltale cry from Ophalis.\n\n\"That's it! Cum! Cum for me! Cum around my cock!\"\n\nOphalis did just that, her legs tightening, her ass pushing back into him fiercely. He yelled out in ecstasy as he cut loose with his own orgasm - pounding away until she fell exhausted to the floor.\n\nTaking only the amount of time it took to switch, he proceeded to give A'nish the same treatment - leaving her gasping to dive into Menaea.\n\nFrom her, he returned to Ophalis and took her missionary style - using long strokes that sent her into oblivion even more rapidly.\n\n\"I can take no more Commander,\" she gasped. \"You have defeated me - but what a lovely defeat.\"\n\nHe moved on to A'nish, who led him to a special chair which levitated and even had handles which allowed him to push her to and from his body. She took longer, but was also forced to capitulate in the sexual battle he had undertaken.\n\nNow it was Menaea's turn once more. Choosing to give him at least some sort of rest, she pushed him to the ground and crouched over him, her feet upon the ground, her hands on her chest, - allowing her to bounce up and down upon his miraculous tool.\n\n\"Shall we?\" she whispered.\n\n\"Oh yeah,\" he answered.\n\nIt would prove to be the most legendary single session in the history of the ship. Menaea, descended from genes designed for pleasure - Angelo, driven by an unknown force that wouldn't let him stop. He actually came first, but he never paused and his added cum served to lubricate her even more. Next it was her, and she cried out as tremors shook her body. After the second set of orgasms, she had to drop down onto her knees - her thighs too weak from the tremors.\n\nThe blood was pounding in Angelo's ears. The world looked almost red from the lusty rage filling his body.\n\nHe took her fall to her knees as yet one more challenge and began thrusting from below, pulsing even more rapidly than he had with Ophalis.\n\n\"Oh Commander. Oh Angelo!\" she cried as he thrusted almost angrily to keep her orgasm continuing. \"I can take no more.\"\n\n\"Yes, you can,\" he groaned. \"I'm not done. I can't stop.\"\n\n\"But you must, look at your face,\" she whispered.\n\nShe put a tender hand to his cheek which was almost as red as her own skin from a feverish blush.\n\n\"I'm fine,\" he growled. \"I just need more. Ohh, here it comes again!\"\n\nHe exploded inside of her once more, and this time it felt as though his very insides were pouring out - or at least every drop of fluid was being sucked from within.\n\n\"Enough,\" she cried, leaping off of him, even as his cock continued to spray across his chest.\n\n\"No,\" he groaned. \"I can't. I can't stop.\"\n\nHis hips continued to buck, even without her on him, and spurt after spurt spilled across his chest.\n\nMarcus, who had been watching, rushed to Angelo's side and felt his forehead.\n\n\"He's burning up,\" he said in a worried tone. \"And his pulse is dangerously fast.\"\n\n\"I need another woman,\" cried Angelo. \"I can't stop. I can't ever stop.\n\nStill, the cum was pouring out.\n\n\"Get me water. Cold water,\" called Marcus. \"And find Leneria.\"\n\nA'nish rushed to a comm screen and sent out an urgent page for Leneria. Her face appeared.\n\n\"Leneria, you must come to the group lounge,\" she said.\n\n\"I've heard of the Commander's exploits. I've no need to see for myself,\" said Leneria in a terse tone.\n\n\"No, he's in some sort of overload. Get here now!\"\n\nMarcus and some others had formed a sort of miniature fire-brigade, bearing cups of frigid water to pour over Angelo's burning skin. Still, his hips were bucking involuntarily and even though there as little fluid left to expel, his cock still twitched with endless orgasms.\n\n\"It hurts,\" he moaned to Menaea, who held his hand in concern. \"It feels so good, but hurts as well - when will it stop?\"\n\nLeneria came dashing in, an emergency medikit on her wrist and ran a quick scan.\n\n\"My word,\" she muttered. \"He's quite near cardiac arrest.\"\n\nShe tapped a quick sequence on the medikit and a narrow needle snaked out, jabbing into Angelo's skin. His eyes grew heavy, though his hips continued twitching even as he lost consciousness.\n\n***\n\n\"You quite likely saved his life.\"\n\nAngelo was barely conscious and couldn't seem to open his eyes.\n\nHe heard Leneria's voice saying. \"His core temperature was so high his organs would have begun shutting down were it not for that water.\"\n\n\"I still don't understand,\" said the voice of Marcus. \"How did his hormonal levels get so elevated? You had noted unusual levels after the first fortnight. After that I can find no record of a reading.\"\n\n\"I... I didn't perform one,\" said Leneria's voice. \"He... I... the commander made me uncomfortable.\"\n\n\"Uncomfortable how?\" demanded another voice that Angelo believed to belong to Menaea.\n\n\"Emotionally. He made too many emotional statements and...\"\n\n\"That's no excuse,\" quipped Menaea. \"True humans do such things. You know that. All of us have experienced such behavior. We simply ignore it and move on.\"\n\n\"Yes, but the way he did this - it made me uncomfortable,\" argued Leneria. \"Emotionally. He made me emotionally uncomfortable.\"\n\nThe statement hung in the air for what seemed an eternity.\n\n\"I see,\" said Marcus. \"That is unusual - but protocol dictates you should have delegated your duties.\"\n\n\"I know,\" murmured Leneria. \"And for that, I am truly ashamed.\"\n\n\"Are you... are you crying?\" said Menaea.\n\n\"Yes, I am,\" sobbed Leneria. \"And I apologize. Please continue supervising his recovery. The computer has outlined the appropriate plans.\"\n\nAngelo heard the sound of footsteps running away.\n\n\"How remarkable,\" said Marcus.\n\n\"Yes, the poor girl,\" said Menaea.\n\n\"That's one way to view it,\" said Marcus softly.\n\nConsciousness once more slipped away from Angelo.\n\n***\n\nAngelo had been dreaming. He'd been on ship occupied by sex-crazed Aquilans with an aversion to emotions. He'd been with woman after woman - but there had been one... Leneria, who had captured his heart.\n\nIt had been some dream.\n\nHe opened his eyes.\n\nIt had not been a dream.\n\nLeneria was there, attending to various duties in the medical suite. She was just as naked and captivating as ever.",
        "\"Oh, hello Commander Telegin. It is good to see you awake again.\"\n\n\"How long was I out?\" asked Angelo.\n\n\"Three days,\" she said calmly. \"Two due to your collapse and one additional that the med unit recommended to help you recuperate.\"\n\n\"Wow,\" said Angelo. \"I was...I was different. It felt like I was another person then.\"\n\n\"In a way, you were,\" she said.\n\nShe crossed over to stand beside him.\n\n\"Commander, I owe you a most sincere apology. I was remiss in my duties. If I had been checking on you regularly, your hormonal levels wouldn't have gotten to where they were. I let...I let my feelings get in the way of proper judgment. Since Aquilans don't generally have to negotiate with feelings, it was a difficult situation.\"\n\n\"Apology accepted,\" said Angelo. \"And Leneria, I was avoiding you as well - so no harm, no foul.\"\n\n\"I'm not familiar with that expression - but there was harm. You quite nearly died.\"\n\n\"But I didn't, and I'm fine, right?\"\n\n\"Yes,\" she said. \"I have adjusted your levels with a skin patch which will regulate you more efficiently. Your libido won't be as heightened before your collapse, but you will still be quite able to function enthusiastically and often. Well, goodbye.\"\n\n\"Goodbye?\" said Angelo. \"Leneria, do you truly intend to become a doctor?\"\n\n\"Of course,\" said Leneria. \"I sit the exam next week.\"\n\n\"And do you intend on only treating Aquilans?\"\n\n\"Well, no,\" said Leneria. \"Of course, that is my primary goal - but I would hope I could eventually be of assistance to the broader population.\"\n\nAngelo pondered this.\n\n\"If you're going to treat 'true' humans, you will need to work on your bedside manner.\"\n\n\"I have read that term, and I still don't comprehend its meaning. I have been at the bedside for the past several minutes. I have minded my manners, including issuing what I believed was a formal and proper apology. I don't know what else I could do.\"\n\n\"Bedside manner,\" explained Angelo, \"is the ability to express empathy.\"\n\n\"But I don't,\" said Leneria, coldly. \"I don't feel, so I certainly wouldn't be able to exhibit that terrible human trait.\"\n\nAngelo found her marvelous features even more fascinating when they were lit up by a blush.\n\n\"I said 'express' empathy,\" he said. \"There are some physicians who are born with natural empathy, but others have to learn how to at least look like they understand how the patient is feeling. Sometimes it's as simple as echoing back the patient's thoughts. For example - ask how I am feeling.\"\n\n\"So, is this role playing?\" asked Leneria.\n\n\"Yes, and no,\" said Angelo with a smile. \"I am just coming out of a three day coma. So, ask me how I'm feeling.\"\n\n\"How are you feeling, Commander Telegin?\"\n\n\"I feel a bit weak,' said Angelo. \"Now, you echo that back in your own words.\"\n\n\"Very well,\" said Leneria. \"I am sorry that you feel weak? Is that a correct response?\"\n\n\"Perfect,\" said Angelo. \"I'm also hungry. Am I allowed to eat?\"\n\n\"Why yes, of course,\" said Leneria. \"I... understand why you would be hungry, it has been a while since you've eaten. Can I offer you something?\"\n\n\"Very good,\" said Angelo. \"And yes, I would love something to eat. You choose.\"\n\nLeneria went to the food unit and dialed up Angelo's past order history. She selected something nutritious that would also help him continue to recover. Returning, she punched in the commands to bring his bed to a sitting position. She watched him eat in silent fascination, continually playing the role of observer. Angelo was so used to the Aquilan's odd ways, he let the scrutiny pass.\n\n\"Is there anything else you need?\" she asked after she cleared the dishes.\n\nAngelo contemplated this request and wondered just how far he could push Leneria down the emotional path she was traversing. He figured there was really nothing to lose. He was roughly halfway through his time aboard the ship. It was time to either drift into sadness and anger like his predecessors - or try something new.\n\n\"Well,\" said Angelo. \"I have been missing the chance to sleep next to someone.\"\n\n\"I don't understand that statement,\" said Leneria. \"Sleep is a basic human need. What purpose could sleeping next to someone serve?\"\n\n\"Bedside manner,\" said Angelo. \"I'm the patient. I've expressed my feelings - it is up to you to determine how to react.\"\n\n\"Are you trying to tell me that a human doctor would sleep next to her patient if so requested?\" said Leneria in a dubious tone.\n\n\"No,\" said Angelo. \"But it's hard to predict what a human doctor would do if she'd been the one who had shirked her duties and allowed an alien visitor to go into sexual overload.\"\n\nLeneria contemplated this and finally blew out a sigh of frustration.\n\n\"If I did enter the bed with you, it would not lead to coitus?\"\n\n\"I didn't say that,\" said Angelo. \"But no, that is not my primary intent.\"\n\n\"Very well,\" said Leneria.\n\nShe punched the display and the medical couch widened to be more than big enough for two people.\n\nShe climbed up on the padded surface and lay down, staring up at the ceiling.\n\n\"I am here now, Commander Telegin,\" said Leneria. \"You may now go to sleep.\"\n\n\"Nope,\" said Angelo. \"That's not how it works. You need lie on my shoulder.\"\n\n\"Oh for the ancestors' sake!\" she said.\n\n\"I'm the patient.\"\n\nShe sighed in frustration.\n\n\"Alright. Tell me what I should do.\"\n\nAngelo stretched out his arm and pulled her toward him.\n\n\"Just lay your head there, like that,\" he encouraged her. \"Now put your hand on my chest. Good. Now put your leg across mine.\"\n\n\"But won't it be too stimulating?\" asked Leneria. \"I find this sort of proximity and this much skin contact rather sexual.\"\n\n\"It doesn't have to be,\" said Angelo. \"This is nice. This is comfortable. We'll just lie here and go to sleep.\"\n\n\"I have to sleep too?\" she asked, lifting her head to look into his eyes.\n\n\"You don't have to,\" said Angelo. \"But what else are you going to do?\"\n\nHe gently reached up and pushed her head back down.\n\nIn truth, it was quite erotic: her lovely skin against his; their naked bodies entwined. Had it not been for the fact he was still recovering and she was exhausted from watching over him almost constantly the past three days, something might have happened. As it was, Leneria found her eyelids growing heavy within minutes.\n\nShe yawned.\n\n\"This is actually quite pleasant, Commander,\" she murmured.\n\n\"See?\" he said, responding with a yawn of his own. \"Just think what you all have been missing.\"\n\nThis time, it was Leneria's hand who sought out Angelo's. She breathed a final sigh of contentment as they drifted off to sleep.\n\n***\n\n\"What are they doing?\" whispered a voice.\n\n\"I'm not sure,\" whispered another.\n\nAngelo's eyes fluttered open.\n\nLeneria was still blissfully draped across him, her breathing was deep and peaceful.\n\nMenaea, Marcus, and Lietseleh were at the end of the medical couch, staring at them with intense curiosity. Menaea was turning her head one way and another, trying to make sense out of the scenario before her.\n\n\"Good morning,\" said Angelo.\n\n\"Good day, Commander,\" said Marcus. \"We trust you are recovering well.\"\n\n\"I'm feeling much better, thank you.\"\n\n\"Might I ask what you're doing?\" said Menaea.\n\n\"Well, I was sleeping,\" explained Angelo. \"We were sleeping, it seems Leneria still is.\"\n\n\"She was,\" said Leneria with a yawn. \"Oh Commander, what a restful sleep that was. I see why you recommended it for healing. Oh, hello.\"\n\nShe had just noticed their three observers.\n\n\"Leneria, what are you doing?\" asked Lietseleh. \"Why are you sleeping all tangled up with the Commander?\"\n\n\"It was at his request,\" explained Leneria. \"Bedside manner - full-human traditions, hard to explain.\"\n\n\"I see,\" said Lietseleh.\n\nIt was clear she didn't see.\n\n\"Do you plan on coupling with him?\" asked Menaea. \"His ability to regain an erection seems quite intact after his medical scare. Is it safe to provide him sexual relief yet?\"\n\n\"I...I...\"\n\nLeneria's hand sought out the object in question and came to rest on it gently.\n\n\"I will have to see,\" she said with a blush. \"I need to run some scans. Please leave us now, and I will ascertain the Commander's condition. Thank you.\"\n\nThe three visitors saw themselves out and Leneria closed the door, taking the unusual step of sealing it and darkening the window. As she returned to Angelo, she tapped the control screen to disable all video feeds in the medical suite.\n\n\"I told a slight fib, Commander,\" she said in sultry tone. \"You have been quite functional and safe for some time when it comes to sexual contact - but for some reason I felt the need to be alone with you. Why would that be?\"\n\n\"I wouldn't have the slightest idea,\" said Angelo.\n\nThough he had some suspicion, he dared not voice it for fear of breaking the mood.\n\nLeneria climbed back upon the medical couch and climbed across Angelo's body - her legs straddling his hips - her body draping across his - her breasts brushing teasingly across his chest.\n\n\"I've been having the strangest images in my mind, Commander,\" said Leneria. \"All of the talk aboard ship is of your exploits in the group sex lounge.\"\n\n\"The ones that nearly killed me?\"\n\n\"The same,\" she whispered. \"But strangely, I do not wish to perform such athletic feats with you. After spending the night with you, my mind is filled with the most tender images. Isn't that strange, Commander? Isn't it odd that my imagination should conjure up visions of you and I having gentle and intense sexual congress?\"\n\n\"It doesn't seem so odd to me,\" replied Angelo.\n\nWith a sigh, Leneria pushed herself down upon Angelo's well-recovered stiffness.\n\n\"Oh Commander,\" she murmured. \"What is it you do to me? With you inside of me, I feel like I am a different person - like you belong there? What of that? Can you explain that?\"\n\nAgain, Angelo thought it best not to answer her question for fear it might spoil the moment if she suspected the true answer.\n\nTheir sex was intense and deliberate. She rode his cock slowly, feeling the need to savor every moment of their union - to feel every millimeter of his shaft as it seemed to roll in and out of her with perfect fluidity.\n\nShe was certain she could feel each ridge and vein on his cock. He was convinced he knew where each muscle of her beautiful pussy was as she squeezed him expertly.\n\nThey were soon both sweating, not from exertion but from the intense silent battle they seemed to have entered with each other. Both of them were on the verge of an orgasm, but neither wanted to surrender to the final pleasure.\n\n\"Commander, I am so close,\" whispered Leneria.\n\nIt had been nearly three-quarters of an hour and their slow horizontal dance had scarcely varied in pace. They had switched positions once so that he was on top, but they had alternated once again with her sliding up and down above him.\n\n\"I am, too,\" said Angelo. \"Maybe I could help move things along.\"\n\nWith his final word, he had thrust upward inside of her in a surprise move.\n\n\"Oh!\" she said...and for the first time in her life, Leneria laughed.\n\nHe thrust again.\n\n\"Oh. Ha! What is this feeling.\"\n\nHe thrust once more.\n\n\"Oh, you wicked man! Commander, I...I... oh my word I'm cumming!\"\n\n\"Good,\" said Angelo. \"Cum for me Leneria, cum for... oh gods, I am too!\"\n\nIn the sexually heightened atmosphere of the ship, Leneria had experienced, no doubt, thousands of orgasms in human form. However, never had the sensation been connected with the emotions that had begun to stir within her since she'd met Angelo. For the first time ever, she experienced a true and deep orgasm - connected by what might be the beginnings of love.\n\n\"I'm dying,\" she cried. \"I'm sure of it. I'm... oh Commander, how is this possible!?! How is this feeling happening. Ahhh!!!\"\n\nShe tumbled over into incoherence, squealing and moaning with blinding ecstasy. Her hips were shaking uncontrollably, her heart was pounding so hard Angelo could feel it against his chest as he sprayed into her. Of course, he wasn't panicked, but simply held her even more closely as she experienced the tremors of true joy.\n\nWhat she did next surprised him, in a good way.\n\n\"Oh my, Commander,\" she said, bending down to kiss him. \"I see why you kiss afterward. I do.\"\n\nShe kissed him hungrily, her hands linked tenderly with his. After a deep, tongue-tangling kiss, she started kissing her way down his neck, then slipped of off his cock and worked her way down his chest, kissing all the way to his somewhat-softening member.\n\n\"I want to taste us,\" she said.\n\nTaking his cock in her mouth, she sucked and licked enthusiastically.\n\n\"How lovely we taste,\" she said.\n\n\"And how lovely you feel,\" he moaned as his cock began springing to life once again.\n\n\"Oh I love this cock,\" she said. \"I see now why they say that in the movies. 'Cock'. It's so much better than 'penis'. Penis is for the medical suite. Of course, that's where we are, but that's not what I mean. 'Cock' - I love your cock.\"\n\nShe continued cleaning their juices off of him with her tongue and he was soon moaning from the attention.\n\n\"Oh, but I shouldn't,\" she suddenly realized. \"No. No, I can't.\"\n\nShe rolled off of the medical couch and stepped away.\n\n\"I need to let you recover. Of course, the sensors say you are fine, but the outlined treatment was for you to take things slowly at first. But, I do want your cock again. I want it so badly.\"\n\nShe bent down to kiss the tip, teasing it with her tongue.\n\n\"No. No. No,\" she told herself. \"Commander, you rest. I must... I must leave. That's the only way I can. Ha ha!\"\n\nShe laughed, giggling like a schoolgirl.\n\n\"I have to go. For your sake. Goodbye.\"\n\nShe exited the medical suite, leaving an exhausted but beaming Angelo to ponder the transformation that was occurring in Leneria.\n\n***\n\nSurprising as it might have seemed to those with a more traditional view of relationships, Angelo and Leneria did not become mutually exclusive right away. Given the frank nature of sexual relations on the ship, Angelo was actually in high demand because of his testosterone driven exploits in the group sex lounge.\n\nHe was so in demand, Leneria had to put him on a ration of sorts - no more than two partners a day until she was sure he was fully recovered.\n\nIn truth, the ration was three - she was saving his third time for herself. Every day he was 'ordered' to return to the medical suite where the doors were closed and where their lovemaking became continually more intense and intimate.\n\nAfter a few days of this routine, Marcus invited Angelo for another stroll.\n\n\"There are interesting things, afoot, Commander?\"\n\n\"Oh? What kind?\"\n\n\"People are sleeping together,\" said Marcus. \"Word of your sleep time with Leneria has spread and curiosity has grown. For the first time in our limited history, our crew has begun seeking out sleeping partners - not just sexual partners.\"\n\n\"Fascinating,\" said Angelo with a grin. \"Have you tried it, Marcus?\"\n\n\"I have,\" said the chiseled Aquilan. \"I have spent the past two nights sleeping with A'nish and Lietseleh. The first night was, distracting might be a good word, I found it quite distracting to be near the stimulation the two of them offered. However, the second night we coupled quite vigorously and fell asleep directly post-coitus. It was a strangely satisfying and comforting rest period.\"\n\n\"Fascinating,\" said Angelo.\n\nThe sleeping arrangements continued to evolve. From individual couples to pods which shifted nightly, the small individual sleep cubes were now seldom used.\n\nBy the end of the next week, Angelo's allowance had been upped to back to normal. With the regulating hormones Leneria prescribed, he wasn't up to the non-stop fucking he had been pursuing - but there were certainly ample unions. He decided to continue pursuing the record of bedding the entire ship - finding willing partners wasn't difficult given he was still a desired sexual partner. His number stood at 128.\n\nSurprisingly, Leneria displayed no jealousy. She actually enjoyed watching him with other women and they had many foursomes (or moresomes) brought about by her becoming so inflamed from watching him.\n\nAngelo himself suspected he had some tinges of jealousy, but it was hard to measure how much because of the surreal surroundings in which he found himself. Heightened libidos; naked humans of every conceivable variety, and a partner who was both willing and generous to share with others.\n\nHe asked her about it one day when they had retreated back to the medical suite. The concept of jealousy was one which was nearly impossible for her to grasp.\n\n\"I will be fascinated to observe how this trait develops in future generations of our kind,\" mused Leneria. \"Monogamy among true Aquilans would be - what is the term - sinful? While our kin tend to congregate in in local areas, there are those who travel great distances while dormant to reach other colonies. Should a male and female meet while traveling in opposite directions along a migratory route, it would be rude if not fatal for them not to copulate and replenish their energy. Even in the nebula clouds, refusal is unheard of - no matter what the ability of the lover.\"\n\n\"So, there are better and worse lovers among your kind?\" asked Angelo.\n\n\"Absolutely. You have seen our kin having sex. There are millions of points of contact on their surfaces akin to human nerves. Multiply the number of ways each of those nerves can be stimulated - there are indeed good and bad lovers.\"\n\n\"How would I stack up as an Aquilan?\" asked Angelo as he pulled her into an embrace.\n\n\"I suppose you would have a C Average as a whole,\" said Leneria with a sigh as Angelo slid easily into her.\n\n\"C?\" he said with a thrust. \"You think I'm a C?\"\n\n\"Perhaps C-plus,\" she said as she began to meet his motions. \"Personally, I would give you at least an A, if not a frequent A-plus. But speaking of grades, we must not take too long tonight. I sit the exam tomorrow and I must be well rested.\"\n\n\"I'll do my best, my lady,\" said Angelo.\n\nThe one interesting aspect of their lovemaking was that, although they had shared many group sessions with others - the only time they ever had sex together was in the privacy of the medical suite. The specialness of their unions seemed to demand privacy - though that was soon to change.\n\n***\n\nThe next day, Angelo kept busy working with the engineers - with several sex breaks - but he found himself missing Leneria a great deal. They generally would see each other at least a few times during the day - but she was fully isolated with her final examination.\n\nShe had already passed over twenty preliminary examinations. This was her first attempt at the final test.\n\nThe difficulty of the final medical examination was legendary, one which fewer than five percent passed. Leneria was to take it with the assistance of holos and even synthetic cadavers in the medical suite.\n\nHe made his way to the dinning lounge and declined a few offers of mealtime sex awaiting her arrival.\n\nAt last, he saw her, she sort of shambled into the room - eyes bloodshot, hair unkempt. She looked beyond exhausted. However, her eyes lit up when she saw him and she went running to him, throwing her arms around him and pulling him into a passionate kiss.\n\n\"I passed,\" she sighed. \"It was so difficult, but I made it through.\"\n\n\"Well, well, well, Dr. Leneria. How wonderful.\"\n\n\"Do you know the part that almost tripped me up?\" she asked.\n\n\"I couldn't imagine.\"\n\n\"Bedside manner,\" she said with a half smile. \"I knew I was failing the situation, but I remembered your tip. I began to echo empathy to the patients in the simulation and it came easier than I imagined. Now, I'm starving.\"\n\nShe ate voraciously, having built up a huge appetite throughout her grueling day. Once she was finished, they were surprised to be approached by several women - Menaea at the lead.",
        "\"Greetings Commander Telegin, Leneria,\" she said. \"Leneria, we all wish to congratulate you on your medical degree. We understand what a difficult feat it was to accomplish here in isolation. If and when the day comes when you attend advanced medical school, we look forward to the heights you will undoubtedly achieve.\"\n\n\"I thank you,\" said Leneria. \"Though I must wonder if there is another purpose to your visit.\"\n\n\"You are most perceptive,\" said Menaea. \"We were wishing to inquire about why your sexual unions with Commander Telegin are always in private. Commander, your insight is also welcome.\"\n\nAngelo was uncertain how to answer, and he could tell by Leneria's blush that she also was at a loss.\n\n\"Well,\" Leneria stammered. \"You see, with the Commander there is an intensity about our lovemaking and I find myself possessed with an unexplainable urge to keep our unions... self-contained, for lack of a better term.\"\n\n\"Intensity?\" asked Leneria. \"By intense, do you mean better? Is the quality of your copulation of a higher quality.\"\n\n\"Oh, undoubtedly,\" said Leneria. \"It exceeds the best sex I have ever experienced and...\"\n\nShe drifted off and blushed profusely.\n\n\"What? Why do you stop?\" asked Lietseleh, who was also part of the group. \"It seems as though you are withholding information from us. What is it like?\"\n\nLeneria gathered herself and finally found the will to muster the words she barely dared to say.\n\n\"It is the best... it is the best sex I have experienced since...since...\"\n\nAgain, Leneria couldn't finish her sentence.\n\n\"Since when?\" whispered Menaea.\n\n\"Since before I transferred my consciousness into this human form.\"\n\nA great hush had fallen over the room. All eyes were on the two of them.\n\n\"How?\" asked A'nish, who had joined the conversation. \"How does he do this? I have partnered with him many times, and while his technique has improved immensely - and while his energy was unparalleled in his life-threatening session - it has never come close to something along those lines. Commander Telegin, would you care to elaborate?\"\n\nAngelo felt like he was painted into a difficult corner. Here he was with creatures who placed a premium on sex, but showed a primal aversion toward emotion. How could he to tell them the reason for the amazing sex he had with Leneria was because of their inherent emotional bond?\n\nHe couldn't.\n\n\"I think...\" stammered Angelo, \"that perhaps Leneria and I have simply had more time together.\"\n\n\"But that doesn't make sense,\" protested Menaea. \"You and I were very frequent partners. Though I certainly enjoyed our times together, we hit a plateau of pleasure that was rarely exceeded.\"\n\n\"We must observe you,\" insisted Lietseleh. \"You have undoubtedly discovered some new technique that you are unaware of during the impaired state of sexual pleasure. Yes, we must see it now.\"\n\n\"No, but...\" protested Angelo.\n\n\"We really couldn't,\" sputtered Leneria.\n\nThere was no room for argument. A large table was soon cleared in the center of the dining lounge and padding magically appeared. They were invited to take the place of honor. Well over two-thirds of the ship, all who weren't on duty or otherwise occupied, gathered 'round.\n\n\"I must tell you again,\" said Leneria, \"if you are hoping for another display like the orgy the Commander performed a while ago...\"\n\n\"No,\" said Lietseleh. \"We wish to observe this miraculous sexual coupling you speak of. Stop dallying and proceed.\"\n\n\"Fine,\" said Leneria in a bit of a huff.\n\nShe turned to Angelo, bringing him into a deep and slippery kiss.\n\nHe had planned on telling her to just focus on him and forget everyone else - but he soon realized that if anyone would need to focus it was him. Leneria's focus was one hundred percent entirely on the activity at hand and her attention soon had him entranced as well. The touch of her lips on his - the way her breasts crushed against his chest - that was all it took to make the room of 200-plus naked Aquilans melt away.\n\nIt was not the sexual Olympics Angelo had displayed a few weeks prior. It was better. There could be no doubt about that. No porn vid could compare to the raw heat emanating from their union, no sexual actors - no matter how good - could match the primal eroticism they shared with each other (though there were cameras on display, so there would be a vid now).\n\nThe crew watched, mesmerized, as Leneria responded with exhilaration to each touch and kiss of Angelo - and he responded in the same fashion same. Their lovemaking played out like a perfectly choreographed erotic ballet. Each move seemed to be countered by another one. Their motions were marked by a marvelous artistic fluidity.\n\nLeneria, in particular, had become especially vocal in their sex and it seemed with a willing audience her volume increased even more. As they pushed each other to greater and greater heights of pleasure the only sounds in the dining lounge were of the two lovers and their passion. Every other person present watched in stunned fascination and wonder as they became witness to a new sort of union - one borne of passion, not pure physical lust.\n\nAs for Angelo and Leneria, the rest of the ship barely existed. They eventually found themselves with Leneria on top, riding him with erotic intensity.\n\nShe detected the tell-tale sign in his breathing and his movement.\n\n\"Are you close, Angelo?\" she gasped out in a sultry voice. \"Don't hold back. Fill me up, I want to feel you inside of me. Cum for me, Commander.\"\n\nMoments later, Angelo did just that. He cried out her name and his moans of rapture echoed throughout the silent room.\n\n\"Now you,\" he whispered as the last blast filled her up. He still had enough stamina left after his orgasm to pound into her the few more times he knew it would take to send her skyward.\n\nAs vocal as she had been in her lovemaking, Leneria's orgasm was just as silent - but no less intense. She gasped in desperate breaths, her face a contorted mask of pleasure as several waves of pleasure rolled through her body. When she was done, they continued kissing...and smiling.\n\nIt was then that they remembered where they were. Still atop Angelo, Leneria turned to Lietseleh and the other women who had initiated the request.\n\n\"So,\" she said, panting. \"That's what it is like with the two of us. It is quite lovely, wouldn't you say?\"\n\n\"Oh yes,\" agreed Lietseleh. \"It was exponentially more intense in some way. Though I must say, qualitatively, I could not detect any different technique in your sexual motions.\"\n\n\"No,\" agreed A'nish. \"I saw very little difference between this and the times I have shared with the Commander.\"\n\n\"It was their focus,\" said Menaea quietly. \"They were entirely focused upon each other. I have never seen such... dedication, I suppose is the word.\"\n\n\"We thank you,\" said Lietseleh. \"It was a generous gift for you to share such an intimate moment.\"\n\nAngelo and Leneria dismounted from the table and walked hand-in-hand out of the dining lounge. They were not met by applause, but by something more respectful. The Aquilans simply remained silent and acknowledged their passing with silent nods.\n\n***\n\n137. That was where the number stood - and it appeared it would remain there. Angelo had two weeks remaining aboard ship and his (admittedly juvenile) goal of bedding the entire ship's complement of women - 164 total - had come to a screeching halt.\n\nThe resistance had started slowly at first. The partners that Angelo had approached had of course been courteous, but if Leneria had been anywhere in the vicinity - they had insisted that Angelo couple with her - so they could watch. Leneria reported similar behaviors of reluctance.\n\nIt wasn't a terrible blow, really - it meant that they could couple several times a day which certainly had its amazing rewards.\n\nThen had come the movie surprise. Though neither of them had much affinity for movie night, they decided to attend one. Much to their surprise, instead of poor quality canned music - the lights went down and stirring classical music began to play.\n\nOn the screen, the title appeared and both Angelo and Leneria gasped in surprise. It simply showed their names, and the next scene that appeared was the two of them in their dining lounge session. They watched in stunned silence as that scene ended and it drifted to another session, which had been taped by the ship's cameras.\n\nMarcus was nearby. Angelo slid up behind him.\n\n\"What's going on Marcus?\"\n\n\"Oh, hello Commander,\" said Marcus. \"We found that after watching your pairings with Leneria that they were a great deal more... stimulating. No, that isn't the proper word. Your unions are much more evocative and pleasurable to watch than the professional movies.\"\n\n\"I see,\" said Angelo.\n\nHe went back to Leneria and took her hand, leading her back toward the medical suite - their ad hoc quarters.\n\n\"Come on,\" he whispered. \"If I'm going to watch this - I'm going to be watching it first-hand.\"\n\nA few days after that came the final word.\n\nHe passed the voluptuous and ever-tempting Menaea in the corridor. It had been some time since they'd been together.\n\n\"Hello, Menaea,\" he said with a smile.\n\n\"Oh, hello Commander,\" she said.\n\nEven through her red skin, he detected a bit of a blush.\n\n\"Menaea,\" he said, \"I always found you to be an amazing lover and I'd love to have at least one more time with you. What do you say?\"\n\n\"Oh...certainly,\" stammered Menaea. \"Just let me know a good time and we shall arrange a location.\"\n\n\"How about now?\" said Angelo. \"I'm free. You seem to be free.\"\n\n\"Yes, yes, of course,\" said Menaea.\n\nIt was odd for Angelo to detect the sort of reluctance he was feeling from her. She had always been the most enthusiastic and willing of his partners (except Leneria, of course).\n\nShe did, however, go with him into a nearby lounge, and lay down to accept his attentions.\n\nHe began at her belly and worked his way up. Even his kisses were meeting with resistance. Her response to his lips on her skin was tepid at best, and when he reached her lips there was a palpable reluctance.\n\n\"Alright, Menaea,\" he said, \"what's with the cold fish routine? I'm fine with a 'no', but I find it a bit surprising from you.\"\n\n\"I don't know what you mean by referring to me as an underwater creature,\" said Menaea, \"but... but...\"\n\nMenaea became the second Aquilan Angelo had ever seen cry.\n\n\"I'm so sorry, Commander. I know it is dreadfully rude of me to show reluctance, but I cannot do this.\"\n\n\"Okay,\" said a bemused Angelo. \"I'm fine with that, truly. The question I would have is 'why'? Why can't you?\"\n\n\"Commander, a great many of us have been watching you and Leneria with an unexplainable fascination. Your sexual unions are inspirational in regard to intensity and intimacy. I have spoken with several women who have coupled with you over the past few days and they are torn by two conflicting emotions.\"\n\n\"What are those?\" asked Angelo.\n\n\"The first is disappointment. No matter how competent you are when it comes to sexual congress, they have all felt cheated in a way. Their unions with you have not achieved the level of intensity we know you share with Leneria.\"\n\n\"And the other reason?\" asked Angelo softly.\n\n\"We feel... disloyal. We do not have a family as you would think of it, but Leneria is our sister and our dear friend. We feel she is entitled to you and you alone, and we are frankly perplexed as to why the two of you are not spending every moment you can together.\"\n\n\"I think that is a good question,\" said Angelo after some thought. \"And I think it is something I intend to rectify. Thank you, Menaea.\"\n\nHe gave her an affectionate kiss on the cheek and set off to find Leneria.\n\nWhen he found her, she reported she had been told much the same thing. She had begun to couple with Jensen, a tall and wiry redhead of Capellan stock. They had been in the middle of a rather frustrating session when he had broken it off and said he felt she should be with the Commander.\n\nFrom that moment on, they did take full advantage of their time together. If they weren't making love they were talking. If they weren't talking they were simply sitting side by side, some part of their bodies always touching. It was clear they were falling deeply in love - but those words were never spoken.\n\nWith one week to go, they had 'the' conversation.\n\n\"So,\" said Angelo. \"I leave in a week.\"\n\n\"Yes,\" said Leneria. \"I was... I was wondering if you could perhaps apply for an extension. I feel... we feel you have made great progress in regard to learning about Aquilan technology.\"\n\n\"I can't do that,\" said Angelo. \"The rules outlined by your people are actually very clear about that. No liaison can remain for more than three months. However, that isn't to say you can't come with me.\"\n\n\"But my place is here,\" she said. \"I am to become the ship's physician.\"\n\n\"Well, sure,\" he said. \"But doctor's always do residencies - work with other doctors. We talked about that.\"\n\nShe was struggling with the conversation - becoming more emotional by the moment.\n\n\"But I was going to do that on my own. That was to be my decision. Where will you be going after this?\"\n\n\"Captain,\" said Angelo. \"They haven't told me my ship yet, but it was confirmed I'd be getting a promotion and a ship once I leave the Alshain. Fleet rules are quite permissive in regard to partners these days. We build ships big enough that families are permitted and even welcome.\"\n\n\"Partners? Families? What do you think of me as, Angelo. How exactly would I be accompanying you?\"\n\n\"Well, we could go as simple as domestic partnership.\"\n\n\"Domestic partners!?\"\n\n\"I... okay, I'm not sure exactly what's going on here,\" said Angelo.\n\n\"Domestic parners, as I recall,\" said a blustering Leneria, \"would imply some sort of emotional bond.\"\n\n\"Well, yeah,\" said Angelo. \"Come on, let's face it, Leneria - we love each other. I love you, you love me...\"\n\nSmack!\n\nEven in his scuffles at the Academy, he could not recall being hit quite so hard as the slap she gave him. He had to fight to keep his balance and he was certain if he had a mirror he would see a red hand print emblazoned on his cheek.\n\n\"How dare you say such a thing!\" she cried. \"The nerve!\"\n\n\"Okay, okay, I'm sorry,\" said Angelo. \"That was wrong of me to assume on your part. But I do love you and...\"\n\nSmack! She slapped him on the other cheek.\n\n\"Son of a bitch, Leneria!\" cried Angelo. \"Why is this so upsetting?\"\n\n\"I need you to leave, Commander Telegin.\"\n\n\"But...\"\n\n\"Leave, Commander!\" she screeched. \"Leave and don't ever come back into my sight.\"\n\nAngelo left the medical suite in more than one kind of pain. He had assumed things were going so well with Leneria. He, too, had concerns about what would happen with them upon his departure, but he never would have imagined such a reaction.\n\nHe wandered around and found himself in the quiet sex lounge where several couples were gathered. Not that he would have found any willing partners, but he wasn't in the mood as it was. He simply sat and stared into space - trying to grasp what was so wrong.\n\n\"Hello, Commander,\" said a friendly voice. It was the lovely Menaea, who had wandered into the lounge unaccompanied.\n\n\"What the fuck is wrong with you people?\" asked Angelo.\n\n\"What do you mean?\" she asked, taking his hand in hers - an unusual sign of friendship, but one which had been gaining popularity since his arrival.\n\n\"You've seen it,\" he said. \"You yourself pointed it out. Leneria and I are meant for each other. We love each other... or at least I love her.\"\n\nHe felt Menaea flinch at the word love and turned to face her.\n\n\"Are you truly incapable of love?\" he asked. \"Are Aquilans so cold, so divested of emotions that you find it repulsive. I'm trying to understand, Menaea, but I can't. Why does Leneria refuse to open up to me?\"\n\n\"Oh, my poor Commander,\" she said.\n\nIn yet another rare display, she raised her hand to his cheek and caressed it in a gesture of comfort.\n\n\"We are capable of more emotion than you could possibly imagine, Commander,\" she said gently. \"I think I may have an explanation for you, but you will need to be patient just a bit longer, yes?\"\n\n\"I'll try,\" said Angelo. \"But I don't have much time. I'm gone soon, you know.\"\n\n\"I know, Angelo,\" she said. \"Stay strong, all will be explained.\"\n\nShe reached in and kissed him tenderly. It was the first kiss, other than from Leneria, that he had ever received from an Aquilan that was not sexual in context.\n\nAngelo devoted himself entirely to his duties over the next couple of days, completing any reports that were due, and registering his own vidlog which showed his own frustrations.\n\n\"I thought,\" he said to the camera, \"I thought I had cracked this nut. I thought I was going to be the one who figured them out. Neirna was right. All of my predecessors were right. This is hopeless.\"\n\nJust then, there was a rap at the door. He opened it to find Menaea, Marcus, and A'nish. They all had goggles around their necks and Menaea held an extra set for him.\n\n\"I assume we are going to the Center?\" he said.\n\n\"We are,\" said A'nish. \"And we must warn you - this was a difficult hurdle to allow you to come.\"\n\n\"To come for what?\" he asked.\n\n\"You'll see,\" said Marcus. \"But we must ask that you be respectful beyond measure. Every member of the crew had to vote 'yes' before you were allowed, and there were still some with misgivings.\"\n\n\"I'll be respectful,\" said Angelo. \"But I'm still not sure what for.\"\n\n\"It is for your answer,\" said Menaea. \"You are about to see the answer to the mystery of us - and of Leneria.\"\n\nHe followed them in somber silence through what seemed to be an abandoned ship. They arrived at the Center to find every single crew member wearing goggles and gathered around the railing looking into the great gaseous tank.\n\nAlso around the perimeter, within the tank, were the energy-based Aquilans. All save for two were at the edges of the tank. At the very center were two Aquilans. The male, he couldn't be sure of, but something in the markings of the female let him know it was the same one he had seen before with Leneria.\n\n\"Is that the engineer?\" he asked in a hushed tone.\n\n\"It is indeed,\" said Marcus.\n\nA'nish came to his side then, and locked her arm in his. He looked about at all of the other Aquilans, and they were in a similar state. It was an odd site, to see them showing signs of general affection - but there seemed to be nothing erotic in the atmosphere.\n\nA'nish and Menaea narrated the events to follow, always speaking in low and respectful tones.\n\n\"The engineer has completed her mission,\" A'nish said. \"She has finished her design for the Alshain II. Therefore, she is ready to take her next step in life. The male is our chief diplomat. He feels that things are progressing well among Aquilis Humanis, and he is ready to hand over the reins to the younger of his skill set.\"\n\n\"Move on to where?\" asked Angelo.\n\nMenaea spoke next.\n\n\"You asked of love, Commander Telegin. You, like the other liaisons, have expressed great frustration at our unwillingness to show the deeper emotions.\"\n\nJust then, the male and female in the tank began to glow. Where before, Angelo had felt lust emanating from the tank - now he merely felt joy, rapture, and yes - love.\n\n\"We are lusty beings, undoubtedly,\" said A'nish. \"In our natural forms, we are driven by lust. We survive and flourish because of it.\"\n\n\"But,\" continued Menaea, \"we are not incapable of love. We are fearful of it, but not incapable.\"\n\n\"Why are you fearful?\" asked Angelo.\n\n\"Lust preserves us,\" said A'nish. \"Lust fulfills our desires and infuses us with energy, both real energy and that of thought. However, when the time comes for us to move on - we must shed our skins. The male and the female you see before you are preparing to do just that.\"",
        "\"See if you can guess,\" said Menaea. \"Guess what it takes to dissolve the membranes which protect our interior.\"\n\n\"Love?\" gasped Angelo.\n\n\"Exactly,\" said A'nish. \"Commander, the human definition of the word 'nude' or 'naked' is to be without clothes. For an Aquilan, there is only one time in their entire existence that they are truly naked. It is this moment you are about to see.\"\n\nThe male and female in the center began to glow even brighter, and Angelo watched in wonder as their skins began to burn away - leaving their great bodies floating in the gaseous interior. Once their skins were gone, the colors within were even more exposed and beautiful. The brightness was almost overwhelming.\n\n\"Commander,\" whispered Menaea, \"what you are about to witness is the most sacred and precious moment in all of Aquilan existence. It is not that love is taboo for us. Love is so holy as to be unmentionable out of respect for the two of our kind who are prepared to join one another in the ultimate act of love.\"\n\n\"Now watch,\" said A'nish. \"You are the first of your kind to ever witness this blessed event.\"\n\nThe male then swam slowly into the female - who had expanded outward so that he might fully enter with no contact. Once he was fully within her inner chamber, she slowly contracted to envelope his entire body. Where before sparks had flown at their points of contact - now a red glow began where they touched and began to spread throughout the two Aquilans.\n\nAngelo could not suppress a gasp as, in less than an instant, the structures of the two Aquilans collapsed in upon themselves with a frightening rapidity. From there, their two masses merged into one and expanded outward into a great blue sphere - within which were countless swirling organelles. Faster and faster the white lights inside the globe swam until the edges of the sphere began to blur. Finally, with a great explosion, the contents of the sphere shot outward and where there had been a bright light - there was now nothing.\n\nElsewhere, throughout the huge tank in the center, tiny little organisms were now zipping about. All of the crew had their hands upon the glass and were calling out greetings. Just then, two tiny tubules and three tiny cylinders...tiny, tiny Aquilans, came zipping up to the glass. Marcus, Menaea, and A'nish all put their hands to the glass and called out joyfully.\n\n\"Hello young ones!\" squealed Menaea.\n\n\"Greetings, children,\" said A'nish with a smile.\n\n\"My best wishes,\" said Marcus. \"I knew both of your parents. I am sure you will all do great things.\"\n\nSoon, the little ones flitted off again. They sought out older Aquilans. Not the full adults, who were already back to coupling - but the adolescent ones. For the most part, the tiny newborns sought shelter within the interior of the females - but Angelo could see that the youthful males also showed a protective bent toward these tiny creatures.\n\nThe crew began to exit, smiles replete across their faces. Angelo thought he caught a brief glimpse of Leneria - but she was soon gone.\n\nHe walked back in silence with his three escorts at his side.\n\n\"What do you think?\" asked Marcus.\n\n\"I think it's the most beautiful thing I've ever seen,\" said Angelo. \"But I'm also trying to decipher what it all means.\"\n\n\"What do you think it means?\" prompted Menaea.\n\n\"I think,\" began Angelo, \"that it means Leneria is frightened beyond measure. Just as your drive for sex has not left you since entering these bodies - you are also still hampered by the ancestral instinct that to give into love means the end of your life.\"\n\n\"You are most perceptive,\" said A'nish. \"Now do you understand why the one you love is so reluctant and upset?\"\n\n\"I do,\" said Angelo. \"But I also think it is a bit irrational. She is a human now, not an Aquilan. She is also a scientist. She should know better.\"\n\n\"Instinct and memory are irrational, Commander,\" said Marcus. \"Logically, she understands these things. Right now, she is struggling to overcome her inner demons which she inherited from half a millennia as another form.\"\n\n***\n\nLater that night, Angelo was rapping at the door of the medical suite.\n\n\"Who is it?\" came Leneria's voice through the crack she had allowed the door to open.\n\n\"It's me, Lennie,\" said Angelo.\n\n\"I do not like that nickname,\" she said.\n\nHer tone belied otherwise.\n\n\"Lennie, listen,\" said Angelo, ignoring her objection. \"You don't have to say anything, but I want you to know, you're not alone. Everyone feels the way you do, Aquilan or otherwise.\"\n\nThere was no answer.\n\n\"Lennie, everyone is afraid of the sacrifice they have to make for a partner. They're afraid of the time they'll have to give up, of the hours they could be dedicating to their career or to their passion. Then, along comes children, and there is a huge sacrifice. Maybe not as big as what Aquilans give up, but it is still a sacrifice. But Leneria, what you have to ask yourself is whether those sacrifices are worth it. Is it worth it to know that even if you're giving up some things, you are gaining others.\"\n\nStill, there was silence.\n\n\"Lennie, if you come along with me - I probably won't ever make admiral. I'll make captain, and I'll probably even work my way up to a full star cruiser - but I'll never go beyond that. If you're with me, I won't put in the time it would take to climb all the way up the fleet ladder. But the thing is, I won't care. I'll have you. Having you, that's enough for me. Do you understand?\"\n\nStill, there was no answer from beyond the door.\n\n\"Think about it, Leneria,\" he whispered. \"You'll sacrifice. You won't die, but you'll give some things up. I hope it is worth it to you, because I love you, my Leneria. I love you Lennie. Goodbye.\"\n\nTwo days later, there was still no sign of Leneria. She had remained holed up in the medical suite - or if she had come out, Angelo hadn't seen her.\n\n***\n\nThe day came for his departure. The fleet ship was approaching the Alshain.\n\nWhat he hadn't known was there was a farewell ceremony aboard ship before the next liaison came aboard. Angelo chose to don his uniform anyway, and he stood out like a sore thumb among the hundreds of nude, beautiful bodies which greeted him in the recreation lounge.\n\n\"Farewell, Commander,\" said Lietseleh, who was first in the farewell procession. To his surprise, she bestowed a full, mouth-on-mouth kiss upon him but it was not sexual in nature. The next woman did the same. The males hugged him fiercely, and he found himself overwhelmed by the friendship and love he was being shown.\n\nAt last, he neared the end of the farewell procession. He found himself face to face with Marcus, who greeted him with a somber expression.\n\n\"Commander, you have done great things here,\" said the strapping young man. \"You have finally set us down the path of being human.\"\n\n\"I don't know about that,\" said Angelo. \"I think you were starting to learn before I arrived.\"\n\n\"Perhaps,\" admitted Marcus. \"Angelo, you told me once that a kiss is a question, correct?\"\n\n\"It certainly is.\"\n\n\"I see now what you mean,\" said Marcus. \"Commander Telegin, if you wouldn't mind. Please send a message to Neirna. Tell her I would very much like to ask her a question, but I can only ask it in person. I have cleared it with our people. She will be allowed to return if she so desires.\"\n\n\"I'll send it on a tight beam as soon as I can,\" said Angelo. He gripped Marcus' shoulder tightly in friendship.\n\nA'nish was next. She kissed Angelo deeply and long, patting his cheek fondly in farewell.\n\n\"A'nish, could you promise me something?\" asked Angelo.\n\n\"If it is possible, of course, Commander.\"\n\n\"The next liaisons; tell them everything. I understand why you guard your secrets so closely - but they need to know. I suspect if anyone could tell them, you would find a way.\"\n\n\"I will do my best, Commander,\" she said.\n\nAnd then came the last; lovely, crimson Menaea, her naked body standing as one final temptation to Angelo. Though his body tried to tell him otherwise, his mind knew better. His heart belonged to another...another who he might never see again.\n\nAll the same, she took him by the hand to a small enclave, where no one else could see them. Menaea sat him down on a padded couch and then climbed up to straddle him, taking his face in her hands.\n\n\"Oh Commander,\" she sighed. \"I think it is lucky you are wearing these horrible garments which separate our skin. Even though you have and Leneria share such amazing love, I am sorely tempted for one final farewell. Angelo, such good times I had with this marvelous body of yours.\"\n\nShe pulled him to her then, and kissed him deeply and affectionately. It was an odd kiss which only one who had spent time among the Aquilans could understand. Here was a stunningly beautiful, naked woman straddling him, kissing him passionately - their tongues dancing about, her breasts pushing into him, her hands running desperately through his hair. It was a question, indeed - but it was also a farewell - the only sort of farewell she could properly give.\n\n\"Why are you crying?\" asked Angelo when she finished her kiss.\n\nHe had looked up and seen tears upon her cheeks.\n\n\"I just think... I think it wasn't fair,\" she murmured. \"We were so good together, Commander. I cannot understand why it was not me who was the first of our human kind to be struck by love. You are human. Can you explain why?\"\n\n\"Oh Menaea,\" said Angelo. \"If I could explain that, I'd be a very, very wealthy man. No one has been able to answer that question since time began. But listen, beautiful girl, you will find love and gods help the man who you end up with. He'll be lucky to survive the honeymoon.\"\n\n\"Goodbye, Commander,\" said Menaea with one final kiss. \"May your travels be safe, and may love find you sooner than you expect.\"\n\nAs protocol dictated, the Alshain was now empty. All Aquilans were sequestered away, far from the entrance where - like sirens - they might beckon to any crew that might be assisting with the boarding party.\n\nThe hatch slid open, and Angelo was greeted by a new face.\n\n\"Commander Telegin,\" said the young woman with a snappy salute. \"I am Corporal Nistri. Permission to come aboard?\"\n\n\"Granted,\" said Angelo, and he surprised her with a salute followed by a quick hug.\n\nShe was of Arcturan descent, which tended to give a blue-green tint to the skin. The hue could either be disturbing or evocative and with her it was the latter. Was his heart not so crushed by the obvious loss of Leneria, he might have chosen the same approach as Neirna. As it was, he could only admire her.\n\nHe led her to the Liaison Cabin and sat her down on the bunk.\n\n\"My predecessor chose to keep me in the dark,\" he said. \"Her initiation to this ship was certainly pleasant, but it wasn't all that helpful. I'm going to tell you as much as I feel I'm allowed.\"\n\nHe proceeded to reveal as much as he could to her; the nudity, the openness, the reluctance toward emotions, and of course - the sex.\"\n\n\"One hundred and thirty-seven?\" asked Nistri.\n\nShe could scarcely contain her disbelief.\n\n\"Yep,\" said Angelo, matter-of-factly. \"But that's not even the record. Commander Stendson, the woman before Neirna, she ran the gamut. Every man on board.\"\n\n\"A woman?\" gasped Nistri. \"Truly?\"\n\n\"Oh come on,\" said Angelo. \"These are modern times. How many men have you slept with in your life - honestly?\"\n\n\"Forty, I suppose,\" said the blushing officer.\n\n\"There you go. Now guess what, you've just entered Candy Land; every best specimen of a man from every shape and ancestry. Plus, they juice the air here. If I could give you any advice, just dive in and enjoy it as much as you can until... until...\"\n\nHe broke off, brushing back tears.\n\n\"What is it, Telegin?\" asked Nistri.\n\nHe then told her what he had been sure he wouldn't tell anyone. He told her of Leneria and their unspoken love. He felt he needed to omit the facts about the beautiful Aquilan mating he had witnessed - that was something which needed to come from one of their own kind. However, he did confess to Nistri about his love for Leneria, and how he had felt they were almost there.\n\n\"Why didn't she come with you?\" asked Nistri.\n\n\"She... she wasn't ready to get naked,\" said Angelo sadly, \"not truly naked.\"\n\n\"I don't understand,\" said Nistri.\n\n\"You will,\" he said. \"Go find a beautiful chocolate-skinned woman named A'nish, she'll explain. But, speaking of naked, it's time for you to lose the threads. Here, I'll help.\"\n\nThe fleet dress uniform was not an easy get up, especially for women due to some archaic lacing someone had worked into the official doublet. Nistri might have objected, but the matter-of-fact manner with which Angelo handled the situation set her at ease.\n\nOnce she was out of her clothes, Angelo shook his head in wonder. She was hiding much more beneath the uniform than one would have expected.\n\n\"Damn,\" he said. \"Maybe I should have given you the Neirna treatment. That's some body, Commander.\"\n\n\"There's still time,\" said Nistri in a sultry tone. \"I wonder if this pheromonized air is already having an effect. That, and all of your talk, it got me going a bit.\"\n\n\"No,\" said Angelo with a wry smile. \"As pleasant as it would be, I think I'll save that honor for the Aquilan boys. Lucky dogs.\"\n\nAngelo gave her a quick hug and then departed toward the waiting transport.\n\nAll along his walk, he kept listening for sounds - hoping to hear the sound of footsteps or the bell notes of the beautiful voice he had come to love so dearly.\n\nThere was nothing.\n\nHe boarded the transport and did a quick debrief. Upon exiting that session, he was surprised to be handed his new insignia. Just like that, he was a captain. Oddly, it didn't feel nearly as rewarding as he had once thought it would be.\n\nHe excused himself and was shown to his quarters - a rather spacious two-room suite, fitting to his new rank. Once inside, he threw himself onto his bunk - too distraught to even muster tears. He was simply numb.\n\n\"Do you like my dress?\" asked a voice.\n\nHe shot up in surprise. Leneria had been waiting in the anteroom. He hadn't noticed her at all, having been wallowing in sorrow.\n\nShe now stood in a stunning green dress which complimented her in every way possible.\n\n\"Lennie,\" he said. \"You came.\"\n\n\"I came,\" she whispered. \"Commander Angelo Telegin, I came. I left the only home I have ever known - for you.\"\n\n\"Lennie, I...\"\n\n\"Let me finish,\" she said. \"Angelo, I am terrified. I know that this is a logical step in my human progression - but there is still that huge part of me that is certain my life is over, that I will dissolve the moment we kiss. I have shed every barrier for you. I love you, Angelo. I stand before you, naked. Though I am in human clothes, the Aquilan in me is bare and exposed. I am terribly fearful. Will you have me, Angelo? Shall we stay together, and see where life leads us?\"\n\n\"Will I...\"\n\nHe rushed to her and scooped her up in his arms, twirling her around and then letting her slide down his body, her mouth descending to his.\n\nIf a kiss is a question, they both received the answer that gratified their hearts.\n\n***\n\nOnce again -- my thanks for reading this. Votes, comments, and emails are always appreciated. "
    ],
    "authorname": "ShyChiWriter",
    "tags": [
        "alien",
        "kiss",
        "science fiction",
        "group sex",
        "threesome",
        "cum",
        "redhead"
    ],
    "category": "Sci-Fi & Fantasy",
    "url": "https://www.literotica.com/s/a-kiss-is-a-question-1"
}
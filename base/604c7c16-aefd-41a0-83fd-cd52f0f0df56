{
    "title": "Jane's Demonic Threesome",
    "pages": [
        "WARNING! AUTHOR'S NOTES APPROACHING!\n\nHello, friendly readers! Please note that everyone in this story is 18 years of age or older. Also be advised that this story contains a variety of kinks, such as breeding, overly large cock, cum inflation, and all the way through. If you're not into it, click away with my compliments. But if you're down for some truly wild demon sex, read on!\n\nThis is a follow-up to my previous story, Jane's Demonic Breeding, but you don't need to read that one to enjoy this one -- I meant for this to be a self-contained story. However, if you happened to enjoy my previous work, kind reader, then I hope you'll like this entry as well. Let us now turn our attention to our heroine, Jane, and her demonic misadventures...\n\nAUTHOR'S NOTES CONCLUDED. WE HAVE COME TO TERMS.\n\n~~~~~~\n\nJane was definitely pregnant.\n\nAs she walked from the student union across the covered bridge to the campus quad, Jane was very grateful for the chilly January weather. She was bundled up in a knit sweater, a thick wool coat, a pair of warm leggings, and a pair of brown fuzzy boots. On her head was a slightly goofy looking stocking cap with one of those poofy balls on top. All those layers kept her nice and toasty, but they also served a more important purpose:\n\nHiding her baby bump.\n\nJane picked up her pace, heart racing, as she passed other students on the walkway. Keeping her eyes downcast, she ignored students walking the other way. A few even recognized her and waved greetings, but Jane just put her head down and marched passed them, pretending not to see.\n\nHopefully they just think I'm being oblivious and not a total bitch, thought Jane.\n\nThe truth was, she was nervous to talk to anyone. In fact, Jane had barely even talked to her best friend, Alahna, in days. She hadn't told Alahna she was pregnant, and she certainly hadn't told her parents. She was paranoid that anyone she spent too much time with might notice the gentle bulge in her tummy that indicated a baby about three months along in its development. It wasn't that she was embarrassed about being 19 and pregnant -- it was that her baby bump might raise some difficult questions that she wasn't sure how to answer.\n\nBecause although she looked three months along, in actuality, Jane had only been pregnant for one week.\n\nA blast of cold air hit her as she stepped off the covered bridge and onto the quad. Hurrying across the paved walkways, past beds of wilted flowers and leafless trees, Jane entered the English Department building. She barely made it to her Intro to Literature class before the professor started the lecture.\n\nSitting in the back of the room, Jane could hardly focus on the professor, an octogenarian gargoyle who was droning on and on about Beowulf. The exploits of some handsome Danish guy from a thousand years ago held little interest for Jane. She was thinking instead about a handsome guy named Azalok, with luscious dark hair, dreamy, midnight-blue eyes, and the hugest cock she'd ever seen, who'd put a baby in her last week.\n\nOh, and he also just happened to be a demon. Like a literal, lives-in-Hell, works-for-Lucifer-Morningstar, battled-God-and-his-angels-during-the-Fall, demon type of demon.\n\nJane flashed back to that night for the millionth time. She simply couldn't get it out of her head. After months of desperately searching for a way to correct her genetic inability to conceive, she'd stumbled upon Azalok's posting on an online classifieds board. She hadn't believed it at first, but when he appeared at her door as if by magic, and then showed off the absolutely stellar equipment he was packing, she'd been convinced.\n\nSo Jane had accepted his terms: he would use his demon powers to fix her little problem, then fulfill her dream of being bred. In exchange, Jane would carry his child, and when the time came, Azalok would take the child away to be raised in hell, where she might never see it again. As much as that thought alarmed her -- she had always wanted to be a mother, after all -- there were other matters that distracted her from worrying about it.\n\nNamely, the fact that she was pretty much constantly horny.\n\nJane had always had a high libido, but it had gone into overdrive since she'd been impregnated. It was as if the demon spawn inside her had put some kind of enchantment on her -- or a curse, perhaps. She'd missed classes for two days straight after her breeding, and most of that had been spent masturbating as she fantasized about her demonic encounter.\n\nTo make matters worse, she hadn't heard from Azalok since her breeding. The hunky demon had promised he'd return to check on her, but that was a week ago, and she had no real way to contact him. He'd even taken down the classified posting she'd found him through originally. Jane wished she could simply text him and say \"come over, I'm horny.\"\n\nSettling into her seat at the back of the lecture hall made her thighs rub together in a deliciously pleasurable way. She bit her lower lip and pushed up her dorky, hipster glasses, sitting up as straight and still as she could. Focus, Jane!, she ordered herself. Quit being such a slut!\n\nShe pulled her laptop from her bag and opened it up, hoping that note taking would force her to concentrate on the lecture. There was a notification on her desktop for a new email, and out of force of habit, Jane clicked it. Then her heart nearly stopped.\n\nIt was from Azalok.\n\nIt read:\n\nDearest Jane,\n\nPlease accept my apology for not contacting you sooner -- I have been unavoidably delayed by pressing underworld matters.\n\nI trust that my spawn is healthy and strong. Although you surely have many questions, I must counsel patience. It would probably be best if you tell no one of our encounter or of your current situation. My kind prefer discretion, and you will likely only invite unwanted scrutiny upon yourself.\n\nI hope that you are well. You may expect a visit from me soon, to assess my offspring's development.\n\nInfernally,<br >Azalok\n\nThe email address read \"azalok@infernomail.com.\" Some rational part of Jane was surprised to learn that Hell had its own email server, but the better part of her conscious mind was fixated on the email's content:\n\n\"You may expect a visit from me soon.\"\n\nIt was all she'd thought about since his first visit last week. The English professor's voice faded into a low background drone, like the adults from Charlie Brown, as Jane relived the experience.\n\nHow stunned she'd been when Azalok showed her his enormous dick, longer than her forearm.\n\nHow she'd tried to suck it and couldn't even fit the head in her mouth.\n\nHow he'd squirted micro-loads of his delicious cum into her mouth and vagina until her body absorbed enough of his hellish energy to become inhumanly stretchy.\n\nHow he'd unloaded several pounds worth of bust on her wall while he fucked her thighs.\n\nHow he'd throated her completely, stretching out her esophagus.\n\nHow he'd penetrated her cervix and made love to her uterus.\n\nAnd finally, how Jane had ridden him to climax, using her whole body to squeeze and stimulate him, until his absurdly huge load had inflated her belly to look nine months pregnant.\n\nJane realized she was grinding her thighs together unconsciously, and that her hands were caressing her gently rounded stomach without her permission. She quickly sat on them to forestall any more funny business. What's the matter with you, Jane?, she demanded of herself. Have some self control!\n\nShe sat at rapt attention, back ramrod straight, hoping that a good posture would create focus. But her eyes began drifting almost immediately to her other classmates peppered around the large lecture hall. There was a cute boy two rows up and about six seats to the left, with a well-tended undercut and stubble dotting his handsome chin. Maybe I could ask him out sometime...\n\nBut no. Regular guys were basically useless to her now. Jane had picked up some rando at a bar three nights after her breeding, hoping a good fuck would slake her wanton lust, but it was no use. After Azalok, the human guy's comparatively small dick had done little to please her. She'd got him off, kicked him out, and then spent the rest of the evening masturbating. I'm ruined for human dudes, she thought. But Azalok will be visiting soon. Maybe I can convince him to rail me out while he's here...\n\nNow her thoughts were turning decidedly dirty again. With a heavy sigh, Jane realized it was no use. She slammed her laptop shut and gathered up her things. Squeezing awkwardly down the row of seats, she earned some dirty looks from the students she passed. Fortunately, the professor made no comment as Jane slipped out the back of the lecture hall.\n\nThe passage outside was nearly silent. Without hesitation, she took off for the nearest ladies room at a brisk walk. It was thankfully empty as well when Jane arrived. She headed for a stall, but paused a moment to look at herself in the mirror.\n\nJane was a somewhat small girl, about 5'8, with dirty blonde hair that went just past her shoulders. Her brown eyes had just a hint of an exotic angularness to them, thanks to being a quarter Japanese on her mother's side. She projected a dorky, quirky modesty in public, accentuated by her thick, blue-rimmed glasses. Generally she wore very little makeup, content with the natural look of her pinkish skin. But her cheeks were flushed beet red now with arousal. Oh my, god, it's so obvious, she thought. How could anyone not know how worked up I am?\n\nJane hurried to the farthest stall from the entrance, locked the door behind her, and hung her backpack on the hook. Inwardly, she thanked the housekeeping staff who kept the university's facilities surprisingly clean and comfortable. Her heart was pounding as she fumbled off her gloves and then struggled with the tight, stretchy waistline of her leggings. Managing to slide them and her panties down over her butt to her knees, she dropped onto the seat. Spreading her legs, Jane sighed happily as cool air washed over her sex. Alone at last, she could finally relieve the pressure that had been building between her legs during class.\n\nUsing the pointer finger of her right hand, Jane rubbed up and down the length of her slick, puffy vulva. She avoided her clit for now, though she could feel it engorged and throbbing from beneath its little hood. With her other hand, Jane reached under her sweater and undershirt to feel her own baby bump. The life inside moved slightly in response, and she could swear she actually felt it grow, just a bit.\n\nThe idea of a demonic fetus growing inside her womb way faster than it should alarmed Jane, but it also turned her on immeasurably. For years she'd thought there was no hope of ever getting pregnant, of feeling herself swell with child, but Azalok had fixed the problem with her reproductive organs. No problem too great that a healthy dose of demon cum can't fix it, she thought, then giggled out loud to herself. She froze for an instant, hoping no one heard her, but the bathroom was deserted.\n\nJane shrugged off her coat and let it fall in a crumpled heap on the tile floor. Next she rolled her sweater and undershirt up over the swell of her tummy, until her lacy, magenta bralette was exposed. Usually a hearty B Cup, Jane's tits had swelled almost painfully in the last few days, until her usual roster of regular wire bras became simply too tight. As it was, her bralette was straining to contain her growing breasts. She pulled that up as well, suppressing a groan of relief as her tits spilled free. Little beads of milk, an unnatural silvery color, formed at the tips of her achingly pointed nipples.\n\nWith a cautious movement, Jane gave one tender nipple a gentle squeeze, and was rewarded with a drizzle of silvery milk rolling down the swell of her breast. The pressure in it slaked immediately. Catching the runny substance on her fingers, Jane brought it to her mouth and captured it with her tongue. She closed her eyes, savoring the taste of her milk. It was a sweet, heady flavor, similar to Azalok's caramel-flavored cum, but with a creamier taste. Jane milked her breast gently, consuming all the liquid it produced until it was mostly empty, then switched to the other one. When she was finished, her mind was buzzing, intoxicated by her own magic-infused lactation.\n\nShe'd avoided her pussy while she milked herself, and now it was veritably throbbing, blood pounding in her loins, vulva engorged and shiny with moisture. Jane cupped her pubic mound, shuddering as her palm stimulated her clit through its hood. She parted her outer lips, revealing the soft pink labia minora within, and plunged two fingers into herself, curling them towards the roof of her vagina where it was most sensitive.\n\nJane imagined what Azalok would do when he arrived. Would he let her suck his cock? Would he fuck her thighs again? Would he make love to her? Could he, with his monstrous cock and a baby growing in her womb? Perhaps if they were gentle, and very careful... although she wanted him to be anything but gentle with her.\n\nOf course, there was always anal...\n\nJane's sex throbbed and convulsed in response to that wicked thought. She'd done anal a few times with guys, and she didn't hate it, although it could be pretty uncomfortable without proper preparation. But with Azalok's stupendous size, would it even be possible?\n\nShe was willing to try. Admitting that sent a dirty thrill up her spine.\n\nAt last, she let herself touch her clit, spreading her nether lips wide and letting the swollen pearl peek out from its hood. She made rapid little circles on it, driving herself swiftly towards the brink.\n\nFuck me, Azalok, she begged silently. Fuck my pussy. Fuck my ass. Fill me with cum, so much cum, gallons of it. Oh god, oh god, oh god...\n\nJane bit her lower lips hard, unable to stifle a moan as her orgasm hit like a truck. Her whole body felt hot and tingly, and her thighs quivered out of control. Tilting her head back to ride it out, she felt her cunt clamp down hard on her fingers. Even more silvery milk leaked out of her tits, which shook and bounced with the convulsions coursing through her body. It dripped down onto her swollen belly, and ran in little rivulets across it. The entire time, Jane continued rubbing her sensitive pearl, prolonging her climax, until the pleasure became too intense. She pulled her hands away, clenching her thighs, and fell against the side of the stall with a thud, breathless.\n\nAfter taking a minute to catch her breath, Jane pulled out her phone. Switching it to camera mode, she angled it to take a selfie. Seeing herself reflected in the camera window on the screen, Jane was stunned by how slutty -- almost trashy -- she looked right at that moment. Her dirty blonde hair was dishevelled, her cheeks were flushed, and her smudged glasses had slid halfway down her nose. Her belly was glistening with sweat and the trails of milk running from her ripe breasts. Her pussy shone with wetness as well, as did the trim thatch of light brown hair above it. Finding a good angle, and turning her lips into what she hoped was a sexy pout, Jane snapped a few pics.\n\nSince going away to college, she'd begun experimenting with taking nudes for the internet. Jane's libido had always been high, and it started as a way to turn herself on -- the idea of random dudes blowing their loads to her pics always sent a thrill through her. Soon she'd developed a small but loyal following, and realized there was money to be made. For fans willing to donate, Jane put out more risque content, including GIFs and videos, though she was usually careful to hide her face or other identifying information.\n\nThis pic really ought to get those perverts going, she thought to herself. Her fans knew all about her breeding fantasies, though she had yet to announce her pregnancy to them. This pic, with her baby bump now clearly visible, seemed like the perfect way to break the news. Thinking about it sent another blissful tremble up her spine.\n\nJane cleaned herself up, wiping the slick from her between her legs and the excess milk from her stomach and breasts. With some effort, she pulled her magenta bralette back down over her heavy tits, which no longer felt quite so aching. Sliding her sweater and undershirt over her stomach, she could swear it felt just a little bit tighter than it had a few minutes ago. Lastly she hiked up her panties and tights, arranging her outfit until everything was in place, and exited the stall.\n\nJane could see herself in the mirror again on her way out, and noted her cheeks were still flushed. She splashed some water on her face from the tap, but it did little to alleviate her disheveled appearance. Sighing, Jane stepped back out into the hallway.\n\nHer class was over by now -- she'd have to see if she could get notes for the section she missed. Hell, I could use notes for the entire meeting, it's not like I was paying attention. Students were flooding the halls again, and Jane made her way back out onto the quad, debating about whether or not to attend her next class, a freshman-level composition course. As she was walking beneath the bare tree branches, head in the clouds, a voice called her name.\n\n\"Jane!\"\n\nStartled, she looked up to see her best friend, Alahna, who'd sighted her across the quad and was headed her way fast. Jane's heartbeat quickened. After ducking Alahna all week, she knew she had some serious questions to answer.\n\nAlahna was a striking woman who stood out from the crowd of students on the quad. At 6'1, she was rather tall for a girl, and intimidated many shorter men. Originally from New Zealand, she'd lived in the US for years, but still retained her charming Kiwi accent. Being of mixed race, with more than a little polynesian in her background, Alahna had beautiful mellow-brown skin. Her brown eyes, appearing almost amber in the sunlight, radiated warm intelligence, and her generous lips were full and expressive. Lusciously long and straight black hair fell past her shoulders. A bit of a tomboy, Alahna wore a simple pair of lavender sweatpants and a matching hooded sweatshirt which bore the logo of Great Midwestern University (Go Rivermen!). The somewhat-baggy garments did little to hide Alahna's curvaceous butt and stunning D-Cup breasts, which Jane had always been a little jealous of. A lot of male attention tended to fall towards the gorgeous, outgoing New Zelander, something which Jane envied, but it never got in the way of their friendship.\n\n\"There you are, Jane!\" said Alahna, drawing near. \"I've been worried sick about you.\"\n\n\"Hey, Alahna,\" Jane answered meekly. She felt abashed at barely speaking to her bestie throughout the week.\n\n\"You look absolutely knackered,\" said Alahna. \"What's up with you?\"\n\nJane bit her lower lip, considering just lying and making an excuse -- after all, Azalok had cautioned her to keep his existence a secret. That last thing Jane needed was her demonic baby daddy pissed off at her.\n\nBut it was impossible to lie to Alahna. The brown-skinned girl was sort of the matriarch of their friend group, and always knew when something was wrong. She could be a bit pushy at times, but it came from a place of genuine concern and affection. After meeting at freshman orientation back in August, Jane and Alahna had bonded over their shared love of Dire Straits, and they'd been inseparable ever since.\n\nTime to come clean, thought Jane.",
        "Tears formed at the corners of her eyes, and then all the secrets and emotions she'd been holding in burbled out.\n\n\"I'm sort of in major trouble, A,\" Jane blurted out, trying to keep her voice from breaking. \"It's all so weird and fucked up and I can't talk to anyone cause they'll think I'm nuts.\"\n\n\"Whoa, whoa, slow down, love,\" said Alahna soothingly, putting her hands on Jane's shoulders. \"I've got your back, you know that. Whatever it is, we'll figure it out.\"\n\nJane nodded, sniffling, so grateful to finally be able to talk to her best friend.\n\n\"So what is it?\" pressed Alahna. \"You didn't kill someone did you? I mean, I'll help you cover it up if you did, but I'll strongly disapprove.\"\n\nJane let out an unattractive snort of laughter. \"No, I didn't kill anyone. I don't want to talk here, though. Come to my place after class?\"\n\n\"Of course,\" said Alahna. \"Want to ditch class and go now? I'm done for the morning -- I was just going to hit the gym for a quick workout and then back to my place to wash up, but it's no big deal if I skip that.\"\n\n\"No,\" said Jane, shaking her head. \"It's okay, dude, you go do your workout. I should really go to my next class. Want to just come by when you're done? I'll leave the door open for you.\"\n\n\"Yeah, absolutely. See you then.\"\n\nAlahna pulled her into a firm squeeze, which Jane was grateful for, though she worried her friend might feel the baby bump beneath her layers of clothing. But if Alahna picked up on it, she didn't react. After exchanging goodbyes, they parted ways. Jane headed off towards her next class, determined to make it all the way through this time.\n\n~~~~~~~~\n\nAn hour and a half later, Jane gratefully slammed the door of her studio apartment closed, exhausted for her Herculean effort of paying attention all through her Comp class. It was at least a little more engaging than the Lit lecture she'd ditched before it, but she was absolutely shattered and growing hornier by the minute. A quick snack and then a shower seemed like just the thing to relax her before Alahna arrived.\n\nJane tossed her backpack and coat on the floor beside her desk, and immediately began stripping out of her clothes. Boots and hat came first, followed by sweater, leggings, and undershirt, until Jane was wearing only a thin pair of cotton panties and her lacy magenta bralette. She happily stroked her baby bump as she headed for the kitchenette.\n\nAlready grinning with anticipation as she opened the fridge, Jane withdrew a large reusable water bottle filled to the brim with a dark, goopy substance. She unscrewed the top and popped a metal straw into the top, giving it a few stirs before wrapping her lips around the straw. It took a few hard, cheek-hollowing sucks before the thick, pudding-like stuff hit her mouth, and she made a happy mmm sound as the rich, sea-salt and caramel flavor rolled across her tongue. Though it was cool and fresh from the fridge, the decadent substance produced a pleasant warming sensation as it slipped down her throat, sort of like drinking a heady spirit. Already it's mind-altering effects were taking hold, but this was no alcoholic beverage.\n\nIt was demon cum.\n\nAfter Azalok's last visit, Jane had coaxed him into hosing down the wall of her apartment with an spectacular thirteen-rope nut, and she'd gathered that excess spending to enjoy later, filling four huge bottles to the brim. A dark, blotchy stain remained on the powder-blue wall beside her bed where Azalok had unloaded, looking like some kind of abstract artwork. She'd elected not to clean it up, so it could remain as a lewd reminder of their night together.\n\nUnfortunately, this was the last of Jane's stockpile. She'd drunk up the rest rather quickly, and had put off consuming this last bottle as long as possible, but after the morning she'd had, she could no longer resist. And when Azalok comes to visit, maybe I can convince him to give me more. He hadn't said when he was coming, exactly, but Jane hoped it was sooner rather than later.\n\nShe skipped to the bathroom and cranked the shower handle to 'hot,' letting the small bathroom fill up with steam as she sucked down more of the delicious cum. After the chilly day outside, she was ready to enjoy a scalding hot shower that warmed her skin while the demon semen smoothie warmed her insides. Setting her bottle down on the shelf that straddled the commode, Jane peeled off her bralette and panties and removed her glasses. With a satisfied sigh, Jane slid open the shower door and stepped under the high-pressured stream of hot water.\n\nAll the tension from that morning seemed to melt away. Jane didn't even bother soaping up, but just let the water cascade over her upturned face, eyes closed, savoring the moment. The heat from Azalok's preserved essence was pooling in her belly, and gradually radiating out to the rest of her body. Silvery milk beaded at the tips of Jane's erect nipples, and she couldn't resist fondling her own breasts, kneading them gently to relieve the pressure and watching her milk mix with the water as it ran down her curvy tummy. Unable to resist the ache in her loins any longer, Jane allowed a hand to stray between her legs and cup her mound ever so gently...\n\nAnd then she nearly jumped out of her skin as she heard the door of her apartment slam.\n\nOh my god, she thought, her mind immediately going to burglars or worse. But then she heard Alahna's familiar Kiwi accent calling from the main room, \"Hey, Jane, it's me!\"\n\n\"In the shower!\" Jane called back, cracking the frosted-glass sliding door just a bit so she could lean out.\n\nShe hadn't expected her friend so soon, but she was grateful it wasn't some psycho. The door to her bathroom opened a few moments later and Alahna poked her head into the steaming room.\n\n\"Hey, love,\" said Alahna. \"I decided to come over straight away after the gym. You seemed so out of sorts, so I didn't bother to go home and clean up first.\"\n\n\"No worries,\" replied Jane. \"I really needed a hot, relaxing shower after this morning. I'll be out in a few.\"\n\n\"Sure,\" said Alahna. But when she didn't close the bathroom door immediately, Jane sensed her friend had something else on her mind. \"Umm, actually... I did two miles on the treadmill and I'm an absolute sweaty mess. Would you mind if I hopped in there with you?\"\n\nIt wasn't an unusual request. Jane and Alahna were totally comfortable with each other, and had seen each other naked plenty of times. They had showered together on several occasions, generally when they were both pressed for time and needed to wash up in a hurry. Jane's only hesitation now was that Alahna might notice her baby bump... but since Jane had planned to tell Alahna the whole story anyway, she didn't see the harm. And anyway, given their history together, it would be weird if she refused.\n\n\"Come on in,\" said Jane, forcing herself to smile nonchalantly. It's Alahna, she reminded herself. What am I afraid of?\n\nJane got back under the spray and started lathering up a loofa. Through the frosted glass, she could see Alahna undressing. The tall, brown-skinned woman pulled off her hoodie and shimmied out of her sweatpants. A tight black sports bra came next, and then she bent over to slide off her underwear. Jane realized she was staring at her friend's silhouette, the loofa forgotten. What's gotten into me?, she thought. Jane wasn't really into girls, besides a few drunken smooches at parties, and never before had she thought of Alahna that way. But for some reason, perhaps the heat of Azalok's ensorcelled essence resting in her belly, she was suddenly much more aware of her tall, gorgeous friend's body than ever before.\n\nTurning back into the spray, Jane forced herself to concentrate on soaping up her body. With her back facing the door, she hoped not seeing Alahna get into the shower would help keep these new, intrusive thoughts at bay.\n\n\"What's this, a smoothie?\" asked Alahna. Jane realized with a start that she'd left the bottle of Azalok's cum sitting on the shelf above the toilet, and before she could say anything, Alahna had picked it up and slurped up a mouthful. \"Yum,\" she commented. \"Caramel and sea salt? Ooo, it tastes boozy, too, you naughty girl.\"\n\nOh fuck, thought Jane. I just let my best friend drink demon cum.\n\nFrozen and unsure of how to explain the situation, Jane forced herself to look away as the shower door slid open again and Alahna stepped in. Risking a backwards glance, Jane glimpsed Alahna's stunning figure as she slipped into the shower stall behind her. She'd brought the \"smoothie\" with her, and set it down in one the baskets suction-cupped to the shower wall after taking another huge swig of it.\n\n\"That's really tasty,\" Alahna commented. \"Hey, let me get under the water!\"\n\nTongue-tied and feeling very vulnerable, Jane shimmied past her friend as they traded places, back facing Alahna. Jane's butt brushed her friend's skin as they passed one another, sending a tingle of electricity across her nerves.\n\n\"Ahhhh,\" sighed the taller girl as she got under the spray, letting it wash down over her. Alahna was facing the showerhead, leaning her head back to let the spray wash over her, and Jane got a good look at the smooth, ochre skin of her back, now glistening with moisture. Water ran in rivulets down the New Zealander's long black hair, trickled from the tips, and cascaded down her back towards the generous curves of her athletic bottom. Alahna's ass was truly dynamite, taut yet exquisitely huge and curvy, the butt of a world-class model. It was one of the many ways Jane was envious of her friend, but admiring it now gave Jane something other than envy. She had the powerful urge to reach out and squeeze her friend's ass, and it took all her willpower to resist it.\n\nAs Jane was lost in staring at Alahna's perfect rear, her friend spun around suddenly, treating Jane to the front-side view as well. Alahna's eyes were still shut to keep the water out as she leaned back into the spray, so she didn't see Jane's embarrassed blush or gobsmacked jaw dropping open at the sight of Alahna's fabulous rack glistening with moisture. Jane had seen her friend's breasts plenty of times before, but until now she hadn't realized how perfectly firm and attractive they were. Two heavy, teardrop-shaped D-Cups, they had a gravity-defying quality that kept them firm and high above her toned, athletic midsection. Alahna's nipples were a slightly darker shade than her mellow-brown skin, with wide areolas. Jane's own nipples were small, pink, and perky -- though they'd grown considerably over the last week.\n\nBetween Alahna's legs was a mound shorn of hair, unlike Jane's, who liked to keep her pubic hair short and cute. Unable to help herself, Jane stared lewdly at the athletic girl's prominent vulva, dripping with water. The outer lips of Alahna's sex had just a bit of extra plumpness that made them seem very ripe and attractive. Jane had a perverted impulse to fall on her knees and plant a gentle, sensual kiss on Alahna's lovely cunt.\n\n\"Hand me the loofa, will you?\" said Alahna, snapping Jane from her reverie. She fumbled for the soapy object in question and passed it to her friend, who set about lathering up her arms, tits, stomach, and legs. Jane watched intently, her sex throbbing with arousal as Alahna grew slick and oily with suds. Noticing the bottle of demonic essence in the basket nearby, Jane took another heady gulp of it, smacking her lips happily.\n\n\"Ooo, let me have some more of that,\" said Alahna. She leaned forward, eyes still closed, and parted her expressive lips in expectation. Jane angled the metal straw and fit it into the aperture of the taller girl's waiting mouth, watching her sensuous lips close down around the tube. She sucked greedily, throat flexing as she swallowed one, two, three gulps of the stuff. Oh my god, she thought, I'm feeding my best friend demon cum. I'm so going to hell... as if I wasn't already. The whole process felt decidedly erotic to Jane, and she got even more turned on watching Alahna lick her lips happily when she'd had enough.\n\n\"I could get addicted to this!\" said Alahna. \"What's in it, anyway?\"\n\n\"Ummm... I'll show you later,\" Jane managed to say.\n\nAlahna shrugged and turned around again to face the showerhead. She offered the loofa backwards towards Jane and said, \"Do my back, please?\"\n\nTaking the offered sponge, Jane scooted forward towards her best friend's nude back. Feeling a bit hesitant, but entranced by the intimacy of the situation, Jane began scrubbing Alahna's smooth back in slow, lazy circles. While her right hand did the scrubbing, her left held onto Alahna's shoulder for support, and even that little bit of skin-on-skin contact was electrifying.\n\n\"That feels nice,\" said Alahna, sighing. Then she let out a childish giggle. \"I... feel a little funny. Kind of like I'm drunk but... warmer? Whatever was in that smoothie, it's making me feel really good. Hey, Jane, do you think you could... wash my butt?\"\n\n\"Of course,\" said Jane, trying to keep the cloying lust from her voice. She's your best friend, Jane, she scolded herself inwardly. Get it together! But as Jane soaped up Alahna's voluptuous ass, she could feel heat building up inside her, the sexual urges in her brain getting harder to resist. \"Do you want me to...\" Jane trailed off, hesitant to ask what was on her mind.\n\n\"What?\" asked Alahna, and her tone suggested intrigued curiosity at whatever Jane had in mind. \"Spit it out, dude.\"\n\n\"Should I wash your breasts?\"\n\nAlahna giggled and half turned her head, her mouth agape in mock outrage. \"Jane! How naughty!\"\n\nBut the Kiwi turned the rest of the way around to face her bestie. She arched her back and thrust her heavy, ripe tits forward, their beautiful ochre flesh glistening with water.\n\n\"I got them all sweaty earlier, so you'll have to scrub nice and hard,\" said Alahna, her tone playful.\n\nJane squeezed more shower gel onto the loofa and lathered it up until it was overflowing with suds. Making eye contact with her best friend, she dragged the sponge through the valley of the taller woman's breasts. Jane could see a little shudder go through Alahna. She must be really sensitive there, thought Jane. Interesting.\n\nAs Jane soaped up the tops of Alahna's magnificent breasts, the Kiwi reached over to the shower basket and grabbed the bottle of cum. Jane watched her slurp three huge gulps from the bottle, leaving about half remaining. Then Alahna angled the straw so Jane could have a drink too. She swallowed it greedily, relishing the sweet and salty taste and the pleasant warmth as it sank towards her stomach. They passed the bottle back and forth, thirstily quaffing the potent essence, until it was all gone. Alahna got the last bit of it, her cheeks hollowing as she captured the last drops.\n\nBy now Jane was burning with barely-controlled lust, cranked up to maximum by consuming so much of Azalok's cum. Alahna, though she didn't know it, was suffering the same effects, judging by the flush in her cheeks and the quickness of her breathing. Jane dropped the loofa and began massaging Alahna's fantastic breasts with her hands. They were greasy with soap and felt soft and pliant beneath Jane's fingers. The New Zealander didn't object, but instead moaned happily, bracing herself on the shower wall with one hand as her legs began to quiver. Jane gently tweaked Alahna's magnificently erect nipples, and now her bestie yipped at the intense stimulation. She really does have sensitive tits, thought Jane. Good to know.\n\n\"Oh Jane, that feels so good,\" cooed Alahna.\n\n\"It really does,\" Jane agreed, although a faint feeling of guilt cut through her hazy mind. \"Is this weird though?\"\n\n\"No,\" said Alahna. She stopped her writhing and looked down into her shorter friend's eyes, smiling affectionately. \"I mean, it is weird, but in a good way. You're my best friend, Jane. I like getting weird with you.\" Her eyes flickered down to Jane's belly, which was obviously bulging out quite a bit more than usual. \"But, Jane, I have to ask -- what's going on with your tummy?\"\n\nWell, here we go, thought Jane. The intimate moment was broken as Jane stepped back to give Alahna a clear view of her baby bump.\n\n\"Surprise!\" said Jane, doing some silly, ironic jazz hands. \"I'm pregnant.\"\n\n\"Oh my god!\" shrieked Alahna. Jane was pulled into a tight, affectionate hug by her best friend. \"Congratulations, Jane! Ahhhhhhhhh!\"\n\nJane just sighed into the embrace, relieved beyond measure at Alahna's unconditional acceptance. She had been so afraid so some kind of rejection or judgment, but of course Alahna had her back. A few tears of relief leaked from the corners of her eyes as she mumbled thanks into Alahna's collarbone.\n\n\"But how did this happen?\" asked Alahna, disengaging the hug but keeping her hands on Jane's shoulders as she considered the situation. \"I thought you... you know... couldn't.\"\n\n\"It's a long story,\" said Jane. \"Let's dry off -- you're going to want to sit down for this.\"\n\n~~~~~~~\n\nAlahna shook her head incredulously. Unbelievable, she thought. As in, I literally do not believe it. Alahna loved Jane like a sister, but she knew the shorter girl was prone to wild hairs and flights of fancy. Whatever she'd gotten herself into now, it went beyond any of the nutty schemes her bestie had dreamed up before.\n\n\"A demon,\" said Alahna. She frowned and wrinkled her brow, regarding her best friend with a skeptical stare. \"You're telling me you got knocked up by a demon.\"\n\n\"Well... yes.\"\n\n\"And that I just drank demon cum.\"\n\n\"Umm... also yes.\"\n\nAlahna lounged in Jane's computer chair, wearing a borrowed cream-colored bathrobe which was far too small for her and barely cinched closed over her tits. The hem scarcely covered her butt. Alahna was too tall and busty to fit into any of Jane's clothes, and hadn't felt like throwing her sweaty gym togs back on yet, so the robe would have to do for now. Jane, meanwhile, was sitting on her bed, legs crossed, wearing a blue camisole and a pair of soft pajama bottoms.\n\nJane had just finished relating an incredibly filthy tale of how she'd had sex with a hellishly-hung demon called Azalok. The story was wild -- insane. A guy that can ejaculate a gallon of cum? A dick longer than Jane's forearm? She even claimed this dude had penetrated her cervix during sex, and stretched out her womb with nut. Alahna was no prude when it came to sex, but the story seemed not only extreme, but downright impossible.\n\nTo make matters worse, as ridiculous as it was, Alahna was struggling against her own ignited libido as she listened with rapt attention to the debauched narrative. The smoothie Jane had shared with her, whatever it was, had gotten her insanely hot and bothered in the shower, to the point where she'd allowed, even asked Jane to fondle her. I must be going mad or something. Her ardor had cooled a bit after Jane's surprise pregnancy reveal, but after listening to the story, she'd heated back up considerably, and was making a conscious effort not to grind her thighs together.\n\nThis was all not to mention the fact that Jane claimed to have been pregnant for only a week, despite looking like she was going into the second trimester. Alahna had seen Jane recently enough to know that her bestie shouldn't have been this far along yet, but... surely there was a rational explanation, right?\n\n\"Jane... you know I will always have your back,\" said Alahna. \"But... it's all a bit hard to accept, isn't it?\"\n\nHer bestie bit her lower lip. There was a guilty, mischievous look in Jane's lovely brown eyes, ever-so-slightly angular. Alahna knew that look. She's got another surprise for me.",
        "\"I know how it sounds,\" said Jane. \"But the thing is... I've got receipts.\" The shorter girl stood and crossed over to the computer desk. Alahna used her feet to push the rolling chair aside, giving Jane access to the keyboard. With a few clicks, Jane had queued up a video file on her monitor.\n\n\"You know how I have my e-girl side gig, right?\" asked Jane.\n\n\"How could I forget?\" asked Alahna, rolling her eyes. \"You let thousands of random dudes bust their nuts to you.\"\n\n\"It's actually very intimate and artistic, thankyouverymuch,\" said Jane with a huff. \"Besides, I get off on it.\"\n\nAlahna had never quite understood Jane's e-girl hustle, masquerading as \"Madrigal_Counterpoint\" on various websites and apps. She tried to be supportive, but it all seemed so exhibitionist. Alahna dated quite a bit, but she was more of a get-to-know-you, sex-on-the-third-date kind of girl, whereas Jane was more into hook-ups. Alahna didn't even like to kiss a guy until she was feeling pretty serious. In fact, there were several dudes she'd fucked the shit out of but never kissed at all. For her, kissing was special, something she saved only for people she really cared for.\n\nNew friends were often surprised to learn that tall, buxom, athletic Alahna was the more conservative of the pair when it came to sex, and that cute, dorky, hipster Jane was downright freaky in her private moments. Although Alahna got the lion's share of the attention at parties with her classical good looks, Jane was more often than not the one who went home with a guy afterwards.\n\n\"Well, anyway,\" Jane continued, \"I was recording something before Azalock came over that night, and I accidentally left my camera on, soooo...\" As Jane trailed off she clicked play on the video. The two girls watched as Jane's record of that night began to play out. At first it was just Jane sitting nude in her computer chair, looking intently at the monitor and typing occasionally. Then she stood up and climbed into bed. Soon after, a knock came at the door, rousing Jane from bed. The petite girl disappeared from the frame for a minute, and muffled conversation could be heard. Then the door opened, and Jane re-entered the room, accompanied by a male stranger.\n\nThe guy's back was to the camera, but he looked good from the rear. Clad in dark blue denim pants, a black leather jacket, and with jet-black hair swept back, his fashion sense was a bit behind the times, but in an un-self-conscious way. He was powerfully built, that much was clear, and towered over the smaller Jane. As she walked away to get drinks from the fridge, the man finally turned around to face the camera.\n\n\"Oh my god, he's hot!\" exclaimed Alahna.\n\n\"Right?\" said Jane.\n\nAzalok had a light dusting of dark stubble across his masculine jaw. His lips were expressive and sensual, with just a bit of a sardonic curl as he inspected the room. It was hard to tell his age -- late twenties or early thirties, Alahna guessed, but there was an ageless quality to his features. Beneath thick eyebrows were two piercing, cobalt-blue orbs that flashed with keen intelligence. They seemed to gaze straight through the monitor and into Alahna's soul.\n\n\"Okay,\" said Alahna. \"Who is this guy and does he have a brother?\"\n\n\"Just watch,\" said Jane.\n\nThe shorter girl retook her place on the bed as the scene on the computer screen played out. After a bit more conversation, Azalok stood and commenced undressing. As before, she could only see him from behind at first. Still, as he peeled off his tight black shirt and doffed his jeans, Alahna was treated to a toned back, muscular legs, and the firmest, tightest ass she'd ever seen on a man. Between his slightly-spread legs, the outline of his penis and balls were visible, and even from behind their size seemed outrageous. Alahna was suddenly more aware of the hot substance in her belly, and that it had supposedly all come from this guy on the screen. Her heartbeat quickened, and the effort to resist the ache in her sex became almost unbearable.\n\nOn-screen, Jane undressed as well. As she knelt down and prepared to give oral sex to her gentleman caller, Azalok finally turned to the side an revealed a positively gigantic erection.\n\n\"Fucking hell, that's a huge cock!\" the Kiwi girl burst out. \"I didn't know they made them that big!\"\n\n\"Apparently, in hell they do,\" replied Jane.\n\nIt was, without a doubt, the biggest cock Alahna had ever seen. Jane hadn't lied about its titanic size, easily a bit longer than Jane's forearm, and probably a bit thicker as well. Supporting it from below was a pair of enormous balls, bright red in hue and the size of oranges. Alahna thought she could actually see them roil and quiver with the enormous load they carried.\n\n\"I think I'm starting to believe,\" muttered Alahna.\n\nOn-screen, Jane struggled with Azalock's ridiculously large dick. The bulbous, apple-shaped head of it wouldn't even fit in her mouth, so Jane suckled on the tip, licking up the dark, oily pre-cum that beaded at the slit. Alahna gave an \"ohhhhhh,\" of recognition at the substance she'd just consumed about sixteen ounces of.\n\n\"You are so bad, Jane,\" chided the athletic girl, adopting a scolding, motherly tone. \"I can't believe you let me drink that without telling me what it was.\"\n\n\"I know, I know,\" said Jane. \"But you seemed to enjoy it.\"\n\n\"Yeah, but now I'm all hot and bothered,\" said Alahna. \"And this amateur porn you're showing me isn't helping.\" She rotated the chair and looked Jane straight in the eyes. Seeing the lust in her friend's brown orbs, Alahna remembered their fondling in the shower vividly. Jane's hands had felt incredible on her soapy tits. It was too bad they'd been interrupted...\n\n\"Want me to turn it off, then?\" asked Jane playfully.\n\n\"No way,\" said Alahna. \"But something's gotta give or I'm gonna explode.\" The brown-skinned girl couldn't help biting her lower lip and rubbing her thighs together beneath the short hem of the bathrobe. Intoxicated by the potent essence she'd drunk, which was exacerbated by the sexual tension in the room, Alahna was suddenly feeling very liberated. Maybe Jane's lifestyle is rubbing off on me...\n\n\"You can touch yourself,\" said Jane, as if reading her mind. \"I don't mind.\"\n\nThe New Zealander cocked an eyebrow suggestively. \"Oh yeah?\" she asked playfully. \"I bet you'd like to watch me.\"\n\n\"Maaaaybe,\" Jane answered, flashing a provocative grin. The smaller girl unconsciously fiddled with the hem of her camisole.\n\n\"Ask me nicely,\" commanded Alahna, taking a parental tone. She enjoyed being in command of the situation. The effort to resist touching her needy sex was excrutiating, but she knew hearing Jane beg would make it better.\n\n\"Pleeeeease, Alahna,\" her friend sweetly pleaded. \"I really want to watch you jill off. You looked so sexy in the shower. Please let me see you touch your pussy, A. Please please please?\"\n\n\"Oh, very well,\" said Alahna with a dramatic sigh. She lazily untied the belt of the cream-colored bathrobe and slid it open sensually, aware of Jane's eyes on her as she exposed her luscious ochre skin to her best friend. Alahna's dark nipples were painfully erect, and the lips of her vulva, usually on the plump side anyway, were now heavily engorged. Using two fingers to spread her labia slightly, Alahna treated Jane to a view of the pink inner flesh of her sex.\n\n\"If I'm going to masturbate, you have to do it too,\" said Alahna. Her voice was husky, and she was breathing heavily. \"Otherwise I'll feel weird.\"\n\n\"Oh, of course,\" said Jane, giggling and going along with bizarre logic in Alahna's lewd suggestion. Because if we both masturbate, then it won't be weird, thought Alahna. Right.\n\nJane shimmied her pajama bottoms down to her knees, exposing her adorable little pussy. The prim nether lips of her cute sex were visibly soaked, and a little wetness had even moistened the crotch of her bottoms. My best friend and I are about to watch each other jill off, thought Alahna. Just normal college stuff in America. Yep.\n\nAlahna started with slow, lazy circles over her pink clitoris, which had swollen to peek from its hood. Jane mirrored her movements, and their eyes were both drawn from each other, back to the computer screen. Azalok had put just the tip of his cock inside on-screen Jane's tiny pussy, and, using inhuman control, he fired a single blast of cum into her as Jane came like an animal.\n\n\"Oh fuck, you and him look so hot together,\" said Alahna. \"How did his cum feel inside you?\"\n\n\"Incredible,\" said Jane in a breathy voice. \"So hot and sticky. It came out with so much force, like it was attacking my cervix.\"\n\nThe dirty description had the desired effect on Alahna. Breathing with labored intensity, Alahna could feel an orgasm closing in. Their teasing in the shower had gotten them both worked up, and Jane increased the pace of her own ministrations as well, feeding off Alahna's sexual energy. Flicking her eyes from her sweaty, panting bestie, and the lewd display taking place on the monitor, Alahna knew it wasn't going to take much to send her over the edge.\n\nShe slowed down her stroking, not wanting to finish just yet. The video played out as Alahna edged. Keeping herself on the brink, Alahna watched Jane and Azalok go through a variety of positions. Her bestie sucked and fucked the demon until she ended up riding him, the outline of his monstrous cock visible inside her. When Azalok finally nutted, Alahna could actually see Jane's stomach distending as the demon fired one spurt and after another, packing a literal gallon of cum into her womb.\n\n\"Oh you slut, Jane!\" cried Alahna, trembling as little quivers of pleasure went through her body. \"That was insanely hot. Look how full your belly is.\"\n\n\"It's not nearly that big right now,\" said Jane, pulling up her camisole to show off the tight, pink flesh of her baby bump. \"But it's getting there.\" Jane moaned sexily and rubbed the taut skin of her stomach. \"His little hellspawn is growing fast.\"\n\nLittle droplets of a silvery, milk-like substance leaked from Jane's painfully erect nipples, forming two little wet spots on the front of her cami. Jane raised the thin garment up farther, until her milk-laden breasts popped free. Normally an adorable B-cup, Jane's tits were swollen now, pink nipples elongated, an attractive web of light blue veins spreading from them. Jane squeezed one of her nipples, sending a steady trickle of the shiny liquid down her front. The smaller girl sighed in relief, as though she'd released a pressure valve.\n\n\"Oh my God, Jane, your tits are insane. You look so hot milking yourself. God, you're glowing with motherhood, it's gorgeous. Fuck, fuck yes, keep doing that, I'm going to come!\"\n\nAlahna increased the pace of her jilling, on the edge of a huge orgasm after edging herself throughout the video. She locked eyes with Jane, who had moved on to milking her other ripe breast while frantically rubbing her sensitive little clit.\n\n\"Me too,\" panted Jane. \"Let's do it together.\"\n\nAlahna reached a finger up and dragged it down the sensitive valley of her breasts. Her breath caught at the sensation, pushing her right up to the precipice. She took one of her heavy breasts in hand and tweaked her over-sensitive nipple, triggering an explosion of pleasure in her core. Her athletic abs tensed up hard as her orgasm hit and Alahna curled forward as her muscles tightened up. A throaty gasp of pleasure escaped her throat and turned into a guttural cry. Jane's climax hit a second later, and the petite girl yelped with passion as her thighs quivered uncontrollably. Watching the way Jane struggled with the violent twitching of her unruly thighs sent Alahna into the stratosphere.\n\nThe intensity became too much to bear, and the two girls finished at nearly the same time. Jane leaned back on the bed, gasping for breath, while Alahna melted into the computer chair, her sweaty flesh sticking to the material. With a weak, trembling hand, Alahna reached over and hit pause on the video, where on-screen, Jane had passed out.\n\n\"This... video...\" said Alahna between gasping breaths. \"Is... the hottest... thing... I've ever... seen.\"\n\n\"It was nuts,\" Jane replied, her voice sounding breezy and winded. \"I'm still reeling from it, Alahna. His cock was like a freight train. I don't think I can go back to normal guys after that.\"\n\nAs they caught their breath, Alahna couldn't help but gawp at her friend's cute body. Jane hadn't bothered to pull her bottoms back up, and her attractive little vagina was still exposed to the air, wet and puffy and still pulsing now and then with aftershocks. Alahna had the sudden urge to walk over there and bury her face in Jane's pretty cunt.\n\nWhere the fuck did that thought come from?, thought Alahna, stunned at her own lecherous impulses.\n\nFondling in the shower and watching each other masturbate was weird -- but not that weird. So far they could chalk it up to dumb stuff you do in college. But if one thing led to another... Alahna swallowed hard. Am I really thinking about having sex with Jane?, she thought.\n\nAlahna shook her head, willing the horny fog to clear. Now that she'd come, she was having some post-orgasmic clarity. Rubbing her forehead, Alahna forced some rational thoughts to cut through the magically-induced haze. What the hell got into me? She mentally took stock of the situation: her best friend was pregnant, the baby was growing supernaturally fast, and the father was a demon she hardly knew...\n\nAlahna's protective instincts kicked in.\n\nSitting up straight, Alahna cinched the bathrobe closed, adopting a firm posture. Even though Alahna was only three months older than Jane, the New Zealander felt very protective of her American friend. Jane was prone to leap before she looked, especially when it came to men. Alahna saw it as her duty to take care of the shorter girl. She sat up and adopted a practiced attitude of half-tender, half-scolding.\n\n\"Wait a minute,\" said Alahna. \"This guy is an actual demon from hell, and he knocked up my Janey.\" Alahna deliberately used the diminutive nickname she sometimes employed for her friend. \"I know you've wanted to get pregnant since forever, but do you think Azalok's going to be a supportive partner for you? He's a fucking demon!\"\n\n\"Well...\" said Jane, hesitating as if she was holding something back. \"Um, part of the bargain was that... he'd raise the baby when it's born. On his own.\"\n\n\"What?\" cried Alahna. \"Jane, that's nuts!\"\n\n\"I know, I know! But he fixed my ovaries, and he's kind of sweet, and, I dunno, I thought maybe I can convince him to let me raise it anyway...\"\n\nAlahna raised a finger, taking a breath as she prepared another hectoring tirade, when there was a knock at the door. The interruption stunned her to silence. Arching a quizzical eyebrow, Alahna shot her bestie a look that seemed to say, who the fuck is this? Jane shrugged and curled her mouth as if to answer, I have no fucking idea, dude.\n\nAnother knock rumbled the door, a bit louder than the first. It wasn't a cop-knock, or an angry knock, but rather a firm, confident knock that suggested someone who didn't like to be kept waiting. When neither of them moved, the knock was followed by a voice:\n\n\"Are you going to stand there all day, Jane, or are you going to let me in?\"\n\nIt was a rich baritone, with the stentorian elocution of an old-fashioned barrister. One could imagine the owner of it addressing courtrooms or senate chambers, and commanding the attention of everyone present.\n\nIt also sounded suspiciously like the voice from the video.\n\n\"Ohmygod,\" hissed Alahna. \"That's fucking him, isn't it?\"\n\n\"Shit!\" Jane hissed back. \"He emailed me this morning and said he'd visit soon, but I didn't think he meant this soon! I'll tell him to come back later.\"\n\nBut Alahna wasn't going to let this opportunity pass by. She was in full-on protective mode and ready to confront this strange -- if hunky -- dude who'd gotten her bestie pregnant. She'd always been a bit of a tomboy, and while her time at the gym was mostly spent on cardio and strength training, she'd taken her fair share of kickboxing classes, even dabbling a bit in mixed martial arts. At that moment, Alahna felt anxious to flex some of what she'd learned.\n\n\"No way,\" said Alahna. \"I'm gonna give him a piece of my mind.\" And maybe a piece of my fists if he wants to get rough.\n\nAlahna stomped over to the door, undid the security chain, slammed open the deadbolt, and yanked the door open.\n\n\"Listen, asshole,\" she said, already raising her voice before the door was all the way open. \"You've got about thirty seconds to explain yourself or else I'm going to start throwing fists. Just who do you think you...\"\n\nAlahna trailed off as she saw Azalok in the flesh for the first time.\n\nAnd was absolutely floored by what she saw.\n\nThe video didn't do him justice at all. He stood a few inches taller than Alahna, regarding her with a placid midnight-blue gaze that seemed as ageless as the universe itself. His darkly-stubbled chin was firm and masculine, and his obsidian hair was swept back with careless grace. Beneath his painted-on black tee were the kind of abs men spent their whole life working on, the kind Alahna would see in superhero movies and never quite believe they were totally real. Being so into fitness, Alahna preferred men who took care of their bodies, and judging by Azalok's absolutely cut appearance, he put in the effort.\n\n\"Pardon me,\" said Azalok in a rich, deep voice. \"I am happy to spar, if you wish it, but perhaps you might want to... cover up, first?\"\n\nIt was then that Alahna realized that the front of her bathrobe had come open, exposing most of her breasts and one of her nipples to the demon standing in the hallway.\n\nWith a shriek of embarrassment, Alahna beat a hasty retreat into the apartment and ran into the bathroom. She pulled the robe closed and cinched it tightly, battling to yank it closed over her big breasts. Ohmygod, she thought. Did that really just happen? Catching sight of herself in the mirror, Alahna realized how ridiculous she looked. Her hair was unkempt, still damp from the shower, and her face was clearly flushed from arousal. The bathrobe barely covered her voluptuous butt, and it was hard to keep her cleavage from showing.\n\n\"Who was that?\" she heard Azalok ask in the main room.\n\n\"Alahna, my bestie,\" replied Jane in a nonchalant, singsong voice. \"Want something to drink? I've got beer, bubble water, juice?\"\n\n\"Hmm. Too early in the day for beer, I think. Bubble water will be fine.\"\n\n\"Flavor?\"\n\n\"Pamplemousse, if you have it.\"\n\nNo way, thought Alahna. She couldn't believe a literal demon from hell had just specified \"pamplemousse\" as his preferred flavor of carbonated water. I mean, that is the best flavor, but this is too weird.\n\nDespite her dishevelled appearance, Alahna knew she couldn't leave Jane alone with a demon. She was the responsible friend, after all. Steeling her courage, she returned to the main room. Jane was scampering to the kitchenette to fetch the drinks. As she did, Azalok's midnight blue eyes surveyed the apartment, eventually finding a framed print of a Bruegel painting hanging on one wall. He leaned in close to consider it, clasping his hands behind his back thoughtfully. The pose made it appear as though Azalok would be perfectly comfortable in the role of a sophisticated patron in a posh art gallery.\n\nAzalock turned as Jane returned to the main room and accepted the can of fizzy water from her. He took a seat in the computer chair Alahna had recently occupied while Jane resumed her place on the unmade bed. Alahna plopped down beside Jane, putting a comforting arm around her, though it was as much for Alahna's benefit as Jane's. God, I hope he doesn't smell me, Alahna thought. I was sweating all over that chair. As she considered the possibility of Azalok catching a whiff of her musk, Alahna was surprised to find she was more turned on than disturbed by the notion.",
        "\"Well?\" said Azalok, after a few moments of silence as they sipped their drinks. \"Show me my spawn.\"\n\nJane stood and raised her camisole, displaying her obvious baby bump. The gesture was not exactly sensual, and as Jane thrust her tummy forward, her body language seemed to say, look what you did, dude.\n\n\"Care to explain how my belly can be this big after a week of pregnancy?\" demanded Jane. \"I look like I'm moving into the second trimester!\"\n\n\"Are you producing milk?\" asked Azalok, completely ignoring Jane's question.\n\nWith an exasperated sigh, Jane hiked her shirt up further, revealing her milk-laden breasts. They were beginning to produce again, and a shiny bead of silvery milk hung on both of her nipples. Jane squeezed one of her swollen nipples between her fingers, causing a trickle of the magic-infused liquid to seep out.\n\n\"Remarkable,\" said the demon, slapping his leg in appreciation. He leaned forward to study Jane's figure, evidently quite pleased by what he saw. \"You know, my kind tend to gestate faster than humans, but half-breed varieties can vary greatly. Your progress is astonishing. I am most pleased. I believe the normal human term of pregnancy is somewhere on the order of 38 weeks, yes? Judging by your condition, I'd say that my spawn should arrive in approximately... hmm... two weeks.\"\n\n\"Two weeks?\" sputtered Jane, her eyes going so wide that they almost bulged out of her head. \"You could have told me this was a possibility, man!\"\n\n\"I suppose I could have,\" said Azalok, a low chuckle rumbling from his throat. \"But where would be the fun in that?\"\n\nJane shook her head, incredulous. \"Rude,\" she said accusingly.\n\nAzalok merely shrugged. \"Well, you know. Demon.\"\n\n\"So how am I supposed to explain this?\" demanded Jane. \"My parents will flip.\"\n\n\"As to that, I would advise that you do not explain it,\" said Azalok, his tone suggesting that he thought this should have been obvious. \"Keep a low profile for the remaining two weeks, deliver a healthy child, and your life can return to normal.\"\n\nHe sipped his pamplemousse-flavored water thoughtfully, regarding Jane's condition with an assessor's eye. \"In any case, you appear quite healthy and fecund. I am pleased. Have you consumed the excess seed I left behind?\"\n\nThe way he said it, so matter-of-fact, seemed incongruous with the lewd content of the question. Jane blushed furiously, still standing in the middle of the room with her shirt pulled up, being examined like livestock. Alahna was suddenly very aware of the seed she had consumed, feeling heavy and hot in her stomach.\n\n\"It's all gone,\" said Jane. Alahna noted that it wasn't a lie, although it wasn't entirely truthful either. The dark, heady substance was all gone, it just hadn't all gone into Jane. Sneaky, sneaky, thought Alahna.\n\n\"Interesting,\" said Azalok, tapping his chin quizzically. \"I have never left so much behind before. I wonder if it has affected my spawn's development? I sense powerful potential in your womb, Jane. It may be that consuming still more of my essence will further enhance the effects.\"\n\n\"Hold on a minute, man!\" said Alahna, finding her voice at last. She'd watched the conversation play out mutely, still cowed by her embarrassment at having flashed Azalok in the doorway. But this was simply too much. \"You can't just ask her to drink more of your cum, no matter how tasty it is. That stuff is dangerous! It's worse than whisky for making you lose your inhibitions.\"\n\nAzalok slowly turned his gaze on Alahna, his face totally deadpan, and asked: \"And just how do you know what my seed tastes like? Or for that matter, how it affects humans?\"\n\n\"Oh, that!\" said Jane, forcing a nervous laugh out. She pulled her shirt back over her swelling tummy and sat back next to Alahna on the bed, patting her friend's knee. Alahna half-turned to watch the wheels turning in Jane's head as she made up an excuse. The shorter girl pushed her glasses up, which Alahna recognized as a tell that Jane was about to start bullshitting hard.\n\nAzalok, apparently, noticed it too, and cut her off before she started. \"Tell me the truth,\" he rumbled, his voice dropping to a primal bass that seemed to rise from the depths of the earth and reverberate through Alahna's soul, commanding absolute obedience.\n\n\"Alahna drank some of your cum while we were in the shower together,\" Jane blurted out.\n\n\"Then we watched the video of you that Jane secretly recorded while we both masturbated,\" finished Alahna.\n\nAlahna flexed her jaw, stunned at how it had moved unbidden to confess everything. Now that the cat was out of the bag, a heavy silence descended. Azalok looked from Jane to Alahna, regarding them thoughtfully with his cobalt-blue eyes. Alahna's heart froze in her chest while the moment stretched out interminably, tortured by the suspense of wondering what Azalok would do. Was he angry? Upset? From his stony expression it was impossible to tell. Maybe I should just attack him preemptively, she thought. If I can go for his legs, and get him on the ground, then maybe...\n\nAlahna was still planning her assault when Azalok burst out laughing.\n\nThe handsome demon practically doubled over as he chortled, bracing himself with his hands on his legs. His laughter boomed through the tiny apartment. Alahna and Jane exchanged a confused look as Azalok's laughing fit stretched on and on, tears forming at the corners of his eyes. At last he got control of himself and stood up, wiping his eyes as a few last chuckles shook his chest.\n\n\"I have not laughed that hard in a very long time,\" he admitted. \"You mortals still know how to surprise me.\"\n\n\"So... you're not angry?\" asked Alahna.\n\n\"Angry? By the Gates of Limbo, no! What did you think I would do? Dunk you headfirst in the icy lake of Cocytus? Cast you into the eternal fires of Mount Erebus? Cut you into three pieces and feed one to each head of mighty Cerberus?\"\n\n\"Uhh... well... something like that, maybe,\" said Jane. \"Your email said not to tell anyone.\"\n\nAzalok waved a hand dismissively. \"No, no,\" he said. \"I meant that you should not go telling the entire world. To confide in your best friend is natural.\"\n\n\"You're really not angry?\" asked Jane, her tone suggesting she felt doubtful.\n\n\"Not in the slightest,\" said Azalok flippantly. \"I did not anticipate you feeding your best friend my seed, and I would prefer that you not share the video of me over the internet, but I cannot claim to be upset about it. If anything, I am impressed.\" He paused and stroked his darkly-stubbled chin pensively. \"You know, Jane, your behavior is what one of my kind might call wicked, and mean it as a profound compliment.\"\n\nA wordless few moments passed as they sipped their bubble waters. Azalok continued to chuckle softly to himself, while Jane furrowed her brow in disbelief. Alahna felt disquieted, and question upon question boiled up in her mind until she could stand it no longer.\n\n\"Okay, listen,\" said Alahna at last, blurting out words in a rapid stream. \"I admit that you're hot and you have a big cock and you seem very polite, but I still have some questions. One, what kind of demon are you? Two, did you actually fight God? Three, how many children do you have? Four, will you support Jane financially? Five--\"\n\nAzalok held up his hands in a defensive gesture, saying, \"Enough, enough!\" He shook his head, chuckling. \"You humans are so curious. Very well. One at a time.\n\n\"First, I am a Fallen Watcher, a Commander of the 66 Legions of Hell, and a Marquis of the Umbral Plains.\n\n\"Second, I did not personally fight the Almighty, but I have, on many occasions, born witness to his great and terrible countenance. To battle He-Who-Dwells-Above would be the height of folly, for even Lucifer Morningstar failed in that task.\n\n\"Third, my children are multitudinous, but largely unknown to me. In truth, the vast majority of them did not manifest demonic potential, and I allowed them to remain in the mortal realm, either with their mothers or, in the case that they were unwanted, with a suitable foster family. Only a select few have come to live with me in Hell, and those are long-since fully grown.\n\n\"Fourth, the question of whether Jane and I have any further association after the birth of our child remains... undetermined.\"\n\nHe leaned forward and steepled his fingers, fixing Alahna with an intense, midnight-blue stare.\n\n\"Now I have a question for you, best friend and protector of Jane. How much of my seed have you consumed?\"\n\nAlahna almost choked on her beer. \"Uh... what?\" she sputtered.\n\nJane helpfully interjected. \"She had about one of your spurts. Maybe one and a half.\"\n\nAzalok's eyebrows arched in appreciation. \"That is enough to have absorbed some potent magic. Have you experienced any effects? Increased libido, for instance?\"\n\nAlahna blushed furiously, suddenly very aware of the fact that she was still barely clothed in a too-small bathrobe, and that she had masturbated herself to a toe-curling orgasm not even half an hour ago.\n\n\"Umm. Yes,\" she answered at last, feeling sheepish. \"You could say that.\"\n\nA wicked grin spread on the demon's expressive lips. \"Very interesting. I do not often give my essence to women I do not intend to breed. Tell me, are you interested in consuming more?\"\n\nIs he asking what I think he's asking?, thought Alahna.\n\n\"More what?\" she said.\n\n\"More of my semen,\" said Azalok, matter-of-factly.\n\nYep, he's asking what I think he's asking.\n\n~~~~~~\n\nJane was seriously enjoying watching how flustered the usually-dominant Alahna was getting. The brown-skinned girl seemed tongue-tied after Azalok had asked her point-blank if she would be into swallowing more of his load. Her mouth dropped open, then snapped closed again. Alahna took a swig of her bubble water while she mulled things over.\n\nTruth be told, watching her friend squirm was really turning Jane on.\n\nBetween the semen she'd drank earlier, her pregnant body's hormonal insanity, and being so close to two people she was very attracted to, Jane was feeling giddy with arousal.\n\nBefore Alahna could come up with an answer, Jane set down her drink and stood up.\n\n\"She seems confused,\" said Jane. \"Maybe we should show her how.\"\n\nJane grabbed the hem of her cami and slowly peeled it up and off her round belly and over her swollen breasts. She tossed it aside and undid the drawstring of her pajama bottoms. A few shimmies of her hips and they crumpled in a pile around her ankles. She could feel Alahna's lusty gaze on her ripe, pregnant body, as well as Azalok's, and it gave her a similar thrill to when she was showing off on the internet.\n\n\"I think I take your meaning, Jane,\" replied Azalok, raising an eye appreciatively at what he saw. \"And your fecund body is certainly very attractive to me. Yet... it is not my custom to have non-reproductive sex. It has always seemed... wasteful, to me.\"\n\nJane pouted at Azalok, adopting a slinky pose that thrust out her tits and baby bump alluringly.\n\n\"C'mon, Azalok, you came all this way. Don't you want to rail me out again? Let's see what more of that magical demon cum can do to my little human body.\"\n\nThe demon rumbled out a little chuckle and grinned wolfishly, revealing that he really hadn't needed much convincing.\n\n\"Very well. I do not often make repeat visits to my broodmares, but in your case, Jane, I find myself quite eager to fill you a second time.\"\n\nHe stood up and began disrobing as well. First Azalok shrugged off his leather jacket and peeled off his tight black shirt, revealing his incredibly ripped abs and chest. Next came his boots. Finally, he unzipped his jeans, beneath which he wasn't wearing underwear, and stepped out of one leg, then the other. Even though Jane had seen Azalok's abominable cock before, she still gasped in appreciation as the infernal appendage was unveiled.\n\n\"Holy fuck that's big,\" remarked Alahna. \"It looks even huger in person.\"\n\nAzalok's cock had one long vein running down it, which pulsed visibly as the shaft began swelling with blood. His purplish cockhead was still sheathed in foreskin, but it was emerging steadily. Flaccid, Azalok's dick was already nearly as long as Jane's forearm. Between his legs was a pair of ludicrously huge balls, angry red and the size of oranges. Jane imagined all the boiling semen they contained and got even more turned on than she was already. As if in response to her perverted thoughts, a bead of dark essence appeared from the slit at the tip of his cock.\n\nJane knelt down in front of Azalok, conscious of Alahna's eyes on her. She loved how slutty it made her feel to have her bestie watching this lewd scene play out. Grasping Azalok's hardening cock, Jane delighted at how much easier it was to handle when it wasn't stupendously erect. She knew it wasn't likely to stay this way long, so she took advantage of the moment. Bending the still-flexible penis upward, Jane rolled back the stretchy foreskin and revealed the spongy cockhead beneath. Its crown was beginning to flare outward, but hadn't reached its full potential yet.\n\nMaking eye contact with Alahna, Jane licked the droplet of semen from Azalok'd cock, humming in delight as the rich, salted-caramel taste hit her tongue. It tastes so much better fresh, she thought. Jane spread her lips as wide as they could go and engulfed the demon's burgeoning manhood. Still soft, the head fit in her hot little mouth easily. As if it was happy to be trapped in a warm, welcoming orifice, his cockhead pulsed and bucked a couple of times before squirting out more delicious precum onto Jane's waiting tongue. She reached between his legs and gently caressed his balls, and she could actually feel them vibrating with energy.\n\nHis cockhead inflated rapidly, forcing Jane's jaw wider and wider. It should have been impossible, but Jane was so infused with his magic by now that her mouth stretched to accommodate him. By the time it had reached its full size, her lips were pulled into a tight, thin circle, and the enormous head filled her mouth completely. The shaft was wide and heavy by now, his urethra making a prominent ridge on the underside.\n\nJane backed off, and his cock came free of her mouth with a wet pop. A trail of saliva mixed with pre still hung between her lips and his dick. The head had turned a reddish hue now, and the corona flared like a king's ostentatious collar. Magnificent, Jane thought. I can hardly believe I had sex with this monster. And that I'm about to do it again.\n\nBut there was another person in the room, and Jane didn't want to leave her out.\n\n\"Come here, A,\" Jane beckoned to her friend. \"And get a closer look.\"\n\nAlahna, usually so feisty and in control, seemed spellbound by what she saw. Dutifully, the taller, brown-skinned girl moved closer and knelt down beside Jane. Azalok growled happily to see two pretty human girls face-to-face with his cock. Jane resumed her ministrations, grasping the shaft with her slim hands, although her fingers couldn't even encircle its girth. She lapped up more delectable precum, savoring the rich flavor. Now fully hard, Azalok's mighty cock was producing droplets at a remarkable rate, and Jane lapped at the tip as if it was a popsicle, capturing each new bead that appeared.\n\nJane halted her cock-worship and glanced over at Alahna, who was watching with rapt attention.\n\n\"Would you like a taste?\" asked Jane. \"It's even better fresh.\"\n\n\"Ummm,\" said Alahna, clearly at war with herself. But the wanton side won out over the responsible side. \"Yeah,\" said the New Zealander. Then she added in a terse whisper, \"God, Jane, I can't believe what you've gotten me into.\"\n\nUsing her slender hands, Jane angled Azalok's cock towards her friend's gorgeous face. Alahna extended her tongue, tentatively lapping the precum from Azalok's fat cockhead. It was like an electric current had shot through her. The athletic girl shivered and let out a moan of satisfaction. She swallowed and turned to face Jane, her eyes cloudy with lust.\n\n\"You weren't kidding,\" groaned Alahna. \"It's way better fresh.\"\n\nJane's face was just inches from Alahna's and she was very aware of her friend's sensuous, provocative lips, parted a bit as she breathed heavily. Aware of the fact that, despite their fondling in the shower and masturbation earlier, they had never kissed. Jane leaned in, intent on smooching her bestie's attractive mouth, but Alahna turned her head at the last second, offering Jane her cheek instead.\n\nAh, right, her thing about kissing, Jane remembered. She only kisses people she's serious about... and we're just messing around, after all.\n\nUndeterred, Jane planted kisses along Alahna's neck and collarbone, suckling and nipping at the mellow-brown flesh with her teeth. Alahna continued to lap precum from Azalok's cockhead, sighing contentedly at the attention she was receiving. Presently, Alahna broke off from licking Azalok's cock and threw her head back with a breathy sigh.\n\n\"My turn,\" said Jane, taking advantage of the moment to grab Azalok's manhood, which was now titanically erect and visibly swaying in the air as it pulsed with arousal. It seemed to vibrate with energy and emanate its need to fertilize the nubile young humans.\n\nJane stretched her lips wide to engulf the broad head of Azalok's penis. She caressed the slit with her tongue in a mimicry of kissing. Azalok groaned his approval. He placed his hands on the back of her head and gathered up fistfuls of the shorter girl's dirty blonde hair. With gentle but insistent pressure, Azalok pushed on her head, making another inch of his bulbous cockhead cram its way into her little mouth. The flared crown forced her jaw to flex even wider, and then the entire head barged its way inside.\n\nFlicking her eyes to the side, Jane was aware of Alahna gaping at the lewd site of her best friend practically unhinging her jaw to accommodate Azalok's infernal erection. Showing off for Alahna lit a fire in Jane's core. She couldn't get enough of his seed, and her own wetness was slicking up her thighs at an incredible rate.\n\n\"Did Jane tell you that I can control when and how much I ejaculate?\" asked Azalok, clearly addressing Alahna, looking at the fit girl even as he fucked her best friend's mouth. \"I can even fire off just a single spurt of my essence... like so.\"\n\nHe punctuated the word so by flexing his infernal nuts and shooting a single blast of his seed into Jane's waiting maw. The thick, goopy cream filled her mouth to bursting, bulging out her cheeks, and Jane struggled to swallow it all. The hot essence felt amazing as it slid down her esophagus, and she would have gladly ingested more, but Azalok pulled his cock out of her mouth, his crown scraping against her teeth.\n\nAlahna was watching with wide eyes, having observed the way Azalok's cock swelled and his enormous balls tightened before firing off a round of bust into her bestie's mouth. Jane opened her mouth and showed Alahna all the sticky residue still clinging to her teeth and tongue.\n\n\"Holy shit,\" said Alahna. \"Jane, you look so slutty with your mouth full of his cum.\"\n\nJane closed her mouth and used her tongue to gather the rest of the delicious spunk before gulping it down. Meanwhile, Azalok shifted his hips to point his throbbing erection at Alahna. The Kiwi girl had a slightly apprehensive look in her golden-brown eyes, but dutifully opened her mouth. The demon grasped his penis with one of his big, strong hands and deftly rubbed his cockhead on Alahna's plump, sexy lips. His dark precum smeared in a circle around the brown-skinned girl's mouth, making her lips glisten attractively.",
        "\"I plan to give you the same as I've just given Jane,\" Azalok announced. \"Your body may already be absorbing some of the essence Jane stored, but adding a fresh dose should produce... interesting results.\"\n\nJane scooted closer and watched Azalok press the tip of his cock into her bestie's gaping mouth. Alahna purred happily as the broad head of Azalok's tool plugged the aperture of her mouth. Only the tip and part of the spongy head had made it in, with the flared corona still outside. So far, Azalok had not grabbed ahold of Alahna's head, the way he had done for Jane. He must be letting her get used to it before he gets too forceful with her, Jane thought. How sweet of him.\n\nLeaning in close, Jane whispered into her friend's ear, \"You look so sexy, A. I'm so glad you're doing this with me. Are you ready to swallow more of his load? It's going to fill your mouth to bursting. It'll be so hot and thick, straight from the source. You're thirsty for it, right?\"\n\nThe gorgeous New Zealander was groaning lustily in response to Jane's dirty talk, and looked up at Azalok with unbridled desire written on her features. Jane reached between Azalok's legs and gently squeezed his heavy, demonic nuts, feeling them churn with semen.\n\n\"Very well,\" said Azalok. \"Drink it, then.\"\n\nHis balls flexed powerfully, and Azalok's urethra bulged out as a huge blast of cum surged down his cock. Alahna's eyes went wide with surprise as nut filled her mouth. Her cheeks bulged, and her eyes began to water as she struggled to handle it. Sighing contentedly, Azalok withdrew his penis, making sure to smear more essence on Alahna's luscious lips as he did. Alahna's throat flexed a few times as she swallowed all the sticky bust, and a grin slowly spread across her face.\n\n\"Oh fuck, Jane, that stuff is really going to my head,\" said Alahna. \"What have you gotten me into?\"\n\n\"Incredible sex with a super-well-hung demon, duh,\" replied Jane sarcastically. She captured a stray rope of bust hangin from Alahna's lips with her finger and brought it to her own mouth, sucking on her digit sensually while the fit girl watched. Jane looked back seductively, getting lost in Alahna's eyes, as deep and sparkling as petrified amber.\n\nLost in reverie, Jane was snapped out of it when something heavy and wet smacked against the side of her head, nearly making her fall over. She realized it was another spurt of greasy demon cum, and Azalok chuckled from up above. He'd managed to spray them both with that one, coating their cheeks and getting some in their hair. Jane's glasses got hit as well, one of the lenses completely darkened by nut, obscuring her vision. She took them off and set them aside.\n\n\"Rude,\" said Alahna. She pouted up at Azalok, looking slightly ridiculous with half her gorgeous face covered in cum.\n\nAzalok merely shrugged, smirking wickedly. \"Do I have to say it?\"\n\n\"We know, we know,\" sighed Jane. \"You're a demon.\"\n\n\"Well, if that's how you want to play it,\" said Alahna, \"How about I give you another target?\"\n\nShe loosened the belt of her bathrobe and pulled the flaps open, revealing her heavy, teardrop-shaped breasts to Azalok. Her dark nipples were extremely erect, long and thick like two erasers. The Kiwi girl pressed her tits together with her arms, making them rise up and jut out even further. Azalok growled in approval. She really does have a gorgeous rack, thought Jane, feeling just a slight pang of jealousy. I wonder if Azalok prefers big boobs?\n\n\"Why don't you coat these, stud?\" asked Alahna suggestively.\n\nAzalok didn't need any more encouragement. As his balls drew up again, the demon used his hands to aim his cock, like he was drawing a bead with a sniper rifle. His cock bucked in his grasp, like a gun recoiling, and a fat, greasy rope of bust fired from the tip with alarming velocity. The dark substances smacked wetly into Alahna's tits, covering them in oily seed. Alahna shuddered as the sticky semen pooled in the sensitive valley of her tits, rolling slowly down her beautiful ochre flesh.\n\n\"Oh fuck,\" purred the Kiwi girl. \"I think I just came a little.\"\n\n\"Why don't I help you clean up?\" suggested Jane.\n\n\"Hmm, good idea,\" replied Alahna. \"The Marquis of the Umbral Plains here made a mess of me.\"\n\nIt was true. Alahna looked sloppy and sexy, with one side of her face and her exposed tits coated in slimy spend. Jane went for her friend's head first, lapping up the cum on her cheek and using her fingers to retrieve blobs that had made it into Alahna's dark, glossy hair. The New Zealander did likewise, and Jane got an erotic thrill out of having her bestie lick the side of her cum-covered face.\n\nWhen their faces were relatively clean, Jane moved downward, kissing her way along Alahna's neck and collarbone. When she reached the girl's cleavage, Jane stuck out her tongue and licked ever-so-gently, knowing how extremely sensitive Alahna was in that area. Her bestie quivered happily and let out an uncharacteristically girlish giggle. Jane got to work, lapping at her friend's fantastic tits. She bathed the supple brown flesh with her tongue, swallowing down any cum she found. When Jane reached one of Alahna's erect nipples, she swirled her tongue around the areola teasingly, delighting in her friend's heavy breathing. At last Jane captured the nipple with her lips and suckled on it greedily, flicking it with her tongue and biting down gently.\n\n\"Oh fuck, Janey, you're going to make me come again. God, my tits are so sensitive.\"\n\nAs Jane worked to thoroughly clean Alahna's tits, she was bent over on her hands and knees, still totally nude, with her butt sticking out behind and her bulging, pregnant tummy hanging below her. It was a rather exposed position, but she was so engrossed in her work that she forgot momentarily about Azalok.\n\nUntil a wad of cum splattered hotly on her back.\n\nJane yelped and shuddered at the feeling, moaning into the soft cushion of Alahna's breasts.\n\n\"I thought Alahna might be hungry,\" Azalok explained in a sardonic growl. \"Since Jane is so greedily licking up the essence I deposited on her breasts.\"\n\n\"How thoughtful,\" said Alahna, trying her best to sound sarcastic, although her voice quavered with pleasure.\n\nJane continued to worship Alahna's breasts with her tongue. Meanwhile, the Kiwi girl scooped the scalding cum from Jane's back, making lewd smacking sounds as she sucked it off her fingers. When Alahna's breasts and Jane's back were more or less cum-free, Jane decided it was time to take the next step.\n\nWriggling down lower, Jane planted kisses along the gorgeous brown flesh of Alahna's stomach. With quick, deft motions, Jane untied the bathrobe and slid it the rest of the way open, exposing Alahna completely. She reached her bestie's navel and stopped for a moment to swirl her tongue inside it. Continuing, Jane kissed her way towards the apex of Alahna's thighs.\n\n\"Ohhhh Janey you bad girl,\" hissed Alahna as she realized what Jane had in mind. \"Do you want to eat out my pussy?\"\n\nJane replied with a throaty \"Mmmmmm,\" that reverberated into Alahna's soft flesh. Fully engrossed in her task, with a belly full of Azalok's cum -- not to mention his child -- Jane was past the point of caring about the weirdness of having sex with her best friend. She realized she was dying to taste Alahna's sex.\n\nLevering the athletic girl's toned thighs apart, Jane at last saw her goal. Alahna's prominent vulva was quite engorged, and glistening with prodigious wetness. Having come recently, Alahna's cunt was puffy and throbbing, inviting Jane to dive right in. Instead, Jane kissed her way slowly up her friend's luscious thighs, licking and biting playfully, making Alahna yelp with pleasure.\n\nAs Jane licked closer to her bestie's pussy, she felt a pair of strong, forceful hands grasp her hips. Squealing with delight, Jane spread her knees as Azalok manhandled her from behind, arranging her into position. She felt his wicked erection smack forcefully against her back, sending a shudder through her. Azalok let the weight of his penis rest on Jane's smooth back flesh.\n\n\"Are you going to fuck her?\" asked Alahna. \"While she eats me out?\"\n\n\"Indeed,\" rumbled Azalok. \"And then, when your body has had time to absorb my seed, I will fuck you as well.\"\n\n\"Oh will you now? I don't think I can have sex with that thing, dude. You'll break my vagina.\"\n\n\"Jane said the same thing at first. But she is smaller than you, Alahna, and now she can take me with ease. As I shall demonstrate.\"\n\nAzalok shifted, removing the pleasant weight of his cock from Jane's back. Dragging his cockhead backwards, he left a warm trail of pre from the middle of her back to her butt. Then his fat, spongy cockhead slid across her crack and nestled against her perineum. The demon took hold of her butt cheeks with both hands and spread them apart, exposing her sodden cunt to him. Jane realized they hadn't fucked doggystyle before, and felt a salacious thrill at the thought of being taken like an animal, with her face down and her ass up.\n\nAs Azalok's cockhead butted up against Jane's soft folds, she pressed her face directly into Alahna's sex, inhaling her friend's intoxicating musk. Jane shrieked into her friend's pussy as Azalok thrust forward, driving the impossibly large head of his cock into her vagina. Jane's folds rippled around him, made malleable by the huge amount of demon cum Jane had consumed. Azalok's cockhead continued to squirt droplets of precum into Jane's hot love tunnel, further loosening her. Jane extended her tongue and inserted it as far as she could into Alahna's cunt, lapping needfully at the other girl's inner flesh as Azalok plundered her own.\n\n\"God damn,\" moaned Alahna. \"You weren't kidding. Jesus, Janey, he's going to split you in two!\"\n\nJane gave a satisfied groan in response, moving her tongue upward to Alahna's swollen slit and making gentle swirls over it. Azalok made steady, forceful progress through Jane's spongy, pink channel until his fleshy cock bottomed out against the barrier of her womb, sealed firmly now to protect the growing demonspawn within. His infernal cock throbbed hugely inside Jane, and she could feel the texture of his bulging urethra and pulsing vein through the walls of her sex.\n\n\"I can go no further than this until you give birth,\" said Azalok. \"Which means, unfortunately, I cannot make love to your womb at the moment.\"\n\nHe withdrew his penis until it popped free of her sex completely. Jane groaned with disappointment, and her gaping sex felt bereft without Azalok's huge bulk plugging it. She attacked Alahna's clit in frustration, flicking the tip of her tongue rapidly across the engorged pearl. Alahna's thighs began to tremble, and Jane knew she must be nearing an orgasm.\n\n\"Alahna,\" said Azalok. \"Sit up straight and open your mouth.\"\n\nJane broke off her cunnilingus just in time to look up and see her bestie opening wide and hanging her tongue out lewdly. A wad of dark, goopy cum splattered into the Kiwi girl's face, fired by Azalok across Jane's back. His aim was impeccable, and most of the nut went straight into Alahna's mouth, though a decent amount spattered her nose and cheeks, and some even dribbled down into Jane's hair.\n\nSeeing the filthy sight spurred something in Jane, and she dove back into Alahna's pussy, suckling forcefully on her bestie's clit. Alahna was on the edge of release, no doubt pushed to it by the combination of swallowing a mouthful of demon cum and Jane's assault on her sensitive nubbin. The fit girl tensed up, clenching all of her muscles, and a series of breathy, low-pitched grunts escaped her mouth. Her toned thighs clamped down hard on Jane's head, trapping her face and pressed it deeper into Alahna's folds. Jane couldn't breathe very well in that position, and she nearly suffocated in pussy.\n\nAzalok grabbed Jane's hips again and slammed his abominable cock back into her pliant sex, crashing forcefully into her cervix, which reverberated from the impact. Jane's shrieks of pleasure were muffled by Alahna's still-clenching thighs. The demon fucked her hard and fast, driving his infernal erection into her impossibly-stretched pussy and battering the sealed gates of her womb. From this angle, Azalok's bulging urethra stimulated the front wall of her vagina, rubbing pleasurably against her g-spot and stimulating her clitoris from the inside.\n\nJane was melting in pleasure. Getting her pussy fucked out by Azalok's relentless cock while being smothered in Alahna's quivering cunt was too much. Jane came violently, spasming against her fleshy restraints, but neither the still-coming Alahna nor the demonic Azalok gave her any slack. The demon drove himself in once more, his cock gripped by Jane's quivering pussy. His virile penis swelled in preparation and then fired off a huge spurt of bust which smacked hotly into Jane's cervix.\n\nThat sent Jane into the stratosphere. Coming like an animal and smothered in pussy, she blacked out.\n\n~~~~~~~\n\nAlahna's abdominal muscles finally unclenched, and with a heaving sigh, she released her vice-like grip on Jane's head. As Alahna's thighs unclamped, her bestie slumped into a heap. Jane looked insanely sexy between her legs, with her face drenched in girlcum, her tongue lolling out, and her eyes glassy. I cannot believe Jane just ate me out, thought the Kiwi girl. And I cannot believe how much I loved it.\n\nHearing a wet popping sound, Alahna looked up and saw that Azalok had unsheathed his penis from Jane's snug vagina, dragging a thin strand of dark, glistening essence along with it. Alahna admired the hunky demon: his hard pectorals, his superlative abdominals, his powerful biceps. He was an incredible specimen, from a fitness perspective, but his most impressive feature was between his legs. Azalok's dick was throbbing visibly, rising and falling through the air with each pulse of blood. His cockhead had fattened until it looked ready to burst, and taken on an angry shade of purplish-red. A dick fit for a demon, thought Alahna.\n\nAzalok's balls had swollen to the size of grapefruits, and they were a bright, hellish red. They seem to pulse and roil with the infernal seed they contained, like volatile explosives ready to go off.\n\nLooking up at the demon's face, Alahna saw that a look of needful lust had possessed his midnight-blue eyes, and they bored into her hypnotically. All of her earlier reservations were relegated to a tiny part of her brain that she had stopped listening to, thanks to the potent cum currently warming her belly. She'd swallowed, what, five spurts worth by now? The one we shared in the shower, the one he blasted into my mouth, the one he shot on our faces, the one he shot on Jane's back, and the one he shot in my mouth while he was fucking her...\n\nShe shivered as a powerful wave of pleasure tingled up her spine. Alahna was ready for more, but a glance down at her bestie gave her pause. With a bit of concern over her friend's catatonic state, Alahna nudged Jane's shoulder with her knee.\n\n\"Is she okay?\" asked Alahna. \"You were giving it to her pretty hard, and I think I nearly smothered her. The baby...\"\n\n\"Do not concern yourself,\" said Azalok, waving a hand dismissively. \"Your friend is resilient, thanks to my influence. As is my spawn. Neither is in any danger, although she may need some rest before she is ready for more. In the meantime...\"\n\nHe raised an eye suggestively. Alahna got the message, of course -- it wasn't exactly subtle -- but she still wasn't sure about having sex with that monstrous cock of his. Seeing Jane get blasted out was incredibly hot, of course, but it also made Alahna apprehensive that something so big could fit in her own pussy.\n\n\"I don't know, dude,\" said Alahna after a moment's consideration. \"At least about you putting that in my pussy. But... maybe there's something else we can do. You look pretty backed up, there. Let's see if I can help relieve that pressure...\"\n\nAlahna unfolded her arms and legs and climbed to her feet gracefully. As she did, she let the too-small bathrobe, which still hung loosely on her body, fall the rest of the way off her shoulders. She angled her hips seductively, thrusting out her chest, and noticed the way Azalok's eyes flickered downward to admire her body. Jane's not the only one who knows how to turn guys on. Alahna knew the effect her classically beautiful body had on men, and though the unwanted stares as she walked around campus could be annoying, she had to admit that sometimes she really enjoyed it.\n\nTaking a few steps forward, and making sure not to walk on Jane, who was still out cold, Alahna moved in close to the demon. She used her hand to touch the hot, pulsating head of his penis, thrilling at the power radiating from the hellish member, and levered it gently upward. Moving forward even closer, Alahna trapped the tool between their stomachs, pressing her erect nipples against Azalok's hard chest. She looked up into his eyes -- although she was tall for a girl, he was still a good head taller -- and was pleased to see him practically growling with desire.\n\nAfter spending a few delicious moments enjoying the feeling of his cock pressing between their bodies, Alahna slowly sank to her knees. As she did, his cock slid up between her generous D-cup breasts, giving Alahna a spark of inspiration. She paused her descent and squeezed her tits around his cock, enjoying the feeling. Her boyfriends often enjoyed a good titfuck, and now she was wondering if the demon wouldn't like some of the same.\n\n\"Why don't you fuck my tits,\" said Alahna in a low, husky voice, \"and then fucking ruin Jane's apartment with all that cum in your balls.\"\n\nAzalok didn't need any further prodding. He took her by the shoulders and pushed her to the ground, quickly kneeling so that he straddled her abdomen. The demon's penis lay on her chest, a pleasant weight, half of it still glistening with her bestie's juices. Aroused by his strength and dominance, not to mention the feeling of his hot cock nestled in the sensitive valley of her breasts, Alahna pressed her beautiful ochre tits together with her hands so that they smooshed around the hellish cock. It was so big that even her generous boobs didn't quite engulf it, but they came close.\n\n\"I'll bet Jane can't do this,\" remarked Alahan wickedly. \"Now let's unload some of that nut you've got saved up. I saw how much you can come on video, but now I want to see the real thing. Show me what your whole load looks like.\"\n\nThe demon began thrusting against her tits with abandon, quickly working up to the same brutal rhythm he'd used when he was giving it to Jane. The stimulation of her breasts was driving Alahna crazy, and she wriggled her hips, grinding her thighs together. With every thrust his cockhead seemed to grow from between her tits, almost reaching her face. Dark, glimmering precum drizzled steadily from the tip, smearing all over Alahna's chest and slicking up her boobs nicely.\n\nThe fit girl raised her head up a bit and opened her mouth wide, hanging her tongue out invitingly. Azalok got the message, and thrust far enough that the tip of his cock penetrated the athletic girl's waiting lips. She moaned with satisfaction as her mouth was plugged by his huge cockhead. Alahna used her tongue to stimulate the slit, coaxing more delicious, sea salt and caramel flavored pre out. He gave shallow little thrusts, humping the spongy tip against her lips and tongue. His balls were resting on Alahna's stomach, and she felt them rumbling through her skin as they prepared to unload.\n\n\"Do it for me,\" urged Alahna, her words coming out slurred from all the cum on her lips. \"Let me see what you put inside Jane.\"",
        "Azalok growled with lust and picked up the pace, thrusting hard against Alahna's slick and supple tits. She held them tight with both arms, dark nipples jutting proudly upwards, and yelped at the intense sensation of having her cleavage so relentlessly stimulated. It didn't take Azalok long. With a final thrust, he jammed the tip of his cock back into Alahna's gaping mouth and came.\n\nThe demon's nuts flexed against her belly. His urethra bulged along her chest as the payload traveled up his shaft, until at last the head swelled and a blast of scalding cum fired straight into her gullet. Her neck was bent at an odd angle, and though she was able to swallow most of it, she was forced to lay her head back down, coughing, and allow the rest of the spurt to squirt forcefully into the air. Azalok, however, wasn't nearly finished. He thrust hard between her tits a few more times, until he paused, firing off another blast of dark, steaming bust. Alahna let her head drop back to the floor and watched the rope of cum rocket over her head, spattering little droplets on her face as it passed.\n\nAzalok was still thrusting away, and she could feel his cock and balls continuing to flex as he shot more and more of his cum. She squeezed her tits together, massaging his bucking tool as monstrous gouts of seed arced over her head to splatter someplace in Jane's room.\n\n\"Fuck, this feels good,\" growled Azalok as he continued to thrust away at her breasts. Five, six, seven blasts in, and he was still going strong. Craning her neck to see, Alahna watched steaming gouts of load careening across the room and splattering hotly into the wall. Some of it hit her desk, and one stray shot even hit right in the middle of the television. Eight, nine, ten shots, and Alahna was in disbelief that there could be so much. So this is how Jane got all that extra cum she saved. Eleven, twelve, and the Bruegel print took a hit and fell to the ground, festooned with bust. If Jane was right, he had one blast left in him.\n\nWith a rapid, deft movement, Azalok maneuvered his erupting penis between Alahna's legs, barging them apart with its girth. She could feel it rumbling as he held back the last of his semen through sheer force of will. Manhandling his angry, throbbing cock with powerful hands, Azalok fitted it to Alahna's drenched and puffy slit.\n\n\"Wait, wait, don't fuck me!\" protested Alahna, still concerned about his size.\n\nBut she needn't have worried. Azalok thrust his spongy cockhead forward, just enough to part Alahna's prominent netherlips. Stopping at that shallow penetration, he let a deep, baritone roar of triumph. The demon's tool bucked like a shotgun, and the final, thirteenth rope blasted out with terrific velocity. It raced down Alahna's pink, fleshy love tunnel and smacked against her cervix, like a marksman hitting a bullseye.\n\nShocked by the sensation of having her womb's mouth suddenly drenched and covered by what felt like eight ounces of custard-like nut, Alahna was ambushed by a full-strength orgasm. As Alahna's athletic stomach clenched up hard, the demon for his part let his now-spent cock rest on her stomach, allowing her to feel its pleasant weight. The last dregs of spend drizzled from the slit on the Kiwi girl's convulsing belly. His nuts, now somewhat deflated, came to rest against her sex, stimulating Alahna's clit as Azalok gave tiny little thrusts.\n\n\"You are truly gorgeous, Alahna,\" remarked the demon appreciatively. \"Traditional beauty certainly has its appeal. I think you would be an excellent broodmare, should you ever change your mind...\"\n\nHis lewd words made Alahna come even harder, and she clenched her teeth, afraid of what she might say in the throes of climax. Instead she focused on her pleasure, massaging her own heavy tits, milking every bit of bliss from her body. As her muscles contracted, making her body heave, she could actually feel Azalok's seed sloshing about inside her.\n\nJust when she thought she could stand it no longer, Alahna's climax abated, and she melted into Jane's carpet, utterly, delectably spent.\n\n~~~~~~\n\nJane came to just in time to witness her gorgeous bestie peak, and peak hard. Alahna's toned abs were still clenching and unclenching when Jane mustered the energy to sit up. Woozy, Jane tried to remember what had happened. She'd been getting railed by Azalok and... and...\n\nDid I really just eat out my best friend?\n\nThe lingering taste of Alahna's pussy on her lips confirmed it. She had definitely crossed a line. But before she could dwell on the matter, Jane noticed what an absolute mess her apartment was. Demonic cum was splattered carelessly across her walls and furniture. It was like Azalok had been operating a fire house indoors. One of her framed prints was knocked down and entirely marred by a coating of goopy seed. Even her television had a wad of cum right smack in the center of the screen.\n\n\"Ahhhh, sighed Azalok. The demon was on his feet, and stretched his arms out catlike above his head. \"I needed that.\"\n\n\"Dude,\" Jane managed to say. \"What the fuck did you guys do while I was out?\"\n\nStriding happily towards the bathroom, Azalok answered over his shoulder, \"Your best friend had a few ideas which were, let us say... creative.\"\n\nAs the demon disappeared into the bathroom, Jane managed to get to her feet, using the baseboard of her bed to steady herself. The extra weight of her baby bump was still taking some getting used to, and her sense of balance was even more distorted since she'd just been fucked until she blacked out.\n\nHer bestie was lying motionless on the carpet, with little droplets of demon cum spattering her ochre flesh like a Jackson Pollock painting. The cum seemed most concentrated in the valley of her sensitive breasts, where it had formed a thick little pool. The Kiwi girl was still conscious -- barely -- but seemed content to sprawl out prone for the time being.\n\n\"Oh my god, A,\" said Jane. \"You let him titfuck you didn't you?\"\n\n\"Uh-huh,\" mumbled the cumdrunk Alahna, only half paying attention.\n\n\"Ooo, you are such a slut,\" Jane said playfully. \"And look at what you did to my apartment! How are we going to clean this up?\"\n\nClucking her tongue with mock disapproval, Jane headed for the kitchenette. She retrieved several large, plastic water bottles -- the eco-friendly kind that she and her hipster friends loved -- as well as two large spoons. Returning, Jane tossed a bottle and a spoon beside Alahna's head.\n\n\"What's this for?\" asked the stupified New Zealander.\n\n\"If you help me scoop up this load and throw it in the fridge, I'll promise to share it with you later.\"\n\n\"Now that's a deal!\" said Alahna.\n\nThe two college girls set to work. They moved slow at first, still perking up from the draining attention Azalok had recently shown them. But as they worked they became more alert, growing excited at the thought of preserving so much of the potent semen for the future. Midway through their efforts, Azalok returned and watched their progress contentedly.\n\n\"You are a lucky pair,\" he remarked. \"For I do not often leave so much extra behind, and in Jane's case, this is the second time she has been so fortunate.\"\n\nWhen one bottle filled, they moved to another, and soon enough, three entire bottles were full. It wasn't quite as much as the first time Azalok visited, but some of the load had gone into Alahna this time, and some of it had ended up in hard-to-reach places, so Jane left it for a deeper cleaning later on. Just like a man to nut all over my apartment and leave me to clean it up, she thought.\n\nThey wrapped up their clean-up job and stowed the now-full bottles in the fridge. Alahna excused herself to the bathroom when they were done. Azalock had fetched a trio of beer bottles from Jane's fridge and opened them -- dark black stouts, perfect for a chilly winter day.\n\n\"Should I be drinking?\" asked Jane as she cautiously took the offered beverage. \"In my condition and all.\"\n\nAzalok waved a hand dismissively. \"My spawn is not so weak that mere alcohol will harm it. Do not mistake it for a fragile human child. Enjoy your beer.\"\n\nWhen Alahna returned, accepting her own brew from the demon, Jane took her turn in the bathroom. As she did her business, she had a moment of clarity looking over at the shower, and recalling how a simple mistake -- allowing Alahna to drink some of Azalok's cum -- had led to all of this. It's so weird, Jane thought, but doing this with Alahna just feels right.\n\nSoon Jane rejoined her bestie and her demonic lover in the living room. Without a word being spoken, they all migrated to Jane's bed. Jane ended up in the middle, with her gorgeous, naked best friend on one side, and her demonic baby daddy on the other. They reclined against the headboard, supported by Jane's vast collection of comfy pillows, and pensively sipped their beers. The dark, bitter stout warmed Jane's insides, and she caressed her baby bump absently. Her cheeks grew red -- she was a lightweight, and strong beers always went straight to her head. Her body was still absorbing the bit of seed Azalok had shot into her earlier, though she suspected Alahna had consumed quite a lot while Jane was out. Judging by the flush in her bestie's cheeks, Jane the Kiwi girl was feeling similarly giddy.\n\n\"What shall we do now?\" asked Azalok, breaking the silence at last. \"I must admit, having intercourse purely for recreation is more... enjoyable than I thought it would be.\"\n\n\"I kinda... want to snuggle,\" said Jane, biting her lower lip self-consciously.\n\n\"To snuggle?\" repeated Azalok, scratching his stubbled chin as if very intrigued by the notion, but unsure of how it worked. \"Hmm. Show me how.\"\n\nJane finished her beer and lay down on her side, back facing the demon and her face towards Alahna. The brown-skinned girl was watching intently, a hint of a coy smile on her face.\n\n\"Curl up behind me,\" said Jane over her shoulder. \"And put your arm over me.\"\n\nShe felt Azalok shift his weight and scoot closer. His solid, warm bulk pressed against her back, and he gently draped a powerful arm across her.\n\n\"Like this?\" he asked.\n\n\"Yeah, but... cozier.\"\n\nJane hugged his arm to her chest comfortingly and snuggled back into his embrace. His nose nuzzled into her hair, and his manhood, still prominent even when soft, nestled between her butt cheeks.\n\n\"There,\" said Jane, sighing contentedly.\n\nWith a vibration that reverberated through Jane's slender body, Azalok let out something halfway between a growl and a purr.\n\n\"This is... nice,\" he said with hesitation, as if it was an embarrassing admission.\n\n\"Aww, you two look so cute!\" said Alahna. \"Hold on, I want in on this cuddle puddle.\"\n\nThe athletic girl scooched closer, until her firm, fit tummy was up against Jane's baby bump. A wistful look was in Alahna's eyes as she reached a hand down to caress Jane's stomach. Closing her eyes, Jane felt she could sense the tiny life inside her, and something else: a faintly pulsating energy, like a little ember of hellfire in the pit of her stomach. This was the source of her insatiable lust, she realized, her heart rate picking up again at the thought. Azalok didn't just get me pregnant. His essence is... changing me, somehow.\n\nBefore she could dwell any longer, Alahna broke her train of thought.\n\n\"Boy or girl, you think?\" asked Alahna.\n\n\"Boy,\" said Jane instantly, not knowing why exactly, but feeling very sure.\n\n\"I agree,\" rumbled Azalok lethargically. \"My spawn has a masculine energy.\"\n\nPulling his arm from Jane's grasp, Azalok moved his strong hand lower to also cradle Jane's pregnant tummy. Suddenly feeling overwhelmed by affection, surrounded by her demon lover and her best friend, a few tears beaded the corners of her eyes.\n\n\"Awww, Janey, don't cry,\" cooed Alahna.\n\n\"I'm okay,\" sniffled Jane. \"It's just a lot, you know? I went from zero to pregnant in no time flat, and these hell-hormones are making me all emotional.\"\n\n\"Well, it's no wonder, love. You let this randy demon shoot his wicked goo all up inside you. You'll probably burst into flames if you enter a church now, you know.\"\n\nJane chuckled through her sniffles, and even Azalok rumbled in easy laughter. They relaxed into each other, dozing and saying nothing. The girls were blissfully spent, but Jane knew that Azalok wouldn't take long to get ready again, and lying nestled tightly between her naked bestie and lover were giving Jane impure thoughts.\n\nAfter several minutes of chaste, rejuvenating cuddles, Jane could feel a growing ache in her core. She stirred, adjusting her hips and pushing her butt back into Azalok's penis.\n\nWordlessly, Azalok moved against her as well, dry humping her supple ass and pressing his member tightly between her cheeks. She felt his cock swelling as it filled with blood, and Jane sighed in anticipation.\n\nAlahna was watching eagerly, and idly fondled Jane's tits as her and Azalok's humping became more insistent. Beads of silvery milk glistened at the ends of Jane's swollen nipples. Alahna leaned in and gently lapped it up, making Jane gasp as the Kiwi's tongue flicked over the sensitive points.\n\nFeeling Azalok's erection straining against her ass, Jane scooted up just a bit and lifted one of her legs. Azalok's hardening penis slipped into the aperture, and Jane closed her thighs around him. She knew he liked frottage, but was still pleased to hear his deep sigh of satisfaction at finding a cozy place for his dick to rest in.\n\nAlahna looked down between them and widened her eyes as she saw Azalok's cock poking out between Jane's legs.\n\n\"Oh. Damn. That looks super hot,\" said Alahna. \"Dirty, but hot. It's almost like you have a cock of your own, Jane.\"\n\nHearing Alahna say that sent a thrill through Jane -- truthfully, she'd been thinking the same thing, and wondering what it would be like if she really did have a penis.\n\n\"Oh yeah?\" she said, wriggling her lithe body sexily. \"Well, why don't you try sucking my cock?\"\n\nBy now, Azalok's burgeoning manhood was extending proudly from Jane's thighs, and she could feel it throbbing against her nether lips. Jane grasped the immense tool with both hands, her slim fingers unable to fully encircle it, and stroked it lightly. Imagining she was masturbating her own dick sent a little shudder of pleasure through her.\n\n\"Oh my fucking god,\" swore Alahna quietly. \"I swear I will never get used to how huge that thing is.\"\n\nShe scooted lower on the bed, until she was face to face with the infernal cock. Jane possessively grabbed a handful of her bestie's thick, dark hair, not pulling on it, but simply holding her head in place. Alahna gasped and shot Jane a sultry look.\n\n\"It isn't just for admiring,\" said Jane. \"My cock needs attention, A. Worship it.\"\n\nAzalok was indulgent, remaining gamely quiet during this little roleplay, but Jane felt a twitch in his cock at her dirty talk. His hellish dick swelled even larger until it was fully, furiously erect. Dark precum dripped from the tip and wet Jane's tan-colored bedsheets.\n\nWith gentle pressure, Jane forced Alahna's head closer to the monstrous cock jutting between her legs. The athletic girl dutifully spread her seductive lips as wide as she could, pressing her mouth against the bloated, fleshy glans. Even though Jane couldn't actually feel the sensation, she sensed Azalok's pleasure as Alahna sucked the tip of his cock. The demon's heart thudded in his chest, and he thrust against Jane's butt, forcing both of their hips to move. A bit more of the head slipped into Alahna's gaping mouth, but the flared crown was still outside.\n\n\"You have to try a little bit harder if you want to drink my cum,\" said Jane. \"Let's see if you can take the entire head in your mouth.\"\n\nShe smiled wickedly down at her friend, feeling insanely turned on. The pressure of Azalok's cock against her sex and the feeling of control as she manhandled Alahna was driving Jane crazy with lust. The Kiwi girl gave a muffled groan at Jane's words, glancing up with a look in her sultry brown eyes that was half aroused, half apprehensive.\n\nUsing both hands, Jane grabbed two fistfuls of Alahana's hair and increased the pressure. Azalok thrust their hips forward at the same time, and with a mighty push, the wide corona of his penis scraped past Alahna's lips and teeth.\n\nShe'd taken the entire head.\n\nJane knew from experience how completely full Alahna's mouth must feel right about now, and there was likely a delicious ache in her jaw. Droplets of thick, hot pre were probably dribbling down her throat. Alahna's sensual lips were stretched in a tight circle, looking almost grotesque. Only Azalok's magically-infused seed could let her body stretch that much without hurting her.\n\n\"Good girl!\" purred Jane. \"You deserve a reward, A. How about a blast of my cum?\"\n\nAlahna moaned happily at the idea, making desperate eye contact with Jane to show how much she wanted it. Azalok flexed his balls, which drew up firm and tight against Jane's thighs.\n\n\"Here it comes, A! Get ready! Ah! Ah, yes!\"\n\nHis urethra swelled with hot bust, and Jane swore she could actually feel it explode into Alahna's waiting gullet. Alahna made lewd, wet suckling sounds as she struggled to swallow it all. The stimulation against her sex and the erotic sight of her sexy friend struggling to swallow several ounces of potent cum was too much. Jane had a small orgasm, shuddering in Azalok's powerful arms.\n\nJane released her bestie, and Alahna pulled her face off of Azalok's infernal cock with a wet pop, leaving a trail of cum and saliva that drizzled to the sheets.\n\n\"Wow,\" she said, almost to herself. \"I did it.\"\n\n\"Yeah,\" said Jane, panting in between words as she came on Azalok's shaft. \"Nice job. A-plus.\"\n\n~~~~~~\n\nAlahna ran her tongue across her gums and palate, collecting the sticky, salted caramel-flavored seed that had collected there. She swallowed hungrily, relishing the warmth in the pit of her stomach. Her lust was taking over again. Time to make a few more bad decisions, she thought, smiling to herself.\n\nA deep baritone chuckle rumbled in Azalok's throat. \"You humans have some very creative fantasies,\" he remarked. His cock was still throbbing insistently between Jane's thighs, and she knew he wouldn't be satisfied with just one shot.\n\n\"What are we going to do about that?\" purred Jane, clamping her legs suggestively. The pregnant girl had just come again, and was stretching languorously as she relaxed into her hunky, demonic lover.\n\nAzalok growled in response. \"I leave that up to you two. But I will not waste any more of my spend; from now on, I intend to deposit it all within one of your nubile bodies.\"\n\n\"Ooo,\" said Jane. \"You should fuck Alahna. I think she's ready.\"\n\n\"Are you sure?\" asked Alahna. \"Fitting the head in my mouth was one thing, but I don't know about actually having sex with that monster.\"\n\n\"I agree with Jane,\" said Azalok. The demon peered appraisingly at her over Jane's slender shoulder. \"My essence has infused your womanhood by now. You should be able to take me without discomfort.\"\n\n\"C'mon, A,\" pleaded Jane. \"Having him stretch you is the most incredible feeling. I'll be right here to support you the whole time.\"\n\nAlahna's heart was thudding as she considered their words. They're making a good case, she thought. Jesus Christ, am I actually going to do this? He loins were on fire as she considered letting that handsome, impossibly well-hung demon take her. Under normal circumstances, Alahna's somewhat hesitant attitude towards sex might have prevailed. But at that moment, naked and flushed and horny as hell, her irrational side prevailed.",
        "\"Fuck it. Okay,\" said Alahna. \"But no busting inside me. I still don't want to get pregnant.\"\n\n\"Very well,\" growled Azalok, clearly disappointed at not getting to breed another fertile human. \"Let us get into position. It will be easiest if you lay on your back at the edge of the bed.\"\n\nThe three of them rearranged themselves as Azalok suggested. Alahna scooted to the edge of Jane's bed and let her legs dangle off the side. Azalok stood up facing the Kiwi girl, and Jane kneeled on the floor beside him. Looking to her bestie, Alahna got a supportive grin and a thumbs up, as if to say, you got this, girl. She wished she shared Jane's confidence.\n\nTaking a firm grip on her calves, Azalok raised Alahna's legs, spreading them wide and pushing them back until they were bent at an acute angle from the athletic girl's body. Alahna was used to some serious stretching, and having her body bent this way made her muscles burn in a good way. She enjoyed vigorous sex that tested her flexibility, and she was glad to see Azalok did as well.\n\nSidling into the space between her thighs, Azalok layed the heavy weight of his cock on her abdomen with a fleshy smack, letting Alahna appreciate its length and girth. With his balls resting against her vulva, Azalok's tremendous penis reached past her belly button and partway to her breasts. A bead of dark precum dripped onto her ochre skin, feeling steaming hot. She gasped at how huge he looked, again doubting she could take it.\n\n\"I will stop if it is too much for you,\" said Azalok, as if sensing her thoughts.\n\nShe nodded and focused on her breathing, in and out, trying to calm herself down. As she settled down, she was surprised that despite the pleasant ache in her cunt from all the sexual activity so far, she definitely wasn't ready to quit. How many orgasms have I had today, anyway? Once when she'd masturbated with Jane, again when Jane had gone down on her, a third time when Azalok titfucked her and shot a single rope of cum into her pussy... and none of those had been small ones, either. And yet, it seemed everything had been building to this moment. I'm deep in Jane's fucked up, oversexed world now, and God help me, I'm loving it.\n\nMeeting Azalok's midnight blue gaze with her golden brown eyes, Alahna bit her plump lower lip and nodded. The meaning was clear, even without words: fuck me.\n\nGrowling with approval, Azalok took a step backward, dragging his heavy cock across Alahna's gorgeous brown skin and leaving a trail of dark precum down her belly. Soon his throbbing and spongy cockhead was resting against the athletic girl's sopping, puffy vulva. She looked between her own legs and marvelled at how his titanic glans filled the space between her thighs.\n\nAzalok began to thrust, easily parting her drenched nether lips. His tip explored her entrance, squirting a dollop of oily nut inside. It rolled down the length of her channel, soaking into her inner walls and lubricating her even further. He took his time, making shallow thrusts and gentle progress. She could see his jaw clenching as he controlled his urge to penetrate her hard and fast. For a demon, he's surprisingly considerate.\n\nJane slithered onto the bed on her belly and curled up beside her bestie. Massaging Alahna's flushed tits and gently pinching her jutting nipples, Jane planted little smooches along Alahna's collarbone and neck.\n\nAfter more slow, careful progress, most of the demon's glans was inside her, save for the ostentatious corona. His precum was still trickling into her prodigiously, until her pussy was practically overflowing. Wetness leaked down her thighs and soaked into the sheets of Jane's bed. Azalok increased his pressure, forcing Alahna's labia to stretch into a wide, tight circle. She gasped at the sensation, still not believing her own flexibility. The, with a slick slurping sound, her quim swallowed his cockhead entirely, closing around his crown and trapping it inside.\n\n\"Oh my god,\" she whimpered. \"I feel fucking stuffed already!\"\n\nHe gave her a quizzical look, cocking one eyebrow as if to say, shall I continue? Alahna nodded as firmly as she could manage, although her mind was getting hazy from the intense sensation of the demonic penetration.\n\nNow that the fat head of his cock had prepared the way, his vascular shaft slid in much more easily. Azalok bore down, bending her knees back so that they actually touched her shoulders. Alahna's eyes went wide in disbelief at her body's ability to bend like that -- she was flexible but not that flexible. The intense position, like some kind of grotesque yoga, should have hurt, but Alahna found her body was stretchier than normal, and only felt an intense but pleasant burn in her muscles. Azalok kept her in a full mating press as inch after inch of hellish cock slid into her depths.\n\n\"That looks so fucking hot,\" said Jane. The pregnant girl placed a slender hand on the visible bulge in Alahna's toned abs, made by Azalok's rampant cock. The bulge elongated as he went deeper, reaching her belly button. She gasped as the blunt head of his dick bumped up against her cervix.\n\n\"He just hit your cervix, didn't he?\" asked Jane, between tender kisses on her friend's neck.\n\n\"Yes,\" gasped Alahna. \"No one's ever gone this deep before.\"\n\nShe flexed her inner muscles, earning a gasp of pleasure from Azalok. Part of Alahna's fitness routine was regular kegel workouts, which she now put to great use, clamping down hard on the humongous invader, releasing, and then repeating.\n\n\"By the frozen waters of Cocytus!\" cried Azalok. \"Keep doing that.\"\n\n\"Ooo!\" said Jane. \"He's swearing about hell stuff, that means he's about to give you some bust.\"\n\n\"Oh fuck,\" said Alahna, struggling to form coherent sentences despite the tidal wave of pleasure threatening to crash over her. \"Is that... you know... safe?\"\n\n\"Fear not,\" said Azalok through gritted teeth. \"Conception would only occur if I gave you my entire load. A single spurt holds no danger.\"\n\n\"Okay,\" said Alahna, head swimming at the blissful sensations radiating from her core. Despite her hesitation, she couldn't deny her desire to feel more of his abominable cum filling her pussy. \"I'm trusting you, dude. Give it to me.\"\n\nJane wriggled off the bed and kneeled down next to Azalok. She peered luridly at where they joined together. Then, shooting Alahna a wicked grin, she cupped Azalok's balls, swollen with semen and primed to fire.\n\n\"I can actually feel all his cum churning and seething in here,\" remarked Jane. She gently caressed his infernal nuts, until with a bark of pleasure, Azalok rammed his cock forward, causing the gates of Alahna's womb to bow inward and open up a tiny bit. Azalok's slit found the aperture. His urethra swelled inside her as cum barrelled down the shaft, and then it shot through the breach with great velocity, splattering hotly straight into Alahna's womb.\n\n\"Jesus Christ!\" she shrieked, shivering with pleasure at the unbelievable sensation. Azalok had fired his seed directly into her uterus, and she could feel it oozing hotly along the sensitive walls of her core. That single blast had practically stuffed her womb full. She shivered uncontrollably from the sensation, feeling on the precipice of an incredible orgasm.\n\nLooking up into Azalok's darkly-stubbled face, Alahna saw a black fire smoldering in his midnight blues. His demonic side was rising to the surface. Raw, primitive hunger was written there, and she felt his cock throb desirously inside her.\n\nAzalok drew back several inches, and then, roaring primally, he slammed his dick home, crashing into her cervix. It bowed inward again, giving up even more ground to the invader. Her os opened up a bit wider, allowing a good chunk of his glans to fit snugly into the breach. Instinctively, Alahna clenched the muscles of her cunt rhythmically, attempting to milk even more glorious nut from him.\n\n\"By the Ferry of Styx!\" swore Azalok, gritting his teeth. \"So tight!\"\n\n\"Oh shit, here comes another one!\" announced Jane, who was still sensually massaging her demonic lover's balls.\n\nAzalok's penis swelled inside her once more as cum raced down its throat. His cock bucked powerfully and belched another huge gout of semen directly into her uterus, where it swirled and mingled with the thick seed already packing it full. Her womb bloated and stretched to accommodate what had to be almost a pound of bust at this point. Alahna could actually see her tummy gently swelling with its rich contents, until it was almost as big as Jane's.\n\nThe combination of internal sensation and visual stimulation was too much. Alahna came violently, quaking in Azalok's unbreakable grip. Her eyes rolled back in her head and her tongue lolled from her mouth. Low, husky grunts of slutty satisfaction issued from her throat.\n\nThrough her orgasm, Alahna was dimly aware of Azalok bearing down harder and continuing to press against her cervix. She could feel her womb's gate beginning to give under the pressure of his unstoppable cock, and she felt her resolve slipping away. I don't want to get pregnant tonight... do I?\n\nAzalok's control seemed to be slipping as well. Although he'd promised not to breed her, his demonic side was hungry and bristling to let loose. She fixed her glassy gaze on him, not trusting herself to speak for fear of what she might ask him to do. Overwhelmed by the hellish magic infusing her, Alahna felt ready to submit entirely to the dreamy demon, body and soul...\n\n~~~~~~\n\nJane came to her bestie's rescue. She knew things were getting out of hand after the second burst, when she'd pressed an ear to Azalok's packed nutsack and actually heard the violent roaring of the cum churning within. It was like a tsunami of seed, crashing towards its goal: the insemination of a fertile human womb.\n\nOh shit!, thought Jane. He's gonna knock her up if I don't stop this!\n\n\"Wait!\" Jane protested, but neither her bestie nor her lover were in any mood for distractions.\n\nBlaming herself for egging her friend on and working Azalok to a fever pitch by stimulating his balls, she knew she had to take responsibility. Realizing there were probably only seconds before Azalok fully penetrated Alahna's womb and commenced breeding her in earnest, Jane moved with lightning speed.\n\nDiving onto the bed, Jane crawled on all fours over her bestie and straddled Alahna's beautiful face, now flushed and glazed over with orgasm. Jane knew Alahna wouldn't object right now to being impregnated, but somehow it felt unfair -- a person was liable to agree to anything with Azalok's abominable cock assaulting one's womb like a battering ram.\n\nDesperately, and without really thinking things through, Jane presented her butt to Azalok. Reaching back with both hands, she gripped the fleshy cheeks of her cute posterior and spread them apart, lewdly displaying her puckered anus and puffy sex.\n\n\"Fuck my ass,\" Jane begged, looking over her shoulder at Azalok's demonic visage, furious with the need to breed. Her slutty plea snapped him out of his trance, and he focused on her, hesitating as his brow furrowed from the effort of halting his advance into Alahna's womb.\n\n\"What?\" he asked through clenched jaws. \"And stop now? I am... so... close.\"\n\n\"Fuck my ass,\" she repeated. \"Go balls deep in my anus and blow your load in my guts. I want it, Azalok.\"\n\n\"Are you sure you want that?\" he said in his rumbling baritone, clearly intrigued by the idea. \"Do you know what you are asking?\"\n\n\"Yes!\" she insisted. \"I need to feel every inch of your dick inside me. You can't penetrate my uterus with your spawn in there, so it'll have to be my ass. Please, Azalok, buttfuck me like the stupid, slutty broodmare I am.\"\n\n\"So be it!\" shouted Azalok.\n\nMoving with alarming speed, the demon unsheathed his supreme cock from Alahna's pussy, eliciting a moan of disappointment from the horny fit girl. Releasing Alahna's legs, Azalok took hold of Jane's thighs and yanked her towards himself. She slid back along the bed, still straddling her best friend, until their rounded tummies pressed together -- Jane's bulging from her baby, Alahna's from nothing but cum.\n\nNow face to face with Alahna, Jane noticed that the Kiwi girl's pretty, mellow-brown face was a mess. Tears trickled from her attractive amber eyes and saliva drooled from her luscious lips. Though she looked absolutely cumdrunk, a note of concern made its way into her features.\n\n\"Janey, what are you doing?\" she asked quietly.\n\n\"Saving you from catching a baby,\" hissed Jane. The full weight of what Jane had just agreed to -- taking Azalok's monstrous cock in her ass -- suddenly hit her. \"Oh god, what am I doing?\"\n\nBut it was far, far too late. Azalok, in full demon-fury mode, had a firm grip on her ass. Spreading it open, he set his cockhead, slick and greasy with his and Alahna's mingle juices, against Jane's anus.\n\nAzalok, to his credit, was able to control his base desires enough to take it slow. He let his bulbous glans simply rest against her rear entrance. Greasy precum drizzled steadily onto her anus, and she felt its magic going to work almost immediately. She could feel her butthole relaxing and loosening, and the taboo nature of what was about to happen sent a nervous thrill through her loins.\n\nBelow her, Alahna gave her an affectionate, slightly condescending smile, and tenderly brushed Jane's hair back from her face.\n\n\"Oh, Jane,\" said her bestie. \"Always biting off more than you can chew. What am I going to do with you?\"\n\n\"Hush,\" Jane hissed backed. \"I'm about to get my ass blown out by a demon, the least you could do is be supp-HUUURRGGGH!\"\n\nShe stopped talking and let out a guttural moan as Azalok pushed his cockhead into her ass. At first the pressure on her tight ring was almost unbearable as his impossibly fat glans forced its way in. The tip made an aperture just wide enough to squirt some oily pre into her bowels, and Jane felt her discomfort fading as the magic infused her innards directly. Azalok increased his pressure, gripping her ass so tight his fingernails dug into Jane's soft flesh, and gradually more and more of his head forced its way past her tight anus.\n\n\"FUCK!\" Jane managed through tightly clenched teeth. Azalok was massively bigger than any cock Jane had ever taken in her ass, and now she was worried he might do her permanent damage.\n\n\"Oh Christ,\" said Alahna, reacting to Jane's intense expression. \"Do you need to stop?\"\n\n\"No!\" Jane shouted, though she was gritting her teeth so hard that the veins in her neck were bulging out. \"I can do this! Come on, you bastard, fuck my ass!\"\n\nAzalok growled animalistically in response and applied serious, unrelenting pressure. His flared corona stretched her tight anus to the breaking point. Then, with an astounding feat of flexibility, her rear entrance opened just a fraction wider -- enough to allow his crown to slip inside before closing tightly around it.\n\n\"Yes!\" barked Azalok triumphantly. \"Ah, Jane, what a good and willing slut you are. Do you know how long it has been since a human willingly gave me her ass?\"\n\nJane couldn't answer. The painful pleasure of having her butt violated by his hellish cock was too much. A steady gush of pre soaked into her bowls, warming her innards and suffusing her with more enchantment. His ensorcelled cum dulled the pain, until only an intense carnal pleasure remained.\n\nAzalok suddenly moved to rearrange their position. Grabbing Jane firmly about the waist, he lifted her off hands and knees and pulled her to his chest, keeping his penis firmly planted in her butt the whole time. He carried her like that as he moved into a seated position on the bed, legs stretched in front of him. Settling back against the headboard, the demon hugged Jane into his lap. In this new configuration, gravity helped several more inches of Azalok's mighty cock slide into her ass.\n\nJane opened her mouth to shriek but nothing came out. This should be impossible, she thought incredulously. Everything she knew about anatomy said there was no way his hellishly huge dick should fit in her butt, yet nevertheless it had forced open her anus and now seemed to be rearranging her guts to make room.\n\nAn incredible pressure had built in Jane's milk-laden tits as Azalok claimed her ass, and now they began to leak little droplets of silvery fluid at an alarming rate. The demon seemed to notice, and fondled her swollen breasts as he screwed her lower onto his shaft. The pressure slaked as milk squirted out in steady trickles down Jane's chest. Her pink nipples had swollen to long, aching points that would make erasers jealous.\n\nAbout half his cock had gone up her butt now, and Jane felt her innards shifting unnaturally to accommodate it. She could feel the mass of his dick pressing internally against her fecund womb, where the growing life there seemed to react and pulsate with vital energy. Azalok's lips ghosted along her ear, and he spoke to her in a low, predatory growl.\n\n\"You can't imagine how hard it was to stop myself from inseminating your friend. I hope you're prepared for the consequences.\"\n\nAzalok grabbed both of Jane's shoulders and forced her down with all of his demonic strength. Jane really did scream this time, a primal cry of sinful pleasure as every inch of infernal cock impaled her ass, forcing her snug rectum to fit its shape. Jane's soft buttcheeks came to rest on Azalok's hugely swollen balls, and she could feel them throbbing beneath her. The demon's sac felt scaldingly hot against her flesh, and she knew how full it must be of volcanic sperm ready to erupt. He held Jane in place, hugging her possessively from behind, and softly bit her neck and collarbone as he let her get used to feeling so impossibly full.\n\nAlahna had recovered somewhat from her near-breeding, and now the gorgeous Kiwi rolled over and crawled on all fours over to the rutting couple. Her eyes were wide with amazement.\n\n\"Oh, honey,\" said Alahna chidingly. \"You've really done it this time. Is his entire dick up your ass?\"\n\n\"Yes,\" Jane groaned. \"Oh Christ, A, it's like he's turning my whole body into a pussy.\"\n\n\"You asked for this,\" growled her lover.\n\nAzalok grabbed Jane's chin possessively and twisted her face around so that he could capture her lips. The demon kissed her hungrily, suckling her lower lip and plundering her mouth with his tongue. She felt his cock throbbing hotly as it doused her intestines in steady squirts of pre, plugging her up so tight that the fluid had no place to go. She wriggled her hips and felt his penis churning her innards.\n\nBreaking their kiss, the demon lifted Jane's hips a few inches, letting some of his cock slide free of her vice-like anus. Then dropped her back down so that her butt met his hips with a fleshy smack. Jane squealed in response, eyes rolling back in her head. This shouldn't be possible, she silently told herself. My demonic baby daddy is blasting my ass, and probably doing permanent damage to my internal organs. Great decision, Jane.\n\nAlahna scooted in closer and took over fondling Jane's tits. Azalok worked her into a slow rhythm, each thrust driving more and more sense from her brain. The incredibly intense fullness she felt was threatening to overwhelm her even as it drove her towards a tremendous climax.\n\nThe hellfire in Jane's belly began to throb. She put both hands on her baby bump and felt the energy radiating from it. Somehow her body was changing, becoming more receptive to Azalok.\n\nAnd she liked it.\n\nInstinct took over. Jane found the ability to flex her internal muscles in a devilish rhythm, starting from her anus and working up. She milked his cock from bottom to top, feeling the texture of his fat urethra and pulsing vein. Pre was leaking into her at an alarming rate and she knew that Azalok, already close to bursting from fucking Alahna, wouldn't last long. Jane writhed in time with Azalok's thrusts, humping him with her hips even as she sluttily squeezed her innards around his titanic dick.",
        "\"By Lucifer's black wings!\" shouted Azalok. \"Your human body should not be capable of such pleasures!\"\n\nHis fucking grew increasingly fierce and erratic, forcing Jane to struggle to keep up the pace of her stimulation as she flexed her inner muscles in time with his thrusts. She was bouncing in his lap, continually reamed by infernal cock, and each impact of her soft butt against his powerful hips made a fleshy, satisfying thock.\n\nJane was close to her limit as well. She tilted her head back, closing her eyes and focusing on clenching her muscles rhythmically, on feeling his essence suffusing her body, on the blazing hellfire in her soul. Jane felt a soft touch on her engorged clit and her eyes shot open. Her bestie's beautiful amber orbs were looking back at her. Alahna stroked Jane's pearl sensually, and the Kiwi girl was clearly loving watching her friend getting gaped by the demon.\n\n\"Cum for me, Janey,\" said Alahna. \"Come with his cock up your ass.\"\n\nJane shrieked in response, obeying Alahna's obscene command. The stimulation of her clit sent her over the edge, and her body went crazy. Violently orgasming, Jane's limbs quivered uncontrollably, and her innards spasmed wildly around Azalok's cock. She tossed her head back, cursing wordlessly, eyes rolling back in her head, tongue hanging out stupidly as she came like a bitch in heat.\n\n\"Yes!\" barked Azalok. \"Ah, good girl! Give yourself to me entirely.\" His lips brushed his ear as he said in a low, half-whispered growl, \"You are mine.\"\n\nAzalok yanked her onto his cock one last time, shouting with triumph as he buried his penis as far as it would go. Jane felt his heavy nuts flex beneath her ass. His cock bulged inside her as semen rocketed up his urethra. Boiling hot spunk exploded from the tip, spraying down her guts like a power washer. Jane shrieked and wriggled in his grasp, actually rising up a couple of inches from the force of the seed impacting her insides. But Azalok held her firmly, gripping her slender body with both of his strong arms, and he forced her back down to receive his next rope.\n\nThe second blast came soon after, making Jane quake as the scalding bust filled up her guts. Having no place to go, it was coursing through her plugged bowels and rising like a flooding ship. The third blast followed, and Jane could feel her organs swelling to accommodate being stuffed with dark, greasy nut. Dimly she knew this should have been impossible, disgusting, even, but it was as if his ensorcelled cum was changing her body from the inside-out, purifying it as it coursed through her.\n\nThe fourth burst forced the flood of wicked cum up to the valve of her stomach, which bowed under the pressure. It buckled under the force of the fifth rope, and now Jane's tummy was being filled from the wrong direction. The debauchery of it melted Jane's brain. Explosions of pleasure radiated from her clit, which throbbed almost painfully as Alahna continued to stroke it in lazy circles.\n\nAfter the sixth and seventh blasts of seed, Jane's stomach was full to bursting, like she'd eaten a huge meal. Her baby bump was pushed outward by her bloated tummy, making her look even more pregnant than she really was. Silvery milk was leaking from her breasts at an alarming rate.\n\nThe eighth blast pushed the rising tide of cum against the upper valve of her stomach, making that one bend and give way as well. The ninth blast forced the torrent of sperm into her esophagus. Jane's eyes shot open with surprise. This is too much. This can't be happening.\n\n\"Alahna,\" Jane managed to say, her body quaking and trembling as she came. \"Something's happening. There's too much cum inside me... it's going to... oh fuck...\"\n\nShe jumped as the tenth blast hit. Cum was rising in her throat, and Jane tasted sea salt and caramel on the back of her tongue. Trickles of bust ran out of the corners of her mouth. Alahna leaned in to investigate, her golden brown eyes widening as she admired the cum leaking over her bestie's lips. Alahna licked Jane's chin, capturing the little trails of seed hungrily.\n\nThe eleventh blast hit, and Jane sensed what was coming. Instinctively she tried to close her mouth, but it was no use. The cum in her throat was surging upwards like a geyser, forcing her jaw open.\n\nJane turned into a cum fountain.\n\nShe tilted her head back as cum sprayed from her mouth. It flew almost to her ceiling before raining back down on the bed, splattering her and Alahna in droplets of inky seed. Silver fluid squirted forcefully from Jane's swollen nipples. She knew she should be suffocating, drowning in cum, but somehow this felt so right. Azalok had truly claimed her now, body and soul.\n\nAs the twelfth blast welled up inside her, Jane prepared for another eruption of cum. Alahna surprised her by grabbing her face in both hands and planting her generous lips right on Jane's cum-soaked mouth.\n\nShe kissed me! thought Jane, knowing what that meant for Alahna. She only kisses people she's really serious about, which means... \n\nThere was not time to dwell on the implications. Having this be their first kiss was incredibly filthy, and Jane came with renewed intensity, vibrating with pleasure as she kissed her best friend desperately. Pressure built in Jane's body until a surge of cum rocketed from her mouth, passing straight into Alahna's. The athletic girl moaned and attempted to guzzle it all down with a lewd, suckling sound. Some squelched between their lips, drizzling down onto the Kiwi's fantastic tits. Their cum-soaked tongues lapped against each other, and Alahna moaned into Jane's open mouth.\n\n\"Incredible,\" said Azalok through gritted teeth. \"Just... a bit... more!\"\n\nThe final, thirteenth burst exploded into Jane's ass, forcing one last geyser of cum to erupt from her mouth. Alahna did her best to catch this one as well, though much of it fell sloppily between the two girls, running down their necks and tits. Alahan's ochre skin and Jane's pink skin were both thoroughly marred by Azalok's oily bust.\n\nTheir kiss broke at last, little strands of cum and spit still connecting their mouths. Alahna was panting heavily, and Jane coughed wetly, clearing some of the nut still in her throat. Amazingly, she hadn't drowned from the flood.\n\n\"Jesus Christ,\" said Alahna. \"I can't believe that just happened. I'm so full of cum I can feel it sloshing around.\"\n\nJane took a moment to admire the gentle swell in the athletic girl's mellow-brown belly, as big as her own baby bump. Still, she couldn't help but remember how big she'd been when Azalok had pumped an entire thirteen-rope load into her fertile womb. She'd looked nine months pregnant and ready to pop.\n\n\"You think you're full?\" asked Jane. \"Try getting knocked up by this beast.\"\n\n\"Maybe next time,\" said Alahna, waving a tired hand. She collapsed on the pillows and curled up contentedly.\n\nSighing hugely with satisfaction, Azalok rolled them over so that he was spooning Jane. He withdrew his softening penis slowly, so as not to yank too hard on her guts. When it popped free, a steady trickle of cum came with it, soaking into the tan sheets of her bed.\n\nJane's bed -- and most of her apartment for that matter -- were absolutely soaked in Azalok's seed. But she didn't care. Jane was so tired and absolutely satisfied that all she wanted to do was sleep. She curled up behind Alahna, with Azalok behind her. Sandwiched between her bestie and her lover, Jane drifted off to a well-deserved rest.\n\n~~~~~~~\n\nJane sat up in darkness, suddenly coming awake, and for a moment she thought Azalok had ghosted her again. A moment of panic gripped her. And then...\n\n\"Over here,\" said a rumbling baritone voice. It was then that Jane noticed Azalok standing by the window, gazing out across the city at the river in the distance. Moonlight cast him in a shadowy silhouette, making him appear little more than a pale phantom. \"I meant not to wake you. The moon is quite beautiful tonight.\"\n\nJane climbed out of bed slowly, adjusting for the weight of her baby bump. She was careful not to disturb Alahna, but the brown-skinned girl was out cold and snoring lightly. The apartment was chilly on the January evening, so Jane wrapped her naked figure in a spare blanket from the bed. Jane padded across the floor to where Azalok stood by the window. The demon was naked as well, hands clasped behind his back pensively.\n\n\"Is your friend asleep?\" asked Azalok.\n\n\"Dead to the world. I slept for twelve hours straight after our first time.\"\n\n\"A typical reaction. You, however, seem to be developing a tolerance.\"\n\nJane felt somewhat wistful in the quiet, early-morning moment. She leaned over to her dresser and opened the top drawer, where beneath her underwear was stowed a nondescript wooden box. Inside was a lighter and several deftly-rolled joints. After raising the window and letting in the cold night air, Jane lit the tip of the joint and puffed away at it until the paper and weed caught fire. With the blanket hanging open, any neighbors who happened to look would have gotten a nice view of Jane's tits, but she didn't mind. Taking a huge lungful of smoke, Jane exhaled slowly, feeling a pleasant fuzzy warmth settling over her.\n\n\"Want some?\" she asked, offering the joint to her demonic lover.\n\n\"Why not?\" Azalok replied. \"It has been a while since I partook of cannabis. Is this... what is the phrase... 'hydro?'\"\n\nJane couldn't help a crazed giggle at hearing Azalok pronounce the phrase \"hydro\" with his stentorian elocution.\n\n\"You know it,\" she replied. \"Only the finest since I got my medical card.\"\n\nAzalok puffed on the joint, inhaling slowly before blowing out a neat circle of smoke.\n\n\"You use this to treat a medical condition?\" he said skeptically.\n\n\"Uh-huh. Acute anxiety resulting from being pumped full of demon cum.\"\n\n\"Ah, of course,\" he said with a sardonic chuckle. \"It does strike me as odd how uptight you humans are about drugs. In my home -- Dis, the capital city of Hell -- anything goes.\"\n\n\"Yeah, I'll bet,\" said Jane, rolling her eyes. A ludicrous thought occurred to Jane, and she couldn't help but ask. \"Does Satan toke?\"\n\n\"Oh, certainly. It is not his 'thing', so to speak, but he has been known to enjoy a reefer from time to time.\"\n\n\"Huh.\"\n\nThey lapsed into silence, passing the joint back and forth until it had burned down to a little square of a roach. Jane took one last puff and flicked it out the window. She impulsively leaned against Azalok, and he put his arm around her affectionately. Several thoughtful minutes passed quietly.\n\n\"What's happening to me, dude?\" asked Jane in a soft voice. \"All the stretching stuff with my body, this baby growing in me... I can feel myself changing. Am I even still human?\"\n\nAzalok made a low \"hmm\" as he pondered the question.\n\n\"I... am unsure. You are an anomaly, Jane. I mean that as a compliment. In all of my years, I have never met a human quite like you. Your child has the makings of a powerful being, and I believe that to be as much because of you as it is of me. There are certain precedents for this sort of thing, but... I must consult the Archives of Pandemonium to learn more.\n\n\"In any case, consuming so much of my seed is certainly a factor. I fear that if we continue to have liaisons such as this, your condition may become... irreversible.\"\n\n\"Oh,\" said Jane. It was all she could manage in her weed-addled state. She snuggled into his comforting arms, and Azalok put an affectionate hand on her swollen belly, feeling the life within. \"Listen, Azzy.\"\n\n\"Azzy?\"\n\n\"Yep. I decided to give you a pet name. Don't argue. Listen, Azzy. I like you. I like the sex we have. I mean, I really like it. And we're gonna have a fucking baby together, in like two weeks, according to you. So I don't care if I end up permanently altered or whatever -- just don't ghost me for a week this time, okay?\"\n\n\"Okay.\" He planted an affectionate kiss on her head. In spite of herself, Jane felt a little tingle. God damn it. I am not falling for this dude. No way. \"Perhaps next time, we can do this at my place.\"\n\n\"Your place?\" asked Jane. \"You're inviting me to Hell?\"\n\n\"Why not? If you are to have a role in this child's future, you shall have to see it eventually.\"\n\n\"Hmm,\" said Jane thoughtfully. \"So I'm not just a broodmare, then?\"\n\n\"I am open to discussing the matter.\"\n\nJane considered what he was telling her. Instead of her life going back to normal in two weeks, she might end up actually raising the half-demon baby inside her. The possibility brought with it a whole host of questions -- would she have to leave school? Where would they live? And what the hell would she tell her parents?\n\nBut if she was truthful with herself, she had to admit that none of those things seemed to matter that much. With the river reflecting the moon outside her window, the pot she'd smoked making her brain pleasantly foggy, and her demon lover's comforting arms around her, she could only think about what was right ahead of her.\n\nSo she answered honestly.\n\n\"Hell, huh? Yeah. Yeah, I think I'd like that.\"\n\n~~~~~~\n\nWARNING! END NOTES APPROACHING!\n\nWell, friendly readers, I find I have once again over-delivered on sex and under-delivered on plot. What can I say? Blame these rowdy characters, they just seem to insist on perverted behavior. To be honest, this one got away from me a little bit. I meant for it to be 12,000 words and finished a month ago, but, well, look how that turned out.\n\nI have more stories in mind for Jane and Azalok -- it seems to me that all kinds of kinky stuff could happen in hell! But what abominable experiences await Jane in the underworld? And could they possibly top the absurdity you've just read? You'll just have to stay tuned to find out!\n\nEND NOTES CONCLUDED. SEE YOU, SPACE COWBOY.\n\n \n"
    ],
    "authorname": "henryhawkmoor",
    "tags": [
        "breeding",
        "cum inflation",
        "cumflation",
        "threesome",
        "huge cock",
        "anal",
        "all the way through",
        "ffm",
        "excessive cum",
        "pregnant"
    ],
    "category": "Sci-Fi & Fantasy",
    "url": "https://www.literotica.com/s/janes-demonic-threesome"
}
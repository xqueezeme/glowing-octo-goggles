{
    "title": "Grace Ch. 10",
    "pages": [
        "Grace and I stayed on the wide couch in the sunroom for 20 minutes after we finished making love. All too soon, though, she had to get up--my cum was threatening to leak out of her and make a mess. Cupping herself with a slightly embarrassed grin, she padded off into the family room to get to the bathroom, leaving me alone to collect my thoughts.\n\nFirst and foremost was \"Thank god I finally got to do that!\" I'd been Grace's teacher all fall, and spent a lot of time being annoyed with her or fantasizing about her sweet ass and sultry lips. When I became her tutor, things heated up right away thanks to her mother's blunt instructions. My second visit was capped by a \"thank you\" blowjob that created some serious awkwardness between us. The next weeks were better, but I was also spending a LOT of time sleeping with Grace's mom Lindsey. That was great in itself, but there was one complication: they apparently shared a lot of girl-talk about me. Amazingly, Lindsey had told me Grace was turned on by the whole situation and gave me a free pass as far as sleeping with her daughter. She'd even gone so far as to invite me over on a Sunday when she knew Grace and I would be alone! I silently blessed her twisted little heart.\n\nGrace came back in, still naked but looking a little ill-at-ease. I diagnosed her issue--post-coital awkwardness--and jumped right into a solution.\n\n\"Come on!\" I said briskly. \"Let's go steal a robe for me from your dad and get one for you--it's too cold to be walking around the house like this!\"\n\nShe giggled, glad of an activity and the chance to return some modesty and normality to the situation. She had, after all, been very open and sexual with me, and although she showed signs of amazing natural sensuality, she was still a kid. I smiled when I thought of how my own 18-year-old self would have handled a situation like that!\n\nI followed her into the family room, then up the stairs to her parents bedroom. She stopped at the doorway and let me go in first. When I looked back at her to see what she was up to, she grinned wickedly.\n\n\"The robe is in the bathroom over there...I think you know that, right?\"\n\nI laughed and admitted I knew the way. Stepping quickly inside, I found a white folded robe that fit me and belted it snugly around my waist. When I turned back, Grace had vanished. I crossed to the doorway and saw her coming back down the hall belting her own pink fleece robe. She grinned as if she'd been caught doing something wrong, then fluffed out her hair over the collar.\n\n\"Come with me...I want the rest of my coffee!\" I said kindly, still trying to soothe her jangled nerves. \n\nShe nodded and followed me down the stairs, through the family room, and into the sunroom. We each grabbed our cup, but instead of sitting down on the \"scene of the crime\" couch, I turned and led her back into the kitchen. Not to our tutoring table, but to the couch where I had my first encounter with Lindsey. I sat down and Grace joined me. I took a sip of coffee and turned toward her, ready to talk. Charmingly, she mirrored my action, then realized her flat white was cold, stopped abruptly, and set it aside.\n\n\"Let me just say this right now so we can move on, okay?\" I began.\n\n\"Okay,\" came her whispered response. Her gaze held mine seriously.\n\n\"What we just did was completely amazing. I never imagined you and I would end up like that, and I feel like the luckiest man in the world right now.\"\n\nI was laying it on thick again, but I had my reasons. She smiled a little bit but stayed quiet.\n\n\"And...we still have to find a way to work together, you know?\"\n\n\"I know.\"\n\n\"So as much as I could spend every minute I'm with you dreaming about your body, or doing something about it, I think we have to figure out what's okay for today and what's okay for the future. Does that make sense?\"\n\nShe nodded, thinking about the implications.\n\n\"Do you want to think about it for a little while and do some work, or do you want me to leave?\" I asked quietly.\n\n\"I think...\" she began uncertainly. \"I think we should do some work,\" she said after a long pause for reflection.\n\n\"Okay,\" I said with a tight smile. \"I think that's a good idea. We'll talk more later.\"\n\nWith that, I stood up and went to the fridge. I took out two bottles of water and walked around the large granite island to the table. I pulled our two chairs out and sat down, turning the other to an angle with my foot. Then I smiled at Grace and gestured with my head.\n\n\"Come on,\" I said easily. \"Let's do some work while we're all relaxed and happy!\"\n\nShe giggled, came over, and sat down.\n\n\"So your mom says you have an essay to write,\" I began. \"Did you pick a topic?\"\n\nGod help me, I didn't think it would work, but for the next hour, we talked through her essay on the First Amendment, flipped pages in the textbook, and called up assignments she had done or redone with me over the last few weeks. Don't get me wrong--it was still excruciating to watch her puzzle over things she had learned twice already, but we made a start. After 60 minutes, she had an outline with examples and she looked completely spent. She spent longer and longer spells gazing out the back window at the snow-covered lawn. I passed the time while she tried to focus by letting my eyes roam over her body, my mind replaying the scenes from the sunroom over and over. \n\nBefore she could totally shut down, we reached a good stopping point and I stood up. Then I thought of a way to put her at ease for the transition.\n\n\"Grace, I'm really sorry,\" I said, \"but I'm getting hungry and I need to hit the bathroom. Is there any way you could find us something to eat?\"\n\nShe looked at me thoughtfully, then smiled.\n\n\"I could make bagels!\" she said brightly.\n\n\"That would be great. I'll be right back.\"\n\nI went to their downstairs bathroom--one of the two that I knew about, anyway--and took a leak. Then I used a damp hand towel to give myself a quick wipe just to be fresh and clean in case things got interesting again. When I returned to the kitchen, Grace had two bagels toasting and two glasses of orange juice waiting on the counter. I picked mine up and smiled at her domesticity.\n\n\"Thank you,\" I said simply. \"That smells great!\"\n\nShe almost purred at the compliment.\n\n\"No problem!\" she chirped, sounding like her normal self. \"I usually make bagels for myself, but my mom makes better breakfast.\"\n\nA shadow crossed her eyes at the mention of her mom. Fortunately, the toaster oven dinged at that moment and she could busy herself with putting the bagels onto plates and getting out butter and cream cheese and knives. After a few minutes, I was settled on one of the high leather stools at the island, chewing meditatively. Grace joined me and took a bite herself. We hadn't said a word since she brought up her mother.\n\n\"Hey...\" I said when I finished my bite, \"you're too much of a grown-up to pretend there's nothing going on, okay? Let's just jump right into it.\"\n\nShe nodded and said \"okay\" in a quiet voice.\n\n\"Are you worried about what your mom will think of all this?\" I asked.\n\n\"Not really,\" she said candidly. \"She pretty much knows that I was thinking about...doing something with you.\"\n\nI smiled and answered her somewhat ruefully: \"Yeah...I noticed you guys have a really close relationship!\"\n\nShe smiled a secret little smile. \"We do lately!\" she admitted.\n\n\"So what's worrying you?\" I asked.\n\n\"I'm not worried,\" she said with a puzzled look on her face. \"I think I'm kind of weirded out because...because you're sleeping with my mom and now WE slept together.\"\n\nI smiled to cut the tension a little bit, then worked my way right into a response. \n\n\"It IS a strange situation, isn't it? I think it's pretty new to all of us.\"\n\nShe giggled. \"That's for sure!\" she chirped.\n\n\"But you knew last week what was going on, right?\"\n\nShe nodded.\n\n\"And you teased the HELL out of me when you were going out to dinner, remember?\"\n\n\"I remember!\" she admitted softly, a sultry smile playing across her beautiful lips.\n\n\"One last thing, then. You asked me this morning if I thought about you when I was making love to your mom, and I said yes. You told me that was exactly what you wanted to hear. So now I have a question for you that may help clear things up: how did that make you feel when I said it?\"\n\n\"Sexy,\" she answered immediately. \"And I kind of felt like you really wanted me for ME, you know?. For me.\"\n\n\"Grace,\" I said, turning to her and taking both her hands. \"I DO want you for you. But we both know that we can't be going out like boyfriend and girlfriend or anything, right? I mean, how would it look if I took you to the prom?\"\n\nShe snorted at my unexpected question. \n\n\"I see what you mean,\" she said. Her voice was quiet, but she was still smiling.\n\n\"And you said that I'm making your mom happy, right?\"\n\n\"Uh-huh,\" she answered, unsure of where I was going with all this.\n\n\"So if you and I can find a way to work together, and you can figure out a way to be okay with me seeing your mom, I think we're all grown-up enough to move forward from here without any more complications or any hurt feelings. Know what I mean?\"\n\nShe was still for a long moment while she worked through the convoluted situation in her mind. Then she nodded once, decisively.\n\n\"I know what you mean, Mr. Robertson,\" she said with a smile. \"I'm sorry I've been having a hard time and acting funny--I know I've been teasing you a lot and I don't mean to get all...weird now that we've, you know, hooked up.\"\n\n\"Hey--like I said, it's a unique situation!\" I told her reassuringly.\n\n\"It IS pretty bizarre,\" she said with a laugh. \"And there's something I thought of just now that will make it okay, I think.\"\n\n\"What's that, Grace?\" I asked. It was my turn to feel puzzled.\n\n\"Come on--I'll show you!\" she grinned, slipping off the stool. \n\nQuick as a wink, she was off across the kitchen. I jumped off my stool and walked quickly after her. She raced up the steps, then stopped with her hands on the newel post at the top and turned to look down at me. I paused halfway up and raised my eyebrows.\n\nShe let go of the post and her beautiful lips curved into a smile. Her hands, meanwhile, went to the belt of her bathrobe and slowly untied the knot. I stood like a statue as she let the ends go and grasped her lapels. Her smile broadened as she parted the edges of her robe and revealed a delicious peek of her body--the golden tan of her belly, the inner curves of her breasts, and of course the forbidden folds nestled between her thighs.\n\nWhen she knew she had me frozen with anticipation, she took pity on me and finished her movement, stripping the robe off entirely and draping over the railing at the top of the stairs. The twisting motion threw her luscious little ass into brilliant muscular relief and raised her arm, which caused her breast to rise in profile as well. My eyes darted from spot to spot, but my feet remained glued to the step.\n\n\"Come on, Mr. Robertson. I think you'll like what I have in mind!\" she cooed from on high.\n\n\"I already do!\" I murmured, which drew a smile again. \n\nMy feet came unstuck, though, and I walked slowly up the rest of the steps toward her. When my foot hit the last tread, she turned and walked away, her perfect ass twitching from side to side. Every classroom fantasy about her ass came back to me, but this time there were no yoga pants in the way and I could see everything I had dreamed about last semester, the vision enhanced by glimpses of her perfect little pussy as it peeked out from her thigh gap. I followed instinctively, my cock already hardening.\n\nShe was halfway to the bed when I realized where we were--her parents' bedroom again! I grinned, guessing what she was up to at last. Grace confirmed my opinion by grabbing the comforter and the top sheet and stripping them down to the foot of the bed. Then she hopped up onto the bed and knelt in the middle, sitting back on her heels like a geisha.\n\n\"That's right!\" she told me smugly. \"I want to make things even between me and my mom.\"\n\nI stepped to the edge of the bed, nodding appreciatively at her logic and her inviting body.\n\n\"I like it!\" I said at last. \"It's just as messed up as what your mom did, and I get to help!\"\n\nShe laughed and held out both hands.\n\n\"Come on,\" she said quietly, seductively. \"We've got some catching up to do.\"\n\nNow that we were more at ease, I knew I could be a lot more enthusiastic this time. I also recognized that Grace still needed some reassurance in this new dimension of our relationship. With those things in mind, I crawled onto the bed and kissed her playfully. She held my face with both hands and kissed back eagerly. After enjoying that for a minute, I moved behind her and sat with my back against the rows of pillows at the head of the bed, pulling her back against my body. She came along willingly and molded herself into my, the small of her back resting against my fully-erect cock. My arms went around her and she sighed happily.\n\n\"You...\" I said, kissing her neck softly, \"are very...very beautiful...did you know that?\" \n\nShe almost giggled, but held it in with a sigh instead. Each of my pauses was punctuated by a kiss on her neck or shoulders, and she writhed sensuously in my arms.\n\n\"That feels so nice!\" she whispered, leaning down to plant a kiss on my forearm.\n\n\"YOU feel so nice!\" I echoed softly, freeing my hands to stroke upward from her belly to engulf her breasts. \"So nice, and so firm!\" I added, giving them a good squeeze.\n\nThis time she did giggle, but she leaned back a little more and let her head rest on my shoulder. I kissed along the graceful curve she presented me, working my way slowly from behind her ear to the point of her shoulder. My palms, meanwhile, were making circles across her nipples. Leaning my chest to the side, I indicated without words that I wanted her to switch sides and she did so compliantly. I repeated my kissing pattern there and kept on teasing her breasts and nipples. When my lips returned to her neck, Grace let out a shuddering sigh.\n\nSensing she needed to move on, I let one hand fall away from her breast, stroking downward with small movements until it rested on her thigh. I rubbed there for a moment, then pulled back against her stomach at the same time I scooted my own ass backward a little bit to make room for her. She got the hint again and moved back once more, this time stretching her legs out in front of her. When I grabbed her inner thigh and tugged, she parted her legs for me easily.\n\nMy hand slipped up and across to lay my palm on her mound and Grace turned her head toward mine, her eyes half-closed and her lips parted with lust. I leaned forward and kissed her gorgeous lips, keeping it light and only touching them occasionally with my tongue. She raised one arm languidly and caressed my head.\n\nMy own hands, meanwhile, got busy again. I kept my grip on her left breast, flicking my thumb across her nipple. My right hand moved into the space she had thoughtfully made for me and I laid my four fingers along her labia, cupping her pussy firmly and letting the heel of my hand put pressure on her clit. She sighed again, her breath sweet with orange juice, and kissed me a little harder.\n\nI could feel the heat of her pussy starting to rise, and I didn't waste time exploiting it. My middle finger traced the line of her labia once more and then I curled it inside her, keeping the base of my palm against her clit. That caused Grace to break our kiss and drop her head back onto my shoulder again. After a few deep strokes, I added another finger and began plundering her young body, finger-fucking her relentlessly, grinding her clit, and pulling on her nipples. She shivered with pleasure and I felt her juices start to flow. Even after a long break, her body was ready for more action!\n\nAs soon as I felt her hips start to rock against me, I increased the pressure. I let go of her nipples and dropped that hand to her pussy as well, using my fingertips to circle her clit while I kept up the relentless driving of my fingers inside her. Careful not to leave a mark, I kissed and licked her neck up and down, loving the rapid increase in her breathing.\n\n\"God!\" she moaned at last. \"I'm gonna cum!\"\n\nI smiled to myself and kept doing what I was doing. If I've learned one thing in 20-some years of women, it's that you don't stop doing it if it's working! Her channel was slick and wide open. My fingers plunged into her easily, and her juices were spread everywhere, making it easy for me to make tight, fast circles around her most sensitive spot without chafing her.\n\nSuddenly, Grace went over the edge. She grabbed my wrists in a powerful clasp and held me still as her orgasm hit her. Her stomach clenched and she hunched forward, trapping my hands and pulling her neck away from my lips. My fingers were still inside her and I felt the wild throbbing grip and release, grip and release, as a rush of juices coated my hand. She didn't say anything coherent, but I heard and felt a deep groan rumble inside her.\n\nSlowly, almost tiredly, she uncurled her body and lay back against me. I withdrew my hands and crossed them across her flat, golden belly and reclined onto the pillows, pulling her back with me. She sighed contentedly and let me move her. When we were settled, I kissed the top of her head where it bumped against my chin.\n\n\"Holy shit,\" she murmured, her eyes still closed. \"That was so FAST!\"\n\n\"I guess the First Amendment turns you on, huh?\" I said with a laugh.\n\nShe snorted at that impossibility. Then she remembered where she was and what she was laying on. Leaning forward to disengage my grip, she rolled over to face me while sitting back on her heels.\n\n\"No,\" she said in a low voice as her hands reached down to wrap around me cock, \"YOU turn me on. I've never cum that quickly before!\"\n\n\"Ah,\" I said with a lopsided grin, \"that's the power of experience!\"\n\nShe smirked as much as that poor joke deserved, then looked downward, focusing on her hands as they slid up and down my shaft.\n\n\"So what would an experienced woman do with this?\" she asked archly.\n\nI knew instinctively that she wanted advice, wanted to please me in some new way, so I told her.\n\n\"Lace your fingers together and then stroke me, Grace. Let your thumbs ride up and down that thick vein on the bottom.\"\n\nA look of concentration furrowed her brow as she adjusted herself to my instructions. Her soft, slim hands began to work their magic and I smiled happily.\n\n\"Like this?\" she whispered, watching my face.\n\n\"That's perfect!\" I assured her.\n\nFlushed with confidence, she stroked me for another minute, even feeling brave enough to add a few frills like an extra squeeze at the bottom or a swirl around the tip with her cupped palms.\n\n\"God, Grace...that feels so good!\" I groaned, my hips twitching upward with pleasure.\n\n\"You can't cum, Mr. Robertson! That's not part of the plan!\" she blurted, stopping her hands.\n\n\"Oh, right. I forgot the plan,\" I admitted, feigning innocence.\n\n\"Move down,\" she said, smiling into my eyes and letting go of my slippery cock.\n\nI complied and she scooted herself backward to give me room. When I was flat on my back with just my head on the pillows, she circled my shaft again with a tight thumb-and-forefinger grip and pulled it down at an angle toward her face. Then she grinned up at my expectant look and slowly took me into her mouth, holding just the tip inside and licking the sensitive vee with the tip of her tongue. I took a deep breath and let out a groan of pleasure. I felt more than heard her chuckle of satisfaction because she took me deeper at that moment, lowering her head to take half of my length inside her voracious mouth. Up and down she went, not quite hitting all the good spots but who could possibly complain?",
        "Abruptly, though, she stopped and sat back, still holding the base of my cock tightly. \n\n\"Any more tips?\" she asked with a shy smile. \"I want to make this as good as I can.\"\n\n\"Grace,\" I said gently, \"everything you do to me feels great. You're a beautiful young woman and I'm lucky enough to be here with you and you're giving me amazing head. That's plenty!\"\n\nShe smiled at the compliments again, but persisted.\n\n\"I get that,\" she said, \"but what would an experienced woman do better?\"\n\n\"Grace,\" I replied more thoughtfully, \"this isn't a contest with your mom, you know. What she and I do works for us. What YOU and I do will work just as well even if it's different.\"\n\n\"So what should I do?\" she asked quietly.\n\nI smiled, blessing my good luck and letting my eyes drink in the beauty of this young woman and this amazing situation. It was time to go for it!\n\n\"What you should do, Grace, is come up here and kiss me. Then I want you to slip my cock inside your pussy and fuck me however you want until I explode. This is YOUR revenge fantasy, remember?\"\n\nShe laughed. \n\n\"I almost forgot!\" she giggled as she moved up to straddle me.\n\nShe lifted one knee and aligned my cock with her opening, then paused to look around.\n\n\"I'm going to fuck you,\" she said as she started to sink down on me. \"I'm doing it with YOU in my mom's bed and you feel so fucking big inside me!\" she narrated with a moan.\n\nHer hands thumped down onto my chest and mine went to her hips, holding her with a firm grip as she started to grind herself in a circle on my cock. I watched her face, entranced by the sudden change from almost-innocent teen asking for advice to sultry cock-riding young woman. She bit her lower lip and closed her eyes, concentrating on the sensations inside her. I let go of her hips once she was going and caressed everything I could reach, running my hands greedily up the firm muscles of her thighs, across the toned abs, pausing to squeeze her breasts, and then up and over her shoulders and down the tanned, smooth skin of her arms. This was paradise, I thought to myself. \n\nI was so lost in my own enjoyment that I didn't notice Grace changing her posture at first. Suddenly, though, her belly touched mine and her hips began a gentle up-and-down rhythm. Her hair tickled the sides of my face as she hovered over me, smiling down at my satisfied look.\n\n\"You look happy,\" she whispered.\n\n\"I AM happy!\" I replied.\n\nShe kissed me softly and then said, \"I think I know what will make it better.\"\n\n\"Grace, this isn't a competition, remember?\"\n\n\"This isn't about Mom...it's about what YOU want. I think.\"\n\n\"Oh...so what is it?\"\n\n\"Well, you seem to really like my ass...\" she began, still pumping me slowly with her hips.\n\n\"Ummm...yes. I love your ass!\" I told her enthusiastically.\n\n\"And Mom said you got really excited when she bent over the table pretending to be me.\"\n\nJesus--they really DID tell each other everything! Someday I'd have to get to the bottom of that impulse, but right now I was in bed with a willing 18-year old and had better things to do.\n\n\"Yeah--that was pretty hot,\" I admitted.\n\n\"So my ass is right here!\" she chirped, swiveling her hips in case I was unclear. \"And I want you to look at it and play with it while you fuck me, Mr. Robertson. I know you looked at my ass in class last semester, and I know you check it out when we work together sometimes. Now I want you to see it up close and smack it and do whatever and fuck me and cum inside me, okay?\"\n\nI grinned and grabbed her ass with both hands.\n\n\"Damn right that's okay!\" I laughed. \"Get up on your hands and knees, Grace!\"\n\nShe rolled off me, giggling, and assumed the position.\n\n\"Yes, sir!\" she said smartly, looking over at me. \"Here I am, sir!\"\n\nI smiled at her sarcasm and rolled off the bed. She looked a little puzzled, but I fisted my cock with one hand and beckoned with the other.\n\n\"Bring your ass over here, Grace. This is how I want to start.\"\n\nHer eyes glowed with lust and happiness and she complied nimbly. In just a moment her feet were hanging off the side of the bed and her ass was tantalizing my cock from an inch away. She looked over her shoulder, tossing her hair out of her eyes, and blew me a kiss. I laughed and took a firm hold of her hips. Stepping forward, I aimed my cock between her gaping lips and entered her with one smooth motion, not stopping until my hip bones bounced off her firm, sweet ass. Her back arched with pleasure and I lost sight of her face as she let her head fall forward.\n\n\"Fuck, Grace...this is perfect!\" I moaned as I began to pump into her steadily.\n\nThere is something thrilling and so, so sexy about a woman's back in this position. Everything from the long, smooth muscles beside her spine to the swelling where her waist becomes her hips is beautiful, and when it's animated by the undulations of getting plowed from behind, it becomes sublime. Grace's muscles flexed and relaxed beneath her tan, glowing skin. Her breasts peeked out between her arm and her torso in time with her motions and my thrusting. I smiled blissfully and then closed my eyes to focus on the sensations surrounding my cock for a while.\n\nAfter minutes that stretched into eternity, though, I realized that I would need something different to get myself off. As beautiful as Grace was, and as wonderful and slick as her pussy had become, I needed a different angle. Giving her one last deep thrust and a swivel at the end, I pulled myself out of her. Her head came up and she peeked back over her shoulder to see what was going on.\n\nGrinning, I gave her a half-strength smack on one butt cheek. It rippled wonderfully and her whole body twitched in surprise more than pain. The handprint glowed pink on her ass.\n\n\"Move this sweet ass up into the middle of the bed, Grace. It's time for me to cum!\"\n\nShe moved without hesitation, crawling forward and then twisting herself to face the head of the bed. I climbed up myself and knee-walked in behind her, leaning down to kiss the small of her back when I got near enough.\n\n\"Is this how you want me, Mr. Robertson?\" she asked quietly, looking back at me again.\n\n\"Almost, Grace...almost. You can start like that, but if you really want to make me cum, drop your head down onto the bed or onto your arms when I start going faster. The angle makes everything feel better!\"\n\n\"Whatever you want,\" she said happily. \"Can you put it back inside me, please?\"\n\nI smiled, laughing to myself at the simple, beautiful sexiness of that request. Then I moved forward and lined myself up. Instead of driving straight in, though, I kept my cock angled upward and pushed my hips forward. The head of my cock slid along the back wall of her pussy, stretching her in a new direction. When I was all the way in, the base of my cock pushed hard against her clit.\n\n\"I like THAT angle!\" she said indistinctly as her head went back down.\n\n\"Just a demonstration!\" I told her, taking a firmer hold on her waist and nudging her knees apart a little more. \n\nKnowing that she was ready for me, knowing she wanted me to cum, I didn't hold back this time. Pushing firmly, I buried the full length of my cock inside her, pulling her back against me hard when I bumped into her ass. That pulled her thighs farther apart and spread her whole lower body a little, letting me penetrate her just a bit more. That last half-inch made a difference--I felt the head of my cock tap against the firm ring of her cervix as I filled her pussy completely. She felt it too, and groaned.\n\n\"Is that too deep?\" I asked, holding myself in place.\n\n\"It almost hurt when you hit it,\" she admitted, \"but it feels so good to have you that far inside me!\"\n\n\"Let me know if it hurts too much...I love it, too, but I want it to feel good for you, not bad.\"\n\n\"I'll let you know, but you better get started!\" she answered, shaking her hips impatiently.\n\n\"Yes, ma'am, right away, ma'am\" I joked as I pulled back to the very edge of her pussy. \"Here it comes, ma'am!\" I warned her as I thrust forward faster than before.\n\nI saw her body tense up once again, but I was willing to trust her to let me know if it was too much. My eyes were glued to the curve of her ass as I started to push into her steadily. I could actually see her hips spread to accept me, allowing me into that crucial depth as I pumped away steadily, relishing the tight channel and the firm stop at the end.\n\nJust as I felt my excitement mounting, I sped up unconsciously and Grace did what I had asked her to do. She folded her arms and let her weight rest on her elbows, lowering her upper body. Her hips tilted correspondingly, changing the angle at which I entered her. We both moaned at the new internal feeling as I continued to thrust. Looking down, I saw her ass spread wide before me and I let my hands roam over its silky firmness, squeezing both sides, trailing my fingers down the cleft between, and tapping lightly on her backdoor as well. She whimpered with pleasure when I did that, so I filed that idea away for future reference.\n\nI know this all sounds a little clinical, but remember--it's retrospective! At the time, I was grinning like an idiot and pushing into Grace faster and faster, wanting desperately to get to the edge and jump over, filling her tight teen pussy with my sperm. It just took a little planning!\n\nI could feel my orgasm approaching, though, so I sped up to signal Grace I was close. Then I gave her one last command that was guaranteed to get me to the finish line.\n\n\"Lie flat, Grace!\" I rasped between deep breaths. \"Lie flat and spread your legs and I'm going to fuck down into you and cum!\"\n\nHer head fell onto her crossed arms as she obeyed. Her hips dropped to the mattress and opened for me as she spread her legs to an angle only possible for a teenager. I was awestruck, but my cock needed to be the focus now, so I closed my eyes and fell forward onto my hands. Using her ass as a pivot point, I thrust down into her hard and fast, images of her body at different times flickering across the screen of my memory.\n\n\"God, Grace, that's it!\" I gasped. \"I'm going to cum!\"\n\n\"Do it, Mr. Robertson. Look at my ass. My pussy is all yours. Cum inside me again!\"\n\nThose words were all I needed to complete my quest. My back arched and I froze in a long curve as my cock swelled and began to pump spurt after spurt of hot cum into her waiting body. She moaned when she felt me explode and stayed perfectly still, savoring--I imagine--the sensation of her victory. I didn't think of that right then--my whole world was a series of pulsing, wrenching spasms that ripped through me and emptied me completely. As they waned, I collapsed slowly onto Grace's back, her ass providing the perfect cushion for my weary hips. I was still gentleman enough to catch my weight on my elbows instead of crushing her, but I did lie full length on her naked back, keeping my cock buried in the tight, wet warmth of her pussy. What could be better? I asked myself as I kissed Grace's shoulder and worked to slow my breathing.\n\nAfter letting me rest on her for a minute in silence, Grace turned her head and spoke softly.\n\n\"Could you spoon me for a little?\" she murmured, rolling away from the middle of the bed.\n\n\"Of course!\" I whispered against her skin, rolling with her.\n\nMy cock slipped out while we moved, but she kept her ass tight against me and grabbed my arm when I reached around to hold her. Both our heads were on the pillow, and I kissed her hair and her neck idly as we basked in the afterglow.\n\n\"That was so nice,\" she whispered after a while.\n\n\"Yes, it was!\" I agreed quietly.\n\nHer breathing slowed, and I felt her body relax. I was a little cold, but she seemed warm enough in my arms to doze for a while. I kept still and played back the memories of the day, smiling at the awkward moments, chuckling ruefully at the mercurial changes she had undergone. She was a terrible student, but she was a sweet, sexy, and potentially devastating young woman. Part of me still couldn't believe my luck. I couldn't believe that I was lying there with a student, a girl who had failed my class just a month ago, her body against mine, her pussy leaking my sperm onto the flannel...wait a minute! I thought to myself. Wait just a fucking minute! I actually laughed out loud when I realized that Grace had drawn me onto her mom's side of the bed for this last act. She stirred, but did not wake up. I stayed still and laughed on the inside. Grace had gotten her revenge, and wanted to make sure the evidence was there when she told her mom about it later. I had to admire her planning as much as I appreciated the payback plan.\n\nWith that thought, I settled my head and dozed for a while on Lindsey's pillow, her daughter held close and warm and naked in my arms."
    ],
    "authorname": "outdoorhorny",
    "tags": [
        "mf",
        "older male",
        "younger female",
        "masturbation",
        "creampie"
    ],
    "category": "Erotic Couplings",
    "url": "https://www.literotica.com/s/grace-ch-10-1"
}
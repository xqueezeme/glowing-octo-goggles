{
    "title": "Willow\u2019s Way Ch. 07",
    "pages": [
        "Summary: Willow finally gets Buffy's asshole with Faith's help.\n\nNote 1: This is dedicated to MLT17 for requesting this series.\n\nNote 2:\n\nIn Chapter 1, Faith tries to seduce and ass fuck Willow, who surprises the aggressive slayer by turning the tables.\n\nIn Chapter 2, still the same night, Faith can't get enough of being sodomized at the high school while they're supposed to be on patrol.\n\nIn Chapter 3, Faith falls deeper into anal submission to Willow, who fucks her in a graveyard and Buffy catches them in the act.\n\nIn Chapter 4, Willow discovers a way to magic her strap-on cock into an actual cock so she can unload cum into Faith's ass; Willow and Faith (through both word and deed) reveal their sexual relationship to the gang at The Bronze.\n\nIn Chapter 5, Willow receives a fabulous one-month anniversary gift from Faith... a stuck-up bitch's asshole to plunder... Cordelia's.\n\nIn Chapter 6, it's weeks later, and Willow fucks every cheerleader's ass and particularly gives it to Cordelia and Harmony once she discovers Buffy is watching.\n\nWillow's Way Ch. 07\n\nBuffy was pleasuring herself with her fingers, a coke bottle, her only toy, and a very impressive zucchini, as now she was constantly horny, and she couldn't get her recollections of Willow fucking the cheerleaders and imagining she was doing it to her out of her head.\n\nBuffy had fucked herself to multiple orgasms for multiple days, ever since surreptitiously witnessing the cheerleaders' anal debauchery, and she now had trouble looking Willow in the eyes.\n\nWillow noticed her discomfort... and so did Faith.\n\n\"Just bend her over a gravestone and shove your dick up her ass,\" Faith suggested wickedly, as a hot Mom of five ate her pussy while being sodomized by Willow, while her children played in the pool in the backyard, being watched by Cordelia (who was promised an ass fucking in payment for babysitting). Cordelia had watched her own Mom get ass fucked just a couple days ago in their home, on her Mom's own bed, while her Dad was out in the yard drinking with his friends... having fulfilled the wicked task she'd been sentenced to when she lost the sodomy bet to Harmony.\n\n\"Buffy's different,\" Willow said, as she fucked the big bootied MILF, enjoying these threesomes with Faith, but still unsure about adding Buffy to her growing lineup of ass sluts. Of course, part of her loved the idea. Buffy was her long time best friend, hot as fuck, and Willow was curious about her slayer ass recovery theory. Every time she fucked Faith's asshole, it was like she was fucking a virgin... unlike Cordelia's, non-slayer booty, which she'd destroyed so roughly that it seemed to be forever open for business.\n\nOn the other hand, she didn't want their friendship to change, nor was she sure how she'd feel about using Buffy like a cheap ass slut. But deep down, she definitely wanted to fuck her. The conquest of each new ass gave her an ultimate adrenaline rush that she couldn't get in any other way.\n\n\"An asshole is just an asshole, no different from all the rest,\" Faith pointed out, even though deep down, she was dying to see Buffy with a dick up her ass. To see her pretentious and smug face moaning in ecstasy and begging in lust was the ultimate kink she just had to see.\n\n\"I do love a freshly slain asshole,\" Willow admitted, her hands on the MILF's hips while she really hammered away, loving the rush of a new ass, and this time it was double hot that this MILF was choosing to be an ass slut to her while allowing someone else to watch over her young children. Even after all her ass slayings, she was still in awe that so many women, of all ages, behind their innocent facades, or their pretentious bitch facades, whichever, could be revealed at their cores as submissive ass taking, cunt licking, bimbo sluts.\n\n\"But my tushy is still the best,\" Faith reminded her girlfriend, while getting licked by this MILF she didn't have a clue what her name was.\n\n\"You're always my number one,\" Willow agreed as she hammered away at the moaning MILF. \"And my steadfast partner in crime.\"\n\n\"Mmmmmm,\" Faith moaned, enjoying the sweet licking while she enjoyed watching Willow pounding away. There was just something so erotic and stimulating about watching Willow fuck yet another dumb bitch while also enjoying their conversation.\n\nAfter a pause while the two lovers stared into each other's eyes, Faith pulled the MILF's head deep into her pussy and began grinding her face on it, while Willow advanced to the next level of her hardcore ass slaying.\n\nFive minutes later, the MILF was walking funny back to her children, her cunt-cum-coated face glistening, a few other women who'd previously been sodomized by Willow smirking with amusement and jealousy... while the mother was still in a daze from trying to process how she'd gone from quietly reading a book to being ass fucked for the first time ever within a fifteen minute span.\n\nWillow said, as they walked away hand in hand after another successful conquest, \"You could float a trial balloon.\"\n\n\"You understand it'd need to be more than a balloon full of air,\" Faith said, giddy with excitement with the permission she'd been waiting for, and even begging for... for weeks.\n\n\"I wouldn't expect anything less,\" Willow said, a little worried by what she'd unleashed, since Faith was like a bull in a China shop and not someone who'd inquire subtly.\n\n\"I can't wait to watch you drilling her ass,\" Faith said, picturing the visual.\n\n\"I want her wearing something sexy, if you can pull it off at all,\" Willow requested.\n\n\"Oh, I'm certain I can make it happen,\" Faith said confidently, her head awhirl with kinky possibilities galore.\n\n\"I probably shouldn't be giving you permission to do this,\" Willow said, both excited and worried.\n\n\"We both know you want to fuck the shit out of her,\" Faith said, stopping and pulling her in for a kiss. Once she broke it, she added with a sly wicked smile, \"Literally.\"\n\n\"You're so bad,\" Willow said.\n\n\"Then maybe you should punish me right fucking here and now,\" she teased, as they were about to stroll into a park.\n\n\"You want my dick to punish you?\" Willow asked, still horny, and deciding to magic up her living dick and drop a load in her sexy slut's asshole.\n\n\"Fuck yeah, you know you can drill my shit hole anytime, anyplace,\" Faith said, as two older women walked by within earshot with disgust written on their faces. Faith called out, \"She'll do you too, if you like. No charge!\"\n\nWillow cast an invisibility spell, with a fun idea popping in her head.\n\n\"Oh, we really are going to do it right here, right now?\" Faith asked, loving this sudden spontaneity from her girlfriend. She was growing kinkier every day!\n\n\"Yeah, let's have some fun with people,\" Willow said, grabbing Faith's hand and leading her towards a brick wall that wasn't at all secluded, since there was a sidewalk only three feet away.\n\n\"You kinky bitch,\" Faith said as a teenager walked by, but wearing headphones.\n\n\"Bend over, you nasty ass slut,\" Willow ordered as she cast a second spell to give herself a fat ten-inch cock, with a slight up curve... a new nuance she'd recently added that drove Faith wild, which led to intense orgasms where her slut went ballistic.\n\n\"Yes baby,\" Faith obeyed, bracing her hands against the wall, loving when Willow got verbal with her... a liberty she'd never allowed any man to take... yet Willow had discovered a side of her she didn't know existed, and although it had taken her a long time to accept it, she was now completely in love with this sexy nerd, and would allow her, but only her, to take any liberties she damn well pleased.\n\nWillow loved how submissive this strong-willed sexual goddess was to her... she still couldn't believe her good fortune sometimes. She went behind Faith, flipped up ger skirt, found her asshole and slid into it.\n\n\"Oh yes, fill my ass with your big cock,\" Faith moaned, just as two girls in their twenties walked by... both stopping dead in their tracks.\n\n\"So tight,\" Willow moaned, as she looked at the two cute girls, who couldn't see her and Faith, but could obviously hear them.\n\n\"You heard that, right?\" Amy asked her friend.\n\n\"Yeah, wow,\" Karen nodded, peering in the direction of the sound.\n\n\"Fuck my ass,\" Faith moaned, not aware of her audience, since she was looking at the wall and focused on the dick deep inside her asshole... not that she'd care either way.\n\n\"Where's it coming from?\" Amy asked.\n\n\"No idea,\" Karen said, perplexed, since there didn't appear to be anyone around.\n\n\"Do all girls like to take it in their asses?\" Willow asked, as she began slowly fucking Faith, while she gazed behind her at the two baffled girls.\n\n\"Yes, all girls are ass sluts for big fat cock,\" Faith declared, as she looked back and she too saw the two girls staring puzzledly in their direction. \"I bet those two hotties over there on the sidewalk would bend over and take your cock in their assholes if you let them.\" And then asked in a louder voice, \"Isn't that right, girls?\"\n\n\"Gross,\" Amy replied to this voice without a source.\n\n\"What the fuck is going on?\" Karen asked, her pussy all atingle. She'd used a couple of fingers in her ass on occasion, but she'd never actually been fucked in that hole.\n\n\"Want it in the ass, girls?\" Faith asked in her carrying voice, the sound of their bodies crashing into each other also distinctly audible.\n\n\"This is sick,\" Amy said. \"Let's go, Karen.\"\n\nBut Karen was paralyzed with intrigue, shock, curiosity and other feelings. She didn't move a muscle.\n\nFaith moaned, as Willow began really giving it to her, \"Karen, if you want my shemale girlfriend's cock in that sexy ass of yours, be at the college campus at 8:30 tonight, girl's bathroom in Greenway Hall, third floor. That's right, she's a beautiful but well hung shemale, so it's the chance of a lifetime!\"\n\n\"Let's go,\" Amy repeated, taking her friend's hand and pulling her away.\n\n\"See you tonight,\" Willow called out, sending out positive vibes for Karen to show up.\n\nKaren followed Amy, but she kept looking back in confusion while her pussy leaked.\n\n\"She'll be there,\" Faith moaned as her 'shemale girlfriend' Willow hammered away at her asshole.\n\n\"Think so?\" Willow asked, having lived a rather charmed life since she flipped Faith's switch.\n\n\"Oh yeah, she's very drawn in and feeling powerfully curious,\" Faith assured, confident she was right. \"But for now, please focus on my shit hole.\"\n\n\"So needy,\" Willow rebuked her affectionately, as she resumed fucking the slayer hard.\n\nFive minutes later and a couple more perplexed walkers passing by, Faith was walking hand in hand with her magical girlfriend after a great ass fucking, an intense orgasm, and now with a load leaking out of her ass... and as she walked, she thought she should really start wearing panties, or carry some in her purse for the many times her girlfriend had deposited a huge load in her asshole... especially now that she only wore skirts and dresses, so Willow would have quick and unhindered access to said asshole.\n\nThat night, Karen did indeed show up. She explored her secret curiosity about eating pussy, having had an untold crush on her best friend Amy for a year, then discovered the joys of anal sex, and finally agreed to find a pretext for bringing her friend around to be seduced into a foursome lesbian (kinda) orgy as soon as she could.\n\nLater that night, while patrolling, Faith asked Buffy point blank, \"So are you ready to get your asshole fucked?\"\n\n\"Pardon?\" Buffy asked, having heard the question, but still a little surprised by it. Even though secretly it was all she ever fantasized about anymore... Willow fucking her ass. She knew it was wrong. She knew it could change everything. But ever since first witnessing Willow dominate Faith, and then much more recently the entire cheerleader squad, she'd become obsessed.\n\nAnyone who knew Buffy knew she was a no-nonsense girl. One who required herself to be up for whatever may transpire on any given day. Christ, how could she spare any time for a boyfriend or a sex life, when she was are responsible for protecting Sunnydale... and occasionally the entire world!... from seemingly regular potential apocalypses. (Or should that be apocalypsen? Or apocacalypsi? You know, for those times when one world-ending Apocalypse just isn't enough!)\n\nBuffy even recalled how she'd had difficulty remaining alert to potential danger back when Angel was throat fucking her, or pounding her pussy and using her like a cheap slut. Since her brain shut off and she always lost herself in the pleasure of the act. She knew she couldn't let that happen again... but Faith was now getting pounded daily it seemed, if not more often, and she could still kick ass.\n\n\"You heard me,\" Faith said. \"I know that cunt of yours is soaking wet from watching Willow sodomize my shit hole.\"\n\n\"Nice visual. Thanks,\" Buffy said, Faith able to make anything dirty even dirtier.\n\n\"You'll be going just as crazy as I do when you have ten inches of Willow's cock buried up your asshole,\" Faith said, noticing Buffy's cheeks going red. This was obviously flustering her and assumedly making her horny.\n\n\"I don't think so,\" Buffy said, trying to hide her growing excitement at the many visuals now popping into her head... her desire to be fucked by Willow having pretty much consumed her attention for weeks. And it had taken over completely, ever since she'd been a Peeping Thomasine to Willow having her way with the cheerleaders... especially Cordelia... the things Cordelia was willing to do to get herself ass fucked was insane... such as promising to deliver her mother for cornholing... or Buffy herself!\n\n\"Willow told me you looked really turned on, and you were even playing with yourself while she was sodomizing Cordelia and Harmony with all the cheerleaders in attendance the other night,\" Faith added.\n\n\"I-I-I don't know what you're talking about,\" Buffy stammered, never being much of a liar.\n\n\"I know you were there,\" Faith said, \"so there's no point trying to pretend you weren't.\"\n\n\"I was just checking on where everyone was and whether they were okay, since none of the cheerleaders showed up at the party,\" Buffy said, which was actually true.\n\n\"Yet once you discovered they were safe, and were just a bunch of ass sluts for your best friend, you didn't leave, did you?\" Faith asked rhetorically, turning to step right in front of a very frazzled Buffy, stopping her right in her tracks.\n\n\"I was just very surprised,\" Buffy said, which was also the truth... stunned, shocked, overwhelmed... were also words to describe her feelings when she saw what she'd seen and heard what she'd heard... and, of course, she'd gotten undeniably horny.\n\n\"I imagine you were,\" Faith said, as Buffy went to walk around her.\n\n\"Look into my eyes and tell me you weren't turned on while you watched Willow destroy Cordelia and Harmony's assholes and turn them into mindless bimbo fuck toys,\" Faith said, always able to up the ante on the dirty talk. \"Not to mention how they vied with each other to serve you up to Willow for similar treatment. Which, as it turns out, is my pleasure and privilege to undertake.\"\n\nBefore Buffy could answer, although she wasn't sure what she was going to say, two zombies interrupted their awkward standoff, and the two slayers went to work.\n\n\"We'll continue this conversation later,\" Faith said, thinking that giving Buffy the time to stew a little over the topic of their conversation would probably add a little je ne sais quoi to her inevitable submission.\n\nSo for a few minutes the two unique slayers did what they did best... they slayed the enemy.\n\nOnce they were done, Faith, not missing a beat, continued, \"So are you ready to let the stress of slaying go, and you become the slain one... in that asshole of yours?\"\n\n\"I should be going home,\" Buffy said, fighting supernaturals always giving her a massive adrenaline rush, and lowering her resistance to such suggestions. The fuckings Angel used to give her were always more intense and body quaking after a good fight.\n\n\"I didn't ask what you should do,\" Faith said, pushing her forcefully against a tree, \"I asked if you wanted to get your asshole pounded.\"\n\nBuffy went to respond, but she felt Faith's lips on hers, and her hand rubbing her pussy under her skirt... which she'd begun wearing more often recently in a subconscious attempt to impress Willow (having noticed that was all Faith wore now that she'd submitted so contentedly to Willow). She briefly melted into the kiss. She hadn't been kissed for so long, and she was surprised by how soft Faith's lips were... a lot softer than any boy's she'd ever kissed.\n\nAs expected, Faith found a very wet pussy, and she rubbed it through the panties and pantyhose.\n\nShe only continued for ten or fifteen seconds before Buffy pushed her away, demanding, \"What are you doing?\"\n\n\"Checking to see if you're wet,\" Faith said, bringing her fingers to her nose, and then to her lips, \"and girl, you are soaked!\"\n\n\"I always get wet when I fight,\" Buffy said, then wished she hadn't said that.\n\n\"Well, do I have the perfect way to decompress then,\" Faith said, pushing Buffy back against the tree and frantically rubbing her pussy.\n\n\"Faith,\" Buffy moaned as she once again pushed Faith away, but this time Faith didn't budge.\n\n\"You want this, Buffy,\" Faith said, firmly holding her position against the horny and therefore weaker slayer. Usually they were evenly matched, but in Buffy's current disheveled emotional state, she was no match for her.\n\n\"Noooooo, not with you!\" Buffy said, shaking her head.\n\n\"But with Willow?\" Faith asked, not at all offended, since Buffy's response was exactly what she'd wanted to provoke.\n\n\"Yes, I'm afraid to say,\" Buffy admitted in a moment of weakness and truth.\n\n\"Then we can make that happen,\" Faith said, taking Buffy by the hand and leading her towards Willow's place.\n\n\"But I can't,\" Buffy said, \"and I mustn't,\" even though she mindlessly followed along, her pussy on fire.\n\n\"You really need this, Buffy,\" Faith said earnestly. \"You've been off your game for some time now. Actually, since right around the time you saw Willow destroying my back door.\"\n\nBuffy knew Faith was right, yet she couldn't admit to such a thing. She also knew if she kept following Faith, she'd soon be getting ass fucked by Willow... and while the idea really turned her on, she considered it a bad idea. So she yanked her hand away and ran off.\n\nFaith smiled as she called out, \"It's inevitable, Buffy! And wear thigh highs, not pantyhose, when you do submit to Willow.\"\n\nBuffy scurried home, her pussy on fire. Faith hurried home too... to get fucked by Willow one last time for the night... confident that Buffy's fall was imminent.\n\n....\n\nThe next morning Buffy went to school exhausted. The previous night she'd resisted touching herself for hours before she finally succumbed to the inevitable, or at least to an inevitable, by fucking herself to multiple orgasms with a coke bottle... which she'd been using as her go to fuck toy for the past few days.\n\nFaith came to school a little tired too. not getting home until after one o'clock, following a marathon fuck session with Willow, and retold her pressuring Buffy, including the kiss, the pussy rubbing and Buffy's admission. The fuck session was first with a twelve inch strap-on to multiple orgasms for Willow's slut, and then with her flesh and blood cock for one final orgasm for each of them. Of course Faith telling Willow about molesting Buffy added to the witch's excitement.\n\nWillow strolled into the library at lunchtime and said, looking significantly at Buffy, who was wearing a plaid skirt and beige nylons, \"Hey.\"",
        "\"Hey,\" Buffy said, having dressed for the possibility of being fucked by Willow, even heeding the final words from Faith as she'd fled last night.\n\n\"I haven't seen you much lately,\" Willow said.\n\n\"Yeah, I've been busy,\" Buffy said, and then added, even though she wasn't sure why, \"as have you.\"\n\n\"Yeah, my life has been crazy,\" Willow said, which was the understatement of a lifetime.\n\n\"Are you still dating Faith?\" Buffy asked, well aware that she was, but at a loss for anything else to say... all of her conversations feeling so awkward recently.\n\n\"Dating. Fucking. Ass virgin hunting,\" Faith listed, entering from Stage Left with perfect timing.\n\n\"Faith, this is a library,\" Buffy sighed, \"as in absolutely anyone might hear everything you say,\" both because of what she'd said, but also because she was intruding upon her rare time for chatting with Willow.\n\n\"Or the ghosts in this ghost town might,\" Faith joked, Sunnydale not known for its academic prowess, and as usual, the only ones in the library were the three of them.\n\n\"Faith,\" Willow admonished with a sigh.\n\n\"What? Is my ass fucking dominant girlfriend suddenly in the mood to be prim and proper?\" Faith asked.\n\n\"Not here,\" Willow said.\n\nBuffy felt so uncomfortable... partly because she was already undeniably horny, and partly because she wanted to stand up for Willow. Out of habit, she guessed. Recently Willow had become extremely good at standing up for herself. Nevertheless, she spoke out, \"Just leave her alone.\"\n\n\"Why? Because you want her dick inside your ass instead of in mine?\" Faith asked wickedly.\n\n\"Faith!\" Willow gasped, even though truthfully she wasn't surprised, and knew this was all just part of the final stages of their 'Downfall of Buffy' plan.\n\n\"What? You know you want to fuck Buffy's ass,\" Faith continued. \"We even roleplayed your destroying her asshole last night.\"\n\n\"You did?\" Buffy asked, this astonishing her, yet also turning her on.\n\n\"Yes, I'm sorry you had to hear that,\" Willow admitted sheepishly, all part of the seduction plan. \"I've always had a crush on you.\"\n\n\"You have?\" Buffy asked.\n\n\"Yes, you're the most beautiful girl I've ever known,\" Willow continued.\n\nFaith coughed.\n\n\"Okay, the two of you are the hottest slayers in the world,\" Willow smiled.\n\n\"Actually you're a pretty hot slayer too,\" Faith winked. \"An ass slayer.\"\n\n\"You are very pretty, Willow,\" Buffy added, having never seen Willow in that way until the first time she witnessed her fucking Faith.\n\n\"Thank you,\" Willow said, getting all warm inside at the compliment.\n\n\"Let's go to the cheerleader's room and seal this deal,\" Faith suggested.\n\n\"Let's go, Buffy,\" Willow said, taking control of the situation for the first time.\n\n\"Really?\" Buffy asked, overwhelmed by what was happening.\n\n\"Yeah, I want to fuck you, Buffy,\" Willow said walking up to her. She then stunned Buffy, as the new and extremely confident Willow was now speaking, \"I want to fuck your asshole so fucking bad.\"\n\n\"Oh God,\" Buffy moaned while not even being touched, just from Willow's wicked words.\n\n\"Actually, let's do it right here,\" Willow said spontaneously, going over to her bag to grab the ten-inch strap-on she took everywhere.\n\n\"We can't do it here,\" Buffy protested, even though she was so horny she'd likely mindlessly bend over on the busiest downtown sidewalk.\n\n\"Faith, lock up the library and watch the door,\" Willow ordered. \"Not as a lookout, but if you need to, make up some reason why nobody can come in no matter who they are.\"\n\n\"Yes, baby,\" Faith agreed, loving to see Willow take control like this, loving this was finally happening, and dying to see Buffy with her ass full of cock.\n\n\"Are you sure we should be doing this?\" Buffy asked nervously, torn between her growing lust and curiosity, versus potentially changing everything and maybe even ruining a valuable friendship.\n\n\"Oh, we're definitely doing this,\" Willow said, pulling the intimidating strap-on from her bag.\n\n\"Oh my God,\" Buffy gasped at the sheer size of the cock.\n\n\"This isn't even my biggest one,\" Willow said, \"but since this is your first time, I'm going easy on you,\" as she watched Faith closing the door. She'd be able to see everything, while nobody outside the door would be able to see anything at all. Perfect!\n\n\"I can't take anything that big,\" Buffy said. Angel had filled her completely, and he was 'only' eight inches. This cock that Willow was sliding up her legs was at least ten, and fat as fuck.\n\n\"Oh, your ass can take lots more than this,\" Willow assured her. \"And if my theory is correct, a slayer's ass returns to a virginal condition in just a few minutes.\"\n\n\"Really?\" Buffy asked.\n\n\"That's the case with Faith, and I sense it will be with you too,\" Willow said, as she finished securing the harness around her waist... excited to fuck Buffy... any lingering doubts about whether this was a good or bad idea vanished. She definitely wanted to fuck Buffy, no question. However, she didn't just want to turn her into another one of her bimbo ass sluts, she wanted this turn to be special. Yes, she planned to pound that ass good, but she wouldn't humiliate her like she did all the others... at least not at first.\n\nBuffy looked over to see Faith guarding the door, but also having an excellent view of the upcoming action, which the thought was fair enough, but she did ask, as Willow walked up to her stroking the cock with what she assumed was lube, \"You're a hundred percent sure about this?\"\n\n\"You want me to fuck you, don't you, Buffy?\" Willow asked, now standing before the blonde beauty... from where she could see both trepidation and lust.\n\n\"Yes, but... I just... that is...\" Buffy couldn't even construct a sentence, she was so horny and confused.\n\nWillow had no such difficulty. \"I'm fucking your ass Buffy, I'm fucking your ass right here and right now,\" she said firmly and distinctly. \"And you're going to fucking love it.\"\n\nBuffy was overwhelmed by her usually meek friend's strong dominant persona, and she was really turned on by it. She whispered sheepishly, \"Yes.\"\n\n\"Turn around,\" Willow ordered.\n\nBuffy obeyed, as Faith watched from the door... wishing she could get closer to watch, but she had to make sure nobody walked in. Luckily, the school population viewed the library as the last place to go to for lunch... so they should be undisturbed.\n\nWillow lifted up her friend's dress to see her nice ass in a tight pair of blue panties and thigh high stockings. No pantyhose like she normally wore.\n\n\"Nice. Did you wear these for me?\" she asked.\n\n\"I guess so,\" Buffy replied, having definitely worn them for her.\n\n\"You don't know for sure?\" Willow asked, as she brought her hands to the panties and pulled them down, releasing the odour of Buffy's undeniable excitement.\n\n\"Yes, I did wear them for you,\" Buffy admitted, her entire body trembling.\n\nBuffy lifted up her feet as Willow removed the panties completely and brought them to her nose. \"You smell so good, Buffy. You're already so wet.\"\n\n\"I can't control myself,\" Buffy said.\n\n\"Why are you so wet?\" Willow asked, taking a deep and audible sniff of the panties.\n\n\"I don't know,\" Buffy answered shamefully, so humiliated, and yet so turned on and desperate to get fucked by her best friend.\n\n\"You do know,\" Willow corrected her, as she bent down a little and parted her friend's ass cheeks.\n\n\"Ohhhh,\" Buffy moaned, just from feeling Willow's hands on her naked ass.\n\n\"Tell me why,\" Willow ordered a bit gruffly, as she admired the tiny little a-hole.\n\n\"Fine,\" Buffy sighed frustratedly, \"watching you ass fuck Faith and the cheerleaders after the game was so hot.\"\n\n\"And?\" Willow urged, enjoying teasing her friend, as she leaned forward and licked her inviting asshole.\n\n\"And I've been fucking my pussy every night, imagining I was the one you were fucking,\" Buffy said, her eyes going wide when she felt the tongue on her asshole.\n\n\"So now you're ready for me to take this anal cherry of yours?\" Willow asked, as she swirled her tongue around the tiny hole that wouldn't be tiny for much longer. Although that would only be a temporary condition, if her theory held.\n\n\"Yes, yes, Willow, please fuck my ass,\" Buffy moaned and begged, \"I need it so bad.\"\n\nWillow stood up and positioned her strap-on cock at her friend's virgin hole, \"I've wanted to fuck this asshole for some time.\"\n\n\"Just shove it in,\" Faith called out, frustrated she couldn't get a much better look. Since they were facing her, she had an excellent view of their faces, which was good, but she couldn't' see the penetration at all.\n\n\"Yes please, just shove it in, Willow, fuck me like you fuck all those other girls,\" Buffy moaned.\n\nWillow obliged, slowly sliding her plastic cock into the virgin hole.\n\n\"Oooooooh,\" Buffy moaned and grimaced, as her asshole was stretched and filled in ways it had never been before.\n\n\"Fuck this for a lark,\" Faith said, locking the door and coming over to get a much better view from all angles of her girlfriend fucking her fellow slayer.\n\n\"It takes a little while to get used to,\" Willow said, having noticed lots of girls and women feeling some discomfort before it shifted into lustful pleasure and intense orgasms.\n\n\"It feels weird,\" Buffy said, which was about the only way she could describe it. It hurt a little, but less than most of the beatings she took during her many fights with other supernaturals. It was a little bit of discomfort, but that was likely because her asshole had never been stretched out by anything before. She felt growing excitement at the reality she had Willow's cock in her ass, although she was a little disappointed it wasn't the real cock she'd seen Willow magic up for herself.\n\n\"Oh yeah, Buffy finally has something more than a stick up her ass,\" Faith joked, taking a shot at the blonde.\n\n\"Fuck you,\" Buffy responded automatically and absentmindedly, her attention focussed on the cock that kept going deeper into her ass and stretching her even more.\n\n\"Maybe I will after Willow has,\" Faith shrugged, always being the bottom with Willow, but often brandishing a strap-on to fuck other girls and women... having fucked Cordelia's mom this morning after having Cordelia eat her out.\n\n\"No fucking way,\" Buffy said, willing to give herself to Willow, but not to Faith.\n\n\"Focus on me, Buffy,\" Willow ordered, and gave Faith a Look.\n\n\"It's just so hot,\" Faith said, her only form of an apology.\n\n\"You do look fucking hot with my cock in your ass, Buffy,\" Willow said, as she finished filling Buffy's ass and was now resting her crotch against her ass cheeks.\n\n\"I feel so filled up,\" Buffy said, overwhelmed by how full she felt.\n\n\"Wait until you host the fourteen-inch monster,\" Faith said, that now being the one she enjoyed buried deep in her shit hole the most... size definitely did matter.\n\n\"Ohhhhh, my,\" Buffy said, as Willow, her hands grasping Buffy's hips, began to pull back out.\n\n\"You look so hot, baby,\" Faith said, admiring her girlfriend... only wishing she was naked. Her perky tits and hard nipples were always so sexy when she was slamming into someone from behind.\n\n\"Thanks, honey,\" Willow said, her pussy on fire at the reality she was actually fucking Buffy! Her cock orgasms were great, a completely different version of orgasm... sort of exploding outwards rather than imploding inwards... but wearing a strap-on and pounding a virgin hole also got her pussy revved up, and she'd already decided she eventually wanted to round off this encounter with Buffy between her legs.\n\n\"I can't believe you're fucking my ass,\" Buffy said, both to herself and to Willow.\n\n\"Oh, she ain't really fucking your ass yet,\" Faith said. \"She's just getting started.\"\n\n\"I've wanted to fuck you ever since I discovered the thrill of being a top,\" Willow shared, sliding back into Buffy.\n\n\"Top?\" Buffy asked, that not being a term she knew.\n\n\"Yeah the one doing the fucking is called a top, and the one getting their asshole plugged is a bottom,\" Faith explained. \"It's more of a male sex analogy, but I think it works for us gals too.\"\n\n\"I prefer the terms Mistress and pet,\" Willow said.\n\n\"I'll always be your pet, baby,\" Faith purred, her hand going to her pussy as she watched her slayer competition getting sodomized. \"And I'm also your slut, ass whore, cunt licker, submissive slave, and your bimbo fuck toy.\"\n\n\"Oooooooh,\" Buffy moaned loudly, partly from the fucking, and partly from the name calling. When Angel had used to fuck her face and call her a cum dump, or pound her pussy while calling her his slut, it had always enhanced her pleasure... which had always confused her, since she definitely wasn't a slut. She'd never slept around, she just had rather athletic sex with her only lover.\n\n\"I think she likes the name calling too,\" Faith said, loving the sight of this Barbie Girl slayer bent over in such a vulnerable position. Being bottomed and dominated by Willow had briefly had her questioning her overall strength, but she came to understand that giving herself and her asshole to Willow made her stronger, not weaker... but seeing Buffy taking it in the asshole definitely evened things out.\n\n\"For now, she's just my pet, and not anything nasty,\" Willow said, slowly fucking her. \"I already have a lot of bimbo, submissive, fuck toys. And she may be my pet now, but she's still my BFF!\"\n\n\"Whatever you decide to call me, just don't stop doing what you're doing,\" Buffy moaned, as her pleasure was quickly growing, and by now had totally usurped her initial pain. Being fucked had always been pleasurable, but this was something entirely different. She felt pleasure in both her asshole and her pussy, even though her pussy wasn't physically involved.\n\n\"How does it feel?\" Willow asked, as she continued her slow, deep strokes inside Buffy's asshole.\n\n\"So good,\" Buffy answered, her brain shutting off as the visceral pleasure took over.\n\n\"Tell her what you want, Buffy,\" Faith said, wanting to hear the pretty girl talk nasty.\n\n\"I want Mistress Willow to fuck my ass,\" Buffy said. \"I want to be her pet ass slut.\"\n\n\"Mmmmmmm,\" Faith moaned, her nearby phone having caught an audio of that declaration... as well as the entire sodomy so far.\n\n\"You're a natural ass slut,\" Willow said, as she began fucking Buffy faster... harder.\n\n\"Yes, fuck me, fuck my ass, fuck me,\" Buffy mumbled, her pleasure continuing to grow. This ass fucking was way more intense than any fucking Angel had ever given her.\n\n\"Who owns that asshole?\" Faith asked as she rubbed herself... a little envious that Willow wasn't fucking her right now.\n\n\"Willow owns my asshole,\" Buffy declared mindlessly.\n\nWillow wanted to fuck her to an orgasm, yet she also wanted to watch the various expressions crossing her face. So without any warning, she pulled out.\n\n\"Noooooo, shove that cock back up my ass,\" Buffy pleaded with a desperation only a craving, lustful ass slut could express.\n\n\"Hop into the table and spread those legs for your Mistress,\" Willow ordered, as she briefly admired her handiwork... a beautiful gaping hole. Something she had come to admire as pure art. It was her own version of a Rembrandt. Shit, this gaping hole would look delightful in the middle of the Louvre. It really was a masterpiece!\n\n\"Okay,\" Buffy obeyed, quickly turning around, hopping onto the table and spreading her legs wide like an eager slut.\n\n\"Shit, she's turned into as big a slut for your cock as I am,\" Faith laughed at watching Buffy obeying so quickly and eagerly.\n\n\"I need your cock back in my ass so bad, Willow,\" Buffy pleaded, her legs spread almost like a gymnast's, which made her gaping hole even more inviting.\n\n\"Mmmmmmm, but I've got to taste this first,\" Willow said, as she bent down and swirled her tongue inside her best friend's well fucked and fully gaped hole.\n\n\"Oh my,\" Buffy gasped, as she felt the hot breath actually blowing inside her while the wet tongue probed into her.\n\n\"I want to see that gaped shit hole,\" Faith said, walking right beside the spread legs and peering down.\n\nWillow swirled her tongue for just a few seconds before backing away and allowing her girlfriend to admire her artistry.\n\n\"Fucking amazing,\" Faith said, the phone in her hand now filming, she shot a full screen video of Buffy's gaped asshole.\n\n\"What are you doing?! You can't film this!\" Buffy protested, just as Willow slid her cock back into her needy asshole.\n\n\"Don't worry Buffy, it's just for us,\" Willow said, as she began bucking into her friend harder, in a perfect position to watch her cock sliding in and out of this beautiful asshole, and also to watch her friend's varying facial expressions. She only wished she'd gotten Buffy to remove her dress first, so see could view those perky tits while she hammered her. Alas, but there'd be a next time. Instead, she moved her hands to both silky-clad ankles.\n\n\"Oh fuck, I don't care, film me while I'm being sodomized, just don't stop fucking my ass,\" Buffy declared desperately... her desire to be ass fucked hard overriding anything else.\n\n\"Oh yes, Baby, pound that asshole, give her that big cock,\" Faith cheered her on, always loving to watch her hot girlfriend reaming an asshole. And it being Buffy's increased the hotness exponentially!\n\nWillow didn't say anything. She just fucked Buffy's ass. Hard. Her hands wrapped around the silky ankles. Her eyes admiring her cock sliding in and out of the tight hole that was made for cock, and then gliding up to see her friend's pursed lips and glazed eyes. As well as listening to her sexy moans, that were increasing with intensity with each deep thrust.\n\n\"Oh fuck, Willow, fuck me, fuck my ass,\" Buffy babbled, watching Willow fuck her... in awe that Willow was fucking her... in awe of the pleasure consuming her body. Her mind churned into mush as pleasure consumed her entire being.\n\n\"Come, you sexy slut,\" Faith exhorted, now frantically rubbing herself, and knowing from personal experience her fellow slayer was close to an apocalyptic orgasm.\n\n\"Oh yes, I'm about to come,\" Buffy announced to her two companions and to whomever might later on be watching the video she was starring in, as she closed her eyes and allowed Willow to bestow anal pleasure upon her... pleasure she'd never before known existed.\n\n\"Come for me, Buffy, come from being my ass pet,\" Willow barked, as she hammered her friend's asshole... her own pussy burning with need from this bucket list fuck.\n\n\"Oh yes, W-W-W-W-W-W-Willow,\" she stammered as if beset by a sudden stuttering affliction, before she was finally able to get the word out just as her orgasm struck her down.\n\nCum squirted up from her untouched pussy and right into Willow's face, as Buffy experienced the orgasm of her life... that made her body feel like it was filled with fireworks exploding in pleasure as her head went light, and her body quaked like it was on the San Andreas Fault line.\n\n\"So hot,\" Faith said, as she too came from frigging herself, watching the slayer sodomy.\n\nWillow pumped the ass for a couple dozen more strokes before pulling out and ordering, as she climbed out of the harness, \"Eat that asshole, Faith.\"\n\n\"You nasty bitch,\" Faith said, even while she eagerly went between Buffy's legs to her leaking pussy and her gaping asshole and ate that ass, just as she watched her girlfriend get onto the desk and straddle Buffy.\n\n\"W-w-what are you doing now?\" Buffy asked, as she saw Willow appear above her.\n\n\"Getting into position for what you'll be doing next,\" Willow said, as she lowered her pussy onto her newest pet's face. \"Now eat my pussy, my pet.\"\n\nOddly, even after all the kink she'd witnessed recently and the anal pounding she'd just received, she'd never considered eating a pussy... for some reason that seemed gay... while getting fucked was only getting fucked, regardless of her partner's gender. But suddenly she was engulfed by a scent unlike anything she'd ever smelt... exotic and enticing. So without really thinking about it, she leaned up and licked her first ever pussy, while her ass was being eaten by Faith.",
        "\"Oh yes, lick my pussy, Buffy,\" Willow moaned.\n\nBuffy was licking away hungrily, this first taste of pussy being enough to make her question her preference for exclusively men. Sucking cock usually provided a taste of sweat or soap, and cock cum was gooey and salty... but pussy was an entirely different libation. It was sweet like wine and smooth like water. She couldn't get enough of it, and now she was dying to learn what a flooding pussy tasted like.\n\n\"I've wanted to have you eating my pussy for so long,\" Willow moaned, as she reached behind herself to grab Buffy's head, and pulled her even deeper into her oasis of flowing juice.\n\nBuffy could feel the wetness dripping onto her face as she licked as if this were her last meal, when it was likely her first of many. One lick and she was addicted; one lick and she wanted not only to be Willow's ass pet, but also her pussy licking pet; one lick and she was pretty sure she wasn't only straight no more, but had completely flipped to being exclusively a lesbian.\n\n\"Don't stop, slut,\" Willow moaned, as her orgasm was imminent.\n\nFaith had stopped eating Buffy's delicious asshole to film this hot lesbian scene, although Willow's skirt was tragically completely covering Buffy's head. That said, watching Willow ride Buffy's face and watching her come was hot all on its own.\n\n\"Oh yes, oh yes, oh yes, fuuuuuck,\" Willow bellowed as her orgasm hit, and she flooded cum all over her best friend's face.\n\nBuffy lapped up the flood of delicious cum as best she could, completely intoxicated by it.\n\nA minute later, Willow's orgasm spent, she got off of Buffy, got off the table, and helped her newest lover up off the hard table and asked, \"So how was that?\"\n\n\"The ass fucking or the pussy eating?\" Buffy asked playfully.\n\n\"Both, silly,\" Willow smiled, enjoying the pussy gleam on her best friend's face.\n\n\"The ass fucking was intense and gave me the best orgasm of my life, and the pussy eating forced me into questioning my sexuality,\" Buffy admitted.\n\n\"Cunt is always better than cock,\" Faith said.\n\n\"I think I've just discovered that,\" Buffy said, stretching.\n\nThe bell rang and Willow said, \"Well, I guess we should reopen the library.\"\n\n\"I hope you're going to fuck me with your magical flesh and blood cock next time,\" Buffy said.\n\n\"You think there's going to be a next time?\" Willow asked seriously.\n\n\"There won't be?\" Buffy asked unable to hide her disappointment.\n\nWillow stared at her for a few seconds before breaking out a smile and saying, after kissing her briefly, \"Oh sweetheart, I'm just yanking your chain. There will be a lot of next times.\"\n\n\"Thank God,\" Buffy said, hitting Willow playfully. \"If you don't want to give me CPR, please don't tease me like that.\"\n\n\"Oh, next time I'm going to come deep inside your asshole Buffy, and then make you walk around with my cum leaking out of your ass for the rest of the day,\" Willow said.\n\n\"Don't forget, I'm your girlfriend, and I get that dick first,\" Faith reminded her.\n\n\"Yes, I'll drill that shit hole right after school,\" Willow said, then whispered to Buffy, \"She's really needy.\"\n\n\"I heard that,\" Faith called out.\n\n\"Am I wrong?\" Willow asked.\n\n\"Well, I didn't say that,\" Faith smiled, as the three of them strolled out of the library arm in arm, looking just like three chums who'd just finished a meeting of their book club.\n\nEnd of part 7"
    ],
    "authorname": "silkstockingslover",
    "tags": [
        "stockings",
        "anal",
        "submissive",
        "threesome",
        "lesbian",
        "strap-on",
        "silkstockingslover",
        "buffy",
        "pantyhose",
        "slut"
    ],
    "category": "Celebrities & Fan Fiction",
    "url": "https://www.literotica.com/s/wilows-way-ch-07"
}
{
    "title": "A World for the Taking Ch. 05",
    "pages": [
        "Just a reminder - Whenever you see an asterisk (*) after a word it means there is a definition or description at the end of the chapter.\n\n*****\n\nIt was well before dawn when Bob, Deborah and Mike rode out. Bob admonished the teens remaining behind to be vigilant and made Yoshi promise not to follow. When the boy gave his word he would look after Jean, Bob handed him Mike's shotgun and a bandolier of magazines. The three riders disappeared down the trail leaving the little group feeling uncertain and helpless. \n\nF`reet `du Hom clearly did not like being left behind. She asked Tammy several unintelligible questions to which the girl could only respond with shrugs and shakes of her head. Oddly, Yoshi pulled the jZav`Etch pilot aside and sat with her near the camp heater. He showed her things on his data pad and she looked with great interest, occasionally nodding and making gestures for him to continue. Jean joined them and quietly watched.\n\n\"What do you think he's up to?\" Roy asked, getting packets of food out for their breakfast. These were not the emergency rations they had eaten the day before. Rather, this food was dehydrated or reconstituted. There was even vacuum sealed bacon Bob had processed from some of the wild boar he had culled the previous autumn.\n\n\"Maybe he thinks he can learn enough of her language to get some information out of her,\" she said, adding a measure of water to the eggs and mixing them in a pouch. \"He's pretty smart, you know.\"\n\n\"Yeah,\" sighed Roy. \"I feel bad for him. I know I want to go help with the rescue, and my family isn't even in town. Here, add some of these peppers to that.\"\n\n\"What do we do if they don't come back?\" Tammy asked seriously, sprinkling a liberal amount of the diced bell peppers into the skillet to toast them before pouring in the eggs.\n\n\"There are enough rations in the cave back there to last a year,\" he said. \"Spare saddles and ammunition, too. Your father really thought ahead about this place. And it's hard to find. I've been by here at least a dozen times hunting and never saw it. Water could be closer, but there are two purifiers with the supplies and a big bladder. Fill that up and we won't need to go to the stream more than once a week.\"\n\n\"That's not what I mean,\" she said, placing her hand on his arm. \"What if the Dusig take over?\"\n\n\"I don't know,\" he said. \"Whatever happens, Tammy, I'll take care of you.\"\n\n\"Or I'll take care of you, you clumsy dolt.\"\n\n\"Dolt? Been reading ancient fantasy again?\"\n\nShe smiled and then leaned in and kissed him. They held each other for a brief moment and then focused on making breakfast. It took them a while to get the food ready and when they brought it to the ring of logs around the camp heater Yoshi was looking intently at F`reet `du Hom, nodding and pointing at the screen of his pad. The pilot was nodding firmly in reply.\n\n\"What's going on?\" Tammy asked, passing a plate to the pilot.\n\n\"I've got a plan!\" Yoshi said excitedly.\n\n\"Mr. Mackey told us to stay here,\" Roy said crossly, passing out two more plates.\n\n\"But he didn't know what I just found out, Roy!\" Yoshi said firmly. There was a fire in his eyes that none of them had ever seen.\n\n\"Just hear him out, Roy,\" Jean said in support of her boyfriend.\n\nF`reet `du Hom said something to Tammy and looked at both of them insistently.\n\n\"Let's listen, Roy,\" Tammy said, pulling him gently down beside her.\n\n\"The uplink tower down by Big Lake is probably still standing,\" Yoshi began. \"If we climb this hill when the sun comes up we should be able to see it. If it's still there I want to go and get it working.\"\n\n\"But your dad hasn't installed the communications gear,\" Roy countered.\n\n\"It hasn't come in yet,\" said Yoshi. \"But he and I spent three days there getting the tower ready for it. Everything aside from the transceiver is installed.\"\n\n\"Wait a second,\" Tammy cut in. \"You were with him?\"\n\n\"Sure,\" said Yoshi with a shrug. \"I'm his apprentice. Communications Guild. I have to learn somehow, don't I?\"\n\n\"No transceiver, no transmissions,\" said Roy. \"So it won't work.\"\n\n\"And it's not like we can kit-bash one of our pads to make it work, Yoshi,\" added Tammy.\n\n\"We have a transceiver!\" the off-world boy replied and showed them an image on his screen.\n\n\"Her ship?\" said Roy dismissively. \"She already told us the communications won't work.\"\n\n\"I know she did,\" said the younger teen. \"That's why I've been talking to her. I thought maybe she didn't understand the questions yesterday.\"\n\n\"So her communications gear does work?\" Tammy asked hopefully.\n\n\"No. But that's because the controls are gone!\" said Yoshi in triumph.\n\nRoy frowned thoughtfully and leaned forward, making a rolling gesture with his hand indicating Yoshi should continue.\n\n\"All we need to do is get her transceiver out and hook it up to the tower's equipment and presto! We can send a distress call!\" Yoshi was clearly excited and F`reet `du Hom looked as if she was in agreement.\n\n\"I don't know,\" grumbled Roy. He rested his elbows on his knees and forked eggs into his mouth while he considered. Swallowing, he said, \"We're supposed to stay and wait for the kids to get here.\"\n\n\"And have you considered whether or not the jZav`Etch hardware will match up with ours?\" asked Tammy. \"We don't even know what kind of power source her ship had. And how long will it take to get the stuff unhooked? How are we supposed to transport it?\"\n\n\"We can put it in the carry pack,\" Jean said. \"Just unload the stuff that's in it now and leave it here.\"\n\n\"The jZav`Etch equipment runs off electricity, just like ours,\" said Yoshi. \"And dad and I left all the tools we'll need to install it. There's a power transformer and everything at the tower. There's even a fabricator. I can make plugs, sockets, tabs, patches, and cables. Whatever we need. Hell, I could make welding rods if we needed them.\"\n\n\"What about tools to get the transceiver out of the ship?\" asked Roy, seeming more interested.\n\n\"I think she has a toolkit onboard,\" said Yoshi. \"I showed her pictures and she nodded.\"\n\n\"Maybe she was trying to tell you she needed those tools,\" countered Roy.\n\n\"No.\" Yoshi shook his head firmly. \"I'm sure she knew what I was asking.\"\n\n\"It's a good idea,\" Jean said.\n\n\"Maybe,\" hedged Tammy, biting her lip in thought. Her tail flicked and her whiskers vibrated. \"It might be worth a try. Who would we call?\"\n\n\"Tyne & Harper has a quick reaction force that could be here in a day,\" said Roy thoughtfully. \"Maybe thirty hours at most.\"\n\n\"Then let's get going!\" Yoshi sprang up, tipping his food on the ground.\n\n\"Hold on!\" Roy snapped and grabbed the smaller teen's jacket. \"Just slow down.\"\n\n\"But...\" Yoshi began to object.\n\n\"Listen to me!\" snapped Roy. \"I heard you out. Hear me out.\"\n\nYoshi frowned but he settled back on his log.\n\n\"I think it's worth a try,\" Roy said calmly. \"But we can't leave here unless there's someone to take care of the kids that are coming. We don't even know for sure who is coming. If there are a bunch of toddlers and some younger teens, they'll need looking after.\"\n\n\"They wouldn't let a bunch of little kids wander through the forest without somebody to watch them,\" argued Yoshi.\n\n\"I don't think so either,\" said Roy. \"Not likely. But we are going to wait for them. Get another plate of food and let's think this through.\"\n\nAt a little before nine in the morning the first group of kids showed up at the rock shelter. Steve Yamato, Mike's friend and rival for the affections of Susan Watts, led a long legged steelie mare with three children on its back. The children looked around with wide eyes as they came down the deer trail into the lee of the hanging stone face. Behind them came several kids in their mid-teens, boys and girls, all with packs on their backs and hunting rifles in their hands. Two more steelies followed with even younger children on their backs, and a young woman not much older than Steve, Mary-Belle Astor, brought up the rear. She carried a Buller 30 with an expanded magazine and on her back in a papoose was her eight month old baby.\n\nTall and blonde with a day's growth of stubble, Steve looked out of place in the group. Roy shook his hand and he and Tammy took him aside while the rest of the refugees sorted things out with Jean and Yoshi. All the newcomers stared at F`reet `du Hom. Many looked back and forth between the pilot and Tammy in wonder. One little boy rushed to the jZav`Etch pilot and embraced her before F`reet `du Hom had a chance to react. Her tail shot straight back and her ears stood up in surprise, but she gently patted the boy on the back and smiled bemusedly.\n\n\"Benjamin!\" cried Mary-Belle. \"That's not Tammy! Sorry. He doesn't know any better. Sorry.\"\n\nMary-Belle continued to apologize as she led the boy away. F`reet `du Hom blinked and returned the little wave Benjamin gave her as he was bundled off to get some food.\n\n\"Good to see you, Steve,\" said Roy when they were out of earshot.\n\n\"Good to be here. We've been walking most of the night. Where the hell did she come from?\" the young man asked, pointing at the jZav`Etch pilot.\n\n\"From the ship that crashed the other night,\" Roy explained. He briefly told Steve about their adventures and listened as Steve added what he knew of the crisis.\n\n\"So no one has been killed since the first night?\" Tammy asked, sounding relieved.\n\n\"We aren't sure, but I don't think so,\" replied Steve. \"I wanted to go on the rescue mission or whatever your father is planning, but my mom and dad said I had to look after my little sister. My mom and her are bringing another group. Your sister is going to be in that one, Roy.\"\n\n\"Angel is okay?\" Roy asked, sounding hopeful. \"My folks, too?\"\n\n\"Yeah,\" confirmed Steve. \"Your dad was going to fly out when Mike sent that emergency broadcast, but he saw one of the other flyers get shot down. He stayed home and tried calling my folks. In the middle of the conversation the coms went down.\"\n\n\"Good to know they're okay,\" Roy said, relieved. \"Look, Steve, as soon as you're all settled in and the kids get some food, we're heading out.\"\n\n\"What?\" Steve asked, surprised.\n\nRoy and Tammy outlined Yoshi's plan while Steve listened. By the time they were done he was frowning and shaking his head.\n\n\"Is the tower even still standing?\" he asked.\n\n\"We saw it less than an hour ago,\" Tammy said.\n\n\"I'm older than you, Roy,\" Steve said. \"I should go along. Leave Tammy and Jean here with Mary-Belle. I mean, we have to take that Yoshi kid, but the girls should stay.\"\n\n\"No,\" said Roy.\n\n\"We're going,\" added Tammy.\n\n\"You need to stay and look after all these kids and the women,\" Roy said. \"You're a better shot than I am and you know this part of the valley almost as well as I do. Tammy and Jean know the lower valley down by the lake better than either of us. They've been camping there quite a few times over the years.\"\n\n\"Besides,\" said Tammy, \"I need to go along because F`reet `du Hom will be more comfortable with me around.\"\n\n\"Furry what?\" Steve said, confused.\n\n\"F`reet `du Hom,\" repeated Tammy. \"That's her name. She doesn't speak any English or Spanish or any other Human language as far as we know. Anyway, she seems okay with me and I think it would be better if I went to help.\"\n\n\"You guys are putting me in a bad spot,\" he grumbled. \"What am I going to tell your dad if he shows up asking about you?\"\n\n\"Just tell him the truth,\" Tammy said.\n\n\"And when he gets done kicking my ass across the valley, what do I do?\"\n\n\"Help him find us,\" said Roy with a shrug.\n\n*****\n\nF`reet `du Hom could not decide whether she should get up and move to the edge of the rock shelter out of sight or try to stay inconspicuously still. After the male child hugged her and the adult female had chivied him away, no others made any attempt to interact. They milled about in a disorderly mass while jZeen` and Yo`Shii distributed food. To be honest, she really wanted another cup of `Kof `Fee. That stuff was amazing! She absently wondered if she could arrange some sort of trade deal somehow.\n\nThoughts of `Kof `Fee disappeared when she noticed T` Emmi and Rddoy speaking intently with the leader of this new group. The newcomer was listening carefully, but his expression was one of disapproval. With the few gestures she could interpret and the direction in which T` Emmi pointed, F`reet `du Hom decided they must be telling him their plan and he seemed to be trying to dissuade them. From what she had learned of Rddoy, an especially strong and handsome male among these Humans, she suspected this unscarred and visibly untried male would not succeed. After all, Bob had left Rddoy to protect T` Emmi and the two adolescent Humans, presumably because he was tougher than the dark skinned, black haired Mike.\n\nFinally, their discussion broke up and T` Emmi came to her and held out a hand. F`reet `du Hom took it and rose. She allowed the young female to lead her to the cave where the animals had spent the night. It was heavy with the scent of fodder and animal droppings, but not in an unpleasant way. T` Emmi spoke as she lifted one of the saddles and handed it to her. The saddle was considerably lighter than it looked. Made with some sort of synthetic, woven fabric and what must have been a composite frame underneath, the saddle was sturdy and well padded. T` Emmi took a set of straps of the kind fastened to the riding animals' heads and waved her to follow.\n\n\"Duchess,\" T` Emmi said, stopping beside the animal that had carried the packs and towed the hovering cargo platform in which F`reet `du Hom had ridden the previous day. T` Emmi placed her hand gently on the animal's shoulder and repeated the word.\n\nUncertainly, F`reet `du Hom extended her hand and placed it next to T` Emmi's, saying, \"dTu `Qehss.\"\n\n\"Duchess,\" T` Emmi said again, enunciating the English word carefully.\n\n\"dTuh` chiz,\" F`reet `du Hom said. Was this what they called the animals? No. T` Emmi referred to her animal as Booti or something like it. F`reet `du Hom spun and touched the large animal Rddoy had ridden and said, \"dTuh` chiz?\"\n\nT` Emmi laughed and shook her head. Placing her hand on the beast's flank she said, \"Gamble.\"\n\nThese were the animals' names. They had to be. Just to be sure, F`reet `du Hom went to the one jZeen` had ridden and waited.\n\nT` Emmi pointed at it and said, \"Tinkerbelle.\"\n\nThe animals swung their long forked tails and shifted from foot to foot but did not otherwise stir. They watched her no matter where she stood. Some used the two eyes on the backs of their heads. Others watched with the four on their faces. With a breed so large and well-armed, their feet sported hooked claws as long as one her fingers, she should have felt threatened, but she did not. They were gentle or perhaps passive and seemed to like the beings who rode them.\n\nBelieving she understood well enough about the names, F`reet `du Hom returned to dTuh` chiz's side and waited for instructions. It was obvious T` Emmi intended for her to learn something and she suspected this animal would bear her on their mission to restore the communications the Dusig had disrupted.\n\nAfter the saddle and head straps were secured to T` Emmi's satisfaction they repeated the process with Boudi and T` Emmi led the animals out into the clear area where the animal trail met the shelter. She demonstrated the proper manner to mount and waited for F`reet `du Hom to imitate her. A little nervously the pilot did her best and found it was not so very difficult. Rddoy came over with a focused expression, staring at her feet in the oddly shaped hoops. He shook his head and made sure she was looking when he carefully took her ankle and pulled her foot from the hoop. He then opened a buckle and lengthened the strap before refastening it. Roy repeated this on the other strap and then carefully positioned her feet in the hoops once more. Though she was not precisely comfortable, these adjustments did give her a better feel for the saddle and centered her weight over her mount. T` Emmi used gestures and a few words to instruct her on her posture. F`reet `du Hom imitated her and waited with great interest. Rddoy said something to T` Emmi and then called jZeen` and Yo`Shii to follow him into the cave. \n\nWhile they were gone T` Emmi patiently instructed F`reet `du Hom in riding. They walked their animals in a tight circle while the group of new Humans watched. Snickers and whispering could be heard from the younger ones, but the older adolescents and the two adults were mostly quiet. It seemed probable these people had never seen two jZav`Etch on the backs of their riding animals before. Of course that was true. They had only ever seen T` Emmi and most of them had probably not seen her very often.\n\nSoon the three others of their original party emerged leading their mounts. Floating behind was the cargo platform, now mostly empty. Roy exchanged a few brief words with the light haired male they were leaving behind and then mounted. He guided his animal up next to T` Emmi's, said a few words and rubbed his lips on hers. T` Emmi grinned, her tail flicking from side to side and her ears lying out to the sides of her head, an obvious sign of embarrassed delight, and then motioned for F`reet `du Hom to follow.\n\nThey took a winding, oblique course down the hill which was just as well. Had they attempted a more direct descent F`reet `du Hom would certainly have fallen. Probably more than once. It rattled her nerves when dTuh` chiz leapt onto a fallen tree and proceeded along its length while the other animals remained on the ground. However, when the trunk became too narrow for dTuh` chiz's liking she hopped down rather gracefully and continued to follow the leaders. T` Emmi smiled and nodded approvingly at F`reet `du Hom. The pilot sighed in relief. She had done well apparently.\n\nThe two suns were high, nearly directly over the valley, when Rddoy drew to a stop in a small clearing. From his pocket he took one of the small devices all of these Humans carried. After examining it for a time he spoke with T` Emmi and pointed down into the valley. Looking, F`reet `du Hom saw broken trees. This was clearly not the site where her scout ship had crashed and she did not know why the tall, red haired male was remarking upon it.\n\nFrom behind her the young male spoke. It sounded as if he was disagreeing about something. Rddoy calmly replied and thumped his animal in the sides to set it in motion again. She followed.\n\nHours passed. They took more winding, narrow trails and F`reet `du Hom grew hungry. Not as hungry as she had been while a prisoner of the Dusig aboard B`hag`Geera's Thumb*, but hungrier than she liked. Things had begun to come back to her. She could recall the mutiny. The Dusig of one clan had slain all the others aboard and taken control, locking the few jZav`Etch officers in the captain's cabin. At some point they had rendezvoused with another vessel, probably a Dusig interplanetary ship, and more Dusig had joined them. A young matriarch, larger and more domineering than the males, had visited the prisoners and made certain they were given rations. The navigator, a Pah`Tht male named Qel'ta Nhem, had been dragged out under protest. When next the cabin's door opened the captain had led an escape. The chief engineer had been killed but F`reet `du Hom and Captain Del `uTrect had killed the guards and made a break for the hangar bay. She recalled they had been briefly recaptured and the captain had been beheaded. She still could not recall how she had gotten away from the rebels. She shook her head in frustration. Everything after the beheading was foggy until she woke up on the stretcher among the Humans and she still could not remember why she had come this way. Why had she chosen this system instead of steering a course back towards Hegemony territory?",
        "\"F`reet `du Hom,\" T` Emmi said, drawing her from her contemplations. \n\nShe looked up to find they had stopped on a new trail among very tall, thick boled trees. Below them, among splintered limbs and crushed undergrowth, rested a large white craft of some sort. The smell of death hung on the air. T` Emmi gestured for her to dismount and then waved her closer.\n\n\"What is this?\" F`reet `du Hom asked.\n\nT` Emmi spoke. Seeing the pilot did not understand, the girl cradled her arms as if she were holding a baby and rocked back and forth saying, \"Mother\" and \"Father.\" She made more hand gestures and noises indicating the craft had been shot and crashed here.\n\nThis could not be! Bob and his mate could not be in that wreckage! They had ridden out before daylight. She had heard no sound of engines. And surely T` Emmi would be far more distressed had her adoptive parents' bodies been in the craft.\n\nF`reet `du Hom sprang down through the trees with T` Emmi calling and following after. She ignored the girl. Perhaps not all of the occupants of the craft were dead. What she found was a sizable vessel with massive fans in deep wells and blast damage on the rear where the power plant must have been. She considered the wreckage for a long moment and realized this must be the vessel Bob had told her of on that first day. She sighed with some relief but had to wonder why the smell of death hung about the ship. Rddoy and Yo`Shii were lifting what looked like toolkits from a compartment on the side and jZeen` was leaning through a large hatch, looking in. The girl's face was sad and she knelt to touch something within the compartment.\n\nF`reet `du Hom went to jZeen`'s side. She placed her hand on the girl's shoulder comfortingly and looked in. There lay a large riding beast, dead. Three of its legs were clearly broken. This was the source of the smell.\n\njZeen` rose and wiped her eyes. The girl was mourning the death of the animal.\n\n\"So, Humans love the creatures that serve them as my people do,\" F`reet `du Hom said gently. She drew the Human girl into her arms and hugged her. The girl responded, but soon she pushed away. Her words were unintelligible, but the meaning was clearly thanks. \"No pain for this one anymore, little one. She rests in the lap of the Builder with all her ancestors, and so shall all who serve.\"\n\njZeen` hugged her again and went to help carry the tools. With a final glance at the dead animal F`reet `du Hom stepped over to Rddoy and took the large case he had just pulled from the compartment. He made some small protest, as if he would carry it, but she shook her head and followed jZeen` and Yo`Shii up the slope with the case on her shoulder.\n\nOnce the tools were stowed in the cargo carrier they all mounted and moved a short way down the trail until the scent of death no longer lingered. Here they dismounted and had a meal of the cold rations. \n\nT` Emmi looked fidgety. Presently F`reet `du Hom learned why. The girl took from the pack on her mount a belt with a holster and other pouches. She presented this to the pilot with a few words and made the rocking motion with her arms cradled again. Gesturing at the sky and drawing her finger down to point at something to the south she repeated the motion.\n\n\"What is this?\" the pilot wondered aloud and unfolded the belt. \"A utility belt? Where did it come from? How did you get it?\"\n\nEven as she asked, it came to her. The girl had been trying to explain this had belonged to one of her parents. Probably her mother, given the gestures she had made. F`reet `du Hom drew the deq'istle* from the holster.\n\n\"This is an older model,\" she said, examining the weapon carefully. It was in good shape and looked as if it had been well maintained. She pressed the diagnostic button and was not surprised to find the weapon in perfect order. Only three shots had been fired from the magazine and the charge was nearly at full capacity. She looked to the girl and asked, \"Are you giving me this?\"\n\nT` Emmi pushed the weapon and belt at her and nodded.\n\n\"Thank you, T` Emmi,\" she said and then, realizing there were tears in the girl's eyes, she leaned over and rubbed her cheek on the girl's in the manner of a sister or aunt. This was likely the only thing the girl had of her mother's. Likely, she had never known anything of her history and this, if lost, would cut her off completely from her family.\n\n*****\n\n\"Are you sure you want to give that up?\" Roy asked. He looked concerned for Tammy, knowing what the gun belt meant to her.\n\n\"We don't have any other weapons for her,\" she replied. \"And she might need one. At least it's something she's familiar with.\"\n\n\"Still,\" said Jean, looking just as concerned as Roy.\n\n\"Is it a jZav`Etch gun?\" Yoshi asked, interested.\n\n\"Yeah,\" said Tammy, watching as F`reet `du Hom inspected the other things in the belt's pouches. \"There's a medical kit and a spare magazine for the pistol. Some other stuff. My mother, my birth mother, was wearing it when she escaped her ship and swam to shore with me. Not exactly all I have of her, but most of it.\"\n\nThe somber silence that followed was broken by the sound of one of the Dusig ships rumbling to life in the north. Roy stood and put his binoculars to his eyes. The noise began to swell, filling the valley with thunder once again.\n\n\"Can you see anything?\" Tammy asked.\n\n\"Too many trees,\" said Roy. Already he had to speak louder in order to be heard above the ship's engines. And the sound continued to grow. The steelies became restless and even the teens found themselves becoming apprehensive. Clearly the ship was coming closer at a rapid pace.\n\nF`reet `du Hom tried to be heard through the thunder, but she had to settle for waving her hands and motioning the Humans to duck behind cover. When Roy ignored her she dragged him by the arm and shoved him behind a large tree. Roy looked irritated, but did not resist much. A moment later the Dusig ship passed their position. It was as large as they remembered and in the light of day seemed more menacing. The engine noise changed. It made several enormous coughing sounds in rapid succession and then the sound dropped off markedly.\n\n\"What's it doing?\" called Yoshi.\n\n\"How the hell should I know?\" Roy called back.\n\n\"Sounds like it stopped,\" Jean yelled.\n\nShe was right. The noise had changed in pitch, but the ship was no longer moving. Roy jerked his arm from F`reet `du Hom's grip and moved to where the trees were not as dense. The rest of the group watched apprehensively and every one ducked when the tall red haired boy dove behind a log. The ship thundered past their position again, heading north. Soon it was back at Waimea and the noise quickly dissipated. The teens came out of hiding.\n\n\"Any guesses as to what that was about?\" Tammy asked no one in particular.\n\n\"They wouldn't do that just for the sake of doing it,\" said Jean. Her expression was one of serious concern and distress.\n\n\"They were moving too fast for it to have been a patrol,\" said Yoshi. \"A lot faster than a spinner or flyer could go.\"\n\n\"I don't like it,\" Roy said, striding back to the group, knocking dirt and twigs off his clothes. \"I really couldn't see much. I think they stopped near my folks' station. Just dropped down to treetop level for a minute and then rose and flew off.\"\n\n\"You think they were looking for her?\" Yoshi asked, indicating the jZav`Etch pilot with a thumb.\n\n\"Maybe.\" Roy shrugged. \"Why'd they take off so quick, though?\"\n\n\"F`reet `du Hom?\" Tammy said to get the pilot's attention. \"Why?\"\n\nThe girl made a few gestures and noises imitating the flight of the ship and then turned her hands palms up.\n\nThe pilot scowled in the direction of town and then squatted down to clear leaves from a smooth patch of dirt. Using a stick she made a quick, crude drawing of the Dusig ship in profile. She looked to be sure Tammy and the others were watching and then she drew a straight line down from the tail of the ship and made a few stick figures on the line and in a row at the bottom of it, as if the figures were standing on the ground.\n\n\"She thinks they dropped off a foot patrol,\" said Roy, rubbing the back of his neck.\n\n\"That's not good,\" Jean said. \"Should we turn back?\"\n\n\"You should,\" said Yoshi. \"And you too, Tammy.\"\n\n\"Come with me, Yoshi,\" Jean replied immediately.\n\n\"I'm not going back,\" Tammy said firmly. \"You're going to need me when you get down around Big Lake and the Tower.\"\n\n\"I can't go back, Jean,\" Yoshi said. He put a hand on her arm and looked her in the eyes. \"Roy and Tammy won't be able to hook up the transceiver.\"\n\n\"We should all go back!\" the girl protested. \"We don't even know if it will work! Yoshi, come on!\"\n\n\"We are not going back,\" Roy said. He scowled down at the drawing in the dirt. \"Something has to be done, Jean. They have a ship in orbit. We can't do anything about that from the ground. If we take them on at Waimea they could send more troops. They might just bombard us the way they took out the tower and the fliers.\"\n\n\"But there are soldiers on the ground at your cabin,\" she said, her voice rising in pitch. \"Are we going to fight them?\"\n\n\"Jean!\" snapped Tammy. \"Pa always warned us not to panic. Calm down, take a breath and let's think about this. You were all for it this morning.\"\n\n\"There weren't any soldiers between us and the tower then!\" her sister said.\n\n\"That doesn't change what needs doing,\" Tammy replied firmly.\n\nJean looked as if she were on the verge of tears. For a second Tammy thought her sister would start screaming and crying but Jean gulped in a deep breath, straightened her back and forced the tears away.\n\n\"Alright,\" Tammy said soothingly. \"Let's try to figure out what they're up to.\"\n\n\"F`ret Do Hum,\" Roy said, butchering the pronunciation. \n\nThe pilot flicked her ears and sighed, but she met his eyes and gave a nod. \n\n\"How many?\" he asked, pointing at the stick figures. When she only shook her head as if confused he began ticking off fingers, saying, \"One, two, three...\"\n\nF`reet `du Hom's ears cocked forward when she realized what the Human was asking. Squatting near the drawing she picked up her stick again and started making tally marks. The surprising thing was that she used the same sort of ancient system as every Human school child was taught except she made five vertical lines before crossing with a sixth. In total she scratched twelve lines in the dirt and then looked at Roy to see if he understood.\n\n\"That's a lot of people,\" he said.\n\nTammy squatted next to the pilot and touched the pistol she had given her. F`reet `du Hom seemed to understand. She shook her head and pointed to the Buller 30 on Jean's saddle.\n\n\"They'll have rifles,\" Yoshi said, interpreting the meaning.\n\nRoy gave Tammy a questioning look. He turned up a palm and glanced at Jean and Yoshi and then returned to her.\n\n\"Jean,\" Tammy said. \"Roy and I are going on. At least to the ship. If you and Yoshi want to go back, go on. I think you should.\"\n\n\"You are going to need me,\" argued Yoshi stubbornly. \"I'm not going back.\"\n\nJean bit her lower lip and looked at her boyfriend. She threw her arms around him and said in a rush, \"If you aren't, I'm not!\"\n\n\"What's our next move, Roy?\" Tammy asked. She wanted to reach out and hug him, but she felt she needed to be strong for her little sister and Yoshi. She could smell how scared they both were. She could smell how scared Roy was. Her tail flicked uncertainly and part of her mind was amused to see F`reet `du Hom's tail flicking in the same manner.\n\n\"We'll cross at the ford above my folks' place,\" Roy finally said. \"It's deeper, but not as wide as the lower one we crossed yesterday. That will bring us in north of where the ship stopped. Maybe they won't be expecting us to come at them from that direction.\"\n\n\"You want to fight them?\" Yoshi asked. He still had his arms around Jean, but he was paying attention to the conversation.\n\n\"Hell no,\" said Roy with a shake of his head. \"We don't know anything about them other than they're armed and they killed some of our people last night. I want to see where they are. If we can skirt around them without being seen, maybe we can get to her ship and get the transceiver without them knowing we are even out here.\"\n\n\"What if we can't?\" Tammy asked.\n\n\"I don't know yet,\" he admitted. \"We have an advantage over them. We know the territory and they don't.\"\n\n\"They probably have all kinds of electronics,\" warned Yoshi. \"Maybe drone scouts. Maybe ground level sensors. Lots of things we don't know about.\"\n\n\"Sensors?\" Tammy said and shot Yoshi a speculative look.\n\n*****\n\n\"You think this is going to work?\" Roy asked Tammy.\n\n\"Pa's got the whole valley under surveillance,\" she said. \"All the way from Waimea down to Big Lake. The entire Mid Valley range is his responsibility.\"\n\n\"I thought he just covered the middle of the valley,\" said Yoshi as he removed the cover from the old sensor they had found not far from the trail. It had been in place for so long moss had grown on it. Under the cover the device was pristine, as clean as if it had just come from the factory.\n\n\"We're in the Mid Valley, Yoshi,\" Jean said. \"Mid Valley is between East Valley and West Valley. And beyond West Valley are the Plains Districts. Beyond East Valley is the Costal Range and the Coast District.\"\n\n\"You really didn't pay attention in your orientation class, did you?\" Tammy observed.\n\n\"We came here to take care of the electronics,\" Yoshi said, pulling the service box from its compartment. \"My family only gets half a share of the harvest profits.\"\n\n\"That'll be in two more years,\" said Roy. \"You going to leave after that?\"\n\n\"I don't think so,\" said Yoshi. He set his pad next to the service box and keyed in a command. \"Mom and I like it here. Dad is okay staying. He doesn't much care where we are as long as he can tinker with his designs.\"\n\n\"I know a few of the settlers are going to pull up stakes when the harvest is done,\" said Roy. \"Maybe you or your folks can take over one of those parcels.\"\n\n\"Maybe.\" Yoshi shrugged as if he wasn't particularly interested. With a last flurry of taps on his pad screen he said, \"Okay. We're in.\"\n\nHe tapped another command and brought up a hologram above the pad. A relief map of the valley showed the locations of all the sensors as bright green pips. There were a few flashing red, indicating they needed servicing. He tapped again and zoomed the view to the area surrounding Dodge Station.\n\n\"What do I need to be looking for?\" he asked.\n\n\"Let me take a look,\" said Tammy, crowding in next to him.\n\nThe cat girl tapped a new command that created a holographic image of a standard keyboard. Her fingers danced over the image of the keys as if they were real, though sometimes her fingertip sank right through them. For an instant the valley lit up with pulsing blue pips. Thousands and thousands of them shone and then most disappeared.\n\n\"What was that?\" asked Roy, leaning in closer to stare at the map.\n\n\"Pretty much every living animal in the valley,\" she said. \"I narrowed it down to things as big as we are. Now I'm telling it to eliminate known animals.\"\n\n\"Known animals?\" Yoshi asked, fascinated by the changing display.\n\n\"Known animals,\" she said, nodding. \"Deer, bears, wolves, bighorn sheep and so on.\"\n\nThey fell silent and watched as more and more of the pips went out. F`reet `du Hom hovered behind them, watching with as much curiosity as the rest. Soon only a dozen pips remained.\n\n\"That's them,\" said Tammy.\n\n\"Are you sure?\" asked Yoshi.\n\n\"The system doesn't know the life signs,\" Jean said. \"Has to be them.\"\n\n\"Looks like they're moving away from the station,\" said Roy. \"Zoom in tighter, Tammy.\"\n\nThe hologram shifted until only the line of pips and the area surrounding them was in view.\n\n\"That's a deer trail,\" she said.\n\n\"It's the trail we used to get to the ship,\" said Roy.\n\n\"Wish we had the satellites,\" grumbled Yoshi. \"We'd be able to see them. We could find out what they look like and what sorts of stuff they have.\"\n\n\"Well, we just got one big ass advantage, Yoshi,\" said Roy, sounding like a wolf that just spotted its first meal in weeks. \"Save that setting, Tammy. When we get to the other side of the river, we'll find another sensor and check on them.\"\n\n\"But they're going for the ship,\" said Jean. She looked pale and worried.\n\n\"I know,\" said Roy. \n\n\"What if they blow it up or something?\" Yoshi asked.\n\n\"If they do, we'll head back to the rock shelter and try to think of something else,\" he said.\n\n\"We need more of plan than just going over there and punching them in the nose,\" Tammy grumbled.\n\n\"We've got a plan,\" said Roy, unperturbed. \"We're going to see what they're doing. After we know more, we can figure out what to do next.\"\n\n\"Yeah,\" said Yoshi thoughtfully. \"We already know more about them than they know about us. Probably, they don't even know we're here.\"\n\n\"What if they do?\" Jean asked. \"What if they're looking for us? What if they've got drones hovering over our heads right now? Maybe they're going to the ship to trap us.\"\n\n\"That doesn't add up,\" Roy said, shaking his head. \"If they knew we are here, why wouldn't they have just dropped right on top of us? Or blown us up?\"\n\n\"She's at least partly right, though. They've got too much of an advantage with their ships,\" said Tammy. \"They can move around a lot faster than we can.\"\n\n\"And we have to assume they have good communications,\" add Yoshi. \"They almost have to have military grade radios. I know CP Marines can talk to ships in orbit. These guys have to be able to do that.\"\n\nSuddenly, the speaker on Yoshi's pad came to life and they heard a voice saying, \"All hunters, Bob's big show starts at seventeen hundred. Bob's big show starts at seventeen hundred. Be ready.\"\n\n\"That was Uncle Dan!\" Jean said, her eyes wide.\n\n\"What does that mean, though?\" wondered Tammy.\n\n\"Sounds like your dad is going to do something,\" said Yoshi.\n\n\"Big show sounds like an attack, maybe,\" Roy speculated.\n\nEveryone was silent for a minute. They looked at the little pad on top of the sensor and waited for another transmission. When nothing more was said Tammy and the younger teens looked at Roy. He shrugged.\n\n\"Roy, isn't seventeen hundred about when the suns will set?\" asked Yoshi.\n\n\"They set a little before sixteen thirty last night,\" the older boy replied. He was staring out across the valley as if thinking. \"We could be at the crash site in another couple of hours. If Mr. Mackey's big show is a big enough distraction we might be able to take those guys by surprise.\"\n\n\"There are twelve of them and only five of us,\" Tammy pointed out. \"And even if they don't have drones they probably have sensors with enough range to pick us up. And only three of us have rifles.\"\n\n\"I have the shotgun,\" Yoshi said.\n\n\"Not much good,\" Roy said, scratching his chin. \"Mike didn't pack any slugs. Your buckshot wouldn't be effective at more than forty meters.\"\n\n\"I have my bow,\" said Yoshi. \"I can take down deer at more than fifty meters.\"\n\n\"You packed a bow?\" Tammy asked.\n\n\"It's in my pack on Little Gertie,\" he said.\n\n\"That's still not very far,\" Jean said, frowning.\n\n\"Not compared to a rifle, but in these trees I don't think any of us will have a clear shot unless we get pretty close,\" Roy said, looking at Yoshi. \"Could you hit anything at night?\"\n\n\"I never tried,\" the younger boy admitted. \"Not allowed to hunt after dark.\"\n\n\"What if he used your NVGs?\" asked Tammy. \"Looking through those is like looking through polarized lenses.\"\n\nWhile the teens had been talking F`reet `du Hom had been fretting. Finally she began pacing restlessly. Everyone looked at her and watched, wondering what she was thinking. She became aware of their eyes on her and turned to face them. She met each's gaze and then stepped to the middle of the little group and pointed to Dodge Station on the holographic map. She then ran her finger along the trail towards where the crash site should be, looking to make sure everyone was paying attention. In the dirt she scratched a rough outline of her ship, from the top this time, and then made a dozen Xs around it, pointing back and forth from the pips of the Dusig on the map to the Xs.",
        "\"Is she saying they're going to surround the ship?\" Jean asked.\n\n\"Something like that, I think,\" Roy said and squatted down by the sketch in the dirt. He held his palms up the way Tammy had earlier when the jZav`Etch pilot had understood the question about the coming and going of the Dusig ship.\n\nF`reet `du Hom pointed around at all the teens and then scratched a curved line a couple of dozen centimeters off to one side of the ship, jabbing the stick in the dirt at four different spots.\n\n\"Those are us?\" Roy asked, indicating the spots and then gesturing at himself and his friends.\n\nThe pilot nodded exaggeratedly. She pointed the thumbs of her left hand at her chest and jabbed the stick into the dirt a hand's breadth from the nose of her ship. Pulling her oversized pistol from its holster she pretended to fire several shots and then quickly scratched a squiggly line away from ship. Spreading her hand over the twelve Xs she moved it just above the dirt as if the Dusig were chasing the squiggly line.\n\n\"That might work,\" said Yoshi.\n\n\"Maybe,\" agreed Tammy.\n\n\"Wait,\" said Jean. \"Is she saying she wants to get them to chase her?\"\n\n\"That's what it looks like,\" said Roy. \"And it might work if she knew the territory and could ride better.\"\n\n\"So, what? She gets them to chase her and we go in and grab the transceiver?\" said Jean.\n\n\"We don't know where it is,\" said Yoshi. \"I mean, I don't even know what it looks like. We could grab the wrong thing.\"\n\n\"You're right,\" agreed Roy. \"And she doesn't know the territory. She can't ride worth beans, yet, either.\"\n\n\"And what's to say they won't just come right back?\" said Tammy.\n\n\"I'll do it,\" said Roy. \"She needs to stay with you.\"\n\n\"Roy! You can't!\" gasped Tammy.\n\n\"She can't!\" countered Roy, shaking his head. \"It's the only way it would work.\"\n\nThe two young lovers bickered back and forth, each giving reasons the idea would or would not work. Jean joined in ineffectually, not knowing who to support. F`reet `du Hom tried to get them to see it her way, but given that she spoke no English she was at a serious disadvantage. Finally Yoshi threw in his two cents, shouting to get their attention.\n\n\"Roy!\" he said when they all looked at him. \"At Mike's cabin I saw a box of explosives. Were those for clearing stumps and boulders?\"\n\n\"Um... Yeah. Pugh 36*. Why?\"\n\n\"How much was there?\" the off-world boy asked, squatting down by the sketch in the dirt.\n\n\"About four kilos,\" said Roy. \"Why, Yoshi?\"\n\n\"This just reminds me of something I read about a war on Old Earth way before the North American Event.\" Yoshi frowned and rubbed his hairless chin. \"You might not have heard of it, but it was a big deal at the time. They called it the Vietnam War. It was a really big mess. The opposing sides were mismatched. One was the United States which was a big industrial nation. The other was a local Communist government trying to get control of the whole country.\"\n\n\"I never heard of it, but get to your point,\" Roy said, cutting him off.\n\n\"Right. Sorry,\" the boy apologized. \"They had these weapons called claymores.\"\n\nYoshi went on to explain how the weapons worked and then outlined his plan. Again, they all went silent as they considered it.\n\n*****\n\nThis was so uncomfortable. She had no training for planetary operations. Survival courses were required, of course, but this was not survival. This was combat and her specialty was piloting an interstellar ship. She had not bathed in she did not know how long and her borrowed clothes, already soiled from two days traveling through the forest and sleeping on the ground, were now soaking through with dew. But this was combat and she could not allow herself to be distracted. She only wished she more fully understood the plan these children had come up with.\n\nF`reet `du Hom crawled on her belly through the undergrowth of this strange planet with its two moons just starting to rise above the treetops. Behind her followed Yo`Shii and in the lead was jZeen`. Why was the youngest female leading? Was Yo`Shii that inexperienced? And where were T` Emmi and Rddoy?\n\nShe had attempted to argue with the children, but in the end F`reet `du Hom had given in. She had wondered why they wished to divert from their course so far, but at the farm, or so she assumed it to be, the adolescents had collected explosives. She had not understood what the red box contained until Rddoy had pantomimed an explosion and even made noises she recognized from her younger brother's toy battles. (Humans and jZav`Etch really were alike in so many surprising ways.) Using drawings in the dirt they had explained what they would do. She thought it was madness for Rddoy and T` Emmi to act as decoy. That was the role she had intended to play when she proposed the plan. In the end, they had forbidden it. As far as she understood them, their reasons were good, logical and practical. Regardless, it did not sit right in her mind. She was the one with the military experience and she was the adult. And yet...\n\nThrough the dimness F`reet `du Hom saw jZeen` come to a stop behind a large fallen tree. Its leaves were wilted but in the scant light she saw they were still green. Could this have been thrown here during her landing? The tree had been tall and stout and its trunk had not deteriorated. It might provide sufficient protection from a few blasts of ferro-plas*. Perhaps enough for them to escape back into the little gully where their mounts were hidden. F`reet `du Hom glanced over her shoulder to be sure Yo`Shii was still there. Thankfully he had not gotten lost. That was surely due to the goggles Rddoy had loaned him.\n\nWhen she crawled up next to jZeen`, she edged along the thick trunk to a point where she could look between two large branches and froze. They were too close! The Dusig must have detected them! In her fright she almost called out a warning to the young Humans. She held back only because she realized the Dusig were not scrambling for weapons.\n\n\"What in the name of the Armored God are they thinking?\" she murmured under her breath. \"No sensors? Only one guard? And why is their fire so large? Why do they even have a fire?\"\n\nShe felt a tug on her trouser leg and looked to find jZeen` pressing a finger across her lips vertically in a gesture that had to mean she wanted silence. F`reet `du Hom flicked her ears in annoyance. The girl was right, though. This close any noise might give their position away. She nodded and went back to examining the camp below.\n\n*****\n\n\"I still don't like this, Tammy,\" Roy complained. \"I can do it alone. Just go up the slope. When they follow me you can go help Yoshi and Jean.\"\n\nShe leaned out of her saddle and kissed him, long and deeply. Roy gasped when she finally broke the kiss.\n\n\"I can see in the dark better than you can,\" she said. \"And we already decided to go together.\"\n\n\"If you get hurt...\"\n\n\"If I get hurt, you'll be with me,\" she said and kissed him again. \"Now let's stop talking. I'm nervous enough.\"\n\n\"Nervous?\" he snorted. \"I'm scared shitless.\"\n\nThey sat in the darkened forest on the trail one hundred meters down slope of the crash site. The trees grew so thickly they could hardly have seen the ship in full daylight. Fortunately the Dusig had been courteous enough to light a fire so they knew exactly where they were. They could even see the occasional figure pass in front of the flames.\n\n\"Don't seem to be using any kind of sensor,\" murmured Roy.\n\n\"Maybe they just aren't very smart,\" Tammy whispered back. \"Is it almost time?\"\n\n\"Pretty close,\" he said, licking his lips. His mouth was dry. He really wanted a drink of water. Beer would have been even better. Or whiskey. Whiskey was what all those cowboys used to drink in all those stories from Ancient Earth. Roy flexed his numb fingers and wondered if that was from the chill of the spring air. The temperature might also explain why his knees were shaking, but if that were the case, why was sweat trickling down his back? He shifted in his saddle and hunkered down to wait.\n\nFrom a great distance came the sound of heavy guns firing and then an all mighty explosion. Their mounts jumped at the unexpected noise and in the camp every enemy soldier rose and rushed to look northward towards the town. Roy clapped his heels into Gamble's ribs. The big stud sprang into a bounding lope. Tammy followed on Boudi, her pistol in hand. The Dusig were caught completely off their guard. The first shots from Roy's pistol actually put one on the ground, though he could not tell if the enemy were dead or only wounded. Tammy fired wildly at the group, some of her bullets ricocheting off the hull of the jZav`Etch ship. As soon as they were certain the enemy understood what was happening the teens hauled on their reins and spun their mounts around. Behind them they heard the howls of their pursuers.\n\n*****\n\n\"That's done it!\" barked Yoshi, rising from his hiding place with his bow in hand, an arrow knocked on the string. He was immediately jerked back to the ground by F`reet `du Hom. She lay beside him and Jean, looking over the thick log that shielded the three of them.\n\n\"Stay down, Yoshi!\" hissed Jean. \"Not all of them are following Roy and Tammy.\"\n\n\"We need to get going!\" he said urgently, pushing his borrowed NVGs back in place.\n\nF`reet `du Hom smacked him across the back of his head and hissed softly, pressing her hand to his lips. Yoshi squirmed and finally pushed her hand away. He scowled in the darkness and picked the NVGs from the dirt, but he kept quiet. \n\nBelow, three Dusig remained near the fire. One was on the ground. The other two were frantically tending to his wound. Some distance down the trail they could hear gunfire. F`reet `du Hom crept silently over the log and down through the trees and underbrush, making not a sound. Yoshi rose again with his bow. He was no match for the jZav`Etch's stealth, but from where he knelt he had a clear line of sight to the enemy by the fire. Jean slid her Buller 30 across the log and narrowed her eye through the gunsight. They had been warned to keep their attack as quiet as possible so Jean would hold her fire unless there was real danger to F`reet `du Hom. The jZav`Etch got into a position she liked and waved her arm as signal.\n\n\"Now, Yoshi,\" hissed Jean.\n\nThe arrow flew from the bow and struck the nearer Dusig in the back at the base of his long neck. He screamed and thrashed, pitching forward over the one on the ground. The other soldier looked up, his lizard-like face bewildered. Yoshi was knocking his next arrow, but F`reet `du Hom attacked first. She leapt five meters through the air and struck the Dusig full on, bowling him over. The jZav`Etch was back on her feet in an instant and sprang upon her victim with teeth and claws bared. Yoshi lowered his bow, not knowing what to do and Jean grimaced as she watched through her scope. \n\nThe Dusig soldier never stood a chance. F`reet `du Hom had taken him completely by surprise and his weapon had been lying in the dirt. She slashed his face to the bone and kicked, sending him sprawling on his back. The Dusig proved to be fairly tough, though. He shrugged off the lacerations and reached for his pistol. Yoshi was about to shoot again and Jean's finger touched her trigger, but F`reet `du Hom pounced into their line of fire. Her slashing claws drove the soldier back and another kick broke his knee. He dropped with a howl of agony and she dropped atop him. With his own knife the jZav`Etch pilot slit the soldier's throat.\n\n*****\n\n\"Roy!\" cried Tammy. \"They aren't following us!\"\n\nRoy chanced a look over his shoulder and saw she was right. Gamble grunted and squealed when the big red haired boy hauled back on the reins, but the stud obeyed and skidded through the leaf mold to a stop. Tammy on Boudi shot past them even as Roy was turning his mount around. The girl gaped, not understanding his plan and it took her several seconds to bring her large mare to a stop.\n\nRoy strained to see through the night as Gamble galloped under the trees. It was nearly too late when he spotted the darker forms on the trail ahead, already turning back for the crash site. Once more he hauled back on the stud's reins, firing a dozen shots even as the beast spun. One of the figures grunted and fell. The others turned and brought up their weapons. Roy waited for them to begin firing again before thumping Gamble in the ribs. He did not let the stud have his head this time. Instead, Roy kept him at a slow lope, glancing back and firing every few meters to be sure the enemy did not lose interest. Their shots came close a dozen times, some flying off into the woods and starting small fires, but Roy was never hit. \n\n\"What the fuck were you thinking?\" Tammy demanded when he thundered around the curve of the trail.\n\n\"Run!\" he yelled and slapped Boudi in the rump as he passed.\n\nBoudi reared and skittered and started after Gamble. Looking back, Tammy's eyes went wide and a lump of ice formed in her belly, but she did not freeze. Her pistol barked out half a dozen rounds and one of their pursuers sprawled his full length upon the dirt. Boudi was already moving so Tammy had only to let her go. The big mare snorted and shied from the snarling blotches of light that streaked by. Tammy's pistol barked again and then she was passing Roy. \n\n\"We're nearly there!\" he called.\n\n\"Good!\" she shouted as more of the weird Dusig rounds streaked past them. She fired over Boudi's haunches again and charged down into the narrow gully they had scouted earlier in the evening. \n\nRoy held Gamble in place, firing his pistol as if he would make a stand and offering the enemy a target to encourage them. He waited for Tammy to get a few lengths down the trail before breaking off and following her.\n\n\"There's the boulder!\" Tammy cried as Roy caught up to her. She aimed and fired three shots and Boudi was on the move again. Howling strange ululating war cries the Dusig leapt into the defile behind them.\n\nRoy galloped past the large, mossy stone just off the path to a thicket of saplings around an old fallen trunk. Gamble leapt the trunk and Roy dismounted so quickly he nearly fell on his face. He fumbled getting his rifle off the saddle, but had it ready by the time Boudi bounded over him so close her hind claws brushed his hair. \n\nTammy dismounted far more gracefully than had Roy and her rifle was next to his an instant later. The Dusig rushed pell-mell around the curve in the path and were met by a blast of light and stone fragments when Roy triggered the explosives. Stunned, the survivors dropped to the ground and cried out to one another. Roy and Tammy opened up at less than thirty meters with their long guns.\n\nRoy's first round smacked into the lead soldier's helmet sending fragments of armor and skull flying through the night. Tammy killed the next with a clean shot just above the breastplate and below the creature's long chin. Viridian bolts impacted on the trunk. Splinters flew. Tammy squeaked in surprise as one sliced through her ear. Roy glanced to be sure she was okay, but the girl was still firing. He returned to pulling his trigger, silencing another of their foes. \n\nThrough his scope Roy saw the last two edging back up the gully. Without thinking he leapt the splintered log and charged. The Dusig in the rear heard him coming and turned, bringing his rifle up. A round from Tammy's Johnson Big Bore hammered through his breastplate and dropped him in a spray of blood and gore. The last Dusig shot a glance over his shoulder and poured on more speed. Roy was young and angry and had lived a life among these trees. He covered the ground between them like a storm on the wind and hammered the butt of his rifle into the creature's helmet. The Dusig sprawled his full length in the dirt, rolled and came up snarling with a knife in his hand. Roy was bringing his rifle to bear when a huge body knocked him off his feet and slammed into the Dusig soldier with an audible crunching of bone. Roy's vision swam but he made out the form of a very large steelie rending the Dusig. Ten centimeter long claws raked, tearing away armor plates and the flesh beneath as the soldier screamed in pain and terror.\n\n\"Gamble!\" Roy cried over the terrible noise. \"Gamble, no! Off! Off!\"\n\nBut Roy was too late. With enough force to cut through one centimeter carbon steel cable Gamble's teeth bit into the Dusig's neck, crushing the vertebrae. The screaming stopped. With a final stomp Gamble chuffed and snorted and looked about, seeking other foes. Only the dead were to be seen.\n\nShock passed and Roy looked back at the carnage he had inflicted. He began to shake all over and suddenly his belly heaved. He vomited on the trail and collapsed to his knees, voiding the remaining contents of his stomach. When his head stopped spinning he ran a shaking hand across his mouth and looked up to find Gamble standing close, his mouth still dripping blood.\n\n\"I wanted him alive, damnit!\" Roy swore hoarsely. He did not discipline the beast, though. Gamble had acted to protect him and Roy knew the steelie could not understand what was happening. Weak in the knees and still shaking the teen rose to his feet and took Gamble's lead strap in hand. \"It's alright, boy. Come on. Let's get back to Tammy.\"\n\nThey found her sitting on the ground behind the dead tree with her face in her hands and Boudi nuzzling her gently. Roy scrambled over the trunk gracelessly and knelt beside her.\n\n\"Are you hit?\" he asked, fearing the worst. \"Tammy?\"\n\nShe cried wordlessly and started smacking him with her open hands.\n\n\"Tammy!\" he barked, thinking she must have mistaken him for a Dusig.\n\n\"What were you thinking!\" she screamed. \"What were you thinking?\"\n\n\"Tammy! Tammy, calm down!\"\n\n\"You could have been killed!\" With a strength that surprised him, Tammy wrapped her arms around Roy and dragged him to her. \"You could have been killed!\"\n\n\"I'm alright,\" he said more gently. She wept on his shoulder and took a nip of skin between her teeth, holding it firmly but not drawing blood. \"We did it, Tammy. I'm okay, baby.\"\n\nRoy soothed her and Boudi rubbed her muzzle on the girl's back, trying to comfort her. Finally, Tammy calmed herself and released Roy. She sat back, the fur on her cheeks wet with tears. She slapped Roy across the cheek one more time and then drew him into a fierce kiss. Confused urges ran through her. Fear and anger and excitement boiled and she knew not what to do with it all. She clutched her love desperately and kissed him again until Boudi intruded her big head and shoved Roy back.\n\n\"Boudi!\" protested the girl, but she latched onto the mare's head and kissed her on the muzzle affectionately. \"Oh Boudi. You good girl.\"\n\n\"Tammy,\" Roy panted, a flickering smile spreading on his lips. \"I think she's right. We need to get over to the ship.\"\n\n\"Ouch!\" Tammy barked and pulled away from her steelie, clutching her ear. \"Oh fuck! I'm bleeding! Roy, I'm bleeding!\"\n\nIn an instant Roy had his flashlight out and shining on her head.\n\n\"Move your hands, babe. Boudi, get out of here. I'm helping. Tammy, I can't see. Move your hands.\"\n\nFingers shaking, Tammy let Roy inspect her injury.\n\n\"It isn't bad,\" he said soothingly, getting his med-kit off his belt. \"It's just a notch in your ear.\"\n\n\"A notch?\" she gasped. \"A fucking notch?\"\n\n\"Would you stop!\" He pulled her fingers away. \"It isn't bad but there are a couple of small splinters still there. Hold still.\"\n\nWith care he removed the splinters and applied a coagulant to stop the bleeding. A spray of antiseptic combined with a numbing agent eased her pain. Finally he applied some gel to keep dirt out of the wound.\n\n\"There,\" he sighed. \"You're okay. All fixed.\"\n\n\"Does it look bad?\" she asked.\n\n\"No,\" he lied. Had the splinter been a couple of centimeters further to the right she would have lost her ear. \"About time you got a scar instead of me.\"",
        "She smacked him and scowled. After a moment they both began to laugh.\n\n*****\n\n\"Look what I did,\" whispered Yoshi. He stood over the Dusig soldier with the arrow in its neck. It didn't look Human. Bipedal with four limbs, its neck was way too long, its face too narrow. Yoshi blinked and felt a numb. The soldier still whimpered and clutched weakly at the protruding shaft. \"I killed him.\"\n\n\"Yoshi?\" Jean said softly.\n\n\"I killed him,\" the boy said again. He looked at his bow and then back down on the Dusig.\n\n\"You had to, Yoshi,\" she said, putting her hand gently on his shoulder. \"You were really brave.\"\n\nHe shook his head. \"I almost pissed myself.\"\n\n\"You were brave,\" she insisted and pulled him into her arms. \"Come on. Don't look at it.\"\n\nJean led him off a few paces and held him. Yoshi was shaking but he did not cry. He returned her hug and buried his face in her hair and they stood there in the firelight not thinking about what they had just been through.\n\n*****\n\nF`reet `du Hom picked up one of the Dusig weapons, a standard issue qui`istle*, checked it and slung it on her shoulder. She knelt and removed the weapons belt from the one she had killed and added that to her gear, slipping the knife back into its scabbard. Seeing the teens embracing she looked over at the wounded Dusig near the fire. The one the young male had shot was clearly dying so she went and gave his head a hard twist, breaking his neck. The one that had been shot by T` Emmi or Rddoy had taken a bullet through the gap where the breastplate and leg armor met. She dragged the dead one aside and examined the wounded one more closely. She did not know this Dusig by sight or scent. He had not been part of her crew.\n\n\"Must have come aboard with your matriarch,\" she guessed and knelt beside him.\n\nPicking up the medical kit dropped by his comrades she ran the scanner over him and found he was not critically injured, though the wound was severe. Sedatives had been administered and a clotting agent had been sprayed inexpertly on the hole in his belly. She opened the clasps fastening his armor and pulled the breastplate off none too gently.\n\n\"Could have been worse for you,\" she said. \"Let's bring you around. I have questions.\"\n\nWhen the Dusig awoke his blotchy brown skin became even more blotchy and he grimaced as if in great pain. He looked wildly around at his dead comrades and then at the jZav`Etch female standing over him. F`reet `du Hom smiled and her tail flicked as she aimed her appropriated rifle at his head.\n\n\"No!\" the Dusig cried in panic. He spoke in Meith `pth qHrr, the jZav`Etch military/diplomatic language. \"Mistress, no!\"\n\n\"How many of you are on this planet?\" she demanded, holding the rifle steady.\n\nHe shook his head and she shot him with a crowd dispersal round. It shocked him and where the tiny ferrous pellets struck his skin, they burned painfully. He shivered and forced himself to open his eyes. F`reet `du Hom waited a couple of beats and shot him again. The blast ran agony through his system and he flailed in the dirt. The Human adolescents stood and stared, mouths agape.\n\n\"How many?\" she demanded again. When he did not answer she fired. He screamed. She smiled. \"You killed my captain. You killed my friends. You killed jZav`Etch.\"\n\nHer finger stroked the trigger again and the Dusig howled. He squirmed in the dirt, spitting stinging pellets from his mouth. She fired again and then waited for him to calm.\n\n\"I could use a drug to get what I want from you,\" she lied. She had no idea how to formulate such a drug. \"But I'm enjoying this right now. You know, your people cut my captain's head off? Tell me what I want to know and I will stop this.\"\n\nPanting and unable to remain still the Dusig nodded. He said, \"Three hands of hands, mistress. And the pilots.\"\n\nThree hands of hands? One hundred eight soldiers plus six pilots for the shuttles. Why so large a force? That was more than what they would need to recapture her. And why even bother to try? They could simply have gone off to wherever they were planning to go. \n\nF`reet `du Hom gazed down the barrel of her weapon at the rebel on the ground. She was pleased to see the blood oozing from his many small wounds. The pain on his face pleased her more. Dusig, brave and resourceful, could be the most reliable of the subject races in the Hegemony, but when they rebelled, they became the worst of enemies. That was why they were not permitted to self-govern, as yet. They could not command their own forces. They were not permitted interstellar ships. They had no officers, only senior soldiers. And this one called her 'mistress' rather than pilot. That could be because she was not in uniform, but surely all these rebels would know she had been the pilot. The more probable explanation, then, was that they were not professional soldiers. \n\nThat tracked with what she had seen of their sloppy discipline. This group, separated from the main force, had not deployed any sensors. They had no proper battle armor. They did not know how to use their weapons. That had been obvious when they failed to hit anything. Where had the weapons come from? Her ship had not had a large armory so these had to have been brought aboard by the matriarch's crew. That implied they had foreseen the need of them. Was it possible they intended to take over this planet? Was that why she had come here instead of running for jZav`Etch space? She still could not recall clearly what had transpired after being hit in the head. She barely remembered being hit, actually.\n\n\"Mistress?\" panted the wounded Dusig.\n\nThe sound of heavy bodies pushing through undergrowth drew her attention to the path from the woods. T` Emmi and Rddoy appeared from the shadows of the forest astride their mounts and she was relieved to see her two young companions whole and alive, though their expressions looked haunted.\n\n\"Mistress?\" the Dusig said again, a little louder.\n\nAs she turned back to face him, F`reet `du Hom's thumb brushed the control on the side of her weapon and her next shot was a bolt of ferro-plastic that blew the creature's head clean off his shoulders in a flash of viridian light.\n\n*****\n\n\"Jesus Christ!\" swore Roy, witnessing the jZav`Etch pilot execute the wounded soldier.\n\n\"F`reet `du Hom!\" protested Tammy. She sprang from Boudi's back and ran to the pilot's side, staring down at the smoldering mess at her feet. \"Why?\"\n\n\"She was talking to him,\" Jean said in a small, frightened voice.\n\n\"She killed him?\" said Yoshi.\n\n\"He's pretty dead,\" Roy confirmed, coming up behind Tammy and staring at the headless body.\n\nF`reet `du Hom collected the other rifles from the dead soldiers and took their weapons belts while the teens tried to get their minds around what they had just done. She ejected magazines and took something from each of the long guns, tossing whatever it was into the campfire. Gradually the teens realized they were wasting time and like zombies they went to bring in the other steelies and the carry pack.\n\n\"How could she just execute him like that?\" Yoshi asked, sounding more like his old self.\n\n\"The Dusig cut her crewmate's head off,\" Roy told him woodenly. \"Maybe that was the guy that did it. Doesn't matter. She killed him. Can't do anything about it now.\"\n\n\"But still!\" said Yoshi.\n\n\"She's an alien, Yoshi,\" said Tammy. \"We can't expect her to act the same as we do.\"\n\n\"You don't act like that,\" he said.\n\n\"Tammy isn't an alien!\" Jean said a little defensively. \"She's my sister. She was raised here.\"\n\nYoshi dropped his gaze.\n\n\"Sorry,\" he said. \"I didn't mean it like that.\"\n\n\"It's alright,\" Tammy said, patting his arm. \"We need to get the transceiver and get out of here before they send more soldiers.\"\n\nWhen they got back to the ship they found the fire had nearly burned out and F`reet `du Hom was nowhere to be seen. Noises from inside her ship drew them there. Roy entered first, carrying the largest toolbox. He was glad to discover the headless body had been carefully covered with a tarp. \n\n\"Whew! That smell,\" Yoshi said, coming in behind him.\n\n\"Shut up,\" Roy hissed. \"That's her crewmate. Don't piss her off.\"\n\nF`reet `du Hom had removed the cockpit center seat and was working on fastenings under the control panel. She looked at them and smiled as if pleased they had returned. Beside her was a large, multi-tray box of strangely fashioned tools.\n\n\"I told you we wouldn't need these,\" grumbled Yoshi, shaking the box in his hand.\n\n\"We couldn't know that,\" Tammy said and pushed past him to get into the cockpit.\n\n\"Better to have a tool and not need it than to need a tool and not have it,\" Roy said, quoting a frontier maxim.\n\nIt did not take them long to remove the transceiver. Yoshi was right in beside the jZav`Etch pilot, watching everything she did. He even collected some of the cables she discarded in case they would be useful when they installed her transceiver at the tower. The device proved much smaller than anticipated. Similar to CP equipment of the same sort, it was compact and modular, made to be removed and replaced quickly rather than repaired in situ.\n\n\"Why do you think they haven't sent another ship with troops?\" Tammy asked Roy while Yoshi and Jean loaded the tools into the carry pack and F`reet `du Hom examined the transceiver using a piece of digital equipment from the jZav`Etch toolbox.\n\n\"Not sure,\" he said, checking Gamble's saddle cinch. \"Your dad must have done something pretty big. That explosion might have been him and the rest of our folks taking out their shuttles.\"\n\n\"We haven't heard any shooting since the start,\" she said.\n\n\"Too far for rifles to be heard,\" he pointed out. \"And the guns they use don't make much more noise. If the only big guns they had were on the shuttles, maybe all three shuttles were destroyed or at least damaged. Maybe they can't fly.\"\n\n\"What do you think our folks did?\" she asked.\n\n\"I don't know.\" Roy rubbed his chin. His beard was much thicker than it had been only a few short days ago. \"Honestly, I'm halfway tempted to just go back to the rock shelter. I think we really need to go ahead and finish this, though. Worst case is that we're wasting our time. Maybe we get the tower up and running and find out it's all over with. Then we have a long ride home.\"\n\n*****\n\n*ferro-plas - Ferrous Plastic - In this case it refers to the charged particle colloid shot from the jZav`Etch manufactured personal weapons.\n\n*qui`istle - jZav`Etch ferro-plas rifle.\n\n* B`hag`Geera's Thumb - The jZav`Etch cartography ship on which F`reet `du Hom served as pilot prior to the Dusig mutiny."
    ],
    "authorname": "RipperFish",
    "tags": [
        "adventure",
        "furry",
        "future",
        "sci-fi",
        "multi-chapter",
        "alien"
    ],
    "category": "Non-Erotic",
    "url": "https://www.literotica.com/s/a-world-for-the-taking-ch-05"
}
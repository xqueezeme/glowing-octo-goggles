{
    "title": "Two Hundred Dollars Ch. 09",
    "pages": [
        "162 Dollars\n\nTheir schedules having collided horribly on Tuesday, with Kent getting stuck in some sort of post-project analysis with his horrid group-mates for the afternoon and Bailey having her evening booked up by some massive Physics demonstration everyone in her class had to attend, they didn't have a real chance to get together until Wednesday evening.\n\nCarson, unfortunately, also came home and seemed intent on hanging around.\n\nThere are only so many times, Bailey reasoned, that I can go into Kent's room, close the door, crank up the stereo and not arouse suspicion.\n\nSo Bailey remained in her room, with the door open, hoping she would catch Carson leaving at some point.\n\nMaybe he'll go for groceries, take off for a walk. Any damn thing at this point would be fine.\n\nShe found herself twitching hopefully every time a door closed, or that stupid bouncy ball he used instead of a chair creaked. The guy went for snacks in the kitchen, got himself water, did everything except leave the apartment.\n\nBailey tried not to panic, did her best to calm herself and keep her breathing even. She had no reason to rush through the matter. Any day which didn't give her a chance to pay back some of her debt just meant she paid back extra the next day. Her butt, she had conclusively proven, could suffer at least $3 every day.\n\nShe forced her body to relax, every muscle in her back and shoulder all the way down to her calves and her curled up toes.\n\nEverything is fine.\n\nRelaxation would have come easier if she could have played some music to herself, one of those streams supposedly designed to help you calm down and study. But, wanting to demonstrate courtesy to her housemates, she'd have to either close the door or put her earbuds in.\n\nIf I do either of those, I might miss Carson leaving, she frowned to herself, and I can't risk that.\n\nThe bouncy ball squeaked down the hall in Carson's room as he stood up. The ball bumped up against something and she heard Carson opening a drawer.\n\nIs he leaving?\n\nA moment later, she caught him, out of the corner of her eye, walking down the hallway, towel in hand.\n\nShower? He's taking a shower? Bailey's heart thumped in her breast. Is that enough time?\n\nShe decided it would have to do.\n\n=============================\n\nKent had, likewise, spent a lot of time thinking about spanking Bailey for the past two days. Her offhand comment about a \"blank canvas\" had spurred a part of his brain into considering all the ways he'd spanked her and Laura over the past month.\n\nHe'd always looked at it from the perspective of their pain, discomfort and how embarrassing they found it to pose. If it seemed like one of them wanted more force used, in that sort of obviously ironic way they both had of complaining about him focusing on one part of their ass cheeks, he would continue to target one spot. When it began looking like he'd pushed them to their breaking point, Kent picked another spot.\n\nHe had also spent some of his energy trying to surprise the girls, so that the spanking, while not especially painful, might still shock them. As well, the idea of striking them in places that would cause later discomfort -- sitting down, obviously -- ranked high in his priorities. He wanted both Bailey and Laura to remember their spankings, to keep his actions, and their acquiescence, prominent in their minds.\n\nIn all that time, though, in all his horny rushes to get at their asses, he'd never really given a thought to how they looked afterwards.\n\nFor these reasons, when Carson locked the bathroom door and Bailey popped into his room a second later, breathlessly locking the door behind her, his heart did a skip, too.\n\n\"Hello,\" he said.\n\n\"A quick one?\" Bailey asked.\n\nHe nodded and she put a mark on the board. A moment later she'd undone her jeans and dropped them on the floor in front of his door.\n\nKent inhaled in surprise. No matter how many times he'd seen her transparent white panties, the site of it still shocked him.\n\n\"I don't want to still be in here when he's done,\" she jerked her head behind her, indicating their house mate, \"Too obvious.\"\n\nKent nodded in agreement, biting his lip, and Bailey walked past him to bend over his bed, putting first her elbows down on the bed sheets, then changing her mind and lowering her breasts all the way down to its surface.\n\n\"Nice,\" Kent complimented of her perched rear, seeing the thin band of her thong embed itself between her cheeks.\n\n\"What's nice?\" Bailey's voice quivered with what Kent took for sarcasm.\n\nThe best part about this position, with her hips up higher than any other part of her body, lay in the fact that he had full and easy access to any part of her cheeks.\n\n\"Oh,\" Kent replied as got out of his chair and approached her. \"I can still see the pink marks from Monday.\"\n\nHe drew a line with his fingernail, gently dragging it from the upper part of her right cheek, across her ass, to the lower part of her left.\n\n\"Still faintly there,\" he said. \"Can you feel it?\"\n\nBailey shrugged, \"Maybe a little.\"\n\n\"What about here?\" Kent scratched at the paler portion of her left cheek.\n\n\"A little less... sensitive, I guess.\"\n\n\"Mm,\" Kent thought carefully. \"Ready?\"\n\n\"Yes.\"\n\nHe made his decision then and slapped his palm down hard on the palest part of her left cheek.\n\n\"Ha!\" Bailey hissed out. \"One.\"\n\nKent struck the same spot again, watching her flesh go from pale white, to pink and then to red.\n\n\"Oh. Two.\"\n\nHe handed out a third spanking the same spot. The flesh there now stood out more red than the pink remnants of Monday's spankings.\n\n\"Three,\" Bailey said.\n\nWithout further warning, he struck at the untouched flesh of her right cheek, low where he hadn't touched it. Knowing he only had two spankings he could deliver there, he went even harder than he had for the left side.\n\nBailey moaned for a couple of seconds at this, and Kent wondered if he ought to take a bit off.\n\n\"That'll be red,\" Bailey whispered. After a deep inhalation, she added, \"Four.\"\n\nThere's a subtle hint, there, Kent realized. A line between encouragement and discouragement.\n\nAs it stood, the newly struck flesh of her right cheek matched the colour of the pink slash. He needed one more good strike to get it as red as the part of the left he'd just worked on.\n\n\"I can make it redder,\" he kept his voice halfway between offer and threat.\n\nBailey took a deep breath. \"Your dollar,\" she said, pushed her hips back toward him.\n\nKent knew he didn't have to hold back then, and slapped her right cheek with the same power he'd just used. The slap echoed in the room and Bailey bent her knees, wincing and groaning as her body twisted.\n\n\"Five,\" she said, adding almost instantly. \"How do I look?\"\n\n\"Pink,\" Kent smiled, touching the centre part of her cheeks. Moving to cup both cheeks with both hands, he added. \"And red. Quite a bit of red.\"\n\nBailey stood up, touching her hot flesh with her fingers, feeling for the new sore spots and comparing them to untouched, pinker areas.\n\n\"Nice,\" she said, with a touch of what Kent took for admiration.\n\n\"Just one today?\" he asked.\n\nBailey turned around and walked past him, punching him in the shoulder as she passed, \"Yeah, I'd rather Carson not, y'know, know about this.\"\n\n\"Right,\" Kent drawled in return, then raised an eyebrow as he watched her do the strangest thing.\n\nGiven the shape of the human body and all the possible arrangements its owner could put it in, what with all the joints and all their degrees of freedom, a girl could pick up her clothing off a floor and redress herself in any number of ways.\n\nIn Kent's mind, however, Bailey had made a decidedly decision, a choice which almost looked awkward.\n\nShe walked to her jeans, still in a pile of denim by the door, stepped past them, then turned around to face Kent. He had expected, if Bailey still felt like shining him on, that she would bend over in front of him while facing away.\n\nMaybe I've just spanked her so many times, Kent thought, that I'm used to seeing her that way.\n\nStill, the movement and pivot seemed awkward to his eye, an ungainly choreography. Bailey stepped into her jeans, then leaned over, facing him, her knees unbent, and slowly pulled them on. Looking down her loose sweater, he realized with a bit of shock that she wore nothing underneath -- neither shirt nor bra. From his viewing angle, he saw the cleavage of her little breasts, jiggling slightly as she worked the jeans on. As she twisted, one of those little mounds came fully into view, its dark red nipple clearly visible even in the room's dimmed lighting.\n\nAs Bailey stood up, she looked directly into his eyes, a gaze full of inquiry and concern.\n\nKent raised his eyebrows at her as she buttoned herself up, as if to ask her what she was asking.\n\nShe shrugged back, unlocked his door, and left the room.\n\nNo matter what's going on here, Kent thought as he sat back at his desk, whether it's her, or her together with Laura. No matter what. I always feel like I'm three steps behind and I have no fucking clue what's going on.\n\n=============================\n\nBailey closed her door behind her, safe and secure in the knowledge that Carson had heard nothing from under the spray of the shower's water. She disconnected her camera from the Internet, dropped her jeans and her panties so she could look at herself in the mirror. Forced to make do with artificial lighting, she worked the mirror as best she could.\n\nThe pictures, however, came out majestic and, furthermore, worth every bit of prodding she'd done to get Kent to deliver that last sharp slap.\n\nShe had a perfect red slash across her rear, a testament to the eighteen spankings she'd taken on Monday. This Kent had highlighted by turning the upper left and lower right parts of her ass into a bright, fresh red.\n\nBailey kept two pictures of that, stashing them away in a safe folder.\n\nNext, she went to her notebook, adding the very simple notation for her five spankings that day.\n\nShe sat in her chair, slouching down to grind the sensitive parts of her cheeks into the rough fabric of the seat, leaving herself perched on its edge.\n\nI don't need the pillow tonight, Bailey realized as she pushed her fingers between her lips. Now, about that look down the shirt I gave him...\n\nShe couldn't come to a conclusion as to what it had meant to Kent. She knew there was no way, given the low cut of her sweater and the amount of jostling and twisting she'd done, that he hadn't seen at least one of her breasts.\n\nBut did he care? Did he look? Did it matter? Was he excited?\n\nGrinding into herself with gusto, she realized she couldn't tell. Observing him caused him to know she observed him, which caused him to change his behaviour. If she could hide her phone in his room and make a video that captured his expression while he didn't realize it, then she could get his honest reaction. But she had no intention of making a spanking video which contained any identifying information.\n\nWhat I need is a friend to watch him while I flash my boobs at him, Bailey realized, making little circles around her clitoris.\n\nBut she couldn't ask Laura - couldn't ask her friend with larger breasts to help her get over her issues with her own smaller breasts.\n\nIt didn't impede her orgasm, but she spent the rest of the night wondering what Kent thought of her.\n\n=============================\n\nHer problem throughout Thursday lay in living with the consequences of having encouraged Kent in delivering those hard, low spankings. In the end, she just decided to sit down, whenever sitting became necessary, as quickly as she could and savour the sensation while trying her best not to let any of her classmates see her wince.\n\nThat said, she arrived back at the apartment Thursday evening to find herself still extremely aroused by the soreness of her cheeks. Kent sat furiously typing away at his PC, and Carson's room stood empty.\n\nBailey decided immediately that she didn't care where Carson had gone or for how long. His lengthy stay the previous evening had made her value these moments all the more. She ditched her backpack in her room and walked on to the kitchen. With a deep breath and a deeper determination, she snatched the wooden spoon from the drying rack and went immediately to Kent's room, still wearing her jacket and boots.\n\n\"Hey, Bailey,\" Kent said, a bit distracted. \"I, uh... whoa, really?\"\n\nShe'd interrupted him in mid-sentence by holding out the wooden spoon. Without a word, she made two tick marks on the board before handing the spoon to him.\n\n\"No more than half with the spoon, okay?\" she explained.\n\n\"Okay,\" Kent replied slowly, \"but why at all?\"\n\n\"What?\" she asked, unbuttoning her jeans and revealing a blue pair of panties.\n\n\"The deal is for spankings with my hand,\" he explained, watching her kick her boots aside. \"If the spoon hurts too much, why at all?\"\n\nBailey twisted her lips thoughtfully and then turned away to climb up on his bed. She had decided, this time, to show him something a bit different, and put her knees up on the bed before bending over, waiting for Kent on her hands and knees. It wasn't much different from what she'd done with Laura, except she didn't have Laura beneath her to straddle.\n\n\"Nice pose,\" Kent complimented her.\n\n\"Woof, woof,\" Bailey replied sarcastically.\n\n\"But you didn't answer the question.\"\n\nBailey turned away, facing the wall, jogging her head side to side in thought. Kent sat on the bed on her left side, lining up his right hand with her cheeks and began running his hands over the pink and red portions of her flesh, waiting patiently.\n\n\"I guess I want to see what you'll do with it,\" Bailey told him.\n\nKent inhaled sharply through his nose, and Bailey hoped she'd cleared the matter up for him.\n\n=============================\n\nKent surveyed Bailey's ass once she'd turned her back to him again. The way she'd bent her hips and knees had stretched out her panties and mostly tucked them out of the way between her cheeks, letting him see most everything a thong would have shown.\n\nHe could still see the pink slash across her rear from Monday, but it had mostly disappeared and existed only in contrast to reddish tinge on the upper left and lower right. Here she'd given him a chance to expand on his previous efforts, and offered him a tool.\n\nThe spoon, he knew from her previous reactions, hurt quite a bit more. But Bailey had, for reasons he couldn't completely understand, offered it anyway.\n\nBut where should I use it? And how? he wondered.\n\nEven though he found the stinging sensation in his own hand to bring a great deal of satisfaction, Kent also liked the effect the spoon had and the mark it made. Done properly, obviously, Bailey might allow its use again. He needed to tread carefully.\n\nHe examined her thoughtfully, touching here and there to gauge her reaction. Did she have something specific in mind? It didn't seem so, for she made vaguely appreciative noises wherever he touched her.\n\n\"Before Carson gets home?\" she admonished him after a while.\n\n\"Right.\"\n\nWith that little boost, he suddenly came up with an idea. He hoped she liked it.\n\nFirst step: freshen up the dark spots.\n\nHe delivered three hard spankings to the darkest parts of her left cheek, the upper most part, spreading the redness around so it wasn't the exact same spot, but still mostly confined to the upper left.\n\n\"One!\" she shouted. \"Christ! Two! Ah! Three!\"\n\nGasping for air, Bailey looked back at him with wide eyes.\n\nHe raised an eyebrow, waiting for some kind of comment.\n\nInstead, she sucked in her breath and turned away.\n\nQuietly, Kent drew the wooden spoon, lined it up with the very centre of the redness he'd just created, and let her have a stinging swat.\n\nShe sucked in air, hard, just like he remembered from the last time, and breathed out, \"Four.\"\n\nKent put the wooden spoon in his left hand, then laid it on the bed right next to her head so she could see it.\n\nHe then put his hand on her right cheek, on the lowest part, the part that he'd reddened the night before. Bailey, understanding his intention instantly, shivered as if a cold breeze had just run through her body.\n\n\"Uh-huh,\" she murmured.\n\nThree more spankings struck her right cheek in rapid successions, with Bailey moaning from beginning to end, holding back the counting until several deep breaths later.\n\n\"Five, six, seven,\" she said quietly through gritted teeth.\n\nHer head turned a little toward, her eyes clearly on the wooden spoon. She had to know, now, what Kent had planned.\n\nHe took the spoon, transferred it to his right hand, and gently patted it on lower right part of her cheeks. Bailey inhaled just as the spoon whistled through the air and struck her.\n\nShe sucked air again and said, \"Eight.\"\n\nKent stepped off the bed and took a look at what he'd done. The pale pink slash still existed, but the red areas had grown redder, and each now hosted a sharp, slightly darker red oval in its centre.\n\nNow to finish this off.\n\nHe sat beside Bailey again and lined the spoon up on the high part of her right cheek, the pale pink part of her flesh. The spoon whistled again and struck the fresh flesh.\n\nBailey's response came faster this time, a defiant, \"Nine!\"\n\nHe went low on the left with his last strike.\n\n\"Ten!\" she shouted triumphantly.\n\n\"Now you know,\" Kent said.\n\n\"Know?\"\n\n\"What I'd do with it.\"\n\nBailey nodded, \"Alright, I gotta see this.\"\n\nShe checked both ways in the hallway and ducked into the bathroom. Kent followed, carrying her jeans, and leaned against his doorway while he watched her. Bailey turned her back on the mirror and stood up on her tiptoes to look at her cheeks in the mirror.\n\n\"Crazy,\" she whispered, turning side to side. \"Oh, my pants?\"\n\n\"Mm-hm,\" Kent tossed them across the hallway to her and watched her pull them on.\n\n\"Later, Kent,\" she passed him by and went back to her bedroom.\n\n\"Later, Bailey,\" he replied as she closed her door.\n\n=============================\n\nBailey had a tight schedule Friday afternoon.\n\nHer last class ended at half past two which she knew would work out fine. It meant, if she moved her butt back to the apartment, she'd have plenty of time to grab the large carry-on she'd already prepared and catch the bus just four blocks from their apartment and then head home for weekend at four o'clock.\n\nAs the minutes on the clock ticked by, she tried to focus on the lecture but her thoughts kept straying.\n\nWhat if Laura comes by while I'm gone?\n\nFor this, another part of her mind chastised her, She promised and she won't do that. Trust her.\n\nBut as the second hand on the ancient wall clock swept around, minute after minute, the thought began to occupy and eventually conquer her brain.\n\nI can get back to the apartment fast enough, Bailey decided, I have an hour and a half.\n\nIf she could sate Kent's hunger, slake his thirst, might that suffice to keep him and Laura apart for three whole days? She'd return Monday morning, after all.\n\nThree days without a spanking, she exhaled through her teeth, How will I handle it? How will Kent?\n\nBailey made her decision. She needed to get to him one last time before she left for the weekend. If not, she'd worry about him the whole time of her absence.\n\n=============================\n\nKent, desperately seizing the opportunity presented by the oddly warm weather that late October afternoon, had chosen to go for a run. Running outdoor felt a lot better than using a treadmill while staring at a television his eyes could never track properly. Plus, if he ran in the gym, he always had to contend with a bunch of people around him.",
        "Don't you just hate people?\n\nAs he had nothing pressing on his time, this had seemed a safe bet. Bailey had, after all, said her bus would come in the afternoon, so he'd written her off until at least Monday. She had promised him, in her words, \"a shot at my butt before I leave\", an oath which he considered redeemed twice over in the days since.\n\nOn his sixth of seven laps around the park near their house, he began to feel the cold bite of October in his lungs. Uncharacteristic warmth was one thing, but it dissipated quickly the moment a cloud passed in front of the sun. Panting, he started his last circle around the park, knowing the amount of pain it would bring.\n\nSpanking Bailey is certainly one way to relieve stress, he thought placidly, but it's not the only thing I need.\n\nExhausting exercise also worked, and reduced his tension at least as well.\n\nBesides, I'm not going to look buff if I all I do for exercise is slap her ass and jerk off.\n\nThe seventh lap finished in record time and Kent slowed to a trot and then to a walk, huffing and puffing, wiping cold sweat out of his eyes.\n\nHe stumbled through the park, past the place where he and Bailey had ducked behind a few trees for a clandestine ass-swatting, and made his way home.\n\nHis heartbeat thumped in ears as he came down the stairs, remembering this time to lock the door, a habit he had a hard time setting into himself. After making his ungainly, exhausted way down the stairs, he shucked off his running shoes and grabbed his towel from his bedroom, profoundly in need of a very hot shower. Bleary eyed, he ducked into the bathroom and closed the door behind him.\n\n=============================\n\n\"Kent,\" Bailey called out, \"Is that you?\"\n\nShe'd lain on her bed for about fifteen minutes, trying to decide if she could really wait any longer or if she ought to just head out to the bus stop.\n\nThere's no point leaving this early, she told herself, you'll just be standing out in the cold.\n\nTrying to stay calm, desperate to see Kent one last time before she left, she'd heard the sound of the door opening and someone thumping gracelessly down the stairs.\n\nNo one answered her call.\n\nShe stood up and called again and, receiving no answer, started worrying in earnest. She'd left the door unlocked, a marginal violation of her own rules, given the time of day. But failing to get an answer from someone entering the apartment raised her level of concern.\n\nBailey rose from her bed and stuck her head around the corner, just in time to see Kent, listless and sweating in his tank top and running shorts, duck into the bathroom and close the door.\n\nSweaty from running. And it looks like he didn't even hear me. He needs a shower.\n\nShe walked down the hallway and stood between the bathroom door and his bedroom door. Her heart hammered in her chest. She knew how much time she had left. What if he took too long in the shower? She'd have to leave at some point and she might miss her chance.\n\nKent already had the water in the shower running, and she heard the telltale thump of his feet hitting the floor of the ceramic tub. The shower curtain whisked closed after it.\n\nFeeling her hands tremble with impatience and indecision, Bailey knew she had to do something. But what? Should she wait? Should she leave?\n\nWhat other option did she have?\n\nIt's not like I can just go in there...\n\nBailey blinked.\n\nWhat stopped her from going in there?\n\nWhat's in there that's a problem for me? He's seen pretty much all of me except my breasts? I've had my hand on his cock, even if it's through his clothing? It's not like he'd turn me down.\n\nResolution went through her like a shock wave. In one swift motion, she stepped into his room and made three marks on the whiteboard, slapping the marker down on its shelf.\n\nNext, she swiftly opened the bathroom door, just enough to let herself slip in.\n\nI can't believe he doesn't even lock the door when he showers.\n\nClosing it behind her, she listened, but it sounded like Kent had his head under the water. Running outside had probably left his head frozen, and he'd need some time to warm himself up. His clothes, piled on the floor, didn't even smell particularly sweaty.\n\nShe unbuttoned her jeans, folding them neatly on the counter with her panties still inside. Her socks came off next, which left her in a t-shirt. She hadn't worn a bra, having left it in her room with the expectation she could put in on after he came home and spanked her.\n\nBailey's hands went to the hem of her shirt and stopped.\n\nI still can't do it.\n\nStanding there, preparing to climb into the shower with Kent, she still couldn't bear herself that way to him.\n\nFuck it, then my shirt will get wet.\n\nShe waited until Kent stepped out of the water flow, which sprayed from the high spigot on the right wall of the large bathtub-slash-shower stall.\n\nSeeing his shape through the thin shower curtain, Bailey watched as he turned away to the left let the water spray over his back, leaving enough space between himself and the shower curtain for her to fit.\n\nPushing the shower curtain out of the way, she put one foot into the tub, saying, \"Hi, Kent.\" and turned to face the water spray, letting it course over her hair and shirt.\n\n\"Whoa! What?\" Kent almost fell over in shock as he twisted to face her.\n\nHow stupid would I feel, if he'd fallen and broken something!\n\nInstead, she just got the perfectly priceless reaction she'd wanted.\n\n\"I, uh, Bailey,\" he stammered, \"I, yeah, woah. Alright.\"\n\nIf the t-shirt bothered him, he didn't say so.\n\n\"I put 3 marks on the board,\" Bailey told him, bracing herself against the wall and sticking her cheeks out, crowding him into the back of the stall.\n\nShe specifically did not look at his penis, some part of her deciding she wasn't quite ready for that.\n\n\"Three?\" he asked, still managing to sound surprised despite everything else.\n\nBailey stuck her head up, letting the hot water wash over her face, before she turned aside to speak to him, \"Three days I'll be gone.\"\n\n\"Right,\" he said, and both of his hands grabbed her cheeks.\n\n\"Oh,\" she murmured. \"You want doubles?\"\n\n\"Maybe.\"\n\nBailey tried to remember what rule they'd made about that. He could spank her four times for each dollar, since she'd left her panties aside. And on one occasion, just to show Laura who the boss was around here, she'd told Kent to do the spankings two at a time.\n\nBut can he just do them like that whenever he wants? Hm.\n\nBailey couldn't decide but, having gotten wet already, wanted the whole thing to come out as a proper use of the hassle all this.\n\n\"Let's do one a time,\" she said, almost making it a question.\n\n\"I can only do the right side,\" Kent said, tapping the wall.\n\n\"It'll be fine,\" she said quickly, wiggling her hips, feeling the water run over her back, spraying off her shirt and dripping over and between her cheeks.\n\n\"Alright?\"\n\n\"Yeah.\"\n\nThe first slap landed the instant she spoke. Feeling it, she ducked her head down under her body as she felt water splatter off her cheek and listened to it splash all over the shower curtain.\n\n\"One,\" Bailey listened to her voice echo off the floor of the tub.\n\nThe bathtub didn't provide space for the artistry she'd encouraged of him the last two days. He had only enough room, if he swung his hand out into the shower curtain, to land his stinging blows to the side of her cheek.\n\n\"Two,\" she muttered, feeling the water droplets scatter off her cheek, watching as her hair hung around her face and dripped columns in the air before her eyes.\n\nThe water provided a curious effect, dampening the blow somewhat, like wearing a thin layer of clothing. But then the hot water fell on the reddened skin and made it sting afterwards.\n\nHis third strike landing, splashing her again.\n\n\"Three!\" she turned her hips to the right, letting him find another part of her cheek if he wanted.\n\nKent pushed her a little farther, turning her forty five degrees, almost into the shower curtain, and struck her square on the centre of her right cheek.\n\n\"Four,\" Bailey said and stood straight up, touching her sore cheek with her hand.\n\nWith a deep breath, she closed her eyes and turned quickly to face him, laying her head against his chest so he couldn't see the front of her body.\n\n\"Now you can do the other side,\" she said, just loud enough for him to hear.\n\n\"Right,\" he breathed in her ear.\n\nThey'd been closer together than this, when she'd curled up in bed with him, made him come in her hand. But now he stood naked before her, as she before him, and that made her body shake before he even reached around her to grab her left cheek.\n\nBailey shifted her body, letting him turn her, putting her head into the crook of his left shoulder.\n\nHe struck while her muscles were tense with the movement of her body, shocking her almost to he point of losing her footing.\n\n\"Five!\" she cried out, opening her eyes to keep her balance.\n\nOh my god, she thought, seeing the erection that pointed stiffly out toward her belly. She snapped her eyes shuts. That seemed larger than I'd thought.\n\nShe'd imagined how large he might be, based on what she'd felt in her hand that night, based on pictures she'd seen, based on all sorts of things. But seeing him, even in that tiny glimpse, surprised her even more than losing her balance.\n\nKent struck again, heedless of her shock.\n\nDoes he know I can see him? Does he think I'm staring at it?\n\n\"Six,\" she said out loud.\n\nMaybe I saw it wrong. Maybe it's not that big and...\n\nBailey opened her eyes again and looked down past his tense abdominal muscles to his manhood.\n\nNarrow and long. Not as long as I'd crazily imagined, but still pretty long. And stiff, pointing above the horizontal, toward my belly button.\n\nIf she hadn't stuck her ass out so far, he'd be jabbing her just below her belt with the swollen head right then.\n\nAnother swat splashed water off her cheek.\n\n\"Seven,\" she called out.\n\nHis erection twitched as she spoke, or maybe because she spoke.\n\nI can see, right now, exactly what I do to him.\n\n\"Come on,\" Bailey demanded, on a whim, \"Gimme another one.\"\n\nImpossibly, a twitch of his cock hardened him further, pulling his foreskin clear off the tip. His hand cracked down next.\n\n\"Eight,\" she whispered and then, afraid he hadn't heard, called it out louder, \"Eight!\"\n\nBailey turned on Kent again, backing into him so his erection pressed between his belly and her uplifted cheeks. She reached back with her right hand on the side of his face, then cupping the back of his neck, and pulled him close.\n\n\"I think I know what I need to be spanked with,\" she whispered in his ear.\n\nShe leaned over and, without looking, reached behind herself and grabbed his penis with her right hand.\n\nHow hard can you slap a penis anyway? she wondered, never having handled one this way in her life. It flexed in her hand, resisted her a little with its rigidity but still had a lot of play.\n\nI can't bend it down very far, though, Bailey realized and adjusted the angle of her hips to bring her cheeks higher.\n\nYou know what you're doing, right? a voice in her head asked. You know what's going to happen?\n\nKent's left hand rested on her back, his right on her hip.\n\nWith all the strength she could muster at this awkward angle, she slapped the head of his cock down hard on her right cheek. It didn't hurt her in the least, but Kent groaned.\n\n\"Ni-ine,\" she called out to him.\n\nShe bounced him off her cheek again.\n\n\"Te-en,\" Bailey sang out.\n\nTurning her body to the side and out of the shower head's spray, she slapped his cock down on her left cheek.\n\n\"Eleven,\" her voice rose up at the end as she squeezed him hard. \"And -\"\n\nKent grunted and she felt the first pulse of his orgasm. She immediately slapped him down hard on her left cheek and felt -- actually felt -- the first spurt of semen. It landed heavy and wet over her cheek and up her back over the thin, wet fabric of her shirt.\n\nStill gripping him, squeezing him, she turned and saw the second line of white fluid launch from his twitching member. Her sudden twist meant that it shot across both her cheeks, left to right, and slapped against the shower curtain.\n\nShocked, Bailey turned away, still squeezing him to the end, feeling every last twitch.\n\nHis right hand, free of her hip, gripped her cheek.\n\nHis penis empty, she released it, and spread her legs a little to encourage him to slide his hand up between them from behind.\n\nOh, god, touch me.\n\nWhen his hand reached the right place, she placed hers over top of it, pushing his fingers into her wet lips, pushing harder on his middle finger so it went between those lips and found her clit.\n\nKent tried to wiggle, tried to make circles, but she knew her own needs and didn't let him, instead showing him how to push downward, toward her vagina.\n\nThat's all he needs to know. Just push. And release. And push.\n\nShe pictured herself, bent over in front of him, streaks of semen across the back of her wet t-shirt and naked cheeks, his hand jammed up between her thighs as she humped away at it.\n\nAhhhh!\n\nShe moaned out loud as her orgasm struck her, her thighs clenching on his wrist and her knees threatening to drop her to the floor of the tub. Bailey felt her muscles twitching, and pushed his fingers down, until the tip of the middle finger touched her pulsing entrance.\n\nThere's semen all over me and I'm coming on his hand. What am I doing?\n\nHer confused feeling didn't stymie her orgasm. It went on until it faded into a faint shuddering and she tried to regain her composure.\n\nBailey's hands still shook when she turned around and put her head to his shoulder, unwilling to meet his eyes. The spray of water washed down her back, rinsing away the semen streaked all over her back. She imagined it washing past her, dripping down her thighs. Maybe she could feel it, separate from the water. She supposed she could.\n\nThe heat took care of the shivering.\n\n\"I -- I have to go,\" she spoke into his chest. \"My bus. I have to.\"\n\n\"Right,\" Kent's voice sounded shaky, too.\n\nShe slipped out of the shower a moment later.\n\n\"My towel,\" she cried out in a panic, \"I forgot -\"\n\n\"Easy, Bailey,\" Kent's voice calmed her in a moment \"Just use mine and toss a dry one in before you go.\"\n\n\"Ri-ight,\" she stammered, turning away from the shower curtain and savagely yanking off her top so she could towel herself off.\n\nShe dried her hair as quickly as she could, feeling the goosebumps all over her body as water evaporated from everywhere else. She wiped her body down well enough she wouldn't drip all over the hallway and then wrapped the towel around herself. It wasn't right length and it smelled like Kent, but it draped far enough to maintain her modesty. She opened the door and turned back to look through the curtain.\n\n\"I -- I really have to go,\" she said, feeling the flatness in her voice, the shadow of some inexplicable embarrassment draining her emotions.\n\n=============================\n\nKent mechanically scrubbed and rinsed his body, removing sweat and semen and the smell of Bailey from his body.\n\nWhat the hell had that been?\n\nHe'd never completely understood what Bailey got out of the deal until today.\n\nShe's attracted to me. I didn't know that. So what does this mean? She puts up with the spankings to get closer to me? That seems like a lot of pain and embarrassment for something like that. Couldn't she find an easier way?\n\nThe money, he knew, might also matter. She did need to pay off her debt.\n\nKent shook his head and he heard the door open.\n\n\"Here's my towel,\" Bailey called out. \"I -- uh -- have a good weekend, eh?\"\n\n\"Yeah, you too,\" he called back.\n\nWhen he dried himself off, several minutes later, he noted how strongly the towel carried her scent.\n\nWithout thinking, he hung it up on a towel hook in his room to dry, and by the next day it had suffused the whole room with that same scent."
    ],
    "authorname": "xtorch",
    "tags": [
        "spank",
        "spanking",
        "payment",
        "orgasm",
        "panties",
        "ejaculation",
        "masturbation",
        "come",
        "spoon",
        "decoration"
    ],
    "category": "Fetish",
    "url": "https://www.literotica.com/s/two-hundred-dollars-ch-09"
}
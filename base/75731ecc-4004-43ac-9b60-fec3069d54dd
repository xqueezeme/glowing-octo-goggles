{
    "title": "Kelly and Gwen",
    "pages": [
        "Gwen always liked attending the holiday parties given by her husband's company, and this one was no exception. Everyone was in high spirits, celebrating their recent victories in the corporate battlefields. Her husband, Steve, was telling a few co-workers how he'd handled a recent negotiation. His boss, Kelly, was making her way around the room, laughing and tossing back her auburn hair as she passed out bonus checks, which made the participants even happier. Everything was perfect, except Gwen had an urgent need to use the restroom.\n\nAfter she'd finished handling the need, and was washing her hands, Kelly strolled into the restroom. Gwen was about to tell her what a great party this was, when Kelly pulled a bold move. She stepped very close to Gwen, so close that as Gwen swiveled her head to see why, she could feel her strawberry blonde hair brush against Kelly's face.\n\nKelly looked into her eyes, saying, \"I'm sending Steve to Phoenix all next week. My house, Monday evening at 6, be there. Don't wear a bra or panties. Got it?\"\n\nStunned and practically immobilized by Kelly's hypnotic gaze, all Gwen could do was nod meekly and mumble, \"Yes, Kelly.\"\n\nKelly gave Gwen's boob a good squeeze and kissed her quickly but forcefully on the lips. \"See you then...\" she stated, and strolled back out of the restroom, smiling.\n\nGwen stood there in partial shock, water still running on her hands. \"What the fuck just happened?\" she said, sub-vocally. She washed her hands for a longer time than usual, trying to analyze that shocking interaction. Since the restroom was otherwise unoccupied, she whispered her thoughts, hoping that hearing them would clarify them somehow. \"Was she joking? She couldn't have really meant that!\" Gwen hemmed and hawed, recapturing Kelly's tone of voice and body language. \"She sounded deadly serious,\" she decided, the moistness in her armpits now signaling her growing nervousness. \"And that kiss was not just a friendly peck.\"\n\nShe dried her hands on a towel, and heard some people approaching the door. In an instant, Gwen decided she wasn't ready to walk back out to the party, so she hurried into one of the toilet stalls, closing and securing its door. There was a burst of words as two other women came in and chatted constantly as they used the facilities, and primped, repairing their makeup, and fixing their hair.\n\nGwen was still deep in thought. Now her analysis and discussion had to take place purely mentally. \"She sounded so dominant... so matter-of-fact... like taking it for granted I'd obey. I have to admit... I'm scared. Would she do something to hurt Steve's career if I refuse? She didn't actually say that -- but was it implied?\" She shuddered. She pictured Kelly as she left. \"She was smiling. If it was a threat wouldn't her expression have been more stern?\"\n\nThen Gwen's mind did the equivalent of a U-turn. \"Maybe she was implying she'd help Steve's career if I do this, whatever 'this' is. Maybe give him a promotion? Goodness knows we could use the extra money. Maybe by sending him on these trips he'll earn bonus money, too?\" Pleasantly daydreaming, Gwen let her mind dwell a little while on the thought of a possible increased income, and the various things they could do with it.\n\nGiving herself a shake, she turned back to Kelly's instructions. She'd said 'don't wear a bra or panties' -- it was difficult to interpret that as anything other than an implied sexual encounter. It wasn't as if she'd never had sex with women. Before she was married, she'd sampled many different forms of sexuality, the memories of which still fueled her masturbation fantasies when she was feeling extra horny and Steve wasn't available. But all that sampling with others had ceased when she'd gotten married to him.\n\nTherefore, the lure of a possible liaison with Kelly was a little like dangling the forbidden fruit in front of Eve. Physically, Kelly was gorgeous with a wonderful figure. At parties like this, she wore thin, silken, clinging outfits that displayed her curves -- breasts, trim waist, and sexy hips and butt. If the room was cool, Kelly's nipples poked the thin material forward, amply verifying that she wore no bra. Her skirts were always short, putting her long, delightful legs on display all the way down to her dainty feet. Gwen's heart fluttered in her chest, imagining that body without clothing. Her breathing deepened, making her own well-proportioned breasts rise and fall.\n\nBut a feeling like a cold shower washed over her, making her shiver briefly. \"But since we've been married, I've never been unfaithful to Steve. Doing this could damage our marriage... maybe irreparably,\" she thought. Then she began to rationalize, as anyone facing the temptation of forbidden fruit might. \"I'd never want to be unfaithful to Steve, of course. But, if it's with another woman, would that really be being unfaithful? Maybe he'd get all excited by the idea? Maybe I should ask him, and find out?\" She mentally smacked herself. \"If I tell him what Kelly wants, and he doesn't like the idea, he might create a scene at the office, and end up fired! I can't risk that!\"\n\nBy now, Gwen had talked herself into doing what Kelly commanded, almost managing to feel like she was making a 'noble sacrifice' in so doing, and she finally rejoined the party. However, she studiously avoided making eye contact with Kelly, afraid that her cheeks would blaze crimson if she did. Later, she had to pretend surprise when her husband mentioned on the way home after the party that he had to go out of town on a business trip on Sunday afternoon. \"Where are you going, and for how long, honey?\" she asked.\n\n\"I'm afraid I'll be in Phoenix all next week, darling. But I'll try to call you every evening, so you don't get too lonely.\"\n\n\"That's sweet of you to think of me, honey. I know those long business days can be very tiring. If you need your rest, I'll understand,\" she promised him.\n\nThe weekend seemed to last an eternity for Gwen, waiting for Monday evening to arrive, and both dreading it, and looking forward to it. Her stomach kept doing flip-flops whenever she thought of Kelly commanding 'don't wear a bra or panties' like she did. Both eating and sleeping were difficult, and she found herself staring at the clock often, willing its hands to move faster. The anticipation of the unknown was awful!\n\nSteve flew out late Sunday afternoon, to be at the work meetings scheduled for early Monday morning. Gwen still had about 24 hours to wait for her 'appointment' with Kelly. She decided that she'd better try to look her best, since she had a feeling Kelly would be making her get naked, sooner or later. Hair removal came first. Shaving her underarms and legs until they were silky smooth, she took a closer look at her pubic hairs. \"Hmmm... I don't think I want that area bald,\" she murmured. \"I'll just spruce it up a little.\" After that was accomplished she took a shower and applied moisturizer to the shaved areas.\n\nAs she was looking in the mirror, plucking a stray eyebrow or two, she noticed something. \"Hairs? On my nipples? Why have I never noticed!\" she practically shrieked. True, there were only two on one areola, and one on the other... but still. She winced as she tugged them out, and softy rubbed the abused areas. Finally, she trimmed her nails, and applied nail polish, which made her sit and watch television without moving much until it was bedtime.\n\nHer nervousness didn't dissipate in the morning. As the time flowed along like molasses flowing in the depths of winter, Gwen lost track of the number of times she stared at the clock, amazed that its hands had barely moved. She began to fear that, upon arriving at Kelly's house, she might turn and flee. A coward running away with her tail tucked between her legs. She tried quelling her fears by looking at her wardrobe. She figured a less clingy blouse might help disguise her lack of a bra. And a skirt that fell to below her knees might be less sexy than most of her dresses, but it would give her less of a feeling of being naked below her waist, without the snug reassurance of panties. By the time she'd chosen, her bed was piled with the rejects. Straightening out those clothes and hanging them back up at least let her pass more time.\n\nTaking her cell phone, Gwen got into her car and started driving towards Kelly's house. She was giving herself plenty of time, mainly because she couldn't sit around in her own home waiting any longer. She didn't want to get to Kelly's house late, nor did she want to arrive too early. Therefore, she got nearby and then parked her car, looking through apps on her cell phone while she waited.\n\nAbout three minutes before 6 PM, she started the car, drove a couple of blocks, and pulled into Kelly's driveway. As she got out and locked her car, she saw Kelly opening her front door and beckoning her inside. \"Come on in, and welcome,\" Kelly said, closing the front door once they were inside and leading Gwen into the living room. \"You're very punctual. I like that. Now let me see if you followed my instructions. Do you want to take your clothes off, or would you rather I do it?\"\n\nGwen gulped audibly, and her racing heart try to leap up into her throat, obviously chased there by the horde of butterflies that began flapping inside her stomach. \"Oh my god,\" she thought. \"She's getting right down to it without a moment's hesitation!\" She hoped those living room curtains weren't very see-through. Out loud, she stuttered, \"I... I... I... I'll do it.\" Her fingers felt like they belonged to someone else -- someone very inept at dealing with buttons -- as she started trying to undo the buttons of her blouse. Each button seem to be too large to fit through the buttonhole, but slowly she manage to undo them, one by one. Blushing pink, she pulled the blouse free from her shoulders and down off each arm, rendering herself topless.\n\nGwen stood there, motionless since she was forcefully willing her arms to stay by her side rather than leaping up to shield her breasts from Kelly's sight. Kelly was nodding and grinning as she stated, \"So far so good. Now do the rest, Gwen.\"\n\nAt this point, Gwen had to let her arms begin moving again because it was taking all of her willpower to stop her legs from racing her body back to Kelly's front door, out it, and into her car to zoom home. Meanwhile, reacting to Kelly's hypnotic gaze, Gwen's hands undid her skirt and let it drop. She was able to shield a look at the front of her body by bending over to step out of and pick up her skirt. But she knew as she straightened up she had to set the skirt aside. Her blush had deepened to a scarlet color as she stood naked with Kelly gazing at her. \"Excellent,\" her husband's boss said. \"You obeyed me perfectly. Now it's your turn.\"\n\nGwen's eyes bulged slightly as she meekly said, \"Excuse me?\"\n\n\"Now it's your turn to tell me to strip,\" Kelly explained. \"But not with that tone of voice, please. You need to convincingly command me to do it.\"\n\n\"Command you to do it...\" Gwen paraphrased aloud. Now she was truly confused. \"Why would she tell me to command her?\" she wondered silently. \"She demands that I show up here braless and pantyless... has me take off my clothes... and instead of ravishing me, as I expected, she wants me to tell her to do things? Huh? Am I supposed to tell her to get naked as some kinky prelude to her using me?\"\n\nKelly saw the perplexed expression on Gwen's face and thought it adorable. This was one of the marvelous things about having a new person over. Seeing their confusion, and then seeing how their expression changes when comprehension finally dawns on them. \"I'll explain soon, Gwen, but first you have to get me naked, too. And don't be timid about it -- order me, in no uncertain terms!\"\n\nShocked into action by Kelly's statement, Gwen blurted out, \"Get those clothes off -- NOW -- Kelly! I want to see you buck naked faster than I can blink!\" Mentally horrified by what she'd just told her husband's boss to do, Gwen almost brought her hands to her mouth in censorship. But before she could make such a move, Kelly's hands went into a blur of motion, practically ripping the clothes off her body. In seconds, she was nude, and not only that... she'd dropped to her knees in front of Gwen, her head bowed, asking humbly, \"Was that fast enough, Miss?\"\n\nGawking, Gwen choked out, \"Miss? Why are you calling me Miss?\" At this point, she lost her cool, almost shouting, \"What the hell is going on, Kelly?\"\n\n\"I'm happy to explain now, Miss -- now that you've asked me a question.\" She glanced toward a padded, comfortable easy chair. \"Perhaps you'd like to sit there while I explain?\" She pointed.\n\nStill flabbergasted, Gwen took two steps backward and sat. Kelly stayed down, walking forward on her knees until she ended up kneeling before Gwen's feet.\n\n\"I have a high profile job, Miss, which requires me to constantly make split-second decisions, issue orders, worry about the budget, and please the Board of Directors. It's long workdays of high stress. Early on, I learned that if I didn't find some way to dissipate that stress I'd become physically ill, and mentally numbed. I stumbled upon the idea of submitting to someone, at least for brief periods of time. During my submission to them, I could cease worrying about the stresses of my job, and instead live in the moment.\" She looked up, trying to judge if Gwen was understanding this.\n\n\"But given my position, Miss, I couldn't submit to just anyone. Word might get out and that could ruin my reputation, and be an impediment to negotiations, and career advancement. And so, perhaps evilly, I hit upon this idea of providing insurance against people disclosing my, shall we say, predilections. I felt I could safely submit to the wife of one of my employees, since her husband's career would then be tied to the wife's silence. I don't have to do this too often -- just when the stresses reach a peak, and that happened recently.\"\n\nSeeing that Gwen was listening intently, Kelly continued, speaking gently now. \"I'm bisexual, and I've always found you attractive, Miss. And the fact that Steve really needed to be sent to Phoenix for work this week seemed to be a perfect opportunity for me to submit to you.\"\n\nStill skeptical, Gwen said, \"You're kidding me... this is a prank... you're playing a joke on me, right?\"\n\nEyes cast downward, Kelly whispered, \"No Miss, I'm being very honest about this.\"\n\n\"And what do you mean by saying you're submitting to me?\" Gwen asked, suspiciously.\n\n\"It means that you command me, and I'll obey, Miss. Please don't worry... indulge your whims. If anything is too much for me, I will use my safeword, which is the word 'RED' said once or even several times. If I say that, you must stop what you're doing and check in with me, please.\"\n\nGwen crossed her arms, staring down at the kneeling woman. \"So I'm in charge?\"\n\n\"Yes, Miss.\"\n\n\"Then I don't have to be naked, do I?\"\n\n\"Certainly not, Miss. That was just a test to see if you had the proper caution about things to verify you'd be likely to keep my secret,\" Kelly explained.\n\n\"And if I had not arrived, on time, lacking bra and panties? What then?\" Gwen asked, as she put her blouse and skirt back on.\n\n\"Then the next time I communicated with you, I would have told you that of course I was only joking, Miss,\" she replied, wearing a mischievous grin. \"May I serve you some dinner, Miss? We can eat while I answer your questions more fully.\"\n\nIt was an interesting sight at the dining table. Gwen, sitting there dressed, being waited upon by a lovely naked woman who happened to be her husband's boss. It seemed a bit surreal, but the food was good, and the discussion was convincing Gwen that Kelly was being open and sincere. As they finished, and Kelly cleared the table, Gwen asked, \"You keep calling me Miss.. what should I call you?\"\n\n\"Calling me Kelly is OK, but you can use words like girl, pet, bitch, slut, whore, cunt... please realize that you are free to humiliate me... it's part of filling my needs, Miss.\"\n\nHearing the word 'humiliation' gave Gwen an idea of how to test this concept of submission. \"Go stand on your head against the wall over there, Kelly,\" she commanded, pointing to an open area of wall space.\n\nWithout protest, Kelly hurried to the area indicated, and placed the top of her head against the floor. Using her hands and arms as braces, she kicked her body into an inverted position, with her back and butt thudding against the wall, making her fall back to the floor. Deciding that her head had been too close to the wall, she scooted back a little and tried again, with similar results. It took her several awkward attempts until, wobbling slightly, she was doing a headstand, with her body propped against the wall.\n\nGwen was giggling as she watched the high and mighty Kelly attempting to obey. She walked closer, seeing Kelly's face reddening with embarrassment and the excess blood pooling in her head. \"You don't look very stable, girl,\" she commented. She put her hand to her chin as if thinking, then said, \"I know what might help. Do the splits, bitch.\"\n\nKelly gasped, and a little mortified, started sliding her heels along the wall, widening the gap between her legs. Of course, this salaciously exposed both her pussy and ass hole, as her moist pussy lips were pulled sideways by the stretched thighs. Every thing was fully visible, because Kelly was clean shaven down there -- not a hair could be seen anywhere in that area. This humiliating pose must've been something that fit Kelly's cravings. More fluids welled up and leaked from her honey pot, some drops landing on her face. Gwen thought it might be interesting to bury her face in Kelly's crotch, and suck at her sexy juices, but she wasn't sure if it was really permissible to take things that far.\n\nShe stepped back, telling Kelly, \"OK, you can get down off the wall and back onto your knees.\" Kelly obeyed, first working her legs back to the center, and then pushing off. She landed on the floor with a heavy 'thud' sound. \"Not very graceful, I see,\" Gwen chortled, secretly hoping that Kelly hadn't injured herself. It did take a few minutes for Kelly's dizziness to pass, now that she was kneeling upright.\n\nWhen she'd recovered sufficiently, she humbly asked, \"May I please show you something, Miss?\"\n\nGwen was starting to get more comfortable in her role. \"Yes girl -- show me.\"\n\nKelly picked up a key and led her to a locked room. When its door was unlocked, it was revealed to be a playroom with items like handcuffs, dildos, ropes, a paddle, a riding crop, etc.\n\nGawking anew, Gwen walked around the room, her mind reeling slightly as she examined the items. During this time, Kelly knelt silently, letting Gwen drink it all in. \"I'd never in my wildest dreams imagined that Kelly had a room like this -- things like this,\" Gwen thought. \"So she wants me to humiliate her... where to start? Where to start?\" Spotting something, she decided that starting simply might be best.\n\nShe sat down on a low stool. \"Come here, bitch, and get across my lap, face down,\" she commanded imperiously, beckoning Kelly. Hearing that tone of voice, Kelly shivered as she hurried to do Gwen's bidding. She shivered even more as she got into position, her naked buttocks quivering atop Gwen's lap. Gwen smiled as she looked down on the vulnerable flesh being presented. She wondered if, after receiving the first hard swat, Kelly would scramble off her lap and tell her this was a big mistake, and that she should go home. \"Only one way to find out,\" she murmured barely audibly.\n\nShe raised her hand and then brought it down fast and hard, her open palm making a cracking sound as it make contact with Kelly's butt. Kelly jerked, her torso arcing upward as she uttered an undignified squeal. But she immediately lowered her torso again, submissively remaining over Gwen's lap. Gwen took a moment to admire the reddened hand print that had formed on Kelly's alabaster buttocks. But only a moment. She proceeded to give Kelly a thorough spanking, a small payback for the anxiety Gwen had suffered over the weekend. The auburn-haired woman squirmed and shrieked and moaned, but she never cried out her safeword.",
        "Kelly's ass cheeks were a bright red when Gwen noticed wetness -- wetness on her hand, and wetness on her lap! She angled her head to look between Kelly's slightly spread thighs. The wetness was seeping out between Kelly's now puffy, engorged pussy lips! Shocked, she grabbed Kelly's hair and made her make eye contact. \"Oh my god, you slut! This is turning you on?\"\n\nKelly moaned and squirmed, clearly embarrassed, but she answered, \"Yes, Miss.\" She was almost humping Gwen's lap as she moaned, \"You made me stand on my head, naked. That was inspired, Miss. And then having me do the splits, exposing my crotch. And now this spanking... It's almost as if you're reading my mind, giving me exactly what I need. Your instincts for this are amazing, Miss.\"\n\nBlushing a little pink at being told she had the instincts of a dominatrix, Gwen pushed Kelly off her lap. \"Since you're so turned on, you horny little bitch, sit there on the floor and play with yourself while I watch.\" Gwen figured that the barrier against sexuality had been breached when Kelly admitted her arousal, so she was curious about what this woman would do when given such a command.\n\nIt wasn't anything too novel. Kelly sat with her legs spread wantonly apart and began teasing and fingering her pussy with one hand, while her other hand was pinching and tugging at her tits. Really getting into it, she began moaning loudly. It was at that point when Gwen's cell phone rang. She looked at the display. It was Steve. Following an impish impulse, she answered the call. \"Hello, darling. So lovely to hear from you. How was the flight? How is Phoenix? What? The noise? Oh yes... wait... let me turn down the TV.\"\n\nShe handed a gag to Kelly. \"Here, put this on, and keep going,\" she whispered. Kelly quickly gagged herself, and then continued her lewd actions. Now there were only very muffled groans as she continued masturbating.\n\nGwen went back to her phone. \"What program? Oh nothing important... just some trash to pass the time. So how is Phoenix?\" She watched Kelly as she and her husband chit-chatted about their respective days. She was having a little trouble keeping her focus on the thread of the conversation, given the sight of this beautifully endowed, sexy woman pleasuring herself.\n\nFinally, Steve needed to go to eat. Gwen signed off with, \"Thanks for calling, darling. Have a nice dinner, and a good night's sleep. I love you. *kiss*\" and she hung up. Turning her full attention on Kelly, she asked, \"Did you cum?\" Kelly nodded wearily, face flushed. \"Darn, I missed it!\" She removed the gag. \"Cum again, and I want to see and hear you climax, slut,\" she ordered.\n\nRe-energized, Kelly started finger-fucking her pussy with three fingers, and used her other hand to tease and rub her clit. Shamelessly, she moaned and writhed, her lovely tits bouncing and swaying. The room became redolent with the unique scent of Kelly's arousal fluids, which were being pumped out of her vaginal tunnel by her plunging fingers. Gwen sat, transfixed at this wanton display, inhaling Kelly's aroma and hearing the squishy sounds caused by her finger action, audible even over the slut's moans, groans, and vocalizations. It was obvious she couldn't hold out much longer.\n\nWith a cry of release, Kelly jammed her fingers hard and deep into her cunt, while her hips bucked as if trying to swallow not only those fingers, but also her entire hand! Her head was tilted back, her upper body quivering in such a way that her shoulders shimmied, making her tits dance erotically. Her whole body was now covered in a glistening sheen of sweat as her tissues tried to dump the excess heat created by her violent muscle contractions.\n\nAs her orgasm ebbed, Kelly brought her cum-coated hand to her mouth and started sucking and licking it clean. Her eyes were closed when she started, but part way through this process she opened them and found herself staring into Gwen's eyes. The licking woman blushed a shade nearly crimson, but she kept cleaning her hand. Her thighs were still wide apart, and her pussy hole was gaping open and still oozing its juices. Gwen's eyes scanned up and down continually, from Kelly's eyes to her pussy and back, drinking in this lewd display.\n\nIt became apparent that Kelly was now waiting for another command. Gwen was inspired. She said, \"Crawl over here and kiss my foot to thank me for letting you cum like that, slut.\"\n\nKelly humbly crawled until she was at Gwen's feet. Carefully, almost reverently, she selected a foot, unbuckled its shoe, and slipped it off. Setting the shoe aside, she lifted the now unshod foot in both hands. Gwen was expecting a perfunctory kiss. Kelly had other ideas. She brought her pursed lips into firm contact with the top of Gwen's foot in a prolonged kiss. She then proceeded to kiss as much of its surface as she could, lifting and turning the foot with her hands. Gwen was enjoying the sensations of this weird 'worshiping' of her foot, when the sensations changed. Kelly was now licking the surface of that foot with dainty kitten-like licks. She bathed the top, instep, and sole of the foot with her tongue. This was so delightful that Gwen needed tight control not to moan. But she had to gasp when Kelly started sucking her toes! It felt like electric shocks ran from her toes right to her pussy and clit! She was disappointed when Kelly lowered her tingling foot to the floor.\n\nRecovering her composure as Kelly slipped her shoe back on and buckled it, Gwen glanced at her watch. \"I see that it's getting late. Do we need to do anything else before I go?\" She was asking because she'd come here at Kelly's summons in the first place, so she wasn't sure if that agenda had reached its conclusion.\n\nSure enough, Kelly replied with, \"I have two requests, Miss, if they please you.\"\n\n\"What are they, pet?\"\n\n\"First this, Miss.\" Kelly got up to retrieve an object from the displayed toys. She handed the object to Gwen, saying, \"Please hit me with this, Miss.\"\n\nGwen looked at what she'd been given. The rod in her hands terminated in perhaps a dozen long strands. Incredulous, she looked at Kelly. \"You really want me to hit you with this flaily thing?\"\n\n\"It's called a flogger, Miss. And yes, please. I need it.\"\n\nNever having done anything like this before, Gwen had to ask, \"Where?\"\n\n\"My butt and tits, please, Miss,\" her husband's boss answered. She turned away and bent down, bracing her hands on her knees, offering the first target mentioned.\n\nA little nervous, Gwen moved her arm to make the strands slap against the bare flesh. \"A hit like that?\"\n\n\"That was nice, Miss. But please hit harder! Make me feel it!\"\n\nGwen proceeded to swing the flogger with gradually increasing force. She was surprised at the amount of force she had to use before Kelly jerked at the impact, hissing, \"Yes... yes... 6 more like that please, Miss.\" Glad that an end to this strange behavior was in sight, Gwen gave her the requisite six blows. She'd forgotten about Kelly's tits, but Kelly hadn't. Turning, she presented her bare breasts to Gwen and begged for 4 such strokes across her tits. Gwen was a little reluctant, but Kelly seemed to know what she wanted and needed, and was definitely more knowledgeable in these things. Therefore, she flicked the flogger's strands with a similar force across Kelly's breasts while the auburn-haired woman jerked and groaned with a mixture of pain, pleasure, and humiliation.\n\nGwen set down the flogger and stated, \"You said two things, slut... what's the second?\"\n\nKelly came to where Gwen was standing, knelt down and embraced her knees, placing her head against her hip. \"Please Miss... spend the night... spend the week here.\" She tightened her embrace slightly, saying, \"You have amazing instincts for this... for what I need. I'll sleep on the floor at the foot of the bed, if you'd like. I'll bring you coffee, and fix your breakfast in the morning. I have to go to work tomorrow, but maybe you could spank me before I have to leave? That way, every time I sit down, I'll be reminded that you're waiting to do more things to me when I get home. I'll be your naked obedient slave all week.\"\n\nGwen was surprised at how appealing that request was. The thought of having a deliciously naked Kelly waiting on her, obeying her commands, carrying out her whims, was very enticing. But her pragmatic side kicked in. \"I didn't bring night clothes or a toothbrush or even a comb, Kelly.\"\n\nKelly heard the lack of a flat refusal, and was elated. \"I have unused toothbrushes and combs, Miss. And I have long t-shirts that can serve as nightwear, or you can sleep au naturel, Miss.\"\n\nGwen grinned. \"You've thought of everything, I see. Very well.. we'll see how this works out.\" She walked over to a sofa and held out her arms. \"Come here and cuddle with me, pet.\" Kelly beamed a big smile and snuggled against her in a submissive embrace. As they chatted about this and that, Gwen stroked Kelly's hair and soft, warm, smooth skin. Soon, Kelly switched her mind off and drifted in the sensations of being cared for. Gwen silently gazed at this lovely woman that wanted her to... to command her and to do humiliating things to her. When she'd driven here today, never in her wildest dreams would she have guessed the day would go this way.\n\nThey got ready for bed. Gwen was wearing a long t-shirt that Kelly'd provided. Kelly remained naked. \"You may sleep on the floor next to the bed,\" Gwen told her submissive in a decisive voice.\n\n\"Thank you, Miss. May I please have a blanket to sleep on, and pull over me if I get cold?\"\n\nGwen was surprised that Kelly even asked this. \"She's really firmly ensconced in her role of submitting to my every whim,\" she thought. Aloud, she murmured sleepily, \"Yes, my pet. You may. Good night.\"\n\n\"Good night, Miss. Pleasant dreams. I'm so glad you're here,\" Kelly stated with a tiny yawn. The lights were extinguished, and both women slept. In their dreams, their brains were processing the new information and experiences of the day. Both women smiled in their sleep.\n\nIn the morning, Gwen was awakened gently by her nude girl holding a breakfast tray and softly saying, \"Good morning, Miss. It's going to be a lovely day. How do you like your coffee, please?\"\n\nGwen sat up, stretched -- which made her breasts press enticingly against the t-shirt -- and arranged the pillows behind her back. She answered as she accepted the tray, \"Good morning, pet. Just a little milk in my coffee.\" Kelly fetched the coffee, and her own breakfast and ate hers sitting on the floor next to the bed.\n\nAs they finished, Kelly looked at the clock and asked, \"May I get dressed for work now, Miss? I should leave in half an hour or so.\"\n\n\"Yes, you may. Will you be able to get your car out around mine?\"\n\n\"Yes, Miss. The driveway is wide enough. No need for you to get up at all.\"\n\nGwen lazed in bed, watching Kelly dress for work. First, the woman put on her pull up stockings. It might've been Gwen's imagination, but it appeared that Kelly was pointing her toes, slowly drawing up the silken material, smoothing it out as she proceeded -- doing all this in a provocative manner. Certainly she made no effort to hide her sex during this... quite the contrary. She did finally cover her pussy with beautiful panties. As Gwen suspected, Kelly wore no bra, just a lovely blouse, which she donned next. Finally, she added a skirt that came to mid-thigh.\n\n\"How do I look, Miss?\" Kelly asked softly, seeking approval.\n\n\"Lovely, my girl. But there's one thing I think you forgot.\" Gwen really didn't think Kelly had forgotten, she was just playing a little game with her.\n\nKelly looked in the mirror. \"Ummm... what have I forgotten, please, Miss?\"\n\n\"You forgot your morning spanking, so you'll remember me all day whenever you sit, girl.\" Gwen pulled away the bed sheet, and turned sideways, to sit on the edge of the bed. \"Hike that skirt up to your waist, pull your panties down to your knees, and lay yourself across my lap, slut,\" she commanded.\n\nBlushing a wonderful shade of pink from her cheeks down her neck, Kelly obeyed. Seconds later the quiet in the room was replaced by the sounds of Gwen's palm cracking against Kelly's bare buttocks. Gwen's long t-shirt had ridden up when she turned and moved forward to the edge of the bed. Consequently, Kelly's smoothly shaven pussy was brushing against Gwen's pubic hair each time she jerked and squirmed during her spanking. Not only that, but as Kelly got aroused from the embarrassment of being spanked in this manner -- her excitation being clear evidence that this was the sort of thing she craved -- her pussy lubrication began dripping right on Gwen's pussy. This in turn excited Gwen once she realized what was happening. So both women experienced arousal pleasure from this spanking, as Kelly's ass flesh turned hot and red.\n\nGwen paused. \"Do you think that will remind you enough today, Kelly? Perhaps it will make you wonder what sorts of things might happen tonight?\"\n\nKelly shivered with delight, hearing that. \"Yes, Miss... I promise to remember each time I sit down, and wonder what you have in store for me.\"\n\n\"Excellent. Get up, pull up your panties, and smooth down your skirt.\"\n\nAfter Kelly had obeyed and was ready to depart, she looked at Gwen and shyly asked, \"May I kiss you goodbye, Miss?\" Gwen stood up and gave a consenting answer. Kelly placed her hands on Gwen's shoulders and gave her a long, slow kiss with warm, soft lips -- a kiss that signaled her affection for Gwen. This kiss was quite a departure from the forceful kiss she'd given Gwen in the restroom. This kiss was so intimate that it made Gwen's toes tingle.\n\nSince Gwen was going to head to her home and gather a few things for an extended stay, Kelly gave her a spare key. As Kelly got into her car, her eyes widened and she gasped as her tender bottom made contact with the car seat. She'd most definitely think about Miss Gwen all day today.\n\nGwen made the short trip to her house to gather up some changes of clothes, her laptop, and her cell phone charger. Returning to Kelly's house, she took her laptop into the 'play room' to learn more about the treasures it held. Very naive about BDSM, or even D/s, she took a crash course through various websites, studying terminology, equipment, and videos of interactions. It was as if a whole new world was being revealed. She rummaged through the toys in the room, selecting a few, and was ready to greet Kelly as she arrived home.\n\n\"Hello, my little slut,\" Gwen said, gently grasping Kelly's chin and giving her a firm kiss on her lips before she could even close the front door. \"Now close the door, place your hands on top of your head, and then stand very still,\" Gwen commanded. Kelly turned, closed the front door, and turned back, standing motionless. She'd been thinking about Gwen all day, and couldn't wait to get home. Her heart was pounding hard in her chest.\n\n\"I remember you did this in the restroom on Friday, without my permission,\" Gwen declared, squeezing Kelly's boob through her blouse. Even with that brief contact, Gwen easily felt Kelly's erect nipple pressing hard against her palm. It pleased her that their evening was starting in this manner. She undid Kelly's skirt, lowered it, and had her step out it. To add a soupcon of humiliation, she lowered Kelly's panties to the level of her knees, saying, \"These better stay right at this level, girl. If you let them fall, you'll wish you hadn't.\" Gasping, Kelly quickly widened her stance, pulling the panties' waistband tight against her knees. Holding her panties like that, with her sex on display, somehow seemed more lewd than just being bottomless. Kelly realized this, and her sexual tunnel contracted suddenly, squeezing out some of her growing lubrication.\n\nNext, Gwen took her own sweet time, slowly unbuttoning Kelly's blouse. Inspired, she told her husband's boss, \"Place your arms now behind your back.\" As Kelly obeyed, Gwen slid the blouse down off her shoulders and lowered it to her wrists. \"Now, bunch up that blouse there, and don't drop it.\" Both women were aware that Kelly was as good as handcuffed like that. She moaned softly, and her nipples were now so swollen that they ached. She was now naked except for the panties being held at her knees, and the cloth 'restraint' formed by the blouse. Beckoning, Gwen said, \"Follow me into the living room, slut.\"\n\nKelly had to shuffle awkwardly forward, trying to make sure the panties didn't slip down past her knees. Her hands were rendered useless behind her. She was concentrating so hard on her slow movements that she didn't notice that Gwen had opened the curtains. Unbeknownst to her, Gwen had checked just before Kelly's arrival that the angle of the sun was reflecting off the glass in such a manner that no one out there could see inside, but the two of them could see out perfectly. So when Kelly saw the view of her neighborhood, she almost ran to hide herself behind the sofa. But Gwen's voice rang out with tones of command, \"Stay right there! Do not move a muscle, bitch! What? You don't want all your neighbors to learn about your unusual proclivities?\"\n\nKelly moaned louder, shocked at how turned on she was by the thought of such a discovery. Gwen saw that the moment had achieved the effect she desired, so she walked over and close the drapes. On her way back, she picked up a riding crop that she'd put in place ahead of time. Coming to stand before the quasi-naked woman and letting her see the crop, she asked, \"Remind me... what was your safeword, bitch?\"\n\nKelly eyed Gwen's posture, listening to the quality of her voice... and swallowed audibly. \"It's... it's the word red, Miss.\" Gwen seemed so different now that she began to wonder if her safeword would soon be called upon.\n\n\"Red, huh,\" Gwen repeated. \"And if you say that, I will indeed stop, you lowly piece of filth.\" As she said that, she grabbed one of Kelly's nipples and twisted it. The submissive was so keyed up by the firmness of Gwen's control, by the humiliation of the panties, blouse, and window, and by being called embarrassing names as her sensitive nipple received a small amount of completely unanticipated pain that she shrieked and almost came, right then and there. The trickle down her thighs was being wicked into the trapped panties.\n\nHaving a much better idea how to use that crop without damaging the recipient, Gwen proceeded to pace slowly around Kelly, swatting her tits and ass, making her submissive jerk, moan, quiver, and shiver as her arousal built and built. Kelly was so caught up in these sensations that she was only vaguely aware when they stopped. \"Kelly... Kelly...\" Gwen said, trying to get her attention. When Kelly's eyes refocused, Gwen told her, \"Bring your legs closer together. I'm taking your panties off now.\"\n\nA little dazed, Kelly complied. Gwen stood up, holding the damp panties in her hand. Boldly, she briskly fingered her girl's cunt, feeling the warm, gooey, almost melting butter feel inside that intimate tunnel. Kelly's internal muscles clenched at her finger as she prodded deep. But then she withdrew the coated digit, and replaced it with the panties, stuffing them up inside Kelly's pussy until only a small scrap of the waistband protruded. \"Stay right there!\" she said over her shoulder as she left the living room, heading for the play room.\n\nKelly was still trying to come to grips with the new, improved Dominatrix that seemed to have taken over Gwen's body as Gwen returned. She was carrying... a butt plug! She held it up to Kelly's mouth. \"Here... you'd better get this wet and slippery. You know where it's going next.\" Kelly instinctively open her mouth to capture it, while Gwen took pity on her, removing the blouse completely so her submissive could use her hands. Kelly spat on, licked, sucked and generally worked to coat the plug with slippery saliva.",
        "Gwen said, \"Since I've never shoved one of these inside a person, you'd better drape yourself face down over the arm of your sofa and reach back to pull your ass cheeks wide apart.\"\n\nFlushing a certain shade of crimson, Kelly obeyed. But as she exposed her ass hole, she begged, \"Please, Miss. Spit right on the hole a couple of times, then press it inward slowly.\"\n\nGwen was happy to oblige. She spat several times, her gobs of spittle striking above and also directly on the slightly gaping puckered opening. Placing the tip of the butt plug directly into the small opening, she pressed on it, giving it a tiny back and forth screwing motion. She listened to Kelly's excited sounds and watched avidly as that tiny puckered opening dilated, growing bigger and bigger as it swallowed the girth of the plug. Kelly was panting by the time the narrow neck of the plug reached her skin. Gwen was amazed at how the anal ring, having stretched so wide to accommodate the plug's entrance, closed smoothly to clasp the plug's neck!\n\n\"OK, slut. You can stand up again, with your hands on top of your head.\" As her compliant submissive obeyed, Gwen looked at the edge of the panties still protruding between her pussy lips. Grinning, Gwen watched Kelly's eyes widen as she grasped the cloth and slowly pulled it out. The panties came out sodden, having soaked up Kelly's copious pussy juices. \"Now you can go prepare our dinner, you silly little bitch. But here's an appetizer for you. Open your mouth.\" As Kelly obeyed, Gwen pushed the panties into her mouth.\n\nKelly gave a muffled moan of delight as she tasted herself on the panties. It wasn't just that taste -- it was this 'new' Gwen. \"When this woman entered my house yesterday, she looked like a scared kitten. Now she looks like a tigress!\" she thought. \"Not only that, but she's apparently instinctively giving me the precise amount of humiliation, pain, and pleasure that I crave! If this keeps up, and she enjoys it too, I might never have to search for another person to dominate me.\" She started to head for the kitchen as she heard Gwen speaking to her.\n\n\"If you're a really good girl, and make us a lovely dinner, I may give you other pussy juices to drink as I flog your back and your ass.\" Kelly's mind was suddenly flooded with the image of herself kneeling between Gwen's knees, her face buried in Gwen's sex as she performed cunnilingus, feeling the butt plug still filling her ass hole as the flogger slapped the skin of her back and butt! The image was so vivid that her body reacted viscerally. Knees trembling, she shivered in orgasm, her cum fluids streaking down her thighs. When she recovered enough, she began creating a wonderful meal for her Miss. Both women were grinning, looking forward to a magical evening of discovery -- together."
    ],
    "authorname": "mollycactus",
    "tags": [
        "cunnilingus",
        "bisexual",
        "discipline",
        "female dominant",
        "masturbation",
        "slut",
        "wife",
        "cum",
        "butt plug",
        "flogging"
    ],
    "category": "BDSM",
    "url": "https://www.literotica.com/s/kelly-and-gwen"
}
{
    "title": "The Tennis Star Ch. 03",
    "pages": [
        "\"And when you win, I have a surprise for you, moya lyuba.\" Iryna's face was unreadable. \n\n\"A good surprise?\" \n\n\"You will have to win to find out.\"\n\nIt was Saturday morning again. The week had passed. Iryna and I talked and texted every night, just like a couple of silly teenagers. On Thursday night we did a little experiment, where I headed straight over to Iryna's after work. It'd been lovely. We made dinner together, snuggled on the couch and watched some show on Hulu. At bedtime we walked back to our room, where we got ready together in the bathroom. News flash, international tennis stars brush their teeth like normal people. Weird. \n\nWe climbed into bed and made love. Not earthshaking, hours long, mind bending love, just normal weeknight, I'm so happy you're here with me love. It was nice. And I fell asleep in her arms, which was even nicer. When the sun came up I awoke feeling her warmth next to me. By the time I was finished with my morning ablutions, Iryna was sitting up in bed.\n\n\"Good morning, moya lyuba.\"\n\n\"Good morning.\" I wasn't wearing anything, and I didn't care, which was a novel experience for me I never walked naked in front of my ... anyone ... before. From middle school gym, through all the tennis teams I'd been on, if I'd absolutely had to shower with my teammates it was as fast as humanly possible. And never in front of my boyfriends. During sex was one thing, but afterwards, no way.\n\nBut I knew she was watching me as I sauntered across the room. Oh, and I did saunter. Absolutely. Her gaze, it didn't make me feel cheap, or judged, or objectified. I was empowered, beautiful, and strong. I put on a little show as I got dressed, which earned me a deep throated growl that sent a delicious chill throughout my body. \n\nIryna slid out of bed, wrapping herself in a robe and walking with me out to the kitchen. She started coffee as I toasted a muffin, and we went through the morning together. As I went out the door Iryna kissed me deeply. \"Have a good day, and hurry home.\" I almost floated to my car, the word 'home' caressing my heart.\n\nWe were even able to have lunch together that day, after her PT was finished. It had to be on the down low, or at least we had to behave ourselves. I didn't really care for that, but I understood.\n\nWhen I got back to her place after work she'd ravished me right there in entryway, feasting on my neck while her fingers had dipped into my scrubs and brought me to a quick orgasm. That hadn't been difficult, especially since I'd gotten uncomfortably wet just thinking about her on the drive over. When the aftershocks passed she lifted me up, me wrapping my legs around her waist, and carried me to the couch, where she stripped me naked and slowly brought me to bliss with her tongue.\n\nAfter I came back to earth I stretched languidly. \"Oh, I could get used to that kind of welcome home.\" I'd pulled her to me and kissed her deeply.\n\n\"I am glad you enjoyed it.\" \n\n\"My turn.\" I'd started to pull up her shirt, but she'd stopped me.\n\n\"No, moya lyuba. That is all you get tonight. You have a match in the morning, and you must be ready.\"\n\nEven my best pouty face accomplished nothing, but despite my frustrations we managed to have a lovely evening. We made chicken and whole wheat pasta, and Iryna talked strategy with me.\n\n\"This woman you are playing, she plays how? What are her strengths?\"\n\n\"She's a counter puncher. She's not real tall, but can run anything down. She's frustrating.\" We'd talked about how to deal with someone like that, and when we finally went to bed, she steadfastly refused to let me get past first base. But she did hold me, whispering in my ear.\n\n\"You are strong, fast, and powerful, moya lyuba. The court is yours. She cannot defeat you. Every ball she returns only prolongs her demise.\" I fell asleep with her voice in my head, and I dreamed of victory. \n\nAnd now it was morning. Match time. I opened the car door and stepped out. Martin popped the trunk and I removed my tennis bag. There was a small crowd at the entrance, obviously waiting for Iryna with things for her to sign. She squeezed my hand once before turning to her fans. That was fine with me. I was focused, slipping inside without looking back.\n\nOn the court, I was a goddess. I played perfectly, my best in months, maybe years. All the things Iryna and I had talked about I executed flawlessly, and I took the match 6-0 6-1. The feeling was amazing, right up until after the final handshake, when Penny, my opponent, had gone over to the stands for a consoling hug from her boyfriend. My own lover was standing right next to the pair, and I hated that I couldn't go to her. She blew me a small kiss, which was nice, but I wanted to be holding her, in front of everyone, consequences be damned.\n\nI forced myself to return her smile and went to the locker rooms. As I stood under the shower my emotions ranged between elation for how well I'd played, and frustration at not being able to share it. I tried to tell myself when we were alone it would be fine. I'd be back in her arms and all would be well.\n\nI dressed and made my way back out to the courts, but as I did any resentment I felt melted away as I saw Iryna. She was on the court with a racquet, somewhere she was definitely not supposed to be, gently hitting with a young girl on the other side of the net.\n\n\"Oh! A big forehand! Very good shot!\" Iryna clapped a hand to her racquet as the ball sailed past her. She pulled another fuzzy yellow ball out her pocket and held it in front of her. \"Now you can do that with your backhand?\"\n\nI settled onto the bleachers and watched her for a few minutes. One of the boys, about thirteen or so, wasn't as impressed as he should have been. \"I bet I could ace you.\" \n\n\"You could try.\"\n\n\"I can ace my mom, and she's really good.\"\n\n\"OK. Go ahead.\" Iryna motioned back to the far baseline and turned towards her own, catching my eye in the process. I gave her a stern look, but she just smiled innocently and took her position. The boy, I think his name was Graham, was bouncing the ball, ready to serve. Iryna's eyes changed, their friendly light intensifying into a vicious gleam. Graham was oblivious in that stupid, adolescent way. If I were across the net, I'm pretty sure I'd fake a sprained ankle. \n\nIryna leaned forward, bending her knees and spinning her racquet in her hands. \n\n\"Service!\" Graham rocked and swung. He wasn't wrong. It was a good serve, hard and up the T. Iryna stepped to her left and cracked a two handed backhand into the open court. Graham could only watch it fly past. \n\n\"My turn.\" Iryna caught a ball tossed to her from the girl she was hitting with earlier. \"Ready?\"\n\nGraham nodded, his expression far less confident than it had been. Iryna served, slicing it out wide. Graham lunged and waved wildly, but made no contact. \"Fifteen -- Love\" Iryna walked to the other side of the baseline. \"Ready?\" Graham nodded, and this one went flat and quick up the middle. Graham was cheating out side, and he didn't even move for the ball. \n\n\"Thirty -- Love.\" To his credit, Graham looked determined, even in the face of the ribbing he was receiving from his friends on the sideline. Iryna took some mercy on the lad, her next serve curving into the body. To his credit Graham got out of the way and made the return, but it was high and into the center of the court. Iryna ran forward and smacked away a forehand, but I saw the twinge of pain in her face as she did so.\n\n\"Iryna!\" She looked at me, and I could see the steel in her eyes. \n\n\"One more point.\" She caught the ball from the other side of the court. \"Forty-Love.\" She made her way back to the ad court. One more serve, hard up the T, and it was over. I could see her limp as she walked to the net. She shook Graham's hand and tussled his hair. \"You're a good player, keep up the hard work.\" He nodded, blushing lightly. \n\nShe walked over to me, and I couldn't help but take her hand. \"Are you OK?\"\n\n\"Yes.\" She smiled. \"It felt good.\"\n\n\"Pushing around a kid?\" \n\n\"No. Holding the racquet, looking across the net. I miss it.\" Iryna gave a deep sigh. \"This sitting around. I hate it.\" She reached out and took my hand and gave it a squeeze and let go. \"But being here with you, it makes it bearable.\" Her smile was sad, but genuine.\n\nWould she need me after she was well? I tried to push that traitorous thought away. \"Come on, let's go get something to eat. I'm starving, and I want to have a lot of energy for my surprise.\" I whispered the last bit in her ear, and she grinned as she stood up with me. We stopped for Pho, with Iryna telling about a spot where she was able to get it on the street in Bangkok.\n\n\"Hottest thing I have ever eaten.\"\n\n\"Hotter than me?\" I tilted my head and pouted, batting my eyelashes and almost making her choke on her noodles.\n\n\"No, I...You are terrible.\" We shared a laugh, the first since we'd left the club, and the mood significantly lightened. By the time we got back to Iryna's she was laughing and happy again, mercilessly teasing me about my surprise. She dismissed Martin for the day as I went in to use the half bathroom off the foyer, and when I came out Iryna was gone.\n\n\"Sweetie?\"\n\n\"In the bedroom.\" The huskiness of her voice made me shiver, and I made myself not run down the hall to the back. When I entered, Iryna was standing next to the bed, wearing only a pair of red panties. Her long, sandy blonde hair was pulled up into a bun, emphasizing her striking features. My mouth went dry. With her kind and playful nature, it was easy to forget how magnificent she truly was. My pussy began to tingle at the sight. \n\n\"Strip for me, moya lyuba. I wish to see you.\" I never looked away from her face, those crystalline blues eyes holding me enthralled. I kicked off my tennis shoes, raising my legs one at a time to peel off my socks. I pulled my tank top free from my shorts and lifted, tossing it away. I peeled down my bottoms and stood in my sports bra and panties.\n\n\"You are beautiful, Carrie, please continue.\" She made no move toward me. I pulled my sports bra over my head, feeling the weight of my breasts bounce free. Finally I shimmied off my pink cotton panties and I stood naked in front of my lover. \n\nIryna covered the distance between us in two steps and put her arms on my shoulders. \"I have something special for you, I think you will love it, but I would like for you to not interfere. It can be very intense.\" \n\nFor a moment I saw uncertainty in her eyes. I reached up and touched her cheek. \"I trust you. What do you have in mind?\"\n\n\"Lie down on the bed.\" I did, never looking away from her. I laid my head on the pillow while Iryna reached into the nightstand and pulled out two silk scarves. \n\nI smiled up at her. \"This is the surprise, you want to tie me up?\"\n\n\"No, this is just getting ready. Will you let me? If you say to stop, I will stop.\"\n\n\"I mean it Iryna, I trust you. If you think this will make it better, I'll do it.\" I held my arm out, and she ran her fingers along my skin, raising gooseflesh and making me moan. She pressed my wrist against the white metal headboard, tying it off gently with one of the scarves. She repeated the process on the other side, leaving me helpless before her. Ok, well maybe that's over stating it a bit. When I think back on it, I'm pretty sure I could have wriggled out of those restraints. But the hungry look in Iryna's eyes kept me still. \n\nI pulled my head up, my lips parted, begging for a kiss. Iryna leaned down and obliged me. It was odd, not being able to wrap my arms around her or touch her hair. But it was intensely erotic also.\n\n\"Oh, moya lyuba, I cannot tell you how beautiful you are.\" She ran a finger slowly down my neck, over my breast, and into the hollow around my stomach, all while gazing down at me. \"It is time for your surprise. Are you ready?\"\n\nI nodded, drawing a shaky breath, every nerve in my body tingling from that one finger still tracing ecstasy over my skin. \n\nIryna reached back to the nightstand again, pulling out a tall bag I wasn't able to see into. She set it next my hip and lowered her mouth to mine. She kissed me gently before moving down to my neck and suckling on the tender flesh there. She moved onto my nipples, sucking and nibbling, everything I loved. I leaned my head back, luxuriating in the sensations. They weren't exactly new, but I wasn't complaining. \n\nAs Iryna worked her way even lower I almost forgot about my 'surprise', my legs opening in anticipation of what I hoped was coming. \n\nSuddenly the contact ceased. \"Raise your hips, Carrie.\" My eyes opened and I did as instructed. Iryna slipped a pillow under my lower back, lifting my behind clear of the sheets. She pressed her hands flat against my thigh, easing them open and back. My pussy and ass were fully exposed. Looking down the length of my body I could see my aroused clitty sticking lewdly up. \n\nIryna saw it too, leaning down and wrapping her lips around it. 'Oh God!\" Too soon she broke away, reaching into the bag and pulling something out. It was long, probably seven or eight inches, and a translucent deep pink or red. It was flexible, but not phallic shaped, so my first guess was gone. There was a large ring at the base, extending out into maybe eight or nine spheres, attached in line by a thin plastic wand. \n\n\"What are those?\" \n\n\"You shall see.\" Iryna pulled a small bottle of gel from the bag. She repositioned herself between my legs, blowing gently over my sex. Her mouth took me in, running over the length of my folds. Down and back, and then beyond my vaginal opening and over to my rosebud, which caused me to gasp and cry out. \n\n\"You like this, yes?\" Iryna pushed a finger against my pucker, popping it inside.\n\n\"Oh God! Yes, yes I do.\"\n\n\"Good.\" She squirted a bit of the goo from the bottle onto her hand and began spreading it on my butt, even pressing inside a little. I gasped at the chill on my skin, reality dawning on me as to where those beads were going. Iryna spread some more of the lube onto the toy. She pressed the end, the smallest bead, up against my anus. Iryna looked up at me, her crystalline blues searching for permission. I nodded shakily, eyes wide as saucers watching what she was doing. \n\nMy body was electric, both from the earlier teasing and the thought of what was about to happen. And then, ever so gently, the first bead popped inside me. I grunted and threw my head back, my hands wrapping around the restraints that held them in place. A second bead popped in and I cried out. \n\n\"Carrie?\"\n\n\"Please don't stop.\" The third and fourth bead went in, each getting successively larger. Then a fifth. I felt full, beautifully full. I was breathing heavily. Iryna's other hand went up and caressed my clit. My hips bucked at the contact, another bead sliding in. \"Oh shit!, Iryna, I don't know if I can do another.\"\n\n\"Yes, you can, moya lyuba. One more.\"\n\n\"Ok.\" I bit my lower lip as Iryna began to apply more pressure. Clamping down wasn't going to help matters, so I tried to let myself relax, and after a moment there were seven beads inside of me. Iryna slowly manipulated the end, send shudders racing through my body. She didn't pull it in and out, which is what I had been expecting, instead turning her hand is circles, causing the length to press against every side of me. My hips undulated against her, trying to increase the stimulation. It was exquisite. \n\n\"It is good?\"\n\nMy eyes shut tight, all I could do was nod. I was shaking from head to toe, and then, with no warning, Iryna pushed her tongue deep into my pussy. \"Ahh! Iryna! God!\" \n\nShe drove in and out, and I could feel her touch against the beads. My head was spinning; it was so intense. My entire body pulsed and sang, and it took focus to keep breathing through the pleasure. \n\nIryna continued for a moment, and then ran her long tongue up through my folds, causing my hips to kick off the bed, trying to press myself against her. Her quiet strength pushed me back down, fingers sliding into my vagina. Every time my muscles tensed I could feel the beads inside me, pressing through the sensitive flesh. They seemed to heighten everything. Iryna continued to make love to me with her mouth. I bucked and writhed underneath her talented lips, my words and cries becoming less and less coherent. \n\nI could sense my climax building, and Iryna was wasting no time in taking me there. And it was going a big one, with the beads in place. They weren't even in all the way. There were at least two more were on that blessed toy. As soon as I could speak again, I was going to tell Iryna how much I liked them. So very, very nice. Of course, that tongue flicking my clit was pretty nice too. Yeah. And with my hands tied I couldn't do anything except let myself sink into the feelings. Her fingers curled against my G-spot, rubbing in time with that blessed tongue. \n\n\"Moya lyuba, you must tell me when you are ready to cum, yes?\" Somehow I managed to nod.\n\nI floated along for a few minutes, luxuriating in the incredible and varied sensations echoing through my body. They were reverberating off each other, driving me upwards to new heights. I knew I was making sounds, but they weren't intelligible by any stretch. Finally, Iryna's fingers and tongue found a complimentary rhythm, and I felt my orgasm rush towards me. \n\nSome part of brain remembered what Iryna had said. \"Sweetie I'm gonna cum, I'm gonna, oh God, Unhnh...\" As my core muscles tensed in that ecstatic moment just before release, Iryna's fingers slipped out of my pussy. I felt a momentary twinge of disappointment before the first intense wave of pleasure hit, and the largest bead was pulled from my bottom.\n\nEver been on a trampoline? That thrill every time it bounces you into the air? Ever have a friend land next to you just as you're jumping and you get launched super high? It was kind of like that. The extra sensation of the bead made the first strong pulse of my orgasm insanely intense, like nothing I was prepared for. My head slammed back into the pillows as I screamed. Iryna's tongue was merciless, lashing my nub side to side and up and down. I jerked and writhed, and inexorably, as each wave of ecstasy coursed through me, the beads popped free, each one strengthening the accompanying orgasmic pulse to levels I hadn't known existed. I surfed on the edge of a tsunami, with no idea how I could land safely. \n\nBy the time the last of the toy was removed and my climax finally began to fade I was completely spent. I was seeing stars, desperately trying to catch my breath. I felt Iryna move up my body, reaching out to untie my wrists. As soon as I was free she reached for me, pulling me close as I trembled against her.\n\n\"Shhh, moya lyuba. It is too much?\"\n\n\"Just hold me.\" My cheek lay flush on her chest, my palms pressed against her. Her strong arms tightened around my shaking body. Any small movement caused aftershocks to race through me, each a mini orgasm that made me quiver inside and out. \n\n\"You are okay, moya lyuba?\" When I looked up there was a touch of concern in her eyes, so I smile weakly up at her.\n\n\"I just need a minute. That was... I don't know what that was.\" I snuggled against her. \"Thank you. I loved it.\" I love you. My mind knew it, but I couldn't make myself say the words. I thought about how many times I'd decried the capacity of the male half of our race to do just that. I'd said them before, and thought myself very evolved for doing so. But now I knew it hadn't been true. It wasn't like I'd been lying, exactly. I just hadn't known what it meant, not really. I did now, and I'd only known her three weeks.\n\nWhy did she have to be her? Why couldn't she be a teller from the bank, or someone I met at the club, or another therapist from work? I forced my tears back down and tried to remember that she was here now, and that was the important thing. Her heart thudded powerfully in her chest, the warmth of her filled me, and the rise and fall of her chest lulled me into finally into sleep.",
        "The early afternoon sun was shining into the bedroom when I woke. I was naked, laying on top of the comforter. Iryna had covered me with a blanket from the living room and tucked a pillow under my head. My phone was sitting next to the bed with a text evident. \n\nIryna -- I am out by the pool. Come join me when you are awake. \n\nSeveral hearts surrounding a kissing emoji followed. \n\nIt warmed my heart, but wasn't as good as the real thing, so I sat up on the edge of the bed and stretched. I felt rejuvenated, and I was eager to be out by Iryna. I grabbed my green and black one piece racer back and pulled it on. \n\nIryna lowered her book as I as I opened the sun door leading out to the patio. She was reclining on a chaise lounge wearing a tiny, plain white bikini. Her incredible blue eyes shone as she looked at me, and her smile was radiant, heating me as much as the sun did. As I walked towards her I felt that little tickle in my pussy, and I couldn't believe it was even thinking about being ready again. \n\n\"Hello, Carrie, did you sleep well?\" \n\n\"Oh, yeah.\" I pulled a second chaise next to hers and sat on it, reaching out and taking her hand. \"You're amazing. That was beyond, I mean, just wow.\"\n\n\"So you liked it, yes?\" \n\nI smiled shyly and blushed crimson, recalling my screaming, transcendent orgasm. \n\n\"Very much.\" I breathed out heavily. \"I don't think I could take that every time, but...\" I swung her hand back and forth.\n\nIryna pulled me over to her lounge, and I landed with a happy laugh as she wrapped me in her arms. \"I have wanted to do that for you since that first time I touched your bottom.\"\n\nI let my voice drop to a sultry husk, slowly running my fingers through her hair. \"It was the most intense experience of my life.\" \n\n\"Truly?\"\n\nI nodded slowly. \"Oh yes.\" I leaned in close. \"But now the question is, what shall I do to repay you?\"\n\nIryna's breathing was becoming more rapid. \"Carrie, you don't...\"\n\n\"I know. But still, I will.\" I leaned in, feathering my lips against Iryna's cheek. \"Because I want to.\" Iryna sighed and tried to turn to kiss me, but I pulled away. \"But first I'm going swimming.\"\n\nI hopped up and ran to the pool edge, jumping into the water. It was bathwater warm and felt amazing. I took a few strokes out to the middle before turning back to Iryna, who was sitting on the edge of her lounge chair. I gave her my best playful 'come hither' look and moved slowly away, inviting her to come chase. She stood, her six one frame unfolding into the sunlight, which glinted off her sandy blonde hair and beautiful porcelain skin, and I couldn't help but tingle from head to toe at the look of the huntress in her eyes.\n\nI squealed as she came after me, and I ducked under the water to escape. \n\nWe spent the next hour chasing each other around the pool. I actually had the advantage here, I'd been on the swim team in high school and had grown up with an in ground pool, so despite her extra reach I could avoid her pretty easily. I let her catch me a few times, though, so she could sweetly molest some part of my body. \n\nThat was nice. Eventually we climbed out and wrapped each other in the beach towels Iryna had brought out with her. I could smell the chlorine on our skin, so we made our way to that beautiful shower. \n\nWe just stood under the streams, our bodies pressed against each other, mouths melded together in an unending kiss. Her hands roved over my back, down to cup my bottom. I whimpered into he mouth. How could I feel this way? A month ago the only interaction I'd ever had with her, if you could call it that, was watching her play tennis on the TV. Now I was naked in her arms, raising my knee to rub the inside of my thigh against her leg. But it wasn't just that. Obviously she was beautiful, but she was also funny and sweet, with such joy in life, so innocent, but intensely driven at the same time. She was intoxicating. Less than one month, and I couldn't imagine life without her. \n\nShe shifted slightly, ours tongues seeming to dance together. We continued kissing, and I let my senses fill with her for a moment longer before I pulled away.\n\n\"Sweetheart? I'm turning into a prune.\" \n\nIryna smiled at me. \"OK, moya lyuba.\" \n\nIt was a little after five, and we had dinner reservations at six-thirty up in Winter Park at Hillstone, one of those restaurants that people with more money than me always rave about. It sat right on Lake Killarney, and the timing of our meal should give us an incredible view of the sunset. I don't know how Iryna had gotten the table, but if I wanted to enjoy it I had to start getting ready. I sat at the vanity in the bedroom, doing my best to apply my make up. I did a pretty good job, though I could have used Sasha's help. What was slightly disconcerting was having Iryna sitting next to me doing hers as well. We kept looking at each and smiling and giggling. \n\nMartin arrived promptly at six and rang the bell. I looked at myself in the mirror one last time, smoothing out the front of my burnt orange skater dress. It was off the shoulder, and showed them off along with my legs. My hair was swept back over my left ear, falling in waves past my right shoulder. It was an easy style I could pull off without help. Overall I liked it.\n\n\"Carrie!\" Iryna's voice sounded from the entryway. I grabbed my clutch, and slipped on my shoes, three inch open toed heels, very daring for me, and walked down the hall. The work was worth it when I saw Iryna's eyes widen when she saw me. I blushed and spun in a circle. \"Oh, moya lyuba. You are beautiful.\"\n\n\"So are you.\" And she was, wearing a yellow and blue peasant's blouse over slim black slacks. I stepped towards her, running my fingers through her hair, which fell loose around her shoulders. \"Are you ready?\"\n\nI saw something change her eyes, a steeling. \"Yes, so very ready.\" She took my hand and we walked out, where Martin waited to open the car door for us. She helped me into the car and climbed in beside me. \n\nAs we drove she stared out the window, her hand resting on my knee, fingers drawing circles on my shin. \n\n\"Iryna, Sweetie, where are you?\"\n\n\"Hm?\"\n\n\"Just wondering, cause you're not here with me. Where are you?\"\n\n\"I'm sorry, moya lyuba.\" She took my hand in both of hers. \"Carrie, you will do something for me?\" \n\n\"I'll try. What?\" \n\n\"The last weekend I am here, will you take that Friday from work? Keep that weekend for us?\"\n\n\"Sure.\" The term 'last weekend' had caused a stab of pain in my heart. But even so, it seemed a trivial request given the gravity in her voice. I looked out my own window. \"When do you leave again?\"\n\n\"Tuesday, October 31st.\"\n\n\"Halloween. Figures.\"\n\nWe passed the rest of drive in silence, but we still held hands. I felt foolish. I reminded myself this relationship had an expiration date. I knew that going in, really, even when I thought I was going to be little more than a notch on her bedpost. I refused to ruin our time with my insecurities. \n\nWhen we arrived at Hillstone Iryna helped me out of the car. I expected her to drop my hand. The place was packed, and there was good chance of her being recognized. But she didn't. I could tell she was nervous as we went up the walk, though, as the pressure in her grasp was increasing as we approached. \n\nThe hostess met us at the door. \"Miss Baraskova? Your table is ready.\" We got a few looks as we followed him into the dining area. Candles burned on our table, paired with a single red rose in a vase. It was right on the window, the lake water shimmering in the yellows and oranges of the setting sun. \n\nDinner was beautiful, backdropped by an orange ball of fire fading into the horizon as we ate. If any of my doubt remained about Iryna's mindset on the ride over, it didn't change the way she looked at me that night. She held my hand across the table, let me have a bite from her fork. Something had changed. It was the fear. That was it. It wasn't gone, but she was trying to push it away. There were still a few surreptitious looks over her shoulder, nervous glances at the next table. But most of the time she was focused fully on me, just like when we were alone.\n\nAfter dinner we walked down to the lake, where a small dock extended out into the water. Other patrons were sitting nearby, waiting for seating, but Iryna never let my hand go. The stars were beginning to come out, the last of light fading over the water. I looked at Iryna, who was watching me softly. \n\n\"You are so beautiful, Carrie. How did I find you?\" I couldn't say anything, as my breath caught in my chest. And then she was kissing me, in front of everyone. My heart raced, warmth flooding through me. Did people gasp, or turn away? I honestly couldn't tell you. At that moment she was my whole universe, and I was hers, as it should be. My head leaning on her shoulder, we walked arm in arm back to the front where Martin was waiting for us. \n\nAs the car doors closed Iryna turned to me. \"I have one more surprise for you tonight, moya lyuba.\" Martin drove us back towards town before pulling off into a residential area just off I-4, and stopping in front of a little row of shops and restaurants. One had red curtains outside, and a sign proclaiming its name as 'Better than Sex'. It was a dessert restaurant, and we were sat in a cozy booth for two near the back. The light was low, the d\u00e9cor said sexy with style. The desserts themselves were decadent, and even the drinks came in candy-dipped glasses. \n\nIryna and I shared bites from our choices, and even more sweet kisses across the table. There was even another lesbian couple sitting just a few tables away, and we toasted each other from a distance. A few drinks and a ridiculous amount of sugar later we were stumbling back to the car, giggling and unable to keep our hands off each other. We kissed deeply on the sidewalk while we were waiting for Martin to pull around.\n\n\"Hey, aren't you that tennis player?\"\n\nIryna turned towards the speaker, her arms slipping away from my waist. \"Which one?\"\n\n\"Umm, shoot. Starts with a B, from like, Russia or somewhere. I've seen you, you're famous.\"\n\n\"Shit, yeah. Baraskova, Iryna Baraskova!\" One of his buddies chipped in, and moments later there were at least five cell phone cameras on us. The crowd closed in. I could hear people murmuring. \"Who is she?\" \"Some sort of sports person.\" \"Get a selfie!\"\n\nI could see panic forming in Iryna's eyes. She tried to hide it, but I knew it was there. She made no move to touch me, not even making eye contact. I so wanted to hold her, tell it was OK, but I didn't dare. I didn't want to make things worse. It felt like an eternity, but finally Martin arrived with the car. We ducked into the back seat as quickly as possible.\n\nIryna leaned her head against the window, eyes shut tight.\n\n\"Iryna?\" I put my hand on hers, but she pulled away. Tears burned in my eyes and I scooted the far side of the seat. Twenty minutes ago we were lost is each other, and now I felt like someone had shot me through the heart. The first sob escaped my chest, and I pulled my knees up and wrapped my arms around them. \n\nI heard a sob from my love, and she shifted in the seat. \"Oh, moya lyuba. Oh, what did I do?\" Her hand reached out and softly held the back of my neck. \n\nShe didn't pull me towards her. The part of me that had been hurt wanted to be left alone, to snap at her, to just curl up in a ball and weep. The rest of me, though, the part that loved her, wanted to throw myself into her arms. \n\nMy head turned slowly, and my eyes found hers. Their blue depths shone with pain and sorrow, and oh, god it was my fault. I'd been pushing her out into public, and now it's going to blow up in her face and she's going to hate me forever. \n\n\"Iryna, I'm sorry. I'm so sorry. This is my fault. I didn't think, please.\" Tears were rolling down my cheeks and I buried my face in my hands. \n\nIryna looked horrified. \"No! Oh, no, no.\" She put her hands on my shoulders, and turned me towards her, pressing her forehead against mine. The touch of her skin was too much to resist, and I let her pull me into an embrace. \"No, moya lyuba, it is my fault. You have nothing wrong. Nothing.\" \n\nMy arms went around her. \"But, I pushed you...\"\n\n\"No, you did not. Whose idea was tonight?\"\n\nGod, her arms felt so good around me. I gave in, letting myself lean into her, and she pulled me close. I could smell her perfume mixing with the heavenly natural scent of her skin. Her fingers wound through my hair, caressing the back of my head as I cried against her. \n\n\"This is my fault, moya lyuba. I told myself that tonight I would be with you, with no fear. And then I failed you. I was scared and selfish. I am so sorry.\"\n\nI laid my head on her shoulder, just resting against her. \"Don't be sorry. Tonight was wonderful, thank you.\" I love you. I tried to say it, really, but the words caught in my throat. My tears were still coming, though.\n\n\"Every night with you is wonderful, moya lyuba. Every night.\" I pulled myself in tighter and she kissed my temple. I couldn't help myself as a wide yawn escaped me, and I closed my eyes.\n\n\"Carrie? Carrie, we are home.\" Iryna was gently shaking me.\n\n\"Mmm, home.\" I started to climb back to consciousness, and I leaned on Iryna as she helped me out of the car and into the house. Once inside Iryna walked me back to the bedroom, where I flopped down on the bed. Iryna pulled my shoes off one at a time and I stretched my toes in relief.\n\n\"Sit up, moya lyuba.\" I leaned forward, and I heard Iryna unzip my dress. She lifted me to my feet, her incredible strength on display. My dress fell in a stiff bundle on the floor and I stepped out of it, leaning against Iryna as I did. She reached around and undid my strapless bra, tossing it onto a chair. She stripped off my panties and sat me back down as she slowly, carefully removed my stockings and garter belt. I felt a moment of sadness, I'd worn those special, I was planning on giving Iryna a show when we got home, before doing my best to make her head spin. But I was crashing from the sugar rush, and the several drinks I'd had were not helping. It was going to take everything I had just to get my bedclothes on before I passed out for good. \n\n\"Carrie, you need to wash your face.\" I groaned in exhaustion and leaned against her. Iryna turned my mouth to hers and kissed me deeply, and I felt a warmth surge through me. Then she tickled my side and I jumped away squealing. \n\n\"You're an evil woman, Iryna Baraskova.\"\n\n\"You are awake? Go use the bathroom and wash your face.\" Iryna was just smiling at me. \"And hurry back.\"\n\nBy the time I'd flushed the toilet and got rid of my makeup I was starting fade again. I walked back, still completely naked, and saw Iryna in panties and a T-shirt, her long, perfectly toned legs snapping me back to consciousness for a moment. Her back was towards me as I walked over, and I wrapped my arms around her, shivering at the warmth of her in my exhaustion.\n\n\"Here, moya lyuba.\" She had my little pink shorts, and I pouted a bit, but stepped into them, followed by a light tank. Iryna pulled the bed covers down. \"Now get in, I will be back in a moment.\" I slid between the fine cotton sheets. I tried to stay awake, but the softness of my pillow and the coolness of the linens lulled me towards sleep. I was dimly aware of a body pressing against mine, and an arm wrapping around me. No matter what had happened tonight, Iryna was still here, and I was with her. I held her arm close, finally abandoning my quest to fend off dreamland.\n\nThe morning sun Sunlight pulled me toward wakefulness, and that glorious arm was still wrapped around me. I'd rolled onto my back during the night, and as I slowly opened my eyes the most beautiful face in the world gazed softly at me. \n\nI stretched out my legs under the covers, feeling them slide against hers. \"Hi.\"\n\n\"Good morning, moya lyuba. Did you sleep well?\"\n\n\"Yeah. I was with you.\"\n\nIryna's sky blue eyes sparkled, and she leaned in to kiss me, and I felt my heart sing within me as she did. Something inside me knew I would never grow tired of kissing this woman. \n\nI went for my shower, enjoying the water. I was hoping Iryna would come in and join me, but no such luck. When I'd finished in the bathroom, I wrapped myself in the soft robe I'd been using here and went out into the bedroom, which was empty. I heard a voice from the kitchen, and I made my way there, following both that and the smell of coffee. \n\nIryna was sitting on one of the bar stools talking into her phone in French. I was a long way divorced from my two years of the language in High School, so I only picked up a few bits and pieces of the conversation. Giving up eavesdropping as a lost cause I went and stood by the coffee maker.\n\n\"Oui, oui, Je vous verrai ensuite.\" Iryna disconnected the call as I handed her a cup of coffee, along with the sugar and cream. \"Thank you moya, lyuba.\" She took a sip, inhaling the aroma.\n\nI sat down next to her, my knee gently touching hers. \"How many languages do you speak?\"\n\n\"Four. French and Russian, along with English. And Ukrainian of course.\"\n\nI drank from my own cup and tried not to sound interrogatory. \"So, who were you talking to?\"\n\n\"My agent. I will need to be in New York tomorrow to meet with her.\"\n\n\"Oh, OK. Do you know when you'll be back?\"\n\n\"Wednesday. I will not stay away long. I promise.\"\n\n\"It's OK. I understand.\"\n\n\"Now, let's have breakfast, and then you will help me with my exercises.\" \n\nI nodded, trying to keep my smile genuine while reaching to get some plates.\n\nIryna's knee really was improving, and she made her way through her prescribed maneuvers with ease. Afterwards she went for forty-five minutes on a stationary bike before doing her normal upper and partial lower body workout, a routine that made me sore just watching. \n\nBut seeing her muscles move and flex built a fire in me, and when she finished I practically dragged her to the shower, where I washed her slowly, admiring every contour of her body. Soon enough I had her dried off and laid on the bed, where I could admire my favorite part of her anatomy from very close range indeed. My tongue dipped and swirled as her flavor and aroma filled my senses, and soon she was shaking underneath me as I brought her to bliss. And then I did it again. The awkwardness of last night was fast becoming a memory, but It still niggled at the back of my mind. When it really came dow to it, what would she choose.\n\nA bit later we were curled up on the couch, watching the finals of whatever tournament was happening that week.\n\n\"My knee is feeling much better, I think.\"\n\nI leaned into Iryna's shoulder. \"That's great, sweetie.\"\n\n\"I should be able to walk more, and try other things. It would be a shame to be two months in Orlando and not see Disney World. Would that be fun?\"\n\n\"Sure! I haven't been there since I was fourteen.\"\n\n\"We could invite your friends.\"\n\n\"Cindy and Mitch? Yeah, we can do that. Want me to give'em a call?\"\n\nIryna nodded, and I grabbed my phone from the coffee table. I hit the requisite virtual buttons and put it on speaker.\n\nTwo rings and Cindy's bright voice answered. \"Hey, girl! How're things? How's Iryna?\"\n\nI looked up at her. \"I don't know, how are you?\"\n\n\"Mmm, very happy. Carrie was very nice to me this morning.\"\n\nMitch's voice sounded from a little farther away. \"That's my girl!\" I felt my cheeks burn red, but I ignored their comments. \n\n\"Iryna has something she wants ask you guys.\" Iryna gave me a fake scowl, but I just stuck my tongue out at her. \"It was your idea.\"\n\nIryna's eyes changed to a look of resignation, and I gave her a peck on the cheek. \"I wanted Carrie to take me to Disney World. I have never been. I was wondering if you would like to come. It will all be my treat.\"\n\nMitch answered with her typical enthusiasm. \"Disney World your dime? Hell yeah. Sign me up.\"",
        "Cindy pretended to be exasperated with her overly exuberant wife. \"Mitch, honey. When were you thinking?\"\n\nI finally spoke up. \"Next weekend?\"\n\n\"Oh, sweetie, we have plans with Mitch's parents next weekend. How about the weekend after?\"\n\nI looked up at Iryna, eyes wide with the question, and she nodded. \"That would be perfect. You can come on Friday and stay at the house, if you would like.\"\n\n\"Sure, that sounds great.\"\n\nWe chatted awhile longer, talking a little bit of Dawg's football. Embarrassingly I'd been so wrapped up in Iryna I'd only seen a few games this year., but I was able to contribute some. In the evening we went for a walk at a local park, and by the time we got back home Iryna's knee still was barely swollen at all, a fantastic sign. But it didn't escape me that the quicker she recovered the sooner she could leave. I gave myself an inward shake. She'd promised me October, and I'd trust her in that. \n\nWe made love slowly that night, enjoying each other's company as much their body. We used more fingers than tongues, so we could look into each other's eyes, which I loved. The intimacy was almost heartbreaking, and a tear or two escaped my eyes before we finished. \n\nAs the glow faded we gazed at each other, in what anyone not in love would call a disgustingly sappy way.\n\n\"Carrie?\"\n\n\"Yes?\"\n\n\"When I get back, as long as I am here, will you stay with me? I wish every night with \n\nyou.\"\n\nHer voice was soft and vulnerable, and I kissed her gently. \"Yes.\"\n\nHer smile spread over her whole face, and we melded our lips together. I love you. The words stayed away, somehow. I turned as she spooned me, drifting to sleep in her arms.\n\n***\n\nI ducked back into my prep room after finishing my three o'clock Monday afternoon and grabbed my phone. The screen lit up and I could see Iryna's text\n\nIryna -- Landed safely. Wish I had my Carrie with me. (kissing emoji)\n\nThat lovely warm, fuzzy feeling washed through me. \n\nMe -- I miss you too, or I will when I get off work. Call you tonight?\n\nIryna -- Please\n\nI closed my phone and looked at my schedule. One more hour before the long lonely evening began.\n\nI made it back to my apartment, which seemed oddly foreign all of a sudden. I had nothing in the house to eat, but I lucked out in that Sasha had made chicken, broccoli and rice. I gladly accepted her offer of some, sitting down on one of the bar stools with a plate.\n\n\"So no hot date tonight?\" \n\nI smiled sadly. \"She's in New York for a couple days. So, all alone.\"\n\nSasha shook her head. \"If I had a nickel...\"\n\n\"Truth.\" We giggled at the absurdity of it, and I chewed a piece of broccoli. \"Just \n\nFYI, I'll probably be staying there until she leaves, after Wednesday.\"\n\n\"How long is that?\"\n\n\"End of October.\"\n\n\"Mmm.\" Sasha swallowed her own bite. \"And then?\"\n\nI fiddled with my rice, looking down. \"She goes back to Europe. I come back home. It was always just a short term thing.\"\n\n\"Uh-huh.\"\n\nSuddenly I didn't feel very hungry, but I managed to get the serving I'd taken down. I read in one of the chairs while Sasha watched something banal on TV. I knew Iryna had people she was meeting, and I didn't want to interrupt her, but by eight thirty I couldn't take it anymore, and I excused myself to my bedroom.\n\nI touched her picture on my favorites list and held the phone to my ear, my heart beating like I was cycling hard uphill. \n\n\"Carrie, hello.\"\n\n\"Hi. Am I interrupting?\" I could hear the faint murmur of a public place in the background. \n\n\"Never, moya lyuba. I am just having dinner with my agent, and a few others. I will miss you tonight.\"\n\n\"I miss you, too. It feels weird to be in my own apartment. Where are you?\"\n\n\"It is called Jean-Georges, they say it is the best French restaurant in New York, but I would rather be with you at the Cracker Barrel, moya lyuba. They do not serve baked apples here.\"\n\nI laughed, remembering the look of pleasure on Iryna's face as I'd fed her the sweet caramelized fruit from my fork. I missed her terribly. \"You're coming home Wednesday?\"\n\n\"Yes.\"\n\n\"I'll be waiting. I don't want to keep you from your friends.\" My eyes welled up, but I kept my voice steady.\n\n\"OK, we do have things I need to talk to them about. I will see you soon, moya lyuba. Goodbye.\"\n\n\"Bye, sweetheart.\" Those three little words hovered on the back of my tongue, but I told myself I didn't want to say them over the phone. I pressed the red disconnect icon, laid down on my bed and stared at the ceiling. Sleep was slow in coming, and my dreams were overly active, and I awoke almost more tired then I'd been before.\n\n***\n\nTuesday night was easier. I had my tennis lesson after work, and I spent the evening packing for my month at Iryna's. I'd picked up a couple of boxes from Lowes for some personal items. I wasn't really taking a lot with me, just a few pictures, some books and stuff, plus my clothes, of course. And it wasn't like I was going to the other side of the planet, but It still took me several hours to make all the necessary decisions. I went ahead and lugged a box and a suitcase down to my car so I wouldn't have to do it in the morning. I'd just got back into my bedroom and flopped down on the mattress when my phone buzzed.\n\n\"Hi.\"\n\n\"Hello, moya lyuba. How was your day?\"\n\n\"Busy. Getting ready to ... um, ...packing up stuff.\"\n\n\"To stay with me?\"\n\n\"Yeah.\" My cheeks heated up, which I was glad she couldn't see.\n\n\"I am so looking forward to this, to being home with you.\"\n\n\"Me too.\"\n\n\"I, uh, I have a surprise for you.\" Her voice was slightly hesitant, but didn't lose its \n\nplayfulness.\n\n\"Really? The last one almost killed me.\" I heard her chuckle. \"And I want to try it again.\"\n\n\"We will, moya lyuba\"\n\nI lowered my voice to a husk. \"And I want them all inside me this time. Every one.\"\n\n\"Oh, Carrie, I will not be able to sleep tonight.\"\n\nI laughed. We spent the next hour talking, sometimes just about our days, other times about the delicious things we were going to do to each other as soon as we could be together. I found out that she had been there meeting with Nike, planning their upcoming ad campaigns, which would be filming in Paris in November, explaining why she had to be gone. We didn't talk too dirty, though, I wanted to save that for when we were together.\n\nEventually we said a reluctant goodbye, and my dreams were pleasant that night.\n\n***\n\nI literally got a speeding ticket driving home on Wednesday. I'd had a text after my last patient saying Iryna was home, and, well I wasn't really paying attention. The cop wasn't interested at all in my excuses, other than to point out my girlfriend would probably prefer I made it home in one piece as he handed me the paper. Oh well. \n\nBy the time I was pulling into Iryna's driveway I'd almost forgotten about it. I didn't grab my bag or anything else, instead just running directly inside. Iryna had been watching me from the dinning room, and met me in foyer. We slowed down just before crashing into each other, and we kissed fully and deeply. She lifted me up, and I wrapped my legs around her waist as she carried me effortlessly back to the bedroom. \n\nI'd managed to get the top of my scrubs off by the time she laid me down on the bed, and my simple white cotton bra followed quickly after. My head hit the pillow as her mouth found my right nipple and I gasped in pleasure. My hand slid behind her head and held her to me. Her mouth seemed to be trying to pull my entire breast inside, and I loved it.\n\n\"Oh, god, Iryna, that feels so good.\" Her arms slid under my back and she gripped my shoulders as she switched to the other side. Just to feel her skin against mine again was beyond heady. Her hands slid down my body, gripping the waistband of my scrubs while I kicked off my shoes. Iryna pulled them down, taking my cotton panties with them. Off went my socks, and I stretched out, gloriously naked as my lover towered over me. The hunger in her eyes made me shiver, no one had had ever looked at me like she does, the adoration mixed with desire, making me feel loved, cherished, beautiful.\n\nHer hands caressed up my legs, fingertips gliding over the tender inside of my thighs before gently spreading my legs. Her mouth descended on my sex, hovering for a split second before her tongue penetrated my folds.\n\nShe had definitely missed me; her mouth was everywhere on my skin, and I had no complaints as my orgasm soared toward me in record time. I was floating in a cloud as Iryna's tongue played beautiful music on my clitty. As I came back to earth I knew from her intensity that one time wasn't going to satisfy my love, and I settled back to take that wonderful trip again. \n\nAs my second orgasm subsided I pulled her in for a kiss, unbuttoning the shiny silk blouse she was wearing. \"No fair, you got to go twice. My turn.\"\n\n\"Your turn must wait a few days, moya lyuba.\"\n\n\"Aww.\" Mother nature can be a bitch. I got her blouse off and unclasped her front-loading bra. \"I can still play with these, though.\" I took a fair amount of time worshipping her breasts, and given her sighs and moans she was appreciating my efforts.\n\nIryna put her hand on my cheek and drew me up for a soul-searing kiss. \"But I can still give you your surprise.\" She stood and stripped off the hip hugger slacks she was wearing, giving me a lovely view of her behind, even if she left her conservative panties on. She pulled a handkerchief out of her nightstand and tied it over my eyes. \"You cannot peek, moya lyuba,\"\n\nI gave a disappointed sigh, but in reality my heart was pounding and I could feel the excitement leaking out of my pussy. I heard ruffling and metal clinking as Iryna moved around the bed. It took some real self-control to not lift my blindfold, but the last surprise had been so amazing I found the strength somehow. \n\nI felt her climb back onto the mattress. \"Get on your hand and knees, moya lyuba. I want to see that lovely butt of yours.\"\n\nI complied with a shiver. As soon as I was in position her hand gently spread my cheeks and her long tongue began to rim my little pucker, making me gasp and bury my head in the pillow while I moaned. \n\n\"Now Carrie, for the first part of your surprise.\" Her finger touched me, spreading a touch of lube. I felt something press against my bottom, hard and plastic. For a moment I thought it was the beads, but this was much larger, and It slipped inside me with a pop.\n\nI sighed and tried to adjust to the mass inside me, wiggling my butt in the air while Iryna gently manipulated the toy. \"It is too much?\"\n\n\"Huh-uh.\" I sighed, beginning to adjust to its fullness. There was a wonderful pulse of pleasure every time I contracted around it, and I could feel my body stretching to accommodate the lovely intrusion. \n\nWhile her thumb continued to lightly manipulate the base of the plug, her fingers began to run gently through my slit. \"And now, for the second of your surprise.\" She pulled her hand away from my pussy, and I let go a whimper of unhappiness at the loss of contact. My legs spread slightly as Iryna knelt behind me, gripping both sides of my hips. \n\n\"OHH!\" I cried out, my unseeing eyes widening as I realized what was happening, soft plastic pushing gently against the opening of my vagina. Iryna thrust gently forward. I moaned long and loud as the shaft filled me. A moment later Iryna's legs were touching mine, the strap on fully buried in my pussy. Slowly it withdrew, sliding against both my g-spot the plug in my ass. It came just shy of exiting completely before it slid in again.\n\nIn and out, slow, deep strokes, my breath ragged at each. The pleasure thrummed through me, intensified insanely by the plug. The joy just went on and on, thrust after thrust. By now I was wantonly pushing myself back against her, but she steadfastly refused to increase her tempo. Stroke, stroke, stroke.\n\n\"Please, sweetie, more, I need ... faster.\" \n\n\"You are liking this, moya lyuba?\" Her nails scratched gently down my back, making me shiver from head to toe. Stroke, stroke.\n\n\"Oh, God, yes, please, harder.\"\n\n\"No, but maybe this will be nice.\" Her hand slid around my side and over my belly, and two fingers scissored around my clit. I cried out, the combination of sensation making it impossible to think. She worked my clitty in rhythm with her thrusts. I didn't know how long we'd been at this, but it had to have been twice as long as any penetration session I'd ever before, and ten times as good. My thighs and pussy felt heavy and tense, desperate for release, and still the slow methodical tempo refused to push me over. \n\nTears soaked the blindfold covering my eyes. \"Please, baby, please, I need to cum, please, I need to cum so much.\" And slowly, mercifully, the pace began to increase. \n\n\"Oh, OH, OHH!\" Her fingers rubbing my clit went into double time, and the smooth strokes pushed harder, deeper and faster. My orgasm held off for an eternal moment as my entire body tensed in preparation, and then I simply came apart. Wave after wave, one after another, full body pulses of indescribable ecstasy as I screamed in joy and release. It just refused to stop. \n\nFinally, shaking and spent, I collapsed on the bed. The shaft slipped from my body, and after a gentle pressure the plug popped free, making me whimper. I raised a weak hand to my eyes and pushed off the blindfold, just in time to see Iryna slipping off the strap-on's harness, still wearing her blue cotton panties. Moments latter she was beside me, and I was in her arms, where I was born to be.\n\nMy whole body felt alive, joyful, and I reveled in the warmth of Iryna's presence. God, the power of this woman was overwhelming. I ran my fingers along her arms. \n\n\"I'm glad you're home.\" Understatement of the century.\n\n\"Me, too, moya lyuba.\" She pulled me tight against her. \"Any night I am not holding my Carrie is not a good night.\" She kissed me gently behind my ear. \"You make me so happy. I cannot remember being this happy.\"\n\nI turned and looked up into her eyes. \"Really?\" The love and peace radiating from her laid my soul bare. \"Iryna, I l...\" Rurururu. The last bit was from my stomach, which chose a very inopportune time to complain about my lack of dinner.\n\n\"Oh Carrie, I need to feed you.\" Iryna nuzzled into my neck and whispered. \"You get cleaned up, I will find something.\"\n\nAfter a long kiss, I stumbled into the bathroom and shower. I let the water wash over me. It was weird. This felt real, right. The two days I'd spent back at my apartment seemed like the dream, and a bad one fading quickly. \n\nThe night was lovely. We ate beef stir-fry over rice and cuddled on the couch. No more sex that night, or the night after but that didn't change anything. They were still wonderful nights, full of laughter and soft kisses. Being with Iryna was like breathing, so natural I didn't have to think about it. Throughout the day she'd send me little texts and emojis, and I'd respond with the same. They made me feel alive in a way that was so new to me.\n\nFriday followed the same pattern as last week, where Iryna ravished me immediately on my entrance, and then refused to accede to any of my advances the rest of the evening. Instead she put me through a slightly reduced form of the pre match workout she generally did while we talked through and visualized the match.\n\nAnd just like last week I was perfect on the court, winning easily and racing home for a long weekend with Iryna. I was able to take the entire length of the anal beads this time, and brace myself for the intensity of my orgasm, so I was able to enjoy it fully. \n\nIryna also showed me the full extent of the strap on she had bought. It had multiple interchangeable options, including one designed to be inside the wearer. There were a couple of narrower phalluses designed for anal, which I couldn't wait to try. \n\nIryna was over her monthly, so she was able to wear her half as she gently fucked me missionary style with a shorter, curved attachment that rubbed beautifully back and forth over my g--spot. Obviously I'd had sex in this position before, but this was so different, and it was all in her eyes. Iryna just held my eyes as she moved, and my heart broke at the gentle love in her gaze. Being able to look so deeply into my lover's eyes, well, it filled my soul.\n\nIt was a great weekend, and knowing that I wasn't going back to my apartment made me even more comfortable than I normally felt. As the week started it was even more wonderful. Iryna would get up with me every morning and make me breakfast, help me pack a lunch and kiss me goodbye as I left. I would about float out to the car. I almost didn't notice that sometime during that week the calendar switched to October.\n\nThe fact that Cindy and Mitch were coming to visit on Friday made me more incognizant of the passing time as well. Iryna seemed as excited to see them as I did. I got the text that they were on the way a little after four, just as I was heading home. As I walked into the villa I could smell something wonderful coming from the kitchen. Iryna was wearing an apron over tight little khaki shorts, the long length of her legs visible as she worked at the counter.\n\nShe was bobbing her shoulders to some unheard music, the tell tale white stalks of wireless ear buds visible under her blonde hair. She hadn't heard me come in, at least I didn't think she had, so I crept up quietly and wrapped my arms around her waist.\n\n\"OH! Carrie, you scared me!\" I watched her face morph from shock to joy. Joy, just at my presence. I leaned back, reveling in her beauty for a moment before closing my eyes and accepting her kiss. She didn't hug me back though, and when I looked out at her hands she wiggled her fingers at me. \"I cannot hold you, moya lyuba, I am handling bacon.\"\n\n\"What are you doing? I looked past her. She was making some type of lattice out of bacon, mirroring what was showing on her tablet.\n\n\"It is a meatloaf. I saw this on the menu at Cracker Barrel and wondered what it was. It is American 'comfort food', yes?\" The enthusiasm and innocent joy in her speech made me chuckle.\n\n\"Uh, yeah, it is.\" God, she's adorable. \"Course, you do realize that 'comfort' is American for 'fattening', right?\" \n\n\"Well, then we have to work it off tonight, yes?\" \n\nThe twinkle in her eye sent a shiver down my spine and straight into my, well, you know, so I needed a distraction. \"What can I help with?\"\n\n\"The potatoes need peeling.\"\n\n\"Aye, aye boss.\" I let my hand trail across her firm backside as I moved away, giving her a good squeeze and a wicked smile, knowing that she couldn't reciprocate. \n\nIryna hadn't been kidding, mashed potatoes and gravy and meatloaf. I was able to talk her down off the corn casserole she'd also been planning, opting for just regular corn. It was lovely, just working along side her, the little touches we shared, just like that first time. I was going to miss this. \n\nThe house smelled amazing when the doorbell finally rang. I dropped what I was doing and ran to foyer, pulling open the door to two stunned faces. \"This is Iryna's?\" Cindy was looking past me into the house, while I could see Mitch still standing out by their car staring.\n\n\"This old thing? Nah, just a rental. Her real place is much nicer.\" \n\n\"Seriously?\"\n\nI laughed. \"I don't know. Maybe. But you should see the shower in here.\"\n\nMitch lifted their bag out of the trunk and pulled it up the walk. \"Hey Carrie. Nice Digs. \"\n\nI laughed. \"Thanks, come on in. Iryna's in the kitchen. I hope you're hungry,\"\n\n\"Always. Damn.\" Mitch got her first look around inside. I heard the sink running, and then Iryna made her appearance, drying her hands on her blue apron, a huge, excited smile on her face.\n\n\"Hello! I am so glad you could come!\" \n\nCindy went over and gave her a hug. \"Hi, this is lovely.\"\n",
        "\"It is okay. Someday, you will visit my flat in Monaco. The view is much better there.\"\n\nMitch flopped down on the big sectional. \"It's a date. That smells amazing, too. What'cha cookin'?\"\n\n\"You are the chef. Come, I will show you.\"\n\nMitch bounced up and headed into the kitchen. Cindy gave me a big hug. \"How're you doing?\"\n\n\"I'm good.\" Cindy tilted her head and smirked like she didn't believe me. \"No, I am really. Iryna's great, her knee is getting better every day.\"\n\n\"And that's a good thing?\"\n\nMy voice dropped. \"Of course it's a good thing. I'm not that selfish.\"\n\n\"I'm not calling you selfish. But,...\"\n\n\"I know. Trust me, I'm fully aware of it.\"\n\nCindy took my hand and led me over to the couch. \"Sit down.\" I dropped onto the seat and laid my head back against the cushions. I could hear Mitch and Iryna bustling around the kitchen, and I looked over my shoulder in that direction. Cindy sat down next to me and followed my eyes. \"So you're okay with her leaving?\"\n\nI stared down at my knees. \"Does it matter? She's going to anyway.\"\n\n\"Sweetie, I've been worried about you. What do want out of this?\"\n\n\"Me?\" I breathed heavily and shrugged. \"I, um... I want to have a chance, y' know? At a normal-ish life? I want to come home to her, or have her come home to me.\" Cindy nodded, but didn't say anything. \"I know what I don't want. I don't want to see her three times a year.\"\n\nIryna poked her head in from the kitchen. \"Hey everyone, dinner is ready in five minutes.\"\n\nMitch followed behind. \"Honey, can you and Carrie set the table? This smells amazing and I want some.\"\n\n\"Sure, sweetie.\" She stood up and offered me a hand. \"Come on. But we're not done with this conversation.\"\n\n\"I know.\"\n\nDinner was excellent, if a little heavy. Soon enough we were all sitting back groaning. Mitch patted her belly. \"You said that was the first time you made meatloaf?\"\n\n\"Yes. It was ... ah ... OK?\"\n\nMitch pointed at the center of the table. \"Girl, is there any left?\" We all laughed, looking at platter. Saying it had been licked clean would be an exaggeration, but not by much. It really had been very good. The potatoes were excellent, too. All in all, a lovely fat and carb fest. \n\n\"I want a tour of the palace.\" Cindy raised her wine glass. \"Including that shower Carrie keeps mentioning.\"\n\n\"Hear, hear!\" Mitch indicated her approval and we all set off. Everyone was highly jealous of the home gym and our ridiculously awesome ensuite. We showed them the guest room, this time with more than one wall separating our bedrooms, and finally out onto the back patio and to the pool.\n\n\"Oh that's amazing.\" Cindy gave her wife her most fetching smile. \"Honey, can we get one of these?\"\n\n\"You're the banker. You tell me. I'd be for it. Too bad the sun's going down.\" \n\nIryna went over to a tall pole and threw a large switch, bringing up the floodlights, fully illuminating the area. \n\n\"I'm getting my suit!\" Mitch ran back inside. Cindy looked at Iryna for permission, and then followed after her wife.\n\nI stepped over to Iryna's side and slipped my hand in hers. \"We should probably go get ours, too.\" My lover looked down at me as the sun set behind us. She turned me towards her and my heart thudded in my chest as she lowered her head to kiss me. \n\nMy eyes closed and my arms wrapped around her as our tongues found each other, and I lost myself in her for a beautiful moment.\n\n\"Iryna?\"\n\n\"Yes, moya lyuba?\" She kissed me again, then on my cheek, and then behind my ear.\n\nI shuddered. \"We need to get our suits.\" She smiled softly at me, running her hand through my hair, wearing that look that made me want to weep with joy. Her fingers entwined in mine and we walked hand in hand back to our room.\n\nSomehow we managed to get into our bathing outfits without further hanky-panky, mostly because I took my green and black one-piece into the bathroom and locked the door. When I came out I was expecting Iryna to be in her white string bikini, but she wasn't. She was also wearing a one-piece, shiny deep blue and more conservative even than mine.\n\n\"No bikini?\" \n\n\"I only wear that for you. She smiled shyly. \"I buy it for sunbathing. Ukraine is actually a very conservative place, after all.\" \n\nWe grabbed some towels and headed back out to the patio, where Mitch and Cindy were sitting on the edge of the pool, with Cindy leaning her head on her wife's shoulder, their arms linked together. \n\nI called out as we came closer. \"Hey, guys.\" \n\nCindy turned. \"This water's amazing, Iryna. It's so warm.\"\n\nMitch stood up and dove smoothly into the pool, surfacing quickly and splashing her wife who squealed and covered her face. \"Yup, everybody in!\"\n\nLying in bed that night, wrapped up in Iryna's arms, I thought about my friends down the hall. Not about what they were doing, perv, but about what they have. Could I ever have that? What that is even possible with Iryna? \n\nThe dreams had started to come back, where I'd try to touch Iryna and she'd dissolve into so much mist. Sometimes I didn't even always remember them, but at least once this week I'd woken up crying. Iryna had been right there, holding me and shushing me back to sleep. When she'd asked me what I'd been dreaming about I'd lied to her for the first time, and it made me sick.\n\nTonight there were more dreams, and I was restless. We hadn't made love, both being tired and a big day coming with the morning. I wasn't fussed about that, sex was not our problem. I looked up at my alarm clock, which read a disconcerting three twenty-five AM. Iryna's arm was draped over me, and I held on to it. \n\nI thought back to the moment I met her, seeing her in the massage room for the first time. In a way, I felt my life started that day, all my memories before then seemed darker somehow. I tried to force myself to think of good things. The first time she kissed me, the first time I woke up in her arms, the way she looks at me. Somehow, I found sleep again.\n\nThe sky was just starting to lighten beyond the window when I awoke again. Iryna's finger was trailing slowly up and down my arm. I'd turned towards her sometime during the early morning, and she'd propped up on her elbow looking at me. \n\n\"Good morning, moya lyuba.\" \n\n\"Mmmm, Hi.\" I reached up and touched her cheek before running my fingers through her hair. \"You're so beautiful.\"\n\nThe smile that spread across her face melted me. God, how I loved her. I met her kiss with passion. She moved down my neck, her lips pressing softly against my skin. I sighed. \"What time is it? \n\n\"There is time for this, moya lyuba.\" Her hand slid up under the little pink top I'd been sleeping in, making me gasp as she held my breast, thumb and forefinger gently massaging my rapidly hardening nipple. She continued to kiss down my chest until she reached the fabric, which a moment later was laying on the floor next to the bed. Her mouth found my breast, pulling as much of it as possible into her warmth, and making me push my chest up against her, seeking more. \n\nI laid back into my pillow, my fingernails scratching lightly over Iryna's back and shoulders as she pleasured me. She moved down my stomach and stripped off my shorts, moving down between my legs, which opened unhesitatingly to her. She laid a powerful kiss to the inside of my thigh. \"Do you know how beautiful you are to me, Carrie?\" She repeated the pressure on the other side. \"How much I love being with you?\" Another kiss. \"Holding your hand?\" One just above my sex. \"Making love to you?\"\n\nWith that her mouth descended, her tongue diving between my lips. \"Oh, Iryna.\" I sighed and lifted my hips to her as she feasted upon me. My body and mind swam with pleasure. Our fingers found each other and intertwined, while her other hand gently caressed my stomach and breasts. Iryna built my pleasure perfectly, and when the two fingers she slipped inside me found that special spot I exploded in ecstasy. My lover drew out the moment expertly, just as she always did. And moments later she was in my arms, our lips pressed together. \n\nEventually, she pulled away. \"Carrie, today, we will be in public, and I may be recognized.\"\n\nI felt my smile slip as she spoke. \"I know, I'll try to keep my hands to myself.\" \n\n\"No, you do not understand. I want you to feel free to touch me.\"\n\n\"Really?\"\n\n\"Yes. I do not care if they see us together. If you are OK with this, then so am I. It is why I went to New York, to tell my agent that I was a lesbian; that I no longer wished to hide who I was. I also met with Nike, who sponsors me. They deserved to know. We are shooting in Paris in November. If they wish to change this, I must give them time.\"\n\nMy mouth was hanging open. \"What did they say?\"\n\n\"My agent will have calls to make. I may lose some sponsorships, but not too many. Nike says they do not care; it changed nothing for them. There may also be backlash from Ukraine Tennis Federation.\"\n\n\"I'm so proud of you.\" I pulled her down into a kiss, which she returned for a moment before pulling away a few inches.\n\n\"Thank you. But you must understand. People may find out your name, it could be on the news. I don't think that is likely, but...\"\n\n\"I don't care, Iryna. I'd do anything to be with you. Anything. Do you understand?\"\n\nTears shone in my love's eyes as she nodded. \"I will not fail you again, moya lyuba. I promise\" \n\n\"I know. I trust you. Now get over here.\" I scooted down the bed and pulled her knee over my head. This had become my favorite way of giving pleasure to Iryna, there was something about the primal nature of it, feeling the weight of her on me. I wrapped my arms around her powerful thighs and pulled her down to my salivating mouth. My lips wrapped around her sex, my tongue running along the sensitive folds as the powerful athlete above me shuddered under my touch. Her breasts rose and fell in rhythm with her increasingly ragged breathing, and her beautiful blue eyes closed as her mouth opened in pleasure. \n\nI kept working, reveling in her flavor as I pulled her clit into my mouth. The only disadvantage was that it was hard to penetrate her from this position, but I'd found that one little spot just under to the left of her pearl made up for it. My tongue caressed it, and she cried out as I drove her over the edge. \n\nA long, slow shower followed, with much use of hands and fingers for washing and, well, other things, but we managed to make it out to the kitchen before eight o'clock. Mitch, quite on her own initiative, had thrown together a light breakfast, and the doorbell rang at a quarter till nine.\n\nWe exited the villa to see Martin standing in front of the same white stretch SUV that I'd first seen him driving. Cindy just walked forward with a dazed look on her face. \n\nMitch was more effusive. \"Now that's what I'm talking about!\" In moments we were all inside and on our way to the Magic Kingdom. Iryna reached into her shoulder bag and pulled out an envelope, giving each of us a lanyard with a VIP pass attached.\n\nMartin took us directly up to the front gate, and we were able to enter past the huge lines. It was lovely Saturday, and the place was sure to be beyond packed. I felt a little guilty about the line jumping, but I got over it. \n\nAs soon as we were inside Iryna made a beeline for the first gift shop that she saw, pulling me behind her as she went. She cooed over the stuffed characters and princess outfits, but the only thing she bought, this time at least, were two pairs of Mickey Mouse ears. She had one of them pinned into her hair before we even got back outside. \n\nMitch and Cindy were waiting for us. As soon as we appeared Mitch looked at her wife. \"You owe me dinner.\"\n\n\"Yeah, yeah.\"\n\nI laughed. \"What?\"\n\n\"Mitch said it'd take less than half an hour for Iryna to be wearing the ears.\" Cindy pointed to Iryna's new accessory. \n\nI took Iryna's hand. \"Was that even in question?\"\n\n\"I have a pair for you also, moya lyuba.\"\n\n\"Oh what the hell, give 'em here.\" Soon my own mouse ears were attached to my \n\nhair, and we were ready for our day. \n\nNow, anyone who has been there will tell you that it is literally impossible to see everything in Disney World in a day, but with Iryna it was not for lack of trying. Our VIP fast passes let us get through rides without waiting for hours, and we got see a lot of characters. Several sweet photos resulted, including a great one of Iryna and I each kissing one of Goofy's cheeks while he covered his mouth adorably with his hands.\n\nWe did Space Mountain, of course, but I didn't care as much for that one, because I couldn't sit next to Iryna. We also did Pirates of the Caribbean and Splash Mountain, which Iryna had no frame of reference for, having never seen Song of the South. I also loved the Tower of Terror, 'cause it gave me a great excuse to hold on tight to Iryna. \n\nYou're probably wondering if Iryna got recognized, and the answered is yes. She stopped several times for autographs and fan selfies. Despite this, she was always holding my hand and stealing kisses in line. We also had a running gag counting how many times Mitch got called 'Sir'. There was only one negative experience, when some jackass called out to his friends \"Hey look! A bunch of dykes! Even that one! That's a chick!\" \n\nSecurity appeared a moment latter and led him away, and we waved as I held Iryna tighter. By half past six the sky was starting to turn purple and Iryna was leading us back toward's Cinderella's Castle. \n\n\"We have dinner reservations.\" We entered a huge dinning room with massive vaulted ceilings and archways. Cinderella, Belle, and Aurora were all working the room, giving us the opportunity for few more great pictures. Cindy got particularly excited about a picture with Belle, her favorite princess from when she was a girl. \n\nWe made it out for the big final show. I mostly watched the expression on Iryna's face. I was constantly amazed at the wonder with which she saw the world, the innocent joy on the face of a woman whose family had disowned her just for being different. How was that possible? It was just who she was.\n\nThe ride home took some time, and Iryna put her head in my lap and fell asleep while I gently stroked her hair, my beautiful girl. \n\n\"Is she out?\" Cindy sat across from me, leaning against her wife's shoulder.\n\nI watched Iryna's measured breathing. \"Yeah. I'm pretty sure.\"\n\n\"Have you told her yet?\"\n\n\"What?\"\n\n\"That you're in love with her.\"\n\nI opened my mouth to protest, but looking at her, innocently sleeping on my thigh, there was no point in lying. \"No.\"\n\n\"Sweetie, why?\"\n\n\"She hasn't said it to me yet.\"\n\nCindy put her arm around her love, looking into Mitch's bright blue eyes before turning back to me. \"Sometimes you have to take the chance. Take it from someone who almost blew it, waiting too long.\"\n\nMitch nodded. \"Somebody always has to say it first, Carrie. I mean, are you okay with her leaving? Without telling her?\"\n\nTears were forming in my eyes. I couldn't say anything so I just shook my head. \n\n\"Just tell her. She deserves to know.\"\n\n\"Ok, I promise. I will.\" I ran my fingers through my love's hair again and again, as she snuggled sleepily against me. Cindy was right. I knew, deep in my soul, that I would never love anyone again the way I loved Iryna Baraskova. But I couldn't see how I could keep her, how two months with me could fight against a lifetime spent pursuing greatness on the court. She was going to leave, and shatter my heart in the process, and I couldn't blame her for it. All I could do was hold her now, and in all the vanishing number of moments we had left."
    ],
    "authorname": "JCMcNeilly",
    "tags": [
        "romance",
        "lesbian",
        "lesbian sex"
    ],
    "category": "Lesbian Sex",
    "url": "https://www.literotica.com/s/the-tennis-star-ch-03"
}
{
    "title": "Delayed Action",
    "pages": [
        "\u00a9 C.B. Summers 2011\n\n*\n\nI prepared for battle on my unmade bed. I deployed howitzers and pillboxes on the pillow highlands, drove tanks and half-tracks from the rear lines near the footboard, into attack formation, and patiently placed every little plastic soldier in their positions on the battlefield. Some were formed up into skirmish lines behind the folds of fabric; others manned machine gun nests formed out of socks. I placed the officers carefully, so they could observe the battle through their tiny little binoculars. I knew some of these men by name... Joe, Hans, Ben, Kenny... but they were all my friends. When I was done, they awaited my orders to assault the front lines of plastic razor wire.\n\nI looked down at the scene, proud of my accomplishment... but I was only half finished. Now I would spend hours playing out the battle slowly, leading each man to death or victory, all the while seeing the entire battle vividly in my imagination.\n\nI'd done it that way for years and years... but this time... I felt the urge to just blast them all to bits with hand explosions and pillow bombs... causing carnage in a couple of minutes. That wasn't like me. Something had changed.\n\nI was growing up.\n\nAs I overlooked the battlefield, I wasn't thinking about my men, I was thinking about Millie Danvers. Just the thought of her made my heart beat faster, and my breath catch in my throat. \"Millie,\" I mumbled under my breath, and then let out a sign. She was so beautiful... and so aloof. I was pretty sure she didn't know my name. I was the new kid in school, and way too shy to talk to her. I sat behind her in Algebra 2 every weekday for the last four months, smelling her perfume and looking at the wispy little hairs on the back of her neck. She had a cute, round face, curly brown hair, and the fourth largest pair of tits in the junior class.\n\nWe were strangers to each other. But in spite of this, Millie and I had somehow formed a perplexing and exciting arrangement... a weird little private connection that neither of us acknowledged. It had started a few weeks before. One day in class I'd slouched down in my seat and my knee came to rest against something soft. I'd worn shorts that day, otherwise I might not even have noticed. It took a few seconds to realize what it was... Millie's ass! My bare knee was nestled in between her beautiful butt cheeks. I could feel them perfectly, one round, silken cheek on either side of my kneecap. I had been watching her ass for weeks in gym class. I could hardly believe that I was actually touching her bottom! I instantly got a boner. It grew until it was pressing against the underside of my desk. I didn't move. I just left it there, expecting at any moment for her to slide forward, putting her ass out of reach. But she didn't move for the rest of the class. I thought she probably didn't notice. It was heaven!\n\nAfter that I began to wear shorts all the time, and every day I'd slowly slouch forward until my knee was nestled between her cheeks. She never moved away. On the third day she was wearing low cut jeans. I could feel the bare skin of her ass cheeks with my knee! She had to know my knee was there, so I was now certain that she enjoyed it too, even though she never so much as made eye contact with me. Feeling bold, I began to move my knee around. I would go side to side, slowly traversing the crack between her beautiful butt cheeks. God, I loved her ass! I wanted to touch it with my hands, to kiss it, to rub my boner back and forth across it. But I was afraid to say anything to her. If I did, she'd probably put a stop my little butt-cheek excursions. Every day after class we went back to ignoring each other entirely, while I yearned for her from afar.\n\nJust thinking about Millie was giving me a hard on. It was so weird to be thinking these thoughts! Only a year ago I hated girls. Now I could barely think when they were around. All thanks to those pills, I guess. They'd made me grow almost a foot taller in the span of a year, and my penis, which used to be tiny and hairless, had grown large and long, wispy pubes covered my dangling balls. My penis was always getting hard at the most inopportune times. The doctor had warned me about this. It's all a part of puberty. He knew I'd been home-schooled by Mom most of my life, and was a bit out of the loop sex-wise, so he gave me a little sex education pamphlet. It was not very thorough... it actually brought up more questions than it answered. It touched on the subject of masturbation, but didn't explain exactly how to do it; only saying it was perfectly natural. Ever since I started school I'd been hearing all sorts of bawdy talk in the boy's locker room, but it was like the kids were speaking a foreign language. I was to embarrassed to admit that I didn't know what they were talking about. I just laughed along, and tried not to be noticed.\n\nPicturing Millie's sweet ass, I took out my cock and began to stroke it. I felt a little embarrassed to be doing this in front of my old friends, but it felt good anyway. I hadn't figured out yet that rubbing it with some sort of lubricant felt better. I was so sensitive, that within a few minutes, the sensations got too powerful. I had to stop. That's what always happened. I just didn't get it. The guys at school seemed to enjoy 'jerking off', but I found it terribly unsatisfying and frustrating. I knew, from the pamphlet, that I was supposed to ejaculate semen, but that never seemed to happen for me. I put my cock away and tried to concentrate on my battle.\n\nBut... I just stood there and stared at the battlefield. I felt sometimes like a bomb had fallen on me a year ago in that doctor's office, but this bomb had some kind of delayed action fuse in it, which could go off at any time... but when? The suspense was killing me.\n\nI heard a honk outside, so I looked out the window and saw a car pulling away. A tall brunette was standing on the curb, waving at the car. She turned and I saw her face. Laurie Bonner! What was Laurie Bonner doing in front of my house? I wouldn't have been more surprised if John Wayne had been standing there instead.\n\nLaurie was a senior at Malvado Playa High School. I recognized her because she was one of the majorettes of the Wildcat Marching Band Colorguard. The guys in the locker room called her Laurie 'Boner', because she was so beautiful and had such big tits and long legs. Personally, I loved her face most of all. She was one of those girls who always seemed crazy happy about everything. She had tons of energy and school spirit, and she was always laughing loudly in the lunchroom, and doing impromptu routines as she went from class to class, pantomiming that she was spinning her flag around and throwing it way up in the air and catching it. She was kind of crazy, actually. She didn't know me, and I didn't know her. We didn't have a single class together. About the closest I'd ever come to her was watching her do her routines at the pep rallies, and following her around the hallways, my eyes locked on her beautiful ass.\n\nWhat the heck was she doing in front of my house? And what the heck was she doing walking up to my door and ringing the doorbell?\n\nThen I knew! Shoot! Mom had been talking about getting me a tutor for weeks. My grades were just fine, but Mom was bothered that I'd been put in the junior class instead of the senior class when she enrolled me. I guess she thought I needed to catch up. I couldn't convince her that I was just fine being a junior. I fit in a little better. I would probably have fit in even better if they'd made me a freshman, because I was so short, and looked so young.\n\nI cracked my bedroom door open and listened to Mom letting Laurie in.\n\nMom's cheerful, but edgy voice said, \"Well hello! Come in! I'm glad you could make it.\"\n\n\"Oh, no problem.\" I loved Laurie's voice. It was slightly husky, probably from all the yelling she did at pep rallies and sporting events.\n\n\"Call me Diana.\"\n\n\"Hi. I'm Laurie.\"\n\n\"Nice to meet you, Laurie. You come highly recommended.\"\n\n\"Yeah? I don't know what they told you, but I haven't tutored before.\"\n\n\"Oh, I know. But you have very good grades. You've got a perfect 4.0, right?\"\n\n\"Sure. I'm pretty good at school. My dad thought I'd make more money as a tutor than working at the fast food joint, so I thought I'd give it a try. I'm saving up for a car. I'm pretty sure I'll do a good job. And if I don't, you can fire me.\" She laughed a hearty laugh. Mom didn't laugh back. She had no sense of humor at all.\n\n\"Can I get you something to drink?\"\n\n\"No, I'm okay. So, who am I tutoring?\"\n\nAs they were speaking, I'd crept out of my bedroom and down the hall until I could see the two of them reflected in the hall mirror. Mom was standing with her back to me. Laurie was leaning against the door. Mom was so nervous that she neglected to offer Laurie a seat, so the poor girl had to stand there awkwardly in the entryway, holding her heavy book bag.\n\n\"Well, Laurie, perhaps you already know my son, Billy? He's a junior at your school.\" Laurie shrugged. \"No? Well, I guess that's not surprising. He started just this year.\"\n\n\"Yeah?\"\n\n\"I home-schooled Billy until... I... well... until I decided to give it up last year. He should be in the senior class, but I didn't do a very good job, so they put him in the junior class. It's probably too late to advance him, but still...\"\n\n\"He needs help?\"\n\n\"Yes. I think so anyway. Billy might have a different opinion, but there's no such thing as too much education, as far as I'm concerned. You'll have to find out from him what he needs work on. What I did wrong... I did such a lousy job teaching him, I just don't want to...\" Suddenly Mom burst into tears. I rolled my eyes. Drama queen. \"...I'm just not qualified to help him. I don't know why I thought I could do it...\"\n\nLaurie looked at her, trying to be compassionate, but I could see in her blue-gray eyes that she thought Mom was a nutcase. \"Oh, I'm sure you did the best you could. But don't you worry. I'll whip him into shape.\"\n\nMom nodded, trying to stifle her sobs. Then she said, stiffly, \"I'm going out tonight. Can you stay for a while? Until I get back?\"\n\nLaurie looked confused. \"How long? I thought this was just for an hour.\"\n\n\"No, I was hoping... maybe... until eleven?\"\n\n\"Four hours? I... I guess so. You pay by the hour, you know.\"\n\n\"Sure, I understand. If you can, please stay until I come home. I might be a little later than that... maybe as late as midnight... would that be okay?\"\n\n\"Sure. I could use the dough.\"\n\nI realized with shock that Mom hadn't hired me a tutor at all... Laurie was my babysitter! Mom had to go out that night to visit her sister in the hospital, who'd just woken up from an operation. It was a long drive, but she was terrified of driving in rush hour traffic. Mom never went out, but apparently she couldn't stand the thought of leaving me home alone. Dang her! She just couldn't face the fact that I wasn't a kid anymore. Mom had a terrible time letting go of things.\n\nBut I calmed myself by looking at Laurie in the mirror. Mom went through her idiotic house rules, and Laurie listened with a bright expression of sweet innocence on her lovely face. She kept brushing back her long brown hair behind her ears. It was an oddly sexy habit. While Mom was giving her the important phone numbers, she glanced up and saw me staring at her in the mirror. God, her eyes were beautiful. She gave me a weird little smirk. I loved the way her lips turned up on the right side for that smirk. I could look at that smirk all day long.\n\nIf I had to have a babysitter, I was glad it was Laurie. I'd watched her at football games spinning a flag around while wearing a tight sequined outfit with a small top and short shorts, her long, straight brown hair flying around as if it were weightless. I liked looking at all those girls, but I think Laurie was my favorite. Probably because she had pretty big boobs, and they bounced around a lot as she did her moves. And she was taller than the other girls. She was almost six feet tall.\n\nMom called my name, so I walked into the living room.\n\n\"Billy, I have a surprise for you.\" She smiled a tense smile. Her eyes were still puffy from crying. \"Laurie is going to be your tutor. Or, I should say, we're giving her a trial run tonight.\" I shrugged and sat on the couch. Mom almost burst into tears again, but she grabbed her purse and said, \"I'm going to the hospital now. I'll try to be back by eleven.\"\n\nLaurie locked the door behind her, as Mom had instructed her to do. She looked out the curtain and watched Mom getting in her car and starting it up. I sat transfixed as the headlights played through the window, illuminating Laurie's curvaceous body. Wow, Millie had nothing on this girl. I pulled a pillow onto my lap to hide the boner I felt coming on. Laurie watched Mom's car until it went out of sight as I gawked at her body. She was wearing a fuzzy pink sweater, with a wide, loose collar. It was form fitting, and really enhanced the shape of her breasts. She was also wearing tight designer jeans, with a low waist and a decorative pattern on the legs made out of little sequins. Dang, her ass looked sweet in those jeans!\n\nThen she turned to me, the sweet innocent expression gone from her features. She put her hands on her hips a said, \"How old are you?\"\n\nI couldn't lie. \"Eighteen.\"\n\nShe smirked, \"No, really.\"\n\n\"Really. I'm eighteen.\"\n\nShe looked at me like I was crazy. \"No way are you fuckin' eighteen.\"\n\n\"Well, I am.\"\n\nSuddenly her face lit up, \"Oh fuck! You're the... the kid with the, what? Late puberty thing! I heard about you! Oh shit, they said you were pale and... well, here you are!\"\n\nDang. I didn't want anybody to know about that. It was a bit of a shock to learn that everybody already knew my secret already. It felt weird to know that people were gossiping about me.\n\nLaurie sat down excitedly across from me. \"So freaky, dude. You look fourteen, tops!\"\n\nI sighed. \"I'm eighteen. I'll be nineteen next month. But have delayed puberty. The doctor says I'm physiologically equivalent to a fourteen or fifteen year old. But I'm really eighteen.\"\n\nShe shook her head, smiling in amazement, \"Weird. How about mentally?\"\n\nI had to think about that one. \"I don't know. All I know is that I've been alive eighteen years, so that makes me eighteen. Lots of people have delayed puberty. It usually gets caught before mine did.\"\n\nShe smirked, \"So, if you're eighteen... why do you need a babysitter?\"\n\nI felt a little flash of anger, \"You're my tutor, not my babysitter.\"\n\nShe laughed gaily, \"Yeah. Horseshit. Your mom said your grades were fine. So you don't really need a tutor, do you?\"\n\nShe had me there. \"No. I have A's in everything except gym class. Mom thinks my grades were too poor to be made a senior, but the truth is, I asked them to make me a junior. I thought, considering the way I look, I'd fit in better as a junior.\"\n\n\"Do you?\"\n\n\"No. I don't fit in anywhere.\"\n\n\"But you have good grades, so that proves my point. I'm your babysitter. End of discussion. I'm going to feed you, and give you a bath, and tuck you into bed, and read you a bedtime story, and kiss your widdle nose and turn out the light... unless you're afraid of the dark.\"\n\n\"I'd rather you didn't tease me.\"\n\nShe laughed like crazy. \"I'm just fuckin' with you, Billy. Hey, I don't mind. Tutors get paid more than babysitters. I'm saving up to buy a car. My dad says he'll pay half if I pay half.\" She sat on the arm of the couch. \"But that's pretty weird of your mom, don't you think? You're not a troublemaker are you?\" There was a twinkle in her eye. I got the impression she would have liked it if I were a troublemaker.\n\n\"No. My Mom is... a little over protective.\"\n\n\"She's a basket-case, you mean. What's her deal?\"\n\nMan, this girl was perceptive. Nothing got past her. \"She blames herself for not noticing my condition all those years. A TV repairman, of all people, was the first person to realize something was wrong. I told him I was sixteen but I looked twelve to him. He pointed it out to her so she took me to a doctor. Sure enough, I had some kind of condition that had delayed my puberty. It took a while to find the cause, but it turned out not to be anything too terrible. I started taking pills and I've been growing like a weed ever since. You should have seen me a year ago. I was tiny.\" Of course, considering that Laurie was eight inches taller than me, I still looked pretty tiny to her. \"Mom beats herself up every day for not noticing my problem.\"\n\n\"So she stopped home-schooling you.\"\n\n\"Yup.\"\n\nA compassionate expression crossed her face, \"Wow, that must have been a real mind trip. Going from home school to straight into general pop? I bet it's hard.\"\n\nI don't think she was referring to the boner I was hiding it under the pillow. Yeah, that was definitely hard.\n\n\"I guess so. I don't have any friends... yet.\"\n\nShe plopped down on the couch next to me and said, \"I'll be your friend.\" She stuck out her hand to me and said, \"Laurie Bonner. How-de-do?\"\n\nI shook her hand. The feeling of her soft skin was electric! \"Howdy, miss. I'm Billy Pantier.\"\n\n\"It's an honor to make your acquaintance, Billy Pantier,\" she said with a comical bow.\n\nI smiled. I think that was the longest conversation I'd ever had with a girl before. I'd never had any exposure to girls when I was home-schooled, so I had no idea how to talk to them, or how to deal with my raging lust for them. But something about Laurie put me at ease.\n\nThen she said, \"So, Billy Pantier, here's the deal... It's your choice. I can either be your tutor...\" She unzipped her book bag and showed me a stack of books inside. \"Or, I can be your babysitter.\" She zipped the bag closed again, and looked at me expectantly with her hand still on the zipper.\n\n\"I guess... if you don't tell anyone, I'd rather you be my babysitter.\"\n\n\"Good!\" She tossed her book bag toward the door and kicked off her shoes. She tucked her knees up against her chest and said, \"What's on TV?\"\n\nI was a little bit shocked and surprised that this beautiful girl was sitting on the couch with me, watching TV, but I tried not to let it show. We flipped channels and decided on a program to watch, and casually chatted for a while about this and that. Nothing important. What kind of music we liked and how stupid parents are in general. My boner went away after a while, much to my relief. It had a mind of it's own, sometimes.\n\nAs we watched TV, she began to quiz me on my condition, so I told her what I knew, although I'd really not taken that much interest in the facts of my illness. Laurie found the medical details fascinating. She said she was planning to study medicine in college. She seemed authentically relieved to learn that the underlying condition was nothing particularly horrible, just a hormone deficiency that could be treated with pills.\n\nAfter that I started getting the feeling that Laurie was anxious about something. When the sitcom we were watching ended, she got up and started snooping. She hopped around and playfully opened every drawer she could find in the living room and the adjacent den. She seemed to be looking for something, but I just watched quietly, enjoying the way her body moved. She had so much energy it was amazing just to be near her. After a while she give up on her search. She looked over at me and seemed to be trying to make up her mind about something. \"Are you a snitch, Billy?\"\n\n\"What?\"\n\n\"Are you a tattle tale?\"\n\n\"No.\" I said, as firmly as I could muster. I had no idea what she was thinking, but I desperately wanted her to like me. Not that I had some kind of wild idea she'd actually be my friend at school. I knew that we could only ever be friends here in my house, but that was good enough for me.",
        "\"Okay,\" she said, smiling. \"Where's your mom keep the booze?\"\n\nIt took a moment to register the question. Then I had to think about it. My mom wasn't a drinker. But I didn't want to disappoint Laurie, so I had to think hard before I remembered that there were some wine bottles in the garage. I took Laurie out so she could examine the stash. She was very pleased. She patted me on the back like a buddy and grinned wickedly at me, \"You're awesome, Bill!\"\n\nWow. She called me Bill, not Billy. And she'd touched me. Not exactly in a sexual way, but it was the first time a girl had intentionally touched me, not counting Millie's passive ass contact.\n\n\"Will your mom notice if I open a bottle?\"\n\n\"No way. Mom's sister keeps these here so she can have a drink when she visits. I doubt either of them know exactly how many bottles there are.\"\n\nShe gave a wild whoop and kissed me on the cheek. I felt warmth radiating through my entire face. I smiled widely. The soft smell of her seemed to hover around my cheek as I followed Laurie back to the kitchen. We hunted up a corkscrew and she opened the bottle. She poured herself a half-glass of wine. She offered me some, but I wasn't interested. I didn't tell her that my father had drunk himself to death when I was a kid. That was Mom's real reason for being a teetotaler, and I definitely thought that if she came home and found me drunk, she'd never let me stay home alone as long as I was alive. Happily, Laurie didn't pressure me. I probably would have done anything she asked me to do. She sipped the wine and fixed us a frozen pizza for dinner. We laughed and ate at the kitchen table and gossiped about people in school, and she poured herself another glass.\n\nAfter a while, she started getting a little tipsy. Not drunk exactly, but her eyes got this warm watery look, and her eyes locked on mine more often, and she seemed to be flirting with me a little, although I wasn't really sure about it. Somehow the subject of sex came up. Mainly who in school was doing it with whom. It was a thrilling subject for me to listen to, because I barely knew what 'it' was to begin with. So talking to Laurie was an educational experience. She certainly liked using the word 'fuck' a lot. I loved watching her beautiful lips form that forbidden word. It was fucking sexy!\n\n\"Dan and Sheila hooked up on the Choir trip. He fucked her in the back row of the bus on the way back while everyone was sleeping. That's what he says anyway. She says he's lying. What else would she say? He's a pig.\" She giggled. \"And Rona Barrett, the Student Council President, well I just know she's fucking someone regularly, but I can't figure out who.\"\n\n\"Really? But she's so...\"\n\n\"Sweet and innocent? Hah! She's a big time ho. I love that girl, but fuck, she gives up the pussy like she's running a charity. Either that or she likes to tell tall tales. Ever since I was elected Student Council Secretary, I've been hanging out with her. She's always telling me these crazy stories about hooking up with this guy or that guy. I think she's fucked something like ten or twelve guys in the senior class, not counting guys who don't go to our school. But last week Rona stopped telling me what she's up to. She's fucking someone she can't talk about, and it's driving me crazy wondering who it could be.\"\n\n\"Maybe... Louis Blackburn.\"\n\nShe laughed. \"The camera nerd? That's a pretty random suggestion.\"\n\n\"Well... she kissed him on the cheek last Thursday. I saw it. He says they're just friends. But his friend Jason thinks they're more than that.\"\n\n\"No, she's just trying to get something out of Louis. He's probably helping her with her homework or something. But I guarantee you she wouldn't fuck a dork like him. My theory is that she's fucking one of the teachers. Coach Stroh, maybe. He's a hottie.\"\n\n\"But... doesn't Coach Stroh have a hook?\"\n\n\"So he has a hook. The rest of him is juuuuust fine.\"\n\n\"So... students and teachers... do it?\"\n\n\"Well... rumors abound, but you never know what to believe. All I'm sayin' is that half the girls on the Colorguard would bang Coach Stroh if he asked them to.\"\n\n\"You too?\"\n\n\"Fuck no. He has a hook!\" She laughed like crazy.\n\nFrom the way Laurie talked about it, I started to worry that everyone in school except me must be having sex with everyone else, even the teachers. I'd been excited by my little daily encounters with Millie's ass, but compared to what everyone else seemed to be up to, my little conquest was pretty dang pathetic. I realized that there was a whole world of human intimacy going on all around me that I just couldn't see. And I wasn't part of any of it. I was really glad that Laurie was giving me my first insight into all of this, even if it did leave me feeling even more like a weirdo.\n\nLaurie was taking a sip from her third glass of wine when I worked up the courage to ask a question that had been playing in my head for half an hour now. \"How about you, Laurie? Have you... have you fucked anyone?\" I'd never said the word before, or at least not to refer to the actual act of sex. I must have sounded awkward. She instantly grew still, and silence filled the kitchen. She stared at me with her mouth slightly open and wet with wine.\n\nThen a crooked smile crept up the corners of her beautiful mouth. \"Have I fucked anyone? Have. I. Fucked? Well...\" She put her elbows on the table and leaned forward, looking at me intently. She was going to tell me something, but wanted to be extra dramatic before she began. I tried to keep my eyes locked on hers because I knew it was rude to look at a girl's chest, but when she shifted forward, her large breasts were pressing delightfully against her forearms, causing them to balloon upward. I just had to look. Her left breast popped up on top of her forearm, giving me an incredible thrill. I forced myself to look back into her eyes. But I'd looked at her tits long enough for her to notice. She cocked her head, and grinned, forgetting all about what she'd been intending to tell me. She glanced down at her breasts, and then looked back up at me. \"Go ahead, Bill. Look all you want. I don't mind.\"\n\nI saw truth in her eyes, so... I looked right at Laurie's amazing breasts, eating them up with my eyes. She leaned forward a little more, until her left breast popped up onto her forearm too. It was a thrillingly simple, ordinary movement, but it filled me with an aching longing that I simply couldn't understand. It just was. Then, to my intense delight, she started twisting her torso a bit, dragging her breasts back and forth along the top of her forearms, all for my benefit. The fuzzy pink sweater made her breasts so ideal, so perfect... I was fascinated by the way the fabric shifted, rippled and creased. I loved the way her breasts squished and bounced. I was in heaven. Needless to say, my boner returned with a vengeance.\n\n\"You like them, don't you?\"\n\n\"Yeah.\" I mumbled, barely able to talk.\n\nShe leaned back in her chair, and cupped her breasts, one in each hand, and bounced them up and down a few times. I felt light headed. I couldn't believe Laurie Bonner was bouncing her tits for me!\n\nShe said, self appraisingly, \"I love my boobies. Guys are always staring at them. Some girls say they don't get why guys find them so fascinating. But I think tits are beautiful.\"\n\nShe squeezed them, making the fuzzy sweater and her flesh inside it, ooze out between her fingers. I felt my erection bending in half in my tight jeans, desperately trying to escape.\n\n\"Check this out, Bill,\" she said. She arched her back and put her arms behind her head. Her breasts appeared to get larger than they already were. \"I love how they look when I do this, but you can't walk around with your hands behind your head.\" She giggled.\n\nI was too amazed to laugh. I glanced at her face, and saw that her eyes were looking right at me with intense interest. I was pretty sure she was teasing me, trying to embarrass me even, and she'd tire of this game soon, so I tried to soak it all in while it lasted. My eyes went back to roaming across her body. I tried to shift my raging boner under the table, but there just wasn't any room for it in my pants anymore!\n\nShe saw me moving my arm.\n\n\"If you want to jerk off, I don't mind.\"\n\nBoom! An atomic bomb went off in my mind.\n\n\"No, really. Why don't you? I won't look.\"\n\nI couldn't believe she'd just made that offer. I had to take it. I unzipped my fly, and folded my cock out into my hand.\n\n\"So... did I make you hard, Bill?\"\n\n\"Yes.\"\n\n\"Good... can you see my nipples?\" she asked looking down at herself.\n\n\"I don't think so.\"\n\n\"It's this bra. It's too thick.\" She reached behind her back and unhooked her bra in one fluid movement. Then her breasts fell free with a beautiful little bounce inside the sweater. I almost jumped out of my seat at the sight. Then she pulled her arms into her sleeves one by one, quickly, and a second or two later, her hand emerged from the sleeve holding a white bra. \"Presto, change-o!\" She said, laughing.\n\n\"Nice trick,\" I said, trying like hell to sound cool, even though my heart was pounding in my chest. I was really stroking my cock then. It was utterly awesome.\n\nLaurie took both ends of the bra and held it up for display. \"Have you seen a bra before?\"\n\n\"My mom's.\"\n\n\"That doesn't count.\" She laughed. \"Here.\"\n\nShe tossed her bra to me. I caught it with my free hand. It was still warm from her beautiful body. It was silky, white, larger than my mom's bra, and had a tiny little blue bow between the cups, and a narrow blue ribbon woven along the top edge. It was the most amazing assembly of fabric I'd ever laid eyes on. I would rather have seen it on her, but this was great! I let my thumbs play across the cups. They were lightly padded, but not nearly as much as my Mom's bras. It was amazing to think this fabric had just been in direct contact with Laurie's naked breast, and now I was touching it!\n\n\"Smell it,\" she said. I buried my nose in the cup, and breathed in Laurie's intoxicating perfume. \"Do you like the way my tits smell, Bill?\"\n\n\"Yes.\"\n\n\"Can you see my nipples now?\" she asked, sitting up straight and pulling her sweater tight.\n\n\"Yes,\" I groaned. Her nipples, those wonderful little bumps, were pressing out through the fuzzy pink knit, and what's more, I could see a slightly darker circle around them about the size of a silver dollar. The sweater must have been a little see-through. She wiggled her body around, and her breasts bounced playfully. And by god, they looked bigger than they had with the bra on! How was that possible, I wondered? Maybe a bra squeezes them so they're smaller?\n\nI was stroking my cock pretty hard now. She could see my movements. She smiled and said, \"Jerk your cock for me, Bill.\"\n\nShe bounced her breasts playfully for a few seconds, then put a hand on either side and squeezed them together. They were so elastic... so squishy. She pinched her nipples with her pretty fingers. She gave a little gasp of pleasure and closed her eyes. Now the nipples were sticking out even more than before. Jolts of pleasure were shooting through my cock.\n\n\"You know, Bill, this is awfully inappropriate.\" She took a sip of wine, and pulled up her sweater to show me her tight little belly. Yeah, she was being completely inappropriate, and I was loving every second of it!\n\nWe had MTV playing on the TV, and suddenly Laurie said, \"Oh, I love this song!\" She hopped to her feet and danced to the song, deliberately shaking her body and prancing around, showing me her shape from every angle, including grabbing her muscular ass with her long fingers, and kicking her long legs high in the air. She was an amazing dancer! Her tits bounced around like crazy. They even hit her chin! I loved the beautiful shapes her long neck made as she moved. Her long silky brown hair moved about as if it had a life of its own. All the while, she kept looking at me with her shimmering eyes, a wicked, lustful smile on her face. She was definitely trying her best to turn me on, and it was working! I was rubbing my hard-on with a vengeance.\n\nWhen the music ended, she slugged down the rest of the wine in her glass. Then she stood facing me and ran one hand up her belly, lifting up her sweater. She exposed her belly and pushed her breasts up into her chin. She looked at me with her chin, buried in the fuzzy pink swell of sweater and breasts. Slowly the undersides of her breasts emerged from under her forearm, inch by milky inch, until I saw the brown, well-defined edge of her areolas appear. I was panting like mad as I jerked my cock under the table. Then just before the moment when her nipples might have popped into view, she moved her arm back down, pulling the sweater back into place.\n\nI was momentarily disappointed, but her hand didn't stop at her belly but kept going down and unbuttoned her pants and unzipped her fly. I could see, much to my amazement, her adorable pink panties, which were decorated with little white kittens playing with balls of yarn. She reached into her panties, and I saw her fingers moving around under the thin fabric. She gasped as she touched her pussy, and almost fell over in a spasm of pleasure. She had to steady herself by holding the back of a chair, nearly breaking her empty wine glass in the process.\n\nAfter a while, she brought her hand out of her jeans and held up her fingers for me to see. They were soaking wet with a thick, clear juice. She put her glass down on the table and held her wet fingers up to my nose.\n\n\"Smell my pussy, Bill.\" I hadn't smelled anything like it before. It was a wonderfully pungent, animalistic odor. \"Give me your hand.\" I dropped the bra, but she said, \"No, your other hand.\"\n\nI let go of my cock and she rubbed her wet hand all over my fingers. Oh my god! She was putting pussy juice on my hand! She smiled and said, \"Now, jerk off with that.\" I didn't have to be told twice. I immediately dropped that hand to my penis and began stroking myself with the slick liquid. It was unbelievable. I felt like I was having an out of body experience... I was stroking my cock with Laurie Bonner's pussy juice! And it felt so much better than when it was dry! Her juice was slick and slippery... utterly amazing!\n\nLaurie reached into her pants again, and masturbated twenty seconds longer. Then she took her hand out and put her dripping wet fingers on my lips.\n\n\"Taste my pussy, Bill.\" And so I did. I opened my mouth and her fingers slid between my lips onto my tongue. I tasted her pussy juice, and started sucking on her fingers like a popsicle, all the while jacking off like crazy; trying not to push it to the point where the pleasure became painful. As I greedily lapped her fingers, her other hand went down into her panties. I envied her ambidexterity. I could only really jerk off right-handed.\n\nShe leaned over the table in ecstasy. Her long hair almost fell in the leftover pizza, but I quickly pushed the paper plates aside. She whimpered in pleasure. Then she took her hand out of her pants and out of my mouth, and crawled up onto the table, her eyes dark with lust. She lay sideways on the table in front of me, with her head to my right, almost like she was my dinner... or my desert. She put the freshly wet fingers of her left hand in my mouth, and started masturbating again with her right hand. I sucked and lapped up her pussy juice. It was delicious. She almost knocked the wine glass off the table as she stretched out in front of me, but even though her fingers were in my mouth, and I was stroking my cock, I had the presence of mind to snatch the glass and put it out of the way.\n\nEvery instinct in me was screaming to reach out and touch her body. But I didn't know if she wanted me to. I didn't want to be rude. She took her fingers out of my mouth and started squeezing her tits. I wanted to join her... but should I? God, she was so close to me, I could smell her perfume and her pussy, but all I could do was masturbate and watch.\n\nShe was writhing and groaning... her sweater rode up, exposing her beautiful belly button. After a couple of minutes watching her like this, I worked up the courage to reach out and put my left hand on her belly, feeling her lovely little belly button. I could feel the muscles rippling under her thin powder-soft skin. She groaned and pressed her belly up into my hand. She opened her eyes and looked at me, biting her lower lip, then licking it all around with her pink tongue. She looked a little uncomfortable, because the table wasn't wide enough for her body and she was having to hold her head up beyond the edge.\n\nMy masturbation had taken me right up to the plateau of pain, so I let go of my cock, and reached out and slipped my right hand under neck. She smiled. \"Yeah,\" she groaned, and loosened her tense upper body, letting me hold her full weight of her head. I held her head up so she could keep her eyes on me. I loved the feel of her glorious hair flowing through my fingers.\n\nShe took her left hand off her tits, and put them into her panties and scooped out a fresh batch of pussy juice and stuck her fingers in my mouth again, this time thrusting them in and out of my mouth, all the while staring at me with a wild look on her impossibly beautiful face.\n\n\"Oh, fuck Bill,\" she groaned as I eagerly sucked on her fingers. I swirled my tongue around and between them, savoring the shape of her perfectly trimmed fingernails. She started taking long gasping breaths. I could tell that it was the result of something she was doing with her right hand between her legs. I slid my left hand up her torso, sliding it slowly under her sweater, until my thumb and fingers were pressing against the bottom of a breast. It was bouncing and moving against my fingertips in the most amazing way. I didn't have the nerve to go higher. I still thought she might be offended if I touched her nipples. I figured that she'd left her sweater on or a reason... maybe she was shy... I know, it sounds stupid. But I could barely manage to think at all.\n\nI moved my hand down again, across her bellybutton and then farther... down to where her hand was going into her panties. I put my hand over hers, feeling the movement of her fingers under my own. She was moving her hand in a swirling circular movement. I could only imagine what she was doing down there. I'd seen my Mom naked once, but only for a second, but she was so hairy that I still had no idea what it really looked like. The vagina was a complete mystery to me.\n\nI noticed Laurie was gasping in rhythm with the motion of her hand, matching the beat of a song that was playing on the TV. At the same time, she was thrusting her fingers in and out of my mouth at the same tempo. I started to move my hand with hers, and she gasped, enjoying the feeling... now she stopped moving her hand at all, and let me do the moving. I just pressed down hard, and swirled like she had been doing, to the driving beat of the son. It was almost like I was doing the masturbating, not her.\n\nShe was looking me right in the eyes the whole time, her face distorted with pleasure, her beautiful mouth wide open, breathing hard and gasping, \"Oh, yeah... Bill! Like that! Like that! Don't stop! Don't stop! Don't stop! Ohhhhhhh!!!\"\n\nHer eyes slammed shut, and she pulled her fingers from my mouth and slapped it down on top of my hand to stop my swirling motions. Her entire body began to convulse, almost like she was having a little seizure. It was unlike anything I'd ever seen before. Her breasts danced under her sweater, the nipples more prominent than ever. The convulsion peaked with a full body shudder as she emitted a long, loud, squeal of pleasure.\n\nAfter the moment passed, she flopped flat on the table, her head resting fully in my right hand. She stared absently up at the ceiling, breathing heavily through her full, shimmering lips, her breasts shifting beautifully with each breath, the nipples standing amazingly erect. She lifted her hand out of her pants. I moved my right hand so that when her hand emerged, mine was on top of it. She wound her dripping wet fingers around mine, then pulled my hand up with hers and pressed it into her chest.",
        "\"Wow. Feel my heartbeat, Bill.\"\n\nI didn't care about her heartbeat... my hand was on her tits! My fingers were entwined with hers, so its not like I had full touch, but it was wonderful anyway. I could feel tiny little tremors vibrating through her body.\n\n\"Wow!\" she said, breathing hard. \"That was fffffucking great!\"\n\n\"What just happened?\" I asked with amazement.\n\nShe laughed lightly as she looked up at the ceiling, and then said with mock seriousness, \"That was an orgasm, Bill.\" I could tell that she was imitating Mr. Brickey, the High School principal. \"Orgasmus Maximus. Please take notes, Bill, this will be on the final exam.\" She laughed, her breasts bouncing under my hand. I felt an intense rush of emotion for this wonderful girl. Love, I guess.\n\nI said, \"Have you done that before?\"\n\n\"Yeah. Sure... every night. By myself, in my room, listening to the radio. But it never felt like that before!\" She had an expression of amazement on her face. Then she turned to me and sat up on the table. \"Bill... your mouth is so fucking hot!\"\n\nAnd then she scrunched forward, put her arms around my back and kissed me. Nothing yet in my eighteen years of life compared to that kiss. I was expecting kissing a girl would be sort of dry and pinched, like the kisses my aunt gave me. But Laurie's mouth was wet and open, and her tongue pressed past my lips and into my mouth until it was dancing with my tongue. I was shocked, thrilled, devastated! It was literally as if a lightning bolt came out of her mouth and went down straight through my body into my penis. A jolt of pure energy struck me and I had what I thought must be an orgasm. I felt a tiny little surge shoot up my penis, then a little bit of wetness squirted out the top and dripped down onto my balls. Later I learned that was just a little pre-cum, but I thought it was an orgasm. It was pleasant, but not nearly as awesome as I thought it would be, based on how the guys in the locker room talked about it.\n\nThe kiss didn't last long before she turned her back to me and shook her head like she was dizzy. I knew at that moment our little encounter was over. I was already missing her touch, missing her kiss. I was sure we'd never be intimate again. I zipped my hard cock back into my jeans, having to bend it painfully to put it away. Laurie looked around for the wine glass, and finding it, drank one last drop that was in the bottom. She turned to me and grinned wickedly, \"I better not drink any more. It's making me a little naughty.\"\n\nShe hopped off the table and took one swig from the bottle, then corked it. She didn't seem all that drunk to me. When my aunt got drunk she would stagger about and slur her words. But Laurie was just a little loose and bouncy. Maybe even a little less crazy-exuberant than she normally was. Calmer... but more sensual. She hummed to herself as she carefully washed out the wine glass and put it away. Then she took the bottle back out to the garage. I sat there the whole time, feeling my boner slowly recede to nothingness, trying to remember everything I'd seen and felt. I could have kicked myself for not reaching all the way under her top and fondling her breasts when I had the chance. What an idiot!\n\nWhen Laurie returned from the garage she looked at the clock in the den. It was 9:30.\n\n\"Yeah,\" she said, muttering to herself, \"There's plenty of time to fuck.\"\n\nI almost died. But then I realized she wasn't talking about me, she couldn't be. She was thinking there was enough time to fuck some other guy after she left. Or possibly she knew I was listening and was just trying to mess with my mind. She smiled at me and came into the kitchen.\n\n\"Wow, Bill! Wow! That was fucking awesome. I liked how you moved your hand with me. And sucking my fingers... That was so hot!\"\n\n\"Yeah,\" I replied. I didn't move, didn't know what to do.\n\n\"Did you cum too?\"\n\n\"Come where?\"\n\n\"Cum.\"\n\nI looked blank.\n\nShe snorted and said, \"You don't know what cum is?\"\n\nI shrugged and said, \"I'm a former home-schooler.\"\n\n\"Oh, yeah. Okay. Cum is what they call the stuff that comes out when you have an orgasm.\" She imitated the principal's deep voice again, \"Semen, commonly referred to as cum. Present tense: cumming. Past tense: came. For example: Laurie wanted Bill to cum for her. Suddenly Bill was cumming. Bill came all over his lap.\" She giggled, then said in her own voice, \"So, Bill, did you cum for me?\"\n\nI nodded. I was pretty sure I had. \"Yeah. When you kissed me.\"\n\n\"But... both your hands were on me.\"\n\n\"Yeah... I guess.\"\n\n\"So you came without even touching yourself?\"\n\n\"You're a good kisser.\"\n\nShe giggled. \"Eighteen\", she said thoughtfully. \"Man, you sure don't look it. You're so short... but you're awfully cute. I bet you've heard that before.\"\n\n\"Nope.\"\n\n\"No? Well, you are. Beautiful. Your face... you eyes, your lips. You're just a beautiful boy, Bill.\"\n\nI blushed and said, \"Thanks.\"\n\n\"Are you a virgin, Bill?\"\n\nI gulped, \"I asked you first.\"\n\nShe chuckled, \"Come on, Bill. I know you're a virgin. It's obvious. Just admit it.\"\n\n\"Okay. I'm a virgin, but what about you? You still haven't answered the question.\"\n\n\"Come into the living room and I'll tell you.\" She beckoned me with a finger, then turned and hopped out of sight. I stood, slowly. Not sure what to do. I felt like running back to my bedroom... back to my battlefield... back to my childhood. But I didn't. I screwed up my courage and walked into the living room. Laurie was sitting on the couch in a seductive pose, looking up at me sweetly, but with a hungry expression in her eyes. I paused. She patted the seat next to her. I sat down. She put an arm over my shoulder and threw her long legs over my lap, and put her other hand on my chest. It was so intimate... so close!\n\n\"Well, Bill, here's the deal. I am not a virgin. Not technically. But I feel like one, if that counts. Danny Stanton fucked me at my eighteenth birthday pool party this summer. I was half passed out on rum at the time, so I don't remember much... actually, I don't remember anything. I just woke up in the garage with my bikini bottoms off, and blood all over my legs. I found out later that Danny popped my cherry while I was half asleep, but the blood freaked him out so bad that he just took off. Ever since then, he's been bugging me to give him another shot, but I think it was awful shitty of him to fuck me when I was passed out drunk. I mean, is that rude, or is that rude?\"\n\n\"That's criminal, actually.\"<br>\n\n\"Yeah. You're right about that. I've told all the girls to stay away from him. He probably won't ever be invited to another party at this school.\"\n\n\"Seriously, you should call the cops.\"\n\n\"And say what? I was planning to fuck him anyway. He knew that, and I guess he just figured that he already had my permission, so why not? Still, I don't think it's cool. You wouldn't fuck me if I were passed out, would you Bill?\"\n\n\"No way.\" But the thought of fucking her made my blood pressure soar.\n\n\"Of course not. That's 'cause you're not an asshole. You're a sweetie.\"\n\nShe leaned forward and gave me a peck on the lips. Her breast pressed into my arm for a second. Wow.\n\nShe continued, \"Anyhoo, since I was unconscious when it happened, I don't count that one. Therefore, I'm a virgin as far as I'm concerned. I did have a near miss, though. I almost fucked a guy at the band competition last month after I blew him and his friend.\"\n\n\"Blew?\"\n\n\"What?\"\n\n\"What do you mean?\"\n\nShe laughed. \"I blew them off... gave them blowjobs.\"\n\nShe laughed at the blank look on my face. I'd heard that phrase in the locker room, but I had absolutely no idea what it meant, only that it was sexual in nature.\n\n\"You don't know what I'm talking about, do you?\"\n\nI felt my face flush red. \"I don't know anything about anything.\"\n\nShe nodded and laughed a little, but stopped when she saw the look of dismay on my face. \"No that's cool. In fact, I think it's sweet.\"\n\nThere was a little pause and she looked off into space. I felt her move slightly. She was about to let me go... to take her legs off my lap... to let me go on being a child. So I clamped my hand on her legs, not letting her get up. \"I may look young, Laurie, but I'm eighteen. Almost nineteen. I'm months older than you, in fact. I want to know what happened at the band competition. Tell me. Blowjobs and all.\"\n\nShe smiled and her eyes twinkled. She'd been hoping I'd say something like that. \"Okay, Bill. So here's the whole story: the Wildcat Marching Band had just played. They sounded okay, but the Colorguard did a great job, so I was totally stoked. We had a half hour free before we had to assemble to hear our results. Most of the band went off to the bathroom, or to get some snacks, but I went back to the locker room to get my lip-gloss. But I accidentally went into the boy's locker room and ran into a couple of older boys from the Panther marching band. They were in there drinking from a flask. I was thirsty, so I just walked up to them and took the bottle from them and swigged it. That was some sour shit. I don't know what it was, but it was hard liquor of some kind. I didn't get drunk or anything... heck I only had a mouthful, but... I don't know... drinking makes me horny, I guess. And these guys looked awful cute. One of them was kind of shy but the other was bold. Since I never learned their names, I'll just call them Shyguy and Boldguy.\n\n\"Boldguy said, 'you have to pay for that drink', and I said, 'how?', and he said, 'with a kiss', and I said, 'sure'. So we kissed for a while. Shyguy blushed bright red and was about to leave, but I grabbed his hand and held him there as I Frenched his friend. Then when I was done with Boldguy, I turned, threw my arms around Shyguy and started kissing him, even harder and filthier than I'd kissed his friend. I rubbed my body all over the poor guy. It was probably his first kiss, because he didn't know what he was doing. But I gave him a bit of an education, just like I did with you back there in the kitchen. I tell you what, though... he didn't catch on nearly as fast as you did.\"<br> <br> She leaned in again, and kissed me longer, slipping her tongue into my mouth. My cock started getting hard, but I didn't realize it.\n\nShe continued, \"While I was kissing him, his friend started feeling me up. You know, squeezing my tits through my sequined top and grabbing my ass and stuff. I felt Shyguy's dick getting hard against my belly... just like yours.\"\n\nShit! My cock was poking up into her calves! She smiled and shifted her legs off my lap. I figured it was because she was grossed out at the feel of my erection. But she just reached down with her left hand, and ran it up my thigh until it was fully cupping the growing bulge in my jeans. I gasped, and my cock pushed against her palm.\n\n\"Yeah, it felt just like this. So I got down on my knees in front of Shyguy and unzipped his fly... kinda like this...\" She reached up to my fly, and slowly drew it down. Every muscle in my body tensed up in shock. \"You should have seen the look on his face. He couldn't believe I was doing it.\"\n\nYou should have seen the look on MY face!\n\n\"I bet not,\" I managed to stammer as the zipper, and her fingers, crossed the tip of my penis. The bulge of my white underwear emerged from my fly, suddenly unencumbered by the tight jeans. When the zipper was all the way down she wrapped her long pale fingers around my erection and gave it a squeeze. My heart leapt in my chest.\n\n\"Wow. Uh, where was I..? Oh, yeah.. I took his cock out of his undies and put it in my mouth. I thought he was going to pass out. I hadn't given a blowjob before, but Rona Barrett told me how she gave a blowjob to some guy backstage at the talent show, and I'd always wanted to try it out. But I didn't want to do it to anyone at our school, 'cause then everyone would hear about it and they'd all think I was a slut, just like Rona! Anyway, she'd told me basically how to do it. I don't know why they call it a blowjob, because you don't blow, you suck. Kind of like the way you sucked the pussy juice off my fingers earlier.\"\n\nI blushed and smiled.\n\nShe looked down at my bulge and said, \"So I sucked him while I stroked his cock with my hand... something like this...\"\n\nLaurie began to stroke my cock gently. I felt light headed.\n\n\"His friend was totally amazed by what he was seeing. He moved up next to me and unzipped his fly and out flopped his cock right next to my face. I wrapped my fingers around it and then I started sucking him too. It was fuckin' hot! Then I started going back and forth between them, sucking their cocks one after the other. Their cocks, by the way, were totally different. Shyguy's was longer and narrower... about the same size as you, I'd say, with a big head, and Boldguy's was short and fat. I mean, real fat... like maybe two and a half inches thick, but only maybe four and a half inches long. It was hard to fit in my mouth. I couldn't help but scrape him a bit with my teeth. But I had no problem with Shyguy's. I liked his better. I used to think all cocks were the same. But they're all different, like snowflakes.\"\n\nLaurie's hand was going up and down my underwear-clad cock, and I was about as large and hard as I'd ever been in my life. She looked down and said, \"What about yours, Bill? What does your snowflake look like?\"\n\nI stammered, \"Well... wh... why don't you take a... a look for yourself, Laurie?\"\n\n\"I think I will,\" she said, smiling. She flipped around and lay across my lap, her left breast resting on my thigh. She grabbed the waistband of my underwear with both hands and slowly pulled it down, her face eager with anticipation. Her fingertips brushed against my hard flesh as my cock folded out like a page in a pop up book.\n\n\"Wow\" she said. \"That's... not what I expected.\"\n\n\"What do you mean?\"\n\n\"I thought... maybe you'd look like a little boy... but this is the cock of an eighteen-going-on-nineteen-year-old if I ever saw one.\" She looked up at me and smiled, feeling a flush of pride. I couldn't believe it. I absolutely couldn't believe it. It was a mental image I can still see, clear as a photograph, to this very day. Her beautiful face looking at me... her swimmingly beautiful gray eyes... her long, brown hair falling across her shoulders onto my lap... her bra-less breasts in that fuzzy pink sweater, squished up on my leg, just inches from my naked cock.\n\nI watched, utterly mesmerized, as her beautiful full lips spoke the wonderful words, \"Do you want me to suck your cock, Bill?\"\n\nI felt a tear fall down my cheek. It was so great... almost more than I could bear. I couldn't speak. She didn't know how to interpret my tear, so I smiled to let her know I wasn't sad or anything. But I was too overcome with emotion to speak.\n\nShe grinned and said in a simple clear voice, \"If you want me to suck your cock, just nod.\"\n\nI nodded. She licked her lips but never took her eyes off mine. She scrunched down, and licked my cock with her tongue, from the base to the tip. She put two fingers around it and pulled me into her open mouth. Her hungry lips wrapped around my naked flesh, and a thrill of pleasure shot through my abdomen. I saw the pleasure in her eyes, and she saw the pleasure in mine. It was more amazing than anything I'd ever imagined. If someone had told me a girl would want to put my penis in her mouth, I wouldn't have believed them, but this was something strangely fantastic, surreal, and wonderful beyond measure. And it felt just as amazing as it looked, better than my hand by a long shot. Her mouth was wet and warm and I could feel every detail of her tongue as it danced around the head of my cock.\n\nAt that moment I was thankful that I'd been so insulated and ignorant about sex. Because this was like a starving person in some third world country suddenly being served the most delicious food in the world. It was heartbreakingly perfect. She finally broke eye contact and went to work on my cock. I put my hands in her silky brown hair, as her head bobbed up and down over my lap. Sometimes I could feel her teeth on me, but it didn't hurt. It felt wonderful.\n\nI kept thinking, 'Holy shit! My penis is in Laurie Bonner's mouth! Laurie Bonner is giving me a blowjob! I can't believe it!' I put my left hand on her waist, slipping it under the sweater to feel her soft skin. Her mouth felt amazing around my cock. I could feel her sucking and slurping, while her long hair tickled my thighs and belly. Wow, the sight of the top of her head going up and down over my lap was mind blowing. I ran my fingers through her hair, and ran my fingers around her ears. Ripples of pleasure began to slam me in the gut, making me twitch and flinch. It felt great, but much too soon I reached that point I'd always reached before, where the pleasure became overwhelmingly painful, so I had to stop her.\n\n\"Too much!\" I hissed.\n\n\"Okay\" she gasped, out of breath. \"I don't want you to come too soon anyway.\" She stroked my cock lightly, and bounced it playfully with her fingertips. \"Those band boys didn't even last this long.\"\n\n\"No?\"\n\n\"A couple of minutes, tops. I was just getting a rhythm going when Boldguy came in my mouth.\"\n\nI was barely paying attention. My eyes were locked on the sight and sensation of her beautiful long fingers stroking my cock. \"Really? He did that... in your mouth?\"\n\n\"It felt like he shot a gallon of goo in my mouth... it was all thick and funky. I almost gagged from the surprise. Rona Barrett hadn't said anything about cum. Maybe the guy she blew didn't cum, or only came a little, or not in her mouth... But, whatever... I wasn't sure if I should swallow it or spit it out, but I didn't want to get any of it on my uniform. We had to perform again later. So I swallowed it. It took two or three gulps to get it all down.\"\n\n\"Gross.\"\n\nShe laughed. \"Maybe. I don't know. I kind of liked it. It tasted salty.\" God, she had a pretty face and such a beautiful laugh.\n\nI put my hand under her chin, and she looked up at me. I said, \"Kiss me.\"\n\nShe got up, straddled my lap, and kissed me hard and passionately. I could feel her breasts squished into my chest, and her belly pressing my boner against my stomach. She kissed me for a minute or two, then pulled back and held my face with her hands and looked at me with real affection. Then as she continued her story she kept moving her crotch against my cock, keeping me hard... making me jump from time to time as another little spasm rolled up it.\n\n\"Boldguy got limp as soon as he came. He zipped himself up almost immediately, looking a little embarrassed. I sucked his friend a while longer, but suddenly I wanted him to fuck me. That wasn't my original plan, but... what can I say? He had a pretty cock. I lay down on the floor and pulled my tights and panties off, and spread my legs wide and told Shyguy that I wanted him to fuck me hard. He looked like a tiger was about to spring on him. So scared.\"\n\n\"Like me.\"\n\n\"Are you scared? You don't feel scared.\" She wrapped her hand around my cock and started stroking me. \"No he was absolutely scared shitless. He was shaking and quaking as he undid his belt and pulled his trousers down. Then he got on his knees, and fumbled with his cock trying to aim it at my pussy. But then he groaned and suddenly squirted all over me... all over my pussy and thighs. I laughed my ass off. He kept apologizing, but I didn't mind. I loved the way his cum felt surging onto my skin. It was so warm... almost hot! I spread it all over my pussy and thighs, and licked it off my fingers, while he gawked at me like I was the filthiest whore on earth. His cum tasted a little different from the other guy's. I guess it has something to do with what you eat.\" She spoke in the principal's voice again, \"Remember, children. You cum what you eat.\"",
        "I laughed. \"So... he didn't fuck you.\"\n\n\"No. I would have waited for them to get hard again, but they were kind of freaked out, or scared of getting caught or something. They just took off without saying a word. Well, I bet by now they regret being such chicken shits. But I'm glad Shyguy didn't fuck me after all. He probably would have cum in me, and I really don't need to get preggers. My mom would kill the fuck out of me. I'm also glad because it would have been stupid to throw away my first fuck to a guy like that. The first one really should be someone special.\"\n\nI realized that she was trying to tell me that, whatever else might happen between us tonight, she wasn't going to fuck me. I certainly wasn't anybody special. But that was okay.\n\n\"So, \" I said, \"You've only fucked once?\"\n\n\"Like I said, I don't count that first one, so, no, I've never fucked. That's my story, and I'm sticking to it. I've kissed a lot of guys, though, and I gave a blowjob to Rory... I forget his last name. You know, that black guy who tells all the jokes.\"\n\n\"Rory Jones?\"\n\n\"Yeah. We were at a party at Diana Whipple's house last month. We were joking around and I called him a 'dickless wonder' and he whipped out his cock to prove that he was not dickless.\"\n\n\"In front of everybody?\"\n\n\"No. Most everybody had gone home by then. It was just him, me, Diana Whipple, her brother Dan and Rona Barrett. Everyone was laughing, but they shut up when I got on my knees and gobbled him up.\"\n\n\"You did that... in front of them?\"\n\n\"One wine cooler too many, I guess. I really need to stop drinking. I'll end up a slut like Rona Barrett, if I don't watch out. But yeah, I sucked his cock in front of the others... it was just too beautiful to resist. I would never have thought a joker like him was packing such heat. The others just watched, hardly believing what they were seeing. I sucked him until he came, but this time I wasn't as surprised. He came more than the band guy did, but I swallowed it all... well, most of it.\"\n\nThat story blew my mind. \"Wow... Rory's dick is really big.\"\n\nShe swatted me playfully. \"How do you know that?\"\n\n\"I've seen him in the shower after gym class.\"\n\n\"Really? You see guys in the shower? The girls have separate stalls.\"\n\n\"Well, the guys have one big shower. You can't help but see everybody.\"\n\n\"But, still... you like checking out guys cocks?\" She was smiling wickedly.\n\n\"I guess. I ... I was afraid I'd have the smallest, you know...\"\n\nShe gave my cock a squeeze, \"You have no reason to worry about that, Bill. To tell you the truth, Rory's was way too big for me. It hurt my jaw sucking him. Yours is yummy and perfect.\"\n\nI blushed. That was a wonderful thing to know.\n\n\"But tell me, who else has a big cock?\"\n\n\"Uh... Tyler's pretty big, not as big as Rory, though. Davy Jameson is about the same size...\"\n\n\"The Drum Major? You're kidding!\"\n\n\"No.\"\n\n\"Wow. Well I guess they're both black. Makes sense.\"\n\n\"Well not all the black guys have big dicks. And the biggest one of all is a white guy.\"\n\n\"Who?\" she asked, eyes gleaming with wickedness.\n\n\"Tristan McQueen.\"\n\nHer eyes opened wide. \"Really? Sandra McQueen's little brother? You're shitting me!\"\n\n\"He never showers with the other guys, but I saw him changing sweat pants once. He accidentally pulled down his underwear and I saw is big ol' thing. I don't think anyone else noticed.\"\n\n\"Really? How big was he?\" I held my hands about 11 inches apart. \"Shit!!! And he wasn't even hard?\" I shook my head. \"The girls all think Tristan's the biggest dork in school! But all this time he's been hiding the biggest dick in school! That's just perfect! I have to tell Rona! Maybe she'll tell me who she's fucking, in exchange for that tidbit. She's been feuding with Sandra McQueen for years.\"\n\n\"Really?\"\n\n\"Yeah, now more than ever. Sandra graduated last year, so Rona should be top bitch on campus now, but Sandra's going to Playa College, and is still trying to call the shots at the high school. She keeps having parties where she invites all the popular seniors, but never Rona. She's totally trying to steal Rona's friends.\"\n\n\"Wow. Drama. I didn't know that kind of stuff was going on.\"\n\n\"I'm on Rona's side, so I refuse to go to Sandra's parties. But now that I know about Tristan's cock, I might just have to go and check him out.\" She giggled. \"I'm just kidding. I don't care for the big ones. Rory's been pestering me to have sex... but I won't do it. Not just because he's too big... he's just not nearly special enough to waste my semi-virginity on. Hey, Bill, I have a question for you.\"\n\n\"What is it?\"\n\n\"Would you like to take my semi-virginity?\"\n\nOh shit... the impossible was happening. I paused, and the image of my battlefield shot through my mind. I'd started the night intending to play with my plastic soldiers... but instead I was going to lose my virginity to a beautiful girl. It was an amazingly unlikely and cosmically unexpected turn of events... but strangely, I wasn't afraid. I felt a sudden rush of confidence. I reached up with both hands and cupped Laurie's beautiful breasts through her fuzzy pink sweater, feeling her hard nipples sliding between my fingers, and said, \"Yeah, Laurie. I do.\"\n\n\"Good. I want you to fuck me.\"\n\n\"I want to fuck you too.\"\n\nI pulled her mouth to mine and kissed her long, hard and deep. She began grinding her crotch against my hard cock . After a while she pulled back from the kiss and pulled up her sweater slowly, giving me time to relish my first sight of a pair of naked breasts and oh my god, what beauty! I had absolutely no frame of reference, but to me, they were the most beautiful breasts in the world. Pale, round and bigger than my hands. They had large dark areolas and big, fat nipples. I just had to touch them. She arched her back as I explored her tits with my eyes and my hands. Her skin was as soft as silk, and her breasts were pliant and squishy. She moved up onto her knees and pressed her breasts to my mouth. I licked her nipples and sucked them between my lips. She groaned, then groaned louder when I nibbled them. Man, I gobbled Laurie's tits like this was my last meal. I kissed them and licked them all over... every square inch of them. She particularly liked it when I licked and sucked the outside edges or her breasts, where they met her ribcage.\n\n\"Oh, Shit, Bill... right there!\" I rubbed my hard tongue around her sensitive spot, and she actually seemed to be having an orgasm as I licked and sucked her there. She put her hand in my hair and pulled my face hard against the spot so I sucked harder and harder as she writhed in pleasure. Meanwhile I was kneading her other tit like crazy in my hand. She gave a little yelp and I backed off. There was a bright red spot where I'd been sucking.\n\nShe laughed, \"Did you just give me a hickey?\"\n\nI laughed, \"I guess so. Sorry.\"\n\nShe kissed me hard on the lips, and then kissed down to my neck and started sucking me real hard.\n\n\"Ouch!\"\n\n\"There! Now we're even!\" She giggled, and then pulled my shirt off over my head. Then she rubbed her naked breasts all over my chest as we kissed some more. I was on a mission to stick my entire tongue into her mouth, and she sucked it like she'd sucked my cock earlier. I ran my hands all over her naked back, and grabbed her jeans-clad ass. I took particular pleasure in that, thinking about how much I wanted to touch Millie's ass like this. I ran my hand all around her ass, then under, rubbing my fingers against the mysterious mound between her legs. The denim was wet. She groaned as I rubbed her there, thrusting herself back and forth against my fingers.\n\n\"Oh, fuck, Bill... Oh... Oh...,\" she said as she nibbled my lips. Then she leaned back to look at me. She ran her hands all over my hairless chest. \"You're so beautiful, Bill.\" She scrunched down and wrapped her beautiful lips around one of my nipples and lovingly tongued it and sucked it and nibbled it with her teeth. The sensation sent an intense thrill that made my balls tingle. Then she sucked on the other for a while, her hand jerking my cock insistently.\n\nSuddenly, her face tense with desire, she stood up, unzipped, and peeled of her jeans. The sight of her standing there in nothing but her panties was absolutely killer. Those cute pink panties with the little white kittens playing with balls of yarn... I'll never forget them. There was a large wet spot between her legs. Juice was running down her thighs. I leaned forward, grabbed her ass, and pulled her to me so I could kiss those little kittens. Her panties were wet on my face, as I breathed in the thick smell of her pussy. I felt her fleshy lips through the fabric. She groaned and ran her fingers through my hair as I licked and sucked those little balls of yarn.<br> <br> Then she pulled back and yanked my jeans off, then my underwear, and before I could make any moves, got on her knees again and grabbed my cock and buried her face in my balls, taking them into her hot, wet mouth. She looked up at me with an adorable, wide-eyed expression. She licked them a while, making my thin pubes wet with saliva. It sent shivers up my spine. A little drop of pre-cum shot out the tip. She licked it off with the tip of her tongue.\n\n\"I just came again!\"\n\nShe smiled. She knew I was mistaken. But she didn't tell me. She wanted me to be surprised when I finally had a real orgasm.\n\nShe said \"Do you like having your balls sucked, Bill?\"\n\n\"Yes.\" I grabbed her head and pulled her down on my balls again, and now she licked them on the sensitive underside, while stroking my shaft with her hand. Then she licked up from the bottom, her tongue darting and dancing around my cock all the way up. Then she took me into her wet mouth again, and sucked my cock hard, going up and down, up and down, while I thrusted myself up to meet each downward stroke. Soon the pleasure in my abdomen turned into pain. She saw me tensing up and stopped, \"Don't cum yet.\"\n\n\"Okay,\" I said, not really sure what was going on with that whole pleasure/pain thing.\n\nShe backed away from me, slowly, sensually... She turned her back to me and bent over. I leaned in and kissed the kittens on her ass, and ran my fingers all over her back and legs and buttocks. I'd followed this ass down the hall in school more than once, but I'd never dreamed I'd actually get to touch it, to kiss it, to lick it... I saw her fingers come up between her legs, and press into the fabric between her pussy lips. Then she pulled the fabric aside a bit, showing me her pink, glistening slit. Fuck! Without even being asked, I grabbed her thighs and pulled her ass to me, and kissed her pussy lightly. She moaned and pressed harder onto my face, and I felt her pussy lips engulf my own. It wasn't all that different from kissing her mouth actually, except a heck of a lot wetter.\n\nAfter only a short kiss, she said, \"Take my panties off, Bill.\" I reached up and pulled her panties down... slowly, revealing her beautiful naked ass to my eager eyes, as I kissed her buttocks again and again. I'd heard girls say to guys, \"Kiss my ass,\" but now I realized that was a stupid thing to say. Kissing ass was awesome!\n\nI kept kissing her as I pulled her panties down, pressing my lips into every square inch of her long beautiful legs, down to her ankles and back up. But before I reached her pussy again, she walked across the room. She plopped down in the beanbag, which was opposite the couch, and spread her legs open for me. I'd been afraid her pussy might be some kind of ugly hairy mess, like the time I accidentally saw my mom naked. But Laurie wasn't nearly as hairy as Mom. Her lips had a fan of short wavy brown hair radiating outward around them... just beautiful! There were some small fleshy protrusions in the center which were shaped like pink flower petals. She put her fingers to those petals and pulled them open, showing me her pink, wet tunnel.\n\n\"Come, kiss me,\" she said. I walked to her, and leaned over to kiss her face, but she pulled down on my shoulders and with a husky voice said, \"Not those lips. These lips!\" She pulled my face into her open pussy. On instinct, I stuck out my tongue, and put it as deep into her vagina as possible, savoring her juice, straight from the source.\n\n\"Bill!!\" she moaned as her fingers dug into my scalp. I loved the feel of her soft, brown pussy hairs tickling the tip of my nose, and the sensation of her pink flower petals enveloping my face. I had no idea what I was doing, but I knew this was her first time too, so we sort of figured it out together. I'd try something, and based on her reactions, I'd either keep doing it, or move on to something else. All the while my cock was throbbing hard. It was insanely erotic.\n\nI kept looking up at her breasts. I loved the way they bobbed around as she gasped, so I reached up to play with them. They were a bigger than my hands, and felt so heavy and soft.\n\n\"Pinch my nipples, Bill,\" so I did. \"Harder,\" she groaned. So I pinched them harder, and harder, and she groaned more powerfully, and I felt juice oozing out of her pussy onto my tongue. I pinched and twisted her nipples so hard, I couldn't believe it didn't hurt. If she'd twisted my nipples that way, I'd have been screaming.\n\n<br> She put her hand between her legs and fingered the little hooded flap of skin on top, pulling it up to show me a fleshy little nub. \"Suck my clit, Bill.\" I put my tongue and lips on the little nub, and she went crazy. She was so sensitive there! I licked and sucked it, and she writhed under me, and soon she was having a moaning, screaming orgasm just like the one she'd had on the table. I ran my hands all over her breast, and belly and legs and then I slid one of my fingers into her pussy, sinking it all the way to the knuckle in her fleshy wet hole. That made her squirm in pleasure and she started bucking like a horse.\n\n\"Oh fuck! What are you doing?\" she gasped, desperately. My mouth was too busy to answer. I started moving my fingers around in different ways, and I guess she'd never really been able to touch some of the spots I was touching because she started jerking, so I had to hold on tight to keep from being thrown off. Her pussy got wetter and wetter, and I just lapped it all up, as I started doing a walking-fingers motion inside her with my two longest fingers.\n\n\"Oh fuuuuuuck! What are you doing to me, Bill? Ohhhhhh... shiiiiit...\"\n\nShe tensed up and a little jet of liquid shot out of her pussy, drenching my face. At first I thought she'd peed on me, but it didn't smell like pee, but was sweet and clear. I licked her all over, moving my fingers in her nonstop and her orgasm went on and on. She looked down at me with a crazed expression on her face. She was moving her lips but she couldn't seem to form a word. I felt powerful and in control. I felt proud of myself.\n\nI probably did this sucking and running fingers thing for half an hour, all the while she was whimpering and bucking and cumming. I felt my tongue going numb, and my fingers were cramping up. About that time she grabbed my head with both hands, pushed me back and moaned, \"Fuck me, Bill.\"\n\nThe beanbag was pretty low to the ground, so all I had to do was straighten up into a kneeling position, and the head of my cock pressed right up against her pussy lips. I paused there, savoring the moment, the tip of my cock resting between her flower petals... poised at the moment of entry. I had this sudden image that my adulthood was just inside those beautiful lips. All I needed to do was give a little push, and leave my childhood behind.\n\nWe locked eyes. Then I slowly pushed my pelvis forward, and my long, hard cock slid into Laurie's tight vagina. It was the most perfect moment of my life.\n\n\"Ooooooohhhhhhh,\" she groaned. She was spread out in front of me, my hands on her big beautiful breasts, as I pushed deeper and deeper, until my balls pressed up into her ass, and I felt the tip of my cock meeting a soft obstruction deep inside her. She gasped with pleasure, and so did I. It didn't matter that she was so much taller than me. We fit together perfectly.\n\nThe sensation of her soft insides rubbing along the length of my shaft was utterly perfect. For the first time in my life I finally understood what my penis was designed to do. It was if millions of years of evolution had all been leading up to this moment. My cock had always been destined to slide in and out of Laurie Bonner's tight pussy. Together, we were immortal.\n\nI pumped myself in and out of her pussy for a long time, at different speeds, trying to figure out what made her feel good. I'd do it hard for a while, until I got close to feeling that terrible pain, then I'd change my rhythm and the pain would abate. I had no idea that my orgasm was on the other side of that pain. But my fear of the pain allowed me to keep fucking her longer than she'd ever expected. My mom's clock makes a little bong every half hour. It bonged three times while I was fucking her in that position. I just kept going and going, and she moaned and whimpered and said my name again and again, her eyes looking at me as if she absolutely couldn't believe what was going on. She was, if anything, more amazed and astounded than I was, and that's saying a lot.\n\nDuring this hour and half, she had several orgasms of various kinds. Sometimes she just sucked in her breath and held very still. Other times she'd shriek and convulse, and make me hold still for a minute or two while her tremors passed. Then I would start again. I fucked her slow, and I fucked her hard, I fucked her with her legs open and her feet on the floor, and I fucked her with her legs straight up in the air. I really liked doing that... her legs were so long and muscular, and I felt powerful holding them up while I screwed her, my hands digging into her soft skin.\n\nEventually I started pounding her faster and harder than ever. I think I'd gotten my second wind or something, because I felt a rush of power and energy flowing through my body, and I banged her for all I was worth. Her breasts were flying up and down as she looked at me, her eyes and mouth wide open in wonder. I put my hand behind her neck and pulled her up to kiss me as I fucked her. Our eyes locked, and she shouted, \"NOW, BILL, NOW!\"\n\nI felt something building up deep inside me as I thrusted my cock in and out, in and out, harder, faster, harder, faster... I was sweating and groaning in an agony of pleasure, and I felt that horrible feeling of pain that I'd never endured before. For a few moments I almost stopped because it was too much to take! But held me tight and chanted hoarsely, \"Don't stop! Don't stop! Don't stop!...\" So I kept going, my entire torso feeling like I was being pummeled in the gut. I went through an incredible five seconds of pure agony... then... I reached the other side. Something inside my pelvis let loose and an incredible wave of warmth and energy flowed out of my belly, through by balls, all the way up the length of my cock and into Laurie's pussy.\n\nI grunted, \"Laurieeee!\"\n\nI fucked and fucked as I came. The spasms were mind-blowingly powerful. I could feel it in every part of my body, my toes, my hair, my nipples... I gave her one agonizingly wonderful final thrust. Then her legs snapped around me and held me inside her beautiful body. She was shuddering... in the grips of her most powerful orgasm so far. Her hands were quaking on my shoulders, her breasts bobbing and quivering, her lips open in a silent scream of joy, and tears were running down her cheeks.\n\n\"Oh, Fuuuuuuuuuuuuuuuuuuck!\" she groaned.\n\nWe embraced for a long time, breathing hard into each other's mouths as we kissed, and my cock grew soft inside her. I felt my cum running out of her and down my thighs. Somewhere in the back of my mind I remembered that there was something out there in the universe called a 'condom', and I probably should look into procuring one of them one of these days. But I was too happy and too exhausted to worry about it for long. I hugged her tight.",
        "\"Thank you, Bill,\" she whispered in my ear, after her body finally stopped quivering.\n\nI pulled back to look down at her beautiful body. I was amazed by the sight of my shrunken penis resting between her wide-open pussy lips. My cum was oozing out of her onto the beanbag. God, it was an insanely intimate sight. 'That's my cum, dripping out of Laurie Bonner's pussy,' I thought, in amazement.\n\nThen something wonderful happened. My permanent pubescent boner, the bane of my existence, came back with a vengeance. It grew and entered her pussy, all of its own volition. Her eyes opened as she felt it. She said in her husky voice, \"Yeah, Bill. Fuck me some more.\" So I did.\n\nShe flipped over onto her belly on the beanbag, and now I fucked her from behind, having a good long look at her amazing backside. I dug my fingers into her hard ass as I drove my cock deep inside her. I found myself comparing Laurie's ass to Millie's. On the one hand, Millie's ass was larger and squishier. Laurie's was great, but maybe a little too muscular for my tastes. But on the other hand, Laurie's ass was right here in my hands, but Millie's was still an impossible dream.\n\nI kept glancing over at the clock. It was past eleven. Wasn't Mom supposed to be home by now? But I absolutely couldn't bring myself to stop fucking Laurie. I would do it until the last possible second... I'd keep doing it after Mom walked in, if I had to. It was an absolute imperative!\n\nAfter fifteen or twenty minutes fucking her doggie style, Laurie pushed me onto my back on the carpet and straddled me. She rode herself up and down on me like a cowgirl. It felt amazing, but the best part of all was looking up at her beautiful breasts bouncing away like crazy. She was in control now, and used those muscular majorette legs of hers to choose whatever rhythm she wanted. She was so strong... so fit... so tireless. She fucked me this way for thirty solid minutes, giving herself numerous little orgasms on my ever-hard cock. At about the thirty-four minute mark, I felt another orgasm building up inside me.\n\n\"Oh, shit... I'm gonna cum again.\"\n\n\"Yeah, Bill!\" She rode me hard, staring down at my eyes, smiling and sweating, her long brown hair flying around like crazy. I reached out, holding and squeezing her big dangling breasts, feeling her nipples between my fingers. Drops of sweat were falling from her hair onto my chest. I didn't want it to end, but I couldn't hold out any longer. I felt myself bursting, and exploding... shooting my hot semen deep inside her pussy.\n\n<br> \"Oh, yeah, fill me up, Bill! Fill me up!\"\n\nWhen my spasms were over, she stood up, and turned around and crouched again, sucking the cum residue off my hyper sensitive cock. Her pussy was right over my face. My cum was oozing out of it. She lowered herself right on my mouth and I stuck my tongue as deep inside her as I could. She started humping my face. I didn't give a shit that my own cum was all over my face and in my mouth. It tasted funky, but the flavor and feel of her sweet pussy made it perfectly all right. We tasted great together! She face fucked me until she had another big orgasm rubbing her clit on my chin.\n\n\"Goddamn it, Bill! Oh. My. God. Oh. My! GOD!\"\n\nMom's headlights played across the curtains, and instantly Laurie and I jumped up.\n\n\"Fuck, fuck, fuck!\" I chanted, and we threw on our clothes like mad. She didn't have time to put her bra or panties on, but stuffed them in her pockets.\n\n\"Wait! Your face!\" She grabbed a handful of napkins and wiped the cum and pussy juice off my face. We heard Mom walking up the steps, so we hopped onto the couch. Laurie unzipped her bookbag and dumped the books all over the floor, where we'd been fucking each other just a minute earlier. I heard Mom's key jingling in the lock.\n\n\"Look!\" said Laurie, pointing at the big big pool of cum that had collected in the indention on the beanbag. I hopped across the room, and plopped down, covering the cum, just a fraction of a second before Mom opened the door.\n\n\"I'm home, Billy.\"\n\nShe was extremely nervous, but looked happy to see that neither of us had burned down the house.\n\n\"So, how's Aunt Joe?\"\n\n\"Oh, her operation went fine, I guess. She was very groggy. I'm not really sure she knew I was there. I probably should go see her again on Thursday.\"\n\nI'm glad Mom hadn't had sex in a long time, because otherwise she would have smelled the pussy and semen in the air. To me it smelled thick and musky. But Mom wasn't known for her observational skills. She didn't take notice of how sweaty Laurie and I were, or how mussed up our clothes and hair were.\n\nLaurie said, \"Well, I'd be happy to come back on Thursday for another session.\"\n\nMom looked at me and said, \"Well... I was feeling a little stupid tonight after I left. I was thinking... maybe Billy doesn't need a tutor after all. I'm just being a worry wart.\"\n\nI hugged Mom and said, \"The tutor was a great idea, Mom. Laurie taught me a lot. Stuff I never learned in school.\" I saw Laurie smirk, but by the time Mom turned toward her, Laurie's face was all innocence and intelligence again.\n\nMom said, \"Okay. I guess you're Billy's tutor, if that's okay with you.\"\n\nLaurie smiled and looked at me with a twinkle in her eye. \"Yeah. I still have a lot of things to teach him.\"\n\nI thought I might float off the floor with happiness.\n\nWhen Mom paid her, Laurie said, \"I feel bad taking your money, Mrs. Pantier. I actually learned a thing or two from Billy tonight. He's a very talented boy.\"\n\nMom ruffled my hair, and said, \"That's my Billy. He's an inspiration.\"\n\nAfter Laurie left, and Mom went to her room to get ready for bed, I cleaned up all the cum and pussy juice I could find. Not only was it smeared all over the beanbag, but drops of cum were clinging to the carpet where Laurie had ridden me cowgirl style. All this time I worked in a sort of daze, trying to process the fact that I'd just fucked Laurie Bonner, one of the most beautiful girls I'd ever laid eyes on... that I'd just lost my virginity. What did that mean?\n\nWhen I was finished, I went back to my room.\n\nMoonlight was streaming through the window across my battlefield. My armies were still arrayed on the bed sheets, ready for action. I looked at them for a long time, and thought about everything that had happened. I had no illusions that Laurie would become my girlfriend, but I hoped that our tutoring sessions in the future might get just as inappropriate. It didn't really matter either way, because she'd already given me an amazing gift... confidence. My fear of girls had evaporated entirely, almost like it had never existed at all. I knew that the next day I would strike up a conversation with Millie, and see what I could do about getting into her heart and maybe even into her pants.\n\nI swept my old friends off the bed into the cardboard box I kept them in. Then I carried the box to my closet and put it on the top shelf, in the very back.\n\nI said, \"Bye, guys,\" and closed the closet door.\n\n*************\n\nThanks for reading! If you enjoyed Laurie Bonner, read my series Field Trip Follies -- Laurie will make an appearance in Chapter Four!\n\nAnd to read about Laurie's friend Rona Barrett, check out my story Camera Buff!\n\nAnd leave a comment! I live for comments!\n\nCb"
    ],
    "authorname": "cbsummers",
    "tags": [
        "eighteen year old",
        "naughty girl",
        "virgin",
        "masturbation",
        "tutor",
        "drunk girl",
        "sitter",
        "locker room blowjob",
        "18-year-old"
    ],
    "category": "First Time",
    "url": "https://www.literotica.com/s/delayed-action"
}
{
    "title": "At Long Last: Gwen Ch. 02",
    "pages": [
        "Thank you for the nice feedback to Part I of Gwen's and Will's story.\n\nPart I concluded with Will mounting Gwen and engaging in a frenzied coupling. \n\n-------------------------------------------------------------------\n\nWhen Gwen and I had explosively climaxed we simply collapsed. I knew I had to roll off her and I did while pulling her on top of me. Oddly, despite our intense love-making of the past 24 hours, I just now seemed to realize just how small she was compared to me. She lay on top of me with her chest heaving and she just seemed diminutive. I simply lay there, also with chest heaving, marveling at how I had not appreciated what a little dynamo she was.\n\nAs our breathing slowed and began to approach something approximating normal, Gwen said, \"Will?\"\n\nI responded with \"Yes?\"\n\nGwen asked, \"What's happening here?\"\n\nI shook my head and responded, \"I don't know, Beautiful, I don't know.\"\n\nShe propped herself with her elbows on my chest and said, \"Will, I've been more intimate with you than I was in 15 years of marriage.\"\n\nI again shook my head and repeated myself, \"I don't know, Beautiful, I don't know.\"\n\nShe added, \"I just let myself go with you. I have no inhibitions..\"\n\n\"And,I with you. I've not known, at any time in my life, the kinds of feelings I'm experiencing with you. Frankly, it's a little scary, but I can't stop and I don't want to stop.\"\n\n\"Will, we met at 11:00 a.m. yesterday and it's just been crazy since then. I've opened my legs to you, I've not worn panties because of you. I can sit on a toilet in front of you and not be shy. I don't know who I am when I'm with you.\"\n\nI asked, \"Do you have regrets?\"\n\n\"No!\" she murmured.\n\n\"Neither do I.\" I continued, \"Do you agree with what I said earlier that we need to pursue this and really get to know each other?\"\n\n\"I certainly do, if I can stop shoving my pussy into your face every time I see you. Will, I've had more orgasms with you than I had in any five years of marriage.\"\n\n\"I have a question Gwen.\"\n\n\"OK, what?\"\n\n\"What are we complaining about? I'm happy, I'm excited, I feel on top of the world. Do you feel that way?\"\n\nGwen's answer was to crawl up my chest and kiss me for minutes.\"\n\nWhen she finished kissing me I asked, \"Was that an answer to my question?\"\n\nGwen burst out laughing and said, \"Gee, you're dumb! Are you that literal all the time?\"\n\n\"Yes, I am.\"\n\nGwen shook her head, \"Oh boy. Note to self. The Old Man is literal to a fault.\"\n\nI answered, \"See, we're making progress already.\"\n\nSuddenly Gwen grinned, \"Oh, why couldn't you have been my grad school adviser?\"\n\nI thought about that for a minute and said, \"Do you really think that would have worked?\"\n\nShe laughed and said, \"No, I think I would have been climbing all over you most of the time.\"\n\nI laughed and said, \"I think we would have been climbing all over each other..\"\n\n\"Answer a question for me?\" Gwen asked.\n\nI nodded, \"OK.\"\n\n\"How old are you?\"\n\n\"I'm 62\" I responded.\n\n\"Another question?\" Gwen queried.\n\nI nodded \"OK.\"\n\n\"Why are you so lean? You have very little body fat.\"\n\nI smiled and said, \"Mens sana in corpore sano\"\n\nGwen translated, \"A sound mind in a sound body.\"\n\n\"Are you a runner?\" Gwen asked.\n\n\"I was until I developed arthritic knees.\" I responded.\n\n\"And now?\" Gwen asked.\n\n\"Eat intelligently, engage in lots of both low impact and deep water conditioning, and golf.\"\n\nGwen nodded and I said, \"My turn?\"\n\nShe nodded her OK and I asked, \"You are almost devoid of body fat which is unusual for a woman of your age. How so?\"\n\nGwen replied, \"I work out a lot. Running, aerobics, swimming... It helped me deal with the stress of grad school and going without sex for so long. Now, I'm just hooked on it.\"\n\nI said, \"OK, but why don't these beauties sag? Your breasts are breathtaking.\"\n\n\"Good genes, I guess\" she smiled and slid up my chest to place her right nipple in my lips.\n\n\"Insatiable wench\" I commented.\n\n\"Shut up and suck\" was Gwen's gleeful response.\n\nI sucked and the little vixen arched her back and began sliding her pussy up and down my stomach and chest. She soon shifted her weight so that by doubling up she could rub her pussy over my rib cage and she asked me to suck her harder. I did and she humped my rib cage furiously. She moaned and moaned and looked at me pleadingly. I released her nipple and pulled her to me and kissed her hard with my tongue down her throat and only then did she stiffen and let out an extended groan and I felt her fluids gush over my rib cage.\n\nShe slumped against me and I wrapped my arms around her and we kissed. When we broke our kiss to breathe deeply Gwen moaned, \"Oh, Will, you make me so crazy.\"\n\nI smiled and said, \"I approve of your kind of crazy.\"\n\n\"Shameless, too\" she added.\n\n\"Call it what you want, I'm thrilled that you initiate our sex.\"\n\n\"Thank you,\" she whispered, and fell asleep on my chest.\n\nAs she slept I lay quietly and tried to sort out my feelings for this woman. She was smart, beautiful, and sexy, but there was something else here. I really cared about her and wanted her to be herself and to succeed and I thought I wanted to be with her. Still thinking, I dozed off with the little vixen breathing deeply on my chest.\n\nI'm not sure how long I slept, but I was awakened by Gwen stretching and yawning on top of me. I opened my eyes and she complained, \"You're too bony for sleeping comfort.\" \n\n\"I yawned and said, \"That's just one of my many faults.\"\n\nShe rolled off me and announced, \"Potty.\" She walked to the bathroom and I noticed that she didn't even close the door\n\n.\n\nWhen she finished on the toilet she called me, \"Shower time, Stinky Old Man.\"\n\n\"I am not a stinky old man. I am a passive victim of your wanton sexually deviant behavior, Wench.\"\n\n\"Uh huh\" she pointed out, \"And that dried pussy juice all over your face is from being passive?\"\n\n\"Well, that's something I have to do to keep this wench I'm sleeping with happy,\" as I stumbled into the bathroom.\n\nGwen put her arms on my shoulders and leaped into the air and wrapped her legs around my waist. I caught and held her and she leaned up to kiss me. And, that kiss lingered and lingered and when we broke it we stared, wordlessly, into each other's eyes.\n\nGwen finally broke the silence by saying, \"Lord Almighty, what have we done?\"\n\nI just shook my head and said, \"Just keep doing it, Beautiful.\"\n\nGwen nodded her head affirmatively and slid down my legs and turned to the shower. She said, \"You make the water too hot. I'm in charge of the water temperature from now on.\"\n\n\"Says who?\" I asked.\n\n\"Says me\" she said. We took a vote and my two votes outweighed your single vote.\n\n\"How did you get two votes?\" I asked.\n\n\"I get one and Anastasia gets one,\" she replied.\n\n\"Anasta...Oh, that volcano you call a pussy gets a vote?\"\n\n\"Of course she does\" was Gwen's rejoinder.\n\n\"Well, then, what about Ivor? Why doesn't he get a vote?\"\n\nGwen smiled, \"Well, first of all, his name is Ivan and second of all, Ivan is too dumb to vote. Keeping Anastasia happy is about all he can manage.\"\n\nIn spite of myself I cracked up. I sat down on the edge of the tub and just laughed until tears filled my eyes. When I looked up, Gwen stuck her tongue out at me and wiggled her hairy pussy in my face which set me off on a paroxysm of laughter again.\n\nGwen bent down and grabbed me by the bicep and said, \"Get up Old Man and get in the shower.\"\n\nI got up and got in the shower and Gwen turned her back to the spray and wrapped her arms around me and simply held me. Taking the cue from her, I held her back. Finally, she released her hold on me and looked up and said, \"I have an important question.\"\n\n\"OK, what is it?\"\n\n\"Do you like cats?\"\n\n\"Yes, I like cats, either grilled or broiled.\"\n\nGwen actually looked as if she was going to cry. So, I reached down and got my forearm under her beautiful tush and lifted her up to my level and said, \"I was kidding. I happen to love cats and have two of my own.\"\n\nShe squealed with delight and said, \"Oh, that's wonderful.\"\n\nI asked why that was wonderful and she said, \"I just love cats and have three of them.\"\n\nI smiled at her and she kissed me and then said, \"I like this. When you hold me like this I don't have to look up at you.\"\n\nI said, \"Yes, but you forget how much you weigh. It's hard holding a 200 pound squirming woman.\"\n\nGwen screamed, \"I weigh 100 pounds you dirty old man!\"\n\n\"Ah ha! I didn't have to ask you what you weigh. You told me yourself.\"\n\n\"Put me down, Old Man\" and I did.\n\nGwen again stuck out her tongue at me and turned to get the soap and she began to wash me. When she finished with me I took the soap from her and lathered her up and let her rinse herself. She turned off the shower and we climbed out. I dried her and then myself and I asked, \"Do you have any scissors with you?\"\n\nShe said, \"I think so. Why?\"\n\n\"Could we trim your bush a bit?\"\n\nGwen looked solemn for a moment and said, \"It depends.\"\n\n\"On what does it depend?\" I asked.\n\nGwen said, \"Well, I've neglected it forever because I've not had sex so I know it needs trimming. But, it depends on whether you are making a legitimate request or this is just another ploy to get me to spread my legs for you.\"\n\n\"Oh, it hadn't occurred to me that you'd have to part your legs for me to trim you.\"\n\nGwen laughed delightedly and started rooting through her stuff and came out triumphantly waving the scissors which she gave to me. She sat down and spread her legs for me and I knelt on my knees and started clipping away the excess.\n\nWhen I finished I said, \"OK, all done.\"\n\nGwen just sat there. I looked at her and she said, \"Well?\"\n\n\"Well, what?\"\n\nHer answer was to spread her legs wider and to reach down and pull away her outer pussy lips.\n\nI said, \"It will be my pleasure,\" and I knelt on the floor and put my mouth to Gwen's open pussy. She wrapped her hands around my head and pulled me deeper into her pussy. I licked the length of her pussy repeatedly as she moaned and rocked back and forth.\n\nGwen blurted out, \"Will, after ten years of no sex and fifteen years of rotten sex before that, I'm so incredibly orgasmic with you I can't believe it.\"\n\nI pulled away long enough to say, \"Yes, and I'm the lucky guy who gets to capitalize on it.\"\n\nAfter minutes of simply concentrating on her pussy I shifted upwards and gave her clit a number of rapid flicks with the end of my tongue. I heard her whisper, \"Oh, Will, am I falling in love with you?\"\n\nAs her moaning increased I sucked her clit powerfully and Gwen screamed and went rigid and I was rewarded with the gush of pussy juice I'd come to know and love. Gwen was slumped over me with her hands still cradling my head against her tortured pussy. She was sobbing and I didn't know why.\n\nI slowly extricated myself from my knees and Gwen's pussy and picked her up and lay down with her on the bed. I simply held her and let her sob. It seemed to take forever, but the sobbing eventually subsided.\n\nWhen she had exhausted herself, I asked, \"Will you tell me what's wrong?\"\n\nGwen glared at me and said, \"Oh, you big dumb idiot. Don't you know anything?\"\n\nTrying to make light of things I said, \"Well, let's see. I'm a pretty good statistician and I know research design and systems analysis. Does that count?\"\n\nGwen started laughing and hiccupping and hitting me all at the same time, but she did manage to choke out, \"No, that doesn't mean anything, you doofus.\"\n\n\"OK, I give up.\"\n\nSuddenly energized, Gwen sprang to her knees and put her hands on my shoulders and said, \"I don't even know where to start.\"\n\nI helpfully suggested, \"Try the beginning.\"\n\n\"Oh, shut up and listen.\"\n\nGwen began, \"I gave up on men. They're boorish and self-centered and I don't want them and I don't need them and then I met you and you treat me like I'm a princess or some damn thing and we're leaving this place in another day and one-half and you look at me and I have an orgasm and I think I'm in love with you, but I don't really know you, but I think I'm in love with you and I don't want to leave this place, and I'm so confused I don't know which end is up.\".\n\nI thought a minute and said, \"That was impressive. You didn't take a breath in that whole sentence.\"\n\n\"Oh, shut up!\"\n\n\"You're a mess, you know that?\"\n\n\"Yes, I know that!\" \n\n\"Now, come here and let me hold you and reassure you.\"\n\nShe sniffed and said, \"OK, but don't give me another orgasm.\"\n\n\"Go blow your nose.\"\n\n\"Go blow your own nose\" Gwen yelled, but she did get a tissue and blew her nose and then came back to me and curled up in my arms. I kissed her.\n\nShe said, \"Stop that! No more kissing.\"\n\n\"Why not?.\"\n\n\"Because I'll probably have another orgasm on the spot.\"\n\n\"Have you considered the fact that I've never felt about any woman how I feel about you. I've never felt anything like love. I don't even know what it is, but I know that I go crazy when I look at you and I want you to be happy and I want you to initiate sex and I want to make love to you and I want you to laugh and tease me and I want you to be successful and I want you to work with me?\"\n\nGwen stared at me. She finally blurted out, \"Holy cow, Will.\"\n\n\"Now, get your beautiful little tush up off that bed and put some clothes on because you have to go downstairs to the hotel's dress shop.\"\n\nGwen was shocked. \"What are you talking about?\"\n\nThe big dinner is tonight. You're going to be the belle of the ball. Now get that beautiful tush up and moving.\"\n\n\"Will, I didn't sign up for the dinner. I didn't bring clothes for such a formal event.\"\n\n\"The dinner is taken care of. You're going as my guest. Now, you're going downstairs and trying on that purple print dress that you admired so much and which I think will be so beautiful on you.\"\n\n\"Will, I can't afford that!\"\n\n\"You don't have to afford it. I already paid for it and you have to go make sure their size 3 petite super tiny or something fits you.\"\n\nI laughed as Gwen's mouth dropped. She stared at me and finally said, \"How do you know my size?\"\n\nI looked at her and said, \"I looked at your clothes.\"\n\nGwen jumped on top of me and showered me with kisses.\n\nI growled at her, \"Stop it! You're going to give me a hard-on and then you'll never get fitted.\"\n\nGwen cooed, \"Ohhhhh, hold the hard-on for later. I'll need it.\"\n\nShe scrambled off the bed and stopped in her tracks. \"Wait, I don't have shoes to go with the dress. I'll need a purse, too.\"\n\n\"I said, \"A matching clutch is with the dress. You don't need a purse because you'll be with me.\"\n\n\"Well, that doesn't take care of the shoes. And, I'll need a bra and panties, too.\"\n\nI handed Gwen my credit card and said, \"Shoes only.\"\n\n\"But, Will, I'll need a bra and panties, too.\"\n\n\"Gwen, your so damn firm you don't even need a bra and since I've known you, you haven't even worn panties.\"\n\n\"You're mean\" Gwen accused.\n\n\"Yeah, that's me. I'm mean.\"\n\nGwen was jumping into clothes giggling. I couldn't help but notice that she didn't put on a bra or panties.\n\nIn a moment she said, \"Bye! Where will you be when I'm done?\"\n\n\"I'll be in my room.\"\n\nShe was out the door and gone for all of ten seconds and she came bursting back into the room announcing, \"I'll have to have a bra on for the fitting.\"\n\n\"Yes, and what else?\"\n\n\"OK,\" she agreed. \"I'll need panties, too.\"\n\nIn another minute she was gone.\n\nI got dressed and went to my room and called my old friend, Walter, who had been Gwen's adviser in graduate school. Gwen had not a clue that Walt and I had been friends since attending graduate school together.\n\nI got Walt on the third ring and identified myself and we chatted a bit and I asked him why he wasn't at the conference and he explained a campus emergency that was holding him there.\n\nThen Walt asked, \"What's up?\"\n\nI asked Walt to tell me about Gwen. Walt was intrigued and wanted to know if I was trying to recruit her. I indicated to Walt that that was certainly part of the larger picture, but I was involved with Gwen in a much more intimate way such as sleeping with her.\n\nWalt was flabbergasted, but when he got over his shock he said, \"OK, Gwen is bright and a lot brighter than she realizes. She must have let her ex-husband do a number on her in terms of her self-confidence, but that's her major deficiency. If she ever realizes who she is and what she has, she could be a productive scholar. I should mention that on the few occasions that she let herself relax here, she displayed one great sense of humor, but she was really tightened down when she was here.\"\n\n\"Good.\" I said, \"Anything else?\"\n\n\"Hell, yes, there's more. How you ever got into her pants is one of the mysteries of the universe. She was really down on men when she was here and I mean no one got near her. There was even talk that she was a lesbian and off limits to men.\"\n\nAgain, I said, \"Good. Anything else?\"\n\n\"Yes,\" he roared. \"How'd you get in her bed?\"\n\n\"I'm not sure. I think it was because I was nice to her.\"\n\nWalt roared, \"Nice to her? Nice to her? Everyone here was nice to her and no one ever laid a hand on that woman. I'm telling you, Will, there must be a tanker truck full of repressed sexuality in that woman. If she lets go of all that sexuality, you're going to be in for the ride of your lifetime.\"\n\n\"Roger that, Walt.\"\n\nWalt was laughing, \"You old bastard. I'd have bet you'd be the last man on earth to tap into that woman.\"\n\n\"Walt, one more thing...You introduced us years ago when you became Gwen's adviser and she and I have dated ever since.\"\n\n\"Got it, Will.\"\n\n\"Thanks, Walt.\"\n\n\"Go for it, you old codger! Good for you.\"\n\nI hung up and literally prayed, \"God, help me do this right and not mess up this woman.\"\n\nI worked on a few e-mails that couldn't wait and waited for Gwen to arrive.\n\nIn due time, Gwen rapped on the door and I opened it to a gleeful Gwen.\n\nShe said, \"Pick me up.\"\n\nI picked her up and when we were eyeball to eyeball she placed her hands on both sides of my face and kissed me long and hard. Then, she said, \"Put me down.\"\n\nI put her down and she handed me my credit card and receipt for the shoes and a bra and panties.\n\nI cracked up and commented, \"You really follow instructions well.\"\n\n\"Oh, she said, \"You're too dense to understand. You'll get it when I get dressed.\"\n\n\"No, I won't get it. I won't see your bra or panties so what's the thrill in that? Does this mean you're going to wear panties?\"\n\n\"Of course I'm going to wear panties! What if you make me wet? Without panties I might stain a $350 dress!\"\n\n\"Oh, I'm glad to know there is one way to get you to wear panties.\" \n\nNaturally Gwen stuck out her tongue at me.\n\nGwen did get sober and say, \"We do have a problem. Lie down so we can talk about it.\"\n\nI lay on the bed and Gwen laid on top of me and asked, \"What am I doing as your escort to this dinner? I'm nobody and you're a big mucky-muck and I didn't even sign up for this shindig and here I arrive on your arm.\"\n\n\"Hmmmmm\" I said. \"Well, you could be the attendee and I could be your arm candy. Sort of an escort service, you know.\"\n\n\"Get serious, Will. What are people going to say and think when I walk into that dinner with you?\n\n\"They are going to say and think, 'How does that guy warrant walking in with that gorgeous thing?'\"\n\nGwen gave my chest a good pounding with her fists and said, \"Come on, Will. Be serious.\"\n\n\"All right. I'm serious. Most of the people there are going to ask how in the name of heaven and earth I rate being with a beauty like you. As for the others, we handle it simply. We've known each other since you started grad school. When I was visiting Walt, he introduced us and we've been an item ever since.\"\n\nGwen's response was, \"WHAT?\"\n\nI nodded. \"Yes, we've known each other for years and have dated all this time.\"",
        "Gwen had started to process this and asked, \"You know Walt?\"\n\n\"Yes.\"\n\n\"How do you know Walt?\"\n\n\"Walt and I attended grad school together and have been friends ever since. I talked to him a half hour ago.\"\n\n\"You talked about me to him?\"\n\n\"Uh huh.\"\n\n\"What did he say?\"\n\n\"He said you were very bright and if you ever realized it you could be a productive scholar. He thought your ex-husband messed up your self-confidence really badly and your biggest weakness was self-confidence which kept you from realizing how good you were. He said, you had, when you wanted to let go, a great sense of humor and he said no man could get within reaching distance of you and he wanted to know how in hell I ended up in your bed.\"\n\n\"\u00c1nd, what did you say?\"\n\n\"I said I thought I was nice to you and ended up in your bed. Walt lost his mind because he said everyone was nice to you at grad school and no one could lay a hand on you.\"\n\nGwen laughed and laughed and said, \"You're incredible!\"\n\nThen she brightened and said, \"Let's get dressed.\"\n\nI said, \"OK, lead on and nodded to the bathroom.\"\n\n\"No,\" Gwen protested. \"We dress in my room. My makeup is there.\"\n\n\"Whatever\" was all I could muster.\n\nGwen, however, was looking around the room and asked, \"Why is your room and your bed bigger than mine?\"\n\nI responded, \"You're a peon and I'm a full professor.\"\n\n\"OK, Mr. Inflated Ego, but we're sleeping here tonight. This is a bigger and nicer bed.\"\n\n\"What about your makeup?\"\n\nGwen glanced at me and said, \"Someone is not going to get his cock sucked tonight if he doesn't stop with the sarcasm.\"\n\n\"Oh,really? Well, someone is not going to get her pussy licked if she doesn't get off her high horse.\"\n\n\"Not true.\" Gwen said, \"If I ask you to eat me, you do it.\"\n\nI just smiled. She was right and she knew it. Naturally, she stuck out her tongue at me.\n\nI grabbed my clothes and shoes and we trundled off to Gwen's room. She was excited about the new clothes and even asked, \"Do I really get to keep this dress after the dinner?\"\n\nI roared with laughter and said, \"I didn't rent the damn thing for you.\"\n\n\"Oh Will, this dress is so beautiful and it fits well. I'm in love with it.\"\n\nRiding up the elevator Gwen held my cock. As we neared her floor, she suddenly said \"I feel like I'm dating Sasquatch. How darn tall are you?\"\n\n\"I don't know any more. We shrink as we age you know.\"\n\n\"Well, I think your size is approaching that of a dinosaur. You consume too much space and oxygen.\"\n\n\"Has it occurred to you that being four feet something is a bit on the diminutive size?\"\n\n\"I am NOT four feet something. I am five feet tall and with these heels, I'll be even bigger.\"\n\nI responded, \"No wonder you're always going to the potty. You have a bladder the size of a thimble.\"\n\n\"That was mean!\" Gwen shouted.\n\n\"Oh, you call me Sasquatch, but I'm mean when I make a joke at your expense.\"\n\nGwen explained, \"You're a hulk. I'm delicate, so you can't make jokes at my expense.\"\n\n\"I see\" I responded. \"Thank you for that clarification.\"\n\n\"As we walked down the hall to her room she asked, \"Do we have time for you to screw me before the dinner?\"\n\nI started laughing and said, \"We'll be lucky to make it on time now.\"\n\n\"Too bad\" was her response.\n\nWe went into her room and into the shower and we scrubbed ourselves clean and dried our hair. As we busied ourselves we peppered each other with questions so that we had plausible background information on the other one if someone persisted in questioning our story.\n\nGwen had problems with the bra straps and it took both of us to get it fitted, and then, incorrectly as it turned out. It was a beautiful lavender color, but I still had no reason to believe it was necessary for the dinner. Gwen, of course, assured me it was.\n\nThe panties fit fine.\n\nShe put on the dress and I stopped breathing. Breath-taking, gorgeous, knock-out, and classy, were all words that came to mind. Gwen interrupted my thoughts with a request to \"zip me.\"\n\nThen she revealed the shoes and the darn things were a perfect match for the dress. Gwen grinned at me and asked, \"You like?\"\n\n\"Beautiful, you are simply stunning.\"\n\n\"Pick me up.\"\n\nI picked her up and she kissed me and she said, \"Thank you! Now, Sasquatch, put me down.\"\n\nOff we went to the dinner and I noted that we were seated at Table 2 and I asked Gwen to lead me to the table. As we approached the banquet room the din of hundreds of academics all explaining the universe to each other was deafening. Just as the doors were about to close, Gwen and I walked through the door and the din simply subsided.\n\nSome mysterious signal passed through the assembly and most of the eyes turned to the doorway as Gwen located Table 2 and led me, by the hand to it.\n\nOne would have thought Gwen was born to royalty the way she regally led me to the table. She had a small smile of recognition for any of her departmental colleagues she recognized. Their jaws, incidentally, were in their plates.\n\nAs we passed one table I spotted a departmental colleague of mine, Howard, who had a smile a mile wide and who noted, \"Hell of an entrance, Will!\" I smiled and winked at him.\n\nWe sat down at Table 2 and I introduced Tom and his wife Katie to Gwen and Harry, a grizzled old bachelor like me, and Martha, a middle-aged colleague, and Rasheed and Rawanda his wife, and the gay couple whom I could never keep straight. One was David and one was Thomas. Gwen smiled engagingly at each.\n\nHarry, who was never known for his savoir-faire, looked at Gwen and asked, \"God Almighty, what a lovely creature. From whence have you sprung?\" Gwen smiled sweetly and said, \"From my mother's womb.\" That dismissed Harry for the night.\n\nThe meal was lovely although I was routinely distracted by Gwen's tiny hand gripping my cock under the table cloth. When I'd look at her she'd say, \"This is nice and stroke me.\"\n\nAs the meal concluded, the president of our association stood at the microphone and welcomed everyone and explained that the awards portion of the evening would commence shortly. \"However,\" he said, \"in a departure from the norm I am going to ask Will David --and he looked directly at me -- to come up here and introduce his companion of the evening. Will, you and the lovely lady created quite an entrance and a subsequent stir this evening and a major topic of conversation this evening so far has been you and the identity of the lovely lady.\"\n\nGwen was shocked and embarrassed, but she bore up well and smiled as I rose to take the microphone. I began with, \"I know exactly what you were all asking and that is, \"How does he rate that?\" Laughter erupted as did applause and I thought Gwen might disappear under the table.\n\n\"The lovely lady is Gwendolyn Davis and she is one of us. She is currently an assistant professor at Rockingham and she shows real promise as a scholar. Gwen and I met some six or seven years ago when she was a first-year grad student at MIT where I was visiting my old friend, Walt Howard. Walt had taken Gwen on as a student and he introduced us. I took one look at Gwen and said, 'Well, well, well.' Gwen looked back at me and said, 'Whoa, whoa, whoa. We'll see about that.'\"\n\nLaughter erupted and I concluded \"Gwen and I have quietly dated since then.\" Applause followed as I relinquished the microphone to the president.\n\nI returned to our table and seated myself. Gwen gave me a big smile and her tiny hand snaked under the table cloth to grab and hold my cock.\n\nThe awards ceremony began and, in a lull, I turned to Gwen and asked, \"How are you doing?\"\n\nShe said, \"This bra is killing me.\"\n\nI responded, \"Serves you right. You owe me fifty bucks and don't stick your tongue out at me.\"\n\nGwen dissolved in laughter and said, \"Will, I am having the best time.\" And she squeezed my cock.\n\nI whispered back, \"So is Ivor.\"\n\nGwen leaned over and said, \"You're such a dummy. His name is Ivan.\"\n\nMeanwhile the awards ceremony was ongoing and it was interesting to see who was winning in each category. The last of the awards, the prestigious one, was given to the scholar whose article was most cited by other writers in articles, books, and reports and, even occasionally, in the public media where the journalist usually rendered the findings completely incomprehensible. I was surprised to learn that I won the award for my article on sampling bias in survey and poll research.\n\nI went to the platform again and dispatched with the award by saying, \"Thank you to all you extraordinarily discerning and discriminating scholars who cited me.\" The place erupted into laughter.\n\nWhen I returned to the table Gwen was laughing and dabbing her eyes. I looked at her questioningly and she said, \"I'm sitting here thinking, Great God Almighty, I'm sleeping with the best damn scholar in the field.\"\n\nI responded, \"That's right, so please show a little respect for a change.\"\n\nGwen responded, \"Bite me.\"\n\nWhen the banquet concluded, people streamed up to our table ostensibly to congratulate me, but I'm certain it was really to check out Gwen. She was simply spectacular.\n\nGwen and I dealt with all the well-wishes and gawkers and just as we thought we'd made it through the ordeal Madeline showed up. Madeline was a lifelong departmental colleague of mine. We had last agreed on something in 1986 or 1987. Name an issue and we were going to be polar opposites on it. Madeline grabbed a chair and sat down. I sarcastically asked, \"Gee, Madeline, why don't you join us?\"\n\nMadeline just smiled at me and said, \"Up yours, Will.\" She turned to Gwen and said, \"This old bastard is as big a pain in the ass as I've ever known, but he's an honorable and decent man. You could do a lot worse. Just don't let him tell you that quantitative research is the only valid means of determining truth.\"\n\nGwen looked from Madeline to me and back to Madeline and I said, \"Numbers confuse Madeline.\"\n\nGwen erupted into laughter and then tried to stop her laughter by clapping her hand over her mouth, but her body was shaking with laughter. When she regained some composure she walked over to Madeline and the two hugged and Gwen said, \"Thank you, Madeline.\"\n\nI leaned over and squeezed Madeline's hand and said, \"Thank you very much.\"\n\nMadeline grinned and arose and her parting words to me were, \"You are a Dirty Old Man, but my God, she's lovely.\"\n\nAs Madeline departed, Gwen took my hand and announced, \"I have to pee.\"\n\nI looked at her in mock horror and said, \"The first thing you say to a Scholar of the Year is 'I have to pee?'\"\n\n\"Yes,\" she responded, \"don't forget how much these panties cost.\"\n\n\"Please don't remind me,\" was all I could say.\n\nWe walked out of the dining room and found the bathrooms. Gwen said, \"I'll need your help fixing the bra, too.\"\n\nI was waiting for her when she came out of the ladies room and she asked, \"Is there anyone in the men's room?\"\n\nI shook my head, \"No.\"\n\nGwen grabbed my hand and led me into the men's room and into a stall. I unzipped her and followed her directions about which strap to loosen and which to tighten and she announced she was comfortable.\n\nWe walked outside and Gwen said, \"We have to go to the dance.\"\n\nI looked at her in amazement and asked, \"Why?\"\n\nGwen explained, \"This is a big night and you won a major award and it's expected that you'll make an appearance and dance.\"\n\n'Says who?\" I asked.\n\n\"It's just common protocol\" Gwen explained.\n\n\"In academe?\"\n\n\"Yes, it's protocol even in academe, you old fossil.\" And she grabbed my hand and hauled me towards the ballroom.\n\n\"Wait a second, Beautiful. With whom am I going to dance?\"\n\n\"With me, Silly.\"\n\n\"How will we do that? Gwen, I'm actually six feet, four inches, and you're size 'extra-tiny.' How in the world do we dance?\" \n\nGwen said, \"Sometimes you are amazingly dense, Will. Let's practice right here. Do the box four-step.\" \n\nIt was like magic. I simply lowered my arms and Gwen raised hers and I took small steps and Gwen took big ones and it was wonderful.\n\nI said, \"I'm amazed, but we can do this.\"\n\nOut of seemingly nothing Gwen started laughing and she was laughing pretty hard.\n\n\"Now what?\" was my question.\n\n\"Oh Will, that line of yours about Madeline that numbers confuse her was the funniest thing I've heard in years. You'll have to tell me about her and her quantitative argument.\"\n\nWe entered the ballroom where a good sized crowd had assembled.\n\nSomeone yelled, \"Here they come!\"\n\nWe strolled in holding hands. Unbelievably, some creep walked up to us, whom neither of us knew, and said, \"Will, with your permission, may I have a dance with this lovely lady?\"\n\nI don't know what kind of answer he expected, but it wasn't \"Go fuck yourself.\"\n\nHe literally recoiled. The shock in the room might have measured on a seismometer somewhere until a few men and Gwen erupted into laughter and a smattering of applause followed.\n\nThe band, fortunately, started a nice tune and I nodded to Gwen and we walked to the center of the floor and began to dance. Gwen was still laughing and said, \"I didn't think you knew the 'f' word.\"\n\nI said, \"I try not to use it, but sometimes it comes in handy.\"\n\nGwen just laughed and we danced on and after four dances Gwen said, \"It's OK. We can go now, but first you have to pick me up and dance with me holding me up.\"\n\nI looked at her and said, \"I do?\"\n\nHer response was, \"Pick me up and dance.\"\n\nSo, I did and the crowd applauded and as they applauded Gwen leaned into me and kissed me for what must have been fifteen seconds. Then, as the music ended she said, \"OK, put me down.\"\n\nI deposited her gently on the floor and Gwen said, \"Good night everyone.\"\n\nI asked, \"What was with the marathon kiss while I was holding you?\"\n\nGwen looked at me and smiled. She said, \"That was a signal to every woman in that room that you are mine and out-of-bounds to them. In the plainest terms possible, your cock goes only in my pussy.\"\n\n\"That's what that was?\"\n\n\"Absolutely, that's what that was. The men had no clue, but every woman there got the message loud-and-clear.\"\n\n\"Was that necessary?\"\n\nGwen shook her head and explained, \"Will, after that award tonight, you're Trophy material. A lot of women want to make you a notch on their belt.\n\n\"I have no idea what you're talking about.\"\n\n\"Of course you don't. Numbers confuse Madeline: women confuse you.\"\n\nI sighed and said, \"OK, if you understand it, that's enough. But tell me about the cock and pussy part again.\"\n\nGwen laughed and laughed. \"Very soon, Old Man, very soon.\"\n\nWe went to Gwen's room and undressed and, once naked, Gwen sat on my lap and thanked me again for the evening and the clothes and the shoes and for being so good to her.\n\nI just squeezed her and she guided my mouth to her nipple. I sucked gently and she stroked my cock. I switched nipples and her stroke quickened. I sucked her for a few moments more and she said, \"OK\" and removed her nipple from my mouth.\n\nShe pushed me on my back and got between my legs and began to suck my cock. I cautioned her, \"Don't get hurt.\"\n\nShe stopped sucking and asked, \"What?\"\n\nI pointed out that my cock grew two inches tonight when they gave me that award. Gwen collapsed into laughter and rolled around on the bed laughing. Eventually she resumed sucking me until I was moaning. Gwen gave me a final lick and scrambled on top of me and squatted with her pussy over my face. I parted her lips and licked something molten. I licked her endlessly and she squirmed and moaned. When I licked her clit she said, \"No, Will, you'll make me cum and I want your cock in me for that.\"\n\nI resumed licking her and she moaned, \"Oh, Will...\"\n\nShe made me pause and she turned over and presented me her pussy again while she grabbed and sucked my cock. We licked and sucked each other endlessly. Finally, she got off me and mounted me. I simply moaned and managed to mutter, \"Oh, Beautiful, you are wonderful.\"\n\nShe slid up and down on me and drove me crazy. I had to sit up so I could hold her and look into her eyes. We simply rocked into each other and stared at each other. Soon we were smiling and the only sound was the squishing of my cock penetrating her pussy.\n\n\"Beautiful, this is the most wonderful feeling in the world. There's nothing better than being in your pussy.\"\n\n\"Will, I think I'll be living for these moments from now on. I love this and want this and need this\"\n\nWe rocked some more and Gwen began to pant\n\n. \n\nI asked Gwen, \"Do you want me to cum in you now or do you want me to save it for later.\"\n\n\"Save it, Will. I'll want you again, soon.\"\n\nShe panted more and then she gritted her teeth and said, \"Will David?\"\n\n\"What is it, Gwen.\n\n\"This cock\" and she grunted and grimaced, \"is mine now. You understand?\"\n\n\"Yes.\"\n\n\"Your...ugggggghhhhh...tongue is mine now. You understand?\"\n\n\"Yes.\"\n\nShe was rocking faster and grunting, but she managed to gasp, \"You are mine....ohhhhhh.....now. Yes?\"\n\n\"Yes, Gwen.\"\n\n\"Uggggggghhhh.....Uggggggghhhh....Oh, I'm cumming, Will.\"\n\n\"Oooooohhhhhhhhhhhhhhhhhhhhhhhh! And she stiffened and drenched me with the gush of her cum.\n\nI slowly leaned backward and pulled her onto my chest.\n\nShe was gasping for breath and sobbing and muttering something I couldn't make out.\n\nEventually, she calmed and raised her head and looked into my eyes. \"Will David?\"\n\n\"What, Beautiful.\"\n\n\"You know where this is going don't you?\"\n\n\"Oh,geez, change the subject.\"\n\n\"You coward!\"\n\n\"Gwen, I'm not a coward. I've lived by myself my whole life. I haven't a clue what it would be like to share a house with someone. I sleep when I want. I eat when I want. I don't answer the phone. I read for hours. I'm a bachelor.\"\n\n\"Will!\"\n\n\"What, Gwen.\"\n\n\"Your days may be numbered.\"\n\n\"Yes, I know.\"\n\n\"OK, and you better remember it.\"\n\nI asked, \"Am I off the hot seat now? \n\n\"Yes, but I have one more question?\"\n\n\"Oh, boy. What is it?\"\n\n\"How many orgasms have I had since I met you?\"\n\nI had to laugh and say, \"Really, I have no idea.\"\n\nGwen said, \"I haven't been orgasmic in years. This is so wonderful. How do I thank you?\"\n\n\"Just keep doing what you're doing.\"\n\n\"Will, I'm shameless. I'm wanton, I'm aggressive. I'm perpetually wet when I'm with you. Is this really OK?\"\n\n\"I don't think words like wanton and aggressive fit this situation, Beautiful. You've been sexless since forever and you've discovered someone who appreciates you, enjoys you, wants you to laugh, wants you to tease him, wants to have sex with you, and yes, someone who doesn't know what love is but knows he's never felt like this before. You should be uninhibited and free-spirited and as crazy as you like. You call me an old fossil and that's not far from the truth. You've awakened me to the joys of dealing intimately with someone and wanting them to enjoy themselves and be everything they can be.\"\n\nGwen's eyes were watery and she simply hugged me.\n\nShe released me and had a devilish grin and asked, \"You're really not upset about the bra and panties are you?\"\n\nI laughed and said, \"I knew there was no way you were going to listen to me when you went out that door. I'm just thankful you didn't come back with purple stockings and a feathered hat as well.\"\n\nGwin kissed me and asked, \"Will you feed me now?\"\n\n\"Feed you? What are you talking about?\"\n\n\"Will, I'm starved. I hardly touched my dinner because I was so excited and having so much fun and interacting with people and playing with Ivan and praying that I wouldn't mess up and looking around and eating up the culture and learning who all the people were.\"\n\n\"Oh, OK. Where do you want to eat?\"\n\n\"I just need something light. Let's wash up and go to that coffee shop downstairs where you took me for coffee and cheesecake the other day.\"\n\n\"You mean we're going to return to the scene of the crime?\"",
        "\"Exactly. Where the Dirty Old Man seduced the virginal, man-hating, middle-aged woman.\"\n\nI said nothing for a long time and then finally, \"Gwen: who seduced whom?\"\n\nGwen's eyes became very big and she turned beet red and buried her face in my chest\n\n.\n\nI started laughing and rubbing my hands up and down her tush and kissing the top of her head.\n\nStill laughing, I said, \"I'm so glad you did. These may have been the two best days of my life.\"\n\nShe lifted her head and kissed me passionately.\n\nAs gently as I could I rolled her over and hovered over Gwen and guided my hard cock into her little volcano of a pussy and slid it home.\n\nGwen opened her mouth in a silent scream and wrapped her arms around my neck and her legs around my waist and we did the dance of love over and over again. We looked into each other's eyes and silently humped each other until Gwen screamed. She went rigid and, as she gushed, I bellowed and emptied myself into the inferno.\n\nWe collapsed. We simply folded into a heap. I have no idea how long we laid there until I felt Gwen's fists drumming on the back of my ribs. I heard her say, \"Get off me you big Sasquatch.\"\n\nLaughing, I rolled over and her with me. She commented, \"Lord,that would be embarrassing to die by suffocation trapped under Sasquatch.\"\n\nShe looked quizzically at me for a while and then said, \"I can't figure you out sometimes.\"\n\nI shrugged.\n\nGwen said, \"No, really. Sometimes you are so impossibly dense and then you have these insights that blow me away.\"\n\n\"Like what?\" I asked.\n\n\"I can't think of one other man whose ego wouldn't let him think that he'd seduced me in that coffee shop.\"\n\n\"I responded, \"Speaking of that, how did I become so fortunate for you to choose me?\"\n\n\"Will, I was a wreck at that presentation and then you really saved me a few times at the question and answer period and I was struck by the fact that you didn't have to do that. You were simply being kind. Then, you cared enough to take me to coffee and it was your eyes. You were concerned about me. I think that's what blew me away. Heck, I knew who you were. You are required reading in grad school. But, you had no ego. You weren't the great academic. You were concerned about me. I never felt that before from a man. I just melted.\"\n\n\"Wow, I am one lucky man,\" was all I could say.\n\n\"No\" Gwen protested, \"I am the lucky one.\"\n\n\"OK, we're both lucky then.\"\n\n\"Now, will you feed me? Please?\"\n\n\"I just laughed and said, \"Yes, Ma'am.\"\n\nGwen said, \"I'm leaking all over the place. Carry me into the bathroom.\"\n\nI carried Gwen into the bathroom and started to put her in the tub, but she said, \"Potty.\" \n\nI dumped her on the potty and asked if I could start the shower or did Anastasia want to do that.\n\nGwen giggled and finished peeing and said, \"Anastasia will take care of it.\" \n\nShe fiddled with the shower and I took a leak and joined her as she was complaining about what a mess I'd made of her. I had to point out that I was old and had only managed a few squirts and she was the real culprit in the mess between her legs. Naturally, she stuck out her tongue at me.\n\nWe finished showering and dried off and I dressed in my suit while Gwen put on some jeans and a sweat shirt. I asked her to grab whatever she needed for the night in my room and we were out the door. In my room I hung up my suit and dress shirt and tie and slipped on some jeans and a sweatshirt and we headed for the elevator and coffee shop.\n\nWe exited the elevator and were half way across the lobby when Gwen spotted a friend and waved. Her friend waved back and then frowned. The friend walked up to us and said, \"Dr. David, may I borrow Gwen for a moment?\"\n\nI said, \"Surely,\" and the friend took Gwen aside and saw her speaking urgently to Gwen. Gwen looked troubled and nodded and they hugged and parted.\n\nGwen returned to me with her arms across her chest looking a little crestfallen. I looked quizzically at Gwen and she sighed and explained. \"Bonnie had three things to say.\"\n\n\"Uh huh, I responded.\n\n\"First, she said, you are a hunk and then she told me that I had to wipe the 'I have just been well and truly fucked' look off my face and third she told me to put on a bra because I was jiggling and my nipples showed.\"\n\nGwen looked like she was going to cry and I simply burst out laughing.\n\nAs I stood there laughing, Gwen said, \"It's not funny. I have been well and truly chastised.\"\n\nWhen I could stop laughing I said, \"C'mon, I've seen your nipples before. It's time to eat.\"\n\n\"No, Will, no one else is supposed to see my nipples. I have to go put on a bra.\"\n\n\"Gwen, put your arms over your chest and get in the coffee shop.\"\n\nGwen grumbled, but led the way into the coffee shop. Even at this late hour it was crowded and there were obviously folks from our association banquet there because we were the recipients of smiles and waves. Gwen stiffened at the sight of one fellow waving and saying \"Hi Gwen.\"\n\nGwen's good manners prevailed and she acknowledged his greeting nicely.\n\nWe found a table and I said, \"I noted some distaste on your part for that fellow.\"\n\nGwen nodded, \"He's in my department and I learned that he cast a negative vote about me during my hiring process. On campus he doesn't even speak to me, but now that I'm with you, I'm just special.\"\n\n\"Tell me his name and I'll have him rubbed out tonight.\"\n\nGwen grinned and said, \"Maybe numbers confuse him, too\" and she laughed.\n\nWe ordered, soup and a wrap for Gwen and coffee for me. When the waitress left Gwen said she had a question and I nodded for her to proceed.\n\nShe asked, \"I've seen you interact with people, not just me, and you are the same with everyone, except me. You treat me like I'm a princess, but I'm not talking about us. You just don't get arrogant or aloof with people, but you really are a big deal in our field. Why are you so low key when I see arrogance everywhere I look on my campus.\"\n\nI nodded and said, \"I have a variety of reasons. One of the nicest, most unassuming guys I know is an economist, about ten years older than me. He won a Nobel Prize one day and it never changed him one bit. He was the same, guy pre and post-Nobel.I admired that and thought that should be emulated.\n\nSecond, I learned that no matter how good you are or how smart you are, someone is going to be just a little or just a lot better or smarter than you are, so don't boast. \n\nThird, no matter what you do, 900 million Chinese don't give a damn so keep it in perspective.\n\nGwen just took it in and finally said, \"It's nice. Arrogance is ugly.\"\n\nGwen's meal arrived as did my coffee and she ate and I sipped. After ingesting some nourishment, Gwen looked up and asked, with a quavering voice, \"When will I see you again?\"\n\nI replied, off-handedly, \"Oh, whenever you want.\"\n\n\"What do you mean?\" she asked frowning.\n\n\"Just what I said,\" I responded.\n\n\"But, you have grad students, you have classes, you have committee work...heck, you may be the departmental chair for all I know.\"\n\n\"No, I'm on sabbatical this semester writing a book.\"\n\nGwen's mouth opened and shut and opened and shut and a few squeaks were emitted, but nothing intelligible was forthcoming. Finally, she collected herself and said, \"I could kill you. In fact, I might do just that. I've worried myself sick for two days about saying goodbye and wondering when I'd ever see you again you never mentioned that you were on sabbatical.\"\n\n\"Wait a minute,\" I said. \"I told you time, money, and effort wouldn't get in the way of seeing you after we left here.\"\n\n\"I know what you said. But, what you didn't say was you were on sabbatical.\"\n\n\"Is that relevant?,\" I asked?\n\n\"Relevant? Relevant? You want to know if that's relevant? Sometimes Will you are so dense! Tomorrow is Wednesday. You have one week from tomorrow to get yourself, your cats, your computers, your notes, and your clothes to my house. I'll have library privileges for you at the library by then.\"\n\n\"Is that an invitation to stay with you?\"\n\n\"No, you old fossil, that is an ultimatum to get your bony ass into my house and my bed by then.\"\n\n\"Gee, Gwen, I never knew my ass was bony. That's a revelation.\"\n\n\"Gwen said, \"I may also murder you in your sleep tonight.\"\n\n\"I responded, \"Now, that would be a self-defeating behavior.\"\n\n\"Just why would that be self-defeating behavior?\"\n\n\"You'd kill my tongue along with me.\"\n\nIn spite of herself, Gwen laughed hard enough and loud enough to draw attention to herself.\n\nWhen she finished laughing she again glared at me and asked, \"And, why didn't you tell me this before tonight?\"\n\n\"Well, gee, Gwen, it just never came up before tonight.\"\n\n\"Will, you have to be the densest old fossil extant.\"\n\n\"Gwen, think about that. Statistically, that is very, very improbable.\"\n\nGwen buried her face in her hands and her entire body shook as she silently laughed. When she settled down she looked at me and shook her head, \"Numbers confuse Madeline and everything else confuses you.\"\n\nShe finished her dinner alternately glaring at, and then laughing at me.\n\n\"Thank you for dinner, Old Man. Pay the bill and let's go.\"\n\nWe headed to the elevators with Gwen's arms covering her chest and a frown on her face. I asked her why she was frowning and she said, \"I'm making sure I don't have that 'well and truly fucked' look on my face.\"\n\n\"Oh! Well, may I see your nipples?\"\n\n\"On the elevator, if we're alone.\"\n\nHappily, we were on the elevator alone so Gwen lifted her sweat shirt for me and I fondled her gorgeous breasts and commented, \"You really do have the most beautiful breasts, Gwen.\"\n\n\"Will...they're called 'ta-tas now.'\"\n\n\"What are?\"\n\n\"A woman's breasts. They're called ta-tas.\"\n\n\"They are?\"\n\n\"Yes.\"\n\n\"Gee, that sounds like something I'd order in a Mexican restaurant. I'd like a side order of ta-tas please.\"\n\nGwen dropped her sweatshirt and laughed so hard she snorted. The elevator stopped and the doors opened and there stood my old buddy, Dick Willkie, and his wife, Dorrie, from UCLA.\n\nDick yelled, \"Hey Will! Hey Gwen!\"\n\nGwen smiled nicely and nodded to them both and I said, \"Dick, did you know that women's breasts are now called 'ta-tas.'\"\n\nDick looked as mystified as I was and his wife and Gwen erupted into laughter.\n\nDick said, \"I have no idea what you're talking about.\"\n\n\"Well, neither do I for that matter, but I just learned that.\"\n\nDick turned to his wife and said, \"Do you know anything about this?\"\n\nShe erupted into a peal of laughter and yanked Dick into the elevator and Gwen yanked me down the hall.\n\nI turned to Gwen \"Explain this to me.\"\n\n\"Oh, shut up, Will, and just call them ta-tas from now on.\"\n\nWe walked into my room and Gwen commented, \"I may rethink my career goal if being a scholar means being like you two idiots.\"\n\nWhen in doubt, keep quiet, is my motto.\n\nGwen said, \"C'mon, get ready for bed.\"\n\nWe went into the bathroom and I brushed my teeth while Gwen used the potty and then we reversed positions and went to bed.\n\nGwen snuggled up to me. I asked, \"Are you angry with me?\"\n\n\"No,\" she responded. \"But, sometimes, Will, you are impossibly dense and it's exasperating. Not telling me you could come live with me now was just dumb.\"\n\n\"But, you're not angry?\"\n\n\"No.\"\n\n\"OK, will you explain the ta-tas thing then?\"\n\n\"No, I won't, but you can suck mine.\"\n\nShe gave me her left breast and I licked it and teased it and sucked it and she moaned and took my hand and brought it to her pussy and said, \"Put your finger in me.\"\n\nI did and she gripped my wrist and pumped her pussy back and forth on my finger.\n\nIt was music to my ears to hear her little cries of \"Uh, uh, uh, uh, uh, uh uh uh\" and then \"Ohhhhhhhhhhhhhhhhhh\" and she stiffened and soaked my hand.\n\nShe lay still for a while and then removed my hand and crawled on top of me and kissed me.\"\n\nThen she wrapped her arms around me and lay on my chest.\n\nI said, \"I'm sorry I'm not twenty years younger, Beautiful, so I could get hard for you more than once or twice a day.\"\n\nGwen murmured, \"If you were twenty years younger I wouldn't look at you. It's because of who you are now that I want you and I want you so badly that you make me crazy.\"\n\nI squeezed her so hard she squealed and I relaxed my hold on her.\n\n\"Do you want me to lick you now?\"\n\n\"I'll wake you later for that. Go to sleep now.\"\n\nShe fell asleep beside me holding my cock and I slept deeply.\n\nWe slept until morning and I came awake as Gwen pushed me on my back and climbed on my chest. She kissed me until I opened my eyes and she whispered, \"Good morning, Old Man.\"\n\n\"Hi Beautiful,\" I whispered.\n\nGwen scooted up my chest until her pussy was touching my chin and she pulled open her pussy lips for me to lick.\n\nI licked with gusto. Gwen sighed and then moaned and gasped, \"Oh, you wonderful Old Man.\"\n\nShe wrapped her hands around my head and held me to her pussy and humped my face. She was verging on losing control because she was squealing and panting and then she did lose it. I felt her stiffen and squeal and she gushed.\n\nGwen literally fell forward onto me and I had to struggle to get her dead weight centered on my torso. She was simply lifeless for minutes and then she roused herself. She kissed me and I asked, \"Are you OK?\"\n\nShe said, \"I'm fine. I awoke so horny for you this morning that I knew I had to cum before you put your cock in me or I wouldn't have lasted a minute on your cock. I wanted to last a long while with your cock in me.\"\n\n\"That's nice. Thank you.\"\n\nShe rested a little longer and I asked, \"When I live with you, will we do this every morning?\"\n\n\"Yes, every morning except when I'm having my period. If you'd like, I'll take care of you in other ways, then.\n\n\"Wow\" was all I could say.\n\n\"Will you screw me now?\"\n\n\"What do you think?\"\n\n\"Like yesterday?\"\n\n\"I loved it,\" I said.\n\nShe scooted back down my torso and leaned over to suck me. Her comment was, \"Oh my, Ivan is hard already. Is it OK if I suck him for a while?\"\n\nI smiled at her and asked, \"What do you think?\"\n\nShe began licking and sucking me and she did such a good job of it I was thrusting into her mouth. I gasped, \"Your mouth feels like Anastasia.\"\n\nGwen didn't comment, but she did rise up and squat over me and impale her pussy on my very hard cock.\n\n\"Aggggggggggghhhhhh\" was my response and I sat up and we held each other until we calmed down. Then we looked very calmly, into each other's eyes.\n\nWe smiled and rocked and smiled and Gwen said, \"Oh Lord, how I love Ivan in me.\"\n\n\"I think Ivan loves being in you even more than you love having him in you.\"\n\n\"I doubt it, Old Man. You do this spectacularly well. I can't believe your staying power.\"\n\nWe rocked some more and Gwen said, \"Will, please try and always treat me as you do now. I feel so very, very special with you.\"\n\n\"That won't be hard, Beautiful.\"\n\nI noticed Gwen was grimacing now and she was breathing more deeply. She groaned, \"I won't last much longer, Old Man. You're making me cum.\"\n\n\"Whenever you want to, Beautiful.\"\n\n\"Give him to me harder\" she asked.\n\nI did and she moaned and her moan triggered my response. I felt the stirrings deep in my balls. \"I'm cumming soon, Gwen.\"\n\n\"Hurry\" was all she could blurt and she screamed. Her scream triggered my release and we held each other tightly and she poured her fluids onto me and I pumped mine into her.\n\nI'm not sure, but I may have blacked out. Certainly I fell backward at an odd angle on the bed and Gwen fell across me. I'm sure I came to my senses pretty quickly because I looked for Gwen. She was dead weight and it took some real effort to pull her on top of me. She was simply limp and unmoving.\n\nI reached down and began massaging her beautiful tush and that roused her. She very groggily looked up and asked, \"What did you do to me, Will.\"\n\nWell, I guess I made love to you.\"\n\n\"Boy, did you ever. I may have to frown all day now\" she commented.\n\n\"Gosh, does that mean you'll wear a bra, too?\" I had to ask.\n\nWe both laughed and squeezed each other.\n\nWe lay there awhile and Gwen said, \"Potty and shower.\"\n\nVery slowly we got up and Gwen asked, \"Are you OK, or are you wobbly?\"\n\n\"I'm OK,\" I responded.\n\n\"Oh geez, I'm dripping again. Can you carry me to the potty.\"\n\nI did and set her down as gently as I could. She said, \"Stay here\" and she rested her head on my thigh. She looked up and said, \"Old Man, tell me again what you did to me?\"\n\nI said, \"I guess I made love to you.\"\n\n\"I hope that's all you did. I'm wiped out.\"\n\nGwen eventually got off the potty and leaned against my back while I took a leak. When I finished, I asked, \"Shower?\"\n\n\"Uh huh, she murmured. \n\n\"Will you do the honors or shall I?\"\n\n\"Ugh, I'll do it or you'll parboil me.\"\n\nWe showered and she held onto me while I dried her. I suggested some breakfast because she clearly wasn't herself. She agreed, so I called room service and indicated there'd be an extra tip if we could have something in five or less minutes.\n\nIn four minutes we had eggs and bacon and coffee and juice. Gwen ate pretty quickly and both her color and demeanor improved right away.\n\n\"OK,\" she said, I'm in the here and now. I have to go pack and get to the airport. How about you?\"\n\n\"I don't leave until four o'clock because I have another executive committee luncheon and meeting at Noon.\n\nGwen started writing something on the note pad at the phone and she said, \"These are all my phone numbers. Put this in your wallet. My e-mail address is on it, too.\"\n\nI reciprocated and she put the paper I gave her in her jeans.\n\nShe had tears in her eyes when she said, \"I have to go pack. Come with me.\"\n\nShe jumped into her sweatshirt and jeans and picked up a few toiletries and then walked over to the closet and grabbed the dress shirt I had worn to the dinner the previous evening.\n\nI asked her what she was doing with my shirt and she said, \"It has your scent on it. I'm taking it with me.\"\n\n\"Why in the world are you taking my shirt.\"\n\nGwen got that devilish look in her eyes and smiled for the first time that morning. \"I want this shirt.\"\n\n\"May I ask why?\"\n\n\"You may.\"\n\n\"OK, why?\"\n\nGwen said, \"Every night, until you move in with me, when I go to bed, I'm going to smell this shirt and then put it between my legs and rub it on my pussy until I cum thinking about you.\"\n\n\"Uhhhhhhhhhhhhh...gee, well, Uhhhh...wouldn't one of my socks work?\"\n\nGwen said, \"Pick me up.\"\n\nI picked her up and when she was at eye level she said, \"I want this shirt.\"\n\nI asked, \"Is this like the bra and panties thing?\"\n\nGwen smiled, \"There's hope for you yet, Old Man. This is exactly like the bra and panties thing.\"\n\nI just looked at her and she said, \"Put me down.\"\n\nI put her down gently and she took me by the hand and said, \"We're going to my room to pack.\"\n\nWe arrived at Gwen's room and she began packing things and suddenly turned to me holding up a pair of her panties. \"Do you want a pair of these in exchange for the shirt?\"\n\nI looked at her mystified. \"What in the world would I do with a pair of your panties? They wouldn't even fit around my leg.\"\n\nGwen simply cracked up and said, \"Oh you dear, dear, Old Man.\"\n\nShe walked up to me and said, \"Pick me up.\"\n\nI did and she wrapped her arms around my neck and kissed me forever. When she finished she said, \"Put me down.\"\n\nI did and asked, \"What just happened?\"\n\n\"Never mind. It's like the ta-tas. You'll never understand it.\"\n\n\"Is it important that I do,\" I asked.\n\nGwen shook her head, \"Not at all.\"\n\n\"You know,\" I ventured, \"sometimes I when I'm with you get the idea I really don't know what's going on.\"\n\nGwen laughed and laughed and said, \"Will, truly, you don't know what's going on most of the time with me, but it's all right.\"\n\nI sighed deeply.\n",
        "Gwen heard me sigh and turned from her packing. \"It's nothing to worry about, Old Man. Now sit here in the chair.\"\n\nI sat.\n\nGwen unzipped my jeans and pulled Ivan out and said, \"I just want to hold Ivan one last time before I go\" and she licked him and gave him a suck and kissed him.\n\nHer eyes were full of merriment and she said, \"You don't even know you have a fire-hose of a cock.\"\n\n\"What does that mean?\"\n\n\"It's not important\" Gwen said as she climbed in my lap and kissed me.\n\n\"Beautiful, I have no idea what love is, but is it possible that I'm in love with you after two days of knowing you?\"\n\nGwen's eyes were again full of merriment. \"Gee Old Man, what was your first clue?\"\n\n\"Well, let me think....\"\n\n\"Gee, Will, do you think that it might have something to do with the fact that you simply let me get away with murder with you? Or, could it possibly be that you didn't think twice about spending a small fortune so I could accompany you to the dinner? Might it just conceivably\" and she was laughing,\" be that treat me like a precious porcelain doll? Or, as inconceivable as it sounds, could it have something to do with the fact that you were ready to kill that scumbag who wanted to dance with me last night?\"\n\nShe paused and asked, \"It couldn't be any of those things, could it?\" and she batted her eyes at me.\n\n\"Oh, heck, I don't know.\n\n\"\n\nGwen just laughed and, again, I had no clue why.\n\nThen she said, \"We'll know soon enough what is real and what isn't when you move in with me. Trust me, I lived with an asshole for fifteen years and I'll know soon enough if this incredible, mind-blowing, experience is real or not.\"\n\nI nodded my approval.\n\nGwen said, \"I have to get to the airport.\"\n\nI said, \"Well, I'm certainly coming with you.\"\n\n\"No,\" please don't Old Man. If you're there I'll absolutely dissolve when I have to get enter the security area. Let me go alone so I can maintain some composure.\"\n\n\"Really?\"\n\n\"Yes, really. Just remember to call me every day.\"\n\n\"I will.\"\n\n\"OK, get your great hulking mass out of here before I start crying.\"\n\n\"OK...Oh, wait I have a question.\"\n\n\"What?\"\n\n\"Will you give me my shirt back in a week?\"\n\n\"Pick me up.\"\n\n\"Uh...OK\" and I picked up Gwen and brought her to my eye level.\n\nGwen was smiling through some tears and she said, \"Go get a new shirt. You won't want this one after I'm done with it.\"\n\n\"Oh.\"\n\n\"Now, give me a big kiss, put me down, and then go.\"\n\nI did and I did and I did.\n\n------------------------------------\n\nLet me know if Part 3 is desired. "
    ],
    "authorname": "Bedu",
    "tags": [
        "gwen",
        "will",
        "academic",
        "drama",
        "older man",
        "younger woman"
    ],
    "category": "Mature",
    "url": "https://www.literotica.com/s/at-long-last-gwen-ch-02"
}
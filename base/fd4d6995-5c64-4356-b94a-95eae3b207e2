{
    "title": "Technically We're Estranged Ch. 05",
    "pages": [
        "====================================\n\nAll characters are 18 years or older.\n\nThis story is the continuation of my Technically We're Estranged series and I suggest reading the previous chapters before continuing. TWE is intentionally shorter, and hopefully you enjoy the tease. It includes incest, exhibitionism and voyeurism through the internet, masturbation and oral.\n\nStephan tries to fix things with Mel, and Bella gets frustrated before they all get off.\n\nThanks to Antematter for checking it over, and making sure I was still alive.\n\n====================================\n\n\"Stephan,\" Bella called after me as I walked into my office, \"You're being an idiot.\"\n\nI turned around and poked my head back out. \"I know I am.\"\n\nDespite the fact that Mel was a world away, the fact that she was a camgirl, that she hadn't actually done anything, and most of all that she was my cousin, I still felt betrayed. Totally, utterly irrational. My emotions were all over the place - we hadn't talked since I had told her to wait until today and that was throwing me into a tailspin as well. For the past three weeks of getting to know my cousin again it was like I had her here with me, and now I had cut myself off.\n\nMy lonely night out, eating alone at a restaurant, going home to an empty apartment, had only served to frustrate me further. The closest friend I had on the continent was also apparently my secretary and wanted to sleep with me - Bella was the only person I could talk to about this. Sure, I had other friends from College days but we were distant at best. My clientele worried people, my successes kept criminals on the street. Who wanted to be friends with the scumbag who did that?\n\nBut Mel, she didn't know that, and if she did she wouldn't care. Blind faith, blind compassion - she would love me all the same. But would she?\n\nBella could tell I was out of sorts when I stepped out of the elevator and into our little lobby. She'd stood, as always, with a file in one hand and a coffee in the other, today in a black dress that was high collared in the front but backless, the skirt riding high on her shapely, athletic thighs. \"Good morning, Mr. Tanner,\" was all she had said as we performed the morning ritual we had perfected over our years together. File in one hand, coffee in the other, I nodded my thanks quietly and went to my office.\n\nAnd then she broke the ritual, and so did I. We'd been doing that a lot recently. Sitting in my office, I had to close my eyes to think.\n\nEvery morning for the past three weeks I had woken up to a picture, or a message, and once even a video from Mel sent to my anonymous account. She didn't know my name, she only knew my pseudonym. OverCsSteve. But then I wasn't supposed to really know her name, she was just DellaLightful and not my Mel.\n\nI stared down at my phone, playing the most recent video she had sent me quietly. She was lying in bed, the covers up around her shoulders and her eyes still sleepy. No makeup, still pretty but not perfect. She whispered to me about how she was going to do the girl-girl show that had happened yesterday, whispered about how she dreamt about me and how she was doing this because she was curious and I thought it was hot. She smiled dreamily, her voice breathy. Morning light was peeking through a window off screen, bathing her in an angelic light. And then the video was over.\n\nI'd watched it plenty of times before. I watched it again, leaning my head against the edge of my desk as I tried to block out the world.\n\n'I'm sorry,' I typed out. Yesterday I hadn't needed to say that. Yesterday, Mel was the one who had broken a trust, however tenuously and minutely, when her friend talked about what Bella and I had been doing.\n\nToday I was the idiot.\n\nOverCsSteve: I'm sorry. I shouldn't be frustrated but I am. I shouldn't feel hurt, but for some reason I do. I'm being an idiot. I feel like I'm some raving teen. This is totally my fault and I wouldn't blame you if you wanted to stop talking or whatever, I'd just be happy we did for at least a little while. Tell Pixie I apologize, she didn't do anything wrong and was great in the show.\n\nI hit the send button before I could rethink the message, before I could wordsmith it or try and build in some nuances. I set my phone down and turned on my computer, but before it could even boot up my phone let out the little bingle that I had a notification from Kik. I grabbed it and fumbled the password twice before I got it unlocked.\n\nDellaLightful: omg steve I'm like crying I'm so happy you messaged\n\nDellaLightful: I felt lonely when we weren't talking and I thought you were so pissed at me I wouldn't see you again.\nDellaLightful: and STOP saying ur sorry right now. I know you don't like stuff getting out about you. Pixie feels super bad she didn't realize how srs I was when I told her not to say anything about the cam-to-cam.\n\nI had to take a deep breath to steady my nerves. She wasn't pissed at me, didn't think I was crazy or being a child.\n\nOverCsSteve: Della, I AM sorry. I'm sorry I made you worry and I'm sorry I kept you waiting and I'm sorry I'm an idiot. Believe me, I think the only way you'll get rid of me is if you tell me to leave you alone.\n\nOverCsSteve: You are the complete package of beauty and brains, but most of all you are the kindest, most beautiful person I know on the inside.\n\nDellaLightful: Oh great, now I'm crying again.\n\nDellaLightful: And I'm still at work so people are gonna look at me like I'm crazy\n\nOverCsSteve: I bet you're even pretty when you cry, breaking hearts all over the hospital.\n\nDellaLightful: :) Stop complimenting me! I'm supposed to be the one who's sorry\n\nDellaLightful: BRB, need to do work.\n\nIt was ok. I don't know how, but everything was ok with Mel. I honestly should have known better than to think she would be done with me - my cousin had always been a bit of a bleeding heart for anyone who was hurt. She'd been the one to console me when my highschool girlfriend, a senior while I was a junior, broke up with me when she went to college even though she was still on the island.\n\nMel had spent an entire weekend cramming me full of peanut butter icecream and watching rom-com's with me, cuddling on the couch in our pj's. On the third day she took me surfing, forcing me to stay out on the water until I caught a perfect wave all the way to shore. She knew instinctively what I had needed, more than my guy friends could have ever helped with. I had loved her the most out of my entire family.\n\nNow I just loved her.\n\nI'd thought about it before but it was something I couldn't put into words in the real world. It wasn't something I wanted to send to her over text, or in a snapchat or even in a video. I needed to say it live, talking to each other. I needed her to know who I was, to know what it actually meant. But that was the problem - she was my cousin. She loved me too, in the family way, I'm sure. We'd always have our childhood and high school together. If I revealed who I was, it would be like souring all of that for her because I had turned into some creep who watched her on the internet.\n\n************\n\nBella knew something had happened as soon as she brought in the first client for my morning meeting, but couldn't ask me anything. John Marc could though.\n\n\"What's happened?\" the crime boss asked as he sat down in the plush chair across my desk. \"You look like you got hit by a bus then raised by an angel.\"\n\nI chuckled under my breath, shaking my head. \"Something like that, John Marc.\"\n\n\"Lady troubles? You're not one to get stuck on a girl, Stephan, I'm surprised at you.\" The dark haired italian man was big, but over the few years I had known him I had been surprised to find he was empathetic. Sometimes that made him seem like a softy, but I also knew it could make him a very scarey man to cross.\n\nSighing, I shrugged, \"It's a first for me, honestly. The whole thing is complicated.\"\n\n\"So uncomplicate it,\" the big man grinned. \"Pussy isn't hard to come by, my friend, but a real woman? Rare as can be. If she's pussy, drop her. You don't need the hassle. If she's a woman, be a man. Do the right thing.\"\n\n\"It's not like she's pregnant, John Marc.\"\n\n\"Even better,\" he laughed, \"Usually that's what complicated means. Is it another guy?\"\n\n\"No,\" I shook my head, \"It's all me, honestly. Gotta get my head straight when it comes to her. But that's all personal, and you're a busy man. What can I do for you, you usually don't drop by like this. Is something wrong?\"\n\nThe crime boss took a deep breath and shook his head, \"No, no, everything's fine. I wanted to come by myself to express my apologies over the actions of my brother yesterday, to you and to Bella. Joey is an ungrateful bastard and has been riding on our family name since we were kids. He won't be doing that any more, but I wanted to be sure you understood how deeply I disapproved of what he did.\"\n\n\"John Marc, there's no need-\" I started as my client reached into his jacket and pulled out an envelope.\n\n\"No, there is. I know I've already paid for the time he's wasted, you billed it fair and square, but this is just something extra for all the trouble he caused. You've saved my family and associates a great deal of grief since we hired you, our appreciation should be known.\"\n\nI didn't look in the envelope when he handed it to me, instead silently nodding my thanks and slipping it into my own inner suit pocket. \"I thank you,\" I said, standing to follow him as he headed towards the door.\n\n\"No need, Stephan. You're valuable, and every once in awhile you need to show your valuables that you care.\" He grinned to me, \"I've apologized to Bella as well, I'm sure she'll share something from the gift basket with you.\" He paused and cocked his head, eyes narrowing slightly, \"It's not Bella, is it?\"\n\n\"No,\" I said, holding up my hands. \"It's not her, though she's part of the problem.\"\n\nJohn Marc rolled his eyes and his grin came back, \"I still haven't figured out if she'd be worth angering my wife over.\"\n\n\"I bet she would,\" I smiled back, thinking of Bella spread and fingering herself in the chair next to me as we watched Mel's show yesterday. \"But then again, I haven't seen your wife angry.\"\n\n\"Pray you never do,\" John Marc laughed.\n\nI walked him out and he gave Bella another brief apology, bending to kiss her hand as he left, making her blush. As the elevator doors closed, Bella walked over to stand next to me in the middle of the small lobby.\n\n\"How was the meeting?\" She asked innocently.\n\n\"Fine, Bella,\" I answered.\n\n\"And your other meeting?\"\n\nI took a breath. \"Fine, Bella.\" I turned and walked back to my office but felt bad and turned while still in the threshold. \"It was good.\"\n\nShe smiled sweetly, but something in her eyes looked distant.\n\n************\n\nI didn't get any teasing pictures beyond the ones Mel sent wide today, and even those were a little more demure than usual. It was obvious we were still a little bit on tenterhooks, our usual back and forth a bit more tentative. The flirting was downplayed but still there, it felt more like status updates than anything else.\n\nAs morning turned to afternoon I found myself furtively checking the clock. I'd been doing this for weeks, but it had always been in excitement - now it was nervousness. Would things be different with us feeling weird? Would she be ok to do her usual show?\n\nWhy did I even think it wouldn't go the same as usual?\n\nWith five minutes to go Mel had already sent out her notification tweets and snapchats, she was dolled up but wearing a baggy t-shirt with a deep v-neck that showed off a ton of cleavage, her long hair up in a messy bun instead of loose and flowing. I was just finishing up reading a document when Bella knocked on my door and opened it, peeking her head inside tentatively.\n\n\"Hey,\" she said.\n\n\"Hey?\" I asked. Bella never knocked on my office door.\n\n\"I, ah-\" She stuttered, stepping into the room. \"I was wondering if... well, yesterday went so well... Can I watch in here with you again?\"\n\nShe was blushing and biting her lip and I had to take a breath. \"Um-\" I said.\n\n\"Technically the bet wasn't just for yesterday,\" she rattled off. \"It was that I could come in here and watch on our breaks, how many times or when wasn't stipulated.\"\n\nI could tell she had been practicing that one. \"I- yeah, ok.\"\n\n\"Ok?\" She raised her eyebrows.\n\n\"Sure. We won't be camming back to her today though.\"\n\n\"That's fine,\" Bella said, walking over and moving the extra chair I had set up yesterday to behind my desk. She reached up and fiddled with the tight collar of her dress which clung to her neck, supporting it up and leaving her shapely back bare. \"This dress is harder to get off than yesterday, so I'm just gonna take it off to start.\"\n\nShe stripped off the cocktail dress quickly, revealing her pert, small breasts with their soft brown nipples. The dress had required her to go braless, but I was surprised to see she'd been totally commando, her smooth mound immediately bare to my eyes. She ran a hand down her tight, athletic stomach, fingers brushing over that mound as she stood before me. \"Is that ok?\"\n\n\"Yeah,\" I said a little hoarsely, blinking. Fuck, but she was a beautiful woman.\n\nI reached to the computer and logged onto the camming site, bringing up Mel's page. She hadn't logged on yet but there were already several hundred people sitting, the chat streaming by as people referenced the show from the day before. Mel's popularity had blown up after doing a girl-girl show, her rating on the site rocketing up to within striking distance of the top 20 list. \n\nBella sat down in the chair next to me, legs slightly spread, leaving herself open to my view. I took off my suit jacket and tie, unbuttoning my shirt halfway but leaving my belt and pants alone.\n\n\"Stephan,\" she breathed out, but then the screen lit up as Mel started camming.\n\nThe show started slow as Mel talked about seeing Pixie off and answered questions about when she might have another girl on. She looked a little frazzled but still my beautiful Mel. About fifteen minutes in, once the first tips had started rolling in, I picked up my phone and messaged her.\n\nOverCsSteve: Your hair looks great.\n\nHer phone buzzed as she was talking to someone and she glanced down at it, finishing her answer before reading my message. She smiled and brought a hand up to her hair, tucking a loose lock behind her ear.\n\nThe first half hour slipped by and Mel had started her teasing. \"I've got some news once the countdown ends guys,\" she said over and over. \"Once you get me naked I'll tell you what the next big thing is.\"\n\nI sent her a series of question marks, which when she received them her mouth twitched to the side and she bit the inside of her lip lightly. Why is she feeling self conscious? I knew Mel's ticks, and she wasn't sure about the news she was going to give.\n\nEventually her shirt came off, followed by her bra. She wasn't as happy-go-lucky as she usually was, not really singing along with her music or goofing off as much. Something was on her mind.\n\nSomething was also on my mind. When Mel took off her shirt, Bella readjusted herself in her seat so that her far leg from me was lifted over the arm of the chair, spreading herself open wide as her other foot brushed against mine firmly. She was teasing herself, brushing fingertips over her body slowly as she watched Mel on the screen. I suppressed a groan as my eyes ran up and down her body before turning back to the screen.\n\nFor the number of people in her room, the countdown went slowly. Lot's of freeloaders taking advantage of the show, which I couldn't even find myself frustrated with since that was how I used the site for over a year before I came across Mel and started tipping. Clad in just her thin black panties, Mel started teasing herself and the viewers, bending over and rubbing herself a few times, stretching this way and that, playing with her enhanced boobs and tweaking her nipples lightly.\n\nDellasChoober: Where be OverC?\n\nJustaniceguy: Damn gurl u b fiiine\n\nDefToneJam89:Bend over again, but this time show us your bumhole\n\nMixerLot: I like big butts an I cannot lie\n\nP1ran1sLightful: I kno right? We need to speed this countdown up Choobs\n\nDellasChoober: Plus where be fElla? She's usually around too.\n\n\"They're missing us,\" Bella pointed out in the chat, gesturing with her hand before bringing it back and setting it on mine where I had it resting on the arm of my chair.\n\nI looked down at her hand on mine for a moment. \"They miss my tips and your flirting.\"\n\n\"Choobs, Pi, you can't rely on OverCs to finish every countdown,\" Mel said on the cam, though she was scrolling through something on her screen until her eyes lit up a bit and she smiled. Was she checking to make sure I was still here?\n\nThe final tips rolled in, spurred mostly by her two other 'most faithful' viewers and fans. Mel grinned faintly as the last tips came in, slowly standing from her seat and then adjusting her webcam so it stayed focused on her. Her fingers played in the stretchy hem of her panties, teasing it away from her hips. \"Do you guys want the news first, or the view first?\"\n\nHer regulars wanted the news, the freeloaders wanted the view.\n\n\"OK, well, I need a prop,\" she smiled, reaching off screen and grabbing one of the dildos she used in her shows. \"So this is a penis, and you guys seem to really like watching me slide this big, long one into my tight, juicy little pussy.\" Mel rubbed the tip of the dildo against her lips through the panties. One thing I noticed was that, for maybe the first time I had seen her like this in the past month, there wasn't a wet spot.\n\n\"And yesterday everyone loved watching me with PixieDust so much that I was thinking what other kinds of shows I could do with people.\"\n\nNo, I thought weakly, getting a feeling where this was going.\n\n\"So Pixie gave my number to a guy she's done some work with before, and he offered to make a little video with me. First I would suck on his big, hard dick,\" she slipped the dildo into her mouth, suckling on the head. \"Then I'd let him put it between my tits,\" the dildo left her mouth and cradled in her cleavage, which she pressed together. \"Then I would bend over like this, and he'd slip his thick, hot cock right up in me.\" She bent over the back of her chair and dropped her panties, toying the dildo at her pussy.\n\nMel suddenly turned around and sat on the chair, dildo in hand. \"But I wasn't sure if I wanted to make a video like that, or if you guys would want to see it. Do you want me to make a boy/girl video?\"\n\nShe was acting. I could tell she was nervous about the whole thing and the sexy act was overdone. Bella didn't know her as well as I did though, and she was slowly rubbing herself with the hand that wasn't clasped onto mine, moaning lightly.\n\nThe chat went berserk. 'Yes, yes, oh my god yes!' 'I would die for that video.' 'I wish I was that guy.' Hundreds of anonymous people telling Mel that she should fuck on camera, that she would make thousands. That she should go into porn, that she should do it live, that she should sell tickets.\n\nI shook my hand from Bella's and grabbed my phone.\n\nOverCsSteve: Don't\n\nMel was smiling into the camera, bantering with the viewers. Her phone went off and she frowned, looking up at the camera quickly.\n\nDellaLightful: How come?\n\nI typed quickly into my phone and Bella turned from the screen to me, sitting up.\n\nOverCsSteve: I don't have the right to say this, but no excuses about it ruining your life or something",
        "OverCsSteve: I just don't want you to.\n\nDellaLightful: Don't want me to make a video, or don't want me to fuck another guy?\n\n\"What the fuck are you doing?\" Bella demanded.\n\nI looked up to her and she looked as frustrated as I had ever seen her. She reached out for my phone and I stood, backing away from her.\n\n\"You don't have the right to tell her not to, Stephan. You aren't in a relationship, she doesn't even know what you look like. This isn't healthy.\" She was standing now, staring me down, hands on her naked hips.\n\n'Both,' I typed and sent.\n\n\"Bella, you can't tell me what to do with this,\" I said. \"I have feelings for her, feelings I haven't felt in a really long time.\"\n\n\"She's an entire world away, Stephan!\" She shouted. Bella stalked up to me, grabbing my hand and placing it on her breast, taking my phone from the other and setting it on the desk, taking that hand and placing it at her warm, slick pussy. \"You can't touch her, can't be with her, but you can touch me.\"\n\nI pulled my hands from Bella and turned around, squeezing my eyes shut and rubbing at my temple. Fuck. FUCK. I shouted internally to myself.\n\nThe bingle of my phone turned me around. Bella read it at the same time I did.\n\nDellaLightful: Ok, I won't. For you.\n\nBella sucked in a breath and left me, sitting back in her chair. Mel was still on cam, joking around. She sounded less tense, less unsure of herself. Like something had lifted from her spirit and she was rising up again.\n\nOverCsSteve: We should- No. I want to skype with you. Tomorrow. Face to face.\n\nMel looked up from the message, directly at the cam. Her eyes were alight and she was smiling broadly. \"Really?\" she asked, ignoring the chat room.\n\nOverCsSteve: Yes, but tomorrow. You have a mob to appease I think.\n\nShe grinned at the message and nodded, ignoring the few people who were asking why she was distracted. Mel leaned back in her seat, opening her legs and using her fingers to spread herself open for the camera. Her show started.\n\nBella sat quietly as I took my seat next to her awkwardly.\n\n\"Bella I-\" I started but she shook her head.\n\nStark naked, Bella got up and left my office, going out to her desk. I wasn't sure what she was doing, looking down at her dress still discarded on the floor. Had I just ruined the one relationship I had in the country that wasn't with a criminal?\n\nB.e.a.utifELLA: Can I play with him?\n\nFootsieTooToes: Omg you have such nice toes, I want to suck on them\n\nB.e.a.utifELLA: Della, please?\n\nCherryPickUpLine: Mmm, rub that kitty, lets see it squirt\n\nDaddyoMally: So hot in hurr\n\nBella walked back into my office, slightly flushed and her eyes cast downward, refusing the meet mine. I worked my jaw a few times but I didn't know what to say. It took Mel a moment to see the message as well, and she stopped moving as she read it a few times. Mel looked at the camera again, then reached for her phone, typing quickly with one hand while continuing to tease her labia with the other.\n\nDellaLightful: Do you want to? What is she wearing?\n\nI glanced to Bella, who met my eyes. Hers were big and she licked her lips nervously. I'd never seen her like this.\n\nOverCsSteve: She's in my office. Completely naked. And only if you are absolutely ok with it.\n\nDellaLightful: Oral only, and only if she lets you take pictures for me.\n\nI swallowed and showed Bella the messages.\n\nMy secretary of three years, a woman who I had passively lusted after but had refused to engage with sexually despite her offerings before and after her divorce, read the message three times and hesitated. I knew exactly what was going through her mind. Pictures.\n\nDid she trust me enough, did she trust my fucked up relationship with Mel enough, to risk pictures of her getting out? They would have to include her face if it was pictures of her giving me head.\n\n\"Ok,\" she said, reaching for my belt. For the first time I didn't stop Bella before it went too far.\n\nShe had my pants around my ankles and her hands were on my briefs when I told her to stop. She looked up while I got my phone into camera mode and took the first shot, her naked and on her knees in front of me, looking straight into the camera, hands reaching for me while my bulge pointed towards her.\n\nI sent it off to Mel, who received it moments later and moaned over the internet to us, \"So hot.\"\n\nThe digital sound of my phone's camera snapping pictures went off every few seconds as I watched Bella begin working me over through the touchscreen. She took down my briefs, letting my dick bob out in the open for a moment, before taking it by the base and bringing the head into her mouth. She suckled there, letting me snap pictures while she rubbed her tongue along the ridges, slowly taking more and more into her mouth. Her lips pressed firmly as she sucked, then she released me and moved her head to the side, kissing my shaft up one side and down the other. She dropped her head and licked the underside from base to tip, pausing to pose for the camera occasionally.\n\nIn the background Mel was only half paying attention to her audience, playing with herself one handed while continuously opening pic after pic I sent her. She moaned when she saw Bella drop lower and suck one of my balls into her mouth, and then Mel groaned as Bella went back to bobbing on my cock, taking me almost to the root.\n\nI reached out and scooped Bellas wild, thick brown hair behind her head, holding it back and snapping a few more pictures as I watched Mel on the screen, sucking on the dildo before setting it on the chair and easing herself down to ride it.\n\n\"I'm gonna come,\" I said out loud, though I wasn't sure if it was to Bella or Mel.\n\n\"On my face and in my mouth,\" Bella gasped. \"Let her see I'm your office cock sucker now.\"\n\nA few moments later my leg jerked and I started to come, lacing three streaks across Bella's beautiful face and dropping two globs onto her lips. The phone camera clicked and whooshed, sending off the picture.\n\n\"Mmm, I want it,\" Mel gasped on the cam, riding harder as she sucked on her fingers.\n\nI took Bella's hands and helped her up, sitting her back on my chair. \"Spread your legs,\" I said.\n\nShe did, looking up at me hopefully, but I didn't straddle and mount her. Instead I took a closeup picture of her pussy, which was flushed and flowering open, then worked the phone one handed as I slid my other hand across her inner thighs before rubbing at her wetness. She gasped, and Mel gasped on the screen as well. I slowly worked two fingers into my secretary, hooking them and seeking her g-spot instead of thrusting in and out. Soon the hooking, come here motion had Bella gasping and her pussy squelching as she leaked onto the leather.\n\nI got a perfect picture of Bella's orgasm face, eyes closed and eyebrows raised high, mouth quirked in not quite an 'Oh.'\n\nTwo last pictures, one of me slowly withdrawing my fingers, and one of Bella's well worked, juice covered pussy, set Mel over the edge. She was moaning and groaning, nose and eyebrows twitching with that little tick she had mostly gotten over before her teens. She gasped and froze as she came, then exhaled heavily as she slid from the dildo on her chair to the floor, laughing breathlessly.\n\nThe chat was cheering her as if she'd scored a goal. I collapsed into my seat and took a deep breath, grabbing Bella's hand and bending my head to kiss it. She mumbled something I couldn't understand, so I reached for the box of tissues and handed it to her so that she could wipe up her face. She took a few and I put it back, patting her thigh lightly and squeezing it before standing to pull up my pants.\n\nMel was back in her own seat, grinning like a fool. \"Fuck, that was really good and really hot. I think I'm done for now guys, but now I can't wait for tomorrow. Love you all.\"\n\nShe signed off, the screen going blank. Bella eased to her feet and tossed her used tissues into my garbage, using a couple more to wipe down between her legs. \"Hey Stephan?\" She asked with a sigh.\n\n\"Yes, Bella?\"\n\n\"Are we expecting anyone else in today?\"\n\n\"I don't think so.\"\n\n\"Alright,\" Bella bent and picked up her dress from the floor, giving me a view of her tight ass, before standing and heading to the door. \"I might stay like this for the rest of the afternoon. If you need anything...\"\n\n\"Thanks,\" I said with a tired smile.\n\n\"Oh, no. Thank you,\" she smiled back.\n\nSo hands and oral were on the table between us now. There go my standards of professionalism, I sighed to myself. I wasn't sighing about the shift in the office dynamic though.\n\nTomorrow I was going to tell Mel that her online-something-relationship-thing was actually her cousin. Fuck. Me.\n\n====================================\n\n TWE finally returns, and if you have been following it since the beginning hopefully you'll be glad to know the two final chapters will be releasing shortly to finish off the series.\n\nIf you are interested in joining my email list to hear about when I am posting my next work on Lit, send me feedback with the form below including your email address for updates.\n\nFinally, thank you to those who have been so interested in this series specifically. It started out as an experiment and quickly became something much more.\n\n===================================="
    ],
    "authorname": "BreakTheBar",
    "tags": [
        "camgirl cousin",
        "online masturbation",
        "social media porn",
        "bombshell",
        "secretary",
        "oral sex",
        "office",
        "blonde",
        "blowjob",
        "teasing"
    ],
    "category": "Incest/Taboo",
    "url": "https://www.literotica.com/s/technically-were-estranged-ch-05"
}
{
    "title": "Garter Belts and Whiskey",
    "pages": [
        "Garter Belts and Whiskey\n\n\"Adam,\" said Ruby, \"that long cock of yours...\"\n\nRuby let smoke trickle from her mouth as she spoke, curling grey ghosts around each word. She took another long drag of her cigarette, tilting her head to release the smoke up into the air. Whenever Ruby talked about sex when she smoked I knew she was horny, she was hot. It was part of her theatre; truly shameless, but she made no pretence about it. I played along.\n\nShe'd toy with me and I'd indulge her, and so we got on. We were at the point where we'd take turns texting or phoning Lizzie at the caf\u00e9 to put out the reservation sign on our table, once or twice a week, or once every week or two. We were never regular, busy lives and all that. I didn't ask Ruby about her life, she didn't ask me about mine.\n\nRuby got Lizzie's number one day, I assumed eagerly given or perhaps confused with her job, and the girl didn't question me when I used it. She had mine in return. I wondered, in an idle moment while waiting for Ruby, whether Lizzie had us in her phone together as 'Adam and Ruby', or whether she had us in separately.\n\n\"I do like that girl,\" said Ruby, when she arrived. \"That tousled, messy blonde hair, those tight little tits.\"\n\n\"It's the contrast, Ruby, with yourself,\" I replied.\n\n\"I suppose you're right.\" She looked down at herself, drawing my eyes down to her deep cleavage. She touched her immaculate hair, pulled back tight. Her hair was black, her nails and lips blood red, and her skin quite pale in the cool autumn light.\n\nWhen she came out with our drinks, Lizzie had the last fading tan of summer, a faint spray of freckles on her cheeks, and curls that tickled her there. She tried to blow the hair away, her hands full, but a faint cling of sweat held it in place. When Lizzie bent slightly to place mugs and plates on the table, Ruby reached up with a finger and flicked the annoying hair from her cheek.\n\nLizzie nodded. \"Thanks.\"\n\n\"That's very intimate, Ruby,\" I said, when Lizzie had gone.\n\n\"She doesn't mind,\" Ruby replied. \"She wants to be part of us, have what we've got.\"\n\n\"And you know this, how?\"\n\n\"Woman's intuition, Adam. I've seen the way she looks. She's quite unabashed about it. She's curious, wants to know. Wants to know about you and me.\"\n\nRuby turned the open end of the pack towards herself, extracted a cigarette and lit it with her usual ritual, sucking smoke deep into her lungs.\n\n\"... that long cock of yours. Would you like it in my ass?\"\n\nRuby said it deliberately, not changing the level of her voice, not leaning towards me in a conspiracy. She did it to shock anyone listening to our conversation who shouldn't be listening. She didn't do it to shock me. From a table on the other side of the tree I heard a quick gasp and a cup rattle.\n\nRuby smiled, a sparkle in her eyes. She'd heard the give-away too. She laid her long fingers on the back of my hand, then measured out a length on the table, thumb to extended finger, to remind herself. Then she did lower her voice.\n\n\"Well?\"\n\n\"What? Here, now?\" I replied, my voice low, smiling at her delight.\n\n\"No, silly. But I want my ass fucked by Tuesday.\"\n\n\"But Ruby, it's only Wednesday morning.\"\n\n\"I know. It builds expectation, makes it oh so very much better.\"\n\nShe was right. For the rest of the week, all I could think of was the curve of Ruby's ass, how tight she'd be, and how she'd look, encasing me.\n\nRuby started the thoughts flowing when she got up from the table and did what she always did, smoothed her skirt down over her thighs. But this time she turned away from me a little, curving her hand further behind to emphasise the tight curve of her bottom.\n\nShe glanced over to the young woman sitting at the next table, to send her the same message. Don't pretend you're shocked, you've thought about it, too. The woman blushed and looked down. \"There's the difference,\" Ruby commented, sotto voce.\"I'm not afraid to ask for it.\"\n\nAnd when we passed Lizzie after paying, when she turned away, Ruby said, \"Will you look at that girl? Her tight little ass, can you imagine?\"\n\nI could, and Ruby was imagining it too.\n\n\"We really must, Adam, one day. She's delicious.\"\n\n* * * *\n\nLater that week, on Saturday morning, Ruby called me.\n\n\"Come around this evening, about eight. Eat before you get here because, you know, I won't be eating and won't, not till later. You're staying overnight. We can go to church on Sunday.\" She laughed.\n\n\"Should I bring a toothbrush?\" I asked. \"And soap. So I smell nice for the bishop.\"\n\n\"You'll be fine. Come as you are \"\n\nI couldn't imagine the last time Ruby went to church. She didn't strike me as a religious woman, not at all. Her body, though, was worth worship; and her mind, her wicked, decadent mind... I'd believe in God if she'd have me.\n\nI liked it, too, that Ruby presumed I'd be staying. A woman who knew what she wanted? I could almost be told what to do.\n\n* * * *\n\nWhen I arrived at Ruby's apartment, up on the fifth floor overlooking the river, she already had the lights dimmed, the sweet scent of candles flickering on the mantle-piece and on low tables.\n\nShe slid up to me, her dark hair pulled back tight in a chignon, large pearls fixed to her ears. Her dress, unusual for Ruby who usually favoured tight skirts, flowed in a creamy white innocence, like a princess dress or a wedding gown. She wore little white slippers and white stockings. I assumed she was playing virginal.\n\n\"I've played dress-ups, pampered myself in a long bath.\" She confirmed it. \"I'm oh so silky and smooth.\" Ruby kissed me, her theatre well under way. \"And look at you, handsome man. How did you know?\"\n\n\"You said it was special, Ruby, so I thought -\"\n\n\"It doesn't matter though, does it? You won't be dressed for long. Here, take this wine.\"\n\nShe'd taken me through to the kitchen, where a bottle and two glasses sat waiting.\n\n\"Cheers,\" she said, looping her arm with the glass around mine.\n\n\"Clink,\" I replied, and the glasses rang like bells. The wine was rich, red and smooth, like Ruby's lips. I remembered the taste where I kissed her.\n\nRuby led me to the long window, looking down over the ferry jetty lit up with bright floodlights, harsh against the darkness. A ripple of reflected water made shifting patterns on her dress, like a projected art-work in a small bohemian gallery down in the city. She contemplated the outside world, silent and shimmering, far below.\n\n\"I like it up here,\" she said. \"It makes me feel... remote. Sometimes the world is too frantic and I need to escape.\" She touched her reflection in the glass. \"From myself, sometimes.\"\n\nThis contemplative Ruby was new, I didn't know this woman. I remained silent, knowing she wasn't really talking to me. I was in the room, but as when she smoked, I wasn't there, she didn't need me.\n\nRuby turned and ran her fingers down my cheek, the same way she'd touched her reflected self. \"Are you a reflection, Adam, a ghost? I don't know sometimes, what is real.\"\n\nI had never seen Ruby so still. Even her self-absorption when smoking was different to the mood fallen over her, possessing her, now. She shook her head and turned to me, the dress swirling in a tight circle.\n\n\"Dance with me, Adam.\"\n\nShe clung to my neck like she was lost, and when I put a hand to her waist she took it and placed it lower down. We turned slowly in the room and Ruby leaned into me more, fitting her body against mine in a tighter embrace. I cupped both hands on the high haunches of her hips and pulled her closer to me.\n\nI felt the heat of Ruby's full breasts against my chest and the soft hot breath of her lips on my throat. She nuzzled close up under my ear, like a cat does, and I felt an open mouth bite. No pressure, just the line of her teeth, top and bottom. She could bite if she wanted to. I'd let her.\n\nThe scent she wore was delicate, flowery, not the usual charnel dark cloy that caught at the back of my throat. She didn't taste of smoke, more the berry of the wine. Dark berries, true, but sweet with picking from high summer. Juice would spill from my lips if I bit one, and we'd share it.\n\n\"It's nice, Adam, the way that you hold me. A girl likes to be held.\"\n\nGirl? Ruby was never a girl, she'd never called herself that before.\n\n\"Lizzie's a girl, Ruby.\" I deliberately pushed the button and brought the taste of summer into the room. \"You're always a woman.\"\n\n\"Sweet fuck, you're a bad man, putting that lovely thing inside my head. Jesus. Now I'll want her, when you want me.\"\n\n\"I know. The two of you? It makes it oh so very much better.\" I echoed Ruby's words from the caf\u00e9, and my cock began to thicken. I ran my hands over the swell of her ass cheeks.\n\nRuby scented my neck with a hot kiss, and took my mouth with hers. She sighed, and took a long breath so I'd kiss her longer. I sucked in the smooth taste of the wine from her mouth and the crisp scarlet tang from her lips. My hands held Ruby's body close to mine.\n\nShe looked at me and her eyes were dark.\n\n\"Fuck, you're good for me,\" she whispered. \"Do me slowly, make me beg. Jesus, fuck.\" The crudities cracked in her voice as she gave herself over to me. I tucked an idea into the back of my mind - seeing her white purity made more sense, now.\n\nShe began to undo the buttons of my shirt. \"Take your clothes off, Adam, let me see you.\" She pulled the shirt-tails out from my trousers. \"You don't seem to mind naked. I always seem to be nude.\"\n\nShe was right. Whenever we'd had sex before, Ruby always kept something on, be it stockings or high heels, or a velvet ribbon around her throat; she always kept some adornment about her, and always her jewellery on her fingers, silver rings; and pearls in her ears. She always kept something on.\n\n\"I'll undress, Ruby, so you can see me. But I'm going to see you too, stripped naked.\"\n\nI looked into her eyes and Ruby looked back at me. \"No hiding?\" she asked.\n\n\"No hiding. Like your ass, all exposed.\"\n\n\"But I'm always hiding.\" Ruby smiled. She was beautiful.\n\n\"There's whiskey, Adam, in the cupboard. I could do with a shot.\" She wanted something stronger than wine.\n\nBefore I went to the kitchen to get the whiskey bottle and a glass, I took the rest of my clothes off. She was right, I'm comfortable naked. Ruby looked at me, looked down at my cock heavy against my thigh, and smiled. I'm a tangible ghost.\n\n\"Where's that shot?\"\n\nI got a glass, poured, and handed it to Ruby. She savoured it, then knocked it back quickly to get the burn in her throat. \"Tsss,\" she hissed, \"that's good.\"\n\nShe slid her finger into the glass, let me taste the whiskey, hot on my lips. I poured another glass, then set it aside.\n\nI began to undress Ruby. First I undid the buttons down the front of her dress, separating the folds of cloth apart and peeling them back from her arms. Her full breasts were revealed in a white lacy bra that enhanced her deep cleavage. I kissed her neck as the dress fell away to her waist, brushing against my filling cock as it did so.\n\nThen I loosened the buckle of a wide leather belt, eased the cloth from her hips, and the dress puddled into a creamy white circle at her feet. She wore lacy white knickers that matched the bra, and white stockings on her legs. I pulled her towards me, eager to feel her bare flesh against mine.\n\nMy cock thickened and Ruby felt it. She eased her legs apart to give it a place to go, and it rose up between her thighs. She clamped me between her legs. Her cunt was hot against my shaft.\n\n\"I love seeing that,\" she said. \"Your arousal. You men are so blatant, there's no pretending.\"\n\nShe reached between us, lifting my shaft up to place it hot between my belly and hers. I cupped her ass cheeks in my hands, pulling her hard up against me. We stood like that, pressed together for a minute, gently kissing. Her lips no longer tasted of wine.\n\nI broke the kiss, and reached for the pearl stud in her ear. I undid the clip and released the small drop into my palm. Ruby solemnly undid the other one, tilting her head as she did so, and handed it to me. I placed both into a small bowl on a table.\n\n\"Now the chain about your neck, and your rings.\"\n\nRuby looked at me, and for a short moment I thought she would not do it. Then she smiled, and took the rings from her fingers, one by one.\n\n\"You really do want me naked, don't you?\"\n\n\"Yes, Ruby, no pretending.\" My cock pulsed against her belly. \"To fuck you, no veils, no jewels, nothing on you but skin. To fuck deep into your naked flesh.\" I began a quiet narration, my whisper soft in her ear. She squirmed against me.\n\nAs she had done with me, I took her throat lightly between my teeth, and held her still. My cock pulsed against the flesh of her belly. I saw goosebumps rise on her arms.\n\n\"What do you want, Ruby?\" I needed to hear her say it. She could beg, later.\n\n\"Your cock, fucking my ass.\"\n\n\"It's not Tuesday, Ruby.\" I undid the chain from around her neck and placed it with her jewellery.\n\n\"You bastard, you'd deny me?\" Her voice cracked, her tone dropping in a threat. Come into my arms, mother wolf.\n\nI took her mouth with mine and gave her my answer with another long kiss, running my hand over her ass cheeks as I did so, easing the firm flesh apart, exposing her dark core to the air. Ruby moaned, shivered, waited. I slipped my hands down inside the cling of her white lacy knickers, my finger sliding down into the tight valley between her cheeks.\n\n\"My thick cock, hot in your ass, Ruby.\" My voice was a whisper, my pressing finger a promise. \"I'll fuck you, deep.\"\n\n\"Jesus, fuck.\" Her blasphemy again, a slow creep against a forgotten religion.\n\n\"Your white virgin's panties, you won't need them.\" I peeled them down her legs but left her stockings on, a visual treat of contradiction for my eyes.\n\nRuby's little slippers were like a dancer's. There's something pure about the image of a girl at the barre, that flexibility and at the same time, focus. It helps that my first vision of a naked girl was a dancer, with long dark hair falling like water.\n\nRuby though, was voluptuous, her curves full and luxurious, not like my first girl at all. Her hair was still pulled up tight and coiled. Tight and locked tight, just as her anus would be against my tongue.\n\nI led Ruby to a couch and made her bend over it, feet apart, arms outstretched along the back. One breast fell, full and heavy, held by the cup of her bra. The other, squashed under her.\n\nI'd pay attention to her breasts later. The bra strap across her back had marked her skin. To undo the strap later would take on some significance. She'd be naked then, but for the stockings and slippers. The idea of lost innocence aroused me, her dark taboo place above lacy white stockings. Jesus fuck, I'd lose religion, too.\n\nI stood behind Ruby and leaned my weight over her, covering her back with my belly and chest, the shaft of my cock pressed down between her thighs. She pushed back against me, impatient.\n\n\"Wait, Ruby,\" I said. \"What's the hurry?\"\n\n\"You fuck, Adam, my finger's not thick enough. I've been like a school girl, playing with myself all week.\"\n\nI laughed. \"I don't think I can imagine that, not at all.\" I could. \"Not Ruby!\"\n\nRuby placed two fingers into her mouth, all the time looking back at me. Then, quite deliberately, she reached back between her legs as far as she could and pressed those wet fingers into the dark shadows where her anus lay hidden. She eased the fingers forward, and in the silence I heard the smallest sound as she slid them along the lips of her sex.\n\n\"Again, Ruby,\" I said, and this time I pulled the firm globes of her cheeks apart to reveal the dark crease of her, the darker band of flesh from her cunt up and around the dark swirl of her anus. I pulled her cheeks wide apart so I could see the next press of her fingers over the tight coil.\n\n\"Press harder,\" I urged. \"Let me see.\" I wanted her to know I was looking as she pressed the weight of her finger tip over the dark place. The nail on her finger was long, she couldn't press into herself. My fingernails were much shorter, she might like my finger. She might like my cock even more.\n\nI kept looking, leaning closer. I inhaled her musky scent, shutting my eyes and breathing in deeply. I could smell her arousal, almost taste it.\n\n\"Have you seen yourself, Ruby, how your ass-hole is dark, much darker than the rest of your flesh?\"\n\n\"Mirrors, I've used mirrors.\"\n\n\"What did you fuck yourself with, when you were younger? Before a man took you the first time?\"\n\n\"The end of a hairbrush,\" she confessed.\n\n\"Was it the same brush you used to brush your hair in the morning, before going off to school?\"\n\n\"How did you know that?\"\n\n\"I didn't,\" I replied. \"I do now.\"\n\n\"Christ,\" she whispered. \"No secrets.\"\n\n\"You want me to know them, losing your innocence all by yourself.\"\n\nI moved, reaching my hand for the whiskey glass on the side table. I took a small mouthful, felt the hot burn, and put the glass back down. Reaching for her ass, I pulled her cheeks wide apart and placed my whiskey filled mouth right over the core of her hole. I swallowed and pulled her against me.\n\n\"Tsss, fuuck, that's so good. No-one's anointed my ass-hole before, not with whiskey.\" Her hiss was the same as when she drank the first shot. \"Just fucking eat me, I've waited too long for it.\"\n\nI spread Ruby 's cheeks wide for easy access, then descended onto her ass-hole, sucking on it, pulling a moan from deep in her throat. The heat of the whisky sizzled my tongue, and I pierced her rim with it, jabbing the tip into her.\n\nShe pushed back against me, taking her own cheeks in her hands to open herself wider to me. Fucking her tight hole with my tongue, I dragged my fingers up the back of her thighs to give her more sensation, then cupped her cunt in the palm of my hand, pulling her body back against my face.\n\nI leaned my weight forward, alternately sucking and licking. She bucked back against me, a slow steady pressure, insistently pushing back against my mouth. I tongued her, savouring her taste, jabbing into her with swift little fucks. I felt the suck of her hole on me like a mouth.\n\n\"Fuck yes,\" she whispered then, \"fuuuck yes, eat my ass, you fuck. Fucckk.\" Her mouth clicked around the word with a shudder. Her body quivered with pleasure. My mouth was a wet mess on her. Her ass-hole was wet now, she was ready.\n\nI moved back from her and Ruby gasped as the air cooled around her wet flesh, swollen and puffy. I watched in delight as her anus puckered, almost breathing.\n\n\"In the cupboard, there's butter. Go get it.\"\n\nRuby commanded me. I went to the kitchen, licking my lips to savour the taste of her hole. My cock was thick and hard, aching with the intensity of my pleasure, pleasuring Ruby. I'd not been this rigid thick for a long while, ass being a rare treasure.\n\nI found the dish of butter, softening. She must have taken it from the fridge an hour before I got to her door, preparing a slab of it with a sharp knife. I imagined her precision, cutting it from the block, knowing where it would be later. The edges at first would have been sharp and clear, but they were soft now.\n\nThoughtful Ruby, the decorative dish sat upon a small towel, so I could grease my shaft then wipe my hands clean, so I could grip her flesh without slipping. A ceremony could not have been better arranged.\n\n\"That's planning ahead, Ruby.\"\n\n\"When I get fucked in the ass, Adam, I prefer it swift and deep. Butter's perfect, I've found.\" She laughed, a low filthy chuckle. \"Oil is too messy, and lubes from a tube... I don't like them.\"\n\nRuby's hair was still immaculate, tight around her head. She somehow still looked crystalline pure, uncorrupted, even though her back hole was wet and puffy from my tongue and lips. She looked back at me, watching me closely as I scooped a thick layer of butter onto my fingers, then onto my shaft. Her eyes were dark.",
        "\"A dab on my hole, darling, then wipe your hands and pour me another drink.\" She sounded so very polite.\n\nRuby gave me last orders for this ritualistic fuck of her ass. I could see why last Tuesday was special - every night, playing through her mind what would happen, then dressing up in pure white clothes, pure as snow, fantasising her ass being plundered. I wondered how many times she'd come, thinking of this. I had, several times, stroking my cock, imagining it hard inside Ruby.\n\n\"Where's that shot?\" she whispered. I gave the glass to her and she took a preparatory sip.\n\n\"Do your stuff, lover,\" Ruby said, her voice low and rough. \"Fuck my ass.\" I loved how she gave the command.\n\nRuby closed her eyes, and pressed the glass up against the couch so as not to spill it.\n\nThe dab of butter on her ass-hole was soft from her heat. I placed the tip of my cock there, applying a faint pressure, then waited. Our bodies were still, poised around that fulcrum of my cock head nestling against her dark hole. I watched, fascinated, seeing the tiny movements of her flesh as her muscle became accustomed to my presence, to the persistent pressure of my cock.\n\nRuby wriggled, finding a natural angle. \"That's it,\" she said, and took a shot from the whiskey cup. The movement of her knocked back swallow jerked down her body, enough to let my cock in.\n\nI watched, spellbound, as my shaft disappeared into her body, stopping at each locked muscle; a slow patience, a push, and slowly I sank into Ruby. There was no sound. Our fuck was slick and silent until I reached a point deep within her where Ruby gripped me, my impossible penetration. Ruby moaned then, a long low animal moan like a wolf in a distant forest, and she panted, pushing back at me, pushing back to suck the last of me into her.\n\nThen, with a sudden relaxation followed by a grip tighter than any hand, tighter than any cunt, Ruby took every inch of me, the base of my gut pressed right up against her ass cheeks. I looked down, fascinated to see myself gone, my flesh merged beautifully into her, completely hidden.\n\nI took her haunches in my hands, spread her firm globes apart to see, and I slowly fucked Ruby, my shaft coming out two inches, then pushing back in. Her ass was so incredibly tight. I felt her heartbeat around my prick, or it could have been mine, I couldn't tell.\n\nGripped within her, I leaned forward and the weight of me in her forced another low moan from Ruby, and she reached her fingers under herself to mix pleasure with what passed for pain.\n\nI leaned forward to remove the restraining clips from Ruby's hair, and as I fucked her exquisite ass, her long, magnificent, thick mane of hair fell down over her face.\n\n\"Ohhh, fuck, that's me done,\" Ruby whispered, \"no pretending I'm high society now. With your long prick up my ass, there's nowhere to hide, not any more.\"\n\nRuby looked up, saw our reflection in the long window, and fucked back onto me, her ass so incredibly tight. Her hair fell like silk over her shoulders, swirling as if in slow motion as her body lunged with our fuck. Her head rose and her neck stretched.\n\n\"Oh my fucking god, you've filled me. So good.\" Ruby exalted me.\n\nI fucked her slick, tight ass; the visual of her round bottom, narrow waist and long back a feast for my eyes. Ruby reached under herself, sliding her fingers into her cunt then around her clitoris, building up her pleasure.\n\nThen she stopped and was completely still for a long moment, the heartbeat of my cock beating deep inside her. Her heart beat rose and fell in faster syncopation around my metal hard shaft. Ruby's body gripped me, tight tight, tight tight. I couldn't get away if I wanted to.\n\n\"I want to see you,\" she whispered. \"Take me to bed.\"\n\nThis was an extension of her new mood, her ghost mood. I could see her, looking at us in the reflecting glass, our disembodied bodies floating in space beyond the window. One man standing, a woman bent sprawled before him, their bodies locked in silence together.\n\n\"That feeling when your cock leaves me, that emptiness, your weight going... that's part of it. That hollowing out...\" Ruby's voice was almost dreamy.\n\n\"Then knowing I'll fill you again, is that it, Ruby?\"\n\n\"I can't bear you leaving, and I ache to have you back. It's...\"\n\n\"Don't explain, no words.\" I began the leaving pull. Ruby lay completely still, her body motionless, her eyes closed. I felt spontaneous grips of her channel as her ass tried to restrain me, prevent me from leaving. But for me, the pleasure remained with the tightness, and knowing what I now knew.\n\nI'd been chosen by Ruby to give her this, this existential emptiness as my cock left her body, her ass rejecting me, pushing me out in that automatic expulsion. The void came over her. Ruby moaned as I left her, \"No, no, don't... don't ever leave me.\"\n\nThe cerebral intensity of the moment nearly made me come right then, the exquisite fuck of my brain fighting the simple animal crudity of my body. I clenched against myself, leaving her two thick pulses as a promise.\n\nShe was almost weeping as my cock left her. I looked down and watched her hole close slowly, the rich deep pink of her flesh folding in on itself to leave Ruby's dark anus slowly pulsing.\n\n\"Take me to bed, Adam, and fill me again.\" Her voice was a whisper, full of longing, full of want and desire. Lust was somewhere far behind, back with the play acting and the cigarettes. Ruby no longer needed props, this was real. She ached for me, I could see it in her face.\n\nI helped her down from the back of the couch, and she clung to me as we slowly walked to the bedroom. As Ruby passed it by, she upended the empty shot glass on the table. I picked up the plate of butter, and again, the white serviette. She stroked my cheek with gratitude.\n\n\"You're good for me, Adam,\" Ruby said.\n\nIn her room, I lay Ruby down, her head against two pillows, her legs spread wide on the bed. I pulled the white vestigial, virginal white stockings down her legs, dropping them sideways to the floor. Ruby was solemn as I did so, then smiled, her slow radiant smile. She reached behind her back and unclipped her bra, exposing her big breasts with their thick, dark nipples.\n\n\"Naked enough for you, Adam?\" she said, \"finally.\"\n\n\"It takes a while to undress you, Ruby,\" I replied. \"But your soul is next, for a moment.\"\n\n\"Thank god you're a patient man.\"\n\nI looked down at Ruby, spread on the bed before me. I ran a finger from the coil of her navel, down over the curve of her belly, down the outside of one long leg, then up the inside of a thigh to her sex. Her skin was softest on the inside of her thigh, so I circled around it again, to make sure.\n\nI reached for the butter plate. I didn't need much, my cock already greased from her body. I hooked Ruby's knee up in the crook of my arm, and with my other hand placed the tip of my cock onto the dark centre of her anus. Not much pressure was needed, and I slid into her, through that double stop block, all the time looking into her eyes.\n\nWhen I was fully sheathed in her body, Ruby closed her eyes, tilted her head to one side and sighed, a long, satisfied sigh. I felt her body relax around me, soften and absorb me. I felt I'd been embraced, Ruby taking me differently, her body accepting my entry, welcoming me into her.\n\n\"Slowly, Adam, fuck me slowly.\"\n\nI set up a steady slow movement. Ruby's grip was different now, as she lay on her back. My slide was easier, deeper too. I found a good angle and began to fuck Ruby faster, the creaming of the butter making it easy. She opened her eyes and looked up at me.\n\n\"I've got you now, Adam, you're safe inside me.\"\n\nRuby held my gaze as I loved her, my slow luxurious shafting held in her hot embrace. Her black eyes held mine, every now and then widening as I brought her a surge of delight, sometimes narrowing as I gave her unwanted pain. She breathed through it.\n\n\"Do that again.\"\n\nI arched my back, holding my weight on my arms. The fulcrum of my prick found a new depth in her ass, and the space between our bodies widened. Ruby slid her hand down to her cunt. I looked down to see her masturbate, finding a quick rhythm that filled the spaces between my thrusts.\n\nRuby's impossibly tight grip held me harder than a hand ever could. My hands went back to push wide her thighs, opening her body to me even more. My finger tips slid on the slick sweat from her skin, my fingers swirling down to her plugged anus. Ruby filled herself with her own fingers, and between us we began to climb.\n\nThe scent of her cunt rose, so sweet I could taste it. The scent of sweet arousal fought with the darker scent of carnal musk from her deeper, dark ass, as we found a faster pace. I fucked her back channel harder, my cock pulling half out of her, plunging in deeper.\n\nRuby's breasts shook, big and heavy on her chest. She took a hand away from her clit and squeezed a nipple, pinching it between her fingers, stretching it up, pulling it up from her shuddering flesh.\n\nMy ass tensed, the muscles tightened, and I stroked harder, my breath coming in low moans. Ruby responded, her own fingers faster, her breath matching mine. Her body shook with my thrusts. She started to murmur, her voice low and husky.\n\n\"Oh fuuckk, fuckkk, Jesus you fill me, so fucking...\" Ruby's eyes opened wide with astonishment as I found some deeper place. \"Full. Fuu...ckkk.\"\n\nHer fingers grabbed and clawed at my ass and hips, pulling me harder into her body. Her ass gripped and loosened and the tightness all around me made me feel huge as I fucked Ruby's ass and...\n\n\"I'm close now, so... \" The coil of my orgasm tightened at the base of my spine, surging forward, exploding in huge pulses, and my world flashed red and blinding white behind my eyes. Somewhere in there I heard Ruby...\n\n\"Oh god, oh god, ohhhh... fuuckk... mine, all mine, cream my ass, cream it... ohh my god, oh my baby...\"\n\nHer arms wrapped around me, pulling me down onto her body. Ruby gripped my ass cheeks, clamping me inside her, and with two last shudders, she took the last of my come inside her. I fell forward onto the soft fullness of her breasts where Ruby held me.\n\nA long moment passed, and several more. The smell of our fuck filled my nostrils. A nipple nudged my lips, and I suckled on Ruby's tit. She cradled it to me in her hand.\n\n\"Suck on it, baby,\" she whispered, and if she'd given me milk, I'd have drunk it.\n\n\"Wriggle, honey, you're a lump.\" My eyes were closed in my bliss, but the softness in her voice told me everything.\n\nWe somehow flopped to our side, her thigh high on mine so my cock stayed inside her.\n\n\"You filled me there, Adam. Fucked me full.\" Ruby sounded pleased with herself, with me too. She still had me clenched hard and tight, but my prick was softening and I felt that steady push as she expelled me.\n\nShe clamped her thighs tight around my cock as it lay thick up against the heat of her cunt and her ass-hole.\n\n\"I'm going to be a mess,\" Ruby said, \"in the morning. But that doesn't matter because... I really needed that.\"\n\nWe held each other, our arms wrapped tight around ourselves, talking quietly. Ruby told me more about herself, not much, but enough; and we were content.\n\nAfter fifteen minutes Ruby got out of bed to go the bathroom, and my come was a long streaking line down her thigh. Her long hair was tangled in a twist down her back. Ruby looked back at me, and she looked so much softer, so much younger. 'You're good for me, Adam.'\n\n\"Give me a minute to tidy my ass,\" she said, \"then come in and we'll share a shower.\"\n\nI watched Ruby as she went into the bathroom, nudging the door shut with her foot. I lay with my thoughts until I heard the toilet flush and the shower door rattle. I got out of bed and walked to the bathroom, where Ruby was already soaking her body under the hot running water.\n\nI slid the door open and went in behind Ruby, taking the soap from her. I ran the smooth block over her breasts, taking their weight one at a time, quickly curving the lather over her nipples without lingering, down over the small plumpness of her belly, down over her pubic hair. Ruby spread her legs slightly so I could wash her vadge. She leaned back to kiss me, just the once, popping her finger on my nose for affection.\n\nShe turned, so I could soap her backside, washing our cream and stain and smell away. She pushed back at me, I pressed my thumb into her. Ruby gripped twice to reward us both and to remind us, then she turned again. We kissed longer this time, until the water pushed strands of hair into her eyes.\n\n\"My turn,\" Ruby said, as she took the soap from my hand and washed me too, lathering the soap up over my chest, my back, down to my heavy cock. She washed it, my ass, and pressed a knuckle up against my anus.\n\n\"Would you like to be pegged one day?\" she asked, almost with idle curiosity.\n\n\"Yes,\" I replied, quite simply.\n\n\"Good,\" she said. \"I'd like that. One day.\"\n\nRuby turned to me, then placed the block of soap on its cradle. \"Our one days, Adam. I think we could have quite a few.\"\n\n\"I'd like that, Ruby. With you.\"\n\nAnd with that said, no more was needed. We stayed in the shower, kissing, until the water had washed all the soap away and our skin was no longer slippery. We dried each other, and I dried Ruby 's long hair; patted it dry at least, until she pushed me away, saying, \"Much quicker my way,\" and it was, a towel in a turban turned high on her head with practised efficiency.\n\nLater, I lay in Ruby's bed and watched her brush her hair out with the same concentration she used when she smoked a cigarette or prepared for anal sex. She coiled it up and clipped it away from her face, before coming back to the bed. She dropped her dressing gown away to declare her magnificent naked body for me.\n\n\"I'm wet,\" Ruby said, and she was, as she slid herself down my cock.\n\n\"There,\" she said later, \"both places filled.\"\n\nLater again, after we'd eaten and again were in bed, her back against my belly, Ruby reached for her phone and quickly sent a text.\n\n\"Who's that to?\" I asked. \"Isn't it a bit late to be sending texts?\"\n\n\"Lizzie,\" Ruby replied. \"Arranging breakfast.\"\n\n\"At eleven thirty on a Saturday night? Isn't that a bit rude.\"\n\n\"Not really,\" Ruby replied. \"If she's got company, she won't see it till morning. If she's alone, she'll start wondering.\"\n\n\u00a9 electricblue66 2020\n\n \n"
    ],
    "authorname": "electricblue66",
    "tags": [
        "alienation",
        "anal sex",
        "cafe society",
        "equality",
        "existential",
        "older man",
        "younger woman"
    ],
    "category": "Anal",
    "url": "https://www.literotica.com/s/garter-belts-and-whiskey"
}
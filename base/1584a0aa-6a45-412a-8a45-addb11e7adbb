{
    "title": "Just the Tip",
    "pages": [
        "The Usual Disclaimer: This is a work of fantasy. All characters featured in sexual situations are over 18. The characters in these stories are fictional. Any resemblance to actual persons living, dead or undead is purely coincidental. Do not try this at home.\n\nI dispensed with my usual character development for this story, really just to see if I could do it and still have a story that didn't completely suck. As a writing exercise, I didn't think it would turn into something I would put on the site. However, the folks who have so generously taken the time to review these things for me thought it was good, and that you might enjoy it.\n\n* * * * * \n\n\"Just the tip,\" he had said, his voice strained with his imminent orgasm. Right. Like she was going to fall for that!\n\nEmma looked over her shoulder at her boyfriend, Tommy. \"I told you!\" she snapped. \"You're not putting that thing in my ass!\"\n\n\"I won't! I just wanted to press the tip against your asshole and come inside you that way. I promise I won't push in at all.\"\n\nDamn. His face looked so sincere. Emma thought she might regret it\u2014she was almost certain that she would\u2014but he had made her come so hard with that thick cock pumping her pussy...\n\n\"Okay,\" she relented. \"But just the tip! If you push at all, I'll kick your ass!\"\n\nThey had been together for a little over a year. Emma knew he desired her tight ass. It wasn't like he made a secret of it. She also knew there was no way her tight little asshole would ever be able to accommodate his thick dick. She could only imagine the unbearable pain that would cause, and she could just picture him tearing her tender ring of muscle\u2014probably in multiple places.\n\nEmma trembled when she felt that long, thick cock pulling out of her pussy. She felt him shift on the bed behind her and then the wet tip of his fat mushroom head was pressing against her sphincter. She was tense, ready to dive forward to escape as soon as he pressed his hips forward.\n\nOnly, he didn't.\n\n\"Oh, God, that looks so fucking hot,\" Tommy groaned. He was staring at his throbbing cock, glistening with her juices and pressed against her sexy little rosebud. It was his most arousing fantasy and he was looking right at it.\n\nAnd then his dick erupted, shooting rope after rope of hot, thick semen right into her ass! Emma was shocked at how hot it was and how amazing it felt. Then she just couldn't believe he was still coming. He was holding perfectly still and only his impossibly hard dick was moving. It was bucking and pulsing against her asshole, shooting more and more of his spunk inside her. She shuddered when he pulled his cock away from her asshole before laying it between her cheeks. He leaned down and tenderly nuzzled her earlobe.\n\n\"Oh, wow,\" he moaned softly. \"That was so intense. Thank you for that, Emma. It was amazing.\"\n\n\"You came so much!\" she groaned in reply. Already she could feel it pouring out of her twitching butthole.\n\nIt was shocking how much that turned her on.\n\nTommy pushed up off of her and rolled to his side. He groaned again when he looked down at her ass and saw his pearly cock juice drooling out of her quivering little hole. The way it was pulsing open and closed like that made it look like he had just fucked her there. Then he was out of the bed and she heard the water running in their bathroom. Emma knew he was soaking a washcloth to clean her up. He was so thoughtful that way.\n\nWhat she did not expect was just how turned on she would get to feel him cleaning her sensitive asshole with that damp cloth. He had occasionally teased her puckered opening with a fingertip or the pad of his thumb while he fucked her pussy, and she knew it got him all fired up. She could feel him getting harder and swelling inside her when he did it. If she was honest with herself, it turned her on too\u2014but that was immediately outweighed by the fearsome image of her ripped and bleeding asshole if she ever actually let him try fucking her there.\n\n\"Wow,\" he muttered huskily. \"You weren't kidding. I don't think I've ever come that much in my life.\"\n\nEmma rolled over and looked down. She gasped when she saw it. There was enough thick cum pooled in the washcloth to completely fill one of her cupped hands. She had never seen so much of the stuff at once before. She also realized that there was still more of it inside of her.\n\nIn my ass! she thought.\n\n\"I'll be right back,\" she said, shimmying to the edge of the bed.\n\nHe stepped back from the bed to let her pass. While she sat on the toilet and let his jism drain out of her, he walked down the hall to the guest bathroom to clean out the cum-soaked washcloth. Emma shivered and came again as she felt all that hot cum slipping out of her sensitive butthole.\n\nDamn, that was intense! she thought. I can't believe I got off like that from having him come in my ass.\n\nRight after she flushed the toilet and returned to their bed, he walked back in with a worshipful look in his eye. He walked up and hugged her, turning his head to give her a searing kiss. Emma returned it eagerly. When he pulled back his head he looked down at her and whispered, \"Thank you.\"\n\n\"Thank you,\" she countered.\n\nHe cocked his head. \"What are you thanking me for?\"\n\n\"For not pushing it in,\" she said simply. \"I didn't think I could trust you, but you showed me you really love me and deserve my trust. When you said, 'just the tip' I was sure it was a ploy to trick me. I gave you the benefit of the doubt, and I'm glad I did.\"\n\n\"I would never\u2014\" he started, but she leaned up on tiptoe and kissed him, cutting him off.\n\n\"I know,\" she said after that kiss.\n\n* * *\n\nOver the next week Emma kept reliving that amazing sensation in her mind over and over. Her pussy shivered and moistened every time as she recalled the molten liquid splashing inside her tender bowels. Her sphincter also puckered and throbbed.\n\nThey were awfully busy that week, and only had time for sex late at night before they fell asleep. She kept expecting him to ask for a repeat performance, but the closest he got was teasing her throbbing pucker with the tip of his left index finger while he fucked her on Thursday night.\n\nIn truth, Tommy didn't trust himself to do it again. It had been such an incredible turn-on to see his cock pressed against her asshole and then to see her puckered opening drooling out his cum afterwards. It just fueled his desire to fuck her ass, and he wasn't sure he could hold back a second time. When the tip of his finger was pressed against her asshole Thursday night, he could not take his eyes off of it. He pushed in to the first knuckle, and then groaned as he exploded in her pussy.\n\nThey both felt her asshole throbbing around the tip of his finger and squeezing down on it. It turned Emma on as much as it did Tommy, and she didn't know he had pushed that much of his finger into her. She was disappointed the next night when he didn't give her sensitive backdoor any attention. Oh, she still came like crazy all over his thick cock, but she knew it would have been more intense if he would have just touched her back there.\n\nSaturday mornings, they always slept in. They were entwined naked in the bed when Emma awoke. Tommy's thick morning erection was pressed against the juncture of her left hip and upper thigh, and it was pulsating against her skin. She wasn't sure if it was the head of his hot cock pressing insistently against her or her need to pee that had caused her to wake up, but she slid out of Tommy's gentle embrace to take care of her full bladder first.\n\nThere was still some of his residual sperm inside her from the night before. When she relaxed her muscles to let it drain out, it triggered a bowel movement. She shivered as her sensitive sphincter was spread open at the same time the hot come drooled out of her. When she was finished, she flushed the toilet and got into the shower.\n\nI can't believe that, she thought. I almost came from taking a crap!\n\nShe carefully washed her bottom in the shower. Then she teased her tight pucker with a soapy finger. Slowly, she pushed it up inside her and felt around, making sure she had gotten completely clean in there. Her legs shook as she pulled the finger out. She tentatively pushed it back in and let out a soft \"ooh\" at the sensation. After three more slow thrusts, she shuddered and came. Emma couldn't believe that had happened. She carefully washed the soap from her puckered little hole.\n\nAll of her most sensitive spots felt like they were on fire when she dried off afterwards. Her nipples, her neck, the insides of her thighs and her entire pussy mound sent shivers through her body as she ran the towel over them. When she ran the towel through the crack of her ass, her knees almost gave out. She was eager to have sex as soon as she stepped out of the bathroom. Tommy's morning wood was primed to give her what she needed and her eyes were glued to it when she made her way back into the bed.\n\nTommy moaned when she wrapped her hand around the base of his shaft. Emma grinned, knowing how much he loved to be awakened like this. She bent and licked her way around the crown of his magnificent dick. She could taste her own dried juices on him and that always turned her on. It was always a bit of a strain to open her mouth wide enough to take that massive mushroom head, but she loved the way it tasted and pulsed in her mouth.\n\nTommy woke up moaning. He slowly opened his eyes and smiled down at his girlfriend's lovely face. This was a sight that would never fail to excite him. Emma's tongue was working him over frantically, teasing out his pre-cum so she could gulp it down. Her nipples were so hard they were impossible to ignore. He reached down and lightly pinched one before filling his palm with her perky breast. She groaned around the head of his cock and he shuddered in response.\n\nEmma had to release him from her mouth. When he swelled up like that, it felt like the corners of her lips might crack. He was just so thick! She was still astonished that she could fit that thing in her pussy. That was exactly where she needed it next. She rolled around on the bed to bend over with her head on the pillow.\n\n\"Please fuck me, baby,\" she asked. She used her high-pitched little girl voice\u2014the one he could never resist.\n\n\"Damn,\" he groaned.\n\nThe morning sun was streaming in through the curtains, bathing her sexy backside in a soft, warm glow. She looked like a centerfold model, eager to be filled with his cock. Her tight, round bottom was a thing of beauty. As he got up onto his knees and slid in behind her, he could not take his eyes off of her perfect ass. His hands reached out almost on their own to squeeze those luscious cheeks and spread them open.\n\nEmma gasped as his thumbs slid between her cheeks and pried them apart. Her holes felt exposed as they were stretched open for his viewing pleasure, and then her pussy was stretching wonderfully to accommodate the fat head of his cock. She looked back over her shoulder at his face. She loved his horny expression and the way his eyes were locked on her exposed pucker. Her asshole throbbed delightfully under that scrutiny.\n\nTommy could not help but think that Emma's plump little sphincter was winking at him invitingly. He held her right cheek firmly and lifted his left thumb to his mouth, soaking it with saliva. Emma watched him do it and knew he was going to tease her sensitive butthole with his wet thumb.\n\nShe shivered in anticipation.\n\nTommy suppressed a groan when her rubbery little ring spread open to welcome the soaked pad of his thumb. His eyes went wide when it sank right into that snug grip and the tip of his thumb easily slipped inside her all the way to his knuckle. Her pussy fluttered around his hard cock. That reminded him to breathe and to resume thrusting into her. She sighed and sounded aroused and happy as his thumb sank even deeper into her hot asshole. Then she was thrusting her hips back at him, encouraging him to thrust into her with both his rock-hard dick and his spit-soaked thumb.\n\nHis mouth was completely dry when she started shaking her way through an intense orgasm. She looked back at him through hooded eyelids.\n\n\"Damn, baby,\" she cooed. \"That really turns you on, doesn't it?\"\n\nHe could only nod. Tommy didn't trust his voice not to crack if he tried to say anything.\n\n\"Do you want to come in my asshole again?\" she asked.\n\nHe licked his lips and looked down at his thumb, now buried completely in her tight little hole. He wanted so badly for that to be his dick buried in her hot ass. Tommy licked his lips and swallowed hard.\n\n\"I don't think\u2014\" he started.\n\n\"It's okay,\" she murmured. She was reaching back to find the base of his cock with her left hand. He slid his thumb out of her as she leaned forward, forcing his cock to slide out as well. Her hand gripped his shaft and she was moving the tip of his cock up to press it against her sphincter. \"Just the tip, baby,\" she reminded him.\n\nTommy's groan was louder than he intended when she pressed back, pushing his throbbing cock head firmly against her bottom. That little puckered knot spread invitingly and the tip was enveloped in her hot, snug embrace.\n\n\"Just the tip,\" she crooned softly, rocking her hips back and forth. \"Just the tip. Mmm, yeah. Just the tip.\"\n\nTommy was trying with all his might not to thrust into that delectable hole. His entire body was trembling with the effort and his muscles were flexed and rigid. He could not take his eyes off the sight as her bottom pushed insistently backward again and again. Half of the plum-sized head of his cock was squeezing its way into her distended ring each time she did it. She started stroking his shaft in time with her hips, and that pushed him over the edge.\n\n\"Here it comes!\" he let out in a strangled cry.\n\n\"Yes!\" she cried in response. She pushed back hard and almost forced the entire head of his cock into her.\n\nTommy nearly blacked out at the intensity of his orgasm. His balls ached as they emptied their contents into Emma's sweet bottom. Her asshole squeezed the head of his cock, and not a drop of his sperm escaped. All of it went right up her horny ass. Emma buried her head in the pillow and screamed when she felt him exploding into her. Her body shook and she could not recall coming that hard in quite some time. When Tommy finally finished coming and withdrew the tip of his cock from her horny butt, she immediately rolled out of the bed and staggered into the bathroom.\n\nShe knew all that sperm was going to squirt right out of her as soon as she relaxed her sphincter.\n\n\"Wow,\" she whispered as the semen spurted out of her and into the toilet bowl. It felt like she was coming with her ass\u2014shooting that molten sperm out of her inflamed little hole. Her hand slipped down to frantically rub her clit, and she shuddered and came once again.\n\nTommy staggered down the hallway to the guest bathroom again. As he washed his hands and face, he gradually got his breathing back to normal. He looked at his flushed face in the mirror and then at the muscles standing out all over his upper body. His hand slid over his shoulder and bicep and he was surprised at how sore those muscles were. It had taken every ounce of his self-control to keep from pushing his hips forward and forcing his hard cock into Emma's tantalizing asshole.\n\nAfter all that teasing, though, he had come so fucking hard. He could scarcely believe it. It was like he was reliving the moment as he recalled every glorious detail that was imprinted in his mind. Then he looked at his face in the mirror and his expression turned thoughtful. Emma had seemed every bit as turned on by the entire episode as he had been. Maybe she was even more into it than he had been\u2014after all, it was she who had invited him to come in her ass this time, and she had eagerly made it happen even when he had been reluctant.\n\nTommy looked down at his pulsing erection and wondered if it had even gone soft.\n\nHe heard Emma starting the shower in the master bathroom and sauntered back down the hall to join her. Saturday morning showers together were always a treat. Prior to the past week, it was the most he got to see and touch her sexy bottom without getting her upset. He poked his head around the shower curtain and watched the water cascade over her sexy body.\n\n\"Damn,\" he murmured, \"you look incredible.\"\n\nShe brushed the water from her eyes and gave him a dazzling smile.\n\n\"Are you going to scrub my back for me?\" she asked.\n\n\"Love to,\" he replied, stepping into the shower.\n\nShe turned around and bent to hand him the body wash, teasing him with her wet, sexy ass. They both knew what she was doing. He certainly didn't mind. Tommy was surprised at the insistent way she pressed her bottom back against his erection while he soaped up her back and shoulders. Warm water and slippery body wash flowed over his throbbing shaft and between her buttocks, and she was working him between her cheeks. He could not help but look down and groan softly to see the tip of his cock once again squeezing its way into her slippery rosebud. She looked over her shoulder at his face.\n\n\"Oh, you naughty boy,\" she growled.\n\nTommy wanted to protest his innocence. She was the one pushing her sexy butt back at him. He stammered, but all he could think to say was, \"It's just the tip.\"\n\n\"Mmm,\" she moaned agreeably. \"Just the tip.\"\n\nThen she was pushing her hips back against him rhythmically as he washed her back. She was pushing most of the head of his cock in and out of her hot and welcoming little hole. Tommy rinsed the soap off of her back and watched his hot girlfriend fuck her ass on the head of his cock. The wide, flared ridge was all that kept it from slipping right into her.\n\nShe stopped pumping her hips abruptly, reaching back to feel where her dilated butthole was stretched around his swollen helmet.\n\n\"Hey, that's a little more than the tip,\" she growled throatily.\n\nTommy wasn't sure what to say. He certainly didn't want to piss her off, and he had a feeling that if he accused her of instigating this delightful activity she wouldn't do it again. He pulled his hips back, withdrawing his cock from between her slippery buttocks, and kissed her drenched neck. \"I didn't hurt you, did I?\" he asked quietly.\n\nShe reached back and rubbed her sensitive little ring, shuddering again as she did it. \"No,\" she whispered.\n\nHer hand reached back to find his stiff boner. She gave it a squeeze as she turned around. Her nipples were just as erect as his dick was. They kissed and slowly rotated around each other. He turned and planted his hands against the tile surround as she scrubbed his back. They had to hurry to rinse off; the hot water had been used up by the time she finished soaping his muscular backside. Despite the cold rinse, he was still stubbornly hard after they had dried each other.\n\nEmma kept looking down at his plump cock head as it bobbed up and down. If only it wasn't so damned big she thought. I'll bet it would feel amazing in my ass. Her hand once again wrapped around the shaft and she looked up into his eyes.\n\n\"Mmm. You're still so hard,\" she whimpered. \"You want some more of this, don't you?\"\n\nTommy nodded eagerly, and she led him by his cock to the bed. She crawled up on her hands and knees, lowering her head to the pillow again and encouraging him to take her from behind and stare at her asshole. This time she didn't even ask when she reached back and pulled him out of her soaking-wet pussy to guide the tip to her horny butthole.\n\n\"Just the tip,\" she moaned again. \"Just the tip. Oh! Just the tip.\"\n\nBut she was forcing almost the entire head of his cock into her and was pushing her hips back forcefully. Tommy gulped and pulled his hips back. He was worried he would seriously hurt her\u2014she was not lubricated outside of the thick pussy juice that coated his cock, and that was rapidly drying out. She pushed back further, causing him to retreat further. Eventually, his butt pressed into his heels and he had nowhere to go.",
        "\"Oh, God,\" she groaned, forcing the head into her distended sphincter. \"That's more than the tip, isn't it?\"\n\n\"Yes, it is,\" Tommy replied in a strangled groan. Then he grabbed her ass cheeks forcefully and pushed her up off of him. The thick, mostly-dry juice from her pussy now served to stick them together, rather than providing a slippery lubricant.\n\n\"Ow,\" she grumbled. She turned around and rubbed her bottom. \"Why did that suddenly hurt so much?\"\n\n\"No lubrication,\" he replied. He licked his lips and blew out a long breath. \"At first, your juices made it all slippery. They dried out, though, and then they were sticky instead. Does that make sense?\"\n\nEmma thought for a second and then nodded. She leaned forward and gave him a quick smooch before sliding out of the bed.\n\n\"We need to take a break and go grocery shopping anyway,\" she said lightly. \"We should pick up some sort of lube while we're out.\"\n\nTommy had managed to stand up before she said that. He stood there stunned and stared at her when those words came out of her mouth. She turned and saw his expression of disbelief.\n\n\"What?\" she asked.\n\n\"Oh, nothing,\" he replied, shaking his head. \"I just...\" he licked his lips, \"...do we need eggs?\"\n\nHe didn't want to point out what she had said, for fear of making her change her mind. Sexy Emma was going to buy anal lube so she could enjoy pushing his hard cock up her asshole? Tommy thought he should pinch himself, but then reconsidered. If this was some horny dream, he certainly didn't want to wake up!\n\n* * *\n\nTommy still felt like he was in a dream. They were in the supermarket, and Emma was carefully reading the packaging on a half-dozen tubes and bottles of lubricants. She chewed her lip thoughtfully as she considered each one. The warming gel sounded good, but it was water-based and she didn't want it drying out and getting sticky like her own natural lubrication had. When she turned to Tommy for advice he spread his hands in a helpless gesture.\n\n\"I don't know anything about any of them, honestly,\" he confessed.\n\nHe was also concerned that his cock might just explode, he was so turned on. It gave a distinct lurch in his pants when she shrugged and tossed all six packages into their cart.\n\n\"They're not that expensive,\" she said. \"We'll just have to try them all and figure out what works best.\"\n\nThe rest of the shopping felt like slow torture for Tommy. He just wanted to get out of there and back to their apartment as quickly as possible!\n\nBy the time they were driving home, he had managed to calm down enough to think clearly. Just because Emma had bought all this lube didn't mean she was going to let him fuck her ass. If anything, he had to be more cautious than ever. He also had to make it clear to her that he was being careful and not taking advantage of her trust. She had to be the one to make it happen, and she had to know that she had been the one to make it happen. Otherwise, it would be his fault if she got upset.\n\nEmma looked over at his thoughtful expression as they unloaded the groceries from the car. The hungry, aroused expression he had worn earlier had been replaced by one of concern.\n\n\"What are you thinking?\" she asked.\n\nHe shook his head. \"I'm just worried,\" he replied honestly. \"I don't ever want to hurt you, Emma. You know that. I'm trying to figure out how to make sure I don't lose my self control.\"\n\nEmma felt warmth spreading through her chest at his thoughtfulness. She also shivered at the shot of arousal that pulsed through her pussy at the thought. She leaned up and planted a kiss on his cheek.\n\n\"I trust you to think of something,\" she said. Then she preceded him up the stairs to their apartment, knowing full well he would be staring at her shapely bottom the entire way.\n\nTommy licked his lips and feasted his eyes on her perfect backside. It made him think of that last episode before they had gone shopping, when she had pushed him back onto his haunches. She had nearly forced his cock up her ass with no lube. He almost tripped on the stairs when he realized that she would almost certainly push him the rest of the way inside her as soon as he was properly lubricated.\n\nHe stopped and panted for a second, letting her get further ahead of him before resuming his way up the staircase. Her bottom swayed from side to side as she closed the distance to the front door. It was hypnotic. Tommy managed to clear his head long enough to put away the groceries.\n\nEmma carried the plastic bag with the packages of lube back to the bedroom. She dumped them out on the bed and felt her sphincter throb in anticipation as she considered the selection. One was probably the most popular, based on commercials she had seen, and she figured she would start with it. It was a water-based gel, so they would need to reapply it to keep her tender backdoor moist and slippery. She swept the other packages back into the bag and dropped it into the top drawer of her dresser. Then she opened the box and removed the tube, carefully reading the directions and warnings as she kicked off her shoes and bent to remove her socks.\n\nTommy stood in the doorway and watched, mesmerized, as she slowly slid her long socks down her sexy calves. Her focus on the tube in her hand was intense. He finally shook his head and cleared his throat before closing the distance to kiss her.\n\n\"I love you, you know,\" he murmured into her mouth.\n\n\"I know,\" she replied, kissing him again. \"I love you too.\"\n\nThey broke off the kiss and he looked down at the tube in her hand. \"So that's our winner for today?\"\n\nShe nodded and they undressed at the side of the bed. Tommy scooped up the discarded clothes and set them in the padded chair in the corner. Then he crawled onto the bed and turned over, sitting up with a pillow between his back and the headboard. He gave her a weak smile.\n\n\"This will make it really hard for me to thrust up into you,\" he said. \"You'll be completely in control.\"\n\nEmma nodded. Something about that idea\u2014of being in control\u2014fueled her desire. She handed Tommy the tube and climbed over him, straddling his thighs and pointing her bottom right at him. She looked over her shoulder and right into his eyes.\n\n\"This one is water-based,\" she said, \"so you'll probably need to add some more if it starts to dry out.\"\n\nHe swallowed hard and nodded, then popped open the cap and squeezed a dollop of gel onto his index finger. Emma watched him and shivered when Tommy smeared the cool gel onto her sensitive pucker.\n\n\"I can see why the warming gel gets rave reviews,\" she chuckled. They both visibly relaxed as they shared a weak laugh.\n\nTommy squeezed another dab of lube directly onto the head of his cock and spread it around with his thumb. When the entire thing was glistening he held his shaft and pointed it toward Emma.\n\n\"Ready,\" he croaked. He cleared his throat. \"Take it easy\u2014you can stop whenever you need to.\"\n\nEmma lowered her bottom toward his crotch, moaning softly when she felt the heat of that throbbing cock head come into contact with her twitching asshole. \"Just the tip?\" she groaned.\n\n\"Just the tip,\" he whispered, nodding.\n\nThen he watched her take more than the tip immediately. He stared open-mouthed, incapable of speech.\n\n\"Just the tip,\" she moaned again, pressing back and insistently pushing most of the bloated head into her relaxing ring of muscle.\n\n\"Just\u2014oh!\u2014the tip!\" she groaned as the head of his cock popped inside her.\n\nShe pumped her hips forward and back, working his throbbing cock head in and out of her hot, horny asshole. She leaned forward until his cock head popped out of her snug ring, then stopped and panted with just the tip pressed into her.\n\n\"I think we need more lube already,\" she said breathlessly.\n\nHe nodded and grabbed the tube in his trembling hand. After popping it open, he squirted a generous stream of the gel over the head and shaft of his cock. He closed the lid and dropped the tube, then used his thumb to smear the gel over his cock and around the stretched opening of her ass. Tommy quickly pulled his hand away when she pushed her bottom back toward him again. The lubricated head of his cock slid into her easily, and the ring of her asshole squeezed down on his shaft.\n\nEmma groaned as she felt her sensitive, horny asshole being stretched open. It felt amazing and did not hurt at all. She could feel the lubricant on the inside of her puckered ring and just inside her ass, and it just made everything feel better and smoother. She pushed forward and back slowly three more times.\n\n\"Oh, Tommy, that feels so much better,\" she moaned. \"I can't believe how good it feels to have the tip of your cock inside me like this.\"\n\nTommy wasn't sure how to tell her she was now pumping a third of his cock in and out of her. He wasn't even sure if he should...but he cleared his throat anyway.\n\n\"That's a little bit more than just the tip,\" he murmured.\n\nEmma had thought she must be mistaken when she first felt the ridge of his bloated cock head slip past her tight sphincter. Now she was almost dizzy with arousal as she felt it stimulating the sensitive nerve endings inside her. Her pupils were wide, making her eyes look somehow bigger when she looked into his.\n\n\"Maybe we should use more lube, then,\" she panted.\n\n\"Okay,\" Tommy agreed. He was so turned on his hands shook. It took two tries to open the cap on the tube. He applied it generously to the exposed portion of his shaft and spread it all the way around the rim of her wide-open asshole. \"That should do it,\" he panted.\n\n\"God, you're so hard,\" she groaned as she sank back onto him. She shuddered and came, her juices gushing out to coat his balls.\n\nTommy realized with a start that he was leaking pre-cum inside her. He probably had been for some time. As impossibly arousing as this was, though, he was nowhere near orgasm. Emma, on the other hand, had already come at least once, and looked close to another shattering climax. Tommy's attention had strayed up her body to watch her face while she gasped through that orgasm. When her sphincter squeezed down on his shaft, he finally returned his gaze to his crotch.\n\nHe gasped in disbelief. Almost the entire length of his rock-hard dick was inside her!\n\nEmma's eyes closed briefly, and then she looked over her shoulder at his face. He was flushed in a way she had never seen except when he had been coming inside her. He was breathing heavily\u2014almost hyperventilating.\n\n\"Tommy, what's wrong?\" she managed between breaths.\n\n\"It's...it's...\" he couldn't say it. He looked back up at her eyes. \"That's a lot more than just the tip.\"\n\n\"Oh!\" she gasped. Her eyes were wide as she reached back with a trembling hand. Her fingertips lightly traced around the stretched ring of her butthole, feeling his shaft protruding from it. Then her fingers traced his shaft back only to immediately brush his pubic hair. \"Oh, God,\" she groaned. \"Tommy, you've got your hard dick in my ass.\"\n\n\"Do we need to stop?\" he asked softly, clearly not wanting to. Then his eyes widened. \"Does it hurt?\" he whispered in alarm.\n\n\"No,\" she murmured, shaking her head. But then she started slowly sliding forward until his entire glistening length slipped out of her snug embrace. She kept going forward until she was on her belly with her legs spread wide. \"You'll need to use more lube, though,\" she added.\n\nTommy shook visibly as he knelt above her and carefully squirted a dollop of lube right into her pulsing asshole. She had her head turned and was looking up at him.\n\n\"Tommy, I trust you,\" she stated. \"You won't hurt me, will you?\"\n\n\"No,\" he replied solemnly, licking his lips. He spread a fresh coat of lube over his cock. He capped the tube and set it aside before lowering himself carefully onto her back. As he pressed the tip of his cock to her wet hole, he whispered in her ear, \"Just the tip?\"\n\nShe let out a soft laugh as the tip of his cock spread her asshole open. She pushed her butt back up toward him, forcing the head inside her horny backdoor.\n\n\"What's so funny?\" Tommy asked. Then he groaned as her tight bottom took his entire length.\n\n\"I knew this would happen,\" she replied. \"As soon as I let you put 'just the tip' into my ass, it wasn't going to be enough. Eventually, you were going to\u2014ungh!\u2014fuck meee\u2014Ohhh!\u2014in my ass!\"\n\nHer voice rose in excitement when she felt him actually doing it. That huge, thick cock pumped in and out of her horny asshole, and she loved it! They stopped trying to speak and just enjoyed the incredible sensations of this first wonderful butt-fucking. Tommy fervently hoped there would be more. Emma knew there would be a lot more.\n\nTommy pushed himself up off of her back so that he could watch his cock pistoning smoothly in and out of Emma's receptive asshole. She pushed her hips up so that she could reach underneath herself and play with her clit. That little extra stimulation pushed both of them right over the edge. Emma's tight sheath gripped him firmly as he exploded inside her. They both cried out loud at the sheer intensity of this magnificent shared climax.\n\nIf there had been a massive earthquake at that moment, they would not have noticed.\n\nEmma felt her ass being filled with his molten semen and then it was seeping out around his still-thrusting shaft and oozing down between her thighs. Tommy shuddered and then slumped down onto her back. He was drained of energy, but his cock was still drooling hot cum deep inside her. She gasped as aftershocks shot through her ass and pussy. It was only then that Emma became aware how much of her own juices had soaked the sheets beneath them.\n\nTommy felt her squirm beneath him and quickly rolled off, pulling her onto her side so she could breathe.\n\n\"Thanks,\" she panted.\n\n\"No, thank you!\" he countered.\n\nEmma just grinned. She didn't have to ask why he was thanking her. She had given him the present he had always wanted. She just never would have guessed how much she would enjoy giving it to him."
    ],
    "authorname": "LexxRuthless",
    "tags": [
        "big cock",
        "big dick",
        "first time anal",
        "huge dick",
        "teasing",
        "anal sex",
        "first time"
    ],
    "category": "Anal",
    "url": "https://www.literotica.com/s/just-the-tip-4"
}
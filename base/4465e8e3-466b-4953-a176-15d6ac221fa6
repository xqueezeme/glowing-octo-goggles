{
    "title": "Dead and Horny Ch. 07",
    "pages": [
        "Whew, I know it's a few days late, but here it is, the next chapter in my zombie/succubus/mimic adventure which now stars Bigfoot and a pair of Arachne!\n\nAnyway, if you're a new reader, you should at least go to chapter one, this story is a spin-off of another story, and it's definitely plot-heavy. However, I try not to skimp on the (sometimes weird) sex scenes, so don't worry, we shall wait while you catch up!\n\nReturning readers, welcome back! This is officially a cross-over event, with some characters from Last of Her Kind, so I certainly hope you enjoy a deeper look into Velvet and Eulalie's life.\n\nI've loved reading all your comments and letters. I love this little universe I've created, and I get thrilled whenever I read about how excited you are. These characters are very real to me, and I know that a few of you have communicated that they resonate strongly with you. That's truly an author's dreams.\n\nDon't forget to follow me to get notifications through Lit, and check my release schedule on my bio to see when the next chapter is scheduled to drop! This one is a few days late, but I did update in advance so people would know that November screwed me over.\n\nAnyway, Lily is back from the brink of madness and ready to ponder her own existence! Enjoy!\n\nDreams of Redemption\n\nLily watched the sun rise over the trees from the front porch of the cabin. The forest was waking up, and she closed her eyes and listened to the fractured bird songs that bounced across the valley. The air was cool, and she was wearing a pair of jeans with a puffy black vest and a long sleeve flannel shirt. She sat in an oversized rocking chair and was using her tail to push off the ground and rock it because her feet wouldn't reach.\n\nThe front door of the cabin opened and Darren came outside. He paused when he saw Lily, and then sat next to her in a regular-sized chair.\n\n\"That chair's a bit big for you, don'tcha think?\" he said.\n\n\"I like sitting on big things.\" She licked her lips and winked at him. He ignored her and sat down in his own rocking chair and let out a groan, then rubbed his knee.\n\n\"Coffee?\" He held up a thermos. \"It's black, so nothing fancy like you city monsters like it.\"\n\n\"No thanks,\" she replied.\n\n\"Good to see you've got your head on straight again.\" He poured himself a cup of coffee and set the thermos down. Leaning back in his chair, he clutched the cup with both hands and looked out into the woods.\n\n\"I wouldn't say it was that bad. I was comatose, not crazy.\"\n\n\"I meant it literally. Two days ago, your damn head was on backward. I went out hunting jus' so I wouldn't have to look at ya.\" He sipped the coffee and grimaced. \"Truth be told, I went out for beers with my hairy friend and then made a supply run. Got some clothes for your friend so that she wasn't stuck wearing the same shirt every day. Sounds like we'll be making another run at the end of the week to get your stuff from a hotel, right?\"\n\nShe hadn't heard this. A good chunk of the night had been spent watching the others play make believe and role dice for damage. Still, it had felt so nice to be around other people and outside of the Dreamscape that she had watched. The Arachne fascinated her. She had never seen one in person, and Bigfoot had been an excellent storyteller. Once the game had ended, everyone had headed for bed while Dana had filled her in on the week and their flight from Montana. Afterward, Lily had gone to sit outside, eager to have an open sky above her that was real.\n\n\"Yes, but the timing will be tough. Can't get there early or we will run into ourselves leaving the hotel, but can't get there late, because I'm sure the Order went out looking for us after we vanished from the pit.\"\n\n\"Nah, I'll just have you go with Bigfoot. If there are trees nearby, he can get you close enough, you can pick up your stuff and be back here in under an hour. Can probably get your stuff before anyone even knows you were there.\" He laughed, which turned into a cough. \"Damn sasquatch can teleport, if you can believe it. Be across the States in under an hour, though it's not as easy as it used to be. Deforestation is a sore subject with him, so try not to bring it up.\"\n\n\"Don't worry, I won't.\"\n\n\"I'm curious, though. When you girls got here, I thought your friend was making up some bullshit story about time travel and what not, and I wasn't quick to trust ya. The girls were so excited though, and I didn't have it in my heart to lock you all in the barn. Eulalie did some computer trick and was able to find a video of you two walking through a town in Colorado, so unless you both have twins, I may as well roll with it. Dana couldn't tell me much of anything about how it happened, but I was hoping you might.\"\n\nLily nodded. It had actually been the first thing that Dana had asked her once her fantasy game had ended. \"She told you about what happened in the pit, right? About the thing down there?\"\n\n\"Oh, that part I understood. My girls love to play those games, and their mother did, too. It was the best way to pass the time out here, especially once they learned to read. Much easier on the pocketbook, too. I just don't know how you ended up going back in time.\"\n\n\"Well, that part is actually less complicated. Think of it like catching a fly with your bare hands. When you let go of the fly, do you release it in the exact same spot you caught it?\"\n\nDarren snorted. \"I'm not catching a fly with my bare hands these days, but I get ya.\"\n\n\"Well, when that thing grabbed onto us, we were briefly connected. These ancient beings, people assume that they're terribly violent, but a big part of that is the human body doesn't stand up well to time distortions. When it finally let go, it didn't put us back where we came from.\"\n\n\"Oh.\" He frowned, his left eye twitching.\n\n\"Is that...a problem?\" Lily sat forward in her seat just as Dana came out of the cabin. She had been using Eulalie's computer to watch movies all night, and Lily assumed whatever she had been watching had ended. Dana was carrying a large chair with her, and she stopped in front of them.\n\n\"Do you mind?\" she asked. Darren shook his head, and Lily closed her eyes. When she opened them, Tick Tock had transformed into a rocking chair that matched the one that Darren sat in, and she set it down next to Lily and joined them.\n\n\"It's not a problem for you,\" Darren explained with a sad smile on his face. \"Was just thinking if it was something that was easy, like walking through the woods, that maybe I could use it to see my wife one more time. It was a silly thought, but I figured maybe there was a trick to it that a demon could do.\"\n\n\"Oh.\" While she hadn't known what to expect, his response was definitely not one she had considered.\n\n\"Don't you worry about it,\" he said. \"I got to have a good life with Ana and the girls. Sure, we had some troubles out this way, but nothing we couldn't handle with that hairy ass yeti on our side.\"\n\n\"Bigfoot,\" Dana corrected. \"He doesn't like it when you call him a yeti. That's someone else.\"\n\n\"Oh, I know that. Why do you think I say it?\" His eyes sparkled with mirth as he sipped his coffee once more. \"I was wondering something, but don't know how to ask it, so will just come out and say it. I know you two are eventually going home, to this Mike fella. I had a bit of a request for you.\"\n\n\"I'm listening.\" Lily turned toward Darren.\n\n\"I'm sure this Mike fella is a good man and all, but...if you don't mind, I would like it if you kind of didn't mention us when you see him.\" He coughed again, and rubbed his chest, then continued. \"I'm not asking you to keep me a secret or anything, it's just that I need some time to figure a couple of things out with my daughters is all.\"\n\n\"I guess that's easy enough,\" Dana replied. \"Though if it comes up, we will kind of have to tell him.\"\n\n\"It's true,\" Lily added. \"If he mentions coming out here or something, I would definitely want to warn him that someone lives here.\"\n\n\"And I get that.\" Darren smiled again. \"There's just some rather complicated issues I need to discuss with the girls. Hell, they're not even girls anymore, they're both nearly forty.\"\n\n\"Wait, what?\" Dana asked.\n\n\"It's true,\" Darren replied. \"The Arachne don't age like we do. They look young until their final molt. One day, Ana was as young as she ever was, but after she molted, she had the most beautiful silver hair you ever saw. Her first forehead wrinkle appeared just a week later, and nearly six months later, she looked even older than me, if you can believe it.\"\n\nA single tear formed in the corner of his eye, and Lily felt a breath hitch in her chest.\n\n\"Don't worry about it,\" Dana replied. \"If I know Mike, someone will be too busy trying to kill him anyway. He probably won't be thinking about this place for a long while.\"\n\n\"Thank you. If you don't mind.\" He stood up, his legs creaking. \"I'm feeling up for a walk. Let the girls know for me, they worry about their dad and all.\"\n\n\"Sure thing,\" Lily replied, then sat and watched Darren's back until he rounded the corner of the house. It was clear that Darren had loved his wife, and from what Lily knew of the Arachne, this surprised her greatly. They were supposed to be vicious predators who ate the men they bred with, but clearly Ana had been different. She had escaped her feral nature and somehow built a loving home and a family with an ordinary man.\n\n\"He's dying,\" Dana said, her voice low.\n\n\"Excuse me?\" Lily looked back at Dana. \"How can you tell?\"\n\n\"It's the way he smells,\" she explained. \"It wasn't something I could place at first, but the longer I've been around him, the more I notice it. The girls think he knows it, too.\"\n\n\"They know?\"\n\nDana nodded. \"They smell things like I do. They figure it's still a couple years out, but it's hard to say. He's old, and his body has been through hell and back. It also doesn't help that he's on a constant supply of spider venom.\"\n\n\"You're going to have to explain that for me.\"\n\n\"They didn't go into detail, but apparently the bites keep him from experiencing pain. Like, physical and emotional. It doesn't dull his senses or anything, it isn't like a drug. It brings him peace. Apparently they had to start doing it for him after their mom died. He was having terrible night terrors.\"\n\n\"Well, I'm glad to hear that your new BFFs have been so chummy with you. So, what now? You going to spend the rest of the week playing board games, maybe freeze each other's bras in between pillow fights and watching movies all night?\"\n\n\"For your information, it is a terrible idea to pillow fight with a spider. They can stand on the ceiling and smack you real good. Oh, and we totally didn't freeze any bras, we were too busy making out and touching each other's boobs.\" Dana turned her chair so that she faced Lily, a sarcastic grin on her face. \"Seriously, though, we still have a few days before we can leave. Based on what Bigfoot told me, we aren't detectable here. It's why Darren doesn't let the girls leave. He and Ana came here to hide from people who were hunting her. Even though we are guests, I've been helping out where I can, and maybe you should do the same.\"\n\n\"What do you want me to do, help with the dishes?\" She scowled at the ground. \"If they make me clean the barn, I'm just going to leave.\"\n\n\"Actually, there is something you can help with. Here, let me show you.\" She got off Tick Tock and headed for the barn, so Lily followed.\n\n\"I swear, if you're bringing me out here to milk a cow, I'm gonna fly out of here and stay somewhere with a little more sun and fewer giant spiders.\" When Lily walked in the barn, she saw that it was empty of animals. The whole place was well organized, and other than an old jeep that was parked in the corner, it was mostly stuff that had been stored in boxes.\n\nDana pushed Lily up against the wall, and now their lips were almost touching.\n\n\"Please tell me you have some left,\" she whispered, then looked over her shoulder as if she was afraid someone might be listening.\n\n\"I thought you weren't that hungry anymore. Something about a deer?\" Lily patted Dana's belly for emphasis. It was still slightly swollen, so she gave it a rub and a pat. \"Looks like someone didn't use protection while I was gone. I don't know, maybe if the baby looks kind of like me, nobody will be able to tell.\"\n\n\"It's not funny, I had to stuff my damn face with that stupid deer last night.\" Dana let go of Lily and took a step back. She rubbed her stomach and made a face, then let out a hideous belch. \"And all it did was take the edge off. Do you know what an Arachne smells like to a hungry zombie? A fucking lobster dinner, with plenty of butter and those stupid biscuits that are so fucking good, you can't eat just one and they're actually four hundred calories each.\"\n\nLily laughed. \"I haven't seen you hangry like this. It's kind of fun.\"\n\n\"Lily, stop fucking with me.\" Dana's lower lip trembled.\n\n\"Actually, I haven't seen you like this at all.\" She leaned back against the wall of the barn. \"You're far more outspoken than usual. I would even call you chatty these days. I guess I'm a little bit surprised how much you've opened up to the spider twins while we've been here.\"\n\n\"They're like me.\" Dana was glowering now. \"We have a lot in common.\"\n\n\"And you and I don't?\" It was dumb and petty, but Lily realized that she felt a little hurt that Dana seemed to be so close already with Eulalie and Velvet. It had to be related to that piece of soul floating around inside of her, and she frowned. Jealousy never looked good on anybody, and now she felt like the proverbial third wheel.\n\n\"What? No, like we have a bunch in common outside of, well, this.\" Dana grabbed a piece of skin on her arm and peeled it up, revealing the tissue underneath.\n\n\"Oh, that's fucking gross.\" Lily made a face and looked away.\n\n\"What I mean to say is that they remind me of me. From before Alex died.\" Dana took a deep breath and pressed the skin back into place. \"I've had a lot of time to think on my own since we got here. Chopping wood for a few hours will definitely help with that. It's been a good reminder of what I might be again, someday, if things work out. And I won't even get into how quickly you can become friends with somebody when you've gone on a proper quest with them.\"\n\n\"Ugh, why couldn't you have just played Monopoly with them?\" She shifted against the wall and put her hands on her hips.\n\n\"Because Monopoly fucking sucks.\" Dana was close again, and her tongue ran along her lower lip. \"When I needed you, you were all fucked up, and they were there for me until you came back. And now that you're back, I still need you. Please don't make me beg.\"\n\nLily grinned. \"Oh? You're willing to beg, are you?\"\n\n\"I'm willing to eat your ass if you'll just hurry up and feed me.\" Dana pressed herself into Lily and slid an arm around her waist.\n\n\"Someone is feeling feisty today.\"\n\nDana shrugged. \"What can I say? I know my audience.\"\n\nLily laughed. \"Okay, fine. If you're willing to talk dirty to me before I feed you, then you must be desperate.\"\n\n\"I don't want to eat another fucking deer,\" she muttered. \"I'm already hungry again. Will end up bursting by the end of the week.\"\n\nLily's tail wrapped around Dana's waist, and she spun the zombie about so that she was now pinned against the wall. She ran her finger down the front of Dana's chest, then let it linger between her breasts. \"Soup's on, little girl.\"\n\nShe summoned Mike's sperm from the depths of her being and then kissed Dana. The zombie sucked greedily at her tongue as precious drops of sperm squirted into her mouth, and she swallowed. Already, Lily could feel Dana's body temperature rising against her, and the mewling noises she made were somehow adorable and pitiful at the same time.\n\nWhen they disconnected, a sticky strand briefly connected their mouths. Dana used her finger to collect it and suck it off.\n\n\"You're not you when you're hun\u2014\" Lily was cut off when Dana pressed against her, and their lips met once again. They stumbled about a little bit before Dana pushed Lily against the hood of the jeep. She unbuttoned Lily's shirt, causing her breasts to spring into view.\n\n\"No bra, huh?\" Dana mounted Lily and bit down on one of her nipples, then sucked on it hard enough that the tissue swelled.\n\n\"Nope, not even in church.\" Lily tilted her head back and allowed herself to enjoy the frantic touches of the horny zombie above her. Unlike with Mike in the Dreamscape, there was nothing soft or tender about this. It was raw and unfocused, enjoyable enough for what it was. Her jealousy from earlier had already faded, because she knew that this was something that neither of the Arachne could give her.\n\nA shoe hit the ground, and Lily lifted her head to see Dana stripping off her clothes as if they burned her. Clothing flew everywhere, and once she was naked, she threw herself on top of Lily and clamped her thighs around Lily's leg.\n\n\"For someone who hates going to church, you sure love being worshipped.\" Dana was grinding her pussy against Lily's thigh, and the succubus grinned. She made several bony lumps sprout from beneath her skin and create a surface for Dana to press against.\n\n\"That's because my body is a temple,\" she explained, her tail now coiling around Dana's waist. She narrowed the tip and pressed it between Dana's labia, parting her folds and teasing her with very little effort. \"Do you have anything you wish to confess?\" \n\nDana opened her mouth to reply, and Lily slid her tail inside of the zombie's eager pussy.\n\nDana gasped, a sound that delighted Lily, but seeing that rush of heat flood into Dana's cheeks and chest brought a grin to her face. Here, in this moment, Dana belonged to her and only her.\n\n\"That's right,\" Lily said, then pulled Dana's face into her breasts and held her in place while she tail-fucked her. \"Let the unholy spirit guide you to the edge of\u2014\"\n\nDana slapped a hand over Lily's mouth and sat forward so that they were face to face. \"If you're gonna talk about church, the least you can do is dress up as a nun for me. Though, if you do, I hope you don't make a...habit of it.\" A playful smile appeared on her face as she moved her hips and fucked Lily's tail.\n\nLily growled and turned to smoke, her body coalescing behind Dana, who was now on her hands and knees on the hood of the jeep.\n\n\"There is no way I'm letting you get away with a pun while I'm fucking you.\" She pressed on Dana's hips, which caused her legs to slide out from underneath her. Her swollen pussy was exposed once more, and Lily's tail came up from between her legs and formed into a thick, rigid cock.\n\nWhen she pushed herself into Dana, she shivered in delight as Dana went limp on the hood of the car and groaned. Lily pounded her from behind hard enough that the springs of the old jeep creaked ominously beneath it. Dana's head was turned, and her breath was coming so hot and fast on the cool metal of the car that condensation was forming on the hood near her mouth. She let out tiny, mewling cries and clung to the metal frame of the jeep with her hands as if it was a life raft in a storm.\n\n\"Oh, please forgive me, Mother Lily, for I have sinned!\" Dana let out a laugh that became a moan, then a growl. Her fingers pressed into the metal hard enough that she was leaving small dents, and when she came, she let out a short howl like a dog, and then just opened her mouth silently and groaned, likely to keep the others from hearing her and coming to see what was happening.\n\nNot that Lily minded if they did. She expanded the head of her faux cock inside of Dana and made it flutter in rhythm with Dana's orgasm, teasing the inner walls of her vagina until she let out one final groan and went completely limp on the hood.\n\n\"Perform twenty Hail Lily's and eat all your vegetables, then all shall be forgiven.\" Lily summoned a riding crop and smacked Dana on the ass. \"But seriously, that pun was awful.\"",
        "Dana lay panting on the hood of the jeep, her bare nipples stiffening in the cool air. Her loud breaths went silent and she let out a sigh of relief, then rolled over and sat up, her legs spread wide on the hood. \"Yeah, that's fair. I was trying not to laugh, so figured that was the best response. You have no idea how much better that feels, thank you.\"\n\n\"I would have to agree.\" Lily smirked as Dana slid off the hood and went on a hunt for her clothing. The riding crop vanished from her hands in a puff of smoke. \"And this was way more fun than milking cows, by the way.\"\n\nDana chuckled, then knelt under the jeep to retrieve a sock and her panties.\n\n\"I'm surprised you didn't drag me out here last night. We could have counted the stars or some shit, maybe even read poetry to each other.\" Lily sat on a box, causing the side to split open. A faded box fell out, and she picked it up. It was an ancient box of crayons, each one of them worn down to nubs. She closed the flap and stuffed them back through the crack.\n\n\"Yeah, well, zombie brain had me obsessing over something. You might not remember, but when we were in the pit, I found a drawing of that necklace we were supposed to find. The Order is looking for it, too, and I had this stupid idea that maybe I could try and find it. They called it a Dragon Seed, so I was poking around the internet for details.\" Dana pulled her panties on and then found her bra in the passenger seat of the jeep.\n\n\"And what did you find?\"\n\n\"Well, once I dug deep enough, I found exactly what you would expect to find on the internet. Porn, and lots of it.\" She put on her bra and then started sliding into her jeans. \"But that's what I get for looking up a pearl necklace related to dragons.\"\n\n\"Yeah, even I could have told you that.\"\n\nDana nodded, then put on her shoes. \"So, yeah. I had this stupid idea that maybe the reason the Order never found it was because we already had. However, we can't leave here anyway, so I guess it's going to have to remain a mystery.\"\n\nLily was about to say something when a large shape dropped down from above. Eulalie landed with hardly any sound at all, her cheeks bright red.\n\n\"I am so sorry,\" she told them, all of her legs squirming. She ran out the door of the barn and vanished into the woods.\n\n\"What was that about?\" Lily looked at Dana.\n\n\"No idea.\" They left the barn behind and saw Eulalie emerging from the woods, a satisfied look on her face. When she saw them, her cheeks turned red again.\n\n\"Were you watching us?\" asked Dana.\n\n\"Only sort of. Not really.\" Eulalie grimaced. \"I couldn't sleep last night so snuck out to the barn and fell asleep in the loft. I woke up when I heard you two, but by the time I realized what you were doing, I couldn't leave without making it awkward.\" She let out a little laugh. \"But I had to go to the bathroom, and couldn't wait any longer. I'm really sorry. I promise I'm not a creep.\"\n\n\"It's fine, don't worry about it.\" Dana looked at Lily. \"Right?\"\n\nLily rolled her eyes. Even if Eulalie had been watching, the succubus didn't care who had seen them. However, the prospect of tormenting the spider had been entertaining. \"Yeah, fine, whatever.\"\n\n\"Thanks.\" Eulalie bowed her head and headed toward the cabin. Lily watched the Arachne go inside, then looked over at Dana.\n\n\"Be nice,\" Dana told her, then headed for the cabin herself.\n\nLily was left outside by herself, and it suddenly occurred to her that her only options were to go inside or maybe head out for a walk.\n\n\"This place is so boring,\" she muttered. Still, it was better than being trapped in the Dreamscape. She looked up in the sky and noticed that the clouds up above looked like giant balls of floating cotton. It had been some time since she had gone for a daytime flight, so why not take advantage of it?\n\nShe took off into the sky, flying in large circles as she ascended. Beneath her, the forest shrank away, and she could make out the azure glow of the magical barrier that shielded them. Wondering how high up it went, she flapped her wings until the clouds gobbled her up.\n\n<center>\ud83d\udd77\ud83d\udd77\ud83d\udd77</center>\n\nA cool breeze ran along the back of Dana's neck like a lover's hands, and the birds sang the whole way. The hike up the mountain was pleasant enough, and had been a wonderful suggestion. Behind her, she couldn't hear a sound, but could definitely smell the Arachne's presence. Velvet moved with an ethereal grace through the forest, and Dana couldn't help but wonder just how fast the Arachne could run.\n\n\"So you usually hunt alone?\" Dana asked.\n\n\"I do,\" Velvet replied. \"Well, if you don't count Emery. He usually comes with me just in case something happens, but with you here, it shouldn't be a problem.\"\n\n\"What could happen?\"\n\n\"Well, standard stuff. Like, maybe I'm splitting wood and a tree falls on me, or something silly like that. Emery's job is to go find help just in case. It's my dad's idea, in case you were wondering.\"\n\nDana chuckled. \"I think most dad's are the same like that.\"\n\n\"What was yours like?\" Velvet asked. \"For obvious reasons, mine is over protective.\"\n\nDana smiled, thinking back to the hundreds of hours spent underneath a car, or repairing something in the house. \"Mine always encouraged me to pursue what I love. Had no problem with me putting myself in danger as long as I knew the risks.\"\n\n\"Yeah, we get a bit of that, too. Dad used to be a soldier, and he wanted us to know how to fend for ourselves. We learned a lot from him, but most of it comes from our mother. Well, and instincts. When I was five, I could have killed a grown man unarmed if I wanted to. That's not hyperbole or anything. Arachne are top-tier predators.\"\n\n\"So, should I be nervous around you?\" Dana turned just enough so that Velvet would see that she was smiling.\n\n\"As a predator? No. My prey drive tells me I would get more nutrition out of a rock, no offense.\"\n\n\"None taken. Do I...smell to you?\"\n\nVelvet cleared her throat. \"Um...yeah.\"\n\n\"Oh, don't worry, I'm not offended or anything.\" She stopped and turned around to face the Arachne. \"Ever since I died, I have this crazy sense of smell that constantly fucks with me. Like, if I get remotely hungry, I can smell everyone nearby, and they all smell like the tastiest food you could ever eat.\"\n\nVelvet nodded. \"Yeah, it's not quite the same for me. Like, I smell things, but my body also tells me stuff like if the meat is any good, or even if someone may be carrying a weapon. It's hard to describe to a human, but...\" She pointed at the extra sets of eyes above her own. \"My human eyes are okay, but the spider part of me sees everything. A little bit of infravision, some ultraviolet, etc. So the stuff I smell is sometimes similar to that, like stuff outside of a human's senses.\"\n\n\"So, ultrasmell and infrasmell?\"\n\nVelvet laughed. \"Yeah, that's a good way of putting it.\"\n\n\"I have another question.\" Dana turned to walk the path, and Velvet was now walking at her side. \"I've seen some pictures of your mom, and she's a mirror image of your sister, but...\"\n\n\"Ah, yes.\" Velvet waved her hand over her lower body. \"Would you believe that it's just because I hate shaving my legs?\"\n\n\"I mean, standards of beauty are different out here in the woods. But seriously, I'm curious, if you don't mind answering.\"\n\n\"I'm just fucking with you. We think it's the environment, but can't be sure. My arachnid morphology is vastly different than my sister's, and the assumption is that the environment we are born into taps into some sort of hereditary network. It took my parents a few years to conceive me, and for some reason, my biology dictated that this form was more suitable for hunting in the woods.\"\n\n\"Other than appearance, is there really much of a difference between you and your sister?\"\n\n\"I can't spin a web worth a shit. Like, I can force it and bundle up my food, but I'm not the trap builder my sister is. I am much stronger, though, and my senses are sharper. She was built to lurk and wait, while I was built to pursue and fight.\"\n\n\"I guess that makes sense.\"\n\n\"Yeah, we\u2014\" Velvet held up a hand and looked over at a nearby tree. Dana watched her approach the tree and lean in close to look at a tiny spider with a bulbous butt. The little spider was waving its arms around frantically.\n\n\"She says that there's a bear up ahead.\" Velvet looked over her shoulder. \"We're going to take a different path and avoid it.\"\n\n\"Worried it might hurt you?\"\n\n\"Oh, I've killed more than a few bears. This one is just passing through, and I try to stick to animals like deer, to keep the predator-prey balance and all that.\" Velvet led Dana in a different direction, and they were now moving down into a valley. \"Besides, that bear isn't hurting anything by just being there. As long as it doesn't start sniffing around the cabin, it can go about its life.\"\n\n\"So, what kinds of things do spiders talk about?\" Dana asked. \"I didn't even know they were smart enough to talk.\"\n\n\"Mostly simple things. Weather, terrain, what they've eaten. Spiders are remarkably kind for the most part. Jumping spiders are my favorite, they just love life. Imagine a little kid saying 'what's that?' over and over again, it's kind of their mentality. Hobo spiders are generally dicks, though. Like, not aggressive or anything, but they'll comment on everything you do like they know better.\"\n\nDana laughed. Spiders were just a natural occurrence no matter where you were in the world, and the idea that they could be silently judging people appealed to her.\n\nThey descended into the valley and took a circuitous route through a series of trees. She smelled sulfur, and briefly thought that Lily had followed them into the woods until they maneuvered around some rocks to reveal a clearing with a pair of large hot springs in the middle. The further of the two looked very deep, but the closer one was very wide, like a swimming pool.\n\n\"How pretty.\" Dana knelt at the water's edge. The inside of the springs were ringed in red and blue, and she held her hands over the water and watched vapor form on her fingertips.\n\n\"Yeah, there's a bunch of these scattered around the valley. We use them for baths or relaxing.\"\n\nDana heard the rustle of clothing and turned to see that Velvet was taking off her clothes.\n\n\"Um...I thought we were coming out here to hunt?\"\n\n\"Change of plans. We've got plenty of food at home, and I am way overdue for a bath. Mainly got out just to get out. Days can get kind of long out here sometimes.\" Velvet was topless now except for her bra, and she reached behind her back and fidgeted with the clasp. She pulled the undergarment free, revealing a pair of wide spread breasts with dark nipples the size of silver dollars. \"The water won't hurt you if you want to join me. It's like a hot tub.\"\n\nShe watched the Arachne step into the pool, the water overflowing onto the surrounding soil. Velvet had pulled her hair into a ponytail, and she let out a contented sigh as she spread out her arms and laid her head on a nearby rock. Her human frame was well muscled with streaks of white and brown fur running down her sides and belly.\n\n\"And how would you know how a hot tub feels?\" Dana slid out of her pants and sat on the edge of the spring, her legs in the water.\n\nVelvet grinned. \"If you think my sister and I never snuck out and hijacked someone's vacation cabin, you would be sorely mistaken.\"\n\n\"What about your sister?\" The voice came from above, and Dana looked up to see Eulalie jump out of a tree. She curled into a tight ball and cannonballed into the far spring, sending a geyser of water into the air that doused Velvet and Dana. When she surfaced, her wet hair clung to pale skin, and her legs spread wide as she floated on her back in the spring, looking very much like a sea urchin.\n\n\"I was wondering when you would get here.\" Velvet wiped water out of her face. \"Eulalie comes here far more often than I do. She's a much better swimmer on account of not having all the extra fur on her legs. I sensed her following us a while back.\"\n\n\"One time I fucked up the landing and snapped one of my legs off.\" Eulalie lifted one of her long, spindly legs into the air and gave it a shake. \"Not only did it hurt, but mom grounded me for coming to the spring by myself for the rest of the winter. She was super protective of both of us.\"\n\nVelvet nodded. \"You would have liked her, though. She was a lot of fun, and loved to read us stories. She used to run the game for us, but Uncle Foot took over after she passed.\"\n\nBoth Arachne went quiet, and the only sound that could be heard was the wind blowing through the trees and the burbling of the spring.\n\n\"So, what happens at the end of the week?\" asked Velvet. \"Are you two heading out of here?\"\n\nDana nodded. \"Bigfoot is going to help us get our stuff back and then get us back home I guess.\" It was an anticlimactic end to her adventure, and she let out a disgruntled sigh. They had retrieved only a couple of the magical objects she needed to dispel her curse, and she wasn't sure if she had technically gained anything from all the trouble they had gotten in.\n\n\"You don't sound happy about it.\" Eulalie had drifted around enough that she was on her back and facing toward Dana now.\n\n\"I didn't find everything I needed,\" she explained. \"Quest failed, I guess.\"\n\n\"Does it have anything to do with what you were looking at on my computer?\" asked Eulalie. \"I saw that weird necklace picture you drew and thought it was that thing you were talking with Lily about.\"\n\nDana nodded. \"The Dragon Seed? Yeah, it was. Ratu told me that that item was the big one, and super important.\"\n\n\"Ratu is the naga, right?\" Velvet had now lowered herself into the spring far enough that her chin kissed the water.\n\n\"Mm-hmm. Mike mentioned that she can turn into a giant snake, but I haven't seen it.\"\n\n\"I would love to see that.\" Velvet grinned.\n\nDana opened her mouth to say 'maybe someday,' but remembered Darren's words. \"Same,\" she replied.\n\n\"Huh.\" Eulalie sat up in the water and crawled out of the deep spring and joined them in the shallow one. She was also naked, and Dana couldn't help but notice that her torso seemed softer and more plump than her sister's. \"I kind of thought so. I showed your picture to Uncle Foot, and he recognized it almost right away.\"\n\nDana sat up fast enough that she splashed herself in the face. \"He's heard of it?\"\n\nEulalie nodded. \"Uncle Foot has been around. He asked me where I got the picture from and then groaned when I told him you gave it to me. I had to promise him that I wasn't going out to look for it.\"\n\n\"What does it do?\"\n\n\"Vee, you'll love this.\" Eulalie flicked water at her sister's face. \"Dragons are extremely rare, and they rarely breed or reproduce. Well, female dragon's lay eggs, which means that they probably have to fuck to fertilize them. Well, some mage got the bright idea of collecting dragon sperm and discovered that it crystallizes on contact with air.\"\n\n\"That's...\" Par for the course, Dana thought to herself. Of course it was somehow related to sex. \"Weird.\"\n\n\"Well, gets weirder. There have been a few Dragon Seeds through time. The story goes that a man who possesses the Dragon Seed will slowly gain the qualities of a dragon until he actually becomes one. It will use up the seed, but, you know...now you have a dragon man.\"\n\n\"Whoa! Like with wings and a breath weapon?\" Velvet was bobbing up and down, her shimmering eyes fixed on her sister. \"Maybe even some sexy fangs, or horns?\"\n\nEulalie shrugged. \"Uncle Foot didn't know the details. Wars and the like were fought over them, and one hasn't been seen for a long time as far as he knows.\"\n\n\"Dragon sperm. I was sent on a quest for dragon sperm.\" Dana pulled off the rest of her clothes and slid down beneath the water's surface with her eyes closed until the world was drowned out by heat and darkness.\n\nHer scream of frustration was gobbled up by the water, and once she was done, she sat on the bottom of the spring. It was time to officially call it. The other items were impossible to find, but this last one was likely already in the hands of someone who knew its secret. If the Order was also looking for it, chances are that they had resources to track it that she did not.\n\nShe sat there moping for a few minutes until a hand grabbed her by the hair and dragged her to the surface.\n\n\"Hey, you okay?\" Velvet's eyes were full of concern.\n\n\"Yeah. Don't need to breathe, remember?\" Dana sank below the water when Velvet let go of her, then bobbed over to the side where she could sit once more. She wiped the hair out of her eyes and sighed. \"Sorry, just super frustrated. The only good thing that's come out of this trip was getting to meet the two of you. It's been nice out here, not worrying about being chased by the Order, but I'm never going to be able to track down this necklace, and I definitely am not going to be able to take it from a dragon.\"\n\n\"Oh, the process takes years, so there's still time. As for tracking it down...\" Eulalie broke into a grin. \"What if I told you that I'm working on it?\"\n\n\"How?\"\n\nVelvet laughed, and Eulalie's face glowed. \"Well...my dad knows I do computer stuff, but not what kind I do. I took some online classes once we had internet, and it blossomed from there into something much bigger.\"\n\n\"She's a world class hacker,\" Velvet said. \"Like, she's actually scored a few government contracts, that kind of thing.\"\n\n\"How? Don't they do background checks?\"\n\n\"Background checks against what? Technically, we don't exist, so it wasn't like I had to wipe out any trace of who we were. Manufacturing fake identities is easy when you have nothing else to do with your time.\" Eulalie tossed her hair over her shoulder. \"Most of what I do is test weaknesses in secure systems for government agencies. It's like someone paying you to try and break into their house. I don't do bad stuff, because the last thing I want to do is call attention to us.\"\n\n\"You can't say you never do anything bad,\" Velvet added.\n\nEulalie ignored her sister. \"But because of the work I do, I have access to a lot of programs and computers that most people do not. Right now, I've got a network of computers that are compiling video and photo footage and scanning it for any objects that might match this necklace of yours.\"\n\n\"That's a thing you can do?\"\n\n\"It's kind of like facial recognition.\" Eulalie shrugged. \"I'm not saying it's perfect. Before I left the cabin, the computers had already collected thousands of positive matches, but we can filter those. It's mostly just looking through social media posts from the last year or so, and maybe traffic cameras, that kind of thing. It isn't like you sleep anyway, so it will give you something to do.\"\n\n\"Eulalie. Thank you.\"\n\n\"Don't thank me yet.\" Eulalie's cheeks glowed with pride. \"Let's see what I turn up first.\"\n\n\"Hey, can I ask a question?\" Velvet had raised her hand like a child in school. \"That scar on your shoulder is wicked. How did you get that?\"\n\n\"This?\" Dana looked at her shoulder. The lines had faded a bit, but the mark was very noticeable. \"Stupid bitch with a sword cut it right off in one swing. Lily had to learn surgery to reattach it.\"\n\n\"Wait, a woman with a sword?\" Velvet moved closer and stared at the wound. \"When was this?\"\n\n\"Um...well, last week for me, a couple days from now, technically.\"\n\nEulalie giggled. \"I love this time travel shit.\"\n\n\"Lala, can it. This woman, what did she look like?\"\n\nDana described her attacker, the details always fresh in her mind. \"She was using this really cool sword that unfolds, I guess it's standard issue.\"\n\nVelvet pulled herself out of the spring, steam clinging to her body as she walked. She knelt over her clothes and pulled something out of its pocket. \"You mean like this?\"\n\nWith the flick of her wrist, the knife in her hand unfolded into a blade.",
        "\"Where did you get that?\" Dana asked.\n\n\"Our dad took it off some guy who was hunting him and mom,\" Eulalie said. \"He let Velvet have it for hunting when she was younger, but I don't think she uses it anymore.\"\n\n\"If I'm in a hurry chopping up firewood, I might.\" Velvet twisted her wrist while flicking the blade, and it collapsed. \"Do you know how to use a sword?\"\n\n\"Nope. But I'm a pretty fast learner.\" She tapped her temple. \"Dead girls get photographic memory, after all.\"\n\n\"Hmm.\" Velvet crawled back into the spring and looked at her sister. \"If you run into this woman again, I bet she lops off more than your arm. I think we can do better than that.\"\n\nEulalie pulled herself out of the spring and moved to some nearby rocks. She rolled one aside and pulled out a silken bundle with towels inside. \"You interested in learning how to dodge a sword? Our mother taught us how to fight, she was always paranoid that the Order would find her and dad someday.\"\n\n\"Yes, please.\" Dana pulled herself out of the spring and caught the towel that was tossed to her.\n\nVelvet grinned, then stood as well. Water dripped from her bulbous, hairy body, creating a sound that was very similar to rain. \"This will be so much more fun than hunting.\"\n\n<center>\ud83d\udd77\ud83d\udd77\ud83d\udd77</center>\n\nLily sat in the rocking chair, her eyes on the sky as the stars appeared. Dinner had been a brief affair where the Arachne had drained a deer and Darren had eaten a bowl of stew. After eating, Bigfoot had showed up at the front door and everyone had retired to the game table for tonight's session.\n\nShe had watched for almost half an hour, then got bored and headed outside. The forest was loud, filled with the sound of hunting bats and crickets, and she was becoming aware of the hollow pit in her stomach that craved to be filled with food. She had eaten recently, but between the incident in the pit and her long flight earlier today, she could definitely use a snack.\n\nThe door creaked, and she saw that Darren had stepped outside. She groaned inwardly, preferring to mope in solitude. Still, it was his house, and she didn't feel like getting grief from Dana about being impolite later.\n\n\"May I join you?\" he asked. \"Gettin' a bit loud in there. Could use some quiet.\"\n\n\"Free country.\" She moved out of his chair and leaned against the wall. He let out a groan when he sat, then sighed in relief once he was down. He rocked for several minutes, his eyes closed and exhaustion on his face. When she had come back from her flight earlier, he had been sitting in this same chair, rocking and reading a book. A simple life for a simple man.\n\nEventually, he opened his eyes and pulled a Snicker's bar out of his pocket and held it up. \"Want some?\"\n\nShe shook her head. \"No.\"\n\nHe grunted, then took a bite of it. His eyes scanned the trees, as if he was looking for someone, his jaw working on the candy in his mouth. After he swallowed, he spoke. \"I've been thinkin' all day, after this morning's conversation. Wanted to ask you a question.\"\n\n\"Why bother saying it, then? Why not just ask?\"\n\n\"Maybe I'm workin' up to it is all.\" He opened his mouth and paused when the sound of laughter came through the windows of the cabin. A smile appeared on his lips, then faded. \"What happens to us when we die?\"\n\n\"Well, first you die. Then you rot and stink until you turn into dirt and goo, depends on where it happens. What kind of question is that?\"\n\nDarren scowled at her. \"Well, I thought that maybe you knew, on account of being a demon and all.\"\n\n\"I can tell you about Hell. It sucks. Even demons hate being there.\"\n\n\"Hmm. But if Hell exists...then Heaven does, too?\"\n\nLily groaned. \"Okay, I'm definitely not qualified to answer questions about that place.\"\n\n\"No, it's not that. But when we die...we still exist. We go somewhere.\"\n\nLily crossed her arms and tilted her head. \"That depends on a bunch of things. Are you worried about your own mortality or something?\"\n\n\"Nah, not me. Part of me died when I was young, and it's just waiting for the rest of me. I was just hopin'...\" a small smile played on his lips. \"Maybe I'm hopin' to see someone again. Once I'm gone.\"\n\n\"It's possible, I guess. I'm not an expert.\"\n\nDarren turned his head toward the darkness and rolled his eyes. \"No, I'm not talkin' about you,\" he said, causing Lily to look over her shoulder. There was nobody there.\n\n\"Then who are you talking about?\" she asked, looking back at him with curiosity.\n\n\"Hmm? Oh, right. Sorry, mind wanders.\" He stood from his chair and looked in the window of the cabin. \"I love my girls, don't get me wrong. But sometimes I see so much of their mother in them that it makes my heart hurt. It's an ache that never seems to go away, y'know? I'm sure it sounds like I'm ramblin', but...I miss my wife.\"\n\nThe light of the cabin shimmered in the pools of his eyes, and he smiled. \"She saved me. Gave me a life I thought was impossible, and there isn't a day that goes by that I don't miss her dearly. I guess the reason I asked you about dyin' was because I'm hopin' that maybe, once I'm gone, I'll get to see her again. I have my thoughts on it, but figured maybe you could tell me for certain.\"\n\nLily said nothing, her thoughts whirling around. It was strange to hear Darren say such a thing, to claim a love for a woman who had clearly been inhuman, but now that the idea was in front of her, she wondered if there was a limit to who could actually be loved.\n\n\"I don't know,\" she told him. \"Humans and Arachne are different. Even humans don't go to the same place when they die, it depends on so many things. There is something out there, a place where most of them go, but that's all I know for sure, and even that isn't much.\"\n\nHe sniffed, then rubbed his eyes. \"Well, assuming I get there, maybe I'll go looking for her. Will give me something to do.\"\n\n\"I hear the afterlife is a pretty big place. Might be hard to find her on your own.\"\n\n\"I'm never alone,\" he whispered. He looked away from the window and rubbed his eyes again, then let out a cough. \"I'm feelin' pretty tired. Think I'll turn in for the night. Take care.\"\n\nHe took a step away from the chair, but Lily couldn't help but notice that he had left part of his Snickers bar behind. She saw his shadow move through the house, heard him kiss his daughters on the cheeks, then the quiet click of a door in the back of the house.\n\nInside the cabin, it sounded like the group was besieging a dwarven stronghold, or fighting dragons, it was hard to tell through the laughter and accusations of cheating. Occasionally the night was punctuated by a rare laugh from Dana, a sound which brought a small smile to Lily's lips.\n\nWhen she had set out on this trip, she hadn't realized how much of herself she would see in the young zombie. Sure, her intentions had been altruistic, and she had hoped to keep Dana from falling down the same hole of anger and chaos that had claimed her many centuries ago.\n\nHowever, after her ordeal in the Dreamscape, she now found herself wondering if she was in a hole that could still be climbed. Inherently, her nature was evil. It was something she had long been comfortable with, even embraced. It came with the territory of being a creature of Hell, regardless of her origins.\n\nNow, though, there was that tiny voice inside of her that told her what was right from wrong, and it was impossible to shut it out. While looking down on the world from up above, it had occurred to her that she was struggling with very human emotions for the first time in centuries and it was likely entirely due to the fact that part of Mike's soul now resided inside of her.\n\nBut it was more than that. He was also like her conscience, a silent observer just waiting to comment on her day to day actions. Would he approve of them, or would he condemn her? It hadn't really come up during their interlude in the Dreamscape, and she couldn't help but miss the soft, loving touch of his skin against hers. Was that something she could still have if she continued her life as a succubus?\n\nRight now, she stood outside a cabin filled with creatures that would inspire terror with a single glance, but beauty was clearly in the eye of the beholder. Each of the monstrous beings inside was just as deserving of love and light as any other creature, and she now wondered if such a blessing could someday extend to her as well. Then again, after all the wrong she had done, did she even deserve redemption?\n\n\"I'm so fucking confused,\" she whispered, her hand now over her eyes. She had never been one to crave salvation, but was that because she had believed she was simply beyond saving? Her insides were all broken, and even though the person she was had been utterly destroyed by Aladdin's magic so long ago, the person she was becoming now rebelled against her own demonic nature.\n\nCould Mike ever see her as anything but who she had been? She thought of the misery that Darren experienced, and had no doubt in her mind that Mike could be the same way. Darren was a man who missed his wife, a creature with a long legacy of hunting and killing humans, sometimes for sport. That Ana had found a way to suppress her own monstrous nature was a testament to her strength, but that she had passed those pacified traits to her children was also a miracle in itself.\n\nIf Darren, an ordinary man by all accounts, could love a monster like Ana, then...\n\nHer thoughts swirled around like fiery spirals, memories of the past, both distant and recent, coming to the forefront for her inspection. Troubled by the things she saw, her senses alerted her to the fact that Darren had fallen asleep.\n\nIt had been some time since she had properly fed, and now there was a perfectly good meal nearby. She could take a little bit, just enough that nobody would ever know, feed that side of her that wanted to prove that she was still a creature of Hell. But if Dana was right, and he really was dying, such an act could cut his remaining days in half.\n\nIt should have bothered her more that she was now standing in his room, she didn't even remember walking there. The window was open just a crack, which had been more than enough for her to gain entry. Outside his bedroom door, she could hear the others laughing, followed by the rolling of dice. Through the veil of sleep, she could sense the war brewing inside of Darren's head, and his brow was furrowed, making his wrinkles even deeper than before.\n\nShe sat on the side of his bed and put her fingers on his temples, curious what could trouble a man who lived with two Arachne daughters in the middle of nowhere.\n\nThe Dreamscape was different for everyone, but the sudden intensity of Darren's mind shocked even Lily. She was standing outside the cabin once more, but it was surrounded by a fierce jungle full of smoke and gunfire. Curious, she walked inside, sensing the fragile soul within.\n\nDarren sat at the dining room table, his body hunched over and his hands trembling. On the table was a bloody knife, and he occasionally flicked the handle, causing it to spin in place.\n\n\"He didn't always used to be like this.\"\n\nLily turned to see who was speaking, and was stunned to see a younger version of Darren standing on the other side of the cabin. He was wearing combat fatigues and had a rifle slung over one shoulder. Though he spoke to Lily, his attention was focused on the jungle outside.\n\n\"I'm guessing not.\" She looked at Darren, then back at his clone. \"So, what are you supposed to be? His lost childhood? Dreams of better days?\"\n\n\"I'm the one who watches over him, ever since the war.\" The clone frowned, then turned his attention to Lily. \"The dreams are coming for him, you know. The venom keeps them at bay, helps to hide him from the shadows, but it isn't the same. He used to think it was the venom that kept the darkness back, and maybe in the beginning it was. But death comes for all things, and when it took her away, he learned an inconvenient truth.\"\n\n\"Are you talking about his wife?\"\n\n\"Ana.\" The clone laughed, then drew his gun and fired it out the window. The staccato burst of ammunition startled Lily, but when she looked outside, she saw a cluster of shadows flee into the jungle.\n\n\"What the fuck is even out there?\" she asked.\n\n\"Guilt. Sadness, some regret. Anything that wants to come for you when you're at your most vulnerable. The jungle claims us all, eventually, but what matters is having the strength to escape it.\" He slung his rifle over his shoulder and pulled a Snickers bar from his front breast pocket. \"Want some?\"\n\n\"No, I'm good.\" She kept a wary eye on the clone, then crossed the cabin to Darren. There was no furniture other than the table and chair, and Darren had picked up the bloody knife and was inspecting it, his reflection distorted in the steel of the blade. \n\n\"This is weird.\" Mike stood with her now, appraising the cabin. \"Did you seriously pop in here to eat a part of this guy?\"\n\n\"I don't need any judgement from you,\" she told him, then sat on the edge of the table. Darren's eyes briefly met hers, and she saw a total lack of interest. His entire attention was focused on the bloodied knife in his hands, and every now and then, she thought she could hear the distant screams of an angry man coming from it.\n\n\"I get it, you're hungry. But you can't feed on the innocent, now can you?\"\n\nLily opened her mouth, then lowered her voice. \"He's hardly innocent. I can see it written on his soul. Sure, he's done good things most of his life, but there's a lot of darkness, too.\"\n\n\"Would you say he's a bad person, though? Do dark deeds always define us?\" Mike sat on the edge of the table and crossed his legs much like Lily did. When he noticed, he shifted his knees apart, then leaned toward her. \"And remember, I'm part of you now. Any judgement from me is really just a self-reflection that you might not want to hear.\"\n\n\"Shut up,\" Darren whispered. Back in the real world, Lily heard him groan.\n\nMore gunfire echoed through the cabin, and Darren's clone frowned through the gunsmoke. \"Shit, it's going to be a bad night,\" he said.\n\nLily looked at Mike, then Darren. The two of them had very different lives, but their capacity for love made them similar enough that it made her uncomfortable.\n\n\"Looks like you get to make a choice, tonight.\" Mike hopped off the table and walked to the closest window. He watched something for a few minutes, the silence punctuated by gunfire. \"You can feed, it's not like anyone is going to stop you. Looks like you may be doing him a favor, helping him put the other foot in the grave. I can't imagine having dreams like this for months on end. You could even think of it as a good deed, right?\"\n\n\"You ass,\" she told him. She knew what he was doing, and hated that it was working.\n\n\"You could also just walk away. In fact, choosing not to do something bad is good in a way, right? You could leave this place and go for a quick flight, maybe snack on a camper who cheats on her husband or something. Take a few months of life from someone with decades yet to live. No harm, no foul.\"\n\n\"Stop it,\" she said, his words cutting into her. She put her hands on her ears to shut him out, but the gunfire still made it through. \"Please, stop saying things like that.\"\n\nHe was before her now, down on both of his knees. He pulled her hands away from her ears, his eyes now full of kindness.\n\n\"What I am is a reflection of who you are,\" he told her. \"I am your soul now, remember? Everything you do will help shape me. If you don't like the changes that you see, you need to either accept the person you've become and live with it, or be the change you want to see in the world.\"\n\nLily scowled at him and grabbed him by the neck.\n\n\"You think I'm manipulating you, like he did.\" Mike grabbed her wrist and pulled her hand off his throat. \"But I'm not. You know that feeding off of this man is wrong, but it isn't against the rules, and you hate being told what to do. For what it's worth, I believe you are better than this, but my word is only as good as what you do with it. So what will it be? Will you snack a little, or let him be?\"\n\nHer breath was coming in short bursts now as she contemplated her options. If what he said was true, doing something wrong would change that little piece of soul inside of her. Would Mike eventually become like her? Full of rage and spite? Was that what she wanted to encounter inside of the Dreamscape every time she visited?\"\n\n\"How are you even here?\" she asked. \"Aren't you stuck on that island?\"\n\n\"You are my island. I go where you do.\" He pointed out the window closest to him, and when she looked outside, the jungle had faded away, leaving behind the sandy shores of Mike's soul. \"You're in his head, but I'm in yours. There was a movie about this, kind of, but I never saw it, so don't remember the title.\"\n\nShe stood and grabbed the knife from Darren. He looked up at her in surprise, but she put her hand over his mouth. His clone started toward her, gun raised, but she waved him off.\n\n\"You said that she used to bring him peace? This Arachne woman of his?\"\n\nThe clone nodded.\n\n\"There's always a third option.\" She moved toward the front door and kicked it open, and her wings expanded out behind her. She could see them now, the nightmares awaiting Darren in the shadows. They shifted about beneath the leaves, waiting for her to step aside.\n\nIn the real world, Darren's brow had furrowed, and he was groaning.\n\n\"It's time to clean house,\" she declared, then launched herself into the jungle of his mind, the dagger held tightly in her hand. She tore through the dense foliage and hunted them down, angry shadows that exploded into mist as she stabbed, snapped, and tore them apart. She set fire to the jungle itself, burning it away from the cabin in a fiery ring.\n\nThe shadows were many. Nightmares were known not only for their veracity, but their numbers. And as they surged toward her, she could feel pressure building up inside the Dreamscape. They were powerful, perhaps even strong enough to boot her out of Darren's mind. These manifestations had been lying in wait for decades, kept at bay by Ana's presence and her venom, and they were hungry to claim Darren once and for all.\n\nOne by one, Lily summoned up the souls she had consumed over the centuries, commanding them to scour the jungle with her, to cleanse it of the shadows once and for all. The souls in her thrall obeyed without question, and the nightmares fled in terror as an army of her own tracked them down and ground them into dirt. As the jungle burned, the world flourished and blossomed anew, and after nearly an hour in the real world, Lily found herself back at the cabin once more, standing atop its scorched eaves. Below her, the souls of the Damned eagerly awaited orders, and she dismissed them, letting them rest in the depths of her mind once more.\n\nDarren's troubled sleep had calmed, and when she walked inside, he was now sitting at the table with a cup of coffee gripped in his hands.\n\n\"That was not what I expected at all,\" said Mike, holding a coffee of his own.\n\n\"That's because I'm unpredictable, Romeo.\" She held up the knife and then crushed it with her hands. When she opened them, technicolor dust fell to the floor and drifted away.\n\n\"I'm impressed.\" Darren's clone was sitting on the window ledge, a wry smile on his face. \"But they'll be back eventually. The nightmares always come back.\"\n\nShe looked at Darren, then back at Mike.\n\n\"Never tell anybody about this,\" she said.\n\n\"About what?\"\n\nWhile Darren's back was turned, she sifted through his memories and pulled up everything she could about his dearly departed Ana. Her body shimmered, and she sprouted six more legs. Her torso shrank a bit, and when she touched Darren's shoulder, he turned and regarded her with wide eyes.\n\n\"Ana?\" he asked with wondrous eyes. \"Is that really you?\"",
        "Lily said nothing. She couldn't lie to him directly, and she knew from his memories that she wouldn't give him a non-answer.\n\n\"It is.\" Mike told him, then took Darren by the hand and helped him stand. Already, Darren's features were sharpening as strength and youth returned to his dream body. \"It's just a visit, a reminder that what you had together mattered. To let you know to keep on fighting.\"\n\nLily took his hand. She would never love this man like Ana had, and the deception felt wrong. However, even if it was only for a night, the idea that she could help bring him some peace filled her with a sense of calm that she was unfamiliar with.\n\nTime stretched itself out in the Dreamscape, and minutes in the real world became days inside of Darren's head. In the shadows of his bedroom, a smile crept across his face, and he whispered his wife's name every few minutes like a prayer. Sitting over him with her eyes closed, a single tear fell from Lily's cheek and landed on his forehead with a splash.\n\n<center>\ud83d\udd77\ud83d\udd77\ud83d\udd77</center>\n\nI hope this chapter was fun for you to read, because I absolutely adore my spider girls!\n\nAs always, don't forget to rate and review, and definitely check out my bio for release dates. This one got posted a few days late, but I did make the change in advance, and all my apologies once again.\n\nNext chapter has our girls chasing a new lead on the Dragon Seed. But as the timeline catches back up, what of the Society?\n\nStay tuned, and thank you so much for being the best readers on the planet!\n\n-Annabelle Hawthorne"
    ],
    "authorname": "writerannabelle",
    "tags": [
        "arachne",
        "chilling with bigfoot",
        "hot springs",
        "nun play",
        "redemption",
        "succubus",
        "tail fucking",
        "zombie"
    ],
    "category": "NonHuman",
    "url": "https://www.literotica.com/s/dead-and-horny-ch-07"
}
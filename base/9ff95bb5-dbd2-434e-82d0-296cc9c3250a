{
    "title": "Keep Practising",
    "pages": [
        "Chapter One\n\n\"Oh, I thought you'd be a man.\"\n\nI sighed. It wasn't the first time, and it probably wouldn't be the last time I would hear those words. With my slight build, narrow face, long dark hair held in a ponytail as per Health and Safety regulations, and topped off with the Corby's Plumbing baseball cap, I looked, to say the least, androgynous. It wasn't unusual for me to be mistaken for a girl, so I flashed a smile at the woman and asked her where her stopcock was.\n\nWomen always expect the plumber to be a man. They have greeted me at the front door with way too many of their buttons undone, skirts so short I could see their knickers, and on one occasion a blonde dressed in a see-through blouse. Bored housewives exist, and the porn fuelled vision of a hunky plumber coming to fix their leak is apparently alive and well.\n\nOf course, as soon as the women saw me and decided they didn't want me fiddling with their personal plumbing, the buttons quickly done up and skirts changed for something less revealing. The one time it didn't happen was when an attractive, well-dressed lady opened the door. She seemed surprised and pleased to find a girl plumber. As I struggled with the innards of her boiler, she went upstairs and returned wearing a loose housecoat which fell open to reveal stockings and a lacy bra. But, and I swear this is true, she was going commando. She sat and watched me closely as I took the boiler apart and kept crossing her legs. She asked if I had a boyfriend, and when I said no, did I have a girlfriend.\n\nI was lying with my head in a kitchen cabinet trying to test the flow valve, and when I slid back out to reach for my spanner, she was standing right over me, legs apart, her pussy bald and glistening. Was I hungry and did I fancy something to eat, she coyly asked. Now, I would be a liar if I said it didn't tempt me, but I think she would have been a tad disappointed with my personal plumbing system. I told her I had just got married and my wife had given me something to eat this morning. Was I sure? Surely a little nibble wouldn't do any harm? I thanked her, politely declined her kind offer, and disappeared back into the cabinet.\n\nI finished, tidied up, and packed my tools away when she came back into the kitchen. She had changed back into a dress and was looking every bit the suburban housewife. As I left, she kissed me on the cheek and said my wife was extremely lucky to have a girl like me, but if I ever fancied eating out, to call her. I didn't say anything, these days I never do. When I started, I would tell them I was a guy, but it happened so often that in the end I stopped correcting them and let them think whatever they wanted to. We only see what we want to see, after all. Of course, I'm not married, but a little white lie hurt no one, did it?\n\nThe Corby in Corby's Plumbing is my dad. It's his business. It's not big; we have about 15 employees, but have an excellent reputation and the business is doing well. He hadn't wanted me to follow in his footsteps, but I had a bad time at school and left as soon as I could. He reluctantly let me join the company as an apprentice. I believe he thought I wasn't man enough to do the job, but it merely spurred me on to prove him wrong. My small size was actually a benefit sometimes. I could get into spaces the bigger guys found difficult. I did well, learning everything about the business I could, and finally showing my dad I could do the job properly and to the standards he set for me. Standards, incidentally, higher than the ones he expected from the other guys, and if I couldn't get something right, he would say, \"Keep practising.\"\n\nOne day, he took me outside the small yard and office from where we ran the business, put his arm around my shoulder and pointed to the sign above the gate. For as long as I could remember, the sign simply read Corby's Plumbing. Today it read Corby & Son, Plumbing & Heating Engineers.\n\nI turned and hugged him. I knew how big a thing this was for him, and I was pleased he was proud enough of me to do this. We went to the pub to celebrate and for the first time I can ever remember he got drunk.\n\n\"You know we haven't always seen eye to eye, but that's in the past and I am proud of you.\" Tears pricked the corners of my eyes. He grinned, \"Get away with you lad, and fetch me another pint.\"\n\nBy the time we got back to his house, he was plastered. It didn't take a lot, to be honest, which is why he normally stayed away from the booze. I got him indoors with Mum's help and sat him on the sofa. Mum was laughing her head off.\n\n\"Do you need any help to get him upstairs, Mum?\"\n\n\"He's not sleeping next to me in that state. He can sleep it off down here. Are you staying here tonight, or going back to your place?\"\n\n\"I'll go home tonight, Mum, but I'll be over Sunday for lunch.\"\n\nShe hugged me as I left. \"Jos\u00e9, never forget we are proud of you and we love you.\"\n\nI kissed her cheek. \"Love you, Mum. Dad too.\"\n\nYes, that's my name, Jos\u00e9. Jos\u00e9 Bernard Corby in full. Mum is from Barcelona, and she got to choose my first name. She told me once she had almost called me Jesus after her grandfather who fought against Franco in the Civil War, but Dad had put his foot down, and Jos\u00e9 it was. Dad chose Bernard after his father. My parents had met at a party when Mum was an au pair over here, and although they are opposites of each other in character and build, there was an instant attraction.\n\nI get my looks from my mother, who is small and dark, with flashing eyes and a fiery temper. Whenever she gets angry, she bursts into rapid Catalan. Dad and I know to stay out of her way when it happens. She had been a stunner when she was young. In their wedding photographs, she looked so beautiful wearing her mother's lace mantilla. She will always be beautiful in my eyes. I have her build and looks, but my character comes from Dad. He's quieter, more laid back, but stubborn as a mule. They run the business together; Dad does the plumbing side and Mum looks after the admin and the books. They complement each other and somehow make it work.\n\nI made my way back to the flat I had been renting ever since I moved away from home. Taking off my work shoes, I put them neatly by the door. I'm OCD about being neat and tidy, and I can't bear it if my place is anything less than spick and span. I shrugged off my overalls and put them in the laundry bin along with the t-shirt, underwear and socks I had been wearing. Taking off the scrunchie holding my hair back, I ran the bath and tipped some bath foam in before lowering myself in for a nice long soak. It's one of my guilty pleasures to lie back and soak away the stresses and strains of the day, letting the kinks ease out of my body caused by crawling around in tight spaces all day.\n\nEventually, I had to get out of the bath before I looked like a prune. I dried myself off, wrapped a towel around me, and headed for the bedroom. I thought about what to wear, as all I intended to do was order a pizza and watch Netflix. I kept it simple and picked out one of my favourite short cotton nightdresses and pulled on a pair of matching knickers. When the pizza boy arrived, I'd put on my dressing gown so as not to give him too much of a shock.\n\nOK, yes. It's another one of my guilty secrets. I cross-dress. Actually, that's wrong. It is a secret, but I don't feel at all guilty about it. I love it. I'm not entirely sure how or even when my fascination with women's clothing started. As a small child, I can remember watching my mother get ready to go out. She didn't seem to mind me coming into her bedroom and watching her put on her makeup in her underwear. I would sit quietly on her bed as she applied her foundation, powder, eye shadow, and her lipstick.\n\nIf there is one thing I can point to as the root cause of what happened later, it would be the lipstick. The whole theatre of it captivated me. I remember being enthralled as she picked up the small golden tube with her painted nails; the practised and elegant twist of the wrist to push the lipstick from its hiding place, in itself an erotic action. The care with which she puckered her lips and slid the lipstick across them, watching herself so carefully in the mirror, and then blotting her lips. To me back then it was all a magic trick beyond comparison. She would turn to me and smile. 'Do you like this colour, Jos\u00e9? Does it suit mummy?' If I was lucky, she would give me a kiss on my cheek and sometimes use a tissue to rub away a trace of lipstick left behind on my face.\n\nIt's why today I still get such a thrill from doing my lips. If I had to give everything else up, you would have to prise my lipstick from my cold dead hands. Even though I wasn't going out tonight, I had put some on, because I loved doing it.\n\nI had settled down on the sofa with Reese Witherspoon on Netflix when my phone trilled.\n\n\"Hi Josie girlfriend, it's Sofia.\" Sofia is my best friend. Honestly, my only friend. She has called me Josie ever since she discovered I cross-dressed. The name stuck, and I adopted it as my femme name. Cute, eh?\n\n\"Hola, Sofia. C\u00f3mo est\u00e1s?\" I was fluent in Spanish, courtesy of Mum. Sofia's dad, Carlos, is a Madrile\u00f1o, but she had never picked up the language. I do it to tease her.\n\n\"English, you bitch. Now, what time are we meeting tomorrow and where are we going?\"\n\n\"Sofia, I don't remember us meeting tomorrow.\"\n\n\"Are you doing anything, then?\"\n\n\"Well, no.\"\n\n\"Good, I'll pick you up at ten and we'll go to Oxford shopping, and then we'll get something to eat. You want to go as Josie?\"\n\nI don't go out as Josie in our local area. There was too much chance of getting caught. Oxford was far enough away to almost guarantee I wouldn't meet anybody I knew. Sofia always told me not to worry, as when I'm dressed as Josie nobody would suspect I wasn't 100% a girl. But I didn't want to take the chance.\n\n\"OK, I'll see you at one. Buenas noches, Sofia.\"\n\n\"Whatever, cow.\" She giggled, \"See you tomorrow.\"\n\nSofia and I had met at school. We bonded at first because of our Spanish connection and she helped me through some rough times, and thereafter we stayed close. She's an amazing person. She has seen me at rock bottom and stayed loyal and supportive. You couldn't ask more from a friend.\n\nThe pizza boy was rather cute, but I put those thoughts to one side. I woke early and went for a quick run. There's a park close to the flat and I love running there in the morning. It's so peaceful first thing in the morning with the sun burning off the mist. Sometimes there's someone walking a dog or another runner, but I'm often the only person there.\n\nI had plenty of time to get ready for Sofia, and I started with another bath. My legs were a bit stubbly, so I shaved my legs in the warm water, and also trimmed my pubic hair into a nice little triangle. Sofia was on at me to get it waxed, but that would be a step too far, at least for now. I had a sweet little sundress I hadn't yet had the chance to wear. As the day looked like it was going to be bright and sunny, I decided it would get its first airing.\n\nChapter Two\n\nSofia had discovered my cross-dressing whilst we were still at school. We were in my bedroom, supposedly revising for exams, but mainly gossiping. I needed to go to the toilet and made the mistake of leaving my computer on. Being a nosy cow, she trawled through my browser history and found the sites I had been visiting. It wasn't anything bad, just a few sites about cross-dressing and transvestism. She had then rifled through my drawers and found the small stash of female clothing I had accumulated.\n\nSo, when I came back she was sitting on my bed, a pair of my knickers she had found dangling from her fingers. She had also spread out the rest of my stuff on the bed. I nearly died on the spot before recovering enough to try to grab the clothes and scream at her.\n\n\"Give them back. You shouldn't have fucking done that. I thought we were friends. Friends don't do things like this.\"\n\nShe hung onto some of them and hid them behind her back. I was scarlet with shame and terrified she would tell everyone what she had found. Laughing, she easily beat off my attempts to retrieve the rest of my clothes.\n\n\"Calm down, Jos\u00e9. I assume these are yours, as you don't have a sister.\"\n\n\"Fuck off, Sofia.\"\n\nI tried in vain once again to grab the clothes from behind her.\n\n\"You're so lucky I am your friend. Anyway, what kind of friend are you, keeping a juicy secret like this from me?\"\n\nMy heart was beating fit to burst out of my chest. I was scared and angry at the same time. I stopped trying to get the clothes back and pleaded with her.\n\n\"Please, Sofia, don't tell anyone. I'll do whatever you want.\"\n\n\"How long has this been going on?\"\n\nI sat on the bed, tears pricking my eyes.\n\n\"Jos\u00e9, don't cry. I won't tell anyone. I am your friend. I don't care what you do, honestly.\"\n\nShe hugged me and let me cry my heart out on her shoulder. When I had dried my eyes, I told her about how alone and different I felt. How ashamed I was, but dressing in girls' clothes made me feel calmer and nicer than when I dressed as a boy. How it felt right but wrong, and how I was so confused about it all. How boys didn't attract me, but surely it must mean I was gay, and how much that frightened me.\n\nShe held my hands and talked to me for a long time about if it felt right to me. Then it was right. If I was gay, then it was cool, and if I wasn't gay, it was cool too. That I should always be happy in myself, because we are all different and how the world would be a terrible place if we were all the same. She told me she would always be my friend and she would keep my secret whatever happened.\n\nFrom that moment on, we were inseparable. I never discovered why she decided to be such a close and loyal friend, but I regularly thanked God for sending her to me. She was not only my friend but also my mentor, my shoulder to cry on, and sometimes my protector if the other boys bullied me. I swear she scared the daylights of the boys at school because if she found any of them giving me a hard time, she would descend on them like a Valkyrie. They would leave me well alone, but it meant I didn't have any friends other than her. It didn't matter to me. She was my BFF, and that was the way we both loved it.\n\nShe also taught me so much about being a girl. Not only dressing and makeup, but how to move and walk and behave like a girl. Either in my room of hers, she would let me dress up and we would be girlfriends for at least a few hours. She was endlessly patient with me, and if I would get something wrong, she would tell me \"Keep practising.\" After we left school, she studied to be a nurse, and I started work for my dad. We kept in touch like sisters, and to be honest, I don't think real sisters could have been any closer.\n\nGetting ready to go out as Josie involved a long makeup session in front of the mirror, followed by a frantic search amongst my small collection of clothes for something to wear. Having my own place at last meant I could at least build a wardrobe of Josie clothes I did not have to hide from my parents. In the end, I chose the summer dress I had thought about the previous evening and finished getting ready just as Sofia texted me she was outside in her car.\n\nA quick check in the mirror and I stepped out into the real world as Josie. Sofia whistled as she saw me.\n\n\"Wow, girlfriend, you get more beautiful every time I see you. You rock that frock.\"\n\nAs usual, I blushed scarlet, making Sofia screech with laughter. She loved to make me go pink. She drove to the station and we caught the train to Oxford. I was confident I could pass after all the years of practice, but going out as Josie in public still brought its frisson of excitement and fear of discovery. A couple of boys on the train were checking us out and we acted cool, ignoring them until we got to Oxford, where Sofia winked at them and I flashed a big smile. We left the station arm in arm and saw them again outside, where they tried to catch us up shouting they wanted to buy us a drink.\n\nWe waved and blew them a kiss before crossing the road. We giggled about them, and Sofia put her arm through mine as we waited at the crossing. The bleep bleep of the crossing light started and the green man lit up. We stepped onto the road, still laughing. Someone shouted, and as I looked round I was shoved sideways, followed by a blow to my side, which knocked me to the ground. I heard someone scream, before an explosion of light in my head. Then only darkness.\n\nChapter Three\n\nThe first thing I thought as I woke was why was the light on? It was so bright I couldn't open my eyes. I must have forgotten to switch it off when I went to bed. The strange thing was I couldn't remember going to bed. Had I been drunk? The second thing I noticed was I ached all over. Everywhere hurt when I tried to move. I gagged. There was something in my mouth. I tried to move my hand to pull whatever it was out, but I couldn't move my hands. I was scared. What had happened to me?\n\n\"Nurse, nurse, he's waking up.\" I thought it sounded like my mother's voice, but it couldn't be. I hadn't gone back to my parents' house, I was sure of that, at least. Besides, why would she be asking for a nurse? Somebody took my hand, and I struggled to open my eyes to see who it was. I finally prised open one eye to see Mum's frightened face looking down at me.\n\n\"Jos\u00e9, thanks be to God, you're awake.\"\n\nI tried to say something but this thing in my mouth wouldn't let me. Where was I? Why was Mum here? What had happened? Mum let go of my hand and stepped back as someone else leant over me and shone a bright light in my eye.\n\n\"Pupil response is good. Nurse, you can take the breathing tube out now.\" I thought I would throw up as the thing in my mouth was removed. I coughed and tried to speak, but my throat felt like it had been sandpapered and I could only croak.\n\n\"Your throat will be sore for a few hours, but it will feel better soon. Here, have a drink.\" A hand lifted my head forwards until cold water trickled down my throat. I lay my head back down again, and I was so tired I closed my eyes. As I drifted back into darkness, a voice mumbled something I couldn't catch, then Mum said, \"I don't know how I can tell him.\"\n\nI don't know how long I slept, but when I did wake Mum was still there, asleep in a chair by the bed. My head felt fuzzy, and I tried to clear my thoughts. I still ached, and my mouth was parched. Where was l? What had happened to me? Why is Mum here?\n\n\"Mum,\" I tried to say, but nothing came out of my mouth. She didn't move, so I tried again. \"Mum.\" This time she stirred, and her eyes flicked open.\n\n\"Jos\u00e9, I'm coming.\" She got out of the chair, rubbing the sleep from her eyes. She took my hand and smiled down at me. \"It's alright, you're going to be alright.\"\n\n\"Where am I?\"\n\n\"You're in hospital, you were in an accident. Don't you remember?\"\n\nI tried hard to remember something, anything. But there was nothing. I shook my head.\n\n\"Don't worry, Jos\u00e9, the doctor said you hit your head hard. You have a concussion.\"\n\n\"What happened?\"\n\nMum hesitated. \"You were hit by a car. You were knocked onto the pavement and hit your head. Your arm and pelvis are broken. Does it hurt? I can get the nurse to give you something.\"\n\nA memory flickered into my mind. I had been with Sofia. \"How is Sofia? Where is she?\" The look on Mum's face made my heart stop. \"Is she hurt?\"\n\nShe reached out to hold my hands, and I could see tears in her eyes. \"Jos\u00e9, I'm so sorry, she's gone.\"\n\n\"Gone?\" I was confused. \"Has she gone home already?\"\n\nMum gripped my hands tighter. \"No, Jos\u00e9.\" Tears were now flowing down her face. \"It was a bad accident, and Sofia was terribly injured. They rushed both of you to the hospital. I'm so sorry, she didn't make it, she died in the operating theatre.\"",
        "For a few seconds the words didn't register. Then, a pain like a hammer blow hit my chest so hard I couldn't catch my breath. I started gasping, and I heard Mum calling, \"Nurse, nurse.\" The blackness returned, but this time I wanted never to wake up.\n\nI woke up again in the middle of the night. I opened my eyes, and the lights were dim, but I could see Dad asleep in the chair by the bed. I guessed he was giving Mum a break. He looked older somehow, slumped in the chair; sleep and worry robbing him of the energy he had during the day. I lay there with my eyes open, but not seeing anything, sobbing silently to myself as I thought about Sofia. She couldn't be dead. It had to be a mistake. This was a nightmare, and I would wake up properly and she would be there telling me to get my arse in gear. I screwed my eyes closed, trying to remember what had happened.\n\nSomething touched my hand, and I opened my eyes to see Dad standing by the bed holding my hand. He wiped his eyes with the back of his other hand, and I knew from his gesture that it was all true. I would never see my best friend again.\n\nChapter Four\n\nI had been too unwell to go to Sofia's funeral. On top of the broken arm and pelvis, I had caught a superbug in the hospital and had to be put into a controlled coma for a couple of weeks. Mum told me it was touch and go before I pulled through.\n\nAs soon as I could, I got Mum to take me to Sofia's grave, where I laid some flowers. I couldn't stop crying, and Mum had to hold me tight until the sobbing stopped.\n\nThe strange thing was I couldn't remember anything about that day. The Doctor said I had blocked the memory because of the trauma I had experienced - dissociation, he had called it. But because I couldn't remember what had happened, I blamed myself for Sofia's death. Mum and Dad gradually told me the story, and that neither Sofia nor I were to blame.\n\nThe police had pieced together what had happened from cameras and eye-witnesses. A couple of teenagers had stolen a car and were being chased by a police car when they lost control and hit us on the crossing. Sofia had pushed me out of the way and it had struck me a glancing blow, but she had been hit full on and died at the hospital.\n\nAs my physical injuries healed, despite everyone trying to convince me it wasn't my fault, I could not stop feelings of guilt overwhelming me. I saw a therapist for a few weeks and it helped a little, but I still felt guilty that I had survived and Sofia had died. My best friend was gone and at times I couldn't see how I could go on without her. Mum and Dad were brilliant and they watched me like a hawk.\n\nI wanted to see Sofia's parents, but I didn't want to go if I would upset them. Mum made a few discrete inquiries and a few weeks after the funeral I paid my respects.\n\nI needn't have worried. Despite their grief, they were pleased to see me, and, like everyone else, they told me it was not my fault. For their sake, I didn't cry, but it was hard when I saw how heartbroken they were. What had made it worse for us all was that the two boys who had driven the car had only been given a suspended sentence and a driving ban\n\nAnd all the time, there was the elephant in the room.\n\nThey had taken me to the hospital straight from the accident and my parents arrived soon after I went into surgery. If they hadn't learnt any other way, the hospital gave them the clothes I had been wearing, so the cat was out of the bag.\n\nThe strange thing was nobody said anything, but there it was, lurking in the background. I could see Mum and Dad wanted to ask questions, but they held back, waiting for me to recover.\n\nI decided it was up to me to broach the subject.\n\nI was convalescing at my flat, and Mum would come over to make sure I was coping and to bring me meals which I could heat up. One afternoon I told her we needed to talk about what had happened. The first thing she said was that whatever I was about to say, she and Dad loved me and would always love me. We hugged and cried together, and I told her about how I had become attracted to wearing women's clothes from a young age. How it had built into a hobby and then into a passion. How Sofia had been my mentor and teacher and how heartbroken I was when she died. How I liked to feel feminine and that it made me feel softer and gentler. How it made me a better person, and that dressing was a part of me I couldn't give up. I told her I loved dressing but I wasn't gay, and I didn't want transition.\n\nI don't think she fully understood, and to be honest, I wasn't sure I fully understood either. She was upset I hadn't been able to tell her, but she understood how difficult it would have been. I told her I was nervous about telling Dad and she said I shouldn't worry because he loved me and he would always want to support me. We cried some more before she left promising it would all be OK.\n\nThe next time Mum came over, she brought Dad and the first thing he did was to give me a huge hug. Mum had told him everything and to my relief I didn't have to answer the same questions Mum had asked. To this day I'm not sure how much they accepted what I had been doing, but I think because I had survived and was still with them, they were prepared to put up with almost anything.\n\nMum suggested the idea of me finishing my convalescence at the family apartment in Mallorca. I loved the times we had spent as a family there, so I needed no extra persuasion to go there. Dad said if he could get the time off from the business they would join me there.\n\nIt gave me a crazy idea. I had thought of it before but never had the chance to go through with it. Could I live full time as a woman? Nobody knew me there. It would be a challenge for sure, but I would never have a better opportunity to find out how important my dressing was to me. So, the only boy clothes I packed were the ones I needed to travel in. Everything else would be for Josie. I already had a wardrobe of clothing and I ordered more online as I would need extra for my stay.\n\nI left London on a chilly May morning and arrived in a balmy Mallorca a couple of hours later with a suitcase full of women's clothes ready to start a new adventure.\n\nChapter Five\n\nThe first few days in Mallorca had been stressful. I unpacked and tried on some of my new clothes, but only in the room and on the balcony, not daring to go outside. I finally plucked up the courage to go down to the pool, finding a secluded spot where I could lay on one of the sunbeds, all the while ready to bolt if somebody came too close. Eventually I realised nobody was interested in me and I ventured further, but was still as skittish as a kitten.\n\nI barely spoke to anyone for the first week, ordering takeaways to eat inside the room and watching the collection of videos my parents had left. It dawned on me I would have to go large or go home. I could not go on like this. If my experiment was to work, I would have to be a lot braver.\n\nI was sick of takeaways, so my first proper trip was to a local tapas bar. I had been there before with my family and remembered it as a cosy place, popular with locals. Of course, when I got there it was crowded and noisy and there wasn't a local in sight. I checked TripAdvisor and there was a place recommended a few streets back from the Marina.\n\nOutside were a few tables occupied by what looked like locals, and it wasn't too crowded. Inside, I found a seat at the bar and ordered a beer. A few years ago, a lone female in a bar in Spain would have caused a riot, but things have changed for the better. Nobody bothered me and probably because I spoke fluent Spanish, albeit with a Catalan twist courtesy of my mother, my tapas arrived quickly. Another beer helped me to relax, and I felt more confident.\n\nA girl took the seat next to me and in poor Spanish with a heavy English accent tried to order a white wine. The barman shrugged. She tried again with the same result. I couldn't help myself and lent over and told him what she wanted. He smiled at me, but I got the impression he knew what she wanted but was being a dick by pretending not to understand.\n\n\"Err, gracias.\"\n\n\"You're welcome.\"\n\n\"Oh, you speak English.\"\n\nI smiled. \"Yes, I'm half British, half Spanish.\"\n\n\"Thanks for doing that for me. I tried to learn Spanish on Duolingo but it's not as easy as they say.\"\n\n\"You did OK. Keep practising.\"\n\nHer wine arrived, and we touched glasses.\n\n\"I'm Justine. Thanks again.\"\n\n\"I'm Josie. Are you here on holiday?\"\n\nShe blushed. \"Honeymoon, actually.\"\n\n\"Congratulations.\" We touched glasses again.\n\n\"Thanks, I'm meeting my husband here. Oh, saying husband still sounds odd.\"\n\n\"Keep practising.\"\n\nJustine laughed out loud.\n\n\"Oh, here he is. Jack, meet Josie. Josie, meet Jack. Josie helped me out when my Duolingo crapped out.\"\n\n\"You were fine. The barman was being a dick.\"\n\nJack nodded to me. \"Josie, thanks. Can I buy you a drink?\"\n\n\"Thanks, but I guess you guys want to be on your own.\"\n\n\"Go on, I insist,\" said Justine \"Jack, beer for Josie and white wine for me. Josie, where are the loos?\"\n\nI asked the barman, who gestured to the back of the bar. She headed off, but was back within seconds. Justine grabbed my hand and said, \"Come with me, please.\"\n\nShe practically dragged me with her. Josie used to do this to me and spent most of the time bitching about the doctors at her hospital, who seemed to regard the nurses as a perk of the job. The loo was small and there was a single cubicle, but the door was missing so anyone could see in.\n\n\"Will you stand guard for me, Josie? I can't bear the idea of someone walking in on me.\"\n\nWithout waiting for my answer, she hitched up her skirt, pulled down her knickers, and sat down on the toilet. I stood there dumbstruck as she peed away right in front of me. She pulled off some toilet paper and wiped herself before pulling up her knickers and straightening her skirt.\n\n\"You got a boyfriend, Josie? Someone here?\"\n\nI shook my head, quite unable to speak.\n\n\"You should have them banging down your door. Great looking girl like you.\" She washed her hands and as she dried them, she looked sideways at me. \"You've got something different about you. I'm not sure what, but if I was a lezzie, I would fancy you. Thanks for keeping guard. Do you want me to do the same for you?\"\n\n\"Um, no, no. Thanks, Justine, I'm good.\"\n\n\"Can you keep a secret?\"\n\n\"Sure.\"\n\n\"It's like, well, Jack. To tell the truth, he's not that good in bed.\"\n\nI grinned. \"Keep practising.\"\n\nWe emerged from the toilet laughing.\n\n\"What's the joke?\" asked Jack, looking a bit cross, maybe suspecting he might be the joke.\n\nJustine smiled broadly and kissed him. \"Nothing, darling. Just a girly thing.\"\n\nThey were a great couple and good company, but after a couple more beers, I decided to leave them to themselves.\n\nJack shook my hand, and Justine kissed my cheek and said, \"Josie, you're a star.\"\n\nAs I turned to go, I said to Justine. \"Keep practising.\"\n\nShe nearly fell off her chair laughing. I almost skipped back to the apartment, happy I had passed my first audition.\n\nChapter Six\n\nMy confidence soared after the evening spent with Justine and Jack. My physical injuries had healed well and the few days I had spent around the pool had acclimatised me, so I decided to go further afield. First, I had to do an early morning trip to the supermercado to stock up on food in the small car my parents kept here.\n\nI wasn't exactly looking over my shoulder, but I was always on the lookout for a glance from someone who has noticed something about me. I wore some loose cotton trousers and a pretty top, and with my hair pulled back and pushed through the back of a baseball cap, it made me anonymous, and it suited me fine. I'm a halfway decent cook thanks to my mum, and I can find my way around the standard Spanish dishes. I had planned to do a trip to some markets but for now the supermercado would have to do.\n\nHaving passed the first hurdle of the day, I was off and running. The next few days I spent around the island exploring. Despite its reputation, and if you keep away from the more hedonistic places, it's a lovely Mediterranean island on which to spend time.\n\nI had saved a trip to Palma for later. It's a great little city, easy to get around and there are parts of it where you can escape the crowds of tourists. I wanted to do some clothes shopping and my credit cards took a beating. Before heading home, I stopped for a coffee and something to eat at a cafe off La Rambla. I found a table, put down my bags and asked for a glass of water, a coffee and an ensaimada mallorquina pastry.\n\nThe waiter brought them to the table, but I had the uneasy feeling he was paying me a little more attention than was necessary. He brought the bill and waited while I paid. He said Gracias, paused a beat before adding Senorita in a way that made my blood run cold, and I knew he had read me. What should I do? Pick up my bags and run? Fuck him, I thought. If he wanted to make a scene, then I was at least ready for it. I calmly ate my pastry and drank the coffee. I could see him staring at me, and I held his look. I have been read by people before, especially when I was starting out, and sometimes they got angry or disgusted, and sometimes both. People can get nasty and I used to carry a rape alarm with me just in case. Some people can't accept others who don't fit into their straight-jacketed view of the world.\n\nI finished my coffee and was about to collect my bags when he came over to my table. Here it comes, I thought. I tensed, ready for what was about to happen. He bent down to pick up the cup and plate and whispered, \"Senorita, I think you are very beautiful. If you need to go somewhere you can meet others like you, give me a call.\" He scribbled something on the bill and walked away.\n\nI hope my mouth didn't stay open for long.\n\nI got back to the apartment and needed a drink to settle my nerves. I retrieved the bill from my purse and found he had written both his mobile number and his name - Carmen. I laughed out loud, both in relief and joy that I had been read only by someone like me. I put his number into my phone. You never know, I might give Carmen a call.\n\nAn hour later, a fresh problem reared its head when I got a WhatsApp message.\n\n\"Jos\u00e9. I am coming out to visit for a few days. I arrive on Friday. Can you pick me up at the airport? Besos Mama.\"\n\nWhen I planned my little experiment, I had not thought it through enough to expect this. I knew Dad had said they would try to come out to visit, but I guess he couldn't take time off from the business. I couldn't tell Mum not to come, so I only had two options; revert to Jos\u00e9 for the time she would be here, or to remain as Josie. I wanted to stay as I was, but did I have the courage to be Josie with my mother? She knew about my dressing, but would she ever want to see me that way?\n\nToday was Wednesday, so the following two days I spent panicking about what to do. I still hadn't decided by the time I set off for the airport, although I was wearing the boy clothes I had arrived in, and my hair pushed back through my cap. As I looked in the mirror, I saw a tomboy staring back at me. I had shaped my eyebrows, and my face looked softer, more feminine, even without makeup. I made up my mind right then to tell Mum when we got back to the apartment.\n\nI spotted her among the throngs of tourists, and she hugged me tight.\n\n\"Jos\u00e9, I am so happy to see you. You look good. Oh, take off your silly cap, I want to see you properly.\" She pulled off my cap and my hair fell loose. \"Mmm, you've let her hair grow, I see. It looks just like mine now.\"\n\n\"I'm so glad to see you too, Mum. Come on, let me take your bag.\"\n\nWe chatted all the way back to the apartment about what had been going on back home. Dad was up to his ears in work, as one of our local competitors had retired and we had picked up a lot of new customers. She said Sofia's mother had asked her to send her love as well. We arrived at the apartment and Mum hugged me once again.\n\n\"You look well, Jos\u00e9. How do you feel?\"\n\n\"Yeah, pretty good. A few aches and pains, but the sun and relaxation has helped a lot. I think I'll be ready to come back soon.\"\n\n\"Don't rush it, Jos\u00e9. Make sure you're properly well.\"\n\n\"Mum, I have something to tell you.\"\n\n\"Later, later, Jos\u00e9. Now, there is a mystery we need to clear up. Senora Rodriguez messaged me to ask who the young lady was staying in our apartment. She said it was odd because she looked a lot like me.\"\n\nMy blood turned to ice. Senora Rodriguez was the apartment block busybody and self-appointed neighbourhood watch. A notorious snoop and gossip. I had tried to avoid her, but had seen her around once or twice. I should have known she would have stuck her nose in.\n\n\"Err, I mean, it's like this...\"\n\nShe smiled, \"Jos\u00e9, don't worry, I know who the mystery lady is.\"\n\n\"I was going to tell you, I'm sorry.\"\n\n\"Jos\u00e9, it's OK. It wasn't difficult to work out after Senora snitch messaged me. I told her it was a niece of mine. Oh, by the way, what is the name of the mystery lady?\"\n\nI squirmed with embarrassment. \"Josie. Sofia came up with it.\"\n\nShe smiled. \"Bien, that's nice, but don't you think it's time I met Josie?\"\n\nOh God, was this really what she wanted? \"Mum, do you mean it? Are you sure?\"\n\n\"Of course. I want to see this young lady who looks like me. Get on with it.\"\n\nHere goes nothing, I thought. I dashed to my room and promptly had a crisis of conscience. What if she hated me as Josie? What if she screamed? I took a couple of deep breaths and remembered she was my mother and she knew what I was up to. With a little luck she might not even cut me out of her will.\n\nI decided I shouldn't go too wild. I picked a pretty sundress I thought made me look good. Not showing too much skin, but not dull either. I pulled my hair back and did my makeup. Not showy, but enough to be noticed; some light eyeshadow and light pink lipstick. I combed out my hair and pulled on a pair of medium heels. I took a look in the mirror and I thought that's going to be enough. I began to tremble as I thought about what I was about to do.\n\n\"Jos\u00e9, how long will you be?\" She had asked that question all my life. I took a few deep breaths, tried to steady my nerves and shouted, \"I'm ready, Mum.\"\n\nI opened the door and walked a little unsteadily into the room. Mum was looking out of the window and turned as she heard me enter.\n\nHer eyes opened wide, and her hand went to her mouth. For an instant I thought this had been the worst mistake of my life. I looked down at the floor, unable to look at her.\n\n\"Oh, Madre mia,\" I heard her whisper. \"Josie, you look beautiful.\"\n\nI looked up to see her with her arms spread wide. \"Come here, my child.\"\n\nIn a daze, I walked over to her, and she hugged me tight. Her shoulders sagged, and I felt her crying.\n\n\"I'm sorry, Mum. I didn't mean to upset you.\"\n\n\"I'm not crying because I'm upset, I'm crying because you look so pretty.\"\n\nWe hugged and hugged until I had to break away to gather myself together.\n\nMum wiped her eyes, sniffed and said, \"Well, that old witch Rodrigues was right about one thing. You do look like me.\"\n\n\"That's a good thing, right?\"\n\nShe hugged me again. \"Oh, yes, it's a good thing.\" We both cried until Mum let me go and wiped her eyes. She held me by the shoulders and whispered, \"Josie, are you happy?\"\n\n\"Mum, I am very happy. Are you sure you don't mind seeing me like this?\"\n\nShe hugged me so hard I thought I would pop a rib.\n\n\"I am happy if you are, Jos\u00e9. Oh, I mean Josie. Sorry, I'm a bit confused. I'm also starving. Should we get something to eat?\"\n\n\"I can rustle up something here, Mum?\"\n\nShe shook her head and said firmly, \"No, I want to go out to eat with my niece.\"\n\nI blushed, \"Mum, are you sure?\"",
        "\"Of course, let's get going.\"\n\nThe next few days were wonderful. Mum and I talked and talked in a way I could never have done as Jos\u00e9. She snuck into my room, and after examining my wardrobe, declared we needed to go shopping. She treated me to some expensive dresses and tops and, most embarrassingly, insisted on buying new underwear for me.\n\nWe even bumped into Senora Rodrigues, and Mum introduced me as her niece. The old bat bought it hook, line and sinker, and even remarked how we could have been sisters. There was one thing bothering me, and on the last evening before Mum flew back I had to raise it with her.\n\n\"Mum, I am so happy you have accepted me like this, but how will Dad react?\"\n\n\"First, your father loves you, so never forget that. It was a shock to both of us to find out what you were doing, but it is your life and if this makes you happy then he will accept it. I can guarantee it. When you come back will you come back as Josie or Jos\u00e9?\"\n\nI had already thought about this and without hesitation said, \"At work I will be Jos\u00e9, but Josie will still be a big part of me, so I will keep on being both.\"\n\nI took her to the airport the next morning as Josie and as we parted at Departures, she hugged me and whispered, \"Live your life as you wish, not as others want you to.\"\n\nShe kissed me and I waved to her until I lost sight of her in the crowds.\n\nChapter Seven\n\n\"Hi, you wouldn't happen to speak English, would you?\"\n\nI had been dozing on the sunbed by the pool, and was startled to hear a voice. I opened my eyes and immediately shielded them with my hand as the sun almost blinded me. I grabbed my sunglasses, slid them on, and looked up to see a girl standing by the side of the sunbed looking down at me. The sun was behind her and I couldn't see her face properly, even with the sunglasses on.\n\n\"Yes, I do. Can I help you?\"\n\n\"Oh, thank God. I can't speak Spanish and the porter doesn't speak English. Would you be an angel and translate for me?\"\n\nI sat up on the side of the sunbed and as she moved out of the sun my heart almost stopped. Sofia was looking down at me.\n\n\"Are you OK?\" she said. \"You look as if you've seen a ghost.\"\n\nIt was only for a few seconds, but I swear Sofia had come back to life. I knew it couldn't be, and as I looked at her more closely, I could see she looked a lot like Sofia, but my subconscious had filled in the blanks. I stood up, my legs a little shaky.\n\n\"Sorry, sorry, you reminded me of someone I knew. What do you need me to do?\"\n\n\"Um, I've just arrived, and I need the keys to my cousin's apartment. He's not here, and the porter doesn't understand me. Can you come and explain to him for me, pretty please?\"\n\nI had to smile as she pulled a face like a kid asking for an ice cream.\n\n\"OK, but how did you know I speak Spanish?\"\n\nHer eyes widened. \"You are Spanish, aren't you? I mean you look Spanish.\"\n\nI laughed as I stuck my sunhat on my head. \"My mother's genes. I'm English, well sort of, born and bred in Surrey. Come on, let's get you sorted out.\" I pulled on my sun wrap over my shorts and bikini top, and pushed my feet into flip-flops.\n\nAs we walked towards the porter's office, I checked her out from behind my sunglasses. She resembled Sofia, but, if anything, she was even prettier. She had the same undercut pixie hairstyle as Sofia, and the same air of confidence about her. I choked up at the thought of Sofia and felt a tear leak from the corner of my eye.\n\n\"I'm Emma, by the way, and you are?\" She had been chattering away as we walked, but this was the first thing I had paid attention to.\n\n\"Oh, I'm Josie. Pleased to meet you, Emma.\"\n\n\"Likewise.\"\n\nWe arrived at the porter's desk, where Fernando was looking typically bored.\n\n\"Buenos dias, Se\u00f1orita Josie.\" He pronounced it in the Spanish way, making it sound like Hosie.\n\n\"Buenos dias, Fernando.\" I explained Emma had come to collect the keys to her cousin's apartment. I turned to her. \"What number is it, Emma?\"\n\n\"Oh, 337.\"\n\nFernando frowned. \"There is no key here, Se\u00f1orita Josie. I have had no instructions to give anyone a key.\"\n\n\"Emma, I think there's a problem. Fernando doesn't have any keys. Can you call your cousin?\"\n\n\"What? No, there must be. Can you ask him to check again?\"\n\nI did, and Fernando repeated there was no key.\n\n\"Can you call your cousin to sort it out?\"\n\n\"He's in Australia on business, it's the middle of the night there now. I can text him, but he might not see it until tomorrow. Shit, shit, shit.\"\n\nShe looked so crestfallen I took pity on her.\n\n\"Look, send him a text, and stash your things in my apartment until you get things sorted out.\"\n\nHer face lit up. \"Honestly? You sure? That would be wonderful.\"\n\nI smiled. \"I would be grateful for the company. Grab your things and we'll take the lift.\"\n\nI explained to Fernando who looked relieved to make it someone else's problem.\n\nEmma had a large rolling suitcase and a small bag, which we maneuvered into the lift, and I pressed the button for the seventh floor. We travelled up in the silence people adopt in lifts, even when there is no-one else there. I led the way to our apartment, which was on the corner of the block. I opened the door and let Emma go in first.\n\n\"Fuck me. Sorry, I mean wow, what a view.\"\n\nIt's the reaction people have when they enter our apartment for the first time, albeit usually without the swearing. It's actually two apartments knocked into one on the top corner of the block, giving a wraparound view of the nearby marina with its rows of gin palace cruisers. It's also high enough to see Palma to the left and over towards Palma Nova to the right. The Bay of Palma stretches out in front, where you can see the giant cruise ships leaving and arriving and where billionaires occasionally park their superyachts. I love the view and it always makes me smile to see others' reaction to it. Emma had dropped her bag on the floor and stood looking in amazement through the floor to ceiling glass windows.\n\n\"My God, is this yours?\"\n\nI came to stand beside her. \"It belongs to my parents. My mother is Spanish and they bought it with some money my abuelito left her.\"\n\n\"Abuel who?\"\n\nI laughed, \"Sorry, force of habit, Abuelito. Spanish for Grandfather.\"\n\n\"So, you are Spanish?\"\n\n\"Bit of a mongrel, to be honest. Mum's from Barcelona and Dad's from Basingstoke. Mum taught me Spanish and I have dual nationality. Put your bags over there and you can sit down. Do you want something to drink? Or eat? It's nearly lunchtime.\"\n\n\"Oh, well, if you have a beer, I could kill one.\"\n\nI fetched a couple of bottles of Estrella from the fridge and handed one to Emma. \"We can sit on the balcony if you want.\"\n\nI slid back the door and we stepped outside.\n\n\"Damn, it's even better out here.\" She looked awestruck at the view.\n\n\"Where have you come from, Emma? Today, I mean.\"\n\n\"Oh, from Gatwick.\"\n\nI giggled. \"Doh,\" she said, \"You mean, where did I start from?\" She laughed. \"I'm not normally that dumb. From Norwich, up at 4am, train to London, then down to Gatwick and EasyJet here. My cousin had assured me it was all set up for me to pick up the keys. Thank you so much. I mean, for helping me out. I don't know what I would have done otherwise.\"\n\nWe clinked bottles. \"De nada.\"\n\n\"De what?\"\n\n\"It's Spanish for you're welcome.\"\n\n\"I should have paid more attention to languages at school.\" She yawned.\n\n\"Emma, if you want to crash out, you can use one of the bedrooms. You must be tired.\"\n\n\"I am wiped out, to be honest. If you're sure you don't mind? I don't want to keep you from whatever you had planned.\"\n\n\"It's no problem. Come on, I'll show you the room. There's a shower there too, if you want to freshen up.\"\n\nShe put her hands together and looked skywards. \"Dear Lord, thank you for sending me an angel in my hour of need.\"\n\nI laughed out loud. \"No way.\"\n\nBefore I could move, she pulled me into a hug. \"Well, I won't be surprised if I find a pair of wings on your back.\"\n\nTo my surprise, it felt good to feel her arms around me. I showed her the room where she promptly fell onto the bed.\n\n\"I'll be out on the balcony. Let me know if you need something.\"\n\nShe sighed, \"Now I know you are an angel.\"\n\nI closed the door and headed out to the balcony, where I sat and stared out to sea. I had been well and truly spooked by her resemblance to Sofia. Was it that which had made me invite her up? Surely, I would have done the same for anyone in the same predicament. It had been a tough few months, and I was getting my mind sorted out when Emma appeared out of the blue to remind me of Sofia.\n\nChapter Eight\n\nA couple of hours after Emma had gone to sleep, I heard a phone vibrating inside. Hoping it was her cousin, I knocked on the bedroom door.\n\n\"Emma, your phone is ringing.\"\n\nThere was no response, so I tried again. Still nothing. I opened the door to find her on the bed, still fully clothed.\n\n\"Emma, it's your phone.\"\n\nShe mumbled something I couldn't catch. I shook her shoulder gently, and she rolled over and said, \"No, not with her, you bastard.\" I jumped back, but realised she was still fast asleep and dreaming. I shook her harder until she grunted and her eyes flicked open.\n\n\"Oh, sorry, I just had a little nap.\"\n\nI smiled to myself, as she had been dead to the world.\n\n\"It's your phone, Emma. It's been buzzing.\"\n\n\"OK.\" she yawned and stretched. \"I hope it's my cousin.\"\n\nI handed her the phone and closed the door to leave her to it. A few minutes later she emerged from the room and slumped down on the sofa, her face like thunder.\n\n\"Fuck, fuck, fuck,\"\n\n\"What's up?\"\n\n\"You can choose your friends, but not your family.\" She said it with such an edge in her voice.\n\n\"Uh?\"\n\nShe turned to look at me, her eyes blazing. \"The moron got the dates wrong. He says he thought it was next week I was coming. He has rented it to a family from Bradford this week. Why does this happen to me?\"\n\n\"Oh, that's awful. What will you do?\"\n\n\"Not much I can do. Find a hotel, I suppose, or get a flight back.\"\n\nBefore I could think about it, I blurted out, \"Why don't you stay here?\"\n\nShe stared at me. \"What? No, I couldn't do that.\"\n\n\"Why not?\" I gestured to the apartment. \"There's plenty of room here. All you would have to do is put up with me for a while.\"\n\n\"That's so nice, but no, I couldn't impose on you.\"\n\n\"Don't be daft, I don't mind. I could do with some company now.\"\n\n\"Josie, only if you're sure about this. I'm warning you, be careful what you wish for.\"\n\nI laughed. \"I am sure. You're welcome to stay here.\"\n\n\"Thank you so much, I'll pay you ----\"\n\n\"No, you won't, don't be stupid. We can go half and half on the food and stuff, that will be enough.\"\n\nShe shrieked and wrapped her arms around me. \"You really are my angel.\" I have to admit it felt good to have someone hug me again. She stepped back and kissed me on the cheek.\n\n\"You won't have to worry. I will keep out of your way. You won't know I'm here.\"\n\nIt was when she said that it hit me what I had done. I know I can pass as a girl because of my small stature and androgynous looks together with the practice I've had over the years, but to carry it off at such close quarters with a genuine girl would be a hell of a challenge. It was too late now. I had made the offer and would just have to be extra careful. What could she do anyway if she made me? I would simply ask her to leave.\n\n\"Josie, please let me take you out to dinner tonight. It's the least I can do after what you've done for me. Where should we go? Your pick. No limit.\"\n\nI thought for a bit, not knowing how far upscale to go. \"There's a place on the Marina which is great, but it's pricey.\"\n\n\"No problem, it's my treat. It's the least I can do for my guardian angel.\"\n\nI rang to book a table, and Emma disappeared into her room to get ready. I heard her calling from the room, but couldn't hear what she was saying. I opened the door to find her naked and bent over, her backside pointing towards me, searching in the wardrobe.\n\n\"Oh, I'm sorry.\" I was totally flustered, and my cheeks burned with embarrassment. She stood up and turned to face me, grinning.\n\n\"I just wanted to know if there was a towel I could use. I couldn't see one.\"\n\n\"Uh, they should be in the cupboard in the shower room.\"\n\n\"OK, I'll have another look.\" She didn't seem fazed at all to be naked and didn't even try to cover up. I looked away, but only after seeing her small, firm breasts and neatly trimmed bush.\n\nI scurried out of the room, hearing her yell from the shower, \"Found them.\"\n\nBack in my room, I sat on the bed and wondered if I had done the right thing. I had surprised myself by inviting Emma to stay. Had I spent so much time on my own I was desperate for some company? She seemed nice enough. But was I taking a risk letting someone get so close to me? Well, there wasn't anything I could do about it now, so I had to make the most of it.\n\nThe first issue I had to sort out was what to wear. My shopping sprees with Mum and on my own had given me a bigger choice of things to wear, and I chose one of the dresses Mum had bought for me. It was pink chiffon with a high neck, cut away at the sides and a razorback, finished with a ruffled mini length skirt. Mum had also treated me to a lovely necklace, which I thought went well with the dress. For some reason I spent a little more time on my make-up than usual. It was the first time I had been out with someone for a while and I wanted to look good. Standing in front of the mirror, I debated whether to leave my hair in its usual ponytail, but let it down and brushed it out. I had inherited my mother's dark hair and with my tan I thought it looked better down. I slipped on a pair of open-toed heels, spritzed some Marc Jacobs Daisy, and I was ready.\n\nI walked into the lounge to find Emma already there, reading something on her iPhone. She looked up, saw me and gave a whistle.\n\n\"Josie, you look fierce.\"\n\nI blushed, unaccustomed to compliments. She stood up and I am sure my mouth dropped open. She was wearing an outfit that made Emma look as if she came out of the latest edition of Vogue. She wore a tight black top with a deep vee without a bra, with a long white skirt slashed to mid-thigh on both sides to show her legs. Long dangling earrings, a simple silver bracelet on her wrist and white trainers on her feet completed the outfit. I had thought she was pretty, but tonight she was gorgeous.\n\n\"My God, Emma, you make me look like a bag lady.\"\n\n\"Don't be silly. You're rocking that frock.\" A flash of memory as I remembered Sofia saying the same thing. She grabbed my hand and dragged me out onto the balcony. \"Come on, let's get some selfies.\"\n\nThe sun was setting, and the soft evening light would have made Quasimodo look good. Emma pulled me close to her and took several selfies of us together and then insisted on taking some of me looking out to sea and then straight into the camera. She made me laugh by pulling faces and took even more.\n\n\"Enough, enough. Let's get going or they will give our table away.\"\n\nIt was only a short walk to the Marina, but we were getting some admiring looks from the people we passed. At the restaurant, the head waiter took one look at us and snapped his fingers at a waiter to take us over to one of the best waterside tables.\n\n\"We are honoured,\" I told Emma. \"They usually reserve these tables for their VIPs.\"\n\nEmma beamed. \"Babe, that's exactly who we are tonight.\"\n\nIt's a great place in the evening to admire the boats, and to watch the beautiful people parading along the Marina. In the past I've spotted a member of the Spanish Royal Family, a few footballers from Real Mallorca, and one evening, sat at the next table to Rafa Nadel, himself a Mallorquin.\n\nThe restaurant was busy tonight, and the evening was warm, and the afternoon breeze had died away. We ordered a couple of beers and the waiter handed us both a menu.\n\nEmma glanced at it before putting it back down. \"What's good here? I'll eat pretty much anything, if it helps. Oh, and I'm starving, so don't hold back.\"\n\n\"In that case, we'll have some Sobrasada Croquettes, Calamares and Padron Peppers to start with. The burgers are good here, too. The apple pie is to die for if you've any room for dessert.\"\n\nShe nodded, \"Great, I'm sorted.\"\n\nI ordered, and we sat for a while people watching. Emma's eyes seemed to pay more attention to the girls than the boys, which got me wondering.\n\n\"So, Emma, what brought you here?\"\n\nShe looked away for a second, then back at me, as if deciding how much to tell me. \"A bad breakup, to be honest. I needed to get away and my cousin offered me the use of his apartment here. I didn't realise what an idiot he is.\"\n\n\"I'm sorry, I didn't mean to pry.\"\n\n\"No, don't worry. But, it was horrible. I caught them with a mutual friend in bed. Betrayal always hurts.\"\n\nI noticed she didn't say he.\n\n\"It's a great place to get away from things, for sure.\" She must have caught something in my voice, because she gave me a quizzical look.\n\n\"Who did I remind you of?\"\n\n\"What?\"\n\n\"When I asked you if you spoke Spanish, you said I reminded you of someone.\"\n\n\"Oh, yeah, an old friend of mine. You look a bit like her. You startled me, that's all.\"\n\nShe took a long pull at the beer and before she could follow up I asked, \"What do you do, Emma?\"\n\n\"I'm a journalist. Features stuff for magazines. Fashion, mostly, but I want to do some serious stuff as well.\" She grinned. \"And, of course, like all journalists, I'm writing a novel. What about you, Josie?\"\n\nI grimaced. \"Don't laugh, but I'm a plumber.\"\n\nShe was in mid swig, and I swear she snorted beer through her nose.\n\n\"Oh, I'm sorry, but I didn't expect that. A plumber, like in leaky taps and toilet flushes?\"\n\nI bridled at her words. \"I'm a qualified gas engineer too.\"\n\n\"OK, I am sorry. But, you're not what I imagined a plumber would be like.\"\n\nI sighed, then mimicked a customer complete with air quotes, \"I thought you'd be a man.\" I shrugged my shoulders. \"I get it a lot. I work for my mum and dad's company. Corby and Son.\"\n\n\"Good on you, girl. Striking a blow for equality. I like it. Who's the son, your brother?\"\n\nMy blood ran cold. What had I done?\n\n\"Oh, no. It was originally my Grandfather's company. The son is my dad.\"\n\nGood save, Josie, I thought.\n\nEmma smiled. \"Maybe one day, it will be Corby and Daughter.\"\n\nLuckily, the food arrived, and over more beers we spent the next hour eating and sharing stories. Emma roared with laughter at some of my tales, and she told scandalous secrets about some of the models she had met. She polished off her share of the food and some of mine. We finished with Spanish brandy and coffee before Emma paid with a Gold credit card, so I didn't feel too guilty about the price of the meal.\n\nAs we got up from the table, Emma slid her arm through mine, and somewhere in my mind a memory flashed to a time when it had happened before.\n\n\"Can we go for a walk?\" she asked, pulling me a little closer to her.\n\n\"Sure, we can walk along the Marina and then out along the jetty. Ogle at the boats.\"\n\n\"Mm, let's go, girlfriend.\" Another memory pinged as I remembered it was what Sofia had called me so many times.\n\n\"Emma, I had a great time tonight, thank you.\"\n\n\"Mm, me too, Josie. But, it's me who should thank you for all you've done for me.\"\n\nIt felt odd, but good to be walking and talking with someone again. It made me think I had cut myself off for too long. Maybe I had mourned enough for Sofia. Before long, Emma dragged me into one of the many bars, and we had another beer or two. The barman leant forward and whispered something to me. I looked around and Emma asked, \"What is it?\"\n\n\"Those two guys over there want to buy us a drink.\"\n\nShe frowned, \"Bloody cheek. How do you say Fuck Off in Spanish?\"",
        "I giggled. \"Vete a la mierda will do it.\"\n\nBefore I could stop her, she walked up to them, smiled and said it extremely loudly. I grabbed her and pulled her out of the bar before there was any trouble. We ran down the quayside before we both stopped and collapsed in fits of laughter.\n\n\"Do your evenings out always end up like this?\" I said, my sides hurting from laughing so much.\n\nShe grinned. \"Only when a couple of arseholes try a cheap trick.\n\nChapter Nine\n\nWe arrived back at the apartment and I felt giddy from the beers, so I opened the doors to the balcony to get some fresh air. Emma had disappeared into her room and came back a few minutes later with a bottle of brandy and two glasses.\n\n\"Let's have a nightcap. I bought this at the airport this morning. I never thought I'd be sharing it with someone this evening.\"\n\nWe sipped the brandy, watching the lights of Palma Nova in the distance.\n\n\"Where's Magaluf?\" Emma asked.\n\n\"Shagaluf, you mean? It's just the other side of Palma Nova\" It's an old joke, but Emma couldn't stop laughing. \"We can go if you want.\" I said, and somehow, almost unconsciously, I had become we.\n\n\"You want to get laid?\"\n\nI shook my head. \"No, but it's fun, if you can put up with foam parties, guys throwing up and fighting each other in the street.\"\n\nEmma moved closer, and I suddenly became aware of her physical presence. Her arm brushed mine and then her hip. It was probably nothing. I'm a little tipsy and she's just being friendly. Even so, I moved away a little. I wasn't used to someone being this close, and it spooked me a little.\n\nShe turned towards me. \"Josie, what brought you here on your own? I told you about why I came. What's your story?\"\n\nI knew I didn't have to tell her anything, but I felt like I needed to share something with her. Be careful, I thought, not too much.\n\nI sighed. \"I was in an accident. I got knocked down on a crossing. Couple of boys in a stolen car. Broken arm, ribs and pelvis. Then, as if that wasn't enough, I got a superbug. When I recovered, Mum packed me off here to recuperate. Been here for a couple of months now.\"\n\n\"Oh my God, you poor baby. It must have been a terrible experience. I'm so sorry, I shouldn't have asked.\"\n\n\"No, no, it's OK.\" I rubbed my eye as a tear formed, and then I began to cry and couldn't stop. I turned and ran into my bedroom, leaving Emma on the balcony.\n\n\"Josie, are you OK?\" Emma had waited a few minutes before knocking on my door. \"Josie, I'm so sorry. I shouldn't have pried. Tell me you're OK, please.\"\n\nI didn't want to talk to anyone, but it hadn't been her fault, and I didn't want her to think it was. I wiped my eyes and opened the door. Emma stood just outside the door, looking as if she was going to burst into tears as well. I walked to her and threw my arms around her. Right then, I needed someone to hold me tight. She put her arms around me and we hugged each other, my head on her shoulder.\n\n\"I'm sorry, Emma.\"\n\nShe pulled back a little and stroked my face. \"What for? I should be the one saying sorry.\"\n\nI shook my head. \"No, you did nothing wrong.\"\n\nShe led me to the sofa and we sat down, my head still on her shoulder and her arm around me.\n\n\"Do you want to talk about it?\" she whispered.\n\nI stared out of the window into the darkness.\n\n\"It wasn't only me in the accident. My best friend was with me and she died.\"\n\n\"God, Josie, that's terrible.\"\n\n\"That's not all.\" I felt the blood rushing through my ears. \"She saved my life by pushing me out of the way.\"\n\n\"Oh, Josie, you poor girl.\" Emma wrapped her arms around me again and held me tight, my head held against her chest, and I could feel her heart beating. She stroked my hair until I calmed down enough to sit up.\n\n\"I'm sorry, I should be able to deal with this by now.\"\n\nShe held my hand and said, \"Who says? We all deal with grief differently and there isn't any time limit on it.\"\n\n\"I know, it's what the therapist told me too.\"\n\nEmma's eyes widened. \"Oh, no. Was it your friend I reminded you of?\"\n\nI hesitated, then decided she should know. \"Yes. You are a lot like her. Same haircut, same air of confidence, same sense of humour. When I first saw you by the pool, I thought you were a ghost.\"\n\nShe put her head in her hands. \"Shit, and I said you looked as if you had seen a ghost. What an idiot I am.\"\n\n\"You didn't know. Nothing was your fault.\"\n\n\"Oh Josie, did you ask me to stay because I reminded you of her?\"\n\nWas it true? Did I invite her because she reminded me of Sofia?\n\n\"Honestly, I'm not sure. If I did, it wasn't deliberate.\"\n\nA few minutes went by, and Emma began to weep. \"Don't cry, please. It's not your fault.\"\n\nShe sniffled, then wiped her eyes. \"Do you want me to go, Josie? If I'm upsetting you, I should go.\"\n\nI shook my head. \"No. Please, no. I would like you to stay. It's been a long time, but I want to be around someone again.\"\n\n\"If you're sure?\"\n\n\"Yes, one hundred percent sure.\"\n\nI put my head back on her shoulder, and she put her arm around me. We stayed like that for a while, then she kissed the top of my head and said, \"Josie, babe. My arm is going to sleep.\"\n\nI moved and yawned, suddenly I felt exhausted.\n\n\"Emma, I'm going to bed. I'm so tired. Thank you for staying. I appreciate it.\"\n\nShe stood up and pulled me to my feet. She leant forward and kissed me gently on the forehead.\n\n\"You're welcome, my angel. You are a special girl.\"\n\nWe hugged, and as I closed the door I saw her looking out of the window, a faraway look on her face. I undressed and lay on the bed. All I could think of was the touch of her lips on my forehead.\n\nChapter Ten\n\nI woke to the sound of rain on the windows. A cold front had moved in overnight, breaking a long drought. I lay for a while, trying to make sense of what had happened yesterday. Emma's arrival in my life had been a wakeup call. I had been freewheeling for the past few weeks, letting life pass by, but in a few hours, she had pulled back the curtains and opened the windows to let fresh air into my life.\n\nI could hear her moving around in the living room. Time to face the music. I pulled on my pyjama top and shorts over a pair of control knickers. It should hold me in place well enough, I thought. Emerging from my room I found Emma laying the table for breakfast. She was wearing a short nightdress and matching knickers. My heart flipped at the sight and I thanked the Lord I had put on the control knickers.\n\n\"Morning, Josie. Did you get some sleep? What do you eat for breakfast? Sit down and I'll get it for you.\"\n\nI could smell coffee brewing, and there was a jug of orange juice on the table.\n\n\"You don't have to do this, Emma.\"\n\n\"I have to warn you, I'm not Gordon Ramsay so if you want anything more than scrambled eggs on toast, then you'll have to do it yourself.\"\n\nI laughed, \"No it's fine, thanks.\"\n\n\"Have you got Wi-Fi here, by the way?\"\n\n\"Sure, the password is on the fridge door.\"\n\n\"Thanks, if it's OK with you I have a few work things to finish up.\"\n\n\"No problem.\" I looked out at the grey skies outside. \"This should clear by lunchtime.\"\n\nWe ate breakfast in a stilted silence, broken only by the sound of the rain on the windows. This was ridiculous. One of us had to talk about what had happened.\n\n\"Rach--\"\n\n\"Jos--\"\n\nIt broke the tension, and we both laughed.\n\n\"Emma, thank you for last night. You were so nice to me.\"\n\n\"Josie, I'm sorry if I made you unhappy. Like I said, if you want me to leave, I will.\"\n\n\"No, you didn't, and if you want to stay, I'll be delighted to have you here.\"\n\n\"I would love that, too, Josie. Thank you so much.\"\n\nWe hugged and it was settled. Emma spent the rest of the morning working on her laptop, and I read in the shelter of the balcony until the sun returned.\n\n\"I'm going down to the pool. You want to come, Emma?\"\n\n\"God, yes, can you wait for me to get my cozzie on?\"\n\nShe disappeared into the room, and a few minutes later she called out, \"Josie, can you give me a hand, please?\"\n\nI walked into her room to find her with a towel over her chest and holding a bottle of sunscreen.\n\n\"Be an angel one more time and do my back for me\" She held out the bottle with one hand while holding the towel up with the other.\n\nI hesitated, unsure if I should do it.\n\n\"Pretty please, if not my back will look as if it's been on the barbecue.\"\n\nWhat harm could come from it? I took the bottle from her and said, \"OK, OK. Turn around.\"\n\nShe curtsied to me, which made her drop the towel.\n\n\"Oops,\" she said, as I got a good look at her breasts. It was obvious she wasn't wearing any underwear, either. She picked up the towel, covered her front once more, and turned around. I slapped a dollop of the cream in my hand and put it straight on her back. She wiggled and said, \"Oooh, that feels cold.\" I tentatively rubbed the cream onto her back and as she wiggled again, I could see her bum cheeks bouncing up and down.\n\nOver her shoulder she said, \"Rub it right in, my skin hasn't seen the sun in months.\"\n\nMy cock woke up, and I thought, no, please, not now. As I put more on, she moved around under my fingers and she made a little noise in her throat.\n\n\"Can you do it all the way down, please?\" She bent forward and stuck her bum out, which made my cock swell a bit more.\n\nI poured cream into my hands and with trembling fingers I rubbed further down her back.\n\n\"That's nice, but don't forget my bum. I've got a thong bikini.\"\n\nI thought she should be able to do her bum herself, but I was enjoying the feel of her warm skin. My mouth was dry, and I swallowed hard before dropping my hands onto her bum. She wiggled once more and pushed herself back onto my hands. \"Mmm, that feels nice, Josie.\" As she pushed back, she opened her legs a little, and my fingers slipped between her bum cheeks and brushed against her pussy.\n\nShe moaned once, then stood up to face me, letting the towel drop to the floor. I froze, and she paused for a moment before reaching down to take my hand to place it on her breast. Her skin felt soft and warm beneath my fingers, her nipple was hardening under my touch, and my mind turned to mush. From somewhere I heard a small voice telling me I had to stop this. With an effort, I shook my head and took my hand away.\n\n\"Emma, no, I'm not what you think.\"\n\nShe took my hand back and replaced it on her breast.\n\n\"I know, Josie, and I don't care.\"\n\nHer arms went around my neck, and she drew me towards her.\n\n\"Oh God, Emma, do you know what you're doing?\"\n\n\"Oh, yes, baby. I know.\" Then she kissed me, and I closed my eyes and kissed her back. We kissed for a few minutes, before she held me tight with one arm while with the other she took my hand and guided it down her tummy until I felt her bush under my fingers. She held me there for a moment before gently nudging me further down until I felt the slickness of her pussy. She made a noise in her throat, then pushed my fingers past her lips and inside.\n\nMy heart was pounding and my mind was in turmoil; surprise, lust and confusion sending a cocktail of emotions spinning through my body. I broke the kiss and pushed Emma away.\n\n\"Stop, please, Emma.\"\n\nShe froze before backing away, her hands over her mouth and eyes wide. \"Oh God, what have I done? I'm so sorry.\"\n\nShe ran to her room and slammed and locked the door. Shaking, I walked over to her door to hear sobbing. I knocked on the door, but all I could hear was Emma sobbing. \"Emma, please come out and let's talk.\"\n\nI knocked again, but there was no response.\n\n\"Emma, please, we just need to talk.\"\n\nThere wasn't much else I could do. The door was locked, so I would have to wait for her to emerge. There were so many thoughts chasing around in my mind. She obviously knew what I was, that was obvious. Was she gay, or bi? Was this a rebound thing? Should I just ask her to leave? Why had I reacted the way I did? Had I enjoyed any of it?\n\nGrabbing a beer, I sat down and asked myself some questions which were long overdue an answer. Why did I cross-dress? Sure, I enjoyed it and it made me feel good, but why was that? Was I using it to escape from something? I didn't feel bad as Jos\u00e9, but being Josie made me see and feel things differently. Did I have to be one or the other? Couldn't I be both?\n\nI was sure I wasn't gay. I didn't fancy boys, either as Josie or Jos\u00e9. I liked the idea of meeting others like me, but not for sex. Girls attracted me, whether as Josie or Jos\u00e9. I was definitely attracted to Emma, as my cock had told me in no uncertain manner.\n\nThinking back, there had never been any sexual edge between Sofia and me. Or had there? We had been friends, but surely it hadn't been more than that. Then why was I so attracted to Emma, who clearly triggered memories of Sofia for me? Thinking about Sofia made me long for her to be here, to tell me what to do.\n\nShe had always told me not to overthink things, that my heart would tell me what to do. She never judged me and had always backed me up. \"Be yourself,\" she had said on so many occasions. She also told me not to get hung up on bad things, \"Move on and don't carry the baggage with you.\" My eyes were brimming with tears as I looked to heaven and said, \"Gracias, Sofia. Te amo, mi coraz\u00f3n.\" It was time for me to move on.\n\nChapter Eleven\n\nThe noise of sobbing had stopped, so I tapped on the door. \"Emma, please come out and talk to me.\"\n\nI heard the key turn in the lock and she opened the door a little, but didn't come out. So, I pushed it open and looked in. Emma was sitting on the bed wearing her dressing gown, her eyes red from crying.\n\n\"I'll leave this evening. I can get a hotel room.\"\n\n\"Emma, I can't stop you if it's what you want, but you don't have to.\"\n\n\"How can you say that after what I did?\"\n\nI sat down next to her and took her hand.\n\n\"Look, it took me by surprise. I didn't see it coming, and I wasn't ready for it. Why don't we start again?\"\n\nShe looked at me, hope flickering in her face.\n\n\"You mean it? After what I did, I'm such a stupid bitch\"\n\n\"You're not stupid or a bitch, and the way you did it was bang out of order.\" I hesitated before going on, \"but, I'm not saying it was totally unwelcome.\"\n\nShe looked puzzled. \"What are you saying, Josie?\"\n\nMy face grew hot, and I knew I was blushing. \"I'm saying in other circumstances, I wouldn't have stopped you.\"\n\nHer mouth formed a perfect O.\n\n\"But, we have to talk, Emma. We both have things we need to share.\"\n\n\"Um, OK.\" She seemed to have recovered some composure. \"When?\"\n\n\"This afternoon. Let's get out of here and get something to eat and drink, because I'm starving.\"\n\nI left Emma to get some clothes on, and soon we were heading out to a small bar where I knew it would be quiet at this time of day. The waiter brought us beers to go with some tapas.\n\n\"The rules are simple, Emma. We can ask each other anything and we tell the truth. No more secrets.\"\n\nEmma nodded, \"OK. Who goes first?\"\n\n\"I will. When did you read me?\"\n\nShe took a breath. \"There wasn't one moment, it crept up on me. You're so good, but I wondered when you told me you worked for the family business called Corby and Son. I wasn't absolutely sure until you said 'I'm not what I seem'. It all clicked then, but I didn't care. It's my turn now. Who was the friend who died?\"\n\n\"Sofia, her name was Sofia.\" Strangely, for the first time, the mention of Sofia's name didn't fill me with sadness. \"She was my best friend, teacher, guardian angel, shoulder to cry on, life saver.\"\n\n\"Oh, babe.\" Emma reached over to put her hand over mine.\n\n\"It's OK. Saying that a few days ago would have left me in a puddle on the floor, but I think she would want me to move on. Who did you break up with?\"\n\nShe hesitated. \"Mandy was her name. We had moved in together and I was blissfully happy. I prefer girls, but I'm not single minded about it.\" She smiled and squeezed my hand. I slipped my fingers through hers and squeezed back. \"We had been together for a year, and I thought she was the 'one'. Mandy, however, had other ideas and I caught her and our cleaner in bed one day.\" Emma chortled, \"At least something was getting cleaned that day.\"\n\n\"Oh, I'm sorry, Emma. When you had the call from your cousin and I had to wake you, you were dreaming and said 'Not with her'\"\n\nShe grimaced. \"She was a nasty little bitch. Set out to get Mandy from the day she started cleaning for us. They are living together now.\"\n\nI paused, not knowing if I would like the answer to my next question.\n\n\"Why did you come on to me today?\"\n\nShe blushed. \"It didn't start out like that. Yes, I know it looks like a setup, but it wasn't, honestly. I did fancy you, for sure, but it was only when I felt your hands on me I had the crazy idea to jump you. I'm so sorry.\"\n\nI squeezed her hand. \"I was so surprised and I panicked. I've never had an experience like it.\"\n\nEmma looked puzzled. \"Josie, I know we agreed to the rules, but you don't have to answer this if you don't want to. What was your deal with Sofia?\"\n\nA few days ago, I would have curled up in a ball rather than answer that question.\n\n\"No. It's alright. Sofia and I were just friends. She was straight, but I think lonely like me, and we just clicked. She didn't have a prejudiced bone in her body. So, when she found out I was cross-dressing, she didn't care. She was more like a big sister than anything. So, no, we didn't have a sexual relationship.\"\n\nWe had finished our food, and I asked the waiter for the bill. \"Emma, I'm out of questions. Do you have any more?\"\n\n\"Just one, Josie. Are you gay, or bi, or trans, or what?\"\n\n\"Wow, you saved the biggie for last.\" I squeezed her hand to let her know I didn't mind. \"Let's see, I know I'm not gay or trans, despite what you see. As for what I am, I don't know how to answer your question properly. I've been called a lot of names in the past.\" I held up my fingers and counted off. \"Sissy, fairy, faggot, freak, pansy, and a lot more. But, I don't think it's what you mean.\" I looked her straight in the eye and said carefully, \"I haven't had any experience to tell me.\"\n\nEmma furrowed her brow in confusion, before what I had said dawned on her.\n\n\"Oh. You don't mean you're a virgin?\"\n\nHeat rose to colour my cheeks, and I nodded.\n\nShe rocked back in her chair, her hands over her face.\n\n\"Come on,\" I said, \"Let's go for a walk.\"\n\nI slipped my arm through hers and led us back through the Marina to the apartment where we sat on the balcony in silence. I looked across at Emma and thought, it's now or never.\n\n\"Emma.\"\n\n\"What?\"\n\n\"I wouldn't stop you if you tried again.\"\n\nShe smiled and took my hand before leading me into the bedroom.\n\nChapter Twelve\n\nThis time Emma was patient and gentle. I think she was as nervous as me, but for a different reason. We kissed for a long time before she slowly undressed me; stroking, caressing and kissing each part of my body as she removed my clothes, until all that remained were my knickers.\n\nPushing me flat on the bed, she whispered, \"Close your eyes, baby. You don't have to do anything, let me do it all.\"\n\nShe pushed my head back and licked my neck while her fingers found my nipples. She lingered over them as she discovered how sensitive they were; kissing, licking, and nipping them with her teeth. Every time she did, a tiny explosion went off inside me. The gentlest touch of her fingertips sent waves of pleasure racing through me, and her lips felt like the caress of a feather against my skin.\n\nWith my eyes closed, Emma's every touch, every sound, every breath, every movement drew a response. I whimpered and moaned, shivered, and trembled at what Emma was doing. But I loved it all.\n\nSitting up, she removed her t-shirt and I leant forward to kiss her breasts. She threw her head back, and I took a nipple into my mouth, sucked hard, and she hissed with pleasure. As I continued to kiss and lick each nipple in turn, Emma moaned, so I thought I wasn't doing too badly. Laying back on the bed, she held me in place with her hands while I suckled her. She moaned once more, then rolled over to be on top, and my cock was now pushing into her belly.",
        "Her tongue pushed its way through my lips as her fingertips danced their way down to my tummy, where the lightest of touches made me tremble. I jumped as her fingers bumped into my cock, which was straining against my knickers.\n\nShe reached down and released it and circled the head with her fingers, almost making jump off the bed at her touch. Emma giggled and licked her fingers before teasing me once more until I was writhing beneath her. She leant forward to blow across the head and I nearly exploded.\n\nI opened my eyes to see her hitch up her skirt and pull aside her knickers. Her eyes locked with mine as she took me in her hand and guided me inside her. I closed my eyes again as she moved up and down, slowly at first, then faster as my excitement built. I tried to hold back, but I couldn't wait any longer, and thrust upwards, and my climax ripped through me and exploded into her. It seemed every nerve ending in my body fired, sending seemingly never-ending tremors cascading through me.\n\nEmma had not finished yet, and she kept bouncing up and down on me, arching her back and rotating her hips until she shuddered and yelled, \"Fuck\" as her orgasm crashed through her. She rolled off me, and we lay side by side, trying to recover our breath.\n\nEmma grinned at me. \"Well, did it help?\"\n\n\"Help what? Help how?\"\n\n\"I mean, to find out what you are?\"\n\nI frowned. \"Um, maybe. Only a little, I guess.\" Emma's face dropped. I grinned back at her. \"But, I'm afraid I'm going to have to do a lot more research.\"\n\nLike the first few days after I arrived, I didn't leave the apartment for the next two days. But this time, it was not because of fear. Emma was a wonderful teacher and lover. She patiently taught me how to give pleasure and how to take it with every part of our bodies. I had never dreamt I could get so much enjoyment from giving as well as getting.\n\nThe best things always have to end, however, and far too quickly the day I had been dreading arrived. Emma was flying back home the following evening, so I took her back to the restaurant where we had eaten the first night we met. I knew I was falling for her, but I didn't know if she felt the same for me.\n\nIt was a perfect summer's evening. The sun was flicking off the water, and the marina was full of people enjoying the paseo - the evening stroll before dinner. Yet, my heart felt heavy and Emma was subdued, too. She fiddled with her food and wouldn't look me in the eye.\n\nFinally, she asked, \"Josie, do you know when you will be back home?\"\n\n\"Maybe a couple of weeks more here, then I have to get back to work.\"\n\n\"Ah, the plumbing.\"\n\n\"It's all I know how to do.\"\n\nEmma had an odd look on her face. \"Maybe, maybe not.\"\n\n\"Why do you want to know?\" I held my breath, hoping I would get the answer I wanted.\n\n\"Because I would like to see you again, that's why.\"\n\nMy heart soared. \"Are you asking for a plumber?\"\n\n\"Well, I'm sure I have some pipes which need unblocking.\"\n\nI grinned. \"In that case, I had better pack my rods. Yes, I would very much like to see you again.\"\n\nWe almost ran back to the apartment, and our clothes were on the bedroom floor within seconds. We made love urgently, knowing that it would be awhile before we could do it again. Emma eventually fell asleep, but I couldn't, and lay looking at her face as she slept. I knew I was in love with her, but I wasn't brave enough to risk telling her. After losing Sofia, I couldn't bear the thought of opening my heart to someone who might reject me. I imagined Sofia shaking her head at me and saying, \"Be yourself, Josie. Move on.\"\n\nChapter Thirteen\n\nI woke to find Emma spooning me. Nice, I thought. I could get used to this. I felt her stir and she kissed the back of my neck. I could definitely get used to this. We ate breakfast on the balcony, and I could tell Emma wanted to say something. I trembled at what I hoped she would say.\n\n\"Josie, have you ever thought about modelling?\"\n\n\"Err, what?\" That wasn't what I was expecting at all.\n\n\"Modelling. You know, fashion, clothes, catwalks.\"\n\nI looked to see if she was making fun of me, but she looked perfectly serious.\n\n\"Are you on drugs? What the hell are you talking about?\"\n\n\"I'm serious. Have you heard of Seth Atwell? Stav Strashko?\"\n\nI shook my head.\n\n\"David Chiang? Artyom Eduardovic?\"\n\n\"Nope, who are they?\"\n\n\"They are fashion's latest hot models. Boys who can model men's and women's clothes. Here, have a look.\" She opened her iPad and showed me pictures of several models. Some of them could be boys, but I was convinced some of them were girls.\n\n\"Emma, they're beautiful, but what have they got to do with me?\"\n\n\"Josie, when will you get it through your thick head that you are beautiful.\"\n\n\"You're off your chump. Emma.\"\n\nShe looked a little guilty. \"Promise you won't get mad at me?\"\n\n\"Why? What have you done?\"\n\n\"I sent some pics I took of you the other evening to an Agency I work with.\"\n\nI got mad. \"Emma, you had no right to do it. It's not right.\"\n\n\"OK, OK. I'm sorry, but do you want to know what they said?\"\n\nI folded my arms across my chest and glared at her.\n\n\"Maybe, maybe not.\" I was sulking, for sure, but despite myself, I wanted to know.\n\n\"Well, they came back and said they had enough girls on their books.\"\n\n\"That was a waste of time, then.\"\n\nShe looked even more guilty.\n\n\"Actually, I went back to them and said you weren't totally a girl.\"\n\nI exploded. \"Fuck, Emma. That's not fucking on. Where do you fucking get off doing fucking something like that?\"\n\n\"Look, I didn't name you or anything, that you were a friend of mine.\"\n\n\"Friend? Is that what friends do?\"\n\n\"Just listen to me, please, without shouting at me.\"\n\n\"I'll fucking shout at you if I fucking want to.\"\n\nShe went pale. \"OK, but please chill out, please. When I told them, they instantly said they wanted to see you.\"\n\n\"What?\"\n\n\"They said they wanted to do some test shots. If those come out well, then they want to see you. My friend got extremely excited about you.\"\n\n\"Why?\"\n\n\"Like I said, androgynous models are hot. Every model agency wants one on their books, and they have been looking for the right one. He thinks you might be it.\"\n\n\"Why me?\"\n\nEmma sighed. \"Because you are as beautiful as a boy as you are a girl.\" Emma risked a grin as she said, \"And, you have something about you that makes you stand out.\"\n\n\"Oh. But, I'm not a model. I don't know anything about modelling.\"\n\n\"Babe, the camera loves you. That's all that matters. You can learn the rest.\"\n\n\"Mmm, I don't know.\"\n\n\"Josie, there aren't any guarantees, but at least say you'll think about it. At least you've stopped swearing at me.\"\n\nI glared at her. \"That doesn't mean I'm still not mad at you for what you did.\"\n\n\"Will you think about it, then?\"\n\n\"I don't know, I might.\"\n\n\"Don't pout, Josie. It doesn't suit you. Admit it. You are curious, aren't you?\"\n\nI picked up a cushion and threw it at her. \"I hate you.\" I tried and failed to stop a smile spreading across my face.\n\nShe grabbed me and tickled me, something that always got me squirming in delight. We rolled onto the floor with me sitting on top of her, and I pinned her down by her arms. \"Yes, you bitch, I am curious. What happens next?\"\n\nShe tried to break free, but I held her down. \"Let me up and I'll tell you.\"\n\n\"Nope, not until you pay a forfeit.\"\n\nShe stopped struggling. \"What kind of forfeit?\"\n\n\"This kind.\" I leant forward and kissed her.\n\nShe grinned. \"Is that the best you've got? I deserve a bigger forfeit than that.\" She pushed me off her, and we rolled around the floor until magically all our clothes had vanished. Somehow, we ended up on the bed where we made love with me on the top.\n\n\"Mmm,\" said Emma, \"I could enjoy paying forfeits if they were all like that. Does it mean you've forgiven me?\"\n\n\"Jury's still out.\" I propped myself up on one elbow and stroked her hair. \"Are you sure I could do this?\"\n\n\"Yes, yes, a million times yes.\"\n\n\"Mmm. If, and I mean if, I say yes, what would happen next?\"\n\nShe sat up, and her breasts jiggled invitingly in front of me. I put out my hand to stroke them, but she batted it away. \"Do you want to know, or not?\"\n\n\"Sorry, Miss.\"\n\n\"That's better. When I get back home, the agency will set up a photo shoot for you, and if it goes well you'll get called back for a test.\"\n\n\"Test?\" I squeaked. \"What kind of test?\"\n\n\"To see how you walk and if you're OK to do runway work.\"\n\n\"You mean at an airport?\"\n\nEmma roared with laughter. \"No, you airhead, on the catwalk, at fashion shows.\"\n\n\"Oh, but I don't know how.\"\n\n\"Come on, I'll show you.\" She stood up and went to the end of the room and walked towards me. \"Scissor your legs, putting one across the other. Look straight ahead, don't look down and definitely no smiling. Shoulders back and straight, let your arms swing naturally.\" Emma stopped, stared straight ahead with her hand on her hip. \"Hold the pose for the camera boys to take their pictures, then turn and walk back.\"\n\nI started to giggle, tried to stop by putting my fist in my mouth, then burst out laughing.\n\n\"What's so funny?\"\n\nI couldn't stop grinning. \"It's your tits bouncing up and down. I can't take my eyes off them.\"\n\n\"OK, funny girl. You have a go.\"\n\n\"OK, but don't laugh. I've never done this before.\"\n\nI tried to copy what Emma had done, but I couldn't stop myself from smiling.\n\n\"Stop grinning like a chimp.\" Emma barked. \"Put your shoulders straight, and for God's sake, put some knickers on. Your cock is distracting.\"\n\nI practised a few more times and began to get the hang of it.\n\n\"Not bad, baby. Now try it in heels.\"\n\nEasy, I thought. I enjoyed wearing heels, and I thought I was good in them. Pride comes before a fall, they say, and this time it was literally true. The first time I tried the model walk I fell on my backside. I squealed, and all Emma could do was laugh.\n\n\"Hah, serves you right, funny girl. Do it again.\"\n\nI was more careful this time, and even Emma approved.\n\n\"You're getting it, Josie. Keep practising.\"\n\nI giggled, and Emma frowned. \"What's funny?\"\n\n\"Sorry, it reminded me of something. I'll tell you sometime. Which reminds me, we need to get you to the airport.\"\n\nIt was a silent drive to the airport. I thought if I said anything, I would end up crying. The airport was heaving with people, but all too soon we were at the security gates. We embraced, and I was on the point of tears when Emma whispered, \"I love you.\" Before I could say anything, she turned and walked past the security guard, where I couldn't follow. I watched her for as long as I could, but she didn't look back. I fumbled for my phone and sent her a message. 'I love you too.'\n\nWithin seconds I had a response. About a hundred smiley faces and hearts followed by 'Keep practising.'\n\nEpilogue\n\nBackstage, it feels like everyone is panicking. Models, dressers, make-up artists, and hangers-on are milling around, and the designer looks as if he is going to stroke out with stress. But there is order amongst the chaos. The music begins front of house, and almost by magic, there is a line of models ready for the runway. I am fourth in line and one model touches my arm and blows me a kiss. Another mouths 'Good luck, honey.'\n\nThe line moves, and before I know it, I am strutting onto the runway and into a maelstrom of music and lights and applause. Strangely, I am not nervous as I've practised this so many times with Emma. I know she's out there in the audience, and I want to make her proud. Muscle memory takes over and the walk, the face, and the pose and turn at the end of the catwalk are second nature, and then I'm on my way back for my first outfit change. From the corner of my eye I see a glimpse of a man and a woman sitting together in the front row. The man is smiling broadly and gives me a wink. The woman is dabbing her eyes and gives me a smile as I pass.\n\nParents, huh?\n\nEl Fin"
    ],
    "authorname": "nikkiesilk",
    "tags": [
        "crossdresser",
        "sweet and sentimental",
        "voluntary"
    ],
    "category": "Transgender & Crossdressers",
    "url": "https://www.literotica.com/s/keep-practising"
}
{
    "title": "The Big Tits Club Ch. 23-24",
    "pages": [
        "-- CHAPTER 23: Girlfriend --\n\n****\n\nWhat followed became the greatest weekend of my life. Maybe that's hyperbole, but it was a pretty damn good fucking weekend.\n\nOnce my dick shriveled up and I managed to pull it out of Naimh's stretched \"arsehole\", the two of us headed upstairs to take our first shower together. At first, we just enjoyed the simple pleasure of soaping each other's bodies, me ensuring her big tits were squeaky clean, and making out beneath the warm spray. But Naimh seemed on a mission to get me hard again even though I'd just spent a load all over (and then in) her asshole.\n\n\"C'mon. Sam told me you two did this last week,\" she told me, which meant that NOT having shower sex was not an option.\n\nNaimh wound up squatting in front of me giving me a blowjob until she got me hard enough, and she bent over against the tile wall, reached back to spread herself open, and I slid into her pussy from behind pretty easily.\n\nI held the buxom redhead's ample breasts in my hands as I fucked her almost standing upright, but neither of us wanted to finish in the shower, so we got out, dried off, and moved things into my bedroom.\n\nHaving cum on her ass twice already (once so Belle could lick it up and the second to use as impromptu lube to enter her ass), Naimh was in a swallowing mood. She rode me cowgirl to two more orgasms before pulling off, giving me a titfuck, and finally deep throating me as I blasted off straight into her stomach. We fell asleep naked in each other's arms, and I couldn't have been happier.\n\nWell, I did miss Belle. Call me greedy, but having both of them by my sides would've been nice.\n\nStill, Naimh woke me up with a morning blowjob, which led into a morning cowgirl, which ended up in a morning doggy-style and me giving her an internal combustion. She went to take another shower after that (without me), just to clean up and not smell like sex when she went home to her parents.\n\nThe two of us got dressed and headed downstairs. Mother was already making breakfast, and if she was surprised to see Naimh I certainly couldn't tell. For all I knew she could identify the girls by their orgasmic screams and already knew I had neither Sam nor Belle in my room last night.\n\nNaimh and Mother made polite small talk while I wolfed down my food. Hey, fucking as often as I did required a lot of calories. In the end, though, I walked Naimh to the front door, we had a passionate kiss, and we whispered our love to each other. She said she couldn't wait until Monday to gauge the girls for their willingness to let us openly date.\n\n\"In the meantime,\" I offered, \"If you can get away for a bit tomorrow, I'd love to see you again.\"\n\n\"Tomorrow, Sunday?\" Naimh grinned. \"I'll find a way. I can't stand the thought of being away from you any longer than that.\"\n\n\"The feeling's mutual.\" She beamed, kissed me, and then was gone.\n\nMother was still in the kitchen when I got back. She arched an eyebrow, gave me a serious look, and asked, \"Does Sam know Naimh spent the night?\"\n\n\"Always so worried about Sam's feelings? If I didn't know any better, I'd think YOU had stronger feelings for her than I do.\"\n\nMother rolled her eyes. \"We both know Sam has jealousy issues.\"\n\n\"Relax. Sam set this up, actually. It was her suggestion for Naimh to spend the night, and she provided the alibi for Naimh's parents.\"\n\nMother looked surprised. \"Really?\"\n\nI nodded. \"You can ask her yourself the next time you see her.\"\n\nThoughtful, Mother tapped her chin and nodded. \"I'll do that.\" And without another word, she scooped up her coffee mug and left the room.\n\nI called up Alice after that and she came over to play video games. Well, video games and a blowjob. And then video games and some cunnilingus. But it was mostly about the video games. Seriously.\n\nAlice and I then went out for a fast food dinner. She dropped me off back at home, and to my surprise, Belle was already inside the house waiting for me.\n\n\"How'd you get in here?\" I asked.\n\nShe shrugged. \"Your mom gave me a key last week after you told her my dad was okay with us being together. She said it would be more convenient this way. She didn't tell you?\"\n\n\"Uh, no she didn't. But yeah, it'll definitely be more convenient this way.\" Without further ado, I drew her into my arms and kissed her soundly. \"I missed you.\"\n\n\"Mmm... I missed you, too.\" She hummed happily into my embrace. \"Still, I want details. How many times did you fuck her? What positions? You had shower sex with her, didn't you? You realize WE still haven't had shower sex?\"\n\nI winced. \"The shower water really washes away your natural lubrication. Entry's gonna be... iffy.\"\n\nBelle shrugged. \"So we have sex to stretch me out BEFORE we get in the shower. Maybe even bring some lube. Oooh, buy some oil-based lube. That should hold up in the water. Maybe even in the hot tub!\" She did a little happy dance, clapping joyously.\n\nI laughed. \"Uh, sure, we can try that. Oh, and remind me some time to get a small bottle or tube of lube I can keep handy at all times.\"\n\nBelle's eyes sizzled. \"For those impromptu quickies when we're nowhere near your room?\"\n\n\"Uh, that too. But I brought it up because of something Neevie wanted me to do to her last night.\" I proceeded to explain how I'd been fucking the Irish redhead into the armchair until she got all crazy and demanded I fuck her in the ass, only we didn't have any lube. Belle was getting red hot listening to me talk about it and had my shorts down around my ankles. She started giving me a blowjob while I told her about fucking Neevie from behind trying to get myself off. And when I told her about jizzing straight into the redhead's asshole and using my own cum to lube my entry, Belle actually moaned in orgasm around my dick. I'm not even sure if she was rubbing herself or if she climaxed purely on the mental high.\n\n\"I think I want you in my ass, Matty...\" Belle groaned immediately after, still quaking in the aftershocks of orgasm.\n\nMy eyes went WIDE. \"Uhhh... you're kinda small, B.\"\n\n\"We can make it fit, right? Try it? At least once?\"\n\n\"I do NOT want a repeat of what happened when you lost your virginity.\"\n\nBelle blinked. \"So I'll train my ass. Look at Sam, right? She had such a horrible experience her first time but now she's fine.\"\n\n\"Exactly why we are NOT doing this tonight,\" I pointed out.\n\n\"Fine,\" she admitted grudgingly. \"But two weeks later, you were able to slide right in.\"\n\n\"Uh, I suppose. But you gotta promise me you'll wait two weeks, if not longer. I'm serious, B. I'm pretty thick and you are TINY.\"\n\nShe winked at me and started slurping on my dick again. \"We'll make it work.\"\n\nWe did make it work. Eventually. But not that weekend, and not even two weeks later. But eventually. In the meantime, we had plenty of other ways to satisfy each other, and satisfy each other we did. Belle was LIGHT, which made it really easy to pick her up, press her against the shower wall, and pop her \"shower cherry\". She could even claim credit for giving me my first shower creampie, since I'd never actually finished in the shower with either Sam or Naimh.\n\nIn the morning, Mother greeted Belle politely but then snarked a minute later, \"Should I expect one of the OTHER girls to stay over tonight?\"\n\nI think she was only half kidding.\n\nBelle gave me one last kiss and then went home to her dad. Mother and I had brunch together, along with a surprisingly productive discussion. I told her honestly that Naimh and I wanted to try dating as actual boyfriend and girlfriend. She didn't judge or try to convince me of anything one way or the other. She merely wanted to know if I'd thought things through and then asked me pointed questions to verify to her own satisfaction if I truly had. And she managed to do so without bringing up Sam's name once, although I got the impression she kept those concerns in the back of her head.\n\nOr maybe that was just me keeping MY concerns about Sam in the back of my head.\n\nRegardless, I began to realize that Mother was right about one thing: We got along much better now that I was... well... fucking. She at least had more to say on the subject of me and my myriad female relationships than she ever would have been able to say about my childhood interests.\n\nMother left in the afternoon, and thirty minutes later, Naimh \"found a way\" and came back to my house to visit her \"new boyfriend\". Belle, also, was able to come over as her dad got called in to perform an emergency surgery. And together the girls completely made up for any threesome fantasies I may have missed out on last night once things turned emotional.\n\nThe girls started off by parking me on my back and flip-flopping which one rode my cock and which one rode my face. The sounds of them making out while fondling each other's tits had me going crazy wishing I could watch. Still, I wound up squirting a creampie into Belle and got to see Neevie slurp it out and then snowball it back to Matty's Cumslut.\n\nBelle wanted a re-enactment of me fucking Neevie in half in the armchair, so she sat on the couch voyeuristically masturbating while I did so. And this time when Naimh screeched about wanting to feel me in her ass I was prepared with actual lube.\n\nMatty's Cumslut went after that creampie, too.\n\nFinally, Naimh wanted to lick my cum off Belle's ass, seeing as Belle had done the same to her two nights prior. So I wound up standing at the foot of my bed, banging both girls from behind one at a time while fingering the other. And after I pulled out and hosed down Belle's perky compact buttcheeks, Naimh first slurped Belle's and my orgasmic juices off my dick before turning around to lick the pixie's ass clean. And she even gave Belle a bit of a rimjob while she was doing it.\n\nSo like I said: Best Weekend Ever? Maybe not, but it was still pretty damn fucking good.\n\n****\n\nAlice was waiting for me and Belle at the parking lot Monday morning, and came over to us as soon as we stepped onto the curb. Literally, the first words out of her mouth after our fist bump were, \"Is it true that you and Neevie agreed to try dating for real as long as the rest of the BTC is okay with it?\"\n\nI blinked twice and looked around to make sure nobody else was nearby. \"I'm guessing you talked to Neevie yesterday?\"\n\n\"Last night. She said you two agreed to it Friday night when she stayed over (by the way, still not happy you didn't tell me about THAT either). She said she wanted to tell me sooner, but wanted to see you again Sunday to make sure you didn't get cold feet. But apparently you both had some wicked threesome with Belle so she's thinking everything's full steam ahead. And by the way, you used to tell ME everything first. I thought I was supposed to be your best friend? Now I gotta find shit out from the girls you're banging?\"\n\nI rolled my eyes. \"Video games, comic books, sports: I'll talk to you first. My sex life? Ehhh... Do you really wanna hear about that mushy stuff?\"\n\nAlice made a face. \"You have a point. Generally-speaking. But when it comes to Neevie, c'mon, dude. The day after you two decided to go steady I was at your house playing video games and sucking your dick. Couldn't have given me SOME kind of hint then?\"\n\nI winced. \"Can you NOT talk about... uh... that stuff while we're in the middle of a crowd of people?\"\n\nAlice shrugged. \"What? Sucking your dick? We're in the BTC. Everyone assumes I'm sucking your dick anyway.\"\n\nI couldn't help but laugh and keep walking. \"C'mon. Let's get to class.\"\n\n****\n\nSam gave me a warm smile when I came in the door for our shared first period. There was no time to talk before class, but I already knew we would walk together to our shared second period afterward. When the bell rang, I hoped for the best but braced myself for the worst, and I approached her before coming to a stop a good three feet away and offered her a nervous, \"Hey.\"\n\nSam rolled her eyes, latched onto my elbow, and leaned in to peck my lips. \"'Hey'? What's with you?\"\n\n\"Uh, nothing. How are you?\"\n\n\"'How are you?' Really?\" Sam shook her head, tugged me out of the class by the elbow, and started us walking to our next class. \"I think I can count on one hand the number of times you've ever asked me, 'How are you?'\"\n\nI grimaced, not sure what to say. Part of me knew that \"the plan\" was to wait until all seven of us could get together at recess so Naimh and I could break the news together. But I didn't think I could hold onto this for another hour, so when I spotted a familiar alcove, I quickly pulled Sam into it and drew her close to my chest.\n\n\"Oooh, this is nice,\" Sam drawled almost lazily while reaching up to caress my cheek. \"Miss me that much?\"\n\nShe had puckered up, so I quickly moved in and kissed her firmly. I did care a LOT about this girl, and I didn't want to hurt her feelings. I wished I had a crystal ball and could know with absolute certainty she wouldn't mind me and Naimh starting a dating relationship, but such a device didn't exist and so I found myself in this weird existential crisis, quite literally making out with one girl while my mind raced over all possible scenarios of the way she might react if and when I finally told her I wanted to start dating a different girl.\n\nI would not find resolution now.\n\nWhen our lips finally separated, Sam gave me another warm smile and said, \"That was nice. But what's bothering you? Is everything alright?\"\n\n\"What? Yeah, I'm fine. Everything's fine.\"\n\n\"Oh, good then.\"\n\n\"But I do want to talk to you.\"\n\nSam winced and glanced at her watch. \"Ooh, can it wait? I need to get to Calculus so I can talk to Mr. Long about my exam before class.\"\n\nI blinked. \"Uh, yeah, totally. No big deal. We can talk after.\"\n\nShe nodded quickly. \"Cool. Thanks for the kiss, though. Really brightened my day.\" She beamed at me, scooped her arm through my elbow, and started dragging me to second period.\n\n'It's fine,' I told myself. 'I was supposed to wait until recess anyway.'\n\nAfter second period, Sam and I joined the others at our usual spot. Naimh was already there, and I was super tempted to immediately grab her and shove my tongue down her throat. From the look she gave me, she had the same thing in mind. But I just sort of grinned while sitting down beside her, and then put my hand on her leg beneath the table. She snuggled in close to me cutely and pecked my cheek.\n\nBelle and Mari hadn't yet arrived, so the rest of us made small talk for a minute. My eyes met Belle's as she came to sit down, and she gave me an encouraging look. Naimh slipped her hand into mine, and I sat up straight, preparing myself to get everyone's attention. But right before I did, Zofi spoke up first.\n\n\"Hey everybody?\" the lissome brunette asked hesitantly, but strongly enough so that everyone stopped and looked at her. \"I have a favor to ask.\"\n\nI bit my lip and squeezed Naimh's hand, willing her to understand I'd tell everyone just as soon as Zofi was done with her favor. But I never expected Zofi to say what she said next.\n\n\"I want Matty to be my boyfriend.\"\n\n****\n\nAll hell didn't break loose or anything, but there was some confused initial squawking.\n\nAlice shrieked, \"WHAT?\"\n\nNaimh exclaimed, \"I already called dibs!\"\n\nSam called for order, \"Hey, let her finish!\"\n\nMari elbowed Belle and asked, \"What the heck is going on?\"\n\nZofi gestured with her hands for everyone to calm down. \"I'm sorry, I'm sorry. I should've explained that in a different order.\"\n\nSam gave her a 'well, duh' look. Zofi blushed nervously, looked down at the table, and took a deep breath. Then she turned to look at me. \"You remember after the whole thing with Holly when we sorta agreed you'd be the BTC's 'boyfriend'? You said specifically that you wouldn't mind if I told my Mom that you're my boyfriend to get her off my back about me not dating.\"\n\nI furrowed my eyebrows, didn't recall the exact conversation, but nodded, saying, \"That sounds about right. I wouldn't mind.\"\n\n\"Well, I actually did. I mean, I told my parents that I had a boyfriend. Not you, specifically. I just told them I'd started dating a guy, didn't even give him a name. I even went out to visit Sam on some Saturday nights and told them I was going out on dates with my boyfriend. Mom would ask me why he never picked me up from the house, and I told her we were still really casual and I wasn't ready for him to meet the parents. But she's still suspicious that I'm not actually dating anyone even though they want me to.\"\n\nNaimh chuckled. \"They actually WANT you dating? Can we trade parents? My dad would be thrilled if I stayed home and promised to join a nunnery after graduation.\"\n\nZofi winced. \"Uh... well... It's a little complicated.\"\n\nBelle shrugged. \"It always is.\"\n\nZofi looked at Sam for reassurance, and Sam squeezed her best friend's hand. Zofi looked up at us and said quietly, \"So my parents are super conservative. Annnnd my mom caught me looking at lesbian pics on the internet. I tried to tell her I'm not a dyke. I mean, I LIKE guys, and I especially like what we do, Matty.\"\n\nShe looked at me and gave me a shy smile. I smiled back at her encouragingly.\n\n\"I just... I mean...\" she began hesitantly, as if she couldn't even admit the next part to herself. \"I just get turned on by girls too, that's all.\"\n\n\"We know,\" Belle drawled with a smirk. Mari elbowed her reproachfully.\n\n\"Anyways, that's when my mom started pestering me about my lack of dating life. She said that if I was really straight the way I keep telling her, then I'd have been dating guys already. So after the whole Holly thing, I finally said, 'I AM dating a guy, alright?' I started going out on Saturdays. Over winter break, when we were cooking dinner and Mom said she over-salted the chicken, I sorta commented about how as long as it wasn't nearly as salty as a guy's jizz, it would still be fine.\"\n\n\"How did she take THAT?\" Naimh interjected, curiously.\n\nZofi blushed. \"She actually looked happy at the idea I'd given a blowjob.\"\n\n\"Seriously, trading parents?\" Naimh queried.\n\nZofi shook her head but smiled. \"Anyway, now Mom is really serious about meeting my boyfriend. I can't put her off any longer. I thought about just telling them we broke up, but she's already suspicious that the 'boyfriend' never existed. So that's where you come in, Matty.\"\n\n\"She wants you to play the role of her boyfriend,\" Sam explained to me.\n\nZofi nodded with a wince. \"I sorta promised my parents I'd bring my boyfriend over on Saturday night for dinner.\"\n\n\"Not that you want him to REALLY be your boyfriend,\" Alice remarked, glancing over at Naimh.\n\n\"No, no of course not,\" Zofi assured her. \"I know we want the whole school to think Matty is the BTC's collective boyfriend, but we all know he can't actually be anybody's boyfriend.\"\n\n\"Um, about that...\" Naimh spoke up, giving me a firm look. She couldn't sit on this any longer.\n\nI shot her a look back, asking, 'Now?!?' The mood was weird and we hadn't actually resolved Zofi's request yet.\n\nNaimh gave me a look that said, 'Yes, now!'\n\nI took a deep breath, looked at Zofi, and began, \"Funny you say that...\"\n\nSam caught our looks. \"Guys, what's going on?\"\n\nTaking a deep breath, I raised my hand still interlaced with Naimh's fingers up on top of the table. And summoning all my confidence, I looked around at all the girls and said, \"Neevie and I would like to start dating.\"\n\n****\n\nAfter all my worrying, the group reacted quite calmly to my little proclamation. Seriously, the girls had squawked far more when Zofi said she wanted to be my boyfriend.\n\nIt probably helped that everyone except Sam and Zofi already knew about me and Naimh. I already knew Naimh had told Alice, and as it turned out, Belle had already told Mari this morning. So only two of the girls were getting the information new, and Zofi had immediately cracked a smile and asked, \"Uh, Neevie? Can I borrow your boyfriend Saturday night?\"",
        "Naimh was of course quick to reply that she'd happily share. And then of course, all eyes were on Sam.\n\nShe frowned, looked back at everybody, and shrugged. \"What, you thought I was gonna say 'no'? Get into a jealous fit and insist on The Rule? I think we can all agree The Rule got stuffed a while ago. None of US want to seriously date him, and Neevie promised in Tahoe that she'd never take him away from us, so as long as she holds to that, I'm good.\"\n\n\"I won't. I promise,\" Naimh assured everyone. \"I swore I'd never betray the BTC, and I won't. I just...\"\n\n\"You just wanna go for that drive down the coast you keep talking about,\" Sam finished for her.\n\nNaimh blushed. \"Yeah...\"\n\nSam smirked at me. \"Better not make any plans next weekend.\"\n\nZofi grimaced. \"Well, except for my plans Saturday night.\"\n\nNaimh smiled. \"Sunday. We can go for a drive on Sunday, if that's alright.\"\n\n\"You can still go on Saturday if you want,\" Zofi explained. \"I'll just need him by dinnertime. And we're gonna be with my parents, so don't worry about saving him for me or anything like that.\"\n\nI exchanged a look with Naimh, who squeezed my hand and said, \"If it's up to me, I'm gonna see you on BOTH days.\"\n\nI arched an eyebrow. \"Are you going to be able to get away from your parents both days? And more seriously: Would it be easier to just TELL them we're dating?\"\n\n\"Dad wants me in a nunnery, remember?\" Naimh stated flatly. \"No, we're NOT telling my parents.\"\n\nSo Naimh didn't tell her parents she had a new boyfriend, while Zofi DID tell her parents that she and her boyfriend would be joining them Saturday night.\n\n\"Oh, and one more thing,\" Mari piped up and glanced at Sam. \"I know you said five seconds ago that The Rule got stuffed, but at the same time, if Neevie can date him, shouldn't that mean the rest of us can... well... go on dates too?\"\n\nBelle frowned. \"I thought you said you didn't want to date him and Neevie was welcome to have him?\"\n\n\"Oh, she's welcome to have him be her boyfriend. I just... uh...\"\n\nBelle smiled. \"You want another date with him.\"\n\nMari blushed, and I explained, \"Well the LAST date did kinda go all sorts of wrong.\"\n\n\"It still ended really nicely,\" she remarked with a shy smile.\n\n\"Of course he'll take you out again,\" Naimh stated emphatically. \"I do expect I'll get most of the dates, but the rest of you are more than welcome to go out with him if the schedules work out. Like Zofi's.\"\n\nSam held up her hands. \"You all are welcome to the dates. I'm perfectly happy to just show up at his house and get a few orgasms.\"\n\nAlice reached out a fist to Sam. \"That's what -I- was thinking.\"\n\nSam chuckled and fist-bumped her.\n\n\"I'm good with my weekend nights,\" Belle chimed in.\n\nAnd so it was agreed.\n\nFor the rest of the week, Naimh and I quickly fell into a honeymoon phase. We were making out almost constantly, no matter where we were. Between classes, during lunch, after school, and during group study sessions, we inevitably could be found wrapped around each other's body with our tongues in each other's mouth. Even during the times when we weren't making out, one of us found a way to stay in physical contact with the other, even if it was just sitting side by side at a dining table doing homework with our feet touching. And of course, we were carving out times to have sex at least once a day.\n\nBut lest you think the other BTC girls went out of their way to give us space and let us bask in the glow of fresh love, it didn't turn out that way. Oh, I'm sure the others would have happily let us, but Naimh and I were going out of OUR way to ensure they were included. We both wanted to make it abundantly clear that we weren't splitting off to become our own little pair-bonded unit away from the others. And in the interest of leaving no doubt, we actually didn't hook up with each other as much as we might have otherwise.\n\nFor example, Monday afternoon became a Mari day. Sam had some extracurriculars to attend to and missed out, but Belle, Naimh, and I all took extra care to make Mari feel loved. And then Sam came over after dinner saying she was hoping she could just show up and get some orgasms. She did, and when Mother came home early the two of them chatted for about an hour.\n\nTuesday, I got one of Alice's patented VG and BJ specials. Wednesday became a Zofi day. And Thursday was back to Belle and Mari. I mean, I still ended up fucking Naimh at least once each of those days, but once she got her cookies, she was more than willing to help ensure the other girls felt like they had been prioritized.\n\nFriday, as usual, the whole club got together and all six girls got pleasant orgasms. And then came Saturday.\n\nLet me just get this out of the way up front: Saturday was AWESOME.\n\n****\n\nSomething tickled my balls, and with a start, I jerked awake.\n\n\"Mmph!\" somebody grunted, and as I sat up, I realized I'd just shoved my dick an inch into a girl's throat. She gagged a little but didn't quite pull her head off. Continuing to suck my mushroom head and twisting her hands around the base of my cock, she pumped them together up and down the length of my shaft until she recovered enough to push her face back down.\n\nMy eyes fluttered for a brief second, giving me just enough time to see the strawberry-blonde head bobbing up and down in my lap. Belle looked up at me, her pale green eyes piercing in their gaze as she recognized I'd awakened. And she stopped to smile around a mouthful of meat while continuing to pump my shaft with both hands.\n\nI set my head back down and enjoyed the wonderful sensations my horny little pixie gave me while letting my conscious mind slowly boot up. But once I took a deep breath and found myself fully aware of my surroundings, I raised my head again and beckoned to her with both hands, miming for her to turn around.\n\nAt first, Belle thought I wanted to her to climb aboard, and she shook her head and sucked my dick harder. But a few seconds later she realized I wanted her to turn around and sixty-nine with me.\n\nShe took a moment to sit upright and pull off her nightgown. My eyes zeroed in on her magically perky D-cup breasts, so big and appetizing on her petite frame. I stared unapologetically at her chest, and she gave me a little jiggle to set those puppies bobbing. For a girl with such an amazing rack, she could get a little self-conscious about some of the other massive melons of the group, and I swore to myself then to give her more opportunities to be proud of her perfect tits. Seriously, as much as I appreciated, say, Sam's incredible breasts, tits of that size and volume would look rather ridiculous on Belle's little frame.\n\nEventually, though, she finally pulled off her panties and spun around to complete the sixty-nine. I propped a pillow behind my head, because with our height difference, I really had to push forward to reach her pussy, at least if I wanted her to be able to get her mouth around my cock at the same time. Oddly enough, in this position I had a pretty good angle on her winking anus, and after munching on her little shaved pussy for a while, I pulled her cheeks apart with my hands, tilted my angle, and started licking her ass.\n\n\"Eep! Matty!\" Belle squealed and clapped a hand over her ass.\n\n\"C'mon, Mari told you she liked this, didn't she?\"\n\n\"I... it was just unexpected, that's all.\"\n\n\"You said you want to feel me in your ass someday. Might as well start getting used to this sensation.\"\n\n\"I really need to get some butt plugs and start training.\"\n\n\"Ask Sam. She'll hook you up.\"\n\n\"Eww!\"\n\n\"I meant she'll tell you where to GET THEM. I didn't mean to... 'borrow' hers.\"\n\n\"Right...\"\n\n\"Now move your hand. I'm gonna do it again. It'll freak you out less when you know it's coming.\"\n\nBelle gave me a look of uncertainty, but she turned her attention back to my cock, did a double-take back to me, and finally sucked my dick back into her mouth. She still got startled when I started giving her a rimjob, but she relaxed and let me do it for a bit before declaring that was enough and turning around so she could climb onto me.\n\nNow plenty warmed up and stretched out a little from my fingers, Belle's super-tight cunt was only \"mostly-tight\" as she gingerly sat down on my thick dick. She moaned gutturally, planting her hands on my chest while I played with her tits and thumbed her nipples. And after only a few minutes she was able to ride herself to a sweet climax.\n\nI wasn't quite there myself, but Belle got a determined look in her eyes and started clenching her inner muscles. She made it clear she wanted to get me off this way, rather than roll us over so that I could take over. And after only a few minutes more she had me at the brink.\n\nOne nice thing about this position was that I didn't need to ask, \"In or out?\" Belle was the one in charge, and I could just sit back and enjoy the ride (literally). In this case, she apparently wanted \"in\", because when I started grunting and my eyes got tighter, she simply grinned and rode me even harder. A minute later, I grabbed her ass, pinned her down so she'd stop humping, and moaned as I erupted white hot lava into her very core. Belle's green eyes glittered a little bit gold as she felt my ejecta impacting against her cervical walls, and she bit her lip while grinning triumphantly to see the erotic expressions of ecstasy crossing my face.\n\nApparently, though, I'd misjudged Belle's wants. She wanted an \"in AND out\" this morning, because when I finally went limp beneath her, she raised up on her knees, spread her own labia apart with her fingers, and waited for my jizz to trickle out of her. It took a few minutes, and she kept squeezing her Kegels to try and wring out every last drop, letting each dollop drip down all over my deflating penis.\n\nWhen at last she decided she'd gotten it all out, my impish pixie gave me a wink, bent over my lap, and slurped my wet dick back into her mouth. And Matty's Little Cumslut moaned in happiness as she sucked back up every last drop.\n\nAnd that was only my first ejaculation of the day.\n\n****\n\n\"Sorry it's not a convertible,\" I apologized while holding the passenger door open for Naimh to climb into my minivan.\n\n\"Don't be,\" she replied warmly. \"I'm far more interested in the company than the car.\"\n\nI circled around to hop in the driver's side and found my girlfriend's eyes narrowed as she looked into the back.\n\n\"The seats fold down, don't they?\" she asked me with a twinkle in her eyes.\n\n\"Uh, yes, they do,\" I replied.\n\nNaimh's electric green eyes sizzled. \"Have you ever had sex in this van, Matty?\"\n\nI blinked. Both Belle and Alice had given me blowjobs in the van. Actually, Alice had given me three in the past two weeks, all in the parking lot at school during recess or lunch. But full intercourse? \"Uh, no,\" I replied after a moment's thought.\n\nNaimh giggled. \"Wait 'til Sam hears this.\"\n\nI chuckled and started the ignition. Soon we were out on the highway, winding our way through the mountains on our way to the beach. Less than forty-five minutes later I found myself looking for parking at the Santa Cruz Beach Boardwalk. And then hand-in-hand, my new girlfriend and I walked into the amusement park.\n\nSince Naimh's arrival, the whole BTC had visited the Boardwalk once during last summer, but that had been as a large group of friends. Today it was just the two of us, and Naimh was happy to hold onto my arm and kiss me at every opportunity. I was happy to get all the jealous stares of guys ogling my ridiculously hot girlfriend.\n\nAnd she really was ridiculously hot today. I mean, she was freaking gorgeous ALL the time, but today she was dressed to attract attention. She wore white canvas shoes with no socks and super-tight Daisy Duke jean shorts that really highlighted the curvature of her ass. She wore a high-collar white tank top with a mock turtleneck that covered up all of her cleavage, but was ridiculously tight and molded around her upper torso making it quite clear how big and beautiful her boobs were. Her bare shoulders repeatedly invited me to bend over and kiss them. Her copper-red hair hung down, long and lustrous, scintillating in the sunlight. And the fact that such a gorgeous creature of youthful femininity spent so much time wrapped around my body like a second layer of skin gave me no shortage of pride.\n\nI especially loved the way she would leap into my arms whenever I won a prize at a carnival game. I spent way too much money trying to knock down metal milk bottles in the process of winning her a big stuffed pink unicorn that was \"So fluffy!\", but the kiss she gave me at the end was well worth it. We rode the Sky Glider gondola over the length of the boardwalk and did a few of the thrill rides. We played mini-golf (she won, but she tapped the ball in with her foot on three separate occasions to do so). We ate corn dogs and drank lemonade. We took off our shoes and walked across the beach hand-in-hand and generally had a really, really good time together.\n\nBut after we rode the carousel holding hands across the gap between side-by-side horses, my gorgeous girlfriend wrapped her arms around my neck, kissed me fiercely, and told me she wanted to go back to the minivan.\n\nHer idea was flat out crazy. The minivan was two-thirds of the way back in a big parking lot outside of a family-friendly amusement park. Even with the rear seats folded flat into \"bed\" configuration and the tinted windows, anyone passing directly behind the rear window would be able to look down and see us. And even if they weren't directly behind the rear window, the way the minivan certainly must've been rocking back and forth would be quite likely to draw somebody's curiosity.\n\nTo this day I have no idea if someone actually saw us having sex in the back of the van. All I really know is that I kept my head down as low as possible while fucking the shit out of my horny redhead girlfriend, the adrenaline rush from maybe getting caught amplifying our arousal until I moaned into her mouth and filled her pussy with every ounce of cock cream I could manufacture.\n\nAnd Naimh wasn't remotely done with me yet. I was still coming down from the orgasmic high of my ejaculation when she cooed into my ear and wiped sweat back from my forehead. She gave me a kiss and then reached back for the big stuffed pink unicorn, waggled it in her hands while my cock was still deflating inside her, and remarked, \"I think Cadhla (Ky-la) is lonely and needs a boyfriend, too.\"\n\nSo my randy girlfriend and I fixed our clothes, went back to the boardwalk, and didn't stop until Naimh had a big blue teddy bear (Fergal) to go with her unicorn. She was so happy, she tried to pull me into a quiet corner and give me a blowjob. THAT I wasn't quite ready for. Seriously, there were tons of kids around. So she settled for a really sweet kiss.\n\nAfter that, my plans got tossed aside. Since sunset would be around 5pm, and I wasn't supposed to get to Zofi's place until 7pm, I figured there would be plenty of time for me and Naimh to see the sunset on the beach just the way she'd always talked about, drive back home, and still have just enough time to clean myself up and change clothes so long as I didn't dawdle.\n\nBut for whatever reason, Naimh was REALLY horny after I won that stuffed bear and said she wanted to go back to my house. I explained that we had a plan that included ice cream and sunset on the beach. But my horny redhead kissed me, put my hands on her buttcheeks beneath the cutoff denim of her super-short jeans, and murmured huskily from inches away, \"There will be other beaches. There will be other sunsets. But today... right now... I need you in my arse again.\"\n\nI had my keys out in two seconds flat.\n\n****\n\n\"Ohhh myyy fuuuuccckkkiiiinggg gggaaawwwwwwddddd...\" Naimh moaned as inch after inch of my thick cock burrowed deeper and deeper into the darkest recesses of her constricting colon.\n\nHer cheek was flat on the mattress, her knees were tucked beneath body, and her arms were stretched away and forward until her fingers bunched up my bedsheets.\n\nI stopped balls deep up my girlfriend's amazing \"arsehole\", panting softly as I leaned over her, pressed my naked chest against her equally naked back, and kissed her cheek tenderly. \"I'm beginning to think you like this better than in your pussy.\"\n\n\"I think you're right,\" she whimpered. \"I feel so full. I feel so fulfilled.\"\n\n\"What, you don't feel fulfilled when I'm in your pussy?\" I asked with a chuckle.\n\n\"I love having your dick inside me, period. When you're in my arse, though... I... I can't really explain it. You're in me so deep. It's like I can feel you throbbing inside the core of my very soul. I'm stretched out and helpless. I feel... I feel violated... but in a good way, if that makes any sense. I wouldn't want to feel like this with any other guy. Just you. I've let you inside a place so... sacred... because I love you. Because when you're this deep inside me I feel like I can finally tell you how much I love you... How much I've always loved you... How I've wanted this since almost the first day we met. You're not just some guy. You're not even just 'Matty: the BTC's plaything'. Not anymore. You're MINE now... and I'm YOURS. And when we're so closely connected like this... I mean... I can't explain it any better than that.\"\n\nI kissed her cheek again, withdrew my dick five or six inches, and slowly pushed it all the way back in. \"I think you explained it just fine.\"\n\n\"Mmm... I love it, Matty. I love this,\" she crooned while undulating her hips to start humping her ass back at me. \"You're such a fucking stud, Matty. You've converted me into an anal queen. Just for you.\"\n\nHer words were an aural aphrodisiac, inflaming my loins and making me want her even more. Taking a deep breath, she pushed her hands flat on the mattress and started to rise back up into a doggy-style position, the same position she'd been in a few minutes earlier before we switched holes. Curving her spine downward, she thrust her beautiful butt back at me and started a gentle rhythm, doing all the work of impaling herself and then retracting while I basically just sat on my heels and let her masturbate my cock with her colon.\n\n\"Good fucking lord, Neevie,\" I breathed, watching the way she humped her body back and forth on me, in awe of the way her asshole made my rod repeatedly disappear and then reappear. I let my hands roam across her naked back, stroking her skin before holding her hips to help yank her against my pelvis with every stroke. \"You are SOOOO fucking gorgeous.\"\n\nShe turned her head to look back at me, our eyes meeting as she watched the pleasure crossing my face, pleasure SHE gave me with her body, pleasure SHE made possible by uniting the two of us so intimately deep within her.\n\nI wanted to feel even closer, so I slid my hands forward, cupped her big Double-D boobs, and hoisted her torso up until she fell back against my chest. We stopped thrusting for a minute so she could turn her face to mine and crash our lips together. Sitting upright with her asshole still impaled on my big dick, we made out like fiends, my hands roaming her breasts, tickling her ribs, and rubbing her clit. She reached both arms back to hold my head, moaning into my mouth while I played her body like my personal instrument.\n\nAlthough the position was a little awkward, I wrapped both arms around my Irish girlfriend's midsection and used the springiness of the mattress to get a couple of inches of motion. I started fucking her ass again while she abruptly broke our kiss and whimpered at the sensations I was giving her. Instead, I nibbled my way along her neck, biting down ever so briefly.\n\nNaimh gasped at the sensation of pain, her eyes fluttered, and she stared deep into my eyes with emerald fire in her irises.\n\n\"Hurt me...\" she whispered.",
        "My adrenaline surged, and with a sudden burst of violence, I pushed her body forward, practically throwing her a couple of feet across my bed. She collapsed before me, face-down and ass-up, and I was quick to kneel behind her, turned slightly sideways so that I could take a bit of a wind-up with my right arm to spank her ass rather hard.\n\n<THWACK>\n\n\"AUGH!\" Naimh yelped at the impact, her head popping up briefly. I spanked her again, this time on the other cheek.\n\n<THWACK>\n\n\"AUGH!\" she yelped again.\n\n<THWACK> <THWACK> <THWACK>\n\n\"AUGH! AUGH! AUGH!\"\n\n<THWACK> <THWACK> <THWACK>\n\n\"AUGH! AUGH! AUGH!\"\n\n<THWACK> <THWACK> <THWACK>\n\n\"AUGH! AUGH! AUGH! AAAAUUUUGGGGHHH!!!\"\n\nMy girlfriend's screaming shot up in pitch and volume as my hard cock suddenly re-invaded her gaping asshole. Instead of kneeling to enter from behind, I stood atop the mattress above her, holding her waist and drilling down into her receptive body like an oil derrick. She cried and wailed and sobbed while howling, \"Harder! Deeper! So fucking GOOD!\" all the while. And every so often I would pause my drilling to reach down and give her another healthy smack on the ass.\n\n\"Fuuuuuuccccckkkk mmmmmyyyyy aaaaarrrrrsssseee!\" Naimh howled as she raced down the road to orgasm. \"Fuuuuuuccccckkkk mmmmmyyyyy aaaaarrrrrsssseee!\"\n\n\"So good,\" I grunted as I cornholed the hell out of her with every ounce of strength I had. \"So good! I'm gonna cum in your ass!\"\n\n\"YES! YES! YES! OH, MATTY! I LOVE YOU! FUCK MY ARSE! CUM DEEP IN MY ARSE! I WANNA FEEL YOUR LIQUID LOVE DEEP INSIDE MY SACRED CORE! FUCK ME! FILL ME! FULFILL ME! MATTY! MATTY! I LOVE YOU! I LOVE YOU! MATTY AAAAUUUUGGGGHHH!!!\"\n\nNaimh's back arched and her legs collapsed as she abruptly jerked from the force of an incredible orgasm. Her anus clenched around me -- actually, her entire anal chute clenched around me -- and when her body dropped downward onto the mattress, she took me with her. She landed flat across the mattress, limbs spread akimbo in every direction while she screamed incoherently at the top of her lungs in utter ecstasy. And at the same time, I felt myself evacuating the contents of my balls deep within her bowels while I climaxed right along with her.\n\n\"Neevie!\" I groaned, almost a whisper as the force of my ejaculation took my breath away. I wanted to howl with her, but couldn't, the sensations too overwhelming. As each pulsing burst drained out of me down into her violated bunghole, I grunted quietly into her ear, \"Neevie... Neevie... I love you... So goooooooood.\"\n\nAt last, I had nothing left to give. At last, her body trembled one last time and went still. The room went silent as her echoing screams died out, save for the sounds of two exhausted teenagers gasping in the aftermath of erotic bliss.\n\nMy body was flat atop hers, my dick still balls-deep inside her rectum with all my weight smothering her beneath me. Not that she minded in the least. She hummed happily in utter satisfaction as I stacked my hands on top of hers and interlaced our fingers. She squeezed my fingers, sighed rapturously, and giggled a little when I started kissing her neck.\n\n\"I love you, boyfriend,\" she murmured quietly but happily.\n\n\"I love you too, girlfriend,\" I responded in kind before kissing her neck again.\n\n\"Promise me you'll love me forever?\" she asked a little hesitantly.\n\nI hesitated, my impulse telling me to promise it immediately while the logical part told me not to make bold statements like that immediately after such a fantastic orgasm.\n\n\"It's okay,\" she said quickly. \"That was an unfair question.\"\n\nI kissed her neck again and squeezed our hands. After some thought, I finally said, \"I don't know what the future holds. I don't even know where we're each going to be living in September. The fear of a breakup is exactly what kept Belle from wanting to start a relationship. And the reality is that no matter what you and I feel for each other, neither of us knows for sure where this will end up.\"\n\nShe glanced back at me, a twinkle in her eye. \"This is the part where Matty always says, 'I smell a 'but' coming.'\"\n\nI chuckled and finished, \"But... the answer is yes. I WILL love you forever. You're the relationship I've wanted since I first met you. You're the relationship I wanted to at least TRY, even if it's our senior year and we may be separated in a matter of months. Because at least this way I'll get to be with you for a little while. At least this way we get to have this... this whatever we can be... with the time that we have. I can't promise that we'll be together forever. But yes, I will ALWAYS love you, Naimh O'Brien.\"\n\nNeevie beamed and squeezed my fingers again. She even clenched her buttcheeks around my dick again. And with a sigh, she mumbled, \"Good enough.\"\n\n****\n\n-- CHAPTER 24: Girlfriends --\n\n****\n\nWe took a shower together but didn't start up another round of sex. I was plenty interested after playing with my hot girlfriend's big titties, rubbing her reddened-ass, and making out beneath the shower spray, but Naimh told me to save it for Zofi.\n\nI reminded her that Zofi and I would be double-dating with her parents and that Zofi had explicitly stated we wouldn't need to save anything for her. But Naimh pecked my nose and murmured, \"You never know.\"\n\nIt took five minutes for her to get from the inside of my front door to the outside. I opened the door, she started walking out, and all of a sudden I couldn't bear to let her go. So I held her hand, yanked her back into my arms, and we started making out like the world was going to end. She wound up pressing my back against the door to shut it, and for a little while time ceased to exist for us.\n\nIn the end, we still had to breathe, though, and she nuzzled my nose while panting, \"I love you, boyfriend.\"\n\n\"I love you too, girlfriend.\"\n\nShe giggled. \"I LOVE that I can call you 'boyfriend'.\"\n\nI grinned. \"I love that I can call you 'girlfriend'. You're my first-ever girlfriend.\"\n\nNaimh's eyes sizzled at that. \"You know how much I love being your 'first' anything.\"\n\n\"The way you girls have been going, I'm running out of firsts.\"\n\n\"Oh, I'm sure we can think of a few more. Sam's never gonna catch me.\"\n\nI frowned. \"Please tell me that's not what this is about.\"\n\nShe blinked and quickly looked apologetic. \"No, no, please believe I love you and I want this relationship because I want this relationship. I'm not competitive about it like Sam.\"\n\nI snorted and muttered sarcastically, \"Sure you're not.\"\n\nShe shook her head. \"I get a thrill out of being your first anything, sure. But I'm not...\"\n\nI arched an eyebrow as her voice trailed off.\n\n\"Okay, I'm really not competitive about it. It's not about topping Sam. But I might be a little greedy. I'm your girlfriend now. Don't I get to be greedy about stuff like being your first anal? Your first minivan sex?\"\n\nI chuckled and kissed her again. \"Sure. We'll just have to think up more firsts.\"\n\n\"You're on.\" She gave me another quick peck, stared at me for a long moment with an expression of utter adoration, and then gave me another fierce kiss. This time, when we finally separated, I let her walk out the door.\n\nBut I was still sad to see her go. If it were up to me, she'd never leave my side. People in movies always ask, \"How do I know if it's love?\" The answer is always, \"When you feel it, you'll know.\"\n\nI felt it. For the first time in my life, I really FELT it. I mean, I'd been infatuated with Naimh before. I'd wanted to fuck her since the day I met her, and I'd often lain in bed jerking off to fantasies about her. But I'd never felt this all-consuming need to BE with her before. I'd never felt this kind of heartache at anyone's absence before. Not even Belle.\n\nI'd said I loved girls before.\n\nI'd said \"I love you\" or variations thereof to girls before.\n\nI'd even told girls I was \"in love\" with them before.\n\nBut I'd never had THIS kind of feeling, and I suddenly realized I must've been lying to everyone I'd ever said those words to before. It wasn't a good feeling, and I tried to make myself feel better by telling myself I hadn't actually lied to anyone; I just didn't know what I was talking about. I didn't know what \"true love\" really meant.\n\nI felt it now.\n\nI felt it for her.\n\nAnd yet... I now had to get dressed and drive out to go on a date with someone else. And that felt... weird.\n\nBut I'd chosen this life. I'd chosen to dedicate myself to the BTC, and I wouldn't let any of them down. Zofi needed me tonight, and I was going to do the best I could to support her. Was it really so bad that I was in love with Naimh and yet going on a date with Zofi? Was it really so bad I was about to go pretend to be another girl's boyfriend when I actually belonged to someone else?\n\nNot really. For one thing, Naimh had been clear about her devotion to sharing me with her friends. For another, it wasn't even about Naimh's relationship with Zofi. It was about MY relationship with Zofi. Now perhaps she and I had never felt romantic feelings for each other, and if I ever DID rank the girls (which I swore to Sam I never did), I would have to admit I was the \"least close\" to Zofi in comparison to the rest. But being ranked sixth out of a bazillion women in the world was nothing to sneeze at. Zofi was still very special to me, and I was doing this as a friend for her. Our relationship deserved that much.\n\nOne thing that might have been a challenge though, was Zofi's request to me. Even though we were truly \"just friends\", despite however much messing around we did with each other, tonight's double-date was really important to her. This was her big chance to prove to her parents that she wasn't gay, and to do that, she needed me to really \"sell\" that we were in love.\n\n\"Can you do that?\" she'd asked me just last night when the whole BTC was at my house. \"Can you pretend to be in love with me?\"\n\nLast night, I'd promised I'd do my best. Tonight? I found myself a little conflicted. How could I possibly pretend to be in love with a girl OTHER than the girl I was in love with?\n\n'Pretend she's Naimh,' I told myself. 'Take whatever feelings you're feeling right now, and just... feel them for Zofi. All the heartache, all the longing, all the angst that Naimh's not around: dredge up the pain at not being with her right now and let it feed your relief to have Zofi by your side instead. Take all your desire to bend the busty redhead over at the waist, spank her cheeks, and ram your dick up her slutty asshole, and then imagine the busty brunette's gonna let you do it to her as a reward at the end of the night.'\n\nZofi would never let me do that.\n\n'Whatever. Use what you've got. It's not that hard. Zofi's fucking gorgeous too, isn't she? Haven't you always wanted to tap that ass? Imagine those dangling earrings. Maybe she'll wear them for you tonight. Imagine the way they'll tinkle while she's bobbing her head up and down your cock.'\n\nGet your mind out of the gutter, dude.\n\n'Even beyond basic lust, isn't she just the sweetest thing? Always a smile on her face. Always supportive, zero drama, and looking out for everyone's happiness. And don't forget how exquisitely beautiful she is. I mean, her face is a fucking work of art. Let's get real: if she'd be willing to finally have sex with you, she'd make an awesome girlfriend, wouldn't she?'\n\nYeah, totally.\n\n'Use that. Imagine Zofi's the love of your life. It's just one night. And at the very least, NOW you know what love is.'\n\nI got it.\n\n'You got it.'\n\n****\n\nFeeling pretty pumped up from the little pep talk I'd given myself, I turned to get suitably dressed for my date. Zofi told me to expect a fancy dinner, as her parents were a couple of high-maintenance types used to the finer things in life. I went into the bathroom to fix my hair and put on a little cologne saved for special occasions like this. I then went to my closet, and the first thing I saw was my one and only white button-down dress shirt, the same one both Sam and then Belle wore when greeting the other BTC girls into the house. I took it off its hanger and pressed the fabric to my nose. It still smelled like girl: fresh and sweet. The choice was clear.\n\nMother had helped pick out a nice slim-fit black suit for me a couple of months ago when I got dragged out to attend the funeral of some distant cousin's uncle. She said she never liked the 90s boxy suit style and believed that form-fitting clothing would soon be \"en vogue\". I had to admit, I looked pretty sharp in it, and with plenty of time to go, I drove out in the minivan to get to Zofi's house.\n\nShe lived in a gated community about ten minutes away, and I rang the doorbell to her house a few minutes before seven. Still feeling the pangs of heartache over having to leave my girlfriend so soon after we'd made love, I imagined what Zofi might look like when I saw her. Flush with the recent memory of the way Naimh looked at me with an expression of utter adoration, I pictured Zofi's exquisite face giving me the same kind of look, and butterflies danced in my stomach.\n\nSure enough, Zofi opened the door right after that, her expression matching my imagination almost perfectly. \"Matty!\" she greeted enthusiastically. And already riding the emotional high of my imagination, it felt completely natural for me to step forward, hoist her off her feet, and give her a fierce holy-crap-I-missed-you-so-much kiss.\n\n\"Ahem.\" A male voice cleared his throat, and I immediately let go of Zofi. No, seriously, I didn't set her back down on her feet; I dropped her. And I half started to raise my hands as if a cop had just pointed a loaded gun at my back and shouted, 'FREEZE!'\n\nBut I stopped myself just as suddenly as I'd started, blushing sheepishly and futzing around with my hands for a moment before finally settling them against my sides and standing up straight. \"Um, sorry, sir,\" I apologized. \"I forgot myself for a moment.\"\n\nMr. Zelazowska exchanged a glance with his wife, the two of them standing less than ten feet away from us. Zofi blushed, drew her fine dark hair back behind both ears, and stood up straight. She nervously wiped moisture from my lips off of her lips with the back of her hand and struggled to meet her parents' eyes. \"Mom, Dad...\" she began a little timidly. \"This is my boyfriend, Matthew.\"\n\nI stepped forward with one hand extended for a shake, doing my best to look confident and masculine. \"Pleased to meet you, Mr. and Mrs. Zelazowska.\"\n\nZofi's dad chuckled as he shook my hand first, gently correcting, \"Mr. Zelazowski. Polish surnames are gender-specific.\"\n\n\"Ah, I didn't know that. Thank you, Mr. Zelazowski,\" I replied with a smile before turning to Zofi's mom. \"Pleased to meet you, Mrs. Zelawoska.\"\n\nZofi's mom merely held my hand before letting go. Her dad was a fairly ordinary-looking man, and I'd seen him around before, but I'd never seen Zofi's mom and DAMN she was quite a stunner. Most likely in her early to mid-40s, she looked like she was in her early to mid-30s, and the horny teenager in me recognized her as quite the MILF. Actually, she was just an exquisitely beautiful woman, period. I could see where Zofi got her figure and facial structure from, and if Zofi were a few years older perhaps, they might be able to pass for twins.\n\nI put those thoughts aside as soon as they flitted into my head, of course, and focused on what I was here to do: play the role of Zofi's adoring boyfriend, convince her parents we were a genuine couple, and more importantly, reassure her super-conservative mother that Zofi wasn't gay. I stepped back, wrapped my arm around Zofi's waist, and hugged her close. She automatically leaned into me, and I found myself a little intoxicated at how good she smelled.\n\nZofi's dad asked with a fairly thick Polish accent. \"So... Matthew... or do you prefer Matt?\"\n\n\"I do prefer Matt,\" I replied with an easy smile. \"My mother is the only one who calls me Matthew.\"\n\n\"We have met before, in a manner of speaking, have we not?\" he continued. \"It was your mother who rented a cabin in Tahoe over winter break. I recognize the minivan parked outside.\"\n\nI blushed and nodded. \"Uh, yes, sir. I was driving the van on that trip.\"\n\nHis eyes narrowed. \"Perhaps I should have come down to meet you then.\"\n\nI smiled. \"I would have welcomed that. Still, I am pleased to finally make your acquaintance now.\"\n\nHe gave me a look that suggested he wanted to ask more about what happened during that trip, perhaps even grill me about what I'd done with his daughter and watch me squirm trying to come up with an appropriate response. But instead he gestured, \"We have dinner reservations. Please to follow?\"\n\nI nodded as Zofi's parents led the way through the main hallway and opened the door to the garage. The four of us piled into a gleaming black Mercedes S-class sedan. In the back seat, Zofi took hold of my right hand with both of hers, and clasped it atop her left thigh.\n\n\"So, Matt?\" Zofi's dad began once we were on the road. \"I assume you are friends with Zofia's BTC club, yes?\"\n\n\"Uh, yes, I am,\" I confirmed, glancing at Zofi, wondering how much her parents knew about BTC. Heck, did they know what the acronym meant?\n\n\"Is that how you and Zofia met?\"\n\n\"Uh, well,\" I started, furrowing my eyebrows. I had no idea how much Zofi had told them and didn't want to unwittingly contradict whatever story she'd come up with. I turned to look at her for a moment and asked, \"What have you already told them about us?\"\n\n\"Nothing,\" her mom answered flatly, her accent just as thick as her husband's. \"She's told us nothing. She's kept YOU a secret for quite some time.\" And clearly she wasn't happy about it.\n\n\"Zuzanna...\" her dad chided, rubbing his wife's knee. She relaxed... a little...\n\nI decided to stick to the truth... ish. \"Well, I got to know Zofi through Sam and we all started hanging out in the same circle of friends. Zofi and I stayed pretty casual friends until the beginning of this year. And then, you could say, our relationship started to change.\"\n\nZofi's mom spoke up, looking into the back seat and asking roughly, \"In exactly what way did your relationship start to change?\"\n\n\"Matka!\" Zofi exclaimed, a little scandalized.\n\nZofi's mom looked chagrined, but just for a moment. She looked at me expectantly.\n\n\"With all due respect, ma'am,\" I said politely. \"I believe some things should be private. I will say that my feelings for your daughter are quite different now from when we first met. I very much like Zofi, that much is clear. I enjoy spending time with her and would like to spend a lot more time with her in the future.\"\n\n\"Matt,\" Zofi's dad spoke up again. \"Please tell us about yourself. About your family.\"\n\n\"Well,\" I started uncertainly. \"My parents are both lawyers, but they divorced when I was in third grade. I live alone with my mother now. I am a very good student, and I work hard. I've turned in all of my college applications now, and I'd like to study Engineering as my major.\"\n\n\"Ah. I am also an Engineer,\" Zofi's dad said proudly. \"I am a computer engineer at Apple.\"\n\n\"Yes, Zofi told me. But I think my focus will be more on mechanical engineering.\"\n\n\"Which schools did you apply to?\" Zofi's mom asked.\n\n\"The usual around this area: Stanford, Cal, Davis, San Jose State, Santa Clara. Caltech, MIT as top Engineering schools. My mother went to both Cornell and Yale, and my father went to USC, so I've applied to those as well.\"\n\n\"Good schools,\" Zofi's father commented. \"You think you can get in?\"\n\n\"I hope so.\"\n\n\"And then what becomes of your relationship with Zofia if you get into Yale or one of those?\" her mom asked.\n\nI exchanged another glance with Zofi. She had told her parents that we were casual, and would likely not have even done the 'Meet the Parents' thing had they not insisted so vehemently. So with that in mind, I explained, \"The reality is that none of us know what the future holds. A year from now, I could be in Connecticut, and Zofi could be here. All of our friends could be spreading across the country. But that doesn't mean we can't enjoy the time that we have together. Zofi and I have taken our relationship one step at a time. I assure you I have the utmost respect for her and I would never push her to do anything she didn't feel comfortable with.\"",
        "Zofi's parents looked at each other. Her dad seemed pleased, while her mom looked skeptical. Her mother glanced at me, \"So you have NOT had sex with her?\"\n\n\"ZUZANNA!\" Zofi's dad exclaimed in surprise while Zofi squealed, \"MATKA!\"\n\nI glanced at all three of them hesitantly. Zofi's dad was shaking his head. Zofi had buried her face in her right hand while still squeezing my hand with her left. And Zofi's mom still looked at me expectantly, not budging an inch.\n\nI blinked and blushed, hoping the darkness of the interior of the car at night would cover me. And after taking a breath to steady myself, I stated evenly, \"As I said: I believe some things should be private.\"\n\nZofi's mom's eyes narrowed. Zofi's dad sighed. The car went quiet, and no further questions were forthcoming. Once we got out of the car, though, Zofi pulled me aside and whispered in my ear, \"We're gonna have to convince her I'm straight.\"\n\n\"How are we gonna do that?\" I whispered back.\n\nZofi didn't answer. She just squeezed my hand and led me around the car to join her parents as we headed into the restaurant.\n\n****\n\nAfter the rough start, I'd like to think the double-date went as well as could be hoped for. At least being in a public place meant that Zofi's mom wouldn't ask any more impolite questions, and although it took everyone a few minutes to settle down from the tension in the car, we eventually fell into a natural rhythm. Zofi got her Niners fandom from her dad, and once I started talking football, he certainly eased up.\n\nConscious of Zofi's need for me to convince her parents that we were in love and that she was straight, I once again filled myself with that fresh sense of love and longing I felt for Naimh, and redirected that energy to Zofi. She was exquisitely beautiful, as always, in an elegantly strapless LBD (little black dress), her hair up in a neat and tight high bun, with no strays hanging loose. She also wore those dangling earrings I loved so much, and every time they tinkled I was reminded of the way she looked giving me a blowjob in Tahoe, which certainly put me in the right frame of mind for acting lustfully in love with her.\n\nShe went out of her way to touch my arm or shoulder throughout the evening. I rubbed her legs, brushed her arm with the back of my fingers a few times, and even gave her two pecks on the cheek. I made sure my body posture leaned into her, kept my focus on the girl I was pretending to be in love with, and didn't let myself get overly sucked into the conversation, thus ignoring her.\n\nAfter we drove back to her parents' house, the four of us made polite small talk before I took my leave of them. Zofi walked me out to my van, and to my surprise, after I used the remote to unlock it, she opened the passenger door and hopped inside. I furrowed my eyebrows, not understanding, but she gave me a stern look and said, \"Get in.\"\n\nI got in, and Zofi quickly swung her legs into the gap between the two front seats, held my head, and kissed me passionately. I figured she must be expecting her mom to be watching us from the house, so in the interest of selling my \"boyfriendness\", I held her head and kissed her back with equal passion. Zofi moaned into my mouth in a tone that told me not everything was for show, and as I felt her arousal build, so did mine.\n\nTwo minutes into our impromptu makeout session, Zofi's hand slid up my right thigh and over the bulge in my dress slacks. She giggled into my mouth, happy to find my boner there as if it were validation of her sexiness. And she broke our lip-lock to focus for a moment on unzipping me and extracting my dick through the flap.\n\nI immediately grabbed her wrist to stop her. \"Wait, what?\" I exclaimed in a harsh whisper. \"You can't do that here!\"\n\n\"Why not?\"\n\n\"Your parents might be watching!\" I hissed back.\n\n\"That's the point.\"\n\n\"Zofi, please tell me you're not giving me a blowjob just to try and convince your mom that you're straight.\"\n\n\"Of course I am.\"\n\n\"Do you not see the inherent wrongness in that?\"\n\n\"What? You don't want me to give you a blowjob?\"\n\n\"Of course I want you to give me a blowjob. But I only want you to give me a blowjob if you want to give me a blowjob. Not as a show for your mom.\"\n\n\"What? NOW you're gonna get all moral on me about my ulterior motives? You're already pretending to be my boyfriend, Matty. You're already pretending to be in love with me when you're not.\" Zofi frowned, sat up straight, and gave me a funny look. \"Wait, you're not actually in love with me, are you?\"\n\n\"No, of course not.\"\n\n\"Good.\" Zofi looked relieved, but a moment later, her eyes hardened. \"Now will you please just shut up and let me put my mouth on you?\"\n\nSuiting action to her words, the beautiful brunette bent forward, took my thick cock in her mouth, and started bobbing her head up and down. Her dangling earrings tinkled, and I sagged a bit in my seat. Rather nervously, I glanced up at the house, only too aware that Zofi's dad had said almost immediately after my arrival that he recognized the minivan. And in a panicked whisper, I asked, \"What if your DAD is watching?\"\n\n\"He won't,\" Zofi explained quickly between sucks. \"He's okay with you already. It's my mom we have to convince.\"\n\n\"I just... I dunno...\" The whole situation was unsettling. Part of me wanted to give in and just enjoy one of the rare occasions when Zofi (Zofi!) put her mouth on me. But the sense of wrongness didn't go away. It wasn't like she was prostituting herself for money, but it didn't feel so very far off. And that thought wasn't very arousing.\n\nI even started to go soft. Zofi noticed almost immediately. \"What's happening?\" she asked in confusion as my dick literally wilted in her left hand.\n\n\"I don't think I can do this,\" I muttered, giving her an apologetic look. \"It's not that I don't want to... Okay, it IS that I don't really want to. This just feels wrong, doesn't it? You don't have any 'urge' to go down on me. You're just doing it for show. It's a fake thing for your MOM. And that's like the least arousing thing I can think of right now.\"\n\nZofi sat up straight, wiped her lips with two fingers, and took a deep breath. She furrowed her eyebrows, took a deep breath, and sighed. \"Well you know what? Maybe that's good enough. If she was watching, she saw me bend over in your lap. Maybe she'll think you just came really, really fast.\"\n\n\"Um, sure, maybe.\" I sighed, although in my head I wasn't so sure I liked the idea of Zofi's mom thinking I was a premature ejaculator.\n\nZofi shook her head. \"Or maybe the truth will be easier. That I wanted to, but you got nervous thinking my parents could see us. That's true enough, right?\"\n\n\"Right.\"\n\nShe exhaled slowly, recognizing the tension on my face, and she reached up to caress my cheek. \"I'm sorry for doing that to you, Matty. I realize now how unfair that must've been.\"\n\nI shook my head. \"No need to apologize. I understand the pressure you're under, and I really DO want to do what I can to help. I care a lot about you. I care a lot about all the girls. And I'll do whatever you need me to do. Just... maybe not let you give me a blowjob on cue for your mom.\"\n\nZofi chuckled. \"Fair enough. But if you really do mean that, I think I'm gonna need you to play my boyfriend a little longer.\"\n\n\"Yeah, no problem.\" I smiled at her and rubbed her knee. \"I wasn't lying when I said I enjoy spending time with you and that I'd like to spend even more time with you.\"\n\n\"You mean that?\"\n\nI nodded. \"Maybe we should go on a few dates. Real ones, without your parents. Bring your digital camera, get some photos of the two of us together. Help build a narrative your mom will believe.\"\n\nZofi gave me a curious look. \"Isn't that the same thing as me giving you a blowjob as a show for my mom?\"\n\nI shook my head. \"No, that's me worming my way into spending more quality time with an exquisitely beautiful young woman I care a great deal about. Like I said: I'd really like to spend more time with you. If that means taking a few photos along the way that you can eventually show to your mom later, I can work with that.\"\n\n\"I'd like that, too, boyfriend.\"\n\n\"So I guess I'll see you again soon, girlfriend?\"\n\nZofi grinned and drew me to her for another kiss. She met my lips with fresh passion, and this time I could tell she really meant to kiss me for the sake of kissing me, not just for show.\n\nAnd that really made all the difference in the world.\n\n****\n\nDon't ask me how I forgot tonight was a Saturday night, and therefore forgot what that meant. I blame it on having such a long day: first the Santa Cruz Beach Boardwalk date with Naimh and then playing \"boyfriend\" for a second time in one day on the double-date with Zofi. I was still working out all the ramifications of actually being Naimh's boyfriend while playing Zofi's boyfriend. And to be honest, I'd completely forgotten that Mother had given her a key.\n\nThe whole house was quiet when I came home. Mother evidently was still out for the evening. I went into my room, went straight to my walk-in closet, flipped on the light switch inside, and took off my suit jacket to hang it up. I didn't have many things that needed to be on hangers, so there had always been plenty of room on the rod. So you could understand why I was surprised to see that all of my clothes on hangers had been pushed to one side, and a half-dozen obviously female outfits now hung from the available hangers there. Looking down, there was also a new plastic 3-drawer storage cart in my closet, similarly filled with women's underwear, pajamas, and casual clothes.\n\nTHAT'S when I remembered what day it was, and I quickly poked my head out of the closet, my attention zeroing in on the bed and the strawberry-blonde pixie sitting upright against my headboard wearing a cute nightie.\n\n\"Surprised to see me?\" Belle asked brightly.\n\nI blinked and stammered, \"Forgot Mother gave you a key. Moving in?\" I gestured to her stuff in my closet.\n\n\"I figured I might as well bring some stuff over if I'm going to be spending more time here,\" she said with a shrug. \"I've got some stuff in your bathroom, too. That's okay, isn't it?\"\n\n\"Oh, it's great. No problem. Makes sense.\" I walked out of the closet, still wearing my shirt and tie. \"You have no idea how happy I am to see you.\"\n\nBelle frowned. \"Was the double-date with Zofi's parents that bad?\"\n\n\"What? No. I mean, it went... okay... I think. I've never had a 'Meet the parents' thing. I mean, other than that talk I had to have with your dad after he found out about us.\"\n\n\"Then why did you just say you were so happy to see me?\"\n\nI grinned at her while sitting down on the side of the bed next to her. \"Can't I just be happy to see you?\"\n\n\"Well if you'd walked in, noticed me sitting on your bed right away, and said, 'Hey, happy to see you!', I might've believed you. But you were lost in a zone with that furrowed-brow thing you do when you're thinking about something that's bothering you. And then you came out here and said, 'You have no idea how happy I am to see you.' There's a difference.\"\n\nI waggled my head. \"You may have a point.\"\n\n\"So what's wrong?\"\n\n\"I'll tell you later. Right now, would you terribly mind if I took your panties off and ate you out right now? Spending an evening with Zofi's parents not being able to do anything... and then having Zofi start a blowjob that we didn't finish... yeah, messed with my head a little bit.\"\n\nBelle frowned. \"Zofi started a blowjob you two didn't finish? What?\"\n\n\"I'll explain later. Panties please?\"\n\nBelle grinned and raised the hem of her nightie to reveal a completely bald pussy. \"Not wearing any. Oh, and you'll love this part even more.\" She rolled over in my bed and flipped up the back of her nightgown.\n\nAlthough I shouldn't have been surprised, I was still quite surprised, and my jaw dropped open in shock to see a little disk of hot pink plastic sticking out of Belle's teeny asshole. \"You're wearing a butt plug?\"\n\nShe giggled and rolled back over to face me. \"Just a thin one, a starter. Sam took me to this place downtown and helped me get a whole training set.\"\n\nWell sproing. My rock-hard erection was making quite a tent in my dress slacks.\n\nBelle giggled and reached for my zipper. As she fished my dick out through the flap, she chirped quite happily, \"I know you said you wanted to eat me out. But how about we skip that part and you let me finish the blowjob Zofi started, m'kay?\"\n\nHer mouth was already around my dick before I could verbally respond. Still, I rubbed my horny pixie's strawberry-blonde head and muttered, \"Uh... works for me.\"\n\n****\n\nIn the morning, Belle went back to her house while Mother and I had brunch together. Mother then left, and I relaxed in the family room watching the NFL playoffs while waiting for my girlfriend's arrival. Naimh had already told me she would come by the house around 12:30pm.\n\nIt was 12:28pm when the doorbell rang, and without even checking the peephole, I excitedly flung open the door and greeted, \"Hello, girlfriend!\"\n\nZofi stood immediately outside the door, absolutely beaming at me. \"Well, hello, boyfriend!\"\n\nI blinked in confusion. \"Zofi?\"\n\nNaimh suddenly popped into view, having been hiding just a few feet over to the side. \"Hello, boyfriend! Surpriiiise!!!\"\n\n\"What... how?\"\n\nThe girls giggled together as Zofi stepped through the door, wrapped me up in her arms, and gave me a passionate kiss. \"Mmm... I missed you, boyfriend.\"\n\nMoments later, Zofi stepped aside as Naimh wrapped me up in her arms and gave me a fierce kiss. \"Mmm... I missed you too, boyfriend.\"\n\nI blinked twice. \"What's going on?\"\n\nNaimh shrugged. \"Well we're BOTH your girlfriends now, aren't we?\"\n\n\"I... uhhh...\" I felt guilty for a moment, like I was somehow cheating on Naimh. Didn't I tell HER I was in love with her and so happy to be her boyfriend?\n\nThe redhead laughed, perhaps sensing my confusion. \"Relax, we all know your relationship with Zofi is just for show. I'm not jealous.\"\n\n\"Oh.\" I did relax.\n\n\"She called me last night to explain that she'd need you to play the role a little longer,\" Naimh explained.\n\n\"At least until my mom gets off my back,\" Zofi clarified. \"I'm not trying to interfere with your relationship.\"\n\n\"But she DID explain about the blowjob she never got to finish on account of her making the situation all weird.\"\n\n\"Sorry about that.\" Zofi looked apologetic.\n\n\"So I thought, 'Hey, invite her to join us so she can make it up to you!'\"\n\n\"Matty gets a hot threesome...\" Zofi said salaciously.\n\n\"We GIRLS get a hot threesome,\" Naimh chirped enthusiastically. \"After we make him pop in your mouth, I wanna try that tribbing thing you were doing with Sam.\"\n\n\"Oh, it's easy. You'll love it,\" Zofi declared.\n\n\"Can't wait!\" Naimh clapped her hands and did a little happy dance. She glanced up and down her body. \"But I'm wearing too many clothes right now. We're ALL wearing too many clothes. Hey Matty, wanna watch me taking off all of Zofi's clothes? With my teeth?\"\n\nZofi grinned at me. \"Your girlfriend has the BEST ideas.\"\n\nLet me just get this out of the way up front: Sunday was AWESOME.\n\n****\n\nThere are few things in life better than getting an amazing blowjob from an exquisitely beautiful young woman. There are even fewer things better than getting an amazing blowjob from TWO exquisitely beautiful young women at the same time. And watching two such gorgeous nubile teenage vixens such as Naimh and Zofi take turns bobbing their faces up and down my dick, lick their way up both sides at the same time, and wind up swapping spit and making out with each other at the top, often with my cockhead between them, was sheer heaven on earth.\n\nAnd our afternoon together was just beginning.\n\nDespite Naimh's proclamation that she would let me watch her taking off all of Zofi's clothes with her teeth, she didn't do so right away. Instead, the girls sat me down in the family room on my usual center cushion with the big tent in my shorts greeting them rather eagerly. Without further ado, Zofi pulled my shorts down, wrapped her left hand around my thick column of man meat, and wrapped her puffy lips around my dickhead. Naimh wound up joining Zofi on her knees, the girls started taking turns, and I've already explained the rest.\n\nThat said, after about five minutes, Naimh finally remembered what she was supposed to do, and the girls left my dick alone for a while so she could actually try removing Zofi's clothing with her teeth.\n\nIt's not easy.\n\nAt first, every time Naimh tried to lift up the hem of Zofi's sweater, it would get stuck under Zofi's boobs, she'd lose her grip, and the sweater would drop down. The girls laughed and had Zofi lie down. But once Zofi was flat on her back, friction with the floor made it impossible for Naimh to make any headway with the sweater from there, either. Finally, Zofi just said \"Fuck it\" and took her sweater off. At least then she could kneel upright and Naimh attempted to unclasp Zofi's bra with just her teeth.\n\nThe whole scene wasn't very erotic, but it was rather entertaining to watch. The girls were certainly having a good time, laughing like crazy. Finally, Naimh managed to unclasp the bra and pronounced the whole exercise a success. From there, both girls stripped themselves the rest of the way on their own, except for Zofi's panties, which Naimh told her to save. Sure enough, once Naimh had gotten naked, she had Zofi stand up, dug her teeth into the waistband of Zofi's black satin panties, and dragged them down the lissome brunette's long, lithe legs and off her feet.\n\n\"Ta-da!\" Naimh pronounced happily while thrusting her fists into the air, as if she'd just pulled off an impressive magic trick.\n\nAfter that, Zofi started going down on me again, but only for a minute or so. When Naimh took over, she wrapped her freckled Double-Ds around my shaft and started giving me a titfuck. Watching the rapturous look in my eyes as my redheaded girlfriend pleasured me with her tits, Zofi wanted a turn doing the same for me to get me to look at her in the same way. And even though Zofi didn't quite have Naimh's massive rack, watching her press her 34Ds around my meat and hump her chest up and down solely for my gratification made me feel quite pampered indeed.\n\nIn the end though, I didn't want to stop at just blowjobs. I looked at my \"real\" girlfriend and moaned that I wanted to be inside her. So Naimh and Zofi exchanged a quick look of confirmation, and the Irish redhead quickly climbed into my lap, but faced away from me so that Zofi would have a perfect view between our spread legs of my thick column of man meat disappearing into Naimh's fuzzy red pussy.\n\nAnd of course, so that Zofi would have a perfect angle to push her head between our spread legs and lick at the joining of my thick column of man meat where it disappeared into Naimh's fuzzy red pussy.\n\nNaimh moaned and let herself fall back against my chest while Zofi went to work on her clit and I simultaneously used the springiness of the couch to work my dick in and out of her about an inch at a time. I didn't want to jostle her body around and make Naimh's clit too much of a moving target. Instead, I nibbled on my girlfriend's neck and busied myself playing with her big titties.\n\nTogether, Zofi and I made Naimh cum. The busty Irish bombshell's breathing turned shallow and sped up dramatically, she wriggled and writhed in my arms, and in the end her head snapped back over my left shoulder as she bucked her crotch forward into the brunette's face. I had to forcibly pin her body down against my dick, grabbing her tits as handholds to keep her from accidentally bucking off me.\n\nAfter that, Naimh toppled off me to recover from her orgasm. Grinning broadly, Zofi quickly surrounded my lonely cock with her mouth, ensuring it didn't feel lonely for long. And since I was pretty close to popping off already, it didn't take long for me to finally complete the blowjob she'd started last night in the van.",
        "\"Holy crap, Zofi...\" I groaned. \"You're gonna make me cum.\"\n\nMy words, in that tone, seemed to spur her on more than anything else. I'd never forgotten what she'd said about not really having the urge to suck my cock for its own sake. Rather, she wanted to see the way I looked at her, to see my expression and my desire for her reflected in my eyes. Apparently hearing me moan her name and groan how SHE was going to make me cum energized her just as much, and her bright blue eyes sparkled in excitement.\n\nShe started really going to town on my dick, her head bobbing up and down quite rapidly. I felt her bring me right up to the edge, and when I couldn't take it anymore, I automatically set my hand atop her head and pushed her down, trying to force all of my cock into her throat.\n\nShe accepted my thrust with aplomb. She could feel me trembling with need as I thrust upward, and she moaned in anticipation. This exquisitely beautiful creature let my cockhead into her throat just a bit, and swallowed reflexively, her throat muscles milking me for my pearly seed.\n\n\"Zoooofffffiiiiiii...\" I moaned as I felt my balls suddenly evacuate their contents.\n\nShe pulled her head back up so that just my mushroom head remained behind her lips, and as the first jets of hot jizz splashed against the inside of her mouth, she started swallowing and didn't stop until she'd taken every little bit I could give her.\n\nEven when my batteries ran dry and I collapsed back against the couch, the exquisitely beautiful brunette nursed my spent dick while staring up at me the whole time with those luminous blue eyes, her irises seeming to smile on their own at the rapturous expression of gratitude and satisfaction that dominated my face.\n\n\"After all that time with you never quite ready to go down on him,\" Naimh commented, \"it's such a thrill to see you swallow his sperm like that.\"\n\nWheezing, I added, \"Couldn't agree more myself.\"\n\nZofi sat up straight, rather primly wiped her lips with her fingertips, and gave me a coy smile. \"Did I please you, boyfriend?\"\n\n\"You know you did, girlfriend,\" I replied warmly, reaching out to caress her cheek.\n\n\"Oooh! Oooh! Tribbing time?\" Naimh asked excitedly.\n\nZofi giggled. \"Of course!\"\n\n****\n\n\"Ohhh, Neevie... You're so fucking hot!\" Zofi moaned while grinding her clit against the redhead's clit.\n\n\"Hey, that's my line!\" I laughed from my spot against the headboard, gazing down in awe at the two gorgeous babes writhing together in erotic ecstasy.\n\n\"Mmm, you're the one who's fucking hot,\" Naimh replied in a husky tone, humping her clit right back before wrapping up Zofi's head in her arms and drawing their two exquisitely beautiful faces together for a wet, sloppy kiss.\n\n\"I never knew you were so into girls,\" Zofi moaned between lip locks. \"I mean, I knew you were curious when you started playing with me and Sam, but... damn girl.\"\n\n\"It's Matty...\" Naimh breathed, kissing her way along Zofi's jawline. \"He brings out the best in me.\"\n\n\"Lucky him,\" Zofi groaned, turning her head so she could capture Naimh's lips again. They made out for a few more seconds before she pulled back and whimpered, \"You're making me so horny I'm getting REALLY tempted to let him fuck me.\"\n\n\"Neevie,\" I proclaimed in an overly dramatic tone, \"I order you to get Zofi horny enough she'll let me fuck her.\"\n\nThe girls laughed at that, sensing the humor in my voice. I mean, yeah, I wanted to fuck Zofi. But at the same time, I had staked my entire reputation with these girls on my dependability to never take advantage of them when their defenses were down. I still remembered Zofi reassuring me I'd made the right decision in not deflowering Alice during the drunken orgy at the end of winter break, and I wouldn't betray her trust today either.\n\nMaybe one day she'd be ready. Until then, I could afford to be patient.\n\nAs exciting as it was to see such gorgeous creatures as Naimh and Zofi scissoring, the act did not directly lead into another round of sex. See, after the two girls managed to bring each other to new orgasms by grinding their clits together, Zofi checked the clock and realized the game had already started.\n\nShe asked me to turn it on, and the next thing I knew, I sat naked on the couch watching football while Zofi stroked my dick in her left hand and I fondled her spectacular body in return.\n\nNaimh was... less enthused. \"I still don't get why Americans call this 'football'. The ball rarely ever touches somebody's foot.\"\n\nFive minutes later, my Irish girlfriend decided she'd rather kneel in front of me and play with my dick instead of watch the game. I admit it was quite a surreal experience to be getting a blowjob from a gorgeous naked redhead with a gorgeous naked brunette cuddled against my side while watching a football game. That said, the game was a boring, low-scoring affair, and eventually neither Zofi nor I had further interest in it either, not with hot naked teenagers to continue playing with. We'd catch the highlights later.\n\nAt that point, the girls decided we'd be more comfortable in my bedroom, so we gathered our clothes and went upstairs. I decided it was past time that I returned the oral favors and started going down on Naimh (figuring that my \"real\" girlfriend deserved to go first). But after only a couple of minutes, she said that Zofi had already eaten her to an orgasm and that she hadn't invited Zofi to join us just to be a spectator, so I switched over to the brunette instead. Of course, a minute later, Zofi invited Naimh to sit on her face, so the redhead wound up getting eaten out after all.\n\nThe three of us tried out several other positions. I lay on my back with Naimh riding my cock cowgirl while Zofi sat on my face so the two could make out and paw at each other's breasts. Zofi reclined against my headboard with Naimh's head in her crotch and me fucking Naimh from behind. I even fucked Naimh face-to-face while we lay on our sides, our legs scissored together and Naimh grinding her clit against my pelvic bone. Naimh said brightly that I was effectively tribbing with her, and meanwhile Zofi completed the sandwich by spooning herself behind Naimh, nibbling on the redhead's neck and reaching around to squeeze and play with Naimh's nipples.\n\nNaimh felt bad that she was the only one getting fucked, and once asked Zofi if the brunette was SURE she wasn't ready to have 'real sex'. \"I brought you here to share 'our' boyfriend after all,\" she reasoned.\n\n\"Don't worry about me.\" Zofi laughed. \"The way I see it, Matty is sharing his girlfriend with ME.\"\n\nSo with that in mind, Zofi and I teamed up to try and maximize Naimh's pleasure.\n\nI fucked Naimh missionary style while Zofi kissed her upside-down and tweaked the redhead's nipples. The girls then parked themselves face-to-face on their sides so they could make out more comfortably while I spooned my girlfriend and long-dicked her from behind. And then we rolled over so that Zofi was flat on her back, Naimh was right on top of her with their big tits crushed together, and I continued sawing my cock in and out of Naimh doggy-style.\n\n\"Mmm, I wanna eat you again,\" Zofi then breathed, her blue eyes glittering. \"I wanna wrap my lips around your clitty and suck on that little nub while watching Matty's big dick pulsing deep inside your cunt from up close.\"\n\nNaimh laughed. \"Works for me.\"\n\nWe paused so Zofi could re-position herself in a sixty-nine. Naimh actually started going down on her first, making the brunette squeak and get distracted, but after gasping and moaning for a minute, Zofi finally grabbed Naimh's ass and brought it down a little lower so she could start tonguing the redhead's clit.\n\nEvery now and again, she'd lick my cock, too. Twice, she had me pull out of Naimh's pussy entirely and tugged my dick down so she could suck on as much of my schlong as she could fit into her mouth before feeding me back inside my girlfriend's cunt.\n\nThe position was fun, but the mental high was even better. Just the idea of fucking my \"two girlfriends\" while they sixty-nined - switching back and forth from one girlfriend's pussy to the other girlfriend's mouth - was incredibly arousing, and I told myself I could really get used to this. But when I sped up and started pumping Naimh's pussy a little harder, Zofi abruptly pushed Naimh's crotch up and started laughing.\n\n\"What?\" Naimh called, picking her head up.\n\n\"His balls just hit me in the face!\" Zofi cracked up. \"Again!\"\n\nMy girlfriend glanced back, looking at the geometry of our positions for a second. Her eyes glittered, and when she stared at me with a familiar expression on her face, I already knew what she was going to say before she said it.\n\n\"I need you in my arse,\" she intoned, green eyes sparkling.\n\nI was already pulling out and started heading for my nightstand to grab the lube. Fifteen seconds later, Zofi looked upside-down at me, watching with bright blue eyes as I squirted a fat glob of lube against my Irish girlfriend's anus. That was all we really needed now that she'd gotten used to her anal chute being stretched like this. And after rubbing my erect cockhead against that glob to get myself coated, I gripped my girlfriend's hips, leaned forward with my weight, and popped myself through her sphincter as she exhaled slowly to allow my entrance.\n\nI climbed atop the mattress, elevating myself higher up Naimh's body and drilling down like an oil derrick. This kept my balls swinging safely up and away from Zofi's face, the three of us now stacked flat one on top of the other like a sandwich. Zofi was on the bottom, her face in Naimh's pussy. Naimh had my heavy weight pressing against her back while she had her face in Zofi's pussy. And I hugged both of them, not quite kneeling but not standing up either, in an oddly crouched position that nevertheless let me cornhole the hell out of my girlfriend's tight \"arsehole\", driving my dick into the depths of her bowels over and over again while the two busty babes beneath me moaned into each other's cunts.\n\nIt didn't take me long to cum. The room was filled with muffled moans of \"Mmph!\" and \"Ungh!\" and \"Rrrghh!\" The three of us pulsed together like some kind of Frankenstein creature, undulating with an awkward, jerky rhythm that was never in perfect sync and yet just worked out.\n\nFinally, I couldn't take it anymore. My anal queen's ass just felt too good, and I started groaning, \"Neevie... Neevie... So goooooooood. Gonna cum. Gonna fill your ass with all my cum. Ohmigawd you feel so goooooooood.\"\n\nPicking her head up out of Zofi's crotch, my lover moaned right back. \"Yes, baby, yes! Fill me! Fulfill me! Violate my poor little arsehole! Blast my bowels with all your nasty sperm! Fuck me and fill me and yes, yes, YES, YES! AAAAUUUUGGGGHHH!!!\"\n\nNaimh's entire anal chute squeezed my swollen schlong as she clenched and came, her climax cascading up and down the length of her body in muscle spasms that milked my shaft for my scalding hot semen.\n\n\"AAAAUUUUGGGGHHH!!!\" I groaned gutturally in sympathy with her orgasmic scream as I began dropping jizz bombs into the very depths of my girlfriend's rectal cavity. And I whimpered and moaned and twitched until I'd filled up her juicy round butt with everything I had to give.\n\nEventually, I collapsed, exhausted from my exertions.\n\nNaimh groaned, and I felt her knees and elbows giving way as well.\n\nPoor Zofi on the bottom of us started tapping my ass, wheezing, \"You guys are fucking HEAVY.\"\n\nChuckling, I finally managed to extract my spent cock from my girlfriend's anus and then flipped over onto my back.\n\n\"Fuck you two are amazing,\" Naimh gasped as she similarly started to roll over, but Zofi grabbed her butt and held her in the sixty-nine.\n\n\"Waitaminute,\" Zofi muttered. \"I think I see his cum leaking out of you.\"\n\nA moment later, Naimh inhaled sharply as she felt Zofi's tongue go back to work, and she screeched, \"Zofi! That's dribbling out of my ASS!\"\n\n\"Huh,\" Zofi commented. \"Maybe Belle's onto something. Doesn't taste any different from a regular creampie. And I really DO love the way Matty's eyes are bugging out right now. Although in fairness, I don't have my tongue inside your ass the way Belle was doing to Sam; it's just dripping down onto your pussy.\"\n\nZofi went back to licking up the trail.\n\nNaimh glanced over at me. \"He really DOES look quite intoxicated watching you do that. Looks like we need a threesome with Sam so I can try eating an anal creampie. Unless we can talk one of the other girls into doing it first.\"\n\nNow my eyes were REALLY bugged out.\n\nZofi laughed. \"Don't look at me. Maybe Belle or Mari.\"\n\nNaimh set her cheek down and sighed. \"C'mon. Let's hop in the shower. You think his backrubs are good? You haven't lived until you've felt him giving you a full body massage beneath the warm spray. Oooh, and I've never made out with another girl in the shower before!\"\n\nZofi took one last slurp and grinned at me. \"Your girlfriend has the BEST ideas.\""
    ],
    "authorname": "bluedragonauthor",
    "tags": [
        "anal",
        "anal sex",
        "18-year-old",
        "teenagers",
        "harem",
        "mff",
        "threesome",
        "big breasts",
        "creampie",
        "high school"
    ],
    "category": "Group Sex",
    "url": "https://www.literotica.com/s/the-big-tits-club-ch-23-24"
}
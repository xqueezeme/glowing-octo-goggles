{
    "title": "Fondest Dreams Ch. 07",
    "pages": [
        "Written by lilgirlsix and Archangel_M\n\nEdited by Doctime\n\n~-~-~-~-~-~-~-~-~\n\nlilgirlsix: This is the darkest of the chapters so be forewarned. Anyone who has read The Destruction of the Vlkolak knows what has to happen.\n\n~-~-~-~-~-~-~-~-~\n\nArchangel_M: :'(\n\nThe music suggestion for this chapter is \"Book of Days\" by Enya. The English version, not the Gaelic version.\n\n~-~-~-~-~-~-~-~-~\n\nGlossary:\n\n- Amor enim et iustitiam! -- Latin -- \"For love and justice!\"\n\n- Verdammt -- German -- \"Damn it!\"\n\n- Schei\u00dfdreck -- German -- \"Bullshit\" (literally: \"shit dirt\")\n\n- Kriegszauberst\u00e4be -- German -- magical battle-wands (literally: \"war magic sticks\").\n\n- Mithral -- Dwarven -- truesilver [see Chapter 1 glossary]\n\nSt\u00fcck Schei\u00dfe -- German -- \"piece of shit\"\n\n~-~-~-~-~-~-~-~-~\n\n{Language Note: Hungarian dialogue is in plaintext, &lt;and German dialogue is in carrots.&gt; Thanks once again to Fr\u00e4ulein Anne for her help with the German!}\n\n~-~-~-~-~-~-~-~\n\nSeptember 26, 1858\n\nZs\u00e1lya knew that her time was running very short. The moment she entered her dream, the demon wolf was waiting, growling and looking at her with those beady black eyes. Not even a few minutes' reprieve anymore. He would come for her in the waking world, very soon.\n\nGritting her teeth, Zs\u00e1lya marshaled her courage and focused as Wilhelm had taught her. She bent her will upon the large tree the wolf was standing under. With a thunderous 'crack' it broke at the base, toppling onto the demon wolf and crushing it into the snow that shrouded the forest. This is becoming easier, she thought in relief.\n\nThen she heard a low growl from behind her. And from her left. And from her right.\n\nZs\u00e1lya's heart sank as she turned to see three of the evil Werewolf, advancing on her like a pack hunting a doe. What was this? There had never been more than one of him before. It made no sense. Still, she thought with sudden resolution, I will not be a victim anymore, not in my own dreams. He may be destined to kill me in the waking world, but this is my place, not his!\n\nShe was beginning to focus, in order to destroy these new tormentors when the sky above her went dark, and a chorus of new growls came to her ears. Black storm clouds blotted out the sun, and giant forks of lightning struck the distant mountains. All around her, Zs\u00e1lya saw a vast pack of identical black wolves stalking from the trees, advancing across the meadow from all sides.\n\nHer courage failed her, and she sank to the ground, sobbing. It really is time. I... \"I do not want to die!!!\" she screamed to the heavens. \"I want to live, I want to stay with Willi!\"\n\nThe black wolves came closer. She could smell their rancid scent, and felt hot breath on the back of her neck as they savored her fear. Zs\u00e1lya squeezed her eyes shut, waiting to see if their attack would send her back to the waking world or if she would have to stay and suffer.\n\nA circle of leaping flames sprang into being around her. The heat was so intense that Zs\u00e1lya instinctively shifted and curled into a ball, her eyes squeezed tight against the inferno. She was so confused and scared, and she retreated into the depths of her own mind, hiding behind her wolf.\n\n\"Amor enim et iustitiam!!!\" a very familiar voice boomed across the meadow.\n\nWilli? Zs\u00e1lya's heart leaped, and she opened her eyes a bit. Sure enough, there was her love, silver armor shining and sword in hand. His eyes glowed with that strange blue light, and this time Zs\u00e1lya and her wolf rejoiced instead of feared. Our male is here, her wolf exulted. He will protect us!\n\nAs if to give the truth to Zs\u00e1lya's wolf, Wilhelm conjured a ball of flame in his open left hand and threw it at a cluster of wolves. It exploded with a hellish roar, sending roasted chunks of flesh flying everywhere. \"&lt;Come and die, dogs! There are not enough demons in Hell to take my love from me!&gt;\" Wilhelm roared, his voice echoing from the woods and skies. \"&lt;Burn and die!&gt;\"\n\nZs\u00e1lya watched through the curtain of flame as her knight in shining armor hurled himself against the army of Werewolves. His sword seemed an extension of his arm, he hurled balls of fire from his hand like so many pine cones, and jets of molten rock burst from the ground at his whim. The demon wolves fell before him in droves, and Zs\u00e1lya and her wolf rejoiced at every one. Her beloved seemed more a force than a human, untouchable and invincible, and all of his power was meant only to safeguard her. The sensation Zs\u00e1lya experienced as she watched her lover literally moving heaven and earth to protect her was indescribable.\n\nHow long he fought Zs\u00e1lya could not tell, but it seemed forever. No matter how many matte-black wolves Wilhelm slew, more always came forth, a pestilence that came bounding out of the forest from all sides. Though he did not tire as he would in the waking world, and not a single foe managed to harm him, Zs\u00e1lya could feel Willi's mounting annoyance. At last his temper snapped.\n\n\"&lt;That is it. Everybody dies!&gt;\" Raising his sword-point and open hand to the sky, Wilhelm closed his blue eyes, ignoring the baying horde coming at him from all sides. Before Zs\u00e1lya's astonished gaze, the black storm clouds overhead all rushed inwards, swirling together into a massive vortex centered over her.\n\nThen the lightning came forth.\n\nMassive thunderbolts rained down all around, striking some wolves dead and tearing the rest apart with their overlapping shockwaves. Zs\u00e1lya's mind nearly shut down and she froze in catatonic terror. She knew she should have been destroyed as well, but something kept the thunderclaps from slamming into her and muted the apocalyptic noise to a dull roar. It didn't matter. This was the end of the world, and she was going to die. She curled into a furry little ball and buried her face in the snow, waiting for the end.\n\nZs\u00e1lya was deep in shock when strong arms gently picked her out of the snow, and was only dimly aware of soft kisses laid on her forehead and behind her ears. She did notice when the noise and the flashing lights stopped. Her body went slack with relief, and she knew no more.\n\n~-~-~-~-~-~-~-~\n\nZs\u00e1lya awoke in stages, drifting up towards the surface of consciousness. As she floated higher, the little wolf realized she was lying in a soft bed, with a warm presence and a pleasant scent all around her that she instinctively found comforting. Specifics were fuzzy, distant things, and she did not pursue them. She was content to revel in the peace of the moment as she gradually drifted out of the deep chasm into which her fear had thrown her.\n\nWhen her blue eyes fluttered open, Zs\u00e1lya beheld walls of black stone, tapestries and paintings, and dark wood furniture. It took a moment for her mind to recognize this place: Willi's bedroom, in his family castle. She tried to roll over and realized that she was still in her wolf form, and that Willi was cuddled up against her back. He had an arm draped over her, and was idly stroking her belly.\n\n\"You are back,\" he murmured, seeing her blue eyes moving. \"Guten Abend, mein kleiner Wolf.\"\n\nZs\u00e1lya shifted back into human form and turned to face her lover, kissing him slowly and deeply as she wrapped herself around him. \"You came for me,\" she whispered when the kiss ended. \"You saved me.\"\n\n\"Of course I did, my love. But are you alright? I feared that I had frightened you to death.\" His strong arms wrapped tighter around Zs\u00e1lya's slim body, cradling her as he pressed his face into the crook of her neck. \"I am so sorry, Zs\u00e1lya,\" he whispered. \"Four Below, I am so sorry!\"\n\n\"Willi,\" she protested, pushing him away so she could look into his gorgeous blue eyes, \"you protected me from an army of evil Werewolves. You have nothing to apologize for, my darling.\" To make her point she 'thought' his clothes away and pressed her naked body against his, running her nails lightly along his back in the way she knew he liked. \"Thank you. Thank you so much!\"\n\nWilhelm laughed and rolled onto his back, bringing her up to lie on top of him. \"You are most welcome. No,\" he chided as her hands began to stray, \"no frisking, meine Liebe. The time for secrets between us has passed. You will tell me what is happening.\"\n\n\"I have told you... I cannot speak of these things to anyone outside the pack. It is forbidden.\"\n\nWilli cradled her face in his hands and just stared at her.\n\n\"I cannot!\" Zs\u00e1lya's anguish was obvious.\n\n\"I did not want it to come to this.\" Wilhelm sighed. \"Zs\u00e1lya, my love, you will tell me what is going on or I will pry the knowledge from your mind.\"\n\n\"You can do that?\"\n\n\"Yes, I can. It will not damage you, but if you resist it will be extremely painful. And I know that your wolf will resist. Please tell me, mein kleiner Wolf. I hate to cause you pain, but this has gone too far. My duty to protect you is now more important.\"\n\nZs\u00e1lya looked down at the love of her life, tears leaking from her eyes. Willi seemed not to notice as the salty droplets fell upon his cheeks. He just stroked her cheeks and looked at her, giving her time to think, to decide.\n\nHer wolf was insistent that they keep their silence. The Alpha has ordered us! We cannot disobey, even for our male.\n\nWhat does it matter now? Zs\u00e1lya responded. It is too late for him to try to interfere, and you know that he will make good on his threat to pry it out of us. We have suffered enough. And Willi deserves to know!\n\nThe wolf did not like it. At all. But she stood aside, retreating into the back of Zs\u00e1lya's mind and curling up.\n\nZs\u00e1lya lowered her head and kissed Willi, no longer trying to control her tears. \"I am going to be murdered,\" she whispered, almost too softly to hear.\n\n\"WAS?!!\"\n\nShe laid a finger across his lips, quieting him. \"Orsolya and I... we see things...\"\n\n~-~-~-~-~-~-~-~\n\nThere were several minutes of absolute silence once Zs\u00e1lya finished her explanation. Willi listened to her with rapt attention, holding her body tightly against his. His expression was completely blank, and his eyes were like two chips of ice. She had no idea what he was thinking. At last, he lifted her and set her ever so gently on the bed before rising to his feet and walking to the far side of the room. His head was bowed, and he seemed to be deep in thought.\n\nWhen he turned, his eyes were shining with a jumble of emotions. \"Verdammt, woman!\" he barked, visibly struggling to control himself. \"Let me get this straight: you take one of the most powerful men in Europe for a lover, and do not tell him of a vision of warning such as this?! Is there anything at all in your pretty little head, Zs\u00e1lya?\"\n\nZs\u00e1lya recoiled as if he had slapped her, wrapping the covers around her naked body. \"Willi... my father... he is the Alpha. He ordered me\u2014\"\n\n\"Schei\u00dfdreck.\" Wilhelm stalked around to Zs\u00e1lya's side of the bed, towering over her. When he reached for her Zs\u00e1lya let out a little shriek, thinking he was going to hurt her. But he just lifted her into his arms and fairly crushed her against him with the force of his hug. \"Four Below, girl, do you not trust me?\"\n\nIt took a minute for Zs\u00e1lya to find her voice. \"It is not about trust. A wolf cannot disobey her Alpha.\"\n\n\"And yet you have just done so.\"\n\n\"What? I\u2014\"\n\n\"You possess free will, just as humans do. You can disobey your alpha, as can your wolf. The fact that few Werewolves ever choose to disobey such orders does not make this less true.\"\n\n\"None of that matters. I have seen my own death, Willi.\" Zs\u00e1lya's voice broke. \"It will come to pass.\" She began sobbing into his shoulder.\n\n\"Nein. You will not die, Zs\u00e1lya, not before your time.\"\n\n\"There is nothing you can do.\"\n\n\"Of course there is. I shall come and get you.\"\n\n\"What? When?\"\n\n\"Right now. I shall wake and set out immediately.\" Willi began to set her gently back onto the bed.\n\n\"No! Please, do not go, Willi! Do not leave me!\" Zs\u00e1lya wrapped her arms tightly around Willi's neck and clung to him, consumed with fear that he would be hurt or killed if he tried to interfere with the prophecy. \"This is most likely our last time together,\" she whispered. \"Stay with me, my darling. Hold me. Love me.\"\n\nWilhelm set her on the bed and gently pried her arms loose. \"You know I cannot do that, my love. I will not sit idle while you are in danger.\" He bowed his head for a moment, then clapped his hands twice.\n\nTo Zs\u00e1lya's astonishment, the door opened and towering figures in shining metal armor began to file into the bedroom. She squeaked and pulled the covers up to cover herself again.\n\n\"I will maintain the dream until you wake. The... evil should not be able to reach you here,\" Wilhelm told her. \"These guards will protect you if it does. You can go anywhere and do anything you wish, of course.\"\n\n\"Please, will you stay with me?\" Zs\u00e1lya whispered. She looked truly pitiable, curled up in his bed with tears streaking her pale cheeks.\n\nWilhelm's heart nearly broke, but he held firm. \"I am coming for you,\" he told her simply.\n\nZs\u00e1lya's gaze dropped. \"Then... goodbye, Willi. I love you.\"\n\n\"I love you too, my little black-furred angel,\" he told her, leaning down for one last kiss. \"And I will not say goodbye. I will see you soon.\" He stroked her long hair and laid a final, loving kiss on her forehead.\n\nThen he straightened up and vanished.\n\nZs\u00e1lya stared at the spot where he had been for many minutes, shaking and feeling the tears burn their way down her face. Finally, she turned to the tall figures standing mute, faceless behind their helms. \"Could you all... wait outside, please?\" she choked out. Amazingly, the guards complied, filing out of the bedroom.\n\nWhen the door closed behind them Zs\u00e1lya collapsed into the warm, soft bed, pressing her face into Willi's pillow to inhale his scent. Huge, shuddering sobs wracked her body as she cried and cried.\n\n~-~-~-~-~-~-~-~\n\n\"&lt;The hour is late. Where are you off to, Master Wilhelm?&gt;\"\n\nWilhelm turned and glared at the figure standing in the corridor behind him. \"&lt;Hungary,&gt;\" he replied shortly, turning and striding down the corridors towards Schloss Helsing's Southeast Tower. Wilhelm had donned his Order battle-dress, enchanted chainmail from neck to toe topped with a white tabard and cape, both emblazoned with the Order's blue dodecagram. His swordbelt was girt about his waist, supporting a holstered revolver and three Kriegszauberst\u00e4be in leather sheaths, as well as his enchanted blade. He was checking his throwing knives and slotting them into wrist sheaths as he walked.\n\nSenzir, the Schloss' butler, matched Wilhelm's pace, staying a respectful step behind. He cut an odd figure, his unearthly violet hair and vivid purple eyes contrasting with his very traditional and normal butler's attire. Formerly a demon, Senzir was exquisitely effective at keeping the Schloss in order, but was not pleasant company. \"&lt;Finally off to meet the woman you have been pining over?&gt;\" he asked, openly needling Wilhelm.\n\nMaster Wilhelm responded with a blast of kinetic force that knocked Senzir back a step. \"&lt;She is in grave danger,&gt;\" he snarled over his shoulder as he walked away, &lt;and I will protect her.&gt; He felt no guilt about attacking the butler; Senzir was nigh-indestructible, and Wilhelm knew that he hadn't even caused him pain. It was a useful release, though, and it helped him think.\n\n\"&lt;What shall I tell your father?&gt;\" Senzir called after Wilhelm as he dusted himself off.\n\n\"&lt;The truth!&gt;\"\n\nIn his agitated state, the climb up the tower's long spiral staircase was as nothing. Finally emerging on the flat top of the tower, Wilhelm took a fraction of a second to feel the pitch-black night around him, gauging the wind and the weather. Satisfied, he shifted into his eagle form and launched himself off the tower, his brown-feathered wings beating the air powerfully and launching him out over the turbulent waves of the North Sea. He set his course south-southwest.\n\n~-~-~-~-~-~-~-~\n\nSeptember 27, 1858\n\nWilhelm's awareness was a symphony of pain as he streaked southwards down the course of the River Elbe, the rising sun on his left. Every muscle in his avian body screamed its fatigue, begging to be allowed to rest. Eagles were meant to effect long journeys by soaring, but that was not nearly fast enough. Wilhelm's wings and shoulders burned like hellfire as he beat them in a steady, powerful rhythm. Pain was nothing. Fatigue was nothing. Zs\u00e1lya was everything.\n\nThe young mage took a moment to wish that magical teleportation was possible. That would have saved him a great deal of time and pain, but the Earth's ley field destabilized any local Gate before it could even finish forming. It was possible to make a Gate to a different plane of existence\u2014to Heaven or to Hell, for instance\u2014but even a mage of Wilhelm's power couldn't make one by himself.\n\nWilhelm thrust these idle thoughts aside. All that mattered was to get to Zs\u00e1lya, to protect her. Even if he dropped dead afterwards like Pheidippides, it would not matter. That predator, that b\u00f6se Wolf, would not harm a hair on his beloved's head. Not while he drew breath.\n\nBut all the determination in the world would be for naught if he could not reach her in time. Snapping his beak in frustration, Wilhelm drew even more magical power from the wind and from the flow of the river beneath him, channeling the energy into his muscles to keep them from failing. He redoubled his wing beats, tearing across the sky like an arrow from a bow.\n\n&lt;I am coming, mein kleiner Wolf,&gt; he thought. &lt;I am coming!&gt;\n\n~-~-~-~-~-~-~-~\n\n&lt;Almost there. Almost there.&gt; The single idea repeated endlessly in Wilhelm's tired mind, his thoughts bent upon Zs\u00e1lya's. He had first touched her mind two hours before, and was heading straight for it with the speed and surety of a thunderbolt. It was much harder to read her in the waking world, especially at this distance. Still, Wilhelm had thought he felt arousal, punctuated with bursts of ecstasy. &lt;Her sister and her mate must be making love again,&gt; he thought, his first bit of levity since the previous night.\n\nAnd then it hit him like a knife in the soul: terror, a horrible sense of violation, desperation to escape. Frantically, Wilhelm reached out, trying to let Zs\u00e1lya know that he was nearly there. But he could not make himself heard over the 'noise' of her fear.\n\nScreeching a battlecry to the heavens, Wilhelm drew in far more power than was safe, pushing his aquiline form past all mortal limits of exertion. The landscape below was now very familiar. Cresting a rise, his eagle's eyes spied two black figures moving against the snow, half a mile below.\n\nWilhelm tucked his wings tight against his body and dove.\n\nNow he could easily recognize his angel as she ran, fleeing from the matte-black wolf whose echoes he had slain in her dreams each night since meeting her. Again he tried to get through to her mind, and again he was rebuffed by her raw terror.\n\nHe saw her heading for the cliff.\n\nWilhelm's screech echoed up and down the valley as he watched the love of his life plunge to her death. He tried desperately to catch her with his magic, or at least to slow her fall, but he was much too tired and still too far away. Blackest despair enveloped his heart, and he had to look away from Zs\u00e1lya's huddled, broken form.",
        "His gaze alit upon the matte-black wolf, standing at the top of the cliff and gazing down at his dead victim. Then the wolf turned and loped away, clearly not wanting to be here when her pack arrived. Wilhelm's heart burst into a blaze of anger, a rage such as he had never known. It burned his despair away, and made him a weapon aimed at the heart of the Schwein who had murdered his beloved.\n\nThe great eagle gave chase, diving at the fleeing Werewolf and screaming his rage to the Heavens and the Hells. Shifting back into his own form, which was armed to the teeth, never occurred to Wilhelm; his fury was absolute and all-consuming. He landed full upon the running Were's back, digging his talons deep into flesh and muscle as his beak snapped and tore at the back of his neck. Seeing red, Wilhelm rejoiced in the feeling of hot blood gushing into his mouth and soaking the golden feathers of his head and neck.\n\nInstinctively, the wolf shook himself from side to side, trying to dislodge the unexpected attacker. Wilhelm's talons were too deep in his hide, though, and he only succeeded in opening the wounds wider. Next, the wolf pivoted and used his momentum to slam the eagle headfirst into the large tree he was passing. That worked.\n\nSuns burst in front of Wilhelm's eyes, and his talons went slack of their own accord. The eagle came loose as the wolf pulled away, falling into the snow and lying there, stunned and bruised.\n\nWilhelm gathered every bit of magical energy left to him and reached out after his fleeing foe, seeking to tear his worthless body limb from limb and reduce the scraps to ash. It was not to be; blackness rushed up to smother his mind.\n\n&lt;Fuck! I will chase you to the ends of the earth, dog! You will wish you had never been born!!!&gt;\n\nThe spell dissolved in a harmless green-blue flash as unconsciousness claimed him.\n\n~-~-~-~-~-~-~-~\n\nWilhelm's feathered head pounded like a cannonade. He slowly took stock, blinking up at the pine boughs overhead. It took but a moment for him to remember why he was an eagle, lying on his back in the snow. He immediately wished to forget. &lt;Mein Gott... Zs\u00e1lya... my darling Zs\u00e1lya...&gt;\n\nFighting through great pain in mind, body, and soul, Wilhelm mentally assessed his condition. Bruises everywhere, overexerted muscles, and what felt like a mild concussion. He would live. Carefully and awkwardly he flopped over onto his chest, unwilling to try shifting back to his native form just yet. Wilhelm now no longer felt despair... or anything else. All of his emotions had drained away, leaving a hollow void. It lent him a curious calm, which let him focus. His breath rasping with the effort, the eagle managed to stand, then to extend his wings.\n\nA normal eagle in his condition wouldn't have been able to take off. But, by summoning up a swift bit of wind for extra lift, Wilhelm managed to leave the ground on his aching wings. Judging by the sun, not much time had passed.\n\nA few minutes later, the eagle perched on a treetop and watched somberly as a procession of Weres passed below him. It was led by an alpha Werewolf, carrying the still body of Willi's beloved little black angel. He presumed that this alpha must be \u00c1rtur, her father. Zs\u00e1lya's fur looked just as lustrous as when he'd left her in his dream the previous night. Could it really have been less than a day ago? It seemed eons. He saw the graceful woman from Zs\u00e1lya's dream and realized that she was looking in his direction. &lt;Does she know what I really am?&gt;\n\nRegardless, Wilhelm knew that it was foolish and probably dangerous to approach these Weres, given the circumstances. He watched as they entered the largest building. He recognized it: the miniature castle from Zs\u00e1lya's dream. He now knew it to be her grandmother's home.\n\nPerching in a birch tree, Wilhelm's eyes did not leave the open doorway until he saw Zs\u00e1lya's father exit and slam the door behind him. He heard the Alpha's deep voice yelling orders to the omegas as they scurried through the compound. Even though he'd never met the Alpha, Wilhelm could clearly feel his grief over the loss of his precious daughter. He watched the Alpha carefully as he made his way across the compound and met with a tall male who looked just as grief-stricken. &lt;Could that be Guillame Bertrand?&gt; Wilhelm had not had a chance to meet the newest member of the Were Council before he had mysteriously vanished. This male matched the description exactly. Why had he come? Did it have something to do with the evil Werewolf that Zs\u00e1lya had dreamt of? Bertrand could not have known he would find his mate here. Still, that was a puzzle for another day.\n\nThe bird watched the compound and saw the return of a group of males, clearly brothers. As they came closer, he could see that each was the image of their father, the Alpha. He saw tears in their eyes and the heartbreak etched into their faces. Zs\u00e1lya had been truly loved by her family, and this confirmation injected a bit of welcome warmth into the emptiness of Wilhelm's heart. From their dusty appearance, he surmised they had been looking for their sister's killer, but their mannerisms and the lack of blood on them said that they had not been successful. Verdammt.\n\n~-~-~-~-~-~-~-~\n\nThe pyre had just been completed, and the body of the Alpha's daughter laid upon it. The pack was beginning to gather when those present witnessed an astonishing sight: a large brown-feathered bird flew down and landed on the pyre beside the still body.\n\nThinking the bird to be a carrion-eater, several omegas hurried forward to shoo it away. But the wolves stayed their hands and voices when they saw that it was a Golden Eagle, an unusual sight in their lands. Stranger still, this eagle's head and neck were red with fresh blood. All present wondered what kind of portent this might be.\n\nAs the pack members watched and wondered, the bloodstained eagle stared at the young female's body for many minutes. Then it hopped forward a step, closed its eyes, and lowered its head, resting it against that of the fallen wolf. It stayed like this, eyes shut, for a few moments. To those watching, it seemed quite a long time.\n\nThen it straightened itself and opened its eyes once more. The great eagle spread its wings and took off, disappearing into the trees.\n\n~-~-~-~-~-~-~-~\n\nAs he banked to resume his perch and watch Zs\u00e1lya's funeral, Wilhelm was startled to feel a mental invitation coming from the little castle, like a gentle tap upon his shoulder. He altered course, landed on the branch of a tree outside a bedroom window, and watched as Zs\u00e1lya's grandmother approached the window, opening it.\n\n\"Please, come in, young man. I would like to speak with you before you go.\" Leona showed no surprise at his form or his presence.\n\nThe eagle flew to the windowsill, then hopped to the floor. Colors swirled, the air shimmered, and before Leona stood a Knight-Commander of the Azure Star. He was bruised and battered, and his face and upper chest were smeared with Werewolf blood, staining his snow-white tabard. But the handsome young man stood erect and proud, gazing at the female Were before him with an air of polite respect.\n\nLeona sighed and came to stand in front of him, reaching her hand out to gently cup his face despite the blood. \"Thank you, young human. Thank you for loving my granddaughter. She loved you with all her heart, and I am so grateful for your presence in her life.\"\n\nAn ocean of grief came rushing up to fill the empty void in Wilhelm's chest. With a herculean effort he maintained his composure, but his voice was unsteady. \"I failed her! I should have been here in time to save her!\" His voice faded as the full implication of his own words sank in. \"I failed...\"\n\n\"You failed nothing. The night she was born I saw her fate, and there was nothing I could do to stop it. I tried. But nothing I did changed her future, as nothing you could do would change it either. But you gave her something I could not. You gave her hope; you gave her a love her father and I could not. And for that, the two of us will be forever grateful.\"\n\n\"Fate?\" Wilhelm snapped, jerking away from Leona's touch. \"Do not speak to me about fate!\" He spat the word from his mouth as though it was poisonous. \"There is no future but what we make for ourselves!\" he told Leona fervently, his voice rising on a renewed tide of rage. Not at Leona, but at himself, at das St\u00fcck Schei\u00dfe who had murdered Zs\u00e1lya, at the multiverse in general. \"Verdammt, mein kleiner Wolf,\" he growled, mostly to himself, \"you should have told me. I should have pressed harder. I should have... I could have...\"\n\nHis reserve broke, tears streaming down his face, making trails through the drying blood. Leona gathered him into her arms, patting the human's back through his cloak and armor as he sobbed on her shoulder. \"Hear me, child,\" Leona told him firmly when he pulled away. Her eyes caught his and held them fast, the weight of her age and wisdom pressing down upon him. \"The differences between our races run deeper than flesh. We are moved by forces that humans, even wise ones such as you, cannot hope to know or to understand. For us, fate and destiny are very real, and we trust in them... even in moments such as this.\"\n\n\"I... respect your beliefs, My Lady. But I disagree with you entirely.\"\n\nLeona gave him a soft, mysterious smile. \"Then be true to what you believe, human, and we shall do the same. Let us see what happens. Can we agree on that, at least?\"\n\n\"...Yes. Yes, we can, Frau Leona.\"\n\n\"So, you know my name. Might I know yours? I never asked Zs\u00e1lya, and she never told me.\"\n\n\"Ach, please forgive me. I am Wilhelm von Helsing, Knight-Commander of the Order of the Azure Star.\"\n\n\"I do not know of this Order,\" Leona remarked, glancing curiously over the twelve-pointed blue star emblazoned on Wilhelm's white tabard.\n\nThe human whirled in surprise when a voice chimed in from behind him: \"I do know of them. They do noble work.\" \u00c1rtur strode into the room and laid a massive hand on Willi's shoulder. \"Thank you, my boy. To know that Zs\u00e1lya was loved by a man such as you...\" \u00c1rtur choked back his tears, his voice catching in his throat. The giant of a man could not finish his thought before he broke down, his hand slipping from the human's shoulder. Leona ran to his side, holding the Alpha as he sobbed.\n\nWilhelm maintained a respectful silence, allowing this formidable Werewolf as much dignity as his grief would permit. For his part, Wilhelm had cried all his tears for now. He would cry again later, when the time came to properly mourn his little angel. But right now there were duties which demanded his attention.\n\n\"Alpha Kardos,\" Wilhelm began once \u00c1rtur had composed himself, \"Zs\u00e1lya led me to understand that this pack is in grave and imminent danger. The Order of the Azure Star stands ready to aid you. With your permission, I shall bring a force of Knights to this place to defend your pack.\"\n\n\"I deny this permission.\" \u00c1rtur's voice was polite but very firm, backed with a certainty of authority and purpose.\n\n\"Without our assistance, Alpha, the Vlkolak will die!\" Wilhelm protested, more shocked than upset at his refusal.\n\n\u00c1rtur nodded. \"So it must be. Rest assured that plans are in place that will permit many to survive, particularly females and cubs. Our people will live on... but this pack must die.\"\n\nWilhelm shook his head slowly from side to side. \"This is madness.\"\n\nLeona smiled and came forward to rest a hand on his shoulder. \"This is what it means to be a Were, Sir Wilhelm. Fear not for us. I see a bright destiny ahead of you, young human, a long road lit with the fires of knowledge, justice, and compassion. Look ahead and walk that road. Do not look behind and attempt to change that which must be.\"\n\nWilhelm found himself blushing. \"Thank you, My Lady. Alpha, your refusal is final?\" he asked formally, turning back to the massive male.\n\n\"It is,\" \u00c1rtur confirmed.\n\n\"Very well; I cannot force help upon you in this matter, and you know how to contact us if your wishes should change. If there is nothing else, I must take my leave. I have pressing business elsewhere.\"\n\n\"And what might that be?\" \u00c1rtur asked, the tiniest of smiles touching the corners of his mouth.\n\nWilhelm's eyes flashed. \"I will find den Hund who murdered Zs\u00e1lya, and repay him in kind.\" He reached up and brushed his fingers across the blood which still smeared his face. \"I have his scent,\" he told \u00c1rtur, looking the massive Alpha straight in the eye, the look of one equal to another.\n\n\u00c1rtur's mouth curved into a grim smile. \"Good hunting, my boy.\"\n\n\"Danke, mein Herr.\" Wilhelm gave \u00c1rtur and Leona a ghastly, death's-head grin. The bloodstains, the gleaming chainmail, and the rage burning in his blue eyes made the young human look like some avenging angel out of legend. \u00c1rtur's smile widened in reply, and Leona shivered at the thought of what this boy might do to the killer when he found him. She approved, but would have preferred not to dwell on the details.\n\nWilhelm turned and strode back to the window. The air shimmered, there was a soft flash, and the bloodied golden eagle launched itself out the open window. \u00c1rtur and Leona went to their pack, to begin Zs\u00e1lya's funeral.\n\n~-~-~-~-~-~-~-~"
    ],
    "authorname": "lilgirlsix",
    "tags": [
        "werewolf",
        "mage",
        "dreamwalker",
        "magic"
    ],
    "category": "NonHuman",
    "url": "https://www.literotica.com/s/fondest-dreams-ch-07"
}
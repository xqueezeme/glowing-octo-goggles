{
    "title": "That Fun New Store at the Mall",
    "pages": [
        "Author's Note: There's no deeper meaning to this one. It's just a couple of young women having some fun with toys.\n\n*****\n\n\"Oh, look.\"\n\nSondra's eyes were on the cute top in the Forever 21 window, but she accommodated Janey with a turn of the head. \"What?\"\n\n\"That new store. Look.\"\n\nSondra followed her friend's gaze down the hallway of the mall and her blue-gray eyes widened. \"Oh, wow. Seriously?\"\n\n\"I can't believe it. We got one!\" Janey giggled. \n\n\"That's amazing!\"\n\n\"Let's go look.\"\n\nSondra's heart skipped a beat. \"No! What if someone sees us?\"\n\n\"We're in a mall. And it's legal now. Come on!\"\n\nJaney strode off towards her destination, her curly dark hair and tiny derriere bouncing with every step. Sondra wrestled with the decision for only a moment. \"Wait for me!\"\n\nSixty seconds later, the two young women stood at their destination, studying the window.\n\n\"You can't really tell what they do from the outside, can you?\" Janey noted.\n\n\"No.\" Sondra studied the tableau in front of her. Unlike most mall stores, this one had no huge glass windows, only a blacked-out door and a big photographic sign showing a crowd of life-sized women. There were women in doctor's coats, women in business suits, women in running shorts, even a pregnant women, standing confidently together and looking out at passersby with polite but mysterious smiles. The only hint of what happened inside was the name and logo emblazoned above the store: The Inner Haven.\n\nThe Inner Haven had quickly achieved social icon status. Since the Supreme Court had ruled that prostitution didn't exist if the acts were performed by machines, an entire industry of legal sex stores had suddenly blossomed into existence. Most serviced men, of course, but a few catered to women, and the upscale Inner Haven was the unquestioned leader. It supposedly had a well-designed business model, and had gone so mainstream that branches were showing up in malls - not without controversy, but showing up nonetheless.\n\nSondra and Janey stood for several moments without speaking, each knowing the implications of the store's presence.\n\nJaney broke the silence. \"You know what we promised.\"\n\nSondra nodded and gulped. \"We promised that we would visit if we saw one.\" She glanced sidelong at the mall's passersby, cringing at their knowing smiles.\n\nJaney flashed her infectious grin. She was a petite bundle of energy whose joie de vivre knew few limits, and she was Sondra's best friend in the world. She said nothing, but tilted her head quizzically and arched her eyebrows.\n\nSondra suddenly had a rock in the pit of her stomach. Whereas Janey was naturally bold, Sondra was the opposite. Nearly every exhilarating thing she'd ever done in her life was the result of being dragged forward by Janey, and nearly every disaster had the same genesis. \"I don't know,\" she laughed nervously.\n\n\"You know you want it,\" Janey teasingly admonished. \"We've talked about it.\"\n\nThey had indeed talked about it. Every woman in America had talked about it. The Inner Haven was a national phenomenon that was sweeping the country. But at the same time, it seemed so wrong, so brazen. It was at the mall, for crying out loud!\n\nSondra knew that she would give in, because the truth was that she did want it. She was grateful to always have Janey to pull her forward. But a good girl had to be hesitant. A good girl had to be convinced.\n\nRight?\n\n\"Come onnnnnnnn.\" Her roommate danced in frustration and playfully stamped a foot. She was adorable in so many ways, but when she pouted it always made Sondra laugh. Sondra could never pull off such an act with her figure, but it worked for Janey with her cute face and Peter Pan build.\n\nThe two women were opposites in so many ways that their friendship seemed incongruous. But they had met in kindergarten and had been running in lockstep ever since. Over the next twenty years, Janey had grown in personality and panache, but not so much in stature, standing only a shade over five feet. Her figure was defined by perky little A cup breasts and the informal Best Ass award as decided by the senior boys back in high school. \n\nSondra had gone the other direction, quiet and shy, but with voluptuous long red hair and a figure that spoke for itself. To her embarrassment, she had received the informal \"Best Tits\" award from those same senior boys, leading the girls to be nicknamed \"T & A\" for much of their senior year in high school.\n\nSondra looked up at the sign, then scanned the faces of the women in the advertising mural. It was mainstream, right? Doctors did it, lawyers did it, even soccer moms did it. The ads wouldn't lie.\n\nShe grinned shyly and bit her lower lip, her toes curling inside her ballet flats. \"You really want to do this?\"\n\nJaney practically leapt toward the door.\n\n****\n\n\"Welcome.\" The woman at the reception desk was an imperturbable and worldly looking blonde in her thirties, impeccable in makeup and fashion. \"Have you visited The Inner Haven before?\"\n\nSondra and Janey both shyly shook their heads. Looking around, Sondra saw nothing different than one would see in an upscale spa lobby. There were healthy plants, a water bubbler, and nice wood trim everywhere. A single door led back from the waiting area, presumably to where the services were provided. The only oddity was the photos on the wall, which were all head shots of attractive women experiencing bliss of an obvious kind. The pictures were reassuring while at the same time making Sondra's pulse accelerate.\n\n\"Okay, no problem. Here's how it works.\" The woman had obviously done this routine before. She blithely handed them each a brochure and a clipboard. \"You can decide on the specific services you want from our wide list of options. This brochure describes them in detail. Have a seat and read through them, and you just check the ones you want on this form and bring it back to me. Once you do that, we'll get you in the queue. And don't be shy; we have customers who select anything and everything on the menu. We're here to give you a great experience.\" \n\nThe two young women took their clipboards and brochures and turned toward the seating area. Several women were already waiting there, displaying a variety of ages and appearances.\n\n\"I can't believe we're here,\" Sondra giggled conspiratorially. Janey concurred with a wide grin and offered a reassuring squeeze on Sondra's forearm.\n\nSondra found a comfortable chair and sank into its soft cushions. Her eyes widened immediately as she scanned down the menu. At the bottom, it had some basic choices such as 20 minutes with a vibrator for only $12, and a \"Vibrator Ride\" for $25, whatever that meant. At the top were full-day packages that seemed to combine services, and were quite expensive. There were animated illustrations throughout of faceless feminine figures in different positions.\n\nAnd in the middle. Oh, boy. Sondra felt herself blushing just looking at the list. \n\nJaney had fewer inhibitions. She was sex-obsessed anyway, and this was undoubtedly revving her up even more. \"What are you going to do?\" she asked, in a tone that was only slightly hushed.\n\n\"I don't know. Why are you asking me?\"\n\n\"I want ideas. There's so much stuff here.\"\n\nA woman across from them glanced up from her magazine, then back down as she tried to suppress a smile. Sondra blushed again, shifting uncomfortably in her seat. Janey continued unabated. \"I really want to try this,\" she said, pointing at a spot on Sondra's brochure. \"What do you think?\"\n\nJaney's finger was on the \"Slingtastic\" option. It showed a drawn feminine figure reclining in what looked like a hanging chair, her legs splayed wide as a machine with a dildo sat positioned between her legs.\n\nSondra tried to respond, but wasn't sure what to say. It looked quite exciting, but then again so did everything. She could feel her excitement building, both physically and psychically.\n\n\"Oh, wow! Look at that!\" Janey pointed again. \"Do that one with me!\" \n\nSondra and Janey talked about everything. Janey's boyfriend had been hounding her about trying anal sex, and she was concerned due to the size mismatch, Jason being nearly a foot taller. The diagram that Janey was pointing at showed a female figure bent at the waist, lying over a short bench, as a horizontally oriented dildo machine posed behind her, two dildos at the ready.\n\n\"I don't know. A machine?\"\n\n\"Let's both do it. We can compare notes afterward.\"\n\nThe woman across from them almost laughed aloud, eyes still buried in her magazine but alight with mischievous amusement.\n\nAt that moment, a customer came from the back, exiting under escort from a spa employee. The woman looked to be in her late forties, classy in dress and demeanor. She had a pleasant, curvy figure and wavy brunette hair down to her shoulders. She had the flushed look and slightly damp hair of someone who had just worked out and showered.\n\nThe receptionist smiled. \"How was your session, Mrs. Bradley?\"\n\n\"Oh, it was divine, Brooke. The best one yet.\"\n\n\"Did you end up trying the nipple clamps?\"\n\n\"Yes. They were wonderful. You were right. I loved how they pulled! It was just the right amount of pressure.\"\n\n\"Oh, yeah. I pretty much have to have them nowadays.\"\n\nJaney and Sondra locked eyes in wonderment. These women were so open, so casual. Sondra's heart pounded as she began fully realizing that this was real.\n\nShe tried to read each menu option, but her eye kept coming back to one item in particular. The \"Tie and Tease\" showed a drawn female figure on her elbows and knees. She was on a raised platform, her waist locked into a large frame that separated her front half from her rear, and her forearms, wrists, calves, and ankles were held fast to the platform by thick leather sheaves. Underneath, between her knees, a feather rose from the platform she was on, rising toward her vulva while another piece of machinery pressed up against her from the rear. The description said, \"Held in place and unable to escape, you will be mercilessly teased in increasing cycles as your heat rises Our patented machines will ensure you an hour of blessed torment culminating in a mindblowing grand finale...or not. Great for the woman with submissive or masochistic fantasies.\"\n\nShe squirmed in her seat, feeling herself heating up at the very thought. She enjoyed being taken, and routinely masturbated to fantasies about being tied up in a dungeon or being inspected in a slave auction. She loved it when her boyfriends pinned her down and forced her to enjoy sex, which rarely happened in this dual-edged era of equality and enlightenment.\n\nHer pen wavered over the description. $125 for an hour. She absentmindedly chewed a thumbnail as she weighed the cost against her desires. The Vibrator Ride was a lot cheaper and less risky.\n\n\"Have you seen this one?\" she whispered, gesturing to Janey.\n\nJaney nodded enthusiastically. \"That looks great. But I think I'm going to try this one. I just noticed that you can combine this - \" she pointed at the Slingtastic, \" - with this.\" She pointed at a feature called, \"Personal Growth\", which featured a 'dildo machine' that promised to automatically provide larger and thicker dildos as the session went on. Given Janey's small size, Sondra was surprised that she would pick that - the largest dildo was huge.\n\n\"You saw the maximum size on that, right?\"\n\n\"Yeah.\"\n\nSondra couldn't help but smile. Her friend was indeed adventurous.\n\nThe two young women locked eyes. With a mischievous grin, Janey said, \"Pick one and let's go! I can't wait!\"\n\nAs Sondra stood, the woman across from them looked up. \"You'll love it,\" she said to Janey in a motherly tone. \"I do that one all the time.\"\n\n****\n\nThe girls made their way to the front desk, where Brooke The Worldly Blonde awaited. . \"Hmm, okay,\" she said. \"Let's see what we've got.\" \n\nShe took their forms and examined them, then began typing into the screen, starting with Janey's name and contact info. \"You're doing the Slingtastic with the Personal Growth option. That's a nice one. Now, a lot of women will also get the Double Down Under option with that. Did you see that?\"\n\n\"No, what's that?\"\n\nThe receptionist flipped through the brochure. \"It's the Double Down Under option because you do it with two dildos, one vaginal and one anal. The standard anal is three inches shorter and roughly half the width at each stage, unless you want to supersize. It's only $15 more.\"\n\nJaney stared wide-eyed at Sondra, her beautiful brown eyes mixed with wonder and fear. Her smooth brow furrowed, she hesitated, and then finally smiled wickedly and nodded. That girl was crazy, Sondra thought. She felt her own sphincter pucker just thinking about it.\n\n\"Okay, that's a 45 minute session. We'll be able to take you shortly. And now for you.\" The woman perused Sondra's intake form. \"Oh, a one-hour bondage session. Very nice.\"\n\nSondra felt her face flush red. Nobody knew her fantasies, nobody at all other than a few vague bar discussions with Janey over the years. Yet now this woman was discussing them openly in a lobby. She girded her courage. \"Yes, please,\" she said quietly.\n\n\"Okay, with the bondage sessions we have to have a spotter. Since you're restrained, a woman will stay in the room with you to be sure that you don't have any problems. Is that okay?\"\n\n\"In the room?\" Sondra was horrified at the thought, though secretly intrigued. \"Uh - I - uh ...\"\n\n\"Your partner here can also do it,\" the woman added. \"It's $25 cheaper, and if you're in the same room anyway ...\"\n\n\"Oh, we're not partners,\" Sondra blurted. \"We're just friends.\"\n\n\"I'll do it!\" Janey said almost at the same instant.\n\nBrooke The Worldly Blonde sat motionless, waiting for a decision. Her eyes shifted noncommittally from Sondra to Janey and back.\n\n\"The same room?\" Sondra questioned, looking at Janey. \"Really?\"\n\n\"We can do it. It'll save you $25.\"\n\nSondra stared at her friend in disbelief. They were roommates now and had been friends forever. They'd seen each other naked, of course, but only in passing. And they had even slept in the same bed back at slumber parties back in their younger days. But there'd never been anything like this.\n\n\"Okay,\" she said. She tried to suppress her smile.\n\nThey handed over their credit cards and waited for the paperwork, then went back to their comfortable chairs in the lobby. Sondra's mind was racing, her pulse pounding. She was really going to do this! And on top of that, she was going to be naked in the room with Janey. Cute, adorable Janey.\n\nTheir relationship had always had an extra layer, at least in Sondra's mind. They were friends back before they even knew what sex was, and they had learned about it together. Not really together, but ... together. They had gossiped about boys and critiqued each other's boobs and talked in delighted horror about their pubic hair. They had innocently slept in the same teenage bed, showered together, and played all kinds of sexy dressup. They were both interested in boys, and then men, and each had heard the other through the walls absorbing male suitors. But underneath it all, at the foundation of their friendship and also perhaps its culmination, they had the kind of loving and playful relationship that couples did. \n\nEverything except the sex, that is, and it had come close even at that. They had snuggled under the covers on cold nights, even practiced kissing on each other back in the beginning, but every time they stopped short to giggles and Sondra's secret frustration. In fact, Janey's teasing was perhaps what had created Sondra's fetish about being tied and teased. Her constant proximity and unceasing denial had become almost an obsession in Sondra's fantasies.\n\nSondra studied her longtime friend. It was so complicated. Sondra wasn't attracted to women. But she was attracted to Janey. Everything she sought with a man was what she had with Janey. And the only unique thing she could get from the men was sex, which was the only thing she was missing with Janey. \n\nNot that she wanted sex with Janey.\n\nNot really.\n\nNot exactly.\n\nSondra sighed.\n\nThey sat for another ten minutes before an attendant opened the inner door. She was an attractive woman, olive-skinned and dark-eyed in the manner of a Greek or Italian. Her white coat and polished demeanor inspired confidence. \"Janey and Sondra?\" she asked, scanning the room. \n\n\"Here!\" Janey said. She and Sondra leapt to their feet.\n\n****\n\nBehind the door was a long hallway. The Mediterranean woman stopped and shook hands once they were inside. \"I'm Gabrielle,\" she said, smiling politely. \"I'll be setting you up today.\"\n\nShe led them back, chatting politely, then motioned them into a room. It was quite small, perhaps 8 feet by nine feet, and Sondra stopped cold at the entrance. Inside was a bondage table exactly like the one in the brochure, and a hanging sling like the one Janey had liked. This was really going to happen.\n\n\"You can remove your clothing now and put it in the lockers over there. You won't leave this room, so you don't need to wear anything. Just get naked. I'll give you a moment to undress and then I'll come back in and get you set up.\"\n\nShe smiled and stepped out, shutting the door. Sondra and Janey looked at each other with embarrassed smiles.\n\n\"I guess this is it?\" Sondra asked.\n\n\"I guess so. Don't make fun of me,\" Janey cautioned. \"I get excited easily.\"\n\nSondra laughed. Their bedrooms were right next door. She'd known for several years that her friend was oversexed. She could hear the buzzing through the wall when there wasn't a guy over, and she could hear the choreography when one was. Not to mention that Janey went through D-cell batteries like they were Oreos. \"We'll both promise not to laugh,\" she replied.\n\nThe two women began removing their clothes, the silence in the room awkward. First the shoes, then the tops, then the skirts and underwear. Within moments, they were both nude. Sondra crossed her arms over her large breasts self-consciously. She felt a little guilty having such prominent curves when Janey was built so small, but at the same time she openly envied Janey's tiny hips and derriere. A man's penis would look goliath as it glided in, and Janey had no shortage of suitors.\n\nShe snuck a peek as her friend put the last of her clothes in the locker. Janey's breasts were small but well shaped, topped with small dark areolae. Her hips were perfect, her mound shaved to perfection. Sondra had seen it all before, of course; Janey had either a strong exhibitionist streak or little modesty, as she had no hesitation to walk through the apartment naked if she needed something out of the dryer. But today was going to be different. She wasn't sure if she was more excited about her own upcoming experience or watching Janey.\n\nThere was a knock on the door, and Gabrielle swiftly opened it and walked in. Out of instinct, both Sondra and Janey tried to cover themselves with their hands, and Gabrielle laughed, her dark eyes bright. \"Don't worry about that,\" she said. \"I'm going to see a lot more of you!\" She checked her forms. \"Sondra, we'll set you up first since your session is longer. Up on the table!\" She patted the platform. \"Get on your elbows and knees, and position your waist over this frame.\"\n\nSelf-consciously, Sondra stepped to the frame and clambered aboard. Settling onto her knees, she leaned forward to all fours, resting on her elbows and enjoying the swaying of her breasts. Gabrielle ran a hand along her back from shoulder to rump, gentle and soft and appraising. Even as Sondra jumped, it felt divine.\n\nThe frame at her waist was the bottom half of an ellipse, and Gabrielle cranked a foot pedal until it rose comfortably against Sondra's stomach. Then, reaching under the table, she rotated up the top half of the frame on a hinge, over Sondra's back and down. This top half of the ellipse locked into place and Gabrielle made some adjustments to tighten it. The opening was now too small to slide through for either Sondra's hips or her ribs, effectively trapping her in place.",
        "\"You'll like this,\" Gabrielle said matter of factly. \"It keeps you from moving towards or away from the teasers. Now, spread a little wider, please.\" She tapped the insides of Sondra's thighs, and once her knees were spread sufficiently wide, she pulled leather sheaves up and over Sondra's calves from ankle to knee, buckling down their straps and immobilizing her legs. Other than wiggling her toes and rolling her ankles, Sondra was now completely trapped from the waist down. It was a simple but very effective bondage setup. \n\n\"Would you like to help do her arms?\" she asked Janey.\n\n\"Sure!\"\n\nOne woman on each side, they pulled Sondra's arms to shoulder width, still resting on her elbows. Then the leather sheaves were pulled up and over them, pinning her forearms to the table from wrist to elbow. Sondra got a good look at Janey's breasts, which were more or less at eye level in this position. The nipples were slightly thicker than she would expect, the areolae almost a dark brown in contrast to Sondra's own very pale pink. The areolae were small like the rest of her friend, only slightly larger than a bottle cap. Sondra preferred her own large ones, but was nonetheless fascinated by this close-up view.\n\n\"You have nice long hair,\" Gabrielle mentioned, running a hand through Sondra's coppery locks. \"Some women like to have their head tied up by their hair, and some like to rest in a chin cup. You don't want to leave your head free because it'll get hard on your neck. Which would you prefer?\"\n\nSondra was aware of Gabrielle's hand resting in the small of her back, and of Janey's bare breasts perched oh so close. She tested her bonds, and was more or less completely held motionless. \"What's the chin cup?\" she asked.\n\n\"Let me show you,\" Gabrielle said. \"I think it's the best way to go if this is your first time.\" She reached under the table and pulled out a foot-long metal rod, atop which was a curved and u-shaped pad. She slipped the rod vertically into a small hole on the platform beneath Sondra's head, then positioned so that Sondra's chin fit into the u. It propped her head up so that she faced directly ahead, but allowed her to rest her neck. The ends of the u hugged her cheeks, keeping her in place.\n\n\"Oh, yeah. This is really comfortable,\" she said.\n\n\"Good! Now let's get you hooked up. We'll start with your nipples.\"\n\n\"My nipples?\" Other than her fingers, toes, and ankles, Sondra could not move at all now. She tried to squirm to little effect.\n\n\"We put these small vacuum suction devices on them,\" Gabrielle explained. Stepping to the front where Sondra could see her, she held up two hoses that had small concave cups on the end. \"They'll vary in suction and pressure over the course of a session. Do you have naturally erect nipples?\"\n\nSuddenly Gabrielle's fingers were reaching under Sondra, fingers gripping and tweaking her nipples. Sondra squeaked in surprise and protest while Janey laughed nervously. She saw her best friend tilt her head slightly down to peep. \n\n\"Um, nope,\" Gabrielle diagnosed. \"Naturally soft. Let me work them for a minute or two.\" \n\nSondra loved breast play, and her nipples were sensitive. Pleasure flowed from her nubs toward her pussy and her brain as the attractive attendant played with her nipples, pinching and twisting and squeezing. Rolling her eyes to the right, Sondra saw Janey watching intently, her eyes bright with interest. \n\nGabrielle was relentless, kneading and squeezing as Sondra gasped, unable to resist or evade at all. \"Okay,\" the attendant said at last. \"I think you're ready.\" Squeezing lubricant from a tube, she rubbed it onto Sondra's now-hard nipples. \"Would you like to put them on?\" she asked, looking toward Janey.\n\nSondra realized that Gabrielle assumed that they were lovers, but before she could explain, Janey already had the hoses in her hand. \"Just reach under here and grip her nipple,\" Gabrielle said, and then I press this foot pedal to start the suction. I'll start it out light, just strong enough to stay affixed.\" Sondra couldn't help but moan as four soft hands began exploring her dangling breasts. She didn't mind Janey helping out, not at all.\n\nWith a slight hiss, she suddenly felt pressure on her right nipple, and a slight but persistent suction pulled it away from her flesh. She tried to shake it away, but it only made her breasts sway, which amplified the pleasantly uncomfortable situation. It felt as if a man's lips were sucking on them. A moment later, the same situation hit her left breast.\n\n\"Nice?\" Gabrielle asked. Leaning down, she looked Sondra in the eyes, her warm hands stroking and cradling Sondra's hanging breasts. \n\n\"Oh, god. It's fantastic.\" Sondra couldn't believe this was happening. A stranger was touching her breasts, hooking up this fantastic machine to them, and Janey was standing right there naked, her bald pussy clearly visible within Sondra's peripheral vision. She couldn't help but notice that Janey had mild outer lips and prominent, front-facing inner ones, offering more of a view than one normally expected from this angle. \n\n\"Now we'll set up the back,\" Gabrielle said. She and Janey moved back, out of Sondra's limited range of vision. Her chin resting on the stand, she could only look straight ahead, and her eyes darted left and right as the milking devices hung down, stretching her breasts slightly with pleasant pressure.\n\nSuddenly a hand was directly on her labia, fingers stroking them and spreading them. Sondra yelped and bucked, but was unable to move. Was Gabrielle supposed to be touching her there? The law required only contact by machines, right?\n\n\"You're pretty well lubricated naturally,\" Gabrielle explained matter of factly. \"I'll give you a little more, but you don't need much. I'll still lube up the dildo just to be safe, and of course, we'll have to lubricate your anus.\"\n\nHer anus? Sondra gulped. \n\nHer voice lower, Gabrielle spoke to Janey. \"Do you want to spread her for me, or would you like me to spread and you can apply the lubricant?\"\n\nSondra's eyes widened, and she listened for an answer but missed it. Instead, two soft hands grasped her butt cheeks and pulled them gently apart, exposing her anus. Suddenly something cold hit touched right upon her opening. \n\n\"Oh, god!\" she gasped. Her muscles flexed and fought against her bonds, but she had no chance of escape or even movement. \"Oh! Oh!\" Fingers swirled around her opening, then pushed inside her most personal chamber. Were they Janey's or Gabrielle's? The framework practically shook with her struggles. It was just like being a slave girl on forced display. \n\nSlicked fingers twisted and massaged her rectum, softly but firmly. Slippery fingers stroked her labia, then her clit, before pushing inside her pussy as well. Sondra struggled mightily, more from instinct than a desire to escape. She felt almost like she could cum quickly, and was turned on beyond anything she expected. \n\nSomething hard pressed gently against the rim of her vagina, then something else did the same with her anal bud, just close enough to touch without applying pressure. Were they dildos? She couldn't quite tell.\n\nFingers ran up through her trimmed rectangle of pubic hair. \"This is short enough that we don't need to do any trimming.\" Sondra groaned in pleasured protest and tried to press herself back against the devices, but to no avail. Her situation was cruelly teasing.\n\nGabrielle and Janey stepped back into Sondra's field of vision, and Gabrielle explained a number of foot pedals to Janey that were below Sondra's field of vision. \"These are quick releases if she gets into trouble. Press this one to turn off the breast stimulator, this one for the clitoris, this one for the vagina, and this one for the anus. They're all labeled. All you have to do is press it and it'll shut down. Got it?\"\n\n\"Got it,\" Janey said. At this height Sondra could only stare into the bustlines of the two women, one clothed, one bare. She felt her anus flexing involuntarily at the unfamiliar contact still pressing lightly up against her.\n\n\"Now let's get you set up,\" Gabrielle said to Janey. \"Your situation will be easier, and you have a 45 minute session. Let me help you climb up into the sling.\"\n\nFrom her vantage point, Sondra was staring straight into the sling, which was positioned about three feet away. After some laughing and maneuvering, not unlike climbing into a hammock, Gabrielle got Janey up and into it, her lower back supported by a canvas sling and her legs pulled wide into two canvas stirrups. Her rump hung almost free. She lay back against a mesh of straps and was able to grab a bar over her head and behind her to complete the position. \n\n\"Let me go get the Double Down device,\" Gabrielle said, and stepped away.\n\nFrom her higher position, Janey smiled down at Sondra. She was spread completely open, legs apart, bald pussy at eye height to Sondra and in direct sight. It was beautiful, small and tight with inner lips that blossomed delicately from a slit of an opening. Her outer lips were almost non-existent, just a mild bulge of softness framing her opening, and her clit was prominent. Sondra had seen Janey naked many times, but never anywhere close to this brazen display. \n\nA machine rolled up from behind Sondra, guided by Gabrielle. It was about three feet tall and looked heavy. Pointed out and slightly up, extending from thick metal rods, were two dildos, black and menacing and oddly shiny. The first was roughly six inches long and more than an inch thick, and the second was smaller, perhaps four inches and relatively slender. The device was low enough that it didn't block Sondra's view as Gabrielle positioned it between Janey's outspread legs.\n\nGabrielle motioned to the dildos. \"These are high tech and inflatable,\" she explained. \"You'll go six minutes with the base vaginal dildo alone, then get a minute to rest. It'll then inflate to the next larger size, and then you'll get seven minutes of both it and the base anal dildo. Another minute to rest and then they'll both inflate up. Then you get eight minutes, another one minute of rest and inflation, and so on. You'll end with about eleven minutes at the top size. Once I turn it on, they'll start thrusting and vibrating - faster for the vagina and a slow pace for the anal probe, and then each cycle will give you a little increase in speed and power.\"\n\nJaney was gazing at the two dildos with a mixture of excitement and fright. Sondra could see why; even at its current size the dildo looked large compared to her small openings. \"How big is it at the end?\"\n\n\"At the end you'll be taking almost 9 inches vaginally and 7.5 inches anally. The vaginal dildo will be 2.5 inches wide and the anal dildo will be 1.5 inches. That's the standard, but I can adjust it up or down if you want.\"\n\nJaney swallowed hard. \"No, that's fine.\"\n\nGabrielle knelt down, looking straight into Janey's exposed pussy and anus. \"It looks like you're naturally lubricating too,\" she said, \"but I'll add some just in case. As Sondra watched, she took a tube of lubricant from the pocket of her smock, squeezed it onto her fingers, and then began a slow massage of Janey's pussy. \n\nEven though Janey could see it coming, Sondra could tell that she was shocked by the intimate contact, letting out a gasp and a short squeal of surprise. Her mouth dropped open and her eyes bulged as the attendant languorously ran her fingers up and down Janey's inner lips, occasionally forking to stroke her outer lips as well. Sondra could see Janey's toes curling, the muscles in her slender thighs flexing, as she absorbed the attention, staring down at her crotch and the fingers that massaged it. Janey's eyebrows creased with wonder and worry as the fingers slid inside her. \n\nSondra tried to rub against the unknown devices that touched her own personal regions. It was so arousing to see Janey like this. But she couldn't move.\n\n\"And now down a little further,\" Gabrielle said. She smiled knowingly as she put another glob of lubricant on her fingertips, this time moving down to Janey's tiny pink rosebud.\n\n\"Oh! Oh, gosh! Oh!\"\n\n\"We have to be sure that you're all nice and lubed.\"\n\nJaney practically levitated out of the sling as a finger slipped inside her rectum. There was a full minute of squirming as Gabrielle invaded Janey's anus, twisting and probing with her finger. Given the look on her face, Sondra wondered if perhaps Janey was having second thoughts about selecting the anal option.\n\nFinally Gabrielle sat back, assessing Janey's once-private areas. She ran a hand across the girl's fulcrum, anus to vulva and up to her small, bare pubic mound. \"I think you're ready,\" she declared. The next few minutes involved some maneuvering of the device and the dildos, but eventually Gabrielle got it all lined up. She hung a small cord in the sling where Janey could easily reach it. \"If you have to stop, just push this button. Are you ready to go?\"\n\nJaney nodded, staring with excited trepidation down at the double-headed device positioned at the edge of her openings.\n\n\"And we're off!\" Gabrielle hit a switch and the machine came to life. The top dildo, the larger one, pushed into Janey slowly but inexorably, then began building a rhythm. Janey squealed with delight as it began a rhythmic pounding of her pussy. It was large enough that Janey's soft outer lips were stretched a bit, gripping the device as it thrust in and out. The petite brunette threw her head back in immediate pleasure.\n\n\"And now you.\" Gabrielle stepped back over the Sondra and pressed down on the foot pedals. Sondra gasped as several pieces of machinery came to life. The cups on her nipples began a slow sucking, but her attention was particularly drawn between her legs, where some unseen dildo slowly, very slowly, entered her vagina.\n\n\"Oh!\" she breathed. \"That's amazing.\"\n\nGabrielle laughed and cocked her head toward a clock on the wall. \"Let's hear what you have to say 59 minutes from now,\" she said. \"The four devices will alternate and turning off and on, and they'll randomly vary in intensity,\" she said. \"There are temperature and fluid sensors that will make adjustments to keep you on the edge for the next hour.\" She walked toward the door, giving Sondra a playful slap on the ass. \"I'll be back. Enjoy your visit!\"\n\n****\n\nAnd with that, she was gone. Sondra was enjoying the feeling of being filled, and the devices on her nipples were oddly pleasurable. \n\n\"Nnnnh!\" Janey moaned. Making eye contact with Sondra, she smiled even through her veil of concentration as the dildo smoothly thrust in and out. \"This is fantastic. How are you doing?\"\n\n\"I'm okay,\" Sondra tried to move slightly, to slide back further, but it was hopeless. Unlike Janey's deep and fast device, Sondra's was excruciatingly slow, moving into her very slowly and barely vibrating. It was heating Sondra up, but not nearly enough to put her over the edge any time soon. \n\nShe distracted herself by concentrating on Janey. The small brunette now had both hands on her breasts, lightly caressing them and kneading her nipples. Her hips were small and smoothly curved, her skin a gorgeous natural tan. The dildo was pumping in a smooth rhythm, producing small shudders in her friend's body as it hit its maximum depth each round.\n\nFor several minutes each woman withdrew into her own world, Janey being relentlessly machine-pumped and Sondra receiving a slow vibrating penetration. Her nipples were being sucked harder now, almost hard enough to blur the distinction between pleasure and pain. \n\nSuddenly the dildo in Sondra's vagina stopped. She frowned as it neither pushed forward nor vibrated. Then suddenly she felt a light touch on her clit, barely more than a tickle. Unable to move, she pondered the implications as something danced lightly over her most sensitive spot. Her pussy was still pleasantly stretched by the motionless dildo. \"Hmm,\" she grunted thoughtfully.\n\nJaney's eyes popped open. She was still playing with her nipples. She looked at Sondra. \"What is it?\"\n\nSondra tried to push downward, but couldn't. \"Nothing,\" she said. \"Just a different sensation starting.\"\n\n\"Oh.\"\n\n\"How are you feeling?\" Sondra could look straight into Janey's pussy. It was slick and wet, and being invaded in a nice rhythm.\n\n\"It's really good,\" Janey said breathily.\n\nFor another two minutes the room was silent other than faint moans and gasps and the quiet movement of high-tech machinery.\n\nThen Janey's machine stopped. She moaned in frustration as the dildo withdrew. \"Oh, damn,\" she muttered. \"I was getting close.\" Her fingers slipped down between her legs.\n\nMesmerized, Sondra watched her friend fondle and flick her clit. She didn't think Janey should be doing it, not with so much time left, but she wasn't going to say anything, not with this view. With the device playing with her own clit, she too moaned in frustration.\n\n\"I - oh!\" Suddenly the device against her anus had sprung to life, beginning to vibrate and very slowly advance against the resistance of her sphincter. \n\n\"What's happening?\" Janey asked, unashamedly masturbating herself. \"You look like you're weirded out.\"\n\nHer mouth gaping, Sondra could only nod. \"Something's going in me,\" she gasped. \"In the back.\"\n\n\"In the back?\" Janey's mouth curled up into a grin. \n\nSondra girded her courage. \"Yeah.\" Whatever it was, it felt like it was inside her now, shallow but still inside, stretching her anal ring pleasurably. She pulled fruitlessly against the leather sheaves holding her down. \"It's pushing into me.\"\n\n\"Good or bad?\"\n\n\"Kinda good.\"\n\nJaney's dildo caught Sondra's eye. Still caught up in her own experience, she stared unbelievably at it. It was still slick and shiny with Janey's fluids, but it was expanding. The slick material was pushing outward as the chamber inside it inflated, growing both longer and thicker.\n\n\"Uh, Janey, are you seeing that?\"\n\n\"Yeah.\" Janey sounded a little hesitant. \"What's that coming out of the top?\"\n\n\"It looks like little fins. Or brushes or something.\"\n\nBoth women knew what it meant. Small soft spikes were growing out the top of the dildo. On every stroke they were going to rub across Janey's clit. Sondra, growing more aroused by the minute, was a bit envious.\n\nThe machine pushed into her friend. Janey mewed with pleasure as the feathery fins flowed across her surprisingly large and slick clit. \"That's fantastic,\" she breathed. \n\nAnd then the second dildo moved, the one that was underneath.\n\nIt hadn't yet done anything, but now it too moved forward. Sondra watched in amazement as its tip pressed against Janey's anus. The small woman froze. \"Oh, god. What's it doing?\"\n\nSondra involuntarily smiled, a wicked and voyeuristic smile.\n\n\"I don't know if I can do this. I don't - oh! Aaaah!\" Suddenly the tip of the smaller dildo disappeared inside Janey. Her toes curled and flexed, and she instinctively positioned her legs higher to allow an easier entry.\n\nSondra's clit tickling stopped, and the pressure on her nipples let up. Now, without warning, the device inside her vagina was moving again, slowly rubbing in and out, up and down. Her anal dildo was doing the same thing, and suddenly she could empathize with Janey.\n\nFor the next several minutes, both women grunted and gasped as they were dually penetrated, Janey's machines running more vigorously and Sondra's more leisurely. Janey lasted only a short time before her petite hips began undulating. She shivered, and Sondra saw the tendons in her thighs tighten up. Janey's breathing was getting faster and shallower, her nipples long and hard.\n\n\"I think this is it,\" she breathed. \"This is fantastic.\"\n\nSondra tried to enhance her own stimulation, but was hopelessly stuck. The devices felt fantastic, but they were so slow, so deliberate! She was highly aroused and ascending intensity, but not to the point of orgasm.",
        "Janey, however, was, and Sondra had a front row seat. Janey's back arched and suddenly her hand was again between her legs, frigging herself furiously while both of her bottom orifices were being pistoned. \"Nnnnnnh! Ohhhh!\" With a mighty thrust, her hips bucked upward once, twice, three times.\n\nSondra had never seen a woman orgasm before. It was interesting to see how strong the reaction was, as Janey bucked and rocked her hips. The machines didn't care and kept up their rhythm, and suddenly it was over. Janey was fighting the overstimulation as the machines continued to do their thing, and she tried to pull away, but had no chance. \"Too much!\" she said to no one in particular, through gritted teeth. \"Too much!\"\n\nShe fought and kicked, but Sondra noted that she never hit the kill switch. Whether she'd forgotten about it or not, Sondra didn't know. But she had her suspicions. It was sexy to watch Janey thrash in pleasure, to watch the concentration and mix of emotions on her face.\n\nSondra's anal dildo stopped, remaining lodged inside her, and now the tubes on her nipples began vibrating. It was new and it was wonderful. Sondra whimpered, wishing she could touch herself. She glanced at the clock. Only twelve minutes had gone by.\n\nIt took a few minutes, but Janey worked through her overstimulation and was now in pleasure again. She lay back silently in her sling, legs wide, being serviced in both holes. She had her eyes closed and a content smile on her face, and she looked beautiful.\n\nA few minutes later, Janey's machinery stopped again, pulling out of her. She opened her eyes. \"Darn,\" she said, \"I was getting close again.\"\n\n\"Well, good for you,\" Sondra said through gritted teeth. \"This thing is driving me crazy.\"\n\nJaney giggled. \"You like it?\"\n\nSondra wasn't sure how to answer. \"Yes,\" she panted tentatively. \"But I'd love it if it would just speed up a little.\"\n\n\"Are you close?\"\n\n\"Yeah. Really close.\"\n\n\"Tell me when you cum, okay? I want to watch.\"\n\n\"Um...okay.\" Sondra couldn't believe they were having this conversation.\n\nJaney was on her one-minute rest period now, and she watched Sondra squirm with increased interest. \"What's it doing to you?\"\n\n\"It keeps switching up.\"\n\n\"What's it doing now?\"\n\n\"There's something small and light on my clitoris. It's just barely vibrating. And these things on my nipples are sucking them somehow, and I feel little teeth on them. They were vibrating a few minutes ago and it almost put me over the edge.\"\n\n\"Is anything inside you?\"\n\n\"Not right now.\"\n\n\"Nothing?\"\n\n\"I can feel things right up against me. Both front and back. Sometimes they thrust, sometimes they vibrate, sometimes they just go in and stop. The worst is when they just barely touch me and vibrate.\"\n\nJaney giggled. \"We're learning some things. Oh god, look at my two things.\"\n\nSondra's eyes widened. Janey's two dildos had inflated to the next size up.\n\n\"Can you really take those things?\"\n\nJaney grinned uncertainly. \"I've got one that size at home, so I know I can take it in front. The one for my backside is a little more scary.\"\n\n\"Stop it if you need to. Don't hurt yourself.\"\n\nThe machines whirred to life, faster this time than last. They pressed in on Janey's two openings and suddenly she was filled up again. She was definitely stretched this time, but she seemed to like it.\n\nThe next half hour was a combination of ecstasy and agony. Janey kept taking larger and faster dildos, her tiny stretched pussy and ass taking her to orgasm at least twice more. By the end of the fourth round she was shaking with exhaustion, her legs quivering with each thrust of the large thick intruders. Her dark hair was damp and tucked behind her ears. Her breasts, small as they were, were bouncing and undulating as she tried to hold and support them against ever more vigorous thrusting. For the fourth time she arched her back, letting out a long, low guttural moan. \"I'm coming again!\" she gasped. \"I can't believe it!\" The poor girl was a wreck, a pleasant wreck.\n\nSondra was also a wreck, but for a far different reason. Her coppery hair was matted against her forehead and cheeks, her body glistening in a sheen of sweat. Janey was having multiple orgasms, but Sondra was dying for just one. Every time she felt herself growing close, something would change. Thrusting would stop or start, caressing softness would stop or start, or those devilish devices on her nipples would try something new. She squirmed and gasped, pushing herself against the rigid frame and tie-downs that kept her from moving. Her hips undulated in tiny constrained circles as she fruitlessly exerted herself, trying constantly for that little bit of extra stimulation that she needed. She was so close, rising almost to the edge a half-dozen times, but nothing worked.\n\nA chime sounded, and Janey's devices stopped moving. As she looked quizzically down through bleary eyes, the two large dildos inside her pulled out, causing her to spasm one last time as they pulled out and shut down. She groaned in relief, sagging down into the sling.\n\nIt occurred to Sondra that 45 minutes was up, meaning that she had another fifteen minutes in which to come. With the little movement she had available, she desperately tried to thrust her hips back against the dildo that currently filled her up. It was buzzing softly against her inner walls, but was located in such a manner that it wouldn't pull her over the edge.\n\nJaney exhaled long and loud, her petite body slumping in exhaustion. \"Oh, my god,\" she breathed. \"That was fantastic. That last pair was so thick.\" Her hand slid down to her reddened pussy, stroking gently as if to confirm that it was still intact. \n\nSondra watched the fingers move from her perfect vantage point. She needed to come so badly. She was envious watching Janey's fingers stroking and sliding. All that she needed was a little touch like that and she would be in heaven.\n\nFor a long few minutes Janey lay still, relaxing and coming down from her high. Her hands slowly caressed her body. Meanwhile, Sondra's devilish devices once again took her to the precipice and left her hanging. The flicking across her clit stopped abruptly, and both the anal probe and vaginal dildo pushed into her. \"Aaaaaugh,\" she grunted. Her nipple devices were pulling hard, stretching her cruelly.\n\nJaney's eyes opened, her face in a blissful state. \"How you doing over there, Sparkles?\"\n\nWith labored breath, Sondra tried to concentrate on the devices inside her and their excruciatingly slow movements. \"Not ... very ... good.\"\n\n\"You don't like it?\"\n\n\"I ... love ... it,\" Sondra gasped. \"But it's driving me crazy.\" \n\n\"Have you cum yet? You promised to tell me.\"\n\nSondra jerked against her leather straps in frustration. Her nipples were being pulled and stretched mercilessly. \"No. And I have to really bad. It's killing me.\"\n\nLuxuriantly stretching her back, Janey slowly pulled her legs out of the sling, easing them to the floor. Sondra hadn't noticed before how well shaped her legs were, and how the sexy curve of her narrow hips perfectly framed her bare vulva. Janey's lips were still swollen and distended from their exertions. Sondra tried yet again to move her hips backwards. The vaginal dildo was in so deep now, so deep, but so slow. Her increasing frantic movements helped a little, but not enough, and all it did was increase her frustration.\n\nJaney stood on shaky and unsure legs, then slowly duck-walked forward. \"I'm going to be sore for a week,\" she said. Sondra felt a soft hand on her shoulder, which sent a warmth through her body. \"Concentrate, baby, you can do it.\"\n\nSondra tried to concentrate. She'd been trying for almost an hour now. Her rectum was filled with a slowly pumping invader, and her vagina as well, moving slightly faster. The suction on her nipples was now letting up, even though she wanted it to stay. \n\n\"I can't. I've been trying.\" Her fingers beat a pattern of frustration against the platform.\n\n\"Keep trying. You can do it.\" Janey pulled back Sondra's damp, sweaty hair, her fingers lightly massaging against Sondra's scalp. \"You're almost there.\"\n\nSondra glanced at the clock. 51 minutes gone by. She redoubled her concentration as Janey lightly stroked her back and encouraged her, but a few minutes later gave up. \"It's no use,\" she lamented. \"This thing is not going to let me come. It's like it knows when I'm getting close and changes what it's doing. It's so frustrating! And there are only a few minutes left.\"\n\nJaney looked at the clock, her mouth twisted in thought. At last she spoke. \"You want me to help you?\"\n\nSondra's heart skipped a beat. At this point she wanted anyone to help her, but Janey? Gorgeous, sexy Janey? \"Oh, yes. Please. Anything.\"\n\nJaney padded to the back side of the frame. \"Wow,\" she heard. \"This is amazing. It's got all sorts of stuff back here.\"\n\nA soft hand grasped her left butt cheek and spread it slightly. \"This thing is huge,\" Janey said. \"It's really inside you.\"\n\n\"I know,\" Sondra gasped. The light touch of fingers on her ass were even more of a tease than the dildo that was flexing into her anus.\n\nThe fingers explored around a bit, touching her ass, caressing her trapped inner thighs, then up from underneath to twirl her pubic hair.\"\n\n\"I can tell you're really excited,\" Janey breathed. \"What do you want me to do?\"\n\n\"Rub me. Rub me please.\" Sondra looked at the clock. Fifty-eight minutes.\n\n\"Your clitty?\" Janey giggled nervously.\n\n\"I can't stand this any more. Please.\"\n\n\"I can't really get to it. It's got a little flat paddle thing that's pushing against you. Oh, hey, it feels like it's vibrating.\"\n\n\"I know. But it's not enough.\"\n\n\"Let me turn that part off. Then I can get to you.\"\n\n\"Hurry!\" Sondra's hips were straining up and back. \"There's not much time left! Please!\"\n\nJaney hustled around to the front, standing directly in front of Sondra. Sondra looked directly into the smaller girl's breasts and erect nipples, so close that she could almost kiss them.\n\n\"It looks like this button turns off the clitoris stimulator.\" There was a slightly audible click, and the stimulation on Sondra's clitoris stopped. Janey padded back around.\n\n\"Are you sure you want this?\"\n\n\"Nnnnnh!\" Sondra groaned in frustration, wanting her clit to rub against anything, anyone.\n\nA finger lightly rubbed over it. \"Like this?\"\n\n\"OH! OH, YES!\"\n\nThe finger rubbed faster, and Sondra heard nervous laughter behind her. But she didn't care. At last she was moving steadily toward her long-awaited orgasm.\n\nAnd then the door opened. \n\nJaney leapt back from the frame, and Sondra spewed out a curse word in frustration. \"Dammit!\" She was so close that she was about to explode.\n\nGabrielle chuckled as the door closed behind her. \"Looks like we're having a little fun in here.\"\n\n\"I was just checking on her,\" Janey said defensively. \"We weren't doing anything.\"\n\nGabrielle chuckled again. \"Don't worry, it's allowed. You can touch each other all you want.\"\n\nSondra's face flushed red with frustration and embarrassment as the attendant came around to face her. She bent at the waist and looked directly into Sondra's eyes. \"How'd you do, honey? Did you come? You look exhausted.\"\n\nBefore Sondra could answer, Janey jumped in. \"She just needs another couple of minutes. Can you give her a little more time?\"\n\n\"I'm afraid that the room is booked.\" The foot pedals clicked and the twin dildos withdrew from Sondra as she moaned and cried out in frustration. \n\nGabrielle locked friendly eyes with Sondra and softened to her pleading. She reached underneath and Sondra felt fingers fiddling with the devices on her nipples, then moving up secretly to fondle her breast flesh. Gabrielle smiled conspiratorially. \"It'll take me a couple of minutes to get her loose, though. I'm not allowed to touch, but you can. And sometimes I've been known to make mistakes, too.\"\n\n\"Really?\" Janey's voice trembled with hesitation.\n\n\"Work her hard and fast.\" Gabrielle leaned in close to Sondra, her dark eyes and jet-black hair filling Sondra's field of vision. Soft hands began kneading her breasts. \"Cum for me, honey.\"\n\nSondra heard and felt Janey climb up on the platform behind her. Fingers began diddling her clitoris and pushing into her vagina. Gabrielle worked the nipple hoses loose, then began a full breast massage. Leaning in close, she nibbled Sondra's earlobe, then whispered softly, so softly that Janey couldn't even hear. \n\n\"You're beautiful, sweetie. I want to take you home and fuck you.\" A tongue pushed into Sondra's ear, causing her to squeal in delight.\n\nHer clit was getting Janey's full attention now, and her friend's fingers expertly pushed into her G spot.\n\nThe whispering continued. \"I want to tie you to my bed and eat you, and then make you 69 your girlfriend. Do you want me to eat you?\" Gabrielle nibbled Sondra's sensitive earlobe.\n\nSondra bucked and thrust against her bonds. A deep pleasure was rising in her hips, spreading outward. Gabrielle's hands kneading her breasts added to it and she began to spike.\n\nGabrielle kissed Sondra's neck, trapped in place by the rod and chin cup. Her breasts were squeezed, her clit rolled, her G spot rubbed. \n\n\"I want you to eat me out, too. Will you eat me out?\" Gabrielle leaned in close and offered a long, sensuous kiss.\n\n\"Mmmmmmm! Mmmmmmh!\" Having an orgasm when she couldn't move was an entirely different experience for Sondra. Her synapses exploded in pleasure and she stiffened and fought her bondage, unable to wrench her mouth away from Gabrielle's invading tongue. Wave after wave washed over her, amplified by the continuing attention she was receiving from her two suitors. Unable to help, unable to resist, she pleaded wordlessly for more, then more, then more, then suddenly was pleading for it to stop. When Gabrielle and Janey finally showed her mercy she collapsed into the framework, sagging into its support.\n\nBy the time she caught her breath, her arms and legs were being unbuckled. Barely able to communicate, she nonetheless had to do so. \"Thank you so much,\" she panted. \"That was the best orgasm I've had in my entire life.\"\n\nGabrielle had her left arm released now, and was moving to the right. \"I hope we'll see you again.\"\n\n\"Oh, you will,\" Janey piped cheerily.\n\n****\n\nThe mall was a busy place. People walked with shopping bags, pushed strollers, and window-shopped. At a table at the Cinnabon store, two exhausted young women sat drinking sodas and sharing a treat. They both carried a glow of satisfaction and exertion.\n\nSondra glanced over at Janey, and her friend smiled shyly back.\n\n\"You were wonderful in there. Thanks for helping me.\"\n\nJaney smiled a Mona Lisa smile. \"It was fun.\"\n\n\"Do you really want to go back again?\"\n\n\"Are you kidding? I'm going to live in there.\"\n\n\"Me, too,\" Sondra laughed, and the two women retreated to their own thoughts for a moment. It was Janey who spoke next.\n\n\"You know, we don't have to always go there, either.\"\n\nSondra's eyes flicked up and they made brief eye contact. \"You mean -?\"\n\nJaney shrugged, and Sondra noticed her nipples poking through her top. \"I had fun helping you out. Would you consider returning the favor to me? Maybe tonight?\"\n\nSondra broke into a grin. \"Let's head to the car,\" she said."
    ],
    "authorname": "BuckRivers",
    "tags": [
        "dildo",
        "machine",
        "device",
        "public",
        "exhibition",
        "display",
        "tease",
        "denial",
        "anal",
        "lesbian"
    ],
    "category": "Toys & Masturbation",
    "url": "https://www.literotica.com/s/that-fun-new-store-at-the-mall"
}
{
    "title": "Cherry Blossom Girl Ch. 04",
    "pages": [
        "\"Who hurt you?\" Noah repeated as he handed her his shirt. He sat at the foot of the bed, his eyes fixed on her. His body had taken on an eerie calm, as if he were bracing to absorb a blow or poised to unleash one. \n\n\"It wasn't like that,\" Sascha rushed to explain, fumbling with buttons. \"It's not what you're thinking.\" \n\nHe relaxed but his expression remained stark. \"Then what just happened?\" The mix of judgment and concern in his voice was the reason why she'd never told a soul, not even Ana, every detail of what had happened the last time she visited Alex's apartment. \n\nHow could she risk anyone defining their relationship by a drunken mistake that otherwise never would've happened\u2014one she knew Alex regretted? As long as she kept that night a secret, one moment wouldn't stain the good years they'd had. But her protective silence wasn't an option anymore. She couldn't allow Noah to cast Alex as a monster and her the helpless little victim. \n\n\"You've heard about the accident Robin Montgomery went to jail for, right?\" \n\nHe hesitated then said, \"What does that have to do with\u2014?\" \n\n\"I was in the car she hit. The boy that died...\" With the words came flashes of Ana begging her not to look at Jaime. \"He was my ex-boyfriend's brother.\" \n\nNoah sat upright.\n\nShe explained how the wrongful death suit had revived Alex's guilt and exposed the hidden resentment between him and his parents. Then she told him about the day that would've marked Jaime's twenty-first birthday. \n\n\"It was one thing to suspect that his father blamed him all along but knowing for sure was different\u2014it broke him.\" \n\nHer voice cracked under the strain of remembering Alex's grief but she didn't try to temper it. She needed for Noah to understand yet she knew he never truly could.\n\n\"I hadn't seen him like that since the night of the accident.\" The two police officers who tried to pry Alex from cradling Jaime gave up after their first half-hearted attempts. One turned away in tears while Alex kept the almost decapitated head in place. He'd gone hoarse screaming his brother's name as if it could bring him back. \n\n\"People talk about closure but there's never closure,\" she said in a derisive tone. Finally, after being as discrete as she could about her last time with Alex, she ended with, \"He'd never been rough with me, not once\u2014the opposite actually. And it never would've happened if he weren't drinking.\"\n\nNoah couldn't sit still any longer. \"The point is it never should've happened at all,\" he said while he pulled on his trousers.\n\nThe vanilla descriptions intended to neutralize hostile acts, the adamant defense and back story weren't new. His mother had done the same thing whenever Hugh had flown into his tirades. She'd painted him as a troubled hero, often misunderstood and overburdened by his work as a vice detective. \n\nThe ghost of sadness that haunted Sascha's face wouldn't affect him. He wouldn't imagine how it would feel to lose his brother on his watch, knowing he'd failed to do what older brothers were supposed to do: protect. He wouldn't let empathy reel him into the grey zone where what had been plainly wrong transformed into something unfortunate, a 'mistake' as she called it. That line of thinking let the Hugh Riavos of this world off the hook. It's what they preyed upon. \n\n\"He didn't mean for it to happen,\" she insisted. \n\nAh, the famous words. They hardened his resolve, reminding him that she'd dusted off the same old script and replaced the cop with the accident victim. It was all black and white from now on.\n\n\"What he meant doesn't matter.\"\n\nHer chin came up. \"It does to me!\" Her misplaced loyalty infuriated him. \n\n\"Right. And I bet he was all choked up and apologetic but that didn't stop you from freaking out just now, did it?\" \n\nIt struck him how small she was\u2014no match for a man loaded on alcoholic aggression. How scared had she been that night?\n\n\"It was just...it's been a long time and you're the first...\" Sascha buttoned her mouth. Too much information. And worse, Noah made her revisit things she didn't want to. Like the fact that while on an intellectual level she believed Alex would never willfully hurt her, her deeper instincts doubted him. As much as he'd expressed his regret afterwards, there'd been a moment when he'd needed for her to feel his pain. And if she hadn't been safe with the man she'd trusted then why surrender herself to a stranger? \n\nBut the pull was there. And she often led with her heart. \n\n\"I better go,\" she said as she got up and searched the floor for her clothes.\n\n\"You don't have to.\" He reached for her hand. \"Stay.\" \n\n\"Look, I don't want your pity.\"\n\n\"That's the last thing I feel right now.\" \n\nSascha studied him. No, she didn't doubt that he'd relish the chance to punish Alex. After devoting the better part of last year to someone else's needs, a man now stood ready to defend her and she found she liked it. A lot. \n\nAny chance of dismissing him as the hot neighbor flew out the window. And to top it off, the way he was looking at her... The pull was there, stronger now. And her gypsy heart wanted more...more of everything with him.\n\n\"You mean you'd still want to?\" \n\nHe shook his head. \"It's not a good idea\u2014not tonight.\" \n\n\"I understand.\" No she didn't but she had to focus on making a graceful exit.\n\nNoah caught her hand and tugged her closer. She looked like a kid at Christmas doing her best to pretend it was alright she hadn't gotten her biggest wish\u2014him. And he'd never been more flattered.\n\n\"Believe me, I want to,\" he admitted while he stroked her back. The hope he'd heard in her voice made him long to tumble back into bed and show her just how much, again and again. \"But you've had enough drama for one night.\" \n\nShe drew back, her pretty brown eyes full of disbelief. \"You still want me to stay even though we're not going to do anything?\"\n\n\"I didn't say that.\" \n\nSascha quirked a brow.\n\nHe ran his thumb across her lower lip. \"See, I might want to kiss you here.\" His fingers followed the path his eyes led down her neck. \"And here,\" he murmured as he grazed the soft material to reach her breast. He smiled when she arched into his palm and he felt the rising proof she wasn't afraid of him. \"And a few other places too.\" \n\n\"I might want to kiss you ba\u2014\"\n\nShe sighed at the first velvet stroke of his tongue against hers. The light licks at her upper lip made her hot, the gentle nips at the lower one left her giddy. \n\n\"Kiss me...harder.\" She didn't wait for his compliance, she couldn't. She rose on her tiptoes, eager to touch her mouth to his again. He remained still for one ragged breath before he kissed her slowly. The only sign of the effort it cost him to be gentle was the feel of his fingers grazing her nape while he fisted her hair. This beautiful man was doing his best to make her feel safe with him. His restraint emboldened her.\n\n\"Don't hold back,\" she whispered before she took his mouth. \n\nTheir kiss turned more erotic with every swirl of his tongue around hers. They fell into a rhythm, teasing, tasting, playing. Her eyes drifted shut as his taste drifted through her senses. Thoughts spun away. Latent desire flared to life as his hands molded her to the hard lines of his body. She rocked against him, trying to soothe the steady pulse of arousal between her legs. As close as they were, it wasn't enough. He felt so good. She must've told him so when they broke apart because he said, \"You too,\" as his mouth glanced down her neck to her collarbone. She clutched his shoulders when she realized his intent. He'd promised to kiss her in several places. Did he mean...?\n\nShe was caught between imagining what was to come and the wait. The hot, sweet waiting as his fingers undid a button, as his breath fanned her nipple. Then came the first flick of his tongue. \n\n\"Please...harder.\"\n\nHe released the stiff peak and rubbed his face over her chest in that gentle-rough way she'd started to love. Her fingers sifted his hair, holding him to her as the soft scratch of stubble sent shivers over her skin. \n\n\"Noah! Oh, my\u2014\" The gentle scrape of teeth on her nipple followed the warm tug of his mouth, took her words.\n\n\"You like that,\" he rumbled, sounding confident and pleased as his thumb dragged across its aching twin. \"Tell me.\" \n\n\"I-I like it. Do it again.\"\n\nSoon they were stumbling over clothes, kicking them away, kissing skin, stumbling again, and laughing as they fell onto the bed. Sascha felt light and free and happy. If fate intended this night with him to be a fleeting gift, she'd take it.\n\n\"Noah?\" The trace of hesitation in her voice made him pause as he worked on a button. When he looked down at her he sensed she was about to say something he wouldn't like. \n\nShe rested her hand on his. \"Is this a one-time deal?\" He tensed. \"It's okay if it is.\"\n\nThis could get complicated. Fast. It didn't take a brain surgeon to figure out she wasn't fuck-buddy material. And even if he did make time for her, the odds were stacked that she was rebounding. Plus she lived next door. This was an open and shut case.\n\nBut there was one problem. \n\nThey weren't sitting at a table, or dancing at a club or outside his doorstep. No, she was in his bed, all soft and eager and dressed in his shirt. This was complicated.\n\n\"I hadn't thought that far ahead.\"\n\nShe laced her fingers through his. \"But if you did?\"\n\nHe surprised them both by admitting, \"I don't know if one time would be enough.\" \n\nShe brought his hand to her breast. \"Maybe we could take it one step at a time and see? I'm not asking for any promises. Just that we be honest with each other.\" \n\nComplicated, complicated. Still, he wanted her above anything else, consequences be damned. So much for the voice of reason.\n\n\"One step at a time,\" he repeated as he cupped her. A perfect fit.\n\nAnticipation roared in her veins as he undid the last button and opened the shirt. They'd been so caught up in each other before there'd been no time to feel shy. Now she lay bare beneath his deliberate gaze. She adjusted the shirt near her right hip as an inventory of flaws played in her head. If only the angels had gone for an even distribution of curves instead of consolidating everything in the back.\n\n\"It's going to be lots of fun finding out what you like,\" he said as his hand swept between her breasts and down the line of her stomach.\n\nShe touched his jaw. \"I liked your beard.\" \n\n\"Yeah?\" She nodded and let her fingers fall over his skin down to his piercing. \n\n\"And I'm going to find out what you like,\" she promised when he leaned into her hand. \n\n\"Something tells me you'll be very good at it.\" \n\nHis mouth touched hers just as his palm covered her sex. The dual assault began with light, inquisitive strokes that became bolder then deeper. Soon he had her, writhing, getting wetter, and edging closer. Their labored breaths replaced the soft, wet smack of the ended kiss while Noah strummed her with his clever fingers.\n\nA wicked grin played over his mouth. \"Not yet.\"\n\nSascha frowned. Alarm sliced through the sensual fog around her as she realized his intent. He'd already slid to the floor and was on his knees before she could stop him. She swallowed at the sight of him there. \n\n\"Noah, wait\u2014\" She barely got the words out before he grasped her hips and pulled her to the edge of the bed. She stiffened when his thumb brushed over the raised, jagged scar on her right hip.\n\n\"It's from the accident,\" she explained, addressing the question she read on his face. There'd never been a need to talk about it before. The only people who'd seen her scar were the ER doctor who'd tended to her and Alex. She rarely studied it and hoped Noah would move on.\n\nA dark look crossed his face. \"Were you hurt badly?\"\n\n\"No.\" Not on the outside. \"It looks much worse than it was.\"\n\nHe traced the scar and he kissed it. \"You're perfect.\" Her heart winced. His tender expression was too much to bear. \"Hey.\" He waited for her to look at him again. \"I mean it. This,\" he said while he smoothed her hip, \"this shows you're a survivor.\" And just like that an invisible weight lightened.\n\n\"Thank you.\"\n\n\"Don't thank me yet.\" He caught hold of her knees and lifted them apart. \"Now where were we?\"\n\nAnticipation skated over her skin at the thought of his mouth on her yet she forced herself to say, \"You don't have to\u2014\"\n\n\"I know.\" Even his smile said so. \"I want to.\"\n\nApprehension and excitement warred with each other as he draped her leg over his arm. \"Please...\"\n\nHis brows furrowed. \"You don't like this?\"\n\nIt was on the tip of her tongue to lie as she sat up on her elbows. Yes, she'd enjoyed this intimacy. But that was before she sensed Alex hadn't. She never asked him if it had been the act itself or something about her that turned him off. He was too kind to ever admit to either one. \n\nAfter her gentle refusals, Alex stopped his offers of oral pleasure. It was just as well since the idea he'd only done it out of obligation had robbed her of any enjoyment she'd have gotten. \n\nBut just this once. \n\nWhat if Noah didn't like her taste? Was he one of those men who preferred his women completely bare? \n\nA rising sense of dread lodged in her throat before she spoke. \"It's fine, you don't\u2014\"\n\nHe bent his head. Her eyes went wide. He'd misunderstood! She let out a frightened whimper as he kissed his way up her inner thigh but her mouth couldn't form the words to protest. \n\nHe eased her leg over his shoulder. \"Ssh. Only this, I promise.\"\n\nShe jerked when he nuzzled her curls then parted her slick flesh. This was really happening! Even as she watched him do it, his tongue's first butterfly touch stole her breath. Then his mouth settled in. \n\nSascha sagged onto the bed and came apart. \n\nHe held her steady, making sure he tasted every bit of her pleasure while she bucked and thrashed about. She was still coming down when he finally raised his head. He proudly surveyed the evidence of a job well done. Mascara smeared the inside corners of her eyes. Her cheeks and the tip of her nose were stained cinnamon. Unable to resist, he blew air along her slit just to see her react. She shuddered, gasped then sighed. What a beautiful, beautiful mess. \n\nAnd he hadn't even started with her.\n\nShe watched with dazed eyes as he lifted her leg off his shoulder. \"You're welcome.\" \n\nHe expected her to hit him with a dose of sarcasm or maybe even blush. Instead she studied him with an inscrutable gaze as she drew her knees together. \n\n\"Thank you.\" Her voice was low and scratchy with satisfaction and something else he couldn't name. He wasn't sure what was going on in that mind of hers but he'd have her attention\u2014all of it and soon.\n\n\"My aunt started teaching a tantric sex workshop while I was in high school,\" he began and sure enough, she sat up, holding the shirt panels together with one hand. \"I thought it was kooky stuff at first but senior year, my curiosity got the better of me and I borrowed some of her books.\"\n\n\"She let you do that?\" Even today, Sascha could never imagine her parents offering a sex book and saying, \"have at it\", much less in high school.\n\nHe paused, his eyes full of mischief. \"Maybe borrowed was too strong a word.\" She laughed and shook her head. Yes, she easily pictured him as a precocious hell-raiser. He probably had that bad-boy grin back then.\n\n\"Everything I read about the different kinds of orgasms a woman could have and refractory periods and how to push the pleasure threshold made it sound like you had to be an engineer in order to get a woman to come.\" He spoke as if they were longtime friends catching up at a coffee shop. And oddly enough, she felt...comfortable\u2014sort of. \n\n\"It took a while to figure it all out but the payoff was worth it,\" he said in a low, playful tone that didn't match his gaze. Those green eyes were all business. The hands that had smoothed her thighs in slow circles now nudged her knees apart.\n\n\"Open for me.\" His gruff command sent a rush of heat across her skin. When did bossiness become so sexy?\n\n\"It's too soon,\" she reasoned even as she parted her thighs. \n\n\"Not for this.\" He dropped a kiss above her knee then grabbed her hips, pulling her to the edge of the bed. \n\n\"Or this.\" His teeth raked the shell of her ear, making her squirm and gasp with delight. \"I love the sounds you make.\" The smile she heard in his voice sent her feminine pride soaring.\n\n\"You do?\" \n\nHe cradled her face. \"Uh-hmm.\" She'd pleased him. And she had plans, big sexy plans for this man.\n\nHe was still nodding when he fit his mouth to hers. Startled by her own taste, Sascha let out a muffled gasp. Noah took full advantage, his hands holding her in place while he deepened the kiss. It was carnal and decadent and forbidden. Everything she'd longed for but never expected to have, was right here. She cupped his face and kissed him back, returning his ardor. Tonight she would go wherever this need led her.\n\n\"Lie down.\" \n\nHe traced her clavicle with reverent fingers, his eyes following the movement as if he were mesmerized. His lips followed. She knew what was to come the instant he focused on her breasts and arched up when his fingertips neared her nipple. \n\nEager for another taste of her, Noah lowered his head and took the little brown peak into his mouth. He cupped her other breast, testing its softness and weight before he circled it with his tongue. Her fingers tangled in his hair and pressed him closer as she writhed. He could easily become addicted to her body and the way she responded with those halting breaths and tight moans, letting him know exactly what she liked. He dropped a kiss above her heart before he caressed, kissed and licked his way south. \n\nHer head rolled from side to side as he circled her navel with light, teasing nips before his tongue dipped in. This time when he pushed her thighs apart, she gave herself over to him without hesitation. He stared at her and thought back to the countless times he fantasized about having her like this on his sheets. The reality put his best imaginings to shame.\n\nHe bent his head and drew in her earthy scent as he brushed over the top of her trim curls. Now he knew how she liked to be touched, he'd take his time and savor her.\n\n\"Do it.\"\n\nHis head snapped up. Her show of fire made his cock press against his pants. He'd always craved a woman who demanded he win his mastery of her.\n\n\"Do what?\" he asked while his thumb danced along her slick seam.\n\n\"Kiss me,\" she whispered. Her impatience made her bold. \n\n\"I've wanted to for a long time.\" \n\n\"Yes... right there.\" His breath melted her as his fingers opened her for his kiss. Softness. Warmth. Suction. Bliss.\n\nSascha touched him wherever she could, his shoulders, his back, always returning to his hair. When he groaned against her clit the sound vibrated through her like waves. His fingers sought the pleasure inside her, making her buck and twist as she climbed up and up. Meanwhile his tongue licked her into a carnal frenzy. Praise fell from her lips in broken words and soft sounds. She reached for the hand sweeping across her stomach and held on. That's when she saw the image in the mirror above his dresser: Noah's blonde head between her thighs, his shoulder muscles flexing beneath his tattoo. \n\nShe felt every twist of his head, every sway of his fingers while she watched him feast on her. She saw her back arch off the bed as pleasure lapped at her. It was the most erotic, decadent experience. And still she was climbing. Hot sensation gathered, coiling deep within her. He kept pushing her to a slow build that was picking up speed. She fisted the sheets as her climax drew in, pulsing, gaining intensity. Up and up she went.\n\nShe called out his name on a hushed plea, unsure if she needed him to stop or wanted him to continue. Her climax came in relentless waves, rippling through her in one aftershock after another. Yet he wouldn't relent. How much pleasure could a body take?  ",
        "And then she found out.\n\nShe grabbed a pillow and poured every remaining sound she had into it.\n\nCertain he'd wrung every drop of pleasure out of her, Noah withdrew his fingers from her snug sheath. Sascha was so far gone now, she'd let him do whatever he wanted. And he wanted nothing more than to feel her flesh clasp his cock the way she'd done with his fingers. He tugged the pillow from her but she held on. The gesture stirred something between amusement and tenderness inside him. \n\n\"Are you going to hide under there forever?\"\n\nShe peeked at him, mumbled, \"Uh-hmm\" and pulled the pillow over her head again. Too cute. But he had to see her face when he slid into her. \n\nHe grabbed it from her and tossed it aside once he got up. Her eyes were heavy lidded as she slowly rose up on her elbows and scooted back to the middle of the bed, releasing him from his promise. She knew he was about to fuck her and she accepted it. He reached for the zipper but what he read on her face wasn't enough. \n\nHe knew exactly what he wanted. That wouldn't change come daybreak. But was Sascha coasting along, caught up in the heat of their attraction just like the last time? Would she be wary of him tomorrow too? \n\nShe drew in her lower lip, the gesture brief and unconscious. Hell, she looked wary right now. Willing but wary. That wasn't good enough. Besides, he'd given her his word. She might not know it yet but that counted for something. As much as he ached to feel her under him, his pleasure wouldn't come at the expense of her trust. He was nothing like her ex. \n\nThat's what he told himself as he tried to coax away the demands of his hard-on and the disappointment of not taking what he wanted. He imagined he'd be cursing himself tomorrow for passing this up. Ah, fuck. He already was. \n\n\"Don't you want...what about you?\" she asked as he fished out a pair of shorts from the dresser. No way could he chance sleeping naked with her. As if he'd sleep a wink. What had he been thinking when he invited her to spend the night?\n\nTheir eyes met in the mirror.\n\n\"Come here,\" she said, sounding bossy and shy at once. He met her at the side of the bed where she knelt.\n\n\"I promised you I wouldn't\u2014\" The feel of her hand stroking, the soft abrasion of his trousers against his cock banished all thought. Urges wracked his body but doubt met up with the last of his willpower. He caught her wrist. \"You don't have to do this.\"  \n\n\"But you want me to.\" \n\nHe couldn't deny it but he didn't want her doing this for the sake of a fair trade. \"That's not\u2014\"\n\n\"And I want to. Isn't that the point?\" she asked, her eyes full of mischief as she slowly unzipped him. His heart beat drummed louder with each parting of those metal teeth. She looked up at him with a vixen smile. \"Relax. I promise I won't compromise your virtue.\"\n\n\"Just like high school, huh?\"\n\n\"My high school years were very uneventful. My dad was the principal so none of the boys would dare look at me.\"\n\n\"Really? Getting into trouble with the principal's daughter sounds kind of hot.\" \n\nShe chuckled. \"I think the threat of expulsion took care of that.\"\n\n\"I have a feeling\u2014\" he inhaled when his trousers fell in a pool around his ankles, shackling him \"\u2014you were worth it.\" \n\nThe principal's daughter proved him right as her hesitant fingers closed around his shaft.\n\n\"This would've definitely been worth getting expelled for.\"\n\n***\n\nThere was no place like the Balthazar Luxe's Meeting Services offices on a Wednesday afternoon. Around two o'clock, with lunch over and deadlines looming, the energy always turned frenetic. A symphony of ringing phones rang and buzzing voices filled the air, questions and answers and footsteps crowded the hallways. Hands were never without paper. \n\nSascha handed Helena a conference itinerary to fax out for a client's confirmation just as Liya stomped past them. \n\nShe peeked in Liya's office in time to see her slam the file drawer with enough force that an inquisitive hush fell over the department. The frenzy resumed a heartbeat later. \n\n\"What's up?\"\n\n\"Oh, take a guess.\" Balty.\n\n\"Your friend Isabel and her fianc\u00e9 came in for the tasting,\" Liya began, surprising Sascha with the information. Strange that Isabel hadn't called as she'd said. \"Anyway we're in the middle of the walk-through before Gary gets there and she asks me about the possibility of switching back to ballroom two because there might be additions to the guest list.\" \n\n\"Okay?\"\n\n\"I had the schedule with me, so I knew right off that if we moved her to two, there'd only be an hour to turn the room over. So I explained to her that it might not be feasible because of the meeting booked in the same room. Before I could tell her I'd look into it and see what could be done, the Ogre walks in and pulls me outside.\"\n\n\"Sascha, he completely went off on me, saying how I was discouraging an up-sale, that I had no business sense and that I didn't know how to deal with clients.\" \n\nSascha winced.\n\n\"Oh, that's not even the worst part,\" Liya said with a wave of her hand. \"Gary came down just as this was happening and heard every word. I've never been more humiliated.\"\n\n\"I'm so sorry.\"\n\nLiya paced behind her desk with her palm to her forehead. The weight of her frustration carried in her voice as she said, \"I don't know how much longer I can take this. I work my ass off everyday\u2014everyday! I might as well not bother at all.\"\n\n\"You're doing great, everybody sees it and I know next quarter he'll tell you so himself.\"\n\nLiya's body language wilted in defeat as she folded her arms. \"I don't think I'll be here that long. I'm tired of walking around all day with my stomach in knots.\" This wasn't the first time she'd talked about quitting, but she'd never sounded this resigned or resolute.\n\n\"C'mon, you can't mean that!\"\n\nA knock on the opened door startled them. The look on Liya's face announced their visitor well before Sascha turned and saw Gavin Balthazar in the doorway, tall and imposing, his dark eyes calculating.\n\n\"We need to talk.\" \n\nEvery molecule in the small office changed after he said the dreaded words. \n\n\"Is Isabel still here?\" Sascha asked Liya before she turned to leave.\n\n\"She should be.\"\n\n\"Shut the door on the way out,\" Balty said without sparing a glance Sascha's way. He wouldn't have lasted a week in Guest Services with those people skills. She sent Liya a sympathetic look and pursed her lips at her boss' back before she headed downstairs.\n\nIsabel and her fianc\u00e9 Nate Walkenshaw were sampling a lobster dish when Sascha walked into the ballroom.\n\n\"How's everything going?\" she asked after greeting them and Gary, who worked in catering. \n\n\"Everything else about this wedding should be as easy as this,\" Nate told her. It was one of the rare occasions when he spoke about anything wedding related or that Isabel let him. \n\n\"I would've come down sooner if I'd known you were here,\" she said in a casual tone that didn't jive with her sense that something was off.\n\n\"It's been such a crazy day,\" Isabel complained, her hands all aflutter but a chilliness remained. \"It wasn't until after we got here that I remembered I didn't call you. I'm sorry thought Liya would tell you.\" Nate's cherubic face remained curiously neutral. \n\nAfter a few minutes of polite conversation, Sascha explained she had phone calls to make and excused herself. She'd neared the elevator when Isabel called after her.\n\n\"There's something I wanted to talk to you about if you have time.\"\n\n\"Is something wrong?\" Sascha asked as they walked to the alcove near the guest phones. Tabloid reports had surfaced about the details of Isabel's lavish wedding. With the trial date looming, the Montgomery PR machine had obviously gone on the offensive by cloaking the Cortazar name in greed. \n\nIsabel squeezed her nape as if the pressures of media criticism and orchestrating a fairytale wedding now resided beneath her ponytail. \"No, ah...not really,\" she said, her throaty accent more pronounced. \"I hope you're not bringing anyone to the wedding. You know it wouldn't be appropriate.\" \n\nCompletely broadsided by the declaration, Sascha blinked then blinked again. So the frosty reception had been about the fact that she'd gone home with Noah. No doubt Sydney and Taryn would've filled in Isabel on the details of what had happened once she'd left with Rafi. That they all assumed she'd slept with a stranger, embarrassed Sascha. Sure she expected a little flak but never this kind of reaction, especially from Isabel. Not when she'd teased Sascha about him.\n\n\"If you're talking about a date, no I wasn't planning on bringing one,\" she replied in a clipped tone.\n\n\"I don't want things to be awkward for Alex, I hope you understand,\" Isabel backpedaled, sensing she'd crossed the line. \"We already have so many problems already, I don't want to have to worry about the two of you on my wedding day.\" \n\nSascha took a breath, resenting the guilt tactics and having to cow to the it's-my-wedding-day rule. \"Alex and I broke up six months ago, okay? And it wasn't all my idea, so if I decide I want to bring a date to your wedding, that's my prerogative.\" \n\nIsabel opened her mouth. \n\nWith a hand raised in warning, Sascha cut her off. \"But I'm not going to because your wedding should be about you and Nate, and I respect that.\"\n\n\"I'm sorry, you know I didn't mean to offend you but Alex still loves you and I know he'll be thinking that it should be the two of you.\" Isabel touched her arm and added gently, \"Don't tell me you won't be thinking the same thing.\" \n\nSascha couldn't hear this right now, couldn't take Isabel exhuming old dreams. It hurt too much to picture the day she'd be standing across the aisle from Alex. Just not the way she'd envisioned.\n\n\"If he really wanted us to be together then we would be.\" The truth stung even after all these months.\n\n\"That doesn't mean he doesn't love you. He still does. Don't give up. Look at Nate and me.\"\n\nShe swallowed the coppery taste of loss and disappointment. \"It doesn't work out that way for everybody. Believe me, we tried.\" No, I tried. That was the part that still needled at her. The wondering what the outcome would've been if Alex had met her halfway instead of giving up as though they weren't worth fighting for. As if she wasn't worth fighting for. \"I'll always care about him but it's time to let go and move on,\" she said, hoping Isabel would take the hint and drop the topic. For good.\n\n\"Don't throw away a chance to get back together over a random hook-up. It's not worth it just because you're feeling lonely.\" \n\nOh, no she didn't! Sascha prayed and counted, counted then prayed for an extra dose of patience but the patronizing snipe reverberated in her head. \"I didn't throw away anything! And it wasn't a random hook-up. It wasn't the first time and it won't be the last.\"\n\nIsabel's eyes went wide but Sascha's little victory fell short. Judging by Isabel's hard expression she'd just lost her good-girl halo. \n\n\"I hope you know what you're doing.\" Did she?\n\n\"My boss knows I'm down here, I better go.\" \n\nIsabel turned, seeming just as eager to part ways. \"Sascha?\" She hesitated then said, \"Be careful.\"\n\nIt took the rest of the afternoon to recover from the conversation. She did her best to keep the shifting storm of emotions at bay but her mind zeroed in on the fact that another Cortazar had cast her aside, judging her as if the years of friendship suddenly stood for nothing. And it stung. Why was she evil for not waiting for Alex to come around?\n\nBy the time she left the office, a feeling of injustice had given birth to a new resolve. If she was going to suffer the penalty she might as well commit the transgression. No more dancing within the lines of propriety and wondering if she'd ever taste the passion everybody else gorged on every day. No more hesitating about Noah.\n\nHe was just what she needed right now. Love and a new boyfriend would come... eventually. But what a relief to not have to unearth a magical ratio of smarts, sex appeal and humor to prove she was worthy of his attention. He'd made it clear he wanted her but wouldn't make a move until she invited him to. Tonight she would.\n\nA spirit of adventure carried her home and propelled her to leave him a mysterious phone message, one that made him call back right away. She darted around with a six-pack of cleaning products, music on while she cleaned an already pristine apartment. She set out candles then removed them\u2014he might find a candlelit bedroom too heavy handed. Then it hit her. She was taking a lover. The more she thought about it the more her excitement grew. Look out world. Sascha Davis was making her comeback!\n\n***\n\nThis had to be the most amazing Aussie kiss ever. Slow and wet and lots of swirling tongue. \"Ah, yes,\" Noah breathed while he fisted Sascha's hair and guided her head. \"Take it deeper.\" His body arched into a bow, offering her more of his shaft. The pleasure was almost too good to bear. \n\nShe released him from her mouth with a wet, naughty pop. \"Did you bring condoms?\" \n\nHis cock lurched. \n\nSascha kissed the tip and laughed. \"I'll take that as a yes.\"\n\nBefore his feverish brain formed its next thought, she eased back to the middle of the bed and spread her legs in blatant invitation. He swallowed at the sight. No, their high school sex wouldn't be enough tonight. The need to be closer burned too hot. But he had to go slow with her. He was determined to stamp out every touch that came before his. \n\nThe first time with someone always felt like a dive into the unknown\u2014that was part of the excitement; the feeling of discovery, learning how to fit with and pleasure an unfamiliar body. But not since he'd fumbled around with his first girlfriend had Noah felt this nervous. He wanted to make this a night she'd long to have again. The look on her face told him she believed he would.\n\nHe felt her gaze on him while he fished a pair of condoms out of his pants pocket. He'd put them there, hoping her invitation would lead to this. Her brows knitted together when he tucked a packet under the pillow behind her. \n\n\"Have to make sure you're ready,\" he said as he knelt between her legs. The words hit her like an aphrodisiac, making her hungry for the moment when he joined her at last.\n\n\"I am.\" She gasped when his palm covered her sex. His touch felt possessive. \n\n\"Almost.\" One then two fingers slid inside her. She bit her lip. Her body was responding as if she hadn't climaxed on those very digits earlier. \"See?\" he rasped while his other fingers circled her clit. \"You're getting wetter.\" \n\nPleasure unfurled in long, lazy ribbons. She sagged onto her elbows then finally onto the pillow. Her knees fell open and she surrendered to the inevitable. \n\n\"Now that I've got your attention, we should go over some ground rules.\" \n\nSascha blinked, \"You want to talk now?\" To her surprise he nodded as his fingers curled back and forth within her. \"Wha-what are ...the rules?\" She'd agree to anything just to get more of that delicious friction.\n\n\"They're simple. One: If you like something, you let me know. If you don't like something, you let me know.\"\n\nShe squirmed against his hand. \"Oh-kay,\" she said on a rushed breath as he gave her what she craved. \"Two...\" His green eyes bored into hers. \"No faking. Ever.\" That one hit close to home. \"Good sex is more than you coming with me inside you.\" Coming with me inside you. Her mind latched onto the images his words conjured. She felt restless and hot and tingly. She needed to feel his skin rubbing against hers, needed to feel him moving within her.\n\n\"Do we understand each other?\" It sounded more like a command than a question.\n\n\"Yes. I have a rule too.\" She reached for the packet beneath the pillow and grinned. \"Enough with the talking!\"\n\nHe pressed his smile to hers, laughter rumbling in his throat before he declared, \"Whatever the lady wants.\"\n\n\"The lady wants this,\" she said as she helped him roll the latex sheath over his shaft. \n\n\"Does she now?\" He had her on her back and was nestled between her thighs before she answered. She resorted to a quick nod as he settled over her, his elbows near her head. Remembering their last time, Sascha reached down and rubbed the tip of his cock near her entrance. \n\nShe cried out his name and shuddered at the feel of his shaft sliding over her slick heat. Like pieces of a puzzle eager to join, they fell into alignment once, twice, three times. By the third time Noah anchored her hip to the mattress, keeping her in place. The head nudged forward then slipped inside her. At last. \n\nShe took a sharp breath and waited for his first thrust. He rocked over her in small, steady motions instead. With every withdrawal, her fingers clutched his back, a silent plea for the return that would bring him a little deeper inside her.\n\n\"Breathe,\" he whispered as her body slowly yielded to his penetration. Until he said it, she hadn't realized she'd been holding her breath. Her mind had succumbed to the sensory overload of being pressed into the mattress, his stomach brushing hers, and those green eyes holding hers. He pushed deep then deeper still, stretching her as they joined. The fit was so close she gasped. \n\n\"Easy. Try to relax.\" \n\nHe forced himself to stay calm as he settled within her. She jerked but didn't look away. Suddenly he understood. Sascha was working withhim. Sweat beaded his skin. He felt her writhing beneath him, trying to get all of him inside her. \n\n\"Rock your hips up\u2014yes!\" \n\nHe fisted the pillow and mentally recited the skeletal system as her softness slid along his shaft. She felt so good around him. Too good. \n\nIntent on giving her time to accept him, he turned his attention to her right breast. Truth was he needed the distraction while he adjusted to the feel her. The gentle rake of her nails across his scalp, neck and shoulders were a sweet torment.\n\nHis tongue flicked her nipple before he suckled her. He barely heard her call his name. \"Hmm?\"\n\n\"Do something!\" \n\nHe released the tempting little peak from his mouth and smiled down at her.\n\n\"I am doing something.\" He lowered his head to her left breast and drew her into his mouth. She took a sharp inhale and twisted under him.\n\n\"See?\"\n\n\"I can't believe you're teasing me now.\" Seeing her flustered like this was sort of cute. And hot.\n\n\"Not teasing\u2014pleasing.\" He kissed the valley between her breasts. \"There's a difference.\"\n\n\"I need\u2014\"\n\n\"A little more friction?\" She blushed.\n\n\"You're bad!\"\n\nHis lips curled. \"Oh, you have no idea.\" \n\nSascha felt like captured prey. And no other woman craved her entrapment more. He swiveled his hips, setting off ripples of sensation as his cock stirred within her. \"Does it feel like I'm teasing you?\"\n\n\"Yes...no,\" she breathed as he moved in a series of quick, shallow strokes followed by a long drive. He seemed to follow a deliberate rhythm, with those deep thrusts gradually replacing the shorter ones. Her head thrashed about the pillow. Each little pump left her eager to have him deep again. Every relentless stroke sent him sliding across deliciously sensitive nerves. \n\n\"Noah... good...so\u2014oh!\"\n\nShe was caught in a maelstrom of building sensation. Her eyes fluttered shut. \n\n\"No, look at me.\" \n\nSascha found him studying her as if he had to understand everything about her in one gaze. She'd been stripped bare and thrown in the path of a force much greater than she'd ever known. But if she held his gaze, somehow she could match it. \n\nThe determination she read in his face was daunting. But something flickered beneath the surface, something that made her brave. Vulnerability. He wanted her to enjoy being with him, enjoy what they were doing together but he wasn't sure she would. Eager to reassure him, Sascha pressed her lips to his neck, tasted the salt on his jaw then kissed the corner of his mouth. He rose up on his arms. That was the moment she let herself fall into the fire.",
        "***\n\nThe slow, sweet pace Noah intended turned desperate the instant they rolled across the bed and ended with Sascha straddling him. She rode him tentatively at first but her arcing movements grew faster and sharper as he praised her. The sight of swaying breasts and rolling hips mesmerized him. She planted one hand behind her on his leg while her other hand slid down her bronzed body. This was pure fantasy.\n\n\"Touch yourself,\" he rasped when he realized her intent.\n\nInstead she brought his hand to where they were joined. \n\n\"You do it. Again!\" she cried while she writhed against his fingers. \n\nFeeling her glide down his length as she repeatedly impaled herself threatened to slash away the tethers on his self-control. He gripped her backside, encouraging the very rhythm that had him covered in sweat.\n\nShe slumped forward and fisted the sheet, her back arched like a cat as tremors wracked her body. Those tight, breathy sounds he had to strain to hear reached him in a way the cheerleader squeals of old hadn't. He wrapped an arm around her waist and pistoned into her with quick, measured strokes, doing everything he could to draw out her pleasure. Pride flooded his veins as her flesh spasmed around his shaft.\n\n\"I'm sorry,\" she whispered between whooshes of air then sagged onto his chest. Still, her hips pumped against his as if her body demanded every bit of pleasure he had to offer.\n\nAfter a weak chuckle, he asked, \"What for?\" His fingers traveled down her spine while he waited for her to elaborate. \n\n\"So tired.\" She raised her head and peered up at him with sleepy brown eyes. \"And you didn't come yet.\"\n\nSascha let out a startled, \"Wha\u2014?\" when he sat up, forcing her upright. By the time she figured out his plans, Noah had her on her back near the foot of the bed. His body blanketed hers. This was his turn.\n\nHe brushed back the hair that clung to the sides of her face and laid kisses there, while his pace sped up. Her virgin bed squeaked.\n\n\"Don't hold back.\" \n\nHis jaw twitched. \n\nShe folded her legs around his thighs and pulled him closer, urging him to take the satisfaction he denied himself. \"Don't fight it.\"\n\nNoah claimed her mouth before she repeated the words, before he gave into temptation. The kiss turned into a projection of the aggressive thrusts that would frighten her. The need for release kept building and he feared he'd be helpless against it, feared that despite his best efforts, he'd give in and take her the way he been craving for months. Hard and without mercy.\n\n\"Close,\" he grunted, warning her before the pressure barreling up his cock burst into pleasure. A moment of calm stretched out over every other thought, every other feeling he possessed. It vanished in the next breath.\n\nSascha watched as Noah's brows furrowed. He seemed to be striving for his climax yet fighting it at once. She held him closer and canted her hips, increasing the friction of his strokes. The hoop attached to his nipple flicked back and forth over hers, making her clench around his girth. His entire body went into a spasm. And still he resisted.\n\n\"Let go.\"\n\nNoah swore. \"You don't understand...\"\n\n\"Let go.\"\n\nColor bloomed across his cheeks and the veins in his neck flared out before he threw his head back. His hips pressed down against her in a relentless grind that triggered ripples of pleasure. Agony, relief and finally joy lit his face. She'd given him that. With a ragged cry of her name leaving his lips, she watched him plummet over the edge. \n\nAfter he collapsed against her, Sascha stroked his damp shoulders and back, soothing him while his breath came in quick bursts. His deep, rumbling groans filled her ears. She'd never felt wanted like this, had never heard her name called with such affection, such pleasure. But she'd wondered about it. The curiosity and longing she'd suppressed out of love and loyalty was now tainted with regret. All that time, all that self-reproach wasted. But he'd been worth every second of her wait.\n\nA feeling of peace distorted Noah's sense of time and space. Simple thoughts trickled in one at a time. Taking the next breath. Soft hands drifting over his back. Sascha. The last thought made him kiss her hair. He had to see her sweet face. The instant he saw her shimmering eyes he froze. He'd done his best to be careful with her and failed.\n\n\"Sascha, I'm\u2014\" She cradled the side of his face and brushed her thumb along his mouth. \n\n\"This was everything I wanted.\" The wonder in her voice hit like a drug, searing its way past skin and bone to create a permanent need\u2014if he let it. A man could do all sorts of crazy things to have his woman watch him with such amazement. \n\nHe pressed his mouth into her palm. It was the most natural thing to do. Something was starting here. Noah wasn't sure what it was or if he wanted it. But the peace he'd felt mere seconds before had vanished. \n\n*\n\n*\n\n*\n\nMany thanks to Evanslily and the red pen that spouts lilac ink."
    ],
    "authorname": "August_Bouvier",
    "tags": [
        "interracial romance",
        "neighbors",
        "romantic drama"
    ],
    "category": "Interracial Love",
    "url": "https://www.literotica.com/s/cherry-blossom-girl-ch-04"
}
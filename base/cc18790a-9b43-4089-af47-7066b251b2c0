{
    "title": "Brad's Road Trip Ch. 18",
    "pages": [
        "This is the second half of the day that began in Chapter 17. I don't normally split a day up into two chapters, but I ran off at the mouth (fingers?) a little bit on this day, and I didn't feel like editing it down. So, I split it in two.\n\nCh. 17 was a big tease, a big setup for this chapter, so if you don't read it, this one won't make any sense. This is where all the sex Brad was working for in Chapter 17 actually happens.\n\nThere should only be two (maybe three if the diarrhea of the fingers continues) chapters after this one. It's been damn near 10 years, but I'm hoping it's finally coming to an end.\n\nAs always, thanks to my editor, AnInsatiableReader, for helping me clean this thing up. When I send it to her, it looks nothing like the finished product you're about to read.\n\n**************\n\n\"Tom!\" I shouted, standing up and waving my arm. He'd been looking around and scanning the crowd, and his head snapped directly toward me when he heard my voice. \n\nChris Cagle had finished his set a little while ago, and he was the final opener before Lynyrd Skynyrd. We probably still had a few minutes before the legendary southern rock band came out, though. I'd gone down to the stream, leaned up against a tree and had actually fallen asleep for about 20 minutes. Since I'd woken up, I'd been texting back and forth with Kelly. I told her about everything I'd done to Sara (and what little I'd done with Liz), and she'd wished that she could handle business again, but she was at a restaurant with her family and spending 10 minutes in the bathroom would be extremely difficult to explain. She told me about what she'd been up to today. She was fairly stingy with the details because she was much more interested in what I was doing, but I gathered that she'd spent some time exploring caves and generally tolerating her dad's large extended family. \n\nIt was time for her to head back home, so I'd had to let her go, and that's when I looked up and saw Tom approaching. He was in standard civilian clothes now, but he was still easy to identify as a Marine.\n\n\"Hey, Brad,\" he said, making his way over to the group. \"You sure you have room for one more?\"\n\n\"Absolutely, man,\" I said. The gaggle of college girls sharing the same blanket giggled and nodded, too, rearranging themselves so he could sit down.\n\n\"Hey, Tom,\" Janine said. We had three blankets spread out on the grass, and she and Chad were cuddled up together on the one in the middle. Russ sat behind them with two girls he'd apparently picked up during the day. \n\n\"Sgt. Andrews,\" he said, nodding at her. He seemed a little confused by her current companion. It was pretty obvious that Janine and I were planning to hook up when I'd first met him last night, and I'd basically confirmed that we had when I talked to him earlier in the morning. I was guessing she hadn't told him anything about Chad while they were working the booth together, and it wasn't my place to tell.\n\n\"Tom, we're off the clock,\" she said. \"It's Janine.\"\n\nHe simply nodded at her, clearly waiting for her to introduce her new friend. I handled it so she didn't have to. \"Guys, this is Tom Callahan, another of the Marine recruiters out here this weekend. Tom, this is Chad, and the guy behind him is Russ, along with a couple of his friends that I haven't met. Chad and Russ served with me in San Antonio.\"\n\nEveryone said hi, and Russ even introduced the two women with him. I was impressed he knew their names. Tom grinned when Chad shook his hand then wrapped it back around Janine's waist, but he seemed to take it in stride. He turned his attention to the girls on my blanket. We both sat down, me on the edge and him to my left.\n\n\"And these girls are all students at Mesa State here in town,\" I said. \"I apologize for not remembering a lot of names, but this is Lindsay,\" I added, motioning to the brunette sitting on Tom's left. She introduced the rest of her friends, then they all went back to giggling about whatever 18- and 19-year-old girls giggle about. \n\n\"So, Tom,\" I said. \"Who handles your recruiting duties when you're off playing soccer?\"\n\n\"Sgt. Andrews, mostly,\" he said. \"Gunny knew about my travel schedule before he assigned me to this office. There might be a couple other recruiters in and out to help out, but I'll only be gone three business days, so it won't be too bad.\"\n\n\"When does the tournament start?\"\n\n\"Thursday afternoon,\" he said. \"I fly out Wednesday night, then spend pretty much the next four days playing soccer. I'll fly back early Monday.\"\n\n\"Where are you playing?\" came a voice from his left. I'd hoped we'd have an eavesdropper, which is why I started talking soccer even though my interest level in the sport was zilch. And Lindsay didn't disappoint me.\n\n\"Oh, I play for the Marine Corps' soccer team,\" he said, turning toward her. \"We're playing a tournament in Washington D.C. next weekend.\"\n\n\"Wow,\" she said. \"I guess you're pretty good, huh?\"\n\n\"I can play a little,\" he said. \"What about you?\"\n\nShe straightened up so he could get a better look at her top, a maroon T-shirt with the Mesa State soccer logo on in it. \"I'm on the college soccer team.\"\n\n\"So I guess you're pretty good, too?\" he said. \"What position?\"\n\nThey went back and forth about soccer for another few moments, and I quickly realized that I wasn't needed anymore. I smiled to myself and started to get up.\n\n\"Aren't you just the little match maker?\" That was Janine, loudly enough to get my attention but not so loud that Tom or Lindsay heard her. \"Two days in a row, huh?\"\n\n\"Hey, I wasn't trying to make any matches last night,\" I said, matching her volume so as not to broadcast our business to all of western Colorado. \"I was just trying to scratch a couple things off your list. Whatever this is,\" I said, motioning to the two of them still cuddled together, \"you guys did that totally on your own.\"\n\n\"Yeah, but you made the introduction,\" Chad said. \"Got one more match to make, huh?\" He added, motioning his head toward Sara, who for now was sitting alone on the third blanket. She'd changed into a tiny red halter top and baggy blue shorts with a white Air Force logo on them. Liz had gone to get more beer.\n\n\"Ooh, that's right,\" Janine said. She whispered something in Chad's ear. \n\n\"I don't think he really needs that,\" Chad said aloud, but she then whispered something else, and Chad's face lit up like a fucking Christmas tree.\n\n\"Oh, yeah!\" he exclaimed. \"I DO remember that. Thank God I took the boy under my wing when I did.\"\n\n\"It's late June, Chad,\" I said, my eyes rolling back in my head. \"A little hot to pack the hiking boots, so stop with the bullshit, OK?\"\n\nHe laughed and look past me. \"Hey, Winters! Come here a second.\"\n\nSara looked over at Chad, who was motioning her over. She got up and headed toward them, shooting me a look of \"What's this all about?\" as she went past. I just shook my head and tossed her a guilty grin, then sat down by myself on the blanket. \n\n\"She ditched you already?\" Liz's voice said from behind me. She was holding six bottles of Coors Light, three in each hand. I took a few away so she could sit down without sloshing.\n\n\"She's over there talking to our friends from Texas,\" I explained. \"How are things with you two? All better?\"\n\n\"Yeah, I think so.\" The twinkle in her eye told me there was more where that came from, but I could wait to find out what it was. Sara had changed out of necessity, but Liz thankfully hadn't. She was still wearing the yellow shorts and white tank top she'd been in every time I'd seen her today, and her nipples were still straining against the cotton. In fact, neither of them were wearing a bra, and I guessed the same was true about their panties.\n\nA few seconds later, Sara came back and plopped herself down between myself and Liz, which worked out well for me since there wasn't enough room to sit down between us. She was basically straddling my right leg. \n\n\"So what did she say?\" I asked.\n\n\"Oh, don't worry,\" Sara replied. \"She gave you a glowing recommendation.\" She leaned in closer to my ear. \"A very glowing recommendation,\" she finished, punctuating it by sucking my earlobe into her mouth.\n\n\"Is that right?\" I'm pretty sure my grin stretched into the parking lot.\n\n\"She said you were the second best sex she's ever had,\" Sara added. I had to look over my shoulder, where Chad and Janine were smiling widely at me.\n\n\"Second, huh?\" I called out. \"I'm pretty sure less than 24 hours ago I was the gold medalist.\"\n\n\"I told her that,\" Janine said. \n\n\"But you know how it is, man,\" Chad said. \"Once you go black...\"\n\n\"Don't get too upset, Brad,\" Janine said. \"The second-fastest man in the world still runs a mile in under four minutes.\"\n\n\"Too late,\" I said, though I was smiling to let her know I was kidding. \"The damage to my fragile male ego has already been done.\"\n\n\"I wonder what you could do to me in under four minutes,\" Sara said from the other side of me, although it was quiet enough that no one but Liz and I could hear.\n\n\"I think I showed you that a few hours ago,\" I said. \"Lucky for you, I won't have a time limit next time.\"\n\nShe threw me a demur smile, the first time I think she'd ever done anything demurely, and she turned her attention toward Liz. She was still half-sitting on my lap, but she was having girl talk now, presumably sharing with her best friend some of the naughty details Janine had given her about last night. They occasionally looked my way and giggled, and one time Sara blew me a kiss, but my only contribution to the noise was the clinking of empty beer bottles as I added them to the pile.\n\nI really needed this last show to get started, mainly because I was really looking forward to what was going to happen at the end of it. \n\nI'm not the world's biggest Lynyrd Skynyrd fan, but as far as southern rock goes, they're about as good as anyone. I'd seem them a couple years ago down in Texas, and I imagined their set list hadn't changed much. I started thinking about the different songs they'd sing, and how I could use a few of them to get to Sara prior to what I knew would be their encore.\n\nBefore I could get too immersed in my thoughts, the band came out onto the stage, and the whole crowd lost its collective fucking mind. We got to our feet and stayed there through the band's first two songs. I'd been inching closer and closer to Sara, and by the time the third song, What's Your Name, started up, I was standing directly behind her. When Johnny Van Zant got to the chorus, I grabbed her around the waist and pulled her back against me.\n\n*What's your name, little girl, what's your name?* \n\nI sang right along with the band, my lips less than an inch from Sara's right ear. I'd had to sing pretty loud so she could hear me over the band, but I was hoping the overall effect was me whispering in her ear. She melted against me instantly, her back and ass somehow molding perfectly against my chest, hips and thighs. My cock had been on high alert all day, and I'm sure she felt it pressing between her cheeks.\n\n*Shootin' you straight, little girl, won't you do the same?* \n\nShe turned around to face me with a demonic little glint her in eye. \"Always,\" she said, just barely loud enough for me to make it out. She then mashed her lips hard against mine, forcing her tongue past my teeth and halfway down my throat. \n\n\"I'll shoot you straight,\" she whispered into my ear, her hands firmly gripping my ass. \"I feel something pretty straight right here\" - she emphasized her meaning by pulling my hips into hers, pressing my cock into her stomach - \"and I want you to shoot me with it. Right now. We need to go.\"\n\n\"Uh uh,\" I grinned back. \"Patience, my dear.\"\n\n\"You and your patience again,\" she whined back. \"Fuck your patience. I've been patient all day.\" She licked my earlobe for effect.\n\n\"Like I said before,\" I said, pausing to nibble on her neck. \"What's another hour or so? I have something special planned for you, Sara. You just have to wait. I promise it will be worth it.\"\n\nShe growled at me as she spun around, thrusting her ass against my cock again. \n\n\"It better be,\" came a whisper in my other ear, from my right. It was accompanied by a light swat on my ass. \"After all, you have three years to make up for.\"\n\nThings had escalated so quickly between Sara and I that I'd momentarily forgotten Liz was even there. Her face was flushed - a combination of the beer, the heat and her watching mine and Sara's little show - and her green eyes were blazing.\n\nI pulled her to me and moved my lips toward her, making like I was going to kiss her on the mouth before veering off and kissing her cheek at the last second.\n\n\"Trust me. She'll be telling you this story for years.\"\n\nIt was a little harsh, knowing that she wanted me and I wasn't going to be able to do anything about it, but honestly, I had no idea what was going on with the three of us right now. I assumed they both knew this was all about Sara, but they'd both been flirty with me all day, and now Liz was getting handsy.\n\n\"Promises, promises,\" she said.\n\nThe rest of the show flew by. Simple Man was perhaps my favorite song by the band, so I sang the lyrics into Sara's ear when they played it in the middle of their set. Halfway through, she leaned her head back onto my collarbone and we swayed back and forth, slow dancing by proxy. We sat down on the blanket after that, and when they played Gimme Three Steps, Sara got aggressive, reaching up into my shorts and stroking my cock through the hole in my boxers. \n\nShe got pretty close to making me cum, which might or not have been her plan, but I stopped her before it was an issue. The next 30 minutes was going to be some of the sweetest torture I'd ever endured.\n\nFinally, they played the last song - of their main set, anyway - and of course, everybody in the world recognized the opening riffs of Sweet Home Alabama. Sara and Liz both pulled me to my feet and started dancing on either side of me. At one point, we shared a three-way kiss. Their tongues touched, and while I'm not sure that was the goal, it was incredibly fucking hot. Liz also helped me spank Sara once, with her getting one cheek and me the other. Sara's nostrils flared in anger momentarily, but when she realized what had happened, she simply said \"Again.\" \n\nSo we did it again.\n\nAbout halfway through the song, though, it was time to set my final plan in motion. I left Liz with a long, languid French kiss, then took Sara's hand and led her out through the mass of humanity. I had to throw more than a couple elbows to make room, but we eventually found our way to the edge of the crowd. \n\n\"Y'all leaving before Free Bird, man?\" some drunk college kid babbled as we made our way past.\n\n\"Some things just can't wait,\" I shouted back. Sara grinned at me.\n\n\"I dunno, Brad,\" she said with an evil grin. \"You made me wait this long. What's one more song?\"\n\n\"Oh, don't worry,\" I countered, pulling on her arm hard enough to let her know she was coming along. \"We'll definitely still hear it.\" \n\nI approached the merchandise booth. There were customers, but not nearly as many as there would be in about 15 minutes. The guy I'd talked to earlier, Jason, spotted us immediately and beckoned us over.\n\n\"So that's what this is all about, huh?\" he asked, pulling up a white rope and letting us underneath it.\n\n\"Yes, she is,\" I said. Sara might have blushed, but she'd been drunk and turned on for more than an hour, so I couldn't tell. Jason put lanyards around our necks.\n\n\"Well, now I understand. Anyway, these will get you past the security guards over there,\" he said, waving toward the corner of the band shell, where Skynyrd was on the back side of Sweet Home Alabama. \"It'll get you into the backstage area, too, but don't go back there, or I'll be in deep shit.\"\n\n\"No problem,\" I said. \"What I've got in mind works a little bit better with privacy, anyway.\"\n\nSara was holding my hand, and when I said that, she squeezed it tight.\n\n\"Not necessarily, not at these things,\" Jason said, laughing. \"But I appreciate it. If you go where you said you were going, I think you'll be just fine. I'd wait till they come back out and start up before you make too much noise, though.\"\n\nSara looked at the ground. There was a line there about her being a screamer, but even though I knew Sara had a thick skin, she was standing in front of a stranger who knew she was about to go have sex in public. I didn't want to embarrass her any more.  \n\n\"Thanks, man,\" I said. We walked hand-in-hand toward the band shell. The security guards let us through with barely a glance at the cards around our necks. A few more feet, and we were in a huge, dark area to the left of the stage. Another couple football fields would bring us around backstage. This area was well-traveled in between shows, as it was the path fans used to get to the back for meet-and-greets. It would have a ton of traffic after the show, too, but nobody would be leaving until after the encore.\n\nNobody but Sara and I, anyway. We could clearly hear the band finishing up Sweet Home Alabama as we walked along the plastic shell. I stopped about halfway between the security guards and backstage.\n\n\"Brad, I don't think I've ever felt more alive than I do right now,\" she said. \n\n\"I'm happy to hear that,\" I said, pushing her up against the wall and leaning into her.\n\n\"I'm just saying,\" she said. \"After all this buildup... if you disappoint me now, I seriously might kill you.\"\n\nI chuckled. I traced the outside of her right ear with my tongue before whispering. \"Oh, I don't think there's much chance of that.\"\n\n\"Neither do I,\" she muttered back. Our lips met for the umpteenth time that day, but this time it was different. I sensed that she knew the time for foreplay was over, and that what was about to happen was going to be epic. She let me take the lead, her hands simply resting on my shoulders as I kissed her. \n\n*Sweet home Alabama, lord I'm comin' home to you* \n\nIt had a different sound now, as we were much closer but blocked off by the plastic shell. We could hear the closing guitar riffs of the band's second most famous song as we made out feverishly. I slid my hands up over her tits, pinching her nipples through her halter top. \n\n\"We love you Grand Junction!!\" came Johnny's yell, met by thunderous applause from the crowd. Everybody knew the drill - they'd act like they were done for the night and they'd leave the stage, and the crowd would scream its collective head off, chanting \"Encore!!\" and \"Freebird!!\" until they came back. And of course, they'd come back and close things out properly.\n\nMy other hand dipped south of her waist, but I avoided the moist area between her legs, instead focusing on her hips and thighs. Sara made a direct grab for my cock, but I playfully swatted her hand away.\n\n\"Patience,\" I whispered again. I wasn't sure she could even hear me until she groaned. \"We're on somebody else's schedule now.\"\n\nI slid my hand up her back and used her ponytail to gently pull her head backwards. I voraciously attacked her neck, kissing up and down her windpipe and nibbling slightly. Her nails dug into my shoulders as she moaned.\n\n\"Whose schedule?\" she gasped when she got her air back.\n\n\"Theirs,\" I said, pointing to the plastic shell behind her. As if on cue, the crowd started up with a vengeance.\n\n\"FREEBIRD!\" they shouted. \"FREEBIRD! FREEBIRD!\"\n\n\"I've never wanted to hear a song worse in my entire life,\" she said.\n\n\"Don't worry,\" I said. \"If they wait too much longer to come back out, they'll start a riot.\"\n\n\"I know the feeling,\" she said. \n\n\"Shh,\" I said, kissing her passionately. A whimper caught in her throat, but I could hear the vibrations as I cupped her cheek. My mouth left hers, trailing over her chin and revisiting her neck before continuing south. I kissed as much of her chest as her top let me before moving to her stomach, bunching the fabric up below her tits and licking my way to her belly button. ",
        "I repeated the trick with her shorts, pushing the legs as far up as I could to expose the maximum amount of skin. I peppered her thighs, knees and shins with kisses, even giving her feet some tongue action in her sandals. \n\nI was licking the back of her right knee on my way back up when the crowd stopped chanting and started going apeshit again. I moved both hands up under her shirt and cupped her bare breasts, pinching her nipples as hard as I could get away with.\n\n\"Fuck,\" she muttered. \"Please, touch me.\"\n\nWithout my hands to keep the fabric pushed up, the legs of her shorts had fallen back down her thighs, but I pushed my nose and mouth up under them anyway. I couldn't see, but I could definitely smell her arousal. I was right, at least about Sara - she wasn't wearing panties.\n\nFinally, after what seemed like an hour but was really no more than 3 or 4 minutes, the piano player started a solo on the left side of the stage, maybe 30 feet past where we were standing. That was my first cue - I roughly pulled Sara's shorts down until they were gathered in a heap around her ankles. If she gave a damn about suddenly being exposed in public, she didn't show it.\n\n\"Yessss,\" she hissed as I dove between her legs. Normally, I might take my time licking each of her lips individually and flicking my tongue across her clit, but this time, I immediately attacked her core, shoving my tongue up into her and brushing my nose back and forth across her clit. I felt her thighs clamp around my cheeks and her fingers tighten up in my hair as she came almost immediately.\n\nIt was more than a minute before the piano player actually started the opening bars of the song, and I knew from memory that the other band members would start joining in soon. The drummer and bass player jumped in quickly, and as I felt Sara's second orgasm wrack her body, the lead guitar player added the world famous guitar licks. \n\n\"You're gonna kill me,\" she said as she sank down into the grass with me.\n\n\"Not yet,\" I said, helping her onto her back and then throwing my left leg across hers. I pushed her shirt up above her tits and latched onto the nearest nipple with my mouth as my fingers went back to her clit. \n\n*If I leave here tomorrow, would you still remember me?\n\nFor I must be traveling on now, 'cause there's too many places I've gotta see\n\nIf I stay here with you girl, things just couldn't be the same\n\n'Cause I'm as free as a bird now, and this bird you cannot change*</i?\n\nAs Johnny Van Zant serenaded the crowd, I played Sara's body like the lead guitar, bringing her right up to the edge of a third orgasm multiple times before backing her down, only to go right back to the edge again. My own need wasn't going anywhere, either, and I was practically dry humping her bare leg as I rubbed her clit.\n\n\"Sara, I want you so damn badly,\" I murmured into her ear.\n\n\"Then take me,\" she said.\n\n\"Soon,\" I managed. \"Give me one more.\"\n\nJust like that, she tensed up and screamed as the most powerful orgasm yet overtook her. My shoulder muffled most of her scream, but I don't know that anyone would have heard it even if she'd just let it rip. \n\n\"Get rid of these,\" she said, grabbing onto the waistband of my shorts. I pulled a condom out of my pocket and handed it to her before wiggling loose of my shorts. I'd chosen to go commando as well, knowing how much easier this would be with one less barrier.\n\nThere was one more guitar solo before the second verse - or so I thought. I guess the band thought the crowd was particularly buzzing tonight, because they followed the guitar solo with another, longer piano solo, one that hadn't been in their set when I'd seen them in Texas. And as it dragged on, I seriously started to second-guess my decision to not get off at all during the day.\n\nSara had been craving my cock all day, but at least she'd gotten off a few times. I'd been on high boil pretty much since I woke up, but I was determined not to cum until the end of the song. I figured I could just barely make it if I stuck to my plan and didn't actually start fucking her until the second verse began. It was like the band knew my plan, and this was their way of laughing at me. Until then, I could do nothing but repeatedly thrust my now bare cock against her exquisite legs, which was almost worse due to the friction. Her thighs were covered in pre-cum by the time she managed to roll the condom onto me.\n\n*Bye and bye baby, it's been sweet love, though this feelin', I can't change\n\nPlease don't take it so badly, 'cause Lord knows I'm to blame\n\nIf I stay here with you girl, things just couldn't be the same\n\n'Cause I'm as free as a bird now, and this bird you cannot change*\n\nMy mind cried out in a silent hallelujah as Johnny's voice started up again. I shifted six inches to the right and before the first line was finished, I had sunk to the hilt in Sara's tight, boiling pussy.\n\n\"Fuuuuuck,\" she groaned, and I silently agreed. I couldn't move right away, for fear that I might cum on the first stroke out. I don't think even Sara could blame me after what this day had been like, with all the build-up, but I still refused to cum quickly like I had three years before.\n\n\"So tight,\" I managed to get out. She seemed to sense my frustration, and I felt her vaginal muscles relax ever so slightly. I pulled out about halfway before sliding back in.\n\n\"Fuck me, Brad,\" she yelled, but someone standing a foot away wouldn't have heard her. \"Fuck me until I can't stop cumming.\"\n\n\"Slowly,\" I muttered. She groaned in response, and locked her ankles behind my lower back, trying her best to pull me back in hard each time I pulled out.\n\nThey repeated some semblance of the line, \"Lord knows, I can't change,\" seven or eight times over the next minute, with each one getting faster and faster. Sara came at least once more during that time, and it was all I could do not to join her. \n\nFinally, the band reached what most fans thought of as the halfway point of the song. While the first half is slow, deliberate and melodic, the second half tempo picks way up, and involves minimal singing and a whole lot of guitar jamming.\n\nAs the song's tempo increased, so did my pace.\n\n\"God yes,\" she groaned. \"Harder, Brad. Fuck me harder.\"\n\nWithin two minutes of the start of the second half of the song, I was drilling into Sara harder than I could ever remember. As she'd requested, she'd turned into basically one quivering pile of orgasmic flesh. I had no idea where one ended and the next started, and I didn't care, because it was taking every bit of energy I had to hold out.\n\nThe faster the guitars riffed, the faster my hips went. I think at one point Sara actually blacked out from the endless orgasm. When she came to, her green eyes locked onto mine, and she pulled me down for another amazing kiss.\n\nThe moment our tongues touched, I couldn't hold out anymore. I didn't have to say it - she knew.\n\n\"Please, Brad,\" she said. \"You've fucking earned it. Cum for me. I want you to cum so hard you break the fucking condom. CUM FOR ME!!\"\n\nI couldn't even hear the song anymore, the pounding between my ears was so loud. I only heard her yelling, and I did exactly what she asked. I kept up the pace and sawed away relentlessly throughout my explosion, only stopping when my hips absolutely could not go anymore. My cock was still hard, though, so while I managed to fall a little to the side when I collapsed, I was still inside her. \n\nAs I knew it eventually would, my mind drifted to Kelly and how I wished this night - and all the nights on this road trip - had been with her instead. I wanted to live in the moment, though, so I somehow pushed thoughts of Kelly to the backburner, just for a few minutes. \n\nBecause to be perfectly honest, fucking Sara Winters behind the band shell at a Lynyrd Skynyrd concert was definitely the best sex I'd ever had. I knew it probably wouldn't hold that spot for long, but for now, Sara was the champion, and I wanted to enjoy her as long as I could.\n\nWe lay there for a long moment, gasping for air and coming back off our twin highs. I hadn't quite lasted to the end of the song, but hell, I thought it was a pretty fucking spectacular effort to make it as far as I had. They were coming to an end, now, though. We probably had another minute at the most.\n\n\"You fucking bastard!\" she exclaimed into my ear, punching me in the back over and over again. \"Where was that three years ago?\"\n\n\"Seriously?\" I asked, gently pulling out of her and rolling to my side. \"You expected that from a 20 year-old?\"\n\n\"No,\" she admitted. \"If you'd given me a quarter of what you've given me today back then, I wouldn't have ever let you go.\"\n\n\"And then I wouldn't have gained the experience I have now, which enabled me to do what I just did to you,\" I said. \"Quite the conundrum, no?\"\n\n\"Way too big a word for right after sex,\" she said, and I kind of agreed. I was about to say something when someone behind us cleared his throat.\n\n\"You guys might wanna get moving.\" I looked up and saw Jason, the merchandiser who'd given us the access cards, standing about three feet away with his back to us. \"This area is gonna be like Grand Central in about three minutes.\"\n\n\"Yeah,\" I agreed. Sara and I pulled up our shorts and helped each other to an upright, if not somewhat wobbly, position. Suddenly conscious of Sara's nakedness in front of a stranger, I got a little concerned. \"How much of that did you see?\"\n\n\"Nothing,\" he said. \"Honest. They finished up, and I noticed you hadn't come back yet, so I came to check on you. When I realized how you were dressed - or weren't, in this case - I turned my back. Guessing it was pretty fucking intense though, huh?\"\n\n\"You have no idea,\" Sara said. She walked over and gave him a kiss on the cheek. \"Thanks for all your help.\"\n\nShe pulled me past him, and all I could offer was a sheepish grin. It wasn't until we got past the barricades and back into the outer edge of the crowd that we spoke.\n\n\"So hard I break the fucking condom, huh?\" I asked.\n\nHer face was still red from our exercise session, but she would have blushed otherwise. \"Yeah, I got a little carried away. Even if you did, though, I've been on birth control for years. It'll be ok.\"\n\n\"Well, when I pulled it off over there, it wasn't broken, but it was overflowing.\"\n\n\"It seemed like you came forever,\" she said.\n\n\"I've been saving it up all day,\" I replied. \"I'm still not sure how I lasted as long as I did.\"\n\n\"Brad, that was fucking amazing,\" she said.\n\n\"It was,\" I said, squeezing her hand for emphasis. \"But still, it was a lot. You might want to go clean up, just in case.\"\n\n\"That's a great idea,\" she said. \"Actually... do you want to take a shower with me? A real one, this time?\"\n\nI grinned widely. \"Let me think,\" I said. \"Do I want to see your sexy body naked again, all soapy under the hot spray? Uh, yes. Yes, I do.\"\n\n\"Dumbass,\" she grinned back. \"Good. Let me text Liz and tell her we didn't get arrested, and that we'll see her later.\"\n\nShe pulled out her phone, and just for a moment, I regretted that Liz and I wouldn't get any quality time together. She'd really stepped aside and let her friend have all the fun, and while she and I didn't have the kind of unfinished business that Sara and I had, she was every bit as hot as her best friend, and I would have enjoyed taking her for a ride.\n\nAs soon as I had the thought, though, I chided myself. In the past two weeks I'd fucked nearly 20 women, including three of the hottest over the past three days. And I was complaining that I didn't get to have one more?\n\nBefore my perfect little world burst at the seams, I pulled out my own phone and texted Kelly. I knew she wouldn't be able to respond, because she was traveling back home and had an early double-shift tomorrow. But I wanted to at least tell her that tonight was going to make for great story time.\n\nIt took Sara and I 20 or so minutes to elbow our way through the crowd to the deserted shower area. Everyone was either still partying on the concert grounds or back at the campground getting hammered - no one was trying to shower this time of night.\n\n\"So, was it everything you thought it would be?\" \n\nLiz was leaning against the building, grinning at both of us and obviously drunk.\n\n\"And so, so much more,\" Sara said.\n\n\"Why, Elizabeth, however did you know that we were going to be at the showers?\" I asked, tossing a glance at Sara.\n\n\"Surprise,\" she and Sara both said. \"Though,\" Sara continued, \"not quite as much of a surprise as you two gave me earlier.\"\n\n\"Stop complaining,\" Liz said. \"He just fucked your brains out.\"\n\n\"He did,\" she said, pulling us both into the shower room and leading us to the same exact stall she and I had been in earlier. \"Now it's your turn.\"\n\nIt didn't take a genius to figure out that this had been what they'd been discussing with their hushed whispers before the concert. I had my plan for Sara, and apparently, she had one for me, too.\n\n\"Sara, I wanted this to just be about you,\" I said in mild protest. Still, firmly in possession of at least 3 or 4 of the brain cells I'd been born with, of course I looked when Liz started stripping off the few clothes she had on. Her breasts were bigger than Sara's, and unlike her best friend, Liz had a neatly trimmed patch of blonde hair just above her pussy - a pussy that was clearly slick and ready to go.\n\n\"It's been about me all day,\" she answered. \"You've been doing whatever you wanted to me, since before I even woke up. And no, that's not a complaint, because that was the best sex I've ever had, and you spent all day getting me there. But if it's going to be all about me, I should get what I want, too, right?\"\n\n\"You mean, besides four or five orgasms?\" I asked.\n\n\"I think we're at six right now,\" she said. \"But now, I want something else. I want Liz to get a little piece of you, too.\"\n\nI just grinned. Sara was naked now, too, leaving me as the only dunce still wearing clothes.\n\n\"Let me guess - you two share everything,\" I said.\n\n\"Nope,\" Sara said. \"Just clothes and shoes.\" \n\n\"And sometimes makeup,\" Liz added. \"But never a man, until now.\"\n\n\"But Brad, my best friend really wants you,\" Sara said, stepping up to me and grabbing my rapidly growing cock through my shorts. \"And from everything I've heard, and what I'm holding now, you want her, too.\"\n\n\"So you're willing to give up the rest of your time,\" I said.\n\n\"Oh, no,\" she said. \"I'm willing to share the rest of my time. I'm not going anywhere.\"\n\nLiz was already under the water, and Sara stepped under the spray as well. I quickly discarded my clothes and joined them.\n\n\"Come here,\" I said to Liz. She just stood where she was and smiled.\n\n\"You've finally figured out how to fit me in to your agenda, huh?\" she asked.\n\n\"You know I've wanted you all fucking day,\" I said. I crushed her against the shower wall and forced my tongue halfway down her throat. I didn't let her up for air for a minute. \"I just needed to get somebody to shut up and stop spreading rumors about me.\"\n\n\"They weren't just rumors,\" Sara said. \"They were the truth.\"\n\n\"Not the truth anymore, I bet,\" Liz moaned as I worked my way past her neck and onto her chest. I sucked first one nipple and then the other into my mouth, bathing them with my tongue.\n\n\"Oh, God, no,\" Sara replied with a shudder. \n\n\"Tell her how well I ate your pussy, Sara,\" I said, speaking directly into Liz's belly button as I worked my way south.\n\nIn response, Sara just groaned and braced herself against the wall with one hand. I wondered if she didn't just have a mini-orgasm just from the memories. \n\n\"Thank you,\" I said to Sara. \"But use words now. Give her a little verbal preview of what she's about to get.\"\n\nI licked Liz's upper thighs, steering well clear of her clit for a few more moments. My face was directly in the shower head's line of fire now, so I couldn't make out most of what they were saying. I did manage to catch the words \"amazing tongue\" and \"like a faucet,\" and I could fill in the blanks from there.\n\nA flash of inspiration hit me, and as I knelt in front of her, I lifted Liz's right leg off the ground and put it over my left shoulder. When I reached for her other leg, she resisted.\n\n\"Brad, I'll fall flat on my ass,\" she said. \"You can't support all my weight.\"\n\n\"Sure I can,\" I said, my words forcing air right onto her clit now. \"If I can get a little bit of help, anyway.\"\n\nI made eye contact with Sara, and she seemed to understand what I wanted. She wedged herself between Liz and the shower wall and hooked her arms under Liz's, hefting a good deal of her weight. Even though Liz wasn't very heavy to begin with, Sara probably couldn't have held her up in that position for long, especially with the water destroying any friction between their bodies. Thankfully, Liz finally gave in and let me lift her other leg up and place it over my right shoulder. She was suspended between the two of us now, but I was shouldering most of her weight, with Sara there mainly for balance.\n\nIt also put Liz's mouth-watering snatch mere inches from my lips. While I wanted to tease her and go exploring for a few minutes, I knew she had to be almost as worked up as Sara and I had been prior to the concert. She'd watched me while I massaged Sara that morning, and she'd been a quiet spectator when I'd gotten Sara off behind the first aid tent, even playing with herself a little bit during the last part. I'd licked her fingers clean before giving her a long, deep kiss, and we'd exchanged several more lip locks during the concert. She hadn't complained about it, but I'd been inadvertently revving her engine all day long.\n\nSo, I figured it was time to put her in gear and slam the gas pedal down. I went to work directly on her clit, battering it with sharp strokes from my tongue. One hand was under her ass for support, but I slipped the first two fingers from the other hand as far into Liz as they could go.\n\nShe squealed, but managed to keep her mouth closed so that it died in her throat instead of spreading to the entire campground. I could hear Sara muttering something in Liz's ear but couldn't make out the words.\n\n\"Mmm, yes,\" Liz said.\n\n\"Then fucking tell him that,\" Sara replied.\n\n\"Fuck,\" she spit out. \"I've wanted this all day, Brad.\"\n\n\"What?\" Sara asked, and I was thankful since my lips, teeth and tongue were otherwise engaged. \"You've wanted what all day?\"\n\n\"For you to make me cum,\" Liz said.\n\nI raised an eyebrow from between her legs, but I said nothing.\n\n\"How, Liz?\" Sara asked. \"How do you want him to make you cum?\"\n\n\"Either all over your face, or all over your cock,\" she answered. Sara was asking the questions, but Liz was answering them as if I was.\n\n\"Why not both?\" Sara asked.\n\n\"One thing at a time, girls,\" I muttered. It didn't take me long to get Liz right up to the edge. Sara managed to move one hand down and pinch Liz's left nipple, and I chose that exact moment to suck her clit entirely into mouth.\n\n\"Gaaaahh,\" Liz moaned. That was all I could hear before her thighs clamped down on my face, but I was sure she made more noise. I only hoped there was no one in the shower area or even within a few hundred feet, because there was no way she'd been able to stay quiet that time.\n\n\"Just think,\" Sara said quietly, after Liz had let me go and I'd lowered her back to a standing position. Sara didn't need to hold her up anymore, but she still was. \"I had three of those out there, before he fucked me.\"\n\n\"Three?\" Liz asked. \"I think you'd have been fucking an unconscious woman, if that was me.\"\n\n\"Oh, I did for a few seconds,\" I said. \"Used the same thing I knocked her out with to bring her back to life, though.\"\n\nI leaned forward and kissed Liz tenderly. Her tongue got particularly aggressive once she realized she could taste herself on my lips. My cock, which hadn't gone down past half mast since the concert, was now fully engorged again and pressing greedily into Liz's stomach.",
        "\"My turn,\" Liz said, and started to get on her knees.\n\n\"We can do that later,\" I said.\n\n\"No,\" she said. \"Now. I'm sure you already got one of these tonight, but you're gonna get another one. So shut up and enjoy it.\"\n\n\"Actually, this will be my first tonight.\"\n\n\"Really?\" Liz looked up at Sara in surprise, and Sara actually looked a little sheepish.\n\n\"I didn't give her time,\" I said. \"I went straight from eating her out to sticking this\" - I motioned to my cock, which she was now holding - \"in her pussy. It was a long encore, but it wasn't that long, and I had things I wanted to do.\"\n\n\"Well, she gets a pass then, because I certainly want this in my pussy, too,\" Liz said. \"But she can make it up to you right now. Get down here, Sara.\"\n\nSara sank to her knees next to Liz, and I had four of the sexiest green eyes ever created looking up at me. Liz slipped the head between her lips, and Sara grinned.\n\n\"I think the entire male population of our high school would have killed for this,\" Sara said. \"You are one lucky mother fucker, Carver.\"\n\n\"Understatement of the century,\" I agreed. Anything else I wanted to say vanished when Liz opened her mouth and took about half of me inside on the first try. What Liz didn't have in her mouth, Sara was licking, rolling her tongue around the base of my cock and stopping just before she made contact with Liz's lips.\n\nLiz pulled up and offered my cock to Sara, who slurped it down greedily. She wasn't quite as talented as Liz, but my cock was in no kind of mood to publish an official ranking at the moment. Liz reached underneath and sucked one of my balls into her mouth.\n\n\"Not gonna take much,\" I said.\n\n\"Really?\" Sara asked, passing the hot potato back to her friend.\n\n\"I know I just came, but I don't think you understand just how riled up I've been all day.\"\n\n\"Oh, I understand,\" she said, flicking her tongue across my cock on one of Liz's trips to the top. \"You didn't make me go as long as you had to, but I wanted to kill you after the last time we were in here.\"\n\n\"Come here,\" I said, pulling Sara to her feet. \"I definitely want some more of that later, but I want to kiss you now.\"\n\nShe pressed her lips against mine, and I immediately thrusted my tongue into her mouth. She whimpered a little.\n\n\"God, what you do to me, just with a kiss,\" she gasped.\n\n\"Gonna be doing more in a sec.\"\n\nLiz's tongue was very fucking talented, and she had me very close. I tried my best to hold out a few more moments, though. I slid my fingers down Sara's stomach until they found her clit, and she instinctively wrapped her arms around my neck.\n\n\"Another one?\" she asked. \"Brad, I can wait.\"\n\n\"I know,\" I said. \"But I have this little peculiar tic about me. For some reason, I can't stand the thought of getting off unless you do.\"\n\nSara grinned, and Liz choked a little around my dick. That took just enough of the pressure off that I thought I might be able to get Sara caught up.\n\n\"Well, in that case,\" she said, and started kissing me again. Liz picked right back up where she left off, but Sara's pussy was still plenty slick. It was a dead heat, and I honestly have no idea who came first. All I know is that I had to break off my kiss with Sara to let Liz know I was cumming, and Sara buried her head in my shoulder and cried out softly as I felt my cock exploding. Liz took one or two shots in her mouth, then aimed the rest at her tits. One shot hit Sara in the upper thigh, which I thought was super sexy.\n\nLiz reached up and smacked Sara's ass.\n\n\"Ow!\" Sara grimaced. \"What was that for?\"\n\n\"For having a sexy ass,\" Liz said, as if it was the most obvious explanation. \"I wanted to touch it. Deal with it.\"\n\nSara dealt with it - by pinching her best friend's nipples. Instead of shrieking, though, Liz just moaned.\n\n\"Careful starting something you can't finish,\" Liz said. She and I finished rinsing off - and made out quite a bit more - while Sara went to the bathroom, to clean herself up from the concert. When she returned, we all got dressed and walked back to the campground. \n\n\"Does anyone want to go over to the party side before we head back?\" Sara asked.\n\n\"Not really,\" I said, figuring this party was going to spill over into the tent and wanting to get down to it.\n\n\"Fuck, no,\" Liz said. \"You might not even have the tent zipped back up before I'm stuffing this cock inside me.\" She made a point of grabbing my cock through my shorts, lest Sara and I think she was talking about some other cock nearby. \"I'm not going anywhere else.\"\n\n\"And why do you get it first, huh?\" Sara asked.\n\n\"You've already had a turn, bitch!\" Liz exclaimed, laughing. She and Sara were still fairly drunk, but my buzz was just about gone - at least from the alcohol.\n\n\"I'm a bitch now?\" Sara asked. \"I'm gonna get you back for that.\"\n\n\"You promise?\" Liz retorted.\n\nWe were all laughing and holding hands, with me in the middle, when we got to the camp site. It was deserted, but Janine and Chad were coming back from a different direction, and got there about the same time we did.\n\n\"How was it?\" Janine asked, looking directly at Sara.\n\n\"Fucking amazing,\" Sara answered with no shame. \"The best sex I've ever had.\"\n\n\"And no, Staff Sergeant Heyward,\" I said. \"You do not get a chance to drop me down to second place this time. I've had about enough of that this weekend.\"\n\nWe all laughed. \"No, he does not,\" Janine added. \"I can't control what happens after he goes back to Texas, but while in the state of Colorado, he's all mine.\"\n\nNormally I'd have expected Chad to cringe at words like that, and maybe turn as pale as a black man can. Instead, he just used his teeth to light up the midnight sky. He wasn't a man of many words, and he didn't say any now, but I was guessing he was okay with Janine staking her claim.\n\n\"No worries there,\" Chad said, and Sara nodded. Even though they were in different branches, Chad was actually Sara's immediate operational supervisor back in Texas, and he wasn't about to go around banging his subordinates. \n\nThere was sort of a pregnant pause, because we all knew where we wanted to go. We all knew what Janine and Chad were going to do, and they at least knew what Sara and I were up to. Given that Liz and I were holding hands, too, they probably guessed she would be involved.\n\nIf anyone was going to cut through the awkward, it would be me.\n\n\"So, are we going to do this right out here in the middle on the picnic table, or what?\" I asked.\n\nNot only did that get five simultaneous laughs, but it prodded everyone into action. Janine tugged Chad back toward their tent, and Liz and Sara headed back to theirs.\n\n\"Have fun,\" I called to the other two. \"We'll try to keep it down for you.\"\n\n\"Don't bother,\" she answered. \"We probably won't.\" She giggled as they disappeared inside their tent. \n\n\"Our place or yours?\" Liz asked.\n\n\"Mine,\" I said. \"Not that there are any secrets here, but it gives us a little more room to make our own noise.\"\n\nSara and Liz grabbed their sleeping bags and we walked over to my tent.\n\n\"How did that happen anyway?\" Liz asked. \"Didn't you fuck her last night?\"\n\n\"I did, but Chad did, too, obviously,\" I replied. \"She and I went back to her RV and took care of business, but we ran into Chad and Russ later. I introduced them, and Chad took it from there, I guess.\"\n\nIt was not even close to the whole truth, but it was all factual and didn't force me to betray any confidences. \n\n\"Aww,\" Sara said, rubbing my shoulder in mock sympathy. \"Replaced so quickly.\"\n\n\"Hey, she was fun,\" I said. \"But she's not you two.\"\n\nWe all piled into my tent, and as soon as the door was zipped up, Liz was stripping again. Sara and I started kissing, and when Liz was naked, she joined in, recreating our three-way kiss from the concert. Gradually, we all sank to the floor in a circle, and put our cell phones in the middle for a bit of light. We started kissing again, and when their tongues touched, I felt my cock go rock hard in my shorts.\n\nI backed away ever so slightly, just enough that it was just the two of them kissing now, but not far enough that I couldn't jump right back in if they wanted me to. It didn't matter anyway - once they started kissing each other, they clearly didn't want to stop. As she was with most things in her life, Sara was the aggressor, kissing Liz's top lip and being the first to force her tongue into the action. Liz was already naked, and Sara was again squeezing her best friend's breasts. \n\nI moved behind Sara and pulled her red halter top up. They broke off their kiss just long enough for me to pull the shirt over her head, then got right back to it. This time Liz was tugging on Sara's nipples, too. \n\nAfter a minute or two, they stopped playing with each other's chests and got even more into the kiss. Sara's hands were wrapped in Liz's blonde curls, and Liz's were locked behind Sara's back.\n\nThey might have kissed for a full 10 minutes - I was way too damn mesmerized to count. Finally, they came up for air and looked over at me. The light from our phones wasn't bright, but I could tell they were both extremely flushed.\n\n\"Was that what you wanted, Brad?\" Liz asked, batting her eyes at me.\n\n\"That was fucking hot,\" was my brilliant reply. \"First time for both of you?\"\n\nThey both nodded. \"Don't think it'll be the last, though,\" Sara said.\n\n\"But for now, I need to get fucked,\" Liz said. \n\n\"In a minute, you bossy bitch,\" Sara said, smiling at her friend and pushing me back on my ass.\n\n\"You're calling someone else bossy?\" I asked, as Liz chimed in, \"Seriously?\"\n\n\"Yes, I'm bossy, too,\" Sara said, grabbing the waistband of my cargo shorts and tugging them off. My cock immediately sprang up through the hole in my boxers. \"And before you go plugging her up, I want to suck your cock again.\" Then, with a playful glare in Liz's direction, she added, \"Just me, this time.\"\n\nAnd she did. She couldn't take quite as much as Liz had in the shower, but she was plenty enthusiastic. She was plenty sloppy too, and I could feel her spit dripping down my balls and onto my ass.\n\nI looked over at Liz, who had laid down on her back to get a good view of what Sara was doing. Her hands were busy between her legs, and I moved my hand back to join them. I could her gasp when my fingers brushed over her clit.\n\nAfter two earlier explosive orgasms, I wasn't close to cumming, so after a few minutes, I gently nudged Sara's shoulders. She stopped what she was doing and smiled brightly at me. My shorts were behind her, and she reached into them, pulling out a few condoms and tossing them on the sleeping bag. I quickly shed the rest of my clothes.\n\n\"Are you ready, sweetie?\" she asked Liz. My fingers were still working on Liz's pussy, so she just groaned.\n\n\"How do you want it?\" I asked as Sara rolled a condom onto me. Liz wasted no time in scrambling up onto her hands and knees.\n\n\"I knew it!\" Sara laughed, kneeling beside her. \"You are a bitch!\"\n\n\"Yes,\" Liz agreed breathlessly. \"And I'm in heat. So, please, shut up and let him fuck me. Just pound it in, Brad; I can take it.\"\n\nSara shook her head at me. \"Patience, hon,\" she said to Liz, and her friend whined. \"I didn't like hearing it either, but trust me. If he just plunges this big, hard cock into you with no warmup, he'll rip you in half.\"\n\nLiz was wiggling her ass at me, wordlessly trying to get me to ignore Sara's advice. I rubbed the head against her dripping opening a few times, but didn't push inside her. I let Sara grip my cock and guide me inside slowly, until I had about half of it in.\n\n\"Fuck,\" Liz muttered. \"That is big.\"\n\n\"See?\" Sara said, smiling at me and rolling her eyes as if to say \"Kids - you can't tell 'em anything these days.\" \n\nLiz rocked her hips from side to side, getting comfortable with my intrusion. \"But it's not too big. C'mon, Sara. Let him let me have it.\"\n\nI looked at Sara, and she nodded. I gripped Liz's hips with both hands and slid in further, until my hips made contact with her ass.\n\n\"Shit!\" Liz shouted. \"Tell me that's all!\"\n\n\"That's all,\" I said. \"But now, I'm going to fuck you with it.\"\n\nShe just whimpered as I pulled out, all the way until just the head remained inside her. I pushed all the way back in, slowly but firmly, and I could hear the air rush out of her lungs.\n\n\"Oh, fuck,\" she said. \"I'm gonna cum so quick, Brad.\"\n\n\"Don't hold back,\" I said. \"Let it go.\"\n\nI picked up the pace a little, still not slamming into her at full speed but giving her plenty to think about. Sara gently massaged Liz's ass cheeks as my hips repeatedly pushed against them.\n\nSuddenly, Liz lifted one arm and pulled Sara down next to her. She buried her head between Sara's tits and screamed as she came. I sped up accordingly, and by the time the orgasm was over, I was really giving it to her.\n\n\"Fuck, yeah,\" Liz said. \"That took the edge off, but I want you to make me cum again. Fuck me as hard as you can.\"\n\nI didn't need to be told twice. With Sara out of the way, I spanked both of Liz's ass cheeks as I started pounding her as quickly as I could. Her pussy had been extremely tight, but was loosening up some now that it was used to me.\n\n\"Take your shorts off and c'mere,\" Liz said, licking her lips at Sara and patting the tent floor in front of her.\n\n\"Liz, I don't know,\" Sara said. \"I've never\u2014\"\n\n\"You think I have?\" she fired back. \"Just get over here. I want to explore.\"\n\nSara looked at me, and I just shrugged. I really hadn't expected them to do anything with each other outside of kissing, but I wasn't about to stop them if they wanted to do more. Sara finally pulled her shorts off and slid back a few feet, putting her legs on either side of us. I briefly stopped assaulting Liz's ass and reached down to squeeze Sara's feet, to give her a little encouragement.\n\n\"Oh, fuck,\" Sara said, sharply inhaling as Liz's face dipped between her legs. Liz's blonde hair spilled across Sara's thighs, so I couldn't really see what was going on, but I had a vivid enough imagination to figure it out.\n\n\"Yeah?\" I asked, looking at Sara. \"You like having your best friend eat your pussy?\"\n\n\"I do,\" she said. \"It's... different, but it feels so damn good.\"\n\nShe wrapped a hand in Liz's hair to emphasize her point. \n\n\"Do a good job, Liz,\" I said. \"Or I won't make you cum again.\"\n\nSara shot me an evil grin as Liz whined something unintelligible into her pussy. I'd really said it more to get Sara going than anything else, because I could sense an even bigger orgasm building in Liz's body, and there was nothing I could do to stop it short of pulling out of her completely.\n\nAnd I wasn't about to do that.\n\n\"Oh, yeah, get your tongue up in there,\" Sara said, falling onto her back now and letting Liz pleasure her. My thighs were starting to burn from the intensity of fucking this beautiful blonde sex goddess, but I wasn't stopping until she came again.\n\nI felt Liz's thighs start to shake uncontrollably, and her feet were smacking against my thighs and calves as she flexed her legs. Normally, I would have pulled Liz's hair to make her cum harder, but Sara looked like she was enjoying herself. So, I just pushed myself up on my toes to get a little more leverage and fucked Liz as hard as I could.\n\nLiz screamed as she came again, and Sara closed her legs around her face to keep cops in Utah from hearing. Of course, the screaming vibrated against Sara's pussy, and she tensed up as well, sitting up again and holding Liz's mouth against her. She was just close enough to kiss, so I forced my tongue into her mouth.\n\nLiz sagged underneath me, sliding down until she was lying on her stomach. Sara backed away as well, and we both moved to Liz's side as she recovered.\n\n\"Did she make you cum?\" I asked Sara.\n\n\"Almost,\" Sara said. \"But you're about to.\"\n\nSara pushed me onto my back and wasted no time climbing on top of me. She had already experienced my cock, so she didn't feel the need to go slow like she'd forced Liz to do. Instead, she sank down onto me with one stroke.\n\n\"Oh, God.\" Sara shuddered as the words came out.\n\n\"Did that hit the spot?\" I asked.\n\n\"You're hitting all the fucking spots.\"\n\nI let Sara control the pace, and she took it fairly slow, easing herself up and down on my cock. I ran my hands up her sexy legs, feeling her calves twitch with each trip up and down. She was bent over so far that her tits hung down between her knees, and I couldn't resist gently tugging on each nipple.\n\nThat position was killing Sara's knees, though, so she got on her knees and continued to piston herself up and down. That's when we noticed Liz stirring off to our left. She got up to a kneeling position as well.\n\n\"You guys look so fucking hot together,\" Liz said, and I agreed. Sara was fucking gorgeous, and with her eyes closed, her mouth hanging open and her face pointed at the roof of the tent, she was almost angelic. Sara might have really made an excellent girlfriend, I briefly thought. If only I hadn't fucked up so royally the first time around...\n\nOh well, I thought. I had, and now I had Kelly. And Kelly DID make an excellent girlfriend. This was just sex. Granted, it was really great sex, with a good friend of mine and her best friend, but I knew once it was over, I'd wish they were both Kelly.\n\n\"Sit up a little,\" Liz said, breaking me from my reverie.\n\n\"Oh,\" Sara said, doing just that. \"You want me to return the favor?\" Sara sounded a little nervous, which wasn't like her at all.\n\n\"Sure,\" Liz said. \"But not right now. I'd have to stand up for that, and there's no way my legs are letting me do that.\"\n\nWith that, she swung one leg over my head and knelt over my face, and my view of Sara disappeared. It was replaced with something just as exquisite, though. I couldn't see much, but I could tell her pussy was red and swollen from the beating I'd just given it. So, I was very gentle with her, licking up one side of her lips and down the other, only briefly straying to her clit.\n\nSara was the opposite of gentle, though. She started slamming up and down on me as hard as she could, clearly nearing an orgasm of her own. For some reason, though, she lost her rhythm and fell forward, and I could see her head on Liz's right shoulder. I took advantage of the new position to plant my feet and fuck up into Sara.\n\n\"Holy shit,\" Sara moaned. \"Fucking me so good.\"\n\n\"Is he gonna make you cum, Sara?\" Liz asked. I had no idea where Liz's hands were, but I was sure she was trying to help her friend along.\n\n\"Fuck, yeah,\" Sara groaned. \"He's gonna make me cum so fucking hard.\"\n\nI had just wiggled my tongue up into Liz's pussy when Sara cried out against her shoulder, and I could feel her orgasm rippling through her body, and Liz's by extension. I kept up my pace, trying to fuck her all the way through it. \n\nWhen she was finally relaxing against Liz, I focused my efforts on Liz's clit, bathing it with my tongue. It was a tight fit, but I managed to wriggle one of my hands between us and slide my index finger up inside her hole. \n\n\"I think he's gonna make me cum again, too,\" Liz gasped. Sara's head disappeared from Liz's shoulder, and I could hear the sucking sounds as she latched onto Liz's nipple. I felt a finger poking against my tongue as I licked Liz's clit, too, and I sucked the tip of it into my mouth briefly before letting it go.\n\nI let Sara have her clit, and shoved my tongue back into her pussy. I used my hands to spread Liz's asscheeks as far as I could, opening her pussy as wide I could so my tongue could penetrate her.\n\n\"You're gonna make me cum, too, Sara,\" Liz cried out. \"Fuck, you both are too much\u2014\"\n\nNone of the rest came out, because now it was Liz's turn to use Sara's shoulder as a muffler. Liz's hips bucked hard against my face as she exploded, and I wouldn't be surprised to find another bruise on my jaw in the morning.",
        "Liz slid off of me onto her back, but my cock was still impaling Sara, and I fucked up into her a few times - leisurely strokes, but more than enough to let her know I was still hard.\n\n\"Holy shit,\" Sara said. \"You didn't cum from all of that?\"\n\n\"Almost,\" I said, though I was never really dangerously close to exploding.\n\n\"Wow,\" she said. \"You're definitely not the boy I slept with three years ago.\"\n\n\"I thought we'd established that by now,\" Liz said, and both Sara and I had to laugh. \n\n\"Well, then, what do you want, Brad?\" Sara asked. She grinded up and down on me a few more times. \"Liz has gotten off three times, and shit, I'm probably in double digits by now, counting the concert. But you haven't cum since we got back to the tent. How can we help you?\"\n\nShe was being coy now, and I really wanted to just throw her down and pound the shit out of her, like I'd done in the empty field behind the band shell. \n\nInstead, I thought of something I wanted more.\n\n\"I want to fuck you both.\"\n\n\"Pretty sure you already did that,\" Liz said, drawing another laugh from Sara. \"You're fucking her right now, and my pussy is damn sure you were just there a few minutes ago.\"\n\n\"At the same time. One after the other,\" I said.\n\n\"Oooh,\" Sara said. \"How do you want us?\"\n\n\"Get up, and lay on top of her, on your back.\"\n\nSara pulled off my cock, and it slapped against my stomach angrily. I figured I could use a new condom by now, so I took care of that while they got situated. Liz had already been on her back, and now Sara lay on top of her, just slightly an angle so I could see both of their faces. Part of Liz's right breast was hanging out below Sara, but other than that, it was like one body with two faces.\n\nAnd, as I looked down where their hips were stacked together, two pussies.\n\nBoth were still incredibly wet, and my cock was harder than steel. I knew this wasn't going to take long, but I promised myself they'd each get off at least one more time.\n\nSince Liz had gone the longest without, I chose her first, this time sliding all the way into her with one stroke. I expected a shout, but all I was got was really loud whimper, and when I looked up, I saw that they were making out with each other.\n\n\"I don't think you girls understand just how incredibly sexy that is,\" I said. \n\n\"You're making us both really fucking hot, Brad,\" Sara said. \"We can't help it.\"\n\n\"Why in the fucking world would I ever want you to?\" I asked, not expecting or receiving an answer.\n\nI fucked Liz for two solid minutes before pulling out and entering Sara. She locked her ankles behind my back while I gave it to her. She grunted whenever I gave her a particularly hard stroke, but she was still too wrapped up in Liz to say anything.\n\nI went back to Liz and stayed in her for maybe a minute this time before going back to Sara. When I looked up this time, Liz was tweaking one of Sara's nipples. I was getting extremely close, so it was time to make these extraordinarily sexy women cum. \n\nI took Liz's other hand and guided it onto Sara's stomach, assuming she would figure out the rest. She did, and I felt her fingers brush against my cock as I fucked Sara. She pinched her friend's clit, and Sara's heels dug into my back as she erupted one more time. \n\nI switched back to Liz now, but then I leaned over both of them until my head was inches from theirs.\n\n\"I hate to break up this extremely hot make-out session,\" I said, \"but I'm feeling a little left out.\"\n\nLiz instantly stopped kissing Sara and turned her head toward me. I forced my tongue into her mouth and basically raped her lips while Sara nibbled on her earlobe.\n\n\"It's your turn, Liz,\" I spat out. \"I want you to cum for me one last time.\"\n\nOur lips met again, and I started pounding her as hard as I had been when she came the first time. I could hear Sara talking to her.\n\n\"This feel so hot, Liz, lying here between you while he fucks you. Cum for us, you sexy little bitch. Cum all over that big, hard cock.\"\n\nShe was just about there, but Sara pushed her over the edge.\n\n\"I bet if you cum for him one more time, he'll finally cum for us.\"\n\nThat did it, and Liz moaned into my mouth as her pussy tightened around my dick. I almost lost it right then and there, but somehow I managed to hold off my own, perilously close orgasm.\n\nSara and Liz went back to kissing as I got back on my knees. I stroked into Liz a few more times before going back to Sara, where I spent just a few seconds before alternating. After a minute I was switching back and forth with every stroke. \n\nI have no idea which pussy I was in when my balls started tingling, but I quickly pulled out and yanked off the condom.\n\n\"Fuck, he's gonna cum,\" Liz said.\n\n\"Cum for us, Brad,\" Sara said. \"All over us.\"\n\nI did exactly that, unleashing blast after blast across both of their puffy, swollen pussies. They'd stopped kissing and were cheering me on now, as I showered them with a surprisingly large load, considering it was my third time in the past hour and a half. \n\nI wanted nothing more than to fall on top of them, but I didn't want to squash Liz like a bug, either, so I managed to land mostly beside them. \n\n\"That's easily the hottest thing I've ever done,\" Liz said.\n\n\"I'm not sure which was greater, that or what Brad and I did earlier at the concert,\n\nSara half-agreed. \"Either way, it was fucking spectacular.\"\n\nIn my mind, there was no contest - the earlier sex with Sara was the winner, mostly because of the buildup and the history between us. But then again, Sara had history with both of us, and it was beginning to look like she'd at least thought about Liz sexually for a while. \n\n\"It was profoundly incredible,\" I said. \"I thought just being with Sara would make this day perfect, but once she let you in Liz... that just made everything better. Thank you. Both of you.\" \n\nWe cuddled together and kissed on each other for another few minutes, but there was a subtle tugging at the back of my brain throughout. Finally, Liz started to drift off to sleep, and Sara rolled to her side. I grabbed a shirt from the pile and wiped up as much of the mess from their pussies as I could, though some of it had dried by now.\n\n\"Thanks, Brad,\" Sara said. I wasn't sure if she was thinking me for the cleaning or everything else that had happened. \"We're gonna stay here and sleep with you. That's ok, right?\"\n\nIt had to be well after 2 by now, and I'd never considered them going back to their tent, anyway. Sara made it a moot point by falling asleep with her head on Liz's chest before I could answer anyway.\n\nMy sleeping bag had been pushed into the back of the tent by all the festivities, so I pulled it up next to Sara and climbed into it. I shut off the girls' phones and made a quick check of mine before I dozed off.\n\nI had a bunch of text messages and a couple missed calls, but there was only one text I was interested in reading tonight.\n\n\"Sorry I couldn't talk so much today,\" Kelly's message said. \"Caves have pretty bad cell reception, apparently. Remember, I'm working a double tomorrow, but I want my story time!! You'll have to e-mail it to me. I expect to see it by the time I get my hour break during the day, buster. I'm sure you rocked her world, though. And I can't fucking wait till you can rock mine in person.\"\n\nGod, I was so into her I wanted to scream. I sent her back a quick text saying that of course, I'd email her story time as soon as I could, and that I hoped her family day was at least a welcome break from flipping tacos, if not fun by itself. I quickly checked the clock to ensure that it was, in fact, after midnight and officially Saturday, and then I ended the text with three simple words, words that excited me and scared me all at the same time:\n\n\"See you tomorrow.\"\n\n*************\n\nJust two or three more now... as always, vote and comment and send feedback... I like to know what you're thinking!"
    ],
    "authorname": "SpotInTheSand",
    "tags": [
        "brad",
        "kelly",
        "sara",
        "liz",
        "free bird",
        "camping",
        "road trip",
        "threesome",
        "lynyrd skynyrd",
        "concert"
    ],
    "category": "Group Sex",
    "url": "https://www.literotica.com/s/brads-road-trip-ch-18"
}
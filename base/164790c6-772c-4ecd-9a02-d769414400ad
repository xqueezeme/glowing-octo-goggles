{
    "title": "The Boys Next Door Ch. 03",
    "pages": [
        "Blue ink looped across the paper in front of Diana. Her own pen was writing, and she was the one making it move. But she couldn't say what words she'd scrawled in her notebook, or what her AP World History class was so busy discussing right now. She'd just made some brilliant comment, and she couldn't even remember what it was.\n\nWhat day was today, anyway? Wednesday. Three more days of classes before her last-ever round of high school finals, eight days until graduation and freedom, and four days since she'd given her virginity on a silver platter to the boys next door.\n\nShe didn't expect anything more to happen between her and the twins. She couldn't. She might be inexperienced, but no way was she naive enough to consider that crazy, intensely hot, and totally unexpected weekend to be anything more than a hookup. With breakfast. The two of them had decided to help her out for old times' sake, and that was all. \n\nShe did have to admit that, back at school, she'd felt less shy about meeting boys' eyes, even having short conversations. It couldn't hurt that none of the guys at school were really in the twins' league, or that since the weekend, she'd been more ragingly horny than ever before, too distracted to worry about being awkward.\n\nDiana shook her head, flipping to a fresh page in her notebook and listening to the argument about some year BCE with half an ear. Brendan had at least been polite enough to call on Monday evening. Of course she'd been doing dishes in the kitchen after dinner, and of course he'd called the landline and gotten her mother.\n\n\"Brendan!\" Her mother had sounded surprised, but pleased. When Diana had come home from the O'Brians' house the day before, her parents had commented on how nice it was to rekindle old friendships. \"I'm so glad you called. I wanted to thank you for looking out for Diana this weekend.\" A pause. \"Yes, I know she's all grown up, but parents do worry about their only daughter when they're away.\" \n\nDiana almost choked, covering up her laughter with a fit of coughing when her mother glanced at her.\n\n\"Yes, of course, Ian too,\" her mother said grudgingly in response to something on Brendan's side. \"I'm sure you were both very hospitable.\"\n\nAnd the conversation just went on from there. Diana did her best to linger over loading the dishwasher and wiping down the counters while she eavesdropped, wondering why the hell Brendan was chatting up her mother. From her mom's half of the conversation, which involved three-quarters of the talking, it sounded like she was catching up on Brendan's entire life story from his past two years at UConn, and he was asking all about her yoga classes and her knitting club. Diana could only marvel.\n\n\"Oh, you want to talk to Diana?\" her mother asked. Like it was an afterthought. \"She's right here.\" Beaming, her mother held out the phone. \"He's such a nice boy,\" she stage-whispered to Diana. \"If he and Ian weren't twins, I'd wonder if they were even related.\"\n\nDiana took the phone like it was a hot ember, wondering if she could casually bring it into her bedroom \u2014 or if that would raise her mom's suspicions \u2014 or if Brendan would unleash a stream of dirty talk about her sweet pussy and get off on knowing she was trying to keep it together in front of her mother \u2014 \n\nShe needn't have worried. The entire conversation was disappointingly wholesome. Brendan asked about her finals and said he hoped she had time to relax. She managed a question or two about the internship he was starting in a couple of weeks, some financial job somewhere that involved wearing a tie. He mentioned casually that Ian would be working at the gym nearby, which would involve not getting up early. Diana made a noncommittal response. Should she give Brendan her cell number? Play it cool? Which was more of a turn-on, Brendan in a tie or Ian in a tank top? Was this going anywhere at all outside her head?\n\nWhile she debated, her dress starting to feel uncomfortably hot, he asked, \"Do you want to talk to Ian too? He's right here.\"\n\n\"Um,\" she said. Her throat was dry now. Her mother was busy sorting through library books on the dining room table, humming. She heard Brendan's muffled voice on the other end, impossible to understand, and some brief response from Ian.\n\n\"Another time.\" Brendan was back on the phone. \"Talk to you later, Di. Sweet dreams tonight.\"\n\nAnd that had been it. Diana tuned in briefly to Ms. Fielding's imploring voice, begging everyone to organize their thoughts before they wrote their essays for their final, then tuned out again. Obviously, Brendan had called because that was the nice thing to do after you talked a girl into a threesome with you and your twin brother, and he was a nice guy. At least, most of the time. And if Ian didn't have the decency to even get on the phone, two days after he'd taken her virginity \u2014 well, that was about what she'd expect from Ian.\n\nThey probably teamed up to seduce a new girl each weekend, and were already trotting off to make their next conquest. But she couldn't help reliving every single burning minute of their time together \u2014 the pool, the treehouse, their parents' bed, the kitchen \u2014 and imagining more. Even as she told herself sternly to focus, right here, right now, in her mind she was on her hands and knees at the front of the classroom, taking Brendan's impossibly slow, deep, sensuous thrusts from behind while she swirled her tongue around Ian's pulsing cock. When Brendan began caressing her clit and Ian gripped her hair with his hands, she clenched her thighs together in her seat, pushed her glasses casually up her nose, and smoothed down her strawberry-printed skirt over her knees \u2014 the kind of clothing that had earned Ian's \"librarian-on-crack\" comment. \n\nWhen she glanced to the side, she saw Alex Noriega, the boy next to her, checking out her full breasts. It was the sort of thing that would have made her expire of shame three days ago, unable to meet his eyes or talk to him for the rest of the year, but now, with lust arrowing through her body, it just made her stomach lurch with excitement. She watched Alex calmly until he glanced up and met her eyes. Their gaze held for a minute before he looked away first\u2014 him, not her. \n\nAs soon as the bell rang, she gathered her books and sped to the nearest restroom, where she leaned against the wall in the furthest stall from the door, reached inside her damp panties, and stroked her swollen clit, trying not to moan. God, her pussy was so hot and wet, and oh yes, Alex was on his knees in front of her, his head under her skirt, lapping up her cream as she purred and stroked his head. When she was about to come, she pushed him away and\u2014 jesus, Brendan's cock was sinking into her again, filling her, stretching her eager cunt, while Ian grunted about how fucking good her tongue felt on his shaft and flooded her mouth with hot cum.\n\nShe shuddered, her thighs trembling, as Brendan teased her clit with aching patience and murmured about what a good girl she was. Yessss...his thrusts were getting deeper, almost painful and so very good. She bit her fist to keep from shrieking as she came, her whole body spasming and her still-tender pussy clenching tightly while she circled her clit until she was limp against the wall of the stall.\n\nAs she washed her hands and splashed water on her cheeks, her ears ringing from the three girls gossiping about last week's prom by the tampon machine, sanity slowly returned. Her friends, who knew nothing about the weekend, would be waiting for her outside the cafeteria, tapping their feet over her lateness. She needed to be careful. She might be a ball of lust right now, and Alex might be cooperative in her fantasy, but who knew what signals she might send out to him or any other boys at school if she didn't watch herself \u2014 or how they'd react? \n\n*******\n\nAt eleven-thirty that night, Diana was well into the same hot date she'd been enjoying for the past few nights \u2014 and most of her time in high school, if she was being honest: comfy in her bedroom, perched at her desk, with her books and papers for company. A few candles and mellow indie rock on her record player set the mood. \n\nHer friends were busy meeting for a study session at someone else's house, and she'd thought about going, but she always studied better alone. It was easier to focus. And right now, she needed that focus. Fantasizing about boys was the last thing she had time for. Thankfully, she'd snapped back into the groove. She was calm, she was collected, and she was deep into calculus, working out one practice problem after another, absent-mindedly chewing on one of the oatmeal-chocolate-chip cookies she'd baked that afternoon to give herself a break. A dozen more cookies were piled on a plate next to her. She knew she'd go through them all before she was done tonight, along with the giant mug of iced coffee next to her calc textbook. If she was lucky, she'd wrap up studying around one am.\n\nA light knock at her window interrupted her scratching pencil. Must be the huge tree outside, whipping its branches against the glass. Ignoring it, she took off her glasses and leaned back in her wooden chair with her eyes closed, arching her back to get the kinks out and rubbing her forehead. Two more knocks. Was the tree really doing that? It wasn't even windy outside.\n\nOpening her eyes, she started when she saw the smiling face outside her window. A gorgeous male face with dimples showing. Her stomach lurched. One of the twins had climbed the tree and was looking right at her, expectantly, through the glass. \n\nShe couldn't believe it. Brendan and Ian had climbed up to her window a few times when they were kids \u2014 she'd done it, too \u2014 but it had been a long, long time since anyone scaled those branches. She tried to keep her hand from shaking as she tugged the window open.\n\n\"Hey,\" he whispered. Brendan. The cleft in his chin told her that, plus the friendly expression. \"Can we come in?\"\n\nWe. They were both outside. Oh, boy. \n\n\"I'm busy,\" she managed.\n\n\"We just want to say hi. We know you're studying so hard.\"\n\nDiana breathed in and out. Already, her thighs clenched together, just from seeing him and hearing his voice. Her nipples, suddenly hard, poked against her constraining bra. Her pussy ached unmistakably.\n\n\"Just for a minute. I still have a lot to do.\"\n\nNervously, she took the screen off the window and set it by her desk. Brendan climbed in surprisingly easily, maneuvering his long body through the window. He leaned over her desk, looking over the pencil-scrawled papers.\n\n\"Calc with Mr. Bertell? I had him for Trig. He's a good teacher.\"\n\n\"He's decent,\" she managed. Outside, branches creaked. She could only imagine Ian swinging himself up through the tree. \n\n\"You're going to ace your final.\" Brendan grinned at her and dropped a hand on her shoulder. Her whole arm prickled from the touch. \"I can tell.\" He moved behind her, finding her other shoulder and kneading out the knots with long, sure strokes. \n\nSweat gathered under her arms, and her dress felt much too hot. The strawberry-printed cotton was practically asking to be peeled off. \n\n\"Well, thanks,\" she murmured. She started as Ian's bulk appeared in her window, her whole body tightening. He dropped to the floor, more gracefully than he had any right to, and rolled his eyes at the papers on her desk.\n\n\"You already got into Yale. Blow off your finals. Live it up for once.\"\n\n\"Colleges still look at grades.\" Her throat was dry now, and her voice sounded hoarse to her ears. If Brendan in her bedroom made her nervous, Ian sent her adrenaline into overdrive. And the two of them together... Jesus, her parents were right downstairs. Quickly, she put her glasses back on and started writing again, even though the stream of symbols coming out of her pencil was total gibberish. \"And I like to do my best.\"\n\n\"I like to do my best,\" Ian imitated in a high voice, picking up a cookie and tossing it into his mouth whole.\n\n\"Shut up,\" Diana mumbled automatically, trying to focus on the papers in front of her. Brendan hadn't stopped massaging her back. He was really taking his time, and he was much too good at it. She hadn't even realized how stiff she was. At least Ian was back to being Ian, instead of confusing her with hangover cures and breakfast. She could deal with bickering back and forth like little kids \u2014 just barely. \"I'm trying to take a derivative.\"\n\n\"I hear that's illegal in most states.\"\n\nDiana bit her lip to keep from laughing. Ian looked pleased. He scooped up a handful of papers from her desk and held them out the open window. \"Hate for you to get in trouble. How about I take care of these for you?\"\n\n\"Only if you want your balls wrapped around your neck,\" she snapped, too annoyed now to be nervous.\n\nBrendan chuckled softly behind her. He was still rubbing her shoulders, his fingers slipping under the collar of her shirt now and then to tease her bare skin. She couldn't help sucking in her breath.\n\n\"That's more like it.\" Grinning, Ian tossed the papers back on her desk and loped around her room. His gaze swept the stacks of LPs next to her record player. \"Poser.\"\n\n\"I like records.\" Her stomach lurched as Brendan's hands moved up her neck to tangle in her hair, rubbing the back of her head.\n\n\"You're living in the past.\" Ian had already moved on to her dresser. He picked up the framed photos of Diana with her friends and inspected them. \"Do you see these people? Or do you all sit alone in your bedrooms and study all night?\"\n\n\"Ian, stop touching my stuff.\" He'd done this when they were little kids too, Diana remembered with growing irritation. He'd gone through her things when the twins came over, teasing her about them, until she'd informed him that he wasn't allowed in her room anymore and driven the message home with a bucket of water balanced on her door.\n\nInstead, he hooked one finger around a hot pink thong lying on her armchair and held it in the air. \"Cute.\"\n\nShe tried to get up, but Brendan's hands were firm and soothing on her shoulders. Not holding her down \u2014 she knew if she really tried, she could stand up \u2014 but God, his touch felt good. She just wouldn't let Ian see that he was getting to her. He tossed the panties back on the chair. \n\n\"Now where's that dildo?\"\n\n\"I'll never tell you.\" Her face was scarlet now. As she tensed, Brendan's palms moved down her back, then up again, loosening the kinks, making her breasts tingle and her stomach knot with excitement. God \u2014 yes, her thighs clenched when he brushed her hair off her neck and rubbed his thumb intimately over her exposed skin. Seeing Ian strolling around her room, examining and fondling everything she owned, all sleek muscles and smug masculine confidence, wasn't helping.\n\nBefore she could stop herself, she sighed and leaned back into Brendan's hands.\n\n\"That's it,\" he said gently. \"Relax. Take a break.\"\n\n\"I need to study,\" she whispered.\n\n\"You will.\" \n\n\"You have a lot to learn, baby.\" Ian was rooting through her drawers now. \"And it doesn't all come out of a book.\"\n\n\"Get out of there,\" she hissed. But he'd already opened her underwear drawer, pawing through the tiny colored panties, the generous lacy bras, the garter belt that she'd bought out of curiosity and worn as the world's best-kept secret under her knee-length dresses. \n\n\"Goddamn, you have a lot of sexy underwear for such a shy little girl. Found it!\" He held up the purple dildo, which looked obscene in his hand, and grinned evilly at her. \"Why don't you give us a show?\"\n\n\"No way.\" Her voice dropped to a whisper. Brendan's hands sent shivers down her spine, and it was all she could do to keep from thrusting her breasts toward his palms and begging him to release them from her tight bra. Ian's hazel eyes, raking over her body, sent waves of hot and cold over her from top to bottom.\n\n\"Why?\" Ian crossed to her, planted his palms on her desk, and leaned over, right in her face. \"Are you scared, baby? Scared you'll like it too much? That the good girl will turn into a hot little slut who just needs to come in front of us?\"\n\nOh my God. She was starting to squirm in her wooden chair, rubbing her swollen pussy against the hard seat.\n\n\"We'll help you,\" Brendan murmured. A moan escaped Diana's mouth as he kissed her neck and sucked lightly on her flushed skin. As he sucked harder, his fingers deftly worked the top button at the back of her dress through its buttonhole. Another button, and another... Lust was taking over her body. She wanted to let her eyes slide closed, but she made herself keep them open.\n\n\"No,\" she said.\n\n\"No?\"\n\nBrendan's hands paused at the fourth button. Ian, still leaning over her, blinked. It was satisfying to see the startled expression on his face. Probably the first time a girl had ever told him no.\n\n\"I don't need anyone's help.\" Her face had to be redder than ever, and embarrassed as she was, her body felt even more hot and aroused. She forced herself to look Ian in the eye, trying to sear through him with her gaze the way he was doing to her. \"I'll do this myself.\"\n\nBrendan let go, stepping back. She couldn't see his expression, but she felt a lot more exposed without his hands on her and his presence at her back. She stared up at Ian's challenging face, one eyebrow raised, his grin mocking her.\n\nDefiantly, she reached back and undid the fourth button, then the fifth, drawing it out and telling her hands not to shake. Out of the corner of her eye, she saw Brendan walk around her to lean against her desk, his eyes moving over her appreciatively. \n\nUndressing herself in front of the twins was nothing like letting them unlace her swimsuit while she was half-drunk, or waking up already naked in bed with them. She felt incredibly exposed as the back of her dress gaped open. Slowly, she slipped the sleeves down her arms, revealing her red and white polka-dotted bra. Her creamy cleavage spilled over the top, creating a deep valley between her oversized breasts. At least, she'd always considered them oversized, but the look of hunger on Ian's face and aroused enjoyment on Brendan's face sent hot prickles of excitement and need through her full globes and right to her nipples. \n\nBoth twins leaned back against her desk now, their eyes traveling over her body and taking in every inch of exposed skin. Without their hands on her, their eyes burned her soft flesh everywhere they moved. \n\nHer cheeks were crimson again, heat and embarrassment flushing her face, but she slowly reached behind her back, grasped the hook and eye fastening, and undid her bra. Oh \u2014 it felt so good to expose her heavy breasts. Cool air soothed her hard nipples, puckered with excitement. \n\nShe could feel both twins' gazes like fingers, caressing her needy swells, and shuddered with arousal. Ian's eyes darkened with lust when he saw that shudder. He fisted his hands and pushed them in his pockets. Oh God \u2014 he was trying to keep his hands off her. Brendan's eyes were half-closed, a little smile playing over his lips as he watched her undress. He looked \u2014 proud of her. Approving. Letting her bra dangle from one finger, she handed it to him. He dimpled, flashing white teeth, and laid it on her desk. When her eyes met Ian's, he licked his lips \u2014 slowly, deliberately. Diana could practically feel his determined tongue snaking over her tight buds and heavy breasts, slithering a path between her thighs to where he'd lapped up her juices on Sunday morning and sent her into spasm after quaking spasm.\n\nA breeze from the open window, sending the candles flickering, tightened her nipples even more. Both twins' eyes were riveted to the rosy buds. Her hands trembling a little, she took off her glasses and set them on top of her calculus homework. Her legs barely supported her as she stood to let her dress fall over her rounded hips and onto the floor. Stepping out of the bright puddled fabric, she lay down on her bed. ",
        "As turned on as she was, Diana couldn't bear to take her tiny red panties off yet. The two pairs of hazel eyes staring at her body were making her squirm and gasp, without even being touched. She wanted to close her eyes for courage, but she couldn't look away from the twins' intent gazes. At least her bedroom was dim, with just the candles throwing light and shadows over her body. She let one hand slide from her collarbone down over her full breasts. Oh \u2014 yes \u2014 that felt so good. Her other hand came up to join it, exploring her warm curves. Yes...squeezing, massaging, pinching, and rubbing her breasts was so much hotter with an audience. \n\nMuffled TV sounds floated up the stairs and through her closed door, and she prayed her parents wouldn't come up to find their daughter writhing on her bed, fondling her own voluptuous breasts, squeezing her thighs together and rubbing her swollen clit against her soaked panties, all under the eager gazes of the boys next door.\n\nAnd as she looked down at her own body, her hand tracing a trail over her smooth belly and teasing just inside her red bikini panties, she knew what she needed. Ian was standing right in front of her at the foot of her bed, candlelight flickering over his face, his eyes locked on her body.\n\n\"Take my panties off,\" she panted, lifting her hips toward him.\n\n\"What do you say?\" Ian asked with a sly smile. She didn't smile back.\n\n\"I say, take my panties off, Ian.\"\n\nHis face lit up with surprise. Without further ado, he hooked both thumbs under the sides of her string bikini and yanked it off in one hard pull, raising her ass and almost tumbling her backwards. The movement forced a gasp of excitement out of her. Then he grabbed the dildo from the desk and pushed it into her hand.\n\n\"Fuck yourself.\" Ian leaned over her, one knee planted between her spread legs. Diana gripped the dildo in her hand as if it would give her courage, but it wasn't helping. Brendan, standing to her right, lifted her leg, caressing the smooth skin, and eased it over his lap as he sat down on her bed. Oh God \u2014 and Ian's hand anchored her left thigh, squeezing the soft flesh. Her legs were spread wide, her pussy open to both their stares, and she had no way to close her thighs. Brendan rubbed the inside of her knee so gently that she twitched and moaned softly, warm juices slicking her pussy. His eyes roved approvingly over her rosy folds. \n\n\"Please.\" She bucked her hips upward, begging for someone's, anyone's touch.\n\n\"You do it, baby. Remember?\"\n\nThe challenge in Ian's eyes went straight to her cunt, making her spasm with excitement. Okay then. She'd do it. There was no mistaking how incredibly turned on the twins were, how she was the one who had turned them on. Well, she'd give them a show to remember. Make them tent their pants with excitement. And then send them home with the worst case of blue balls they'd ever known.\n\nSlowly, her gaze traveling from a pair of hazel eyes dark with lust to a pair of hazel eyes bright with interest, she cupped her mound with her free hand, then let one finger slip into her soaked valley.\n\n\"Mmmmm,\" she moaned. So good to be touched. So good to touch herself. She stroked her juicy lips slowly, drawing the motion out much more than she would by herself. And yes \u2014 it felt better this way. The twins' eyes on her, their warm hands holding her legs open, their hard bodies so close to her, woke up every nerve ending on her skin. \n\nWhen she finally touched her clit, a wave of excitement shook her body. No one spoke. No one told her she was a hot slut or a good girl or a sex bomb. They didn't need to. Their eyes said it all.\n\nDiana let her eyes close, the way she usually did when she pleasured herself, but the urge to see the twins was too strong now. Her eyes opened again, looking boldly at them both. Embarrassment was gone. Hotness had taken it place. Slowly, she circled her hard pearl and brought the dildo down to her eager pussy, teasing her tight opening with tiny circles. Ian's eyes opened wide with excitement when she pushed the tip of the thick purple rod into her heat and wetness, sending a hard spasm of need through her cunt that made her gasp.\n\nHer pussy contracted again as she worked the dildo into her slick tightness. Brendan's hand moved up her leg, draping it over his lap so her thighs spread even wider. Oh God \u2014 they were both staring at her pussy, the thick dildo buried deep now, her finger moving on her clit. Ian's fingers tightened on her flesh. She didn't think they could spread her any farther open than they already had, but they were. Taking a deep breath, she began to slowly fuck her tingling pussy with the smooth dildo, keeping the circles on her clit sensual and light.\n\nBefore Ian had taken her virginity, Diana had never thrust much with the dildo. She liked burying it inside her clinging pussy, arousing the sensitive walls of her cunt, or teasing her entrance with it, but she hadn't really understood just how much movement was involved in actual sex.\n\nNow she did, and she put it to full use. Two handsome faces stared at her pussy with the same intent expression as the dildo disappeared almost completely into her cunt, then eased nearly all the way back out. Diana began to pant as she thrust faster, keeping the same slow touch on her clit. Brendan had taught her that, she thought in a fog. He'd taught her how incredibly good a gentle touch on her clit felt while her pussy was being ferociously fucked.\n\nWhen fingers met the sensitive skin where her thighs joined her crotch, massaging her firmly on both sides, pulling her juicy lips open wide and exposing her soft pink pussy completely to two pairs of eyes, she cried out, bucking her hips. \n\nA hand clapped over her mouth. Brendan's. His lust-glazed eyes moved over her as she licked his palm instinctively, moaning into his large hand as her hips thrust upwards to meet the dildo. God, she was writhing naked on the bed, caught between two fully dressed guys devouring her with their eyes and holding her thighs down firmly whenever she tried to move. She needed those fingers massaging the edge of her crotch to slip into her warm wet valley \u2014 soooo badly \u2014 but before she could ask or plead, her pussy convulsed around the dildo. \n\nShe cried out again into Brendan's palm, sucking the warm salty skin as she came, her pussy clamping on the thick log buried inside her with incredible tightness. Oh God \u2014 Ian was reaching into his boxers with his free hand, pulling out his engorged cock, fisting it as he watched her wriggle and shriek into his brother's hand. A pearly drop of liquid hung from the tip. His breathing was ragged.\n\nEventually, she let go of her clit, breathing slowing, one hand dropping weakly to the bed. Assured fingers pulled the dildo out of her cunt, and she moaned again as it slid out of her.\n\nBrendan uncovered her mouth. Smoothing her sweaty hair back, he kissed her forehead and stood up. God, he was gorgeous \u2014 stripping off his t-shirt, muscles rippling as he bent to pull down his shorts. Fingers met her pussy suddenly, dipping into her creamy wetness, and she squirmed. Too sensitive \u2014 no, so good \u2014 Ian watched her as he worked his fingers into her pussy, his other hand still stroking his cock, more liquid dripping from the tip. Diana couldn't help reaching out to grasp his thick shaft, moaning when he pinched her swollen lips.\n\nA slow grin spread over Ian's face. But when she began to rub her thumb over the slick head, pumping his cock the way he'd shown her in the treehouse, he gripped her hand with his.\n\n\"Not yet.\" His whisper was throaty. He began to climb over her. Large hands closed over her tingling breasts. Lips met hers from above \u2014 Brendan's, she realized. She pulled back.\n\n\"Brendan,\" she whispered. Her fantasy \u2014 from history class \u2014 she could actually make it real. Had she really thought she'd send the twins home after she came? \"Behind me. And Ian in front of me.\"\n\nThe twins exchanged surprised glances over her head. Clearly, they'd had something else in mind. Too bad. They'd climbed into her room, they'd invaded her turf, they'd interrupted her study session, and she'd just put on a show with her own dildo - at their demand. Sweaty and exhausted as she was, she met their gazes. They both had to be so turned on right now, and God, so was she.\n\nBefore she knew it, Brendan was helping her up, turning her over, easing her onto her hands and knees on the bed. Limp from her orgasm, she let him arrange her without protest. Not that she wanted to protest. Brendan's hands were so warm, massaging all over her body. She moaned softly when both hands found her ass from behind, firmly caressing and squeezing her round cheeks, and gasped when he spread them open, cool air hitting her wet pussy. God \u2014 he could see everything from back there. \n\nIan, naked now, climbed in front of her, lounging at the head of her bed with her pillows piled underneath him and his meaty cock pointing straight at her face.\n\n\"You know what to do, baby.\" His hands buried themselves in her dark hair, pulling it a little as he rubbed the back of her head. \"Suck me the way you sucked Brendan. He said your mouth is so sexy.\"\n\nDiana's answer was lost in a moan when Brendan's fingers slipped over her warm cunt, spreading her soaked lips. His other hand cupped one round, swaying breast. Something firm nudged her opening, and she instinctively pushed her hips back. Yes \u2014 that was his cock \u2014 sliding smoothly inside her pussy in one long deep stroke, opening up her tightness much more than the dildo, feeling even larger from behind as he held himself still against her. When she whimpered, wriggling to get used to his thickness, he squeezed her breast reassuringly, rubbing her back with his free hand. And even though he hadn't asked permission, suddenly it was very important to her to hear Ian do it.\n\n\"Ask nicely.\" Diana was panting, but she made herself look right at Ian. \n\n\"You'd love to hear that, wouldn't you.\" Ian's eyes burned straight through her body, setting her nipples on fire and tightening her pussy around his brother's fully sheathed cock. Brendan groaned softly behind her, his fingers moving on her breast. Diana could feel his sheer male bulk pressing against her soft ass and thighs, and she spasmed around him again. His cock was stretching her open, penetrating her so deeply, and he wasn't even moving yet. His balls, firm and soft at the same time, teased her swollen pussy lips. Her rumpled sheets pressed against her palms and knees. \"You'd love to hear me beg.\"\n\n\"And I'm going to.\" Lust had taken her over completely, her hot gaze swallowing Ian's. Slowly, deliberately, she dropped to her elbows, leaned forward, flicked out her tongue, and lapped up the dew that hung from the tip of his cock. Ian twitched. \"Don't you want to feel my mouth, Ian? Don't you want to\" \u2014 oh God, what to say, how could she do this \u2014 \"pump your hot cum down my throat?\" \n\nIan's eyebrows shot up. His face was flushed. His cock was a deep red. Diana's heart was pounding now, and she jumped when the fullness in her tingling cunt eased off, then intensified. \n\nBrendan was beginning to slowly, sensuously fuck her from behind. One hand held her hip firmly in place. Fingers rolled her hard nipple, gently pinching. God, he was watching all of this, hearing it, and she couldn't see his face to know what he thought of the interaction between her and his brother. All she knew was that his cock jerked inside her at her dirty words.\n\n\"Do it,\" Ian whispered. \"Suck me, you hot bitch.\"\n\nJesus. She should be angry, but her pussy, clasping Brendan's cock as he sank into her again and again, felt differently.\n\n\"That's not very polite.\" She gave Ian a winning smile, trying not to collapse in a gasp when Brendan changed his angle slightly, hitting her soaked cunt deeper. His hand left her breast and caressed its way down the slope of her belly, making her suck in her breath. \"Use your manners.\"\n\n\"I don't have any manners.\"\n\n\"You can do it, Ian.\" She copied Brendan's encouraging tone. \"I believe in you.\"\n\nOh my God. He was actually quivering, his cock jerking in front of her. His breath was coming faster.\n\n\"Suck me, baby,\" he whispered, \"Suck me, Diana.\"\n\n\"Better.\" She raised her eyebrows, gave his engorged head just one little lick. He groaned softly. \"But not good enough.\"\n\n\"Pleeeaaase.\" The breath hissed out of him. \"Please, Diana. Suck my cock.\"\n\n\"Good job.\" Heady power and lust surged through her body. She couldn't keep a grin from spreading over her face. \"You're a good boy, Ian.\" \n\nBefore she could see his reaction \u2014 had she really just said that? \u2014 she leaned forward and engulfed his warm cock with her mouth.\n\nAs soon as his swollen head touched her tongue, Brendan plunged forward, sending her lips sliding down Ian's cock. Oh God \u2014 he'd definitely done that on purpose. Her mouth was so full now of hard male, slippery and salty, her nose filled with the musky scent of Ian's balls. Ian's fingers tangled in her hair, holding her firmly, and for a moment, she could only suck and lick, her jaw aching a little. As Brendan eased back, she was able to move too, her mouth sliding up the thick erection between her lips. She let her tongue swirl all over the smooth head, remembering Brendan's patient voice coaching her on Sunday morning in bed. \n\nIan was groaning now. Dimly, Diana hoped her parents wouldn't hear anything over the TV downstairs. The thought only lasted a second, because Brendan's fingers, still exploring the soft curve of her belly and making her pussy twitch around his cock, slipped further downward, finding her clit. He gave it a very un-Brendan-like pinch, and she yelped around Ian's cock.\n\n\"That's it, sweetness,\" Brendan murmured. His fingers switched to caressing her swollen clit, leaving it every so often to wander around her sensitive lips stretched open around his cock. Oh God \u2014 swirling pleasure gathered in her pussy, rushing inward from his teasing touch. \"How does it feel fucking both of us?\"\n\nShe could only moan around Ian's cock. Ian was moaning, too, as she sucked him harder. Tugs from his fingers in her hair sent shudders through her body. His free hand reached below her, tweaking her hanging nipples forcefully. How could that feel so good? Curious, she scraped her teeth very gently along his hard shaft, and he jerked in her mouth.\n\n\"Fuck,\" he grunted. \"Diana...\"\n\nShe bit down, very lightly, and with a muffled yell, Ian thrust into her mouth, catching her off-guard. She did her best to keep up with him, massaging her tongue over his meaty erection while Brendan filled her deeply, again and again, rubbing her clit more and more firmly. Oh God - she needed \u2014 she couldn't \u2014 \n\nBrendan's fingers sent her crashing over the edge. She moaned helplessly around Ian's cock, squeezing his muscular thighs, as Brendan's sure touch coaxed her melting pussy to quiver and spasm on the unyielding rod thrusting into her tightness.\n\n\"That's right,\" Brendan whispered. Thick fingers urged her through more ripples of pleasure. \"Just like that. You come so good for us, baby.\" \n\nHer body buzzed. It just didn't stop. All of it \u2014 Brendan's cock, Ian's cock, her spasming pussy... All Diana could do was gasp for breath, waves of release washing over her whole body. She was grateful for Brendan's strong hands on her waist \u2014 the only thing keeping her from collapsing onto the bed as he firmly fucked her.\n\nIan's hands tightened in her hair, pulling hard. She made herself look up at him, her mouth full. His face, contorted with animal lust, was almost unrecognizable except for the hazel eyes locked on hers, narrow, then suddenly opening wide. \n\nHot creamy liquid flooded her mouth, coating her tongue in big spurts. Prepared for the flavor this time, Diana sucked eagerly, licking Ian's silken head, gripping his thick shaft in one hand, his deep grunts encouraging her, until his breathing slowed. Finally, she pulled her lips from his cock, her jaw aching a little, holding Ian's gaze when she swallowed. \n\nAs they stared at each other, Brendan squeezed her hips, levering her body, his powerful strokes forcing the breath out of her. Her arms trembling, she let her weight fall on her shoulders, her face buried in Ian's crotch. Her cheek rested against his thigh. His velvet cock, still hard, was right in her face. She breathed in his musky scent, barely aware of his fingers still tight in her hair or his other hand squeezing her breast as Brendan's soft and satisfied groans, his deep rhythmic thrusts, told her he was coming in her pussy.\n\nThe three of them lay tangled in her sheets, breathing together. After a few minutes, Diana lifted her head from Brendan's shoulder and stretched \u2014 or did her best to, nestled between warm male flesh. The twins both stretched too, their skin sliding against hers, then unfolded their muscular bodies from her bed. Diana watched, her eyes half-closed, as they pulled on their shorts and t-shirts.\n\n\"We'll let you study now,\" Brendan whispered in her ear. \"Good luck on your finals. You'll do great.\" \n\nWith a wink and a kiss on her cheek, he angled his body easily through the open window. Branches creaked below him. \n\nIan paused for a minute, his eyes raking over Diana's naked curves curled up in bed, then the jumbled papers on her desk. He looked like he was going to say something, but he just turned and followed his brother out into the night."
    ],
    "authorname": "SilverMuse",
    "tags": [
        "threesome",
        "two men one woman",
        "mfm",
        "twins",
        "brothers",
        "high school",
        "female masturbation",
        "dildo",
        "blow job"
    ],
    "category": "Group Sex",
    "url": "https://www.literotica.com/s/the-boys-next-door-ch-03"
}
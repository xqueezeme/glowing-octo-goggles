{
    "title": "Extra Credit Club Ch. 02",
    "pages": [
        "This story, like all others, has a beginning. It starts with a door.\n\nAll in all, it was quite a nice door: correct dimensions, made of cherry, with a big dream catcher hanging in the middle.\n\nIt was also the only thing keeping me out of the bedroom. You see, the door was locked.\n\nI leaned forward, placed my ear against the door, and strained to hear what was going on in the bedroom. My breaths were slow and quiet as I listened.\n\nI could make out Tessa's bright, energetic voice a few times, though I had no idea what she was saying. And there was something else, possibly Quinn moaning. Of course, it also could have been misbehaving plumbing, but I found that unlikely. The girls' apartment was very high class stuff.\n\nFootsteps approached and I leaned away from the door. I heard the loud click of the lock unlatching and the door cracked open.\n\nTessa slipped out and closed the door behind her. I looked her up and down. Holy fuck she looked hot tonight!\n\nTessa wore a slender naughty smile and her wide blue eyes were full of mischief. She wore these oval black-rimmed glasses and not much else (she was blind as a bat without them). Honey-blonde hair framed a pale, almost angelically sweet face. Her figure was slim, trim, and athletic, with a beautifully narrow waist and perky breasts just right for her build. Black stockings hugged the curves of her legs all the way up to her exposed sex.\n\nShe tilted her head to one side, her smile growing. \"Ready, Dave?\"\n\n\"Well, you have kept me waiting for over an hour.\"\n\nShe giggled delightfully, and I wondered what she'd been doing as I paced and waited in the girls' spacious apartment.\n\nI stepped forward. My hands grasped her naked ass and clenched. She leaned into me and our lips met, fast and hot and hungry. Our tongues explored each others mouths as our hands explored each others bodies. Her delicate fingers traced gently across my back, then stomach, then down into by boxers.\n\nTessa broke our kiss and whispered into my ear. \"I think you'll find the wait was well worth it.\"\n\nOh, I didn't doubt that for a moment.\n\n\"Come on in. Everything's ready.\"\n\nTessa reached behind her and opened the door. I followed her into the bedroom and&mdash;\n\n&mdash;my jaw hit the floor. Well, it would have if it hadn't been attached to my face.\n\nKneeling on the bed, admits a sea of dark blue satin sheets, was Quinn. Where Tessa was slender and athletic, Quinn was tall, full-figured, and voluptuous, with fiery red hair and green penetrating eyes. Her personality was overpowering, dominating, and I remembered well the things she'd done to me and Tessa.\n\nBut all that power and strength was gone. Her arms were raised high over her downcast head, wrists bound with bondage cuffs tied to an eyebolt above the bed. She was blindfolded and gagged with a fluorescent orange ball, and her long red hair cascaded down over her high and heavy breasts.\n\nEvery so often, her body would shudder and squirm, and I noticed her ankles were held apart with more bondage cuffs, probably linked to eyebolts under the bed. Her whole body was stretched wide, unable to resist.\n\nBesides Quinn's occasional moans, I heard another faint sound. A distant buzzing. I followed Tessa to the large bed, and realized what it was.\n\nQuinn was stuffed with two large vibrators, one all the way up her cunt, the other lodged tightly in her ass. They buzzed powerfully and juices flowed from Quinn's cunt as saliva dribbled out of her gagged mouth. Sweat glistened over her entire body.\n\nHad Tessa been teasing her lover like this for a whole hour?!? Holy fucking shit.\n\n\"Like what you see?\" Tessa asked, leaning towards me.\n\nI nodded dumbly, my cock straining against my boxers. I pulled them off and tossed them aside, wondering where to start.\n\nBut Tessa already had something in mind. She got onto her hands and knees and crawled across the bed next to Quinn's erotically bound form. With two quick flicks, she shut the vibrators off. The switches were in their barely visible bases. Quinn's chest rose and fell with heavy breaths. She looked like she was hovering on the very edge of an orgasm.\n\nQuinn squirmed a bit, clearly wanting to get off, but unable to touch herself. Tessa smiled as she turned over onto her back and spread her legs wide.\n\n\"Please, do me,\" she whispered, eyes adverted, shy and passive, her arms placed above her head.\n\nI smiled and knelt down next to the bed, prying her sex open with my thumbs. Slowly, I began to lap at her cunt, avoiding her clitoris as I warmed her up. If there was one thing Tessa enjoyed, it was a good teasing, and she squirmed and blushed as I worked her over at my own pace.\n\nI massaged her inner thighs as I lapped at her, feeling the heat of her cunt and the firmness of her muscles. She moaned and shivered.\n\n\"Please don't tease me,\" she whimpered, but I knew better. I knew she loved it.\n\nSlowly, gently, I inserted one finger and began to stroke it in and out of her moist entrance. My tongue moved up, teasing around her clit as my other hand massaged her tight stomach.\n\nAnd when I was ready, when her sex was flush with excitement, I suddenly attacked her clit with abandon, and she squealed in delight. I pushed two fingers into her dripping cunt and worked her clit over, licking it, flicking it, sucking on it, and Tessa started to thrash her head back and forth, moaning and crying in ecstasy.\n\nAnd all the while, Quinn squirmed next to us, arms bound high into the air, unable to join in, only able to listen as I worked Tessa into a frenzy.\n\nFinally, Tessa screamed and I knew she was coming. I stroked my fingers in and out of her hard and deep as I roughly played with her clit, and she convulsed, hands gripping and twisting the bed sheets.\n\nShe shuddered and came down from her orgasm, panting and smiling, and I crawled up onto the bed, hovering over here, looking down at her as she looked up at me.\n\n\"You've gotten good at that,\" she breathed, her face flush and content.\n\nI didn't answer, just traced a hand from her smooth stomach to her breasts and erect nipples. My hands enveloped her breasts, massaging them as she sighed. I knelt down, my raging erection pressed hotly against our stomachs, and we kissed again.\n\nShe broke away, her arms coming around me, pulling me close.\n\n\"Maybe we should let Quinn join the fun?\" she asked.\n\n\"Why not,\" I said.\n\n\"Over on the nightstand. Please?\"\n\nI smiled, knowing what Tessa was asking for. I stepped off the bed, grabbed the double-ended strap-on dildo on top of the nightstand, and crawled back onto the bed next to Tessa.\n\nI placed one end of the strap-on against Tessa's flushed cunt and pushed in. She shivered as I forced the long black length of the dildo into her dripping cunt, then fastened the straps around her. She was panting excitedly now.\n\nTessa knelt up onto the bed, a long rubber cock now protruding from her crotch. She shuffled over to Quinn, reached underneath her, and pulled out both inert vibrators. My eyes went a little wide when I realized what monsters they were. Both were nine-inches long and thick, and Quinn had had both of them jammed into her for who knew how long.\n\nDamn, this woman was hardcore.\n\nTessa smiled at me, half-guilty, half-naughty.\n\n\"Why don't you take her from behind?\" she asked.\n\nAnd that was all the encouragement I needed!\n\nWith a hungry grin, and shuffled over behind Quinn, my hands running down the curves of her body. She really did have a fabulous physique, with a beautiful hourglass figure, smooth pale skin, and proud, heavy breasts. My hands explored her, rising smoothly over her stomach before firmly gripping her breasts. \n\nQuinn sighed as I kneaded her firm breasts, pulling her close. My cock rested hotly against her ass cheeks as I lowered my head, kissing the nape of her neck. Her skin was hot and a little salty from her sweat, and she smelled faintly of a sensuous flowery perfume.\n\nTessa moved closer to Quinn from the other side, hands on Quinn's hips as she bent down and suckled one of her breasts. I reached down and pushed two stiff fingers into Quinn's ass. They went in smoothly, finding the hot anal passage already loosened and lubricated. Quinn moaned through her gag as I stroke my fingers in and out of her ass.\n\nTessa reached down and rubbed the end of her strap-on cock against Quinn's dripping cunt, back and forth a few times before lining it up and pushing in. Slowly, Tessa inserted the strap-on one thick inch at a time, and I could feel her entering Quinn through my fingers in her ass, separated by a thin fleshy membrane.\n\nTessa kissed Quinn's neck and face and leaned in next to her ear. \n\n\"I'm all in,\" she said, more to Quinn than to me.\n\nI pulled my fingers out and placed the tip of my cock against Quinn's ass. I pried her ass wide with my thumbs and pushed in, breaking the initial muscular ring with ease and pushing deeper into her loosened and lubricated passage.\n\nShe was still tight, though. Wonderfully erotically tight, but I didn't have to force my way into her, and the lubrication eased the entry considerably. My cock pushed into her, one luxurious hot and smooth inch of her colon at a time. Soon I impaled her up to my balls, and Quinn shuddered, moaning loudly against her gag.\n\nI reached around, grabbed hold of her breasts, and started slowly stroking in and out of her. Tessa picked up my rhythm, and soon we were fucking both her holes in unison. Quinn struggled against her restraints as we worked her over, her head bowed forward against Tessa's.\n\nAfter a while, we began to pick up the pace, and I played with her breasts rougher, teasing her diamond-hard nipples harshly. With each of my strokes, I could feel Tessa's strap-on thrust in, and I knew she was burying it as deeply into Quinn's cunt as I was into her ass. The heat and tightness of Quinn's ass was driving me nuts, and I felt my orgasm fast approaching.\n\nNow Tessa accelerated on her own, slamming in and out of Quinn with rapid strokes, her breathing becoming heavy as she felt what she delivered through the strap-on's other end. \n\nQuinn was crying out against her gag now as we drilled her in unison. The teasing from before, mixed with the dual pounding now must have pushed her over the edge, and she grunted and gasped against her ball gag, shuddering from a powerful orgasm.  \n\nShe slumped forward, held up by the tight restraints as Tessa and I continued to use her like a fuck toy. We pounded her now, all of us glistening with sweat, and I brush some of my damp hair out of my eyes as I felt the churning in my balls crescendo.\n\nI sank my cock into her ass and exploded, sending stream after stream of thick ropey cum into her, my first time in Quinn's ass. She shuddered, twitching around my cock as I filled her, and her muscular shudders and Tessa's pounding seemed to prolong the ecstasy of my orgasm.\n\nMy cock softened, even as Tessa pounded away at her lover, and I pulled out. Finally, with a squeal of delight, Tessa came again, shoving the dildo so hard and deep into Quinn that Quinn threw her head back, gasping against her gag.\n\nTessa kept the fake cock in her lover and pulled off Quinn's ball gag so that it was around her neck. The two college girls shared in a deep impassioned kiss as their tongues consumed each others mouths. I pressed myself against Quinn from behind and kissed her soft smooth neck.\n\nAnd then Tessa did something that really surprised me. Normally, she was submissive to a fault during sex, but dominating her lover like this gave her a strange boldness. She grabbed the back of Quinn's head, fingers lacing through fiery red hair even as they kissed. With a quick jerk, she yanked Quinn's head back so that she gasped.\n\n\"What should we do to you next, I wonder?\" Tessa said.\n\nTessa reached up and undid the metal clasp holding Quinn's arms in the air. She guided Quinn's arms behind her back and clasped them there. She then undid the clasps holding Quinn ankle cuffs in place.\n\nTessa looked down at my softened cock. She smiled and I had a good idea of what she was planning.\n\nWith a hand laced through Quinn's hair, she forcefully guided her towards me. I leaned back against the mound of pillows at the bed's head and allowed Tessa to pressed Quinn's face against my crotch. Quinn got the idea, found the tip of my twitching, semi-hard cock with her mouth, and began to swallow me.\n\nThe hot wetness of her mouth was wonderful as she forced herself to take more and more of me deeper into her mouth. Eventually, the tip of my cock pressed against the back of her throat, and she gagged a bit, but held it all it. She wasn't as good at this as Tessa, but made up for it with boundless enthusiasm.\n\nTessa ran her hands over Quinn's back and ass.\n\n\"Make sure you get him nice and hard,\" she said, spreading Quinn's ass and plunging her strap-on back into her. Quinn gasped as the thick rubber cock impaled her in one firm stroke, and she came up for air, saliva dribbling down her chin.\n\nTessa reamed Quinn's ass with a nice, steady rhythm as Quinn went back down on me. I put a hand on the back of her head, guiding her deeper a few times, running my fingers through her long silken hair. She'd come up, working the tip of my cock with her tongue before going back down so deep I felt the back of her throat. All the while, Tessa kept pounding away, getting Quinn and herself worked up again.\n\nWhen I was nice and hard again, I pulled Quinn up off me and smiled over at Tessa. \n\n\"Ready for round two,\" I said.\n\nShe smiled back, grabbed hold of Quinn by her hair, and pulled her up. Tessa still had the cock stuffed up Quinn's ass, and she reached around, massaged one of Quinn's breasts, ran the hand over Quinn's firm stomach, then spread her cunt wide.\n\nI got the idea and positioned myself underneath Quinn, hardened cock aimed skyward. Tessa lowered Quinn onto me, a hand on the tip of my cock, and soon I felt the wet textured heat of Quinn's cunt grip my cockhead. She lowered herself down onto me, dripping with excitement, and in moments I impaled her balls deep.\n\nQuinn leaned forward, still blindfolded, arms still bound behind her back. Her large breasts were flattened against my chest, and I could feel her excited nipples. Her breaths were hot and fast, and saliva dribbled down her chin.\n\nShe leaned in, close to my ear and breathed her words so that only I could hear.\n\n\"I love what you and Tessa are doing to me,\" she whispered. \"I'm going to enjoy returning the favor.\"\n\nMy heart jumped. Leave something like this to Quinn. Here she was, all bound up, practically a fuck toy for me and Tessa, and suddenly it felt like she was in control.\n\nOnly Quinn could do that.\n\nShe leaned in and bit playfully on my ear, tugging at it as Tessa started fucking her ass again. I could feel Tessa's rhythm from within Quinn and followed her lead.\n\nTessa must have already been approaching her third orgasm of the night, because she was soon slamming into Quinn, who was crying out and grunting huskily with each deep dual thrust. I grabbed her head and guided her to my mouth. Our lips met and Quinn shoved her long tongue into my mouth as we continued to fuck and abuse her.\n\nThe hot luxurious press of her body and the tight heat of her cunt were quickly having an effect on me, and I could tell Quinn was getting hot and heavy as we worked her over. She pulled away from me, crying out suddenly against my chest as her body convulsed in sexual pleasure, and the clenching spasms around my cock were too much for me.\n\nI grunted, climaxing in Quinn's tight cunt. Quinn dropped heavily onto me as Tessa kept at it, continuing to ream out her ass with fast, powerful strokes. She was covered in sweat, her honey-blonde hair damp at the roots, and with a sudden squeal of delight, she shuddered as she plunged the strap-on deep into Quinn.\n\nTessa collapsed on top of Quinn, and I felt the weight of both of them pressing me down into the bed, feeling thoroughly content. I pushed the blindfold out of Quinn's eyes and she looked at me, her intense greens eyes staring at me with such unshakable confidence.\n\nShe smiled and whispered to me.\n\n\"Remember what I said.\"\n\nYeah, I wasn't soon going to forget. The way Quinn could work Tessa and me over all by herself made us look like amateurs.\n\nTessa pushed off Quinn, pulling the strap-on out of her ass, then unfastening it and pulling the other end wetly out of her cunt. She sighed and shuddered as the huge thing came free.\n\nI reached around and undid Quinn's arms.\n\n\"That was okay?\" Tessa asked, suddenly all shy and insecure as Quinn rose and looked at her.\n\n\"It was wonderful. I loved it,\" Quinn said, and she took Tessa's face into her hands and kissed her softly, slowly, lovingly.\n\nAnd so the night ended. We curled up together on the huge blue satin bed, our hot flesh pressed randomly against each other, idling cuddling, and quickly the three of us fell fast asleep.\n\n***\n\nSo who's Tessa, Quinn, and this Dave person, you ask? Oh, geez, where to begin?\n\nOkay, this is a long story, but I'll try to keep it short.\n\nI met Tessa in my first semester at college. We were both computer science majors and, despite some clumsy advances on my part, I eventually got a date with her. This ended happily with me losing my virginity (yeah!).\n\nIt was cool for a while, having a girlfriend that I really clicked with. It was fun, too, and not just because of the sex I was having. I really dug her and, as I contemplated my future, I wondered if I'd spend the rest of my life with her.\n\nThen I met Quinn, and what can I say? Quinn is . . . unique. Learning about Quinn lead me to find out Tessa was not only bisexual (and very actively so) but also in love with her roommate. Ouch, man. Ouch.\n\nWorse than that, Quinn has, shall we say, unique sexual needs and would frequently tie Tessa up and work her over like a sex toy. I got to see and experience that, and really, it was a lot to take in.\n\nErr . . . in more ways than one, if you get my meaning.\n\nLater I learned that Quinn had been repeatedly raped by her step-brother, which might have explained her aggressive need for sexual control. I'm no psychologist, that's for sure, but there certainly seemed to be a connection.\n\nAnyway, long story short, Tessa and I worked up the courage to turn the tables on Quinn. We trussed her up, worked her over, and in the end, she really dug it. The relationship between Quinn and Tessa shifted a bit, become less brutally one-way and more even.\n\nThough the whole thing still confuses me. Technically, I'm Tessa's boyfriend, right? But then, we both have sex regularly with Quinn and Tessa says she's in love with her (which, to be quite honest, makes me a little jealous).\n\nLittle did I know that life was going to get even more complicated.\n\nBut sometimes, complicated can be fun.\n\n***\n\nI was the last to wake up, as usual. I shambled my way out of bed, grumbled groggily at the sun streaming in through the blinds, and made my way to the bathroom. After finishing my mourning hygiene, I shambled over towards the kitchen.\n\nQuinn's apartment was very spacious, with two bedrooms (one in a blue theme, the other in deep reds), an office room with two computers, great room with a 50\" LCD screen (they still wouldn't let me hook up my XBOX 360), and an expensively tiled and furnished kitchen.\n\nAlso, strangely, it was hard to look in any direction without staring at a dream catcher.\n\nI lurched into the kitchen, hearing the two girls discussing something in a series of energetic whispers and excited giggles. God, I hate mornings.\n\nI stared at them, bleary eyed, and tried to rub some of the sleep out. Tessa and Quinn smiled back, both enjoying orange juice, milk, and pancakes with maple syrup. Tessa waved a spatula at me. She had this ridiculous pink apron on.",
        "\"Morning, Dave!\" she said, way too cheerfully.\n\n\". . . mornin' . . .\"\n\n\"Have a seat! I'll fix you some breakfast.\"\n\n\". . . thanks . . .\"\n\nI flopped down onto a kitchen counter stool: the one furthest from Quinn. It wasn't that I didn't like her. It was just . . .\n\nOkay, that's not exactly true. I don't particularly like Quinn. It's just the way she always seems to be in total control of everything and everyone. It just bugs me, like she has the whole world rapped around her pinky. \n\nTessa hummed absently as she poured some pancake mix onto a skillet. As the hiss of cooking started, I noticed Quinn watching me. She was wearing those retarded pastel blue pajamas of hers: the ones with white bunnies all over them. It was so out of character; she should wear a leather dominatrix getup and brandish a whip to breakfast. That would be in character.\n\nNot frickin' fluffy bunnies.\n\n\"Here you go!\" Tessa said, sliding a plate full of hot pancakes in front of me. She poured my orange juice and set the maple syrup next to my plate before sitting down between me and Quinn.\n\n\". . . thanks . . .\"\n\nI lathered the pancakes with syrup and butter before cutting into them. A phone rang before I had the first bite in my mouth. Quinn reached over and grabbed hers out of the small pile of wallets, purses, and cell phones next to the coffeemaker. She flipped it open one-handed. \n\n\"Quinn here.\"\n\nI ate on, interested more in filling up on carbohydrates than listening to Quinn's private calls. Whatever it was, it must have been real private, because Quinn stood up, walked into the office room, and closed the door.\n\n\"I wonder who that is,\" Tessa said.\n\nI grunted noncommittally as I shoveled more dripping pancake into my mouth, chasing it down with some orange juice. A few minutes later, I heard the office door open, and Quinn head into one of the bedrooms. She closed the bedroom door. \n\nActually, slammed the door would be more accurate.\n\n\"Oh dear,\" Tessa said. She was rocking nervously back and forth on her stool. \"You think I should go talk to her?\"\n\nI shook my head, and stuffed another fork-load into my mouth. Just as I was finishing breakfast, Quinn came out. She was dressed in black jeans and a dark green polo shirt, combing her hair.\n\n\"I have to leave town for a few days,\" she said, picking up her purse and putting the comb and her cell phone into it. She pulled out her Oakley sunglasses, flipped them open, and slid them on.\n\n\"What's going on?\" Tessa said.\n\n\"Family business,\" Quinn said, and we all knew what that meant. \n\nTessa and I looked at each other. Sure, I was curious. But ignorance was better in this case. I was pretty sure most of Quinn's family's money came from illegitimate means. Whatever she had to do, I didn't want any part of it. Neither did Tessa.\n\n\"Oh,\" was all Tessa said as she looked away.\n\n\"'ood 'uck,\" I said around a piece of half-chewed pancake. It seemed the polite thing to do.\n\nQuinn got her wallet out of her purse and pulled out one of her credit cards. It was platinum and probably had a limit of around fifty thousand. She tossed it to Tessa who caught it easily.\n\n\"Why don't you two have some fun while I'm gone,\" she said. \"I'll be taking the Escalade.\"\n\nSweet. That meant she was leaving the Corvette. She'd never let me drive it before, but now . . . heh, heh. I had some trouble suppressing my grin.\n\n\"You sure?\" Tessa asked, guiltily looking at the credit card.\n\n\"Of course. Have fun. Just make sure he doesn't wreck my car.\"\n\n\"'hat? 'e?\"\n\n\"Is it something serious?\" Tessa asked.\n\n\"Nothing I can't handle,\" Quinn said. \"Don't worry about it.\"\n\nBut Tessa wasn't the kind of person who could easily stop worrying. Quinn smiled, lifted Tessa's chin with a finger, and leaned in. They kissed slowly and softly for so long that I grunted and returned to the last of my pancake.\n\nWith a wet smack, they parted.\n\n\"I'll be back before you know it. You'll see.\"\n\n\"Okay . . .\"\n\nQuinn walked up behind me. For some reason, I felt a cold shiver run down my spine. She had that kind of effect on people.\n\nShe put her hands on my shoulders and leaned in next to my ear.\n\n\"Don't worry, stud,\" she whispered. \"It won't be long. When I get back, we'll celebrate, and then I can properly reward you for last night.\"\n\nI shivered again as she kissed me just below my ear. I had a pretty good idea of what Quinn thought a proper reward was. Oh, man, was I going to be sore.\n\nQuinn left and I finished breakfast and helped Tessa clean up. It was Friday of final's week, but all three of us were done with exams (leading to last night's celebratory activities, heh heh).\n\nAnd so, I was alone with Tessa, a credit card with a huge limit, and the keys to a cherry red 2005 Chevrolet Corvette. And Quinn was leaving for a few days. Not a bad start to summer break. Not a bad start at all.\n\nAfter we cleaned up breakfast, Tessa and I went into the great room, placed the credit card on the coffee table, and stared at it from the couch.\n\n\"So,\" I said. \"What do you want to do with it?\"\n\n\"I don't know. I'm still thinking. You?\"\n\n\"Still thinking.\"\n\n\"I see . . .\"\n\nWe both folded our arms, almost in unison, and stared at the credit card. Ten, twenty, fifty, even a hundred dollars. That's easy to spend. But when Quinn's credit is the limit, it's hard to pick.\n\n\"You want some coffee?\" Tessa asked.\n\n\"Sure. Coffee sounds good.\"\n\nTessa got up and headed into the kitchen, humming cheerfully to herself. I stayed, staring at the credit card.\n\n\"Lots of milk and sugar, right?!?\" she asked, out of sight.\n\n\"You know it!\" I shouted back.\n\nTessa came out a few minutes later, bearing a tray with two coffee cups, one black, the other very tan from all the milk, along with spoons, napkins, and extra milk and sugar, should I want some. But it wasn't the coffee that caught my attention.\n\nIt was the fact that Tessa still wore that ridiculous pink apron. That, and nothing else.\n\n\"Err . . .\"\n\nIt was pretty clear what Tessa was in the mood for first, and given that it was early in the morning, I was more than ready to oblige her.\n\nAs soon as Tessa set the coffee down, I sprang up and wrapped my arms around her from behind.\n\n\"Oh, you little minx!\" I said, and she giggled as I groped her firm, tight body. I kneaded her breasts through the apron and she leaned her head back so we could kiss. Our lips met and our tongues played with each other as I worked the firm flesh of her breasts.\n\nWe spent the whole morning having sex. It was a nice change of pace from the heavy kink both of us had grown accustomed to. No bondage play. No domination. Just good clean sex. \n\nWe sixty-nined for what seemed like an eternity, her on top, lathing my dick with her incredibly skilled throat. It was amazing how deep she could take me with so little effort and no gagging. As she sucked me, I played with her cunt and ass, teasing her with my fingers.\n\nWe took it slow and paced ourselves. After the oral foreplay, I bent Tessa over the couch and took her from behind, first her cunt. Then, after she'd cleaned herself out, her ass, which (with the help of a vibrator in her cunt) lead her to two screaming orgasms.\n\nWe took a break for lunch. Tessa put the apron back on (and nothing else) as she made bacon, lettuce, and tomato sandwiches with healthy doses of mayonnaise. We ate them quickly, because I was ready for more and, judging by the twinkle in her eyes, so was she.\n\nWe did it properly in bed this time, first missionary, then with her riding me. My cock was getting really sore by that point, but Tessa's boundless sexual energy kept me going. I wasn't about to be undone, no matter how sore I got.\n\nWhen Tessa finally came down from her latest orgasm (I'd lost count), she rested on top of me and we cuddled and kissed as my cock softened within her still twitching cunt.\n\nI felt like falling asleep right then and there, but as we cuddled, Tessa suddenly stopped reciprocating.\n\n\"What's the matter?\" I asked.\n\nShe leaned up from me so that I could see her face. She had one of those shy-but-naughty smiles that were so characteristic of her. And so absolutely sexy.\n\n\"I just had an idea for what we could do,\" she said.\n\n\"You mean beside more sex?\"\n\n\"Oh, silly! We have to do something today,\" she said, playfully slapping me in the arm.\n\n\"Says who? I'm perfectly happy spending the rest of the weekend having mind-blowing sex with you.\"\n\nThis made her blush fiercely, and she looked away. I reached up and turned her face back to me.\n\n\"So what's the idea?\" I asked.\n\n\"Have you been to the Sprawl yet?\"\n\nSix Statue Sprawl (or simply the Sprawl) was a gi-normous shopping center about half an hour drive from the campus. I hadn't been there yet. I didn't need that level of variety, since the local Circuit City handled most of my shopping needs . . .  \n\nWell, when I actually had money, that is. You know, the whole college student thing.\n\n\"No. Why?\" I asked.\n\n\"Let's go there! I just had a wonderful idea.\"\n\nMy eyes narrowed a bit. \"You want to stop having awesome mind-blowing sex so that you can . . . shop?\"\n\nShe tilted her head to one side, smiling. \"And what's wrong with that?\"\n\n\"Other than not having the awesome mind-blowing sex, you mean?\"\n\n\"I'll make it up to you. It'll be worth it.\"\n\n\"How?\"\n\nShe looked away, still smiling. \"Can't say. It's a secret.\"\n\n\"You can't . . . say.\"\n\n\"Nope!\"\n\n\"Okay . . . how about a hint?\"\n\nTessa seemed to debate this for a moment, stroking her chin and raising an eyebrow. Finally, she leaned over, very secretive-like, and whispered to me.\n\n\"I'll make it up to you when we get back.\"\n\nAh. That I understood. More sex. Hell, yeah! That I could deal with.\n\n\"But!\" she said. \"I'm going to have to ask you for a favor.\"\n\n\"Sure. Anything. What do you need?\"\n\nShe looked away, blushing. \"I want to tie you up when we get back.\"\n\nAfter hearing that, I probably looked like a fish, because my mouth formed a perfect O. I was stunned. I didn't know what to say. It was like hearing on the news that Hell had frozen over and had opened a winter theme park. It was that unexpected.\n\n\"Err . . . you want . . .\"\n\n\"To tie you up,\" she said, unable to meet my blank stare.\n\nOf course, I'd been bound before, but only by Quinn. \n\nWith Tessa, it'd always been the other way. And though I found it weird at first, I'd actually grown to like trussing up Tessa and teasing her or forcing her to deep throat me or giving her a solid ass fucking, all of which I knew she loved. Tessa was always happiest in the submissive roll.\n\nOr so I thought.\n\nBut now she wanted to tie me up? That was like&mdash; It was as if&mdash;\n\nHoly fucking shit! Tessa wants to tie me up!\n\nGranted, the thought had a certain perverse appeal to me. But I couldn't help but be nervous.\n\n\"Why don't you think about it,\" she said. \"And I'll sweeten the pot a bit.\"\n\n\"How?\"\n\n\"I'll tell you a story. It's from a few years ago.\"\n\n\"Oh-kaay . . .\"\n\n\"Trust me,\" Tessa said, a sexy glint in her eyes. \"This one's worth it.\"\n\n***\n\nTessa and Quinn couldn't have been more different. On the one hand, there was Quinn, standing tall and beautiful and positively brimming with confidence in everything she did. And with good reason, for Quinn was technically a genius, and was studying through college at a markedly accelerated rate. She'd grown up rich and had lived a life full of distant travel and lavish experiences Tessa could only dream of.\n\nTessa, on the other hand, was quiet and shy, and a bit on the poor side. Both parents worked, and though they had good jobs, they'd also accumulated a large sum of debt. College would be tough when it came, and Tessa was studying hard towards several grants.\n\nTessa looked quite a bit different back then, also. Her hair wasn't done up quite as expensively. Her clothes weren't anywhere close to the cutting edge. And she walked around everywhere with a slight slouch, as if under constant ridicule.\n\nBut somehow, Quinn and Tessa had met and they'd become fast friends. Over time, that friendship grew into something more intimate.\n\nThey'd been at a club called Sirocco's that night. Quinn never had problems getting herself and her friends into any club, and Tessa enjoyed experiencing things she wasn't (according to her parents, the government, and the world at large) old enough for.\n\nQuinn said something to her and, due to Tessa's aggressive alcohol consumption, the words hadn't made sense.\n\n\"What was that?\" she asked.\n\n\"I'd like to try something new with you tonight,\" Quinn said, warmly putting her arm around Tessa. She started to feel all hot inside, and not just from the alcohol. Her heart beat a little faster and her cheeks flushed.\n\nTessa had a pretty good idea what was coming, and she downed the rest of her Zima as if it were liquid courage. It helped. A little.\n\nThe night came to a close with Tessa followed Quinn back to her apartment, butterflies fluttering inside her stomach. She remembered the last time Quinn had tried something new, and she also remembered how she'd cum screaming three times. The things Quinn could do with her tongue and fingers . . .\n\nTessa's cheeks flushed again as Quinn used her keycard to get into the 30<sup>th</sup> floor apartment, and she wondered what Quinn would do to her this time. Tessa was technically a virgin. That is, a certain piece of fleshy membrane remained unbroken. Sexually, however, she was hardly inexperienced, and after a few drinks, was always willing to try something new with Quinn as long as she stayed a virgin.\n\nIt really seemed a bit silly to Tessa when she thought about it, but soon she wasn't thinking at all. \n\nThe door closed, and Quinn pulled her close. They kissed, slow and impassioned and lovingly, and Quinn ran her fingers through Tessa's hair.\n\n\"I love you, you know,\" Quinn whispered.\n\n\"Yeah, I know,\" Tessa said, and her voice quavered nervously.\n\nQuinn pulled Tessa's shirt up over her breasts and unclasped her bra in the front. She knelt down and started licking and sucking and fondling, and all Tessa could do was gasp and shudder as her lover enjoyed her body.\n\nSlowly, as Quinn licked and sucked and her hands fondled Tessa's body, the two of them undressed. They were soon naked, their hot bodies pressed against each other as they kissed again.\n\n\"Come on,\" Quinn said. \"Let's clean you out.\"\n\nTessa's heart beat a little faster. She remembered the last time Quinn had played with her ass. She'd been so nervous at first, but had been so surprised by what Quinn could do to her ass with tongue and fingers. Tessa bit her lip, half nervous, half excited, as Quinn lead her to the bathroom and administered an enema.\n\nQuinn liked anal sex, but it had to be clean anal sex.\n\nWhen they'd finished, Quinn pulled out a long strip of black cloth.\n\n\"What's that?\" Tessa asked.\n\n\"A blindfold,\" Quinn said, and without asking permission, she tied it around Tessa's head, blocking out the world. Tessa started breathing faster, suddenly nervous.\n\n\"Quinn, I . . .\"\n\n\"Shhh, don't worry. I'm right here. Just follow me.\"\n\nQuinn guided her into the shower. It was a large clear-glass cylinder in the bathroom's center, with a one-step depression down to it that Tessa stumbled on. But Quinn caught her, helping her in, guiding her into the shower and placing her on her knees.\n\n\"Quinn, I'm scared . . .\"\n\n\"Don't be. Would I do anything to hurt you?\"\n\n\"N-no . . .\"\n\n\"There, see?\"\n\nTessa heard rustling to her right, and one by one, Quinn took hold of Tessa's wrists and placed something around them. They were tight cuffs of some sort, and Tessa heard a slight jingle of metal clasps as Quinn guided her forward.\n\nBefore she could say or do anything, Quinn stretched Tessa's arms forward and clicked the two cuffs together around a waist-high railing inside the shower. With insistent hands, Quinn raised Tessa's ass and spread her legs.\n\n\"Quinn?\"\n\n\"Shhh. Don't worry.\"\n\nQuinn turned on the shower, and Tessa gasped as cold water hit her from above. But soon the water became comfortably warm and the feeling of it cascading over her back was quite pleasant. She almost forgot her current bound and blindfolded predicament, and her heart beat a little slower, a little calmer.\n\n\"Here we go,\" Quinn said.\n\nTessa felt her ass cheeks spread and Quinn started licking across her asshole. She shivered, but Quinn held her firmly, lapping at her ass with slow strokes of her tongue, and Tessa relaxed. This was familiar. This was good.\n\nQuinn licked at her ass for long slow minutes, slowly pushing her tongue in, teasing her wider, and Tessa whimpered as Quinn worked her over. She could feel herself getting worked up, her cunt moistening.\n\nQuinn buried her face in Tessa's ass, and her long tongue began stroking her, firmly, confidently, slowly. Tessa was panting now, wanting more than this, but also not wanting Quinn to stop. She wiggled her ass a little and Quinn gave her a firm slap that startled her.\n\n\"Hold still,\" Quinn said.\n\n\"Y-yes . . .\"\n\nQuinn pushed a single greased finger into Tessa's ass, forcing it in slowly all the way to the second knuckle.\n\n\"Does it hurt?\"\n\n\"N-no . . .\"\n\nQuinn stroked the finger in and out of Tessa's ass, sometimes curling it or twisting it or swirling it around, and Tessa gasped as Quinn continued to plunder her ass. The stroking continued, becoming faster and harder, and soon Quinn was fucking Tessa's ass with her finger.\n\n\"It feels good, doesn't it?\"\n\n\"Y-yes . . .\"\n\n\"Be patient. It will feel even better soon.\"\n\nQuinn paused, and then slipped in a second finger, pushing both in slowly, twisting them around as she went, stretching Tessa further. Tessa gasped as the two fingers bottomed out, and began breathing quickly. She'd never taken two before, and it didn't feel all that good.\n\n\"Quinn . . . I . . .\"\n\n\"It hurts, doesn't it?\"\n\n\"Yes.\"\n\nQuinn pulled her fingers out. \"Don't worry. I have just the thing.\"\n\nTessa waited, listening as Quinn stood up, stepped out of the shower, and came back in a moment later. It sounded like she had a bucket with her and was filling it was water.\n\n\"Quinn? What are you doing?\"\n\n\"Just a little something to help you relax.\"\n\n\"What?\"\n\nQuinn pushed something cool into her ass, the tip slipping easily past her anal sphincter. \n\n\"Quinn?\"\n\n\"Just relax.\"\n\nWarm water flooded into Tessa's bowels. Quinn had an enema that looked like a jumbo syringe, and she was using it right now, forcing who knew how much water into Tessa's bowels. It wasn't bad; Tessa was used to being cleaned out before anal play, but the water kept coming and coming.\n\nFinally, all of it was in, and Quinn pulled the enema syringe out. There was rustling behind Tessa, and she heard Quinn filling up the enema again.\n\n\"Quinn, please . . . I can't take another one.\"\n\n\"Of course you can,\" Quinn said, plugging the tip into Tessa's ass and forcing another load of water into her.\n\nTessa gasped as she was stretched from the inside, and she felt her bellow bulge out as if she'd just gorged herself during dinner, and then it bulged even further. Finally, the second load was in and Quinn set the enema down. Her hands caressed Tessa's bloated belly.\n\n\"Quinn, please!\"\n\n\"Do you feel anything yet?\" Quinn asked, as if she hadn't even heard Tessa's protests.\n\nAnd then Tessa noticed it. She hadn't realized it was there before as the second enema stretch her out, but now she could feel it: a burning sensation inside her body, spreading out everywhere. She started sweating and panting, shower water cascading over her.\n\nQuinn rubbed Tessa's bellow and then squeezed.\n\n\"Don't do that! I can't . . . I can't . . .\"",
        "Quinn leaned forward. \"I spiked the water. The chemical is classified as an anti-depressant. I won't bore you with its technical name, but I will tell you it's used to treat sexual disorders. It's normally administered orally, but the funny thing about the large intestine is how good at absorption it is. Way better than the stomach. I also mixed in a mild muscle relaxant.\"\n\nTessa's whole body was on fire now. Her cunt gushed with excitement, dribbling down her legs along with little rivulets of warm shower water. And those legs were shaking as she tried to hold the two enema loads in.\n\n\"I think you've held it in long enough. Why don't you let it all out?\"\n\n\"I can't do that!\" Tessa shouted, almost crying.\n\n\"Why not?\" Quinn asked, as if all this were the most normal thing ever. \"There's nothing to be embarrassed about. You're already clean on the inside.\"\n\nQuinn rubbed her hands all over Tessa's body. Her legs quaked and she felt like she was going to burst. Finally, Quinn's hands stroked Tessa's bloated belly, and then sharply clenched down.\n\nTessa screamed, half in shame, half in relief as her bowels ejected the enemas. When it was all over, she slumped down and started crying.\n\nQuinn didn't say anything as Tessa sobbed quietly, feeling so dirty and shameful. She hardly noticed as Quinn pushed two fingers effortlessly into her ass and twirled them around. \n\n\"Nice and loose,\" Quinn said. \"I bet it won't hurt a bit.\"\n\nTessa heard more rustling behind her, and soon Quinn was raising her ass.\n\n\"Here we go.\"\n\nSomething hard and thick pressed against her ass, forcing its way past her anal ring.\n\n\"What?!?\"\n\n\"Just relax. You can take it.\"\n\nQuinn pushed forward and more of the strap-on filled Tessa's ass. But Quinn had been right. She hardly felt any pain, and the sensual tingles seemed even more intense. Her head spun with pleasure as Quinn inched the firm fake cock into her. In less than a minute, Tessa felt Quinn's hips against her own, and she knew the thing was lodged deep in her bowels.\n\nWithout another word, Quinn began to fuck Tessa's ass, slowly at first, pulling it all the way out so that only the tip stayed in, then plunging it slowly but firmly back in. Tessa gasped and shook and pulled at her arm restraints. She saw stars dance in front of her eyes and she cried out, shaking her head back and forth as her whole body was consumed by Quinn's decadence.\n\nQuinn picked up the pace, fucking her ass faster and faster, filling and emptying her. And Tessa loved it, loved the feeling of her ass being filled, loved the emptiness that followed and the desire to be filled again, loved the firm confidence that Quinn worked her over with. Tessa loved all of it and she cried, but they were tears of joy as Quinn fucked her ass over and over again.\n\nAnd Quinn was really slamming into her now, thrusting into her so hard that Tessa was pinned up against the shower's curved glass wall, unable to stop her lover, and not wanting to even if she could. Quinn fucked her for what seemed like an eternity, and Tessa felt her cunt twitch as the pleasure mount.\n\nSuddenly Tessa screamed at the top of her lungs, and Quinn plowed her ass even harder as she came. Her legs shook and she collapsed, but Quinn held her up, her arms holding Tessa tightly.\n\nTessa chest rose and fell in short gasps.\n\n\"Quinn . . . that was . . .\"\n\nBut Quinn pulled out of her ass, stood up, and shut off the shower. She knelt down again and turned Tessa over onto her back, her arms still above her, still bound to the railing. A small chain between her two cuffs was now twisted tightly against the shower railing.\n\nQuinn pushed Tessa's blindfold up and they looked at each others eyes. Quinn's face was strangely neutral. It wasn't often that Tessa saw her with anything but a sort of blinding confidence in herself. But now she looked . . . almost unsure.\n\nQuinn placed her hands on the insides of Tessa's thighs and pushed her legs wide open. Tessa looked down, staring at the black strap-on jutting out from Quinn's crotch. She felt a nervous tightness in her chest, but she didn't say or do anything.  \n\n\"I love you,\" Quinn said, and she lined up the strap-on with Tessa's dripping cunt.\n\nTessa knew what was going to happen next, and she did nothing. Not a single thing.\n\nWith a sudden harsh thrust, Quinn forced the fake cock deep into Tessa's cunt.\n\nTessa threw her head back and cried. \"It hurts!\"\n\n\"Your pain will pass,\" Quinn said as she began fucking Tessa with harsh, firm strokes. \"Don't worry, Tessa, my love. Your pain will pass. Just as mine did.\"\n\n***\n\nThere were many ways I could respond to Tessa's story about how she lost her virginity. Here were some of my options:\n\n\"Wow. Quinn is really fucked up.\"\n\n\"Oh my god, that's horrible!\"\n\n\"Hey, look! Your story made me hard again!\"\n\n\"You don't say . . . hey, could you move a little to the right? The game's coming on.\"\n\nBut, in the end, I settled for this:\n\n\"Whoa . . .\"\n\n\"That's it? That's all you've got to say?\" Tessa looked a little disappointed.\n\nI smiled. \"Yeah, and let me say it again, because I think it deserves repeating. 'Whoa'.\"\n\n\"Well, okay,\" She said, leaning against me, the full naked length of her body pressed against mind. And, yeah, I was hard again. \n\n\"So, what do you think?\" she asked.\n\n\"About what?\"\n\n\"About the favor, silly!\"\n\n\"Oh, that.\"\n\nI'd totally forgotten. We were back in the present, where my girlfriend wanted to go shopping, and then afterwards tie me up for sex. Oh, man. Why can't life be filled with simple no-brainer choices?\n\n\"Come on, Dave. Yes or no. It's not that hard.\"\n\n\"Umm . . . I guess so.\"\n\n\"You guess so? That doesn't sound very take charge.\"\n\n\"Well . . .\"\n\nBut that seemed to be enough for Tessa. She smiled brightly, practically jumped off me, and stood up next to the bed.\n\n\"All right! Let's go!\"\n\nAnd we were off, throwing clothes on, grooming in a rush (Tessa only took twenty minutes), and grabbing wallets, cell phones, Quinn's credit card, and the keys to a cherry red 2005 Chevrolet Corvette. \n\nFor a second I thought I was finally going to drive the 'vette. However, Tessa snatched the keys away before I could grab them.\n\n\"I'm driving!\" she said brightly, shouldering her purse and heading out the door.\n\n\"Ah, come on, Tessa!\" I said, hurrying after her. We took the elevator down thirty-one floors to the basement car garage, but despite my insistent whining, I did not get the car keys.\n\n\"You drive like a maniac,\" Tessa said. \"Quinn wants her car back in one piece.\"\n\n\"Oh come on. My driving isn't that bad.\"\n\n\"You speed!\"\n\n\"Only a little.\"\n\n\"Twenty miles over the limit is not a little!\" Tessa said, clearly enjoying this bout of teasing. \"Plus you slam on the gas every time you see a yellow light.\"\n\n\"Well, I have to get through before it goes red,\" I muttered as the elevator opened.\n\nIt was a long drive to Six Statue Sprawl. I like Tessa. Really, I do. But I can't stand her driving. The whole time, she had both hands firmly on the wheel, back rigid, super-alert as if the other cars were aggressively hunting her. Really, there is such a thing as too much caution while driving.\n\nWhenever I tried to strike up a conversation, she'd say stuff like: \"Sorry, need to concentrate,\" or \"Hold on, merging.\"\n\nWe eventually got to the Sprawl, which really lives up to its name. It was like the biggest mall I'd ever seen, multiplied by five because it was five levels of places to shop, eat, and shop some more. Tessa spent three solid hours trying on clothes while I waited dutifully.\n\nAnd by \"waited dutifully\", I mean I kept my complaints to a minimum.\n\nBy the end of the third hour, I was lugging around five shopping bags and wished I had a third arm so that I could start ripping my hair out in frustration. And for some reason, we had to show our drivers licenses as we walked into a rather low-traffic section of the Sprawl.\n\n\"Ah! Here it is,\" Tessa said, stopping so suddenly I almost ran into her.\n\n\"What, another place to try on twenty jeans?\"\n\nI looked up. We were in a rather bare patch of Floor 5 where faux-marble walls gave way to a shop's black fa&ccedil;ade. Thick, bold white letters hung over the storefront. They said: SPECIALTY ITEMS, INC.\n\nTessa spun around on the balls of her feet. \"Okay, umm . . . you might want to wait outside.\"\n\n\"What? Just stand out here like a goof while you try on more clothes?\"\n\n\"The place doesn't sell clothes.\"\n\n\"Huh? Then what does it sell?\"\n\n\"Umm . . . specialty items.\"\n\nI looked up at the sign. \"Specialty items?\"\n\n\"Umm . . . yeah . . .\"\n\n\"What kind of specialty items?\"\n\n\"Well . . .\"\n\nA thought crossed my mind. \"Don't tell me . . .\"\n\nTessa nodded. \"Quinn and I do a lot of shopping here. We have a VIP customer card.\"\n\nAh. I understood perfectly. I'd seen what the girls called their \"gear closet.\" It's a scary sight for the uninitiated. But then, all that bondage gear has to come from somewhere, right?\n\n\"Okay then!\" I said brightly. \"How about I wait over in that B. Dalton's we passed a few minutes ago?\"\n\n\"Sure. This shouldn't take long. I'll meet you there.\"\n\nI hefted the bags and made my way back to the B. Dalton bookstore, curved through the aisles and stopped in the science fiction and fantasy section. What can I say? I have an inner geek and I feed him well. It took me about ten minutes to work my way past New Releases and into the Japanese Manga section.\n\n\"Oooh. New volume of Berserk.\"\n\n\"Hi!\"\n\nI spun around. Tessa was already back. She had a black plastic bag over her shoulder with SPECIALTY ITEMS, INC. on the side. It bulged in ways I found strangely ominous and a bit disturbing.\n\n\"Come on. Let's go,\" she said, tugging on my arm.\n\nI pointed to the shelves of manga. \"But there's a new volume of Berserk out. I get to find out what happens after the Eclipse Ceremony.\"\n\n\"You can pick up comic books later.\"\n\n\"Now hold on a second. Manga are not comic books. They're&mdash;\"\n\nTessa leaned forward, a mischievous glint in her eyes as she pointed at the shelves. \"Comic books,\" she said, then raised the black bag and waggled it. \"Or sex toys.\"\n\nWell, this equation required absolutely no thought.\n\n\"Good point. Let's go.\"\n\nWe stopped for dinner on the way back. There was a nice Carraba's Italian restaurant near Quinn's apartment, so we ate there. I probably downed a little more red wine than I should have (thanks to my fake ID, courtesy of Quinn), but it helped melt away those nagging inhibitions. For some reason, Tessa kept getting calls on her cell phone and having to excuse herself, which I didn't think much of until later when it was too late.\n\nWhen we finally got back to the apartment, I'll admit it, I was nervous. With Quinn, I knew what to expect. Like her or not, I still knew what I was getting into. With Tessa? I don't know. What was she planning? What would she do?\n\nAnother thought came: You probably need another glass of wine. Maybe three. Loosen up, jackass.\n\nTessa seemed to sense my unease. She set the SPECIALTY ITEMS bag on the coffee table and came up behind me, hugging me.\n\n\"Hey, what's wrong?\" she asked, resting her head on my shoulder.\n\n\"Wrong? What could possibly be wrong?\"\n\nYeah, I probably still needed another glass or three.\n\nTessa rubbed my shoulders. \"You're all tense.\"\n\n\"It's nothing. Really?\"\n\n\"You're a horrible liar, you know that?\"\n\n\"Err . . . yeah.\"\n\n\"You don't have to do this if you don't want to,\" she said, and I could feel her sincerity.\n\nAnd so here it was: decision time. What was it going to be, Self? Boldly forward? Or chickening out?\n\n\"Umm . . . no. No. Everything's fine. Just a little nervous, that's all. I'm still game. I mean, after all, turn around is fair play, right?\"\n\n\"That's more like it,\" she said and gave me a peck on the cheek. \"Why don't you get ready? I'll meet you in the bedroom.\"\n\nOh, man. Here we go.\n\nI went into the bathroom and looked at the big glass shower a bit differently than the last time. I finished the necessary hygiene stuff, then walked into the bedroom.\n\nTessa wasn't there yet, but something else was. I walked up to the bed and picked up a long black blindfold with a yellow stick-it note attached. It read: Please Put This On.\n\nIt was in Tessa's immaculate hand writing. The ink was purple and the \"i\" had a little heart over it.\n\nSighing, I put the blindfold on, sat on the edge of the bed, and awaited my fate.\n\nMinutes ticked by, and I grew even more nervous. Maybe ten minutes into my wait, I heard Tessa talking as she came into the bedroom.\n\n\"&mdash;'kay! Bye!\" she said cheerfully before clapping her cell phone shut.\n\n\"Who was that?\" I asked.\n\n\"Just family. They're always calling. You know how they can be.\"\n\nOh, wasn't that the truth. My mom was always calling me during class. It was really embarrassing when my phone would go off in the middle of a lecture. One time, I had it on vibrate, and it shook itself right off my desk.\n\nTessa sat down on the bed next to me and leaned me back. Her hands explored my bare chest and stomach and she plant kisses at random. A hand rubbed softly against the growing bulge in my boxers as she kissed my neck, cheeks, and lips.\n\n\"I'm so happy you're letting me do this,\" she whispered, her hot naked flesh pressed against mine, hard nipples against my chest.\n\nShe placed bondage cuffs around my wrists, tightened them, and fastened them together. My arms were above my head as I lay on my back, and I heard something click. Tessa tightened a cord that was secured underneath the bed, and my arms were pulled taut.\n\nI could feel Tessa moving around me as the huge bed shifted with her slender frame, and she gently pulled off my boxers and placed cuffs on my legs. They too were secured, so that my ass was on the bed's edge, my legs over the side, spread wide.\n\nTessa's small, delicate hands wrapped around my cock, and I could feel her kneel between my legs, her naked body brushing up against mine. Warm breath touched my cock, and she slipped me slowly into her hot, skilled mouth.\n\nHer head slid lower and lower as her tongue played across the underside of my cock, and I felt something new, something different. It was a hard point of pressure against my cock, moving with her tongue.\n\nTessa had a tongue piercing! Whoa!\n\nAnd for whatever reason, this difference sent jolts of pleasure through my body. Tessa bottomed out and her tongue swirled around, moving the point of smooth hard pressure, and I moaned loudly.\n\nTessa came up, keeping the tip in her mouth as she swirled her tongue around it, the piercing playing against my cockhead. I moaned again, my head lolling to one side as she worked my cock over. Tessa was skilled with her mouth, but this was exquisite.\n\nShe started to pick up speed now, bottoming out against my crotch before rising back up to the tip, all the time swirling that piercing around, sending electric jolts of pleasure through my spinning head.\n\nAnd then I felt something press against my ass. Slowly, not even pausing with her mouth, Tessa slipped in a single greased finger. For a second, I thought I was going to explode, but I held it in, not wanting this to stop. Her finger bottomed out in my ass and she started swirling it around, gently teasing me wider, looser, for I knew she had way more than a finger planned for my ass tonight.\n\nShe started stoking my ass with her finger in perfect sync with her mouth swallowing my cock, now moving faster, practically face-fucking my cock. She kept up an energetic pace, and I felt my balls starting to boil over, ready to explode.\n\nBut then, she pulled back and let my cock out of her mouth with a wet smack.\n\nI hadn't realized it, but I was panting excitedly. Her finger was still in my ass, still stroking in and out, teasing and greasing me, and it felt great. But as good as it felt, I'd never cum from anal stimulation alone. I needed her mouth around my cock again.\n\n\"Please be patient,\" she whispered and pulled her finger out. \"I know you'll like this.\"\n\nSomething else pressed against my ass. At first, I thought she was going straight for a strap-on, but then I realized it felt different. A plastic ball popped into my ass, then another, and another. One by one, she pushed a string of anal beads into my ass, and I could feel them going deeper and deeper, and I wondered just how many beads there were.\n\nI scrunched up my face as she pushed more and more beads into me. They were small, but there were a lot of them. Finally, she finished, and her lips found the tip of my rock hard cock. Her head sank down all the way to my crotch, and my cockhead pressed against the back of her throat.\n\nAfter that one slow swallow, she immediately started face-fucking me, and I felt the boiling in my balls escalate. I was rising up to meet her now, my hip pushing up as she fell down, swallowing me. And with a loud grunt, I felt myself explode deep in her throat.\n\nAt that very moment, Tessa pulled on the string of beads, and one by one they popped out of my ass. It was incredible. Indescribable! It was like being fucked in the ass in super-quick strokes, and I actually cried out as I came in her mouth, the beads popping out of my ass.\n\nThe last of the beads came free, and Tessa stayed down on me, suckling my cock as it twitched deep in her throat. Finally, she came up for air, gasping as my cock wetly popped out of her mouth.\n\n\"Oh wow . . .\" I muttered.\n\nTessa gave my cock a playful lick along the underside, and said, \"Did you like that?\"\n\n\"I can see stars.\"\n\nTessa giggled, clearly delighted that I was enjoying her handiwork.\n\n\"Wait here. I'll be back in a flash.\"\n\nI heard the door open and close.\n\nWait here. Yeah. Like I had a choice. I squirmed against my restraints as time ticked on, feeling content from what Tessa had just done to me, but also nervous about what was coming.\n\nThe door opened and shut again. I heard her footsteps, and I waited, squirming against my restrains.\n\nTessa crept back onto the bed, her slender, delicate hands softly caressing my chest. I could hear her breathing. For some reason, she was breathing in loud, excited pants.\n\nShe touched me and caressed me for a while, but after her confidence from before, this seemed out of place. Finally, she gripped the base of my cock firmly. I could feel her breath on my cock as she opened her mouth and took the tip in slowly.\n\nMy brow furrowed in confusion.\n\n\"Why'd you take the piercing out?\" I asked.\n\n\"I still have it in,\" Tessa said, from near the door.\n\nHoly fucking shit! There was someone else in the room and she was sucking my cock!\n\nThe new girl kept sucking me, holding the base of my cock firmly as she bobbed up and down on the tip. Sometimes her tongue would swirl around, but after experiencing Tessa and Quinn, I knew this girl was an amateur.\n\n\"Err . . . Tessa?\"\n\nTessa giggled, walking towards the bed. \n\n\"Just think about it, Dave. Two hot, young blondes at the same time. Isn't that exciting?\"\n\nThe shock was subsiding, and yeah, I was starting to get excited. The new girl was still bobbing up and down on my cock, and now I realized that she was fully clothed; her sweater and slacks kept brushing up against me, and her long (apparently blonde) hair touched me as she took a little more of my cock into her throat.\n\nTessa knelt between my legs and pushed two fingers into my ass slowly.\n\n\"Just think of her as Mystery. Isn't this exciting, Dave?\"\n\n\"Yeah . . .\" I said as Tessa's fingers bottomed out in my ass. She started stroking them slowly, lubricating me as she stretched me. I had a pretty good idea what was coming next.\n\nTessa kept working my ass over, but then I felt her pierced tongue on my cock, opposite Mystery's. They licked my cock from both sides and the two girl's mouths met at the top of my cock, their lips smacking, tongues licking, and I heard them kiss wetly.",
        "Mystery straddled me sixty-nine style, gripped my cock firmly, and sank the tip back into her mouth. It was a shame she was fully clothed. Still . . .\n\nI reached up and nuzzled her crotch with my nose. She jumped a bit, but then seemed to warm to the idea, because her hips lowered into my face. I nuzzled up against her, trying to find her zipper with my teeth as the two girls worked me over.\n\nTessa was quickly stroking my ass now, but Mystery was still sucking me off at a slow pace, and I wasn't all that close to cumming. Finally, Tessa pulled her fingers out of my ass, stood up, placed her hands on my inner thighs, and placed her strap-on against my ass.\n\nThe first inch of it sank in easily, and I realized it wasn't a smooth dildo, but actually a series of spheres. Tessa fed more of her new strap-on into me, and inch by inch, she filled my ass. It felt great, especially with Mystery now taking more of me into her hot wet mouth.\n\n\"I have one last surprise for you,\" Tessa said, and I heard a click. Suddenly, the strap-on started vibrating powerfully in my ass.\n\n\"Gah!\"\n\n\"Wow,\" Tessa breathed. \"I'm not going to last long with the other end in me. Better make the most of it.\"\n\nAnd she started plowing my ass with firm, deep strokes. With the vibrating and the strap-on's ridges, I could hardly bear it. I tossed my head to the side and bit my lip as Tessa drilled me over and over again, faster and faster as she panted excitedly.\n\nMystery stopped sucking me and moved forward so that my cock was close to her clothed crotch, and I heard Tessa and Mystery grope and kiss. But even though nothing was touching my cock, I still felt close, and Tessa kept pounding into me mercilessly, over and over again, and the churning in my balls began to crescendo from the deep vibration and anal penetration alone.\n\nTessa broke their kiss and cried out as an orgasm slammed into her, and she shoved the strap-on deep into me. My cock twitched and I felt something grab its base at the last moment. With a loud grunt, cum sprayed out of my cock, splattering against Tessa's stomach.\n\nTessa held the strap-on in me, and my cock twitched over and over again, stimulated by the deep vibrations in my bowels.\n\nMystery and Tessa kissed again, but then Mystery slipped off the bed and left. The door clicked shut behind her.\n\n\"Who was that?\" I said, barely conscious, my mind laid waste by awesome sex.\n\n\"It's a secret!\" Tessa said cheerfully, pulling the buzzing strap-on out of my ass.\n\n\"You mean I don't get to see who it was?\"\n\n\"Maybe later. She's shy.\"\n\nTessa released the restraints on my ankles and wrists, and had me get up on the bed on my hands and knees. The strap-on vibrated between my legs, lightly touching my semi-hard cock.\n\n\"Ready for more?\" she half-said, half-panted.\n\n\"Yeah . . .\"\n\nTessa knelt over me and gave me an affectionate peck on the cheek. Then I felt her pry my ass open and plunge her fake cock deep into my bowels. She started slowly, rhythmically fucking me, and our night went on and on.\n\n***\n\nSunday morning came and we decided to stop by the University and check on our grades. After finding out what we'd got for Calc (A plus for Tessa, A minus-minus-minus-barely-by-the-skin-of-my-teeth for me), we split up to check on the classes we didn't share. Most of them were in, but a few professors weren't finished grading papers, which was almost criminal, since most of them were those kind where you fill in the bubbles and feed them into a scanner.\n\nAfter that, we met up in the Food Court for lunch.\n\nI have to say, though, every time I saw a blonde-haired girl looking at me, I got a little nervous. I had no idea who Mystery was, nor did I know of any close friends Tessa had besides Quinn and me.\n\nBut I got through the morning without being too overly self-conscious, and met Tessa at the Food Court. She was already eating a McDonald's Garden Salad, so I grabbed a Big Mac, a Sprite, and joined her at the table. The court was pretty empty, with less than ten people eating lunch, most of them faculty.\n\nTessa looked up and smiled as I sat down.\n\n\"Hey, you lose your glasses or something?\" I asked.\n\n\"What?\"\n\n\"Your glasses. You don't have them on.\"\n\n\"Oh. Right,\" Tessa said. \"Umm . . . I'm trying out some contacts.\"\n\n\"Ah,\" I said, then my brain started working:\n\nShe's trying something new. Complement her. Complement her. Complement her.\n\n\"Err . . . you look really nice,\" I said. \"Without the glasses, I mean. Brings out your eyes.\"\n\n\"You think?\"\n\n\"Oh yeah. Definitely.\" Then a thought struck me. \"Have you changed your clothes?\"\n\n\"What do you mean, Dave? You don't like my glasses,\" Tessa said, from behind me.\n\nI whirled around in my seat, almost spilling my Sprite. Tessa-with-glasses walked around the table, smiled guiltily, and sat down next to Tessa-without-glasses.\n\nI looked at the two people in front of me. The two twins in front of me. Holy fucking shit! Tessa had a twin sister!\n\nLast night sprang immediately into my head. Shit! Was that Tessa's sister!?! Fuck me!\n\n\"Dave, this is my sister, Nicole. Nicole, this is Dave.\"\n\n\"Err . . . pleased to meet you,\" I said, trying to hide my expression of complete shock.\n\n\"Thanks, but . . . we've already met,\" Nicole said. She looked away shyly.\n\nAnd thoughts rolled through my head like a tidal wave: \n\nFuck me! Tessa has a twin sister! Fuck me! What am I supposed to do about this?!? Fuck me! I just had sex with my girlfriend's sister! Fuck me! And so did Tessa! Tessa had sex with her twin sister! Fuck me! Fuck me! Fuck me!\n\nWell, you get the idea.\n\nLife can get complicated sometimes. But then, sometimes complicated can be a whole lot of fun, as I would soon learn."
    ],
    "authorname": "slowMINE",
    "tags": [
        "strap-on",
        "ffm",
        "two women one man",
        "bondage",
        "bisexual",
        "threesome",
        "double penetration",
        "femdom",
        "anal incest",
        "blowjob"
    ],
    "category": "Anal",
    "url": "https://www.literotica.com/s/extra-credit-club-ch-02"
}
{
    "title": "The Curse of the Scots Ch. 07",
    "pages": [
        "Cayden rails against God, Caprice pleas for forgiveness, and Angie emerges\n\nI watched her as she ran out of the restaurant. I wanted to run after her. I wanted to catch her, stop her, I wanted to hold her, wrap her in my arms and never let her go. I wanted to smother her in kisses. I wanted...I needed to save...protect her! God, I wanted to tell her she didn't have to go. \n\nDel was outside on the parking lot when I got there. He murmured. His words were toneless, \"She's gone, huh.\"\n\nI dully replied, \"Yeah, she's gone.\"\n\n\"What are you going to do now?\"\n\nShrugging my shoulders while trying to hide my eyes I replied, \"Angie wanted me to pick her up and take her home after... after she left. I guess I'll go over to her stand.\" \n\nI could see Del had been crying. He told me, \"I'll be at the barns if you need me.\"\n\nI tried to smile, \"OK, thanks Del,\" I got in my truck and started to Angie's stand.\n\n++++++++++\n\nAngie's anguish.\n\nCayden got me and took me back to my mother's. Emily would be home soon. I'd told my baby about Caprice that morning. She cried at first; then she'd gotten angry. She wanted to know why I couldn't make her stay. Emily had come to love Caprice as much as I did.\n\nCaprice and I had talked about our relationship. I told her I didn't consider myself a lesbian, but even so I knew that I loved her, that I loved being with her, and I knew life without her would be unbearable. \n\nWhen we talked Caprice had no idea what was coming; just the same she seemed to understand that I was in turmoil. She explained that while she'd been a whore she'd learned men generally saw her, and the women like her as little more than meat, she and the other women were objects men would use and maybe brag about later. Whores she said weren't people; they weren't human beings. \n\nCaprice explained that she and the other women often turned to each other when they needed companionship and affection. She told me the feelings we had for each other might have involved sex, but it was really more about the closeness and the need to love and be loved. She even joked once that while men laughed and said prostitution was the oldest profession; she and the girls knew the oldest profession wasn't prostitution at all but slavery. Before that I had never really looked at what she used to do that way. I mean being a whore was being more like a slave than anything else. I knew she was right.\n\n++++++++++\n\nThose first days after Caprice left were horrible. I cried a lot. Before Cayden brought Caprice into my life all my energies had been directed toward my anger for him. Then Caprice came; my anger dissipated and then died. Through Caprice I'd found a new outlet for my emotions; anger had been replaced by friendship and love. Now that she'd left I felt nothing. My old fury at Cayden was an empty well, and with Caprice gone I had no one. Those first days were awful.\n\nNear the end of the first week after Caprice's departure I began to realize one of the many gifts Caprice left me with was the ability to see others in a new way. I watched Cayden; he was as unhappy and as lonely as I was. \n\nI guess what I felt first was empathy, but pretty quickly I had to accept what I'd known all along. My feelings for Cayden were feelings of love, true love, not just the carnal, but a true, real, deep abiding hunger. I loved him. I'd always loved him. I loved his warm smile, his silly jokes. I fondly remembered his strong arms, those stupid woebegone looks. I wasn't thinking about sex with Cayden so much as just the joy of his nearness. It was funny; Caprice loved him, I loved him. Were she still here Caprice could have the sex; I wanted his nearness, his tenderness. I realized an awful truth about myself; the only thing that had kept me away from him was my pride, my stupid stupid pride. \n\nI talked to my mother. I explained to her that I needed to see Cayden. I needed to be with him. At first our conversations were just that; simple civil conversations, but soon they escalated. My mother didn't want me to see Cayden. Partly I think she still blamed him for a lot of the things that had happened to me, but I think she was more afraid I'd leave her and she'd be alone. \n\nWhat was just as bad was Emily. Emily was driving me crazy. She missed Caprice, but more than that she was a year older and much more aware. I couldn't put her off much longer. She heard things at school. The kids teased her. They all told her who her daddy was. I knew I had to face that problem and I had to face it soon.\n\nFinally it all blew up one night while my mother was fixing dinner. Thanks to Cayden I had a job. Cayden had persuaded Del to come over and he had removed the bars from my bedroom windows. Cayden had persuaded Matt to withdraw his complaint. When the Social Services people came to visit there wasn't anything they could find. Because of Cayden Emily was safe. I told my mother I needed to see Cayden and straighten things out once and for all. My mom threw a fit; she went into a rage. I knew the time had come.\n\nI remember we'd had an awful rowel.\n\n++++++++++ \n\n\n\nMrs. Bradford scowled, \"Angie if you leave now, I'm telling you don't try to come back!\"\n\n\"Come on Emily. We'll pack a few things. It's time we left.\"\n\n\"But mommy where are we going? I'm tired. I have to go to school tomorrow.\"\n\n\"I know you're tired sweetie. I know you have school tomorrow, but this is way overdue. It's time for me to grow up.\"\n\n\"Grow up? Mommy I don't understand?\"\n\nI told her, \"You will. We're going on a growing up walk tonight.\" \n\nI checked the clock. It was half past 8:00. I had to leave. It was time. If I didn't do something now I'd be under my mother's thumb the rest of my life. Besides I owed it to my little girl. I tried to give her my best big mommy smile, \"Come on Emily upstairs we go.\" \n\nWe went upstairs and packed for the short walk. It was only about a quarter mile, but as I loaded the one small valise I could call my own I knew it would be the longest quarter mile of my life.\n\n\"Mommy can I take Candy Land?\"\n\n\"Sure baby just let me tape the box top on real tight so none of the cards or pieces fall out on the way.\" I pulled out some scotch tape and firmly taped the lid on, \"There, now you carry Candy Land and I'll carry our clothes.\" I squeezed as many of Emily's things in as I could, \"There, ready honeybunch?\"\n\n\"Mommy you didn't pack any clothes for yourself.\"\n\n\"I'll be all right sugar doll,\" I took her tiny hand in mine. I led her back down the stairs and out the front door.\n\nAs we started down the drive my mom yelled out, \"You'll be sorry.\"\n\nEmily and I kept walking. I heard my mom yell out again, \"I lied. You know you can come back any time. I'm here. I'll always be here for you!\"\n\n\n\nI knew that.\n\n\n\nIt was a balmy dry October evening. We had a brilliant harvest moon to light our way. I'd been down this road a million times; walking, riding in Cayden's pick-up, and when I was a teenager pedaling on my bicycle. The valise was light. I had no trouble, but after just a short while I could see my girl was starting to flag. I leaned down, and picked her up so she rested on my hip, \"Come on girlie you carry Candy Land. I'll carry you.\"\n\n\"I'm not too heavy am I mommy?\"\n\nI thought of the old song from that ancient Rock and Roll group Three Dog Night. They'd done a song based on something that had happened at an orphanage or someplace like that. I kissed her cheek as I struggled along up the road. I sang to her, \"You ain't heavy. You're my baby,\" Maybe they weren't exactly the right words, but they worked for me. Emily snuggled her head under my chin. She shifted her weight and I almost fell down, \"Hey watch it sweetie. Mommy almost lost her balance.\"\n\n\"Sorry mommy.\"\n\nI looked down the road. My right arm was already tired. My jacket had started to ride up around my waist. The valise, though small had begun to cut into my shoulder. I'd be all right. I figured it was only about twenty minutes. I could make it.\n\n++++++++++\n\nCayden is piteous.\n\nJesus I was tired. It was after 8:30, and it had been another long day. I wasn't sleeping very well. Caprice had been gone over a week. I don't know why, but I'd hoped she would've called. God I missed her. I knew Angie missed her too; she'd been a bear every morning when I picked her up to take her to work. It was hard to tell with Angie; maybe she was irritable because Caprice was gone, maybe it was because I deliberately got to her mother's before Emily's bus came, I did that so I could see both my girls together, or maybe it was her mother. Damn I heard them arguing and yelling at each other every morning. \n\nI took my shower, and had a big glass of milk. I went to the front door to make sure it was locked and the outside light was off. Yep, everything was in place. I turned and started for my bedroom. I still used the smaller bedroom across from the big one that had the king sized bed. One can always hope. I crossed by the sofa and wide screen TV. Once I reached my bedroom I'd close the door and be gone to the world till the morning. \n\nJust as I reached my bedroom door I heard someone knocking on my front door. I cringed, 'Damn who could that be? I bet it was Del or maybe Aubrey.' I shuffled back to the door. If it was Del he'd hear it. \n\nI got to the door, turned the outside light back on, unlocked the damn thing and opened it. Jesus H. Christ!\n\nAngie put her daughter down. She dropped the valise on the porch floor. With a hand on each of her little girl's shoulders she very quietly said, \"Emily this is Cayden McLeish. He's your daddy.\"\n\nFor a second I was like totally stunned. I couldn't think. I couldn't move. I couldn't talk. Though it was only a mere second or two it seemed like an eternity. I recovered. I dropped to my knees and reached out to my daughter. I whispered, \"Hi Emily.\"\n\nEmily, surprised and frightened, retreated into her mother's arms. Angie knelt beside and behind her, \"Don't be afraid honey he really is your daddy, and believe me he loves you like all get out.\"\n\nEmily was still frozen in place. Angie returned to her feet, as she stood she lifted her baby and started to hand her to me.\n\nI took to my feet at the same time. I marveled at Angie's strength. Heck she wasn't much bigger than Emily. As she handed me my daughter I reached out with my two much larger arms and pulled both, mother and child, in to my chest. Squeezing them both tightly, through my tears I hoarsely whispered, \"Come in. Come on in,\" I couldn't help it I started crying.\n\n\n\nEmily sat stiffly in my arms. Her mother's hands were still holding her by her armpits. Angie was crying too. She whispered to our daughter, \"This is your daddy sweetheart. Let him hold you.\"\n\nEmily reluctantly leaned forward and reached out with her little arms. I took my right arm and lifted her to my face. I kissed her cheeks. At the same time I half lifted Angie with my other arm. She was always so small. I half carried half walked my two girls to the sofa. I sat them both down; Emily on my lap, Angie on the seat beside me. Holding Emily firmly I pulled Angie in and kissed her. I had my left arm around and behind her. My fingers rested on the back of her head. I started to caress the nape of her neck. It felt like buckets of tears were rolling down my cheeks. Angie took her tiny hand and started to wipe them away. She leaned forward and kissed me.\n\nEmily looked at me and whispered, \"Are you really my daddy?\"\n\nI answered, \"I really am.\"\n\nShe looked at her mother, \"He really is?\"\n\nAngie leaned across me and kissed our daughter, \"Yes Emily he really is.\"\n\nShe looked confused for a second and then she asked, \"You want to play Candy Land?\"\n\nI looked at Angie. Angie smiled and wiped the loose fronds of hair that cluttered our baby girl's face. She said, \"Not tonight. You've got to go to bed. You have school tomorrow don't forget, but how about a glass of milk before bed?\"\n\nEmily looked at me. I touched her precious chin with my index finger, \"Mommy's the boss of us honey.\" \n\nIt was easy to see she was exhausted. Emily sighed, \"OK, milk tonight but tomorrow,\" she held up her Candy Land game.\n\nAngie and I both nodded at the same time. Angie whispered, \"Right after school.\" She looked at me, \"Where...?\"\n\nI hiccoughed back the tears, \"The big bed where you and Caprice used to sleep.\"\n\nThat caught Emily's attention, \"Is Auntie Caprice here?\"\n\nI murmured, \"She's not here right now.\"\n\nEmily seemed to sigh, she forgot about the milk, \"Oh OK. I'm ready for bed now.\" Angie took her hand and walked her to the main bedroom. I followed. As we reached the door Emily turned to me and said, \"Tomorrow?\"\n\nI was so happy. I agreed, \"Tomorrow, Candy Land.\" \n\nAngie turned and walked into the bedroom. I heard Emily ask her mother, \"He really is my daddy?\" I heard Angie reply, \"Yes sweetheart he really is.\" \n\nI played the jerk and got up close to the closed door and snooped a listen. Emily asked her mother, \"Is this our home now?\" I overheard Angie's answer, \"Yes honey this is our home. We're home now.\" \n\nI leaned back against the wall. Oh I was so happy. I knew I wouldn't get any sleep now. There were lists to make. Tomorrow Angie and I would have to go shopping; there were toys, clothes, curtains, bed-sheets, all the things little girls needed and wanted. I gasped, 'finally, oh finally I had my girls. At last I had somebody to spend all my money on! Then I stopped, I wondered where Caprice was? What should I do? I wavered on my feet. Could I be satisfied with two while one was still unaccounted for? What if she'd backed out about going to her parents? What if she ran away again? What if she...? That awful Vince...Oh god no I couldn't allow that! I knew the answer. My mind was made up. I didn't have to voice it.\n\nI thought about the stories in the Bible. I knew I'd been right to send Caprice to find her parents, and I knew that was where she went. OK, I'll give her some time, but like the story of the lost sheep. I knew where her parents lived. I'd have to go and get her back. She was mine damn it!\n\n++++++++++ \n\nFor Caprice's the odyssey continues.\n\nAfter the Olive Garden I knew I couldn't stay near Cayden. I had to get away as fast as I could. I drove all afternoon and late into the evening. I followed a route different from the one the G.P.S. suggested. The G.P.S. listed a northeasterly route that would have taken me up and around Philadelphia and New York City. I took a more westerly route. I drove over the Chesapeake Bay Bridge and swung around west of Baltimore and then up #I 70 to #I 81. This way I'd scoot right across Maryland, through Central Pennsylvania and into New York. I got tired as I reached the Maryland Pennsylvania line so I pulled in to a motel for the night.\n\nCayden had left me a box and some paperwork in a manila folder. I decided to look the stuff over before setting out again in the morning.\n\nI laid out everything on the bed. There was a bankbook, a checking account book, a VISA card, insurance information, the title to the car, and two smaller envelopes.\n\nI opened the thicker envelope. There weren't any pictures, but I found my arrest record, information about my parents, and a stack of papers detailing all the things they'd done to try to find me. God, they must have spent a fortune; that made me feel bad.\n\nI read all the stuff over and over. I remembered a few things, but most of it was still just kind of a blur. My father was a minister in Rochester. My mother had been his secretary. Both of them were older people. It was clear I was a late in life baby. I figured it up. If I was thirty my mother was probably sixty-nine close to seventy now. My father was around seventy-one; it all depended on which month of the year they were each born.\n\nIt was pretty clear what had happened. I'd turned eighteen and run away; I couldn't remember why. I couldn't remember much of anything. Somehow right about the time I ran away I must have gotten hooked up with some bad people. One thing led to another, and after twelve years I wound up in a Central Pennsylvania tavern where a stupid Eastern Shore hay seed ended up buying me rather than seeing me suffocated. Of course the hay seed was Cayden.\n\nI stared at the second envelope. I knew it contained a letter to me from Cayden. I was afraid to open it. I thought about everything that had happened to me. I'd had a childhood. I had parents. I'd been a whore. None of that mattered.\n\nWhat mattered to me was in that second envelope. Yeah, some stupid na\u00efve dumb backward jackass Eastern Shore farmer had saved my life, he'd fixed my body, given me a home and a life. Thanks to him I had friends. I'd become part of a community. People knew me at the Fire Hall. I belonged to a church. I had regular acquaintances. I'd stand around and talk to people at the supermarkets. I had a pretty regular spot on the beach where my best girlfriend and her daughter and I used to go and sunbathe and swim. \n\nYeah, yeah look at what he'd done for me. He'd made all these things happen, and then he showed me my past and sent me on my way. Yeah, great, he'd given me a life but in the giving he'd ripped my heart out of my body and hidden it away from me. Damn it, in seven months I'd gone from scared lonely whore to scared and lonely ex-whore. Thanks Cayden thanks a lot. I opened the second envelope. \n\nYeah, damn him, he'd written a stupid letter, stupid hick farmer. I opened it and read it. He was no Shakespeare.\n\n'Dear Lauren', the jackass, he would use my real name.\n\n'I only have five things I want to say. First, don't worry about Angie and Emily. I'll take care of them. Second, I know it will be hard, but you need to see your parents. They've been hunting for you for twelve years. You need to reconnect. Third, more than anything or anyone I love you. I'll love you all the rest of my life. I mean it; I'll love you till the day I die. Fourth, I'll wait for you. You owe me nothing, but I want you to know I'll always be here for you. Fifth, you have a car and you have a cell phone. The G.P.S. has a setting that will show you how to get back to me if you ever feel like it. In the cell phone contact list I've put my land line and my cell phone number. That's all I have to say. If you have any worries go back and reread the third thing. If that's not enough then reread number four.\n\nLove Cayden.'\n\nI read the letter maybe twenty times. The man is an asshole. I didn't expect a sonnet, but this was about as romantic as the directions on a medicine bottle. How can you not love someone like that? \n\nI put the letter away, and curled up on the bed. I thought about Cayden; oh that wonderful stupid man. I knew I had to find my parents; after that, well I sort of had a plan. \n\n\n\nI got up and undressed and lay back down on the bed. I spent the next couple hours masturbating. I had this nice clean nearly tattoo free body. Thanks to the exercise and attention I got on Cayden's farm I had two pretty firm tits, and thanks to Cayden I had a beautiful new sweet spot that had been touched by only one man. I teared up over that; was the sweet spot in my vagina or in my heart? While I lay there fingering my new body I vowed; 'only one man has touched me, and if I live another hundred years no other man ever would.' \n\nI felt a little puffy around my stomach. I counted back to that second time when I'd had sex, no made love, with Cayden. I knew then I was fertile. Maybe it was just wishful thinking, but I believed something was going on. I had a strong premonition I'd be seeing the asshole again; that made me feel better.\n\n++++++++++\n\nBreakfast at Cayden's. \n\nI was up early. I wanted to get things ready so when Emily came out she'd be able to choose what she wanted for breakfast. This was a farm so eggs, sausage, scrapple, bacon, ham, pancakes, they were all readily at hand.",
        "Emily came out wearing an adorable little one piece dress, ruffled collar, long sleeves with ruffled cuffs. She had on white stockings and black patent leather shoes. Angie had put her hair up in pig tails. \n\nI could see she was pretty uncertain, maybe a little scared. I whipped out what I hoped was my very best daddy smile, \"Who's up for breakfast?\" I ran off the list.\n\nAngie yawned and said, \"Just coffee for me.\"\n\nI started to pour her a cup. I plunked in some cream and sugar. I remembered how Angie liked it. While I stirred it I asked Emily, \"And what about you little lady?\"\n\nEmily shot me a pensive look, \"Could I have some French toast?\"\n\nI smiled as broadly as I could. I thought if I smiled much bigger my teeth would fall out, \"French toast on the way!\" I grabbed a soup bowl, two eggs, and some milk. I broke the eggs and dropped the yolks and whites in the soup bowl. I followed it up with the milk. I started mixing the stuff up. \n\nAngie sat on a dining room chair and watched.\n\nEmily sat on a stool over close to me at the kitchen counter, \"So you're my real daddy.\"\n\nI grinned, \"I sure am.\"\n\n\"Mommy always said you were mean.\"\n\nI slipped from smiley to sincere, \"I've been pretty mean in the past, especially to your mommy, but not anymore. You'll never see me being mean to your mom, and I mean it.\"\n\nShe asked, \"Why?\"\n\n\"Why was I mean?\"\n\nShe nodded.\n\nI'd already plopped two pieces of bread in the batter, and they were cooking away on the skillet. I tried to answer her, \"I guess when you love someone, I mean really love them, you act in ways that don't make any sense.\"\n\n\"You love my mommy?\"\n\nI placed the French toast on a plate. I pushed the butter and syrup toward Emily too. I looked at Angie, \"I love your mommy very much.\"\n\nEmily asked, \"Do you love me?\"\n\nI put a napkin beside her plate while she used a fork to cut up her toast, \"Yes, I love you too.\"\n\nEmily kept shoveling the toast in her mouth. I wondered if she ever learned how to chew. She told me, \"I have a pony.\"\n\n\"I know that, his name's Johnny.\" \n\nEmily drank some of the orange juice I'd poured out for her, \"How did you know?\"\n\nI cast a look at Angie. Angie had already found out I'd gotten the pony, but I didn't know what she'd told Emily. Angie nodded so I guessed it was all right to tell Emily the truth, \"I got him for you.\"\n\nEmily put her fork down. She was finished anyway, \"You did?\"\n\nI nodded.\n\nShe asked, \"Why?\"\n\n\"You're my little girl. I love you. I wanted you to have a pony. Do you like him?\"\n\nShe smiled, \"Yeah, I like Johnny.\" She turned to her mother, \"Time for school.\" She got up and started for the front door. Then she turned back and looked at me, \"You'll be here when I get home?\"\n\nI smiled, \"Sure will.\" I had a lot to do today, but I knew no matter where I was I'd stop and get home so I could greet her when she got off the bus. Imagine, one day, in one day she'd completely taken over my life. What a great thing to have happened.\n\n\n\nAngie helped Emily into her jacket, she put on her own, \"I'll be right back.\"\n\nI looked around, \"Don't try to walk her all the way back to the bus stop. Why don't you drive her to school?\"\n\n\"Cayden I haven't driven in years. My father took my license. I don't have a car. You know that.\"\n\nI turned and threw my keys to the Lexus at her, \"You need to start driving again. We'll get your license later when you get back.\" \n\nAs they walked out the door Emily stopped and turned around. I knew she was looking at me, \"I wish Auntie Caprice was here.\"\n\nI didn't look up, I kept fiddling with the dishwasher, but I replied, \"I do too.\"\n\n++++++++++\n\nWho am I? Caprice? Lauren?\n\nI took my time driving to Rochester. I had to think. Not think actually; I had to try to figure things out. I know I was scared. What would I say? After what I'd done to these two old people, what could I say?\n\n++++++++++\n\nI reached Rochester and followed the GPS toward my old home. Once I got in the old neighborhood things started to jump, no dribble, out at me. I drove by my old high school, then the middle school, and last my old elementary school. I kind of remembered them, but I couldn't put any life in them. They all looked old and sort of bedraggled.\n\nSomehow I knew where our church was; it was called Highland Presbyterian. I saw my dad's name wasn't on the billboard anymore. I guess he must have retired. It felt funny; I'd expected it to be there.\n\nI drove down to the old neighborhood; down my street. I remembered the houses; they all looked a little more haggard, but otherwise things still looked the same. Well I thought they did. I spotted some familiar landmarks. Remembered when I was a kid someone had bought one of those mirrored globes and put it in their front yard. It was still there. Some trees had been cut down. I remembered the trees because I saw the stumps.\n\nI recognized most of the stuff, but in a lot of ways it all still seemed foreign to me. It was like I knew about all of it, but was somebody else's memories. Everything was familiar, but nothing stood out. \n\nAt last I reached the final address; 8257 Sycamore. I drove by kind of slow. Whoever lived there must have just bought a new car; it was a Chevrolet. I remembered, my father always drove Chevys. I drove down, made a U-turn and passed back by. I saw and remembered the rose bushes. There was a swing on the front porch. I remembered that. \n\nI passed by as slow as I could and tried to get a glimpse in the backyard. My mind crashed! I saw and remembered the swing set. When I was a little girl my dad and I had put it up together; or more honestly, he put it up while I talked and skipped all around. I remembered I wore all kinds of buttons and little medals on my shirt. I had some kind of plastic ring, and I had I think an Ariel wristwatch. I'd had on a Mickey Mouse Tee shirt. We'd gone to Disney World. I remembered that. I remembered my dad! I remembered how much I adored him. I worshipped him. \n\nIt was over for me. I started to cry. I could hear his voice as he quietly scolded, \"Now Lauren; what would Jesus do? You know how much we love you.\" I had run away. I was a cruel little bitch. Jesus would never forgive me for what I did.\n\nI pushed my foot down on the gas pedal. I had to get out there. I started to remember things. My mom, her apple pies, bread pudding, her aprons, choir practice, dance lessons, girl scouts, my dad at the piano. I had to get away! I'd had the perfect life, the perfect family, the best mom and dad, and I'd run away! Why?\n\nI drove to a nearby motel, a Motel Six. I got a room, bought a six pack of Pepsis, went in, cried, and tried to go to sleep. I had to figure this out. I knew I had to see them, see my mom and dad. Damn, I knew I couldn't do it. I'd hurt them so much. I lay there on the bed and tried to remember.\n\n++++++++++\n\nI lay awake all night and tried to remember. Mostly I cried. I didn't remember much, mostly snatches of this and that; going to New York to see 'Cats'. I had Madonna records, a unicorn poster, rainbow wallpaper. I remembered sleep overs. I had girlfriends. I got good grades in school, all A's. I liked English, hated history. I'd run away. I think there might have been a boy. I must have run away to be with him; he turned out to be something other than what I thought. \n\nI remember Buffalo, after that I think Detroit. I remember taking drugs, being locked in different rooms. I remembered Chicago. I think I'd been taken to Indianapolis. I know I remembered Scranton, then Harrisburg, and last East Berlin or was it Dillsburg. \n\nYeah I'd been around, or been passed around. I remembered a few men, not many, not near as many as I should. I think I'd had an abortion once. I remember being beaten, slapped a lot, not having anything to wear and not enough to eat. I remembered Fraternity parties; the Frat boys were among the worst. There'd been bachelor parties, and team parties, and company parties, and birthday parties. I remember cucumbers and zucchini being shoved inside me. There'd been black men, white men, and Asians. Oh yeah I remembered the black guys; talk about overrated, most weren't as big as a typical white boy, not that I cared or that it really mattered.\n\nBy sunrise I realized I couldn't find a reason why I'd run away; I just had. Now I had to find a way back. I thought I'd keep an eye out on my parent's house. I'd watch; maybe I'd follow, see what they were doing. \n\nDamn it. Who was I? What was I doing? I'd been fucked, beaten, shackled, tied, gang banged, name it and it happened, and now I was afraid to face two helpless old people. Twelve years, twelve years I'd been tossed around, passed around, and beaten, and I couldn't handle two old people? Shit!\n\n++++++++++\n\nCayden gets called out.\n\nI'd been driving my tractor down the road changing from one set of fields to another and thought I'd stop in at the Gas & Go and get a soda. I'd been cutting the tall grass on the edges of the fields so it would be easier when we pulled in with the harvesters. I liked Pepsi. As I was just opening the can, just about to remount my trusty old John Deere when some guy showed up out of nowhere.\n\nHe walked over to me, \"Hey you Cayden McLeish?\"\n\nI turned around. He didn't look like much, \"Yeah,\" once I would have said 'what of it', not anymore. I asked, \"What can I do for you?\"\n\nHe held out his hand and gave me this smarmy smile, \"My name's not important. Most people just call me Spike.\"\n\nI could see why. He had his hair all greased and up in a row of spikes. I replied, \"Like I said, what can I do for you?\"\n\nHe smiled that greasy smile again, \"We have a mutual friend, a guy named Vince. You remember Vince. He lives up in Pennsylvania.\"\n\nI glanced over at his car; a late model Camry, Pennsylvania tags. I remembered Vince was the guy who sold me Caprice. I must have paled because his smile got wider.\n\nHe said, \"You do remember. Vince wants to know how Caprice is doing. He wants to buy her back.\"\n\nI held my breath, \"She's not for sale.\"\n\nSpike, still smiling, asked, \"Do you know where she is?\"\n\nI let out a sigh of relief. His remark led me to believe they didn't know anything. I answered, \"Yeah I know where she is, and like I said, she's not for sale.\"\n\nSpike made an offer, \"Vince said he paid close to $5,000.00. He's willing to throw in another thousand. How about it?\"\n\nI replied, \"Like I said, she's not for sale. She's not into that lifestyle anymore. Got herself a husband, has a kid on the way, moved to New York.\" OK, so I lied, but these people weren't getting their hands on her ever again.\n\nSpike really smiled then, \"So Caprice finally broke free, got herself a man, and now she's having a baby. Well good for her. You don't remember me. I was there the night you bought her. I always sort of liked her. She was a tough kid; never cracked, never broke, and I mean lots of guys tried.\" He started to turn to walk away, \"I'll tell Vince. He was only half interested anyway.\" He looked back one more time before he got in his car, \"If you ever see her, tell I said Hi.\"\n\nI didn't budge or move a muscle, \"Like I said, she moved away. Nobody sees her anymore.\"\n\nThe guy Spike got in his car and drove off.\n\nSo that was the end of Vince and Pennsylvania.\n\n++++++++++\n\nRochester, New York.\n\nI've been hovering around the old house for more than a week. I've seen both mom and dad. It breaks my heart to see them. They're both so old and frail. Daddy uses a cane. He's all hunched over; not anything like the strong man I vaguely remembered. Mom looks like she lost fifty pounds. She was never a very big woman, but now she looks skeletal. She's the one who gets out the most. She has a kind of pattern. She shops mostly at the Walmart, but she gets gas and donuts at a Dunkin Donuts near the house. She doesn't do much else. I guess, being so frail, she's a little afraid. They needed to be taken care of; that would have been my job; I've let them down. \n\n++++++++++\n\nI decided to follow her into the Walmart. Why not; maybe I'll see something that might stir up some old memories. I was lying to myself. I remembered enough. I was just scared. I watched as she parked her car in a handicapped spot and went in. She had kind of a shuffling gait. I waited a couple minutes and followed.\n\nI felt sick; sick to my stomach and sick in my heart. Here I was hiding; hiding from my mom. I should be there with her. I know I'm a coward. I'm not the girl my mom and dad raised. I know God was setting aside a special place in hell just for me. I felt like everybody was watching me. Christ, I felt like a roach and someone was getting ready to shine a light on me. I never felt so alone in my life. I never felt so scared. I never felt so ashamed, so alone. I wished Cayden was...I could drive back and tell Cayden they didn't want...No...I...he. God I'm such a coward. \n\nI saw her as she got a cart and started toward the aisle where they kept the cleaners. I thought I'd slip around and discreetly watch as she shopped. I kind of hunkered down and walked along a parallel aisle. I started looking at some of the stuff in the aisle I was traveling. I thought I was doing pretty well. I reached the end of the aisle and turned the corner.\n\nJesus!\n\nShe was right in front of me! She's standing right in front of me. Christ Jesus! She's looking right at me. Holy God! She sees me! She recognizes me! My mom knows who I am! \n\nMy mom's face; her face went completely white. Her mouth dropped open like she wanted to say something.\n\nI gasped! I put my hand to my mouth and I gasped. I turned around and ran away as fast as I could. She saw me. My mom, she saw me! What was I going to do? I ran straight out to the parking lot. I ran out to my car. I found my car, I fumbled with my purse, got my keys, unlocked the door. I jumped in, and I drove back to the Motel Six as fast as I could.\n\nOn the way back I started to cry. I started heaving. My stomach twisted into a million knots. I needed to throw up. What was I going to do? I had no idea. I was so scared. I ran in my room, closed the door, and ran and hid in the bathroom. Oh I wanted to die. I couldn't stop crying. What if she had a heart attack? What if she had a stroke? What have I done? I might have killed my mother! \n\nI cried. I couldn't stop. I was so scared. I felt so all alone. I ran in the bathroom. I curled up and hid in the shower. I just couldn't stop crying. I can't do this! I just can't. I'm so afraid. I need help! I'm so alone. I need someone! I need... \n\n++++++++++\n\nBack from my farm work I was staring absentmindedly out the back window when the house phone rang. \n\nI ignored it. Angie went and picked it up. I just sat and looked out at the sky; the gloomy October sky. It reflected my mood. \n\nAngie called over, \"Cayden.\"\n\nI turned around, \"I hope it's important. I'd hate to think the damn phone awakened Emily.\"\n\nAngie held out the phone for me, \"Cayden, it's Caprice.\"\n\nCaprice! I jumped from the sofa and hurried to the phone, \"What's up. Did she say anything? Is she all right?\"\n\nAngie just held out the phone, \"She doesn't sound so good.\"\n\nI grabbed the phone. My mind was going in a million different directions. Had she gotten hooked up with that Vince? Had she gone someplace and got into trouble? I took a deep breath, \"Hello.\" \n\nI heard her voice. It was like the sun had come back out. Sparrows were singing! Was that a whippoorwill? It felt like spring time! \n\n\"Cayden?\"\n\n\"It's me.\"\n\n\"Cayden I need you.\"\n\nI had a bunch of questions, \"Are you all right. You didn't have a wreck? You're not hurt. You didn't get mixed up with anyone...\"\n\nShe interrupted, \"I saw them. I saw my mom and my dad. My mom saw me. Cayden I can't. I just can't I'm scared. I'm so scared,\" I heard her break down in tears.\n\n\"OK, where are you?\"\n\nShe was crying and sniffling and coughing, \"I'm at the Motel Six just outside Rochester off of #I 81,\" she sniffed again, \"In room 115.\"\n\nI breathed a great sigh of relief, \"OK, you're not hurt. You're not physically injured. You didn't wreck the car. Ok, all right; just stay there. We'll be there in a few hours.\"\n\nShe was crying and blubbering like a baby. I'd never heard anything like it; certainly not from her. Through her tears she whimpered, \"Cayden I'm so scared. I don't know what to do. I'm afraid. Promise me, promise you'll come.\"\n\nI wanted to cry too, but not because I was sad; I was jubilant! She needs me! I replied, \"Don't be afraid. Angie and I will be there as soon as we can. We'll call every couple hours just to keep you up to date.\"\n\nShe was still crying, \"I'm scared Cayden.\"\n\nShe's scared! I inadvertently tightened my stomach and flexed my biceps. I guess I unconsciously puffed up my chest because Angie gave me a funny quizzical look. I kept talking, \"Caprice it's me, Cayden. Have I ever let you down?\"\n\nShe stopped crying and I heard her sniff, \"No.\"\n\nI had the situation in hand; God, I was made for this! I very calmly told her, \"Good. You know me. Angie's figuring out the time and route right now,\" actually we hadn't done anything yet; \"we're on our way. You sound tired. I want you to get a shower. Take a hot shower. Go to bed. Get some rest. Don't worry. We'll figure this out when we get there.\"\n\nShe started crying again, \"I love you Cayden. I knew you'd come for me.\"\n\nOh music sweet music; I answered, \"Always sweetheart. Now you get yourself a nice hot shower. Put on something comfy and go to bed. I bet you haven't eaten. Why don't you call out and get some pizza or something. Call a Papa Johns; get a medium pizza with extra cheese,\" I knew she liked that, \"We'll work it out. It'll all be fine.\"\n\nShe whimpered, \"OK.\"\n\n\n\n\"All right now hang up the phone.\"\n\nShe asked, \"Can I talk to Angie?\"\n\nI said sure. I handed the phone to Angie, \"She wants to talk to you. Keep her calm. Think of things that will keep her busy. Get her to go to bed. I'll pack up some stuff,\" I added, \"Oh yeah, you're coming too.\"\n\nAngie held the phone. I could hear Caprice on the other end. She'd stopped crying. Angie asked me, \"What about Emily?\"\n\nI hesitated, \"I don't know. Do you think we should take her? This could be pretty traumatic.\"\n\nAngie didn't blink an eye, \"I think she should go too.\"\n\nI wasn't so sure, \"We'd have to take her out of school.\"\n\nAngie was firm, \"They'll be good for each other,\" and then she added, \"She'll get to see her daddy be a hero.\"\n\nWow! I liked that. I shrugged, \"Well if you say so.\"\n\nAngie talked to Caprice for a few more minutes; then she started collecting clothes for herself and Emily. Maybe fifteen minutes later she was at Emily's room, \"Emily, Emily honey.\"\n\nI watched from the hallway.\n\nAngie whispered, \"Emily you and I and daddy are going to see Caprice. She's in trouble and needs us,\" I heard her add, \"she needs your daddy.\"\n\nGod I felt good! I liked the sound of that, daddy the hero.\n\nEmily was wide awake, \"She's not hurt?\"\n\nI heard Angie murmur, \"No Emily, she's just scared and alone. We're going to be her rescue party.\"\n\nEmily was up and on the side of her bed, my old bed, \"I'll get dressed. I'll pick out a stuffed animal for her.\"\n\nWarmth seemed to permeate the whole house. I felt like I was in some stupid Hallmark movie. \n\nAngie graced her daughter with a soft smile, \"That's my girl.\"\n\n\n\n++++++++++\n\nIt took us about a half an hour to get organized and packed. I decided on the Lexus; that way Angie, though she still didn't have her license, could give me a break every once in a while as we drove. We got the Motel's location on the GPS, and we were very nearly on our way when the phone rang again. It was Caprice again.\n\nAngie got the phone, \"Yes?\" Caprice asked to talk to me again.\n\nI got the phone.\n\n\"Hello Cayden?\"\n\n\"Yes?\"\n\n\"I just wanted to say; you don't have to come if you don't want to.\"",
        "I sighed, \"I want to.\"\n\nCaprice replied, \"You're sure?\"\n\n\"I'm sure.\"\n\n\"You're not mad?\"\n\n\"No I'm not mad.\"\n\nShe whimpered, \"You don't have to if you don't want to.\"\n\nI told her, \"You're my sweetheart. I want to.\"\n\n\"Well, OK.\"\n\nI asked, \"Anything else?\"\n\nShe answered, \"No, I just...\" \n\nI told her, \"We love you. I love you. We're coming. I'm coming.\"\n\nShe sniffed and then answered, \"I just wanted to be sure.\"\n\nI replied again. Maybe I was a little gruff, \"Don't worry and don't be stupid. I'm on my way. Whatever it is I can fix it. I'll take care of it. Then I'm bringing you home.\"\n\nShe sniffed again, \"OK, I'll wait here.\"\n\nI hung up the phone.\n\nAngie asked, \"What was that about?\"\n\nI shrugged, \"Caprice is all over the place. She needed to be reassured.\"\n\nAngie grinned, \"You sure did that.\"\n\nI laughed. At last we were on our way.\n\n++++++++++\n\nIn Rochester two old people talk.\n\n\"I swear Katie I can't handle any more of this.\"\n\nKatie looked at her husband. Once he was a tower of strength, a mountain of a man, but since their girl had disappeared she'd watched him slowly die. What she saw in the big old lazy boy now was a shadow, a slumped over feeble shadow of the man she remembered, \"She's here Evan. I saw her.\"\n\n\"If what you say is true, and mind you Katie I don't believe you, not for a minute, I still have no idea what to do.\"\n\nKatie replied, \"We could call around; call all hotels and motels. See if anyone's used the name Fischer, or if anyone who fits her description is registered.\"\n\n\"Then what Katie? First, do we even really know what she looks like now? Then even if there was someone who looks like her or who's used the name Fischer then what? Do we go and confront her? What if she runs away? Then what?\"\n\n\"Then what do we do Evan?\"\n\n\"I don't know. I just don't know. Oh Katie, I wish I was dead.\"\n\nKatie stumbled over to her husband. The sighting had nearly killed her, but she knew it was her Lauren. Her daughter was alive, and she was somewhere nearby. If she'd come this far, then maybe...,\"OK, Evan; we'll wait. Let's pray.\"\n\nEvan got up and knelt on the floor. He couldn't remember how many times he'd prayed like this. He knew it wouldn't do any good, but...\n\nTogether the two tired old people knelt on the threadbare carpet and prayed, \"Dear Jesus...\"\n\n\n\n++++++++++\n\n\n\nSomewhere in southern New York a freshly fueled Lexus pulled into a MacDonald's for a food and a pee break.\n\nSitting across from Cayden's empty seat with Emily beside her Angie took a napkin and wiped her daughter's cheek, \"How did you get to be such a messy eater little girl?\"\n\n\"Mommy, how long before we get to see Auntie Caprice?\"\n\n\"Not long honey. Oh look here comes Cayden,\" the two girls watched as Cayden strolled out of the men's room, and walked to where they were seated.\n\nI got over and stood beside Emily, \"You two go to the bathroom, and did you get something to eat?\"\n\nAngie flipped me a fake frown, \"Sure took you long enough.\"\n\nI smiled, \"Well sometimes a man's got to do what a man's got to do.\"\n\nEmily held up a bag, \"Mommy bought you a burger, a coffee, and a small fries just like you wanted.\"\n\nI took the bag and coffee and spoke to Angie, \"You drive while I eat.\"\n\nThe three tired travelers all got up and started back out toward the Lexus.\n\n\n\n++++++++++\n\n\n\nIn a quiet motel room just outside Rochester a frightened woman sat by the telephone. She checked the clock. It had only been an hour since she'd last called Cayden. She wondered; should she call again? She'd been calling almost every hour since she first showered. She picked up the phone and tapped in his cellphone number. It only rang twice before Cayden answered.\n\nHe spoke very calmly and reassuringly, \"Hi sweetheart. We had to stop for a pee, but we're back on the road. We're in New York so it won't be long now.\"\n\nCaprice answered, her lower lip a quiver, \"I peed too. Hurry, please hurry.\"\n\nCayden responded in a light hearted manner, \"I don't know who's more impatient you or Emily. Why don't you wash your hair again? Tell you what braid it into a ponytail. We bought some ribbon at a convenience store; we'll put a bow in it when we get there. You have clean clothes?\"\n\nCaprice replied with an unseen nod of her head and an answer, \"I have that green blouse you like and I have a pair of slacks.\"\n\nHe chuckled. It was fake, but he wanted to keep her mind occupied, \"God I love you in that blouse. Take your time, but start to tidy yourself up. We'll all go out to eat when we get there.\"\n\nShe answered, \"I'm not hungry.\"\n\nHe looked at Emily who was comfortably seated in the back in her safety seat and laughingly spoke into the phone, \"Don't forget who you're talking to. This is 'Farmer Cayden'; you remember your dumb hick farmer guy? Well how're you going to grow up and be a big girl if you don't eat? You said yourself just a few nights before you left you were, you know,\" he talked in a lower tone so Emily wouldn't hear, \"fertile. What if you've got a bun in the oven?\" \n\nEmily heard that, \"Is Caprice cooking something?\"\n\nAngie looked in the rearview mirror, \"No honey, Cayden just made a stupid joke,\" she frowned at Cayden.\n\nOn the other end of the phone Caprice could be heard asking, \"What's going on?\"\n\nCayden responded, \"Nothing, Emily just heard my comment about the oven.\"\n\nCaprice said, \"Well I'm still not hungry.\"\n\nCayden answered, \"Do you want me to spank you?\"\n\n\n\n\"You wouldn't.\"\n\n\"What, put you over my knee and spank those beautiful cheeks till they turn pink?\" \n\nCaprice almost giggled, \"OK, I'll eat.\"\n\nCayden replied, \"Now go and wash your hair. I want to see a braided ponytail when I get there,\" he flipped his phone closed.\n\nCaprice put the motel phone back in its slot. She smiled, but she was still nervous, she was still scared, but she felt better. Cayden was coming.\n\n++++++++++\n\nAs the car speared its way through the beautiful New York countryside I glanced over at Angie, \"I've never heard her quite like this.\"\n\n\"Me neither,\" was Angie's reply, \"She's always been the one in control.\"\n\nI checked the speedometer, \"Don't drive too fast. Remember you don't have your license,\" I went on about Caprice, \"Once we were out in the truck, out in the field; she tried to run away. When I caught her she just went limp. She clammed up. I mean it was like she just disappeared. It scared me.\"\n\nAngie checked for traffic in the rear, \"She's been through a lot Cayden. She's had it rough. You recall that girl who'd been kidnapped and held prisoner all those years? I'm sure we don't know the half of it.\"\n\nI scrunched up the hamburger and French fry papers and stuffed them in the bag Emily had handed me, \"That girl remembered who she was. She remembered her past. Caprice has blocked everything out.\"\n\n\"Yes, I remember,\" replied Angie, \"We've got to face something here. In spite of what we've seen with Caprice; she's not the tough little alley cat we think she is. She's a frail little kitty. I don't want to get her back just to lose her again.\"\n\nI smoldered, \"Get her back, lose her; I know this. When we're done here she's coming back home. If I have to I'll build her parents a house. I can sell some of the lots along the river. Hey maybe while we build it they can move in with your mother?\"\n\nAngie looked through the increasingly dirty windshield and espied a turn off, \"I'm pulling in. I want you to drive a while.\"\n\nI grinned, \"What are you going to do?\"\n\nShe glared at me, \"I'm going to spend the rest of trip pinching you.\"\n\nI laughed, \"I'm sorry about the crack about your mother. Don't worry; we'll look after her too.\"\n\nAngie turned into the off ramp that led to the rest area.\n\n++++++++++\n\nThe rest of the drive was completed in silence. Both Angie and Cayden had concerns they needed to grapple with.\n\nAngie knew getting Caprice to come home wouldn't be as easy as Cayden thought. She was no mind reader, but she knew enough to know that Caprice had decided to step aside so Cayden could remarry her. Caprice wanted to be noble; well that was bullshit. She couldn't allow it. Oh she loved Cayden with all her heart, but she loved Caprice too. Cayden was right; Caprice needed to come back, but she'd have to come back as the future Mrs. McLeish. It would be tricky, but she'd figure it out.\n\nCayden realized how right Angie was. Caprice's life so far had been a charade, a fantasy. When she finally had to face her parents her fantasy, that phony persona she'd more or less invented would come face to face with her reality. What would that do to her? No, she wasn't tough, she wasn't strong, she was brittle; the least misstep could destroy her. They'd have to be careful. \n\n\n\nHe knew what he had to do. He figured since Palm Sunday night, Jesus that was like a lifetime ago, she'd been wrapped, no swaddled, in a protective cocoon. He'd done that. With her trip north she'd stepped out of that protected shell. He was no genius, but he guessed if all her terrible realizations didn't overwhelm her right away he might be able to re-embrace her; sort of save her again. \n\nHe shivered. He felt like somebody had just walked over his grave. Now who was living in a fantasy?\n\n++++++++++\n\nWe pulled into the parking lot of the Motel Six. I spotted her car. I eased into a spot nearly beside it, \"Angie you and Emily go inside first. I spotted a Hampton Inn back a ways. We'll need more space. I'm going to call and see what they've got.\" We'll need a bigger room, besides I want to change Caprice's immediate environment a little bit.\" \n\nAngie nodded. She awakened Emily, and got her out of her car seat, \"Come on baby, we're here.\"\n\nEmily looked up excitedly, \"We're at Caprice's?\"\n\n\"Sure are,\" carrying her on her hip Angie lumbered to the door they figured was Caprice's. She knocked.\n\nInside Caprice had heard a car pull up. She checked her face in the mirror. When she heard the knock on the door she was ready. All smiles she opened the door. She saw Angie and Emily, her smile evaporated, \"Where's Cayden?\"\n\nAngie pointed to the trunk of the Lexus, \"He's on the lot calling the Hampton Inn. He thinks we'll need a bigger room.\"\n\nCaprice wasn't listening; she pushed past Angie and Emily and raced to the rear of the Lexus. When she got within two feet she stopped. Cayden was on his cell phone. He looked serious; fear overtook her!\n\nI looked over and saw her. I smiled. I could see the relief flood over her face. She rushed into my arms, \"You came.\"\n\nI held the phone in one hand and whispered in her ear, \"Of course silly,\" I squeezed her tight to my chest while I talked into the phone, \"That's right we want the big one, two king sized beds, and a fold out sofa. You say it has a microwave, a refrigerator, and an oversized bathtub right? Good we'll take it. We'll be there in a half an hour,\" I read off my VISA card's numbers and hung up. Flipping my phone closed I took Caprice in my arms, \"Gee I've missed you.\"\n\nShe pressed her face against my chest and started crying, \"I'm scared Cayden. My mom, she saw me. I'm afraid. I left them. I don't know. I'm so scared. Cayden, they hate me. I know it.\"\n\nI pulled her head up and kissed her, then I put a finger to her lips, \"Look,\" I pointed to Angie as she held Emily, \"Does Angie hate Emily? Does Mrs. Bradford hate Angie? Not on your life. Parents aren't like that. Look darling we're here now. I'm here now. Let me take care of this. I guarantee; everything will be fine.\"\n\nCaprice wrapped her arms around me; she squeezed as tightly as she could. She pressed her face back against my chest; it felt good. She didn't say anything. She didn't have to; I was here, with her, it would be OK.\n\nThe four of us went inside. I told Angie, \"Pack up our girl's stuff,\" I looked around and found Angie's purse, \"now where's that ribbon?\" I found the piece of green ribbon and pointed Caprice toward the small sofa, \"Sit over here. I need to fix your hair.\"\n\nCaprice, all smiles, skipped over, sat down, and patiently waited while I fluffed her ponytail and tied the ribbon in a big bow. I leaned around, \"Now that's better. I saw an IHOP on the way in. I have a hankering for some pancakes and fried eggs. We'll pick up some microwave popcorn, and then slip over to the Hampton Inn. I want to watch a movie,\" It didn't happen exactly that way, but I was close enough.\n\nWhile her mom had been packing Caprice's stuff, Emily had been watching her dad and her Auntie Caprice, \"Can I choose the movie?\"\n\nCayden grinned, \"Nothing scary.\"\n\nEmily whooped, \"Oh Daddy.\"\n\n\n\n++++++++++\n\nThirty minutes later Cayden had them checked out of the Motel Six. He and Caprice got in her car and drove to the Hampton Inn. Angie with Emily followed in the Lexus. He checked them in while Caprice moved to the Lexus. Shortly thereafter they were on their way to the IHOP.  \n\n++++++++++\n\nOnce they got to the IHOP they were seated pretty quickly. Angie and Caprice both got omelets. They got a smaller omelet for Emily. I got the full deal; three fried eggs, pancakes, hash browns, and sausage patties. I was hungry.\n\nWhile they were eating Angie put down her fork and looked squarely at me. She popped the platinum question, \"So what's the plan?\"\n\nI kept shoveling food in my mouth while I talked; but I couldn't miss the woebegone look in Caprice's eyes, \"Tonight we're watching a movie. Tomorrow I want the three of you to go shopping. Take the Lexus and drive north. I hear the ritziest malls are on the north side of town. I want you girls to take the credit card and buy out the stores.\"\n\nAngie was a little confused, \"We really don't need anything. Why should we go shopping?\"\n\nI put down my fork, \"That's a first; three beautiful women are told to spend money, and they don't know what to do. I said I want the three of you to spend some money. Shop, buy toiletries, skirts, dresses, blouses, you know, the works.\"\n\nCaprice was white as a sheet, \"What are you going to do?\"\n\n\"I'm going to visit some parents.\"\n\nCaprice looked sick, \"Shouldn't I go too?\"\n\nI picked my fork back up and scooped up some more egg, \"I'll tell you when, and when I do we'll all go together.\"\n\nCaprice looked horror stricken; she had nothing to say.\n\nI didn't let it lapse, \"I'm looking at my three women, and make no mistake. You're all mine. No one's alone at this table. All for one and one for all is what I always say,\" it occurred to me that only a few months ago I was a complete loner. I would never have said anything like that. Now I was the provider and protector for three beautiful women. I liked the feeling. It was like...destiny. Like God had this plan...sort of...I guess...maybe.\n\nI added, \"I'll go first, you know, pave the way; then we'll all visit our parents together,\" I made sure to place extra emphasis on the word 'our'. I wanted to make sure Caprice understood she was a part of something. She wasn't alone, and I was determined she'd never be alone or feel alone again. I made a big mistake when I sent her north alone; I wouldn't make that mistake again. \n\nWe finished dinner. As we got up to go I looked over at Caprice, \"You leave the gratuity dear.\" It gave her something to do. She left a Hamilton.\n\n++++++++++\n\nBack at the Hampton Inn we watched something dumb, a cartoon about a mermaid. Actually it wasn't half bad; Emily liked it. I mean it was about a mermaid who became a person; like a mermaid person who became a regular person. When it was time for bed we put Emily in the king sized bed in the center. I opened out the sofa. Caprice and Angie shared the other big bed.\n\nI lay awake listening for the soft even breathing typical of people at rest. Once I was sure all my girls were asleep I rolled on my side facing them and drifted off. Tomorrow would be an important day. I thought about Aunt Maggie, Aunt Olive, and Uncle Mitchel and Johnny. I felt like I was ready. Maybe the old people hadn't done such a bad job with me after all? I'd find out in the morning.\n\nI was foolish. Just as I thought I could relax and sleep somebody stealthily slid in the sofa bed beside me. It was Caprice. She moved as close as she could; so close I found it hard to move or breathe. I felt her as she curled up in a tiny fetal ball. In the dim half-light of the motel room I saw she'd slipped her right thumb in her mouth. I reached over, pulled her thumb and hand away. I moved it down to her breasts. I pulled her closer, my chest to her back and whispered, \"Sleep tight sweetie.\" I felt her body relax against mine.\n\nFive minutes later I saw Angie climb in on Caprice's other side. Maybe two minutes after that I got a glimpse of Emily standing by the sofa bed, \"Hey, where do I sleep?\" I backed away so that I was on the extreme edge of the sofa bed. Caprice must have been awake; she backed up with me. Emily climbed over Angie and settled down in the middle. All huddled together we finally got to sleep. \n\n++++++++++\n\nIt's all Cayden.\n\nI'd set the room clock for 9:00, and I didn't let anybody do much stirring before that. Emily peed, Angie dressed, and poor Caprice just stared at me. I told her, \"Caprice don't fret. I've got everything under control. I want all you girls to make a day of it. Let me do my job.\"\n\nShe nodded, but the look on her face showed me how scared she was. I kept at her, \"Caprice I want you to drive. Stay clear of where I'm going, and I don't want any cell phone calls,\" I laughed, \"Don't call me, I'll call you. You guys go spend some money. Have a good lunch. Caprice give me the keys to your car. You girls take the Lexus.\" \n\nI got the girls off, and got ready. I slipped on a pair of jeans, a white button down shirt, some dark socks, and a pair of Rockport shoes. I wanted to look comfortable, but not too formal or too relaxed. My moment had come.\n\nI took my time driving to the Fischer's. I got there a little after 11:00. I pulled to the curb in front of their house and got out. I looked around. It was an older house, a small rancher, a lot like the Bradford's. The lawn looked good; the hedges needed to be trimmed. They had one of those porcelain Dutch Boy ornaments in the front garden. It looked kind of old. I bet it'd been there since before Caprice left. They had an old front porch swing. I thought of the old John Anderson song 'Swingin'. I sort of checked around the back. Her child's swing set was still there; that sort of choked me up. When I was a kid I'd always wanted one but had been afraid to ask. I wondered if I had asked; I bet they'd have put one up.\n\nWell the time had come. I walked up to the front door. I rang the bell. I didn't have to wait long. \n\nAn older lady opened the door. She was maybe 5'4\". She looked frail. She had pretty skin, white, clear, good complexion and she had soft green eyes, damn green eyes. She looked at me; she looked a little frightened, \"Hello, may I help you?\"\n\nI asked, \"Is this the Fischer residence?\" I heard someone from inside call out asking who it was.\n\nThe old lady answered, \"Yes this is the Fischer residence.\"\n\nI held out my hand, \"My name is Cayden McLeish. I'm here about your daughter Lauren. May I come in please?\"\n\nThe old lady looked at me, \"Lauren?\"\n\n\"Yes, may I please come in?\"\n\nShe stepped away from the front door and opened it wider. She looked back inside and spoke to someone, \"There's a man here who knows something about Lauren.\"\n\nI stepped inside.\n\nA very old man approached me, \"You know my daughter?\"\n\nI replied, \"Very well. May I sit down?\"\n\nThe old lady moved toward a sofa and tried to straighten an already straightened set of pillows, \"Yes please, sit here.\"\n\nThe old man took up a seat in a tattered lazy boy. The old woman asked, \"Can I get you something, some coffee? A muffin?\"\n\n\"Some coffee would be nice,\" I figured anything that would ease the tension.\n\nThe old man looked at me, and repeated himself, \"So you know my daughter?\"",
        "I repeated my answer, \"Yes, I know her well,\" I glanced around their living room. It was like a shrine. There were pictures of Caprice, or I should say Lauren everywhere. I decided to wait till the old lady came in with the coffee. I didn't have to wait long. She came with a tray. The tray and stuff was actually an old tea set. It held a full cup of coffee, some cream, and a few sugar cubes on a separate dish.\n\nShe looked at me, \"I forgot to ask what you liked with your coffee.\"\n\nI took the cup off the tray and poured in some cream. Again I said, \"I'm Cayden McLeish. I'm from the lower Eastern Shore of Maryland. Have you ever been there?\"\n\nThe old man answered, \"Ocean City, we've been to Ocean City,\" he looked pained, \"Please tell us about our daughter.\"\n\n\"I'm sorry. I don't mean to hurt or upset you. I can only imagine what you're going through; what you've been through.\" \n\nThey both just nodded. The old man was visibly shaking; he looked like he was ready to cry. His hands were like palsied. I wondered if he had MS or something. His hair was gray and real thin.\n\n\"Mr. Fischer, Lauren, or Caprice as we first came to know her, isn't far from here. She's with my ex-wife and my daughter,\" I looked at the old lady and tried to smile, \"You saw her the other day. She told us. Mr. and Mrs. Fischer your daughter has been through a great deal. She's suffered terribly,\" I looked back at the old lady, \"When she saw you she panicked. She feels guilty, and she's afraid. That's partly why I'm here. Before I go get her I'd like to tell you what I know about her story. Would you please let me do that?\"\n\nThe old man was trembling, \"Who is she to you?\"\n\nI cupped my hands in front of my chest, \"She's someone I met this past Palm Sunday. Actually I bought her. Since then I've come to love her. I guess you could say I've fallen in love with her. That's why I'm here. She's scared. I love her. Won't you please let me tell you what I know?\"\n\nThe old lady was very quietly weeping, \"Yes please,\" the old man looked grey. I began my story, \"I'd gone to Pennsylvania for a card game. Your daughter was serving. She was a prostitute. She was supposed to tell them my down cards; she got them wrong, and they were going to murder her. I offered to buy her, and they agreed. I brought her home and...\" \n\nFrom there I went on and told them what I knew; how she been passed from pimp to pimp, how'd she been misused, and how she'd suffered. I told them about my time with her, how she bonded with my ex-wife and daughter, how she'd survived her years of torment and become a steady fixture in my home town. I told them how she'd earned the respect and love of dozens of people, how she attended our church, and how she'd even joined the choir. I told them what a wonderful person she was, and how much I loved her. I also told them about the veneer of toughness she'd first evinced and how she'd come to shed it. I was especially sure to explain to them how frail my ex-wife and I believed she was, and how concerned we were that her reunion here might trip her up.\n\nIt took me nearly two hours to get it all out. By the time I'd finished I was crying. I told them, \"So you see we're kind of scared. She's been through so much, but she's really fragile right now. She's afraid you might not love her. What I mean is that she's really scared. I mean terrified. She feels guilty. We've all got to be careful. We love her. I love her. I know you two love her. I'm just afraid we all might lose her; she's skirting the edge.\"\n\nThe old man just sat there. I thought he was going to have a stroke or something. The old lady was weeping, but she had a better grip. She asked me, \"What do you think we should do? What do you want us to do?\"\n\nI took a sip of my coffee. I looked around the living room, \"First I'd put things back to as close to the way they were before she left. This place looks like a shrine. I think it will scare her to death. Just make it look like it was twelve years ago. Then don't get all dressed up or anything. Stay casual and try to relax.\"\n\nI watched them. I think the old man was catching on. He reminded me of Caprice, or Lauren I guess. He looked like someone who needed to be busy. I told them, \"I'd like to bring her over tonight. Fix one of her favorite foods. I mean don't fix her absolute favorite, you know don't got way overboard, but maybe something like her second favorite. Do you have any spare bedrooms? Angie, that's my wife, Emily my daughter, and I think we should all stay here tonight.\"\n\nThey looked back and forth at each other. The old man said, \"We have one spare bedroom.\"\n\n\"OK, Angie and Emily can sleep in there. I'll start out here on the sofa,\" I added, \"but don't be surprised if Caprice, I mean Lauren, asks me to sleep in her room with her,\" I held up my left hand, \"it wouldn't be that kind of sleep. I mean I'd be there only if she asked me, and then only so she won't be afraid. Believe I would never abuse your hospitality,\" then I added a little sweetener, \"Who knows she might want her mom with her.\" \n\nI couldn't seem to shut up. Imagine old laconic Cayden not being able to stop talking. I mean here I was explaining and persuading and soothing and all sorts of considerate stuff. I added, \"I know this has been awful for you; it's been awful for her too, but it's almost over.\"\n\nThe old man just kept crying. The old lady was crying too. I started to cry as well. I'd been crying anyway. We all ended up in the center of the living room hugging one another. I said, \"God I already love you people, but I don't even know your names.\"\n\nThrough her tears the old lady murmured, \"This is Evan and I'm Katie.\"\n\nI blubbered, \"Katie, Jesus. I mean Jesus, what a great name,\" I stumbled and fumbled, \"I mean Katie's a great name.\"\n\nIt took us a while, but we finally got it together, I got their home phone number, and told them I'd call before we left. They asked where we were staying. I told them the Hampton Inn but please don't try to call or come over. I told them I wanted to get this right. \n\nThen just before I left the old man hammered me, he asked, \"Would you like to see her room?\"\n\nI was stupid; I didn't give it a thought. I answered, \"Sure.\"\n\nThe old people walked me back to her room, the room where she grew up. I was overwhelmed. I mean swept away.; caught up in a whirl pool and just pulled out to sea. Baby dolls, Barbies, stuffed animals, wall posters, a half a wall of books-all really good stuff too, everything you'd expect to find in a girl's room. They had her high school yearbooks. \n\nI saw countless pictures; all pictures highlighting a child's transition from toddler to beautiful young woman. They had a picture of her beside a bicycle; a Christmas tree was in the background. She looked maybe six; she'd gotten a bike for Christmas, a red one, a Shelby. Jesus it was breathtaking; she'd been a Brownie, a Girl Scout. In one picture she was wearing a tutu; her arms were out front in one of those circle things, fingertips just touching. There was a picture of her from high school; she'd been Homecoming Queen. She'd been a majorette! Holy Christ Almighty Lauren had been her graduating class's salutatorian! It was awful; she was so beautiful, so innocent, so pure! I couldn't stand it; I slumped down on her bed.\n\nThat's when I saw it; the most devastating thing of all. She'd had a teddy bear. Fuck every kid had a fucking teddy bear. I went over and picked it up. It was all worn and frayed. Most of the fur had been worn off. One of its eyes was partly out. This I knew was her greatest treasure; this was the thing she cuddled with when she was a little girl, nothing could match it. \n\n\n\nI remembered when I was a little boy. I'd had a teddy bear too. I loved that fucking hunk of dirty cloth. I remembered how once I'd misbehaved. I think I was seven at the time. My grandmother, I mean great grandmother, told me I had to be punished. She told me to go get the one thing I prized above everything else. Aunt Maggie wasn't there that day. Of course I went and got my teddy. The old woman took my teddy bear and she stuffed it in the woodstove. There was a fire burning. She opened the flue and made me watch as the fire consumed my little bear. I never forgave her for that. I looked at these two old people; I knew they would have never put Lauren's teddy in a fucking fire.\n\nJesus Caprice had owned a teddy bear. I cried. What a stupid fuck I was; crying over a teddy bear. I couldn't stand it another minute. We left her room. I felt so sorry for these people. Christ, I don't know why, I started to feel sorry for myself. She was their life, their whole everything. Without her they'd been empty, completely empty for twelve years!\n\nFinally I kissed Katie's cheek, and then I shook Evan's hand. As I left I just couldn't talk, I whispered, \"Just a little longer.\" They both started crying again. I hugged them both again. Then I hurried to Lauren's car, got in, and started back to the Hampton Inn. I kept thinking, 'Jesus that was tough, but damn, the toughest part was still to come'.\n\n++++++++++\n\nWhen I got back to the Inn I saw the girls hadn't returned so I sat down in the restaurant and ordered a sandwich and an iced tea. I couldn't come to grips with all the things that were swirling around in my head. \n\nFirst, I couldn't quite fathom who it was I was in Rochester to protect. I'd met a woman named Caprice. She'd been a hardnosed prostitute, a survivor, a tough cookie. Over time she'd become someone else; a kind and decent person, a person people in my hometown had grown to respect and care about. Today when I was at her parent's I got glimpses of yet another person; an innocent young girl, a girl named Lauren, someone who'd lived an almost idyllic life but who'd made a horrific mistake. Somehow I knew the woman who we'd take to the Fischer's tonight would metamorphose again. \n\nThat was the second thing. Would the former whore Caprice and the one time innocent Lauren congeal into someone who'd still see me the same way? I broke into a cold sweat; would my efforts at helping this woman, a woman I loved beyond all understanding; see me as a part of something she'd rather not remember. By helping her would I be losing her? It scared me shitless. \n\nI thought about my high school English teachers. There was my senior year teacher, a woman named Mrs. Wickwire; she had a fetish for Dickens. Christ we read 'Great Expectations', 'Oliver Twist', and damn it we had to read 'A Tale of Two Cities'. That last one was a real ball buster. I mean I really got into the Charles Darnay-Sydney Carton thing. I remember thinking what an asshole Carton was. All he had to do was sit back and let the French put an end to Darnay and he, that is Carton, would get the girl and everything that went with her, but what did the fucked up fool do? The stupid shit switched places. Darnay walked and Carton got the axe. Well hadn't I been doing the same thing?\n\nIf I had folded up the police report; kept Caprice's past in the past I'd have been home free. I'd have had the girl of my dreams, I'd have had my ex-wife, and I'd have had my daughter, but no, not me, I had to be the noble fucking asshole. \n\nJesus Fucking H. Christ! Tonight I'd walk the steps, Caprice would die, Lauren would be reborn, and she'd look at me and be reminded only of her twelve years of suffering. I had nobody to blame but myself! I'd become Sydney God damn mother fucking Carton! \n\nThe thought of what I'd done made me want to break something, but there was nothing I could do about it. Not now, not anymore. I'd have to play the charade out to the end. All the worst, all the worst things about my life and my upbringing were coming back to haunt me. I just bet that mean son of a bitch, my long dead father, and that woman I'd never met, my damned dead abortion wanting mother, and my hateful great grandmother they were all in hell somewhere laughing at me. Fuck! Who was I to think, even for a moment, that I was entitled to be happy, I mean truly happy? \n\nI reflected on that old Meatloaf song 'Two out of Three ain't Bad'. Two out of three wasn't bad; it was awful! I wanted all three, all three damn it! I knew I wasn't going to get it. Yeah shit; the Lord giveth and the Lord...well damn God! God damn God! I hate God! \n\nI looked through the restaurant window and saw the Lexus pull up. The girls got out. I quaffed down the last of my, by then, tepid tea. I wished then that I smoked or liked whiskey. If I smoked I could've smooshed out a butt. If I drank I could have downed the last of a whiskey. Not me, I'd be sober as a judge. Yeah, I'd be going to the guillotine all bright eyed and bushy tailed, no drug would ease my pain.\n\n++++++++++\n\nI met the girls on the sidewalk. Emily ran up to me, \"Guess what I got?\"\n\n\"I don't know; what'd you get honey?\"\n\n\"I got a whole bunch of clothes!\"\n\nI grinned, \"Now wait; did you get a bunch, a big bunch, or a whole big bunch?\"\n\nShe laughed, \"I guess a whole big bunch.\"\n\nI laughed too. I hadn't lost everything. I grinned at Lauren. I thought I better start thinking and calling her Lauren from now, \"How'd you do?\"\n\nShe smiled pensively, \"I bought a dress, a purse, and shoes for this evening.\"\n\nI looked at Angie, \"And you?\"\n\nShe shrugged, \"I got a headache; a whole big headache.\"\n\n\"Oops, sorry,\" was my reply.\n\nWe went up to our room, or better, the girls went up while I lugged up a dozen bags.\n\n++++++++++\n\nOnce we got inside I gave them the low down. I looked at Lauren, \"I met your mom and dad. They're really nice people, but they're scared. They've really missed you Lauren. It's been terrible for them. Right now they're just afraid you won't love them anymore.\" \n\nI could see her eyes widen. I wondered if she thought they might be afraid she wouldn't want them. I added, \"We're going to eat and stay overnight at their house.\"\n\nLauren was sweating, \"Then what?\"\n\n\"I don't know; we'll decide tomorrow.\"\n\nShe got real wide eyed, \"You won't leave me?\"\n\nI gave her my sternest look, \"Never, not a chance in hell.\"\n\n\"You promise?\"\n\n\"I promise. Lauren I'll never leave you,\" I think that might have calmed her down a little.\n\nAngie took her hand, \"We need you. He needs you. I need you,\" she pointed to Emily, \"She needs you.\"\n\nEmily hadn't been listening; she started tearing into the packages, \"Come here Dad; let me show you what I got.\"\n\n\n\n'Gee,' I thought; 'I went from Daddy to Dad in five minutes.'\n\n\n\nWe all got dressed and made ready for the drive to the Fischer's. Angie wore a simple dark blue sheath. She dressed Emily in a cute little jumper. I changed into a pair of khakis and a blue button down. Lauren, I'm still trying to remember to call her Lauren, settled on a beige blouse and a pair of dark brown slacks; both went nicely with her brown loafers and dark brown clutch purse. She'd dabbed on a touch of makeup. I felt weak looking at her; she had the biggest greenest eyes, she had eyes like that Afghan girl who'd been on the cover of National Geographic.\n\nWe were ready; we got in the Lexus and took off. The drive only lasted about twenty-five minutes, but it seemed a lot longer. We got there. I pulled in and parked on the street. I got out and helped all the girls out. \n\nAngie and Emily started straight for the front door. Lauren held back. I took her hand, \"Come on sweetheart. You can do this,\" She looked scared. I was a little afraid she was going to run away. As we inched our way up the sidewalk; Angie and Emily first, me third, and Lauren hanging back hiding behind me someone opened the front door.\n\nIt was her mom. She stepped out on the small porch. She was in an old house dress she'd covered with an apron.\n\nLauren saw her and froze. Though it seemed like a year it was only a few seconds. Then Lauren let out her breath and murmured, \"Oh mom.\"\n\nThe old lady had tears in her eyes. She sort of held out her arms and kind of clasped her hands together at the same time. I heard her when she said, \"Tater tot.\"\n\nChrist that got me. Tater tot must have been the pet name they used for her when she was a toddler. Lauren heard her and started walking then running toward her mom. She cried out, \"Mom...mommy!\"\n\nThey embraced right there on the porch. I looked at Angie. She felt the same way I did - utterly and completely overwhelmed. \n\nThere they were, mom and her little girl, hugging, and crying, and then kissing. Talk about a reunion, a homecoming. I never saw anything like it. There'd been a hell of a lot of tears lately, but when Lauren opened up it was like Niagara Falls. \n\nThen her dad stepped out. Jesus, if the first sighting between mom and daughter was emotional, this was the 'mother of all reunions'. I thought they were all going to die. I thought I was going to die. I watched as mom and dad wrapped their arms around their daughter and led her inside. Lauren, Caprice, whoever, was utterly, I mean completely unrestrained. She was somebody's little girl all over again. \n\nThey'd completely forgotten about us. Angie, and Emily, and I were all left outside. Then, almost like we were an afterthought the old man stepped back and beckoned us in. Honestly, I didn't quite know what to do. Should we just leave? Should we go in? Tell the truth I was a little put off. Then Lauren came back out and took my arm and Angie's hand. She'd stopped crying, but tears were still running down her face. She led us inside.\n\nWe got inside and Lauren, still with her arm wrapped around me and her other hand holding Angie's said, \"Mom, dad this is Angie and Cayden. They're my family.\" \n\nShe smiled at Emily who'd been kind of stunned by everything. Then she kissed Angie's cheek, \"This is Angie. She's my sister,\" I caught that. She didn't say 'she's like my sister or she's sort of my sister, she said she's my sister', like she was the real thing. Well kick me in the balls; I guess she was. Then she leaned down and kissed Emily, \"And this is Emily, and she's my little girl.\"\n\nI was holding my breath. I was scared out of my wits. Was I Charles Darnay or was I Sydney Carton? That's when Lauren let go of Angie's hand, she stepped a little toward me, she took both my hands in hers and said, \"And this is Cayden McLeish. He's this big dumb farmer who saved my life and made me fall in love with him,\" She smiled at her mom and dad, \"He's going to marry me and then together we're going to make all your grandchildren.\"\n\nI couldn't help it. The last several days had been so stressful. I'd just been crying with the Fischer's, and now this? I was Charles Darnay! I was Pip! I was Matt Damon! Brad Pitt just came in second! I was every good guy I'd ever read about in every old book Mrs. Wickwire ever made me read! I was the hero! I got the girl! I was the luckiest man alive! I cracked. I'd cried before, but this time...well...\n\nI looked at Angie. She was smiling. She said, \"Lauren and I talked about things earlier today while we were shopping. We figured it this way; I already have Emily, I know I have you. No matter who cuts the cards I have you. But Lauren loves you too. So we decided you should marry her,\" she grinned at Lauren and chuckled, \"that way we get to keep her down on the farm.\" Yeah, we decided; you're big and dumb, and backward, and shy, and you certainly can't fight, but you're who we want. Both of us,\" she glanced down at Emily, \"No I mean all three of us,\" She smiled back at me, \"So you'll just have to build a bigger house.\"\n\nI couldn't think of a thing to say. I just stood there like the big asshole I was and kept crying.\n\nLauren looked at her mom and dad. She'd weathered the storm. My Caprice was back! She was a strong one! She told her mom and dad, \"We can't take care of you if you stay up here. You'll have to move. We'll build you a house across from ours. Mom, dad you're going to love it down there, but you'll have to pitch in. We'll need you to help with the babysitting and stuff because I plan on having lots of kids.\" She looked at me and winked, \"You got a problem with that?\"",
        "Through my crying and my tears I managed, \"Anything you say.\"\n\n\n\nEmily interrupted, \"I'm bored. We should have brought Candy Land.\"\n\n\n\nThat's when Katie, Lauren's mom said through her tears, \"We have that game. I'll get it.\"\n\n++++++++++\n\nThe Denouement. \n\nThe days that followed were eventful. \n\nWe stayed a few days at the Fischer's. Angie, Emily, and I left first. Lauren and her parents followed a week later. \n\nWe built that extra house. We fixed up Angie's mom's house too. The Fishers moved in with us while we built something for them. At our house Angie and Emily took the room across the hall from the big bedroom. Every few days I was expected to disappear so Angie and Lauren could have their 'private time'. Every now and then I was expected to put in some time with Angie too. She wasn't after the sex; just the companionship. I didn't care; I did whatever made them happy.\n\nLauren and I did get married. Her dad performed the service. Pastor Cook helped. We didn't know it at the time but Lauren was pregnant. That was a while back. Since then we've had three kids, two girls and a boy. Lauren's not satisfied. She wants more. It's OK by me; the more the merrier.\n\nOh it wasn't all peaches and plums; we got Lauren some counseling. I got some too. I asked Angie if she wanted some; she said she'd rather have a Honda.\n\n\n\nOh by the way Del married Sally, and they've squeezed out a couple boys. I helped Del buy a farm down near Snow Hill just across from Assateague Island. Del brought in all these truckloads of good topsoil and started a blueberry operation. Our sandy soils just aren't suitable for he wanted to do. The poultry industry is big down here, but it's almost all chickens. Del's gotten himself into ducks; the restaurants down here all want his eggs and his grown ducks. I knew he had some good ideas. Sally's in college; says she wants to be a teacher. \n\nLauren, Evan and I go crabbing down to Del's once in a while. Evan never had Maryland steamed crabs before; says he loves them. I believe him; he eats enough of them. \n\n\n\nAngie's mom sold her house and moved in with us; she sleeps upstairs. My brothers and sisters, though I don't deserve it, all still seem to like me. Matt Devereau's still working at the library; still lives alone. Bernard Keith still meets his posse at the Wagon Wheel. They get drunk every Friday night. He's been arrested a few times. Barry found a nice girl from up Georgetown way and settled down. \n\n\n\nSo I guess it all worked out. I just hope we get enough rain this year; think I'll bring it up with the Lord Sunday. You never know; I think sometimes he listens.\n\n\n\nThere's got to be an epilogue:\n\nWell you see they all lived happily ever after; just like in all those Hallmark movies.\n\nThe end.\n\n\n\nI hope you enjoyed this story. If you didn't I'm sorry. If you did then I'm pleased. Regardless, remember to vote, and leave a comment if you feel inclined. \n\n\n\n\n\nCarvohi"
    ],
    "authorname": "carvohi",
    "tags": [
        "life goes on"
    ],
    "category": "Loving Wives",
    "url": "https://www.literotica.com/s/the-curse-of-the-scots-ch-07"
}
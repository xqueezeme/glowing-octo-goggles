{
    "title": "The Porcelain Soul",
    "pages": [
        "I.\n\n\"Let's go, dad!\"\n\nJake sighed and massaged his temples with his fingers as he pondered the stack of bills in front of him on the kitchen table. \"Just a minute, guys!\" he shouted back at his kids.\n\nHe had promised his boys that he'd take them trick or treating. \"Halloween,\" he said aloud. \"The end of the month already.\" Jake was still trying to figure out how to pay the bills from two weeks earlier.\n\nEver since his wife Cindy had died a year and a half earlier in a car accident, leaving him alone with their four adopted sons, Jake had gradually burned his way through their savings and sunken into debt. He just couldn't afford the mortgage and bills on a single income. \"I can't even afford to move,\" he thought.\n\n\"Dad!\"\n\nJake sighed once more and pushed himself away from the table. \"All right, I'm coming!\" He had to grin at the whoop of delight that came in response. \n\nHe followed the squeak of sneakers on linoleum coming from the kitchen and entered to find his unusual brood putting finishing touches on their costumes. He and Cindy had turned to adoption when they found out she was unable to have children. As a result, their family was an odd assortment that always got odd stares when they went out on errands. He smiled as he remembered the way Cindy would \"remind\" people that staring was rude \u2013 with a finger jabbing into their chests as she verbally berated them.\n\nCindy had been a real spitfire, and Jake had been attracted to her from the moment they met. A petite blonde with bright blue eyes and a dazzling smile, she was a stark contrast to Jake's dark hair and eyes and brooding nature. She had also been the sexiest woman Jake had ever seen, and he had proposed after dating her for only two months. Even now, Jake could remember the feeling of her firm, perky breasts and hard nipples as he caressed them with his hands or took them into his mouth. Despite her petite size, Cindy had also been able to handle his nine-inch erection with a vagina that felt like velvet and could embrace him to his fullest depth.\n\nNow Jake glanced around the kitchen at the costumes his boys had put together from things they had found around the house. He couldn't afford store-bought costumes, but the boys hadn't complained. Instead they took the challenge to heart, and created costumes on their own. Kwan, his eleven-year old Vietnamese son, had found Jake's old football uniform in the attic and had stuffed it with newspaper to make fake muscles. Boyd, his ten-year old freckled redhead, had used some of Cindy's old clothes and a clip- on earring to make a pirate costume. He'd even used a piece of charcoal to create fake stubble on his face. Jamal and Terrence were brothers, African-American, and his youngest children at nine and seven. Jamal had pieced together a rapper's outfit by borrowing his older brothers' baggy clothes and wearing some of Cindy's old costume jewelry as \"bling.\" Jake couldn't figure out exactly what Terrence was supposed to be, as he'd put on his swimsuit over a sweatshirt and sweatpants with flippers on his feet.\n\n\"Wow, you guys really look good.\" Jake complimented them. The boys all beamed at him.\n\n\"I'm Aquaman!\" Terrence shouted.\n\n\"Of course you are!\" Jake agreed with a chuckle. One mystery solved. \"Got your pillowcases for collecting your treats?\" They each held up a pillowcase. \"Now, you're sure you're not all too old for trick or treating?\"\n\n\"Dad!\" came the shouted reply.\n\n\"All right, let's go!\" Jake grabbed a bowl of candy off the counter and led the boys outside.\n\nAfter dropping the bowl of candy off with his next-door neighbor Mr. Ethan to hand out on his behalf, the boys settled into a blistering pace that had Jake panting to keep up. They went up one side of a street and down the other, pillaging the neighborhood of treats. Jake could have slowed the pace down a bit, but opted to indulge the boys' enthusiasm. \"Besides,\" he thought, \"the candies, cookies, and treats will help round out their school lunches for months. And for free.\" He hated that this last thought occurred to him, but circumstances were such that he had to think of any way possible to stretch their tight budget.\n\nHe nodded hello to the other parents as their groups passed each other on the street. He looked with envy at the couples with their children, feeling sharp pangs of loneliness. Jake's own parents had died many years back, and Cindy and the boys had become his entire world. He was lonely, and he was frustrated. He hadn't been with another woman since Cindy, and couldn't help but stare a little too long at some of the other mothers as they passed. His eyes sought out their tight, round asses as they bounced by in faded jeans, and he could scarcely keep from moaning at the sight of their erect nipples poking from behind their t-shirts in the cool autumn air.\n\nGradually, the deepening shadows of evening gave way to the stillness of night. Jake shivered with the chill even as he worked to keep up with his tireless brood.\n\n\"Guys, let's head back, okay?\" he said as he corralled them at the end of a driveway.\n\n\"No!\" \n\n\"Come on, Dad!\" \n\n\"Can we stay out, puh-lease?\"\n\nJake rolled his eyes at the begging. \"No, it's getting late and cold. We need to head back.\"\n\nThe boys clustered together for a brief moment. Kwan stepped forward as group speaker. \"One more block, Dad, okay?\"\n\nHe glanced around at their big pleading eyes and laughed. \"All right, one more block.\"\n\nWith a cheer, they turned the corner and trotted to find their next victims. Jake figured that one more block couldn't take long anyway, as many homeowners had turned off their lights, calling it quits for the night. Cindy would have been able to put her foot down with them, but Jake had never had the heart to refuse them. She had always been the disciplinarian in the family \u2013 he was the pushover.\n\nLooking up, Jake saw that this new block was at the very edge of their neighborhood. He couldn't believe they'd managed to walk this far. Halfway up the block, he saw the boys turn up a driveway. Too late, he realized where they were and broke into a run to catch up.\n\n\"Wait, guys!\" Jake came to a halt at the foot of the driveway and glanced in shock at the house nearly a quarter mile distant.\n\nThe Pucelle House had been abandoned for as long as he could remember. Everyone in the area grew up knowing the story: The Pucelles were a French family that had built the house over a hundred years earlier when they had moved to this country to start a textile business. Their company had essentially founded the town, which grew up around their mill and factory.\n\nFor reasons unknown, the Pucelle's oldest son had killed his bride on the night of their first anniversary in that very house, and then took his own life. The entire family had moved away in disgrace, and it had nearly been the death of the town. But the citizens had persevered, and little by little the town had recovered. The mill and factory had long since been demolished, but the large Pucelle House and grounds that contained it had remained. It had been bought and sold numerous times over the years, as the house was large and well designed. It had been gorgeous in its day. But the new owners never stayed very long. They always left after only a few weeks, telling tales of strange occurrences and disembodied voices in the night that the townsfolk could never quite bring themselves to dismiss.\n\nAs a result, the neighborhood had never extended beyond the Pucelle House, though the land around and beyond it would have been considered prime real estate. It was surprising that it was still standing after the years of neglect. But the most surprising thing of all to Jake was the fact that bright lights shone in the windows of the house and lively music filled the air.\n\n\"When did they sell this again?\" he wondered as he started up the driveway after the boys. A breath of cold air raised the hair on the back of his neck, and Jake rubbed his arms to warm and settle himself.\n\nHe caught up to the boys at the spacious front porch of the Pucelle House, and walked with them to the door. Jake hesitated as he reached over their heads to knock as they held their pillowcases at the ready. Finally though, his curiosity got the better of him, and he rapped sharply.\n\nAfter only a few moments the door opened, spilling warmth and light onto them where they stood. \"Trick or treat!\" the boys shouted. Jake grimaced at their volume, but then caught his breath as he saw the woman at the door.\n\n\"Well, hello!\" she beamed at each of the boys before turning her gaze to Jake. She was tall and beautiful, with long, curly black hair, green eyes, and porcelain skin. Jake looked past her into the room for a moment. It appeared to be a Halloween costume party, as everyone was dressed up in old-fashioned suits and dresses. The dress the woman was wearing accentuated her beauty all the more, and showed off the generous curves of her body.\n\n\"I don't want any tricks, so it's treats for you all!\" she shouted to the laughs of the other party guests. Each of the boys received a large homemade caramel apple that made even Jake's mouth water. She beamed at their cries of delight.\n\nGlancing up at Jake, she affected a slight pout. \"I'm afraid that's all I've made for tonight's parade of hooligans. I've nothing left for you.\"\n\nJake chuckled. \"That's all right. I'll just take theirs when we get home.\"\n\nThe woman's eyes glinted with mischief. \"Don't you dare, or you'll incur my wrath.\"\n\nJake nodded contritely. \"Yes, ma'am.\"\n\n\"It's Emily,\" the woman offered, \"and who might you be?\"\n\n\"Jake Williamson. I live about a dozen streets that way.\" He thumbed over his shoulder.\n\nShe stood for a moment smiling at Jake with a curious expression on her face.\n\n\"Well, we'd better get going, Emily.\" He had gathered the boys and turned to leave when her voice stopped him.\n\n\"Jake, would you care to return later and join our party?\"\n\nHe turned back to look at her. She still stood with the curious expression on her face.\n\n\"I don't know, Emily. It's getting late and the boys...\"\n\n\"Please?\" She said the word quietly, almost a whisper.\n\n\"Uh... I'll try.\"\n\n\"Please.\" She repeated as she closed the door, leaving Jake and the boys on the dark porch.\n\nOn the walk home, as the boys chortled with glee at the haul they'd taken in, Jake pondered the invitation. Even now, as he thought of Emily his heart seemed to catch in his throat. Something about her just sent his emotions spinning.\n\n\"You should go, Dad.\" Kwan offered from his left.\n\n\"W-What?\" Jake sputtered.\n\n\"You should go.\"\n\n\"Yeah, Dad. Go to the party.\" Boyd agreed.\n\n\"Mr. Ethan can watch us.\" Jamal suggested.\n\n\"Maybe.\" Jake whispered.\n\nII.\n\nJake pulled up the drive of the Pucelle House and turned off the car. He sat for a moment, considering. He hadn't even been on a date since Cindy had died, and now he was going to a party. For a moment he thought about starting the car and simply driving home, but he finally got out and walked to the front door.\n\nEmily again answered the door at the sound of his knock. She gave him an appraising look as he was now wearing a coat and tie.\n\n\"Sorry, I don't really have an appropriate costume,\" he offered lamely.\n\n\"Oh, that's neither here nor there.\" Emily pulled him inside and shut the door behind him.\n\nTaking his arm and placing her hand at his elbow, Emily ushered Jake around the party even as she appeared to be the one being led. He was impressed with how adept she seemed to be at this little social skill. She introduced him to the other partygoers, and though Jake paid close attention, he couldn't seem to remember any of the names he was offered.\n\nFor that matter, he couldn't seem to remember anything that was said. He and Emily mingled with the other guests, carrying on long conversations and telling jokes, but Jake seemed to forget the words as soon as he heard them, even when he was doing the speaking. And he became increasingly aware that the party guests were staring at him, though it was inconspicuous enough that he could never catch them at it. But Emily held her body close to his throughout the evening, and he was content to simply be near her. He sipped the spiced cider that was being offered, and nibbled on chocolates that appeared on trays. For the moment, his loneliness had dissipated and he didn't care at what price it came.\n\nEventually, he found himself being led up a grand staircase to the second floor. Outside one of the bedroom doors, Emily turned pulled him into an embrace.\n\n\"I want you to be with me,\" she told him. \"Please stay and make love to me.\"\n\nJake started to protest; they'd only just met, the boys were with a sitter, he still loved Cindy... but Emily placed her finger over his lips and shushed him.\n\n\"Just say yes,\" she whispered.\n\nHis desire overwhelmed his objections.\n\n\"Yes.\"\n\nShe opened the door to the bedroom and Jake found himself looking at a grand four- poster bed made of mahogany. The mattress seemed to be nearly four feet off the ground and piled high with satiny sheets, pillows, and thick comforters. Candlelight flickered from a fireplace mantel.\n\nEmily led him to the side of the bed and turned to embrace him again. Jake lowered his head and kissed her, gently at first, then with more pressure. Her mouth opened to his, and their tongues entwined with light flicks and wet caresses. He tried to remove the dress she was wearing but could only fumble with the complex buttons. Emily chuckled into his mouth and pulled away to do it herself.\n\nJake watched as every button undone exposed a fraction more of her tantalizing skin. He could feel himself hardening, his penis straining against the confines of his pants. Finally, her dress fell away, leaving her bared before him, and Jake's breath caught.\n\nHer skin was flawless and smooth, and Jake moved to hold her in his arms. Her body felt like silk in his hands.\n\n\"God, you're... exquisite.\" He choked as emotion and need filled his voice.\n\nShe smiled at his choice of words and beckoned him to her again. They kissed once more, and Emily began unfastening Jake's pants even as he removed his coat and unbuttoned his shirt. He flung the shirt away and groaned as she caressed his length through the fabric of his pants before dropping them to the floor. She gasped as she saw his size, but Jake saw no fear in her eyes, only desire and longing. Cindy had once looked at him that way.\n\nShe took his member in her hands and marveled aloud at his proud, erect manhood. The plum-sized head was purple and veins flowed down the shaft to the neatly trimmed hair at its base. She ran her hands over it with tenderness, following the thick ridge around the head with her finger, finally reaching underneath to cup his testicles gently but firmly. Jake exhaled slowly.\n\nReaching down, he lifted her naked body into his arms and laid her on the bed. He climbed up beside her and they kissed again, his stiffness rubbing against her leg.\n\nBreaking away, Emily crawled down to the foot of the bed and knelt between his legs. She took his erection in her hands and rubbed it with long strokes.\n\n\"Oh my, what a wondrous cock!\" she chirped, blushing furiously after saying it.\n\nJake chuckled at her brazenness, then fell back in pleasure as her mouth encircled the head of his cock and dropped down suddenly to its base. She didn't seem to have a problem taking it all into her mouth and throat, and Jake was intrigued by the combination of her skill and apparent innocence.\n\n\"I'm glad that you like it,\" he managed to gasp as she flicked her tongue along the underside of his glans. She worked her way down to his testicles where she took first one and then the other into her mouth and gently sucked. Her breath on his wet sac sent a jolt of excitement through his body. For a moment, he thought of Cindy and the lovemaking they once shared, but he pushed it from his mind.\n\nKeeping one hand cupped under his balls, she brought her mouth back up to the head of his penis and popped it inside her mouth. Jake growled with approval as she swirled her tongue around the head and inside the hole at the tip. She again took his entire length into her mouth and throat, and then settled into a rhythm as she bobbed her head up and down on his cock, taking about three-quarters of its length into her mouth on every stroke. She was tireless in her ministrations on him. Up and down, again and again, her mouth fairly flew over his member. His scrotum began to creep up as he neared the pinnacle of his desire, and deftly she tugged at it, delaying his release. Before long however, the slick friction of her mouth and tongue on his length was too much for him to bear. He moaned as he released his seed into her eager mouth. She took every bit of it in, swallowing with a purr of contentment. She continued to suck, cleaning his penis as she milked every last drop out of him.\n\nEvery pore on Jake's body felt charged with electricity as he reveled in the glow of his ejaculation. Instead of feeling tired, he felt energized. Glancing down the length of his body, he saw Emily propped on her elbows, wiggling back and forth slightly as she smiled delightedly at him.\n\nJake was dimly aware that at some point the music from the party down below had ceased, but his attention was elsewhere. He raised himself to a sitting position and pulled Emily to his chest, kissing her with a fervor he no longer thought he had. He could just taste a hint of his own essence on her tongue. Again his thoughts drifted to Cindy, and this time he actually shook his head in an attempt to clear her from his mind and concentrate on the task at hand.\n\nRolling Emily over onto the bed, Jake began kissing and licking his way over her entire body. He was driven with the need to taste every square inch of her porcelain skin. He kissed her neck, and licked the inside of her elbows and wrists. He flicked his tongue over her thighs and calves, finally working his way to her toes, which he gently sucked into his mouth. Emily moaned with need, and Jake licked and kissed his way back up her inner thigh to the cleft between her legs.\n\nFlicking his tongue over her clitoris made Emily sit bolt upright in bed before collapsing back into the thick pillows. \"Yes, yes!\" she whined. \"Do that. Touch me with your mouth!\"\n\n\"Do you like it when I lick your pussy?\" Jake asked her quietly.\n\n\"Yes! Kiss my... kiss my pussy!\" she replied in a strained voice.\n\nGrinning to himself, Jake began to run his tongue over her silky folds, pulling her gently into his mouth for a moment before releasing her. He reached up with his hands to caress her nipples even as he buried his face between her legs. She moaned as her nipples instantly hardened, and Jake rolled them in the palms of his hands. Emily squirmed with delight.\n\nReaching down with one hand, Jake moistened a finger with her juices, then gently probed inside her vagina. He continued to simultaneously lick her folds, caress her nipples with one hand, and penetrate her with first one, then two fingers of his other hand. It was more than she could bear, and her body stiffened as she came, quivering on the bed and mewing with soft purrs.\n\nJake lifted his head for a moment, but she gasped at him in desperation, \"No! More, please more!\" \n\nHe lowered his head and continued running his tongue up her slit and over her clitoris. He found that he was again erect, his cock pushing into the satin sheets beneath him.\n\nEmily pushed her pelvis toward him eagerly, anxious for the touch of his tongue and fingers. Jake obliged her by pressing two fingers inside her and forward, rubbing against the spongy tissue there. She climaxed again and then once more in quick succession as he also applied more direct pressure to her clit with his tongue.\n\nShe reached down to pull him up on top of her. \"Please, take me. I need you inside me.\"",
        "Jake rose above her and positioned himself at the entrance to her vagina. He rubbed the head of his cock along her slit, lubricating himself with her copious juices. She strained up to meet him, but he kept just out of reach.\n\n\"Please, Jake!\"\n\n\"Okay.\"\n\nJake entered her with one long, slow thrust until his balls nestled against her tiny rosebud. It was a tighter fit than he expected, and a low groan rumbled out of him. Emily had raised her hips off the mattress to meet his prolonged thrust, and the muscles of both their legs and butts were taut as they pressed themselves into each other. He pulled slowly out of her, and she lowered herself to the sheets. He pushed into her again, faster this time, and marveled at how her depths firmly held his length from the tip of his cock down to the base. Gradually he built up a rhythm, plunging into her again and again.\n\n\"Oh, yes!\" she purred, and began to lift her hips to meet his thrusts.\n\n\"Oh, Emily,\" he whispered.\n\n\"Yes, Jake! Talk to me!\" she groaned back.\n\n\"You feel so good, Emily!\" he cried.\n\n\"Yes! Yes!\"\n\nJake continued to press in and out of her, and he at last began to feel all of the lingering guilt drain out of him. Cindy would have wanted him to be happy, to please himself and others.\n\nHe took her hands in each of his and pressed them above her head onto the bed. He started to pound into her as hard as he thought she could take, and Emily lifted her legs to encircle his waist.\n\n\"Oh Emily, you're so hot,\" he grunted.\n\n\"Yes, yes, hot for you!\" she answered.\n\nHe plunged into her and felt her pull him in deeper with her legs. Her heels dug into his buttocks as if to spur him on to greater frenzy.\n\n\"You're so tight, Emily!\"\n\n\"You're stretching me out with your beautiful cock!\"\n\nShe bent her head to the side and lightly bit one of his wrists as it clasped her hand. Her eyes were closed with the rapture she felt.\n\n\"You feel so incredible!\"\n\n\"You feel incredible inside me, Jake!\"\n\nHe was now thrusting into her so hard that she was bouncing up from the mattress to meet his every penetration.\n\n\"Oh, you feel so good.\"\n\n\"Yes! Yes!\"\n\n\"I love the way you feel!\"\n\n\"Yes, tell me!\"\n\n\"I love this so much!\"\n\n\"Oh yes, please!\"\n\nHis excitement built to its inevitable climax. He pulled nearly all the way out of her and then plunged his cock into her as far as he could reach, releasing his passion with spurt after glorious spurt that seemed to have no end.\n\n\"I love you, Cindy!\"\n\n\"YES!\"\n\nIII.\n\nJake opened his eyes as sunshine spilled into the room. He tried to roll over and continue sleeping, but the overwhelming odor of mildew assaulted his senses and he raised himself to a sitting position. His blurred vision betrayed him at first, as he couldn't figure out where he was.\n\nRealization came crashing to him as he looked around at the bedroom in which he and Emily had made love. Only this was no cozy bedroom; the furniture he'd seen the night before was gone, and the candles that had glowed on the mantel were nowhere to be seen. Jake glanced around and found that he was lying on a bed dressed with old, mildewing sheets.\n\nHe leapt from the bed with a cry of disgust. Looking down, he felt his blood run cold. There was only set of footprints on the dusty floor, his own, leading from the door to the bed.\n\n\"What the fuck?\"\n\nHe leapt into his pants and grabbed his shirt and coat, running from the room as if chased by demons. He flew through the hallway, down the steps, and through the dusty parlor that had held scores of partygoers the night before. He didn't stop until he was panting on the front porch.\n\n\"What the hell happened here?\" he thought to himself. \"One second we're trick or treating, the next...\"\n\nHis blood ran cold anew as he remembered the caramel apples that Emily had given the boys.\n\nJake raced to the car, started it, and shoved it into gear. He roared down the street, ignoring the calls from his irate neighbors as he passed. Pulling into his driveway, he leapt from the car and smashed his way through the front door.\n\nThere, in front of him, the boys were going through their Halloween candy, trading with each other and laughing. \n\n\"Hi, dad.\" Jamal said through a mouth full of Nerds.\n\n\"Hi. Did you guys eat those caramel apples?\"\n\n\"Yep, they were good.\"\n\nHis neighbor Mr. Ethan stood up from the recliner and turned to face him. Jake sighed with relief and started to sputter an apology. Mr. Ethan merely winked at him.\n\n\"Don't even worry about it. You've been needing to get lucky for about a year now. And the boys were just fine.\"\n\n\"Thanks.\"\n\n\"Don't mention it.\"\n\nMr. Ethan walked to the front door and opened it. He looked out at the driveway and said over his shoulder, \"Jake, you've got company.\"\n\nJake stepped over to the door as Mr. Ethan left. Striding up the walkway was a woman in business attire carrying a briefcase.\n\n\"Jacob Williamson?\"\n\n\"Yeah, that's me.\"\n\n\"I'm Wendy Tillman. Can I come in?\"\n\n\"Sure.\" Jake held the door open and she stepped inside. She smiled at the boys going through their candy.\n\n\"So, what can I do for you, Mrs. Tillman?\"\n\n\"Miss Tillman. I'm an attorney with the city. We've had something unusual come up.\"\n\n\"Oh?\"\n\n\"Yes. It seems when some clerks were moving some old filing cabinets around, some interesting paperwork was found.\"\n\nShe opened her briefcase and began digging through it. \"Was your great-grandfather also named Jacob Williamson?\"\n\n\"Yes.\"\n\n\"Ah, that would explain it.\"\n\n\"Explain what?\"\n\nShe pulled some old-looking papers from the briefcase and handed them to him.\n\n\"A will was found that appears to leave the Pucelle House and all of its grounds to him. And since you're his only surviving relative, it's all now yours.\"\n\nJake looked down at the papers. He read the typewritten will that did, in fact, leave the estate to Jacob Williamson. There was also a note written in flowery handwriting. It read, \"To Jake, who freed my burdened soul with the love of his pure heart. Love always, Emily Pucelle.\"\n\nJake looked up and smiled. She smiled back, and Jake noticed for the first time that she was very pretty, with brunette hair, blue eyes, and a dusting of freckles across her nose and cheeks.\n\n\"Congratulations on your good news, Mr. Williamson.\"\n\n\"Call me Jake, Miss Tillman.\"\n\n\"Call me Wendy, Jake. I'll leave you my card. Give me a call if you have any questions. Or maybe just give me a call.\"\n\n\"I'll do that.\"\n\nShe moved back to the front door and stepped outside. Turning back to him, she said with a grin, \"Oh, I hope you're not afraid of ghosts, Mr. Williamson.\"\n\n\"Not anymore.\" "
    ],
    "authorname": "E.P.M.",
    "tags": [
        "ghost",
        "oral sex",
        "satin sheets",
        "trick or treating",
        "halloween"
    ],
    "category": "Erotic Horror",
    "url": "https://www.literotica.com/s/the-porcelain-soul"
}
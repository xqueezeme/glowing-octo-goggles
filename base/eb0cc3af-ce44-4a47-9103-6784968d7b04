{
    "title": "Love Like a Blue Shell Pt. 03",
    "pages": [
        "Welcome to Part 3 of our epic four-part story. A warning in advance, this one adds incest. Not much of a surprise, I'd imagine. At this point I'm pretty sure it's contractually required. \n\nLast time, Taylor cheated on her boyfriend Tim with another dude while he watched. She decided the best way to solve this problem and get their relationship back on track was with more unfaithful fooling around. This time with friends. And it worked! Of course, if something is good the first time, it has to be even better the second time around. Right? \n\nEveryone is over 18. \n\n***** \n\nTim wasn't sure how it happened, but somehow Taylor got word to Courtney or Courtney called up Taylor and now it was agreed that they were all going to meet up and do it all again. \n\nTim was shocked. Not at all unhappy. But shocked. Maybe this was their thing now. Some couples brunched or went on vacation together. Maybe they were the couples who played video games and jerked off together. That wasn't so strange was it? \n\nOK, it was bizarre. But it was happening and Tim wasn't complaining about it. \n\nAfter that night, he and Taylor had run around the apartment fucking like animals for hours. Any piece of furniture that hadn't been touched by their group adventure was now soiled forever by their rampant rutting. \n\nTaylor hadn't just gotten lascivious either - she'd become strangely possessive. \"My cock. My balls. My cum. Mine.\" She'd say it over and over. Bite his ears, his nipples. Make him say it back to her. \"Taylor's cock. Taylor's cum. Taylor's only.\" \n\nIt was fucking hot and he loved what it did to her when he said it. \n\nHe tried tit fucking her one time but there wasn't really anything there. It felt like he was pressing his dick into Taylor's rib cage, like Courtney grinding herself into the pillow. It wasn't really pleasurable for either of them and they'd moved on. \n\nThey talked about everything constantly, as well. Like their whole relationship now rotated completely around what had happened. \n\nCourtney told Taylor that she and Colin were doing the same thing. Well, she didn't say if they were having wild animal sex throughout the house (although Tim assumed they were). But according to Taylor, Courtney and Colin were having similar conversations and even role playing different bits to each other. \n\n\"Apparently, she's a bit down that she missed the big blowout,\" Taylor told him. \n\n\"What do you mean? She was right there with the rest of us.\" \n\n\"Yeah but her head was down for most of it. I wonder how she ended up working herself that way.\" \n\n\"She told me that was how it 'worked' for her,\" Tim said. \n\n\"Whatever. You're lucky I'm not so fussy. Anyway, she's definitely hoping to get more involved next time.\" \n\nSo yeah. It was definitely going to happen again and they were like two couples planning a golf weekend in Hilton Head. Only not golf. Though maybe some head? Tim wasn't sure. \n\nCourtney wanted to get back together right away but there were complications. For one, Tim and Taylor really did want to get their place cleaned. Also, there were scheduling complications. Nephews' birthdays and work travel. In the end they agreed to wait a month, till the weekend after Thanksgiving, before hosting a repeat. \n\nWhich was fine. Tim needed the rest, really. \n\n* \n\nFinally, the big day arrived. Tim and Taylor were clearly both feeling the pressure. Taylor wouldn't stop cleaning the apartment and Tim just couldn't sit still. \n\n\"This is fine, right?\" Taylor asked for what seemed like the hundredth time. \"I'm fine, you're fine. It's just a bit of fun with our friends.\" \n\n\"Yes,\" Tim agreed, \"Just getting together to play video games and drink. And if other things happen to happen, well, so be it.\" \n\nTaylor nodded and gave Tim a kiss. What frightened her, actually, was that she really was fine. She thought she was supposed to feel scared or feel dirty, but instead it was no different than any other dinner party she'd attended and that made her feel scared and a little dirty. \n\n\"Zach and Zoe are here,\" Tim said, looking out the apartment window. They shared another nervous look. \n\nThis weekend had been a perfect choice except for one problem - Sydney was away visiting her family. That meant it would have just been Tim and Taylor with Courtney and Colin. Taylor had been fine with that, but Courtney had insisted that having only the two couples wouldn't be any fun. \"Why don't we just swap partners at that point?\" she'd said. So Taylor had scrambled and come up with Zach and Zoe. \n\nZach had been the third musketeer in college. He, Tim, and Colin had all met their Freshman year in the dorms. Courtney and then finally Taylor had joined the group afterwards and they had been almost inseparable for four years. \n\nWhile Tim and Taylor had stayed close with Colin and Courtney, they'd all drifted away from Zach. Part of it was, they were coupled and he wasn't. Then he got serious with Zoe, of all people, and that only made things worse. The five friends weren't estranged. They saw each other maybe three times a year. But compared to what they had been, it felt like a loss. \n\nTaylor opened the door and gave Zach a tight hug. He had always been tall, but Taylor didn't remember him towering over her this much. He'd changed in a lot of other ways, actually. Zach had let his beard grow out a bit and he'd switched to contacts. He was wearing khakis and a long sleeve button down, pretty different than the guy who'd tried to wear a t-shirt and jeans to Colin and Courtney's wedding. \n\nBut all those positives were wiped out by the tight smile Zach gave Taylor as she said hello. Almost a grimace. Taylor had always known Zach to be warm and jocular. He wasn't a clown - he was just naturally funny. Zach answered the world with a bright smile. Today though, he looked almost morose. \n\nZoe walked in after him, gave Taylor a limp hug and a cold kiss on the cheek. Zoe was almost as tall as Zach. She had on jeans and a yellow sweater, looking very preppy. She'd grown her black, poker straight hair out long, almost lower than her shoulders. It made Taylor wonder if maybe something more was going on than the two of them were telling. Either getting closer or spinning apart. \n\nShe hoped it was the latter. Zoe was fine. She was nice enough. But she just didn't seem to fit with Zach and it made Taylor sad that he couldn't see that. Not for the first time, Taylor wondered if they'd done the right thing in inviting Zach and Zoe to the party. \n\n\"Colin just called,\" Tim whispered in Taylor's ear, \"Apparently they're bringing a third.\" \n\n\"Who?\" \n\n\"You don't want to know.\" \n\n* \n\n\"You did WHAT?!\" Courtney was clearly upset, swerving across lanes as she rocketed down the overcrowded Mass Pike. \n\n\"It's not my fault,\" Colin said, \"she overheard me talking about a Mario Kart tournament with Zach and she got upset that she wasn't invited.\" \n\n\"So, you invited your little sister to a sex party,\" Courtney said. She honked at someone as she cut them off. Colin was having trouble watching the road. He knew she'd been looking forward to this - it was all Courtney had talked about since the last game. As the big day got closer she seemed to obsess over it more and more. \n\nBut her utter devastation at the news seemed to be nowhere near appropriate based on what was, at best, a minor obstacle. Worst was, they'd just do a normal Mario Kart party this time around and then do sexy stuff the next time. \n\n\"We already waited a whole month,\" Courtney said. \n\n\"Look,\" Colin said, \"You know how Paige is. She'd just badger me and badger me until we had to take her. Or worse, make my parents force us. It's fine. It'll be fine.\" \n\n\"You always did have a weird relationship with her.\" \n\n\"It's not weird. We're just close. You weren't friends with your siblings?\" \n\n\"I never invited my younger sister to a sex party. No.\" \n\nColin sighed. After that weekend it had seemed so easy - they'd all just get together and do it again. But then the complications kept piling up. They took forever to pick a date, but then Sydney couldn't make it. In response, Taylor had apparently insisted that they needed more people, so they'd invited Zach and Zoe. Colin was excited to see Zach - though maybe not in this way, exactly - but his girlfriend was a fucking pill. \n\nBut, whatever, it had all still been workable until his kid sister, Paige, heard the words \"Mario Kart tournament\" and insisted that she be invited. He'd never seen a 20-year-old girl whine like that before. At least Paige had agreed to take her own car to Tim's. How else was he and Courtney to - once again - argue their whole way over to the apartment? \n\n\"Look,\" Colin said, \"We'll make it work. She's a big girl. If Paige wants to, I don't know, tickle Tim's taint while Zoe cradles his balls or whatever, that's her problem.\" \n\nCourtney laughed and looked up, smiling. \"I'm sorry. I don't know why I'm so worked up about this. Last time was fun and I'm sure this will be, too. But maybe we can convince Paige to leave after the drinking round.\" \n\n\"Sure,\" Colin said. Though somehow he doubted it. \n\n* \n\nWith seven people in the apartment, Taylor realized she had a bit of a problem. For one thing, they were way short of seating. Everything felt a little too small - she kept bumping into people or bumping into other things trying to avoid the people. And all that body heat was making the place feel a little too warm. \n\nOr maybe that was her nerves. \n\nMore importantly, however, the numbers put a serious crimp in her Mario Kart planning. Taylor had set up perfectly for six. The seventh really seemed to unbalance things for some reason. She'd honestly considered racing out to Best Buy to get a second Switch, but Tim talked her out of it. \n\n\"So what,\" Paige said, \"We just race each other and whoever loses, drinks?\" \n\n\"Something like that,\" Taylor said. Colin's sister was cute, Taylor had to admit. The girl was slightly taller than her and had the tomboy kid sister thing down. She was wearing jeans and a t-shirt with Mario on it - dressed for the occasion, no doubt. She had her long brown hair pulled back into a tight ponytail. Lips all pink and shiny with sparkly gloss. \n\nTaylor could see Colin's face in Paige. His big brown eyes especially. They seemed to smile the same way, as well. It would have been easy to resent the girl, she'd basically invited herself, but Paige was so perky and bright, Taylor couldn't help but enjoy her company. \n\n\"Cool!\" Paige said, \"Can I help you set up? Or I could pour drinks. I'm usually the bartender at our sorority parties.\" \n\nOf course she was. Taylor showed her where they kept the alcohol and Paige set right to work. Taylor looked around and saw that people were already getting a little sloppy and they hadn't even set up the Switch yet. It was probably the tension, she reflected. Drunk was always better than terrified. \n\n* \n\nTim was two drinks in and feeling no pain. He and Zach had found a quiet (well, quieter) corner and were talking about work stuff. \n\n\"The job's fucking killing me, man,\" Zach said, \"Killing me. All the politics and the bullshit. It's like, I'm 24 and I'm already thinking about retiring.\" \n\n\"Can't you just quit?\" Tim asked, \"There have to be hundreds of advertising agencies in Boston.\" \n\n\"They're all the same, man. It just sucks. I keep thinking about what really makes me happy and this isn't it.\" \n\n\"Have you talked to Zoe about it?\" \n\n\"Yeah,\" Zach said, \"She keeps telling me things are going to get better, but, I don't know.\" \n\n\"You guys are OK otherwise?\" \n\n\"Yeah, man. I guess. How are you and Taylor?\" \n\nTim laughed a little. \"Things are definitely interesting.\" \n\nZach cocked his head. \n\n\"Just you wait.\" \n\n* \n\nIt was like wrangling cats, but Taylor was finally able to get everyone in front of the TV. She claimed her usual lounge chair. Tim, Courtney, and Zach took the couch. They'd moved the two kitchen chairs over to the living room so Zoe and Paige sat there. Poor Colin, again, found himself sitting on the floor. \n\n\"OK people,\" Taylor said, \"Here's how it's going to work this time.\" \n\n\"Take it off!\" Tim shouted. Zoe looked over at him and glared, while Taylor, Colin, and Courtney shared knowing grins. \n\n\"In any case,\" Taylor said, \"we're going to start with heats to determine seeding. So we'll do races in groups of four until someone gets four wins. That person earns a bye - an automatic win in the next round.\" \n\n\"That seems like a lot to follow,\" Paige said. \n\n\"Don't worry, it'll make sense as we go along.\" \n\n\"And whoever loses, drinks?\" Zach asked. \n\n\"Sure,\" Taylor said, \"Or something.\" \n\n\"I can't believe we're sitting around playing video games,\" Zoe said, \"I mean, we're in our twenties for God's sake.\" \n\n\"You'd prefer a whine and cheese party, I suppose?\" Tim asked. The room laughed. Zoe turned a little red then sunk back in her seat. \n\n* \n\nTim looked around the room. He'd been heartbroken when Sydney dropped out, though she promised she'd join them the next time. They'd been texting quite a bit lately, actually. Nothing inappropriate, just the usual \"hi,\" \"jk,\" \"lol.\" But Tim still made sure to keep his phone away from Taylor, in case. \n\nStill, even without the stupendous blonde, Tim had to admit that the room was pretty damn attractive. With Colin's sister Paige and Zoe there, Tim assumed things would be tamped down, especially compared to the last time. But he still appreciated the possibilities. \n\nTaylor was Taylor of course. She looked especially good in her silky, black sleeveless blouse and grey slacks. Courtney also looked like she'd dressed up a little more than last time. She had on a purple, long sleeve shirt under a dark grey sweater and a black skirt. And stockings! That was exciting. \n\nTim wasn't much of a Zoe fan, but he had to admit she was striking. Tall and thin, Zoe had an almost model body, prominent in all the right places. Her nose was maybe a bit big, and that constant frown did nothing for her, but Tim wasn't going to complain if he got to see more. \n\nAs for Colin's sister, Paige, well, she was Colin's kid sister. But Tim had to admit the girl was super cute. Very pretty. OK, Tim conceded, she was a totally fuckable coed, with good-sized breasts already poking out of her t-shirt and a tight, little bottom. The fact that Tim wasn't supposed to be looking only made things worse. \n\nTim hoped Colin was too distracted staring at Taylor to notice. And that was the point they'd reached, Tim realized, where he was hoping his married friend was checking out his girlfriend. They were all going to need so much therapy in their thirties. \n\n* \n\nThe first race was Courtney, Taylor, Tim, and Zoe. Tim went back to Yoshi and Courtney took Dry Bones again. Zoe, shocker, chose Princess Peach. Taylor then made a big deal about how she'd been betrayed the last time by Donkey Kong and, seemingly at random, selected Wario \n\nActually, though, this was all part of her plan. Taylor had learned something from watching Sydney: if she slow played early, she could take everyone by surprise when things really mattered. Taylor knew she could get comfortable with the new character in the first few rounds (Wario was well-rated online. Yes, she'd done research) and then be ready to go once the clothes started coming off. \n\nAfter a few weeks of rampant fucking, Tim and Taylor had both slowed down as the big day came near, like saving room for a big feast. The combination of the steady diet of sex and then going cold turkey for a week had Taylor edgy as fuck. Desperate to just dive off into a sea of dick. kid-sister Paige and cold-water Zoe be damned. \n\nBut first, Taylor was going to let a few slip past her. So she trundled along happily, coming in third. Zoe finished well behind her. But the big surprise was that Courtney took first, and fairly easily at that. \n\n\"I'll go pour shots,\" Colin said. \n\n\"Fuck that,\" Courtney said, \"I want socks.\" \n\n\"Wait, what?\" Zoe looked confused, \"I thought we were playing for drinks.\" \n\n\"Taylor said it could be whatever we want and I've already done enough drinking.\" \n\nAs if this was the most normal request in the world, Tim pulled off one of his socks and so did Taylor. Zoe, seeing that the rest of the room was so calm about this, reached down and did the same. \n\n\"Well this is weird,\" Taylor heard Paige whisper. Oh honey, if you only knew. \n\n* \n\nRound and round they went, chasing each other around the track and discarding socks, belts, and outer layers as they went. After five races, most everyone was barefoot, except for Courtney who had kept her stockings at the cost of her sweater and a belt. Taylor was in similar shape, but her lack of layers meant the next time she lost, she'd be showing skin. \n\nTim was almost shocked at how Taylor was racing so far - she'd yet to win even one. Tim was certain Taylor would buckle down on this next race, lest she lose her shirt. \n\nTaylor did seem to put in an extra effort, but the dreaded blue shell showed up again and so Tim was able to take the win. Colin took off his belt and handed it over without a word. Zoe started reaching for her belt, as well. But then Taylor simply shed her satin, black shirt, revealing a bright blue bra that barely covered her tiny tits. \n\nTaylor tossed her shirt at Tim, then took a little bow. As if in concert, the two kitchen chairs shrieked against the hardwood floors. Zoe and Paige both leapt up. Zoe grabbed Zach. Paige grabbed Colin. \n\nThe rest of the room just stared as the boys were dragged away. \n\n* \n\nPaige pulled Colin into the bathroom and shut the door behind them. They could hear Zach and Zoe arguing in the next room. \n\n\"What the hell is going on here?\" Paige asked. \"Seriously.\" \n\nColin sat down on the edge of the tub. \"I tried to warn you.\" \n\n\"You said you guys were playing Mario Kart. Not... whatever the heck this is.\" \n\n\"It's Mario Kart,\" Colin said. \n\n\"Then why is Tim's fiancee topless in there?\" \n\n\"They're not engaged.\" \n\n\"Fine. Why are you and your wife getting naked in there?\" Paige asked. She started pacing. \n\n\"It's just socks,\" Colin said, almost pleading. Paige just fixed him with a stare. \"It's... Look, it's complicated OK? Courtney and I...\" \n\n\"I knew it,\" Paige said, and banged her fist on the sink, \"You're too nice, Colin. You think it's your job to protect everyone and it's not. If she did something to hurt you...\" \n\n\"No. She didn't. Besides, it's none of your business. No one made you come here. In fact it was really obviously the other way around. Your car is here. You can leave when you're ready.\" \n\nColin walked out of the bathroom, leaving Paige behind. As he walked back to the living room, he saw that the door to the bedroom was open. Taylor was talking to Zach and Zoe. \n\n\"So it really is just fun,\" Taylor said, \"I mean, we have to play for something, right? And this is safer than alcohol and probably a lot better for our friendships than playing for cash.\" \n\nZach and Zoe both leaned back on the bed. Neither seemed able to move their eyes away from Taylor's chest. Colin smiled to himself. \n\n\"Can you at least, like, put those things away while you're talking to us?\" Zoe asked. \n\n\"Nope, I lost my shirt fair and square.\" \n\n\"I don't know, babe, it kind of sounds like fun to me,\" Zach said, \"I mean, it's just clothes. No one's, like, giving each other a blowjob or whatever.\" \n\n\"It's just so immature,\" Zoe said, like it was the worst pronouncement she could make. \n\n\"Look,\" Zach said, his eyes not moving from Taylor's bosom, \"I want to spend time with my friends. If you want to go, whatever. I'll get a ride home from someone else.\" \n\nZoe seemed to think about it, then came to a decision. \"No. Whatever. It's fine. But you're going to make this up to me.\" ",
        "Zach shrugged as if to say, yeah, well, what else is new? \n\n* \n\nTim was surprised as everyone returned to their seats. He thought for sure he was losing at least Zoe and Paige. Instead, well, things were about to get interesting. \n\nCourtney won the next race which meant that she was now tied with Tim for the lead at two wins apiece. Paige and Zach undid their belts, and Zoe lifted off her preppy little sweater. It revealed nothing, just a white dress shirt. Yet it seemed monumental in the moment. \n\nAfter all the arguing, with the threat of real nudity was on the table now, Tim expected the room to get somber. Instead everything seemed to lighten. People started laughing, teasing. It felt like a real game again. And slowly, the clothes began to slip away. Tim stopped really paying attention as the races ran by and just watched the girls got naked. \n\nFirst Courtney slid off her stockings. She did it slow, like a striptease, rolling down the sheer material to reveal her pink, freckly legs. Then Paige lost her shirt and did the same, though it was a bit less sexy what with her wearing a Super Mario t-shirt. Paige might have been the youngest - she was only 20, Tim remembered - but she looked like she could easily have the largest breasts in the room. \n\nThen Zoe unbuttoned her shirt and showed off a nice, conservative cut black bra. Her breasts were a little small for her build, so probably about as big as Paige's. \n\nTaylor took off her pants next and Tim noticed the boys all staring at his girlfriend's perfect, heart-shaped ass. Courtney lost her top soon after. She seemed to be wearing the same green bra as last time - for good luck, perhaps? \n\nTim was enjoying the women so much, he almost forgot he was supposed to be racing. That lack of attention cost Tim his slim lead, along with his shirt and pants. At this point he was almost more comfortable sitting around in only his boxers, anyway. \n\nColin quickly joined Tim in underwear-hood, as did Zach. Tim didn't want to focus on his friend's physique too much, but he couldn't help but notice that Zach looked way more toned than he had back in college. Zach was a big guy and while he wasn't fat, he hadn't exactly stayed in shape either. Now though, Zach looked like someone who spent time at the gym. The other girls seemed to appreciate Zach's new body, as well. For the first time ever, Tim thought maybe he should start working out. \n\nTim heard his phone buzzing so he reached down to pick it up. There was a text from Sydney waiting for him. He quickly covered the screen and looked. \n\nSyd: Hey, how's the party going? \n\nTim looked around the room and smiled. The beautiful blonde said more in text than she ever did when speaking. It was nice, actually, like getting to share a secret part of her. \n\nTim: Doing OK. Everyone misses you, though \n\nSyd: Yeah sure. \n\nTim: No one here as beautiful as you \n\nSyd: Not even Taylor? \n\nTim looked over at his girlfriend. She was focused on her race and didn't see him staring. \n\nTim: No. \n\nSyd: You're sweet. I'll be there next time, I promise. \n\nTim: K \n\nShe didn't write anything more. He put the phone down. Then he heard it buzz. \n\nSyd: I miss you. \n\nTim smiled. He wrote back that he missed her too and then deleted the whole conversation. He wanted to read that \"miss you\" over and over, but he knew it was safer this way. \n\nWhen he finished texting, Tim realized it was time for what had become his favorite part of the game: the point where the girls had to decide whether to take off their bra or remove their pants. Either way, Tim thought, he was a winner. \n\nIt all happened in one race. Taylor took her first win, preserving her privates for another day, but Courtney, Zoe, and Paige all lost. Paige took off her jeans first, revealing plain white underwear that was very sexy in its simplicity. She smiled widely as she sat back down, clearly having more fun than she was supposed to. \n\nCourtney shucked her skirt next. Tim wasn't surprised to see that her green panties had returned, as well. She saw him looking and gave him a little smile. \n\nZoe, however, was a bit of a surprise. She slid her pants off and revealed a dark black thong. She gestured to the room as if to say 'happy now?' which of course everyone was. Even better, Tim noticed a bit of wet patch at Zoe's center. All this time she was pretending to be offended, yet there it was for all to see. Zoe was just as \"immature\" as everyone else. \n\n\"Yeah, yeah, yeah,\" she said and flopped back down into her seat. \n\nBy that point, Colin and Zach had both collected three wins. If either won their next race, they'd take the first round. Sure enough, Zach took the flag and the number one seed. With everyone now in underwear only, it was time to move on to far more exciting competition. \n\n* \n\nThe group took a bathroom/drinking break while Taylor figured out the next round of racing. Colin leaned against the kitchen counter - mostly so he could drink and listen in on other conversations. \n\n\"Yes,\" Zoe said to Taylor, \"I have to admit I'm having fun.\" \n\n\"You look really good,\" Courtney said to Zach, \"Have you been working out?\" \n\nColin felt a little uncomfortable watching his naked wife flirt with his naked friend. But then, wasn't he enjoying the view of Taylor just as much? The lithe brunette was amazing. Her body just seemed built for sex somehow. Colin kept thinking back to a month before (\"Mine. Mine only.\"). He couldn't help but desire a repeat. \n\nThen there was Zoe - he'd never liked the girl, but he had to admit she was pretty hot. Tall with defined calves and a flat stomach. Eye-catching breasts and bottom. He imagined her glaring at him while she stroked him off. Well Colin could kind of see the attraction in that. \n\nAnd of course, Courtney was there, too. His wife looked good in her lucky green underwear. He still wanted her - wanted to be with her. But she seemed to be having so much fun, Colin was starting to wonder if she'd ever want to stop. \n\n\"Hey bro.\" \n\nColin looked up and saw Paige standing on the other side of the counter. He'd been trying to avoid looking at her all this time, yet there she was. Her eyes, big and brown. Her breasts, even bigger. Her perfect fucking bottom. Holy fuck. Colin had seen Paige in a bikini just that past summer but somehow this was so much more. \n\nColin tried to control himself. There was nothing wrong, inherently, with recognizing Paige was attractive. But Colin couldn't help but feel like he was doing something wrong. That was the real reason he was behind the counter. Every time he looked at his sister, he felt his cock jump a mile high. At this rate, it'd be six feet long by the end of the night. And he knew exactly where it was aiming. Dammit. \n\nSo Colin tried to focus on anything else but his little sis. Except here she was, staring right at him. \n\n\"Dude,\" she repeated, \"Hello.\" \n\n\"Huh? Oh sorry,\" Colin said, \"Lost in thought.\" \n\n\"Yeah, I'll bet. So now that I have your attention I'll ask again, what happens now?\" \n\n\"Well, we keep racing and people start getting, y'know, naked. Well, naked-er, I guess.\" \n\n\"And what happens after that?\" \n\n\"This is weird right?\" Colin asked, \"This is totally weird. I'm sorry. I never should have brought you here. I should have knocked you unconscious and run off before you woke up again.\" \n\n\"It's OK. I know you can't tell me no, Col. I was practically planning on that. So what happens after everyone is naked?\" \n\n\"Well last time there were, ummm, favors.\" \n\nPaige looked at him very seriously then. Like trying to read his mind. \n\n\"You don't have to do them or anything. I mean, I'm sure you and I wouldn't have to. You know.\" \n\n\"It's OK, big bro,\" Paige said, \"But you sure do invite me to strange parties.\" As she walked away, God help him, Colin couldn't help but stare at his sister's amazing ass. \n\n* \n\nTaylor managed to get everyone's attention. She was back to doing her mostly-naked monologues. It really was much easier to get everyone's attention this way. Though Taylor had trouble focusing herself. \n\nZach's nearly bare body was quite the distraction. Whatever else Zoe was doing to that poor boy, she deserved credit for getting him to look like that. And of course it was nice to see Colin's goodies once again. With nearly-naked Tim out there as well, Taylor certainly wasn't spoiled for options. \n\nAhem. \n\n\"Here's how it works,\" she said, \"Everyone is split into two groups based on how they finished. Group A is Zach, Courtney, and me. Group B is Colin, Tim, Zoe, and Paige. Everyone plays everyone in their group twice, plus the group of three will get a wild card from the other group to make it even. Because Zach has the best record, though, he doesn't have to deal with the wild cards - they just count as wins for him.\" \n\n\"This is really getting involved,\" Zach said. \n\n\"I know,\" Courtney said, \"It's totally awesome, right?\" \n\n\"If you beat someone who is clothed,\" Taylor said, \"they just lose a piece of clothing. If they're naked, however, the winner can request a favor.\" \n\n\"So I can make Courtney do my... dishes?\" Zach asked. The room broke into laughter. There was the old friend Taylor remembered! Who knew that taking off his clothes would get Zach to comeout of his shell. \n\n\"A favor within reason people,\" Taylor said, \"Play nice.\" \n\nShe got a few scattered boos for that one. Play nice was not exactly the most limiting of rules, though, really. She assumed the party wouldn't go much farther than the previous one. Especially with the two newcomers and Colin's younger sister there. She didn't imagine either sibling wanted to see the other do much of anything. \n\nSome innocent rubbing, mostly of themselves, and nothing more. Would someone go to oral? Maybe? Taylor just couldn't see it. So just some harmless exhibitionism, mostly. At most. That was plenty to feed her and Tim's bedroom fantasies without putting any relationships at risk. And really that was all anyone wanted. \n\n* \n\nThe first race was Courtney and Zach. Because they were 'paired' in the race - and with everything else going on - Taylor couldn't help but imagine them, for a moment, as a couple. They would definitely be strange together and not just because Zach was nearly a full foot taller than Colin's auburn-haired spouse. \n\nCourtney was so serious all the time and Zach, at least the Zach that Taylor remembered, was so jocular. Courtney worried about, well, almost everything. Nothing seemed to bother Zach, sometimes to a fault. If they got together, they'd probably murder each other, Taylor decided. \n\nZach's byes gave him a huge lead out of the gate- if he won here he'd have three wins banked before the races even started. Fortunately, Courtney beat him easily. Even more fortunately, Taylor thought almost giddily, that meant Zach's dong would be the first to come out. \n\nTaylor waited for Zoe to say something. The whole room paused, but the statuesque, woman just smiled and gestured for Zach to get on with it. He dropped his boxer briefs and, to Taylor's delight, his erection popped right out. \n\nHe was long, longer than either Colin or Tim, but thinner than both. A tuft of brown hair surrounded everything. It was a nice dick, Taylor thought, proportional. She wondered what it might be like to try it some time. \n\nDamn, this is getting out of control. \n\nZoe and Paige went next. They were from the other group and Taylor didn't think she'd be taking on either of them at the end. Plus it was girl/girl so Taylor didn't care nearly as much. Paige won and Zoe stepped out of her very skimpy panties. Her bush was trimmed down to a dark stripe, Taylor noticed. How very mature. \n\nNow it was Taylor's turn. She had the wild card, which meant she was facing someone from the other group - in this case Colin. She'd been hanging back for this moment. Sydney had taught her well. Meanwhile, Taylor had figured out Wario who was tough on the corners but hella fast. Taylor was able to use that to her advantage and took the race, easily. \n\n\"Was wondering when the real Taylor would show up,\" Colin said. He seemed legitimately excited for her to do well, even though he'd lost. Always the gentleman, Colin, Taylor smirked - unless he was begging for her to make him cum. \n\nColin took off his boxer briefs and his penis flopped out. He too looked pretty hard, Taylor thought. She noticed he kept looking over at Paige, nervously. This had to be mortifying for him, Taylor thought. \n\nFor the last race, Colin had to go again - this time against Tim because of the wild card. It was still early, but the race had super high stakes. If Tim lost, then all the cocks would be accounted for. Taylor wanted to see her boyfriend come out and measure up, as well. The other girls had playfully oohed and ahhed at the other shlongs and competitive Taylor knew that her boy had the best. \n\nOn the other hand, if Tim won, then they would be up to the first favor since Colin was now completely naked. Taylor didn't think her boyfriend would pick anything risque, but still. She was earnest to see what would happen. \n\nIt was close, but Tim got lucky with weapons and took Colin out. Tim got to keep his underwear. He smiled wickedly. \n\n\"Colin, I order you to... take off Courtney's bra.\" \n\n\"Whoa, he can't do that!\" Paige cried. But Taylor had seen this play out all before. She just nodded and agreed that Tim, indeed, could. Apparently she wasn't the only one who'd learned from past encounters. Courtney certainly wasn't complaining. Colin went over and deftly snapped open his young wife's bra. Courtney's pink, freckled tits bounced joyfully at their release. \n\nTaylor had gotten over her own lack of assets but, seriously, why did everyone have to have bigger breasts than her? \n\n\"It's not fair,\" Paige said, still pouting. \n\n\"When you win you can make someone take off Tim's boxers,\" Taylor said. \n\n\"Good point,\" Paige said and smiled, clearly placated about the whole thing. \n\n* \n\nTim knew it was coming. He was matched up against Paige the next round, who clearly didn't like how Tim had distributed his favor. She seemed particularly driven to take him down and sure enough, she did. \n\nTim was the last boy to take out his member and he got a nice bit of appreciation from all the girls, including a thumbs up from both Courtney and Taylor. It was all very gratifying. \n\nThe next race was Zach against Taylor which, Tim reflected, should have made him nervous. But by now it was old hat. If anything, he found he was anxious for things to move on. He'd seen most of these people naked and while the new players intrigued him, he anticipated far more interesting things were on the way. \n\nTaylor took the race and asked for a kiss. Zach leaned over to reach her cheek but Taylor quickly corrected him. \n\n\"A real one,\" she said. Zach pressed his lips to hers - it was a little funny seeing him bend over to kiss her. Tim looked over at Zoe, but she looked rather dispassionate about it. She just smiled at Tim and shrugged. \n\nTim was beyond beating himself up over this. He thought it was hot watching Taylor kiss Zach, especially since she would be back in his own bed that night. Besides, Taylor had once again escalated the action with everyone else. Tim could hardly complain about that. \n\nWhile the room recovered from watching Zoe's boyfriend kiss Tim's girlfriend (and it was no little peck on the lips, either, Tim could have sworn he saw Taylor's little tongue slip out of her mouth) Colin crushed Zoe. The tall, dark-haired woman didn't wait for Colin to say anything, she just quickly stripped off her bra. \n\nAs Tim had thought, Zoe had good-sized tits. Maybe a bit small for her body, but still lovely and pale like the rest of her, with the lightest of light-pink nipples. If there was any doubt, Zoe's breasts showed she was quite aroused. The little nubbins pointing proudly forward. \n\nSince she'd done so during the kiss, Tim gave Zoe a little smile and a shrug. He was shocked when she smiled back, and squeezed her boob at him. They both laughed. \n\nThe last race of the round was Courtney's wild card. They picked randomly again and Tim got the honors. Luck stayed on his side and Courtney spent most of the race mired in fifth. Before it was even over, Courtney jumped up and started to slide down her panties, but Tim stopped her. \n\nHe got down on his knees and reached for her waistband. Then slowly he dragged the green briefs down, careful to nudge her sex with his nose. Courtney was still clean shaven, though Tim was surprised to see a bit of auburn stubble starting to show. Courtney smelled sweet and tangy. Maybe a bit headier than Taylor, though certainly quite pleasant. Tim thought about taking a quick taste before he stopped himself. As always, go too far now, you might lose the chance to go even farther, later on. \n\nInstead Tim just breathed lightly on Courtney's intimate folds and was gratified when she gave a little shiver. The whole room seemed to exhale along with her. \n\nTim looked around the room, expecting some recriminations, but Colin gave him a little cheer and Taylor showed him the thumbs up. Instead it was Paige that was now staring Tim down. He couldn't imagine why, though. It seemed he'd made an enemy of Colin's cute little sister, though he couldn't imagine why. \n\n* \n\nTaylor watched her boyfriend strip Courtney's panties and was amazed at how much of a player he'd become. Where was the shy, nervous fellow from the first game months ago? This Tim was confident, sexy. Taylor couldn't wait to take her new Tim to bed. \n\nOnce again, Taylor had to admit that she was having fun. It seemed the rest of the room was, as well. Even Zoe and Paige - though Colin's little sis seemed less than pleased with how Tim chose to play the game. \n\nStill, Taylor amazed at how something that should have destroyed her relationship had made it stronger. How it had taken her and Tim and made them better. She pictured writing the article for Cosmo: \"How to fix your relationship and improve your sex life by cheating on your boyfriend!\" She doubted that one would make it past the editors. \n\nThey were in a weird spot, game-wise: Zoe, Tim, Colin, and Zach were all completely naked. But Taylor and Paige both had their bra and panties on, which in this group felt almost like being completely clothed. As much as she enjoyed having a lead, Taylor was really hoping that things would keep moving and that meant she would have to get naked soon. The way both Colin and Zach had already been eyeing her, Taylor was pretty OK with that idea, anyway. \n\nThe group decided that since Zach got an automatic win for his wild card, he could demand a favor of anyone in that moment. To Taylor's delight, he smiled and gestured for her to remove her bra, which she happily did. Her little breasts did their best to bounce like the other girls' had, which wasn't all that much, sadly. The boys all seemed appreciative, however. \n\nNext she had a race against Courtney. Taylor knew she could take down Colin's wife, but decided that her own nudity was worth sacrificing for the greater good in this case. So she missed a few easy turns and then 'reluctantly' stripped off her undies. \n\nTaylor's only regret was that no one pulled them off the way Tim had done. However, that would have been Courtney's job and Taylor wasn't really feeling that. So now the only person in clothing was Paige, and even the 20-year-old could feel the conspiracy growing against her. \n\nNo surprise - when Tim beat Zoe, he told her to remove Paige's bra. At this point, the coed brunette didn't even complain. She just raised her arms to give Zoe easier access. The taller woman reached down and snapped Paige's bra off in one shot, revealing the girl's ample globes. \n\nShe was the youngest there, but her breasts were clearly the biggest. The guys all smiled at her, even Colin, but all Paige did was blush and quickly cover herself with her arms. She had to move, though, because she was racing her brother next. ",
        "* \n\nColin tried not to appreciate his little sister's chest, but it was definitely not little. Paige didn't have breasts or tits. This was a fucking rack - she was stacked - and Colin felt his cock grow even harder, somehow. \n\nPaige still had her hair up in a ponytail. Her lip gloss shone perfect pink. There was this innocence about her that Colin couldn't shake. And yet her boobs were just hanging out there. Her nipples looked pencil-sharp, and her pussy was next to come out. \n\nAll Colin had to do was win. And he felt that the room was behind him. After all, Paige was the last to lose her clothes. Once everyone was naked, who knew where things would go? He looked back at Paige's perfect face. Her big brown eyes wide, almost pleading. She uncrossed her arms, shyly, to take the controller. \n\n\"Strip that sis! Strip that sis!\" Even Zoe was cheering it. But Paige just looked... nervous. Colin smiled warmly. \n\n\"I've got you,\" he said and rubbed her arm. He was so careful not to brush Paige's massive boob, of course he ended up doing it. But she didn't seem to notice. \n\n\"It's fine,\" Paige said, \"It's fun. I just... Not you. Not now.\" \n\nColin smiled and tousled his sister's hair. He took the first turn wrong and then ate a sand dune on the second lap. Paige might have won anyway- she drove well - but Colin made sure she did it with ease. \n\n\"Darn,\" he said, perhaps a bit too excitedly. Everyone groaned. They wanted Paige naked. And what kind of favor, exactly, was a sister going to force her brother to do anyway? Nothing all that exciting. \n\n\"I want a kiss,\" Paige said, then whispered, \"a real one.\" \n\nColin paused, then bent down and put his lips on Paige's. He expected it to be dry, awkward, more than a little weird. But as their mouths touched, Colin felt a little tingle travel across his lips and explode all over his body. Shivers down his back, his arms, his legs. Paige made a little sigh, then kissed back harder. He felt his sister's tongue tease at his lips. He almost thought about letting it in, but then he stopped. \n\nColin looked around the room, feeling guilty and a little dazed. He expected everyone to look grossed out, but instead they all smiled and clapped. \n\n\"Nice kiss,\" Taylor said. Courtney cocked her eyebrow. Colin shrugged. \n\nThis was becoming a problem. \n\n* \n\nOnce again, Tim appraised the room. Everyone was now naked, except for Paige in a pair of white panties that were rapidly turning not white. They were more than halfway through - everyone had played each other in their group once, and the standings were tight. \n\nTim, through some luck and (he would admit later) a little bit of practice, found himself all alone in first with three wins. Zach, Courtney, Taylor, and Paige had two wins each. Zach's, however, were from his two byes earned in the previous round. And everyone agreed that one of Paige's wins was fairly fraudulent, since her brother had taken a dive for her. \n\nThat brother, Colin, was near last with one measly win. But that was still better than Zoe who had flat zero. Bagel. Donut. \n\n\"OK, I get it,\" Zoe said, interrupting Tim's report. \"I suck at Mario Kart. Happy?\" \n\n\"I'm sure she's good at other things,\" Courtney said. \n\n\"You better believe it,\" Zach said, \"Wait. Was that TMI?\" \n\n\"We're all sitting in a living room naked,\" Zoe said, \"I think TMI is AWOL. Besides, I need the ego boost.\" \n\nZoe was up against Paige and, in a bit of an upset, the tall woman won. Paige quickly shed her underwear and slinked off to the side of the room. Tim noticed the girl had a good bit of brown hair around a very pink, clean puss. Again, he reflected on how attractive Paige was, though he was pretty sure he wouldn't be enjoying any of it. \n\nThis meant the last races were down to favors. Tim imagined that, like last time, there'd be a lot more showing than sharing. He knew Courtney and Taylor would want to do some stuff. And Paige was unattached so chances were good that she'd be more willing to play around. \n\nZoe was a bit of a mystery, though. At times, she almost seemed to be enjoying herself. Would she take the opportunity to have some illicit enjoyment? Would Zach let it go that far? That was the other unknown, how far would everyone's significant others be willing to take things? \n\nZach and Zoe had seemed pretty distant from each other the whole game. But if it got serious, would Zach be willing to give and take? Colin had been pretty loose with things last time, but how would he feel if his girlfriend gave it to something other than a pillow? And while Tim was more than happy for Taylor to fool around - found that he enjoyed it actually - he had to wonder about his own limits. How far was too far? Tim kept looking for road signs and saw nothing but horizon. \n\nTim was up against Colin next, and so one of them would be doing something to someone. With the win, Tim could basically seal his way to the finals. He wouldn't be completely uncatchable, but it was close enough. He started to think about how he'd play it out if he won. Who he wanted to pair with. Who he'd want for himself. Surprisingly, he found himself thinking about Zoe. \n\nWith his mind racing about other things, Tim lost the race. Maybe this was the lack of 'killer instinct' that Taylor was always complaining about. He hoped Colin would be generous with his punishment. \n\nColin spent a good amount of time looking from girl to girl. Then finally he shrugged and pointed to Zoe. \"Show her.\" Zoe looked confused, but Tim just shrugged. He grabbed her hand and lead her back to his bedroom. \n\n\"Three minutes!\" Taylor called after them, \"Not to completion.\" \n\n\"Tim'll probably go twice in that time,\" Zach said and snickered. \n\n\"And how, exactly, would you know that, hm?\" Courtney asked. Zach stopped laughing. \n\n* \n\nBack in the bedroom, Tim turned down the light a little and then climbed up on the bed. Zoe sat across from him. She really was quite attractive, Tim thought to himself. It was just she was busy frowning all the time so it was hard to notice. \n\n\"If this is to show me your comic book collection...\" \n\n\"Fuck, Zoe, why do you have to be such a bitch all the time?\" Tim said, the words tumbling out of him all at once, \"You seem like a great girl. Really smart and super attractive. I don't know why you feel the need to be so... awful.\" \n\nTim hadn't intended to say any of it. He sat back, almost shocked at himself. Braced for the blowback. \n\nZoe, though, didn't do anything. They just sat there in silence. Finally, Zoe put her head down and sighed. Spoke to the bedspread \"I'm sorry. I'm just in a crappy mood. I wasn't expecting all this. With everyone and Zach. And you.\" \n\n\"You've seemed OK to me. Even caught you smiling a few times.\" \n\n\"I know. I really am having fun. Only I don't think I'm supposed to be having fun and it's got me twisted up inside.\" \n\n\"I know exactly what you mean,\" Tim said. \n\n\"OK, so what do you have to show me?\" \n\nTim reached down and took his cock in hand. The argument with Zoe had shrunk him up some, but seeing her now was enough. Her breasts hung tantalizingly just an arm's length away. Her legs hung open, so comfortable showing her snatch. Tim started to slowly stroke. \n\n\"Oh,\" Zoe said, suddenly watching him intently, \"Oh my.\" \n\nTim just kind of tilted his head. He took his time. Savored. \n\n\"Should I...?\" Zoe asked and sort of reached down at her snatch. \n\n\"He said 'show her.' He didn't say anything about showing me.\" \n\n\"Oh. OK,\" Zoe seemed almost disappointed. \"You, ummmm, you have a nice cock. Really thick.\" \n\n\"That's time guys!\" Taylor called from the living room. Tim hadn't gotten into much of a rhythm so it was easy enough just to stop. He took Zoe's hand and was surprised when she squeezed him back. It made him want to be brave one more time. \n\n\"It seems to me that we have plenty of time to be old,\" he said as they started to walk out of the room together, \"The rest of our lives, really. So why not stay young for as long as you can?\" \n\nZoe nodded. \"Yeah - I'm starting to see that.\" \n\n* \n\nWhen they came back, everyone teased Tim and Zoe about what might have just happened in the bedroom. Taylor could tell that they hadn't done much. She decided, once again, she should try to push things forward a bit more. After all, how could you get anywhere if you only stood still? \n\nTaylor's next race was another wild card. The luck gods selected Paige, which was a tough matchup. Still, Taylor could tell that Colin's little sister wasn't taking her as seriously as she should. Paige was still expecting round 1 Taylor, and not the new, dangerous playing-to-win Taylor. I really need to thank Sydney, Taylor thought to herself. \n\nAfter Taylor took the win, Paige seemed disappointed, but not too disappointed. As the only single girl there, Taylor knew the cute coed had to be thinking about having a little fun. Now it was just a matter of picking who to pair her with. \n\nObviously, all kissing aside, Taylor couldn't put Paige with her older brother. That meant Zach or Tim and that was an easy choice. What kind of girlfriend would she be if she didn't throw a hot piece of college ass Tim's way every now and again?  \n\n\"Teach him,\" Taylor said, pointing at Tim. Both newly partnered players looked confused. \n\n\"Look guys,\" Zoe said. \"We're all naked, we're all fooling around. Speaking in code like this is just dumb.\" Zoe of all people! You could have knocked Taylor over with a flaccid dick. \n\n\"It's immature,\" Colin said. \n\n\"Agreed,\" Zoe said. \"Just say what you want. No one is going to judge you. Trust me. Taylor, if you want Tim to stuff a lubed-up banana in Paige's ass and then play the banjo while she sucks him off then just say so.\" \n\n\"That isn't what you want is it?\" Tim asked. \n\n\"No,\" Taylor said, \"But it's a good idea for the next round. Paige, show Tim how you get off, then have him do it for you.\" \n\n\"To, ummm, completion?\" Paige asked. Zoe made a low exasperated sigh. \n\n\"You've got five minutes,\" Taylor said, \"Whatever you can accomplish in that time is fine by me. So if you want to get off, better teach him quick.\" \n\nPaige grunted, grabbed Tim's hand, and dragged him back to the bedroom once again. \n\n\"You guys are really going to need new sheets,\" Zach said. \n\n\"Whole bedroom set,\" Taylor said, \"Supposed to be delivered on Thursday.\" \n\n* \n\nTim climbed back on the bed. Paige sort of flopped down next to him. He felt a bit of deja vu - only it was a different girl. Still he wondered if the same forthrightness might help him forward. \n\n\"Paige, I'm sorry,\" Tim said, \"I don't really know you all that well, but I feel like we got off on the wrong foot. If you just want to sit here and glare at me for five minutes, that's fine. I'll tell the others I was too stupid to figure it out, or whatever.\" \n\n\"What? No, you're fine,\" Paige said, \"Look, the timer is already running. This has been a whole lot of build up for not much action and my pussy is fucking aching. So if you don't mind?\" \n\n\"Oh,\" Tim said, \"Sorry.\" \n\nThe pretty young brunette spread her legs and dipped a finger into her hole. She slowly rubbed it in and out while she teased her clit with her free hand. Paige kept slowly rubbing, talking like she was doing a cooking demonstration while she warmed up her tight, little oven. \"Put a finger in me to start. Just one. Then with your other hand sort of rub around until you find my clit.\" \n\nThis was Colin's innocent little sister? Tim had watched porn that was less explicit. \n\n\"Seriously, get to it,\" Paige said. Tim did as he was told and put his pointer in Paige's snatch while he felt around for her magic button. The little bundle of nerve endings wasn't hard to find, it practically leapt into his palm. Paige gave a long loud sigh. \n\n\"There you go. Now just swirl that back and forth. Lightly! That's it. Very slowly, put a second finger in me...\" \n\nPaige reached down and lifted her breast. It was big enough that she could kind of lick at the engorged nipple. \n\n\"Want me to do that?\" Tim asked. \n\n\"Whatever floats your boat,\" Paige said. Tim took her breast into his mouth and it was glorious. So round and full. He desperately wanted to caress it with his hands, but they were a little busy at the moment. \n\n\"Faster,\" he heard Paige say. \"Harder.\" \n\nTim pressed down on her clit and started really rubbing now. He knew Taylor liked a side-to-side motion and so he did the same to Paige. She didn't complain. He sawed his two fingers in and out of her. The coed was so tight, he thought that it might be better just to go back to a single digit. \n\nPaige started making little noises now, in time with Tim's movements. It was so hot, seeing this pretty girl get off - even hotter that he was the one doing it to her. Her ponytail swished back and forth. Her pink, glossy lips squeezed shut. Big brown eyes open. Searching. \n\nPaige's whole body began to buck. Her legs and thighs kicking out. Tim felt her body begin to tremble and then... \n\nTIME \n\n\"That's time guys!\" Taylor called out. Tim would have been willing to continue - seriously, what was Taylor going to do? - but Paige slipped off the bed and stood. She gave Tim a little kiss on the cheek, and then the two of them went back to the living room. \n\nPaige's older brother was standing there staring expectantly. Colin hadn't looked this upset when Tim had been doing all kinds of stuff with his wife, Tim thought. But he seemed nervous now. Anxious. Even a little angry? God, Tim hoped not. What had Taylor gotten him into? \n\n\"He was a perfect gentleman,\" Paige said, then kissed her brother lightly on the cheek. That seemed to settle Colin down and they started the next race. \n\n* \n\n\"I'm tired of Tim getting all the action,\" Colin said. Zach agreed. \n\n\"Good thing I'm racing Courtney next,\" Zach said. Colin practically froze in place. \n\n\"I mean, ummm...\" Zach said, \"Fuck. I'm sorry, man. That's not what I meant.\" \n\n\"It's cool,\" Colin said. First Tim with his sister then Zach with his wife. Even if Courtney won, she might... Colin sighed. This is fun, he told himself. He looked over at Taylor - naked, sexy Taylor with the tight body and the great tits. Oh yeah he felt far better about everything now. \n\nColin glanced over at his sister. Paige had come back looking a little flushed and for a moment Colin had pictured himself in the bedroom watching Paige's breasts shake back and forth while he stroked his sister to... \n\nOK, maybe he was feeling a little too much better. \n\nColin looked up at the race and saw that Courtney had won. Zach had been unstoppable for the first round, but now he couldn't seem to get going. What had happened? \n\nCourtney eyed Zach. With their different heights, his penis was practically level with her stomach. Finally she just grabbed his hand and dragged him forward, \"Come on,\" she said. \n\n\"What's the favor?\" Taylor asked. \n\n\"Just set the timer for five minutes!\" Courtney said. \n\n\"Well, OK then,\" Taylor said. \n\nWell this was something new, and it didn't make Colin feel very good about things. He'd accepted that Courtney wanted to fool around. Had even come to enjoy his own little extramarital adventures. \n\nBut this felt different somehow. She was going off to another room to do who knows what and it... \n\n\"Wait,\" Colin said. The whole room froze in place, Courtney and Zach already halfway down the hallway. \"I just, ummm, maybe you should stay out here.\" \n\n\"Everybody has done stuff,\" Taylor said, \"You can't just...\" \n\n\"No, no,\" Colin said, \"Of course she and Zach should still do whatever they were going to do. But if it's out here then everybody, y'know, knows what's going on.\" Yes, that made much more sense, he thought. My friend should totally fool around with my wife - I just want to watch it happen! God this was a weird world he was now living in. \n\n\"That's fair,\" Zoe said, \"I could see wondering about what actually went on.\" \n\n\"I don't know,\" Courtney said, \"Won't it be weird, like, watching?\" \n\n\"To me it's actually a lot more fun this way,\" Paige said. \n\n\"We all did it in front of each other last time,\" Taylor said, \"And Courtney, didn't you tell me you wanted to see more?\" \n\nCourtney sighed, clearly defeated. \"OK. I want to y'know. While he... Y'know.\" \n\n\"God dammit,\" Zoe said, \"I thought we talked about this.\" \n\n\"Right,\" Courtney said, clearly thrown off by all these new events, \"Sorry. I want to rub myself off while Zach rubs himself.\" \n\n\"I'll give you three minutes for that,\" Taylor said. \n\n\"I don't think that's enough time for me to...\" Courtney stopped herself. \"Three minutes is fine.\" \n\nTaylor set the time on her watch. Tim tossed Courtney a pillow, but she pushed it away. \"I've been practicing the other way,\" she said. \n\nCourtney sat down on the floor with Zach across from her. They both took themselves in hand and started working. Colin didn't really want to focus on what his wife was doing. But then he didn't want to watch Zach, either. \n\nAlmost immediately, Colin heard Zach's breath begin to catch. Courtney mewled and gasped. They were both getting close. No doubt urging each other on. \n\nExcept for the one time at the party, when everyone had been so worked up that it hardly mattered, the couples had managed to keep their moment of ecstasy private. Colin thought it was better this way. Courtney's orgasm, unique to her, ought to be his and his alone. Zach shouldn't know how Courtney's whole body would tense when he reached her apex. The way she'd gasp - like holding her breath - and turn bright red. \n\nBut Courtney certainly seemed on her way to sharing when, finally, the timer went off. Taylor's phone sang a happy little jingle that seemed almost mocking in the context of what they'd been doing. \n\nCourtney gave a big sigh and reluctantly dragged her hand away from her dripping pussy. Zach leaned back, eyes closed, like searching for the serenity to go on. \n\n\"How was that?\" Zach asked. \n\n\"Fun,\" Courtney said, \"I think I prefer the pillow, though.\" \n\n* \n\nWith two races to go, Taylor, Tim and Courtney shared the lead with three wins each. Everyone else was tied at two, except for poor Zoe who might as well have retired from racing right then. \n\nZach looked really agitated from his previous punishment. He was pacing back and forth, his long thin penis extended out like a rapier. Now that she was sure that Zach was truly, fully engorged, Taylor was positive he had the longest penis in the apartment (though a good bit thinner than Tim's thick tool). She started to wonder what it might feel like inside her. \n\nWell, the sexy brunette was certain she wouldn't get to experience that. But she decided to help poor Zach out in other ways. He was her opponent for the next race, so that made things pretty easy. \n\nFor a moment, Taylor considered letting Zach take the win and see if he'd take her. But she decided that winning the big game was more important. She could have whatever she wanted if she won. Instead, Taylor destroyed him on the track. \n\nShe was well into her victory lap before Zach even finished. He tossed the controller down and made a pained noise. He'd clearly planned on taking care of things if he'd won, and Taylor felt a twinge of regret at not letting him. But not for long. \n\n\"It's OK,\" she told him, \"I've got you.\" \n\nTaylor stood in the center of the room and gestured for Zach to stand, too. He looked up at her warily, then limped over. Taylor figured the poor boy's balls had to be blue as marbles by this point. \n\n\"Just come over here,\" Taylor said and grabbed him by the cock, pulling him forward. If Zoe had any complaint, Taylor didn't hear it. She just glorified in how Zach's cock felt in her hand. Warm and strong yet soft to the touch. \n\n\"Holy fuck,\" Paige said. \n\n\"Hell if that's a loss, I'll never win again,\" Colin said. ",
        "The whole room seemed to shrink down just to her and the man she was stroking. She resisted to urge to claim Zach as she had Colin. It was enough of a turn on for her to hold him under her control with only her hand and a sultry smile. It didn't take more than a couple of strokes. Zach bent over as if in pain. His face turned practically purple and he made a low, long groan. \n\nThen Taylor felt his warm, white fertility splash against her arm. Her chest. It was a pretty impressive distance, actually. She felt another on her tit and almost came, herself, right there. Zach's eruptions slowed and sort of dribbled out onto Taylor's hand. She giggled - a happy little thing she hadn't even intended on. \n\nZach straightened again and gave her a little wave of thanks, like she'd just fixed a flat for him. Taylor went over to the kitchen and wiped Zach's cum off her chest and hand. The room was murmuring. Buzzing. Everyone looked at around, realizing that they had reached a whole new level. \n\n* \n\nThe next race was Zoe against Colin. Tim could tell that both were looking forward to what would happen if they won. Maybe Colin was looking a little too forward, though, because he lost. Though he didn't seem too unhappy considering what Taylor's 'punishment' had been for Zach. \n\nSure enough, Zoe reached right for Colin's crotch, but Paige stopped her. \n\n\"Just wait till Tim and I go,\" the cute coed said and flashed a glossy smile. \n\nTim was bewildered, but Paige gave him a little wink when they sat down to race. Which left Tim feeling even more confused. Perhaps that had been her plan - Tim was so distracted that he choked away his chance and Paige won. \n\nAfter the last display - not to mention all the touching and teasing that had gone on before - both boys were raring to go. Zoe and Paige also both seemed excited to try their hand at things. Paige pointed for both boys to sit on the couch, flagpoles raised. \n\nPaige looked at Zoe and smiled, \"Let's do a different kind of race. Whoever gets their boy to blow first earns a favor for later.\" \n\nThey shared a naughty smile and then knelt down. Tim practically seized when Paige grabbed his cock. He looked over and saw that Zoe had done the same to Colin. \n\nPaige leaned forward, dragging her breasts over Tim's cock as she did so. She put her lips to his ear. \"If you go first, it'll be in my mouth,\" Paige whispered. Tim's cock nodded in vigorous agreement. His entire existence shrank down to just him and the girl who held his hardness in her hands. \n\nTaylor said \"go\" and then, they were off. Paige wasn't the most skilled at this. She gripped a bit too hard and went a bit too fast but it hardly mattered. Her little fingers looked so sexy barely wrapped around Tim's cock. Over the blood rushing in his ears, Tim could hear his girlfriend cheering him on. Heard Colin's wife doing the same. As if he needed any more encouragement \n\n\"Oh God,\" Tim said. The pleasure raced right up his shaft. As promised, Paige dropped her head right down and suddenly his dick was engulfed in warmth and wet. The brown-haired coed made a sexy slurping noise and Tim was off. Huge bursts - as much as he'd ever cum - rocketed out into her waiting mouth. \n\nPaige seemed to choke a little but then settled, swallowing Tim's seed. He heard Zoe gasp and Colin sigh next to him. But it was too late. Paige had gotten her win and her reward. She sat up and Tim was pleased to see a little dribble of his semen trickle out the corner of Paige's mouth and down her chin. \n\n\"That was thicker than I expected,\" Paige said, \"But nice.\" \n\nTim looked up and saw Taylor give him a wink. He mouthed the word 'thanks' and she just gave a little bow of her head. Tim and Colin laid back on the couch like they were sewn there. Paige gave Zoe a little high five with her non-penis hand. Zoe asked about her favor. \n\n\"I'll collect soon,\" Paige said to the tall woman, \"Just not yet.\" \n\nThe last race of the round was the final wild card: Courtney against Zoe. As both naked women squatted in front of him, Tim was shocked to see his cock start growing all over again. He didn't want to look over at Colin, but sure enough, his friend also seemed to be in a state of recovery. They shared a stupid grin, but refrained from a high five. \n\n\"This is awesome,\" Colin said. Tim could only nod in agreement. \n\nZoe had been on a bit of a hot streak, somehow, but Courtney ended it quickly. The auburn-haired girl stood and smiled at Zoe. Clearly Paige's performance had given her ideas. \n\n\"Show me how you suck your boyfriend off,\" Courtney said. \n\n\"My boyfriend? That's not very much fun, now is it?\" Zoe said. Everyone marveled at how far the tall woman had come since the beginning of the game. \n\n\"You had someone else in mind?\" Courtney asked, looking over at Tim and Colin. Tim had no doubt that he'd be ready for another go-round, especially with the tall woman's waiting mouth. \n\n\"Actually,\" Zoe said, \"I was hoping to get a chance with you.\" \n\nCourtney went practically purple. But instead of saying anything, she just lowered herself to the floor. Courtney looked shell shocked, lying back with her legs slightly open. Zoe smiled back at the room, then knelt between the auburn-haired girl's legs. \n\nTim gave Colin a questioning look. \n\n\"Not that I know of,\" Colin said, \"But we're learning all kinds of new stuff tonight.\" Tim heard Courtney's breath catch as Zoe's tongue made contact. Then she gasped again. Like she couldn't keep air. \n\nTim saw Courtney's chest undulating, her eyes flitting around the ceiling. Then she straightened like she'd been given an electric shock. Zoe was making almost rude slurping sounds. The tall girl was lying on her stomach, fully engaged in her meal. Her tight little buns shook as she worked at Courtney. \n\nTim's erection returned in full force, then started getting even harder. He leaned forward. The whole room did. Courtney's leg kicked out. She stopped breathing entirely. Fists white as they squeezed the little living room rug. Her whole body held in place but for that one leg jolting. \n\nAnd then like a teapot, Courtney let out a long, high-pitched \"Ahhhhhhhhhhhh.\" \n\nZoe picked her head up. Her face sticky with Courtney's juices. Colin's wife just lay there, as post-sex-stupid as her husband had been only a minute before. \n\n\"You OK?\" Taylor asked. \n\n\"Yeah,\" Courtney said. \n\n\"Was it nice?\" Taylor asked. \n\n\"OH yeah.\" \n\n\"It looked nice,\" Taylor said. \n\n* \n\nAfter a day of telling herself that nothing too crazy would happen, Taylor realized that they had already gone farther than she'd ever intended. And there was still a good bit more to go. \n\nThey were down to the last set of races. The room was feeling charged from the round before. Even those who had gotten a bit of satisfaction seemed raring to go again. Everyone was excited about what might happen in the final round, and, perhaps, a little nervous about what the ending would bring. \n\nTaylor, however, was feeling good. With four wins, she was almost uncatchable - her gambit had gone off without a hitch. Nothing to do now but bring it on home. Taylor's last race was against Courtney. Colin's wife was still a bit dazed from her previous punishment. Or maybe Taylor was too good at the game. Regardless, Taylor coasted to another easy victory. \n\n\"Show my boyfriend how you suck dick,\" she told her friend. Courtney simply smiled and knelt in front of Tim. \n\n\"Just enough to give him a taste,\" Taylor said. \n\n\"Pretty sure she' the one who'll be getting a taste,\" Paige said. The room laughed. Courtney leaned over and in one slurp, took Tim into her eager mouth. Taylor couldn't really judge Courtney's skills from where she stood, but Tim certainly looked pretty happy with how the auburn-haired girl was doing. He lay back on the couch looking content. \n\nIt was weird, but Taylor felt proud of herself. Her whole plan had been to make things up to Tim. The first party had gone OK, but this time around she felt like she'd finally made it work. She could see the finish line, her final bit of balance. She knew they'd both be OK to move on after this. \n\nTaylor could tell Tim was getting close. She gave Courtney a little nudge and told her to stop. Tim looked a little upset, but then he seemed to relax. Taylor couldn't help herself, she leaned over and whispered in Tim's ear. \"Am I doing it? Am I making things right?\" \n\n\"Oh honey,\" Tim said, \"You never had to...\" \n\nTaylor reached down and surreptitiously squeezed his balls. Just a little bit. \n\n\"Yeah,\" Tim said, \"Yeah you are.\" \n\n\"Well just you wait,\" Taylor said. \n\n* \n\nColin had done his best to ignore his wife while she sucked Tim's dick right next to him. If there even was a line at this point, Colin felt like they'd crossed it. In her hands was one thing, but to be in her mouth - in his wife... \n\nColin told himself to let it go. Stopping things now would only make them worse, he knew. This was what Courtney had wanted. He contented himself with the idea that the wilder it got, the sooner she would surely be ready to go back to being his and his alone. \n\nTaylor's win guaranteed her a spot in the finals. Colin had no idea what the brunette was planning, but he had a feeling he might enjoy it. So it didn't bother him too badly that the only people with a chance at meeting her in the winner's circle was Tim or Paige. \n\nIt also meant that Colin had one last chance to do right by someone he loved. He was racing Paige in the last round. He might as well have never picked up the controller - Paige took the win easily. His little sister jumped up and cheered. She gave Colin a kiss on the cheek. Her ample breasts pressed against his arm. He hoped no one noticed how much harder his cock got when she did that. \n\n\"You really are my hero,\" she whispered in his ear. Then stepped away. The whole room waited for her to announce her brother's last punishment for losing. \n\n\"Tim got a little taste from Courtney,\" Paige said, \"I think it's only fair that Taylor do the same to Colin.\" \n\nColin sat back on the couch. Taylor looked like a jungle cat as she stalked over to him and then lowered herself between her legs. Colin liked oral, but it wasn't his favorite thing in the world. It was nice, he supposed, but he'd rather be in a pussy. \n\nThen suddenly he was in Taylor's mouth and his whole world went upside down. The lithe brunette licked up from his root to his shaft like he was made of ice cream. She swallowed his head and ran her tongue around it. \n\nThis wasn't giving head - it was cock worship and all Colin could do was amaze at his opportunity to be the idol in question. Whatever he'd been getting from Courtney all those years, this was something altogether different and incredible. \n\nTaylor had his whole cock in her mouth now, applying marble-through-a-straw level suction. He wasn't going to cum. He was going to explode. His entire body was just going to liquefy and shoot right up his shaft. \n\nThen Taylor pulled away. His cock dripped cold with her saliva. She smiled at him, a cock-eating grin. Like she knew what she'd done to him. She leaned forward and whispered in Colin's ear. \n\n\"Mine.\" \n\nAnd Colin couldn't help but think, in that moment, that she was right. \n\n* \n\nTim's last race was against Zoe. If he won, it'd force a playoff with Paige for the final round. Everyone knew Colin had lost intentionally - it was his sister after all - but Tim couldn't help but feel cheated a little. He didn't have anyone helping him along. Well, actually, Taylor had definitely taken a dive for him a few times. \n\nStill, though. \n\nThe good news was, Tim was taking on the closest thing to an automatic win: Zoe. The gorgeous girl's little winning streak aside, she was objectively terrible at Mario Kart. \n\nThis one race was for everything. Who knew what kind of crazy stuff awaited the winner? Tim did his best not to look at Zoe sitting next to him. Her long legs, flat stomach, almost-perfect breasts. She was no Sydney, but still. \n\nNo. He had to hunker down. He focused on the game. The race. Only. He got off to a good start and by the second lap he was cruising. \n\n\"I think you've got me,\" Zoe said. She was right. All that buildup had been for a mostly boring race. Tim and Paige were now tied. \n\n\"We'll do a four race playoff to see who goes to the finals,\" Taylor said. Tim was so excited, he almost forgot about Zoe's punishment. Then he smiled. He'd been in every girl's mouth but one. \n\n\"May as well try you, too,\" he told Zoe, \"You know. For science.\" \n\nZoe laughed and then gestured for Tim to take his seat. She got on her knees put her lips over his cock head. She lowered her hand to his balls and lightly squeezed. Wrapped her tongue around his shaft. \n\nZoe didn't really go after it, knowing that it was only supposed to be a tease. Instead she languidly licked at Tim's cock. Like savoring a particularly special treat. It lacked the wanton urgency of Taylor, the sort of sloppy enthusiasm of Courtney, the spoiled innocence of Paige. But it was oral all its own - almost elegant - and Tim couldn't help but feel like Zoe was putting a little extra into it. Like she wanted to please him. \n\nZoe stopped and let him go with a pop. She smiled and wiped her mouth. Then she sat back down. If everything had stopped in that moment, Tim realized, he would have been happy. \n\nThe most fun was yet to come. \n\n* \n\nThey took a little break before the playoff. Paige poured more drinks and a little line formed leading up to the bathroom. Taylor took the opportunity to take Tim aside. They stood by the front door, away from everyone else. \n\n\"Are you OK with this,\" Tim asked, \"All of it?\" He couldn't help but notice the similarity to when they'd stood the talking about Steve and Sydney. Before it had all gone horribly wrong. Or wonderfully right, depending on your perspective. \n\n\"Yeah,\" Taylor said, \"I mean, of course. I set this all up for you.\" \n\n\"And if things go further?\" Tim asked. \n\n\"Oh, I'm going to make sure they do. Don't you worry,\" Taylor said, \"But no matter what happens next? I'm out.\" \n\n\"Why?\" \n\n\"I set this up to make things up to you. I wasn't even supposed to do things last time. It just kind of happened.\" \n\n\"And you know I'm OK with that, right?\" Tim said \n\n\"Maybe you are,\" Taylor said, taking a big sip of her drink, \"But I'm not. This is it. After I win, I'm bowing out.\" \n\n\"And if I win?\" \n\nTaylor smiled, somewhat patronizingly. \"If you beat me? Do whatever you want, I guess. But give me the shaft. I mean, not literally. Like, don't give me anyone. You know what I mean. Dammit. Stupid English language.\" \n\nTim laughed. \"Look, you don't owe me anything. We're even. This is fun. More than fun it's amazing. And if that... other thing had to happen for us to get here I'm OK with that too. You deserve to enjoy yourself.\" \n\n\"I appreciate you saying it,\" Taylor said, \"I really do. But this is about how I feel and this is how I feel. Enjoy tonight. I want you to. Just... promise me. No sex. I mean, you know, the big thing. Lick and tickle whatever you like, but I don't want that amazing cock in any pussy but mine. I hope that's not too much to ask.\" \n\n\"Yeah, I mean. Of course.\" \n\n\"I talked to Courtney,\" Taylor nodded over at Colin's wife. She was leaning against the wall and talking to Zoe, probably about what the tall woman had done to her earlier, \"She feels the same way. She already told Colin the rule and we're all going to stick to it. OK?\" \n\nTim just nodded. Taylor reached over and rubbed her hand through his hair. Over his cheek. She kissed him lightly on the lips. \"Now go destroy Colin's slutty little sister.\" \n\n* \n\nTim grabbed his controller while Taylor selected a set of four tracks. Paige took her mascot, Mario and Tim chose Yoshi. He needed every advantage he could get and the little green dino was where he was most comfortable. Previous failures be forgotten. \n\nTim took the first race fairly easily - Paige hit a cow and was never able to recover. Tim lost the second race but it was very close. The third, it was Tim's turn to make a crucial mistake. He took a jump wrong and ended up deep in the ocean. \n\nTim looked over at Paige. She was focused on the screen. Her ponytail had come a bit loose and strands of brown hair hung in front of her face. A trickle of sweat slid down her forehead and nestled between her pendulous breasts. Her large pink nipples were erect and occasionally they'd scrape against the controller, not that she seemed to notice. \n\nColin knew Paige played sports but he hadn't realized how competitive she was. Colin's fuckable sister sure seemed focused on winning the race. She almost looked like Taylor sitting there, so consumed. Tim wondered what Paige wanted so badly. It seemed so much more important to her and he couldn't imagine why that would be. \n\nThey were tied with one race to go. The last track was a busy highway filled with buses and cars. Tim took his usual route, using the walls to stay away from the obstacles. Paige got ahead quickly, though, and no matter what Tim did he found himself well behind her. \n\nThe last lap and, finally, he had Paige's Mario in his sights. He grabbed a weapon box and prayed for something good. A red shell would be best. Sure enough, that's what showed up. He waited. Let her center in his sights. Then Tim let it fly. Suddenly his whole screen exploded. He'd been bombed before he could fire the shell. When Tim recovered, Paige was long gone. \n\nWell, at least it wasn't a blue shell, Tim told himself. He felt something akin to remorse, then. He wondered if this was how Taylor felt when she lost. Usually, even when things had seemed to go really bad, a game just never got to Tim. Now he felt like he'd let himself down. Which was silly of course. Mario Kart was fun but it was just a stupid video game - it didn't matter the way that friends or family did. Or love. Tim looked over at Taylor for reassurance. \n\nShe just chewed her lip and crossed her arms over her tiny tits. \n\nPaige stood up and got high fives from the group. Then she rounded on Tim with a wicked grin. \n\n\"Well Tim,\" she said, \"You made such a big deal about being in every girl's mouth, I think it's only fair that you get a taste of each of us.\" The room cheered. Tim just smiled. This little coed thought she was giving him a punishment? She had no idea. \n\nZoe, Courtney, Paige, and Taylor all squished together on the couch. They did their best to spread their legs, offering Tim four tasty treats. \n\n\"Just a taste, remember,\" Paige said. Tim nodded. He got down in front of Zoe, moving left to right. He thought her little black landing strip looked a little ridiculous (either keep it all or shave it) but her pussy was really lovely. Just like the rest of her. \n\nTim started slowly, teasing at her labia. He felt her long legs sort of cross around his back. Deciding to give as good as he got, he gave Zoe long lazy laps with his tongue, from her dripping hole up to her clitoris. Gradually, he teased upward and, when he got used to her rhythm he quickly shifted and took her clit in his mouth. \n\nHe heard Zoe gasp. Her legs snapped around him tighter. Tim hummed lightly and then began mashing her clit back and forth with his mouth. He heard her make a long surprised squeeeeeeee. But as he felt Zoe's edge approach he simply stopped. Tim looked up and saw she was panting. Sweat ran down her chest. She crossed and uncrossed her legs - the anxious frustration of alllmmmooooost. \n\nTim moved over to Courtney. As he remembered, Court's hungry puss had a slightly stronger smell and he hoped that translated to her taste. Again, he started slowly - testing and teasing. This time however, he curled his tongue and slit it right into Courtney's snatch. \n\nHe felt her stiffen. He pulled back, slowly dragged his tongue up to her clit, then went back down to her hole. Back and forth, sliding and licking, till he felt Courtney's leg begin to tense and then he pulled away. ",
        "\"Dammit,\" she cursed. Tim smiled, tipping an invisible cap her way. He moved on to Paige. Being in college, Tim doubted any guy had ever gone down on her all that well. It took a lot of partners and a ton of practice for a boy to get good. \n\nOf course, dating Taylor was like getting an advanced degree in cunnilingus. He decided to share his hard-earned knowledge with the cute coed. She was dripping, already clearly anticipating what was about to happen. Tim licked her juices from her inner thigh, then followed them up to the source. \n\nCompared to Courtney, Paige's scent was almost nonexistent. She had a full bush of brown hair. Gently, Tim tested at Paige's folds. She sort of whimpered as he ran his tongue over her most sensitive parts. \n\nHe performed a sort of greatest hits on Paige, sucking on her clit, penetrating her with his tongue. Gradually moving back and forth. Faster. \n\n\"OH! Oh FUCK!\" Paige cried. Tim took this as his cue. He found her clit with his mouth and swirled it with his tongue. No one had said he couldn't use fingers, so he quickly reached up and slid a digit into Paige's womanhood. That was enough. \n\n\"Oh. OH! FUCK. P... please... I'm going to...\" \n\nTim pulled back and saw Paige was gasping for air. Whatever was left of her ponytail had come completely apart and her hair was splayed everywhere. Tim had never been so happy to leave someone dissatisfied with his performance. \n\nNow only Taylor was left unlicked. He knew what she liked and went right to it. The day's events, especially the last few minutes, had clearly been too much for her. Tim couldn't remember the last time his girlfriend had been this wet. She put her hands behind his head and held him there. Muffled through her legs, he heard her rambling. \n\n\"Oh. Oh, Tim. My beautiful boy. Keep... keep licking. Oh that's niiiiiiiiiice. Don't I have a nice pussy for you? Oh can you taste how much I want you? Oh, right there. oh. Oh. OH!\" \n\nAnd Tim stopped licking. Taylor punched his shoulders, not altogether playfully. \"Dammit! You know what you were doing to me.\" \n\nTim smiled, \"Blame Paige, she was the one that made the rule.\" He stood and brushed himself off. His face was sticky from four different women. All of whom now looked ready to burst. Irritated about the state he'd left them in. \n\nIn fact, it seemed that the only person who was feeling content in that moment was Tim, himself, as he leaned back leisurely on the couch. \n\n* \n\nTaylor was ready to kill Tim. First he'd lost to Paige, which she couldn't believe. And then his little trick with licking her. Damn that talented boy. If she'd been on the edge before, he'd left her on the edge of that edge on a cliff on a peninsula on... Fuck! \n\nIt was messing with her concentration. Fortunately, Taylor could tell Paige was in the same place. So at least the finals would be fair. As Taylor set up for the final round, Zach came over to her. \n\n\"So, ummm, what happens now?\" he asked. \n\n\"We do four races, just me and Paige. Whoever wins gets one last favor from the rest of the group.\" \n\n\"What would that be?\" Zach asked. He sounded nervous. Taylor turned to face him. It was strange having all these serious conversations completely naked. And despite his obvious earnestness, even now, Zach was looking down at her little boobs while he spoke. \"I just don't want things to go, like, too far. Y'know?\" \n\nLike they hadn't already, Taylor thought. But whatever. \"Last time we all rubbed off in front of each other.\" It felt weird, again, to be talking so casually about such intimate subjects. But if Zoe could do it then Taylor would, too. \n\n\"I could see that,\" Zach said. \n\n\"I'll bet,\" Taylor said and they both laughed. \"This time... That seems almost tame to where we are now. Look, I know what I'm planning. I have no clue what Paige would do. But I'm sure it will be fine. If it makes you feel any better, Tim and I and Colin and Courtney all agreed to a no intercourse rule. It just seems a little... too far. Y'know?\" \n\n\"Yeah. That helps,\" Zach said, \"I'll talk to Zoe. I'm sure she'll agree to the same.\" \n\n\"Good,\" Taylor said. \n\nShe finished setting up the last race. Paige sat next to her. With the coed's massive melons and Taylor's little lemons they made a funny pair, she thought. Taylor chose a set of races that were middle-of-road as far as difficulty. She stayed with Wario. Paige took Mario. They were off. \n\n\"You've got this,\" Taylor told herself, \"You've got this.\" \n\nShe took the first race easily. Then the second. She kept waiting for Paige to step up. To make her move. Taylor won the third but it was close. Something catastrophic would have to happen for her to lose now. Of course something catastrophic would have to happen now. \n\nLast race. Everything seemed to be going fine. Taylor had the lead. She kept waiting to hear the whoosh of the blue shell. It never came. She heard Paige curse and she knew the race was hers. Taylor crossed the finish line amazed. Finally! \n\nTaylor couldn't help herself. She cheered. And it felt like the whole world was shouting with her. \n\n* \n\nEveryone sat and, for the final time, Taylor took her lecturing spot. Tim had slapped together a tin foil trophy and written \"Mario Kart Champ\" on it with a sharpie. She held it in her hand proudly as she spoke. \n\n\"OK - here's the final event. I think this is more than fair.\" Taylor had given a lot of thought to this. Maybe too much. But whatever, it was worth it. \"The boys will all go away and await their surprise. No time limits. Tim, you go to our bedroom. Colin will be in the guest room. Zach, you'll stay out here. Just wait in the bathroom while I sort out the girls. No lights, guys - I want it to be a surprise.\" \n\nThat felt almost too polished, Taylor thought, but if anyone thought so they didn't say. The guys all just nodded and walked away, trying to appear very serious and failing hilariously. The girls looked up at her, anxiously awaiting their assignments. \n\n\"I'm assuming everyone here is OK with trying something different,\" Taylor said. Everyone nodded. Courtney in particular. This was what had brought them together, after all. \n\n\"OK, Zoe you go to Colin's room. Paige you're with Tim. Courtney, I'll go get Zach for you in a moment.\" \n\n\"And we can just do... whatever?\" Courtney asked. \n\n\"Everything but sex. Y'know, sex sex. Intercourse. God it feels weird to say it that way,\" Taylor said, \"But I think that's a boundary we shouldn't cross.\" \n\nThe girls all nodded. Taylor hoped they were OK with their assignments. Mostly she just wanted to toss Paige to Tim because of his whole big breast thing lately. Get it out of his system. \n\n\"With that, I think you should all have one last drink and then go off to your destiny. Just, um, try not to break any furniture. OK?\" \n\nTaylor went to the kitchen and poured four tall drinks. Courtney came over and looked Taylor in the eye. \n\n\"Are you sure about this?\" \n\n\"Look, this whole thing started because of me. I need to make it up to Tim. I just do. It's fine. I'll wait it out in the bathroom. Maybe take a 'bath,' if you get my meaning.\" \n\n\"You know Tim would be fine with it,\" Courtney said, \"More than fine. You shouldn't. You don't need to punish yourself.\" \n\n\"It's what I want,\" Taylor said, \"Trust me. It's for the best.\" \n\n* \n\nWith Taylor and Courtney occupied in the kitchen, Paige quickly accosted Zoe, pulling the tall woman to the far side of the living room. \n\n\"Our race, remember?\" Paige said in a harsh whisper, \"I want my favor.\" \n\n\"What do you want?\" Zoe asked, eager. \n\n\"Trade with me.\" \n\n\"Wait, seriously?\" Zoe asked almost a little too loud. \"Doesn't that put you...\" \n\n\"Shhhhhhh\" \n\nZoe went back down to a whisper, \"Doesn't that put you in the same room as your brother?\" \n\n\"It's OK,\" Paige said, \"I've had enough. This poor college kid can't roll with you big kids. And, honestly, I'm just not that into Tim.\" \n\n\"Oh. Really?\" Zoe sounded surprised, \"I'm sure if you told Taylor she'd switch you and Courtney.\" \n\n\"Nah. The only thing I can think about is sleep. Just, when the time comes 'accidentally' go into the wrong room. I'm going to pop my head into Colin's, give him a kiss goodbye, and call it a night.\" \n\n\"Won't he be disappointed?\" Zoe asked, \"His wife, his friends, they're all hooking up - some of them with each other. And he's just going to sit there and listen to it?\" \n\n\"I'm pretty sure Taylor will take care of him,\" Paige said, \"Once he tells her about the 'mixup.'\" \n\nZoe agreed that Paige was probably right. She didn't want to argue too hard, anyways. When someone gives you exactly what you want, you don't start arguing against them. \n\n* \n\nTaylor switched off all the lights in the apartment and told the girls to go forth. Courtney sat on the couch, waiting for Zach, while Taylor went and knocked on the bathroom door. Zoe and Paige brushed past her. For a second, she swore she saw the girls go into the wrong rooms, but then the door swung open and there was Zach. \n\nTall Zach with his sculpted arms and his extra-long penis just sticking out and begging to be sucked. Taylor sighed. She took his hand and led him into the living room. Taylor could just make out Courtney sitting on the couch, long auburn hair splayed over the cushions. Legs already slightly parted. \n\n\"Enjoy,\" Taylor said, ever the maitre'd. Then she went back to the bathroom. She swore she could already hear the moans and groans coming from the other rooms. She turned on the tap for the bath. \n\nTaylor was content with her decision. Happy, even. Sure she could have taken someone for herself - almost certainly Zach - though it could have been fun to corrupt Colin again, too. But then what was the point of all this? At that point they really would be just fucking around. Taylor loved Tim. She would sacrifice anything for him. \n\nAt least that's what she kept telling herself. \n\nThe water was warm, so Taylor turned off the spigot. There was a knock on the door. Jeez, she couldn't even take a bath without being bothered? If this was someone asking for lube she was going to poke out their eyes with a burning, hot... \n\nIt was Courtney. Taylor's friend stood in the doorway, smiling shyly. Her red-brown hair hung over her breasts like a sexy mermaid. With legs. Courtney didn't say anything. She just grabbed Taylor's hand and pulled her out of the bedroom. \n\n\"Come on,\" she said. And Taylor didn't pull back. \n\n* \n\nTim lay in the dark and wondered what was going on. He heard some banging around out there. The tinkling of glasses. He really didn't know what to expect. He started to think about turning on a light, rules be damned, when the door opened. \n\nHe couldn't make out much, just a thin, feminine shadow. Though it did look kind of tall. He felt a weight join him in the bed. Long legs seemed to brush forever against his own. \n\n\"Zoe?\" Tim asked. \n\n\"Uh huh.\" She pressed her lips to his with a loud smack. \n\n\"Oh, I'm so glad it's you,\" Tim said, and was surprised to find that he meant it. \n\n\"Me too,\" Zoe said and kissed him again, this time dancing her tongue against him, \"You sure you're ok spending an evening with a bitch?\" \n\n\"I'm sorry,\" Tim said, \"I never should have called you that.\" \n\n\"It's OK,\" Zoe said, \"This bitch needed a talking to. And now she's your bitch. At least for tonight.\" \n\n\"I'm really, truly good with that.\" \n\n\"Good.\" Zoe really kissed him now, practically pressed him down into the bed. Her tongue probed at his. Tim felt his feet kick against her shins and it was a weird sensation. Like he was going to have to climb her. He was more than ready to attempt the ascent. \n\nHe felt Zoe trace her fingers through his chest hair. Down over his stomach. To his cock. She grabbed it and gave it a squeeze. \n\n\"I'm yours, huh?\" Tim asked, thinking about Taylor's dirty talk from the week before. \n\n\"You'll have to punish me,\" Zoe said. Tim reached down and playfully smacked her ass. It was firm and tight. Almost as perfect as Taylor's. Zoe laughed and kissed him again. \n\nTim rolled her over and started kissing her now. He dragged his tongue down her neck. Nipped at her collarbone then licked a trail down to Zoe's tremendous breasts. They were a bit small for her body but they were well-formed - soft yet firm and wonderful. He felt Zoe's back arch as he suckled at her sensitive nipples. \n\n\"You have a talented tongue,\" she told him, \"And I feel like I got the least of it.\" \n\nTim looked up at her and smiled. \n\n\"What do you say we trade?\" Zoe pushed him up and climbed on top again. For a moment, Tim was afraid she was going to mount him. This was fun, but he needed to listen to Taylor's rules or else he really would fuck things up beyond repair. \n\nThen Zoe spun around, putting her dripping pussy right in Tim's face. He felt her own warm mouth lower down over his cock. He sighed, happy, and then started lapping at Zoe. \n\nHe'd taken his time with her before. Saved the bigger events for girls further down the couch. Now though, he gave Zoe everything he had. Tongue and lips and teeth, suckling at her clit, lapping at her opening. He dined on her essence like a starving man. \n\nZoe lost her focus on Tim's cock almost immediately. She dropped from sucking to slobbering to barely anything at all - panting and whimpering while he worked her with his tongue. She was gasping so hard, at first he was afraid he was hurting her. But when he paused, Zoe just snapped her legs around his head and held him there. Shouted \"Don't stop!\" like she was in cardiac arrest and his tongue was the defibrillator. \n\nTim found her pace now and started moving faster. Zoe's whole body began to shake. Then he heard Zoe's breath hitch. She gasped, stiffened, and then fell prone. He'd never seen a girl cum so quietly. But Tim was sure that she had because then she started giggling madly. \n\nTim realized he'd known Zoe for several years now and he'd never heard her laugh. Not really. It was bubbly and warm and it kind of made him ache a little. \n\nZoe turned herself around, a goofy smile on her face, and kissed him. Tim was surprised. Taylor never kissed him after he'd gone down on her. But Zoe seemed not to care and she kept kissing his lips, his cheeks, his forehead. \n\n\"That was amazing,\" she told him, \"You deserve a medal or a Nobel prize for that or something.\" \n\n\"It was nothing.\" \n\n\"Nothing? I've never cum like that in my whole life. Not from a tongue or a cock or nothing. I could suck you off every day for a year and I'd never make it up to you.\" \n\n\"You could start with just tonight,\" Tim said, teasing. \n\n\"Nah. I've got something better in mind,\" Zoe said. She reached down and grabbed Tim's cock, placing it right at her pussy. \n\n\"Zoe we can't. I'm sorry. I want to, too, but I promised Taylor.\" \n\n\"It's OK,\" Zoe said and shushed him with a kiss, \"Nothing like that, I promise.\" She tilted Tim's cock upwards and then shifted her bottom oh, so sexily. Then Zoe pressed down and Tim could tell she'd trapped his cock right under her clit. \n\nZoe put her hands on either side of Tim's head like she was about to do a pushup. Then she slowly dragged her body up and back, grinding her clitty on Tim's cock. This must be what it's like to be Courtney's pillow, Tim thought to himself. \n\nHe and Zoe both groaned in unison. \n\n\"You're really thick,\" Zoe said, \"I don't think I've gotten so much girth before.\" She dragged herself forward and back. Body starting to tremble. She was so wet, Tim could feel her dripping on his cock while she drove it down. \n\n\"Certainly never felt it.\" \n\nTim was about to comment that Zach seemed pretty long to him, but he decided that maybe this wasn't the best time to bring up the boyfriend. So instead he just lay back and let Zoe pleasure herself on his cock. \n\n\"My pussy, I don't know if you could feel. It's really tight. Can you imagine just stuuuffffing me with that thick cock. Oh God. Punish me - your bad little girl. Make me take that monster.\" \n\n\"Zoe... I...\" \n\n\"It's ok. When you're going to cum. Just tell me. I want it on my chest. On my face. Cover me like the slutty bitch I am.\" \n\nTim kissed her. Cheeks and fluttering eyelids. Zoe slid back a little further this time. Taking longer strokes. Tim could feel the head of his cock tease at her entrance and then slip away. The grinding felt so good, but he couldn't help but strain as Zoe teased him with her opening. Then slipped away. \n\nShe slid back. He felt his cock bounce right off her pussy this time. She giggled and dragged herself up again. He felt Zoe shiver a little. Then she reached up and grabbed his hands. Intertwined their fingers, held them up above his head. Zoe was strong and Tim found she could hold him there if she wanted to. \n\nZoe slide her body back again. This time Tim's cock went right to her opening. His head kissed at her nether mouth and she held it there. \n\n\"Zoe...\" \n\n\"It's OK,\" Zoe said, \"I promise it's OK.\" She slid back a bit further. He was in her now. Just an inch, maybe less. Not even his whole head. But he could feel himself straining to push forward. \n\nCould feel Zoe desperately trying to suck him inside. \n\n\"You're not saying 'no.'\" She told him. Another inch, then another. Zoe hadn't been kidding, her vagina felt almost virgin tight around his cock. He could see the pain in her eyes each time she slid back. But she kept going. \n\nAnd suddenly Tim felt himself buried to the hilt inside the Zoe's amazing pussy. She squeezed it there and he felt himself almost pass out from the pleasure. He realized, suddenly, that he was in her bareback. He tried to reach out for the nightstand - get a condom at least. But Zoe held his hands firm. \n\n\"Zoe, we're not...\" \n\n\"It's OK,\" she said. Then slowly Zoe slid forward. Now riding his cock. Fuck she was tight. Tim wasn't going to last like this. Zoe started moving faster. Making these oh-so-indecent grunts and whimpers as she bottomed out on Tim's cock again and again. \n\n\"God that feels so big,\" Zoe said. She kept going. Moving as fast as she could while holding Tim's hands in place. Her beautiful breasts pressed into his chest and Tim wished he had just one free hand to squeeze them. \n\nThen suddenly, Zoe stopped. She lifted herself off of him. Then she turned around on all fours. Put her pretty little ass up in the air. Presenting herself to him - testing. Teasing. You can't say I just took you, you have to take me back. \n\nTim got up and slid behind Zoe. Put his hands on her thighs. Aimed his cock at her opening. \n\n\"That's it,\" Zoe said, feeling his cock start to fill her again, \"That's how you take your bitch. That's how you make her yours.\" \n\nTim filled Zoe with his cock. He reached forward and weighed her wonderful tits in his hands. Pinched the nipples hard until she groaned. Then he reared back and started pounding her for all he was worth. \n\nZoe's head dropped down, her body stiffened. Tim felt a gush of girl juice splash against his cock. Zoe laughed again, her cute sex giggle, then kept bouncing against him. Her orgasm somehow made her pussy even tighter and Tim felt his own body start to shake. \n\n\"You going to give your bitch what she deserves?\" Zoe asked, \"You going to cum for me?\" \n\n\"Getting close,\" Tim said, almost as a warning. \n\n\"On my face. My tits,\" Zoe said, \"Like you promised.\" Just as she said the words, Zoe froze once again. Her pussy seemed to squeeze at Tim like she was getting out the last of the toothpaste. \n\n\"Zoe!\" he cried out. Zoe let herself fall forward, then rolled onto her back. Welcoming. Tim grabbed his cock and gave it two quick strokes. He felt the pleasure overtake him. He couldn't tell where he was shooting, just that it was so much and it was everywhere. Zoe's peals of orgasmic laughter echoing off the walls as he covered her in his pearlescence. ",
        "Ah. Ah. Ah. The pleasure overtook him like a hand wrapped around him top to bottom. Every spurt another explosion of ecstasy. Finally it subsided and he looked down at what he'd done. The dark haired girl was covered. Her cheeks, her chin, her chest. \n\n\"Holy fuck that's a lot,\" Zoe said, \"No wonder you're so thick - look how much you must be keeping in there.\" \n\n\"I'm pretty sure it doesn't work that way,\" Tim said and he let himself fall forward. \n\nZoe's body stiffened, one last little cum, and then she laughed again. \"Yeah, wow. I'm definitely going to need more punishing.\" \n\nZoe rolled over and kissed Tim. He felt her heart thumping through her chest, oddly in time with his own. Eventually they lay back. Drifted. Their bodies still wrapped around each other. \n\n* \n\nColin lay back in the darkness and wondered what would happen. He assumed Taylor wasn't going to send Courtney his way. So then Zoe maybe. Of course his first choice was Paige... He meant Taylor. \n\nHis first choice was Taylor. \n\nThe door creaked open. It was someone short - Taylor then. That was fine. More than fine. Best possible result. He felt a body crawl up next to him. \n\n\"Close your eyes.\" That voice sounded kind of like... He felt the woman kiss him, hard. Her lip gloss tasted like cherries. He felt this strange shiver run across his lips and down his spine. \n\n\"Paige?\" he managed to gasp. \n\n\"I traded Tim off to Zoe. She's going to be picking chest hair off her body for weeks.\" \n\n\"What are you doing?\" Colin asked. \n\n\"Kissing you. Duh. Thought it would obvious.\" \n\n\"Paige,\" Colin said, \"We can't.\" \n\n\"Can't what? Invite your sister to a raging sex party where the only person you don't touch is your own partner?\" \n\n\"OK,\" Colin said, \"Things have gotten out of hand. I admit this. But still, Paige.\" Colin let his eyes trace downward to her breasts, hanging so low over his naked body. And beyond that... \n\n\"What's a little sister-fucking after everything else?\" Paige asked. She leaned down and kissed him again. Colin felt himself pulled forward like a magnet. Finally he managed to pull away. \n\n\"Paige,\" he said her name again and found it fell so easily from his lips. Like it was meant to be there. \n\n\"Look, I'm totally drunk and I'm horny as fuck, so guess what? We're doing this. Now be a good brother and fuck your baby sister.\" \n\n\"Paige, I don't think...\" \n\nPaige sighed. She planted her mouth on his and the cherry smell of her engulfed him. Paige pulled back and Colin started to speak. Then his sister reached back and grabbed his cock. She rolled them over, almost steering him with his stick. Now he was on top of her. She pulled his erect penis toward her sex. \n\n\"Like this,\" she said and smiled prettily. It was all jumbled up in Colin's mind. His innocent baby sister with her huge tits and her wanting pussy. Smiling at him softly. Begging him to plow her. \n\n\"I'm on the pill,\" she told him, \"Your little sister needs you. Now come on.\" \n\nHe felt his penis rub against his sister's wetness. Point of no return. \n\n\"Dad's going to kill me,\" Colin said, and then let his cock slide forward into his sister's waiting snatch. They both gasped together. The same, shared genetic sound. \n\nPaige felt super wet but also very tight. Colin pushed a bit harder and felt his cock burst through, filling his sister full. He looked down and saw there were tears in Paige's eyes. \n\n\"Paige,\" he said, suddenly realizing, \"Are you a virgin?\" \n\n\"Not anymore,\" Paige said, grunting. She reached up and dragged her nails down his jaw. He kissed her back. He felt his sister's body start to respond. His own inescapable need. \n\nColin pulled back and then slowly thrust forward. Paige groaned and kind of growled. \n\n\"I don't want to hurt you,\" Colin said. \n\nPaige reached down and grabbed her brother's butt. She started slamming him into her as best she could. \"Don't make love to me. Your little sister needs you to FUCK her. FUCK your sister. Fuck her until she fucking screams.\" \n\nPaige pulled at him and clawed. Forced his cock into her as hard as she could. Colin tried to keep up. Paige felt incredible, like nothing he'd ever felt before. Sex with Courtney, he'd thought it was good. Great even. It was nothing compared to this. Paige's pussy seemed made to fit his dick. \n\nColin bent his head down and took Paige's breast into his mouth. He started lightly sucking. Then he felt a pinch at his thigh. He looked up and she was glaring at him. He went back down to her breast. Sucked harder. Nibbled. Finally bit down hard. \n\n\"Oh, ffffffFFFUCK. Took you long enough!\" Paige said and slapped his ass for good measure. Colin started moving faster. The urge to fill his baby sister with his seed grew ever more insistent. The bed in the guest room was shaking and squeaking, slamming against the wall. Colin didn't care who heard. \n\n\"Keep... fucking... your... sister,\" Paige was saying it over and over again, \"Keep... fucking... me!\" \n\nColin reached down and found his sister's clit. Learning from previous experience, he mashed it down hard into her pubic bone. Paige began to shudder and shake. \n\n\"Cum... cumming... your baby sis is cumming on her brother's cock! AH!\" Paige's innocent face screwed up as the illicit pleasure of her brother's cock washed over her. \n\n\"God... Paige. So good,\" Colin breathed. \n\n\"I know. Oh... Oh God you feel so good. Does your little sis feel good for you?\" \n\n\"Amazing.\" \n\n\"Gonna cum again,\" Paige said. Her pussy clamped down on him like a vice. Colin felt his whole body shake. He felt the urge now overcome him. Almost a fountain of euphoria building at the base of his cock. A raging storm of semen. \n\nPaige seemed to sense it. She froze. Stared up at him with big, scared eyes. \"C... Colin?\" \n\nAnd then Colin exploded into his sister. Filling her with blast after blast of sibling sperm. Paige cried out. Screamed and cursed. Colin felt it all at a distance - could only focus on the pleasure rolling over him as he pumped his baby sister full. More than either of them could contain. Colin felt his own essence leak out of Paige's pussy and soak his balls. \n\nColin looked up, finally coherent again and saw Paige's face covered in tears. She was sobbing. \n\n\"Oh God. Paige. Did I hurt you?\" \n\n\"No. Oh god no. That was... I mean. If I'd known it would be like that? Would've done it long ago.\" \n\nColin stayed buried in his sister's twat. His cock slowly drooling out the last of his sperm. \"Might have been a little hard in the house, what with Mom and Dad around and all,\" Colin said. \n\n\"Would have been worth the risk,\" Paige said. \n\n\"I can see my bratty little sister now, whining about how I'm not fucking her hard enough.\" \n\nPaige giggled. \"Daaaaaad, Colin keeps putting his dick in me!\" \n\n\"You know the rules honey,\" Colin said, doing his best Dad voice, \"You have to take care of your big brother.\" \n\n\"Come on dear,\" Paige said, now doing her Mom voice, \"A good brother always lets his sister finish first.\" \n\nThey both broke into laughter. Colin felt his sister's body shaking around his dick. If felt wonderful and strange and very right. \n\n* \n\nCourtney lead Taylor out into the living room. I don't want to be here, Taylor told herself. But I don't want to leave, either. The lights were still off, but Taylor could see Zach standing by the couch, waiting. \n\n\"You don't have to do anything,\" Courtney said, \"You can just watch if you want. But you're staying.\" \n\nTaylor just nodded. That warm bath seemed like the coldest place on Earth in comparison to where she stood now. Zach's long penis seemed to call to her. Cum hither. Zach bent down and kissed Courtney on the lips. \n\n\"Always had a crush on you,\" he mumbled, \"Both of you. Never thought I'd have the chance.\" \n\n\"Certainly not at the same time,\" Taylor said. \n\n\"Certainly not,\" Zach agreed. He grabbed Taylor's hand and pulled her close. He kissed her on the lips and she let him. He was sloppy and aggressive. A bit too much tongue. But she didn't stop him. \n\nBoth girls took one of Zach's hands and led him to the couch. They sat him down, penis pointing upward. Courtney knelt at his feet. She made a loud smacking noise as she started to suck Zach's cock. Taylor scooched next to her friend. Zach was long enough that Taylor could lick at the base of his shaft while Courtney swirled his head. \n\nZach groaned so loudly, Taylor was worried he was already cumming. But instead he just threw his head back and enjoyed both girls' attention. Without talking about it, Courtney and Taylor got into a rhythm, taking turns sucking on his slim purple head and lapping at his shaft and balls. \n\nIt was strange, but Taylor felt this odd sort of kinship with her friend - sharing this. Like it was a good book or homemade ice cream and not another man's dick. A man who wasn't Courtney's husband or Taylor's boyfriend. \n\nTaylor felt Zach's hand running through her hair and saw he was doing the same thing to Courtney with the other. He seemed to be glorifying in the two girls. Reveling in the idea that both of them were worshipping his cock. \n\nCourtney took her hand and dropped it between her legs. \n\n\"Here,\" Zach said, \"Let me help you with that.\" He slid down from the couch, breaking his blowjob, so he could reach down and twiddle Courtney's twat. Now that was commitment to giving a girl her pleasure, Taylor thought. The auburn-haired wife sighed as Zach made contact. \n\nHe reached over to Taylor and slid his fingers into her delicate folds. Once again - almost amazed at how agreeable she had become -Taylor let him. Like his kisses, Zach was clumsy and a bit overaggressive but the whole situation was so hot it hardly mattered. Judging by the noises Courtney was making, she was enjoying herself well enough, as well. \n\n\"You want to, um, lick me?\" Courtney asked. She was clearly thinking about where Tim had left her, Taylor thought proudly. Zach nodded. He took Courtney's hand lead her back to the couch. \n\nPliant, the auburn haired girl let Zach position her so her face was in the cushions and her ass was in the air. Pink pussy pulsating like it was gasping for breath. Taylor shrugged and joined her friend in the same position. \n\nShe heard Zach lapping at Courtney first. Taylor turned her head to look over at the freckled girl. Courtney's bright green eyes were even brighter. They practically glowed. And they grew ever wider as Zach's attentions increased. \n\nCourtney's whole face seemed to scrunch and then suddenly went lax. Taylor wondered why and then she felt Zach's tongue on her own nethers. Once again, all too much pressure and not enough skill. \n\nIt was nice, but Taylor doubted she'd ever cum from it. Still he got an A for effort which was better than a lot of boys. He even teased at her brown rosebud with one of his long fingers. It wasn't anything Taylor really enjoyed, but at least it was a new sensation. \n\nShe felt him stop and saw Courtney jolt again. \n\n\"He's licking you?\" Taylor asked. She shook her head. \"Fingers?\" \n\n\"Y... yeah. In my pussy and my... My bum.\" \n\n\"Is that nice?\" \n\n\"OH yeah. Never. Had anything there. It's good.\" Courtney started to really writhe now, in a way that Taylor hadn't seen before. Fuck I'm wet, Taylor realized. All this teasing, inexpert though it was, piled on top of everything else that day. Fuck. At least lucky Courtney had gotten to cum. \n\nWell, Taylor decided, if Zach returned with his fingers, she was going to force him to do it right, no matter how long it took. She needed to blow so bad. Courtney shook and shivered beside her. Then she froze. Her back seemed to arch a bit and her butt sort of scooted forward. Then stopped. Her eyes, somehow, got even wider. \n\n\"Oh FUCK!\" she gasped. \n\n\"More fingers?\" Taylor asked. \n\nCourtney shook her head, \"Cock.\" \n\nTaylor got worried for a moment. This was well beyond what they'd agreed to and if Courtney didn't... \n\n\"It's OK,\" she said. \"More than OK. Holy FUCK that's deep. I swear he's banging against my womb.\" Taylor could clearly tell they were fucking now. Courtney slid up and down the cushions like she was being painted onto the couch. Zach grunted with every thrust. \n\nCourtney was really trembling now. Her whole body prone. \n\n\"Eeep!\" she sucked the air in. Her green eyes squeezed shut. She shuddered and cried out. \"FUCK! I'm cumming! ah AH! I'm cumming so good!\" \n\nThere was a pause. No movement at all. Taylor thought maybe Zach had finished in her friend. But then she felt his tongue back at her pussy. Courtney reached out slowly and squeezed Taylor's hand. \n\n\"Good?\" Taylor asked. \n\n\"Way better than a pillow,\" Courtney said. Taylor felt her own eyes squeeze shut for a moment as Zach's finger slid into her open hole. His thumb found her clit and, by some miracle, Taylor felt her body respond. Like after all this, Zach had somehow lucked into the exact right combination. \n\nTaylor felt her whole body start to wind. Like a Jack-in-the-Box, Zach was turning her crank and she felt herself building toward the big pop. Taylor's breath started going faster. Her little nipples ached. The release was building... building.. And then nothing again. \n\nAnd then Taylor felt something thicker than a finger press against her aching opening. Her pussy felt so open. Empty. She needed to stuff it full of something and Zach's cock felt so good. He was just resting it there. Testing. \n\n\"Finger?\" Courtney asked. Taylor shook her head. \n\n\"It's OK,\" Courtney said. Still holding Taylor's hand. Almost stroking it. \"You can do it.\" \n\nTaylor nodded, like Courtney had given her permission. Taylor felt her butt slide back a bit. Begging him to enter her further. Taylor felt the head of Zach's cockhead start to slide into her. Suddenly she stiffened. \n\n\"Condom,\" she squeaked, \"I... I'm not safe.\" \n\nZach paused. \"I don't have one,\" he said, dumbly. \n\n\"You're not on the pill?\" Courtney asked. \n\n\"I'm allergic. I get all covered in hives. Tim and I just use protection. There's some in my bedroom.\" \n\n\"I'll go get one,\" Courtney said. \n\nZach began to pull back. Taylor felt her empty pussy sob as it's almost-entrant reluctantly retreated. \n\n\"Wait,\" Taylor said. Tim was in there. How would she explain any of this? And she really didn't want Zach to stop now. \n\n\"I can pull out,\" Zach said, like he could hear the argument in her head. Taylor just nodded. She felt her pussy begin to widen again as Zach's long, thin tool slid into her. \n\nHe was skinny, and she could feel the difference from when it was Tim. But then Zach reached the point in her pussy where Tim would end he just... kept going. Until Taylor swore she could feel his head knocking right at the opening to her cervix. \n\nIt wasn't better than anything she'd had before. Just different. But she had to admit it was nice to feel her previously untouched depths being plumbed. Zach slowly withdrew, then pounded back. He had this one motion, but DAMN it was a good one. \n\nTaylor felt that impending release again. Winding faster and faster now. She grunted into the pillows, chanting, \"Fuck. Fuck. Fuck. God Zach that big dick feels so fucking GOOD!\" \n\nTaylor reached down and did her best to find her clit. She smooshed it back and forth. She felt Zach start to tense. If he pulled out before she reached the end she would stomp on his balls till... \n\nThen Taylor's whole body stiffened. She felt her pussy clamp down and out of nowhere she let out a long, loud \"FFFFFFFFffffffffffffffffuuuuuuuuck! I'm fucking cuuuuuummmmmmmmming!\" \n\n\"OH FUCK!\" Zach cried. Taylor's pussy suddenly fell empty. The last of her orgasm raced through her body, and she dropped to her side. She looked up and saw Zach ram himself full into Courtney's pussy. \n\nCourtney's whole body stiffened as Zach slammed home. He thrust into her hard. Squeezing her ass cheeks white. Then suddenly Courtney's head shot up like she was howling at the moon. And she did howl - a long low animal \"ooooooooooOOOOOOOOOOOOO.\" \n\nZach cried out something incomprehensible. Taylor saw his balls retract as he filled her friend with his fertile seed. Courtney's cries grew louder as Zach emptied himself into her waiting womb. They both shook in shared pleasure. Then finally collapsed. \n\nZach hit the floor so hard, Taylor was afraid he might have hurt himself. She stood up slowly. Courtney seemed stuck in place, splayed over the couch. A thin white stream leaked out of her pussy and down her thigh. \n\nTaylor stood and did a long post-sex stretch. That had been damn good. Courtney made a little satisfied grunt. Taylor looked back and saw her friend was already snoring. \n\n* \n\nWhen Colin woke up, he was still in bed with his sister. His cock was still resting on her leg. Out the window, Colin could see it was still night out. Traffic whooshed by, like an ocean in the distance. \n\nPaige stirred and pushed at Colin's chest. \"You're heavy,\" she said. \n\nColin rolled over and Paige slipped away. \n\n\"So,\" Colin asked, taking a deep breath, \"What is this now? Whatever this is?\" \n\n\"It's nothing,\" Paige said, oddly distant. \"It's just a thing that happened, OK? Nothing to get worked up about.\" \n\n\"I just... I need to do right by you Paige. I'm not going to walk away. I can't.\" \n\n\"Well you're going to. You're still married for one thing. This was nice. OK, it was way better than that. But it didn't mean anything and you need to move on.\" \n\n\"So that's it?\" Colin asked, he could feel his stomach twisting, \"Just a mistake?\" \n\n\"Not a mistake,\" Paige said, \"Just not a nuptial either. Look, nothing's changed. I'm not angry. Trust me I'm the opposite of angry. And it's not like I'm going anywhere.\" Paige leaned over and kissed his cheek. \"This was special. Thank you. Now get me out of here before someone figures out I'm in the wrong bedroom.\" \n\nColin and Paige creaked open the door and tiptoed into the living room. There, they found Taylor, Courtney, and Zach all sprawled on the floor. Still naked. Colin looked over at Courtney and sighed. He loved her so much, and yet. He didn't know what he was going to do. \n\n\"You're better than her,\" Paige said, \"You're this amazing person and she's just some stupid, lucky slut.\" \n\nPaige gathered her clothes, then went to the front door. Colin bent down to kiss her, but he only got her forehead. Very brotherly. \n\n\"Figure things out,\" Paige told him. \"Not for me. Just for yourself. Till then, you know where to find me. But if you guys have another one of these parties? I better be invited.\" \n\nColin stared at the closed door for a long time before he dragged himself back to bed. \n\nNext Time: Christmas brings consequences and also (shocker) more cum."
    ],
    "authorname": "Spector_Dugan",
    "tags": [
        "exhibitionism",
        "cheating",
        "swapping",
        "game",
        "incest",
        "group",
        "stripping",
        "oral",
        "masturbation",
        "sister"
    ],
    "category": "Group Sex",
    "url": "https://www.literotica.com/s/love-like-a-blue-shell-pt-03"
}
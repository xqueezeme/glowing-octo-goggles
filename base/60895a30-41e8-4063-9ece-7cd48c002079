{
    "title": "Hero Worship Pt. 03",
    "pages": [
        "Here is part three of eight. You really should read the other parts first. All characters involved in explicit scenes are over eighteen. I hope you enjoy!\n\n -Alyssa -\n\nI'd texted Taylor, just an 'I'm thinking of you', but she didn't see it till late. In the morning, we conversed back and forth, and I told her that it felt weird waking up without her. It was true; the first thing I did this morning was reach for her. I lay in bed for almost fifteen minutes, wondering how in the hell I'd fallen so hard so fast. I also wondered how I could feel so happy and scared at the same time.\n\nI stayed in my room most of the day, ostensibly packing. Mom and Dad were at their club playing tennis, and Kelsey was over at her friend Bethany's house, so I had nothing to do but pack and stew in my own juices while watching Sadie's dot crawl slowly across the map.\n\nBy noon I was all packed up. Sadie seemed about four hours away, so I put on my bikini and headed out to the pool to get some sun. I had my phone with me, and was surfing around TMZ when I tapped on a story about Kristen Stewart, which led into a series of stories about lesbians, and being a lesbian and all manner of LGBTQ culture and...\n\n\"Hey, honey, watcha reading?\"\n\nMy heart leapt into my throat as my mom set a glass of lemonade by my chaise lounge. On my phone was a big picture of a woman in a pride parade, completely decked out in rainbow paraphernalia\n\n\"Nothing!\" I said it just a little too loud and defensively, and my mom looked at me strangely as she sat down. I swore internally and cast around for something to say. I know she'd seen the picture.\n\nAfter what felt like minutes, an idea finally hit me. \"I was just thinking that there aren't any lesbians at the sorority, or none that are out at least. I was just wondering how that would go over. I was thinking about maybe doing some sensitivity training this year. Be more open about things, get a little more diversity.\" I shrugged and looked down. \"When you were in school, were there any, you know, ...?\"\n\n\"Lesbians?\" Now it was my mom's turn to look askance. \"There were certainly a few gay men in the drama department, but they kept it quiet. It was the early nineties in Kansas, not the most forward thinking of places. Everyone was scared of AIDS, and being gay meant AIDS. At least as far as the rednecks I was around were concerned.\"\n\n\"So you never experimented in college?\" I put a joking lilt into my voice, which made mom blush.\n\n\"Uh, no. Sorry to burst the fantasies of men everywhere, but not every girl fools around with their roommate in college.\" She looked down. \"I mean, for some it was an open secret, and probably for others it was just a secret. But I'm sure they all felt they had to hide to some extent. It's a good thing you're doing, I think.\"\n\n\"Thanks, mom.\"\n\nI smiled at her and she pulled me into a hug, which felt wonderful. \"Oh, such a good heart.\" She gave me an extra squeeze and let me go and I lay back down. I just lied to my mother, point blank. I tried to tell myself that I had a plan, that I was going to discuss it with Sadie first, but it didn't work, not completely. Taylor assumed that when it came to it, I'd sacrifice her for the safety of normalcy. I wondered if I'd just proven her right.\n\nI felt a tear well up, and I grabbed my sunglasses to hide it. I stayed there, lost in my own thoughts until about an hour later, when the gate opened and Bethany came in with my sister, and the two leapt into the pool. I watched them splash around innocently, trying to remember if I'd ever been that carefree. Yeah, I think I was, just a week ago. It was amazing how quickly life could become complicated.\n\n***\n\nSadie arrived a little after five-thirty and I was waiting for her on the front patio when she did. Most of the nervousness I was feeling fell away as my best friend unfolded herself out of her old blue Toyota, and I ran to embrace her.\n\nAs we hugged it felt strange. I was far more aware of her physical presence than ever before. Not attraction, not really, but it was definitely different.\n\nSadie could feel it, and she pulled away. \"You okay?\"\n\n\"Yeah fine, just...\" I shrugged my shoulders. \"I don't know. Senior year. Adulthood looming.\" Lying was starting to become a habit, and I didn't like it.\n\n\"I know! I can't wait!\" She pulled her overnight bag from the front seat. The rest of her stuff was piled in the back and trunk. She took in a deep breath. \"Ah, the perfect combination of sea and smog, I'm home. I didn't miss dinner, did I?\"\n\nI laughed. \"No, dad's making salmon. I think he remembers how much you raved about it last year.\"\n\n\"Hell yeah, I did. Do you have any idea how hard it is to get decent seafood in Central Texas?\"\n\n\"You've told me. A lot.\"\n\n\"Well, don't forget it. Excellent, first dinner, then gossip. I have stuff to tell you.\"\n\n\"Stuff about Noah?\"\n\nIt was her turn to blush. \"Maybe. Definitely.\"\n\nGiggling, we went inside.\n\n***\n\n\"That was incredible, Mr. Winter burg. Thank you.\"\n\n\"Yeah dad, that was great.\"\n\nMy dad was beaming. \"You're very welcome girls. Now you run along, Kelsey will help clean up.\"\n\n\"Dad!\"\n\n\"Your sister has a friend in town.\"\n\n\"Bethany's here!\"\n\n\"Yes, but Ally hasn't seen her friend in months. You see Bethany every day.\"\n\nBethany stood up. \"I'll help, Mr. Winterberg.\"\n\nKelsey glowered at her for a second, but mom cut the mild tension forming. \"Thank you, Bethany. If you could just clear the table, bring things into the kitchen? Kelsey, you help.\"\n\nShe sighed. \"Yes, mom.\"\n\nSadie and I didn't stay to question our good fortune, but we did carry our plates and glasses to the sink before escaping upstairs to my room. As soon as we entered Sadie tossed her bag into the corner and flopped down on my bed. \"Ohh, this is nice. I think that mattress I slept on last night was literally made out of crushed gravel.\"\n\nI chuckled inwardly. I wonder how she'd feel about lounging on my bed if she knew whom I'd been sleeping with this last week. It felt strange, almost a little like cheating, but not really. I mean, I'd realized that I had a type, and Sadie wasn't it. Sadie was only an inch taller than me, and we shared that curvy physique that got us both noticed by guys. I knew now that I liked tall, athletic girls, like Taylor. Mmm, Taylor. I got a little shiver at the thought of my new lover. How long till I could be in her arms again?\n\n\"Hey, where'd you go?\" Sadie was looking at me steadily.\n\nI spluttered a second before remembering she couldn't actually read my mind. \"Nowhere. So how was your summer?\"\n\n\"Good, dull, mostly. A few highlights.\"\n\n\"I take it the highlights didn't involve frying chicken.\"\n\n\"Oh, God, don't mention chicken. I swear I'm never eating fried chicken again for the rest of my life.\"\n\n\"You say that every year. By October you'll be begging for it. And don't forget, that fried chicken is paying for your school.\"\n\nSadie rolled over. \"I know, I know. You sound like my parents.\" Sadie's Dad owned multiple KFC's in the greater Dallas area, and she had to work there during the summers. \"But you don't get to say anything until you've spent a summer operating a pressure fryer. Not all of us got cushy internships.\"\n\nClimbing onto the bed still felt weird, so I sat down on my dressing chair. \"And the highlights? Do they involve one Noah Patterson?\"\n\n\"Mmm, maybe.\" She was trying to be coy, but couldn't stop the grin from spreading across her face. \"God, Aly, I think I'm in love.\"\n\nPerfect. Let's talk about her. \"Did he actually come visit?\"\n\nSadie shrugged. \"No, but we went on a lot of dates, still.\"\n\nI shook my head. \"How'd that work?\"\n\n\"The magic of the internet, my friend.\" She had a wide-eyed grin. \"We went for walks, on a picnic, out to dinner.\" She laughed at my bemused expression. \"So one night we both went to different Olive Gardens and skyped. I brought a picture holder, you know, one of those fold out ones? And I put my tablet in it so we could see each other, and we had dinner and talked.\"\n\n\"Wow.\"\n\n\"I thought it'd be corny, but was really nice.\" Sadie was blushing. \"And we talked like every night. Even when I worked late he'd stay up 'til I got home. We'd be up 'til like, one or two. It was so romantic.\"\n\nI grinned. \"So, did you guys do the virtual nasty?\"\n\nSadie's blush deepened and she looked down. \"No. I would have, but he said he wanted our first time to, um, he wanted to really be able to touch me. He said he wanted to be the one who made me feel good.\" Her face got very serious. \"I cannot tell you how horny I am.\"\n\nI laughed. \"Girl, you have no one to blame but yourself. That boy has been pining for you since we were freshman.\"\n\n\"I know!\" She threw herself back onto the mattress. \"He told me. How the hell did it take me three years to realize how great he is? No, I have to wait until two weeks before summer break.\"\n\nI couldn't stop giggling. \"When does he get in?\n\n\"Tuesday morning. Well, he'll be here tomorrow night, but he's staying the first night with his aunt and uncle.\" She sat up and ran her fingers through her long, straight, dark brown hair. \"I'm going to go take out my contacts. Then, missy, we're going to talk about your new beau. Got it?\"\n\nShe rummaged through her bag for her toiletries before heading into the bathroom. I had a few minutes to decide what I was going to say, and I could feel my heart starting to beat fast. When Sadie came out she was wearing her glasses and her jeans were draped over her arm, her white panties visible under her tank top, shapely tan legs stretching to the floor. My eyes widened and I looked away as she bent down to get a pair of pajama pants out of her bag and slipped them on.\n\nWhat the hell was wrong with me? Sadie and I had been changing in front of each other for years. I'd seen her a lot more naked than that dozens of times, and there still wasn't any real attraction, not like when I looked at Taylor. But I was aware of her, just like in the driveway, and it felt strange.\n\nI jumped up and got into my dresser, pulling out my own set of PJ's and heading into the bathroom myself. I sat on the toilet and tried to collect myself. I felt tears sting my eyes. I wasn't going to be able to tell her. I'd carried my phone in by force of habit and I looked down at it. It was 7:30, and I hadn't texted Taylor. A couple of notifications, a text from Evelyn, our chapter president, reminding me about the officer's meeting tomorrow, that was it. Nothing from Taylor.\n\nI pulled up our conversation. I'd told her Sadie was coming tonight, so she was probably giving me some space.\n\nMe -- Hey, how was your day?\n\nThe responding bubble appeared immediately.\n\nTaylor -- Hi, beautiful.  I've had better.  Did your friend get in safe?\n\nI teared up at the word beautiful.\n\nMe -- Yeah, she's here.  What happened to you?\n\nTaylor - I had to have a bunch of kids thrown off the beach.  They were causing problems for everyone.\n\nMe -- I'm sorry.  Whatcha doing?\n\nTaylor - Just got to the warehouse.  Going to work on my sculpture.\n\nMe -- The one of me?\n\nTaylor -- Yeah.  Can't concentrate on anything else.\n\nI laughed as a tear rolled down my cheek.\n\nMe -- Ok, work hard.  I miss you.\n\nTaylor -- Miss you, too.  See you soon, promise.\n\n\"I miss you so much.\" I said this quietly to myself, another tear escaping. I sobbed once or twice. I was scared of going back out there. And I was terrified of failing Taylor. I wanted her here so badly it hurt. I'd been so sure of myself, and here when the rubber met the road I couldn't do it.\n\nI washed my face and flushed the toilet, even though I hadn't used it. I put on my blue silk pajamas, and looked long and hard at myself in the mirror before walking back out into my room.\n\n\"Okay, so who is this guy?\"\n\n\"Well, I told you, lifeguard.\"\n\n\"I never pegged you for muscle bound jock types. You like 'em sensitive.\"\n\n\"Taylor's also an artist. Studied at Pepperdine.\"\n\n\"How old?\"\n\n\"Mid twenties. Short, bleach blonde hair, incredible legs and shoulders, ridiculous blue-grey eyes. You want more?\"\n\nSadie had a wicked grin. \"So, does he have long... fingers?\" She spread her hands apart, leaving no question as to what she was actually asking.\n\n\"Everything is completely satisfactory.\"\n\n\"Just satisfactory?\"\n\n\"Well, let's say very satisfactory.\"\n\n\"Stamina?\"\n\n\"You have no idea.\"\n\nThe banter went on like this for a while, before I got the subject changed to what we were planning for the house this year. Eventually the sun went down and the long drive took its toll on Sadie. We always stayed in my room together, my king sized bed had more than enough space for the two of us. I didn't sleep well, as I was afraid of forgetting where I was and thinking she was Taylor, and the fact that I was in bed with an attractive young woman who wasn't Taylor bothered me. Would she be jealous? Would I if the situation were reversed?\n\n- Taylor -\n\nI glanced down at my phone, which was lying over by my desk. Still blank. The big red digital clock on the wall said it was ten till midnight, and I really needed to go home. The warehouse was buzzing with activity, and it would be until dawn. Artists generally were obsessive types, after all, with the ability to get totally lost in their work.\n\nJust like I was. Aly's face was starting to take shape and I was enraptured. It felt so intimate, caressing and shaping her. When I started I'd wondered what exact expression she would take, but the more I worked the steel, the more I began to recognize it. It was the face she wore after we made love, when she was just gazing at me with so much adoration it made me almost break down.\n\nI remember thinking that I could live in those moments forever, and if I got this right I guess somehow I could.\n\nI'd made myself not contact her anymore tonight, since she'd be with her friend. I wasn't jealous. It was good, and I needed to work. Course I wasn't working, not on anything that I could actually sell. When I'd try, my eyes would just drag themselves back over to Aly's sculpture. Even if I had it covered, it didn't help. So I did the only thing I could. I sculpted.\n\n\"Damn, girl. That's... shit, that's good.\"\n\n\"Thanks, Bishop.\" I looked over my work. \"It's not even close to being done.\"\n\nHe looked over at his own marble sculpture. \"They never are, huh?\"\n\nIt was over two hours later before I was on my way home. I probably shouldn't have been driving, but I needed distance. I'd slept at the warehouse before, but I knew that wasn't an option tonight. I'd have just kept working. I was already going to need a caffeine IV for tomorrow anyway.\n\nI managed to drag myself into work, having already sucked down the biggest and most overloaded coffee Starbucks would sell me without a prescription. That and a small cooler filled with energy drinks were going to get me through the day, I hoped. Unfortunately they did not shut down my mind. It was a Monday, and local schools had already started back, so it was not too crowded, which did not help my concentration.\n\nNevertheless, people were counting on me to keep them safe, so I stayed awake and alert as best I could. When I finally made it home I checked my phone, nothing from Aly. That's okay. She was moving in today, probably swamped. It's okay.\n\nGod what the hell was I doing? Sitting around like a love struck teenager, staring at my phone? This wasn't me, damn it. I stood up and went to the kitchen, tossing a pan on the burner and pulling a frozen stir fry bag from the freezer. I had to read over the directions three times, because my head was still going back to my phone. I decided to bite the bullet and pulled up my conversation with Aly.\n\nMe -- Hey, did you get all moved in?\n\nI set the phone aside and dumped the contents of the bag into my pan, almost spilling everything when Aly's responding bubble appeared.\n\nAly -- Yeah, I miss you.  We're having dinner, then we've got an officer's meeting.  Call you after?\n\nMe -- Sure.\n\nI wanted to add something. What? A heart, maybe a kissing emoji? I debated on it long enough that I felt sending it would be weird, so I chickened out, instead just tossing the chicken and veggies in my pan. After I'd eaten I flopped down on the couch and turned on the tube. The US national swim meet was on the Olympic Channel, so I settled on that, pulling my blanket over my legs. Breathing in I still sensed her perfume on the cover. I put it to my nose and breathed deep.\n\nI remembered how she felt in my arms, the way she looked at me, her gentle laugh. I should've sent that damn emoji, anything to tell her she was special. Why the hell was I such a bloody coward?\n\nI pulled the blanket around me and laid back, imagined Aly snuggling against me, my face nestled in her soft brown hair, and fell asleep. It was after midnight when I woke up. I had a text from Aly.\n\nAly -- Sorry, our meeting went real late.  Call me if you're up, or I'll call you tomorrow.  Miss you.\n\nI blew my chance to talk to her tonight. Damn. I'll do better tomorrow. At least I didn't have to work. I'd get out to the warehouse early and be able to spend the whole day working there. And I was going to make myself finish some of the smaller projects I had. Really I was.\n\nMy heart leapt when I saw I had a text in the morning, but it was just from Jen.\n\nJen -- Vicky wants to know if you want dinner tonight.\n\nMe -- I don't know.  Depends on how much I get done today.\n\nJen -- Then work hard, 'cause I'll be the one in trouble if you don't turn up.\n\nMe -- Fine, boss.  I'll be there.\n\nI did pretty well, all things considered. I actually got a couple of pieces done before I went back to working on Aly's sculpture. Granted it took me twice as long as it should have because I was constantly losing focus, but they were finished, and it looked like I was going to have at least a respectable display at the booth.\n\nI started to work on the side of the face, smoothing and shaping. It was so intimate, touching her, and I imagined the real thing, the way her cheek felt resting in my palm, or on my shoulder, so soft and innocent, her eyes, soft and happy, gazing into mine. I didn't deserve those things. She was part of a different world, one she'd finally gone back to.\n\nI continued to work. Eventually she'd realize it, but when that happened, I'd still have this.\n\n- Alyssa -\n\nI flopped back down onto my bed while Sadie sat in her chair and brushed out her long, dark brown hair. I groaned. \"My arms hurt.\"\n\n\"I take it they didn't make you do much manual labor at your architectural firm this summer?\"\n\n\"Ouch. No, they did not. I specifically chose my field to avoid such things.\"\n\n\"You did good though, good impressions and all.\"\n\n\"Yeah, box lifting is an important EKT skill.\" We'd spent the day at the freshman dorms, helping new coeds move in. It was an outreach we'd done for years. I knew it worked, as it had been an upper class sister helping me that had initially put EKT on my radar at all. After supper, we'd had an all house meeting that had lasted for two hours. I remembered my first one, as a Sophomore, I'd been absolutely brimming with school and sorority spirit. I remember looking at the officers, who seemed so mature and dignified.\n\nNow I was sitting at the head of the table. Not at the very head, that was reserved for Evelyn Park, our president, but I sat at her right hand, and I knew their eyes were on me. I'd wanted to be up here since I first pledged as a freshman. Now that I was, everything was disconnected. I felt like an imposter, or a double agent, hiding in plain sight. It was Wednesday night, and I hadn't talked to Taylor in two days. I just never had a chance. I was never alone in this bloody house. I even considered going home for a night just for some privacy. Even with my exhaustion all I really wanted to do was crawl into Taylor's arms and let her hold me.",
        "After the meeting I hadn't been back to the room a minute before there was a knock on our door. Sadie told them to come in, and Evelyn and Macie, our student rep on the Greek council, came in and sat down on Sadie's bed, closing the door behind them.\n\nEvelyn tossed her long, shiny black hair. \"Can you believe it's finally here? Senior year! And we're going to rule the school!\"\n\nSadie chuckled. \"Very funny. You don't actually have 'Pink Ladies' jackets for us to wear, do you?\"\n\n\"I thought about it, but no.\" Evelyn, who was actually pre-law, had an almost encyclopedic knowledge of all things Broadway or musical related. I'm not sure if she'd ever told her very conservative parents she was getting a minor in drama, her true love.\n\nMacie just shook her head. She was a journalism major and had no desire to do anything else. \"So, Sadie have you seen Noah yet?\"\n\nSadie set down her brush, cheeks reddening. \"No, but I know he's here. He'll be at the party Friday.\"\n\nEvelyn looked at me. \"Are we ready for that, the party?\"\n\n\"Are we ever?\" I shook my head. \"I've had the catering set up for a month, and the booze is ordered too. Should be fine.\"\n\nMacie closed her eyes. \"God, I'm going to hook up at that party.\"\n\n\"You hook up at every party.\" Evelyn smirked at her best friend.\n\n\"What? I'm a grown woman. I have needs. Very normal, natural needs. And after this summer, I'll literally screw anything with muscles and a dick.\" Macie looked around at our incredulous expressions. Both Evelyn and Sadie were giggling.\n\nMacie pointed at me. \"We need to get this one a man for this year.\"\n\nSadie's face split into a grin. \"Oh, I think she's got that covered. She's dating David Hasselhoff.\"\n\nMy eyes went wide as saucers as both Macie and Evelyn's snapped their heads towards me. I threw a pillow at Sadie. \"I am not.\"\n\n\"I'm sorry, are you or are you not dating a muscle-bound lifeguard, y'know, the kind that walks around on the beach in a red swimsuit saving lives?\"\n\n\"Fine. I am dating a lifeguard, who, by the way, does not look ANYTHING like David Hasselhoff.\"\n\n\"Does he at least drive a black Firebird?\"\n\n\"No. An Indian motorcycle.\"\n\nIf I'd wanted something to deflect attention away from my new flame, that wasn't it. I had to answer questions about tattoos, height, girth, technique and a bunch of other things I really didn't want to answer. Macie and Evelyn stayed in our room until after eleven, too late to call Taylor again. I did send her a text.\n\nMe -- I'm sorry it got late again.  I find out my schedule tomorrow.  I WILL call after you get off work.  I promise.  I miss you. &lt;3.\n\nI knew what she was going to be thinking about me, that I'd abandoned her. How could she know that she was all I could think about? I pulled the covers up and imagined her lying behind me, her arms holding me tight. Sleep was long in finding me.\n\nThursday was the first day that wasn't completely insane since I'd gotten back on campus. It was upper class registration day. According to my father, class of 1987, this used to actually involve going from building to building to physically register for classes, standing in line, and finding out the course you needed to graduate was full. Now, of course, everything was done by computer, with priority queues and algorithms. But, computers being involved, there were always screw-ups, and today was for people to fix them if possible.\n\nLuckily, my schedule was fine, unlike Sadie, who had to spend four hours down at the Psychology department, trying to pick up a class that had been left off her load. She was able to do it, but she was in a towering Texas temper when she got back to the house. I listened to her complain like a good friend for almost half an hour before she excused herself to the bathroom. I took the opportunity to disappear out into the park behind the house, finding my favorite bench and pulling out my phone. It was only two o'clock, over four hours until I could call Taylor, and I was chomping at the bit.\n\nI made myself go on the department websites and read up on my new professors. I already knew several of them, of course, but the prof for one of my classes from outside the department, advanced technical writing, was a total mystery.\n\nAs I was sitting a couple of juniors came out in their bikinis to take advantage of the late summer California sun. They waved to me before throwing out blankets. Trina was sporting an adorable new Pixie cut, which perfectly complimented her long, lean body and cute round face. She bent over right in front of me, smoothing out her blanket, and my eyes popped out of my head for a second before I forced myself to look away.\n\n\"Do my back?\" Trina held out a tube of sunscreen to her friend, Nadia, who took it and poured some into her hand and started working it into Trina's skin. Unbidden an image of me doing the same thing to Taylor invaded my consciousness, and I caught myself watching them, a tingle rising up in my core.\n\nI shook my head and stood up. This was crazy. What Nadia and Trina were doing was completely innocent, and I'd seen it dozens, hundreds of times before. But now I was so aware of them, and it felt wrong. The sun block had switched hands now, and Nadia was pulling her long blonde out of the way so Trina could work, and I turned my whole body away.\n\n\"You girls have fun.\"\n\n\"You should get your suit and come join us!\"\n\nI suppressed a laugh. That was something right out of a frat boy's fantasy. \"Not this time. You enjoy, I'll see you at dinner.\"\n\nI wanted a walk, to get away from the house, every minute inside felt like an inquisition. I needed to get a grip. I briefly thought about running up to my room to get my ear buds, but I didn't want to run the gauntlet with the possibility of being pulled into conversation with any of my friends. Instead I headed around the house and down towards the sidewalk, heading briskly for campus.\n\nIt turned out to be the perfect decision. I wandered around, going up and down the streets. Students were everywhere and I was able to just blend into the constant movement. A game of Ultimate had broken out in front of one of the men's dorms, so I sat for a minute. The guys were playing shirts and skins and a number of appreciative young ladies had gathered round the edges of the field. I watched the competitive banter among the players, the coquettish smiles and cheers from the spectators, the casual ways the guys were showing off for their admirers. All of a sudden it seemed I was living in a different world than they did.\n\nWhen six o'clock finally rolled around I made my way into a little sandwich shop and bought a wrap and a soda. I pulled out my phone and saw a couple of tests from Sadie asking where I was. I sent her back not to expect me for dinner.\n\nSadie -- OK.  You alright?\n\nMe - Just out for a walk.\n\nSadie -- That was like, four hours ago.\n\nMe -- Be back soon.\n\nI set down the phone and checked my watch. Fifteen after. Taylor wouldn't be home yet. She might be on her way, though riding her bike through the sunshine. What I wouldn't give to be sitting behind her, my arms wrapped around her waist as the world flew by.\n\nI let twenty more long, anxious minutes go by before I attempted to call, four rings and then voicemail.\n\n\"Hey, sweetie. Hope you had a good day. When you get home give me a call. I miss you.\" I pressed the icon to disconnect and stared at my phone. Did she even want to still talk to me? Maybe she was mad, maybe she didn't want to deal with a closeted college girl, when she could have any woman she wanted. Maybe she... My phone lit up in my hand, declaring an incoming call from Taylor. The clouds in my mind vanished as a smile spread across my face.\n\n\"Hi!\"\n\n\"Hey, baby. It's good to hear your voice.\"\n\nMy insides went a little gooey at the word 'baby'. She wasn't mad! Yeah! \"I'm so sorry I haven't called. It's been crazy. I've been thinking about you though.\"\n\n\"Well, I spent two days forming your face in metal, so I haven't thought about you once.\"\n\nI giggled. \"Liar.\"\n\n\"Maybe once or twice.\"\n\n\"So how was your week?\"\n\nWe went through our weeks, and she listened as I talked about moving in and helping the freshmen, which always leads to a story or two. And she told me about working at the warehouse, and I scolded her for not finishing her other projects, while inside I was flying that she couldn't stop working on my sculpture.\n\n\"I'll get the rest of them done in time, promise.\"\n\n\"You better. You have to make lots of money at the art fair so you can buy me something pretty.\"\n\n\"If you're a gold digger you're barking up the wrong tree\"\n\nMy cheeks were almost aching from smiling. \"The only pretty thing I really want is you.\"\n\n\"Good. It's all I can afford. I could give it to you tomorrow night if you want, just me and you.\"\n\nI grimaced. \"Oh, sweetie I can't. We've got the EOSC party tomorrow night. I have to facilitate.\"\n\n\"EOSC?\"\n\n\"Yeah, that's a joke. It's a welcome back party. EOSC stands for End of Summer Celibacy. A lot of girls live at home during break, and their boyfriends are in a different city. They tend to build up a little libido over the summer.\"\n\n\"Gotcha. I don't have to worry about you, do I?\"\n\n\"Hmm, let me think.\" I tapped my chin with my finger. \"Nah, my libido got really satisfied just last week. Sadie's looking forward to it though. She'd just started dating her boyfriend at the end of last year, and they hadn't, you know, before the year ended and she went home to Texas. She's been going nuts. She wants to meet you though, thinks we should do a double date.\"\n\n\"You told her about me? How'd that go?\" I felt a pit open up in my stomach. I spluttered for a second. \"Oh, no you haven't.\"\n\nI felt my eyes start to burn. \"I'm sorry, I tried. I, um, I guess I'm not as brave as you think I am.\"\n\n\"Hey, baby, it's okay.\" I could hear the hurt in her voice, but she didn't sound angry.\n\n\"I'm so sorry.\" A tear rolled down my cheek.\n\n\"Aly, it's fine. I lived in a closet for six years. I understand.\"\n\n\"I do have my schedule though. What days do you have off next week?\"\n\n\"Tuesday and Wednesday, as usual.\"\n\n\"My last class on Tuesday ends at eleven. I could come over.\"\n\n\"I'd love that, Aly. I'll be waiting.\"\n\n\"Good. Besides, we have an errand to run.\"\n\nI heard her laugh. I loved that sound. \"What kind of errand?\"\n\n\"You, my sweet, will have to wait to find out.\"\n\n\"Mmm, you make me crazy, you know that?\" Her voice was low, sultry, and it made me shiver inside. I could see her face in my mind, her hungry expression. Tuesday couldn't come soon enough.\n\n\"Me too, thinking about lying in your arms, you taking me, it makes me not sleep so good.\"\n\n\"Really?\"\n\n\"Yeah.\" I let my own voice slip into a soft purr. \"I get all tingly.\"\n\n\"You like it when I take you?\"\n\n\"Yes.\" God, I could feel my wetness growing by the second.\n\n\"Good. Do something for me?\"\n\nI giggled. \"Okay, bear in mind I'm in public.\"\n\n\"That's fine. Here's what I want. No touching yourself.\"\n\n\"Hmm?\"\n\n\"You heard me, no pleasuring yourself until you're in my arms again. Your next orgasm will be the one I give you on Tuesday. Can you do that?\"\n\nI was so turned on I almost couldn't speak. \"Yeah, okay.\"\n\n\"Good. I'll be thinking of you baby, dreaming of touching you, kissing you, my tongue sliding over your skin, inside of you.\"\n\n\"Oh, shit, Taylor, you're making me crazy, don't do that.\"\n\nTaylor laughed. \"Fine, I'll let you off the hook for now. I'll see you Tuesday.\"\n\nI'm not really sure how I made it back to the house, my mind completely taken up with Taylor and what she asked me to do, or not do. I was a little sweaty after my walk so I went for a shower after saying hi to Sadie.\n\nAs the warm water washed over my body Taylor's face rose in my mind. Conscious thought disappeared as I imagined her bending to kiss me, and my hand slid down over my flat stomach and through my trimmed bush. Just before my fingers reached their destination I remembered my promise and pulled them away, my pussy complaining loudly in its own way.\n\nI put my head under the spray, hands flat against the shower wall. I'd gone four days without masturbating plenty of times. I could do this. It was going to be a really long four days.\n\n***\n\nThe next day was all about getting ready for the party. I confirmed with the caterers and made sure the alcohol would be delivered on time. Decorations were going up. That was not my forte, but Evelyn and several juniors were all over it. All of the couches and chairs that normally populated the common areas of the house were pushed to the perimeter, creating plenty of walking and dancing space.\n\nThe party started up at seven-thirty, which meant it really got going a little after eight. The sound system was rocking, the lighting was perfect, and the social lubricant was flowing. And, of course, the guys were coming like moths to a flame. I'd kept my outfit simple, a tight pair of jeans with a wide belt and a tight, short sleeved crop top. I kept the make-up minimal and the hair understated, as I had no desire to draw any male attention.\n\nEverything seemed to be rocking. Macie was quickly dancing with some six-foot hunk of muscle who probably had no idea how lucky he was going to get tonight. Evelyn was sitting in Trent's lap, her very non-Korean boyfriend, her mouth firmly attached to his. And most sweetly, I saw Sadie, her head resting serenely against Noah's chest, arms wrapped around each other as they slowly swayed to the music.\n\nI spent the next two hours or so making sure everything was running smoothly. I didn't have any issues with guys, as I kept a no nonsense look on my face and it was a target rich environment for any frat boy on the prowl.\n\nCouples were everywhere around me, in all stages, from gentle flirting to outright grinding. I felt alone and exposed, and I needed somewhere to clear my head. I took the stairs two by two up towards my room. However, when I approached my door the 'Do Not Disturb' sign Sadie had nicked from a La Quinta our freshman year was hanging from the knob. I listened for a second, and I could hear Sadie's unmistakable moans of pleasure, paired with the sounds of bodies coming together and a deeper, distinctly masculine grunting. Good for her. Sucked for me though.\n\nAs I made my way back through the house I kept imagining what it would be like to be able to bring Taylor to something like this. I also wondered if I was going to be the only sister in the house to not end up in the arms of a lover tonight. I knew I wouldn't be, but still, I missed Taylor so much it ached. And I still felt exposed, in danger, like any minute someone would look at me and scream \"Lesbian!\" I had to get out.\n\nI made it to the park out back. Of course the romantic moonlit walks behind the house were not unpopulated, but as I approached my favorite bench the couple making out on it rose and ran off back towards the house, obviously seeking a more private place to move things along. I sat down and pulled my legs up to my chest, rocking back and forth. My face turned back towards the house, where I could see happy people laughing, dancing to the music, and I was out here, scared and alone.\n\nI pulled out my phone and brought up my conversation with Taylor. It was almost one o'clock, and she had to work in the morning. I couldn't call her, so I typed out a message. She'd wouldn't see it until she got up, but it'd make me feel better now.\n\nAly -- I miss you, so wish I were in your arms tonight.\n\nAlmost immediately the responding bubble popped up.\n\nTaylor -- I miss you too, baby.  You okay?\n\nA sob broke free from my chest at the word 'baby'.\n\nAly -- Lonely.  Whole bunch of people having fun.  I'm not one of them.\n\nTaylor -- Do you want to come over?\n\nI felt a tear roll down my face.\n\nAly -- So much, but I can't.  I still have stuff I gotta do.  I didn't mean to wake you.  Go back to sleep sweetie.\n\nTaylor -- Ok, see you soon.\n\nI shut the screen off and looked back towards the house, wondering how long it would be before I could climb into my comfortable, if very empty, bed. Taylor might be there in my dreams at least.\n\nEventually I made my way back to the house, closing up the kitchen and cutting off the alcohol. That didn't make me incredibly popular, but it was a necessary step in wrapping up the party. Slowly things died down, and the noisier elements moved out onto the street, and at five minutes past three, I was able to lock the house. That didn't mean that there weren't any hangers on inside, especially in the girl's rooms, but they all knew they weren't supposed to have overnight male guests. If we found any we'd deal with it in the morning.\n\nThe heaviness of the day was starting to take its toll, and my legs had to work hard to carry me up the stairs. When I made it I saw Noah standing in our doorway, arms wrapped around Sadie, who was in her bathrobe.\n\n\"I hate that you have to go.\" Sadie's voice was sad.\n\n\"I know, next time my place, no roommate, no rules about overnights.\"\n\n\"Sounds perfect.\" Sadie laid her head on his chest and he held her close. \"You were amazing, y'know.\"\n\n\"I aim to please, although I'll get better with practice.\"\n\nSadie pulled on his shirt. \"Mister, you're going to get lots and lots of practice, I promise.\"\n\nNoah grinned wide. \"Yeah!\" Sadie returned his smile and they kissed for several seconds before Noah broke away. \"I love you.\"\n\n\"I love you, too.\"\n\nThey seperated slowly, maintaining contact for as long as possible as he walked away. Noah finally registered my presence when he reached the top of the stairs. \"Hey, Aly.\"\n\n\"Hey. Don't hurt her.\"\n\nHe looked back over his shoulder. \"I've been waiting to be with her for almost three years. I'm not going to screw it up.\"\n\n\"Good to hear. Now, out.\"\n\nHe laughed and headed down towards the door, and I made my way into my room. Sadie had flopped back on her bed.\n\n\"So, was he satisfactory?\"\n\n\"Mmm, I'm going to marry that boy.\"\n\n\"Seriously?\"\n\n\"God, Aly, it was perfect. Best. Sex. Ever. You know about that now.\" She rolled onto her side and gave me a wicked smile.\n\n\"Yeah, I kinda do.\"\n\n\"Good. We're going to double, and soon. I want to meet your guy, understood?\"\n\n\"We'll see.\"\n\nIt was a very good thing I was so exhausted, and sleep eventually found me.\n\n***\n\nThe weekend went slowly. Macie had the fabulous idea that we should all go to the beach on Saturday with the unstated but obvious intention of finding and annoying my new flame. It took some wheedling and finagling to get out of that.\n\n\"No, it's just he says I'm distracting. What he does is important, I mean, how would I feel if someone got hurt because he wasn't paying attention?\"\n\nMacie and Evelyn both gave begrudging acknowledgments of the logic, but Sadie's face wore an expression that said she wasn't convinced. Maybe I'd spoken too fast, that's a tip off when people are hiding something, according to Sadie. But the beach did sound like fun, just not at Tagalong.\n\nSadie summoned Noah and Evelyn did the same with Trent, both running at the chance to see their girlfriends in a bikini. We made it to the beach, spreading a huge blanket.\n\nThe four of us had done this dozens of times over the years, with varying male companionship. We'd all rushed together, and it was soothing sitting with my friends. Of course, a primary activity on all previous trips had been evaluating the local beefcake, and Macie started in almost immediately.\n\nEvelyn joined in, as she and Trent had a well known 'look but don't touch' agreement. Sadie had eyes for no one but Noah, already leaning up against his bare chest in her little blue and white pinstriped bikini, his arms wrapped around her bare middle.",
        "Macie sucked in a breath. \"Damn, check that one out. Now, those are what I call pecs.\"\n\nEvelyn laughed. \"Geez, didn't you get enough last night? I saw you with Mr. Muscles last night.\"\n\n\"Unfortunately one of those muscles was between his ears, but he had his uses.\" She groaned. \"Is it too much to ask for a gorgeous, brilliant, sensitive man?\" She said it, but I don't think she meant it. Macie did hook-ups. I'd never seen her with a boyfriend. Still, we didn't press.\n\nEvelyn just nodded. \"Yes. If you can get two of the three your doing really well.\"\n\n\"Hey!\" Trent objected, and Evelyn gave him a mollifying kiss.\n\n\"I just got lucky with you, babe.\"\n\n\"Uh-huh. No respect at all.\"\n\nWe all laughed. The next half and hour passed in nice conversation. Sadie, Noah and I went down for a swim, and when we were coming back up I noticed a couple spreading out a blanket maybe twenty yard up the beach from ours. They were both women, one with long dark hair and a red bikini top and short jean shorts, and the other wearing a one piece and athletic shorts. Her hair was short, shaved on one side and combed over. Just by the way they looked at each other I knew they were together.\n\nI tried not to look over much. The short-haired one began putting lotion on the other's skin, who was leaning back in pleasure. I immediately pictured Taylor's hands on me and I felt a tingle rising quickly in my core. The building fire was doused when Macie noticed them as well.\n\n\"Check it out, dykes.\" She nodded towards the couple.\n\nEvelyn made a face. \"You have to be so crass?\"\n\n\"Tell me it doesn't creep you out a little.\"\n\n\"If it did I'd keep it to myself.\"\n\n\"You're right, you'll make a great politician Ev. Me, I call it like I see it, and it's weird.\"\n\nI felt like I needed to say something, but I was terrified that if I opened my mouth everyone would know exactly what I was hiding. But I also remembered Taylor calling me fearless. \"They have as much right to be here as you do. They're not doing anything wrong. Besides,\" I pointed over to a hetero couple who were basically making out, \"you're not bothered by them.\"\n\n\"Look, I'm not saying they shouldn't be able to do what they want, I just wish they would do it in private.\"\n\nI was starting to rise to it now. \"I think it's beautiful. Any two people who can find love are lucky.\"\n\n\"Sure, just keep it away from me. I'm just glad we don't have to deal with it at the house.\"\n\n\"So you wouldn't let a lesbian in if one rushed?\"\n\n\"A lesbian wouldn't fit in, Aly.\" She was looking at me like I was insane. \"And we're a social group, not a public one. A gay pledge would make a lot of the girls uncomfortable. Deeply. What's it matter to you anyway?\"\n\nI spluttered for a second, my face burning red when Evelyn stepped in. \"All right, guys, knock it off.\"\n\nI stood abruptly. \"I'm going to go get something to drink.\" As I stormed off there were tears burning in my eyes and my hands were trembling. I got halfway to the little shop when I realized I'd left my money back by the blanket. I didn't want to go back though, so I kept storming away until I reached some benches by a skating path and sat down.\n\nI watched the people go by, wondering what each of their lives were like? What secrets did they keep from the people they cared about? I watched the women especially, I noticed them more than the men anyway. And I wanted Taylor near me. Eventually someone did sit down and put her arm around me.\n\n\"Hey girl, you okay?\" I looked at my best friend, seeing real concern on her face. \"Sorry about Macie, she's um, well, she's Macie.\"\n\nI chuckled, wiping a tear from my cheek. \"Do you really think it's true? They wouldn't let a lesbian into the sorority?\"\n\n\"I don't think they'd use that as the excuse, but yeah, I think it might be true.\" She gave me a squeeze. \"But I don't think it's ever actually happened, if that makes you feel better.\"\n\n\"It doesn't\"\n\n\"Aly, what's going on? Why are you getting so worked up about this? It isn't about you.\"\n\nMy jaw set, and I forced myself to stop staring at the ground and look in Sadie's eyes. \"What if it were?\" I took a deep breath. \"Sadie, Taylor is a woman.\"\n\n\"Whaaaaat?\" Sadie's mouth was hanging open.\n\n\"Taylor is a woman. I'm dating a woman.\"\n\n\"So, um, are you saying you're, like, bi, or something?\"\n\n\"No, I'm not bi. I'm a lesbian.\"\n\n\"Are you sure? I mean, maybe you're experimenting?\"\n\n\"Sadie!\" I must have looked hurt.\n\n\"Oh, God, Aly, I'm sorry. Damn, I'm turning into a clich\u00e9.\" She pulled me into a hug. \"I'm here for you, you know that right?\"\n\n\"Thanks, Sadie. Love you.\" She looked at me strangely for a second, so I added hastily, \"But not like that.\"\n\nThat made us both laugh, and we went back to our group arm in arm.\n\nMacie offered a blas\u00e9, and, in my opinion, inadequate apology. Obviously she'd gotten a talking to from her best friend while we'd been gone. I thought it best to let it go, so I did. My brain was fully occupied with the fact that I had just come out to Sadie. I'd told my best friend I was gay. Somehow that made everything I'd been feeling the last weeks even more real.\n\nThat night, as soon as we were alone in our room, I related the admittedly brief history of Taylor and my relationship. Sadie wanted details that I didn't really want to provide, so I skirted them. But eventually her playful nature asserted it itself.\n\n\"So you were never hot for me, y'know, the whole fooling around with your roommate clich\u00e9?\"\n\n\"My mom says that's not actually a thing.\"\n\n\"You're breaking the hearts of frat boys everywhere, y'know.\"\n\n\"That's exactly what mom said, but no. One of the things I've learned is that I have a definite type.\" I rolled over on my back and stared at the ceiling. \"I like tall, athletic girls with incredible legs and strong shoulders and mmm.\" I shuddered as an image of Taylor posed for my imagination.\n\n\"Does she have a six pack?\"\n\n\"Not exactly. I mean she's really fit, and if you touch her stomach you can feel her abs. It's really sexy.\"\n\nSadie giggled. \"So how did your parents take all this?\" I groaned and covered my face with my pillow. \"Oh, crap, you haven't told them yet, huh? Why not? Your parents are cool.\"\n\n\"I know, I just, I don't know.\"\n\n\"You need to do it, soon.\"\n\n\"Yeah, I will. I think it goes without saying, but this is between us, right?\"\n\n\"Of course, sweetie, I won't even tell Noah, for now. But he'd be cool about it.\"\n\n\"I know. Thanks, Sadie.\"\n\n***\n\nMacie did a few things to try to be nice to me the next day, but nothing that made me believe she'd rethought her intolerance. I didn't want to go through the year at odds with one of my best friends, so I did my best to let the whole thing drop.\n\nI had three classes on Monday, and they wasted no time in assigning homework, in addition to the basic reading necessary for high-level classes. Just one more class on Tuesday morning, and I would be headed to my lover's arms. Needless to say I had a hard time concentrating for an hour and a half on Statics when the orgasms I'd been delaying for the past week were so close to being a reality. Finally the professor clicked the button bringing up our homework problems on the whiteboard. I scribbled them down and bolted for the door.\n\nThe traffic wasn't good, but I made it to Taylor's apartment just before twelve, racing up the stairs and knocking on the door. I paused for a second before knocking again and peering inside. It was dark, and I was just starting to get a sinking feeling in my stomach when I heard the rumble of a motorcycle coming up the road. My hurt expression morphed into a silly grin as the Indian turned into the driveway, and the denim clad rider dismounted, lifting off her helmet.\n\nTaylor stripped off her gloves and stored them inside the helmet before running her fingers through her tousled blonde hair. \"I'm so sorry I'm late, Aly.\"\n\n\"You better get up here and make it up to me.\"\n\nShe took the stairs two at a time, sweeping me into her arms when she reached the top. Her mouth was on mine, her strong arms pulling me into an embrace. Our tongues caressed and danced, and I was in heaven again.\n\n- Taylor -\n\nDamn, I was late. I never liked being one of those riders, the ones who drove ninety miles an hour weaving in and out of traffic. They give all motorcyclists a bad name. But I admit I opened my cruiser up on the way home. I hadn't been able to sleep, so I'd gone out to the warehouse before dawn, figuring it would be the best way to burn the hours until Aly came over.\n\nUnfortunately it worked too well, and I lost track of time, forcing me to race to get back to my apartment. I didn't quite make it, as Aly's Mini Cooper was sitting in the driveway when I got there. I didn't bother to open the garage to put my bike away, instead kicking down the stand and stripping off my helmet.\n\nThere she was, standing just outside my door, grinning widely, brown eyes alight with happiness, just at my presence. God I needed her. I went up the steps as fast as possible until she was in my arms where she belonged, our kiss sending fires raging through my body.\n\nI broke away, breathless, turning and fumbling with my key in an attempt to unlock the door. After a few attempts I was able to concentrate through the distractions of Aly's arms around my waist and breath on my neck to open the silly thing and we stumbled inside. I managed to close the door behind us by pushing Aly up against it, hearing her moan as I reignited our kiss.\n\nMy lips trailed their way down her jaw to her ear as she whispered to me. \"I missed you.\"\n\n\"I missed you too, baby, so much.\" I feathered my mouth over her cheeks and eyelids, making her gasp. \"Did you think about me, did you need me?\"\n\n\"Ooh, yes, ahh.\"\n\nI kissed her forehead and looked into the eyes. \"Were you a good girl and do what I asked?\"\n\nShe bit her bottom lip, looking up at me through her lashes and nodding shyly.\n\n\"Good, so you've earned your reward then, you think?\" Slowly she shook her head no. \"Why not?\"\n\nHer voice was small, but dripping with sensuality. \"I should have to pleasure My Lady first.\"\n\nMy arousal, already ridiculously high, spiked about ten notches when I heard that. I almost protested, but the perfect, innocent sincerity in Aly's eyes checked me. I kissed her one more time before taking her by the hand and leading her back to the bed. Aly climbed up and turned back, reaching for me, but I stayed away. \"I want to see you strip, baby. Let me enjoy the sight of my beautiful girl.\"\n\nAly stared at me, and for a brief moment I thought maybe I'd overstepped, but then her face turned erotic. She rose up on her knees as her hips began to sway under her loose skirt. Her hands twined up over her head, pulling her long, light brown hair before letting it fall around her.\n\nShe let her hands glide over her body before turning her back to me and untying the neck ribbon to her halter top. She went down the side, loosening the strings, looking back at me over her shoulder before sliding it over her head. The clasps on her bra went next, and soon she was bare from the waist up.\n\nHer back still towards me, she embraced herself, shoulders moving in rhythm to music only she could hear. Slowly she turned, bringing her hands in to cover her breasts, then letting them slide away slowly as she pushed her chest toward me.\n\nMy mouth was salivating, and my pussy was a sloppy mess. My eyelids were almost hurting in their strain to see more. It took everything I had not to jump onto the bed with her, but I knew I'd never forgive myself if I missed out on the show she was putting on.\n\nHips swinging slowly from side to side she reached behind her to unzip her skirt. Once that was done she rolled onto her stomach and knees, her perfect ass rising into the air as she pushed the concealing material down over her twin globes. Her thong was soaked. God, she was as excited as I was. She rolled over onto her back and pushed her skirt off, legs tight together.\n\nHer fingers ran under the band of her underwear for a moment, her hips rose and she stripped them off. Now completely nude, she got onto all fours, her perfect backside swaying back and forth, pussy lips pouting out from between her legs. After a moment she rose up on her knees and turned around, one finger between her teeth, while her other hand beckoned me to her.\n\nI almost didn't realize I'd stood up. I pushed off my leather riding jacket and quickly shed my blue work shirt and sports bra. I shimmied down my jeans, stripping off my ankle socks as I did. I climbed onto the mattress and took Aly into my arms, kissing her with everything I had. My lover just melted into my body, and I could feel every inch of her against me.\n\nAly kissed my cheek, then nibbled my ear before whispering to me. \"What do you want? Please tell me.\"\n\nHer lips brushed over my neck for a second, and I knew how I wanted to start. \"I want you to kiss my neck, just suckle it while you touch me.\"\n\n\"Yes, My Lady.\" She pushed me onto my back, detaching her mouth from my skin for a moment to strip off my underwear. She kissed her way back up, over my stomach and between my breasts while her fingers traced patterns on my inner thigh, drawing ever nearer to my core.\n\nShe used her nose to lift my chin, and I happily complied, giving her complete access. Aly's lips closed over my sensitive throat as her fingers ran up and down my outer lips, and I surrendered myself to the pleasure she was giving me.\n\nI laid a hand gently behind her head, holding her to me as she gently sucked and nibbled while her fingers made music over my sex, sliding though my wet folds, sometimes dipping inside me, sometimes stroking my clit through its hood, always driving me higher and higher. I turned from side to side letting her work both sides of my neck. I thought I might pass out from the sensations. No one had ever worked me like this for so long. I can't begin to describe how wonderful it was.\n\nI reached down and grabbed her wrist, trying to communicate that I wanted it harder. Her other hand twined through my hair and she picked up the signal and quickened her pace. My body started to shake as I rode the crest of an orgasm, just shy of tipping over until finally those beautifully fingers scissored around my clit at just the right speed, and my body exploded in bliss. Her fingers were a whirlwind of pleasure, while her mouth never left my neck.\n\nAs I came down, finally starting to breath again, Aly nestled into my shoulder, her leg draped over mine, one finger caressing the skin on my neck.\n\n\"I think I gave you a hickey.\"\n\nI grinned at her. \"I'll wear it proudly.\"\n\nThat made her smile. God she's beautiful. Aly leaned up and pecked me on the lips. \"Was that nice?\"\n\n\"Oh, baby, it was so good.\"\n\n\"I'm glad. What do you want next?\"\n\n\"Seriously. Baby, you don't...\"\n\n\"I know. I want to. I love making you happy.\" She caressed my face. \"Really, what would you like?\"\n\nI couldn't believe this angel was really lying here next to me. \"Could I get this,\" I gently touched her mouth, \"down there?\" I pointed to between my legs. \"Maybe do that thing with your tongue again?\"\n\nAly grinned like the Cheshire cat. \"I was hoping you were going to ask for that.\" She kissed me, letting her full weight rest on my body. I wrapped my legs around her, trying to hold her in place, but she began to scoot down, gentle kisses leaving a trail of ecstasy as she did. She spent a brief moment suckling my breasts before she continued her journey, and I let myself fall open as she reached the promised land.\n\nMy fingers tightened around the sheet as Aly's arms wrapped around my thighs and her tongue delved deep into my pussy. I looked down at her as her mouth moved over me, a look of serene contentment on her face. She was the most beautiful and amazing woman I'd ever met, and as my pleasure built and the capacity for rational thought retreated, I was left with only one coherent notion. I was falling in love with Aly Winterberg.\n\nShe sucked my clit into her mouth, bathing it in warmth before she wrapped it in her tongue, and I lost my damn mind, hips bucking as I wailed my ecstacy out into the night.\n\nWhen I was again capable of voluntary movement I reached down, hooking my fingers under Aly's chin and pulled her up so I could kiss her as deeply as possible. When I finally broke away I whispered in her ear. \"Your turn now, no arguments.\"\n\nThe hungry husk in my voice surprised even me, but above all I wanted this perfect creature shaking in bliss underneath me, and I set to it. I worshipped her body, neck, breasts, stomach, before licking up her legs and sucking her toes into my mouth.\n\n\"Oh, sweetie, that's nice.\"\n\nI ran my tongue up over her ankle, moving steadily towards her core. Aly was starting to make lovely cooing noises, which were the most adorable sounds I'd ever heard. I passed her knee, sucking the soft, delectable skin of her inner thigh into my mouth. She began to tremble as I approached her core. Her lips were glistening, and her scent filled me, and it took a force of will not to just devour her.\n\nI slid my tongue slowly into her slit, running it along the inside of her inner lips before pushing it into her opening. She cried out and pushed herself against me as I swirled around in her flavor. I would never, ever get enough of that. So delicious. I studiously avoided her tiny nub though, which was making her insane.\n\n\"Please, Taylor, please.\"\n\n\"Yes, baby?\"\n\n\"My clit, sweetie, please. I need to come, oh God.\"\n\n\"You want me to touch your clit?\" I continued to work her lower sex, and she was almost weeping.\n\n\"Jesus, yes, please, My Lady.\"\n\nWow did I love hearing that. I started from just below her vagina, one long slow lick that rose languorously through her valley. She let go a long rising 'ohhh' as I did, and when I reached her firm little button, I sucked it into my mouth and lashed it with my tongue as she began bucking and screaming her orgasm out into the world.\n\nMy arms were wrapped around her thighs, holding my face tight against her sex, drowning myself in her delicious release, doing everything I could to draw out my beautiful girl's pleasure for one more second.\n\nWhen she finally came down, gasping for air, I just ran my tongue through her sex, gentling savoring her with little flicks and slow caresses. After a few moments and several jerking aftershocks, I felt her relax and settle back into the softness of the bed, and I began to work her slowly again.\n\nHer fingers ran gently through my short, blonde hair as I loved her, gently holding my face to her body, as if I had any intention of pulling away. I hurried nothing. This one was about the journey; the destination would come in its own good time.\n\nI'm not sure how long it was before her gentle coos and sighs became more insistent, but I didn't increase the pace. I gave slightly more attention to her button as she neared release, but I still drew it out as long as possible, and as the gentle wave of her orgasm seemed to wash ecstasy through both of us.\n\nI kissed up the length of her, and gathered her shaking body into my arms, where she nuzzled into my neck. She purred as I kissed her forehead. \"Was that good, baby?\"\n\n\"So good. Just wanna rest here. Hold me?\" So I did, pulling her as close as I could. I'd always told myself I didn't need to cuddle after sex. I was so full of shit. As I fell asleep I admitted then to myself right then that there is nothing as wonderful as cuddling with someone you love, and I wouldn't have let her go at that moment for all the gold in Fort Knox.\n\nWhen I finally regained consciousness I was laying on my back with Aly's head soft on my shoulder and her leg draped over mine. A finger was tracing lazy circles around one of my nipples. Turning, I kissed the top of her head before lifting her chin so I could do the job properly. Looking over her shoulder I saw that was just past one.",
        "\"You getting hungry, baby?\"\n\n\"Starving. And I want to run our errand before tonight.\"\n\n\"Are you going to tell me what it is?\"\n\nShe grinned at me and shook her head. \"Not a chance.\"\n\nWe stopped for lunch at a Ramen Noodle joint near my house, which was amazing, and we spent the meal laughing at each other as we made pathetic attempts at eating noodles with chopsticks. Aly had made a deal that the first person to ask for a fork or spoon had to pay for lunch, and I wasn't going to let a challenge like that go. Especially given the sorry state of my bank account.\n\nAfterwards, and having split the check, we climbed back into her Mini Cooper and she pulled away.\n\n\"Aly, where are we going?\"\n\n\"Not telling. It'll ruin the surprise.\"\n\nShe was wearing the most adorable smile, her eyes sparkling with mischief. I just couldn't help but smile back. \"Fine, be that way. But if you're taking me to be sacrificed in some pagan sorority ritual I'm going to be very upset.\"\n\n\"Don't be silly. It's not even a full moon. Oh, here we are.\"\n\nShe turned into a strip mall and I surveyed the occupants. There was an H&amp;R Block, a fish and chicken joint, a Great Clips, and an, oh shit.\n\nSure enough, Aly pulled up to the shop on the far right where the large windows were curtained, with only four mannequins visible. Three were female, each wearing brightly colored lingerie, and another was male with only a tight pair of red shorts.\n\nA pink sign was shining in the window, advertising Adult toys and novelties, lingerie, DVDs, etc. I realized my mouth was hanging open a little and I was staring. Aly turned to me with a big grin on her face.\n\n\"We're going in there?\" I was completely unable to wipe the look of shock off my face.\n\n\"What? You've been in these before, I mean you do have the Captain and Tennille.\"\n\n\"God, Aly, I ordered those online.\" I bit my lip.\n\nShe giggled, reaching out and touching my cheek. \"You really are nervous.\"\n\n\"Aly, when I was a kid these places were beyond taboo. My mother would start praying if we even drove past one.\"\n\n\"Seriously?\"\n\n\"Well, maybe not, but close.\" I stared at her. \"You've been in there?\"\n\n\"No, but I've finally met someone I plan on having a lot of great sex with, and I want to see what they have.\"\n\nI just gaped at her, my mouth in full 'fly-catcher' mode, which made her laugh.\n\n\"C'mon, sweetie, let's go.\" She opened her door and climbed out, her grin still plastered across her face. I followed suit, forcing my jaw shut. Aly stepped up onto the sidewalk and held out her hand. My heart was starting to thump, but sliding my hand into Aly's made everything calm down. How does she do that?\n\nThe store was mercifully empty, as it was a Tuesday afternoon, except for the blue and purple haired shop girl. She called out a welcome, which Aly returned warmly. I was studiously averting my eyes, using the old 'if I can't see her, she can't see me' philosophy.\n\nAly pulled me over to the right hand side of the store, where innumerable bright packages were hanging from floor to ceiling wire racks. There were dildos, vibrators, handcuffs, men and women in various states of undress adorned nearly every package, or at least it seemed that way to me.\n\n\"You okay?\" Aly ran her hand reassuringly up and down my arm.\n\nI nodded stiffly. What the hell was wrong with me? They're just sex toys. I mean, I owned some; I used them. I was supposed to be the tough girl. Okay, I can do this, I'm...\n\n\"Can I help you ladies?\"\n\nI sucked in a breath and almost jumped out of my shoes. Aly and I spoke at the same time, my hurried \"No!\" was quickly overridden by her far more honest response.\n\n\"Yeah, actually.\" Aly slipped her arm through mine and looked up at me with that soft expression of hers. \"The strap-ons that we've been using just don't give her enough stimulation when she's wearing them. I'd really like something that would let her orgasm while she penetrates me.\"\n\nI think my jaw actually bounced off the floor, and my cheeks were about to spontaneously combust. But I didn't let go of Aly's hand.\n\nThe shopgirl, whose name was Trinity according to her tag, just nodded, like she was asked that question every day. Who knows? Maybe she was. \"I got you. We have our double enders over here, and these have a vibrating pad at the base. I have one like this for pegging my boyfriend, and it feels amazing.\"\n\n\"Really? Yeah, I think that would be good.\"\n\nAly and Trinity kept talking, comparing various models. Aly tried to include me in the conversation, asking my opinion and the like, but I'm ashamed to admit I wasn't keeping up my end of the deal. I kept just hoping the floor would open up and swallow me.\n\nAly finally took pity on me. \"We're going to take a look around. Thanks for your help.\" When Trinity moved away she turned to me. \"What's with you, sweetie? Do you want to go?\"\n\nHer voice told me she was hurt. She was doing this for me, and I was shutting down.\n\n\"No, I'm sorry. I just....\" I looked around terrified, like a vampire in a garlic store.\n\n\"I shouldn't have sprung this on you. Sorry.\" She ran her hand up my arm.\n\nI smiled. \"No, I can do this. I'm a big girl.\" I nodded my head a few times, psyching myself up and turning back to the rack of toys.\n\n\"Yeah, you are.\" She went up on her tiptoes and gave me a peck on the cheek. \"Now how 'bout this one?\"\n\nWe talked it over, and eventually picked out a double ender with a built in vibrator for the wearer. I balked at the price, as the thing was not cheap, not in the slightest.\n\n\"You sure, baby?\"\n\nShe was holding it almost lovingly. \"Oh, yeah, if this is the one you like, if it gets the job done, it's worth every penny.\" She carried it over to Trinity at the counter, and I followed like a puppy. \"Is this one okay?\"\n\n\"Yeah, the reviews say it's good, high quality. I've never had one come back.\"\n\n\"Excellent.\"\n\n\"Is this all? Or do you want to look around some more?\"\n\nAly looked eagerly up at me, and I knew she wanted to look around more. She's so cute. \"Alright, let's go. Can you hold that here?\"\n\nThe sales girl nodded, and Aly grabbed my hand and pulled me back over to the novelties. \"What do you think about these?\"\n\nAly was standing in front of a bunch of black leather items, but what she was holding was a pair of padded handcuffs.\n\nI was staring. \"You want some of those, like bondage stuff?\"\n\nAly blushed and looked down at the pink item in her hands. \"Kind of. I mean, I don't feel the need to be trussed up like a Christmas turkey, but being a little helpless would be okay, if you want. I mean, My Lady could chain me to the headboard, and have her way with her baby. If she'd like that.\"\n\nThe way she was looking at me was enough, but the thought of Aly lying naked on my bed, hands tied above her head, made me tingle all over. I could just imagine the look of sweet surrender in her eyes, the giddy anticipation mixed with just a touch of fear.\n\n\"What do you think?\"\n\nHer voice snapped me out of my fantasy. \"Yeah, absolutely.\" I couldn't help the wicked grin that stole across my face. \"But if we're getting that, I want this, too.\" I pulled down a black leather wand tipped with feathers.\n\nAly's grin was ear to ear. \"You're mean.\"\n\nI shrugged. \"Maybe just a little.\"\n\nShe took the tickling device I was holding. \"Now how about over here?\"\n\nShe dragged me over to the lingerie section, and we spent about twenty minutes discussing things. She'd hold up outfits, and I'd tell her what I thought. I really liked the idea of her in lace teddies and babydolls, the more feminine and innocent the better. By the end I was really into it, my embarrassment pretty much gone. And I was just stunned by how much Aly wanted to make me happy, and how much thought she was giving to what would please me. It was humbling.\n\nWe exited the store with the feather wand, cuffs and, of course, the new strap on. It hadn't been cheap, and I was a little ashamed to have let Aly pay for it, but she was so excited I got over it. She didn't buy any lingerie, saying that would be a surprise for later.\n\nAs I put my seatbelt on, I looked over at my girlfriend. That is what she was, I was starting to admit it to myself. \"So where to now?\" It wasn't yet three o'clock.\n\n\"You could take me to some art.\"\n\nI laughed. \"Huh? What do you mean by that?\"\n\nAly shrugged her shoulders. \"I mean I want to look at art with you, someone who's really studied it. Is there a place we could do that?\"\n\nI nodded. \"Yeah, I think so. Get back on the freeway and head south.\"\n\nI directed her to a beautiful studio just north of Hollywood. I knew the owner, and had even exhibited a few pieces occasionally. I'd never had a full show, though, and I'll admit it was a dream of mine. Maximillian Beville could make an artist.\n\nWe parked in the lot next to a BMW and a vintage Alfa Romeo. We entered, Aly's hand slipping into mine, and a beautiful blonde receptionist greeted us.\n\n\"Hey, Adeline. How've you been?\"\n\n\"Taylor, it's been too long.\"\n\n\"Thanks. I just want to look around, if that's okay.\"\n\n\"Of course.\" She smiled a brilliant smile and picked up the now ringing phone. \"Beville Studio, how can I help you?\" Adeline waved us past and we headed past. There was an exhibition of watercolors, done by a famous local artist, and I showed Aly the difference between those and the pieces in oils, and how you could tell the difference. I showed her several modern sculptures, and explained the styles they represented, including why the lighting was done in a certain way.\n\nFinally, we made it out to the sculpture garden in the back, where I was explaining the style of the marble statue that dominated the center. I admit I was geeking out about it some, as it was a piece I found highly beautiful. \"It actually belongs to Mr. Beville. It's kind of the symbol of the studio; it's even on their stationery. He said he couldn't bear to part with it for any price, so he bought it from the artist.\"\n\n\"And a pretty penny he paid for it, too.\"\n\nI jumped a little at the voice behind me, and turned to see Mr. Beville himself standing there.\n\n\"Miss Knox, wonderful to see you.\"\n\nI spluttered for a second. \"You too. Um, Aly, this is Maximillian Beville. Mr. Beville, this is Aly Winterberg.\" I swallowed and decided to go for it. \"My girlfriend.\"\n\nAly, who was holding onto my arm, beamed up at me for a second before extending a hand to the newcomer. \"Nice to meet you, this is just beautiful.\" She looked around, indicating the surrounding garden.\n\n\"Thank you, and what do you do, my dear?\"\n\n\"Actually, I'm in my senior year at USC, studying architecture.\"\n\n\"That's very impressive, young lady. Almost as impressive as getting the rakish Taylor Knox into a relationship. I always thought she was married to her art. You will still be bringing pieces to the fair?\"\n\n\"Yes, sir.\"\n\n\"Good. She really is a very talented sculptor, Aly. She just needs something to take her from talented to transcendent. A muse, perhaps.\" I could see the way the silver haired old fox was grinning.\n\n\"She is working on something new. Maybe I do inspire her. I try.\"\n\nMy face was turning interesting shades of red, between Aly's gaze of proud adoration and Mr. Beville's knowing looks. \"Something new, I look forward to seeing it.\"\n\nI fidgeted. \"Um, it's not even close to ready, really.\"\n\n\"Well then, I look forward to when it is.\" He gave a little bow to Aly, and then to me. \"Miss Knox, Aly, a pleasure.\" And he strode away.\n\n\"See, he thinks you're talented. Just like I do.\" She went up on her tiptoes and kissed my cheek. \"Wanna head home? Make some dinner?\"\n\n\"You think I have real food in the house?\"\n\nAly rolled her eyes at me. \"Ok, grocery store first.\"\n\nWe made it home with a packet of shrimp and some fettucini. I did have to go down and raid Vicky's spice rack, but we ended up with a garlic shrimp concoction that smelled absolutely delicious. I couldn't believe I was eating shrimp. And cooking with Aly was just fun. She had no idea what she was doing, but she was still bopping around the kitchen, singing, giving me little squeezes and kisses, always with that bright grin and those big, beautiful brown eyes. What was it about her? Everything she did just made me smile.\n\nAs we sat down to dinner, I remembered doing the same with Gillian. But even then, there had been something wrong. I doubt I could have told you what it was, but this was different, in all the right ways. Aly took a bite and closed her with a sigh. \"Mmm, that's really good.\" She stabbed her fork at her plate. \"What do you think?\"\n\n\"That I love watching you do, well, anything, really.\"\n\nShe shot me a wide, affected smile before pointing at my dinner. \"Try it. I want to know what you think.\"\n\nI nodded and pierced a piece of shrimp with my fork, twirling some pasta around it as well. Aly was right, it was really good. I need to try some other seafood. After we went through our dinner and a couple glasses of the cheap bottle of wine we'd bought, Aly set her empty glass down. \"Ready for dessert?\"\n\n\"Did we get anything for dessert?\"\n\n\"Not in particular.\" My eyes were already widening at the sudden husk in her voice, but they went wide as saucers when she peeled off her blouse. She walked over to me and sat in my lap. \"But we can think of something.\"\n\n\"Are you sure? I heard you're supposed to wait an hour after you eat. You know, cramps.\"\n\nAly giggled. \"Well, in that case, why don't we take it easy, cuddle on the couch, until you decide you want me?\" She gave me a brief peck and stood up, carrying dishes into the kitchen with a delicious sway in her ass. Soon enough I was sitting on the couch. I turned on some show, no idea what it was, we didn't watch much. Aly went from sitting by my side, to on my lap, to reclining in my arms in the space of five minutes.\n\nI was wrapped around her, holding her as close as I could, and she was completely relaxed, totally relying on me to hold her up as our lips moved together. The complete surrender in her was beyond intoxicating. She clung to me, totally trusting, perfectly innocent, and I felt the most powerful instinct to protect her, to treasure her, to care for her in every way. I loved her.\n\nJust as I was realizing this she pulled away slightly, looking up at me through her lashes, making me melt a little inside.\n\n\"Do you think it's been long enough? Is it time to take your baby to bed?\" I stood and picked her up, which made her sigh and cuddle against me. I set her gently onto the mattress, releasing her bra, which she tossed on the floor. She turned to me, coyly biting a finger. \"What are you going to do to me?\"\n\nI knew what I wanted. I wanted to lay her down, put on our new toy and fuck her till she didn't have the energy to scream my name anymore. I wanted to drown myself in her nectar. I wanted to make her feel so good she'd never even consider being with anyone else ever again. I wanted to make her mine forever. Unfortunately I couldn't bring myself to say any of those things. I was terrified of scaring her away, so I chickened out.\n\n\"What do you want, baby?\"\n\nHer face fell for the briefest of seconds, before that sexy innocent look was back for a second try. \"I want My Lady to have her way with me. To have me any way she wants. How does she want me?\"\n\nI think my mouth was hanging open. My pussy was soaking wet as I watched Aly slowly gyrate on the bed. \"Take your skirt off, baby, and lay back on the bed.\" Aly immediately did what she was told, stretching out with only a pair of lacy blue panties between her and my comforter. I crawled up on the bed, towering over her as I unbuttoned my shirt, reveling in the wide-eyed look of adoration and lust radiating from my baby's face. I was going to make her feel so good.\n\nOnce I was topless I bent down and took her mouth with mine, and I could feel her whimper at the force of my kiss. I pushed her arms over her head. \"I'm going to enjoy this beautiful body. No interference, understood?\"\n\n\"Yes, My Lady.\" Aly's voice was a delicious coo, sexy as hell, and I began to work my way down. I knew we were going to have to talk about this whole 'my lady' thing, and what exactly we were doing, and what we expected from each other, but for now I was just going to go with it. And I can't describe what those two little words did to me. It made me want to puff my chest out in pride, and wrap my baby up and protect her forever. Mostly, I desperately wanted to be worthy of her adoration. Worthy of her love.\n\nI began to kiss down her neck as she made soft sighs of happiness. \"I love to touch your skin, baby. You're so soft, you smell so good. I love to hear the noises you make.\" I sucked one of her nipples into my mouth, making her let go a long moan that made me ridiculously happy inside. Slowly, so slowly, I loved on her breasts. Eventually she forgot about keeping her hands over her head, and started running one through my hair while the other gently scratched my upper back, which felt amazing.\n\nAs much as I loved her bust, I wasn't going to get the sounds I really wanted from them. I needed to make Aly so happy, so I started to kiss over the soft skin of her tummy. I moved down between her legs.\n\n\"Oh, are you wet for me, baby?\"\n\n\"Uh-huh.\" I ran my hand over the fabric above her folds, making her whimper. I gripped the material and pulled it off in one fluid motion before pushing a finger into her core before I slipped it into my mouth. So delicious. I settled onto my stomach, wrapping my arms around her thighs, my mouth inches away from her sex. She began to shudder as I breathed on her wetness, and I couldn't take it anymore. I dipped my tongue into her and set to work, pulling out a long high pitched moan. Now that's what I'm talking about.\n\nI worked her slowly, pushing my tongue as deep inside her as I could. In and out, in and out as she pushed herself against me, before circling round and round her entrance. When her moans and cries reached full pitch I licked up until I found her little clit, still sheathed in its hood. I delved there, stroking and caressing the little nub. Aly was desperately rubbing herself against my tongue.\n\n\"Come for me baby, I want you to come for me.\" I sucked her clit into my mouth and I felt Aly begin to spasm and buck with each pulse of her orgasm, and I lapped up the nectar she produced. I moved up her body as she came down. \"God, you're beautiful when you come.\"\n\n\"That was wonderful.\" She pulled me to her, our mouths meeting, and I reveled in the unbridled intensity of it. \"What does My Lady want now?\"\n\n\"Well, first you're going to return the favor. I want to feel that lovely mouth on me.\" I ran a finger over her lips before rising up onto my knees and straddling her. I couldn't believe her eyes, they were locked in on my sex, naked desire shining from each. She wanted me.\n\nI moved up the bed while she scooted down, licking her lips in anticipation. Her hands wrapped around my thighs and she moaned in pleasure as she buried her mouth in my sex. As the exquisite pleasure flowed through my body I couldn't look away from her. Her eyes were closed, a look or serene contentment on her face as she serviced me. Who was this girl, and how did I get so damn lucky?\n\nIt was the last coherent thought I had before the pleasure started to take over, and I just let myself drown in it until I felt the world explode in joy. Aly was beaming up at me from between my legs, a look of devilish innocence on her face.\n\n\"Was that acceptable, My Lady?\"\n\n\"That was perfect, baby. So perfect, I think I should give you a reward.\"\n\n\"What reward, My Lady?\"\n\nI caressed the side of her face. \"I was thinking I should put on our new toy, and take you, over and over again. Would you like that?\"\n\nI could see Aly shudder. \"Oh, yes, My Lady. That sounds wonderful.\" The tall black bag from the adult toy store was by the bed and I reached in and pulled out the new strap on. Luckily I'd had the foresight on the way home to take it out of the packaging, which would not have been sexy at that moment.",
        "I couldn't believe how into this whole 'My Lady/Baby' thing I was getting. It made me feel amazing, and Aly was about to take it to another level.\n\n\"My Lady, may I beg a favor?\"\n\n\"Of course, baby.\"\n\n\"May I put that on you?\"\n\nOoh, why didn't I think of that? \"I'd like that, very much.\"\n\nShe took the toy almost lovingly, her hands slowly running over it. Then she laid her hands on me, so softly. \"Please, would you stand up, My Lady?\"\n\nI did so, and Aly rolled off the bed, kneeling before me. She kissed my stomach and thighs before resting back on her legs. She held out the toy, and I stepped into the straps, first left, then right. Aly shimmied them up my legs. She ran two fingers through my sex, which was dripping from the attention.\n\nAly looked up at me, eyes questioning, and I nodded. She slid my end inside me, giving me a thrilling moment of pleasure. The straps were tightened, and Aly turned on the vibrators, making me gasp, but I kept my composure. I hooked a finger under her chin and pulled her gently up to her feet. I gave her a soft kiss, feeling her body tremble in anticipation.\n\n\"Get on the bed. Hands and knees, face the headboard.\"\n\n\"Yes, My Lady.\" Aly crawled slowly onto the bed. She grabbed onto the painted metal bars, her ass swaying seductively as I knelt behind her. I grabbed the phallus and slid it through her folds, wetting it with her nectar and eliciting a high-pitched moan. I almost asked if she was ready, but that wasn't the point, was it? She wanted me to take her, so I did. I positioned myself behind her, and without a word drove deep inside her body. Aly cried out, and for a moment I was terrified I'd over stepped, but Aly pushed herself back against me.\n\n\"Please more, My Lady.\"\n\nI thrust into her again, and again, and she met every one. I couldn't believe how good it felt, the length inside me, the vibrator on my clit, with every movement my pleasure grew and grew. It was a totally new experience. Every other time I'd been in this position I'd been in complete control. I gave the pleasure, but my own was an afterthought. But from our very first time that hadn't been good enough for my Aly. I remembered how horrified she'd been when she found out I hadn't orgasmed during our first time.\n\nAly wanted me to feel good, it was so important to her. So I gave myself over to it, gripping my baby's hips and pulling her back against me with every thrust, mingling her lovely coos of pleasure with my own throaty moans.\n\nMy orgasm was fast approaching, and I decided I wasn't going to try to hold it back, but Aly beat me there, coming apart under my ministrations, hips jerking in time with her pleasure. Her gyrations and cries put me over the edge, and I pushed against her desperately as I rode the waves.\n\nAs I recovered I knew I wasn't done, but I also knew I wanted to look into my lover's eyes, so I pulled out and rolled Aly onto her back. Her face was filled with rapt adoration, and she reached for me as I overshadowed her.\n\n\"My Lady.\" Her words were a breathy whisper as I filled her again. The total surrender in her voice was beyond heady. I needed to kiss her, and she must have felt the same as our lips came together passionately, bodies pressed together. After a delicious eternity I broke away and started to move in her as her legs wrapped around my waist. She pulled me to her, burying her face in my neck, her lips suckling my sensitive skin, and I lost all sense of time or place. I rocked against her, engrossed in her as she held me impossibly close.\n\nIt took me almost no time to come again, beautifully, softly, against my lover. I continued to work in her, her soft moans sounding right in my ear. Eventually she shuddered underneath me and I tipped over the edge again.\n\nI slipped out of her, rolling onto my back and turning off the vibrators. Aly turned onto me, one leg draping over mine, her soft head of hair resting on my shoulder while her fingers traced patterns over my breasts and stomach.\n\n\"Does My Lady like it?\" She gripped the phallus, sending an after shock racing through me.\n\n\"Oh, yeah, baby, it was amazing. You?\"\n\nShe grinned wickedly. \"Mm-hm, and knowing you were enjoying it made it ten times better.\"\n\n\"Really?\" My voice choked with emotion.\n\n\"Of course.\" Her voice was so soft and loving, her body so gentle against mine. \"Making you feel good is what's most important to me.\"\n\n\"That's important to me, too. I mean that you feel good. You know that, right?\" I moved so that I could face her, which reminded me I was still wearing the strap. I made an uncomfortable face, which made Aly's twist in concern.\n\n\"Lie back, My Lady.\" She moved down and slowly removed the contraption I was wearing, laying it beside the bed before climbing back into my arms.\n\n\"Aly, can we talk about the whole 'My Lady' thing?\"\n\nHer face scrunched up. \"You hate it?\"\n\n\"No, no, I like it. Love it, really, maybe too much. But I need to know what it means to you, what you want.\"\n\nShe buried her head in my shoulder. \"It's embarrassing.\"\n\n\"When's that ever stopped you from doing something?\"\n\nShe giggled for a moment before getting serious again. \"When I was in school I played on the soccer team, but I was really more of an equipment manager. Coach got me in enough games my senior year for my varsity letter, but really I collected the towels after practice and made sure the balls were brought out and stuff like that.\" She snuggled in closer, running her fingers over my arm. \"I've thought about it a lot recently. What I really loved was doing things for the other girls. When they'd smile and say thank you it just lit up my day. I so wanted to be close to them, but I didn't know how. And when they'd try to include me I'd get all goofy. I didn't know what it meant then. But now there's you.\"\n\n\"But you're not like that around me.\"\n\n\"The hell I'm not.\" She kissed my shoulder. \"Do you have any idea how hard it was for me to go talk to you that first time?\"\n\n\"Really?\"\n\n\"I was terrified. You were so amazing and beautiful. That first night, when we danced, I just wanted to be yours so badly. I want to make you happy, to, oh, I don't know.\"\n\nShe was really blushing now, so I kissed her forehead. \"You do, you know, make me happy.\" Her smile was such joy, but it got nervous again quickly.\n\n\"I just, well,\" she bit her lip and looked away. \"It's embarrassing.\"\n\n\"Aly, baby, you can tell me anything. How can I make you happy? That's important to me, too.\"\n\nAly took a deep breath and kissed me on the shoulder. \"I think, um, let me serve you? In the bedroom, I mean.\" Her voice was a forced whisper. \"You decide when we make love, and what we do. I want your pleasure to come first, to always be most important. It's always whatever you want. Doing for you, that's what makes me happy.\"\n\nI didn't know what to say. It sounded crazy, but god I wanted it. But it wasn't right. \"Aly, but what about you? I don't want you to not enjoy, um, being with me. Can't I ever, you know, just give you pleasure?\"\n\n\"Of course you can. I know you will, because you care about me. It's why I can give myself to you. Because you take care of me. Because I'm your baby.\" She snuggled in closer. \"Besides, being in your arms, especially after I know I've made you happy, it's the most wonderful feeling in the world.\"\n\nWe kissed, deeply and purely, and I tried to wrap my head around the gift Aly was offering. It was something I wanted desperately. But still, taking it felt wrong. Selfish. Depriving someone of their free will? But it wasn't, I wouldn't make her do anything she didn't want to. I'd never take advantage of her like that. But taking her tonight had felt so good, and she'd loved it.\n\n\"What are you thinking, My Lady?\"\n\n\"I'm just worried.\"\n\n\"What about?\"\n\n\"What if I go too far? Ask you to do something you don't want to do?\"\n\n\"I actually looked that up. If I say 'red' that means I don't want to do it, or I want to stop. I doubt I'll ever say that, though. I like doing things with, um, I mean for you, too much.\" She said the last bit with a tease in her voice, her grin stretching from ear to ear.\n\nI matched her expression. \"So if I said I'd like you to do that thing with your tongue for me again?\" I didn't think it was possible for her smile to get wider, but it did, and she immediately rolled on top of me and began kissing my neck. The nervous energy from our intense conversation just flowed away, and I just let myself melt into the cushions as she worked her way down my body. She worshipped me perfectly, going from breast to breast before kissing her way down over my stomach. She pushed my legs gently apart and lowered her mouth to me.\n\nI let her float me along until that moment when I felt myself wrapped in her warm, wet tongue, and I was swept away in bliss. God, she was perfect.\n\nWhen I finally came down Aly was back in my arms and I was kissing her, and holding her, and I never, ever wanted to let her go.\n\n\"Covers, baby?\" She nodded and I pulled the bedding around us. I held her tight underneath, feeling relentlessly happy and satisfied. But our night had one more curveball to throw at me.\n\n\"My Lady, can I ask you a question?\"\n\n\"Of course, baby.\" She was spooning against me, and I pulled her tight.\n\n\"Would you be upset if I fell in love with you?\"\n\nI felt like I couldn't breath. I didn't deserve love. I wasn't worthy of it. But I wanted it so badly and I wanted it from her. Could I be brave, like Aly was, just once, and admit that I needed something?\n\n\"I'd like that, baby. Very much.\"\n\n\"Good.\" A heavy moment passed, and I don't think I breathed once. \"Taylor?\"\n\n\"Hm?\"\n\n\"I love you.\"\n\n\"I love you, too, Aly.\" I felt her relax against me as soon as I said it, and that was the most amazing sensation. I kissed her gently on the back of the head, and she sighed. I'd said it, and I'd meant it. Now I just had to live up to the promise I'd just made.\n\n********\n\nThank you for reading, rating and commenting. A little note on the inconsistency from last chapter. Kelsey was originally written as a freshman, but I had to raise her age to 18 to get chapter one published. I think I forgot to alter chapter two. I will go through it and resubmit as soon as I can. But until then we shall press on. Happy New Year to everyone!"
    ],
    "authorname": "JCMcNeilly",
    "tags": [
        "lesbian romance",
        "romance",
        "drama",
        "lesbian drama"
    ],
    "category": "Lesbian Sex",
    "url": "https://www.literotica.com/s/hero-worship-pt-03"
}
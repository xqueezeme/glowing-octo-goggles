{
    "title": "A Tiny Slip Ch. 04",
    "pages": [
        "The chronological order of my stories is now listed in WifeWatchman's biography.\n\nFeedback and constructive criticism is very much appreciated, and I encourage feedback for ideas.\n\nThis story contains graphic scenes, language and actions that might be extremely offensive to some people. These scenes, words and actions are used only for the literary purposes of this story. The author does not condone murder, racial language, violence, rape or violence against women, and any depictions of any of these in this story should not be construed as acceptance of the above.\n\n\n\nPart 23 - Blinded By The Light \n\nSunday, June 26th. The four State Legislators sat in the office of State Senator Richard Langdon, having a lunch meeting. With him was Sen. Katherine Woodburn, Sen. Jimmy 'Coffin' Cerone, and Rep. Justin Madoff.\n\nOnly Senator Cerone's appetite seemed unaffected as he enjoyed his lasagna, having a second helping along with the Caesar salad he'd practically wolfed down. The others did not seem to be hungry, as the news of the previous Wednesday had been enough to ruin their appetites for days.\n\n\"I wish I could have your Olympian detachment, Senator Cerone.\" said Katherine.\n\n\"I learned a long time ago that no matter how bad it seems to be, it won't get any better by not eating.\" said Cerone. \"And I daresay not a single vote will be different if I don't eat lunch today.\"\n\n\"I'm not sure how different things are going to be, even after last week's events.\" said Justin Madoff. Langdon just stared at him.\n\n\"Looks like your friend didn't come through, Katherine.\" said Cerone, relishing his words as much as the garlic bread he was enjoying. \"He ended up dead, and now the Iron Crowbar is a hero on a national scale.\"\n\n\"Not really.\" said Katherine. \"He's getting mentions, but the FBI is not letting the story really get out, because they're working on leads all over the place.\"\n\n\"So what is the real damage here?\" said Madoff. \"To us? To the State Democrats?\"\n\n\"Too early to tell.\" said Langdon, drinking his wine a bit too freely, knowing it was not really too early to tell. \"The exposure of Westboro isn't really rubbing off on Jack Lewis, nor on us. But God only knows what might come out over the next month or two as Troy and the FBI keep digging.\"\n\n\"The worst damage is that the Iron Crowbar survived the helicopter crash.\" said Katherine. \"He saved the thousands in the church. All of our work to destroy his reputation is totally gone. And now... my colleagues in my District are scared to death that they could become his next targets.\"\n\n\"I have my people working on damage control for anything that might touch us.\" said Langdon, meaning himself. \"We circled the wagons after that escape from Women's Prison, so I think we're going to be okay. Katherine, I don't know if you can say the same thing.\"\n\n\"I've got a few things up my sleeve that can distract the Iron Crowbar, and maybe even get the Media to start hounding him again.\" said Katherine. \"I'll first have them asking him if he knew that church was rigged with bombs, and if so, why did he let them be in mortal danger by going in there. And then... well, I'll just save that part for later.\"\n\n\"Okay,\" said Langdon, \"we've got a meeting with Jack Lewis and his campaign staff in an hour. Let's decide what we need to tell him...\"\n\n* * * * * * * * * * * * * * *\n\n\"I'll tell you guys what the big problem is.\" said SBI Director Jack Lewis. \"The Media has suppressed it so far, but SBI Agent Greenwalt, who was a piece of shit in the first place, was one of the gang that attacked Thaddeus Ward and two of the Iron Crowbar's officers at Ward Harvester. Greenwalt and the other attackers were killed by the Iron Crowbar's SWAT teams, saving Ward and the Officers.\"\n\nLewis continued: \"If it gets out that Greenwalt, an SBI Agent, was part of an attack on the TCPD, and after that botched disaster raid that killed that US Marine... then we've got problems. It will come back to me. It will hurt my candidacy.\"\n\n\"That's true, sir.\" said SBI Deputy Director Robert Gaston. \"But you had nothing to do with any of that, we know that, everyone knows that. The guy was rogue, and that has to be the line we take.\"\n\n\"That won't do the Director any good.\" said a campaign staffer. \"What I think you need to do is begin an investigation of Greenwalt, so that you can say you have no comment while the investigation is going on. That's what the U.S. Department of Justice does to stall investigations into any criminal operations they've committed.\"\n\n\"Sir, you can also bring up where these situations occurred.\" said the Queen of Opposition Research, who looked haggard and exhausted. \"Keep reminding the voters that it Greenwalt died in the Iron Crowbar's County, as a result of his actions. And the lawful raid on that baby killer Guernica was interfered with by the lawless Iron Crowbar.\"\n\nIf she wasn't so good with research, thought Jack Lewis to himself, I'd fire her in a New York minute. But he couldn't do that, so he chose the patient route.\n\n\"Well, we can't do that, Queenie.\" said Lewis. \"The Iron Crowbar's popularity is sky-high right now. He has just defeated one of the deepest criminal syndicates not only in this State but in this Nation. Gaston, do you really mean to tell me that we had absolutely nothing on Westboro and what he was doing?\"\n\n\"Not a peep, sir.\" said Gaston. \"Not even a suspicion. Until he sent that recording to the First Baptist Church that he was behind putting bombs in there, he was considered halfway a saint. If any of us had accused that man of a crime, he'd have hauled our ass into Court and come out with our pensions going to him to compensate him for the slander done to him. How the Iron Crowbar even detected what he was doing, much less stopped him... is beyond me even now, today.\"\n\n\"So what do we say,\" said Lewis, \"when Jared calls us incompetent for not having any idea about Westboro, much less catching him?\"\n\nKatherine Woodburn spoke up. \"You can say that their former Police Chief Griswold had no idea about Westboro for years, much less other things going on in that County right under his nose. You can say the FBI didn't have a clue about Westboro, either, and if they bring up the Iron Crowbar, you just say he got lucky and figured it out.\"\n\n\"In other words, Jack,\" said Jimmy 'Coffin' Cerone, \"they can't make much political hay out of it, and the Media will protect you, as well.\"\n\n\"Welp...\" said Jack Lewis, \"according to my sources, the Iron Crowbar is going to be much too busy working with the FBI on this stuff for at least a month. So use that time to make sure we are clean and clear of any problems, that any issues get buried so that they are never found, and get ready to go full throttle with attacks on Jared. Attacking his puppet Griswold is an excellent idea. We also have the Fourth of July coming up; let's make sure we get my appearances then right, as well.\"\n\n\"Think you should be seen at the Town & County Triathlon?\" asked Gaston.\n\n\"Well... that might not be a bad idea...\" said Lewis...\n\n* * * * * * * * * * * * * * *\n\nAt that same time, Federal Judge K.M. Landis looked upon the two women in his chambers with skepticism... especially the young woman in Goth leather pants and boots.\n\n\"Special Agent Speer,\" he said to Sandra Speer, \"who is this young woman so... unusually attired?\"\n\n\"I'll handle this.\" Mary Mahoney Milton said quietly to Sandra. She pulled out her TCPD badge. \"This goes with my attire, Your Honor.\"\n\n\"And what is your position with the Police Force?\" asked Landis.\n\n\"Special Assistant to the Police Commander for I.T.\" said Mary. \"That being Police Commander Donald Troy.\"\n\n\"Oh... him.\" said the Judge. \"Quite a feat he pulled last week.\"\n\n\"And that is why we're here, Your Honor.\" said Sandra Speer. \"We are requesting a warrant to make several arrests. Master Technician Mahoney will walk you through the financial transactions leading from Raymond Westboro to these people...\n\n* * * * * * * * * * * * * * *\n\nLouise Belfort of the State Housing Authority was walking to her car after having a late lunch with some of her 'friends', the core of her gang that recruited ex-cons. The death of Raymond Westboro had been shocking, and she had just told her group that their operation would be shut down, and they should consider scattering to the Four Winds.\n\nAs she reached for the door handle of her car, she felt something on the back of her neck and heard the words \"Don't move. FBI.\" The words came from Special Agent Sandra Speer, who was holding the gun to the back of Belfort's neck.\n\nAs the FBI Agents swarmed, arresting members of her gang inside and outside the restaurant, Belfort was handcuffed, and her mouth was taped shut. There would be no cyanide suicides if the Bureau could help it.\n\n* * * * * * * * * * * * * * *\n\nWatch Captain Lockhart came to the office of the Warden. \"You wanted to see me, sir?\"\n\n\"Yes.\" said the Warden. \"Come on in.\" Lockhart stepped inside----- *WHAM!*\n\nHe was on the ground, held down by several burly FBI Agents as his hands were secured behind his back. Tape was also applied to his mouth.\n\n\"Thank you for your help, Warden.\" said FBI Special Agent Martin Nash. The large contingent of well-armed and -armored FBI Agents hauled their large fish away...\n\nPart 24 - The Consultant of Crime Solution \n\nMonday, June 27th, 5:00pm. On the day I was supposed to be deposed and would have to take the Fifth, thus destroying my case against the Consultant of Crime, I instead was part of a large party at the River Valley Country Club, in the large room where the Hot Wives Investment Club met every month.\n\nBelieve it or not, a surprisingly large number of members of the First Baptist Church had a funeral for Raymond Westboro. In a public statement to the Press, they blamed me for his death, and for the destruction of their church. This would be akin to blaming The Batman for The Joker murdering some 600 people, but some people would do that. Sheesh.\n\nThere were a lot of people present at River Valley Country Club for the party. All of my Detectives, the Police leadership, a bunch of Uniformed Officers, some Fire Department people including Roy Easley, Jack Muscone's FBI team and other FBI people, SBI Deputy Inspector General Frank Soltis, Warren and Ventura from the City Police, Commissioner Robinson and Lt. Hanson from the Campus Police, members of my family, including Dr. P. Harvey Eckhart, and of course Chief Griswold.\n\nAnd to my utter shock, Teresa Croyle was there. She was in a wheelchair, being pushed around by either Todd or Cindy, her right arm in a sling and her shoulder immobilized. But she was there.\n\n\"Sure you're okay?\" I asked her. \"You were just in surgery a few days ago.\"\n\n\"And you're going to be in surgery within a year, with that back of yours.\" Teresa predicted. \"But I'm fine. You didn't really think I'd miss this, did you?\"\n\n\"Remind me to never bet against you, on anything.\" I said.\n\n\u2028\"Especially next year's Police Boxing Matches.\" Teresa replied. I just laughed. Cindy did not. Her ice blue eyes flashed fire.\n\nAnd the food! My goodness, was that food good and in large quantities. Plenty of beef, including prime rib (!), chicken, and fish, vegetables, rice, potatoes, bread, salads, and other trimmings. And it was all consumed, too.\n\nThe Country Club had set up round tables for everyone to sit at, and those were towards the back of the room (if the stage is considered to be the front of the room). I was at the table near the stage, with family: Laura, my mom Phyllis, Todd, Teresa, Cindy, Dr. P. Harvey Eckhart, Molly, Chief Griswold, and of course the kids. I'd asked Paulina to bring Tasha, but she said she might be late, and indeed she slipped in and sat at a back table towards the end of lunch.\n\n\"Commander, I have a question.\" said Joanne Warner, who'd brought up a chair and was holding Ross as she asked. \"Did Pastor Westboro ever give you an answer to your question about Jesus and Judas?\"\n\nI smiled. \"Yes. Yes he did. On the helicopter before he bit down on the cyanide capsule.\"\n\n\"What was his answer?\" asked Joanne. \"I'm kind of stumped by it.\"\n\n\"His answer was the same as my own thesis.\" I said. \"Let me ask this: Before Jesus could rise from the dead, what did He have to do?\"\n\nJoanne looked blank, so I said \"He had to die, of course.\" \n\nJoanne still looked blank. Cindy said \"Not much gets by you, Commander.\" Chief Griswold grunted a laugh.\n\n\"He had to die,\" I continued, after giving Cindy the appropriate withering look, \"and not just in a quiet private way... it had to be a public death, such as an execution. Remember that there were many people claiming to be the Messiah in those days. I would add that in Matthew 4, where Satan tempted Jesus, Satan asked Jesus to jump from a building, saying Angels would save Him. So Jesus could not commit suicide, is my thesis from that.\"\n\n\"I never thought of that.\" said Joanne.\n\n\"Let me go further.\" I said. \"Jesus needed to be publicly executed, so He got the Authorities's attention by going to the Temple and overthrowing the moneychangers' tables. And that did get their attention: they were after Him with the intent to kill from that moment on.\"\n\n\"So,\" I continued, \"they went after Him, but as I said, there were plenty of imposter Messiahs at the time. So Iscariot goes to those Authorities, says he'll give them Jesus. And if you think about it, Jesus needed for that to happen. And that is why they put on the act at the Last Supper, then the so-called betrayal. Jesus asked Iscariot to betray Him, and Iscariot did, and the sequence of events played out. I also surmise the Authorities figured it out too late, and retaliated by executing Iscariot by hanging instead of him committing suicide.\"\n\n\"But the Bible doesn't say that.\" said Joanne.\n\n\"The Bible, written hundreds of years later,\" I said, \"was written by the Catholic Church with a deep bias against Jews. They called Iscariot 'Judas', to paste him to the Jews... the German for 'Jews' is 'Juden', so you can see the connection. So the Bible's human authors had intent to make the Jews the bad guys in the execution of Jesus Christ. And my thesis is that they twisted what happened. I certainly don't know if my theory is more correct, but it all comes down to religious belief anyway.\"\n\nJoanne had a lot to think about, I could tell...\n\n* * * * * * * * * * * * * * *\n\nAfter everyone had eaten, I took a chair to the stage and brought in a bag of stuff. People began migrating themselves and their chairs towards the front. And finally... her patience no longer able to handle it after all these years... Cindy stood up.\n\n*DING!* *DING!* *DING!* *DING!* *DING!* *DING!* *DING!* *DING!*\n\nAs the musical sound of spoon ringing glass echoed through the room, a loud acclaim started up... and then the applause began. At first it was a smattering, and before I knew it, the entire room was giving me a standing ovation that just kept on going. \n\nIt is a 'human trait' that people appreciate being recognized for a job well done, and I have to admit that I very much enjoyed that ovation. I sat for a moment and absorbed it, then I stood up to acknowledge it, and it just got louder and more prolonged.\n\nFinally, I sat back down and reached into my bag to bring out something as the applause died off and everyone took their seats in a big semi-circle around me.\n\n\"Okay, where to start...\" I said.\n\n\"At the beginning!\" yelled Tanya Perlman, who was sitting up and to my right, along with Teresa. Everyone laughed, but I just smiled wryly.\n\n\"Actually,\" I said, \"not the Consultant's beginnings... so I'll start at the time I caught on.\" After a pause, I began:\n\n\"There was, about a year and half ago, an unfortunate plane crash at County Airport. It appeared that several FBI Agents were killed in that crash. The good news is that it was all a ruse, a staged theater play, and it was designed to flush out who we thought was the Consultant at that time, the late Henry R. Wargrave. As part of that Federal Government operation, the bodies aboard were those of already-deceased persons.\"\n\n\"Unfortunately, the Enemy saw through the ruse, and rather egotistically let us know that he'd seen through it. But in doing so, he made a tiny slip... a tiny, tiny slip. And it cost him the Game, and his life.\" \n\nWith that, I held up a slip of paper. It was framed, and had a black cloth background. The words on the tiny slip of paper said \"DEER me, Mr. Holmes, DEER me.\"\n\n\"Yes.\" I said. \"It was this 'tiny slip', literally as well as figuratively, that brought down Raymond Westboro.\"\n\nAs my prize artifact was passed around for viewing, I said \"Now the author of this Government plan considered it a failure, but I kept telling the author as well as the FBI that this was the most successful Federal plan since General Washington crossed the Delaware and took Trenton. It revealed the Truth.\n\n\"What happened is that two deer were cremated and the human bodies meant for cremation were taken for the plane crash.\" I said. \"I was called into the Frank Freeman Funeral Home to investigate, as the family of one of those deceased persons had noticed the strangeness of the ashes, and the Funeral Home had noticed their crematory had been used overnight.\"\n\n\"So when I saw this note on a map in Cpt. Ross's office,\" I said, \"I realized instantly that not only was the true Consultant of Crime not Henry Wargrave, I knew who he was! You see, in order to have seen through the ruse, and also to have known how it had been done, he had to have been there, at the Funeral Home.\"\n\n\"I discounted the Funeral Home people, though I checked them out just in case, but they weren't the ones. I discounted the Lawson family as being the farming family and country folk that they were. There was only one person left at the Funeral Home, and that was the person who had gone to the Funeral Home with the family... their pastor, Raymond Westboro.\"\n\nThere were murmurs through the room as the first pieces of the puzzle fell into place for them. I said \"So now I had a very strong idea who the real Enemy was. And it was a perfect place to be... pastor of a church, hearing many things from his Church's members as well as other clergy, able to travel on sabbaticals on occasion, connections to Jonas Oldeeds which now had a more sinister reason than just being fellow Men of the Cloth.\"\n\nI went on: \"At that time, a book was left on my desk. There was highlighted a passage from the Conan Doyle stories that 'they set fire to our rooms last night'. And indeed, the Cabin, with me and my family in it, was set on fire. And thanks to one Cindy Ross and her intuition, we escaped with our lives.\" There were more murmurs as I smiled at Cindy, who smiled back.\n\n\"And what this showed me,\" I said, \"was that there were competing forces at work. Wargrave had left a picture of my wife in the book, as a threat to her. That ticked off the Consultant. He had a bad habit of seeing mistakes of his minions as treason, and from that moment on he was throwing Wargrave under the bus, feeding him to the FBI dogs.\"\n\n\"So I knew who the man was,\" I said, \"I could see what he was doing, but at the time I had no proof at all to bring him to trial. Therefore, I set about getting that proof, as quietly as I could, knowing that if he figured it out too soon, he'd try to kill me and my family, and perhaps other Police Officers and FBI friends, as well. I knew he'd stop at nothing: he'd already burned down the Cabin, and I was getting ideas he was responsible for other deaths, as well.\"\n\n\"I did let the FBI know that there was someone besides Wargrave at the helm of this Ship of Evil. And I also set a trap for the rogue CIA group by giving some information at a gathering where the Consultant was among eight possible suspects. Captain Ross and I called it the 'Eightfold Fence'. It was the Consultant that passed along the information to the rogue cell, but fortunately they ran into a truck driven by Takaki Taichi-sama before they could come kill me.\"",
        "\"I could also see the influence of the Consultant in the 'Medical Murder Mystery'.\" I said. \"John Clifford consulted with his pastor, Raymond Westboro, and the pharmacist Lockhart was murdered soon after. Doesn't take much to mentally make that connection, though proving it is virtually impossible without a confession, which I did not get.\"\n\n\"In the 'Disappearing Act' case, Westboro had helped Jimmy Tolson with that boy's plans to steal insurance money related to his brother's death.\" I said. \"And Tolson was Westboro's spy in the company he was working at. And Willa was having a sexual affair with Westboro. He was using them against each other, which was par for the course for him.\"\n\nI then said \"So, let's look at the other thread that ran through this whole saga: the Trojan War, and the Moriarty lines about being 'Seriously Inconvenienced' and 'Hampered in His Plans\". When Westboro first sent that painting of the Fall of Troy, through Julie Newton, we all understandably thought at the time that it was from Wargrave. And then I got that wonderful match-and-toothpick Trojan Horse. We thought it was a play on my name, 'Troy', but I realized that it was more. Westboro was into the Trojan War itself, and he revealed that a few times.\"\n\nI continued: \"During the Lance Priemus execution (Dream Within A Dream), Pastor Westboro was in Jacksonville, and we now know it was to make sure Priemus didn't reveal what he knew. But he made an interesting comment, and I believe Captain Ross glommed onto it and realized who he was. He said of my crowbar: 'it is his Palladium'.\"\n\n\"It was a slip, another tiny slip.\" I said. \"He was not referring to the element palladium, vis-a-vis my crowbar made of iron. The 'Palladium' was the statue of Pallas Athene, a wooden sculpture of the goddess Athena that resided in the Trojan Temple. The legend was that it had to be stolen from there in order to defeat the City-State of Troy, and Odysseus and Dionysus did steal the Palladium from the Temple, if memory serves me correctly.\"\n\n\"And it usually does.\" growled Chief Griswold, generating laughter.\n\nI grinned, then said \"I also seem to recall Westboro saying something to my Lieutenants about Paris and the golden apple; that is also part of the Trojan legend: Paris was the son of King Priam, and Paris was given Helen of Sparta, who you all know as Helen of Troy, in exchange for the apple.\"\n\n\"And when Priemus died,\" I said, \"I noticed a slight gleam in Westboro's eyes as Priemus died... painfully.\" I didn't mention that karma on that had come back to Westboro in his final moments.\n\n\"Also, I did tell some people that the Consultant was the 'Alpha and Omega' of certain criminal organizations... a very direct clue to Pastor Westboro.\" (Author's note: 'Six Degrees', Ch. 4)\n\n\"In addition,\" I said, \"on the note about being hampered in his plans, he wrote the word 'Troilus', who was a young son of Priam that had to die before his 20th birthday in order for Troy to fall. That was a precursor to Westboro attacking the Feeley family, killing Pamela, paralyzing Tanya, and thank God! baby Pete's mother found a way to save his young life.\" Murmurs came up, then applause for Tanya as she and Teresa fist-bumped.\n\n\"So those were big clues, there.\" I said. \"And once I was onto Westboro's trail, I was determined not to let him get away from me. Of course, he quickly figured out that things were not right for him, helped by having an insidious mole inside our Police Force, whom he called 'Sinon'... and we called 'Julie Newton'.\" There were groans at the mention of that traitor's name.\n\n\"When the 'Silverfish' case began,\" I said, \"we talked to a man named Mr. Harkins of the Second National Bank. He realized his life was in danger from Westboro as details of that case came out. So he disappeared. Fortunately, I was able to send intermediaries to get him to hide here in this County, and he is now helping the FBI nail Westboro's carcass to the wall for numerous crimes, and lead us to elements of the Consultant's Syndicate. Harkins had to hide until I was ready to arrest Westboro, though, and I'll mention no names but I appreciate the help of those who took care of him in that time.\"\n\n\"And then I went to Apple Grove last year.\" I said. \"I found a document for 'Victory Christian Ministries', an Oldeeds offshoot, and it had Westboro's name on the document. That was my first documented evidence of him. And from there, it became a game of weaving my tapestry against him.\"\n\n\"I began getting more and more stuff on him as we went through last Fall and Winter.\" I said. \"And more of you began learning who he was. He was in the Emma Washburn photos which were on the tablet Dr. Robin Grayson gave me, and which I put into sealed evidence. He was behind the burglary of Cassie Sanderson's home, looking for photos of himself with Emma Washburn. And that reminds me... well, that will have to wait its turn. Jack, can I talk about the Fake Badges case?\"\n\n\"You sure can.\" said Jack Muscone. \"Louise Belfort and Watch Captain Lockhart, as well as several others, were arrested over the weekend. Charles Roland gave us enough on them to make those arrests, and we're getting more.\"\n\n\"Good.\" I said. I took another drink of water, then continued: \"So, let's talk Fake Badges. For those who don't know, I'll simplify it by saying that it was a group of people who used paroled convicts for manpower, especially armed firepower. The Consultant was the man who conceived the idea, recruited Louise Belfort and others to do it, and they in turn provided him with manpower when he needed and called for it, such as in the 'Eyes Only' case, as well as the attack on the Feeley home.\"\n\n\"The 'Fake Badges' case would've been just some simple robberies and murders,\" I said, \"until someone started planting badges of the perps from the Belfort Badge gang. This one really got to Westboro, as it was exposing his assets, and neither he nor Julie Newton could figure out who was doing it. Turns out... it was my sister Elizabeth. She wanted to capture some guns that were being smuggled, and so did Westboro... neither succeeded... and she needed that gang suppressed or out of the way. Westboro didn't take kindly to that, though... so he tried to kill her in the Standard Tools explosion.\"\n\n\"So... your sister is alive?\" asked Joanne Warner, who was also in that building when the Consultant detonated its explosives.\n\n\"Yes.\" I said. \"Trying to keep people alive, especially my family, has been the hardest part of this whole thing. Elizabeth got out alive, and she paid the Consultant back... and avenged your mother-in-law's death... by being the one to put a gun in Westboro's earhole and forcing him onto the helicopter with me. Once that happened, Westboro had to choose either cyanide or being placed under arrest by me. He chose to end his own life.\"\n\n\"So,\" I said, \"back to Robin Grayson, which turned into a big hullabaloo with BigPharmaCorp. There was some evidence that would've exposed the Consultant of Crime secreted in an apartment. The reason so many people were after the Jack Burke tapes was because he accidentally recorded that material being secreted in his apartment.\" I saw many people nodding at that.\n\n\"Westboro thought that information could harm him badly, and he worked to retrieve or destroy it.\" I said. \"I believe that Westboro was the man dressed in the suit and white mask like Slender Man in the video transmission of Jenna Stiles's ordeal, as he was trying to get those tapes. Unable to get the tapes, Westboro set three buildings on fire. We also stumbled onto a couple of people trying to steal research material from BigPharmaCorp.\"\n\n\"But the big thing, and a crime we can now close, was Dr. Laramie Wilkins and his wife ('Ensigns of Detection'). I'd surmised that Abby Wilkins was part of the evil group that had Dr. Wilkins killed, and that she supposedly committed suicide over a broken heart... but for whom? And who did she turn to when she supposedly found her husband dead? Her pastor ------ Raymond Westboro. He'd been having an affair with her, then forced her to take sleeping pills, as he knew I'd figure her out sooner or later, and that she not only witnessed her husband's death, but was a part of it. And then Westboro left that 'Dear me, Mr. Holmes, dear me.' note in the bottle of pills.\"\n\n\"And then...\" I said, knowing this one was going to hurt, \"... we had the Steven Moschel case. Westboro was making a lot of money on organ thefts; he was the power and money behind Moschel's business.\" I saw Teresa's head bow down as I said the words, and Tanya reached over to put her arm around Teresa's back.\n\n\"If there is a silver lining to that dark cloud,\" I said, \"it was that we began getting very solid links to Westboro through Vauxhall and the laundering of money for the organ theft business. And that put tremendous financial pressure on Westboro, leading to him making desperate moves that would eventually bring him down, including attacking the Feeley family, then trying to assassinate my nephew Todd.\" I saw Todd grinning out of the corner of my eye.\n\n\"So...\" I said, \"now we can talk about Raymond Westboro's past, and his beginnings. I think he was always a bad man, and he chose the Cloth as his profession perhaps out of deep sarcasm. Of course, it was great cover for what he intended to do.\"\n\n\"But a few events helped shape his life. He was spurned by Pamela Feeley back in his high school and college days, which embittered him. But worse, he then met and married a woman named Alice. I kept hearing about him having had a wife in the past, from some of the elderly ladies of the Community Center and elsewhere, such as the disc golf course. Information was spotty about whether this wife had died or had left him, and it turned out to be both.\"\n\n\"This woman Alice saw the evil man that Raymond Westboro truly was, and she left him. She had a relationship with another man, became pregnant, and had the baby... but she died in childbirth. That baby grew up to be Selena Steele, who was raised by Edward and Stephanie Steele.\" \n\nPeople were looking at Selena Steele, now beginning to understand some things. Still, I told the story: \"What also happened was that Detective Angela Harlan, who at one time was a really, really good Police Detective, had issues with Selena. Raymond Westboro found out somehow, and also somehow corrupted Angela Harlan to begin pursuing Selena... not to kill her, but to cause her to be accused of murder and given the death penalty for it. This would bring pain to the Steeles as well as the daughter of Westboro's estranged wife.\"\n\n\"Fortunately for me, Chief Griswold, ADA Patterson, and my fellow Officers trusted me enough to give me time to prove Selena's innocence... but in that, I also failed completely, and the Black Widow murdered Pete Feeley. Feeley wasn't a random killing; the Consultant targeted him and had the Black Widow kill him because he was Pamela Feeley's son, and Pamela had rejected Westboro's advances years before. He was a deeply vindictive man. By way of contrast, Angela was not; she killed Pete on orders, not out of personal passion.\"\n\nIt was Teresa's turn to put her (left) arm around Tanya. I had to fight not to get emotional at my failure to save Pete.\n\n\"My last comment,\" I said, \"is that Pastor Raymond Westboro was the most unforgiving man you're likely to ever meet. He was of a brilliant, philosophical mind... but he was also the most paranoid man in the world. His organization was tremendous and rigid, and brutal for those who trespassed against it. His wife left him; he considered that a betrayal to the point he plotted to have the woman's daughter framed and executed. He thought Henry Wargrave betrayed him, though it was exactly the opposite: Wargrave remained loyal to him. Still, Westboro threw Wargrave under the bus, forcing Wargrave to jump 30 stories to his death. He believed Lance Priemus had betrayed him; so he had drugs put into Priemus's death cocktail to cause Priemus pain. He shot Thaddeus Ward, and he tried to murder my sister Elizabeth and Seth's sister Karen Warner Harlan.\"\n\n\"So.\" I said. \"Any questions?\" That got some laughter, as my stunned audience was still barely processing what I'd just told them.\n\n\"Yes sir.\" said Christopher Purvis of Vice. \"What about Julie Newton, Captain Malone, and Steven Ikea?\"\n\nI nodded. \"First of all, Captain Malone was part of another group, a group that the FBI is still chasing down, and I'm now going to concentrate on helping the FBI take this group out. They're a race-based group of national scope, and we've defeated them in Teresa's hometown, here in our Town & County, and more recently in Apple Grove and Fillmore County, where I grew up.\"\n\n\"And righteously.\" Cindy murmured. I just nodded.\n\n\"Captain Malone worked with the Consultant on several occasions, though. They were behind the attempted assassination of Daniel Allgood while he, Daniel Allgood, was running for Sheriff.\" I continued. \"Malone might've become more involved in those bad things in this County, but Chief Griswold made a few hires into his Police Department that didn't work out so well for Malone.\"\n\n\"Ain't that the truth.\" said Chief Sean Moynahan. There was laughter and some applause.\n\nI went on: \"Julie Newton was having an affair with Malone, and we're beginning to find her ties to racially-based hate groups. But she was co-opted by the Consultant, and I am really wondering if he had some kind of brainwashing technique that he used on her as well as on Angela Harlan. They both had some very unnatural loyalties, there. But... it is likely I'll never get any proof on that.\"\n\n\"As to Steven Ikea,\" I said, \"he's just a dirtbag that thinks he's better than everyone else, when in reality he's as dumb as a box of rocks... and I apologize to the rocks for the insult.\" That got some laughter, as I continued: \"Well, let me just say further that Ikea is an ideologue and a religious nutcase who is beginning to find that the people he revered most, from Jonas Oldeeds to Harold Malone to Raymond Westboro, were in reality Agents of the Devil himself, insidiously evil men.\"\n\n\"What about Julie's sister Yvonne?\" asked Theo Washington.\n\n\"She's innocent, as far as we can tell.\" I said. \"She's in total shock that her sister was a criminal and a spy within our midst. But like Goth Girl Kathy's mother, Yvonne will not be able to work for Paulina Patterson anymore. We're getting her a job somewhere else, perhaps in the library system or the Public Health Department.\"\n\n\"Are you going to be able to get the Oldeeds Organization, through Westboro?\" asked FBI Special Agent in Charge Les Craig.\n\n\"I don't know.\" I said. \"They're certainly scurrying like cockroaches in the night. But I think we'll do well not to say much more on that, as there is still an ongoing investigation. Ditto that for all Federal investigations right now.\"\n\nMary Mahoney Milton asked \"Sir, how did Westboro communicate with others without giving himself away?\"\n\n\"Oooh, good question.\" I said. \"First, he used a lot of burner phones. As you know, Mary, we were able to trace some of them, including some communications between him and Julie Newton. But you guys found out that someone was using computers in University Hospital to access the Internet. And that's another place where Westboro's cover as a pastor came into play: he was a frequent visitor to the Hospital, and was hardly noticed walking down the halls. So he'd go to the Hospital, and could access their WiFi without being noticed.\"\n\nThere was a silence as I looked around. \"Okay, any more questions? Cindy?\" I asked, seeing my cousin's eyes.\n\n\"I think I'll hold my question for a more private time.\" Cindy said.\n\n\"Party pooper.\" Teresa replied. Tanya and I laughed out loud.\n\n\"Okay, let me make some announcements now.\" I said. \"Detective Joanne Warner will be reporting to Detective School next Tuesday, July 5th. And when she gets back, we'll help her un-learn everything she learns there. While Lieutenant Croyle is recovering from her wounds, this is a good time for her to report to Advanced Course on Tuesday July 5th, so she can learn a bit less about leadership than she already has shown.\"\n\nI finished up; \"Okay, I see some children that are up way past their bedtimes. I'm sure I'll be talking with many of you about this for weeks to come. Everyone have a good night, and get home safe and sober.\" \n\nThe room again broke out into applause before everyone began dispersing.\n\nPart 25 - Above and Beyond \n\nI stopped by my office at Police Headquarters before going home. Somewhat to my surprise, as I secured the tiny slip note in its frame in my safe, Cindy came into the office.\n\n\"Have a seat.\" I said, which she did on a hot chair instead of her normal place on the sofa. She put her purse and keys on the edge of my desk as I asked \"You had a question?\"\n\n\"Yes.\" Cindy said. \"I didn't want to bring this up in front of others, but it's been bothering me... did you know the Church was rigged with bombs?\"\n\n\"Yes and no.\" I said, and truthfully, and you better believe my bug-killer was full-on. \"I knew Westboro was up to something, and he was going to do something that night. I had an idea that he'd do something somewhere else, perhaps at County Jail, take Police Officers hostage to rescue Julie Newton.\"\n\n\"But you pre-empted that with the FBI.\" Cindy said.\n\n\"Well, to some extent. But having said that,\" I continued, \"it was just like the bastard to attack his own church and the people of it. I should have realized something when I heard that Reverend Patterson was taking care of security in bomb detection. We should've insisted on having Sergeant Seymour go through; that's something to note for the future.\" Cindy nodded vigorously; she also had thought about using Sergeant Seymour but had been assuaged by bad information.\n\nI went on: \"I also should've realized Patterson might not show up, and we could've evacuated the Church, or prevented its occupancy for the event. But just between us, I'll tell you this: you remember that Priemus died of those chemicals being mixed, and Dora Ellis and her crew were planning to murder blacks with deadly chemicals?\"\n\n\"Yeah.\" Cindy said, then she caught on. \"Oh my God, you thought Westboro was going to gas the Church?\"\n\n\"Or Third Precinct and County Jail. And yes, something along those lines of nerve gas.\" I said. \"I thought Patterson's 'Security' team would bring in the chemicals at the last minute, and dogs couldn't detect them like they do bombs. And then Westboro would force me to take the helicopter up to prevent people from being killed by nerve gas. Why he went ahead with bombs, I'm not sure.\"\n\n\"Wow...\" Cindy said, thinking of the monstrosity of that possibility. \"But you had to have known something.\"\n\n\"I had ideas, but there was no hope for early detection, or so I thought. I certainly did not want to put 2000 people at risk, of course.\" I said. \" And, of course, I knew for over a year that it would involve a helicopter. I got that fortune cookie in Rome, near Apple Grove, and then the bastard actually paid for me to get lessons to fly a chopper. I just didn't know his exact plan until he pretty much had sprung it.\"\n\n\"So you found out...\" Cindy said, her ice blue eyes showing cold fire, \"... by walking straight into his trap.\"\n\n\"Well, sometimes springing the trap is the best way to defeat it.\" I said. \"I intended to have you arrest Westboro while I took the chopper up. But someone who shall remain nameless, but her initials are (C)indy (R)oss, got a bit impatient and ran into the church before I could stop you. As it was, it worked out. I still say seeing the baptismal pool was really, really good thinking.\"\n\n\"Stoppit.\" Cindy said, not allowing me to distract her by heaping praise upon her, however well-deserved. \"I'm still not over you being willing to die to stop him.\"",
        "\"But I didn't die.\" I said. \"So this office does not pass into your hands yet.\"\n\n\"Nor do I want it to.\" Cindy said with alacrity. \"Except for the Chief's office, this room is right where you belong.\"\n\n\"No.\" I said. \"I belong at home, in bed. I am exhausted. Let's go.\"\n\n\"I need to go to my office first.\" Cindy said. \"You go ahead, and I'll follow when I'm done.\"\n\nI knew what she was doing; I had observed that she had left her keys on my desk when she left the room. I put them in my center desk drawer, letting what needed to happen... happen.\n\n* * * * * * * * * * * * * * *\n\nAfter seeing Don drive away in his Police SUV, Cindy walked back to his office. She did not see her keys on his desk, and realized he'd probably put them in his desk drawer. Sitting in his chair, she opened the drawer and found the keys... and the envelope next to them. Pulling it out, she saw the words scrawled upon it that said \"Upon my death, please have Todd Burke give this to his assistant Mariko.\" \n\nCindy's father, Dr. P. Harvey Eckhart, was a wise man, but also had his own extensive web of knowledge. He had told her that Todd's assistant was the sister of the late Takaki Taichi, who'd sacrificed himself to destroy the rogue Corrigan Cell... and this meant Mariko was the daughter of Takaki Misaki, one of the most powerful and well-connected men in the World. And Cindy knew that Don truly meant for this envelope to go to Takaki Misaki.\n\nThe envelope was not sealed. Unable to contain her curiosity, Cindy opened the envelope and took out the rice paper inside. There was writing in hiragana script as well as English. It read:\n\n Like the dew I was born,\n\n Like the vanishing wind, I am gone;\n\n My life, and all that I have done,,\n\n Is but a dream within a dream. \n\nIt was Don's death poem.\n\nCindy sat back in the chair, oblivious to all but her own deepest thoughts. There probably really was no way to prevent 2000 people from being put in mortal danger, but Don had let the Consultant spring the trap... and had been prepared to die himself to take down Westboro. It was more than a 'hair-brained scheme' on Don's part... he had gone into battle with the expectation of his own death.\n\nHe had even written his death poem...\n\nCindy sat there for a very, very long time, trying to process the enormity of it, the sheer magnitude of what had happened.\n\nPart 26 - Epilogue \n\nAs I drove out of the parking lot of Police Headquarters, I noticed a small, sleek jet coming in for a landing at County Airport to my north. I drove east on College Avenue in the darkness of the night, seeing my Town in a new way, a different way... free of the pestilence that had held it hostage for these past number of years. \n\nThe FBI was making arrests across the country. I knew I was going to be busy, very busy, over the coming days, heck---- weeks, and that I'd be spending a lot of time in Courtrooms, testifying to make Juries understand the complex financial twists and turns this evil man had used to hide his Empire of Crime.\n\nI was tired. It was very good to be able to get into bed and go to sleep. Restful, deep sleep...\n\n* * * * * * * * * * * * * * *\n\nI woke up. My mind was still not fully awake, but I felt strange. I sat up in the darkness, hearing nothing but the hum of the air conditioner. Only the light of a streetlight through the window of the sitting room provided illumination.\n\nMy wife had awakened. \"Don, what is it?\" she asked. \"What's the matter?\"\n\n\"I... nothing.\" I said, gathering my wits. I looked at Melina, my wife, and said \"Honey... you won't believe the dream I just had...\"\n\nFinis?!?! To be continued?!?!"
    ],
    "authorname": "WifeWatchman",
    "tags": [
        "mystery",
        "crime drama",
        "police drama",
        "detective"
    ],
    "category": "Non-Erotic",
    "url": "https://www.literotica.com/s/a-tiny-slip-ch-04"
}
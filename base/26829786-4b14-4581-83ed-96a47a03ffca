{
    "title": "The Designer Pt. 02 Ch. 10",
    "pages": [
        "Author's Note: This is a story of fiction, all main characters are over the age of 18. The latter parts of this chapter are a bit darker. Much of this has been foreshadowed in previous chapters, but I wanted to revisit the events to give a different character's perspective. Thank you for reading, commenting and voting. I hope you continue to enjoy my tale.\n\n*****\n\nDistant Past: Isaiah & Katie\n\nIsaiah and Katie adored and doted on their son Jeremiah. Their financial needs grew as their life together, and apart from Katie's parents, started. Katie worked for a while as a grocery clerk, while Jeremiah found steady work as a mechanic. Katie hated her job, and wanted to go back to school to pursue nursing. She had a passion for caring for sick people, and Isaiah agreed she needed to find work she enjoyed. \n\nShe started night school and was absent from the home often. The couple were constantly busy, and struggled to work their schedules so someone was home to watch their growing baby. Katie's mother helped, but the demand became too much. Finally they hired a nearby student, graduating in the spring to be their nanny, for the times when one of them could not be home. Samantha had been a few years behind them in school, and her parents were friends with Katie's parents.\n\nSamantha was a welcome presence, and she doted on Jeremiah almost as much as his own parents. Things went well for a while. Isaiah was promoted to shift manager with a raise in salary at the auto shop. Katie was able to enroll as a full time student, but had to now pick up shifts that ran late into the night to cover expenses. The couple worked hard, proud to make ends meet and still see a better future. Katie's absence at night, however, started to take its toll on Isaiah. When she was home at night, she was often exhausted. Their physical connection and intimacy began to wane.\n\nBecause of Katie's schedule, Samantha began making dinner for Isaiah and Jeremiah. That led to staying to cleanup and prepare the kitchen for the next day. She felt like her actions were helpful to Katie. Katie always seemed so tired in the few times their paths crossed. She also wanted to care for Isaiah, who always worked so hard. Isaiah enjoyed having someone around to talk to, and Samantha was a nice houseguest.\n\nSlowly overtime, Isaiah began to see Samantha as less of a schoolgirl, and more of a young woman. She had turned eighteen just before she started working, and the growing responsibilities of her working for the young couple matured the young girl into a woman. Samantha was slightly taller than Katie, yet shorter than Isaiah. Her long blond hair was tied back into a ponytail with a ribbon each day. Her smile was constant as she performed her duties around the house. \n\nHe became increasingly distracted with his evening ritual of watching her work in the kitchen. The way her skirt danced just under her knees, showing off her shapely calves that stretched nicely as she lifted up on her toes to put away dishes each night. He found himself often distracted by swell of her breasts as they stretched her button-up blouses. His eyes would trace down to her slim waist, and round bottom as did her nightly dance in the kitchen doing her chores. The way her hips rolled as she walked from one end to the other. She reminded him of his wife, and the early years of their marriage.\n\nOne night, he got up to go to the kitchen, wanting just one more beer before he fell asleep. He was hoping that Katie might wake him when she returned after midnight, and was distracted with the thought of some intimacy with his soulmate. It was that thought that passed through his brain as he turned back from getting his beer, and ran into Samantha cutting a path to put something away in the pantry on the other side of the refrigerator. Suddenly her frame was pressed against his, and he wrapped his arms around her as she stumbled. \n\nShe looked up at him, feeling how strongly he held her. His eyes softened, as she looked up at him, with her customary smile. He started to kiss her. She struggled trying to push him away. Isaiah was confused, in his buzzed state, and wondering why his wife was refusing him. He pushed a thought, and suddenly Samantha was kissing him back. She felt a rush of desire, as Isaiah placed his beer on the table and ran his hands down her hips to cup her bottom.\n\nShe inhaled at the arousal she felt, feeling his firm manhood swell against her lower belly. Their kiss deepened, and Isaiah unknowingly adjusted her moral curve and will power. Not understanding why Katie (who he thought he was kissing) had struggled, and then molded her responses to fit his rising need.\n\nSomehow they didn't wake Jeremiah, who slept soundly through their first coupling. In the afterglow of their shared bliss, Isaiah was shocked to find Samantha smiling up at him as he rested that passionate first time. Samantha had been a virgin, but Jeremiah's power had made it feel so wonderful, she didn't even feel the prick of pain, or the drip of blood as he had punctured her hymen. Just as he started to lift away from the love-sick teenager, Katie slipped into their bedroom and caught the pair naked and clearly post-coital.\n\nShe was speechless. Her emotions a mess from being exhausted, her thoughts teemed with rage, anger, jealousy, betrayal, arousal, shame and other emotions as Isaiah looked at her guiltily. He went to her, his tumescent cock still dripping with Samantha's spending. He touched her, and she recoiled. For some reason that move sent a surge of anger through him, couldn't she understand it was an honest mistake. He pushed that thought, then similar to his adjustment to Samantha, he molded his wife, his first love to accept what she had seen.\n\nSuddenly aroused as the sexual energy that permeated the room, and no longer restricted by the learned societal mores that Jeremiah had changed, she clung to her husband. Isaiah responded and hugged her tight, kissing her, his manhood swelling with arousal. He helped her undress, as Samantha watched, slipping from the bed to let the couple have their bed. Isaiah gripped her hand, and pushed a thought, as he spoke.\n\n\"No, stay,\" he said, \"you belong here too.\"\n\nThe two naked women could only nod, as Isaiah's words and thoughts melted into their morals, and they hugged each other. Isaiah guided Katie to the bed, and Samantha slid behind her, caressing her, kissing her, touching her breasts and nipples. Isaiah made love to his wife, as Samantha touched her, and him. The trio becoming one that first tumultuous night. None of them quite realized how drastically their lives would change. For that night, though, they were full of love and contentment. The relationship seemed completely natural to the three young lovers.\n\nPast: Jeremiah\n\nI looked at Alyssa with amazement. I was still aroused, the afterglow of Kelly's power making my brain feel a bright warm light of contentment. The memory of the mirror image of myself fucking Kelly from behind made my cock twitch.\n\n\"Yeah, good question, Carmen,\" I said, \"How did you find out you could do that?\"\n\n\"Ummm...\" Alyssa said, her body still twitching in aftershocks of her last mind-bending instant orgasm when she shifted back to her form, \"Can I take a minute.. there is too much.\"\n\nKelly slipped back, and picked up the brown stone pendant. Upon touching it, her body slumped down, suddenly exhausted. She sprang back from it, rolling back towards Carmen. Her eyes had dulled, and were now shining brighter, her flesh resuming the glow she retained after our lovemaking. \n\n\"I can't touch that thing right now,\" Kelly sighed, \"But my mother gave it to me, it restricts my power, and protects me from other's powers.\"\n\n\"Wait, what?\" I asked.\n\n\"Too much,\" Alyssa panted, waving at Kelly and me, exhausted, \"Need to sum up...\"\n\nI waited, leaning over to rub Lexi's shoulder as she rolled to her back, looking up at me. I pulled her back to me, letting her rest her pert bottom between my legs. I rested, and she curled to her side, her cheek against my chest, her breath warming my cooling flesh. \n\n\"Too much is right,\" Lexi sighed, \"I'm exhausted, Master... You guys talk amongst yourselves.\"\n\nCarmen had turned over and sat next to the sofa, unclipping and pulling the fake cock from her waist. Her hand cupped her pussy, and softly rubbed to sooth the sensations, her hand lifting to her breast to cup then tug softly at a nipple.\n\n\"Ey...\" Carmen started to say, then shifted her view around the room and just sat back speechless resting her head on the cushion of the sofa.\n\nKelly crawled over to Carmen and leaned against her. Kissing her shoulder then wrapping her in her arms. Kelly was smiling and alert, she pulled Carmen to her, letting her rest her brown cheek against Kelly's tanned breast. Kelly caressed her flesh and smiled at her, then touched her black leather collar.\n\n\"What is this?\" Kelly asked curiously.\n\n\"A collar, Mistress,\" Carmen said, her deep felt submission to Kelly was as complete as it was to me. She slid up and started explaining the symbolism of the collar to a submissive. For the next few minutes, she caught Kelly and Alyssa up with her and Lexi's desire to be our submissives. How she needed to serve, that the collar was a special to her, as a wedding ring was to a normal woman.\n\n\"I know this is a lot for you to understand,\" she admitted. She lowered her eyes, not out of meekness, but respect. When she spoke again, her voice was soft with more emotion than she'd usually let on. \n\n\"I belong here, under you all. I will serve you willingly, as you desire,\" Carmen said seriously, the formality of her words betraying her deeply felt need, \"Everything in me resonates that this is where I belong.\"\n\n\"What she said,\" Lexi said softly, looking at Alyssa, then Kelly, then up at me. \"Everything she says, I agree. I am yours, all of yours, I don't need a ring. I only desire a collar, of your choosing, when you understand how I feel.\"\n\nCarmen nodded, wordlessly. Her head bowed.\n\n\"I am still learning,\" I said, kissing Lexi's head, and reaching to touch Carmen's leg. \"But I am beginning to understand your needs. Be patient with me, I want to live up to what you need.\"\n\n\"This is all new,\" Kelly said, her aura softly and slowly dimming, \"My power is new, this idea is even newer. I love you two, with no reservations, and no conditions. If you want this, then I will learn more for you.\"\n\nAlyssa had finally risen to a sitting position and was leaning on my shoulder, facing Carmen and Kelly. She drew her fingers across Lexi's brow, and then kissed her forehead, \"I love you, little one. You too, Carmen-slut.\"\n\nCarmen grinned and seemed to buzz with the bestowed title.\n\n\"It is new to me, too,\" Alyssa confessed, \"I will learn your needs, and I think I speak for the three of us that we want nothing more than to see you be healthy, be happy and be where you belong. I know in my heart, you belong here, with us.\"\n\nCarmen smiled and then shifted as she rested against Kelly, \"With that settled, can this slut take this plug out of my ass?\"\n\n\"No,\" I said leaning towards her, \"but if you roll over, your Master will take it out.\"\n\nCarmen grinned at me and rolled into Kelly, lifting her hips to offer me her ass.I leaned over and spreading her cheeks apart with one hand, gripped the end and drew it out slowly. She grunted at the feeling, then purred a growl of contentment as her sphincter muscle opened, then closed as I pulled the cone shaped part clear. Carmen rolled back and settled back against Kelly's side.\n\nI discarded the plug, and then turned to Kelly, \"What did you learn from your mother?\"\n\n\"Well, a lot,\" she said, \"all of it was a surprise, I'm still ruminating on what it all means.\" She related everything that Betsy had told them about her grandmother, the United Priesthood, and the stone pendant. \n\n\"It was a shock that she knew all of this, and I'd never suspected that I was a halfling,\" she said, a troubled look crossing her eyes, \"That's really weird to say, aloud. I never knew who I was, until today. I guess I'll be learning more as we grow into this together,\" she said looking over at Alyssa.\n\n\"She knew you were a halfling, too, Jeremiah,\" Alyssa said, \"She knew about your family, from reading Deborah's diaries, she knew about your grandfather. She knew you would be able to fix her, remove her hate, restore her relationship with Bob and Kelly. She trusts you so much.\"\n\nI nodded slowly, not really knowing what to say, looking at each of the girls that had put their trust in me. Despite having been impulsive and selfish in the first use of my power. I knew and accepted that I was working to make everything good, to think of others needs before my own. I was finally accepting who I was, and only wanted to honor the power I was given. I felt a small flash of light, a pulse of power. I didn't know where it came from, but I accepted it as encouragement.\n\n\"You all have trusted me,\" I said, \"I want to live up to that trust, and to Betsy's too.\"\n\nWe grew silent again, then Carmen looked at Alyssa, \"Is now a good time to talk about how good your cock tasted in my mouth?\"\n\nAlyssa laughed, her eyes sparkling, \"Carmen you always use the best segues!\"\n\n\"Yeah,\" I said, \"Tell us about this new twist to your powers.\"\n\n\"Betsy actually showed me how,\" Alyssa said, \"freaked me out at first. But...\"\n\nHer form flickered and suddenly I had two Lexi's leaning on my shoulders, looking into each other's eyes. Then in an wink of an eye, Carmen leaned forward and kissed the new Lexi on the lips as Lexi, Kelly and I watched.\n\n\"It feels like Lexi,\" Carmen cooed, kissing back deeper, \"not like Alyssa at all.\"\n\nSuddenly I watched Alyssa shift into my image and Carmen was kissing me. I felt my own cock stiffen, then felt another cock press against my thigh. Carmen kissed my doppelg\u00e4nger deeper which made the strange new cock grow thicker against my thigh. I watched as my image parted the kiss and looked up at me. I pushed back a bit giving some distance, and Alyssa shifted into herself.\n\n\"You're definitely a hetrosexual, Jeremiah,\" she said, \"I can feel it myself. though...\" she paused looking back at Lexi, \"I can see why you enjoy this one so much.\"\n\nAlyssa sat up and looked at Carmen, who was having trouble shutting her mouth, \"Having a cock is really an incredible experience, and your mouth is incredible.\"\n\nThe room began to glow again, my cock was stiffening. I could feel Lexi's cunt warm where she was straddling my thigh. Alyssa looked at me and kissed me deeply, and I thrust my tongue deep into her throat. I felt Lexi's hand cup my thickening shaft and start to stroke it. Then suddenly the desire shifted, and started decreasing. I felt drained, tired, almost exhausted.\n\n\"Sorry, my loves,\" Kelly said, straightening the pendant between her breasts, \"I need to learn to control myself, and you all need to rest. March straight down to bed and sleep.\"\n\nWe rose and followed her commands, rolling into the bed, and pulling up covers as we curled into a ball of warm, tired and contented flesh. I think I was asleep before my eyes had fully closed.\n\nPast: Michael and Jenn\n\nMichael startled awake as he felt a hand lift his cock, and a mouth surround his crown. Looking down he saw Jenn's eyes lift up to his, and sighed a bit of a frustrated sigh. The girl was insatiable, he hadn't had a full night's rest in the two weeks they'd been together.\n\n\"Did you get the money,\" he asked, \"From that John in the hotel bar?\"\n\n\"Yes,\" she said slipping her lips from Michael's cock-head, \"He paid for the full night, even though I was only in his room for about 45 minutes.\"\n\nShe slowly stroked her fist up and down Michael's aching shaft, \"He didn't last very long, it took him the majority of the time to undress. He wanted to talk first.\" Jenn said, rolling her eyes, then reported, \"I blew him for about five minutes, then he pushed me down on the bed, entered me. Tap tap, bang!\"\n\nShe smiled and resumed her slow languorous blow job. Michael knew she wouldn't stop until she rode his cock until he came, and then until he couldn't stand her anymore. He groaned inwardly, only wanting to sleep, but smiled confidently at his recruit. The brothel would pay handsomely for such a talented and hard working girl.\n\n\"Pretty easy way to make a buck,\" he said, still selling her on the new lifestyle that she would have, whether she chose it or not.\n\n\"Meh,\" she said, \"I'd have blown him for free, if he'd lasted long enough, and cum inside me. I hate cleaning sperm off my belly.\"\n\nMichael gripped the sheets as she started to really work his cock. Half from pleasure and half from soreness. He wanted to scream and shove her away, but instead rolled over, and found a rabbit dildo.\n\n\"I need to sleep Jenn,\" he said handing over her favorite toy, \"You can use this, or you can go back downstairs and try to find another John. Just don't wake me until the sun is up.\"\n\nJenn smirked at him, and snatched the toy from his hand. She rolled over and started playing with it, then fucking it. Her moans and small screams almost a lullaby as he faded to sleep. He struggled with sleep for some moments, thinking he probably shouldn't leave her unattended. Michael's exhaustion overcame common sense, and he fell asleep. He didn't hear her get dressed, didn't wake to the light of the hallway spill into the room. The door closing with a soft click barely registered as he rolled over and slept.\n\nJenn slipped down the hallway, her new slip of a dress hugging her hips. She knew her high heels made her legs look sexy. The cut of the dress kept a nice pleasant draft blowing across her bare pussy. She'd be careful bending over, only because the last time she did, Michael and her were tossed from the hotel. Her ass hurt for hours for the spanking he'd given her. It would have been worth the pain, if he would have fucked her afterwards. Instead he made her sleep in the shower of the next shabby motel. Where her cries from using the rabbit echoed off the walls.\n\nShe looked at the clock over the bar, and thought, \"10:30 ... not too bad, I might get three tricks before the sun comes up if I choose my John's well... or maybe one perfect man who will fuck me all night.\"\n\nShe stayed in the corner of the bar, where the red light from the exit sign bathed her skin in its glow, and looked across at an older businessman. His close haircut possibly a hint at previous military experience. The ring on his finger, and slight pudge at his belly, pegged him as a married husband, maybe a father. His kids would be college aged, like her. That thought made her oddly aroused. Regardless, married businessmen were usually more willing to splurge for a whole night depending on their expense account, and the cash allowance they had. \n\nWhen he looked over at her, she smiled seductively, a slow lick of the water on her lips. Michael wouldn't allow her to drink alcohol. That was fine with her, she didn't like to dull her senses when she was fucking. She squirmed a bit when the man smiled at her. He picked up his drink and walked her way. She was already thinking of the menu she'd give him. The feral look he'd given her made her think she might have found her all-nighter.\n\nPast: Jeremiah\n\nWe slept soundly, and when we woke, we simply enjoyed the closeness. The hunger for sexual contact at every opportunity had waned, and no one really complained. Kelly smiled as she kissed me and enjoyed my touch. The arousal had a nice normal feel, and I could tell her self-control was well intact. \n\n\"This is nice,\" Kelly said, \"I mean I love the pull of sex, but since we've moved in together, it's been pretty intense. I love being able to relax with all of you.\"\n\nCarmen stretched out towards Lexi, and cupped her breasts before engulfing and biting Lexi's nipple. Lexi's yelp and then purr of arousal was nice to watch as she pulled Carmen closer.",
        "\"Speak for yourself,\" Carmen said, \"A day without sex is a wasted day.\"\n\nShe talked a good game, but her heart wasn't quite in it. The previous day had taken it's toll on her body. \n\n\"My ass still aches, though,\" she admitted, and Lexi nodded.\n\n\"I suppose we can take a day off,\" Lexi added, flicking one of Carmen's nipples with her finger.\n\nThey wrestled for a few moments, then just settled into a cozy hug.\n\n\"You think it's this amulet?\" Alyssa whispered quietly to Kelly within my earshot as we watched the pair relax into each other.\n\n\"Yeah,\" Kelly said, \"what else could it be?\"\n\nAlyssa slipped her glasses up her nose, and looked at me, \"Monitor them, and us too Jeremiah, we need a control experiment,\" she said with a whisper. \"If Kelly's theory is true,\" she continued, \"So long as you hold this pendant, you will be unaffected. Okay?\"\n\nI nodded and she slipped the pendant over Kelly's head and placed it in my hand. I clenched it, but didn't feel anything. Then as I monitored Carmen and Lexi, they started to move closer, kissing deeper, the stone warmed in my hand. I opened my fist, and the stone began to pulse with a web of golden lines.\n\nKelly took an intake of breath, becoming aroused watching Lexi and Carmen. I felt nothing, other than normal arousal from watching two females kissing. Carmen growled and pushed Lexi on her back, pressing her mouth to Lexi's very erect nipples. Alyssa had slipped down and was cupping one of Kelly's breasts, feeding a turgid nipple between her lips. Kelly tossed her head back, her eyes glowing a brighter blue, she ran her hand down Aly's thigh then up and cupped her sex. Alyssa spread her legs apart and ground her sex against Kelly's fingers. \n\nScanning each of them, their arousal was rising exponentially, and their self-control had disappeared. \n\nCarmen had lowered her mouth to Lexi's cunt, her hands gripping Lexi's small breasts with a hard grip that had Lexi wincing. I watched as the pain flickered across Lexi's curve, then twisted, morphing into arousal as her hips ground up into Carmen's mouth. Kelly had slid down following her hand and was kissing Alyssa's thigh, as Alyssa twisted between me and Kelly and rolled over the top of Kelly. They were soon both jucily lapping at each other's cunts, moaning their arousal. \n\nAll this happened in a few short minutes, while I was monitoring their curves and watching. Kelly's flesh glowed under Alyssa's undulating body, her eyes flickered up at me, almost begging me to drop the stone and come join them. I clenched the stone tighter, though the moving flesh around me and their passionate moans had my cock hardening as I sat in the middle. \n\nCarmen's lifted her head and saw my cock jutting from my lap. She licked her lips and looked up at me with a lustful gaze. I could feel her feral hunger in her growled plea.\n\n\"Papi, come fuck this slut's cunt,\" she begged, \"I need to be stuffed.\"\n\nI looked at her, her need plain on her face, and decided to try a different experiment. I slipped the necklace over my head. Kelly's eyes followed me for a moment, still pleading with her eyes for me to drop the stone. When I settled it onto my chest, she complained with a moan then returned her gaze to Aly's dripping cunt, pressing her tongue deep as Aly ground her hips down onto her face. \n\nI scooted to the edge of the bed, spitting on my hand, and using the slick fluid to stroke my cock. It ached, even with the saliva as lubricant. I recalled how many times yesterday I had fucked various holes on my lovers, and realized it was a normal feeling. I slipped behind Carmen, who purred as she pressed her ass out at me, her legs spreading apart. Her cunt glistened from arousal as I stepped forward. \n\nI glanced at Lexi, who eyed me hungrily as I guided my cockhead to Carmen's folds. Just as the tip of my head touched her flowered lips, she stilled her hips. A groan of pain coming from her mouth. She was still lubricated, but her hips drew away from the contact. As she moved forward the contact broke and she started to grind her hips back. This time I took aim and thrust as my head touched her cunt lips, slipping deeper inside.\n\nShe shrieked in pain, \"OWwww... Papi!, no no no, it hurts... damn it, stop!\"\n\nI drew back, her cunt was dripping the thrust was tight, but her fluids made it slick. The mere touch of my cock made her ache painfully. After I backed away, she settled back into Lexi's cunt and lapped happily. She even slid her hand down to finger her own pussy. Her fingers entered easily and her groan of arousal made it apparent that she felt no pain. \n\nI moved to Lexi, kneeing up then standing on the mattress. My sore cock in my hand, I grabbed a fistful of hair, and pulled her to my cock. Her mouth opened hungrily and she took my crown in her mouth, sucking. The soreness of my head made me wince, but her suction felt good. She whimpered, and though she continued to suck my cock willingly, her hand pushed Carmen away from her cunt.\n\nPulling my cock from her lip, \"No, please Car-Car, it hurts when you do it like that.\"\n\nShe sucked my cock back into my mouth, but her suction made me wince and I stepped back. She looked up at me, as I broke contact, and then she looked down at Carmen, gripping her black curls and tugging her head closer. Lexi moaned in hungered lust as she pressed her cunt back to the hungry mouth of her Latina pussy licker.\n\nConvinced, I stepped around the bed. It was odd to be near the sexual energy that I could tell pulsated the room, but be completely immune to it. I slipped up to the bed, and combed my fingers through Kelly's blonde hair, touching her scalp as her mouth was lapping up at Aly's grinding cunt.\n\nImmediately the room's energy plummeted. The girls shrieked and rolled away from each other. Carmen pulled her fingers from her cunt like they were stabbing her, and cupped her sex tenderly, flopping on her back. Their cries and moans of lust and passion had turned into whines of pain from their sore bodies. Their arousal fell rapidly, and they all looked a bit panicked. \n\n\"Why did you let us go so long?\" Alyssa asked, not being able to see my actions as she was lapping Kelly's cunt.\n\n\"Not only was I immune,\" I said, still touching Kelly, \"but anyone I touch is immune.\"\n\nI lifted my hand from Kelly, and though not as instantaneous, the heat ramped up again. The girls started to look at each other heatedly again, moving closer. I quickly pulled the necklace from around my neck and placed it on Kelly's bosom.\n\n\"You all have had enough,\" I said, feeling bad for the tortured whines of pain they sang out earlier. My own tender cock had deflated. Without the power that seemed to always be present around Kelly, we were all a bit overstimulated.\n\n\"Today is a day of rest,\" I declared, \"No sex!\"\n\n\"Yes, Master,\" groaned Lexi and Carmen in chorus, still wincing from the soreness.\n\n\"I think we've tested Kelly's theory enough to confirm it,\" I said to Alyssa who was on her back, her hand between her legs, just cupping her tender lips carefully.\n\nShe nodded, with her eyes closed, just lying still. Kelly had rolled over, and with a sigh pulled the necklace over her head. I could sense her reluctance, but admired her self-control to limit her powers.\n\n\"You gain energy from it?\" I asked, knowing the answer.\n\nShe nodded, \"I do, it's a lovely feeling to breathe in the arousal you all emit. But I need to be able to control my output. I think I can do it, but it will take practice. My mother must be able to, or we'd have had an orgy the first night they were here.\"\n\nI nodded and headed to the shower, ready to start the day. Each girl either waited, or went to another of the showers, as we all washed our bodies carefully. One thing was true, having a succubus in the house made most pains go away.\n\nThe girls all busied themselves making preparations for the trip. The lack of Kelly's energy left us tired, but all the rest of our connections were still working. We were affectionate, and still craved touching each other. We moved together in a chorus. I worked on packing my clothes when I felt a call from Alyssa flash into my brain.\n\nI walked up the stairs, and she was on the sofa, looking at me expectantly, \"Okay, so that still works,\" she said with a grin.\n\nShe was looking through books in the box she'd gotten from Kelly's mother. A few were open and strewn on the couch and coffee table. She held one in her lap, and looked up at me.\n\n\"You're not using all of your powers,\" she said, \"yours has a physical component to it as well.\"\n\n\"How do you know?\" I asked, moving a pair of books back to the box and sitting down beside her.\n\n\"These are Kelly's grandmother's diaries,\" she said, \"more a memoir. She slips between stories of her youth, some rather disturbing tales of when she escaped the Priesthood, and then there are sections where she describes the various powers of the line, and then this drawing too.\"\n\nShe pointed to a rough sketch of a square apparently metal plate. Spaced in a grid were twelve stones, each one colored differently with a colored pencil. She circled the brown stone, and wrote in the margin, 'in my possession'. Each stone had the name of it's line lettered neatly under it. The brown was Baraqiel, it was in the top right corner. The top left was a deep navy blue and was labeled, Yeqon, my line. Next to it was a black stone, labeled Samyaza, then a deep red stone labeled Penemue. \n\n\"That's you,\" I said, \"right?\"\n\nShe nodded, then flipped a few pages, and found a two pages, with a tabular format. I followed the familiar names.\n\n-----\n\nBaraqiel - psionic vampires, sexual energy feeders, incubus/succubus, physical beauty. light and dark.\n\nSamyaza - dark powers, corruption, power, manipulation, speakers of the word.\n\nPenemue - teachers, telepathy, telekinesis, shapeshifters, light.\n\nYeqon - counselors, designers, manipulation, mind-molders, body molders, dark and light.\n\n\n\n------\n\n\"Fascinating,\" I said, my finger tracing down the columns past several lines of unfamiliar names, \"What does the light and dark mean?\"\n\n\"Well,\" Alyssa stated, \"I'm still studying the fallen angels, but while they are all fallen and disobedient to the creator, they all are imbued with free will. They are capable of making their own choices. These labels, it seems, are Deborah's assessment, not an inherent trait. More than likely from her observations. She grew up in the cult, before escaping in a rather incredible way shortly after her 18th birthday.\"\n\n\"So you think the same with the powers?\" I asked tracing down the lines.\n\n\"It matches with our observations so far,\" she said, \"Baraqiel are psionic vampires, and feed off of energy, people's emotions. Sexual energy seems to have it's own section. Reading her account, the female Baraqiel had the sexual energy more than the males. They were often close advisors to the leaders of the lines. The leadership shifted between the three main powers. The one who was leader during her time was a Samyaza. Her description of him isn't flattering.\"\n\nI nodded, letting Alyssa lecture as I looked up at her and the books she lifted to reference from time to time. She had an incredible ability to read things and then align them in stories and easy to understand examples. Studying with her at school always made the material we learned much more fun, and letting her fly her nerd flag in this would be a great asset to all of us.\n\n\"My line, Penemue, is also accurate, \" she continued. \"My love for learning makes me a natural teacher. We already knew about my telepathy, though... at first I had misapplied that power to yours. I still think you have a component of telepathy to your powers.\" She stopped that thought, \"We'll get back to you... from last night we know I have the ability of shapeshifting.\"\n\nI nodded as she looked at me checking that I was connecting to what she was saying., then said with a bit of anticipation, \"Okay, now watch this!\"\n\nShe concentrated for a moment, then the book beside me started to shake, then levitate. Her gaze focused and the book moved through the air.\n\n\"What the fuck?\" Carmen said as she passed behind us going to the kitchen. \n\nThe book tumbled into my lap as Aly's concentration broke, and Carmen continued, \"We have no time for magic tricks kids, we got an RV to provision!\"\n\nThen she disappeared into the kitchen, and we both laughed. Carmen may have been a sexual submissive with a yearning to submit fully to service, but she was still full of momma bear passions. It didn't bother me, because I figured, she really saw it as a service to us, to keep us on a schedule.\n\n\"Anyway,\" Alyssa continued, \"I need practice, but I can check the telekinesis block. That leaves your line, Yeqon.\"\n\n\"You've shown aptitude in all of these, you have manipulated our minds, designed our responses. You have molded our wills and self-control,\" she pushed her glasses up her nose, as I nodded.\n\n\"Okay, those three I agree, I have demonstrated,\" I said, \"but what does counselor mean? And body molding? I don't get what that could mean.\"\n\n\"Let's talk the body molding first, since I think I have some background that would help you understand,\" Alyssa started, \"According to Deborah's diaries, the cult had their hand in organized crime in Nevada. They started some rural brothels, and ran an underground prostitution ring. They never used Priesthood women to fill the brothels, but recruited from young girls in towns around the northwest.\"\n\nI nodded, we'd put parts of that puzzle together already, Deborah's first hand story just corroborated our theories of the Priesthood. I watched her as she continued. \"The Yeqon halflings, like your grandfather who was probably the most powerful as he is explicitly mentioned in Deborah's stories, would mold their minds to be willing to enter prostitution. BUT, He would also shape their bodies.\"\n\n\"Shape their bodies,\" I said with a question in my voice, like how, why?\n\n\"Jeremiah, sometimes you are bit naive,\" Alyssa smiled, \"Especially for a red-blooded sexual male. He made them into the most beautiful and sexy females in the business. Priesthood brothels were some of the more frequently visited in the 50s and through the mid-seventies. They were known for having the most alluring whores, many having looks hotter than the glamor actresses of the time. Then, suddenly, after your grandfather died, the quality of Priesthood prostitutes regressed to the mean as far as the body shape of a young Nevada prostitute.\"\n\nKnowing that she wouldn't tell me a tale without fact-checking as much as she could, I asked \"Do I want to read more about my grandfather?\" trusting Alyssa to be honest.\n\n\"Now?\" she asked, then shook her head, \"No, you do not. Maybe over time you'll be ready. Your grandfather wasn't a good man Jeremiah. I'm sorry.\"\n\n\"So body molding,\" I said, changing the topic and more than willing to drop the subject of my family. I thought my father was evil, but it seemed he had led a more innocent life than I had imagined. I knew nothing about my paternal grandfather. I was happy to keep it that way.\n\n\"Yes,\" Alyssa said with a smile, scooting a bit closer, \"Do you want to try it?\"\n\n\"Of course,\" I said, looking around, \"Do we have a test subject?\"\n\n\"Me! silly,\" Alyssa said, leaning and kissing me.\n\n\"What should I try molding,\" I asked, \"I have no idea what I'm capable of.\"\n\n\"Well\" Alyssa said, \"Deborah alludes to a change in skin tone, that might be easy to test.\"\n\nI reached for her hand, and pulled her arm closer. She wasn't as pale as Lexi, but tanned wouldn't be a good word for her skin tone. Since she kept indoors reading books, her flesh was pale and a bit blush. Exposure to sunlight would leave a red glow on her skin, before fading back to her normal pale tone.\n\nI thought that painting a picture might be a good way to start, and ran my hand up her arm. Behind my hand, the color darkened into a tawny shade of tan that was just lighter than Kelly's tanned body. I knew Kelly spent time in tanning booths, but she still had a natural color that was more like a sun kissed beach bunny. Alyssa's flesh on her forearm was now considerably darker than moments before.\n\n\"Wow,\" Alyssa said with a whistle, \"Do all of me!\"\n\nFeeling how the power was triggered in my brain, I waved my arms and focused and in a wave of flickering power her whole flesh darkened to match the hue of my first brush.\n\nAlyssa held her arms out and admired my work, then lifted her shirt up, and peaked inside her bra. \"Wow, no tan-lines,\" she said, and reached for her shorts.\n\nI held her hand and just shook my head, \"No tan lines. We don't have to look.\"\n\n\"Okay, what about body hair,\" Alyssa asked, holding out her hand again. \n\nHer forearms has some dark wisps of hair, that I knew she felt self conscious about. I concentrated and thought of brushing the dust off a surface, and her hair vanished where I was concentrating, then with another broad gesture her exposed flesh was bare save her hair and eyebrows.\n\nAlyssa's eyes widened, and again she went to her waistband. I let her look, mostly because I was curious too. Her cunt no longer had a soft brown bush of hair, but showed her exposed labia her mound completely bare.\n\n\"Well that's new,\" she said, \"I kind of like it.\"\n\n\"Saw it in a porn movie,\" I said, \"I heard they use wax to pluck out the hairs.\"\n\n\"Barbaric!\" she said, then purred as her fingers felt the soft flesh around her vulva, \"but very nice.\"\n\nShe stood up and pushed her denim shorts down, exposing a nicely toned ass and legs. Then she took off her top and bra and I whistled approvingly at her new flesh tone and hairless body. \n\n\"We'll save money on razors,\" she remarked, always the practical one, \"Can you do something with these?\" she asked cupping her breasts.\n\n\"What needs to be done, they are perfect!\" I said, truthfully. I loved her breasts, they filled her c-cup bras fully, but truthfully had some sag. \n\n\"They sag too much, I want them up here,\" she started lifting them higher, \"and the areola are a bit too large, I think.\"\n\nI stood up and took her hand, guiding her to the bathroom so she could watch as I tried to mold her body. She looked at her breasts in the mirror with a bit of a resigned look. I concentrated and thought about lifting them, and they rose and lifted on her chest, the crease of touching flesh disappeared. The full cups bounced buoyantly but stayed in their perky new shape. The lift looked perfectly natural, unlike the horrible breast implants seen in porn movies. \n\nI thought of pinching her nipples, and the dusky areola around her pert nipples shrunk. She gasped at the sight and wanted to lift to touch them, but held her hands at her sides, \"make the areola darker, and the nipples just a shade more dark.\"\n\nI painted and looked as she nodded, then turned to the side, \"Lift the nipple up a bit, not too much,\"\n\nI swayed in my thoughts, and the shape of the breast shifted, into perfect crescents, not orbs. \n\nShe smiled then turned her hips, \"Make my ass smoother, and tighter.\"\n\n\"Alyssa, your ass is perfect,\" I said, then looked down and noticed a few dimples of cellulite and a sag, so I mentally cupped and lifted and her ass was suddenly more perfect.\n\n\"Oh yes,\" she said, \"great work.\" A crease of concentration crossed her eyes, as she said, \"Now the acid test.\"\n\nIn a blink I was staring at myself, her having switched to my form, then in the next blink Alyssa was back. Looking the same as I had left her all of my molding experiments were fully intact.\n\n\"Whoa,\" she said, \"You've actually changed... Me. It's permanent.\"\n\nShe turned and kissed me, her perfect breasts pressing into my shirt. She pulled back and looked at me with a grin. \n\n\"Can you do you?\" she asked.\n\nSuddenly I was stripping and standing naked beside her. She was tall, but I had a couple inches on her, and my cock hung nicely just above the sink as we looked me up and down in the mirror.",
        "\"A beard,\" she started, \"Not full, a goatee though.\"\n\nI thought, and hair curled from my chin and a mustache appeared, \"Wow,\" I said, \"Not bad, but how about this,\" and the hair shrunk and was left with an even stubble, just past a five o'clock shadow.\n\n\"Me likey,\" Alyssa said, playing with her nipples, \"can you change sensitivity?\" she asked absently pulling on her rubbery tip.\n\nI frowned in concentration, then suddenly Alyssa gasped then moaned, her nipples rock hard on her chest, \"That's a yes, dial back a bit please,\" she whimpered.\n\nI dialed back and she nodded as the sensitivity shifted, more sensitive than before but not intense.\n\nWe spent the next half an hour watching ourselves as I practiced molding our bodies. My chest hair shifted a shade darker and not so lush, my back hair disappeared. My abdomen grew trim with the shadow of well defined abs, but not cut extremely. Alyssa wanted a bit of hair from my belly button down to my mass of pubic hair. The bush became well groomed, and she suggested that I remove the hair on my balls. \n\nFinally she guided me through shaping my cock. First she wanted me to restore my circumcision, and my foreskin grew and covered my head, growing past the crown. She pulled back the extra skin and had me adjust the sensitivity of my head. I groaned, it was difficult to concentrate, but with patience, the feeling of my foreskin shifting up and down over my glans was like heaven. She added an inch to my erect length, and then suggested I add a bit of girth. Holding my erect shaft as I pulsed the circumference of the column.\n\nFinally she had me go flaccid, and I did. My cock hung impressively with a slight turn the the left. Then she asked if I could make it erect at will. I pushed a thought and my cock sprang and engorged and my knees almost buckled at the thought. \n\n\"Remember,\" I said, \"this is a no sex day.\"\n\n\"How about making it a no succubus sex day?\" she asked leaning her perfect naked breast into my chest, her nipples hard against my flesh.\n\nI groaned, my erection lifted and pressed against my belly, as she kissed me. Her hand reached and stroked my cock. It was no longer super sensitive as it was this morning. My molding had renewed the natural feeling. I couldn't resist her allure. I propped her onto the edge of the sink and she leaned her shoulders back against the mirror. \n\n\"One more thing,\" she sighed, reaching for a hand mirror, \"would you mind working on my vagina, and labia?\"\n\n\"So clinical,\" I teased, then lowered to my knees and pressed my mouth to her bare mound, my lips sucking gently at her folds.\n\nShe gripped my hair, and I looked up, \"In a minute, just a few more things.\"\n\nHolding the mirror, she directed me, molding her labia into a symmetry she liked. She wanted her clit just a touch larger, and the hood slightly larger and more flexible. Then she reached up and pulled a small hoop earring from her ear.\n\nI looked up at her quizzically, \"piercing?\"\n\nShe nodded, biting her bottom lip, \"Something else to test, I want it through the clit hood, but vertical\"\n\nI nodded, and took the ring, looking at the metal hoop. I tried to influence the materials in the ring. It melted and floated as I used my fingers to mold the metal, making the clasp end into a small ball. I then concentrated on her clit hood, and thought of poking a hole. With a gasp, her flesh parted and I slipped the jewelry through the hole from the outside, curling it inside back towards the outside. I finished by shrinking the hole around the metal and forming a ball on the other end. The two balls pressed out from her clitoral hood, and the shaft curved slightly, the metal softly touching her sensitive bundle of nerves.\n\n\"Now...\" she said, widening her legs, her fingers combing through my hair, as she set aside the mirror, \"test it.\"\n\nI leaned in and licked her tender flesh, flicking at the tips of the metal stud. She gasped and gripped my head tighter, nodding her head as I inhaled the scent of her flowering vagina. Her molded labia flowered open and I pressed my tongue between their welcoming folds. Her taste left me dizzy with lust and passion as her arousal flooded my tongue. I lapped and sucked her flesh as she lifted her feet and curled them behind my hairless shoulders. She drew me in and I made love to her flowing cunt.\n\n\"Fuck, Jeremiah,\" she said, \"are you sure you're not a lesbian, you suck my pussy soooo good.\"\n\n\"I am a lesbian, trapped in a man's body,\" I said taking a final lick, flicking the tip of my tongue over the metal ring, making her shudder.\n\nI stood up and gripped my cock and pulled my new foreskin down exposing the crown. I pressed the sensitive fleshy knob into her open folds, and pushed slowly inside. Wanting to feel every inch of my newly molded phallus as it slid in deeper.\n\n\"Just a bit tighter,\" she crooned into my ear as my cock slipped inside her tunnel.\n\n\"So picky\" I said, \"as I felt her cunt walls squeeze me tighter. \n\nI groaned as I drew back, my foreskin pulling over my sensitive glans. Looking in her big blue eyes, my eyes widened as I thrust back in feeling the foreskin slide back exposing the head deep inside her hot cunt. We both stared at each other as we fucked slowly, enjoying each new sensation. We lost ourselves to our passions we fucked harder. Her hips pushing out to meet my heavy thrusts. I reached up and gripped one of her perfect breasts, and then pulled at her sensitive nipples. She cried out as she felt her peak race towards her. I slammed forward and ground my hips as she lifted hers to mine. My pubic bone ground against her new ring and she vibrated, levitating off the sink as her arms gripped my shoulders. \n\nShe came with a loud scream, and I bellowed as my hairless balls contracted and shot bolts of hot cum deep into her tight cunt. I bucked, the foreskin slipping over my head as I rutted in small strokes amplifying my orgasm until my knees buckled and leaned against her. Pressing Alyssa back into the cold mirror. I panted into her ear as I came down from the peak, her hands running up and down my back as she cooed wordless sounds into my ear. \n\n\"Just a notch below, succubus sex,\" she said as I looked at her with a smile.\n\nWe parted, kissed and I helped her down from the sink. I picked up my clothes and she opened the door. Kelly, Lexi and Carmen stood just on the other side, and glared at us. \n\n\"No sex day,\" Kelly said, with a frown that turned into a grin the longer she looked at us both.\n\n\"Wow, never mind that,\" Carmen said, \"You both look beautiful, gorgeous...\" she gaped.\n\n\"Yummy,\" Lexi agreed, looking a back and forth between us.\n\nAlyssa had to explain my new powers, and the mostly complete RV preparations were put on hold as I worked well into the night lovingly molding my already perfect lovers. Oddly, each of the small changes only added to their perfection. They remained fully recognizable as who they were, but ... supercharged into sexual beings. \n\nWe spent a good amount of time enjoying our enhanced bodies, that were now free of the aches from the previous day, thanks to the magic of body molding. Kelly kept her pendant on, and enjoyed normal feeling sex. She whispered softly into my ear as we cuddled together in the afterglow, \"succubus sex is still better.\"\n\nI nodded in agreement, \"Truly, my love.\"\n\nPast: Jenn\n\nSo, what is your name,\" Jenn purred as she entered the man's hotel room, her hands already peeling the straps of her dress off her shoulders. \n\nShe spun around and walked backwards, to watch the older man enter the room. He had taken off his tie in the elevator, and as the door clicked shut loudly behind him, his sport coat hit the floor.\n\nJenn bent over to shimmy the dress off her legs, stepping out, her high heels still strapped to her feet. Her eyes were half closed as her body started feeding the chemical arousal she craved into her brain. She slid back to the older man, her hands moving to his button-down shirt, and she started unbuttoning it.\n\n\"Jediah,\" he said, then slid his hand to the young girls throat and tightened his grip, \"but you can call me Sir.\"\n\nShe gulped unused to the physicality of this man. John's were mostly timid, but this man was hungry. Hungry for something she'd not experienced before, or maybe since that one night with Kelly and Lexi. She gasped and her hand rose to grip his wrists, suddenly struggling to breath.\n\n\"Ppuh phleease, Suhhr,\" she said and then was unable to speak.\n\nJediah gripped the young girl, his eyes feasting on her naked form. He held her close to him by the throat, and inhaled, feeding off her arousal and fear. He let go of her neck, then pulled back his hand and slapped her savagely across the cheek.\n\n\"Ughowh!\" Jenn cried, careening into the nearest bed of the double occupancy room. Her cheek felt like fire and she tasted blood in her mouth as she rolled onto her back, shrinking back away from the suddenly very violent man. \n\nJediah tore off his shirt, then leaned over and slapped her across the face twice more. Her neck whipped from side to side. She reeled in a red fog of pain as his strikes bruised her cheeks, and her lip split and began to bleed. \n\nJediah's sadistic nature craved this part of the recruitment phase, the sluts needed to know that not all John's were disgruntled family men. Many were prowlers, hunting for their prey, willing to pay good money for a target they could beat. Some brothels catered to these craven men, and the money they brought earned secrecy from the Priesthood hungry for cash. The pain in the moment could be cured rapidly by Priesthood halflings. Not as easily as when Zedekiah led them, but there were still enough to profit from the selling of pain-sluts.\n\nJenn was overwhelmed, her sexual arousal had endorphins swimming in her bloodstream, the sudden pain and extreme fear she felt only poured more endorphins in response, and her eyes blurred from the near narcotic response to pain her body naturally produced. Her body shifted trying to escape the pain, but deeper, her body craved the intense feeling it left behind. As Jediah slammed her back down, and straddled her waist, his hand dug in his trouser pocket. He gripped her nose with one hand and pulled upwards, while his hand, now holding a ball-gag gripped her chin and shoved the sphere between her teeth. \n\nShe tried to scream, and could only gurgle. Small sounds and muffled grunts of pain were the only sounds as her mouth was filled with the rubber ball. Her tongue flattened against the bottom of her jaw, and her mouth started to fill with saliva as she couldn't swallow well with her jaws forced open.\n\n\"Shtaaph!,\" she pleaded, \"eith hhursss\"\n\nJediah only grinned ferally, as he fed his dark sadistic needs. He drew power from her struggle, and welcomed her feeble attempts to hit him back. His halfling power, though weak, was fed by fear and manifested as aggression. This scene he'd started would energize him again, and he was content to start slowly with this new young recruit. \n\nHe knew he couldn't hurt her or leave excessive marks. He flipped her over and held a hand to her back as he attacked her ass with his hand, spanking and punching, clawing and raking her flesh. She groaned into the mattress, the weight of his body too much for her small frame. Jediah knew that Deacon wanted to see her first hand. He'd be happy to see this slut, he reckoned feeling her response.\n\nNormal girls would need to be tortured for days to be trained to handle pain. This one though, even in the short time he'd tortured her was already processing the pain. She wasn't halfling, but she'd been exposed to the aura of one, he felt it. Her nerves and synapses were allowing in the pain, her body chemistry flooded with endorphins, and she was soon drunk with their narcotic effect dulling the pain. Her arousal grew with each rough handling. \n\nJediah reversed himself, and sat lightly on the small of her back, his knees at her waist. He grabbed her thighs and opened them, \"Keep them spread apart, slut, or this will seem like a tickle.\" \n\nJenn groaned, her thoughts a fog of pain and now lust. Her thighs spread and she growled a low purr into the rubber plug, \"ysssthhh Daaadahh\" she moaned. \n\nJediah's lips curved into a lecherous grin as he decoded the words. His hand worked between her open thighs and under the curve of her reddened and abraded ass. Her cunt was leaking with arousal, not a remnant of her arousal in the bar, or from her last quick fuck with the feckless John. But her body trembled with a new flavor of lust. The pain in her breasts and ass only amplified the cycle of arousal. She ground her bruised sex into his fingers as he shoved them in deep, forcing three, then four fingers into her splayed cunt lips.\n\nLicking his lips, Jediah twisted off of her, almost resigned as he knew further pain wasn't constructive. She would adapt this new kink to her menu, and even crave it soon. But he was going to be fed, and he would feed well. He pushed down his trousers and boxers and gripped his cock, kneeling back up onto the bed. He gripped her hands and brought her wrists together along the base of her spine. He worked his knees up, until his cock teased her cunt, she writhed at the contact rolling her hips to get a taste of his manmeat. \n\nJediah worked her wrists and arms, twisting her palms together fingers pointing up along her spine. She groaned at the new pain, and rolled her head to the side looking back over her shoulder at Jediah with lust filled eyes. \n\n\"Futh muh khuunn\" Jenn begged through the gag, her hips rolling as Jediah forced her hands higher up her spine. \n\nHe wished he had brought rope along on this trip, keeping her in a reverse prayer pose would be a challenge without rope. He grabbed her elbows and drew them in, as her shoulders rolled back and she screamed in pain into her gag. He slammed into her cunt with a hard thrust and she bucked, welcoming the stiff hot shaft into her buzzing cunt. She growled as her hips rolled, squeezing the invading cock with her inner muscles.\n\nJediah started rutted, letting his own lust take over. One hand gripped a handful of hair and drug her head back. Her extended jaws, the large rubber gag, and now her craned neck, made breathing a chore. She gagged on her own drool and gurgled as she tried to inhale a draw of oxygen. Jediah hammered her cunt hard with hard strokes, and he felt her body trip easily into orgasm. In her oxygen deprived, pain filled state, the orgasm was a rush of release and pain. Her nerves flexed as they used up the last of the oxygen, and Jenn's eyes rolled back and then her muscles slumped as she blacked out. Jediah let go, and unclipped the gag, making sure she was breathing. \n\nStroking his still rigid cock, he finished by coating her reddened back and ass with his hot white cream. When he recovered, he went to his suitcase for supplies. He cuffed her ankles together, then her wrists. behind her back. Using the clips, he pulled her limbs together, and left her lying limp in a rough hog-tied position. Pushing the gag back in her mouth he stood up to admire his work, and ensure she was breathing regularly. Her body was a mess, the once smooth vibrant flesh was bruised and scratched along her sides and ass. She slept with an odd grin, even gagged, that seemed content, at least to Jediah's demented vision.\n\nHe slipped to his knees on the opposite bed, the room came with a pair of full sized mattresses. He said his prayers quickly, then slipped between the sheets. He licked his lips, his feeding had been delicious, and now the sleep would recharge his physical body. He'd run her through her paces, then go back to the compound to introduce her to Deacon.\n\nDistant Past: Deborah - Diary Entry\n\n\n\nI was craven, I see that now. I still remember how stench of the three day orgy filled my nostrils, as I fled the scene. My powers hadn't waned during the ordeal. I had fed on their constant arousal. I was always alert and knew what I was doing. The men of the compound were in a frenzy of lust. Lust they hadn't felt in their lifetimes. My powers bloomed in awesome display, my body an object of desire for their demented fantasies. I let them feed. I let them get drunk on their perversions.\n\n\"Use me,\" I had said to myself, as their flesh tired from their dark dreams. \n\nI remember how they clawed at me, trying to mark me. My power kept me radiant and unharmed. I let them into my body, taking them willingly into ass, cunt and mouth. Sucking their lust and passion into me, making me even more powerful. Their human seed tasted like the feast of Bacchus and I let myself get carried away. I watched ferally the young men, too young to participate in the rite of passage, hovering as spectators around this orgy of the gods. \n\nZedekiah, was near my age, though genders kept to themselves, I knew of him. He was a brooding young man, though handsome physically. His eyes darkened with his thoughts. \n\nZedekiah's father was the Yeqon leader, and a power hungry man. He was involved in my awakening, trying to coordinate the men and control me. He used his powers to control them, as best he could. The early parts of the first night, their lust was hard to control, and my powers overwhelmed him early in the night. \n\nI was in the center while eight pairs of hands touched me and fed from my power. Zedekiah kept his eyes on me. I remember his icy cold stare, I think he knew what my goal was. He watched as my first victim, his father, fell dead from a heart attack. He turned and walked away. I felt the dark spirits cackle as I had done their bidding. The first victim only whetted their appetite and they encouraged me, urged me to continue.\n\nI continued through the next day, letting the younger men have their fun. I enjoyed their antics and fed on their power and their seed. The first victim had left me feeling powerful, and I shared that willingly with the young men. I watched the elders, my targets. My first victim was crippling, but Zedekiah had promise as his heir. I wanted to end a line with my next victim. I finally saw my target. \n\nHe was considered the wise one, Penemue, a teacher. I knew he was influenced by the dark, his teaching led to female enslavement on and off the ranch. I had friends in each of the leader's houses. They fed me intel as my body was prepped for my unholy birthing into succubus. The Penemue had counseled that I would become addicted to the power, and then they could enslave me. I laughed as I watched him orbit outside of the pleasure pit of male flesh surrounding me. The fact that he only had produced six daughters must have made him feel ashamed and frustrated. No male would be left to continue his line.\n\nI admit I pushed at him a bit, when one virile young man hit me in the right spot and I blossomed into an orgasm that left me pulsing with power. I fed on the young man's powerful seed and focused on the older man. His fall was even more shocking, but the crowd only cleaned up the mess, and restarted their ordination rite.\n\nI was allowed a small respite, as they cleaned up his mess. Even allowing me to cool and cleanse my heated, sweaty, and cum glazed flesh with water and a soft rag. I didn't want or need the cleaning, and spent the time, pushing my power to keep the young men in the game. I needed them to stay aroused, I wasn't done yet. They rallied as my power entranced them. Their youthful cocks stiffening inside my supernatural aura. \n\nOne more target, I promised myself, then I'd leave this place forever, even it if killed me. I focused my attention on the dark Samyaza, sitting on his silly throne, wearing the perverse breastplate. I knew he was protected from my powers as long as he wore that charm. But I didn't need to use my powers. He was a male. He was weakened by his own lusts, I only had to use his natural fleshy nature to ensnare him.",
        "I worked the crowd of boys that teemed around me, taking them in each hole, and two more in my hands. When a cock exploded in a pulsing flow of white cream that now decorated my flesh, leaving a glaze over the glow of my powers, I pulled another one forward. I danced and showed every male watching that I could make them feel like a god, I'd feed them the power of angels. I fulfilled their sexual needs beyond their beliefs. I worked for a day, enticing that Samyaza. The stream of young men keeping me charged and full of power. \n\nThe leader finally succumbed. Rising from his silly throne and pushing the boys away from me. As he took me, my power bloomed, and I struck. When my senses returned I was in the darkness, away from the throng. Alone I felt the high preist's metallic breast plate with twelve stones hang from my sore fingers. My body was naked, and sticky from the ordeal. I felt tired, weary and sore. As I recalled what I had done I shivered in revulsion, and realized I needed to flee.\n\nI saw a young girl almost my age, walking alone through a small opening between two of the compound's uniform houses. I rushed to her, grabbed her dress, she struggled as I pulled it up her torso. She turned around and was stunned at the sight of me. Powerless as I held the breastplate, I must have looked horrible. While she was stunned by the sight of me, I pulled the dress from her leaving her in her temple garments. I tore off her top garment, exposing her breasts, and she shrieked and ran.\n\nI dropped the breastplate, feeling my power bloom up again. I pulled the dress over my head, covering my flesh, that had felt torn and abraded without my powers. I kneeled down, and worked at the breastplate. Gripping the brownstone, even if it made me tired as my power ebbed. I pulled it free, and dropped the plate to the dust. I wrapped the brown stone inside the girl's upper garment, and paused. Letting my now unrestricted power release and fuel me. I knew that I could escape now. I raced down the drive of the compound, and into the dark night. I was free.\n\nDistant Past: Zedekiah's Journal\n\nThe succubus bitch had gotten away. The shock of the high priest's fall was still buzzing through the compound. I was shocked that my father was gone, but not surprised. He was never as controlled as he should have been. Our power was subtle, and he used it too recklessly. \n\nI traced the trail of blood from the platform. The blood of our leader dripping off the edge of the breastplate. Young men, only slightly older than me in pain from their folly. Fucking anything, even a full blown succubus for three days was excessive. The fools. I wasn't invited on the platform, and I knew I didn't want to be near the stench of that craven whore. They deserved the pain they'd feel. I'd turned away after watching my father fall, I was the oldest Yeqon now. \n\nThe night was just starting to fade, light creeping along the eastern horizon. My dim flashlight would not be needed soon. It's yellow light glinted off a slab of dusty metal, and I kicked it over: The breastplate. I recognized the stones, and recited their names from memory. Baraqiel was missing. The succubus whore had torn it out. Her bloody fingers had marked the brass fittings. \n\n\"Just leave it alone,\" came a voice behind me, \"I'll take care of that, son.\"\n\nThe man was bearded, his eyes light grey, and unreadable. His physical form was slightly gaunt. I watched his hands, scarred deeply from something that had happened to him many years ago. He picked up the breastplate, and slipped it under his arm. His gaze looked at me, and assessed me. I felt a wisdom that went beyond years, as he looked at me with a dead gaze.\n\n\"You are close,\" he said, cryptically, \"but not completely gone, there is still a choice you can make.\"\n\n\"What do you mean,\" I asked a flash of anger blazing behind my eyes, who was this man to judge me?\n\nHis smile was only part smile, the other half a knowing frown. He closed his eyes as the sun lifted from the horizon. He sighed as he felt the glow of the warm light. \n\n\"Darkness is hard,\" he said again, not addressing me completely, and he turned to face the rising sun. \"Mind your choices, Zedekiah.\" And he walked away, turning to walk between two nearby houses. He was long gone before I could follow him.\n\n\"How did he know my name?\" I wondered, then went back to counsel with the remaining elders.\n\n*****\n\nAuthor's Note: Thank you for reading, commenting and voting. The cast has expanded, and the new powers the halfling trio are discovering will come to play as the story continues. Much thanks to mgenette<b/> for his editing assistance and feedback. I tend to go in too many directions and he has helped me reel things in and focus. \n\nKeep reading, voting, and commenting. Your encouragement keeps the story alive."
    ],
    "authorname": "HankDolworth",
    "tags": [
        "male dominance",
        "female submission",
        "succubus",
        "gang bang",
        "sadism",
        "sadomasochism",
        "supernatural",
        "shapeshifting",
        "body altering"
    ],
    "category": "Mind Control",
    "url": "https://www.literotica.com/s/the-designer-pt-02-ch-10"
}
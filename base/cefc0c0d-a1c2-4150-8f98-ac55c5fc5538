{
    "title": "There and Back Again Ch. 123-124",
    "pages": [
        "Chapter One Hundred Twenty-Three: Closing Doors\n\nI stared out into the distance for a few moments, trying to get a sense of how many darkspawn were out there; it was far too dark for me to tell, and as always in the Deep Roads, my Warden sense wasn't working right. I cursed; I could do nothing -- not about the door, or the horde.\n\nI turned back the way I came and crept back through the darkspawn-infected hallways and caverns. Fortunately the ogre hadn't moved, however most of the hurlocks and genlocks had pressed up closer to the corner nearest the makeshift barricade the soldiers had been building. The Withered was standing with a small clump of hurlocks, growling at them in what I could only assume was some sort of darkspawn language. He was out of my way, so I ignored him for the moment.\n\nSneaking through the throng to round the corner and reach the barrier must have cost me a decade of life expectancy; there were times I was close enough to feel the unnatural heat radiating off the creatures as I wended my way through. If one of them had moved at the wrong time, even just to swing an arm, I would have been caught. My only consolation was that the Wardens were nearby, and would be able to attack without delay if I had shouted. But I remained lucky; I could see a couple of genlocks sniffing around with confused expressions as the air near them stirred, but none of them touched me.\n\nPast the darkspawn, there were a couple of corpses left lying on the ground; I gathered there must have been another skirmish between darkspawn and the forces of good.\n\nI rounded the corner to discover that, in my absence, the Wardens and Legionnaires had set up a post on this side of the makeshift barricade. That must have been when the skirmish happened. Obviously they knew the darkspawn weren't far, and the darkspawn clearly knew the Wardens' location also; they were at an impasse as each side debated what to do. A flimsy shelter had been assembled, allowing the forces standing there to at least avoid arrows; Fargrim, most of the Legionnaires, more of Nate's soldiers, and Solona and Anders were standing there when I walked up.\n\nThe two mages patted me on the shoulders as I passed them, and I shot them a tremulous smile; Fargrim, the rest of the dwarves, and the soldiers all stared at me, mouths open, speechless. I'd have giggled if I hadn't been so terrified. The dour, pale-haired second-in-command left his fellows there and followed me as I ducked through the barricade.\n\nI walked directly into Alistair's arms when I straightened on the other side; he held me protectively, his handsome face going from relief to concern as he felt me shaking. Now relatively safe, the enormity of what we faced suddenly crashed down on me,. What are we going to do? I vaguely heard questions being asked by Fargrim and Trevian, and Leliana's sweet lilt responding, but I couldn't even understand the words as I just clung to Alistair and tried not to pass out. I was gasping great, big gulps of air, I realised, and I consciously tried to slow them down and pull myself together.\n\nFinally my shuddering slowed to a halt, and Alistair put his hands on my shoulders, pushing us apart enough that he could see my face. He'd been talking to me, clearly, trying to calm me down, and only now did his voice filter through to my conscious mind.\n\n\"Love? Hey, it's okay. You're safe now.\"\n\nI shook my head, clearing it. \"No. I'm not, and neither are you. None of us is safe.\"\n\nI prepared to tell him everything I knew: perhaps fifty or sixty darkspawn between us and the barrier door, including at least one disciple, and one ogre who appeared...smarter than the average; a completely broken barrier door that would take more than me to repair; hundreds of darkspawn just on the opposite side of the door.\n\nI looked around, finally remembering that there were others around who perhaps shouldn't be hearing what I had to say; Leliana had apparently shooed them all away while I had my meltdown, and was standing at a short distance, guarding us from eavesdroppers. I smiled gratefully at her, and she nodded back, uncharacteristically serious. She saw me lose it; she knows we're in trouble. The only other people within range were the Legion of the Dead leaders Trevian and Fargrim, Nathaniel, and Varel.\n\nAlistair blanched as I told my story; Nathaniel and Varel grew still, faces grey. Trevian swore loudly in dwarvish, his meaning obvious even without understanding the language. All the while I spoke, Fargrim stared at me, barely listening, from outward appearances, but instead looking at me -- through me, it felt -- as though what I looked like, who I was, was more important than what I was saying. His gaze never faltered, though his expression remained unreadable; I thought the derision he'd seemed to regard me with before was absent, but that could have been my imagination, or a trick of the dim light. I tried to ignore him and focus on Alistair.\n\n\"I don't know what we're going to do,\" I finished. \"We can't fight that many, and we can't repair the barrier door without a fight. I can get to the door, but it's going to be obvious if I start tinkering with it, and honestly nothing I can do is going to make the difference.\" I gulped a breath, closing my eyes in horror. \"We're going to be overrun. The Vigil is going to be overrun.\"\n\nThere was a long moment of stunned silence as everyone let that sink in. After everything, we're doomed. It was a close fight not to cry.\n\nFinally Alistair spoke. \"What if...maybe Dworkin? Bury them all under a ton of rock and debris. They'll dig through eventually, but it buys us enough time to deal with them...\"\n\nTrevian replied, \"Too risky. You should have seen that maniac's explosion in Kal'Hirol. You're not unlikely to lose the whole Keep to a sinkhole. No, better we hold this barricade for as long as possible while you send messengers to that king of yours. Maybe Queen Sereda could even be convinced to help?\"\n\n\"That will take weeks. The army is fragmented by now; it will take time to mobilise any sizeable force. We'll never hold that long with our current forces; everyone needs to eat and sleep sometime. And Amaranthine will pay the price if we can't hold the Vigil.\" Nathaniel's voice was bleak, resigned. He thinks we're going to die. He turned to Varel. \"Send messages off to the king and Orzammar. Evacuate the civilian population at the Vigil and send letters to evacuate Amaranthine. We will hold as long as we can, and the last to fall will trigger every explosive Dworkin can rig up to buy the army time.\"\n\n\"No.\" The rough voice of Fargrim startled me, and I turned to look at him in surprise. \"This is why the Legion exists. This is why the Ancestors allowed the Wardens to save us. We are not losing this fight.\"\n\nTrevian stirred. \"'Grim...\"\n\n\"No, Trev. We can do it.\" He turned to Leliana and gestured. \"Bring Voldrik over here.\"\n\nWhen the auburn-haired dwarf arrived, expression dour as always, Fargrim turned to me. \"Describe the door.\"\n\nTaken aback, I described the state of the barrier door hesitantly, from the disconnected metal rods to the door itself hanging slightly askew.\n\nFargrim turned to Voldrik. \"How long?\" When the engineer blinked in confusion, he clarified, \"How long to fix it?\"\n\nVoldrik considered. \"With a bit of help and a lot of luck, half an hour. An hour without luck.\"\n\nFargrim nodded. \"We can do it. We can buy an hour.\" He pointed at Nate. \"Your soldiers are going to get their blades wet today.\" He turned to me. \"You'd better be right about this, Princess.\"\n\nAlistair bristled, but Fargrim ignored him and began laying out his plan.\n\n***\n\nLess than an hour later, every melee fighter that could be spared was assembled on the far side of the barricade, leaving only archers, led by Nathaniel, watching the gate. Leliana had been dispatched on the fastest horse in Nate's stables to find Aedan; other messengers had been sent to Denerim, Amaranthine, and the Pilgrim's Path for Conrad. Every shield that could be found or improvised was equipped; even I held a small, round, wooden shield on my left arm, the weight uncomfortable and yet somehow comforting.\n\nI'd had only a moment to cling to Alistair, despair and hope warring with each other as I kissed him desperately. And then we were formed up and I could barely even see him.\n\nHe and a handful of the more experienced soldiers led the formation. Out to either side of him in a loose wedge, every soldier Nathaniel could spare stood shoulder-to-shoulder, several rows deep. Anders and Solona stood behind Alistair, ready to cast, with every Lyrium potion we could scrounge up in the backpacks they carried. And behind them came the Legion, with me and Voldrik sandwiched in the middle.\n\nThe plan was the best we had; the wedge would go in like an icebreaker, forcing the darkspawn to divide down the middle and make a gap. In their wake, the Legion of the Dead would charge through. I'd seen the tactic before, in reverse, down in Bownammar; the Legion were the ones making the hole for the Wardens, then, but the concept was the same.\n\nThe entire Legion shield wall, led by Fargrim, would go first through the gap to plow through any darkspawn that didn't get sidelined by the soldiers; they wouldn't stop until they'd passed the barrier door. The other Legionnaires -- rogues and two-handed fighters, led by Trevian -- would follow to defend from behind, staying on the near side of the door. Voldrik and I would be in the middle, him to repair the door, me as a last line of defense for him if all else failed.\n\nThe goal for the shield wall was to hold the narrow hallway beyond the barrier doors until Voldrik had the mechanism working, then retreat just as the door swung shut. The other Legionnaires would help fight the sixty-or-so darkspawn on the near side, keeping them off Voldrik. I'd be able to move more freely, dividing my time between aiding Voldrik, holding the hallway, and helping out the Wardens and soldiers as needed.\n\nIt was a terrible plan. A truly, dismally, horrible plan...but it was all we had. Dworkin had rigged the hallway near the barricade with explosives as a last resort, and a small group of soldiers would remain at the barricade to trigger them if everything went south.\n\nWe knew the casualties would be high. No one said it, but the grim determination in everyone's eyes made it quite clear that no one was oblivious to the cost. I wondered if any of the shield wall would survive. The alternative, however, was unthinkable.\n\nCourtesy of one of the Legion's rogues, who was rather disturbingly obsessed with poisons, each woman and each Warden in the fight had a suicide capsule secreted in their armor somewhere. If captured, the poison would cause instantaneous death through massive hemorrhaging; we wouldn't give the Architect more Warden blood to work with, nor the darkspawn more broodmothers, if we could help it. The necessity of such a measure frightened everyone almost as much as the horde we would be facing.\n\nI wondered if I'd ever see my husband or my brother alive again.\n\nOnce everyone was assembled, with a brief whispered prayer to any god that would listen, we began to march.\n\nAt first, things went to plan. At the entrance to the large chamber containing most of the darkspawn, the formation paused to allow Solona and Anders to rain down ice and destruction on the waiting 'spawn. They weren't able to do Storm of the Century -- Solona's lightning abilities weren't that great, and there wasn't enough time for the casting. Instead, while Anders alternately froze and boiled darkspawn where they stood, Solona cast mass paralysis to keep them all standing within the area of effect, and then dropped something called a death cloud. The screaming of darkspawn was deafening, and I breathed a slight sigh of relief. Maybe we can do this after all.\n\nAnd then it all went to hell. As soon as the spells stopped, the left-hand side of the wedge charged prematurely, leaving the right-hand side following in their wake, confused and trying to catch up. These are not the seasoned fighters Kardol's men were; their inexperience shows. Alistair, supposed to be on point leading the offensive line, ended up being pulled off centre by the slower troops on the right and stuck behind the soldiers as they hit the darkspawn. I lost sight of him entirely in the confusion. No gap was created, and the Legion had nowhere to go as the fighting swirled off into chaos.\n\nWith a shout, Fargrim and the shield wall drove into a group of darkspawn on the left, trying to make a path for themselves. It would have been successful, except the ogre I'd seen earlier took that opportunity to charge, scattering the dwarves like leaves in a strong wind. Voldrik and I dove out of the way, landing up against a slimy, taint-covered wall beside Trevian and Fargrim, who were frantically trying to reorganize.\n\nAlistair, with Solona and Anders in tow, surfaced briefly; Anders slowed the ogre with ice, Solona locked it in some sort of nightmare, and as I was dragged away by Fargrim, I saw Alistair drop his shield and leap up to drive his sword into the monster's neck.\n\nTrevian was arguing with Fargrim, who held my arm in a vice grip. Finally nodding, the Legion commander turned and shouted out commands in dwarvish; the Legion slowly reformed into a wedge, Trevian and the others leading now while the shield dwarves snuck off to the side or followed in behind.\n\nFargrim shook my arm to get my attention. \"Can you get Voldrik to the door?\" he demanded. \"You're good at sneaking, right? Can you take him with you?\"\n\nI looked around the room, seeing clumps of men and darkspawn fighting, the ogre already down and my Wardens nowhere in sight. The edges of the room were largely unoccupied, and none of the darkspawn spared a glance at the three of us standing alone.\n\nI nodded, unhooking the shield and pressing it into Voldrik's hands, then drawing my second dagger. \"I think so. They'll see him, but I'll see them first. We can creep around the edges of the fighting.\"\n\nFargrim gave me a stoic smile. \"Then we'll meet you on the other side of this mess. The shield wall are going to split up and try to make our way there alone while the others draw attention. Don't start on the door until at least one layer of shield is between you and the horde on the other side.\"\n\nI nodded, and gesturing to Voldrik, crept down the wall as Fargrim barreled into a nearby genlock and was swallowed by the fighting crowd.\n\nKeeping Voldrik well behind me, I moved along the wall carefully, eyes scanning the writhing, shouting mass of darkspawn and soldiers. I'd catch a glimpse, every now and then, of someone I knew; once I thought I saw Alistair's shiny helmet, but I lost it again just as quickly. Corpses were everywhere; there were more darkspawn than human or dwarven, but there was no shortage of either.\n\nEvery time a darkspawn strayed too close to where I was leading Voldrik, I'd motion for him to stop and sneak in behind, slitting throats and disabling with kidney shots like I'd been taught. When I was sure the creature was dead, I'd gesture to Voldrik and start creeping along again. It took much longer than it would have alone; every now and then a darkspawn would spy Voldrik and try for an easy kill. Even carrying my shield, the engineer looked like a helpless target. Each time, I'd divert, taking the 'spawn by surprise and ending them before they reached him.\n\nWe finally reached the barrier door; a double-handful of dwarves had formed a thin shield wall, and when they saw us, they moved into position two deep just past the barrier door. Voldrik, looking pale but determined, dropped his bag of supplies and began frantically working on the door mechanism.\n\nI stood nearby, darting in and disabling or killing darkspawn who strayed near us, but the worst of the fighting was at the opposite end of the chamber near where the disastrous wedge had fallen apart.\n\nAt first, the shield wall stood unmolested; there must have been some sort of signal the darkspawn were waiting for, because despite the noises Voldrik's tools made, none of the horde approached. Legionnaires trickled in one-by-one; probably two-thirds of them had arrived when Fargrim finally showed up. The blond dwarf was bleeding from a nasty scalp wound, but waved me off when I offered to at least bandage it.\n\n\"The ladies like a scar, Princess. Leave it be.\"\n\nThe other Legionnaires within hearing distance chuckled, but I could see despair in his eyes underneath the forced humour. He leaned in and whispered so I was the only one who could hear, \"We're all that are coming, I think. Lost a lot of good men trying to find our way here. We will hold that hallway with our last breaths, if need be -- just get that door fixed.\"\n\nI nodded, and he stepped into place with the rest of the shield wall crew, ready for whatever came. Voldrik asked me to help him hold things a few times as he hammered, and the door mechanism was starting to look more like the functional one I had seen in Orzammar.\n\nTrevian and some of the other Legionnaires had finally made it through the chamber and formed up to protect Voldrik as he worked; he and I exchanged grim nods briefly before he turned back to the fight.\n\nSuddenly there was a shrill whistle of some sort, from the far end of the room -- the darkspawn ranks had thinned out dramatically, and despite a staggering loss of life on both sides, it had become obvious that the darkspawn in the chamber were going to lose. The sound, an unearthly sort of scream I'd never heard before, cut off abruptly; I glanced up to see the Withered run through from behind by Alistair as the last echoes rang through the chamber.\n\nThe damage was done, though; from the hallway beyond us, howling and screeching echoed as the horde finally gathered itself for a push. I turned and watched the first ranks of darkspawn sprinted down the hallway, breaking themselves against the shield wall like waves against a cliff. They were defeated almost too easily, but I knew that wouldn't last. Like the cliff, eventually the waves would break it down, and I didn't think our shield wall had years before it crumbled. The one saving grace was the narrowness of the hallway, compared to the massive dimensions of the cavern beyond; it took only five dwarves to completely block the hallway, and the darkspawn couldn't attack en masse or get around to flank the shield wall.\n\nIt was uncomfortably reminiscent of the Spartans defending the pass at Thermoplylae, and I could only hope it would be enough.\n\n\"Hurry, Voldrik,\" I muttered, more plea than demand; he grumbled something under his breath in return, but I didn't miss the increasing urgency in his movements as he worked.\n\nI heard the cry of the first dwarf to fall; I flinched, but the shield wall held, and the dwarf in the second rank stepped forward seamlessly into the hole to keep fighting. More darkspawn filled the hallway behind, almost trampling each other in their eagerness, but still the dwarves persevered.\n\n\"Voldrik...\"\n\n\"Blast it, woman, do you think I'm taking my sweet time with this? Hold that spring in place, would you?\"\n\nMy daggers already sheathed in anticipation, I jumped to the spot he indicated, still distracted by the fighting behind me. A quick glance showed most of the first rank of dwarves had been killed.\n\n\"Almost,\" Voldrik mumbled, cursing briefly before, with a triumphant yell, he hammered something into place; the door, which had been leaning against the side wall, lurched upright with a metallic groan.\n\n\"Got it?\" I asked. The ginger dwarf nodded, and I cheered. Turning around, I shouted back at the men behind me. \"Fargrim! Retreat!\"\n\nI heard him acknowledge me, then shout out orders to his men; he counted to three, and they all took a step back in unison, some of the darkspawn falling forward onto the spears in surprise. He counted again, and the dwarves took another step.",
        "One of the dwarves fell. The last one in his row stepped forward, but no one with a spear remained behind him. Two more steps, and three more dwarves cried out and disappeared from sight. They were ten feet from the door. Then eight.\n\nWhen it was down to a single rank of dwarves between the door and the horde, Fargrim turned. His head wound was bleeding profusely, his visage frightening, but the bleak, resigned expression was even more so.\n\n\"We aren't going to make it. Close the door.\" Even over the din, I could hear him like he was right beside me.\n\nI shook my head in denial. There has to be some way, some chance. Maybe if they collapsed the wall and sprinted? Voldrik fumbled at the door behind me as I shouted at Fargrim to hurry.\n\nThe dwarf beside Fargrim fell. The dour leader nodded at me once, seemingly trying to reassure me, and shouted one last time.\n\n\"Run, Princess. Run!\"\n\nVoldrik grabbed my arm and half-helped, half-dragged me over the threshold before slamming his fist against the mechanism that closed the door. With a grinding sound, the door began to swing shut. I looked back, helplessly, as Fargrim and the other dwarves were dragged down by a handful of genlocks; my last vision was his face, calm, almost serene as he was overcome.\n\nAnd then the door clanged shut.\n\nI resisted dropping to my knees or crying out; I'd seen so much death at the battle against the Archdemon that I thought I might have been hardened against it, but it felt like I had a ragged hole ripped in my guts anyway. Voldrik clapped me on the arm, and we stood together, stunned, for a brief moment of silence.\n\nI finally turned to see the battle was over. While we'd worked on the door, the soldiers and Wardens had destroyed the last of the darkspawn inside. Groups of bloodstained, exhausted soldiers were circulating, slitting throats and ensuring all the darkspawn were dead; others dragged the corpses to opposite sides of the chamber -- the darkspawn piled for burning, the humans and dwarves much more reverently laid out for funerals later.\n\nThe carnage had been incredible. Roughly sixty darkspawn corpses made a huge pile, and while the human and dwarven dead numbered less than a third of that, it was still a staggering loss of life. At the far end, I could see Anders and Solona working on the wounded, but I couldn't see Alistair anywhere.\n\nI instinctively eyed the growing number of bodies up against the wall before I could stop myself. No, he can't be dead. Even I can't believe life could be so cruel. I resolutely looked away and headed towards Anders, assuming that if anyone knew where my husband was, he would.\n\nI worked my helmet off as I went, my curly brown hair clumped together by sweat and Maker-knew what else. I was stopped part way across by Trevian. \"I saw,\" he murmured, reaching out to pat my hand. \"Don't feel bad. He'd have wanted it that way.\" He studied my face for a moment -- I was scowling, brows furrowed, poised to speak -- and chuckled sadly. \"We're already dead, remember? It was their choice. All of them. We gave them the option to stay on the inside if they wanted. They all knew they wouldn't be coming back.\"\n\nI sighed, suppressing my tears for later. \"Doesn't make it better, I'm afraid.\"\n\nHe smiled softly. \"I know.\" He looked a hundred years old in that moment; I wondered how many friends he'd lost in the Deep Roads. \"Come on; your husband will be frantic, I'm sure.\"\n\nChapter One Hundred Twenty-Four: Ripples in Time\n\nMy reunion with Alistair was hampered by a massive bandage across his left shoulder. I found him sitting in a crowd of injured soldiers, patiently waiting his turn for Anders to take a look at him. His armour had been cut off, part of it dented; he'd need a new set eventually. Someone had wrapped a length of linen bandage around his upper arm and shoulder, and blood was slowly seeping through despite that.\n\nI launched myself at him, slowing only slightly when I landed on my knees beside him so I didn't jar his bad shoulder. I dropped my helmet beside him and wrapped my arms around his torso, pressing my nose into the crease in his neck opposite the bandages. I felt his fingers weave into my hair, holding me close, as he pressed kisses to the side of my head. Finally, cradled up to my husband's chest, I let go and felt the tears rolling down my cheeks, soaking into his sweat-stained under-armour.\n\nWe held each other for a few moments, just revelling in the fact that we were both alive; finally I pushed away, cupping his face in my hands and kissing him softly.\n\n\"I love you, husband.\"\n\n\"And I you, wife.\" He untangled his hand from my hair and tried to settle me into his lap; he groaned softly as his injured shoulder protested.\n\n\"What happened here?\" I pulled away from him and reached for the bandages; he slapped my hands away and tried to pull me closer again, ignoring the pain. \"Maker, where's Anders?\" I turned to locate the healer, but Alistair clamped his hand over my mouth before I could call out.\n\n\"It's fine. I lost my shield, and a hurlock got a lucky strike in. It will be fine. Anders has much worse to deal with first, love.\"\n\nI scowled at him; it wasn't that I wanted Anders to stop dealing with life-threatening injuries, but Alistair couldn't hide the pain in his eyes from me, and I hated seeing him like that. I wracked my brain for some reasonable excuse to have the healer see to him first, but was saved by Trevian.\n\n\"Commander? We need you over here.\"\n\nAnders nodded at the dwarf and immediately came over, tutting in frustration at the gash across his shoulder as he peeled back the bandages. I could barely look; instead I pressed my face up against his other arm and slipped my hand into his tightly.\n\n\"Why didn't you call me?\" Anders scolded Alistair. \"You've lost a lot of blood, you great stubborn ox.\"\n\nAlistair snorted in amusement and I actually let out a half-hearted giggle as I felt the healing magic wash over him. When it was done, we both stood and Alistair wrapped both arms around me, kissing my forehead softly. \"Talk later?\" I nodded, somehow ashamed that he'd been able to sense my distress when he had other things he should be thinking about. He lifted my chin and rubbed my nose with his. I grinned reluctantly, and with one last squeeze, he went to talk to Trevian, Nathaniel, and Varel.\n\n\"Anders, need any help?\"\n\nI spent the next few hours scurrying around delivering healing potions, bandaging minor wounds that didn't need magic to heal, and helping wounded soldiers back to the barracks. Solona was recruited to magically incinerate the darkspawn corpses; her skill with fire was only mediocre, so she was completely depleted by the time that was finished despite a couple of Lyrium potions. Exhausted, she finally went to bed.\n\nTrevian, and a few other Legionnaires including Sigrun, used picks they produced from their belongings somewhere to dig trenches in the stone of the Deep Roads near the barrier door and then carefully buried the dwarves who'd died, also making a stone marker to honour Fargrim and the others who'd been lost beyond the door. They didn't hold a funeral and declined Varel's offer to include them in the ceremony that would eventually be held for the soldiers who had given their lives.\n\nWhen Alistair was finished giving orders and talking to Nate, the last job that needed to be done was to carry the soldier's bodies to the courtyard for funerals in the morning. Instead of helping, Alistair came over and scooped me into his arms, pulling me away from all of the death and horror of the battle. Initially I protested, between the embarrassment of being carried around, worry about his shoulder, and the desire to help, but Alistair ignored me and made his way carefully to our room. We had a long, hot bath together; I cried in his arms while he shuddered in mine. We made love slowly, and then collapsed together in bed to sleep.\n\nThe next day was difficult. Alistair made a speech about the sacrifices made by good men; I cried some more. And then pyres for the soldiers were lit; the dwarves excused themselves to their own drunken mourning, but the rest of us respectfully watched the pyres burn down.\n\nAedan returned halfway through the afternoon, horrified to learn what he had left for us when he went to Amaranthine, but relieved that we were alive. Leliana, who must have been even more worried than I had thought, went straight into Nathaniel's arms for a very public kiss.\n\n\"What now?\" Aedan finally asked, once the initial pleasantries had been finished and we'd been served dinner in the dining room. \"Can they get through that door?\"\n\nI shook my head, just as Trevian entered, replying, \"Not likely, Warden.\" The Legion commander, smelling of ale but looking remarkably sober, exchanged respectful nods with Alistair and then turned his attention to my brother. \"Orzammar's been protected by one just like that for generations. They'd have to dig tons of rock to get around the mechanism -- it's sunk deep into the walls all the way around. They've never gotten through one before.\"\n\n\"Wouldn't hurt to set up some arcane traps down there as a warning, just in case,\" Alistair replied. \"I wonder if Anders knows how.\"\n\n\"How did it go in Amaranthine?\" I asked, changing the subject.\n\nAedan filled us in; he'd made contact with the city guard, cleared the smugglers out of the various dens and secret passages throughout Amaranthine, and then, with the aid of some of Dworkin's explosives, collapsed the tunnels leading into the city so the Mother's forces wouldn't have easy access to the city later on.\n\nNathaniel sighed. \"And Esmerelle really was working with them?\"\n\nAedan nodded; Zevran handed over several sheets of parchment -- detailing payments the smugglers had made to the local Bann -- pilfered from the Bann's own estate, evidently. Nate handed them to Varel, turning his attention back to Aedan.\n\n\"Did you speak with my sister?\"\n\nAedan chuckled. \"Yes. She still hasn't forgiven me for that dress.\" I giggled, and Nate grinned. \"I don't think she'll be keen on it, but I'm sure you can convince her.\"\n\nI frowned. \"Keen on what?\"\n\nNathaniel replied, \"Well, given Esmerelle's illegal activities, and what you told me about her and the others forming a conspiracy to take over the Arling, I've been assuming I'll need to replace her as Bann sooner rather than later. I've spoken to Fergus, and he agrees. I've been searching through my father's papers and correspondence. So with this, I've assembled enough evidence; she'll be arrested, and I plan to make Delilah the Bann of Amaranthine.\"\n\n\"But isn't she...I mean, forgive me, but she married a commoner. She's pregnant! What will happen to Albert?\"\n\nNathaniel wrinkled his brow at me, puzzled. \"What do you mean? He'll be with her, of course. He can't be Bann without a royal decree raising him to the nobility, but nothing can stop her from claiming her noble blood. Her children will inherit.\"\n\n\"If I can be a Prince, she can be a Bann.\" Alistair's expression was sour as he spoke his title.\n\n\"I just...\" I looked around at the men staring at me in varying degrees of bemusement and confusion. \"Never mind.\"\n\nNate finally took pity on me. \"It's not exactly standard, I'll give you that. But they are legally married, and to be honest, his skills as a merchant will aid Delilah running the Arling. She's a pushover. Couldn't bargain for something to save her life. And she's happy with him. I wouldn't do anything to jeopardise that.\n\n\"Besides,\" he glanced at Leliana and blushed, \"he isn't the only commoner married to a noble.\"\n\nThe bard paled and looked away, expression tortured.\n\n\"Teagan's proposed to Kaitlyn, then?\" Alistair asked, and Leliana sent him a grateful smile as the conversation turned to the likelihood of a winter wedding, or whether the newly-raised Arl would wait for spring. I made a mental note to talk to Leliana about whatever that was, later.\n\nThe following day, the dwarves were still drunk; the soldiers began the difficult work of cleaning out the basement, including the tainted sections. Nate and Varel had gone down with them, though I warned them about the possibility of undead Avvar and demons. Nate asked Varel to write a letter to the Circle later requesting a mage knowledgeable about the undead and the Avvar to be sent to the Vigil -- it would be a permanent position, if things worked out.\n\nConrad arrived back at the Vigil with Rolan, Bel, and Wulf; he had two elven women in tow, though he seemed to be ignoring them as he looked wildly around the courtyard at the Vigil. The horses were practically foaming, and Samuel complained bitterly under his breath as he took the reins of the exhausted beasts and led them away. We'd felt him coming after breakfast, and so Alistair, Zev, Aedan, and I were waiting for him when he arrived.\n\n\"I thought there would be darkspawn? We saw smoke!\"\n\nIt took a few minutes to reassure the senior Warden and his group that we were safe, though he was saddened like the rest of us about the loss of life. He ruffled my hair with a grin when he learned about my part in the battle, and I swatted at him with an indignant squawk. Trust Conrad to lighten the mood. Convinced that everything was fine and the Vigil wasn't under attack, Rolan, Bel, and Wulf greeted us and then excused themselves to unpack.\n\nAs we spoke, the two Dalish elves stood behind Conrad, one watching with interest, her sandy blond hair short and reminiscent of Leliana's style, the other with impatience she didn't even bother to conceal, reminding me strongly of Morrigan. She had her arms crossed over her chest, an enormous scowl on her otherwise pretty face marring the intricate tattoo that swirled over her chin and forehead. Both women had the same tattoos, and while I didn't recognise the patterns, I did recognise the women.\n\nThe angry one was Velanna, and the other was her sister Seranni.\n\nI turned away quickly before my gaping could give me away; I knew Velanna's response to a 'shem' staring at her was likely to be swift and acerbic. In the game, you were never given much of a chance to talk to Seranni, though I recalled hearing she was nicer and more sociable than her sister; I still didn't want to make a bad first impression. Alistair noted my reaction and raised an eyebrow at me; I shook my head slightly, schooled my expression, and looked back at the two as Conrad introduced them and launched into an explanation of why they were at the Vigil.\n\n\"We got wind of the villagers planning to try to burn out the Dalish, like you warned us, but we got there too late.\" Velanna scoffed, muttering under her breath; Conrad rolled his eyes and continued, \"Fortunately no one was killed, but several of the clan's Hunters were injured and some of the aravels,\" he stumbled over the unfamiliar word, and Seranni nodded encouragingly, \"were damaged. Keeper Ilshae informed us that these two, and a handful of others, had left without permission to go and exact revenge.\"\n\nVelanna harrumphed loudly, turning her nose up; Seranni shot her a dirty look and then turned to Aedan with a tentative smile. \"Not all of us. Some of us were just trying to stop the others.\"\n\nAedan nodded his understanding, and the petite elf relaxed slightly.\n\n\"So we went after them -- we knew there were darkspawn about -- and found the camp being attacked. One of them spoke! I know you warned us about that, but I still...\" he trailed off, shuddered, and then shook his head as if to clear it. \"Anyway, the creature is dead, as are several of the other elves. The survivors decided to go back to their clan; Seranni asked us to find Velanna, who'd been off on her own when they were attacked, so we did.\"\n\nAedan gave Conrad a puzzled look. \"And you brought them back with you, because...?\"\n\nThe Warden flushed. \"Right. Well, I was trying to assure them that their clan would be safe, and I thought it might help if they were able to talk with the Arl, you know, maybe make a formal alliance or something. And then, well...\" He gestured at Seranni helplessly, an expression I couldn't interpret on his face. He ran his fingers through his copper hair restlessly as we all turned our attention to the elf.\n\nShe said nothing, just looked down, embarrassed, face flushing under the scrutiny. I had no idea what point he was trying to get across, so I stared vaguely trying to figure it out. Something was bothering me, though I couldn't pinpoint what. She was somewhat unkempt, smudges of dirt marring her pretty face, but I was more than used to that sort of thing -- a year of sleeping in tents with limited facilities while fighting darkspawn will inure you to that fairly quickly. Her hair was somewhat dull, and strangely thin in places, her complexion much paler than her sister's healthy tan.\n\nJust as my observations caught up with me, Velanna snorted with disgust and, in a tone dripping with acid, said, \"My sister has been tainted by the darkspawn. This shem,\" Seranni practically growled at her, but she continued, unfazed, \"tells us that the Grey Wardens have a cure.\"\n\nI took a deep breath, reeling from the news. I finally understood what had been bothering me; the sensation of the taint, different than what a Warden felt like, was emanating from the unfortunate elf. She wasn't far gone yet, but obviously her hair had started falling out, and her ashen skin was the first phase in the transformation to the melted-wax look all darkspawn shared.\n\nSeranni turned on her sister, hands on her hips, scowling. \"Velanna, you know full well the Warden said they 'might' be able to help me. He didn't promise anything. And with the way you're acting, I wouldn't be surprised if they were reluctant to help even if they could!\"\n\nSomewhat chastened, Velanna turned away, shoulders slumped. Her cheeks flushed and her chin quivered just slightly; it felt like possibly the first glimpse of the real person she was underneath all that excess anger. She's just a person scared she's going to lose her sister. I tried to think about how I'd feel if Aedan were the one dying, and suddenly had a lot more compassion.\n\nIt didn't change the fact that what they were hoping for, a miracle cure, wasn't what we had to offer. And I wasn't even sure if putting Seranni through the Joining was a good idea. If she died, Velanna would blame us, and I had no idea if the younger elf even had any skills that would be of use. I didn't think I'd ever be as pragmatic as some of the Wardens seemed to be, from what I'd read, but surely recruiting someone who couldn't really help at all wasn't all that good an idea.\n\nAs all those thoughts worked their way through my mind, I suddenly realised that Aedan, Alistair, Zev, and Conrad were all staring at me. Did I just use my outside voice to think all of that? But no, Seranni isn't staring at me...And then it occurred to me why. They were wondering if the game covered anything like this. I shrugged slightly and tilted my head, gesturing to Aedan that I thought we should talk privately.\n\nAedan cleared his throat and looked back at Seranni. \"We can...uh, talk about that in a little while. It looks like Conrad had you all galloping the whole way here; you must be exhausted.\" He turned and motioned to a nearby soldier, who happened to be Maverlies. \"Could you please take these two ladies inside, find Varel and have them assigned quarters, and have baths drawn up?\" She nodded, and he turned back to Seranni. \"Ask one of the servants to bring you to the dining hall when you're done, and we can talk.\"\n\nVelanna looked about to object, loudly, but Seranni thanked Aedan, then turned, grabbed her arm, and dragged the irate elf inside, resolutely following Maverlies. We all watched them go, before Zevran surreptitiously followed them after exchanging glances with Aedan. My brother herded Conrad, Alistair, and I inside, finding a small sitting room somewhere and closing the door. I sank into a chair, still shaken. I looked up to find the other three also seated, and back to staring at me.",
        "I sighed. \"I have no idea what will happen if you offer Seranni the Joining. In the game, she was kidnapped by the talking darkspawn and became a ghoul, following the Architect around. Maybe helping him, although she also aided the Wardens when we were captured. It wasn't clear what became of her, but presumably she went down into the Deep Roads either with the Architect or on her own, depending.\n\n\"Velanna, on the other hand, would survive. In the game her sister was a ghoul, and she became a Warden. But you saw how she is to start with...she was unpleasant. She's had bad experiences.\"\n\nAedan turned to Conrad. \"Did you happen to spend any time with Seranni? Can she even fight?\"\n\nConrad winced. \"She's young,\" he replied, which was pretty much answer enough in itself. \"She might be useful though -- she mentioned she's a skilled herbalist. She might be able to help with potions and things.\"\n\nAedan looked thoughtful. \"That could be useful; Anders could use the help, and we know we will eventually lose him anyway.\"\n\nI'd forgotten that I'd told them about Anders needing to go to Kirkwall.\n\nI hesitated, then said what I was sure was on everyone's mind: \"What if she doesn't make it?\"\n\nNo one answered, so I kept talking. \"Velanna already hates humans. She got herself exiled just for the chance at revenge. If her sister dies, she'll do something stupid.\"\n\n\"Rock and a hard place,\" Alistair muttered.\n\nAedan nodded. \"If she thinks we might have a cure, and don't give it to them, we're in the same boat.\"\n\n\"Next question,\" Conrad added, \"is do we offer the Joining to Velanna?\"\n\nAlistair looked startled. \"Why would we do that? Why would she do that?\"\n\n\"To stay with her sister. Besides, she may have nowhere else to go.\" I thought about the game, remembering that Velanna disappeared into the Deep Roads one day looking for Seranni. \"The bigger issue is what happens if we do and Seranni doesn't survive. An angry Velanna who's also a Warden doesn't really appeal.\"\n\n\"I suspect she will survive, though. If she can survive becoming a ghoul without losing her mind, the Joining seems like it would be less...harrowing,\" Aedan postulated.\n\nWe all stared at each other silently for a while, thinking furiously. Finally Conrad stirred.\n\n\"What if...look, this is a weird idea for a Warden, I know, but what if we tell them the truth and let them choose? I don't think they'd spill our secrets -- Seranni is dying, and Velanna's got bigger problems to deal with. Even if they say no, our risk is minimal. But if they make the choice, then we aren't to blame if Seranni doesn't make it.\"\n\nAedan and Alistair exchanged glances, and then finally nodded.\n\n\"Can I tell them?\" I requested. \"Nathaniel's been telling me I have to be prepared to give bad news, like talk to the families of soldiers who died, for example. It'll be good practice. And maybe, girl-to-girl, it won't be so intimidating.\"\n\nAedan stared at me, eyebrows raised, as if doubting my sincerity. \"Do you know something about them you haven't told us?\"\n\n\"What? No. I just think...maybe they'll take it better from a woman, and someone who isn't a Warden.\"\n\n\"Take Wulf with you,\" Conrad advised. \"Velanna seemed to be less offended by him than the rest of us.\"\n\nAedan nodded in agreement, and Alistair just squeezed my hand in sympathy.\n\n\"On another note...Sigrun?\" Aedan turned to Alistair and me.\n\nI shrugged. \"You know how I feel.\"\n\nAlistair responded at exactly the same moment. \"Take her.\" He looked at me and grinned.\n\n\"So she's good?\"\n\n\"Not as good as you or Zev, but she's talented with a blade. And keen, eager, has seemingly endless energy...takes orders well, but not blindly. She'll speak up if she's got a better idea or she's ordered to do something stupid. She'd be a good counter to Velanna, from the sounds of things. The eternal optimist. And knowledgeable about poisons -- she learned from that Legion nut.\" He paused for a minute, grimacing. \"...Maker keep him. I don't mean to speak ill of the dead.\"\n\nI suppressed a wry chuckle; that Legionnaire had been nuts, but we'd been lucky to have him. He hadn't been in the shield wall, but had been killed by darkspawn during the fight none-the-less. I was sure he'd be missed by the Legion.\n\n\"Alright, so if that's it, why don't you go settle in, Conrad? And we'll leave Velanna and Seranni to you, Sierra.\"\n\nI nodded. Alistair gave me a sweet kiss, and then I went in search of Wulf. I found the former werewolf eating his bodyweight in food in the dining room. I asked him to come with me, and with a nod, he finished the food on his plate and followed me.\n\nI wondered briefly where Varel had put Velanna and Seranni, but was saved having to go on an extensive search by the arrival of both women in the main hall as Wulf and I wandered through.\n\n\"Andaran atish'an, Velanna and Seranni.\" I carefully pronounced the Elven greeting, giving the two elves a formal Grey Warden-type bow.\n\nWulf bowed as well, though stayed characteristically silent two steps behind me and to my left. Seranni returned my greeting with a smile, but Velanna just raised one irritated eyebrow.\n\nI sighed. \"If you two don't mind, could we talk?\""
    ],
    "authorname": "ElyssaCousland",
    "tags": [
        "fantasy",
        "fanfiction",
        "dragon age",
        "modern girl in thedas",
        "romance"
    ],
    "category": "Celebrities & Fan Fiction",
    "url": "https://www.literotica.com/s/there-and-back-again-ch-123-124"
}
{
    "title": "Lysistrata Redux",
    "pages": [
        "<center> A short, lighthearted bit of fluff for the 2019 Halloween competition. Please enjoy!\n\n+</center>\n\n\"So how in hell do these things stay on?\" I demanded.\n\nI held the cups up against my chest, over my blouse. I had to admit that they were beautiful - sort of a gold-on-royal-blue brocade. \n\nHe'd presented me with the outfit when he got home from work five minutes ago. \n\nOK, I know, not many wives would trust their husbands with choosing their Halloween costumes, especially not for a big company executive party. Hank was however different. The decor of his student apartment had impressed the heck out of me when I first saw it. His grooming was perfect and his flair for clothing impressed even my gay friends. He had, in other words, superlative taste, something so very odd in the engineering world.\n\nAnd I'd been tied up of late with some particularly time-consuming litigation. My initial hopes and plans had kept being pushed to the right.\n\nEventually, Hank had suggested that he wouldn't mind helping me and I had gratefully accepted.\n\nThe costume in my hands was supposed to be that of a harem girl, I suppose. There wasn't all that much to it, but the circles he moved in were pretty, oh, call it relaxed. Straight nudity would be frowned on, but risqu\u00e9 was accepted without qualms. Think of Oscar Night gowns -- the question is how close to the edge can you go?\n\nThis thing was definitely risqu\u00e9, I could tell. But also pretty.\n\nVery pretty.\n\nAnd, in all humility, I knew that, even at 31, I still had the figure to show of the costume properly. I worked hard at the gym to keep it that way.\n\nThe two matching bra cups were matched by a thong-style bottom of the same brocade, over which fitted an essentially transparent pair of blue harem pants. A matching pair of embroidered flats completed the ensemble.\n\nSome women might have taken it wrong, being expected to wear something that skimpy in public, but I felt - among other things - a warm, confident love, knowing that my devoted man still thought me attractive enough after eight years of marriage to show me off in such a tempting outfit.\n\n\"Seriously,\" I said. \"How? You know I hate double-sided tape, hon.\"\n\nHis hand came up holding three lengths of gold-colored chain, so fine as to be barely visible. There was a small clasp on the end of each chain.\n\nI took one and examined it. It was very delicate, very feminine and I could see it would look very good with the cups, but I had some serious doubts it would actually hold. I could see myself losing a cup part-way through the evening and said so.\n\n\"There's more to it that just those,\" he grinned. \"Skin out of that business suit, Marnie. It'll be easier to show you than to tell you.\" He leaned back against the wall, smiling.\n\n\"Perv,\" I said.\n\nHe grinned. \"How well you know me, dear!\"\n\nFine, whatever. I took off my blouse, laid it over the back of a chair, then unhooked my bra and laid it over the blouse. His eyes followed me, of course.\n\nMen - so predictable, right?\n\nIn Hank's case, I liked it.\n\nI picked up one of the cups. They were thicker than the material in my bras, not quite stiff but holding their shape very well even in my hands. The insides were lined with a soft black satin, something like that -- soft under my fingertips. 'Cushy.' Is that a word? They were cushy.\n\nI shivered at the thought of it next to my boobs.\n\nI realized that the extra thickness would add something like a cup size to the Girls. Not that I objected. I'm happy with what I have , but let's face it, what girl wouldn't like a little more wow in the prow?\n\n\"OK, Einstein. What's next?\"\n\nHe shrugged off the wall and stepped over to me. He leaned down. Our lips met and my heart sped up, just as it always did. His tongue swept slowly along my teeth, then stretched out to tease the tip of my own.\n\nI felt his hands sweep over my breasts, felt my nipples caught between his thumbs and fingers. This was hardly 'getting ready for a party'. But neither was it entirely unwelcome. Hank was the best lover I'd ever known. OK, let me be honest, the only one, for defying societal norms and the determined efforts of at least three university boyfriends, I'd come a virgin to Hank's -- our - marriage bed. And I don't regret that, for he was a patient, devoted and skillful lover, one who had given me pleasure I'd never believed possible. \n\nHe also has a fair level of kink to him. He never pushed, never insisted, but he'd taken me into some, shall we say, unexpected territory. Some of it I actually found I enjoyed. Who knew?\n\nHank also had a wicked - and I do mean wicked - sense of humour. I'd had to slap him down any number of times for his practical jokes - especially in the company of Tom and Eduardo, his co-workers, best friends and engineering-school buddies. Let me tell you, those three were dangerous when unsupervised. By Tom's own telling, one time it was only them having worn rubber gloves during one jape that kept the campus cops from handing their heads to the dean. \n\nIt was true of course that the three were gentlemen and reasonably housebroken when their women had them in tow. Petra, Carla and I had met through the boys and had become good friends. Petra was a chemist working as a sales rep for a drug firm and Carla worked in IT. One of the reasons I was looking forward to this evening was a chance to spend some time with them. It had been a while. The chance to schmooze with my hubby's bosses was another good reason, of course. A skimpy outfit on a hot broad -- me, of course -- wouldn't hurt his chances for a raise.\n\nHank examined the one cup, pointed to a tiny, inconspicuous 'R' embroidered inside. \n\n\"Right,\" he pronounced. \"Here, give me your hand.\"\n\nHis long fingers guided my own to the tip of the cup. Hidden under the fabric was a hardness, a small cone or disc made of something i couldn't identify -- a solid disc maybe the size of a silver dollar, hard but with slightly springy edges. It certainly didn't show through the material.\n\n\"Feel that?\" he asked.\n\n\"Mmm-hmm.\"\n\n\"Squeeze it a little.\"\n\nThe edge of the disc proved flexible enough that my squeezing fingers could easily close a bit.\n\nHank pointed inside. \n\n\"Put your finger inside,\" he suggested, pointing with a finger. \"Right down in here.\"\n\nAn exploring fingertip soon discovered a nipple-size hole or cavity at the far end.\n\n\"Squeeze again,\" he suggested, \"then release.\"\n\nI gasped just a little as I felt a circle of firm but gentle jaws grasp my fingertip. I gave a small tug; my finger was held by no means painfully, but quite firmly.\n\nI looked up at him, a bit of a frown on my face.\n\n\"OK, Hank, let's get real. I'm supposed to spend an evening with these things...\" and here I waved the cups at him, \"...hanging off my nipples?\"\n\nI'll admit that I was a bit worried. I had so been looking forward to this evening. If his adolescent fantasies ruined my time out...\n\n\"It's not like dead weight hanging from them, Mandy,\" he said, his voice placating. \"Your boobs actually support what little weight there is; the clips just keep them from sliding off. The chains will help, too. The outfit is actually supposed to be quite comfortable - and without glue or tape.\n\n\"I could have had the place that made them use straps or thicker chains, but I thought this would be prettier, more exotic.\"\n\nI saw his point. Moreover, unless I intended to pay a flying visit to Walmart (eeew!), I had best at least try them on.\n\nI bent forward at the waist, leaving my breasts hanging beneath me. I brought the right-hand cup up, eased my boob into it. It fit surprisingly well, but I then remembered it'd been Hank who had bought it. The boy knew my sizes and paid attention to details like that.\n\nHolding it in place with one hand, I squeezed the outside of the hidden disc inside the cloth. When I released my squeeze, I could feel the gentle jaws close firmly on my nipple.\n\nI kept my fingers in place, half-expecting it to pinch or hurt. To my relief, it didn't. Indeed, I found the soft pressure was almost comforting. I know, I know, that sounds weird, but 'comforting' is how I felt. Your mileage may vary, of course.\n\nCertainly, the whole device was comfortable. When I stood up, I saw the brocaded cup conformed to my normal shape almost perfectly. Moreover, I could see no sign of it sagging or being likely to fall off.\n\nAnd, I realized, the constant gentle pressure on my nipples for the entire evening would be a turn-on.\n\nI quickly bent, put the left cup on and examined myself in a mirror. \n\n\"Put the chains on for me, will you, hon?\" I asked. Hank's fingers worked the small clips, one after another, made some adjustments before he stepped back. \n\nLooking at myself in the mirror, I shook a little, bounced -- the cups stayed put just fine.\n\nI had to admit that they looked good. They looked exotic, expensive and sexy as all get out -- just what an 'adult' Halloween costume should be.\n\nI quickly pulled off skirt, pantyhose and panties, this time letting them just fall to the floor beside me.\n\nI wasn't surprised to find that the bottom fit perfectly, too. The barely-there harem pants, of course, merely highlighted what I thought were still remarkably good-looking legs.\n\nI twirled in front of the mirror. I liked what I saw.\n\nFrom the look on his face and a subtle rearrangement of the material of his suit trousers, so did Hank.\n\n\"Oh,\" he said, \"almost forgot.\" He handed me a square of the same material as the harem pants, about the size of a large slice of bread. A fine gold chain extended from one corner, a matching clip on its end. Hank stepped behind me, reached around my head and fastened the veil over my nose and mouth before stepping back.\n\n\"Like it?\" he asked.\n\nI looked up at his eyes reflected in the mirror in front of me. They sparkled -- that mix of love, mischief and imagination I knew so well in my man.\n\nI turned, flowed into his arms. \"It's lovely,\" I said. \"Thank you, darling man. What will you be wearing?\"\n\nThrough his shirt, I could feel his chest muscles move against my cheek as he chuckled. \n\n\"Does it matter, Mandy? Really? Nobody's going to be looking at me with you three there.\"\n\nI stepped back, again looked him in the eyes. My forefinger came up, poked him in his chest.\n\n\"Henry Stedman! Don't you dare tell me Petra and Carla are wearing the same thing?\"\n\n\"Mandy...\"\n\n\"Because I wouldn't put it past you three to set us up like that!\"\n\nHis hands came up defensively. \"Whoa! Yes, I'll admit that there's been some 'coordination' between me, Ed and Tom. And, yes, the costumes are the basically the same, but the colors are all different. You three will look like a set or coordinated trio.\n\n\"Trust me, Mandy. The three of you will like how you look together. You'll be outstanding, trust me.\"\n\nHe gave me his 'sincere' smile. Sometimes, I'd learned, that meant he was sincere. It wasn't as if I had much choice anyway. The party was tonight.\n\n\"OK, Hank, OK. I need to get showered and such.\"\n\n\"Leave in an hour?\"\n\n\"OK.\"\n\n\"Mandy?\"\n\nI turned to him, waited.\n\n\"If I might suggest, bold makeup for tonight. Your call, but...\"\n\n\"I agree, handsome. Gotcha.\"\n\n+\n\nAn hour was scarcely enough time, but donning my costume wasn't going to take long. I'd washed my hair at the gym this morning, so I could wear a cap to keep it dry in the shower tonight. I shaved here and there and brushed my hair. \n\nAs I did so, I contemplated the bits and pieces of costume lying on the bed, I realized how well Hank had chosen the costume, for the gold of the brocade perfectly matched my hair color. I decided to keep my hair in sort of an elaborate pony-tail, something simple enough to avoid drawing attention away from the costume itself.\n\nAnd from me inside it.\n\nI took Hank's advice and went bold on the makeup, especially eye makeup. When I clipped on the veil over my face, my eyes were spectacularly bright, alluring.\n\nPerfect.\n\nI had a perfume I rarely wore, something labeled 'Turkish Nights'. Normally I found it too spicy, too overpowering, but tonight I thought it might work. I put a little behind each ear, a tiny drop on the inside of each wrist, and another between the Girls. \n\nI had 10 minutes to spare to put on the outfit. It took two.\n\nI spun myself in front of the full-length mirror in the bedroom.\n\nThe bottom was hard to describe -- more than a G-string, less than a thong. In any case, it covered the essentials up front and left little to the imagination in behind. The harem pants over them drifted down like sea mist.\n\nI slid on the flats, took one last look at myself in the mirror. Hot. I loaded a minimal purse and opened the bedroom door to see how Hank had shaped up in the spare room.\n\nHe was dressed as some sort of soldier or guard, with a simple pointed helmet which left his face bare, a long shirt of faux mail armor, some sort of simple knee-length kilt and high-laced sandals. A curved sword hung at one side and a simple pouch -- what a Scot might think of as a sporran -- hung in front of him. A short cloak hung over his back. \n\nHe looked infinitely masculine, amazingly handsome -- my Hank. Frankly, my mouth almost watered. \n\n\"Wow!\" I breathed. \"That's amazing.\"\n\nIt was, too. Did I mention Hank had a perfect sense of style? OK, check this out -- his costume matched mine across the board. His kilt, his sword belt and scabbard, whatever he was wearing under his armor -- they all were the same hue, the same color as my brocade, but of a somewhat darker, more masculine shade.\n\nLooking at the two of us, there was absolutely no doubt, despite the totally different outfits, that we belonged together.\n\n\"You're awesome, Hank!\" I said softly. \"You are so darned good at this.\"\n\n\"Glad you like it, hon. Just wait, the evening's full of surprises.\"\n\nIt was a bit cool outside and we could in any case hardly drive around in what we were wearing. Hank helped me into a long coat and found another for himself before opening the garage door.\n\n+\n\nWhen we got to the office building, Hank parked in the basement garage and suggested we leave our coats in the car.\n\n\"There's nobody else here and the elevator takes us right up to the top floor,\" he smiled, locking the car door and pocketing the key.\n\nI saw what Hank had meant about the three girls making a matched set when the elevator door opened and we caught up with them at the table reserved for us. \n\nBoth girls were wearing the same costume as me -- essentially strapless cups, tiny thong, harem pants and flats. Petra's however costume was basically green to match her red hair and Carla's was silver-on-black, emphasizing and matching her dark skin perfectly. Tom and Eduardo were wearing essentially the same outfits as Hank, with the colors altered to suit those of their own wives.\n\nI should've been suspicious, right?\n\nBut we three girls did indeed make an outstanding trio. Add the boys into the mix and I was hoping that there was a competition for best costumes. The girls smiled at each other devilishly. It was shaping up to be a fun night.\n\nI asked Hank to order me a drink then stood up. Heads turned to follow Carla, Petra and I as we made our way across the floor to the Ladies' to check our makeup.\n\nYes, we were checking out the other people there. OK, the other women there. Of course. There were some really good costumes there and some dreadful ones. And yes, I reflected, some of them had indeed hit the Big Box for their costumes. So sad.\n\nThere was also a wide degree of 'risqu\u00e9'. Although some had chosen fairly staid costumes, there were others -- particularly other women -- showing more skin. Yes, I know, compared to what we three were wearing, that might be hard to believe, but there were. some further along that track. Several women, I was sure, were wearing little more than a very good paint job.\n\nSomething to check out for later, I thought to myself.\n\n\"It looks like those three have finally got their acts together,\" Carla said, emerging from a stall. \"When Eddie showed me this, I was ready to flip.\"\n\n\"No kidding,\" Petra replied. She settled her harem pants higher on her hips as she spoke. \"But these do look good.\"\n\n\"Well, points to them,\" I said. \"Truly hot outfits, ladies.\"\n\nThe two smiled broadly in reply. I realized that all three of us were, in a sense, at the top of our game -- old enough to have some solid confidence in ourselves while still young enough and cute enough to pull off costumes like this.\n\nThe three boys were waiting when we returned to the table. They too were about at their prime, I thought.\n\n\"How long did it take you three to set this up?\" I asked as I sipped my drink.\n\n\"Long enough,\" Tom replied. \"What was really hard was finding the right place to make them.\"\n\n\"Where'd you go?\" Carla asked. \n\n\"Trade secret.\"\n\n\"Please?\" she asked Eduardo, laying her hand on his forearm.\n\nEddie looked at the other two men. \n\n\"Nope,\" he grinned, shaking his head. \"It's a guy thing.\"\n\nLike it matters,&hairsp; I thought.\n\n\"Well, they're outstanding, boys,\" I said. \"Thank you so much -- this is just thrilling.\"\n\nThe three grinned a little as the band started.\n\nOne of the things about Corporate parties, I knew, was that they didn't skimp on important details. In this case, there was a live band. A good one.\n\nThey opened with a waltz for some reason. Hank touched my shoulder. \"Care to dance?\" he asked. He knew what the answer would be. I smiled, rose and took his hand. The others came along.\n\nWe were the first three pairs on the dance floor, but others followed, including Hank's boss, and a couple of VPs. Points for leading,&hairsp; I thought.\n\nNow, I love dancing. It's vertical seduction, as close to sex as you can have with your clothes on. Hank knows it and -- no surprise -- is a superlative dancer himself.\n\nWe moved around the floor, smiling at each other and the various couples we passed. I felt truly happy, like a load of work-related frets had somehow been lifted from my shoulders. I was with the man I loved, in good company. It was promising to be a fine evening.\n\nTruth be told, I was getting a bit turned on. I normally do when I'm dancing with Hank. But this seemed to be special, something more than the norm. It seemed like I could feel every step we took throughout my body. My nipples seemed electrically charged, as if performing their own dance. I could feel the music in my pussy.\n\nIt was, in other words, a really good &hairsp; dance.\n\nThe waiters started serving meals and, by unspoken agreement, we moved off the dance floor and back to our seats.\n\nIt was clear that Carla and Petra were enjoying themselves; they looked as flushed as I felt. The three men were for some reason grinning like a trio of adolescents.\n\nIn retrospect, knowing them, I should have been more suspicious.\n\nIn retrospect.\n\nThe meal was excellent -- surf and turf all around and table chatter was minimal under the sound of a roomful of people enjoying their food.\n\nPicking over the last lobster leg, I realized that my physical excitement hadn't died away. Yes, the food was excellent, but why was I still turned on?\n\nIt was Petra who broke the code. She suddenly grabbed her boobs, held them for a minute and then hissed at Tom beside her: \"You asshole! What have you three been up to?\"\n\nThe three men broke out in a massive explosion of laughter. Eduardo held up his hand and got a high five from the other two.\n\n\"Owned!\" Tom crowed. I realized that something was going on, something that these three jokers had set up.\n\nProbably something involving these costumes.\n\nThe boys, as one, reached into their pouches. Each pulled out a small fob, not much bigger than a car key. Careful not to bring them within the grasp of any of the women, the laughing men started prodding the controls.",
        "Hank's eyes were on mine as his thumb slid over the controls. I felt a surge in vibration inside the two blue-and-gold cups clinging to my nipples and a matching vibration inside my thong.\n\nI knew then what I had been feeling, just the slightest tease by some hidden devices. \n\nEngineers...\n\n\"What the actual hell, Hank?\" I hissed at him.\n\n\"Be nice, Mandy,\" he grinned back. \"Be nice or you can entertain the crowd.\" He thumbed a and my world darned near collapsed. Yes, I'd used a vibrator and yes, I liked it, but when it was unexpected, in the middle of a crowd and when dressed in Not Bloody Much -- well, that was another thing entirely.\n\nI felt my physical arousal boom upwards. Looking around the table, I saw Petra's eyes almost cross. Carla's head was down and I could see her breathing rapidly.\n\n\"Give me that, you idiot!\" I whispered. His only reply was to smile more broadly, move his hand away from me and sweep the stimulation up and down.\n\nI realized that I was more-or-less at his mercy. For the moment. The bastard would however have to sleep sometime.\n\nAfter the longest minute or six in my life, the three boys nodded at each other and slowed down the pace. I could see the other girls take a deep breath, sag back in their chairs.\n\n\"You jerk!\" Petra said to her husband in a stage whisper. \"I will so get you for this.\"\n\n\"No doubt,\" he smiled, but Petra's face was immediately after hidden by her mane of red hair as she dropped her face towards her lap. I could see her shoulders shake with an avalanche of stimulation. In a few seconds, Tom must have stopped, for her head came up, a look of fury on her face.\n\n\"Want to leave, Mandy?\" Hank asked pleasantly. He flipped the stimulation up and down, just once.\n\n\"Hank, how in the hell did you set this up?\" I asked, trying to deflect his evil intentions.\n\n\"New spin on old tech,\" he replied. \"Battery-powered piezoelectric crystal vibrators.\"\n\n\"This ain't funny, buster. This is really embarrassing.\"\n\n\"Doesn't have to be. Mandy. It could be a lot of fun -- if you let it.\"\n\nWas this another one of his kinky challenges? Well, yes, obviously. And it occurred to me, some of those had gone well -- really well -- even though they had started out by pushing my envelope way, way out.\n\n\"Here's something to consider,\" he said. \"The sewing we had done at a seamstress. All the electronic bits were made by the firm.\"\n\n\"So?\" I was still mightily pissed. \n\n\"So, do you really think Tom, Ed and I are the only ones with access to the gizmo? \"\n\nI thought on that for a second, then it hit me. I looked around at the other partygoers. Without looking away from the other women, I spoke. \"Who?\"\n\n\"That would be telling,\" he replied softly. \"Let's just say that HR wasn't even told about these things, though.\"\n\nI felt a quick surge of buzzing and squirmed. As quickly as it started, it stopped. \n\n\"Maggie Hollopher?\" I guessed. The CEO's trophy bride was obviously wearing a custom-made outfit -- a female pirate as it happens. She also, I noted with some interest, seemed really, really hot. Beads of perspiration stood out on her forehead. And she seemed to be squirming a little.\n\n\"Ain't telling.\"\n\n\"Cindy?\" The wife of Hank's department chief was arrayed like some pagan Celtic princess. She too seemed to be fidgeting. \n\n\"I couldn't say.\"\n\n\"Bastard!\" I said. My anger was being gradually replaced by my normal good humor and a schadenfreude&hairsp; amusement at watching other victims. I was now just really, really annoyed.\n\nHank leaned in close to my ear. \"'Bastard', am I?\" he whispered. \n\nMy world closed in on me. My nipples and my pussy took control. From somewhere, I heard somebody moaning. Then I saw the big, big eyes of Carla and Petra staring across the table and realized it was me.\n\n\"Stop it!\" I hissed. For once, the idiot listened and I could pry my hands from off the edge of the table.\n\nI took a deep, deep breath. \"The three of us,\" I announced loudly, \"are going to powder our noses.\" I looked at Tom, Eduardo and Hank, one at a time. My voice was very serious as I spoke. \"If any of you three makes us trip while we're walking, you are dead meat, individually and collectively.\"\n\nI didn't wait for a response, just rose and headed for the Ladies'. Petra followed me and Carla a moment later. I felt like stamping my feet as I walked, but knew the image it would present in this outfit.\n\nAs we walked between the other tables, I felt some mild vibes on my boobs and a lingering, low-level tingle down below, but nothing I couldn't handle. \n\nIn the short term, of course. \n\n\"Those assholes!\"&hairsp; Petra hissed once we banged into the Ladies'. \"Those absolute fuckers!\"\n\nI'd rarely seen Petra so angry. Carla on the other hand seemed much more composed, more so than even myself.\n\n\"So, what are we going to do?\" she said softly. \"It's not like we can take anything off.\" Removing the garments would leave us wearing nothing but harem pants and flats. I suddenly realized that my only other clothes were in the car. \n\nAnd Hank had the key.\n\n\"No.\" \n\n\"No.\"\n\n\"Anyway,\" the dark girl said with a very slight smile, \"it hasn't all been exactly bad,&hairsp; has it? I mean, not entirely?\"\n\nIn spite of ourselves, we had to give a small giggle -- a small one. Our boys were incorrigible and this was just about typical.\n\nThat didn't mean that the three of us weren't still fuming.\n\nThen I mentioned what Hank had let slip about other women here maybe wearing the same diabolical sort of costume.\n\n\"Who?\" they asked in unison, their eyes wide.\n\n\"I don't...\" I had to stop, for all three vibrators had gone off -- just for an instant, but hard. I took a very deep breath, tried to control myself.\n\nIt stopped. A reminder? A summons?\n\nLooking up, I saw Petra and Carla were also trying to regain their composure. Obviously, they'd been triggered, too.\n\n\"I don't know who else,\" I continued. \"Hank did say that nobody in HR was in on it.\"\n\nThe door to the Ladies' opened. A woman I didn't recognize came in, walking very quickly. She headed for a stall. The look on her face was one of extreme exasperation. She was clearly having trouble walking. As the stall door closed, the three of us looked at each other, nodded.\n\nAnother one.\n\nThe vibrations in my cups began again, slowly, but rising. We didn't have long to talk.\n\n\"You know,\" Carla said, \"it's not as bad when you know you're not the only one.\"\n\nPetra and I looked at her.\n\n\"It isn't, is it? I mean, we're all in the same boat. Those idiots are going to have their fun tonight, but we're in on the secret, right? We know what's happening to the other women -- and they won't.\"\n\nThere was a low sob from the stall. \n\n\"Well,\" I said, \"unless we strip off and stomp out, I don't think we have another option. You're probably right, Carla.\"\n\nMeanwhile, the rising level of vibration was soon going to keep me from being able walk in a straight line. In desperation, I made a proposal. They both looked shocked, shook their heads.\n\n\"Think on it,\" I said, rising, \"Right now, I gotta go before I collapse and start moaning right here on the floor.\" \n\nAs if to echo me, the woman inside the stall moaned softly.\n\nThe other girls, their faces flushed, followed me back to the table where the three men sat, grinning.\n\n\"Solve any of the world's problems?\" Eddie asked.\n\n\"So, what is it, what exactly, that you three want?\" Petra asked as she sat down.\n\n\"Just watch you have some fun,\" Tom replied. The lithe redhead flinched for an instant as her husband flipped the sensation up and back down.\n\nHe was followed by both the other men. My nipples were in sudden overdrive and the gizmo over my pussy was humming like a mad thing. I knew I would be forced into a very loud orgasm if this continued.\n\nThe waiter had, in our absence, cleared the table. The lights had been dimmed and the band had started to play soft, romantic music. \n\n\"Like to dance, hon?\" Hank asked, his eyes sparkling.\n\nIt was now or never.\n\nI looked the other girls in the eyes, raised my eyebrows, half-rose and then quickly slid under the table. I hoped nobody outside our group had noticed.\n\n\"Hey!\" came Hank's voice from above. I ignored him, my hand sliding up inside his costume kilt as quickly as I could. He tried to back away, but I had a firm grip on his Twins and he wasn't going anywhere until I let go.\n\nI heard laughter from the other two men, pushed it out of my mind. I doubted their wives would let them spend much time looking under the table.\n\nHolding the Boys in a firm grip, I used my other hand to flip the kilt up and off him, exposing a length already half-hard.\n\nI stroked it gently while licking his inner thighs. I switched to licking his organ, bottom to top, in long, slow strokes, giving a quick little tongue-tip flick over his slit every time I reached the top. The warm, fleshy staff under my hand pulsed, rapidly grew more rigid. From the way it twitched, I could tell that Hank was enjoying himself, clearly pleased with my playing along with his joke. The vibrators in my costume began to hum very gently, as if in encouragement.\n\nThat would change, I knew.\n\nI took his rapidly-growing crown into my mouth, began to twirl my tongue around it at the same time I gently massaged his eggs with my fingertips. \n\nI gently sucked him into my mouth, swept the helmet with my tongue. It swelled, grew harder as my fingernails teased lightly behind his balls. \n\nHis hand stroked my hair softly. I smiled to myself. Just you wait, buddy!\n\nTo my delight, one of my feet got nudged aside as Carla slid in beside me. She grinned at me. I took one hand off Hank's Boys and gave her a thumbs-up. Eddie cooperatively spread his legs to make room for her and she knelt between them, flipping his kilt up as she did.\n\nTo my surprise, Eddie was wearing underpants. I was surprised; Hank hadn't. \n\nI began to take Hank deeper into my mouth, watching as Carla's hands took Eddie's briefs by the waistband and tugged. No doubt delighted, her husband lifted his bum off the chair and the garment was swiftly down around his ankles and discarded.\n\nCarla, as the saying goes, bent to her task. Bright white teeth nibbled gently on Eduardo's sizeable tool. Seizing his foreskin delicately with her teeth, she pulled, stretching it. I could hear Eddie say something to Hank. I couldn't make out the words, but the tone was one of deep satisfaction.\n\nHank continued to pet my head, as men do. I pulled off him, kissed his tummy, then began to work his now-purple helmet with my lips. At the same time, one of my hands rolled his balls and the other began twisting and dragging his soft sheath over the rock-hard core of his shaft.\n\nA quick glance towards Petra showed that she was still sitting at the table, but also showed that she already had taken, as it were, matters in hand. Half-turned in her chair, she had Tom's balls in one hand and was pumping his shaft like crazy. Tommy wasn't going anywhere.\n\nThe plan I'd so briefly outlined in the Ladies' was on track. I grinned evilly at the sight of Carla working over her man two feet away.\n\nHank's thighs began to grow rigid.\n\nI knew my man. He was getting close.\n\nNot close enough,&hairsp; I thought to myself. Not yet.\n\nI began to suck him, hard, but just his head, knowing how much he liked that. I sped up my one hand, pumping his pole faster and faster. His hand began to clutch at my head, his thighs began to quiver. His feet rose up on the toes of his sandals, a second away from cumming.\n\nNow.\n\nI kept a firm grip on his sac and its swollen contents with one hand, but took my lips and hand off his cock. It throbbed and twitched in front of me, demanding, almost begging for release.\n\nThere was a muffled, puzzled, \"Hey!\" from above the table.\n\nI leaned forward, gave Hank's cock a light kiss, then a light lick under the crown.\n\n\"Mandy?\" \n\nA hand swept aside the tablecloth and Hank's head appeared, his face flushed, his eyes half-bugging out. \"Mandy? What...?\"\n\n\"Control button,\" I said flatly, holding my other hand out.\n\nHis jaw dropped.\n\nI smiled as sweetly, as seductively, as I could, gave his tormented cock two light pumps. A look of exasperation, of desperation came over his face. \n\n\"Controls, Hank. Now!\"\n\n\"Please, just.... Look, when...\"\n\n\"'When' my sweet ass, Hank! Now!\" I waved my hand, palm upwards, in front of him.\n\nMy vibrators spun like off-balance tops as the bastard tried to do something in response. Fine, whatever. I might be screaming in a minute or two, but I was not going to let go.\n\nCarla was licking the dark meat in front of her like a demon. Her tongue thrashed over her husband's tool, driving him closer and closer to orgasm. Suddenly, she too pulled back. \n\nHer glance at me was one of pure triumph.\n\nEddie made an effort to pull away, but Carla had a firm lock on his jewels. Now it was only Tom laughing, but that cut out suddenly.\n\nThe night wasn't turning out quite as they'd expected.\n\nThe tablecloth fell back into place. I went into a rollercoaster of arousal as Hank kept playing with the controls. He spun all three vibrators up to a level they'd never hit before. I couldn't help myself; I let go of his cock, stuck my hand over my mouth to muffle what I knew would be a massive -- and massively noisy -- orgasm.\n\nHank's neglected organ bobbed and waved, inches from me. There was not the slightest chance that I could -- much less would -- provide him any relief in my present condition.\n\nThe man was stubborn. My eyes just about crossed as the remote-controlled vibes went into overdrive. \n\nOK, I could be stubborn, too. I figured that I could have an orgasm down here under the table, hidden by a long tablecloth, without too much danger of anybody noticing. On the other hand, Hank was in no position to try to go anywhere with his costume kilt massively distended with an unfulfilled woody underneath it.\n\nFrom outside, another table somewhere, came a sudden wail of a woman cumming hard. Obviously, this joke involved a lot of company players. There would be hell to pay on Monday morning, but for now, the woman's rising cries were mere distraction. \n\nI got control of myself, took Hank's shaft in one hand and began to pump it, slowly. The I was, truth be told, having a hard time focussing on it. OK, heck, I was having a hard time breathing.\n\nI rolled my head to one side to distract me. Petra's hands were jerking the soft skin up and down Tom's rigid shaft as fast as she could.\n\nI again let go of Hank's cock as waves of sensation flowed over and through me. Keeping a firm grip on his sac, I stuffed one hand into my mouth and let it take me.\n\nI came, hard and strong. There was nothing I could do to stop it and, to be honest, I had little desire to try.\n\nFrom behind me, somewhere, another woman's voice was raised in unwilling ecstasy. Then another.\n\nThere was either going to be an orgy tonight or a raft of divorces filed tomorrow. \n\nMaybe both.\n\nHank eased off on the controls a little and I found I could resume working his cock. I deliberately kept my efforts slow and light, teasing, edging him, staying just short of the release I knew he was by now desperately wanting.\n\nI paused. Again looking to one side, I saw Carla's hidden under her mass of curly hair as she moved slowly over her husband's groin. From the way Edwardo kept raising himself on his toes, from the quiver I could see in his legs, it was clear that he too was on the brink of cumming. As I watched, she suddenly let go of his cock, backed away while maintaining a solid grip on his mansack.\n\nGood one, girl! &hairsp; I smiled to myself, even as I half-crumpled as yet another wave of sensation set off by Hank's controlling fob. \n\nTo my amazement, I saw Petra's long legs bend as she slid under the table to join us.\n\nSisterhood! We'd lick those bastards yet!  \n\nOK, wait... \n\nI mean, yeah, I thought it to myself. I really did - but I managed to catch it, too. Oh heck, you know what I mean.\n\nCarla and I gave her a rather ragged thumbs-up as she slid into sight. She too had a firm lock on her husband's joygear.\n\n\"Mandy?\" came Hank's voice from above. \"Mandy, can we talk?\"\n\nIn response, I began licking his engorged pole, slowly, careful not to allow him over the edge. As I did so, I stuck my hand under the tablecloth and raised it, palm-up.\n\nI took a momentary pause from tormenting him, pulled him out of my mouth.\n\n\"Control,\" was all I said. As I said it, I squeezed the Boys.\n\nI kept squeezing them but reduced my stimulation of his cock to merely flicking my tongue tip over his slit, as quickly as I could. \n\n\"Mandy...\"\n\n\"Control!\" I gasped, the vibrators raging inside my costume.\n\nHe surrendered. \n\n\"OK,\" came his abject voice. The tantalizing, maddening, pulsating sensations on nipples and pussy cut out and the fob was pressed into my hand.\n\nI quickly pulled it down out of his reach and triumphally held it up for Carla and Petra to see. In reward, I took him back into my mouth, sucking and bobbing.\n\nThen inspiration hit me. I stopped, pulled him back out and began just lightly running my hand up and down his wet shaft, again just teasing.\n\nI caught the other girls' attention - Watch me! &hairsp; Dropping the fob on the floor beside me, my hand went back out again in front of Hank, palm up.\n\n\"All the controls!\" I said, loudly enough for the girls to hear. Delight blazed in their eyes. \n\nIt was the endgame - all for one and one for all, that sort of thing.\n\nI could almost hear Hank wail outside.\n\n\"But Mandy! Honey!\"\n\nIn the distance, another woman hit orgasm, roaring and shouting something I couldn't understand. \n\nI could only imagine what the dining room looked like.\n\n\"Mandy!\" he hissed. \"I gave you the control!\"\n\n\"We want all of them, asshole. All three.\"\n\nI pulled my hand down, gave his head a broad lick, but just one. His cock was as hard as I'd ever seen it. A small ooze of pre-cum had started.\n\nCarla all of a sudden bent over, clearly close to cumming herself. She was panting like a steam engine.\n\nPetra on the other hand was clearly starting to enjoy herself. Normally the shy and withdrawn one, allowing herself to be led this far seemed to have cut loose a whole bunch of her inhibitions. She continued her slow, teasing handjob on her man's wood even as she shivered from what Tom was doing to her. \n\nIt was a very slow handjob, mind - enough to keep him just this side of drooling. Tom wasn't getting any joy just yet.\n\nCarla suddenly crumpled to the floor. I could see Eddie, freed from her hands on his balls, starting to rise in his chair. In desperation, I reached out and grabbed his sac in my own hands, squeezed. Unsure what was going on but realizing he wasn't going to be able to leave, he sat back down.\n\nThe tablecloth was pulled up and his head appeared.\n\nIgnoring that this was the first time I'd ever touched a man other than Hank, I gradually began squeezing harder and harder. \"Turn off Carla's machines, Eddie!\" I hissed.\n\nHis head vanished and Carla entered a full-blown orgasm, moaning, her chest heaving - Eddie clearly wasn't getting the message.\n\nI found myself, um, stretched. I had to keep Hank from going anywhere, keep him hard but not allow him to cum until we got the other two fobs and at the same time keep Eddie from running away.\n\nCarla's orgasm lasted a long time, but eventually she opened her eyes, panting.\n\nFrom outside, I could hear Hank arguing with his friends. Their voices were strained. They were panting a little, too.\n\nExcellent.\n\nPetra, to my absolute amazement, reached down with one hand and peeled off her costume bottom. Still slowly pumping her husband, she reached up and handed the handful of fabric to him from under the tablecloth.",
        "I wasn't sure what message was being passed, but every couple has their own private codes. In any case, it apparently was enough, for a moment later Tom handed her both her costume bottom and his fob. I could see the redhaired girl fumble with the control and gradually relax as she was able to turn off the fiendish stimulation.\n\nTwo down! \n\nCarla recovered enough to join us in a grin. \n\nFrom up top, I could hear Tom join Hank in arguing with Eduardo. Beyond them, another woman wailed in... well, I hope it was joy. Then another.\n\nPetra and I looked at each other, grinned and returned to tormenting our men. Just a bit more incentive needed, right?\n\nI was actually pretty impressed with Petra's technique. It was, outside of the odd porn video Hank had talked me into watching, the only time I'd been actually able to watch a woman do that.\n\nHer cheeks hollow with suction, Petra's head bobbed up and down over her man's crotch. I was sure Tom was about to blow his load when the girl suddenly backed away entirely, leaving his throbbing and unsatisfied willie waving back and forth.\n\nTom's voice suddenly increased in volume above us, pressuring Eddie to give in.\n\nEventually, the third fob dropped on the floor by Eddie's feet. When Carla held it up for us to see, the three of us all whooped in triumph.\n\nOK, bargain made, bargain to be fulfilled.\n\nI began to work Hank properly, pumping his shaft with one hand and fondling his balls with the other while putting a lot of tongue action on his purple mushroom.\n\nIt didn't take long, not with him having been kept so close to the edge for that long. \n\nHaving won this little battle in the war between the sexes, but not entirely having forgiven him, I didn't try to catch it, merely continued pumping his pole. I'd never seen Hank cum that way before -- gouts&hairsp; of it rather than spurts - far more than normal. One even hit the underside of the table.\n\nFortunately, there was a discarded napkin on the floor beside us. \n\nWhen I looked around, Petra was cleaning up Tom's tool with the trailing edge of the tablecloth. She had a large drop of Tom on one cheek. I pointed to my cheek; she nodded and wiped that, too.\n\nCarla's curly hair was all I could see of her attentions to Eduardo. Her head was still moving up and down in Eddie's lap and the dark man's thighs were literally quivering.\n\nShe stopped, Eddie sagged in his chair. \n\nI looked at Petra -- her eyes were wide as saucers, but there was a grin on her face.\n\nA few moments later, Carla leaned back, wiped her lips on the tablecloth. Eddie's thing was shiny, already sagging.\n\n\"Well, ladies,\" I said. \"I think we won that on points. Ready to rejoin the men?\"\n\nThe other two giggled.\n\nThe three of us wormed our ways back out from under the table, sat down. The boys were looking sheepish -- as well they should -- and heading into that post-orgasmic stupor. \n\nWell, that wasn't going to happen.\n\nI caught the eyes of Carla and Petra, slapped my hand on the table to get the men's attention.\n\n\"Boys,\" I announced. \"We are going to the Ladies'. When we get back, there will be...\" I looked at the girls for guidance.\n\n\"Champagne, I think.\" Petra said.\n\n\"Definitely champagne.\" I said.\n\n\"Good champagne, Eddie,\" Carla added. \n\n\"Then dancing,\" I commanded.\n\nWe rose as one and, Carla leading, we headed to the Ladies'. The ballroom looked much as I'd imagined.\n\nThe staff, no doubt shocked as hell by the bacchanalia this event had unaccountably slid into, had fled, leaving only the band and a couple of bartenders. OK, no bartender worth his or her salt could be put off by a mere orgy; the drinks would flow. Musicians were hedonists to the core, I knew; we would have music. It was all good.\n\nI didn't see any signs of open copulation as we walked through the crowd, but more than one woman was lying on her husband's lap, exhausted and more than a few were now topless.\n\nOne woman whose costume I'd initially thought was a skilled paint-job -- well, yes, it was. Or, rather, it had been. The paint was now thoroughly smeared. \n\nThe line to the Ladies' was longer than normal. Much longer. Many of the women looked as if they'd just been mugged -- stunned might be a good word. A lot of mascara had run. Some girls were clearly still being remotely teased by their husbands or boyfriends; trying to hold off the inevitable until they could reach a stall. \n\nRottsa ruck, girls.\n\nWe three reached the end of the inevitable line (so unfair!),&hairsp; leaned against the wall, soft smiles of victory on our faces. I idly watched some geek from another department walk into the Men's and emerge a minute later. There obviously wasn't much traffic there.\n\nFine -- it was time to right at least one more wrong.\n\n\"C'mon, ladies,\" I commanded, pushing myself off the wall. I stomped to the Men's door, past the eyes of a lot of surprised women and straight-armed it open without pausing.\n\nThere were only two men in there, both laughing by the sinks. There was only one thing for them to have been laughing about. \n\nTheir faces snapped over to us. \n\n\"Hey, this isn't the Ladies'!\" one said loudly.\n\nI held up Hank's fob so that they could see it.\n\n\"Out,\" I said.\n\nAfter about two microseconds of pondering the implications of the fob, it hit them and they scurried out.\n\nPetra and Carla headed over to the stalls. Each of them darted inside. I went back to the door, threw it open and shouted out, \"C'mon in, ladies! It's a new game!\"\n\n\"What about the men?\" somebody asked.\n\n\"There are potted plants on the balcony,\" I said over my shoulder as I headed back inside. \n\nA crowd of aroused and flustered -- some very flustered -- women poured into the room. I made sure to be the first into the third stall.\n\nHaving cleaned up and touched up our makeup -- Petra in particular was a mess -- we made our way back to the table.\n\nOn the way, we watched old Eric Hollopher, the CEO, carrying Maggie out in his arms; the lady pirate was for some reason not walking too well. He tried to grin at our husbands, but their red faces were turned down to the table and he didn't catch their attention.\n\nOut of the corner of my eye, I noticed the entire HR department slinking out. The usual carrot-up-the-ass HR stiffness had been replaced by a look of communal horror at the sight of such a massive and to-them-inexplicable breakdown of both corporate and societal behaviour.\n\nI followed the lot out, caught up to Eric by his car.\n\n\"Hi, Mr Hollopher. I'm Marny Stedman.\"\n\n\"Of course, of course, Marny. How are you? Look, this really isn't the best time...\"\n\n\"I know, Mr Hollopher,\" I said with what I hoped was my brightest smile. \"Which is why I'll be in your office next Monday at 10 to discuss the compensation package for some of your engineers.\"\n\nI held up the fob, waved it in front of his eyes. He turned just a little pale. He turned paler when I put my business card in his hand - very pale once he noticed the word 'attorney'. \n\n\"Whazzat?\" Maggie asked, groggily.\n\n\"Nothing. Nothing, honey,\" he stammered. \n\n\"10 o'clock, Mr Hollopher,\" I smiled before heading back to the elevator.\n\nHank wasn't going to see much of his raise himself, of course, but I was pretty sure he'd be able to enjoy the additional vacation time...\n\nIn the elevator on the way up, I pondered how to 'regift' the vibrators in our costumes. I knew a seamstress or two myself.\n\nThe boys would never see it cumming.\n\nThe champagne had arrived by the time I got back. \n\nI smiled at Carla and Petra - the party had just started.\n\n<center>+\n\nI hope you enjoyed yourself. \n\nPlease remember to vote, if not for this story, then for one you think is better.</center>"
    ],
    "authorname": "TarnishedPenny",
    "tags": [
        "embarrassment",
        "group sex",
        "oral",
        "remote control",
        "tease and denial",
        "vibrators"
    ],
    "category": "Humor & Satire",
    "url": "https://www.literotica.com/s/lysistrata-redux"
}
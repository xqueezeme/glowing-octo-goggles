{
    "title": "Mind Writing Pt. 09: Gabriella",
    "pages": [
        "CW: questionable consent; rape mention; BDSM; mind-control; unsafe anal;\n\n<hr size=\"2\" align=\"center\" style=\"width:100%\" >\n\n-- Part 9 - Gabriella --\n\nWhat a life.\n\nWhen I had told Hannah to make lunch, I had pulled her obedience up to 100%, so I was happy to let her wander out of view for me to relax. Frankly, I was exhausted. It was all well and good forcing women to cum over and over and over, but for a guy there were certain physiological limitations that got in the way.\n\nSo, I simply lay on the bed next to my fucked-stupid pet's pet, and had a little nap, half-dressed in my top and boxers.\n\nWhen I was awoken, it was from a mix of a strip of light breaking into the darkened room, and the shifting on the bed around me.\n\nEmerald, having come back to consciousness some time ago, was still a little shaky, though her eagerness to participate in our... lifestyle was unmistakable. Of course, she belonged to Hannah, that was the deal. But Hannah was otherwise engaged.\n\nShe walked in, still nude but for the socks, and presented to me and Emerald a platter of food - it was like a King's feast, made from whatever they had lying around. It was actually impressive.\n\nA bread roll had been carefully sliced into thick, even slices, with butter in small manually-cut rectangle next to it; cheddar and brie and another cheese I couldn't recognise by sight were sliced and fanned for us, with cooked meats on the other side to compliment - ham, salami, amongst others. Next to it all was a bunch of grapes - just to hammer home the regal feeling of it, all served on a wooden serving platter.\n\nIt was a deconstructed cheese and ham sandwich, fine. But it looked good, and the effort wasn't wasted on me.\n\n'Thank you,' I said, taking it from her. Emerald, perched on the bed next to me, had the air of a woman sobering up about her - there was a certain... anxious energy that came from not knowing where she fit into this group when she wasn't being forced to cum from Hannah's word.\n\n'Here,' I said, plucking a grape and feeding it to Emerald. She took it carefully, her lip contacting my finger as I fed her. Tuning in, I felt a rush go through her, as she realised that the power she had sacrificed, handed over to us, wasn't simply sexual. It was all of her.\n\nHannah stood before me, looking like a walking dream, with an expression of soft desperation on her features. She wanted to cum, and she would do anything to get it - or, to take that frustration out on Emerald. Which would be fun, I knew.\n\nBut I was still tired.\n\nSo, I pulled their honesty up, and made myself a sandwich from the pieces offered to me. 'You may speak,' I said to Hannah. She visibly relaxed, but didn't say anything - not yet. 'Now that we've all gotten to know each other, what shall we spend the day doing?' I asked.\n\n'Can I cum?' Hannah asked, almost immediately. I smiled. She'd been riding the edge all day, all the way through sex, unable to fall over, to crash into the ocean of pleasure she knew was waiting for her.\n\n'Not today,' I told her. I turned to Emerald. 'How about you - we haven't had long to get acquainted. What would you like to do?'\n\nShe thought for a moment. 'I mean... what we did, what we're doing, that's kind of a dream of mine.'\n\n'Is it?' I asked ,happy with her answer.\n\nShe nodded. 'Especially with Hannah,' she said. 'I've wanted her since I first saw her.' I noticed how her eyes drank in Hannah's body almost as hungrily as I did.\n\n'Are you happy to spend your life with us?' I asked. 'Would you join us - now you're out of the fog of sex - and say you want to spend every moment under Hannah's control?'\n\nEmerald nodded. 'I'd sign away my life to do that every night.'\n\n'Good answer,' I said. 'But - what do you want to do today?' I pulled her honesty up to 100, and took a bite. It was a good sandwich.\n\n'I want to move out,' she said quickly. 'I hate living alone. I want to live here, with you. And I want to cum again, on her face. Or maybe on your cock,' she said, looking at me, then looking down, averting her eyes. She treated me as though I was some kind of power, and authority. I had to remind myself she, and Hannah, were several years older than me.\n\nThen again, I did have a thing for older women.\n\nI sucked in a breath. 'I'm moving away soon,' I told them. 'Week after next. I'm moving into a flat - I have the whole thing sorted out. But... if the three of us were together, and I was able to ... acquire some money, would you be interested in-'\n\n'Yes,' Hannah said quickly. 'Yes, please, let me come with you.'\n\n'Me, too,' Emerald said, nodding. Her small hands found my body, and Hannah moved in on the other side - our three bodies soaking in each other's heat all of a sudden. Hannah's fingers snuck in beneath my shirt as Emerald went to my shoulders.\n\n'You want to come?'\n\nThey nodded. Honesty all the way up, this is genuinely what they wanted. Unfiltered and uninhibited.\n\nFuck.\n\nThat changed things.\n\n'Well then,' I said. 'I'm going to spend some time reorganising things, if I'm not moving into that flat; I'll need somewhere else. And money to do it.'\n\n'I can get you money,' Emerald said, but I quickly shook my head.\n\n'No, I'm not taking anything from you.'\n\n'No - I mean, I still sell my art sometimes; there's an exhibition in town tonight, where I've got a few paintings going. There are always arse-faced types with more money than taste - if you get one to buy my painting way overpriced, you can use the money to put a deposit down.'\n\nI looked at Hannah, whose eyebrows were as high as mine.\n\nIt was a distressingly simple plan. And one that looked like it would work. In fact, it might make a very lucrative income stream - selling Emerald's art for above-sensible amounts.\n\nI let out a laugh. 'Let me call the landlord of that flat to pull out,' I said. 'Then we can waste time until the exhibition. What time does it start?'\n\n'Opens at six,' she said.\n\n'What time is it now?'\n\n'Just gone two o'clock,' Hannah said, as she snuggled into me. 'We have... quite a bit of time.'\n\nI couldn't resist those eyes. Nor those tits.\n\nI smiled, and kissed her, as Emerald's hands started to pull my top off, exploring my chest as she went.\n\n'I'm spent,' I reminded them. 'But Hannah, I imagine you're still very much in the mood, seeing as you're unable not to be?'\n\nShe nodded, kissing my neck as she did. 'Mm-hm - I want you so much, daddy.'\n\n'Then,' I said, tuning in to ensure Hannah's obedience was still at 100 - which it was - before putting my finger to her chin, pulling her up to look deep into her eyes. 'You remember what you did for me, that first time, in the back of the shop?'\n\nShe bit her lip, nodding as she remembered taking me into her mouth, making me cum across her face and tits, both of us surprised by how hot the whole thing had been.\n\n'Well, that was me making you into my pet - I suggest you have your pet do the same for you.'\n\n'But, I can't cum,' she said. 'So, it would just be torture.'\n\n'Is unending pleasure torture?' I asked as Emerald stroked my chest. 'Is the promise of how good it would feel really torture?'\n\nHannah smiled at me. 'You're the devil.'\n\n'Not yet,' I said. 'Maybe one day - how much do you think people would pay for their wildest dreams to come true?' I kissed her, before looking at Emerald. 'Emerald, use your mouth to make Hannah scream and moan and writhe and everything else.'\n\nEmerald slid off me, to the floor, and I budged aside to push Hannah back. She lay down onto the bed with her hips just hanging off the side of the mattress as Emerald positioned herself between her thighs, kissing and licking her way up to Hannah's already dripping sex.\n\nI leaned over, gave Hannah a deep kiss, before sitting up and stroking Emerald's bobbing head between her legs.\n\n'Keep going until I come back,' I said, before dressing. 'After that, back to normal - you obey every word she says.' When I left, Hannah was pulling a pillow up over her face, moaning into it loud enough that the point of having a pillow there at all was kind of undone.\n\n<p align=\"center\">* * *</p>\n\nI helped myself to a shower in Hannah's home, enjoying the fruit-scented lotions and shampoos and body washes until I could almost see my muscles loosening as the fatigue and tiredness melted away.\n\nThe bath-mounted shower was red hot, and the room filled with fog, meaning I could have been anywhere. Not necessarily in the home of a woman, the life of whom I had accidentally made myself a central pillar. Anywhere.\n\nI could be in Newcastle, starting a day of University, a week behind on coursework with a hangover on my eyelids and a late-night stir-fry in my stomach.\n\nI could be ten years old again, trying to figure out what was wrong with me; why I was so different; how to make myself more like everyone else.\n\nI could be fifty; having figured out my life, gotten a job I was comfortable with; maybe married. So far away from here.\n\nI caught myself on that thought - did I want to be away from here? I could, just about, make out Hannah's moan over the hiss of the shower water. I reminded myself that both her and Emerald were here because they wanted to be. They enjoyed what was going on. Emerald was maybe lacking... context, but that was okay. Hannah was in this, fully, by request. She knew she could leave. She knew the risk. Hell, I'd already hurt her, and she forgave me and came back.\n\nBut was it me she wanted? Or was it the gift?\n\nOr - more troublingly to consider - was there a difference, in her mind? Hell, was there a difference to me?\n\nWas I any more than my gift?\n\nDid it matter?\n\nI steeled myself, cracked my neck, and shut off the shower. In a moment or two, I was dried using one of Hannah's most decadent towels, before securing it around my waist and walking through to Hannah's room.\n\nOnly, there was someone else in the house. I could hear it. The footsteps beneath me, down stairs, alongside the moans from Hannah's room. With a spring in my step, I went to the room, and Emerald looked up at me, her face slick with Hannah's juices. Hannah, near delirious, was strewn across the bed, limbs too tired and desperate to hold her up, eyes loose in her head, moaning and babbling as I came in.\n\n'HANNAH?!' came the call from down stairs, before thundering footsteps approaching us. Hannah, sobering just a little, frowned at me and Emerald, both of us naked save for my towel, as a version of Hannah, though slightly taller, lacking any piercings, and dressed in a white shirt and cream blazer and matching suit trousers, burst in.\n\nThe stranger balked at us, her eyes landing on Hannah before averting quickly. She gave a muttered, 'Fucking hell,' before turning and leaving.\n\nI tuned in, and felt a wave of anger and disappointment and revulsion - likely from seeing her sister naked. Because, as Hannah had mentioned before, she lived with her sister, who wasn't supposed to be home for hours.\n\nThough, in fairness, she had said that hours ago.\n\nI pulled down the sister's anger, and disgust, but almost immediately stopped myself from going any further - I had told myself I was only going to do this with people who wanted it. At least, people who were on board. This wasn't that. If I was a good person, and if I did what I said I was going to do, I would simply let this situation play out.\n\n'Fuck,' Hannah said, managing to sit up, her mind coming back to her. 'Was that... oh fuck.'\n\nEmerald looked to us, confused, not knowing how this was supposed to play out; despite being an adult, she was looking to us for guidance. For direction. Which was fair - I had, after all, basically positioned myself and Hannah as authorities inside her head.\n\n'Get dressed,' I said. 'Both of you.'\n\nThey obeyed, without me having to mess with either of them - perhaps that authority was just the default now, unquestioned.\n\n'What the fuck am I going to say, Jamie?!' Hannah asked as she pulled on underwear.\n\nEmerald pulled on her own clothing, too, as I stayed in only my towel, thinking. 'Do you want me to... make this easier?' I asked.\n\nHannah paused, looking at me. 'You could?'\n\n'Yes,' I said. 'But... I'm trying to be respectful. Good. I told you, I need someone to check me, to keep me... within bounds.'\n\nHannah and I looked at Emerald, who was watching us with uneasy eyes as she dressed, pulling on a sundress I realised I hadn't really seen her in. 'Whatever you two are on about, all I know is that she was not happy to walk in on us like that.'\n\nHannah pulled a jumper over her head, not bothering with a bra, and yanked on black jeans as we talked. 'She's never happy, and since it's just me and her...'\n\n'She's protective,' I said. 'That's not something I should change. I'm staying out of this one,' I decided, stepping back. 'I'll get dressed, and me and Emerald will leave you to talk.'\n\nHannah nodded. 'Yeah - besides, might have been a shock and all, but, like, I'm an adult, I can have a threesome if I want. Not my fault she walked in on it.'\n\nEmerald nodded. 'Exactly. But, you know, it can be a shock to the system. My mum didn't know I was gay until she walked on me with a girl's hand in my panties.'\n\nI let out a small laugh. 'Right. I'll dress, then. Again.'\n\nOnce I had, pulling on my boxers, shirt and trousers, me and Emerald made a quiet exit, passing the sister as she waited in the living room. As soon as the door clicked shut behind us, the screaming match started, and I resisted the urge to tune in and calm things down.\n\nNot my fight, I told myself. Not my fight.\n\n'So,' I said to Emerald as we walked away from Hannah's home, the air between us tense. 'You're gay?'\n\nShe shrugged. 'I'm not really anything. Or, I'm all of them. I don't care.' She looked up at me, heat in her eyes. 'But whatever you and Hannah are, that is what I like.'\n\nI smiled. 'Good answer.'\n\n'It's just easier to call myself 'gay', seeing as my parents are, you know, old-school types.'\n\nI nodded, getting it. 'Well, after that, I think you'd have to come up with a new word anyway.'\n\nShe slowed, stopping on the corner of the street. 'Speaking of...'\n\nI looked at her, trying to figure out who she was. For someone I'd been so intimate with, she was almost a complete stranger. She was pretty - cute, I would say. Soft features and a permanent knowing smile. Her red hair, unwashed and a little sweaty, which was understandable, was pulled back into a ponytail, almost looking smart.\n\nKnowing she was an artist made sense, as she looked like she was straight off of a University campus.\n\n'What exactly are you and Hannah, anyway? Because, it doesn't seem... romantic.'\n\n'Well,' I said, taking a breath. 'Romantic isn't maybe the best word. But, I trust her. And I think she knows me better than anyone else.'\n\n'So, when you said about us going with you, you were serious?'\n\nI nodded. 'Absolutely.'\n\n'So... tell me the truth,' she said, that knowing smile fading into something... else. 'Because I've done BDSM. I've even done stuff that looks like BDSM, but isn't. Whatever this is... it's more than that.'\n\nI turned towards the lake, feeling a waft of cool air. 'Yeah, it's more than just that, I suppose.'\n\nShe looked at me, frowning a little. 'When you say things, to me, to Hannah... the things you talk about. I'm not stupid. But I honestly don't know what to make of it. So, tell me the truth, or I'm out.'\n\n'Out?'\n\nShe nodded. 'Out.'\n\nI tuned in, pulling her honesty up to a hundred. 'You want out if I don't tell you everything right now?'\n\n'No,' she said immediately. 'Not a chance. But I want to know anyway.'\n\nI smiled, letting her honesty relax, but pulling up her obedience. 'If I tell you, you are bound to secrecy - only to talk about this with myself and Hannah, and never when people could be listening, understood?'\n\nShe nodded. 'Yes, although now I'm kind of worried about it-'\n\n'I can control minds.'\n\nShe paused, looking at me as though she was waiting for a punchline.\n\nFor obvious reasons, none came, and I let her sit in it for a moment.\n\n'Right, I'm off for a bit of food before this exhibition. Would you want me to pick you up?'\n\nShe nodded, looking a little dazed. 'Wait, you're serious?'\n\n'I mean, I can't drive, but I'd be happy to get us a taxi-'\n\n'No,' she said, almost annoyed. 'About- about the minds thing. You're not being serious.'\n\nI shrugged. 'If you don't believe me, that works for me. Think what you want. I'm still going to be getting someone to over-pay for your paintings later - which, if you'll remember, was your idea.'\n\n'Because I thought you were, like, doing hypnosis or something! That's what Hannah told me!'\n\nI smiled. 'I'm glad she kept the lie up. But, as it stands, you can't tell anyone, so I don't see a risk. See you at half five?'\n\nShe nodded. 'See you then.'\n\nThen, seeing her a little dazed and confused on the corner of the street, I leaned in and kissed her.\n\nThen, I turned and left.\n\n<p align=\"center\">* * *</p>\n\n'You look nice.' My mum's compliment felt a little forced, but it was nice to hear. As I did up the last button on my shirt - a pleasant, deep blue - she leant against the doorway, watching me.\n\n'Thanks?'\n\n'I feel like we don't talk anymore, Jamie,' she said, a sadness in her eyes I wasn't used to seeing. 'After... everything that happened. With your father, the marriage... it was all so fast, and I feel like we didn't-'\n\n'Mum,' I said, stopping her. 'I... I know what you mean. But, it's fine. Don't worry about it.'\n\n'I do, though!' She stepped in, and I leant against my desk as she sat on the end of my bed. 'Look at you - all dressed up.'\n\nI was, in truth - a shirt and smart trousers, wearing cologne, it was different from how I would usually dress, sure.\n\n'It's just an art exhibition,' I said, wafting it away. For a moment, the urge to tune into her and tell her just to leave me alone roused in my mind, but I brushed that aside - there was no good reason to break into her head and start messing around. She was just upset.\n\n'No,' she said, shaking her head. 'It's... you're a man. Going off to Uni soon, and I just... I can't believe we gave you all of that to deal with. I'm sorry.'\n\n'Don't be,' I said. 'Honestly - you weren't happy together. Dad was happier elsewhere, so were you... and maybe I will be, too.'\n\nIt was harsh, and I could tell it hurt my mother to hear, but it was the truth.\n\n'Jamie...' she said, with a soft voice.\n\n'Mum,' I said, waving my hand. 'I'm not upset about it. I want to build my life - my own life. And, I'm excited to!' I stood, pulling her in for a hug. 'Don't apologise for making yourself happy.'\n\nShe sniffed, and nodded, before looking at me with serious eyes.\n\nThen, just as quick, the dam broke, and she turned away. 'Emmy at the shop said her daughter was going to an art thing tonight - do you know her? Gabriella?'\n\nI tried not to laugh, or choke, or balk.\n\n'I, uh, yeah. I know her,' I said, nodding, and trying to keep it cool.\n\n'Good,' she said. 'It'll be nice for you to see a friendly face.'\n\nI nodded as mum left the room, leaving me to struggle with getting my shiny, fancy shoes on that had only seen work at weddings before, and thought about Gabriella Sampson - the girl from my year who had dropped out months ago.\n\nAnd when I say 'dropped out', I mean she ran off with a guy before her exams, got married, and moved out of her parent's house as soon as she hit eighteen just before Christmas. It was, at the time, a massive scandal in the school. The guy she ran off with was smart to keep things as... private as possible, to the point that no one even knew his name for a few weeks.",
        "Of course, it all came out when she told her best friend, who immediately told everyone at school. My experience of the whole thing was very much on the periphery of the situation, as my main interaction with Gabriella before this was that she was a massive bitch, and had a habit of spreading rumours about people that ranged from annoying to potentially career-ruining, if you were the teacher she accused of assaulting her once.\n\nI didn't hate her. I didn't know her well enough to hate her. But I knew enough about her to figure that this was going to be... interesting.\n\nI had gotten Emerald's number from Hannah an hour or so ago - and discovered that Hannah's sister, after calming down from the initial shock of seeing her sister in the middle of the threesome, had simply gotten 'weird' and wasn't talking to her, so that was something I might have to step in on eventually - so I sent a quick message to Emerald for her address.\n\nOnce I had it, I saw that it was a six-minute walk, and booked the taxi to pick us up from hers in about ten minutes, before getting those shoes on.\n\nH: Sorry I won't be joining\n\nThe text was, in a way, needless. We had already figured it would be good for me and Emerald to have some time together, and Hannah wasn't needed for the plan to go ahead - if anything, it cleaned up my idea for the night a little. After all, now that I knew Gabriella was going to be there, I thought a little bit of a reunion might be in order, and doing that with two gorgeous women on my arms would have been satisfying, if a little attention-drawing.\n\nIf I was going to get someone to act out of character, and spend more money than they should have, then it was probably best that I wasn't too interesting to people who didn't already know me.\n\nThat's if Gabriella remembered me at all, which she might not. School had only ended a few weeks ago, really, but she'd been gone for almost a full year, and before that our paths only ever crossed in very superficial ways.\n\nStill - I planned to have fun, and to show Emerald what she was getting into. It would be a trial by fire for her, in some ways. Time to turn up the heat.\n\nI arrived outside Emerald's house, a typical quaint village-bungalow with a dirt track driveway. My smart shoes crunched into the gravel, and I felt an odd sort of twist in my stomach - like I was nervous for a first date. Which, in a way, it would be.\n\nThough, Emerald wasn't so much a date, was she.\n\nWas she?\n\nIt wouldn't be fair to call her simply a pet. She might be that, sure, during sex - but it didn't take a genius to recognise that it wasn't the sort of thing that could define a whole person. She was an artist, a graduate. I wondered what else I would find out about her.\n\nI thought about Hannah, too, in that regard. I knew things about her, but a great deal of our connection had been through sex. That, too, was only through the last month or so in total; there was a great deal we didn't know about each other.\n\nIf we were going to commit our lives to each other, for them to join me in a new city, with a mind to set up a life, and figure out how we were going to make money and live - likely using my gift to as many ends as possible - I felt like a more... legitimate connection needed to be made.\n\nMaybe it should be a date.\n\nThere were worse people to find yourself on a date with, of course. She was older than me, but her smile was bright and youthful, her energy unending, and - as she came out to meet me, not long before the taxi arrived to collect us to take us out of the village and into town - she was dressed in a smart deep blue dress.\n\n'I match your shirt,' she said, a smirk on her lips I hadn't seen before.\n\n'So you do', I said, trying to be cool. In truth, I'd never been on a date before, so I didn't know if this was one or not, but she was beautiful and she was on my arm, and we had a night of relative glamour ahead.\n\nThe car ride was under an hour, and yet it felt like it lasted a lifetime. Emerald sat next to me, her hand one the dark of the seat as the few-and-far-between street lights flitted by. Each strip of light caught her features, and from this angle I could make out her parted lips and glimmering eyes, the shape of her face.\n\nI remembered, indulgently, the sight of those features between Hannah's legs, slick and panting; I remembered the sight of her after the fifth or sixth orgasm that was forced through her, mouth wide and brow furrowed, body shaking.\n\nI swallowed the images, promising myself a night of living them out. Perhaps Hannah would be involved, perhaps it would just be me and Emerald, getting to know each other. Either would be a spectacular end to the day.\n\nThe dark outside wasn't just caused by the slow incoming of evening sky - the canopy of the lake road made a thick barrier between us and the sky above; even so, where yesterday it had been open blue and clear clouds, now it was close to rain, and the heat in the hair outside was humid and heavy. As we pulled off the lake road, it improved a little, and there was less need for the streetlights as the driver took us towards the town, crossing green country by way of dual carriageways and farmer's tracks.\n\nEmerald turned to me, an investigative look in her eye.\n\n'How did I end up here?' she asked.\n\nI cocked my head. 'What do you mean?'\n\n'Well, this time two days ago, I was a failing artist in a go-nowhere village, single and struggling. Now, between the crush of my Uni days calling me up for a night of fun, and you rewiring me to make it even more fun, and the fact that we're all thinking of moving away together... I just feel like everything's happened at once.'\n\n'I don't want you to feel pressure,' I told her. 'Emerald, you are... free to choose whatever you want.'\n\n'Am I?'\n\nI nodded. 'I swear,' I said. 'I have... I have experience pushing people to do things past what they want. I don't do that anymore. Now, I just help people do what they actually want to, and I make it feel good.'\n\nShe let out a small laugh. 'More than good.'\n\nAt that, her hand reached out and squeezed mine. 'You're okay?' I asked. 'I know we don't know each other too well, but... I hope that'll change.'\n\n'Get someone to buy my painting for a stupid amount of money,' she said. 'Then, you can get to know me as much as you want.'\n\nAt that, a naughty thought built itself inside my head. 'Is that so?' I asked, tuning in. As my fingers trailed along the back of her hand, I pulled up her arousal - only a small amount at first. Barely perceptible.\n\nThen, I travelled to her wrist, and brought it higher.\n\nShe noticed, her mouth falling into an open smile, bright and big as she did. She looked at me, and whispered 'Is that you?'\n\nI nodded, going back down her hand to the tip of her thumb. She purred as I came back up, bringing up her arousal as I did, feeling her body react; pleasure started to build naturally, between her induced arousal and the rumble of the car.\n\nHer eyes drifted closed as I tugged at her pleasure, teasing her more directly now. I didn't focus so much on numbers, like I did with most people - instead I just went with instinct. I watched as her breathing increased, trailing up her arm and pulling her pleasure with it.\n\nAs I reached her elbow, she tensed up, and I pressed - only slightly - on her climax; she was already going over the edge, but I felt it fitting to give her a bit of... momentum. Her hand shot out to grip me as her face screwed up, legs squeezing together as she tried to hide her orgasm, squirming in the backseat as her climax flooded her mind. I held her there just a little longer than what would be usual, and watched as she realised what had happened.\n\nThen, I lifted my hand and sat back, giving her space to recover.\n\nAfter a beat of heavy breathing and trying to hold back her cum-face, she looked at me with a glint in her eye.\n\n'Fuck you,' she laughed, and I smiled, shrugged. 'I see why Hannah likes you.'\n\n'Everyone likes me,' I said. Though, quickly, my mind turned to Shona, and Ali, and how quickly I had been turned out of their home when they realised part of what I was doing. My mind went to Holly and Erin, and how far I had gone, to the point where the only moral recourse was to wipe it from their minds.\n\nThe car shuddered to a stop, and we looked out her window to see the building we were outside - a tall, fancy looking place, old and weathered, with a crowd milling around outside. I checked my watch, and found that it was almost 6 - doors weren't even open yet.\n\n'Thanks, mate,' I said, paying through the app on my phone before getting out. I came around the car to help Emerald out on shaky legs, before we turned to look at the exhibition.\n\n'This looks... fancy,' I said.\n\n'It's art,' she shrugged. 'You look good, though,' she said. 'Shall we?'\n\n'Doors aren't open yet,' I said, pointing at the clear glass doors, and the people chatting to the security guards, clad in black suits and white shirts, smiling with million-pound smiles.\n\n'I'm one of the artists,' she smiled. 'We're allowed in ahead of time.'\n\nShe led me to the side door, a solid-grey thing with another guard at attention. She gave her name, and he checked a list on his phone, before nodding and letting us in together. It took us into a staff access, but we took the first door to the left and came out behind the exhibition space.\n\nI stopped in my tracks, staring around.\n\nIt was like another world.\n\nThe white walls were covered in paintings and sketches and pieces of all shapes and descriptions - some were realistic landscapes of the Cumbrian hills, some abstract collections of colour that should have meant nothing to me, but for some reason seemed to pull me in.\n\nStatues lined one area, made from marble and in the shape of angels, but altered in some way; one had wire mesh for skin, coating half of the structure in a sort of armour; another was seemingly floating, before you looked and saw that the legs were made of clear perspex, but very much there.\n\nA group of people in clothes easily as nice, and likely much more expensive, than myself or Emerald, were in a small circle chatting, before one spotted us. A brunette with a headset on, and a much more practical - or, normal - set of clothing nodded to us.\n\n'Emerald!' she called, waving us over. 'Thought you weren't coming!'\n\n'Wouldn't miss it!' Emerald called back. 'This is Jamie - he's come for moral support.'\n\nThe group, aside from the brunette, opened up to accept us, and I got a good look at them - presumably other artists being featured.\n\n'Nonsense - you'll make us all look like amateurs, Emerald,' one of them said, an older man with a gruff voice and wispy white hair. He stood tall, with his belly protruding out like a barrel on his tree-trunk legs, a wide smile beneath his whiskers. 'Moral support is needed for the rest of us, however - it could be a challenging night.'\n\n'How's that?' Emerald asked.\n\n'Journalists,' he replied with a snarl. 'What do you think, Gab; will they go easy on an old man like me?'\n\nAnd, just like that, I saw her - a face slightly changed from how I half-remembered her, make-up perfect and her dress shaping her deliciously. Gabriella, the 'whore' who ran off with an old man.\n\nShe looked... great.\n\n'You'll get what you deserve,' she said, a dab of poison on the end of her smirk. I couldn't tell if she was being mean, or teasing, or if there was a difference.\n\n'Doors open in thirty seconds,' the woman with the headset said, into her walkie-talkie. The level of tension in her face, and the nerves of the old man, had me wondering where the fuck I had ended up. All I wanted was to have a bit of fun, and sell a painting.\n\nAll in all, it seemed a little... ridiculous. Silly. Overblown, at least.\n\nMy eyes went back to Gabriella, who had noticed me - perhaps even remembered me. If she did, she didn't let on at all. Which I liked. Maybe. It was hard to tell, I was so turned around by this bewildering situation. I'd expected a nice wander around the exhibition, tune into an old fat cat and up his generosity, or greed, or something else, and go home for a nice double-blowjob from my sex pets before bed. Now I was stuck in some strange micro-community that had no room for me.\n\nIn fact...\n\nA thought came to mind, as the doors behind us opened, and the people started to stream in. From the way they reacted, it seemed as though there should have been some Black-Friday barge, a wall of people clamouring their way; instead, it was a steady, well-rounded affair, with lots of appreciative 'thank you's chattering around.\n\nOnce Emerald tugged on my arm to lead me away, the idea was fully formed. But, I had time. Why not enjoy some of the art first.\n\nThe crowd quickly filled the room, a sea of black suits and well-fitted dresses, hugging figures in ways that were tickling my fancy already. Still, with Emerald on my arm, it was hard to have my fancies taken too far.\n\nWe walked together, toward the statues, and Emerald leaned in. 'I think Howard's trophy-wife liked you,' she whispered. 'She was staring.'\n\nI smiled as we stopped, pretending to look at the statues; they were pretty, don't get me wrong - but I didn't have the knowledge to really appreciate them.\n\n'I knew her,' I said. 'At school - she dropped out once she turned eighteen to marry... an older man. I guess, now, I've met him.'\n\n'I see,' Emerald said, amusement in her voice. 'Cold you... do me a favour?'\n\nI looked down at her, her height only a few inches shorter than mine, but in her dress she looked fragile in a beautiful sort of way.\n\n'Of course.'\n\n'Could you make me calm? I'm kind of freaking out right now. I'm not good with this crowd - I was planning to skip, as you probably heard.'\n\nI nodded, and tuned in; as I suspected, her anxiety was high - almost at 70; she wasn't far off having a panic attack, I reckoned. So, I pulled it down to a more sensible 30, and brought up her comfort and confidence.\n\nShe audibly sighed, and looked up at me. 'Fuck. You weren't lying.'\n\n'No', I said. 'I wasn't.'\n\nThen, shit bit her lip. 'What you did in the car...'\n\nI smiled, looking up at the artwork. It had nothing on her. 'You in the mood for more?'\n\nTo my surprise, she shook her head. 'Your friend, from school, Gabriella. Howard's wife. I... hate her.'\n\nI let out a soft laugh. 'She wasn't popular at school,' I said. 'Actually, that's not true - but she was popular in the wrong sort of way, if you know what I mean.'\n\nEmerald nodded. 'But, as much as I might want to hate her, I kind of... Oh God, I can't say.'\n\nI was still tuned in, so I brought up her honesty. 'Tell me.'\n\n'I want to see what's under her dress,' Emerald said. 'Since the day I met her, months ago. She gave me her number, and I've wanted to fuck her ever since; Howard can't be doing it for her. I wonder if she's ever been fucked so good she cums-' She stopped herself, looking up at me. I smiled, giving away my part in her sudden deluge. 'Fuck.'\n\n'Do you want to see her cum?'\n\nEmerald's eyebrow twitched. 'Yes.'\n\n'Do you want her to do it here, in front of everyone?'\n\nShe looked up at me. 'You wouldn't.'\n\nI shrugged. 'I didn't like her much. And, in all honesty, I'm kind of interested to see if she screams or not.'\n\nEmerald giggled, hugging into my shoulder. We turned away, wandering over to some landscape work - charcoal and sketches that did little for me. Knowing the space, Emerald positions me so we could see most of the space before us, the artwork to our right in a way that let us believably look at it, whilst actually keeping an eye on the room.\n\nMost of the crowd was older, in their forties or fifties, so the tight body of Gabriella stood out like a thorn in the room; I was sure, in that sense, that Emerald did as well.\n\n'Have you done something to me?' Emerald asked, almost out of nowhere.\n\n'What makes you ask?'\n\n'I feel... safe around you. Happy.'\n\nI shook my head. 'No, Emerald, I haven't done that to you. I can, if you want. I'm pretty sure I could make you fall in love with me, if I wanted.'\n\nShe gulped, looking at me with a flicker of something new in her eyes - perhaps fear. Maybe I had been too bold.\n\n'Love?'\n\nI nodded. 'Or, at least, I could make you... obsessive. Or, enrapture you, so you only felt pleasure with me.'\n\nHer eye twitched at that. 'Really?\n\nI nodded. 'I did it to Hannah, for a day or so. Make her unable to cum without my... input.'\n\n'How'd she like it?'\n\n'Not very much,' I said. 'And I don't plan on doing it again - really. I wouldn't do that to you, even if you asked me. Probably. I'd definitely hesitate.'\n\n'So, you're not planning on making me into a mindless sex-toy, huh?'\n\nI shrugged. 'I didn't say that.'\n\nShe nudged me. At first, I thought it was a playful rebuttal, but I saw quickly that she was pointing - Gabriella was across the room, on Howard's arm.\n\n'Want to see what I can do?'\n\nEmerald nodded. 'Give 'er hell.'\n\nSo, with the memory of Gabriella's shitty personality in my mind, I tuned in to her across the room. That, by the way, was a feat in and of itself, sifting through a room of brains all humming with artistic thought, emotional and strong and dense.\n\nI found her, though, by focusing on the emotion I could feel only one of; boredom. There she was, in a sea of artistic inspiration, bored out of her mind. I searched a little deeper, and it didn't take long for me to feel the hatred beneath - anger, frustration, and - just a little deeper - greed. Patience.\n\nIt wasn't hard to put together.\n\nGold-digger was often a term used unfairly, but she seemed to fit the bill; even so, I wanted to know how true it was of her.\n\nFirst, though, I had a point to prove.\n\nSo, I searched in for her arousal, her pleasure, and found them at the bottom of the barrel - uncared for, uncultivated. Unloved.\n\nJesus, what kind of life is she living?\n\nI looked down at Emerald and gave her a wink before we both focused our sights on the beautiful Gabriella - and I ramped her pleasure up from 7 to 70 in a second.\n\nTurns out, she was a screamer.\n\nEmerald jumped, her hand finding my shoulder as Gabriella moaned - loud and shameless, defeating any typical restraints she might have in place, filling the hushed space with her lewd sound.\n\n'Uuaa-aaAAAAAAAAAAHHH!'\n\nHeads spun, voices silence, and the whole room became focused on the eighteen year old who had doubled over, moaning in unmistakable pleasure; she fell to her knees, her perfect dress obviously not designed to be in contact with the smooth, hard surface underfoot, and she ended up face-down on the ground, knees under her, in a near-fetal position.\n\nAfter the best part of a minute, I let up, relaxing her pleasure down to a healthy 40 - the soft thrum of sex would be glowing through her, unignorable, but manageable. Her arousal, on top of that, I kept quite high, knowing it would be... distracting. Worrying, even.\n\nHoward, her husband, helped her up, and she was bright red, eyes avoiding the crowd as he led her into a back room, away from the exhibition.\n\n'Holy shit,' Emerald said. 'That looked... intense.'\n\n'Like what you see?'\n\nShe swallowed. 'I'm scared of saying yes, to be honest.'\n\nI gave a soft laugh. 'If I wanted to make you scream, you'd be screaming,' I told her, before the crowd seemed to regain a sense of itself, and people began to chatter and wander around. We moved, too, happy not to stand out, and Emerald took me across the space, past a selection of abstract paintings to a series of three; each of them looked like warped, unreal depictions of sunsets - the colours were haunting, not warm in any way, but bracing.",
        "'These are mine,' Emerald told me.\n\n'They're... I feel like 'good' is the wrong word,' I said.\n\nShe nodded, even though I had expected to insult her by saying that. 'That was the idea. Take something most people associate with romance and make it... ugly. Challenging. Unfamiliar.'\n\nI nodded. 'How much are you selling them for?'\n\n'A hundred each,' she said.\n\nI had no reference for whether that was a lot or not, but she seemed annoyed when she said it; I couldn't imagine it was enough money to be worth her time, either - they looked as though days had been poured into them, and here she was selling them for a portion of the amount other pieces were going for.\n\nFor an hour or so, Emerald showed me around, pointing out which artists had created which pieces, and leading me to the generous, if noticeably middle-class in it's spread. Things had died down by the time half-seven hit, and Gabriella re-emerged from the backroom with a brave look on her face, and steel in her fists. Howard, looking a little over-worked and red in the face, trailed behind her.\n\nI tuned in, and again felt that distaste and annoyance, with a hint of arousal buried underneath - my work was still applying to her, then.\n\nAs I watched her, Emerald was pulled into a conversation by another artist, and I found myself alone for a moment before Gabriella sent Howard away to fetch a drink, and curiosity took me.\n\nI approached her, and there was, again on her features a glint of recognition. As she looked at me, I spiked her arousal just a little, meaning she was open to me as I walked up.\n\n'Gabriella,' I said, as though I was just now realising who she was. 'Jamie-'\n\n'I remember you,' she said, somewhere between amusement and dismissal. 'From school. God, that feels like a lifetime ago.'\n\n'Same,' I said. 'Though, you dropped out a little early, didn't you?'\n\nShe pursed her lips at me, and I felt her distaste building - so I pulled it down, just enough to keep her in the conversation. 'I found a better way in life.'\n\n'On the arm of a sixty year-old?' I asked, smiling. She didn't take it well, but I kept her anger at bay, which meant she instead turned to challenging me.\n\n'I'm set to inherit sixty-million pounds worth of property all around Cumbria when he croaks; if I have to sit through a few art exhibitions to sate his boredom, so be it.'\n\n'Not just art you're sitting through though, surely,' I said. 'I mean - I saw what happened back there. Sounded like you were a bit... pent up.'\n\nShe gasped, and scowled at me, but before she stormed off I pulled up her honesty and forthrightness - mostly out of curiosity.\n\n'Gabriella, what do you want? Really. In life.'\n\n'To be fucked,' she said quickly. 'To have an orgasm that doesn't come from a toy. I've only had sex with him,' she spat as Howard fussed at the drinks table, chatting to another guy in his mid-sixties. 'He's rich, and nice, and he has a horse cock - but he just doesn't do it for me.'\n\n'Hold on-' I said, trying not to laugh. 'A horse- what?!'\n\n'Almost ten inches,' she said. 'And, for the first few times, I figured I would be happy with that. But the man it's attached to - Jamie, he's so... old. I think you're right. I think I was pent up, and exploded.'\n\nI let go of her honesty and forthrightness, but kept her arousal up. 'You know, I'm into hypnosis at the moment,' I told her. 'If you wanted, I could... fix that for you.'\n\nShe looked at me, a frown in her features, but with a tug to her trust and gullibility, she relented. 'Tell me how.'\n\nI shrugged. 'I can make you desire him - so you're able to get off when you're, you know, together. I've done it before. If you want, we could find a back room, and me and my... assistant can get you sorted. For a price.'\n\nHer eyebrow twitched. 'A price?'\n\n'Emerald has three paintings up for a hundred each - I want you to over pay for all of them.'\n\n'Not without proof,' she said.\n\nI checked my watch. 'Then, let's get this done before the auction starts in an hour.'\n\nShe went red in the face again, and I pulled up her trust some more. 'I don't even know you that well.'\n\nI cocked my head a little. 'This is the most we've ever spoken - and we have something the other wants. I can give you... satisfaction. You can help Emerald settle some bills. I don't think we need to know each other any better than that.'\n\n'I need proof, first,' she said. 'That your hypnosis works. Do something small, on me, now.'\n\nI shrugged, and stood before her - for theatre, I rolled my shoulders, and had her shut her eyes and count down from ten.\n\n'When you open your eyes,' I said, pulling up her obedience, 'You will not be able to speak - at all - until I say the word 'blanket'.' I touched her forehead, and pushed lightly, and she frowned. 'Three, two, one, open.'\n\nShe opened her eyes, and looked at me. Then, she opened her pretty lips to speak, and - nothing. Nothing.\n\nShe paused, and tried again. Nothing. No words, no squeaks, not a peep.\n\n'Told you,' I said. 'Nod whenever you'd like me to fix your marriage.'\n\nShe stared at me, flabbergasted, as Emerald rejoined us. 'What's going on?' she asked, a smirk on her fair lips.\n\nGabriella's lips, much more plump and painted a deep red, which contrasted her lovely dark hair perfectly, were wide and appalled as she tried to overcome her new status.\n\n'I'm just showing off my hypnosis skills to an old school friend of mine, Gabriella. I believe you two know each other?'\n\nEmerald nodded. 'What are you planning, Jamie?'\n\nI shrugged. 'All I said is that I could help her be attracted to her husband, and that I could take her into a backroom and... fix her. She wanted proof I wasn't talking shit, so now, she's not talking at all.' I looked at Gabriella. 'Convinced?'\n\nShe nodded, visibly shaken, like I had taken away the one thing she knew she had power over - not money, not sex, not pleasure, but her voice. First I made her scream, and now I had her silenced. I wondered to myself what other noises I could make her produce tonight.\n\n'And how, exactly, are we going to... fix her?' Emerald asked, a glint in her eye telling me she already knew the answer.\n\n'We reprogramme her mind,' I said. 'I'll take some time to find the pleasure centers, and then I'll... alter them. Does that sound good?' I looked at Gabriella, who was visibly processing what was going to happen. She was making a choice - one that I figured would be easier than it was at the moment, now that it was real and offered to her. I realised, though, that there was a difference between what I had assumed was simply a wish to feel pleasure in a way that had been kept from her, and the truth.\n\nShe likely relied on the fact that her aging husband being unattractive to her meant that she had standards that would be more in-line with someone more 'typical'; that she was putting on a show as a means to an end. If I made her enjoy it, it would remove the facade. She wouldn't be in the relationship simply for money anymore, and she wasn't sure what she thought about that. She likely hadn't thought about it before.\n\n'This way,' I said to Gabriella, before taking her and Emerald by the small of the back, leading them in the direction of the back rooms; there, we found a thin corridor lined with empty metal shelves, very much feeling like it was simple access for staff, with a few different doorways going off on either side.\n\nWe passed a few, looking through the windows and cracking open the doors to find a suitable one - some were storage cupboards that were far too small, others the lights were on and it seemed like they had been recently used - best to stay out of there.\n\nAfter a moment of searching, however, Emerald cracked open a windowless door to a storage room that seemed to have been cleared out recently - the shelves were empty, there was a table and a desk chair piled up at the side, and there was a musty kind of smell that gave me some assurance that no one had been here for a while.\n\n'Perfect,' I said, showing them in.\n\nI tuned in, letting the temptation to use my gift for selfish reasons take over for a moment; after all, Gabriella was unhappy, and I was going to make her happy, right? So what if I fudged the process of that a little to get what I wanted.\n\nAnd, what exactly did I want? I wanted to give Emerald what she wanted - to see what was beneath that lovely dress Gabriella was wearing like a second skin.\n\nIf I let out a little repressed tension by hate-fucking a bad memory from school, so be it.\n\nThe girls stepped into the murky storage room, the lightbulb overhead giving an uneven glow to everything, and took them in.\n\nEmerald's pale features, soft and even, dainty in an innocent-until-slutty sort of way; her dress was casual, and showed off her figure but without any overt expression of cleavage or coming up too high on the high, or anything like that.\n\nGabriella was much less conservative - her black dress dipped at the chest, and while she wasn't massively endowed, the curve of her breasts were undeniably appealing beneath the fabric. Between the pale-golden mounds lay a necklace on a thin chain, drawing the eye down into the valley, before she turned slightly and showed off her true asset - her backside. Gabriella had an arse so fuckable it was something of a running joke in school - that she'd run off with a man who had promised to do anal only, so they could fuck everynight and not get her pregnant. It wasn't a funny joke, but it stuck around - likely because people wanted to think about butt-fucking her.\n\nI bit my lip as I tuned in, feeling her own arousal hovering higher and higher with each baited breath.\n\n'Changing the way you feel pleasure is going to require some... work,' I told her. Gabriella nodded, her face steeling somewhat; I had an inkling she knew what was about to happen. 'I will now attempt to open your mind, and access your pleasure points - Emerald, come here.'\n\nShe obeyed, hopping over to me quickly. 'Yes?'\n\n'I want you to seduce Gabriella, okay? Touch her, undress her, pleasure her.'\n\nShe swallowed. 'Okay.'\n\n'Is she really going to-?' Gabriella asked, but I stopped her by putting my hand up.\n\n'This is the best way to rewire your pleasure centers,' I told her. Tuning, I pulled up her excitement and anticipation, while bringing down her anxiety and, upsettingly, a level of disgust - I figured she wasn't gay, and had some issues with being touched like that by a woman. Not to worry, of course - she'd come round soon enough.\n\nEmerald went round behind her, and as she trailed her hands across Gabriella's arms, I simply tugged at her arousal. With each movement Emerald made, I shot pleasure through her, making Gabriella shimmer with need under Emerald's teasing fingers.\n\nI could tell Emerald was enjoying this, too - even if she was submissive in nature, no one disliked making someone else shudder under their touch.\n\nGabriella's eyes fluttered shut as Emerald begane to get braver - I tuned in on her, too, and pulled up some aspects that would encourage her to be a bit more... invasive. Quickly, Emerald's lips were on Gabriella's neck, as her fingers played with the zip of her dress, tugging it undone in one long, luxurious swipe.\n\nThe garment didn't simply drop, however - instead, it hung to her as Emerald continued her assault. Inside Gabriella's head, I toyed with her pleasure, her enjoyment, her own bravery and daring. Then, as Emerald helped Gabriella shrug off the dress, I stepped forwards and took her chin in my grip - softly, but with enough presence to make her eyes snap open.\n\n'Are you ready?' I asked.\n\nShe nodded. Bringing up her obedience, I led her to the table. 'Lie down, face up,' I said, watching her immediately comply. Emerald looked at me with hunger in her eyes, but I figured that it was about time I took over, and I ramped her obedience up as well. 'Emerald - tease her with your mouth, but don't touch her pussy yet.'\n\nGabriella flinched at the word pussy, it's plainly lurid sound reminding her of what she was doing.\n\n'Why am I lying down?' she asked, as Emerald set herself up between Gabriella's calves, kissing and licking the golddigger's legs from ankle to thigh and back again. 'Fuck,' she whimpered as I positioned myself on my knees, my head next to hers.\n\n'So I can fix your marriage,' I said. 'And to do that, I'm going to have to ruin it first.'\n\n'What do you mean?' she asked, her voice shaky as Emerald toyed with her, soft lips and slick tongue making lewd sounds between her spread legs.\n\n'While you are here,' I told her, 'you belong to me. You are mine, to make cum; to fuck; to tease. Understood?'\n\nShe looked at me. 'Why?'\n\n'Because once I own you,' I said, enjoying the shape of her tits, reaching up to feel her warm mounds between my fingers. 'Once you submit, I can transfer that to your husband. I can convince your mind that the only way you will feel this way again is in his arms - is quivering on his cock - is with his flesh deep inside you.'\n\n'Fuck,' she whispered.\n\nI listened to her body, to her arousal, her pleasure, her nerves - keeping her in a steady balance of building tensions and shaking anticipations as Emerald played with her.\n\n'Emerald,' I said. 'What do you think of our new friend?'\n\n'I think,' she said, stopping to kiss Gabriella's thigh, 'I want,' lick, 'to see her cum.'\n\n'Hmm,' I smiled, looking at Gabriella. 'Would you like that?'\n\nGabriella nodded. 'Then listen to me-' I pressed my thumb against her forehead. 'You will only ever cum under two conditions - your husband is fucking you, during which you will orgasm every minute, building to an enourmous orgasm as he cums, either inside you or onto you; and you will cum when I tell you to.'\n\nI imprinted this within her mind, creating new pathways.\n\n'Now - cum.'\n\n'Shiiii-!!' she seized, her legs flexing and squeezing Emerald between her toned legs as her face contorted, mouth wide and eyes fluttering. Her hands gripped the edges of the table, and I enjoyed the moment.\n\nOnly, something felt a little... off. I couldn't put my finger on it, but dismissed it anyway.\n\nOn with the show.\n\n'Did you like that?' I asked, and she nodded. 'Aside from me, your orgasms only belong to your husband, now - you won't even be able to make yourself cum in a frenzied bathroom visit, or while fucking some poolboy you likely have on your household payroll. It's him - or me, of course. And I'm going to say it now, because emerald knows this - I'm very cruel with the women I fuck. I make them mine. I turn them into hungry, insatiable things, Gabriella. Emerald - eat her pussy.'\n\nInstantly, Gabriella started to moan. I stood, looming over her as Emerald used every talent her tongue possessed. Gabriella moaned, and writhed, and her hips twisted and lifted as she was brought so, so, so close to the edge, but unable to cross over.\n\nIt was a hell of a sight, and I could feel the hardness in my trousers at full mast. Still, something felt... off.\n\n'I have a problem,' I told Gabriella casually, as though she wasn't moaning against my hips as Emerald's hair got caught beneath her shuddering buttcheeks, an inch off the table surface. 'Something about all of this feels wrong, Gabriella. Maybe it's because, in all honesty, I don't care about you, or maybe it's because I feel a little left out. Let's find out. Take my cock out.'\n\nShe let go of the table and went straight to my buttons, fumbling to get me out. When she got the first one, I watched as, upturned, Gabriella made eye contact with me, and there was a brief recognition of the absurdity of her position - her pussy being ravaged by an artist girl she half-knew, as her fingers desperately strived to release cock.\n\nA cock, I was reminded, would be her first aside from her aging husband.\n\nIf nothing else, then, I was giving her an experience, as well as the promise of more pleasure to come.\n\nAfter a moment further, she managed to get my second and third buttons undone, and her feverish hands reached into my trousers, beneath my underwear, and pulled my length out quickly.\n\n'God,' she mumbled. 'It's so... ' her eyes caught mine, and I could feel the hunger in her - even if I wasn't reading her mind, it would have been obvious.\n\n'Emerald is re-writing your pussy,' I told her, a blatant fib, but oh well. 'So, let's get started on your... other holes, eh?'\n\nShe swallowed, as her fingers guided the pink head of my cock to her face.\n\nHer lips were soft as they opened over the head of my cock, and I pressed forwards slightly to be greeted by the warm, slick mouth of the gold digger who treated me like shit all those years ago.\n\n'You have a very fuckable mouth,' I told her, stroking her cheek as she moaned around the head, Emerald's talented and unyielding tongue driving her towards an orgasm that wasn't going to come - not without my permission.\n\nI pulled up her desperation a little, having more fun with her as we went on - though, still trying not to get carried away. Unless this was already carried away.\n\nNo, I reminded myself. We've been further than this, and it was... worse.\n\nSo, instead, I let her worship my cock, her rude mouth turned into a thing of pleasure for my amusement while Emerald kept her in torturous ecstasy. Eventually, though, I needed more. So, as I pressed my cock deeper, I pulled up her pleasure - still without giving her the permission to cum - and watched as she moaned around my length, taking me almost to the hilt easily. She said she hadn't fucked anyone else, but I refused to believe that, with this level of skill on display, she hadn't sucked as many cocks as she could before getting married.\n\nI watched with a glimmer of primal lust as my cock made her throat bulge ever so slightly, her pleasure-bathed mind refusing to let me go even as I pulled back; her hands snapped around me, holding my butt to keep me embedded inside her gullet as she became nothing more than a fuck-hole to me - only her bottom lip visible of her face, and close beneath that my bulge in her neck, and beneath that her tits quivering as her body quaked on the edge of a forbidden orgasm.\n\n'While I, or your husband, has their cocks down your throat, you will have no gag reflex, and will enjoy the taste of cock and cum like it is sugar.' I slammed the thoughts into her mind, before beginning to fuck her mouth in earnest. Straight away, she began to calm, enjoying it in ways she would have never experienced before.\n\nWell, time for another new experience.\n\n'Cum,' I said simply, and felt her explode. The moans, even while gagged on my cock, vibrated throgh her, loud and lurid enough to make me worry someone outside might hear. Her body shook, legs locked around Emerald's poor head as she kept me deep in her mouth, choking on my cock as her throat squeezed and pleasured me. It was... like nothing else I had felt.\n\nStill, once she was weak from the orgasm, I pulled away, letting a thick line of drool attach from lip to cock, before breaking and splattering down her face.\n\nGabriella coughed and spluttered, as my cock slapped against her fair features.\n\n'Shit,' she croaked.\n\n'Emerald, stop,' I said, losing my patience. It had been fun, playing with her like this, even making her and Emerald cum in public, but I was growing bored of it - I wanted to do what I had come here for. I wanted to make emerald a shit-ton of money.\n\nAnd, to do that, I needed Gabriella to think she was reprogrammed. So, onto the next hole.\n",
        "'Ride her face,' I told Emerald, as we swapped sides, crossing each other with a self-satisfied smirk on both of our faces.\n\n'Yessir,' Emerald said as I reached Gabriella's open legs, her pussy pink and slick and aching to be fucked. I tugged on her hips, pulling her up the table so that Emerald was able to hop up and straddle her features more easily, lowering herself down onto Gabriella's face. I noticed that Emerald wasn't wearing underwear, and wondered when she had slipped them off - or if she'd bothered wearing any at all. Either way, I knew Hannah had picked a good pet.\n\nEmerald settled into position, and I watched the tentative expression on Gabriella's face melt away - partially, I had to admit, due to the fact that I pulled up her arousal as Emerald's sex was lowered over her.\n\n'Hahh,' Emerald sighed as Gabriella got to work. 'Oh she's... shit - thank you, Jamie,' Emerald hummed, her features twitching with each pulse of pleasure beating through her.\n\nI gave her a smile, and turned my attention to Gabriella's slick sex; her legs wer almost hanging off the table at this point, and with a soft pull I was able to bring her arse to the edge. Her legs fell open, wide around me as they ran out of table to rest on, as Emerald fondled her tits.\n\n'Do you know how long I've wanted to taste her pussy?' Emerald said as I slapped my cock against Gabriella's wet folds.\n\n'Not as long as I've wanted to do this,' I said, before sinking in.\n\nIt's remarkable - each pussy has its own... flavour might be the wrong word.\n\nExperience.\n\nSome were softer, some tighter, some wetter - all of them, at least so far, had been eager for me. Some, like Shona, had been wells of experience, but neglected with time; some, like Ali, were virginal and ready to be shaped to me; Hannah was slutty, and need to be taught a lesson; Emerald was curious, and wanted to see what all the fuss was about; Holly and Erin I pushed to the back of my mind, even now.\n\nGabriella was different. She wasn't a virgin, and yet there was an inexperience about her - only one guy had fucked her, and she didn't find him attractive, so the sensation of being filled while in a state of lust must have been new for her; equally, this wasn't a situation she had opted into, but had rather agreed to after some... pressure. It was, for me, something close to closure, or even a punishment, if you wanted to be malicious about it. It was this great mix of things.\n\nEven so, as I sank into her, I rammed her pleasure up to 100, and moaned, 'Cum.'\n\nShe shook like lightning was passing through her, her naked body - save for her shoes - shuddering between me and Emerald, wet noises coming from beneath Emerald's dress. I held her hips as I began to fuck her, holding her pleasure high. At that point, I opened her mind to my instruction - 'When I, or your husband fucks you, you will feel this level of pleasure between your orgasms. Only us, Gabriella, will be able to satisfy you while our cocks invade your cunt.'\n\nAgain, I slammed the instructions home, and I was able to relax my mind as her pleasure stayed there while I was deep inside her - fucking her like she was a toy for my lust.\n\n'Hrnn-glgg-grmmm-' I heard her groan from beneath Emerald's cunt, as the redhead rode the golddigger's face like a sex toy. Emerald took Gabriella's tits in her hands, as much for leverage as for balance, and looked at me through hooded eyelids.\n\n'Fuuuuck, she's gonna make me cum,' Emerald moaned.\n\nSo, I tuned in, and gave her the final push - just a little blip to her climax, and she rolled over the edge like a ginger boulder. She crashed, shuddering atop Gabriella's own shuddering, pleasure-wracked body, before shaking it off.\n\nI could feel myself getting close, and knew that there was something which had to happen first.\n\nSo, I pulled out, and Gabriella's body relaxed, her new programming already taking over her body. After a moment, Emerald clambered down, and Gabriella lay there on the table, catching her breath. Her pussy was gaping slightly, her own juices dripping down her thigh as she half hung off the table, her face slick with Emerald's orgasm, make-up smeared and hair ruined.\n\nShe looked well-fucked - maybe for the first time in her life.\n\n'Last level,' I told her. 'Get on the floor, put your dress under your knees, and bend over.'\n\nShe did as she was told, albeit slowly and with an air of confusion. 'Why am I-?' she started to ask as she got into position.\n\nI came up behind her, and called Emerald over. 'On your knees,' I told her. 'You're going to be... helping me in.'\n\nAt that, I could have sworn I watched Emerald's eye dilate, as Gabriella looked over her shoulder at me. 'Haven't you done it? Aren't I... rewired?'\n\nEmerald's hand took my length, hard and hot and ready, and sucked it into her mouth, languishing me with her lips and tongue.\n\n'Nearly,' I said to Gabriella as she stayed there, bent over. 'But how good of a wife would you be-' Emerald left a thick coat of spittle on the head of me as she pulled away, as I stepped back. '-if you weren't available to your husband with all three of your holes?'\n\nEmerald dove in, using her talented mouth and her long-repressed lust for Gabriella to shut the golddigger up.\n\n'Fuck,' Gabrielle moaned. 'I've never - no one's-'\n\n'Better than you thought?' I asked, watching from above as my fuck-pet ate her arse, dipping her tongue into her and tentatively stretching her with a finger. It took some time, but by tuning in and pulling down Gabriella's pain, and bringing up her pleasure, it didn't take long before she was groaning into the cold floor, hips swaying and fingers clawing at her dress, caught beneath her.\n\n'It's - I can't think-'\n\n'That's okay,' I said, pulling down her cognition just a little, as well as making sure her pain is as close to zero as I dare to go. With a soft pat to Emerald's head, I pull her away; Emerald quickly pivots, sitting back on her haunches, and giving me a quick re-supply of lube from her eager mouth.\n\nThen, with a sigh, my cock is fed into the aching, tight, slick arsehole of the greatest butt there was in school.\n\n'Fuck,' I moaned as I took Gabriella's anal virginity, the soft of her butt arching up towards me as she groaned - I pulled her pleasure up as I sank into her, Emerald's spittle helping me sink deep into her as her mind translated the pain into pleasure.\n\n'Oh God - oh-oh-OH GOD,' she stammered, all propriety and poise that came with her wealth and artistry and beautiful dress long-lost; instead, free of my influence, she came to the sensation of my cock stretching her virgin arsehole, legs shaking and muscles clenching.\n\n'Fucking hell,' I moaned as I began to fuck her, feeling Gabriella push back against me with each thrust.\n\n'Yes,' she panted, lost in the pleasure. 'Yes-yes-YES!'\n\n'You like that?' I asked, slapping her perfect cheeks. 'You like being butt-fucked by a guy you use to make fun of in school?'\n\n'FUCK - yes, I dooo-oh GOD!'\n\nI hammered myself home, my hips landing against those upturned cheeks I had dreamt of, once upon a time. 'You remember Ali?' I asked, knowing she had once made Ali cry during a P.E. class only about six months ago.\n\nGabriella nodded, though it might have just been an automatic response to my question.\n\n'I did this to her, too,' I told her, before tuning in, and pulling her cognition down. She was dumb, horny, and moaning like a bitch in heat. 'This is what you will become whenever your husband fucks your arse - and you will offer him this every time you are naked together; if he fucks your arsehole, you will become exactly how you are now - empty-headed and desperate to be fucked.'\n\nAs I slammed my cock into her tight hole, I hammered that instruction into her. I felt it lock into place, alongside my other instructions, finding their home. She would, in anal sex with her husband, feel pleasure instead of pain; lose her thoughts; become nothing but a cock-hungry toy.\n\nI was almost jealous, if it wasn't for the fact that this - tonight - was going to be enough for me. I knew I was going home to Hannah and Emerald, and I would likely fuck them both before the sun rose. I knew this was my life forever.\n\nFor her, it would be this once, before she spent every night with the old man she decided to go off with, to steal his money. He would fuck her, and she would cum every time.\n\nFuck, her tight little hole was amazing.\n\n'Do you want me to cum inside you?' I asked her, grinning. 'Fill your little hole up?'\n\n'Uh-huh.' she groaned. 'Fuck me - fill me - oh, god - can you cum in my pussy?'\n\nI almost laughed. 'What?'\n\n'I wanna get pregnant,' she moaned. 'Howard doesn't - he's sterile,' she said between groans. 'I want a baby, Jamie - put a baby in me, god, PLEASE!'\n\nI felt her cum, again, as she begged me for my cum; I felt her seize up and groan, shaking on the floor as I fucked her.\n\nEmerald's eyes caught mine, and her ace was the same as mine - shocked. Surprised. Kind of turned on.\n\nThere was only one problem, of course.\n\nBeing in her arsehole, I had no way of being - ahem - clean enough to fulfill thatm, even if I wanted to.\n\nDid I want to?\n\nHoly shit, I was close.\n\n'Cum in me, baby,' Gabriella was moaning. 'Other - other hole - fill meeeeee...'\n\n<hr size=\"2\" align=\"center\" style=\"width:100%\" >\n\nA huge thank-you to:\n\nObi\n\nMannie_RSF\n\nPeer Henze\n\nSindre Bj\u00f8rnhjell\n\nSimon Haynes\n\nFlarevirtue\n\nSole\n\nMithos16\n\nEMaster\n\nML\n\nYour support can never be overstated, and will never go under appreciated &lt;3"
    ],
    "authorname": "Danni_Iridescent",
    "tags": [
        "group sex",
        "psychic",
        "mind writing",
        "mind control",
        "anal",
        "teen",
        "orgasm control",
        "anal virginity",
        "sex slave"
    ],
    "category": "Mind Control",
    "url": "https://www.literotica.com/s/mind-writing-pt-09-gabriella"
}
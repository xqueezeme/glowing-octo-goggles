{
    "title": "A Town Without Honor Ch. 01",
    "pages": [
        "=====================\n\nHonor under fire\n\nA story of betrayal and consequences.\n\n=====================\n\nI was nine; she was four. She was the neighbor girl, my younger sister's shadow, cute in the way that only blue-eyed blonde, round-cheek cherub toddlers could be. It was tiny Beth who gave me the nickname that would stick with me for the rest of my life.\n\nArnold was a little too hard to pronounce. From her lips, it came out as 'Ahnuh'. My entire household found it hilarious. Grandma Jane was visiting when four-year-old Beth came running up to me, throwing her arms around my leg. \"Ahnuh, Ahnuh!\" she cried out, giggling, hiding behind me as my sister Peggy came searching for her.\n\nGrandma didn't have the best of hearing. She turned to Mom, \"Why does she call him Honor?\"\n\nThe name stuck, a family joke.\n\nOurs was a big family, Irish and French Catholic, Fourteen blood aunts and uncles, three living grandparents, 58 first cousins. They had normal names, all. Six Jameses, three Williams, three Roberts, two Donalds, four Marys, three Janes, three Margarets, two Jennys, two Jeans, and lots of derivative nicknames, Jimmy, Jack, Junior, Trey, Billy, Will, Bob, Robbie, Don, Mare, Janey, Peggy, Margeand Jen-jen.\n\nOne Honor.\n\nIronic. The same adorable toddler who stuck me with my moniker would be the grown woman who erased the last vestige of that same character trait from my shattered soul.\n\nI'm getting ahead of myself.\n\n* * *\n\nI was 14, she was nine. Dad had been called up with most of his unit to defend Kuwait in Operation Desert Storm. He was part of the 14th Quartermaster Detachment, a water purification unit that was going to be stationed in Saudi Arabia, away from combat, a safe post.\n\nAfter weeks of intensive training, he came home briefly before being deployed. On his last day, he took me for a walk.\n\n\"Honor, I'm not sure how long we're going to be away. It could be as long as a year. It's up to you to be the man of the house. Take care of your mother and Peg. Your mom's going to need you. She's never been alone.\"\n\nIt was too great a burden for me to comprehend, but, of course, I thought it was no big deal. I was a teenager, almost 5'10\". I felt more like a man than a boy. I was only a couple of inches smaller than Dad, if about a foot narrower across the shoulders.\n\n\"Sure Dad. We'll be fine.\"\n\n\"You're going to move back to Bedenton so your mother can be with the family. She'll need the support. We'll keep the house; you can stay in the old cabin.\"\n\nMy laissez-a-faire attitude turned to shock. I was about to enter High School! Leave? All my friends, my school, the team, how could I? How could he?\n\nI didn't have a say in it. The decision had been made. I was at the airport when Dad left, still angry and not afraid to let it show. He pulled me aside. \"I know this is difficult. Life sometimes is. I'm counting on you, son. I know you'll do the right thing. Always. Be there for your mother and sister. Be strong.\" He put his big meaty hand on my shoulder and squeezed. \"I'll be back before you know it.\"\n\nFor Peggy, it was an adventure. For Mom, it was a chance to reconnect with the family. For me, it was a time of torment. I loved the small town where most of our family had lived for four generations, the rural setting, the outdoors, the closeness, but I was being torn away from the future, as I knew it. \"It's just a year,\" I told myself.\n\nFor Beth, it was the end of the world.\n\nShe was devastated, constantly crying, always underfoot, staring at me sadly. It was obvious she had a crush on me. I'd always found it cute, but now it was sad. When we were ready to leave with the loaded down family van, it took me 10 minutes to peel her arms off me.\n\nI lifted her off the ground and hugged her. She wrapped her skinny arms around my neck, almost strangling me. She pressed her lips against mine, fiercely. \"Come back to me, Honor,\" she sobbed.\n\n\"Soon, BB, I promise. We'll all be back.\"\n\n* * *\n\nDad was right. He was back before we knew it.\n\nSix days after arriving in Dharan, an Iraqi missile hit their barracks.\n\nOne lousy week. History books show that 114 Americans died from enemy fire during the Gulf War. The Iraqis lost between 25 and 35 thousand. Quite the victory, almost bloodless for our side.\n\nUnless you're one of the 114, or their family.\n\nWe went back to Greensburg only long enough to empty the house and put it up for sale. We visited with the other families from Dad's unit. There were lots of tears, sadness and anger.\n\nBeth was torn, ecstatic that we were back, then anguished because it wasn't for good. Losing Dad hit me hard. The only thing that got through the pain of my father's death was little Beth. She was just a kid. When I got depressed, she'd find me, hunt me down, climb in my lap and hold me. She was just a kid, a nine-year-old meddlesome brat, my anchor.\n\nI was 14; she was nine. I was forced to be a man when I'd never had a chance to be a boy. She lost her first love and her innocent view of the world.\n\nOur departure was pained. This time, she didn't hug me, or kiss me. She stood apart, tears streaming down her face, staring at me angrily. She hugged my sister and my Mom. Me, she stood three feet away, trembling, trying to catch her breath. I stepped toward her, but she backed up two quick steps.\n\n\"Goodbye, Honor,\" was her last words, before she turned and ran, skinny bare legs flying, pale arms pumping, blonde hair streaming behind her.\n\n\"Goodbye, BB.\"\n\n* * *\n\nI was 19, she was 14.\n\nI had the grades and test scores to get into most colleges. Carnegie Mellon was not only one of the best schools in the nation, but I could get nearly my entire education paid for with scholarships, grants, and a minimum of loans. I think the scholarship from the Greensburg VFW was the kicker. I was going home.\n\nI had taken a year off after high school, working for my uncles, squirreling away a little cash, helping with the house-hold expenses. Mom worked. It didn't pay a lot, but together with the money from Dad's passing, we had enough to get by. In a small town like Bedenton, jobs were hard to come by. Fully a third of the residents commuted over an hour each way to the big city outskirts.\n\nIt had been five years. I hadn't thought of Beth much in the last few. The first couple of years, I was a loner. I buried myself in my books and spent most of my time in my bedroom, playing maudlin music on Dad's old guitar. We'd call the old friends occasionally, and I'd chat with BB about her school, but without the face-to-face activity, things were strained. Over time, the calls became fewer, and I moved on.\n\nI had a new life, several cousins my age, who were as close as brothers and sisters, friends in school, good friends, baseball teammates, girlfriends, three of them. Annie Marshall, the latest, had made a man out of me in the fields behind her house, on a dark green woolen blanket under cloudy skies. I was sad to leave her behind, but college was calling.\n\nDriving to Pittsburgh, I wondered what had become of the lanky nine-year-old with the enormous crush. I told myself I'd look her up. Easier said than done. I didn't have a car; I lived on campus. I'd had to grow up early, and I took my education more seriously than most. I had an obligation to do the best I could, for myself, for my family. I was too serious for a lot of my acquaintances, but slowly made a few friends, good friends. I'd always been lucky that way.\n\nOr, so I thought. I'm getting ahead of myself.\n\nBen let me use his car for the weekend, if I would fill up the tank. It took about thirty minutes to drive to the old neighborhood.\n\nI was anxious, more nervous than I should have been. I walked up to the door, and rang the bell, a Saturday morning at 10:42 am. It's funny how there are some things you can never forget.\n\nShe opened the door, and I recognized her immediately. Five years made a big difference. She was pretty, taller, her hair still long, those huge eyes of hers mesmerizing.\n\n\"Honor?\" she said hesitantly, looking up at me.\n\nI'd changed as well, growing into the family height. I stood 6'2\", a solid 210 lbs. Everyone said I was the spitting image of my father. I'd look stocky if I wasn't so tall.\n\nShe launched herself at me without further hesitation, arms and legs wrapping me up. \"Honor!\" she shouted, her young lips swarming across my face, kissing me repeatedly, tears in those big shining eyes.\n\nI laughed, hugging her. \"Miss me, BB?\" I teased.\n\nI walked into the house I was so familiar with, the gangly little neighbor girl clinging to me like a spider monkey. Her mother was in the kitchen, and looked up at me in surprise.\n\n\"A little help, Mrs. D?\" I pleaded.\n\nShe laughed, and came running around the counter, almost knocking her daughter off me, giving me the biggest hug. \"You're back?\" she asked.\n\nShe helped me peel Beth off, her hands reaching out to touch my arm and shoulders several times as if to verify I was there in the flesh.\n\n\"Going to school in Pittsburgh. Carnegie Mellon,\" I explained.\n\nWe had a nice lunch while I caught them up on the family news, and they did much of the same. I was lucky I'd arrived when I had; they would be moving within the month. I was shocked before they informed me they were only changing neighborhoods, moving to a better school district for Beth and closer to Mr. D's work.\n\nIf I'd waited another month to visit, I might never have seen Beth again.\n\nIf only.\n\nI spent the entire weekend with them. Beth and I toured the old haunts, and it felt natural to walk hand in hand with her. She was 14 going on 21, and was already beautiful. I was proud to be with her, and I saw people smiling, nudging each other when we walked together.\n\nI didn't have a lot of money, but I spent a month's allowance that weekend.\n\nI was given the guest room, and was only mildly surprised when she slipped into my room around midnight. Nothing happened. I was 19; she was 14. I was a man; she was just a kid. I held her, told her how much I'd missed her, and we kissed as if it was our last days on earth.\n\nI wasn't unaware of her body, small firm breasts, smooth skin, but she was a kid. She was a freshman in high school. I was a college guy, so I buried the wrong feelings and held her close. We fit together perfectly, made for each other.\n\nShe was 14; I was 19, but I knew it then.\n\nI loved Beth. I always had. One day, she'd be mine.\n\n* * *\n\nI was 23, she was 18. We spent a weekend together at least once a month. The first two summers had been hard when I went home, leaving my Beth behind.\n\nMy family wanted to know everything, and I held nothing back. I had a different relationship with my mother than most sons. We were close, intimate, not as lovers, but everything else. We shared our thoughts, our dreams. Over the years she'd told me of her entire life with my father. I know part of it was how much I was like him.\n\nShe would cuddle up to me when we watched movies, my arm around her, holding her. We kissed often, more than friendly, but less than lovers. It should have been awkward, but it was natural. I loved my Mom, and I was her rock. After losing Dad, we'd had to lean on each other a lot.\n\nI spent more than one night in her bed, holding her when the depression would hit. I recognized she was an attractive woman, but that was all. She was my father's, and she was my mother.\n\nI would hold her, let her cry on my shoulder, kiss her tears away, and remind her how much I loved her, and would always be there for her. I'd promised my father that much and I was going to stand by it.\n\nI had gained a reputation for doing what I said I'd do. I know a big part of it was Dad's final words, telling me he knew I'd do the right thing. I guess I always wanted to make him proud. It gave me a moral compass.\n\nPeggy and I were close, but not like with Mom. We had the typical sibling thing going, teasing, irritating, sometimes fighting. We loved each other although we rarely said it.\n\nThe third summer, I stayed in Pittsburgh taking summer courses and working an internship. I had a car and spent all my free time with Beth. We were a couple. We weren't lovers, but we were closer than any other couple I knew.\n\nI serenaded her often, wrote bad songs for her, played them poorly, and she loved it. To this day, I can see her sitting at my feet, looking up at me with those big blue eyes, her adoration clear as day. If I picked up Dad's old guitar and didn't play Kiss's \"Beth\" at least once, she'd pout. She would never ask for it, but I learned, and ended every little session letting my music tell her I loved her.\n\nI took her to the senior prom. She was stunning, tall, beautiful, captivating, the prettiest girl I knew. Then again, maybe I'm biased. I went all out, renting a limo, taking her to a fancy dinner, dancing with her and her friends. I took her to a hotel afterward.\n\nI was 23, she was 18. We made love for the first time.\n\nI'd only had two other lovers, and those experiences could not have prepared me for Beth. I undressed her slowly, marveling in her exquisite, tight young body. She took her time removing my clothes, item by item, her hands and lips exploring my flesh.\n\nNaked, we lay next to each other, our hands cautiously caressing one another, eyes roaming, slowly moving together, talking about our lives, our future. Our lips met, and she rolled onto her back, bringing me with her.\n\nHer smooth thighs parted, and I was between them.\n\n\"I've wanted this for so long,\" she whispered, taking my shaft in her hand and guiding me into her. We merged perfectly, filling her. It was magical, a perfect moment in time, leaning over her, as close as any two people can be.\n\n\"I love you so much,\" I confessed. \"I don't even know how it's possible.\"\n\nShe smiled. \"I've always loved you, Honor. Always.\"\n\nI kissed her softly, moving inside of her. \"I know.\"\n\n\"Promise me we'll never be apart again. I couldn't stand it.\"\n\n\"Never. You're mine, BB. Now and forever. Nothing will ever change that.\"\n\nShe was 18, and I was 23. I was na\u00efve.\n\nWe were young, excited, and desperately in love. We made love, and it was beautiful. Then we fucked. Like wild minks, we learned together, exploring our feelings, likes and desires. She was wide open to me, eager, and willing. We destroyed both beds, and did it on the table, dresser, rug, chair, sink and in the shower. I couldn't get enough of her, and each time seemed to only get better.\n\nI knew that night we were destined for each other, paired souls, and nobody could ever be what Beth was to me.\n\nI didn't take her back to her house until almost noon the next day. She had told her mother she wouldn't be coming home, and I was nervous. I needn't have been. We were a mess, and there was no doubt what we'd been up to. The fact that we'd gotten maybe three hours of sleep didn't help.\n\nI squirmed in my seat when she went to her room to change, leaving me alone with her parents.\n\nMrs. D took pity on me, sitting beside me on the couch. She ruffled my hair. \"Relax, Honor. It was inevitable. You were hers since she was four years old. I think everyone knew it but you.\"\n\nI turned to her father. \"Mr. D? I... I want to marry your daughter.\" I started speaking quickly before I could be interrupted. \"I'll be graduating in less than a month, and already have several job opportunities. I love her. I promise I'll be good to her, and give her the best life I can. I know there's a big difference in age, but we're in love.\"\n\nHe smiled. \"Son, I couldn't ask for anyone better for my girl. Of course you have my approval, and thank you for asking.\"\n\nMy eyes were welling with tears, when I turned to his wife. She wrapped her arms around my neck, kissing my cheek. \"Of course, Honor. Treat her well. She's still only eighteen and has worn blinders all her life, so be patient with her.\"\n\n\"I will. I'd wait, but I just can't. I can't stand to be apart from her.\"\n\nShe nodded. \"That's good. Soon you'll never have to be apart again.\"\n\n* * *\n\nI was 24, she was 19. Our wedding was the event of a lifetime.\n\nBeth's father made good money, and she was an only child. I had a great job just outside New York City, and was on the fast track to success. She was attending school in the city. We didn't live together, but we never spent a weekend apart. I still lived at home, amidst the extended family, and she fit among us like a hand in a glove. She was adored by my relatives and the feeling seemed mutual.\n\nHer parents footed the bill for the wedding, and didn't mind that there were over 200 guests from my side alone. Most of that was family. We held the wedding in our hometown of Bedenton, a community of less than three thousand, a hop, skip and jump from the NY state line in Connecticut. It was a strange little place to outsiders, half-a-dozen families dominating the town's landscape. There wasn't much in the way of hotels, but we were family, and anyone with a spare room welcomed our guests openly and warmly. Mom gave Beth's family our home for the long weekend, and moved in with her sister, along with Peggy.\n\nWe had some huge tents set up, and Uncle Patrick, or perhaps I should say Father Patrick, came in from his diocese on the Cape, and married us in front of family, friends and God. We were constantly reminded what a handsome couple we were, and how lucky I was. Beth would never let that slide, insisting she was the lucky one, gaining not only the best man alive, but the entire wonderful family. It's easy to see she gained a lot of fans.\n\nShe was stunning. Ravishing. I imagine any red-blooded man's heart would speed up when she was near. Some men might be nervous about the attention she garnered, inadvertently, automatically, simply by being the amazing young woman she was.\n\nNot me. I knew. Without a doubt. Beth had eyes for nobody but me. Her face would light up the room the moment I entered. My cousin Fred teased her horribly. When I first arrived in Bedenton, they made fun of my accent. Fred could mimic me perfectly. Once BB arrived, he was merciless. He would sneak into a room where Beth was, and call out to her. She'd turn, her face lighting up, until she saw who it was. Everyone thought it was funny, everyone except Beth. Once she told me, I put an end to it. Firmly.\n\nI was teased often that she had the same effect on me. I never denied it. She was mine now. Now and forever. I would love her, care for her, protect her, and worship her. I had my relatives to help me. Among the family, she was safe, protected, adored and rightfully so.\n\nThe party lasted two days. We postponed our Niagara Falls honeymoon so we could spend the time among both families and friends, who'd traveled to be with us. Weddings are so hectic, I remember little about the entire event outside of our first dance, vows, and our wedding night. I recall taking stage with the band, and singing 'Beth' for her. I was in a daze most of the time, but I'll never forget the image of her, sitting on the edge of the stage, my sister adjusting my new wife's gown, the familiar look of adoration on BB's beautiful face.\n\nI remember getting to our suite, leaning her over the couch, lifting her bridal train, and taking her there, in her wedding dress, with a frenzy. I was desperate to be inside her. She was laughing, struggling with all the material, where I'd thrown it over her head. Beth even laughed that Peggy, her maid of honor, was lying down on the job. It was her task to keep the dress under control.\n\nThe laughing only lasted a short while, before her delightful moans and gasps erased it. Her thigh-high white stockings encased her heavenly legs, one garter missing, on the leg of one of my cousins now, who'd come out the winner in the brawl to catch the bouquet. Beth's naughty little white lace thong was pulled to the side, rubbing against my shaft while I hammered away at the girl who'd loved me all of her life, and had given herself to me in front of the entire world that day.",
        "I didn't last long inside of her. I'd been excited all evening, physically so, and had been teased mercilessly by family and friends. I took it in stride. I was proud. I loved my new wife, and considered her the sexiest woman alive. Let everyone know it.\n\nWe made love. We fucked. We played. We teased. We made love.\n\nWe were late to the barbecue the next day, since she had to get redressed twice. She bragged about it.\n\nShe was 19, and I was 24. I was the luckiest man alive. I married my soul mate.\n\n* * *\n\nI was 28, she was 23. There were five of us there, cheering loudly as she walked to the podium to accept her MBA. We'd been there a year earlier when she'd finished her Baccalaureate Summa Cum Laude. My woman was a brain. It was funny that I hadn't known it growing up. She was just the little kid next door. No longer.\n\nBeth had her own cheering section: her parents, Mom, Peggy, and her infatuated husband, of course. We screamed until we were hoarse. We had plans, and could move forward with them. Finally.\n\nI was successful in business. Very. Mostly from a fluke, to be honest. I worked on control systems for energy efficient houses, and while on one of our installs, I had a whimsical idea. It was a little out of my area of expertise, so I brought in a couple of family members to help, experimenting on a couple of devices to make the system more efficient. We tested it on my own home, and when I had finished, I had three patents in my name. Two I assigned to the company I worked for, and it got me promotions and bonuses that were beyond my expectations.\n\nIt was enough that I decided to take a risk, with the full support of my family behind me, and started my own business. I left the old company behind after almost six years, in good standing. They had profited mightily from my efforts, and my new business, while in a similar field, was different enough not to be a threat. Just the opposite in fact, generating business for my old bosses, who had no issues with throwing some work my way.\n\nMy name and my reputation stood me in good stead. I'm sure some of my customers thought Honor Energy was difficult to work with, since I would hammer out every detail of each new project before I would sign on the bottom line. The flipside of it was I did what I said I would. No overruns, no slipped schedules and near instant support after the fact. It won me repeat customers, and word-of-mouth new business.\n\nI was good in business, but at heart, I was an inventor, always looking for a way to make anything work better, cheaper, or to find a new solution for an old problem. My third patent closed many a deal, and a fourth one opened new doors. I employed my relatives, since I could trust them absolutely, and the added peer pressure ensured their diligent work and loyalty.\n\nI ignored the old adage of never working with family. I knew better.\n\nI was a fool.\n\nShe was 23, and I was 28. I hired my brainy wife to run the finances, something that I loathed. I employed 11 family and friends. My business was a success and I had to hang onto the reins pretty hard to control the growth. I was the third largest employer in our little town, and brought in more external capital than any other two combined.\n\nWe didn't have a lot of money, since I funneled my profits back into the business. I had something better, the respect of my peers, the trust of my customers, the love of my family, and the best damn woman I'd ever known. My life was golden and it was only going to get better.\n\nBeth had graduated, closing the first chapter of our life together. No more schooling; we'd work together to grow our business, and more importantly, grow our family.\n\nOn her graduation cruise, we spent more time in our cabin than we did outside. We rekindled our passion, which had suffered a little from the demands of starting a business, the time spent apart, and completing five years of college. Nothing drastic or to be worried about, but noticeable to both of us.\n\nWe were more fortunate than most, always candid and honest about our feelings and concerns. We had recognized our issues, talked openly about them, and dealt with them as we could, while we slogged our way through those early years.\n\nBeth had graduated with no debt. I had been in business on my own for well over a year, much of the worst of the growing pains out of the way. I no longer carried all the worry and risk of the new venture by myself. We were partners, in life, in love and in business.\n\nI was 28, she was 23. Two weeks after our second honeymoon, I learned I was going to be a daddy.\n\n* * *\n\nI was 33, she was 28. Our life was perfect.\n\nOr so I thought.\n\nMy business had grown to over 50 employees, most of them extended family members. We were scions of the community, bringing in money, visitors, and second-hand business. My wife was fully integrated into my extended family, our two small children, Marie Carol, and William (Billy) Arnold, were happy, loving and spoiled rotten.\n\nThings were hectic, as could be expected. After the birth of Marie, Beth had reduced her hours to take care of our child, and after Billy, she'd 'retired' to become a stay-at-home mom. She stayed involved, my sounding board, a source of inspiration, and she helped with managing the money end.\n\nThe growth of our business kept me busy, too busy, to be brutally honest. The need to support not only me, but half of my extended family, was a heavy burden. With my wife only contributing part-time, I took over most of her responsibilities as well. I was traveling more, including occasional overseas trips to deal with our vendors and manufacturers. I not only ran the business, but I still spent the equivalent of a full-time job working on my inventions. I had offloaded much of the day-to-day business headaches to my cousin Fred, who had worked on my initial designs with me.\n\nWhen I had first moved to town, after Dad's death, Cousin Fred was one of my core of new friends who helped me get settled in. We'd been best friends since I was 14, and he was smart, a hard worker, and trustworthy, even if he teased too much. I knew I could depend on him to do the right things for the business, and he was one of the key people in deciding who to hire, and who not to, since he knew everyone so well.\n\nBeth and I lived well, but not extravagantly so. Her car was a little nicer than most, but I still drove a five year old Ford F-250. Our house was custom built, on the edge of town, with all the best amenities, but not a mansion by any means. It was a little over 3500 square feet of rambler, with a three-car garage and nice yard. No tennis courts, no pool, no 100-yard long tree-lined entrance drive, just a nice home on a picturesque lot. We could afford better, much better to be honest, but we were happy, living simply, contentedly, among family and friends.\n\nLife was good. Our marriage was strong, and our love life, though limited somewhat by long hours, and two ankle-biters, was passionate. We didn't get to make love every day, but three to four times a week was common, common in amount, not in quality.\n\nBeth was more beautiful than ever, and every time I was alone with her, it rekindled my passion.\n\nIt was a Thursday night, three days before I had to leave for China on a ten-day business trip. We had put the children down for the night, and she had shown up in my study, wearing new sexy lingerie, which explained part of her latest shopping trip into the city the day before.\n\nShe leaned against the doorframe. \"Going to be long, lover?\"\n\nI shut down the spreadsheet. The final numbers could wait for the morning. Standing, I grinned and walked toward her. She giggled, and scurried off to our bedroom with me in hot pursuit.\n\nI caught her and dragged her onto our bed, opening her legs and burying my face between them, while she struggled playfully. I held her firmly, refusing to be dislodged, while I kissed and nibbled her through her lacy baby-blue panties, smelling her need. Her lusty laughter soon turned to impassioned endearments and pulse-racing moans.\n\nBefore long, the filmy material was soaked through, and I pulled the crotch to the side to get direct access to her. I took my time, teasing at first, before working hard to get her off. After the first orgasm, I pulled the panties off, and attacked her sweet pussy. She pulled a pillow over her face, screaming into it, while I brought her to orgasm repeatedly. After maybe 15 or 20 minutes of play, she was fighting to get away, but I hung on for dear life, fingering her hard, teasing her clit mercilessly, while she went multi-orgasmic, coming in waves.\n\nWhen I finally released her, she was trembling, almost in a daze. I stripped and climbed over her. She had rolled over onto her belly, and I opened her legs, guiding my cock into her, and started fucking her slowly. She moaned when I entered her, and after a few minutes, she became responsive again, pushing back against me. I rose up, grabbed her perfect ass cheeks, and pounded her until she was coming for me, the earlier play leaving her ultra-sensitive. I reached up and covered her mouth when she cried out, not wanting to wake the kids.\n\nI went to change positions, when she grabbed me by the shoulders and threw me down on the bed. She mounted me in a frenzy, and fucked herself silly on my cock, completely out of control. I held her hips and did my best to stay with her until she wrung my finish from me, collapsing on my chest.\n\nShe was breathing hard, while I stroked her skin underneath her outfit, which had somehow managed to survive our playtime.\n\n\"God, that was incredible,\" she murmured, her lips caressing the skin of my shoulder.\n\n\"You're always incredible,\" I told her.\n\nShe turned and looked me in the eyes, seriously. She brought her lips to mine tenderly. \"Are you happy, Honor?\"\n\nHer question took me by surprise. \"Deliriously so. I have the perfect wife, two beautiful children, a successful business, and the respect of my friends and family. What's not to love?\"\n\n\"You spend so much time away from us. I thought we'd be spending more time together, not less, as things got better.\"\n\nShe was right. I knew it, and I kept telling myself that after the next big project, I'd dial things back. It had never quite happened.\n\n\"Are you happy, BB?\"\n\nShe gave me a sad smile. \"Content, I guess. Happy enough.\"\n\n\"What's 'enough'? What's wrong?\" I asked.\n\n\"I miss you. When you're gone. When you're working late. When you leave the house before dawn. I know it's for us, for me, for the family. I guess I'm just selfish. I want more of your time for us. We haven't had time for just you and me in forever. We haven't gone on a vacation in two years.\"\n\nI held her in my arms, and gave her a squeeze. \"I'm sorry. You're right. I promise, I'll do what I can to make time for us.\"\n\n\"Do you have to go to China? Can't someone else go? Why does it always have to be you?\"\n\n\"I wish someone else could go. The last two times I let anyone else handle the vendors we got screwed.\"\n\n\"Make Fred go. Isn't that part of his responsibilities? Let him earn his big paycheck, which he's always bragging about.\"\n\n\"Fred keeps this business running. He's in operations, managing the people. I don't think this is something that he could handle.\"\n\nShe appeared irritated. \"Why does it always have to be you? You make the big decisions. You get the customers. You keep everyone happy. You have to create all the new products. If nobody in this town can do the job, find someone who can.\"\n\nI rolled her over, and kissed her softly. \"I'm so sorry, BB. Your happiness is more important than anything to me. You know that don't you?\"\n\n\"In my heart I do. Sometimes my head wonders. When I visit our relatives, and see the husbands coming home at five-fifteen, for six o'clock dinner, and I know that you won't be home for hours, I wonder. When you're gone, and I'm alone in this house with our children, I wonder. When I go to a barbecue, or a party, and you're not there because you're solving some crisis, or visiting a client, or playing in your workshop, I wonder.\"\n\nI showered her face with little kisses, rubbing her soft body, tickling her gently until she giggled. \"Never wonder. You are everything to me.\"\n\n\"Promise?\" she asked, anxiously.\n\n\"I've been yours since you were four years old. You know that.\"\n\nShe giggled again, nibbling my lip. \"Everyone knows.\"\n\nFeeling her soft body against mine, the playful nibbling was bringing my soldier back to life. I ground my hips against her. \"Give me a few more months. There will be changes. I've got several things going on. I'm trying to rein it all in. Let me finish this trip, close these last couple of deals, and you and I will take off for two weeks anywhere in the world you want to go. Just the two of us.\"\n\n\"You're bribing me,\" she teased, pushing back against me.\n\n\"I am. I want it as much as you do. I feel too much responsibility toward this town, and my relatives. They need to make do on their own; I can't support the whole friggin' place. I'm going to cut back, I promise. It's already in the works.\"\n\nShe reached between us, and guided my hard cock back inside her. \"Love me, Honor.\"\n\nI did. Long and slow, holding her, kissing her, doing my best to let her know that she was all that mattered.\n\n* * *\n\nI could make those promises because they were true. I had two new patents in the works. Our most important current one was three years from expiring. I was negotiating with a multi-national to transfer it to them, for a considerable amount of money. One of my new patents would do a similar job better, and we'd have another seven years of protection.\n\nI had spent the last couple of years grooming Fred to take over the business side of things. It was going slow, but I'd always be there to help him. I was in private interviews with the VP of Business Development from my old company. They had a change at the top, and he was looking. He would be going on the trip with me, a sort of extended final interview, and a chance to meet our two most important vendors.\n\nThe company I was negotiating the patent transfer with was sending a team along as well, part of their due-diligence. This was one trip that nobody but I could go on, but that was going to change.\n\nI was letting go, a little, and would be spending more of my time doing what I loved, and less time with the business part of things.\n\nMost importantly, I could do more work from home, and put in more reasonable hours. My time would be spent with my family, with my children and the love of my life.\n\n* * *\n\nThe trip was a success. Exhausting, but everything I needed. The VP needed four weeks to shut down where he was, and wanted an extra couple of weeks afterward to spend some time with his family. I gave him all the details and told him what we could afford. He would be getting a nice chunk of stock, if he stuck with the company at least five years. I told him to go home, and talk it over with his wife. I gave him a week to give me an answer, and jokingly told him that I didn't want an answer before then. I wasn't looking at anyone else for the position, but it was a big decision, and he needed to make sure his family was good with it.\n\nThe patent transfer was an all but done deal. I was told they were going to have a final meeting to rubber stamp the deal on the Thursday after they got back. I should be prepared to sign the papers that Friday, Monday at the latest.\n\nWhile we'd been in China, I'd received the notice that one of my patents was approved, the most important one. My company's future was assured for the next seven years, at least.\n\nEverything was going my way.\n\n* * *\n\nUpon my return, Beth spoiled me, as she did after every trip. She even sent the kids over to Mom's for the night on Tuesday, to give us some quality alone time.\n\nI was bursting with the desire to tell her everything that was happening, but I wanted to wait until the patent was officially transferred, and Gil had accepted the job.\n\nShe could read me like a book, and wanted to know what was going on.\n\nShe was going down on me, in the living room, dressed in lace boy-cut panties, and nothing else. She was licking me, teasing, holding her head over my cock, but refusing to take me in.\n\n\"Spill. I know something's going on,\" she teased, her tongue lashing the crown.\n\nI groaned, nudging my cock forward to no avail. \"Remember the last talk we had, about finding more time for the family?\"\n\nShe grinned, pressing her pursed lips against my cock-head, then pushing down, opening her lips a hint, then pulled back. \"Of course. And...\"\n\n\"Things are coming together, but nothing's set in stone. Give me another week. I promise I'll tell you everything next week.\"\n\n\"Maybe I'll wait a week to finish this,\" she teased.\n\n\"Trust me?\" I asked.\n\nShe sucked the head noisily. \"That, from a man named Honor? Always.\"\n\n\"One week.\"\n\nBeth had a birthday coming up on Monday. I had the family working on a surprise party while I was gone. I can only guess that she thought part of what I was holding back had to do with her birthday, so she gave me a pass.\n\nShe swirled her tongue around the crown, and kissed it again. \"One week. It better be good.\" Then she took me in her mouth, and I sighed.\n\n\"I promise. One week.\"\n\n* * *\n\nThe Saturday birthday party was a success, although I doubt she was surprised. It was hard to keep any secrets in our town, impossible really. Still, she acted surprised when about 50 close friends and family ambushed her as she returned from the mall forty miles away, with Mom and Peggy.\n\nI know she was caught off guard when her parents greeted her. I'd flown them in for the weekend. I'd even brought in two of her best friends from college.\n\nShe thanked me repeatedly that night, and the next morning, until I was afraid my poor cock was going to fall off. She spent Sunday morning with her family and friends. I took her parents to the airport, where they thanked me effusively for flying them in. Beth spent the afternoon getting caught up with her girlfriends, and I snuck into work for a couple of hours, to continue my machinations toward completing my efforts to become less of a workaholic.\n\n* * *\n\nI was 33, she was 29. My world ended.\n\nMonday I traveled into the city to complete the patent deal. There were three, actually, but one was key. What I expected to take an entire day, took less than an hour. No surprises, no last minute changes. I signed the papers, and accepted the check with seven digits. The first number was a two. The patents, as with all of mine, were owned by Honor-BB LLC, not the main business. I'd formed Honor-BB LLC back before my first patent, and I was the sole owner. We agreed to license the patents back from them for six weeks to shut down our use. I even transferred the board designs and firmware drivers that made the magic happen.\n\nThey were happy. I was ecstatic.\n\nI drove straight home, to give Beth the exciting news.\n\nThere were cars in the driveway, but that was no surprise. There always were. Beth was a social animal, and more often than not, someone was over visiting.\n\nNo the cars were not a surprise.\n\nFinding Beth in the living room, riding Fred's cock, while his brother was sitting nearby stroking his own erection, now that was a surprise.\n\nShe was going to town, her back to me, bouncing away merrily to some tune blasting out of the stereo, while porn was showing on the TV. Fred's brother Dale was seated facing my wife, his hand moving rapidly.\n\nLooked like my cousins were giving her their birthday presents.\n\nHappy 29th birthday, Beth.\n\nI guess I wasn't interesting enough to capture their attention. I stood there for a few seconds, in shock, my mind no longer functioning.\n\nThey weren't talking, no damning words about my performance, or their love for each other, nothing like that. She was fucking him. The brother was waiting his turn. My life was a shambles.",
        "I stepped back outside and closed the door. I didn't take pictures. I didn't care to. I didn't go in and beat anyone up. She was obviously doing what she wanted, not coerced or forced.\n\nIn a daze, I walked slowly back to my car. I debated going back in and confronting them. I wondered how long it had been going on, how they'd kept it a secret, in a town our size.\n\nMostly I wondered how they could betray me like that. My wife. My best friend. The mother of my children. My right hand man in business. Forget Dale. He was an asshole, and single. Fred was married with three kids.\n\nThey had destroyed my life.\n\nDoubt gnawed at my gut. There were no secrets in Bedenton. I picked up my phone and made a call. \"Mom?\"\n\n\"Hey Honor, how's business in the big city.\"\n\n\"Great. I'm already on my way back. I couldn't get hold of Beth. You wouldn't know where she is, would you?\"\n\nShe didn't even hesitate. \"I'm pretty sure she's with Peggy, getting a makeover. She left the kids with me. When are you going to get back? I'll let her know when she calls for the kids.\"\n\nAlarms were going off in my head. \"Never mind. I'll surprise her. I got some big news today.\"\n\nMom responded pretty quickly. \"That's great! Can you at least give me a ballpark estimate? Have you left the city yet?\"\n\nMy heart was racing. As I said, there are no secrets in a town the size of Bedenton. Call me paranoid, but I was convinced Mom was a part of the cover-up. My own mother. \"Yeah, but I have a couple of things to do before I see her next. I imagine it will be a while.\"\n\nMom sighed in relief. The bitch. \"You just be careful, I hate you driving into the city. I'll kiss the kids for you.\"\n\nI hung up and made a decision. A hasty one, I'll admit. I opened the side door to the garage, and lifted the garage door by hand, so the opener wouldn't alert anyone, although I doubt they would have heard it.\n\nIt took me less than five minutes to poke holes in all three gas tanks. It was as easy as putting a handful of concrete nails on my three-ton floor jack, and jacking it up under the tank. I took a can of gas and dumped it between the three cars, the two in the driveway, and Beth's in the garage. I grabbed the spare can of propane for the barbecue, and opened the valve, between Fred and Dale's cars. Then I turned my vehicle around, leaving it running, took a flare from the emergency roadside kit, lit it and tossed it into the leaking gas. I hopped in the truck and drove away.\n\nI wasn't fifty yards away when the series of explosions started. I was confident the cheaters wouldn't be injured, the garage was detached. If I was lucky, the fire would spread to the house, but even if it did, Fred should have plenty of time to pull his traitorous dick out of my cheating wife, and get everyone out of the building.\n\nWhile driving to work, I called Gil on my phone. I regretfully told him the company was probably going to shut down, and he shouldn't accept the job as VP. He had lots of questions, but when I explained I'd no longer be part of Honor Energy, he understood. I told him I'd send him a check for the time he'd worked with me in China, and for his trouble, and assured him that in my next venture, if there were to be one, he'd be one of the first guys I'd bring in.\n\nI passed my sister's car turning up my street, as I left. Any doubts I might have had about my mother's and sister's involvement dissipated. I saw the volunteer fire truck fly past, as I continued toward work, the damn truck that Honor Energy had donated to the town. Entering the warehouse, I ignored all the greetings, and headed for my office. My second cousin Jill, our admin, asked if everything was okay.\n\n\"No interruptions. Not for anyone. Nobody. Not for the friggin' president. Understood?\"\n\nShe nodded fearfully, and closed the door.\n\nIt took me about an hour to transfer what I wanted. I had offshore accounts that handled most of our international business. It was partially a tax haven for the business, keeping international money out of the country. I drained them into another Cayman's account for Honor BB-LLC. I called our two biggest customers and apologized for the fact that we wouldn't be able to complete their projects, and that I was stepping down for personal reasons. I got transferred to the CEO's of both, and talked my way past the anger and disappointment, assuring them I'd return all their money.\n\nRoger Hammond, of Hammonds Luxury homes, didn't go down easily. He was one of my first customers, and I considered him a friend. After a long discussion, I agreed to supply him with the materials he could only get from us, including a 10% overage in case of any issues, and I would personally ensure the transfer of the designs and necessary knowledge to complete the project to the company of his choice.\n\n\"Honor, it's me you're talking to,\" he said slowly. \"What the fuck is going on? This isn't you. You'd never dream of defaulting on a job.\"\n\n\"I won't be working here,\" I confessed. \"I can't. Personal issues.\"\n\n\"Personal issues be damned!\" he snapped. \"You're the best at what you do. You can't let some petty shit kill your business.\"\n\nI laughed \"Petty shit? My right hand man is banging my wife.\"\n\n\"Impossible. Beth? No way. That woman worships the quicksand you walk on. Somebody's lying to you. You need to get to the heart of it.\"\n\n\"Maybe you're right. Why should I believe my own damn lying eyes? Hell, I only walked in on her riding him like a cowgirl in my living room, while his brother was waiting his turn. Shit, it's not as if my mother and sister were covering for her, watching the kids, and making excuses for where she was. What could I possibly be thinking? You're right, Roger, I'd better go look again.\"\n\nHe was quiet. \"I'm sorry, Honor. I am. I wouldn't believe it possible in a hundred years. Anything I can do, anything you need, you call me. This ain't some polite gesture neither. I'm dead serious. Call me. Matter of fact, call me no matter what. You need someone to talk to outside of that incestuous little town of yours.\"\n\n\"I appreciate it, Roger. I do. You're a great customer and a better friend. Sorry to unload on you.\"\n\n\"Fuck that. Fuck the business. You do what you have to and I'll do anything I can to help. Promise me you'll call. Soon. Visit if you can.\"\n\nI was choking up. This man was there for me, though he hardly knew me, while my mother, sister, wife and best friend were fucking me over. \"I'll do that. I've got to go. Lots to do before the Sheriff gets here.\" I was already wondering why I hadn't heard from Uncle Luke, Dad's brother.\n\nHe was quiet again. \"Understood. Good luck, and I'm so sorry you're going through this. Call when you can.\"\n\nI phoned the company attorney and it took some work, but I got the big man on the line. I explained what I needed, and turned away all questions. He was reluctant at first, but finally agreed. I put a rush on it, telling him I needed everything by the end of business the following day, and there would be an extra $10K if it was done in time. He assured me they'd figure out a way, what I was asking was pretty straightforward.\n\nI had completed the essentials, and surprisingly nobody had called my cell. I walked out of my office, and Jill hung up her phone guiltily.\n\n\"No calls for me?\" I asked.\n\nShe shook her head. \"No sir.\"\n\n\"Fine. Tomorrow at 11:00 AM, I want a company-wide meeting in the warehouse. Everyone will be there, I don't care what shift they work or what they're doing. Anyone not in attendance will be summarily fired. Set it up.\"\n\nShe was white as a ghost, and nodded.\n\nI got in my car, turned off my cell phone, and headed out of town. I bought some new clothes and toiletries, checked into a nice hotel room, ordered room service, and contemplated what I was going to do with the rest of my life.\n\n* * *\n\nI woke early, from a restless night of seeing my wife cheating on me with everyone I knew. My mother and sister were waiting their turn behind her. They were in the manufacturing shop, and sweet Beth was part of the assembly line, where the men came by and took their turns filling her. When she took her break, Mom stepped up and took her place.\n\nI was nauseous, and couldn't eat, but I did manage to get a few more things done. I felt a little better for that.\n\nI drove up to the office at 11:05, riding my new Harley Road Glide Ultra. Mid-life crisis coming early, I guess. I felt the 24 grand was money well spent. I could afford it. I never bought anything for myself, and it was about fucking time I did.\n\nFred was waiting at the entrance, as was my mother. I parked the motorcycle on the sidewalk, and took off my helmet. I could see the surprise in both their eyes. Mom took a step toward me, and I held up my hand. \"Not now. I'll talk to you later.\" She stopped, her mouth agape.\n\nFred turned to fall in step beside me.\n\n\"Not a fucking word, Fred.\"\n\n\"Don't do anything rash, Honor,\" he started.\n\nI turned and punched him in the face as hard as I could, stunning him and making him stagger backward. \"I told you. Not a single fucking word, asshole.\"\n\nI walked to the warehouse, ignoring everyone who greeted me, and stepped up to the platform. The room quieted.\n\nThere was a microphone setup, but I didn't need it. There were only about 50 people present. I looked over the crowd. I knew everyone who worked for me. Had interviewed and hired each one personally. It took a minute then I turned to Jill. \"Aaron and Misty. They're fired. Two weeks severance, plus one week per year.\"\n\nJill paled, then nodded slowly.\n\n\"Is there anyone present who doesn't have an idea of why I'm here, after the events of last night?\" I asked loudly.\n\nThere was some mumbling and talking, and about 10 people raised their hands.\n\nI pointed to the side. \"If you people would step over there, I'll make sure you're filled in when this is over.\" I nodded to my admin to take care of it.\n\nIt took a minute or two for the separation.\n\n\"Excellent. I have a simple question for all of you. I expect complete and total honesty. I believe I deserve no less. I'd like to think I've treated you all with respect, and for the most part as friends.\"\n\nThere was some murmuring and nodding.\n\n\"Who here suspected or knew what was going on with my wife?\"\n\nMy Uncle Jack stepped forward. He was one of my first hires, and ran the floor. \"Are you going to fire them?\"\n\nI shook my head. \"Nobody else is being fired. Not even the assholes. I just want some fucking honesty for once. Isn't there any fucking honor among the sorry lot of you?\"\n\nUncle Jack stepped closer. \"I'd say almost everyone had some idea. Nothing solid. Nobody wanted to hurt you. We owe you too much. We figured she'd get it out of her system, and straighten up. No one wanted to bust up your marriage. Why don't you and I talk about this privately?\"\n\nI turned away from him. \"I'll ask one more time. Who here suspected or knew what was going on?\"\n\nAll but a handful of people eventually raised their hands. It started with just a few, including Uncle Jack. Before long, a few more people joined in, until 90% had their hands raised. Jill's hand was among them. So was Annie Marshall's, now Annie Lane. Few of them could look me in the eye.\n\n\"Thank you for your honesty. I wish things were otherwise. Maybe someone could have stopped it. Somebody could have told me in private and perhaps things could have been worked out differently. As you can imagine, I can't work with people I consider disloyal, disrespectful, and untrustworthy.\"\n\nUncle Jack had taken on the role of leadership I guess. My mother's brother had always been good to me. His betrayal hurt as bad as anyone's. \"You promised nobody would be fired,\" he stated flatly.\n\n\"I did. As most of you know by now, or at least I hope you do, I'm a man of my word. I'm stepping down. My wife is now the owner of the business. You have enough funds and business to maintain operations for at least four months. Closer to six months, if you don't screw it up. Fred is now in charge. I wish you all success.\"\n\nThere was a lot of talking, and it was getting loud. I'd made my point.\n\nThat was supposed to be it. Walk away taking the high ground. I couldn't do it. \"Strike that last statement. I've never lied to you, and I'm not about to start now. I detest you. All of you. If one person, just one had done the right thing, and stood by me, sided with honor instead of infidelity, things would be different. You dug your own graves. I hope the business goes down in flames, and you all lose everything that matters to you, just as I have today. May you traitorous, honorless, amoral cretins burn for this.\"\n\nTotal silence ensued. I looked down at my uncle. \"Jack. My office.\" I turned to Jill. \"Find Fred and send him to my office as well. If he's not there in ten minutes, Bill will be President. Send him.\"\n\nUncle Jack followed me to my office, and started speaking. I interrupted. \"This is not a discussion, Uncle Jack. I always liked you and respected you. That's no longer the case. You betrayed me just like everyone else. This is business, and we won't talk about anything else. Understood?\"\n\n\"After?\" he asked.\n\n\"Perhaps. I have other things I need to do. Don't ask.\"\n\nHe nodded solemnly.\n\nWe only had to wait a couple of minutes before Fred made his appearance. He had a swollen lip, and some tissue paper stuck in one nostril. I almost smiled.\n\n\"Sit,\" I told him.\n\n\"Honor, it didn't mean anything,\" he began. \"You have to-\"\n\n\"Shut up and sit! Don't make me come across this desk, asshole.\"\n\nHe sat.\n\n\"Today is my last day here. Fred, the company is yours to run in my absence, unless Beth decides otherwise. I'm turning over ownership to her.\"\n\nHis stunned look was priceless.\n\n\"I'm turning all the financials over to Beth. She knows the business; she'll control the accounts. The day-to-day business, sales, marketing, whatever, is under your control Fred. Jack, you're still in charge of the floor. You're here because there are some important changes you need to be aware of.\"\n\nHe nodded.\n\n\"Honor Energy can no longer use the conversion controller assembly as of six weeks from yesterday morning. We no longer own the patent, or the rights to the firmware. You'll need to find some other solution.\"\n\nUncle Jack gasped in surprise. \"What other solution? That's the heart of our business.\"\n\n\"Not my problem. I no longer work here. Understand, you can no longer manufacture them, as of six weeks from yesterday. If I were in your shoes, I'd build all I can in that time, at the expense of everything else. Work three shifts, do what you need to get materials, pay triple if you have to. Then, figure out a way to replace it. I'll let you work it out.\"\n\nUncle Jack nodded slowly, already thinking.\n\n\"Carlyle is no longer a customer. Stop any production for them. Hammonds isn't a customer either, but we're going to supply them with the materials I promised.\" I took a printout from my desk, and gave it to Uncle Jack. \"Pull from inventory. Deliver to Roger Hammonds, in person, within three business days.\"\n\n\"I'll do it myself,\" Uncle Jack said.\n\n\"Good.\" I turned to Fred. \"Passwords, accounts, keys are all here.\" I passed him a sealed envelope. \"I'll work with Beth to complete the business transfer, but she's already on most accounts. All I need to do is remove my name, and give her limited power-of-attorney. You have plenty of funds to keep the business going. There are some challenges ahead of you, but perhaps you can overcome them. Perhaps not. It's your problem now.\"\n\nI got up and left the office, ignoring Uncle Jack's extended hand, or Fred's questions.\n\nI got back on my motorcycle, and rode to see what remained of the home I'd built for the love of my life.\n\n* * *\n\nThere was only twisted metal and blackened ground where Fred's and Dale's cars had been in the driveway. The garage was almost non-existent, collapsed on Beth's Volvo. The fire had done serious damage to the side of the house next to the garage, but surprisingly, it had been contained.\n\nThere was a work crew onsite, trying to patch up the charred entry and laundry room, boarding up broken windows. I walked in the house, surprised that there was no police tape, or anything similar. Nobody was home, and I walked around thinking about what I wanted to take. Sadly, I could come up with nothing except for pictures of my kids. I grabbed a photo of each, and one picture of me holding both of them, from a photo album. I left everything else. I was starting over, and with enough money, it was surprising how little you needed.\n\nI regretted throwing my phone away in a pique of anger, and stopped by Martinson's where I purchased a throwaway. I called my mother.\n\n\"Honor, where are you? We have to talk,\" she answered breathlessly.\n\n\"I'll be over at your house at seven. Make sure Beth is there.\"\n\n\"Thank God! You'll talk, right? This isn't some game or revenge, is it?\"\n\n\"No. We can talk. Make sure her kids are there as well.\"\n\n\"They're here now. You can stop and see them if you want. They miss you terribly. They don't understand why they can't go home, and why you're not here.\"\n\n\"I'll see them at seven.\" I hung up.\n\nI returned to the Harley dealership. They had finished installing the new tie-downs on my truck, and showed me how to use the motorcycle ramp. I drove the bike onto the truck, loaded the ramp back on, and headed to the store for a few things, ignoring the whispers that followed me.\n\nI returned to the office, where my papers were waiting for me, delivered at 4:12 pm, earlier than I had anticipated.\n\nJill had them in her hand, and gave them to me. \"Is there anything else I can do for you, Mr. Nolan?\"\n\nI shook my head, looking at her coldly. \"No. I think you've done enough, Jill. I expected better from you. I thought you'd be loyal to me if nobody else was.\"\n\nShe had tears in her eyes. \"I really thought I was doing what's right. Nobody wanted to see you and Beth breaking up. We tried to talk to her. I swear.\"\n\n\"I don't doubt that. Still, you should have talked to me, taken my side in this. You betrayed me like everyone else. I really don't give a fuck about most of them, but from you it hurts. I don't know why I expected loyalty. I won't make that mistake again.\"\n\nShe sat down and cried, while I turned away, papers in hand. I stopped at the diner and ate. I wasn't planning on eating at Mom's house. I was going there for business. I knew I'd have to sit through some bullshit excuses and apologies, but that was all. I'd let them say their piece. Then I'd finish up what I had to do.\n\nMy cousin Emma served me the open-faced roast beef and fries. Then she sat down opposite me. \"Take her back, forgive her, Honor. It doesn't have to be the end of the world. She screwed up big time, but everyone knows how much you love each other.\"\n\n\"I'm eating, Emma. I don't want to talk about it.\"\n\n\"C'mon, Honor, we're family. We love you both; you have to work this out.\"\n\nI put my utensils down. \"No Emma. I don't have to. I have a failed marriage, with a woman who I'll never know if she really loved me, and two children I'm no longer certain are even mine, a mother and sister who betrayed me, supposed friends and family who took her side, abandoning me. I have no family. Not anymore. If you won't leave me alone, I'll leave.\"\n\nShe got up angrily. \"You are family. It's not something you get to decide about. We care for you.\"\n\nI didn't bother to reply. The fries were pretty good.\n\nI was a little pissed off when another so-called family member sat opposite me.\n\n\"Honor,\" he said by way of greeting.\n\n\"Uncle Jimmy.\" I had another fry.\n\nHe looked anxious. \"I don't want to interfere. I only wanted to let you know I'm sorry. Sorry that I didn't tell you what I knew, little as it was.\"\n\nI lifted an eyebrow. \"What did you know?\"",
        "He shrugged. \"She was behaving badly as far back as three months ago, flirting with Fred more than she should, especially in public and at a couple of parties. He was all over her, and she wasn't shutting him down. When you went on that west coast trip, word got around that she'd spent much of that time with him, at your house. It was rumor, but pretty damning, and I should have said something then.\n\n\"There was a lot of gossip going around. How you and his wife were kept in the dark is still difficult to understand. I expected to see it end long before this.\"\n\nHe took a deep breath. \"God damn, I was such an idiot. I let some well-meaning jerkoffs talk me out of saying something. On your trip to China, they were blatant. He missed almost every day at work, and they went out to dinner together, twice. Fuckin' holding hands, even. Jean asked me what was going on, and I told her my suspicions and what I'd heard. She tore me a new asshole. You know she's not from here, doesn't have the same distorted loyalties as the rest of this bunch.\"\n\nHe looked up at me, and I saw tears in his eyes. \"I'm so ashamed, Honor. I am. Ashamed for the whole fucking town. You did right by me, better than right. Gave me a job when I needed one. Promoted me twice, despite the fact I have no education to speak of.\"\n\nI nodded at him. \"You earned them both, Uncle Jimmy. You're smarter than most of those college trained kids, and dependable. I have no fault with your work. I never have.\"\n\nHe shook his head. \"I can read between the lines, Honor. No fault with my work. Plenty of fault with my job as a man. I let you down, and I'm sorry.\" He held his head in his hands, \"Damn it, man! You're putting my kid through college. Hell, you put two of the little bastards through every year. Your own damn secretary, and she didn't clue you in. How the hell am I supposed to tell my son that his schooling is through, because I and every other dipshit in this town have no honor?\"\n\n\"Don't tell Stephen anything. He didn't do anything wrong. His scholarship is still good, fully funded from day one. He can complete his degree. I'm sure he'll be a fine engineer.\"\n\nUncle Jimmy wiped his eyes. \"I... well... that's all I wanted to say. You do what you have to. Fuck the rest of them. I'm sorry I didn't do what's right, and I'll always regret it. You deserve so much better.\"\n\n\"Thank you,\" I told him. I meant it.\n\nHe got up, then stood for a second. \"Honor, I've known you a long time. I've never in my life heard you utter a lie, not even a little white one. I heard what you said to Emma. Don't start lying now, even if it's to yourself. You know that woman loves you. Always has and always will. Whatever caused her to pull this shit, it wasn't for lack of love. You know that.\"\n\nI glared at him angrily. \"Is that all?\"\n\nHe nodded. \"I'm sorry to intrude on your dinner. I hope someday you can forgive me. I pray that before then, you can find a way to forgive her, for your own sake.\"\n\nFor some reason, the fries were no longer all that tempting.\n\n* * *\n\nIt was difficult to get out of the truck and walk up to the front door. In some ways, Mom had hurt me even worse than Beth. We had always been so close. We could talk about anything. And yet, she had betrayed me, covering for my cheating wife. What happened to blood being thicker than water? I didn't know how to forgive that. Not sure I could, or that I wanted to.\n\nI rang the doorbell and waited. After a minute or so, Mom answered the door.\n\n\"Why'd you ring the bell?\"\n\n\"I wanted to come in and talk,\" I explained, waiting for her invitation in.\n\nShe stared at me sadly. \"You're always welcome in this home. It's your home as well. You know that.\"\n\n\"Not any longer. Not after this.\"\n\nShe looked angry. \"Are you coming in, or are you going to stand there all day?\"\n\nI turned and left. \"We'll do this some other time.\"\n\nMom ran after me, grabbing my arm. \"No. We'll do this now!\"\n\nI pulled my arm away. \"Mrs. Nolan, you no longer have the right to tell me what I am or am not going to do. I need you to understand that. When you can be civil, we can talk.\"\n\n\"Why are you acting like this, Honor? This isn't you. You're better than this.\"\n\n\"I'm not acting. I'm sick to death over her, you, and everyone else in this God-forsaken town. I just want to finish things up and move on, away from this piss-hole and the scum inhabiting it.\"\n\nI walked to my truck, and she ran in front of me, blocking my way. \"Your children. Don't you want to see your children?\"\n\n\"Of course I do. I will. If you or anyone else tries to hold them hostage, I'll burn this fucking house down, and everybody in it. This whole fucking town if I have to.\"\n\nShe stared at me in shock. \"Why are you so angry?\"\n\n\"Why am I angry?\" I was ready to burst. \"You have the fucking gall to ask me that? My wife is a cheating slut, my best friend is fucking her, my mother is covering her tracks, as is my charming sister. The whole God-damned company knew and is siding with her. Why the fuck could I possibly be angry!\"\n\n\"Stop, baby. You don't want your kids to see you like this. There's more to it than that; you know it. Come in, please. We need to talk. You have to give her a chance.\"\n\n\"I don't have to do shit.\" I turned and headed back to the house. \"I'll listen. Then you will. I'll visit with the kids. That's all.\"\n\nShe was walking beside me. \"Try to be calm, please. No shouting. Beth is a mess. The kids are upset. Let's not make this any worse than it is.\"\n\nI laughed. \"Of course not. Hard to make it worse, isn't it?\"\n\nTen feet inside the door, little Marie came running up to me. I scooped her up, and hugged her. Billy was toddling over, walking and crawling. He still didn't have the walking thing down very good. I scooped him up in my other arm, holding my kids. At least I hoped they were mine.\n\n\"Daddy!\" Marie squealed. \"Mommy's sad. You have to fix it.\"\n\nThat had been my job for as long as she could remember. Anything went bad, Daddy fixed it. I wasn't sure I could fix this one, or if I even wanted to. I'd just disappear if it wasn't for the two children I was holding.\n\n\"I'll see what I can do, Precious.\"\n\nShe gave me a kiss. \"When can we go home?\"\n\n\"Soon. Daddy has things he has to do, but you, Billy and Mommy can go home soon.\"\n\n\"You, too, Daddy. You, too. No more travel,\" she insisted.\n\nI didn't give her an answer. I couldn't. She wouldn't understand. I know I sure as hell didn't. I put them down, and saw Beth standing nervously nearby. When the kids were on the floor, she walked over to me, but I held my hand out, stopping her. \"You wanted to talk. I'll listen. That's all.\"\n\nShe nodded, and my mother interrupted. \"Over dinner. I made my roast.\"\n\nI had anticipated that. A bribe. Her roast was my favorite. \"I already ate.\"\n\nPeggy stuck her head out of the kitchen. \"Well that's perfect! Didn't anyone think to tell him about dinner?\"\n\nMom turned red. \"Why don't we go in the living room? Peg, can you feed the kids?\"\n\nMy sister sighed, the eternal martyr. \"Sure. Why not? It's not like I'm family.\"\n\nI sat down in the armchair, while Beth and my mother sat on the couch. I pulled the folded papers out of my back pocket, and straightened them, placing them beside me. \"I'm listening.\"\n\nBeth looked at me, then at Mom. Mom nodded to her. Already prepping her, I'm sure.\n\n\"I have no excuse, Honor. None. I've been an idiot. You have to know I love you more than anything in the world, and it's killing me what I've done to us. Fred means nothing to me, and Dale even less.\"\n\nI sat stoically, not responding, waiting to hear what excuse she'd use, despite claiming to have none.\n\n\"Three times. I was with him three times. The last one was a mistake. It was never meant to happen, I was ending it. I still can't explain why I let it happen that last time. After our discussion, I couldn't keep doing it. The first time was when you went to California. The second time was this last trip. I didn't want you to go. I was afraid of what might happen if you did. I begged you to send him instead. Remember?\"\n\n\"Is that it?\" I asked.\n\nShe kept looking around nervously, as if someone would take over for her. \"I... I wasn't thinking straight. I don't love him; I don't even like him very much. He wanted me, and kept hounding me, pursuing me. He told me that you were screwing around, but I didn't believe him. I never did, I swear. I knew you wouldn't. He was always complimenting me, touching me, always pushing the boundaries. I don't know why I finally gave in. It was like it wasn't even me doing it. It was stupid. I was lonely for you, missing you, and he stepped in.\"\n\nI waited patiently.\n\n\"What are you going to do?\" she whined plaintively. \"I'll never do anything like that again. I swear, I'll spend the rest of my life making it up to you. We can get past this. I know you love me. I love you more than anything. We'll be fine, won't we?\"\n\nI shrugged. \"I'll be fine, eventually. I don't know about you. I have one question. Are the kids mine?\"\n\nShe stared at me in shock. \"How could you ask that? Of course they are!\"\n\n\"I'm going to want DNA proof. Take care of that this week.\" I turned to my mother. \"What do you have to say about your role in this?\"\n\nShe looked stunned. \"What role? I just want to make sure you both get through this, and can find your way to forgive each other.\"\n\nI laughed. \"Forgive each other? What is she supposed to forgive me for?\"\n\n\"For burning your house down, to start with. For leaving her alone so much. For not confronting her when you found out.\"\n\n\"How long did you know, Mrs. Nolan? How long were you covering for her?\"\n\nMom turned red. \"I wasn't covering for her. I was trying to fix things.\"\n\n\"How long?\" I snapped.\n\n\"Why does it matter? It's over and done with. She won't be doing that again.\"\n\n\"God Damn it! How fucking long, Judas!\" I yelled.\n\n\"If you won't hold a civil tongue, you can leave my house!\"\n\nI stood and threw the papers at Beth. \"Sign these. Don't make any changes. I'll call you and tell you where you can drop them off.\"\n\nI faced my mother. \"I detest what you've done to us. Worse than what she did. You betrayed your only son, for some cheating slut. I don't think I'll ever be able to forgive you. Dad asked me to take care of you, so for his sake, you will continue to receive three grand a month, as long as you live. Other than that, I don't want any contact with you.\"\n\nI turned and walked away. Mom yelled, \"Don't you dare walk away! We're not done here!\"\n\n\"I'm done with all of you. With all of this. Sign the fucking papers. Don't call; don't write. I don't want to talk to any of you.\"\n\nBeth was sobbing, Mom was screaming. The kids were crying. Peggy followed me out the door. \"Don't leave, Honor. Not like this. You said you were going to listen.\"\n\nI didn't slow down. \"I did listen. Beth told me what I knew, and gave me no reason to ever believe or trust her again. Mom wouldn't even tell me the truth. How long have you guys known?\"\n\nShe didn't hesitate. \"From the start. Before she even did it the first time. We told her that her behavior was unacceptable. She said it was nothing, just some flirting, teasing. She wanted to get your attention, make you jealous. We tried to stop her. We cursed her and yelled at her after she did it. She was repentant as hell, devastated, and then two months later she went and did it again, after she swore it was over.\"\n\nI got in my truck, and Peggy climbed in the passenger seat. \"Get out Peg. I don't want you here. You sided with her. You can stick with her. All the little deceitful betrayers can stick together.\"\n\n\"Of course we stuck with her. We knew going to you would be useless. The only way to fix it was fix her. Besides, everyone would take her side. Nobody likes you Honor. We love you, but Jesus, nobody can stand you most of the time. I don't see how she does it.\"\n\nI turned to her. \"Out. I don't need you. I don't need any of you.\"\n\nShe shook her head. \"No. They had their say, now it's my turn.\"\n\nI started the truck, and pulled out.\n\n\"Where are you going?\" Peggy snapped.\n\n\"To my hotel. Away from all of you, and all of this. I suggest you get out soon, it's a long walk back.\"\n\n\"You always have to be such a hard-ass, Honor. You can never bend. Can't you see that's your undoing? You think you're so honorable, so good, so fair. Nobody wants to be around someone like that. Sure, they trust you, and they respect you, but most of all they fear you.\"\n\n\"That's ridiculous. Nobody fears me. Obviously.\"\n\n\"You remember cousin Robby? You fired him for smoking pot on the loading dock.\"\n\n\"Of course I did. Using illegal drugs at work? It's a no-brainer.\"\n\n\"To you it is. He's family. You could have warned him. Given him a break. You fired him.\"\n\n\"I didn't fire his wife. I gave him six weeks' severance. I even offered to get him into drug rehab.\"\n\n\"He was smoking a damn joint! That's all.\"\n\n\"That's enough. He knew better. He could have waited to do it at home. Not at work. I can't accept that.\"\n\n\"What about Trey and Lisa?\"\n\n\"What about them? I didn't fire them. I probably should have.\"\n\n\"No. You outed them. You gave them 30 days without pay, and told them to go home and fix things with their spouses. You told them if you ever saw them even flirting in the office, you'd fire them both.\"\n\n\"I had to. We could get sued for allowing a workplace romance, especially between a supervisor and someone that worked for her.\"\n\n\"No. You could have spoken to them civilly. Warned them about their behavior. You could have told them to keep it out of the office, and let them fix their own problems in private. Instead you announced it to the world.\"\n\n\"I did not. I never said a word to anyone.\"\n\n\"You didn't say anything. Making the two of them take a month off without pay said everything.\"\n\n\"They shouldn't be screwing around in the first place, especially not at work. I even made up the money to them in their Christmas bonus. I guess you're always going to side with cheaters now. First them, and now the slut.\"\n\n\"You're right of course. You're always right, Honor. They broke the rules. They had to pay. You couldn't treat them like family, try to help them. No, you caused one divorce, and one seriously fucked up marriage.\"\n\n\"I didn't cause anything. I didn't fuck around. They did. They got caught. There are consequences.\"\n\n\"Of course there are. With you there always are. Are you surprised nobody told you about your wife? Nobody would ever side with you. They're afraid. We all have our sins, everyone except immaculate Honor. We all love Beth. She's more family than you are. She listens, she's helpful, she's always involved. She cares. You have your damn business and nothing else.\"\n\n\"I guess that won't be a problem anymore then, will it?\"\n\nShe looked at me. \"What is that supposed to mean?\"\n\n\"You must have heard. I don't have the business anymore. It's hers now. Hers and Fred's, and all the rest of you. I quit. She owns it. Fred gets to run it. Let them figure out how to keep it going, keeps the business flowing, keep the dollars coming in. Let them support this fucking turncoat family and everyone else in this lousy town. I'm done. All the better if nobody likes me. I don't like them.\"\n\nHer voice trembled as she turned in her seat, facing me. \"What did you do, Honor?\"\n\n\"I told you. I quit. I'm done. I don't need this shit. I didn't love the job; I did it for you all. For her. For the family, for this whole fucking town. I gave them jobs, great jobs, paying better than anyone in the industry. The best benefits. Who else provides one hundred percent family health coverage at no cost? I put their kids through college. I gave them loans when they needed it. I bring ten million a year into this town, and they betray me. All of them. Well fuck them, and fuck you. I'm done.\"\n\n\"You can't do that. What are you going to do now? Who's going to keep the business going? Fred can't. You can't just walk away.\"\n\n\"I can and I did. According to everyone, I let the job interfere with my marriage. Like I wanted that. Well, never again. No job. No family. It's so much easier this way.\"\n\n\"This is stupid. You love that business, and you love Beth. You can't walk away from them.\"\n\n\"I never loved the business. I love inventing things, creating things. All the other shit I did because someone had to, and nobody else seemed to do it well enough. I did love Beth. Past tense. Now I hate her. Hate what she did, and what she did to us. I can walk away. I am.\"\n\n\"I know you're angry, Honor. I understand; I do. You need to take some time, think things over. Take a break, I don't know, take a trip or something. Get your head on straight. You can't just destroy your company out of anger. You can't walk away from the love of your life and ten years of marriage over a stupid mistake.\"\n\n\"I'm not destroying my company. It's still there. I just won't be wrecking my life because of it. Let somebody else do the heavy lifting for a while. I don't have to be the hard-ass anymore. I don't have to worry about payroll, and where the next job is going to come from. It's not my concern how we're going to maintain our business advantage. I won't stay up nights, sweating bullets over each project finishing on time, and doing the quality work we should. Not my problem now. Let someone else keep it going.\"\n\nMy sister was quiet until I pulled up in front of the hotel. \"You're going to fuck all of us, because of what she did, aren't you? Not enough to punish her and Fred. You're going to destroy everybody.\"\n\n\"I'm not doing anything. Besides, any one of you could have stopped this, two months ago. Hell, even a week ago. But nobody likes me. Nobody cares enough to take my side. Not one single fucking person. Why should I care about any of you?\"\n\n\"We're family, Honor. Your family.\"\n\n\"Not anymore.\" I opened the door. \"I'm going to my room now. I don't care what you do.\"\n\n\"You're not going to take me home?\"\n\n\"Of course not. I told you that, and you know I'm a man of my word. Get a cab, walk, call someone. I don't care. You mean less than nothing to me. You betrayed me like the rest of them. You destroyed my marriage as much as the cheating slut.\"\n\n\"We tried to save it!\" she insisted loudly.\n\n\"Well, I hope you do a better job of running the company, than you did saving my marriage.\"\n\nI left her standing by the truck. I didn't feel good about it, but it didn't bother me all that much either.\n\n================ "
    ],
    "authorname": "Tx Tall Tales",
    "tags": [
        "love",
        "betrayal",
        "cheating",
        "revenge",
        "family",
        "honor",
        "legends day"
    ],
    "category": "Loving Wives",
    "url": "https://www.literotica.com/s/a-town-without-honor-ch-01"
}
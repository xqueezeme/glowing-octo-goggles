{
    "title": "M Club Ch. 11",
    "pages": [
        "The first rule of M Club is: You don't talk about M Club. The second rule of M Club is: You don't talk about M Club. Third rule of M Club: No touching anyone but yourself. Fourth rule: No recording devices. Fifth rule: No clothing below the waist. Sixth rule: If this is your first time at M Club, you must masturbate. \n\n* * *\n\nAndy should have been feeling good about things. Sure, his relationship with Lisa hadn't exactly taken off into a proper boyfriend-girlfriend arrangement, but they were still hanging out occasionally and enjoyed one another's company for what it was. Then there was Denby, his best friend's girlfriend, with whom he'd become rather enamored. Twice they had privately masturbated with one another and those two episodes had revealed a fun, dirty side to the otherwise prim girl that he found especially attractive. He wasn't quite sure where she stood with him, but there seemed to be a glimmer of possibility things might go further. At their last M Club meeting, Andy had even jerked off on Denby's tits right in front of Sean and he hadn't acted the least bit bothered.\n\nAlmost everything in the last month of his high school career had been perfect. Unfortunately, the thorn in his side went by the name of Vida Chaudan, and the petite pistol was closing in on him with a sense of inevitability down the bustling hallway between classes. His palms began to sweat and he felt a clenching in his chest. He could slip down a side hall and take the long way to his next class, but that would only drag out his anxiety.\n\n\"Heya Andy,\" Vida said with bubbly enthusiasm as she fell into step beside him. He was unable to read whether it was genuine or fake.\n\n\"Hi Vida.\" He looked around, expecting everyone to take note of their walking together. Vida, a cute girl with long black hair, dark complexion, and alluring eyes - all thanks to her Indian heritage - ran in a higher social circle that rarely overlapped with his. Other students would note their pairing and raise questions. Questions he didn't want to answer.\n\n\"So, I was wondering, what's M Club?\" What plans do you have for the weekend? Do you like chocolate? Some weather, huh? That was the innocence with which she asked the loaded question. At least she wasn't beating around the bush, and he also knew she had probably heard the entire thing.\n\nTwo days ago, he and Denby and Vida and the rest of their high school band had been stuck waiting for their bus to get repaired following the solo and ensemble competition. To pass the time, he and Den had snuck into what they'd believed to be an empty library where they had masturbated to some seriously suggestive and dirty talk. After the incredible climax, he'd gone off to the librarians' desk in search of tissues. He'd found Vida hiding behind the desk, phone in hand, grinning like a fool while holding a finger over her lips to silence him. There was no way she hadn't heard and possibly seen some or all their playing.\n\nAndy had been horrified, fearing she'd tell everyone. It would ruin him and Denby, and by extension probably Sean and their relationship, socially if not academically. What would the school administration do to them? Would they still get to graduate? He'd intended to talk it through with Denby and possibly the others, but he hadn't wanted to ruin a perfectly good mood ahead of their M Club meeting at Lisa's house. Afterward, he couldn't find the courage or right time to bring it up.\n\n\"I don't know what you're talking about,\" he said, trying to hide his nerves.\n\n\"You're a lousy liar,\" she said. \"Did you tell Denby?\"\n\nAndy felt her looking at him, but couldn't meet her eyes. He took a deep breath. \"No.\"\n\nVida clicked her tongue. \"Secrets within secrets. You know that can't end well.\"\n\nAt that comment, he did look at her. Her face was innocent, smiling, and impenetrable. He wouldn't want to play poker against her.\n\nHe asked the question that had weighed on him ever since. \"Have you said anything to anyone?\"\n\nVida smiled and patted him on the arm. \"Relax. No, I haven't. Not yet, anyway.\"\n\nShit, shit, shit! What did she want? Vida was popular, but also well-regarded as a good student and friendly person. She also had a reputation under the surface of being a bit wild and sexually experienced. Rumor had it she'd given her virginity to a senior when she was just a freshman and she'd gone through boyfriends like tissue paper. He'd heard she had been dating some college guy for most of their senior year, but didn't know more than that.\n\n\"I'd prefer it stay that way.\"\n\n\"I can imagine,\" Vida said. \"Which is why it would be really smart of you to answer my original question.\"\n\nShe wasn't going to let this go. The rules of M Club were explicit - they weren't supposed to talk about it. But what now, when Vida already knew? He needed to talk to the others and figure out how best to control the damage.\n\n\"I would if I could,\" he said.\n\nVida chuckled. \"Or what? You'd have to kill me?\"\n\nSomething in the tone of her teasing made him wonder if she wasn't approaching this as more playful curiosity than an attempt to fuck with him. He'd never heard of her doing anything to ruin someone. Perhaps he'd simply jumped to worst case scenario, given the stakes and subject matter.\n\n\"Look, I have to get to class,\" he said. \"Can I answer your question later? After I straighten out a few things first?\"\n\nVida nodded. \"You need to clear it with the rest of the club, huh? Okay. I'll give you until the end of the school day. Meet me in the cafeteria after the last bell.\"\n\nBefore he could respond, she disappeared from his side and was lost in the throng moving the other direction down the hall. Apparently, her terms weren't up for negotiation.\n\n* * *\n\n\"Well, that's not good,\" Sean said, leaning across the cafeteria table and speaking in hushed tones to the rest of the club. They had taken the news of Andy's revelation about as well as he'd expected - poorly - and he still felt responsible for the problem despite being just as much a victim as the others.\n\nDenby looked ill, but Lisa managed to maintain a bit of objectivity and asked, \"Did she take pictures or video?\" \n\nAndy shrugged. \"She didn't say. But, she was holding her phone when I found her in the library. So, it's entirely possible.\"\n\n\"Then we probably have to assume she did.\" Sean, while clearly concerned, had an unflappable air about him as if he was a PR professional handling the usual sort of weekly crisis. That attitude simultaneously impressed and irritated Andy.\n\n\"It's all my fault,\" Denby muttered. \"I shouldn't have pushed things out in public like that. Just inviting disaster.\"\n\n\"Don't,\" Andy said. \"I didn't have to play along. And we've all taken risks with this. That spot in the park isn't foolproof, either.\"\n\n\"Andy's right,\" Lisa said, placing a hand over Denby's. \"This is on all of us.\"\n\n\"I don't know Vida well, but I don't think she's the sort who'd try to leverage this over us,\" Sean said. \"But, I also don't know if she'd share it with some friends. And if that happened, it's probably impossible to stop from spreading.\"\n\nDenby paled further. \"Then what? Kicked out of school? Ridiculed forever?\"\n\nSean looked sympathetic. \"Rather than worry about something that may or may not happen, let's deal with what's in our control. At the moment, that's pretty much limited to talking with her. We have to assume she heard everything you two said. Can you remember what all that might have been?\"\n\nDenby looked at Andy. He spoke for them, though his memory was sketchy. \"Well, we mentioned the club, since Vida knew it by name. She also probably knows you two were messing around together, because we talked a little about that. That gives her our four names. She also probably knew we were getting together after we got back from contest.\"\n\nSean looked to Denby who only nodded in agreement. \"Okay,\" he said. \"She may just be curious. Heck, she might even want to join.\"\n\nLisa looked dubious. \"Why would she want to hang with us? Let alone that way?\"\n\nSean spread his hands. \"Well, look at it the other way. If she wanted to blackmail us, she could have just delivered demands to Andy. If she wanted to make us look bad, it'd be all done by now. If she got a kick out of watching but had no further interest, she'd have probably just left it at that and never brought it up again. So...maybe she is curious.\"\n\nAndy often found Sean's cool logic borderline arrogant, like listening to a Vulcan, but he did find some comfort in his friend's analysis. It would, under the circumstances, probably be the best possible outcome.\n\nAndy said, \"Okay, so if we do tell her about the club and she wants to join, do we let her?\"\n\nLooks were exchanged. \"I think we have to,\" Lisa said. \"Or we're back to worrying about what she might do.\"\n\n\"She does have a bit of a reputation,\" Andy said. Judging by the baffled looks of the others, they weren't familiar with it. \"As a girl who sleeps around. Not with anyone and everyone, but supposedly she's been rather open about sex since freshman year. If rumor is true.\"\n\nLisa visibly relaxed a bit. \"Well, we don't have anything directly to hold over her, but she'd have to know her own record ain't exactly squeaky clean. If that's true about her, then maybe she is more interested in joining.\"\n\n\"Or at least finding out more,\" said Denby, also brightening slightly. \"God, I hope that's it.\"\n\n\"So, we let her audition, if that's what she wants?\" Sean looked around the table and got nods.\n\n\"Just her, though,\" Denby said. \"I'm not sure I could handle the club getting much bigger. It's one thing with you guys, but too many unfamiliar people and I'm not sure I'd still be comfortable.\"\n\n\"Agreed,\" Andy said. \"Plus, more chances for leaks.\"\n\nSean nodded. \"You gonna talk to her alone, or you want me or everyone else along?\"\n\nAndy was almost surprised to be given the choice. Having backup wouldn't hurt, but he thought Vida might be more understanding if the conversation was one on one. And, clearly, he knew her better than the others, if only just barely.\n\n\"I'll do it,\" he said. \"And I'll let you all know how it went. Are we on for tomorrow after school? Should she want to audition...\"\n\nEveryone agreed that tomorrow was still good. There was still an air of tension through the group, but also hints of optimism that this wouldn't end badly. Andy felt a lot of responsibility riding on him to get through this afternoon for all their sakes.\n\n* * * \n\nThree hours later, Andy found himself sitting at the very same cafeteria table, anxiously awaiting Vida's appearance. What if she wasn't alone? What if she'd already told a bunch of her friends and they were coming to confront and humiliate him? Or, worse, she'd informed one of the admins and they were going to run him through the real grinder of school policy?\n\nHe shook his head, chastising himself for dwelling on worst case scenarios. When she finally appeared in the cafeteria, alone, he felt most of his tension drain away. He glanced around at the pockets of other students sitting at tables or otherwise passing through, but none seemed remotely interested or likely to interfere with them.\n\nVida smiled as she approached. For a girl who might only top five feet when in heels, she somehow managed to look leggy in shorts that tested the school dress code. Andy was pretty sure she'd spent some years on the school's gymnastics and dive teams. Regardless, her legs were strong with well-defined calves. She wore a tight-fitting t-shirt that hinted at a flat tummy and breasts that weren't much bigger. Despite lacking in the curves department, she still managed to exude a confident sexuality.\n\nShe slid onto the bench across from him and dropped her bag on the table. \"Glad to see you didn't forget.\"\n\n\"How could I forget you?\" He tried to act cool and confident, but was pretty sure she saw through it.\n\nVida sighed. \"Smooth talker, huh?\"\n\nAndy just shrugged, afraid of digging himself a deeper hole if he tried to get cute.\n\n\"So, did you talk with the rest of your club?\"\n\nAndy nodded. \"We talked.\"\n\n\"And?\" Vida leaned forward, a glint in those deep brown eyes.\n\n\"I can answer your question.\"\n\nShe grinned broadly, a truly beautiful look for her. \"Excellent. Let's hear it.\"\n\nAndy took a deep breath to calm his nerves and leaned in closer as well so as not to be overheard. \"First, this has to stay between us. You and me. No one else.\"\n\nVida considered before answering. \"I'll tentatively agree, but no promises. I'm not out to get you, or out you, if that's what you're worried about.\"\n\nAndy breathed a sigh of relief. \"Frankly, I was.\"\n\n\"As well you should have been, after what I saw.\"\n\nAndy felt himself blush. \"The club, if you want to call it that, is just a couple friends who...play...together once in a while.\"\n\nSomehow, Vida's grin widened. \"So, I'm right in assuming the M stands for masturbation?\"\n\nAndy nodded. \"There are strict rules. No touching anyone but yourself.\"\n\n\"Fascinating.\" Vida leaned back for a moment as she took it in. \"And how long has this club been around?\"\n\nAndy figured that information was safe to share. \"About a month.\"\n\nVida chuckled. \"Oh, good. Here I was worried that I'd completely missed out. Or been overlooked.\"\n\n\"Wait. What?\" \n\nShe leaned forward. \"When I heard you mention club the other day, and saw what you were up to, I wondered if there wasn't some secret underground club at this school that I'd missed out on. I mean, well, there clearly is, but at least it isn't some long standing tradition or something like that.\"\n\n\"Oh, no.\" Andy was stunned by her reaction. And, yet, on some level he completely believed her.\n\n\"How many members? I know about you and Denby, and I gathered Sean since you're friends and he's dating her. Lisa? Anyone else?\"\n\n\"That's it,\" he said. \"Like I said, small. Hardly worth calling a club. That was more of an inside joke, calling it that.\"\n\n\"But you have rules.\"\n\nAndy conceded the point. \"A few.\"\n\n\"Such as?\"\n\nAndy looked around, but still found they had aroused the interest of no one else. \"Well, for starters, we can't talk about the club. That's rule number one. And two and maybe three.\"\n\nVida nodded. \"Explaining your reaction earlier. What else?\"\n\nAndy had to think a moment to recall the others. \"Uh, well, there's the no touching anyone else. And no pictures or video. And new prospects must play with themselves first time in front of the others. I think that covers most of them.\"\n\n\"Simple and to the point,\" she said. \"I like it. So, how does one become a prospect?\"\n\nEven though they'd discussed this possibility, Andy was surprised at her interest. He figured most high schoolers would be too terrified to masturbate in front of others. Maybe he was mistaken. Or, he correctly himself, he was unfairly projecting the average student on to the distinctly unaverage Vida.\n\n\"Ask, I guess,\" he said. \"Then audition.\"\n\nVida smiled as she leaned further forward. \"Okay. I'm asking. When can I audition?\"\n\n\"Seriously?\"\n\nVida looked almost hurt. \"Yeah. Why, you don't want me?\"\n\nAndy held up his hands. \"Look, I'm not saying I have a problem with it. I'm just a little surprised that you're so...eager. It's not like you know any of us very well.\"\n\nShe shrugged. \"True. I guess I'm just adventurous. Always looking for new things to try.\" She leaned in closer still. \"And, to be perfectly honest, the way you and Den were going at it with each other, even without touching. Fuck, that was some hot shit. I'd have never pegged either of you for that sort of thing. I want to see what's going on behind the scenes.\"\n\nAndy's cheeks burned, but he was privately pleased to hear a compliment like that coming from a girl like Vida. \n\n\"Okay, then,\" he said. \"Just remember the first rule - there is no M Club.\"\n\nShe nodded. \"I get it. But, I might have to tell my boyfriend. Can't be keeping secrets.\"\n\nAndy hadn't considered the boyfriend, still unknown to him, but it was better than her asking to bring in a bunch of other friends. Or was it? He wouldn't mind seeing a couple more naked girls over another guy. But, frankly, Lisa and Denby were quite enough to keep his attention and fantasies fueled.\n\n\"I suppose,\" he said. \"But maybe wait until after your audition, in case you decide not to join?\"\n\n\"Deal,\" she said, offering her hand which he took. \"So, when?\"\n\n\"You free after school tomorrow?\"\n\n\"I am now. Where?\"\n\nAndy thought they were going to hit the park if the weather cooperated. It wasn't a place he could talk her through finding, though.\n\n\"Not sure yet. I'll let you know tomorrow once we've decided.\"\n\nVida rose, smiling. \"Awesome. I can't wait.\"\n\nAndy waved as she wandered off, relief washing over him. He couldn't always read people very well, but he was almost certain she wasn't putting him on. And, if genuine, it would add a bit of new dynamic to the group, for better or worse.\n\nHe fished out his phone and began composing a text to give the others the update.\n\n* * *\n\nAndy had a disquieting feel about the day's M Club meeting, though it had little to do with Vida's impending audition. Due to damp conditions, they'd been forced to find an alternative place to meet, and ultimately his apartment ended up being the only feasible option. He was self-conscious about the small and rather unkempt place he shared with his mother and preferred not to have friends over aside from occasionally one of the guys. Sean had been there many times, but neither of the girls had. Vida, meanwhile, was known to have wealthy parents, and he especially feared how his hosting would reflect not only on him but the club.\n\nHe'd convinced the others to give him a five-minute head start to allow him to pick up a bit. It wasn't much, but he cleared some of the debris and dirty dishes, pulled up his bedsheets, and tossed the piles of dirty laundry into the overfull hamper. By the time there was a knock at the door, he'd improved it from humiliating to merely embarrassing.\n\nHe opened the door and found Vida waiting. She'd worn a yellow print sun-dress with a white sweater against the damp chill. It was a good look for her, contrasting nicely with her darker skin and drawing attention to her shapely legs. He noted the immaculately pedicured red toenails and immediately imagined what a joy it would be to give those feet a massage.\n\n\"Guess I got the right place,\" she said, giving him her familiar smile. \n\n\"Roof over my head,\" he said, stepping back to wave her in.\n\nVida slipped out of her sandals and padded into the living room with dancer's grace that seemed entirely out of place in the apartment. She took it all in. To his relief, there was no wrinkling of the nose or other signs of distaste.\n\n\"Arrested Development,\" she said, poking at the box of DVD's sitting on an end table. \"Someone's got good taste.\"\n\nAndy smiled. \"One of the few things my mom and I can agree on.\"\n\n\"Just you and her?\"\n\n\"Yeah. Dad lives in Nevada now and I rarely see him.\"\n\nVida nodded. \"I live in the same house as my parents and rarely see them.\"\n\nThe edge in her revelation surprised Andy. He suspected this was a sore point with her and possibly something she didn't reveal to many others. Why him?\n\n\"Busy?\"\n\n\"Yeah.\" Vida shrugged as if trying to blow it off. \"Dad's a surgeon, mom's a partner in her law firm. And if that wasn't enough, they're both on the boards of a couple charities and that sort of thing.\"\n\nThere were moments of friction between Andy and his mother, but at least she took an interest in his sports and school and always asked where he was going and with whom. He'd take that modest helicoptering over what Vida described.\n\n\"Sounds like home is just a place to sleep, then.\"\n\n\"Pretty much.\"\n\nVida looked down the hall toward the bedrooms. \"So, are we doing this in your room or out here? And what, exactly, am I expected to do?\"",
        "\"Probably out here,\" he said. \"My room's too small for all five of us. As for what you have to do, well, you just have to...you know...play with yourself while we watch.\"\n\nVida, normally the embodiment of self-confidence, appeared nervous. \"Do I have to go all the way, or is there just some minimum amount of time?\"\n\n\"Well, I don't think you're required to go all the way,\" he said, trying to put her at ease. \"But, well, the whole point of this is for us to enjoy ourselves and to enjoy watching the others.\"\n\nVida slumped onto the couch and propped her delicate feet up on the coffee table. \"I get that. I'm just nervous as hell. Not exactly the ideal mindset for getting off.\" \n\nAndy smiled. \"I hear ya. It was the same way for me when I auditioned.\"\n\n\"You joined after the club started, then?\"\n\nHe nodded. \"It was informal between the three others. I kinda talked my way into it and it became the club proper that day.\"\n\n\"Were you able to...get off?\"\n\nPrior to the club, this conversation would have been extremely awkward. Now, he found himself enjoying in the recollection.\n\n\"Yup. Although I'll have to give some credit to the girls. They were kind enough to take their tops off to help get me in the mood.\"\n\nVida shook her head in amusement. \"Does that mean you and Sean will strip down to give me some inspiration?\"\n\n\"Perhaps, if you ask nicely.\"\n\nVida smiled. \"And am I expected to get naked?\"\n\nAndy sure hoped she would. It had become the norm among the four of them. Granted, Vida was nearly flat-chested, but he prided himself on a healthy appreciation for breasts of all shapes and sizes.\n\n\"Technically, I think the rule is just that you have to have your bottoms off. You know, no hiding your hand down your pants or up the skirt. Somehow, though, we all usually just end up getting naked.\"\n\n\"And you seriously don't all just have sex?\"\n\nAndy considered whether to explain Denby's promise not to have sex before graduation. It would be \"outing\" her virginity, in a sense, yet it was the very reason for the founding of the club. If not now, surely Vida would ask questions leading to it eventually. He gave her the quick version, making sure to give Denby nothing but respect for her decision.\n\nVida nodded. \"Well, that certainly explains things. Good for her to stick to her guns. I couldn't do it, but it's not about me.\"\n\n\"Exactly.\"\n\nVida sat up and gave Andy a serious look. \"Before the others get here, I need to ask you one more thing. Is everyone really okay with me being here? I guess I kinda bullied or threatened my way in. I don't want this to be a problem, especially now that I know why you guys are doing this. I already feel like an intruder and I'll walk away with no hard feelings if anyone's not happy about me being here.\"\n\nAndy realized she might be looking for an out herself as much as for the others in the club. She was certainly sincere and he now believed she would not threaten their secrecy. Up until a few minutes ago, he'd have happily let her walk since there were concerns about bringing her in. Even he hadn't been so keen on disrupting the club's dynamics. Now, though, he felt like she belonged. It was silly to think the club could fill the family gap in her life, but perhaps it could help bridge that by giving her an outlet beyond her usual circle of friends.\n\n\"Honestly,\" he said, \"we're all on the fence. We didn't expect to expand our membership. I think you should give it a shot, though. It's been a blast and you might regret not trying.\"\n\nVida grinned. \"Sounds like you're quoting me - willing to try almost anything once.\"\n\n\"I like that philosophy.\" There was a knock at the door and he backpedaled toward it. \"Besides, it looks like you've run out of time.\"\n\nHe opened the door and found all three of the others. Their mood was a mixed bag - mostly neutral to upbeat. Feeling a little bit responsible for making this experience a success for everyone, he smiled as he waved them in and went above and beyond to project good vibes.\n\n\"C'mon in,\" he said. \"Vida's already here and just showing up is probably ninety percent of the battle, right?\"\n\nHe added that last little bit mostly for Vida's sake. The others shed shoes and said hello to the newcomer. So far, so good, Andy thought.\n\n\"Sean's been here, but since the rest of you haven't I guess I should give you the nickel tour,\" he said. \"Living room, obviously, and you just passed the kitchen. Pickings are a little slim at the moment, but you're welcome to grab anything you find. Bedrooms and bathroom are down this way.\"\n\nAndy led the group down the hall and let them take a quick peek into his room. He never worried what Sean thought of his room, but having three girls checking it out for the first time had him a bit on edge. At least he'd had a couple minutes to pick up the worst of the mess.\n\n\"So that's where you play with yourself when you're not with us,\" Lisa said, giving him a playful nudge in the ribs.\n\n\"Can you blame me?\" he said. \"Impossible not to after having seen you two girls.\"\n\nAndy figured a little banter and flattery would lighten the mood. Judging by the looks he got, he guessed correctly.\n\n\"Little tight for all of us, though,\" Denby said. \"I assume we'll be in the living room?\"\n\nAndy nodded. \"That's what I was thinking, yeah.\"\n\nBack in the living room, there was some awkward looks all around and no one seemed to know quite what to do next. Andy usually let one of the others take the lead, but he was playing host so he felt the pressure to lead fall on him.\n\n\"Vida was telling me that she wanted to be sure everyone was okay with her being here,\" he said.\n\n\"Yeah,\" Vida said, giving him a short nod. \"I know I kinda pushed this on you and I didn't quite mean it like that. I'm just really curious and didn't want to miss out on something...interesting. If any of you aren't cool with it, then I'll walk away and never mention any of this again.\"\n\nThe others all looked to one another and a few shrugs were about all that came of it. Sean said, \"I think I speak for everyone in that we're relieved to hear that. And that we're still okay with you auditioning.\"\n\n\"Shit,\" Vida said. \"Here I was hoping someone would give me the boot. I've never been so nervous before in my life.\"\n\nEveryone laughed and instantly the mood shifted from awkward to welcoming and assuring.\n\n\"Pretty sure we've all been there,\" Lisa said. \"Heck, I think most of us still get a little nervous each time we get together. It's not like we've done it that many times.\"\n\n\"Yup,\" Denby said, raising her hand.\n\nVida smiled and said, \"I'm assuming you guys aren't sharing any of this with anyone else, right?\"\n\n\"That's the number one rule,\" Sean said.\n\n\"Right,\" Vida said. \"Andy mentioned something about the rules.\"\n\n\"You don't talk about M Club,\" Andy said. \"Rules one and two, right?\"\n\nEveryone nodded.\n\n\"No recording devices,\" Lisa said. \n\n\"Or touching anyone else,\" Denby added. Andy caught her glance his way when she spoke. \n\n\"And first timers must participate,\" Sean said. \"And no hiding under clothes.\"\n\nVida pressed her lips together, but seemed resolved under the rules set forth. \"Guess that means me, huh? Is there any ceremony or do I just grab a seat and get busy?\"\n\nLisa gave the girl a reassuring touch on the arm. \"Whatever you're comfortable with. No ceremony or expectations. Don't even have to climax, though we expect a genuine effort.\"\n\n\"Just remember,\" Denby said, \"this is supposed to be fun. It's about acknowledging something we all do rather than hiding behind closed doors. We share because it makes it more fun, not less.\"\n\nVida looked especially uncomfortable for a moment before taking a deep breath and composing herself. \"You guys are pretty cool about all this, you know?\"\n\n\"We try,\" Andy said. \"Can I get you anything to help? Blanket, music, porn?\"\n\n\"No one ever offered me porn,\" Sean said in mock objection.\n\n\"Are you saying your 'inspiration' wasn't enough?\" Denby gave him a pointed look, prompting Sean to raise his hands in defense.\n\n\"No, not at all,\" he said. \"More than sufficient!\"\n\n\"Sufficient?\" Lisa joined Denby, planting fists on her hips.\n\nSean blushed, even though it was clear the girls were just messing with him. \"I yield! Andy, help!\"\n\nAndy chuckled. \"Sorry, man. You dug your own hole. I'll happily avail myself of these most perfect ladies while you go play with yourself in the bathroom.\"\n\nVida came to Sean's rescue. \"I'll pass on the porn, thanks,\" she said. \"But if anyone wants to help inspire me, I won't complain.\"\n\nAndy found her eyes locked on him as she said that. He assumed she was implying he was welcome to join her just as the girls had gotten topless for him during his audition. His only hesitation in doing so was what the other girls might think. If he seemed too eager to whip his cock out for Vida, would Lisa take that as a sign of him being more interested in the popular girl than her? Would Denby take their flirtations as nothing special - just how he acted with any and every girl?\n\nHe looked at Sean. \"Well, the girls were kind enough to give me a show when it was my first time.\" By drawing his friend into it, he hoped to avoid any of the imagined reactions from the girls.\n\nSean shrugged. \"What do you girls think?\"\n\nLisa and Denby exchanged looks, then Denby answered. \"Seems fair enough. But Vida has to start on her own, first.\"\n\nLisa nodded. \"Yup, that's right. That's how we did it.\"\n\n\"Fair enough,\" Vida said. \n\nShe looked around the room and chose the blanket-covered old recliner in the corner. Her body language shouted nerves bordering on fear, but with a firm resolve to hide it as much as possible. Andy had to give her a lot of credit for going through with this, recalling well his own nervousness.\n\n\"I can't believe I'm doing this.\" Vida took a deep breath. \"Okay, here goes nothing. First time for everything, right?\" \n\nShe reached under the hem of her dress and soon had a pink thong worked down to her ankles. Stepping out of those, she sat in the chair and slowly dragged up the yellow fabric until a trimmed strip of thick, black hair was revealed above her tightly closed legs.\n\nAndy felt his cock swell at the sight of a new pussy, even with little of it revealed. Vida clearly shaved enough to shape the hair, keeping it clear of the bikini lines, but if the rest was trimmed it was only slightly. He could just make out a hint of pink deep within the shadowed cleft of darker skin.\n\nTo Andy's right, Denby took Sean by the hand and dragged him to the couch where they sat side by side. Lisa remained standing just to his left, her attention focused entirely on Vida. Andy wanted to reach out and touch her, either on the back or by taking her hand, but he wasn't sure how she would take such a gesture. They'd made out, masturbated together, and she'd even licked up his semen off Denby's breasts, yet their relationship was ambiguous enough he didn't feel comfortable randomly touching her in a situation like this.\n\nVida began slow, dragging her fingers lightly up and down her thighs and over her pubic mound. She closed her eyes, probably to shut out the distraction of an audience. Andy wondered what she was thinking about - her boyfriend, a fantasy, or something else entirely?\n\nShe abruptly changed techniques by patting her pussy, likely right across the clit. He'd never seen either of the other girls do anything like that. It was like she was trying to get her sex to wake up. She used enough force that everyone could hear the impacts, but Andy doubted it was anything near hard enough to be painful.\n\n\"This is really awkward,\" Vida said, eyes still closed. \"Not just doing it in front of you guys, but I really don't play with myself all that often. Er, well, ever.\"\n\nAndy found that confession surprising. With her reputation for sexual experience and interest in joining their club, he assumed Vida would be quite familiar with getting herself off. He wondered whether she played enough with willing partners that she seldom felt the need.\n\nDenby spoke up. \"Wait. Are you saying you don't usually masturbate, or that you've never done it?\"\n\nVida, blushing, opened her eyes. \"I've touched myself. But mostly just in the shower. Never to get myself off.\"\n\n\"Wow,\" Sean said. \"I assumed everyone did.\"\n\n\"Some religions forbid it,\" Lisa pointed out.\n\n\"It's nothing like that,\" Vida said. \"I guess I just never really tried. It seemed weird. And then, well, I guess I started dating young and let my boyfriends take care of...that. I mean, it's not like I haven't gotten off to a guy's fingers or tongue or whatever.\"\n\nAndy felt his swollen cock twitch. \"So why did you want to join us?\"\n\nVida gave a guilty smile. \"When I saw you two in the library, going at it... Damn, it was just so hot. I realized I might have been missing out on something. So, I figured, what better way to learn than with the experts?\"\n\nAndy took a bit of pride in having had that impact on Vida, not to mention being more experienced than her at anything having to do with sex. The others seemed to be similarly embarrassed at the compliment.\n\n\"I'm not sure you could call us experts,\" Lisa said.\n\nVida shrugged. \"Well, from where I was sitting, that's how I'd put it. Certainly compared with me.\"\n\nSean looked between Denby and Andy. \"Well, maybe the two of you will have to show the rest of us just how you did it.\"\n\nAndy felt his cheeks burn and noted Denby looked similarly mortified. He didn't think Sean was implying anything, especially since they all knew he and Lisa had been making out at the same time back at her house. Still, he didn't think he'd ever feel comfortable re-creating that hot, suggestive talk he'd shared with Denby while they masturbated for each other.\n\n\"It wasn't anything too crazy,\" he said.\n\nVida must have sensed she had touched a potentially sensitive nerve as she brought the room's attention back on herself. With her fingers still playing across her pussy, she said, \"Anyway, I was hoping to maybe get some idea of what works and what to try.\"\n\n\"Whatever feels good,\" Lisa said. \"Den and I both do things differently. The guys are each a bit different. Pretty sure most everyone is self-taught.\"\n\nVida spread her legs ever so slightly and began rubbing the entire flat of her hand across her pussy, obscuring almost everything. She certainly lacked Lisa's showmanship, but perhaps would warm up to them.\n\n\"Is this okay, or do you want to see more?\" she said.\n\n\"You're doing great,\" Andy said, figuring she needed a bit of reassurance. \n\nNow that she'd begun, he figured it was fair to give her that inspiration she'd requested. He unzipped his shorts and dropped them and his underwear to the floor, freeing his thick hardon. He was aware of the others taking note of his move, but he didn't acknowledge any of them. Whether they joined or not, he didn't particularly care.\n\nVida must have heard him as she'd opened her eyes and was taking in his cock. She smiled shyly and said, \"I've had a couple guys - not just boyfriends - whip out their cocks for me before, but those were at very different parties.\"\n\n\"Was this the kind of inspiration you wanted, or should I ask Lisa to help?\" Andy winked at Lisa, earning a smile and eye roll in response.\n\nVida never broke stride in rubbing her pussy. \"I do prefer the cock. But like I said, I'm here to learn. If Lisa wants to join, I certainly won't complain.\"\n\nLisa turned, wagged her eyebrows at Andy, and went to the dining nook to fetch a chair. She set it near the middle of the living room, facing directly at Vida. Andy wasn't surprised to see her step up.\n\nUnlike the newcomer, Lisa stripped completely naked. There was no show to it, just a simple strip down and setting aside of her clothing. If Andy didn't know about her penchant for nudity, it would have been easy to think she was trying to show up Vida.\n\n\"Never one to miss a chance to get naked,\" Denby said, teasing.\n\n\"And I've never heard anyone complain,\" Lisa countered, running her hands up her sides and over her breasts.\n\nAs Lisa took a seat in the chair, Andy shuffled over a couple steps to stand just beside and behind her. From there, he still had an unobstructed view of Vida while also being able to take in Lisa's breasts. The redhead spread her legs and slouched back, no doubt giving Vida one hell of an exposed view of her pussy given how wide her eyes grew.\n\n\"I'm jealous of your confidence,\" Vida said, openly admiring Lisa. \"I mean, yeah, I'll get naked with a guy, but I've never done it in front of a bunch of people before, except in the locker room.\"\n\n\"It's just a body,\" Lisa said with a shrug. \"We all have them.\"\n\nVida shook her head, fingers still working over her pussy. \"Easier said than done. Especially when you actually look like a woman.\"\n\nAndy almost responded, but Lisa beat him. \"You've got nothing to be ashamed of. You're pretty and have legs to die for. So what if you have smaller tits? I'm sure the boys don't mind.\"\n\nAndy nodded in agreement, as did Sean and Denby.\n\nVida sighed. \"Well, I guess most of my boyfriends have still been plenty eager to play with my nubs. One or two weren't so subtle in wishing I was bigger. One even asked if I was gonna get a boob job for my graduation present.\"\n\n\"I hope you dumped the ass,\" Andy said.\n\n\"Damn straight,\" Vida said, smiling. \"Not for that, but I probably should have. He did get me thinking about it, though.\"\n\nLisa said. \"It's your body, of course, but I hope you don't. You're proof that a girl can be small and still sexy.\"\n\nVida blushed. \"Thanks.\"\n\nVida, Lisa, and Andy masturbated in silence for a bit. Sean and Denby snuggled on the couch, sharing an occasional kiss or touch, but neither made any move to join in just yet. \n\nVida abruptly stopped and sat up. \"I still can't believe all this, but you guys are having an influence on me.\" She grabbed the bottom of her dress from where it was wadded up around her waist and pulled it up and over her head. Underneath was a simple white lace bra, sharp in contrast against her darker skin. She then reached behind her, unhooked the bra, and slid it off her shoulders.\n\n\"Since you've been so encouraging,\" Vida said, \"I kinda feel obligated to show you what I've got. Or don't.\"\n\nAndy realized that most of the small swell of her breasts he'd seen under shirts in the past was nothing more than bra padding. She was indeed nearly flat. Vida did, however, have lovely nipples - puffy areolas that protruded as much as the surrounding tissue. He immediately found himself wanting to suck them.\n\n\"Beautiful,\" he said.\n\n\"Very suckable,\" Lisa said, echoing his impression.\n\nVida raised her eyebrows at Lisa's comment, but otherwise just thanked them and reclined back in her chair, resuming her masturbation.\n\n\"Try this,\" Lisa said. Andy couldn't see exactly what she was doing, but Vida was soon flicking the fingertips of one had quickly back and forth across her clit with featherlight touch. Andy recognized it as one of Lisa's favorite techniques. While doing so, Vida threw a leg over the arm of the chair, leaving her pussy splayed wide.\n\n\"Mmm...I like that one,\" Vida said, closing her eyes and focusing on the sensation.\n\nDespite Lisa sitting right beside him, Andy's full attention was on Vida as she explored herself. He understood her body image issues, given that she had almost no womanly curves. Beyond that, however, she had a very pretty face, wonderful legs, and a very firm tummy. She was petite and slight, yet the muscle tone of an athlete was clearly in evidence. In his imagination, he was kneeling between her legs, tongue buried at the base of that thin strip of black hair, warming her up before finding out whether a girl that small could accommodate a cock as thick as his.\n\nWhile Vida continued masturbating with Lisa's suggested technique, she also sank a couple fingers into her pussy and began working them around. Stimulating her g-spot, he assumed. Even if she hadn't taken care of her own needs before, she clearly had an idea of what would probably work. Judging by the deepening of her breath, the combination was having the desired effect.",
        "Lisa continued her own masturbation, though at a more sedate pace. She looked up at Andy and gave him a wink when he looked down at her. She then looked at his cock, sliding in and out of his hand a mere foot from her face, and licked her lips. It was just enough to divert his attention from their guest, imagining her opening wide and inviting him for a tongue massage.\n\nHe felt his own orgasm rising, but didn't want to climax and divert attention off Vida's audition. Fighting against hormonal instinct, he dramatically slowed his pace until he backed off the edge.\n\nOver the next few minutes, everyone was silent and focused entirely on Vida. The girl had clearly warmed up to them and the attention, giving them a good show as she fell deeper into her own body's responses. Her eyes were closed almost the entire time, head rolling back and legs tensing up. Her hand became a blur across her clit, breath coming in ragged gasps between the moans. Then she froze as her entire body bucked, ass off the seat, and a squeak was all that could escape her lungs while the orgasm washed over her.\n\n\"That was amazing,\" Lisa said, breaking the silence but not breaking stride in her own play. \"Thank you for sharing.\"\n\nVida's eyes cracked; she looked spent but very satisfied. \"Thanks. It was...yeah...amazing. Should've tried this years ago.\"\n\n\"Guess you'll just have to make up for lost time,\" Andy said, still stroking and secretly hoping her attention would now fall on him. Maybe he would inspire fantasies in her just as she had for him.\n\n\"I will,\" she said. \"Hopefully with you guys, again.\"\n\n\"Well, you did everything we asked,\" Denby said.\n\nSean said, \"Guess that makes you part of the club, as long as you promise to abide by all the rules.\"\n\n\"Done deal,\" she said. \"Although, I might have to bring in my boyfriend. I'd feel awkward leaving him out of this if I'm here too often.\"\n\nAndy felt a pang of jealousy. Yes, he knew she had a boyfriend, and was probably screwing him regularly. And he was dating Lisa, more or less. There was just that instinctive response, wishing he was the object of desire for every woman in his life. That and he wasn't getting anything aside from the occasional make out with Lisa, despite all their nakedness and sexual play.\n\nThat and he wasn't sure he wanted another guy in the group. Sean was one thing, but some unknown?\n\n\"Well, the club might not be lasting all that much longer,\" he said. \"I mean, it's only a couple more weeks until the summer and then we'll soon be heading our own ways.\"\n\n\"The club's ending after school's out?\" Vida sounded disappointed.\n\n\"Well, we hadn't really talked about that much,\" Sean said. \"Granted, it probably won't last once we're all going to different colleges, but some of us will be around this summer. Who knows.\"\n\nDenby pressed into Sean and ran a hand up his leg and over his hip, very close to what was undoubtedly a hard cock. \"We might have moved on to other things by then, too.\"\n\nAndy felt his own erection twitch at that, knowing full well what she meant. Would the masturbation side of the club evolve into a straight up sex club once Denby was free of her promise to abstain until graduation? He wouldn't mind the chance to play around with the girls more directly, but there was no guarantee either one would be willing to go that far with him. Hands off had made all of this play \"safe\" for them. Denby would certainly become sexually active with Sean, but Lisa had no such restrictions now and hadn't gone all that far with him when opportunity arose. Would her hesitation change once her friend was sexually active? Even if it did, would it be with him?\n\n\"So, enjoy it while we can?\" Vida nodded.\n\n\"Yup,\" Lisa said, her voice tense as she had clearly stepped up her own masturbation speed.\n\nAndy, setting aside concerns and enjoying Vida's attention, increased his own tempo and soon felt the edge approaching. Vida was watching his cock, which made him feel more comfortable in roaming his eyes all over her body. She was so slight, he could easily hold her in his arms and fuck her standing. He imagined her impaled upon his cock, bouncing her up and down, maybe pressed against a wall as she moaned his name over and over.\n\nThat image pushed him over the top and a thick rope of semen shot out, splattering across the living room's tile floor between himself and Vida. Her eyes widened and a broad grin stretched across her face. He stroked out another squirt and then squeezed out a dribble, savoring the attention.\n\n\"Just had to beat me, didn't you?\" Lisa said in mock annoyance.\n\nHe sighed. \"Sorry.\"\n\nShe chuckled. \"Whatever. I'm still enjoying myself.\"\n\nLisa didn't enjoy herself for much longer, though, as she reached her own climax less than a minute later. Andy always enjoyed watching Lisa orgasm, so totally did she give herself over to the experience without a hint of shame. Vida, too, appeared enraptured.\n\n\"What we're doing, it's just so crazy,\" Vida said after Lisa's climax concluded. \"And it's awesome. If everyone could be in a group like this, so comfortable and trusting, the world would be a better place.\"\n\n\"Amen,\" Lisa said, slumping in her chair. A satisfied grin spread across her red-blotched cheeks.\n\nAndy fetched a handful of tissues and offered a couple to the girls. Vida looked a little embarrassed, but followed Lisa's lead in mopping up a bit of her own excess moisture. Andy made quick work of cleaning his mess off the floor.\n\n\"Think I need a quick hand wash,\" Vida said, rising from her chair and heading toward the kitchen.\n\n\"Good call,\" Lisa said, joining her. \"When we're out in the woods, we've had to rely on hand wipes.\"\n\n\"The woods?\" \n\nThe conversation between the girls faded to a whisper, lost under the running water. Andy looked to Sean and Denby on the couch and just shrugged. They seemed to be in good spirits and a shared look between them had him wondering if they had something in mind. It was uncharacteristic of them to stay dressed and out of the action while anyone else was busy masturbating.\n\nAndy took the messy tissues into the kitchen, finding the girls drying their hands. When he appeared, they stopped whispering and stared for a second before bursting out in laughter. He was almost certain they'd been saying something about him, making him feel self-conscious.\n\n\"What?\"\n\n\"Nothing,\" Lisa said. Her grin said she was lying, but not in a malicious way.\n\nVida's eyes dropped down to his now flaccid cock. \"Nothing at all.\"\n\n\"Uh huh.\" He shook his head and stepped aside as the two naked girls slipped by. Girls.\n\nWhen he returned to the living room, both girls had reclaimed their respective chairs. Denby sat up and patted the end of the couch she and Sean shared, clearly offering it up for him. He took the seat and again wondered what they were up to.\n\n\"You guys gonna play, too?\" he said.\n\nDenby and Sean shared another look but no words passed between them, just a subtle nod. \n\nDenby said, \"Since we established last weekend that the 'no touching' rule only applied to genitals, Sean and I thought we might...take advantage.\"\n\nAndy thought they were pushing the spirit of the rules a bit, but he wasn't going to complain. Whatever they did was probably going to be hot and he would undoubtedly be jealous that it was Sean on the receiving end. On the upside, perhaps it would open possibilities between him and Lisa for next time. Or him and Denby, or even Vida...\n\nWhen no one voiced any objections, Denby turned around in Sean's lap and straddled his lap. They began kissing passionately and soon hands were roaming all over. Andy, sitting just feet away, had the best view, while the girls were stuck with mostly just a view of Denby's back.\n\nBefore long, Sean lifted Denby's shirt off, revealing those perky little breasts in a silky black bra. Even that hint of a look prompted blood to start flowing back to Andy's crotch. She was just so damn cute and the jealousy rose hot and fast in him.\n\nDenby relieved Sean of his shirt and ran her hands over his chest while sucking on his neck. Sean unhooked her bra and she moved her shoulders just enough to let him get it off. The side view of her breasts, as usual, was exquisite. Her sensitive nipples were at full attention and begging to be sucked.\n\nSean was clearly thinking along the same lines as he brought both hands up Denby's sides until he cupped her breasts and massaged them with practiced ease. Andy's cock throbbed in response, almost fully engorged already. He half wondered what Denby, or Sean, would do if he reached in and felt her up. He'd ejaculated on those perfect breasts before without anyone getting upset. Would touching really be that much different?\n\nLisa rose from her chair and came over to Andy's side of the couch. She sat on the arm, her legs pressing into his. Her fingers absently brushed up against his arm and he could smell her sex, inflaming his arousal further still. He placed a hand on her thigh, but resisted the urge to reach any higher.\n\nDenby leaned back, giving Sean better access to her breasts. He bent over and took one nipple in his lips, eliciting a moan of pleasure. Denby ground her crotch into Sean's, only a couple layers of fabric away from screwing her boyfriend in front of everyone.\n\nThe couple went at it for a several minutes, enough time to get Andy completely aroused. Lisa had resumed fingering herself as well, and Vida appeared to have pressed her legs tightly together as she watched on from across the room. If Sean and Denby didn't get on with it soon, Andy thought he might have his second climax before either had their first.\n\nDenby climbed off Sean and stood before him. With a shimmy of her hips, she worked her shorts and panties off together and kicked them aside. She had eyes only for Sean, letting him take in her entire body as if he needed any further source of inspiration.\n\n\"Trade spots,\" she told him. While he rose, she dug in her bag and extracted Fred, her pink vibrator. Toy in hand, she sat on the couch, slouching back, and parted her legs enough to give him an excellent view.\n\nSean soon had his shorts and boxers removed and stood with his shins against the edge of the couch, right between Denby's legs. His long cock, glistening at the tip, jutted out above her belly. He gave it a long tug as Denby watched on hungrily.\n\nAs the couple began masturbating at each other, Sean by hand and Denby with her vibrator, Andy became aware of Lisa leaning forward and into him a little further. Her attention was lost in the show, yet her body seemed to crave the physical connection with him. On a whim, he let his hand on her thigh creep up further until he bumped up against the back of the hand she had in her crotch. She startled, glancing down at him, but only smiled and resumed her own play. He was a little disappointed that she didn't move her hand aside for him but heartened that she didn't push him away, either.\n\nVida got out of her chair and crossed the room until she stood a short distance from the opposite side of the couch, allowing her to have a clear view of the show rather than just Sean's backside. She didn't masturbate, but she did run her fingers across one of her nipples, occasionally tugging and pinching it.\n\n\"Didn't even think about toys,\" Vida said, watching on in clear fascination.\n\nDenby smiled. \"I have better luck with Fred here. I can get off with my fingers, but this is quicker and more reliable. And I suspect Sean needs quick right now.\"\n\nSean groaned his acknowledgement, upping his pace a notch.\n\nAndy increased the intensity of his own stroking as well, his attention almost entirely on Denby and remembering what it was like to be the one jerking off while standing between her legs. He missed the dirty talk, though, and wondered if Vida had similar thoughts.\n\nLisa spread her legs a little wider from her seat on the couch's arm. In doing so, she allowed his fingers just a sliver more access. He slid up a little higher between her thigh and rapid fingers until he could feel the warm moisture of her arousal. The contact was still only on her thigh, but he couldn't be more than a fraction of an inch from her labia.\n\nAndy more or less kept his hand frozen at that point, afraid to be called out for breaking club rules against genital contact. Anyone else looking their way would already be able to call him out for being too close. Vida cast the occasional glance their way, but didn't seem to take issue.\n\nDenby was the first to announce the imminent arrival of her orgasm. The vibrator was pressed firmly into her clit, giving her the intense stimulation she preferred, while her other fingers teased at the folds of her labia. She lifted her feet off the floor and planted them firmly on Sean's hips. As she pushed into him, he leaned into her, his hand and cock sandwiched between those daintily painted toes. No direct contact, but it was nearly as close a thing as what Andy was doing with Lisa.\n\nDenby's orgasm washed over her, body taut and whimpering openly. Sean reached his climax just as Denby was on the downside of hers, a thick rope of cum catching the bottom of her chin and splattering across her tits and stomach. She pulled her vibrator away and spread her legs even wider, to which Sean responded by decorating her pussy with a second, smaller shot.\n\n\"Mmmm...watching you do that never gets old,\" Denby said. She dragged her fingers through his mess, smearing a dollop across a hard nipple.\n\n\"That was...\" Vida looked at a loss for words. \"Yeah, hot. Damn.\"\n\nWith their climaxes complete, Den and Sean's attention turned on Andy and Lisa. Andy felt a bit conspicuous with his hand nearly in Lisa's crotch, so he withdrew it and focused entirely on getting himself off a second time. Lisa continued to play with herself, but gave no indication that she sought any additional relief. If anything, she seemed to be doing it just to encourage him to finish.\n\nFeeling slightly self-conscious at being the sole focus of attention, but heartened by the rapt attention of three attractive, naked girls, he pressed on. So close on the heels of his last orgasm, it was slower in coming, but he felt the familiar sensation grow after a minute or two of intense stroking. He felt himself sinking deeper into the cushions as every muscle in his body contracted. \n\nHe met Denby's eyes just as he climaxed. There was a twinkle to hers and grin on her face as she watched his expression rather than his cock at the end. He smiled back as he squeezed out the last of his effort, the warm fluid dribbling through his hand and into his pubic hair.\n\n\"Allow me,\" Vida said after the moment passed. She fetched a handful of tissues from the end table and handed them to Denby, Sean, and finally Andy. Andy accepted with a nod and not a small bit of pride at the way she looked him over.\n\n\"You guys never disappoint,\" Lisa said, no longer playing with herself but still maintaining her perch on the couch beside Andy.\n\n\"I blame Denby,\" Sean said, earning a playful swat on his butt as he turned to toss away their tissues.\n\n\"Of course,\" said Lisa. \"Who wouldn't?\"\n\nDenby rolled her eyes, but there was clearly a hint of bashful pride in their comments. Andy followed Sean to the kitchen trash and tossed his tissues. Sean just gave him a knowing nod.\n\n\"I know we already said she in, but what do you really think?\" Andy whispered.\n\n\"About Vida? Turned out better than I'd dared hope.\"\n\nAndy nodded. \"Yeah. Big relief.\"\n\n\"I think we're all good.\"\n\nSean offered a fist bump which Andy happily accepted. Back in the living room, Denby and Vida already had already donned panties and were working on bras. Lisa, as usual, was the reluctant one to get dressed again. Much as Andy would be happy to hang around naked with her, he was worried that doing so would invite his mom to get home from work early. A bunch of naked teens in their living room was the absolute last thing he needed to her walk in on.\n\nThey made small talk, mostly about school, while everyone got fully dressed. Sean took the lead by again congratulating Vida as a full member of the club and then reminding her of the rules. Vida thanked them and said she was eagerly looking forward to their next meeting, which they tentatively set for Friday after school - a painfully long three day wait.\n\nVida was asking Andy about their English Lit homework, the only class beside band their shared, when the others said they had to get going. Lisa had driven the three of them and needed to get home soon. They said their goodbyes and congratulations, leaving Andy alone with their newest member.\n\nAndy was a little surprised she hadn't excused herself out as well, but he soon understood why.\n\n\"I just wanted to thank you again, personally, for all this,\" she said. \"I know I kinda put you in a tough spot. You've been more accommodating than I probably deserved.\"\n\nAndy was humbled and waved her off. \"No biggie. I'm glad things worked out the way they did. You have no idea how worried you were about what you might do or say after seeing me and Den in the library.\"\n\nVida smiled and looked a little embarrassed. \"I wouldn't do that. Goodness knows I've done a few things I'm not so proud of. Things I'd rather not get spread around.\"\n\nAndy smiled, nodding. \"I certainly won't tell.\"\n\n\"Of course not. It's the first two rules, right.\" She winked.\n\n\"Exactly.\"\n\nVida retrieved her bag and made for the door. Andy held it for her and she paused, turning back while in the doorway. She bit her lower lip as she looked at him, then reached out and gave his cock a lingering pat through his shorts. He was so shocked he didn't know how to react.\n\n\"For the record,\" she said, \"you have a very nice cock. Thick. I'm sure all the girls love that.\"\n\nAndy blushed at the compliment, while in the back of his mind he was wondering if she was just naturally this bold or was hinting at interest in him. Given her \"taken\" relationship status, it was probably just the former, but that still made her unlike any girl he'd ever known.\n\n\"Thanks.\" He didn't bother to mention that he'd only had sex with one girl before, and those few times hadn't exactly been anything worth bragging about.\n\nShe gave him a quick wave. \"See ya at school tomorrow.\"\n\n\"Yeah, see ya.\" He stood in his doorway, watching Vida's cute figure from behind until she was out of view. \n\nWith a sigh, he closed the door and wondered how he was supposed to be able to focus on homework."
    ],
    "authorname": "WatchingCloud",
    "tags": [
        "masturbation",
        "club",
        "initiation",
        "blackmail",
        "secret",
        "exhibitionist",
        "cum shot",
        "vibrator",
        "performance",
        "audition"
    ],
    "category": "Toys & Masturbation",
    "url": "https://www.literotica.com/s/m-club-ch-11"
}
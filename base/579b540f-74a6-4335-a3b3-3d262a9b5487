{
    "title": "Escalating Series of Surprises Ch. 01",
    "pages": [
        "Hello Readers! This is Part One of a Two-Part story. Both parts are written and will be posted in order. \n\nChapter 1: The Girl at the Bar\n\n\"Come on Charli, I just drove by it on the way over,\" Nancy said, pointing at the window, as though it was sitting on my parents' front lawn, \"it was packed and you could hear the music from the street.\"\n\n\"I have very important things to do,\" I said. At that particular moment, I was laying on the couch with the strings on my hoody pulled so tight that I could only see out of a little pinhole. I was vaguely aware that House Hunters or something was on the television. I had only seen this one seven times. For some reason, Nancy didn't believe me.\n\n\"All you do is bitch and moan about how there is nothing to do in this town,\" Nancy said.\n\n\"True,\" I admitted. Though, in all honesty, I was all talk on that front. I liked the fact that nothing ever changed in this town. It was its only appealing feature.\n\n\"And now they finally opened up a bar downtown and you don't want to go. You won't even sit up and turn off your mom's TV show,\" she said, sounding more than a little disgusted.\n\nI sighed and shifted the little porthole of my hoody in the direction of Nancy's voice. She was standing by my front door, dressed in a tight black dress and heels. Make up flawless. Her arms were crossed in front of her chest and she was tapping her foot.\n\nThis was classic Nancy. She was always trying to get me to, like, go do things and meet people. She said stuff like 'you have to make the most out of the time you have on Earth,' and 'it is worth a try.' And she always insisted that I would have fun if I just tried things. \n\nIn short, she was the absolute worst.\n\nBut, also, my very best friend in the entire world. Because the universe is fundamentally unfair. I pulled myself into a sitting position with a groan and loosened my hood, pulled it back. \n\n\"Drinking isn't fun anymore, now that I can legally drink,\" I said, which was sort of true. I had been 21 for a month now. Nancy was a year older than me.\n\n\"So get some cranberry juice and just talk to people,\" Nancy said, \"I am not trying to get us shitfaced. I am trying to get us laid.\"\n\nI groaned and flopped back down onto the couch. It wasn't that I didn't want to get laid. I mean, it was late July. I had been home from college for like three months and I hadn't had sex in all that time. In fact, now that I thought about it, I hadn't had sex in the two months or so before classes ended. Not since Crystal broke up with me. But the thing was, Nancy knew as well as I did that we were definitely not going to get laid if we went to a bar in Hicksville, USA. It was a waste of effort. Nancy had already done too much by getting dressed, putting on makeup, and having hopes and dreams.\n\n\"Yeah, but even if there is finally a bar in this town, I mean it is still going to just be the same people. They didn't import new people into this shit hole,\" I said, hoping that would end the argument. The truth was, I was more than a little anxious about the possibility that there WOULD be something new and different at this new bar. I liked to know when things were coming, I didn't like being blindsided. Either by an unexpected request to go out, or by some new bar with possibly new stuff. \n\n\"You never know,\" Nancy said, \"It might attract a different class of people into town.\" I snorted and rolled my eyes.\n\n\"The class of women who have sex with other women in this town is a class of two. Me and you. (Maybe Coach Mueller from high school, but...no). And, gorgeous as you are, Nance, I am not going to have sex with you. It'd be like...sleeping with my sister,\" I said, my lip curling up at the thought. Nancy and I had been best friends since the third grade. She was the only person in this town who kind of understood me. Even if I only kind of understood her. \n\n\"Again,\" Nancy said.\n\n\"What?\" I asked.\n\n\"Having sex with me 'again' would be like sleeping with your sister,\" Nancy said, raising her eyebrows and staring daggers at me.\n\n\"What are you talking about?\" I asked, incredulously. I was no virgin, but I was pretty sure I could remember all the people I had sex with. And I didn't believe in shitting where I ate. I would never... \n\n\"Halloween, two years ago!\" Nancy said.\n\n\"Oh shit,\" I said grimacing, \"I forgot.\" We had been out, had a little to drink but not enough, we were watching horror movies and feeling bored. We had just said, 'eh, why not' and had some fun. I mean, Nancy was cute even if she wasn't my, you know, relationship type. Too peppy and positive. And outgoing and adventurous. \n\n\"Evidently,\" Nancy said, shaking her head, more bemused than angry, \"I thought it was pretty good, actually,\" \n\n\"It was! You did that thing with your tongue where...\" I started.\n\n\"Where it makes you forget you had sex? I mean Christ, Charli we knew it wasn't going to be a relationship, but I thought it meant something,\" Nancy said, annoyed. I started to open my big fat mouth about it again. And then stopped, and sighed. There was, of course, one way out of this stupid mess I'd made and it was obvious.\n\n\"Hey, not to change subjects, but do you want to go check out that new bar in town?\" I asked, sweetly. Nancy sort of sighed and shrugged.\n\n\"Alright, I don't feel like fighting either,\" she said, I sat up, smiled, kissed her cheek, and then I started getting my shit together to go out.\n\n* * * * *\n\nLike forty-five minutes later, the security guard at \"Roche's Bar and Grill\" was intently studying my ID. Yes, I looked a little younger than 21. But at the same time, the \"security guard\" was Doug Whitley, who had known me since kindergarten. \n\n\"If I wasn't 21 before you started, I am now,\" I said, reaching for my license. Doug pulled it back.\n\n\"Charlotte?\" He said, looking up at me and squinting.\n\n\"It isn't a fake ID, you dingus,\" I said, snatching the license away, \"Charli is short for Charlotte. You didn't think my parents named me Charles, did you?\" Doug threw his head back and said \"Ooooh,\" and then nodded emphatically.\n\n\"Okay, that makes sense,\" he said.\n\n\"My mother will be happy to know you approve,\" I said.\n\n\"Well, you are the best looking Charli I've ever seen,\" Doug said and I cursed Nancy under my breath. I had been very happy to go to the bar wearing my hoody and a pair of pajama pants. Nancy had insisted that I wear something 'decent.' I told her that I had had no illusions about getting laid and that it was better to be comfortable. She said she didn't care if I wanted to get laid, but she would have a hard time hitting on women if there was a homeless person following her around everywhere. Which was fair. So I got all dolled up.\n\nThough, even cleaned up, I wasn't 100% sure Doug was even right. There were probably better looking Charlis. I mean, I guessed I looked alright. I am short, with medium length, dark red hair. I have a sprinkling of freckles across my cheeks and the bridge of my nose. I have green eyes and wear chunky glasses. I have pouty pink lips (which is appropriate, on account of my tendency to pout). I have small breasts and a compact, athletic body. I have sort of a big butt and thighs, but not so big that it really stands out. Tiny feet too. It was hot, so I was wearing a thin tank top and had a short(ish) skirt on and flats. I guess I was Doug's type, even if he really, really really wasn't mine.\n\n\"Doug, you remember high school right?\" I said and Doug looked at me strangely, but nodded, \"Remember how sophomore year I told everyone I was a lesbian? And Mrs. Cooper threw a fit because of Jesus? And she wrote that letter to the school superintendent saying I shouldn't be allowed to go to school? And then the state government had to come and perform sensitivity training? Does any of that ring a bell?\"\n\n\"Oh yeah, that was nuts,\" Doug agreed.\n\n\"So are you really hitting on me, Doug?\" I asked and his brow furrowed, \"You know, because you know and have known for like five years that I only want to sleep with chicks?\" Doug nodded sagely.\n\n\"Yeah, I guess that makes sense,\" Doug said, even though that wasn't really a response to thing I said, \"I guess, just like take it as a compliment then,\" he offered. I was about to say something smart back, but then I stopped. And realized, you know, he was right. That was kind of nice. It was good to be complimented. I sort of puffed up a little, feeling better. See it was good to only deal with people you know.\n\n\"Yeah, okay, thanks Doug,\" I said, \"Good work on the security guarding.\"\n\n\"Thanks!\" he said, and then he turned to take the ID of the next person in line. I walked with a little skip in my step towards the bar, were Nancy was already leaning, trying to get a drink. I scanned the place while I walked up. \n\nNancy hadn't lied, the place was absolutely packed. It seemed like everyone in town had turned out to see the new establishment. But it was definitely more of a \"grill\" than \"bar.\" There were about a dozen booths scattered around the dining room, every one of them packed. In the center of the room were more tables, mostly for two. All packed. There was a bar, on the far wall, but it was small. Maybe enough space for two bartenders, although three were back there now. Three bartenders swamped with people. \n\nAnd, of course, they were people that I knew. As I had predicted, there wasn't a single stranger in this place. It was like a high school reunion mixed with a neighborhood block party. I heard a chorus of \"hey Charli\" as I fought my way through the crowd. I nodded or said hello to everyone. But with each repetition, I grew more and more convinced that this was not going to work out like Nancy expected. The only person Nancy would be having sex with was herself. Me too, for that matter. But honestly, I felt a little bit of relief at that. \n\n\"Hey, I am going to order you a beer,\" Nancy said when I finally managed to put my belly to the bar. I made a face.\n\n\"I want something sweet,\" I said. If I was going to get drunk with every person in town, I shouldn't have to fight a lager down my throat to do it. Nancy rolled her eyes.\n\n\"I don't get paid til next Friday. I am not buying you mixed drinks,\" she said, \"If you want something other than Miller Lite, then you have to pay.\" I sighed and squeezed my elbow onto the bar, between Nancy and the cashier from the grocery store, lifted my fingers to signal to the bartender that I needed service.\n\nI might as well have sent up a smoke signal. I mean, the bartenders were doing the best that they could. But they were clearly new to the job (not just this bar) and they were swamped. Alcohol was trickling out of the bar and there didn't seem to be any sort of system to how it was doled out. This is why new things are bad. About five minutes after I got there, Nancy got a beer and managed to extricate herself from the bar.\n\n\"Come find me when you get a drink,\" she said and then she began a (presumably fruitless) prowl of the bar, looking for someone new to town. I kept waiting as, slowly, the bar started to get itself out of the weeds. Finally, after like 15 minutes, I saw one bartender (he used to work at the gas station, Jim), sort of raised his eyebrows at me and started moving in my direction. I sighed with relief.\n\nJust as Bartender Jim was closing the distance between us, and the taste of various juices mixed with a tiny amount of alcohol was just on my tongue, another elbow landed on the bar just in front of me, squeezing into the spot where Nancy had been.\n\n\"Hi, how can I help you?\" Jim said, turning to this new asshole who had just showed up.\n\n\"What the fuck, Jim? I have been here an hour!\" I said, \"And who the hell do you think you are,\" I said to the new elbow. As I spoke, the possessor of the elbow turned and looked at me. And knocked all of the air out of lungs.\n\n\"I was just squeezing in where there was space, I am sorry,\" she said, but I couldn't really understand the words. This was not someone I recognized from town. And believe me, if she was from town, I would have recognized her. She was, without a doubt, the most beautiful woman who had ever passed through our little burg.\n\nShe was a bit older than me, I think she was probably in her mid-thirties. She had long, straight blonde hair and impossibly big, green eyes. She had a small nose, and delicate white skin. She had big pouty pink lips and a long, thin throat. She had narrow shoulders and long, elegant arms. Her breasts were small and were pushed up high on her chest in her tight blouse. She had a trim build and I could see long, slim legs stretching down to the floor, exposed below a short skirt. I stared at her with my eyes open like a total dick.\n\n\"Yeah, I uh...no problem,\" I said.\n\n\"Tell you what,\" she turned quickly back to Jim, \"I am picking up her drink. What do you want?\" she asked, turning back to me. A drink? What did one even do with a drink? Drink it, probably. That would make sense. Nothing else did in that moment.\n\n\"Uh, just whatever you're having,\" I said and the woman shrugged.\n\n\"Two Miller Lites, I guess,\" the woman said and I laughed a bit to myself. Of course, \"I already have a tab open. Under Sabrina. Just put it on that.\" She said and then turned back to me, \"Hi, I am...\"\n\n\"Sabrina,\" I said, not trying to be a jerk, just liking the name.\n\n\"You're a quick one,\" Sabrina said a bit sarcastically, but laughed good-naturedly.\n\n\"Charli,\" I said and then felt my cheeks get red. What the hell was I talking about?\n\n\"I take it that is your name?\" Sabrina asked and my blush grew deeper.\n\n\"Yeah,\" I said, and Jim came over and dropped two beers down in front of us. Sabrina grabbed one and then held it up to me, expectantly. For a moment, I had no idea what she wanted. Suddenly, it dawned on me, \"Oh, uh, yeah!\" I said and then grabbed my beer, spilling a little, and then lifted it.\n\n\"Cheers,\" Sabrina said, and we clinked bottles. I took a deep drink (gross) and kept my eyes on Sabrina as she drank. Finally, she moved her glass from her lips. \"Well, Charli, pleasure to meet you,\" Sabrina said, and she pushed back from the bar. \n\nShe was about to turn around and walk away. And she was going to leave. To my utter shock, I felt my heart sink. I mean, here was a new person who had intruded her way into my life by existing. That was, generally, a huge trigger for me. Even for good looking intruders. Bur for reasons I absolutely could not fathom, I wanted her to think well of me. At this rate, she was going to think I was a total psychopath or moron or something. I had to do something.\n\n\"Hey,\" I said, and Sabrina turned back to look at me. I didn't really have anything planned. I panicked, \"You're really cute.\" I said and winced. Christ, Doug was smoother than me. I hadn't been prepared for any of this! No one new was supposed to be here! I wasn't supposed to be surprised by a pretty woman.\n\n\"Yeah, I am aware,\" Sabrina said, totally stone-faced. She stared at me for three or four excruciating second and then started laughing, \"Okay, come one, I have my stuff set down on a table over here. You're lucky I like direct women.\" I worked! My...non-line had actually worked! I as going to try that more often! I stood up dumbly and started moving in Sabrina's direction. \n\n\"I am also fond of girls who can speak in sentences, so if that is going to be an issue for you, this might not last long,\" she said, as we started to wend our way through the tables.\n\n\"Okay,\" I said, trying to avoid patrons and not let Sabrina out of my sight.\n\n\"Not a great start on that,\" Sabrina laughed. I took a deep breath as we reached the table. She still thought I was cute, but I sensed that I would start to come off as real weird soon if I didn't get a hold of myself. I shook my head and cleared it.\n\n\"I promise, I talk real good. Much sentences,\" I said and Sabrina laughed again.\n\n\"Good,\" she said and she sat down, and gestured to the seat across from her. I sat down at the table and almost blushed again, just looking at her.\n\n\"Sorry,\" I said, finally, \"I was really not expecting...This is a small town and...what're you doing here?\" Sabrina grinned.\n\n\"Am I not allowed to be here?\" She asked, leaning forward on the table (my eyes went to her cleavage. I am a boob girl, I will not be shamed for it!). \n\n\"To be honest with you, probably not,\" I said, looking around the bar, \"We don't much like outsiders 'round here.\" Sabrina nodded.\n\n\"I recall that,\" she said, \"Maybe they sense that I was born here.\" I turned my head to the side, looking at her more intently. No, still didn't look familiar.\n\n\"I feel like I would remember you being here,\" I said and Sabrina laughed.\n\n\"How old are you? Like 21?\" she asked and I nodded, \"I am a bit older than you. I left for college...Jesus, 18 years ago. You would have just been a kid.\" \n\n\"You don't look old enough to have gone to college 18 years ago,\" I said, not really flirting, just stating the truth. Sabrina spread her hand across her chest and sort of screwed up her eyes towards the ceiling.\n\n\"Oh aren't you sweet,\" she said, sort of like an old lady and we both laughed, \"35 years old.\" She said. I always liked older woman. I mean, I hadn't realized it until now. But now, it was very clear, I had always liked older women. But I decided I had blurted out enough embarrassing stuff for one night.\n\n\"What brings you back?\" I asked. What was this, anyway? Like, I was making conversation. But... I wanted to make conversation. Like I actually wanted to know things I didn't know about this stranger. That wasn't normal. Usually, I had to begrudgingly get to know someone until I was hoodwinked into liking them before I would dare ask a question of any kind. But this was different. I felt a sort of instant comfort with Sabrina that was almost unnerving in how not unnerving it was. \n\n\"The ancestral longing to return to this town, buy a Ford F-150 and join a multi-level marketing scheme was just too great. It's instinct,\" she said.\n\n\"Well, since you brought it up, while I still think your cute, I think you could be even cuter with some of the high end, exclusive Mary-Kay products that I have just outside in my car,\" I said, jerking my thumb towards the entrance. Sabrina laughed, a magical, musical sound. God I wanted to make her laugh a thousand times.\n\n\"At least the people here are more fun than they used to be,\" Sabrina said and I shook my head vehemently.\n\n\"You have found the one and only interesting person in this entire town. You should hang onto me with grim determination. Don't look at or speak to anyone else. I am you only chance,\" I said, looking around the room conspiratorially.\n\n\"Actually, that checks out with what I remember from this place. Glad you're here now,\" she said and my heart fluttered. Sabrina took a sip of beer and looked back at me, \"But, to answer your earlier question, I got a teaching job at the community college over in Arnoldsville. It is actually cheaper to rent a place here and commute the 30 miles than it is to try to get a place over there. This is actually the cheapest place in the county, I think.\" \n\n\"Do renters not know that we now have a bar and grill?\" I asked incredulously.\n\n\"No. And don't want word leaking out. This little hidden gem should remain hidden,\" she said. \n\n\"Well, I have to say, I wasn't expecting much when I came out here tonight, but it has been much more interesting than I expected.\"\n\n\"Same here,\" Sabrina say, biting her lip and grinning at me.\n\nI can pretty much remember the rest of that night in vivid detail. I can remember we ordered food at some point (Sabrina got a burger and was insistent that there be no pickles, I got a chicken salad that tasted like it came from a gas station. I didn't mind). I remember her getting up to buy us another beer (Miller Lite isn't so bad, guys), and seeing her surprisingly round ass tick back and forth as she walked away. ",
        "But more than anything else, I remember the conversation. We talked for hours. About everything. About her job and my school and how boring our hometown was. We talked about movies and books and TV Shows. And it was never a struggle. Each subject just flowed from one to the next, effortlessly. I found that, despite my normal tendency to grow anxious and then zone out, I really wanted hear what she was saying (about everything). And she listened to me too. I had never had an instant connection with someone like that. And, I swear, it wasn't just that she was hot and I was really horny. It was that. But a lot more too.\n\nThe bar and grill sort of swirled around us and I didn't notice anything but Sabrina. Her laugh, and her smile. I guess, over time, most of the diners filtered out. More and more people came to drink, and the room got louder. At one point, while Sabrina was in the bathroom, Nancy came over to congratulate me on swooping in on the only unknown woman in the whole bar. I told her that I was as surprised as she was. She was happy for me, but she wanted to go home. I told her to go, I would catch a ride home. Nancy gave me a crooked smile that said she didn't think I would be going back home. But she left. Sabrina came back and we kept talking.\n\n\"No, I honestly don't think it makes sense and it isn't supposed to make any sense. Like I think it is a big joke on everyone. The whole idea is to make potheads say, 'that so deep,'\" I was saying.\n\n\"Arthur C. Clarke wrote a novel at the same time they were writing the movie!\" Sabrina said, \"It is about aliens leaving a relic on Earth that accelerates evolution...\"\n\n\"You and Artie Clarke are equally full of shit. The movie is about seeing how long you can stretch out...\" And suddenly, the lights were flickering. I realized that Sabrina and I were both leaning onto the table, our faces only about six inches apart. As the lights came on, I saw for the first time in hours that we weren't actually alone. There were dozens of people around. I leaned back in my chair.\n\n\"Alright, last call everybody,\" Jim called from behind the bar. Sabrina leaned back as well, and sighed, looking around the room.\n\n\"Thank god,\" I said.\n\n\"Why is that?\" Sabrina asked, stretching a little.\n\n\"Ever since you started defending 2001, I have been trying to think up an excuse to ditch you,\" I said and Sabrina laughed. \n\n\"Well, I guess that's really your loss,\" Sabrina said, disinterestedly.\n\n\"Oh yeah?\" I asked, \"Why is that?\" Sabrina leaned forward again, onto the table. She sort of waved her hand at me, beckoning me in. I rolled my eyes and leaned forward.\n\n\"Because I was going to take you back to my place and make you cum,\" Sabrina offered.\n\n\"Hey, uh Jim, can we close out our tab?\" I said loudly, then turning back to Sabrina, \"I also like direct women.\"\n\n* * * * * \n\nThank god that Sabrina's house was only about a quarter of a mile from the bar. Neither of us were drunk, but we didn't think it would be a good idea to drive. We passed just about every cop in town on the way home. Sabrina theorized that the town had opened the bar to boost revenue: they were pulling over every person who came outside. \n\nWe talked the whole way home, but we were not longer really talking. Just making noises because the silence would make the anticipation too unbearable. As we walked, Sabrina took my hand in hers and...well, I guess I was a bigger, romantic softy than I had ever expected. My heart was hammering in my throat and my stomach felt like it was spinning. I kept catching her looking at me out of the corner of her eye (she looked beautiful when she was poorly trying to hide her interest). It took everything in my power to avoid sprinting towards Sabrina's house. In fact, I think I only didn't because I had no idea where she lived.\n\nFifteen minutes after we'd paid our check, Sabrina stopped in front of a little white house that was on the same street as my old elementary school. She kept my hand tight in her palm and led me up the stairs onto the porch. \n\n\"So I just moved in like two days ago, so don't judge me on the mess,\" Sabrina said as she slipped the key into the door and shoved it opened. We tumbled into the living room of her house. She wasn't kidding. There was absolutely nothing on the walls, and brown boxes were strewn about the room. I saw that there was a couch sitting in front of a fireplace, but that appeared to be the only furniture.\n\n\"Wow, I've always wanted to be a squatter,\" I teased and Sabrina laughed, \"No, it is like being a heroin addict. You're a real bad girl. I dig it.\" I said. \n\n\"I have the upstairs mostly squared away, I am trying to do one room at a time,\" she said, and then gestured towards the kitchen, \"Can I get you a glass of wine or something?\" I could see the whole evening spreading out from there. A couple of glasses of wine around the kitchen island, chatting and making eyes. Retiring to the couch for furtive strokes of the arm, the thigh. Testing the waters. Romantic and sweet.\n\n\"Uh, yeah, sure...\" I said, and as I spoke, Sabrina turned to look at me. In the bright lights of her illuminated, white room, I could see her so clearly. Her thick lips, parted slightly, her eyes sparkling. Her chest rising and falling while she breathed. \"fuck, who are we trying to fool?\" I asked, and I reached my hand forward, slipping it around to the back of Sabrina's neck (her skin was so smooth). For a brief moment I had the thought 'who the Hell am I?' I was never this bold!\n\n\"Yes, good thinking,\" Sabrina said with a laughed. She closed her eyes and leaned in towards me. I moved my other arm around her neck as well, almost interlocking my elbows together (I had to rise up on my tip toes a little bit). I felt Sabrina's hands rise and land on the swell of my hips, her fingers feeling gentle, but firm. I closed my eyes as well.\n\nI didn't so much feel our lips press together, a I heard a starter gun go off. It is almost impossible to explain. I'd never gone from basically zero to sixty so fast. But whatever magic had pulled me and Sabrina together, the force that made us both know, instantly, that we connected...I don't know, it got kicked into an entirely different level when I felt Sabrina's soft lips on mine. My mouth opened instantly, and I prepared to press my tongue into Sabrina's lips. But she had been thinking the same thing. My tongue tumbled into her mouth, tangling together with hers. She tasted unbelievably good, sweet and slick (nothing, as you might have imagined, like a Miller Lite). \n\nAs we kissed, I pressed myself into her into her, making the distance between us disappear. I felt my hips locking into hers, felt her breasts against mine. My arms squeezed tighter around Sabrina's neck, I grasped at the fabric of her blouse on her shoulders. Her hands were active as well. They had started on my hips, but whatever energy had poured into me was pushing her as well. I felt her palms slide up my sides, her fingers tickling my ribs and her thumbs pressing against my breasts. And then slid back down, down below my hips, circling around behind me, grabbing onto my ass, squeezing the flesh. \n\nBut that drive, and that energy...it wasn't going to satisfied with kissing in Sabrina's messy living room. My tongue plunged deeper into Sabrina's mouth, I felt the rough, slick tops of her back teeth, tasted her saliva, thick. She opened wider, willing me deeper into her mouth. At the same time, our hands moved with greater focus. I started bunching the sheer fabric of Sabrina's blouse in my palms, the shirt sliding up Sabrina's back. \n\nAt the same time, Sabrina's hands had found their way into the waistband of my skirt (I don't have classy, zip-up type skirts. I am dirtbag). She tugged down on the skirt hard and they slipped down off of my hands and around me ass, pooling on the floor (there are considerable benefits to dirt-baggery). The next instant, I pulled tongue back from Sabrina's mouth, breaking our kiss for the first time. A the same time, I lifted my hands up. Sabrina lifted her hands as well, and I was able to pull her blouse up over her head. It slipped to the floor. She was wearing a cute black bra, slightly small, her tits heaving out of them. I felt my mouth watering.\n\n\"You told me you were going to bring me back here and make me cum. That's a binding, oral contract,\" I said, wrapping my arms around Sabrina's waist. She leaned back slightly, started popping open the buttons on my blouse, starting at the bottom, working her way up. \n\n\"Oral, eh?\" she said.\n\n\"I don't usually cum from written documents,\" I said.\n\n\"You should read better documents,\" Sabrina said as she popped the last button, spreading the blouse apart and exposing my stomach, and breasts (covered in a surprisingly decent red bra. Whew. Thank you Nancy). She slipped the the blouse off my shoulder and it fell to the floor. I was just in my bra and panties now (Holy shit! They matched! This never, ever happens, it is fate!)\n\n\"Are you seriously going to make me read something?\" I asked, \"Is this a timeshare seminar? If this is some sort of a bait and switch, I will be bringing this up with the better business bureau,\" I said.\n\n\"I am an even bigger bad girl than you realize,\" Sabrina said in a sultry voice, she lean forward, wrapped one arm around me, and deftly unhooked my bra, \"I am not even registered with the better business bureau,\" she hissed into my ear. As she leaned back, grabbed the fabric between the cups of my bra, and pulled it back off my body. I laughed and bit my lip. For some reason, I didn't feel any self-consciousness as Sabrina's eyes worked over my breasts (girls said I had nice breasts, I though they were small and my nipples were too long. Whatever). It usually took me several dates before I would allow someone to see me topless. I liked to ease into things. But, I actually liked to have Sabrina looking at me.\n\n\"Come on,\" I said, and I grabbed Sabrina's hand and started to lead her in the direction of the couch.\n\n\"You are ready already? You don't need to get warmed up anymore,?\" she asked. I laughed a little, looked down between my legs. The light red panties were crimson from the wet.\n\n\"If I get any warmer, I am going to cum before you get a chance to lick me,\" I said. I felt Sabrina's hand push on my shoulder.\n\n\"Hurry up then! Hurry up!\" Sabrina said and I laughed, flopping down onto the couch. Sabrina stood in front of me and shook her head.\n\n\"God, I did not see this coming tonight,\" she said, and then dropped down onto her knees, put her hands on my calves.\n\n\"I'm a good surprise,\" I said, though until about this moment, I didn't realize that such a thing existed. My knees split apart and bit my lip, raised my eyebrows. Sabrina's hands worked their way up over my knees, her fingers crawled their way up my thighs. She left a trail of goosebumps behind her. She leaned forward, her soft breasts pressing into my knees, her hair dangling down onto my thighs. Her eyes flicked up at me, radiating pure sex as her fingers slipped into the waistband of my panties. I arched my back, lifting my ass off of the couch. The wet fabric stuck to my pussy for a second, but she slipped them easily down my legs. And now I was naked, my thighs slick. And still, not a bit of self-consciousness (even though I didn't really like the way my pussy lips look. I don't want to get into it right now, if that's alright with you).\n\nSabrina's head was still hovering over my lap, she was still looking up at me between my breasts. She breathed in deeply and her eyes sort of closed. I she leaned down and kiss my mons pubis, her lips pressing into the little landing strip of dark red hair that I kept (I had shaved that day! Another sign!). I moaned as I felt Sabrina's warm lips. She moved her head back and forth for a moment, letting my short hair tickle her lips. Then she kissed the inside of my hips joint and I giggled because it tickled. She turned to the other side, her hair trailing across my lap, and kissed the other joint. She started trailing gentle kisses down my thighs, alternating sides. I spread my legs wider, thrust my hips forward, and made a slight mewling noise.\n\n\"Did I tell you I needed teasing? Or that I am about to explode. Close the deal, woman!\" I moaned and Sabrina kissed my hip joint again, more forcefully, making me laugh and writhe on the couch. \"Uncle, Uncle!\"\n\n\"I don't want to get into your weird uncle fantasies right now,\" Sabrina said, pulling her lips back.\n\n\"But, like, later we can, right?\"\n\n\"Oh yeah,\" Sabrina said, and without warning, she put her head between my legs. I felt her her hot breath against my pussy and groaned when her lips kissed mine. Her lips split slightly, I felt her tongue taste me furtively, poking out and then slipping back in. I heard her groan as she tasted me. She leaned further in, poking her tongue more deeply between my pussy lips, her nose grazing my clit.\n\nI, on the other hand, was frozen. I hadn't been lying to Sabrina. I was so very close already. I could stand the intensity of the sensation. The pleasure almost hurt. It was all I could do to keep myself breathing as I felt Sabrina's lips work their way up and down my wet slit. \n\nSabrina made her tongue soft and flat, and then she dragged it up my labia, first one lip, and then the other. Hot, but leaving a wet coolness behind her. I knew could tell she was trying to soak up as much of my flavor as she could. But it was a slight relief, I was able to breath and move again. I leaned forward slightly now, reached across Sabrina's slim back, and found the clasp of her bra. I carefully unhooked it. Sabrina shifted her mouth right back to the center of my pussy, her lips wrapping around my hard clit.\n\n\"Oh shit!\" I groaned and I threw myself backwards, my head bouncing off the back of the couch. Sabrina's tongue slipped out, probing at my clit. She was stroking it with the hard tip of her tongue. I melted onto Sabrina's couch, making a mental note to pay her for the costs of cleaning the puddle. \n\nMy hands instinctively moved to Sabrina's head, and I let my fingers run through her long blonde hair. It felt so silky, it heightened the feeling of her smooth tongue against my pussy. Sabrina's hands were not idle either. One hand was down between my legs, pulling my pussy lips apart so she could more easily taste it. The other sort of slithered up my body, across my hips, until it found my breast. I felt my hard nipple against the center of her palm as her small hand engulfed my breast. Her hand undulated gently, massaging my flesh to the same rhythm that she moved with her tongue.\n\nIt was only a couple of minutes like that. With Sabrina sucking and stroking on my clit, massaging my breast, while I played with her hair. I couldn't hold back. For reasons that I couldn't explain, I had somehow started off already completely aroused. And now, it only took a couple of minutes to push me over the edge.\n\nIt might have been easy to reach this point, but I could tell already that the rest wouldn't be gentle. I felt it building, felt the tension rising and rising. My toes curled on the floor, my fingers pulled on Sabrina's hair, my breath caught in my lungs. And Sabrina was relentless, she kept the focus on my clit, pulling it as deeply into her mouth as she could, her chin wet with my juices.\n\n\"Oh fuck!\" I groaned loud enough for the neighbors to hear. My eyes slammed shut and my teeth clenched. My knuckles went white in Sabrina's hair, and my legs flapped and shook around Sabrina's head. My whole body was convulsing. I guess I knew I looked ridiculous but I didn't care. All the air burst out of my lungs and it was like at the same time, pleasure burst out of every pore in my skin. I could feel the orgasm everywhere at once, wrapping around me and coating me in an electrical fuzz. I don't know how long it lasted, but, eventually I collapsed in a heap on the couch, panting. \n\nAfter a moment, Sabrina flopped down on the couch next to me, smiling with glistening lips and cheeks. Her bra had fallen away and I could see her hard, pink nipples. A little large, like mine. But they looked better on her. \n\n\"You have a, uh, little something...\" I panted, reaching a languid hand up to stroke my juices off of her lips. Sabrina easily avoided me, leaned over and planted her lips on mine. Her tongue pressed into my mouth and I could smell the scent of my pussy heavy on her face. \n\n\"No fair!\" I giggled, but I didn't mind. In fact, I licked at her lips, tasted her tongue. It was fun to lick myself off of Sabrina's body. \n\n\"It's really not fair if it doesn't gross you out!\" she said, pulling away, \"God, I need something to drink. Just water. You want some?\" he asked. \n\n\"Now who isn't being fair! Running out of the room before I can taste your pussy,\" I said and in a flash I leaned forward, slipped my fingers into the waistband of her skirt (she wore cheap skirts too!) and yanked them down in one quick motion. \n\nOddly, given the sort of playful nature of what we'd had going on to that point, Sabrina didn't laugh off my slick \"pantsing.\" She sort of bend over at the waist a bit, held onto the waistband of her black panties. Her face got really, really red all of the sudden. I sort of backed away.\n\n\"You okay?\" I asked. Sabrina looked up and sort of smiled awkwardly.\n\n\"Yeah, just... you're sneaky,\" she said, and smiled.\n\n\"Sorry I startled you,\" I said, sort of slinking off the couch onto my knees in front of Sabrina. I raised my hands up, slowly, to reach for her panties. She took a half step back and I furrowed my brow, \"Everything cool, Sabrina? I thought like...we were really clicking. I don't like to brag, but I am very good at eating pussy. I can give references. Just ignore anything they say about being emotionally distant and unserious.\" I said, smiling. But Sabrina didn't smile back.\n\n\"You really don't have to, I don't really like it,\" Sabrina said. And for the first time since I met her, I got the feeling she wasn't telling the whole truth. I rocked back onto my calves, my ass resting on my heels.\n\n\"You don't like to get your pussy eaten?\" I said, incredulous, \"Yeah, that's fine. I can finger you or whatever you want. You just gave me like... the best orgasm. I just want to make you feel good in whatever way you like best,\" I said. Sabrina ran her hands through her hair nervously.\n\n\"Like, you don't have to...\" she said, and it seemed like she was going to say more.\n\n\"Did I do something wrong?\" I asked, a stab of nerves hitting my guts. Of course, I would somehow manage to screw up this good thing. The new and different always ended up blowing up in my face. But what had I done? The pantsing? It seemed in keeping with the tone we'd unconsciously set for the night. Maybe I was misreading things. I had been known to do that. But Sabrina shook her head vehemently\n\n\"No,\" she said, \"No, you are...you are great. This is...we just moved a lot faster than I normally do. And, I mean, I was moving it fast. It just felt so...right. But I sort of boxed us into a corner here and...\" I had absolutely no idea what she was talking about it must've shown on my face. She stopped for a moment and pursed her lips. Then she sighed, \"Aw, fuck it,\" she said, \"We've done everything else fast and its worked, right? So here is my dick,\" she said, and in one quick movement she dropped her panties. Then she peeled off a piece of tape or something and...\n\n\"Yeah, that's a dick,\" I said flatly. There, nestled right in the middle of Sabrina's overwhelming femininity, was a penis. It was limp, uncircumcised, and resting on top of a pair of perfectly smooth white balls. Sabrina had no body hair. Her cock was small, but not embarrassingly small or anything. I think. To be honest, it was the first time I'd ever met a penis in person. \n\n\"Surprise!\" Sabrina said awkwardly and turned both of her hands up toward the ceiling and she shrugged.",
        "\"I uh...I...?\" I have absolutely no idea what I was thinking at that moment. In fact, I am pretty positive that I had lost the ability to think. It just did not compute. I think I would have been less surprised if Sabrina had been smooth as a barbie doll downstairs. My brain was soup.\n\n\"Look, you aren't any obligation to do anything. I usually tell people about my dick before we get this far, but...well, I was just so...\"\n\n\"It was going so well,\" I finished her thought. I saw Sabrina sag a little and nod.\n\n\"Yeah, it was...\" she said, and I realized immediately that she had taken that the wrong way. I had just been agreeing with her...this happened fast because we were having fun. She thought I was sort of lamenting 'oh, but this was going so well and now it is ruined'. \n\nShe didn't seem angry though. If I wanted an out, I clearly had it. For some reason, I thought back to something that Nancy had said to me before. About making the most of my time on Earth and getting out of my comfort zone. I had accidentally done that tonight, opening up to a person quickly and finding myself having fun despite my preconceived notions. Why would I be trying to stop that now? I mean... fucking Nancy...this was working. She was right. And I was like, ridiculously horny. So why was I looking for an escape hatch?\n\n\"So...\" I said.\n\n\"I have definitely sobered up. I can give you a ride home...\" Sabrina offered.\n\n\"You are going to have to just give me directions,\" I said and Sabrina looked confused, \"Because I've never sucked a dick in my life. You made me cum. Now I get to make you cum. It is only fair,\" I said. Sabrina stared at me for a moment, a crooked smile appeared on her face. She put her hands on her hips.\n\n\"For real? You don't have to,\" she asked.\n\n\"Yes, for real. If you don't give me directions it is going to be all teeth. I have no idea what I am doing,\" I said, and Sabrina laughed. Louder and longer than she should have. She seemed relieved. For some strange reason, I felt relieved too. I realized that I hadn't wanted to leave, but part of me was afraid that \"being a lesbian\" was going to overwhelm my desire, or something. Like the shame of pleasuring a penis was too much for me. But as I looked at Sabrina, cock and all, I didn't feel like any less of a lesbian for the desire I felt. I mean...she was beautiful. I wanted her lady-like dick in my mouth. And if that is a crime, then lock me up with Sabrina's lady-dick in some sort of fellatio-themed prison.\n\n\"Direction one, no teeth,\" Sabrina said, wagging her finger in front of my face. I shrugged.\n\n\"Your loss,\" I said and sort of snapped my teeth. Sabrina laughed. \n\n\"You just stay there on your knees, I will tell you what to do,\" Sabrina instructed and she took a step closer to me. My eyes couldn't help but but follow her dick bouncing on her thighs as she moved. The skin was so smooth, some small veins ran through it but none of them bulged. A thoroughly girly dick. \n\n\"It's so cute!\" I said, scrunching up my nose and Sabrina laughed harder.\n\n\"I really like that you think its cute,\" Sabrina said, \"But just a word to the wise, most people who have a dick don't like it to be cute.\"\n\n\"You have super rugged dick, Sabrina. Put the mud tires on its and slip into into my mouth,\" I joked.\n\n\"Thank you, all I wanted was to hear you say that,\" Sabrina said. Now she stopped right in front of me, her hands on her hips. I was close enough that my breath bounced back on me when I breathed out, and I breathed in the scent of Sabrina's body and her perfume. I flicked my eyes up, looking at Sabrina between her breasts.\n\n\"All...you wanted?\" I asked. She reached forward and put her hand on the back of my head, rolling her eyes.\n\n\"Get to work, Charli,\" She said, rolling her eyes and putting her hand on the back of my head. I smiled and leaned forward, my eyes open. Sabrina was still flaccid and her cock soon obscured my vision. And then I kissed it. Like a little peck, right on the foreskin. The skin was silky smooth and felt warm. I heard Sabrina moan a little, felt her cock twitch against my lips. I kissed it again, let my tongue peak out, dragging across her skin lightly. She tasted salty and sweet. Sabrina sighed, and I sensed her body relax.\n\n\"If you just want me to sort of smooch it, I am on board. But I was promised direction,\" I said, kissing Sabrina's penis again. Sabrina sighed.\n\n\"Was I complaining?\" she said and I flicked my eyes upwards, between her breasts. I saw her smiling down. One hand came up and rubbed through my hair. The other reached for her own breast, rubbing her nipple gently. \"Open your mouth and take the whole thing in. It is soft, so it shouldn't be too difficult. No teeth,\" she said. I nodded with her cock against my lips and started to open my mouth.\n\n\"Shouldn't this be hard before we do this?\" I said, her penis bouncing on my lips as I spoke. Sabrina bit her lip and shook my head.\n\n\"Girls like me can take awhile to get all warmed up,\" Sabrina said, \"Don't worry, you're doing great.\" I kissed her cock again and nodded. I kept my eyes on her, as I let my mouth fall open. Sabrina's cock sort of slipped between my lips and directly onto my tongue. She tasty salty and lovely. I closed my lips around her, just the tip. I swirled my tongue around it softly, wetly, the same way I would around a clitoris. I sort of sucked a little bit, trying to pull Sabrina's cock into my mouth. It stretched out Sabrina's foreskin, and I rolled across my tongue. I opened my mouth a little wider, taking the entire soft tip of Sabrina's dick into my mouth. Now I sucked again, feeling her soft penis stretch out. Spongy and pleasant. I coated it in saliva to make it slick, and then sucked more and more of the lubricated cock into my mouth. After a few moments, I felt my nose pressing into Sabrina's stomach, felt her soft scrotum against my chin. Her small shaft rested right in the middle of my tongue, pressed against the roof of my mouth.\n\n\"Christ, Charli,\" Sabrina panted and then bit her lip, \"Is this beginner's luck, or did you lie about never doing this before?\" she asked, and she squeezed her breast tighter. I felt her cock twitch in my mouth, and it seemed to me like it was a little thicker, starting to work its way into my throat. I started to move my head back, so I could answer her question. Her free hand came down on the back of my head gently holding me in place.\n\n\"No!\" she yelled, \"God no, don't answer me, just keep my penis in your mouth,\" she begged. I smiled around her cock, but slid my head forward again. I liked the way her soft, heavy balls felt against my chin. They were so smooth and delicate. I shook my head side to side, feeling her silky balls rub on my face. \n\n\"You can rub those with your hands, gently, while you suck,\" Sabrina said helpfully. Without hesitation, one of my hands shot up between Sabrina's legs. I felt my fingers sink into her scrotum, felt the denseness of her testicle against my finger. I moved to cup both balls with my hands, cradling them gently. I didn't really know what I was doing, I was just running on instinct. And, without direction, I could tell I was doing the right thing. Because Sabrina's cock was now getting harder in my mouth. It had plumped up and I could feel the muscles growing dense and getting deeper into my throat. She was still smooth, but no longer spongy. I gagged a little and pulled back.\n\n\"I am getting hard now,\" Sabrina said and I nodded with her cock still buried in my face. She smiled at me, \"You can sort of bob your head up and down now, let my dick go in and out and, ah, yeah, like that, keep your lips tight around me,\" she said. I had seen straight porn before, I sort of knew the idea. I pulled my head back, letting my lips glide tightly along Sabrina's shaft, until just the tip remained between my lips. Then I drove my head forward, swallowing her back up again. At first it was pretty easy to get my chin back into Sabrina's balls. But it felt like every time that I pulled back and leaned forward again, Sabrina was harder and it got a little bit more difficult. Her cock wasn't particularly long (I don't think) but it was wide. Stretching my my lips and still managing to reach at least the top of my throat. But I didn't slow, each time I pushed her deeper and deeper, making sure that I got her the whole way inside of me.\n\nSabrina was clearly enjoying herself. Her hand on her breast was sort of frozen, squeezing her nipple and rolling it between her thumb and forefinger. She was sort of uneven and swaying on her feet, and I felt her free hand come down on the top of my head. She played with my hair a bit, but I could feel a little weight on me as well. She was having a hard time keeping her balance. I was good at this! Wouldn't all the other lesbians be impressed!\n\nBut the strangest thing was that Sabrina wasn't the only on enjoying it. Hell, she might not have even been enjoying it the most. I love the sensation of her smooth, soft skin moving hot and rigid against my lips. I loved the feeling of coating her in my saliva and tasting her flavor. I even liked the way the bulbous tip hit the back of my throat and made me gag a little. Because I could feel my throat contract, and then sense Sabrina react to it. I guess that was it, I could sense how much fun Sabrina was having, and so I wanted to push farther, do more. I really wanted to please her, and pleasing her made me feel good. \n\nReally good. The inside of my legs felt slick and I knew that I was dripping with arousal. My nipples ached and I brought one hand up to squeeze them and give myself some relief (my other hand remained on Sabrina's balls, softly playing with them). My whole body felt like it was vibrating and, despite my earlier orgasm, I desperately needed relief again. Who knew that sucking dick could be so much fun?\n\n\"Oh fuck, Charli, I am not going to last! You are a natural,\" Sabrina groaned. Her hand came off of her breast and then her hands were on either side of my head, grasping me tightly. I could sense her body tightening in front of me and she was no longer breathing. She was trembling and there was a high pitched noise emitting from the back of her throat. \n\nI felt her balls sort of seize up in my hand and then I heard Sabrina sort of gasp in a way that turned into a long sigh. I felt her her shaft sort of expand and then contract inside of my lips. At that moment, the tip of her cock was resting right at the very center of my tongue. And then I felt it. I almost jump back when I first felt it. There was a lot of pressure as Sabrina's sperm jetted out of the hard tip of her cock. I felt it splash against the back of my throat and I nearly coughed. But I kept my lips wrapped around Sabrina's dick, and I pulled back slightly. Now, just the tip remained inside of my lips. Sabrina's cock shuddered and it spurted again. I felt her cum splash across my teeth and my tongue. It felt warm and it tasty salty and feminine. I felt it pooling at the bottom of my mouth, coating my tongue and covering my teeth. I could smell it in my nose. \n\nFinally, there was a final spurt of hot sperm, and then I heard Sabrina take a deep breath. She took a half a step backwards, more of a tumble really. The tip of her cock popped out of my mouth. A bit of sperm dribbled out of my mouth and down my chin, but I quickly closed my lips. There was a lot of cum in my mouth, more than I expected. Luckily, it tasted a lot better than I had anticipated. It was sweet and silky, like Sabrina. I swished it around in my mouth a little bit, little the aroma fill my nose. I swallowed a little of it down, so that I could feel Sabrina in my stomach.\n\n\"Goddamn,\" Sabrina panted, her hands now on her hips, she was smiling but her eyes were sort of incredulous, \"Most people take the cock out and stroke it some because their jaw gets tired to first time. You just went for it!\" I smiled from the praise and decided not to note that she hadn't instructed me that I could take the cock out and stroke the shaft, so I didn't know that was an option. Still, it felt good to have done it right. And, actually, it was a hell of a lot of fun!\n\nI rose up off of my knees and stood in front of Sabrina. She stood up straight as well, having caught her breath. I closed the distance between us, and wrapped my arms around Sabrina's neck. I felt her breasts press against mine, felt her cock (still somewhat hard) against my thigh. She tilted her head and my lips met hers. Instantly, I opened my mouth and plunged my tongue into Sabrina's. \n\nBut more than that, I shoved a large wad of my spit and Sabrina's cum into her mouth, quivering and warm. I heard her make a slightly surprised noise, but soon her tongue met mine. In the shared cavern of our mouths, our tongues splashed together in Sabrina's salty, tasty sperm. Our saliva mixed together in a sticky mass. The messy mixture dripped from our mouths and down our chins. I felt Sabrina's cock growing harder and firmer against my thigh and she leaned more fully into me, moaning into my throat. Finally, I split the messy mixture in two between our mouths. I broke our kiss, sealing my lips quickly. I swallowed down the quivering mass, feeling it heavy and warm in my belly. I could see Sabrina's throat working too, knew she was swallowing her share. Her eyes watered a little as she finished, but she was smiling at me.\n\n\"I didn't realize I'd be swallowing my cum,\" Sabrina said, sounding a bit surprised.\n\n\"Neither did I, fair is fair,\" I said. \n\n\"Are all the girls in this town as dirty as you?\" she asked and I laughed a little I had a reputation as being a bit of a prude. I really had no idea what had just come over me. Sabrina had somehow overcome my natural inclination to avoid anything new or different. And now I felt that I couldn't stop. I had to keep going further. But now I was afraid that I had pushed Sabrina too far, that maybe I was losing control of myself. \n\n\"If you didn't like it or anything, I am really sorry...\" I said. I lifted the back of my hand to wipe the spit and cum off my chin. But Sabrina moved quickly, she leaned forward and attached her lips to my chin. I felt her tongue whirling around as she licked cum and saliva from my skin. She pulled back, kissed my chin, and then stood up again, smiling. She put her hands on my cheeks and kissed my lips gently.\n\n\"I love it,\" She said, \"You are so adventurous!\" she said and I nearly laughed. Could I get that in writing for Nancy? I felt Sabrina's cock against my thigh and looked down at it. It was still hard and I reached down, taking the tip between my thumb and forefinger, shaking it back and forth.\n\n\"So is this little girl,\" I said.\n\n\"She isn't afraid of tight spaces,\" Sabrina said, looking down at her cock and then flicking her eyes back at me. I didn't have the wherewithal to be playful anymore.\n\n\"Sabrina, I am so unbelievably wet,\" I hissed to her and she nodded. She then abruptly turned around, and stuck her hand backwards towards me. I reached forward and took it. Sabrina began to walk through her living room, wending and high stepping to avoid boxes. I followed behind her, my eyes moving up and down her pretty body. I loved the way her long hair cascaded down her back, and the way her round ass ticked as she walked. \n\nEventually, we reached the stairs, and Sabrina began to walk up. I hung back, still holding her hand, but allowing her to pull as far ahead of me as she could, our fingers straining. I watched her round ass and her pretty legs as she walked up the stairs. I craned my neck and saw her cute little balls hanging down between her thick thighs. I wanted them in my mouth, I realized. But maybe some other time. There had to be another times!\n\nWe reached the top of the stairs, and Sabrina picked up her speed. This floor was better organized, but I only noticed in passing. We moved quickly down a hallway and through a door. Sabrina burst into her small room (just large enough for her double bed and a small table). She sort of whipped my around her with her arm and I let out a little yelp and tumbled onto the bed. I rolled over onto my back. I propped myself up on my elbows and spread my legs. I was facing the doorway, where Sabrina was standing over me, her penis now firmly grasped in her hand. \n\n\"Have you ever done this before?\" Sabrina asked, wagging her cock around. I laughed and bit my finger. How could she possibly look so cute doing that? Well, she did. I shook my head.\n\n\"Opportunity has never arisen,\" I said, and when I said 'arisen' I reached up with my foot and pressed it into her balls. It felt silky and strange and good against my toes. Sabrina giggled and took a step back.\n\n\"Are you sure you want to?\" Sabrina asked, and I could tell that she was both serious that we could stop, and desperate for me to go on.\n\n\"Let me say this as a gold-star lesbian, with absolutely impeccable credentials: Sabrina, I want you to put your cock in my pussy and fill me with your cum,\" I said and Sabrina giggled. She basically bounded onto the bed, jumping up onto her knees between my legs. We bounced around on the mattress laughing. \n\nI felt one of Sabrina's hands land on my hip, the other one remained on her cock. I reached down between my legs, spreading my my lips apart. I looked down watching as Sabrina positioned her the hard tip of her cock against my wet pussy. I could feel the smooth skin rubbing against my lips, and the tip was soon glistening with my juices. Still, I watched as Sabrina bent over slightly, and I watched as she spit a thin stream of saliva down between her breasts onto her shaft. She used her hand to sort of rub it in.\n\n\"I am so wet,\" I encouraged her, knowing that she was a little bit nervous about hurting me. I moaned and spread my legs wider. Sabrina nodded.\n\n\"Charli, if it hurts or anything, just say the word,\" She said and I nodded. But I knew I wasn't going to tell her to stop, no matter what. I looked at her now, her beautiful face, her full breasts, her narrow waist, her pretty hips, her hard cock...my heart was pounding and my whole body felt like it was vibrating. I needed her.\n\nSabrina thrust her hips forward, just a little bit. I felt my pussy splitting open, felt the uncircumcised tip of her penis slip inside of me and I gasp. I squeezed around her tightly. It felt lovely. But I didn't have any time to savor it. Sabrina sort of leaned forward onto the bed. I fell onto my back and Sabrina sort of tumbled on top of me. I felt our breasts press firmly together, and I felt Sabrina's elbows come down on either side of my head. Her hair cascaded around me, and I felt Sabrina's lips on mine. My mouth opened, and Sabrina's tongue tumbled into mine. I could feel Sabrina's hands playing with my hair as her tongue explored my mouth. \n\nI moaned, but not because of the kiss (amazing as it was). As Sabrina settled on top of me, she started to thrust her hips. Not roughly or quickly, but smooth and slow. I was wet and so was she. There was no friction, despite the tightness. Just slowly, inch by inch, her cock slipped deeper and deeper into my pussy. Instinctively, my legs wrapped around Sabrnia's waist, and I dug my heels into her lower back, pulling her into me.\n\n\"Oh god, Sabrina, fuck me!\" I groaned, and I through my arms around her back as well, pulling her breasts more firmly into me. After a few minutes, I could feel Sabrina's soft balls pressing against my asshole. And I realized that Sabrina was all the way inside of me! I broke our kiss for a moment.\n\n\"Everything okay?\" Sabrina panted, pulling back slightly and looking at me.\n\n\"You're all the way inside of me!\" I gasped. Sabrina smiled.\n\n\"Do you like it?\" she asked.\n\n\"You are not permitted to leave. House arrest,\" I said and Sabrina smiled.\n\n\"Even if I do this,\" Sabrina said, and she carefully pulled her hips back slightly. I groaned and tried to hold her in place, as a few inches of Sabrina's cock slipped out of my body, leaving me with a delicious emptiness.",
        "\"No, no, no!\" I chanted, and I ran my fingernails down Sabrina's back. She breathed in sharply.\n\n\"Patience, girl,\" Sabrina laughed, and then, at the same instant, she pushed her hips forward. Not fast, or hard, but still much more quickly than before. Her cock slipped all the way back inside of me, her balls making a patting sound against my ass. As Sabrina drove her cock home, it was like I could feel the reverberations of it rocketing through my entire body. It was a completely new and lovely sensation. Why didn't ever get a dildo? Or let a girlfriend use one on me? What was I trying to prove?\n\n\"Do that again,\" I said, and I felt Sabrina's hips moving back and she smiled, \"faster.\" Sabrina pulled her hips back, and then thrust them into me again, faster. And then again. And again, and again. Each time, she moved faster, thrust harder. I heard Sabrina's balls smacking hard against my ass, felt her torso pressing against my clitoris. My legs grew weak and they dropped down away from Sabrina's back, and spread wider on the bed. I groaned and leaned forward, pressing my face into Sabrina's neck, licking and kissing it, sucking on the salty skin.\n\n\"Christ, Charli, you are so damn tight,\" Sabrina moaned as her speed started to pick up. We lay on the bed for a long while, Sabrina quickly finding a steady rhythm. In and out of me, her cock filling me and then leaving me empty, only to come back. I felt the tension growing high and higher and higher inside of me. I could feel Sabrina's muscles tightening as well, feel the need growing in her. It almost felt like her cock was getting harder, the more that she fucked me. \n\nOur mouths remained clasped together, my tongue pushing deeper into her all the time, almost like I could find relief in the back of her throat. We only broke our lock when one of us threw our head back to moan or to groan. The room was filled with the scent of Sabrina's perfume mixed with the scent of my pussy. I knew that there was a small puddle on the bed underneath of me.\n\nAfter a few minutes, I felt like I was going to burst. Sabrina felt the same way. And she knew what she needed to do to make it happen. But Sabrina did. In one fluid motion, she grabbed my hips and sort of slid herself backwards. She pulled me with her, but after a moment, her feet were on the floor and she was standing in front of me, my legs still spread, her cock still buried in my pussy. One of her hands slipped from my hip and after a moment, I felt her thumb in my mouth. She started to stroke her cock in and out of my pussy again, and I moaned and sucked on her thumb. She pulled the thumb out and brought it down between my legs. As she continued to stroke her cock in and out of my pussy, she circled her now-wet thumb on my hard little clit. It was like electrical currents were shot through my body. Every muscle tightened at once, my hands grasped at the comforter.\n\n\"Christ, Sabrina, fuck,\" I gasped. Sabrina thrust hard again, pressing more firmly on my clit. She was relentless. And I couldn't take it anymore. I screamed, I don't even know what it was. A primal, empty scream of frustration that unexpectedly melted into pure pleasure. It felt like it burst out of the end of Sabrina's cock and then washed down my legs to my wiggling toes, and up through my breasts and across my throat until it coated my brain in mind-blanking pleasure. I could feel my pussy contracting tightly as the orgasm tore through my body. \n\n\"Oh shit!\" I heard Sabrina say, but it sounded sort of far away. Then, deep inside of my pussy, I could feel Sabrina's cock pulsing. I could feel that same jet-like pressure I'd felt in my throat before. And I knew that Sabrina's hot cum was filling my pussy. Knowing that, feeling it, sort of made my orgasm double over on itself. I felt the whole feeling again as Sabrina fill me with sperm. \n\nI was still recovering, when I felt Sabrina take a step back and I gasped when I felt her cock slip out of my convulsing pussy. \"Oh no, don't go!\" I said, but it barely came out as a whisper. My eyes were closed, but I felt Sabrina's hair cascade across my lap, and I knew that she had dropped down on her knees between my legs. I groaned as I felt her mouth press against my dripping pussy. I heard the wet, messy sounds as her tongue and lips plunged inside of me. I heard her sucking her own sperm out of my pussy!\n\nAfter a moment, she rose up and dropped down onto the bed next to me. I put my legs together so she could get closer. Her hands found my cheeks and she turned my head towards her. In a moment her lips were pressed into mine. Her face smelled like pussy and sperm. She felt slick. And, in a moment, her mouth opened and I felt her sperm and my juices pour into my mouth. Our tongues melded together as the mess dripped down our throats and down our chins. I wrapped my arms around Sabrina, pressing our breasts together and holding her tight as we kissed.\n\nFinally, we had swallowed or lost all of our juices, and our kiss broke. We sat panting on the bed, looking at each other. My eyes moved over Sabrina's body, her pretty face, her heaving chest, and her now-flaccid cock. I couldn't believe that I had just done that. Or how good it felt. \n\n\"Wow,\" Sabrina said, after a long minute, \"You are really good for a first-timer,\"\n\n\"It's all about attitude,\" I said, leaning back onto the bed. Sabrina laid down in the crook of my arm and I held her close, \"I am always up to try something new,\" I said and I kissed her forehead.\n\nEnd Part 1\n\nNote: I honestly write so that I can hear the comments you all give. So please just tell me what you think. Even if it is just a sentence or two (though I always prefer more). Consider that your payment for a free story. And if you like this, I beg you to read my other stories and comment on them too. I know who my loyal readers are and I really appreciate you. Thanks!\n\nYKN\n\nP.S. I do one edit of my work and I try to be thorough. But I figure when it comes to handing out free erotica, you all would be better served getting it fast (if a little rough), than waiting for me to polish it like I was getting paid for my work. So, in short, I know there are some errors and I don't really care that much. Don't complain about the soundtrack in your porno, don't sweat the typos in your erotica. Thanks.\n\n \n"
    ],
    "authorname": "YKN4949",
    "tags": [
        "cum swap",
        "cute",
        "female on trans",
        "first time",
        "lesbian",
        "messy",
        "oral",
        "romantic",
        "trans on female",
        "vaginal"
    ],
    "category": "Transgender & Crossdressers",
    "url": "https://www.literotica.com/s/escalating-series-of-surprises-ch-01"
}
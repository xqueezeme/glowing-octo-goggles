{
    "title": "Buttfuck Buddies Ch. 02",
    "pages": [
        "Author's note: This is a work of fiction. All characters are eighteen years or older. Don't expect realism and you won't be disappointed when you don't find it! Enjoy!\n\n***** \n\nAshley's heart was pounding as she stood outside the door, holding a shiny key in her hand. Biting her lips, feeling excited and deliciously scared, she tried to pull herself together before entering Nick's apartment. Even though her mind was made up, she couldn't help but linger there on the threshold, teasing herself into waiting, savoring the heady rush of adrenaline. \n\nShe had been only mildly surprised earlier that day when Nick had showed up after one of her classes to give her a key of her own to the new lock that he had got installed. True to his word, as Ashley knew he would be, Nick had kicked out her cheating ex boyfriend Josh and offered her free access to the apartment. \n\n\"See you later, Ash, or whenever you want. You're always more than welcome!\" Nick had told her as he held her tiny hand in his, pressing the brand new key into her palm. \n\nSmiling while Ashley gazed dreamily at his handsome bespectacled face, losing herself in those intense brown eyes of his, Nick had leaned in and planted a swift smooch on her lips, hugging her tightly to his tall wiry frame. Then he had jumped on his bike and pedaled away, waving his hand at a stunned, blinking Ashley. The rest of the day had been a blur to her. As she sat through her classes and went about her daily routines, the presence of that key in her pocket was all Ashley could focus on, its meaning all too clear and intriguing to just push aside.\n\nTwo days had passed since she had lost her anal virginity to Nick and not a moment had gone by without Ashley's thoughts returning to that incredibly erotic, unexpectedly intimate experience. Whenever she wasn't busy otherwise, Ashley had fingered her pussy almost incessantly since then, using a buttplug to simulate the irreplaceable feel of Nick's thick cock stretching her tight little asshole and pushing deep into her sensitive anus. Even when she wasn't masturbating her holes, the mere memory of that unique sensation of stuffing fullness in her rectum sent shivers of pleasure through Ashley's slim frame, making her pussy drool with need while her clit ached for attention. \n\nNick had not only introduced Ashley to anal sex though, he had also declared his feelings for her. Moreover, he had invited Ashley to join him and his buttfuck buddy Mia in their weird yet surprisingly functional relationship. Maybe not so surprising after all, since Mia and Nick were more than just fuck buddies, but true friends and lovers whose mutual affection ran very deep. As mind-boggling as the idea had seemed at first, Ashley found herself thrilled by the thought of joining Nick and Mia. \n\nThough Mia's attraction to Ashley had always been clear, the curvy brunette only flirted with Ashley without ever making a real move on her. This had actually intrigued Ashley a lot. Time and again she had found herself imagining what it would be like to have sex with Mia, and that titillating fantasy seemed even more enticing now that Ashley had been openly invited into Nick and Mia's liaison. Besides, the day before her own anal deflowering, Ashley had seen Mia naked, bouncing her plump bubble-butt on Nick's cock with her huge tits swaying away and her dilated pink asshole clinging greedily to his shaft as she rode him wildly, impaling her anus on his dick. That sexy image haunted Ashley's mind, she just couldn't seem to stop fantasizing about her busty friend since then.\n\nAshley had often wondered about lesbian sex, but never acted upon her hidden desires. Now she could barely stand the curiosity as she imagined what it would feel like to touch Mia's big jutting tits and suck on her puffy nipples, or to taste her smooth pussy and caress her soft fleshy asscheeks. Most of all, she tried to picture how amazing it would be to get her own pussy licked by Mia, to feel the brunette's pouty lips pressed on her wet slit, kissing her and sucking her and drinking down her juices. In Ashley's overexcited mind, the only thing that she assumed might possibly come close to the awesomeness of having her tight little asshole stuffed full of Nick's huge cock was indeed to have Mia munch on her needy clit and thoroughly eat her pussy out.\n\nTrembling with arousal as she shook her head to break her unbidden erotic reverie, Ashley squared her slim shoulders and took a deep breath, her eyes fixed on the door before her. \n\n\"Okay then,\" she murmured to herself, an impish grin spreading across her lips, \"here goes...\"\n\nDespite her excitement, Ashley's slender fingers were steady as she turned the key. The new lock clicked smoothly and the door swung open, allowing her inside.\n\n*****\n\nSitting back on his bed, caressing the plumpest, roundest ass he had ever seen or touched or fucked, Nick was moaning in pleasure as the soft seal of Mia's lips glided fluidly along his raging boner. Kneeling beside him, her fabulous bubble-butt tilted up in the air and her huge boobs pressed into his thigh while her head bobbed on his lap, Mia temptingly wiggled her juicy rump as she kept giving Nick a sloppy deep-throating blowjob. \n\nGetting her drift, Nick interrupted his adoring kneading massages. Letting go of a bouncy asscheek with one hand, he lowered his fingers into Mia's buttcrack and traced her splayed open, nectar-shiny pussy lips. Once his digits were wet enough, he brought his index and middle finger to the rubbery little rosebud of her asshole and started circling its crinkled edges. Devotedly applying more and more of her sweet cunt juices to her anus, Nick massaged and moistened Mia's cute pink sphincter into relaxation. Every now and then he distractedly poked a fingertip into her tiny clingy orifice, but he made it a point not to go deeper inside her ass than the first knuckle. All the while, he gently sawed his thumb in and out of Mia's drooling pussy.\n\nMaddened by Nick's manipulations, Mia moaned around the mouthful of cockmeat stuffed in her throat, sucking and slobbering more intensely to match his delicious teasing with her own fellating prowess. Soon though she was undulating her sumptuous booty more urgently, squirming and groaning as she attempted to get Nick's digits to finally slip deeper inside her needy little asshole. Eventually, she glided her dick-munching lips all the way up along his slippery pole and let Nick's swollen purple glans plop out of her mouth.\n\n\"Oh my god, Nick!\" Mia gasped, her saliva-glossy lips upturned in a grin and her eyes clouded with arousal. \"Just finger my asshole already, I'm freaking dying here!\"\n\nTilting his head to the side as he gazed into Mia's smoky blues eyes, Nick complied and finally eased his long middle finger past the pliant knot of her butt-ring. Slowly and deliberately, he pushed all the way into the warm tightness of her ass. He gently twirled his digit around a bit inside Mia's snug anus before starting to saw it fluidly in and out. \"Better now?\" he snickered.\n\n\"Uh-hu,\" Mia nodded, purring contentedly as she brushed her pale cheeks against the rock-hardness of Nick's boner, smearing her face with his pre-cum and her own spittle. \"Much better... Ooohh yes, more! Give me more, baby!\" she gasped as she felt Nick carefully worming his forefinger inside her willing asshole too, making her whimper in pleasure as he got into a lazy finger-fucking rhythm. \n\nPushing his ass-probing digits as deep as they could go inside her smooth rectum before calmly withdrawing them almost all the way at each pass, Nick rested his thumb on Mia's clit and started lightly rubbing it. He smiled as he watched her voluptuous body shudder in pleasure. Knowing perfectly well how to build up his lover's arousal, Nick traced slow circles on Mia's nectar-slick engorged bud while he kept masturbating her ass.\n\n\"Tell me, Nick... Tell me again,\" Mia cooed, lapping languidly all over Nick's fat cock as she smiled at him, enjoying the familiar feel of his long expert fingers gliding in and out of her sensitive little hole and teasing her clit amazingly. \"I wanna hear it one more time.\"\n\nNick had to laugh. Since he had popped Ashley's anal cherry, Mia had become fixated on hearing that story. Far from being jealous, actually happy that Ashley had taken what Mia hoped would be the first step to become more intimate with both Nick and herself, Mia had demanded that Nick relate to her in extreme detail the events of their blonde friend's anal deflowering, over and over again. Nick happily complied, of course, glad to see that Mia's already proverbial passion for sodomy seemed to increase tenfold any time he recounted his first buttfuck with Ashley. \n\n\"Sure, I could tell you all about how tight Ashley's virgin asshole felt around my cock and how she loved getting her sweet little butt stretched out and filled with cum,\" Nick shrugged, grinning as Mia panted in anticipation between sloppy smooches on his dick, \"or I could put my tongue to a different use and maybe have it trade places with my fingers. Your choice...\"\n\n\"Oh, you evil master of teasing!\" Mia chuckled and rolled her eyes, giving Nick's thick shaft a playful tender bite before rearranging herself so that she was sitting on his face in a sixty-nine position. As Nick possessively grabbed her beautiful plump ass and parted her fleshy buttcheeks, pulling her down to feast on her holes, Mia felt compelled to add: \"But you've gotta tell me the whole story again later while you fuck my ass, okay? Ooohh fuck, baby! Uuhh yes lick me, yesss!\"\n\n\"Mmph-mmh,\" was all Nick managed to answer, his lips already suckling on Mia's smooth dripping pussy, his tongue busy lapping away at her clit. \n\nAs Nick shifted holes and clamped his mouth onto her cute little asshole, Mia silenced her own husky groans of delight by pressing her face down on his groin and inhaling his cock back inside her gullet again. Locked in a passionate sixty-nine, with Mia bouncing her face on Nick's throat-clogging boner while his tongue wiggled its way into her anus and he voraciously slobbered all over her tender butt-ring, the lovers didn't hear the front door opening nor Ashley's light footsteps as she made her way through the apartment.\n\nAshley heard the squishy muffled sounds of sucking and the unmistakable moans of Mia's pleasure the moment she stepped through the front door. Though tingly with desire, she couldn't bring herself to let her presence be known just yet, choosing to approach Mia and Nick in silence instead. \n\nFor a couple of minutes Ashley just stood right outside Nick's bedroom, looking in through the wide open door, unable to tear her eyes from her friends' entangled naked bodies. The sight of Mia's pouty cocksucking lips devouring Nick's fat pole, the rhythmic undulation of her long black ponytail, the intoxicating vision of his bespectacled face buried between the brunette's plump juicy asscheeks, the slurping humming sounds of their shared pleasure; Ashley was spellbound by it all, caught between a sweet voyeuristic thrill and the promise of other deeper satisfactions waiting for her if she were just courageous enough to join the lovers on the bed.\n\nWhen Nick's wonderful rimjob and his clit-diddling digits pushed Mia over the edge, the busty brunette couldn't help but let his massive cock slip out of her mouth as she threw her head back and cried out in orgasm. It was then that Mia noticed Ashley standing mesmerized just a few feet away, her sculpted, delicate face flushed with desire, her hazel eyes glued to the sexy scene unfolding before her. Pleased to see their blonde friend, Mia grinned naughtily throughout her climax while she slowly stroked Nick's hardness, her pleasure-shiny eyes never leaving Ashley's spellbound orbs.\n\nPanting, her huge dangling boobs jiggling underneath her gorgeous frame in time with her labored breath, Mia eventually purred: \"Hey Ash, about time you joined us...\"\n\nAshley could only blink her eyes in response to Mia's nonchalant greeting. \n\n\"Mmhph whaaa... Oh, hey Ash!\" Nick smiled, unclasping his mouth from Mia's rosebud and peeking his messy-haired head over the glorious curve of her plump bouncy ass. \"What are you doing standing there in the hallway like that? Come on inside.\"\n\n\"I... Uhm,\" Ashley mumbled, trying to get a grip as she stepped inside the room. Despite their nakedness, Nick's disarmingly sincere smile and Mia's trademark snicker put Ashley at ease, pervading her with a warming sense of familiarity and comfort. \"Well, I came by to talk to both of you about, you know... Stuff...\" she giggled, shrugging her slim shoulders as her gaze lingered on Nick's raging, saliva-shiny boner.\n\n\"Right,\" Mia nodded knowingly with a chuckle as she nestled Nick's girthy pole between her big luscious tits. \"We were also talking about 'stuff', involving you mostly. Weren't we, baby?\" she said, flicking her tongue around his bloated glans, her eyes glued to the evident shape of Ashley's bra-less pointy tits and stiff nipples poking into the fabric of her tight-fitting polo shirt.\n\n\"Yeah,\" Nick croaked, shivering with delight as Mia's tongue licked his cockhead and her soft fleshy tits hugged his shaft, his pleasure enhanced by Ashley's presence and her obvious state of arousal. \"I told Mia about us, of course. I did mention that I would do it, didn't I, Ash?\"\n\n\"Yep, you sure did,\" Ashley nodded, weirdly reassured by Nick's directness and by the fact that everything was out in the open. \"So I guess there's not really much to talk about after all, eh,\" she concluded, smiling nervously as she rubbed her jeans-clad thighs together.\n\n\"You're so right, honey,\" Mia cooed. \"As far as I can tell, we're all more than ready to move ahead.\"\n\nGiving Nick's cock one last slurping lick before breaking their sixty-nine, Mia straightened up and knee-walked across the bed, her heavy tits jutting proudly from her chest. Ashley felt tingly all over as she stood there, rooted to the spot, watching Mia's curvy body as the brunette climbed off the bed and slowly got nearer, her matronly hips swaying with her every step. Ashley found herself unconsciously licking her lips as her gaze lingered on Mia's shaved pussy, her puffy labia splayed open and glinting with dribbles of her sweet moisture and Nick's spittle.\n\nAshley's heart was drumming crazily in her ears as Mia stopped right in front of her, parting her arms and holding out her hands. She was smiling, Ashley noticed, actually smiling, not smirking as always. That genuine, almost timid expression of joy on Mia's face and her simple welcoming gesture threw Ashley off and won her over completely, not that she needed any more convincing.\n\n\"You sure you're okay with all this, Ash?\"\n\nMia's husky voice reached Ashley as if through a fog, but she managed to nod as she extended her arms and held Mia's hands in hers. While the girls' fingers intertwined, a soft happy laugh escaped the busty brunette's wet lips, surprising Ashley again. \n\n\"I mean it, Ash,\" Mia went on, looking into the blonde's eyes and getting serious all of a sudden, \"if you don't think you can do this, it's fine, but you should say so now. It's not just about us sharing Nick, it's about you and I too and, well... I do have feelings, you know, and I don't mean just for him and you, but feelings in general,\" she chuckled throatily, trying to play it cool but still letting Ashley get a glimpse of her deepest, most private emotions. Shrugging, Mia continued: \"I'm all for a 'fun and games' kinda thing too if that's what you want out of this, but I think we may be onto something more here. So, you know, just tell us now how you feel about it so nobody gets hurt. Okay?\"\n\nAshley hesitated just a second, caught off guard. That insight into Mia's insecurities was way more than Ashley ever expected her confident, independent friend to admit about her own vulnerabilities. Somehow, it made Ashley even more sure that she was doing the right thing. Letting out a liberating sigh, Ashley leaned in and pulled Mia closer. For a moment she could witness the brunette's pale blue eyes getting big with surprise, then their faces were just too close to see. But it didn't matter. Before they knew it, their lips were touching and joining together, and they were kissing. \n\nThrilled by Ashley's unexpectedly direct move, Mia responded to her friend's kiss with passion, pressing her heavy boobs against Ashley's slim body and locking her arms around the blonde's thin neck. Ashley moaned into Mia's lips as she felt the brunette's fingers running through her pixie haircut. She was crazed by how good Mia's voluptuous naked body felt against hers even through her clothes, and she couldn't believe how soft and warm her lips were as they slowly made out.\n\n\"I'd say that Ash answered your question in the best possible way,\" Nick chuckled as he looked intently at the girls' tender yet intense lesbian kiss. \"Didn't she, Mia?\"\n\nLaughing, Ashley broke their lip-lock and echoed him with a grin: \"Didn't I, Mia?\"\n\n\"You definitely did, yeah,\" Mia nodded, brushing her nose against Ashley's smooth sculpted cheek. \"So, how about we get you naked now?\"\n\nWithout waiting for a reply, Mia reached her hands to the crotch of Ashley's jeans and cupped her pussy through the cloth before unbuttoning and unzipping her. Trembling with anticipation as she let Mia peel down her jeans and then her light blue cotton panties too, Ashley swiftly got rid of her top. Once all her clothes were gone, Mia gasped and took a step back to fully admire Ashley's svelte, toned body in all its naked splendor for the first time.\n\n\"Oh my God, Ash...\" Mia mumbled. She was awestruck as her eyes drank in Ashley's long legs, her flat tummy and her perfect perky tits capped with long, achingly hard pink nipples. A little cackle escaped Mia's slack mouth as she noticed the tiny tuft of soft-looking honey blonde hair right above Ashley's otherwise smooth pussy. It struck her funny to think that maybe her friend intentionally kept that little bit of untrimmed pubes there just to confirm that she was indeed a natural blonde.\n\n\"Say something, come on!\" Ashley nervously giggled, suddenly self-conscious under Mia's devouring stare. \"I'm too skinny, ain't I?\" she sulkily said, furrowing her brow as if in doubt. \n\n\"Ash, you're so fucking beautiful!\" Mia exclaimed, her tone serious and excited at the same time. \"I knew you had to have a killer body all along, but this is some serious supermodel material, honey!\"\n\n\"Wow, thanks!\" Ashley laughed, unable to say more as she purred at the feel of Mia's hands resting on her hips and gently caressing her skin. Shivers ran up her spin as Mia's fingers traced her sides and reached her pointy, gravity-defying tits. As she lay her own hands on Mia's plump round asscheeks and pulled her closer, letting her long erect nipples brush against Mia's puffy buds, Ashley blurted out something she had wanted to tell her busty friend for a long time: \"I'd kill to have tits like yours, Mia.\" \n\n\"Oh please,\" Mia chuckled, pressing her buxom rack harder into Ashley's breasts, squashing her huge jugs into the blonde's perky tits. \"Sure, my boobs look okay now, in a slutty kinda way, but give them a few years and they'll be all flabby and droopy while the rest of me gets horribly fat!\" \n\nIgnoring Mia's self-deprecating criticism, Ashley let go of her fleshy ass and brought her hands up to the brunette's luscious melons, caressing their bulging sides as she kept grinding her stiff nipples into Mia's. \"They're so big and full and heavy, all nice and round... So soft and smooth, but firm at the same time... See, this is exactly what I always thought a woman's tits should look like. My sisters and my Mom all have huge boobs like yours. I'm the runt of the family, tit-wise at least.\"\n\nBoth Nick and Mia laughed at that, and Ashley joined them too. Then Nick hinted: \"Well girls, maybe I could give you a man's opinion about all this tit business...\"",
        "\"Really?\" Mia tauntingly asked, arching a thin eyebrow as she turned to find Nick slowly stroking his huge erection. \"Are you sure you wanna try and tell us if big fat jugs are better that sweet perky titties? No matter the answer, you'll make at least one mortal enemy today, baby!\"\n\n\"I'll take my chances,\" Nick smiled, shrugging off Mia's playful teasing. \"Of course I'll need to proceed to a lengthy in-depth analysis. Visual perception won't be enough to form a conclusive opinion,\" he went on, beckoning the girls to come closer, \"I'll need to feel and squeeze and lick and smell and suck!\" As Mia and Ashley climbed into bed, facing each other while kneeling on either side of him, Nick concluded: \"Then maybe I'll have enough data. Just maybe...\"\n\nAs the girls laughed and puffed their chests out to offer him their tits, Nick sat up straighter and wrapped his arms around their waists, pulling them closer until those two very different yet equally epic sets of boobs were touching. Exhaling in bliss, Nick sandwiched his face between Mia's and Ashley's joined cleavages and began ravenously stuffing his mouth with that incredible tit-banquet.\n\nSquealing under his rabid licking and suckling and nibbling, the girls giggled and purred while Nick feasted on their tits like a man possessed. Unable to get his fill, he went back and forth, taking Ashley's splendid pointy breasts fully into his mouth to suck avidly on them, and then sinking his face between Mia's ample jutting jugs to devour her soft tit-flesh. After nursing on Mia's puffy gummy areolas for a while, Nick then turned back to Ashley's firm boobs, attacking her upturned nipples with hungry nips and hard suctioning kisses, repeating this cycle over and over again. \n\nThe feel of Ashley's and Mia's hands wrapped around his aching boner only drove Nick wilder in his joyous tit-worship. Letting his own hands travel lower down the girls' arched backs to their naked asses, he started caressing both their shapely bottoms at the same time. Nick was high on lust as he kneaded Mia's majestic bubble-butt and massaged Ashley's taut heart-shaped tushy at the same time, glorying in the realization that he was soon going to fuck both those beautiful asses. \n\nWithout interrupting his frenzied boob-feast, Nick let his middle finger slip inside Mia's spittle-lubed anus, making her groan in appreciation. While Mia leaned in and pressed her lips into Ashley's mouth, Nick dipped the digits of his other hand in the dripping folds of Ashley's pussy, wetting them thoroughly before rubbing the tip of his forefinger on the blonde's tight little rosebud. The deliberate rhythm of the double handjob that the girls were giving him became more erratic as Nick masturbated Mia's welcoming asshole and teased Ashley's tiny crinkled sphincter, circling her orifice slowly, massaging her puckered butt-ring into relaxation.\n\nNick was so turned on that he was ready to just let himself cum all over the girls' dick-pumping hands when Mia abruptly pulled back from Ashley's languid kiss and straightened up on her knees, releasing Nick's face from the prison of tit-flesh where he was happily trapped. Panting, the busty brunette blurted out: \"Okay, that's enough, if you don't fuck my ass right now I'm gonna explode!\"\n\nGiving Ashley's stiff rosy nipples a couple of parting nibbling kisses, Nick blinked his eyes and readjusted his skewed glasses. Smiling as he retrieved the lube from his nightstand, he pointed out only half-jokingly: \"I didn't really get to decide about the boob thing, though. But I guess you could let me gather more data some other time, right girls?\"\n\nAshley laughed while Mia snickered and rolled her eyes, already getting on all fours in the middle of the bed. Tilting her sumptuous meaty ass in the air and leaning down on her elbows, she turned to look back over her shoulder and said: \"Sorry to call dibs on this one, Ash, but he's been teasing my butthole to death since before you got here. I just need him in my ass so fucking bad!\"\n\n\"It's okay Mia,\" Ashley said, smiling understandingly as Nick knelt behind Mia's offered rump and started lovingly caressing her plump round asscheeks, his eyes glinting with arousal. Then, giggling as she too got on her hands and knees right beside her curvy friend, Ashley added: \"As long as he lubes up his cock in my pussy first!\"\n\nMia's eyes widened as a Cheshire grin spread across her pouty lips. She cast a quick glance at Nick over her shoulder, winking her assent before facing Ashley. \"We're gonna have so much fun together, honey...\" Mia murmured as she pressed her mouth against Ashley's in a passionate kiss.\n\nAs he positioned himself behind Ashley, Nick couldn't decide where to rest his gaze. He felt blessed and excited beyond words to have those two naked beauties down on all fours presenting their upturned asses to him. At the same time, ironically, he was torn between watching their tongues dancing as Mia and Ashley made out more and more intensely, or focusing on the incomparable sight of their amazing bottoms brushing together as the girls wiggled them enticingly side by side. Smiling as he thanked his lucky star for burdening him with such a hot dilemma, unable to let go of Mia's fabulous bubble-butt even as he got ready to fuck Ashley's sweet pussy, Nick eased two fingers inside the brunette's pliant anus while with the other hand he guided his thick pole at the entrance of the blonde's dripping little slit. \n\nAshley moaned into Mia's mouth as her nectar-soaked pussy lips parted and stretched to accept Nick's bloated cockhead. Shivering, she sucked eagerly on Mia's tongue, humming in delight while her silky soft vaginal channel was slowly opened and filled to capacity with Nick's veiny hardness. Kneading and squeezing Ashley's firm tushy with one hand as he bottomed out inside her tight wet snatch, Nick sawed the index and middle finger of his other hand inside Mia's snug asshole, making her curvy body tremble as her anticipation grew to a maddeningly delicious level. As he gradually increased his butt-fingering tempo, Nick drove his throbbing shaft into Ashley's pussy with gusto, fucking her with long balls-deep strokes, letting her gushing juices coat his length from tip to root.\n\nNick had been pumping his cock into Ashley's drenched slit for just a few minutes when he felt Mia's sphincter contract, squeezing his ass-probing digits in a series of controlled spasms. Meeting Mia's gaze and acknowledging the glint of aching need in her eyes as she sucked on Ashley's lips, Nick got the hint and silently nodded. As good as Ashley's slick little pussy felt, Nick simply couldn't ignore Mia's wordless plea to get her ass fucked. To the sound of Ashley's disappointed groan, he slipped out of her dripping honey pot and repositioned himself behind Mia.\n\nNestling his raging boner between the brunette's luscious asscheeks, Nick grabbed the lube and poured it generously all over Mia's deep crevice. Sliding his nectar-shiny length between Mia's slippery butt-cleavage, Nick slowly humped her soft round buns as if he was fucking her big tits, all the while adding more of the slick fluid until his shaft was lathered in it. Determined to get Mia's asshole all nice and greased up, Nick repeatedly poked at her oily backdoor with his glans, making her tiny orifice wink open enough to allow a healthy amount of overflowing lube to trickle straight into her rectum, thoroughly coating her anal walls. Once the preparations were done, he said: \"Ash, can you spread her ass for me?\"\n\nBreaking the passionate lip-lock with Mia, Ashley sat up on her knees and nodded. Grinning, her lips wet with Mia's and her own spittle, the slim blonde planted an intense kiss on Nick's mouth as she placed her tiny hands on Mia's majestic ass, parting those juicy buttcheeks to grant Nick perfect access to the brunette's glistening pink rosebud. Nick's head was spinning as he made out with Ashley, his cockhead nudging at the entrance of Mia's hungry little pucker, his dick twitching with excitement. \n\nLetting go of his tongue after a final suctioning kiss, Ashley blurted out: \"Do it, Nick. Stick your big cock in her ass!\" Ashley's voice was thick with urgency as she held Mia's fleshy globes open for him. Reaching her slender fingers into Mia's buttcrack, she pulled the edges of the brunette's lube-shiny orifice apart, slightly gaping her sphincter and making Mia moan with lustful approval. \"Fuck her ass now, the sooner you're done with her, the sooner I get to feel your amazing dick all the way up my ass!\"\n\nWith Ashley's words ringing in his ears and her hands splaying Mia's asscheeks wide apart, Nick guided his pole into the brunette's needy little hole. Letting out a long groan of relief, Mia relaxed her anal muscles and let her sphincter blossom out, opening herself up to accept Nick's massive cock into her tiniest hole. As always, it didn't take long for Mia's butt-ring to surrender to Nick's glans pressing gently but firmly against her slick puckered orifice. Renewing their shared burning passion for anal sex once more, Mia and Nick commenced their umpteenth sodomy, gasping in unison as his bloated purple tip slipped into her yielding anus. The shaft of Nick's slippery cock slowly followed, sinking inch after inch in the velvety tightness of Mia's warm, welcoming ass. \n\nStill holding the brunette's plump buttcheeks spread open, Ashley stared slack-jawed as the meaty girth of Nick's cock disappeared gradually but steadily into the depths of Mia's experienced rectum in a single extra-slow yet inexorable fluid push, until his groin was pressed into her lush round rump and his low-hanging balls bumped into her shaved dripping pussy. Ashley let out a yelp of surprise that mingled with the lovers' gasps of pleasure once Nick's boner was jammed completely inside Mia's ass, swallowed whole by her dilated, dick-gobbling anus. \n\n\"Oh my fucking god!\" Ashley exclaimed, her eyes glued to Mia's stretched-out oily butt-ring wrapped tightly around the root of Nick's massive cock. \"This is the hottest thing ever!\"\n\n\"Uuuhh, feels amazing too!\" Mia cooed, her face pressed sideways into the bed, her eyes closed. A beatific smile brightened her pale visage as she slowly murmured: \"Ooohh baby... I can't get over how good you feel in my ass! Uuuhhh fuck... This makes all the teasing worth it, and then some!\"\n\nSmiling as he tenderly stirred his fully buried pole inside that epic bubble-butt, reining in his anal lust while he let her cock-hugging rectum adjust around his steely thickness, Nick leaned down on Mia's bent-over body, pressing his chest to her arched back and resting his head near hers. As Nick wrapped his arms around Mia's curvaceous frame, pawing at her huge dangling tits and caressing her soft feminine tummy, Ashley let go of her friend's bouncy ass, reaching a hand to her own perky tits and the other to her soaked little slit. Awestruck by the combination of raw sexuality and sweet intimacy exuding from Nick and Mia's anal coupling, Ashley started frantically rubbing her clit as she tortured her pebble-hard nipples, pinching and pulling each of them in turn.\n\nDraped over her gorgeous body, gently rocking his hips as he flexed his fully immersed length inside her surrendered clingy butthole, Nick gave Mia a long loving kiss before saying: \"I'll never get enough of your incredible ass, Mia! You feel amazing... Your asshole is so smooth and hot, so tight around my cock!\"\n\n\"Uuuhh I know, it's just perfect! I love having your cock in my ass... So hard and big... You stretch me so good, baby! Now fuck me, fuck my horny little asshole the way I like!\" Mia huskily groaned into Nick's mouth, planting a wet smooch on his lips before he straightened back on his knees. \n\nHolding Mia's glorious fleshy globes in his hands, Nick turned to Ashley. His grin widened as he took in the sight of his blonde friend furiously fingering her pussy and tweaking her nipples. Ashley could barely speak, overcome with desire as she was, but she managed to whisper: \"Fuck her, Nick... Fuck her ass!\"\n\nDigging his fingers possessively into Mia's plump round asscheeks, Nick started withdrawing his rock-hard boner from the enveloping warmth of her anal tunnel until only his fat glans was wrapped in the squeezing grip of her sphincter. He paused there just a second before pushing in again, sheathing himself inside her ass with a slow gliding stroke, moaning along with Mia as he buried his shaft balls-deep into her hot rubbery bowels again. The busty brunette shook all over as Nick crammed her tight rectum with his cockmeat. She loved how he could be firm but delicate as he stretched out her slippery asshole and allowed her snug anus to reshape itself around his stuffing presence, stimulating her sensitive anal tunnel wonderfully with his gentle butt-delving motions. \n\n\"Uuuh yes, baby, yeeesss,\" Mia purred, reaching a hand to her swollen nectar-slick clit while Nick began gently sawing his huge cock in and out of her needy butthole in an unhurried, easy rhythm. \"Fuck my ass like that aaah... Open me up, go deep in me! Ooohh Nick, I love your cock in my ass! Uuuhh...\"\n\nFused into one, Mia and Nick lost themselves in their assfuck, their bodies reading the other's signals with the instinctive ease that came of endless practice. As Nick lovingly sodomized her, Mia worked her anal muscles in perfect sync with every motion of his thick pistoning cock. At each ass-plugging in-stroke, Mia relaxed completely, sighing with joy as she accepted Nick into her oily rectum, allowing him to plunge as deep as possible inside her, trembling as he filled her up so totally, so amazingly. On the out-strokes, anticipating the imminent empty feel and the craving for his butt-cramming cock that it would bring, Mia squeezed Nick's pole within the warm caress of her smooth anal walls, clinging to every inch of his retreating boner, groaning as he vacated her ass yet already shivering with anticipation as she prepared to open up and get her tight little hole stretched out and stuffed blissfully full of him again, repeating the cycle of their shared assfucking ecstasy. \n\nBlown away by the passionate yet loving sodomy unfolding before her eyes, Ashley fingered herself ever more furiously. Pre-orgasmic tremors were coursing through her slim frame as she watched Nick's mighty pole pistoning relentlessly into Mia's pliant sphincter while the buxom brunette matched his every stroke by rocking her sumptuous bubble-butt back into his impaling shaft. All that Ashley could think of was the insane pleasure that Mia must be feeling at that moment, a pleasure that Ashley herself had known and couldn't wait to experience again. \n\nMatching the gradually faster rhythm at which Nick made love to Mia's ass, Ashley finger-fucked herself into such a state of arousal that she didn't even realize she was speaking as she dreamily murmured: \"Holy shit guys, you're so awesome... I'm gonna cum just watching you two buttfuck...\"\n\nMia's eyes opened to slits at those words. Without missing a beat as she pushed her round juicy rump back to meet Nick's butt-delving thrusts, the brunette let the words tumble out of her slack-jawed mouth, her pleasure-glazed eyes locked on Ashley's: \"Wait, Ash, wait... Uuhh! Don't cum yet, I wanna taste you... Uhhhh yeah fuck me harder, baby! Come here, Ash, please... Let me lick your pussy while he fucks my ass aaaaahh!\"\n\nAlready cooing, Ashley let desire guide her and sat down right before the brunette's face, spreading her legs and offering Mia her drenched slit. Smiling, allowing herself just a swift mewl of contentment before she finally claimed that long-awaited prize, Mia clamped her mouth on her blonde friend's juice-dripping labia and started devouring her pussy like her life depended on it.\n\n\"Ooooh fuck!\" Ashley yelped, in surprise as much as in delight. The idea that she was actually getting her pussy eaten out by a girl was just as mind-blowing as the immense pleasure caused by Mia's expert cunt-munching mouth. Jolts of overpowering bliss started pulsing outward throughout Ashley's body, warming her and electrifying her svelte frame while a sudden, stabbing climax hit her. \"Ooohh Mia! Oowwh my god, Miaaahh... Yeeees!\"\n\nAs she suckled on Ashley's quivering pussy and engorged clit, drinking down all her delicious girl-cum, Mia's moans of anal ecstasy were muffled by her refusal to remove her mouth from the sweet little slit that she had been dying to taste for so long and that she was finally able to bury her face in. To make her pleasure even better, the wonderful sensations radiating from her cock-stuffed rectum were becoming ever more intense as Nick picked up his assfucking pace, the vision of Ashley cumming on Mia's lips sending his libido off the charts.\n\nAs Mia frigged her own clit in time with Nick's deeper and faster ass-drilling thrusts, Ashley leaned back to rest on her elbows, splaying her legs apart as wide as possible to let Mia do as she wished with her. Ashley's eyes rolled back in her skull as Mia treated her pussy and clit to a toe-curling routine of light tongue swipes mixed with deep licks and suckling kisses that made the blonde regret not having given in to Mia's advances before. Her mastery in licking pussy was such that Ashley thought Mia could read her mind, she was so good at knowing just how to please her. \n\nA string of delicious mini-climaxes rippled through Ashley's body while Mia feasted on her juicy honey pot with increasing ardor, egged on by the sweet taste of the blonde's gushing nectar and by the sizzling shocks of pure anal delight that she was getting from Nick's incessant ass-pounding. His forceful thrusts shook Mia's curvy body and his fingers grabbed avidly onto her plump round buttcheeks while Nick immersed himself balls-deep inside her eager asshole over and over again, slamming his throbbing boner harder and faster into her warm slippery rectum at each pass. \n\nAshley's constant moans of pleasure spiked up into a high-pitched squeal when Mia's wiggling tongue sneaked its way lower and started poking into her sphincter while her mouth slurped away on her twitching pucker. As he took that all in, Nick growled and accelerated his sodomizing rhythm even more, reaming Mia's ass with all he had while she tongue-fucked Ashley's cute pink rosebud. The fleshy impacts of Nick's groin clapping against Mia's jiggly bubble-butt were soon drowned out by Ashley's orgasmic cries as Mia's talented tongue and luscious lips kept rimming and sucking and probing into her asshole, triggering a detonating climax that caused rivulets of pussy juice to gush from Ashley's slit and trickle down her buttcrack, straight into Mia's mouth. \n\nAs Ashley's parted lips remained fixed in a perfect O and her mind floated joyously away, her glazed-over eyes met Nick's bespectacled gaze, allowing the two of them to share a silent, passion-filled moment of mutual recognition. Ramming his dick wildly into Mia's amazing ass, desperate to cum deep inside her snug buttery bowels, Nick drew upon Ashley's beautiful, pleasure-distorted visage to multiply his already all-encompassing anal lust. \n\nTo the sounds of Ashley's climax, Nick mounted Mia like a rutting beast, riding her rump with abandon while she kept pushing back her plump bubble-butt into his ass-stretching cock, matching his breakneck speed. As she grunted like a bitch in heat, Mia kept her face firmly pressed between Ashley's shapely legs, alternating between tongue-fucking her winking little anus and switching back to devour her pussy and clit, driving the blonde crazy. \n\n\"Uuuh fuuuck, baby!\" Mia suddenly howled, panting and coming up for air as she writhed in pre-orgasmic delight, her sex-tousled pony tail flailing around as she raised her head from Ashley's sweet holes. \"Fuck my ass harder! Yeeesss wreck my horny asshole with your big hard cock ooowwhh! Uuhh give it to me harder, baby, haaardeeer! Ooohh fuuuck uhh-mmh-mpph!\"",
        "Nick's eyes bugged out and he briefly relented his frenzied butt-drilling assault as he watched Ashley grabbing a fistful of Mia's jet black hair and pulling her face back down until the brunette was once again french-kissing her drooling slit. Ashley couldn't help but wail out as she held Mia's head down on her pussy and her buxom friend resumed eating her out even more voraciously. \n\nNick's moment of surprise was immediately broken by the sight of a half-devilish, half-beatific grin dancing on Ashley's lips, immediately followed by a deep pussy-muffled moan from Mia, who slammed her juicy rump back against his groin, forcing his partially buried shaft balls-deep into her hot anal passage again. Dizzy with arousal, Nick resumed his frantic pounding of Mia's beautiful plump ass, thrusting hard and deep into her tight rubbery rectum, rushing to his climax.\n\nLost in a blissful sodomizing frenzy, Nick hammered his throbbing cock into Mia's slick anus with the kind of brutal ass-busting plunges that, so far, only she had managed to handle and actually take pleasure from. Nick loved her for it, he was awestruck by her unquenchable thirst for anal sex and by the fact that, once again, they were glorying in a savage unrestrained buttfuck. Beside that, he knew that having her ass ruthlessly plowed while licking Ashley's pussy had been one of Mia's favorite fantasies for a while. It was amazing to him that now their blonde friend was there, not only making that scenario real but enjoying it herself as she got her dewy folds devoured whole by Mia. \n\nAs much as he wished he could keep sinking his achingly hard cock into Mia's magnificent bubble-butt forever, Nick knew he was going to cum any second. His ass-pounding rhythm was too reckless and her rectum was just too warm and tight, so slippery and clingy, so welcoming and enveloping as he lustfully filled her lovely little orifice full of his dickmeat over and over again. At that point though, Nick could sense that Mia was teetering on the brink too. Her smooth anal walls were squeezing his pistoning shaft ever more erratically and, each time he wedged himself all the way into her ass, he could feel her fingers whirling crazily on her clit, squelching in her dripping pussy-nectar while his scrotum bumped into her soft puffy labia. \n\nAs his balls drew up and his cum surged along his pole, Nick basked in the feel of Mia's snug oily anus pulsing and twitching around his boner, announcing her incoming orgasm. Unleashing a few final butt-splitting thrusts, Nick slammed himself as deep as he could inside Mia's rectum and growled out: \"Aaahh Mia, I'm cumming! Ooohh this ass... Your beautiful ass... Aaaah Miaaaa!\"\n\nAs she felt Nick's swollen cock throbbing in her conquered asshole and unleashing a torrential spray of cum deep inside her bowels, Mia let out a pussy-muffled mewl of delight and rolled her clit between her fingertips in a furious strumming flurry, bringing herself off with him. Fueled by her long build-up and by the intensity of the buttfuck Nick had just treated her to, Mia's climax hit her like a lightning strike, reverberating from her deepest core and concentrating the myriad of sizzling wavelets of anal delight that she had enjoyed so far in a final full-body burst of blinding warmth.\n\nJet after thick jet of seed splashed against her rippling cock-milking anal walls and still, through the heady pleasure-haze of her peak, Mia kept munching on Ashley's clit, managing to make her cum again. While Nick stirred his thick spurting shaft deep inside her spasming asshole, Mia felt her orgasm flare brighter as another rivulet of Ashley's gushing juices bathed her lips. For long exquisite moments, with Ashley's yelps of release resounding over Nick's panting grunts and Mia's muted moans, the three friends were joined together in the shared ecstasy of their overlapping climaxes.\n\nEven after Nick was done pumping her ass full of cum, Mia's voluptuous bent-over frame was still twitching with delicious post-orgasmic tremors as she raised her head from Ashley's sopping slit, taking a series of much needed breaths, gulping down air like she had been underwater. The feel of Nick's sperm squelching around in her cum-flooded anal depths and his still rigid boner stuffed to the hilt into her semen-slick rectum made Mia purr contentedly as she turned to look at him over her shoulder. His bright guileless smile and the adoring, happy look he gave her spoke volumes to Mia, even before he let his words out.\n\n\"I love your ass, Mia,\" Nick said, as he had never failed to say every they had anal sex, ever since their very first sodomy. Then, furrowing his brow, he went on: \"I wasn't too rough, was I? I kinda lost it completely at the end, your ass is just so awesome... But you're okay, right?\"\n\n\"Mmh, baby, I'm more than okay, that was exactly what I needed!\" Mia cooed, her eyes still unfocused, her smile rapturous. \"That was crazy good, I came so much. You always know how to rock my world, baby. And Ash,\" she added, smacking her nectar-wet lips as she turned to look at the panting blonde, \"your pussy is sooo good, honey! It's even better than I dreamed it would be.\"\n\n\"Thanks, I guess, but it really was my pleasure, big time!\" Ashley quipped, blinking her eyes and laughing. She surprised both Mia and Nick as she got up on her knees and said, biting her lips: \"But now I want to taste you, Nick... Can I, please? I need to drink your cum.\"\n\nMia and Nick looked at each other and then at Ashley as their blonde friend leaned down over Mia's plump cock-crammed ass. Reaching her tiny hands down into Mia's deep butt-cleavage, Ashley wrapped her slender fingers around the root of Nick's shaft and started pulling it out of Mia's anus. Making Mia groan at the increasing empty feel, Ashley slipped inch after inch of Nick's meaty pole from the brunette's cum-sloppy ass and dipped her head down closer, her sculpted chin resting on Mia's sumptuous round globes. As soon as Nick's bloated purple glans popped out of Mia's stretched-out sphincter with a lewd squelching slurp, rivulets of pearly spunk began bubbling out of her well-fucked asshole. Determined not to waste that creamy treat, Ashley held Nick's sperm-coated dick close to Mia's distended orifice, stemming the flow of cum with his cockhead. \n\nNick grunted with stupefied delight as Ashley started lapping away at his semi-hard boner, running her tongue all around and along his shaft to scoop up the layer of churned semen covering his cockmeat, purring like a naughty kitten as she licked his pole clean. Craning her neck to see over the protruding curve of her bubble-butt, Mia suddenly gasped as she felt Ashley's warm wet tongue making contact with her ravaged asshole. \n\n\"Ooohh fuck, Ash!\" Mia panted, loving the soothing yet exciting feel of her friend's tongue flicking and licking all around the tender edges of her gaping, seed-oozing asshole. \"I love your slutty side, honey! Aaahh yeees, lick my ass like that!\" \n\nThose words made Ashley grin mischievously as she worked her lips and tongue all over Mia's dilated rosebud and Nick's cock, alternating between licking her butt-ring and slurping on his dick, eagerly drinking down every glob of sperm she gathered. All the while, Ashley held Mia's slowly shrinking sphincter somewhat plugged with Nick's fat mushroom head, preventing the biggest part of his load to leak out of her ass just yet.\n\nOnce she was sure that no more cum could be retrieved by lapping on Nick's cock and rimming Mia's reddened butthole, Ashley gave his glans a final parting smooch and gently pushed him aside. Taking Nick's place behind Mia's glorious upturned rump, Ashley parted the brunette's soft jiggly asscheeks and lowered her face into her crevice, clamping her mouth over Mia's closing sphincter and starting to suck hard on it.\n\n\"Holy fuck, Ash!\" Nick murmured as he sat back against the headboard, breathing hard as he stared at the insanely erotic spectacle unfolding before his disbelieving eyes. \"This is beyond hot!\" he gasped as he held his softening but still chubby dick in his hand, absentmindedly stroking it.\n\n\"Ooohh she's so good at it, baby!\" Mia huskily moaned, looking back at Nick with pleasure-dreamy eyes. \"Yeaahh that's it, Ash, lick my asshole like that!\" Mia cried out, her fingers once again rubbing away on her overcharged clit while she tilted her ass up to let Ashley bury her beautiful face deeper between her plump buttcheeks. \"Uuhh yes, suck all that creamy cum out of my ass!\"\n\nDrunk with lust, exhilarated by a sense of naughty freedom coursing through her whole slim body, Ashley proceeded to do exactly as Mia exhorted. With her lips glued to Mia's sphincter in a delicate yet persistent vacuuming kiss, Ashley didn't just wait for the massive load that Nick had deposited deep inside the brunette's ass to leak out of her rectum, but she actively sucked it out. Poking her wiggling tongue into Mia's tender butt-ring and twirling it around inside her recently sodomized anus, Ashley slurped up every drop and glob of sperm she could reach, all the while drinking down the rivulets of oozing seed that kept trickling out of Mia's pucker of their own accord. \n\nAs she sucked greedily on the brunette's puffy sphincter to draw more milky ejaculate out of her anal depths, Ashley smiled inside at the feel of Mia's reddened little rosebud twitching in pleasure around the tip of her butt-probing tongue. Ashley loved that weird sensation: each quick anal spasm seemed to her like the debauched parody of a nibbling smooch, as if Mia's pulsating orifice was trying to kiss her back, clenching and winking its crinkled edges around her tongue. \n\nBlown away by Ashley's delicious rimming, thrilled beyond words by the feel of her friend's mouth suckling languidly on her well-fucked anus, Mia fingered herself to two quick back-to-back mini orgasms before Ashley was done eating her asshole out. When she raised her delicate face from the lush valley of Mia's butt-cleavage, Ashley was still licking her cum-glossy lips, humming in slutty delight as she savored the taste of Nick's thick cum sucked straight from Mia's ass. \n\nSated and overjoyed, Mia let herself fall forward on her tummy while Nick just smiled and feasted his eyes on the two beauties sharing his bed, his hand still distractedly jacking his plump cock. In the brief silence that followed, Ashley let out a nervous giggle, her lustrous hazel eyes darting from Nick to Mia. \"Okay,\" she finally said, unable to suppress a grin, \"so, that was me being a nasty cum-starved whore! That wasn't too dirty though, was it, guys? Please, don't be grossed out! It just felt right at the moment...\" \n\n\"Ash, I don't honestly think there's any such thing as 'too dirty' between consenting adults,\" Nick mused, \"at least if you mean figuratively 'dirty'. And even if you mean it literally,\" he went on, determined to dispel any possible doubt Ashley might have, \"the lube was water based and edible, and I can testify at length about the absolute squeaky cleanliness of Mia's lovely little asshole!\" \n\nNick's and Mia's eyes met as the three of them laughed, Ashley's vague concerns evaporating already. Exhaling contentedly as she rolled onto her side, Mia caressed Ashley's supple thigh while she purred: \"Don't worry, honey, everything's fine. We'd never judge you. Well,\" Mia added with a chuckle, \"nor for being so adorably slutty, that's for sure! Really, Ash, from what I see you're fitting right in with us already. Now come here and let me taste some of Nick's cum!\"\n\nLaughing, rolling her eyes yet loving the understanding and affection she got from both Mia and Nick, Ashley lay down alongside the busty brunette. Facing Mia, Ashley spoke with a trembling voice: \"I love this, I really do. It's so good to be with you two. You make me feel so safe, like I'm free to do whatever I want. I don't think I'd ever be able to act this way with anyone else except you guys, I mean, when I'm with you...\" Ashley trailed off, turning to meet Nick's gaze and then Mia's. \n\nAs she tried to let her deepest thoughts out, Ashley was shivering from the brunette's featherlight touch. Mia's fingertips delicately traced her neck and cheeks, then her digits were running through her hair, her blue eyes staring into hers, her face closing in on Ashley's. \"I never thought I'd get to do this...\" Ashley murmured, leaning in as Mia's full parted lips got nearer, the warmth of her mouth radiating to her own lips. \"All of this... Any of this for that matter... Thank you so, so much.\"\n\nMia just smiled and pressed her lips against Ashley's, not trusting words to convey her feelings but rather letting her tenderness and joy flow in a long, deep kiss. Ashley drank in Mia's kiss with passion, tasting her and responding immediately, letting her tongue explore Mia's mouth, sharing the lingering flavor of Nick's cum with her. The feel of Mia's soft mouth suckling and pressing on her own was so intoxicating to Ashley that she found herself searching hungrily for Mia's luscious lips, finding them always open and welcoming, ready to join with hers over and over again. \n\nWith their arms wrapped around each other and their chests squashed together, their erect nipples poking into the other's tits, Mia and Ashley lost themselves in a languid make out session. As their tongues danced and their hands roamed one another's smooth naked body, the girls' arousal just kept growing, until their prolonged soulkiss and their teasing caresses weren't enough anymore.\n\nNick couldn't help but grin and stroke his recovering dick faster as he watched Mia gently shift and guide Ashley until they had repositioned themselves with Mia on her back and Ashley lying on top of her curvy frame, their glistening pussy mounds brushing together. Parting her legs until their drooling slits were touching and their joined labia mimicked the persistent lip-lock of their mouths, Mia murmured throatily into Ashley's kiss: \"Turn around and sit on my face, Ash, I need to taste your sweet little pussy. I want to lick you and make you cum in my mouth again.\" \n\nAshley barely had the time to rearrange herself on top of Mia in a sixty-nine position before the brunette's hands were grabbing onto her firm round tushy, pulling her down until Ashley's labia were smashed against Mia's hungry, suctioning lips. Hissing in pleasure, trembling at the feel of Mia's tongue expertly swiping her dewy groove and flicking teasingly over her exposed clit, Ashley didn't think twice before lowering her head between Mia's thighs, her yelps of pleasure turning into muffled moans as she started to lick her voluptuous friend's smooth pussy. \n\nNick's ears were filled with a symphony of wet, lascivious pussy-eating sounds as he feasted his eyes on the amazing sight of the girls' passionate sixty-nine, his cock hardening by the second. From where he was sitting, he had a perfect view of Ashley's round upturned bottom. As if it wasn't beautiful enough in and of itself, Ashley's protruding tushy looked more mouth-watering than ever at that moment. With Mia's hands kneading those smooth shapely asscheeks and parting them to reveal the tiny twitching pucker of her sphincter, Ashley's sweet heart-shaped hiney beckoned overpoweringly to a devoted butt lover like Nick.\n\nFor long languid minutes, watching intently as the girls had some fun on their own, Nick managed to contain his growing need to pounce Ashley's flawless little rump and have his way with her tight, irresistible asshole. Eventually though, once he was convinced that both Mia and Ashley had cum at least once on one another's clit-munching mouth, he just couldn't restrain himself anymore. Slowly stroking his recovered rock-hard cock, Nick knee-walked as if in a trance until he was right behind Ashley's splendid ass, his eyes never leaving her pink winking rosebud.\n\nWave after crashing wave of bliss was washing over Ashley's slender body as she lapped and kissed and slurped away at the soft, nectar-dripping folds of Mia's pussy. A constant ebb and flow of pleasure had claimed her since Mia had started eating her out, calming her and exciting her at the same time, egging her on as she worked her mouth on Mia's slit with a thirst for her juices that she herself didn't suspect she possessed, but that she was now determined to sate. Caught up as she was in her clit-suckling efforts, buzzing with a persistent pleasure-glow radiating from her masterfully licked pussy, Ashley suddenly felt her whole body shiver as another mouth made contact with her exposed butthole and she was introduced to a new mind-boggling level of sensual bliss. \n\nAshley's head jerked up involuntarily, her eyes bugging out and her nectar-glossy mouth going slack in a silent gasp as she basked in the feel of Nick's hot breath on her sphincter, his lips tenderly smooching the rim of her sensitive orifice and his warm moist tongue lapping ravenously all over her tight little rosebud. Having both her pussy and asshole licked at the same time shocked Ashley to the core, it felt so overwhelmingly good. To make things even better, the lewd and unexpected pleasure given her by Nick's voracious rimjob coincided with a renewed oral assault from Mia on her drooling slit and engorged clit, hitting Ashley with a storm of breathtaking pleasure. \n\nThe priceless ecstasy of having two expert mouths working her holes, the feel of two relentless tongues wiggling their way into her body from both her juicy pussy and her twitching anus at the same time was just too good for Ashley to handle. Soon she went rigid, her body covered in goose bumps and her head thrown back as a massive climax exploded outward from her groin and coursed through her whole slim frame like a burning shock wave. Ashley couldn't even tell if her orgasm was originating from her pussy or her asshole, she just hoped she would survive it to feel it again. \n\n\"Aaahh! Ooohh Niiiick, oohh my god... Ahhh Miaaahh, yeeess... Ooohh fuuuck!\"\n\nHis face buried in her asscrack, his hands holding her firm round buttcheeks apart, Nick tried to force his tongue as deep as possible into Ashley's pulsating sphincter, smiling as he gloried in her rambling yells of release. As he hungrily kept up his anal tongue-fucking, the prolonged spasms that made her anus clench and unclench told him just how hard Ashley was cumming. The muffled slurps that Mia was causing as she gulped down the blonde's gushing nectar confirmed what Nick already knew: Ashley was loving what they were doing to her, and that was its own reward.\n\nNick and Mia continued their concerted oral attentions on Ashley's holes for a bit longer, even after her satisfied body had gone limp and she had rested her head on Mia's thigh, whimpering in constant pleasure, shivering all over and panting breathlessly. Only after Ashley's mewls broke into another long, choked orgasmic cry did Mia and Nick finally relent their lascivious feeding frenzy, removing their faces from her pussy and asshole and sharing a meaningful glance.\n\n\"Uhhh... Whaaa...\" Ashley muttered groggily, straining to open her eyes as she realized that both her holes were now maddeningly unattended. That sense of frustrated need sobered her up enough to register the fact that, while she was still on her hands and knees, Mia was no longer underneath her and her cheek was now pressed against the sheets and not the soft flesh of the brunette's thigh. \n\n\"Aaawh, nooo... More, pleeease!\" Ashley pouted sulkily. \"I need more... My pussy, my asshole...\"\n\nStill pleasure-dazed, Ashley brightened up as she felt Nick's hands once again grabbing her little rump from behind. Ashley smiled at the feel of his meaty cock nestling in her ass-crevice while, kneeling in front of her, Mia pulled her upper body to hers and embraced her tightly, pressing her huge jiggly tits into Ashley's perky breasts. ",
        "\"Don't worry, honey,\" the brunette purred, her lips lightly brushing against Ashley's slack mouth, \"we'll take good care of you. Won't we, baby?\"\n\n\"You bet!\" Nick chuckled as he knelt closer behind Ashley, settling himself between her legs and pressing his chest against her back. Peeking over the blonde's shoulder to look into her glazed-over eyes, his long arms encircling her slim waist and caressing her flat tummy, Nick murmured into Ashley's panting, parted lips: \"I'm dying to feel your tight little asshole squeezing my cock again, Ash, if that's okay, of course... Do you want me to buttfuck you, Ash?\" \n\nOn her knees and sandwiched between her friends, Ashley had the biggest, brightest smile on her lips as she murmured: \"Oooh I do! I want you in my ass so badly, Nick! I need to feel your big cock deep inside me, stretching my asshole so good, filling me so much... I've been fingering myself like crazy the last couple of days thinking about you fucking my ass! And I want you to make my pussy cum again, Mia,\" she said, turning her head to meet the brunette's pale blue gaze, her tiny hands automatically going for her big jutting boobs. \"You're so amazing, both of you...\"\n\n\"You're pretty awesome yourself, honey!\" Mia grinned, her mouth already kissing Ashley's, her hands reaching down for the blonde's sopping pussy and engorged clit. \n\nMoaning as she reciprocated Mia's kiss, Ashley tilted her ass up higher and leaned forward fully against the brunette's gorgeous body, poking her pebble-hard nipples into Mia's bulging, pillowy tits. Nick's cock flexed as Ashley wiggled her curvy tushy against his thick pole and reached her tiny hands behind to part her own firm little buttcheeks, wantonly inviting him to fuck her beautiful ass. Needing no more encouragement, Nick swiftly grabbed the lube and started pouring it all over Ashley's splayed open butt-crack. \n\nSliding his boner up and down her crevice, Nick teased Ashley's winking orifice with his bloated glans as he coated her backdoor and his shaft with an exaggerated amount of lube. Using his thumb and forefinger to pry the edges of her sphincter slightly apart, Nick gaped Ashley's pouty little asshole and allowed a generous dose of the oily fluid to flow straight into her tight anal passage. As Ashley moaned into Mia's smooching mouth, shivering from the cold sensation of the lube trickling deep inside her rectum, Nick wormed one then a second slippery digit into her tiny pink rosebud, twirling them gently around Ashley's snug butthole. Once her rubbery anal walls were coated with lube, he started slowly masturbating her anus, trying to match Mia's pussy-fingering motions.\n\nNick was high on the feel of Mia's digits moving inside Ashley's vaginal tunnel and rubbing against his own slick ass-probing fingers through the thin barrier separating her holes. Resting his head in the hollow of the blonde's shoulder, Nick nuzzled both Ashley's and Mia's cheeks, peppering them both with butterfly kisses. Unclasping her mouth from Ashley's so that her yelps of pleasure were now clearly audible, Mia kissed Nick deeply as their friend writhed between them, her slim body wracked with pre-orgasmic jolts. \n\n\"Oooohh yesss!\" Ashley squealed as Nick slid his fingers deeper into her asshole and Mia pumped her digits faster inside her pussy. \"Make me cum, make me cum, make me cuuhh-uhhh-uum!\"\n\nNick felt his cock harden even more as he kept making out with Mia over Ashley's shoulder, the blonde's wails of pleasure infusing him with lust. While Ashley screamed out her orgasm, Nick's fingers stayed trapped inside the gripping confines of her smooth climaxing butthole while three of Mia's digits were buried in her quivering slit, getting bathed in Ashley's gushing girl-cum. \n\nWhen she descended from her peak, her head lolling back and her mouth agape, the first breathless words that Ashley spoke were: \"Fuck... My ass... Now... Please... Nick... Fuck my ass...\"\n\nGiving Mia's lips one last loving kiss, Nick slipped his fingers out of Ashley's clingy anus and guided his aching boner to her barely gaping sphincter. Taking a steadying breath as he gazed at the lewd spectacle of Ashley's slightly open asshole already starting to shrink to its cute puckered appearance, Nick gently pushed his fat purple cockhead into that pink winking hole, wedging just the very tip of his glans into Ashley's snug, nibbling butt-ring before it closed completely on itself. \n\n\"Ooooh yeeesss! More, I need more... Give me more, pleeeease!\" Ashley whimpered as her asshole clenched around Nick's spongy cockhead. \"I want your cock deep in my ass Nick, I'm going to explode if you don't fuck my ass right now!\"\n\n\"You'll get your tight asshole fucked soon enough, honey,\" Mia cooed, her fingers working Ashley's clit while her lips traced the blonde's sculpted features, planting soft kisses all over her flushed face. \"Nick is gonna love pushing his fat cock all the way up your sweet little ass. Isn't that right, baby?\"\n\n\"Oh yeah!\" Nick replied, smiling excitedly to a snickering Mia, \"I can't wait to be balls-deep in your amazing asshole, Ash!\" \n\nHolding her firm heart-shaped tushy in his hands, Nick splayed Ashley's cheeks wide apart to watch her tiny orifice twitch around his embedded glans, squeezing him as her anal muscles adapted to his presence. \"I'll go slow, though,\" he murmured, leaning closer to whisper into one of Ashley's ears while Mia nibbled on the other. \"I'm dying to pound your cute little butthole, Ash, but this ass is just too amazing and I don't want to hurt it, well, hurt you I mean!\" \n\nMia and Nick shared a laugh while Ashley just whimpered with desire, unable to reply even if she had wanted to. With Mia softly smooching her flustered face and diddling her clit while Nick kissed his way down her neck, his pulsing cockhead firmly jammed at the entrance of her anus, all that the slim blonde could do was mewl and let her head loll back against Nick's shoulder. Blissfully surrendered, Ashley wished only for Nick's huge pole to slide deep inside her ass and fill her full, turning the delightful jolts of pleasure pulsing from her pussy into those breathtaking full-body shocks that had made her see stars when he had first sodomized her two days earlier, claiming her virgin asshole as his and instilling an insatiable craving for anal sex into her deepest core.\n\nFeeling her relax while her clingy forbidden hole loosened its grip on his glans a bit, knowing that she was ready and that Mia's fingers would mitigate any discomfort, Nick gave Ashley a long kiss on the neck and pushed his hips forward, easing his cockhead deeper into her slippery anus. There was just the slightest resistance, then Ashley's well-readied orifice yielded completely to the gentle yet persistent pressure of Nick's swollen glans. Nick grunted in pure anal ecstasy as he took in the obscenely beautiful spectacle of Ashley's pink rubbery butt-ring surrendering to him, her sphincter dilating widely and then wrapping itself around his invading shaft, accepting him inside the smooth steamy tightness of her ass. \n\nExhaling contentedly as he resumed kissing her neck, staying still with just a couple of inches of his dickmeat wedged into her snug oily anus, Nick panted into Ashley's ear: \"Aahhh Ash, you're so tight... Your asshole feels so hot, it's incredible... Are you okay? Is it as good as you remembered?\"\n\n\"Uuuhh yeeees, Niiick! Sooo good!\" Ashley gasped breathlessly, her eyes closed and her mouth agape as she trembled from the unique, long-awaited feel of having her tiny little asshole stretched out by her friend's fat meaty cock once again. The ripples of pleasure caused by Mia's pussy-diddling fingers and the aftershocks of the orgasms she had just experienced made Ashley very relaxed and mellow, so much so that, though her ass felt impossibly stuffed, she was barely feeling any discomfort, just a devouring need to be crammed full of cock.\n\n\"Uuhhh fill me, Nick, stretch my aaaaass!\" Ashley wailed, maddened by the careful yet teasing preparations she had endured. \"Go deeper in me, push your cock all the way up my ass, pleeease! I need you to fuck my ass, I need more... Moooore mmmphh!\"\n\nNick couldn't suppress a grin as he watched Mia start to devour Ashley's slack mouth in a passionate soulkiss. To the sound of the girls' kiss-muffled moans, grabbing onto Ashley's supple little buns and spreading them open to get perfect access to her tiny cock-stretched hole, Nick started gently rocking his hips, focusing on the task of immersing himself balls-deep inside the hot, delicious snugness of Ashley's ass. \n\nDespite Ashley's pleas for him to ram himself up her butt and pack her full of cock at once, Nick didn't hurry. Instead, he set a slow, patient rhythm of shallow back and forth thrusts, sinking into Ashley's rectum a little bit more with every in-stroke and adding another squirt of lube at every out-stroke. Letting Ashley's inexperienced anus adjust gradually to his rock-hard shaft was his priority, so that he wouldn't risk hurting her and she could really enjoy their sodomy as much as possible. Beside that though, resisting the urge to just slam his thick boner all the way into Ashley's exquisite ass also had a deliciously torturous quality to it that Nick appreciated. Sheathing himself to the hilt inside Mia's welcoming anal depths in one long easy push was always epic, but Nick was just as happy to take his time and slowly open up a super tight, cock-milking asshole like Ashley's. \n\nAs he devotedly worked on fitting more and more of his length inside the enveloping warmth of Ashley's slick velvety anus, Nick gloried in the spectacle of her dilated sphincter dragging greedily along his shaft as he glided out and then meekly collapsing on itself as he pushed back in, over and over again. The only thing better than that lewd sight was the heavenly feel of Ashley's smooth anal walls adhering to his cock, resisting a little then relenting, squeezing his pole but still letting him slide deeper and deeper inside her rectum at each pass, until, finally, his glans was pushing as far into her asshole as it would go and his balls bumped against the drooling folds of her pussy, so close to Mia's clit-circling fingers that he could feel them rubbing away. \n\nWhen she felt Nick's hips pressing firmly into her conquered little butt, Ashley unclasped her mouth from Mia's luscious lips and gasped: \"Uhhh fuuuck! You're uuhh... All the way... In my aaaaass!\" \n\nAll through their torrid make-out session, Ashley had been trembling in Mia's embrace as waves of deep, sizzling delight originating from her sensitive cock-packed asshole clashed and fused with the pulses of warm pleasure radiating from her clit. With Nick's huge shaft completely embedded inside her snug rectum and Mia redoubling her pussy-diddling efforts, Ashley was positively writhing with pre-orgasmic spasms, teetering on the verge of a monumental climax. \n\n\"Feels good to have your ass packed full of cock, doesn't it?\" Mia purred sultrily, licking Ashley's lips and pushing her jugs more firmly into Ashley's tits, making their nipples brush together. \n\n\"Aaah, yesss! It's so good in my ass, so big and hard... Uuuhh, he's so deep inside me!\" Ashley whimpered, her mind reeling as Nick stirred his ass-stretching boner in the furthest recesses of her anal depths, stimulating her twitching rectum amazingly as he kissed her neck. At the same time, Mia's hands were driving Ashley crazy, fingering her dripping pussy and rubbing her engorged clit as her husky voice filled her ears. \n\n\"You're gonna cum now, aren't you, Ash?\" Mia whispered slowly against Ashley's cheek. \"You're gonna cum with Nick's big fat cock stuffed up your little asshole and my fingers in your pussy.\"\n\n\"Uuuuhhh god yeeeees! I'm mmh... Aaaahh, Miaaa... Niiiick...\"\n\n\"Cum for us, Ash,\" Mia cooed, planting a lascivious kiss on Ashley's gasping mouth as she unleashed a final clit-strumming flurry on her blonde friend's needy bud and slipped a third finger into her nectar-drenched pussy. \"Cum, honey. Cum like the dirty little buttslut that you are.\"\n\nThat did it. That word, the naughty appropriateness of it, the deep sensual truth it expressed hit Ashley hard. She was a buttslut, and she loved it. Adding up to the stimulation of her dick-crammed ass, her overworked clit and her well-fingered pussy, Mia's words tied all those sensations together and gave Ashley's pleasure-wracked body the final push, detonating a toe-curling orgasm. \n\nWrapping his arms around her from behind while she went rigid and came screaming into Mia's mouth, Nick grunted in pleasure as Ashley's rippling rectum clenched and unclenched around his shaft, massaging him from tip to root in a series of strong, suctioning anal tugs. Those orgasmic squeezes were so mind-blowing that he had to strain not to succumb to the increased tightness of Ashley's anus, barely managing not to shoot his load deep inside her impossibly snug asshole. \n\nWhile Ashley gushed her girl-cum all over Mia's fingers and pressed herself against her soft curvy frame, Nick peeked his head over the blonde's slim shoulder and planted a savage kiss on Mia's succulent lips. Trapping Ashley's twitching frame between their bodies, Nick and Mia made out lovingly until their friend's climax subsided and they felt her hot lips brushing against their joined mouths, hungry to participate in their kisses. \n\nNuzzling and nibbling, licking and panting and smooching, Ashley, Nick and Mia soon lost themselves in a three-way kissing frenzy, their lips and tongues alternating and switching from one mouth to the other in a fluid languid dance. \n\nIt was Mia that temporarily broke their make out session to blurt out: \"Fuck her ass now, baby! She needs you to fuck her hard and fill her ass full of cum!\"\n\nAs Nick's snugly sheathed cock throbbed inside her warm anal depths, Ashley's only response was a long needy purr. Squirming with desire, urgently rubbing her pointy tits into Mia's huge boobs, Ashley gave Nick's boner a few gripping squeezes within her slick rubbery rectum as she resumed kissing both Nick's and Mia's lips like there was no tomorrow. Smiling inside, avidly holding the blonde's taut curvy buttcheeks in his kneading hands while his tongue got sucked into the hot mouth of each of the girls in turn, Nick began properly fucking Ashley's ass. \n\nMoaning as he basked in the incredible tightness of her rectum, Nick started off with a few long, deliberate strokes. Withdrawing completely from Ashley's ass, he let even his bloated purple tip slip out of her dilated sphincter, glorying in the popping slurping sound caused by his glans vacating her anus. Nick was high on the sight of that slick stretched-out orifice winking irresistibly at him as it started to shrink closed, twitching with need as if begging him to come back inside. Immediately, while Ashley's cute pink butthole was still gaping open, Nick slid his cock deep inside her ass again, widening her snug oily sheath as he glided gently in, pushing himself all the way into her warm anal passage. Once he had fed her gobbling little asshole all of his cockmeat, he paused just a second to savor the feel of her buttery bowels clinging onto his entire length before he pulled out once more, repeating the process, taking Ashley's breath away all over again. \n\nSoon, egged on by her kiss-muffled moans and by the urge to finally unleash his anal lust in full, Nick increased the intensity of his thrusts, leaving more of his shaft inside the tight confines of Ashley's ass on the out-strokes and pushing himself faster and deeper into her steamy rectum at each in-stroke. The crescendo was unstoppable but gradual, so that by the time Nick began vigorously pumping his cock into Ashley's butthole she was joyously rocking her tushy back into his ass-plugging boner, taking him as deep as possible into her enveloping anus at every pass. \n\nAs he plowed her asshole with gusto, Nick savored every little contraction and delicious clenching caress of Ashley's slippery, velvety smooth anal walls. He was glad he had taken his time readying her ass with his tongue and fingers, greasing and teasing the blonde's tiny backdoor more than was strictly needed. The protracted preparations were well worth it though, not only because now he could ride her shapely little rump with all his butt-loving ardor but, most importantly, because Ashley was clearly liking it too, the constant spasms of pleasure rippling through her dick-hugging rectum testifying to her appreciation of their sodomy. \n\nWhile Nick kept up a steady, unrestrained assfucking tempo marked by Ashley's choked whimpers and by the fleshy impacts of his butt-humping hips slapping against her round protruding tushy, their three-way make out session became increasingly wilder. It was almost surprising for Nick to hear their mingled animalistic grunts and inarticulate kissing sounds coalescing into words when Mia suddenly spoke. \"Finger my asshole, Ash,\" Mia murmured urgently into their mouths as Ashley and Nick shared a messy, slurping kiss. \"I want you to finger-bang my ass while he fucks yours!\"\n\nNick's pistoning cock flexed deep inside Ashley's tight rectum as he watched the blonde's delicate hand caressing the plump roundness of Mia's bubble-butt and then moving into her ass-crevice. Nick couldn't help but pump his dick harder into Ashley's anus as he admired her slender forefinger disappearing into Mia's greedy forbidden hole, making the brunette purr and grin contentedly. \n\n\"Ahhh yes, honey, give me another finger... Oohh that's it, Ash!\" Mia cooed as Ashley eased a second digit into her ass. Strumming Ashley's clit faster with one hand while letting go of the blonde's soaked pussy with the other to masturbate her own needy slit, Mia arched her back as she gasped out: \"Yeees, finger my ass like that! Uuhh fuck my slutty asshole with your fingers, Ash! Oohh Nick, fuck her harder now! Ram your cock deep in her ass and fill her with cum, baby!\"\n\nHigh on anal lust, stunned by Mia's limitless eroticism and stupefied by the debauched yet intimate harmony linking all three of them, Nick let got of his last shreds of restraint and increased his sodomizing tempo even more, launching his final assault on Ashley's sweet little ass. With her fingers sawing mechanically into Mia's docile anus, Ashley lost any sense of herself except for the pulsing shocks centered on her clit and the wonderful waves of anal pleasure that hit her every time Nick's huge throbbing pole slammed its way up her snug clingy asshole, over and over again. \n\nAs Nick drilled recklessly into her surrendered rectum with deep butt-splitting thrusts, Ashley's limp body was jarred repeatedly forward into the pillowy fullness of Mia's tits. Panting while she diddled her own pussy with one hand and Ashley's gushing slit with the other, Mia smiled at the thought that, if it hadn't been for her own curvaceous frame pinning Ashley up, her blonde friend would have flopped down on the bed like a rag doll, pleasure-weakened as she was by her approaching climax and by Nick's forceful ass-pounding pace.\n\nPast words and thoughts, Ashley, Mia and Nick became three lust-addled animals tangled up in their unbridled three-way coupling. Their mouths drank greedily off each other, sharing their tastes as their excited groans fused in a breathless chorus of impending orgasm. As Nick's raging cock plundered Ashley's tight buttery rectum and the blonde's fingers slid in and out of Mia's insatiable asshole in deep sawing motions, the brunette kept pinching her own clit with one hand while with the other she strummed Ashley's pulsating bud in a devastating series of blurry, whirling rubs. \n\nHer tongue was stuck inside Mia's suctioning mouth when Ashley's monumental build-up reached its limit and exploded in a full-body climax. Her thoroughly-fingered, overcharged clit and well-fucked asshole sent such overwhelming shocks of delight crackling through her body that Ashley's vision faded to white. The stuffing, meaty fullness pulsing deep in her rectum and a breathtaking flurry of Nick's powerful, ass-drilling plunges were the last sensations that Ashley's mind registered as an all-encompassing sense of physical bliss claimed her being, wiping her beatifically out.",
        "The long, inarticulate sound that Ashley made while she peaked was lost in the bestial grunts escaping Nick's mouth as he crammed his aching boner deep inside her rippling, cock-milking rectum in a final rump-riding rampage. Ashley's asshole was clamping down so firmly around him as she climaxed that he had a hard time sliding in and out of her snug slippery anus as fast as he wished. Nick managed to impart just a few savage butt-wrecking thrusts, then he happily surrendered to those amazing dick-tugging squeezes. Jamming his shaft all the way inside her smooth rectum one last time, Nick came like a geyser deep inside Ashley's ass, letting out a primal bellow and going rigid all over as he sprayed her anal tunnel with jet after powerful jet of sperm. \n\nAs Nick howled out his pleasure and flooded Ashley's quivering bowels with his creamy seed, Mia rolled her own swollen clit between her fingers and came. Her sensitive, hungry butthole pulsated erratically around Ashley's fully immersed fingers as Mia choked on her cry of release and gushed her girl-cum all over her own clit-frigging digits, joining her friends in their shared orgasmic haze.\n\nAs the girls hugged tightly and leaned into each other's body, their heads resting on one another's shoulders and their heaving breasts squashed together, Nick wrapped his long lanky arms around both of them, his hands roaming down Mia's spine as he pressed his chest firmly against Ashley's back. Sweaty, spent and sated beyond description Nick, Mia and Ashley just stayed there as they were for a while, kneeling and huddled, breathing raggedly and savoring the afterglow.\n\nIt was Nick who emerged first from their protracted post-orgasmic torpor. Planting a tender smooch on Ashley's nose and another on Mia's chin, he exhaled and opened his arms wide, letting himself fall back to lie spreadeagled on the bed. The sudden emptiness caused by Nick's cock slipping out of her abused, cum-flooded asshole caused Ashley to snap out of her blissful absence. \n\n\"Awwh nooo...\" she mumbled groggily, disentangling herself from Mia's embrace and turning around to crawl between Nick's legs. As Mia blinked her eyes in pleased surprise, meeting Nick's stunned gaze, Ashley took his chubby sperm-lathered cock into her mouth and started nursing on it, slurping up and gulping down every trace of cum she could gather. \n\nGrinning as she positioned herself behind Ashley's upturned tushy, Mia planted her face between her friend's taut little buttcheeks and started licking up the rivulets of cum oozing out of her reddened, gaping asshole. Lazily lapping her way to Ashley's plundered sphincter, Mia took her time gathering Nick's overflowing sperm while the blonde tried to coax more of it straight from his softening cock. As she rimmed Ashley's slowly closing butt-ring, soothing and caressing her tender hiney-hole with her mouth as she drank every gob of semen leaking out of it, Mia didn't fail to also swipe her tongue into the folds of her friend's soaked pussy, thus mixing the taste of her two lovers.\n\nNick was way too blown away and fucked out to do anything but gasp and watch slack-jawed as the girls went about their lewdly delicious cleaning efforts. A momentary jolt of life reached his cock when Mia joined Ashley between his legs and the two of them started lapping away at his tool together, each licking a side, their mouths open and moaning, their lips and tongues dancing and flicking all over his shaft. Even though he had not gone completely soft yet, Nick knew we wouldn't get properly hard anytime soon, but he still loved to see Mia and Ashley kiss and make out around his chubby cock, their lips shiny with his cum and their mouths avid to lick it off each other.\n\nNick's huge smile matched the girls' overjoyed expressions as they finally let go of his spent dick and snuggled up with him, Mia on his left side and Ashley on his right. After they both lovingly smooched him and shared a soft lesbian kiss, the girls rested their heads on his chest, exhaling contentedly. \n\nAs he wrapped an arm around each of the two recuperating beauties cuddled into his sides, Nick couldn't help but feel like he was the luckiest guy in the world. It wasn't just because he was kneading Mia's plump juicy bubble-butt with one hand while massaging Ashley's sweet heart-shaped tushy with other. Of course, having just fucked those two different yet uniquely beautiful asses was amazing, but he knew that the three of them were bound by ties that went beyond their undeniable sexual compatibility. It felt right to be there, with both of them. More, it felt perfect.\n\n\"Mmh I never want to be away from you two...\" Ashley said dreamily after a while, interrupting Nick's thoughts and making Mia chuckle throatily. \"Seriously, you'll have to kick me out of this bed, this is just too great!\"\n\n\"Don't worry, Ash,\" Mia purred, caressing the blonde's smooth back. \"Neither I nor Nick would ever think of doing anything like that, right baby?\"\n\n\"Yeah, absolutely,\" Nick confirmed. \"In fact,\" he added, adjusting his glasses, \"if you're tired of the dorms and you wanna move in here, you can take Josh's former room whenever you like. The rent is already paid for the next three months too, courtesy of that cheating sack of crap.\"\n\n\"Really?\" Ashley said disbelievingly. \"That sounds awesome but... I just figured you would wanna move in, maybe...\" she tentatively finished, arching an eyebrow as she looked at Mia.\n\n\"Why?\" Mia snickered, pressing her bulging boobs into Nick's chest as she looked tenderly at him, \"I can sleep in this bed any time I want already! And,\" she added in a husky voice, training her pale blue gaze on Ashley, \"I plan to sleep in yours too, once you've moved in...\"\n\n\"Sounds good to me!\" Ashley quipped, grinning back at Mia and earning a delicate kiss from her.\n\n\"Maybe we should get a bigger bed though,\" Nick mused, his hands never leaving the girls' beautiful asses. \"I mean, at least this bed should be big enough for all three of us, don't you think?\" \n\n\"Queen size seems big enough, to be honest,\" Ashley shrugged, looking questioningly at Mia.\n\n\"Yeah, we'll be fine,\" Mia agreed. \"Besides,\" she cooed, reaching her arm to circle Ashley's shoulders, pulling her closer, \"it's best if we don't have too much space, I think. That way we'll have to cuddle even more!\"\n\nNick and Ashley laughed, but Nick was actually serious when he asked: \"Ash, you ARE a cuddler, aren't you?\"\n\n\"Duh, of course I am, totally!\" she replied with a smile, draping her thigh over his leg and snuggling tighter onto his chest, her cheek brushing against Mia's. \"I love cuddles, they're the best!\"\n\n\"Yes, they are,\" Nick agreed wholeheartedly, exhaling and tightening his embrace on both girls. \n\nAs Ashley closed her eyes, Nick and Mia shared a meaningful glance, Nick nodding imperceptibly as Mia quickly blinked and tilted her head in approval. Ashley had aced her final test, a somewhat redundant one but still significant in the long run. As much as they were into raw unrestrained sex, neither Nick nor Mia could ever give up snuggles. Having just confirmed that Ashley was all about cuddling too was the ultimate sign of her being the one for both of them. \n\nRelaxed and happy as they enjoyed the silence, Nick, Mia and Ashley quickly gave in to sweet exhaustion. Their breathing calmed and their eyelids got heavier while their snuggled bodies still clung tightly to each other in a three-way hug. They were all on the verge of sleep when Ashley groggily yawned: \"Mmhh nighty night... Love you, guys...\"\n\n\"Love you too, honey,\" Mia whispered softly, kissing Ashley on the cheek and making her purr as she drifted off.\n\n\"Love you, Ash. Nighty night,\" Nick echoed, holding the blonde's slim body tighter to his lanky frame.\n\nAfter a few moments, as he reached toward the nightstand to put down his glasses and turn off the bedside lamp, Nick turned his head to look at Mia one last time before sleep. When his unfocused gaze met hers, Mia was beaming at him, her lips moving slowly as she silently mouthed something.\n\nNick didn't need his glasses to read Mia's lips. He knew what she was saying, or rather not-quite-saying, the way she had done countless times before over the years, never actually voicing the words. But it didn't matter. He knew she meant them and he was willing to wait as long as it took for her to spell them out loud. As he watched Mia's lips moving, he could almost hear her say it: 'I love you, baby.'\n\nAs he had done ever since that day long gone when he had agreed not to openly utter the words until she was ready to do it first, Nick silently mouthed back his heartfelt reply: 'I love you, Mia.'\n\nNick watched Mia smile one of her tender, rare smiles as she rested her head on his chest. The vision of a long stray lock of Mia's black hair mingled with Ashley's blonde pixie haircut was the last image that Nick's blurry eyes registered before he turned off the light. Warmed by Mia's soft curvy body on one side and by Ashley's slender cuddled-up frame on the other, Nick fell asleep within seconds, a fluffy peaceful sensation humming inside him."
    ],
    "authorname": "ZenZerker",
    "tags": [
        "anal",
        "ass",
        "oral",
        "ass to mouth",
        "threesome",
        "ffm"
    ],
    "category": "Anal",
    "url": "https://www.literotica.com/s/buttfuck-buddies-ch-02"
}
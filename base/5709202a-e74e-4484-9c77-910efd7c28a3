{
    "title": "The Descent Ch. 03",
    "pages": [
        "Sharon's hand trembled a bit as she reached for the garage door entrance to her home, wary about her ability to appear anything other than what she was feeling\u2014guilty. She knew that Jim was home as evidenced by his vehicle parked in the garage and she knew that there would be no hiding the fact that she was inebriated. What she was unsure of was how keenly Jim would be of the smell of sex and sweat on her and how nonchalantly she could head straight to the shower. Sharon turned the handle and inhaled sharply, half expecting Jim to be waiting on the other side of the door staring at her with his arms crossed. \n\nWhen the door swung open, Sharon was greeted by a dark kitchen and no movement or sound. Sharon stepped into the house and took a moment to listen for any signs of Jim before closing the door quietly behind her. She breathed a sigh of relief as she marveled at the prospect of heading to the shower unimpeded. She placed her purse on the small table next to the door and headed upstairs, making a direct bee-line toward the master bathroom which extended off the bedroom. \n\nAs Sharon stepped into the bedroom a soft snoring drew her attention to the bed where Jim was fast asleep. Sharon smiled to herself at her good fortune and quietly collected her nightgown and clean panties and headed to the bathroom unnoticed. Stepping into the shower Sharon was finally able to conceive of a scenario where her infidelity would be concealed, and it gave her a moment to contemplate what that meant for her. \n\nIn the heat of the moment, overcome with lust and emboldened by the disinhibiting influence of alcohol, Sharon had given herself to the idea of a wholesale lifestyle change. The idea of embracing her sexual awakening completely unrestrained by the morays of her marriage was exciting and appeared to be the ultimate expression of her new persona. However, now that she had gained some distance on the event and mulled over the ramifications of what could have happened if Jim had met her at the door and pieced the evidence together\u2014she was feeling far different. \n\nExploring the repressed passions of her previously undiscovered sexual deviance was one thing but blowing up her marriage and her family to do so was a high price. Sharon resolved to let this one indiscretion be a lesson in impulse control and endeavored to restrain her carnal pursuits to the domains previously agreed upon by herself and Jim. The showering experience was just as much about rinsing the physical imprints of her deceptions from her body as it was about cleansing her mental and emotional perceptions of the event from her mind. Stepping out of the shower she felt an aura of peace wash over her now that her priorities had been realigned and her feelings crystalized. \n\nOnce dry, Sharon could not seek the comforting cocoon of warmth provided by her bed soon enough. A dreamless and restorative sleep took her quickly. \n\nJim never even asked Sharon about that night and Sharon figured he'd deduced her lunch with Barb had run long\u2014for obvious reasons\u2014and turned into an early dinner. Being a weekend off for the swinger group Saturday and Sunday passed quietly, with lots of sleeping and work around the house for both Jim and Sharon. The renewed sense of closeness as a result of their new lifestyle continued to propel Sharon and Jim into a new chapter of intimacy in their marriage. By the time Thursday arrived Sharon had almost completely forgotten about her encounter with Jared the week before. \n\nBarb's tardiness was resumed, and Sharon was halfway through her Long Island Iced Tea before she arrived. \n\n\"Started without me I see?\" Barb commented, noticing the half empty glass. \n\n\"Can't help it if I'm on time,\" Sharon jabbed playfully. \n\nBarb feigned offense and smiled, completely used to their dynamic after so many years of friendship. It took only a few minutes for Barb to have ordered and nearly caught up with Sharon's progress in downing her drink. \n\n\"I'm not really hungry today,\" Sharon mused in-between light conversation about their uneventful weeks. \n\n\"Fine with me, I mostly just get something because I don't want you to eat alone. I'm fine with just getting another one of these,\" Barb commented, motioning towards her nearly empty glass. \n\n\"Count me in,\" Sharon replied, eliciting an approving gleam from her friend. \n\n\"I need a cigarette first though, you coming?\" Barb asked almost rhetorically, fully expecting Sharon to decline after their previous weeks experiment. \n\n\"Sure,\" Sharon challenged, somewhat surprising herself but subconsciously driven by the desire to exhibit her new persona and shock her friend in the process. \n\n\"Really? Hmm, alright then,\" Barb retorted with incredulity. \n\nThe two women walked to the parking lot together, with Barb shaking out an all-white Marlboro Light 100 before reaching the door. The moment they stepped out she was cupping her hands around the flame of her recently sparked lighter and puffing out a mouthful of smoke. \n\n\"I'm guessing there won't be another smoking attempt?\" Barb joked, before tilting her head up dramatically and releasing a cone of smoke into the blue sky from her red painted lips. \n\nMaybe it was the smugness of her friend or the strong desire to wipe that knowing smirk from her face or the utter relief that had washed over her friend as she exhaled the smoke, but Sharon reached her hand out. \n\n\"You're serious? Do you remember last week?\" Barb questioned. \n\n\"Practice makes perfect,\" Sharon replied, her hand still outstretched. \n\n\"Okay, but this time you need to take it easy. Let me coach you a bit,\" Barb replied, taking one final drag off the cigarette before transferring it to Sharon's hand. \n\nSharon accepted the long all-white cigarette and marveled at how foreign it looked between her fingers. \n\n\"Okay, so this time just suck a little bit and then breath in slowly,\" Barb explained. \n\n\"Why didn't you mention this last time?\" Sharon queried. \n\nBarb smirked, fighting back a laugh. \n\n\"You wanted me to cough, didn't you?\" Sharon shot, narrowing her eyes at her friend. \n\nSharon stuck out her pointer finger and thumb in a 'just a bit' gesture while continuing to smile. \n\n\"You bitch,\" Sharon replied in mock anger. \n\n\"I'm sorry! I had to get you back for that whole bad girl routine you were doing at lunch. Plus, I didn't want you to like it, smoking is a filthy habit after all,\" Barb explained half-heartedly. \n\nSharon rolled her eyes at Barb's attempt to appear as anything other than the corrupting influence she had always been. \n\n\"What? Only you can change?\" Barb continued. \n\nSharon rolled her eyes again. \n\n\"Whatever just smoke the damn thing already, you're wasting it,\" Barb pressed playfully. \n\nSharon watched her hand bring the white cylinder to her face and then between her lips. She clasped her lips around the filter of a cigarette for only the second time in her life and applied a modest amount of suction. As soon as Sharon became aware of smoke being in her mouth, she extracted the cigarette from her lips took a slow, measured breath in. Sharon's lungs rebelled against her attempts to saturate them with smoke, but she successfully endured the desire to cough. After another second, she pursed her lips and exhaled a thin, wispy stream of smoke. \n\n\"Damn girl, you did it,\" Barb exclaimed somewhat proudly. \n\n\"Yeah, now that you're not sabotaging me,\" Sharon fired back. \n\n\"Yeah, yeah, you had it coming. Now give it back already,\" Barb replied, extending her hand toward Sharon expectantly. \n\nSharon reflexively pulled her hand back without thinking about it, once again unsure of where this desire was coming from. She had always hated smoking. But it was an undeniable thrill for her to do something that she knew she shouldn't be doing and even more so something that no one would expect her to do. \n\n\"Fine, I guess I'll light another one,\" Barb said while watching her non-smoking friend take another small drag. \n\nSharon didn't even bother to respond, instead allowing the stream of smoke she was exhaling to do the talking. \n\n\"I swear, I think you might be a pod person or something,\" Barb concluded as she lit herself another cigarette. \n\nThe two women continued smoking their cigarettes in silence, with Barb often looking at her friend with a dumbfounded expression on her face almost unwilling to accept what she was seeing. \n\nSharon didn't quite make it through the entire cigarette before light-headedness dictated that she cut it short. Surprisingly, Sharon didn't mind the sensation and even enjoyed the slight buzz that seemed to accompany the one from her long island iced tea quite nicely. \n\nBefore they'd finished their second drinks each woman had smoked two more cigarettes and Sharon felt as if she finally understood why people always smoked when they were drinking. When they parted ways, they both expressed excitement at attending the next swinger party the following day. \n\nFor the third time in last 7 days Sharon jumped into her vehicle and drove home while drunk. It was something that she had once called selfish and reckless but like so many things recently had become almost routine. Smoking, drinking, sleeping with men other than her husband\u2014the person Sharon was becoming scared and excited her. Maybe it was because she was 46 and had already accomplished so much and the thought of 'ruining' her future wasn't really on the table, but Sharon hadn't really considered any of the potential repercussions her current lifestyle may have. Instead, it seemed like a just reward for a life lived responsibly and a multitude of personal and professional accomplishments that spanned decades. \n\nSharon recognized that this must be the same perception Barb had, although she'd never really abstained from risky behavior despite being very successful in her own right. So, if they'd both ended up in roughly the same spot and having both been successful professionally and as mothers and wives, why had Sharon deprived herself of all these things? She pondered this thought as she pulled into her garage next to Jim's vehicle. Sharon was happy to see that he was already home and relished the thought of spending some time with him. \n\nJim was sitting on the couch with the TV on but staring at his tablet instead of watching whatever was on. \n\n\"Hey hon,\" Jim called without looking up. \n\n\"Hey, how was your game?\" Sharon asked. \n\n\"Oh, it was fine. We usually don't even keep score. Just nice to get out of the house and shoot the shit with Rich,\" Jim explained. \n\n\"How's he doing?\" Sharon continued, while staring into the fridge for something to make for dinner. \n\n\"He's good. Really looking forward to tomorrow night. I kind of feel like he's expecting us not to go,\" Jim chuckled. \n\n\"Really? He thinks we're bullshitting?\" Sharon asked. \n\n\"I don't know, maybe he just can't accept it or picture us as swingers. I think he's gonna be pretty surprised. What about Barb?\" Jim followed. \n\n\"Oh, she's dumbfounded. She probably thinks I have a brain tumor or something. I don't think she can accept it either,\" Sharon explained. \n\n\"Well, I can't really blame them. This is totally out of character for us. And just now getting into it? At our age? It must seem pretty surreal,\" Jim reasoned. \n\n\"It seems pretty surreal to me too, but it's all going to become very real tomorrow night,\" Sharon expressed. \n\n\"Yeah, maybe we should talk about that,\" Jim replied. \n\n\"What do you mean?\" Sharon questioned. \n\n\"Well, I know we're going 'with' Rich and Barb, but are we like, with them while we're there?\" Jim asked. \n\nSharon thought about that for a moment, only now assessing the reality of attending a swinger party with their best friends. \n\n\"I don't know, would that be weird if we, I mean we're best friends,\" Sharon stumbled, trying to talk through her thoughts. \n\n\"It sounds weird, it feels weird when I think about it. Is that a line we want to cross? It seems like it's blurring the edges of our personal lives and our swinger lives, right?\" Jim offered. \n\n\"It does, kind of. But, why else would we be there with them? And are we sure they are even thinking of it that way? What has Rich said?\" Sharon continued. \n\n\"Not much, about the specifics. I do know that he's always thought you were attractive though. If he thinks he has my blessing to pursue it, I'm sure it's crossed his mind what could happen,\" Jim explained. \n\nSharon reflexively winced, imagining Rich as anything but a friend and Barb's husband was difficult. \n\n\"I mean, what do you think of him coming on to you?\" Jim asked plainly. \n\nSharon thought about it for a moment. Rich wasn't a repulsive man. He was clean, well-dressed, and hilarious. But physically he wasn't Sharon's type. Rich was a large man, probably about 6'3\" and 250lbs. Compared to the 5'10\" 160lb slender frame of Jim, Rich appeared to be a bit brutish. But again, he wasn't a hideous man it was just that the thought of a man that large having his way with her was a bit intimidating. \n\n\"He's very big,\" Sharon expressed with raised eyebrows. \n\n\"He is,\" Jim agreed. \n\n\"What about Barb? If I'm with Rich, that means you'd be with Barb. How do you feel about that?\" Sharon volleyed back to Jim. \n\nJim creased his brow and drew his lips tight, doing a half shake of his head. \n\n\"Well, she's certainly a pretty woman. But she's a handful,\" Jim mused. \n\nHe was right. Sharon's tall, thin, redheaded friend was sexy and had always been a head-turner but it took a special person to endure her boisterous personality for any amount of time. \n\n\"I have sort of a weird question,\" Sharon blurted. \n\nJim looked to his wife quizzically. \n\n\"Does the fact that Barb smokes turn you off?\" Sharon asked, seemingly out-of-the-blue. \n\nJim tilted his head back a moment to process the question but offered a quick shake of his head. \n\n\"Nah, doesn't really affect me either way,\" Jim answered flatly. \n\n\"So, you wouldn't have any problem kissing her? The whole ashtray mouth thing?\" Sharon pressed. \n\nJim creased his brow, a bit of confusion on his face. \n\n\"Not really, no. Why are you asking?\" Jim countered. \n\n\"Just curious I guess,\" Sharon replied. \n\nBut Jim wasn't dumb, and he'd detected something there. \n\n\"No, there's something going on. Did Barb say that she was worried about it or something?\" Jim pressed. \n\nSharon laughed a bit to herself. \n\n\"You and I both know Barb wouldn't give a shit either way,\" Sharon replied. \n\n\"So, what is it?\" Jim followed. \n\n\"I might have had a few cigarettes today,\" Sharon said through a smirk. \n\n\"You what?\" Jim said stunned. \n\n\"Yeah, I went out with Barb for her smoke breaks and tried it and it was a nice compliment to the alcohol,\" Sharon explained as nonchalantly as she could. \n\nJim sat in stunned silence for a moment before settling on a response. \n\n\"But you hate smoking,\" Jim uttered half to himself. \n\n\"I did, I mean I do. I don't know, I've been rethinking some things lately,\" Sharon mused to herself out loud. \n\n\"Rethinking? I think the research is in for smoking hon. Turns out it's pretty bad for you,\" Jim joked. \n\n\"I know, I don't mean it that way. I've been rethinking how I want to live, how I've been living. This has been a really weird time for me,\" Sharon explained. \n\n\"I get that, I know what you mean. But smoking? Why even tempt it?\" Jim continued pressing. \n\n\"Because people enjoy it. Barb enjoys it. The look she gets when she takes a drag off one of those things is obvious. Just seemed like why not try it? I'm 46, am I really going to die of lung cancer after smoking a couple cigarettes? I just want to try things, all the things that I never tried when I was young. I think I've earned it, don't you?\" Sharon ranted. \n\nJim processed his wife's words for a few moments to himself before shrugging. \n\n\"Sure, I say do whatever makes you happy. We've paid our dues, raised a family, made a lot of money. I don't see a problem,\" Jim agreed. \n\n\"I don't know if I'll ever smoke another cigarette as long as I live, but it's just how I feel about everything. What are we waiting for?\" Sharon added. \n\n\"Yeah, you're right. It's not like we're panhandling for heroin,\" Jim joked. \n\n\"Well, not yet,\" Sharon said with a wink. \n\nJim let out a hearty chuckle at that one, to which Sharon joined in. After a few more moments of silence Jim turned back toward his wife. \n\n\"So, smoking huh? I never would've guessed that one,\" Jim mused. \n\n\"Yeah, me neither. Most people don't experiment with their first cigarette at 46,\" Sharon said through a chuckle. \n\n\"It took a while, but Barb's negative influence finally rubbed off on you,\" Jim cracked. \n\n\"You'd be surprised, she kind of fought it at first,\" Sharon explained. \n\n\"Wow guess she's grown up a bit,\" Jim noted. \n\n\"Yeah, a bit,\" Sharon added with an obvious emphasis on the last word. \n\n\"Do you have one on you?\" Jim asked. \n\n\"One what?\" Sharon replied. \n\n\"A cigarette,\" Jim clarified. \n\n\"Oh no, I didn't buy my own pack or anything. I just bummed a few from Barb. Why?\" Sharon asked a bit confused. \n\n\"I don't know, kind of one of those things I can't picture. Figured it might be interesting to see you with a cigarette,\" Jim mused a bit playfully. \n\n\"Interesting?\" Sharon queried. \n\n\"Yeah, I mean. It's kind of an image thing. The bad girl with the cigarette and all that. The idea is kind of sexy I guess,\" Jim explained. \n\n\"Really? Now I'm surprised,\" Sharon smiled. \n\n\"Well, if they smoke, they poke and all that. The bad girl from the wrong side of the tracks is a bit of fantasy for most men, I think. Or maybe just for private school, Ivy leaguers like me,\" Jim expanded. \n\n\"Why have you never told me about this?\" Sharon asked with wide eyes. \n\n\"It's kind of an embarrassing clich\u00e9 isn't it? The buttoned-down businessman who fantasizes about the naughty girl? Plus, it isn't something I've even thought about since I was in my 20's,\" Jim explained. \n\nSharon laughed to herself and shook her head. \n\n\"This just gets weirder and weirder, doesn't it?\" she asked. \n\n\"Better late than never, I suppose,\" Jim said through his own laugh. \n\n\"Who knew we had so much untapped kink inside us all these years?\" Sharon asked herself and Jim simultaneously. \n\nFinally, Sharon moved from her perch in the kitchen and joined Jim on the couch\u2014snuggling up and hugging him warmly. \n\n\"I'm glad we're in this together. Discovering this new side of ourselves as a team,\" Sharon whispered into Jim's sweater-clad chest. \n\n\"Me too, sweetheart,\" Jim murmured softly into his wife's hair. \n\nThe next day started late as both Jim and Sharon slept in, anticipating a wild night and needing to recuperate from staying up and talking into the early hours of the morning the previous evening. As the sun fell both Jim and Sharon's excitement grew, as well as anxiety. There was so much that could not be anticipated about what would happen, and with whom, that both had significant butterflies in their stomachs in anticipation of all the possibilities. \n\nThe night would begin with Rich and Barb meeting them at their house and all of them riding to the hotel together. Sharon had decided to wear something a bit more risqu\u00e9 this time, opting for a silky red dress with a deep v-neck that exposed a healthy amount of cleavage and flowed loosely to her mid-calf. She topped it off with red lipstick, red nails, and a pair of expensive black heels. Sharon knew she looked good and it made her feel amazing. Jim, for his part, had a 'if it ain't broke' mentality\u2014settling on black slacks and a slim-fitting charcoal-colored button up. \n\nAs the headlights of Barbs car flashed through the large windows in the living room the realization that it was really happening washed over Sharon. She contemplated the idea that she would possibly be engaging in sexual activities with her best friend's husband as well as her husband's best friend. Interestingly, the idea that Jim would be with Barb was less pervasive and seemed to take a backseat to her own fate this evening. ",
        "\"Oh, you look incredible!\" Barb exclaimed as soon as she walked through the door and caught sight of Sharon. \n\nSharon could feel her cheeks burn, especially when Rich stepped in behind her and did a double-take worthy of a Looney Tunes episode. His pearly white teeth shone brightly as he smiled at her widely, contrasting with his healthily-tanned skin. Rich's hair was combed back nicely and although it was as white as snow, looked healthy and vibrant, just like the rest of him. \n\n\"Hi, Sharon, it's nice to see you,\" Rich said while still beaming. \n\n\"You too, Rich,\" Sharon replied as they gave each-other a friendly hug. \n\nSharon paid special attention at the feeling of being in the arms of a man as large as Rich and again pondered what it would feel like if the embrace traveled to a more-than-friendly place. \n\nWhile Sharon hugged Rich, Jim hugged Barb\u2014who had worn a skin-tight all-white strapless dress. It hugged her breasts tightly in a tube-top and then clung to her lithe frame until it was mid-thigh where twin slits on either side allowed enough movement to walk. It looked incredible\u2014if very uncomfortable. Her hair was pinned up in a wild, tousled fashion with curls springing free at various angles that looked very intentionally 'unkempt.' \n\nAfter both parties stepped back from one another Sharon could read Barb's face immediately and knew that she had something to say. \n\nBarb pressed her hands together in front of her chest and breathed deeply, flashing her sparklingly bright blue eyes in dramatic fashion before speaking. \n\n\"So, Rich and I usually like to do a bit of pre-gaming, as the kids call it. We were going to do it before we came, but thought we'd wait and see if you wanted to join,\" Barb explained. \n\n\"Pre-gaming?\" Jim asked, taking the words right from Sharon's lips before she herself could say them. \n\n\"Yeah, basically getting loose. The party before the party,\" Barb continued. \n\n\"She means getting high and doing some shots,\" Rich said with a smile, cutting right to the point. \n\n\"Oh,\" Jim replied. \n\n\"High off what?\" Sharon asked, finding her voice. \n\nRich and Barb turned to look at each other, each with a gleaming smile painted on their faces. \n\n\"You want to do the honors?\" Rich asked his wife. \n\n\"This should be fun,\" Barb replied slyly as she reached into her purse and revealed a small glass vial with white powder in it. \n\n\"Is that cocaine?\" Jim asked, suddenly sounding a bit panicked. \n\n\"Well it ain't flour,\" Rich cracked calmly. \n\n\"Holy shit,\" Jim replied, reaching his hand out and accepting it from Barb. \n\nJim stood a few moments and stared at the vial of white powder, turning it to catch the light at different angles. \n\n\"It's okay if you guys don't want to, it's just expensive coke and you're our best friends so, what are friends for, right?\" Barb explained breezily. \n\n\"I thought it would be a bit of pot or a pill or something, but coke? Jesus, who are you guys Pablo Escobar?\" Jim asked, handing the vial back to Barb. \n\n\"Told you, hon,\" Barb said, turning her gaze to Rich with a knowing smugness that irked Sharon to her core. \n\n\"I'll try it,\" Sharon blurted out before even thinking. \n\nAll three people turned to look at Sharon, each in a different state of shock\u2014but the one who looked positively floored was Jim. \n\n\"Hon, you can't be serious?\" Jim asked with an uncharacteristic breathlessness. \n\n\"Why not? We were just talking about this yesterday,\" Sharon shot back. \n\n\"This isn't a few cigarettes with your cocktail, this is cocaine. It's a little different don't you think?\" Jim defended. \n\n\"Not for me, this is exactly what I was talking about,\" Sharon lied, never having even considered something like cocaine until that very moment, \"nothing is off-limits as far as I'm concerned,\" Sharon finished resolutely. \n\nJim just stood there, almost panting as he tried to stare down his wife, who had turned her head back to Barb and Rich and was intentionally not making eye-contact with him. \n\n\"Hey, we didn't mean to start a fight,\" Rich stuttered. \n\n\"It's fine, she's a grown woman she can do whatever she wants. But I'm not touching that shit,\" Jim grumbled, finally turning away from Sharon defeated. \n\nRich and Barb seemed to need a moment to assess the situation, as they looked back and forth between Sharon and Jim several times before they said anything else. \n\n\"Here okay?\" Barb asked, motioning towards the marble-countered island in the kitchen. \n\n\"Yeah, sure,\" Sharon replied, now feeling anxiety and guilt well up inside her. \n\nShe tried ignoring it as she followed Barb into the kitchen and watched her friend tap some of the powder onto the counter and organize it into three lines with a Platinum American Express card. Sharon could feel her heart pounding in her chest and the beginnings of sweat start to accumulate on her forehead as the gravity of her decision hit her. \n\n\"Here, this'll calm the nerves,\" Rich said appearing next to her with a shot glass of clear liquid she assumed was vodka. \n\n\"Thanks,\" Sharon replied accepting it with a shaky hand. \n\nSharon didn't normally do shots, she didn't even remember the last time she had ever done one\u2014but at that moment she welcomed the fuzzing of her mind and lowering of her inhibitions. In one smooth motion she tossed it back and swallowed, the taste mild due to being a high-end spirit but the burn at the back of her throat reminding her of the potency. \n\n\"One more for good luck,\" Rich encouraged, filling her shot glass again. \n\nSharon didn't even respond, she just threw it back as quickly and smoothly as the first. After swallowing she breathed a heavy sigh and stepped toward Barb, who was rolling a $100 dollar bill. \n\n\"I'll show you how it's done,\" Barb said with a wink. \n\nSharon just nodded in silence. \n\n\"You want to do it in one smooth motion, one breath. And snort hard, you don't want it getting stuck in your nostril, you want it to go up your nose,\" Barb instructed as she bent down and positioned the rolled bill to her right nostril, her left hand pressing her left nostril closed. \n\nThen in one motion Sharon watched as Barb snorted the line easily, like she was a pro. She took a few additional sniffs and swallows, then wiped her finger over the counter where her line had been and accumulated whatever remnants were there. Once satisfied she rubbed her finger on her gums and then smiled. \n\n\"Just that simple,\" Barb remarked, obviously pleased with herself. \n\n\"Your turn, hon,\" she added, handing the rolled bill to Rich. \n\nRich wasted no time, ganking his line quickly and efficiently. Barb used her finger again to rub any remaining coke on her gums. \n\nSharon stepped toward Rich who was holding the bill out to her and smiling. \n\n\"You're gonna love it, trust me,\" Barb said warmly. \n\n\"That's what I'm afraid of,\" Jim remarked from a few feet away, having been watching in silence. \n\nSharon shot an annoyed look at her husband but feared that what was on her face was anxiety. Jim didn't seem to notice and just stared blankly at her, silently seething. Sharon resolved herself and turned away, stepping toward the one remaining line of cocaine on her counter. \n\n\"Just remember, one breath, snort hard, you'll be fine,\" Barb encouraged once more as Sharon bent down and prepared herself to do something that she never would have dreamed of doing just a few weeks earlier. \n\nSharon positioned the bill in her nose first, making sure that the entire roll snuggled its way inside and she had a good hold of it to keep it in place. Next, she angled it at the beginning of the line of white powder. She took a long, deep breath in through her mouth and breathed out very slowly, trying to calm her nerves. Once satisfied she closed her mouth and pressed her left pointer finger on the nostril opposite to the bill and snorted for all she was worth as she trained her eyes on suctioning up every granule of coke in her path. \n\nIn only a moment the line was gone, and Sharon stood up and exhaled. She noticed that the back of her tongue, nose, and throat had become numb, almost as if she had smeared Novocain on the areas. Even still Sharon could feel the coke at the back of her throat, the drip of it coming from her sinuses. \n\n\"Not too bad, right?\" Barb coaxed. \n\n\"I guess. I don't know if I feel anything yet,\" Sharon reported, looking from Barb to Jim, who was staring intently at her and looking like he was about to be sick. \n\n\"It takes a minute or two, but it's a fast-acting high,\" Rich explained after another shot\u2014his third if Sharon's counting had been accurate. \n\nSharon tried to focus on what she was feeling, having a little bit of trouble separating the feelings of anxiety from what she would discern as a 'high.' \n\n\"Well, my heart is racing, and I feel pretty warm,\" Sharon described, feeling like everyone in the room was looking at her for a reaction. \n\n\"How does it feel?\" Jim asked, suddenly interested. \n\n\"It feels... good. Like a shot of adrenaline,\" Sharon continued, noticing the general sense of well-being start to wash over her\u2014to which she smiled uncontrollably. \n\n\"There it is,\" Barb said through a grin, noticing the pleased look on Barb's face. \n\n\"Oh, okay, yeah, I feel it now,\" Sharon updated, her central nervous system being overwhelmed with serotonin. \n\n\"Good, right?\" Rich urged. \n\n\"Yeah, good. How long does it last?\" Sharon asked. \n\n\"Not long, maybe a half an hour at most,\" He answered. \n\n\"Makes you feel a little horny too, right?\" Barb pressed. \n\n\"Yeah, I mean, I guess,\" Sharon expressed. \n\n\"See why we like it with the whole swinger thing?\" Barb followed-up. \n\n\"I do,\" Sharon confirmed. \n\n\"Well, we should probably head out if we want to get there before the fun starts,\" Jim cut in from a few feet away. \n\n\"I think we're having plenty of fun right here, don't you Sharon?\" Barb mused playfully. \n\nSharon was feeling very agreeable, and simply nodded with a smile. \n\n\"Besides, I was going to come on to you tonight anyways,\" Barb continued, walking slowly over to Jim. \n\nJim opened his mouth to reply but was clearly overcome with speechlessness. Barb didn't seem to mind and stepped right in front of him and started kissing him. \n\nSharon watched passively as her best friend started making out with her husband, less alarmed than she could have ever imagined. Out of the corner of her eye she noticed Rich step from beside her to behind her. Sharon could feel his warmth and size, and, in a moment, he had his hands on her waist from behind her. Sharon seemed to melt into his touch, and she noticed that she was already wet, a side-effect of the coke she figured. \n\nSharon moaned reflexively as Rich's grip tightened at her hips, pulling her shapely ass into his bulging pelvis. She could detect his erection immediately, a large protrusion pressing into her brazenly. The sound of a zipper brought Sharon's attention back to Jim and Barb. Barb was now knelt on the kitchen floor in front of Jim, who seemed helpless as she pulled down his slacks and boxers to reveal his cock. Barb wasted no time and took him into her mouth before there could be any objections, and Jim responded by arching his back and moaning softly\u2014clearly overcome with the sensation of Barb's mouth engulfing his prick. \n\nSharon's attention was again broken as her weight shifted and she realized that she was being carried by Rich. His giant hands lifted her effortlessly and she was transported to the island counter a few feet away. Once her feet were back on the floor she attempted to stand up and exert some control, but Rich responded by pressing her against the counter, forcing Sharon to bend and accommodate the countertop which she was now bent over. Without any wasted movement Rich hiked up Sharon's silky red dress above her waist and moved the strip of panties that covered her moistened cunt. \n\nRich's thick finger penetrated her first, sending jolts of electricity through her body that rendered her motionless with pleasure. \n\n\"Tell your husband what you want,\" Rich commanded from behind her. \n\nSharon's head turned to see Jim looking at her as Barb continued sucking his cock, both of them somewhat at the mercy of their more predacious counterparts. \n\n\"Tell him you want to be fucked,\" Rich continued, clarifying his command. \n\nSharon swallowed and tried catching her breath before attempting to speak. \n\n\"I want to be fucked,\" Sharon sighed. \n\nSharon could not read Jim's expression as anything other than pleasure and she finally stopped fighting the moment and gave in. She now laid her body weight entirely on the counter, arching her back and hips out toward Rich to do with as he pleased. \n\n\"Good,\" was Rich's response. \n\nIn another moment Rich had the head of his swollen prick pressing at the entrance to Sharon's pussy. She was filled with lust, excitement and a tinge of fear as the considerable girth of Rich's cock was finally revealed\u2014intimidating her. She wasn't given a lot of time to ponder on this though as Rich applied enough pressure to slip the head in, eliciting a sharp inhale from Sharon. \n\nSharon turned toward motion from the corner of her eye and watched Barb walk over to the counter, bending over just to the left on the adjacent side. Barb smiled broadly at her friend, her lipstick smeared and saliva visible surrounding her mouth. Appearing behind Barb was Jim, who was trained on the arched back and inviting posture of Barb's ass jutting out towards him\u2014beckoning him closer. \n\nRich's length sank into Sharon and a feeling of intense fullness and a bit of pain welcomed his entry. It was immediately morphed into ecstasy as Rich started thrusting in and out of Sharon's cunt. A similar event was happening with Barb and Jim, and the two women locked eyes as their holes were filled simultaneously. \n\n\"You like my husband's cock?\" Barb tempted playfully. \n\nSharon realized that she had been gritting her teeth and relaxed, her jaw muscles revealing a soreness that she hadn't been aware of until that moment. \n\n\"Yes,\" was all she could muster as Rich's pace and intensity rocked her frame. \n\nBarb seemed satisfied by her terse response as her smile widened, followed by a throaty moan. \n\nSharon closed her eyes and allowed the sensation of being ravaged by Rich to fill her every void. The echoing slaps of Rich and Jim slamming themselves into the two women ricocheted throughout the kitchen, accompanied by the intermitted moans and wet noises of their respective holes. \n\nSharon's eyes fluttered open and she was greeted by a sight she knew all too well\u2014Jim approaching orgasm. His eyes were closed, and his posture was rigid and upright as he began ejaculating into Barb just inches from her. \n\n\"Fill me up,\" Barb encouraged through labored breath. \n\nJim responded by adjusting his grip and giving a few last deep thrusts as his orgasm sputtered to a close. It was a surreal experience for Sharon to be observing her husband shoot a load of spunk into the pussy of her best friend right in front of her. It was a nightmarish scenario in almost any other circumstance but in that moment, it felt as acceptable as a cup of tea. Sharon's musings were intruded as Rich's pace and veracity seemed to pick up another notch as he approached his own orgasm. \n\n\"I'm going to cum in your wife, Jim,\" Rich panted openly. \n\nJim didn't respond either because he didn't know what to say or he was still recovering from his own climax, but Rich didn't seem to notice either way. He pressed hard on Sharon's back, flattening her frame on the cold marble of the countertop. With the other hand Rich placed it at the back of Sharon's neck, holding her in place as he prepared to dump his load into her. The next sensation she felt was an intense warmth radiating from inside her as Rich's pent up orgasm was finally released into her helpless womb. Rich grunted and cursed under his breath as this long-awaited event finally came to fruition. \n\nSharon could feel his huge cock swell each time he ejaculated and the warmth of his semen seeping into the deepest regions of her cunt, which sent her into an orgasm of her own. Rich continued to pump his load into her as she began to writhe and shake, the coke-fueled climax racking her completely. Sharon thought she was about to lose consciousness as the feelings of pleasure were almost too much, her clit achieving a level of sensitivity that made Rich's last few thrusts almost unbearable. But finally, both of their orgasms waned, and Rich's considerable length slipped from her slit, eliciting a soft 'plop' which was followed by a drop of cum that Sharon could feel drip out of her and down her thigh. \n\n\"That was amazing,\" Jim said from one of the stools that had been pushed away from the island in the commotion. \n\nA few silent moments of heavy breathing filled the room before anyone else spoke. \n\n\"I've wanted to do that for a long time,\" Rich said with a smile of satisfaction. \n\nSharon felt her cheeks burn in embarrassment at not having known about Rich's long-time lust toward her\u2014and considering the night's events it didn't surprise her at all how eager he had been to 'get the party started early' as it were. \n\n\"I need a cigarette, care to join me?\" Barb offered to Sharon, who for a moment didn't realize she was being spoken to. \n\nUpon looking to Barb, Sharon received an impatient nod in response to her 'Who me?' expression. \n\n\"Sure,\" came Sharon's response, a tingle of excitement filling her at the thought of her first 'post sex cigarette.' \n\n\"Better head out back, don't want Amanda smelling it when she gets home,\" Jim cautioned, to which Sharon nodded and headed to the den to where the sliding glass door led into an outdoor sitting room. \n\nThe two women walked outside, and Barb dispensed a cigarette to her friend, who accepted a light and puffed her cigarette to life. \n\n\"Ahhh, sometimes I think I just have sex to get to the after-sex smoke,\" Barb sighed through a long exhale up towards the sky. \n\nSharon expelled her own stream of smoke, which she had to admit, felt incredible. \n\n\"I can see why,\" she admitted. \n\nThe two women smoked their cigarettes in relative silence, simply enjoying the sensations of the calming effects of the breathing and nicotine\u2014a ritual that seemed to be growing more frequent lately. \n\nIt was a lovely warm night. \n\nAmanda wasn't sure what she expected to see from the darkness when she peered into the kitchen from the den on her way up the stairs. She knew her parents were supposed to be out late and when she came home drunk from her friend's house, she snuck in through the sliding glass door when she saw lights on in the house. She had no idea what held her feet in place as she watched everything unfold. The roots that seemed to have grown out of her legs and froze her in silence forced her to witness things she could have never imagined. \n\nBut more than anything\u2014Amanda could not explain the wetness between her legs."
    ],
    "authorname": "GUIWriter577",
    "tags": [
        "drinking",
        "drug use",
        "drunk",
        "girls under the influence",
        "married wife",
        "mature",
        "slutwife",
        "smoking fetish",
        "swinging"
    ],
    "category": "Fetish",
    "url": "https://www.literotica.com/s/the-descent-ch-03-3"
}
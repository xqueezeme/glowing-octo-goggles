{
    "title": "The Office Hottie Ch. 05",
    "pages": [
        "I'd had a nice light lunch after my park adventure and decided to do a little shopping. Back to Walmart I went and inside I headed for the ladies section. I still had a little naughty streak in me and felt it was a great time to go pantyless. And right now. I positioned myself between a couple of clothing racks pretending to look at some tops. I knew there were cameras around so I had to be careful. Other ladies were there too, and I had to maneuver myself around them to get some semi-private space. \n\nBy the time I got my space I wanted another lady and her man-in-tow had showed up. Mmmm... this might be even better, I thought, as he was checking me out. I ignored him but passed in front of him to a different rack so he could get a full view of my T-shirt and jeans skirt. The skirt ended a little above my knees and the T-shirt is a bit on the tight side, it hugs me and I know it shows off my boobs well, I could feel him undressing me with his eyes even though he was pretending not too. \n\nI moved to the other side of the rack he was standing next to and proceeded to look through the tops, all the while ignoring him. I'd pull a top out, examine it, and put it back but I was actually working my panties down my legs little by little under my skirt. It was hard to do under the skirt and took me some time but it added to my tease. I could tell he was watching me and he'd move slowly around the rack trying to see me better. I'd pick another top then put it back and move around the rack or choose another, giving him a glimpse but always keeping a rack between us. \n\nA nice little game of cat and mouse, but all the while I was working my panties down my legs. It was so exciting to actually be taking my panties off not only in a public place but in front of a man who was a compete stranger. My turn on was really aroused. It really made me wonder if he knew what I was doing.\n\nOnce my panties got low enough I made sure no one could see and slowly wriggled my legs until they dropped down to the floor. I dropped a top and bent to pick it up at the same time grabbing my panties and stuffed them into the pocket in the skirt. I felt really naughty by now, wearing my jeans skirt without any panties. \n\nI let him catch up and view me as I bent over to look at the bottoms of a couple tops on the rack, knowing my skirt was riding dangerously high, I knew he was checking out my butt and wanting to see up my skirt. Little did he know I was not wearing my panties anymore, then again maybe he did. I'm sure he was probably thinking that anyway. \n\nI love being perved at and this guy checking me out and undressing me was getting me more aroused. I needed to move on though. I put the top back and left to visit the dresses. I found a couple that were real pretty and would look nice on me. I put them back to walk around pantyless for a while. I loved the feeling and wondered why I hadn't done this before. Feeling so free. I wandered the store loving the looks I got from guys. And girls. \n\nI wandered through the housewares and the grocery section, browsing around, just loving the free feeling of my pussy. I considered trying to take my bra off and going braless but thought that would be pushing it, especially here and in this T-shirt. Maybe I should have anyway but my kitty was getting pretty hot. \n\nThen I had a real naughty thought and walked over to the shoes. There was a young man helping another lady but he eyed me as I looked at a couple pairs of shoes. I picked out a single high heel shoe thinking this should work well. He stepped over and asked if he could help and I asked to see the shoe in my size. He brought them out, opened the box and handed me the right shoe. I sat lady-like while I took my sandals off then gave my legs a little spread like I wasn't paying attention as I put the shoe on. He handed me the other shoe and I spread my legs a little more, watching him out of the corner of my eye. He shifted his body and I could tell he was trying to look up my skirt. My bare pussy felt so free, daring to be exposed, and wanting to be gawked at. \n\nI said the shoes were too tight and asked for a larger size. He brought them out and watched as I took off the old pair and put the new pair on. The shoes were really tall and I had to raised my knees dangerously high while changing them, giving him a glimpse of my inner thighs under my skirt. Little did he know that all he had to do was squat down a little and he'd have a show right up to my wet pussy. I walked around in the high heels to try them out, letting him stare at my stretched, tight calves and my butt. \n\nI thanked him but said they weren't comfortable, kicked them off and put my sandals on giving him one last little show. His face was flushed and I could tell he enjoyed watching me, I think I may have enjoyed the tease more than he did. My pussy was wet and calling for some naughty work. I wandered back to the dresses, picked out the two that I liked and went to find a dressing room. \n\nAbout half of the rooms were occupied so I knew I'd have to be quiet. A girl showed me to a room and unlocked it, inside I hung up the dresses and immediately stripped off everything until I was naked. I pulled a couple of tissues out of my purse and put them on top of my clothes, ready for clean up. I stood in front of the mirror admiring my body, running my hands over myself and massaging my boobs. I sat on the bench in the corner and looked up at the ceiling, not that I expected cameras but my paranoia was extremely high and I felt half exposed. It would be so easy for someone to climb up and look over the wall. Unlikely of course, but it made it just that much more exciting. I could hear the other ladies as they changed, the rustle of clothes, someone banged a door, there was an announcement over the PA, muffled voices all around me, and in one room there were two girls chattering with each other. \n\nMy kitty was really wet now and I put a foot up on the bench and spread my knees wide to give me better access. I wet a finger and slowly caressed my clit as I squeezed my boobs. Mmmm... the naughtiness of masturbating in public is so exotic and erotic. So many people around, I'm naked and enjoying myself, just a thin wall between me and the world to provide privacy. I inserted a finger deep inside, stroking it in and out, my palm rubbing my clit, making me cum almost right away. \n\nI didn't stop fingering myself, I inserted another and rubbed my clit with two fingers from my other hand, being careful to be quiet. My soaked pussy was making too much wet noise and I had to slow down, teasing myself more, I just wanted to finger fuck myself so bad. The pleasure was almost unbearable. I shuddered and rocked as I came again, banging my head on the wall. \n\nI cleaned my fingers off with the tissues and wiped my pussy clean. Feeling very satisfied with myself and my kitty, I tried on the dresses. One I really liked but was a little tight, it hugged my slim body a little too well and made everything stand out, my butt and my boobs, a little too much. I looked hot as hell in it but it was too tight and really uncomfortable, I could barely sit down in it. \n\nThe other dress had a pretty flower print with forget-me-not accents. It fit me nicely and hugged my boobs without stretching the fabric. A conservative dress suitable for work and I thought I looked really pretty in it. The cavemen will enjoy it, I'm sure, and I hoped Kelly would, too. I just might wear this on Monday, I thought to myself as I twirled in the mirror. I took the dress off and put my clothes back on, headed out to purchase the dress and drove home. \n\nWhen I got back to my apartment I was super sleepy. I kicked off my sandals, went into the bedroom and stripped down to my panties. I laid down on the bed and immediately fell asleep. I napped for just a short while and had a nice warm dream about walking around naked in the park. Kelly was there too, and we kissed and played with each other. \n\nKisa woke me by jumping up on the bed and wanting attention. I felt refreshed and horny and started to play with myself but my boobs were a little tender and decided to take it easy. I really need to mellow out on myself, I started thinking. Kisa was making hungry noises anyway, I was hungry too, once I thought about it. \n\nI have a two bedroom apartment but my roommate had moved out several months ago to go to college down in the states. I felt I could afford the place by myself and never got another roomie. The nice thing about living alone is I can wear whatever I want, or nothing at all. I pulled out a pink cami to wear with my panties, emptied out my knapsack and cleaned up my hairbrush while Kisa made figure eights around my feet. I put my clothes away and started some dinner for us. \n\nHers was out of a can but I decided on a quick stir fry for me, it was easy to make and easy cleanup. While the rice cooked I chopped some veggies and got the pan hot. I saut\u00e9d garlic and onion, then tossed in the veggies with some soy sauce and a little peanut oil. Timing is everything, of course. And more garlic. The veggies were done at the same time as the rice, I fixed a bowl, sat at the table and booted up my laptop. \n\nI ate as I browsed through a couple of online toy stores. Picking out a cock was much more complicated than I thought it would be. There was so much to choose from, some of them erotic as hell and some downright scary looking. I particularly like the strapless dildos, the thought of a girl fucking me with one of those without being encumbered by straps made me really hot. My pussy tingled as I sorted through the assortment of online cocks thinking how they'd feel and finally settled on a plain but realistic looking one. A little longer than I prefer and somewhat thick but not a monster cock. It also had a suction cup to anchor it, I'd seen enough porn to know that'd be handy. \n\nI also looked through the vibs, so much more to look at there. Most were spendy. The fun ones looked out of my price range and id have to do some good research before picking one out. Maybe a little birthday or Christmas present for me, I smiled. While I was in there I took a look at the nipple clamps. So many fun ones to choose from, I liked them all and settled for a pair of vise style with teeth that were cheap, adjustable, just a little mean looking, and could also easily fit under my clothes. Mmmm... my naughty meter just jumped a couple notches at the thought. \n\nI added those to the shopping cart along with the cock and checked out. Fucking shipping pushed it over 50 bucks and was a week out before I'd get it. At least it was on the way, I should have done this a long time ago. \n\nLooking through the different types of vibrators really got my pussy humming, I went back through and looked at more. I liked the eggs and the panty vibs. As long as they were quiet I could be real subtle with them and have a lot of fun. I especially liked the remote vibs and thought about giving control to someone else to tease me. I wasn't sure about using vibs at the office though, it can be a busy place and I'm pretty exposed. I'd put on quite the show if I used something like that at my desk. Up another notch my naughty meter went. I looked through some of the bondage stuff too, and couldn't help but stroke my pussy through my panties as I flipped through the various devices with their gorgeous models. \n\nI envisioned Kelly as some of those models, wanting to punish her for teasing me and not letting me have my way with her. My pussy was a bit tender from my abuse of the day but I was really getting super horny looking at the bondage merchandise and thinking of Kelly tied up and helpless as I ravaged her luscious body. \n\nI took my cami off and caressed my boobs as I sat there wearing nothing but my panties and flipped through the pictures. For each new device displayed I pictured Kelly instead of the model. She'd look so sexy wearing the different leather outfits, boots, cuffs, or nipple clamps. I was really intrigued by the spreader bars, Kelly so helpless, naked with her hands cuffed high over her head, her legs spread wide, her pussy fully exposed and awaiting my abuses. \n\nI'd had enough and needed some action. I grabbed my phone and a towel, took my panties off and spread the towel on the couch. I sat there naked and got comfortable as I pulled up my favorite porn site. I lightly stroked my wet kitty as I scrolled through the videos. I particularly like the lesbian bondage vids and found one that had a girl trussed up who looked a lot like Kelly. I started the vid and sat back to enjoy myself. \n\nThe girl sat naked at the very end of a tall bench, about waist high, with her butt hanging off the edge. Her hands were tied together and attached to a beam high over her head which stretched her body forward over the bench. Her thighs and calves were roped together and her feet tied to the bench. She was well anchored and completely helpless with her pussy and ass exposed and vulnerable to violation. At certain angles she looked so much like Kelly except her hair was straighter and lighter and her boobs were a little smaller. The girl looked around, uncertain and with the look of fear in her eyes. \n\nHer Dom appeared, tall and blond, wearing tall leather high heeled boots, a leather cupless bustier with nice boobs and perky nipples, no panties, and a strap-on which made me smile at the things to come. She had a flogger and began whipping the Kelly-Girl's butt making her cry out. It was arousing watching Kelly's punishment for being so hot and teasing me at the office. The Dom rubbed her hands over Kelly's butt, soothing the pain, the red marks on her cheeks evident of the whip. \n\nThe Kelly-Girl whimpered as the Dom's hands roamed over her body, slapping her butt and groping her tits. The Dom began whipping Kelly's tits with the flogger, first one and then the other, back and forth, Kelly crying out in pain with each strike. The Dom stopped her flogging and cruelly groped Kelly's tits and squeezed them, making her groan. The Dom bent over and sucked a nipple hard then slapped it, sucked the other nipple, biting it, then slapped it. Both tits got brutally slapped, one and then the other while Kelly cried out in pain. I grabbed my tits and pulled my nipples as I watched, torn between wanting to be the Dom giving the punishments and being the sex slave suffering the punishments. \n\nThe Dom rubbed her hand over Kelly's tits, soothing the hurt, then kissed her, the Dom's tongue reaching deep inside Kelly's mouth. She responded with a whimper, sucking on the Dom's tongue while her nipples were being pinched, and cried when the Dom withdrew. \n\nThe Dom climbed up on the bench in front of Kelly and jammed her tits in Kelly's face. She feverishly sucked the Dom's nipples as they were fed to her, first the right, then the left, back and forth. The Dom forced both of her tits around Kelly's face and held them together while she struggled to breath. She was released and the Dom fed her tits to her again, Kelly sucking each nipple in turn as they were fed to her. \n\nI viciously pulled my nipples watching the Kelly-Girl suck the Dom's tits. I'd only been with a girl once, my girlfriend Denni, and we never really went very far, kissing, a little tit play, and some mutual masturbation. I was very bi-curious watching this. I wanted to feel the touch of another woman, to play with her tits and suck her nipples. My nipples love to be sucked and teased and I longed to have a girl play with them. \n\nI'd never done any bondage before either but but recently became curious. I imagined what it must be like to restrained, helpless while someone has their way with your body. It had to be done with complete trust in your partner but there's still that little piece of doubt in the back of your mind that feeds the excitement. I felt drawn the the Kelly-girl and what she was experiencing. \n\nThe Dom climbed off the bench and continued whipping Kelly's tits and we smiled at her cries. The Dom move to her ass, whipping it, Kelly yelping and her body twitching with each strike. My fingers stroked my clit, one on each side as I watched the delicious punishment on my Kelly's sweet body. Each strike of the flogger, each cry from Kelly's sweet mouth amplified my pleasure. \n\nThe Dom brought out some clothes pins, each one had a string tied to it. She bent over and sucked one of Kelly's nipples, pinching it to get it fully erect, then she attached a clothespin to the nipple. Kelly cried out from the pain, the Dom and I smiling at her reaction. The Dom sucked the other nipple, pinching it to full erectness and attached the other clothes pin. The girl squeezed her eyes and gritted her teeth from the pain. My fingers were deep in my pussy, stroking in and out while I watched her nipples being punished. \n\nThe Dom took each string from the clothespins and pulled, stretching the nipples as far as they would go and tied the strings to the far leg of the bench making the Kelly-Girl purse her lips and squeezing her eyes shut in agony. She stretched her body and strained with her hands tied high over her head to keep the strings from pulling on the pins clamped to her nipples. \n\nOh, it looked so sweet, no matter what position Kelly moved her nipples were being tortured. It was making me cum and I had to stop rubbing my pussy and moved my hand to my tits to torture my own nipples, imagining I was the Kelly-Girl. \n\nThe Dom resumed whipping Kelly's ass, each strike causing the girl to jerk against the strings causing pain on her butt, her tits and her nipples. Her cries of pain were exquisite, sweet, and justified. \n\nThe Kelly-Girl was breathing hard, her hair a mess on her pretty face, as the Dom grabbed a bottle of lube and squirted some on the strap-on. Kelly tried to look behind her as the Dom stroked the strap-on, rubbing the lube up and down the shaft, the look of fear and anticipation on Kelly's face evident.\n\nThe Dom approached Kelly's exposed butt and teased the tip on the cock on her pussy and her ass. I was so ready, which hole was she going to fuck? The Dom rightly chose the Kelly-Girl's ass, slowly sliding the tip of the cock inside her ass, waiting then sliding in more, inch by inch inside her tight hole. Kelly eyes widened in fear and she gasped, pulling against the restraint holding her hands which pulled against the strings on her nipples. \n\nThe Dom was gentle with Kelly's ass at first, slowly sliding the cock in and out, coaxing her tight hole to relax. Soon she was pumping the cock in and out, Kelly crying with each thrust, her tits juggling against the motion, her nipples punished from the clothespins. \n\nI had only experienced anal one time and it was with my ex-boyfriend. I didn't like it, especially when he came in my ass, he was rough and it was difficult for me to relax. I was drawn into this scene though, it seemed different and I found myself fingering my ass trying to imagine the experience. \n\nThe Dom withdrew the cock from Kelly's ass, came around to face her, caressing Kelly's back, grabbed a string and yanked a clothespin off a nipple, not bothering to release it. Kelly screamed at the pain and the sensation rushing back to her nipple. The Dom reached over, grabbed the hair in the back of Kelly's head pulling it back and savagely kissed her deeply, her tongue probing deep in Kelly's throat. She responded by sucking the Dom's tongue, whimpering, trying to breath, and muffled a scream as the Dom ripped the clothespin off the other nipple. \n\nThe Dom cruelly pinched both nipples, smiled at Kelly's screams, sucked them both, then resumed fucking her ass with the strap-on. She reached around groping Kelly's tits, squeezing them. Kelly's face was a mixture of pain and pleasure, she looked like she was about to cum. \n\n\"Do you want to cum?\" the Dom yelled out as she pumped Kelly's ass. Oh, please yes, I thought as my fingers rubbed my clit faster. ",
        "\"Yes,\" Kelly managed to gasp out. \n\nThe Dom slapped one of Kelly's tits with her hand, spanked her ass and gave it a couple of pumps with the strap-on. \"You have to ask to cum, don't you?\" She commanded. \n\n\"Yes... can... I... cum?\" Kelly gasped out between thrusts in her ass. \n\nThe Dom's hands grabbed Kelly's hips on each side and continued pumping her ass. \"No!\" She yelled. \n\n\"You're a rude, selfish little bitch, aren't you?\", she said as she pumped. Yes she is, I smiled to myself as I rubbed my clit faster feeling my orgasm coming. \n\n\"Yes,\" Kelly whimpered trying so hard not to cum. \n\nThe Dom pumped her ass a couple more times, \"You have to ask nice nicely, don't you?\"\n\n\"Yes... may... I... cum... please...,\" Kelly sobbed out between the pumps of the cock in her ass. My orgasm was right at the brink, ready to crash down on top of me. Oh, please, let her cum. I can't wait any longer. \n\nThe Dom rammed the strap-on faster into Kelly's ass and said, \"Yes, cum for me, little bitch.\"\n\nThe O face on the girl looked so hot as she came. She squeezed her eyes shut, opened her mouth then gritted her teeth and screamed, \"Oh, fuck! Oh, fuck! Oh, fu...\" and a high pitched wail escaped her as the orgasm took over her body, her tits jiggling as she pulled on the bonds on her hands and tried to straighten her legs, the ropes cutting into her thighs and calves. She screamed a high pitch wail again while the Dom savagely pumped the strap-on in and out of her ass. \n\nI timed my climax perfectly to cum with her, my body shook as a powerful orgasm swept over me. It was all I could do to keep my eyes open and watch the Kelly-Girl as we came together. \n\nKelly gasped for breath, her chest heaving and her face was sweaty. Her hair was a mess across her wide, sexually crazed eyes. The look of pain, pleasure, and expectation told the coming of another orgasm as her ass continued to be fucked\n\n\"Do you want to cum again?\" The Dom asked as she continued pumping Kelly's ass. \n\n\"Oh... yes... please... may... I... cum... again... please...\", Kelly desperately gasped out in between thrusts.\n\n\"Good girl. Yes, you may cum,\" the Dom replied, still fucking Kelly's ass. \n\nKelly's body shook uncontrollably as she came, screaming, wailing, cursing, and crying. She tossed her head and twisted her body, shuddering with her hands stretched high in the air fighting the restraints. She screamed again before slowing calming down, the erotic fire in her ass subsiding. \n\nThe Dom slowed her pumps then thrust slowly one last time deep, the strap-on buried to the hilt in Kelly's ass. The Dom leaned forward and hugged the girl, gently massaging her tits, kissing her neck and her cheeks. Then she pulled out and walked off camera. The girl sat there, her hands hanging from the beam, her red abused ass hanging off the end of the bench, breathing heavy to catch her breath, swallowing hard as the scene faded out. \n\nFuck, that was intense, I thought as I put my phone down. I fondled my tits as I closed my eyes and imagined being trussed up like that girl, my fingers rubbing my clit. I put one leg up on the couch and finger fucked myself as I pinched and pulled my nipples, thinking of the Dom's punishments to Kelly, thinking of her punishments on me as I sat tied up, unable to move while being fucked. \n\nGod, I wish I had my new cock with me, I so wanted to be fucked and fucked hard. My fingers played with my ass while I rubbed my clit, enjoying the sensation of my finger inside me. It was awkward but I reached behind and slipped my finger in and out of my ass while I rubbed my clit. I imagined the Dom's cock fucking my ass as I came, I could feel my sphincter clenching my finger as I worked my Kegel's, intensifying the orgasm. \n\nI lay there catching my breath, enjoying the warmth in my pussy and the feeling in my ass. New erotic thoughts swam through my head. A new region of sexual exploration I desired to experience. How to do it, how could I explore that realm?\n\nI was still dealing with issues from my ex. Guys were out of the question for me right now and girls were a tough one to approach. I didn't know who or where, let alone how. Either way it would take time to build trust with someone. \n\nI felt I had a dilemma, and no way to resolve it."
    ],
    "authorname": "Lorelei907",
    "tags": [
        "bdsm",
        "lesbian sex",
        "masturbation",
        "public",
        "public masturbation",
        "punishment"
    ],
    "category": "Toys & Masturbation",
    "url": "https://www.literotica.com/s/the-office-hottie-ch-05"
}
{
    "title": "The Designer Pt. 02 Ch. 02",
    "pages": [
        "Author's Note: This is a work of fiction, all characters are fictional, and all characters are over 18. \n\nThis story will be switching more and more from present to past, as the story unfolds. Please excuse any errors and lack of editing. I appreciate your reading, voting and comments.\n\n*****\n\nPresent:\n\nI slipped back into the present when I noticed the ringing of my phone through the car's speakers. The light presence of Lexi's hand on my hardening cock was pleasant as well. I turned and smiled a knowing grin at her as I hit the switch on the steering wheel initiating a hands-free call.\n\n\"Hello, Alyssa, what's up, miss me already?\" I spoke louder for the microphone.\n\n\"J, I always miss you, but I just got an odd call from Kelly at home, I'm going to head over to see what the issue is, but you and Lexi might take a turn around the park. It's probably nothing, but it might be something...\"\n\nAs her voice drifted off, I was a bit concerned, and confused. My mind drifting between past years and present life had various thoughts going through my mind. Alexi heard what Alyssa said and redoubled her fingering my stiffening shaft, which brought me back to the present, and a building need.\n\n\"A turn with Lexi in the park is never a bad thing, I just want things to go well tonight, I know you've all been planning this thing for weeks.\" I replied and shifted my seat back a bit to give Lexi's hand more room.\n\n\"It's so hard to keep a secret from you, dammit J.\" Alexis chuckled on the line, \"I'm just going to hang up and hope we've done a good job with the details. Have fun with Lexi.\"\n\nI clicked off the phone, and the music returned, and Lexi used her skillful hands to unbuckle my belt, unzip my trousers and fish her hand into my underwear while I maneuvered the car into the park entrance and started winding through the trees, my thoughts shifting back into the ...\n\nPast:\n\nI stirred to a warm feeling in my groin, and peeked down to find a mane of blond hair over my crotch, and Kelly's warm thighs straddling my own. A soft moan poured from my lips as her mouth nursed on the head of my cock, her hand lifting the shaft as it stirred, thickening and lengthening to her actions. \n\nA warm breath on my cheek then a kiss on my lips as my vision was occluded by a sheet of fine red hair and feisty green eyes before Lexi's mouth enveloped mine.\n\n\"Think she'll share with me, Master?\" Lexi cooed as her body twisted and slipped her mouth to kiss my chest her direction heading southward towards Kelly. \n\nI was silent at the hypothetical question, and also a bit taken aback by the title she had bestowed on me, but my arms lifted and helped lift one of her legs over my head, her knees slid slightly under my shoulders and my vision was blocked by the stimulating view of her dripping pussy. I drew in a deep breath and inhaled the fragrance of Lexi's arousal as my mouth moved up to surround her wet cunt. I felt Kelly suck the tip hard, then slip from her lips as a new warmth surrounded the crown, a tongue lapping at the slit and coaxing out the pre-cum. \n\nI left Lexi's nipples harden against my abdomen as my arms curled around her hips and spread apart her buttocks, my mouth sucking her engorged cunt lips into my cavern and lapping my tongue into its succulent folds, catching her own emissions and filling my mouth with her arousal. I move my head up to lick around her tight anus, lapping and hearing her breath quicken at the motion, her groin grinding on my extended chin.\n\n\"Oooh fuck, yessss...\" Lexi sighed as she arched her back, lifting her mouth from my cock, her hands moving to the shaft and stroking it as I felt Kelly shift and move her knees up, her thighs stretching open as she found the right spot, and felt Lexi guide my saliva coated head into Kelly flowered sex, groaning into Lexi's cunt as I felt Kelly slide down fully.\n\nI pulled my mouth back and spat at Lexi's anus, my fingers curling between her cheeks to press into her tight hole, feeling her muscle resist, then surrender as my fingertip pressed into her ass. I moved my mouth back to her cunt, shifting to lap at her clit as my fingers probed her ass, stroking in and out in time with Kelly's rising and falling as she fucked my cock.\n\nLexi leaned forward again and her chin added pressure to the base of my cock as she licked Kelly's hard button, her tongue also coating and lapping along my shaft as Kelly arched back, her hands supporting her pose on either side of my knees. \n\n\"Oh fuck, yes Lexi, lick my clit, and ... mmm yes, squeeze my tits.\"\n\nI groaned at the picture in my imagination, my hips gyrating as the lifted and fell in time with Kelly's dancing hips, my mouth sealed around Lexi's sex and tongue dipping in and tongue fucking her cunt as her hips moved, my finger working like a piston in and out of her tight ass. We found the carnal rhythm and moved slowly, enjoying the connection, then moving faster.\n\nI felt movement to the side, as Carmen body shifted beside me, I felt Aly's body curve around, and felt with my hand as she climbed over Carmen's prone form mirroring Lexi's pose her mouth must have found Carmen's sex as I heard a curse in Spanish before a long moan from Aly as her hips gyrated over Carmen's mouth, silencing the oaths.\n\nFeeling and hearing our bedmates initiating their tryst only made our threesome more frantic, Kelly's hips rose and then fell and ground as my hips lifted to meet her, Lexi's mouth and torso rising and falling as she lapped up the juices flowing from Kelly's sex. I felt Lexi's smallish breasts press and flatten against my chest, then rise until just her rock hard nipples grazed my flesh, before coming back down. My head was pinned to the mattress, my mouth sucking and tongue lapping, breathing deeply through my nose, as Lexi ground her hips against my lips her ass lifting and pressing back into my intruding fingers. \n\nKelly was the first to trip, freezing in her arched posed, hips vibrating as her cunt muscles clamped around my shaft and fluttered in orgasm. Her inner muscles clenching and milking my shaft set me off, and my balls tightened, then cum poured down my shaft and shot deep into her womb, my body quaking as my hips flexed and froze as my back arched. I plunged my finger deep into Lexi's ass and sealed my mouth around her clit and hummed and lapped at the button until she too tripped off, her cunt flooding my face with hot wet juices. Kelly's moans carried us through our orgasms, until Lexi lifted, and pulled Kelly towards her, feeling them kiss and embrace as I was still sealed to them was heaven, but we slowly unwound and turned to watch our bed mates rise to their finish.\n\nAlyssa's ripe ass lifting and falling over Carmen's dark brown locks as she ground her cunt against the Latina's mouth was too alluring. Still hard, even after my first orgasm, I shifted away from Lexi and Kelly, and kneeled behind Aly's bottom. Gripping her waist with one hand, I guided my cock against her leaking folds and felt Carmen's hot tongue press to help it slide home deep into Alyssa's cunt. The feeling of Aly grinding her bottom back as her head dipped lower, eliciting a moan from under my swaying balls, brought me right back into a hard pounding beat. \n\nDriving Aly to the edge while Carmen lapped at her cunt and sucked my balls, soon had Aly groaning loudly and wetly into Carmen's sex. Carmen's hip lifted and ground up into Aly's mouth, then all at once we lifted off. My cock jammed deep into Aly's cunt, blasting jets of cum into her womb, as Carmen's body rose and twisted, Aly jutted her hips back and ground her clit on Carmen's mouth, and shook, grunting into Carmen's squirting cunt. As we fell through the waves of orgasm, my cock slipped out of Aly's clenching cunt only to be greedily sucked deep into Carmen's needy mouth. Her lips sealing as she sucked out the last of my load.\n\nWe all collapsed, and all five us of hugged and kissed for a few moments, until Kelly suddenly rolled off the bed, and rushed to the bathroom. The door slammed shut just as we heard her start to gag, then retch into the toilet. \n\n\"Too much Bonanza?\" I asked, starting to become a bit worried. We were all watching as she came back out, wiping her lips on a towel. \n\n\"I think I should go to the doctor, I might have food poisoning...\" She said meekly.\n\n\"I need to get grocery shopping done,\" Carmen agreed, as we started our day, \"We need to keep our strength up, I think.\"\n\n\"I'll go with you Carmen, I need some things to help with my running,\" Lexi said as she slipped off the bed to get dressed.\n\n\"Aly and I need to see my Uncle, and ask him some questions,\" I said, \"we'll shower first!\" I claimed as I took Aly's hand and slipped past Kelly into the bathroom.\n\nKelly turned and entered with us, to our delight, explaining, \"I need to clean up before going to the doctor.\"\n\nI watched as Carmen slipped a snug sun dress over her body, not worrying about smelling like she just had sex, and coaxed her breasts into the built in bra, she slipped on sandals, and was joined by Lexi in running tights and a tight running bra, slipping a jacket over her shoulders, they headed out to do their errands. I smiled as I wondered what looks they would get as they shopped.\n\nWith Kelly not feeling well, we focused, mostly, on just getting clean, but enjoyed the touches and groping that comes with three grown people in a small shower. We quietly dressed, and then left in our different directions.\n\nI took Alyssa's hand and we enjoyed a nice walk the few blocks to Uncle Tom's office. The weather was getting warmer, and I was looking forward to warmer days with my house full of sexy women. Warmer weather, meant less clothes, and more sexy sundresses like Carmen's.\n\nUncle Thomas was talking with his assistant when we came in, so he waved us back into his office. I introduced Alyssa to him, formerly, as they had met once before briefly at a house party a few months back.\n\n\"Lovely to see you again, Alyssa,\" Thomas said taking her hand then inspecting my ring on her finger, \"Congratulations as well, Jeremiah is a very lucky man.\"\n\n\"I really think, I'm the lucky one,\" said Alyssa with a smile, accepting Uncle Thomas' offering of a seat. \n\n\"First things first,\" Thomas said, \"Let's quickly go over the plans for the house and renovations for the B&B\"\n\nI sat next to Alyssa and we held hands as Thomas explained what he'd found out while researching real-estate investments. He had arranged a consultation with another lawyer, someone that was referred to him by Kelly's mother. Kelly's mother retained a different lawyer so there wouldn't be any conflict of interest. the partnership he explained sounded pretty simple and an effective way to ensure my assets were protected. He said he would have the documents finalized by the end of the next day. \n\n\"On the matter of your financial arrangements, If you two, Carmen, Alexis and Kelly could come by around 4 PM, I'll have the papers ready for all your signatures.\" Thomas said.\n\n\"That would be excellent,\" I said, then changed the topic, \"Alyssa and I wanted to ask some questions about my father. Do you still have that box from his estate?\"\n\n\"Yes, it's by the door.\" Thomas said, then looked thoughtful, \"What do you want to know, Jeremiah.\"\n\n\"Did you know my father?\" I asked, \"With all that's happened to me, I really need to know more about him, and his family.\"\n\nThomas nodded, then took a deep breath, as if convincing himself to have this conversation. \n\n\"Yes, I knew your father.\" Thomas said, \"But first I knew your mother, Katherine, I called her Katie. We grew up in the same town, and were good friends since elementary school. I even dated your mother in junior high, but it was too weird. We were really good friends. Our families went to the same church, and were very close.\"\n\n\"I never knew that,\" I said, leaning forward with interest.\n\n\"There is a lot you don't know, Jeremiah,\" Thomas said with a sigh, \"There is a lot I need to tell you, and I think it's best if I just tell the story as I know it. You can ask questions when I'm done. The reason all of this was kept from you, was to protect you. None of us knew what else to do.\"\n\nI sat back a little shocked at this revelation. Despite growing up with a single parent, and loving grandparents, I never suspected some big secret. Alyssa sensed my anxiety ramping up, and scooted her chair closer holding my hand in both of hers. \n\n\"Okay, Uncle Thomas,\" I said after taking a deep breath, \"Tell me the story.\"\n\n\"Your mother was always an independent woman,\" He began, \"The older she got the more strong her personality became. She was headstrong, confident, intelligent... There wasn't anything she couldn't accomplish once she put her mid to it. She intimidated many of the boys in high school, and while we remained friends, she never really looked at a boy romantically. I thought she was looking past high school to college, a career, and whatever lay down that path.\"\n\n\"Until she met your father. Isaiah moved into town our junior year in high school. From somewhere in Montana. This is a small enough town that a new face always gets noticed. Fresh blood in the water. The girls in school were all infatuated with Isaiah, he was handsome and fit much like you are, Jeremiah. Your mother was friendly with him at first, but kept her sights on her own plans.\"\n\n\"Until spring prom. Jeremiah asked her to the dance out of the blue. I wasn't sure why she accepted, but from the night of the dance your mother and Isaiah became inseparable. Her parents thought it was just a high school crush. Isaiah's parents weren't very active around town, a very secretive couple. When they did appear in public, they didn't seem to have a very high opinion of your mother. Isaiah didn't seem to care what they thought.\"\n\n\"Wait,\" I asked, \"I have grandparents? My father's parents... are they still alive?\"\n\n\"Let me tell the whole story, Jeremiah. I promise you I'll answer all your questions when I finished. You have to let me finish.\" Thomas said earnestly.\n\nI sat back in my chair. Slumping down my mind ablaze with irritation, and frustration. Alyssa soothed me, then in her way she pushed her own thoughts towards me. I felt her soothing presence and became calmer and leaned forward to listen carefully. Seeing me return my attention to him, Thomas continued.\n\n\"Katie and Isaiah were together constantly. Through the summer between their junior and senior year, Katie became pregnant with you. Isaiah's parents were not happy, they practically demanded that Katie have an abortion. At least that's how Katie explained it to me years later. Isaiah wouldn't hear it. He had turned eighteen in July and moved into his own apartment. He proposed to Katie and surprisingly her parents gave consent. They were married in August. Isaiah's parents moved away in September.\"\n\n\"Where did they move too?\" I asked a bit too eagerly.\n\nThomas regarded me with a raised eyebrow, and I sank back into silence. \n\n\"I think to Montana, where they'd moved from the previous year. I really didn't know much about them, most of what I know I found out from Katie over the years. Katie dropped out of school and tried her best to become a housewife. Isaiah dropped out too and took a job as an auto-mechanic garage downtown. They gave it their best shot, and worked hard to build a home for you. You were born the following February. Your parents loved you very much they were so proud of you.\"\n\n\"With most relationships that start so young, and burn so brightly. They also burn quickly. When you turned two your mother began to want to work again. She finished her requirements for a high school diploma and started taking classes to become a nurse. Isaiah was making good money as a mechanic, he had a good mind for repairing things that seemed totally broken. With Katie so busy, they hired a young college girl to help with the baby. That's when the trouble started.\"\n\n\"Trouble?\" I asked sharply, then settled back into my chair nodding. I'd let Thomas finish his story.\n\n\"Wasn't horrible, just odd. In this small town in the early seventies people noticed things differently. Isaiah started to pay a lot of attention to your housekeeper. Katie was madly jealous at first, then oddly became almost best friends with her. The three were soon inseparable. Like a family of three, which was causing a lot of gossip in those days. Your mother would brush it off as just gossip when I asked her about it. Her eyes told a different story though. I could tell she was in love with both Isaiah and the other girl... I can't recall her name.\"\n\n\"It was also when the fighting started,\" Thomas said with a frown. \"The fights were normal, your father never harmed your mother. From what Katie told me though is they started arguing over her place in the house. She had really taken to nursing, but Isaiah wanted her to stay at home and not spend so much time at the hospital. Katie had regained a taste of the independence she had before she met Isaiah and didn't want to be just a housewife anymore.\"\n\n\"Katie said that her place in the house soon was taken by the other girl. She found them together without her more and more. When she tried to talk about it with Isaiah, he explained that she was never around. Your mother really struggled. Isaiah struggled too, he loved your mother very much. My recollection of the time was strange, I was in college here in town, but caught up in my own world. All I knew is that suddenly Katie and you were back living with her parents and Isaiah and the other girl were gone.\"\n\n\"Katie took it hard,\" Thomas said with a frown, \"Talking to her years later, she said that the both of them agreed it would be best to separate. She didn't realize how hard it would be though. She went through months of a deep depression, your grandparents almost had her institutionalized. Slowly she came out of it; working hard and caring for you seemed to pull her out of the depression. There were still many times where she looked just... empty.\"\n\nI nodded, I remembered my mother going through spells of looking just dead emotionally. Drained and dry. Those melancholy spells would last a few days, then suddenly she'd perk up and things would go back to normal.\n\n\"I know what you mean, Uncle Thomas,\" I said softly, \"I remember those spells.\"\n\n\"After reading your father's letter, Jeremiah,\" Thomas started, \"and hearing what's happened to you, I think I understand your mother better.\"\n\n\"How so?\" I asked.\n\n\"The prom,\" answered Alyssa, \"Your parents first had sex at prom.\"\n\nUncle Thomas nodded, and Alyssa continued looking at me. \"His talent is the same as you, and they became entangled. Like you have with all of us. Then he became entangled with your babysitter, and for a time all three were entangled.\"\n\n\"Yep,\" said Thomas, \"I think Alyssa has it right, Jeremiah. The times were different then, the rumors about the three of them together were too much. Katie told me she had to struggle between her feelings for your father and the other girl. Damn I wish I could remember her name.\"\n\n\"Ultimately,\" Thomas said, \"The small town gossip got the best of your mother, and she made your father make a choice. She didn't want you affected by the gossip and cruelty. Isaiah chose to leave and he took the babysitter with him. Your mother was left with a two-person hole in her self.\"\n\n\"Where did my father go?\" I asked.\n\n\"I think back to Montana, to find his parents. I'm pretty sure that's where Isaiah and the babysitter, damn... Samanta.. that was her name. He took Samantha back back to his home in Montana. Well until...\"\n\n\"Until what? when?\" I asked sensing that Thomas was avoiding something.\n\n\"Until your mother died,\" Thomas said sadly, shaking his head like he didn't want to address those particular demons.",
        "\"I don't understand,\" I said, \"Did they come back for my mother's funeral?\"\n\n\"No...\" Thomas said quietly, then lifted his eyes to mine, \"They were the couple in the other car that killed your mother.\"\n\n\"What?!\" I said, not wanting to know more. The room spun and my eyes closed. I felt tears of anger, frustration and sadness well up in my eyes. My whole body felt sick. Alyssa hugged me and it helped, but I was still lost in my own thoughts. Did they murder my mother? I didn't even know them? Why?\n\nSoftly Thomas started speaking again, \"I didn't put all of the puzzle together until the other day when I saw the box from your father's estate, Jeremiah. According to the death certificate, he died the same day as your mother, in this county. My theory is he went back home to be with his family. After I read the letter he wrote to you, I think he went back because of what his family curse is, this psychic power you have. I think this entanglement with your mother... I think that haunted him until he was killed.. I think he and Samantha were coming back to reunite with Katie... The collision seems to be a bit poetic, darkly poetic, they were tied together those three, for better or worse, they couldn't escape the orbit... anyways, there was no one left alive to charge with the crime, or ask questions, so the police just kept it as a traffic accident.\"\n\nI sat dumbfounded. I wanted to scream. I wanted to ask a million questions that would never have answers. I mostly felt alone. Until Alyssa hugged me close. She just held me, not saying a word, but her presence helped bring me out of my shell. I started to cry softly then loudly. I mourned my mother again, or finally allowed myself to feel her absence. I mourned my father, and his selfishness. I even mourned my paternal grandparents, who I never knew. I wanted to ask them so many questions.\n\nThomas waited quietly as I mourned. When I came back to the present, he looked at me with concern. \n\n\"So now what?\" I asked, \"I know the story, or at least a lot more than I ever knew before. I know I've made the same ... attachments my father made ... with Kelly, Lexi, Alyssa and Carmen. I don't want any of them to go through what my mother went through.\"\n\n\"You don't have to make the same choices your father made,\" Thomas said, \"I'll work hard to keep your secrets, to keep you all as safe as we can. I agree that being together is better than ripping you apart.\"\n\nI looked over at Alyssa, needing to hear her opinion, \"Alyssa what about you, tell me what you're feeling.\"\n\n\"I don't know exactly how your mother felt, Jeremiah. I'm not her. I've told you before I was in love with you before you changed me, before we made love that first time. Your talent may have deepened that bond, but it did not create our bond.\" Alyssa said reassuringly. \"You may have created that bond with the other three... I don't know. I do know that all four of us are fine being together.\"\n\n\"What if our secret is discovered,\" I asked, \"We might have to move away.\"\n\n\"Then we'd move away,\" Alyssa said, \"The bond the five of us share is too strong, to try and rip one of us out, the rest of us would feel it. I think your mother felt not just the loss of the bond with your father, but with the babysitter too. I think it was the same for each of them.\"\n\nThomas nodded, \"I think Alyssa is right. I mostly know what your mother went through, but if what Alyssa says is correct the separation was hard on all of them. I can see if your father felt the same sort of pain...Samantha filled her part of the void, but probably could never fill Katie's. I think she felt as much attachment to Katie. Katie always was fond of Samantha, she never blamed her for leaving with Isaiah. I always found that strange. Until now, I'd always seen the situation as a normal relationship, an affair that ended a marriage. This new information has me reassessing my own memories.\" \n\nI thought for a few moments. I recalled the name Samantha, or Sammie. The sound of the name brought happy memories for me. I'd only known her when I was a toddler, if she left with my father, then she left when I was four. I really didn't know what to do with the information. I wanted to know more so I could safely use my powers. Now I didn't ever want to use my powers again. While I struggled with my thoughts, Alyssa took over.\n\n\"Can I take that box home with us?\" Alyssa asked indicating the banker's box of papers.\n\n\"It's Jeremiah's,\" Thomas explained. I nodded and Alyssa went and lifted it up. It was light enough to carry and she brought if back to our chairs.\n\n\"I think I need to go through this box, Jeremiah,\" she said looking at me, \"Then we may want to take a trip to Montana and open that safety deposit box. We've gotten a few clues, and have some theories but we haven't learned any hard facts.\"\n\nI nodded, resigned that I needed to find out more. I also didn't want to go anywhere near Montana, I feared what I would find there. \n\n\"Yeah,\" I sighed, \"I think that's the best idea too. Though I'm not sure I'm entirely happy about that. We'll be back, all of us, at four to sign the partnership. We need that legal coverage too.\"\n\n\"Yes, of course.\" Thomas replied, \"You know that I'll take care of anything I can, Jeremiah.\"\n\nI gave Thomas a hug, then lifted the banker's box, \"The five of us will be back at 4, everything you told me today makes me even more convinced I need to keep them covered and safe. \n\nThomas, smiled grimly, \"Of course, Jeremiah, I'll have them ready.\" and he waved Alyssa and I left and walked home.\n\nMy brooding attitude lightened the closer we got home, to the point I was almost on a high. I felt it odd given the information I had just processed, but being nearer to Carmen and Lexi just brightened my spirits. Lexi was putting away groceries, and Carmen was just finishing putting lunch on the table. I felt her push a thought my way, and was surprised at the feeling, I was so used to pushing, and not listening.\n\nShe pushed an image of her over the counter, and me ... well, I swept towards her and just acted on her wishes, gripping the yellow sundress at the bodice and ripping it in two, freeing her breasts instantly into my cupped hands.\n\nAlyssa gasped at the sudden ferocity, and Lexi slipped beside her and hugged her, whispering a quiet message. The pair slipped into a chair, as I roughly grabbed Carmen's breasts, and tugged her by her flesh to me, twisting her body around by my grip of her fleshy mounds until her back was against mine, her chest heaving as he head tipped back against my shoulder, looking at my eyes with her own lust filled brown pools.\n\n\"Yes, Papi, take me, use me,\" she grunted as one of my hands dropped to the apex of her thighs, pulling the skirt of the ruined dress up and sealing my hand to her flooding cunt.\n\n\"I smelled like you all morning.\" Carmen panted as I firmly gripped and mauled her breasts.\n\n\"You fucked Aly right above my face.\" she spat as my hands gripped her flesh and my hands pulled the tattered bodice down her torso exposing her abdomen, my hand lifting and gripping the hem of the short skirt.\n\n\"...and every. time. I. breathed., \"her breath a short staccato as my hand cupped her leaking cunt, \"I inhaled the scent of your cock and balls, and fuck...\" \n\nShe was silenced as two fingers drove into her well lubricated vagina, I felt more images being pushed from her as her lusty fantasy was communicated via our network, I pulled her back, then shoved her body over the counter, her breasts pillowing on the cold surface and kicked her feet apart. \n\nI glanced up at Lexi and Aly, and saw Lexi straddling Aly's lap, legs spread and Aly's hand slipped inside of Lexi's spandex tights, moving over her pussy as the watched me dominate Carmen. \n\nMy hands shoved my pants down, ignoring buckles and belts and gripped my rock hard shaft. I drug the swollen glans of the head over her sodden lips, found the opening, feeling the head sink into her folds, then rammed my hips forward filling her cunt with my shaft.\n\n\"Oh fuck, yes, Papi, fuck your whore, fuck your SLUT,\" Carmen grunted lost in her own fantasy being fulfilled.\n\nI pounded her hard, my hands gripping the carmel flesh of her ass, pulling back and spanking her skin, feeling the flesh heat up then discolor into a deeper reddish hue as I used her body, gripping her, one hand lifting to slide through her dark brown locks, fouling in the tresses and gripping tightly, yanking up and making her watch Aly and Lexi.\n\nLexi's topped was pulled up, her breasts exposed as Aly worked one firm tit with one hand and the other fingering the small fit girl's needy cunt, their eyes locked on Carmen's face as I held her head back and rammed her cunt repeatedly. Another image was shouted from Carmen's psyche, and I pulled out, leaning back I pulled her ass cheeks apart and spat a wet gob of saliva at her tight anus, then pressing my cock head into the slippery mess, thrust slowly into her ass.\n\nThe purred growly groan that emitted from Carmen's stretched throat was pure sex, making the room almost turn humid with our conjoined need. I felt her anus open and my cock pressed through, my hips jamming into her ass as she pushed it back to be fully filled. A sharp bark as the initial pain of entry flowed through her nerves only to be soothed by the endorphins that flooded her system. She cried out, \"Oh FUCK yes, FUCK my slut ass, use me good Papi.\"\n\n\"You like that slut, my little whore, you like getting your ass rammed repeatedly, being owned by me, don't you, fucking little puta...\" I cursed in a stream that surprised me, and only fueled her own heat, the humiliating oaths only boiled her blood more as I took her hard. \n\nMy hips moved like a jackrabbit hopping in and out of her ass as she ground her hips and pushed back into my thrusts, I leaned over her, my hand still pulling her head back exposing her throat as I wrapped my arm under her chin. Her flesh pressed into my elbow joint as I compressed her windpipe, robbing her of oxygen, my eyes flashed to Aly and Lexi.\n\nLexi was now on her knees, her head between Aly's thighs, Aly's clothes tossed aside as she watched naked. Her hands gripping her breasts, and tugging on her nipples as Lexi devoured her streaming pussy juices. She watched me posses Carmen in a more dominant way than we'd ever imagined, and she held her breath as my arm tightened against Carmen's throat.\n\nCarmen went over the edge in that moment. I felt her cunt compress cock slammed deep into her bowels, balls lifting and jetting cum deep into her ass. I held her body firmly as she shook in mind-body convulsion over the cold kitchen counter. Her sun dress shredded and her body aching as she came silently, unable to shout, her mind clouded from lack of fresh oxygen. \n\nI roared as I came, watching as Aly arched and came in Lexi's mouth the stream of juices exploding from her cunt flashed through my mind as I closed my eyes and sunk forward. My arms released and my body relaxed, pressing Carmen's body into the kitchen counter, and just sank there catching my breath. We all were silent as we caught our breath, Carmen mewling under me, content as a kitten.\n\n\"Um, guys... \" came Kelly's voice from behind me, \"Uhm, I'm pregnant.\"\n\n*****\n\nAuthor's Note: I have a lot more coming, some plot lines already formed, and just have writing to do, the writing is easier if I have views, votes and comments to spur me on. Thank you for reading, and I hope you enjoy the next chapters. These first chapters have been submitted self-edited. If interested in editing, please email me via the feedback form."
    ],
    "authorname": "HankDolworth",
    "tags": [
        "ffm",
        "drama",
        "mind control",
        "anal",
        "dominance",
        "submission"
    ],
    "category": "Mind Control",
    "url": "https://www.literotica.com/s/the-designer-pt-02-ch-02"
}
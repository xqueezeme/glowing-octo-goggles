{
    "title": "My Wife's Big Dick",
    "pages": [
        "Author's Note: This story has evolved over time. In its original form, it involved other couples and turned into a big mess of dicks, which means that it was great. However, it was quite \"porny\" and easy to forget the premise of the story altogether, which was...what if your wife suddenly had a dick? Everyone in this story is over 18.\n\nShe left the text message, unread, for hours. She knew what it said and she cringed every time she looked at the phone. Laura had thought of a million possible excuses. Work got busy. She didn't have any bars. She had one of those headaches that really meant she just wanted to be left alone. Matt had known her for twelve years now, she didn't really have to spell out headache. He'd be disappointed but ever since they had started trying to have a baby, sex had gone from romantic and occasionally hot to scheduled and tense. But it had never been like this.\n\nAt 4:00 Laura decided, with nervous, twitchy fingers, that there was no point in trying to hide it any longer. They had promised even before they got married that nothing was too big for them to work out. Laura almost giggled as she thought of that conversation. She wondered if Matt had any idea just how awful \"for worse\" could get. Her poor husband. And here he'd thought that giving her shots in her black and blue bottom had been almost too much.\n\nMatt had sent her the message at 9:02 am. She knew that meant when he sent it, he'd just gotten to work and probably had moved his half hard dick around in his pants. He asked her, \"Are you up for date night tonight, my love?\" Always a gentleman, even after all this time, \"date night\" was code for sex and Matt still asked like he had the first time they went to bed.\n\nHe had no idea how different tonight was going to be.\n\nLaura finally replied and texted back quickly before she could talk herself out of it. \"Yes honey\" and she pressed send and set the phone down as she felt the tightness in her chest. She had smothered pork chops ready to put in the oven and she'd even made peach cobbler; two things that Matt loved but she hardly ever made. If this was the new reality, she was going to have to pull out all the stops. Laura shook her head and thought she'd have to start cooking him a lot more desserts.\n\nWith dinner mostly done, Laura went to the master bathroom to begin her typical date night grooming routine. She placed her phone on the charger before she began to fill up the tub and noticed that Matt had already texted her back with a smiley face and hearts. Yeah, that was him. That was her husband, she sighed as she poured lavender scented bubble bath into the bathtub. Here she had kept him waiting all day and Matt still pounced the moment he could. There was no pretense, he never kept Laura waiting or tried to keep her on her toes. He just worshipped her, which made tonight even more difficult.\n\nLaura peeled down her yoga pants and stripped off the long tee shirt, leaving them in a rumpled pile on the floor. She wound her long, blonde hair up in a bun to keep it dry. She automatically began the scan of her reflection even though today, the last thing she wanted to do was look at herself. The worry lines between her eyebrows seemed to be more prominent at the moment. Laura grimaced and pressed them down and wished for the hundredth time that she'd done a better job with sunscreen. There was also a little crease between her breasts. It wasn't quite a wrinkle, the skin was looser though than it had been when she just turned thirty. Now that she was closer to 35, it felt like her body was settling and shifting, like the foundation of the house. Dammit, she didn't want any cracks, Laura told her reflection wistfully. With the smile, she saw the slightly crooked eyetooth. Matt told her that he loved it but the unruly tooth made Laura close her mouth for pictures. There was a splash of freckles across her forehead and then there were the other ones on her forearms. More signs of UV damage that she was sure would turn into liver spots one day.\n\nLaura unhooked her bra and watched her ample breasts bounce as they were released from the underwire. She cupped them in her hands and pushed them up so that they sat high on her chest where they had been when she was just twenty-two. They were glorious back then and Laura glowed as she recalled how she preened in front of the mirror back then. That was right around the time that she and Matt had met. Her husband had cum in his pants when he saw those breasts the first time. Laura smirked at her reflection as she recalled it. It wasn't the last time she'd made him do that either. \n\nOf course, Laura was still considered hot but she thought after a quick scan down her toned abs that she was no longer a girl. She was rapidly, too rapidly for Laura's tastes, and headed into MILF territory.\n\nThinking MILF made Laura bite her lip and release her breasts as a wave of hopelessness washed over her. She couldn't really be a mother that anyone would want to fuck when she still wasn't anyone's mother, could she? In spite of the two rounds of IVF treatments, there was still no baby. In spite of pills and shots and countless tests and scans, she was supposedly perfectly healthy but no baby. \n\nThe worst part was that Laura had always been good at everything. She couldn't think of one thing that hadn't come easily. Except getting pregnant. It was the only reason that she'd agreed to the experimental drug that Dr. Rampling had suggested. And look at what happened.\n\nLaura's eyes followed the reflection in the mirror all the way to the grotesque new thing that she'd spent the last three days trying to ignore. Laura kept thinking maybe she'd wake up to discover it had just been a nightmare. She'd tried to hide it as best as she could. She'd even tried to pretend like she was just going crazy and it wasn't really there. Like it was a hallucination.\n\nLaura felt the tears in her eyes as she realized that being crazy actually seemed like a much better possibility than the truth. She hung her thumbs in the waistband of her white panties and thought it was like a band-aid. It was better to just rip it off and be done with it.\n\nLaura felt the panties around her ankles but it was impossible to look at anything else. Nothing else existed besides the weighty girth that swung from side to side on the front of her body. Fuck, it was still there, Laura sighed and shrugged. \n\nWhat was she going to do with this huge, pink dick?\n\nDr. Rampling had said that the overdose of hormones was temporary. He assured her that it would go away within her next cycle. But in the meantime, Laura didn't know whether to laugh or cry as she turned to the side and watched her mighty cock jostle in the mirror. It was heavy and it slapped her thigh. She had a thick, veiny dick and meaty, dark pink balls that lay in the smooth, incredibly soft sack. Laura found that she constantly had to shift her balls from side to side all day. How did men get anything done all day, she wondered, besides move and shift and push their unruly dicks into place?\n\nLaura turned off the water and sank slowly into the tub. She watched as her breasts rose to the surface and her rose colored areolas wrinkled into nubs. Her nipples were so sensitive lately. Just the fabric of her bra was almost more than she could bear. They ached for a mouth. Specifically, they ached for Matt's mouth and the tips of his teeth. Laura wanted him to bite her into eager points. She wanted to melt under him and wet the sheets and open her thighs up wide. Considering what had sprouted on her unsuspecting body, it seemed highly unlikely.\n\nMatt hadn't always been a good lover. He'd been quick and that combined with his looks and his smallish dick had been the reasons why Laura had almost broken up with him after the fourth date.\n\nReally, it was his commitment that made Laura fall for him. He'd made a promise to get better. He'd told her that night, on his knees in front of her that he'd do anything. With a hundred kisses that he'd pressed to her hands and then her neck and then her mouth, Matt swore that he'd learn what she wanted. \n\nLaura could still recall his big, dark eyes. His eyes were puddles of melted chocolate and that night, they had shimmered in the light. They had been full of lust and heat and tenderness as he had told her in a solemn voice, \"Laura, you're the one. Please, please let me learn how to make love to you.\" \n\nWhen she'd agreed, he had spent at least an hour with his tongue between her legs and Laura had squirted for the first time ever. She had soaked his face and his bed and when her thighs still trembled the next day, Laura never looked back.\n\nShe'd married him because of that tongue. Now, of course, there were a hundred other reasons and she considered herself very lucky to have such an amazing husband. Back then though, initially it had really been coming in his mouth.\n\nThinking of his tongue made something else rise up in the tub. Laura slapped the water impatiently. She was disgusted and out of patience with this stupid, stupid dick. \n\nEverything was about the dick. She couldn't even pee right. She had to wrestle it into position and nothing was worse than mopping up urine, even if it was her own. \"Dammit, just get in the water,\" Laura bellowed. She pushed her cock under the bubbles and sank back into the neck pillow that was supposed to help her take a nice, relaxing bath.\n\nThe rest of the date night routine included shaving her legs, all the way up to the very top. Laura kept herself smooth daily from the knee down but she shaved all the way up when her thighs would likely be around Matt's face. Tonight as she ran her pink razor up to her bikini line, she curled her lip. What would her adorable husband think once he finally saw what the massive shot of hormones had given her? She felt the anxiety grip her once again as she imagined those sincere, yearning brown eyes filled with disgust.\n\nThere wasn't even time for that, Laura told herself as she shaved her armpits too. There were a few sprouts, just a dusty line of her smoky colored pubic hair that grew from the base of the awful dick up about two inches. Matt affectionately called it her landing strip and he was known to follow it faithfully with a soft line of kisses until he reached her swollen, damp lower lips. He was known to linger there with even more closed mouth kisses and whisper to her pussy, as if it was listening. Her husband would murmur that it was the most beautiful pussy he'd ever seen. Then, just as if he needed to convince her pussy of his sincerity, he'd open her lips with the tip of his hot, hungry tongue.\n\nDamn, every time Laura thought of Matt licking her, the dick waved as if it was volunteering, \"lick me\". Not likely, she scowled and pulled the plug out of the drain. She was smooth and soft and clean and smelled of flowers. She was as feminine as could be, except for that thing. Laura dried off with the thick towel and surveyed how pink and glistening her body was in the mirror now.\n\nThe dick was mesmerizing and Laura was ashamed of how often she stared at it. It was impressive, the biggest cock she had ever seen and it was heavy and so much warmer than the rest of her body. Its skin seemed like satin, like the innermost petals of a rose but she was still afraid to touch it. It seemed too wild to be trusted. \n\nLaura squirted her favorite vanilla scented lotion into one hand and then slicked it back and forth between her palms. Once it was warm and slippery, she skimmed both greasy hands over her breasts. It felt good with her hands there, just a soft caress back and forth, nice and easy with her fingers on her nipples. She hadn't been touched since her last trip to the doctor and Laura's whole body craved touch. The sensation of this was delightful and Laura's nipples sang with pleasure. Then the dick had to spoil everything by surging and waving about.\n\nLaura stopped touching herself immediately and it seemed like the life as well as her desire had been sapped from her body. Her shoulders slumped and her eyes began to fill with tears once more like they had when she spoke with the doctor. \n\nWhen would she be touched again? She'd been avoiding Matt since the cock happened because it was so unpredictable and impossible to control. But if she'd ever needed to be held, it was now.\n\nLaura wiped the tears from her cheeks and looked at her face in the mirror. Like this, without the new body part, she was just Laura and although she'd never felt beautiful, not really, she knew that she was, or at least her husband thought so. Matt called her his dream girl, even after all this time. He'd been so adorable during IVF. He'd kissed every bruise that she'd gotten from the shots. \n\nMaybe he could see past this newest development and think of it as one more bump in the road to having a baby. Maybe they'd even laugh about it one day. When they were old, Matt would elbow her in the ribs and joke about, \"Remember that week when you had a penis?\" And they would both crack up and the grandkids would wonder why.\n\nLaura rubbed cream under her eyes. It was time to finish up. Matt would be home in about thirty minutes and the last thing she wanted was for him to know something was wrong the minute he walked in. She wasn't going to let one dick ruin date night, Laura said to herself in a stern voice that then made her giggle uncontrollably.\n\nIt only took ten minutes and the result was quite miraculous. Laura chose the pink sundress because it was so full and voluminous around her hips, Laura just looked pretty. Her long, thick dark blonde hair was free, in wispy curls around her shoulders. She looked like she had already been taken to bed. Bed head was something that her husband found terribly sexy. Laura barely brushed the mascara on her lashes and applied just a dab of pink gloss on her lips. Sweet and innocent looking, she was almost the girl Matt had fallen in love with years ago. With one, small exception. \n\nWell, not really that small.\n\n\"Honey, what smells amazing?\" Matt called to her from the kitchen.\n\nLaura had a hopeful glimmer in her eyes as she tossed her hair back over one shoulder. He loved her. Matt worshipped the ground Laura walked on and he'd always been remarkably kind. Somehow, they'd get through this too. \"Guess,\" Laura called out to him as she came down the stairs to the kitchen.\n\nThere he was and for some reason that Laura couldn't put her finger on, he certainly looked handsome tonight. Matt's dark eyes were smiling as well as his large, generous mouth. He wore a suit as usual, and in spite of his pudgy middle, he looked good dressed up. Laura didn't love the look of his belly but she had to admit that liked the feel of it. Aesthetically, it wasn't her preference but in the night, wrapped in his strong, protective arms, the belly was soft and comforting. So was the scent of his big, solid body and Laura leaned in for a smell as her husband turned the corkscrew in the bottle of red wine.\n\n\"Pork chops?\" he asked as he set the bottle on the counter and kissed Laura's forehead.\n\n\"Yes,\" Laura whispered into his collar and brushed her lips along his neck and inhaled him deeply. Matt didn't smell like aftershave, especially not this late in the day. He smelled like soap and warmth and maybe that was even his balls. Musky. Manly. His scent would be left behind on Laura's skin and in the tangle of damp sheets after date night. \n\nNormal date nights anyway. She gulped hard, this wasn't the time. \"And baby carrots and mashed potatoes,\" Laura added. His two favorite vegetables, she was really trying to impress him.\n\nMatt reached behind her for the wine glasses. \"Mmm, honey, that sounds delicious. I'm starving too.\"\n\nLaura waited as he poured her half a glass of Cabernet. She had abstained from alcohol while doing the fertility treatments but now, well now she didn't know what phase of the baby making this was. \"Good, I hope you're hungry because I made peach cobbler too.\" \n\nHe raised his eyebrows and patted his stomach. \"Not like I need peach cobbler but,\" Matt smiled, \"thank you, baby.\" Her husband was terribly self conscious about his stomach. Laura shook her head and took a drink. For once she was the one with body issues.\n\nThey went about the rest of the dinner preparations together. They worked well in tandem, each had their own job and were part of the whole. Laura served food on plates and Matt carried everything to the dining room table. He lit the candles and turned the dimmer switch down low. It was all part of foreplay. Even like this, Laura felt the tight grip of anxiety in her shoulders. Tonight her husband was going to reject her for the first time. No amount of peach cobbler was going to change that.\n\nMatt asked about her day and Laura was purposefully evasive until she changed the subject. Instead, they talked about their fantasy road trip again. Laura realized as she set peach cobbler down in front of Matt that this was what they talked about when they gave up on getting pregnant; almost like it was the consolation prize. Sorry, you can't have a baby but at least you can take the summer off.\n\nMatt could almost read her mind and as he scraped up the last of the sticky peach filling, he said, \"You never told me how that last visit to Dr. Rampling went.\"\n\nOh god, Laura's pulse was thunder in her ears. Her heart raced and her hands were clammy. She didn't lie to Matt, she never had before. She hated this. In fact she kind of hated the doctor for putting her in this position to begin with. \"It was fine,\" Laura said over her racing pulse in her eardrums. Technically the appointment had been fine. It was only the aftermath that had been a problem.\n\nHe rose from his seat and came in close. His lips almost touched the place where her pulse was a drumroll. Laura wondered if he wouldn't know just from the echo of it there that she was lying. \"So is tonight business or pleasure?\" Matt asked in his bedroom voice.\n\nIt was the phrase that he'd started using with the IVF treatments; business or pleasure? Were they having sex to make a baby? That meant that she had to have the right temperature and the calendar had to be on the right day. It also meant that it had to be fast and Laura had to keep as much of his ejaculate inside. It was passionless, sterile. They didn't even look each other in the eye and Laura wondered if that's why it never worked. Business sex. \n\n\"I'm not on any new treatments,\" Laura whispered. It was true, it wasn't new. The dick had already been there for days and she sure wasn't getting pregnant with that front and center.\n\n\"Yay!\" Matt's eyes sparkled and Laura could tell that he was half hard in his pants at the mere suggestion. \"I'm going to put the dishes in the dishwasher and take a quick shower,\" he swept Laura's hair off her shoulder and kissed that also. \"Get ready for all the moves,\" he told her with a smirk and cracked up at his own joke. His only real moves were with his tongue but for all these years, those had been all the moves Laura needed.\n\nShe kind of laughed but her heart wasn't in it. After all of that business sex, all of the fast, quiet missionary position that neither of them enjoyed, now she was about to spring one more thing on him. \n\nWhat was the breaking point? It terrified Laura to think she might find out.\n\nTell him now, she thought. Tell him now when they were still downstairs and he hadn't accidentally reached under her dress. Tell him before he grabs something fleshy. But she just swallowed it down and said, \"I'll be ready.\"\n\nOnce she was in the bedroom, Laura discovered that she had broken out in a cold sweat. Dinner wasn't setting well either as she imagined all of the possibilities. She paced back and forth and thought about just putting a long sweatshirt on again and telling him she had cramps. That was always sure to spoil the mood. But Matt kept track of periods better than she did since they'd started business sex. How much longer could she hold him off before her sweet husband got suspicious?",
        "Laura sat on her side of the bed and was still lost in contemplation when he walked out of the shower. Matt wore a towel wrapped around his waist and he had an obvious hard on for her. What was it about these penises? Laura almost laughed because seeing his pulse under the towel had made hers stand up and notice, as if it was saying \"hi\" to an old buddy.\n\nLike they were high fiving, Laura thought and giggled.\n\n\"What's so funny?\" Matt asked with a smile on his face as he approached the bed. \"You're so beautiful, baby,\" he murmured. Thankfully, he didn't even give Laura a chance to answer but she understood why. The dick seemed too warm and the need too immediate to do anything but steadily move toward its goal. \"Dinner was delicious,\" Matt was close. His hands were in her hair and he eased her back onto her pillow. \"I've been thinking about making love with you all day,\" her husband whispered between soft, languid kisses to her lips. A word, a kiss, lingering and warm and he tasted like peaches. Sometimes Matt would spend an hour just studying her mouth with his own, as if he needed to memorize her taste.\n\nHis tongue slipped along Laura's upper lip and then licked its way to the tip of Laura's tongue. This kiss, this gentle melding of their mouths together, this was Matt's bedroom kiss. The one where he seduced her mouth with the same movement that he'd do on her clitoris later. That press of his tongue, the push into the meat of her tongue, the flick up and then the slow release. Matt knew that motion would drive her crazy, it always had. At the moment, he had no idea what was happening under her pink dress.\n\nIt drove her dick crazy too.\n\nLaura sighed when he released her. She held her eyes closed tightly, she squeezed them hard and hoped that maybe, just maybe it would all just be a bad dream. Nope, there it was. It tapped her hip and dribbled something sticky in her pretty, white lacy panties.\n\n\"Let's get this dress off, honey,\" Matt reached around and found the tab of the zipper. He tugged it down. \n\n\"Matt,\" Laura put her hand on his forearm, her left hand where her wedding ring sparked in the light. \"Matt, hold on.\"\n\nHer husband pulled down the bodice of the dress and let out a little growl of impatience. Then he chuckled as he slid her arms out, free and bare and his dark eyes traced Laura's nipples in the front of the sheer white bra. \"You remembered,\" he bowed his head and kissed his way down her d\u00e9colletage to the white bow at the center of the fabric. \"I thought I saw your nipples at dinner. Oh baby, you know I love this bra.\" He said it in a grateful voice, like she'd given him more than he could ever thank her for.\n\nThe dick loved the attention on her nipples and Laura told herself to stop him, to say something. It was getting way too close, he was getting too close. But his kisses on her cleavage and then his tongue and teeth on her pink buds made the cock lurch and throb in her sundress. Jesus, she was a wet mess in her underwear. Laura's dick streamed precum constantly, a river flowed from the slit. \"Honey,\" Laura whispered, \"honey, wait a second.\"\n\nMatt looked up and his tongue was out. Her husband had a greedy look on his face as he licked her through the clingy fabric. \"The only thing better than this bra is no bra,\" he said in the deep voice that he usually reserved for when he was inside her. He nibbled at her flesh, just the edge of his teeth on her buds and Laura didn't want to stop him. The dick really had a mind of its own and seemed to throb with a pulse in her panties.\n\nMatt reached beneath her and unhooked her brassiere. Once her breasts were free of the underwire and bounced and settled into place, Matt was too hard to keep the towel on any longer. \"My love,\" he murmured as he moved, naked and warm, to crouch over Laura's body. He sucked on both nipples and he pressed Laura's breasts together with both hands. He wound his skilled tongue back and forth over her aching nipples and Laura couldn't help but want more.\n\nMatt settled into her body and caressed her ardently. He pulled Laura into his fleshiness and his soap smell and his mouth possessed hers, suddenly and deeply. His tongue slipped over and around hers and Laura sighed inside him. Matt did the little flick, with just the tip of his tongue, the flick that he'd do on her clitoris in just a moment. Or so he thought. The dick loved the way his tongue felt and it leaked and wiggled and this time, Matt felt it squirm between their bodies.\n\n\"Wait,\" he withdrew his tongue and stared at Laura, his dark brows drawn together. His forehead wrinkled with his confusion. \"What's that?\"\n\n\"What's what?\" Laura asked but her cheeks were on fire as the shame washed over her. God, he was going to find out in the worst way possible that she had a cock. Naked and hard and kissing her, Matt was sure to be furious. To make it all worse, Laura's cock was substantially larger than her husband's. At the moment, she couldn't have felt worse about being the bigger man.\n\nThe cock jolted again, like it was answering for her. \"That,\" Matt had jumped off Laura now and sat, his own dick soft and defeated as he pointed at the obvious lump in Laura's dress. \"What is that?\" \n\n\"Matt, I'm sorry,\" Laura felt the tears in her eyes, hot and ashamed and turned on all at the time, she reached for him with both hands. She felt like she had to beg at this point. \"I didn't know how to tell you.\" Matt was livid. He was pale and his eyes were angry and he grabbed the dress roughly and jerked the bottom up to her waist. \n\nThere it was in all of its pink, veiny glory. The cock had escaped from Laura's panties and drooled a sticky puddle of need on her hip. Her husband just glared and with his hand, he just pointed. He was lost for words and Laura knew exactly how he felt.\n\n\"It's temporary,\" Laura started and her voice wavered. Her tears could no longer be held back. \"Dr. Rampling says it's just from this shot of hormones he gave me.\"\n\n\"Dr. Rampling?\" Matt shouted. He had jumped up from the bed and it felt like he couldn't get far enough away from Laura now. His eyes were huge and hollow. Even when he'd given her injections, her husband had never looked this terrified. \"I thought you said nothing happened at your last appointment?\"\n\nLaura looked down at herself and covered the dick with her dress. She couldn't look at it anymore. \"Well nothing happened except this,\" she wailed. She was full blown crying now and her voice shook as she explained. \"He said it's an experimental treatment and that it's worked for other women when the IVF didn't work.\" Laura hugged her knees and drew up into a ball. With that look on Matt's face, it was highly unlikely that he was going to hold her. \n\n\"Well I hope that motherfucker can afford to lose everything he's got when we sue his ass,\" Matt said in a hard voice that Laura was unaccustomed to hearing. That was his pissed voice and he never used it with Laura and rarely with anyone else. \"How is that thing temporary?\" he demanded and he said thing with contempt and Laura just cried even harder. \n\n\"I don't know,\" she said with a groan. Laura couldn't even bear to imagine the rest of her life like this. \n\n\"How are we man and wife when you have that?\" Matt threw his hands up. His own dick seemed to have almost disappeared entirely. It must be disgusted and fed up; his body couldn't get far enough away from Laura.\n\nLaura shook her head and whispered, \"I don't know.\"\n\nMatt opened a drawer and pulled on an old gray pair of sweatpants. Like Laura, he too seemed to need to cover his body and hide away from all of this reality. Once he was covered, he grabbed his pillow and paused at the door, his shoulders slumped in defeat. \"I'm going to sleep in the other room,\" Matt said quietly and Laura let it sink in. He'd never slept in the guest bedroom, never in ten years of marriage.\n\nLaura realized, some time in the middle of the night, that she hated sleeping alone.\n\n***\n\nThey had avoided each other, quietly and politely, for three days. It was Friday afternoon and Laura wondered if her husband would spend the weekend hunkered down in the guest bedroom. The queen sized bed was big and lonely without him. The empty space was cold and she spent too much of the night holding her hand out, waiting for Matt to take it.\n\nMatt sent the first text since their failed date night. \"Can we talk tonight?\" he asked and Laura felt her heart flutter in her chest. Even her new dick had been depressed all day. It had been mostly soft and warm, tucked away like it didn't want to talk to anyone either. It was still a nuisance as it bounced in her panties and her balls always in the way. No wonder people said that men thought with their dicks, Laura thought. Dicks insisted on getting in the way of everything.\n\nAnd horny! Even now with her mostly sagging cock, the ache never left. Jesus Christ, Laura had never wanted sex so much as she had since the cock had become a part of her. Without a willing partner, Laura didn't even know how to pleasure herself. She was almost scared to touch it. What would happen if she stroked it?\n\n\"Yes please,\" she responded quickly to Matt. She didn't blame him for being upset. Any other husband would have probably left her already. Dr. Rampling hadn't even called her back since Laura had started leaving tearful messages with his answering service. \n\n\"You want pizza?\" Matt asked and Laura smiled. Even now, even with this new disruption of their marriage, Matt was so considerate. He was going to be a good dad one day, hopefully.\n\n\"That would be wonderful,\" Laura replied. So it was date night part two but this time, everything was already on the table. Laura took a shower before Matt got home but she didn't bother shaving or applying any makeup. What for? The last thing Matt wanted to do was look at her sexually.\n\nOnce he was home, the difference was immediately obvious. Matt smiled at her but there was no kiss. He sat on the far end of the couch with his pizza and he seemed to need the middle cushion as a dick free zone. \n\nLaura chewed and swallowed and thought that being able to eat carbs almost made having a cock acceptable. She murmured, \"Thank you for bringing home dinner.\"\n\nHis standard reply was, \"Anything for my girl,\" but now he just nodded. The tenderness was definitely gone, she had been demoted from wife to drinking buddy and pizza companion. \"I guess it's still there,\" he said as he eyed Laura's crotch suspiciously. \n\nLaura nodded and felt that her mouth had become a flat line, a disappointment they both shared.\n\n\"So what did the doctor say?\" Matt asked with his mouth full of pizza. Laura realized, like this, with his feet up on the table and the space between them, her husband had returned to his uncouth mannerisms that he'd tucked away since they lived together. At this point, it wouldn't surprise her if he belched.\n\n\"He hasn't called me back yet,\" Laura winced and wondered if he was going to yell at her.\n\nMatt reached for more pizza and nodded. \"Probably scared shitless,\" he said and with a string of cheese on his chin, added, \"that motherfucker.\"\n\nLaura giggled. Matt never talked like this to her and considering what had happened, at least Matt was being funny about it. \"Maybe I'll call him that when I leave him the next message,\" she said. It was the first time since she'd woken up with this thing between her legs that she'd even come close to laughing.\n\nMatt asked, \"This is really weird for you, huh?\"\n\nLaura set her empty plate on the coffee table. \"God, it's so weird! I mean, it's there all the time!\"\n\nMatt cracked up. \"You mean, you don't think about it all day when you have a pussy?\" \n\n\"No, not really ever,\" she shrugged. \"I don't see my pussy.\"\n\n\"Did you figure out peeing?\" her husband gave her half a grin. \"I mean, I noticed that the lid was up in the bathroom and you never let me do that.\"\n\n\"I guess we have new house rules,\" Laura said and then bit her lip. God, she wanted to kiss him right now, more than she could remember wanting to for a long time. It wasn't that Laura didn't enjoy kissing her husband, she always had. Maybe it wasn't until now, this very moment, when she knew that he wouldn't want to kiss her, that she longed for it. \"I just can't think straight anymore, honey,\" Laura mumbled.\n\n\"Well, you jerk off, right?\" her husband asked with a twinkle in his eye.\n\nLaura shrugged, \"No, is that what I'm doing wrong?\" \n\nMatt was taken aback, \"Wait, wait, you've had a dick for a week now and you've never jerked off?\" He shook his head and looked like he might laugh, \"Honey, no wonder you're so upset.\"\n\n\"Yeah?\" She murmured and clenched her hands together. It seemed like if she started touching it, there was no way to know what might happen. The cock was a wild card.\n\nMatt assured her, \"Why do you think guys jerk off all the time, baby? We can't think right if we don't do it. You know,\" he stretched and clasped his hands behind his head, \"it's like maintenance.\"\n\n\"So how often do you?\" Laura asked and made the international gesture for stroking a dick.\n\n\"Every day,\" Matt said.\n\n\"Even when we make love?\" Laura was stunned. She had assumed that their twice a week schedule of sex, at least when babymaking wasn't the primary goal, had been plenty for him.\n\n\"Yeah honey,\" Matt finally admitted it and Laura felt like it was new territory that few wives ever know about. That men, even good, faithful, loving husbands, are primarily beasts and dicks make it almost impossible to be sated. The wonder of it was that they were able to walk around like this and mix with polite society. \"Especially when we make love because I need to get the first cum taken care of so that I can concentrate on you.\" \n\nJesus, here she'd been thinking that Matt just wanted to know if it was date night because he wanted to look nice for her. This whole time, he had an ingenious strategy. Laura shook her head and wondered if she hadn't just been brought into a secret club and now had been given the key to something mysterious and primitive. \"Okay, so how do I do it?\" Laura asked.\n\nMatt made a face. Apparently they were close to the line but Laura needed guidance. \"Stroke up and down. It's not complicated. Not like girls,\" he added and it seemed like a jab. Laura was no longer a girl, was she? She should be able to figure out a cock.\n\n\"Show me,\" Laura asked in a voice that ached. She'd never felt farther away from him and she'd never wanted to be closer. \n\n\"Laura, come on,\" Matt whispered, his cheeks were pink and she couldn't figure out if he was angry or ashamed. Suddenly there were so many more words unspoken between them. \"You'll figure it out.\"\n\nLaura's chin trembled with the tears that she'd been holding back since before the dick ever happened. Ever since she'd discovered that getting pregnant was difficult for her, Laura had felt like her emotions were a roller coaster. Here it was, something that women were just supposed to do naturally, and it seemed to be out of reach. She had been out of control of her whole body. It was all mysterious and had felt like a conspiracy. The dick was just the straw that broke the camel's back. Now all she wanted was to forget about it for a few minutes. \"Come on, please,\" she begged Matt. \"Help me.\"\n\nMatt had never looked at her like this. Matt had always been eager for her hands and her kisses. He couldn't get close enough to her, couldn't touch Laura enough and now, he eyed her with something that looked like suspicion. \"Alright,\" he said it just above a whisper, relinquishing his self imposed rule not to be in close contact with Laura. \"God, this is going to be weird.\"\n\nLaura watched as her husband opened his belt and unzipped his pants. Her eyes roamed greedily over his body. All of his nakedness so close and yet, so far. She thought it was weird because after all this time, all of these years of intimacies, they'd never masturbated in front of each other. With or without the presence of a dick, it had never even been discussed. Even though they'd made love again and again, they both kept their own secrets. They both had their own hidden pleasures. He pushed his pants and his underwear down to the floor and Laura followed suit. \n\n\"Jesus Christ, it's a big bastard,\" Matt muttered, referring to her cock. He seemed to be almost curious about it now and he sounded anxious when he asked, \"Will you take your top off for me, too?\" \n\nLaura slipped the sweatshirt off without any hesitation. The bra was gone in two easy flicks of her fingers. There was no seduction in this, this wasn't for anything but the most necessary of actions. She had to get her head right. The relief was a necessity of life. \n\nThe dick was already hard. The pink girth was too hot, almost sweltering between her thighs and the head was almost red. It was uncomfortably thick and swollen. It dripped Swollen down her leg and Laura was scared to be this horny.\n\n\"You want to watch porn?\" Matt asked. His voice was nervous, it wasn't his usual bedroom voice at all. Of course, Laura reminded herself, he probably needed this as much as she did. Maybe even more.\n\n\"Porn is stupid,\" Laura said with a shrug.\n\n\"Yeah, it usually is,\" Matt told her, \"but I bet you'll like it more now.\" He didn't need to finish the thought. Now that she had this extra limb, this needy flesh that had a will of its own. This thing that made her stupid and powerless in its grip. \"You need lotion though,\" he reached into the second drawer of the side table and produced a bottle.\n\nLaura put her hand out and felt the lines on her forehead furrow. Right here in the living room? How often did her husband need to take care of business here that he had a special bottle of lotion just for jacking off? Wasn't she taking care of his needs, or at least most of them?\n\nMatt pumped lotion into his own hand and set the bottle on the coffee table. He squished it around, between his fingers and murmured his instructions, \"Warm it up. You don't want it to be cold.\"\n\nLaura did as she was told. The dick pulsed and strained for her touch, as if it knew what she was about to do and it couldn't wait one more second. It was so demanding. She watched her husband as his right hand moved to his dick. His penis was only half hard. His lovely, familiar dick, the one she'd seen a thousand times, maybe two thousand. But she'd never seen it like this. \n\nMatt touched himself with his sticky, right hand and the sucking, liquid sound of flesh and lotion was loud as he held his dick firmly at the base. He closed his eyes and his breath came deep and slow. It sounded like he was about to whisper something dirty in her ear. Laura thought Matt doesn't say those kinds of things though, does he? Maybe they really didn't know each other at all. Or maybe he had to think about someone else now that Laura had the penis.\n\nShe wouldn't cry though. She wouldn't cry and she wouldn't torture herself because, Laura thought as she spread her legs and settled into the couch, she thought about other people when she masturbated too. Again, it was just nothing that they spoke about until now. \n\nLaura felt her balls there between her legs. They were full and tight in the drawn up sack. There was a twinge, almost a pounding down in her balls, impossible to ignore. Everything was hot and insistent. \n\nMatt eased his right hand up from the base to just under the soft, mushroom shaped head of his dick and then back down. Laura did the same.\n\nMatt reached between his legs with the left hand and cupped his balls. He kneaded them, slowly, jostling his testicles and then sighing with contentment as he caressed them. Laura did the same. She felt the pleasure there, the balls weren't just these annoying, dangling bits of flesh after all. They hummed with divine sensation and heat and need and she tugged them just a bit as she followed along with the hand. ",
        "Matt stroked up and down, Laura stroked up and down. Matt sank his head back on the sofa. His mouth was open and his breath came from the place that panted and moaned when Laura rode him. Laura followed along.\n\nHis hand picked up the tempo and the sticky, squishing noises got louder as he moved his right hand faster. She saw the line of muscle in his thigh flex as he pushed his ass up. Laura did the same. Her dick loved what she was doing, the feel of her hand, the soft coating of lotion giving it a jelly bath and the firm squeeze of tight flesh could be a mouth or a pussy.\n\nGod, Laura's face flushed and her eyes got big as she realized that a pussy would feel exquisite on her dick right now. In fact just thinking the word pussy sent an electric charge down her spine that tingled all the way to her toes. Yes; a tight sheath of flesh, snug and wet and fucking her up and down and unrelenting with the tempo. Rocking her back and forth with lightning fast jolts of electric need as she clung to the couch and let the hedonistic kaleidoscope of sensation take control.\n\nMadness. Total and complete abandon and now, as Laura picked up the pace to match Matt's tempo on his body, she realized that the precum served as lubricant for her hand and she squeezed her balls a little more.\n\n\"Fuck,\" Matt muttered and straightened his legs out in front of him. His toes were still in socks but Laura knew from watching him all these years that he pointed his toes when he was about to orgasm. \n\nLaura followed suit. With her thighs pressed together like this, she could feel it in her balls. All compact, so full of fluid and need and the desire for release. Her balls were smaller and bigger all at the same time and so full of cum that it hurt. Her cock was huge, overflowing and the vein that ran down the full length of her shaft pulsed with another heartbeat. It was a needier pulse, it was something primal, something desperate.\n\nShe pointed her toes and bit her bottom lip hard to keep the sound inside. Her cock drooled and thumped and the exquisite pleasure just climbed higher and higher. It felt like a thousand of her girl orgasms had all come together and quivered, just there, just on the precipice. The sky should break open and there should be a torrential downpour. \n\nMatt looked over at her. Their eyes met and it was his crazy, wild eyed orgasm face. The one that seemed too hungry and too lost to understand anything. The one that always clung tightly to Laura's hips and his lips would be wet and sometimes there was drool there on his chin. \"Baby,\" he whispered and jacked up and down faster and faster. His forearm was taught and Laura's was too. She trembled with passion as her cock drummed in her tight grip.\n\nMatt looked down at her cock. There was no denying it, no way she couldn't notice. Her husband stared at her thick, pink juicy dick and pointed his toes. \"Baby,\" he said again, hoarse and far away and somehow begging for it. \n\n\"Fuck,\" Matt cried out and with that, the first creamy stream of his orgasm shot out, like a white rocket on his belly, all the way to his chest.\n\nLaura gasped as she spurt as well. It was torn from her body. It was pure heat and her balls were little beads and the shaft convulsed as the ecstasy of relief washed through her body. If her girl orgasms came in waves, this was a fucking typhoon.\n\nMatt continued, gush after gush, and moan after moan. His climax coated his belly and thighs, it dripped down the couch cushion and finally rained on his hand. Laura felt as if there was no end to her orgasm. Her thick droplets of cum covered her nipples and milk ran in rivulets down her breasts and belly. Each spurt got weaker and weaker as she was finally almost empty. Now all she could do was quiver. Laura's thighs were weak as the last of it pumped out and she moaned.\n\nSpent. Empty and used up, she was just a husk of a human being. Laura suddenly knew why Matt was asleep sometimes before she had even disengaged. The contentment was complete and overwhelming and Laura released her softened cock as she closed her eyes.\n\nFrom somewhere far away but really just two cushions over, Matt asked, \"Doesn't that feel better?\"\n\nLaura thought yes it did but she couldn't talk about it.\n\n***\n\nJacking off was amazing. \n\nAfter watching Matt the first time, Laura had taken things into her own hands. The next morning, she'd masturbated in the shower, slow and easy, with one hand on the wet tile for balance. She had used the hot water instead of lube and it was perfect on her cock. She had touched her nipples with her left hand while she stroked with a firm grip and it sent shivers of delight through her whole body. The orgasms were delicious and it was convenient for washing up afterwards.\n\nBy the third day, Laura decided that she was kind of a genius at jerking off. She had discovered all kinds of naughty, amazing things during her experiments. She liked to watch porn after all. She especially liked porn when she was on all fours. Laura would watch and stroke and imagine big dicks fucking her hard from behind. She had even been so bold as to slip her old dildo, greasy with extra lube, up inside her asshole while she masturbated. That had set off a chain reaction that had resulted in an explosion of cum, spurts that came with peaks and valleys and she screamed until she lost her voice. Laura had taken a two hour nap afterwards and decided that she'd have to save the dildo for times where she had the afternoon to spare.\n\nIt was like the whole world had become a carnival of deviant delights and perverse pleasures. How had she not noticed all of it the whole time she'd had a pussy? Laura had to admit that if she had one regret, it was that she hadn't explored her body like this before when she was just a sumptuous, bare, delicious pussy and a pair of glorious tits. Fuck, just saying something like that about herself was so demeaning to herself as a woman, as if she were just meat. But her cock loved being meat on a stick and it preened and pulsed. It wanted to be on display. It wanted all of her attention and frankly, everyone else's too. \n\nTonight was going to be tricky, Laura told her reflection. She'd been avoiding everyone. She'd even been avoiding Matt since she'd discovered how much fun she could have with her own body. Laura was obsessed with the dick and anyway, he seemed relieved too. They hadn't spoken of the masturbation lesson and he seemed to have assumed that he would take care of himself and she'd do likewise. He didn't sleep in the guest room anymore but they never cuddled. Laura kept her dick to herself in sweatpants. She was always a little surprised when she woke up with morning wood but she'd begun to be pleased about that.\n\nBut Rosie, her best friend, wouldn't take no for an answer anymore. Laura had made excuses about a cookout and then straight up lied about the book club. Rosie had declared that tonight, they were having a girl's night. \"Or I'm going to assume that Matt actually has you tied up in the basement and I'm calling the cops on him.\" \n\nThe message had made her giggle and Laura realized that it felt good to laugh. Everything had gotten so serious since the dick had popped up and Laura could use a night off from all of it. Like life was normal, which seemed like a word that no longer applied to her. She twisted her mouth up to one side before she slicked it with gloss. Rosie knew her so well, Laura sighed and looked down the front of her body. She was wearing a loose, long blue dress that should keep her cock a secret but Laura felt like it was still so obvious.\n\nShe hadn't explained it to anyone but Matt. The dick had become her dirty, little secret, well, actually a big secret. The problem was that Rosie was good at ferreting out secrets of all kinds.\n\n***\n\nRosie swept Laura up in her arms as soon as she stepped inside her best friend's house. \"I was starting to think you guys had joined a weird cult or something,\" her girlfriend said with an infectious laugh. Rosie took the bottle of Cabernet that Laura had brought and nodded. \"Good, good, this is nice,\" she grinned. \"Come inside.\"\n\nRosie led Laura to the living room and Laura blushed as she realized that she was watching the sway of her best friend's hips. Rosie had long, almost black hair and it was loose and curly. It brushed her back with each step of her bare feet on the cool ceramic tile and Laura felt like the volume had been turned up on all things sensual. \n\nRosie always complained about her bottom being too big and now, suddenly Laura noticed it. All the other times Rosie had asked her about it, Laura had glanced and shrugged and said it was fine. Now, Laura thought it was actually exquisite and her dick shifted in her cotton panties, a perceptible movement in the fabric, like it had taken a completely new interest in her friend.\n\nDammit, she was such a pervert now.\n\nRosie launched into the conversation as if they'd been talking all the while, ever since the last time they'd had drinks. Rosie had three children and Laura knew that her friend tried not to discuss them lately, given Laura's inability to get pregnant. They were impossible to skip over them entirely though. The kids and her husband were the center of Rosie's life and tonight Laura wanted to talk about anything that wasn't about her. \n\nActually, Laura realized a couple of minutes into the conversation, that she wasn't really listening to Rosie at all. Her voice was just background noise as Laura stared at her full lips and big eyes.\n\nAfter the first bottle of wine was emptied, Rosie turned the corkscrew in the second. The gorgeous, black haired woman screwed up her face suspiciously. \"Somethings going on with you. I know you're not pregnant because you'd never be drinking but,\" Rosie looked her up and down as she withdrew the cork. \"Somethings different. You okay?\"\n\nLaura wondered if it was pheromones. Can women just sense the presence of cock? She remembered reading that women that live together sync up their periods but only if they live with a man. It was the easiest way to get them all pregnant at the same time. Even Mother Nature was a pervert. If women's bodies did this unconsciously, then didn't it make sense that Rosie knew without even seeing the change in Laura?\n\nLaura hadn't answered fast enough and Rosie snapped her fingers. It was a bad habit that her friend had. It was something she did more often the drunker she got when she couldn't think of the word. \"See, that's what I'm talking about. That look on your face. I knew something was up when you lied to get out of book club.\"\n\nLaura stammered, \"but I really didn't read the book this time.\" She felt naked and exposed, as if Rosie could see everything under her dress. Part of Laura, the cocksmith that preened and strutted about the living room and shook precum everywhere, wanted to show sexy Rosie what lay in wait for her between Laura's legs.\n\nRosie poured two more glasses of wine and snickered. \"Like anyone reads the books, Laura. You know damn well it's just our excuse to make margaritas.\"\n\nLaura had intended to go but when she got an erection as she thought about sitting in the middle of the women, she quickly talked herself out of it. What would happen if she were hard and horny with a group of friends? Jesus, hard and horny like she was right now for Rosie. \"You're right, I'm sorry,\" Laura admitted in a husky voice. It wasn't really an apology, it was like Matt's apologies that were just background noise. Laura was aching. The dick was throbbing and something inside her would say whatever needed to be said in order for Rosie to touch her dick. \"Something is going on. I just haven't told anyone yet.\"\n\nRosie's eyes sparkled. \"What is it?\"\n\nLaura took a large gulp of wine. It would help if she were a little less inhibited, especially since part of her wanted to mount her best friend right here on her couch. \"Well I went to see Dr. Rampling about two weeks ago and he told me about this new treatment for infertility. It's still in the testing stages and he warned me that there had been some side effects.\" Laura paused and Rosie took her hand for support. The dick wanted to push Rosie's soft hand down into her panties. \"So I am having some side effects.\"\n\nRosie shook her head and whispered, \"Oh my god.\"\n\nLaura set her glass on the table and took a deep breath. She raised the blue dress to her knees and watched as the thick lump in the front of the material shifted. She pulled it up higher, to her thighs and then higher. Laura closed her eyes tightly as she revealed the dick.\n\nRosie gasped. \"Holy shit,\" her best friend murmured. \"Jesus Christ, it's a huge dick.\"\n\nLaura nodded as they both stared at it. Her thick cock struggled to escape the confines of the lacy blue panties. They were soaked through around the aching head of her erection. The smell of her balls was now in the air. Her virile penis was alive and potent and full of juice and more than a little interested in her friend. \"It really is,\" she agreed.\n\n\"What did Matt say?\" Rosie still hadn't looked up at Laura's face. She was enthralled with the cock.\n\n\"He freaked out,\" Laura admitted, \"but at least he showed me how to jerk off.\"\n\nLaura's erection throbbed like it could hear and wanted her to know that it would love to be touched. Rosie shrieked and then giggled. \"Jesus, I don't know why that kind of scared me. I mean, I guess it's the biggest dick I've ever seen.\"\n\nLaura eased back further on the sofa and opened her legs to give her dick and balls some room. She gestured, \"Oh and I have balls too.\"\n\nRosie purred and said, \"I noticed.\" Her black haired friend hummed like she was immersed in a pleasurable thought and Laura felt the twitch between her legs. \"Can I take your panties down?\" Rosie wanted to know. \"You know, just to get a better look.\"\n\nLaura whispered, \"Yes, sure.\" She pulled the dress up, over her head. She was just being accommodating, she told herself. She was just making it easy for Rosie to get a good, long look at the big, pink meaty monster that Laura had. The biggest dick you've ever seen didn't happen every day and it should be appreciated. Laura raised her hips for Rosie's hands to slide under. She sighed as the woman's fingernails skimmed down Laura's cheeks as she removed the panties.\n\nRosie placed Laura's underwear on the coffee table and she whispered, \"Damn.\"\n\nLaura felt like she'd been running. Her pulse slammed in her throat and she couldn't catch her breath. This was the first time since the unfortunate accident that Laura dreamed that anyone might want her dick. Sure, her hand was great, her hand was wonderful, but what would it be like in someone else's hand? Rosie bit her bottom lip and Laura's eyes were riveted to Rosie's face. Laura studied her friend's full, red painted lips. There was that bit of stain in the center of her mouth from the wine. There was that glossy sheen where she'd just licked. \n\nWhat would it be like to feel Rosie's mouth on her cock?\n\nRosie asked, \"Can I touch it?\"\n\nLaura said, with a catch in her voice, \"Yes, you can.\" Fuck, she couldn't be thinking about this, with her best friend, could she? Laura gasped as Rosie brushed her shaft with the tips of her fingers, just a whisper soft touch. It was barely even contact and yet Laura broke out in goosebumps.\n\n\"It's so hard,\" Rosie remarked, \"so hard and so soft all at the same time.\" Rosie ran her fingers from Laura's sack all the way to the tip of her dick. Laura knew exactly what she meant. It was satin over steel, it was velvety, warm flesh over an iron core. It felt dangerous, with an almost feline energy that radiated from its center and yet, it was all pink and shiny. It was a profusion of contradictions and now, with her breasts and her hips and her feminine curves, so was Laura.\n\nLaura watched as a droplet of precum dripped from her slit all the way down her shaft. The liquid followed the trail made by the vein that shuddered with life and beat to its own relentless pulse. \"It is,\" Laura agreed and pushed her hips up. The dick hoped to entice Rosie to kiss it and Laura agreed with it wholeheartedly.\n\nJesus, it was almost impossible to wait. \n\nThis was why men would grab and grip and push your head down and thrust clumsily. Laura finally understood. The waiting was excruciating. The heat that radiated from between her legs was a fire raging, a storm brewing, a release that demanded the heaven of wetness and surrender. Her body was helpless as it clamored for sweet relief.\n\nJesus, Laura sat up suddenly and clasped her hands over her cock. She was seriously thinking about raping her best friend and the shame and the craving washed over her in equal parts. Even if that wasn't really rape, given the big eyes and the flirtatious kissing faces Rosie was making as she contemplated Laura's dick, it was still cheating on Matt. Even if Matt wasn't ever going to fuck her again, Laura thought she better figure this out before she did something she couldn't take back. Like fuck up a friendship.\n\n\"So that's what is going on with me,\" Laura said with a laugh and quickly reached for the underwear. Rosie seemed anxious to forget about the whole thing and Laura saw the blush on her best friend's face and wondered if later on, Rosie wouldn't masturbate to Laura and all of the missed possibilities.\n\n***\n\nLaura wasn't drunk but she was buzzed when she got home. She knew it when it took her more than one try to get her sandals off at the front door. She broke out into fit of laughter and almost fell to the floor. Laura slapped a hand over her mouth to keep it in. It was almost midnight and Matt was sure to be asleep. She'd better be quiet and get her unruly cock into the sweatpants and tiptoe to her side of the bed.\n\nThis was the way it was now. Her dick was banished to one side and Matt's banished to the other. How long could two people live like that and still be in love? Laura wondered but then decided to leave the sad answer to that question for another night when she hadn't drunk two bottles of wine and almost got her first blowjob.\n\nLaura was surprised to see her husband was still awake. He was awake and propped up on a pillow. Laura recognized the bleary look on his smiling face and guessed that Matt had a few cocktails as well. \"Hey honey, did you decide to have a guys night?\" Laura asked as she walked to the bed.\n\nHe looked good right now, she thought. Matt wore his old black workout shorts and no shirt. Maybe it was the light or maybe her husband was doing more sit-ups. Maybe it was just the dick talking but she wanted to touch him everywhere. Was it gay? Was she a gay man or was it just beer goggles or whatever kind of goggles you had when you drank a mid-priced Cabernet? Laura smiled as she sat on the bed.\n\n\"Not really a guy's night,\" Matt said, \"but I had some beers and then a couple of shots when I got home.\" His dark eyes sparkled, \"I had some time to think about you.\" He patted the comforter which meant he wanted her to come to him. The gesture made Laura melt inside; it was something Matt hadn't done since the appearance of the cock. \"About us,\" he added as Laura came close.\n\n\"That's good, honey,\" Laura said as she cuddled up close. He was warm and the sensation of touch was overwhelming. It was almost as if just his skin on hers was a sea of fingers on her body. He seemed to be touching her bare arms, reaching up, under the dress, delving into the panties all at the same time. Her anxious hard-on was back in full force and Laura wondered how long it would be until Matt saw it and turned away.\n\n\"It was good,\" he whispered into her hair. \"I realized tonight that I don't want to live like this anymore.\"\n\nOh god, Laura froze and felt her heart sink. There was a pain there, something that squeezed tight in her chest. Shit, of course, it made sense. Matt was such a decent guy, he had to get shit faced before telling her that he wanted a divorce, right?",
        "\"What does that mean?\" Laura asked as her whole body trembled.\n\nMatt turned toward her and wrapped Laura up in his arms. Like this, sealed up against him, Laura could feel as his heart raced on her body. There was something delicate that was about to break open. This was like the first time that he'd taken his pants off with her. He was nervous and warm and touched her like she might shatter into a million pieces. What was happening? \"It means I love you, baby,\" Matt whispered into her mouth.\n\nBefore Laura could melt or before she could cry or whimper to him that she loved him too, her husband seized her lips firmly with his own. This was a far different kiss from those early days. This wasn't like those tentative kisses Matt used to give her, as if he'd pull back just in case Laura changed her mind. These were possessive kisses. These were firm and toothy and he pushed his tongue inside her mouth and swept it over her tongue, as if to say that he claimed all of her.\n\n\"Matt,\" Laura whispered as her husband released her mouth and his breath washed over her face. He radiated desire and Laura could have cried. It felt so good to be wanted again. She had missed this so much. \"Matt, honey, I love you too.\"\n\nMatt tugged at her dress and even though Laura had a million questions, she didn't want to say a word and spoil it. She didn't speak, just raised her arms and felt the dress come off for the second time that night. Matt pushed her gently back on the pillows and Laura felt the cock strain and pulse to get at him. Laura closed her eyes and expected to feel him cave in and push her away. She wondered when he would roll her to one side so that he didn't have to see what had become of the girl he'd married.\n\nWhen Matt's firm hand reached for her erection, he cupped it through the panties. It was a grip. Her husband seized her cock and there was no mistaking the gesture. Laura gasped as he touched her with all the pent up desire that Laura felt down in her balls. This was a man touching another man and he had set her body ablaze. \"I can't stop thinking about your fucking cock,\" he muttered, as if he'd said it a hundred times to himself. Matt was somewhere between angry and turned on and Laura relinquished all control.\n\nHe hovered over her and his hands were everywhere. Matt reached under her and his breath was hot on her shoulder as he unhooked Laura's bra. Her breasts were bared quickly and the little material was tossed aside as one more impediment vanquished. Matt rubbed his head along Laura's cleavage. Her husband groaned and then rooted his lips along her areolas. He seemed to be blinded by lust. He was just hands and a mouth and Laura would be afraid of this if she didn't need it so badly. \n\nShe cried out with pleasure as Matt clamped his mouth firmly around one nipple and sucked her inside. His tongue did a dance. It was a slippery slither along her wrinkles. He lapped all the rigid hills and valleys of her pink skin and he made her even harder as he supped. Her love, her lover with the amazing tongue, Laura watched him with his eyes closed. His black lashes touched his cheek and the swallowing noises that came from his mouth were wet supplications.\n\nHer husband's talented tongue, Laura couldn't help but push her hips up and groan as he brought her nipples to sizzling points. Where would that beautiful mouth of his be next? \n\nWhen he pulled away, a clear line of spit connected her nipple to his lip. It was like spider web and her husband licked it up with a flick of his tongue. For a moment, their eyes met and Laura knew with that look, tortured, aching, everything that Matt had been thinking. His fingers trembled as he hooked them around the waistband of her panties and he seemed to cling, as if he was holding on for dear life. Part of him didn't want to take Laura's panties down, part of him wanted to run away to the guest room and close his eyes. The other part, the secret part that Laura was just about to meet, couldn't wait. It was the part that wives rarely knew about their husbands. The dirty part of her husband had wanted to gobble her dick down and feel her cum in a salty torrent of heat and pain as she savagely fucked his mouth wide open. He'd wanted that since the very first time he saw her cock. The look was a confession. \n\nLaura waited as Matt took her panties down to her ankles and impatiently threw them across the room. He bowed his head and pressed hot, desperate kisses to Laura's center. He kissed between her breasts and then down to her stomach as his hand gripped her dick tightly. Laura sighed and felt herself swell in his strong hand. His fingers were rough and his skin was soft and the dick luxuriated in his caress.\n\nMatt groaned as his mouth continued its journey down Laura's body. He was fighting it. The two parts of him still hadn't agreed even now and Laura trembled on the precipice. He kissed her stomach all the way to her hips and it felt like all the while he was staring at the dick in his hand. He almost ready to panic, he was almost ready to swallow her whole. Laura's legs shook as the other part of him took his place between her thighs. His breath was warm on her sack. It bristled and drew up tight immediately.\n\n\"I have been thinking about your cock,\" Matt confessed as he stroked Laura up and down and then once more. Fuck, he did it so well. Laura whimpered with her dick in his hand. He knew exactly what he was doing. She supposed that since Matt had so much more experience touching a dick than she did, she ought to just lie back and enjoy every second.\n\n\"Actually, I can't get it out of my head,\" he whispered and turned to Laura's dick, as if he were addressing it directly. \"I cum when I think about it,\" this was almost painful for him to say and her husband's chin trembled as he forced himself to face the beefy head of her dripping dick. \"Oh god,\" he almost cried but opened his mouth and kissed her enormous, mushroom head with his tongue. \n\nIt was exquisite. Matt drug the wet tip of his tongue along the indentation on her bulging tip and then lapped up some precum right from the source. Her husband moaned as his tongue lingered on Laura's slit and his breath bathed her new limb as he licked her sloppily all around the head.\n\nHe gave up. He gave in. Laura felt it in his shoulders, a total relinquishment and when he opened his mouth, it was to take his wife's big dick inside.\n\n\"Matt,\" Laura cried out his name and curled her fingers into the comforter as the wet heat of his mouth encircled her. God, it was perfect. It was sloppy and wet inside. His mouth was full of saliva and his tongue was a tease and his lips were sweltering and tight. It was a nest of warmth and tenderness and sensation and every tug of his mouth brought a cascade of sensation that rippled down her body.\n\nMatt cupped her balls and kneaded them carefully, back and forth in his hand. He seemed to be almost studying their weight and composition. He caressed the satin skin of her sack as he wrapped his lips tight around her shaft. Her husband began to work his way back down her aching cock.\n\nHis tongue danced along her dick and everything tingled with light. It was ecstasy like this and Laura moaned. She never wanted it to end but every breath on her body was almost too much. She could feel the build up in her balls, maybe even deeper than that. Maybe that throb was up inside her ass. It came from somewhere that had never been touched. It had never even thought of and now, now, deep inside her husband's sweet, luscious, gifted mouth, she was going to shatter into a million pieces. The eruption trembled just under the surface, like a volcano, too much pressure to do anything else but burst.\n\n\"Matt,\" Laura couldn't speak, but she mouthed his name over and over. It was a word of pleasure now and it had mesmerized Laura. The back and forth movement of her hips as she made love to his wetness. His velvety lips and the cries that she could feel vibrating in his throat that he never, ever released. Laura clenched the bedding below her and held on for dear life as the spasm gripped her legs. She pointed her toes, or rather they pointed themselves. Nothing was under her control, it was all Matt at that moment.\n\n\"God!\" Laura sobbed as the first spurt tore from her and entered him. Matt continued to suck. He drank her down. He held her cock between his lips and inhaled every droplet that she had there for him. If that wasn't enough, he looked up. As he gave her head, he looked Laura in the eye as he finished her off. Laura whimpered as she fell to the bed. Melted. Vanquished. Lost in the passion that made her whole body shiver. She'd never been so much in love with him as she was right now.\n\nMatt released Laura's soft cock and watched as it rolled lazily to snuggle in her loose scrotum. Her husband smiled and placed one last kiss on her center. His mouth grazed the line of blonde hair before he moved up to the pillow beside her. He looked tired now. His eyes were full of love and tenderness and Laura wondered if he'd been drunk at all or if that had just been the need. \n\n\"What did you do to me?\" Laura asked as she reached to rest her fingers at the center of his chest, right where his heart beat, steadfast and true.\n\nMatt raised his eyebrows. \"Well, honey, I believe that's called a blowjob.\"\n\nThey laughed together and Laura snuggled up close and wrapped her calves around his. \"Wow, blowjobs are the best thing ever,\" Laura said with a giggle.\n\nMatt sounded sleepy when he told her, \"I know.\" He kissed her on the forehead and Laura felt safe and loved and she'd missed feeling both.\n\nLaura continued though. It seemed like she had just made, quite possibly, the most important discovery ever. \"I mean, blowjobs are even better than jerking off,\" Laura added breathlessly.\n\n\"I know, honey,\" he whispered and wrapped Laura closer. Hip to hip, she was pressed against her husband now and Laura wondered why he wasn't rock hard. She would gladly suck his cock, deep and hard now. She'd never choked on his dick before but now that she knew the power of a mouth on a penis, Laura would be happy to worship him with grateful lips.\n\n\"Can I take care of you, my love?\" Laura asked tenderly and nuzzled him with the tip of her nose.\n\nMatt looked almost sad. His eyes were large and dark and glimmered in the light as he told Laura. \"I came when you did,\" and he held her so tight that their breath came in time. \"See what you did to me?\" he asked and there seemed to be so much more unsaid.\n\nLaura closed her eyes and thought, wow, he came in his pants? That hadn't happened in years. She thought that he must really like sucking the dick. Matt might have murmured, \"baby,\" but Laura thought it also could just be the beginning of a dream as she almost immediately fell into a deep, peaceful sleep.\n\n***\n\nIt was around 1:00 when Matt asked with a text, \"Should I bring something?\" It was date night again and tonight, Laura had no idea what to expect but she was fluttering inside anyway.\n\nLaura smiled warmly at her phone and touched the screen. \"Just yourself,\" she answered him quickly and added a heart.\n\nHer husband sent a smiley face and Laura went about the rest of her preparations. If there was anything that she made that Matt liked more than pork chops and peach cobbler, it was her pot roast and pineapple upside down cake. Tonight she was making both and she'd also gotten him a six pack of the beer he preferred over any wine. \n\nHer plan tonight was to take care of him, maybe she'd even call it seducing him. It was like they were dating all over again, except this time Laura felt like the man. She had become the suitor, the aggressor. She was the one who needed to make the effort and wine and dine him.\n\nAnything for that mouth, Laura thought to herself and then giggled. \n\nGod, she was such a horndog but she couldn't help it. She adjusted her half hard dick and thought about it again. Whatever she had thought about her husband's mouth on her pussy, which had always been amazing, his mouth on her dick had made her fall in love with him all over again. It was like their honeymoon except better because now, Laura could eat carbs.\n\nLaura was careful about her preparations as well. She had learned how to carefully shave all of her ash blonde pubes off, even with the cock in the way. She was especially gentle with the razor around her heavy scrotum. No sense in getting razor burn on her balls, she scowled as she wiped the blade around her shifting sack. She wanted them to be pretty. At least as pretty as testicles could be, Laura thought as she looked in the mirror. Her dick was lolled to the side. It rested halfway up her hip and dripped a little of her clear liquid down her leg. The dick was always ready, always in need of attention and just the thought of Matt's lips and tongue was enough to make it spring completely to life.\n\nLately, she was hard the minute that her husband walked in the door. As he casually walked around the house in those workout shorts, or even worse, in just his boxers, she couldn't keep her predatory gaze to herself. She wanted to grab him by the dick sometimes or maybe even pull him by the hair. She wanted to lead him to the couch and put him on his knees. She wanted to rape his mouth and fill him all the way to his throat with her seed. She wanted to feel gush after juicy gush of her thick, creamy semen in his sweet mouth. She wanted to feel her cock throb as her essence poured into his esophagus. She was sure that if his mouth was willing, she'd just stay hard for a second and maybe even a third orgasm. Blowjobs were the best thing that had ever been invented, Laura had decided. That was why tonight, she was going to make sure that Matt got his dick sucked like never before.\n\nWhat was good for the goose and all that.\n\nLaura put on another long, loose dress. It was flowy and black and lacy around her breasts. The dress almost looked like a nightgown and she'd found that this was the best way to approach her husband. With her dick out and obvious, he still couldn't help but grimace sometimes and Laura understood why. There had been times, before, when she still had a pussy that she was sick and tired of looking at his erection too.\n\nLaura slicked her hair into a ponytail. Whatever it was, maybe it was the hormones that had made her blonde hair grow longer and even thicker. Her nails had grown as well. Maybe whatever mysterious life force that was doing its magic in her body grew hair as well as penises. Matt liked her hair long. Tonight Laura would even enjoy it if he pulled and pushed and guided her by the hair. Anything, everything, she'd worship every inch of him and it was only just a little bit selfish of her.\n\n\"Oh my god, it's pot roast,\" Matt said as soon as he walked in the kitchen. His eyes were happy and they gleamed and Laura felt like it had been a long time since he'd had such a wide, open smile on his face. Her husband approached her with both hands open as if he'd been waiting all day to touch her. He held her face and kissed her passionately. Laura responded to him completely and melted into his eager mouth. There were his soft lips, that wily, perfectly wet tongue delved along the bottom curve of her upper lip and then teased her bottom lip as well.\n\nFuck, had Matt gotten even more skilled with his mouth since the blowjob or was that just her dick talking? \n\n\"It is,\" Laura murmured when his tongue lingered up along her jawline. He slowly traced a path from her mouth up to her earlobe. Jesus, every sensation, every touch of his warm breath awash down her neck was something that she felt down in her balls. Sometimes it seemed totally unfair for him to have this kind of power over her when he had to go to work. Laura just wanted to keep him in bed. \"And pineapple upside down cake,\" she added before she let out a little gasp. Everything was a slow motion kaleidoscope of sensation. It was a roller coaster of touch and impulses and vibrations that rocked through Laura's body. She wanted to feel them all.\n\n\"Oh honey,\" Matt said as he wrapped his hands in her hair, \"you're so good to me.\"\n\nThe dinner conversation was no longer about babies or even doctors. It seemed that it had permanently shifted to their summer vacation plans. Laura found no reason to discuss baby plans anymore, she just didn't have the heart for it. Dr. Rampling had never called her back to soothe her worry or give her any good news. In spite of all of her independent research attempts on the internet, all that had ever come up when she Googled, \"woman with dick,\" was porn. As far as she could tell, the dick might be permanent and there was no reason for them to discuss any other options. At least, as long as Matt wasn't going to leave.\n\nThey had mapped out a course and they had some definite ideas of stops along the way although there wasn't a real destination yet. Matt had found a few Air BNB's that he liked and as he wanted to get Laura's opinion. As her husband scraped his plate clean and licked the few cake crumbs from the corner of his mouth, he pointed to the picture in the magazine. \"We should definitely go to Montana too, babe,\" he nodded.\n\n\"We really are going to be gone for the summer, aren't we?\" Laura hadn't believed six months before that they'd ever go with work and all the scheduled, business sex.\n\nMatt pushed his plate away. \"I think we need this, Laura. It's like we're starting all over again.\"\n\nIt was a serious voice and Laura played with what was left of her cake. \"Starting over?\" She wasn't sure if that was good or bad. \n\n\"I mean, if this is what our lives are going to be,\" her husband put his hands out to her and Laura knew what that meant. How long had it been since she'd sat on his lap at the dinner table? She left her chair and melted into his body. He was big and comforting and soft and he smelled of soap and a trace of cologne and his manly musk. \"I mean, you're the one, baby,\" he played with the tendril of hair that curled by Laura's ear. \"You were always the one and dick or no dick, I married you forever. So maybe we need some time to figure out what that means now.\"\n\nLaura felt her husband's cock twitch in his pleats. It was pressed up against her curvy, round bottom. She could feel his hardness there as she moved her hips back and forth and now, Laura knew what came with that hardness. That incessant need, that calling that must be heeded, that rush of life force. It was impossible to turn away. \"I agree, my love,\" she whispered and Laura felt the twinge between her own legs in response. He was hard, she was hard. She wasn't hungry for cake, she was hungry for his dick and she decided to do something that she'd never done before. \"You're the one for me too, honey,\" Laura whispered words between hot, desperate kisses. She held him down with a rapid fire series of sticky cake kisses to his mouth. Laura left his lap and kissed down his shirt. Her fingers ripped at buttons and pulled at fabric. She was surprisingly strong now, especially when she was horny and Matt hadn't had time to do anything but watch and groan as he realized what his wife was doing. Undressing him, tearing off his clothes, unbuckling his belt and dropping to her knees between his legs. \"I married you forever too,\" Laura whispered as she unzipped Matt. She fondled his dick and cupped his balls and then peeled his pants down. \n\nMatt didn't try to stop her. He shifted his hips in the dining room chair. Laura heard the change in his pockets jingle as she pushed his pants to his ankles. It was just his boxers now. His black boxers, the ones that he usually wore for date night. He used to laugh and tell her that he wore those in case he got lucky. His erection had escaped and in her frenzy, Laura thought that it was beautiful. The head of his dick had popped over the waistband and it knew that there was nothing lucky about this. Laura bowed her head and kissed the head of his dick. His warmth and his scent rose to greet her. The satiny skin of the head of his cock was so soft on her lips. His groan from his belly, that animal sound, that need to mate and rut made her shudder. Her husband spread his beefy thighs even wider so that Laura might have access to anything she wanted.",
        "Laura tugged the underwear down as well and smiled to herself as she felt Matt push his butt up for her. He didn't question it and he didn't try to stop her. Matt didn't care about the reason why or anything other than his wife's lips and her tongue and Laura understood completely. Matt's dick strained to get at her mouth. Laura watched his testicles jostle in his small, tight sack as she kissed his cock again. Right there on his slit, a long, lingering, closed mouth kiss. Laura inhaled him and then repeated the kiss but this time, with her tongue.\n\nLaura looked up as she seized his erection with her right hand and closed her fingers around him at the base. It was a tight grip. Now she knew that it was exactly the grip that Matt used to stroke himself with. Laura squeezed as she looked him in the eye and licked his precum into her mouth.\n\n\"Oh my god,\" he called out in a shaky voice and his thighs flexed. Laura felt the tremor of want rush through him, she could taste his longing on his skin.\n\nLaura took her time and wet him thoroughly with her saliva. She soaked him with spit and let her eyes tell him how hungry she was for him. She had such a need for his cock in her mouth, down in her throat, as far as she could get him inside. Once her husband throbbed in her hand, Laura sank with her forehead pressed to his belly and took every slippery bit of his cock inside. She felt his balls graze her slick chin as she sucked him into her depths. She placed her small hands on his thighs as she drank him down.\n\nThe taste of his brine on her tongue was delicious. Laura guzzled it down and lapped her tongue around him. Hungrily, she pressed her mouth all the way to his hair. It was everything and Laura couldn't get enough. The bristly feel of him on her soft lips, the brush of it. The sensation of his balls, smaller and hotter and drawn up close to his body. The smell of his potent seed, almost ready to burst. The sound of his breath, charged and desperate. His whole body twitched with the delight of her. It was a tapestry of the erotic.\n\n\"Baby, oh my god, yes,\" her husband was barely able to speak. His hands wrapped around her ponytail seemed to express what he felt so much better than words. He pulled Laura's hair. He was rough and he pushed her mouth down hard. Matt's dick was in the back of her mouth, almost in her throat. He was almost too rough, it was almost enough to choke her. Just as Laura couldn't breathe and she felt the tear trickle down her cheek, he pulled back just in time to suck in enough oxygen to fill her lungs before he plunged down deep once more.\n\nLaura's dick loved it. The cock loved how rough he was, almost brutal. Laura's erection twitched as the wet, sucking sounds came faster and faster . Her saliva rained down his balls to soak the upholstery under him. Laura's dick leaked a constant stream of precum as he yanked her ponytail and fucked her all the way into her throat. Matt's thighs were rock hard as he flexed. Laura was sure that she could feel the thunderous beat of his desire there in the vein that pulsed on her tongue. \n\nHe loved her, that heartbeat, that passion, that fire that consumed everything else until they were one, just skin on skin that had melted together and couldn't be torn apart. His orgasm would seal them together.\n\n\"Fuck,\" he screamed and the sound reverberated and yet, with the gush of her husband's orgasm, Laura could only hear her own pulse. His sounds were muffled in the primal drumroll of need. Then there was the taste of him, hot and salty and musky and milky all at the same time. Then another beat of her heart and another spurt of Matt. He pumped and shivered and now his grip on her head had weakened and she could feel him spend and spend until he was almost limp under her.\n\nHer husband's dick was just a soft nub when Laura finished draining every last drop from his body. She looked up at him once more as he drew her head into his belly. \"Jesus Christ, Laura,\" he said with a chuckle, \"I don't know if I can walk upstairs.\"\n\nShe grinned and wiggled her eyebrows lasciviously, \"I'm sure you'll make it upstairs honey because there's more where that came from.\"\n\n\"Okay, okay,\" Matt put his hands out in surrender, \"I just have to catch my breath.\"\n\nOnce he did and the table was cleared and the dishes were put away, Matt walked with her, hand in hand up the stairs to their bedroom. At the landing, her husband turned Laura in a circle like they were dancing. As he brought her close, he whispered hotly in her ear, \"You know, we've never had anal sex.\"\n\nHe was right, they hadn't. Laura twisted her mouth up and contemplated the possibilities. It wasn't as if she had an aversion to the idea, she hadn't even given it any thought. He'd never asked and she'd never volunteered and up until this moment, that's as much as Laura had ever thought about giving her husband her anal cherry. They were at the threshold to the master bedroom when Laura asked him, \"Do you want to?\"\n\nMatt nodded, his dark eyes full of a longing that Laura just realized must have been there for much longer than she knew. His body was warmer suddenly, almost damp, and she knew that if she took another step and closed the gap between them that she'd feel the pulse once more. He was getting hard again just saying the words. Her husband must have wanted it for a long time. \"God, yes I want to,\" he told her with a sigh. Matt picked her up and carried her over the threshold, just like he had done on their wedding night.\n\nAs he placed Laura gently in the center of their bed, the wave of emotion came over her. Yes, just like he had on their wedding night. He'd surprised and delighted her that night too. Although Laura wasn't a virgin that night or the first time they made love, everything before that was such a distant memory, it might as well have never occurred. \n\nAnd tonight, she could lose her virginity all over again. He'd make her his wife, his newly taken, just fucked for the first time, wife all over again. Maybe that was also worth having a dick for. \"Okay, honey,\" Laura told him as she reached up and placed a hand at the center of his chest where his heart beat double time. \"We can do anal,\" she smiled as his eyes got big, like he couldn't believe how lucky he'd just gotten. \"Just get the lube,\" she nodded and pointed to the nightstand where they kept the thick jelly that they'd been sharing for their mutual jack off sessions.\n\nMatt hovered over her, on his knees. He had pulled up his pants before they cleared the table but he'd never buttoned or buckled again. Now the metal of his belt brushed Laura's hip as he took her face in his hands and whispered, \"I love you so much.\"\n\nLaura cooed and caressed him. Her body melted in his embrace as she responded, hardening and softening all at the same time. Such a man between her legs, her dick was rock hard and insistent and wanted to fuck right now. Yet, such a woman everywhere else, she wanted her husband's mouth on hers and his kisses. She wanted to feel Matt sigh into her while he undressed her. They kissed and it was the new kiss and Laura gave herself over to it completely now. It wasn't the kiss of husband and wife, one tongue delving and pushing and the other relenting and taking. It was the kiss of two men, eager, hungry, greedy and insatiable. They each sunk their fingers into the flesh of the other one as if they could rip each other apart with their need.\n\nMatt undressed as their mouths came together and teeth nibbled into lips. Laura loved these new kisses, these bites of ecstasy. They were like two snarling wolves and it was passion and love as well as violence. She got caught up in these kisses and only knew that he'd stripped for her as she felt his bare flesh settle into Laura's body. As Matt's soft belly sank into her and pressed against her cock, they both felt the tremor there between them. Laura was almost afraid that he'd change his mind. She was so hard, it was a little frightening. \n\nHe surprised her and kissed her even deeper. Matt pushed his tongue inside Laura's mouth and tasted her breath, he took her air. Laura was sure that he could taste the traces of his first climax there as well and he groaned as he sucked her tongue into his mouth. \"Take my dress off,\" Laura whispered when he'd released her.\n\nMatt pulled up and his thick fingers trembled anxiously. The buttons were difficult for him as he began at her throat. Laura felt him open the fabric little by little, from her throat to her breasts, breasts to her belly, belly to her cock. Matt growled a little when he felt her dick in the black, satin panties. Under the slick fabric, her dick waved at him. \n\nOnce the dress was open and Matt had tossed it to the floor, Laura put up her arms. \"Now my bra.\" She bit her bottom lip as her husband reached under her and unhooked the clasps that kept her round bosom in the confines of the matching black brassiere. Once the hooks had been opened and her breasts spilled out, Matt hummed with pleasure at the sight of her. Laura's nipples were deeply red and engorged, they ached for him like the rest of her. \n\n\"Can you see what you've been doing to me?\" Laura asked. She sounded helpless, and she was. The lust had overtaken her and she knew that she'd never truly ached for him like this as a woman. This need was new like the kissing and she felt like Matt must know. \"All day, I want you so much. If I think about you for more than a minute or two, I have to go touch myself. Just watching you walk around the house, I feel weak in the knees. I want you so much,\" Laura's voice quavered as her fingertips slowly traced her areolas for him. She was so hot everywhere. The backs of her knees and her neck were damp with sweat and the heat between her legs was almost unbearable. \"I want you so much, Matt.\"\n\nHe shuddered and there was a new barrage of rough kisses, nibbles and nips at her tender flesh. Matt was going to leave teeth marks on her tonight and Laura wanted to see the purple traces on her body later. He held onto the waistband of her panties and whispered, \"Oh god, baby. I don't think I can wait any more.\"\n\nNeither could she. Laura's body was covered in goosebumps as Matt slipped the panties from her hips, down her thighs, finally to her toes. His eyes were locked on Laura's huge, pink throbbing erection. He licked his bottom lip. He left it shining and slick and Laura moaned. Such a tease. Her husband was hard also, harder than he'd been at the table and it seemed like he'd never had the first enormous climax at all. His head was swollen, it bulged her and strained to get at her new, secret place. \"I'm ready, Matt,\" Laura told him. She knew it would hurt a little. She expected the first push or two to set her teeth on edge as he broke through to her inner sanctum. It had hurt for a moment or two when she'd lost her virginity as well. Nothing earth shattering, just enough to make her wince.\n\n\"Me too,\" he whispered and handed her the lube. \"Just be gentle with me, my love,\" Matt told her as he turned away. Her husband was on his hands and knees as he offered Laura his ass. He looked back at her, over his shoulder, \"I want you to make love to me like this, Laura.\"\n\nOh god, the shudder of realization ran down her spine. Her dick understood thoroughly before the realization came over her. He wanted Laura to fuck his ass. She'd never guessed, she'd never even dreamed and yet, here he was, bent over. Showing her his big, muscular bottom. It was softness over hardness, just like the rest of him. It was white and round and beefy and suddenly, Laura wondered why she'd never noticed it until now. \n\nMatt really had a gorgeous ass.\n\nShe was quick with the lube and the bottle spit a puddle of grease into her palm. With one hand she oiled up her dick quickly. Laura just touched herself and she groaned. Stroking like this from base to tip was almost enough to send her to the edge. \n\nShit, she couldn't cum quickly. Not for the first time. She wanted him to enjoy it. She wanted Matt to love it actually and she took a deep breath and nodded to herself. She was going to go slow and let him relax and open up on her dick. When she applied a finger full of lube to Matt's sphincter, he shivered and it felt like fear but he sighed with pleasure, \"Oh god.\"\n\nLaura positioned herself behind him and watched her cock eagerly slide between his slick cheeks. The head of her dick was full and hot and dripped into his little wrinkled entry. She wet him with precum. Matt's back trembled as he realized what she was doing and what was about to happen. Laura guided the tip inside and felt him open. He was boiling hot here, deliciously hot and scented like his balls but even richer and earthier. The back of his thighs shook as Laura pressed her way into his little, pink bud, just enough to feel his flesh give way. Matt exhaled deeply and his body vibrated.\n\nLaura froze in place. This was enough, the heady sensation, the wash of his insides around her, the sweetness and the warmth. His ass was tight and juicy. It was like a mouth but even smaller. Her cock pulsed and Laura watched as her shaft swelled and trembled. It wanted to plunge all the way inside, no hesitation, no mercy, every throbbing inch but she wouldn't let it. She'd wait, she'd wait for that surrender. Laura wanted to hear her husband's sweet sigh that made this lovemaking and not rape. \n\n\"Jesus,\" Matt murmured and his anus drew up tight and fluttered around the head of Laura's dick. He made a sound, something from deep in his core. He was surprised, Laura thought, surprised at how lovely it felt to be taken. The gentle offer was there, there, the warmth that radiated from his center as he melted into her dick. She felt her husband push his hips back to open up for her, his cheeks parted, his body invited her deep inside. Matt was no longer a virgin.\n\nHe felt amazing and Laura thrust and Matt parried. Laura's cry came from something else deep down inside, something that she'd never felt as a girl. This hunger, this ache, it was almost too much love to bear. Laura reached around Matt's body and pressed her breasts against his trembling back. She kissed the back of his neck as she pushed in, slowly, little by little. She wound her body around his and all the while Matt gave her everything, all of him. \"My sweet love,\" Laura whispered on his back and felt him convulse as her breath danced down his body. She fucked him slow and easy and deep, now that he was wide open. \"God, you feel amazing inside,\" she cried out as she let her hands follow his belly around and then down to her husband's flailing dick. \n\nMatt had never been this hard, not ever. One touch of him there as she delved to the depths of him with her enormous cock and Matt howled. He threw his head back and drove his ass back into Laura's hips. He barked, something guttural and low and almost like a warning. He growled to her, \"Fuck me,\" with gritted teeth. \"Fuck me hard.\" It was a command and even if he was terrified, there was this hunger that called to her. He shook from need and fear all at the same time.\n\nLaura gripped his dick in her right hand as she pinned him with her cock. Impaled, filled, every inch inside. She had found a place, in deep and to the front, that made Matt's whole body jolt with sensation. It was as if she suddenly controlled every inch of him. He throbbed in that place and drew his entry impossibly tight around her cock. He pulled her in, pulled her in so deep, Laura was sure that she'd be lost somewhere inside.\n\nLaura stroked and fucked and stroked him furiously and fucked him even harder. She threw her whole body into him and arched her back. Her balls were drawn up in fury and need. There was the molten insanity inside and it was thick and she was dizzy with it. Laura gasped as if she'd been holding her breath all the while and she was finally coming up for air as she spurt in the depths of his ass. \n\n\"Matt, oh Matt,\" she called his name again and again as she came deep inside. Laura curled around him and consumed him. She squeezed his cock tightly in her grip. Matt sounded as if he were about to choke. With one last sob and sputter, Laura forced him to his climax.\n\nIt was violent and rough and there was no stopping it as Laura fucked and filled her husband with semen. Matt came in her hand and all the way up her forearm and all over the bed beneath them with sobs of pleasure. They continued to cum as they fell to the mattress, no longer strong enough to prop themselves up anymore. Laura would be sure that she was empty and then Matt would squeeze his sphincter tight around her throbbing dick and bring it back to life. He wrung the cum out of her once more as he trembled in her hand and spit and shuddered.\n\nLaura realized as she breathed with him, with hand still around Matt's cock, that although they were both spent and empty that neither of their cocks had softened. \n\nAlthough Laura was breathless and trembling, she knew that she'd get her second wind and so would Matt. Now that they'd made love like this, they seemed to have opened a new, boundless well of passion. They were insatiable.\n\n***\n\nIt got dark early In the middle of winter and it seemed late when Matt came home for dinner. He had a brown paper bag that he set on the counter before he opened his arms to take her in. \"How's my love?\" he asked before placing a gentle kiss on her lips.\n\n\"Good, it was a good day,\" Laura smiled at him and watched as his hands traveled from her shoulders to her breasts to her large, round belly. \"Dr. Rampling said that everything looks good,\" Laura confirmed as Matt rested his hands possessively around her belly. He'd been like that ever since they found out that Laura was pregnant. As she'd gotten bigger, the belly had sunk from up high, just under her breasts, to much lower. As time went by, her husband seemed to be even more protective of both her and the belly.\n\n\"So both of my girls are okay?\" he sounded pleased and continued to hold Laura's stomach. Matt's mouth was lost in her hair and his heart beat in time with hers.\n\nEven though the dick had gone away, they hadn't lost their newfound wonderment with each other's body. Dr. Rampling said that some couples have the best sex of their lives when pregnant. Then he'd assured Laura with a patient smile that they couldn't hurt the baby. No matter what.\n\n\"Yes, we're good. Are you hungry?\" Laura asked as she pushed his dark hair back off of his forehead.\n\n\"I had a late lunch but yes, of course, I'll eat,\" Matt told her and then grinned, \"that is, if the two ladies in my life haven't already scarfed down my dinner.\" Matt had taken immense pleasure in the fact that Laura had thrown her usual healthy diet out the window ever since her vagina reappeared and her pregnancy test came back positive. Life was too short to deny herself carbs, Laura had told herself. She had already gained thirty pounds with almost two months left until the baby came. Matt's dinner had been eaten more than once.\n\nLaura gave him a wicked laugh and said, \"No, we haven't eaten it yet. But if you'd come home any later,\" she shrugged as if to say she couldn't be held responsible for taking his food. Laura went up on tiptoe and pecked his cheek. \"I am starving though.\"\n\nThey'd stopped having the summer vacation conversation long ago. Now it was mostly baby conversation. The nursery was ready and Laura had packed her hospital suitcase the week before even though it was far too early. Sometimes they just sat in silence at the dining room table and held hands and stared at each other. Sometimes it felt like they'd never seen each other before and had no idea how they'd gotten so lucky as to meet.\n\nLaura had never known that she could be so much in love.\n\nAfter her immediate hunger had been sated and she slowed down a bit, Laura nodded at the paper bag on the counter. \"What's that?\" she asked her husband.",
        "He shrugged and smiled and whispered, \"Just something I've been thinking about.\"\n\n\"For the baby?\" Laura whispered.\n\n\"No, this is definitely for you,\" Matt's eyes twinkled with glee or maybe that was something else. He rose from his seat and reached for the bag. He set it on the table and told her, as if he were already apologizing for something, \"It's just something I'm thinking about. It's no big deal if you don't want to.\"\n\nLaura had learned, during the month that she had the dick, that when her husband had that expression on his face, that yearning, heated expression, that it was actually a very big deal.\n\nShe opened the paper bag and inside was a harness with a dildo attached. She looked at the instructions on the back and realized that she was meant to wear the harness around her hips. The dick was secured in the center. It was flesh colored and spongy, yet hard. It was thick and lifelike, there was even an angry looking vein that ran down the side of it. The head was enormous and appeared real enough that Laura wouldn't have been surprised if the slit hadn't bubbled with something sticky. It was even larger than the dick she'd had once upon a time. \"Oh yeah?\" she asked in a smart ass tone, \"you sure about that?\"\n\n\"Why?\" Matt crinkled his forehead in thought, \"are you saying you would?\" It melted her heart to see him, so open and adoring. As soon as her dick had disappeared, Matt hadn't even remarked that he'd be disappointed. In fact, he'd taken to eating her pussy with such relish and fucking her so hard and so well that the memory of the cock faded away quickly. Now, it was just someone's porn movie that they'd stumbled across. At least, that's how it had been for Laura but she realized at that moment that Matt hadn't felt that way. He still thought of her dick in the best of ways.\n\nLaura leaned in close. She knew that Matt felt her breath on his face and he was lost in a place where he'd given himself over to her. \"You should go upstairs and get ready,\" was all Laura said before she placed the softest kiss on his mouth."
    ],
    "authorname": "macymadison",
    "tags": [
        "anal sex",
        "blow job",
        "big cock",
        "romance",
        "dickgirl",
        "shemale on male",
        "mutual masturbation",
        "erotic",
        "fantasy",
        "drama"
    ],
    "category": "Transgender & Crossdressers",
    "url": "https://www.literotica.com/s/my-wifes-big-dick"
}
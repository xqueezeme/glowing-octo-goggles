{
    "title": "Texas Trio Pt. 02 - Becky's Debt Ch. 25-26",
    "pages": [
        "REMINDER: I write long stories. Many chapters don't have naughty bits, but those that do (like this one!) will be way more fun if you read the non-naughty parts, too! Also, although TT2 is a stand-alone novel, it takes place in the same family as Texas Trio, so you might want to read that one first!\u2014Stefanie \n\n\u2014:\u2014:\u2014:\u2014:\u2014:\u2014:\u2014Chapter 25\u2014:\u2014:\u2014:\u2014:\u2014:\u2014:\u2014 \n\nBecky had the bad fortune to step out of the woods at the same time Jem rounded the corner of the barn, heading for the house. Only his unrelenting sense of self-discipline saved her from being hauled into the house by her elbow for a spanking. Instead, after exchanging her wet clothes for dry ones and combing her hair, she got a loud lecture on wandering around the ranch alone. By that time, Colt had arrived, so there were two large men pacing the library like angry lions, roaring their displeasure. \n\n\"Didn't we tell you that someone's been hanging around the ranch, cutting fences?\" Colt glared down at at the bane of their leonine pride, furious at her comportment. Becky looked for all the world like she'd just wandered in here to choose a book. \n\n\"Yes, you did, and I apologize for not heeding your warning.\" \n\nJeremiah took a turn. \"You know how Catherine worries; what if something were to happen to you? How would your sister feel?\" \n\n\"I do know, and I wouldn't want to hurt her. I apologize for risking that.\" Becky's hands were crossed on her lap. She didn't even fidget, though honestly, she'd been so eager to see Brody she'd never even considered the possibility of a brief absence worrying her sister. \n\nHer brothers glared at her, their eyes glittering dangerously. Any man on the ranch would have been shaking, but Becky sat calmly, making direct eye contact and giving every impression of sincerity as she spoke\u2014simply because she was sincere. She knew she'd been bending the rules, after all, and she truly didn't want to worry Catherine, even if she did think they were over-reacting. \n\nColt made an inarticulate sound of rage as he threw his hands up, storming out of the library. \n\nJem turned on his heel and followed more slowly. He didn't slam the door as Becky expected. \n\nBecky leaned back in the chair and turned her face toward the window. A small smile settled on her lips. All the fuming and hollering had spared her the nervous explanations Cat or Nanny's questions would probably have elicited. That had been her only worry after she left Brody to return to the house. \n\nBecky supposed she should have a whole host of other worries about the possible consequences of making love with Brody, but she was absolutely, positively sure it was one of the best decisions she'd ever made. Chief among the worries she didn't have was the risk of conceiving. Catherine's own family-planning goals had smoothed Becky's way with The Book, which said Becky probably wasn't in danger this week. \n\nAfter another minute of dreamy recollection in the library, she rose to her feet, smoothed her dress, and went in to help with the evening meal. \n\n\u2014:\u2014:\u2014:\u2014:\u2014:\u2014:\u2014 \n\nThey'd never discussed the possibility, and Brody doubted the wisdom of showing up on her porch after dinner that night, but he couldn't resist the urge to see her again, no matter that they'd only been apart for ninety minutes. \n\nHe was even more unsure of his chosen course when he arrived to find everyone but Becky in a prickly mood. He'd have said it was the heat, except for the occasional glares thrown Becky's way by Colt and Jem, and the way Mrs. Connor was keeping a watchful eye on her husbands. If Becky hadn't seemed so care-free, he would have been worried, but she gave him a serene smile and asked him to walk her around the yard. \n\nHe waited until they were out of earshot and bent his head. \"Are you well?\" \n\nBecky smiled sideways at him, practically glowing in the evening light. \"I am very well, Mr. Easton, thank you.\" \n\nHe was puzzled. \"Your family seems . . . perturbed. I thought they might have . . . .\" \n\nShe waved a hand dismissively. \"I am a constant trial to my brothers, but it has nothing to do with you or our . . . swim.\" She ducked her chin, blushing. \n\nBrody grinned. \"Good. I would not like for you to be upset, or for your brothers to think less of me than they already do.\" \n\nHe wondered whether he should mention matrimony to her before approaching Kendall and Wilson. \n\n\"Mr. Easton, I hesitate to ask . . . .\" \n\nHe prompted her with a nod. \n\n\"The night you arrived at the ranch\u2014\" \n\nBrody colored. \n\n\"\u2014what exactly did you say about my sister that so aroused Clancy's fury?\" \n\nHe was appalled by the question and cleared his throat several times in preparation. \"I'd like to apologize again, Miss Connor\u2014\" \n\n\"Never mind that, Brody,\" Becky slipped into familiarity. \"Please do say.\" \n\nHe darted a glance at her from under his brows. \"I'd been told by two men on the road that this\u2014\" He motioned to the house. \"\u2014was a comfort-house.\" \n\nBecky's eyes widened. \n\n\"After your sister walked by, I\u2014\" He cleared his throat again and interrupted himself. \"Becky, I was extremely tired and hadn't\u2014\" \n\n\"Brody,\" she prodded sternly, unconsciously channeling her older sister. \n\nHe swallowed. \"After your sister walked by, I said she didn't look like a light-skirt.\" \n\nHe closed his eyes, waiting for the explosion. \n\nShe thought for a moment, and nodded. \"Oh.\" \n\nA breath passed her lips and she spoke again. \"There's a church picnic this Sunday, I was wondering . . . .\" \n\nSurprised by her lack of reaction, Brody barely heard himself making plans to accompany her and her family to the picnic. By the time he emerged from his fog and thought again to mention matrimony, they'd completed their second circuit. \n\nAs they approached the porch, Kendall stood. \"That's it. I've had enough watching you two parade around.\" \n\nColt ignored Catherine's disapproving presence at his elbow and the piercing stare she directed his way. He pointed to the door. \"Becky, get inside and go upstairs. Now.\" \n\nBecky turned to Brody and smiled sweetly, completely unconcerned with Kendall's booming voice and thunderous stare. \"Good night, Mr. Easton.\" \n\nBrody bowed politely over her hand. \"Miss Connor.\" \n\n\"Mrs. Connor.\" Brody tipped his hat to Catherine, who smiled as she followed her husband and sister inside, leaving Brody alone with Jem. \n\nWith the light behind Wilson, Brody couldn't see his face, just a broad, looming silhouette. When Wilson closed the door and leapt from the porch, skipping the three shallow steps, Brody tensed, but Jem headed straight for the barn. \n\n\"I'll walk you down.\" \n\nBrody followed, wondering if he was about to get hung from a rafter. Becky said her brothers didn't know what had happened between them, but maybe she was wrong. He only relaxed when Wilson propped his elbows on the top rail of Big Bob's empty paddock, motioning for Brody to join him. \n\nThey were silent for a while. \n\n\"Brody\u2014\" Jem began. \n\nBrody started. It was the first time either of Becky's brothers had called him anything but \"Easton.\" \n\n\"\u2014Becky likes you.\" He glanced over with a wry smile. \"I guess you know that.\" \n\nBrody tried for a small smile, hoping to keep the lovesick fawning in check. \n\n\"As you mentioned yourself, in very diplomatic terms, she can be stubborn.\" Jem stopped, looking at nothing. \n\n\"She's determined not to have her wings clipped, no matter what Colt, Catherine, and I say about her wandering the ranch alone.\" \n\nThe tension flowed from Brody's shoulders as he began to sense the purpose of their chat. \n\n\"I haven't wanted to scare her\u2014still don't want to scare her\u2014or the other women, so I haven't mentioned it, but Colt and I think that fence-cutter is more than some troublesome local lad.\" \n\nJem glanced sideways at Brody. \"That man you spoke to on the road, who told you this place was a public house\u2014we think it's him and a partner cutting fences. There was a fire last week, too, an old birthing shed. A cowhand nearby saw a wisp of smoke and sent up a volley of shots. Half a dozen hands got there in time to stop it from spreading. We kept it quiet to avoid a panic\u2014I don't need men shooting each other when they go to the privy in the middle of the night\u2014but Becky\u2014\" He shook his head. \"I can keep everyone else safe, but not Becky. Not if she won't listen to us.\" \n\nBrody was frowning when Jem looked at him again. \n\n\"I'm hoping you can help.\" \n\nBrody nodded sharply, positive he'd do something, anything, whatever it took to keep her safe. \n\n\"She might listen to you, whereas Colt and I are just,\" he shrugged. \"her brothers.\" \n\nBrody nodded again, his face stern. \"Yes, sir.\" \n\nJem pushed away from the fence, grinning, and whacked Brody on the shoulder with his hat as he passed, headed for the house. \"Cut it out, Easton. Nobody's buying those 'sirs' anymore.\" \n\nBrody almost laughed aloud. \n\nAs Jem walked away, Brody couldn't help calling after him. \"Yes, sir.\" \n\nJem's chuckles followed him into the barn. \n\n\u2014:\u2014:\u2014:\u2014:\u2014:\u2014:\u2014 \n\nJeremiah was oddly reassured by Becky's truculent approach the following morning, when she came to the office as he was ordering the monthly household accounts for Colt's governance. \"Becky?\" \n\nShe planted her hands on her hips, and Jem thought he was about to get a lecture on feminine independence or women's rights or some such thing. \n\n\"Did you and Colt ever think to ask Clancy what Brody said about Catherine that first night he was here?\" \n\nJem was surprised by the topic but answered quietly. \"No, I didn't see the need.\" \n\nBecky glared. \"After Catherine passed them, Brody told Clancy she didn't look like a light-skirt.\" \n\nJem tipped his head like he was listening to a faraway sound. \n\nBecky nodded sharply, acting as though he'd agreed with her. \"Exactly. It's not much of an insult, now, is it?\" She folded her arms across her chest. \n\nJem suppressed a smile. She'd never get away with that pose if Catherine were present. \n\nBecky continued to berate him. \"If he'd said that about a saloon girl, it would actually be considered a compliment, now, wouldn't it?\" \n\nJem made a noncommittal sound. \n\nAfter a long, meaningful stare, Becky departed. \n\nJem craned his neck to watch through the small window as she stomped back toward the house. Apparently he'd been right about her and Brody, he thought, laughing out loud as he bent again to the stack of receipts. \n\n\u2014:\u2014:\u2014:\u2014:\u2014:\u2014:\u2014Chapter 26\u2014:\u2014:\u2014:\u2014:\u2014:\u2014:\u2014 \n\nThe next day was Saturday, and Brody stopped in for the noon meal, hoping to speak with Becky's brothers alone. Instead, he ate in the kitchen with the women, where he was then pressed into service entertaining them with tales of his travels while they prepared food for the picnic on Sunday. Becky sat at the table with him and one of the boys, who was working sums on his slate. \n\nThe ladies were thrilled with his stories of goings-on across the country, and aghast when he told them a watered-down version of being mistaken for a union organizer and jailed, shortly after arriving in Texas. \n\nCatherine and Becky got into a lively discussion after Catherine dismissed the union issue as uninteresting, and Rebecca felt compelled to correct her sister's lack of concern by explaining \"Powderly's stance on 'women's work'.\" Brody wasn't particularly interested in labor disputes, either, and if he heard one more Madame de Sta\u00ebl quote, he thought he might scream, but he loved to watch Becky's face when she spoke passionately on any subject. And she was forever producing some bit of knowledge that astounded him, whether it was written by a Viennese physician or a Chinese chemist. \n\nShe paused suddenly as the jingle of spurs tinkled through the window. At the sound of a footfall on the back porch, she picked up her monologue with slightly more volume, and what seemed a precipitous change in topic. \"In Prolegomena to Ethics, Mr. Green writes that true virtue cannot be limited to the cultivation of personal virtue alone, that the moral ideal must be continued by the state.\" \n\nColt had closed the screen door and was halfway across the room to his wife when Becky finished. He froze, sighed deeply, and turned on his heel, leaving the room. \n\nBecky giggled, but Cat was right behind her husband and pinched her sister's arm\u2014hard\u2014on her way by. \n\nBecky rubbed the spot, frowning. \n\n\"You could at least let him get a drink afore you start pokin' at him, Miss Becky,\" Nanny chided quietly. \n\nBecky was stricken. She hadn't meant to truly upset Colt\u2014she loved him. She met Brody's eyes, a query in her own. \n\nOne of Brody's brows rose, and he nodded slightly in agreement. \n\nBecky glanced down at her hands. \"Will you excuse me for a moment, Mr. Easton?\" \n\nHe took over with Jamie and the slate as she left the kitchen. \n\nShe took her time on the stairs, forming an apology, and arrived at Colt's door with a lighter heart. Doing the right thing always made you feel better, like Nanny told the children. Wearing a serene smile, she lifted her hand to knock, but was forestalled by a knock from the other side. Confusion wrinkled her brow. Another knock followed from a lower spot, and a heavy thud from lower yet. Rustling fabric and shuffling sounds from the floor didn't help make sense of the knocks, either\u2014until Becky heard a tiny whimper, not far from where her hand still hovered. \n\nShe blushed bright scarlet and backed away, her eyes glued to the polished wood as a vision formed of her sister pinned against the other side, her skirts askew, her legs rising to embrace Colt's waist as she eagerly awaited his penetration. \n\nBecky's hand flew to her mouth, and she fled silently back downstairs, thanking her lucky stars that none of the treads creaked. In the hallway outside the kitchen door she stopped, leaning against the wall with her breasts heaving as she tried to catch her breath. The heat in her face fled to her belly, leaving her legs weak. \n\nIf only Catherine hadn't told her those things! \n\nBecky twisted her head silently from side to side, reminding herself that it was her own fault. She'd wanted to know what to expect with Brody, though being forewarned hadn't helped at all: no words came close to describing how thick and hot he'd felt inside her. \n\nHer heart thudded wildly and she rested her hand on her chest, feeling the fluid echoing in her veins as her pussy clenched wildly, aching for . . . . \n\nBrody. \n\nHe was sitting there in the kitchen, just on the other side of that door, awaiting her return. Would he be able to tell what she'd been thinking? Becky exhaled slowly and held her breath, concentrating on slowing her heart. She'd read a book about a swami in Bengal who could slow his heart rate to ten beats per minute for hours on end and come back to his senses refreshed and relaxed. That was exactly what she needed\u2014to relax. \n\nAt last her pulse calmed, and she re-entered the kitchen, a polite smile pinned to her lips. \"Would you like another cup of tea, Mr. Easton?\" \n\nBrody studied her face. \"No, thank you, Miss Connor, I have to be going. Will you walk me out?\" \n\n\"Of course.\" \n\nBrody thanked the other ladies in the kitchen, tousled Jamie's hair, and followed Becky to the front of the house. Before they reached the door, he pulled her into the library, closing the door quietly behind them. He tossed his hat on a chair and came to her. \"What is it?\" \n\nHis hands, gentle on her upper arms, burned her skin through the light-weight cotton fabric, and Becky's smile began to break. \n\n\"Did Kendall say something to you? By God, I'll\u2014\" Blood rose in his neck, turning his brown skin ruddy, and Becky reached out to soothe him. \n\nHer hands on his chest, she shook her head. \"No, no, it was nothing like that . . . it was\u2014\" \n\nWhat could she say? She couldn't possibly tell him the truth, yet he'd know if she was lying. \n\nBrody pulled her closer, his eyes drilling into her. \"Becky, tell me.\" \n\nShe shuddered at his tone, the same low rumble he'd used at the bunkhouse and the stable, after which she'd done exactly as he said. She was afraid she wouldn't be able to resist it now, either. \n\nShe tried to slide sideways and away from him, but Brody wouldn't let her move. His grip on her arms tightened, and he leaned nearer to say it again, more quietly this time. \"Becky.\" \n\nWith no follow-up, it was nonetheless an order. \n\nShaking her head 'no', she complied anyway, while looking sideways at the floor. \n\n\"I didn't\u2014I couldn't apologize,\" she whispered, her throat closing. \"I didn't\u2014They were . . . Cat and Colt, I mean . . . they were\u2014\" \n\nShe choked on the words, but that was enough for Brody. \n\nWith her lids lowered to cover her embarrassment, Becky missed Brody's predatory smile, but she could feel the heat of his ardor, knew the intensity with which he studied her face, because he'd watched her that way before, when she clung like seaweed to the bunkhouse wall. Her nipples hardened and pushed at the fabric restraining them. \n\n\"They were fucking?\" Brody asked roughly, and the blood returned to her face in a rush. \n\nShe didn't reply, so he bent his head again, rubbing his scratchy cheek lightly against hers. \"Say it, Becky.\" \n\nWhen her silence answered, Brody shifted his grip. Squeezing her arms slightly also pushed her breasts together, putting her nipples within easy reach of his long, rough thumbs. He ran them lightly up the lower curve of her breasts, his touch becoming gradually firmer until he reached the tips and slowed. The tiny buds were so stiff they caught at his thumbs through three layers of lace and fabric. \n\nBecky gasped, her eyes flying uncontrollably open. \n\nHe was waiting, and the grey eyes trapped hers. Once, twice more, he caressed her through the cotton. \n\nAll the hot, expectant tingles he pulled to the surface dripped directly to the spot between her legs where she most needed his touch, pooling there in anticipation. \"Brody,\" she gasped. \n\n\"Say it, Becky.\" \n\n\"Yes . . . yes,\" she whimpered. \"They were there, on the other side of the door. They were . . . fucking.\" The word sounded so obscene when she said it. Her flush returned. \n\nAs Brody's mouth came down to claim her, Becky moaned against his lips. If she'd been capable of thought, she would have recognized the same sound she heard Catherine making a few moments earlier. But she couldn't think. All she could do was feel. The hard length of Brody's body pressing her against the library door was as shattering as she remembered. \n\nHe drew his mouth away slowly, his hands falling to her waist to pull her hips more firmly against his own. His erection felt huge, even through her skirts, and she whimpered again, no longer trying to get away. \n\nHis breath on her ear was hot and moist. \"Like this? He had her up against the door like this?\" \n\nBrody's hips thrust against hers, pinning the lower half of her body to the unforgiving oak. Even with her eyes closed, she could feel him watching her, the fire beneath her skin feeding his own. \n\nBracing herself, she opened her eyes. As though her eyes were the signal he'd been waiting for, Brody shifted his weight and turned her to face the door. \n\n\"Or maybe\u2014\" The low rasp of his voice was enough to make her quiver. \"\u2014like this.\" \n\nHe nudged her knees apart like he'd done that day at the bunkhouse, making Becky feel unbearably exposed, despite the long skirt and voluminous petticoats she wore. With one hand between her hips and the door, and the other at her hip, Brody began to gather her skirts up. \n\nHe couldn't! Her fingertips whitened as she pushed back against him, trying to get away. Not here! \n\nBrody bent his knee behind her own, lifting her left foot off the floor, and Becky slid helplessly to one side, opening herself for the hands threading their way through the maze of her petticoats, one from the front and one from the back. ",
        "A choking sound rose from her chest. \n\n\"Shhh.\" His breath was hot against her cheek. \n\nShe couldn't move, couldn't free herself, but Becky squirmed until she felt a hot palm settle over her mound as one thick finger slid between the lips of her pussy. \n\nWhen he felt her wetness, Brody exhaled, a sharp hiss of air escaping between his teeth. Pinning the back of her skirt between their bodies and pulling one leg of Becky's petticoat aside, he bared as much of her bottom as possible. Gently, his finger delved into the warmth of her body \n\n\"I bet this wasn't the first time you've heard your sister and her husband, was it?\" he whispered against her ear. \"I bet you get an earful living here.\" \n\nBecky colored, and Brody laughed softly. She'd stopped struggling now, helpless to resist his greater size and strength, but more helpless to withstand the siren's song of his sensual explorations, the rough caress of a finger on her clit, and the penetration of another. \n\n\"When you're in bed at night, do you hear them fucking?\" \n\nHesitantly, she nodded. \n\nDrawing moisture out with the long, thick finger, he retreated and thrust, slowly, and again. \n\n\"Do you know what they do in the bedroom, Becky?\" \n\nHer eyes flew open. \n\n\"Two husbands, one wife?\" \n\nShe shouldn't want to know, Becky thought. She shook her head decisively. \"No.\" \n\n\"Two men, one woman,\" he went on, \"one of them fucks her here.\" \n\nA second finger joined the first inside her pussy. \n\nBecky gasped, and Brody went back to the excruciatingly slow stretching of her delicate channel. \n\n\"And one of them fucks her mouth.\" \n\nBecky shuddered, her inner muscles trying to still the probing fingers. While Catherine had implied the same act, hearing Brody say it so boldly while he . . . well, those were two entirely different things. \n\n\"Sometimes they do that\u2014\" \n\nBrody shifted to one side, still supporting her thigh but allowing himself better access to the portion of her bottom he'd bared. \n\nShe shivered as he stroked the sweet curves of her ass with his free hand, dipping again and again into the well of liquid fire. \n\nFour or five fingers were now playing in the juicy flesh between her thighs, but Becky's rioting nerves said it might be twenty, flicking and petting, bringing her fever to new heights. She'd never been this wet. \n\n\"Sometimes\u2014\" \n\nThe moisture coated his fingers as they curved inward. \n\n\"\u2014one of them fucks her pussy\u2014\" \n\nBecky's eyes flew open as his hand moved slowly upward, drawing moisture over the tender opening between her cheeks. \n\n\"\u2014and one of them\u2014\" \n\nThe hand in front slid down, its fingers delving deeply into her pussy as his thumb pressed firmly against her clit, and Brody made small circles on the tiny puckered opening no one had ever touched. \n\nBecky's shoulders heaved as she sucked in great gulps of air. \n\nBrody pressed lightly on her bottom, the tip of his finger barely opening the tender bud. \n\n\"\u2014and one of them\u2014\" he repeated, pushing his hips forward to pin his hand between them, creating hot, unbearable pressure. \n\n\"\u2014fucks her ass.\" \n\nBecky exploded, her body spasming around the thick finger in her pussy, tiny flutters of lightning shooting from her sensitive rear entrance to her throbbing clit, pinned beneath his thumb, still in motion and drawing her orgasm into a shattering series of waves. She was so close to screaming that she bit her arm preventing it. \n\nWhen she'd calmed, sagging limply against the door, he turned her in his embrace, letting the back of her skirts fall but taking care to keep the front aloft. \n\nBecky was still shaking when he claimed her lips, her ribcage heaving with effort. Brody felt her struggle and limited himself to soft, comforting kisses while she caught her breath, but he wasn't done with her yet. \n\nPractically begging to be discovered\u2014and subsequently dismembered, Brody imagined\u2014he held her in place with her back to the door, as his fingers slid surely back between her legs. \n\nBecky shivered, one long convulsive movement which claimed her entire body. As the spasm passed, she opened her eyes, whispering a desperate plea. \"No . . . no, Brody . . . I can't.\" \n\nEverything in Brody wanted to force Becky to submit without protest or hesitation, allowing him unlimited freedom to pleasure them both, but her innocence restrained him. \n\nSoon, he thought, soon she would give in to him and stop fighting what he knew was meant to be. For now, he soothed her into submission instead of issuing another order. A kiss on the beating pulse where it slipped beneath her collar, a flick of his tongue into the hollow of her throat, a line of slow, gentle kisses leading his mouth higher as they drew Becky forward. She turned into his kiss, clinging to his shoulders as his tongue dipped between her lips, drawing her into a gentle duel. \n\nShe whimpered another plea when his fingers resumed their erotic explorations, but this one was weaker, and the negative shakes of her head were soon defeated by the lift of her chin as Becky returned Brody's kiss. \n\nRunning one hand upward from her waist, Brody stroked the soft underside of her arm, and finished by entwining his fingers with hers. Slowly, he moved his hand until hers was above her head, her elbow bent and her palm facing outward. \n\nWhen Becky hummed into their kiss, Brody released her lips and repeated the sound. \n\nHis cock was so hard he thought it might kill him not to slake his thirst for her, but Brody's smile was soft when Becky opened her eyes. She smiled too, as he kissed the tip of her nose, the point of her chin, and lowered his face to draw a breath near her ear. \n\n\"Give me your other hand,\" he said softly. \n\nBecky gritted her teeth, her nostrils flaring, but she didn't hesitate this time, and Brody had to bite back a groan as the blood-swollen tissues of his penis thundered painfully in response. \n\nWith one hand, he could almost enclose both of her fine-boned wrists, but he placed her hands side-by-side above her head and released them. \"Don't move.\" \n\nHe'd taken care to keep his voice gentle, but it was clearly an order. \n\nBreathing quickly, her eyes widened, but she obeyed, obeying, too, when he told her to keep her eyes on him. \n\nShe arched helplessly when one big finger slid inexorably into her body, but she didn't look away. \n\nHer inner muscles fluttered around the invasion, and Brody swallowed as he imagined filling her and feeling that intimate caress around his cock. With his thumb, he swept upward, parting the folds hidden between her thighs. \n\nShe gasped loudly as his touch skimmed across the pearl-like peak, not lingering. \n\nHolding her in place with the weight of his gaze, Brody rumbled, \"You're so soft.\" \n\nShe was breathing more quickly now as the rough pad of his thumb swirled around her clit. \n\nHe went on. \"Your pussy feels so good.\" \n\nHis second finger slipped in to join the first, the movements of his hand coating her inner thighs with the nectar of her body. \n\nHer upper body shifted restlessly, reflecting the tension Brody felt in her thighs, but her hands stayed on the door where he'd placed them. \n\n\"So hot. So wet.\" Brody's soft murmur was strained. \n\nShe was panting now. \n\n\"Have you felt it like this, Becky?\" \n\nHer flush deepened, her eyes flaring in shock. \n\n\"Have you touched yourself like this?\" Burying his fingers as deeply as he could, Brody swiped his thumb back and forth, the folds of wet flesh clinging to his skin. \n\nBecky's hips rocked in the rhythm he'd set for them as she reached for the peak she'd sworn she couldn't attain again. \n\nBrody lifted his thumb and let his fingers slide from her body, leaving the tip of one, barely penetrating her pussy. \n\nHer hips pushed forward, straining for his hand, but with only one set of toes on the floor, she had no purchase. Her lips closed around a pitiful whimper. \n\n\"Have you, Becky?\" Brody murmured. \"Have you touched yourself like this?\" \n\nHe let his thumb brush lightly across her clit, and Becky's whole body trembled, her eyes panicky. \n\n\"Becky.\" It wasn't a question this time. \n\nHer fingers clenching in the air above her head, Becky nodded, ever-so-slightly. \n\nBrody slid his finger slowly in and withdrew. \"Say it.\" \n\nShe shuddered, pressing her lips together as though trying to stop the words from leaving her mouth, but she couldn't; she needed him too badly to stop now. \"I\u2014I've touched myself.\" \n\nBrody's nostrils flared as he exhaled forcefully. \"You've made yourself come.\" \n\nAnother tiny nod, another shy pause. \"I've . . . made myself come.\" \n\nHe added another finger as he thrust inward, his thumb returning to its torturous, sweeping strokes. \"Good girl.\" \n\nBecky moaned and bit her lower lip to stifle the cries trembling on her tongue. \n\nAs his fingers drove her higher and higher, Brody dragged reluctant answers from Becky, things she could never have imagined telling another human being. To Brody, her experiences were a mere taste of what they'd do together, but to Becky, the admissions were shocking and shameful. Still, the words fell from her lips as he softly tweaked her nipples, his other hand bringing her closer and closer to ecstasy. Yes, she'd touched herself. Yes, she'd come that way, many times. Yes, she touched her breasts. She'd pinched her nipples. \n\n\"Like this?\" he asked, his fingers demonstrating. \"Harder?\" \n\nShe arced, the small pain prodding her ascent. \n\nDid she fantasize? Yes, she fantasized about fucking. She stumbled over the word again, and Brody slowed his hand, lessened the pressure of his thumb, sensing she was close. \n\nBecky grimaced, pushing her breast into his palm, which cupped and circled the small, sweet mound. God, he wished he dared unbutton her blouse. He wanted to see her, taste her, suck her nipples into his mouth and lave them while she crumbled. \n\nWhen she touched herself, did she pretend it was the touch of another? \n\nBecky rolled her hips, struggling for completion. \n\n\"Yesss,\" she hissed between her teeth. \n\n\"Do you fantasize about me, Becky?\" \n\nHer eyes flew open and her cheeks paled, but Becky couldn't stop the yearning movements of her body. \n\nFor a moment, Brody thought she wouldn't answer and he'd have to start again, prying the information from her. \n\nHow long could he keep her here before someone came looking? \n\nBut on a huge sigh, she surrendered. \"Yes, I think about you when I touch myself at night.\" \n\nBrody's heart nearly stopped. \"Do you say my name?\" \n\nA quick shake of her head. \n\n\"I want you to say my name, Becky,\" Brody growled under his breath, giving in to the temptation to kiss the pale skin hidden beneath the angle of her jaw, as two fingers slid into her pussy and he began fucking her in earnest. Each thrust of his hand brought the wide, hard base of his thumb bumping up against her mons, a fast, fierce contact that would have scared her only a few days ago. \n\n\"Say my name when you come,\" he growled again. \n\n\"Yes,\" she breathed, turning her face to feel his hair brush against her cheek. \"Yes.\" \n\n\"Now, Becky. I want you to say it now.\" Withdrawing, Brody added a third finger and pushed them inside, the ball of his thumb stroking the tender groove above, pushing her over the peak. \n\nBecky stopped breathing for an interminable moment. Then she contracted, her entire body clenching down on the hot, slick invaders stretching her pussy to the limit. \n\nHer orgasm was so violent, Brody thought she'd scream, but Becky didn't have the breath for it. \n\n\"Brody.\" \n\nShe whispered his name, and it was the worst torture yet. \n\nBrody closed his eyes and bit back his own heartfelt groan, cursing himself. He never wanted to hear her say his name like that again unless his cock was buried to the hilt in the sweet pussy now hugging his fingers so tightly. \n\n\u2014:\u2014:\u2014:\u2014:\u2014:\u2014:\u2014 \n\nLater, neither of them remembered exactly how they got out of the library without being discovered: Brody because he had a hard-on a ten-gallon hat couldn't cover, and Becky because she'd burst into tears before Brody's fingers left her body. \n\nThat should've cured his erection, he thought, but her scent was in his nose and his pores, and the memory of how eagerly she'd responded to his touch was enough to keep him hard for days. Besides, as bad as it sounded, Brody had seen other women cry after sex. Sometimes the physical release tapped into stifled emotions. He'd never personally wanted to cry after coming, but he'd felt the swell of tenderness when he'd held Amy and felt the baby rolling beneath the taut skin of her belly. \n\nAnd God knew, he'd be lucky if Becky didn't have him sobbing any day now. \n\nBrody shifted uncomfortably in his saddle. Walking would've been better, but this way the pommel and his artfully bunched trouser legs did a decent job disguising his dilemma. He'd have to stop at the swimming hole before he went back to the bunkhouse to either cool off or jerk off, because this thing wasn't going away on its own. \n\nHe closed his eyes. It was a miracle he hadn't stripped her and fucked her right there against the library door. At one point he'd even checked to see if the door had a lock. It did, and it was a good solid door, but the windows were bigger than average. Kendall wouldn't fit, but he could toss Clancy right through. \n\nRight then, with Becky pressing her ass against his cock, dying afterward hadn't seemed as important as whether or not he'd be able to finish fucking her before they killed him. All of that had run through his mind while Becky was creaming all over his fingers. \n\nBrody groaned into the soft summer air, hoping no one would ask Becky why the library window had been left open. Her blushes were enough to get him killed. \n\nHe laughed aloud, turning Bear toward the creek. \n\n\u2014:\u2014:\u2014:\u2014:\u2014:\u2014:\u2014 \n\nAUTHOR'S NOTE: As usual, thank you for taking the time to read, write, and vote. I smile every time I check in and find a new comment, and smile even harder, itching to respond whenever one of you hints at something that will be a major factor in upcoming chapters! \u2014 Stefanie"
    ],
    "authorname": "SteffiOlsen",
    "tags": [
        "cowboy",
        "ranch",
        "finger-fucking",
        "control",
        "love story",
        "historical romance",
        "blush"
    ],
    "category": "Erotic Couplings",
    "url": "https://www.literotica.com/s/texas-trio-pt-02-beckys-debt-ch-25-26"
}
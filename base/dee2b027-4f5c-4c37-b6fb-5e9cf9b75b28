{
    "title": "Starlight Gleaming Ch. 21 Pt. 03",
    "pages": [
        "Starlight Gleaming Ch. 21 Pt. 3\n\nSummary\n\nThis partial chapter takes place the morning immediately following the end of Chapter 21.2.\n\n \n\nThanks to TerrytheTraveler and StoshB for lending a hand with catching errors. Any gaffs, typos, dropped words, usage errors, omissions, commissions, permissions, WTFs and OMGs are totally my fault. Enjoy!\n\n* * * * *\n\nPart 13 -- Mounting Casualties\n\n* * * * *\n\nIt seemed I'd just closed my eyes when my phone rang. Disentangling my arm, I pulled it out.\n\nGlancing at my watch, I saw that I'd actually managed to get half an hour of sleep. \"Kandikan here.\"\n\n\"Commander, please, we need help! We can't get them out and there's no air getting in!\" It was Mack.\n\nSitting up, I cleared my eyes. \"Can't get who out?\"\n\n\"The bomb shelter. They're trapped in there with our babies. We've tried to get to them but some of the stuff is just too heavy. We need help!\"\n\n\"Have you called Dispatch for help?\"\n\n\"They have no one to spare, sir. It'll be at least an hour or more before anyone can come. The air system's stopped working. We don't think they have that long.\"\n\n\"Ranji?\" Izel stirred, murmuring, \"What's going on?\"\n\n\"It's Mack and Akama,\" I told her. \"Something's happened at their home. I'll deal with it. Go back to sleep.\" I shifted the focus back to Mack, carefully disentangling myself and sitting up. Ran my hand through my hair to try and wake up. \"All right. I'll be there as soon as I can. Hang on.\"\n\n\"Thank you, sir! Thank you!\"\n\nRubbing my eyes, I pushed myself to my feet, then grabbed my trousers and stepped into them.\n\nIzel got up with me.\n\n\"What are you doing?\" I asked. Sitting down, I put my socks and shoes on, then stood.\n\n\"Husband, this is a disaster. You need everyone available. I don't know what I can do, but I want to help.\" Izel replaced the sleeping shorts with a pair of loose exercise pants and found a fresh tee-shirt to wear. Reaching into the large handbag she'd brought back with her, she pulled out new socks and deck shoes.\n\nI glanced at my new wife. \"It might take a while and it's likely to be dirty work.\"\n\n\"I'm the wife of an Air Service commander. It's being made to feel dirty inside that I dislike, Ranji, not the sweat and dirt of honest labor. Cholan is still out there working, helping restore communications. Your other women have had a year to get to know you. I have a lot of ground to catch up on.\"\n\nFrowning, I said, \"It's not a contest, Izel. Each of you has your own place in my heart, and rest assured, there's room for all of you.\"\n\n\"There, you did it again! That is why I'm going with you. I need to know more about this man who makes me feel full of love and hope.\"\n\nI smiled. \"All right.\"\n\nZinja raised her head. \"Commander? What's going on?\"\n\nKneeling down, I kissed her temple. \"I'm going to where Mack and Akama live. Their emergency shelter is blocked and the vents have stopped working. Izel's coming with me. Stay here and take care of everyone, especially your officer. She's in pain and needs help. With everything in chaos, there may be looters so don't leave alone or without a weapon. There are security troopers topside, but if you need anything, give me a call. I'm leaving the rifles here. The shotgun's over there.\"\n\n\"All right. Stay safe, Commander,\" she murmured.\n\nStanding up, I tucked my shirt into my trousers and tightened my belt. Shoes next. Weapon belts. Lanyard. Keys. Mask for the smoke. Grabbed my vest and put it on. Made Izel wear her vest and mask as well.\n\nLieutenant Durie was set up at the dining table, hen-pecking on his tablet while speaking on the radio with the patrols. He jumped up when Izel and I entered the kitchen from the garage. \"Hold on, Rover 6. Something the matter, Commander?\"\n\n\"Mack and Akama just called. They need urgent help at their place and Dispatch has no one else available. Emergency services are at their limit. How many troopers do you have here?\"\n\n\"Ten, sir.\"\n\n\"Perfect. I'll take a cruiser and two volunteers with me. You and the others stay here and protect my family. I want you to continue getting updates on the homes in this area, and note anyone that's trapped but not in immediate danger for later rescue. Send updates to the Watch Commander so they can build a neighborhood profile.\"\n\nHe swallowed. \"Yes, sir.\" Stepping into the family room, he called out, \"The Commander is going out on a rescue mission. He wants two volunteers.\"\n\nFrom ten volunteers, Durie picked out Troopers Jomin and Grannok. I drove one cruiser, while two troopers followed behind us. Izel produced two stim tabs. I nodded, and silently each of us swallowed one of the bitter pills. In no time, we approached First Home, the first of the two communal homes set aside for women troopers with children.\n\nI glanced out the window, looking for the starlight gleaming above us. With the smoke and some clouds, most of them were hidden. As I silently cursed the Atlanteans, it occurred to me the Second Hell was one of darkness, heat, and smoke.\n\nWhen we arrived, it took me a second to take everything in. Izel gasped, and both the troopers looked on in stunned silence.\n\nTwo-thirds of the once-huge two-story residence had been obliterated by an energy blast similar to what had barely clipped my own place. What remained had collapsed and was still burning. The houses on both sides were also fully engulfed in flames. Disturbingly, there were no families out front of those burning homes. Without water, there was nothing we could do but helplessly watch them burn.\n\nAs we pulled up, the headlights revealed a bedraggled Mack and Akama struggling to lift a heavy beam blocking the shelter entrance. The second cruiser parked beside us, further illuminating the scene.\n\nThe women abandoned their efforts and rushed over, both crying with fear and relief. \"They're inside! They stopped responding to our attempts to communicate!\"\n\nGetting out, I opened the boot and retrieved some rope and two pairs of gloves from each vehicle. One vehicle was turned around while the troopers and I tied off the rope to the beam. Trooper Jomin climbed onto the beam and using his belt knife, hacked away at the thick wood creating a notch. I had Grannok get behind the wheel while I made a knot and secured it to the rear towing hitch.\n\nOnce we were done, Jomin jumped down and I patted the hood. \"Slowly now.\"\n\nAs the cruiser edged forward, the rope went taut. Slowly adding juice, the wood creaked. Tires spun in gravel before digging in. Suddenly the beam snapped exactly where we had needed it to. Once the beam was pulled away, the rest of us dove in, working until the rest of the debris blocking the doorway was removed.\n\nGoing to the access pad, I tried to get it to open, but the panel itself appeared to be dead. Which shouldn't have been the case because the main AI is buried underground next to the shelter.\n\nTrooper Jomin brought over a flashlight for us to work by while Grannok used a screwdriver to open the panel. I looked but I was stumped. There were small light diodes alive so I knew there was power, but the panel itself was simply dead, responding to neither touch nor keystroke.\n\nMoving clear of the garage, I pulled out my phone and called Cholan. Izel came over and stood next to me.\n\nCholan picked up on the second ring. \"Hey, how are you?\" Then she coughed.\n\n\"All right myself. Where are you right now?\"\n\n\"Are your ears burning? You're just the person I was thinking about. By the gods, I'd give anything to be in your arms right now. At the moment, I'm about eighty feet up in the air in a bent tower that is being held up by temporary cables and I'm not afraid to say I'm scared shitless. I'm in a safety harness, but it's not really helping. I've got my eyes closed and pretending I'm on a big swing that I need to stay on. The plan was to see if we could erect guy wires to hold up the tower, but I looked and the electronic systems are totally fried. This second tower is a total write-off. I'll be home as soon as I can. I can't wait to get a hug from you!\"\n\n\"You're a brave woman, Cholan. You stay safe! I'd like to give you that hug, but I'm not home. I'm at the first Women's Home and I'm calling for your expertise. The front access pad is unresponsive. We need to get the door open, and we don't have any heavy gear to breach the locks. Any suggestions?\"\n\n\"Hmm. The house shelters are designed to protect. They aren't like a military bunker. Lemme think a moment. I think it's the same series as what you have. I seem to recall there's an emergency switch in the lower-left corner. It'll look like a fuse breaker. It'll be tough to move, but once you move it to the off-position, it should cut the power and cause the locks to retract and allow you to break the seal.\"\n\nGoing back toward the door, I noticed the signal strength dropped considerably. That probably meant there was a seriously strong electrical field nearby. I pointed to the switch and turned to Grannok, the trooper with the screwdriver. \"Use it to push that switch to the off position.\"\n\nHe pressed with some effort, then it snapped over. There was an audible click immediately followed by bolts moving, the release of air, and the door moved inward an inch.\n\n\"Thank the gods!\" Akama, with a flashlight in her hand, rushed down. Mack was hard on her heels.\n\nGesturing to the troopers to follow, I stepped back away from the structure and the signal rose again.\n\n\"Thanks, Cholan. That was brilliant and worked perfectly. Are you coming home soon?\"\n\n\"I hope everyone's okay! I'll be home as soon as I can get down and get a ride. It's been one heck of a long day.\"\n\n\"You need a lift home?\"\n\n\"No, sir. Sergeant Kitam is here on site. He's promised to personally drive me home once we're done here.\"\n\n\"Outstanding. You sound a lot better than when I last saw you. Zinja took you to the hospital. What did they do for you?\"\n\n\"Dr. Jehantli put me into a nano-tank and ran me through diagnostics for about three hours. They discovered some nasty chemical in my body, sir. Can you believe it? They said it was a machine lubricant that's now banned because it's so toxic. The nanobots in the tank cleaned me right up. Meanwhile, Dr. Jehantli designed a shot full of nanobots and he gave it to Zinja. She was pretty sick with nausea and cramps for about half an hour, but after an emergency latrine visit, she was back to her normal self. \n\n \n\n\"While waiting for her to recover, I checked around. Commander, the only place in all of High Guard that still uses that old-style lubricant was the desalination plant. Somehow the contaminant was getting into our water supply. Every time we drank, showered, or used water in cooking, we were taking that poison into our bodies. Dr. Jehantli said it explained why there were so many complaints of migraines and worse the past few months. Everyone is going to need a shot to purge the poison. To think we used to tease Ixma about drinking bottled water all the time. The rest of us kept tap water in the fridge to save money and recycling.\"\n\n\"Janetta needs one of those shots. She can barely function.\"\n\nWhen they're rebuilding the desalination plant, we're going to need to look for where that contamination is taking place. Upgrading to a newer system sounds even smarter.\n\n\"Yes, sir. I asked if I could take the shot home for her, but he said she had to come in for it. They only have a few of the syringe guns on hand. He also said those types of nanobots have a working life of about ninety minutes. These are coded to go to where the lubricant toxins are accumulating in the body, move them to the intestines where the nanobots die, and everything gets flushed from the body together. He was giving shots to all the staff when we left. That was just before lunchtime.\"\n\n\"All right, look, I need to go. Thank you for your expert help! I love you, Island Girl. Bye!\"\n\nPutting my phone away, I turned and jogged back over to the shelter and descended. Izel followed me.\n\nThe first thing I noticed was how hard it was to breathe. The troopers were working to revive some of those not responding and were themselves beginning to struggle.\n\n\"Not here!\" I shouted. \"The air's bad! Everybody out, babies first! Upstairs! Now!\" Then I grabbed the nearest woman, slung her over my shoulder, and headed upstairs.\n\nIzel scooped up a baby and raced after me.\n\nFinding a spot on the grass, I laid the body out. \"Stay here, Izel. Do you know rescue breathing? Okay, here's my phone. Call home and speak to Durie. Tell him to get some oxygen breathers and an oxygen tank from the hospital and get them here now!\"\n\nAfter the second trip, I told Akama and Mack to stay there and work on rescue breathing. \"If they start breathing, turn them onto their side in case they puke and move on! The rest of you, take three deep breaths before you head back down!\"\n\nIt took several gods-awful minutes to clear the shelter. Jomin got the bright idea of loading up on babies and toddlers while the other three lined up and darted up and down the stairs. Then we worked on carrying up the adults.\n\nAbout the time the third cruiser arrived with two more troopers, we were bringing the last of the women upstairs.\n\nAt that point, I was convinced we had lost a few. Five adults and six of the kids. Mack and Akama kept working on the babies, trying to get them to breathe while Izel and the other two troopers gave drinks of bottled water and helped reunite mother and child. To comfort them, breasts were freed and scared children suckled.\n\nThe new troopers had brought one large oxygen tank hooked up to four breather masks. Those that kept coughing were ministered to first.\n\nCalia had arrived with them. She hurried over to one of those not responding. In the dark, she told Mack and Akama, \"Those not breathing, bring them to me! I need to touch them!\"\n\nWhile those watching her prayed to whatever benevolent god would listen, Calia closed her eyes. Then with a muted cry, she fell over. Three adults and five kids suddenly jerked and started coughing. Two grateful mothers joyfully scooped up their crying babies, holding them close and rocking them while the others were tended to.\n\n\"Give them oxygen!\" I ordered.\n\nMoving to Calia, I checked her pulse. Slow but present. Whatever she'd done, she'd worn herself out. With no clue what to do other than to let her rest, I pulled her up into my lap and held her close.\n\nIzel settled next to us. Putting her arm around me, she caressed Calia's face, murmuring, \"She's truly a gift from the gods.\"\n\n\"Lady Calia is a genuine healer!\" Akama declared as she rocked her emotional daughter.\n\n\"We lost Sofana and her daughter, Vaela,\" Mack remarked sadly, Tambo sucking needfully at her breast. \"But without Lady Calia, we could have lost everyone!\"\n\nThe others looked at Calia in awe, taking in the events they'd just witnessed.\n\nLooking around, I noticed some of my missing troopers sitting around us. Haytam. Laylandi. Cooma. Vaniksl. Feena. Awalli. Sooksa. A few others that I knew by sight if not by name.\n\n\"What happened?\" Cooma choked out, clutching her son, Bejo.\n\n\"The commander and Lady Calia saved you!\" Mack declared.\n\n\"No, this was a group effort,\" I asserted. \"Izel, Jomin, and Grannok all pitched in. You, too, Mack and Akama! When you couldn't get help from Dispatch, you didn't give up and you called me. All of you are heroes. Llam nuqan! Well done, everyone. Well done!\"\n\nThe women continued to calm their children.\n\nOf course, my phone rang again. I looked at it, but didn't recognize the number.\n\n\"Who is this?\"\n\n\"Commander Kandikan, this is Sammi Reo. No, I'm not trying to get a story. At least, not at this particular moment. Look, we both know your people need help, and if you don't take steps, you'll have a lot more casualties.\"\n\n\"What sort of help?\"\n\n\"Everything's on the table, Commander. Drinking water. Food. Medical supplies. Building supplies. Mortuary services. Whatever you need is open for discussion.\"\n\n\"You have my attention. When?\"\n\n\"Within an hour. We just aired another story showing rescue workers pulling out the bodies of little kids at the elementary school. Even at this late hour, ordinary citizens are calling in, outraged, and offering to help. I had to do something, so I've been waking people up. The Deputy Governor of Hassenyeet State in Tellumgu and the City Manager of Capisco and their aides will be participating. We also have some prominent business leaders willing to help. If you can't make it, please tell me who to contact.\"\n\n\"No, I'll be there. Where is this meeting taking place?\"\n\n\"Somehow I thought you would be interested. We're set up in the building immediately south of those assigned to Emilo Bitawel and the others from Chuman State. See you, Commander.\"\n\nThen she hung up.\n\nWith some effort, I stood up, holding Calia in my arms. I looked around at all the tired, soot-covered faces. There was no food, water, or latrine here. Their home was gone as were all their possessions. Where were they going to stay? My home was damaged, but the only thing to do for the moment was to take them there.\n\n\"All right, troopers,\" I said. \"Get yourselves and your kids together. I can't offer much, and parts of it are open to the night sky right now. But there's room in the gym and... we'll find someplace for you to sit or lay down. We'll load up the cruisers and we'll take you to my home. Also, when you get there, unload the blankets from the cruisers. Even the emergency foil ones. Once the people are unloaded, come back and collect any usable supplies from this shelter and take them to my place. We'll work on finding everyone better quarters tomorrow. When you get there, have Durie report your names and situation to the Watch Commander.\"\n\nThere were many grateful looks with their acknowledgments.\n\nWhile the first two sets of passengers were loaded, I called Durie and told him what to expect. \"Try to get the ChoCac out of the garage and use a blanket or something to block off the missing garage door.\"\n\n\"Yes, sir,\" he replied.\n\n\"I have to go to an important meeting. If you really need to get a hold of me, I may or may not have my phone on. If it's something the Watch Commander can't assist with, you can find me at 3800 Ridgeway, Conference Building B. Oh, and if Captain Tlacotli isn't up by ten-hundred hours tomorrow, please get her up and escort her to the Nanotech facility, make sure she gets her injection, and after she recovers, returns safely home.\"\n\n\"Understood, Commander.\"\n\nThe rope was coiled and put away as the other two cruisers drove off into the dark. The third cruiser stayed with us, the headlights and emergency lights comforting those of us who waited in the chaotic, smoke-filled night. It was with a disturbing realization that many of the lights across High Guard this night weren't lights at all, but raging fires, and many of them burning out of control.\n\nWithin an hour, we were all back at Cirrus Drive, getting people settled. On the last trip, we even brought Field Corporal Sofana and her daughter Vaela, laying them next to our other honored dead, putting both into the same body bag. Many of the women troopers simply touched them briefly, muttering a heartfelt goodbye before attending to the needs of the living.\n\nIzel roused her cooks and set them to preparing simple hot meals for everyone. Bottles of chilled water were gratefully accepted.\n\nI carried Calia downstairs. As I laid her beside Ixma, Calia roused a little. \"I'm sorry I couldn't bring Sofana back. Her baby was gone. I couldn't find her spark, and Sofana refused to come back without her child.\"",
        "Giving her a hug and a kiss on her forehead, I said, \"By the gods, Calia, you have nothing to apologize for! What you did was amazing. Look, I need to leave. There's more that need help. You stay and rest now, you hear me?\"\n\nShe mumbled and then passed out. I kissed her cheek and caressed her face.\n\nIxma's eyes were open, watching me.\n\nI whispered, \"The First Home for the women troopers is gone, so I brought them here. We'll work on finding them new places tomorrow. Your job is to take care of our girls and to make sure Calia rests.\"\n\nLittle Mama simply held out her arms and I gave her a hug and a kiss, too.\n\nThen I went back upstairs. Izel handed me a bottle of electrolyte water and I downed it.\n\n\"You're going out again, aren't you,\" Izel said.\n\n\"I have to,\" I said quietly. \"The Seven Nations is offering emergency supplies, and I've been asked to broker those deals.\"\n\nLooking at my watch, I saw it was just after zero four hundred. \"We normally have around fifteen people living in this house, Izel. At this particular moment, I think we're above sixty. This situation is dire, but there are many other Imperial citizens in even worse shape. With the Greys helping Atlantis, we sometimes lose a Condor transport, its crew, and all of its cargo. Now Atlantis has this new technology. Getting resupplied will be even harder. Even with emergency stores, High Guard will soon run out. This meeting may save thousands. I have to go.\"\n\nShe moved closer and gave a heartfelt smile as I put my arms around her. \"Let me go with you, Husband. I can offer you my advice and my support.\"\n\n\"All right. I'm going to go up and see if I can find a fresh uniform--\"\n\n\"No, that's the wrong approach,\" she said, shaking her head. \"Your uniform shows exactly what you've been doing -- saving lives. Let the soot and dirt show the urgency of our need. The uniform shows you are a warrior, still ready to meet the Empire's foes, but also undaunted.\"\n\n\"All right. Before we leave, I need to talk to a few people first.\"\n\nRetrieving my laptop, I sent a quick message to Tik\u00fan Travel, quickly outlining the initial damage estimates. Then I wrote that I was going to negotiate for supplies from the Seven Nations, and then sent the email. Next, I called C&amp;C.\n\n\"Command and Control, Night Operator. How may I direct your call?\"\n\n\"This Commander Kandikan, Air Security. Is the Commandant available? If not, who's in charge at this time?\"\n\nThere was a short pause. \"Voiceprint confirmed. Commander, the Commandant is in Operations, directing the relief effort. I will see if he's available.\"\n\nAnother pause. While I waited, my laptop pinged, letting me know I had new mail. It normally did not do that. Checking, I saw it was a reply from Tik\u00fan Travel. It read,\n\nOriginal travel orders technically never rescinded. Do what you need to do to save vacation resort. If you have not done so, bring your new wife with you. -- Tik\u00fan Travel\n\nI reread it, then chuckled.\n\n\"Thank you for holding, Commander. I have Commander Sangoo from Base Operations on the line for you. Transferring.\" Another short pause, then, \"Kandikan, the Commandant is busy. What is it that you need?\"\n\n\"I'm going to meet with Sammi Reo, the reporter from the Seven Nations. She's arranged a video teleconference with their state government and the city of Capisco to obtain emergency supplies. I thought the Commandant would like to have one of his staff work with me on the negotiations.\"\n\n\"What? You aren't authorized for that!\"\n\n\"Look, Sangoo, I'm not going to argue with you! I'm telling you what's going to happen! We have no working water supply. We have thousands dead and more thousands injured and many homeless. Hundreds are still missing. We also need food, medical, and building supplies. The airfield is out until repairs can be made. On top of it all, some of the fires are still burning out of control! Relay my information and request or I'm hanging up right now.\"\n\nAnother pause. \"Rikoletsi here.\"\n\nI quickly explained I was meeting with Reo to discuss aid and purchases from the Seven Nations, and that I was bringing Izel with me. I added that I had also received approval from our mutual friend from Tik\u00fan.\n\nHe chuckled. \"Fortune seems to follow you, Commander. I wish I could be there with you but elements of the Atlantean Navy are moving closer, and we're working with High Command and the Naval Service to respond. We'll do our best to discourage them from coming any closer, but it could easily turn nasty. We're also trying to coordinate rescue operations. General Barankoshto is overseeing that part of operations. \n\n \n\n\"You've shown yourself to have a cool head under pressure, Commander. Be careful about any commitments. Lady Izel is sharp and thinks on her feet. If she's available, take her with you. Our primary need at this time is water. The tanker trucks have been loading up with seawater, but it's not enough. By the time one building is contained, three more buildings are in flames. Worse, the seawater causes clean-up problems afterward. See if you can get a freshwater line in from Capisco. It's against regs, but if we don't have fresh water soon, we're going to lose a lot more people. Right now, we're primarily focusing on putting out the little fires to keep them from spreading and putting in some fire breaks. We expect the numbers of dead, injured, or missing to rise throughout the night. Record the meeting and send a copy to me afterward. Any questions?\"\n\n\"No, sir. I'll do my best, General.\"\n\n\"That's all anyone can do, Son.\"\n\n\"Rikoletsi out.\"\n\nAfter putting away my phone, I closed up the laptop. Securing it into my satchel, it settled onto my shoulders.\n\n\"Well, Izel, it's official.\"\n\nShe cocked her head at me. \"What's official.\"\n\n\"I've been told by General Rikoletsi to take you along because in his words, 'you're sharp.' How does it feel to have others recognize your skills and abilities?\"\n\nIzel gave me a shy smile, answering quietly, \"It feels good.\"\n\nJust then, Cholan stumbled the front door, and my Island Girl looked dead-tired. She saw me and half-stumbled into my arms.\n\nI squeezed her until she squeaked even as she squeezed me back. I brushed at a dirty smudge on her nose, then kissed her. She melted again in my arms.\n\nThen I realized who'd brought her home. \"Sergeant Kitam brought you, didn't he! Grannok! Get in your cruiser and flag down the vehicle that just left. It's probably headed for the Ground Service barracks. Turn it around and bring it back here. I need to speak with that man!\"\n\nTrooper Grannok and his partner, Jomin, shot out the door. Soon, lights and the siren were on as the cruiser flew down the street.\n\nCholan blinked as I took her back into my arms. \"Welcome back, Island Girl.\"\n\nShe sighed, burrowing into my chest. \"I'm so tired, right after this hug, I'm going to get some water and then go to bed. No hurry about the hug, though. Take your time. I'm down with five, six hours. Seven, tops.\"\n\nIzel rolled her eyes and grinned at us.\n\n\"In the morning, get the others to tell you about the men who attacked our home.\"\n\nHer head jerked up and she stared blearily at me. \"What?\"\n\n\"Oh, yeah. Twenty-two confirmed dead. We lost Wit's father, two of Izel's guards, and her servant, Ando.\"\n\n\"No shit? Holy...\" Then Cholan's eyes caught sight of the missing east wall of the living room and she broke from my embrace, taking a slow walk into the living room, and noticed that as she took steps the carpet made squishy sounds. \"Holy fuck!\" Alarmed, she shot a glance at me, then stared at where Terra and Salvia's room used to be. \"My room?\"\n\n\"A corner's missing is all, but I don't think it's safe to sleep in. Besides, the sprinklers went off and everything got wet. The bed and blankets are soaked. We stripped it down and propped the mattress up onto its side to help it dry out.\"\n\n\"Damned Atlanteans! Where am I supposed to sleep tonight?\" Then she apparently noticed that some of the troopers standing around had small children in their arms. \"Are these the women you rescued?\"\n\n\"Yeah. Their home is completely gone. Look, the gym and the west-end bedrooms survived, but they have some smoke damage. There are emergency mattresses and blankets downstairs in the shelter. It's not terribly comfortable, but there's no smoke down there. The vents at the entrance are keeping it from coming in when you open the door.\"\n\nShe gave me a bleak look. \"I'm so tired. I can't believe this.\" Tears began to spill down her cheeks.\n\n\"You made a big difference, helping to restore that cell tower. It could have been much worse, Island Girl. We only lost a few people, and all of your High Guard family are safe.\"\n\nShe just nodded, her face bleak.\n\nScooping her up into my arms, she drank down the water bottle as I carried her downstairs. Exhausted, she was asleep even as I laid her down on the other side of Calia. A kiss to my island girl's forehead, then I headed back upstairs.\n\nA few moments later, two vehicles returned to our front drive. A few minutes later, Grannok, Jomin, and Sergeant Kitam entered.\n\nDirty and tired, the mobile construction sergeant blinked at me. \"Commander? Is this something that can't wait till tomorrow? My crew and I have put almost two full shifts already.\"\n\n\"Sorry to keep you from your sleep, but no, it can't wait. I'm headed to a meeting right now. High Guard needs fresh water and I have the authorization to get it piped straight from Capisco if we can. Right now High Guard has no freshwater. I need you there because once the agreement is reached, I will need you and the rest of your mobile construction team to get to work right away. I will also need you and your team to work with the Capisco people. It's against regs but we need to get water in before most of the war base is burned to the ground, and that may mean letting their civilian crews work beside ours.\"\n\n\"What about my men?\"\n\n\"They will come with us. I'm sure we can find someplace for them to crash until they're needed.\"\n\nHe gazed at me a moment, then gave a tired sigh. \"Okay, Commander. I guess I'm your man.\"\n\nGrabbing our vests, we drove to the Ground Service VIP housing area, Kitam's huge utility-construction vehicle following us.\n\n* * * * *\n\nPart 14 -- Negotiations for Aid\n\n* * * * *\n\nAfter greeting and reassuring a scared Emilo and the rest of the parents and teens, Sammi Reo led Izel and me to a nearby building. Inside was a conference room where her cameraman was setting up connections. Three Air Service media specialists were puttering about, one of them working with the cameraman on connecting cables. A large portable screen was set up in the middle of a table and we took adjacent seats at the end.\n\nKitam and his crew were given a liter of bottled water and shown to some empty beds. After downing the water and kicking off their boots, they collapsed into a deep sleep.\n\nI explained the need to record the meeting, and Sammi said she'd expected that. \"This will be a historic meeting, Commander. We will record the entire meeting, and are happy to make an extra copy for you.\"\n\nThen the meeting began. Greetings and introductions were made, and several people were on the large monitor, some of them still yawning. I counted five different locations.\n\nInitially, there were demands to do the aid as a single package deal, but with a glance from Izel, I refused that outright. So we settled down to individual aid packages, each to be negotiated separately. Surprisingly, a few of the business reps seemed to be relieved at that, as they would not have to remain after their portion was signed and done. The single package deal was likely something their state government had been pushing.\n\nRestoring access to fresh water was of paramount importance.\n\nAfter three hours, an agreement with the City of Capisco was finally reached with oversight by the state officials. There were plans to do something temporary above ground, but again I refused. I had no idea how long it would take to rebuild the desalination plant or whether the War Ministry should scrap it and rebuild it from the ground up. What I knew was any surface piping would be vulnerable to another air attack.\n\nThe cost was enormous. Forty-two thousand credits. Capisco agreed their utility crews would work with ours to dig a huge trench across the no-man's land and connect up to our system. Backhoes would dig the trenches parallel to the road while their trucks brought up the huge connection pipes. Ground Service would provide the minesweepers to clear the work area as well as the safety zone; Mobile Construction had a large crane capable of moving and laying the huge pipes needed.\n\nI used the Bank of Atlantis card to pay for the work. Izel stayed while documents were signed while I roused Sergeant Kitam.\n\nQuickly explaining what was needed, Kitam left a message for his captain to call back. In the meantime, Kitam got on a separate phone and talked shop with the Capisco water utility representative. The Sappers Unit began removing mines in and around the work area. Details were worked out while I coordinated with the Base Commandant's Office so the Sappers could get to work.\n\nThe Capisco City Manager informed me that he had thirty-one firemen and three doctors and eight nurses volunteering to come to High Guard to assist wherever we needed them. I was eager to have them and requested a digital list of names and basic personal information sent to Air Security so that temporary guest ID cards could be generated and issued.\n\nMeanwhile, Izel and I stretched our legs, took a latrine break, and found some cahault before returning. As it was past dawn and five hours into the talks, Izel and I both took two more stim tabs.\n\nI had just checked my watch and we were approaching zero-seven hundred when Doyya and a dozen troopers entered the room. I was surprised to see Mack and Haytam among them. Once Doyya spied me, she headed right over. By the look on her face, I could tell it was serious.\n\nI got up and met them off-screen. \"Whatever it is, lay it out fast.\"\n\nShe nodded and plunged right in. \"Your phone was off, Commander. When I went to your home, Lieutenant Durie said you were here. Second Home has been hit.\"\n\n\"Hit? What do you mean? Were they hit by the Atlanteans? Was there a fire?\"\n\n\"No, sir.\" She took a breath. \"The building itself is intact, but all the residents are gone. Troopers, care-givers, the pregnant women. There were signs of a scuffle, but all the people are gone, Commander. Kids, too. And except for some service weapons, everything else was left behind. Even diaper bags.\"\n\n\"Holy gods, Doyya. That sends all kinds of flags up for me. That's a lot of people to go missing all at once. All those kids? Someone somewhere had to have seen something. With the Main Gate on lock-down, they can't get off the war base.\"\n\n\"There's more, Commander. An hour ago, a Ground Security patrol unit found three of our missing troopers from Second Home in a narrow alley near Avenue 20 and Royal Park. That's just inside the Warehouse District. All three women were without shoes, their feet abraded which indicated they had walked a distance barefoot. Their faces had been severely beaten and they were each killed with a single gunshot to the back of the head.\"\n\n\"Who'd we lose?\" I asked.\n\n\"Corporals Mia and Sotsi, and possibly Sergeant Bekslana. Hard to tell as her face was such a mess.\"\n\nClenching my fists, I let my breath out slowly. \"Seven hells. That Ground Security patrol didn't see any sign of the others?\"\n\n\"No, sir. They stayed, cruising the area while we checked out the home, but I had to let them go attend other emergencies. There are still so many fires out of control.\"\n\n\"I'm aware and working to get us water.\" Clenching my fist, I scowled. \"The only way they could have disappeared is if there's another way onto the war base. Doyya, do you remember last year, when the man who took a shot at me and General Barankoshto ended up dead, with bullets to his head before his body was burned?\"\n\nDoyya nodded. \"Yes, sir, I do. Stimmi and 'Mara were with me. We never did find out who killed him or how he got away.\"\n\n\"What is your assessment of the situation?\"\n\n\"We have a rat-hole, Commander, and the rats are coming and going onto the war base at their own time of choosing and in whatever numbers they can sneak in. It explains how that force got onto the base just before the Atlanteans hit us. I think this was from the local cartels, possibly as revenge for helping the civilian police shut them down. If the Minister knew about this secret entrance, more of his agents would have come, and they would have taken more of us from our own beds.\"\n\nI nodded. \"I agree with you. I truly want to help find our missing troopers and their families. Unfortunately, I've been tasked by the Base Commandant to handle negotiations for emergency supplies, especially fresh water. Captain, you are my Second. Find someone to watch the shop but this is now your top priority. You may be looking at a minimum of twenty or more armed criminals, probably more, so be prepared to shut them down with deadly force. Captain Lovyanchiti, I want you to search everywhere! I don't care if you have to dig down to bedrock, you find our troopers and their families, and bring every one of them home, even the dead ones. And plug that rat hole! If it's a choice between getting our people home safe and killing or capturing those who took them, the safety of our people comes first! They cannot be replaced!\"\n\nDoyya snapped to attention, saluting. \"Yes, sir!\"\n\n\"I'm going to call General Barankoshto to get you some support. You need some dedicated soldiers able to bring some heavier firepower to bear. I'll get you what I can. I know a lot of them have been pressed into service trying to contain the fires, but there should be some units in reserve. Captain, show those sons of bitches what it means to come into our backyard and provoke the Empire! Do whatever you need to do, Captain. Whatever happens, I'll back you. Good hunting!\"\n\nDoyya and the rest of her crew snapped a salute, which I returned, and they departed.\n\nVoyacherno's skull might be doing duty as a urinal but this rat hole was likely created with his permission if not his participation, but it was my duty to fix it.\n\nSammi Reo came over. I could see she was curious, but I said I couldn't say more at this time. \"They're ready to continue if you are, Commander.\"\n\nI asked for fifteen minutes more, as I had to give an update to my superiors.\n\nThe reporter said she would inform the representatives.\n\nIt took several minutes, but I managed to get a hold of General Barankoshto and explained the situation. After a bit of swearing, she confirmed that many of her warriors were fighting fires and doing search and rescue, and the absence of water combined with the loss of many of our fire trucks was hampering efforts.\n\n\"I have two companies of infantry in reserve. I will mobilize one and make them available for your Second to use at her discretion. I will send you the company CO's contact info to her email.\"\n\n\"Thank you, General.\"\n\n\"I'm aware of your own critical mission, Commander. You can thank me by finding your people and killing the bastards who took them. Leave no stone unturned. Now I need to figure out how to try to give those in the field time to rest, eat, and sleep before going back into the fray.\"\n\nAnd she hung up.\n\nNext, I called the Main Gate and gave them orders. The two incoming lanes were to be switched to two-way traffic while closing off both exit lanes to allow the construction crews and the huge crane space to work.\n\nThen I called Dispatch and was forwarded to the Watch Commander.",
        "\"Mangadeen, here.\"\n\nLieutenant Mangadeen was Jay's Second.\n\nI explained there were firemen and medical personnel from Capisco volunteering to lend a hand during the current crises. We would be given basic electronic records from the City of Capisco. \"Have the Seven Nations' volunteers scanned for explosive devices and given a sniff by one of our special dogs. If they pass that, issue them temporary ID cards and lanyards, and get them assigned High Guard partner units. Be on the lookout for those files from the City of Capisco. They and their files should be arriving within the next few hours.\"\n\n\"We'll take care of it, Commander,\" he promised.\n\n\"Anything I should be aware of?\"\n\n\"We are stretched beyond thin, Commander. You should know that Ground Security is reeling. It was discovered earlier this morning that Commander Jaykoor, his family, and all their servants perished from smoke inhalation. Apparently, after their emergency shelter lost power, the smoke poured in and they couldn't escape. Captain Terkouri is still at the hospital in critical condition, and an hour ago it came over from Dispatch that Captain Chochoonitsi was injured by burning debris while helping with rescue efforts. His current status is unknown at this time.\"\n\nJaykoor was CO of the 1267, my counterpart at Ground Security. We weren't close, but I had liked the man and we'd gotten along well. Terkouri was Doyya's counterpart, and Chochoonitsi was the head of their CID company and Bennet Kilyana's boss.\n\n\"Seven hells. All right, have Dispatch convey to everyone our condolences on their losses. Do the best you can, Mangadeen. I'm still off my phone till these talks are completed. We are in the process of getting fresh water restored, hopefully by the end of the day. If you need to get a hold of me, send over a cruiser.\"\n\n\"Water would be most welcome. Lieutenant Raltikon is out in the field, helping with search and rescue at the Naval side. Apparently, most of their officers are at sea and many of those ashore were hard hit with the attacks on the Repair Yard. I'm here until relieved by Lieutenant Fortri. He is expected to arrive later this morning. We'll muddle through till you and Captain Lovyanchiti are back, sir. \" He hung up.\n\nAs Izel and I moved back to the conference table, she murmured, \"I overheard some of what you and the Captain were talking about. When it rains, it pours. Your Second, she seems to be a competent officer.\"\n\n\"If anyone can bring our people home, she can. She'll find them.\" Then I smiled at my wife. \"I think you'd like her.\"\n\nGiving me a heartfelt smile, she said, \"I look forward to getting to know her.\"\n\nDuring the discussions, the Second in Command for Kitam's company arrived. After he set about waking up his tired men, I stepped aside to briefly confer with him.\n\nArrangements were made to meet with the Utility Commissioner's rep to refine the details of the water connection project. To speed the process, our people would first clear the work area and a hundred yards around of any mines. Once that was done, they immediately started surveying, updating their plans as the huge trench was dug. The goal was to dig from both ends and meet in the middle.\n\nThe mobile construction officer told me, \"The crane's moving to the Main Gate as we speak. Capisco is bringing in the pipes from their reserves right now. We're putting in shut-off valves at both ends, and setting up a booster pumping station near the Main Gate to increase the water pressure. It might leak, but if we really work fast, we can get it laid and connected by the end of today.\"\n\n\"Safety first, Lieutenant. I especially want you to be thorough with ensuring the mines are cleared. I don't want any accidents for Sergeant Kitam or his crew or for the Capisco utility workers.\" The lieutenant, Kitam, and his tired crew departed.\n\n\"I think I'm going to owe them a lot of beer,\" I muttered.\n\nIzel chuckled and squeezed my hand under the table.\n\nI let Izel open the next stage of talks while I called the Ground Service hospital, and with a little browbeating, eventually spoke to someone in administration. I explained I needed a list of supplies necessary to continue medical operations and to send it to my email address. The clerk promised it would be done.\n\nWhile it was a given that the regular shipments of food would continue, emergency food and supplies were needed to feed the displaced survivors.\n\nIt was then the Seven Nations state reps revealed part of what they wanted. Our advanced tech. Especially in the manufacture of our solar panels and batteries as well as the medical nano-tech. If it had been up to me, we'd work out something to sell them the solar tech. However, my hands were tied with both.\n\nOn the other hand, our initial deal of treating one patient a month at cost had gotten Emilo and the kids clearance to travel to High Guard. I countered by offering the treatment of more patients. Another two hours, and it was agreed that for the next ten years we would treat a total of six patients from the Seven Nations each month, three patients were to be at-cost and three patients would be treated gratis. In return, we would have the national and state custom duties on all items purchased for the next year reduced to one percent before returning to previous price levels as well as clearing the legal niceties to make all these talks pass without interference.\n\nIzel and I continued working through the morning with different parties. Around ten hundred, someone must have realized Izel and I needed to eat, and hot plates of food and bottled water were put in front of us.\n\nEmergency food, blankets, clothes, and the like were loaded for delivery even as we spoke, with a fair portion of the supplies even being donated. The pictures of the damaged schools, the battered bodies of dead children, and the burning hospital had raised a lot of sympathy within the Seven Nations. The cost for purchasing additional supplies and for moving the goods to High Guard I paid for out of pocket. Twenty-seven thousand credits.\n\nAfter that, I had to check my balance. Just on the plus side of eighty-three thousand remaining.\n\nAbout an hour after noon, the personnel files from Capisco came through and I forwarded them to Mangadeen. He let me know that Captain Lovyanchiti and Lieutenant Ja-See had found the entrance rat hole and were investigating, but would be out of direct radio contact. I raised my eyebrow at that but figured if my Imperial Security aide was helping, that would be a good thing. As for reinforcements, there were two platoons of power-armored mechanized infantry and three platoons of regular infantry assisting, one with war dogs and one with recon drones. Supporting the ground soldiers were two platoons each of type-M and Type-G ChoCacs. He had no other news than that. I thanked him and hung up.\n\nI said a quick prayer to whatever friendly gods that would listen to watch over Doyya and the rest of my people, and then focused on the business at hand.\n\nSammi kept her own cameras rolling the entire time. While it seemed that sometimes she made note or two, she didn't stay through the negotiations. Instead, she and one of her two cameramen periodically came in and watched from the sidelines, then made sure there were no issues with the video recording. The Air Service media specialists went off to do things at C&amp;C.\n\nThe most urgent supplies -- except for medical -- were thankfully quickly taken care of. It was nearing noon and Izel and I were worn and in danger of losing our voices. Even with another pair of stim tabs each, Izel and I were dragging. Even with stimulants, you can only push yourself so far before you fall down and have to sleep.\n\nThe Seven Nations agreed to take a break for four hours.\n\nI called Sergeant Kitam for an update, and to my surprise, he said that the booster station was in place and they were in the process of cutting the final piece to join the two lines of pipe. The city had brought in a second crane to help lay the pipe, and over two hundred workers with shovels and a dozen civil engineers were moving at a rabbit's pace to meet in the middle. A few minor injuries, but nothing serious, and thankfully, no injuries from the mines. The survey crews had been continually making adjustments so the pipes would meet as intended. They expected the work to be completed for initial testing within the next few hours. He sounded distracted so I thanked him for the update and hung up.\n\nIzel beamed in delight when I told her the good news.\n\nWhen I checked, there was still no email from the hospital. After setting my alarm for when we needed to be back at the table, I sent a reminder, including a copy to Dr. Jehantli, that I urgently needed a list of the most critically needed medical supplies. However, I realized this lack of response might be the result of the attack and not the fault of anyone in particular. Then I logged off and put away my laptop.\n\nWith a little searching, Izel and I found an empty barracks adjacent to us. We passed on the rows of bunk-beds and went straight to the NCO quarters with its private room and too narrow bunk. Troopers Grannok and Jomin took up his station outside our door. At my instruction, one was to take a two-hour nap and switch off while the stood guard.\n\nAfter closing the door, we kicked off our shoes and laid down together. I had to do some shifting to get the keys from digging into my leg. The cot was really narrow, and we were forced to take off the vests and hold onto each other so as not to fall off. \n\nAs she settled against my chest, I murmured, \"Thank you, Izel. I literally could not have done this without you.\"\n\nPulling up the single rough-spun blanket, she snuggled into the crook of my arm and found room for her leg by draping it over mine. \"My pleasure, Husband. You accepted my advice... with respect... so proud... your wife.\"\n\nExhausted, Izel was already asleep, gently snoring against me.\n\n\"I love you, Mrs. Kandikan.\" The last thing I remembered was giving her forehead a kiss.\n\n* * * * *\n\nPart 15 -- Kirfan\n\n* * * * *\n\nRanji! Danger!\n\nI bolted upright, looking around.\n\nOne of the troopers yelled, \"Stop! No visitors allowed in here! Halt!\"\n\nA stunner was fired, immediately followed by several shots, some of them punching through the thin walls. A long-empty coffee cup shattered on the desk.\n\nRolling us off the cot, I landed partially on Izel, causing her to cry out. Reaching up, I barely got one of my arms into my vest when a round slammed into my side. The vest held.\n\n\"Izel! Get up! Hide in that corner!\"\n\nWith a combination of a lift and a shove, I put her behind me. Tossing over the cot, I put it crossway in front of the doorway; not to bar the door but rather as an obstacle to prevent easy entry. Tossing Izel her vest, I snapped out, \"Put it on!\"\n\nPulling the wheeled steel chair in front of me, I pulled the Caiman into a standard 70/30 grip and flipped off the safety. If they had stunners, the metal would deflect most of the charge, grounding it out and rendering it ineffective. Or so I'd been told.\n\nEyes wide with fear, Izel huddled in the corner. \"Ranji? What's happening!\"\n\n\"I think your brother found us. Get your vest and helmet on, stay down and stay behind me.\"\n\nBarely a second later the door crashed open and she yelped in alarm.\n\nSeveral men in blue, red, and white livery and armed with heavy stunners tried to push in. The makeshift barricade didn't stay in place, but it sure created a bottleneck. Several stunners pointed our direction went off, but while my limbs tingled, the chair did its duty.\n\nShifting targets, I rapidly emptied the magazine, brass casings bouncing on the concrete floor. Even as they were killed, their bodies were yanked away, and more tried to get us.\n\nYells from the other room.\n\nAs the last round ejected, I dropped it and drew the Talon. Muscle memory kicked in, and the safety disengaged as the pistol was charged. Chainmail was cheap and commonly-used body armor, but flechettes allowed me a greater target area, the needle points penetrating the rings with ease as the spinning fins shredded flesh.\n\nMore yells and curses as more men charged the door and fell.\n\nThe second magazine was mostly empty with the survivors finally falling back. The air stank of spent gunpowder. If I saw anyone still alive in the doorway, I shot them again. I counted five dead, plus who knows how many dead and wounded were pulled away. The Caiman held twelve rounds while the Talon held twenty-five.\n\nMore shots began punching through the thin walls.\n\nA new voice angrily yelled, \"Stop, you idiots! No guns. Stunners only!\" There were sounds of a scuffle, and then two more shots.\n\n\"Ranji!\" Izel cried out right behind me. \"I'm scared!\"\n\n\"Stay down, Izel! They want you alive, and I intend to use that to our advantage.\"\n\nMeanwhile, during the temporary cease-fire, I replaced both spent magazines and switched back to the Caiman, chambering the first round.\n\nA voice called out, \"It's Lady Ocot\u00e9pan we want! Send her out and we'll let you live!\"\n\n\"You come in here weapons blazing and expect me to believe that shit?\" I yelled back. \"This is an Imperial War Base, you morons! Anyone can see that this fuck-up has all the hallmarks of that good-for-nothing idiot Kirfan!\"\n\nI reasoned if they thought I was crazy they might hesitate at a critical moment.\n\nA different voice replied. \"Who's there? Is it that self-important prick, Kandikan?\"\n\n\"Kirfan, if you killed my troopers, I'm breaking both your legs and then I will see you before a firing squad for the traitor you are!\"\n\n\"You can't touch me, you Vedan bastard! I'm the ruler of all Nahua and you are trapped! If you want to live, send out my sister!\"\n\n\"Not bloody likely!\" I shouted back. \"Were you born this stupid? Insults, threats, and now lies you don't intend to keep. On top of that, you demand this, demand that, and not even a single word of congratulations! Bet you forgot to bring the wedding present, didn't you! Kirfan, you are the absolute worst brother-in-law in the entire world!\"\n\n\"What? It was you?\" His voice rose in rage. \"You--you defiled my sister, you Vedan filth! You have shamed my family! Shamed it!\"\n\n\"Kirfan, is it true you fuck chickens? And is it something you do by choice or is it that you see a feathered butt and can't keep your dick in your pants? I gotta know!\" I decided to use both pistols at the same time, keeping the heavier Caiman in my right hand.\n\nIzel gasped out, \"Ranji!\" Then she exclaimed, \"Kirfan fucks chickens!\" and started giggling. The helmet's audio boosted the volume of her words.\n\n\"Stop saying that! Stop it, I say!\" Kirfan screamed, then yelled, \"Ten thousand credits to the man who kills that bastard! Kill--!\"\n\nJust as I raised my weapons, I heard a crash from the other side of the building, immediately followed by the distinctive sound of dozens of heavy stunners going off, furniture crashing, and in between, a few short distinctive bursts from heavy assault rifles.\n\nA megaphone barked out, \"Down, down, down on the ground, hands away from your body! Imperial Ground Service! In the Emperor's name, surrender at once or die! At the count of three, anyone still standing or holding a weapon will be shot!\"\n\n\"I am Lord Kirfan Tenochta, ruler of Nahua State! You cannot detain me or my men, and you cannot arrest me!\"\n\n\"That's where you are wrong! Lord Kirfan, by direct order of the Base Commandant, you and your men are under arrest! You are charged with murder and treason. If you resist, you and your men will be killed right here and now! The count is now two!\"\n\nGlancing back at Izel in the corner, I saw my reflection in her helmet's visor. Rising cautiously, I peeked to see what I could into the outer room.\n\n\"All right, all right, we surrender! Don't shoot! You'll regret this, all of you! I know the Minister of Imperial Security personally! You hear me? Personally!\"\n\nLifting my head up, I looked over the bodies barricading the doorway. Ground Service stood about in heavy battle armor, their assault rifles covering the men getting onto the ground, and at least five aiming their weapons at Kirfan.\n\nThose 8.5mm full-metal jacketed rounds make awfully big holes in bodies. When a man is hit by one of those bad boys, he tends to stay down for the count.\n\nAn officer instructed, \"Sergeant, cuff him! And no need to be nice about it either.\"\n\n\"Yes, sir. Hands behind your back, you treasonous bastard!\"\n\n\"Captain, I protest!\" Kirfan exclaimed.\n\n\"Sorry, I meant to say, hands behind your back, Lord Treasonous Bastard.\" The sergeant roughly jerked Kirfan's hands behind his back and cuffed him.\n\nFlipping the safeties on, I holstered both weapons. Picking up the empty magazines, I put them back onto their respective slots upside down to denote they were empty or only partially full. Then I took a full breath, exhaling slowly.\n\nThat had been a close call.\n\n\"Is it safe now, Ranji?\" Izel asked. \"Can I get up?\"\n\n\"Yes,\" I replied, helping her stand. \"But I need you to stay behind me.\"\n\n\"Yes, sir.\"\n\n\"You don't have to call me sir--\"\n\n\"The way you spoke to me, I felt like I had to. Can I take the helmet off now?\"\n\n\"Yes, but hang onto it.\"\n\n\"Yes, sir.\" When she took it off, she looked so vulnerable.\n\nHolding out my arms, she glommed onto me, burrowing into my chest.\n\n\"Oh, gods, I was so scared! And you were so brave defending me!\" She trembled as I held her.\n\nSqueezing her tight, I chuckled. \"Wife, I just got you to fall in love with me. You think I'm going to let you go so easily after that?\"\n\nThat elicited a snicker of amusement. \"Yes, I suppose that would be counter-productive, Husband,\" she admitted. Then she lifted her face and we kissed, our emotions flaring. When we broke apart, her fear had been replaced with intense desire.\n\nGiving her another kiss, I said, \"I'm going to check things out. You keep behind me, understand? Anything happens, you go back to that corner, put the helmet on, and you stay there till I say otherwise.\"\n\nTaking a calming breath, she fussed with my neckerchief, \"Yes, Husband.\" Then she whispered, \"Is it okay to let you know I really want you again?\"\n\nChuckling, I gave her a wink. \"Yes, it's okay. Note to self -- wife wants more personal time later, clothing optional.\"\n\n\"Like we did in the bedroom last night?\"\n\n\"Amendment to note, make that hard and fast and definitely no clothes. And maybe more than once.\"\n\nBiting her lower lip, Izel giggled again as her face flushed.\n\nA Ground Service corporal in powered-assisted combat armor pulled bodies away, pausing when he spied us there. \"Captain! I think it's Commander Kandikan and some lady!\"\n\nOnce the bodies were out of the way, I lifted the cot, moving it back to where it normally resided.\n\nThe captain gave me a salute. \"Commander Kandikan? Lady Kandikan? Are either of you injured in any way?\"\n\nI shook my head. \"No. It was a close call, but we're unhurt.\"\n\n\"Thank the gods,\" the captain said. By his unit patches, he and his men were part of the 851st Mechanized Infantry Regiment, 3rd Brigade. \"My orders from the Commandant were direct and clear. If either of you were injured or killed, I was to kill every last one of them. I'd rather not have the headache.\"\n\nNodding, I replied, \"I completely understand. This is my second firefight in twenty-four hours and I am so far behind in required action reports, it'll be a week before I see daylight.\"\n\nThe corporal barked a short laugh, but at a glance from his officer, he mumbled, \"Sorry, sirs.\"\n\nThe captain gave us a short bow. \"My lord and lady, Generals Rikoletsi and Barankoshto send you their greetings. Both of them stressed their desire for your safety.\"",
        "She glanced at his uniform, then said, \"Captain Reno, please accept our apologies. I'm afraid you have us at a disadvantage. We've been arranging for emergency supplies for High Guard and were just taking a short nap after hours of negotiations. We must look an absolute fright. I beg you, please forgive us for not greeting you properly.\"\n\nThe captain took off his helmet, and glancing at me first, rubbed at the stubble on his own face ruefully. \"Not at all, Lady Izel. Considering the state the entire war base is in, I don't think any one of us is at our best right now. But despite that, no one could fail to recognize your grace, manners, and noble bearing of a real lady.\"\n\nShe offered her free hand and he touched it to his forehead before standing again.\n\n\"How very gallant, Captain,\" Izel said. \"I thank you for your kind words. Please convey to your superiors and to those brave warriors in your command our sincere gratitude for your very timely arrival. My husband is a brave and ferocious warrior and I believe he could very well have won the day. Yet I am grateful that he didn't need such testing. Why you and your gallant Ground Service warriors arriving in the nick of time to save our lives? It's like something right out of a thrilling video adventure!\"\n\nThe captain blushed. \"My lady, your words do us a kindness. Commander, I am instructed to follow your lead with regard to the prisoners. Please be advised that because there was an urgent need for their services elsewhere, the protective detail on Lord Kirfan and his men had been reduced to a single platoon. Needless to say, they broke custody almost right away. Since then, it's mostly been a matter of following the trail of bodies.\"\n\nTaking a measuring breath, I asked, \"Exactly how many bodies, Captain?\"\n\n\"Seventeen dead, and three critically wounded from the platoon watching them. Because my men were surprised and outnumbered three to one, they only managed to kill three and wound one. Once loose, Kirfan and his men headed straight to Housing and killed the guards on duty there. A sergeant was killed and Captain Uturuncu was seriously injured in the process. Accessing the housing records, they found your address and that of Lady Izel's men.\"\n\n\"Holy gods!\" Izel exclaimed.\n\n\"How many guards? What happened to Captain Uturuncu? And who else was killed?\" I asked.\n\n\"Only two at the gate, the others pulled to help fight the fires.\" The Captain looked disturbed. \"Commander, they were animals. Kirfan and many of his men forced her and every woman in that office. Seven women and at least twenty men, maybe as many as thirty men. The survivors could barely move. Uturuncu and the rest were sent to the hospital, all in critical condition. The sergeant they killed was Gan. The captain had ordered them not to resist, telling them they could survive it. I don't think she expected what happened. But when Kirfan forced her, he also began hitting her and she cried out in pain. Gan broke free, grabbed a knife, and wounded one of the men, but they quickly overwhelmed her. When they were done, Kirfan said they shot her because she had resisted. Did you know her?\"\n\nIzel gasped and covered her mouth, horrified.\n\n\"Seven hells, all three hot, all three cold, and the one in between. I believe Gan was a specialist with photography.\" I gritted my teeth in anger. Izel gave me a look of both sadness and shame. \"Kirfan is not only a complete idiot, he's a complete bastard. Murder, rape, assault, attempted kidnapping. I assume they came here next?\"\n\n\"No, sir. They went to your place first.\" At my look of alarm, the captain quickly added, \"It's all right, Commander. Apparently, there's a huge number of troopers all armed to the teeth at your place right now. It's become the operational HQ for the sector. I think all those armed people and the traffic scared them off. Apparently, next on their list was Lady Izel's retinue. However, their assigned quarters were empty, so after they trashed the place, they set fire to the building.\"\n\nI reached over and pulled Izel close, kissing her on the temple. Her arms went about me as she stood close.\n\n\"Somehow they learned you and Lady Izel were here,\" the captain continued. \"We were already in the area, closing in. We received a call from a reporter who let us know they were here.\"\n\n\"I think I owe a great deal to Sammi Reo,\" I observed quietly.\n\nIzel wiped her face and mastered herself. \"Captain, my sincere condolences on the brave soldiers who were grievously injured or fell to my brother's treachery and despicable behavior. It grieves me to even admit that he and I are related. He continues to blacken my family's good name. Your arrival was most fortuitous. Again, please let me convey my gratitude for your timeliness to your brave warriors. I shall pray for the women that he and his men brutalized.\"\n\nHe was moved by Izel's silent tears of shame and grief. \"Lady, please understand, no one could ever associate that man's seditious actions with a woman of your grace and gentility.\"\n\nI held out my hand and we shook.\n\nHe winked at me and said, \"Llam nuqan, Commander.\"\n\nChuckling, and immensely pleased, I answered, \"Llam nuqan, indeed!\"\n\nJust then there was a squawk on the corporal's radio. \"Attention! Attention! All sectors, attention! Water has been restored! Repeat, we now have fresh water! All Fire Service crews -- to your stations at once! All crews to your stations!\"\n\nThe captain muttered in relief, \"Thank the gods! Now we can save High Guard.\"\n\n\"I'm so proud of you, my husband!\" Izel declared. When the captain cocked his head at her words, she explained, \"This was part of what we have been working on. However, my husband paid for the costs out of his own personal fortune. This is his victory.\"\n\n\"I did my share, Izel. We all contributed by working together.\" I said my own silent thanks to Sergeant Kitam and his tireless crew from Mobile Construction. I promised myself they were going to get one hell of a party when things calmed down. They'd certainly earned it.\n\nStepping further into the room, I looked for my two troopers. Both lay sprawled on the wooden floor. Grannok had been shot twice in the chest. Jomin was on his belly by the cot he'd been sleeping in. I rolled him over. His throat had been slashed. Both were barely eighteen. Both had been rightly proud of the rescue we'd accomplished the night before. \"Amend your report, Captain. Please add two more to our list of Imperial dead.\"\n\n\"So noted, Commander.\"\n\nScanning around, I saw a huge shirtless man laying on the floor with the others. By the various tattooed bears in various positions covering his back, this had to be Kirfan's champion. I walked over to him and the others followed.\n\n\"Set this one aside, away from the others,\" I instructed. \"As for the rest of Kirfan's men, Captain, my recommendation is they become slaves, and that they be branded as well as chipped. They are to have chains on their feet at all times. They are further forbidden to ever return to Nahua State. Justice demands they be put to death, but I think they can be better used doing manual labor, like clearing debris. I will review their records at the end of thirty days. Those who did their work diligently can earn a chance at life.\"\n\nI recognized Kirfan from his picture and strode over to him. \"Ah, there he is, the Minister's new pet and despoiler of chickens.\"\n\nKirfan tried to sit up, but one of the three soldiers keeping guard firmly thumped him with the butt of his rifle. Scowling, he grunted and lay back down.\n\n\"It's all right, he can sit up.\"\n\nKirfan glared at me. \"You'll pay for this, you upstart freak! I'm friends with the Minister of Imperial Security! Did you hear me? If you know what's good for you, you'll release me at once. And stop lying about me! I do not and never have fucked chickens! That's disgusting!\"\n\nI looked down at him. \"What? No threats that Garan Bayloks'mec's criminal connections will kill me and everyone I love? As for the Minister, are you really that delusional? The Minister has no friends, only expendable pawns.\n\n\"As for you? Look at you now. The once-great Lord Kirfan under arrest for murder and treason are only the most serious of your foul deeds. You have acted like a common bandit, savage and without honor. Yet I am beginning to think you don't truly comprehend the seriousness of your situation. You had to have obtained your position by birth because you sure as hell didn't earn it by using your brains! You and your men have attacked Imperial troops! That's a capital offense and makes all of you armed rebels -- traitors to the Empire. Killing the Ground Service troops gets you a quick temple death. Killing Security forces, however, earns you death by torture. And damn your hide, these warriors are my brothers and sisters in arms! How dare you!\"\n\nI backhanded him, knocking him sprawling, shouting out, \"How long have you been in the pay of Atlantis, Lord Kirfan Tenochta? When did you decide to betray the Empire? How much did they pay you? What did they promise you for your betrayal? Who's your Atlantean handler? Speak, damn you! Speak!\"\n\nHe spat out blood from his split lip. \"More of your lies. I have nothing to do with Atlantis! Nothing!\"\n\n\"So you deny helping to murder thousands of men, women, and children, all of whom were valued citizens of the Empire? You deny being a traitor and aiding the enemy?\"\n\n\"Yes!\"\n\n\"So it was just armed rebellion, kidnapping, and looting on an Imperial War Base that you planned? I say again, Kirfan! When did you decide to betray the Empire?\"\n\n\"I'm no rebel but the ruler of all the Nahua! At my word, people live or die. This is all your fault. You denied me my rights as the head of my family! Had you done as was my right, I would have gone home. But no, you kept my own flesh and blood from me. I have nothing to do with your silly war games.\"\n\n\"Silly war games? Silly war games! Scores of brave pilots gave their lives in defense of this war base. Brave warriors, men and women serving the Empire, were slaughtered while trying to defend this war base! Helpless patients at the Naval hospital were burned alive. Innocent children and teachers were murdered in their schools. Thousands are dead and many more thousands missing or wounded and homeless! Silly war games.\n\n\"How dare you! You aren't fit to lick the boots of the sanitation workers. Atlantis didn't focus on military defenses. They didn't come to raid or even to conquer. They came to annihilate us! If they could, Atlantis would burn and ravage the city of Tenochta, just like they tried to do to High Guard. And you! While High Guard reels from the carnage, you, Lord Kirfan, killed and injured even more brave, loyal warriors sworn to serve and protect the Empire! Where is your patriotism? What I find are the actions of a traitor to the Empire. Silly war games. You disgust me.\"\n\n\"We had no idea they were going to attack! You can't blame me for that!\"\n\n\"Holy gods! You saw the situation, yet the only thing on your mind was your personal ambitions. You chose to kill, murder, rape, brutalize, and then you tried to add kidnapping as well. You truly are an imbecile! Didn't you ever learn that when you find yourself in a hole to stop digging? You think being a nobleman entitles you to do whatever you want. Wrong! Being a nobleman means you are responsible for those under your charge. A nobleman's duties are a sacred trust, no less than that of an officer of the Empire.\n\n\"As for your sister, you can't have her, you stupid prick. She's my wife. Mine! Legally wed in a temple recognized by the Empire. If by some miracle you survive all these many capital offenses against you, I tell you now that if you come within a hundred rads of my wife, I will personally end you.\"\n\nKirfan snarled back, \"Your wife! Women are too stupid to think for themselves. All they're good for is fucking and breeding. I'm her brother! I decide who she marries, who she keeps company with. You stole her from my House and from the people of Nahua! You're no better than a common thief, you upstart Vedan trash!\"\n\nTaking a deep breath, I stood up. \"I've said my piece. I will break you, and when I'm done, I will know all your secrets, Kirfan of Tenochta. Captain? I want him in the stockade in isolation, secured by chains and a restraint jacket. If Ground Security doesn't have space, I'm sure we can find some dark hole at Air Security to put him into. We'll see what he says when he's full of Truth Drugs.\"\n\n\"Yes, Commander.\"\n\nKirfan's head whipped around to his sister. \"How could you, Izel? You did this to me! You dirty, filthy whore! I--!\"\n\nReaching down, I yanked him up with my left and my fist came down hard. His collarbone snapped. Pushing him back down, I straddled his chest. With each word, my fist hammered into his face. \"You. Do not. Get to. Speak to. My wife. Like. That!\"\n\nThe next thing I knew, someone grabbed my wrist. I whirled in anger, yet when I saw it was Izel in tears, my rage vanished.\n\n\"Please, my lord,\" she begged. \"I ask not for myself, but General Rikoletsi asked you not to kill him and you gave your word to him.\"\n\nI stared at Kirfan's battered face a moment, then nodded, deliberately calming my fierce rage. I stood and took a step back from his body. \"You're quite right, Izel. Thank you. Now you listen to me, Kirfan. Izel is my lawfully wedded wife. Full stop. I forbid you from ever attempting to contact her again in any way, shape, or form. If you speak about her, you will do so with respect or I will punish you! She is a lady. A lady, you hear me? You are unworthy to even look upon her shadow! Press me further, and I will personally demonstrate to you what I learned from the Minister about pain!\"\n\nClosing my eyes, I took another calming breath, then realized Izel was still standing there, quietly weeping as she watched me. Yet another calming breath was needed before I turned to her. As gently as I could, I said, \"Please do not be afraid of me, Izel. I couldn't bear it if you were. You are my wife and I love you.\"\n\nHolding out my hands, I repeated, \"I love you.\"\n\nShe flung herself at me, burying her face against my chest. \"I was so scared, Ranji! You had such rage on your face!\"\n\n\"He hurt you, Izel. Then he tried to kill me so he could hurt you again. Everywhere he's been, he's left death and destruction. This time, he's injured or killed good Imperial warriors. He needs to pay for that.\"\n\nWhile I soothed Izel, I was worried. I had no regrets about the beating I'd just given Kirfan. None at all. But without her intervention, I think I would have beaten him to death with my bare hands. I hoped it was just my exhaustion that led to my lapse. I had indeed promised the general not to kill this man. I rubbed her back, doing my best to calm us both down.\n\nThe worst thing a good man can ever do is become that which he fights against.\n\nAfter a few moments, she took my battered hands in hers and gasped. She began to kiss them tenderly. \"My lord, I tremble not out of fear. All you have done is show me kindness, compassion, and respect. No one has ever defended me so vigorously before. You are my lord and my husband. I know that with you my reputation and honor are safe. Thank you, for defending me, and for doing as the general asked. I know it was a hardship for a man of honor such as yourself.\"\n\nThe captain quietly issued orders, and under the watchful eyes of the armored soldiers, a squad set about collecting ID cards, weapons, weapon belts, tablets, and radios. As for my dead troopers, he pulled out their lanyards and respectfully laid them on their chests, scanning them into his tablet.\n\nSeeing my dead troopers again, I knew we would have to take the time to honor our dead. All of us would need that. Meanwhile, everyone was doing their part to save as many lives as possible, working to keep High Guard a functional war base.\n\nThe captain turned his gaze to my men. \"Commander, what do you wish for your men?\"\n\n\"Do you happen to have any body-bags on hand?\"\n\nHe nodded. \"Actually, I do. We grabbed a bag with a score for our own losses and I have two left, hoping the rest of the wounded make it through today. Do you wish them to be attended to? I can drop them off wherever you wish.\"\n\n\"There's already a pile of dead in front of my residence. Drop them off at my place. 1210 Cirrus Avenue. I'm sure the others won't mind these two brave warriors joining their ranks. I know it's no real compensation, but you have our condolences on your own losses, Captain. I think the one job I hate most is having to write to their families when we lose good warriors.\"\n\nGiving a grim nod, he said, \"Air Service, Commander.\"\n\n\"Ground Service, too.\" I shook my head. \"After yesterday, Naval Service and Marine Service, too. We drove off Atlantis, but only after they gave us one hell of a beating.\"\n\n\"Do you think they'll be back?\"\n\n\"Count on it,\" I answered. \"I'm told our own scientists are expecting a breakthrough any day now. We just have to hold on until then. High Guard is all that stands between Atlantis and the heart of our nation, so hold we will. Hold we must. For the Empire.\"\n\n\"For the Empire,\" he and his men echoed.\n\nExcept for Oceotl, Kirfan and his men were hauled away. A corporal and a sergeant remained, guarding the big tattooed man.\n\nLying on the floor, a rifle barrel in his back, he watched me approach.\n\n\"Let him up,\" I ordered.\n\nAs the two guards stepped back, keeping him covered, the huge man slowly sat up. Bald and stoic, I saw he had many more bear tattoos across his chest and arms in addition to what covered his back. Maybe it was his size, but he reminded me of Anton Sonilawa.\n\n\"Is your name Oceotl?\"\n\nHe nodded, his attention on me.\n\nSquatting down, I said, \"I am Lord Commander Kandikan, Imperial Air Security. I need to ask you a few questions. First, have you injured any of the soldiers since your arrival?\"\n\nOceotl shrugged.\n\nFrowning, I said, \"You can't answer?\"\n\nOpening his mouth, he showed me. His tongue had been cut out.\n\nI sighed. \"Thank you. So you might have injured one or more soldiers?\"\n\nOceotl shrugged again.\n\n\"Fair enough. I'll take that as a maybe. Did you kill anyone?\"\n\nAt that, he vigorously shook his head in the negative. \"That helps a great deal. Do you understand that your master is in a great deal of trouble? The kind where they put even nobles to death.\"\n\nHe nodded.\n\n\"Because he's under arrest, he cannot issue any challenges unless an Imperial judge gives him the right. Considering the charges against him, I don't expect that to happen. Do you still feel bound to Kirfan in any way?\"\n\nHe just gave me a frustrated look.\n\n\"Can you write?\" He shook his head no. \"Crap.\"\n\nIzel crouched down beside me. \"What are you thinking?\"\n\n\"If he's a slave or indentured, he's pretty much working under duress. To me, that's extenuating circumstances. However, until I know more about him, I can't afford to trust him.\"\n\n\"Are you thinking of having our special friend check him out?\"\n\nThen I recalled it was her voice that had awakened me and thus saved our lives. That in turn actually made me smile. Calia's love was a true miracle.\n\n\"Our special friend? Yeah, I was, actually.\" Turning back to Oceotl, I said, \"Do I have your word that you will go peacefully with the soldiers? That you will not resist and do what they tell you to do?\"\n\nHe nodded.\n\nIzel and I stood. \"Captain, take normal safety precautions but don't abuse him. We have his promise to behave. I'll follow up with him in the next day or so.\"\n\n\"All right, Commander. Oceotl, go with the guards.\"\n\nWith an armed escort, we went out into the daylight, back to the other barracks building where we'd set up the conferencing. On the way, we passed troopers carrying body bags.\n\nOnce we got close to our seats, Izel was noticeably shaking. The after-effects of a serious adrenaline rush.",
        "I reached over and pulled her into my arms and she buried her face into my chest, crying again.\n\n\"It's all right,\" I murmured. \"You were terrified and the adrenaline is wearing off.\"\n\nShe pulled away and looked at me with astonishment while tears spilled down. \"I just realized how close I was to losing you! I just got you and we almost died!\"\n\nI grinned, brushing away her tears with my thumb. \"I love you, too, Izel Kandikan.\"\n\n* * * * *\n\nPart 16 -- Negotiations Conclude\n\n* * * * *\n\nTwo Ground Service troopers arrived and stood at attention. \"Commander, we are your temporary replacements until new bodyguards can be assigned.\"\n\nHaylock and Beym. Both were privates.\n\n\"Welcome to the Air Service,\" I said, giving them a wink.\n\nThe two soldiers rolled their eyes and laughed.\n\nSammi Reo and her main cameraman, Jess Allonscott, entered the room. The reporter exclaimed, \"Thank the gods you're both alive. Are you all right?\"\n\n\"A little rattled. Our guards were killed, but we're fine. These brave souls have been assigned to keep watch on us for the time being,\" I explained. \"How about you?\"\n\n\"They broke into here, but they made a lot of noise breaking the lock, so we hid in the closet,\" Reo said. \"They glanced around and left. As soon as they were out the door, I called your Dispatch operator.\"\n\nI nodded. \"I'm glad you didn't have to deal with them. You would have suffered greatly at their hands.\" Izel nodded. \"I want you to know that we appreciate your call to Security. Both of our guards died, but if not for your call, we might have died as well. So, thank you. I shan't forget that.\"\n\nSammi shrugged, giving me an arch look. \"Well, it seemed the thing to do at the time. Would be a shame not to finish these talks, don't you think, Commander?\"\n\n\"So it would,\" I admitted. Glancing at my watch, I added, \"Well, we're awake now. Perhaps we can resume early?\"\n\nThe reporter gave us both a grim smile. \"I think that is reasonable. The big item remaining is medical supplies.\"\n\nPulling out my handkerchief, I gave it Izel. She wiped her face and blew her nose. \"Thank you. I'm feeling better. What's that your daughter says? Your magic hug made me feel better.\"\n\nI smiled at her words. \"Sisi has some pretty special magic herself. So do the rest of the women in my household. You included.\"\n\nI checked my laptop for a response from the hospital. Not seeing anything, I called Dr. Jehantli's office and reached his medical assistant, Sergeant Nuna.\n\n\"Sergeant? This is Commander Kandikan. I suspect you're swamped, but this is urgent. I'm in a conference with representatives of the Seven Nations. I want to make sure you don't run out of needed supplies, but I have no idea what you need. I spoke with a Field Captain by the name of Tuwa'ree in Hospital Administration several hours ago, telling him to get me a list some six hours ago, but I've heard nothing back since. It would grieve me if someone died because you ran out of commonly used medical supplies.\"\n\n\"I'm sorry, Commander. We have so many wounded, the overflow is sitting in the hospital corridors waiting to be treated. Dr. Jehantli is working in the ER as we speak.\"\n\n\"That makes this call all the more important,\" I told her. \"I'm now putting this task on your shoulders. The airfield is out of commission and it'll be days before a ship can dock safely. Please tell me what Dr. Jehantli and the others are out of or running low on. A few minutes now could save hundreds, possibly even thousands.\"\n\n\"Understood, Commander. I'll call you back in an hour. However, the most urgent thing I can think of is Nu-skin patches. The medical warehouse on the naval side caught fire. They put it out pretty quickly, but most of the patches were destroyed by exposure to the fire's heat. We always need gauze pads and wrapping tape. They can be cut down, be sure to get large and medium. Blood and plasma are in high demand, too. Oh, and medical-grade pain medications. A lot of people are being treated and if they're stable, they're being sent away because we're only keeping critically wounded at this time, and we still have people spilling out into the corridors.\"\n\n\"I'll see what I can do. Sergeant, get me that list and include what you just told me. I need the common name, item code, size and/or type, and amount requested. Like with the gauze, how many boxes of large, how many of medium? How many rolls of wrapping tape? All right, Sergeant. I'll wait for your call. If I don't hear from you in the next two hours, I'll just have to do the best I can.\"\n\n\"Thank you, Commander!\" She hung up.\n\nAfter that, we resumed our negotiations with the Seven Nations, working out deals for other supplies. Because of the lack of response, we went ahead anyway. A rep from Capisco's Emergency Services called two hospital administrators from their local hospitals for advice. While we were in discussion, the email from Sergeant Nuna finally arrived. This list was shared, and after consulting with the civilian administrator, further supplies were added and prices agreed upon. The city's liaison got to work once the payment cleared.\n\nMortuary services came next, especially cremation. Arrangements were made for pick up, cremation, and urns. A cold storage facility offered space to store bodies, and the city government said they would find out what was available, and if no space could be found, would I be willing to pay to have it made? Yes, I assured them.\n\nWhat took the most time was the political arrangements. I wanted to make sure we had guards for the dead. The state government wanted their say in this. At first, they attempted to forbid having any military guards, then insisting on having local guards only, then to having their people guard our guards. Then, who was going to pay for the guards, the warehouse, transportation, et cetera.\n\nThe City of Capisco stepped in and said their experience working with High Guard in recent months had been a marked change for the better, and they would arrange for city police who wanted to work off-duty with our troopers standing watch over our dead.\n\nI know I already mentioned it, but Izel's presence throughout the entire process cannot be understated. I consider myself a quick study. However, more than once she stepped in and kept things going or made counter-offers that smoothed the way when I was ready to walk away and take a long break. By the end, she was handling most of the talks directly, and while I may have asked some questions, I agreed to pretty much anything she said.\n\nWhen one of the Seven Nations representatives balked over one point, he burst out, \"Okay, I know what her opinion is. What do you think, Commander?\"\n\nI gave him a tired smile. \"I think she's doing just fine. My wife has my complete confidence.\"\n\nWhile the rep was disgruntled, a few of his compatriots chuckled at his expense. For her part, Izel flashed me a look of surprise that immediately transformed into adoration. With renewed vigor, she returned to the fray.\n\nSince Emilo and the others were staying just a few buildings over, Reo and her cameraman brought us a hot afternoon meal courtesy of the Ground Service. Even with the disaster, the Ground Service chefs had not forgotten their guests. Performing minor miracles, they continued to provide delicious and hearty meals for their guests. As I dug in, I recalled a tidbit from General Barankoshto the previous year when she had informed me improvements had been made in their food services resulting in improved morale. If this was what the Ground Service had been getting recently, it was no wonder they were protective of them.\n\nWe ate with enthusiasm while we continued negotiations over video. Sammi, her cameraman, and assistant also enjoyed their meal, and I made sure our new bodyguards were also fed. Naturally, the men were delighted.\n\nMore stim tabs for me and Izel.\n\nI was beginning to feel a bit numb from the chemical stimulants. I suspected that I was nearing the point where my body would refuse to function without hours of real sleep.\n\nThe last item of business was evacuations. For any civilians at High Guard, for whatever reason, that wanted passage back to the Empire, they were guaranteed passage through the Seven Nations flying on their transports to Sugarland, and then passage by railroad to the Empire's border and thence to Mohingo. Turned out that there were four members of the state government with serious medical issues, one terminal but all incurable by their own medical technology. These officials wanted to live bad enough to guarantee the cost of travel back to the empire for up to ten thousand Imperial citizens at five credits each. This deal was appended and attached to the previous medical deal of two treatments per month at the Tlacotli Nano-tech Facility signed earlier.\n\nMuch of that was Izel's doing. Now that things with Atlantis were heating up, if warriors wanted their families out of harm's way, I had no issues with them getting to safer shores. Paid passage through the Seven Nations was a far sight better than having to run the gauntlet by freighter or air transport.\n\nThroughout the day, I'd been receiving text updates on my tablet. Deliveries were already arriving at the main gate, and several fire stations and hospitals from around the state of Hassenyeet sent in volunteers and vehicles to help contain the fires. The state government also picked up their travel costs and wages.\n\nWe finally wrapped things up around dinner time. It took my bleary eyes more than once to figure out the time.\n\nIzel had kept track of various agreements, making a quick summary of what they were and the cost in Imperial credits as well as any other obligations incurred. When we finished, she sent the file to me, and I forwarded a copy to the Commandant and to Tik\u00fan Travel.\n\nAfter the video conferences ended, Sammi Reo asked us for a short interview. Izel and I were exhausted. We'd had a few short breaks, but except for the two-hour nap and a lot of stim tabs, we were both approaching thirty-six hours. I was certain my wife and I had exceeded both the daily recommended allotment of stim tabs and caffeine intake. I was not only beyond tired, I was becoming fidgety.\n\nHowever, I owed this reporter more than I could repay and would do my best to bull through and not sound like an idiot or that I was drunk. Sammi Reo had gone out of her way to help us while our people, especially our civilian population, suffered from the attack by Atlantis. Because of Sammi -- and Izel -- High Guard would soon be on its way to recovery, or at least functional operational capacity. Sammi had helped save thousands of civilians, well aware that it would not be politic to mention our warriors.\n\nSo, of course, Izel and I consented.\n\nThere was a considerable amount of digital records. As promised, Sammi Reo made a copy as we watched and gave me the hard drive clone. A copy of the interview, too, on a flash drive, was made by her assistant. I know the man had been introduced to me, but at that moment, I drew a complete blank. By the gods, I'd been trying to remember pretty much all day and had drawn a blank.\n\nI did take the time to thank her for putting the meeting together. \"You went above and beyond for us. And the story you aired the night before? It was full of outrage, but it was also heartfelt and gracious. I know you will get a lot of airplay from all this which will help advance your career. Still, I wish to thank you.\"\n\nShe pursed her lips a moment before answering. \"I know you mean well, Commander. I like you. I seriously do. This thing you're doing for those kids -- you didn't have to do it, yet you did. The loyalty of your Sergeant Mack and the others? It all speaks to the kind of man you are.\n\n\"But to be honest, I don't like the fact that you and the Empire are here on our doorstep, and that you are a high-ranking military officer in the service of a foreign government. Intellectually, I understand that High Guard is your chance to keep Atlantis from striking deeper into your country. The homes and businesses damaged by the Atlanteans will have to be balanced against the massive amount of electrical damage your EMP missiles did to many surrounding areas. A lot of rural homes lost power, and some are still out.\n\n\"Just as you love your country, I love mine. Chimorro and Atlantis and Aesir-Veda have been at odds for a very long time. Sometimes I think the only reason the Seven Nations and the Eastern Islands are still around as independent countries is because it's convenient for the Empire and Atlantis to have us as a buffer between you. There have been times, too, when the Empire and Atlantis have raided us for slaves and whatever you could steal. Granted, there hasn't been a lot of that from either side in a few years, but that's been the nature of the relationship between our respective nations -- and worse, it still happens today. You three are the top world powers. You wage your bush wars in the Tongwe States and in Afrika like both places were your private playgrounds. If you have any sway with your leaders, please tell them we'd like to be around to see the future, too? And we'd also like to keep our independence.\"\n\nHer words stung, but they were true and respectfully restrained. \"I promise to convey your concerns, Sammi. I appreciate your honesty and integrity. Once you get to know me, I hope you will come to understand that I do not condone raiding other nations to steal, nor do I like it when selfish and cruel men carry off women and children.\"\n\nSammi snorted. \"Honesty and integrity spread more easily when people have a free and open press. It helps keep governments more honest than they usually are. Both qualities are something the Empire could seriously use. But I'm being an ungrateful guest even as I hosted these meetings. Patriotism wasn't the only reason I helped arrange for assistance. It was for the kids. Your media broadcasts have been updating the casualty lists. I... met a few of the ones killed yesterday. Still, you're welcome, Lord Kandikan. Lady Kandikan, it's been a pleasure.\"\n\nShe and Izel shook hands.\n\nThe email from Dispatch regarding the Main Gate arrived and pinged my tablet. I reviewed the orders, made a few minor adjustments, and digitally signed it. I also wrote up a Gate Pass, allowing Sammi Reo and her staff to come and go with civilians, provided documentation for all passengers was properly presented. The Pass was good for one week, and the security team at the gate was to provide a copy of the Gate Pass for Sammi to keep as they exited the war base. Copies were included to the Base Commandant, Ground Security's CO and Second, and to Doyya. While I knew about Commander Jaykoor's death, his replacement would need to be informed as a courtesy.\n\nSammi Reo and her two assistants continued putting their gear away.\n\nIzel and I sat together, staring into our cups of cahault than actually drinking any more. I knew both of us were so overtired we were beginning to shut down mentally before our bodies followed suit.\n\nOnce they were all packed, Sammi stopped to discuss their plans with me. She still had her story to finish about Emilo and the kids getting treatment. \"I don't want this to get buried in the news of potential war breaking out. We'll be leaving High Guard for the rest of today. We'll get some much-needed sleep, freshen up, and we'll be back tomorrow afternoon.\"\n\nI sighed. \"If we can't get the rest of the kids taken care of soon, I'll arrange for them to get treated at Tohingo. I made a promise to heal them.\"\n\nReo looked at me. \"You know, it might be good for the healthy ones to get out of here. We'd put them up in a nice hotel, let them have the afternoon at an arcade, go out to eat, see some sights, maybe get in some dancing with some local kids their own age.\"\n\n\"That's awfully generous. Still, we're strapped at the moment. As much I'd like to, I'm worried that they may be targeted.\"\n\nShe frowned. \"By Atlanteans? What would be the purpose of that?\"\n\nI shook my head. \"I have political enemies, too. Enemies that have no qualms about torturing or murdering children.\"\n\n\"Terrific. Look, let me call my boss,\" she replied. \"Capisco Police Department has a good reputation. If we don't advertise this until after they're back on your war base, they should be okay, shouldn't they?\"\n\n\"If Emilo and the other parents want to go with you, you have my blessing, and I'll cover the expenses. Anyone who wants to stay stays. Since I'm footing the bill, try not to sell them any diamonds, will you? Even cheap ones. I do have my limits, and I've seriously dented my family fortune this day.\"\n\nReo laughed. \"Fair enough, Commander. I'll talk to the parents and my boss. Let's see if we can scrounge up some rides. If we can rent a passenger van from Capisco, can we bring it here to pick everyone up?\"\n\n\"Already cleared. Your guest pass is waiting at the Main Gate. It's good for one week. Everyone accompanying you will still need a photo ID and will be checked before allowed entry. I trust you will not attempt to abuse my trust, especially in security matters. Regardless, any one of the young guests from the Western Frontier who wants to leave with you for a fancy stay in Capisco, they have permission to do so. Though I suppose now it's anyone's guess how long the last of the nano-treatment are going to take.\"\n\n\"Thank you. I'll go let them know.\" Then she paused. \"Your fortune, Commander? Surely you'll be reimbursed by the Empire for your expenditures.\"\n\n\"Possibly,\" I replied. \"But there's no guarantee. I was ordered to handle the negotiations, but there was no authorization to expend funds. I did that on my own. The situation demanded I act so I did. If it saves even one life, it's worth it.\"\n\n\"If I were to approach you later for a personal interview, would you be open to it?\"\n\n\"I would not reject it out of hand, you have my word.\"\n\nIzel reached over and squeezed my hand. The reporter gave me a thoughtful look, then collected her bags and exited the door. Jess the cameraman and her assistant began carrying equipment out to their vehicle.\n\nRubbing my eyes, I felt the two days' worth of whiskers on my face. I honestly didn't know what the women were complaining about. My face felt fine to me.\n\nIzel ran her hands over my cheek. \"Oh, my. You really are bristly, Husband. I thought Calia was joking.\"\n\nI couldn't help it. I started laughing, but I was so tired I couldn't maintain it.\n\n\"I don't care,\" she continued. \"I enjoy being kissed by you, even if you are bristly.\"\n\n\"It's not the face kissing she was concerned about,\" I said with a grin. \"It's the more tender regions down below getting rubbed raw, Izel.\"\n\n\"What?\" Shocked by the implication, her face darkened with embarrassment. \"Oh. Oh, my! That... \" Then she lowered her voice to a whisper. \"Husband, I really like it when you do that to me!\"\n\n\"Wife, that's great because I love doing that to you. Come on. Let's go home.\"\n\n\"Whatever you say, Ranji.\" However, instead of collecting our own possessions, Izel guided me over to a couch, and before I knew it, I sat and she crawled into my lap. \"We'll go soon,\" she promised. \"I just need to rest for a bit.\"\n\n\"Okay,\" I murmured, wrapping my arms around her.\n\n* * * * *\n\nPart 17 -- In Trouble Again\n\n* * * * *\n\n\"Kandikan, wake up.\" Then I was being shaken awake. \"Wake up! It's time to go home.\"\n\nI froze as my neck suddenly pinched, and my hand flew to where it hurt. \"Ow, ow, ow.\"\n\nIzel woke up, slowly blinking. \"What's happening?\" She wiped her chin because of the wetness, then looked mortified as she realized she'd drooled onto my shirt.\n\nGlancing around, I saw both Ground Service soldiers watching us with amusement.",
        "Then I saw Janetta, arms crossed impatiently as her face gave us both a long, considering look while I struggled with the offending muscle.\n\n\"Hi, sweetheart. How are you?\" When that didn't change her demeanor, I added, \"I love you?\"\n\n\"Hand me your phone,\" she said brusquely.\n\nSitting up, Izel wiped her eyes, then said she'd be right back. Something about \"using the facilities.\"\n\nJanetta turned my phone on and typed in my passcode. Showed me the screen. Twenty-three missed calls.\n\nHoly gods.\n\nThen I saw the screen and the time. It was an hour before midnight. I winced. \"Sorry, Janetta. We didn't finish until late and then we fell asleep.\"\n\n\"So I see. I've been worried sick for you, Kandikan. All of us have. You and Izel left last night and disappeared into the darkness on a rescue mission, and then we heard nothing further from either of you. Not one word. Seems I had nothing to worry about.\"\n\n\"I wouldn't say that, exactly,\" I countered.\n\n\"You vanished for almost twenty-four hours, Kandikan! And it's not like I could call around to find out where you were. Communications are spotty. Your Second is on some mission and unavailable so I couldn't ask her. Your Dispatch said Lovyanchiti knew where you were, but again, I couldn't ask her, could I? I even tried the Base Commandant's Office and I got politely told you were doing something critical and no one had time to answer my questions. So tell me, Lord Kandikan, just what the fuck have you been doing?\"\n\nI cocked a sleepy eye at her. \"Most of the time, Izel and I were here, trying to save as many lives as possible. Izel was incredibly valuable throughout the entire process.\"\n\n\"Evening, Janetta,\" Izel said, her face freshly washed. Then she yawned. \"Are you feeling any better?\"\n\nMy warrior growled briefly at her before turning her ire back to me. My wife blinked in surprise.\n\nI sighed. \"I'm guessing that earlier this morning, instead of going to the Nanotech facility under your own power -- as you promised me -- Lieutenant Durie and his troopers had to physically escort you there and back.\"\n\nHer black eyes flashed. \"Did you or did you not tell him, that if I didn't go willingly, that he was under direct orders to ensure I went? Including putting me in restraints and carrying me there if necessary? Did you tell him that?\"\n\nI blinked, then nodded. \"I did.\"\n\n\"I'm so mad at you I could spit! How dare you treat me that way!\"\n\n\"Did it actually get to that point?\" I asked.\n\nJanetta just growled.\n\nRaising my eyebrows, I said, \"You're kidding me.\"\n\nThen I spied an Air Security corporal and a private, both sporting a shiner on opposite sides of their faces standing behind Janetta. I sat up straighter, trying my best not to laugh. \"I guess not. How many troopers did it take, my beautiful and fierce warrior?\"\n\nSome of her anger melted and she quietly said, \"Seven.\" But then her eyes flashed again. \"They didn't fight fair, Kandikan! Your troopers ganged up and put handcuffs on me. Worse, my own crew wouldn't help defend me. It's not funny! I'm warning you. You'd better not laugh!\"\n\n\"Oh, I wouldn't think of it,\" I said, amused. I think if I hadn't been so tired, I could not have kept a straight face and would have suffered from her fury. \"The question is, do you feel better?\"\n\n\"Yes,\" she finally admitted, after pausing for several long seconds.\n\n\"Lady Tlacotli, I love you so much, and it killed me that you were in such pain that you had to be half-drunk to even function. I missed you.\"\n\n\"You still aren't shaved,\" Janetta scowled.\n\nStill, on the couch, I held out my arms.\n\nHer face softened some and her arms uncrossed. \"You're still a shitload of complications, you know. I put up with a lot just living with you.\"\n\n\"Yep.\" I held my arms out wider.\n\n\"Fuck,\" she muttered, then strode forward and climbed into my lap, straddling my hips. Her mouth reached for mine, roughly kissing me with long restrained hunger finally able to let loose. Pulling her close, I kissed her with a hunger of my own.\n\nWhen we pulled apart, we were both breathing heavier. Janetta leaned her forehead to mine.\n\n\"The trouble with punishing you is that it also punishes me. When you didn't come home, I got worried,\" she said quietly. \"It really bothered me that I couldn't reach you and I didn't even know if you were in danger or not.\"\n\n\"Did you get a bath or a shower this evening?\" I asked.\n\n\"Oh, gods, yes... is that what you two were working on?\"\n\n\"Part of it. I truly couldn't have done any of it without Izel's help,\" I answered.\n\nMy lover looked at my wife.\n\nIzel said, \"He talked to important people and got things moving. He also paid for it all. I just made sure the contracts were fair.\"\n\nThen Izel yawned, and I yawned again. I was awake but I knew it wasn't for much longer.\n\nJanetta sat up straighter. \"How much did you spend?\"\n\n\"Wife?\"\n\n\"Four hundred and twelve thousand credits,\" Izel answered.\n\nJanetta gasped. \"Do you have any money left?\"\n\n\"Just over eighty thousand. Human lives are at stake. Besides the water, there's extra food, clothing, blankets, medical supplies... a lot of things needed to help us recover.\"\n\nMy warrior shook her head. \"I don't know whether to tell you how proud I am or to yell at you for being a fool.\"\n\nIzel decided she was done standing and plopped down on the couch beside us. \"I'd go with the first one. That way we can be proud of him together.\"\n\nNodding, Janetta sighed, then stood up. \"Come on, you two. Let's go home.\"\n\nGetting up, I offered Izel my hand. As she joined us, I noticed tears with her smile.\n\nJanetta asked, \"Is something wrong, Izel?\"\n\nWiping her eyes, she shook her head. \"I'm so tired, but I have so much happiness. I have a home! Not just a place to live but a home. I have a brave and generous husband and fierce warrior sister. I'm a lucky woman.\"\n\n\"You might not consider it,\" Janetta said, \"but our family is bigger than that. You just need to get to know them.\"\n\nSeeing how Janetta had two of my troopers with her, I called Dispatch and arranged for the two Ground Service soldiers, Haylock and Beym, to get a ride back to their barracks. Having put in a lot of hours themselves, they were worn and ready for sleep themselves.\n\nIzel and I collected our gear and I grabbed the stack of hard drives and the flash drive with the interview. We piled into the back and were driven home to Cirrus Drive.\n\nThe Ground Service captain had said to me that things were busy at our place. That was an understatement. Over a score of tents had been set up and even at this late hour, it appeared there were a few hundred people were up and about.\n\n\"I'm told that most of the tents are occupied,\" Janetta informed me. \"I had a meeting near the airfield earlier today, and when I returned home, I learned our place had been designated the emergency command center for our sector. Did you know about that, Kandikan?\"\n\n\"Possibly?\" I was finding it harder to keep my eyes open.\n\n\"Gods of North and South, Kandikan. I can hardly take a step in my own home without worrying I'm going to stumble over someone sleeping, trip on some toy, or sit down for a hot meal at the table.\"\n\nPulling her over, I kissed her temple. \"Everyone is having to endure hardships right now. Besides, a lot of temporary plans were put in place to fix the damage done by our predecessors, and we never even got a chance to test any of them out.\"\n\n\"Kandikan, I tried to take a relaxing hot bath this evening, and when I went into the master bathroom, there were half a dozen kids and their mothers in there using the hot tub giving their babies a bath. There was a line for the shower.\"\n\nI just nodded, finding it easier to close my eyes.\n\n\"Are you even listening to me?\" Janetta demanded.\n\n\"Can it wait till tomorrow?\"\n\n\"I don't know, Kandikan! Can it? Because I'm feeling like you aren't sorry at all for making me worry about you.\"\n\nIzel had been awake when the back door closed, but she was currently crashed against me, sliding down toward my lap.\n\n\"We're alive, Janetta. Doesn't that mean something?\"\n\n\"I'm Mistress of your House! Not a word from you all day, Kandikan. Not to me or to the rest of the people you say are your family.\"\n\n\"You're right. I screwed up. Happy?\" I was starting to lose the fight to keep awake.\n\n\"Treat me like I matter, damn it!\"\n\nEverything went sort of blurry. I vaguely remember being guided into the house and walking up the stairs. I was stripped down and fell onto the mattress. I was pushed and moved about. One warm body scooted in beside me and I drew them close, sighing into someone's hair. Another scooted in behind.\n\n* * * * *\n\nPart 18 -- Making Connections\n\n* * * * *\n\nMy first sensation was one of wet pressure enveloping my cock. In the darkness, my vision sharpened enough to make out a form. Janetta rode my hips, her back arched while firmly grinding her sex against me. I began to grunt each time she buried me within her snug wet heat. Slick lower lips caressed my balls while she ground her clit onto me. As her pace picked up, she leaned forward, rocking faster while her breathing deepened.\n\nI was so worn out, it was all I could do to take note of our union. I wanted to grab her and buck into her center until I filled her, but my body wouldn't respond.\n\n\"You feel so good inside me,\" she gasped.\n\nThen she moaned and dropped forward, bracing herself by her arms. As she ground her sex against mine, I felt her muscular sheath clenching my erection. With a shudder that seemed to shake her whole body, she leaned down and briefly kissed me, whispering, \"I needed this to tide me over, Ranji.\"\n\nWith that, she climbed off and pulled me until I lay on my side, then scooted so I was spooning her. She drew my arm about her, kissed my hand, then settled it about her waist. I'm not sure, but I think she herself was spooning Zinja. She gave a contented sigh and soon her breathing deepened to sleep.\n\nI faded out.\n\nThere was a sense of time passing, but I had no idea how much. I was more awake this time. I was also hard and on my right side. Rounded globes of soft flesh slowly rubbed against my shaft. There was a quiet cry and then a pause.\n\n\"Ranji?\" came Izel's whisper.\n\nMoving my left arm, I pulled her against me. Nuzzling close, I kissed along her shoulder and then lingered in the crook of her neck. \"You need me, Wife?\"\n\nShe shivered, her words were barely audible. \"Oh, Husband, I feel you behind me. I... I'm so sleepy but you are so hard and I want you inside me.\"\n\nSliding my hand down along her waist, I reached for her cleft, and she opened her legs to me. Gently running my fingertips over her furry mound, she shifted onto her back, spreading her legs in invitation. I expected to find heat. Instead, her vulva was swollen and liquid heat steamed from her core. Bringing my soaked fingers, I smelled her scent and then sucked the nectar off them. My cock went from stiff to hard.\n\n\"You're soaked, Izel.\"\n\n\"I dreamed of my husband, so brave and strong, making love to me all night. I woke up in your arms like this.\" Her hand caressed my cheek. \"Please?\"\n\nLeaning over, our lips met and she kissed me with a slow, burning heat. Tongues moved languidly as our hands explored the other. I nibbled her neck as she tugged at me, urging me to move. As I settled between her legs, she brought her knees up, baring her needy center to me.\n\n\"Guide me in,\" I murmured.\n\n\"Yes, my husband,\" she breathed. Her small fingers encircled my shaft and pointed me at her entrance. Once my crown connected to her slick, fat lips, she wrapped her legs about me, pushing me with her heels while arms grabbed my shoulders.\n\nPressing forward, her pussy easily parted and she began to engulf my cock, drawing me into her yielding center. Izel gasped as my crown opened her up, then she groaned as I descended, opening her up completely. When my balls nestled against the tender flesh of her inner thighs, she moaned again.\n\n\"So full,\" she murmured. \"So deep. Please love me?\"\n\n\"With pleasure.\"\n\nAnother kiss as I braced myself onto my arms above her. Pulling back and pressing back into her tight sheath. Once my length was coated with her juices, I set to a steady thrusting within her tight folds, the weight of my hips aiding my exploration of her depths.\n\nEach time I touched her core, Izel gasped and thrust back at me. In no time at all my balls were slick. Her hands ran along my arms and shoulders, caressing my chest.\n\n\"I feel you, so hot and so hard, moving inside me.\"\n\nFor long moments, we worked together, enjoying the pleasure of my cock working within her body. When her hips thrust back harder and her hands reached down to grab my butt, pulling me firmly into her sodden, swollen cavity, I responded. Over and over, my hard length parted her tender flesh, opened her to my driving presence. Each time I bottomed out, I firmly pressed further into her core, causing her to gasp with pleasure.\n\n\"Oh, gods,\" she whimpered.\n\nGripping her shoulders, I thrust more vigorously. Her hips rocked faster, her passion rising.\n\n\"Ranji!\"\n\nThen she moaned as she wrapped herself around me, her clenching core throbbing around my length. \"Oh!\"\n\nNearing my own release, I continued plundering her center. Just as she began to loosen her grip, I pressed as deep as I could reach, grunting as I fired hot salvos of semen against her convulsing core. With the second splash, Izel grunted, grinding herself against my embedded cock. Her pussy began another round of pulsations.\n\n\"I love you!\" she cried.\n\n\"I love you, Izel,\" I murmured, moving from side to side, doing my best to fill her with my sticky heat.\n\nWhen my orgasm faded, I rolled onto my back, taking her with me. She squeaked in surprise, then settled, kissing my chest with light kisses.\n\nThen she giggled.\n\n\"What?\"\n\n\"I don't want to move because there's a huge wet spot right behind me.\"\n\n\"Then don't move.\"\n\n\"Yes, Husband.\"\n\n* * * * *\n\n\"Kandikan, it's zero-seven hundred and it's breakfast time.\" Janetta pushed at my feet. \"Kandikan!\"\n\nI blinked and lifted. Noticed I was on my left side again, and that I had Janetta's pillow in my arms. Izel was lightly snoring, sprawled against my back.\n\nJanetta was dressed in her class B uniform. Zinja, dressed in work coveralls, looked on with amusement. Fortunately, the door was closed.\n\nAfter rubbing my eyes, I scooted out of bed and headed to the master bath.\n\nBoth women followed me in. The sergeant gave my partial erection an appreciative look, but as it was a piss-hard, I sat down, doing my best to relax so my bladder could empty.\n\nRaising her eyebrows, Janetta looked at me. \"Well? Are you eating or not? You wouldn't know it, but there's a shitload of people downstairs and they're all hungry. I need to know if you want food or if you're going back to bed.\"\n\n\"What happened to the portable hard drive I had with me?\"\n\n\"An armed courier and escort from the Commandant's Office came by an hour ago. I gave it to them. The flash drive is on your dresser.\"\n\n\"All right,\" I acknowledged, then sighed as the pressure below eased. \"Zinja? Can I have some water with two blockers and two stim tabs?\"\n\nNodding, she moved to carry out my request.\n\nFolding her arms, Janetta looked at me. \"I don't know what that means, Kandikan. All right about the messenger? All right about food? All right about the shitload of people in our home? I need some clarity here.\"\n\n\"The messenger.\" I glanced at my watch, confirming the time. I felt much better, but I had pushed myself pretty hard the day before. I needed more rest, but I had things to do. I took the water and pills from Zinja, swallowed them down, and emptied the glass.\n\nThen I heard the familiar chirp of my phone from the other room.\n\n\"I'll get it,\" Zinja volunteered and dashed out. She returned and handed it over.\n\nGlancing at the ID, my eyebrows rose. Barankoshto. \"Kandikan, here.\"\n\n\"Are you fit to travel yet, Commander?\"\n\n\"Getting there, General.\"\n\n\"I'm here with a couple of my company commanders and your Lieutenant Ja-See, who is assigned to something called Tactical Ops. With the loss of Braykoor and Terkouri, you are the ranking Security officer, Commander. I debriefed your Second before I sent her home to rest. I need to leave within the next hour and I need to talk to you before then.\"\n\n\"Understood, General. I'll be there as soon as I can.\"\n\n\"Outstanding.\" And she hung up.\n\nI closed the phone's lid and looked at Janetta. \"I need to go. Are you still tied to a desk?\"\n\n\"I am,\" she confirmed. \"Zinja's helping with road clean-up. I also need to ask you a favor.\"\n\n\"I'm going to hit the rain locker, brush, and shave. Grab me a couple of water bottles and something portable for me to eat, please. Why don't come with me? You can talk to me on the way.\"\n\nTurning, she said, \"Zinja, secure the Commander some food and water.\" The tall mechanic vanished. \"All right, Ranji. I'll call my CO and let him know I'm working on his project. When I'm done with that, I'll set you out a fresh uniform.\"\n\nIt was close to fifteen minutes later that I came back out; my hair was still damp yet I was feeling a lot more awake.\n\n\"Yes, sir,\" Janetta said. \"He is connected, but I can only promise I'll do the best I can. Thank you, sir.\" Then she closed her phone and put it into her breast pocket and closed the velcro flap. She was seated at our shared work desk.\n\n\"So what's going on?\"\n\n\"Some of the heavy vehicles were either destroyed or damaged by the enemy. We had one bulldozer working till late last night when it broke down. Maintenance says it's a broken driveshaft. We have three vehicle mechanics, but none of them know bulldozers. My officer wants to know if you can get us a replacement.\"\n\n\"Sounds reasonable. I'll call the Commandant while we're in transit.\" I pulled up a fresh pair of underwear and reached for my trousers.\n\nShe got up with a frown and while I was sliding in one leg, she pointed and demanded, \"What the fuck is that, Kandikan?\"\n\nI looked around. \"What?\"\n\nScowling, Janetta poked me in the side and I winced. \"That bruise! How did you get that?\"\n\n\"Oh, that.\" I finished pulling up my trousers and secured them.\n\nGlaring, she went to the closet and pulled the vest out. Scanned it, and then erupted. \"Gods of North and South! You said you were in talks all day. There's a fucking bullet lodged in your vest, Kandikan! Who shot you! And when did that happen!\"\n\n\"Hey, I walked away. They didn't.\" I put on my shirt and buttoned it up.\n\n\"Don't you sideline me! They, who?\"\n\n\"Calm down. I'll tell you in the cruiser on the way.\"\n\nScowling, she threw the vest onto the floor. \"Until the panel is replaced, it's useless. And I will not calm down. You didn't tell me about this last night and now I'm pissed at you again. I'm going downstairs to check on your food. Your wife's awake. Since you fucked her last night, at least have the decency to tell her goodbye.\"\n\nBefore I could say anything, she flung the door open and slammed it behind her.\n\n\"I love you, too, Janetta,\" I uttered. Grabbing socks and shoes, I went to the desk chair and put them on.\n\n\"Are you leaving again, Husband?\"\n\n\"I'm afraid so. Why don't you stay here and get caught up on some rest, hmm?\"\n\n\"She was angry. Was it because you made love to me last night?\"\n\n\"No. At least I hope not. She found where I was shot--\"\n\nIzel bolted upright, alarm on her face. \"What? Husband, you were shot?\"\n\nMoving over to her, I gave her a hug and kiss. \"I'm all right. Yes, I was shot but the vest protected me. All I got was a big bruise. I know you want to help, but stay here and rest. Check on your people and see what you can do to lend a hand around here.\"\n\nShe tugged up my shirt and searched until she found the bruise, then gently kissed it. \"My brave husband was injured protecting me.\" Looking up at me, she nodded. \"I will do as you ask. Will you be safe today?\""
    ],
    "authorname": "TJSkywind",
    "tags": [
        "early earth",
        "consensual",
        "native",
        "alt history",
        "military",
        "poly",
        "aliens",
        "atlantis",
        "draconians"
    ],
    "category": "Sci-Fi & Fantasy",
    "url": "https://www.literotica.com/s/starlight-gleaming-ch-21-pt-03"
}
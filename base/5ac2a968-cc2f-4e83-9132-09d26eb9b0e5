{
    "title": "Vacation with the Marshals Pt. 02",
    "pages": [
        "I woke up on a half-deflated air mattress, sinking into the center. I looked over and the bed was empty. I heard sounds of talking and dishes clanging downstairs.\n\nI was still naked, morning wood resting on my stomach and making a hill in my sheet. I wondered if Rebecca had noticed as she'd walked by. If she'd looked.\n\nI thought about her looking last night. Thought about her watching.\n\nMy hand crawled under the sheet, wrapped itself around my dick.\n\n\"You're so big,\" Rebecca had whispered last night, her fingers working under her own covers as she watched me stroke myself.\n\nI kicked my sheet off, squeezed my cock in my fist, imagined her looking at me again.\n\nI started stroking, sliding my hand up and down my shaft. Stopped and squeezed at the base, let my cock stand tall and throbbing.\n\nThere was a knock at the door, but it was already opening.\n\n\"Breakfast is ready,\" Cynthia was saying as she leaned into the room. She froze when she saw me, her eyes locked on my cock, and a \"Holy shit\" escaped her lips in a breath.\n\nI froze too, trying to think of what to do or say. The sheets were bunched at my feet, out of reach. So I just lay there, squeezing my hard-on, waiting for Cynthia to say something.\n\nShe seemed to stare for a long time. Then she snapped out of it and averted her eyes.\n\n\"Uhh, sorry,\" she said. \"Breakfast is ready,\" she said again. \"Then we're all headed to the beach.\"\n\nShe ducked quickly out of the room and shut the door behind her.\n\nI lay there for a minute, trying to process what had happened.\n\n\"Fuck,\" I said out loud.\n\nHow could I go downstairs after that? How could I face her? Would she tell Rebecca?\n\nMy mind played through numerous scenarios of what would transpire after this, all humiliating. But my cock stood as hard as ever. I was learning that I found being seen in this state incredibly arousing.\n\n\"Fuck,\" I said again.\n\nI thought about Cynthia telling everyone what she'd seen, about someone coming up to check on me, see me still going at it. What kind of pervert would they think I am?\n\nI took a deep breath, willed myself to think of the unsexiest thoughts I could conjure, got up, stuffed myself into my swim trunks, and threw on a shirt.\n\nI did not hurry through brushing my teeth, getting myself together. I was kind of hoping everyone would be gone by the time I came down. But voices reached me as I descended the stairs.\n\n\"Is Sam coming?\" Melanie said.\n\n\"I can go get him,\" Rebecca said.\n\n\"Didn't you check on him, Mom?\" Melanie said.\n\n\"Let's give him some privacy,\" Cynthia said.\n\nThere was a pause, silence. I imagined them looking at each other, something unspoken hanging in the air, the two younger Marshals seeing that their mother was hiding something.\n\n\"What am I missing?\" Bianca said.\n\nMelanie was laughing as she said, \"What happened, Mom?\"\n\n\"Oh my God,\" Rebecca said.\n\n\"Why do you think Sam needs privacy, right after you just went to get him?\" Melanie said. I could hear the laughter still in her voice.\n\n\"Oh,\" Bianca said, then she started laughing too.\n\n\"Did you catch him?\" Melanie said.\n\nI sat on the stairs, head in hand. How could I come down now? I'd just have to live upstairs for the next week, hiding from anyone who might come up.\n\n\"Oh my God,\" Rebecca said again, as Melanie and Bianca burst into laughter. I imagined Cynthia nodding, eyes grim with the news of what she'd seen.\n\n\"What did you see?\" Melanie said.\n\n\"Mel,\" Rebecca said, pleadingly.\n\n\"What do you mean, what did I see?\" Cynthia said. \"What do you think I saw?\"\n\n\"Tell me,\" Melanie said.\n\nThere was a pause.\n\n\"I saw him... you know,\" Cynthia said.\n\nAfter another moment all three of the younger women roared in laughter, Rebecca included.\n\n\"Oh my God, Mom, never make that motion again,\" Rebecca said.\n\nI suddenly pictured Cynthia pumping her fist in the air in the universal sign for what she'd seen me doing. I stifled a laugh myself, despite my mortification.\n\n\"Well, that's what he was doing,\" Cynthia said.\n\n\"Like, under the sheets?\" Bianca said.\n\n\"Uh, no.\"\n\n\"Oh my God,\" Rebecca said.\n\n\"So you saw his cock?\" Melanie said.\n\n\"Mel!\" Rebecca said.\n\n\"What? It's what we're all thinking.\"\n\n\"Yes,\" Cynthia said.\n\n\"How big was it?\" Melanie said, and then, \"Ow!\" I assumed Rebecca had smacked her.\n\n\"Maybe we should stop talking about this,\" Cynthia said. \"Who knows if he can hear us.\"\n\n\"I hope he can,\" Melanie said. \"He's up there strokin away, listening to us talking about it.\"\n\nI thought I could hear Bianca laughing.\n\n\"Okay, okay, girls,\" Cynthia said, sounding suddenly stern. \"Let's move on. Get out of here.\"\n\n\"Okay,\" Melanie said. And then, loudly, \"Sam, meet us at the beach when you're done jerking off!\"\n\n\"Mel, you're such a bitch,\" Rebecca said, but she was laughing.\n\nTheir voices and laughter receded as they moved through the house, then the door opened and shut. And then, quiet. I could hear the clock in the living room ticking, the soft rumble of the air conditioning.\n\nI took a deep breath, rubbed my face with both hands.\n\nI came downstairs finally, saw a plate of food set aside for me, the ladies' dishes rinsed and stacked into the dishwasher. I quickly ate, tried not to think about what was happening. Beyond the embarrassment, I was still trying to keep my arousal under control. I wondered if I should finish myself off after all. But I could just imagine someone coming back in for some forgotten item, finding me still going at it, thinking that's all I do.\n\nI put my dishes in the dishwasher, splashed some cold water on my face, told myself to get it together. Then I grabbed my things and made my way down toward the beach.\n\nThe women were already all set up with chairs, blankets on the ground, two beach umbrellas providing shade. Rebecca, Melanie, and Bianca were walking toward the water. Leaving Cynthia sitting by herself in the camp they'd set up.\n\nGreat, I thought, took a deep breath, and walked the rest of the way.\n\nCynthia looked up at me as I set my things down. She gave me an awkward smile, and I returned it.\n\n\"Hey,\" she said.\n\n\"Hey.\"\n\n\"Sit down, let's talk for a minute,\" she said, gesturing to the chair next to her.\n\nI nodded and sat. I didn't speak, just waited. She took a moment herself.\n\n\"I should apologize,\" she said. I started to protest, but she raised a hand to silence me. \"No, really. You deserve some privacy. I should know better than to just come barging in.\"\n\n\"It's okay,\" I said. \"It's your house. I shouldn't be, uh...\" I realized I couldn't possibly finish that sentence.\n\n\"Sam, look at me,\" she said. I did. She was wearing a black one-piece swimsuit with a pink floral pattern, sunglasses, and a big beach hat. Her large boobs hung heavy in her suit, resting over the slightest bulge of her stomach. I had to admit, she looked good, and I had to exert some willpower to bring my eyes to her face.\n\nShe continued, \"There is nothing wrong with what you were doing.\"\n\nI didn't say anything, but could feel myself blushing furiously.\n\n\"I'm sorry if I reacted poorly,\" Cynthia said. \"I just wasn't expecting...\" Her voice trailed off, and we sat awkwardly in silence for a moment.\n\nI couldn't imagine what I could say in this moment, so I said nothing. I watched Rebecca, Melanie, and Bianca wading into the shallows. They seemed to be laughing at something. I told myself it was narcissistic to assume they were talking about me, but I couldn't shake the feeling.\n\n\"I want you to feel comfortable here, Sam,\" Cynthia said finally. \"I know the girls are teasing you a bit. I want you to tell me if anyone makes you uncomfortable, okay?\"\n\n\"I don't mind,\" I said. \"I'm having a great time.\"\n\n\"I can tell,\" she said, and gave me a smile. I felt my blush deepen.\n\n\"Sorry,\" she said. \"Now I'm doing it.\"\n\n\"It's okay, really,\" I said.\n\n\"Good. Just let me know if anyone pushes you too far.\"\n\nI nodded.\n\n\"And if you need some privacy, for some... relief, let me know. You can use my room if you need to.\"\n\nI stared at her, working out what she was saying.\n\n\"I mean it,\" she said. \"I know how it gets, these girls are driving you crazy, and you don't have your own room here. But you should still be able to... take care of yourself.\"\n\nShe blushed a deep red as she said this, and her eyes flicked quickly toward my crotch. I realized as she looked that I was of course hard again. I wondered for just a moment if she noticed, but then she gave me a knowing smile, and said \"Just think about it.\"\n\nShe stood up and took a couple steps toward the surf, but then paused, turned, and said, \"Oh, and I hope you didn't let my interruption stop you from finishing up this morning.\" She gave me a wink and took another glance at my crotch, and continued on her way down the beach.\n\nI leaned back, closed my eyes. That conversation did not go like I thought it would.\n\nThe breeze off the water, the sound of the surf, the call of the seagulls, soon had me relaxing. Before long I was on the edge of sleep.\n\n\"Hey.\"\n\nI opened my eyes. Rebecca was standing in front of me, regarding me with a smile. She wore a blue two-piece which clung wetly to her body, her nipples poking through the fabric.\n\n\"Hey,\" I said, shifting in my seat.\n\nShe walked up and sat down next to me in the seat Cynthia had been in. I couldn't help but notice the way her boobs bounced as she settled into the chair. The material of her top looked strained against their weight, like the slightest tug could free them.\n\n\"What were you and my mom talking about?\" she said.\n\nI hesitated. \"Well,\" I started, but went nowhere.\n\n\"About how she caught you this morning?\"\n\nShe was looking at me, smiling broadly as if she'd caught me at something herself. I blushed, realized I couldn't lie. I'd heard Cynthia tell the girls, after all.\n\n\"Yeah,\" I said.\n\n\"And?\"\n\n\"And... she told me I could use her room, if... if I needed privacy.\"\n\n\"Jesus,\" Rebecca said, and then was quiet a moment. Then, suddenly, she started laughing. It started low, almost a chuckle, then it built inside of her, and she covered her mouth with her hand as it rose to a giggle. I watched her, watched her boobs bounce as the laugh built and filled her whole body, until she was doubled over, howling with laughter. I smiled, laughing a little myself, despite not quiet getting the joke.\n\n\"Did you tell her you already did it once in front of her daughter?\" she said, as her laughter faded back to a manageable level.\n\n\"Uh, no,\" I said. \"I decided not to bring that up. Did you tell her?\"\n\n\"No! But, uh...\" she trailed off, looking at me as if deciding whether to tell me something.\n\n\"What?\" I said.\n\n\"I did tell Melanie and Bianca.\"\n\n\"Told them what exactly?\"\n\n\"Well, they asked if you... finished yourself off last night.\"\n\n\"And?\"\n\n\"And...\" Rebecca said, and paused. Then, \"I told them you did, and that I watched.\"\n\n\"Huh,\" I said. I wasn't sure what else to say to that.\n\n\"They thought that was pretty hot,\" Rebecca said. \"I think Melanie's jealous everyone's getting to see your dick but her.\"\n\nBarely realizing I was doing it, I adjusted myself in my shorts, trying to give my growing hard-on some room. Rebecca smiled.\n\n\"You like being on display, huh,\" she said.\n\nI hesitated. It was true, I did, but I felt weird admitting it for some reason.\n\n\"Did you like it when my mom caught you?\"\n\n\"Uh, I don't... I didn't...\" I stammered, trying to come up with the words of a lie, but failing.\n\n\"It's okay if you did,\" she said. \"I think she liked it too. She was all flushed this morning.\"\n\nFuck it, I thought.\n\n\"I guess I'm a bit of an exhibitionist,\" I said.\n\n\"Yeah,\" Rebecca said, smiling. She pushed her sunglasses down on her nose so I could see her eyes resting on my crotch, and the bulge that was pushing against my shorts.\n\nAt that moment Bianca and Melanie came up, both dripping wet. Bianca's swimsuit was yellow and small, and through the wet material I could see brown skin beneath, and hints of the darker circles of her nipples. Melanie's was white with pink polka dots. The material was thicker than Bianca's, and even wet I couldn't see much through it. But the top comprised of two hand-sized cups, barely holding in her boobs, which bounced heavily as she walked. I tried not to stare, but my eyes couldn't seem to find anywhere to go where somebody's cleavage wasn't.\n\n\"Hey, Sam,\" Melanie said, looking at me with a playful grin. \"You decided to cover yourself up, huh?\"\n\n\"Not very well,\" Bianca said, nodding toward my crotch, where my hard-on stretched down my thigh through my shorts.\n\n\"Next time you're gonna flash somebody, let me know,\" Melanie said. I tried a laugh, but I couldn't hide my discomfort.\n\n\"Where's Mom?\" Rebecca said, leaning around Melanie to look toward the beach.\n\n\"Went to say hi to the neighbors,\" Melanie said and nodded down the beach to my right. I could see Cynthia in the distance, slowly making her way to a group of people setting up camp. They were at least a hundred yards away, but still it was a little jarring seeing someone else on such a secluded beach.\n\n\"So,\" Melanie said, stretching herself out on her stomach the blanket in front of me, facing me. Her boobs swung pendulously in her top as she propped herself on her elbows. \"When's your next show?\"\n\n\"God, Mel,\" Rebecca said.\n\nMelanie laughed, gave me a wink over her sunglasses, then turned over onto her back.\n\n\"Just keep me posted,\" she said.\n\n\"Sure thing,\" I said, trying to sound like a good sport, in on the joke. But really my mind was reeling with the possibility than Melanie Marshal might actually want to see what her mom and her sister had already seen. My dick strained uncomfortably against my shorts. There was no alleviating it. Not without taking it out and making myself cum, which I was dying to do.\n\n\"I'm gonna take a dip,\" I announced.\n\n\"Good idea,\" Bianca said, settling into the chair to my right and pulling out a book.\n\nI stood, giving up on hiding my condition, pulled my shirt off, and started spreading sunscreen on. Rebecca offered to do my back, and I tried hard not to think too much about her hands moving over my body. But her touch did not help soften my erection, and I could tell it was evident as I stood there. I thought I caught both Melanie and Bianca glancing at it and smiling, but mercifully nobody said anything.\n\nThe water was cold, and as soon as I was in deep enough I plunged myself under. It felt great, refreshing. Distracting. I swam out through crashing waves, letting my mind wander, enjoying having a moment to myself.\n\nVacations were supposed to be restful, right? I had been so on edge since I first got in that car, I felt like I hadn't breathed in days.\n\nBut why was I allowing myself to get so stressed? The ladies were all teasing me, yes. And my body was reacting on its own, often against my wishes. It was embarrassing, getting so aroused so easily, walking around with a hard-on constantly, having everyone know I was taking every opportunity I could to touch myself.\n\nBut so what? My body would react how it would react. Clearly there was no way to stop myself getting aroused from the slightest provocation. And surely the teasing wouldn't stop anytime soon. No one had condemned me for a pervert, or scolded me for acting inappropriately. They all even seemed, I allowed myself to think, to be enjoying my reactions. And I had to admit, once I got through the embarrassment, I was enjoying the attention.\n\nI resolved at that moment to try to relax, to not worry so much about embarrassing myself. I had little doubt that if I started to cross the line, one of these women would let me know. I should embrace what was happening, because honestly, who wouldn't kill for this vacation?\n\nFeeling better, I emerged from the water and walked back up to our camp. Cynthia was standing with another woman, near her own age, talking to Rebecca, Melanie, and Bianca, who were as I'd left them -- Melanie lying on the blanket, Rebecca and Bianca sitting on either side of a third empty chair.\n\nI smiled as I approached, and the woman with Cynthia looked me up and down before saying hello.\n\n\"This is Hannah Stone,\" Cynthia said to me. \"She's been our neighbor here for years, but we rarely seem to overlap in our visits.\"\n\n\"Nice to meet you,\" I said, and extended my hand. \"I'm Sam.\"\n\nHannah smiled and shook my hand. She was tall, nearly my own height, and thin. She was wearing a white lacey dress through which I could see a black two-piece swimsuit, its top worked into a bow pattern.\n\n\"Hi Sam,\" she said. \"You're a little outnumbered here, huh?\"\n\n\"He loves it,\" Melanie said, propped up on her elbows on the blanket.\n\n\"I'm sure he does,\" Hannah said.\n\n\"Who's all here with you?\" Rebecca said.\n\n\"More estrogen to torture Sam here,\" Hannah said. \"My friend Gretchen, her daughter Lily\u2014she's about your age, I think, Rebecca\u2014and my sister Susan.\"\n\n\"We'll all have to get together sometime this week,\" Cynthia said.\n\n\"Absolutely,\" Hannah said. \"Sorry Sam.\" She winked at me, and I shrugged. Melanie beamed.\n\n\"Well,\" Hannah said. \"I just wanted to come say hi. We'll see you on the beach.\" She smiled at everyone\u2014I thought she lingered just an extra moment on me\u2014then she waved as she made her way back down the beach toward her own crowd.\n\n\"She seemed to like Sam,\" Melanie said.\n\n\"She did, didn't she,\" Rebecca said. They were all looking at me. I shrugged and grabbed a towel, and started drying off.\n\n\"Who's ready for lunch?\" Cynthia said.\n\nWe broke for lunch, sandwiches and chips back in the house. We ate quickly, everyone eager to get back to the beach.\n\nWe resumed our previous spots on the beach, this time with a cooler of drinks. Cynthia, now in running clothes, announced she'd be back in half an hour or so and took off jogging down the beach.\n\nDrinks were passed around, sunscreen was applied -- Rebecca did my back again, and I managed with only a slight stirring in my shorts. I left my shirt off and sat down with a book, sipping my beer, enjoying the warm breeze and sun.\n\n\"Mom's been running a lot lately,\" Rebecca said after a while.\n\n\"She does look good,\" Bianca said.\n\n\"Think she's lookin for a man?\" Melanie said.\n\n\"I think it's been a while,\" Rebecca said.\n\n\"What, since she got laid?\"\n\n\"You know what I mean.\"\n\n\"She did seem to like seeing Sam's dick this morning,\" Melanie said, rolling over onto her stomach and looking at me.\n\nI blushed and shrugged, trying to remind myself to just go with it.\n\n\"What was that about, anyway?\" Melanie said to me.\n\n\"What do you mean?\" I said.\n\n\"How did she catch you?\"\n\n\"She just came in, I didn't have a chance to cover myself.\"\n\n\"So you were totally naked?\" Bianca said.\n\n\"Yeah.\"\n\n\"How hard were you?\" Melanie said.\n\nI laughed, a little awkwardly.\n\n\"About as hard as I can get,\" I said.\n\n\"And what were you doing?\"\n\n\"I was... stroking it.\"\n\n\"Did you cum?\"\n\n\"No.\"\n\n\"Why not?\" The questions were coming rapidfire from Melanie, while Rebecca and Bianca just watched and listened.\n\n\"I don't know, I was embarrassed.\"\n\n\"Poor guy,\" Melanie said, and made a mock sad face.\n\n\"Doesn't seem like you have much to be embarrassed about to me,\" Bianca said, eyeing the bulge in my shorts. I was of course hard again, and there wasn't much point trying to hide it.\n\n\"He doesn't,\" Rebecca said, and winked at me.\n\n\"Yeah, Rebecca got to see it last night, didn't she?\" Melanie said. \"When's our turn?\"\n\nI laughed. \"Just say the word,\" I said, and finished my beer. Rebecca handed me a new one almost immediately.\n\nConversation turned to other things, with only occasional references to my dick. Cynthia came back from her run and sat with us for a couple rounds. A few of us dipped in the water a few more times, but then soon it was time to head back to the house for dinner.",
        "I volunteered to use the outside shower again. And again I was tempted to relieve my tension right then and there, but again I resisted. I got dressed in a t-shirt and shorts and joined the others.\n\nIt was Rebecca's turn to make the dinner, and I helped as best I could. She made stuffed peppers, and I mostly got in the way, handing her things when I could. The end result was delicious.\n\n\"So what do you guys want to do?\" Cynthia said after everything was cleaned up, and we were all in the living room.\n\n\"You gonna hang out with us tonight?\" Melanie said.\n\n\"Sure. Unless I'm too old. What did you kids have planned: truth or dare, spin the bottle?\"\n\nMelanie laughed, Cynthia smiled.\n\n\"Man, I haven't played truth or dare since junior high,\" Melanie said.\n\n\"I don't think I ever actually have,\" I said.\n\n\"Are you serious?\" Melanie looked at me like I'd admitted to lacking something far more significant. Like I'd missed some essential rite of passage.\n\n\"Let's play,\" Rebecca said. \"We can make it a drinking game, so it's less juvenile.\"\n\n\"How would you make truth or dare a drinking game?\" I said.\n\n\"Like, if your answer -- or your performance in a dare -- isn't good enough, you have to drink.\"\n\n\"I'll be the judge,\" Melanie said.\n\n\"Of course you will,\" said Bianca.\n\n\"I'm gonna regret this, aren't I?\" Cynthia said.\n\n\"Probably,\" said Melanie. She shrugged and gave her mom a big smile.\n\nWe circled around the coffee table -- Melanie and Cynthia on the couch, Rebecca on the floor between their pairs of legs, Bianca on the easy chair across the table and me on the ottoman to her right.\n\n\"Okay,\" Melanie said. \"Rules. When you're called, you choose truth or dare.\"\n\nCynthia giggled and muttered \"I can't believe we're actually playing this.\"\n\nMelanie ignored her and continued, \"If you choose truth, you have to answer the question you're given. If we think you're lying, or your answer is just lame, you drink. If you choose dare, you have to do whatever you're told to. If you chicken out, or we're not satisfied with your performance, you drink.\"\n\n\"And no choosing only truth,\" Bianca said.\n\n\"Oh damn, that was my plan,\" Cynthia said.\n\n\"We'll give you easy ones,\" Melanie told her mom. \"No one wants to see your boobs.\"\n\n\"Except Sam,\" Rebecca said. She passed me a conspiratorial wink.\n\n\"Right, except Sam.\"\n\nCynthia laughed and smiled at me. My face grew hot.\n\n\"So if you choose truth two times in a row,\" Bianca said, \"the third one has to be a dare.\"\n\n\"Good call,\" said Melanie.\n\n\"So who goes first?\" Rebecca said.\n\n\"Sam, truth or dare?\" Melanie said, looking at me with a merciless expression.\n\n\"I guess I'll start with truth,\" I said.\n\n\"Fine.\" She looked disappointed. \"Have you ever...\" she paused, thinking. \"Have you ever measured your dick?\"\n\n\"No,\" I said, perhaps too quickly.\n\n\"Bullshit,\" Melanie said. \"Drink.\"\n\nI'm sure I was blushing, both because we were again talking about my dick and because of the indignity of everyone assuming I'd measured it.\n\n\"Yep, I regret this already,\" Cynthia said.\n\n\"You love it, Mom,\" Melanie said. \"Sam, pick someone.\"\n\n\"Uh,\" I said, looking around the room. \"Rebecca, truth or dare.\"\n\nRebecca bit her lip, trying to work out what I might ask her, how far I'd go.\n\n\"Truth,\" she said finally.\n\n\"This is so lame,\" Bianca said.\n\n\"Have you ever...\" I began, thinking... \"sent someone a dirty picture of yourself?\"\n\n\"Um...\" Rebecca said, biting her lip, sending a timid glance to her mom.\n\n\"Yes,\" she said finally.\n\n\"Rebecca!\" Cynthia said.\n\n\"Becca, you slut!\" Melanie said, enjoying Rebecca's answer immensely.\n\n\"It was just my boobs,\" Rebecca said, blushing deep red.\n\n\"To who?\" Melanie said.\n\n\"Whom,\" Cynthia said automatically.\n\n\"One question at a time!\" Rebecca said.\n\nCynthia was looking at Rebecca like she'd never seen her before. I was, of course, looking at Rebecca's chest, trying to imagine the picture she'd taken. She was wearing a tight grey t-shirt, her cleavage just peeking out from the v-neck.\n\n\"Come on, Mom,\" Melanie said. \"No judgments during truth or dare.\"\n\n\"Melanie,\" Rebecca said. \"Truth or dare?\"\n\nMelanie laughed. \"I know what you're thinking,\" she said. \"Not a chance. Dare.\"\n\nRebecca looked at me and winked, then said, \"Show Sam your boobs.\"\n\n\"This is getting out of hand fast,\" Cynthia said.\n\n\"How did you think it was gonna go?\" Bianca said.\n\n\"Fine,\" Melanie said. \"Come here, Sam.\"\n\nShe stood up and walked into the kitchen, away from the crowd. I followed, trying to contain my excitement. Melanie's was the first pair of boobs I'd ever really noticed, years ago, and I'd been wanting to see them ever since. I'd cast furtive glances toward the Marshals' windows whenever I could, praying for a chance view. And now... was this happening?\n\nWe stood in the kitchen, facing each other. She was wearing a black tank top and short shorts, and already her cleavage presented a nice view.\n\n\"Stop drooling,\" Melanie said, but she was smiling. \"Ready?\"\n\n\"Ready,\" I said, trying to keep the tremor out of my voice.\n\nShe grabbed the hem of her shirt and lifted, slowly, grabbing her bra when she reached it and peeling upward. Her boobs fell out, one by one, and shook as they settled. It was only a few seconds, but I felt like I mapped out every detail in that moment. They were perfect. Large, round, hanging heavily without the support of her bra. Her nipples were small in proportion to the whole, pink and perfectly round, pointing slightly outward.\n\nAfter a moment, to my disappointment, she pulled her shirt back down and stuffed herself back into her bra.\n\n\"Glad you enjoyed that,\" she said, looking at the bulge growing in my shorts and winking at me. Then she turned and walked back into the room.\n\nI followed her and sat quickly, but Rebecca gave me a knowing smile with her own glance to my crotch.\n\n\"Alright,\" Melanie said, taking her own seat. She seemed to be blushing a little, to my surprise. \"Bianca, don't think we've forgotten about you. Truth or dare.\"\n\n\"Hmm,\" Bianca said. \"I'll go truth.\"\n\n\"Hmph.\" Melanie looked disappointed. Then she smiled devilishly. \"Okay, B, would you fuck our Sam here?\"\n\nBianca looked taken aback, then barked a laugh. She looked appraisingly at me, pondering the question.\n\nFinally she said, \"If he's packin what it looks like he's packin, hell yeah.\"\n\nMelanie laughed, clapping. Rebecca smiled at me. Cynthia still looked a little shell-shocked, but she laughed too and shot me a glance. Bianca looked at me and shrugged, and I tried hard not to blush, unsuccessfully.\n\n\"Okay, Cynthia,\" Bianca said. \"You have to go eventually. Truth or dare?\"\n\n\"Truth,\" Cynthia said quickly.\n\n\"Don't go easy on her,\" Melanie said. Cynthia shot her daughter a look, but Melanie wasn't cowed.\n\n\"How long's it been since you had sex?\" Bianca said.\n\n\"Oy,\" Cynthia said. \"About six months.\"\n\n\"Yikes.\"\n\n\"With that Bill guy?\" Rebecca said.\n\nCynthia nodded.\n\n\"Who's Bill?\" Melanie said.\n\n\"One question!\" Cynthia said.\n\n\"He's this creepo she met in a bar,\" Rebecca said. \"Apparently had a real small--\"\n\n\"Alright, miss boob pic,\" Cynthia said, cutting her off. \"No judgment, remember?\"\n\nRebecca looked scandalized, and Melanie, Bianca and I all burst out laughing.\n\n\"Rebecca, truth or dare,\" Cynthia said after a moment, staring daggers at her daughter.\n\n\"Shit,\" Rebecca said. \"Dare.\"\n\nCynthia stared at Rebecca, as if deciding how much she wanted to get back at her.\n\n\"Take your shirt off,\" she said finally, and looked surprised at herself.\n\n\"What?!\" Rebecca shrieked.\n\n\"Holy shit,\" Melanie said, a smile stretching across her face.\n\nRebecca stared at her mom, who just stared back unflinchingly.\n\n\"Fine,\" Rebecca said finally. She quickly peeled off her shirt and tossed it aside. She wore a black lacy bra that pushed her boobs together, presenting a lovely cleavage view. She shifted her hands as if unsure where to put them, finally crossing them over her stomach.\n\n\"Mom,\" Rebecca said, looking vindictive. \"Truth or dare.\"\n\n\"Who said this game's lame?\" Melanie said to Bianca, leaning forward in her chair. \"This is gettin good.\"\n\n\"Truth,\" Cynthia said, starting to look nervous.\n\n\"How many is that?\" Bianca said.\n\n\"Only two!\"\n\n\"Fine.\"\n\n\"Are you hoping to see Sam's dick again tonight?\" Rebecca said.\n\nCynthia looked assaulted. She passed me a quick glance, blushed, and looked away.\n\n\"That's not...\" she began. \"No!\"\n\n\"Bullshit,\" Bianca said. \"Drink.\"\n\nCynthia sputtered as if to protest, looked at me again, and couldn't seem to find any words. Then, looking defeated, she took a long drink.\n\n\"Well,\" Melanie said. \"What are you waiting for, Mom? It's your turn -- dare him to whip it out!\"\n\n\"You guys are awful,\" Cynthia said, looking at Melanie, then at me. She seemed to consider it for a moment, though, and I wondered if she could possibly really dare me to do that. I didn't think so, but I also wouldn't have thought she'd dare her daughter to take her shirt off.\n\n\"Sam,\" she said finally. \"Truth or dare?\"\n\nI froze. Was she really going to do it?\n\n\"He wants dare,\" Melanie said.\n\n\"Dare,\" I said.\n\nAll eyes went to Cynthia. She looked at me. She seemed to be wavering, indecisive.\n\nFinally she said, \"Measure it.\"\n\n\"Hmm,\" Melanie said. \"A little disappointing, but I'm intrigued. I'll allow it.\"\n\n\"With what?\" I said.\n\n\"There's a tape measure in the junk drawer in the kitchen,\" Cynthia said.\n\n\"Uh,\" I said, stalling a little. \"Alright.\n\nI stood up, everyone watching. There was no use trying to hide the bulge straining against my shorts, and no one seemed to fail to notice it.\n\nI walked into the kitchen, found the tape measure in the junk drawer. I couldn't believe I was doing this. I wondered if I should step into the bathroom, but that seemed unnecessary.\n\n\"Let us know if you need a hand!\" Melanie called, and several laughs followed.\n\nI took a deep breath and pulled my shorts down, letting my cock spring out. I stroked it a few times, making sure it was fully hard.\n\n\"Don't forget the girth!\" Bianca called. The rest of them shrieked with laughter,\n\nI held it at the base, thrust it out a little, and held the tape up to the side. I heard some murmuring from the living room, then a knock on the wall. I looked over to see Rebecca peeking in. Her eyes had already found my cock.\n\n\"We decided there needed to be a witness,\" she said, blushing. \"To make sure you don't fudge the numbers.\"\n\nI felt like I'd been caught at something. I stood there awkwardly, hard cock in one hand and a tape measure in the other.\n\nRebecca walked up to me, taking a closer look.\n\n\"Just about eight inches,\" she whispered and smiled at me. \"Not too shabby.\"\n\n\"Here,\" she said, taking the tape measure from me. She wrapped it gently around my dick and got on her knees so she could get a closer look. I took a deep breath, feeling her fingers through the tape, looking down at her boobs barely contained in her bra.\n\n\"About five and a half inches around,\" she said, and stood up. \"Impressive.\"\n\n\"Uh, thanks,\" I said, smiling awkwardly.\n\n\"That thing gonna fit back in your shorts?\" she said, eyeing my hard-on.\n\n\"I guess,\" I said. \"Not comfortably.\"\n\n\"Well, you know everyone wants to see it anyway.\" Her eyes gleamed mischievously.\n\n\"What, you think I should go back out there with my dick out?\" I said.\n\nRebecca shrugged. \"Call it an advance dare,\" she said. \"And no, I don't think you should go out with your dick out. I think you should go out there naked.\"\n\nI stared at her, waiting for her to say \"Just kidding!\" But she didn't. She just stood there, in her bra, waiting for me to decide what to do.\n\nI took a deep, shaky breath. Fuck it, I thought. This is me going with it. I looked at her and shrugged, and pulled my shirt off. She smiled broadly. I stepped out of my shorts and stood there naked, my cock so hard it was pointing almost straight upwards.\n\n\"Good boy,\" Rebecca whispered. And she turned and quickly walked back into the living room, saying, \"I decided to give him a fresh dare while we were in there.\"\n\nI took another deep breath and followed her in, slowly. I'd never felt so naked in all my life. My cock swayed back and forth absurdly as I walked. When I stepped into view, all eyes snapped to me. Bianca's jaw dropped. Cynthia gasped and brought her hands to her mouth. Melanie's eyes grew with surprise and her mouth broadened into a huge, delighted smile.\n\nI looked to Cynthia for some kind of sign that I'd gone too far. I expected her to stand up in a rage, scold us all for getting out of hand, and storm out. But she lowered her hands, and she was smiling, staring at my cock.\n\nI went back to my seat. I wasn't sure where to put my hands. There certainly wasn't any point trying to hide anything. So I leaned back, allowing myself to be on full display.\n\n\"Damn,\" Bianca said.\n\n\"So,\" Melanie said. \"Measurements?\" She looked at Rebecca.\n\n\"About eight inches long, five and a half around,\" Rebecca said.\n\n\"Damn,\" Bianca said again.\n\n\"Alright, Sam,\" Melanie said, addressing me but looking only at my dick. \"You're up.\"\n\n\"Okay,\" I said. \"Melanie, truth or dare.\"\n\n\"Dare,\" she said.\n\n\"Take your shirt off,\" I said.\n\n\"Boo,\" she said, disappointed. \"I thought you were gonna dare me to touch it.\"\n\nBut she stood up, slowly, and moved toward me, swaying side to side, hands on hips, smiling at me.\n\n\"While we're at it, Sam,\" she said, moving closer. \"I dare you to stroke it while I do this.\"\n\n\"Shit,\" Bianca whispered. Out of the corner of my eye I saw Cynthia shake her head, but she leaned forward, watching.\n\nMelanie stood directly in front of me, her hands on the hem of her shirt, moving them back and forth and slowly upward. I took my cock in my hand and squeezed it, moving my hand slowly up and down. I kept stopping and squeezing hard, feeling I could cum any moment if I wasn't careful.\n\nMelanie lifted her shirt, never taking her eyes off me. She pulled it up and off, revealing a lacy red bra. Then she smiled at me and unclasped it, letting it fall, her boobs shaking free. I moaned, and my hand worked on its own, stroking faster as I stared at her beautiful tits.\n\n\"I dare you,\" Melanie said again, sinking to her knees, squeezing her tits, \"to cum on my tits.\"\n\nNo one else said a word. No protests even from Cynthia. They all just watched, rapt.\n\nI stood up, my cock right in Melanie's face, my hand moving faster up and down the shaft. She looked at it and smiled and raised herself up so her boobs were just under it, squeezing and rubbing them.\n\n\"Come on, Sam,\" she said. \"Stroke that big cock and cum for me.\"\n\nThat was all it took to send me over the edge. I moaned and pumped my cock, and then squeezed it at the base and aimed. I erupted, the first shot blasting Melanie in the face. She moaned in surprise, and I kept cumming, hitting her tits with shot after thick shot. Melanie just smiled at me, a glob of cum trailing down her cheek, as I covered her tits.\n\nFinally, after the last of my cum dripped out of me, I sat down on the floor, panting. It felt like I hadn't breathed in minutes.\n\n\"Wow,\" Rebecca said, eyes wide, staring.\n\n\"I'm a terrible mother,\" Cynthia whispered, to herself it seemed, looking on and shaking her head.\n\n\"Hush,\" Bianca said. \"We're all adults here, right?\" Cynthia didn't respond, just stared at her daughter, topless and covered in cum.\n\n\"Sam, drink,\" Melanie said, smiling at me. \"You were supposed to cum on my tits, not my face.\" She ran a finger up her cheek, gathering the thick glob of cum that trailed down her face. Then she winked at me and slid her finger in her mouth, slurping up the cum.\n\nMy cock twitched where it rested on my stomach, slowly deflating, still leaking some. Obediently I found my beer and took a long swig of it.\n\nEveryone was quiet for a minute. Melanie picked up her shirt and used it to wipe the cum off herself. Her boobs shook as she did so, and soon the shirt was saturated with cum. Her boobs were still shiny with moisture when she tossed the shirt on the ground.\n\n\"That was fucking hot,\" Bianca said, staring at my cock as it slowly deflated, a small pool of cum gathering under it on my stomach.\n\n\"Well it's your turn then, Sam,\" Rebecca said.\n\n\"Cynthia,\" I said, thinking I'd take things down a notch. \"Truth or dare?\"\n\n\"I think we should be done with truth, right?\" Melanie said. \"We've kind of crossed a point of no return here.\"\n\n\"I wonder if I should keep playing,\" Cynthia said. \"I've let this get pretty out of hand.\"\n\n\"Don't try to tell me you didn't think that was hot,\" Melanie said.\n\nCynthia looked uncomfortable, but shrugged.\n\n\"I'm supposed to be the grownup here,\" she said. \"I'm not supposed to be watching the boy next door cum on my daughter's boobs.\"\n\n\"Little late for that,\" Rebecca said.\n\nCynthia just sighed and shook her head. But she looked flushed, and she didn't go anywhere.\n\n\"Give her a dare, Sam,\" Melanie said.\n\nI looked at Cynthia, thinking. She looked back at me, and seemed to be making a concerted effort not to look at my dick.\n\n\"I have an idea,\" Melanie said, her evil grin returning to her face. She walked toward me and kneeled on the floor next to me, leaned in and whispered in my ear. Her nipple grazed my arm and I felt my cock stir.\n\n\"You're evil,\" I said, and she laughed, and didn't deny it. Cynthia looked very nervous.\n\n\"Come on, it's a good one,\" Melanie said.\n\n\"Alright,\" I said. \"Cynthia. Change into Melanie's shirt.\"\n\nRebecca shrieked in surprise, and Bianca laughed loudly and clapped. Cynthia looked surprised but not as outraged as I would have guessed.\n\nMelanie handed her mom her cum-soaked shirt.\n\n\"You kids are out of control,\" Cynthia said. But she took the shirt, looked around, and then stood up and walked into the bathroom.\n\nRebecca flashed me a smile. I was relieved that she seemed to be enjoying this.\n\nA minute later, Cynthia emerged, wearing Melanie's tank top. It had been tight on her daughter, and Cynthia was barely squeezing into it. She'd evidently left her bra out of the equation, and her nipples poked prominently through the material. Her cleavage spilled out from both the top and the sides, and a strip of her slightly-protruding belly emerged from the bottom. But most striking of all, the shirt was visibly wet all over, with several white clumps of my cum dripping down the material. And Cynthia's skin and hair glistened with moisture where she had pulled it on.\n\n\"Lookin good, Mom,\" Rebecca said, smiling broadly. Bianca hollered her approval, and Melanie clapped. I just stared. I had made an effort before not to think too sexually about Cynthia. But seeing her now, wearing something more revealing than I'd seen her in before, wet with my cum, was an incredible turn on. As I stared, my dick grew steadily, lifting itself back off my stomach like some animal awakening, and rose up.\n\nCynthia didn't fail to notice. She looked right at my cock as it grew hard, a bead of cum dripping off the tip. She blushed and flashed me a smile.\n\nShe took her seat again, and looked at Bianca.\n\n\"How have you managed to keep all your clothes on all this time?\" she said.\n\nBianca just shrugged. She didn't seem concerned.\n\n\"Well,\" Cynthia said. \"I have a dare for you.\"\n\n\"Look who's gettin into truth or dare!\" Melanie said.\n\nBianca was wearing a tight black t-shirt with some band name I wasn't familiar with, and short jean shorts. She stood up, ready to take her shirt off.\n\n\"Hang on,\" Cynthia said. \"Someone put some music on.\"\n\nMelanie leapt into action. Her phone was already synced to the speaker in the room, and she put on something smooth and rhythmic that I hadn't heard before. Bianca looked unperturbed, just waiting for instructions.\n\nCynthia smiled. \"Alright, Bianca,\" she said. \"Let's have a little striptease.\"",
        "\"Damn, Mom,\" Rebecca said. Cynthia just shrugged.\n\nBianca stood still a moment, not out of hesitation, but as if waiting for her moment in the song. Then it came as the tempo picked up, and she turned toward me. Melanie whooped in anticipation.\n\nBianca walked toward me, slowly, swaying her hips. I sat on the floor and watched, rapt. I couldn't believe this was happening. It was like all the fantasies I'd harbored since puberty began were all coming alive in this moment.\n\nBianca reached me and kicked out, resting her bare right foot on my shoulder. Then she gave me a shove, flattening me on my back. She stood over me and smiled. Swaying to the music, she pulled her shirt off, slowly. I hadn't realized she wasn't wearing a bra, but before I knew it her boobs fell out of her shirt. They were firm, perky, pointing slightly outward with small dark nipples. I let out a breath, trying to keep my excitement under control. I thought there was a real chance I'd cum again without even being touched if I wasn't careful.\n\nShe whipped her shirt around over her head, dipping her hips to the music, to hoots and laughter all around, and then she tossed it aside. She ran her hands up her body, over her tits, keeping eye contact with me, moving her hips. Then she dropped, suddenly, her ass almost hitting my thighs before she hopped back up, her body moving like liquid. I gasped, and let out a moan. I heard a giggle, from Rebecca I thought. Bianca smiled at me.\n\nThe song picked up in tempo, and Bianca moved faster. Her boobs bounced as she did. She dropped her hips and shook her ass. Then, before I knew what she was doing, she was on her knees, straddling my thighs. She leaned down and ran her hands up my stomach, letting the tight braids of her hair swing down and run along my body. I could feel her breath on my cock, and I writhed under her.\n\n\"Jesus,\" Rebecca muttered. Bianca was clearly going above and beyond her dare, but no one seemed to object. Least of all me.\n\nBianca rose up on her knees, smiling at me. Slowly, still swaying with the music, she pulled the button of her shorts free and eased the zipper down. She grabbed the hem of her shorts and climbed to her feet. Her movements were so graceful it was like her shorts stayed still while her body rose, and she stepped out of them, standing over me in a tiny black thong.\n\n\"You don't need to--\" Cynthia began, sounding apologetic, but Melanie shushed her quickly.\n\nBianca didn't respond at all. She just lowered herself back down and sat on my lap. She paused there, grinding slightly into my thighs. Then, smiling and looking me straight in the eyes, she grabbed my cock and pulled it against her crotch. She squeezed it tight with her hand, and began to rock against it, pressing it into her thong. I could feel her moisture soaking through the material, and I moaned.\n\n\"Fuck,\" Melanie muttered. I looked up briefly and saw her leaning back in her seat, hand stuffed into her shorts, moving urgently. I moaned again.\n\nBianca smiled at me and rocked up and down, moving both her hand and her hips, rubbing her crotch against the tip of my cock while her hand worked up and down the shaft.\n\n\"Oh, fuck,\" I cried out, and wanted to give more warning, but I couldn't hold it. I erupted again, cum spurting out and hitting Bianca's tits, then her stomach, then oozing over her hand onto her crotch. She moaned and continued to grind into me, squeezing my cock hard with her hand and pumping.\n\nI kept cumming, and she moaned louder, her hips shaking uncontrollably. Then she climbed on top of me, pinned my cock against my stomach and leaned against it, grinding harder and faster. She buried her face in my chest and cried out. I could feel her cumming through her panties, could feel the juices saturating them, dripping out onto my cock. I squirted one more shot of cum between our stomachs and she bit the flesh of my chest, crying out. I heard Melanie moan, and I looked up to see her gyrating on the couch, pillow clutched in one hand, the other working madly in her shorts.\n\nBianca moved her crotch against my cock, slower now, sliding up and down. Together we were soaked, our juices mingling together, permeating her panties, pooling on my stomach.\n\nShe pulled her face away from my chest and looked at me, smiling. I smiled back, breathing heavily. She rolled off me, on her side on the floor next to me.\n\nThere was a long silence. I lay on my back, staring at the ceiling. I could hear Bianca breathing next to me, could feel the presence of the other three women, but for a long time, nobody made a noise.\n\n\"Shit,\" Bianca breathed finally. \"I didn't think I could cum that way.\"\n\n\"That was fuckin hot,\" Melanie said.\n\nI propped myself up on my elbows. I was a mess, lying on the floor naked, my deflating dick sitting in a pool of cum that mixed with Bianca's juices and stretched all the way to my chest. Melanie looked flushed, leaning back in the couch, topless, her boobs bobbing up and down with her breathing, hand still in her short. Rebecca was leaning forward in her seat, still just wearing her bra, staring, her eyes still glued to me and Bianca on the floor. Cynthia looked stunned, like she couldn't believe what she'd just watched. But I couldn't help noticing her nipples pressing hard against the material of Melanie's too-small tank top.\n\n\"Well,\" Bianca said, sitting up next to me. \"What do we think, are we still playing?\"\n\n\"I think that's it for me,\" Cynthia said, standing up. \"Rebecca, can I talk to you a second?\"\n\n\"Uh, sure,\" Rebecca said, standing to follow her mom into the kitchen, looking apprehensive.\n\nCynthia and Rebecca spoke in hushed tones, their voices but not their words reaching us from the kitchen. Every now and then I'd hear an insistent \"I know!\" from Rebecca, or a consoling \"I trust you,\" from Cynthia, but mostly I couldn't catch what they were saying to each other.\n\nMeanwhile, Melanie and Bianca seemed to be communicating to each other without words. Bianca was sitting up next to me, all but naked in just her wet and stained thong, looking to Melanie on the couch who leaned forward topless, her boobs pressed together between her arms. They were making eye contact and mouthing words I couldn't read to each other. If I had to guess, I'd say they were planning something. They occasionally flicked their eyes to the kitchen, to me, smiling wickedly.\n\nI just sat there, feeling slightly left out and awkward. I wondered if I should clean myself up. I was a mess, sitting naked on the floor, my stomach and chest all wet, growing stickier by the moment.\n\nI was still immobile with indecision when Cynthia and Rebecca emerged from the kitchen. It was an odd sight. They seemed to be coming from a deep, earnest, mother-daughter discussion, yet Cynthia was all but spilling out of a much too small tank top, still wet with cum, and Rebecca's boobs bounced energetically in her bra.\n\n\"Well,\" Cynthia said. \"I'm goin to bed. You kids behave yourselves.\"\n\n\"Of course we will,\" Melanie said, smiling angelically up at her mother, looking rather incongruous herself, still topless and sticky.\n\nCynthia gave her a dubious look, but smiled.\n\n\"Goodnight, all,\" she said, and made her way to the stairs.\n\n\"Goodnight!\" we called.\n\n\"Hope you brought your vibrator,\" Melanie called after her.\n\n\"Oh, don't you worry,\" Cynthia said, from halfway up the stairs.\n\nRebecca laughed and took a seat on the ottoman I'd vacated.\n\n\"So,\" she said. \"We still playin?\"\n\n\"Think there's more to be done?\" Melanie said. She smiled at Rebecca, all teeth and anticipation.\n\nRebecca looked at me, blushed, and shrugged.\n\n\"Well, it's Bianca's turn, right?\" she said. \"Guess it's her call.\"\n\n\"Well,\" Bianca said, looking at Rebecca. Melanie was still looking at Rebecca too. \"It's really kinda your call.\"\n\n\"What do you mean?\" Rebecca said.\n\n\"You've gotten off kinda easy, haven't you?\" Melanie said.\n\n\"So to speak,\" Bianca said. Melanie laughed. I just looked on, curious as to where this was going, not quite daring to think it was going where it seemed.\n\n\"So...\" Rebecca said, glancing at me again.\n\n\"So if it's gonna keep escalating...\" Bianca said, letting the rest of her sentence just hang there unsaid.\n\nThere was a moment of quiet. Melanie and Bianca just looked at Rebecca. Rebecca looked at me, bit her lip, shrugged again.\n\n\"Fuck it, B,\" Melanie said. \"Just dare her. If she chickens out, she drinks.\"\n\nRebecca looked at Bianca, a mix of anxiety and excitement in her eyes. Another moment of quiet stretched out.\n\n\"Come here,\" Bianca said finally.\n\nRebecca stood, looking a little uncomfortable. She looked at me again. My dick stirred where it lay on my stomach. Rebecca took a few paces and stood in front of me and Bianca, waiting.\n\nBianca stood, walked up to Rebecca. She whispered something to her, and Rebecca nodded pensively. Bianca smiled at me, and with one deft motion reached behind Rebecca and unclasped her bra. Rebecca's boobs fell forward and bounced a little as they lost their support, and Bianca, delicately but smoothly, pulled the bra away and set it aside.\n\nRebecca had given me a sneak peak last night, of course, but this was different. Seeing her exposed like this, standing in front of me, her boobs large and round and bare, had me fully hard again in no time. She didn't fail to notice. Her eyes snapped to my cock as it stretched along my stomach and rose, standing for her. Then she looked me in the eye and smiled.\n\nBianca smiled too, whispered something else to Rebecca and, getting a nod in response, started to undo Rebecca's shorts. She pulled the button undone and slid the zipper down. Then she gave me a look and slipped behind Rebecca.\n\nRebecca was breathing heavily, her boobs rising and falling with each breath. She watched me as Bianca's hands slid over her, sliding over her tits, then down her stomach, slipping into her shorts and pushing them down. She brought shorts and panties down together, sliding her hands over Rebecca's legs, lowering herself to her knees so she could peel them off entirely.\n\nRebecca obligingly stepped out of her shorts and stood before me, naked. She had just the slightest patch of pubic hair and was visibly glistening beneath. I stared and bit my lip, and my cock twitched. Rebecca giggled nervously.\n\nBianca ran her hands back up Rebecca legs as she stood up, sliding one between. Rebecca shuddered. Bianca rubbed her for just a moment, and smiled at me over her shoulder.\n\n\"I think she's wet enough for you already,\" Bianca said.\n\n\"Who isn't?\" Melanie said. She was staring at me hungrily. Her hand had slipped back into her shorts.\n\nBianca whispered to Rebecca again. This time I caught what she said: \"Ready?\" Again Rebecca nodded.\n\nBianca took Rebecca's hand and led her forward the couple paces that separated us. Bianca got on her knees, smiled at me, and took my cock in her hand. She slid her hand up and down my shaft a couple times, then beckoned to Rebecca with her finger.\n\nRebecca kept her eyes on me and positioned herself over me, straddling me. Bianca held my cock upright with one hand and with the other guided Rebecca down. Rebecca lowered herself to her knees over me.\n\nBianca squeezed my cock, held it steady, and guided Rebecca lower. I could feel the heat coming off her before we touched.\n\nRebecca looked me in the eye, bit her lip, and lowered herself slowly onto my cock. Bianca squeezed as she guided me. Rebecca was so wet, the tip of my cock slid into her without much friction. But then we both moaned as she lowered herself further. I could feel her stretching to fit my cock inside her. Melanie moaned too, and out of the corner of my eye I could see her tits bouncing as she worked her hand inside her shorts.\n\n\"Come on baby take him in,\" Bianca cooed, still holding onto the base of my cock with one hand, the other resting on Rebecca's ass, guiding her still downward.\n\nRebecca cried out as I went deeper into her. I cried out with her. She was so tight -- she squeezed every inch of my cock as she pushed herself down onto it. I could only imagine what it felt like to her.\n\nFinally, when she had taken every inch of me she could take, Rebecca leaned her face into my chest, trying to catch her breath. I brought my hands to her hips, slid them around to her back, and held her there.\n\nThen I slowly started to rock inside her. Just a subtle motion at first, pushing myself against her, moving my hips just slightly up and down. Rebecca moaned, propped herself up and looked at me again. Her mouth was open, and she exhaled a little puff of air each time I pushed myself up into her.\n\n\"There you go baby,\" Bianca said, still rubbing Rebecca's back, the other hand loosely caressing my balls.\n\nI stole a glance at Melanie, just as she was lifting her ass off the couch and sliding her shorts down, panties and all. I moaned and watched as she spread her legs, exposing all to me, working her fingers over her clit.\n\nI sped up inside Rebecca, and she started rocking on top of me to match my movements. She slid up on my cock and pushed back down, letting out a small moan each time. I watched as her tits bounced with our movements. I brought my hands up to feel them, to run my fingers over her nipples. She moaned louder and moved faster, sliding further up my cock and falling back down on it.\n\n\"Yeah baby ride that big cock,\" Bianca said, and reached in and started working her finger over Rebecca's clit. Rebecca cried out and raised herself up, bouncing on me faster and faster. I held her hips, thrust my cock up inside her each time she came back down, watched her tits as they swung wildly with her movements.\n\n\"OH. FUCK. I'M. CUMMING,\" Rebecca shrieked. She collapsed on top of me and bit my shoulder as she ground into me, slamming her ass down and taking me all the way inside her. Her whole body shook and she squealed into my shoulder. I held her hips and pumped my cock inside her, feeling her pussy tighten even more around me, feeling her juices spill out around me.\n\nMelanie moaned too and she arched her back on the couch, working her fingers in a frenzy, pumping her hips into the air.\n\nRebecca squirmed and shook on top of me, slowing her movements, slowly starting to breathe again. I moved slowly inside of her, causing her to shudder in little aftershocks each time I pushed back into her. Finally she just lay on top of me, breathing heavily.\n\nAfter a moment she climbed off me and collapsed onto the floor next to me, still breathing hard.\n\nBianca smiled down at me, wrapped her hand around my cock.\n\n\"You need to cum again, huh?\" she said, sliding her fingers slowly up and down my wet and throbbing shaft.\n\nI just moaned.\n\n\"What should we do about that?\"\n\nShe squeezed my cock tightly at the base. I moaned again. My cock stood red and angry in her fist.\n\n\"Who wants to do the honors?\" she said.\n\nMelanie stood up, stood before me in all her naked glory. It struck me yet again how gorgeous she was. Tall, lean, her big perfect tits still shiny with my dried cum. Just looking at her almost sent me over the edge again, but Bianca's grip kept me contained for the moment.\n\nThen Melanie lowered herself to the floor and crawled over me. I was stunned into paralysis. She hovered over me, her hands and knees between my legs. She looked into my eyes, smiled, and then looked down at my cock, still squeezed in Bianca's fist.\n\nMelanie looked back into my eyes and, still smiling, eyes never straying from mine, slowly lowered her face until it hovered just over the pulsing head of my dick. I squirmed under her. Despite how many times I'd cum already, I felt I could explode any moment.\n\nMelanie put her hand on Bianca's, who slowly pulled hers away. Melanie wrapped her hand gently around my cock.\n\nRebecca, recovered finally, leaned in, resting her head on my chest and her hand on my stomach, and watched as her sister slowly brought her lips around my cock.\n\nI moaned as Melanie slid her lips down my shaft, taking almost all of it in. She gagged just a little. Her eyes smiled up at me as she slid back up. She pulled her lips away, catching her breath, stroking me with her hand.\n\n\"Want to cum in my mouth, Sam?\" she whispered. It was maybe the sexiest thing I'd ever heard.\n\nI just moaned, which she took as a yes, and she wrapped her lips around my cock once more. She slid up and down and pumped her hand in time with her mouth, slurping on my wet cock.\n\nIt didn't take long. I cried out. Rebecca caressed my stomach, Bianca squeezed my thigh, and Melanie pumped my cock as I came yet again, shooting a full load into Melanie's mouth. She gasped but kept her mouth on my cock, and she squeezed and pulled my cock with her hand as I emptied my last load. She took every drop, and when finally I was spent she pulled her lips off my cock, smiled at me, and swallowed.\n\nI dropped my head to the floor, exhausted.\n\nThe ladies joked and laughed with each other, but their words didn't reach me. I was done.\n\nI was only vaguely aware of someone slipping a pillow under my head, spreading a blanket over me, and whispering \"Goodnight.\""
    ],
    "authorname": "samhasstories",
    "tags": [
        "blowjob",
        "cfnm",
        "penetration",
        "group sex",
        "masturbation",
        "truth or dare",
        "handjob",
        "flashing",
        "sisters"
    ],
    "category": "Exhibitionist & Voyeur",
    "url": "https://www.literotica.com/s/vacation-with-the-marshals-pt-02"
}
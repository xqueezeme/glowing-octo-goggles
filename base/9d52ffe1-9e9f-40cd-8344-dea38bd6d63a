{
    "title": "There and Back Again Ch. 152-153",
    "pages": [
        "*****Note: Chapter 152 was not published on this site due to Literotica's publishing rules. I'm sorry, but it wasn't possible to cut it down to the point that it was worth publishing here. There will be likely parts skipped in future chapters, or chapters left out altogether in the next few weeks as well for the same reason. I'm sorry!*****\n\nChapter One Hundred Fifty-Three: Redemption and Vengeance\n\nThe mage was asleep in the bathtub when Anders and I found her. I woke her gently, and the two of us helped her out of the tub and into some clean robes we'd brought from her room. Anders was obviously reluctant to touch her, but Solona showed no signs of nervousness around him, not even worrying about covering herself as she stepped naked out of the tub. I resolved to have a discussion with Anders about allowing her to determine how much contact she wanted -- not to assume. She'd already decided she wanted to keep the healer with her -- I was hopeful that eventually she'd want him in her bed, too. But it isn't going to happen if he keeps flinching anytime he looks at her.\n\nOnce she was clean, dressed, and mostly alert, I told her about Kirkwall. Explained that Anders was needed there, that Karl was at risk, and that Anders could open a healing clinic in the city -- and she could help, if she wanted. It would put her far away from the rest of the Wardens -- but still protected by the title, even if she never fought another darkspawn.\n\n\"You have to stay protected from templars,\" I pleaded. \"The risk, if you run away on your own...\" I sighed in relief when she shook her head slightly. \"The Knight-Commander in Kirkwall is insane, though at least the Chantry has been forewarned about her, but I don't think she's mad enough to come after Grey Wardens, mage or not.\"\n\nAnders nodded. \"Aedan recommended we take another Warden with us, to help provide a barrier between us and the templars. You wouldn't have to be around them a lot -- you could be either in the clinic or we'll find somewhere to have a home together. Having a Warden who isn't a mage may placate h--\"\n\nSolona interrupted without even waiting to hear the rest of the sentence. \"Rolan.\" She turned to me. \"You wouldn't be nervous about it if you were sending someone else. You want to send Rolan.\"\n\nI nodded slowly. \"We can change our plans, if you want. Aedan and Alistair agreed that if you don't feel comfortable with him, you can veto it. But Aedan was hoping he could send Rolan as protection -- he may know some of the templars, and might be able to establish contacts and help ensure that Meredith doesn't move on you. At least get warning, if she does. And it allows him the chance to--\"\n\n\"Make up for it.\" Her response was terse, and my heart sank. Damnit, she thinks we're sending him because we don't trust her, or.... She interrupted my internal musing again. \"Fine.\"\n\nI blinked. \"Are you sure? It doesn't have to be a templar. I don't think he'd ever hurt you, but I mean it when I tell you that you can say no.\"\n\nHer expression softened slightly. \"I am. I believe Anders when he says Rolan has seen the error of his ways. He was certainly...solicitous on our journey here. And when I panicked, he kept his head; he could have dropped me with a smite, but he didn't. Having someone who can help if I lose control isn't a bad thing.\" She tugged on her hair fretfully, pulling out several long blonde strands; I gave Anders a hard look, and he cringed slightly but reached out to still her hands, not holding hers, but offering the opportunity if she wanted it. She appeared to think about it for a fraction of a second too long, but then slowly wrapped her long fingers around his cautiously until they were holding hands -- almost like a normal couple.\n\nI breathed a huge sigh of relief. Maybe they'll be okay after all.\n\nShe smiled at me shyly. \"Besides, I also remember him standing over us, trying to protect us from the darkspawn. I'm sure. Rolan will be fine.\"\n\nI nodded. \"Okay. I'll let Aedan know. Anders, can we talk later? I'd like to hear what you've learned about Faren, and I have a lot to tell you about Kirkwall.\" The mage nodded, face brightening at the mention of interesting new information about the future. \"For now, I've arranged different quarters for the two of you, if you like. Why don't we go find my seneschal and see what he managed to figure out?\"\n\nI found Levi, and together we led the two mages to a spartan, but clean room down near the kitchens; he assured Solona that no one had been kicked out to make room, and given the fact that the chair and table from her old room were the only furniture apart from the bed, I believed him. He'd thoughtfully even provided a small cot, set up between the bed and the wall; clearly he'd noticed Anders' bedroll in Solona's room. Solona tried to insist he would sleep in the bed with her; Anders tried to insist he would be fine on the floor. In the end, Levi and I both crept away to let them figure it out themselves -- but I resolved again to have a conversation with Anders later. Treating her like a victim, like she was fragile, was going to drive a wedge between them he couldn't remove later. He needed to learn to take her cues -- and be willing to discuss them with her.\n\nLevi went back to his office -- a cozy room next to mine, with a hearth and a desk piled with more paperwork than even I had -- and I went to tell Aedan the news. My brother was relieved, and went to inform Rolan of his new posting -- and to send ravens to Denerim, letting Cailan know the plan and inquiring after timetables and shipping schedules. I hoped, for Solona's sake, that they'd be able to depart sooner rather than later. I'd miss her though -- I have so few female friends, and they seem to keep leaving me alone with all of these men!\n\nI did find time for a quick, private discussion with my favourite assassin. He started off trying to tell me all the details about the new security measures he and the others had developed; I waved him off with a lazy gesture.\n\n\"You lost me after the word 'security'. I trust you, Zev. Tell me the details if I need to know them, but I don't insist on knowing the entire discussion. And besides, I wanted to ask you about something else.\" I paused, a malicious smile forming on my face. The elf's eyebrows rose, a smirk hovering about his lips as though he had guessed what I was about to say.\n\n\"I need a favour...\"\n\nBy the time I'd finished explaining my favour, his smirk had been replaced by a vicious, frightening-looking grin of his own, and he'd assured me my favour would be done immediately. On the one hand, I couldn't believe I had done such a thing, but on the other...well, I couldn't bring myself to regret it one little bit.\n\nI only worried for a moment what that said about me.\n\n********\n\nWhen the four days were done, Greagoir finally let us in to see the final product. I was a bit surprised, when I thought about it, about how beautiful the end result was. The sarcophagus, made of solid grey stone, had been covered inside and out with designs carved right into the stone; some of them were functional, and I could practically feel the Lyrium pulsing from them, but I guessed that some of them were either decorative -- is Greagoir hoping to conceal which runes do what? -- or used only to tie the other runes together.\n\nI could be wrong; I'm hardly an expert on magic.\n\nAt any rate, the lines and whorls gave an interesting patina to the dull grey stone, and the entire surface had been polished until it shone; it put to shame the sarcophagi we'd seen in Bownammar, and those had been created by dwarves. The stone on the inside had somehow been darkened so that it was almost black; between the colour and the runes, it was mesmerizing to look at and almost seemed to suck in the light around it. I shuddered when I considered how very dark it would be for anyone inside. Mind you, considering who's going in it, it couldn't have happened to a nicer guy...creature...thing.\n\nNot a guy much longer; I had to suppress a slightly hysterical giggle when I was reminded of the contents of the glass jar Zevran had surreptitiously delivered to my office the night before -- currently locked in a small chest, which was hidden in a small depression underneath the rug under my desk. I didn't know whether former-magisters-turned-darkspawn could actually conceive a child, be the father to a Broodmother's offspring like the other darkspawn could, but the two shrivelled, bloody orbs floating in some sort of preservative fluid in that jar meant that this one never would, even if he was somehow found and rescued in the future.\n\nI'd debated showing Solona before destroying the jar and its contents, and hadn't yet decided whether that would be a good idea. I knew I'd never show anyone else; it would be a secret Zev and I would both take to our graves. Pyres. Whatever.\n\nTo test the sarcophagus' function, Alim and Jowan each climbed into the stone coffin one at a time, trusting us to let them out within only a few moments. I'd have been terrified -- it looked horribly claustrophobic, not to mention it was an actual coffin! -- but they seemed rather calm, surprisingly. Both reported the complete inability to even access their mana, never mind cast a spell; Greagoir only looked smugly self-satisfied at our compliments.\n\nSatisfied that his job was done, the Knight-Commander had left us with the sarcophagus and gone to make arrangements to leave for Kinloch in the morning. We had only the one day to fully, finally dispose of the Architect before I would no longer have help holding his mana.\n\nOur first step was to place the Architect into the sarcophagus and test that it worked on him. Alistair, Aedan, Jowan, and Alim moved the unconscious former magister and put him inside; he didn't stir, even as the lid was closed over him, and once he was inside, I couldn't even sense his mana, never mind hold it. We didn't leave him in there long; we couldn't afford to let him accidentally suffocate, so he couldn't stay there until the next few steps had been taken. Taking back his mana the moment the sarcophagus opened was simple and easy. I like it when he's unconscious. Thank the Maker for Avernus and whatever spell is putting him to sleep!\n\nFor the next steps we needed secrecy. We wanted everyone to believe that we intended to keep the Architect up in Avernus' tower, unconscious and safe inside the sarcophagus Greagoir had built, where I would no longer need to control his ability to cast. Really, we hoped that with enough time passing, everyone would more-or-less forget about him entirely. Avernus had offered some sort of blood magic to that effect, but neither Aedan nor Alistair had hesitated even a moment before refusing. Those who knew who or what we had brought back to the Peak knew enough not to tell anyone else; that would be enough for the secret to die in time. And in the meantime, there would be only a handful of us who knew where he was ultimately kept. We would have to hope that was enough.\n\nBut we needed some help: Alim to lighten the coffin enough that it could be carried; Jowan, Avernus, Alim, and Anders for the final steps of the plan; and Alistair, Aedan, and a few others to do the actual heavy lifting. We debated who to have help us, but in the end chose Rolan, Conrad, Loghain, and Bel. We felt certain that each person involved could be trusted to keep the secret -- and several had their own reasons for wanting to see the end of the Architect. Aedan also extended the invitation to Solona; she wasn't necessary for the plan, but those of us who knew what she'd been through wondered if it might help her to heal knowing that the Architect could never hurt anyone else.\n\nWhen we were ready, I was the diversion to allow the sarcophagus -- and the Architect -- to be moved in secret. I recruited Zevran to challenge the other Wardens to a drinking game in the main hall, far enough from Avernus' tower that they wouldn't feel the moving taint signatures as the Architect was moved down the stairs; at the same time, I had organised a 'community-building exercise' for all of the non-Warden residents and employees of the Peak in the courtyard outside.\n\nI insisted everyone come; it reminded me of similar events I'd attended for some of the companies I'd been hired by in past, to 'engage' their employees when their company was failing. Often as not it was a distraction tactic, trying to keep everyone calm as negotiations for the dismantling or sale of a company were underway; people on Earth were familiar enough with it that it rarely worked, but it was a novel concept on Thedas.\n\nAnd work it did. We had pulled back all of the soldiers' patrols, closed the kitchens for the afternoon, and between Levi, Mhairi, Avanna, and me, we had every servant and every soldier in their warmest clothes, taking part in 'trust exercises' like 'minefield' or 'free running', which were both paired exercises where one participant is blindfolded and the other has to guide them either with words or by touch through an obstacle course or running track; trust falls and circle-sit; the 'human knot' or blind-folded building exercises. Even Greagoir and his folks -- templars, mages, and Tranquil alike -- took part. Sometimes we were in one huge group -- like the circle-sit, where everyone stood in a circle looking at the next person's back, and everyone had to sit in the lap of the person behind them in unison so no one would fall. Sometimes we broke into teams and competed -- like 'frostbite', where one team member was 'paralysed' and the rest blindfolded, and the group had to work together to build a shelter from the cold using whatever materials they could scavenge in the courtyard.\n\nI hadn't laughed so hard in months, if ever. I saw Levi Dryden climb up on a pile of wooden planks, close his eyes, and fall back, trusting his group to catch him; a group of soldiers fall in a hopeless heap as they tried to untangle their arms; a mixed group of blindfolded soldiers and servants -- and Greagoir! -- trying to squish themselves into a far-too-tiny shelter of scavenged wood and rocks. Before we were done, all the Wardens had joined in, including those who'd carried the Architect into the dungeons -- with the exceptions of Solona, Faren and Sigrun, and Avernus (who was watching over the Architect).\n\nEveryone was laughing as the cook brought out half-cooked meats and set them to roast over the massive braziers in the courtyard; a few kegs were opened -- not enough for anyone to end up inebriated -- and the entire crowd settled in to eat and mingle until the cold was too much and the event broke up so everyone could go back inside.\n\nI was sure the event would be the talk of the keep -- and the source of some much-needed levity -- for weeks to come, and I resolved to do it again in future just for fun. But in the meantime, the sarcophagus was stowed safely in the basement of the Keep, as was the Architect, with no one the wiser.\n\nWe still had a few last steps to make it through before we could breathe a sigh of relief -- or get any sleep, however.\n\nWe met in the basement, after the revelry had died down: Alistair, Aedan, Rolan, Conrad, Bel, Loghain, Avernus, Jowan, Alim, Anders, and a very nervous Solona were waiting for me when I bid Levi goodnight, donned my armour, and snuck down the stairs. They'd moved the sarcophagus to the entrance to the Deep Roads, and once I arrived, we opened the door and began the work of ferrying both the stone sarcophagus and the skeletal form of the Architect into the side chamber Faren had initially discovered when he was stationed at the Peak. We ignored the cages, rusted and falling bars no longer useful, but one of the walls had been carved out -- by Jowan, I assumed -- to leave a small nook twice the height of the sarcophagus but almost exactly as long.\n\nWe slid the open coffin into place first, and then transferred the unconscious darkspawn into it. The fit was nearly perfect -- there'd be no more than a couple of inches around him, not enough for him to raise his arms or kick his legs once the lid was seated. To add insult to injury, we'd left him securely tied, both arms tightly bound to his sides and his legs together. That bastard's not going anywhere.\n\nOnce ready, the lid to the sarcophagus was prepared, placed over the opening -- but not allowed to seal. A small gap remained open, through which the Architect could still be glimpsed. Avernus came over, nodded in satisfaction, and then settled nearby to give us room to 'practice'.\n\nThis was the most difficult part of the operation: managing to close the sarcophagus from a distance. We placed the lid just slightly closer to us than the back wall of the nook, and someone had had the foresight to bring down four long, stiff wooden poles for us to use. We spent probably half an hour labouriously shoving the casket closed -- and then opening it to try again. The lid scraped over the edge of the stone and crashed noisily into place, sealing the sarcophagus completely. We practiced it several times until we knew we could do it.\n\nAnd then Jowan pulled out a small glass vial and began coating the stone inside the sarcophagus -- the part that would be touching the lid -- with the stinky clear substance contained within. \"It will seal the sarcophagus,\" he explained as I wrinkled my nose at the chemical stench. \"Meld the stone right together, as though it had never been cut open.\" I assumed it was some sort of solvent, not nearly familiar enough with alchemy -- or even Earth chemistry -- to understand the details.\n\nWe reset the lid -- very slightly ajar, as we'd practiced -- and then it was time for Avernus' contribution.\n\nIt was emotional, mostly for poor Jowan. He'd never had a decent mentor at the Circle, and even within the Wardens, he'd never settled into the easy camaraderie most of the rest seemed to enjoy; he'd been recruited to save him from his own criminal actions, his own disgrace, and while the rest of the Wardens had made an effort to ignore his background, I knew Jowan had never forgiven himself for it. All of that had pushed Jowan closer to Avernus, the first person to truly not be bothered by the blood magic, someone who'd done worse than Jowan ever dared dream; Avernus had become a mentor, a friend, and the hope for salvation for the mousy mage.\n\nAnd now he was about to lose him.\n\nAvernus had been specific, however. \"The problem,\" he had eventually explained, \"with what the Wardens tried with that...Corypheus?\" I nodded. \"Was that they left too many ties to the magic used to bind the creature. The mage wasn't a strong blood mage to begin with -- had never embraced the power it granted, hadn't practiced with it or trained it, and was probably terrified of the consequences of it. And then afterwards they let him go -- to survive, and to breed. His children carried enough of his bloodline that they could be used as part of the key. And the key had to be brought out with him, or he would never have escaped.\"\n\nHe stood tall, throwing back his shoulders, his eyes flashing with the remnants of the strength he once carried. \"I, on the other hand, have no children. No siblings, few distant relatives, even two centuries ago. And if someone was somehow to discover those few descendants that might be alive now, they would be so distant from me that their blood would not work as the key.\n\n\"Not to mention -- I won't be leaving. The key will be left inside with me, where no one will be able to reach it. And I'm a much stronger blood mage than this Malcolm Hawke ever would have been. My seals may not last forever -- but it will be close.\" His smug grin was arrogant, but I had found it amusing, and had to stifle the grin that threatened. I'm not convinced the seals will be as permanent as he believes either -- but at least we can ensure the Wardens will be waiting for when they wear off. And with Corypheus, they didn't have the benefit of a templar-designed sarcophagus, or our last two desperate steps.",
        "This, however, was Jowan's main objection, and I didn't blame him. His mentor was going to create the seals, powered by summoned demons, that would bind the Architect inside the tomb we were creating -- and he would not escape. His sacrifice would ensure that the ancient tainted magister was never allowed to harm anyone again -- but that didn't make it any easier on poor Jowan. Avernus, however, seemed at peace with it.\n\n\"Never wanted to slowly die in bed, helpless,\" he had said when asked if he was certain. \"My name won't be widely remembered, but I'll die knowing I did something for the Wardens and for Thedas just as heroic as any of those other figures in legends -- like those Wardens whose names have been forgotten by history but whose sacrifice brought down Dumat and Toth.\" I found his delusions of grandeur sort of endearingly cute, but he wasn't entirely wrong -- and if it made him feel better about his sacrifice, well, who was I to take the wind out of his sails? Either way, we need him to do what he's going to do, so whatever works.\n\nAnd so we sat about defending the Keep from the demons Avernus was setting out to summon. He'd decided seven seals was the correct number -- muttering something about magical theory that made no sense to me -- and so from his perch on top of the Architect's sarcophagus, he began preparations to summon seven waves of demons -- and bind their strength into powering the seals, much as, I assumed, Malcolm Hawke had done decades earlier.\n\nThe actual summoning took surprisingly little effort; Avernus slammed a Lyrium potion, settled himself cross-legged in a meditative pose, and began chanting; a few minutes of that, and one huge outpouring of magical energy later, four rage demons rose from the ground in front of the mage, massive fiery limbs reaching for us as we prepared ourselves to hold against them.\n\nThe secret, however, was that we couldn't kill the demons. Any demon we accidentally destroyed would necessitate another summoning, another fight -- and Avernus had only so much mana, so much Lyrium, to fuel the summoning and binding process. So we had to survive the demons -- and prevent them from escaping to wreak havoc on the inhabitants of the Keep above us -- but somehow not damage any of them too badly.\n\nAnders was the first to respond; with a shout, a torrent of ice flew out from his outflung hands, coalescing on the molten 'skin' of the demons and hardening it in place, extinguishing the flames. The warriors surged forward a second later -- only to halt at Anders' shout, as he was worried they'd inadvertently shatter one. Instead Alistair and Bel crouched within sword's reach, using their shields to protect all of us from the heat and steam rising off the demons, and Anders kept blasting them with ice until Avernus' binding was complete. I'd lost complete track of the ancient Warden during the tense encounter, but with a triumphant yell, the demons slowly disappeared -- and a red-tinged, shimmering barrier sphere came into being around Avernus in its place.\n\nHe slumped, face covered in sweat, and breathed an audible sigh of relief which was quickly echoed by the rest of us. When he'd caught a couple of moments of rest, he straightened up and smiled wanly. \"One down.\"\n\nThe next five seals were similar. Avernus would chant, a number of demons would materialise, and we would defend ourselves until the binding was complete. There were three desire demons in one wave, causing feelings of envy and jealousy to flare, but they were easy to ignore. An odd mix of shades and lesser demons made up the next few, making us feel tired and slow, or angry and nauseated. One massive, green pride demon roared loud enough I thought it would wake the entire keep. It was terrifying, and I almost dropped my dagger and wet myself when it appeared -- but all of them were eventually held in place by the combined might of the Wardens with us until Avernus was able to complete the ritual.\n\nAnd then there were six, closely spaced, nearly transparent spheres of magic surrounding Avernus, who still knelt beside the enormous sarcophagus. The spheres were tinted different colours -- green, white, purple, blue, and yellow, in addition to the initial red, and each seemed to loosely correspond to the demon used to create it. I couldn't feel either Avernus' or the Architect's mana through the shields surrounding them, nor could I sense the taint from either of them. If anything, in comparison to the rest of the Deep Roads around us, there was the strangest-feeling lack of taint sensation where they stood, which would have concerned me -- but I knew our final step for concealment would solve that problem.\n\nAvernus, now noticeably pale and drawn, opened his last Lyrium potion and sipped it slowly, eyeing it with distaste. \"You know, I suppose I really should have asked for something more palatable as a last meal.\" Jowan let out a strangled laugh that was very nearly a sob, and Avernus gave him a kindly smile, his voice tinny and distorted through the shields around him. \"You'll be fine, my boy. Just remember you're a lot stronger than any of them ever believed you were, remember to use that remarkable mind of yours instead of always acting on instinct, and you'll do just fine.\"\n\nJowan nodded sorrowfully, averting his eyes as the ancient mage climbed to his feet slowly. \"Last one. Be ready -- this one will be the worst. You won't be able to hear me once it's done, though you'll still be able to see.\" Avernus looked at Aedan and Alistair. \"Thank you for the second chance. It had been a long time since I'd remembered what being a Warden felt like.\" My husband and brother nodded grimly. Avernus smiled at me -- we had nothing more to say, really -- and then levelled his staff and began chanting.\n\nI could feel the veil parting, an itchy uncomfortable feeling like too much magic crammed into too small a space, and I gripped my daggers reflexively. I hadn't fought any of the demons yet -- Anders had insisted I avoid fighting if possible, so I was behind the others, as back-up in case something went wrong, and Solona stood with me, arms wrapped around her own waist tightly -- but I suddenly had a bad feeling. Everyone tensed as a black line appeared in the air, and a long-legged, oddly proportioned black creature seemed to drag itself through a barely visible hole, one long limb reaching through first, followed by the rest. It was a ghastly sight -- and certainly looked like no demon I'd seen in either game before coming to Thedas.\n\nMaker, what have we gotten ourselves into?"
    ],
    "authorname": "ElyssaCousland",
    "tags": [
        "fantasy",
        "fanfiction",
        "dragon age",
        "romance",
        "modern girl in thedas"
    ],
    "category": "Celebrities & Fan Fiction",
    "url": "https://www.literotica.com/s/there-and-back-again-ch-152-153"
}
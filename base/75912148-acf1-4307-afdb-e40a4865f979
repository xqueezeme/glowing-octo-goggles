{
    "title": "Life after the Lottery Ch. 73",
    "pages": [
        "I finally got this one finished. It took me longer for several reasons. I am working on four different chapters at the same time. And, it is getting a little harder for me to sit and type for long periods of time because of this damn psoriatic arthritis. The good news is, I had to split this chapter because it was long. The next chapter will be up as soon as I can get it finished. Copyright LATL 2021 No part of this may be reproduced or posted on other websites.\n\nLife after the Lottery, CH 73\n\nGetting ready for the fashion show\n\nI was getting my camera gear ready Wednesday morning. I had managed to land myself more work to do. Elizabeth and Brenda were coming at noon to try on lingerie, so I could take some photos.\n\nElizabeth pulled up to the house about 11:45, and I let her in.\n\n\"Where is everyone?\" She asked.\n\n\"School.\"\n\nI sat with her and talked until Brenda showed up.\n\n\"Elizabeth, meet Brenda,\" I said.\n\n\"We talked.\"\n\n\"I have some things in your size,\" Brenda said. She had a box with her. \"Let's go and try them on.\"\n\nThe two of them went into the bedroom and were gone for a bit.\n\n\"What do you think?\" Brenda asked.\n\nElizabeth had on some sexy red lingerie. She had enough baby bump to know she was pregnant.\n\n\"Excellent,\" I said.\n\nBrenda and I worked on the photos until about 3:00. I shot some of her on the bed and the white furniture. Amy and Samantha had come in and were watching.\n\n\"These will be great,\" Brenda said when we finished. \"James, can you get them printed quickly?\"\n\n\"Sure. Why not.\"\n\n\"Elizabeth, you are okay with us using them on the internet and in the store?\" Brenda asked.\n\n\"I guess.\"\n\n\"I have a release for you to sign then,\" I said.\n\n\"When can we have prints?\" Brenda asked.\n\n\"Two days, I hope,\" I told her.\n\n\"Okay. Elizabeth, enjoy the lingerie. I need to run,\" Brenda said, and she left.\n\n\"Come with me,\" I told Elizabeth.\n\nShe followed me to my study. I got out a release and had her sit and read it and sign it.\n\n\"You do look sexy,\" I told her.\n\n\"I'm glad you think so.\"\n\n\"Uh, oh. What's up?\"\n\n\"Kevin. He is afraid to have sex with me.\"\n\n\"He should know better. He's a doctor.\"\n\n\"You would think so.\"\n\n\"Anything I can do?\"\n\n\"Yes, fuck me!\"\n\n\"Good idea, but I have another one. Take your lingerie off. I will be right back.\"\n\nI went out to the den.\n\n\"You two, grab your phones and come into the study.\"\n\nI went back into the study, and Elizabeth was taking off her bra.\n\n\"Elizabeth, you look very sexy,\" I told her.\n\n\"Thanks.\"\n\n\"I'm sure Kevin is just worried.\"\n\nI had Elizabeth get on her knees on the edge of the sofa while I took my clothes off. I got down behind her and worked my tongue into her pussy.\n\n\"Emmm, that feels so good, James.\"\n\nI took my time pleasing Elizabeth until she had her first orgasm. I stood behind her and slid my cock into her.\n\n\"Oh, I need this.\"\n\nI was working my cock in Elizabeth as she held herself up on the sofa. Amy and Samantha were taking pictures. I kept working my cock in her until she had several huge orgasms.\n\n\"Oh, fuck, James!!\" I am coming again!! Fill me full of cum!!\" She screamed.\n\nI jammed my cock in and started pumping cum into her.\n\n\"Ahhhhhhh!! Yes!! That's it!!\"\n\nElizabeth came hard as I filled her full of cum. Amy and Samantha were giggling.\n\n\"Did that relieve your frustrations?\" I asked her.\n\n\"It's a start,\" she said.\n\n\"What is Kevin's cell phone number?\" Amy asked.\n\nShe gave it to them, and they started giggling and left my study.\n\n\"Come, let's get you cleaned up.\"\n\nI led her to the shower in the bedroom.\n\n\"You are still very, very, sexy, Elizabeth.\"\n\n\"Maybe my husband will think so now.\"\n\n\"Tell him if he doesn't fuck you, you will keep coming here, and I will!\"\n\n\"I may be back tomorrow!\"\n\n\"No problem!\"\n\nWe laughed as I soaped up her tits and body. After I had washed her hair, she wrapped her hand around my hard cock and stroked it, and played with it for a while. She smiled at me, then got on her knees and gave me an incredible blowjob as the water ran over us.\n\n\"I think you like doing that,\" I said to her.\n\n\"I do.\"\n\n\"I hope you are not giving Kevin blowjobs if he is not pleasing you.\"\n\n\"Good idea!\"\n\nI was drying her off when Samantha came in giggling.\n\n\"What?\" I asked.\n\n\"Kevin texted me back and said it was time for you to come home!\"\n\n\"Oh, shit. I guess I am in trouble,\" Elizabeth said.\n\n\"I don't think so,\" Samantha said and left.\n\nI finished drying Elizabeth, and she went to get her clothes. She came into the den after she was dressed.\n\n\"We sent your husband plenty of pictures and video,\" Amy said. \"I think that will help!\"\n\n\"Would you be in our fashion show?\" Samantha asked.\n\n\"Well, we are coming.\"\n\n\"No, would you model lingerie for us?\"\n\n\"I don't know.\"\n\n\"Think about it. I'll call Brenda.\"\n\n\"I'll see. I'll talk to you later,\" Elizabeth said as she left.\n\n\"Just wear that sexy lingerie,\" I told her.\n\nDawn came in as Elizabeth left. Amy and Samantha told her about everything.\n\nJust before we sat down to eat dinner, Samantha's phone rang. She looked at it and laughed.\n\n\"Look,\" she said.\n\nKevin had sent her some video of Elizabeth riding his cock.\n\n\"I guess you fixed that problem,\" Dawn said.\n\nAfter we finished with dinner, we watched a movie until it was getting late. Everyone headed upstairs, and we got in bed.\n\n\"I have got to get up and go to the hospital early,\" Dawn said.\n\n\"Why?\"\n\n\"John has finally hired a new nurse, and he wants me to work with her on a surgery.\"\n\n\"Okay. What time do you need to be up?\"\n\n\"I'll get up at 4:00.\"\n\n\"Don't wake us up then,\" Samantha groaned.\n\n\"You better get used to it!\"\n\n*****\n\nI had gotten up early too Thursday morning to take the film to get it processed. Then I returned to the house. Dawn had been gone since about 5:00, and the girls had run to the school after breakfast.\n\nI was sitting in the den about noon working on my laptop when Dawn came in. She was still in her scrubs, and another lady came in the door behind her. I took a long look at the other lady. She was a tall blonde and appeared to have a nice body under the scrubs.\n\n\"Hey, honey,\" Dawn said.\n\n\"Hey.\"\n\n\"Grace, this is my husband, James.\"\n\n\"Hello, James.\"\n\n\"Hi, Grace.\"\n\n\"Grace is the surgical nurse John hired. She is from Atlanta.\"\n\nThey walked on into the house and to the kitchen. Dawn grabbed some sodas from the fridge, and they came back to the den and sat.\n\n\"Grace has been a reconstructive nurse for a while. John and Keith finally decided they needed to hire someone with experience.\"\n\n\"Good. I know they miss you.\"\n\n\"They have been getting by, but they do need more help,\" Dawn said.\n\n\"Dawn has quite a reputation around the hospital,\" Grace said.\n\n\"I'm not sure that is a good thing,\" I replied.\n\n\"All the doctors I have talked to think a lot of her.\"\n\n\"I know a few that probably have a lot to say about her,\" I said and laughed.\n\n\"Grace and I had lunch after the surgery and talked a lot. I think she is going to fit in well.\"\n\n\"Great.\"\n\n\"It seems we have a lot in common,\" Grace added.\n\n\"We do,\" Dawn replied.\n\nThey sat and sipped their sodas for a few minutes.\n\n\"Let's go shower,\" Dawn said to Grace.\n\nThey got up and headed up the stairs. It sounded like they did have a lot in common.\n\nI went back to work on my computer and worked for about an hour. Dawn and Grace had not come back down, so I went upstairs. I walked into the bedroom and saw Grace face down between Dawn's legs. Dawn looked up at me and smiled. I stood and watched for a few minutes.\n\n\"Honey, come to the bed so you can watch,\" Dawn said.\n\nI looked over Grace first. Her long wet blonde hair was running down her back. She had a great set of legs topped with a gorgeous ass. I walked over and sat on the edge of the bed. Grace never stopped working on Dawn's pussy.\n\nI sat and watched as Grace drove Dawn to multiple orgasms. Dawn was really getting off, more than usual. Finally, Grace removed her mouth from Dawn's pussy and kissed her way up until she and Dawn were kissing. Grace looked hot.\n\n\"Oh, that was great, Grace,\" Dawn said.\n\n\"Glad you enjoyed it. I hope we can do it a lot more. You have a hot and sexy body, Dawn.\"\n\n\"You do, too,\" Dawn replied.\n\nThey kissed for another minute.\n\n\"Grace, move up here and let me eat you,\" Dawn said.\n\nGrace slowly moved up and straddled Dawn's mouth, and lowered her pussy down. Grace looked over at me and smiled. She had some very perfect firm and large breasts.\n\nI sat on the bed and watched Dawn eat her for a while.\n\n\"You like to watch?\"\n\n\"Oh, yes. That is what makes it so special,\" I told Grace.\n\nGrace had several gushing orgasms and filled Dawn's mouth a few times. She moved off Dawn and laid next to her.\n\n\"Emmmm, that was good,\" Grace said.\n\n\"You taste good.\"\n\nGrace rolled over on top of Dawn and began kissing and sucking on her nipples. I got up and left them on the bed.\n\nI went down to the kitchen and made myself a sandwich for lunch, and went back to work on my computer. About 3:00, Dawn and Grace came down the stairs naked. I noticed the neatly trimmed blonde strip over Grace's pussy. They came and sat in the den with me.\n\n\"Grace is still looking for a place to live. She is staying with a friend right now,\" Dawn said.\n\n\"Take your time and find someplace you like,\" I told her.\n\n\"That is what I told her. Her friend has a small place, and she feels like she is imposing on him. I told her she could stay with us until she finds a place,\" Dawn said.\n\nI looked up at Dawn, and she was smiling at me.\n\n\"We have plenty of room. Grace, you can stay as long as you need,\" I said.\n\n\"Oh, good. Thank you. Rob, the guy I am staying with, has a girlfriend who is unhappy with me living there.\"\n\n\"Any reason she is not happy about it?\" I asked.\n\n\"I think she suspects we have been fucking. I made a few passes at her, hoping she would join Rob and me, but didn't have any luck.\"\n\n\"That's too bad.\"\n\n\"I know.\"\n\n\"Grace, Amy and Samantha will be home soon,\" Dawn said.\n\n\"I can't wait to meet them.\"\n\nAs I sat and looked, I decided Grace was probably about 30. She had an excellent body and looked really hot. She and Dawn sat and talked for a bit. A little later, Amy came in the front door.\n\n\"Hey, honey. Where is your sister?\" Dawn asked.\n\n\"She had to run by the library and pick up some research.\"\n\n\"Amy, this is Grace. She is John's new surgical nurse.\"\n\n\"Hi, Grace,\" Amy said as she came over and sat with us. \"It's about time he hired someone.\"\n\n\"Hello, Amy. Dawn has told me a lot about you.\"\n\n\"When will Sam be home?\" Dawn asked.\n\n\"Soon, she just needed to pick up some research.\"\n\nI was still working on my computer as they talked. Soon they were all laughing and having a good time. Samantha came in and walked over and kissed me, and sat down. Dawn introduced Grace. They talked and laughed until about 4:30.\n\n\"You two, Grace is moving here from Atlanta. I told her it would be okay if she stayed with us while she looked for a place to live,\" Dawn said.\n\n\"Oh, good,\" Amy said.\n\n\"Is that okay with you, Sam?\" Dawn asked.\n\n\"Sure. Sounds like fun. We have some good times here. I hope you join us.\"\n\n\"Oh, I think I will fit right in.\"\n\nThey all talked. Dawn and the girls told Grace about our living arrangements. Grace thought it sounded great. Around 5:00, Dawn and Amy went to start dinner. Grace went to the kitchen with them to help.\n\n\"She sounds like fun. How was she?\" Samantha asked.\n\n\"Don't know. I just watched her and Dawn for a while.\"\n\n\"Oh. I wonder if John or Keith has done her yet.\"\n\n\"I haven't heard. Are you okay with her staying here for a while?\"\n\n\"Sure. She sounds like fun.\"\n\n\"What did you need to pick up at the library?\" I asked.\n\n\"Oh...I had some research to pick up.\"\n\n\"What kind of research?\"\n\n\"For a paper...\"\n\n\"Sam...did you actually do the research, or did someone do it for you?\"\n\n\"What do you mean?\"\n\n\"You don't usually go by the library to pick up research. You go there to do research.\"\n\n\"They made some copies for me from some of the books they won't let you check out.\"\n\n\"Why didn't you make the copies?\"\n\n\"Someone was using the books I needed copies from...\"\n\n\"Okay. Just make sure you are the one doing all your own research. I don't want to find out you are...paying someone to make copies for you...okay?\"\n\n\"Yes...\"\n\n\"If you don't have enough time to be doing that...we will need to look at your schedule and extracurricular activities...understand?\"\n\n\"Yes...\"\n\n\"Honey, I don't want you overloaded at school or here.\"\n\n\"Okay.\"\n\n*****\n\nLater we were all sitting at the table eating. I was still looking over Grace's naked body.\n\n\"So, Grace, how long were you in Atlanta?\" Amy asked.\n\n\"I moved there after college and worked there since.\"\n\n\"Who did you work for?\" Dawn asked.\n\n\"Dr. Vivian Barnes.\n\n\"Oh, I know her. I have met her a few times at some conferences,\" Dawn said.\n\n\"She is an excellent reconstructive surgeon, and the lady is incredible in bed. If you ever run into her at a conference again, tell her Grace said to say hi. You two would hit it off.\"\n\n\"I will.\"\n\n\"How long did you live in Atlanta?\" Samantha asked.\n\n\"Eight years. I married a doctor a few years after I moved there. But, it didn't last but five years.\"\n\n\"Oh?\" Came from Dawn.\n\n\"He couldn't deal with my lifestyle.\"\n\n\"Why was that?\" I asked.\n\n\"Well, he changed after we got married. He had joined a few friends of mine and me before we got married and had a great time, but once we were married, he didn't want me seeing my lady friends without him.\"\n\n\"That's too bad,\" Amy replied.\n\n\"He joined us a few times after we got married but started not wanting to do it. I enjoy being with women too much for that. I don't think he was ever comfortable with how much I got off with another woman.\"\n\n\"What do you think happened?\" Dawn asked.\n\n\"You know doctors, Dawn. They have huge egos. He was all for having some fun before we got married, but after that, I guess he felt like the women were a challenge to his manhood.\"\n\n\"That's too bad,\" I said.\n\n\"It was. I think the last straw for him was when I invited one of his doctor friends to dinner. I had talked to him before and asked if he wanted to watch his friend fuck me. He said yes. That night the two of them fucked me for hours. I thought I had found something that my husband was happy with since he didn't seem to enjoy fucking my lady friends. He even brought a few guys home to fuck me, and he was enjoying that. One weekend I invited a couple I knew to the house. I was hoping he would get back into letting me do women. We all had a good time all weekend, but he started drifting away.\"\n\n\"That's too bad...for him,\" Samantha said.\n\n\"It was. He brought a new guy home one weekend, and I had a great time. Probably too great. The guy had a big cock, much bigger than my husband's, and I really got off fucking him. I have a problem of being a little loud when I am really enjoying a fuck. I really enjoyed that one. My husband didn't appreciate or enjoy me getting off.\"\n\n\"That is not a problem with James,\" Dawn said. \"He enjoys each of us getting off as much as we can.\"\n\n\"Wish I could find a guy like him then. James, do you enjoy watching these three being fucked?\"\n\n\"Yes, I do. It pleases me to know they are having a good time. I want them to enjoy as much as they can.\"\n\n\"Wow, you are different.\"\n\n\"That's the same for us,\" Dawn added. \"We enjoy watching James please other women. We get off on it, and we please each other afterward quite a lot.\"\n\n\"I wish my husband had had that attitude.\"\n\n\"I don't think there are many like James,\" Amy said.\n\n\"It all came to a head with him when I went home early one day, and he was fucking this young nurse. I took my clothes off so I could join them, and he said that he was doing just fine by himself.\"\n\n\"Ouch,\" Dawn said.\n\n\"It didn't bother me. She was pretty young, and he seemed to think he was really pleasing her. I took another guy home from work one day, and we were fucking each other's brains out when my husband came home. He started taking his clothes off. I told him we were doing just fine!\"\n\n\"Big ouch!\" Dawn exclaimed, and we all laughed.\n\n\"That was my swan song.\"\n\n\"How long ago was that?\" I asked.\n\n\"About two years ago.\"\n\n\"Have things been good since then?\" Dawn asked.\n\n\"Oh, yes. I lived with Dr. Barnes and her husband for a year, and we all had a great time. One weekend another couple that they knew spent the weekend with us. The five of us fucked all weekend. The next week, Vivian told me that the other couple had asked her if I might like to live with them for a while. Vivian told me that she and her husband were taking a sabbatical for six months to travel the country and teach at hospitals, and if I didn't want to house sit, the other couple said I could live with them. I told her it sounded great. I lived with them until Dr. John made me an offer I couldn't refuse.\"\n\n\"Well, I think you will enjoy it here,\" Dawn said.\n\n\"From what John and Carol have told me, I think I will.\"\n\n\"I hope Dr. John made you a great offer!\" Samantha said and giggled.\n\n\"Oh, he did. He and Carol spent the weekend with me in Atlanta, and we had a great time. They told me about Dawn and how talented you are and that they needed to replace you since you are not practicing as much anymore.\"\n\n\"I'm not unless he needs me.\"\n\n\"He said you were working on your Ph.D. and are the Dean of the Nursing program now.\"\n\n\"I am the Dean of the Advanced Nursing Program that started recently.\"\n\n\"Are you going to teach, Dawn?\" Grace asked.\n\n\"Someday. I am working hard right now to make the graduate program a very good one.\"\n\n\"John said you have been very successful in raising money to build a new building just for the new program.\"\n\n\"I had some help.\"\n\n\"John also told me about you, Sam. He said you were going to med school and planned on working with him and Keith.\"\n\n\"That is the plan,\" Samantha replied.\n\n\"That sounds great. Amy, are you still planning on being a thoracic surgical nurse?\"\n\n\"That is what I am working toward. I may also get my Nurse Practitioner.\"\n\n\"That is a big goal for both of you.\"\n\n\"Grace, have you thought about getting your NP?\" Dawn asked.\n\n\"That would be a lot of school for me at my age.\"\n\n\"No, it wouldn't. What are you, thirty?\" Dawn asked.\n\n\"Thirty-one.\"\n\n\"With your experience, you could do it in two or three years in an evening program starting up soon.\"\n\n\"I don't know. I don't know what benefit it would be.\"\n\n\"John and Keith could use an NP. That was what Sam had planned on doing with them before she decided to go all the way.\"\n\n\"I don't know.\"\n\n\"At least think about it.\"\n\n\"I will. Now, tell me about these parties you all have. John and Carol said they were a lot of fun.\"\n\nWe talked about all the fun we had at parties for a while.\n\n\"You two need to get ready,\" Dawn said to Amy and Samantha.\n\nThey headed upstairs.\n\nAfter that, we cleaned up from dinner. Amy and Samantha left for Krav Maga class. Dawn talked Grace into swimming and sitting in the hot tub with her until about 8:00. When they came back in, Grace went to shower. Dawn grabbed some wine and sat with me in the den.\n\n\"Are you okay if she stays for a while?\" Dawn asked.\n\n\"Sure.\"\n\n\"She is a pretty smart lady and good in the operating room.\"\n\n\"Is she good in bed?\"\n\n\"Oh, yes. Honey, she is very good.\"\n\n\"Better than I am?\" I teased Dawn.\n\n\"Of course not. Don't tell me you are jealous!\" Dawn teased me back.\n\n\"Of course not. It just looked like you had a good time.\"\n\n\"I did. I'm sure you will too. Grace is just very confident and not in any hurry to try and impress anyone.\"\n\n\"Sounds like someone I know. She seems to have impressed you.\"",
        "\"She has, and that is not easy. There are some things I can still teach her about surgeries.\"\n\n\"That will be good for you. Working with someone and teaching them will help you out.\"\n\n\"I need to talk to John and see what he wants me to do.\"\n\nGrace back, and I got her some wine, and she sat with us.\n\nAmy and Samantha came in about 8:30 and started up the stairs.\n\n\"Sam...\" Dawn said.\n\n\"Yes?\"\n\n\"How bad is it?\"\n\n\"What?\"\n\n\"Your side,\" Dawn said as she looked at her. \"Come and let me look.\"\n\nAmy stood on the stars as her sister walked slowly over to Dawn and me.\n\n\"Let me see...\"\n\nSamantha pulled her shirt off. She had a large dark red place on her ribs on the right side. Dawn reached for her and gently ran her fingers over it.\n\n\"Anything broken?\" Dawn asked.\n\n\"I don't think so...\"\n\n\"What happened?\"\n\n\"I zigged when I should have zagged...and I fell...\"\n\nDawn pressed on her ribs as Samantha tried not to react.\n\n\"I don't think you cracked anything. You know that is going to bruise.\"\n\n\"I hope not. Everyone will be able to see it at the fashion show.\"\n\n\"I have some cream you can put on it, and it will keep it from bruising,\" Dawn said.\n\n\"Is it the stuff that smells like cow shit!\"\n\n\"No.\"\n\n\"Good!\"\n\n\"This cream smells more like fish shit...\" Dawn teased her.\n\n\"Oh, great!\"\n\n\"You two go shower.\"\n\nThey went on up the stairs.\n\n\"How did she get hurt?\" Grace asked.\n\n\"They are studying martial arts,\" I replied.\n\n\"I have one question...though,\" Grace said. \"How did you know she hurt her ribs?\"\n\n\"It would take a while to explain...but I feel what they are feeling,\" Dawn said.\n\nGrace looked at her then sipped her wine.\n\n\"Let me go and get my cream for her,\" Dawn said and got up and headed up the stairs.\n\n\"James, they told me you are having a party this weekend?\" Grace asked.\n\n\"We are having the last one for a while.\"\n\n\"Why the last one?\"\n\n\"The three of them are planning on getting pregnant in March.\"\n\n\"Oh, really?\"\n\n\"Yes.\"\n\n\"I guess I better find my clothes and head out,\" Grace said.\n\n\"Stay tonight,\" I said.\n\n\"I would, but I have an early surgery. I need to go and get some sleep.\"\n\n\"John does like to do surgeries early.\"\n\n\"That is what he said.\"\n\nGrace got up, and I followed her upstairs to retrieve her clothes. Her scrubs were lying on the floor still, and she began putting them on.\n\n\"Grace, how much do you need to move to stay here?\" I asked.\n\n\"Just my clothes. All my other stuff is in storage.\"\n\n\"Can you move in tomorrow?\"\n\n\"I guess I can.\"\n\n\"Good! You will be here for the party,\" Dawn exclaimed.\n\n\"Will that be okay with your friends?\"\n\n\"Oh, sure. We just have one rule, you don't talk about our parties,\" Dawn said.\n\n\"Of course not.\"\n\n\"Grace, can you get all your clothes in one trip? If you can't, we can help.\" I asked.\n\n\"I can get everything, thanks.\"\n\n\"We will look for you tomorrow evening,\" Dawn said.\n\nDawn walked Grace downstairs, and she left.\n\nSamantha came out of the shower.\n\n\"Did Grace leave?\"\n\n\"Just now.\"\n\n\"She sounds like fun,\" Samantha said.\n\nDawn came back to the bedroom and rubbed her cream on Samantha's ribs. It didn't smell, but Samantha was waiting for it to stink.\n\nWe all got in bed. Dawn started sucking on my cock until it was good and hard.\n\n\"Sorry, you missed out,\" Dawn said as she slid my cock into her pussy.\n\n\"Did she do that on purpose?\" Samantha asked.\n\n\"No. She just wanted to make friends with us. She knew James wouldn't have any problems fucking her...would you?\"\n\n\"Oh, no,\" I said, and they laughed.\n\nDawn slowly rode my cock while the three of them talked about Grace. Dawn would smile at me as she worked.\n\n\"Do I need a condom yet?\" I asked.\n\n\"Not yet. After this weekend, you will,\" Dawn said.\n\nDawn rode my cock for a long time, just taking it slow.\n\n\"Ohhhh, I'm going to come. Come in me, honey.\"\n\nDawn jerked a few times as she started coming, and I filled her pussy with cum.\n\n\"Emmmmm. That feels so good.\"\n\nDawn sat for a minute.\n\n\"Starting Monday, the three of us will need to start with my tea. Morning and night.\"\n\n\"Will it work that fast?\" Amy asked.\n\n\"Ours will.\"\n\nDawn slid off my cock and lay next to me. Samantha curled up next to her and held her. Amy curled up next to me, and I turned off the lights.\n\n*****\n\nI was up early Friday morning. I needed to be at the butcher shop when it opened. I was out the door and in the Escalade by 6:00. I met the butcher and grabbed all the pork shoulders and ribs for tonight. I cheated as always and bought two more gallons of his bar-b-cue sauce.\n\nWhen I got back to the house and got everything unloaded. Dawn helped me get it all ready, and we put it on the grill.\n\n\"Where are the girls?\" I asked.\n\n\"They went to school early so they can get all their studying done.\"\n\n\"Come with me then.\" I led Dawn up to our bedroom.\n\nI pulled Dawn's clothes off, and she got on the bed as I pulled mine off. I laid down next to her and started rubbing her body.\n\n\"That feels good.\"\n\n\"When was the last time I told you I love your beautiful skin?\"\n\n\"I can't remember!\"\n\nI lay and looked at Dawn as I ran my hand over her darker skin.\n\n\"Your tan is fading,\" I said.\n\n\"I know. I will need to work on it in a few months.\"\n\nI was rubbing Dawn's tits slowly as she smiled at me. I ran my hand down and rubbed her mound for a few minutes.\n\n\"Is everything okay?\" Dawn asked.\n\n\"Yes, I just want to touch you.\"\n\nDawn lay and let me run my hands all over her. She rolled over, and I rubbed her ass and legs for a while.\n\n\"Honey...I don't know if I can lay here and let you do this like you do,\" Dawn said.\n\n\"Why not?\"\n\n\"Because it is making me very hot and horny.\"\n\n\"Really? Why is that?\"\n\n\"I don't know...it's just that now...when you touch me...it does that to me.\"\n\nI could feel that Dawn was getting aroused.\n\n\"Do you want me to stop?\"\n\n\"No...of course not...but you are going to have to fuck me soon.\"\n\n\"Okay.\"\n\nI kept running my hand over Dawn's ass and legs.\n\n\"James...don't rub my spots...I'll come.\"\n\n\"I guess I better take care of that then.\"\n\nDawn rolled over onto her back, and I moved and got on my knees between her spread legs. I moved down low and started the end of my cock into her wet pussy. I grabbed Dawn's ass and lifted her up a little, and slowly slid all the way into her pussy.\n\n\"Emmmmmm...\"\n\nI sat back on my legs and pulled Dawn up onto them so I didn't need to hold her up. I rubbed the insides of her thighs slowly.\n\n\"Oh...James...\"\n\nI took my time looking at Dawn's sexy body. I had always loved her skin tones. The just slightly darker tone from her Native American blood looked so hot. Her darker nipples looked so nice.\n\nI slowly rubbed her stomach as she closed her eyes. I could feel her pussy squeezing my cock slowly. Dawn moaned softly for a long time as I ran my hands over her body.\n\n\"Rub my clit gently, please,\" Dawn said.\n\nI ran my hand down to her pussy and took my thumb, and rubbed her clit slowly. Dawn tensed up.\n\n\"Ahhhhhhhh...\" Dawn let out as she squirted on me when she came.\n\n\"That's different,\" I said.\n\nI reached up and took Dawn's tits in my hands and gently kneaded them.\n\n\"Honey...\" Dawn said and tensed up again, and another orgasm ran through her body.\n\n\"Oh, I can have fun doing this,\" I said.\n\n\"Are you doing anything to me?\" Dawn asked.\n\n\"No, just looking and touching.\"\n\n\"Are you sure?\"\n\n\"I promise. Why?\"\n\n\"I just...I just feel you.\"\n\n\"Well, I have my cock inside of you, honey.\"\n\n\"No...that's not it. The two of us just haven't been together like this for a while.\"\n\n\"For a while, or since you changed?\"\n\nI ran my hands down to Dawn's stomach, then sat and looked at her.\n\n\"I'm not sure...\"\n\nI grabbed Dawn's hips and pulled her hard onto my cock, and held her.\n\n\"Ohhhh...\"\n\nI used my hands to slide Dawn on and off my cock for a few minutes. Dawn closed her eyes as I kept doing it.\n\n\"What are you feeling?\" I asked.\n\n\"Your cock. Honey, I can feel all the ridges on your cock...and the head pressing into me.\"\n\n\"You have always been able to do that?\"\n\n\"Not without sitting on your lap when we have a quiet fuck. I can feel it like I had it in my hands.\"\n\nDawn was quiet as I kept sliding her on my cock. I concentrated a little, and I could feel all the details inside her pussy.\n\n\"You too...\" Dawn said.\n\n\"Yes...\"\n\n\"Pull me all the way onto your cock.\"\n\nI pulled Dawn slowly until the end of my cock was pressing into her.\n\n\"Oh my god...\" Dawn moaned. \"I can feel the opening on the end of your cock pressing into me. Wow...\"\n\nI could feel every detail on Dawn's cervix as it pressed into the end of my cock. I held her there, exploring the feelings and sensations.\n\n\"Emmmmm...\"\n\nI started slowly sliding Dawn up and down my cock. She was looking into my eyes, and I looked back into hers. Something had changed between us, and whatever it was felt wonderful. I just kept slowly working her on my cock as we felt each other.\n\n\"James...how long have we been doing this?\" Dawn asked.\n\nI looked at the alarm clock.\n\n\"Damn...\"\n\n\"What?\" Dawn asked.\n\n\"It has been over an hour.\"\n\n\"Oh...my...\"\n\nI pulled Dawn onto my cock then reached for her hands. She took them, and I pulled her up, so she was sitting on my legs. I kissed her for a minute then held her tight against me.\n\n\"Come in me,\" Dawn said.\n\nI grabbed her ass and pulled her onto my cock.\n\n\"No...just come in me...\"\n\nDawn and I held each other tight for a minute.\n\n\"Do you still feel the insides of my pussy?\"\n\n\"Yes.\"\n\n\"Fill me full of cum then. I want to feel it running out of me. Just come in me now.\"\n\nSuddenly I was coming hard over and over into Dawn.\n\n\"Oh...yes...your cum is so hot...fill me up, honey.\"\n\nI don't know how long I pumped cum into Dawn, but when I stopped, I could feel Dawn's pussy squeezing my cock.\n\n\"Do you feel that?\" Dawn asked.\n\n\"What?\"\n\n\"I can feel your hot cum running down the sides of your cock.\"\n\nDawn's insides felt great, but I didn't feel that.\n\n\"Oh, that is such a sensuous feeling,\" Dawn said.\n\nWe held each other for a while. Dawn lifted her head, and I kissed her for a minute.\n\n\"Thank you for letting me enjoy that,\" Dawn said.\n\n\"Anytime, honey.\"\n\nDawn smiled at me then began bouncing up and down on my cock as she smiled at me. I held onto her for a long time as she bounced.\n\n\"Now...\" Dawn said.\n\nThe two of us started coming hard. Dawn was moaning as she jerked on my cock, and I was pumping her full of cum again. After a few minutes, Dawn hugged me tight and held me.\n\n\"That was so good...\" Dawn said as she leaned back.\n\n\"Yes, it was.\"\n\nI let Dawn slowly slide down my legs and off my cock and helped her lay back. I slid my fingers into her cum filled pussy and pulled them out, and rubbed cum on her mound. Dawn let me keep doing that until she was covered in cum.\n\nI laid on top of her, and we kissed for a long time.\n\n\"I love you so much,\" I said to Dawn.\n\n\"I love you too.\"\n\nI pushed myself up and helped Dawn up, and we went and showered.\n\n*****\n\n\"You better check the grill,\" Dawn said as we walked naked down the stairs.\n\nI went out and checked everything, then came back in. Dawn was making us some sandwiches.\n\n\"I'm starving,\" Dawn said.\n\nI was too.\n\nWe were finished eating when the gate buzzed. I figured it was a delivery. The doorbell rang, and I went to the door.\n\n\"Hey, sis,\" I said. \"What brings you by?\"\n\n\"Heading home from the airport. Pete is gone until Tuesday.\"\n\n\"Where to?\"\n\n\"He and some buddies are off to Wyoming for a hunting trip. He'll be back Tuesday.\"\n\n\"Come on in and join us.\"\n\nI led Deb to the kitchen, and she sat at the bar with Dawn and me.\n\n\"Hey, Deb.\"\n\n\"Hey, Dawn. What are you two doing?\"\n\n\"Just finished eating lunch.\"\n\n\"Did I interrupt something?\" Deb asked.\n\n\"No. We just got out of the shower. I heard you tell James that Pete is gone until Tuesday?\"\n\n\"He has gone hunting.\"\n\n\"I'm glad he is taking some time off.\"\n\n\"He and his buddies have talked about this trip for years,\" Deb said.\n\n\"If he is taking time off, are you going to be able to get him to take a week or two this summer and join us in Hawaii?\" I asked.\n\n\"I'm coming! I don't care if he comes!\" We laughed.\n\n\"Work on him,\" Dawn said.\n\n\"I'll get him to go. If he only takes a week, can I spend the month with all of you?\"\n\n\"Sure.\"\n\n\"Good.\"\n\n\"Great,\" I said.\n\n\"Hey, Deb...if Pete is out of town for the weekend, you want to come to our party this weekend?\" Dawn asked.\n\n\"What kind of party?\"\n\n\"Oh...we are having some couples over for the weekend.\"\n\n\"Is this one of your fuck parties?\"\n\n\"We wouldn't ask you to come if it wasn't,\" I said.\n\nDeb looked at me a moment, then smiled.\n\n\"Seriously?\" Deb asked.\n\n\"Just a small party,\" I said.\n\n\"Pete would kill me if he found out.\"\n\n\"He won't find out,\" Dawn said with a smile.\n\n\"Angie and Brian are coming,\" I said.\n\n\"Really!\"\n\n\"Angie doesn't know it is a fuck party...yet,\" Dawn said and giggled.\n\n\"Brian would say something to Pete,\" Deb said.\n\n\"He better not,\" Dawn replied.\n\n\"You need to come, sis. I think people would enjoy watching me fuck my sister.\"\n\n\"Are you serious?\"\n\n\"Yes.\"\n\n\"Hmmm. Pete has been cool with us fucking a few of our friends.\"\n\n\"Really?\" I asked.\n\n\"Oh...a few. He had plenty of fun with the wives.\"\n\n\"You'll have to tell me about it!\" Dawn exclaimed.\n\n\"I finally talked him into it,\" Deb said. \"He enjoys watching me eat pussy!\"\n\n\"I bet he does!\" Dawn exclaimed.\n\n\"I should come...and tell Pete when he lands I am coming...and why!\" Dawn laughed at Deb.\n\n\"We start at 6:00 tonight. I'm already cooking. After everyone eats, they'll be fucking all weekend,\" I told Deb.\n\n\"You know what...I'll be here! One of the other guy's wives went with them, and Pete said they would all be fucking her.\"\n\n\"Why didn't you go then?\" I asked.\n\n\"Pete didn't ask me.\"\n\n\"Oh, yes! Come then,\" Dawn said.\n\n\"You know what would be even better. I'll tell Pete I am coming and why.\"\n\n\"Make sure you get a picture of one of our friends fucking you and send it to him!\" Dawn teased her.\n\n\"That is a good idea!\"\n\nThe three of us talked for a while.\n\n\"Dawn, I need to talk to you about something,\" Deb said.\n\n\"Sure.\"\n\n\"In private.\"\n\n\"Okay. Honey, clean up, please.\"\n\nDeb and Dawn went into the big bedroom downstairs. I cleaned up after our lunch then went to my study to check my email. About an hour later, I heard Dawn getting off. I went to the bedroom. Deb was on her hands and knees, going down on Dawn.\n\n\"I thought you two wanted to talk.\"\n\n\"Oh, we finished,\" Dawn said.\n\nI got behind my sister on the bed. Dawn smiled at me as I slowly slid my cock into Deb.\n\n\"Emmmmmmm.\"\n\nI slowly worked my cock in her while she worked on Dawn. Dawn watched me as she got off several times. Dawn enjoyed watching me do Deb a lot now.\n\n\"Oh, Deb. Stop a minute,\" Dawn said.\n\nDeb lifted her head while I worked my cock in her.\n\n\"You are okay doing it now?\" Dawn asked.\n\n\"I know...I just...I get self-conscious when Pete is watching.\"\n\n\"But only when you are going down on a woman and the guy is fucking you from behind?\"\n\n\"Yes.\"\n\n\"Why?\"\n\n\"Well, if I am doing her and the guy is doing me...I really get off,\" Deb said.\n\n\"You should. I love it when a guy does me from behind while I'm eating pussy.\"\n\n\"I know...it's great.\"\n\n\"I just worry Pete thinks I am getting off too much.\"\n\n\"Have you talked to him about?\" Dawn asked.\n\n\"I asked him if he enjoys watching. He says he does. But Dawn...I really get off when that is happening.\"\n\n\"Are you worried Pete will think he is not pleasing you enough?\" Dawn asked.\n\n\"Yes.\"\n\n\"That is why you two need to talk about it. You need to tell Pete why you get off so much when that is happening. Why do you, Deb?\"\n\n\"You know...I think it is because I am enjoying knowing Pete likes to watch me go down on a woman...he seems to really enjoy watching other men fuck me. It makes me hot thinking about it.\"\n\n\"It should,\" I said to Deb.\n\n\"Does Pete get off fucking a woman from behind while she eats you?\" Dawn asked.\n\n\"Of fuck...yes he does!\"\n\n\"How do you know that?\"\n\n\"He looks at me and smiles while he is fucking her. I'll rub my tits and smile and wink at him. He will really get into fucking the other woman then.\"\n\n\"And you are okay with that?\"\n\n\"Sure.\"\n\n\"Then why are you worried about him not enjoying watching you?\"\n\n\"He enjoys watching...\"\n\n\"But you are worried about getting off so much?\"\n\n\"Yes.\"\n\n\"Deb, you need to tell Pete how much you get off with him watching,\" Dawn said.\n\n\"Tell him while he is fucking you,\" I told Deb.\n\n\"He knows I enjoy him watching...\"\n\n\"But?\"\n\n\"He...brought a friend of his home last Friday for dinner. Later, his friend fucked me while Pete videoed everything. After his friend left, we fucked most of the night.\"\n\n\"Were you okay with that?\" Dawn asked.\n\n\"Sure. The next night we watched the video while we fucked. Pete really enjoyed it.\"\n\n\"Hmmmm,\" came from Dawn.\n\n\"What?\" Deb asked.\n\n\"Has he brought any other guys home, I mean without their lady friend?'\n\n\"Just this one. Why?\"\n\n\"If he brings another guy home to fuck you, talk to him after and find out why he is not bringing a couple home?\"\n\n\"Why? Does James bring guys home to fuck you?\"\n\n\"Deb, James doesn't need to do that. His friends, our friends, the guys will come over sometimes to fuck me. James is okay with that.\"\n\n\"James, you do like watching, don't you?\" Deb asked.\n\n\"Of course, but sis, what I enjoy more is knowing Dawn is being pleased and having a good time. I don't have to watch her to get off and have a good time.\"\n\n\"You are okay with guys coming here just to fuck her?\"\n\n\"Sure.\"\n\n\"Pete would never go for that,\" Deb said.\n\n\"That is the problem, maybe,\" Dawn said.\n\n\"What do you mean?\"\n\n\"Deb, James is fine with men or women pleasing me, even if he is not here to watch. That is because afterward, I tell him all about it. He wants me to tell him how much I got off. Amy and Samantha do the same thing.\"\n\n\"What does that mean?\"\n\n\"Okay...after Pete videoed the guy fucking you, did you tell him how much you got off from the guy doing you...and...did you tell him you appreciated him letting the guy do you,\" Dawn said.\n\n\"Well...I told him I got off on it.\"\n\n\"Have either of you ever told the other that you appreciated letting all this happen?\" Dawn asked.\n\n\"I don't think we have ever said that.\"\n\n\"You need to do that. You two need to make very sure you tell each other that you love each other enough for this to be happening. It is not just about fucking, Deb. It is all about wanting to enjoy the other having a good time. You can't really fully enjoy everything unless you know you love each other enough to be secure.\"\n\n\"Pete knows that.\"\n\n\"Have you told him that?\"\n\n\"Not in so many words.\"\n\n\"That is the problem. That is why you feel guilty sometimes. You are not secure in your feelings that Pete loves you enough that he can let you do this and get off as much as you want and need,\" Dawn told her.\n\n\"Sis, I know how much my wives love me, and they know how much I love them. They know that nothing will come between us. They are comfortable in that, and they can enjoy having all the sex they want with other people.\"\n\n\"You two, four, never worry about one of you becoming attached to someone else they are having sex with?\"\n\n\"No,\" Dawn said. \"It seems you are having those thoughts.\"\n\n\"How can you not worry about that, Dawn?\"\n\n\"Because I don't have to, Deb.\"\n\n\"Sis, I think you and Pete need to talk through this.\"\n\n\"I guess...but finish fucking me!\"\n\nDawn and I laughed. Deb went back to eating Dawn while I fucked her.\n\nWe heard the gate buzz again.\"\n\n\"Now what?\" I said.\n\nNobody came on the intercom, so I thought it was a delivery again. Then the doorbell rang. I slid my cock out of Deb and went to the front door. I looked on the touchpad next to the door, and it was Sam and Olivia's code from the gate. I opened the door.",
        "\"You have terrible timing,\" I said.\n\n\"Looks like it. I was making a delivery a few miles from here and wanted to stop and ask if I needed to bring anything tonight.\"\n\n\"Come on in. I'll ask Dawn.\"\n\nSam followed me to the bedroom.\n\n\"Hey, Sam,\" Came from Dawn.\n\nDeb looked back quickly and was not sure what to do.\n\n\"I didn't mean to interrupt. I just wanted to stop by and see if we need to bring anything tonight.\"\n\n\"I think we are good. Have you met James' sister, Deb?\"\n\n\"No...I haven't.\"\n\n\"Her husband is out of town for the weekend, and we are trying to talk her into coming for the weekend.\"\n\n\"Oh...she should,\" Sam said as he looked.\n\n\"Why don't you show her why she should come this weekend,\" I said.\n\n\"Oh...is that okay?\" Sam asked as he looked at Deb.\n\n\"Is that okay with you, sis?\" I asked.\n\n\"Sure...I guess.\"\n\nSam didn't waste any time taking his clothes off and getting on the bed behind Deb. He rubbed her ass and worked his fingers in her pussy for a few minutes, then got on his knees and slid his cock into her.\n\nI walked off and went outside to check the grill and put sauce on everything. When I went back in, I heard Deb crying out she was coming. Sam must have made her hot and horny. I walked to the bedroom and saw Sam jamming his cock into Deb hard as she tried to eat Dawn. Dawn looked at me and smiled.\n\nDeb pushed herself up on her hands.\n\n\"Oh, fuck! Yes!\"\n\nDawn crawled out from under her and came to me.\n\n\"Why don't you take my place,\" Dawn said.\n\nI got on the bed on my knees in front of Deb and grabbed my cock. She looked up at me, and I pressed my cock between her lips and slid it into her mouth.\n\n\"Emmmm!\"\n\nSam fucked her hard while she moaned on my cock. Dawn was standing and watching us, then walked away. A minute later, she appeared with her cell phone. She took pictures of Deb for a while.\n\n\"Emmmmmm!!!\" Came from Deb, and she started coming hard. I pulled her head onto my cock. \"Emmmmmm!!! EMMMM!!!\"\n\nDeb pushed back and slid my cock from her mouth.\n\n\"Oh fuck!! This is so good!!\"\n\n\"Turn around,\" I told Deb. She looked up at me, puzzled. \"Turn around.\"\n\nDeb smiled, then moved forward and pulled Sam's cock out of her. She quickly turned around. Sam slid his cock into her mouth, and I slid into her pussy. Dawn took some more photos.\n\nIt wasn't long before Deb was having another huge orgasm. Sam was working his cock down her throat as I thrust into her. She moaned and jerked as she came again.\n\n\"Turn around again,\" I told Deb.\n\nShe giggled as she swapped ends again.\n\nSam and I fucked her for about 20 minutes until she started coming again. Sam groaned and started pumping cum into my sister. I thrust into her mouth and filled it full of cum. Deb collapsed between us and laughed.\n\nDawn walked to the bed and handed me her phone, then got on the bed and pulled Deb's legs apart. She straddled Deb's head, then laid on her and went to work on her pussy.\n\n\"Oh, Dawn!\"\n\nDawn pushed her pussy down onto Deb's mouth.\n\nI got off the bed and took some pictures and videos of the two of them.\n\n\"I better get going,\" Sam said.\n\nHe put his clothes on as he watched Dawn and Deb. We walked to the front door.\n\n\"There will be some people here this weekend that should be some fun,\" I said.\n\n\"Are they cool with everything?\"\n\n\"Yes. My sister-in-law is coming with my brother. Make sure you give her a great fuck at least once this weekend.\"\n\n\"I will!\"\n\nSam left, and I went back to watch. Deb was coming over and over as Dawn worked on her pussy. Dawn finally pushed herself up and sat on Deb's mouth. I sat on the end of the bed and slid my fingers into my sister's pussy, and worked. Dawn had her eyes closed as she worked her pussy on Deb's mouth. She came in a gush and looked at me and smiled, then moved off Deb's mouth.\n\n\"I may...I may not have anything left for your party,\" Deb said.\n\n\"Sure you will,\" Dawn said.\n\nThe three of us went and showered. After we dried off, we went to the den.\n\n\"Hey, Deb. I have some photos and videos you can send Pete,\" Dawn said.\n\n\"What?\"\n\n\"I got some good shots of you while they fucked you.\"\n\nDeb pulled her shirt on, went over to Dawn, and looked at her phone.\n\n\"Oh, my, god!\" Deb exclaimed and laughed. \"You even have video!\"\n\n\"You want to send these to Pete?\" Dawn asked.\n\n\"Yes! Send all of them to my phone!\"\n\nDawn and Deb laughed as they looked at all the photos and videos.\n\nWe were sitting in the den with Deb while she ran a comb through her wet hair. We were still naked. Her phone rang, and she dug it out of her bag.\n\n\"Hey, honey. Did you all get there alright?\" Deb asked.\n\n\"Yes,\" we heard.\n\n\"Well, I am at Dawn's house right now. We have been fucking all afternoon.\"\n\n\"You are?\"\n\nYes. Let me turn on the facetime.\"\n\nDeb fumbled with her phone then held it up to talk.\n\n\"See.\"\n\nDawn got up to stand behind Deb so he could see her tits.\n\n\"Hey, Pete!\" Dawn said.\n\n\"Hi, Dawn.\"\n\n\"I hear you went hunting but took some pussy with you,\" Dawn said. We heard Pete laugh.\n\n\"Maybe!\" Pete said.\n\n\"Honey, I am going to spend the weekend with Dawn and James.\"\n\n\"Oh?\"\n\n\"They invited me. They are having a party this weekend and wanted me to join them. Since you took Jerry's wife, I told her I would be happy to join them.\"\n\n\"Is this one of their orgies?\" Pete asked.\n\n\"Oh, I hope so!\" Deb exclaimed.\n\n\"Pete, are you okay with that. I thought that since you and your buddies are fucking one of their wives, Deb could get laid this weekend,\" Dawn said.\n\n\"Well...I guess,\" Pete replied.\n\n\"Great. I'll make sure and send videos home with her,\" Dawn told him.\n\nDeb talked to Pete for a few more minutes as Dawn stood behind her.\n\n\"I have something to send you as soon as we hang up,\" Deb said.\n\n\"Oh?\"\n\n\"I think you...and your buddies may like!\"\n\n\"Okay. Bye.\"\n\n\"Bye.\"\n\nAfter they hung up, Deb sent him something Dawn had sent to her phone.\n\n\"I don't think he likes the idea...but that is too bad!\" Deb exclaimed.\n\n\"What time will Grace be here?\" I asked.\n\n\"Probably about 4:00. Depends on the surgery,\" Dawn said.\n\n\"Who is Grace?\" Deb asked.\n\n\"A new friend that is staying with us for a while.\"\n\n\"What time does the party start?\"\n\n\"About 6:00,\" I told Deb.\n\n\"I need to run home first. I'll be back by 6:00.\"\n\n\"Okay.\"\n\nDeb got dressed and left. Dawn and I checked on the pork shoulders and ribs that had been cooking all day, then got dressed.\n\nAbout 4:30, Grace buzzed us from the gate, and Dawn let her in. I met her outside and helped her bring in her clothes. I put her in the last bedroom off the hall downstairs. Dawn and I helped her get moved in and settled. After that, the three of us were in the den sipping some wine.\n\n\"Where are Amy and Samantha?\" Grace asked.\n\nill\n\n\"They should be here soon,\" Dawn said. \"They needed to finish studying, so they will be free this weekend.\"\n\n\"They sound very disciplined.\"\n\n\"They work hard,\" Dawn said. \"But we all make time for some fun.\"\n\n\"May I ask about the sleeping arrangements you all have?\"\n\n\"Well, Samantha and Amy have bedrooms upstairs, but they sleep with us most of the time,\" Dawn explained.\n\n\"Do Samantha and Amy enjoy each other?\"\n\n\"They do.\"\n\n\"Good for them. My sister and I always enjoyed sex with each other.\"\n\n\"How often do you see your sister?\" Dawn asked.\n\n\"A few times a year. She lives in Boston with her husband.\"\n\n\"Did the two of you ever do her husband?\" Dawn asked.\n\n\"Before they got married...a few times.\"\n\n\"Not since?\" I asked.\n\n\"No.\"\n\n\"Any reason?\"\n\n\"They moved to Boston shortly after they got married. He is a big wig at some bank now. He never comes with her when she comes to visit me.\"\n\n\"Maybe you need to go visit her?\" I said.\n\n\"I should.\"\n\n\"Grace, you will find that all of us stay busy, but we make sure we have time for each other. We are in the process of opening two businesses we are involved with and have other things that we do,\" I said.\n\n\"I won't be in the way, will I?\"\n\n\"Oh, no,\" Dawn said. \"We just want you to know we come and go a lot. We'll give you a code for the gate and a key to the house. You are welcome to come and go as you please. Our house is your house. Just make yourself at home.\"\n\n\"Are you sure I won't get in the way?\"\n\n\"You won't. We are usually always here at night,\" I said.\n\n\"Okay.\"\n\n\"Grace, one thing you need to know. You are welcome to join us for sex anytime. No one has an issue with that,\" I said. \"We have friends that come and go and family that come and go. Don't be surprised at any of us having sex with other people. If you are going to be here for the party, you will meet some great people.\"\n\n\"Sounds like fun.\"\n\n\"If you want to bring someone home to spend the night, don't worry about it,\" Dawn said.\n\n\"Okay. Thanks. My little brother was wanting to come and visit.\"\n\n\"He can stay here,\" I said.\n\n\"Thanks.\"\n\n\"I have got to start getting things ready. I have to pull all the meat off for bar-b-cue,\" I said and headed outside to check on the grill. I was putting sauce on the ribs when Grace came out.\n\n\"Have you been cooking all day?\"\n\n\"Most of it.\"\n\n\"So, how do these parties usually go, James?\"\n\n\"Just people having fun. There will be a few couples here this time that have not been here before. Just have fun and get to know everyone and see what happens.\"\n\n\"Okay. Sounds like fun.\"\n\n\"My brother and his wife are coming for the first time.\"\n\n\"Oh?\"\n\n\"I talked him into it. His wife is a lot of fun.\"\n\n\"You have done his wife?\"\n\n\"Yes. Angie is a lot of fun. The two of them have started to have some fun.\"\n\n\"Sounds like it.\"\n\n\"My sister is also coming.\"\n\nGrace was quiet as I closed the lid on the grill.\n\n\"Are you about finished?\" She asked.\n\n\"Just about.\"\n\n\"Is it okay if I go swimming?\"\n\n\"Grace, you can do whatever you want.\"\n\nGrace pulled off all her clothes and jumped into the pool.\n\n\"This pool is wonderful being heated.\"\n\n\"It is. Dawn designed the house and the outside landscaping. Do you know how we can afford this house?\"\n\n\"Dawn mentioned you two won the lottery.\"\n\n\"We did a few years back. There are towels just inside the door in the closet,\" I told Grace.\n\n\"What can I do to help?\" Dawn asked as she came outside a little after 5:00.\n\n\"I'm about ready.\"\n\n\"Okay. Amy and Sam just came in. They are going to help me get everything else ready.\"\n\n\"I'll get out and help,\" Grace said.\n\n\"Stay in the pool. We have got it,\" Dawn said and went back inside.\n\n\"James, do I need to get out?\"\n\n\"No, you can stay in the pool as long as you want.\"\n\nI finished on the grill and started getting things together. Grace got out of the pool and helped me. We took everything inside. It was 5:30, and I had to get to work pulling meat off.\n\nAbout 5:45, Deb came back in. She came to the kitchen to help me with the bar-b-cue.\n\n\"You better get busy,\" Dawn told me.\n\nDeb helped me start cutting up the shoulders.\n\n\"Who is the blonde?\" Deb asked.\n\n\"Grace. She is staying with us for a while.\"\n\nAt 6:00, I hear the gate buzzing.\n\nDawn and the girls had everything ready. Sam and Olivia were coming, Joe and Katrina, Dr. John and Carol, and I was surprised, but Elizabeth had talked Keith into coming.\n\n\"Hey, sis. Why don't you talk Brian into fucking you this weekend.\"\n\n\"He won't do it.\"\n\n\"Would you let him?\"\n\n\"I guess so.\"\n\n\"Maybe everyone would enjoy watching him and me doing you at the same time.\"\n\n\"You are a pervert.\"\n\n\"I try!\"\n\n\"Mom told me you finally fucked her,\" Deb said.\n\n\"Oh? When?\"\n\n\"I was talking to her about when they would be here for the Grand Opening next week.\"\n\n\"Surprised she told you.\"\n\n\"You know she has always told me things like that. Did you enjoy it?\"\n\n\"Yes.\"\n\n\"Are you going to do it again?\"\n\n\"Maybe.\"\n\n\"You should. Mom said she felt really good while you were doing her. Could I watch?\"\n\n\"That would be up to mom. Dawn's parents are coming in also.\"\n\n\"Are they bringing their lady friend?\"\n\n\"Of course.\"\n\n\"I hope Pete doesn't get any ideas.\"\n\n\"Pete couldn't handle a situation like that.\"\n\n\"No, he couldn't.\"\n\n\"They are going to join us in Hawaii also.\"\n\n\"That should be interesting,\" Deb said. \"Are they staying here next weekend?\"\n\n\"Sure.\"\n\n\"Are you planning on fucking Dawn's mom again?\"\n\n\"Oh, I hope so. She is great fuck.\"\n\n\"Dawn is okay with that?\"\n\n\"Sometime this weekend, have Dawn tell you about what she feels when her mom is having sex.\"\n\n\"What?\"\n\n\"Just ask her.\"\n\n\"How does her dad feel about it?\"\n\n\"He likes to watch.\"\n\n\"James...has her dad done her?\"\n\n\"Has Dawn's dad fucked her?\"\n\n\"Yes.\"\n\n\"No.\"\n\n\"Would she let him?\"\n\n\"I'm not sure. Why haven't you fucked dad?\"\n\n\"He never asked.\"\n\n\"Has he gone down on you?\"\n\n\"A few times,\" Deb replied.\n\n\"It's Brian and Angie!\" Samantha yelled.\n\nI was cleaning up while Deb got a glass of wine.\n\n\"Hey, you two!\" I heard Samantha say.\n\nAngie and Brian came in and stopped and talked, then they came to the kitchen.\n\n\"Hi, Deb. I...didn't know you were going to be here. Where is Pete?\" Angie asked.\n\n\"He went on a hunting trip with some of his friends.\"\n\n\"Are you staying after dinner?\" Angie asked.\n\n\"Oh, yes...\"\n\n\"Oh...you are...\"\n\nAngie walked away.\n\n\"Angie doesn't know there are some other couples coming,\" I told Deb.\n\n\"Who is that with them?\"\n\n\"A couple they have been doing from Brian's work. Angie said he has a huge cock.\"\n\n\"Oh, good!\"\n\n\"Don't tell Angie about the other people.\"\n\nDeb giggled.\n\nBrian came back to the kitchen while Angie was talking in the den.\n\n\"Where is everyone else?\" Brian asked as he got a beer from the fridge.\n\n\"What time is it?\"\n\n\"A little after 6:00.\"\n\n\"They will be here soon.\"\n\nBrian walked off while I put the pans of meat in the ovens. I heard the gate buzz again. I washed my hands off and went to the den.\n\n\"It's Linda and Rachel,\" Amy said.\n\nI went to the front door and opened it and went out and waited for them. Linda and Rachel pulled up in her Diablo and got out. They walked up to me with several bottles of wine.\n\n\"You made it,\" I said, and they both kissed me.\n\n\"Who all is here?\" Linda asked.\n\n\"My brother and his wife and some friends of theirs, and my sister.\"\n\n\"Really?\" Rachel asked.\n\n\"Oh, yes. Remind me I have something to talk to you two about.\"\n\nI opened the door, and we walked into the house.\n\n\"Hi, you two,\" Dawn said and kissed both of them. I took the wine to the kitchen.\n\nDawn introduced Linda and Rachel to everyone.\n\n\"James...\" Brian said as he pulled me to the side. \"Is Linda Williams going to be here...all weekend?\"\n\n\"Of course.\"\n\n\"Fuck! I can't believe you are doing her!\"\n\n\"It's a long story. Calm down, Brian.\"\n\n\"And she...lets everyone fuck her?\"\n\n\"No, she lets men please her, and I expect you to do just that.\"\n\n\"Oh, my god.\"\n\n\"Brian...just remember all this is to be kept quiet. Make sure Ryan and Hannah know it. One of the couples coming...well, he is a spook. So, it really has to be kept quiet.\"\n\n\"He is in the CIA?\"\n\n\"Yes.\"\n\nWhile I was talking to Brian, Patricia and Gregg came in. I watched as Dawn and Linda talked to them for a bit.\n\n\"Who is that hot lady?\" Brian asked.\n\n\"That is Patrica and her husband, Gregg. He's the spook. She is Linda's assistant.\"\n\nBy 6:20, Ian and Sondra had walked in along with Joseph and Pamela and their secretaries. Sam and Olivia came in at 6:30. He had said he would be late. John and Carol were running behind also.\n\nDawn walked into the kitchen while she was talking on her cell phone.\n\n\"Okay, John. See you in all a few,\" Dawn said and hung up.\n\n\"John said they would all be here in about 30 minutes. They had someone come in the emergency room, and they just finished up.\"\n\n\"James...\" Ian said, walking up. \"I can't believe Ms. Williams is here.\"\n\n\"Ian, Linda and Rachel are very close to my family. It was not easy getting her to come.\"\n\n\"I'm sure it wasn't. I would have never thought she was into this.\"\n\n\"She's not, Ian. She is not into anything. Linda enjoys great sex like all women do. Keep that in mind.\"\n\n\"Oh...I didn't mean...\"\n\n\"I know. Just remember who she is, Ian.\"\n\n\"I will.\"\n\nDawn grabbed several bottles of wine while Amy and Samantha grabbed two trays and glasses.\n\n\"James...you didn't say anything about a bunch of people being here this weekend,\" Angie said.\n\n\"Surprise.\"\n\n\"Brian will never go for this.\"\n\n\"Oh...I bet he will. Just enjoy, Angie.\"\n\nAngie went back to the den while I checked the ovens.\n\nBrian came back into the kitchen.\n\n\"James, who is the tall lady with auburn hair? She is hot.\"\n\n\"That is Katrina. She loves a big cock.\"\n\n\"Great! She sure looks hot in those tight jeans.\"\n\n\"Seriously, Katrina is an excellent fuck. Make sure you please here well.\"\n\n\"I plan on pleasing all these women well!\"\n\n\"John and Carol just pulled up,\" Samantha said.\n\n\"Good. It is getting late. Honey, make sure none of the guys are afraid of having sex with Elizabeth,\" I said.\n\n\"I don't think they will. I hope guys think pregnant women are hot!\" Samantha said as she smiled at Brian.\n\n\"Tramp!\"\n\n\"You know it!\" Brian walked away with Brian.\n\n\"Hey, James...do the cameras run all weekend?\" Deb asked.\n\n\"Of course, they do.\"\n\n\"I think Pete would enjoy some of the videos.\"\n\n\"I'll have to make him something. He would worry me that he may show it to someone.\"\n\n\"He wouldn't. I'll make sure.\"\n\nI walked to the den and handed Linda and Rachel a glass of wine.\n\n\"I'm sort of happy to see Ian here. I had thought about doing him,\" Linda said.\n\n\"Tramp,\" Rachel teased her.\n\n\"You'll find out he and his wife are a lot of fun.\"\n\nOnce John, Carol, Keith, and Elizabeth had something to drink, Dawn and I started getting all the food ready. Once it was all out, everyone started grabbing it and finding a place to sit. Everyone sat and ate and talked and laughed for a long time. Grace was in a robe sitting and talking.\n\nBy the time we all finished eating, everyone was still talking and laughing. Deb was sitting with John and Carol, and they seemed to be having a serious conversation. Once everyone was through, all the women were helping clean up and talking among themselves.\n\nBy 9:30, we were all sitting around the den and kitchen, sipping wine and talking. Angie and Brian were sitting with Sam and Olivia talking. Linda and Rachel got up, and Ian and Sondra followed them up the stairs.\n\nI headed to the kitchen for more wine. Deb followed me to the kitchen.\n\n\"James...I heard Ms. Williams say that she and her bodyguard have a regular bedroom here?\"\n\n\"Deb, I'll have to explain things about Linda later. They do have one of the bedrooms upstairs. She and Rachel come by sometimes to get away from everything.\"\n\n\"And to fuck?\"\n\n\"That also.\"\n\n\"Both of them?\"\n\n\"Yes. She and Rachel are a couple, but they still enjoy sex with men.\"\n\n\"Often?\"\n\n\"No.\"\n\n\"Just you?\"\n\n\"No.\"\n\n\"Do they stay here often?\"\n\n\"Deb, it is a long story...I'll have to explain it to you when we have some time. Linda and Rachel are very close to all of us.\"\n\n*****\n\nAfter everyone had eaten and had plenty of time to talk and laugh, it was nearly 10:00. I was helping load all the dishes in the dishwasher before things got started. Katrina was helping me.\n\n\"James?\" She asked.\n\n\"Yes.\"\n\n\"I want you to do it to me.\"\n\n\"Do what?\"\n\n\"Make me cum just by touching me.\"\n\n\"Are you going to freak out this time?\"\n\n\"No.\"\n\n\"Okay.\"\n\n\"I don't want anyone else watching, though.\"\n\n\"Okay. When we finish here.\"\n\nOnce we finished and had everything cleaned up. I took Katrina's hand.\n\n\"Come with me,\" I said.\n\nI led Katrina down to the basement and opened the doors to the mirror room, and took her in to the bed.\n\n\"Why do you want me to do this?\" I asked.\n\n\"I just do.\"\n\nI reached over and began unbuttoning her silk top. I pulled it off, and she had on a sexy black bra. She laid back on the bed, and I unsnapped her blue jeans and pulled them open. Katrina lifted her ass, and I pulled them down slowly and worked them off her legs. I saw the rest of her sexy black lingerie.",
        "\"You look nice.\"\n\n\"Thanks.\"\n\nI sat on the edge of the bed next to her.\n\n\"Tell me more about when you were young, and this happened.\"\n\n\"I told you that we all lived out in the swamps near New Orleans and didn't have much of anything,\" Katrina told me.\n\n\"Tell about the first time it happened.\"\n\n\"You mean when my grandfather did it?\"\n\n\"Was that the first time?\"\n\n\"Yes. I wouldn't let him near me after that. I started modeling shortly after that and moved away.\"\n\n\"What do you remember?\"\n\n\"It was the night of my eighteenth birthday party. He said he had something for me. He led me over to his house. Before I knew what was going on, he had me lying on the bed and was running his hands over my clothes. Then suddenly...I had this huge orgasm. I jumped up and ran out and hid.\"\n\n\"I hope I can make it more pleasurable for you, Katrina.\"\n\n\"I do too.\"\n\n\"You have to trust me, Katrina.\"\n\n\"I do.\"\n\nI turned the lights down low and lay next to her.\n\n\"All you need to do is just relax and feel what is happening.\"\n\n\"James...can you do this to Dawn and the girls?\"\n\n\"Yes, but not all women. Now close your eyes and relax.\"\n\nI took my time slowly, running my hands all over Katrina's body as I talked her through relaxing. I thought it was odd that I felt a strange feedback of energy from her as I did.\n\n\"Katrina, I am going to put my hand on your stomach. Just concentrate on how my hand feels touching you.\"\n\nI slid my hand down to the top of her panties and held it. I closed my eyes and explored Katrina's energy for a while. I felt for it deep inside of her and pushed.\n\n\"Oh...my...\" came from Katrina. I was curious now.\n\nI kept pushing my energy into her for some time. Katrina kept moaning. I slid my hand down under the edge of her panties and left it on her mound.\n\n\"Breathe nice and slow and just feel my hand, Katrina.\"\n\nI concentrated and felt her energy as she breathed nice and deep. I started pushing sexual energy into her hard.\n\n\"Oh...\"\n\n\"Just breathe...\"\n\nI kept pushing. I could feel her beginning to grow toward an orgasm. It was easy with her.\n\n\"Breathe...\"\n\nI let her energy build and build until she was fully aroused.\n\n\"Just trust me, Katrina.\"\n\nI concentrated hard for a few minutes, then pushed all I had into her body.\n\n\"Ahhhhhhh!!!\" Katrina screamed as she thrust her hips up over and over.\n\nI keep pushing hard.\n\n\"Fuuuuuuuck!!!\"\n\nI heard her pussy repeatedly gushing as she kept coming.\n\n\"Ohhh!!! Ohhh!!! Ohhhhhhhhh!!!\"\n\nShe thrust her hips up and held them there as she screamed. I stopped pushing, and she fell back to the bed.\n\n\"Oh fuck!!!\"\n\nKatrina was struggling to breathe.\n\n\"James...fuck me...now...\"\n\nI sat up and pulled her panties off and got between her legs, and slid my cock into her fast.\n\n\"Ahhhhhh!!!\" Katrina screamed and came hard again. \"All of it!!!\"\n\nI pushed in hard and deep.\n\n\"Fuuuuuuck!!!\" Katrina was thrusting her pussy up.\n\nI grabbed her legs quickly and pulled them up, and held them. I started jamming my cock into her.\n\nKatrina kept screaming she was coming. I finally slid into her and held her, and laid on her. She was breathing very fast.\n\n\"Oh my god.\"\n\nI pushed myself up on my arms and looked at her.\n\n\"Fuck...James...\"\n\n\"Are you okay?\"\n\n\"Perfect!\"\n\nI kissed her for a few minutes then rolled next to her.\n\n\"I don't know how you did that...but it was wild.\"\n\nKatrina finally rolled to me and moved down, and began sucking my cock. I turned the lights up some so I could watch. I finally pulled her on top of me so we could do each other.\n\nWe went for a long time that way. Katrina finally came hard, and I pumped cum into her mouth. Katrina rolled off of me.\n\n\"Emmmmm...that was great,\" she moaned.\n\nI looked over at her, and she sat up and finally took her bra off. She leaned over me with her tits at my mouth. I pulled her down and sucked on her nipples for a long time.\n\nKatrina had been stroking my cock as I sucked on her nipples. Once she had what she wanted, she climbed on top and worked my cock into her pussy.\n\n\"I'm not sure Joe needs to know about this,\" she said.\n\n\"It could be hard to explain.\"\n\n\"I couldn't.\"\n\nKatrina rode my cock for a long time. She would have an orgasm every 15 minutes or so. She finally went to work bouncing up and down on my cock until we both came hard. She then laid on me and kissed me for a bit.\n\n\"I'm exhausted,\" she said.\n\n\"It's late. Get some sleep.\"\n\n*****\n\nWhen I woke up, I looked next to me, and Katrina was lying on her stomach, asleep. I knew it was pretty early. I rolled to her and started running my hand over the skin of her back slowly.\n\n\"Emmm...\"\n\nI kept rubbing her back for a while, then slid my hand down between her legs and found all the wetness from earlier. I slid my fingers into her pussy.\n\n\"Emmmmm...\"\n\nI took my time rubbing all of our juices on her asshole. She looked at me and winked. I moved over her body and grabbed my cock, and pressed the end against her asshole.\n\n\"Emmmm...yes...\"\n\nI began to push and slowly slid into her ass.\n\n\"Oh...my...all of it, James.\"\n\nI kept pushing until I was lying on her.\n\n\"That's it. Fuck my ass nice and slow, please.\"\n\nI took my time and fucked her ass. She moaned softly the entire time.\n\n\"Make me come, James.\"\n\nI sped up. After a few minutes, I was jamming my cock into her ass.\n\n\"Yes!! That's it!! Fuck my ass, James!!\"\n\nShe had a huge orgasm, and I kept thrusting into her.\n\n\"More!! More!!\"\n\nI kept going, and she kept having orgasms.\n\n\"Fuck!!! Come in me, James!!!\"\n\nKatrina drove her ass up, and I drove into it, and we both had a huge orgasm. After that, the two of us laid on the bed for a long time.\n\n\"Are you all still planning on going to Hawaii again?\"\n\n\"We are planning on going for a month,\" I said.\n\n\"When?\"\n\n\"All of June, probably.\"\n\n\"I haven't been able to get Joe to take me to Hawaii.\"\n\n\"Make him take you. We are renting the house we had last time, and all of the family is going to try and come for at least a few weeks.\"\n\n\"Take me, and I will leave Joe here to babysit!\"\n\n\"The house is big enough.\"\n\n\"Who all is going?\"\n\n\"Our parents and my brother and sister and their spouses.\"\n\n\"James...have you had sex with your sister? I know she is here?\"\n\n\"A few times.\"\n\n\"What about your sister-in-law?\"\n\n\"A few times.\"\n\n\"I have always wished Joe would let his brother fuck me.\"\n\n\"Why?\"\n\n\"He is younger than Joe, and he teased me a lot when Joe wasn't watching. I used to flash him.\"\n\n\"Is he married?\"\n\n\"Yes.\"\n\n\"Ask him if you fuck him if he will let Joe do his wife?\"\n\n\"Joe wouldn't go for that.\"\n\n\"Why not?\"\n\n\"He wouldn't let his brother do me.\"\n\n\"Hmm. I'll see if I can change his mind.\"\n\n\"Change his mind about taking me to Hawaii!\"\n\n\"What about your daughter?\"\n\n\"My parents would love to keep her for a week or so.\"\n\n\"Maybe I should tell Joe that you two should join us for a few weeks.\"\n\n\"That would be great!\"\n\n\"You would have to be cool with everyone fucking you,\" I said to Katrina and stood and took her hand. We picked up our clothes.\n\n\"We have been down here all night,\" I said.\n\nI walked Katrina to the doors and opened them, and we went out.\n\n\"James? Who all would be fucking me?\"\n\n\"Everyone.\"\n\n\"Does that mean your dad?\"\n\n\"My dad, Dawn's dad, my brother, and brother-in-law.\"\n\nI closed the doors, and we headed to the bathroom in the basement.\n\n\"James, hang on a minute. What would your mom say about your dad doing me?\"\n\n\"As long as she gets to watch, she is okay.\"\n\nI led Katrina to the shower, and we cleaned up. When we went upstairs, almost all the lights were off downstairs. I looked at the clock, and it was 5:00.\n\n\"You want some breakfast?\" I asked Katrina.\n\n\"Sure. Looks like everyone is in bed.\"\n\nI started cooking us some breakfast. By the time we were eating, Dawn was coming down the stairs naked.\n\n\"Did you two fall asleep down there?\" Dawn asked.\n\n\"Nope,\" I said.\n\n\"Where did Joe end up?\" Katrina asked.\n\n\"I think he finally went to bed with Deb.\"\n\nDawn got a plate and some food and sat at the bar with us.\n\n\"Sondra was looking for you last night,\" Dawn said.\n\n\"I'll catch up with her. Who did you sleep with?\"\n\n\"Joseph and Angie.\"\n\n\"What about Brian?\" I asked.\n\n\"Last time I saw him, he was fucking Pamela.\"\n\n\"I saw Linda and Rachel go upstairs with Ian and his wife after dinner.\"\n\n\"I don't know where she and Rachel spent the night,\" Dawn said.\n\nAfter we ate, Dawn and I cleaned up while Katrina headed toward the stairs.\n\n\"Katrina, if you need to sleep, go in our bedroom,\" Dawn said.\n\n\"Why were you two down there all night?\" Dawn asked.\n\nI told Dawn about some of the things Katrina had done.\n\n\"It will be a few hours before everyone starts getting up,\" Dawn said. \"Come with me.\"\n\nDawn took my hand and led me out to the pool. It was a bit cold until we got in the warm water. Dawn put her arms around my neck and jumped up, and wrapped her legs around my waist.\n\n\"Did you have a good time?\" I asked.\n\n\"Yes. I watched Hannah's husband fuck several people. I talked Brian into fucking me so everyone could watch.\"\n\n\"Who else?\"\n\n\"Ian's secretary and I put on a good show.\"\n\n\"Where are the girls?\" I asked.\n\n\"They went to bed with Hannah's husband.\"\n\nDawn kissed me for a few minutes, then she found my cock and started it in her pussy. I held Dawn close while she pulled my cock into her using her legs.\n\nThe sun was just starting to come up as I held Dawn.\n\n\"There you two are?\" We heard Angie say.\n\nWe looked, and she was wearing a long robe and standing at the side of the pool.\n\n\"How was your night?\" Dawn asked.\n\n\"Wonderful!\"\n\n\"Did you leave him in bed alone?\" I asked.\n\n\"His wife came in and woke us up. He was fucking her hard when I left. Your friend that is pregnant...is she fun?\"\n\n\"Elizabeth is a lot of fun,\" Dawn said.\n\n\"I want to see if Brian will do her. I want to make sure he doesn't have any issues with pregnant women,\" Angie said.\n\n\"We better start breakfast,\" Dawn said and slid off of me.\n\nThe three of us went inside to the kitchen. John and Carol were coming down the stairs.\n\n\"Good morning,\" Carol said.\n\n\"Good morning,\" I replied.\n\n\"I am going to start cooking,\" Dawn said.\n\n\"I'll help,\" Carol said.\n\nI started the coffee and sat down at the bar with Angie.\n\n\"Everything okay?\" I asked her.\n\n\"It was for me. I hope Brian is okay with all this,\" Angie said.\n\n\"I'm sure he will be. I want to watch you and Deb.\"\n\n\"Hmm. Maybe.\"\n\n\"I also want to get Brian to fuck Deb.\"\n\n\"I don't know about that.\"\n\nGrace came down with Keith and Elizabeth laughing and sat at the bar with us. Grace's hair was wet from a shower.\n\n\"I looked for you last night,\" Grace said to me.\n\n\"I had someone to take care of.\"\n\n\"All night?\"\n\n\"All night.\"\n\n\"Maybe you can take care of me...all morning,\" Grace said with a wicked smile.\n\n\"We can do that.\"\n\nEveryone was showing up since they smelled breakfast cooking. Rachel sat next to me.\n\n\"Did you and Linda have a good time last night?\"\n\n\"Oh, yes. Linda is bummed because the guys have to wear condoms, and she wants to fuck the guy with the huge cock.\"\n\n\"How about you?\"\n\n\"Me too, but he said he did have any condoms.\"\n\n\"If you will go in our bedroom, on my side of the bed, there is an assortment of sizes I picked up for this weekend. There are some big enough for him,\" I told Rachel.\n\n\"Great!\"\n\n\"Get what you need and take them to your bedroom.\"\n\nRachel got up and went to Linda and said something. Linda looked at me and winked.\n\n\"James. Who is the tall, gorgeous blonde you are so chummy with?\" Grace asked.\n\n\"Her name is Linda Williams. Rachel is her lover.\"\n\n\"Damn, she is hot.\"\n\n\"Yes, she is. You need to know that Linda is probably the richest woman in the country.\"\n\n\"Really?\"\n\n\"Yes. She owns a lot of big companies and other things around the world. Her parents and grandparents grew the companies, and she inherited all of it recently.\"\n\n\"Was she ever married?\"\n\n\"Once. He was a jerk. Make sure you introduce yourself this weekend. She is a nice lady to know. Rachel is not only her lover, she is her personal bodyguard.\"\n\n\"Oh, I hope I can do more than introduce myself.\"\n\n\"That's what I meant.\"\n\nEveryone talked for a while then we all had breakfast. More talking and laughing for a while, then everyone cleaned up. Grace came over to me.\n\n\"Is now a good time?\" She asked with a smile.\n\n\"A perfect time.\"\n\nI took her hand and led her up to our bedroom. Grace crawled on the bed and looked at me, and smiled.\n\n\"Your three ladies said you are very good at eating pussy.\"\n\n\"They seem to think so.\"\n\nI got on the bed and moved between Grace's legs as she spread them. I took some time rubbing her legs and kissing my way up each one. When I got to her pussy she was dripping wet. I slowly licked up the length of it a few times.\n\n\"Oh yes...\"\n\nI took my time and licked and kissed her pussy until she was starting to squirm. I grabbed her knees and pulled her legs up and spread them wide, then placed my mouth over her pussy.\n\n\"Oh...yes!\"\n\nI worked on her pussy slowly with my tongue. When I would look up at her, she was watching me closely. I slowly slid several fingers deep into her pussy.\n\n\"Ohhhhhh! Yes!!\"\n\nGrace lay there and let me please her for a long time. She had several huge orgasms as I worked slowly on her pussy.\n\n\"Oh, fuck!!\" Grace cried out and thrust her pussy up into my mouth as gushed several times. \"Ahhhhhhh!!!\"\n\nWhen she collapsed back onto the bed, I took my mouth off her pussy and looked up at her as I slowly rubbed her stomach.\n\n\"Oh, shit! They're right!\"\n\n\"Is that all you want?\" I asked.\n\n\"For now! My turn!\"\n\nI crawled over her body and kissed her nipples a few times, then kissed her. She pushed me over onto my back. Grace moved to the end of the bed and crawled between my legs and looked up at me, and smiled. She wrapped her hand around my cock and stroked it for a few minutes, then slid her mouth over it and went to work.\n\nGrace was like Dawn. She knew how to suck a cock. She worked her mouth up and down slowly as she took plenty of time. I was propped up so I could watch her. Grace looked up at me as she worked her mouth and kept watching me. She had that look like she was thoroughly enjoying what she was doing. One thing I always found very hot was a woman that would look at me while she sucked my cock. She sucked on my cock for a long time before she took her mouth off and smiled at me.\n\n\"James, you may have a problem now.\"\n\n\"What?\"\n\n\"I may not move out!\"\n\n\"Grace, you are welcome to come to the house anytime you wish.\"\n\n\"Really?\"\n\n\"Yes. All of our friends know how to get in the house, and we have told them to come by when they want.\"\n\n\"Do they?\"\n\n\"Sure. Sometimes the ladies come by and do the girls or me, sometimes the guys come by and do Dawn and the girls.\"\n\n\"And you are okay with that?\"\n\n\"Grace, if I wasn't and they weren't, you wouldn't be here. Our friends know it is okay, and now you do.\"\n\n\"Wow.\"\n\n\"While you are living here if any of them come by, you are welcome to join.\"\n\n\"You'll have to tell me more about this.\"\n\n\"Later. I want to watch you suck my cock right now.\"\n\nGrace smiled and went back to work. She kept looking up at me as she took her time. She was slowly stroking my cock with one hand as she worked her mouth up and down. She really was a confident woman. I lay there and enjoyed watching her.\n\nGrace got up on her hands and knees and slid her mouth over my cock as I watched. She slowly worked all of it down her throat and back up repeatedly for a long time. She was one lady that really enjoyed sucking a cock. She slid her mouth off and sat up as she stroked my cock.\n\n\"I haven't had the pleasure of enjoying a big cock like yours for a while.\"\n\n\"I'll have to change that.\"\n\n\"James...I have been sucking your cock for an hour. Are you enjoying it?\"\n\n\"Immensely. You are very hot doing it. And, I like it that you enjoy what you are doing.\"\n\n\"I do. I have always enjoyed sucking cocks...for guys that appreciated it at least.\"\n\n\"Oh, I appreciate it, Grace!\" I exclaimed, and we laughed. \"I hope whoever you spent the night with did too.\"\n\n\"John and Keith really seem to enjoy it!\"\n\n\"Just the two of them?\"\n\n\"All night.\"\n\nGrace smiled at me as she stroked my cock for a bit, then she went back to deep throating me. I was watching her when I saw Dawn look in the bedroom. She smiled at me and walked away. Grace sped up. I watched her for a few more minutes then started thrusting up into her mouth.\n\n\"Emmmmmm!!\"\n\nGrace worked harder on my cock.\n\n\"Emmmmmm!!!\"\n\nShe slid all of my cock down her throat, and I let go and starting pumping cum down her throat. She held it there for a bit then slid her mouth up so I could fill it up.\n\n\"Emmmm!\"\n\nGrace slowly worked her mouth on my cock while she stroked it, getting all my cum out before she slid her mouth off.\n\n\"Emmm. That was very good.\"\n\n\"Yes, it was,\" I told her.\n\nGrace smiled then began crawling over me until she got to my chest. I slid my arms between her legs and pulled her the rest of the way up and over my mouth.\n\n\"I like it this way so much,\" she said.\n\n\"I do too.\"\n\nI slowly licked her wet pussy as she looked down at me. After a few minutes, she lowered her pussy down to my mouth, and I slid my tongue deep into her.\n\n\"Ahhhhhh...yes...that's it.\"\n\nGrace grabbed her tits as I worked my tongue in her for some time while she moaned.\n\n\"Oh, James!\" She cried out, then jerked.\n\nGrace filled my mouth with her tasty juices.\n\n\"Ohh...fuck!\"\n\nShe looked down at me as I kept working on her pussy.\n\n\"Wow! I don't think I have ever felt so horny from a guy eating me.\"\n\nI wanted to laugh, but I kept going. Grace had the luxury of me being able to get her aroused.\n\nShe watched me for a long time until she had another huge orgasm.\n\n\"Ohh!! Fuck!! Yes!! Yes!! Yeessss!!!\" She screamed as she jerked for a few minutes.\n\n\"Oh, shit!\" She said and pushed herself up onto her knees.\n\nShe looked at me as she panted.\n\n\"Damn...you eat pussy as well as your wife does.\"\n\n\"She taught me everything I know!\"\n\nShe smiled.\n\nGrace finally caught her breath, and I put my hands on her ass and pulled her down some. I found her swollen clit with the end of my tongue.\n\n\"Oh no!\"\n\nGrace closed her eyes while I worked on her clit with my tongue. She lowered her pussy down more, and I kept going.\n\n\"Oh...my...yes!\"\n\nShe was squeezing her tits again as I looked up at her. I reached up and took her hands and pulled them down to her pussy. I used her fingers to spread her pussy lips wide.\n\n\"Oh my! Really!\"\n\nWe held her pussy lips apart, and she leaned over a little so she could watch me tongue her clit. She didn't know it, but I was pushing her toward another huge orgasm.\n\nShe dripped on me as I tongued her clit for a while.\n\n\"Ohhhh...yes...that's it...\"\n\nI could feel her body slowly beginning to tremble a little.\n\n\"Ahhhhhhh...\"\n\nI kept pushing her energy and tonguing her clit.\n\n\"Ohhh! Ohhh! Ohh!!\"\n\nGrace was shaking now. I was holding her back a little, and she was about to come hard.\n\n\"I'm going to come!!!\" She screamed.\n\nI grabbed her energy and held her orgasm at its peak, then pulled her forward and placed my mouth over her clit.\n\n\"Ahhhhhhhhh!!!\" Grace screamed as she shook harder. \"Fuuuuuuck!! Fuuuuuck!!!\"\n\nGrace felt good as I held her while she screamed a few more times. I was having some fun with her clit as she jerked over and over.\n\n\"Jaaaaaaammmmmeesssss!!!\"\n\nGrace kept repeatedly jerking as she screamed. I sucked on her clit hard and gave it a gentle bite, and let her orgasm go.\n\n\"Ahhhhhhhhhh!!!\"\n\nGrace shook real hard and started gushing in my mouth.\n\n\"Fuuuck!!!\"",
        "She would thrust her pussy into my mouth and gush again as I sucked it all up.\n\n\"Fuuck...\" came from her, and she went a little limp.\n\nI slid my hands up under her arms and held her up. She opened her eyes and looked at me.\n\n\"What?\"\n\nI pulled my legs up and leaned her back against them. She was spent as I looked at her for a few minutes.\n\n\"Okay...that's not normal...\" she mumbled as she looked at me.\n\n\"What do you mean?\"\n\n\"I mean...I have never...come like that before...from anyone eating me.\"\n\n\"Well, Dawn told you I was good.\"\n\n\"James...your wife made me come harder than I have ever come...until now. What...did you do to me?\"\n\n\"I just wanted to make sure you got off.\"\n\n\"Oh no...I always get off. That was not getting off. That was something...completely different. Geez, I have never had an orgasm...orgasms...like that.\"\n\n\"Good. Now you will come back.\"\n\n\"Come back! I want to live here!\"\n\n\"Sorry, I already have three wives.\"\n\n\"I see why...and they are so lucky. Fuck. I think I had an orgasm for...several minutes.\"\n\n\"You probably did,\" we heard Dawn say.\n\nShe walked up and sat on the edge of the bed.\n\n\"Dawn...does he make you come like that all the time?\" Grace asked.\n\n\"Most of the time...but I usually come harder.\"\n\n\"I can't see how.\"\n\nDawn smiled at her.\n\n\"What are you doing?\" I asked Dawn.\n\n\"Watching mostly.\"\n\n\"Well, you can watch us,\" I replied.\n\nI pulled Grace up and put my legs down. She grabbed my hard cock and moved back and worked it into her pussy, and slid down.\n\n\"Emmmm...you are so lucky, Dawn.\"\n\n\"I am. But, I get off no matter what man is fucking me.\"\n\n\"You have to get off more with your husband.\"\n\n\"Oh, I do.\"\n\n\"Dawn...does he always eat pussy like that?\"\n\n\"James is the rare man that thoroughly enjoys eating pussy. He has always let me tell him what I like best.\"\n\n\"My ex never would listen to me when I would tell him what to do.\"\n\n\"That's the difference, Grace. James wants to please a woman, not just fuck her.\"\n\nGrace worked her pussy on my cock for a few minutes, then Dawn straddled my head, and pushed her pussy down to my mouth. I listened to the two of them talking while they worked.\n\n\"Just take your time and enjoy,\" Dawn told Grace.\n\nI felt Grace expertly working her pussy slowly on my cock. I could feel that Dawn was enjoying watching. It got quiet, and I knew the two of them were playing with each other's tits and kissing. This went on for a long time until I felt Grace come. Then I felt Dawn come. I knew it was from Grace getting off.\n\nDawn lifted her pussy off my mouth and got up, and stood next to the bed. She leaned over and kissed me for a minute, then stood and kissed Grace.\n\n\"You two have fun,\" Dawn said and left the bedroom.\n\nI grabbed Grace's tits and squeezed them while she worked her pussy.\n\n\"You two are so different,\" she said.\n\n\"Four.\"\n\n\"Four.\"\n\nGrace sped up and worked her pussy, so she got the feeling from my cock she wanted. I kept playing with her tits for a while.\n\n\"Oh, your cock feels so good inside me.\"\n\n\"It does.\"\n\nGrace sped up more and worked harder at getting off. A few minutes later, she was coming again.\n\n\"Ahhhhh...fuck yes!\"\n\nShe jammed her pussy on my cock hard and had another massive orgasm, then sat.\n\n\"I don't know what it is...but you make me so hot and horny, James.\"\n\n\"Is that good?\"\n\n\"Oh, yes!\" She said and laughed.\n\nI pulled her down to lay on me. I kissed her as I started shoving my cock into her.\n\n\"Emmmmmm...\"\n\nWe kissed for a few more minutes. Then she pushed herself up on her arms as I worked my cock in her pussy faster.\n\n\"Oh my! That feels so good!\"\n\nI thrust into her for a while, and she came again.\n\n\"Oh fuck!!\"\n\nGrace sat up on my cock.\n\n\"If you stay for a while, I'll have someone come over, and we will both fuck you at the same time,\" I said.\n\n\"Oh, my. I tried that once with my husband. I enjoyed it, but he didn't.\"\n\n\"Oh, we would enjoy it.\"\n\n\"I bet you would!\" She said.\n\nGrace went to work bouncing on my cock as I watched. Her tits bounced perfectly as she worked.\n\n\"Oh, yes!! Yes!!\"\n\nGrace was enjoying what she was doing, so I let her keep going for a long time.\n\n\"Ahhhhhh!! I am going to come!! Come in me!!!\"\n\nGrace was jamming her pussy down when she started having another orgasm.\n\n\"Ahhhhhhhhhh!!!\"\n\nI thrust up into her and let go. Grace screamed again as I filled her full of cum, then she fell on top of me.\n\n\"Oh my. That was wonderful, James.\"\n\n\"You did all the work, Grace.\"\n\n\"Yes, but you let me fuck you for a very long time.\"\n\n\"I hope it was long enough.\" Grace laughed then kissed me.\n\n\"There you are,\" I heard Linda say.\n\nGrace looked behind her, and Linda was walking up to the bed.\n\n\"Linda, meet Grace. She is Dr. John's new surgical nurse.\"\n\n\"Hello, Grace.\"\n\n\"Hi.\"\n\nLinda sat on the edge of the bed.\n\n\"Are you having a good time?\" Linda asked Grace.\n\n\"Oh my...yes.\"\n\nGrace rolled off my cock and lay next to me.\n\n\"James does please women well,\" Linda said.\n\n\"He does.\"\n\nLinda moved over me and got on her hands and knees between Grace's legs and spread them. Linda placed her mouth over Grace's pussy and went to work.\n\n\"Oh...wow...\" came from Grace.\n\nI watched for a few minutes, then got up and went to the shower and rinsed off. When I went back to the bedroom, Grace was having an orgasm.\n\n\"Ahhhh...yes! Eat me!!\" Grace screamed.\n\nI grabbed a condom from my table and put it on, then got behind Linda and slid my cock into her.\n\n\"Emmmmm!\" Came from Linda as she worked on Grace.\n\nI worked my cock in Linda while she got Grace off several more times.\n\n\"No more!\" Came from Grace.\n\nLinda pushed herself up as I fucked her. Grace lay there and watched until Linda got off.\n\n\"Oh, fuck, James!!\"\n\nI jammed into her harder as she screamed.\n\n\"Oh, James!! Harder!!\"\n\nI started slamming into Linda.\n\n\"Yes!! Fuck me!!\"\n\nI kept going hard until Linda screamed through another orgasm. She slid down and onto Grace. I followed her down and kept working my cock in her. Linda started sucking on Grace's nipples as I jammed my cock in her.\n\n\"Oh..James...come in my ass...\"\n\nI slid my cock out of her pussy and pulled off the condom, and slid into her ass slowly.\n\n\"Oh yes. I need to feel you come in me.\"\n\nLinda went back to sucking on Grace's nipples while I worked my cock in her ass for a while.\n\n\"Oh, Grace...make sure he does your ass,\" Linda told her.\n\nA few minutes later, Linda started coming hard. I jammed my cock deep into her and pumped cum into her ass.\n\n\"Ahhhhhh!! Your cum is so hot!!\"\n\nAfter I filled Linda full of cum, I rolled off her. She rolled next to Grace.\n\n\"Oh...I needed to feel someone cum in me,\" Linda moaned.\n\nGrace rolled to Linda and began rubbing her tits. I watched them until Grace moved down and started eating Linda. After a few minutes, Linda pulled Grace on top of her. I lay there and watched for a while, then went to shower.\n\nWhen I went back into the bedroom, Grace was sitting on Linda's mouth. I left the two of them to enjoy each other.\n\nI heard laughter from downstairs, so I went down there. Dawn and Katrina were in the kitchen starting lunch. Olivia and Carol were sitting at the bar talking to them. I looked, and Brian had Elizabeth on her knees leaning over the sofa as he worked his cock in her. I was surprised that Deb was on her hands and knees on the floor, sucking Keith's cock as his wife watched. I heard moaning and saw Katrina sitting on the end of the Tantra chair while Angie went down in her. I walked over to Katrina.\n\n\"Having a good time?\" I asked her.\n\n\"Oh yes. Your brother just finished fucking me a while ago.\"\n\n\"Good. I told him to please you.\"\n\n\"He did!\"\n\nI stood and watched Angie for a few minutes, then walked over to watch my sister. She was busy working her mouth up and down on Sam's cock. I got on the floor behind her and grabbed my cock, and slid it into her pussy.\n\n\"Emmmm!\"\n\nI was sure Deb wasn't aware it was me.\n\nSam watched as I worked my cock in Deb.\n\n\"Oh, my,\" came from Deb, and she looked back at me. I smiled at her, and she went back to work.\n\nI worked my cock in Deb slowly until Sam filled her mouth full of cum. She held herself up as I kept going.\n\n\"Hold on a minute,\" Deb said.\n\nShe leaned forward and slid my cock out of her pussy, then stood.\n\n\"Sit,\" she said.\n\nI sat next to Sam, and Deb climbed on my lap and grabbed my cock and worked it back into her pussy, and slid all the way down. I could see Sam and Elizabeth watching as Deb worked her pussy.\n\nDeb fucked my cock nice and hard for a while. Elizabeth came in a big orgasm as Brian filled her full of cum. She turned and sat and watched Deb. There were several people watching us.\n\nDeb fucked me hard until she came, and I filled her pussy full of cum. She smiled at me as everyone in the den watched. I kissed my sister, and she got off my lap. It was just Brian and me sitting on the sofa now.\n\n\"Brian, you and Deb should fuck,\" I said.\n\n\"I'm not sure about that.\"\n\n\"Just do it.\"\n\n*****\n\nAfter we all had lunch, almost everyone was in the pool or hot tubs, having a good time. Sondra came over to me.\n\n\"You have some fun, friends,\" she said.\n\n\"I hope you are having a good time.\"\n\n\"Oh, I have...several times!\"\n\nI felt her grab my cock.\n\n\"But I am still waiting for you,\" she said.\n\n\"Come with me then.\"\n\nI took Sondra's hand and led her out of the pool and into the house, and we dried off. I took her down the hall to one of the bedrooms, and we got on the bed. Sondra sat up and stroked my cock until it was good and hard.\n\n\"Oh, this looks nice,\" she said and leaned over and started sucking my cock.\n\nI grabbed her legs and pulled her over my mouth. The two of us enjoyed each other for a while. Sondra came in several orgasms as I ate her pussy.\n\n\"Oh, that's enough,\" she said and got up and straddled my cock.\n\nShe worked the end into her wet pussy and took her time sliding all the way down.\n\n\"Oh my!\"\n\nSondra began to slowly work her pussy. I looked her body over as she took her time and squeezed her tits while she got off.\n\n\"Oh fuck!\" She exclaimed as she sat on my cock.\n\nI reached up and pulled her down on top of me, then rolled her onto her back with my cock in her.\n\n\"Oh!\"\n\nI pushed myself up and pulled her legs up and spread them, and pushed my cock in deep.\n\n\"James...fuck me...fuck me hard, please.\"\n\nI did. I fucked Sondra hard until she was about to have her fourth orgasm.\n\n\"Oh, yes!! Fuck me, James!! Fuck me and come in me!!!\"\n\nI slammed into her as she screamed. Then I jammed my cock in hard and let go.\n\n\"Ahhh! Yes!! Yes!! Fill me full of cum!!!\"\n\nAfter I stopped coming, I laid on top of her and kissed and sucked her nipples.\n\n\"Damn, James. That was wonderful.\"\n\n\"Yes, it was. Have you been having a lot of fun?\"\n\n\"Yes. Linda and Rachel slept with Ian and me last night...well...we didn't sleep. Ian had a great time fucking the two of them. Rachel and Linda went down on me while Ian watched...we had a good time. Ian really enjoyed doing Linda.\"\n\n\"Good. I am glad you are having a good time.\"\n\n\"I am. I haven't seen Ian today, though.\"\n\n\"I can find him.\"\n\nI opened the drawer next to the bed and got out a remote, and turned the TV on the wall.\n\n\"What's this?\" Sondra asked.\n\n\"You'll see.\"\n\nI scrolled through all the empty bedrooms.\n\n\"James? Do you have cameras all over the house?\"\n\n\"Sure do.\"\n\nI pulled up Samantha's room and found Ian. Samantha was watching as he fucked Angie.\n\n\"Who is he fucking?\"\n\n\"My sister-in-law.\"\n\n\"Do other people know about the cameras?\"\n\n\"The people that have been here before do. Don't worry, the recordings all stay here...unless you want one.\"\n\n\"Oh...did you get a recording just now?\"\n\n\"Sure did.\"\n\n\"Can you make me a copy?\"\n\n\"No problem.\"\n\nWe watched Ian fuck Angie until she was screaming through an orgasm. Ian filled her full of cum and rolled off her. Samantha laid on top of Angie and started eating her pussy. Soon the two of them were in a nice 69 as Ian watched.\n\n\"You are going to have to tell me about having two extra wives, James,\" Sondra said.\n\n\"I will the next time you come over.\"\n\n\"Okay.\"\n\n\"Sondra, would Ian let you come here without him?\"\n\n\"For sex?\"\n\n\"Of course.\"\n\n\"Maybe.\"\n\n\"You should come and stay the night with us.\"\n\n\"I'll ask him. He may say yes so he can take his secretary home for the night.\"\n\n\"Are you okay with that?\"\n\n\"Yes. She stays with us on the weekends occasionally.\"\n\nI scrolled through more rooms and saw Keith and Sam in the kitchen getting a beer.\n\n\"Stay right here,\" I told Sondra.\n\nI got up and went to the kitchen.\n\n\"What are you two doing?\" I asked.\n\n\"Nothing, right now,\" Sam said.\n\n\"Good. I have someone I want you two to fuck at the same time.\"\n\n\"Great!\" Came from Keith.\n\n\"Come with me. Her name is Sondra.\"\n\n\"Is she the one with all that long black hair?\" Keith asked.\n\n\"Yep.\"\n\nI walked into the bedroom with Sam and Keith.\n\n\"Sondra, I'll check on you later,\" I told her and left.\n\nI went to the kitchen, and Dawn was putting something in the fridge. I sat down at the bar.\n\n\"Are you having a good time?\" I asked Dawn.\n\n\"Yes, I am,\" Dawn said as she sat across from me. \"What did you think of Grace?\"\n\n\"Oh...wow. She really knows how to give head.\"\n\n\"That she does. I get the feeling from her that she really enjoys both going down on a woman and being gone down on.\"\n\n\"That's odd?\"\n\n\"Why?\"\n\n\"I had a similar feeling from her. She really seemed to enjoy sucking my cock and fucking it.\"\n\n\"I told you she is very confident.\"\n\n\"It was more than that,\" I said. \"She seems to enjoy sucking my cock.\"\n\n\"Oh, she did something you really like. What was it?\" Dawn asked.\n\n\"When she was sucking my cock...she was between my legs working her mouth on me...\"\n\n\"And?\"\n\n\"She took her time and just enjoyed it.\"\n\n\"And what else? She did something you like.\"\n\n\"She looked up at me most the time as she sucked my cock.\"\n\n\"Oh!\" Dawn knew I enjoyed that.\n\nDawn leaned over and kissed me.\n\n\"Don't leave anyone out,\" she said and got up.\n\n*****\n\nLater, I was sitting on the sofa talking to Hannah. Ryan was on her other side. We talked while Angie was fucking Ian and Brian was fucking Sondra on the other sofa.\n\n\"This is pretty...interesting,\" Hannah said.\n\n\"We like to have some fun occasionally. I hope you two are enjoying things.\"\n\n\"Oh, we are. Amy and I had some fun while Ryan went down on Samantha.\"\n\n\"Good. Did Angie tell you they are my other wives?\"\n\n\"She mentioned it.\"\n\nDawn came and sat down next to me.\n\n\"Dawn...I need to ask you something?\" Hannah said.\n\n\"What is that?\"\n\n\"Emmm...if I want to fuck your husband...do I need to ask you first?\"\n\n\"No. Do I need to ask you if I can fuck yours?\"\n\n\"No...of course not.\"\n\n\"Good.\"\n\nHannah smiled then started stroking my cock as we watched.\n\n\"Ryan, I sure hope you can fuck me for a very long time,\" Dawn said.\n\n\"Oh, I hope so too.\"\n\nDawn got up and sat in Ryan's lap and began stroking his big cock. Hannah looked back at Dawn and smiled, then went back to stroking my cock. After a few minutes, Hannah was lying facedown in my lap, deep throating me.\n\nI watched Hannah working her mouth up and down and watched Dawn as she pumped Ryan's cock with both hands wrapped around it. Ryan had a lot of cock left with both of Dawn's hands working up and down on it.\n\nI let Hannah work on my cock for a while. Dawn got on the floor between Ryan's legs and slid her mouth over his cock. Ryan watched her as she took her time. He inhaled sharply when Dawn slowly slid all of his cock down her throat.\n\nHannah sucked my cock for about 30 minutes as I watched Dawn. I found watching her suck on a huge cock slowly pretty hot. The next time Hannah slid all of my cock down her throat, I let go and pumped cum into her for a long time.\n\n\"Emmm, that was good,\" Hannah said as she sat up.\n\nThe two of us watched as Dawn slowly slid Ryan's cock in and out of her mouth.\n\nI got on the floor between Hannah's legs and pulled them apart, and pulled her pussy to the edge of the sofa. I began kissing and licking on her pussy. Hannah leaned back on the sofa and let me please her for a long time. She came several times as I pushed her to another orgasm. I knew from what I could feel from Dawn she was driving Ryan crazy by not letting him come. I could hear him moan in frustration every few minutes.\n\n\"Oh, fuck!!\" Came from Hannah, and she gushed again and pulled my head off her pussy.\n\nI looked up at her.\n\n\"I need you to fuck me,\" Hannah said.\n\nI stood and pulled her up from the sofa and sat down. She straddled my legs and grabbed my hard cock and worked it into her pussy, and slid all the way down.\n\n\"Emmm...I am so hot and horny...\"\n\nHannah began to work her pussy slowly on my cock.\n\n\"Ahhhh!!\" Ryan cried out and began thrusting up into Dawn's mouth over and over as he groaned. \"Oh, fuck!\"\n\nHe thrust into Dawn's mouth and came over and over as Dawn sucked all of his cum out, then slid her mouth off and looked up at him.\n\n\"Oh, wow...what did you do to me?\" Ryan asked Dawn. \"I have never come like that.\"\n\n\"Oh, I just have some experience sucking big cocks.\"\n\n\"You must. That was great.\"\n\n\"Then you will really enjoy this part,\" Dawn said.\n\nDawn stood and straddled Ryan's legs. His cock was still hard. I was sure Dawn was going to have some fun with him. She pushed herself up and placed the end of his big cock on her pussy, and began pushing.\n\nHannah worked her pussy slowly as she watched Dawn work her husband's cock into her. Dawn slowly worked up and down as his cock disappeared into her while she was biting her lip as she forced her pussy down.\n\n\"Emmmmm...that feels good,\" Dawn said.\n\n\"It does, doesn't it,\" Hannah said.\n\nDawn looked over at her and smiled.\n\n\"It has been fun fucking Brian and now James since they both have big cocks,\" Hannah said.\n\nDawn settled on his big cock as Ryan began playing with her tits. Dawn sat and let Ryan play and suck on her tits for a while. Hannah was still slowly working her pussy on my cock.\n\n\"Dawn, I love your skin and your tan,\" Hannah said.\n\n\"My skin is naturally a little dark. I am half Cherokee.\"\n\n\"You look beautiful, and I love all your long hair.\"\n\nDawn had pulled his head onto her tits as he sucked her nipples. She would smile at me and wink. Later, she began to work her pussy on Ryan's cock, taking her time. He was watching her and still squeezing her tits.\n\n\"Dawn, I love your tits. You have some gorgeous nipples,\" Ryan said.\n\nDawn and Hannah worked slowly for a while. I started fingering Hannah's clit as she worked.\n\n\"Emmmm, that feels good,\" she said.\n\nDawn was working her pussy in very deliberate and long movements. Ryan was caught up in watching her. Hannah was working her pussy faster now as she built to an orgasm.\n\n\"Ohhhh...I am going to come!\" Hannah exclaimed.\n\nShe worked her pussy faster until she started coming.\n\n\"Ahhhhhh!! I'm coming!! I'm coming!!\"\n\nHannah jerked hard and jammed her pussy on my cock hard.\n\n\"Ahhhhhhh!!\"\n\nShe started gushing as she cried out. Ryan was looking at her as she got off.\n\n\"Oh, fuck...\" Hannah moaned.\n\nShe stopped and sat on my cock for a minute.\n\n\"Oh...my...that was great.\"\n\n\"Keep going until you get off as much as you want,\" I told her.\n\n\"Oh, I am going too!\"\n\nShe began to work her pussy again. Dawn had sped up and was working Ryan's big cock in her faster. I looked between her legs and watched as his big cock pulled and stretched her pussy as it slid in and out. I could feel Dawn was having a good time.\n\nI grabbed Hannah's tits and squeezed on them, and sucked on her nipples for a while. Ryan may like Dawn's nipples, but Hannah had some large eraser size ones. She was going strong on my cock.",
        "Since Dawn was next to me, I could feel her energy, and it was helping me feel Hannah's. Hannah felt good. What Hannah didn't know was that she was going to be coming for a long time once she started.\n\n\"Ryan, did you enjoy fucking Angie?\" Dawn asked.\n\n\"Oh...sure...\"\n\n\"James loves fucking her.\"\n\n\"He does?\"\n\n\"Oh, yes. I like fucking Brian also while I watch them fuck. It's hot.\"\n\n\"I bet it is,\" Ryan said.\n\n\"Dawn? How long have you been doing your brother-in-law?\" Hannah asked.\n\n\"A while.\"\n\n\"Wow. I wish my sister would let me fuck her husband.\"\n\n\"Have you asked?\" Dawn said.\n\n\"Well...no.\"\n\n\"Maybe you should just ask. Have you and your sister ever done each other?\"\n\n\"Well...\"\n\n\"Yes or no?\"\n\n\"I have...we have.\"\n\n\"I'm sure Ryan and your brother-in-law would enjoy watching you and your sister,\" Dawn said as she worked.\n\n\"Oh...well...\"\n\n\"Your bother-in-law doesn't know?\" I asked.\n\n\"Well...no...\"\n\n\"They would enjoy watching you two,\" Dawn said.\n\n\"I know I would,\" Ryan said.\n\n\"Ryan, you should spend the night with Amy and Samantha,\" Dawn said. \"You know they are sisters?\"\n\n\"They are?\"\n\n\"Yes, they are.\"\n\n\"And they...\"\n\n\"Yes, they do,\" Dawn said.\n\n\"I'll have to spend the night with them!\"\n\nDawn and Hannah started working their pussy harder. I watched as Hannah worked hard to get off again.\n\nAfter about 20 minutes, Hannah had grown frantic, needing to get off. She was driving her pussy onto my cock.\n\n\"Ohhhh...fuck...yes...oh fuck...yes!\" Came from Hannah as she sped up more.\n\nRyan was watching his wife working hard to get off. Dawn looked at me and winked.\n\nI grabbed Hannah's ass and pulled her onto my cock hard each time she would drive her pussy down.\n\n\"Ohhhhhhhh!!\" Came from Hannah.\n\nShe was thrusting harder, and I was jamming her pussy onto my cock as Ryan watched while Dawn worked on his cock.\n\n\"Fuuuuuck!! I'm going to come!!\" Hannah screamed.\n\n\"No, you're not,\" I thought as I felt for her orgasm as it built.\n\nHannah kept crying out as she built. She was working her pussy as hard as she could so she could get off. I had her ass in my hands and was connected to her energy.\n\n\"Fuuuuuck...me!!\" Hannah let out.\n\nShe kept trying to get off as her orgasm slowly built and built as I controlled it.\n\n\"Fuck!! Fuck!! Fuck!!\"\n\nHannah's orgasm was building, and she was beginning to tremble as she worked. I kept pulling her onto my cock. Her pussy tightened up, and I knew she was about to explode. I let her grow to the point she was going to explode. She was faltering as she worked her pussy and was shaking. I waited and waited, then grabbed her energy and held it.\n\n\"Ahhhhhhhhhhhhhhh!!!\" Came from Hannah as she stopped working her pussy and sat on my cock and shook.\n\nI held her at the peak of her orgasms. I could feel all the muscles in her body contracting over and over as she shook.\n\n\"Ahh...ahh...ahh...\" kept coming from her.\n\nRyan was watching his wife as she kept shaking. I could feel her sexual energy running through her like electricity. Her body had tensed up as she trembled hard.\n\n\"...ahhhhhhh...\" was all that came from her.\n\nI held her at that point as I watched her, then I heard Dawn say \"stop\" in my head. I let Hannah go.\n\n\"Ahhhhhhhhh!!! Fuck!!! Fuck!!! Fuuuuuuuuuck!!!\" Hannah kept screaming as she jerked, and her pussy gushed over and over.\n\n\"Ahhhhh!!!\" Hannah screamed again and starting coming harder.\n\nI pulled her onto my cock hard and let go.\n\n\"Ohhhh...fuuuuck!!!\" She screamed as she came while I pumped cum into her.\n\nShe finally collapsed and fell into me. I held her as Dawn smiled at me.\n\nHannah was breathing hard as Dawn sped up. I could feel that Dawn was pushing Ryan hard. She was going to drive him to a huge orgasm also.\n\nI held Hannah as I watched Dawn. She was working her pussy in long hard strokes as Ryan watched her. Dawn closed her eyes and enjoyed as Ryan moaned.\n\nA while later, Hannah managed to sit up and look at me.\n\n\"Wow...I have never come like that,\" she said.\n\n\"I hope you enjoyed it,\" I said.\n\n\"Oh, my...yes. You'll have to fuck me again later.\"\n\n\"I would like that.\"\n\nI heard Ryan groan, and we looked over at him. He was holding Dawn's ass as she worked her pussy faster on his cock. I was enjoying watching his huge cock slide in and out of my wife.\n\n\"Ahhhhh...\" came from Ryan as he looked at Dawn's hot body as she fucked him.\n\nDawn kept going as Ryan struggled.\n\n\"Oh, I'm going to come, come for me, Ryan,\" Dawn said to him.\n\nA look of relief seemed to come over his face. Dawn kept going for a few minutes.\n\n\"I'm going to come!! Come in me, Ryan!!\" Dawn cried out.\n\nHe began trying to thrust up into Dawn, anything I was sure to come.\n\n\"Ahhhhhhhh!!!\" Came from Dawn, and she jerked and gushed on his cock.\n\n\"Come in me, Ryan!!\"\n\nDawn was working her pussy even harder.\n\n\"Oh god!!\" Ryan cried out as he kept trying to thrust up into Dawn.\n\n\"Fuck!! I'm coming again!! Come in me, Ryan, come in me!!\" Dawn was teasing him.\n\n\"Ahhhhhhhhh...\" came from Ryan.\n\nDawn kept going.\n\n\"Oh, yes!! Yes!! Come in me now!!\" Dawn cried out.\n\nI felt Dawn release him as she started coming even harder.\n\n\"Ahhhhh!!! Fuck!!!\" Ryan screamed.\n\nDawn screamed, and everyone in the room was watching poor Ryan thrust up into her.\n\n\"Fuuuuuuuuuuck!!!\" Came from Ryan as he started coming finally.\n\nHe thrust up into Dawn for a long time as he kept coming.\n\nI looked between Dawn's legs, and even as tight as he was in her, I saw cum squirting out as he kept filling her.\n\n\"Oh, my, god!!\" Ryan cried out.\n\nThe two of them jerked hard for a few minutes then Dawn fell against him. It was quiet in the den.\n\nAfter about 10 minutes, Dawn sat up. Ryan was just trying to catch his breath still as Dawn slid her pussy off his cock and cum ran out of her. Hannah slid off my cock and stood. I got up from the sofa, and she sat down.\n\nDawn looked over at Hannah and smiled. Hannah laid back on the sofa, and Dawn moved and straddled her head. Ryan watched while I went to the kitchen to get some water.\n\n\"Dawn must have enjoyed his big cock,\" Deb said when she walked up.\n\n\"I'm sure she did. You'll have to try it.\"\n\n\"I plan on it. His wife seemed to have gotten off pretty nicely.\"\n\n\"I guess you want to get off like that now,\" I teased Deb.\n\n\"Please!\"\n\n\"Later. I want everyone to watch.\"\n\n\"Pervert!\"\n\nI walked back to the den. Dawn and Hannah were in a 69 now, and Ryan was watching.\n\n*****\n\nI was sitting with Deb in my study talking to her when Angie walked in.\n\n\"Dawn said you were in here,\" Angie said. She sat next to Deb.\n\n\"I need a shower,\" Deb said.\n\n\"Me too,\" came from Angie.\n\n\"You two come with me,\" I said and stood.\n\nI led them up to our bedroom and into the bathroom. The three of us took some time showering and having some fun. We all dried off and walked out. I sat on the edge of the bed.\n\n\"I want to watch you two,\" I said.\n\n\"Oh, I don't know about that, James,\" Angie said.\n\n\"Come on, Angie,\" Deb said as she crawled up on the bed.\n\nAngie hesitated, then smiled and got on the bed. Deb rolled her onto her back and got between her legs, and started eating her. I watched Angie as she enjoyed my sister. Angie got off several times. Then they swapped places. I lay there and watched. After Deb came in several huge orgasms, Angie sat up.\n\n\"You two enjoyed that,\" I said.\n\nAngie reached over and grabbed my cock.\n\n\"You did too!\"\n\nAngie slowly stroked my cock for a few minutes.\n\n\"Deb...can I watch?\" Angie asked.\n\n\"What?\" Deb replied.\n\n\"You and James.\"\n\n\"Is that what you want to see?\" Deb asked.\n\n\"Yes...\"\n\nDeb sat up, and Angie moved. Deb got on her hands and knees and started sucking my cock as Angie watched. She kept going for a long time. I watched Angie slide several fingers into her pussy and work them until she came.\n\nDeb sat up and looked at Angie.\n\n\"Your turn,\" Deb said.\n\n\"What?\"\n\n\"Fuck him. You need it,\" Deb said.\n\nAngie moved and climbed on my cock and worked it into her pussy. She did need to be fucked. She worked her pussy for a while as Deb, and I watched. Then Deb climbed over my head and lowered her pussy down to my mouth.\n\n\"Wow...\" I heard come from Angie.\n\nI felt Angie work her pussy harder on my cock as I ate my sister. Deb and Angie both got off several times.\n\n\"Deb...will you swap places with me?\" I heard Angie ask.\n\nDeb moved off my mouth and I watched Angie climb off my cock. Soon, Angie was watching Deb work her pussy on my cock until she got off.\n\n\"Deb...do you want Brian to fuck you?\" Angie asked.\n\n\"I guess. I'm not sure he will.\"\n\n\"I think he might.\"\n\n\"I don't know.\"\n\nDeb rolled off my cock and lay.\n\n\"Let's find out,\" Angie said and got up and left the bedroom.\n\n\"He won't do it,\" Deb said.\n\n\"Don't push him.\"\n\n\"Angie sure enjoyed watching,\" Deb said.\n\n\"You enjoyed her watching...\" We laughed.\n\nA few minutes later, Angie came back into the bedroom with Brian.\n\n\"Just go ahead and do it, honey,\" Angie said to him.\n\n\"So you can watch?\" Brian asked.\n\n\"Yes.\"\n\nAngie left Brian standing at the edge of the bed as she climbed back on top of me and worked my cock back into her pussy.\n\n\"Brain...please...\" Angie moaned.\n\nBrian walked over to the side of the bed Deb was lying on and sat on the edge.\n\n\"Brian, I am okay if you want to do it,\" Deb said.\n\nBrian looked over Deb's naked body. He slowly got up on the bed on his knees between Deb's legs.\n\n\"Honey...eat her first,\" Angie said as she slowly worked her pussy on my cock.\n\nDeb pulled her legs up and spread them. I was surprised that Brian didn't hesitate and laid between them and placed his mouth over our sister's pussy.\n\n\"Oh...wow...\" came from Angie.\n\nShe sped up as she watched her husband eat his sister. I looked at Deb, and she seemed to be enjoying it quite a bit. Angie kept working her pussy as she watched.\n\n\"Oh, eat me...\" Deb moaned.\n\nDeb put her hands on the back of Brian's head and pushed him into her pussy.\n\n\"Ahhhh! Yes!\"\n\nDeb cried out as Brian got her off again. Then Brian moved up quickly and slid his cock into Deb. Angie and I watched as Deb encouraged her brother to fuck her hard. Brian drove his cock into his sister hard for a long time. Deb kept encouraging him to fuck her harder.\n\n\"Oh, Brian! Fuck me!!\"\n\nAngie and I watched. Deb kept screaming as Brian drove his cock into her. He was fucking his sister hard.\n\n\"Yes!!!\"\n\nDeb thrust up to meet Brian, and the two of them came together.\n\n\"That is hotter than I thought it would be,\" Angie said.\n\nBrian was lying on top of his sister as they gasped for air.\n\n\"Brian...honey...did you like that?\" Angie asked.\n\nBrian pushed himself up and sat. He looked over at Angie, then smiled.\n\nAngie went back to work and fuck me hard until we both came.\n\nAngie got off me and laid between Deb's legs, and went to work eating her as Brian watched. I got off the bed and went to the bathroom, and showered off. When I went back to the bedroom, Brian was behind Angie working his cock in her while she went down on Deb.\n\nI walked back to the den and saw Dawn talking to Joseph while they sat at the bar. I walked over and sat down with them.\n\n\"James...Pamela is very happy,\" Joseph said.\n\n\"Great.\"\n\n\"Joseph was just telling me how much money we have made,\" Dawn said.\n\n\"Don't spend it all,\" I replied.\n\n\"Have you talked to him?\" Dawn asked.\n\n\"Not yet.\"\n\n\"It's a lot,\" Dawn said.\n\nJoseph told us how much we had made so far with the collapse of the housing market. I had doubted him on how much money we could make, but it appeared he was right.\n\nIt was late now, and people began showing up, so Dawn and I got out the food.\n\n*****\n\nAfter everyone had something to eat and some drinks, they were all sitting around the den talking and laughing. I was helping Dawn put the last of things away.\n\n\"Have you been having some fun?\" I asked Dawn.\n\n\"I have. I have been enjoying walking around and watching everyone.\"\n\n\"Are you not joining them?\"\n\n\"Occasionally, but I am having a good time just watching.\"\n\nI wrapped my arms around Dawn and held her for a minute.\n\n\"Brian finally did Deb,\" I said.\n\n\"He did!\"\n\n\"Yes, and he seemed to have enjoyed it.\"\n\n\"Well, good,\" Dawn said. \"I'll go and talk to him and Angie.\"\n\nI picked up my glass of wine and looked at everyone. Samantha came up to me and put her arm around my waist.\n\n\"What have you been doing?\" I asked.\n\n\"Let's see...John...Keith...Ian...\"\n\n\"I get it.\"\n\n\"Hannah asked me to spend the night with her husband.\"\n\n\"Why don't you and your sister join them.\"\n\n\"Sounds like a good idea.\"\n\nI leaned down and kissed Samantha, and she walked off toward Joseph and his wife.\n\nI walked around the den and talked to everyone as they were beginning to pair up and head to bedrooms for the evening. Linda and Rachel were sitting by themselves and talking, so I went to them.\n\n\"Don't tell me you can't find someone to sleep with you two,\" I said.\n\n\"I'm sure we can...but we are heading up to our bedroom. Do you want to join us?\" Linda asked.\n\n\"Sure.\"\n\nThe three of us got up and went upstairs to their room. Linda and Rachel crawled up on the bed, and I got between them.\n\n\"Have you had fun?\" I asked.\n\n\"Yes, we have. Your new friend, Grace, is a lot of fun.\"\n\n\"Yes, she was.\"\n\n\"James...did you get your brother to do your sister?\" Rachel asked.\n\n\"Finally.\"\n\n\"That's good.\"\n\n\"I'm glad he finally did it. I was worried about taking them to Hawaii if he wasn't going to do it.\"\n\n\"Are all of you still planning on being gone for June?\" Linda asked.\n\n\"Yes. Our parents will be with us for the whole month. Brian and Angie will probably come for two weeks. We are still waiting to see if Deb and her husband can stay for one or two weeks.\"\n\n\"We may have to fly over and visit you,\" Linda said.\n\n\"If you do, you have to let my dad and Dawn's dad do you two.\"\n\n\"I'm sure we could work that out,\" Linda replied.\n\n\"When are they starting on your house?\"\n\n\"This coming week. I...still need to talk to Dawn.\"\n\n\"About what?\"\n\n\"James...I told you I have concerns about living next to you.\"\n\n\"Linda, you can talk to Dawn...but I am telling you not to worry about it.\"\n\n\"I don't know.\"\n\n\"Rachel, will you have any problems with Linda and me having sex all the time when you live next door?\" I asked.\n\n\"Of course not...\"\n\n\"Not all the time!\" Linda exclaimed, then laughed.\n\nLinda and I kept talking, but Rachel started stroking my cock slowly.\n\n\"Get up there, honey, so I can watch,\" Linda said.\n\nRachel climbed on top of me and worked my cock into her pussy.\n\n\"Don't come in me,\" Rachel said with a smile.\n\nLinda rolled close to me and watched Rachel as she worked her pussy on my cock for a long time until she got off several times.\n\n\"I have had some great sex this weekend...but you always make me so horny, James,\" Rachel said.\n\n\"I hope that pleases you.\"\n\n\"Oh, it does!\"\n\nRachel slid my cock from her pussy and sat on top of my thighs. She wrapped her hands around my cock and started pumping it.\n\n\"Come for me,\" Rachel said.\n\nShe kept stroking my cock hard and fast as Linda and I watched. When she knew I was about to come, she aimed my cock at her stomach and kept going. I let go and shot cum all over her. She took her hands and spread it on her tits and stomach.\n\n\"Now you look tasty,\" Linda said.\n\nLinda sat up and pulled Rachel onto the bed next to her. I lay and watched as she licked my cum off Rachel. When she finished, she got between her legs and took her time eating Rachel. Once Rachel came several times, Linda kissed her way up her body. I watched the two of them kiss for a while.\n\n\"You two are so hot to watch,\" I said.\n\nThe three of us lay in bed and talked for several hours, then turned off the lights and went to sleep.\n\n*****\n\nI woke up early and looked next to me, and Linda was lying there watching me.\n\n\"Do you get up early every morning?\" I asked.\n\n\"Yes.\"\n\nLinda kissed me, then moved down and started working on my cock. Once she had it good and hard, she slid her mouth over it.\n\nA few minutes later, Dawn came into the bedroom and got on the bed with us.\n\n\"Where were you?\" I asked.\n\n\"I slept with Brian and Angie.\"\n\nRachel woke up when she heard us. The three of us watched Linda until I filled her mouth full of cum. She slid her mouth off and moved up, and laid on top of me.\n\n\"Dawn, you and I need to talk,\" Linda said.\n\n\"About what?\"\n\n\"Linda thinks that when she moves next door that you'll be upset with her coming over to fuck me every day,\" I said.\n\n\"Not every day!\" Linda exclaimed, and Rachel laughed.\n\n\"Linda...I have told you numerous times not to worry about things like that,\" Dawn said. \"Besides, by the time you move in, you will have a baby to take care of.\"\n\n\"Two,\" Linda said and reached over to Rachel.\n\n\"I think we will all be busy,\" Dawn said.\n\n\"You better not be that busy!\" I said, and they laughed.\n\nWe all talked until we smelled breakfast cooking.\n\n\"Who is cooking?\" I asked.\n\n\"Amy and Samantha,\" Dawn said.\n\n\"How do you know that?\" Rachel asked.\n\n\"I just do.\"\n\nThe four of us went and showered together. After that, we headed downstairs. Dawn went to the kitchen, and I sat in the den with Linda and Rachel. Soon, everyone was downstairs, and the others were helping the girls make breakfast.\n\n\"Make sure you two do my brother,\" I said.\n\n\"We will!\"\n\nBy the time everyone had finished breakfast, it was almost 10:00. Everyone was sitting around talking and laughing. Linda and Rachel had moved and were sitting with Brian and Angie talking.\n\n\"Hey, James? What time will everyone leave?\" Ian asked me.\n\n\"Whenever they want. Probably before dinner.\"\n\n\"Okay. Just wanted to check.\"\n\n\"Ian, is it okay if Sondra comes by without you to have sex?\" I asked.\n\n\"Sure...as long as I can come by and have sex!\"\n\n\"Don't see why you can't.\"\n\n\"Can your wives come to my house?\"\n\n\"If they want to do that, sure.\"\n\nHe walked away. A minute later, Amy came and sat across my legs and put her arm around my neck.\n\n\"I hope you are having a good time,\" I said.\n\n\"Oh, I am.\"\n\n\"Did you and your sister enjoy Ryan's huge cock?\"\n\n\"It was pretty good...but...we still enjoy yours the most.\"\n\nI pulled her to me and kissed her.\n\n\"Make sure you have plenty of fun,\" I told her.\n\n\"I will.\" She got up and walked away.\n\nI sat and talked to everyone for a while. Dawn came to me.\n\n\"I have been talking to Patricia. She and Gregg want to join us, but she said to make sure we didn't mention having sex with her before,\" Dawn said.\n\n\"Okay.\"\n\nWe got up and went to Gregg and Patricia. They followed us up to our bedroom.\n\n\"We are glad you two decided to join us this weekend,\" Dawn said.\n\n\"Linda and Rachel talked us into it. She said they always had a good time,\" Patricia said.\n\n\"We try to make sure everyone has a good time. Gregg, are you okay with everything?\"\n\n\"So far. We have had some fun.\"\n\n\"That's good. Patricia, Linda said Gregg had a good time watching you with her,\" Dawn said as she laid on the bed.\n\n\"Oh...he did,\" Patricia said as she moved between Dawn's legs.\n\nI was watching as Gregg sat and looked over his wife and mine. He spent a lot of time looking at Dawn.\n\nPatricia got Dawn off several times, then the two of them moved into a 69, so we could watch. Dawn was on top, so I sat next to her and ran my hand down her back and ass as she pleased Pat. Gregg was still enjoying watching the new things his wife was doing.\n\nAfter the two of them got off several times, Dawn rolled off Pat. Pat sat up came to me. I laid back on the bed, and she went to work sucking my cock as Gregg watched.\n\n\"I'm sure you have already watched her do that,\" Dawn said to Gregg as she pushed him onto his back.\n\n\"Only a few times,\" he said."
    ],
    "authorname": "drmac100",
    "tags": [
        "lottery"
    ],
    "category": "Novels and Novellas",
    "url": "https://www.literotica.com/s/life-after-the-lottery-ch-73"
}
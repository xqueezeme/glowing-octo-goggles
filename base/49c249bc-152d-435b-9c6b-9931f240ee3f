{
    "title": "The Addicted Natural Ch. 15",
    "pages": [
        "Chapter 15 &ndash; The White Witch of Walden &ndash; Conflict and Resolution\n\nMY INTRODUCTION TO MY GREATEST FEAR\n\nI will be brief with this portion of my story. It's painful for me. Fear, or the admission of it, is &hellip; somehow unmanly. So forgive me if I just forge ahead right through it and get it over with. I'd have given anything if I could have done that while I was experiencing it. That's the worse part of fear, sometimes. It just goes on and on.\n\nIt's difficult to imagine, since I've droned on for dozens of pages now, but my episode with the tree had occurred on Thursday evening, the start of a long three-day weekend. It was now Sunday of that same weekend, and despite my newfound passion and love, I felt very rushed. My computer at home held 31 ungraded essays on American poets of the early 20<sup>th</sup> Century, and I had to sharpen the old electronic red pencil and work my way through them before my Junior-level Lit class the next day.\n\nWillie had opened herself sexually to me once more during the night, and then she'd practically raped me when she awoke around eight. Then, my insistent hands gave her yet another orgasm in the shower. We behaved quite well when room service brought us our breakfast, but we didn't make it through the meal. I insisted, after the room service guy left, that she eat in the nude, and she begged me to return her the favor. We both laughed uproariously as the napkin in my lap began levitating, seemingly on its own, as we talked about various positions for making love; and she insisted that the magic trick be rewarded by allowing me to teach her the basics of \"doggie-style.\"\n\nBut after said demonstration, those essays began calling to me in the back of my mind, so we checked out and returned home around noon. I took lunch in my office, while the girls talked and talked in the den, and their raucous laughter interrupted my work on several occasions. By dinnertime, I'd gotten through twenty of the things, and I took a break and joined them in the dining room. Dee had done a fabulous job on some sort of salad with breaded chicken in it and a type noodle soup that she'd never made before. The girls were all wearing nightgowns (Willie had borrowed one of Brenda's, though it was a couple sizes too big), and they were all extremely enticing, to say the least. I had more or less decided that I'd take Dee to bed with me that night and see what would became of Brenda and Willie when they were forced to share the same bed. The idea was very appealing, somehow. I would discuss my nocturnal plans with them when I finished with the essays.\n\nAfter the meal, I'd just gotten through another five of them when there was a knock on the door and I called out for them to enter. They all looked very demure, and not a little suspicious. Brenda had evidently been elected ringleader, and she came and stood before my desk.\n\n\"Freddy, we want to have a party. Can we? We'll be quiet, I promise.\"\n\nI smiled at them. They'd been loud and giggly all afternoon, and there was little chance there would be any difference after their \"party\" started. \"Sure,\" I told them. \"Go ahead.\"\n\n\"Can we have a glass of wine, Freddy? Please?\"\n\n\"Sure.\"\n\nBrenda motioned to Willie, who brought her a glass of water. \"And can you make Dee drunk, the way you've done before?\" I laughed and had Willie bring me the glass. I looked right into Dee's eyes as I proclaimed that the water would now have the same affect as wine on her. Finally, I turned back to the computer, but the girls were still there, waiting.\n\n\"Freddy, Willie wants to show us how her cards work. Will you let her?\"\n\nI sighed. \"I thought her power was gone, now that we've made love,\" I said, trying not to sound placating.\n\n\"She just wants to show us what they are &hellip; what each card represents, I mean. Please, Freddy? You don't believe in them anyway, and now that her &hellip; abilities are gone, it doesn't really matter, does it?\"\n\nI smiled again. \"Of course you can play with them. Go ahead. Knock yourselves out.\"\n\nThey rushed out of the room, and I got back to work. I rued the day I'd ever signed up for teaching these stupid summer courses. Only two more weeks, and they'd be over. I'd only be teaching one day a week during the fall term, and I'd probably just quit altogether after that. The girls burst into another fit of loud laughter, then obviously tried to shush themselves, but wound up laughing even louder. I sighed and tried to concentrate. I was trying to make some sort of sense of my life. I was in love with three women; I was trying to maintain a large house, including putting on an addition; I wanted desperately to start that novel; I had to stay involved with Dee and her small, growing fortune. And then there was the baby.\n\nMore giggles from the den. I forced myself to push all those thoughts out of my head. Compartmentalize, I ordered myself. At least the girls were quiet for a spell after that, and I struggled through two more essays.\n\nThe door burst open and they all rushed in; they'd never entered without knocking before. A quick glance told me something was wrong. Brenda looked worried and determined; Willie was nervous and guilty-looking; and Dee just looked scared. Her eyes were doe-like, and tears were pooling. I was out of my chair in an instant.\n\n\"What's wrong?\"\n\nBrenda opened her mouth to speak, but closed it again. She looked quickly to Willie, who looked down and shuffled her feet, then she looked at Dee. Finally, she turned back to me and took a breath. \"Freddy, there's something wrong with the baby.\"\n\nI was immediately around the desk and was holding Dee by the shoulders, looking frantically into her eyes. \"What's the matter? Where does it hurt? It's way too early for labor pains!\"\n\nDee simply looked back up at me, seemingly unable to answer.\n\n\"What is it?\" I almost yelled. \"Did your water break?\" She shook her head. \"Is there bleeding?\" She was silent. A tear spilled onto her cheek.\n\nI spun around to the other two. \"What in the world is going on?!\" I screamed.\n\nAgain, Brenda tried to articulate something that she seemingly couldn't. She looked back to Willie, who stood before us, meek, innocent, afraid.\n\n\"Brenda &hellip;.\" I growled menacingly.\n\nShe squared her shoulders and faced me. \"Freddy &hellip;. Now don't get upset &hellip;.\"\n\n\"Upset?!\" I roared.\n\n\"Willie &hellip;\" she stammered; \"Willie saw &hellip; saw that something was wrong &hellip; wrong with the baby &hellip;.\"\n\n\"WHAT?\" I yelled. \"Do you mean to tell me that she read those fucking tarot cards and made you think &hellip;.\"\n\n\"Freddy, calm down,\" Brenda ordered firmly. \"What if she's right?\"\n\n\"RIGHT? Brenda, it's just a bunch of cards! The whole concept is a sideshow sham!\"\n\n\"What if she's right, Freddy?\"\n\nI spun on Willie, my anger near the boiling point. I caught myself before I could say something really mean, and I took a deep breath. It wasn't her fault, I told myself. The poor girl had been brought up under the delusion that her \"gift\" was real. \"I thought your 'powers' were gone, now that we've made love,\" I said, trying to keep accusation out of my tone.\n\n\"I &hellip; I don't understand it,\" Willie said, finally meeting my eyes. \"The images in the cards &hellip; they were just as sharp, just as clear as ever.\" She was pleading with me. \"I love you, Frederick. I really, really do. I would die for you. I would do anything. ANYTHING! My abilities should be gone. But the images are still there!\"\n\n\"Oh, Freddy, can't you understand?\" Brenda interrupted. \"It was just a story! It was a story her aunt made up to protect her! And everyone believed it! Don't you see the beauty of it? No man interested in GAIN would ever take her virginity. It would be like shooting the goose that laid the golden eggs! Only a good man, a man interested in HER and not in her powers, would claim her love! And HE would have it ALL! He would have her AND her powers! Oh, God, it's so ROMANTIC!\"\n\n\"It would be romantic except for one small factor: her 'powers' don't exist!\"\n\nBrenda took a deep breath. Uh oh &hellip; here it comes, I thought, the famous \"Brenda Logic.\" She looked squarely at me. \"If she's wrong,\" she said soberly; \"if there's nothing wrong with Dee or her baby &hellip;.\"\n\n\"Only the baby,\" Willie said suddenly. \"Dee's okay. The baby &hellip; it's &hellip; it's &hellip; hungry. It needs &hellip; something it can't get!\" She looked pleadingly at me. \"Please, Frederick! Please? If I'm wrong, I promise you can take away my cards, and I'll never look at them again! Never, ever! Please?\"\n\n\"Oh Master, I'm scared!\" Dee wailed, and rushed into my arms.\n\n\"Freddy,\" Brenda continued, \"if there's nothing wrong with the baby, and if you took Dee to the hospital, what's the worst that can happen?\"\n\n\"I could look like a FOOL!\" I told her.\n\nShe paused for affect. \"That's right, Freddy. That's the worst that could happen.\" She let that sink in. \"And if for some reason &hellip; even if Willie DOESN'T have any powers &hellip; for ANY reason &hellip; if something's wrong, and you DON'T take her in &hellip;.\"\n\nI felt my shoulders slump in defeat. How does she DO that, I asked myself. How does my slave-wife ALWAYS get her way? I sighed. Because Brenda's always right, I conceded. But someday &hellip; someday I'm going to show her who's REALLY boss around here.\n\n\"Go get dressed,\" I ordered them, and they all rushed out of the room as I picked up the phone.\n\nForty-five minutes later, we were all waiting at the gynecologist's office. I'd called him at home on a Sunday evening and tried to entice him with the offer of three thousand dollars cash for an after-hours exam. He refused the money and told me to bring her into the office, but he definitely wasn't happy; and when he arrived and learned that there were no outward signs of distress with the pregnancy, he was less happy still. Dee had just had a checkup the preceding week. His chagrin only deepened when Brenda and Willie insisted on escorting Dee back to the examining area of the empty doctor's offices, and we all crammed into the little room with the single examining table in its center. The doctor gruffly ordered Dee to strip and he left. Dee nervously and self-consciously began taking off all of her clothes before climbing onto the table.\n\n(It should be noted here that Brenda's middle name is Diane. Now, normally that would have absolutely no bearing on our story, except to help rationalize the irrational. Keep in mind that our little charade (that is, Brenda's bright idea of a charade!) was to show in all the medical records that \"Brenda Fielding\" was having this baby. This was to be Brenda's and my child, and THAT was somehow going to emphasize Dee's role as servant and slave for the rest of her life. I STILL wasn't too sold on the idea, but Dee was so caught up in the concept that I hadn't argued with it. So, we had registered Dee under Brenda's name, Brenda's social security number, the whole works. We'd still called her Dee, however, by explaining to everyone that it was a nickname derivation of her middle name. Make sense? Well, not much, I guess &hellip;.)\n\nThe doctor returned with as sour a disposition as when he'd left. He seemed to be taking out his frustrations on his patient, for he rather roughly positioned Dee's legs in the stirrups, sat at the end of the table between her obscenely spread nether region, and began poking around. Dee groaned, which he ignored, and then she looked over at us and blushed furiously. Willie rushed to her side and took her right hand, comfortingly, while Brenda and I exchanged knowing looks. Dee got off on humiliation, but Willie hadn't figured that out yet.\n\nSullenly, the doc got up, repositioned Dee's legs back on the table, and came around to stand next to his patient. He seemed to soften a little. \"Everything's okay down there, Dee. I don't see any problems at all, so far. Let's fire up the ultrasound.\" He began flipping switches, and ordered Brenda to turn on the TV sets hanging from the ceiling at each side of the room. He pressed a shiny silver paddle against Dee's midriff. She stifled a small shriek. \"Sorry,\" he said. \"Normally, we warm them up, but it's not working hours &hellip;.\" He looked accusingly at me, and then turned his attention to one of the monitors.\n\nI could make out parts of the fetus; a hand and arm, the back and spine, the legs. I was mesmerized. I'd accompanied Dee back here for her exams before, but usually I'd find myself just nodding dumbly when something was pointed out to me, and I was rarely able to see what they were talking about. Now, the little kid was really starting to look like a kid. Neat.\n\n\"I notice from your record that you don't want to know the sex of the baby until delivery,\" the doctor said without looking down from the monitor.\"\n\n\"That's okay,\" Dee told him. \"I know it's a girl.\" I looked at her questioningly, but Dee was smiling up at Willie and clenching her hand. Oh good grief, I thought, the oldest sideshow trick in the book. Willie and her cards had a fifty-fifty chance of getting it right. If she didn't, she could argue that the cards' message had been \"jumbled.\" And if she did, she'd look like saint performing a miracle.\n\nThe doctor glanced at me for a moment, then seemed to discount my presence. I was the source of his ruined Sunday evening. \"Well, Dee,\" he said, looking back up at the monitor, \"your daughter is doing just fine. Perfectly healthy, as far as I can see. A little small for this stage, but we discussed that during your last visit. Did you increase your daily caloric intake, the way I said?\" He kept staring at the screen.\n\n\"Yes,\" Dee said in a meek voice.\n\nHe didn't look down. \"Any other problems? Any at all?\" He kept staring.\n\n\"Um &hellip;.\" She hesitated for a long time and blushed even more. The doctor kept looking at the monitor. \"Um &hellip; I'm &hellip; I'm horny all the time.\"\n\nThe doctor grunted; not quite a laugh. He kept staring. \"That shouldn't be a problem for another month. I'll tell you when you should stop having sex.\"\n\nWillie finally turned away from Dee, though she still held her hand, and she looked at me with confused eyes. She shook her head slightly. Poor kid. She'd been so sure. But then, I was the one that was looking like a fool, here. I turned and tried to convey some silent signal to Brenda, but she was looking fixedly at the doctor. I followed her eyes and suddenly realized that the doc hadn't looked away from the monitor once in several minutes. His face was a blank. I turned and looked at one of the TV's but I couldn't recognize anything, anymore. It looked like &hellip; nothing; just a grayish mass. It slowly dawned on me that he wasn't looking at the fetus any longer. Something was wrong. All at once, everyone felt it. No one spoke.\n\nFinally, finally, he turned and switched the machine off and the screens went blank. He laid a palm on Dee's bulging midriff and stared at a point somewhere across the room, his eyes unfocused, thinking. We all held our breaths. At last, he looked directly at me and said: \"Something's in there. Something else.\"\n\nI had a lump in my throat the size of my fist. \"What is it?\" Brenda asked calmly. \n\nHe looked at her. \"I don't know, but I'm not going home tonight until I find out.\" He patted Dee on her tummy. \"Get up. Get dressed. I'll meet you at the hospital.\" She didn't move. We all just stared at him. He clapped his hands once loudly. \"Let's GO people! I have to close up the office!\"\n\nAnd that's the end of my narrative wanderings for this part of the text. I won't go into great detail about the longest night of my entire life. I won't go into the mundane but excruciatingly endless administrative efforts of checking Dee into the hospital, or the tests; and more tests; or the three tense, nearly hysterical girls I had to try and calm (I finally wound up hypnotizing each of them at least once during the night when there was no one else around). \n\nThis is neither the forum for, nor the audience that would find interest in, the medical problems that can arise during a pregnancy; so I'll keep my description mercifully brief. There are several types of ovarian cysts; but usually, women are most concerned only with whether or not they're malignant. I thank all my lucky stars that Dee's was not; but this damn thing had attached itself to her uterus and was literally robbing the fetus of the nutrients that Dee's body was making on the child's behalf. It had already grown larger than the baby itself was at this stage. It hadn't been detected yet because: 1) the OB-GYN doctor had been interested only in the baby itself and hadn't looked further, and 2) the thing was almost undetectable by X-ray or ultrasound because it had no real substance. Chances are that it never WOULD have been detected until childbirth if the doctor hadn't felt so compelled to spend a little extra time on his examination. The cyst was beginning to push Dee's other organs aside as it grew, and he'd noticed that there was \"something\" there that shouldn't have been.\n\nFear was like a fiery lump in my stomach all night. I'd never really given the baby itself that much thought to this point; not as a person, I mean. But now, I knew the painful uncertainty of losing something I didn't yet really have - but that I wanted so very, very much.\n\nThey wheeled Dee into the operating room a little after eight in the morning, and she didn't emerge again until almost eleven. Though Dee's chances were excellent, we were told, the baby's were only about 50-50. Brenda and Willie cried a lot. I had to be strong for them. It kept my mind occupied.\n\nThe doctors were jubilant! They came out laughing and slapping each other on the back and congratulating one another: God-syndrome run amok. They had done the job without disturbing the fetus, they told us, and Dee should be able to carry the child to term. She would have to stay in the hospital for a week, and once home, she'd be confined to \"complete rest,\" which, we found out, meant no walking about, no chores, no exercise of any type, etc. We would be able to wheel her around the house in a wheel chair if we wanted, or she could rest in a chair or on the couch, but that was it. No sex, of course.\n\nWhen Dee was out of intensive care, later that day, we all mobbed her room and celebrated the good news. She, in turn, showed us her new scar, which was almost a foot long, running up her right side. Poor kid. Another scar. But she never looked more beautiful, at least in my eyes. Either Brenda or Willie stayed by her side for almost the entire stay in the hospital. \n\nAnd as for Willie; I thought about giving her a little lecture about the tarot reading just being a coincidence, a fluke, a lucky guess; but I didn't. I also felt a near-overwhelming compulsion to explain to her that, though things had turned out very well because of this strange little intervention, I STILL couldn't bring myself to believe in her so-called \"abilities,\" and I probably never would. But a deal's a deal. I let her keep her damn cards.\n\nAN EVENING WITH BRENDA\n\nA flash of lightning lit the room, and the vision of Brenda, impaled on my cock, a sheen of perspiration covering her naked torso and breasts, was seared into my mind. She groaned loudly, lifted herself up a few inches, and with another loud moan, plunged back downward. Her palms were pressed against my chest, but she lifted them and rocked backward, sitting up very straight and taking me as far into her sopping cunt as was possible. \"Oh, Freddy, you're so deeeeep!\" she growled. She closed her eyes and shuddered.\n\nThe wind billowed the window shears as the storm advanced toward us. Thunder boomed. It was late August, and Dee had been home for only two days. What with all the comings and goings, along with the \"shifts\" we took with Dee in her hospital room, I hadn't made love to my beautiful wife for almost a week. She was certainly making up for it now! She ground herself down on my manhood, arched her back and groaned loudly, then leaned forward with her hands on my chest again and tried to find a rhythm. I put my hands on her slender waist and closed my eyes, reveling in the sensations she was generating. When I opened them again, I caught her giving her head a quick toss to her left, sending her thick, black hair over her left shoulder, and she cast a glance back behind her and to her right, toward the bedroom door. I knew without looking what was there.",
        "I moved my hands to her buttocks and pulled her down hard, pressing my cock as deep as possible up into her womb. As I suspected, this caused her to close her eyes and moan, her body shaking. I glanced quickly toward the door just as another bolt of lightning lit the entire room. Yep, there they were: Dee in her wheelchair, Willie standing beside her, holding her hand. They both appeared to be watching, but oddly, their eyes were closed. They were only visible for a fraction of a second in the glare, so I figured that I'd just seen them while they were both blinking. Hmm. If it was a show they wanted &hellip;.\n\nI grabbed Brenda roughly around the waist again, sat up, and twisted us both toward the center of the king-size bed. She squealed loudly, then grunted as I pinned her beneath me, my cock still buried to the hilt inside her body. \n\n\"Oh, Golly, Freddy!\" she gasped, and reached up to put her arms around my neck. I grabbed her by the wrists and roughly pinned them to the bed on either side of her head. She struggled for a few moments, trying once again to hold me, but I refused to let her budge. I began lifting my hips and pounding my cock into her. My pace was quick and relentless, and I used a great deal of force, making her grunt each time. Our stomachs slapped together over and over again. Once more, she struggled to free her hands and put her arms around me, and once more, I held her securely. She cried out once, then again. I began picking up the pace. She had a small orgasm, then started building toward a big one. It wasn't going to be much longer for me, either. I was going as fast as I could now, and she brought her legs up and pushed her heels into my buttocks, pulling me deeper with each stroke.\n\n\"Unnggh! Oh, GOLLY, Fre &hellip; OH! Ahh! Aaahhh! Aaaahhhh!\"\n\nShe was coming hard, and as her cunt gripped me, I felt myself spurting what I envisioned to be gallons of semen into her. At last, I released her wrists, but she just left them there, limp. I lay atop her, totally spent, and at first I thought she'd passed out, but she stirred after awhile. I rolled off of her and pulled her to me. She rested her head on my shoulder and moved one of her legs across my body. I could feel the fluids from her cunt leaking onto my thigh, but I didn't move. We couldn't speak for a long time, and as our breathing slowed, the sound of the rain on the roof and the distant thunder was all that we heard. \n\n\"Golly, Freddy. That was the best!\"\n\nI was silent for another minute. \"Do you think we put on enough of a show for your girlfriends?\"\n\nPause. \"You saw them?\"\n\n\"Yes, I knew they were there.\" I held her close. \"You ladies really like to watch, don't you?\"\n\nPause. \"Watch &hellip;. Yes.\"\n\n\"Why do you and Dee always do that?\"\n\n\"It's &hellip; um &hellip; fun.\" I remained silent, basking in the afterglow. \"Uh &hellip; Freddy?\"\n\n\"Yes?\"\n\n\"I think &hellip; something's wrong with Dee. Not with the baby &hellip; it's something else.\" \n\nI gave her my full attention. \"Like what?\"\n\n\"I'm not sure. It's as if &hellip; as if she's done something wrong, and she's afraid to tell us. I've tried to talk to her about it, but she just makes excuses. She feels &hellip; guilty. She's very troubled by whatever it is.\"\n\n\"When did all this start?\"\n\n\"A couple weeks ago. About the time we met Willie. At first, I didn't think it was worth telling you about, but it's been worrying her more and more.\"\n\n\"I'll talk to her.\"\n\n\"Let me try one more time,\" she suggested. \"I'll sleep with her tomorrow night.\" She put on a smug grin that I could see in the dusky light. \"You won't mind sleeping with Willie again, will you, Freddy?\"\n\nI smirked, but slowly my mind was invaded by other thoughts, very prurient thoughts. \"Have you slept with her yet, Brenda?\"\n\nShe gave a little laugh. \"You mean: have I made love to her yet?\"\n\nMy turn to pause. \"Yes.\"\n\nShe was silent for a long minute. \"I tried to resist her. I really did. I didn't know if she'd be &hellip; receptive. But in the end, I just gave in to it; the urge, I mean.\" Another half-minute's silence. \"I think she has a &hellip; an odor. She smells &hellip; good. I think that might be it. Have you noticed it?\"\n\n\"Yes, I think so.\"\n\nShe seemed to be trying to get her thoughts in order, but they were jumbled. \"Her nipples are &hellip; really big; long and hard and rubbery, and she just seems to melt inside when I suck on them.\n\nMy weary cock gave a twitch.\n\n\"And &hellip; Freddy, she squirts!\"\n\nI laughed. \"Yes, she squirts.\"\n\n\"I didn't know women &hellip; DID that!\"\n\n\"I've heard that some do. I didn't know whether it was the truth, but I guess I know now. There's no doubt that she ejaculates when she cums.\"\n\nBrenda giggled, but she hesitated before going on. \"I love her, Freddy. I really love her. Like I love Dee. I couldn't be happier.\"\n\n\"Yes,\" is said softly. \"I love her, too.\"\n\nWe held each other for another long minute. \"Freddy?\"\n\n\"Yes.\"\n\n\"She wants to go get her pubic hair permanently removed, like Dee's and mine. Can I take her tomorrow? Please?\"\n\nMy cock gave another little jerk. You could hardly see Willie's sparse white pubic hair against her pale skin as it was. It made her look very, very young. I could only imagine what it would be like when it was smooth and bald. I had to clear my throat. \"Sure,\" said.\n\nBrenda laughed and hugged me, then changed the subject yet again. \"Freddy, she's incredibly bright. She seems to be able to learn anything! She's never been allowed to learn before, and now she can't seem to soak in the knowledge fast enough.\"\n\n\"I've tasked Dee with teaching her how to read.\"\n\n\"I &hellip; I know you don't believe in her &hellip; abilities &hellip; with the cards; but there was probably a good reason why her aunt didn't teach her to read before. I have to assume that if we teach her to read now, it may degrade her &hellip; powers with the tarot.\"\n\n\"Even if I DID believe in all that rot,\" I told her firmly, \"I would gladly trade her so-called 'powers' to give her the knowledge she's going to need to live her life. She deserves to learn to read. Every woman &hellip; every person deserves that. I would never deprive her of it.\"\n\nBrenda hugged me so tightly I found it hard to breathe. \"I love you, Master,\" she said.\n\nI just lay there, and I thought that I felt &hellip; good about life.\n\nAN EVENING WITH WILLIE\n\n\"Surrender and sleep!\" I ordered.\n\nBrenda immediately slumped to her left against Dee's shoulder, while Dee closed her eyes and let her right cheek settle against the top of Brenda's head. Willie, sitting to Brenda's right, collapsed across her lap and nestled the side of her face on Dee's thigh. It made quite a picture. Maxine, wagging her tail, walked to the couch and started licking Willie's face. She didn't move.\n\nI decided that no instruction was necessary for this hypnosis session, so I just left them for a few minutes and walked down the hall to my office, where I put the watch back into its mahogany box. I didn't really like that box, all things considered. It reminded me of something I'd just as soon forget. Still, it's better to remember, sometimes; like a fatter \"before\" picture on the refrigerator to remind yourself what might happen if you indulged in that extra piece of cheesecake. I shut the box's lid and walked back to the living room, where my three lovelies remained in their hypnotic heap. I clapped my hands. \"Wake up!\"\n\nThey immediately came to life again, and Brenda and Willie came to me, hugging me. \"Do you want us?\" Brenda asked eagerly. \"We could all do it! We could take turns!\"\n\nI laughed. \"No, thanks anyway,\" I told them. I walked to the couch and bent over to kiss Dee. She, of course, had orders not to walk around, and she alone had remained sitting on the couch. \"Dee, I want you to share your bed with Brenda tonight, please.\" I turned to Brenda, who gave me a little, knowing nod. \"Brenda, why don't you two call it a night. Dee looks tired.\"\n\n\"Okay, Freddy.\" She got Dee's wheelchair, and she and Willie helped her into it and took her away toward the second bedroom. \n\nI called after them: \"Willie, I'm going to do some work in my office. I'll be with you in awhile.\"\n\n\"Okay, Frederick,\" she said, smiling over her shoulder.\n\nI was grading final papers for the Junior-level class. The course was almost over. Man, I'd be glad to see it done. I pulled up the first paper on the computer and groaned. I recognized it &hellip; it had been plagiarized from an on-line source that was at least two years old. Why didn't these kids learn? I gave the guy an \"Incomplete\" and wrote him an email to see me after class, preferably with another paper in hand.\n\nThere was a knock at the door. I hollered for her to come in, and Willie entered, eyes cast down, meek and humble. She was incredibly attractive. She was wearing a short nightgown and she obviously wore no panties underneath. Brenda had taken her to the hair removal clinic that day, and I could hardly wait to see the results. I just had to get through these damn papers!\n\n\"What is it, Willie?\"\n\nShe was holding her ornate box containing the tarot deck. \"Could I please just sit here for a moment and read my cards?\" she asked. \"It will only take a moment, and since you don't believe in them, it shouldn't be too much of a distraction. Please?\"\n\nI couldn't help giving her a sour look. She saw it and looked down at her feet. She was obviously very uncomfortable asking for this. I sighed. \"Okay, go ahead. Be quick about it, please. I'm going to be at this for another hour, and I'm anxious to see the results of your visit to the 'clinic' today.\"\n\nShe blushed furiously, then walked up to the desk, took the cards from their box, and set the deck in front of me. \"Just touch the deck, please.\"\n\nI regarded her curiously for a long moment, then reached out and cut the deck of cards, and then cut it again. That didn't seem to phase her at all, and she scooped up the cards and quickly laid out five of them in a sort of sideways crescent. She bent forward and peered at them, then scraped them aside and laid out another design: a plus sign, or cross, using the next five cards in the deck. Again, she had to lean forward and squint at the cards myopically; and again, she hesitated only a second before scraping them aside.\n\nNext, she began to lay the cards out seemingly at random; one here, one there on the desktop; but when she'd laid out twelve of them, they'd formed a circle. She bent forward and peered at them for almost a full minute. Her breath caught for a moment, but then she sighed and began picking them all up. She replaced the deck in its box and finally looked up at me.\n\n\"Thank you, Frederick. I appreciate your patience. I will wait for you in the bedroom.\"\n\n\"Aren't you going to tell me what you thought you saw?\" I asked, and immediately wished I'd phrased the question differently. \n\nShe winced. \"It doesn't really matter, does it?\" she asked defensively, and then hung her head. \"I'm sorry. I didn't mean that. You are my Master, and I will gladly tell you everything I know. But if you don't mind, I'd like to wait until the time is right. It won't be long. Please?\"\n\nI felt my shoulders sag. I felt tired, and placating, and overbearing, and very, very horny. \"Come here, Willie.\" At once, she stood before the desk and adopted a position of meek servitude, her hands at the sides, her eyes cast down at her feet. \"No,\" I told her. \"Come around here to me.\" She walked around the desk and stood before me. \"Sit down,\" I told her.\n\nShe looked at me and blinked, then looked around for a place to sit. I patted my lap. \"Here,\" I told her, and she smiled and blushed. She positioned her tight little ass on my lap, put her hands in her own, and leaned demurely against me. She felt very good: small and slim and firm and feminine. She'd obviously bathed recently, because she smelled of the floral soap that Brenda liked, but she also smelled like &hellip; Willie; that subtle but unmistakable odor that her body seemed to exude. My cock hardened under her pert little ass. \n\n\"Put your arms around my neck,\" I ordered, and she immediately complied. I put my hand on her thigh. \"Now, spread your legs for me,\" I said. She made a little noise and hesitated only a moment before spreading her knees apart for me. I ran my hand up her thigh and pressed my palm into her hairless mound. She gasped sharply and shivered violently.\n\nSo much for the papers.\n\nI picked her up and carried her into the bedroom. Our lovemaking was exquisite. When I sucked on her rock-hard nipples, she grasped my head and held me to herself, shuddering violently. When I nibbled and licked and slurped her hairless pussy, she drenched me with her tasty juices and came so hard she filled the night with her screams. And when I came, deep, deep inside her slim young body, it felt like my body was exploding.\n\n\"Frederick!\" she whispered harshly. I awoke with a jerk and looked up, surprised to find her standing next to the bed, leaning over me. She wore a short silk robe, one of Brenda's, and her left breast was peeking out its front fold. I tried to clear my sleepy mind, and I reached for her. She shied away a step.\n\n\"No, Frederick, please!\" she insisted. \"I need to talk to you. I need to tell you something.\" She was speaking very lowly.\n\n\"Why are you whispering?\" I asked, muddled.\n\n\"Shhh! Please, Frederick. We must be quiet. I must show you this!\" She acted suddenly indecisive. \"At least, I think I should. We MUST talk! Please?\"\n\nI sat up in bed and patted the space next to me. Reluctantly, she sat, her hands on her lap, her eyes averted. The light was dim, but I could see her clearly enough. She was upset, nervous, meek. \"What is it, Willie?\" I whispered.\n\nShe was trying to get her thoughts in order. \"You are my Master,\" she said levelly, quietly. \"I should have no secrets from you. I love you. I would do anything for you.\" I said nothing, and at length, she continued. \"If I DON'T tell you, nothing will happen. And that would be good. Well, not good, but not bad, either. But if I DO tell you, then something terrible could happen. But that's the future, and it could be altered. If &hellip;.\"\n\n\"Willie,\" I interrupted, \"you aren't making any sense at all. What are you talking about? What's the matter? Tell me!\"\n\nShe looked into my eyes for a moment, then stood, holding out a hand to me. With the other, she picked up my bathrobe, which she'd obviously gotten from the closet while I slept. \"You are my Master,\" she repeated as I stood and allowed her to help me on with the robe. \"I will tell you. I should have no secrets from you.\"\n\nMaxine was suddenly at our side, but Willie leaned down and told her to stay. The dog lay on the rug next to our bed and moped. Willie tugged on my hand, and I let her lead me out the bedroom door and down the dark hall. There was a light on in the library, but the door was closed. She tiptoed up to it, turning twice to put a silent finger to her lips as a signal to me, and then she cracked the door a couple inches. Curious, I peeked in.\n\nBrenda, completely nude, her back to me, was busy at the computer. From time to time, she would stop and stare at the screen, and I could tell from her posture that she wasn't happy. She used the computer mouse, and I could see text being highlighted and deleted, and then she started typing again. Willie tugged me back into the hall and silently closed the door. I turned to her and started to speak a question, but she put her palm against my lips, stood on tiptoe, and whispered softly, directly into my ear.\n\n\"She is under the influence of a man: a man you regard as your enemy, though he really is not. You hate this man, for he took her body before you yourself could taste its pleasures. You have never forgiven him for this. You despise him.\"\n\nI shot a glaring look at the closed door, and my mind thought a single, terrible word: TRAITOR! I had thought it might be Brenda; in fact, there was no else it could have been. But I loved her and I refused to believe it. It was the problem of the mahogany box, you see. It had been sent by Menlo as a wedding gift, along with a little congratulatory card and note. We were married by a justice of the peace downstate, and the only other person we had invited, the only other person who knew of our marriage, had been Brenda's mother (who I really like, by the way). There had been no announcement, no outside celebration, no publicity of any kind; yet Menlo had sent the box. I had never really liked it, as I've mentioned before, but I keep it visible as a reminder that power can corrupt. The watch IS power; but I will never, NEVER allow myself to become what that asshole is. And I haven't &hellip; have I?\n\nWillie saw the look in my eyes and quickly leaned up to whisper in my ear again. \"She has no control over what she's doing now! You must not blame her! If you want to see what it is she's doing, you must follow my instructions exactly. It's the only way!\"\n\nI pulled back and looked at her. She was shaking and still very upset. I gave her a little nod, and she put her lips back to my ear.\n\n\"Sneak up behind her. Grab her arms, so she cannot erase what has already been written. She will fight you. Don't worry about the computer. The little plastic thingy won't break it. You must be prepared for her resistance, for she will become very agitated. The only way you can overcome his power is to show her this.\" She reached into the pocket of her robe and brought out the watch, which she kept balled in her fist. She turned her head away from it, and I suddenly realized her plight. She treated it as if it was Medusa's head. If she looked at it, she would be lost to its hypnotic power; and retrieving it from its box in my study must have been a real adventure. She pressed it into my hand, and then lowered it to the pocket of my bathrobe. I let it slide in, and she relaxed a little.\n\n\"Hypnotize her with the watch,\" she whispered. \"When she is completely in your power again, HIS control over her will be broken &hellip; for now. Then you can read &hellip; and begin to understand. But please, PLEASE don't tell her about what you found her doing &hellip;.\"\n\nTell her? You'd better believe I was going to tell her! I was going to get to the bottom of this, and I was going to STOP it! \n\nAs if hearing my thoughts, Willie's eyes suddenly went wide and she grabbed at the front of my robe. \"NO!\" she whispered harshly. \"Don't &hellip; please! If you &hellip;.\" A tear sprang to the corner of her left eye. \"OH! What have I done?\" And she turned and ran, barefoot and silent, back toward the bedroom. I looked after her for a moment. I could wax eloquent for awhile about the history of melodrama in literature, and about why it has been delegated in our society to exist only in the realm of Harlequin novels and daytime TV. This was a little too thick for me. Whatever it was that was eating her, it probably didn't rate all the histrionics.\n\nI turned back to the door, eased it slowly open, and I tiptoed into the room. Brenda was still bent over the keyboard, and she didn't notice me until I was inches from her. Then, something alerted her to my presence and she spun toward me, her eyes going wide, the back of her hand to her mouth. Another classic pose in melodramatics. The air was thick with the stuff. \n\n\"Freddy!\" She spun back to the computer, snatched at the mouse, and began to position it toward the File Exit prompt. She moved so fast that I almost wasn't ready, though I'd been briefed on her actions. I reached forward and grabbed her from behind by both arms and pulled her back away from the table with as much force as I could muster. \n\n\"NO!\" she shrieked, as the desk chair rolled back away from the machine. The mouse reached the end of its cord, snapped out of her hand, and sprang back to strike the monitor a resounding blow; then it fell and bounced a couple times on the keyboard and slid off onto the floor. Brenda struggled against me, and I almost cursed the exercise program she had religiously followed ever since we'd met. She was STRONG! She bucked violently, struggling to rise over and over again, only to be brought back down by my gripping hands. She turned to look over her shoulder at me. ",
        "\"Freddy, I just have to &hellip;\" She tried to get up again, and I pulled her back. \"I just have to do something to the computer &hellip;.\" Another attempt. \"LET ME GO!\" she screamed, and pushed back, catching me off guard. I stumbled, and she was up, racing toward the computer. I sprang up, grabbed her around the waist, and physically threw her several feet, where she landed heavily on the couch. She was getting up again when I held up the watch.\n\n\"Look at the watch, Brenda,\" I ordered in as calm a voice as I could muster. She froze, her eyes locked on the little timepiece. She shook her head, then amazingly closed her eyes and took a step toward the computer. \"Look at the watch, Brenda!\" I said firmly, menacingly. Her eyes came open again, and she stopped, staring. Once more, she shook her head slowly left and right. \"Watch the watch, my love,\" I intoned. \"Relax. Just relax.\"\n\n\"Freddy,\" she said slowly, \"I just need to &hellip; I just want to &hellip; do something first. Please?\"\n\n\"Just relax. So relaxed. Nothing else matters, Brenda. Just the watch. Relax and look at the watch. Relax.\"\n\nShe swayed. She tried to close her eyes again, but they blinked back open before she could quite get them shut. \"Please, Freddy! Please let me &hellip; do &hellip; um &hellip; something. Something I have to do &hellip;.\"\n\n\"Nothing is more important than relaxing for me, Brenda. And watching the watch. Just the watch. Nothing else is important at all. Nothing else. Just the watch. Just my voice.\"\n\n\"Please, Freddy &hellip;.\"\n\n\"The heaviness is coming now. The wonderful heaviness. So nice. So heavy.\"\n\nHer arms fell to her sides. \"Something &hellip;. I have to do &hellip;.\"\n\n\"So sleepy. So heavy. So nice. Nothing but my voice. Nothing but the watch. So sleepy. Submit and obey.\"\n\n\"Something &hellip; I &hellip; have &hellip; to &hellip;.\"\n\n\"Submit and obey.\"\n\n\"Something &hellip; some &hellip; some &hellip; mit &hellip; and obey. Submit and obey. Submit and obey.\"\n\nI let her drone on and on like that. With each iteration, she seemed to sag a little more, her eyes drooping. Finally, I let her go all the way. \"Surrender and sleep,\" I ordered, and her knees splayed apart, her legs twisting, and she toppled back onto the couch. She lay there for a brief moment, and then her body slipped off onto the floor, where she lay in a sleeping heap. I looked at her for a long minute and then turned my attention back to the computer. The mouse hadn't done any damage, other than entering several extra characters at the end of the uncompleted text. On impulse, I clicked the print icon and ran off a hardcopy before I read it:\n\nDear Menlo the Great,\n\nWhy do you do this to me? I hate you, I hate you, I hate you! I found myself in the hallway outside the library, and I didn't know how I got there, or WHY I was there. I only knew that I HAD to go in and do something on the computer. And when I came in here, I realized WHY! I had to write to you! I didn't want to! I wanted to leave! But then I knew that THAT was how I got in the hall outside. I'd left. But when I leave this room, I FORGET! And I know now that if I leave without writing to you, I will just come right back in again; never remembering why; always forgetting; always forgetting.\n\nHow many times have I done this? I don't know. I don't remember. I never will. What have you done to me? I hate you, I hate you!\n\nI know that doesn't matter to you. All you care about is me debasing myself in these letters to you. You want to know things about me that I would never tell ANYONE. About what I do in the bedroom with Freddy &hellip; and with Dee &hellip; and now with Willie. Ah, you didn't know about HER, did you? I haven't written you about her yet, have I? Have I? I don't remember. I wish I could remember. But I can't. And I won't. I know that as soon as I send this to you, I'll forget again; it will just be &hellip; gone! How many times? How often have I forgotten?\n\nIf Freddy only knew! He'd fix you! You'd be sorry!\n\nOh, that's so stupid. I sound like a teenager. I've tried to stop writing this, but I can't. I've even erased the whole thing! But I find myself just starting over again. I've done it twice. I guess I'll just get it over with. I'll just write it and send it &hellip; and then I'll forget again. Again and again and again. I hate you.\n\nThe biggest news in the past month (and there's so MUCH to tell you!) is about our new friend, Willie. She's an albino! But she's also the most beautiful girl I think I've ever seen. Dee and I met her while we were camping near a new lake that Freddy wanted to fish in. But Willie had a husband (yes &hellip; HAD. I'll get to that), and he came charging into camp, and he was so angry that he HIT Freddy! We were all so shocked and angrlkku'09864chnjhf\n\nThe email address was simply a ten-digit number at one of the nation's largest servers. I checked her sent-file, but if she'd sent previous messages (and she obviously had) they'd all been deleted. I highlighted the entire text of this new message and deleted it. Then I typed a message of my own to The Great Menlo, telling him in no uncertain terms what I planned to do to him if I ever caught sight of his miserable ass again. I also vowed to find some way to end his psychological hold over my wife, if it was the last thing I ever did. I pressed the \"send\" button almost without thinking. Only then did I remember Willie's strange behavior, and wondered, despite my best judgment, if there might be something to this fortune-telling mumbo jumbo. Sighing, I found and deleted my message from Brenda's \"sent\" file. Then I rose and turned the computer off.\n\n\"Brenda, wake up.\" I held her gently by her shoulders, and she opened her eyes and looked up at me.\n\n\"Oh. Freddy.\" She looked around. \"What are you doing in here?\"\n\n\"I was about to ask you the same question.\"\n\nShe blinked and looked down. \"I &hellip; I don't know. I &hellip; must have come in here for something. I'm still naked. Was I walking in my sleep?\"\n\n\"I don't know.\" I helped her up and hugged her to me. She rather deftly untied my robe and slipped her nude body against my own. \"Let's make love, Freddy.\"\n\nI held her. \"I &hellip; I can't. Willie's all upset about something. I need to get back to her.\" I thought a moment. \"How about Dee? Did you find out what she's worried about?\"\n\nShe hesitated a moment. \"No. I sense &hellip; I mean, I think that she's feeling guilty about something. She won't tell me what it is. I'll be able to figure it out eventually. Give me time.\"\n\n\"You'd better get back to her,\" I said gently. I had the hardcopy of the email in my pocket. For some reason, I longed to show it to her, talk to her about it. I talked with Brenda about everything. We had no secrets, and she might know how best to handle the situation. But for some reason, I remained silent, and I just hugged her marvelous body to mine.\n\n\"I love you, Freddy.\"\n\n\"I love you, too.\"\n\nI walked her back to Dee's room and then returned to the master bedroom. As soon as I entered, Willie was on her feet and clinging to me, bending back and looking questioningly into my eyes.\n\n\"Did you tell her?\" she demanded pleadingly. \"Did you?\" She searched my face. \"You DID!\" she accused. She let go of me and stomped around the room, holding her head. \"Oh, what have I done? I've KILLED him!\"\n\nI couldn't take much more of this. \"I didn't tell anybody anything!\" I told her.\n\nShe spun around. \"You DIDN'T?\" She looked earnestly at me again, then tried to run past me. \"My cards! I need to read my cards again!\"\n\nI reached out and grabbed her by the shoulders, lifting her off the ground and holding her out in front of me like a misbehaving child. \"Stop this! If you don't stop acting like bad character in a soap opera, I'm going to throttle you! Now, I want some answers, and I want them now!\" I set her down, dazed, and reached into my pocket. I held the email message balled in my fist, inches in front of her face. \"Tell me how you knew about this!\"\n\n\"I read about it in the ca &hellip;.\" Her features set in a mask of defiance and she turned away. \"You don't believe! You don't care!\"\n\nI walked to her and held her slim body, her back to me. \"What I BELIEVE has no bearing on this discussion. And what I CARE about is the truth.\" I turned her toward me. \"Now, I want you to tell me! I won't contradict you, and I won't berate or degrade you. I won't make fun of you because of your beliefs.\" I paused and looked her in the eye. \"I love you, Willie. And I respect you. Now, no more mystery, and no more melodrama! Tell me what's going on here! What do you mean 'I've killed him?'\"\n\nShe looked up at me, silent and tearful for a long minute, then disengaged herself from my arms and sat on the edge of the bed, looking down at her dangling feet. \"Everybody wants to know the future. That's all they care about. The present is what's important. What's happening NOW, and WHY it's happening &hellip; THAT'S what's important. The future is all twisty and uncertain. It changes. Sometimes, I read the future, and then the next time I read it, it's all different.\" I wanted to contradict, berate, degrade, etc, etc, but I wisely kept silent. She glanced up at me, and I put on my best \"listening with intent interest\" face. She sighed and looked back at her feet.\n\n\"I read about Brenda and the man you hate &hellip; I read about them in the cards a couple nights ago when Brenda and I were here alone. Then tonight, I read about the future. I saw you grab her, and hypnotize her, and I read about your &hellip; enemy on the computer. Only, he's not really your enemy. He's &hellip; not a nice man, and he's done some nasty things. But he's no threat to you, Frederick! He's just &hellip; there. Like a bird &hellip; or a worm. No threat. But then &hellip; in the cards &hellip; in the future &hellip; I saw you tell Brenda. Brenda saw your jealousy, saw your hate. And she &hellip; told Dee. And Dee &hellip; killed him.\"\n\n\"Aw, Willie,\" I said sadly, unable to keep the emotion out of my voice, \"Dee couldn't kill a fly.\"\n\nShe looked up at me again. \"Dee killed my husband, Frederick.\"\n\nI took a deep breath and counted to ten. \"Nobody killed your husband! I didn't! Dee didn't! A tree fell on him! I'm sorry it happened, but &hellip;.\"\n\n\"I'm not sorry. I hated him! But you don't know! You weren't there! You didn't see!\"\n\n\"Dee was in our tent with ME!\" I said, exasperated.\n\n\"Yes, and she was in my tent, too,\" she said calmly.\n\nI took another breath. \"You're telling me that Dee has some sort of supernatural power?\"\n\nShe sighed. \"I should first tell you of my experience with these things. My Auntie &hellip; her &hellip; field of expertise was with children. You see, when a young child is &hellip; gifted &hellip; in some form of psychic ability, he or she tends to be very lonely, sad, confused. We are different, and we FEEL that difference very acutely. Some of us MUST be slaves, for without a Master, our powers turn inward and drive us insane. Others are wildly independent. Auntie helped us, comforted us, taught us how to use our gifts; but also how to shield our abilities from others. She helped us cope. I lived with her all my life, but others &hellip; many, many others &hellip; visited us on the island. Their parents contacted Auntie, and they brought them to her so she could 'refine their powers.' Those that could pay paid very handsomely. And Auntie used the extra money to bring those who could not pay. She taught the children and overtly judged the parents who brought them. If the parents intended to use their offspring's powers for gain, Auntie &hellip; 'changed' them. By the time they left the island, they had only their child's best interests at heart.\n\n\"So you see, Frederick, I grew up being exposed to many, many special young people. They were all different; unique. And yet, they could all usually be placed into a few general categories. There were the 'seers,' like me. Each could glimpse the past; the present; even perhaps, the future. Each had her (or his) own medium: the crystal, the bones, the tarot. There were other types, too.\n\n\"Dee's powers are really rather common; it's just that they are rarely seen in this combination. I'm guessing that you've noticed her most obvious talent. She knows what you want even before you ask for it; probably before you even know you want it yourself!\" I was about to make another contradictory remark, but it froze on my lips. \"You HAVE noticed it!\" she said exultantly. \"But what you HAVEN'T noticed is what she's done to Brenda &hellip; what she's done to me! It's &hellip; it's &hellip; wonderful! \n\n\"It happened to me on that first day we met &hellip; was it only three weeks ago? It seems like a lifetime! Brenda had lured me to your campsite, and we were talking and laughing. It had been MONTHS since I'd laughed. I didn't know I still knew how! And then, just like that; instantly; I felt her inside of me. At first, I thought it was Brenda; but then I felt &hellip;.\" She looked at me appraisingly, and went on. \"&hellip; I felt the baby. It was the most amazing feeling! I was part of her. She was part of me. And I could feel the fullness, the heaviness, the &hellip; wonderful bloating feeling that was another life moving inside of me. It was very, very intimate. But I'd experienced something like this before. Three or four of the kids who visited the island were 'mind sharers,' and I'd eventually learned how to push them out, or how to keep them from getting in at all. They meant no harm; in fact, it's really rather fun; but there is no privacy when you share your mind, and one has to be in the mood to want it.\n\n\"But then you came to the camp, and she left me. I looked at her questioningly, and she winked at me, but that was all. Then, after Rudolph came, after he hit me, after he hit YOU, he was about to hit Dee, too; and I think she did something to him. In fact, I KNOW she did. Because for the next week, he didn't hit me; not even once. He seemed afraid of me. Sometimes, he'd hold his head and just rock back and forth. Sometimes he'd yell for no apparent reason: 'Leave me alone!'&hellip; and I was GLAD. I was happy that he was tormented! Once, he left and didn't come back for almost a day, and it was wonderful, even though I was dreadfully hungry. \n\n\"Still, I saw no way out of my awful life with him, and I did something Auntie told me NEVER to do: I questioned the cards about my own end. I was not sad to find that it was coming very soon. I foresaw the tree &hellip; the very tree I'd been under while talking to Brenda and Dee! It would strike and kill me! You can't imagine how I felt when I sensed the presence inside me again at that moment. Dee had returned. She'd done it once already, even though Brenda has since told me that she was more than a hundred miles distant at the time. She'd found me, and she'd merged with me, and now she knew about the tree; about what was going to happen to me.\n\n\"Later, on the stormy night in the campground, with the wind howling and the lightning flashing and the deadly tree swaying above my head, I felt very much at peace. My nightmare life was about to end, and I was glad it was over. I knew that there were just seconds left, but Dee came back again and entered me. At first, I was overwhelmed by an incredible feeling. I didn't know what it was, though I know it now. It was an orgasm! She was cumming! And I was cumming, too! The orgasm made her stronger; more powerful, somehow. I was very curious, but resentful, too. These were my last seconds on earth, and I wanted to spend them alone. I pushed her out! Immediately, I felt her trying to get back inside me, and I knew what she wanted; she wanted to make me move; move out of the way of the tree. She wanted to save me! But all I wanted was to put and end to my tortured life. I pushed her away one more time, and I was mildly surprised when she did not try to intervene again. \n\n\"Suddenly, Rudolph howled with rage! He got up, and he grabbed me around the waist, and he threw me across the tent onto the other bed &hellip; HIS bed! And then he sat down on mine and just looked at me. He'd taken my place! He looked &hellip; upset and disturbed and angry and very, very frightened. His eyes were wild. The tree exploded above our heads, and I think that for a split second, he knew what was happening. And then it struck &hellip;.\"\n\nShe took a deep breath. \"How was I supposed to feel about a woman who liked me so much that she would kill for me? But, of course, the more I really got to know her, the more I really loved her! Dee is so &hellip; sweet. The problem is that she doesn't really know what &hellip; what she IS. She's never really been taught what her abilities are, or how to control them.\" She looked at me uncertainly for a moment, sighed, and decided to go on. \n\n\"I'm trying to teach her now, but her abilities are much greater than I'd first guessed. For example, last night, while you were in here making love to Brenda, Dee urged me to wheel her quietly to your doorway so that she could watch. I did, but then (it was so amazing!) I was suddenly joined with Brenda. Dee had taken me with her, somehow! I could feel your cock inside me, and it felt &hellip; different. Not as &hellip; full, but very, very deep. And then, you were on top of me, and my hands were pinned to the bed next to my head, and I felt so &hellip; so helpless. And then the orgasm began to build. Mine usually just hits me all at once, but inside Brenda, it built up and up and up, and then it just washed over me like a wave, and it went on forever! Oh, Frederick, it was WONDERFUL!\n\nShe paused to let her breathing slow. \n\n\"A few days ago, when you were sitting with Dee in the hospital, Brenda took me into your office. I realize we're not supposed to go in there without your permission, but she sensed that I needed to know more about Dee. She took down a book from a shelf, and we sat on the couch and she read it to me. It was Dee's diary.\" She studied my eyes for a long moment. \"Do you know &hellip;? I mean, after what you've heard me tell you, do you know why Dee was going to kill herself? Make no mistake about it, Frederick: she was going to do it! She almost did. Do you know why now?\"\n\n\"Um &hellip; she was distraught about her wealth. She felt trapped by her money.\"\n\nWillie smiled patiently at me and shook her head. \"She had lost her Master, Frederick. She could not live without a Master. And because of the scars on her back, she felt ugly and incapable of attracting another.\" \n\nI could only gawk. \"WHAT Master?\"\n\nThat patient smile again. \"Her father, of course.\"\n\n\"She HATED her father!\"\n\n\"Oh, really now! How many slaves do you think there are in the world today? More than you could count, I bet! How many of them do you think hate their masters? The vast majority, I'm sure! I hated mine. Dee was so ready to abandon hers that she attached herself to the first one that showed any interest at all; but he abandoned her! She HAD to have a Master. All three of us have our special gifts, but all three of us must have a Master! Brenda didn't save Dee, Frederick: YOU did!\" \n\nI blinked, my head swimming. \n\n\"And now, she will do ANYTHING to protect you and make you happy. If she knows that you hate someone, especially if she thinks that your happiness is threatened by that person, she may very well do to HIM what she did to my husband. THAT is what I saw in my cards. She can drive him mad, Frederick. He has made himself a part of Brenda; part of her mind. Dee can track him down using that link. Distance is no matter. He could be anywhere in the world, and Dee could still enter his mind. She will do anything to protect the Master she loves.\"\n\nSomething she'd said resonated in my brain. \"All three of you must have a Master&hellip;\" I repeated. \"You're not suggesting that Brenda &hellip;.\"",
        "It was her turn to gawk at me. \"But surely you know &hellip;.\" She studied me closely. \"You gave her the mark &hellip;.\"\n\nI suddenly bristled. \"I've never 'marked' Brenda!\" I retorted. \"I've never lifted a finger against her in anger. I've NEVER struck her! Nor will I ever. I love her; and I love Dee; and I love YOU! And I'd never &hellip;.\" I stopped at her expression.\n\n\"Not that kind of mark!\" she said, smiling. She gazed at me for another moment. \"Frederick, Brenda is an empath. An extremely adept empath.\"\n\nI searched my mind. I'd heard the term somewhere. \"You mean, like, if I break my arm, she takes the pain away and bears it herself?\"\n\nShe gave a little laugh. \"No. Empaths deal in the emotional, not the physical. If you are deeply troubled by a strong emotion, Brenda senses it and shares it. But emotions tend to cloud judgment. Most people can't find a solution to their emotional problem. Brenda possesses the unique ability to see the various solutions to that problem and choose the right path. \n\n\"But the empath's strength is also her curse. She must attach herself to those who most need her. That is why, when she saw ME in that campground restroom, she felt compelled to coax me back to her campsite and try to get me to open up to her. I had had dealings with empaths before, and even though I knew exactly what she was and what she was doing, I felt myself unable to resist her charm, her comfort. It's extremely difficult to resist an empath. And, as I said, she seeks out those who are most in need of her abilities. That is why she attached herself to Dee. And, I'm sure, that is why she attached herself to YOU.\"\n\nI jumped a little and glared at her.\n\n\"Oh,\" she said. \"Poor Frederick. You thought YOU had found HER!\"\n\nAnd now, dear reader, it's time for my LAST literary device: a review and clarification; which, thankfully, will be very short. I suppose you've all experienced a moment in a restaurant when you try to attract the attention of the waiter and he simply ignores you, always looking the other way; never quite \"seeing\" you. In the hit Broadway musical \"Chicago,\" there's a number sung by a guy that calls himself \"Mister Cellophane;\" in which he bemoans the fact that people \"look right through\" him. That was me; and not just in restaurants, either. Earlier in this saga, I told you that I'd had half a dozen sexual encounters before I'd met Brenda. Actually, there had been only four. Three had been overseas, while I was in the military; all of whom had been prostitutes. And the two who had asked for \"dates,\" i.e., given me \"freebies,\" afterwards, had probably had ulterior motives for doing so: getting to the States and starting a new life, most likely. The one sexual \"conquest\" I'd had in recent years before I'd met my lovely wife had involved a girl who was so drunk that she didn't even remember me the next morning. Women didn't notice me. They barely even saw me. To put it succinctly, life before Brenda had been crap. But my life had changed since I'd \"acquired\" my beautiful slave-spouse. People DID notice HER. And since she deferred to me in almost all incidences, they had to notice ME by default. I had become &hellip; real.\n\nAnd now, this white-haired self-proclaimed psychic was suggesting that I had just been a mercy fuck! I was obviously not amused. I closed my eyes and counted to ten again. She must have sensed my reaction.\n\n\"Please, you mustn't doubt the depth of her love for you. She NEEDS you. She loves you completely. You are her Master. You are as vital to her as the air she breathes!\" She reached out and put her hand on my arm, and her eyes were infinitely tender. But then a question entered them. \"But the mark &hellip;.\"\n\n\"What mark?\"\n\n\"The heptagram,\" she said.\n\n\"The hepta-what?\"\n\n\"Heptagram. It's a symbol: a square merged with a triangle.\"\n\nMy eyes widened with sudden recognition.\n\n\"A seven pointed star,\" she said. \"The patch of pubic hair you had her leave just above her pussy. The sign of the empath.\"\n\nI had a lot to think about. None of this could be true. It just didn't happen. Not for real. The girls talked all the time. Was it possible this was some sort of mass-hysteria? I looked at the lovely girl-slave sitting on the edge of the bed, watching me with hope. Would I tell her I believed her, just to make her happy?\n\n\"You've done well telling me the &hellip; truth, Willie. Thank you. I always want you to be open and honest with me. I'm going to reward you now.\" I took the watch out of my pocket and held it close to her, just above her eye-level. \n\n\"Oh!\" she said in a whisper. She looked up intently at it while it spun lazily on its chain. Slowly, she cocked her head to the left; her mouth relaxed and opened, a small drop of saliva forming at the left corner of her slightly smiling lips. Slowly, without my uttering a word, her eyes began to droop.\n\nShe sighed contentedly."
    ],
    "authorname": "blacknight99",
    "tags": [
        "hypnosis",
        "hypnotic slavery"
    ],
    "category": "Mind Control",
    "url": "https://www.literotica.com/s/the-addicted-natural-ch-15"
}
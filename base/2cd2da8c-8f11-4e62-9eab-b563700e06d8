{
    "title": "An Unexpected Opportunity",
    "pages": [
        "Money was tight. Working as a waiter paid the bills but didn't leave much left over. Andy, my roommate, was always paying on nights out. Working at the same restaurant as I did, I knew he wasn't making significantly more than I did. And Andy's gay lifestyle constituted a lot more clubbing than mine.\n\nAndy came home after a night out and I could see makeup on his face which was smeared up making him look like he had a very hard night. Being drunk as well I just helped him to bed. He got up late the next day came into the kitchen, grabbed a coffee, and slumped into a chair.\n\n\"Where do you earn that extra money, you always have?\" I asked Andy.\n\nHe took a long draw on his coffee and then looked up at me over the rim of his cup with a curious, whimsical smile on his face..\n\n\"I have a gig with a catering company that does unusual party events. The pay is very good, but the uniform is pretty outrageous\" he replied quietly as he stared at his slippers.\n\nI pondered what would make him suddenly embarrassed. Andy was a flamboyant gay and when he said the uniform was outrageous it boggled my imagination what kind of outfit would cause such a reaction.\n\n\"Like what?\" I said looking away, trying not sound like I was interrogating him.\n\n\"You sure you want to know?\"\n\n\"Sure. Why not?\" I muttered into my coffee cup.\n\n\"Well, it's a girl's wig, makeup, panties, garter belt, stockings and high heels.\" He giggled as he said this.\n\n\"Seriously?\" What kind of parties are we talking about?\" I asked.\n\n\"The events are for very wealthy, kinky couples, celebrities and others who are well connected -- Hollywood types. They are very discrete, and the parties are invitation only. Invitations are hand delivered and if the guest accepts a limo picks them up at the door. They do not know the location of the event. They just arrive and enjoy the exotic distractions and are delivered home safe and sound. \"\n\nAndy paused and while looking into his cup as he quietly said; \"They are always looking for serving help.\"\n\n\"What exactly do you do at these parties\" I asked, thinking it sounded like an orgy to me. Not that I am opposed to an orgy mind you.\n\n\"I serve cocktails -- mostly\" he said.\n\n\"Mostly?\"\n\n\"Well, there are occasions when extra services are requested.\" Andy had that mischievous grin he had when he was talking about sex.\n\n\"They need help. There is a party this Saturday and they mentioned they needed extra wait staff.\" Andy said in a muffled but excited voice.\n\n\"Not my thing. I like my clothes on when I work\" I replied.\n\nAndy just shrugged and I let it pass.\n\nThe week was passing and business was slow. Customers weren't eating out as much and the tips were smaller when they did. My tips were dwindling down so much that my take home pay was subsistence level. It was Thursday and the weekend was fast approaching.\n\nAfter work Andy met me in a bar that caters to restaurant and bar workers.\n\n\"Were you serious about that alternative party gig needing people?\" I quietly asked.\n\n\"Yes. The hostess called me today asking if I knew anybody who might be willing to work. They are offering a $1000 bonus if we refer somebody who works 4 weekend parties.\" He said as he looked at me intently.\n\n\"Who gets the bonus?\"\n\n\"I do, but I will split it with you if you decide to try it out.\" He said in a very hopeful tone.\n\n\"Do I have to have sex with people?\" I couldn't believe I was asking this. How much was my dignity worth?\n\n\"No -- not if you don't want to. They will tell you to politely refuse and there are no repercussions. Two of the girls won't have sex. They get felt up a fairly often but they have never given in -- and they have been offered a lot of money.\"\n\n\"There are girls too?\" I must have sounded amazed. I have assumed this was a gay orgy party for the ultra-connected.\n\n\"A few. Most of waitresses are gay twinks and cross dressers who look good in lingerie. Everybody wears the uniform though.\" Andy said with a grin while posing like a 50s dinner waitress. Andy was an extrovert and extravagantly gay.\n\nHe was lean, not too tall. Maybe five foot seven inches or so. I bet he didn't weight a pound over one fifty.\n\n\"Think they would take me? I am taller than you.\" Which was true. I am few inches taller but almost as skinny. When Andy drags me to a gay bar, I get hit up by the macho types all the time. I confess having drinks bought for me, getting my ass grabbed and the occasional drunken kiss was fun. I even went down on one really hot stud one drunken evening.\n\n\"You are smooth which is a huge thing. You have legs that go on forever and you have a lovely ass, if you don't mind me telling you. Hope that doesn't make you uncomfortable or anything.\" Andy said with a bit of a blush.\n\n\"Do I have to buy my own things?\" wondering how I would even know what to buy.\n\n\"You need to buy your own shoes, but they supply everything else. They have a makeup girl who does your makeup and your wig. \" Andy almost clapped he was so excited by the idea or for the money, maybe both\n\nI needed the money bad. My bills were piling up. I had a car payment due soon and I had no idea how I was going to pay it.\n\n\"I will try it. Can you call them and see what they say?\" I said, reluctantly.\n\n\"They will want to meet you first. Discretion is the most important thing. I had to sign some paperwork that said I would be sued if I said anything to anybody about the party or who attended. I don't know where the parties are held. A big blacked out SUV picks us up and takes us home. It's up in the hills someplace.\"\n\n\"Can you set that up for me?\"\n\n\"Give me five minutes and I will let you know.\" Andy replied as he got up from his stool at the bar and headed outside to make a call.\n\nI nursed my beer and wondered what I was getting into. Did I even want to do this? I am not gay but from what Andy said it doesn't sound like a gay only party. But I would be dressed like a drag queen. Who wants to see drag queens but old lady's and gay men? But the money sounded pretty good right now.\n\nAndy came back in in less than three minutes.\n\n\"She wants to meet you. Now. She is coming down here. She will be here in about thirty minutes and will meet us at the corner\" he said with just a hint of glee.\n\n\"Shit. That's fast. But what's the worst that can happen.\" I muttered loud enough for Andy to hear.\n\n\"You're going to like her. She is fair, takes care of her people and pays well. I made over $700 last weekend between pay and tips.\"\n\n\"What the hell. One more drink and we go meet her.\" I said sounding more positive than I felt.\n\nA tequila shot and a beer later we left the bar and strolled over to the corner.\n\nI felt a bit like a hooker. Standing on a corner waiting for some rich women to come look me over like a slab of beef. Though as I thought about it a bit of me wanted to be good enough. I didn't want to be rejected. I wanted her to find me attractive enough for her parties. That is my vanity talking.\n\nA big black Mercedes pulled over to the curb. The back window rolled down and a deep, sensual voice said, \"Climb in and let's chat. Andy darling, get in the front.\"\n\nShe was fashionable without being gaudy. Tall, pretty, slim and dressed in a business suit. The driver never turned around.\n\n\"Let's take a ride Mark. Don't go too far though.\" She said to the driver.\n\nShe turned and looked me up and down before she said: \"I am Elaine. Who might you be?\"\n\n\"Dan\" I replied.\n\n\"Did Andy explain what the job is about?\"\n\n\"Somewhat. I am serving cocktails to your exclusive clientele dressed in a uniform of a fairly immodest nature\"\n\nShe laughed and said, \"Pretty close. We strive to satisfy some of the most upscale and demanding people in Los Angeles. Knowing what you know about Hollywood I am sure you understand what that implies.\"\n\n\"Are you gay\" she asked.\n\nHere it was, crunch time.\n\n\"Not gay, but I have been with a few guys. I might be bi. I have no problems with gay sex, but I haven't really been attracted enough to try.\" I said trying to control my nerves.\n\n\"Good enough for me. Let me give you some more details.\" She replied.\n\n\"Dressed as our wait staff are you can expect to be touched, fondled and propositioned during the evening. You can expect this attention to come from both men and women. You can decline any advances as long as you do so politely and respectfully. If you are harassed let me know and the harassment will end. Keep in mind that there are often very generous tips that come with the more personal services you may choose to provide. It is strictly up to you. If you choose to indulge a guest's request there are rooms set aside for more private activities. Your name is never revealed. We provide discretion for our clients and our staff. Wait on our clients with a sense of fun, do your job well you will be well compensated. Our base pay per party is two hundred dollars. Guests are encouraged to tip generously so it's feasible you can make over $1000 by simply doing your job with a smile and letting them enjoy the unusual attire our wait staff is known for.\"\n\n\"That's comforting to know. I need the money and I do like attention. Do I fit your staff?\" I asked.\n\n\"Take your shirt and pants off. Keep the underwear on\" she said in a very businesslike tone.\n\nI unbuttoned my shirt and pulled my pants off, kicking my shoes off as I did. I felt odd. I was being inspected like a horse. Is how aspiring actresses feel when they audition for parts.\n\n\"Not bad at all. You have very little hair, though you will have to shave your armpits. OK -- off with the shorts too.\"\n\nI wasn't expecting that. I hesitated.\n\n\"This is business Dan. I am not interested in you sexually and I am not making porn movies. But it is good to know what you have to understand what will fit you properly.\" Said in an almost clinical tone.\n\nI lift my butt up a bit and pulled my Joe Boxers down. I heard Andy turn around in the front seat. She flicked a button, and a dark window went up between the front and back seat.\n\n\"This isn't a show\" she said as the window closed.\n\nI was impressed. She didn't have to do that. But it illustrated how professional she was.\n\n\"You will need to fully shave down there. Our uniforms don't look right with a lot of hair poking out. But we should have no problem fitting you. What size waist do you wear?\" She asked.\n\n\"Twenty-eight or thirty.\"\n\n\"How tall?\"\n\n\"Five nine, or there abouts\" I replied, sitting up a bit in my seat.\n\n\"You can get dressed. Have you ever worn high heels Dan?\" I wondered if she kept a clip board with these questions.\n\n\"No\" I replied honestly.\n\nThe dividing window went down.\n\n\"Andy, can you help Dan get accustomed to wearing four-inch heels before Saturday?\"\n\n\"I don't have any heels at home.\" Andy replied\n\n\"What is your shoe size?\" she said looking down at my feet.\n\n\"Eight slim\" I replied. I was always a bit embarrassed about my small feet.\n\n\"Perfect. Shop for a size nine and a half or 10. Black closed toe pumps will be fine. Don't buy cheap shoes, they will hurt a whole lot worse than good ones. Shave where we talked about and do your legs while you're at it. Get a pair of thigh high sheer to the toe stay up stockings and practice getting around. I don't want you falling over with a tray full of expensive glassware.\"\n\n\"I guess that means I have the job?\" I asked.\n\n\"You have the job if you want it.\" She popped open a briefcase at her feet and handed me some paperwork.\n\n\"This is our non-disclosure agreement and a description of the job along with our rules and requirements. You will have to sign each. We offer workers comp if you should get hurt on the job, though we have never had anybody get hurt. Sign the forms and bring them with you Saturday. Forget them and you won't work, and we won't ask you back. Andy knows where to meet our driver. Be ready by 3 PM. I am looking forward to working with you Dan.\"\n\nThe car stopped in front of our apartment. The interview was over. I got out and her car pulled away.\n\n\"Is she always like that?\" I asked of Andy.\n\n\"Pretty much. Its business to her. But she protects her workers. I have seen two men and a women escorted out and never saw them again after they got aggressive with the staff. Elaine and two very well-built guys in suits appeared inside a minute and got them out quickly and quietly. A car was waiting` and they were taken home. You can expect to be touched, your ass massaged, touching on the arms or chest or thighs, but they should never grab you. Guys like that make everybody uncomfortable. A quick response informs everybody the rules will be enforced and that the party will be social, relaxed and without issues.\"\n\nThe next day Andy took me shoe shopping. We went to consignment shops and Goodwill.\n\n\"Ohhh -- I love these\" Andy cooed as he pulled a pair of black heels with an ankle strap.\n\n\"They look awful tall\" I said.\n\n\"Four and a half inches honey. Every bit helps your legs look sexier and your butt look tighter. Remember it's all for the tips. Besides, you will look divine in them\" Andy looked my legs over slowly as he spoke.\n\n\"What about these?\" I held up a pair of black shoes with a little strap over the instep and really low heels.\n\n\"Honey -- this isn't a grade school dance. Mary Janes are not what we are looking for.\" Andy said as he looked at the shoes in my hand as if they would infect him.\n\n\"Got just what you need Dan.\" Andy proudly displayed a pair of black heels, very tall, fairly plain but with a long toe.\n\n\"You must try them on Dan.\"\n\n\"Here? There are people around\" I protested.\n\n\"Baby, this place is a drag queen shopping center. Nobody cares\" he said as he held a tiny pair of what looked like stockings just to cover my toes and heels.\n\n\"Now put these on and try on both pairs\" which Andy emphasized with a gently shove into the chair behind me.\n\nI kicked off my kicks, put the little socks on and put on the pair Andy showed me second. My feet went right in and weren't tight. Then I tried to stand.\n\n\"On your toes honey. Stand on your toes\" as Andy demonstrated by getting up on his toes.\n\nI tried that. It worked, helped me to stand.\n\n\"Perfect. Try on the other pair. They are only five and six dollars. We can get both.\"\n\nWe bought both pairs and went home.\n\nI spent almost all my time in the apartment in the shoes to get used to them. In time I would walk reasonably well. I even learned to put one foot in front of the other like I was walking a line. Even a bit of a cross over. I saw models do this on the runways.\n\nFriday came around.\n\n\"All smooth Danny boy?\" Andy was clearly excited for tonight, mostly to watch me become a crossdressing sex object.\n\n\"Yes. My legs and pits feel weird shaved. I don't notice my chest, but there wasn't much hair there to begin with.\"\n\n\"You are going to be such a hit Dan. They are going to adore you. You will have to bring a backpack to carry your tips home\" He grinned.\n\n\"We are getting picked up at 3. Since you have never been there before they need time to get you ready and some instructions.\" Andy said packing up a bag.\n\nAt three the car pulled up, a very expensive SUV with black out windows.\n\nWe drove for over and hour and with the windows totally black out there was no way I would know where we went, how we got up in the hills or where we stopped.\n\nThe door opened and to guys who looked like weightlifting special ops guys in perfectly fitted suits held the door. I looked as we walked. Somewhere in the hills, and the place looked like a resort it was so big. A side door opened and in we went.\n\nA woman, friendly and bubbly, met us.\n\n\"Good to see you, Andy. And you must be Dan. I am Megan. I will be getting you ready for the evening since tonight is your first time with us.\" She said as she held out her hand.\n\nShe led us into a room that was a well fitted beauty parlor. Chairs, mirrors, nail stations, pedicures -- she had it all.\n\n\"Take off everything. We will start by making sure you are as hairless as our guests expect you to be\" Megan said as she busied herself at the counter.\n\nI did as Megan instructed. Pants, shoes, shirt all came off. I waited for my next instruction.\n\nMegan turned, looked at me, \"The boxers too Dan. I mean naked as the day you were born. You're not the first naked man I have seen and won't be the last. I hope.\" She sighed.\n\nI dropped the shorts.\n\nMegan made the finger motion and I slowly turned for her. She inspected me thoroughly. Ran her hands over my pits, my chin and examined my balls. I confess I got aroused as she fondled me. But Megan paid no attention and moved on with an almost clinical demeanor.\n\n\"Not bad Dan. You did pretty well but we will finish you up.\" She said as if she were appraising a dog about to be groomed.\n\nFor the next two hours I was waxed, shaved, powdered, polished and colored. A wig, same color as my own hair, straight with a bob and front bangs was identified as right for me. As we finished up my nails were done in a modest pink, toes to match.\n\n\"Go get your uniforms on, let me see your shoes.\" Megan instructed. I held out both pairs. She picked the taller pair. \"Perfect\" she remarked.\n\nStill buck naked I followed Andy to a very nice dressing room. Each locker had a name on it. I saw Andy's looker and mine was right next to it.\n\nI opened the locker. Folded neatly on a shelf was a tiny thong, a small bra and a small wooden box. Opening the box I found a pair of dangly ear rings, a few rings of various sizes and a black ribbon with a little medallion on it.\n\nI held the ribbon with the medallion and looked at Andy.\n\n\"It's a choker. Turn around\" Andy said as he took it from my hand.\n\nHe ran it around my neck, adjusted up a bit and tied a bow in the back. The medallion was dead center of my throat.\n\n\"Helps cover the Adam's apple\" he stated in a rather matter of fact tone.\n\nI picked up the thong, which was silk, or satin that rode high on my hips with a bit of a silky black pouch in the front. I pulled it up my legs and positioned it the best I could. I could feel the thong pressing against my hole. It felt a bit stimulating. That was a different sensation for me. I have been with men but never had any interest in having my ass played with, but the thong felt really sexy.\n\nI picked up the bra -- it was all strings and tiny cups. I tried clipping it in the back but I was just hopeless at it.\n\n\"Hold on Dan\" Andy said as he got behind me and did the little hooks into the little loops.\n\nHe helped me adjust it so the straps were flat and the cups were positioned over my nipples, though they barely covered them.\n\nThere was a garter with straps hanging down. It seemed I should put that on before the stockings.\n\n\"Sit and put your stockings on. Watch me\" Andy said, noticing my uncertainty.\n\nHe took the stockings out, sheer black with a kind of rubber around the tops. He took one stocking and using two hands rolled it up till the toe was all that was left. He pulled it on his foot, pointing his toes and slowly worked them up his leg making sure the heel was in the right place. I watched him do the other before I tried it.\n\nIt took two attempts on my right leg before I got it right. The left was easier now that I had practice.\n\nSlipping into my heels I stood and looked down.\n\nIsaw a full length mirror and strutted over.\n\nFucking hell -- I was hot!! Black heels, stockings the garter, panties and bra. My hair was just so sexy and my earrings and rings made me look like a flat chested model!!\n\n\"Oh honey -- you're going to be so busy tonight\" said Andy as he stood behind me looking in the mirror.\n\n\"Wait till your makeup is done. You are going to be the hottest gurl here.\" Andy said in a very sultry voice.\n\nOther wait staff were coming in to get ready and I got all kinds of complements. They were all very slim, and I noticed their eyebrows were done and nails were already done. As they got dressed I realized how androgynous they would be. All were obviously guys but dressed as sultry, hot hookers. The locker room was filled with sexual tension.",
        "Andy touched my shoulder.\n\n\"Don't stare, it's not polite\" he said.\n\nI finally looked at Andy. He was wearing the same black outfit but he had a long straight dark blond wig on. I would have jumped him he looked so good.\n\n\"Damn. You smoking!\" I said as my eyes ran up and down him.\n\n\"Thank you, Danielle. You need a name fitting the outfit. Come on, makeup time.\"\n\nI practiced my strut down the hall to the salon.\n\nMegan looked me over head to toe.\n\n\"That came out pretty well. Let's get your makeup on and then the boss will check you over to make sure you're ready. I think you will pass with flying colors sweetie.\" Megan said as she patted the chair in front of her.\n\nI sat. It took a fairly long time. Megan said there was beard cover, foundation, light powder, eye brow shaping, eye liner, false eyelashes, eye shadow and lipstick. I wasn't allowed to see anything until she was done.\n\nFinally, she stepped out of the way, and I could see myself in the mirror.\n\nI was a she. My face had smokey dark eyeshadow that made my blue eyes just jump out. My lips looked fuller, a bit slutty. They shined a bit. Megan called it lip gloss. My face was utterly smooth without a hint of a beard.\n\nI starred open mouth for what must have been thirty seconds.\n\n\"Pretty good work if I do say so myself\" Megan said.\n\n\"I look pretty. Sexy and feminine\" stating the obvious.\n\n\"You have good cheekbones, nice lips and your chin isn't so big. You're easy to feminize Dan.\" Megan said.\n\n\"Danielle\" Andy replied.\n\n\"Danielle -- it fits.\" Megan approved.\n\nMegan picked up the phone, said a few words and said, \"Elaine is on her way down. Why don't you wait over here. She will be here in a few minutes.\"\n\nI stood, practicing sticking my chest out and butt out. I liked the way I looked. I never would have imagined I could be so completely transformed.\n\nThe door opened. Elaine stepped in. A very tight black skirt, sheer white blouse with no bra. You could see her nipples clearly. She wore very high heels and black stockings, sheer just like mine.\n\n\"Eyes up Dan. Is it still Dan?\" She posed the question to nobody in particular.\n\n\"Andi is calling me Danielle\" I replied.\n\nHonestly, as hot as she was, she intimidated me a bit. Her hair was up in a very tight bun and her makeup was not so glamorous as sever. I realized she looked like a dominatrix. And she carried herself that way. Very confident, sure of herself, and my position in that hierarchy.\n\n\"Walk for me Danielle.\"\n\nI turned and slowly strutted to the end of the room, concentrating on walking with my feet on a line which made my hips move.\n\nI turned and walked back.\n\n\"Very good. You are everything I had hopped you would be. How do you feel now that you see yourself?\"\n\nI looked back at the mirror.\n\n\"I am not sure, it's so much to take in. Honestly, I like it more than I expected too. I feel really sexy.\" I said, still looking in the mirror.\n\n\"You look really sexy.\" She replied.\n\nElaine began: \"OK -- lets cover the rules. Only speak when spoken to. Take orders for only 3 or 4 drinks at a time. If you're not busy mingle around your assigned area. Expect to be touched. You are here as, shall we say, entertainment. Our clients are generous and if you are polite and friendly, they will tip accordingly. If they ask you for special favors, sexual favors, it is totally up to you if you want to provide them. Any form of intercourse is $500. $300 to you, $200 to the house. Special favors are negotiated by you. You will need to provide the house 40% of any agreed transaction. There are private area's that are curtained off the main area that are available on a first come basis, but liaisons can happen anywhere. We have no restrictions on consensual play. If you are going to be detained for a bit let the bar tender know and she will inform me so we can cover for you while you are busy.\"\n\n\"If you choose not to participate, simply say -- Its very kind but no thank you. Don't say anything else. Clients are informed no is no. If a client becomes insistent and you feel pressured there is a button under your tray you can press to call for help. The help will be quiet and discrete, but it will be quick. The client will be informed that you are off limits to them and if they become difficult, they will be taken home.\"\n\nAt this point Elaine looked into my eyes. \"I know your bisexual and that is an advantage here. There are women who enjoy men dressed as you are. There are couples that like the unusual. If you are willing and open minded, you can do very well. Our clients are sophisticated, and many are very well known. It is to their advantage to treat you will because discretion is vitally important to them.\"\n\n\"Danielle the final rule is have fun. Feel sexy, alluring, seductive and desired. Wear that sensuality like a fine dress. That confidence will be very attractive. Let them caress you, enjoy that. Its fine if you get an erection. Your panties are designed to cover you even in that eventuality. Flaunt yourself a bit. You are going to enjoy having that kind of power.\"\n\n\"That's it. Any questions?\" Elain asked.\n\n\"Are condoms available?\" I asked.\n\n\"You will find bowls scattered around the area and each private area is supplied. You will also find lubricants should that be useful. I would keep one on you, in your bra or tucked into your stocking just in case the need is immediate.\" Elain said with a very small smile.\n\n\"You have station four. That is near the bar around the koi pond. I will keep an eye on you to be sure you are ok. Clients will begin to arrive shortly. Go meet your bar tenders then wait in your area. Don't sit. If you need a break, find me and I can get you 15 minutes off your feet. Go make lots of money and have fun.\" And with that she walked away.\n\nAndi came by, showed me area four and we met the bartenders. They were fully clothed in black slacks white shirts and red vests.\n\n\"Danielle\" I said holding my hand out to the first bartender, which she ignored.\n\n\"Nichole. Place your orders on the end, we will have them to you quickly.\" She said in a rather matter of fact manner.\n\n\"She is a bit of a bitch. Joey is more friendly and fun.\" Andi said as we waved at Joey.\n\nAndi showed me area four and I waited as instructed.\n\nWithin a few minutes guests began to walk in. The first went to the bar and then found a table. My first clients sat, and I went over to be seen by them since they already had their drinks. Two men and three women. One woman waved me over.\n\n\"Aren't you just so lovely\" she said.\n\n\"Thank you. May I get you anything?\" I asked.\n\n\"Yes, stand next to me for a minute\" she said.\n\nDoing as instructed she casually ran her hand down my leg then up to my ass. She caressed my butt like she would pet a favorite cat, very casually. The man beside her did the same though his hands went to the front of my panties.\n\n\"My you are very sexy. What is you name honey?\" The gentleman asked.\n\n\"Danielle\" I replied.\n\n\"Danielle, I would like a bourbon, two rocks. My wife will have a Jack and coke. Anybody else?\" He asked as he looked around the table. He gave my package a squeeze and released me. I rather liked how they caressed me. I was getting an erection which I am sure they noticed.\n\n\"Bourbon, two rocks, Jack and coke, a Pinot Noir and scotch neat.\" I said to Nichole. Before I got the tray on the counter the drinks were ready.\n\n\"Bartenders get part of your tips so be good at your job.\" She said flatly. I starred at her and left.\n\nI delivered the drinks, was caressed and the woman put a $20 bill on my tray.\n\nTwo men waved for me.\n\n\"How can I help you gentleman\" I said, putting cocktail napkins in front of each.\n\n\"Two white wines and let me feel your cock.\" Said one man.\n\nI was taken off guard and just froze for a second.\n\nHis hand reached out and pulled my panty aside and he stroked my cock.\n\n\"He is perfect Dave. So smooth. Not small but not too big either. Don't go to far honey, I may want some of that later\" the man said. They both laughed.\n\nI tucked myself back in and replied, \"Honey, all you got to do is pay the man and I will be your bitch\" I said with a wink and a wiggle as I left. Both men laughed.\n\nThis was going to be a lot of fun. I was getting into the spirit of the job. Flirt, be sexy, and let them play.\n\nMore people arrived. I was busy for the first hour keeping up with drinks and being fondled.\n\nA very elegant couple arrived and came over to me. She looked me over head to toe and smiled. He looked quickly then he looked at his feet.\n\n\"Two scotches, single malt, neat with water\" she said.\n\nI brought her drinks. She took my arm and looked at me.\n\n\"Would you be willing to suck my husband's cock?\" She asked.\n\nI froze. I wasn't expecting so blunt a request so quickly. He wasn't a bad looking guy, just very intimidated. She was definitely in charge. Both were late 40s to early fifties. In good shape. Her skin tight dress, knee length, highlighted every luscious curve.\n\n\"While you think about it, get me a G&amp;T and him a wine spritzer. Don't take too long.\" She said as catching my eye as I was catching her body.\n\nI moved quickly to the bar.\n\n\"G&amp;T and a wine spritzer\"\n\nElaine appeared behind me.\n\n\"That is Audrey and Ted. They are Hollywood insiders. Treat them well\" she said.\n\n\"She asked me to suck her husband off. I got the impression she wanted me to do it right there. Is that ok?\" I asked.\n\n\"Yes it is. It is expected. Audrey kind of owns Ted. If he speaks at all I will eat your panties. She likes to watch, and humiliate Ted for amusement.\"\n\nGrabbing the drinks I strutted back to their table slowly so she could watch me.\n\n\"I would be thrilled to suck your husband off. Will you want me to swallow or will he cum on my face?\" I asked, more to reassure Audrey I was happy to comply.\n\n\"I will let you know when the time comes.\"\n\nAudrey waved to Elaine, putting up 6 fingers. Elaine looked at me and nodded.\n\nI slowly squatted down and undid his pants. His head was down but his eyes were closed, as if he wasn't permitted to see me or watch.\n\nHis cock came free and it was very small. I looked over at Audrey as I slowly stroked it.\n\n\"Pathetic, isn't it? But do the best you can.\"\n\nAudrey sat back, spread her legs a bit to allow me to look up her skirt. Her bright red lace panties were obvious. I smiled and turned to my work.\n\nI took Ted into my mouth, he was very limp. I tickled his balls with my nails as I sucked and tongued his cock. A few minutes of effort and he finally got hard though the difference wasn't very much. I pushed my head down onto him and used my mouth to suck on him like a boy sucks on a straw in a thick shake.\n\nTed never moved, never moaned, never even looked.\n\nAfter a considerable effort I felt his balls tighten, he was ready to cum.\n\nFor the first time Ted moved. He twitched. It was totally involuntary.\n\n\"Stop.\" Audrey demanded.\n\nI pulled off, looking toward her.\n\n\"He isn't allowed to cum tonight. But you did a good job. Maybe later you will do the same for me?\"\n\n\"I would be honor, and an obvious pleasure, to serve you.\"\n\nI took my time getting back to the bar. My lipstick was smeared but other than that my face was still pretty sexy.\n\nMegan appeared, fixed my lipstick, patted my ass and faded into the background.\n\n\"Very well-done Danielle. You seem to enjoy your work. Now back to your tables. Keep my clients happy and we will both do very well tonight.\" Elaine said. I found myself, oddly, wanting to please Elaine.\n\nI took a moment to glace around. Andi was bent over a table with a woman fondling his ass, her husband was stroking his cock as she watched. Another server was laying on a table, feet high in the air as a very large man was fucking him. It was an orgy and the servers were the whores for hire. I realized at this moment I was a professional crossdressing hooker. That thought hit me hard.\n\n\"Yes. You are.\" I heard her say behind me.\n\nElaine was behind me. I looked at her. She was studying me.\n\n\"You are a prostitute, at this moment.\"\n\nI stood stunned -- frozen. I suddenly felt dirty, degraded and a bit slimy. What started as a lark to earn extra money was redefining my life -- and I wasn't ready for that.\n\n\"Danielle\" Elain said.\n\nI ignored her.\n\n\"Look at me Danielle\" she said more forcefully.\n\nI turned and looked at her. Severely beautiful, stunning and dominating and it dawned on me Elaine was my pimp, my manager, the person who profited from me being a sexual object to rich and privileged people.\n\n\"Danielle -- it's your life, you control it. Even now if you choose, I will have you taken home and this event never happened. Not a soul will know you were here, other than Andi. But let me explain why what you are doing is not anything like a beaten, drug addicted street walker or a you girl forced into serving men in cheap hotels.\"\n\nShe reached out and lifted my chin, looking me in the eye.\n\n\"For a privileged few, sex for hire is among the many pleasures that they use to differentiate themselves from the great unwashed masses. For those uniquely positioned to provide that service to the very well connected and economically elite, it poses very unusual opportunities. \"\n\nI felt a tear running down my cheek. I didn't feel uniquely positioned, I felt slimy and disgusting. Odder still I still enjoyed being dressed as I was. I liked the sensation of being sensual, sexy and slutty. Conflicted was simply not adequate to explain how I felt at that moment.\n\n\"You were enjoying yourself just a few minutes ago until that thought entered your mind. Let me try to put this into perspective for you. Throughout history women, and some men, have been servicing the needs of rich and powerful. In China it was formalized, and in one instance a concubine of the emperor became the first woman emperor of China. Roman baths are decorated by fresco's of courtesans. For those who learn to leverage that position, wealth and influence can be theirs, if they have the beauty, intelligence, empathy and ambition.\"\n\n\"You have all those things Danielle. And admit it, you enjoy the power that comes with being so desired. Look around the room. Tonight, you will find the most powerful people in Los Angeles. And you have unlimited access to them, and their deepest, darkest secrets. Get to know them, cater to them, be personable and alluring. You might find that a few will want to access you outside of our events. You might be invited to private parties and not as Danielle, but as Dan. You are arm candy no matter how you dress. Acting careers have begun here, by trans and cis people for almost two decades.\"\n\nElaine handed me a drink, brandy.\n\nI swallowed it down. I was thinking hard.\n\nI looked at myself in the mirror behind the bar. I did look sexy, I looked smoking. In the mirror I saw couples looking at my ass, my legs and feet in high heels and there was desire in those eyes.\n\n\"Who is using who here Danielle?\" Her voice said in my ear. How the fuck does she always know what's in my head???\n\nMy body began to vibrate. A wave of confidence and commitment washed over me. I could use them.\n\n\"When the prey becomes the hunter, those they hunt rarely have a chance.\" She did it AGAIN.\n\n\"I need a touchup on my makeup, and I need to get back to work.\" I said to Elaine with a small, predatory smile.\n\n\"God help those poor bastards. You are going to eat them alive Danielle.\"\n\n\"No blackmail, no divulging identities you know. But your smart, you won't need that\" Elaine said.\n\nAnd then she gave me and honest, sincere smile and a hug.\n\n\"I was you. I started here just like you. I am now wealthy, quietly positioned in the houses of power in this town. I think in short order I will be seeing you in many places outside of here.\"\n\nI felt something brush my face. Megan was fixing my makeup. Elaine moved away.\n\nI grabbed my tray and headed back to the action.\n\nI slow strutted out to Audrey and Ted.\n\n\"Can I get you anything?\" I asked, very suggestively.\n\n\"Yes dear, you can. Would come with me over to the private area?\"\n\nI caught Elaine's eye and motioned to the private rooms. She smiled, nodded and got help covering my area.\n\nAudrey took my hand as we walked, with Ted a very subservient three feet behind us.\n\nReaching a room with a gauzy curtain Elain parted the curtain and began to enter.\n\nI saw three people already occupied the room. A beautiful woman was in a sling, her dress shoved up and her bra yanked down. Her hands and feet were in stirrups on the chains holding the sling up. A trans waitress was attempting to penetrate her, while a man behind the waitress was attempting to penetrate the waitress.\n\n\"George, darling. I think Danielle can help you.\" Said Audrey to the older man.\n\nHe turned, looking at me. I almost gasped. He was a director of some immensely successful movie franchises ever done.\n\nI posed for him, slowly turning.\n\n\"Can you fuck my wife while I fuck you? Our waitress seems unattracted to women. Are you capable?\" He said, rather breathlessly.\"\n\nI strode over to her, pulled my panties aside and my cock, finally freed from confinement, sprung to full length. I slide into her. I was now fucking an actress who I knew. Not A list but B list and rising. She looked at me surprised when I penetrated her but smiled as I filled her up.\n\nI then bent forward slightly, spreading my feet. I put lube where necessary and looked back at him.\n\n\"Ready when you are baby\" I said to him.\n\nHe grinned, driving his modest cock into me with glee.\n\n\"Audrey, you always know where the best talent it. Call me next week, I have new project we need to talk about.\" He said as she stood to watch. Even Ted looked up to watch.\n\nI put a thumb on her clit and let George set the pace. Each thrust from George pushed my cock deeper into her beautiful pussy. My fingers worked her clit and I watched her close her eyes and surrender to the sensations of my cock, fingers and her fantasy of being taken by a sexy cross dresser.\n\nGeorge was just kind of fumbling around in me. He couldn't seem to set a rhythm, and he would just wiggle around inside me.\n\n\"Why don't you hold still and let me do the work?\" I said over my shoulder.\n\nGeorge stopped and I begin to rock back and forth on them. I put a hand behind me to pull him close so he could go as deep as his little cock would go and allow me to pull out then thrust back deeply into her at a pace that seemed to turn her body to jelly.\n\n\"I'm cumming\" George said.\n\nI pushed back into him and ground on his now vibrating cock. I could feel it leaking out of me. He shook for a few seconds then collapsed backward onto the daybed behind him.\n\n\"Did he cum in you\" she asked?\n\n\"Yes, I can feel it\" I replied looking down at her as we continued to fuck slowly.\n\n\"Let me feel\" she said as her hands pulled me deep and reached behind me then running around in the cum dripping from my ass.\n\nI felt her scoop as much cum up as she could and pulled it around and showed her fingers, glistening with pearly white cum. He tongue flicked out and took a lick then she looked me in the eyes and pressed her fingers to my mouth.\n\nI eagerly sucked her fingers clean, then leaned in and our lipstick covered lips, glistening with his cum, met and caressed.\n\n\"Will you cum in me?\" She asked as her heels pulled me into her and she ground her needy pussy on my cock.\n\nI replied by fucking her with a purpose. I grabbed the chains holding the sling and begin to pull her into me with more force than before.\n\n\"You're so beautiful you hot bitch -- fuck me\" she said as she looked into my eyes.\n\nHer face and look, along with her pussy clamping down on my cock sent me over the edge.\n\n\"In your tight cunt?\" I asked her as I was about to explode?\n\n\"Will you eat me after you cum in me?\" She panted back at me.",
        "I nodded yes and she pulled hard on me, grinding he pussy into me with a vengeance. I feel her nails digging into my thighs and her eyes watched mine so very closely.\n\nI spasmed, then began to flood her with cum. It was a mind blowing orgasm, punctuated by her screaming as her body convulsed in an epic orgasm. She held me in place as wave after wave of shuddering convulsions overcame her.\n\nFinally, she began to relax, her body melting into the sling like liquid into a cup.\n\nI pulled out finally. Her head popped up.\n\n\"Eat me. Eat your cum out of my pussy. You said you would\" her eyes like accusations looked at me.\n\nI knelt and buried my face into her dripping wet pussy. I licked and sucked, licking her clit as I collected as much cum in my mouth as I could. I felt her body tense again and I sucked her clit into my mouth and flicked it with my tongue. She spasmed again -- and again -- and again.\n\nShe made lewd guttural noises with each wave of her orgasm. She sounded like an animal. After the fourth or fifth wave I stopped licking her. I stood over her until she looked at me. I opened my mouth to show her the cum and then leaned down to her. Her open mouth met mine and we kissed in the mixed flavors of her and my orgasms. Tongues caressing and licking in a post orgasmic buzz.\n\n\"That was amazing\" said George, his eyes on her, then on me.\n\n\"I have never watched two beautiful woman like that, so beautiful, so lost in lust desire. Thank you Danielle. Audry -- stay a second.\" George uttered as he dismissed me.\n\nI looked at her as I left and she sent me a kiss and a smile, that was enough.\n\nI went back to the bar. I must have looked much worse for wear. The party was thinning out and the well-heeled clients were headed to the darkened stretch limos.\n\n\"First time here and you end up with George and Melinda. Pretty impressive\" said Elaine as she appeared from behind the bar.\n\nThe surly bar tender handed me a soda water with a slice of lemon in it, looked at me a second longer than necessary and then grinned the smallest possible grin and nodded at me. I wasn't ready for that.\n\nAudrey appeared and took Elaine off to the side. I just sat there, exhausted, trying to fix my stockings and hair. Such a girly thing to do but it came naturally now.\n\nElaine leaned over toward me.\n\n\"Why don't you go get changed and ready to go. I will come down with your tips shortly. Besides you look like you need a long, hot shower right now\" she said in a very matronly kind of way. I took my hint, picked up my pumps and headed to the locker room.\n\nAndi was already there. She looked like she had been in an orgy and lost. Her face was a total mess, her stockings torn and her panties lost. She was smiling in the way only somebody totally, sexually satisfied can smile.\n\nShe looked up at me and laughed.\n\n\"Don't you look like a worn-out slut\" She giggled as she looked me over head to toe.\n\nI pulled the pins holding my wig on out and pulled the wig off and rubbed my head as a way to stall for my thoughts to collect.\n\n\"You mean I look kind of like you?\" I said looking at Andi with a small grin.\n\n\"And it looks good on you too\" Andi replied.\n\nI chuckled. I took everything off and headed to the showers. I just stood in there for maybe 15 minutes scrubbing and feeling the warm water run over my exhausted muscles.\n\nI finally wrapped a towel around me and headed back to my locker. I was drying my hair when Elaine came into the room with a number of brown packets each with a name on it.\n\nAll the gurls got theirs before she came over to Andy and I (he had also showered and was back in guy mode.)\n\n\"You had a very good night, Andy\" Elaine said as she handed Andy a fairly thick packet.\n\n\"Can you come into my office for just a minute Dan?\" Elaine said as she walked toward a small room beside the locker room.\n\nI looked at Andy, who looked back and me and shrugged. I have no idea why I was being called into the office.\n\n\"Close the door honey\" Elaine said as I slide in.\n\n\"Do you have any idea what you just did up there?\" Elaine said as she looked at me very intensely.\n\nA sense of dread came over me. What did I do wrong? I think I followed all the rules. I don't remember anybody complaining.\n\n\"Did I do something wrong?\" I stammered.\n\nElaine let out a full honest laugh.\n\n\"You impressed the most important director in Hollywood and his wife is infatuated with you. I have seen plenty of gurls come in here but not one had a night like you just had. You are the best gurl I have had here in a long time. You're a true bisexual that looks like a 40's Hollywood starlet in drag. Your more rare than an honest politician.\"\n\n\"Audrey told me that George and Melanie want to know if you will visit them on occasion, discretely of course. Audrey also hinted, and I do mean hinted, at a part in Georges upcoming movie, calling for a tranny hooker with a big heart. Don't get your hopes up but you should consider the offer.\"\n\nElaine held out two packets to me.\n\n\"It wouldn't all fit in one packet Dan. All your customers tipped very generously. You fulfilled a lot of fantasies tonight.\"\n\n\"Please tell me you will come back next month? I will throw a bonus in for you, but you can't tell Andy.\"\n\nI just nodded, said sure and got up to leave.\n\n\"Call me when you decide what to do about George. I think it would be a good move for you. It would have to be exclusive for them but then you won't need anybody else\" Elaine said as I opened the door.\n\n\"I will. I have to think about tonight. It's a lot to process right now. We will talk soon.\" I said as I started to pull the door shut.\n\n\"Elaine? I asked\" her head popped up from the paper work.\n\n\"Thank you, however it turns out you have given me an experience of a lifetime and I am grateful.\" I said as I closed the door.\n\nThe ride back in the big SUV was just Andy and I and he was prattling out like he always did.\n\nI spent the next week thinking. Oddly I found myself buying panties and shaving everywhere regularly during the week. I even sat down at Andy's vanity and practiced my makeup. I began to enjoy being Danielle.\n\nI began to go out with Andi as Danielle, and I never bought another drink. I loved the attention, and I flirted shamelessly and even went home with one very handsome guy. He made love to me like a girl and I spent the night, but just that one night. I didn't want a relationship. I was just exploring being Danielle.\n\nI called Elaine back and we talked about George and his offer. I agreed to visit one night in about a month. I needed some time to grow my hair out. I also told her I would very much like to waitress for her again. Elaine seemed about as pleased as Elaine gets, which isn't much.\n\nI thanked Andi for opening a new door for my life. I don't know where it will lead but I want to find out."
    ],
    "authorname": "jim_janes",
    "tags": [
        "crossdressing",
        "gay",
        "bisexual",
        "oral",
        "anal",
        "bareback"
    ],
    "category": "Transgender & Crossdressers",
    "url": "https://www.literotica.com/s/an-unexpected-opportunity"
}
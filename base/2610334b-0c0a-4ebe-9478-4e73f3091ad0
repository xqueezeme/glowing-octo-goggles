{
    "title": "A Long Time Coming Ch. 08",
    "pages": [
        "(c) All rights reserved. No part of this story may be reproduced, copied, stored in or introduced into a retrieval system, or transmitted, in any form, or by any means ( electronic, mechanical, photocopying, recording or otherwise)), without the prior expressed written permission of the author. \n\nA long Time Coming Chapter Eight\n\n-\n\n\n\nWhile the holidays were an especially happy time for most people for some it was a lonely road to travel. \n\nWhen Francine Winestein's sister Kate joined her at Sabatino's Italian Grill Restaurant at twelve thirty she was already a bit tipsy, now she was well on her way to being drunk. \n\nKate watched her older sister with a feeling of helplessness. She didn't need to be a mind reader to know that Alex was at the heart of Francine's torn emotions. However, she wasn't keen on censuring her knowing that she might only exacerbate the situation. \n\nFrancine dated a few men in the past few months, but no one more than a few times. She was picky, too picky and it hadn't helped that she compared every one of them to Alex. \n\nThis was a new side of her sister, one that Kate wished she could have avoided seeing. She'd always thought of Francine as strong and independent, but she seem to have lost some of that edge. After the break up she still carried on like she was bulletproof, but her armor began to crack when Alex became engaged.\n\nKate knew that Francine invited her to lunch to pump her for information about Alex and Jade, not that she knew much. The McCord men respected each other and their boundaries when it came to personal relationships. All she knew was that Alex had become a bit of a homebody since he and Jade got together. That was obvious by the fact that she and Jason didn't see him out at the usual places. \n\nKate wasn't about to get in the middle of Francine's problems. Her sister was a big girl and she simply had no choice but to deal with the fact that she and Alex were not destined to be together. She loved her sibling, even if they hadn't been particularly close in recent years. \n\nThe only time Kate had seen Alex and Jade together was at dinner with his family. Although her sister wanted a blow by blow of what happened that night, Kate refused to oblige her. It was obvious to her and everyone else there that Alex was deeply in love with Jade and he adored her little girl. What good would it do for Francine to know that?\n\nSeeing Francine trying to drown her hurt, Kate felt compelled to say something.\n\n\"Frannie, don't you think you've had enough,\" she queried in a gentle tone.\n\nLooking at Kate above her wine glass, Francine replied, \"I don't know, maybe I haven't had enough.\"\n\n\"Frannie, I know how much the break up with Alex hurt you, but you can't spend the rest of your life drowning your pain. He's moved on and you should do the same.\"\n\n\"I should do the same?\" Francine sneered. \"Would you be so together if Jason left you for another woman?\"\n\nKate looked at her sister calmly and gathered her thoughts before responding. \n\n\"Technically, Alex didn't leave you for another woman,\" she said. \"He didn't meet Jade until weeks later. As for your question, I'd be heartbroken for a long time, but I would hope that someone would be there to try to pull me together. I'm your sister and I love you. I just hate seeing you like this.\"\n\nSighing, Francine said, \"Yeah, technicalities. That would be something an attorney would know about.\"\n\nNot through with the subject, she muddled on. \n\n\"Sometimes I think it would have been better never to have met Alex; he ruined me for other men,\" she said. \"Then I think of our time together and I want those memories, even though they hurt me now. I don't know what to do with myself. I'm thirty two years old, not a damn teenager. I should know how to move on.\"\n\nTaking Francine's hand, Kate said, \"It's not about age, it about emotions. You wanted more out of the relationship than Alex was able to give. I know I got lucky with Jason, but it could just as easily been the case with us. Remember Jack Reynolds, the guy who fell in love with you when you weren't in love him? No one was to blame.\"\n\n\"I know, but when it's you getting the short end it's a different story,\" Francine admitted. \n\nIt was at that moment that Alex walked in with Jade. Kate, who was facing the door, saw them first. Francine noticed her expression and turned to see what had caught her attention. \n\nWhen Francine saw the woman at Alex's side, she was surprised. Alex walked to their table with his hand on the woman's lower back. No one could mistake it for anything other than a possessive gesture. The woman seemed to accept the gesture as one to which she had become accustom. She belonged to him and there was no doubt about it.\n\nThey sat on the other side of the room diagonal to Francine's view. She could see them without being obvious and, heaven help her, she couldn't tear her eyes away. She'd wondered what this mysterious woman looked like. She'd imagined a tall blonde much like herself, but more of a self made person or an heiress. Alex didn't have a type to her knowledge, but Francine had always been jealous of women who owned their businesses or were socially elite. \n\nIt was obvious that the woman with Alex was African American because of her coloring, but her features hinted at a racial mix. It was equally obvious that they looked good together. She was pretty, but Francine thought herself prettier. She wondered what Alex had seen in this woman that made her the one. Maybe it was time that she found out.\n\nBefore Kate could stop her, Francine got out of her seat and headed across the room. Cringing, Kate prayed that her sister wouldn't do or say anything inappropriate or embarrassing. Truth to tell, she didn't know what Francine was capable of doing. \n\nSince Jade was sitting facing where Kate and Francine were seated, she was the first to see Francine approaching, although she didn't know who she was. She noticed that the woman had a look of determination on her face, which turned to something that tried to be a smile as she drew near. \n\n\"Alex.\" Francine said breathlessly as she reached the table. \n\n\"I'm sorry to interrupt your lunch, but I just wanted to say hello and congratulations.\"\n\nLooking at Francine, Alex could tell that she'd had a little too much to drink. Her eyes were glassy and her smile forced. He hoped to hell that she didn't make a scene.\n\nOne of the things he hated dealing with was public scenes with woman. He'd only had one in his life and that was enough. He hoped to dispatch Francine as soon as possible without any drama. \n\n\"Francine. Good to see you again,\" he said. Then looking at his companion, \"Jade this is Francine Winestein; Francine, Jade Harris, my fianc\u00e9e.\n\n\"Please to meet you Miss Harris and congratulations,\" Francine said, feeling like the words would stick in her throat. \n\n\"Nice meeting you Miss Winestein and thank you. I understand that you are the head buyer for Marcus Mann women's clothing and accessories. I've shopped there a few times, you have impeccable taste,\" Jade said with admiration.\n\nNot expecting the compliment, Francine was momentarily thrown off balance. She quickly regained her composure. She lost that confrontational spirit and actually felt embarrassed that her intention was to cause trouble. \n\n\"Thank you so much,\" she responded. \"It's a rewarding job and I'm always happy to hear that our customers appreciate the effort.\" \n\nTurning back to Alex with a genuine smile, she said, \"Alex, it was nice seeing you again, enjoy your meal. Miss Harris.\" Nodding to Jade she left and returned to her table. \n\nAs soon as she sat down, Kate pounced on her.\n\n\"What did you say to them?\" she demanded.\n\n\"Smiling, Francine said, \"Cool it, little Sister. I only said hello.\"\n\n\"It looked like more than just hello,\" Kate noted.\n\n\"Well, I couldn't just say hello and leave,\" Francine reasoned. \"Alex obviously told her about me. She said I have impeccable taste as a buyer for Mann's. I didn't expect that. I thought she'd be kind of stuck up, but she was very nice. She wasn't just talking to be kind either, I could tell by her eyes. She has the most amazing golden brown eyes; she's really quite pretty even close up. But, I don't think it's her looks that attracted Alex, well maybe initially.\" \n\n\"What does that mean?\" Kate asked.\n\n\"I really don't know. It's just that I finally realized that Alex's in love with her, really in love with her. Saying it and seeing it is two different things and I could see it. They were holding hands across the table when I approached and they never broke the contact. He was caressing the back of her hand with his thumb as she spoke to me. He never looked at me the way he looks at her.\"\n\nSighing, Kate asked, \"What does this mean for you now?\"\n\n\"It means, I've been a fool wasting my time pining over Alex,\" Francine confessed. \"If I were honest with myself I'd have admitted a long time ago that the relationship meant way more to me than it did to him. He is everything that I could want in a man and a husband, but I wasn't his ideal woman. It just wasn't meant to be. There's someone for me out there, but I have to stop comparing every man to Alex. Emotions can run amok and make you really stupid at times.\" \n\n\"Well, hallelujah, I'm glad you've come to your senses. I hated to see you like that. Now you have things in perspective,\" Kate said.\n\nThe rest of their lunch was quite enjoyable with the sisters communicating as they'd never done in the past. They got rid of some of the old baggage that was keeping them from being as close as they could be and vowed that in the future their relationship would be different, better. \n\nFrancine knew it wasn't that easy to get over someone, but she'd made a big step toward moving on. \n\n*\n\nAlex, who was hoping that there wouldn't be a scene with Francine, was now pondering her behavior. He knew a thing or two about women and what Francine said was not all that she intended to say when she approached their table, of that he was certain. \n\n\"That was odd,\" he murmured.\n\n\"You do you mean?\" Jade asked.\n\nFrowning, Alex said, \"Francine's behavior. I thought she came over to say more than hello and congratulation.\"\n\nGrinning, Jade said, \"I'm sure she intended to say more. I saw the look on her face before she plastered on that fake smile. I'm sure she was going to try to make me as uncomfortable as she could. Embarrass the new woman in public, not original, but effective if you know how.\"\n\n\"Then what stopped her?\" Alex asked.\n\n\"I complimented her. Women like to be appreciated. From what you told me she worked very hard and was proud of her job. What better way to stroke her ego. Not that I was insincere. I do shop at Marcus Mann and she's done a fantastic job as their buyer. Although my thought was to get her off her game, I'm glad I didn't have to lie.\"\n\nLooking at her shocked, Alex said in a husky whisper, \"You are amazing, in more ways than I could have imagined.\"\n\nAlmost blushing at his compliment, Jade replied, \"I've had a lot of experience diffusing emotional people, not the least of all, Jackson. He's been the most difficult, but for the most part I keep him in check. Anyway, Francine was hurt and I'm not one to gloat.\"\n\n\"No, you aren't. You're a very special woman whom I love to distraction. When we get home, I'll show you just how much,\" Alex promised.\n\n\"Hmm, we might have to rush through lunch,\" Jade said with a sassy grin.\n\n \n\n*\n\nThe night of the Christmas party finally arrived. \n\nBriana was having her first sleep over with her grandmother. In the intervening weeks since her daughter met Adele, Jade made sure that they visited every other weekend. Briana was very comfortable with her grandmother and Jackson was a beneficiary of his daughter's budding relationship with his mother. \n\nAfter Briana's first visit, Jackson told his mother that he was sorry for the way he'd wasted his life and his chance to have a real relationship with his daughter. He said he was going to try to make up for lost time. The very next week he'd gotten a job at a local dealership detailing cars. Now he was giving his mother money every week to help pay for food and household expenses. He didn't make a whole lot, but after three months he would be reevaluated for a raise.\n\nJackson made a point, if he wasn't working, to be home when Briana came to visit. Jade didn't know what was at the root of his changed behavior, but she thought it was about time. For the first time in Briana's life he didn't act like he was about to crawl out of his skin because he had to spend a few minutes with her. In fact, he tried engaging her in conversation. The fact that he didn't crowd her or pitch a fit if she was reticent helped tremendously. Briana gradually warmed up to him and became more relaxed. \n\nAdele was proud of her son as she related to Jade her conversation with him and his plans for the future. She didn't know what brought about the change either, nor did he explain, but for her it was enough that he was finally finding some direction in his life. \n\nAs Jade got dressed for the party, she knew she had some regrets with her own life. Her relationship with Jackson had been doomed from the start, but if not for him she wouldn't have Briana. She wouldn't have traded the daughter she had for anything or anyone. \n\nNow she had Alex, a man who loved her and her daughter. She hadn't been looking for a man, but there he was. He wasn't the man of her dreams because she couldn't have dreamed up anyone like him in a thousand years.\n\nJade loved everything about Alex, even the way he took charged sometimes; not asking, but making decisions for her and Briana's benefit. She had been making her own decisions for a long time and balked at the idea of anyone taking the lead, but with Alex she had acquiesced because it never felt like he was running roughshod over her, it felt like love. She was strong with an independent nature, but it felt good to have someone help manage the daily load of life.\n\nChecking herself in the full length mirror behind her bedroom door, Jade nodded to her image and gave herself two thumbs up. She looked good. While she and Cheryl were out Christmas shopping she'd stopped in at Spellman's and purchased the gown. It was pricy, but it fit perfectly.\n\nThe dress was a silk confection in white. It was full length, with a v-neckline and silver jeweled detail on the 2\" wide shoulder straps. The bodice was delicately pleated, but the skirt of the gown fell in soft waves from her hips down to the floor. From the rear, it was cut in a scoop design, baring her back. \n\nJade's hair, courtesy of Cheryl, was styled in a neat French twist. Her accessories were 3\" high silver sandals and a hard cased silver clutch. The only jewelry she wore was sterling silver crystal drop earrings and her engagement ring.\n\nWhen Jade met Alex at the door, he stood staring at her for a few moments, not even blinking. Then, his face broke into a smile that lit up his amazing blue eyes.\n\n\"Damn,\" he whispered in awe, \"you look like a bride.\"\n\nFeeling her face warm under his regard, Jade lowered her eyes to conceal her rising heat. The man looked good enough to eat.\n\nAlex move into the room, closing the door behind him. Seeing the lust in his eyes, Jade backed up holding up her hand to slow him as he stalked her. \n\n\"Alex!\" she shrieked as he grab her and pulled her into his hard body. \n\n\"I know we don't have time,\" he said, \"but that doesn't mean I can't have a little taste.\" With that he lowered his head and planted his lips squarely on hers. Deepening the kiss, he slipped his tongue into her mouth and plumbed the moist interior. \n\nBarely able to catch a breath, Jade whimpered under the onslaught as Alex grabbed her buttocks and ground his hard cock into her. \n\nHe ended the kiss with a swift jerk of his head.\n\n\"Fuck!\" \n\nBreathing heavily Alex backed away from Jade and ran his hand through his thick raven hair.\n\nJade felt her panties moisten and stifled a groan.\n\n\"Well hell,\" she thought exasperated that they couldn't finish what Alex started. \n\nGaining control, Alex chuckled and said, \"I sure as hell didn't expect it to get that hot so fast. I'm thirty six years old for Pete's sake, not sixteen.\" \n\n\"Huh!\" Jade grunted, \"Whatever your age, you got my panties wet; now I have to change.\"\n\nStill smiling, he said, \"Not on my account. I have a feeling they'll be wet again in no time.\"\n\nHe only burst out laughing when she gave him the stink eye and flounced out of the room to change her panties and secure a panty liner. \n\n*\n\nJade had a great time at the party. It was truly a social event and she got to meet many of Alex's friends and business associates. She even met the elusive Brad Simpson, his business partner. Brad was a good looking man, but he came to the party alone. Jade wondered why he wasn't married or at least attached. There was a story to be told there, she would bet money on it.\n\nBrad was nearly as tall as Alex with rich dark brown hair. His eyes were gray with flecks of green with short thick lashes. His voice was warm and mellow reminding Jade of a southern gentleman. He had a sexy smile which made his eyes sparkle. Like all of Alex's friends, he was easy to talk with and had a great deal of admiration for him. Jade vowed to find out the story behind Mr. Simpson.\n\nAlex introduced Jade to Mayor Joel Hamilton and his wife Miriam. Jade was apprehensive about being able to navigate this social circle comfortably, but she found all her fears had been unwarranted. The mayor and his wife were as nice as could be and they showed genuine interest in her opinions. \n\nAs the night wore on, time and again Jade tried to keep her mind from wandering back to the hot kiss she and Alex shared in her apartment. By one thirty she felt that a good time had been had by all and they'd fulfilled any social obligations. Now she was ready to have him all to herself. \n\nShe had been on simmer since that kiss. Alex enjoyed her arousal and made a point of touching her throughout the evening. He even touched her a time or two on her derriere. She definitely enjoyed the attention and felt kinky knowing that she was aroused as they walked about chatting; however, it was time to put an end to the teasing.\n\nSmiling, Alex placed his hand on the small of her back as she talked with Brad. Instantly he felt the quiver of her body and heard the soft intake of breath. Jade literally stopped talking in mid sentence. \n\nLooking at Brad, Alex said, \"I think it's time for us to call it a night Bradley. I'll talk to you tomorrow about some ideas I have regarding the new project Bill James is working on.\"\n\nGrinning, Brad said, \"Sure thing, Alex. I think it's time for me to be leaving too. I'll just go over and say goodbye to the chief. You two enjoy the rest of your evening.\"\n\nKnowing exactly what was going on, Brad smirked as he turned and walked in the direction of Police Chief James Harrington. \n\n\"Ready to go, sweetheart?\" Alex asked in a casual tone. \n\n\"Uh, huh,\" was all that Jade could manage. \n\n*\n\nOn the way home, Alex rested his hand on Jade's thigh. Even through the dress he could feel her warmth, but he wasn't content. Soon, he had the bottom of her dress pooled in her lap while his hand caressed the inside of her thigh. \n\n\"Alex,\" Jade moaned and closed her thigh, trapping his hand. \n\nJade couldn't believe how aroused she was. Alex hand was no longer moving, but that didn't stop her mind from imagining him stroking her wet pussy. In no time her thoughts had her squirming in her seat, but she wanted so much more.\n\nWhen they came to a red traffic light, Alex said in a husky voice, \"Open your thighs, baby.\" \n\nImmediately Jade complied and felt the slide of his fingers to her wet panties where they encountered the panty liner.",
        "\"Extra protection?\" he grinned wickedly.\n\nBypassing the liner, Alex stroked her throbbing pussy as her bottom arched up off of the seat. \n\nA wailing sound echoed in the interior of the car as Jade pussy spasmed and she felt the flood of more juices. She panted harshly begging him to make her come. Alex slipped his finger into her pussy, but made no further move.\n\n\"Soon,\" he said, his voice ragged with desire. \n\nThe light turned green and Alex proceeded on, his home only a short distant away. He held Jade on the precipice of orgasm, his finger lodged in her quivering warmth. \n\nA few minutes later, they were at his house. Jade suppressed a groan when his finger slipped from her pulsing slit.\n\nAfter existing the car, they entered the house where Alex abruptly pushed Jade back against the interior door and went down on his knees in front of her. \n\nJade felt like her heart was lodged in her throat. She was so turned on that she didn't know if her legs would hold her upright for much longer. She was lightheaded, but remained focused enough to notice that Alex was taking off her shoes. Then he slid the hem of the dress up and over her hips. \n\nWith a gruff voice, he said, \"Hold your dress up baby.\"\n\nAs soon as Jade had the material in her hands, he pulled her panties, along with the liner, down to her ankles. A moment later, his thumbs were spreading her pussy lips; his tongue curling around her clit. Moaning and rolling her head from side to side she felt the tightening of her inner muscles as he probed and sucked her delicate feminine parts. \n\n\"Alex...Alex...ahhhh....ahh...ohhhhhhh...baby...baby...baby....... ahhhhhhhhh!\n\nThe last was said as Alex's tongue captured her clit again and he sucked long and hard. \n\nJade's legs buckled, but Alex held her in place as he by turns tormented and soothed her aching throbbing flesh through a resplendently long climax. \n\nAfterward, he allowed her to sink down to the floor. \n\nAs Jade leaned against the door, Alex slipped her panties off. He held them to his nose, inhaling her scent from the crotch of the under garment.\n\nHe grinned wickedly. \n\n\"This should be bottled and sold at a premium. You'd be a millionaire in no time, but I'd be jealous as hell. It's a good thing that this is mine, only mine.\"\n\nLanguishing in the effects of her orgasm, Jade was only able to issue a groan in reply.\n\nAfter sitting for a few minutes, Alex got up and helped Jade stand on her still shaky legs. Picking her up in his arms, he carried her to his bedroom where he flipped on the light, set her on her feet and finished undressing her. With her clothing tossed to the floor, Jade helped him undress.\n\nKneeling in front of Alex, she looked up to his beautiful eyes, dark with arousal. He was looking at her in that expectant way, already anticipating having his hard cock ensconced in her hot wet mouth. \n\nThe lighting in the room was warm and muted, but allowed them to clearly see each other. Jade was going to enjoy watching him as he climaxed. Alex's cock was long and thick, rigid against his flat belly. Jade cradled his ball sack with one hand as she gently caressed the shaft with the other. He stood still, but he was anything but calm. The muscles of his stomach were rippling and his breathing was raspy.\n\nShe watched his face as she held his cock, positioning it at the opening of mouth. She flicked her tongue against the slit and smiled as he shuddered. As soon as she slid the head into her mouth, he closed his eyes and grunted his pleasure. \n\nThis was a sweet moment, the first taste of her man. \n\nSwirling her tongue around the head of his cock, Jade savored his essence, the slightly salty flavor of his pre-cum. As she licked, she was treated to another spurt. Working earnestly, in a sucking motion she stroked her mouth up and down the first few inches of his erection. \n\nUnable to remain still, Alex held her head as he thrust his cock in and out of her mouth, taking control. He loved the sight of her lips stretched around his fat organ as she tried to take in more and more. She couldn't deep throat him, but what she did made his head spin. \n\nHe could feel the back of her throat as the head butted against it. Once she'd gotten as much as she could take, he held her head still, her mouth full of his cock, then slowly pull his shaft back until just the head remained in her mouth.\n\nJade then took over again, rolling her tongue around the head and sucking on the slit until Alex thought he'd lose his mind. While one hand caressed his balls, the other firmly stroked up and down the shaft. Then she held his cock up and slid the flat of her tongue from the base to the tip, as if it were a big lollipop. Four or five times she did this and when she got back down to the balls, her tongue slid down further and licked them before taking one big nut into her mouth. Savoring the taste and texture, Jade grunted and felt her pussy throb. \n\nAlex was on the verge of coming and he knew where he wanted his ejaculate to go. He wanted it in the deep recesses of her hot pussy. Gently pulling Jade's hair, he got her attention.\n\n\"I want to fuck you, baby. I want my cock deep in your pussy. We've had a night of teasing; now I want to give you what I promised with that kiss.\" \n\nBefore getting to her feet, Jade gave Alex's cock one last lick, bringing forth another spurt of pre-cum and a hiss from him. Once she was standing, he picked her up in his arms, planted a deep kiss on her lips, then turned and dropped her into the center of his bed.\n\nJade giggled as her body hit the mattress. Moments later Alex joined her.\n\nRolling on top of him, she straddled his hips and rubbed her wetness against his turgid penis. \n\n\"Uh, uh,\" Alex said in a gritty voice, \"no more teasing.\"\n\nRolling her over onto her back, he opened her thighs and knelt between them. He knew she was wet enough, so without further foreplay he placed his cock at her entranced and gently pushed forward until the head and a few inches popped in. Giving her a few seconds to adjust, he continued the slow slide into her tight humid channel. \n\n\"Ummmm,\" Jade moaned, \"Nothing feels as good as this.\" \n\n\"Give me a minute and see if that opinion changes,\" Alex said then proceeded to whip her body into a frenzy. \n\nIn no time, he was stroking in and out of her with lightning speed, hitting her clit with ever stroke. The only sounds were their heavy panting, groans and the slap of flesh against flesh as they sped toward orgasm. \n\nAlex paused only long enough to place Jade's legs over his shoulders before he slammed relentlessly into her pussy. He pounded her as she begged for release, sobbing as the walls of her pussy spasmed into aching need. \n\nHe could feel his release approaching with the familiar tightening of his ball sack, the spasming of his lower back and the aching need to expel his sperm. Faster and harder he hammered into her until his frame jerked shooting hot cream into her shuddering body. \n\nJade was in the throes of her own climax when she felt the warm rush of semen enter her throbbing body. \n\nAs their orgasms eased, Alex body settled on Jade's and he balanced his weight on his forearms. He nuzzled her neck moaning at the aftershocks of his spent passion. She rubbed his moist back and luxuriated in the pleasure of being completely satisfied. \n\nWhen she had the presence of mind to think, she told him, \"Yeah, there's nothing better than that.\" \n\nSometime later, Alex rolled off of Jade. After settling her in his arms, he stroked her sensitive breasts. He loved the slick feel of her body after lovemaking and the small purring sounds she made. The fact that he sometimes made similar noises wasn't lost on him. \n\nJust before daybreak, he awakened with Jade sprawled over his body. Her body held a slight chill since they hadn't taken the time to get under the covers before dropping off to sleep. Gently sliding from beneath her, he secured a blanket from the linen closet and spread it over her before slipping back into bed. As he was gathering her into his arms, she sighed and settled softly against his chest. \n\nAs he lay abed, he thought about how much his life had changed in such a short time. Until a few months ago, marriage wasn't even on his radar. He thought his life was complete; he had a challenging career, a great family, friends and a lovely, smart, charming companion in Francine. He knew that eventually he would get married and have kids, but he hadn't seen it in the foreseeable future. Now he was going to be a husband and step-father in one fell swoop. \n\nThe thing that surprised him most was that he was impatient to have it happen. If it was left to him, they'd be down at the courthouse tomorrow and into the baby making business within minutes after that. \n\nHowever, he wanted to give Briana time to feel secure in his relationship as her step-father. He knew that she already loved him, but he didn't want her to feel that she was being replaced by another child. They needed time for her to adjust to the thought of having siblings. Ever since their talk, he'd done everything possible to make sure that she knew that, in his heart, she was his daughter. \n\nWith that thought, Alex closed his eyes and allowed slumber to claim him. \n\n      \n\n*\n\nChristmas and New Year's Day passed with Alex and Jade dividing their time between their families and friends. They even managed a short weekend trip to visit Brenda and tony in D.C. The couple lived in a sprawling suburban neighborhood and was expecting their first child in seven months. Since Briana spent Christmas Eve with her Grandma Adele and her father, Christmas and New Year's Day were divided between the Harrises and the McCords. \n\nAlthough Alex had reminded Briana that Jackson was her father, he was feeling very much like a first time dad who had to fight his will to over indulge his only child. But instead of buying out half of Toys 'r Us, he'd been contented with he and Jade completing her collection of Disney Princess Dolls and getting her the Barbie fun house she'd asked for earlier in the year; she already had a collection of Barbie dolls. The grandparents purchased clothing and Jackson bought her a selection of books. With gifts from other family members and friends, Briana had a very Merry Christmas.   \n\n*      \n\nA month later Jade was knee deep in wedding plans. She arranged a luncheon date with Mrs. McCord to discuss her plans and get her input.\n\nAs expected, Alex's mother was eager to lend assistance and was happy that Jade wanted to include her in preparing for her special day. She hadn't wanted to impose if she was not needed, but Jade assured her that she needed and appreciated as much help as she could give her. \n\nIn spite of all the time they'd spent together working, it was only at that luncheon that they began to cement their relationship as mother -in-law and daughter-in-law. Thereafter, even in the office, they were less formal with each other. Mrs. McCord asked Jade to call her Diana, even in the office. This was the beginning of a bond that would endure over many, many years. \n\nJudy offered to throw Jade a bachelorette party, to which Jade politely answered, \"Thanks, but no thanks.\" She was at the end of a stressful day of making wedding plans, so her cousin thought it better to wait until later to broach the subject again rather than press the issue. \n\nA week later, Judy realized that no time was going to be a good time to bring up the subject of the Bachelorette party again; however, a shopping trip with Jade presented the opportunity. \n\nJade had invited Judy along to check out some dresses for the wedding party as well as gifts. She would save shopping for Judy's present for a later time so that she would be surprised. Now she and Judy were back at her place. Alex had taken Briana to see The Secret World of Arrietty and they were still out.\n\nPlacing her purchases on the sofa, she went to the kitchen while Judy sat on the sofa in the living room.\n\n\"I don't know about you, Judy, but I feel like I've been run over. Whew! It was stinking hot out there; it's winter for Pete's sake,\" Jade groused.\n\n\"Welcome to Florida,\" Judy said with a grin. \n\n\"Yeah, I should be use to it.\" Jade said, and then asked, \"Would you like something to drink?\"\n\n\"Yeah, I'll have a soda.\"\n\n\"I have coke, is that ok?\" Jade asked.\n\n\"Yep, that's fine,\" Judy replied.\n\nJade took a couple of cans from the fridge as Judy walked over and sat at the kitchen table.\n\n\"Why don't you want a bachelorette party? I'll do everything,\" Judy said immediately. \n\nSitting down, Jade responded, \"I just don't see the need for one. When I think of a bachelorette party, I think of what I see on Bridezilla. You know the ones with strippers and the bride getting falling down drunk and acting like a hoochie mama. I'm not really a party girl, and I definitely wouldn't want strippers.\"\n\n\"A bachelorette party can be anything you want it to be,\" Judy said. \"It could be just a simple dinner with the bride and her attendants or including immediate family and friends; just a night out having a good time. We don't need a stripper, although, I wouldn't mind one myself,\" she cackled. \n\nAt Jade's expression, Judy said, \"I may be married, but I am not dead. I didn't say I would do it, though. Terrance would lose his mind if a stripper got all up on me. In case you don't know, I'll mostly just talk,\" she grinned. Besides, Terrance is soooo fine.\" \n\nChuckling, Jade said, \"Yeah and he has you on a short chain.\"\n\n\"Damn right,\" Judy declared. \"It's a chain that I gladly put around my own neck. No man can ever mean as much as Terrence.\"\n\nJade felt the same way about Alex. \n\nArching an eyebrow at Jade, Judy said, \"Speaking of chains, you don't want to be a pot calling the kettle black, because you're about to get put on permanent lock down by Alex.\"\n\nTaking a sip of coke before answering, Jade said honestly, \"Alex doesn't need marriage to keep me on lock down. I'd be eight kinds of stupid to let anything or anyone come between us.\"\n\nSitting back in her chair looking at her cousin, Judy realized that Jade was more contented than she'd ever seen her. When she first saw Alex, she hadn't thought the relationship with her cousin would last. She didn't tell Jade, but she thought Alex was just scratching an itch, but she was soon dispelled of that notion. She'd learned not to judge a handsome, sexy, rich man by his color. \n\nAs Judy saw it, they both got what they needed from the relationship and he was great with Briana. She would bet her life that the sex was hot too. Jade always had that satisfied look on her face. \n\nDragging herself from her thoughts, Judy said, \"We're both lucky as hell to have found the men that we've got. But back to the bachelorette party; was that your only objection?\"\n\n\"I guess so,\" Jade answered. Then looking at Judy, she reminded her, \"Huh! You didn't even have one.\"\n\n\"That's because I eloped,\" Judy said. \"I still don't think my Mom has gotten over that, but she loves Terrance. We might have a renewal of wedding vows ceremony for our tenth anniversary next year. That would please the hell out of her.\"\n\n\"Yeah, that would be great,\" Jade agreed wondering what her life would be like in ten years.\n\n\"Anyway, if that was your only objection, why don't I just plan a dinner at a nice restaurant with only the bridesmaids and maid of honor; we'll eat, drink and just have a plain old gab fest.\"\n\nWith no real excuse, Jade gave in. \"Ok. That does sound like fun. \"We wouldn't even have to send out invitations; a phone call will do the trick.\"\n\n\"Great. I'll start making the arrangements,\" Judy said.\n\nSuddenly a thought occurred to her.\n\n\"Too bad all the McCord brothers are taken, Gina and Sylvia could use a good man.\"\n\nThe women were two of Judy's oldest friends.\n\nLaughing, Jade said, \"You're crazy girl, you know that, don't you? Gina is pregnant and has sworn off men and Sylvia has four kids, one of them nearly grown.\"\n\n\"Not crazy, I just live in a fantasy world,\" Judy said with a grinned. \n\n*\n\nShortly after Judy left, Alex called to say he'd taken Briana out to dinner after the movies and they would be home in about an hour. With some time on her hand, Jade decided to finish addressing the wedding invitations. \n\nShe'd gone over the list several times to make sure no one was left off. After adding Alex's list, the total number of guest came to one hundred and fifty two, including children, although they were few. The guest list could have been much larger, but both she and Alex agreed that they didn't want an enormous wedding.\n\nAs for the financial aspect, Alex wanted to pay for the wedding, but Jade insisted on footing the bill. Alex hadn't liked it and it was their first argument. They discussed the financial aspect of their marriage with Jade assuring Alex that she didn't have a problem with him taking care of her and Briana. \n\nJade wanted to fund the wedding, in part, because she'd always taken care of everything herself. However, she knew that she wouldn't have to shoulder the financial burden once she was married and she related that to Alex. She told him that proof of her faith and reliance on him was in the fact that she was willing to deplete her inheritance which had been a financial cushion. \n\nHowever, it wasn't until she agreed to ask for help if it became more than she could handle that he reluctantly acquiesced. Alex understood her independent nature and didn't want her to lose that, but he also needed to know that she understood that she had someone to depend upon. Jade did understand the full extent of his love and caring and spent a long time afterward showing him just how much. \n\nIt was around six thirty when the last of the invitations were addressed. Jade got up from the kitchen table where she'd sat to accomplish that task and took the box of invitations to her bedroom. She'd mail them out the next day. In the meantime, she decided to take a warm shower. \n\nIt was ten minutes later that Alex arrived home with Briana. He unlocked the door and ushered Briana in. He turned the TV on to the Disney channel and said to Briana, \"I'll be right back, baby, I'm just going to find your Mom.\"\n\n\"Ok,\" she answered, \"I'm going to watch Good Luck Charlie,\" which was already in progress. \n\n\"All right,\" Alex said before heading to the back of the apartment. \n\nOnce he got to Jade's room, he could hear the running shower. He walked into the en suite bathroom and could see her silhouette against the frosted shower door. \n\n\"Jade,\" he called out as he approached the shower. \n\nImmediately she turned off the water, partially opened the shower door and peeped from behind it. \n\n\"Hi, baby,\" she said smiling at him. \n\nHe thought it was amusing that she was in any way shy with him. He'd seen, kissed and licked every part of her body and there she was hiding behind the opaque shower door. \n\n\"Sweetheart, I've seen all of you, come out from behind the door,\" Alex urged.\n\nSighing, Jade stepped out of the shower, still keeping an eye on him. Alex thought t she looked like she expected him to pounce at any minute. Grinning, he admitted to himself that she wasn't far off the mark at that.\n\nHe went to the linen closet and taking out an over sized fluffy towel which he held out, beckoning Jade to him. Slowly she closed the distance between them until Alex was able to wrap the towel around her slippery body. \n\n\"You're still shy after all this time?\" he asked.\n\nNodding, Jade said, \"Well, sometimes. I don't understand why, you've seen it all. But somehow, ever time you see me naked, it's like the first time. Although, I must admit it doesn't take me long to get over the shyness.\"\n\nNuzzling her neck, he said, \"Keep feeling that way and it'll always be hot between us. No matter how many times I've seen you naked, I could never be cavalier about it. You turn me on, but it's not just that sexy body, it's what's in your head too. I love all of you.\"",
        "\"I love you too, Alex,\" she murmured.\n\nJade was starting to squirm against Alex when he gave her a quick kiss and said, \"I'd love to explore that sexy body right now, but we don't have time. We have a very curious five year old in the living room watching television.\"\n\nSighing, Jade ran her hand through his hair, \"Have I told you lately have beautiful you are?\"\n\nCaressing her buttocks through the towel, he replied, \"Yeah, and we still don't have time.\"\n\nPouting, Jade stalked out to the bedroom as Alex chuckled.\n\nHe joined Briana while Jade got dressed. When he sat on the sofa, she scooted closer to him, leaning into his body. \n\n\"I had a good time at the movies,\" She said looking up at him, \"can we do it again?\"\n\nPlacing his arm around her, Alex promised, \"Of course we can. I plan on doing a lot of fun things together with you and your mom and sometimes just you and me.\"\n\n\"Like Disney World?\" Briana suggested with a hopeful look. \n\n\"Maybe, but, it'll have to wait. Your mom and I will be very busy for a few weeks with wedding plans and settling into my house after the honeymoon.\" \n\nHaving her curiosity sparked by a new word, Briana asked, \"What's a honeymoon?\"\n\nAlex was panicked, but only for a second.\n\n\"How do you explain a honeymoon to a five year old?\" he asked himself.\n\nQuickly on the heels of that thought came, \"Keep it simple.\"\n\n\"A honeymoon is the time after the wedding when your mom and I will get to go on a vacation, just the two of us,\" he explained.\n\n\"Why can't I go,\" Briana asked with a concerned look.\n\n\"Shit!\" Alex thought, \"I can't screw this up.\" \n\nSeeing her waiting patiently for an answer, his heart melted. This was what having children entailed. He'd better be prepared for a lot more questions down the road.\n\n\"Well, you can't come with us because it's a trip that only adults go on after they are married. Then, when we come back, you and your mom will move into my house,\" he said trying to gauge her reaction.\n\nJust for good measure he added, \"After you get settled in your new home, we'll all go some place fun. I can't tell you where we'll go; it has to be a surprise.\"\n\nBriana's serious expression turned to a grin in a split second when she heard the word surprise.\n\n\"A surprise?!\" she yelped. \n\n\"Yes, a surprise,\" Alex said relieve that she accepted the explanation or maybe she just forgot the question since she was so thrilled about a surprise. Either way, he would address the question if it came up again. \n\n\"But first, your mom and I will leave right after the wedding reception.\"\n\nThen, thinking she probably didn't know what a reception was either, Alex said, \"The reception is a party for your mom and me. We'll eat dinner and cake, listen to music and dance after we get married. Understand?\"\n\nLooking at him and nodding, Briana said, \"Can I come to the party?\"\n\n\"Yes, baby. You'll be there with all the people who came to the wedding, including your grandmas and grandpa. Then, you mom and I will go on our honeymoon. You'll stay with your grandparents until we get back. \"\n\n\"Mommy said I will be a flower girl. I thought I had to dress like a flower, but she said I only have to throw them on the ground so that she can walk on them.\" Briana giggled, \"That's funny.\"\n\n\"Actually, you don't get to throw the entire flower, just the petals, but it does sound kind of funny,\" Alex agreed with a chuckle. \n\nWhen Jade came out fully dressed, she found Alex and Briana engrossed in another episode of Good Luck Charlie.\n\nWhen Alex saw her, he grinned and said, \"This really is a pretty good show with a good premise. Maybe we can start a video log for Briana for the important events in her life and ours. It'll be part of our family history.\"\n\n\"That's a great idea,\" Jade agreed. \"I wished I would have had something like that to caption my life. I just don't remember the early years that much. Just think, it could have been Good Luck Jade,\" she said with feigned regret.\n\n\"With an exaggerated sigh, she continued, \"I could have been somebody. I could have been a TV star, not just a glorified secretary, which is what I am.\"\n\n\"Yeah, right,\" Alex chuckled.\n\nSheepishly, she said, \"Too much, huh?\"\n\n\"Uh, huh, just a tad,\" Alex agreed trying to keep from laughing. \n\n\"Huh! I was channeling my inner Marlon Brando,\" Jade pouted.\n\n\"Well, babe, you need to turn that channel,\" Alex said unable to stop himself from laughing.\n\nJade laughed too, almost going into hysterics when Briana said,\n\n\"I don't wanna change the channel, Alex.\"\n\nAlex and Jade looked at each other and had to tamp down their desire to go off into hysterical fits.\n\n\"We're not going to turn the channel, baby,\" Alex assured Briana.\n\nSmiling, Briana said, \"Good. But, I do want to be on TV.\" \n\nHaving gotten herself under control, Jade said,\n\n\"I don't know about TV baby, but we'll make sure to put you on video. It'll be nice for you to have when you get older. You'll be able to see what you looked like and what you did when you were a kid.\"\n\n\"That'll be great. I could show Lisa and all of my friends too.\" Briana agreed. \n\n\"Yes, you could,\" Jade said, then noted the time on the kitchen wall clock.\n\n\"You only have thirty five minutes before bedtime; you want to continue watching television?\" \n\n\"Can I watch Cinderella on the DVD?\"\n\n\"Yes, we can start the video, but you won't be able to see the entire thing before you need to get ready for bed.\" \n\n\"That's ok Mommy, I can watch the rest tomorrow.\"\n\nSo, the three of them sat on the sofa and watched the movie with Jade and Alex on either side of Briana. Jade notice that her daughter, leaned against Alex and that he looked totally comfortable in the position of step-father to be. \n\nShe was happy that Jackson was making positive changes toward Briana, but she knew Alex was the man they were meant to be with. She wouldn't trade what she had now for a boatload of childhood fantasies come true. \n\n       \n\nThe next few weeks were a whirlwind of activities. Alex won a couple of major cases and managed to clear the entire month of May and the first week of June for the wedding and honeymoon. Everything was in place and they were counting down the weeks until the big event.\n\n*\n\nIt was the twenty third of March and Jade was coming off a fairly easy week at work. Her landlord decided to let her out of her lease without any penalty since he had a waiting list. With a new tenant he'd be able to charge a higher rental rate. \n\nShe and Alex talked about her job and agreed that she'd stay on until they decided to have another child, which they figured would be at least a couple of years. She was doing very well handling work and family with only one child, but she knew that would become exponentially harder as their family grew. She was in a position where she could be a stay at home mom and that's exactly what she wanted, eventually. \n\nFor once she was going to let someone else take care of her and Briana. She wouldn't have to be the bread winner and that took away a lot of the everyday stress. However, she held on to the option to go back to work, even part time, if she felt the need. \n\n       \n\n*\n\nJade was driving up to her apartment complex with Briana in the back seat when her cell phone rang. Thinking it would be Alex, she didn't look at the caller ID. Parking quickly, she answered,\n\n\"Hello.\" \n\n\"Hey, Jade, this is Jackson.\"\n\nJackson? She wondered what was wrong. Old habits die hard. \n\n\"Hi, Jackson, what's up?\"\n\n\"Nothing much, I just wanted to see if I could come by tonight and talk to you about something. It's nothing earth shattering, but It's something I think we need to discuss.\"\n\nJade hoped that whatever it was wouldn't cause a problem for her or Briana. Things had been going so well with Jackson the past few months, but whatever it was she'd deal with it, as usual.\n\n\"Ok, Jackson. I just got home, but you can come by in an hour.\" \n\n\"That would be great,\" he agreed. \"Thanks, I really appreciate it. I'll see you then, bye.\"\n\n\"Bye, Jackson.\" \n\nStill puzzled, she looked at the phone as if it could provide answers.\n\nWhen Alex got home she told him about the call from Jackson. \n\n\"We'll find out soon enough what it is,\" Alex told her. \"No need to worry about something that might be nothing.\"\n\n\"I know, I know.\" Jade said a bit anxiously. \"It's just that things have been going so well. I admit I was waiting for the other shoe to drop, I hope this isn't it.\"\n\nHolding her close as he leaned against the kitchen corner, Alex assured her that there was nothing that couldn't be dealt with. \n\n\"I didn't like the guy because of how he treated you and Briana,\" Alex said softly. \"But, I must say that he's made a big turn around; I have to respect that. It just goes to show that people can change if that's what they want.\"\n\n\"While I'm still curious about his motivation,\" he continued, \"I can't deny that he's doing more to be the father that Briana deserves than I ever imagined. I admit, too, that I'm jealous that he's her father. But no matter what, I will always think of her as my little girl.\" \n\nJade signed, taking comfort from Alex's words.\n\n\"Briana loves you as much as any kid could love a father. Her relationship with Jackson won't change how she feels about you.\"\n\n\"I know,\" he said. \"She may not be the child of my flesh, but she will always be the child of my heart. I could never love her any less than I will love the children we will have together.\"\n\nFor a long moment, they just stood there holding each other. Some time later, the door bell rang to jostle them out of their thoughts. \n\n\"Door bell, Mommy,\" Briana called from where she sat on the floor putting a puzzle together. \n\nSighing, Jade gave Alex a quick kiss and released her hold on him.\n\nShe opened the door to Jackson. He was dressed in Jeans and a knit shirt and he was smiling. Taken aback, she'd almost forgotten how good looking he was. \n\n\"Hi, Jackson, come in,\" she said backing up to let him in.\n\nJackson immediately saw Alex standing in the kitchen and lost some of his smile. He nodded to Alex who nodded back. \n\nAlex walked into the living room and picked up his brief case from the sofa. Looking at Jade, he said, \"I'll let you two have some privacy,\" and headed to Jade's bedroom.\n\nBriana was paying close attention to the adults. She watched as Alex left the room then turned her attention to Jackson and her mother. \n\n\"Hey, baby,\" Jackson said as he neared Briana. \"Come give me a hug.\"\n\nGetting up without being coaxed by her mother, Briana held up her arms to her father. Jackson picked her up and gave her a hug, which she returned. He smiled at her and she surprised him by giving him a tentative smile back. He hugged her tighter before setting her back on her feet.\n\n\"I need to talk to your Mom in the kitchen for a minute,\" he said.\n\n\"Ok,\" Briana nodded and sat back down to work on her puzzle. \n\nJackson walked to the kitchen and sat down at the table, Jade followed. \n\nLooking nervous, he pulled an envelope out of his back pocket. But before he gave it to Jade, he looked her in the eyes and said softly, \"I know I wasn't much of a boyfriend to you and I was even a worse father to Briana.\"\n\nJade started to say something, but then stopped and nodded for him to go on.\n\n\"I don't know what was going on in my head,\" he said, \"but I seem to have gotten over it. I realize that it's way past due. I'm sorry for everything I put the both of you through. I'm especially sorry and ashamed for not claiming my daughter from the beginning.\" \n\nLooking at him, Jade could see that he was sincere and she was happy not only for Briana, but for Jackson. \n\nShe didn't hate him, but she'd been so hurt by his lack of concern for Briana and she was frustrated by the absence of direction and purpose in his life. She knew that deep down he couldn't have been happy. \n\n\"Apology accepted,\" Jade said. She didn't hold grudges and she wanted him to be in his daughter's life in a positive way.\n\n\"I've worked out a few things and I'm working on having a good relationship with Briana. I think I'm beginning to have some success, at least she's not afraid of me and she even smiled at me. So, I want you to accept this,\" he said, pushing the envelope across the table towards her. \n\nJade eyed the envelope cautiously and asked, \"What is it?\"\n\nSmiling at her uncertainty or suspicion, it was hard to tell, Jackson just said, \"Open it.\"\n\nJade opened the envelope and was surprise to see that it contained money. \n\n\"What's this for,\" she asked, confused.\n\n\"It's for Briana; two hundred dollars. I know it's not much, but it's what I can afford to give you for her each month. I'm giving my mom a little each week and saving to get my own place. As I make more money, I'll be able to give more.\"\n\nFrowning, Jade said, \"Jackson, I don't know what to say. Briana doesn't...\"\n\nShe never got to finish because Jackson held up his hand, cutting her off.\n\n\"I know. I know you can take care of her. You've had that responsibility all her life, but I'm her father and it should have been my responsibility. I'm coming late to the game and I can't bring much to the table, but I want my daughter to grow up knowing that I.... that I love her and that I take my responsibility as her father seriously. So, whatever you do, don't say no.\" \n\nJade looked at him for a moment realizing that's exactly what she was about to do. She was about to say that Briana didn't need the money. While that was true, she did need to know that her biological father cared about her. For the first time, she had heard Jackson say that he loved his daughter. If that wasn't a miracle, she didn't know what was.\n\nThere were a lot of dead beat dads out there and they came in all colors. Jackson decided to make changes in his life. He decided not to be a clich\u00e9 or a statistic any longer. It had to be hard for him and Jade knew that she had no right to deny him what was a matter of pride. She was even proud of him. \n\nThis is the Jackson that she had wanted him to be when she told him she was pregnant. This is the Jackson that she prayed he would be one day, for their daughter.\n\n\"Of course I'll accept this for Briana, Jackson. Thank you.\"\n\n\"You don't need to thank me; you put up with a lot in the past. Again, I'm really sorry for my attitude and lack of support.\"\n\nFeeling tears prick at the back of her eyes, Jade told him, \"I knew you could be the man I'm looking at right now. I'm just so glad that you decided that you wanted to be him too. I'm really proud of you, Jackson. I'll let Briana know that the money came from you. \n\nSmiling, he said, \"Thanks for saying that. It means a lot to me that you're proud of me. It was high time that I grew up, I just didn't know it would feel this good.\"\n\nStanding up, he said, \"I'd better get going.\"\n\nAs he walked toward the living room, Briana got up and rushed to him asking, \"Are you leaving?\"\n\n\"Yeah, I'm leaving, baby. How about coming with me to Lee's Park this next weekend? They have lots of rides and games. Would you like to go?\"\n\nJackson took the chance that Jade wouldn't object.\n\nSmiling, she said, \"Yep, I wanna go. Can mommy and Alex come?\"\n\nAt that request, Jackson felt a twinge in his heart, but Jade step in quickly. \n\n\"Baby, Alex and I can't come this time; we're going to be working on some plans for the wedding.\"\n\nJade knew the small lie was necessary. \n\n\"You and your dad can have fun together and we'll come another time, ok?\"\n\n\"All right, Mommy,\" Briana answered. \n\nSmiling, Jackson nodded at Jade.\n\n\"Well, I have to go now.\" \n\nLooking down at Briana, he said, \"Give me a hug before I go, baby.\" \n\nLifting Briana up, Jackson felt her little arms lock behind his neck. He breathed in her sweet scent and gave a silent prayer in the hope that his daughter would learned to love him.\n\nPulling back so that he could see her face, Jackson kissed Briana on her forehead. To his surprised, Briana kissed him on his cheek. \n\nHe thought his heart would burst. \n\nPutting her down he said, \"Ok, baby, I'll pick you up on Saturday at 9 o'clock, but I'll call you before then.\"\n\n\"Okey Dokey,\" she said with a smile.\n\nJackson continued to the door with Jade right behind. He opened the door and was about to step out when he turned back to face Jade.\n\n\"Jade, I.....\" seeing her expectant expression, he lost his courage to say what he really wanted to say. Instead, the words that came out were, \"I just wanted to say, again, how sorry I am.\"\n\nKnowing that there was something else, but having no clue as to what it might be, Jade decided to ignore her instinct to press him.\n\n\"You've already apologized Jackson and I've accepted it. You don't need to keep doing it. I believe you are truly sorry and I want us to move forward.\"\n\nJackson nodded and said firmly, \"Yes, you're right. It's in the past.\" \n\nHe quietly stepped across the threshold.\n\n\"I'll see you on Saturday. Bye.\"\n\n\"Goodbye, Jackson.\"\n\nAs Jackson walked to his car, he felt an ache of regret in his heart. He'd lost his chance to be with Jade. He accepted that nothing he could do would change that now. She was in love with Alex McCord and would soon be married to the man. He would have to find a way to live with that.\n\n*\n\nThe day of the wedding arrived. All the preparations were made and everything had gone like clock work. With Mrs. McCord at the helm, there was no doubt that this day would come upon smooth waters. However, she didn't try to take the decision making from Jade. Diana lent her expertise where it was needed and made sure that whatever Jade wanted was carried out to the letter. \n\nWaking up in the big bed at Alex's house, Jade's first thought was, \"Where's Alex?\" \n\nThe second thought came with a smile. She knew they were bucking all kinds of tradition, but she already felt married to Alex, the paper was just a formality. She saw no point in them staying apart, even for a few days, bowing to some archaic wedding tradition.\n\nThankfully, Alex had agreed. \n\nShe still felt the warmth in the spot beside her and knew that he hadn't been up long. The lingering heat and soreness of her body reminded her that he rode her long and hard before they fell asleep, exhausted. The memories were igniting her intimate parts again, and as she slid her hand down her body, her pussy started to tingle. \n\nGroaning, Jade stroked the tender lips of her sex, bringing forth the liquid essence of growing desire. Her body arched off of the bed as her fingers sank into her throbbing core.\n\nShe was fully engaged in tending her body when Alex came into the room and stopped in his tracks at the scene before him. \n\nSince she was still under the covers, he couldn't see what she was doing, but had no doubt about what she was doing. The mental vision made his cock jerk. Her body was bowed and by the urgency of her panting, she was close to climax. \n\nJade's eyes were closed, her fingers deep inside her body, working in and out with dizzying speed, her heels firmly planted on the bed. \n\nThe fingers of her other hand were busy squeezing the tight buds crowing her breasts, working her body into a roaring furnace. Rubbing her palm feverishly against her swollen clit, Jade hurled herself into a screeching climax. She quickly clamped her hand over her mouth to muffle the sound. \n\nAlex cock was at full mast, aching to be deep in the place where Jade continued to stroke as she rode through her orgasm, her body spasming. \n\nAlex stroked his cock, slicking it up with pre-cum which seeped in copious amounts. Through with voyeurism, he strode toward Jade, startling her as he yanked the comforter from her body, exposing her luscious warm glowing body as he stood at the foot of the bed. \n\nEyes wide open, Jade's breath caught at the sight of a naked and fully aroused Alex, crawling up from the foot of the bed, just like a panther stalking its prey. Her heart skipped a beat as he said,",
        "\"Open those beautiful thighs, baby.\"\n\nSetting her feet apart, Jade opened her body to her man.\n\nAlex knelt between her thighs, his hands spreading them further apart. Looking down, his eyes mapped every inch of her heated flesh; the moist puffy lips, the swollen clit, the faintest hint of the pink interior walls. He intended to drive his throbbing cock into her until she screamed for him, until she couldn't scream anymore.\n\nPlacing his cock at the entrance of her pussy, he did just that. \n\n        \n\n*\n\nRousting themselves after a short nap wasn't easy. They would have much rather spend the rest of the day in bed, but there was the wedding. Jade was the first to actually get up, if not off of the bed, while Alex lay sprawled on his back. \n\n\"You know,\" she said, perched on the side of the bed, \"couples are supposed to be all stressed out on their wedding day.\"\n\n\"I don't know about other couples, but I feel calm and sated. Imagine that,\" Alex smirked.\n\n\"Maybe that's the deal,\" Jade ventured, \"the honeymoon should be before the wedding.\"\n\nReaching out to stroke Jade's back, he agreed.\n\n\"It worked for us. I'm happy to be marrying you today, but we've been a family for a while. We're calm now, but that might change the closer we get to the actual ceremony. That's at seven o'clock tonight and it's only eight thirty a.m.\"\n\nTurning to face Alex, Jade knew there was a good reason why they weren't stressed. \n\n\"Your mom was a great help getting everything done, Alex. I think because of that, planning the wedding wasn't as stressful for me. I didn't freak out, so I didn't get you freaked out.\"\n\n\"She not only got things done,\" Jade continued, \"but they were done a long time in advance. We were able to relax for a couple of weeks. We weren't in that high state of anxiety that happens when things are put off until the last minute. All we have to do now is take a shower, get dressed and show up at the venue.\"\n\nBefore responding, Alex sat up next to Jade and placed his arm around her waist. \n\n\"Ummmm,\" he said, nuzzling her cheek, \"I think you're right. Mom was great and you, my love, are the prefect bride to be. I don't know how I would have coped if you turned out to be a Bridezilla,\" he chuckled.\n\n\"Oh, god no!\" Jade belted out.\n\n\"I've seen that show and those women scare me. I always wondered why those guys were marrying them when they didn't seem to suit each other at all. Oh, they claim it was all about the stress of planning the wedding, but I don't know if I buy that. Some of them were just bat shit crazy.\"\n\nTurning to Alex, she said, \"If I ever get like that, you have my permission to have me committed.\"\n\n\"Uh, uh,\" Alex responded, \"I don't care how crazy you get, I'm keeping you.\"\n\n\"Ha! You're just saying that because you know I'll never be like that.\"\n\nGrinning, Alex agreed. \"Yep.\"\n\nJade was quiet for a moment, stroking Alex's thigh. He was about to ask her if anything was wrong, when she said spoke up. \n\n\"There's still time to do a pre-nup.\"\n\nTaking her left hand Alex kissed each of her fingers before answering. \n\n\"I don't want a pre-nup, sweetheart, I meant that. I know it's the standard now days, but this marriage is between you and me, it's not to satisfy some social convention. I love you, you love me. As far as I'm concerned, that's it. If you turn out not to be the woman I think you are, all the money and property in the world isn't going to make losing you bearable.\"\n\nSighing, Jade said, in a soft voice, \"You are the most wonderful man. I love you to distraction. Thank you for your love and trust. I won't ever give you cause to regret either.\"\n\nKissing her forehead, Alex said, \"I know you won't, sweetheart and I'll always love you with everything that I am.\" \n\n*\n\nAlex and Jade did manage to get themselves out of bed and dressed in casual clothing. Judy had already taken their wedding wear to the venue. She volunteered to make sure they would get there safely and to steam out any wrinkles. She'd also taken Jade's make up case and the accessories they would be wearing. \n\nJade's dress was a gorgeous white confection with a beaded corset. The dress had a dropped waist and flowed to the floor in silky perfection. Jade fell in love with the gown on sight.\n\nShe put hot curlers in her hair before leaving and would wear it in a style that would allow it to flow freely about her shoulders in loose waves. Alex's suit was an updated version of the traditional tux. \n\nThe wedding was being held in the chapel at Mansfield Manor, a historical mansion owned by the city and used to host large events, including weddings, conventions and balls. The reception would be held in the grand ballroom after the pictures were taken.\n\nBefore they parted at the manor, Alex gave Jade a long searing kiss and squeezed her butt for good measure.\n\n*\n\nThe ceremony went off without a hitch. The bride was radiant and the groom couldn't stop smiling. \n\nWhen Alex and Jade arrived at the reception, they were greeted with cheers from their family and friends. In attendance among them was Francine along with her sisters. Alex thought it would be rude not to invite her since both Carrie and Kate would be attending. Jade had invited Jackson and his mother. Although he had not accepted the invitation, he'd called to wish her well; Adele came with her parents.\n\nAdele felt sad that Jade and Jackson couldn't have worked things out. She had high hopes for her son now and knew that even though he hadn't admitted it, he still cared about Jade. It just took him too long to realize it; too long to grow up. \n\nAs the cheers died down, Alex and Jade made their way to their table, stopping briefly for congratulations.\n\nEventually, everyone was seated and the meal was served. \n\nFollowing dinner, there was dancing to everything from love ballads to rock and roll, with the music played by a live band. Everyone was having a great time, including the kids. Briana was sitting between Jade and her grandmother Juliette and hadn't stopped smiling since they got there. Jade knew that her daughter was happy that Alex was officially her step-father and Alex couldn't have been prouder.\n\nThe night wore on, but the happy couple was more than ready for some more alone time. Alex and Jade were seated, taking a break from dancing when he leaned over and whispered in her ear. Jade felt her face flush and she immediately looked around her to see if anyone had heard. But with the din of conversation and music, she needn't have bothered. That didn't keep Alex from being amused by her concern.\n\nAbruptly, he got up and said to Jade, \"I'll be right back, sweetheart.\"\n\nHe headed to the stage where the band was playing a romantic slow tune. He smiled to himself thinking it was time to get the real show on the road. Taking the stage, he signaled for the band to stop playing. Tapping the microphone, he got the attention of the assembled crowd. \n\nAlex waited for them to quiet down. Once he had their full attention, he thanked them for helping he and Jade celebrate their special day. Then he said, \n\n\"However, it's time for us to leave. It's been great friends and family, but other adventures wait us.\"\n\nThat statement was met with laughter and applause.\n\nLeaving the stage Alex joined Jade as she stood up from the table. \n\n\"Well wife, it's time for the honeymoon,\" he said in a voice that made her knees weak. But before she could respond, Briana chirped in. \n\n\"Mommy will you bring me a present back from the honeymoon?\"\n\nSmiling down at her, Jade said, \"Of course I will baby. I'll even gift wrap it for you.\"\n\nGrinning, Briana responded, \"Thanks, Mommy. Have fun, I'll miss you.\"\n\nNot waiting for an answer, she looked up and lifted her arms for Alex to pick her up. As he held her in his arms, he felt his heart squeeze. He loved her as if she was his own..\n\nThen Leaning in Briana asked him,\n\n\"Are you my step-dad now?\"\n\n\"Yes, I am sweetheart. I'm your step-dad.\"\n\n\"Good,\" she responded with a grin.\n\nBefore anything else could be said, they heard a shrill voice calling, \"Briana, Briana!\"\n\nLooking at Alex, high on her perch, Briana said, \"That's Lisa. She's going to sleep over at grandma and Poppy's house tonight. \n\nSetting Briana back on her feet Alex said, \"You remember that your mom and I will be back in two weeks, don't you?\"\n\n\"Yes,\" she replied as Lisa reached them.\n\n\"Come on Briana,\" Lisa said, \"Maddy's here. She wants to show you her new bracelet.\"\n\n\"Ok, Lisa,\" Briana said, grabbing Lisa's hand and turning away.\n\nShe'd gone only a few feet when she turned back around , walked back and threw her arms around Jade and said, \n\n\"I love you Mommy.\" \n\nQuickly, she turned to Alex. Wrapping her arms around his waist, she looked up at him, her face beaming, and said, \"I love you too, Daddy. Have fun. Byeee.\"\n\nQuickly, she turned and ran off with Lisa leaving Alex, Jade and Juliette, who was standing nearby, with their mouths opened in shock.\n\nJuliette was the first to recover. Looking at her daughter and her new son-in-law, she said, \"Well, I guess that settles that.\"\n\nAlex, still in shock said, \"She said it like it was the most natural thing in the world while I'm still reeling from just hearing her call me daddy.\"\n\nTaking his hand in hers, Jade said, \"It was natural for her, sweetheart. She's been thinking of you as daddy for a long time. She was just waiting for the wedding to make it official. She probably worked out in her mind that daddy and step-dad was the same thing. She's too young to understand the biological aspect.\"\n\nFrowning, Alex asked, \"Do you think we need to say anything to her about it?\"\n\n\"Absolutely not,\" Jade said with conviction. \"You're her daddy. She'll eventually figure out the biology of parenthood, but that will never take away from the fact that she loves you. She always will.\"\n\nAlex had to admit that he was relieved by Jade's explanation. He loved Briana and it made him happy that she called him daddy. Hell, he felt like her daddy.\n\nAt their side, Juliette said, \"Nobody asked me, but I agree with Jade. I always thought you'd make a great dad. \n\nSmiling at them both, she said, \"Now I need to get back to my grand baby; that child tries to run circles around me. Besides, I'm missing a husband and son. The last time I saw Russell he was talking with Cameron. Jared's probably hold up somewhere talking golf with Mr. McCord. I swear that man even golf in his sleep. \" \n\nThat drew laughter from both Jade and Alex.\n\nWhen he recovered, Alex said to his mother-in-law, \"Thanks, Juliette.\"\n\n\"You're welcome,\" she said. \"Congratulations kids and have a safe trip. I'll leave out the part about having a good time; I think that's a foregone conclusion.\" She smirked before going on the hunt for her grand baby and the rest of her family.\n\nJade looked at Alex and sighed in contentment.\n\nWrapping Jade in his arms, Alex looked down into her beautiful bewitching caramel brown eyes. \n\n\"I'm going to work hard to make sure the rest of our life is as wonderful as it has been so far,\" he said. \"I have the woman I love, need and want and the child that I love and cherish; everything else is frosting on the cake.\"\n\nLeaning down, he gave her a thoroughly satisfying kiss.\n\n\"Whew,\" she said breathlessly when the kiss ended. \"No more of that mister or we'd give our guests an eyeful.\"\n\n\"Let's go to the hotel where we won't need to worry about prying eyes,\" Alex murmured. \"We have an early flight to St. Lucia and I don't intend to waste a second of what will be a long night of loving. I might even have a little surprise in store for you.\" \n\nHe chucked at her wide eye expression, then leaned down and whispered in her ear. \n\nJade nodded barely aware of the rest of the room. \n\nAs they made their way across the room they encountered Alex's parents. After saying goodbye to them with hugs all around, he and Jaded headed for the limo that would take them to the Royal Carrington Hotel.\n\nNestled in the warmth of Alex's arms, Jade knew that this was just the beginning of a family life filled with happiness and endless love."
    ],
    "authorname": "MissPrimrose222",
    "tags": [
        "wm/bf",
        "family",
        "erotic",
        "marriage"
    ],
    "category": "Interracial Love",
    "url": "https://www.literotica.com/s/a-long-time-coming-ch-08"
}
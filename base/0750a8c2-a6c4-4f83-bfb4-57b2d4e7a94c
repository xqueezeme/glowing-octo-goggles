{
    "title": "Bright Arrow Ch. 05",
    "pages": [
        "Thanks to everyone who has commented and emailed me on this story! I'm touched to know that so many of you enjoyed it! \n\n*\n\nKevin woke sometime later and pulled himself up from a hunched position over a lab table, his body aching all over. He called down to the quarantine hospital to check on Pike's status and was assured that Pike was stable and that for the moment his blood samples showed that he was responding to serum 418. Kevin sighed, hung up with the nurse and looked around the lab to try to remember where he had left off. It was then that he saw the flashing message on his work terminal.\n\n`Analysis of compound seven one four complete'. It showed. \n\n\"Computer, display results of last compound analysis.\" Kevin looked over the results as he prayed. It wasn't long before he found a sequence that had failed and shook his head with disbelief. Compound seven one four was his lipid compound.\n\n\"Computer, verify results.\"\n\n\"Compound seven one four analysis was conducted using normal variables. 159 separate sequences of HLF DNA were tested. Line sequence 93 was the only failure.\"\n\n\"What was the nature of the failure?\"\n\n\"Sequence 93, protein sheath trans-migration.\"\n\n\"So the compound cannot pass through the virus wall?\" Kevin asked.\n\n\"Correct.\" Answered the computer. \n\n\"Can the compound enter a human cell?\" He asked.\n\n\"Yes.\"\n\n\"Computer, would compound seven one four be able to neutralize or inhibit viral DNA or RNA synthesis within a human cell?\"\n\n\"Unknown. A level 8 Human Host Simulation test would be required. Accuracy of such a test would prove 79% reliable.\"\n\n\"Run level 8 Human Host Simulation test on compound seven one four in human cell. First variable; HLF infection.\"\n\n\"At what stage?\"\n\n\"End stage. And set all other variables to highest.\"\n\n\"Highest variable results will lower the accuracy to 72.4%.\"\n\n\"Understood. How long till test completion?\"\n\n\"Twelve days, nineteen hours, fifty two minutes.\"\n\n\"That's bullshit!\" Kevin yelled. \"Is there anyway to decrease result time?\"\n\n\"Completion time was predicted using maximum CPU usage allotted to labs A and B.\"\n\n\"How long would the results take if we were to use all of the CPU?\"\n\n\"Maximum CPU usage possible before critical shutdown of all automatic systems is 86% and would take four days, three hours, eight minutes.\" The computer responded. Kevin sighed and knew there was no way to get the results sooner but if this worked he would have a cure. \n\n\"Understood. Begin test at 86% CPU usage.\"\n\n\"Authorization required.\"\n\n\"Who's?\"\n\n\"Dr. Brian Tsu, director of the National Center for Medical Studies.\"\n\n\"Call Dr. Tsu.\"\n\nA minute later, Brian answered his terminal in his office.\n\n\"Kevin? Please tell me you have something good.\" The director looked harried and Kevin thanked God he wasn't in his shoes. \n\n\"I just might, Brian. I need maximum CPU usage and I need it now.\"\n\n\"I know. My terminal just informed me of your request. I'm not sure I understand.\"\n\n\"I have a compound which very well may inhibit HLF synthesis inside the cell. I was only hoping to be able to stop it from entering the cell but now it looks like I can kill it once it's in. I need to do a Human Host simulation so I can determine if it's effective and won't kill the patient.\"\n\n\"Are you sure, Kevin? I'll have to shut down every other department for this. We'll barely be able to get our email much less figure out another way to fight this. You're asking for a lot and I need you to be sure.\"\n\n\"Brian, this is the closest we've been in a long time.\"\n\n\"How long would the test take at your normal usage?\" Brian asked and Kevin's heart tightened in fear. Pike didn't have twelve days to wait.\n\n\"Almost two weeks.\"\n\n\"And if I give you the entire CPU?\" Brian asked.\n\n\"Four days.\"\n\n\"You're asking me to give you the entire database for eight days, Kevin.\"\n\n\"Brian-.\"\n\n\"Eight days on what might not be a sure thing.\"\n\n\"Brian, Pike's down there. He's in the hospital right now. I don't think he's going to have twelve days.\"\n\n\"Pike's your new boyfriend?\"\n\n\"Yeah.\"\n\n\"I'm sorry, Kevin.\"\n\n\"Brian, don't do this! Please God!-.\"\n\n\"I'm sorry, he's infected. Do your test. Give me a minute to inform everyone. They're going to have to save all their work and basically leave for the next four days, so the least you can do is give them an hour or so to do that.\"\n\n\"Absolutely!\" Kevin felt the flood of relief course through his body. \"Thank you, Brian.\"\n\n\"Don't thank me, thank the vice president. He said `whatever is necessary to get this under control'. I'm just following orders, right?\"\n\n\"You're a good man, Brian. I'm sorry I ever thought different.\" Kevin smiled for the first time in weeks.\n\n\"Yeah, fuck you too.\" Brian smiled back. \"Give me an hour.\"\n\nThe terminal hung up and Kevin heard Brian's voice over the intercom alerting the entire staff to save whatever material they were working on, secure all specimens and basically shut down their terminals. The next hour was the longest of Kevin's life. After an hour and fifteen minutes, Kevin still had not received the all clear.\n\n\"Call Brian.\" The terminal did and Brian's face shown on the screen.\n\n\"I know, I know. We had a test finishing up but you're good now. I've just given the authorization.\"\n\n\"Thanks again, Brian.\"\n\n\"Don't thank me, Kevin. Just be right.\" The terminal disconnected. \n\n\"Computer, begin test.\"\n\n\"Beginning level 8 Human Host Simulation test on compound seven one four in human cell. First variable, HLF infection. All other variables set to highest. Completion in four days, three hours, eight minutes.\"\n\n\"Alert me when it's completed.\" Kevin said and headed down to Lab B to check on his other researchers. \n\n\"Dr. McEnty?\" One of the researchers approached. \"Why did we have to shut down all our work? Doesn't the director know there's an HLF epidemic out there?\"\n\n\"He does and that's why you've had to shut down all your work. I'm testing a new compound which may inhibit DNA syntheses. I've got all the hard copy for you to go over.\" Kevin said and handed out the information he had printed out while waiting. \"If this is successful, I'll need it processed immediately. We'll test it here in Bright Arrow before sending it to New York.\"\n\n\"Do you think it will work, Dr?\" Another researcher asked.\n\n\"Yes. I do. But just in case, work on some other alternatives as best you can.\" \n\nKevin left and headed back to the hospital. He was briefed by his staff on the logistics of the situation; 210 infected, mostly still in early stages, 34 mortalities. He issued what advice he had but was most effective by admitting that they were testing a new treatment which may prove useful. Kevin then went and found Pike.\n\nHis bed was raised and his eyes were open, but Kevin knew the pain he must be in right now. The rashes had spread farther across his body and stood out brightly against his sickly, pale skin. Thankfully, his eyes hadn't become bloodshot nor started leaking the bloody lacrimal residue that was indicative of end stage. Pike smiled.\n\n\"Hey baby.\"\n\n\"Hey stud. How they treating you?\"\n\n\"They keep poking me with stuff but I just tell him I'm sleeping with the boss so they'd better treat me good and they leave me alone.\" \n\nPike's voice was quiet, as if it took effort to speak and his respiration's seemed labored. Kevin's eyes darted to the monitor he was hooked up to and saw he had a temperature of 100. Still low, but it meant Pike's body was starting it's last-ditch efforts to rid itself of the disease. \n\n\"Pike, I've got something. It might be a cure. I'm testing it now and should know in four days if we can use it.\"\n\n\"If you got it now, I'll take some now.\"\n\n\"We can't do that, babe.\" Kevin reached out and took Pike's hand in his isolation suit glove. \"It's a dangerous chemical and we need to know that it doesn't effect humans too adversely. Or even if it's worth it to use on humans.\"\n\n\"You can try it on me.\"\n\n\"Not going to happen. You just have to hold out for four days. You can handle four days right?\" Kevin felt himself start to shake and a tear slip out of the corner of his eye. \n\n\"I'll try real hard, baby but this thing is kicking my ass.\"\n\n\"Then kick back, Pike! You better fight this or I swear to God I'll kill you myself.\" Kevin said and Pike laughed but that caused him to have a coughing fit. Kevin watched as Pike's gown was spotted by his blood.\n\n\"No! Oh God! Nurse!!\" A nurse rushed in saw the blood and a knowing look passed through her eyes. Pike was suddenly just another end stage. \"Double the hydroxychloroquine.\"\n\n\"Dr. he's already at the recommended dosage.\"\n\n\"Then double the recommended dosage!\"\n\n\"Yes, doctor.\" She said and started entering new figures into the automated filter which was pumping chemicals into Pike's blood. \n\n\"What's the serum 418 up to?\"\n\n\"50mgs.\"\n\n\"Double that too and make this new protocol for all end stage patients. We have to slow it down for at least four days.\"\n\n\"Yes, doctor.\"\n\nKevin looked over and found Pike was unconscious. He held Pike's hand up to the shield and imagined being able to kiss and touch his lover again. He would, Kevin resolved and left the hospital. He called his team into his lab.\n\n\"We have to get the patients four days. We've got over thirty end stage patients who need just a little more time to see if this new treatment will work. Give that to them.\" Kevin ordered to a room full of disbelieving doctors and scientists. \n\n\"Are you kidding, sir?\" One asked. \"We've been trying to do that since day one.\"\n\n\"No. We haven't. We've been trying to cure them, to give them their lives back. I'm not asking for that. I'm asking for four days. By whatever means you can think of.\" \n\nThe room was silent as each began to redefine their goal and to rethink their job in a new way. \n\n\"End stage HLF is accompanied by renal failure. What about dialysis?\"\n\n\"You want to put end stage HLF patients on dialysis? It would shred what's left of their blood cells. They'd die of systemic anoxia.\"\n\n\"What if we doubled the amount of hydroxychloroquine they get? I've changed the protocol a couple of minutes ago. I've doubled the amount of serum 418.\" Kevin asked.\n\n\"I still wouldn't recommend dialysis, but it might be an option.\"\n\n\"What about therapeutic hypothermia?\"\n\n\"It's not the fever that finally kills them.\"\n\n\"What about it inhibiting the virus itself?\"\n\n\"That's not been proven.\"\n\nThe team discussed many different options and almost all of them seemed to have some flaws. But Kevin was desperate and ordered that his team themselves oversee the administration of the top five ideas on the worst of the end stage patients. The equipment was brought down to the hospital and set up about each of the chosen patients, of which, Pike was one. Pike's treatment was just being hooked up when one of the researchers stopped Kevin.\n\n\"He's got the bloody tears. Do you still want to treat him?\" She asked. Kevin whipped around and saw that Pike's eyes were leaking the reddish colored tears.\n\n\"Dr. McEnty, what do you want to do? Should we treat him?\" One of the researchers asked.\n\n\"Yes. Treat him now. He still has time.\" \n\nKevin said and sat next to the unconscious Pike. He sat there all night and passed out around four in the morning. He was woken up by a nurse who told him the battery level on his isolation suit was dangerously low and ordered him out of the quarantined area. Kevin left, hung up his suit and went to find a hot pot of coffee. Brian Tsu found him hours later, asleep at a cafeteria table, a cold cup of coffee in front of him. \n\n\"You should go get some sleep.\" Brian advised.\n\n\"I just did. I think I was in here for a couple of hours at least.\" \n\n\"No, Kevin. Real sleep. With rapid eye movements and delta waves, the real thing. That cat nap was just because your body couldn't go another minute.\"\n\n\"I'm fine, Brian. Really.\" Kevin took a sip of his forgotten coffee and grimaced. \"How is the center getting along without the database?\"\n\n\"Surprisingly well. We've outsourced all test sample requests to other labs who are kissing our asses right now for giving them the work. Course there are only a few people who know the reason why we've devoted our entire CPU to one project so at the moment we look a little incompetent, but it'll be easier to deal with the backlash if this compound of yours doesn't pan out.\"\n\n\"Thanks for that, at least.\" Brian nodded in thanks. \"It's got to work, Brian. I've nothing else. If it doesn't work, we're very possibly looking at another viral outbreak which will cull the human population down to the bare minimum.\"\n\n\"Like the Influenza outbreak?\"\n\n\"No, like the Black plague. We're talking millions, possibly billions of people. It will be the worst thing any of us have ever seen, unless...\"\n\n\"Unless?\"\n\n\"Unless that compound in there works.\" Kevin leaned back in his chair. \"Computer, how long till test completion?\" \n\n\"Three days, ten hours, fifty one minutes.\" Came the answer.\n\n\"I'll see you in three days, ten hours.\" Brian said and left the cafeteria. \n\nAnne called later that day, though not on the database terminals, but on Kevin's personal mobile device. She looked like she hadn't gotten any sleep in the past two weeks.\n\n\"How are you holding up?\" Kevin asked.\n\n\"Well, for the last week and a half, I've been wishing that I had never become a doctor.\" She said simply. \n\n\"I know how you feel.\"\n\n\"Kevin, this is getting worse. I now have three warehouses near full of patients. We can barely keep them quarantined and we're running out of medicine.\"\n\n\"I've spoken to the pharmaceutical companies. More of them are shifting over and producing the serum and hydroxy. We'll have more to you within in the next twenty four hours.\"\n\n\"How is it out there?\"\n\n\"I have two quarantined hospitals, one in Bright Arrow, one in Denver. L.A. just got hit and I had to send a team out there to set one up. Miami, Atlanta and Houston have all reported positive results. We're keeping an eye on them but at the moment, they've only got a handful of patients each.\"\n\n\"You ever feel like we're just standing in the way of something bigger and badder than we are?\" Anne asked.\n\n\"No.\" Kevin lied. \"It's just a disease and it'll run it's course. If we can keep the population away from each other for a little while by scaring the shit out of them, then maybe those that are already infected,\" Kevin thought of Pike. \"will die and the disease will contain itself.\"\n\n\"That's a little cold, Kevin.\"\n\n\"That's our job, Anne.\" Anne nodded and took a breath.\n\n\"Right. Business as usual. Got it boss.\"\n\n\"We'll get through this, Anne.\" Kevin said but could barely hear the sincerity in his own voice.\n\n\"I know we will, Kevin.\" \n\nHis mobile disconnected.\n\nKevin walked into the hospital a few hours later to check on Pike and the status of the treatments. He noticed how cold it was in the building.\n\n\"How's it going?\" He asked one of his research scientists.\n\n\"Apparently well. It seems that the treatments we've used have slowed the virus so much that we've implemented them across the board. I'm sure you've noticed the freezing temperature in here.\"\n\n\"I have.\"\n\n\"We've actually seen viral loads stabilize for the first time. Even in end stage patients. We've only had two mortalities in the last twelve hours.\"\n\n\"That's excellent. How are the patients dealing?\"\n\n\"As best they can. They complain but we just keep telling them that it'll only be for another day or two. I hope to God your test works, doctor.\" The young man stated.\n\n\"You and me both.\"\n\n\"I've never seen a patient up close. I've always been in the lab dealing with the virus. It's different when you see what it does to them.\"\n\n\"It is.\" Kevin said. \"You don't deal with it now though. That's for later.\"\n\n\"Later when?\" The scientist asked.\n\n\"When they're cured or when they die.\"\n\nKevin sat down next to Pike's bed and held his hand. He read through his chart and was pleased to see that though his levels were high, they had stopped climbing. He breathed a sigh of relief and let himself believe that Pike would make it the last two days. \n\nKevin had been contacted by various agencies who were reporting more HLF patients and had left Pike's side to organize some help. He delegated as much as possible to his aid, Dale, and finally was able to return to Pike's side. There were doctor's and nurses already in the room and their body language made Kevin rush to get there.\n\n\"What's going on?\" He asked one of the doctor's.\n\n\"He started throwing irregular heart rhythms. I'm trying to stabilize him.\"\n\n\"What kind of rhythms?\" Kevin asked and pushed his way closer to the bed. Pike looked even paler than he had before and the monitor connected to him was beeping erratically. \n\n\"Kevin, you need to step out now.\" The doctor ordered.\n\n\"No. I'm not leaving.\"\n\n\"Dr. he's coding!\" The nurse called as Pike's monitor showed a lethal heart rhythm. \n\n\"Kevin, get out of there!\" Another doctor ordered and pushed Kevin out of the way. They allowed him a lot of leeway since he was the foremost authority on HLF but when it came to actively treating a loved one, there were not exceptions. Kevin sat back and watched as Pike's body was shocked and shocked again only to reveal no electrical activity. He heard the doctors orders and watched the nurses push medications into the I.V. bag with a numbness that could only be born out of great fear. Kevin closed his eyes and tried to pray but found no words, only an immense feeling of pain. \n\nHe turned around and leaned his isolated helmet on the far wall, barely listening to the sounds of a medical crisis. He had heard them before, he had been part of all of that before, but this time was different. This was his crisis. The best man he had ever known lay on the table behind him, dead. The heart that loved him was dead, the arms that had held him and the hands that had touched him were dead. His lover was gone. Kevin now knew with certainty that he would not get through this. A mundane part of his mind told him the logical thing to do would be to call Anne back and hand authority over to her before he shut down. \n\nA hand touched his shoulder, lending comfort but none was taken. There was none to be had. The hand pulled but Kevin refused to move and it wasn't till he was forcibly turned around that Kevin actually spoke.\n\n\"Get the fuck off me!\" \n\n\"Dr. he's alive. We got him back.\" The nurse said.\n\n\"What?\"\n\n\"Pike's alive. He was revived after four minutes seven seconds. He should be fine for now.\" She said and left. Kevin stared at the monitor for what felt like hours reassuring himself that the tiny blip which represented Pike's life was stable and not going to disappear again. He took Pike's hand.\n\n\"Please, Pike. Just two more days. Give me two more days!\"\n\nFour days, three hours and eight minutes later the computer finished it's analysis. The message blinked on the screen for several seconds without a response. Kevin sat in his chair, staring at the floor seemingly oblivious to what was going on around him. Brian Tsu coughed politely but Kevin didn't even respond.\n\n\"Kevin, we're waiting.\" Brian said and Kevin raised his head as if suddenly seeing the director and the rest of his research team.\n\n\"Computer, display result of Human Host test.\" Kevin ordered, and the results appeared on the screen. One of the researchers was shaking his head.\n\n\"This isn't good.\" He said.\n\n\"What?\" Brian asked, in a panic. \"What isn't good?\"\n\n\"These results are showing that if we administer this drug it'll completely shut down the liver causing hepatic encephalopathy, renal shut down, and all sorts of complications that we can't handle as a mere side effect. The compound is worthless.\"\n\n\"Are you telling me that I shut down the NCMS, hoping to find the cure for a disease that is bringing this country to its fucking knees, for a worthless compound?!!!\" Brian screamed. \"Kevin, you're fucking fired!!!! No! You're not fired, because when all this shit comes down around us, you're going to be right in the middle of it!!!! God damn it!!!!\" ",
        "\"Why the fuck are you just sitting there smiling?!!!\" Brian screamed at Kevin and held himself from physically assaulting him.\n\n\"David,\" Kevin calmly called the scientist who had listed the compound's worthlessness over. \"How effective is the compound at treating HLF?\"\n\n\"Not effective at all, doctor since it kills the patient.\"\n\n\"No, I mean, just the disease.\"\n\n\"Excellent. It completely obliterates it.\" David answered.\n\n\"Computer, lower variables to one quarter above normal.\"\n\n\"Variables are set to one quarter above normal.\" The computer answered.\n\n\"Display results.\"\n\nThe results showed on the screen and both Kevin and David looked them over both smiling.\n\n\"You set the variables to highest?\" David asked.\n\n\"I needed all the information, not just what we hoped might happen.\" Kevin answered.\n\n\"What? What's going on?\" Brian asked.\n\n\"The drug apparently ceases all HLF viral DNA and RNA synthesis within a human cell and causes some minor, yet manageable side effects. The patients won't die.\" \n\n\"What was all that bullshit before with the hepatic encephalopathy and the renal failure?\" Brian asked confused.\n\n\"Worst case scenario. Truly, worst case scenario. That's so unlikely to happen that it's basically guaranteed not to.\" Kevin stood and threw on his lab coat. \"I want as much as this facility can produce of compound seven one four. We'll use the Human Host sim's suggestion for beginning dosages. Get this info to the pharmaceuticals and tell them to stop producing serum 418 and hydroxy. Just go with this for now. I want it here, Denver, New York, L.A., Houston, Miami, anywhere they've called to report an outbreak. And Dale,\"\n\n\"Yes, doctor?\"\n\n\"I want this today. Light fires under whoever and tell them to call me if they have a problem.\"\n\n\"Yes, sir.\"\n\nKevin took a vial from the lab and ran down to the hospital. He dressed in his isolation suit as quickly as possible and ran into Pike's room. Pike looked drastically different now, and Kevin shuddered every time he saw him. He was pale and seemed to be wasting away in front of him despite the therapies that slowed down the disease. Kevin inserted the vial into the I.V. and injected twice the recommended dosage. His job, he prayed was over. He took up his seat next to Pike's bed and fell asleep for the first time since Pike's heart stopped. \n\nA nurse woke him up later, again ordering that he leave and change his battery. Kevin's eyes flew to Pike's but they were closed and he didn't look much improved. The nurse said that he was still stable and hadn't shown much change from the last blood sample she took. She'd advise him of any change after he switched out his battery. Kevin did as ordered and returned to his chair next to Pike's seat. That's where his team found him a few hours later.\n\n\"The beginning stage patients are already showing improvement. They're levels are dropping more rapidly than those more progressed. Even some mid stage patients have begun responding.\"\n\n\"What of the end stage patients?\" Kevin asked.\n\n\"No sign of improvement yet. It's quite possible that with a high viral load, the change is at first undetectable.\"\n\n\"Yes, I assume it is possible.\" Kevin agreed, though his stomach felt cold. This is the cure. The only answer he had. He had nothing else to give.\n\n\"The drug companies are shipping out the first batches now. New York should already have theirs.\"\n\n\"Thank you.\" Kevin dismissed them and sat quietly with Pike. \n\nTwo days later, Kevin still sat at Pike's side. The viral load had lessened dramatically but he still hadn't woken up. Kevin had ordered a Scanning EEG which showed only the barest amount of electrical activity in his brain. Pike had gone into a coma due to the trauma and stress on his body and it was anybody's guess when or if he would recover from it. Kevin heard the alarm on his battery and left again to change it and to grab some coffee and food before returning. Upon his arrival back he saw Pike's eyes open. He was talking to the nurses.\n\n\"Oh my God, Pike!\" Kevin ran into the room. \"You're awake.\"\n\n\"Hey baby.\" Pike smiled. The nurses left them alone. \"I guess you did it, huh?\"\n\n\"Did what?\"\n\n\"Saved the world.\"\n\n\"No. I saved you. Everyone else just got lucky.\" Kevin smiled and sat down next to Pike.\n\n\"No, I got lucky when I picked you up on the side of the road.\"\n\n\"I got lucky too.\" Kevin leaned down and pressed his gloved hand against Pike's cheek. \"I love you, Pike.\"\n\n\"I love you too, baby. Now get me out of here. I want to go home.\"\n\nIt was another three days before they were able to release the last of the infected from the quarantine hospitals which were deconstructed having served their purpose. It was another two days before Kevin was able to bring Pike home. The dogs met the car barking and jumping, thrilled to see their masters again.\n\n\"You saved the world and took care of my dogs? Where did you find the time?\" Kevin laughed.\n\n\"I called your neighbor and asked if she could take care of them. I didn't have any time to spare.\" Kevin helped Pike into the house and had him sit down on the couch. \"Hungry?\"\n\n\"Not really, though a beer would be great.\" Pike grinned. Kevin went over the list of meds he was taking mentally and concluded that one wouldn't hurt. He cracked two open for them and sat down next to his love. \n\n\"So does this mean you're on to another disease?\" Pike asked. \n\n\"No. I'm actually thinking of resigning from the NCMS. At least as a researcher.\"\n\n\"Really? What will you do?\"\n\n\"I think I'd like to just be a doctor. Just a regular one. Maybe open an office here in town. See patients, birth babies, wipe noses. That kind of shit.\"\n\n\"Won't it be a little boring for you? After all, you saved the world?\"\n\n\"Stop saying that. I didn't save the world.\"\n\n\"They're giving you the Nobel prize! I'm so proud of you. My boyfriend saved the world! No, bullshit!\" Pike put his arm around Kevin and pulled him tight. \n\n\"They're not giving me the Nobel prize, they're just nominating me for it.\"\n\n\"That's big shit no matter how you shake it.\" \n\n\"What does that even mean?\" Kevin asked and Pike laughed.\n\n\"I don't know. Maybe it's a side effect.\"\n\n\"Shut up. Ass.\" Kevin laid back against Pike's chest, once against strong with life. \n\n\"So, you moving in with me or what?\" Pike asked.\n\n\"You really want me to?\" Kevin asked.\n\n\"Yeah. I really do.\"\n\n\"Ok.\"\n\nEpilogue\n\nKevin walked out of his office onto Main St. Bright Arrow and shaded his eyes from the bright sun. He looked up and down the street and stopped looking when he was a large man walking toward him. It was his swagger that gave him away, Kevin thought. God, he was still so sexy. Pike reached Kevin and pulled him in for a kiss.\n\n\"Hey stud.\"\n\n\"Hey baby. How was work today?\"\n\n\"Fine. Wall to wall patients. The flu's going around.\" Kevin said and fell into step along side his husband of two years.\n\n\"You'd think someone would find a cure for that.\" Pike said.\n\n\"Yeah well, it's not going to be me. Besides, HLF is a cake walk next to the flu. What time are we meeting Annie?\"\n\n\"She's going to be at the house around five. I guess being pregnant finally made her slow down.\"\n\n\"I doubt it.\" Kevin disagreed. \"Annie's a fireball. She'll be director in a few years despite what Brian has to say about it.\"\n\n\"There are your parents.\" Pike pointed and Kevin looked over at the elderly couple, each holding a little boys hands as they walked along. \"Oh that reminds me, my parents will be here around eight.\"\n\n\"We'll have a full house.\" Kevin said, happily.\n\n\"Paulie's getting big.\" Pike said as he watched his son walk with his in-laws.\n\n\"He's only one.\"\n\n\"He'll need a brother or sister soon.\" Pike smiled and winked. \"You ready for it?\"\n\n\"And ruin this figure?\" Kevin laughed.\n\n\"You think someone will ever figure out a way for a guy to have a baby?\" Pike asked.\n\n\"It's not going to be me.\" Kevin said. Pike was laughing when he kissed his husband's lips. They caught up to Kevin's parents and their son and headed home."
    ],
    "authorname": "dagan732",
    "tags": [
        "gay novella",
        "gay romance",
        "gay drama",
        "romance novella",
        "drama"
    ],
    "category": "Gay Male",
    "url": "https://www.literotica.com/s/bright-arrow-ch-05"
}
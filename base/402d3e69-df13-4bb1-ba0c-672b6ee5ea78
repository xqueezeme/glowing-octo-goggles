{
    "title": "Jeanie's Lamp Ch. 05",
    "pages": [
        "The dreary Winter gradually gave way to Spring, bringing with it a warmth I'd sorely missed over the past few months of bitter weather. I could finally put away my heavier jackets and feel comfortable again in just jeans and a hoodie, something that I took full, complete advantage of.\n\nUnfortunately the warmer weather also meant more people were out and about during lunchtime, so Jeanie and I's days of fooling around beneath the bleachers were all but over. We still ate and hung out there as it'd now become something of a habit, but that was as far as it went nowadays.\n\nSurprisingly enough, I found that I didn't really care too much. I mean, sure, I liked getting my dick sucked at school, but it still felt good to just be together with her. I genuinely enjoyed just talking and joking around with her whether we were doing sexy things to each other or not.\n\n\"I'm cold,\" Jeanie complained from where she was sitting next to me on the metal bench.\n\nI shrugged and took a large bite of my turkey sandwich. \"Sucks.\" She punched me hard on the shoulder and I laughed, rubbing at my throbbing arm. I didn't understand how she could possibly be cold when she was usually totally fine at much lower temperatures, but I pulled my hoodie off anyway and draped it over her head. \"Fine, here.\"\n\nI watched her happily slide her arms into the sleeves and pull it on, the jacket almost comically large on her. She then immediately brought the sleeves up to her nose and took a deep breath.\n\n\"What, does it smell bad or something?\" I asked a bit self consciously.\n\n\"Well, it smells like you, so...\" she replied, giggling when I frowned.\n\n\"Give it back then.\"\n\n\"Nope.\" She wrapped my jacket tighter around herself and turned away from me when I reached for it, using her body to fend off my hands.\n\nI slipped my arms around her waist and she made a half hearted effort to squirm away, but after a few seconds she quickly gave up and pressed her back against my chest. She then cheekily stuck her tongue out at me, and that's when I took the chance to lean forward and kiss her. Like usual the sensation of her lips on mine sent a rush of adrenaline through me, my nerve endings burning with pleasure.\n\nI watched her bright blue eyes briefly widen in surprise before fluttering shut a moment later. She moaned quietly into my mouth and shifted back around so that we were in a more comfortable position, and out of the corner of my eye I noticed her thighs beginning to rub together in a way that I was painfully familiar with.\n\nAfter another few seconds of gentle making out I broke our kiss and smirked, panting a bit as I struggled to catch my breath.\n\n\"Are you getting hard?\" I mumbled into the crook of her neck, planting a few sucking kisses on the pale, smooth skin.\n\nJeanie mewled and tilted her head so that I had easier access. \"Shut up. Whose fault do you think it is?\" I placed a hand on her inner thigh and squeezed, the flesh pliant even through her jeans, but when I slowly began to inch my fingers closer to her growing bulge she immediately slapped them away. \"We'll get in trouble.\"\n\nAnnoyed, I grunted my displeasure and let her go. Even though public displays of affection technically weren't allowed on school grounds, as far as I knew it was rarely enforced; plus, there was no one close enough to see what we were doing anyway.\n\nA part of me wondered if some of her reluctance to do anything in public with me stemmed from the strange limbo we'd found ourselves in lately. Despite us both vaguely admitting that we had some feelings for each other and continuing to sleep together, it felt like we hadn't solidified anything. I had yet to officially ask her if she wanted to turn whatever we had into something more; partially because I wanted to be absolutely sure that us being together was what she truly wanted and not just something she'd agree to because she was afraid to lose me as a friend.\n\nShe'd been so adamant in the past about us only being friends that I didn't want to press the issue too much. I wanted to move at her pace, and since she hadn't brought up the idea of us dating, I didn't either. Was it cowardly of me? Maybe, but I figured it was better to be too cautious than to push her away entirely, even if it frustrated me more often than not.\n\n\"Hey, guys!\" Dennis called from the bottom of the bleachers, and my expression instinctively flattened while Jeanie not so subtly put a little more space between us. The other reason we hadn't been messing around much at school was currently bustling up the stairs towards us with his messenger bag slung over his shoulder, taking the steps two at a time in his haste to reach us.\n\nEver since he'd officially met Jeanie, Dennis had begun popping up around us more and more. His attention was always mainly and quite obviously focused on her and it never failed to make me feel like I was the odd man out. I fucking hated it, but he was sort of my friend and Jeanie really seemed to like him, so I begrudgingly kept my annoyed feelings to myself. I didn't own a monopoly on her time nor attention even if I sometimes found myself wanting to.\n\nIf he noticed that she was wearing my jacket he didn't say anything, instead taking a seat on Jeanie's other side and reaching into his bag. \"Mario Kart?\" he asked us, pulling out his game system.\n\nJeanie glanced up at me and I shrugged back, trying my best to look unbothered. I didn't know what she expected me to say; it was obvious from his gaze that he was talking to her and not to me. \"I don't have my Switch on me,\" she finally said, sliding her eyes back around to look at him.\n\n\"No problem! We can play on mine.\" He all but forced one of the little controllers into her hands and started up the game. He scooted closer until their knees were almost touching, clearly taking advantage of the fact that the screen was so small to get right on top of her, and I smothered a frown. It didn't exactly thrill me to see it knowing how he felt about her and all, but again, I wasn't about to tell her not to make friends.\n\nFor the next fifteen minutes they played together while I pretended that I wasn't paying attention to their every movement. Each time he nudged her shoulder with his to throw her off or she crowed with victory after hitting him with an especially timely blue shell I felt the pit in my stomach grow a little more. I knew it was stupid of me to feel jealous when she didn't even belong to me, but who had full control over their feelings?\n\nI was more relieved than I cared to admit when the bell signalling the end of lunch rang, and like a shot I was on my feet and ready to head to my next class. I gathered up the trash remaining from our lunches and slung my bag over my shoulder. \"That's the bell,\" I said unnecessarily.\n\nNeither of them budged at my words, both still too engrossed in the current race to answer, so annoyed I grit my teeth and headed down the steps without them.\n\n\"Wait a second,\" Jeanie called once I'd reached the bottom, and as much as I wanted to keep walking and pretend that I hadn't heard her I wasn't quite willing to be that immature. I watched her hand Dennis back the controller and say a quick goodbye before she hopped down the steps to stand in front of me. \"Walk me to class?\"\n\nFrowning slightly, I glanced over her head at Dennis. He was trying to stuff his things back into his bag as quickly as he could, presumably to catch up with the two of us. \"You can walk with Dennis, if you want. I don't care.\"\n\nShe cocked her head and furrowed her brow as though the idea literally hadn't even occurred to her. \"Yeah, but I want to walk with you.\"\n\nI shrugged and bit back my grin, instead just setting off for the school building while she fell into step beside me. I was hoping Dennis would get the hint and not follow us, and when he didn't catch up to us right away I figured that he had.\n\n\"Are you working today?\" Jeanie asked after a couple of minutes of silence, tucking a few strands of dark hair behind her ear as she looked up at me.\n\n\"Nah, I'm off. Why, did you wanna hang out?\"\n\n\"Yeah, but...I was thinking we could go to your place this time?\" She looked a little nervous after asking, her teeth worrying at her bottom lip, and it was only then that I realized in our few months of knowing each other she hadn't once been to my house. It hadn't been intentional, at least not on my part; it'd just become sort of a habit to head over to hers after work or on the weekend.\n\n\"Sure. No one gets home until like six or seven anyway.\"\n\nI watched her eyes light up and relief pour into her expression. \"Great.\" She bumped my shoulder with hers, surreptitiously grabbing my hand and squeezing it for a moment before peeling off to head down the hall to her own classroom. \"See you after,\" she tossed over her shoulder, her lip ring glinting under the harsh fluorescent lights as she flashed me a bright smile.\n\nI smiled back even though she'd already turned away, finding it sort of cute how shy she was about public displays of affection and even cuter how she couldn't seem to stop herself regardless.\n\nI dragged myself through the rest of the day's classes, already eagerly anticipating what we'd get up to after school, and by the time I made it out to the student parking lot Jeanie was already leaning against my car with the hoodie I'd loaned her earlier tied loosely around her waist. \"Hey, watch the paint,\" I joked as I approached, using my key fob to unlock the door for her.\n\nShe didn't dignify it with a response, instead just flipping me off while she opened the door and slid into the passenger seat. I did the same a moment later, starting it up and carefully maneuvering out onto the road to make the short trip over to my house.\n\n\"Don't expect too much, my house isn't as big as yours,\" I said once we'd gotten close to my block, suddenly nervous for her to see where I lived. I wasn't ashamed of my house, not in the least, but compared to hers it seemed almost quaint.\n\nShe stepped out of the car once I'd parked, looked up at it, and shrugged. \"I like yours a lot more than mine.\"\n\nMy shoulders dropped a bit with relief. \"Because it's not haunted?\" I teased while leading her up to the front door.\n\nI could almost feel Jeanie rolling her eyes behind me. \"Seriously, why the hell do I put up with you?\"\n\n\"I've been wondering that for months.\" I unlocked the door for her and briefly led her around the first floor, pointing out the major landmarks and giving her only the barest of tours, and then motioned for her to follow me up the stairs to my room.\n\n\"It's kind of messy,\" I mumbled, setting my backpack down on my computer chair and wishing I'd actually made my bed for once. I watched her take everything in, her fingers sliding delicately over the many knick knacks I'd collected over the years.\n\nIt felt odd to have her in my space, looking at all of the things that made up my life, and I couldn't help but feel a bit self conscious about some of the posters I had up. There were an awful lot of buxom women plastered on my walls, most of them tall, busty blondes with the piece de resistance being a large print of Pamela Anderson in her signature red one piece.\n\n\"This is such a boy's room,\" she said after a minute, smirking at the embarrassed look on my face. With a small intake of breath she hopped onto my unmade bed and lie back, her dark curly hair splaying around her head. She then grabbed my pillow and hugged it to her chest, bringing it up to her nose for a small whiff.\n\n\"Seriously, what is it with you and smelling my stuff?\" I asked.\n\nJeanie shrugged her shoulders. \"I'm a glutton for punishment, I guess.\" She tossed the pillow out of the way and pushed herself up onto her elbows to quirk an eyebrow at me. \"So, you just gonna stand there?\"\n\nWith a small, exasperated shake of my head, I approached the bed and leaned over her body, placing one of my hands next to her shoulder to hold myself up. I gently ghosted my lips against hers, intending to take things a little slower than usual, but she clearly had other ideas. What started as soft, sweet pecks quickly devolved into filthy making out when she wrapped her arms around my neck and pulled me down until our lips were sealed firmly together.\n\nShe ground her hips up into mine, in the process forcing our hard cocks to rub against each other, and even through the rough fabric of our jeans I felt little shocks of pleasure crawl up my spine.\n\nAfter a minute or two of letting her have her way I broke the kiss, ignoring her whine of protest that quickly turned into a moan of pleasure when I pressed my lips into the sensitive spot between her neck and shoulder. I then slid further down her body, shoving her long sleeved shirt and bra up over her chest to expose her small breasts and hard, pink nipples to my hungry gaze.\n\nI planted my lips over one of them while I pinched the other with my fingertips, thoroughly enjoying the way she squirmed beneath me. Her eyes squeezed shut every time I swirled my tongue around the nipple in my mouth, and each time I gently grazed the nub with my teeth she'd let out a sharp little gasp. It was like a game figuring out exactly what made Jeanie tick, and it was one that I never got tired of playing.\n\nStill, I had a destination in mind and began to kiss my way down her sternum and flat stomach until I reached the waistband of her pants. I made quick work of the button and then paused with my hand on her zipper to look up at her, only to see her staring back at me with her lips parted and pupils blown wide.\n\n\"What do you want?\" I asked, smirking at her impatience.\n\nJeanie scowled down at me. \"You know what I want.\"\n\nI nonchalantly shrugged my shoulders. \"I'm not sure I do.\"\n\nWith a huff she reached down to unzip them herself, but I effortlessly batted her hands away. \"Can you please suck my dick?\" she finally begged when it became clear that it was the only way she was going to get off.\n\nMy grin widened, finding the power I held over her intoxicating even though I knew that I'd probably pay dearly at some point for teasing her like I was. Deciding to take mercy on her I pulled the zipper the rest of the way down and slid my fingers into her belt loops to lower them just enough to reveal her plain, pastel blue panties. I then gently nuzzled her bulge with my lips, taking in the faint scent of her usual floral body wash and sweat.\n\nI slowly pulled down the waistband of her underwear until just the cute, pale pink head of her cock was visible and ran the flat of my tongue over it, delighting in her soft, shuddering sighs. I swiped against the salty skin a few more times until I felt her fingers none too gently pulling at my hair.\n\n\"Stop teasing me,\" she panted, glaring down at me from over her chest.\n\n\"Impatient,\" I murmured back. Still, I pulled her jeans the rest of the way off along with her panties, revealing her engorged pink length. I easily slid half of it into my mouth, and out of the corner of my eye I watched her fingers grip my bedsheets as she writhed beneath me.\n\nI nursed on it slowly, my cheek resting on the hot, smooth skin of her stomach. It wasn't really so much the sucking cock part that I particularly enjoyed, though I'd gotten disturbingly good at it if her reactions were to be believed. It was more her heavy breaths and cute moans that excited me, knowing that I was making her feel as good as she usually did for me.\n\nWhenever I felt her grow and harden in my mouth I'd immediately back off until she calmed down, and then I'd start all over again from the beginning, smiling each time at her whimper of disappointment.\n\nI eventually took mercy on her\u2014and myself, as my jaw was really beginning to grow tired\u2014and took her in as deep into my mouth as I could. My tongue began to work overtime, running over her glans in wet, swirling strokes.\n\nIt didn't take too much longer after that. She exploded in my mouth, coming with a high, breathy moan that sent a surge of new life into my own cock, and her hips rose from the bed in a staccato rhythm as her hands tightly gripped my bedsheets. It was the most I'd ever felt her cum, easily filling my mouth until I had to swallow twice to keep myself from drowning in it. I grimaced a bit at the taste, because while I'd gotten used to it over the past few weeks it still left a lot to be desired.\n\nHer body continued to convulse with each gentle suck of my lips until her hands were pushing at my head in an attempt to get me to let go, and with a satisfied smirk I allowed her to slip out of my mouth with a wet 'pop'. I then kissed my way back up her body and past her sweaty, heaving chest until I got to her lips.\n\nWe lazily made out for a while, the only sounds in my bedroom coming from her soft sighs and the gentle smacking of our lips. Kissing her felt good\u2014too good\u2014and I was intensely aware of how dangerous it was. My feelings for Jeanie were growing at a terrifying rate, along with another part of me that was now brushing up against her naked thigh.\n\nIt wasn't that I was necessarily afraid of feeling more for her. I trusted Jeanie in a way that I'd never trusted any other girl before and knew instinctively that she would never intentionally try to hurt me.\n\nIt was more that I didn't quite know how to react to the emotions swirling around inside my chest. I wanted her around all the time in a way that felt alarming; namely because I knew how unrealistic and unhealthy I was being. The thought of not being able to see her filled me with a dread I'd have rolled my eyes and laughed at only a month ago, but well, here I was.\n\nMy musings were abruptly interrupted by the sound of the front door slamming, and like I'd been shoved I jumped off of her and onto my feet, heartbeat thumping loudly in my ears.\n\nJeanie hastily reached down to pull up and button her jeans, eyes wide. \"Who's that?\"\n\n\"I don't know, no one should be home for another few hours! Fuck,\" I mumbled, quickly making my way over to the door. I placed my ear against it in an attempt to hear something but it was completely silent on the other side. I'd have to investigate things personally. \"Okay, you stay in here and I'll try to sneak you out when I find a chance.\"\n\nI wiped my mouth and adjusted my clothing in an attempt to look like I hadn't just been sucking a girl off in my room and slipped out into the hallway, closing the door quietly behind me. I then jogged down the stairs with my heart in my throat, hoping it was my dad just stopping by to pick up something he'd forgotten.\n\nOf course, I'd never been that lucky. Instead of my dad, I rounded the corner to see my mother putting away groceries. She didn't look like she was planning to go back to the hospital anytime soon, but there was really only one way to find out.\n\nI forced a grin and an air of nonchalance and made enough noise as I entered the kitchen to not startle her. \"Hey, mom. You're home early.\"\n\n\"Hi there, stranger,\" she said, sparing me a quick smile as she put away a bag of tortilla chips. \"I left my shift a little early because I thought we could all have dinner together for once. It's been awhile.\"\n\nI nodded back uneasily, inwardly cursing my rotten luck. The first time I sneak Jeanie up to my room and this happens. \"Uh, I might be leaving here in a bit, but I can definitely make it back in time for dinner.\"\n\n\"Make sure that you do. I feel like I never get to speak with you anymore.\"\n\n\"Yeah, you know, I've just been busy with school and work and everything.\" I ran an uncomfortable hand through my hair as I threw together a hasty plan; one that I hoped would save us all some embarrassment. \"I should get going,\" I said, turning on my heel to jog back up the stairs.",
        "\"Okay, but hurry back. I'm making spaghetti!\" she called after me.\n\nI made it to my bedroom in record time where Jeanie was anxiously waiting for me on my bed. I considered making a joke about it, but even I could recognize that it really wasn't the time. \"It's my mom, she's in the kitchen putting away groceries. If we leave right now we can slip past her. Come on,\" I said, grabbing her hand and pulling her to her feet. I threw open the door, fully intending to make a break for it...only to see my mother standing there with her hand raised to knock.\n\nShe blinked owlishly at the two of us and froze. I watched her eyes slide from me to Jeanie and then back again, and just like that I knew I was fucked. \"Oh,\" she said after an awkward few seconds of silence.\n\n\"Um, mom, this is Jeanie,\" I mumbled lamely, waving my hand in her general direction.\n\nStill standing with her arm raised, she turned her incredulous gaze back to Jeanie. \"Hello, Jeanie.\"\n\n\"It's nice to meet you, Mrs. Umpleby,\" she shyly replied, half hiding herself behind me. I'd have found it endearing if I weren't so petrified.\n\nMy mother seemed to come back to herself at that, shaking her head with a bit of disbelief and huffing a laugh which I took to be a good sign. At the very least she didn't seem angry. \"None of that, call me Mary. Are you staying for dinner?\"\n\nI blinked at the smile on my mother's face as she looked at Jeanie. I'd expected a little bit more of a negative reaction considering I'd snuck a girl into my room, like a disappointed frown or maybe even a few stern words. Instead she almost looked...ecstatic. \"Actually, I was just gonna take her home.\"\n\n\"You can take her home after dinner,\" she immediately rebutted.\n\nI almost laughed at the idea. Let my mom interrogate my not-quite-girlfriend? Not a chance in hell. \"Mom.\"\n\nPressing her lips tightly together, she turned back to me and narrowed her eyes. \"Francis.\"\n\nUnfortunately for me, Jeanie chose that exact moment to decide to make herself known again. \"I'd love to stay, if you don't mind having me.\"\n\n\"Of course not. Frankie never lets us meet his girlfriends, so I'm not letting you get away that easily.\"\n\n\"Is there anything I can help you with?\" Jeanie asked, a little more boldly than before.\n\nMy mother's smile widened, and just like that I knew she was in love. \"I can always use an extra pair of hands.\"\n\nMy shoulders slumped. I knew when I'd been defeated. \"Fine, we'll be down in a second.\" I waited for my mom to head back down the stairs before I reeled on Jeanie, glaring down at her with disbelief. \"What are you doing?\" I whispered harshly.\n\nJeanie cocked an eyebrow. \"Staying for dinner.\" She brushed past me to follow my mom, and left with no other option I reluctantly did the same, already dreading what the next few hours would bring.\n\nThis was all new territory for me. Like my mother had said, I never let any girl I was interested in meet my parents. Not because I was embarrassed, or ashamed, or anything like that; I just didn't want to deal with all of the questions and awkwardness that inviting a girl home would inevitably bring. My mom was a lot of things, but subtle definitely wasn't one of them.\n\nI stayed at the kitchen table as she blatantly grilled Jeanie, asking her all sorts of questions that even I hadn't thought to ask like her favorite food, her dream job, and questions about her family. Whenever she ventured too close to Jeanie's past or asked her questions about her hometown I did what I could to quietly steer the conversation in a different direction, though judging by the sharp glances my mother would send me whenever I did she definitely noticed.\n\nMore than anything I was shocked to see that Jeanie was actually proficient at the tasks my mother had given her. She was currently chopping what appeared to be cilantro or parsley with relative ease, slicing the vegetable into tiny pieces and scraping them into a bowl to be used as garnish later. She looked extremely cute in my mother's pink apron, her curly dark brown hair tied back into a ponytail and her feet bare, revealing her freshly black painted toenails.\n\nI briefly considered making a barefoot in the kitchen joke but thought better of it as she was holding a knife. \"You can actually cook?\"\n\nShe spared me an exasperated glance. \"I'm literally just chopping parsley.\"\n\n\"It's more than he can do. You'd think he'd have picked up something working at a diner,\" my mother said from the stove where she was stirring the spaghetti sauce.\n\nJeanie laughed, and I frowned. I wasn't sure how I felt about the two of them ganging up on me because on one hand it was great that they seemed to be getting along, but on the other...well, it wasn't exactly fun to be the butt of the joke.\n\nThe meal was mostly ready to eat by the time I heard the front door open, and I watched as Jeanie's back straightened along with the return of her nervousness. She glanced anxiously at me and then at the doorway where my dad appeared with his briefcase and coat in hand. He surveyed the scene with mild surprise, eyes landing on each one of us in turn. \"We have a guest,\" he drawled, throwing his jacket over his usual chair at the head.\n\n\"Dad, this is Jeanie,\" I murmured, not quite sure how to introduce her since we were definitely more than friends but I wasn't about to presume that we were together without asking her first.\n\nShe fully turned to look at him, giving him a shy smile and a wave. \"It's nice to meet you, sir.\"\n\nI raised my eyebrows at her. It was still weird seeing this side of her knowing how boisterous she usually was.\n\n\"So you're the girl, huh? You had him moping around for a bit there.\"\n\nI didn't dare look at the smug look that I just knew was on her face and instead simply rolled my eyes. \"Are we eating now or what? I'm starving.\"\n\nIt was a simple meal of salad, spaghetti, broccoli, and store bought garlic bread, but after the stressful evening I'd had fending off my mother's attacks it seemed like a feast. It was the perfect carb heavy comfort food I needed to calm my frayed nerves, and it certainly didn't hurt that my dad helped to run interference on my mom by keeping the conversation light and away from the more difficult topics.\n\nOddly enough they bonded over college basketball; Jeanie was a diehard North Carolina Tar Heels fan which put her at odds with my dad who was of course all about the Georgia Bulldogs, but even I could see the twinkle in his eye as he argued with her about which team was better. She was doing great.\n\nMy mother smiled as she looked between the two of us. \"You two are so cute together. I'll admit I was a little worried about him suddenly dating a girl that I hadn't even heard about, but I feel much better about it now.\"\n\nJeanie blushed fully, rare for her, and studied her remaining food.\n\n\"Mom, you're being embarrassing.\"\n\n\"What? I'm just saying that she's a lot better than I expected from you. Are you sure you want to settle for him? You can do better.\"\n\n\"Oh my God,\" I groaned, putting my face into my hands. This was exactly why I never brought girls home.\n\nJeanie smiled and shook her head. \"I don't know, he has a few good points. He's the first friend I made here, and he made me feel welcome right away.\"\n\nMy mother looked over at me with pride. \"I guess we did something right.\"\n\n\"Thanks, mom, glad to know that I'm not a complete screw up,\" I shot back.\n\n\"Oh, you know I'm teasing,\" she said, waving a dismissive hand towards me. She then turned her attention back to Jeanie. \"So, what are your plans for after graduation?\"\n\nJeanie shifted uncomfortably in her seat. \"I got accepted to UCLA, USC, and Colombia, but I'm still not sure where I want to go yet. I haven't exactly picked a major.\"\n\nI stared at the side of her head, shocked. I hadn't known that. Hell, after a little thought I realized there was a lot about Jeanie that I didn't know. Our conversations typically stayed very surface level and flirty, and it was rare that we discussed anything substantial about the future.\n\n\"All of those are so far. There weren't any schools you liked down here?\" my mother asked, basically pouting.\n\nA strange look crossed Jeanie's face. \"I've lived in the South my entire life. I thought I'd try something different.\"\n\nThe answer seemed to appease my mother, who only nodded her disappointment. At the same time I was still reeling a bit from knowing that she was going so far away even though I really shouldn't have been surprised. Of course she'd want to get out of the South and go to a place that would probably be a little more accepting of who she was. She wouldn't have to hide so much anymore, and she'd be able to make friends who probably understood a hell of a lot better than I did what she was going through. It was selfish of me to be upset, but still I was. Whatever we were becoming had a clear expiration date, and it was approaching faster than I'd ever expected.\n\nWith our bellies filled we all helped to clear the table, though when Jeanie and I attempted to help with the dishes my mother shooed us out of the kitchen and told me to take her home since it was still a weeknight. She hugged Jeanie goodbye, simultaneously extracting a promise out of her to come over again soon.\n\n\"I like your family,\" Jeanie said as I backed my car out of our driveway and onto the street.\n\n\"Yeah, well, they're in love with you. I'm pretty sure my mom wants you to be her daughter now.\"\n\nShe was silent for a minute after that, the only sound in the vehicle coming from the quiet music playing through my speakers. \"They think I'm your girlfriend.\"\n\nI glanced over at her curiously. Was she upset about it? I couldn't read her expression nor her tone at all. \"I'll clear it up, don't worry. I'm not sure how yet, but I'll think of something.\"\n\nJeanie nervously flicked her lip ring with her tongue, a habit she had when she was uncomfortable. \"Or you could just leave it.\"\n\nMy heart lurched in my chest. I didn't know what to say. \"What, like, have you pretend to be my girlfriend?\" I chanced another look at her face and immediately understood what she was saying. \"Oh.\"\n\nI was surprised by the smile I felt growing on my face at the thought, because if I was being realistic, I couldn't think of any reason why we shouldn't be officially dating. I liked her, I had fun with her, and mostly importantly, I felt comfortable around her. I never felt the need to act cool or interesting because for some strange reason she seemed to think that I was those things anyway.\n\nI laughed a bit and sighed, unable to believe that it'd taken me this long to realize what I should've just done weeks ago. \"Jeanie\u2014\"\n\n\"Forget I said anything,\" she snapped, cutting me off before I could say another word, and I was startled to see the beginning of tears in her eyes. \"If I got huge fake tits and dyed my hair blonde would you date me? Or is it because I'm trans?\"\n\nIn my annoyance, my fingers gripped the steering wheel so hard my knuckles began to turn white. \"First of all, that has nothing to do with this. And it's not even that I don't want to date you because trust me, I really, really do. It's just...why me? Because I'm the first guy you slept with?\"\n\nShe gave me a glare that was somewhere between anger and disbelief. Pink splotches appeared on her cheeks, and for the first time I worried that she might actually take a swing at me while I was driving. \"You really think that's why I like you?\"\n\n\"I only mean that you're apparently going to California or New York or wherever and I'm probably just going to end staying here and going to the community college. You could do better than someone like me.\"\n\nShe vehemently shook her head, frown deepening. \"None of that matters to me. What matters is that you don't treat me like I'm some sort of a freak or coddle me like the rest of my family does. You make me happy and accept me for who I am, and that's all I care about. The rest we'll figure out together.\" A small, mischievous smile appeared on her face. \"It also doesn't hurt that you suck a mean dick.\"\n\nI laughed then, mostly out of relief that she didn't seem as angry with me as she had been. \"This is a weird way to start a relationship.\"\n\n\"Our friendship started pretty weird, too.\"\n\n\"True.\" I reached for her hand and laced our fingers together once I'd parked in front of her house. She took the chance to lean forward and kiss me, her other hand coming up to cup my jaw and draw me closer. \"That felt different,\" I murmured once she'd pulled away to settle back into her own seat.\n\n\"Yeah.\" She bit her lip and averted her gaze, eyes falling down to her lap. \"It really doesn't bother you?\"\n\nI placed a finger below her chin and lifted her head until she was looking directly at me, her bright blue eyes staring hesitantly into mine. I could see the uncertainty in her gaze, and even more than that the fear; fear that I'd reject her, or fear that I'd eventually decide I didn't want to be with her after all. I didn't know what I'd done to make her think that, but I resolved to never do it again.\n\n\"Not even a little bit.\"\n\n\u2014\n\nNot a whole lot changed in the weeks after we became an official couple. We still went on dates, slept together, and hung out whenever we could between school and work.\n\nReally the only difference I'd noticed in her behavior was that she'd become markedly more comfortable with being affectionate in public, holding my hand when we walked together and kissing me goodbye whenever we parted. It was like she'd just been waiting to be sure of my feelings before allowing herself to fully relax with me, and now that she was all bets were off.\n\nDennis had understandably balked at the sight of us. I felt a little bad about it given his obvious feelings for her and he largely avoided us now as a result, but I truly couldn't find it within myself to give a shit about that point in particular; especially since it meant that I got to have her mostly to myself now.\n\nWe were spending so much time together that she'd complained a couple of times all of the sex was cutting into her precious gaming time, so as a compromise I'd jokingly suggested that we have sex while she played.\n\nUnsurprisingly she'd thought it was a great idea and as such was currently sitting half naked in my lap, slowly rocking herself back and forth on my dick while I played with any bit of skin that I could reach. It was killing me to not just snatch the controller out of her hands and fuck her like I wanted to, but we had a deal.\n\n\"You're really good at this game,\" I said from where I was sitting on her bed, watching her play a round of Call of Duty from over her shoulder. Even distracted she was destroying them, her kill death ratio better than anything I could ever hope to accomplish.\n\nJeanie shook her head a little, her hole tightening around my cock when I pinched at one of her nipples under her t-shirt. \"Eh, not really. These guys just all suck.\"\n\nI heard a lot of indignant shouting come from her headset and laughed. \"No, seriously, ever think about streaming or something? There's no way you wouldn't get a ton of viewers.\"\n\n\"Oh, sure, that'll happen.\" She stabbed a guy in the back, stole his rocket launcher and blew up two more nearby effortlessly before turning off her mic. \"The last thing I need is for someone from my hometown to learn about it and out me to the entire world.\"\n\n\"Good point,\" I grimaced. I hadn't thought of that. \"Sorry.\"\n\nShe shrugged my apology off but I could still see the tenseness in her shoulders. I couldn't imagine what it was like for her to have to worry about everything she did or even wanted to do, and all because of some assholes who wouldn't accept anything outside of their narrow worldview. It was infuriating.\n\nI planted a kiss on her jaw and then peppered a few more along her neck until I felt her relax against me. \"You ready to cum yet?\" she asked with a voice full of knowing, swirling her hips in my lap more insistently.\n\nI'd actually been ready to cum for the last five minutes, but she didn't need to know that. \"Cocky, aren't you? You really think you're that good?\"\n\n\"You tell me.\" her pace suddenly quickened, and it was only then that I realized my mistake. She leaned forward and arched her back so that she could take me tip to root, sliding up and down my cock at a speed that could only be described as blistering. The slap of skin on skin echoed throughout the large bedroom, and when I tried to grip her hips to slow her down a little she none too gently shoved my hands away.\n\nEach time I bottomed out in her ass she'd wiggle her hips a little, sending sparks of pleasure shooting down my spine and making me groan with pleasure. Her tight, pink asshole gripped my cock in a perfect vice, and slowly I began to feel a warm, familiar tightness building in my pelvis. It was all I could do to keep my eyes open and yet somehow she still seemed to be able to focus on the screen.\n\n\"You just got harder inside me,\" she said with an amused lilt in her voice. \"You gonna cum?\"\n\n\"Fuck you,\" I groaned back, and she laughed.\n\n\"You already are, though.\" she clenched the muscles of her ass then, drawing another sharp gasp from my throat. \"But I guess it's more accurate to say that I'm the one who's fucking you.\"\n\nWith her hot, slippery hole wrapped around my cock and her beautiful ass bouncing in my lap, there was no amount of long division that could stop me from letting go. I wrapped my arms tightly around her stomach, and after a few hard, erratic thrusts, I came.\n\nEvery single one of my muscles seized at once as I released rope after rope of cum into her bowels, loudly grunting and gasping in her ear. Fireworks went off behind my closed eyelids, and it was only through Jeanie's warm, grounding presence in my arms that I managed to stay upright.\n\nIt felt like a long time before the high of my orgasm wore off, but by the time I'd fully come to I was slumped over Jeanie's shoulder, my arms still hanging loosely around her waist. My dick was only half hard when it finally slid out of her, and I flopped backwards onto the bed, completely and utterly spent.\n\nAfter another minute or so she finished her round and lie down on the bed next to me, looking far too smug to be real as she stared into my eyes.\n\n\"You didn't cum,\" I said unnecessarily, reaching out and pulling her closer until she was almost flush against me. I reached a hand down between us for her cock, but she intercepted it and took my hand in her own instead.\n\n\"It's okay.\" She laced our fingers together, and while I was still trying to catch my breath she spoke again. \"Speaking of my hometown, what're you doing over spring break?\" she finally asked.\n\n\"Probably working, why?\"\n\nHer eyes flickered away from mine. \"Do you want to maybe come with me to visit my family?\"\n\nI blinked at the offer, not completely sure if I'd heard her correctly. \"You mean in North Carolina?\"\n\n\"Yeah, well, my mom got excited when we started dating and kind of told my grandma about you, and of course she told anyone who'd listen, so now everyone wants me to meet the guy crazy enough to date the family freak.\"\n\n\"Stop that,\" I said, reaching around to give her a sharp smack on her bare butt and leaving a light pink welt. I hated it when she spoke badly about herself and made sure to correct her whenever she did.\n\n\"Well, it's true. Look, I just said I'd ask, so obviously you can say no.\" She paused and cocked her head, scrutinizing me. \"Actually, you probably should.\"\n\nKnowing exactly what I did about her past, the thought of her having to go back to her hometown and deal with it all on her own made me blanche. If I could be there to lessen her anxiety even a little bit, I would.",
        "\"I have to check with work and my parents, but if you want me there, I'm there.\"\n\nJeanie smiled brightly in response, though just as quickly it morphed into a small, concerned frown. \"It's going to be uncomfortable, just so you know. I bet they already think you're some sort of hideous, hunchbacked loser.\"\n\n\"Then we'll just have to prove them wrong, won't we?\"\n\nShe pretended to consider the question, rolling her eyes upwards in thought. \"Well, you don't have a hunchback at least.\"\n\n\"Hey!\" I rolled us both over so that I was on top and was about to tickle her to death, but once I was there I found that I truly couldn't work up the effort to. Instead I sighed and flopped back onto the bed, giving her a playful scowl. \"Consider yourself lucky that I'm too tired to punish you right now.\"\n\n\"Aww, you wanna just sleep over tonight?\"\n\nIt sounded appealing, especially after such a long shift at work and coming as hard as I did, but it was also completely unrealistic. \"Your mom might be cool about it, but mine would freak if I spent the night in my girlfriend's bed.\"\n\nJeanie shrugged a shoulder. \"I'm not sure if mine is cool with it either, I just think she's just too afraid to say anything. You know, worried I'll\u2014\" she stuck out her tongue and made a motion like she was hanging herself, and I frowned.\n\n\"That's really not funny.\"\n\n\"I wasn't joking. After I almost...you know, she kind of let me get away with a lot.\"\n\nI gently grabbed her chin and forced her to look at me. \"Promise me you'll never try that again.\"\n\n\"I can't promise you that. But,\" she said, squeezing my hand when I glared incredulously at her, \"I'm different than I was back then. I don't think I would.\"\n\n\"You'd better not. I need you.\" My eyes widened a bit at my confession; I hadn't meant to say it, and especially not right then. It was only recently that I'd begun to feel that way towards her\u2014like I couldn't imagine a life without her in it. I noticed that she seemed just as surprised, her cheeks rosy with embarrassment, and I rushed to change the subject. \"Okay, five more minutes and then I really have to go.\"\n\n\"Lame.\" She snuggled closer until we were nearly nose to nose and I could see the little flecks of green in her blue eyes. \"I'm glad you're coming with me to North Carolina.\"\n\nShe smiled then, a bit bashfully, and seeing the happiness and relief in her gaze I smiled too. I was nervous about meeting a bunch of strangers, but if it'd keep that look on her face I'd have done anything; even if it meant putting myself in what would probably the most uncomfortable situation of my life.\n\n \n"
    ],
    "authorname": "dgirlanonymous",
    "tags": [
        "anal",
        "blowjob",
        "oral",
        "romance",
        "trans",
        "transgender",
        "transgirl",
        "transwoman"
    ],
    "category": "Transgender & Crossdressers",
    "url": "https://www.literotica.com/s/jeanies-lamp-ch-05"
}
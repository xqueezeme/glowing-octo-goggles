{
    "title": "Nellie and the Diamond Gala",
    "pages": [
        "Author's Note:\n\nThis is a stand-alone story that is part of a larger series about the titular character, Nellie. Each story that follows can be read on its own or together, in any particular order, though they will be posted in chronological order. The stories may fall under different categories, but all will tell tales of Nellie's various adventures.\n\nIn this adventure, Nellie needs a date for a gala so she doesn't have to go with the one her father arranged for her. Desperate, she turns to the only person she thinks can help, but he wants something in return. This story follows the events of Nellie & The Professor.\n\n**\n\n\"You've brought an appropriate outfit?\"\n\n\"Yes, Dad.\"\n\n\"Appropriate, Nellie.\"\n\nSighing, I dropped my suitcase to the floor and unzipped it, removing the dress I'd packed haphazardly on top of my clothing.\n\n\"You approved this one last time,\" I grumbled, shaking the fabric out. \"Knee-length, black, tight enough to be alluring but not low-cut enough to look like a slut, remember?\" \n\n\"That is Chanel!\" Kimberlee whimpered. She reached forward instinctively, stopping herself before she rescued the fabric from my uneducated hands.\n\n\"You also wore it last time,\" Dad said, ignoring Kimberlee as he took the crumpled dress from me. \n\n\"Well, yeah, but it's just a black dress.\"\n\nDad gave me a cold look, then turned to Kimberlee and handed her the dress. \"Please pick something else for Eleanor to wear tomorrow. Not black. I believe Angelique said Clinton was intending to wear red, perhaps something Valentino would be best.\"\n\n\"Clinton?\" I repeated.\n\n\"Clinton Thibault.\" \n\n\"Why does it matter what Clinton's wearing?\"\n\nThe look he gave me was clear: he was patiently humouring my idiocy, but losing tolerance. \n\n\"You will be attending as his date.\"\n\n\"No,\" I blurted. \"No fucking way.\" \n\n\"Eleanor!\"\n\n\"It's Nellie,\" I said, gritting my teeth. \"And there's no way I'm going with Clinton Thibault. No way. I refuse.\" \n\nKimberlee seemed to tremble as my dad set his eyes on me, drawing himself up to his full height. Luckily, he wasn't very tall, and since I'd had a lifetime of experiencing that look, some of the intended intimidation was lost on me.\n\n\"Clinton's father is an important investor,\" he said. \"He is well aware that you do not have another date, so you will be attending the gala with Clinton.\"\n\n\"Dad, he's a fucking pig, he\u2014\"\n\n\"Language!\"\n\n\"He is!\" I protested.\n\nClinton wasn't just a pig, he was the worst kind of pig. Rumour had it he had a little trouble understanding what \"consent\" was, and at least three different girls had made claims about him that were swept quietly under the rug with undisclosed price tags applied to their silence. \n\nBut as Dad said, his father was an important investor. Investor in what, exactly, I didn't know, but my dad spoke two languages: business and personal gain. When Clinton decided to cop a feel, well, what was a little loss of dignity if it meant keeping the investors happy?\n\n\"That seems rather harsh, Nellie,\" Dad scoffed.\n\n\"Harsh? He doesn't understand the meaning of the word 'no.' He's not just a pig, he's fucking stupid.\"\n\n\"I'm quite certain those rumours are greatly exaggerated,\" Dad said, impatience strung through his voice. \"Boys will be boys. Clinton is a perfectly nice young man with a bright future. You could certainly do worse.\"\n\n\"What if I get another date?\" I asked, trying not to sound as desperate as I felt.\n\nDad raised an eyebrow. \"Do you really believe I'd buy that after the last debacle?\"\n\nMy face turned red and I struggled to maintain my cool. The last debacle was the previous month, just after I'd lost my waitressing job and went crawling back to my dad for money. I'd pushed the envelope a bit too far when I told Dad I'd find my own date for the charity dinner Kimberlee was hosting, then showed up with Sydney on my arm dressed in a very nice tuxedo with a painted-on mustache. \n\nI'd thought it was hilarious. Dad, not so much. He would probably have reacted better if I'd gone with my original plan, which was to ask Ben to come as my date, but I thought having my former professor who also happened to be a man the same age as my father escort me to dinner would be even more scandalous than my best friend with a fake mustache.\n\n\"I won't... I'll get a real date,\" I said. \"Someone, um... A guy, obviously.\"\n\n\"And where, exactly, are you going to find a date the night before the event who I would give my blessing to? Keeping in mind, of course, that we are talking about the Thibaults, and I am not about to offend them so you can find some lowlife to gussy up for an evening.\"\n\nI blurted the first name I thought of. My dad raised his eyebrows, glanced at Kimberlee, then chuckled with that condescending, patient humour. \n\n\"All right. I'll let the Thibaults know that you, unfortunately, had already committed to going with someone else.\"\n\n\"Thank\u2014\"\n\n\"And if you're lying,\" he continued, \"you will be Clinton's escort for every event he is to attend for the rest of the summer. I believe they were intending on going to Vermont for a festival next weekend. I'm sure they would be appreciative of your attendance.\" \n\nI nodded.\n\n\"And Eleanor? No further surprises,\" he said. \"Do not show up in a different dress than the one Kimberlee purchases. Do not dye your hair, get some horrid tattoo, or decide you need your nose pierced. You will be present and proper at this event or I expect you will need to find a new, less expensive place to live for your final year of school.\" \n\nDad stalked away, leaving Kimberlee standing in the foyer holding my dress as she stared at me.\n\n\"Regret it yet?\" I asked her sarcastically.\n\nShe didn't say anything, just looked at the fabric in her hands.\n\n\"What colour, if not red?\" she replied.\n\n\"Black.\"\n\n\"Nellie, please\u2014\"\n\n\"Rainbow, then. Honestly, Kim, I don't care.\"\n\n\"Kimberlee.\"\n\n\"Kim'll do.\" \n\nShe sighed, but instead of walking away offended as I expected, she put a comforting hand on my shoulder.\n\n\"I'm sorry.\"\n\nWith that, she quietly left the foyer, following my dad to the kitchen and leaving me standing next to my suitcase. I glared after her, more angry about the fact that she was being gracefully nice to me despite me lashing out. Kimberlee was supposed to be a dumb, shallow gold-digger. She was with my dad, after all. She was supposed to bite back, to snap at me when I called her Kim, to call me Eleanor instead of Nellie as a nasty retort. \n\nShe was not supposed to be kind to me. She was not supposed to apologize to me. That wasn't something I knew how to handle.\n\nI swallowed hard, picked up my suitcase, and went to my room to shower, change, and figure out exactly how I was going to pull this all off. \n\nDad and Kimberlee went out for dinner, meaning I had no excuse not to contact my potential date. I had told myself I wasn't going to text him. I had told myself I was done with him, that enough was enough, that we were taking too many risks and things were getting too complicated. \n\nI hadn't said those things to him, though, so as soon as the car pulled out of the driveway, I sent him a text.\n\nYou home?\n\nHe responded seconds later.\n\nWhole house to myself, if you can believe it.\n\nI didn't bother texting back, just slipped my shoes on and walked to the house beside my dad's. Before I could even knock, J.P. opened the front door.\n\nThat cocky, jovial, infuriatingly attractive smile crossed his face as he saw me. \"Hey, Nel\u2014\"\n\nI didn't even let him finish before grabbing his shoulders and pulling him in to kiss me.\n\n\"\u2014lie,\" he mumbled, the words mixed with laughter and muffled against my lips. Strong arms wrapped around my waist, pulling me in close, and he stumbled backwards into the foyer of his house.\n\nI wouldn't have put it past J.P. to lie about having the house to himself. He would have thought it was funny, probably, if I'd knocked on the door and someone else had answered, making me scramble to explain what I was doing there. Luckily for both of us, he'd been honest. As soon as the front door swung shut, I was unbuckling his belt and working on the button of his pants.\n\n\"Been on a dry streak or something?\" he murmured.\n\nI doubted it was a complaint. His hands were just as busy as mine, pushing beneath my shirt and up to my breasts, and his tongue flicked against my lips as he kissed me back eagerly.\n\nStill, I didn't respond, just unfastened the button and then unzipped his pants. I shoved his hands away and pushed him so his back was to the front door, eliciting a startled laugh from J.P. The laugh faded into something far throatier when I dropped to my knees, pulled his pants down the rest of the way, and wrapped my fingers around his quickly-hardening cock.\n\n\"Holy fuck, what\u2014ugh.\" He grunted as I took him in my mouth, his hands hesitating for a moment before resting on the back of my head. \"Jeez, Nellie, you... ugh...\"\n\nHis cock twitched in my mouth. I could feel his eyes on me, though I didn't glance up, just continued working his cock deeper and deeper, relishing the feel of it thickening against my tongue. J.P. groaned again, his fingers threading themselves through my hair, and his hips jerked forward as my nose pressed against his pelvis.\n\nI had no idea what was going through his head, and he likely had no idea what was going through mine. It didn't matter; J.P. seemed to be more than happy with the turn of events. \n\nHe rested against the door as I sucked him, fingers only tightening in my hair when I did something he particularly liked, thrusting forward just slightly every now and then when he couldn't help himself. I focused solely on him, refusing to think of the reason I was there, refusing to remember how angry I was with my dad, refusing to do anything but work towards having his cum shoot down my throat.\n\nWet noises echoed in the foyer as I bobbed my head, muffled gagging sounds punctuating them every so often as I took him down my throat. Before long he was gasping, then muttering under his breath, then leaning heavily against the door as I shoved his cock down my throat.\n\n\"Nellie,\" he mumbled. \"Oh my God. Oh, my fucking God.\"\n\nHis hands tightened in my hair and I knew. He groaned, a stilted and staggered sound, and I relaxed my throat as I prepared for the inevitable moment that he pushed himself as deep in my mouth as he could. Moments later, his cock pulsed, and my eyes were watering as he ground my head against him, holding me there as he emptied himself into me.\n\nWhen his grip on my hair loosened and I could pull myself off him, I gasped for breath and wiped my eyes.\n\n\"Fuck,\" he gasped. \"Sorry.\"\n\nI ran the back of my hand across my mouth before looking up at him and grinning.\n\n\"You'd think with how many times we've done this, you'd realize you can stop apologizing.\" \n\nHe laughed and helped me to my feet, kissing me again before pulling up his pants and boxers.\n\n\"Jeez,\" he murmured. \"Fuck. That was unexpected.\"\n\nI licked my lips, then bit the bottom one.\n\n\"So. I have a favour to ask.\"\n\nJ.P. laughed harder than I'd ever heard him laugh before. \n\n\"You sure you don't want to be a lawyer?\" he chuckled. \"Like, honestly. You'd be perfect.\"\n\n\"I'm sure. I might be a bit of a sleazebag, but not enough to be a lawyer.\"\n\n\"I'd tell you to suck my dick, but you just did, so...\" J.P. kissed me again, still grinning. \"Right. What's the favour?\"\n\n\"I need a date for the Diamond Gala tomorrow night.\" \n\nHe froze, the grin turning to more of a grimace.\n\n\"Uh...\"\n\n\"I know. It's totally and completely ridiculous for me to be asking and this... whatever this thing is we have going on isn't, you know, dating or dating-adjacent or any of that. I wouldn't be asking if I wasn't desperate.\" \n\nHe snorted. \"You sure know how to flatter a guy.\"\n\n\"You know what I mean. Please, J.P.? I really need help.\"\n\n\"Nellie, come on.\" There was almost pity in his eyes as he looked down at me. \"Look, you said... I mean, fuck, after the whole thing with Anne-Marie almost walking in, I thought\u2014\"\n\n\"I know.\" My face was turning red.\n\n\"I thought you were done with me,\" he said bluntly.\n\n\"I'm not.\" I bit my lip, embarrassed that he had realized how upset I'd been paired with the discomfort of admitting I wasn't, as he put it, done with him. \"Are you done with me?\"\n\n\"Of course not.\" He leaned against the door again, looking past me down the foyer. \"There's no one else? Like, really, honestly no one else?\" \n\n\"No one else my dad will\u2014\"\n\n\"You told your dad?\" He looked horrified.\n\n\"Not... no. Sort of. Not about...\" It was so uncommon for me to get flustered, it took me a moment to realize that's what was happening. \n\n\"Jeez, Nellie.\" He rubbed the back of his neck. \"Look, I... ugh. Fuck. It's not that I don't... I was surprised to even hear from you tonight. Look, you're the one who said this is a casual thing.\"\n\n\"I know what I said.\" My stomach curled, partly from nerves and partly from the disgust of having to beg for anything, let alone for J.P. to escort me to a charity gala with my father. \n\n\"You don't think my sister will lose her fucking mind when she sees us together?\"\n\n\"She'll be ecstatic. She'll start planning the wedding before dessert is served.\" \n\nHe laughed. \"Yeah, I know. So... I just, I don't know.\"\n\n\"If you don't, I have to go to every event for the rest of the summer with Clinton Thibault.\"\n\nJ.P. may have been cocky. He may have been arrogant. He may have been the kind of guy who everyone just knew was a lawyer. He could talk himself out of almost anything and charm himself out of the rest. He was incredibly privileged and knew it, though sometimes was still ignorant about what that meant.\n\nThe thing about J.P., the thing that had stolen my heart as a kid and kept it until he'd finally taken my virginity as an adult, was that he was truly a good person beneath all of it. Where Clinton Thibault's disgusting actions were paid off by his family, J.P. owned up to his. Not that he'd ever even consider trying something as despicable as Clinton would, but I remembered him getting expelled in high school for fighting. The first time, he'd gotten a warning after his dad intervened, while the other kid got expelled. The second time, J.P. had purposely picked a fight directly in front of the principal's office on the day the superintendent was visiting.\n\nAnne-Marie had come over crying when their father got home because he was yelling so loudly. J.P. had insisted it wasn't fair that the other kid got expelled when he didn't, and that was that.\n\nHe had a firm sense of justice. He had that smug lawyer-like personality, but in my eyes, he was redeemed by a moral compass that was a lot stronger than other people in the ritzy social circles our families kept. J.P. couldn't stand people like Clinton Thibault, and more specifically, he completely despised Clinton Thibault. He despised him enough that when I said his name, J.P. groaned and tilted his head back.\n\n\"It had to be that piece of shit,\" he grumbled. \"Damnit, Nellie.\"\n\nI folded my arms and looked up at him. He glared at me.\n\n\"I know what you're doing,\" he said, waving a finger at me pointedly. \"Don't think I don't know.\"\n\nI almost felt a little guilty. I almost threw all dignity aside and begged, almost gritted my teeth and apologized, despite the fact that I hated apologizing more than I hated begging. Thankfully, I hesitated for a brief moment, and J.P.'s glare turned to a mischievous smirk.\n\n\"What do I get out of this?\" he said.\n\nI raised an eyebrow. \"I just sucked your cock.\"\n\nHe shrugged. \"I can get that from you any time. That can be payment for me agreeing to the favour. The actual doing of the favour, though...\"\n\nI couldn't help laughing at his audacity. \"You're such a fucking lawyer.\"\n\n\"You're the one who wants the favour.\"\n\nI tried to stop smiling and tilted my head, shrugging. \"What do you want, then?\"\n\nHis eyebrow twitched, he seemed to unconsciously lick his lips, and his eyes grazed down and back up my body.\n\n\"I want to fuck you in the ass.\"\n\nI managed to keep myself from laughing. I tried to look appropriately affronted, slightly hesitant, but not hesitant enough that he'd feel bad. I pursed my lips, pretended to mull it over, then nodded.\n\n\"Okay.\"\n\nJ.P. raised his eyebrows. \"Okay?\"\n\nI shrugged again, hoping I looked somewhat helpless. \"I really need a date for this, so yeah. You can. Tomorrow, after the gala. My dad and Kimberlee are staying at the hotel so... so you can come over.\" \n\nHe couldn't quite hide the shock in his eyes, though it might have been an excited gleam. \n\n\"What colour tie should I wear?\"\n\nAfter telling him I'd text him once Kimberlee had bought my dress and leaving to walk back to my dad's house, I finally grinned. I had my date, I didn't have to spend the night or the summer with Clinton Thibault, and J.P. didn't need to know I had been wanting to try anal for ages anyway. \n\nKimberlee had a dress ready for me by noon the next day. She didn't go with red or rainbow or black, but instead a light blue that was entirely unlike anything I would have picked for myself. I texted a picture of it to J.P. and he said he had a tie that matched, so that was one thing taken care of. \n\nI was in my room later that day, still in a bathrobe after the hair stylist and makeup artist Kimberlee hired had finished my hair and face, when the doorbell rang. Moments later, my dad's butler Pierre stammered loudly from the foyer that I had a visitor and she was on her way up.\n\nRaising my eyebrows, I turned just as my bedroom door opened and Anne-Marie burst in.\n\n\"You asked my brother to be your date and you didn't even tell me?!\" she squealed. \"Nellie! Are you together? How did you make him agree to that? You must tell me everything.\"\n\n\"It's not like that,\" I said, even though it was definitely like that. I wasn't about to tell J.P.'s sister that I agreed to let him fuck me in the ass so he'd be my date. She didn't even know we had hooked up. Not the first time, not any of the subsequent times, none of them. \n\n\"I knew you always had a crush on him,\" she giggled. \"Look at you, look at your hair. You look ravishing.\"\n\n\"It's not like that!\" I repeated. \"He's helping me out because otherwise...\" \n\nI trailed off, glancing out to the hallway before closing my bedroom door.\n\n\"Otherwise my dad was going to make me go with Clinton Thibault.\" \n\nAnne-Marie nodded in understanding, though she frowned. \"That still doesn't explain why Jean-Paul is going with you. When did you ask him?\"\n\n\"I, um. Went to your house last night. To see if you knew anyone who would go with me.\"\n\nShe raised an eyebrow.\n\n\"Well, you know I don't know many people around here anymore,\" I said.\n\n\"I told you I was out last night. Why didn't you just text?\" \n\nOf course she wouldn't just drop it. I shrugged, trying to look miserable.\n\n\"I was really upset and I just forgot. J.P. was home and he, uh, saw that I was upset. So I told him about it.\"\n\n\"And he... offered?\" She looked even more confused.\n\n\"No, I asked. I mean, I was desperate, obviously.\" \n\n\"That doesn't sound like him at all,\" Anne-Marie stated bluntly. \"What is Jean-Paul getting out of this? Honestly, Nellie. Tell me.\"\n\n\"Nothing,\" I said quickly. \"Nothing at all, he just\u2014\"\n\n\"There is no way my brother is getting nothing out of this.\" She raised her eyebrows at me, grinning maniacally. \"Nellie Belanger, cherie, are you lying to me?\"\n\n\"I owe him a favour,\" I said. \"That's it.\" \n\nShe pressed her lips together.\n\n\"That's it, Anne-Marie. Nothing... nothing else.\" \n\nShe was still suspicious and pressed a little further, but left when I wouldn't say anything more about it with a promise that she would see me that night. Heart racing, I texted J.P. quickly to tell him what I'd told her.",
        "Told you she'd go insane he replied a few minutes later.\n\nWhy did you tell her we were going together?\n\nI could almost hear the smirking arrogance in his reply.\n\nYou wanted her to find out when she saw us together there for the first time? You don't think she would cause an absolute riot and start picking names for our hypothetical babies immediately?\n\nI glared at my phone for a few minutes before responding.\n\nShut up.\n\nSee you in a couple hours, babe.\n\nDO NOT CALL ME BABE.\n\nYou got it, babe.\n\nI seethed for a moment before laughing. J.P. was such a prick, but I wouldn't have changed a thing about him. I was still dreading going to the gala, and still dreading going out in public with J.P. and dealing with the questions and the rumours and the suggestive remarks, but at least he wasn't Clinton Thibault.\n\nAnd at least I was getting to try anal with him. It seemed appropriate, seeing as he was the person who had taken my virginity. Though, he hadn't known until I was sitting on his cock that I was a virgin, so I really had no concept of if he would be gentle or not.\n\nTen minutes before he said he was picking me up, I put the dress on, picked out a pair of shoes I thought I'd be okay to spend the night in, and went down to wait in the foyer. Kimberlee was on the board of whatever charity this event was for, so she and my dad had already left. My dad had been disappointed enough to call me \"Eleanor\" when I said J.P. and I would get ourselves to the gala, likely because he still didn't quite trust that I would actually show up. Thankfully, I managed to convince him, because I couldn't stomach spending the drive over with both my father and a man I was currently fucking.\n\nHe rang the bell a few minutes early. I opened the door and my mouth went dry as I took in the tall, perfectly dressed man standing in front of me.\n\nJ.P. had always been good looking. He was infuriatingly good looking, actually, the easy kind of handsome that just didn't seem fair. He had money, he was gorgeous, he was smart; it was an unreasonable amount of good fortune. I should have hated everything about him, everything he represented. I had spent the past three years trying to squirm out of the lifestyle my dad loved and surround myself with normal people, normal things, a life that didn't revolve around designer names and back room business deals.\n\nThat didn't stop me from being incredibly attracted to J.P, unfortunately, and seeing him standing in front of me with the sun behind him, his blond hair almost glowing, dressed impeccably in a well-fitted suit and tie that brought out the blue of his eyes only made that attraction worse.\n\n\"I know I look good, but you're going to have to tear your eyes away sometime so we can get going,\" J.P. said.\n\n\"Don't flatter yourself, I was trying to figure out how to politely ask if that was what you were really wearing,\" I shot back.\n\nHe burst out laughing.\n\n\"Your dad already gone?\" \n\nI nodded and he stepped through the door, brought a hand up to my cheek, and kissed me heatedly.\n\n\"Don't have time for this right now,\" I murmured against his mouth, though I couldn't stop myself from kissing him back.\n\nJ.P. snorted softly and pressed his body against mine.\n\n\"You look good,\" he said, his voice smooth and drippingly seductive. \"Really good. I can't wait to fuck you in the ass tonight.\" \n\nI slapped his arm as he started laughing again. \n\n\"C'mon,\" I grumbled. \"Let's get this over with.\" \n\n\"The gala, right? Because I plan on taking my time with\u2014\"\n\n\"Yes, the gala, you fuckwit,\" I laughed. \n\n\"Fuckwit!\" He feigned offense before holding his arm out to mine. \"Careful now. Let me remind you which of us is getting fucked in the\u2014\"\n\n\"Oh my God, you're obnoxious. You need to stop,\" I giggled. \"Anne-Marie is already suspicious. If you keep acting like this...\"\n\n\"I'll be a perfect gentleman,\" he promised.\n\nHe wasn't a perfect gentleman, and to be honest, it was better that way.\n\nI had been dreading the gala. I hated events like that: galas, charity dinners, luncheons, celebratory receptions, all of them. I hated schmoozing with people, I hated acting the socialite, I hated the fakeness and the pretentious snobbery and the politics. This life was the reason my mom had left my dad. She had never wanted me to be involved in it, and now that I was, I understood why. \n\nShe still didn't know, and I still had no plans to tell her. One more year, I kept telling myself. I could get him to pay for one more year of school and then I would be done with my dad.\n\nThe Diamond Gala was one of the biggest events of the summer and the one I'd been dreading the most. Stuffy, pompous elitists flocked to the ostentatious display to puff their chests and display their plumage and just be gigantic, stuck-up assholes. I was sure it was going to be unbearable, but having J.P. there made it kind of fun.\n\nHe was comfortable in settings like that, having grown up in the same social circles I had, but his comfort with the situation meant he also knew how to poke fun at it. One moment he was shaking hands and discussing business; the next, he was pinching my ass with a completely straight face as I tried to catch up with my high school volleyball coach.\n\n\"It's great to see you again, Nellie,\" Coach said. \"And you, Jean-Paul. Thank your mother for inviting me.\"\n\n\"Absolutely,\" J.P. said. \"She appreciates the work your group does, as we all do.\"\n\nHe shrugged. \"It's my pleasure, and it's always nice to catch up with former students.\"\n\n\"Nellie thinks so, too,\" J.P. said. His fingers dug into my ass again and I covered my gasp with a cough. \"You know, Coach, I remember hearing Nellie talk with my sister about having the biggest crush on you when she was on the\u2014\"\n\nHe was cut off when I slapped his arm hard. I mean, it was certainly true, and in general something like that wouldn't embarrass me, but Coach had known me when I was a lot less of a ho. J.P. dissolved into laughter, patting my ass lightly.\n\n\"I'm teasing, of course,\" he said good-naturedly. Coach nodded, seemingly unconvinced, before politely excusing himself.\n\n\"You're an asshole,\" I muttered to J.P. as we watched him walk away.\n\nJ.P. blinked at me innocently before smiling wickedly.\n\n\"Don't you dare,\" I said. \"Don't make an anal joke.\"\n\n\"I'll let it slide this time, but\u2014\" his hand trailed back to my ass and squeezed, thankfully hidden by the cocktail table behind us \"\u2014and it's a big butt...\"\n\nI snorted back a laugh and J.P. smiled winningly.\n\n\"Cherie! You seem to be having so much fun.\" \n\nAnne-Marie floated up to us, her arm looped through that of her on-again, off-again boyfriend Remy. She gave me that maniacal smile again and I rolled my eyes.\n\n\"Hi, Anne-Marie,\" J.P. said. \"Have you run into Mom and Dad yet?\"\n\n\"I saw them briefly speaking with the Thibaults.\" She gave me a pointed look. \"It seems Clinton did not manage to find a date, so he's pouting with his parents at one of the back tables.\"\n\n\"Good,\" I said without thinking.\n\n\"Serves him right,\" J.P. said at the same time.\n\n\"Already speaking in unison!\" Anne-Marie squealed. \"You are so sweet together.\"\n\nI shifted uncomfortably but J.P. just laughed.\n\n\"Sister, I wouldn't do such a thing to you,\" he said righteously. \"Your friends are firmly off-limits.\"\n\n\"You're so full of shit,\" I whispered after Anne-Marie and Remy excused themselves a few minutes later. \"How many of her friends have you fucked?\" \n\n\"Like six, but you're my favourite,\" he murmured back. \n\nI covered my mouth, trying not to turn red as I held a laugh in. \"I bet you say that to all her friends.\"\n\nJ.P. shook his head, surprisingly. \"You're the only one I've fucked more than once, too.\"\n\n\"I'm honoured.\"\n\n\"You should be.\" His hand gently squeezed my ass again, lingering longer than was strictly necessary. \"How long do we have to stay?\"\n\n\"At least until after my dad's speech.\" \n\n\"Hmm.\" He sounded vaguely disappointed. \n\n\"Jean-Paul,\" said a voice from behind us.\n\nAlmost instinctively, J.P.'s hand moved from my ass to the small of my back as we both turned.\n\n\"Mr. Belanger,\" J.P. said pleasantly. \"Good to see you.\"\n\nHe shook hands with my dad and Kimberlee, smiling that charming, easy grin the entire time. I tried to copy it, but even I could tell it looked like more of a grimace.\n\n\"I'm a bit surprised you agreed to attend with Nellie,\" Dad said to him. \"Pleasantly surprised, of course. I didn't expect the two of you were\u2014\"\n\n\"Here as just friends,\" I interrupted. \n\nMy dad shot me a cold look. \"Of course. I meant that you were that close of friends. Although, Nellie, you could certainly do far worse than Mr. Marchand here.\"\n\nHis approval almost made me want to tell J.P. that the deal was off, though none of it was his fault. I bit back the urge to immediately contradict anything my dad approved of and smiled.\n\n\"Like Clinton Thibault?\" I said innocently.\n\nKimberlee winced as my dad's arm tightened on hers. \n\n\"Well, I appreciate you saying that, Mr. Belanger,\" J.P. said smoothly. \"You're right, it's surprising how close Nellie and I have gotten, but I can assure you we're just friends. No need to worry about me sneaking in the back door.\"\n\nThe bastard. I pursed my lips, trying with everything in me not to laugh at his innuendos.\n\nMy dad didn't seem to notice as he chuckled politely. \n\n\"Well, in any case, thank you for being here tonight,\" Dad said. \"I know Kimberlee appreciates the support, as do I. Your father's firm has always been so supportive of the Diamond Gala. You are working with him now, correct?\"\n\nJ.P. nodded. \"Yes, for now.\"\n\n\"For now?\" Dad repeated. \"You have other plans?\"\n\nIt was clearly a slip-up. J.P. hadn't meant to say the last part, but grinned and chuckled smoothly.\n\n\"Well, we never know what the future holds,\" he said.\n\n\"Hopefully it will hold a decision to stick with your father,\" Dad told him. \"Jean-Luc's firm is renowned.\"\n\nJ.P. nodded. After exchanging a few more pleasantries, they shook hands again. Dad and Kimberlee sauntered through the crowd to find their next social victim. We watched them disappear between designer gowns and impeccable suits. I couldn't ignore the tension; J.P. still had that casual, carefree grin on his face, but a muscle in his neck was taut and for once, he was quiet. \n\n\"What did you mean, for now?\" I asked quietly.\n\nHe didn't answer right away. When he finally did, the voice that came from his mouth wasn't like anything I'd heard. It wasn't flirty or teasing or falsely polite. It was almost... serious.\n\n\"I don't know a lot of people who went to law school so they could sit around and read corporate contracts all day,\" he said. \"I wanted to make a difference.\"\n\n\"So make a difference,\" I said.\n\nHe laughed, a dry chuckle instead of his usual warm laugh. \"Thanks, babe. Couldn't have got to that conclusion myself.\"\n\nI glared at him. \"You don't have to be such a dick.\"\n\nIf I didn't know any better, I would have said a look of apologetic embarrassment flashed across J.P.'s face. I did know better, though, and decided I was seeing things.\n\n\"Right,\" he said. \"I don't. And I didn't have to agree to come here and be your date and put up with all these questions, but for some damn reason, I did anyway.\"\n\nI tried not to let his words hurt, but they did sting. J.P. seemed to sense that and again, that look spread across his face. He opened his mouth to say something, but I spoke before he could.\n\n\"Sorry to inconvenience you, Mr. Marchand,\" I muttered sarcastically.\n\nJ.P. opened his mouth to say something. No words came out, and instead, he studied me intently for a moment.\n\n\"You have no idea, do you?\" he finally said.\n\nClearly, I had no idea. I had no idea what he was talking about, what he was referring to, or what he was trying to say. What I did know was that his words dripped from his mouth, that they were loaded with something incredibly enticing, and that the tension between us was threatening to bubble over. Before I could cut through that tension and ask what he meant, J.P. shook off the strange mood and grinned that melting, mischievous grin.\n\n\"Fancy a walk, Miss Belanger?\"\n\nHe extended a crooked elbow to me. I raised my eyebrows and he responded by letting his eyes trail up and down my body. His gaze was strong enough that I felt it running across my skin like fingers, and an involuntary shiver crept up my spine.\n\nI knew exactly what kind of walk he fancied.\n\n\"Ugh, don't talk like that,\" I scoffed, fooling neither of us as I took his arm.\n\nWe left the ballroom, J.P. leading us casually through the foyer before turning down a deserted hallway. My entire body tingled in anticipation, my panties already dampening as I glanced around, making sure no one had seen us.\n\nThere was a doorway near the end of the hall tucked into a small alcove, and that was where J.P. led us. The moment we were mostly hidden from view, he kissed me, pushed me against the door, and hiked the skirt of my dress up.\n\n\"It's really unfair,\" he murmured against my mouth. \"You sitting there teasing me all night, making all these lewd comments, making me grab your ass until all I can think about is how I'm going to bury my cock in it in a few hours...\"\n\n\"Oh, of course,\" I laughed. \"I'm the one making lewd comments and forcing you to think about how you're going to slide your cock inside my tight little virgin ass and feel the way my\u2014\"\n\n\"See, exactly like I said.\" He nudged my thighs apart with his knee and grabbed my breasts, squeezing lightly as he pinned me against the wall. \"How am I supposed to behave like a gentleman when you've got me hard as a fucking rock, Nellie?\"\n\nThe hardness he was referring to was pressing against my panties through the fabric of his suit pants. I nipped at J.P.'s lip and he groaned, rubbing his cock against me again.\n\n\"Maybe you should let me take care of that,\" I murmured.\n\nMy hands moved to unbutton his pants. His hands joined mine and moments later, I was pulling his cock from his pants, he was shoving my panties to the side, and he had lifted one of my legs up to get better access to my pussy. Seconds after that, he was pushing himself inside me, I was biting my lip in an attempt to hold back a moan, and then he was fucking me against the door in that little alcove.\n\nThere was a sense of urgency, a need to rush to the finish line because every second we were away from the gala was a second that risked us being discovered. I held onto him tightly, his arm supporting my leg as he drove himself into me, both of us struggling to keep our breaths steady and our noises quiet.\n\nI couldn't pinpoint what was so hot about it. It might have been the frustration of dealing with my dad and the night in general, or the strange look on J.P.'s face, or even just the knowledge that he couldn't wait a few more hours and had to fuck me right that second. It might have been that at any moment, someone could come around the corner and see us. Normally, that wouldn't bother me\u2014it wouldn't even be the first time that year that I'd had sex in front of other people\u2014but considering one of those people might be my father or J.P.'s sister or any number of others who could tell them what they saw, it was risky. Even for me.\n\nWhatever made it so hot didn't matter. Even though it was fast and hard and completely carnal, I was going to come, and I murmured this in J.P.'s ear as he buried himself inside me.\n\nHe could have made a snide remark about how we were sure to be discovered, since I probably couldn't keep quiet to save my life. Instead, he brought his hand up to my mouth and covered it, kissing the side of my neck as he drove himself in me again and again. \n\nI squirmed against him, feeling the delicious buildup of pressure, the climbing ascent of bliss, and then I was coming. My nails dug against the fabric of his suit, a high-pitched whine left my throat as the combined effort of me keeping my mouth shut and J.P.'s hand muffled any further noise, and I shuddered as pleasure rolled through me.\n\nJ.P. finished seconds later, grunting softly as he stilled inside me. I could feel him come, and as usual, I had a fleeting moment of shame knowing that I didn't make him wear a condom, that we were relying solely on my birth control, that it was completely moronic considering we weren't exclusive to each other, that we were both actively fucking other people. A moment after that, I could feel his cum dripping from me as he pulled out, and I shivered again. I couldn't deny how much I loved that feeling. \n\nI hated that I loved the feeling. J.P. was a complete bastard, but for better or for worse, I trusted him.\n\nThe bastard grinned as he zipped his pants back up and tucked his shirt in. \n\n\"You okay?\" \n\n\"Yep,\" I said. \"That was much needed, thank you.\"\n\nHe laughed, smoothing a wrinkle from the skirt of my dress.\n\n\"I'm still fucking you in the ass later,\" he said.\n\n\"You better be.\" \n\nHe raised his eyebrows. \"What?\"\n\nI pressed my lips together and tried not to laugh, but it was futile. \"Come on. Someone's going to notice we're gone, and you know chances are good that it'll be Anne-Marie.\"\n\nSomeone may have seen us leave the main ballroom, or maybe just noticed that my cheeks were flushed and my lips were swollen. By the time we could leave the gala without causing suspicion, there was definitely a rumour going around that J.P. and I were together. Anne-Marie seemed to stoke it, nurture it, until I was certain she was trying to make it truth through sheer force of will. At least two people told me that J.P. and I were perfect for each other, as if that wasn't a complete insult. It took everything in me not to slap them.\n\nWe said goodbye to my dad and Kimberlee but purposely avoided Anne-Marie and Remy, as well as J.P.'s parents. We didn't bother with a valet; waiting in the foyer would just leave more opportunities for people to see us together. On the way back to his car, J.P. grabbed my ass no less than four times, only stopping when we almost got caught by Angelique Thibault. He didn't touch me again until we got to his car.\n\n\"Let me get that,\" he said chivalrously, passing by so he could open the door for me.\n\nMy heart fluttered momentarily, a light feeling that almost made me feel sick because it was too romantic, too couple-like, too not-a-casual-thing for him to do. The fluttering went away when he paused before getting the door handle, pushed my body against his car, and captured my lips as he pressed himself against me. \n\nWhen he pulled back, I was breathless, and J.P. was grinning.\n\n\"Excuse me,\" he said. \"I can't get the door for you when you lean against it like that.\" \n\n\"Fuck you.\" I blushed and smoothed my dress down before stepping away from the car.\n\nJ.P.'s lips brushed against my cheek as he opened the passenger door for me. \"Soon. In the ass. Remember?\"\n\n\"No, I'd most definitely forgotten.\" I climbed in the car, only continuing after J.P. walked around the vehicle and slid into the driver's seat. \"Are you sure that's what you want? I mean, you haven't brought it up at all since we talked. I can't think of a single time you mentioned anything even remotely related to fucking me in the ass.\"\n\n\"Babe, I want nothing more.\" \n\n\"Don't call me babe,\" I grumbled, but J.P. only grinned.\n\nThe drive back to my dad's was full of tension. Not the uncomfortable, crawling, awkward tension that had been present during the gala, but a raw, excited, alluring tension that preceded what we were going to do. J.P. was mostly quiet as he drove, though I caught him smirking more than once and I knew what he was thinking when I glanced at his lap. \n\nThe bulge in his pants was one clue; the other was that I was thinking the exact same thing. There was a light, aching feeling in the pit of my stomach that wanted to tell J.P. to drive a little faster.",
        "He parked in the driveway at his house, but we didn't stop there. Instead, we stole away to my dad's house. Despite the fact that my dad and Kimberlee weren't home, and wouldn't be home for the rest of the night, my heart still pounded as I opened the front door, and I still felt the need to sneak up the stairs quietly. J.P. laughed but humoured me, silently following me to my room.\n\nThe moment I closed the door, he kissed me. I made a soft noise as his hands ran down my sides, finally resting on my hips and pulling my lower body against his. He was hard again, incredibly hard, and I shifted my hips against his, feeling his cock press against me.\n\n\"Jeez, Nellie,\" he groaned. \"How do you do this to me?\"\n\nI didn't have an answer, just nipped at his lower lip before pulling away.\n\n\"Let me take a shower first,\" I said. \n\nHe chuckled. \"Trying to procrastinate your way out of this?\" \n\nI dodged his lips as he tried to kiss me again. \"No, stupid, I just want to make sure everything's clean before you stick your dick in my ass.\"\n\nIt might have been the fact that his blood was concentrated a bit lower than usual, but for once J.P. didn't have a witty response ready immediately. For the quick moment that I saw his face, he looked surprised, but I turned away and ducked into the bathroom before he could recover. I was relieved he hadn't thought to suggest joining me since it saved me from having to listen to him laugh as I put a shower cap on. \n\nAs soon as I had it, I rolled my eyes at the pathetic thought. Stupid J.P. With anyone else in the world, I wouldn't have cared.\n\nI showered quickly, scrubbing every inch of my skin clean as fast as I could before drying off and wrapping a towel around my body. Getting dressed again seemed pointless, and I hadn't even bothered bringing clothes into the bathroom with me. Barely ten minutes passed before I opened the bathroom door and stepped back into the bedroom.\n\nJ.P. was sitting on the edge of my bed. He was still fully dressed, surprisingly enough, and looked up at me when I entered the room.\n\n\"I thought you'd be naked by now,\" I said.\n\n\"We should talk first.\"\n\nOh God. My stomach turned over, twisting into a knot of tense dread. \n\n\"Talk?\" \n\nHe drew in a breath, exhaling loudly. \"Look, I wasn't... I wasn't joking, exactly, about wanting to fuck you in the ass, but I don't... I didn't expect you to take it so seriously. I don't want you to feel like you have to give it to me as some kind of fucking payment. I wouldn't... I don't want to be that guy.\" \n\nThe relief must have shown on my face, though J.P. mistook its reasoning.\n\n\"See, I fucking knew... Jeez, Nellie. Fuck. I'm sorry. We don't have to\u2014\"\n\n\"Oh, we're going to.\" I unwrapped the towel and let it fall to the floor before walking towards him.\n\nHe froze, mouth still open as he stared at me.\n\n\"Nellie, you just looked\u2014\"\n\n\"I thought you wanted to like, talk-talk. Like 'we need to talk' kind of talk.\" J.P. grimaced, but I continued before he could say anything. \"I don't want to talk. I do want you to fuck me in the ass. I mean, did you really think I wouldn't want to try that?\"\n\nHe chuckled and shook his head. \"I should've known.\" \n\n\"Yeah, you should've.\" Another step closer brought me directly in front of J.P. and his hands moved like magnets to my hips, drawing me nearer. \"Have you ever done this before?\"\n\nHe shook his head. \"Not, uh, all the way. Have you?\"\n\n\"Nothing except, you know. Fingers. Do you know what you're doing?\"\n\nJ.P.'s arrogance shone through just slightly, a smirk crossing his lips. \"Don't worry, babe, I can take care of this.\"\n\nI let the pet-name slide. \"Get on with it, then.\"\n\nHe pulled me down to kiss him, lips eager against mine. I made a soft noise as his hands moved up and down my body, caressing my waist and cupping my ass, then a slightly louder one when his lips left mine to find my breasts. He flicked his tongue against my nipple before sucking on it, sending waves of titillating desire through my body.\n\nAs he kissed and sucked and licked my breasts, his fingers dug into my ass, squeezing and releasing, then inching closer and closer to my crack. When one of his fingertips finally slid into the valley, he paused, looking up at me with his mouth still pressed against my nipple.\n\n\"You're sure?\"\n\n\"Yes.\"\n\nHe nodded, returned my breast to his mouth, and trailed his finger down my ass crack. I shivered as it lingered by my asshole, but he didn't push it inside. Instead, he brought his finger lower and lower, collecting the dripping wetness from my pussy.\n\n\"You're damn sure, apparently.\" His words were muffled but I could feel him grinning as he realized how turned on I was.\n\nI would have responded with something clever, but he dipped his fingertip just barely inside my pussy, then returned it to the pulsing little ring of muscle, and I could barely think. \n\nGently, almost unbelievably gently, J.P. worked the tip of his finger into my ass. I sighed as he penetrated me, relishing the feeling of his finger pushing inside me, a bit disappointed when he started pulling it back out after barely inserting the tip.\n\nThen he did it again, pushing further that time. I moaned softly and J.P. swore. He did it again, and again, until his finger was almost fully inside me and my knees were buckling as I stood in front of him.\n\nHe withdrew his finger completely and collected more wetness from my pussy. He played with my asshole a bit before I felt a second finger pushing through the tight muscle. Moments later, both fingers were pushing inside me. He barely got the tips in before my ass instinctively tightened around them.\n\n\"Relax,\" he said immediately.\n\nI nodded and tried to focus on loosening my muscles, but my body didn't want to cooperate. I tried, focusing so much on trying to relax that I couldn't relax. Miserably, I whimpered and J.P.'s other hand moved to my lower back, rubbing softly before withdrawing his fingers from my ass.\n\n\"Thought you wanted this,\" he teased softly.\n\nMy face went a bit red. \"I do. I'm just, uh... I mean, there's not a lot of things left that I haven't tried, and this is one of them.\"\n\n\"This coming from the girl who impaled herself on my cock before mentioning she was a virgin?\" \n\n\"Yeah, well, I've learned a few things since then.\"\n\nHe laughed and pressed a kiss between my breasts before looking up at me. \"I've wanted to try anal basically since discovering it was a thing. The one girl who was willing to try it let me get the head of my cock in her ass and then said she couldn't take it. I've learned a little more since then. If you're willing to trust me, I think I can make you relax.\"\n\nIf I was willing to trust him. As if I didn't trust him completely already.\n\n\"Okay.\" \n\nHe pulled me onto the bed with him, kissing me before directing me onto my stomach. I stopped only to reach over to the nightstand and grab the lube I'd bought to prepare for that night. Before standing to remove his clothes, J.P. grabbed a pillow and tucked it beneath my stomach, propping my ass up in the air, then slid off the bed.\n\nI craned my neck to watch him undress. When he caught me looking, he grinned, slowing down the unbuttoning of his shirt. \n\n\"You can tip after the show,\" he teased, shrugging the shirt off his shoulders.\n\n\"Don't flatter yourself. I need something to watch while you get yourself organized and it's either you or the headboard.\"\n\nJ.P. laughed, unbuckling his belt and pulling his pants off. \"I'm better than the headboard? Careful, Nellie. I'm starting to think you might actually like me.\"\n\n\"You have your moments.\"\n\nOnce he was fully naked, he crawled onto the bed, bringing himself alongside me. His lips found mine, warm and enticing and tantalizing. I tried to ignore the way his kiss left me breathless, the way it seemed to weave through my bones and curl around my entire body.\n\nIt grew more difficult when his lips left mine and moved to my neck, and then to my shoulder. \n\n\"You trust me?\" he murmured again.\n\n\"Only God knows why, but yes,\" I replied.\n\nHe chuckled, the sound vibrating against my skin, and then shifted so he was behind me. I turned my head, but I couldn't really see him. I could feel him, though; his hands traced down my back, tickling along my spine until his fingers were tracing down my ass crack again. Then he traced the path his fingers had made with his lips, kissing the back of my neck and lazily running his tongue along my spine.\n\nI expected him to stop kissing me once he reached my ass, but he didn't. The first few kisses were just against the swell of my ass. He nipped the skin softly before kissing it again, his lips moving closer and closer to my crack. When his tongue finally dipped between my cheeks, my eyes widened and I gasped. His hands slid beneath my hips and pulled me up from the pillow, I gasped again, and then he was licking my ass.\n\n\"Oh,\" I breathed, and I felt J.P. grin before the tip of his tongue started flicking against my backdoor.\n\nIt was like nothing I had ever experienced, and that was really saying something. A moment of tension clutched at me but dissipated as soon as he slipped a finger into my pussy while he licked my asshole.\n\nI moaned and relaxed into him. J.P. made a noise of approval that I barely heard. Between the pillow and his hand, I barely had to support myself, yet I still felt like I was going to collapse against the bed from the sheer sensation of it. I knew I liked having fingers in my ass, and I assumed that meant I'd like having a dick in my ass, but his tongue? It was something I hadn't considered, and I was overwhelmed by the sheer intensity of it.\n\nEvery sensation in my body seemed to stem from where his tongue swirled against me. He licked enthusiastically, eager at the same time he seemed to relish it. Maybe it was that, more than anything, that made my body shake, made my stomach tighten and my legs tremble. The knowledge that he was loving it, that he was licking my ass and enjoying every second of it... it was more than I could handle.\n\n\"J.P.,\" I gasped, struggling to prop myself up on my elbows. \"I'm gonna... J.P., I'm...\"\n\nI couldn't finish the sentence, but he knew. A second finger joined the one he had in my pussy, he buried his face harder against my ass, and his tongue stopped teasing along the outside of my anus and slipped past it, dipping inside me.\n\nMy eyes squeezed shut as my body began to shake and I grabbed at the sheets, balling up my fists. He kept licking, kept fingering me, kept making me lose my mind as I came. My entire body felt like it was on fire and I wasn't sure whether my vision was dark because my eyes were closed or because I went temporarily blind from the pleasure that surged through me. \n\nI was so consumed by the orgasm that I barely noticed when J.P. took his fingers out of my pussy and planted a final kiss against my ass. I was still trying to catch my breath when I heard him flip the cap of the lube open. I barely noticed as a finger coated with cool gel pushed easily into my ass and only tensed slightly when a second one joined it.\n\nBy the time I had regained some sense of what was happening, J.P. was fingering my ass slowly but deeply. I sighed, pushing back against his hand.\n\n\"You okay?\" His voice was hardly recognizable, aside from the dripping, craving tone that underlined each word.\n\n\"I'm okay,\" I whispered.\n\n\"Think you're ready?\"\n\nI didn't hesitate, didn't even think.\n\n\"Yes.\"\n\nJ.P. groaned and pulled his fingers out of my ass. It was slightly disappointing, the loss of the sensation, but I forgot that feeling after I craned my neck to look back at him.\n\nHe wasn't watching me, preoccupied at that moment with pouring some of the lube into his hand and rubbing it on his cock. He was as hard as I'd ever seen anyone, his cock dripping with precum. I licked my lips unconsciously as he stroked his cock, watching him spread the lube evenly along his length, and it was only when he paused that I glanced up and met his eye.\n\n\"You're so hot,\" he said simply.\n\nI laughed. \"I already agreed, J.P. You don't have to flatter me.\" \n\nHis face was uncharacteristically serious, his hands moving to my ass again and caressing it gently. \n\n\"I'm serious,\" he said. \"Nellie, you... I've never been this hard before in my life.\"\n\n\"Guess you better do something about it,\" I replied, and shook my ass just slightly for emphasis.\n\nJ.P. groaned and touched my ass again. \"You sure? Really, really sure?\"\n\n\"Yes.\"\n\n\"I'm gonna try to, you know... but it's probably still gonna hurt a bit.\"\n\n\"I know.\"\n\nJ.P. swallowed, his throat muscles flexing as he stared at my ass before grabbing the lube and adding a bit more for good measure.\n\n\"Tell me if it's too much,\" he asked.\n\n\"I will.\"\n\nHe apparently decided that I was as certain as I would ever be, and moments later my hips were being lifted off the bed. I held myself up as he spread my ass cheeks, took a breath as soon as I felt his thick head pushing against my entrance, and willed my body to relax as he guided himself forward.\n\nThere was resistance. I couldn't control it, really, no matter how hard I tried to relax, but J.P pushed his cock steadily forward. Slowly, I felt myself stretching around him. I took a deep breath, relaxing into the intense sensation of pressure. All I could think about was the feeling, the way he was slowly pushing forward, the way the ring of muscle was inclined to protest its penetration and the way I was willing myself not to let it. Further he pushed, and further I stretched, and just when it was almost too much, the tip of his cock was completely in.\n\nJ.P. wasn't quite panting behind me, but his breathing was heavy. My ass clenched around him, pulsating just slightly as it gripped the head of his cock. He paused, holding still, letting me adjust to the feel of his cock violating my asshole, taking the last bit of virginity left in me just like he'd taken the first bit.\n\nWell, not just like that. He'd taken the first bit of virginity unknowingly, not aware until I had shoved his cock fully inside me that it was the first cock I'd ever had in my pussy. This time, he knew, and this time he was careful and gentle and tender. I knew he could feel how tight I was; I could feel how tight I was, I could feel every bit of the head of his cock completely enveloped inside of me. He was patient, probably struggling to hold himself back, telling himself he had to take it slow, he had to let me adjust.\n\nAt least, he was until I started pushing back on his cock.\n\n\"Nellie,\" he groaned, the sound strangled. \"Oh, fuck.\"\n\nHe was still frozen behind me, but his fingers squeezed my hips as I shifted further back. I was hyper-aware of his length, and after pushing another inch inside me, I had to stop and take a gasping breath.\n\n\"Holy fuck,\" he gasped. \"Are you...\"\n\n\"Yes, just...\" I sighed, content, then pushed back again.\n\n\"Fuck!\" His fingers dug into my hips again.\n\n\"In a bit,\" I said, my voice almost dreamy.\n\nHe couldn't hold himself still any longer, though he managed to take it slow. It was almost a lean forward, a gentle pressure increasing as he pushed inside me, despite his hands simultaneously pulling me back onto him. It took some time but inch by inch, he filled me, and I felt all of it. \n\nIt was hard to explain. I'd never felt like that with a cock in my pussy. I obviously loved the feeling of getting fucked, but I couldn't say that I felt every single ridge, every bump, that once it was inside me I could still feel just how big it was. The closest I could imagine was Brandon, whose cock was thicker than average and so stretched me more than usual. Even that wasn't really comparable to the feeling of being stuffed, the tightness, the way my body resisted him at first before almost pulling him in.\n\nIt was intense. It was the only way to describe it. I was so full, so intensely full, and when J.P.'s hips finally pressed against my ass cheeks and he was completely buried inside me, I whimpered.\n\n\"Holy fuck,\" he gasped. \"Nellie, I'm... holy fuck.\"\n\n\"Yes,\" I squeaked.\n\nWhen he pulled out, I nearly came. It was hardly even an exaggeration; the feeling of his cock sliding back out of me was relieving in a way that was consuming, yet when just his tip remained inside me, I found myself pushing back again.\n\n\"Again,\" I pleaded, and J.P. made a noise that was barely recognizable as human.\n\nHe didn't completely plunge inside me; he was still careful, still gentle, but it was faster that time. When he pulled out that time, he took a moment to add more lube, then pushed back in. I whimpered again, pressing my face against the mattress as I gripped the sheets.\n\n\"Can I go faster?\" he asked when he pulled out the fourth time.\n\n\"I thought you'd never ask,\" I gasped. \"More lube, first.\"\n\nAnother one of those strange, beautiful, deep sounds erupted from his throat. I couldn't see him, but I could almost hear his hands shaking as he squeezed another dollop of lube onto his cock. The thick tip nudged my anus again and he thrust his cock inside me smoothly, just a bit faster than before, and pulled back out. I couldn't stop the high-pitched squeal that left my throat when he plunged inside me again, my eyes squeezing shut.\n\n\"Nellie?\" he asked, half-groaning and half-concerned.\n\n\"Harder,\" I gasped.\n\nThe next noise he made was a full groan, and that was the last clear thing I remember.\n\nHe fucked me hard. I knew that much, knew he was pounding my ass as hard as he'd ever pounded my pussy. He enjoyed every second of it, I knew that too. I knew each time he pushed his cock in me, I felt it, like my nerves were exploding from the sensation. I knew I felt full, achingly full, almost uncomfortably full, until he pulled back out and I craved it again, and again, and again.\n\nMy hand shook as I slipped it between my legs, fingering my clit as he took my ass. I cried out as I rubbed the swollen nub, my pussy soaking wet. After that, things melded together, a mixture of sensations and sounds and pleasure and gasping, breathless, amazing pressure.\n\nThere was a hazy moment where I realized I was going to come, and a slightly clearer moment where I knew it was going to be like nothing I'd ever felt before. I pushed my fingers against my clit harder. Everything seemed to feel like it was happening with ten times more intensity than usual, and my legs started to shake hard enough that I thought they might break.\n\n\"I'm gonna come again,\" I whispered.\n\n\"Yes,\" he grunted. \"Come on, Nellie, come for me.\"\n\nI cried out, rubbed my clit harder, and felt my stomach tighten. \n\n\"Gonna come,\" I gasped, almost in disbelief. \"Don't stop, J.P., I'm gonna... oh my God, J.P., I... \"\n\nMy orgasm boiled over and I screamed his name. At least, I think I did. It might have sounded like nonsense, it might not have even been words, but I remember as clear as day crying his name as the intensity overtook me. It may have been me filling in memories that weren't there, since I couldn't imagine that J.P. would hear me literally screaming his name and let me live a single moment without teasing me about it. The loss of control was so sudden, so all-encompassing and so heated, that I couldn't help myself.\n\nThere were tears in my eyes, not from pain but from the fact that I couldn't even breathe. When I looked back on that moment, I never pictured what I actually saw\u2014darkness and white light flashing in my eyes as I came, followed by a view of the blankets since my face was buried against the mattress\u2014but what we must have looked like, what J.P. would have looked like with his cock buried inside me as I shattered beneath him.\n\nHe came at some point. I barely registered it happening, aside from thinking that the sound of him coming was one of my favourite sounds in the world, and the sudden feeling of him spilling inside me. I felt each spurt of cum inside me, felt it in a way that was almost better than feeling him come inside my pussy, and then J.P. was resting heavily against my back.",
        "He stayed there for a moment before pulling out and collapsing beside me. When I looked over, his face was shining with sweat and his hair was matted against his forehead, but his eyes were closed and a smile of pure elation played gently on his lips.\n\nWhen J.P. and I hooked up, it was usually fun. We didn't tend to take things too seriously, we laughed and teased each other, we fucked hard and fast and passionately. That night couldn't really be described as just fun. It was fun in the way that it was enjoyable and amazing and I came hard enough that I might have had a legitimate out-of-body experience. \n\nIt was fun in the way that I could see it happening again, in the way that I almost yearned to curl up against his body and rest with his arms around me. I couldn't, though. It was one thing for me to do that when I hooked up with Ben, but J.P. and I weren't like that.\n\n\"Um,\" I said softly, and he opened his eyes. \"Would you mind passing me the towel I left on the floor?\"\n\n\"Fuck. Sorry, yeah, let me...\" \n\nHe rolled over, grabbing the towel so I could awkwardly shuffle to the bathroom and clean up. When I returned, J.P. was still lying on my bed, but he had pulled a sheet over himself. Again, his eyes were closed, and one arm was tucked behind his neck.\n\n\"You've made yourself comfortable,\" I remarked.\n\nJ.P. laughed and opened his eyes, fixing them on me.\n\n\"Come here,\" he murmured.\n\nI stiffened, which he noticed.\n\n\"Come on, Nellie,\" he sighed. \"Just come sit with me for a bit.\"\n\n\"That's not a good idea.\"\n\n\"Please?\"\n\nIt was the tone of his voice more than anything that made me even more certain I shouldn't go to him, and at the same time, made me disregard that certainty and crawl beside him on the bed. The arm tucked behind his head curled around my shoulders and we both exhaled, almost relieved as our bodies touched.\n\nI was content. I was comfortable. It terrified me completely.\n\nAfter a while, his fingers started tracing small patterns on my shoulder.\n\n\"Nellie, can we talk about\u2014\"\n\n\"No.\"\n\nHe sighed. \"Would it really be so bad if\u2014\"\n\n\"Yes.\"\n\nHe fell silent, and I felt guilty.\n\n\"Come on. You can't stand me,\" I joked. \"Remember? I'm your sister's annoying friend, I tease you all the time, I make lewd comments...\"\n\nHe laughed, an easy, casual kind of sound. \"Right. And you think I'm hideously ugly.\"\n\n\"Just the worst. I can't even look at you.\"\n\nBefore long we were laughing, and it was only when he pulled me in to kiss me that we stopped. It lingered just a little too long, and both of us refused to acknowledge it. We refused to acknowledge the fact that I fell asleep against his chest, that he woke me up a few hours later when he got dressed to go back home, and that he kissed me again in the darkness of my room, softly and sweetly and so unlike J.P. that I thought I might have dreamt it.\n\nI left the next day, walking stiffly to my car and loading my suitcase in the trunk. Just before I left, Anne-Marie barrelled over from next door.\n\n\"I did not see you and Jean-Paul leave last night,\" she said brusquely.\n\n\"I tried to find you before we left,\" I replied. \"Sorry. You know I was only there because I had to be.\"\n\n\"Hmm,\" she said, grinning. \"Also, my brother was not home when Remy and I returned last night.\"\n\nI shrugged. \"Maybe he went out after we got back? Ask him when he gets home.\"\n\n\"He is home now, and says he went out to a girl's place after the gala, but won't tell me who.\" She looked at me pointedly and I stared back blankly.\n\n\"Well, you'll have to ask him again, I guess. He didn't say anything to me about going to a girl's place after dropping me off.\" \n\n\"Really,\" she said, her eyes gleaming with laughter. \"That is so funny, because Jean-Paul said if I really wanted to know, I could go ask you because he told you on the way home.\" \n\nI rolled my eyes. \"J.P. is just fucking with you, Anne-Marie. He knows you apparently want us to get together. What's more likely, that J.P. is playing a game with you or that I know who's place he went to last night?\"\n\nShe finally conceded that her brother was probably just teasing her before hugging me and wishing me a safe drive back home. After she left, I got into my car, glanced back at the Marchand's house, and caught J.P. grinning at me from the driveway as he walked past Anne-Marie to his car.\n\nI could almost see his eyes sparkling playfully as he raised a hand and waved. I rolled my eyes, flipped him off, and backed out of the driveway.\n\nBefore pulling away, I glanced at him in the rearview mirror. J.P. blew a kiss at me and I laughed.\n\nHe was such a bastard.\n\n**\n\nSpecial thank you to Bebop3 and OneAuthor for their feedback and editing. The next Nellie story, Nellie & The Dragon Tattoo, will be released August 2020."
    ],
    "authorname": "MsCherylTerra",
    "tags": [
        "anal first time",
        "anal orgasm",
        "anal virgin",
        "analingus",
        "college girl",
        "doggy style",
        "flirting",
        "high society",
        "oral sex",
        "public sex"
    ],
    "category": "Anal",
    "url": "https://www.literotica.com/s/nellie-and-the-diamond-gala"
}
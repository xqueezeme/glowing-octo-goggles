{
    "title": "Little Packages Ch. 09",
    "pages": [
        "Thanks for your patience is waiting for this chapter. I hope you'll find it was worth the wait....\n\n********\n\nBen/Daddy\n\n(May, 19 months since Daddy and Kitten started dating, seven months since the engagement)\n\nI moved slowly down the walkway of Terminal 1 at Pearson International when someone jostled me running, I assume, to catch another flight, probably at the other end of the terminal. They were in such a hurry they didn't even turn around to apologize, which is practically unheard of in Canada.\n\nI sighed, cursed quietly, and reminded myself just how much I hated Terminal 1, Pearson, and Toronto in that order. Then again, everyone hated Pearson. It was practically part of the Oath of Citizenship; Bear true allegiance to the Queen, observe the laws of Canada and hate Pearson International.\n\nI was tired and cranky. I'd taken the redeye from Vancouver to Toronto, hoping I might get some sleep, but that hadn't happened. The seats were cramped, my leg ached, and there was the usual confluence of annoying passengers who worked to make sure that didn't happen.\n\nThen there was the trip itself. I was still processing that. I would probably be processing that for most of the rest of my life. At this point, all I wanted was to get the UP Express to Union Station and a taxi to Meg's condo. From there I would pass out for several hours.\n\nBut once I gathered my suitcase and left the security area, I got my first surprise of the day. Meg was standing by a post with a smile on her face. The second slammed into me a second before I registered she was in motion.\n\nMy Kitten.\n\nShe knew she shouldn't run and slam into me like this. My knee was ok, but I still lacked 100% stability, and I needed the cane. She always felt terrible later but claimed she just couldn't help herself when we spent any significant time apart. I knew I was in a bad mood when I had a momentary thought of snarling at her for being so careless. Fortunately, I managed to quash it quickly. Instead, I wrapped my arms around her and kissed her on top of her head.\n\n\"What are you two doing here?\" I asked as I managed to untangle Kitten from me slightly and walk towards Meg. \"I thought you were both supposed to be at work?\"\n\n\"I finished a night shoot a few hours ago, and they don't need me back on set until 7 pm. So I was going to come out to surprise you. Meg asked if she could tag along,\" Kitten said. She wore some well-loved jeans and a hoodie that was at least two sizes too big for her so she looked even smaller than usual. She also looked tired from being up all night.\n\nI glanced at Meg. She shrugged.\n\n\"What are they going to do, Ben? Fire me?\" she said.\n\nTwo weeks ago, just before I went to Vancouver to deal with mom and dad, Meg's law firm passed her over to be made a partner. It wasn't the first time it had happened, and she was seriously considering the next steps. Among those steps included burning the entire building to the ground. She was standing here at the airport and not in prison which meant she hadn't moved to the next stage of her plan.\n\n\"We know you need some friendly faces. Please don't be grumpy at us,\" Kitten said.\n\nLike that was going to happen with those huge green eyes staring up at me. Kitten knew I couldn't stay mad when she used them on me. We began walking towards the train that would take us back to Toronto.\n\n\"Your inability to stay mad at her for more than two seconds is hilarious, by the way,\" Meg said. She was bantering to distract me from the trip, but I let her get away with it.\n\n\"You can't stay mad with me either,\" Kit said. \"At least I'm fucking him. You have no excuse.\"\n\nThat managed to get a snort out of me and a sigh out of Meg.\n\n\"So glad to see the roommate situation is going well,\" I said.\n\n\"Oh yeah, this was one of my more clever ideas,\" Meg replied. Kitten licked out her tongue. It was foolish, silly behaviour, and it was honestly the first time I'd felt remotely human in a couple of weeks.\n\nWhen we finally got on the train, Kitten promptly cuddled into me, rested her head on my shoulder and passed out. I was tempted to lean against the window and do the same but decided I'd stayed awake this long. When I passed out, it was going to be in a bed.\n\n\"How's she been the last couple of weeks?\" I asked Meg. Kitten and I chatted every night via Zoom and texted on and off throughout the day, but she was always upbeat. I'm betting she was hiding things from me so I wouldn't worry.\n\n\"She missed you a massive amount. I mean, I know the two of you are crazy, nauseatingly in love, but watching how much she missed you and how pissed off she was that she couldn't go to Vancouver to be with you, well....\" she said.\n\n\"You wanted to strangle her?\" I said, mostly joking.\n\n\"Just a little bit,\" she said, smiling.\n\nOne of the great reliefs in my life was that after their initial horrific meeting, the two of them had become solid friends. Enough that when Kitten got a work term on a tv show filming in Toronto, Meg immediately offered up her condo as a place to stay. I was worried, but so far it was working out.\n\n\"Seriously, are the two of you getting along? I haven't been around, and she's starting her first real professional job. You've got all this shit going on at work....\"\n\nMeg nodded and I realized just how tired she looked. It's a weird thing when you've been friends with someone for a long time; you never really notice that they're getting older. Of course, she was, but Meg always took such good care of herself. She joked because she had to look good for work, but I knew she always took pride in her appearance.\n\nBut for the first time, I was shocked to realize Meg looked like a woman pushing towards 50. She'd stopped religiously dying her hair earlier the year, letting herself go fashionably grey but keeping it short. However, this morning it was covered by a Raptors cap. She was wearing an old The Pursuit of Happiness t-shirt that she only wore when she was feeling down, her leather jacket, jeans, and a pair of Vans.\n\n\"Kit's been great. I know we give each other shit, but she's been fantastic to have around the last couple of weeks, even if we only see each other briefly because of work. I realize just how lonely I was,\" she said.\n\n\"There are options to fix that,\" I said. If I hadn't been so tired, I might have just let Meg's comment slide. I figured I was going to get a snotty comment. Beth and I both told her that she needed more of a life, and she would not take it well.\n\nSurprisingly, this time she just nodded.\n\n\"I'm considering all options at this time,\" she said.\n\nWell, that was news at least. I would talk to her about one later, as she wasn't in the mood to elaborate right now. She also didn't ask about the trip, which was good. I'd give them both the debrief once I got some rest.\n\nWe staggered into Meg's condo about 45 minutes after leaving the airport, with a barely awake and cranky little girl. She was still not used to working nights, long hours, and the demands of working on a TV set. We both got a quick shower, and to emphasize how tired we were, we didn't even fool around. Afterwards, we went back to her room and quickly passed out.\n\nAn indeterminate time later I was having a very good dream. It involved Kitten in her full kitty gear, with her ears, collar, tail, and fairly slutty lingerie. She was sucking my cock and making purring noises. And in my fuzzy dream logic two things came to mind. First, that it had been too long since we played like that and I needed to do something to address that.\n\nAnd second, the reason that it felt so good in my dream might be due to my cock being sucked in real life.\n\nI groggily returned to consciousness and, sure enough, there was Kitten underneath the sheets moving her mouth slowly up and down my cock. I wasn't on the verge of cumming, but it felt amazing. I missed her mouth. I missed all of her. Plus, if there's a better way to wake up than with my little girl bobbing her mouth up and down on my cock, I've yet to find it.\n\nI didn't disturb her for a few minutes. I just enjoyed the slow feel of her lips and tongue working on my cock. It was a blowjob, but it also felt like she was getting acquainted with my cock. I know she missed me, but she also hadn't gotten laid in two weeks. That was a long stretch for us.\n\nFinally, I felt her mouth come off my cock.\n\n\"I know you're awake, Daddy,\" came her muffled voice under the sheets.\n\n\"Busted,\" I said.\n\nI felt her move around under the sheets and soon she was sliding her body up mine. It felt amazing. Her soft skin was sliding up my hairy chest and I relished the feel of her hard nipples running along my skin. Add that to the long list of things I'd missed. She knew the effect she was having because it was the slowest coming up for air in history.\n\nFinally, her face popped out from under the sheets. She was smiling.\n\n\"Did you like that, Daddy?\" she asked.\n\n\"Silly questions,\" I replied, placing my hands on her ass and running them up and down her back. She closed her eyes and sighed. It was her turn just to lie there and enjoy the sensations. After a few minutes, I slid my hands down, cupped her ass, and shifted so that her pussy was right above my cock. It also meant she was closer to kiss. Our lips came together for a moment and then she made a face.\n\n\"Morning breath,\" she said, but teasing more than grossed out.\n\n\"I've missed you so much that even your morning breath is amazing, Kitten.\"\n\nShe rolled her eyes so hard I thought I heard a slight cracking noise for a moment.\n\n\"You're lucky I missed you so much that I'm willing to let you get away with that much corn,\" she said. Then she shifted her hips, her pussy teasing the tip of my cock.\n\n\"Is Meg still home?\" I asked. Her neighbours probably wouldn't hear us, but if Meg was in the kitchen with a coffee she was about to get a shock. And she seemed a little fragile earlier.\n\nKitten grinned and slid her body down just enough that the tip of my cock slid into her pussy, but no more.\n\n\"Maaaaybe,\" she said, shimming her hips slightly.\n\nWell, it was nice to see that a two-week absence didn't change her bratty little girl ways. I reached down and gave her ass a moderate-strength slap.\n\n\"Ow!\" she said and pouted at me. I gave her a stern look that let her know more was coming if I didn't get an answer.\n\n\"She....may have run out to take care of errands for the next,\" and she glanced at her phone on the table, \"45 minutes or so.\"\n\nI smiled at her and began running my hands gently across her ass. Her eyes closed and I could tell she was enjoying my touch, but also trying to resist just leaning back and taking the rest of my cock.\n\n\"There. Was that so hard, Kitten?\" I asked.\n\n\"Well, you know me, Daddy. I like making things hard for you,\" she said and then couldn't stop giggling as her pussy pulsed around the tip of my cock.\n\n\"Oh for God's sake,\" I said, mostly in mock exasperation. But then I grabbed her hips and pushed them down so my cock slid into her pussy.\n\n\"Oh Fuck!\" she cried out, putting her forehead on my chest as her red hair splayed out. After taking a moment to catch her breath, she lifted her head and looked at me with mild annoyance. \"Give a little girl some warning.\"\n\n\"Oh please, you loved it,\" I said, and then pushed my hips up so the last couple of inches of my cock buried in her. She gasped again. After a challenging trip, a very erotic dream, and some lengthy cock sucking, this was exactly what I needed. She repositioned herself so that only her hands were resting on my chest while her hips began to slowly move up and down, letting my cock gently enter the wet heat of her pussy.\n\n\"Better, Daddy?\" she asked.\n\nI could feel weeks of stress ebbing away. It was much, much better now.\n\n\"Your pussy has magic abilities, Kitten,\" I said, running my hands up her side.\n\n\"And the rest of me?\" she said.\n\nI cupped her breasts and rang my fingers across her nipples. She gasped and closed her eyes.\n\n\"The rest of you is perfect, princess,\" I said. She looked at me, her eyes slightly glazed, but with a smile on her face.\n\n\"Good answer,\" she said and continued to slide her pussy up and down over my cock.\n\nNormally if we've been apart for a few days, the first time we see each other it's fun, but often frantic, bordering on aggressive. She needs her Daddy; I need my Kitten. Plus we have some excess energy and frustration to burn off. It was fun, but I was almost always in charge. Which I liked and Kitten loved. She was my little girl, after all.\n\nBut this wasn't like that. It was very focused. Yes, Kitten was certainly getting off on having my cock in her, but she was paying close attention to my reactions. She smiled and ran her hands across my chest. She bounced up and down quickly for a few moments and then switched back to a slower, more teasing pace. My Kitten was very much in charge.\n\nFor once, I was content to let her be. This was her way of helping me, and I could honestly use the time to turn off my brain.\n\nStill, she was getting close. She was riding me with more determination and her face was getting flush.\n\n\"Oh, God, I've missed this so much. Can I cum, Daddy? I promise to make you cum hard in a few minutes. I just need this. Please,\" she said desperately.\n\nI smiled and slid one of my fingers down to where her clit was brushing against my hips. I began to rub it slowly, and her fucking became more erratic and desperate.\n\n\"Pleeeease,\" she whined.\n\n\"Cum for me, princess,\" I said. Relief and bliss washed across her face. She moved up and down on my cock fast and hard until her orgasm slammed into her.\n\n\"Oh fuck, yes!\" she cried out, burying my cock as deep into her as she could take. I could feel her pussy pulsing around me. It wouldn't take much to finish me off, but I wanted her to have her moment first.\n\nShe was breathing heavily for a few moments. She needed that as much as I did, but she was being good and taking care of me first. Once again I thought that the smartest thing I've done in many years was asking her to marry me.\n\nFinally, she looked down at me, her hair draping around her face and grinned.\n\n\"Ohhhh, I needed that. Sorry I'm selfish, but I had some built-up urges,\" she said.\n\nI laughed and the motion caused her to groan again. I started to roll over when she planted her foot to stop me.\n\n\"Nuh-uh,\" she said. \"I'm taking care of my Daddy today.\"\n\nAnd with that she began moving up and down on my cock again. The look of focus and determination on her face was adorable. She was biting her lip, and while sliding up and down on my cock she was pulsing the muscles in her pussy. It was otherworldly.\n\n\"Daddy will have plenty of time to fuck his little girl later, but right now he needs to fill her up with his cum. Can you do that, Daddy?\" she said, running her hands across my body.\n\n\"Keep doing that and you'll find out,\" I groaned.\n\nSensing I was breaking, she moved in for the kill, bouncing a little harder on me.\n\n\"Give it to me, Daddy. I need it. Please give your little girl what she needs, Daddy,\" she moaned out.\n\nI was only human and weeks of nothing along with this amazing performance did me in. I closed my eyes and lifted my hips as Kitten slammed down on me. I gave in to the inevitable.\n\n\"Oh fuck!\" I cried out. I could hear her pleased groan as I came. I don't think she came again, and part of me felt bad about that. But I needed this, and she knew it.\n\nI felt her face settle onto my chest as I was still catching my breath and as I was still feeling the aftermath of my orgasm. Nothing like a good hard cum in your fiance to blast away the mental cobwebs. She began moving her face across my chest, just like she was a kitten.\n\n\"God, I missed you. The last two weeks have sucked,\" she said.\n\n\"Tell me about it,\" I said, hoping the tone didn't sound too depressing. She kept touching me, reassuring herself that we were together again.\n\nNeither of us said much more for the next few minutes. Eventually, I heard the door to the condo open and close and Meg very unsubtly rustling around in the kitchen. Her way of letting us know she was back in case we were...occupied.\n\n\"Time to get up and be sociable, Kitten,\" I said.\n\n\"Boooo,\" was her response, but she shifted off of me, grabbed a t-shirt off the pile on the floor and headed towards the bathroom. I slowly got up, and fished out a fresh t-shirt and shorts from my luggage. A glance in the mirror led to some grooming of my greying hair and beard. Finally, I grabbed my cane and made my way out to the modest kitchen. Meg looked at me and smirked.\n\n\"Hopefully, that'll take the edge off of her,\" she said, putting away some groceries.\n\n\"She gets cranky without regular....attention,\" I said. Meg rolled her eyes.\n\n\"I know. I told her to try going months without getting laid. It was like that time you tried to explain 80s teen cinema to her,\" she said. \"Just this irritating, blank look. Like you were talking about something she had no frame of reference for.\"\n\n\"They're all weirdly sexist and you love them,\" Kitten said, walking barefoot into the kitchen. She looked like she'd just been fucked and didn't care. It was a deliberate look. Part of it was to annoy Meg a bit, which she liked to do. But as she told me once, Meg was hot enough to remedy her lack of sex situation if she wanted to.\n\nMeg shook her head and tried to explain The Breakfast Club's radical importance, while Kitten rolled her eyes. I sat on a stool next to the island in the kitchen and continued my decompression. Sleep, sex, and watching two of my favourite people banter. It was a balm.\n\nKitten eventually came over and leaned against me, and I put my arm around her and kissed her head. She was very affectionate, even for her. The fact that Meg wasn't making gagging faces meant they were both still worried about me. Not unjustifiably, I guess.\n\n\"I'm ok, both of you. I promise,\" I said.\n\n\"Ben, you'll forgive me for wanting a little more reassurance than that,\" Meg said, sitting across from me, peeling some grapefruit. \"Respectfully, you've been fine before, and I nearly had to give you bail money.\"\n\nKitten looked like she wanted to protest, but I placed my hand on hers and squeezed to let her know it was ok.\n\n\"Mom's settled into the home. Dad is a wreck, but he understands that's where we are now and this is for the best. It's hard, but it's not like I haven't seen this coming after I heard the diagnosis,\" I said.\n\n\"But it happened so fast. You can't have been completely ready for it,\" Kitten said.\n\nI nodded. \"No, you can't. It's the damnedest thing. Sometimes mom sees me and chats like everything is ok. Then she just...vanishes.\"\n\nLast Christmas I got tired of Dad being mysterious about what was going on with mom. I should have gone out sooner, but he kept deflecting and saying it wasn't a good time. When I didn't speak to her after I called to say I was engaged, I knew something was seriously wrong. But he couldn't say no to me at Christmas. Kitten came with me, as she insisted. I didn't even make a weak effort to try to keep her away. It would have been insulting and she wouldn't have it.\n\nWhen we arrived, the house was a mess. Housekeeping was not one of dad's strong suits and mom was no longer capable of doing it. He finally admitted that she wasn't well. It wasn't Alzheimer's, but it was a kind of rapid onset dementia. It was shocking to see how much of her vanished in the four months since I'd last seen her.\n\nAs close as I came to losing my shit during all of this was those first few minutes. The guilt and horror that I wasn't here to spend more time with mom was quickly followed by rage at dad for not letting me know what was going on. But just when I thought I might lose it, I felt Kitten squeeze my hand, walk over to my mom and show her the engagement ring.",
        "And just like that, she came back, congratulated us, and fussed over the ring and how lovely it would be to have a daughter-in-law again. I turned to say something to dad and the look of relief that his wife was back, if just for a few minutes, was so great that my heart broke for him. I couldn't be mad at him. I was losing my mom. He was losing the only important thing he had in the world.\n\nGod, could I empathize.\n\nDad, of course, was still trying to fix it. I got my fixer attitude from somewhere. Kitten just stepped up and told my dad he needed to get her help. Now. I'm not the only one who can't say no to her. Within a day we had a homecare worker.\n\nThat was the start of my winter of going back and forth between Toronto and Vancouver. To help out dad and spend time with her while I could. But it became apparent it was a losing battle. She needed to be in a home where she could get more support.\n\nDad fought the idea tooth and nail, but even he gave into the inevitable when the homecare worker said there was nothing else she could do. My last trip was getting her settled into a care home and getting someone to help with the cooking and cleaning for dad.\n\nIt's a hard thing to lose your mom even when she's still there physically. It's hard to watch your father, a rock, slowly break. A year and a half ago I would have been useless. But now I had my rock, even if she was in a 5-foot tall package.\n\n\"Look, that was a tough thing to do. I'm not going to say otherwise. But I've known this was coming and I knew the risks of me sliding again. That's why I've been talking to my therapist again and sticking with my meds. It's why I'm talking to both of you all the time.\n\n\"Over three years ago, I thought my life was over. Now I have way too much to live for to go off the rails again. So yeah, this sucks and there are going to be some hard days for me,\" I said. \"But I've got people who love me and this time I know it. So yeah, I'm....ok.\"\n\nI could feel Kitten making a snurfing noise next to me. Meg came around the table and hugged me. I was a wiser man than I was last time and I knew better than ever how precious moments like this were.\n\nFinally, I gently broke the hug. Meg looked slightly embarrassed and Kitten was looking at me with bloodshot eyes, but she was smiling. That's all I needed.\n\n\"Soooo,\" she said, trying to change things up, \"On the good news front, I have a week off coming up.\"\n\n\"What? Why?\" I asked.\n\n\"A couple of the stars have promo tours they need to do and they scheduled a break between Victoria Day weekend and Memorial Day weekend. I can come up to the house for the week so you're not rattling around up there alone,\" she said.\n\nThat was exactly what I needed. School, work, and my mom meant this had been a rough year for us so far.\n\n\"A week alone with you is just what the doctor ordered. I wouldn't pack much clothing,\" I said, trying to get Kitten to blush and a slight rise out of Meg. Instead, Meg laughed.\n\n\"Go ahead and tell him the other part,\" she said, going to the fridge to grab some water.\n\n\"Kitten?\"\n\n\"I....may have mentioned to Gillian and Soo that I had a week off and I was heading back to Kingston. And they asked if they could come for a visit for the weekend because they wanted to get out of Montreal,\" she said. \"I kinda said yes....\"\n\n\"Kitten,\" I groaned, putting my head in my hands. I loved those two girls. They were great and under other circumstances, I'd love to see them, but I wanted a week alone with my fiance.\n\n\"And since you were turning your place into an AirBnB for lesbians, I figured I'd come up for the weekend. I need a break to get the stink of Toronto off of me.\"\n\n\"I thought you were bi?\" Kitten said.\n\n\"Eh. Who knows these days,\" Meg replied.\n\nI was about to protest when Kitten cut me off.\n\n\"Nope. First of all, we'll still have the rest of the week and I promised to do everything your depraved mind dreams up,\" she said.\n\n\"TMI,\" Meg complained. Kitten ignored her.\n\n\"Second, we all need breaks and the house is a perfect little getaway.\"\n\n\"And third?\" I said, knowing there was a third point.\n\n\"You need to have some friends around for a few days, to relax and have some fun. Meg agrees with me on this. So please, Daddy,\" she said.\n\nIt was a done deal, but I needed to salvage some dignity. I sighed and got up from the stool and went to look out the window of Meg's condo. I used to like this condo. I used to love the one Beth and I had back in the day. Now it felt small and all I could see were other condo towers. It was bloody depressing. No wonder Meg needed a break.\n\n\"Fine,\" I said in a voice that was an attempt at being magnanimous. It fooled no one. \"Under one condition.\"\n\n\"Which is?\" Meg said, clearly amused at me trying to negotiate the terms of my surrender. As a divorce lawyer I imagine she heard it all the time.\n\n\"You are going to be taking Gillian and Soo out at least once to give Kit and I some alone time. Take them on a cider tour, take them shopping or out to dinner. I do not care. But I'm not sneaking around my own house when I want sex.\"\n\nMeg came over and shook my hand, sealing the deal.\n\n\"Like I want to hear the two of you go at it anyway,\" she said. Kitten came over and tackled me, pushing me against the condo window.\n\n\"Best Daddy Ever,\" she said, happy I caved so quickly.\n\n\"You say that now,\" I whispered in her ear. \"There's a price to pay for inviting guests without checking with your Daddy first.\"\n\n\"I'm counting on it,\" she said, leaning up to kiss me.\n\n****\n\nNeither Kitten nor Meg loved the idea of me heading back to Kingston; I would be alone for over a week before the hordes descended on me. I compromised by spending another couple of days in Toronto to make them happy. But they were both busy with work so my time with them was limited. Even catching up with some people from the old days was weird. Several didn't have time and the couple that I did catch up with, well, we'd all changed over the last couple of years. It was nice but odd. They mostly asked if I was sure it was a good idea to get engaged so quickly. That got old in a hurry.\n\nSo it was with relief that I hopped on the train back to Kingston and walked through the doors of my home. I walked around opening windows, grabbed something to drink from the fridge and then went out on the deck. I sat down in the chair and soaked in the view. It was good to be home.\n\nI knew part of me should feel bad about being home with everything going on with dad, but he was insistent about me returning home.\n\n\"You'll do no good rambling around here. We'll get on each other's nerves and, well, as hard as it is for me to say this, your mother won't miss you,\" he said, and I could tell it killed him to say it as much as it killed me to hear it.\n\n\"Dad,\" I began, but he waved me off.\n\n\"Come out when you can. Bring Kit if you're able. She lightens the place so much when she's here. I swear even your mother responds better with her around,\" he said. \"But you have a life with her now. She needs you more than your mom does.\"\n\n\"Ok dad,\" I said. He was right, but I still felt terrible.\n\n\"When you first told me you were engaged to her, I thought maybe you rushed it a bit. She's a lovely girl, but it had only been a year. But all those times she came out with you, well, she's a special girl. You need to take good care of her.\"\n\nAnd so here I was, back home, waiting for my special girl. And her friends.\n\nThe time went quickly. I cleaned the house and got groceries. I worked out and took care of a few freelance things that I had let slide due to travel. I even did some work in Kitten's room so the girls could sleep in there without having to kick her debris field around to find space.\n\nBefore I knew it, it was the long weekend. I offered to go into Kingston to get Gillian and Soo, but Meg said she could grab them from the train station along the way.\n\n\"We've got them. We'll see you soon,\" Kitten texted.\n\n\"The place is ready for the hordes,\" I replied.\n\nShe replied with a picture of all of them in the car. They all looked happy, at least. Soo had dyed her hair again, this time with a pink streak. She also appeared to have her nose pierced. Ever since she moved to Montreal, she was eager to try everything, making up for lost time. At least Gillian looked unchanged, albeit happier.\n\nThe door banged open and Kitten called out, \"Daddy! Where are you?\" which signalled their arrival. She ran out onto the deck, her short green sundress distracting me with all the leg it was showing. Before I could respond she pounced on me as I was trying to get up from my chair. I had the air knocked out of me, but still managed to laugh.\n\n\"I'm guessing you missed me, Kitten?\" I asked. She nodded into my shoulder.\n\n\"Come on, working on a TV show, making clothes for famous actors, sounds like a good gig,\" I said. \"It should make up for me not being around.\"\n\nShe leaned back and looked at me like I was nuts. It always gives me a jolt when I see her after any kind of absence. Those huge green eyes, the red hair already getting a little more strawberry in the summer sun, and her smile. It was insane that someone this beautiful could love me, but the universe is deeply weird.\n\n\"They're not that famous, Daddy. It's a CW show,\" she said.\n\nI roared laughing, which made her giggle and squirm on my lap. She could also feel my cock getting hard, and she gave me a hungry look. Under other circumstances, this would be the prelude to her sundress vanishing. However, that was the moment when Meg, Soo, and Gillian came out onto the deck.\n\nI sighed. They were here for less than five minutes and they were already cockblocking me.\n\nKitten got off my lap and I stood up. I took a second to adjust myself. Meg just nodded. Gillian gave me one of her slightly awkward handshakes because that's who she was. She liked me, but that was affectionate as she got with men. Soo, on the other hand, gave me a big hug.\n\n\"Thanks for letting us come for the weekend, Ben,\" she said. \"We needed a weekend away from Montreal. Someone was getting cranky.\"\n\n\"That's her natural, charming state of being,\" Kitten replied.\n\n\"Standing right here,\" Gillian shot back. The three of them bantered while I walked over to Meg. We walked into the house. I suspected she needed some coffee and possibly something stronger.\n\n\"Still think this was a good idea?\" I asked.\n\nShe shrugged her shoulders.\n\n\"I think so. People are good to have around, or so I've been told,\" she said. Knowing she was coming I made an extra-large pot of coffee. She poured a cup, took a sip of her coffee and then made a quiet moan of pleasure.\n\n\"You live in Toronto. It is possible to buy good coffee there rather than the crap you drink at the office,\" I said.\n\n\"I know, I know. But stealing your expensive coffee gives it extra flavor.\"\n\nI shook my head and poured my cup. We were leaving unspoken why she was even here today. When they talked about coming up for a visit, I assumed she would drive up late Friday evening after work. Yet, here it was just after lunch and she was standing in my kitchen drinking coffee. It meant she blew another day off work.\n\nThe girls came into the kitchen with Kitten telling them to fend for themselves. They looked a little sheepish about it, but there was no way they were coming here and buying their groceries. Soo and Gillian did bring their own alcohol. My relationship with alcohol was still complicated years after that drunk killed Beth. It made no logical sense, but I still hated buying it, and I certainly wasn't going to be drinking any. But as long as they didn't make a nuisance of themselves, having something to drink was ok.\n\n\"Ben, I just want to say thanks again for this,\" Gillian said. \"Soo's remark about being cranky aside, I've been going all out this year with school, graduating and work, so a long weekend away helps.\"\n\n\"No problem,\" I said. And for the first time I meant it. \"How's the new job?\"\n\n\"I love video games, but too many of the people who make them are assholes. This company is pleasantly not filled with douche-bros, so that helps.\"\n\nI laughed.\n\n\"How about you, Soo?\" I asked. \"Still the best barista in Montreal?\"\n\nGillian laughed, which resulted in Soo shooting her as close to a dirty look as I'd ever seen.\n\n\"What, Che Guevera over there? She can say we're getting out of town because I'm grumpy, but we're escaping before half the coffee shop owners in Montreal put a hit on her,\" Gillian said. She was teasing, but she also looked incredibly proud.\n\n\"What happened?\" Kitten asked.\n\n\"I like my job and the people I work with, but the owner? Just...no. He was being inappropriate to some of the baristas and making them uncomfortable. So I stood up to him, he threatened to fire me, and then, well, I might have organized a large number of baristas from his other shops to all quit their jobs at the same moment as a protest of his inappropriate behaviour. Some people are not taking it well,\" she said, shrugging her shoulders.\n\nMeg practically did a spit take, Kitten was at a rare loss for words and I started laughing.\n\n\"You deprived people in Montreal of their coffee?\" I finally managed to get out.\n\n\"It was beautiful,\" Gillian said. I noticed that Gillian enjoyed the suffering of people she considered aggravating. By default, that meant almost all of Montreal, Quebec, and a good chunk of Canada.\n\n\"So what now?\" Kitten asked. \"I assume you're blacklisted at every coffee shop in town.\"\n\nSoo nodded her head but didn't seem the slightest bit worried.\n\n\"I'll figure something out. I've been busking for a while and I make ok money at that. An art program accepted me for classes this fall. Plus I can always pick up a few things. I find if you try to be a good person and do the right thing, things work out for you,\" she said.\n\nThe staggering optimism of a 20-year-old. I didn't have the heart to tell her otherwise. A glance over towards Meg confirmed she was thinking the same thing but was also biting her tongue. I could only hope Soo was right.\n\nAfter they all managed to grab drinks, I attempted to lay down some ground rules.\n\n\"Look, I'm all glad you're here, and please feel free to relax and do whatever. But as I'm sure you all know, I'm not having the easiest year in the books. So I'm not really in any shape to be playing cruise director for the weekend....\" I started before Kitten cut me off with an exasperated sigh.\n\n\"Nobody is expecting you to do anything for the weekend, Daddy. We're here to distract you. So you don't have to cook, drive us anywhere or cater to us. Just hang out in your house. We're going to hang out, use the sauna and jacuzzi, maybe go down to the swimming hole,\" she said, looking a little sheepish. That was our spot, but I could hardly ask her to hide it from her friends if they were visiting. \"If there's a problem, Meg or I will deal with it. Ok?\"\n\nWell, I could hardly argue with my little girl when she put it that way.\n\n\"Sounds good,\" I said, holding my hands up. Kitten nodded her head, my surrender a foregone conclusion.\n\n\"I'm going to take Gillian and Soo to the pool for a swim. You and Meg can chill here for a bit. We'll be back in time for supper. Which Soo is going to make,\" Kitten said. She then grabbed the two girls and marched them to their rooms to get changed.\n\nMeg looked at me and smirked.\n\n\"I thought you were supposed to be the dom in this relationship? Because I think she just put you in your place,\" she said, heading back out towards the deck with her coffee.\n\n\"Oh well. At least now I know what it'll be like when Kitten sends me to the retirement home,\" I replied, again nearly causing Meg to do a spit take.\n\n***\n\nMeg and I were sitting on the deck, just shooting the shit. The girls had left about 45 minutes ago and I wasn't expecting them back for at least another hour. It was a good chat about nothing, which is sometimes what you need. However, Meg knew what was going on with me, but she remained frustratingly coy about herself\n\n\"Ok, I've been patient, but enough. What gives?\" I asked as my patience finally wore out.\n\nShe sighed and stared off into the distance.\n\n\"Pretty sure I either quit or was fired yesterday. Not entirely sure which, but given the lawyers at my firm, I'm sure it will end up being the latter if it ends up in court,\" she said, seemingly more annoyed by the whole thing rather than upset.\n\n\"Did you tell one of the partners to fuck off?\" I asked. She always said if she was going, the last thing she was going to do was to tell \"some of those old white bastards where to go.\"\n\n\"No,\" she said. \"Well, I eventually got there, but no, at first it was just a meeting about my attitude. They thought I was disrespectful to the new partner....\"\n\n\"Which you were,\" I said, interrupting. I knew Meg.\n\n\"Which I was,\" she continued. \"It escalated into me telling them I was looking for another job because not making me a partner last time was bullshit. Then there was a comment about my lack of gratitude for all they had done for me....\"\n\n\"And that's when you told them to fuck off,\" I said. Meg toasted her coffee cup towards me, indicating I'd guessed correctly.\n\nWe sat for a few more minutes. I was waiting to see if Meg would say anything else, but she was content to enjoy the view.\n\n\"Fuck it. They don't deserve you,\" I finally said.\n\n\"Well, duh,\" she replied, but with a grin.\n\n\"So is there a plan or am I making up the spare bedroom for your inevitable homelessness?\"\n\n\"You understand that if it ever came to that you couldn't say no, right?\" she said. I knew she was mostly kidding, but there was more than a bit of truth to it as well. She kept me alive for almost two years; that was a debt I was never crawling out of.\n\n\"I can probably do something with the shed out back, maybe run a space heater back there, give you a bucket you could draw water from the stream,\" I said. Meg reached over and punched me in the arm.\n\n\"Asshole. I expect your bedroom and you and Kit can have the shed.\"\n\n\"Good luck convincing her of that.\"\n\nShe was quiet again for a few moments, finished her coffee and examined the empty cup with grief. Then she looked at me.\n\n\"There is a plan, believe it or not. I'm not your level of borderline OCD organization, but I don't get into a fight in the office if I don't have a backup plan. Besides, I think I'm getting done with law and done with Toronto. I need a break. Every time I come up here for a visit I don't want to leave. Don't let that go to your head. It's less to do with you and more to do with getting out of the city.\n\n\"You don't do as much pro bono work with women's shelters as I do without getting some good connections. So there are a few options with women's organizations, here and in Ottawa. I had one political party reach out and inquired if I wanted to run in the next provincial election....\"\n\n\"Ooooh, that's intriguing,\" I said.\n\n\"I might. It's tempting. But I'm going to go on vacation first. I haven't had a proper one in ages. So I'm going to go over to Europe, bumble around for a bit. Practice my French,\" she said.\n\n\"Is that a euphemism?\" I asked. She laughed.\n\n\"I need to get laid, so sure,\" she said. \"Kit already knows most of this. She's good in the condo for the rest of the summer, so you guys don't need to worry. Then we'll see. A change will do me some good, I think.\"\n\nI reached over and squeezed her hand.\n\n\"This is a good thing. I'm glad you're changing things up. You've been unhappy for a while,\" I said, standing up to take her cup and refill it.\n\n\"Yeah, it was time to get off my ass. You know that,\" she said.\n\nI nodded my head. I hope it went as well for her as it had for me.\n\n****\n\nLater that night we were sitting around a fire pit I had on the front deck. Kitten cuddled into me while the others were in different chairs. Marshmallows were roasting over the fire and I couldn't recall the last time I was involved in that.",
        "I thought Kitten and Meg's idea of having people over this weekend was nuts, but it was working. I had barely thought about my parents since they arrived and I felt noticeably less stressed.\n\nThe talk around the fire had been mostly harmless until Gillian decided to make it a bit weird.\n\n\"This is the oddest family fire I've ever been to,\" she said, blowing on a marshmallow before popping it into her mouth. Soo looked at her confused, so she continued.\n\n\"Well, there's the three kinda orphan kids that are being fostered,\" she said, pointing at herself, Soo, and Kitten. Ben, well, you're a Daddy and Meg over there....\"\n\n\"If you call me mom or mommy, I will go Wicked Witch of the West on your ass, kid,\" Meg said. She was kidding, mostly, but it threw enough of a jolt into Gillian that it gave her pause. I was more interested in the first part.\n\n\"Orphans?\"\n\nGillian was already a couple of drinks in and was chattier than usual.\n\n\"Well, fuck my parents, first of all. Kit doesn't know where her dad is and hasn't spoken to her mom in a year,\" she said.\n\n\"I've got everything I need right here,\" Kitten said, and burrowed into me a little more.\n\n\"Soo's parents are idiots because she's gay,\" Gillian continued.\n\n\"It is more complicated than that,\" Soo said, looking a little annoyed at the topic of conversation.\n\n\"You came out to your parents. They asked you to leave. What's more complicated than that?\" Gillian said. \"I was there, remember?\"\n\nSoo fidgeted in her seat. She was always so upbeat that I couldn't recall seeing her uncomfortable.\n\n\"No, it was just the final straw for them. They had been frustrated with me for many years. I was always smart and got good grades, but was bored easily. 'Soo-Ah, you must settle down and decide what you want in your life,' they would tell me. But you tell that to a 13-year-old and they will do the opposite. So I made music, participated in theatre, painted, and whatever else interested me that week.\n\n\"But I also knew I was gay. I knew it when I was five years old. I'm sure they knew it too; they were just in denial. My walls had K-pop stars, but only girls, no boys. And I think they still would have accepted me being gay if I were a gay doctor or married a nice gay doctor. Instead, I fell in love with this surly, kind of weird, sorta damaged, but an amazing woman. She told me everything I didn't know I needed to hear. Who didn't think my clothing was weird. It was cool if I wanted to paint one day and play a new musical instrument the next. She just loved me,\" Soo said.\n\nWe were all quiet and Gillian looked stunned. She always kept a surly, grumpy exterior. I mean, it never fooled Kitten and I. We both knew she was using it as a shield to prevent people from easily hurting her. Still, the look on her face was as emotional as I'd ever seen her.\n\n\"I never knew....you never told me. I thought your parents kicked you out for being gay,\" she said quietly.\n\nSoo shrugged her shoulders. \"They would have kicked me out eventually. Falling in love with the butch white girl was the final straw.\"\n\nGillian moved off her chair, knelt before Soo and kissed her. Kitten made a little squeaking noise and I could see she was crying a bit. Hell, even Meg and I were feeling a little misty. They continued to kiss and had momentarily forgotten the rest of us were there.\n\n\"I swear to god if I am the only person in this house who doesn't get laid tonight I'm going to murder you all in your sleep and claim temporary insanity,\" Meg said.\n\nThat did the trick, with Soo and Gillian parting but still looking at each other pretty lustfully. I suspected they would be making excuses shortly to turn in early.\n\n\"Don't worry Meg, I slipped your favourite toy into your luggage, so you're all set for this evening,\" Kitten said. I choked on my drink when she said it. She was usually a real sweetheart, but Jesus did she ever like to tease Meg.\n\n\"Such a considerate bitch,\" Meg snapped back. \"I can change my mind about that favor, you know.\"\n\nKitten waved her hands in mock surrender. I just looked at both of them confused.\n\n\"I thought we could use some alone time tomorrow, Daddy,\" Kitten said. I resisted the urge to say that was pretty much my plan for this weekend.\n\n\"I offered to take the girls for a drive around, probably landing at one of the cideries where we will likely get very hammered and you will have to rescue us, but only after the two of you do whatever kinky shit it is you do. Deal?\" Meg said.\n\n\"Deal,\" I said. Kitten looked mildly annoyed.\n\n\"It was my idea,\" she pouted.\n\n\"And you'll get rewarded for it tomorrow,\" I promised.\n\n\"Oh goody,\" she said, squirming in my lap.\n\nMeg sighed loudly. Again. I hoped that Kitten wasn't joking about having packed her toy. Meg was showing some lack of foresight spending the weekend around horny couples.\n\n***\n\nIf Gillian, Soo, or Meg got off during the night, they were quiet about it. Kitten and I teased each other for a while but managed to cut it off before things got out of control. Both of us were eager to have some time alone in the house to play.\n\nThe next morning Kitten was unsubtle and eager for the others to get out the door, telling them about flea markets and yard sales that they could also visit along with the cidery. She was wearing one of my t-shirts that came down to her mid-thigh, and it was obvious she wasn't wearing underwear.\n\n\"I have no problem with day drinking, Kit, but starting at 10 am is frowned on,\" Meg said. Kitten grumbled but at least eased up on the fidgeting and pouting.\n\nFinally, a little after lunch I was sent out to the shed to retrieve something urgent. When I came back inside, I caught the tail end of a little gathering of the women. Kitten saw me, grinned and bounced towards the bedroom. The other three looked at me and smirked.\n\n\"Should I even ask?\"\n\n\"Why ruin the surprise?\" Meg said, leading Soo to start giggling and Gillian just shook her head. The two of them headed off to their room to get changed for their adventure.\n\nI like to think I've lightened up a fair bit since Kitten and I got involved, but being teased in advance of sex was making me cranky. Meg noticed it and gave me a tap on the head with her fingers.\n\n\"Oh, lighten up. You're about to have spectacular sex with a hot 21-year-old while I go day drinking with her best friends who are 25 years younger than me. We're doing this to give you a few hours alone. So which one of us is coming out ahead in the deal?\" she said.\n\n\"We could have been here all alone for the weekend and not needed the dramatic subterfuge and teasing,\" I said, sounding crankier than I meant to.\n\nMeg sighed and sat down on one of the stools by the kitchen island and stared at me.\n\n\"As tempting as it is to smack you in the head right now to snap you out of this, I will remind you your hot fiance is going to come bouncing out of that bedroom all sexy and eager and maybe you should get your head out of your ass so you don't ruin the moment.\"\n\nI nodded my head. \"That's fair.\"\n\n\"If we're bothering you that much, we can pack up and leave the two of you alone. I think that's a terrible idea because you are having a good time and being nicely distracted from some shitty circumstances. So if I were you, I'd take the teasing, apologize to Soo and Gillian for being a cranky old man, and then get laid.\"\n\n\"Ok, ok,\" I said, managing to laugh.\n\n\"If you haven't suffered permanent brain damage you can join us later and probably drive our drunken asses home,\" she said, heading towards her room.\n\n\"Thanks Meg,\" I said.\n\n\"Name your first child after me or something,\" she replied, and then also headed to her room to change.\n\nLater Soo, Gillian and I engaged in the traditional mutual Canadian apologizing session until Meg lost her patience with it, threw up her hands in disgust, and marched off to her car. The girls and I said \"have fun\" at the same time and laughed. Then I was alone in the house. Well, alone and waiting for my little girl. I glanced at my watch and saw it was almost half an hour since she went to get changed. I moved towards my den, figuring she was good for another 20 minutes when the bedroom door opened up.\n\nShe walked out of the room wearing a kimono with pink and white boots showing. She was also, surprisingly, wearing a pink wig in pigtails. She was grinning.\n\n\"They're gone?\"\n\n\"Uh, yes,\" I managed to stumble out.\n\n\"Good,\" she said, skipping up to me. Before she reached my arms, she did a couple of quick spins, resulting in her kimono coming off. She then came to a stop in front of me. It was a pink Sailor Moon-style outfit, sans most of the middle part of the costume. The top pushed up her breasts with the bottom consisting of a tiny flared skirt around a pair of panties. When coupled with the boots and wig, she was close to jailbait.\n\n\"Wow,\" I managed to get out.\n\n\"Too much?\" she said, looking a little nervous for the first time. I had Meg's words briefly echo in my ears and so I just let my mind be blown. I grinned, reached down and grabbed her ass and pulled her close.\n\n\"Just the right amount of not very much,\" I said, smiling. Kitten's face lit up and her hands went around my neck.\n\n\"Just what your Sailor Kitten wants to hear, Daddy,\" she said, leaning up for a kiss. Any lingering grumpiness was gone. I squeezed her ass and I could feel her moan into the kiss. Finally, she broke the kiss and stepped back. She was flushed.\n\n\"So am I supposed to be wearing a tuxedo, mask, and a hat into bed?\" I asked. She giggled.\n\n\"Maybe next time. In the meantime, carry me into bed, Daddy?\" she said, shimming back and forth. After a few close calls, she'd gotten much better at asking to be carried. Besides, it was a 'little' thing for her. Once braced correctly, I lifted her, she wrapped her legs around my waist, and burrowed her head into my neck. As I was shifting my hands around to get a better grip I felt something.\n\n\"Are you wearing your plug?\"\n\n\"Uh-huh,\" she said into my neck.\n\n\"Are you sure, Kitten?\"\n\n\"Mmmm hmmm,\" she said, pulling back and looking at me. \"I wanna play first, but then, yeah, I want my Daddy to fuck my ass.\"\n\nI wondered if this wasn't some attempt to cheer me up, but that was the part of me that stupidly overthought things. We didn't have anal sex often, but it was a lot of fun when we did. However, Kitten had to be in the right mood.\n\nShe was in the right mood now. I carried her into the bedroom and then dropped her on the bed. She quickly got on her hands and knees and looked at me with a pout.\n\n\"Too many clothes, Daddy,\" she said.\n\n\"Then fix it, Kitten.\"\n\nWith a huge smile she grabbed my belt and undid it, and then quickly pulled my pants down, but left my underwear. She then helped me take off my shirt. Finally, she rubbed her face across my stomach as she slid her hand down my shorts and began caressing my cock.\n\n\"Mmmm, my favourite toy,\" she purred, then pulled down my underwear and ran her tongue across my cock. I groaned; she smiled.\n\n\"Can I suck your cock, Daddy?\" she asked. I nodded, and her mouth quickly moved to the tip. She kissed it, ran her tongue underneath the head a few times, and then slid her mouth slowly down the length of my hard cock.\n\nKitten sucking my cock was always amazing. Sometimes I would close my eyes so that I could enjoy the sensations. I relished the feel of her mouth moving on my cock with her tongue sliding around it. The times when she looked up at me with a bratty grin and gave a little flick on the head so that she could watch my reaction. Sometimes she would deep throat me and I would marvel that such a tiny little girl could take me all in. My cock is of average length, but it is thick.\n\nBut today, I wanted to take her in. The pink wig was new as she usually didn't like to wear them, but I loved how it looked on her when matched with the slightly scandalous outfit. Her ass was moving back and forth as she sucked me as if she couldn't wait for what came next. Even her boots were tapping on the bed a bit.\n\n\"God, you're amazing,\" I managed to get out. She looked up at me, pulled back on my cock and let her tongue dance around the tip of my cock.\n\n\"I'm only getting started,\" she said, and then dove back in. For the next few minutes, the only sounds in the room were sucking noises and my groans.\n\nJust as I thought I might have to push her back because it was getting too good, she pulled back and flopped on the bed. She kicked her legs out at me, waving them back and forth as she slid a hand beneath her skirt and panties.\n\n\"I know it was my idea for them to come up, but I've been desperate for you since I got here,\" she said, moaning. Her face flushed as she played with pussy. I was content to stand at the edge of the bed and enjoy the show.\n\n\"Foiled by your own plan?\" I asked.\n\n\"Uh-huh,\" she said, closing her eyes. Kitten said she didn't like to masturbate that much because she had me, so who needed toys? That was her logic. But she did love playing with herself while I watched.\n\nI moved closer to her to run my hands along her boots and eventually her bare legs. That made her fingers move a little quicker. She was probably a solid 9 on her horny scale and if I did nothing she'd probably bring herself off in a matter of minutes.\n\n\"Are you having fun, Kitten?\" I asked, and then leaned in and kissed her just above the knee. She jumped.\n\n\"Uh-huh,\" she said, \"But I can think of something better than my fingers.\"\n\n\"Oh really? What would that be?\" I asked, kissing my way up her thigh, which sent her squirming.\n\n\"Daddy,\" she huffed impatiently. \"You're being ridiculous.\"\n\n\"Such a big word for such a little girl,\" I said, moving closer.\n\n\"Daddee,\" she whined impatiently.\n\nI pulled back and she gave me a look that was equal parts confused and lustful.\n\n\"Do little girls whine and get what they want?\" I asked.\n\n\"No,\" she said, frustrated and pouty.\n\n\"What do they do when they want something?\"\n\n\"They ask,\" she said, warming up again.\n\n\"So do you have something you want to ask me?\"\n\nShe grinned and removed her fingers from her pussy, and hooked them into her panties, giving them a quick tug so they slid down her legs. She freed one leg and was content enough to leave the panties hanging off her ankle. She opened her legs wide and gently kicked her feet in the air.\n\n\"Can you lick my pussy please, Daddy?\" she asked very sweetly.\n\n\"Much better,\" I said as I resumed my previous position. I tried not to look like I was diving into her pussy, but probably not succeeding. To hell with it; it had been way too long since I went down on my little girl. I didn't even try to be coy and tease her, instead choosing to run my tongue down along her clit.\n\n\"Daddy!\" she screamed, grabbing the sheets and bucking her hips upwards while slamming her thighs against my head. I would have grinned at her reaction, but I was busy. I loved going down on Kitten, but I didn't get to do it nearly enough. Mostly because she was so bossy about wanting to suck my cock and then fucking me. Plus, there was also the tiny concern that she might either smother me or break my neck.\n\nSo if I was going to take the risk I was going to enjoy this. I took two of my fingers and slid them inside her pussy, all the time I continued running my tongue along her clit. My beard quickly got soaked from her juices. I could vaguely hear that she was babbling and crying out as I continued to lick and suck on her.\n\nKitten asked me how she tasted. I didn't have an answer to that. She didn't taste like strawberries or peaches or any of those things. She tasted like....her. And she tasted delicious and that was all I needed.\n\nSensing she was getting close and that my life might be in jeopardy, I curled my fingers and began stroking her g spot. I then sucked on her clit as hard as I could. That did the trick as her legs flew away from my head as she came hard.\n\n\"Oh Fuck!\" she screamed and drenched my face and beard. I continued to nuzzle her pussy for a few more minutes until she finally tugged on my head.\n\n\"Oh God, enough. Please.\"\n\nShe was quiet after that for a few moments, except for trying to catch her breath. I wanted to make sure she was ok but knew to give her a few minutes to let her enjoy whatever rush she was on.\n\n\"Wow. You went to town on my pussy, Daddy,\" she said. She then moved down the bed and reached out and began slowly stroking my cock. She kissed me, even as she scrunched up her face at how wet my beard was. Her pussy might be a little sensitive right now, but I knew she would be ready for more quickly.\n\n\"Well, you were very polite so I thought I'd give you what you needed,\" I replied.\n\n\"That's not what I need today,\" she said. \"That hard cock is what I need right now.\"\n\n\"Well, I can never say no to you for long,\" I said. I was about to move between her legs and start to fuck her pussy when she closed her knees together. I looked at her with some amusement.\n\n\"I wanna ride you, Daddy. Please?\" she asked. I nodded and lay down on the bed. She quickly bounced to her knees and then positioned herself over my lap. To my surprise, she faced away from me. We'd never tried reverse cowgirl before. Typically when she rode me, she wanted to look at my face as she drove me insane. She lined up my cock with her pussy.\n\n\"This is different,\" I said.\n\n\"Sailor Kitten has a plan, Daddy,\" she said, looking back at me. She then sank her pussy down on my cock. We both groaned at the same time.\n\nI loved it when she rode me so I could see the look of concentration on her face and could play with her pussy and tits. But this had its appeal too. She braced her hands on my shins, carefully avoiding my bad knee, and began moving up and down on my cock. It felt amazing, of course. Her tight little pussy on my cock always did. But seeing the red jewel in her ass moving back and forth and she rode me was enticing.\n\nI reached up and ran my hands across her cheeks. Then she lifted and slammed down hard on my cock, keeping me buried as she moved her hips, the jewel in her ass moving back and forth in front of my eyes. I took the hint and grabbed the edge of the plug and began moving it gently in and out of her ass.\n\n\"Just like that, please,\" she groaned. Then she moved again, slowly this time, as I played with the plug.\n\n\"Are you trying to hypnotize me with your butt plug?\" I said, getting a giggle. I was beginning to wonder if I was going to last long enough to fuck her ass. Her bouncing, the feel of the plug through her pussy, was making things a little too good for me.\n\nFortunately, they were making things very good for my Kitten. Her bouncing was becoming more erratic. I was pulling the plug out further and pushing it in a little harder.\n\n\"Oh, I'm getting close....closer....oh Fuck!\" she screamed out and slammed her hips down, burying my cock in her pussy. It was very nearly too much for me, but I managed to hold out from cumming in her. Barely.\n\nShe leaned down and was breathing heavily for a few minutes, trying to recover, which was good because it gave me a few minutes to calm down. Then she slid herself off me with a groan of disappointment. She then wobbled her way over to the end table and grabbed a bottle of lube from the drawer. She crawled back towards me, her top miraculously still holding in her tits, but the bottom of the costume was now gone, and her wig was a little askew.\n\nShe crawled over and poured out a generous amount of lube and began rubbing it all over my cock. I gently adjusted her wig and she smiled. Usually I would ask if she was sure, but that would be a little insulting at this point.\n\nAfter she was satisfied with my cock's state of lubrication, she got on her hands and knees and wiggled her hips at me. Then she looked back at me, her face flushed.\n\n\"Please lube me up, Daddy,\" she said softly.\n",
        "I slowly pulled back on her plug, teasing her for a moment, then pulling it all the way out before she got too frustrated. Then I lubed up two of my fingers and began running them around her ass. Then I gently pushed them inside. Even though we had done this a few times, I always reminded myself to take things slow and be gentle with her, even if she did get impatient sometimes.\n\nFinally, after using a lot of lube around and in her asshole, her impatience broke through. There was only so long she could behave when she was in this kind of bratty mood.\n\n\"C'mon, Daddy. I'm ready already,\" she said, huffing.\n\nI positioned myself behind her. We'd started with her on her back the first few times, but she liked it best doggy-style. \"It's a submissive thing, Daddy. Just roll with it,\" she once told me.\n\n\"Do you remember your safe word if it gets too much?\" I asked. She huffed at me, but when she realized I wasn't doing anything else until she answered, I got a \"Yes, Daddy.\"\n\nI grabbed her hips and then slowly pushed my cock into her ass. She told me it always took a few moments to adjust that this was happening mentally; that she was being fucked in the ass. But it took less effort every time we did it.\n\nIt also helped that I always let her use a toy or her fingers on her clit. I could already feel her fingers squirming against it, taking away any initial uncomfortableness.\n\nI slowly pushed my cock slowly inside until I was buried and my hips pressed against her ass. I could hear her breathing heavily.\n\n\"Are you ok, Kitten?\" I said, doing our check-in.\n\nShe turned her face from the pillow and looked back at me. There are times she told me that I looked at her like she was a meal that I wanted to devour. That I looked hungry. Today, she was the one giving me a hungry look.\n\n\"Hard today, Daddy. I want you to fuck my ass hard and don't stop until you cum,\" she said in a quiet voice and then turned to bury her face back in the pillow.\n\nThere's that moment when you're a Daddy and you're taking care of a little girl where you know you're about to do something that will hurt her, but she wants it. If you're sincere, you want it too. So that's when I pulled back my cock from her ass and slammed it back into her. Hard. She gave a muffled squeak into the pillow and grabbed the bed with one of her hands, but didn't tell me to stop.\n\nFor the next five minutes, there was little talking between the two of us. I grunted and kept fucking her ass, my hands gripping her hips hard enough to leave marks. She squeaked and moaned into the pillow, but also rubbed her clit and pushed her hips back at me when I was moving forward. It was the hardest I had ever fucked her ass, and she loved it.\n\nFinally, I was getting close, my breathing came in gasps, and the pace I was fucking her ass got more erratic. And because she was my perfect little girl, she knew I was ready. She turned back towards me and it was the first time I'd seen her face since she told me to pound her. Kitten's face was flushed, her make-up was running, and her pink wig was askew. Her eyes were also glazed, but she managed to focus on me long enough to get out one sentence.\n\n\"Cum in me, Daddy,\" she whispered.\n\nThat did it. I slammed into three more times and then cried out as I came. I was dimly aware that she was also screaming into her pillow, cumming moments after I did. I leaned on her hips, my cock still hard in her ass, as I tried to catch my breath. I was also aware that I had sweat dripping off my face and landing on her back.\n\nEventually, my knee reminded me that whatever bliss I was enjoying it was getting angry about working so hard. I slowly collapsed onto the bed, shifting Kitten with me so we were spooning. My cock was still in her ass. From there, we slowly came back down to Earth. I knew after a fucking like that it was best to shut up for a few minutes and let her process things. All I had to do was hold her.\n\nAfter about 10 minutes I could feel her start to shift a bit in my arms, so I knew she was coming back down from the state of bliss she can hit when things get particularly intense.\n\n\"I need the bathroom, please,\" she said softly.\n\nI slid the rest of the way out of her ass and she moaned. She then rolled to the side of the bed and made her way to the bathroom. After about 10 minutes she wobbled out and flopped face-first on the bed. I made my way in, cleaned up, and then came back out and cuddled into her. She was already asleep. I set the alarm on my phone to give us a 30-minute nap and then passed out with her.\n\nWhen the alarm went, we both groaned, but recognized sleeping away our alone time was a waste. Kitten spun around in my arms and rested her head on my chest.\n\n\"This is the part where I ask if you're ok and if I hurt you,\" I said as I kissed her head.\n\n\"Well, this is the part where I tell you I might be too stupid to function most of the rest of the day because you fucked my brains out,\" she replied. She sounded spacey but ok, so I didn't press any further.\n\n\"You're a good little girl,\" I said. I could practically hear her purr as she rubbed her face against my chest.\n\n\"I like making you happy, especially when you've had a hard time. A good little girl should do everything they can to make their Daddy happy,\" she said.\n\n\"I promise I'm ok, princess,\" I said, running my hands through her hair. It wasn't a complete lie. My mother was vanishing and there was less and less of her there every time I saw her. It wasn't ok, not by a million miles. But it's not like you don't know when your parents hit their 70s that the clock is ticking for them with greater volume. I didn't want her to go, but at least I would have time with her before it happened. It wouldn't be the sudden, gut-wrenching removal from my life like Beth was.\n\nKitten moved her head so she could rest her chin on my chest and gave me her best \"you're lying to you little girl\" pouty look. It was so adorable I couldn't help but laugh, which was not the reaction she wanted.\n\n\"I've got you, Kitten. You make this better in dozens of different ways you're not even aware of. And in ways I'm sure you're aware of,\" I said, as I ran my hands gently down across her ass.\n\n\"Ok, but remember I'm keeping a close eye on you. I know when you're hurting or upset. You can't hide it from me,\" she said. This was true. Her 'Daddydar,' as she called it, was pretty accurate on my moods.\n\n\"Fair enough,\" I said. Then, trying to change the topic, \"so what's the latest from work?\"\n\nShe groaned. I then got a litany of the latest drama on the show, almost all of it behind the scenes. Who was fighting with who, which cast members were sleeping with each other, and all the intricate internal politics.\n\n\"Sounds like it would be a better show if they just filmed everything happening behind the scenes,\" I said. Kitten huffed but nodded her head.\n\n\"There's just so much drama. My coworkers told me to keep my head down and do the work. And to not make myself look too hot unless I wanted to attract attention. You can tell some of the actors are going to be having a #MeToo moment in a few years,\" she said.\n\n\"Has anyone been giving you trouble or harassing you?\" I asked. That probably sounded both over-protective and slightly jealous. And maybe I was that way, as I could only guess about the bullshit that happens on movie sets. My little girl can draw attention when she wants, and I could see the wrong kind of person noticing her and having a hard time taking no for an answer.\n\n\"Nah,\" she said. \"Some of the women in the costume department that have been around a while gave me a talk. They told me chasing after movie stars is never a good idea and not to get starstruck. I flashed my ring and said I have all the man I need. A few were skeptical, but I showed them I was serious, so they've been helping out. If anyone has been hinting around, I haven't seen it.\"\n\n\"Good,\" I said.\n\n\"What's the matter? Worried I'm going to run off with some 26-year-old guy pretending he's 16 on a teen drama?\" she said, the teasing evident in her voice.\n\n\"Just making sure my Kitten is taking care of herself as I can't always be around to protect her,\" I said, which got me an 'awww' and more cuddling.\n\n\"I still haven't decided if this is what I want to do,\" she said after a few minutes. \"I like it and it's fun, despite the weird set drama, but is it more fun than being with you or starting a family? I don't know yet. But I still have time to figure it out.\"\n\n\"Absolutely,\" I said, not knowing which choice I would prefer. I wanted her to be successful and chase her dreams, but I also had selfish thoughts of wanting her close to me all the time. Not that I would say anything.\n\nWe noticed the time and there was only so long before the rescue call would come from Meg. We both staggered out of bed.\n\n\"Come on, you have some pampering to give me so that I'm not moving like you pounded me up the ass before we go and meet the girls,\" she said heading towards the shower. That was a fair point. Besides, I liked pampering her.\n\n***\n\nThe call came an hour later that they were at a local cidery and we should join them. We hopped in the car and drove to a place about 30 minutes away. Even without Kitten and I drinking, there were still a lot of laughs. Between the sex and the company, my mood was pretty good. Around 11 pm I drove the drunks home in Meg's car while Kitten followed behind in mine. She had her licence but never used it much. She was nervous, but we all made it home safe and sound.\n\nEven on Sunday morning, when I was dealing with the walking dead, I was in a pretty good mood. I was probably enjoying some of their suffering, but I would never let them know that. You would also have to be a significant sadist to enjoy watching Soo suffer through a hangover.\n\nThe result was a pretty quiet Sunday, with everyone content to quietly lay around the house. Eventually, Kitten persuaded Soo and Gillian to go up to the pool for a swim. I knew better than to talk to Meg when she was recovering and left her alone. I briefly had the suicidal thought of pointing out that she bounced back from hangovers much quicker when she was younger, but buried that notion quickly. Not even Kitten could save me if I said that to Meg.\n\nMost of them had recovered by mid-afternoon, and after another fantastic supper by Soo, I opted to fire up the jacuzzi. I sat on one side with Kitten under my arm, with the other girls facing us.\n\n\"You don't look comfortable. Is it weird for you to wear a swimsuit here?\" Meg said. I must have been squirming or something.\n\n\"Well, I figured those two don't want to see me naked, and you've probably seen me naked enough as it is,\" I said.\n\n\"What!?\" yelled Soo, Gillian and Kitten all at the same time. I sighed.\n\n\"Not recently,\" I said. \"Like almost 30 years ago. A group of us went skinny dipping.\"\n\n\"Ohhhh,\" Kitten said. \"Did you strip off dinosaur togas like they wore in that super old Flintstones movie?\"\n\nMeg and I looked at each other, speechless.\n\n\"That is the single most horrible sentence I have ever heard,\" Meg finally managed to get out, causing Kitten to laugh even harder. \"You must be punished for that.\"\n\nAnd that's when Meg moved across the jacuzzi before Kit could react and dunked her head underwater. She only held her under for a moment. Not long enough to be scary, but long enough to get the point across.\n\nWhen she popped back above the water, and after she finished sputtering and wiping the water away from he eyes, she looked murder at Meg for a moment, then she turned her big, puppy dog eyes on me.\n\n\"Daddee,\" she whined.\n\n\"Nope,\" I said, holding up my hand. \"I love your brattiness, but you have been a bitch to Meg a lot this weekend. You had that coming. So you will apologize to her.\"\n\nShe looked like she'd prefer to drink the water in the jacuzzi, but she did turn and look at Meg.\n\n\"Sorry for being a bitch, Meg,\" she said.\n\n\"Apology accepted,\" Meg said. \"Although one more crack about my age, Kit, and you're camping out on Yonge Street when we get back.\"\n\nKitten's eyes got wide. Meg was probably joking, but Kitten opted not to push her luck.\n\n\"And the next time we have some privacy we're going to be having a....lengthy discussion about your behaviour, young lady,\" I whispered in her ear. Despite the heat from the jacuzzi, I could feel her shiver next to me.\n\n\"Yes, Daddy,\" she murmured.\n\nWhen I looked back up, I could see the other three women were dying to know what I said, but could probably guess based on Kitten's reaction. There were times when it was weird being open about our relationship in front of Meg, Soo, and Gillian. I never intended for them to know. But they were all smart women and we were not the best at hiding the nature of our relationship.\n\nBut the great thing was they didn't care. Gillian would typically be appalled by the age and power difference, but she liked me well enough, so she let it slide. Although I had no doubt my balls were in jeopardy if Kitten ever arrived on her doorstep crying over something I did.\n\nSoo found it terribly interesting and asked both of us questions about how things worked between us. But mostly she just loved how affectionate and romantic it was.\n\nMeg was just glad I wasn't suicidal anymore. Despite her recent attempt at drowning her, she liked Kitten, so that was a bonus. The nature of our relationship was just something to roll her eyes at from time to time.\n\n\"Sooooo, um, when are you two getting married anyway,\" Soo asked, awkwardly trying to break some of the weirdness in the jacuzzi. The collective groans let her know that she had managed to make it worse. \"Well, I'm sorry, but they're engaged and Kit has said nothing about when they're getting married, where or any details. And I'm dying to know!\"\n\n\"There are still a few things up in the air before we announce anything,\" I said, trying to sound diplomatic. Kitten gave me a pouty look.\n\nThe few things were: when it would happen, where it would happen, and how many people we would invite. Minor details.\n\nWe were very nearly married last Christmas. When Kitten saw how quickly mom was deteriorating she wanted to do a quick civil ceremony just to give my mom something. She almost convinced me when dad stepped in and pleaded with us not to.\n\n\"Your mom and I always took our marriage vows seriously. I know you will too, but I don't want you to rush into anything and deprive yourself of what should be one of the happiest days of your life for something your mom might not understand and won't remember,\" he said.\n\nKitten protested, but he was firm. Wait and do things the way we wanted them done.\n\nExcept, of course, we couldn't decide how we wanted them done.\n\nReluctantly, Kitten agreed to wait until after she completed school. But in her mind, that meant that we should get married the day after she finished her last exam. I thought it best to wait another few months until we knew what she was doing next.\n\nWe managed to agree that we would probably travel somewhere and get married, but we couldn't decide where. Kitten also informed me that her last birth control shot would wear off around next June by her calculations. She had every intention of fucking me silly until I got her pregnant.\n\nWe weren't fighting over it because there was still time. At least we weren't doing a huge church wedding. But there was low-level frustration with one another. Kitten was more frustrated than I was; compared to the fights Beth and I had over our wedding, this was like walking in a pleasant spring rain.\n\n\"Oh, come on, there has to be something you can tell us,\" Soo said. Even Meg and Gillian looked curious about the details. Before I could say anything, Kitten jumped in.\n\n\"Ok, well, we're....disagreeing on a few things. So maybe you can help,\" she said.\n\n\"Uh oh,\" immediately ran through my head.\n\n\"We're not doing a church wedding because we're not religious. We're thinking of going somewhere outside Canada to get married. What do you guys think?\" Kitten asked.\n\n\"Please god tell me you don't want to get married naked on a beach in the Dominican Republic,\" Meg said immediately.\n\nKitten giggled, and I immediately said no.\n\n\"Her family are originally from Scotland, so I thought maybe we would get married there,\" I said. That got some approving looks.\n\n\"Except I'm not exactly in love with my family. Plus, it will probably rain every day we're there and I'll get soaked in my wedding dress,\" Kitten fired back. That also got some sympathetic nods and murmurs of agreement.\n\nThe banter went back and forth for the next hour, with no clear consensus achieved on location. However, the girls did seem to think that a summer wedding would be best rather than one at the end of April. Kitten reluctantly agreed. So at least we had some extra space.\n\nMeg and I decided to hit the sauna while the girls were content enough to continue chattering in the jacuzzi. After settling into the heat for a few minutes, I heard Meg sigh.\n\n\"You haven't talked with her about it yet, have you?\" she said.\n\n\"Nope,\" I said.\n\n\"From a lawyer's perspective, the great thing about love and marriage is how stupid it makes people,\" she said. I could feel a full rant coming from her and there was no stopping it. I just needed to sit in the heat and hang on.\n\n\"I mean, you could always be stupid and in love, but for ages, it was only heterosexuals who could do the real damage to themselves by doing stupid things while getting married. But marriage stupidity is a growth market these days. You can be gay and stupid, or transgender and stupid, asexual and stupid....I am completely pro gender and sexual fluidity because as a divorce lawyer it opens up whole new markets of stupid people to me,\" she said.\n\n\"Meg,\" I started, but she plowed right through me.\n\n\"You are significantly more wealthy than she is. She has no clue how wealthy you are. She knows you don't worry much about money and you take care of her, but it's in the abstract. She has no idea that between your house, investments, life insurance and the settlement in the lawsuit that you are a multi-millionaire,\" she said. \"And all of this before your pension kicks in.\"\n\n\"She knows I'm well off,\" I said, knowing it was a feeble argument.\n\n\"She's going to graduate from school with a decent amount of debt. The last time I looked at your books, when you were slightly crazy, your net worth was over $3 million. I bet it's more now. There is no way she knows you have that much. She will struggle to process it. You are insane to get married without a prenup,\" she said.\n\n\"How the hell do I sit down and tell a 21-year-old that I love her madly and I want to spend the rest of my life with her and have children with her, but oh yeah, just in case, sign this piece of paper so I get to keep everything and toss your broke ass out on the street,\" I fired back.\n\nThe heat prevented her from getting close enough to smack me in the head. Instead, she looked at me with resignation.\n\n\"Do you know how much pain and suffering I've seen come through my office door over the years from people who could have avoided all of it if they had just had a simple, grown-up conversation before they said 'I do'? I mean, it was great for my billable hours; stupid always is. But I could have done with not as many billable hours and fewer miserable and angry people in the world.\n\n\"Despite that bitchy age jab this evening, she is a decent and reasonable person. Sit down with her, explain your wealth, explain why a prenup is best for both of you. I'll put you both in touch with relatively human lawyers who will walk you through it and set something up that's fair,\" she said.\n\nShe was right. Of course she was right. Meg was almost always right except when it came to her personal life, where she was almost always wrong. But yeah, not having something in place was asking for trouble.",
        "\"Fine, I'll talk to her about it,\" I said. I hoped I didn't sound like a whiny 14-year-old boy, but I suspected I was failing.\n\n\"Good. And Ben? No kidding, if I come back from my European trip and ask Kitten how the prenup stuff went and she gives me a blank look, I will smack you so hard you'll forget weeks of your life. And if you don't sign one, get married, and it all goes to shit in a few years, I'll represent her pro bono on the general principle that you were too stupid to have that much money anyway,\" she said.\n\nI laughed. I'd been on the receiving end of a few tough love speeches from Meg over the years, the last being two years ago when she pleaded with me to get my life in order before I seriously hurt myself. Compared to that one, this was a mild scolding.\n\nShe was right, though. There were too many things up in the air between Kitten and I considering the significant changes coming our way. School, work, and my mom had delayed them, but Kitten and I needed to pretend we were both adults and get a few things straightened out. It sucked, but it was better than procrastinating and having things come to an explosion.\n\nThat was the moment that Kitten popped into the sauna. She was soaking wet from the jacuzzi and the heat hit her and momentarily made her forget while she was in there. Then her normal brain functions kicked in.\n\n\"We're heading inside before we turn into prunes and grab some snacks and then maybe watch a movie. Are you guys coming in or staying here?\" she asked.\n\nI glanced at Meg, who nodded her head, indicating she was done yelling at me for the moment. I used the cane to leverage myself up and headed towards her. Meg followed behind me.\n\n\"For being a brat earlier we're going to make you watch the Flintstones,\" I said. She groaned. Meg cackled.\n\n\"I was kidding! Come on!\" she said.\n\n\"Tough luck, kiddo,\" Meg said, walking past her. Kitten shot daggers at her because she hated that name. That meant Meg did it with some frequency.\n\n\"Is it any good? I haven't seen it.\"\n\nMeg and I both laughed. I broke the bad news to her.\n\n\"It's horrible,\" I said, walking towards the house. \"You'll be begging us to make it stop.\"\n\n\"Noooo,\" Kitten whined melodramatically. \"Daddy, have mercy. Please!\"\n\nI kept walking and laughing like a super-villain. Listening to Kitten beg was always a fun thing.\n\n***\n\nAfter about 15 minutes of watching the Flintstones, and listening to the girls' pleas of mercy, we gave in and turned off the movie. It was probably just as well. I was in agony and a glance at Meg indicated that she would also like to be put out of her misery.\n\nMeg and I got some enjoyment torturing the girls with pop culture remnants of our childhood, but we drew the line at hurting ourselves in the process. The Flintstones were over the line.\n\nThe next morning there was a lot of sleeping in and grumping. Gillian and Soo didn't want to head back to Montreal and Meg was in no particular hurry to head back to her empty condo in Toronto with nothing to do. I would have invited her to stay, but she would never accept. She knew how much Kitten was looking forward to the week alone with me.\n\n\"Are you going to be ok by yourself in Toronto?\" I asked as I walked with her to the car. There were a lot of significant changes coming her way. She was a grown woman and could handle it, but I worried. She smiled and, in a rare bit of affection, took my hand.\n\n\"I'll be ok. I've got some stuff booked in Europe and a few more things I want to research. I need a few new things to wear. Plus, I have to talk to a few people about what I will do when I come back. Don't worry about me. It's a little scary, but I needed a good, hard shake. That's what this is,\" she said.\n\n\"Well, the shed is here if you need it,\" I said.\n\n\"Asshole,\" she said, then leaned in and hugged me.\n\nKitten was saying her goodbyes to Gillian and Soo. There were some tears. Gillian had graduated from school and things were serious with Soo. They all loved each other, but I suspected Kitten would need a new roommate in the fall. No way she was going to handle that well.\n\nThe girls came towards me and Soo immediately threw herself at me for a big hug, which I gladly accepted.\n\n\"Thank you so much for having us here this weekend, Ben. We love coming here,\" she said, her face still buried in my t-shirt.\n\n\"You are always welcome and I mean that sincerely.\"\n\nI then heard a snurfing noise and she pulled back and looked at me with watery eyes. It was beyond me how her parents could kick her out. And I think I will always be grateful that I could never understand doing something so heartless.\n\nGillian came up and almost looked embarrassed about Soo. While her girlfriend was all big emotions and an open book, Gillian always had that wariness around her when it came to other people. We've known each other for a year and a half. I'd bet there wasn't another man alive she liked more. That didn't mean she still wasn't sure if I would turn and hurt her at some point.\n\nMeg and I agreed we would deeply love an hour alone in a room with the man who hurt her. But whatever he did, he didn't finish the job. She was still a tremendously decent person and Soo did wonders for her.\n\n\"Thanks again, Ben. For everything,\" she said. And then, in a huge moment for her, she gave me a small hug. I didn't push my luck and just let her do her thing. I glanced over Gillian's shoulder and saw Kitten holding her hands over her mouth.\n\n\"Like I told Soo, you're always welcome when you need a break. Just let me know,\" I said. She nodded and hopped in the back seat of Meg's car with Soo, who promptly gave her girlfriend a big hug. Gillian tried to brush it off, but it was useless to try that sort of thing when Soo had her mind set on it.\n\n\"We'll see you next weekend,\" I called out to Meg, who nodded and then drove off. Kitten and I were finally alone.\n\n\"See, that weekend wasn't so bad, was it?\" She said, wrapping her arms around my waist and squeezed.\n\n\"Is there a reason you were a bitch to Meg all weekend? I'm just curious,\" I said.\n\nFor a second, I thought Kitten might blow off the question, but she could see I was aggravated a bit by her behaviour. She took a second, I guess, to get the answer right.\n\n\"You've known Meg for 30 years. She's your best friend. You love her and can tease her, but you're incapable of giving her the sharp prod to get her moving. She's been stuck in neutral since Beth died. I'm trying to get under her skin to get her moving again. I think, maybe, it finally worked,\" she said.\n\nI stopped and looked at her. She was just full of surprises.\n\n\"Wow,\" I said.\n\n\"I know. I'm brilliant, right?\" she grinned at me.\n\n\"Yes, you're a clever little girl,\" I said, trying to be a little sarcastic, but Kitten chose to view it as an affirmation that she was right and that I had acknowledged it. She uncoiled herself from me and got on her toes to kiss me.\n\n\"You should just listen to me about all the things. I am a very wise kitten,\" she said.\n\n\"I'll take it under advisement,\" I said, which made her lick her tongue out at me.\n\n\"So what's the plan for the rest of the week, my all-knowing little girl?\" I asked.\n\nShe looked like she was giving it some serious thought, putting her hand up by her chin. Then she looked at me and grinned.\n\n\"Well, I had thought that maybe you would fuck me all week long. I mean, I've been stuck on a set with sexy TV stars for weeks. You gotta keep a little girl satisfied,\" she said, backing away from me, knowing what my reaction will be.\n\n\"Oh, you'll be walking weird for your first week back on set,\" I said, making a lunge for her. She dodged me easily, giggled, and ran towards the house. In the process, she managed to take off her t-shirt and throw it back at me. Naturally, she wasn't wearing a bra.\n\n\"Well then come and get me, Daddy,\" she said and ran into the house.\n\nI strolled towards the door, pulling my shirt off. It was going to be a busy week. I was looking forward to getting it started.\n\n***\n\nIt was a busy week. Kitten had some seriously built-up energy. She told me later it had been torture being on what passed for her best behaviour all weekend when all she wanted was to be naked and fucking me constantly. For the rest of the week she made up for that lost weekend.\n\n\"I would have been perfectly ok with you naked all weekend,\" I said. It was evening and we were naked beside the jacuzzi. We tried to get into the sauna, but gave up the battle and ended up fucking on a towel on the wooden deck between the two. She spooned into me, catching her breath. I was running my fingers between her breasts.\n\n\"Sometimes there are things more important than my sex drive,\" she said. I made a little gasping noise which earned me a gentle elbow into the ribs.\n\n\"As long as I have you I'm just fine,\" I said. She purred and wiggled her ass against my cock. Given the workout she had been giving it over the last few days, it was extremely optimistic that she would get a reaction right now.\n\n\"I know you're ok with just me, but sometimes it's nice to have people around,\" she said. \"I'm a spectacular distraction, but you needed more than just that.\"\n\n\"They're pleasant and welcome distractions and it's nice to have them around,\" I said, kissing her neck. \"But you're what I need.\"\n\nShe made more pleasant humming noises and then glanced at the sauna.\n\n\"So what were you and Meg talking about in there the other day? She looked slightly more pissed off with you than usual.\"\n\nI sighed. Despite Meg's admonishment, I'd slipped back into procrastination mode on dealing with the prenup. But Kitten just provided the perfect opening.\n\n\"It was a question about our wedding. Meg is mad that I haven't talked to you about it yet,\" I said.\n\n\"Oh, that we should have a prenup?\"\n\nShe caught me so completely off-guard. I dislodged myself and rolled her around to face me.\n\n\"Did she talk to you about this already? Because if she did, me and her are going to have some words,\" I said.\n\nKitten laughed and touched my face.\n\n\"Such a silly Daddy. Of course, you should have a prenup. I'm a lot younger than you. I mean, I have no intention of marrying you and then taking you to the cleaners, but it makes sense there's something in place. Just, y'know, don't divorce me in 20 years and hook up with another 20-year-old and leave me penniless,\" she said.\n\nI love that she could still blow me right out of the water. She was my little girl, but it didn't mean she was stupid.\n\n\"I can barely handle the 20-year-old I have right now. I don't want to think about dealing with another one just like you when I'm 70,\" I said.\n\n\"Very wise.\"\n\n\"When Meg gets back I'll get her to set us up with some lawyers and we'll get things worked out. It'll all be fair, I promise,\" I said.\n\n\"Uh-huh,\" she said, sounding sleepy and resting her head on my chest.\n\n\"You don't sound too worried.\"\n\n\"Daddy, even though you are doing better at being relaxed, you still overthink things. I'm content to get the prenup because we're never going to use it. We're going to be with each other forever and have lots of kids, and then we're going to be grandparents and through all of that, we'll still be with each other and in love. So we'll throw some money at lawyers and make Meg happy, but we're never going to need it.\"\n\nMy amazing little Kitten, I thought.\n\n\"I love you,\" I said.\n\n\"Well, you better. I'm pretty awesome,\" she murmured and fell asleep.\n\n***\n\nThe thing about drama is that it rarely gives you a lot of warning. You can ignore it if you like, but at some point you're going to have to deal with it. The drama came in the form of a ping on Kitten's cell phone. We ignored it at the time because we were all tied up. Well, Kitten was at least.\n\nIt was Saturday. The next day I had to send her back to Toronto and her job. She was her usual pouty and bratty self when she knew she would have to leave me shortly. I could have yelled at her or been a strict Daddy and told her to grow up. I could have dragged her around the county to try and distract her.\n\nInstead, I opted to tie her up and punish her - much more fun.\n\nWhen the ping happened she was in one of her special outfits I bought while shopping months ago. I saw a red leather harness set and thought it would suit her. There were cuffs on her wrists, ankles, thighs, waist and around her breasts. Basically, I could restrain and truss her up anyway I liked. But her breasts, pussy and ass were all still easily accessible.\n\nWhen she first saw it her eyes lit up, but she looked a little nervous.\n\n\"It's not very little,\" she said cautiously.\n\n\"No, it's not. But if you like being restrained that'll do it. And it'll make you feel very little when you can't move and you're under my control,\" I responded.\n\nShe took the ensemble and practically skipped to the cash. There had been no chance to try it out since we bought it because life got in the way. I'd almost forgotten about it, to be honest. We had a lot of toys, lingerie and outfits for her at this point.\n\nBut after numerous incidents of her acting out before 2 pm, I knew she needed some discipline to get this under control. I walked into the bedroom, found the harness set and a more severe collar that restricted how much she could move her head. I marched out on the deck and put it all on the table.\n\nShe looked up at me with wide eyes.\n\n\"Daddy,\" she started.\n\n\"No. You don't get to be disrespectful to me like you have been all day without consequences. Put this on or I'll drive you down to Meg's condo this evening. Are we clear?\"\n\nShe nodded and I could see it looked like she wanted to cry. Instead, she stood and scooped up the outfit.\n\n\"You have 20 minutes, Kitten. After 20 minutes and one second I'll come into the bathroom. Trust me when I say you don't want what happens,\" I said.\n\n\"Yes, Daddy,\" she said in a quiet voice. She then moved with more urgency towards our bedroom.\n\nSometimes, the hard part about being a Daddy is when you have to be strict with your little girl. I didn't want to be harsh with her. Discipling her was hard because I preferred spoiling her rotten. But as she told me early in our relationship, there would be times when she would be a real bitch - or a brat - and when that happened, she counted on me to correct things.\n\nThis bad behaviour was very much her not wanting to go back to Toronto; never mind I would see her again shortly. She was emotional and acting out. I had to deal with it.\n\nWhile she was in the bathroom changing, I brought out a few other things I would need for the afternoon. I laid out a selection of paddles, some nipple clamps, vibrators, a blindfold, extra clips for the harness, and a mouth gag. I doubted I would use it all, but the sight of it and the implied threat would make her behave.\n\nI glanced at my watch. Kitten had about 30 seconds left when the door to the bathroom opened and she slowly came out. The harness looked perfect on her. It pushed up her breasts and left them exposed and I noticed her nipples were rock hard. She had the cuffs on on her wrists and ankles. Around her waist was a garter belt with straps that went down to cuffs around her upper thighs. Normally she wore heels, but this time she was barefoot. I could eat her alive right now, but I had to maintain control. Thankfully she was looking down, her hair covered her eyes so she didn't see the lust on my face.\n\nKitten had her hands cuffed together in front of her and slowly shuffled over to where I stood. She finally looked up and saw what I had laid out on the bed and I heard her gasp.\n\n\"Well, do you have anything to say about your behaviour today?\" I asked.\n\nShe mumbled something I couldn't hear. It wasn't a great start for her.\n\n\"Right,\" I said and marched up to her. I had a pair of nipple clamps in my hands. She saw them and took a step back, but I grabbed her collar and gave her a look that showed I wasn't messing around. I put them over her nipples and tightened them. She whimpered but did nothing else.\n\nI slipped my fingers into the ring on her collar and led her to the bed. She didn't resist as I methodically positioned her. There were already restraining straps looped under the bed so I took the one at the top and clipped it onto her collar. I unrestrained her hands, flipped her over onto her stomach, took her hands and clipped them onto the ankle cuffs. Not being a total bastard, I pulled out a pillow for her head.\n\nHowever, she was helpless on the bed with her ass up in the air. Kitten's head faced towards the selection of other instruments I had out. I walked over to that side of the bed and began looking at what I might get next. Her eyes got bigger when she saw me reach for the gag. That finally got her to break her reserve.\n\n\"Please, Daddy. I don't like the gag. Please,\" she said.\n\nI knew she didn't like the gag, but I put it out to show her I was serious. Instead, I reached for a moderate-level paddle. It wouldn't sting like the flogger I had out, but she would absolutely feel it and probably have some bruises. Having begged for me not to use the gag, she wouldn't ask for me not to use anything else.\n\nI got behind her and I could tell she was already wet. At least I didn't have to worry if this was too much. I couldn't resist and ran my fingers over her wet pussy. She jumped, surprised by the affection, and moaned.\n\n\"Do you remember your safe word?\" I asked quietly. She nodded. Now that I knew she was good, I resumed my role of being a strict Daddy about to punish his bratty little girl.\n\n\"Now,\" I said, taking the paddle and smacking it loudly against my left hand. It hurt but made a loud enough noise to make her jump. \"You've been an unpleasant person to be around today, Kitten. I'm disappointed that you're making me do this.\"\n\n\"I'm sorry, Daddy,\" I heard her whisper.\n\n\"You're a young lady and I shouldn't have to do this kind of thing. But I have no choice. But today, we're not going to count. Today I'm going to paddle your ass and you're going to tell me what things you did today to deserve this. I counted at least eight things. Once you tell me everything I'll stop. But If you leave anything else out, well....\" I said. It was far worse not to tell her how long this would last. I could already tell her mind was spinning, trying to think of every way she'd been bad today.\n\nThe first slap was moderate on her left cheek but made a satisfyingly loud noise. She cried out and then babbled, \"I wouldn't get out of bed when you told me to.\"\n\n\"Correct,\" I said and then slapped her right cheek.\n\n\"Oh fuck! I...I complained that I didn't want the pancakes you made for breakfast.\"\n\nSlap! \"Owwww, I wore clothes around the house today instead of being naked like you prefer.\"\n\nSlap! \"I...I whined about having to go back to Toronto tomorrow.\"\n\nSlap! \"I didn't clean up after lunch as a good little girl should.\"\n\nI could see her face was getting flushed. Her ass was already turning bright red from the paddle. I was trying not to hit the same spot over and over, but I'm sure my aim wasn't as precise as I would like with her squirming.\n\nSlap! A little harder this time. She jumped and screamed out, \"I went out onto the deck and didn't respond when you called out to me!\"\n\nNow she paused, trying to think of what else she did. She waited too long and the paddle came down on her ass again, making her scream.\n\n\"I played with my pussy while changing because I'm so horny right now!\"\n\n\"Huh. I didn't know that, Kitten. So I guess you did nine bratty things today,\" I said, swinging the paddle again.\n\n\"Daddy!\" She cried out.\n\n\"Two left, Kitten,\" I said, swinging the paddle again. She cried out and I was beginning to get worried that I might hurt her. Also, I was sure her brain wasn't working at optimal efficiency.\n\nA lighter slap this time and she just moaned. \"Do you need a hint?\"",
        "She nodded her head. I could tell she had also been crying a bit. Hurting her like this was always. She hadn't said her safe word, so she was ok. But I was giving her an out if she wanted it.\n\n\"What haven't you said to me today?\" I asked and gave her another slap.\n\n\"I didn't tell my Daddy I love him today,\" she said, making a snurfing noise. She sounded regretful about that.\n\nAnother slap. \"And what else have you not done for your Daddy,\" I said, quieter this time. I knew she was remorseful so there was no sense in being cruel. I was about to give her another slap when I could see the light go off in her eyes.\n\n\"I haven't hugged or kissed you today. I'm so sorry, Daddy,\" she said.\n\n\"No, you haven't. So are you going to be a good girl from now on? Because next time you misbehave like this I'm not going to be so gentle,\" I said, emphasizing the point with one final paddle to her ass.\n\n\"Yes, Daddy!\" She cried out.\n\nI put the paddle back on the bed, relieved not to have to use it anymore. Causing Kitten pain was always a complex thing for me. Yes, she liked some pain. We talked about it a lot. She's not sure why she got off on it, but being punished by her Daddy for misbehaving was something that got her wet. But I was hyper-aware of when we played like this to give her what she needed without harming her.\n\nI reached between her legs and ran my fingers across her drenched pussy. She jumped and moaned at my touch.\n\n\"Please, Daddy,\" she whispered.\n\n\"What's the matter, Kitten?\" I asked, stroking her hair. \"Did I hurt you?\"\n\n\"Can I cum? Please, I need to cum. I'm aching because I've been a bad little girl and can't cum unless you tell me it's ok.\"\n\nI grinned. Not so badly hurt after all. Good. I freed her wrist cuffs from her leg cuffs and unclipped her from the top of the bed. I repositioned her so that her head was just off the edge of the bed, her red hair hanging over the edge. I then cuffed her wrists to the thigh restraints.\n\nI was still fully clothed, which was ridiculous and I quickly got rid of what I was wearing. Kitten was squirming anxiously on the bed, unable to touch herself. I had another surprise for her. I picked up a silicone egg and ran it across her pussy, quickly getting it wet while she squirmed. Given the paddling I just gave her, she was trying not to complain. Once it was wet enough I pushed it inside. She groaned.\n\nBefore she could complain, I stood in front of her, my cock lined up perfectly with her mouth. Taking the hint, she quickly flicked her tongue out, licking the underside of my cock, trying to lure me closer. After a few moments, I took a step closer to the bed and her mouth shot forward. My cock was immediately buried into her throat.\n\nNow it was my turn to groan. Kitten has been able to deepthroat me for ages, but this angle was otherworldly. I slowly moved my cock back and forth, fucking her mouth and she hummed in delight. I reached down and began pulling on the nipple clamps which produced a muffled scream. She began shimming back and forth, trying to pull back from my cock. I took a step back and my cock popped out of her mouth.\n\n\"Please, Daddy. Please, I need to cum. Please!\"\n\n\"Well, I have just the thing for that, Kitten,\" I said. I reached over to the nightstand and grabbed my phone. She looked at me apprehensively. I'd taken many photos of her, some of them risqu\u00e9, but never anything pornographic. She wasn't comfortable being nude in pictures, and I suspect an ex-boyfriend was responsible for that.\n\n\"No pictures, Kitten,\" I said, reassuring her. Then I opened the app I needed. \"I think you'll find this much better.\"\n\nShe was going to ask a question when I swiped my fingers across the app and the vibrating egg in her pussy burst into life.\n\n\"Oh fuck!\" She screamed. Then I took my cock and slid it back into her mouth. And for the next few minutes, I fucked her mouth while playing with the vibrating setting on the app, going from gentle to powerful and everywhere in-between.\n\nI could tell that she would also break the restraints pretty soon if I didn't let her cum. I pulled back out of her mouth and she immediately began begging.\n\n\"Please, Daddy, I'll be your best little girl forever! You can do whatever you want to me, please; I'll be your bad little slut if you want, but please let me cum!\"\n\n\"Cum for me, Kitten,\" I said, and swiped my finger on the app to the vibration on their highest level.\n\n\"Oh fuck!\" She screamed and then began thrashing around on the bed. I'd considered keeping my cock buried in her throat when I let her cum, but I wasn't sure if she would accidentally bite it off in the middle of her orgasm.\n\nThe next minute or so I let her thrash around on the bed, keeping the setting on high until she began to groan and cry.\n\n\"P-please, Daddy. Too much, can't stop cumming. Please!\" She cried out. I lowered the vibration setting and then moved her head so it no longer dangled off the bed. She lay there for a few minutes and I removed her nipple clamps as gently as I could, although she still cried out when that happened. I kept stroking her hair and after about 10 minutes she looked at me with dazed eyes.\n\n\"You destroyed a bunch of brain cells just then,\" she said.\n\n\"Sorry?\"\n\n\"Nun-huh. Who needs brains when I've got my Daddy to take care of me,\" she said. She then moved her hips which did something with the egg which caused her to gasp.\n\n\"I need the egg out and replaced with something harder and better now though,\" she said.\n\nI was rock hard, so that request was exactly what I needed to hear. I unclipped her again, pulled out the egg, and prepared to start fucking her when she shook her head.\n\n\"No, I was still a bad girl. You should keep me restrained,\" she said, breathing heavily.\n\nI moved quickly. I took her hands and clipped to the restraint at the top of the bed. Then I took her thigh cuffs and clipped them to a ring alongside her breasts. Her legs were wide open and up in the air. She looked amazing. And helpless. She knew it.\n\n\"Please be gentle with me, Daddy,\" she said, not meaning a word of it.\n\nI got between her legs, briefly appreciated how astonishingly erotic she looked, and then slammed my cock into her.\n\n\"Yessssss!\" she cried out.\n\nGod, she was soaking. Kitten never had a problem getting wet, but this was epic even for her. But it was all amazing. From me being annoyed with her bratty behaviour just a couple of hours ago to having her bound, helpless and wet beneath me was incredible. If I was thinking about it.\n\nBut thinking wasn't much on the agenda. I planted my hands beside her head and began fucking her hard.\n\n\"You're all mine now, Kitten,\" I growled into her ear.\n\n\"Oh I'm sorry, Daddy! I was a bad girl, but now I'm helpless. You can do whatever you want to me,\" she said. \"I can't stop you.\"\n\nThen caused me to slam my cock into her a little harder, making her cry out again, but certainly not in pain. I bent down and bit her neck, which caused her to gasp. She loved it, but she'd be pissed at me later when she realized she'd have to wear a scarf at work next week.\n\nThis went on for a few minutes, with my cock sliding back and forth into her pussy, the two of us grunting and talking filth to one another. I could tell from the flush on her face she didn't have much time left and while I could prolong things, my cock was beginning to feel a little too good as well.\n\nThat's when Kitten's phone made a weird noise.\n\nUsually Kitten's phone made all kinds of weird noises; she had it set up to make different sounds depending on who was texting her. But I'd never heard this noise before...a kind of witchy cackling noise. I momentarily glanced over at her side of the bed where her phone was. She looked over, with a shocked look on her face.\n\nI had the brief thought of asking her what that was about. It would have been stupid given the circumstances. Fortunately, Kitten refocused my attention.\n\n\"Oh please don't breed me, Daddy. I know I've been a bratty little whore, but please don't fill me with your cum and knock me up,\" she moaned. And then, as much as she was able, she arched her back and pulsed her pussy around my cock.\n\nThat got my attention.\n\n\"Your Daddy's going to do whatever he wants to you, Kitten,\" I growled at her. I resumed pounding her pussy while she pleaded with me not to get her pregnant. I was enjoying every second I was in my Kitten's pussy. It kept feeling better and better and then the point of no return crashed down on both of us.\n\n\"Fuck!\" I cried out, burying myself in her and cumming.\n\n\"Oh Daddy!\" Kitten replied almost immediately and began thrashing around as much as she was able.\n\nI was dimly aware she stopped breathing for a few seconds as her orgasm crashed through her body. My brain ceased functioning for a solid 20 seconds, with my arms eventually giving out and I collapsed down on her.\n\nWe stayed like that for a couple of minutes until I could feel Kitten starting to twist a bit and I realized she was probably uncomfortable. I lifted myself and she smiled with that post-orgasmic glaze in her eyes. I undid the clips holding her hands above her head and then the ones on her thighs. She quickly wrapped her arms and legs around me, pinning me to her and making sure I couldn't leave.\n\n\"Can you breathe?\" I asked.\n\n\"Mmmmm, breathing is overrated,\" she said. But eventually, I rolled over onto my side, although she clung to me, ensuring I wasn't going too far.\n\nWe laid like that for 20 minutes. We were just enjoying each other. It would probably be the last time we'd fuck for a week or two, so at least it was something epic. I could feel her gently purring next to me, and she was probably about to drift off when I remembered the weird noise her phone made.\n\nI should have known better at this point in our relationship, but the words came out anyway.\n\n\"What was up with the cackling on your phone earlier?\"\n\nShe immediately tensed up, sighed, and rolled away from me. She reached over and grabbed her phone, did a few swipes with her fingers, and then read something. She made a face.\n\n\"Is everything ok? Is there a problem with work?\"\n\nShe sighed again and looked at me. It was odd and I couldn't quite figure it out.\n\n\"My mother has finally reached out. She wants us to go to Saskatchewan so she can meet you,\" she said, with a voice that sounded like she just found out her death row appeal was denied.\n\nI tried to process that but my brain wasn't at 100% yet.\n\n\"Well, that's something,\" was what I eventually came up with. Kitten was even more succinct.\n\n\"Fuck.\""
    ],
    "authorname": "thanagar",
    "tags": [
        "older man",
        "younger woman",
        "ddlg",
        "romance",
        "daddy",
        "anal sex",
        "spanking",
        "anal"
    ],
    "category": "Mature",
    "url": "https://www.literotica.com/s/little-packages-ch-09"
}
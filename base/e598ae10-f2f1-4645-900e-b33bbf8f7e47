{
    "title": "I Hadn't Expected That!",
    "pages": [
        "\nCopyright\u00a9 2010 by Denham Forrest, the Wanderer\n\nI thank my little team of helpers, Sue, Angel and PapaGus for their assistance in preparing this short tale for posting.\n\nThis one should be read with a certain amount of scepticism when it comes to exactly what the narrator is telling you. But generally I'd suggest that that same scepticism would be advised when reading most of my stories. Very rarely will anybody relate a story in a manner that doesn't put themselves in the best possible light.\n\nClarification: - Tea-leaf, a thief. Usually of the sly sneak-thief kind, rather than a blatant robber or crook.\n\n\n\n\n\nI Hadn't Expected That!\n\n\n\nLook, I've fired off my shotgun more times than most folks have had hot dinners. But I really hadn't expected how loud it would sound in the enclosed environment of our bungalow's lounge.\n\nMaybe it was because the noise gave me such a shock that I let off the other barrel a moment or two later. Mind you, it could have been the shower of plasterboard and loft insulation that, besides taking me by surprise, had all but completely blinded me for an instant.\n\nA point to remember, folks! If you are going to fire your shotgun inside the house, then don't point the bugger at the ceiling directly above your own head. You really will not believe how much of a mess powered plasterboard and shredded loft insulation can make of your clothing as it comes down all around you.\n\nSecondly, I discovered that it's advisable to only fire off only the one barrel. Plasterboard and loft insulation are designed to be non-combustible. But I completely failed to take into account the fact that we had more than a few boxes of assorted detritus stored up in the loft space. You know, old receipts and papers that the tax people like you to hang onto for-bloody-ever and general shit like that.\n\nThe first blast must have made a good job of shredding one of those boxes and its contents. The second -- at such close range -- had apparently set some of the shredded papers alight.\n\nI'm told that most of the roof was burnt off the building before the fire brigade could put the blaze out.\n\nI was still kinda trying to see -- through the dust and shit -- how much damage I'd done, and reload my shotgun at the same time, when I spotted the fire. That fire was something I really hadn't expected.\n\nSo -- as the dust cleared a little -- there I was, wondering what I should do about the flames, when suddenly a movement out front of the house caught my eye. On closer inspection I noted two all-but butt young naked men rush past the lounge window. I really hadn't expected that, either!\n\nPutting the shotgun down on the sofa -- I didn't want to give anyone the idea I was physically threatening anybody with the thing -- I sauntered over to the window -- as you would -- to see what in heaven's name was going on outside.\n\nThen I watched as the two men, dressed only in their underpants, leapt into the two strange vehicles that had been parked on my house driveway, and hastily \"tried\" to drive them away.\n\nI thought it somewhat odd that the two guys had had the foresight to keep their car keys handy. After all, their clothes were liberally scattered on the floor between my lounge and the bedroom area at the rear of the bungalow.\n\nOops, forget I said that! That was one piece of information that I didn't pass on to the court.\n\nUnfortunately for them, legging it to their respective vehicles had been a manoeuvre that I had kind of anticipated a little, and one I'd taken precautions against them successfully carrying out.\n\nMaybe it was their haste to depart the premises that prevented them spotting the length of chain that snaked its way from the nearside front suspension of one vehicle, to the offside front suspension of the other. That showed a distinct lack of observational aptitude on both guy's part, in my opinion.\n\nBoth cars rather noisily -- as those poseur type vehicles usually are -- began to move forward. One, apparently with the intention of turning to the right, the other obviously to the left.\n\nThen there was the very loud sound of three-quarter inch anchor chain tearing it's way through metal, added to the noise of the vehicles screeching tyres. As both vehicles proceeded directly across the street -- albeit bouncing off each other as the chain progressively wrapped itself around the car's front wheels or entangled itself further in the vehicles front suspension. Whatever it did, it brought them together with an almighty crashing sound.\n\nThey'd picked up a remarkable rate of speed before ploughing through the neighbour opposite's neat front garden, and rather efficiently demolishing his garage.\n\nI was somewhat pleased that I didn't have to explain to my neighbour how the deed had come about.\n\nAfter I saw the garage collapse, I really can't tell you much of what else happened, because I'd suddenly become aware of a kind of muffled bang and everything went black.\n\n-----------------------------------------------------------------\n\nAll right, I'll start at the beginning and explain it all as best I can. Well, as good as I could to the judge and jury anyway; with just a couple of exceptions.\n\nLook, I was unconscious for over a week after that day, so I have to be given a little leeway as far as my memory of the events is concerned.\n\nThat weekend I had planned to join my brother Brian for a couple of days sailing and fishing off the south coast on his little yacht. I'd set off directly from work right after knock-off time to drive down there.\n\nI suppose I was probably three-quarters of the way through my journey when Brian called me on my mobile phone to inform me that he'd eaten something that must have been a little off. Brian didn't think that a couple of days on the yacht with bad attack of Delhi-belly was really a good idea, and I had to agree with him.\n\nAs a matter of fact I couldn't believe how fortuitous Brian's attack of the screaming sh ... the runs was. For weeks my wife Shirley had been harping on at me to paint the hall at home. She'd even got as far as talking me into buying the paint the previous weekend. But I hate decorating when Shirley's around the house. God, the woman never did get the idea that the whole house can't be spotlessly clean, whilst you are actually decorating part of it.\n\nNow, because I was going to be away for a couple of days, Shirley had arranged to go off to stay at her sister's place, rather than spending the weekend alone in the bungalow. Doubly fortuitous for me, because I couldn't stand the stuck-up bitch, or her insufferable Bible-punching husband either.\n\nShirley going up there on her own for a couple of days, meant one less occasion that I'd have to put up with the buggers.\n\nNo, I could nip back home and get the bloody hall painted in peace, and make as much mess as I liked while doing so.\n\nSo, after Brian had called me, I spun the car around with a smile on my face and headed back home post haste; thinking how pleased Shirley would be when she arrived home on Sunday evening to find the hall all freshly painted.\n\nIt was quite late when I made it back to the house, and I was somewhat taken aback to find that two strange cars had been reversed into my driveway.\n\nYou know, the first thought that crossed my mind was that we had burglars.\n\nAfter all, the two cars were a Mitsubishi Evo VIII and a Subaru Impreza, two of the quickest production cars available. And, I was well aware from all those TV police chase programs, the getaway vehicles' of choice for young criminals.\n\nOnly the week before, there'd been a program on where sneak thieves had entered a house to get their hands on the ignition keys of an Evo VIII, because the cars are virtually impossible steal any other way.\n\nI kind of pictured the scene inside the house in my mind. The cars had been reversed almost up to the door of our integral garage. I could almost see the crooks quietly ransacking the house in the dark, and stacking all of Shirley and my valuables behind the garage door. Then, when they were ready, they'd open the door and throw everything into the back of the two vehicles before making their high-speed getaway.\n\nI'd actually hit the first two nines on my mobile phone, when another thought crept into my mind. \"Had I got it wrong?\"\n\nWhat if Shirley's sister and her old man had come down to see her, instead of Shirley going up there. After all, I'd headed off to my brothers place directly from work; there could have been a change of plan that I didn't know about.\n\nPerhaps they'd come down to visit Shirley instead! I'd look like a complete bloody banana if I called the cops on my own Mrs and her family, wouldn't I? And, bloody poseurs they were, I wouldn't at all be surprised if Mr and Mrs \"Shit don't stink\" didn't drive an Evo and an Impreza. It would be just like them to bring both vehicles along, just to bloody-well show them off to Shirley and the neighbours. I could picture them standing outside my house, polishing the cars whilst secretly smirking to themselves.\n\nBugger, they'd probably planned to hang around until I got home on Sunday night just to rub my nose in it, as well.\n\nFor a few minutes I sat there, wondering what to do for the best.\n\nWhy calling Shirley on the telephone never came into my head and asking her where she was, I just can't tell you.\n\nLook, as I explained, I was out of it for well over a week after that evening. I can't be a hundred-percent sure about what I was thinking, or of exactly what, or why I did anything.\n\nAnyway, the idea of blocking both vehicles in the drive with my own car was out of the question. Thieves would not think twice about bulldozing my car out of the way, or driving over my nice manicured lawn either.\n\nThen I remembered the anchor chain. On our last trip out on his boat the year before, Brian and I had anchored near a wreck, to do some fishing. Unfortunately the anchor had got hung on the wreck, or maybe on some rocks on the seabed and we'd eventually been forced to abandon it.\n\nI'd bought Brian a replacement anchor and twenty metres of chain as a Christmas present to replace the lost items. And guess what, the chain and anchor were in the back of my estate car. Sending it down to him would have been far too expensive, the obvious thing to do had been to take it along with me on our first outing that year.\n\nI kind of figured I'd chain the two cars together. That way, if they were thieves in the house, they wouldn't be able to drive away, would they? Actually I figured they'd see the chain, guess the implications, and leg it on foot.\n\nIf it was Shirley's sister and her husband in the house, then I'd quietly slip out later in the night and remove the chain without anyone realising what a clown I'd been.\n\nGood plan, what? Well, I thought it was!\n\nAnyway I wrapped the chain around both cars front suspension and secured it in place with shackles, leaving plenty of loose chain clearly visible between the vehicles, just in case!\n\nHey, technically the chain was acting as a wheel clamp and the cars were parked on my land. Wheel clamps are legal in the UK, so I kind of figured what I was doing was legit.\n\nOnce I was happy with my wheel clamping, I quietly entered the bungalow by the front door. The lounge and hall were in darkness, so I figure that way in was my best bet.\n\nStraight away I knew something was definitely amiss; some rather odd noises were emanating from the bedroom area at the rear of the bungalow.\n\nThey were the type of noises that made me want to dash in there to see what the hell was going on. Christ, from the sound of it some poor woman could have been in the process of being raped back there.\n\nBut there were two cars parked out front, and that inferred that there had to be at least two drivers back there. Which in turn would suggest that I'd get all kinds of shit kicked out of me if I went barging in there like a bull in a bloody china shop.\n\nAfter a little thought, and as quietly as I could, I'd unlocked the cupboard in our hallway where I stored my shotgun and shoved a couple of rounds into the breach.\n\nHey, look, I had no intention of shooting, or even pointing the thing at anyone.\n\nThe English legal system seems to have forgotten the old adage \"An Englishman's home is his Castle\". Nowadays they will pat the thief on the back, and hang the householder who dares to try to protect his property, belongings or loved ones.\n\nMind you, you can't really blame the buggers for thinking that way! Well just think about it, most of those legal wallies are intrinsically greedy. So if the average tea leaf thought that he might possibly get his head blown off if he entered your home to rob you. Then he might be less inclined to do so. Less crime means less money for those overpaid arseholes in the legal system don't it? Only don't expect any of those buggers to admit that.\n\nOh, by the way, I didn't enlighten the Judge and jury to my train of thought on that subject either!\n\nActually, I had it figured that a shot into the ceiling in lounge would scare the arse off any burglars -- or rapists -- and they'd leg it out one of the back windows a bit sharpish. Providing that I never confronted the buggers with the gun, then no one could claim that I'd ever threatened them with it, could they? Well I believe that was the way my mind was working at the time.\n\nJust to make sure that everyone knew where I'd fired the gun and who'd been in the room at the time, I found my video camera, turned it on and placed on the sideboard pointing at where I intended to stand when I fired. I got some really great film of me getting covered in plaster dust and loft insulation.\n\nWell that's about it. I told you that I woke up in hospital to discover that someone, later to be identified as my wife Shirley, had struck me on the back of the head with my own shotgun.\n\nUnfortunately for Shirley and her sister, the gun had gone off as she did so, wounding her own sister in the leg. The sister hadn't taken kindly to that!\n\nThat video camera also got film of a very naked Shirley (and her sister who was also naked) rushing into the lounge. Shirley was clearly visible picking up the shotgun by the barrel and bringing it down on the back of my head.\n\nUnfortunately for her (and her sister), as Shirley swung the shotgun through the air the breach chamber snapped closed.\n\nI really can't explain how one or both the hammers got pulled back, but as the gun connected with my skull one of them struck home on a cartridge. Net result: Shirley's sister took the full force of the round in her left leg. Apparently, causing her serious injury and not endearing her to her sister! Hey man, the coppers didn't show all of the video in court, I think they only meant to show the jury who had struck me.\n\nShirley was charged with ABH (Actual Bodily Harm) on me, and her sister.\n\nI was charged with ... Well, would you believe, arson and vandalism, for blasting a hole in the ceiling and setting the house on fire!\n\nThere was a suggestion of threatening behaviour, but I'd never physically pointed the gun at anyone, or even called out any threats. Christ, I'd made sure that I was completely alone in the room. Whatever, all charges against me were kicked out once we got before a sympathetic judge and jury.\n\nShirley didn't fare so well. She'd been of sound mind, if not a little surprised, when she'd discovered that I was in our lounge that evening.\n\nI have no idea why she decided to clout me over the head with the butt of my own shotgun. Perhaps she was upset that I'd unintentionally set the house on fire. Or maybe it had something to do with the fact that both she and her sister wouldn't have to explain why they were both butt naked to me. Anyway, eventually she got a twelve-month sentence; suspended for two years.\n\nThe divorce went quite smoothly, all things considered. Although there was no real division of assets because the insurance company wouldn't pay out on the house that they claimed I'd purposely set alight in the first place. Consequently there was no equity in the bugger to share out, and the mortgage company kind of cleared out our joint bank account as well to pay for the repairs.\n\nKind of fortuitous, that I'd quietly moved plenty of the readies into my brother's bank accounts in the preceding months, wasn't it?\n\nAnyway that's it, except to mention that Shirley's sister's husband, divorced her as well. I have no idea on what grounds; I weren't really that interested.\n\nLife goes on.\n\nThis tale is posted on this site with the authors permission."
    ],
    "authorname": "Denham_Forrest",
    "tags": [
        "cheating wife",
        "shotgun"
    ],
    "category": "Humor & Satire",
    "url": "https://www.literotica.com/s/i-hadnt-expected-that"
}
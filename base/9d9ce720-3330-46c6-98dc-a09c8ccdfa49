{
    "title": "Been Waiting for Love Ch. 06",
    "pages": [
        "The next day Scott went to go see Dominique; it wasn't hard to get away from Katrina. She went to work that day after he made her tell him over and over again that night that she loved him every time he felt her ready to cum. There wasn't anything sweeter than hearing those words from her mouth. He knew he felt the same way and he wanted to wait till the right time to tell her. Right now, he had more important things to work out. \n\nHe sat in the waiting room, going through the same magazine for what seem like the millionth time. He was actually waiting to see a therapist, something he told himself he wasn't going to do again. Then again, he told himself that he wouldn't screw with Katrina and look where that promise had gotten him. He was contemplating leaving when he saw her door open and she came out with another man who was just nodding his head. \n\n\"I'm telling you Mr. Jones, you will feel so much better afterwards. I'll see you when I come back from my vacation.\" Dominique smiled at the man.\n\n\"Alright, well I'll be in touch.\" he nodded towards her.\n\nScott waited till the guy left before he followed Dominique into her office, \"Nice to see you still came. You can just have a seat on the couch.\" she said going behind her desk.\n\nScott sat on the couch and looked around her office. There weren't a lot of things hanging from the wall. It was mainly her degree and a couple of pictures of the girls. On her desk, he could see a picture of Dominique hugging some Asian guy. He wondered if that was her boyfriend, Katrina never said that she was dating anyone. He was kind of stunned to not see any pictures of her family. \n\n\"Sorry about that, how can I help you?\" she said sitting in front of him in her plush chair. \n\nHe clasped his hands together realizing how sweaty they were becoming, \"I don't exactly know where to start.\"\n\n\"Start with why you thought you needed to see me.\"\n\n\"Well, I came to see you because I need to change the relationship with me and Katrina. Did she tell you anything about me?\"\n\n\"Just the usual stuff girls talk about, but this is about you.\" she said sitting there motionless, but waiting patiently for him.\n\n\"I have this problem with my body. Um, as you know I'm in the Marines and years ago something happened that left me, in my opinion, disfigured. I was whipped and repeatedly cut on my chest and back. They healed, but a lot of them left scars and wounds. I can't bring myself to take off all my clothes for anyone, even Katrina.\"\n\nShe nodded, \"I'm sorry to hear about what happened to you. I have counseled some soldiers that came back from Iraq. You've been dealing with this for years, so why have you come asking for help now.\"\n\n\"Because I have feeling that if I don't get over this, I'm going to lose Katrina, but I'm scared that if I do show her, I'll lose her too.\"\n\n\"Why would you think that?\" \n\n\"When my ex-girlfriend saw my chest, she wouldn't even look at me the same way and she end up cheating on me. I had a female doctor that flirted with me for years in Washington, but when she saw the cuts and bruises and it stopped.\" he stood up and started to pace the room, \"I don't want to see anyone look at me like I'm defenseless or with pity.\"\n\n\"Of course not, no one would like that, but there has to be another problem lying under that.\"\n\nHis face wrinkled with confusion, \"Why do you say that? I told you what the problem was.\"\n\n\"Scott, I understand what happened to you and how that may affect you, but you showed your body before to other women and they prove they couldn't handle it. You got that in your mind that no woman would be able to handle what happened to you or handle your job with the Marines.\"\n\n\"I know a lot of women wouldn't.\"\n\n\"You know Katrina isn't that type of girl. She grew up with you and she knows you, she can handle it.\"\n\n\"I don't know. I mean she is strong and determined, I know you see that. She has been great for me since we got together.\" she smiled briefly, \"My parents know about us and they said this is the first time that I have actually acknowledged a girl as my girlfriend.\"\n\n\"Katrina is actually your first girlfriend? What about the girl back in D.C.?\"\n\n\"I called her my girlfriend around her just to make her feel better, but I just didn't feel that way about her.\"\n\n\"It was possible you knew she wasn't the one for you.\"\n\n\"That's for sure.\" he said leaning against the wall and then something clicked in his head.\n\nThere never was any woman that he felt close to, except for Katrina, he knew she was strong enough to handle whatever came her way and that scared him. He ran his hand down his face as he thought more about what he was piecing together.\n\n\"Maybe I'm more screwed up than I thought.\"\n\n\"Why do you say that?\"\n\nHe hurried to the chair to sit in front of her, \"This is just a thought, but, could I be using this as an excuse because I'm scared that I have actually found the one?\"\n\n\"You think Katrina is who you are supposed to be with?\"\n\n\"I mean it makes sense. Any other woman I wouldn't even care if she likes me or not, but Katrina is not like that. I know she will be okay with seeing the bruises.\"\n\n\"Okay speaking from someone who does know Katrina, she has been thinking about you for years and she wants to be with you. You have to decide whether or not you are ready for that, because she is. I believe you know that this isn't someone that will fall for you charms and sweet talk. You are on to something thought.\"\n\n\"So, I'm not as screwed up as I thought.\"\n\nShe smiled, \"No honey, you're just being a man.\"\n\nThey talked for a little while longer and Scott felt a little better about what he already planned to do. In fact he couldn't understand why he took so long to come about this decision. He was driving around when something caught his eye. \n\nIt was a house, but not just any house, it was THE house. It was red brick on the outside with a garage and big trees in the yard. It was a two story with a small deck on the second floor. He leaned against the car looking at it when an older woman came out smiling; obviously she was trying to get a sale. \n\n\"Good afternoon sir, I'm Maria Turner and your name?\"\n\n\"Scott Porter, nice to meet you.\" he said taking her extended hand.\n\n\"I see you looking at one of my favorite houses.\"\n\n\"It's beautiful. I was actually in the market for a house.\" \n\n\"Well, why don't you come in and I can show you the inside? I have some extra time if you would like.\" she hinted with a smile. \n\nScott figured she was desperate for a sale, so he went ahead and played along. She showed him the huge backyard, Scott instantly thought of all the things he could do with a backyard like this. He could get that huge grill that he wanted and have the boys out here kicking it. \n\n\"This is nice Mrs. Turner.\" he said following her inside.\n\n\"I know, my husband and I saw this house and we thought about it but we decided that we are happy where we are. I love the fireplace.\" she said pointing towards the fireplace facing the living room. Scott nodded as he walked around the living room. This place was slowly growing on him. \n\n\"How many bedrooms?\" he asked.\n\n\"Three, the master bedroom has a master bathroom with a big bathtub. Let me show you the kitchen which is something else I love.\"\n\n\"You really like this house?\" he asked.\n\n\"I do. It's a perfect family house. I'm sure you and your wife would love to live here.\" she said as she showed him the spacious kitchen. \n\n\"Oh, I'm not married, but this is really nice.\" he said walking around taking in the kitchen. \n\nIt was beautiful, the appliances were new and he knew that Katrina would love the marble floor and cabinets. He stopped in the middle of his thoughts as he came to a realization. He thought of Katrina while he was looking for a potential house for himself. Wow, this is more serious than I believe, he thought to himself. \n\n\"Well, I'm pretty sure that whoever you marry will love this house. If you are single, I may have someone for you that would love a man like you.\"\n\n\"I'm sure she will, but I am taken.\" he said with a smile, \"Can you show me upstairs, please?\"\n\n\"No problem.\" she smiled back. \n\nScott drove back to Katrina's with a clear head, for the first moment in a long time. He walked in to see Katrina on her hands and knees. She was on the floor searching under the couch in a red dress that barely covered her ass. He sneaked over towards her and smacked her hard on the ass. \n\nShe let out a loud cry and stood to full height. He started to laugh at her bewildered expression. \n\n\"You ass.\" she said punching his shoulder as he laughed.\n\n\"I couldn't help, you know I can't keep my hands off your ass.\" he said pulling her close to him and kissed her, \"What are you doing?\"\n\n\"I'm looking for my shoes. I'm running late for Kendra's party and I need to pick up the food before I go to the house.\"\n\n\"What kind of party is this?\" he asked as she went back to look for her shoes.\n\n\"You know the girl party where we sit around, talk, and give out gifts. Things like that.\" \n\n\"Are you going to the bachelorette party?\" he called out.\n\n\"It's just a party babe.\" she came back to him holding her shoes in her hand.\n\n\"Are there going to be strippers?\"\n\n\"I don't know.\" she said innocently putting on her shoes.\n\n\"Oh, you don't know but you planned the whole thing.\" he crossed his hands in front of him.\n\nShe sighed and went over to him, placing her hand on his arms, \"Are you going to have strippers at my brother's party.\"\n\n\"I didn't ask you that.\"\n\n\"But you just answered my question.\" she laughed walking away from him, \"Trust me, you have nothing to worry about and you know it.\"\n\n\"Look, I have something to talk to you about when you get back baby.\"\n\n\"Really? Should I stay? Is it important?\" she turned to look at him with concern etching her face. \n\n\"No Kitty Kat, go to the party and have fun. \n\nThen you come home to me and I will deal with you later.\" he said moving towards her and wrapping his arms around her warm body.\n\n\"Deal with me? You make it sound like a punishment.\"\n\n\"Oh believe it's everything but.\" he smiled slyly and leaned down to kiss her. \n\nShe melted against him as he angled her head. He deepened the kiss as he ran his fingers through her hair. He felt his need build for her and was scorched by the kiss. He knew he had to stop before he was tempted to strip her down. He pulled away looking down at her. Her eyes were still closed and her lips were swollen from the kiss. \n\n\"Baby, you better straighten up or you will be really late for this party.\" he whispered and she opened her eyes.\n\n\"Alright and I do have to go. I'll see you later. Please don't have my brother try to send a spy to the party or start calling Kendra all through the party.\" she said with a smile and he couldn't help but laugh.\n\n\"I'll see what I can do.\"\n\n\"Okay, I love you.\" she said briefly kissing him before she headed towards the door.\n\nHmm, she didn't even wait for him to say it back, he thought to himself. He still had plenty of time for that. He was just going to have the guys over to play some cards. It should be awhile before she gets back. \n\nAn hour later, Scott had Ricky, James, and Nikolas over at the house playing cards and drinking. Scott was moving between the card table and the kitchen, cooking some burgers.\n\n\"So James, I have to ask you man, what did you say to Dante?\" Ricky asked.\n\nOne corner of his mouth turned up as he glanced at the cards, \"I didn't tell him much, just the usual.\" James replied.\n\n\"The usual my ass. I swear that man almost pissed himself.\" Ricky laughed, \"You must like little Jade.\"\n\n\"No, I still think she is overdramatic, but I hate to see a woman being disrespected like that in public.\"\n\n\"I hate to see her go through that with that man. I keep telling her she needs a good man in her life, but for some reason she wants to settle with him.\" Ricky said, \"I know that. She is fine too though.\" \n\n\"This is coming from the man getting married.\" Scott pointed out and they started to laugh.\n\n\"What? I can admit it. All my sister's friends are fine, especially my future wife.\"\n\n\"That's true, but hey your sister is fine too.\" Nikolas said.\n\n\"Nik, don't make me kill you. I actually like you.\" Ricky warned.\n\n\"I'm just saying you can't stop a man from thinking what he wants to think about. She certainly isn't a little girl anymore and believe it or not some guy is going to sweep her off her feet.\" Nikolas said and James glanced over at Scott who was leaning against the cabinet. \n\n\"I think she's got a boyfriend now, but she's not telling me.\"\n\n\"Why do you say that?\" Scott said joining them at the table.\n\n\"You know that dreamy look that girls get when they are staring into space with that goofy smile?\" they nodded, \"I've seen her look like that. Not only that, but she told me that she needed some stuff fixed around here and now when I make my way over here, she say it's already fixed.\"\n\n\"Yea, I'm here and I fixed it.\" Scott said.\n\n\"You? You fixed it?\" Ricky said, looking over at Scott.\n\nScott knew that intense look on Ricky's face. It was his challenging look when he was deciphering what the hell was going. So, Scott did the one thing he knew would draw Ricky's attention away from what he was thinking. He challenged him back with that same look. It was so quiet that you could hear a pin drop. James and Nikolas looked between the two wondering who was going to give first. \n\nThat's when Ricky started to laugh, \"Oh man.\" he said looking back at his cards.\n\n\"What?\" Scott said.\n\n\"You have been working so many long hours; I forgot that you were still here. You know I trip sometimes.\" Ricky said and Scott nodded.\n\nSomething about this moment made Scott feel uncomfortable. He was a little scared that Ricky had already put everything together, but he didn't give it away like he knew. This was definitely becoming too much for him. He needed to hurry up and confess what is going on between Katrina and him. He sighed to himself knowing that he couldn't just yet. Katrina wanted to tell him together, so he would just have to bite his tongue.\n\nThey played cards and ate for awhile before they left him alone to clean up. The guys were buzzed and had to go home soon before they were completely drunk. Scott didn't drink much because he was trying to stay awake till Katrina came home. He was finishing up the dishes when he heard the door open. Katrina came in with her shoes in hand and locked the door.\n\n\"Hey baby.\" he called out.\n\n\"Hey, my feet hurt.\" she said and he couldn't help but laugh.\n\n\"Want me to come over there and rub your feet?\" he said seductively, drying his hands on a towel.\n\nShe smiled and plopped down on the couch, \"I would like that.\" she said lifting one leg up in the air.\n\nHe moved over towards the couch and moved her feet into his lap as he sat down, \"I don't know if I should be doing this knowing that you were probably dancing around with one of those strippers.\" he said deeply massaging her feet and she couldn't help the moan that escaped her mouth.\n\n\"Whatever Scott, you are my boyfriend and you are suppose to do things like this. Now this is just to remind me that I have something better at home.\"\n\n\"You better keep remembering that too.\" she rested her head on her hand as she stared at him rubbing her feet. \n\n\"Scott, are you happy with me?\" she asked.\n\n\"Of course I am baby. Why do you ask?\"\n\n\"I don't know. Dominique said that you came to see her, but she wouldn't tell me why.\"\n\n\"And you also said that you wouldn't ask her either.\" he smiled.\n\n\"Well,\" she pouted, \"that was before I actually knew you were going.\"\n\n\"Yea, I talked to her about some things. After that, I saw this house and went for a tour.\"\n\n\"You want to move?\" she said drawing her brows together. She was a little thrown off by the fact that he still wanted to move.\n\n\"I told you, your place is too small for me, but I think you will like this place.\"\n\n\"Really?\" the smile instantly returned back to her face. \n\nShe knew that it meant he still intended on having her move in with him. She was excited because she knew there could never be any other man but Scott. He was the man that she always dreamed of, her perfect man. Just staring at him right now, made her heart swell.\n\n\"I love you, you know.\" she admitted.\n\nHe paused from the massage to look back into her big brown eyes. She was waiting for his response and he couldn't disappoint. The words were already on the tip of his tongue, \"I love you too.\"\n\nShe knew her face was going to hurt tomorrow as much as she has been smiling. She had been waiting to hear those words from his mouth. She crooked her finger to him seductively and he answered her call, pressing his lips to hers. He moved on top of her as she ran her fingers through his hair. Nothing could describe the intensity that Scott was feeling. It was a mixture of doubt and confidence. He heard the little nagging voice telling him that she would not accept him, that she would run just like all the others, that was, until he looked into her eyes. Her sparkling big brown eyes staring back up at him. He moved over to sit down and she crawled into his lap. He moved his hands under her dress rubbing her ass. She bit her bottom lip as he started to move the dress up over her head. \n\nHe sucked in his breath as he stared at her twin globes encased in her red see-through bra, \"Do you always have to look at me as if you are going to eat me up?\"\n\n\"That's because most of the time I plan to.\" he said bringing her head down and kissing her. \n\nKatrina wrapped her arms around his neck as he stole her breath away with his kiss. She loved to feel his tongue push through her lips and caress her tongue. She grabbed the back of his head as she felt his hand caressing her breast and pulling at her nipple. She could feel the bulge growing under her and she grinded down against it. \n\n\"Damn.\" he whispered, throwing his head back.\n\nShe grinded against him as she took her bra off and carelessly threw it behind the couch. She gasped feeling his hot mouth surround her nipple. \n\nHis tongue swirled around the hardened bud, before he sucked it into his mouth. He gave the same treatment to her other nipple and she felt her wetness soaking her underwear. She wanted to feel him push inside of her right at that moment as she reached for his belt buckle.\n\nHe slowed her hands and the shocked look she gave him was priceless, \"Hey baby, why don't you get a blanket and I'll start the fireplace?\" he said leaning forward to kiss her.\n\n\"Alright then. I'll be right back.\" she said as she slowly got off of him and went into the room. \n\nScott went and started the fireplace. He waited patiently for Katrina to come out with a blanket and his wait was rewarded as she came out with a blanket wrapped around her. He smiled to himself shaking his head as she walked closer to him. He grabbed a hold of it and peeled it off of her to reveal her naked body. \n\n\"How did I ever get this lucky?\" he said.\n\n\"I'm wondering that myself.\" she smiled; she met him on the floor, running her fingers through his hair as she kissed him. \n\nHe pulled her closer to him as she wrapped her arms around his neck. He pulled away long enough to lay out the blanket and lay her down on it. Her lips were swollen from the kiss and hair framed around her in a perfect little mess. He unbuttoned his shirt leaving on his tank top, not breaking eye contact with her.\n\n\"Katrina, I know that you have been patient with this and you know I appreciate it more than anything. You are really too good for me and even though I may think you won't like what you see, I'm going to show you this because I love you.\" \n\nKatrina's eyes drew together in confusion as she wondered what he was going to show her. She saw him reach for the bottom of his shirt and her eyes widened. He was actually going to do it, she thought to herself. As if to get it over with quickly, he pulled the shirt over his head. Katrina's mouth dropped at the sheer shock of what he finally revealed to her. She looked down at his chest and saw the scratches and cuts. Some were a little more defined than others were. She could see the bruises but it was not that bad. There was this long cut right on his abs but it was barely there. She lifted her hand and her fingers grazed each scar. Scott closed his eyes as her light touch excited him to no ends, but she still hadn't said anything. His heart started to tighten and his breath got short, please don't be like the others he thought to himself. ",
        "He looked down at her and didn't see pity or fear, he saw the same love that was always there. She leaned forward and pressed a small kiss over one scar and kissed each one she could until she was face to face with him.\n\n\"You always were a little over dramatic.\" she smiled, wrapping her arms around him.\n\nHe let out a breath that he didn't know he was holding and crushed his lips against hers. She felt the urgency and the love in his kiss. He laid her back down on the couch and she felt his weight crush against her. She ran her fingers through his hair as he moved from her lips to her neck. She angled her neck to give him more access and felt him hit that tender spot below her ear. A moan escaped her lips as her legs came up around his waist. His lips left her neck and moved down towards one of her breasts, gently tugging on her nipple in his mouth. Her head was swimming with desire, feeling his body pressing against hers and his mouth on her breast. She could feel his hard length pressing against her center and she craved to feel him inside of her. She moved her hips against him to emphasis the message. He slowly moved his way down her body and felt his mouth hovering over her slit. \n\nThe sight that greeted him made him ache with need. Damn, he needed her now but he wanted to make her cum first. He pushed two fingers inside of her and watched as her back arched off the floor. He wrapped his hands around his own length as his fingers pushed in and out of her. \n\n\"Scott, please.\" she moaned, \"I need you, please.\"\n\n\"I know baby, just let me...\"\n\n\"No, Scott please. We have plenty of time for that.\"\n\nShe was right about that, he thought to himself. There is going to be plenty of time for that. He spread her legs a little wider and pushed his length inside of her. Her hands grabbed a hold of his biceps as he pushed himself deeper inside. He had to still himself as he felt her muscles hold him in tight. He looked down into her face and saw her biting on her bottom lip, eyes closed and hair mussed around her face. \n\n\"Katrina, look at me.\" he said in a low tone and she still had her eyes closed, \"Katrina, look at me.\" he said in a more demanding tone.\n\nHer eyes flickered open to meet his and that's when he started thrusting inside of her. He wanted to make sure she didn't have any problems with him or his body. He knew in his heart that she didn't, but he needed to look into her eyes. \n\nIt was with that connection that he realized; she was it. She is what he had been looking and waiting for. He didn't want anyone else but her and he was determined to make sure she knew that. That thought made him thrust harder and faster inside of her. Her mouth dropped open and her breath started to quicken. \n\nHer legs wrapped around his waist pushing him in deeper. She swore that he would drive her crazy. He just didn't know what he did to her body and to her soul. Every time she looked up into his eyes she saw his love for her and the vulnerability. She never thought of him as vulnerable, but she saw it. She brought his head down and pushed her tongue into his mouth, holding on to him tight, digging her nails into his back. He pulled away after kissing her thoroughly to hear her voice. He could feel his balls begin to tighten and new that he was going to cum soon. He lifted her legs over his shoulder and pushed into her harder and faster.\n\nHe heard his name escape past her lips and it was the sweetest sound he ever heard, next to her telling him she loved him. \n\n\"Scott, I'm about to cum.\" she moaned.\n\n\"I know baby, I'm almost there.\" \n\nHer nails dug into his arms again as she screamed out. He felt her grip him tighter and contract as she came on him. He couldn't hold off any longer and spilled himself inside of her. Her pussy milked his cock as he gritted his teeth loosing himself in the sensation. He collapsed on top of her when he was spent, pressing his weight on her. He was going to get off of her as soon as he caught his breath. He knew that he was probably crushing her. He made the move and her legs tightened around him.\n\n\"Baby, I know I'm heavy, let me get up.\" he said and he felt her shake her head against him.\n\n\"I like you right here.\" he chuckled to himself as he kissed her shoulder.\n\n\"Well, I don't want to crush you.\" he said lifting himself up off her. \n\nShe lifted her head to kiss him and he fully welcomed her lips. He maneuvered next to her and she pulled herself closer to him letting the heat from the fireplace warm her up.\n\n\"You know you are not going anywhere, right?\" she said.\n\n\"I know I'm too tired to move.\" he smiled and she pinched him.\n\n\"No, I mean me and you. You are not going anywhere.\" she said lifting her heavy head to look at him.\n\n\"I knew what you meant and to tell you the truth, I was going to tell you the same thing.\" she laid her head on his bare chest, \"We just have to get past your brother.\" \n\nShe nodded against him and they both cuddled up, spending the night holding onto each other. \n\nThe next day was real busy. They had to setup everything for the rehearsal and the rehearsal dinner. Even though the wedding was three days away, they wanted to go ahead and do the rehearsal early so they wouldn't have anything to worry about the day of. That didn't really matter much to Scott and Katrina; they were in their own little world while helping. When he could, he would steal kisses from her and wrap his arms around her. Katrina was enjoying it, but she wanted to be careful just in case Ricky was in the area.\n\nJade, Katrina, and her mom were in the kitchen finishing up the dinner. She pretended to listen to their conversation but she was really thinking of Scott and how far they had come. She knew she had to get her mind on the dinner and get through the wedding so that she could tell Ricky. She was even thinking about telling him early so that he would have some time to get over it.\n\n\"Mom, I think I'm going to go ahead and tell Ricky.\" Katrina said, rolling out the dough.\n\n\"I was wondering when you were going to. What made you decide now?\"\n\n\"You know how Ricky blows things all out of proportion. Well, I want him to be okay with it by the wedding, especially since Scott is his best man.\"\n\n\"Well honey, I think you should have said something earlier but I understand why you didn't. So, I'm guessing this is getting really serious.\"\n\n\"He showed me his cuts on his chest.\" she said and her mom looked up at her, \"They weren't that bad you could still see the bruises and the cuts, but it wasn't bad. To tell you the truth I didn't really care, I was just happy that he showed it to me.\"\n\n\"Wow, you love him that much?\" Katrina just shyly turned her head, \"I remember that same look I had on my face when I fell in love with your father. I knew that you and Scott would end up together somehow.\"\n\n\"How did you know, mama?\"\n\n\"You two were always hanging around each other. It was only a matter of time before he saw you as a woman. Not only that, but when Scott, left I saw all those scribbles you had on your notebook putting his last name on your name.\" Katrina had never been so embarrassed as Jade laughed in the background.\n\n\"Well, he was really my first kiss.\"\n\n\"And that's alright baby. I love Scott and I love the man that he has become. I'm pulling through for the both of you but just to let you know, you are going have to choose.\"\n\n\"What?\"\n\n\"You know Ricky is not going to take this well in the beginning, so when the time comes you are going have to choose between Ricky or Scott.\"\n\n\"She's right, you know. I feel it coming too.\" Jade added and that made Katrina bite her bottom lip.\n\nShe hadn't thought about that. She shouldn't have to choose but now she saw that it could be a possibility. She was knocked out of her thoughts as she saw Scott walk in.\n\n\"Hey ladies, how's it going?\" he said bringing in a few sacks.\n\n\"Hey Scott, just put those anywhere.\" Katrina's mom directed.\n\nHe sat the bags close to Katrina so that he could plant a kiss on her cheek. She smiled up at him and lifted her face to kiss him.\n\n\"Aren't you two just cute?\" Jade teased and they both laughed.\n\n\"Well, Mama Tanya, I have James and Nik outside waiting to help if you need them.\"\n\n\"Oh, that's very sweet baby. I'll go tell them what to look for and I'll be right back.\"\n\n\"I'll go help, should be fun telling that big oaf James what to do.\"\n\n\"You must think he's really cute, huh.\" Katrina teased as Jade scrunched up her face.\n\nThey left them alone in the kitchen and that was fine with Scott. There were some people coming for the dinner, so he knew that they would have to put on that whole \"we are not involved\" thing for Ricky. Scott moved behind her wrapping his arms around her waist. She leaned back against him feeling so safe in his arms.\n\n\"So, how is everything going?\" he asked.\n\n\"Well, I'm going back on what I said I wasn't going to do. Correct me if I am wrong but I did say that I wasn't going to cook for this thing?\" \n\n\"You did, but since you are such a nice, sweet sister, you couldn't help but go back on your word.\"\n\n\"Alright then, just needed to hear someone say it.\" she felt his body shake with laughter.\n\n\"Well, I talked to the house agent and she said it's doable, I just have to wait awhile.\"\n\n\"Then what, you leave my house to get another one.\"\n\n\"Well, I already told you, I am taking you with me.\"\n\n\"Who said that I wanted to live with you?\" she felt him turn her around to face him. She was messing with him but she loved the frightened yet determined look in his eyes.\n\n\"You are going, even if I have to drag you kicking and screaming.\" she laughed at him and wrapped her arms around his neck.\n\n\"You know, I can say no to you if I want to, but I think that I will let you win this one.\" She brought his head down to kiss him when she saw the door opened. \n\nThey quickly pulled away from each other thinking it was Ricky, but saw it was Yolanda. What was she doing here, Katrina thought to herself.\n\n\"I'm so sorry Scott, I heard that you were here and Mr. Thompson wanted me to come in and give you this paperwork.\"\n\n\"He knows I'm off right?\" Scott said walking over to her and taking the file.\n\n\"He knows, it's just that he wants you to look over the case to see if it's worth him going all out for it. He said that he would wait till you come back, he just wanted you to have a copy.\"\n\nHe sighed as he ran his fingers through his hair, \"Alright, thank you Yolanda.\"\n\n\"You're welcome; I guess I will see you in the office. Have fun.\" she smiled.\n\n\"Alright bye!\" Katrina shouted and they both looked at her as she plastered a hearty smile on her face. \n\nYolanda smiled at them both as she exited the kitchen. Scott shook his head and walked over to her. \n\n\"Why do you have to be so mean?\"\n\n\"I refuse to think I am being mean. It's obvious that she is flirting and you can't see it.\"\n\n\"Well, I only have eyes for one girl.\" he smiled.\n\nRicky wondered what was keeping Scott. He knew that he was dropping off some of the bags, but he figured he would have been right out to help him greet the guests. He was on his way to the kitchen when he nearly knocked someone to the ground. He looked down and saw long brown hair.\n\n\"I am so sorry ma'am. I didn't even see you.\" he said helping her up.\n\n\"Oh, it's no big deal. I'm use to it amazingly.\"\n\n\"Oh okay, well again I'm so sorry, but I was looking for my friend.\"\n\nShe drew her brows together, \"Are you Ricky?\" she asked.\n\n\"Yes,\" he paused, \"do I know you?\" \n\n\"I'm Yolanda, I work with Scott. I just came to bring him some paperwork.\"\n\n\"Oh, it is nice to meet you. So, have you seen him?\"\n\n\"Yea, he's in the kitchen,\" he was about to turn and walk to the kitchen when her words stopped him in his track, \"with his girlfriend.\"\n\n\"Girlfriend? Scott doesn't have a girlfriend.\"\n\n\"Yes, a real pretty black girl with long hair. She comes to the office a lot for lunch.\"\n\n\"Look Yolanda, I'm his best friend, I think I would know if he had a girlfriend.\"\n\n\"Well he does. I think her name is Katrina or something.\" Ricky felt his fist ball to his side when she said that name.\n\nHe was hoping that he didn't hear her right, but the name kept repeating in his mind. Katrina! His baby sister! No, it can't be.\n\nHe tried his best to loosen the tension in his jaw and breathed, \"Thanks a lot Yolanda.\"\n\nAll she had time to do was nod as she saw him walk off. She could feel the heat radiating off him and wondered what that was all about. \n\n\"Scott, come on now let me see it before you finalize the deal.\" she said wrapping her arms around his waist, pouting.\n\n\"It's a surprise. You will see it soon baby, I promise you.\"\n\n\"You better. So, we are going to tell my brother soon?\"\n\n\"I was waiting on you to say something about that. Whenever is fine with me, I just know we need to get it over with so we can finally go out and about without worrying if someone was going to tell him.\" she looked up at him.\n\n\"Good, I'm just so happy that you have been so patient with me. I love you.\"\n\n\"I love you more baby.\"\n\n\"You couldn't possibly.\" she smiled.\n\n\"You just don't know.\" he said kissing her briefly.\n\n\"So, after the dinner, you want to tell him?\"\n\n\"Why wait then?\" they both turned towards the door and saw Ricky standing there, his eyes narrowing in on the two of them. Scott saw Ricky's fist balled up and his breath quicken. He knew that look, that's Ricky's pissed off look. Katrina held on to Scott's shirt and felt so small under Ricky's gaze.\n\n\"Tell me now!\" Ricky finally said in a menacing tone."
    ],
    "authorname": "Myanlass",
    "tags": [
        "novella"
    ],
    "category": "Interracial Love",
    "url": "https://www.literotica.com/s/been-waiting-for-love-ch-06"
}
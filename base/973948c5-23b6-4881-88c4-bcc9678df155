{
    "title": "There and Back Again Ch. 006",
    "pages": [
        "Chapter Six: Preparations \n\nI woke, at home, stiff and sore in my own bed. I was surprised to find that I was dry, no indication that I had soiled myself while unconscious. And my pockets were largely empty, so most of the things I left in the pack must still be there. Good to know. My bladder did feel full, but not painfully so, and I rolled out of the bed and stumbled into the bathroom to deal with some personal issues. Afterwards, I stood, turning to the mirror to wash my hands, and gasped as I glanced up at myself. \n\nMy hair was hanging off my head, dirty and tangled. My hands and face were filthy, covered in mud, and what must apparently have been darkspawn blood was spattered across my hands and my face. There were tear tracks apparent, leftover from my brief breakdown at camp, the only spots on my face that looked clean. I had never been so disgusting in my life. \n\nI stripped bare, immediately hopping into a long, hot shower. I scrubbed until my skin was pink, washed my hair multiple times and put conditioner in, then just stood under the hot spray until the water started to run cold. Magic may be amazing, but nothing beats a hot shower. I dressed myself again in warm clothes, tied my hair back with an elastic, and started a pile of items to stow in my pockets before I passed out again. The first thing I added to the pile was a large bar of soap and a toothbrush. While digging through my cupboards, I made a fortuitous find - a sample package that must have come in the mail or something, with a man's razor. I added a small pair of hairdressing scissors. I dug through my purse and added all the coins I thought would be of value. And another clean pair of underpants. You can't have too many clean underpants. \n\nI flipped on the TV as I passed by, confirming that I had indeed been gone for two days. I was surprised to notice that I wasn't especially hungry or thirsty, but I ate and drank anyway. I brought in my mail, paid my bills, and put in a load of laundry, including my jeans and coat. \n\nI turned on my computer, checking my email - still no job offers. Stupid economy. Though with all this blacking out, I couldn't really afford to be working anyway. I decided to spend a bit of time researching coins. My modern ones were all fine, but the minute someone realised they weren't really silver or copper we would be in trouble, and I didn't want to draw any attention to ourselves with strange money. It was frustrating trying to find anything online, as they all wanted to advertise rare, expensive coins. Finally I picked through the phone book and found a local coin dealer. I called the store, and actually got a person on the phone. Impressive. I hit on an inspiration, and told him that I was hosting a role playing event and wanted things to be 'authentic' but inexpensive. I was looking for copper or silver coins which would look old, but without actually costing me much money. We talked for a bit, and it turned out he had a lot of old Roman and British coin, which wasn't nice enough to be rare, but still looked medieval. He told me lots of it wasn't even legible, and I practically chortled - I didn't look forward to answering questions about who King or Queen or Emperor whoever was in Ferelden anyway. He asked if I wanted it cleaned, what sizes of coin I wanted, and eventually he agreed to box up a large assortment of random copper and silver, basically worthless coin and ship it to me for a couple hundred bucks. I paid over the phone by credit card. Score! I figured I could bring it over a few handfuls at a time. \n\nI also ordered a few more Swiss army knives. I wanted to give Cailan one of his own, and that went double for Alistair. \n\nFinished with gathering all the things I thought I might need, I stuffed my pockets, put on my coat, laced on my heavy hiking boots, and decided that I was ready for whenever the next blackout hit. To my surprise, for the first time, I think I was even looking forward to it. \n\nAnd so, I waited. And waited. \n\nI stressed about how I would find Duncan and Cailan again. I wondered what they thought of my sudden disappearance. I thought about what we would find in Lothering. I worried about what I'd do the next time I ended up in combat. I briefly considered signing up for self-defense classes, or fencing or something, but figured I'd just end up passing out and getting stabbed by mistake. \n\nThe more I thought about Lothering, the more I worried that my clothes were going to be a problem. I needed them to feel prepared in any way, or else I needed to find armour or something, but they were going to draw a lot of attention. No one in Ferelden wears jeans, but there was no way I was wandering around there in a dress, barefoot. I started doing yet more internet research, and found myself staring at Halloween costumes. Perhaps, if I found some sort of over-sized dress that would cover everything, I could blend better. And I needed to find a cloak. Frustrated with trying to figure it out online, I eventually dared to call a cab and venture out to find a custom tailor to sew the garments I needed. \n\nI used the same line about doing a role-playing event, and needing to wear warm clothing underneath a dress but still have it look passable, at least at a distance. The dressmaker seemed to think she could pull something off, and showed me a couple of quick sketches of a simple yet elegant looking dress. She took down my measurements, promising to call me when it was done. I paid a fifty dollar deposit, agreeing to pay extra if the dress and cloak could be available within a couple of days, but warned her that I might be 'out of town' unexpectedly so she'd need to leave a message. \n\nI made it back to my house without blacking out, relieved. After supper, I spent the rest of the evening reading the Dragon Age wiki trying to determine the timeline of events such as Eamon's poisoning, Riordan's capture, Zevran's ambush, and Uldred's attempted coup at the Circle Tower. I was unsuccessful and finally give up in a huff. Between unknown travel times and no forced order in which you experience the events, it just didn't seem possible. I did notice that nothing about the wiki indicated my adventures had any effect on the game. It still cited Duncan and Cailan as having died at Ostagar. I finally climbed into bed, anxious and overly warm, and fell asleep. \n\nThe next day I woke still at home, so after working on finding a job for a while, I found myself at a loss. Somehow playing Dragon Age again, or reading the books by David Gaider, just seemed...wrong, knowing that it was actually real, but nothing else appealed to me either. It occurred to me, as I thought about the books, that I actually didn't live all that far from where BioWare and David Gaider were located. I spent the rest of the day, after eating, drinking, showering, and other basic necessities, cyber-stalking David Gaider. I read every interview I could find, hoping to get a glimmer of how he developed the story, how he invented Ferelden. Everything I could find was vague and pointed to a collaborative project between writers and game designers, but I had a hard time believing that was true. He wrote the books. Somehow, some way, he knew more about Ferelden. He'd been there, even if in dreams. \n\nI contemplated going to Edmonton one day and trying to track him down, but didn't get very far along that thought process. Every time I tried to picture it in my head, I ended up locked in a psych ward, or in jail for being a stalker. I put it out of my mind and watched boring television until I finally managed to fall asleep. \n\nThe next morning my box of coins arrived. I spent a little while sorting through them, replacing the modern ones in my pockets with useable copper and silver coins. Shortly after, the phone rang, and the tailor informed me my dress was ready. Calling another cab, I went in for a fitting and found a rather perfect, thick, green, floor-length fake velvet gown. It fit over my clothes, and while it made the sleeves look a bit rumpled, it actually worked pretty well. Unless someone came quite close, I would look like a chubby noblewoman. I think. Not that I'd seen any noblewomen to compare, but it was better than wandering around in jeans. \n\nThe cloak was even better. Long and thick, it had a deep hood, and looked perfect over the dress. Although I was roasting indoors, I thought I might just appreciate the warmth if I was going to try to wander all over Ferelden. I paid the tailor, only half-listening as she told me she was giving me a discount. Apparently she had been contemplating closing her doors for lack of business, but my dress and cloak had inspired her to wait and try to break into making authentic costumes, whether for Halloween or for Renaissance fairs and the like. I appreciated the discount, either way, and wished her well. I think she was surprised that I wore the dress out of the store, but I figured it was worth it if I managed to black out on the way home. \n\nLucky for me, and somehow it felt like fate, I made it through the door and dropped my keys just in time to feel the world spin. I dropped onto my bed again and let the blackness take me. \n\n******** \n\nI woke with a start. I was lying on the ground, and someone was shaking me. \n\n\"My lady! Sierra! Please. You must get up.\" I looked up blearily and saw a worried face hovering over me. \n\n\"Dun...Tomas? What is it?\" I sat up, my head still slightly spinning. \n\n\"Darkspawn coming. I can feel them.\" \n\n\"Why is my timing always so terrible?\" I took his hand and allowed myself to be pulled up. I looked down, briefly appreciating my cloak and dress briefly before realising that I really could not afford to have them covered in blood. If we survived. Shut up. Tomas' mouth gaped open as I dropped the cloak, reached down to grab the hem of the dress and pull it over my head - I had the foresight to avoid buttons, and had the neck made elastic - and quickly rolled both dress and cloak into a small bundle. Tomas finally shook his head and handed me the pack to stuff my things into, as well as the sword I'd scavenged in Ostagar and my dagger. I threw the pack's strap over my shoulder - better that those who knew how to fight remain unencumbered. \n\nI saw Theron standing nearby, sword and shield at the ready. He grinned at me - the maniac actually looks happy about this! - and returned to looking around expectantly. We waited only a few moments before Tomas pointed. A genlock archer and a hurlock were coming up around the bend. The men pushed me to stand behind them, moving forward shoulder to shoulder, weapons at the ready. When the hurlock paused, Theron let out a booming battle shout, and rushed at the archer as he raised his bow. Tomas leaped towards the hurlock, catching a wicked slash of a crude sword on his crossed blades, before jumping back and slashing at the creature's abdomen. Theron batted away a poorly aimed arrow with his shield, rushing the archer and knocking him down. I lost track of the fight for a bit after that, glancing between both men, feeling helpless and slightly foolish standing twenty feet behind them holding a sword which I had no idea how to use. \n\nI realised both creatures were down, when Tomas spun, a look of horror on his face. He shouted, but I didn't hear it - I suddenly knew exactly what that expression meant. There were darkspawn behind me. I hope they find someone who can use that dress. I gave Tomas and Theron one last look, and turned, raising my sword in front of me. If I was going to die, I'd at least go down flailing about ineffectually. \n\nThere were three hurlocks charging towards me, and they were close enough that there was absolutely no way for either man behind me to get there in time. I tightened my grip on the sword, holding it out away from me; a scream died on my lips as one after the other, the darkspawn completely ignored me. They flowed around me, barely stepping to the sides to avoid me, my hair whipped into my face from the sudden wind of their passing. Not one slowed to cut me down as they ran. I spun back around just in time to hear the clash of metal against metal as the creatures engaged my new companions. I stared in shock for just a moment before dashing forward and thrusting my sword into the back of a hurlock raising his axe to carve into Tomas. It turned, its corrupted face registering surprise, and slowly fell. I let go of my sword, and managed to step out of the spray of blood before I got any on me. There was a crash as he collapsed to the ground, followed by a sudden deafening silence. \n\nThe three of us stood, panting, staring back and forth at each other, then down at the five corpses on the ground. Suddenly I lurched sideways, leaning over, and retched into a small blackening shrub at my feet. I felt a hand rest on my back, but wiped my mouth cautiously before turning to see Theron looking at me in concern. He wrapped his arm around my shoulder and lead me back to the small camp where he and Tomas had obviously slept, assisting me as I slid to the ground, settling beside me with his arm still around me. \n\n\"Are you alright?\" \n\n\"I think so. Everything but my pride, at any rate. And my formerly clean pan...small clothes.\" \n\nTheron barked a laugh. \"At least you can still joke about it!\" \n\n\"What makes you think I'm joking?\" I grumbled, but I shot Theron a small smile. \n\nTomas crouched in front of me, his look speculative. \"The darkspawn ignored you.\" \n\n\"So I didn't just imagine that?\" He shook his head, his slight smile never reaching his eyes. \n\n\"It was like they didn't know you were there.\" \n\n\"I'm not complaining. I have absolutely no idea why I'm alive right now.\" He studied my face, finally relenting and leaning back to sit. \n\n\"The darkspawn are all gone. I believe we are safe, for the moment. And it appears I owe you my thanks, again. You may not be a fighter at home, but overall I'd say you're managing quite well here.\" \n\nI blushed, still reeling in shock. I lifted my hand and gave myself a pinch on the thigh, hard, through the denim of my jeans. I flinched in pain. I certainly felt real. \n\n\"What was that about?\" Theron looked amused. \n\n\"Something I learned as a kid. If you think you might be dreaming, and you pinch yourself, you'll wake up. It would seem I've lost my mind, because dreaming just can't explain all of...this.\" I curled my legs in front of me, wrapped both arms around them, and lowered my head onto my knees. \"I think I'll just shake for a while, if you don't mind.\" \n\nBoth men were quiet while I collected myself again. I may have been bored at home, but this world was...perhaps a little too exciting. I briefly prayed for a happy medium. I finally raised my head again. \n\n\"So...how long was I gone?\" \n\nTomas had stood up and started pacing nearby, head down in thought. Theron still rubbed my back. \"Two days. Duncan...I mean Tomas, was so angry when he came back to camp and discovered you missing. He spent half a day looking for a trail before finally admitting that you must have disappeared into thin air. We stayed there for a bit, wondering if you'd show up again, but finally decided to keep moving, slowly, and hope you'd find us if you came back.\" \n\n\"And I did.\" \n\n\"Did you ever. I just about screamed like a little girl when I woke and saw you lying there. Would have completely ruined my kingly image, though, so I held it in. Tomas had a few interesting curse words when he came back from watch and found you asleep. I swear he thinks you're doing it on purpose just to make him crazy.\" \n\nI laughed, shakily, the tension slowly leaking out of my shoulders as I relaxed. It was almost like...almost like talking to Alistair at the party camp in the game. I wondered what other similarities the brothers shared, and then blushed furiously as my mind followed that thought a bit too far. \n\n\"I'm sorry I startled you.\" \n\n\"Thank you for not saying 'scared'.\" We both laughed, and I finally jumped to my feet, walking over to Tomas. \n\n\"May I ask what you were doing for the last couple of days, my Lady?\" \n\nI sighed. \"Sierra, remember? Not a lady. Just ask my last foster mother. Anyway, I got cleaned up, got a dress made, got some coin that might actually be useable here, and tried to find out if I had any way to nail down the timeline more specifically. Which I don't.\" I handed Tomas a couple of handfuls of coin, and he nodded appreciatively before hiding it away in a pouch he pulled from somewhere. The guy reminds me of descriptions of Zevran. Pockets and hiding places everywhere. I also showed him the razor. He grimaced. \n\n\"I noticed the dress. You wear it over the rest of your...\" Tomas looked down at my boots, jeans, and jacket strangely. \"...outfit?\" \n\n\"I figured that I'd be sort of noticeable, dressed like this. You both said I act like a noble, so I got a dress that I thought perhaps a noblewoman might wear. But if you think I'm wandering around here with just a dress on, you've got another thing coming. So I made sure the dress would fit over my clothes.\" \n\n\"I must apologise, Sierra. I keep confusing absence of experience for absence of intelligence. I'm quite impressed. The dress will draw some attention, especially away from the busier towns, but less than that costume.\" \n\nI giggled. I couldn't help it. He thinks my jeans are the costume. I took a deep breath. \"So...what now?\" \n\n\"We are likely about a day's walk from Lothering. I thought perhaps we could walk rather slowly, and hope the others will catch up to us on the road. If you don't object, I thought I'd get you to tell us a little bit more about this...performance you told us about. And at camp tonight...maybe we can talk about how to use this a little bit.\" He handed me back my sword, after wiping it off on the grass carefully. I took it, squaring my shoulders, and started walking. \n\n******** \n\n\"That bastard!\" Swore Theron, as we walked together towards Lothering. \"He uses an apostate blood mage to poison Eamon? I'll have his head. I'll cut it off myself.\" He continued ranting, pulling slightly ahead, and Tomas and I shared bemused looks. Listening to what was happening to Ferelden after the King's supposed death was really getting to him, and so far I'd only described Redcliffe. I hoped that maybe hearing about it would help him mature a bit. Between the game's portrayal and his behaviour since we'd met, I had decided that perhaps the King needed to Grow Up before being allowed to rule a country. And maybe he'd finally listen to reason about needing an heir. I had no interest in keeping Anora on the throne for my own reasons, but regardless of his feelings or mine, the fact was that Ferelden needed a Royal Baby, and fast. \n\nAnd the truth was, as we walked, I could feel Theron's interest in me intensifying, and I suddenly wondered if he thought I'd be a suitable mother for said baby. He kept touching me, innocently on the shoulder or hand, when he made a joke or to get my attention to show me something, and every time I saw Tomas watching, his concerned expression suddenly covered by that indifferent mask he used to hide his thoughts. It wasn't normal for people to touch this much in Ferelden, I was quite certain. Especially not if those people were the very married King and an unknown, possibly insane resident of somewhere other than Thedas. And truly, while he seemed like a nice guy overall, he was also arrogant, egotistical, unrealistic, and immature, and I certainly didn't return his level of interest. I had no desire to be the King's mistress, or God forbid, the Queen, even if I did somehow manage to stay in Ferelden forever. I'd never been in such an awkward situation before. Back at home I was considered unattractive. Fighting off interested males wasn't part of my repertoire. ",
        "I contemplated Tomas for a minute. He certainly had never indicated any interest in me as a woman, and as I thought about it, nothing in the game or the books indicated he'd ever had any interest in women in general. In fact, wasn't Tomas practically the only one not getting laid in 'The Calling' when he was in the Deep Roads with Maric? I worried about the plan that formed in my head a bit, but frankly I worried about Theron more. I took a deep breath and strode over to take Tomas' arm, forcing him to shorten his stride a little bit or pull away rudely. His eyes narrowed as he looked down at me, and I caught his gaze, deliberately glancing over at Theron, then back to where my arm wrapped around his, before searching his face again. He followed my gaze, then - as he met my eyes again - comprehension and something that looked like approval flashed across his face. He patted my fingers, and allowed me to continue to walk with him while Theron stomped along in front of us. \n\nNot long after, we found a decent campsite and another convenient stream, and decided to stop for the night. I washed my hands and face with the soap in the stream, gasping as the cold water trickled down my neck. Tomas, watching me, reached over to touch one of the drops as it fell, and I smiled up at him and took his hand to climb back to my feet. I made another small fire, lighting it with ease using the Zippo, and Tomas again stepped out to 'scout'. I figured he'd be back with another small animal of some sort, so I set Theron to gathering wood while I fashioned a spit as I'd seen Tomas do before. \n\nI was right, and Tomas returned with two small birds dangling from a rope. I assumed they were something like pheasant, and supposed that as long as someone else plucked them, I might even be able to eat them. Tomas indeed did the plucking when he saw me pale a little bit when he offered them to me, and I was able to set them up over the fire once he was done. He smiled his thanks and I grinned in return. I caught an irritated look on Theron's face as he watched us, and I suppressed a laugh. When you're pretty, boys are so easy! \n\nTheron settled by the fire, but Tomas hauled me to my feet once more and handed me my sword. Standing in front of me, he started telling me where to put my feet if I wanted to hit something with said weapon. He demonstrated and I tried to copy him, and I started to realise that when not surging with adrenaline, swords are heavy. Clearly I was going to need more upper body strength. Joy. I distracted myself, thinking about that for a moment, and Tomas swept his foot out in an arc that caught my ankle and tumbled me to the ground. I landed on my ass, unhurt, my sword flying out of my hand to tumble across the grass. I swore at him, but he helped me up and lectured me a bit on paying attention to my surroundings, my feet, and my opponent. Embarrassed, I picked up the heavy blade, and tried again. We didn't spar or even practice swinging the weapons we held; we just held them up, and slowly moved around, me learning how to step carefully on uneven ground without looking down, him trying to trip me at every opportunity. By the time the fowl was cooked, I was bruised, sore, and exhausted. Both Tomas and Theron laughed at me as I gingerly eased down onto an uninjured part of my butt. \n\n\"I hate you both. You know that, right?\" \n\n\"You're actually doing quite well for an adult who's never trained before, Sierra. I know I'm being mean, but unfortunately, it's the only way for you to learn how to split your attention between your environment and your opponent. I'm impressed you managed to avoid being knocked over at all. We will make a fighter out of you yet.\" He smiled at me, and I wondered if this look was genuine or just part of the farce I knew he'd agreed to for Theron's sake. I blushed and smiled back, for once thanking my pasty complexion for its easy pinkness. Theron tried to cover another dirty look with a yawn. \n\nTomas stripped the meat off the bones of the birds, sharing it out between us. I insisted he and Theron take a larger share, since they'd be doing most of the fighting, and I knew Tomas' metabolism was going to leave him hungry no matter what. If I closed my eyes, it tasted just like roast chicken, and it was delicious. \n\nTomas informed us he'd take watch overnight, but I shook my head. \n\n\"When did you last sleep, Tomas?\" I'd certainly noted the dark smudges under his eyes. \n\n\"Um...\" \n\n\"Let me guess. Ostagar?\" He nodded sheepishly. \"You need some rest. Let me take the watch.\" \n\n\"And how will you sense darkspawn?\" \n\n\"Well, let me see. Do you sense any now?\" He shook his head. \"And I'm assuming they can't just creep close enough to kill us in a few minutes? How far away do they have to be for you not to feel them?\" \n\n\"A couple of hours, at least.\" \n\n\"Alright, well, then I'll watch for a couple of hours. Then I promise to wake you, and if you don't sense anything, you can go back to sleep again.\" \n\n\"And if you disappear in the middle of the night again?\" Hmm. Damn. Oh wait - \n\n\"What if I hold your arm up, like this. Will you be able to sleep?\" I held his arm up a bit. He nodded. \"Well, then, if I disappear, your arm will fall, and you'll wake up.\" He looked at me intently, and I met his gaze with all the stubbornness I'd picked up in the foster system. He finally nodded. \n\n\"Are you sure?\" \n\n\"Yep. Besides, honestly, with how sore my butt is, I won't be able to sleep anyway. I might as well do something useful if I'm going to be awake regardless.\" \n\nTheron laughed. \"What's a butt?\" \n\n\"Oh, uh...you know. Behind. Rear quarters. Ass. Whatever you wanna call it.\" My face was scarlet, and both Theron and Tomas laughed. Tomas showed me how to tell the passage of time by the moon, and I agreed to wake him once it touched a certain tree branch. \n\nBoth men settled down to sleep near the fire. I propped Tomas' arm up on my lap, facing out from the fire to have some sort of night vision. It left me sitting practically in his embrace, and I felt almost as awkward as when I woke in Cailan's lap. I sighed, and felt Tomas squeeze my hand once, gently, as if he knew what I was thinking. I tried to be quiet and still, and soon heard two sets of soft snores. \n\nSitting watch, it turned out, is incredibly boring, if nothing happens. At first my frantic thoughts kept me alert enough, as did the warm body curled around me on the ground. But after a while, I had to stop thinking or else go mad, and I guess I got used to the warmth of Tomas' body. I stared up at the night sky, trying to pick out constellations. My familiar ones, Cassiopeia, Orion, and the Big Dipper, were nowhere to be found. I spent some time imagining other things in the shapes of the stars, but I'd never really been much of a visual person. \n\nI woke Tomas at the appointed time. He didn't sense any darkspawn, so after I crept into the bushes to relieve myself, we settled into the same position again. \n\nMy ass really did hurt, and I spent a while simply concentrating on holding still despite the pain, then a while longer contemplating the posture and footwork I'd been learning before supper. I'd never been graceful growing up, and while this body seemed better balanced than mine at home, I still didn't feel very light on my feet. If I was honest, I also really didn't want to be learning how to swing a sword. I wasn't a fighter, never even considered military service; most of the time someone having a nose bleed made me nauseous. I didn't really want to stab things with the pointy end of any sort of weapon. I suddenly really, really missed my safe office, my reliable desk and my meagre view from a tiny window at my former employer's place of business. An unemployed business consultant has no place in the middle of a Blight in bloody Ferelden! \n\nBy the time the first light of dawn was in the sky, I found myself drifting off, my head sagging down to my chest then springing back up hurriedly. I unzipped my jacket to see if the cold would help, I pinched myself repeatedly, but I couldn't stay awake any longer despite all the discomfort. The next time my head bobbed, I dropped Tomas' arm. He startled awake, and I apologised. Seeing me struggle to keep my eyes open, he took over watch. He told me it was rare he slept more than four hours in a night, so he assured me he felt rested. He crept a bit further away, and I tried to lie down and sleep. Once I was actually allowed, however, sleep wouldn't come. \n\nEvery time I closed my eyes, all I could see was the surprised look on the hurlock's face as I stabbed it, and I startled myself awake again. Finally, seeing me twitch for the twentieth time, Tomas moved back closer to me, sitting so I could feel his warmth against my back, and squeezed my hand. It worked, and I fell fast asleep before he could even let go."
    ],
    "authorname": "ElyssaCousland",
    "tags": [
        "dragon age",
        "romance",
        "fantasy",
        "fan fiction"
    ],
    "category": "Celebrities & Fan Fiction",
    "url": "https://www.literotica.com/s/there-and-back-again-ch-06"
}
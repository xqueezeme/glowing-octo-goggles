{
    "title": "Altering the Plans Ch. 07",
    "pages": [
        "Content warning: this story features a main character who leaves an abusive relationship, and whose ex engages in harassment post breakup. I would characterize it, in terms of storytelling, as \"mild\", although I realize that no abuse is mild or justified. \n\nChapter 7\n\n\"Lacey, are you home?\" Maya called as she walked in the house. Her stomach fluttered, even though it was her home, too. She beckoned for Allie and Gabe to follow her in. It was three days since the Blowout, as she thought of it, and it was time to start fixing things.\n\n\"Maya?\" Lacey appeared at the top of the steps. \"Oh, thank goodness!\" She zipped down the stairs and caught Maya up in a hug. \"I am so glad to see you.\"\n\n\"I'm glad to see you, too,\" Maya said. \"These are my cousins, Allie and Gabe Hudson.\"\n\n\"Good to meet the both of you,\" said Lacey. \"Come on, let's go in the kitchen. I was about to get some tea.\"\n\n\"Not coffee?\" Maya teased.\n\nLacey laughed. \"Every once in a while I need something else. What would anyone like?\"\n\nAllie and Gabe went for coffee while Maya decided tea would be easier on her nervous stomach. Lacey got out some cookies to go with the drinks, and after a few minutes they all sat around the kitchen table.\n\n\"Lacey, again, I'm really sorry about the other night,\" Maya said. \"I handled it all about as badly as I could.\"\n\n\"I think there's blame to go around,\" said Lacey. \"I'm sorry, too. Maya, I didn't tell you, but Dean came around to the coffee shop. He was looking for you. I told him you'd quit, and maybe he even believed me. When he didn't come back, I didn't say anything because I didn't want you to worry.\"\n\nMaya laughed softly. \"There's a lot of that going around, isn't there?\"\n\n\"It's a normal reaction,\" said Gabe as he munched a cookie. \"You guys didn't do anything to hurt anybody. It's just miscommunication.\"\n\n\"You're right,\" Maya said, \"but it sure does make a bad situation worse and more confusing.\"\n\n\"Have you talked to Toby yet?\" Lacey asked.\n\n\"No, not yet. I talked to Krista earlier,\" Maya said. \"I texted her and she met me at the coffee shop. By the way, thank you for your help there. I'll come in tomorrow, but I needed the time off.\"\n\n\"I figured you did,\" said Lacey, \"and you deserve the time. It's not even that much. You were off the first day, and Kelly was happy to get some extra hours.\"\n\n\"That's good.\" Maya nodded. \"I didn't get to talk to Jackson yet.\"\n\n\"Don't worry about it. Jackson has only been worried about you,\" Lacey told her.\n\n\"He's such a sweetheart,\" Maya said with a small laugh, then she sighed. \"So that just leaves Toby.\"\n\n\"I can't wait to meet this Toby guy,\" said Allie. \"The way Maya makes it sound, she's Belle and he's the Beast.\"\n\nLacey laughed. \"I wouldn't exactly say that, but I can see some similarities in attitude, at least at times.\"\n\n\"You sure he treats you okay, Maya?\" Gabe asked with a frown. \"I'm not sure I like the feeling I'm getting here. You don't need someone who's going to yell at you and then give you the silent treatment.\"\n\n\"It's not quite like that, Gabe,\" Maya said. \"Yes, he yelled, but I yelled back. And he's not giving me the silent treatment. I'm the one that hasn't talked to him.\"\n\n\"Has he tried to get in touch with you?\" Gabe asked. \"Even a text?\"\n\n\"He wanted to,\" said Lacey. \"Krista told him not to, and that was probably smart, because although I'm sure Toby's heart was in the right place, I'm not sure his head was.\"\n\n\"Again, it's fine. I haven't texted him, so fair's fair,\" said Maya. \"I'm going to talk to him tonight.\"\n\n\"Are you sure?\" asked Allie. \"Maybe you should wait until tomorrow.\"\n\n\"No.\" Maya shook her head. \"I need to talk to him today. It's been long enough. I'm not scared of him. I admit I'm afraid this might lead to us breaking up, but like you said, Allie, at least it would be on honest terms.\"\n\n\"Maya, I really don't think that's going to happen,\" said Lacey.\n\n\"Krista doesn't either, but I don't want to count on anything.\" Maya hoped Lacey was right. However, she couldn't help but wonder if she'd crossed a line with Toby somewhere.\n\nThey hadn't explicitly talked about it, but she thought it was safe to assume they both thought they'd be honest with each other. Withholding things as she had, she could understand if she'd ruined the trust between them. She just hoped with an apology and an explanation, they could rebuild it.\n\nLater that evening, Krista texted to let Maya know when Toby was heading home from the shop. Over the objections of her cousins, she went to wait for him at his house, alone. She wanted him to see that she didn't feel she needed to be protected from him, because she trusted him.\n\nAs she sat on his front step, she hugged herself both to keep warm in the cool night air and also to hide her shaking hands. Luckily she didn't have to wait long before his gray pickup pulled up in front of the house.\n\nHe stepped out of the truck and walked towards her slowly, as if he wasn't sure she was really there. Maya watched him and saw that he looked as nervous as she felt.\n\n\"Hi,\" she said when he was close enough.\n\n\"Hi.\" Toby hooked his hands in his jeans pockets and studied her. Charles had nailed it with his description of Toby as the strong, silent one. Especially the silent part.\n\n\"I was hoping we could talk,\" said Maya. \"I think it's been long enough.\"\n\n\"Okay. Come on in.\" He opened the door and stood aside to let her in.\n\nInside, Maya stood awkwardly in the living room, not knowing what to do. She wanted to wrap her arms around him, and feel his around her, but she didn't think that was a good place to start. It would be too easy to try to take things down a physical road and avoid a conversation. Then again, she wasn't sure from Toby's expression whether that was even in the cards.\n\n\"I'm sorry,\" Maya said. \"I'd like to explain everything. What happened and why I did what I did, if you'll let me. You don't have to forgive me, or even understand, but please, I'd like to tell you.\"\n\n\"Okay.\" He nodded and indicated she should sit.\n\nMaya sat on the couch, still keeping her arms around herself. She balled her hands into fists to keep them steady.\n\nToby frowned. \"You're still scared of me.\"\n\n\"No, no, I'm not.\" She shook her head.\n\nHe gave her a skeptical look. \"You seem like you are.\"\n\n\"Toby, I'm not,\" she said firmly. \"Look, I came over here, by myself, to talk to you. Against the wishes of my cousins, I should add. Would I do that if I thought you'd hurt me? If I didn't trust you?\" She took a deep breath. \"I'm not afraid of you. I am just nervous about where this conversation might go.\" She held out her hands, which trembled but not as badly as before, now that she was here. \"See? You know that happens when I'm nervous.\"\n\n\"Yeah, okay.\" He nodded and took one of her hands in his, rubbing his thumb over the back of her hand.\n\nThe movement both relaxed and enticed her, and she took a deep breath. \"Thanks.\"\n\n\"I want to hear your explanation,\" he said, \"but I have to say that I'm sorry, too. I was way out of line.\"\n\nMaya nodded. \"Thank you. First off, I hope you know I wasn't trying to lie to you,\" she said. \"I should have told you, lots of things and right away. I handled it badly, because I was scared, and I thought if you knew about Dean and what he was saying, you--you wouldn't want me around anymore.\"\n\n\"Maya, I never--\"\n\n\"Please.\" She met his eyes. \"Please, let me explain, okay?\"\n\n\"Okay.\"\n\nMaya took a deep breath and laid it out for him, everything from her mother giving Dean her phone number, to Dean's firing, to his unexpected threats, to her fears as she had tried to determine what to say, and when, and to whom.\n\n\"So,\" she said when she'd finished, \"all I can say is I'm sorry, and I was afraid. I was afraid if I told you, you'd be angry, and everything was so new between us I didn't want to risk it. I shouldn't have let being scared rule every decision I made. I was wrong. I should have told you and we should have figured out a plan together.\"\n\nMaya sat back in the chair, exhausted but relieved.\n\nToby sat for a while, digesting what she'd told him, then stood and paced. Although she ached for some kind of response from him, Maya was quiet as well. She was tired, and had exceeded her capacity for worry. At the moment, if Toby wanted to end things with her, she was all right with that. She'd done all she could.\n\nToby walked over and stood in front of her. \"But you're all right?\"\n\nMaya jumped, having started to nod off. \"Me? Yes, I'm fine. Well, maybe not fine, but I'm okay.\" She gave him a wan smile. \"It's been a little rough, though.\"\n\n\"Did Landon help?\"\n\nMaya was puzzled, but answered. \"Yes, he did. Landon was great. He's got his own issues, and now I know what made him so upset when we first saw each other. It's early, and different, but I think he and I are on a much better track.\"\n\nToby nodded and paced a little more. \"Did you get a new phone? Landon said you would.\"\n\n\"I did. I'll give you the number. I'm going to be a lot more careful with giving the number out.\"\n\n\"Have you heard anything else from Dean? Has he said or done anything?\"\n\n\"No. No one will give him the number. I won't even give it to my mother, because I can't trust her. I'm still off social media, and closed down what accounts I could. He hasn't done anything, has he? At the store?\" Her stomach twisted again as she waited for the answer.\n\n\"No.\" Toby shook his head. \"We've been careful, and installed a couple more cameras. It's all fine.\"\n\n\"Oh, good.\" Maya sighed in relief. \"I was worried.\" She dragged a hand through her hair.\n\n\"I know you were.\" He came over and sat next to her. \"I'm curious, what happened that night? I knew something was bothering you, but then you seemed better and went downstairs, and then--what?\"\n\nMaya sighed and dropped her head, then looked up. \"Dean texted me. I was busy with the dresses for Clara and Delia, so I didn't see it right away. Lacey and Krista saw my phone blink and picked it up, and they got worried when they saw the text. They insisted I needed to tell you, and that I should call the police. That's what they were trying to convince me to do when we came upstairs.\"\n\nMaya wiped at her eyes with her sleeve. \"I should have listened to them, but all I could think of was how he worked for the mayor's office and could probably get the police on his side. I didn't know at that point that he'd been fired. Gabe found that out later.\"\n\nToby moved closer and put her hand in both of his. \"So what did he say that made everyone so worried?\"\n\nMaya took a deep breath. \"He said that since it was my fault he was fired, he was going to get me fired. Since he'd lost friends, so would I, and he'd make sure of it.\" She gave a weak laugh. \"Very Count-of-Monte-Cristo stuff. There was no explicit threat of violence, but I figure with him, it's always there.\"\n\nToby put an arm around her shoulders and shifted so that she was next to him. Reflexively, Maya curled into him, grateful for the warmth and comfort for as long as he was willing to give it to her.\n\n\"Were you going to tell me?\" he asked.\n\n\"I was.\" She nodded against his chest. \"I know it may not seem that way, but I was going to. Then, I don't know, the conversation went off the rails.\"\n\n\"I didn't help with that,\" he said. \"I'm sorry.\"\n\nMaya managed a small laugh. \"There's a lot of sorry going around. Mostly from me.\"\n\nToby brushed her hair back and tilted her chin up. \"Maybe we can get past the sorry and figure out what to do next?\"\n\n\"I'd love that,\" she said, and in the moment realized she also loved Toby, but refrained from saying it. It felt like too much.\n\n\"You've been so adamant about not telling the police,\" he said. \"And I sort of get it and sort of don't. I know he worked for the city, but that doesn't mean the police won't help.\"\n\n\"You're right, I know. But I have a little history here,\" said Maya. \"My cousin, Allie, she had trouble with a guy in college. He stalked her, harassed her, accosted her, and when she went to the authorities, they just shrugged it off. Campus police wouldn't do anything, and neither would the local police.\n\n\"She wanted to get a restraining order, but she couldn't. They insisted it was all talk, and basically until he did something, they couldn't do anything. The guy's friends and family got all mad, what about his career, his reputation? It's an awful catch-22. Allie was a mess. Finally the guy was arrested for something else, but it was pretty bad.\"\n\n\"That's terrible.\" Toby shook his head.\n\n\"People often don't believe things like that, not about their friends or other people they know. With Allie, so many people said, but he's such a nice guy, or I never saw him do or say anything like that.\" Maya sighed. \"It makes it hard.\"\n\n\"Yeah, I can see that.\" Toby tightened his arm around her.\n\n\"I know what it's like to be ignored, or at least not believed,\" said Maya. \"That's why the idea of telling you, or anyone, was scary. I didn't--I didn't think I mattered enough for someone to believe me.\" She paused and absorbed what she'd said. She'd never been able to put the thought into words before, but it was true.\n\nToby cupped her cheek. \"You matter to me, Maya. You will always matter. I love you.\"\n\nShe covered her hand with his, hardly daring to believe him. \"You do?\"\n\nHe smiled. \"Yes, I do. It took me a while to realize it, but these last few days drove it home. I have worried about people before, and cared about people, but not like this. This was different.\" He kissed her forehead. \"It was scary.\"\n\nMaya laughed. \"I didn't think you got scared.\"\n\n\"Every once in a while,\" he said, \"when it's important.\" He kissed her.\n\nMaya sighed and sank into the kiss. It had only been three days, but she felt like it had been forever since they'd touched. Her lips parted at his urging and she wrapped her arms around him as he pulled her onto his lap.\n\nToby slid his hands under her shirt and traced them lightly over her sides as she straddled his legs, sending sparks through her body and making her shiver. Her breath caught as he left her lips and kissed along her jaw until her reached her neck. He nipped at the pulse point and she dropped her head back.\n\n\"God, I've missed you,\" he murmured against her skin.\n\nHer hands tunneled in his hair and he groaned in appreciation. \"I missed you, too,\" she said, \"and I'm so sorry.\"\n\nHe pulled away and framed her face with his hands. \"I know. I'm sorry, too, for everything.\" He laid a finger over her lips as she made to protest. \"I am. I shouldn't have acted like I did. You needed support, and I failed in a big way. I won't do it again.\"\n\n\"I promise I'll tell you when I need help,\" Maya said, leaning into the warmth of his palm. \"I love you, too.\"\n\nToby kissed her, deeply and thoroughly. \"Now that we have that settled, I would very much like to take you upstairs and show you just how much I love you.\"\n\nMaya shook her head and brushed his lips with hers. \"I don't need to go upstairs.\"\n\n\"Good, I didn't want to either.\" Toby pressed himself against her and she bit her lip and gasped as she felt him, hard under his jeans.\n\nMaya turned her head and sucked Toby's thumb into her mouth. His eyes grew dark and serious as he watched her. When she released his thumb, he pulled her to him and captured her mouth in a searing kiss.\n\nShe reached down and started working his shirt up, anxious to feel him against her. He let go long enough to pull his shirt off, then did the same to hers. Maya ran her hands over his shoulders and arms and chest, refreshing her memory of how he felt. While she was preoccupied, Toby unclasped her bra and slid it off, then leaned forward and took one nipple in his mouth.\n\nMaya gasped and ran her fingers through his hair as he sucked and teased on one side and then the other. She felt every tug and nibble through her whole body, and felt the warmth and wet pooling between her thighs.\n\nToby started to work her jeans down, and she stood up to do it herself while he shucked his own jeans. He pulled her back to him but she braced herself on his shoulders and shook her head.\n\n\"What?\" he asked, his breath ragged.\n\nMaya stood between his legs, his hard cock against her, and leaned down to run her tongue along his neck. He groaned and his hands gripped her hips. She worked her way down, kissing his shoulders, and dragging a fingernail lightly over his nipples. He hissed out a breath as she followed her nail with her lips and tongue.\n\nShe kneeled on the floor and kissed lower, on his abdomen, and he shuddered at the contact.\n\n\"Maya, what are you doing?\" His eyes were bright.\n\nMaya laughed and then took him in her mouth and he dropped back in the sofa. She skimmed her tongue along his length and stroked him. The skin was hot and tight under her hands, and his cock twitched when she slowly slid her lips over the head. She found a rhythm, sliding up and down his length and matching his short thrusts.\n\n\"Enough,\" he managed. \"Please. That's not how I want to finish.\"\n\n\"No?\" Maya was breathless herself.\n\n\"No.\" Toby leaned forward and put his hands on her waist, urging her up and onto his lap. He grabbed a condom as she straddled him.\n\n\"I love you,\" he said against her lips.\n\n\"I love you, too.\" She kissed him and laid her hands on his shoulders to steady herself; as she slid down over him, they both moaned in relief.\n\nMaya bit her lip as they found a pace and moved together, savoring the feeling of him inside her, gasping as their movements hit her center, driving up the need and excitement she felt. Tension built in her body and she tried to hold it back.\n\nHer head fell forward and rested on Toby's shoulder. \"I can't--oh, Toby, I--\"\n\nHe dragged a hand down her body until he found the spot between her legs and began stroking. \"Don't wait,\" he said. \"I can't.\"\n\nMaya gripped his shoulders, digging her hails in as he thrust harder. He pressed his hips against her as he came with a guttural sigh. Maya cried out as her tension reached a peak and she shuddered as it broke in waves. She lay panting against Toby as he rubbed soothing circles on her back and his own breathing slowed down.\n\n\"Let's not do that again, okay?\" Toby said, pressing a kiss to her hand.\n\n\"Why not? Didn't you like it?\" Maya asked.\n\nToby's laugh rumbled through his chest. \"Okay, that we can do again.\" He tilted her chin up. \"I don't want to fight like that. I hated feeling like I'd chased you away. I promise, you can tell me anything, and I will always be on your side.\"\n\n\"Thank you.\" She covered his hand with hers. \"I promise I'll tell you when I need help. I won't try to handle everything myself.\"\n\n\"Good.\" He dropped a kiss on her forehead. \"Come on, let's go upstairs.\"\n\nUnder the covers and curled up next to Toby, Maya covered a yawn.\n\n\"I am so tired,\" she said, unable to keep her eyes open. \"This emotional turmoil stuff is exhausting.\"\n\n\"That makes two of us.\" He tightened his arms around her. \"From now on, we'll try to keep that to a minimum.\"\n\n\"Deal,\" she said, before dropping into the most restful sleep she'd had in weeks.\n\nx-x-x-x-x-x\n\nToby woke up early the next morning, annoyed that he was awake. He started to grumble, then remembered Maya was next to him and stopped so he wouldn't wake her up. She was curled up, facing away from him. Carefully, he moved closer, pleased when she snuggled back against him.\n\nHe toyed with the ends of her hair and studied her as she slept. She looked relaxed, which he was glad to see. He felt better himself, he realized. He'd been more upset in the short time between Maya running out of the house and showing up at his place tonight than he could remember. His thoughts and mood had been dark, and he'd felt like he was surrounded by gray clouds.\n\nWhen Maya had said she loved him, the clouds had dissipated. Toby knew there would be bumps in the road, but he was confident they could get past them. He didn't think either of them wanted a repeat of the last few days, and he knew he'd work to prevent it. He was pretty sure Maya would too.",
        "He smiled as she sighed in her sleep. The cool colors he'd seen in his mind when he'd first met her were no longer what he thought of when he looked at her. He saw warmer colors, maybe not bursting out, but they were there.\n\nToby lay for a while longer, ideas for a picture floating through his mind, and he decided he needed to try and get it on canvas. He hated leaving his bed while Maya was in it but he would try to be quick.\n\nAn hour later, he was deep into his painting and jumped when Maya knocked on the door to the room he used as a studio.\n\n\"Hi,\" she said. \"Didn't mean to startle you.\"\n\n\"It's okay.\" He smiled as he took her in. She'd put on one of his t-shirts, which hung halfway down her thighs, and wrapped herself in a blanket.\n\nShe bit her lip. \"Hope you don't mind I found a shirt. All my clothes are downstairs.\"\n\n\"No, help yourself.\" He liked her in his shirt.\n\n\"I just wanted to say hi. I can leave you to this if you want.\"\n\n\"No.\" He shook his head and held a hand out to her. When she came over, he put his brush down and pulled her against him, her back to his chest. \"Mmmm.\" He pressed a kiss to the back of her neck and liked it when she shivered in response. \"Morning.\"\n\nShe turned her head up and kissed him. \"Morning. What are you working on?\"\n\n\"You.\" He tightened his arms around her.\n\nMaya laughed. \"You have a one-track mind.\"\n\n\"I'm shocked,\" he said. \"I am a serious artist. And your mind went there.\"\n\n\"I'm so terribly sorry.\" Maya snuggled against him. \"I take it back.\"\n\n\"I'll let it go this time.\" Toby kissed her cheek. \"But it's true. This is, well, how I see you. In these colors.\"\n\n\"Oh, wow.\" Maya studied the canvas as she leaned back against him.\n\n\"Sorry,\" Toby said. \"I wish I did more realistic stuff, but that was never my strength.\" He'd never thought about it before, but now he did wish that he could do a lifelike portrait of Maya to capture her eyes, and her smile.\n\n\"No, no, I like it.\" Maya gripped his hands. \"It's like you're painting how I feel. I'd rather that than how I look.\"\n\n\"I'm glad you like it.\"\n\n\"I know we both have to work later,\" said Maya, \"and I have to see Allie and Gabe before they go, but we should find some time to talk.\" She turned to face him. \"I know it might not do any good, but I want to take all this stuff with Dean to the police, or maybe a lawyer. Or both. We should get Lacey, Krista and Jackson in on it, too.\"\n\n\"Good idea. Have you thought about asking Landon what he thinks?\"\n\n\"I did, but I don't know. He seemed so sick of anything to do with being a lawyer. I don't want to pressure him.\"\n\n\"Asking a question isn't pressure,\" said Toby, \"so long as you'll take no for an answer.\"\n\n\"Did Auntie Clara say that?\" Maya asked with a smile.\n\n\"No, Delia did, and it's true. And maybe Landon would like it if you asked him. Maybe he'd want to help.\" Toby remained skeptical about her stepbrother, but Landon had come through in the clutch. He decided to cut Landon some slack.\n\n\"All right, I'll ask him. I wanted to talk to him anyway.\"\n\n\"What about?\"\n\n\"I haven't had a chance to tell you, but remember when I said I had something I was thinking about? I want to start my own dressmaking business. For drag queens. And whoever else, I guess, but I could specialize. I think I might do it.\" Maya took a breath. \"Trinity and Roxxy thought it was a great idea. What do you think?\"\n\n\"Do you want to do it?\" he asked. \"I mean, not just because it's there. Do you want to?\"\n\n\"Yes, I think do.\" She nodded. \"At least, I want to try. I know it'll be a lot of work, and there's no guarantee of success, but I like the idea of doing what I'm good at, and what I enjoy. If I can't find a job somewhere, why not make my own? And if I fail at it, at least I'll know I tried.\"\n\n\"I think that's a great answer.\" He kissed her. \"If it's what you want, then I will do whatever I can to help you.\"\n\n\"Thank you.\" She hugged him. \"I hoped you could. I don't know anything about setting up a business.\" She sighed. \"I got through college, but didn't study business or anything like that, so I feel at a disadvantage. And I was hoping Landon could advise me on legal things, or help me find someone who can.\"\n\n\"Don't let the school thing stop you. I don't have a four-year degree, neither does Krista. You should talk to Clara and Delia, too,\" he said. \"They've been around, and they have some connections.\"\n\n\"Good idea.\" She kissed him. \"I'll let you get back to painting.\"\n\n\"Wait. I have an idea.\"\n\nMaya gave him a puzzled look as he reached over to a table covered with brushes, paints, and other assorted supplies.\n\n\"What are you doing?\" she asked.\n\n\"You'll see.\" Toby dabbed a brush into some water and then paint and took one of her arms from under the blanket. \"Here we go,\" he said with a wink.\n\nHe kept it simple and quickly painted a skull over two crossed guitars.\n\nMaya laughed. \"Marked as a metal head, am I?\"\n\n\"Do you like it?\" he asked.\n\n\"I do.\" She studied it. \"It's a shame it won't last too long, but I'll take a picture.\" She glanced up and narrowed her eyes. \"This is water-soluble paint, right? Or did you use something permanent?\"\n\nToby chuckled and kissed her before he put the brush down. \"It's just water colors. I usually use acrylics, but this will come right off.\"\n\n\"Thanks.\" She frowned. \"I guess this is about as close to a tattoo as I'll ever get. I hope--is that okay?\"\n\n\"Of course, it is.\" Toby rubbed her shoulders. \"Look, I like what I do, and I'm good at it, but I don't care if you get one or don't. Besides, maybe you can let me practice some designs.\" He wiggled his eyebrows. \"I can paint all kinds of things in all kinds of places.\"\n\n\"I was right. You do have a one-track mind.\"\n\n\"Are you kidding? This would all be in the service of art.\"\n\nMaya chuckled and shook her head. \"Of course it would be.\" She leaned against him for a minute, and he had to resist the urge to make love to her again right there on the floor. \"All right,\" she said. \"I should get moving. I was going to get a shower.\"\n\n\"Do that, and then we'll talk,\" said Toby. \"You're right, you need to take this to the police, and I'll help. We all will.\"\n\n\"I know, and that makes it easier.\"\n\n\"Good.\"\n\nx-x-x-x-x-x\n\n\"I can't wait for Sunday,\" Maya said to Lacey. For once they had the same shift at the coffee shop. Maya had dragged when getting up so early, but she had wanted to clear her evening. \"Clara and Delia's dresses are almost done. I hope they like them.\"\n\n\"They will love them,\" Lacey said. \"Every time I talk to them, they tell me how excited they are. Thank you so much for doing that, Maya.\"\n\n\"No need to thank me. It's been a lot of fun.\"\n\n\"Are you going to the gala?\"\n\n\"I am.\" Maya smiled. \"Toby even said he'd wear a tux.\" She couldn't wait to see him in it.\n\nLacey laughed. \"That'll be something to see. Looks like we're all going, then. I was hoping to check out some more thrift shops soon for a dress.\"\n\n\"That sounds like fun,\" said Maya. \"Maybe we can find a time to go with Krista and all find something. I'd be happy to do alterations.\"\n\n\"That would be great, if there's time,\" said Lacey. \"But don't overload yourself.\"\n\n\"I know, I know.\" Maya nodded. \"I don't mean to but I enjoy doing it. Besides, I need practice for my new business. Maybe you and Krista can model for me.\"\n\nLacey laughed. \"We'll see about that. I guess you're feeling better then?\"\n\n\"God, yes. So much better.\" Maya shook her head. \"I should have gone to the police right away. Landon was so helpful, too. He might not like being a lawyer, but he's pretty good at it.\"\n\nAfter talking with Toby, she had strategized with Landon on whether and how to approach the police. Toby had gone with her, and with his support she'd remained steady while speaking with an officer. Landon had been impressed with how she'd documented everything and had helped her organize the information to present it to the police.\n\nIt had also helped to speak to a sympathetic officer who had called in a social worker. The department, they told her, was trying a new approach to domestic violence cases. There hadn't been much they could do, but Maya felt better having filed her report. The next step was a restraining order. She didn't think the odds were great that she'd get one, but she decided she'd try.\n\n\"Landon seems really nice,\" said Lacey.\n\n\"He is.\" Maya nodded. \"I hate to say it, but I wouldn't have expected it, not the way I knew him before. He's been great. He said he'd help me with the dress business, too.\"\n\n\"That's great,\" said Lacey. \"Have you thought of any names yet?\" She worked on cleaning behind the counter while Maya went onto the floor and wiped down the tables and chairs.\n\n\"Not really. I'll probably go with something simple, like 'Dresses by Maya.' Although I'm open to suggestions.\"\n\n\"I'll let you know if I think of anything.\"\n\nMaya moved out to the floor to wipe down tables as Lacey cleaned up and organized behind the counter.\n\n\"We should take some coffee over to the tattoo shop after the shift,\" Lacey said. \"You up for that?\"\n\n\"Sure.\" Maya nodded. \"Better remember a muffin for Jackson. I can't imagine how disappointed he'd be if we didn't.\"\n\n\"I think that man lives on sugar and caffeine,\" agreed Lacey. \"You know how people say they can't even boil water? I think that's Jackson.\" She shook her head. \"If we didn't feed him, I don't know what he'd do.\"\n\n\"Krista would say he'd mooch off someone else,\" said Maya and they both laughed. \"But I don't think it's true,\" she continued. \"Jackson holds up his end of things, from what I can see.\"\n\n\"He absolutely does.\" Lacey nodded. \"He's a great friend. He jokes around a lot, but he's there when you need him.\"\n\nMaya smiled to herself, wondering if Lacey and Jackson knew how much each liked the other. If she was a matchmaker, she'd set them up, but she had a feeling they'd have to figure this out for themselves.\n\nThe door chimed and Maya turned to greet the customer. Her heart skittered when she saw Dean. Maya tried to steady her shaking hands by squeezing the cloth she was holding. She found herself frustrated; she was tired of being afraid of him, but she couldn't shake the residual fear of what he'd done before.\n\n\"I knew it. I fucking knew you still worked here.\" He glared as he advanced on her.\n\n\"Get out of here,\" said Maya, holding her ground. \"And leave me alone.\"\n\nDean ignored her. \"I told you, I know what you did, and if you think I'm going to take it lying down, you're completely fucking wrong.\"\n\n\"Sir, I'm asking you to leave,\" Lacey said, her voice calm and steady.\n\nMaya looked over to see Lacey with her phone out, recording the interaction.\n\n\"Put that fucking phone away,\" Dean snarled and turned towards Lacey.\n\n\"Leave her alone,\" Maya said. She stepped in front of him, her anger outweighing her fear. \"Get out. I've been to the police. I'll get a restraining order.\"\n\nHe barked a laugh. \"You think that scares me? You might have gotten me fired, but I still know people.\"\n\n\"I didn't get you fired,\" Maya shot back. \"If you think I put that much thought into you after I broke up with you, you are more self-centered than I thought.\"\n\nDean stepped towards Maya, but she refused to retreat.\n\n\"I warned you,\" he said. \"You think you can just fucking upend my life?\" He leaned ever-so-slightly forward, into her personal space. \"You think I don't know that you and the low-lifes at that tattoo shop planned this? Oh, yeah, I know.\" He gave her a malicious grin. \"I followed you, and you're so goddamned stupid you never noticed.\"\n\nAt the mention of being followed, Maya felt a jolt of adrenaline as her anger turned to fury.\n\n\"Get the fuck out,\" she said. \"I didn't get you fired, you asshole. I wouldn't waste my time on you.\" She took another step forward, forcing him back. \"You're not fucking worth it.\"\n\n\"Goddammit, Maya--\" Dean reached out to grab her arm, but Maya dodged.\n\n\"Maya, I'm calling the police,\" said Lacey. She reached for the store phone by the register, keeping her phone recording all the while.\n\n\"Oh, Jesus Christ.\" Dean threw his arms up. \"The police? Seriously?\"\n\n\"Yes, the police,\" Maya said. \"And yes, I'm serious. You're a bully, and I am done with you. I don't imagine a police record will help in finding a new job. Get. Out.\"\n\n\"You will all be so fucking sorry.\" Dean glared and then stalked out.\n\nMaya was sure she hadn't seen the last of him, but part of her was almost euphoric that she'd stood up to him and that as he had with others, he'd caved.\n\nLacey replaced the phone and exchanged a relieved look with Maya.\n\n\"Are you okay?\" Lacey asked.\n\n\"I am.\" Maya nodded, then grinned. \"I did it.\"\n\n\"You did.\" Lacey came around and gave her a hug. \"I was worried for you, though.\"\n\n\"I guess I should have been, but I was just so angry.\"\n\n\"I don't blame you.\" Lacey blew out a sigh and ran a hand over her face. \"Well, that was excitement I hadn't planned on.\"\n\n\"Tell me about it.\" Maya covered a yawn as her adrenaline rush faded.\n\nShe finished her shift, her mind replaying the events and wondering what she should or could have done differently. She believed Dean when he said it wasn't over. What would he do?\n\nx-x-x-x-x-x\n\nLater that night, Toby watched as Maya paced his living room, recounting what had happened.\n\nHe was furious that Dean had shown up and threatened Maya, and Lacey, but tried to keep it from showing too much. It wouldn't help, and he didn't want to upset Maya, who was already distraught.\n\n\"I don't know what to do next,\" she said, throwing her hands up. \"I don't understand why he's fixated on me. He never cared about me. And as for his job, I don't get it. He seemed to know so many people, getting another job doesn't seem like a big deal.\"\n\n\"Next you get the restraining order, like you said. Have you talked to Landon?\"\n\n\"Yes. He said he'll go with me to make sure I fill out the forms properly and he's looking around to see if there's a lawyer I can work with. I'm sure Dean will have one.\"\n\n\"Okay, that's a plan. What else is bothering you?\" Toby asked.\n\n\"I'm worried.\" Maya rubbed her forehead. \"I don't know what he'll do, or even what he might be capable of, or how quickly I can get the restraining order. He's followed me, which makes me kind of sick. He's hurt me, what if he hurts someone else? What if he does something to your shop? Or at the drag club?\" She stopped and took his arm. \"My god, Toby, what if he does something to Auntie Delia or Clara?\"\n\n\"Hey, hey, calm down.\" He led her over to the couch and pulled her onto his lap. Focusing on Maya made it easier to keep his temper down. \"Don't go worrying about things that haven't happened yet.\"\n\n\"I don't want anything to happen to anyone.\" Her hands started to shake again and Toby took them in his own.\n\n\"Maya, slow down.\" He rubbed her hands until her breathing evened out, then pulled her down into a gentle kiss.\n\nMaya sighed and tried to relax. \"I'm sorry. I don't mean to be so crazy.\"\n\n\"It's fine,\" Toby said. \"I just hate to see you so upset. We'll figure something out.\" He brushed her hair back. \"I'm not trying to downplay anything, I promise. We'll talk to someone, maybe that social worker from the police station. We'll all be careful. I do think one thing is important, though.\"\n\n\"What?\"\n\n\"I don't think you should go anywhere alone, okay?\" He rubbed her shoulder. \"I don't know if he's telling the truth about following you, but let's not take the chance.\"\n\n\"You're right.\" Maya nodded, then tried for a smile. \"I also appreciate that you're keeping calm. Because I bet you're pretty angry.\"\n\n\"I am always--put out when people I love are in bad situations.\"\n\nMaya laughed. \"That's an understatement.\"\n\n\"It is, but I'm serious.\" He tipped her chin up. \"I can't help it. I've always been protective of people; Krista could tell you stories. But this is more than that. I don't like what he's doing, or says he's doing. I know you haven't had good luck with the police in the past, but I'm glad you're trying.\"\n\n\"I'm not optimistic,\" she admitted, \"but I know I need to. If it was just me, I'd find a way to deal with it. But I can't leave it alone when he's threatening you and the others.\n\n\"If it was just you, I wouldn't let you leave it alone,\" Toby said. He struggled with what to say, to let her know that she was just as important as anyone else and deserved proper protection. \"Maya, you have to realize that you matter, too.\" He smiled. \"I do remember one other thing from Drag Race.\"\n\nShe gave him a puzzled look. \"What?\"\n\n\"At the end of every episode, RuPaul would say, if you don't love yourself, how the hell can you love someone else? And it's a good point,\" he said.\n\nMaya laughed. \"I didn't think I'd ever be getting relationship advice from you via RuPaul.\"\n\n\"Inspiration comes from odd places.\" He brushed her hair back again, then trailed his finger down her neck. \"Look, the point is, you don't deserve to be treated the way Dean's been treating you. I believe it, and you need to believe it, too.\"\n\n\"I'm trying.\" Maya sighed. \"It's all just very daunting.\" She shivered as his finger wandered down her neck, to her shoulder, then around the collar of her shirt. \"You're distracting me.\"\n\n\"Yeah.\" He smiled and kissed her. \"Is it working?\"\n\n\"It might be. Guess you'll have to try again.\"\n\n\"Lucky for you, my evening is free.\" He wrapped his arms around her and pulled her into a deep, slow kiss.\n\n\"Good thing, because as nervous as I am, I don't think I'll be sleeping much.\"\n\n\"We'll see what we can do about that.\"\n\nToby kissed her again and sighed as she threaded her fingers into his hair. He coaxed her lips apart and swept his tongue against hers. She made a soft, surprised noise when he left her lips and kissed along her jaw, then her neck, finding that irresistible spot that made her tremble.\n\n\"Ready to go upstairs?\" he asked.\n\nShe nodded, breathless from the kiss.\n\nIn his room, he sat on the bed and stood her before him, slowly stripping off her clothes. He kissed the exposed areas of skin, smiling to himself as she gasped and whimpered and her fingernails dug into his shoulders.\n\n\"Hey, I have an idea,\" he said.\n\n\"What?\" she asked, her eyes bright.\n\n\"I'll be right back. Lie down on the bed.\" He pushed the covers back for her.\n\n\"What are you doing?\" she asked.\n\n\"It's a secret.\" Toby grinned, kissed her hard, and slipped out of the room. When he returned, she was on the bed but sitting with her arms around her knees, which he thought was a shame because it hid her lovely breasts.\n\n\"What's that?\" she asked, eyes narrowed.\n\n\"I figured I could practice some designs,\" he said. He set up a folding table and then put some tubes of paint on it along with a couple glasses of water. When he had them ready, he looked at her and shook his head. \"No, this won't do.\"\n\n\"What?\"\n\nHe sat on the bed and moved her arms to her sides, then nudged her knees down. \"I need to uncover my canvas.\"\n\nPuzzled but amused, she helped him remove her jeans, but then insisted he take off his shirt. \"I need something to look at, too,\" she teased, then ran her tongue along the center of his chest up to his chin.\n\nHe swallowed as his cock jumped, somewhat uncomfortable in his jeans. Later, he told himself.\n\n\"Come on, lie back,\" he said. He dipped a brush into some water and mixed it with some yellow paint.\n\n\"What are you--oh.\" Maya sucked in a breath and tried to hold still as Toby dragged the paint brush over her skin. \"You'll--you'll get paint on the sheets,\" she said breathlessly.\n\nHe shrugged and nipped at her earlobe. \"I don't care. They wash.\"\n\nTaking his time, Toby drew all kinds of nonsense designs on her body. There were swirls and figure eights and whatever else it came into his head to do. Sometimes he kissed her and let his hand wander with the brush over her stomach, or her thigh.",
        "She gasped when he sucked on one nipple as he teased the other with the brush.\n\nHe moved farther down, painting her shins and the tops of her feet. She warned him not to touch the bottoms, as she was ticklish. He obeyed, wanting her to know he respected her limits and to avoid a kick to the face.\n\n\"There,\" he said as he put the brush down and stretched out next to her. \"I think I'm done.\" He grinned mischievously. \"Shall I take a picture? I always do after I finish a tattoo.\"\n\n\"No!\" Her eyes grew wide. \"Absolutely not!\"\n\nToby laughed and rolled so that he half-covered her. \"All right. I'll just have to make do with the memory.\"\n\n\"Oh, no, you'll get paint on you,\" she said, tracing a finger along one of his tattoos.\n\n\"That's okay. I wash.\" He moved so that he was over her, bracing himself on his arms to take the weight. He kissed her lips, then her neck. \"I love you,\" he said before finding his favorite spot on her neck.\n\n\"I love you, too.\" She sighed and wrapped her arms around his shoulders.\n\n\"There's one place I forgot,\" he said, nipping at her bottom lip. \"But I don't need brushes for that.\"\n\n\"What?\" she asked, then fell back as he slid down her body, between her legs, and licked her sex. \"Oh, god yes.\"\n\nToby nudged her legs apart, lifting one over his shoulder, and flicked his tongue around her core. She gasped and cried out as he teased her. He loved the way she tasted, and the way she bucked under his caresses.\n\nHe tried to make it last, alternating long licks with short flicks and gentle sucking. He felt like he could have continued for hours, but he didn't want to torture her.\n\n\"Please,\" she breathed. \"I'm so close. Please.\"\n\nToby obliged and sucked gently on her sensitive bundle of nerves, relishing her cries as she came.\n\n\"That was fantastic,\" he said. \"I like doing that. Maybe I'll do it again later.\"\n\nMaya let out a laugh. \"I'm not sure I could take that.\"\n\n\"That's okay. There's other things I'd rather do first.\" Toby crept back up to cover her body with his, groaning as Maya started working to loosen his jeans. He raised his hips to help, then grew impatient and kicked them off himself.\n\nMaya wrapped her legs around him and he was about to slide inside her when he stopped. \"Wait, I almost forgot.\" He reached over to his nightstand and Maya put a hand on his arm.\n\n\"You don't have to,\" she said. \"I'm safe and protected.\"\n\nIt took a minute for him to process the words. \"I'm clean, too. Are you sure?\"\n\n\"Yes. But it's up to you.\" She stroked his face. \"It's okay if you're not ready.\"\n\nToby huffed out a laugh. \"Ready? I've been nothing but ready for that.\" He captured her lips in an intense kiss. \"I love you.\"\n\nMaya shifted under him and he couldn't resist any longer. Slowly, he entered her, savoring every second as he did. She closed her eyes and dropped her head back, letting out a long, satisfied sigh.\n\nToby groaned as she moved her hips, trying to find a rhythm. \"Stop,\" he breathed, \"or it'll be over too soon.\"\n\nMaya nodded and kissed along his jaw. It helped, but the little movements her body made as she kissed him sent shivers through him. When he felt like he had some control again, he started thrusting, moving his hips until he found a rhythm that worked for them both.\n\nToby lost himself in the feel of her for a while, until he couldn't hold himself back. He lowered his head and rubbed his cheek against hers before finding her lips for a deep kiss. His thrusts became harder as he felt his orgasm building. He could tell Maya was close again, too.\n\n\"Come for me, sweetheart,\" he whispered. \"I want to feel you.\"\n\nAnother moment and Maya cried out as she shook under him. As she tightened around him, he gave in to his release with a guttural sigh and crushed his mouth to hers.\n\nWhen he felt he could move again, he rolled to his side and pulled her against him. \"Feeling better?\" he asked.\n\nMaya smiled. \"Oh, yes.\" She traced a finger down his chest. \"You have quite the abstract design going here.\"\n\n\"Maybe this is how I'll paint from now on,\" he said. \"I can paint something on you, then we can roll around on some canvas and see what we end up with.\"\n\nShe laughed. \"I suppose that's one way to make art. Although I think mostly we've made a mess here.\"\n\n\"It's okay. I'd make this kind of mess any time with you. Come on, let's clean up.\"\n\nMaya yawned. \"I hope I last long enough.\"\n\nAfter showers and a quick change of sheets, Toby wrapped his arms around Maya as they lay in the bed. She fell asleep quickly, much to his relief. He hoped that she could obtain the restraining order without a lot of trouble, and hoped that would be enough to get Dean out of her life.\n\nRegardless, Toby thought, he wouldn't let her face Dean alone if he could help it."
    ],
    "authorname": "PennLady",
    "tags": [
        "het",
        "friends",
        "city"
    ],
    "category": "Romance",
    "url": "https://www.literotica.com/s/altering-the-plans-ch-07"
}
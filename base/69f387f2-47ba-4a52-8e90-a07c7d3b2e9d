{
    "title": "Collateral Ch. 14",
    "pages": [
        "Jake woke up with a head as big as Texas. With a groan, he turned only to smash against Klaus's solid shape. The man didn't seem bothered, his breath calm and even. But Jake felt a sudden rush of uncertainty. The night's events tumbled in his mind, first an incoherent succession of words, until he finally grabbed one end and began to pull slowly.\n\nThe club had been nice. Those guys had been nice, too. And he had felt amazing in his own skin. Those sweet things the guys had sworn by had been treacherous, and he may have drunk a bit too much.\n\nHe could not clearly remember how he got in bed. Maybe he had fallen asleep and Klaus had carried him. Just how bombed had he been? Apparently, a lot. He had the distinct sensation that there was something particularly important he needed to remember. Was it something he had done or said? At this point, he couldn't tell, but it was nagging the hell out of him that he could not yet grab that thing.\n\nSo, he had felt pretty hot after those drinks and all that dancing ... Klaus had been pretty nice about it all ... Yeah, he could still remember that wicked tongue across his skin, sucking on one nipple ... His cock was stirring only thinking about it. How could he be so hard, after getting one of Klaus's high class blowjobs? Wait, he hadn't. The guy had fucked his mouth instead.\n\nBut how on earth had they gotten to that? He could recall Klaus being pretty ready to take Jake in his mouth. Hmm, they had talked or something. \n\nThe sudden realization hit him like a ton of bricks. \n\n\"Shit,\" Jake mumbled.\n\nKlaus shifted in his sleep and Jake froze. He hadn't, no, no, no, he hadn't said something as stupid as 'I love you'. What would Klaus think now? Fuck, he wasn't ready for that announced breakup. It was supposed to be months from now. Fuck, his stupid mouth! \n\nHow was he going to repair this mess? Maybe he could pretend he could not remember anything. Yes, he was going to play it cool. And, now, that he thought about it, he had blurted some other stupid shit, such as admitting to his hidden stupid desire to fuck the guy.\n\nIt was unclear, even to him, when and how that thought had come to him. Maybe after they had fucked. He had wondered how it would feel to be the one doing the fucking. But Klaus didn't swing that way. He had been clear about it.\n\nSo he had screwed big time, confessing like an idiot, and telling the guy he was going to fuck him. If that wasn't going to make Klaus to send him back to Diaz packing, he had no idea what else would.\n\nThe only way was to pretend nothing happened. He could not remember Klaus's reaction to everything too well. The guy was a mystery even without making things complicated. And Jake was a complete idiot.\n\nAn idiot who blurted out inconvenient truths when drunk. He made a promise to himself never to drink again. It was obviously a dangerous habit. He tried to go back to sleep, but he found it was just impossible.\n\nThe first rays of sun found him still staring at the ceiling, repeating in his head, over and over again, that it wasn't true and he hadn't confessed, and that blaming booze was the only trick in the book that was going to work.\n\nBy the time he reached the 100th time saying to himself the same thing, he finally fell asleep.\n\n***\n\nHe was pressed against Klaus when he woke up again, one arm thrown possessively over the guy's waist, and one leg tangled with the other's leg. The man ruffled his hair and Jake looked up, only to be threatened to drown again in the blue gaze. He closed his eyes fast again.\n\n\"You cannot go back to sleep,\" Klaus chided him.\n\n\"I don't want to get out of bed,\" Jake whined and kept his eyes closed shut.\n\nAs long as he could avoid looking in the other's eyes, everything was going to be fine.\n\n\"After sleeping for so many hours? Unless,\" Klaus's voice became loaded with meaning, \"you engaged in some strenuous activities last night. Like trying to,\" the man left the words hanging for one second, to let it sink in, \"pop my cherry.\"\n\nJake's eyes opened.\n\n\"What?\" he asked, trying hard to ignore his galloping heart.\n\n\"Do not tell me you do not remember,\" Klaus teased. \"You were quite adamant about being the one on top, for a change.\"\n\n\"Me? On top?\" Jake began to laugh. \"Yeah, right. Don't tell me you want me to give it to you and you don't know how to ask. You know, because you're proud and stuff.\"\n\nKlaus seemed slightly taken aback with Jake's act.\n\n\"Wait, do you not remember?\"\n\n\"Are you serious? Did I say that? I was drunk, you know. Like, totally wasted.\"\n\nKlaus opened his mouth to say something, but then he smiled affably.\n\n\"Then it is good to know my chastity is safe from you.\"\n\n\"Good. I won't dare to mount a stuck up like you,\" Jake said quickly. \"You probably have a 10-foot pole up in there anyways. No room for my dick.\"\n\nKlaus grimaced and Jake wondered if he had gone too far. But the beautiful face returned to its natural relaxed state and Jake was rewarded with another smile.\n\nGood. Storm averted for now. Jake was a bit proud of being able to lie so easily. Who was he fooling? He could not lie again, if he was asked to do it. \n\n***\n\nKlaus chose to let Jake linger in bed a little longer and went straight to the gym. He needed a bit of physical challenge. There was a tingling in his fingers, more of a nervous nature than anything else.\n\nBang! The mannequin trembled, leaned backward and came back again for another well aimed punch. \n\nThe kid was trying to play him, by saying he could not remember. He could understand the reasons, but that did not mean he liked it. Jake was like an open book, albeit trying to pretend nothing happened. \n\nFor once, he was thankful for the shin guards. The mannequin was getting it good now, as Jake would have said.\n\nHe stopped and grabbed a bottle of water. What was bothering him so much? He should have been more than pleased with how well Jake understood the situation. They were both in for the fun. Just two men enjoying their time together, however long or short.\n\nExcept that things did not feel right. Any other day, Klaus would have said that the perspective of a clingy boyfriend was nauseating, to say the least. Others had tried to entice him with false declarations of love. He had laughed them all off. They had not felt real.\n\nBut Jake, the night before, his eyes dark and deep, his lips tasting of daiquiri, his heart open and threatening to overflow, that had been real. \n\nHe was caught in the middle. What was it that he wanted, truthfully? A sudden, incontrollable impulse, was telling him that he wanted, no, he needed, Jake to admit his confession, to say it again, while sitting in his lap and filling Klaus's arms like no one had ever done before.\n\nBut that was too dangerous a thought to entertain. Fleeting sensations meant nothing. What was he going to do with a broken hearted boy once he was going to leave?\n\nTake him with you. Put him under lock and key. Make him yours. He needed to chase away these stupid little thoughts. This was not how things had to happen. The young man was enthralling. Beautiful. A firecracker in bed. But, by all means, he was supposed to be nothing special.\n\nWhat was he to do with a juvenile love confession like that? He should have known better than to get involved with someone so inexperienced. But Jake seemed to understand all the implications. He was bright, well beyond his upbringing, seeing the circumstances of his life.\n\nThat was why Jake pretended he could not remember anything. He knew he was not supposed to nurture such sentiments. Klaus could not agree more. All that was left was to pretend nothing had happened, just the same, and enjoy the young man currently warming his bed, until their passion would, inevitably, burn out.\n\nA good decision.\n\n***\n\nOne that lasted until Klaus went outside, a couple of hours later, to find his raven haired beauty relaxing in the pool. \n\n\"Hey,\" Jake swam to the edge. \"Your pool is awesome. Wanna join me?\"\n\nKlaus had no clear recollection of how fast he was out of his clothes.\n\n\"Wow,\" Jake laughed. \"Are you sure you want to show your junk to your people around here?\"\n\n\"Shut up. You are the one with too many clothes.\"\n\n\"It's just swimming shorts,\" Jake protested, but Klaus grabbed him and forced him to get rid of the only piece of clothing he was wearing.\n\nThe kiss was hungry. Jake gasped for air, once Klaus finally decided that he was allowed to breathe.\n\n\"What happened with the decision not to let your staff see you smooching me?\" Jake smiled.\n\n\"They will get used to it. Because I plan on doing it again,\" Klaus said.\n\n\"Really? Even in front of Agnes?\"\n\n\"She is a very understanding person. She would have no qualms with her boss falling ... For a pretty boy's charms, like you.\"\n\n\"Falling, eh?\" Jake smiled, but bit his bottom lip, something Klaus had noticed him do when thinking about something. \"I can see you standing right over there without a problem.\"\n\n\"Do not make me want to fuck you right here, right now.\"\n\n\"You're hard, man,\" Jake grabbed Klaus's erection and began rubbing it slowly. \"Let's go back to the bedroom. I need to give you head.\"\n\n\"You need?\" Klaus asked.\n\n\"Yeah,\" Jake admitted plainly, his eyes traveling to the side, like he was trying to avoid Klaus.\n\nSometimes things had to be taken head on. Klaus tipped the young man's chin and looked him in the eyes.\n\n\"What are you running away from, Jake?\" he asked in all seriousness.\n\n\"Nothing,\" Jake replied quickly.\n\n\"You have been nervous ever since this morning.\"\n\nJake exhaled.\n\n\"Look, I'm sorry,\" he said, letting his arms slack. \"I don't remember everything, but I might have said some stupid shit last night.\"\n\nKlaus let their foreheads touch and exhaled loudly.\n\n\"I distinctly remember what you said and it was not remotely stupid.\"\n\nJake kept his eyes down.\n\n\"That's not how I remember,\" he mumbled.\n\nKlaus could feel the young body close to him strung like a violin. He brought his hands up, cupping the boy's face, his thumbs moving slowly, caressing the tight jaw. One of them dragged a full bottom lip lower. \n\n\"I would like to hear that again,\" he said slowly.\n\n\"No way,\" Jake tried to shake his head. \"I ... I didn't mean it.\"\n\n\"Are you sure? You are not being honest.\"\n\n\"How do you know? I was just drunk.\"\n\n\"In vino veritas, the ancients used to say.\"\n\n\"I have no idea what that means, but you're wrong,\" Jake continued to remain stubborn, still avoiding Klaus's steady gaze.\n\n\"Say it again,\" Klaus said.\n\n\"Why? If it doesn't mean anything.\"\n\n\"Stop dallying. You know I always get what I want.\"\n\n\"Not this,\" Jake struggled against him.\n\n\"Why?\"\n\n\"Because.\"\n\n\"Stop acting like a kid.\"\n\n\"Compared to you, grandpa, of course I'm a kid.\"\n\n\"Do not make me want to put you with your ass up.\"\n\n\"See? You see me just as a kid, anyway.\"\n\nKlaus frowned, frustration taking over. Then he started laughing.\n\n\"The world will not end if you admit it, Jake.\"\n\n\"No, you'd just send me packing,\" Jake replied. \"No way. I still want that tuition thing.\"\n\n\"Well, how practical of you. I will make all the arrangements, and I will make them as soon as I get back from the trip. I will honor my promise, regardless of what happens between us.\"\n\n\"Good to know. But I will pay back every cent, don't worry.\"\n\n\"Now that you are more at ease in regards to my obligations towards you, how about I hear that confession again?\"\n\nJake looked up and bit his lip hard.\n\n\"It would just sound like I say it so I can get something out of you.\"\n\n\"You get something and more, regardless. This is a totally different thing.\"\n\n\"I ... Nope, I cannot.\"\n\n\"You are driving me insane here a little,\" Klaus groaned.\n\n\"And you're driving me up against the wall. Do you want me gone that badly? Do you already have enough? And you said ...\"\n\nSometimes the only way to make Jake shut up was to really shut him up. Klaus tasted the young man's mouth again, this time making sure to deepen the kiss and coax Jake into responding in kind.\n\n\"You are not going anywhere,\" he said in a raspy voice when none of them could take the lack of air anymore. \"Do you understand? Just nod, if you do not wish to talk.\"\n\nJake obeyed. What a miracle. He was such a good boy most of the time that his sudden bouts of stubbornness were a surprise and a nuisance.\n\n\"Alright, now say it.\"\n\nJake looked at him with puppy eyes.\n\n\"And it doesn't change anything?\"\n\n\"Correct.\"\n\n\"Then why?\"\n\n\"My ego is in terrible need of being flattered.\"\n\nHe often said he never lied. Yet, right now, as soon as the words left his mouth, he knew they were not true. His ego was fine and dandy. Other bits, apparently neglected for too long, were trying to demand their rights, their voices growing stronger and stronger.\n\n\"All right,\" Jake exhaled.\n\nThe look in the dark eyes was intense. Klaus stood still, afraid that even the slightest noise would scare off the handsome man in his arms.\n\nJake finally opened his mouth, and his eyes fluttered shut, in genuine shyness, and not studied modesty.\n\n\"Mr. Metzger, I am terribly sorry to bother you, sir, but there is an urgent call.\"\n\nThe servant did not even dare to look up. Klaus cursed inwardly. \n\n\"Thank you. I will take that right away in my office.\"\n\nJake slid away from his arms like an eel. The moment the servant was gone, Jake was back into his swimming shorts and in a hurry to leave the premises.\n\n\"And where are you going?\" Klaus questioned.\n\n\"I need to dry and comb my hair,\" Jake said quickly, putting distance between them. Hoping to settle and calm his thoughts. \"And you better take that call. It sounds serious.\"\n\nThe water splashed as Klaus cut it with a short annoyed move. Yes, he needed to take that. Why was work interfering with his personal life at such an inopportune time?\n\n***\n\nJake had been a mess the entire day. All right, so Klaus wasn't mad about that stupid confession, but he was pretty weird about it. Maybe the guy was just playing with him, seeing that he could be a fucking sadist once in a while.\n\nHe decided to blow some steam playing video games, but after hours of fucking up the same mission over and over again, he grew tired and frustrated. In the end, he made his decision. If Klaus was going to cut him off, that would be the end. He was not going to be stupid and clingy, like a fucking idiot.\n\n***\n\n\"Hmm, your bed is not that bad,\" Klaus brushed his lips over Jake's ear, taking him by surprise.\n\nJake almost jumped out of his skin. He drew a deep breath.\n\n\"So, we need to talk,\" he said, his voice a bit drowsy from sleep.\n\n\"I have no intention to spend precious time talking,\" Klaus began peppering small kisses all over his cheek, ear and neck. \"What I want is to spend the rest of this night inside you.\"\n\n\"Isn't your flight pretty early?\"\n\n\"And? You can sleep in, if you want.\"\n\n\"No way, boss will have my ass, if I'm late,\" Jake protested, although meekly.\n\n\"Then I will instruct Agnes to serve you some strong coffee before you leave. Also, you are not allowed to manipulate any machinery. Is that clear?\"\n\n\"Yeah, but are you serious? The rest of the night? Like all of it?\"\n\n\"Do not underestimate me. And I have only a few hours before I have to get ready. Then I will not have you for an entire week.\"\n\n\"Okay, your bed or mine?\" Jake turned and embraced the man.\n\n\"We should give this bed a proper inauguration, don't you think? And, after I am gone, I really want you to catch a few hours of sleep, without me bothering you by moving about while getting ready to leave.\"\n\n\"Okay,\" Jake agreed.\n\nThis was familiar. The pressing of lips against lips, hungry hands pushing away every little bit of fabric, everything about Klaus. Jake was glad. Most probably, the guy thought that whatever Jake had blurted out like a moron, was just a joke or something stupid. And that was fine by him.\n\nReally fine, he gasped as Klaus entered him slowly, without breaking the kiss. His body was going to miss this.\n\n\"Fuck,\" he whispered, moving his head to the side, and grabbing Klaus by his biceps.\n\n\"Yes, exactly,\" the wicked angel chose to joke. \"You take me in so well. I almost think you will not let me go.\"\n\n\"Stop it,\" Jake keened softly. \"And I will let you go.\"\n\n\"Really?\"\n\n\"Only after you get me off,\" Jake shot back.\n\nKlaus was moving so gently it hurt somewhere deep inside. Not in a physical way, as each thrust was at the perfect angle, making him moan loader and loader, pushing him higher and higher.\n\n\"I need to rub my dick,\" Jake demanded in a strangled voice. \"You're killing me here.\"\n\n\"Let me,\" Klaus batted his hand away and captured his cock in a tight grip.\n\n\"Why are you so slow? It's driving me nuts,\" Jake complained, the tugging on his dick torturous.\n\n\"I want to last as much as possible,\" Klaus explained. \"Although it might not be doable, seeing how tightly you are squeezing me.\"\n\n\"Sorry,\" Jake mumbled.\n\n\"You are amazing, Jake. Never say sorry,\" Klaus kissed him and pushed him into the pillow.\n\nAnd then things got real. Maybe it hadn't been such a good idea to complain. Klaus straightened up and used his own thighs as leverage to drag Jake towards him. All this time, the hand on his dick was moving to the same rhythm. The bed was making weird sounds now.\n\n\"Klaus,\" he moaned, \"we're waking up the house.\"\n\n\"Do not worry, love,\" Klaus grunted. \"There is no one else on this level.\"\n\n\"Good,\" he whispered, trying hard to bury his face into the pillow.\n\nLove? Why was the guy throwing words at random now? But it did fucking wonders to his dick, because he began spewing jizz like on cue.\n\n\"Fuck,\" he arched against the bed, as he came.\n\nKlaus was still ramming into him, with increased speed. At least, he let go of the spent dick, but only to push wet fingers against Jake's lips.\n\n\"Lick,\" he ordered shortly.\n\nHe could feel the intense blue gaze on him, even in the faint bedside light. He stuck out his tongue, making sure to lick those elegant fingers clean.\n\n\"Yes, Jake, like this. Look at me.\"\n\nTheir eyes met and the guy began pushing harder and faster. Moments later, when Klaus collapsed on top of him, Jake exhaled. He let his hands rest on sweaty shoulders.\n\n\"You can sleep with me,\" Jake said, after a few minutes of silence.\n\nThe guy didn't seem like he wanted to move. \n\n\"It is exactly what I am doing,\" Klaus chuckled.\n\nWhat the fuck? He could feel the guy growing hard inside him again. Was that even possible? Yet, his own cock twitched in sympathy.\n\n\"We seem to be in an accord,\" Klaus added and he began moving again.\n\n\"I can't believe you're not joking about wanting to spend the entire night inside me,\" Jake mumbled.\n\n\"Are you complaining? I can feel how much you are enjoying it,\" Klaus placed one hand over Jake's hard on.\n\n\"Not really complaining. Just ...do it.\"\n\n\"Thank you for the vote of confidence.\"\n\nConfidence? This guy needed no extra confidence from no one. He was handsome, like angel level beautiful, rich, powerful, and had a huge dick always ready for action. If Jake had had no reasons to complain about getting too much attention from Klaus until now, he had a feeling he would need some pampering over the next few days. \n\nThis time, the guy didn't lose any time with slow foreplay. Jake braced himself and let the flow catch him, twist him, and carry him away. Yep, he was going to be sore tomorrow. \n\n\"Is this you fucking your fill?\" Jake felt like he could not keep it quiet, despite the vigorous fucking he was getting.\n\n\"You certainly do not wish me to go away without being completely satisfied.\"\n\n\"Why? Would you find someone else to fuck?\"\n\n\"Definitely not.\"\n\nKlaus loved shutting him up by kissing him. He would have lied if he was to say he didn't feel anxious about Klaus leaving. Anything could happen in a week.",
        "***\n\nKlaus moved slowly, hating he needed to go. After three times in a row, he should have been utterly satisfied, yet, his hand lingered on the boy's sweaty forehead. \n\nJake looked at him with drowsy eyes.\n\n\"Feel free to call in sick. I will make sure ...\"\n\n\"No. I like going there. I like working.\"\n\n\"All right.\"\n\n\"You should hurry.\"\n\n\"Look who thinks he can tell me what to do. Off I go, since you want so badly to see me gone.\"\n\nKlaus got up, finally. The bed and the man inside it looked much too inviting. He had plenty of work to do in Berlin, and such distractions should not have been in the way. He kissed Jake one more time.\n\n\"Head back to sleep. It is still early.\"\n\n\"Hey,\" Jake called softly.\n\nThe young man grabbed Klaus's hand and placed a tender kiss inside his palm. Klaus closed his hand, for once, thinking that a simple gesture like that could somehow keep that kiss longer.\n\n***\n\nHe was ready to go out the door, carefully checking his watch. There was a thumping sound behind him that made him turn in surprise. Jake almost jumped into his arms. The kiss was hot, too. \n\n\"Don't fuck anyone else,\" Jake said shortly, after releasing him.\n\nKlaus ruffled the raven hair. \n\n\"I told you. You have no reason to worry.\"\n\n\"You're a sex fiend,\" Jake complained, looking away. \"You won't last a week without fucking something.\"\n\nKlaus bit his lips, trying hard not to laugh. \n\n\"That will not happen.\"\n\n\"What do you mean?\" Jake cocked his head to the side.\n\n\"You will see,\" Klaus said enigmatically. \"Now go back to bed if you do not want me to give up on this business trip and drag you there.\"\n\n\"No way! I'm gone,\" Jake began moving backwards.\n\nKlaus caught him just before the stairs to kiss him again.\n\n\"You are not allowed to fuck around, either,\" he warned, before finally letting go.\n\n\"I won't. I'll wait for you!\" Jake almost yelled after him.\n\nThe smile on his face must have been strange, if Klaus were to take after Thompson's slightly surprised expression when he climbed inside the limousine.\n\nTBC\n\n*****\n\nAuthor's note: Thank you for continuing to enjoy this story. So this was the morning after and more :) And special thanks go to people who take the time to comment. Your insight is amazing!"
    ],
    "authorname": "laurasfox",
    "tags": [
        "gay novel",
        "gay male",
        "anal",
        "anal sex",
        "romance",
        "romantic"
    ],
    "category": "Gay Male",
    "url": "https://www.literotica.com/s/collateral-ch-14"
}
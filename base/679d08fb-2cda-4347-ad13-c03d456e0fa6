{
    "title": "Little Packages Ch. 05",
    "pages": [
        "Ben\n\n(Spring Break, Late March)\n\n\"I must be nuts,\" I said out loud for the 500th time in the last month. Kitten looked at me and laughed. She continued to bounce alongside me, holding my hand as we made our way to the Magic Kingdom entrance. It was early and the crowds were, well, slightly less insane. One of the benefits of staying at the resort. You could get in a little earlier and you didn't waste time trying to get to the park, find parking, and then make your way to the entrance, all so you could wait for an hour.\n\nSix weeks earlier and shortly after she stopped squealing at me over the phone, I told Kit she was in charge of planning our time at Disney. She accepted and promptly took a deep dive into Disney planning. The one time I asked if she wanted me to take a look at what she had planned I got a look that would freeze rivers.\n\nI stopped asking after that. As of this moment, I had little idea of what she had planned and whenever I inquired, I got a \"trust me, Daddy\". But now that we were at Disney, I was a little nervous about how well everything she had planned would hold up.\n\nDespite being told I was behaving like a grumpy old man the trip so far was remarkably smooth. I was concerned her ongoing \"adorable tardiness\" might make an appearance when trying to get to the airport on time for catching our flight. But Disney will focus a girl. We were there in plenty of time, and aside from the usual long lines, delayed flights, and cramped seats, the trip from Montreal to Orlando was surprisingly drama-free.\n\nI didn't even have to get into a fight with her to get a decent night's sleep once we arrived at our hotel in the park. She wanted to be well rested for her big day. I thought she'd be up half the night bouncing off the wall, but to my surprise, she was out like a light before 9.\n\nOf course, that meant she was up around 5 am. Fortunately she let me sleep in as she got ready.\n\nHer Disney debut outfit was a black halter top with a flared red skirt and white polka dots. Her collar was a red and white scarf around her neck. She was even wearing a sensible pair of sneakers, knowing how much walking was ahead of her today. All of this was topped with a wide brimmed hat with mouse ears. She desperately wanted to buy and wear a regular set of ears, but recognized that they didn't offer much shade. And when you're a fair complexion redhead in Disney, you need all the shade you can get. I still worried about her exposing too much skin so I spent 20 minutes this morning with a squirming little girl putting enough sunscreen on her so she could probably stand next to an exploding nuclear bomb and not get burned.\n\nI got a lot of huffs and exasperated \"Daddy...\", but it was not negotiable. I have travelled with cranky sunburnt people. It is no fun.\n\nI was slightly worried about a potential weird tan line around her neck, but one war at a time. Hopefully the sunscreen would prevent that from happening.\n\nShe was adorable. She knew she was adorable, which meant she could get away with a certain amount of teasing.\n\n\"I never knew you were nuts, Daddy. It's a complete shocker to me,\" she said. \"You've always made such rational decisions.\"\n\nI lowered my sunglasses and shot her a look which made her giggle. Then she got up on her toes and kissed me, which always helped. We also got at least three scandalized looks from other people in the lines around us. Once upon a time that would have worried me, now it just amused the hell out of me.\n\n\"Come on, Daddy. It'll be good. It'll be the fun kind of nuts, I promise,\" she said.\n\nI couldn't help but laugh at her playfulness. 'The fun kind of nuts.' Oh yes. There was no doubt that most of the last six months has been the good kind of crazy, which was a pleasant change from the previous two years of really bad crazy. Reestablishing my life, buying a new house, finding new love even if it was in the package of a 20-year-old, frequently bratty, little girl.\n\nBut the decision to take that bratty little girl to Disney might be topping my nuts list.\n\nI was trying to shove those thoughts into a deep corner of my brain. I didn't want to have them. That was the old me. The one who overthought and planned for everything. I just wanted a week, at Disney, with my girlfriend. I just wanted to keep this miraculous streak of happiness rolling.\n\nI wanted the good nuts. Absolutely.\n\nBecause I already had a best friend recently explain to me why I was just plain, straight-up nuts.\n\n****\n\n(Toronto - Two weeks earlier)\n\n\"You are batshit insane for doing this,\" Meg said, sipping a gin and tonic, her drink of choice when she wanted to tear into someone a bit, which was normally always. I was nursing a diet coke instead of a pint. Happy or not, I just couldn't touch alcohol these days. Not since the accident. I'm not sure I ever would again.\n\nWe were at a bar we always liked to hit in Kensington Market. It was laid out weird, but you could always find a cozy corner to have a conversation. It was also the perfect spot to introduce Kit to a select few of my Toronto-based friends. They weren't all huddled around her like she was on display. Instead, we could move from table to table and chat with small groups. \n\nDespite telling her that it wasn't tit for tat, and she didn't have to go to Toronto just because I was taking her to Florida, Kit insisted on going for a few days. She thought it was about time she met a few more of my friends. Plus, she figured the longer she was a mystery, the greater the likelihood of her obtaining mythological status.\n\n\"It can be fun being worshipped, Daddy, but there are limits,\" she said.\n\nAt the moment, she was talking to a couple of the women from my former policy shop. She appeared to be holding her own, even if the intricacies of infrastructure policy were a little outside of her interests. I think it was more likely they were trying to determine it was true that she tried to tear the face of their boss's wife. This provided the perfect window for Meg to pull me aside and do what she's been wanting to do since we arrived the night before...question my sanity.\n\n\"I am not insane. There's a method to the madness,\" I countered. She raised her eyebrow skeptically. It would work better against me if I didn't know how long she had practiced being able to do that in law school. She thought it would be an effective tool in court.\n\n\"Look, it wasn't the original plan, but this is what I have. It'll be fine,\" I added.\n\n\"Out of curiosity, what was your original scheme?\" she asked.\n\n\"Look, she's always wanted to go to Disney, so I thought it would be a nice treat. Originally I was going to do it at the end of the school year, but she's landed a new job and she's very excited about it and it starts right after classes end. Then I was thinking maybe at the end of the summer, right before classes start, but hey, a redhead in Florida at the end of August...\"\n\nShe nodded her head. \"Unless you want to turn her to ash, not a good idea. Ok...\"\n\n\"So I thought, why not Spring Break. A bit sooner than I had planned, but it gives her a break from Montreal and the slush, and a recharge before exams. Plus, things are going well so why not?\" I said. There, that was a solid argument.\n\nMeg shook her head.\n\n\"I enjoy the meticulous planning of your spontaneous decision,\" she said, taking a sip from her drink in an attempt to hide her smirk. She failed.\n\nI casually flipped her the finger, which was my way of admitting defeat to her sarcasm.\n\n\"So I've explained my reasoning. Explain why I'm a mad man,\" I said.\n\nMeg put down her drink and leaned across the table. She held up an open hand and began to tick the point off on her fingers. Again, effective, if I hadn't been around watching her practice the stunt a couple of decades ago.\n\n\"First,\" she said, tapping a finger, \"the two of you have been together about five months. Staying at Disney for five days is a crazy amount of money to spend on someone you've known for that long. I know you're doing fine, and you don't like hearing that, but it's true.\n\n\"Second,\" she said, tapping the next finger and not giving me a chance to address her point, \"Vacations together are a huge step. It's one thing for the two of you to be all cozy together in your love shack when there's no stress or decisions to be made. It's something else when you're dealing with planes, hotels, and deciding who does what.\n\n\"Third, Disney is a zoo. It breaks people's will to live. People who have been together for years can start screaming at each other like lunatics because the line to Space Mountain is too long. You're going there with someone you've only just started dating. You and Beth nearly killed each other there once and you had been married for years.\n\n\"And fourth, yes, you're happier than I've seen you in years. But I worry about what happens if someone scandalized by the two of you being nauseatingly affectionate together given your age difference. You and that cane make me nervous. And for good reason,\" she said, sitting back in her chair.\n\n\"One time I try and kill someone with my cane, and I'll never live it down,\" I said, attempting to bring some levity to things. \n\n\"Don't,\" she said, her stare squashing the idea of joking about it, before it got too far. Fair enough.\n\nI sighed. Knowing Meg, she had practiced her arguments in front of a mirror before coming here and had also practiced shooting down my counterarguments. Great lawyer, loyal but occasionally frustrating friend. Spectacularly shitty wife. At least she learned her lesson after the second marriage.\n\n\"Look, I'm not going to say those aren't some valid concerns. But I do have to get out there and start living my life and you know I have the money. Plus I know what Disney is like. We've done comic cons, and while they're not the same, we are somewhat familiar with being stuck in an overcrowded space filled with unhygienic lunatics all wanting to do the same thing at the same time.\n\n\"Besides, she's doing most of the planning at the park, and she's been diving face first into it. Anytime I ask if she needs a second set of eyes, I get a death glare, so I'm content to follow her lead,\" I said.\n\n\"And you're both ok with that arrangement?\" she said.\n\n\"Sure. Of course,\" I said. I got the raised eyebrow, but she moved on to the topic that tended to worry her the most.\n\n\"And your temper?\"\n\nI leaned across the table to look her in the eye. I had been joking before, but I want to emphasize how serious I was. \"Unless I run into that piece of shit on the 'It's A Small World' ride, I think I'm safe. Besides, it's not my temper you have to worry about...\n\nAs if on cue.\n\n\"Are we talking about my temper,\" Kit said, plopping down in the chair next to me at the table making me immediately feel lighter. I took her hand, gave it a squeeze and put it up to my lips to give it a kiss. She giggled. Meg made a face that indicated she was probably going to need another drink.\n\n\"Meg has concerns we're about to go all 'Natural Born Killers' at Disney,\" I said. She gave me a puzzled look.\n\n\"It's a movie. Before your time,\" I said. She shrugged. Once again I made a mental note to encourage her to watch some of the movies that didn't involve superheroes, science fiction, or wizards. Oh, and that wasn't animated.\n\n\"We'll be fine. Ben's in charge of getting us there and I'm in charge once we get there. I've got everything planned out. It's all good. Unless someone says something bad about my man, then I get all Wolverine on their ass,\" Kit said, making some kind adorable gestures with her hands, indicating claws popping or something.\n\nI turned my head away and covered my mouth so she couldn't see me smirking. Meg just shook her head.\n\n\"Just remember, I'm not licenced to practice law in the States if you get in trouble. And they have the death penalty there,\" Meg said.\n\n\"Disney has the death penalty?\" Kit said, with big, wide-eyed seriousness that I was getting used to but for which Meg had no defence. I could tell she was wondering if Kit was serious right until she started cracking up. I joined her. It was apparently the final straw.\n\n\"I hate your nauseating geek love. I need a drink,\" she said, getting up from the table and heading towards the bar.\n\nI looked at Kit and shook my head.\n\n\"You are an evil little girl,\" I said.\n\nShe leaned towards me, smiled, and said quietly. \"Yes, but I'm *your* evil little girl, Daddy. Too bad we're staying at Meg's tonight or I'd show you how evil.\"\n\n\"Maybe you can be quietly evil,\" I replied. She looked doubtful.\n\n\"So how was talking with my friends and former co-workers?\" I asked.\n\n\"I'm considering switching out of design and becoming an infrastructure policy analyst. It's a deeply fascinating subject and I've become smitten,\" she said, nodding her head in an attempt at being serious.\n\nI was not fooled for two seconds. No one is eager to become an infrastructure policy analyst. It's one of those things where you wake up one day, look around and think, \"how the fuck did this happen?\"\n\nAll of which I summed by responding, \"Uh huh. Really?\"\n\n\"Well, maybe not,\" she said, seeing I wasn't going to go for the bait. \"Mostly it was about how we met and if it's true I was arrested after punching Marie in the face.\"\n\nThat got my attention. I knew things had been too quiet on that front. I could feel the urge to grab Meg, drive to Matt's house, and show him what assault and battery really looked like. Kit could see I was getting agitated and put her hand on mine.\n\n\"Relax, no one believes it for a second. They didn't believe it when she just happened to pop by the office to loudly say it in the office, and they really didn't believe it after meeting me. Most of them are already looking for other jobs, by the way.\"\n\nI sighed. \"I said she was trouble.\"\n\nShe leaned over and kissed me on the nose. \"I believe a wise Daddy told me to ignore people like that and just focus on being happy.\"\n\n\"He sounds like a clever bastard,\" I said.\n\n\"He's got his moments,\" she said, and then took a sip from her ginger ale. \"So, what do you want to do next to drive Meg nuts?\"\n\n\"I thought you were warming up to her?\"\n\nShe nodded her head. \"Oh, I am. But she's so easy and fun to tease. And honestly, I think she could use some. She's wound too tight.\"\n\n\"Whose wound too tight?\" Meg said, magically reappearing. I'd forgotten how easy it was to surprise people in this place.\n\n\"Oh, Marie,\" Kit said, lying with an ease that should be a little worrying to me. Before Meg could warm up to the subject, Kit hit her with the jab. \"Sooooo, we were wondering...just how soundproof are the rooms in your condo?\"\n\nI swear I could see a new strand of grey hairs spontaneously develop on her head. She closed her eyes and took a deep breath.\n\n\"So how long is the karmic punishment for being a bitch to you after I caught you parading around naked at his house?\"\n\nKit grinned.\n\n\"Half naked,\" she corrected. \"And long.\"\n\n****\n\n(Disney - Spring Break)\n\nOnce we got inside the park I became concerned Kitten's face might be permanently locked into some kind of Joker grin. She couldn't stop smiling, absorbing all the Disney she could. However, I could tell Main Street was torturing her. All those shops, with so much Disney stuff she couldn't buy.\n\nGoing into the shops violated her plan, which was to hit a bunch of rides before 11 am, which is when the crowds were supposed to surge. So no time for shopping. But that wasn't the only reason why Main Street was torturing her. Even if we had the time, she couldn't buy it all. And I wasn't allowed to buy it for her.\n\nIt was part of The Deal. She couldn't say no to a trip to Disney. She didn't have that much willpower. But she was adamant I wasn't spending anymore money on her once we got there. That meant I wasn't allowed to buy her anything. Even last night, after we hit the hotel, I was still trying to change her mind. I figured once she saw the reality up close, she might ease up.\n\nIt was a longshot and she wasn't going for it.\n\n\"Kitten,\" I said, trying to warm her up, \"I'm not sure you really know what you're taking on by saying that. Disney is designed to make you want to spend money. They hired people with doctorates to design a park that makes you want to joyfully part with your money. You are subjecting yourself to a hefty level of torture.\"\n\nShe continued to unpack, ignoring me.\n\n\"We've been through this, Daddy.\"\n\n\"Princess...\"\n\nShe turned around and put her hands on her hips. Yes, it was her Serious Little Girl look, but it was honestly so adorable it was all I could do to keep a straight look on my face.\n\n\"Daddy, are you going to tell me how much you spent on all of this?\" she asked, knowing the answer.\n\n\"You don't tell someone how much their gift cost, Kit. It's pretty tacky.\"\n\n\"Ok, but I know roughly how much you spent on this and it was thousands, Daddy. Thousands. No one has ever spent that kind of money on me before and it blows my mind you would do this for me,\" she said.\n\n\"But...\" I started. She held out a hand.\n\n\"Nope. I'm thrilled that I'm here and I love you for doing this. But I've saved up money over the last couple of weeks and I have enough to get a few nice things while I'm here. Plus, I've done comic cons. I do have some will power. I'll be fine,\" she said, ending the discussion.\n\nAnd now we were walking down Main Street and I could tell her will power was taking a beating. Sure, you can resist things at a comic con. You can go to areas of the con where they aren't trying to sell you things. Disney is designed to make you buy things everywhere you look. Go to Disney...see how long you last before your childhood starts screaming in your brain to buy all the things. Good luck resisting it.\n\n\"How are you holding up, Kitten?\" I asked, as we continued down the street. Her head kept swivelling around.\n\n\"You...weren't wrong about it being hard to resist stuff,\" she admitted.\n\nIt seemed inappropriate to gloat. I had an idea of how to help, but I was going to mention it to her later. For right now, I got her mind back on task. \n\n\"So, where to first, my Kitten?\" I asked. We were getting near the end of Main Street, so a decision had to be made soon.\n\nShe shook her head and looked up at me.\n\n\"Pirates!\" she said with glee. We hung a left and headed in that direction.\n\nThe next few hours were a lot of fun. Disney can be fun if you just relax and don't stress out. Kitten must have read that somewhere, because that's exactly what we did. We didn't beat it from ride to ride, trying to frantically cram in as much as we could. We would do a couple of rides, take a slow stroll over the next Disney section, moving in a clockwise fashion. Kitten would consult her phone and then say she wanted to take a break in some shade, or hint that something cool to drink would be nice.\n\nI didn't ask, but I could tell she was moving at a slower pace so as not to hurt my knee. We were ambling slowly around the park. Her need for breaks and shade were all designed to make sure I didn't strain my knee. I smiled as she went over to one of the waterways and waved at people going by on a boat. Her joy was infectious.\n\nJust before noon, we finished the Haunted Mansion and she then called for mercy, which meant food, shade, and air conditioning. We managed to find a spot and enjoy the quality, reasonably priced food that Disney is known for. She took off her hat, and ran her hands through her hair.\n\n\"Blah, I'm a sweat spot,\" she moaned. \"I knew it would be hot, but gah.\"\n\nI took a pull on my water. I learned a long time ago not to drink soda in this kind of heat. It was creeping over 30C and it probably had another five degrees to go before it peaked. The humidity also felt like it was about 110%.\n\n\"I know. What kind of lunatic builds a theme park in a marsh in Florida?\" I said.",
        "\"Seriously.\"\n\n\"Sounds like someone could use a break,\" I said. \"Where's that in your master plan?\"\n\nShe reached into a pocket in her skirt and pulled out her phone, made a few gestures and called up her master list. She flicked a persistent strand of sweaty hair back off her head for about the 10th time. I reached into the bag I had been tasked with carrying and got her both a hair elastic and a cloth to mop her face with. She took both appreciatively.\n\n\"I must look so gross right now,\" she said.\n\n\"Nah, hottest woman here,\" I said. \n\n\"Literally. God, I'm not used to this kind of humidity. I feel like a wuss,\" she said, and then sighed. \"I had two possible plans for today. If we were feeling good, keep on going and see as much as we could. If we were feeling hammered and exhausted by lunchtime, head back to the hotel, recharge, and come back in a few hours when it's cooler.\"\n\nShe looked wiped out after just a few hours, and the next few weren't going to be kind to either of us. Plus, I didn't care what SPF I had put on this morning, she was going to need something to cover her shoulders or things were going to get ugly.\n\nI didn't say any of that, of course. But I was hoping she would make the right call. But just to help...\n\n\"We did see that awfully nice swimming pool at the hotel when we checked in last night,\" I said.\n\n\"True. And I have a few new swimsuits to show you...\"\n\n\"Plus, we haven't christened the room yet, which is sacrilegious,\" I said, smiling.\n\nShe laughed.\n\n\"Ok, ok, we'll finish up, head back to the room, take a break and come back when it gets a little cooler. But I'm not spending the whole day at the hotel, no matter how charming and distracting you think you are. You're lucky the park has extended hours this week otherwise you wouldn't be as persuasive.\"\n\n\"I promise not to distract you for too long,\" I said. \"We'll be back here in no time at all.\"\n\n***\n\nI'd had every intention of distracting her quite a bit once we got back to the hotel room, but the trip back sapped a lot of our will to live. The first 10 minutes was simply sitting naked in our room, nowhere near each other, and letting the air conditioning work its magic. \n\nEventually the lure of the pool called. Kitten went into the bathroom to \"freshen up\". I simply went over to my suitcase, grabbed a pair of swim trunks and pulled them on. Then I sat down and waited. \n\nIn a remarkably efficient 20 minutes she came out of the bathroom. Her hair was now in pigtails and she was wearing flip flops. She had a beach towel on her arm and a wrap covering her body so I couldn't see what she was wearing. \n\nShe could tell I was trying to figure it out and gave me a grin. \n\n\"You'll just have to wait until we get to the pool, Daddy,\" she said. \n\nI rolled my eyes. My little girl did like to make an entrance sometimes. I used my cane to leverage myself up, held out my arm and we headed downstairs. \n\nThe pool was the usual subtle affair you expect from anything to do with Disney. Which is to say, it was massive with areas for kids to play in and areas for adults to relax in. There were also plenty of loungers and umbrellas. Even though a lot of people had the same idea we did to abandon the park during the heat of the day, we had no problem finding a spot with shade. As a bonus, it also had a cool misting system to help keep us from overheating. \n\nKit flopped down and moaned. \n\n\"Oh this is amazing,\" she said. \n\nI sat in the lounger beside her. \n\n\"Just don't think of the environmental effects,\" I said, even as I mentally had to admit it felt amazing. \n\n\"Hush,\" she chastised me. I smiled and let her relax. After all, she was on vacation. It wasn't all about running through Disney at warp speed. It was also about recharging and taking it easy. We spent 20 minutes just lying there, getting refreshed, our hands touching each other just out of sight of everyone else.\n\nStill, she hasn't taken off the wrap. I couldn't help but keep glancing over at her. Apparently my sunglasses weren't fooling her. \n\n\"See something you like, Daddy?\" She asked. \n\n\"More like there's something I'd like to see,\" I said. \n\nShe looked over and gave me a playful grin. Then she stood up and looked down at me. \n\n\"I should torture you some more. Especially after that stunt where you handcuffed me in the car last month.\"\n\n\"You both deserved and loved it,\" I countered. \n\n\"Well, that's true,\" she said. And then undid the sash to her wrap, dropped it off her shoulders and casually tossed it into her lounger. \n\nBikinis, man. I've seen my Kitten naked plenty of times. I've seen her in lingerie. I've seen her dressed as a cat. But place a few pieces of cloth strategically and it'll get your heart rate going. \n\nIn this case it was a purple-green shimmering bikini with a scale effect. I suspect it was modelled on Ariel from Little Mermaid. The top succeeded in scooping up her breasts. The bottom was a French cut. It managed to find a middle ground between modest and scandalous and walk it. She looked amazing and knew it. She gave me a little pose. \n\n\"Well? What do you think?\"\n\n\"I think it's a good thing I'm not wearing a Speedo,\" I said, getting a giggle as a reward. \"I have no idea how that's going to hold together when you go swimming.\"\n\n\"Neither do I. That means you'll have to be nearby in case I need 'assistance',\" she said. Then she moved towards the pool knowing my eyes, and those of a few others, were taking in the view and dove in. \n\nWell, far be it for me to not be there to help out my little girl. I leveraged myself up, limped to the edge and eased myself in. \n\nThe next half hour consisted of Kitten being a brat and me threatening eventual retribution, which made her laugh. She was a far superior swimmer to me even if I didn't have a bum knee. So she could splash and evade with ease. Eventually I gave up trying to and just focused on doing some of the physiotherapy exercises that were recommended to me to help with my knee. Kitten was content enough to do some swimming before coming back and gliding into my arms. \n\n\"Brave little girl,\" I said, grabbing her ass under the water. She pressed closer against me and squirmed, rubbing her pussy against my cock with only thin cloth separating us. \n\n\"I'll accept whatever punishment Daddy thinks I deserve,\" she whispered in my ear. \n\nAs much as I wanted to just rip her top off and start sucking in her breasts, getting kicked out of Disney on our first day would be bad. I gave her a chaste kiss on the lips and gently pushed her away. She gave me a mildly hurt look. \n\n\"Why don't you head on up to the room and think about how bad you've been and I'll join you in a few moments,\" I said. \n\nWhen she still looked confused, I glanced down towards my swimsuit. My cock was causing it to tent in a very obvious way. \n\n\"I'd prefer not to scandalize families by getting out of the pool right now, little girl.\"\n\nShe covered her mouth with her hands which barely suppressed her laugh. She floated over, gave me a quick kiss and said \"I'll be waiting, Daddy.\" \n\nThen she swam over to the edge of the pool and began to get out. Suddenly I flashed to that scene with Phoebe Cates from \"Fast Times in Ridgemont High\" with her getting out of the pool. Only from behind. Naturally the Cars \"Moving in Stereo\" began playing in my head. \n\nJesus Christ. I wanted to tell her about it later but, of course, she would give me that blank look whenever I referred to anything from before she was born. \n\nShe looked back at me, grinned, did a lengthy stretch pose while shaking water out of her hair and then went to the lounger to grab her wrap. She then headed back to the room. \n\nYeah, I was going to need a few more minutes. \n\nWhen I got out of the pool I noticed I was getting a few looks. Probably not the same kind that Kit got when she got out. My mix was bafflement (young guys), envy (a couple of older guys), and one look of outright disgust from a woman who looked like she wanted to say something but was dealing with a small brood of kids. \n\nI gathered up my things and made an expedient departure from the pool. I was not in the mood for drama. \n\nPlus, I had a little girl to punish. \n\n***\n\nI walked into our hotel room to find there were no lights on and the curtains were closed. There was also no sign of Kit. \n\n\"Kitten?\" I called out. There was no reply. \n\nShe'd been here because I hadn't closed the curtains when I left. Did she pop out again...\n\nThat's when I heard a small rustling noise from somewhere in the suite. I took a few more steps into the room and was getting ready to turn on the lights when my phone buzzed. I reached into my bag, pulled it out and saw I had a text. \n\n\"Find me if you can, Daddy.\" Followed by several bratty and heart emojis. \n\nThank god the lights were low. It hid the huge smile I had on my face. God, I loved her. How'd I get so lucky?\n\nThe easiest thing would be to call her phone. She had some K-pop ringtone that would out her immediately. But that was cheating. It would be more fun to actually find her. \n\n\"So where could my little girl be hiding, I wonder,\" I said moving into the room. I used the cane in an exaggerated way so she could hear me, wherever she was. I knew she wasn't out on the deck, so that's immediately where I headed.\n\n\"Nope, not out here,\" I said loudly. I actually had plans for the deck at some point, but for the moment, it was just to prolong our current game. My phone buzzed again. An emoji with its tongue sticking out at me popped up. Such a brat.\n\nThe room was technically a suite. By European standards, it was the size of a medium-sized apartment. By North Americans, it was a decent-sized hotel room with a bed, lounge area with a couch and TV set, a small kitchenette and a bathroom. Oh, and closets. So she had some room to hide. Plus I was leaving the lights off just to make things fair.\n\nI stomped into the bathroom and dramatically pulled open the shower curtain with my cane. No Kitten to be found. Another buzz. A bored looking emoji popped up. Ok, time to get serious. I walked over to the bed and pulled back the sheets. Still no sign of my Kitten. A quick look told me it was the kind of bed frame that she couldn't hide under. Ok, she had to be hiding in the closet. I opened the closet door and rummaged around with my cane. Nothing squeaked. Although I noticed the two complementary robes there. I pulled the belt off one, thinking I might need something sooner rather than later. I wrapped it around my hand, so it wasn't quite so obvious. I closed the door, starting to get genuinely curious how she was managing to hide so well.\n\nAnother buzz. It was Mr. Magoo with large glasses. How the hell did she even know about Mr. Magoo? I stomped into the kitchen and opened the refrigerator and some of the cabinet doors, which was ridiculous. As small as she was she'd never fit there.\n\nBuzz. Hysterical laughter emoji.\n\n\"You understand mocking your Daddy is only going to make it worse when I find you, right?\" I said out loud.\n\nBuzz. Innocent angel emoji.\n\nI stood in the entrance to the kitchen and surveyed the area. I could double back. It was possible she made a dash for the deck or the bathroom when I had my head in the fridge...\n\nThat's when I noticed the luggage. We'd kind of just dropped our suitcases and carry-ons against a wall when we got in last night after hanging everything up. They were now suspiciously well organized next to a dresser in a way that could certainly hide a little girl. I thought about trying to sneak up on her, but she no doubt had a little spyhole to watch the search to her amusement.\n\nI began walking over, very loudly, towards the suitcases. With my cane I hooked under one of the bags and flipped it off to the side. And there, underneath, was a very sheepish and naked little girl, except for her pair of cat ears. She grinned up at me, while I stared down at her.\n\n\"You wouldn't hurt an adorable little kitten, would you, Daddy?\" she said, turning up the cute to radiant levels.\n\n\"Try again,\" I said, holding onto my stern Daddy look.\n\n\"Parley?\" I didn't quite manage to suppress the smirk. Apparently the Pirates of the Caribbean ride was now an inspiration.\n\n\"You've been a naughty little girl and you have to accept your punishment,\" I said.\n\n\"Nooooo,\" she cried out, more than a little melodramatically, and tried to rush past me. My cane flashed out, and she was surprised when she ran into it. I then used it to pull her against me so she was pinned between my body and the cane.\n\n\"Nice try,\" I said. She squirmed her body against me, with a particular emphasis of her ass against my cock.\n\n\"That's not fair, Daddy,\" she said, pouting.\n\n\"Then you should have been a good little girl,\" I said. Then I spun her around so she was looking at me. She was momentarily surprised and then before she could react, I reached down, putting my hands under her ass, leaned on my good leg, lifted her up and threw her over my shoulder.\n\n\"No, Daddy!\" she cried out. There was also a half-hearted attempt at pounding on my back. I carried her over towards the bed.\n\n\"That tantrum you threw on Main Street when I wouldn't buy you that Minnie Mouse dress was embarrassing. And now hiding from me so I wouldn't punish you. I raised you better than that, young lady,\" I said. Then I gave her ass a slap. I know it sounded worse than it felt, but she still made a racket about it.\n\n\"Owww, Daddy! It's not fair! You promised to buy me something and then you wouldn't,\" she said, getting into it.\n\n\"It was a $200 dress,\" I said, sitting on the edge of the bed. She was still squirming, but didn't resist too much when I switched her from my shoulder to across my lap. She was still trying to get away when I unwrapped the bathrobe belt from my arm and took her hands and then quickly tied them behind her back. I was never a particularly good Boy Scout. Kitten could easily slip the knots if she wanted. Judging by the way she was squirming on my lap, she was right where she wanted to be.\n\n\"I looked cute in that dress, Daddy. All the boys would have been flirting with me when I wore it at the park,\" she said. I slapped her ass again, and she cried out again.\n\n\"There's only one way to correct your behaviour when you're like this,\" I said.\n\n\"Oh no, Daddy. Please. I can be good,\" she said, twisting so she could look at me and pretend to be scared.\n\n\"Too late. You knew you had to behave when we came here and you've let me down. Now I have no choice. Ten, I think,\" I said, then leaned back and slapped her left ass cheek.\n\nShe cried out and kicked her legs in protest, so I quickly slapped her other cheek, catching her by surprise.\n\nWe'd talked about it first a couple of weeks ago, of course. She admitted that the couple of times she had been tied up and helpless, and having to trust her Daddy was hot. She also knew she was behaving a little more \"bratty\" lately. She said she was just more comfortable and confident around me and that she knew she could trust me to \"handle her\" if she got out of hand.\n\nNow, we'd see.\n\n\"Are you going to behave?\" I asked.\n\n\"Are you going to buy me that dress?\" she responded.\n\nCrack. Crack. Crack. Five in total. Her ass was now a lot redder and I could see my handprint on it. She had cried out after the first one, but then nothing.\n\n\"Are you ok, Kitten?\" I asked. She nodded.\n\n\"Uh huh,\" she said heavily.\n\n\"Are you going to behave for the rest of the vacation?\" I asked.\n\n\"Buy me that dress, Daddy. I'll wear it just for you, I promise,\" she said in a much more docile voice. \n\nCrack. And a groan. \"Do you deserve that dress?\"\n\nNothing. Another slap on her ass, making it seven now. \n\n\"No I don't, Daddy. I've been a brat and I'm sorry, but I really want that dress,\" she said. \n\nSlap. Eight. A little gentler this time. I could feel her squirming on my lap. She had to feel my cock pressing on her belly. \n\n\"And if I decide to get you that dress what will you do to earn it?\" I asked. \n\n\"Ohhhh, anything Daddy. I'll do anything you want, she said. \n\nCrack. Nine. Still gentler. I was worried I'd been slapping her ass too hard but judging by the way she was reacting I didn't need to worry. \n\n\"And what does that make you?\" I said. \n\n\"Mmmmm, it makes me a slutty little girl,\" she said, preparing to slide off my lap, eager to move to the next step of our play. \n\nInstead I pressed my hand in her back, stopping her from moving and gave her the final slap on her ass. She cried out in surprise, having lost count. I leaned down and whispered in her ear. \n\n\"Try again,\" I said, resting my hand a little menacingly on her ass. \"What does that make you?\"\n\nShe looked nervous for a second and then figured it out. \n\n\"It makes me your slutty little girl, Daddy,\" she said. \"I'll do whatever you want if you'll just buy me that dress.\"\n\nI let her go and she slowly slid to the floor. Her eyes had that slightly glazed look whenever she was feeling especially Little and submissive. \n\n\"Then show me how you'll pay for that dress, Kitten,\" I said. A smile came across her face as I pulled down my swim trunks. They were barely out of the way when I felt her mouth and tongue begin to work on my balls. It seems if I had punished her, she was going to punish me a bit by being a tease.\n\nShe did that for a few minutes, running her tongue around my balls, then getting a little daring and licking down past them, to the edge of my ass, before moving back up again, taking one of my balls in her mouth and running her tongue along it. Then she switched over to my other one. Then repeat. \n\nIt was a game. How long would I put up with her playing with my balls but ignoring my cock? How long was she going to torture herself by not having my cock buried in her pussy? The mutual self-destruction loop.\n\nFinally, I decided to accelerate things. I reached down and grabbed her pigtails. She was still licking my balls as I gently began to pull her head up further up. I could see the little smile; she was happy she won. Enough that when I finally had her mouth lined up with the head of my cock, there was no more teasing, she simply pushed her lips down, sliding it down past the crown of my cock, until she got about three-quarters of my cock in her mouth, and then she pulled back. She repeated that a few more times, hoping to get all of my cock in her mouth and throat.\n\nI'd told her weeks ago that she didn't need to deep throat me; that her blowjobs were amazing without having to do that as well. But she was stubborn and wanted to keep trying. We compromised in that she could try for the first minute or so, but if she couldn't, well, it was back to her standard amazing cock sucking.\n\nSure enough, after a minute of trying I could practically hear the little girl \"huff\" as she gave up and then pulled back, running her lips and tongue over the head of my cock. We both immediately became much happier. She once told me that sucking my cock was the best thing for causing her to zone out and be Little. That her mind just went away and she lost herself in the feeling of sucking and making me happy. She kept doing that, happily blissed out sucking on me.\n\nShe was so focussed she didn't even look up at me. Eventually she did and I smiled.\n\n\"Ahm ah gud gurl ow, addy?\" she asked, with her mouth still moving around my cock.\n\nI took her pigtails and pushed them downwards a little and she knew she was being \"punished\" for talking with her mouth full. She held there for about 15 seconds before I let her come back up. She popped off my cock and took a little gasp for air.\n\n\"Sorry Daddy,\" she said, kissing the top of my cock. \"Do you want to fuck my mouth and make me swallow your cum, Daddy?\"\n\n\"I had something else in mind,\" I said, and tapped my upper thighs. She stood up with a bit of a wobble as her hands were still tied behind her back. I closed my legs and she then straddled me. I reached behind her and made quick work of the belt binding her hands. She smiled and reached down to take my cock and position it so that all she had to do was let gravity take over and I would bury myself in her.",
        "She didn't, though. She looked at me and then bit her lip.\n\n\"Please, Daddy,\" she asked.\n\n\"Please what?\" I said, because I was apparently in the mood to torture both of us.\n\n\"Can I pwease wide your cock, Daddy? I weally, weally want to,\" she said, dripping in the lispy little girl voice she knew I had limited power to resist.\n\n\"Can I cum in your little pussy, Kitten?\" I said. I could feel her pussy, soaking wet, beginning to move over the tip of my cock.\n\n\"Yes, Daddy,\" she whispered.\n\n\"Can I breed you, Kitten?\" I said. Her eyes closed and she moaned and I was sure her hips were going to collapse in second.\n\n\"Please Daddy. Please breed your Kitten,\" she said in a low, husky voice. I grabbed her hips and pulled her down onto my cock.\n\n\"Oh Fuck!\" she screamed, and I could immediately feel her pussy pulse around me. I'd underestimated how wound up she was between the spanking and cocksucking. She wrapped her arms around me, pressed her breasts against my chest, and placed her head on my shoulders as she tried to catch her breath.\n\nI held her for a few moments, and then gently began running my hands down her back. She groaned and responded. Having caught her breath she began to slowly move her hips against me, and pulled back to look at me. She was flushed, and while she wasn't as glazed looking as earlier, looked slightly shell shocked.\n\n\"Are you ok, Kitten?\" I asked.\n\n\"Uh huh,\" she said. \"Sorry, Daddy, that was just...a lot. Very suddenly. But I'm ok.\" And to emphasize the point she began moving up and down my cock again.\n\n\"Daddy, oh Daddy, can I go fast Daddy? Like we did on the rollercoaster this morning...I want to go fast, Daddy. You can cum in me whenever you want, I just need to go fast, please...\"\n\nThere was such a look of need and determination that I wasn't about to stand in her way. I met her eyes and nodded and she immediately began moving up and down my cock with more urgency. Soon she pushed me back down on the bed and shifted so that she could use her legs better and placed her hands on my chest.. And then she began bouncing on my cock fast and hard, eyes shut, focusing on something building inside her.\n\nI decided to help her along, because I had moments left. No man could last long doing what she was doing to me. I reached up and began playing with her nipples. She groaned and managed to find another gear.\n\n\"Ride your Daddy's cock, my slutty little Kitten,\" I said to her. \"Bury that nice, thick cock up you little pussy.\"\n\n\"Oh God, Daddy. It's so big, I can't, it's right there, Oh God, Daddy!\" she babbled.\n\nI still couldn't say why I did it, but as she pushed herself down on my cock, I pushed my hips up to meet her, burying myself as deep as I could in her. I then reached around with both hands and slapped both of her ass cheeks at the same time.\n\nHer pussy convulsed around my cock and there was no resisting as I came hard inside her. KItten just stared off in the distance, her eyes wide and her mouth open but no noise was coming out of her. She started gasping for breath and I was beginning to worry about her when she collapsed onto my chest.\n\nI held her while she kept taking deep breaths until she began to calm down a bit. Finally, she lifted her head off my chest and looked me in the eyes. I smiled.\n\n\"Hi there,\" I said, pushing back a strand of hair from her face. She was flushed and sweating, and not just from the heat.\n\n\"Wow,\" she said. \"Sorry, but...wow.\"\n\n\"Nothing to apologize for, princess. You know how much I love watching you when you get worked up like that.\"\n\nShe grinned. \"Yeah. I think I got more than a little worked up. Wow.\"\n\n\"So I guess you liked the slapping?\" I said, running my hands over her ass in a much more gentle manner.\n\n\"More than I thought I would, although some of those really stung, Daddy,\" she said, offering a small pout.\n\n\"Slide off and I'll happily kiss it better.\"\n\n\"Mmmm, raincheck. I'm not sure I can handle getting worked up again right now and I'm pretty sure that would do it,\" she said.\n\n\"Raincheck accepted,\" I said. \"Are you ok, though? I'm just checking. That was a little rougher than normal.\"\n\n\"I'm good, I promise. I would have told you if it was too much or if it hurt too much,\" she said, then yawned. \"God, I'm wiped out. I'm ready to slip into a coma.\"\n\n\"Well, we'll take a quick nap, then a shower and we should still be able to get back to the park by 4:30 or so which is in time for the parade and be able to wander around for a few hours. Sound good?\"\n\n\"Yes Daddy,\" she said, getting ready to nod off lying on top of me with my cock still inside her. Then she looked up at me and grinned. \"Although I'm not sure I need to go back to the park. I've just finished the best ride in Disney.\"\n\n\"Oh for God's sake,\" I said, picking her up off my waist and then tossing her onto the bed. She bounced on the bed giggling and protesting all at the same time. I moved across and began tickling her, much to her screaming protests.\n\nWe were later than 4:30 getting back to the park that day. We didn't care that much.\n\n***\n\n(Toronto - Two weeks earlier)\n\nThere's something to be said for underestimating people in good ways. \n\nWhen people meet Kitten it's easy to assume that while she's a nice girl, that maybe she wasn't the smartest person in the world. She liked cartoons and comic books. Her favourite mental headspace was that of a much younger, sillier person. She could be shy at first, especially around people who she perceived as being much smarter. \n\nIt wasn't until you got to know here that you got to know she studied hard at school, got really good grades, and was very smart about the things she cared passionately about. I know very little about costume design, but every movie we've watched she can explain to me why a costume is good or bad, and she can talk about it with a lot more knowledge than my usual \"Well, it looks cool.\"\n\nBut I know she worries about it sometimes. She told me as much after the night at the pub. It was Sunday morning and Meg had to run into her office for a few hours. After making use of her empty condo in ways she would gripe about, we were taking advantage of an unusually warm March day to walk to a restaurant near her office where we'd meet her for a late lunch. After that, we'd collect our things and head to the train station.\n\nKit was her usual slightly down self knowing her weekend was coming to a close. Plus she was worried she hadn't made a great impression the night before. That she'd been too silly. \n\n\"You were great. They loved you,\" I reassured her. I gave her hand an extra squeeze.\n\n\"Yeah, but it felt like everybody there had at least two degrees or they were studying for another one. It felt like they're over here,\" she said gesturing with one arm \"and I'm over here,\" she said, waving the other arm far away in the opposite direction. \n\n\"Having a university degree does not automatically make you smart. A couple of the biggest idiots I've ever met had doctorates,\" I said. \n\nKit looked skeptical. \n\n\"Matt has a degree,\" I said. \"Marie has her Masters in Education.\"\n\nA look of horror washed across her face. \n\n\"She teaches children? She makes Delores Umbridge look like Mr. Rogers,\" she said. \n\nI smiled. \"Trust me, the comparison has been made. No, she works in developing programming for junior high school kids at the Department of Education.\"\n\nKit did an exaggerated shudder. Fair enough. I was horrified when I heard she got that job. I suspected her idea of educational reform involved bringing back corporal punishment using a cat o' nine tails.\n\n\"Ok, but they're evil, Daddy. Dumb and evil often go together.\"\n\nOh, I could correct her on that, but I wanted to focus on the topic at hand. \n\n\"You met John last night, right?\" I asked. She nodded. He was tall and frequently wore his long blonde hair in a man bun, which was something you should never do, let alone do in your 30s. He stood out in a crowd. \"So a few years ago John decided he needs to get away from it all. Drops a thousand dollars on camping gear and heads off into the woods. Completely out of the blue. He does that sort of thing. It's why he's broke all the time.\n\n\"Ten days and an expensive search and rescue party later, they find him. He went hiking, got completely turned around and they found him 40 km from his campsite. He didn't tell anyone where he was going. He didn't have a satellite phone. He didn't take someone with him. \n\n\"He spent almost his entire life in cities. But it's camping, so how hard could it be?\" I said. \n\n\"Ooops,\" Kit said with a giggle. \n\n\"And then there's me,\" I said. \n\nShe stopped and looked up at me with a smile. \n\n\"But you're so smart and wise, Daddy,\" she said. My Kitten was getting very good at walking the line between sincere flattery and mocking. I shot her a look and she kept her wide-eyed sincerity going. I sighed, pulled on her hand and we kept walking. \n\n\"When I first started out in policy my boss at the time decided I needed some in the field experience. So he sent me to this project assessment in rural Ontario to give a presentation which was basically that we, the government, were right and people in the community were wrong. So I naively go off to do this because of course we were right. We were all smart people with degrees. We'd done all kinds of research,\" I said. \n\n\"Didn't go well?\"\n\n\"I was lucky to get out alive. I learned new words that day. But they were right. Our idea was bad for them and deeply stupid. I made the mistake of assuming that I knew better because of my degree than those who had practical experience dealing with these things day in and day out.\"\n\n\"Ok, ok,\" she said, kicking a discarded Tim Hortons coffee cup lying on the sidewalk. \"I get your point. It's just they're making policy and I make geek clothing. I feel silly sometimes.\"\n\n\"You shouldn't. The crew of Black Panther probably changed the world more than most politicians the year that movie came out,\" I said. \"Besides, you love what you do. Maybe one day you'll create something and it gets worn in a movie. And it inspires some kid in ways you can't imagine. That's what's amazing about what you do.\"\n\nShe stopped again and looked at me. And there was no mocking or teasing on her face. Just a huge smile. \n\n\"You say the best things sometimes, Daddy. Thank you. I hope you're right,\" she said. \n\nI couldn't resist. \n\n\"Of course I'm right. Weren't you listening. I've got all these university degrees,\" I said, grinning. The beaming smile vanished and she got an aggravated look on her face. \n\n\"You jerk,\" she said, punching me in the arm and then walked away. It took a few minutes but eventually she forgave me. \n\n***\n\n(Disney - Spring Break)\n\nDespite being an ass that day the point did sink into Kitten. That she was smarter than she gave herself credit for. It also turns out she was a much better organizer than I gave her credit for.\n\nWhen I told Kitten that she was in charge of planning the Disney portion of the trip I had a very simple reason and it had nothing to do with being lazy. I'd been to Disney before. Three times. For good or bad, I had my own distinct memories of the place. I wanted to build new ones with her and I thought the best way to do that was to let her plan how she wanted to do things. She so readily agreed to the planning that I didn't bother to explain why, so I just assumed she was eager to do it so she could do all the things she'd dreamt of. In retrospect, that was hugely stupid.\n\nIn the weeks leading up to the trip Kit did a deeper dive into the planning than I thought. She got apps, read articles, and hit social media sites all trying to figure out what was the best way to visit Disney. What attractions to hit and when. What ones to avoid. Best places to eat.\n\nIt also didn't end once we hit Disney. I figured the plan would blow-up at some point. It's like having a plan at a comic con. If you were lucky you'd get to do 50% of what you wanted to do when the event started. Eventually she'd underestimate the crowds, or a line would be massive, or one of the attractions wouldn't be working. Maybe a thunderstorm would blow through and everything would shut down.\n\nBut Disney isn't comic con, no matter some of the similarities. There are differences, including the pressures.\n\nThat meant Kitten was routinely checking her phone, making changes when needed. There were apps and sites where you could do live tracking and adjust your plans accordingly. So she was weighing a shorter line versus how long it would take to get there given my knee. By the time the third day of the trip rolled around, we'd finished with the Magic Kingdom, hit Epcot, blown through Animal Kingdom and we were now getting ready to do Galaxy's Edge, which she had pre-booked in advance. I had to admit, I was very impressed, even if I wished she was spending more time enjoying the park and less staring at her phone. She was also starting to look frazzled.\n\nBut today they were running behind at Galaxy's Edge because of technical difficulties. There were long lines, people were cranky, and all of Kitten's furious checking of her different apps and websites to figure a way around the problem were not producing any results. She was getting increasingly agitated and annoyed and the fact it was 35C was not helping. I'd told her to relax a few times, and she deliberately pretended not to hear me. Finally, and knowing I was probably risking her wrath, I reached over, grabbed her phone and threw it in the backpack I was carrying.\n\n\"Daddy,\" she said loud enough to cause a few heads to swivel, \"What the hell!?\"\n\n\"There's nothing to be done, princess. It's DisneyWorld. These things happen. We have shade and we'll get there eventually. So we just need to chill out and take it easy,\" I said.\n\nWhich was a stupid thing to say. Telling someone wound up to chill out and relax is waving a red cape at a bull. She scowled at me and was pretty pissed off that I had grabbed her phone. I could tell she was weighing the consequences of trying to take back her phone. This was verging on our first blowout at Disney and really, we'd made it three days. It's borderline miraculous we'd made it this far.\n\n\"I'm going to go and use the bathroom. Can I have my phone back, Daddy,\" she said, with a very surly tone.\n\nYup. Very pissed off. I shook my head, reached back into the bag, and handed her the phone. She grabbed it out of my hand and stomped off to the nearest bathroom. I sighed.\n\n\"Redheads have quite the temper, eh,\" a voice behind me said. I turned around and it was a man about 10 years younger than me. With him was a slightly harried looking woman trying to keep two boys and a girl all cosplaying as different Star Wars characters under control. Further proof that Kit was slightly out of it. Ordinarily she'd be talking to them about their costumes and their favourite characters. If Kit was having problems keeping herself calm, I could only imagine what parents were going through during the delay.\n\n\"She's actually a sweetheart and very slow to get that pissed off. She's going to come back in about 10 to 15 minutes much calmer and embarrassed she got that cranky,\" I said. And then mentally added, \"I hope.\"\n\nHe looked at me like he couldn't quite figure me out.\n\n\"How are you calm?\" he asked. \"Most of the people in the line here are ready to storm the gates and you're standing there without a care in the world. What's your secret?\"\n\nI really didn't feel like regaling my life story to him. That you tend to put things in perspective after certain tragedies. For example, if Kitten came out of the bathroom and she was still pissed off, we were simply going to leave. It's not like we were never coming back to Disney again.\n\n\"Not having kids helps,\" I replied instead. He laughed, but then also put together the extra piece. He heard Kit had called me \"Daddy\". I just said I had no kids. He reexamined me with this new information, nodded his head, and smiled. Apparently I had gone up a couple of notches in his eyes.\n\nFortunately, his wife demanded help keeping their kids in line, so I didn't have a conversation about much younger girlfriends. I took out my phone and checked a few things on Twitter. Fifteen minutes later I still hadn't heard from her and was wondering if I was going to have to ask someone to hold my spot while I went to look for her. That's when a notice from her flashed up on my screen.\n\n\"Sorry\" she said.\n\n\"It's fine,\" I wrote back. \"You ok?\"\n\n\"Yeah.\"\n\nThere was nothing for a few more minutes.\n\n\"Kitten, we can go back to the room and relax for a few hours if you want. It's ok.\"\n\nNext thing I knew she reappeared right beside me. Who knew she had stealth capabilities?\n\n\"I'm sorry,\" she said. \"I was a bitch to you, but ...\"\n\nI grabbed her by the waist and pulled her closer and gave her a quick, albeit very sweaty, kiss. She quickly broke away, saw some people looking at us, and flushed with embarrassment. She also looked slightly annoyed.\n\n\"Not that I don't appreciate the kiss, but why...\"\n\n\"You're trying really hard and I know you're frustrated right now, and I just want to let you know I appreciate everything you're doing,\" I said. She shook her head, mystified at the way my brain works sometimes.\n\n\"I just wanted this trip to be perfect and it feels like I messed it up,\" she said.\n\n\"You're being a silly little girl,\" I said. \"Which ordinarily I am all about. But in this case you're upset about something you literally have no control over. And this has already been smoother and more fun than the other three Disney trips I've had.\"\n\n\"Really?\" she said, not entirely believing what I was saying.\n\n\"Vacations, and vacations in Disney, are always a test, Kitten. Sometimes you just have to remember to take a breath when you want to kill something. Or someone,\" I said.\n\nSuddenly, I could hear a few cheers and see the line start to move. I took her hand and we began to move forward with the rest of the crowd.\n\n\"It means stop beating yourself up over things you can't control and don't worry about that minor kerfuffle...\"\n\nShe snorted. \"Kerfuffle?\"\n\n\"I'm an old man. I use old man words. Anyway, before I was interrupted...\"\n\nShe stuck out her tongue at me. Yeah, she was coming back to normal.\n\n\"This was nothing. So stop beating yourself up. Ok?\"\n\n\"Ok.\"\n\n\"Good girl. Now come on, we're going to build some lightsabers together,\" I said.\n\nWe were moving again, which made her happy enough that she didn't protest that I was buying her something.\n\n***\n\nGalaxy's Edge was a fun few hours, although Kitten still seemed a bit off. Even a new lightsaber, which ordinarily she would have both protested and been delighted with, didn't affect her a lot. Once we left her mood became more subdued. I just assumed she was overheated or tired, like I was feeling, and that a few hours back at the room before we went out to supper would do her some good.\n\nShe dressed up in a summery dress that was white with white daisies. It wasn't transparent, but I was certainly enjoying the outline of what I was seeing. I joked that I still owed her the dress that I promised her the other day. She smiled, and blushed a bit, but the reaction wasn't the playful teasing I was used to. We hadn't been to Disney Springs yet, so we made our way over there. Going without a reservation somewhere was likely an invitation to another long line, but we'd had good luck with our dining experience so far, so why not press our luck.\n\nEven walking over, conversation was subdued. She held my hand, but wasn't cuddled next to me like she often did, even in the Florida heat. I asked if she was ok and she replied she was just thinking about something. Which wasn't ominous at all, but I let it go for the moment.\n\nI was debating going to a nice steak house for supper, but figured the Rainforest Cafe might cheer her up. Plus the cool mist of the place was a welcome break. It also continued our miraculous streak of having only a small line to wait in before we got our table. I know the place is mostly for families, but I always kind of liked it. If nothing else, at least it was a restaurant to put a little entertainment into your meal. Kitten had a genuine big smile for the first time in hours once we got inside. Turns out she'd never been to one before, and laughed out loud when the volcano erupted on the hour. It was a welcome boost in her mood. We chatted about the menu and different things in the restaurant and I thought things were back to normal. But once we ordered our main courses I tried talking to her about Star Wars things we'd done earlier today, but her mood diminished again.",
        "I was trying to be patient, but this was getting frustrating.\n\n\"Kitten, I really am trying to give you your space, but something is bothering you and I'd like to help if I can,\" I said.\n\nShe nodded and I gave her a moment to collect her thoughts.\n\n\"Do you love me, Daddy?\" she asked.\n\nIt was such an out of left field question that it caught me by surprise. I tell her I love her a dozen times a day. As tempting as it was to laugh, say of course I do and tell her she was silly, clearly something was bothering her.\n\n\"I do,\" I said. \"I hope I show you that every day.\"\n\nShe nodded.\n\n\"I love you too,\" she said.\n\nAnd I smiled because there was a time I was certain I'd never heard another woman say that to me again.\n\n\"So why are you trying to test it?\" she asked. \"Are you not certain it's the real thing? Do you have doubts?\"\n\nOne of the things about being married for over 20 years is that you get awfully good at recognizing hand grenades lobbed at you in the form of rhetorical questions. The problem is you never know if the pin is still in the grenade. I could certainly blow off Kitten, tell her she was being a silly little girl. The DD/LG relationship we had meant I was still technically the dom, although I rarely felt that way. I could certainly emotionally dominate her, tell her she was being silly, and forget about it.\n\nBut that was manipulative. It also felt like exactly the type of thing that would fester if I tried it. I'd bet money some of her Ex's tried it. So I had no choice; I had to fall on the grenade and hope the pin was still in it.\n\n\"I don't 100% understand what you mean,\" I said. \n\nShe looked exasperated, like she didn't understand how her Daddy could be this dumb.\n\n\"You said in line today that Disney and vacations were a test. And...and I didn't say anything before, but I heard a bit of the conversation between you and Beth back in Toronto a few weeks ago about how Disney can test and break a relationship. And it's just...things you've said and done sometimes over the last few days that makes me feel like I'm being graded and if this vacation doesn't go well you'll reevaluate this relationship.\"\n\nOh God, I thought.\n\n\"Kitten...\"\n\n\"And that's why I've been obsessing on the phone, because I wanted this to go as smoothly as possible, and then you got frustrated with me this afternoon and took my phone, and now I'm wondering if I'm doing a good enough job. I don't want to lose you, Daddy,\" she said.\n\nAnd then she started crying.\n\nI am the worst Daddy in the world. I have completely screwed up. There's a difference between being more spontaneous and just being goddamn careless. And somehow I had managed to give her the impression that if this wasn't the perfect vacation I was going to dump her. I didn't even want to think how long she had been carrying this around.\n\nThe place was packed, of course, but we'd managed to get a booth even though there were just the two of us. I was sitting across from her, so I got up and got on her side of the booth. She moved further in, and I didn't want to exactly corner her. I reached over and took her hand. She reluctantly let me have it even after she kept sniffling.\n\nOk, old man. Phrase this correctly.\n\n\"Your Daddy is a bit of an idiot, as I'm sure you've noticed,\" I said. Not so much as a smile. Ok.\n\n\"I screwed up. I completely understand why you thought that. I really do. It's the easiest thing in the world to think that, but that's not what I meant and I'm horrified that I made you think this was a pass/fail relationship test. Because it's not,\" I said.\n\n\"You said Disney and vacations were a relationship test,\" she said. \"I heard you say it.\"\n\n\"Yes, I did. What I should have said is you learn a lot about your lover when you go on a vacation with them. You learn how you communicate. You learn how you compromise. You learn how you handle things when things go wrong. Because these things happen,\" I said.\n\nI flashed back to my previous trips here. It would probably give my psychiatrist plenty of material to work with.\n\n\"Ok, story time. You ready?\"\n\nThat got a small smile.\n\n\"On our first trip here, Beth and I got into a fight because she really, really wanted to do the 'It's a Small World' ride and I really didn't want to. Always hated that song and the idea of spending 10 minutes or so listening to it was unappealing.\n\n\"But finally I caved in, we got in line and after 45 minutes we started the ride. Except a few minutes in, it breaks. Nothing is moving. Nothing. We're sitting in the sun, and it was warmer than this, with no shade, and there's nothing we can do. We can't get out and leave, we have to wait for them to fix it.\n\n\"We were stuck there for 35 minutes, Kitten. Thirty. Five. Minutes. But that wasn't the worst part,\" I said.\n\nHer eyes were wide, wondering what could be worse.\n\n\"The song didn't stop. We kept hearing 'It's a Small World' over and over and over again. It was horrible. So yeah, when we got off that ride, we didn't talk to each other for the rest of the day. I'm half amazed we didn't get divorced. I was so upset from that ride, and she thought the whole thing was kinda funny and I should learn to take the joke,\" I said.\n\n\"Daddy, we did that ride and you didn't say anything. You could have told me and we would have skipped it. I totally would have understood,\" she said.\n\n\"Yeah, but Beth was right. It was funny, in a horror movie sort of way. We eventually looked back on it and laughed. We remembered that more than pretty much any of the rides we were on that trip. For years all she had to do was hum a few bars of that song to get a reaction out of me,\" I said.\n\nI paused. The next bit was tricky.\n\n\"The best relationships the two people sit down and figure out what could be done better. It means talking to one another more... actually it means listening to what the person is saying... and trying to keep calm. I figured that's what would happen with us, but honestly, this has been as smooth and relaxing a vacation as I can ever recall.\n\n\"I just wish you hadn't killed yourself trying to make it perfect. I don't like my little girl upset. My job as your Daddy is to make sure you're as happy and stress-free as possible. You've been amazing, but I'm really, really sorry if you did all of it because you were scared,\" I said.\n\nShe nodded, and she still looked miserable, but she'd stopped crying. That was the moment when the waitress decided to show up with the food. She looked momentarily baffled by the changed seating arrangements, but then noticed Kitten had been crying.\n\n\"Should I come back?\" she asked.\n\n\"No, just place the food normally, please. We're ok,\" I said.\n\nShe put the food down and then quickly gave us back our privacy.\n\n\"Are you ok? I can call her back and we can take this to go if you want,\" I said.\n\n\"No, I'm ok,\" she said in a small voice. Then the volcano rumbled again and she startled and smiled a bit. \"Besides, I like it here. It's kind of silly.\"\n\nI decided not to press my luck and shifted back to where I had been sitting. We started eating our food and didn't talk much. I decided to not press my luck. I had said my piece and I hoped she knew I was sincere.\n\nIt was an awkward meal. I asked if she was ok, and she nodded. I had to resist the urge to ask if she was ok every two minutes. After supper was over, I asked if she wanted dessert. To my mild astonishment she said no. Kit normally has no problem putting away something sweet after a meal and they had ludicrous desserts here. Now I was getting worried. I thought I'd explained everything and I thought it made sense, but maybe it didn't.\n\nAs we were leaving I was going to find a quiet spot and try talking to her again, when she turned and looked at me.\n\n\"Daddy, do you mind if I go wander alone for a little bit? I just...I need to clear my head a bit. Is that ok?\" she asked.\n\nI had full blown alert sirens going off in my head and it felt like acid was dripping into my stomach. But sure, go for a walk. No problem.\n\n\"I understand, Kitten. Take your time. You have your phone and everything you need?\" I asked.\n\nShe smiled and tapped her purse. \n\n\"I'll be ok, Daddy. I won't be too late,\" she said, got up on her toes and kissed me on the cheek. Then she turned and walked away from me, in the opposite direction of the hotel.\n\nThe problem with being a planner with a pretty good memory is that you get to relive every bad conversation in your head like a highlight reel. If you're still dealing with depression, even if you've had a really good few months, it'll kick in and do slow motion replay and commentary on everything you did wrong. \n\nThe trip from the restaurant back to the hotel room was exactly like that. It had been quite some time since I had last done this to myself. Not since the weeks after the accident when I replayed everything I should have done differently the night of the accident. If I had hugged a friend a little longer, Beth would be alive. If I had sped to try and catch the third light after the bar, Beth would be alive. My psychiatrist had helped get me out of that cycle, but it wasn't easy.\n\nI got back to the room and couldn't settle, terrified she was going to come back and break up with me. It was an insane thought, but it sat there and spun in my head like a carousel. After months of being locked away in a cage of happiness, whatever depressed monster that lives in my head broke loose and went on a rampage. Of course she would dump me, look at the terrible thing I did, causing her all that stress. Never mind that we'd both been ecstatically happy the last five months. That we had been happy just this morning.\n\nI couldn't sit in the room and I didn't want to be out when she came back. I went out on the deck and sat on a couch out there. Around nine o'clock the fireworks show began and I watched the explosions without her for the first time on the trip. I never knew fireworks could be depressing.\n\nShe had until 11 pm before I started texting to make sure she was ok. Disney is safe, and I know she can take care of herself, but any later than that and I had justified reasons to make sure she was all right.\n\nAt 10:40 I heard the click of the door opening. I was simultaneously relieved and terrified. I heard her walk into the room and after a moment I heard, \"Daddy?\"\n\n\"Out on the deck,\" I called out. I'd left the door partly open so I could hear her come in. Normally I feel guilty about the air conditioning blasting out the door and into the night. Tonight I didn't have the energy for it.\n\nShe came out, saw me on the couch and came over, sat down next to me and rested her head on my shoulder. On reflex I turned and kissed the top of her head. I didn't say anything, just waited for her to start.\n\n\"Is it possible we're both idiots?\" she asked two minutes later out of the blue.\n\nI started laughing and after a few seconds so did she. Once we stopped, she looked at me.\n\n\"When you explained to me that this wasn't a pass/fail on our relationship, that there wasn't any sinister agenda behind us coming here and you asking me to do the planning, I felt like an idiot,\" she said. I went to interrupt, but she put up her hand.\n\n\"It made perfect sense. I don't pretend to know everything about you, but everything I've seen in the last few months has shown me you're not that kind of man. That it was crazy. You would never do that to me. You're a kind, loving man and you want me to be happy.\n\n\"But this afternoon, it just clicked together like a perfect conspiracy theory. Of course this was a test. I'd been planning my brains out because I wanted you to be happy and to show you I was a good girl and now this whole trip was for higher stakes and then something just snapped,\" she said.\n\nI shook my head.\n\n\"As God as my witness, I asked you to do the planning because I didn't want to fall into the same routines when I visited here with my parents as a kid, or Beth as an adult. I just wanted to build something new with you, right now,\" I said.\n\nShe laughed quietly before saying, \"Probably should have told me that a few weeks ago, Daddy.\"\n\n\"No kidding,\" I said, and then put my hands in my face, relief washing over me.\n\n\"Are you ok?\" she asked.\n\n\"I've spent the last couple of hours in a spin cycle thinking you were going to come back here and break up with me because I was a cruel, manipulative bastard,\" I said, my voice choking a bit.\n\nI spared a glance over at her. She looked horrified. She got down off the couch, and hunched between my legs. She took my face in her hands.\n\n\"I was out walking to try and not be mortified for being so stupid so I could look you in the eyes again. You're the most decent man I've ever met. You're stuck with me forever,\" she said.\n\n\"For better or for worse?\" I said, trying to be funny. \n\n\"Don't even joke,\" she said. \"If you were serious right now I would be too.\"\n\nWow. That was breathtaking in a whole new way. Still, I took her hands and sat up straighter. She was an amazing woman, my little girl. \n\n\"It's all still a learning process, princess,\" I said. \"And not just the two of us. I thought I was all better. No more depression or mental health problems. You'd cured me.\n\n\"Tonight was a reminder I need to be careful. That apparently my depression and some of the mental health things I was going through are not magically vanished just because I've been happy the last few months,\" I said.\n\n\"I'm here when you need me, Daddy,\" she said.\n\nMy little girl. My amazing little girl.\n\n\"And Daddy, I also got a reminder that just because I had assholes in the past who made gaslighting me a recreational sport doesn't mean you're going to do the same thing,\" she said. \n\nI tilted my head a bit when I heard that because I knew what she was trying to say, but...\n\n\"Wait, does that mean...\"\n\nShe figured it out at the same time. \n\n\"Gahhhh. Nooooo, you know what I meant, Daddy. You're not an asshole,\" she said looking frustrated. \n\nI smiled, pulled her gently up and towards me and she quickly positioned herself so she was sitting in my lap and just hugged her. It was as if every horrible thought from the last few hours vanished. More importantly I could physically feel her relax. \n\n\"Do you still love your silly little girl,\" she asked, her face muffled by my chest. \n\n\"I may even love her a little bit more.\"\n\nShe looked up at me and made her eyes go big. \n\n\"Wowww,\" she said. \n\n\"Tiny bit more,\" I said, holding two of my fingers an inch apart. \n\n\"I love you a tiny bit more too,\" she said, mimicking my gesture. And then cuddled back in. We stayed like that for about 10 minutes when I felt her begin to squirm a bit. \n\n\"What's up, Kitten?\"\n\nShe looked...nervous and embarrassed but plowed ahead anyway. \n\n\"Daddy, can you take a look at what I have planned for tomorrow. I know it's probably weird after today, but I'll feel better if you do,\" she said. \n\n\"No problem, Kitten. Let's have a look.\"\n\n***\n\nIt was as if a big, cathartic wave had finally crashed over. I was kicking myself a bit for not noticing how much taking on most of the Disney planning was stressing her out. It was obvious in retrospect. What I viewed as throwing herself into the planning because she liked it, she viewed it as a do or die final exam on our relationship.\n\nAfter consulting her plans, we decided to toss a lot of them. Because she had been so efficient our first three days at the Park, we managed to see and do most everything we had on our mental list. We needed some down time to relax. Instead I suggested we sleep in the next morning and gradually make our way over to the Lagoon water park.\n\nAnd it was a great day at the park. Yeah, a water park at Disney on Spring Break is going to be busy, but we managed to find our zen...our second wind. She surfed at the wave pool, and after a few spectacular wipe outs she kept getting better and better and had a blast. I made a mental note that maybe we should go to California or Hawaii at some point in the future so she could try the real thing.\n\nKitten was wearing a green one piece suit. She looked great, but I missed the skimpier bikini. However, if you're going to spend all day running through a water park, maybe something with some structure is the way to go. Even if I couldn't keep up with her, I loved watching her run, and have fun. She was uncoiling and burning off the tension that I think she didn't even know she'd been carrying.\n\nShe was currently splashing around in the pool and chatting with a group of kids. Even from this distance I could tell the oldest boy was trying to flirt with her. Good luck to him, I thought. Kitten could handle herself. I was content to stay in my shaded area and keep myself hydrated. We were going to do this for another hour and then maybe go and hit some of the stores. In a remarkable feat of will power, she'd been at Disney for four days and hadn't bought anything. Now she was feeling the urge to do her shopping. At least the stores would be air conditioned so we wouldn't die. \n\nThat's when I felt someone nearby. I glanced over my shoulder and noticed a woman in her mid-40s looking out at Kitten. Her hair was a kind of blonde designed to make sure it eliminated any speculation that there might be grey, but it was professionally done. She had the tan of a woman who if she wasn't from Florida, was certainly some place warm. I was bracing myself for a lecture, but she had an odd, sad look on her face. Then she noticed me looking and shook herself from her memories and moved a little closer.\n\n\"Sorry. I hope you don't mind me stealing some of your shade. I'm just keeping an eye on my kids. I think they're playing with your daughter over there,\" she said.\n\nThere was a flashing temptation to lie and go along with it, if for no other reason to spare myself the lecture or scorn that would likely follow. But I wasn't in the mood. Besides, it's not like we'd been subtle in hiding our relationship the last couple of hours.\n\n\"She's my girlfriend, actually,\" I said.\n\nShe laughed, quietly. \n\n\"I thought so. That's my boy out there, striking out with her in spectacular fashion. Lord help him, he takes after his father. So busy being wowed by how charming he thinks he is, he's not catching on that his target isn't interested,\" she said.\n\nThere was something about the way she said it, in a kind of sad, wistful way that made me ask the next question.\n\n\"He's not here today?\"\n\nShe shook her head. \"He passed a couple of years ago. He was much older than me and, well, the last few years haven't been kind to older people who believe conspiracy theories instead of doctors. I miss that idiot every damn day.\"\n\nI waved her to the seat on the other side of the table, and she nodded her thanks and sat down.\n\n\"My condolences. My wife passed away about two and a half years ago. Car accident,\" I said, cutting off the inevitable follow-up question. The pang was there, but not overwhelming, and I never knew if I should be relieved or horrified whenever I realized that.\n\n\"It's hard, isn't it?\" she said. \"Dealing with it all. Did you have kids?\"\n\n\"No.\"\n\n\"Small mercies, then,\" she said, and then paused. \"I confess, I noticed the two of you earlier and it reminded me and Jim from years ago. I was in my early 20s and he was in his 50s and he just swept me off my feet. Quite the scandal. My parents disowned me for years. My mom was just waiting for me to come crawling back. But it lasted and gave me those three, including the idiot your girlfriend just shoved in the water.\"\n\nI looked up and, sure enough, a young blonde kid was spluttering back above the water while two other kids were laughing their ass off. Kitten had the look which said \"you are getting off easy. Don't push it.\" \n\n\"My girl's a handful,\" I said, grinning.\n\n\"Yes she is. Good for her,\" she said, then paused. \"Twenty-five years ago it was rough for us at times, and that's when people were a little more tolerant around here about the age difference between a husband and a wife. Are you getting crap about it?\"",
        "\"Sometimes, but friends and family have mostly been surprisingly cool with it,\" I said.\n\nShe nodded her head. \"Good, I'm glad. Look, I know it's none of my business, but I have some experience in these relationships - the ones that worked like mine, and the ones that don't, which are too many to count.\"\n\nNow I was curious. I nodded at her to continue.\n\n\"If it's love and the real thing, then you pay no attention to anyone and love her like crazy. Time goes by faster than you think. But if this is, and pardon me, a thing to help you get over your late wife, that's not fair to her and you should do the hard, but kind thing.\"\n\nI'm sure I must have had a stunned look on my face. I actually admired the bluntness. It was honest advice from someone who had been there instead of a stern lecture on moral appropriateness or power dynamics. She probably half expected me to chew her out or tell her to mind her own business. Instead, I lowered my head, smiled and gave a short laugh.\n\n\"I love her to an extent I never thought possible again. I'm hers until she's finished with me.\"\n\n\"Good answer,\" she said. Then she noticed her son had apparently taken his dunking as a sign Kitten was hard to get instead of being spectacularly uninterested. Kit was heading in our direction. \"I'll leave you to it while I go and try and remind my son it's never too late to develop common sense and good manners. It was a pleasure...\"\n\n\"Ben,\" I said, offering my hand. She took it and shook it gently.\n\n\"Anna,\" she said. \"Take good care of her.\"\n\n\"I will,\" I said, but she was marching over to the pool and giving her son an earful about treating ladies right. She nodded at Kitten as they passed each other, and she nodded back, but with a confused look on her face. She came over to the shade area and I tossed her a towel as she sat down and dried herself off.\n\n\"That's why I prefer men instead of boys. What an idiot,\" she said. \"Who was that talking to you?\"\n\n\"That was the idiot's mom. And possibly you in 30 years,\" I said.\n\n\"Oooookay,\" she said.\n\nI laughed and replayed what she had missed.\n\n***\n\nIt was our last night at Disney and we had an early flight the next morning to Toronto, which meant an ungodly wake-up call of around 5 am. I was not looking forward to dealing with a very grumpy princess in the morning. Actually, probably all day. We'd decided once we landed to hop a train straight back to Kingston and home. It was going to be a long day. We should be in bed now, but she insisted on waiting up to see the last of the fireworks, which were starting in about 10 minutes. And it's not like I could deny her anything.\n\nShe was in the room finishing the last of her packing. She'd actually been reasonably restrained in her shopping, although I could tell she wanted more. Of course she did. But the damage was confined to a set of designer mouse ears with 'Kitten' on the back, a couple of dresses, one of which I bought for her, a shoulder bag with Minnie Mouse on it, and a piece of jewelry that even I was shaking my head at.\n\nThere were sets of bracelets featuring different Disney couples meant to be worn by real-life couples. Mickey and Minnie. Donald and Daisy. Belle and the Beast. I wasn't paying much attention to it, looking at some art on the walls, when she called out. I came over and she pointed at the case.\n\n\"We need to get that,\" she said. Definitively. \n\nWhich is why she's now wearing a silver EVE chain around her wrist, and I now have a chain around my wrist with a silver WALL-E. I looked at my hand again and shook my head. \n\n\"The fireworks are starting in a few minutes,\" I called out to her.\n\nShe came onto the patio wearing a striped dress featuring Lilo and Stich on it. I loved the dress because it opened from the front rather than being pulled over your head. There were a couple of buttons on the top and then a belt to keep the rest closed. Undo the buttons and the belt and it gracefully fell open. This was the dress I bought for her, and while she rolled her eyes a bit, she certainly had no objections to it.\n\nShe sat down next to me and put her head on my shoulder.\n\n\"I don't want to go. Can we stay?\" she said.\n\n\"Sure. You got a large dowry I don't know about?\" I asked.\n\n\"Nope.\"\n\n\"Oh well, back to reality then,\" I said.\n\n\"Meanie.\"\n\nI placed my hand on her leg and began moving it back and forth. She shifted a few times and I gradually moved it a little higher, to the hem of her dress.\n\n\"Am I still a meanie?\" I asked.\n\n\"Well, that all depends on what you show me in the next few minutes. I mean, you bought me this dress for a reason,\" she said.\n\nSo, one of the road then. Good. My hand slid up under the dress and continued upwards until I reached her hips. Unsurprisingly she wasn't wearing panties.\n\n\"Tsk. No panties. Such a naughty little girl,\" I said, as I continued to run my fingers over her skin, running them over her mons, but not ready to touch her pussy yet. She was sliding down on the couch, and opening her legs. Her eyes were closed and her breathing was getting deeper.\n\n\"Should I wear this dress tomorrow, Daddy? Should I forget my panties again when I'm going through security?\" she asked.\n\nI reached over with my other hand and grabbed the belt tying the dress together and gave it a little tug. It pulled away with little resistance and her dress parted, revealing all of her body. She gave another quiet little moan.\n\n\"If you don't wear panties, then I guess you couldn't wear a bra either,\" I said. I adjusted my position so I could lean over and start to kiss and lick her nipples. My hand switched and began running along her pussy lips without touching her clit. Her hips moved up, trying to get more contact, but I wouldn't give it to her. Not yet anyway.\n\n\"Wh-whatever you want. You're the Daddy. I'm just a helpless little girl,\" she said.\n\nI let my lips slide off her nipple and move upwards and bit her ear lobe gently.\n\n\"You're all mine, aren't you Kitten?\" I said in her ear.\n\n\"Yes, Daddy,\" she whispered.\n\nMy fingers found her clit and began circling it slowly. \n\n\"So you'll do what your Daddy tells you to do, right my obedient little Kitten?\"\n\nA groan. \"Yes, Daddy. Please...\"\n\n\"Please what, Kitten,\" I said, my fingers moving a little more quickly.\n\n\"Please tell me how I can be your good girl, Daddy,\" she said, sounding frustrated. Good.\n\nI began shifting and she was too distracted to notice what I was doing. This was a bit mean, and she'd complain later. She was assuming at some point I was going to drag her back into the bedroom. I had other plans. I glanced at my watch; it was two minutes until the Disney fireworks began. Plenty of time.\n\nI pulled the pillow I had stashed under the couch on the deck with my foot. I shifted my position so I was now between her legs and I knelt, her beautiful pussy only inches from my face. \n\nI'd been quiet for a few seconds so she knew something was up. She opened up her eyes to see what was going on. That's when she noticed where I was. A look of shock was dawning on her face.\n\n\"Let's see if you can keep quiet, Kitten,\" I said, and then ran my tongue the length of her clit.\n\nI'll give her credit, she managed to muffle most of the scream with her hands. \n\nI wasn't a complete sadistic bastard. Either these patios were very soundproof or the people in the adjoining rooms were never out outside during the fireworks show. Plus, there was plenty of noise coming from below as people gathered around one of the outside pools waiting for the fireworks to begin. They were talking and there was music playing. And we were on the 8th floor. It would take either a quiet moment or Kitten hitting a high decibel range for people to hear.\n\nI knew that; Kitten didn't.\n\n\"Daddy, oh God, Daddy, someone will hear, Oh fuck,\" she rambled, trying to be quiet, but only moderately succeeding. She was torn between trying to scramble away and get back in the bedroom and push her pussy back against my face.\n\n\"They'll only hear if you're noisy, Kitten,\" I said, taking my mouth off her clit for a moment. \"You'll just have to find a way to be quiet because you're not going anywhere.\"\n\nBefore I continued licking I noticed the time. Thirty seconds. Perfect. I sucked her clit back into my mouth and began flicking it with my tongue. I took two fingers and slid them inside her, curving them so that they wouldn find her g spot.\n\nHer hips slammed upwards and she was beginning to lose control. Good.\n\n\"Oh God, Daddy. Please Daddy. I'll be so loud and I can't stop it, Oh my God,\" she cried out her voice getting louder.\n\nThings happened quickly all at once. Kitten finally noticed the pillow on the couch next to her, so she quickly grabbed it, buried her face and began screaming loudly into it. The fireworks display began, and then she came, and I could feel pussy pulse around my fingers and my face got deliciously wet. Her hips kept moving spastically, the feel of my beard, tongue, and fingers kept the orgasm rolling along. Finally, she dropped the pillow and begged for mercy.\n\nI stayed there, gently kissing the inside of her thighs. My way of doing some aftercare.\n\n\"Why am I still seeing fireworks?\" she finally managed to get out, slow to process what was happening. Then she clued in and managed a look of mild frustration through the orgasmic haze.\n\n\"Did you time my orgasm to the start of the fireworks display?\" she said.\n\n\"I may have,\" I confessed. She laughed.\n\n\"You're insane, Daddy. A fucking spectacular pussy licker, but insane,\" she said.\n\n\"Who says I'm done yet. Be a shame to let such a spectacular fireworks display go to waste,\" I said. I leveraged myself up using the edge of the deck and then walked over to the door. She looked at me trying to figure out what I was up to now. I clicked off the light in the bedroom area and the small one on the deck. I then pulled down my shorts and moved towards the couch.\n\nWhatever my plans were they were going to have to wait as Kitten moved quickly and immediately latched onto my cock and began sucking. If there was such a thing as payback cocksucking, Kitten was engaged in it. She took as much of my cock as she could and pushed me back against the concrete wall of the deck. Behind me was a spectacular fireworks display with the people down below making appreciative noises.\n\nOn her knees before me, using the same pillow I had a moment ago, was my Kitten doing her best to worship my cock. The fireworks were the least important thing in the world right now. I placed my hands on her head and she let me take over as I gently pumped my cock in and out of her mouth. She resisted at one point and took as much of me as she could in her mouth, looking up at me at the same time. Finally she pulled back and gasped.\n\n\"So close, Daddy,\" she said, and began licking my cock again.\n\n\"Yes, you were Kitten. If Daddy is the best pussy-licker around I think my little girl is the best cock sucker going.\"\n\n\"Uh huh,\" she said, less interested in praise and more interested in getting her mouth back around my cock.\n\n\"You're missing the fireworks,\" I teased.\n\n\"I've already seen plenty tonight,\" she said, briefly, before diving back down.\n\nI gently pushed her back and she protested, trying to keep my cock in her mouth as long as she could.\n\n\"Trust Daddy. He has a plan,\" I said and then moved towards the couch and sat down. She looked at me in disbelief, as I was passing on a perfectly spectacular blowjob she was giving me. Then I tapped my lap. She stood up, and moved towards me and God, I was reminded again that I was lucky beyond belief. She began to crawl up on my lap when I spun her around, so she was facing away from me and towards the fireworks. She glanced back at me, with a questioning look.\n\n\"Trust your Daddy, Kitten,\" I said. A smirk played across her lips, but she resisted the urge to say anything to me.\n\nI then positioned my cock upwards and let her settle down. Although we hadn't done much reverse cowgirl, she quickly figured out what I was doing, and let out a little groan of relief as much cock slid into her.\n\nWe sat like that for a minute. Her ass sitting on my lap with my cock buried in her. I ran my hands across the front of Kitten's body and cupped her breasts. She lay her head back on my shoulder, and although the angle wasn't perfect, I'm pretty sure I could see her grin.\n\n\"Mmmmm, fireworks.\"\n\nI looked again; her eyes were closed. I pinched her nipples and she gasped, doing a little bounce on my lap.\n\n\"You're supposed to have your eyes open to enjoy the fireworks, Kitten,\" I said.\n\n\"Don't wanna. Can't make me,\" she said. My little brat back in full force. \n\n\"Well, I can keep you entertained,\" I said, and began bouncing her on my lap and she made the most adorable little squealing noises.\n\n\"Daddy, oh fuck, Daddy, I'm going to get noisy really soon. People will hear when I, oh God, when I cum on your cock, Daddy,\" she babbled.\n\n\"Then I guess you'll just have to be as quiet as you can,\" I said. She whined in protest but began bouncing up on and down on my cock on her own and tried hard not to make any noise. I moved one of my hands down her body and began playing with her clit. I could tell the Disney fireworks were going to end soon, but my little girl's were just about to begin.\n\nHer bouncing became more erratic and I knew she was close and her moaning was getting louder.\n\n\"Daaadddeeeee!\" she began to cry out when I wrapped one arm around her body, pinning her to me, and then I clamped my hand over her mouth, muffling her screams. The feel of her body shuddering against me and her pussy pulsing around my cock nearly made me cum, but I managed to hold off. Barely.\n\nKitten slumped against me and I took my hand away from her mouth and she gasped for air for a few moments. I wrapped my arms around her and whispered that she was a good girl. She hummed in agreement.\n\n\"Those were good fireworks,\" she finally said.\n\n\"Your eyes were closed most of the time, Kitten.\"\n\nShe tapped her head. \"Best fireworks ever, Daddy.\" Then, she looked back at me. \"Can I turn around to face you? I like looking at you when you cum.\"\n\nI released my arms from around her body, and she quickly pulled off of my cock, moaning as she did. She spun around on wobbly legs, repositioned herself over my cock and quickly sank back down on me. We both made quiet little noises of appreciation.\n\n\"Were you trying to get us caught, Daddy?\" she asked, content for the moment to sit there and not really move. She had an almost psychic ability to know how close I was, so my little girl was engaging in some small payback for the evening's activities.\n\n\"I was just trying to entertain you, Kitten,\" I said. She looked skeptical. \"Besides, I've noticed you like fucking outside, so I thought during the fireworks display would be the perfect time.\"\n\nShe blushed a bit, and was about to respond when there was a noise from next door. A family was coming out onto the deck.\n\n\"Damn. Looks like we missed the last out of it. Sorry, kids,\" a male voice said. A couple of younger voices whined in disappointment. Then, to my mild horror, they began settling onto the deck and were chatting and talking.\n\nIt was also noticeably quieter. The fireworks had stopped. The music below was now much lower. It's hard enough to get kids to sleep at Disney, the last thing you need is loud music blasting. There was pushing your luck and then there was this. I started getting up so we could move things inside. Kitten was light enough that I could probably carry her, even impaled on my cock like she was.\n\nThat's when she grabbed the back of the couch and somehow willed herself to weight about 20 pounds more. Getting up from the couch at this angle just became much more difficult, unless I was ok with the neighbours hearing giggling and mild cursing and likely groaning.\n\n\"Kitten,\" I hissed...\n\n\"You'll just have to learn to be quiet, Daddy,\" she whispered in my ear. I was going to fire a comment back to her when she began moving. Slowly and deliberately. She moved her hips upwards, so that my cock almost slipped out of her pussy, and just before that happened she slowly moved her hips back down. She kept repeating this over and over, looking me in the eyes the entire time.\n\nIt was a battle of wills between the two of us. I was closer to cumming, but my Kitten could go zero to sixty in about three seconds and I could tell it was starting to get to her. But apparently she had one last card to play.\n\n\"Cum in your little girl, Daddy,\" she whispered in my ear in her little sing-song voice. \"You've been such a good Daddy, ohhhhhh, you deserve to give her alllllll your cum.\"\n\nIf the people next door stuck their head around the side of the wall to say hi, they couldn't have stopped what was happening next.\n\n\"Cum for me, Daddy. Cum in me, Daddy,\" she kept whispering in my ear. Finally I pushed my hips up, keeping myself buried in her and came with a quiet groan as I could manage.\n\nWhen I finally opened my eyes I could see Kitten's look of satisfaction was being replaced with the shock of a quickly building orgasm. Teasing me, and then feeling me cum inside her had pushed her to the edge. She was quickly bouncing on my cock, and then her mouth opened. She was going to scream loud enough to wake the dead. I quickly reached up, placed my hands round the back of her head and brought it to my shoulder. She sank her teeth into me and let out a quiet scream. I winced, but gritted my teeth through it.\n\nThe chatter next door continued, so it appeared we'd dodged another bullet. I could hear Kitten gasping for breath as she recovered from cumming. Eventually she looked at me with slightly glassy eyes. I smiled at her and she smiled back, until she noticed her teeth marks in my shoulder.\n\n\"Oh Daddy,\" she whispered. \"I'm so sorry. Are you ok?\"\n\nI kissed her and she melted into it, momentarily forgetting about her bite mark.\n\n\"What do you say we go inside and you can kiss it better?\" I said.\n\nShe smiled. \"Deal.\"\n\n****\n\nI was sitting at the gate for our Air Canada flight back to Toronto, waiting for my Kitten to return from wherever she had wandered off to. Instead of passing out from her orgasms last night, they seemed to give her new energy so it was close to 11 pm before we fell asleep. Well, before I fell asleep. For all I know, the little brat was checking her phone until after midnight.\n\nIt meant the 5 am wake-up was as delightful as I expected. I grumbled, but got out of bed. Kitten put her head under her pillow and refused to get up. It wasn't until I pulled the sheets off of her and gave a light slap on the ass did she squeak, get off the bed, and shoot laser beams out of eyes.\n\nWell, not really. But if she could I was in serious trouble.\n\nShe was also serious about carrying through with her idea from last night, about going all day without wearing a bra and panties. Her little way of torturing me through airports and a three-hour long flight. We finally compromised on wearing them until she cleared security and then, if she wanted to, she could go to the washroom and change. It would also let her see how transparent her dress was before she did anything.\n\nI glanced up from my phone and I could see her making her way towards me carrying coffee. She was wearing her Mickey Mouse ears and had her hair tied back in a ponytail. She had also thrown a light sweater over her shoulders, which was about as far as I was going to get to her admitting I was right when I warned her the airport's AC. She had also put on her three silver chains collar, with the lock portion visible. She was showing off a bit of cleavage with the top part of her dress undone.\n\n\"Hi Daddy,\" she said, and bent down to kiss the top of my head, which was her excuse to show me that she had removed her bra. I would bet money that at some point she was going to put a blanket on her lap during the flight and I would be encouraged to find out if her panties were still there..",
        "She handed me a coffee, which was much appreciated, and then sat down next to me and snuggled in and yawned.\n\n\"If you fall asleep here, I'll just leave you. Maybe pin a note on you saying where they can return you to,\" I said.\n\nShe took her head off my shoulder long enough to lick her tongue out at me, and then snuggle right back in. My threats were meaningless.\n\n\"Daddy,\" she said in a sleepy voice. \"This was a really good vacation. Thank you for taking me.\"\n\nAnd that day, the Grinch's small heart grew three sizes, I thought to myself.\n\n\"You're very welcome, princess. Thanks for being such a good little girl on vacation.\"\n\nI could practically feel the smile against my arm.\n\n\"I love you, Daddy.\"\n\n\"I love you too, princess.\"\n\nShe giggled softly \"I'm a Disney princess now,\" and I reached down and kissed her head, saying yes she was.\n\nDespite a solid effort on my part in trying to ruin things it really had gone well. Not many couples spend five nights here and only have one, moderate-level fight. Just as illuminating was finding out that we were at the point where it sounds like she would seriously consider it if I proposed to her.\n\nIt was insane, of course. We didn't have six months together yet. She still had two years of school left. And I'm not entirely sure she fully understood the commitment involved with marriage. Then again, kids whose parents are divorced don't tend to joke or take marriage lightly.\n\nI took a sip of my coffee, letting it burn its way down a bit. I looked back at Kitten, who had actually managed to fall back asleep. I shook my head and smiled.\n\nThere was no rush. Not yet. But getting married to her didn't seem as remote or far off as it did a week ago.\n\nA woman at the gate desk took that moment to announce boarding by zone was now beginning. I shook Kitten who grumbled, but sat up.\n\n\"Come on, Kitten. Let's go home.\""
    ],
    "authorname": "thanagar",
    "tags": [
        "ddlg",
        "younger woman",
        "older man",
        "romance"
    ],
    "category": "Mature",
    "url": "https://www.literotica.com/s/little-packages-ch-05"
}
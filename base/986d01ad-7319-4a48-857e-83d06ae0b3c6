{
    "title": "May There Be a Road",
    "pages": [
        "Credit must be given to Louis L'Amour. His book, \"The Walking Drum\", first introduced me to the phrase \"Yol Bolsun\". While research indicates disagreement as to the correct translation, I prefer Mr. L'Amour's translation because of its literal and metaphoric inferences. \n\nIn any event, I hope you enjoy this story. Please vote and comments are always welcome. \n\n***** \n\nMay There Be a Road \n\n\"Yol Bolsun!\" I shouted to my father and the others as they mounted their horses, preparing to leave on their hunt. \n\nThe group of horsemen turned their horses toward me and returned the salute: \"Yol Bolsun!\" Wheeling their mounts, the men charged off onto their next adventure. \n\n\"Yol Bolsun, may there be a road,\" I thought to myself as I turned away. I couldn't wait until I was old enough to accompany the men, or better yet, leave on an adventure all on my own. \n\nI am Tomasison, and I was 5 years old, the son of Abbica Khan, leader of our Khazar tribe in the year 878AD. \n\nWe were a wandering people, always yearning to see what was on the other side of the next hill. Our young were taught the secrets of the stars from the time we could understand. We grew up to know how to observe and navigate instinctually. At the age of five, I could navigate as well as any of our elders. By the age of seven, I was accompanying the men on hunting trips. By ten, I traveled with the men on exploratory journeys and served as rear guard on raiding parties. \n\nOn my twelfth birthday, I left on my first solo adventure, a journey that lasted six months before I returned. On leaving, my mother hugged me to her breast and ordered me to return to her safe. I assured her I would. What else can you say to your mother? \n\nAs I loaded my gear and mounted my horse, I heard my father shout, \"Yol Bolsun!\" \n\nMy eyes grew moist as I realized my father was acknowledging that I was a man by giving me our tribe's ultimate salute for Yol Bolsun, means literately, \"May there be a road.\" And to we, a wandering people, there could be a no greater send off. \n\nMy first journey took me to see places and meet people like I had never seen before. Customs and languages that were foreign were, at the same time, frightening and exciting. That first trip, I was extra cautious, slowly approaching these strange and excitingly new people with their different customs. I learned new languages, a word or phrase at a time. \n\nBy the time I returned to my own people, I was hooked. The drive to explore as much of our world as I could was overpowering. I loved my mother and father, but I was driven to wander. \n\nI had long talks with my parents, together and apart. Both understood, because that was the way of our people. Both had advice, Father reminding me I would someday be Khan and to remember our people, and Mother to implore me to return to her when I could. However, both acknowledged my need to fulfill my destiny and gave me their blessings. \n\nAt fourteen, I left home not to return for seven years. \n\nDuring those years, I learned the lessons that would serve me well when I was to return to our people and assume the mantle of Khan. \n\nFrom the Germanic people, I learned the art of war and the importance of organization. Both lessons proved invaluable, for as a nomadic people, we were constantly in conflict with other tribes. Proper organization made for less wasted time. This proved vital when we were caught by surprise. Everyone knowing their jobs and responsibilities lowered our vulnerability to surprise by minimizing the time needed to react and counterattack. \n\nSimilarly, learning the strategies of war and keeping up with the latest in weaponry, both offensive and defensive, enabled us to have the edge needed to prevail when it came time to fight. \n\nFrance was an ugly place in which to live, particularly the cities. The Catholic Church, supported by the French nobility, banned all books, except those religious books they deemed holy. Healthcare and personal hygiene were nonexistent. Praying and holistic care were all the people had. Living conditions were horrific, people seemingly living in the same slop and mud as their livestock. Some really did live with their livestock by necessity, as robbery was a standard form of providing for the family. \n\nOne thing the French people had was a strong form of resiliency. There was a strong resistance movement to the Church's dogma. Underground groups of scholars hoarded books otherwise burned by the Church. Groups of young people came together under the cover of night to read and discuss the books. Doctors of modern medicine were hidden and moved around to protect them, so they could offer their services to those in need of more than holistic medicine could offer. \n\nThis was a dangerous game, because to be caught was to be executed by burning at the stake for being, or helping, a witch. This I saw with my own eyes. I will never forget the sight, sound, and especially the smell of the execution. There may be a worse way to die, but I cannot imagine it. \n\nLiving with the French reinforced my belief in cleanliness and strengthened my suspicion of man's religion. While I believed in God, it was always sickening to see God and religion used for man's profit. \n\nUpon leaving France, I next traveled to Spain. If France was the example of how low man could descend, Spain was the guiding light of what man could accomplish. Cordova and Cadiz were centers of learning. They were places where scholars were the elite, next to the nobility, of course. \n\nParties were given just so scholars in the employ of a particular nobleman could be shown off. On the other hand, it was the employment of a learned man by the ruling elite that allowed said scholar the means of employing the working class as writers and transcribers. And employ them they did. \n\nHundreds of illiterate people were employed to transcribe and translate. A transcriber was given a page of parchment, ink, and a quill and told to copy the marks from the original to a fresh parchment. The worker didn't need to read or write - just copy accurately. However, it was copying that gave the lowly worker the opportunity to learn to read. This was not the main intent of the work process, but it was a happy byproduct. \n\nAt seventeen, I was employed by one of the more prominent scholars attached to one of the most powerful of the ruling class. I was employed because of my verbal command of five languages and a working knowledge of two others. My job was to work with the scholar to ensure the proper translation of words or phrases from one language to another. Sometimes, there is not a literal translation from one language to another. It would be up to me to find a word or phrase that would convey the original meaning. \n\nFor this, I was handsomely paid and came to be included socially with the upper class. Those in the ruling upper class, particularly the ladies, both married and single, seemed intrigued and drawn to my, not too far under the surface, savagery. But that is another story and not a part of this narrative. \n\nOne of the big things I learned during my time in Spain was the power of the written word. Spoken words are forgotten and/or twisted with time. The written word is forever. \n\nSocializing with the ruling class also allowed me to observe the machinations and intrigue of the rich and powerful. I learned to be wary of the smile, because the barer of the smiling lips may be holding a knife behind his back, waiting to stab you when you turn away. \n\nBy then, I was twenty years old and was feeling the tug to return home. I had been gone six years and missed my family. So, I began my trip toward the area I knew my family and the rest of my people would be. \n\nI had just finished crossing the Pyrenees mountain range, the mountains that separated the Spanish lands from the French lands, when I spotted a solitary horseman approaching from the west. He was riding easy and in the open, showing no signs of aggression. So, I sat my horse and watched his approach. \n\nAs the rider drew up to me, he raised his right arm and hand in a universal form of greeting. I did the same. We sat and studied each other for a few moments and then, almost on que, we tried to converse. I say we tried, because this rider spoke in a language with which I was unfamiliar, and he was unable to understand my Khazar dialect. Eventually, we found we could communicate in Spanish. And so, began a friendship that would last our lifetimes. \n\nPeter, I would learn, was English, and his tale was a painful one. My new friend was a soldier and, upon returning home from a campaign, found his home and family destroyed by a band of marauders. The family home had been burned to the ground and was still smoldering as Peter arrived. His father lie dead near the front gate, evidence of his heroic battle to protect his wife and daughter all around. There were 3 distinct pools of blood, showing the truth of his fierce attempt to defend his family. The multiple stab wounds followed by the sliced neck coup-de-grace demonstrated the outcome, however. \n\nPeter's mother had been dragged out back, where she had been raped multiple times, battered, and left for dead. She too, showed her strength of character by surviving long enough to tell Peter what had happened and who was responsible for the death and destruction visible, as well as the abduction of Peter's fifteen-year-old sister, Mary. \n\nPeter had traced the band of brigands to a tyrant who lived in a castle in the City of Constantine, now beginning to be called Constantinople. It was Peter's quest to find and rescue his sister and deliver some measure of retribution to the person responsible for the destruction of his family. \n\nAs we traveled eastward, we came to know each other. We shared campfires and food. We learned each other's language. We shared our life stories. We fought off thieves and highwaymen, and over the months, we became brothers. I had never felt the strength of a bond to another person like I felt with Peter, save my relationship to my father and mother. Realizing this, I came to know Peter as my true blood brother, and he accepted me as his. \n\nAt night, over our small fires, we would talk out the problem of rescuing Mary. We discussed and rejected plan after plan of how we, two men, could overcome an armed castle. Every plan was suicide. Yes, by this time, I was all in with the idea finding and reuniting Peter with his sister. He was my brother, and I could do no less. The problem was finding a way that would not sacrifice all our lives in the process. \n\nThe answer came as we neared my tribe's home grounds. One day, we spotted a rider fast approaching from the northwest. Unslinging our swords, we waited. As the rider drew near, I recognized him as a member of my people. \n\n\"Yol Bolsun!\" I shouted in greeting. \n\nThe rider, Barakis, drew up in surprise. Suddenly, recognition leaped from his eyes, and he responded, \"Yol Bolsun Tomasison. Welcome home, the Kahn will be pleased to see you.\" \n\nIntroductions were made. Barakis was impressed that a man so foreign to him could converse in our own tongue. As we rode together, Barakis told us that our tribe was camped a half a day's ride to the south. We would stop for a day or two to rest ourselves and our horses. The months of travel had been hard on us, and we needed a break, despite the sense of urgency we felt to find Mary. \n\nAs we rode into my home camp, my mother turned from her chores and saw me. Dropping an armful of clothes, she screamed my name and came running as fast as her short legs could carry her. I jumped from my horse and into my mother's arms. I was home! My father came from around the hut, and we clasped our right forearms in a greeting that was, at the same time, a show of man to man recognition and intimate greeting. My father greeted me as his equal, and I showed him the love and respect he deserved as father and Khan. \n\nMother declared a feast was in order, and the women of the camp delivered in fine fashion. There was plenty of food and Glug, our ancestral drink, to last well into the night. \n\nWe were sitting around the fire; I was between Father and Mother, and Peter was to Father's right. Father engaged Peter in talk and soon had the story of Peter's families' destruction and his quest to save his sister. Upon hearing where Mary was being held, the Kahn dispatched a rider to the City of Constantine to survey the situation. Father told us we had family in the city and maybe that could be of help in planning our rescue of Mary. The Kahn also told us he and some of our men would also ride with us. When Peter objected, Father informed him that, as Peter had become my de-facto brother, he was now part of the tribe, and his family honor was now our family honor. \n\nAs my father and Peter clasped arms, I could see a moistening in Peter's eyes. He knew he again had a home and family. \n\nTwo days later, we rode out of camp fourteen strong to the cry of \"Yol Bolsun!\" from the camp. May there be a road. \n\nWe were two weeks into a three-week trip to Constantinople when the man Father had dispatched the night of our return celebration rode up to us. Dismounting, we gathered to hear what he had learned. As it was approaching mid-afternoon, it was decided to camp for the evening. After the horses were cared for and picketed, a small fire was built, and while eating and washing the food down with Glug, we listened to our scout's report. \n\nWe learned the castle we sought was on the Northwest edge of town. This was good news for us, as we knew we would not have to stage our retreat through the streets of the city. Rather, we could flee directly into the countryside. \n\nThe castle owner, Radik, was not liked in town. He hired from the local working class, but was a cruel and abusive employer. He paid low wages and cheated his workers of what he paid. This was good for us, as we were assured of help, or at least no resistance for our planned attack. \n\nWe learned Mary was, so far, unharmed. She was being held in the north tower, attended by a servant girl. The girl, we soon learned, was a member of our family and was more than eager to assist, as she and Mary had grown close over the time of Mary's confinement. Her one request was that we take her with us when we struck. \n\nThrough intelligence gathered from those who worked in the castle, we could get a solid picture of the castle layout inside the walls. We learned there was a small servant entrance on the north side. This entrance was normally closed and guarded by a detail of two. The main entrance to the castle was in the middle of the east wall. This entry was tall enough and wide enough to allow horse-drawn carts to pass. This gate was closed at nightfall. \n\nOur plan was for me to enter the castle grounds during the day and hide out when the gates closed for the night. Peter and two others would approach the north entrance under cover of darkness. Peter and one other would be on horseback; the remaining man would command a cart to carry the ladies away to the north and west. \n\nThe rest of our force, commanded by the Khan, would stage an early morning attack on the main entrance as a diversion. This group would then disperse through the city streets to regroup and rendezvous with Peter's group at a predetermined location. \n\nMy job, under cover of the diversion, was to free the ladies from their locked quarters and escort them through the north servant entrance. There, I would hand them off to Peter's group and then provide rear guard, while the group escaped. \n\nAt exactly three-thirty in the morning, the Khan began his attack on the main entrance. Flaming arrows flew over the wall to land on the ground beyond. Small balls of flaming tar were also catapulted over the wall. Most landed harmlessly in the courtyard beyond; however, some landed on the thatched roofs of some buildings with-in the walls causing fires to erupt. This worked to provide the diversion I needed to approach and enter the north tower of the castle. \n\nThe attack had drawn the guards to the east side of the castle grounds. Mary's quarters were guarded by a single sentry, whom I quickly dispatched. Mary and her servant were ready as I unlocked the door. We made our way to the ground entrance of the tower. Looking out the door, I saw we had about fifteen yards of open courtyard to traverse to get to the north gate. The good news was that one guard had been drawn off toward our attack, leaving only one guard to overcome to gain our escape. \n\nI told the ladies to wait in the doorway until I opened the north wall entrance. They should then run for all they were worth through the entry and look for Peter's group. I would follow as I could, maintaining a rear guard. \n\nI exited the tower and ran at the guard, screaming my war cry, with my sword held at the ready. The guard, startled by my sudden appearance and blood-curdling scream, hesitated before turning toward me. The hesitation was all I needed, as I drove my sword through his leather breastplate. I snatched his keys and opened the gate, and Mary and her servant dashed through to freedom. Peter and his men quickly loaded the girls onto the cart and took off at a run. \n\nI mounted the horse they had left for me and watched for signs of pursuit. After fifteen minutes, I noticed our diversionary attack was breaking up. I waited another ten minutes and then left to join our group at our rallying point. \n\nI was the last of our group to arrive. There was no pursuit yet, but we took no chance. Abandoning the cart, we all, including the ladies, mounted horses. We then dispersed riding north, west, and east. If a pursuit party finally found the cart, which set of tracks would they follow? \n\nPeter and I escorted Mary and her servant, whose name I learned was Constance. Four weeks later, we arrived at our home camp. Our party of fourteen had attacked a fortified castle and rescued two ladies held against their will. We had suffered no losses and only a few superficial injuries. This was a very successful campaign. \n\nI hadn't had time while getting the ladies out of the castle, but during our trip home, I had plenty of time to notice how beautiful Mary was. By the time we had rescued her, she turned seventeen, and a pretty seventeen she was. We had talked as we rode, and the more we talked, the more attracted to each other we became. By the time we arrived at our home camp, Mary and I were in love. The night before we arrived, I asked Peter for Mary's hand in marriage. Peter, after making sure Mary wanted this, gave his blessing. \n\nPeter had fallen for Constance, and lacking a father to ask, approached the Khan for permission to wed. Three days later, we had a double wedding. \n\nPeter and Constance departed for England after securing Mary's and my promise to visit. \n\nMy name is Peter Cornwall, and this is Tomasison's story as related to me by Tomasison himself. He and Mary came to England to visit as he promised. He was, by then, Khan of his people. In all my years, I have never met a person of such character. As he said in his narrative, we became brothers during our adventure together. I am proud to call him my brother and my best friend. Yol Bolsun! \n\nPeter Cornwall - the year of our lord, 909 \n\nI closed the goat-skinned covered journal and sat back in my seat. My name is Tomasison Larrik, and the Tomasison referred to in the journal is my namesake. I traced my fingers over the texture of the ancient leather and contemplated the words captured on the yellow parchment within. This was only one volume of the history of my family, but to me, the story of my namesake is the most powerful. \n\nI am sitting in an airplane in route from my home in Turkey to Colorado, USA to attend the wedding of my grandniece. Abigail, Abby to family and friends, is my sister's granddaughter, so I think that makes her my grandniece. I get confused by all the \"once removed\" and other nuances of family relations. Besides, I am old. I can call her as I please - if it pleases her also. And it does. ",
        "Abigail is now twenty-seven. Although we have never met in person, we have been conversing via first email and later Skype for nearly ten years. She first contacted me while she was in High School. She was working on a project researching her family history. Her grandmother, my sister, suggested Abigail contact me, because I had become, over the years, the unofficial expert on our families' history. \n\nOver time, we connected through our mutual love of our shared history. At first, we would email each other constantly as she strived to learn everything about the family. Through the years, as Abigail progressed through college and into adulthood, our relationship morphed into something more. First, I became something of a mentor. We found I could offer a unique and unbiased perspective to her life's challenges. \n\nLately, I feel like I am a close friend, someone she can share her deep secrets, without fear of compromise. Abigail has become my closest and most treasured relative. I have seen her growth for ten years from an enthusiastic teenager to a composed and confident young woman. \n\nSo, when I received an invitation to her upcoming wedding, I didn't hesitate to confirm my attending. So, here I am, traveling nearly sixty-five hundred miles to attend the wedding of a young lady I have never met. I was bringing this journal as my wedding gift. \n\nI was met at the airport by a limousine and transported directly to the rehearsal dinner. I had no part in the wedding, but Abigail wanted me at the dinner, so there I was. Meeting Abigail for the first time in the flesh was like meeting an old friend. Upon seeing me, she squealed like a little girl and launched herself into my arms. I was immediately welcomed into the group. It was fun to meet her soon to be husband, John, and all her young friends. The evening made me feel years younger, and I had a great time. \n\nThe wedding the next day went well. Abigail was beautiful in her wedding gown and the looks of adoration from both bride and groom bespoke of a long and loving relationship. I was very happy for the newlywed couple. \n\nFrom the church, we went to the reception hall, where we were treated to a marvelous meal. After the meal, the MC (master of ceremony) went from table to table, so those attending could say something to the newlyweds. When it came time for me to speak, I rose and began. \n\n\"My, and Abigail's, ancestors were Khazar, a tribe from the steppes of eastern Europe. They were a wandering people, driven to see what was over the next hill. They had a salute they shared with each other. Yol Bolsun, loosely translated, means 'May there be a road' and was the highest tribute they could make to a traveling man. \n\nOur lives consist of a series of roads taken and, sometimes, not taken. Some are long and convoluted, and some are short and result in a dead end. However, all our life's roads lead us to where we are today. \n\nUntil now, Abigail's and John's roads have been their own separate roads that have led them to this place, this day, to become united as one. From this point, they will travel their roads together. \n\nSo, I think it appropriate to salute the newlywed couple in the custom of Abigail's ancestors by toasting them with the words of her past. Please rise and join me in toasting the new couple - Yol Bolsun!\" \n\nThe reception hall reverberated with the sounds of two hundred people shouting \"Yol Bolsun!\" \n\nAs the echoes of the salute died down, I finished my salute by saying, \"May there be a road. May there ALWAYS be a road.\" \n\nThe silence was complete until the MC broke the quiet by announcing it was time for dancing. \n\nI enjoyed the party thoroughly. I was amazed by the young ladies coming up to me asking to dance. I wasn't complaining, mind you, just surprised that an old man, such as I, was attracting so much attention. It must have been my accent. \n\nDuring the evening, Abigail came up to me for a dance. As we shuffled around the floor, she told me she was so happy I could attend her wedding and that she considered me her special guest of honor. \n\nI told her the honor was all mine. \n\nNine months later, Abigail, joined by her husband, were on a plane, flying from their home in Colorado to Turkey. However, this was not a pleasure trip. Abigail was six months pregnant and normally would not be traveling this late in her pregnancy. However, this was not a normal occasion. \n\nUnknown to anyone other than Tomasison, when he attended Abigail and John's wedding he was dying of lung cancer. When he learned of Abigail's upcoming nuptials, Tomasison resolved to live long enough to attend the wedding and meet his grandniece. The trip was his last hurrah. \n\nTomasison had died, and they were traveling for the funeral. After meeting many of her Turkish relatives at the wake and then attending the service at the local church, the couple found themselves at the gravesite listening to the priest's last words. When the time came, the couple fell in line with the rest of the mourners approaching the casket to offer their final respects. \n\nWhen it came time for Abigail to approach the casket, she placed a single white lily on the walnut box. As she leaned over to place the flower, a single tear fell onto Tomasison's final resting place. Rising, Abigail, in a clear voice, made her final salute to her best friend and mentor: \"Yol Bolsun Tomasison, may there be a road.\" \n\nWith that, Abigail and John began their trek back to town. As they walked, Abigail looked over to John and smiling said, \"I think I know what I want to name our son.\" \n\nJohn hugged his wife close and replied, \"Yes, I think that would be perfect.\""
    ],
    "authorname": "Jeff_Thomas",
    "tags": [
        "yol bolsun",
        "family",
        "adventure",
        "tear jerker"
    ],
    "category": "Non-Erotic",
    "url": "https://www.literotica.com/s/may-there-be-a-road"
}
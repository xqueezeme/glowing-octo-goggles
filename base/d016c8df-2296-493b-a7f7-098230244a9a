{
    "title": "The Book of David Ch. 05",
    "pages": [
        "***\n\n-- CHAPTER 5: The Sisters --\n\n***\n\nFALL QUARTER, JUNIOR YEAR (September 2000)\n\nFriends. I could handle being friends.\n\nFor some reason, having sex with E-Beth gave me closure with her. I'd subconsciously spent the entire summer with her in the back of my head, wondering how we would act around her when we met up again at school.\n\nNow I knew. And I knew we could be friends.\n\nI grinned. Maybe friends with benefits from time to time... but friends. We weren't meant to be together. Not now, at least. I'd been there for her as she grew up into a full-fledged woman and gained her confidence. But that was the end of our destiny. I couldn't tie her down to me, even though she might have stayed with me out of obligation. It wasn't right. Just like Monica belonged to someone else, E-Beth had her Mr. Right out there somewhere else.\n\nI only hoped we didn't grow apart like Monica and I had done. At least E-Beth would still be at the same school, close by.\n\nIn the evening, I dropped by Kevin and Jen's place for dinner. We managed to chat about school for at least three minutes before Jen started peppering me with questions about E-Beth.\n\nI specifically avoided mentioning the sex, but I managed to communicate that everything was good between E-Beth and me. Of course, Jen couldn't let me off without a twenty-minute interrogation, and pretty much everything came out eventually.\n\n\"Dude! Even when you're not trying you manage to get laid,\" Kevin chuckled.\n\nThe rest of dinner passed easily as the three of us just hung out like good friends do. And then Kevin practically booted me out of their apartment, stating he had to catch up to me in the bedroom department.\n\nI said goodbye to Jen and promised to pray for Kevin's stamina. And on that note I started walking home.\n\nDanielle and Cherys were waiting in the living room when I came in, cuddling on the couch while watching some inane sitcom on TV. Then I also saw that Nataliya was on the other couch with her on-again, off-again girlfriend Leslie, a decidedly butch lesbian. I believed they were 'off' right now.\n\n\"Hey, where've you been?\" Danielle asked.\n\n\"Out,\" I said in a non-committal tone. Male teen responses were a hard habit to break. I started off towards my bedroom.\n\n\"Hey, did you eat anything?\" Nataliya asked, getting up and heading to the kitchen. \"We've got some leftovers.\"\n\n\"I'm fine.\"\n\n\"David...\" Nataliya came right over to me. \"You need to eat something,\" her tone was motherly.\n\n\"Nah, I ate with Kevin and Jen,\" I replied sincerely.\n\n\"Oh! Okay, just making sure.\"\n\n\"Thanks, Nataliya.\" I walked off for my bedroom.\n\n\"Hey, squirt!\" Danielle called out. I cringed just a bit. I didn't mind the nickname when it was just us. But being called 'squirt' in front of four women kind of wounds the male ego. \"Don't make plans for Friday night!\"\n\n\"Why not?\"\n\n\"Did you forget? It's your 21st birthday!\"\n\nAll the girls turned around and ooohed at that pronouncement.\n\n\"Oh, that. Well, I'm kinda broke. I was just planning to hang out with Kevin and Jen.\"\n\n\"No! You cannot!\" Nataliya cried. \"I have special present for you.\"\n\nDanielle waved her off. \"Let me call them. I'm sure that what we've got planned blows anything they've got out of the water. You think I wouldn't take care of my little brother?\"\n\nCherys flashed me a perfect smile. \"We are gonna get you soooo drunk.\"\n\n***\n\nIt took me a while to get to sleep that night. I kept coming up with wilder and wilder scenarios for what Danielle had cooked up for my birthday. While she'd always been a friendly big sister, she'd never taken an interest in any milestone dates in my life so far.\n\nBut I guess this was the big TWO-ONE. Perhaps she was finally going to stop calling me squirt and think of me as an adult.\n\nOr maybe she was going to embarrass the hell out of me. Both outcomes seemed equally likely, and I stayed up tossing and turning agonizing over which would happen.\n\nSo I was a little slow the next morning. Lack of sleep does that to you. I managed to stumble off to class. After oversleeping on the first day of school and sleepwalking my way to my second day, my academic career wasn't off to a great start.\n\nAnd so it was that my peripheral vision wasn't in focus when I walked into a small classroom. A familiar voice called out, \"Hey! David!\"\n\nRight in front of me, Amber was sitting at a desk chair in the third row. My head was thick as molasses and I slowly wandered over, found the desk chair next to her, and then sank down like a sack of bricks.\n\n\"Wow, you look like shit.\"\n\nI managed a pained smile. \"Didn't get a good night's sleep.\"\n\n\"You freaked out over what you and E-Beth did yesterday?\" Honest concern was in her voice, along with a clear note of curiosity.\n\n\"That?\" My voice immediately perked up as I remembered the good time I had. \"Oh, no, no. E-Beth and I are fine. We're friends. It's cool. But that's all over now.\"\n\n\"Good to know,\" Amber said mysteriously, looking straight down at her desk. But then she composed herself and asked, \"Then what is it?\"\n\n\"Oh, my sister.\" I sighed. \"She always drives me crazy. But never mind. So what are you doing taking Chinese Art History?\"\n\nAmber cocked her head. \"I dunno. Figured it would be an easy 'A'.\"\n\n\"Well then,\" a deep baritone voice with a thick Asian accent filled in. We both looked up to see the professor walking in the door. \"You may be in for a rude surprise.\"\n\nAmber blushed and got out her notebook, readying herself to take notes. I took a second longer to look over her. Unlike most college students, who typically wore T-shirts and jeans, Amber looked like she'd stepped out of a fashion magazine. Some multicolored polo with white collar and white cuffs around the short sleeves nicely accentuated her bosomy chest. A delicate necklace highlighted her collarbones. Slender capri pants called my attention down to the exposed skin of her firm calves, and she was even wearing 3-inch wedge sandals.\n\nAll of this I was used to seeing. Amber dressed like this all the time. But for some reason, I felt like I was noticing it more.\n\nAs the class went on, Amber slipped one foot out of her shoe and was dangling it on the end of her toes. I got distracted watching the flex of her legs while she did this and missed a couple of minutes of the lecture.\n\nLater on, I found myself watching the way Amber fiddled with the butt of her pen in her mouth, apparently lost in concentration. But then her blue eyes flashed over and caught me staring. A wide grin spread across her face.\n\nAfter the class ended, we started chatting as we walked out. Automatically, I just kept walking with her and it was a few minutes before I realized we were headed directly for the house she shared with E-Beth and their roommates. I also belatedly realized that the longer we walked, the closer Amber got to me. We'd started with a couple of feet between us as we ambled along. But now she was bumping against my elbow every now and again.\n\nI especially noticed when I tossed off a moderately funny comment and Amber turned and hit me on the arm, giggling in a very cute and girly way.\n\nWas Amber flirting with me?\n\nWe'd REALLY come a long way from 'What the hell are you looking at?'\n\nEventually, we got to her house. E-Beth met us at the door and smiled a smug grin at the two of us while Amber blushed. I hugged both girls goodbye and turned to head back the other way towards my apartment.\n\n***\n\nFriday night. Danielle told me to be ready by 10pm. So I sat on my bed, staring at the clock as it ticked forward at a snail's pace. 9:47 and 25 seconds... 26 seconds... 27 seconds... ugh.\n\nI'd gotten dinner with Kevin and Jen. I chipped in a few bucks and they kept me fed. It was turning into a good arrangement. Not that I'd minded Danielle's and Cherys' cooking over the years. But it was good to hang out with my friends and besides, Jen was a REALLY good cook.\n\nWe were normally open and chatty, talking about everything with no subject taboo. Only this night, both of my best friends clammed up the instant I asked if they knew what was being planned tonight.\n\n\"Oh, come on! You both know, don't you?\" I protested.\n\nThey looked at each other, then at their food. \"Dude, we promised we wouldn't tell,\" Kevin apologized.\n\nI started trashing Kevin's honor as a man, citing The Code, bros before hos and all. \"Aren't I more important to you than my sister?\"\n\n\"Don't even go there.\"\n\n\"So what happened to you for your 21st birthday?\" I asked. Kevin had turned 21 over the summer, back in his own hometown.\n\nHe smirked. \"Nothing like this...\"\n\nNow he had my interest piqued.\n\n\"But then, I didn't have a sister like yours, or like her friends.\"\n\nI was going to DIE from anticipation and anxiety.\n\nAnd so here I sat, alone in my bedroom on a Friday night. What was with all the mystery? Technically I'd turned 21 this morning. And I didn't feel any different than when I was 20.\n\nAt 9:54 there came a knock at my door. Immediately I yelled, \"Finally!\"\n\nKevin and Jen came in. Kevin was dressed like me, just jeans and a polo. It was about as upscale as we got in college. Jen was in her usual school clothes.\n\n\"Hey, dude. Relax! We're going to have a great time!\"\n\nI could see straight through Kevin's false sense of bravado. He was as nervous as I was. Further adding to the mystery was Jen's comment. She held Kevin's shoulders and said, \"Have a good time. Look, touch, but don't go too far, you hear me?\"\n\n\"Yes'm.\" He stated as ordered.\n\nJen kissed him then turned to me. She stepped forward and hugged me. \"Happy Birthday, David.\"\n\nIt was just about 10 o'clock when Jen left and Danielle came to get me. She was quite pleasant to look at with her dirty blonde hair done up and wearing some of her nicer jewelry. The black cocktail dress accentuated her willowy body and pushed up her cleavage. At least now I knew she wasn't taking me to a crappy dive. She looked over us two boys. \"All set?\"\n\nKevin and I looked at each other. \"You better not fucking leave me, tonight,\" I growled at him. He shrugged.\n\nWe walked out and Cherys was waiting in the living room, stopping us in our tracks.\n\n\"Holy shit, dude...\" Kevin gasped.\n\nCherys was dressed to the nines in some slinky, strapless dark green dress that shimmered depending on how the light hit it, just like her eyes. Her gravity- defying tits threatened to spill over the top, and the hem was short enough to reveal her long, long legs while barely covering her ass. Her raven hair was also up, exposing the graceful slope of her neck and shoulders. High heels and delicate makeup completed the look. She was Aphrodite come to life.\n\nJust when I was getting used to being around her, she goes and pulls this crap. It was a far cry from the baggy school football jersey she was wearing this morning.\n\n\"Hey, gorgeous...\" I murmured, more sincere in that phrase than I'd been in a long time.\n\nDanielle clucked her tongue. \"I said you shouldn't wear that. Now the boys will be staring at YOU the whole evening.\"\n\n\"Hey, a girl's got her ego,\" Cherys remarked. \"Let's go.\"\n\nKevin and I walked behind the ladies, obviously enjoying the view. Then we all piled into Danielle's car. Cherys offered to let me ride shotgun next to Danielle since it I was the birthday boy and all. I think Kevin got the better end of the deal sitting in the backseat with Cherys.\n\nWe drove out and then ten minutes later, my jaw absolutely dropped when I realized where the girls were taking us. It was a classy place and had a good reputation amongst the college crowd. But there was still a lot of neon exterior lighting and the words \"Nude Girls\" underneath the club's name had my heart racing.\n\nThere was a greasy, portly man just inside the front door who checked our IDs as we all filed in. He smiled at Danielle and then glowered at me and Kevin. Cherys was the last one through the door and he immediately brightened up. \"Hey! Cherys, baby! You sure I can't talk you into working here? With a body like that, you'd be a millionaire before you turned 25!\"\n\n\"Cool it, Leo,\" Cherys tossed off, looking bored and aloof while still managing to wiggle her torso and send her ample bosom jiggling just a bit.\n\nDanielle sidled over to her, wrapping an arm behind Cherys' body and palming a hefty boob. \"Yeah, you think I want some drunken slob drooling over my girlfriend's titties?\"\n\nLeo just laughed and waved us through. We went forward to what looked like a cashier's window at a bank. To my surprise, Leslie was behind the counter.\n\n\"Hey there, is everything set up?\" Danielle asked her friend.\n\n\"You got it. No cover charge and Jordan will take you to your table.\"\n\nI paused before the butch femi-nazi. \"I'm kind of surprised to see you working here, Leslie. Thought you would've ranted about this kind of place degrading and objectifying women.\"\n\nShe laughed, \"It is. But I like taking their money and it reminds me of the scum lowlifes that men can be.\"\n\n\"Like me?\"\n\nShe looked me up and down. \"Maybe not you. Besides, it's your first time in a strip club. I can tell. Just go and have fun. Happy birthday.\"\n\nSeeing a familiar face and having the short conversation relaxed me just enough to take the nervous edges off. So when the doors opened to the darkened club, I felt as ready as I ever was.\n\nNow I've seen some naked breasts before in my life. Monica had a very nice pair for her petite size and E-Beth's were just fabulous. But I'd never seen this many all at the same time.\n\nOn the main stage was a beautiful, skinny girl with dyed-blonde hair obvious against her dark eyebrows. Her fake tits were perfect circles on her chest, but large and very pleasing to the eye. And she was just the first one I noticed. On four separate mini-stages scattered on platforms across the room were four more strippers, all topless and gyrating to the music. So just like that, there were ten breasts visible and Kevin and I both got whiplash trying to look at them all at once. And that doesn't even count the waitresses, who were clothed, but just barely.\n\nI barely noticed when Danielle grabbed my hand and dragged me along with her as our hostess brought us to our table. We were right up front against the main stage where four plush, oversized chairs awaited around a small table.\n\nThe four of us were quickly seated, Kevin and I facing the stage with Danielle beside me and Cherys directly opposite. Our waitress was beside us in a flash, and I managed to order a Manhattan before I recognized her. \"Jenna?\"\n\n\"Happy Birthday, David!\" Another of Danielle and Cherys' friends gave me a peck on the cheek before she took everyone else's orders.\n\n\"How many friends do you have working here?\" I asked my sister.\n\n\"Just a handful,\" she had to raise her voice and lean in to be heard over the music. \"But I'm acquainted with almost everybody here. This is a popular place for students at the University, for both employees and customers. It's got a good reputation and it's considered safe. Cherys and I were able to talk them into letting us VIP you for the night.\"\n\n\"Thanks,\" I told her. \"For everything. Not many sisters would have done this.\"\n\n\"Hey, I like staring at pretty co-eds just as much as you do!\"\n\nAs if on cue, the next dancer came out and began her routine. This one was a smoky brunette with dark eyes and plenty of curves. I got so wrapped up in watching her gyrate and take her clothes off that I didn't even notice when my drink arrived and was sitting on the table.\n\nBy the end of her dance, she knelt on the stage right in front of me, undulating her hips in a clear miming of sex, her knees spread to the sides so I could see her shaved pussy lips just barely hidden by the tiniest of G-strings.\n\nDanielle slid a dollar bill into my hand and then physically yanked me out of my chair. With a deer-in-the-headlights expression, I stumbled forward and looked back at my friends. Danielle just waved at me and I held the bill up to the dancer.\n\nShe turned and presented me with her hip, indicating down to the strap of her G- string panties. I reached forward and trying as hard as I could not to touch her skin, managed to slide the bill into place and then I backed away hurriedly while she turned away to charm another patron.\n\nCherys was laughing at me like I was an idiot, and I felt the burn in my ears as I blushed. Kevin looked just as scared as I felt.\n\nDanielle spoke up. \"Okay. We'll have to get you really drunk before we try that again.\"\n\n***\n\nThree rounds later, my head was pleasantly thick and I was feeling good. Both Danielle and Cherys had gotten lapdances, clearly enjoying the near naked women just as much as the guys in the room were.\n\nAnd Kevin was getting his first ever professional lapdance. I could see the bulge in his jeans as his girl draped her tits over his eye sockets and then turned around to grind her ass against him.\n\nI was gone enough that I didn't even realize I was reaching out to touch her leg. Danielle pinched my other arm. \"No touching, unless she wants you to.\"\n\nI nodded dumbly. Danielle smiled and leaned towards her girlfriend. She mumbled something and the only word I caught was 'ready'.\n\nCherys nodded and called over Jenna. Our waitress came back and Cherys muttered something into her ear. I knew something was up. And it probably had to do with me.\n\nA minute later, I got my big surprise.\n\n\"Ladies and Gentlemen, this next dance goes out to a special guest. It's his 21st birthday today!\" A few drunken cheers went up in the audience. \"Just for you David, we present... Nataliya!\"\n\nMy jaw literally dropped when the buxom blonde came through the curtains. I recognized her face immediately, despite the heavy makeup which left her looking even more exotic. And I saw that she was a naughty schoolgirl fantasy come to life. Her hair was done up in paired ponytails that went up before they came down. Her little white top was tied off just beneath her breasts and exposed her flat tummy. And the skirt was obscenely short.\n\nNataliya skipped across the stage to some bubble-gum poppy number while a little girl's voice begged someone to hit her one more time. She showed incredible grace and rhythm as her hips bopped to the music and she spun around while slowly unbuttoning her top. All the while, she kept her focus on my table. More than once, her hazel eyes flashed in the light and looked right into mine.\n\nShe was clearly a pro, and I briefly wondered how many men had seen her get naked and fantasized about getting into her panties. Right now, I was the one doing the fantasizing. And without any physical contact, I was getting really turned on.\n\nSure, I'd noticed that Nataliya was a beautiful girl. She was the sort of statuesque Eastern European blonde that men all over the world lusted after. But she was first taken by various girlfriends or I was caught up in my burgeoning romance with E-Beth. After a while, I'd begun to think of her as another big sister like Danielle. Beautiful, to be certain, but not fuckable.\n\nThat assessment was now changing. Her stomach had a hint of musculature and a trapezoidal flare out to her shapely hips. And suddenly I was seeing much more of her hips when the skirt came off and puddled to the floor, leaving the tiniest G-string as a pink border between her perky asscheeks.\n\nNataliya's long legs were well toned and flexed wonderfully as she bobbed and weaved around the stage, alternately strutting and squatting. She had slender, delicate arms and hands that waved in the air as if floating on ocean currents and paused to frame her pretty face.\n\nAt the moment when she finally slipped off the top and bared her full D-cups to view, capped by volcanic pale pink nipples, I felt like spewing in my pants. But I held myself together and had to stop and take a big gulp from my drink to settle my nerves. And then she was done.",
        "A few minutes later, Kevin and I were on our fourth round of drinks watching the latest set of dancers when Nataliya came to our table, now clad in a slinky dress. Girls had been stopping by asking if we wanted lapdances all night. But so far, I had yet to take the plunge.\n\nWith a desperate look on my face, I looked straight at Danielle's friend, and to some extent, my friend. \"Dance for me, please?\" I begged.\n\n\"Of course, sugar,\" Nataliya answered. All else was forgotten. The world beyond my chair ceased to exist. And now I realized why these chairs were so big. Nataliya was able to straddle me with room for her knees on either side of me. And the high chair back gave her something to grip as she hiked up her dress and pressed her chest to mine.\n\nMy head was craned up to look straight into her eyes in wide wonder as she began to move her body against me.\n\n\"You're first lapdance?\" she asked me.\n\nI nodded.\n\n\"Ooh, a virgin!\" Nataliya's breath smelled like mint and she leaned down to exhale against my ear and neck, sending a shivery thrill down my spine. My hands were currently gripping the chair so hard I felt like I would snap the armrests. I wanted to touch her, to wrap my arms around this warm, feminine body in my lap. But I was worried; this was a gentlemen's club after all. Would some burly black guy named Bubba come and kick my ass if I breathed too loudly on her?\n\nAnd this was Nataliya. Nataliya! A woman who had babied me through my depressive freshman year. A woman I thought of as my big sister. A woman I saw almost every day and I'd never even attempted to lay my hands on her. And yet I wanted to cup those asscheeks just inches from my palms.\n\nThen Nataliya came THIS close to kissing me, putting her face just a millimeter away from mine. I didn't react at all, still slightly freaked out and not even tempted to try moving my lips forward. So Nataliya rubbed her nose against mine and then slid her cheeks along mine. Damn she smelled good. She moved her body in closer, pressing her still-clothed breasts into my face as she started up her gyrations.\n\nSilly me, I was still trying to be a gentleman and look up into her eyes instead of her tits. She smiled back at me, her tight lips seeming to express the thought that she doubted if her body was enticing me enough. If only she knew I was caught up with WHO she was as much as what she looked like. But then it was right back to her dance as she continued to undulate like a coiling cobra in my lap.\n\nMeanwhile, she kept up a string of husky stripper phrases: \"Do you like that?\" \"Feel my tits against your body.\" \"Mmm, you're so hard.\"\n\nAfter far too long, she slipped the straps of her dress off her shoulders, and then nothing in the world would prevent me from staring at her naked tits only inches from my face. They were very firm D-cups, hanging freely and sagging just enough to prove without a doubt that they were all real and all natural Nataliya. All I could think was that these were Nataliya's. I wasn't in love with her or anything. But I was amazed that they were hers.\n\nShe now had my full attention on her body.\n\nShe continued to gyrate and move. Eventually she managed to stand and strip off the rest of the dress, leaving her in nothing but the standard issue G-string. And now I had an almost fully naked, gorgeous young blonde grinding her crotch against my erection, pushing her weight down to really glide herself up and down the hard shaft in my jeans.\n\n\"Touch me,\" she urged in a low, husky voice.\n\nI was panting slightly, but still scared shitless. Nataliya took my hands in hers and she moved them to her ass, rubbing her own buttcheeks with my palms. But the instant she removed her hands from mine, I let go of her ass as if that was my cue to stop fondling her. I was still conscious of our location and didn't want to get into any trouble.\n\nShe paused from her dancing to put my hands back on her ass, holding them firmly to let me know my hands were right where she wanted them. And so I groped happily while Nataliya leaned in and absolutely crushed my face in between her round breasts.\n\nShe pivoted slightly and I felt the pebbly texture of a nipple pass along my lips, and I fought back the urge to kiss it.\n\nAnd then Nataliya was spinning around in my lap, displaying amazing flexibility as she kicked one leg over my head until her bare back was pressed up against my chest. She directed my hands and then I was cupping her amazing bosom, thumbs lightly brushing against her nipples while I felt the heavy weights in my palms. It was absolutely amazing. I was panting and now all I could think was \"I'm actually touching them.\"\n\nIt was perhaps the best four minutes of my life, and I wasn't even having sex. But it was over all too soon.\n\nThe song ended and it was time for her to move on. I'd seen it five times from the lapdances given to my companions already. But Nataliya didn't get off.\n\nShe stopped gyrating and settled into my lap, her crotch pressed against the mine as she sat up straight, her face a foot away from me. She was panting with her own arousal, and I could feel the moisture seeping down through the material of my jeans.\n\n\"I want to give you your birthday present now. Will you follow me to the VIP room?\" Nataliya asked softly.\n\nI saw Danielle jerk in the corner of my eye, surprise evident on her face.\n\n\"Uh, just me?\" I felt just a little nervous at leaving behind my safety net of friends.\n\n\"Yes. There are too many eyes here. Too many rules. Let's go somewhere private. I'll give you a lapdance you'll never forget.\" Her voice was smoky and full of promise, her accent alluring.\n\nI looked into Nataliya's hazel eyes, shining right at me, and all doubt left my mind. \"Let's go.\"\n\n***\n\nThe instant we entered into the private little cubbyhole, Nataliya launched herself at my face. Our lips met in a tornado of lustful passion and I cast aside all my remaining inhibitions. My hands wrapped around her body, clad once again in the slinky dress.\n\nThat would have to go, right away. Nataliya was like minded as she slipped the shoulder straps and the thin material, which couldn't have weighed more than a few ounces, dropped into a puddle around her feet.\n\nShe gave me one last kiss, crushing her lips against mine before she nipped at my lower lip with her teeth. And with a playful growl she grinned and shoved me roughly backwards.\n\nThe back of my knees hit something and I sat down suddenly, thankfully falling against an oversized and overstuffed leather couch. There wasn't much more to this room than the couch and the carpeted walls close in on me.\n\nNataliya bent at the waist to remove her panties, sending her pendulous tits swaying before my face, her hard nipples still protruding out a half-inch. I leaned my head forward to suckle at them, but her hand came flying out of nowhere to slap my cheek.\n\n\"Oww!\"\n\n\"Not yet...\" she scolded, waggling a finger in my face. Her smile was simultaneously condescending in that motherly way she had, and devilishly wicked at the same time. She got the g-string off and stood before me, wearing nothing but her skyscraper heels.\n\nNataliya's hand went between her legs, where she was shaven completely bare. I could see the skin glistening in the mood lighting. She stirred two fingers inside herself and then brought them to my lips. \"Taste how wet I am for you...\"\n\nI could smell her arousal long before the fingers got to my lips, but I suckled the digits in to really capture the aroma. And then she knelt before me to open the fly of my jeans.\n\nNataliya got me unbuttoned and unzipped and tugged at the coarse denim and my shorts until they were both around my ankles. Her hand pumped the shaft a few times experimentally, feeling out the length and testing its rigidity. \"I just knew you would have a beautiful cock,\" she moaned.\n\nI couldn't think of a witty comeback. A moment later, I didn't have to as she craned her head sideways and ran her lips along the shaft from base to tip. She teased the head before rotating over the top and dragging her lips down the other side.\n\nI could see the red streaks of her lipstick on my dick, and then it was all removed from view as she engulfed me in a single lunge. Her face only got down about halfway, and she bobbed back and forth a few times before forcing herself to relax and slowly sink further down.\n\nWhen her cherry red lips hit the base of my crotch, all I could do was groan and try not to buck my hips upwards, lest I gag her. I couldn't believe one of my sister's hot lesbian (excuse me, bisexual) friends was giving me a blowjob, the ultimate act of male dominance. Nataliya was clearly no novice at the art of fellatio, and within minutes I was gasping at the edge of climax. She hoovered me with powerful suction, and after the long tease of lapdances and strippers, I simply exploded.\n\n\"Nataliya!\" I cried in warning, just barely in time. She pulled me out of her throat just before my hips did thrust up, and her mouth clamped around my head as she began gulping down the heavy loads of cum I was dumping into her throat.\n\nWhen I was done, I collapsed against the oversized couch, sweating and panting like a stuck pig. \"Holy shit...\" After the intense build-up, that release was one of my strongest and most satisfying ever.\n\nNataliya grinned and purred in her honeyed accent, \"Yum...\" She reached up with a dainty fingernail and scooped up the rope of cum dribbling down her chin, popping the creamy glob into her mouth and sucking. And then her face returned to the source as her hot mouth surrounded me once again and went to work reviving me.\n\n\"Let me return the favor,\" I moaned while fighting through the initial sensitivity and onward to the pleasurable feelings.\n\nWith my meat still stuffing her mouth, she shook her head 'no'.\n\n\"It's the least I can do.\"\n\nShe popped off just long enough to say. \"It's your birthday. Now shut up.\"\n\nI chuckled and felt the last tension leave my body. Now there was nothing left but the heady arousal one feels with a statuesque, naked blonde.\n\nAt last, Nataliya was satisfied with my erection. And pushing on my shoulders to pin me against the backrest, she straddled my naked hips and slowly eased herself onto me.\n\n\"Fuuuuck. You're so much bigger than Fred.\"\n\nI got a curious look in my eyes. I'd known with certainty that Nataliya had occasional male lovers over the past couple of years, but I was curious as to who Fred was.\n\nShe noticed my look and smiled. \"Cherys' Fred, the dildo. Gawd dammit I forgot how much I missed real cock.\" And she began to ride me.\n\nWith all the skill and grace of her lapdances, Nataliya was now gyrating against me. Her naked breasts were once more shoved in my face, only now when a nipple brushed against my lips, no bouncers would come and prevent me from taking it into my mouth.\n\nIt was the perfect lapdance, a lapdance with my baton wedged into her snatch and my hands on her ass without inhibition. Nataliya pulled my head up to meet hers for a searing kiss, and we played tonsil hockey while she rotated around my cock like I was in the spin cycle of a washing machine. When she broke away, the husky stripper voice was back.\n\n\"Feel my tits against your face. Don't they taste wonderful?\" \"Do you like my perfume? I wore this one today just special for you.\" \"Fuck, your cock fills me up so well.\" \"Like that? You like that?\" With the exotic Russian accent, I was in sensory overload.\n\nWe fucked hard and we fucked fast. Neither of us could last forever. Despite having just cum, I was too excited by the environment and the sexy woman impaling herself upon me. And Nataliya was reveling in her illicit seduction.\n\nWith my hands on her asscheeks, I pounded her lighter body up and down me in rapid thrusts, straining for release. And just when I leaned forward and bit down on one nipple, Nataliya tensed up and shrieked her climax to the heavens. Her inner muscles quivered and set me off, and I was soon joining her, blasting away with wave after wave of hot jism to scald her insides.\n\nWe slowly chugged to a halt, Nataliya collapsing against my chest while I rested my chin on her shoulder and enfolded her in my arms. Only then did I notice that the privacy curtain was pulled aside and both Cherys and Danielle were just outside, looking in.\n\nThey looked hot and bothered. Cherys was just hot, her eyes locked onto the point where my dick was still embedded in Nataliya's pussy, creamy fluids leaking down where Cherys could see. Danielle looked rather more bothered. She was turned on and yet conflicted emotionally with the knowledge that she'd just watched her brother fucking... again.\n\nWhen it was apparent that we were finished, my sister and her girlfriend closed the curtain and left. I cuddled with Nataliya until we'd both caught our breath, and then it was time to slip into our clothing.\n\nOnce we were both dressed, Nataliya pulled me to her and kissed me fiercely. But when she pulled back, the sensual sex goddess was gone from her eyes. All that was left was the mothering big sister. \"David. That was great. And it may happen again. But I don't want to lead you on or anything.\"\n\n\"Don't worry about it. You were a fantasy come true. But I can accept it for what it was.\"\n\nShe kissed me again. \"Happy birthday.\"\n\n***\n\nI slept the peaceful sleep of the drunk that night. As soon as my head hit the pillow, the heavy weights on my eyelids dropped down and stayed down.\n\nWell, they stayed down until sometime around 2am. At first, I was dizzy with what promised to be a wicked hangover in the morning. I growled and realized I needed to pee, badly. That's what had woken me up.\n\nI'd just sat up in bed when I first heard the moaning floating in through the wall. \"Mmm... fuck me Fred...\" It was Cherys' voice.\n\n\"Doesn't he feel so good?\" Danielle teased.\n\n\"Mmm, yeah... Ooh... harder...\"\n\n\"Shh... you don't want to wake up David,\" Danielle warned.\n\n\"Ooh... David... fuck me David...\" Cherys moaned.\n\n\"Cherys!\" Danielle hissed. All went quiet for a few moments before Cherys moaned again. Then Danielle's voice came softly. \"Would you really want to?\"\n\n\"Yes! Yes! Fuck me David! Fill me with that fat cock! Fuck me! Fuck me! Yes!!!\" Cherys squealed loud enough for our neighbors to hear. And then she went silent once again.\n\nMy bladder was still complaining, but now my cock was getting hard as I visualized Cherys writhing in sexual agony, imagining me fucking her lights out.\n\n\"Oh, that was such a good cum...\" Cherys said. \"Do you think he woke up?\"\n\nI went dead silent. They waited a good minute before their voices dropped low enough so that I couldn't make out the words.\n\n\"Ugh!\" Danielle moaned. Clearly they had switched roles. \"Fuck me...\"\n\n\"You want me to fuck you with David?\" Cherys giggled. Danielle gasped immediately. Cherys kept giggling and quickly said, \"I mean Fred, Fred.\"\n\n\"Oh, you are such a naughty bitch.\"\n\n\"Feel David's cock filling you up, splitting you wide open. If you're lucky, maybe he'll even take your ass.\"\n\n\"Ugh!!!\" Danielle groaned. \"It's so wrong!\"\n\n\"Just imagine and enjoy. It'll never happen for real. So just feel it while you can.\"\n\nTheir voices dropped again to where I could hear them constantly whispering and giggling, but the words were incoherent. I listened for the next ten minutes as the two beautiful women pleasured each other. My bladder whined again and I looked down at my hard erection.\n\nNow how the hell was I supposed to pee?\n\n***\n\n\"So, how was your birthday party?\"\n\n\"Hmm?\" I looked over with bleary eyes to see Amber had fallen into step with me on the way to our Art History class. She leaned over and wrapped an arm around my waist and gave me a good squeeze. I barely noticed. I looked and felt half- dead.\n\n\"Wow. That good?\" she joked. \"You still hungover?\"\n\n\"Nah. Just too damn early in the morning.\"\n\n\"C'mon. Let's stop for coffee. My treat.\" Amber pulled away, her hand gliding along my back before she captured my hand and started tugging me in a new direction. She flipped her hair and flashed a brilliant white smile as we changed course and headed for the coffee cart. It was a common enough occurrence. She was always offering 'my treat' to pick up various snacks whenever the urge hit her. It had to be nice having that kind of money, especially in contrast to my college poverty.\n\n\"So how come I wasn't invited?\" she pouted, her clear blue eyes twinkling prettily.\n\n\"Uh, it wasn't that kind of party.\" I couldn't help but smile remembering the strip club and especially Nataliya.\n\n\"Bullshit. I see that smug shit-eating grin on your face,\" she huffed.\n\nI got all defensive. I didn't want her to think I wouldn't invite her. \"No, really. I-\"\n\n\"Don't even worry about it. Jen told me the girls took you and Kevin to a strip club. How was it?\"\n\nI didn't answer. She watched me for two seconds and smiled. \"There's that shit- eating grin again. I'm sorry I missed out.\"\n\nAmber looked so unbelievably pretty at that moment. The light was striking her just right, her full lips so puffy and kissable, and her smile was dazzling. I wasn't the only one who noticed.\n\n\"Hey, baby!\" came the derisive call. Two guys were walking the other way and obviously ogling my current companion. \"Hot damn that's a fine ass.\" One of the guys whistled appreciatively.\n\nAmber didn't even flinch, just holding up one hand a giving the guys the bird.\n\nI stared at her for a moment as we kept walking.\n\nShe shrugged. \"I'm used to it.\"\n\nBy now we'd arrived at the coffee cart. During a lull in the conversation I took a moment to appraise the pretty girl with me and the effect she had on other men. Amber was drop-dead gorgeous, and she knew it. She carried herself with a fire and confidence that I found inspiringly attractive. Her makeup was touch perfect, her clothes flattering, and her attitude just edgy enough to send a thrill through me. And now that I'd gotten to be friends with her, I was beginning to find I liked her personality as well.\n\nI wasn't dating anyone anymore. I was a free man. Would it be awkward seeing the roommate and best friend of my ex? Maybe. But maybe it was worth finding out.\n\nWe chatted about nothing for the minute or two in line. Once it was our turn, Amber spat out her order in rapid-fire: something-iatto, caramel-this, venti-that. The cafeteria company barista didn't get it all on the first take.\n\nSighing wearily, Amber repeated her order, slowly this time, as if she were speaking to a 3-year-old. And then she stood there with her arms crossed, tapping her foot impatiently.\n\nWhile the barista was then completing my order, Amber sipped at her coffee and kept checking her watch. We had plenty of time before class, but she seemed in an awful hurry all of a sudden.\n\nShe was still on edge when we both had our coffee and were walking to class. I reached out and touched her arm gently. \"Hey, relax. We've got plenty of time.\"\n\nShe calmed instantly at my touch. \"Oh, I'm fine. It's just... those people. They're stupid and lazy. That's why their people are so poor.\" There was no vehemence in her voice, just a condescending superiority in her tone.\n\n\"Those people?\" I wondered.\n\n\"You know, Mexicans.\"\n\nAll the warm, fuzzy feelings I was having over Amber washed away in an instant. I stiffened as sharply as if she'd physically slapped me. I couldn't help but do a double take back towards the coffee cart. I hadn't noticed the girl other than that she was a plain looking brunette. But as memory percolated I did remember her being a Latina.\n\nDid Amber really just make that kind of a racist comment? Just when I thought she was mellowing out from her 'Heights' snobbish attitude...\n\nI half-scowled and grunted, \"You know damn well they're not all stupid and lazy.\"\n\n\"Oh, I know not all of them,\" she continued the conversation fluidly, oblivious to my rapidly changing mood. \"But there are a lot of them. My parents have two.\"",
        "I stopped in my tracks. \"Have two what? You talk as if your parents own slaves!\"\n\n\"Certainly not!\" Amber's eyes goggled up and down, as if just now realizing how much of a prejudiced jerk she sounded like. \"I didn't mean it like that,\" she said defensively.\n\nI kind of glared at her, the anger still inside of me. I tried to think rationally. Looking at Amber watching me with obvious chagrin, I told myself she wasn't intentionally malicious. In fact, she looked downright afraid of what I might think of her.\n\nAnd yet, when the barista fumbled her order the first time, she automatically went to the 'stupid and lazy Mexican' analysis. It never even occurred to her that she'd given her order a little too fast. That was something Amber would have to work on, to put more thought into her judgments.\n\nIn a way, it wasn't her fault. She'd been raised in the Heights and I couldn't pretend to know exactly what went on over there, or how her parents raised her. More likely than anything, she was just ignorant and parroted what the people around her told her. Already, in the past year at school she truly had mellowed out quite a bit after being on her own and being exposed to a diversity of people. Hell, two years ago she wouldn't even talk to me. Now, I could honestly say we were friends.\n\n\"Look, it's cool,\" I finally spoke and she visibly brightened. For some reason, what I thought about her actually seemed to matter to her. \"Just... every once in a while, think about how you come off to people. A couple of years ago, I thought you were a spoiled snobby bitch.\" She visibly flinched at that. \"And you probably thought I was a dumb jock. Now look where we are.\"\n\nShe said nothing but continued her walk. We were almost at the classroom. Just before we went inside, I stopped her and touched her arm again. \"For the record, I was wrong back then. You're a beautiful person inside when you want to be, even more beautiful than you are on the outside.\"\n\nAnd then I walked through the door.\n\n***\n\nAmber didn't speak to me for the entire class. She seemed distracted and lost in her own thoughts. But when it was time to walk out, she fell right into step with me and we started a conversation as if the old one had never stopped.\n\nI walked her back to the house she was renting with her friends, and I stopped in to say hi to E-Beth and the other roommates. And then I was off to head back to my own apartment.\n\nOver the next month or so, Amber and I butted head more than once over what I felt was her close-minded bigoted viewpoint of the world. She thought I was a liberal communist while I tried to point out how I saw myself as moderate in everything.\n\nShe quickly learned that I wasn't trying to attack her about her viewpoints, but some heat definitely came into our arguments. More than once we found ourselves huffing and slightly out of breath, our faces flushed from the intensity of our discussions. Usually Amber would crack a smile first. It was amazing how the adrenaline rush of those debates was so similar to the hormonal rush of arousal. I wanted to believe the rosy color in her cheeks might have something to do with me as well.\n\nFortunately, I was able to let off that physical steam a few of times without resorting to my right hand. While Nataliya and I never made even the slightest attempts to establish a romantic relationship, we came together on occasion to mutually relieve each other's sexual desire.\n\nFirst there was the time she dropped by the apartment while Danielle and Cherys were both out. She never said a word. Her eyes simply glowed as she attacked my lips just inside the front door and began stripping out of her clothes. We barely made it to my bedroom.\n\nThe second time, we didn't make it. She was perched on her high heels and bent in half over the couch while I fucked her from behind. And when she spread her asscheeks and ordered me to ream out her cornhole, how could I possibly say no?\n\nWe had several more little trysts, all of them unplanned and all of them Nataliya- initiated. Then came the strangest sexual event with Nataliya.\n\nI didn't see her for a whole week, not even SEE her. Danielle was theorizing that she was getting back together with Leslie. I got slightly depressed that my only source of pussy might be back off the market.\n\nBut then lo and behold, Nataliya arrived at my door. The confident, mothering nympho had been replaced by a shy, almost virginal co-ed.\n\nNataliya asked me not to fuck her that night. Instead, she wanted me to make love to her as if I were the most delicate princess in the world. We started off with slow petting and I bent to worship at her altar of womanly delight. The wild nympho inside of her kept trying to break free as I brought her to climax over and again. But every time she was about to lose control and order me to fuck her within an inch of her life, she exhaled mightily and asked me to slow down.\n\nBecause of the constant starts and stops, I lasted a good twenty minutes inside her pussy before we finally came to a resounding simultaneous orgasm. The long build-up had me spurting like a fire hose and Nataliya visibly flinched when the first burst exploded against her insides.\n\nThe whole episode was totally out of character for her and I briefly wondered at Nataliya's state of mind. I knew that when she'd come back to school, she was single as she'd broken up with Leslie over the summer. They were still friends, but no longer lovers, and I worried that she contemplated taking things to the next level with me.\n\nThe problem was, I didn't love her. Sure, the sex was great and I adored Nataliya as a friend with most excellent benefits. But I didn't see her as relationship material. Even if Nataliya wanted to go down that route, my heart wasn't in it.\n\nIn a way, no matter how physically pleasant fucking Nataliya was, when I thought over my day it was my conversational walks with Amber that were the highlights.\n\nFortunately, I didn't have to ruminate on such relationship thoughts for long. The next day, old Nataliya was back and just hanging out in the apartment with Danielle. I secretly hoped we were getting back to the normal, stress-relieving version of sex I'd gotten used to. But then Nataliya's true motivations soon became clear enough.\n\n***\n\nFALL QUARTER, JUNIOR YEAR (November 2000)\n\nI was halfway to Kevin and Jen's place to hang out for a typical college Thursday afternoon when a cute, accented voice hollered \"David!\" across the quad.\n\nI stopped and turned to see an effervescent Nataliya jogging lightly to catch up to me despite her heels. I fondly remembered that she was very graceful, even in such awkward shoes. As she approached, I evaluated the long legs, encased in tight jeans with black stilettos just barely poking out the bottom.\n\nBy the time she caught up, I'd worked my gaze to her chest, where her large breasts were making quite the impression on her shirt. \"My eyes are up here,\" she giggled.\n\nI looked up into her hazel eyes. \"Hi Nataliya,\" I said to her lips, still imagining them wrapped around my dick.\n\n\"Are you doing anything tomorrow night?\" she asked with a playful lilt in her voice.\n\nI thought over my current plans: chill out on Kevin's couch, occasionally play video games. \"Nothing I can't change,\" I told her.\n\n\"Good! You're coming to a party with me, okay?\"\n\n\"Are you asking me out on a date?\" I asked, momentarily confused.\n\n\"No, silly. Anyways, we'll pick you up after 9.\"\n\n\"We?\" I wondered, but she was already turning a different direction.\n\n\"You'll see...\" she teased, glancing back at me with an impish grin. \"Oh, and DON'T tell your roommates. I want this to be a surprise.\"\n\n***\n\n\"Hiiii David!\" Amber said brightly as she deliberately bumped her hip into me as she joined me down the sidewalk.\n\n\"Morning,\" I replied in a friendly manner. \"Coffee? My treat this time.\"\n\n\"Sure!\" she beamed. We chit-chatted and managed to get our drinks without incident. Amber even smiled at the barista. And then an uncommon awkward silence settled in for just a brief moment.\n\n\"Hey...\" Amber drawled out while looking at the ground. \"You... uh, you doing anything tonight?\"\n\n\"Why? Whatcha got in mind?\"\n\n\"Oh... it's nothing. It's just that E-Beth is going off to this thing she does every month. She wanted to bring me along with her but I'm not sure it's my kind of thing...\" her voice trailed off as she looked a little lost in thought. Then Amber swiveled her eyes up to me. \"But anyways, I thought we might be able to hang out?\"\n\nI laughed, \"Like a date?\"\n\n\"Well...\" Amber waggled her head and put an index finger between her lips in a coyly flirtatious manner. \"I guess you could call it that.\"\n\nBut then memory kicked in and I slapped myself on the forehead. \"Oh, DAMN. I forgot, I already promised someone I was going with them to a party tonight.\"\n\nAmber's face fell.\n\n\"I'm really sorry,\" I apologized. \"I would have loved to hang out with you.\"\n\n\"No big deal,\" she tossed it off. Instantly, the haughty, slightly arrogant Amber was back. \"I've got lots of other options.\"\n\nAnd before I could come up with a new response, we were at the classroom. Amber walked right in and took her seat, the conversation over.\n\nAgain I wondered, Amber couldn't have any interest in me, could she? Despite my dating experience, I still didn't know how to read women. And then I remembered my roommates. After all, who better to ask for girl advice than Danielle and Cherys?\n\nBut then I remembered Nataliya's warning not to tell my roommates I was going with her to the party. Better not say anything just yet.\n\n***\n\nI felt a little weird, trying to keep this minor secret. I'd taken a shower and begun grooming for a Friday out. Danielle noticed immediately and asked me what was going on.\n\nI made up some lame excuse about Jen setting me up on a blind date, which she accepted. She and Cherys had bigger things to worry about as they were getting dressed to go out themselves. Based on Nataliya's warning, I imagined we would all end up at the same place eventually.\n\nJust before 9pm, the girls headed out, leaving me alone in the apartment and wishing me well on my date tonight.\n\nAt 9:15, the door knocked and I was ready. I opened it up to see a smiling Nataliya and was momentarily disappointed to see butch Leslie alongside with her. After all their on-again, off-again over the past couple of years, perhaps they were back to 'on'.\n\nAnd then I saw the third woman out there. Another tall blonde who looked like a carbon copy of Nataliya at first glance. She shyly stepped forward at Nataliya's insistence and reached out to shake my hand in greeting.\n\n\"I'm Maria,\" her accent was just as cute as her sister's.\n\n\"David. Pleased to meet you.\"\n\nMaria had the same hazel eyes and pretty face, but was skinnier throughout in comparison to her sister. With slender hips and a tight ass, she could have been a fashion model. I noticed that her thighs did not quite touch between her legs as she stood there in low-rise jeans.\n\n\"Very pleased to meet you,\" I said again.\n\nShe was quite beautiful and I couldn't help but stare for a minute. Once again I felt the strange sensation of transferring the physical attraction I felt for an older sister to the younger.\n\n\"Okay, let's go party!\" Nataliya said excitedly. Maria, to the back, was the first to turn around and head down the stairs. Nataliya elbowed me in the ribs as I couldn't help but stare at her little sister's tight ass and fantasize about bending her over in half and fucking her within an inch of her life.\n\nLeslie was driving and the four of us piled into her car. I was in the backseat with Maria and we took the opportunity to ask the usual questions. She was a new freshman, just a couple of months into her first year at school. She hadn't decided on her major yet and was living in a dorm not too far away from her big sister's apartment.\n\nAfter learning she was the baby of the family, with Nataliya and an older brother, I got the impression that she was a very sheltered girl and a little in awe at the University world around her.\n\nIt would turn out to be an incorrect impression. The reason for her shy nervousness turned out to have more to do with me.\n\nWe arrived at a stately mansion perhaps 10 minutes away from campus. There were already a few extra cars parked up and down the block, a sure sign there was a party going on. We walked in pairs, Nataliya and Leslie up front and Maria and I shadowing them from behind. The elder girls were deliberately leaving me to interact with Maria, and I was doing my best to keep the younger sister engaged in conversation. Thankfully, she had visibly loosened up over the last fifteen minutes.\n\n\"Do you know where they are taking us?\" I asked.\n\nMaria blushed and looked away cutely, \"Yes...\" she drawled.\n\n\"Ooh, that sounds mysterious. Can you tell me?\"\n\nShe shook her head without responding verbally.\n\n\"Is there some sort of plan that I don't know about?\"\n\nMaria's Mona Lisa smile was all the answer I needed.\n\nNow I probably should have known what kind of party this would be. After all, Nataliya, Danielle, and Cherys had all made their sexual preferences perfectly clear. It only made sense that this would be a Gay-Lesbian-Bisexual kind of crowd.\n\nStill, it was a minor system shock when I walked in to see two guys making out against the wall in the foyer. Both were in fantastic shape. I don't know how fit you need to be to have sex with a man, but their muscles were extremely well- defined. I had no problem with gay people. Clearly, having a lesbian sister opened up my mind a bit and I had several gay classmate acquaintances. But the sight didn't do much for my libido.\n\nThere was a lesbian couple to my right, which quickly reversed the blood flow to put it back into my cock. And what really started me going was the guy on the couch, sandwiched by two very hot women while they engaged in a three-way kiss.\n\nTo date, the closest I'd come to a multiple-person orgy was Nate and I double- teaming Ellie that one time. It appeared I was headed for a night I wasn't going to soon forget.\n\nWe all got drinks and there was an extra bounce in our steps as we moved to the music while going around meeting up with friends. I was quite familiar with most of Danielle and Cherys' friends, so I didn't feel totally out of place.\n\nMaria, on the other hand, was apparently only familiar with the people she'd arrived with, so she ended up clinging to my side for most of the night. The first time a half-drunk lesbian walked up and boisterously burped hello, she grabbed my hand and didn't let go. Maria especially stayed close to me when Nataliya darted away from us to greet another friend.\n\nStill, despite her nerves, Maria was clearly engrossed in what was going on around us. Her eyes would focus on one couple or group after another, rapturously observing tongues and hands as various people made out in assorted combinations around the living room. This wasn't a party about dancing and then disappearing to make out. All making out and groping was done out in the open.\n\nThe pretty blonde squeezed my hand tightly, her breathing shallow. Again, I thought she was a little overwhelmed by all that was going on around her. But when I turned and looked in her eyes, the hazel irises were a flashing golden and she panted in obvious arousal. And quite obviously, her gaze dropped down over my body as she was checking me out.\n\nBefore I could say anything, Nataliya returned and grabbed us both by our free hands. \"Come this way! I found them!\"\n\nBewildered, I let Nataliya drag us through the house, Leslie following close behind. We passed another gay couple on the stairs and as we passed one open bedroom, I clearly saw an orgy going on inside. For the very first time, I saw one man giving head to another. The guy on the receiving end, meanwhile, had his face buried in the pussy of a voluptuous co-ed lying on her back across the bed, with a second girl straddling her face.\n\nWhat kind of party was this?\n\nWe passed bedroom after bedroom, all with various sexual antics going on inside, and I started to wonder just how large this house really was. At the end of the hall, we came to a set of double-doors that I guessed was the Master Suite. We stepped through and the next sight took my breath away.\n\nI've commented before on how absolutely incredible Cherys' tits are. Those things were just huge, round, and impossibly firm. If I hadn't seen them develop myself since she was a young teenager, I may not have believed they were natural. And the rest of her body was still magnificent. At twenty-two, she still had all the firmness of a teenager with the curves of a full-fledged woman. And she was completely naked.\n\nCherys was sprawled against the headboard of an oversized California King bed, complete with four-posts and an elegant canopy. Between her spread legs was a petite, tanned hardbody with long, lustrous black hair. Now I've appreciated an ass from time to time. Perhaps with all the gay guys around I felt a twinge of discomfort at the idea, but I had to admit that the girl munching out Cherys had a niiice ass. It wasn't the smallest or the tightest. It was just perfectly shaped, with elegantly muscular lines. Her ass was the Jaguar of asses.\n\n\"David!\" came a familiar voice, shrieking in surprise. Danielle had just walked out of the en suite bathroom, completely in the nude and still dribbling fluids between her legs. Her pussy seemed freshly shaved and the baby-smooth skin glistened enticingly. Her rock hard abs and toned musculature were on full display, and of course my gaze was drawn to her perky breasts. I couldn't help but stare; I'd only seen this angel in all her naked glory once before, her beauty marred only by the shocked and fearful expression on her face while she tried to cover herself with her arms.\n\nCherys' eyes fluttered open at her girlfriend's squeal of surprise. She was panting heavily, which caused her chest to rise and fall dramatically. Her oral lover picked her head up to look around for what the commotion was, but Cherys insistently grabbed the raven-haired head and pushed it back down between her legs.\n\nThrough heavily-lidded eyes, Cherys watched me watching her as she felt orgasmic ecstasy shoot through her body.\n\n\"Helloooo, gorgeous...\" I muttered, obviously ogling Cherys' goddess-perfection of a body.\n\nNataliya, meanwhile, went straight to Danielle where she put her arms on my sister's shoulders and shushed soothingly. \"Wow, you got us invited to the Master bedroom? I wonder what kind of moves you had to pull that one off.\"\n\nStill looking at me, Danielle stuttered, \"I- I didn't have to do anything. Carmita's been lusting after Cherys for months.\"\n\nLeslie, meanwhile, pulled Maria over to an oversized, plushy couch to the side. It was as if there was another full living room inside the master bedroom. I watched as Maria willingly sagged into Leslie's strong embrace and they began kissing as Leslie sank backwards onto the couch. For all of her seeming innocence, this clearly wasn't Maria's first time with the butch lesbian and Maria was soon at work stripping the bigger woman while Leslie spread her legs in anticipation of some wonderful cunnilingus.\n\nI'd been anticipating getting laid with Nataliya tonight after her party invitation. Then when she showed up with Leslie and none-to-subtly thrust me towards Maria, I'd anticipated trying to work my charm on Nataliya's little sister. Now, I stood alone in the middle of an overwhelmingly large bedroom, all hardness gone out of my cock despite the naked female flesh around me.\n\nNataliya now leaned into Danielle's ear and began whispering something that caused my sister's eyes to bug out. At first, Danielle looked a little uncomfortable with the situation as kept her body covered with her arms. But after a moment, she sighed and nodded, and dropped her hands. I went back to the illicit activity of ogling my sister as Nataliya leaned up and pecked her on the lips, and then Danielle headed over to join her girlfriend on the bed.",
        "Cherys cried out as orgasm took her, a familiar sound that somehow felt new, since there wasn't a wall between us to muffle the noise. And then she was pulling both the tan woman and her girlfriend together to sloppily exchange wet kisses.\n\nAt last, our hostess turned to me and wiped Cherys' love nectar from her face. She was a strikingly beautiful Latina, with high cheekbones and sharp, dark eyes to highlight her beautiful face. While looking at me, she asked aloud, \"So he's the one?\"\n\nNataliya answered. \"Yes, he is Danielle's younger brother. I've had him myself.\"\n\n\"Well, as long as you have Nataliya's recommendation... That's the most important thing. I'm Carmita, pleased to meet you.\" She got off the bed and held out her hand, and I found myself automatically responding to her imperious tone.\n\nI half-bowed as I took her hand, not shaking it, but rather holding it up respectfully and bringing my lips within an inch of her knuckles. \"Pleased to meet you. You have a lovely house.\"\n\nCarmita smiled, \"Little charmer, isn't he?\"\n\nI pretended not to notice her calling me 'little', despite her being about a foot shorter than me. And she was oblivious to her nudity while I fought the urge to let my eyes rove over her perky breasts and dynamite ass. Without letting go of my hand, she pulled me to her, wrapped her left hand behind my head, and dragged me into a passionate kiss.\n\nShe tasted spicy and exotic, similar to Nataliya, just a different flavor. Instinctively I wrapped her up and actually lifted her into the air, holding her petite body in my arms while I swung her around and dipped her backwards, my lips never leaving hers.\n\nWhen we finally broke for air, she positively glowed at me. \"Wow. Tonight, you're here for someone else. But promise me you'll do that again sometime.\"\n\n\"Yes, ma'am.\" I gently set her down, and then looked around at the six beautiful women around me, five of whom were now naked while I remained fully clothed. \"Now, will someone tell me what the hell is going on?\"\n\nI first looked to my sister, who shrugged and had an expression on her face which clearly said, 'Don't look at me.'\n\nThen Nataliya got my attention, she was the only one still dressed. \"You're here because I have a favor to ask of you. And we're all here because I thought it would be best for making Maria comfortable. You see, I want you to take her virginity.\"\n\nImmediately I glanced over at Maria, who was cuddled up to Leslie and watching me with that nervous expression again. Nataliya continued her explanation. \"Our parents had us in Orthodox all-female schools growing up. She barely met any boys and had no idea how to interact with them. She'd experimented with her friends and was comfortable with girl-lovers, but never had a man. I was much the same way my first year.\"\n\nI kept my gaze on Maria, who was completely nude, and my eyes drank in her slender curves and model thin body. She looked so fragile and scared. Meanwhile, Nataliya stepped forward and now began pulling off my clothes. \"Now Carmita has been throwing these parties every month since last year. Maria has been coming with us since school started and she has explored so much more of her sexuality with us, becoming comfortable with her libido. But she wants a man and she asked me to help her. I immediately thought of you. That is why I came to you that one night and asked you to gently make love to me. It was a 'test run' of sorts.\"\n\nBy now, I was fully naked and my hard cock was pointing up almost vertically. Maria was quite beautiful and the prospect of being her first had my dick harder than it'd been in months. Nataliya finally finished up. \"When I told Carmita what was going on, she offered the master bedroom.\"\n\n\"A girl's first time should be in a proper bed and she wanted her friends around her, especially her sister,\" our hostess stated. \"Besides, it gave me a good excuse to bring Cherys in here.\"\n\nI looked back to my sister. \"Did you know any of this?\"\n\nDanielle shook her head, still bewildered herself.\n\nNataliya cut in. \"Uh, I didn't tell you because I didn't want to risk David finding out.\"\n\n\"What?\" I asked. \"Like I would have said 'no'?\"\n\n\"Well...\" Nataliya blushed and looked at the floor. \"You are a young man, and yet sometimes your big head gets in the way, makes you hesitate. But your little head has no conscience. And there is a willing, naked woman who wants you to make love to her.\"\n\nAt this point, Leslie led Maria over to the bed. I watched the beautiful young girl, every muscle toned, every erotic curve on display for me. Nataliya had a point. If I had a few nights to think about this, I might question the wisdom of having sex with someone I'd met only thirty minutes ago. My morals might wonder about sleeping with someone I barely knew and had no emotional attachment to.\n\nBut right now, my dick was making the decision for me. I was rock hard and the damn thing was actually twitching in anticipation. Perhaps something in my eyes changed or my muscles tensed, because Nataliya quickly put a hand to my chest and stopped me as I began moving towards the bed.\n\n\"Ooh, wait, wait. You are too... eager, right now. Let me take the edge off.\" And with that, Nataliya sank to her knees in front of me, fisted my cock, and sucked the mushroom head into her hot mouth.\n\nI groaned, my knees buckled, and had to remind myself to stay upright lest I fall flat on my ass. And as Nataliya's impish tongue danced around my crown, I was already imagining it was her little sister blowing me so wonderfully.\n\nMaria, virginal Maria, for her part was reclined against the headboard with Leslie molding their naked bodies together. Leslie was whispering something into Maria's ear, words that made Maria squeeze her eyes shut and moan while Leslie caressed the teenager's breasts and rubbed at her clit.\n\nI held Nataliya's head while she bobbed and weaved around my shaft. Her own hands went to the straps of her dress and disrobed herself until her naked tits were also bobbing and weaving. She assumed, correctly, that the sight of them bouncing around would bring me off that much faster. And I groaned as my hips began their telltale twitching as orgasm approached.\n\nCherys was still on the other side of the bed and reclining against the headboard, moaning in ecstasy while keeping her gaze on Leslie and Maria. Carmita had returned to her spot between Cherys' legs. And Danielle was still standing rigid, caught between arousal and panic as she intently watched her friend feasting on my cock.\n\nI felt my balls tensing as they prepared their load. Maria was now bucking her hips against Leslie's hand while she watched her elder sister fellate me, and I consciously tried to time my climax with hers. But another noise set me off early.\n\nDanielle moaned, \"Oh, fuck!\" and I turned my head just in time to see her head jerk as if someone had slapped her. Her eyes rolled back and her legs collapsed, sending her to the floor. Only now did I see that one hand was surreptitiously fingering her own pussy and my sister nearly blacked out in orgasm.\n\nHearing my sister's voice, layered with such raw, sexual tones pushed me to the edge. I grabbed Nataliya and clutched her head to my crotch while I blew. The first jet launched right at busty blonde's throat and she gagged. I instantly released her head and she withdrew from my hard pecker, her hand still jacking me automatically. The second jet splashed a line of cum across her face from the bridge of her nose across her right cheek. And then she craned her neck back to let each successive blast start circling around her collarbone. And from all the built-up tension, I had quite the load to give.\n\nA long time later, Nataliya was veritably covered in jism. Her fingers were scooping at the string of cum on her face and she proudly showed off the pearl necklace, which was slowly dribbling down her chest and into her cleavage.\n\nI would never have predicted what came next. Cherys was already off the bed, concerned about her girlfriend when Danielle sat up. I could see my sister's green eyes were a dazzling emerald as she looked at her lover, even from my vantage point ten feet away.\n\n\"Oh baby, FUCK ME,\" Danielle husked. And she literally launched herself at a standing Cherys, propelling the two of them back onto the oversized bed and they began making out with a passionate fury.\n\nStanding naked in this bedroom, with my cum dripping off Nataliya's pretty face and her large breasts, watching my hot naked sister madly frenching the goddess of my dreams, it's no wonder I started getting hard almost immediately.\n\nDanielle was crushing her tits into Cherys', their legs scissored amongst each other and grinding their crotches together in an erotic horizontal lambada. I could actually see their tongues from time to time as their head frequently changed positions, Danielle clearly on the offensive and constantly attempting to find a new position that provided greater stimulation.\n\nI was engrossed in seeing Danielle's athletically toned backside flexing and tensing as she ground her clit against her lover's. I couldn't believe I was actually watching my sister's hand clutching at Cherys' nipple and tweaking it harshly to Cherys' ecstatic cries. I tried to memorize everything Danielle was doing in the faint hope that I might someday have the opportunity to do the same to the beautiful brunette. Hey, a boy could dream.\n\nMeanwhile, Nataliya leaned forward and suckled me a few more times, ensuring my cock was brought back to diamond hardness. It didn't take long. And then she was standing beside me, holding my hand and leading me to the bed. I had a young, blonde angel to capture my attention now.\n\nMaria lay supine before me, her head comfortably nestled onto a pillow. Her perky tits, while not large, were still good-sized handfuls and their firmness stood them up almost vertically with zero sag to the sides. Her left hand shyly was over her crotch in subconscious embarrassment of her nudity, but as I approached she steeled her jaw and moved the hand away, so I could see the pretty pink lips and the soft tuft of blonde hair trimmed over her pussy and leading the way.\n\nLeslie moved off the bed to give me room, although she hovered nearby just in case the evil man tried to do something the little angel didn't want.\n\nMeanwhile, Nataliya produced a silver foil and unwrapped it. \"She's not protected yet,\" she explained before rolling the latex sheath onto my hard cock. I let her do her thing before I stepped to the bed.\n\nMaria was already panting before I got there, in part from her arousal and recent climax, in part from her nerves. I wanted to soothe her anxiety before we got any further.\n\n\"Hi,\" I said softly.\n\n\"Hello,\" she managed to squeak in response.\n\nI slid onto the bed beside her, our bodies parallel but not touching, not yet. It was a good thing Nataliya had gotten me off first. I don't think I would have had this patience otherwise.\n\n\"Do you find me sexy?\" she asked tentatively, in a quiet voice.\n\n\"Very sexy,\" I reassured her.\n\nI propped myself up on my left elbow and let my right hand move up to softly caress Maria's face. She trembled when my palm brushed her cheek, closing her eyes and breathing shallowly. I leaned down and touched my lips to her forehead, and Maria moaned. So far this was going well.\n\nI moved my lips down to the bridge of her nose, and Maria started quivering in anticipation. When my mouth made the final jump down to her lips, she actually reached up with her hands and pulled my head to hers, darting her tongue into my mouth as instincts took over and we began kissing with heated passion.\n\nThat first touch was electric. Lightning bolts came out of the heavens and shocked my spine. Somewhere along the way my body rolled forward and our legs scissored together. My arms wrapped around Maria's thin body and held her tightly while our faces mashed against one another.\n\nHer tongue was everywhere, scraping against the insides of my teeth and extending far into my mouth in an attempt to tickle my tonsils. Her torso was still flat on the bed while I loomed over her, but her legs were twisted at the waist to intertwine with mine and wrap me up like a sea monster sinking me to the depths of a deep ocean where she could devour me at her leisure.\n\nI'm not sure how we got into position, but the next thing I knew, I was braced on my elbows above her chest, with her legs wrapped around my hips and my long cock trapped lengthwise in the furrow of her pussy lips. Maria's hazel eyes flashed at me and her hips bucked, trying to capture me inside of her. Nataliya may have taken the edge off of me, but Maria's Leslie-induced orgasm apparently only made her even hotter.\n\n\"So sexy...\" I groaned.\n\nI retracted back, the underside of my shaft gliding on the edge of her pussy like a sword being drawn against its scabbard just before sheathing the blade. And when we both felt my mushroom head glide over her clit, I pivoted and Maria bucked and the tip was inside of her.\n\nMaria jerked and squealed, just for a moment. I belatedly realized that I'd just torn through her maidenhead, and yet she seemed to be in little pain. One of the lucky ones, I guess. Already the pain was gone, no tears in her eyes, and she was bucking her hips at me again to pull me all the way down.\n\nHoly shit this girl was tight. Narrow body, narrow hips, and a narrow pussy to match. As soon as I felt the first inches push through my hips automatically pounded down, without concern for her virginity. This blonde vixen had me so turned on I'd forgotten my patience. And yet I could only make it another inch down she was so tight.\n\nMy lips moved to the side, nipping at her ear and then along her neckline. Maria moaned and bucked, trying to get more of me inside of her. I held her hips in my hands and pressed down, as if I could stretch her pussy to the sides this way. And we both felt my cock burrowing its way forward.\n\nAfter several frantic thrusts, with her heels tugging at my naked ass, we finally had our pubic hairs entwined as I was buried to the hilt. Maria let her head sag back down against the pillow, exhaling mightily and gasping for air. Instinctively, I reached up and began massaging her neck, which had gotten quite tense from holding her head up for these few minutes.\n\nMaria was the epitome of sexual fantasy in that moment. Her head was thrown back, her mouth open in a silent gasp and her youthful face contorted in pleasurable ecstasy. I kissed at her exposed neck, sending shivers down her body and resulting in wonderful quivers inside her sopping wet pussy. Her hair was a golden mane, haloed on the pillow, and her body felt so small and light beneath me.\n\nI was overcome with the power trip at knowing I could physically dominate this girl however I wanted. Despite her height, she probably weighed even less than Monica.\n\nWhen Maria finally managed to gain control of her senses, she reached her hands to my face and grinned happily. I leaned in and pecked her on the lips, just barely restraining from laughing. She was literally a stranger to me, but I saw the same sexual playfulness of her sister in Maria's eyes and that crackle of electric energy was still passing between us, rooted in the wonderful feelings coming from our joined pelvises.\n\nShe kissed me again. \"Make love to me,\" her voice was low and exotic.\n\nI kissed her back and obeyed. My hips started off with a gentle pumping motion. Maria inhaled sharply and then hummed happily as she soaked in the sensations of her first man. I soon added a circular motion, moving counterclockwise as I sought to get just a little bit more room and stretch her out to ease my back and forth passage.\n\nMaria clutched my forearms while my hands were planted and locked onto the bed beside her, holding myself away from her body so I could look down on the slender, pretty girl and her naked torso. I deliberately angled my thrusting to rub at the underside of her clit, and it showed in her enthusiastic bucking. She was almost giggling happily as I drilled her out, and as I sped up a bit her breathing became shallow and she closed her eyes as her first coital orgasm built inside of her.\n\nI leaned back down and crushed my chest against her breasts, holding her tightly in my arms as I began pushing harder with my cock. She was getting wetter and wetter as we continued, and despite the constriction of her tunnel I was able to pump at a pretty good pace.\n\nMaria's breathing suddenly picked up an octave, and it accelerated rapidly. \"Oh god, oh god, oh god\" she chanted faster and faster until I finally brought her to her limit. \"Oh god, oh god! OHHHHHHH!!!!\" she wailed as she came, her inner muscles clamping down me so tightly it was almost painful, forcing me to stop moving.\n\nMaria didn't thrash about as she came. Instead, she quivered and clutched herself tighter into my embrace, cocooning her thinner body into my chest as if I could wrap around and completely surround her. Her legs were gripping my ass so tightly I thought she might break my hip.\n\nShe ran out of breath before her orgasm completed, and her mouth gaped openly like a fish out of water as her body twitched over and again spastically. And then she was done, going completely limp beneath me.\n\nI let her rest for a moment, just slowly rotating my prick inside of her. That climax had loosened her up a bit, and I no longer felt the painful constriction. All that was left was her wonderful, virginal tightness, just perfect.\n\nI caught movement in the corner of my eye. Nataliya and Carmita had been playing on the couch. I watched Nataliya's naked breasts swaying as she walked towards us, still coated in Carmita's saliva. Nataliya leaned in and kissed her little sister on the forehead. \"That was making love.\"\n\nNataliya then kissed me on the lips. \"Thank you.\"\n\nI looked straight at the angel below me. \"No, thank you.\"\n\nMaria gave me a weak smile, but already her energy was returning. Her hips began wiggling. \"You're still hard.\"\n\n\"I haven't cum yet.\"\n\n\"What's wrong? I thought you said I was sexy,\" she pouted with puffy lips.\n\n\"You are... I just want to enjoy this a little longer.\" I wriggled my cock for emphasis.\n\n\"Mmm... OK. But this time I want you to FUCK me.\" Her lips twisted into a wicked grin. \"Take me, use me, FUCK me. Do not worry about making me cum. Just FUCK me.\"\n\nHer words went straight to my cock. If it wasn't hard before, it was rock hard now. Not even the condom could temper my arousal.\n\nI gathered Maria into my arms again, hooking my hands behind her shoulders. I pulled almost all the way out, until just the bulging helmet was still inside her, and then before she could react, I slammed forward, driving myself all the way in on one thrust and yanking back on her shoulders to pull her body towards me.\n\nShe was still so tight I almost didn't make it. Maria just howled and then started laughing. I did it again, and again. And while Maria was giggling and moaning, I reached down and pulled her thin legs up and over my shoulders. I moved my hands to her thighs and then pressed down, pushing her knees back against her own chest and literally bent the slender girl in half.\n\n\"Tell me again,\" she husked.\n\n\"So sexy...\"\n\n\"Mmm... again!\"\n\n\"Fucking sexy... you make me want to cum in you...\"\n\n\"Yes!\" Her crotch was now elevated and fully exposed to me, and I took full advantage. Maria squealed in delight as I began pounding away, the new angle letting me get even deeper into her. I must have been doing something right, or I accidentally found her g-spot, because Maria was thrashing her head left and right and howling louder than anything.\n\nShe actually reached up and held her own legs back for me, letting me shift my grip to her hips where I began thrusting away and using her folded over body as a masturbatory tool. And yet, she seemed to derive even more pleasure this way than when I was focused on stimulating her clit.",
        "I was racing myself to orgasm, but Maria beat me to it. She split her legs to the side and shrieked loudly, the sound not unlike Nataliya's in the throes of a powerful climax, and she bucked so hard she almost dislodged me from her pussy.\n\nI managed to ride her out and as Maria started to come down from her climax, her body sagged down into the bed while her inner muscles continued their aftershock spasms. All the internal twitching was too much for me, and I cut loose, spewing my jism and filling the condom with my release.\n\nMaria wouldn't let go of me for several minutes, clutching my body to her and pinning my heavy weight on top of her. \"It feels good to have you crushing me down...\" she whispered. I couldn't complain. I rather liked cuddling and Maria really wanted to feel my weight.\n\nI looked to my right. Cherys was just a couple feet away from me, also on the mattress. She had Danielle pinned beneath her, but her intense gaze was right on me. I had no doubt she had been watching, perhaps for the entire fuck. I glanced down at her pendulous breasts and back up into her eyes, glinting what seemed to be a bright violet.\n\nMaria kissed my nose. \"You're pretty sexy, too.\"\n\nI smiled. And then Nataliya was back, this time with her lower face glistening with feminine nectar, probably Carmita's. \"You should pull him out before he gets soft, for the condom.\"\n\n\"Oh, right,\" Maria said and let me go enough to let me pull out before I went completely limp. Maria actually leaned down and pulled the rubber off me, looking at it in wonder before getting off the bed to toss it in the trash.\n\nShe turned to her sister. \"We are getting me on the pill. Tomorrow.\"\n\nNataliya smiled. \"Does that mean you'll want to do it again?\"\n\n\"Again and again! I'm sorry Nataliya. I know you have been encouraging me to have sex with your girlfriends. But I think I like men better. It just feels so good to have a warm cock inside me, to feel David's strong body holding me.\" The pretty blonde turned back to me. \"Please, can we do it again?\"\n\nI chuckled. \"As often as you want. Until you get tired of me.\"\n\n\"How about now?\" Maria asked excitedly. There's nothing like a bubbly teenager and the fresh wonder of sex.\n\nNataliya slid over and hugged her sister. \"You have to get him hard again first. Let's get him cleaned up and then I'll teach you about blowjobs.\"\n\n***\n\nBy the end of the evening, everyone was pleasantly worn out. I'd filled one more condom inside of Maria's snatch, but hers was the only one I had that night.\n\nDespite the abundance of gorgeous pussy in the room around me, and despite my libido's hopes to the contrary, this wasn't an all-out swinging orgy. It was more of an exhibitionist and voyeur party, one specifically arranged for the gays and lesbians who wouldn't feel comfortable at a traditional college orgy. As Carmita explained, people mostly had sex with the ones they arrived with. And although guests got to watch and be watched by the others, there was almost zero sex between strangers, Maria and I not withstanding.\n\n\"But now we are not strangers,\" Carmita told me. \"So next month, we'll see...\" She gave a delightful jiggle of her full breasts before closing her robe around her naked body. Even when she was covered, I had to watch as she shook her Jaguar of an ass in my direction and went into her own bathroom to clean up.\n\nThe rest of us were dressed and heading out. Maria held my hand possessively.\n\nOutside, more than half the people had already gone home. Two of the bedrooms were already emptied out and the all-male crowd in the third was just getting dressed. We started down the stairs and I saw that the living room was pretty much empty.\n\nBut just was we were crossing the living room, the door to the office/library opened up and a familiar face came out. Crystal blue eyes, blonde hair rather mussed up, and large, firm tits pushing out at a baby-T with hard nipples to prove she wasn't wearing a bra. \"Amber?\" I queried.\n\n\"David!\" she exclaimed in surprise and a wide-smile immediately crossed her face. \"Hi!\" She stepped forward to embrace me, and then came up short when she realized who else was with me.\n\nAmber saw my hand in Maria's and my sister standing nearby. \"What are you doing here?\" she asked me.\n\nI replied calmly, \"Same as you, I guess.\" It's easy to be calm when you've just shot off four times, despite the surprise at running into someone familiar at a sex party.\n\nAmber was blushing for some reason, like a kid caught with their hand in the cookie jar. She only got even more embarrassed when a pretty redhead came out and laid her hand possessively on Amber's shoulder. The redhead leaned in and kissed Amber firmly on the lips. To my surprise, a familiar-looking hunk came out next.\n\n\"See you next time, babe,\" he said.\n\nAmber didn't respond. The redhead just tugged on the guy's hand. \"Come on, Randall, sweetie.\"\n\nIt clicked in my head. Randall was the guy who had asked Amber to join his girlfriend for a threesome last year. It appeared he had finally succeeded. A second guy quickly followed and pecked Amber on the cheek before departing as well.\n\nThen came the next surprise. The door swung further open, and I briefly saw a very large and very familiar pair of tits. E-Beth managed to close her heavy-duty bra and she tossed her head to get her hair out of her face.\n\nE-Beth briefly touched lips with the pretty brunette girl in front of her, and then she looked over towards the open door. At first she saw us and said a cheery, \"Hi Dani. Hi Cherys. Haven't seen you since last month. And...\" She trailed off as her face dropped in utter shock. \"DAVID?\"\n\nMy throat went dry and all I could think to say was, \"I guess E-Beth talked you into coming with her.\"\n\nAmber nodded listlessly and glanced again at the pretty blonde holding my hand. Her expression was stone cold and completely unreadable.\n\nNataliya took charge at that point. \"Maybe you should all talk tomorrow. In the meantime, let me get the cute kids home.\" And with that, she pulled Maria and me away and out the door.\n\n***\n\nThe next morning, I woke up and went into a mild panic over everything that had occurred last night. It was my first time actually watching Cherys and my sister making love. How would they react around me today? I'd had sex with Nataliya's little sister Maria and I had to admit, every hormone in my body was ordering me to have sex with her again. And I'd run into E-Beth and Amber jut after their own bisexual orgy. How would our new knowledge change those friendships?\n\nI quickly got the answers to at least one of those three issues. I'd heard the shower shut off a good ten minutes ago while I lay in bed staring at the ceiling. Figuring the bathroom would be clear by now I got up and headed for my own shower.\n\nThe door was propped open and the steam had almost completely cleared out. But the bathroom itself wasn't cleared out at all.\n\nCherys was standing in front of the mirror, fully naked with her back to me, save for her hair wrapped up in a towel piled atop her head. And she had an equally naked Danielle trapped between herself and the vanity. Their chests were pressed together almost as tightly as their mouths, and reflected in the mirror I could clearly see Cherys' hands roaming along Danielle's spine and down to the perky globes of Danielle's tight ass.\n\nTheir eyes opened on occasion and almost simultaneously, both girls saw me, Danielle on a direct line and Cherys in the mirrored reflection. I saw Cherys smile, and then the pair completely ignored me and went right back to their making out session.\n\nI don't know how long I stood there watching them. But eventually, they took a break and turned about to exit the room. Without any modesty, both girls thrust out their naked bosoms and proudly strutted past me and into their room. My eyes were yo-yoing up and down between erect nipples and smirking faces.\n\nWhen they were gone and the door to their bedroom closed shut, I looked down at the tent in my boxers and grumbled, 'Fucking tease...\"\n\nNow how was I supposed to pee?\n\n***\n\nJust after breakfast, I sat on my bed and pondered my next move. I could do my usual and hang out with Kevin and Jen. A pleasant way to kill time for sure, but not overly exciting. Besides, I had two more lingering issues in my head: Maria and Amber/E-Beth.\n\nWith phone in hand, I toyed with the idea of calling Amber. I didn't want any awkwardness between us over last night's party. Or maybe I should call E-Beth. That thought process confused me for a good hour. When did I start thinking of Amber before E-Beth?\n\nWhen the hell did I start falling for Amber? After all, she was just my ex- girlfriend's roommate and casual classmate. We were friends. We had some fun conversations and I really enjoyed spending time with her. But we weren't romantic or anything. Flirting was fun. Dating couldn't be possible. She was out of my league. She had rich, handsome men like Randall to play with. Besides, she was from \"The Heights\" and a prejudiced snob, not exactly my ideal personality.\n\nBut just when I started questioning the oxymoron of my emotional rationality, the doorbell rang. Cherys was quickly off the couch and went to answer it. \"Hello, ladies,\" she said dramatically as she ushered in Nataliya and Maria.\n\n\"Hello!\" the sisters both answered and exchanged hugs with Cherys.\n\nThen Nataliya came right over to me. \"Hellooo,\" she cooed before holding my head and planting a wet kiss on my lips. \"Mmm, you taste good,\" she said.\n\nI smiled but didn't have time for a response before Maria stepped in and similarly grabbed my head to stick her tongue into my mouth. \"You're right. He does. Hi sexy,\" she cooed. And then Maria literally slid into my lap, wrapped her arms around me, and attacked me with her lips. The cloud in my head concerning Amber evaporated rather quickly.\n\nI can't adequately describe the feelings shooting through me. I didn't feel the pleasant, warm fuzziness of being in love. There was no emotional relief at being intimately connected to another part of my soul. But there was a thrilling excitement, a lightning bolt of delight that electrified every nerve in my body. There was something about Maria that set my loins on fire.\n\nSo despite being surrounded by three other beautiful women, all I wanted in this moment was to scoop her light body up in my arms, bend her in half over the couch, and shove my baseball bat of a cock up her ass.\n\nFrom the way Maria was kissing me, I don't think she'd mind.\n\nCherys deadpanned, \"Get a room.\"\n\nIt sounded like a great idea to me. Maria was of like mind as she pivoted to straddle me. And grabbing a tight asscheek in each hand, I simply stood up while Maria wrapped her legs behind my hips and with her lips still plastered to mine, I started making my way to my bedroom. She'd gone from shy virgin to unabashed nympho in just a day.\n\nHaving a nubile teenager sucking your face while you're trying to carry her is not the safest way of transportation. I bumped my knee into the coffee table once before I forced myself to pull away, catch my breath, and aim my eyes where we were going.\n\nAt first, Nataliya made as if to follow us. But Maria fixed her big sister with a look and shook her head, stopping Nataliya in her tracks.\n\n\"Don't forget the condom!\" Nataliya warned and then sighed. \"They grow up so fast.\"\n\nDanielle replied with a wistful, \"Yeah... Dumb squirt went out and became a hunk.\"\n\nI didn't hear any more as I staggered into my bedroom and kicked the door shut behind me.\n\nA moment later, I piledrived a laughing Maria onto the bed, her hazel eyes glowing amber in the morning sunshine. When I first moved to get off of her, she clutched me down and held my weight, pinning her to the bed.\n\nMy mouth found hers and then once again we were making out like nothing else. Her hands were clawing at my back until my T-shirt came off and then I tugged hers away as well. I also slipped the catch to her bra and she flung it away just in time for me to bear down and slurp a perky nipple into my mouth.\n\nMaria giggled and rolled us over until she was on top of me, unbuttoning my shorts and then sliding off the bed to tug them off of me. Soon I was naked and then she stripped herself as well. I was taken aback at how lovely she was, with her model-thin body, cute face, and her blonde hair in a single braid. I also noticed that she didn't remove her white sneakers or socks, bringing back memories of my high school days with the cheerleaders. And then, with girlish glee, Maria jumped up and straddled me once again.\n\n\"Teach me, David. Teach me everything. I want to know everything. I want to feel everything. You can do anything to me. ANYTHING.\"\n\nHer words had my cock as hard as an iron bar. Maria easily had that effect on me. But my conscience was still hanging around. \"Why me?\" I asked her.\n\n\"Because I trust Nataliya. She told me you would be a perfect first lover.\"\n\nHer words simultaneously spurred two emotions in me. Excitement at remembering I was her first. And a mild emotional letdown at knowing I was only her first, but almost definitely not the last. Those were the ground rules for our relationship.\n\nI barely knew this girl. Aside from the general facts, I had almost no understanding of her personality. But we had an undeniable physical chemistry. And if this recently-virginal nympho wanted to explore all the concepts of physical pleasure with me, who was I to say no?\n\n\"I understand. But before I can teach you. I have to learn about your body. Roll over.\"\n\nMaria instantly obeyed, flopping onto her back and going spread-eagle in anticipation of whatever I wanted to do to her. She had such a youthful face and her body was so thin and firm that I could almost believe she wasn't of legal age yet. But there was no denying the curvature of her breasts or the trimmed peach fuzz above her clit. This pretty freshman was at that perfect cusp between young innocent and sexual maturity.\n\nI got to my knees at the foot of the bed and tugged her crotch to within reach. \n\n\"Aww, I already know this part. Even your sister has already licked my pussy. Can't we get to the sex?\" she whined.\n\nI let the image of Danielle eating out the teen nymph bounce around my head for a moment. But then I cleared my mind and stated, \"Patience, Maria. That's your first lesson.\"\n\nI then proceeded to fully test the boundaries of Maria's patience. She was already soaking wet, and I probably could have entered her without any foreplay. Instead, she had to scream her way through three orgasms first and constantly beg for me to fuck her.\n\nSo with a thick coat of Maria-cream on my lower jaw I finally had enough of her alternating whining and moaning. I stood up and roughly flipped her over until she was face down and panting from her latest climax.\n\nShe hadn't even gotten settled yet when I lashed out with my open palm and spanked her right asscheek... HARD.\n\n\"Oww!!!\" Maria shrieked.\n\n\"What did I say?\" I interrogated harshly.\n\n\"Patience...\" came the meek reply.\n\nI spanked her left asscheek. \"Are you willing to be patient?\"\n\n\"Y-yes...\"\n\nIt was good enough for me. I didn't need the whole master/slave thing.\n\nI pulled her hips up until she was balanced on her knees, her face and chest still pressed to my mattress. Her butt was so perky the two globes didn't even quite touch in the middle, and it took little effort to part them to the sides just enough to shove my tongue against her anus.\n\nMaria went absolutely wild while I rimmed her out, and her hips started twitching when I brought one hand up, shoving my thumb into her pussy while my index and middle fingers curled over to rub at her clit.\n\n\"Oh, FUCK! Fuck, fuck, fuck!\" Maria chanted like a little child who'd just discovered a wonderful new word. And in record time she gushed to a fourth climax.\n\nAnd by now, *I'd* run out of patience. I found a condom in my dresser drawer, best to always be prepared. Quickly, I tore it open and sheathed my cocksword. Maria was still panting in her aftershocks as I knelt on the bed behind her swaying ass, aimed, and plunged into her tight pussy.\n\nLike last night, it took several tries to get inside. But as opposed to some previous girlfriends, Maria didn't want me to slowly inch my way in. She thrust her hips back while I slammed forward, and after three mutual lunges together, we got my cock seated inside of her.\n\n\"That's it! Fuck my sexy pussy. Ohhh! I can't believe I waited this long,\" she gushed. \"All those wasted years playing around with other girls. Sex with a cock is just so much more fun!\"\n\nAnd so I taught Maria doggy-style. Halfway-through, we switched to wheelbarrow. When my arms got tired, we spooned sideways on the bed while I plugged her from behind and squeezed a boob in my palm. And when I was pushing for my own climax, I left her on her side, straddled her lower leg, and lifted her upper leg high enough to wrap over my shoulder while I drilled her as deeply as I'd ever been.\n\n\"FUUUUUUUUCK!\" Maria howled loud enough to alert the entire apartment complex, and I groaned while filling the condom until it risked overflowing.\n\nImmediately afterwards, I reclined against the bed while Maria practiced the blowjob techniques her sister had taught her, techniques which I refined to better suit my personal preferences.\n\nMaria tried swallowing my cum for the first time, only partially successful. After gagging on the second shot, the rest flowed over her chin like so much spilled milk and as she bent down and coughed, the rest of my load splattered over her forehead and dripped into her eyes.\n\nI'll never forget her cum-covered face as she blinked and looked at me, grinning like she couldn't be happier in the world.\n\nAfter she got cleaned up, we cuddled on the bed, FINALLY talking to each other and finding out more about each other's lives, hopes, and dreams. Progress was a little slow because I was fingering her wet pussy and she was slowly jacking my cock.\n\nAt last, I kissed her and informed her that she was required to try everything at least once. I'd already fucked her pussy and her mouth. \"You know what comes next?\"\n\nShe quivered in a mini-orgasm just like that, and with gasping breath she whispered, \"You're going to fuck my ass?\"\n\nI grinned. \"Your ass is just so sexy...\" It was the perfect thing to say to her. \"So sexy... Now roll over.\"\n\nI had a bottle of Astroglide in the drawer as well. Old habit from my time in high school. I took my time, massaging Maria's neck and back first to relax her. Maria was clearly excited and eager, but she needed to calm down. \"Patience...\" I husked softly.\n\nI kept massaging her with one hand while put first one and then two lubed fingers inside of her anus. If I thought her pussy was tight, I could scarcely imagine how I would get my cock inside her ass.\n\nI stretched her out as best I could while making sure she was fully lubed up, and then it was time. I put Maria on all fours and lovingly traced my hands along the curvature of her back, like a starry-eyed kid caressing the lines of a gleaming racecar. After I lubed up my weapon, no condom this time, I stepped into position and placed the head against her pinched rosebud.\n\n\"Shhh...\" I soothed, and instantly I saw some of the tension drain from her backside. \"Breathe out...\"\n\nJust as Maria was exhaling I pushed forward, and with surprising ease, I managed to pop the mushroom in.\n\n\"Fuuuuuuck...\" Maria groaned, tightening up so hard I briefly worried if it were physically possible for her to snap off the end of my cock inside of her. But with me gently whispering a low \"shhhh\" and her conscious relaxation, I began to glide forward.\n\nIt felt like it took five minutes, but at last my crotch was pressed tightly to her asscheeks, and Maria had already cum once without me even thrusting. \"Fuck! Fuck my sexy ass. So full,\" she gasped. \"So fucking full...\"",
        "I let her take in the sensations for a moment, and then with my hands on her hips, I pulled back until just the anchored crown was still inside. And then I pushed in again.\n\nWith every cycle, it got a little easier. I was rubbing her back muscles, teasing her breasts, and occasionally brushing my fingers against her pussy. Maria eventually ran out of patience, planted her shoulders into the bed, and reached back with one hand to rub her clit with a little more constant pressure.\n\nTears were streaming down her face, the sensations just completely overwhelming her as I pushed in and out with steady rhythm. She wasn't even saying anything, all her focus turned inwards on the cock in her poop chute.\n\nMid-stroke, she inhaled sharply and I felt the earthquake inside of her as she came again, and then she gasped in relief and started panting to catch her breath. Eventually, she was able to breathe normally while I continued sawing in and out, but then another orgasm overtook her, and once again she was quivering beneath me.\n\nAfter the third climax, her legs gave out and she fell to the bed, her legs split out to the sides. \"Fuck me...\" she managed to groan, and despite my concern I kept up my pumping, this time with more of an up and down motion into her prone body.\n\nI couldn't last forever, and Maria started whimpering beneath me when my body's instincts took over and accelerated my pace. \"Fuck, fuck, fuck,\" she chanted quietly, over and over and over again. And by the time I got up to ramming speed, fully reaming out her tender rosebud, Maria tensed up and whimpered pitifully as a fourth orgasm washed over her.\n\nI followed right with her and grunted as I spunked deep into her bowels, plugging her chute with every drop of sperm I had left in my body.\n\nMaria gasped, and then her eyes rolled up into her head as she passed out, drooling on the sheets.\n\nWe were both covered in sweat. My legs felt like jello and I had barely enough strength to extract my dick from the tight vise of her anal tunnel, and then I flopped over onto my back. First I closed my eyes and panted to the ceiling, and then I looked over at Maria's poor, abused body, so beautiful in her completely ravaged state.\n\nI closed my eyes again and lay there for a minute to catch my breath. But after getting my breathing to normal, I moved into action. Tired, drained, but still conscious, I got up to head to the bathroom and get myself cleaned up. I would also have to bring back a wet towel to clean up Maria as well.\n\nThat's when I noticed the door was cracked open. A door I was absolutely certain I had shut closed when we came inside.\n\nCurious, I put my head to the door and listened intently. The voices from the living room came clearly.\n\n\"Holy shit, can you believe she passed out?\" Cherys wondered aloud. \"It looked so violent, but she seemed to really be enjoying it. Is he always that good?\"\n\nNataliya answered, \"Not always. But yeah, sometimes it feels that good, when you are in the right mood. And Maria was certainly in the right mood.\"\n\nDanielle moaned, \"I can't believe I'm saying this, but I wish he could do that to me.\"\n\nI was so surprised that I jerked up and my shoulder hit the door, causing a loud thumping noise.\n\n\"Shit! I thought they went to sleep!\" Cherys hissed. There was some hurried fumbling outside, and meanwhile I managed to pull my shorts on.\n\nWithout even looking at the girls in the living room, I passed quickly right into the bathroom and turned on the shower. Only once I stood in the wonderful, warm spray did I allow myself a smug grin of pride.\n\n***\n\nNEXT: CHAPTER 6 "
    ],
    "authorname": "bluedragonauthor",
    "tags": [
        "sisters",
        "bisexual female",
        "threesome",
        "orgy",
        "russian",
        "blonde",
        "stripper",
        "ffm",
        "two women one man"
    ],
    "category": "Group Sex",
    "url": "https://www.literotica.com/s/the-book-of-david-ch-05"
}
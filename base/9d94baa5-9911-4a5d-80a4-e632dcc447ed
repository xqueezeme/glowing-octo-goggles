{
    "title": "Hardcore Headquarters",
    "pages": [
        "The following story was written for the 2017 Literotica Annual Nude Day Contest. In honor of the nude day theme, this is about a group of coworkers challenged to a week of clothing optional office hours. Not surprisingly, unspoken attractions come to light, and culminate in an unexpected group sex spectacle. Please enjoy, and don't forget to vote if you appreciated the ride!\n\n***\n\nI ducked into the foyer cradling my morning coffee in one hand and trying to manage my dripping umbrella with the other. I hated Monday mornings, especially rainy ones. Not that I had a bad job, Monday morning was just Monday morning.\n\nI nodded to the guy at the desk, who's name I still didn't know, and scrambled to reach the elevator as it closed. My job is on the nineteenth floor, high atop a midtown office building, at the headquarters of AppLab. We're a small company, specializing in mobile app development. A few of our products had recently become very popular. After a lot of hard work, we were all finally enjoying ourselves and receiving some proper job security.\n\nCreative companies like ours are always interesting to work for. My boss, an ambitious, outspoken middle-aged woman named Karen, is not afraid to disrupt the industry, or our work environment, with a unique perspective and forward-thinking ideas. I knew she was growing restless for our next big idea, but I never could have predicted the experiment that would soon come about, intended to coax us there.\n\nThe elevator slid open and I strolled out, then headed for the big glass doors to our office. \"Morning, Rachel!\" I said, passing the receptionist.\n\n\"Hey, good morning Taylor,\" she replied. \"Don't forget the meeting at ten this morning!\" She smirked.\n\nI groaned. \"Right, thanks.\"\n\nRachel never missed an opportunity to tease me about a meeting I had once forgotten about that was my duty to lead. As embarrassing a memory as it was, I didn't mind her teasing. Rachel was a few years younger than me, incredibly cute and flirty, with long, curly hair, sexy glasses, and a dimpled smile.\n\nI continued into the office space and ran into Isabel returning to her seat. She and Alyshah did the marketing for all our apps. Isabel was the most beautiful woman in the office; tall and fit, with a killer smile, long dark hair, and a perfectly sized chest. I spent all day watching her come and go, mesmerized by her tight ass in a pair of dark jeans. She was shy, but there was undoubtedly some latent sexual tension between us.\n\nAs I approached my workstation, I glanced over at Isabel's, like I did every day. She was looking up at me with a great big smile. She waved excitedly. I waved back. Alyshah smirked at us. I sat down and took another gulp of coffee.\n\nMore of my coworkers rolled in. Ariel, the office assistant. Andrew, who worked closely with my boss. And of course, the coding team, which was always last to file in: Alexis, Tim, Ryan, Darrell, and Yuke.\n\nTen o'clock rolled around and we all crowded into the conference room. Everyone pulled up a seat around the long conference table, except for a few of the coders who hid in the back with their laptops. Karen strolled into the room with a commanding presence, which hushed our idle chatter.\n\n\"Hello everyone!\" she exclaimed.\n\n\"Hi Karen!\" we all answered.\n\n\"So-- we're at that point now where we need some new ideas. I think it's time to start thinking about how we debut 'the next big thing.' Let's discuss. Who brought me some ideas?\"\n\nKaren went around the room, calling on people who had ideas to throw out. Unfortunately none of them were deemed special enough. Most were derivatives of other successful products. Karen was looking for something really new and cool, but nothing seemed to be inspired enough for incubation.\n\nI watched our boss finally take a seat. She let out a long sigh. I glanced at Isabella, who gritted her teeth at me, suggesting that she was thinking what I was thinking. We knew what happened with Karen felt our team had hit a wall. The last time this happened, she implemented a system where for one whole week, office communication between employees could only be done in rhyme. As kooky as our boss was, it worked. It got everyone thinking on their feet, and soon enough we had our next app fully whiteboarded. Still, no one was looking forward to another one of her creative office experiments.\n\n\"Oh, I have an idea!\" Karen said, suddenly becoming alert. \"Something I saw on YouTube. Andrew-- get me set up for projection.\" Within a few minutes, the curtains were drawn and the projector had come down. Karen's laptop soon had something queued up and ready to go. \"I saw this video about an office in Europe somewhere. They did something that put everyone on their toes, to say the least. It might be just the thing we need!\" she said, as she hit play.\n\nA mere five seconds into the video, I felt the butterflies forming in my stomach. Jaws had dropped around the room. We sat there stunned, as a five-minute documentary introduced a German company that caused a sensation when they implemented a no-clothing policy for a week at their company offices. The video featured a lot of talking heads, as both male and female employees talked about their experiences, intercut with shots of them sitting around conference tables like ours; the women with their bulging chests blurred out.\n\nThere was a naked man with his crotch blurred approaching a naked girl at her desk. They discussed something mundane. I was too distracted by the fuzzy outline of her boobs to follow. A wide shot of the office depicted at least thirty people, coming and going in their birthday suits as if it was no big deal, each one with their genitals blurred out. They were handing each other papers, having conversations, looking like they were completely unaware that the person in front of them had everything hanging out.\n\nWhen the video ended, there was dead silence. The lights came up, and I saw wide eyes and disbelief on everyone's faces. Even Darrell and Yuke, who were always tapping away at their computers, were frozen with astonishment.\n\nKaren laughed. \"This is the most attentive I've ever seen all of you! I guess I might be on to something.\"\n\n\"Wait, wait, wait,\" said Alyshah, \"You're suggesting we work together, naked?\"\n\n\"Why not?\" said Karen. Alyshah tried to speak but couldn't find the words.\n\nRachel chimed in. \"How would that...? I don't-- I can't even...\" she stammered, putting her hand to her head.\n\nKaren interrupted before things got out of control. \"Obviously I can't force anyone to do this, so it's not mandatory, but let's say that starting tomorrow office hours are clothing optional,\" Karen explained. \"Those of you who want to give it a try can take your clothes off. The rest of you... well hopefully you'll decide later to join in.\"\n\n\"But like... logistically, how does that even work?\" asked Ryan. \"We just show up like that? What about the guys? Um... stuff happens to us.\" There was nervous laughter around the room.\n\nKaren chuckled. \"Well obviously you're not going to show up to the building naked-- you can change out of your clothes in the hallway bathroom before coming into the office,\" she explained. \"As as far as being a man goes... I assume you're talking about erections. But we're all adults here, right? Everyone knows men get erections. So if it happens, it happens. Just go sit at your desk until it goes away. I'm sure no one will be offended, but if anyone is, just come see me about it.\"\n\nI was trying to get my head straight, hearing all this. Was I really listening to my boss talking about erections? I glanced at Isabel. I could tell she almost didn't want to look at me. Finally I caught a brief glance from her. Her eyes were like saucers.\n\n\"Anyway, that's the deal. We need a brave, bold new idea. And you get brave ideas by doing something brave. Consider it a challenge. Let's see who's up to it!\" Karen concluded.\n\nWith that final command, Karen declared the meeting over, and sent us back to our workstations. All at once the chatter started. I saw all the girls whispering with one another. If they saw me watching, they'd quiet down, and then smirk nervously at each other. The guys took every opportunity to excitedly discuss who might get naked, or more accurately, since skepticism ran rampant, who they most wanted to see naked. I tried to avoid getting swept up in the gossip, but it couldn't be entirely avoided.\n\n\"Dude, are you doing this?\" Darrell had asked me.\n\n\"I dunno man...\"\n\n\"Do you think anyone will?\"\n\n\"Who knows. I have to imagine Karen will, at least, since she's the one that came up with the idea.\"\n\n\"Oh wow, yeah. I didn't think about that. How crazy will that be?\"\n\n\"Seriously.\"\n\n\"Who else?\"\n\n\"Hmm...\" I said.\n\nDarrell and I suddenly looked at each other. \"Alexis,\" we said in unison. We both laughed. She seemed the obvious choice, since she already had the reputation of being a little wild.\n\n\"Geez, I don't know who else. I think everyone will get cold feet,\" I concluded.\n\n\"Yeah,\" he replied. I sensed his disappointment.\n\nDespite the fact that I was incredibly skeptical, I spent that evening nevertheless absorbed in fantasies about what it would be like if we all participated. I pretended that I would actually be able to stroll into the office confidently, with my balls hanging out. Isabel would be standing there, completely nude. We'd get over the initial shock of seeing each other naked, and then start the work day. In my fantasy, Isabel would come to my desk, ask me to help her with something, and then she'd lead me into the storage closet where I'd give her a passionate fuck against the wall. I had every unrealistic detail worked out.\n\nI went to bed that night full of sexual excitement, toying with the idea of participating. One minute I decided for sure that I was going to do it; that I'd waltz into the office and see Rachel do a double-take. Then I'd head over to my desk, put my hands on my hips, and let Isabel gawk at my penis. The next minute, I laid there terrified, reminding myself that there's no way I could actually do it.\n\nIt wasn't until I forcibly made myself agree to do it, no matter what, so long as someone else did it first, that I finally fell asleep.\n\n***\n\nDAY 1\n\nI woke up with a start. A haze of vaguely sexual dreams began to drift away as I snapped into reality. Then the terror struck. All the work I'd done the night before went out the window, and I felt myself chickening out.\n\n\"Just go to work like normal,\" I thought, \"You can make a final decision at the last minute.\"\n\nI took a shower, brushed my teeth, got dressed, and hurried out the door like I usually do. My mind was spinning. I even forgot to pick up my coffee and had to turn back toward the cafe upon reaching my office building.\n\n\"There's no way,\" I concluded. Indeed, I'd chickened out. All that there was left to do was wait and see which of my coworkers would do it. It was a weight off my shoulders, having decided to stay clothed. Now I could focus on my excitement at seeing other people naked.\n\nI walked into the office. Rachel was there, fully clothed. \"Hey there,\" she said, smirking.\n\n\"Hey,\" I replied, smiling back at her.\n\nShe wheeled her chair around and gave me a look up and down. \"Wow, check out that amazing, naked bod,\" she said sarcastically.\n\nI laughed. \"Has anyone come in naked yet?\"\n\n\"What do you think?\" she said, chuckling.\n\n\"I didn't think so.\"\n\nAs I headed back into the room, Alyshah and Isabel looked up at me and laughed. Then turned toward each other and nodded their heads knowingly, as if to say \"We were right, he's not doing it either.\" I sighed to myself, knowing that it was inevitable that I'd be this close to seeing Isabel naked, but never be that lucky. By the time Alexis shuffled in, fully clothed, I knew it was a bust. Not one single employee showed up naked. We all laughed with each other, acknowledging our embarrassment and utter lack of bravery. But we had completely forgotten about Karen -- our boss, the one who had proposed the idea in the first place.\n\nThe office doors swung open. I heard Rachel saying, \"Hey Ka--\" and stop in mid-sentence. I looked up, as the room went silent.\n\n\"Good morning Rachel!\" Karen replied, as she walked into the room.\n\nThere was our boss, without a stitch of clothing on. She had a slender, well-tanned body. Her breasts were full and large, sagging slightly, with distinct, reddish nipples that pointed straight out. She had a powerful walk, which made them bounce with attitude after each step she took. Karen had a dark, mature bush between her legs which suggested that she did not trim it often. All eyes were on her body, and its jarring nakedness.\n\nKaren stopped in the middle of the room, surveying her employees, all of whom gawked at her. \"Well. Am I really the only one here with the nerve to do this?\" she asked. There were nervous giggles. \"We'll have to do something about that!\" she said. \"I really want to see some naked bodies, people!\" She clapped her hands authoritatively, then headed into her office.\n\nNeedless to say, no one was in any mood to work. The only thing we could do was talk to the person next to us about what just happened. I ran into Isabel and Ryan on my way to the bathroom.\n\n\"Guys, can you believe what's happening?\" Isabel asked.\n\n\"I can't believe I saw my own boss, naked!\" Ryan said, gritting his teeth.\n\n\"Right! How can we look at her the same way again, after this?\" I laughed.\n\n\"Neither of you are doing it, right? Does she really expect us to take our clothes off in front of each other?\" Isabel added, incredulously.\n\n\"I dunno. I kinda think it's funny. I'd do it, but only if everyone else did,\" Ryan said. I felt like he was testing the waters, so I did the same.\n\n\"Yeah. That's the problem. I'm sure we could all do it if we really had to, but no one wants to be the first, so it ain't gonna happen,\" I said. Isabel smiled at me. Ryan nodded in agreement.\n\n\"Well, I can't say I wouldn't complain if certain people came to work naked, but yeah, somehow I doubt that would ever happen,\" Isabel added with a smirk. She looked me directly in the eyes, and I knew that she meant me, but would never admit it.\n\n\"Well, we'll see. You never know!\" I said, continuing on to the bathroom. I could feel Isabel grinning back at me. It was a thrill to experience a tease with her.\n\nThe day went on mostly as normal... except for that naked-boss thing. It never stopped being a shock to the senses whenever she walked through the room. Off she went to the printer, wagging her bare butt cheeks. Up and down went the cover of the printer, causing her boobs to spring about. Then back across the room she went, unashamed of the hairy triangle between her legs. As she passed close by my desk, I could even make out the faint lips of her outer labia buried in the mass of curly pubic hair. I felt myself getting hard.\n\nAt one point, I caught Yuke observing me checking out Karen's body. She smirked and shook her head at me, then went back to work. Increasingly embarrassed, I did my best to pretend like Karen wasn't even there. However, toward the end of the day, she called us into the conference room again.\n\n\"So here's the deal,\" she said, with a sly grin. \"The first three people to come into work tomorrow naked get a bonus. I'm not going to tell you how much, but let's just say it'll be worth it.\" We all blinked at her. \"Any volunteers?\" Silence. \"Come on everyone, I know you're nervous. All it takes is one brave person to get it started, and I promise you won't be the only one joining in.\"\n\nAlexis sighed. \"Fine, I'll do it,\" she said, raising her hand.\n\nDarrell and I looked at each other across the room, smirking, and remembering our conversation the day before. All the guys appeared to grow excited at the idea that they'd see Alexis totally naked the following day.\n\n\"Awesome!\" exclaimed Karen. \"Anyone else?\" Everyone else shrunk in their seats. \"Well, think about it tonight. Two more people can get big bonuses. Let's see who it will be!\" she added.\n\n***\n\nDAY 2\n\nI woke up feeling jittery. I really, really wanted to accept the challenge and show up to work in the nude. However, deep down I knew it could go one of two ways. Either it would be intensely embarrassing, and form a traumatic memory that would never go away... not to mention ruining my chances with Isabel. Or even complicate long term friendships, like the one I had with Yuke. Alternatively, it might surprise and impress everyone, demonstrating how brave I was; that I was able to shake off the fear of nudity. Perhaps it would even draw more attention from Isabel and my other female coworkers.\n\nThere was simply no way to tell what would happen, and I felt as though I might collapse out of sheer anxiety. I went back and forth in my head. Did I really know Alexis would honor her word? Even if she did, what if I went through with it, and it was just the two of us? I'd need at least one guy besides me, I concluded.\n\nI texted Darrell, saying, \"I'm thinking about doing this. Are you in?\"\n\nI got no reply for a while. Then: \"...\"\n\nThis made me panic even more. Now Darrell was shocked to hear I was considering it. If I didn't go through with it, he'd probably tell everyone that I told him I'd do it but then chickened out. I started to run through scenarios in my head, working out ways to defend myself, when I got another reply back.\n\n\"Okay, I'm in,\" he text back. I thought this would make me feel better, but it was worse. Now I was locked in. There was no turning back. I had to do it...\n\nWhen I got to work, the elevator slid open and I stepped into the hallway. I approached the glass doors to the office and peeked in. I could see Rachel was at her desk, fully clothed.\n\n\"Shit,\" I said aloud.\n\nMy heart was racing. I imagined going through the doors without any clothes on, and seeing Rachel in a state of shock, as I stood there with my balls hanging out. I felt sick to my stomach. I turned back around and hurried into the hallway bathroom, then locked myself in a stall and sat there, breathing heavily. The stress was unbearable and made me lightheaded.\n\nI received another text. \"I can't believe we're doing this! I'm shitting my pants on the subway here,\" said Darrell.\n\n\"Totally. I'm in the bathroom trying to work up the nerve,\" I said. He sent back a laughing emoji. \"Fuck,\" I repeated, cursing myself for ever texting him.\n\nI set a backpack in my lap, which I had carried to store my clothes in. I stared at it for a few minutes, then I slowly unbuttoned my shirt, folded it, and stuffed it in my backpack. My heart was beating out of my chest. Next came my t-shirt. Now I sat on the toilet, bare-chested. I stood up, kicked off my sandals, then slipped down my jeans. I stuffed my sandals into the pouch of my backpack and then packed up my jeans.\n\nAt this point the reality of the situation finally struck. I stood inside the office bathroom stall wearing nothing but a pair of boxers, about to slip those off as well. The only reason I hurried was because I suddenly felt gross standing barefoot in the bathroom. I slid them right down to my ankles and pulled them off. The rush of air against my naked body was as exhilarating as it was frightening.\n\nI looked down at my dangling penis. I lifted my balls and moved them around, then extended the shaft. I was self-conscious about the appearance and wanted to get a good look at the state it was in before any of the girls saw it. That is, if I actually continued to go through with it. Finally, I listened to the door to make sure no one had come into the bathroom. Knowing I was alone, I unlocked the bathroom stall and stepped outside.\n\nThe wall of mirrors above the sinks immediately caught my reflection and sent a shock through my body. There I stood, fully naked in the bathroom, with a backpack slung over my shoulder. I glanced down at the small mass of curly pubic hair between my legs, and my long, flaccid penis hanging down. I felt like I was going to die, realizing that I was about to walk out into the room in front of everyone. Especially Isabel! I knew she wouldn't be naked, and I was terrified of what her reaction would be.",
        "I slowly opened the door to the men's room. First just a crack, then a little more. I found the hallway empty, so I lowered my backpack over my groin and slipped outside. The floor was cold and felt dusty against my bare feet. I crept down the hallway toward the office little by little, feeling my heart thumping in my chest. I began to feel the fear and regret. I told myself it wasn't too late to back out. I could be proud of myself for taking it this far at least, even if I ultimately failed.\n\nAll of a sudden I heard another door cracking open. I almost jumped out of my skin, then turned my head and looked over my shoulder. The door to the women's room was slightly ajar and Alexis was peeking out.\n\n\"Oh, shit!\" she exclaimed seeing me. She was looking straight at my bare ass as my back faced her.\n\n\"Oh man, you scared the shit out of me,\" I said.\n\nI could see Alexis leaning slightly to peek through the door. Her eyes sparkled with excitement almost as brightly as the shiny stud in her nose. She was without a doubt, naked, but had one arm covering her breasts.\n\n\"I'm totally staring at your naked butt,\" she said matter-of-factly.\n\nI chuckled and turned around, knowing that I had the backpack securely in place in front of my privates. It had just registered that due to being caught, there was simply no way I could back out now.\n\n\"Are you coming? I don't want to do this alone,\" I said, smirking back at her. I realized that I felt much better having someone to walk out there with, rather than doing it myself. Not to mention the fact that this was absolute confirmation that I wasn't the only one doing it at all.\n\n\"Okay...\" she said, breathing in deeply.\n\nI grew excited at the fact that Alexis was about to walk out of the bathroom with no clothes on. My heart thumped painfully in my chest as Alexis swung the door open. She still had her arm across her chest, and the other one held a bag over her crotch. It was intensely erotic seeing her standing there, fully nude and covering up her private parts, as if I had accidentally walked in on her in her bathroom after a shower. But I knew that of all people, Alexis couldn't really have been all that embarrassed.\n\nSmirking, she strolled further into the hallway with a sexy walk, as if doing a striptease. After taking a few steps toward me, she stopped, flung her arms out to the side, and exposed her naked body, just like that.\n\n\"Tada!\" she said, standing there with a mischievous grin.\n\nI was taken aback at the sudden exposure. I first noticed her round, petite breasts release from the pressure of her arm, wiggle for a moment, and then settle into place. I blinked for a second at the sight of her bright, pink nipples. Then at the tattoo of deer antlers midway down her chest, diving between her cleavage. I had seen the top of it countless times, and always wondered what the rest of it looked like.\n\nI gazed down her thin, fit body, over her bellybutton, and stopped squarely between her legs. There I stood, taking in the sight of my female coworker's perfectly bare vulva. The two puffy, distinct lips of her bald pussy instantly made me tremble with excitement.\n\n\"Whattaya think?!\" she said, growing impatient.\n\n\"Oh, uh-- nice!\" I said. She laughed. \"Um... what about me?\" I added, nervously. She looked at me with a perplexed expression. I didn't understand. She widened her eyes and shook her head. \"What?\" I said finally.\n\n\"Uh... I can't see anything yet..\" she said, pointing to the backpack I was still clinging to. \"Let's see the goods!\" she laughed.\n\n\"Oh, right!\" I said. I could feel myself shaking, and feared that Alexis could too. I pulled the backpack forward a little and looked down between my legs. I couldn't seem to get up the nerve to move it to the side.\n\n\"Well?\" she said, obviously amused at my embarrassment.\n\nI took in a deep breath. \"Okay, here goes,\" I said.\n\nI yanked the backpack out to the side and stood there with my arms apart, presenting myself fully naked to Alexis. I felt the cool air flow over my exposed genitals and felt a rush of fear and adrenaline surge through my body. She paused for a moment, looking down between my legs, with her wide grin still frozen in place. I glanced down self-consciously to see what she was seeing. There, the long, slightly aroused shaft of my penis hung down from the little brown mass of pubic hair, in front of my dangling testicles.\n\n\"Oooo-kay!\" she exclaimed. She glanced up at me, then back down between my legs. \"So! ... Okay. That's your penis,\" Alexis said, as if trying to calm herself. I was squirming. She knew it, and appeared to be enjoying it. She cocked her head. \"Your... uh... surprisingly big penis.\"\n\nI laughed and said, \"Yup. There it is. And, uh... there's your vagina...\" We both stood there in silence for a moment, blinking in disbelief at each other's naked body.\n\n\"Well... um. This isn't awkward at all, is it?\" she said sarcastically.\n\n\"Nope, not at all. This isn't awkward one bit,\" I joked.\n\n\"Okay-- well. Shall we go give everyone else a show?\"\n\n\"Do we have to?\" I replied.\n\nShe chuckled. \"Yeah, you kinda gotta do it now.\"\n\n\"Okay,\" I sighed.\n\nAlexis walked toward me. The moment she started moving again, the tension knot in my stomach began to grow again. I couldn't take my sight off her wiggling boobs as she walked, and I was terrified of getting an erection in front of my coworkers. I almost wanted her to take gentler steps. She continued past me, toward the office doors, until she stooped and turned to look over her shoulder at me.\n\n\"Here goes nothin'!\" she said, swinging them open. She stepped inside.\n\nI knew in that moment that Rachel was turning to see Alexis, with her face no doubt breaking into an expression of shock. Sure enough, I heard Rachel saying, \"Oh wow. You actually did it!\" With my heart still thumping in my chest, I followed behind Alexis, and walked into the room. I took three steps onto the office floor, feeling the firm carpeting against my bare feet, and then heard Rachel's voice trail off.\n\nI looked up. There she was, sitting at her desk, frozen in place with her mouth hanging half open. Rachel's eyes were glued squarely upon my penis. She looked up at me, her mouth slowly opening more, as if trying to squeeze out a word or two. When we made eye contact, a huge smile formed on her face. She put her hands in her lap.\n\n\"Okay. Wow,\" she simply said, glancing back and forth at my body and into my eyes. Alexis started giggling. \"That's... okay. Wow,\" Rachel continued, dumbfounded at the sight of my nudity. This was the first time I'd ever seen her speechless.\n\n\"Well, I'm gonna go now, while you work on putting your eyeballs back in your head,\" Alexis told Rachel.\n\nShe walked off into the room. I quickly followed, not wanting to stand awkwardly in front of Rachel a minute longer. I could feel her eyes glued to my ass as I hurried after Alexis. Then it dawned on me that I was about to walk right out in front of Alyshah and Isabel. It was too late to process this. Before I knew it, there we were. Alexis stopped and waved at them proudly.\n\n\"Hi guys! We're naked!\" she laughed.\n\nAlyshah and Isabel looked up suddenly. My heart stopped. Isabel almost spit out a sip of coffee she had just taken, as her eyes grew three sizes larger. Alyshah threw her head back and howled with laughter.\n\n\"Oh - my - god!\" Alyshah squealed, holding her hand up to block the view. She turned to face Isabel with a look of embarrassment. \"I can't believe I just saw Taylor's penis!\" Isabel didn't know how to react and just remained frozen. Alyshah finally mumbled to herself, \"Okay, don't lose it Alyshah.\" She jumped up and ran to the other side of the desk, then looked us both up and down.\n\n\"That's hi-larious!\" she exclaimed. \"I can't believe you guys fucking did it!\" Alyshah turned to face Alexis. \"Well, I can believe YOU did it.\" Then she turned to face me. \"But wow! Taylor!\" she added, grinning. Alyshah was talking a mile a minute. She continued to look me up and down. \"Very nice!\" she said, finally looking me in the eyes with a smirk. \"Is it scary?\" Alyshah asked.\n\n\"Terrifying,\" I said.\n\nShe laughed. I looked over at Isabel. She said nothing. Her eyes were burning holes in my body.\n\n\"Amazing, right?\" Alyshah asked her.\n\n\"... Yeah. I can't believe you did it, either,\" Isabel said to me, her quivering mouth finally cracking into a small smile.\n\n\"Me neither,\" I said, anxiously studying her gaze. I didn't know what to do. Isabel just sat there, staring at my naked body. I couldn't get over the fact that she of all people, my secret crush, was now facing my penis and testicles.\n\nI couldn't stand it any more. I had to sit down and collect myself. I just revealed my cock to four female coworkers. It was impossibly thrilling and anxiety-inducing at the same time. I quickly made my way to the seat at my workstation, and Alexis soon settled into hers. I opened my usual browser tabs and clicked about, unable to concentrate.\n\n\"Oh lord!\" I heard Alexis shout.\n\n\"What?\" Alyshah called out.\n\n\"My bare ass is sticking to the leather. Not fun!\" she moaned.\n\nI heard laughter from Alyshah, Isabel, and Rachel. I chuckled, realizing that this was going to require some adjustment in a variety of ways. I pulled my phone out of my bag and found I had missed a text from Darrell.\n\n\"Help! This is crazy. Where are you?\" I texted him.\n\n\"Stripping in the bathroom! Are you inside?\"\n\n\"Yeah.\"\n\n\"Did everyone see you butt naked?\"\n\n\"Yeah!\"\n\n\"LOL\"\n\nAfter a few minutes I heard the office doors swing open. Darrell strolled in nude with a silly grin on his face. I gawked at the thick, veiny shlong swinging from between his legs.\n\n\"Watch out! Naked black guy!\" he shouted.\n\nRachel swung around and covered her mouth, suppressing laughter. He put his fists on his waist and puffed out his chest, doing his best Superman impression. I instantly wished I was as comfortable in my skin as he was.\n\n\"Oh my god, I gotta see this!\" said Alyshah, leaping out of her seat. Isabel cast me a smirk, then got up and followed. Alexis hurried passed my desk and I followed her.\n\n\"Oh... shit! More naked people,\" Darrell exclaimed as he saw Alexis walking toward him, completely naked. He threw his hand over his mouth. I could tell she was seductively wagging her ass as she approached him. He turned and saw me, then burst out laughing. \"Right on buddy!\" he exclaimed, offering me a high five.\n\nWe stood around carrying on for a few minutes. Though I was still extremely nervous, I started to calm down as everyone began to appreciate the humor of the situation. It was impossibly weird and exciting that Alexis, Darrell and I were standing around naked in the middle of the office, while the others giggled and pointed at us. I made it back to the safety of my seat as soon as I could.\n\nThe rest of the team trickled in. Each one having much the same reaction: shock and bewilderment, embarrassment, amusement, and then what appeared to be a mild terror at the idea of feeling pressured to join in. Yuke strolled in last and marched right up toward my workstation, which was situated next to hers.\n\n\"Hey Taylor. How's it--\" she said, stopping short at the exact moment when she realized my shirt was off. \"Wait... are you...\" she continued.\n\nYuke turned to Ariel nearby. \"Is he... naked?\" Ariel smirked. Yuke, still in a state of disbelief, bent over and sarcastically peeked under my desk. \"Oh shit!\" she exclaimed, as if not expecting me to actually have nothing on. She stood back up with a look of shock. \"You really are naked!\" I nodded sheepishly. Yuke gawked me in in disbelief for a moment, then turned toward Ariel again, whispering, \"I just... I totally just saw Taylor's junk.\"\n\nAriel giggled. \"Darrell and Alexis are naked too,\" she said, grinning.\n\n\"Hell yeah!\" Yuke said, as Alexis stood up at her workstation, doing a little dance to show off her nakedness. Yuke circled the desk to sit down at her computer. \"That's bad-ass!\" she added, giving me a high five like Darrell had.\n\n\"Thanks,\" I said, laughing.\n\nI noticed Yuke sneak looks now and then out of the corner of my eye, since she had the best view of me sitting there in the office chair naked. Soon Karen strolled in, as nude as she had been the day before. I sat there naked in front of my naked boss, wondering how I managed to get into this situation.\n\n\"So did anyone accept the challenge? Where's Alexis?\" she announced to the room, excitedly.\n\n\"Yes!\" said Alexis, jumping out of her seat.\n\n\"All right!\" exclaimed Karen, clapping her hands at the sight of Alexis' naked body walking across the carpet. \"Anyone else?\" Alexis pointed to me. I nervously stood up and circled around my desk. \"Taylor! Okay!\" Karen said in disbelief, briefly glancing down at my genitals and back, nonchalantly.\n\n\"And Darrell,\" I said, as he hesitantly made his way over to us. Karen turned and saw him approach. His massive cock was swinging between his legs.\n\n\"Wow, okay!\" Karen said, enthusiastically. \"You're the first three, then, right?\" We nodded. \"Don't let me forget to give you all that bonus before the end of the day.\"\n\nThe three of us grinned at each other. I wasn't yet sure if that made all this discomfort worth it, but what was done was done. Karen seemed to give our bodies another subtle scan out of the corner of her eye as she walked by my desk on the way to her office.\n\nShe called back to the rest of the group, \"There's still plenty of time today for the rest of you, if you want to participate!\"\n\nI saw Alyshah and Isabel exchange secret, nervous looks. I wondered if Alyshah would get naked. I knew that I certainly wouldn't mind seeing what she had to offer. Isabel I had no hope for. She was just too innocent, quiet, and nervous. I felt a burning frustration in my stomach, finding it a total shame that I wouldn't have a chance to lay my eyes upon what were surely a pair of magnificent boobs.\n\nThe day went on, and I began to come to terms with the idea that Alexis, Darrell, and I would remain the only employees without any clothes on. However, to my surprise, the situation soon began to rapidly evolve.\n\nI had gotten up to get something to drink at the office water cooler, which happened to also serve the stereotypical additional purpose. Throughout the day, when someone needed a break, it was often in the form of a chat with someone by the water cooler. As I approached, I saw that Ryan, Yuke, and Alyshah were already there. They immediately became alert, as anyone could be expected to do when a naked guy approached.\n\n\"Hey there,\" Yuke said, with a smirk. Hours later, there was still no shortage of surprise and amusement from the girls at the sight of my cock.\n\n\"Hey,\" I said, helping myself to some water.\n\n\"I gotta hand it to you man... I didn't think you'd do it. Darrell, maaaybe, but not you,\" Ryan said.\n\n\"Actually I'm the one that got Darrell to do it.\"\n\n\"Really?\" said Alyshah.\n\n\"Yeah, I texted him and said I was thinking about it, and he agreed to join me when I said I'd do it.\"\n\n\"Wow.\"\n\n\"What made you do it?\" asked Yuke, curiously.\n\n\"I dunno. I guess when I saw Alexis say she'd do it, I took it as a personal challenge?\" I said.\n\n\"Cool.\"\n\nI realized that the scenario I had hoped for might actually be working itself out. I'd impressed them with my ability to go balls-out naked in front of everyone. The question was... would anyone else follow our lead? I had to ask.\n\n\"What about you?\" I asked Ryan. I really wanted to ask Alyshah, who was transparent as glass. Yuke was hard to read sometimes. But I figured it'd be safer to be indirect and avoid both of them.\n\n\"Ha! I dunno...\" he said.\n\n\"Do I detect a note of bashfulness from Ryan O'Neill?\" Alyshah said with a snicker.\n\nRyan rolled his eyes. \"You should talk. It's not like you've taken anything off,\" he laughed.\n\nAlyshah smirked at him. \"If I did... would you?\" Everyone stared at her.\n\n\"Seriously?\" he asked.\n\n\"Maybe,\" she replied with a grin.\n\nYuke raised an eyebrow. \"Really? Are you thinking about it?\" she asked Alyshah.\n\n\"Maybe,\" Alyshah repeated with a laugh.\n\nI watched this play out in disbelief. I barely had to say anything except introduce the topic. It dawned on me that maybe they were each secretly wanting to take the plunge, but afraid to be the first to admit it. It was as if they just needed a little prodding, and it would unravel all by itself.\n\n\"Okay, I dare you then,\" said Ryan, smiling at Alyshah. \"If you do it, then I will.\"\n\nShe exchanged amused looks with Yuke. I could see Alyshah pondering this for a moment. She looked at me, at my naked body, then looked me directly in the eyes. I smiled at her expectantly.\n\n\"Okay, fine,\" she said.\n\n\"Haha, really?\" said Ryan.\n\n\"Yep. So get ready, cuz you'll be next,\" Alyshah replied. I could see Ryan growing nervous at this. \"So... uh... what do I do? Just, like, strip right here?\" she continued, realizing she didn't know how to go through with it.\n\n\"Yeah, right here. While we all gather 'round and stare at you,\" chuckled Yuke.\n\nAlyshah giggled. \"Okay...\" she said. I could see her gulp as she began to fumble with the button on her jeans. Once she popped it open, she sighed nervously. We all chuckled. \"Ugh... okay, here we go,\" she added. After removing her shoes and socks, Alyshah slipped her jeans down, getting one foot stuck before kicking them off. She stood anxiously by the water cooler in a t-shirt and pink panties.\n\n\"This is gonna take all afternoon,\" joked Ryan, observing Alyshah's nervous hesitancy. We all laughed.\n\nAlyshah continued. She pulled her t-shirt up and over her head, revealing a matching pink bra. I observed how the cups made her boobs bulge over the top of her bra, and I grew excited. Her body looked amazing. The contrast of the bright pink underwear against her dark skin was sexy, and I could see that we were about to be treated to something memorable. Alyshah tossed her t-shirt at Ryan's head where it landed and draped over his eyes. We chuckled as he yanked it off and tossed it onto the pile of clothes forming on the floor.\n\n\"Geez, I can't believe I'm really doing this,\" Alyshah said, stalling.\n\n\"You got this,\" Yuke said, enthusiastically. Alyshah gave another heavy sigh and reached around back to unclasp her bra.\n\n\"Oh man, I'm really gonna have to do this,\" muttered Ryan, accepting the fact that she was really going through with it.\n\nAlyshah stuck her tongue out at him. I heard her bra unsnap and felt the butterflies start up again. Alyshah pulled her bra away quickly. Two medium-sized boobs popped out, with wide, brown nipples. No one said anything, they just stared in amazement. I could see Alyshah's chest moving quickly in and out, nervously aware that we were all staring at her boobs. Her hands were trembling slightly as she reached for the elastic waistband of her panties. She looked away for a second and gave a small sigh.\n\n\"Oh god, okay... Am I really about to take my panties off?\" she mumbled. After a couple of moments, Alyshah abruptly slipped them down to her feet. She stepped out of them and kicked them into the pile as she stood up. All at once, we looked down at Alyshah's pussy. Like Alexis', it was completely bald. I gazed at the folds of her outer labia, like two dark, pursed lips, then up at the gorgeous boobs sloping outward from her chest. I felt a rush of excitement flowing up and down through my body upon seeing her completely naked.\n\nRyan whistled. Alyshah rolled her eyes. Yuke grinned at them both.\n\n\"Wow, okay. There we go... another one down,\" I said, grinning.\n\n\"Okay Ryan, let's see if you're all talk or not,\" Alyshah said, folding her arms. Her boobs rested and bulged on her forearms.\n\nRyan sighed, \"Okay.\"\n\nHe began to undo his belt, as Alyshah and Yuke stared at him, captivated. It was arousing to watch their curiosity form, as he slowly began to remove one piece of clothing and then another. Soon he was down to his boxers.",
        "\"This better be worth it,\" Alyshah said.\n\n\"Alyshah!\" Yuke laughed. We all chuckled.\n\n\"Me and my big mouth,\" laughed Ryan.\n\n\"You got anything else that's big?\" joked Alyshah. We all laughed again.\n\nWith a nervous sigh, Ryan slipped off his boxers. I watched Alyshah and Yuke's reaction as Ryan's penis flopped out and slapped against his thigh. I could tell he was fighting arousal, as it was clearly beginning to swell a little. Their smiles grew a bit as they observed the grand reveal. Ryan's chest was moving in and out quickly, as Alyshah's had done before. He was growing nervous at their initial silence.\n\n\"Okay, yup,\" Alyshah chuckled, turning toward Yuke.\n\n\"Worth it?\" she said.\n\n\"Indeed,\" laughed Alyshah.\n\nRyan was turning red. I stood there nervously for a few moments, watching Ryan checking out Alyshah's pussy, and Alyshah and Yuke curiously examining Ryan's penis. Finally Alyshah faced Yuke again and added, \"Well, are you gonna back me up here?\"\n\nYuke laughed. \"Yeah, okay,\" she relented. \"I guess I have to now.\" From the way she was grinning, it was obvious that she intended to join in anyway. Yuke proceeded to strip with relative ease, after Alyshah and Ryan had broken the ice. First she tugged down her ripped denim shorts. Then she unbuttoned her shirt and threw it to the floor. I prepared for another reveal.\n\nThis one was particularly exciting. I'd known Yuke longer than anyone I worked with, having met in college. We often got together on the weekends, or hung out at a bar after work, but I'd never seen her naked. Not that I wasn't curious, but she was always dating someone, or else I was. We never actually spoke about whether we had any attraction to each other. Granted, I knew that I did, but I always sort of dismissed it.\n\nDespite being very thin, Yuke somehow managed to carry the biggest pair of breasts in the office. Even clothed, it was exciting to see how they moved. Now that she was standing in her underwear, I could see that a long tattoo ran up the length of the left side of her body. It was surprising; I had no idea she had this tattoo, and I was anxious to see it.\n\n\"Okay, get it over with-- I know everyone's waiting to see 'em,\" Alyshah sighed. I realized then that the awareness of Yuke's impressive chest was already an established topic in the office.\n\nYuke giggled as she unhooked her bra and let her boobs bounce free. There was a collective gasp as they sprung out. I watched them swing left and right as she yanked down her panties. I panicked as I felt the excitement rip through my body. I squeezed every muscle in my body, desperately trying to prevent an erection, which seemed inevitable. Incredibly I managed to get it under control and avoided embarrassment.\n\nYuke's body was astounding. The size and movement of those full, round boobies were unparalleled. Her nipples were a deep crimson, taut, and pronounced. We stood there, absolutely mesmerized by them. She had a nicely groomed pussy, with a thin layer of closely cropped hair covering her pubic mound, accented by a sexy pink slit that revealed a glimpse of the slippery flesh within.\n\n\"Jesus, girl. Those are some amazing tits!\" remarked Alyshah. Yuke laughed. \"Not that I typically check out other girl's boobs, but... um... can I feel 'em?\"\n\n\"Sure,\" replied Yuke.\n\nAlyshah reached forward and awkwardly grasped Yuke's boobs, giving them a gentle squeeze. Ryan and I watched in amazement as Alyshah's fingers pressed deep into Yuke's soft flesh, which instantly sprung back into shape as soon as she let go. I wanted to ask permission to do the same, but knew that I couldn't. It was different if Alyshah asked.\n\n\"Yep, they're real,\" Alyshah groaned, pulling her hands away.\n\n\"Haha. Yeah, one-hundred percent real boobs,\" laughed Yuke. She then added, \"Made in China!\" We all laughed.\n\nRyan covered his groin sarcastically, saying, \"Guys, if you don't quit it, Taylor and I can't be blamed for the consequences. I'm just saying...\"\n\nAlyshah grinned and said, \"Whatever. Somehow I don't think we'll get through this week without seeing an erect penis or two.\" Yuke nodded at her.\n\nAfter the initial shock of seeing Yuke's assets, I took in the full scope of her tattoo. It was a long, flying dragon snaking its way up her body.\n\n\"I can't believe I've known you for so many years and only just realized you have that tattoo,\" I said.\n\nYuke glanced down at it. \"Oh... yeah! I got it a couple years ago,\" she replied.\n\n\"It's amazing,\" added Ryan.\n\n\"I love how the flicking tongue looks like it's about to lick your nipple,\" I said, in reference to the forked tongue making its way toward the nipple of her left breast. It felt weird that we were all looking at her boobs together.\n\n\"Lucky bastard,\" said Ryan.\n\nYuke gave a hard laugh. Now that she was completely naked, her heavy boobs bounced dramatically when she laughed. Seeing this, we all burst out laughing.\n\nEmbarrassed, Yuke grasped her boobs with her hands to prevent them from bouncing so much, as she continued to laugh. Our mutual amusement began to settle our nerves, and we began to become accustomed to standing in front of each other naked. Soon, we realized we'd better get back to our desks and resume working.\n\nWe caused a sensation when the four of us strolled across the office naked. Isabel, Andrew, Rachel, Tim, and Ariel remained as the only ones clothed, as the rest of us began to feel an increasingly powerful high from the experience of shedding our clothes in front of each other.\n\nWhile sitting at my desk, I saw Tim and Ariel glancing at each other, exchanging words. All I could hear was, \"Should we do it?\", \"Do you want to?\", \"I dunno, do you?\" and so forth. I saw Yuke perk up, as she overheard their negotiation as well.\n\nA few minutes later Ariel pushed her seat back and stood up. Tim walked over to her. I realized this was happening, as did the rest of the room. All eyes shot over to their desks. Tim helped Ariel pull her shirt off, and then they each helped the other out of their jeans. I watched them go about this lovingly, knowing that they were not-so-secretly a couple. It was a cute office romance, but I wasn't actually sure how far it went. Had they had sex before, or was this the first time they'd see each other naked?\n\nAs soon as Tim removed Ariel's bra, as if he'd done it a thousand times, I knew they were already fucking. Ariel was a busty girl, whose chest was accented with wide areolas. Her boobs weren't as dramatic as Yuke's, and sunk down a little, but they were lovely. Tim slipped down her panties and I saw that she had a small trail of fair pubic hair that was too sparse and light to hide anything. Her pink inner labia was very visible and peeked out a bit.\n\nArial crouched in front of Tim and tugged his boxers down. His penis popped out in front of her face. I realized that Tim was the only uncircumcised guy in the office. He was also the only one of the guys that was fully shaved and perfectly smooth. I was surprised to see Ariel give Tim a playful stroke as she stood back up, not realizing we were all watching. That confirmed it, though; they were more than familiar with each other's body.\n\n\"Yay! Almost everyone is naked now!\" shouted Alexis.\n\nTim and Ariel looked up in surprise, realizing they were being watched. Ariel grinned and struck a playful pose. With almost all the office naked and giddy, it was inevitable that the attention then turned to Isabel and Andrew, both of whom were shaking in their shoes. Strangely, no one really seemed to bother Rachel. I didn't expect her to participate, but maybe they assumed she would eventually comply? This intrigued me.\n\nThough Andrew rarely mingled with the rest of the team, he was an efficient leader when he had to execute Karen's orders. Outside of that, he was just a scrawny, nervous, nerdy guy. I imagined that he would chicken out, go home and vent his sexual frustration in front of porn sites all night, then spend the rest of his life regretting that time he didn't have the guts to go naked with all his coworkers. I felt bad.\n\nHowever, the one I really felt bad for was Isabel. Rather, I felt conflicted. I could see how frightened she was, and how much her anxiety grew as Alexis and Ryan began to tease her about being clothed. At the same time, I couldn't stop thinking about Isabel slipping her smooth, round ass out of her jeans, sliding a pair of lacy panties down her long legs, and those gorgeous boobs springing free as she popped off her bra.\n\nSeeing so many naked bodies criss-crossing my desk began to get overwhelming. Several times I had to rush back to my seat in time to crush my penis between my thighs trying to hide or suppress an oncoming erection. I took helpless glances over at Yuke's long, nude body nearby to my left. Each time she was tapping away at her keyboard, unaware of how her coding made her breasts jiggle. She'd reach for her mouse and give the trackball a flick, causing them to swing. Her pointed nipples would jump and dance about.\n\nI spent the day absorbed in an intense, relentless fascination with their naked bodies, mixed with a vicious lust at the sight of their innocently wagging boobs and their pussies, which I imagined were secretly becoming wet due their own, secret sexual excitement at seeing the guys unclothed. When five o'clock rolled around, I both celebrated and felt glum. All around me, the nudity vanished, as each person quickly slipped their clothing back on, laughing and carrying on about the unexpected experience the day had brought.\n\nStill, I knew that tomorrow was another day.\n\n***\n\nDAY 3\n\nThe following morning, I was again filled with the same nervousness that started the previous day. I didn't think much of it, remembering that it had largely subsided by the end of the work day, and I could expect much the same experience. Also, Alexis, Darrell, and I had each become three hundred dollars richer overnight, thanks to Karen's bonus, and that was certainly motivating.\n\nI quickly undressed in the bathroom and packed my bag of clothing for the day, then made my way into the hallway. Alexis wasn't around, and I figured she was either inside already or hadn't yet arrived. I prepared myself to stroll past Rachel naked again. I had enjoyed her speechlessness the day before, but today I was ready for whatever snarky comment she had for me.\n\nI yanked the office door open and wandered in. I glanced over to my left at Rachel's desk. Caught completely off guard, I stopped short, almost tripping over my own foot. There was Rachel, sitting at her desk, totally nude. Her full, young boobs jutted out from her chest toward the computer screen. Her soft, bulging buttocks pressed firmly against the seat of her chair.\n\nHearing someone enter, she spun her chair ninety degrees. I gawked as her big breasts jiggled dramatically and then settled into place. I saw a dark triangle of pubic hair nestled between her legs; not recently trimmed, but not excessively hairy either. I don't know what came over me, but I found her body unbelievably arousing. Somehow, it struck me at how real it was. Not like a fake, airbrushed model in a magazine; a real, naked body, with slight curves and imperfections. Her nudity seemed raw and authentic and exciting.\n\nThe relatively calm, passive state I had been in before entering the office went straight out the window, and I was suddenly as horny as could be. I stared down at those plump boobies and her hairy pussy, and the worst thing happened: I felt my penis begin to throb like mad, and it shot up into the air, as hard as could be. My thick, swollen head bobbed in front of my body and pointed straight at her before I could realize what was happening.\n\n\"Oh shit!\" I said, suddenly snapping out of my trance. Rachel's jaw had dropped open again, half gawking and half on the verge of a laugh.\n\n\"Shoot, I'm sorry!\" I said, frantically covering myself with my backpack. My erection pressed painfully against the scratchy black fabric.\n\n\"Wow... okay... happy to see you too!\" she said, then started laughing. I grimaced, overwhelmed with embarrassment.\n\n\"Seriously, I don't know what happened. You caught me by surprise...\" I said.\n\n\"My pleasure!\" she said, thoroughly amused, \"Happy to be of service...?\"\n\nI smirked. The erection was finally coming down. I quickly hurried away from her desk, feeling myself flaccid again after a few steps, no doubt due to sheer humiliation. It was safe to remove the backpack, so I made my way to my desk, naked, before any other sexual urges arose again.\n\n\"Hey Taylor!\" I heard Alyshah say. I looked up and saw her sitting there, as proud and confident as could be with her perky boobs out. Isabel smiled and waved, fully clothed.\n\n\"Hey guys,\" I said, smiling back at them. I breathed a sigh of relief, realizing that they were perfectly unaware of what had just happened.\n\nLunch came around, and it was Andrew's turn to make a run for those of us who wanted something picked up. True to form he went through his checklist and sorted out the individual packages he'd brought back to the office and called out people's names.\n\n\"Alexis!\" he said. She approached the desk. He glanced up at her awkwardly, and then away, still afraid to look at her nude body too closely. \"Here you go,\" he said, holding out her bag. \"Eight dollars.\"\n\n\"Hmm...\" she said, thoughtfully.\n\n\"What?\" he asked, as the others arrived to collect their food.\n\nAlexis laughed and turned toward Ariel, saying \"What if we all refuse to pay him back, unless he strips down?\" Ariel giggled. Andrew's face fell.\n\n\"Haha, I'm in!\" said Alyshah.\n\n\"Dude, Andrew will never get naked. He's like the textbook definition of modesty,\" Ryan commented.\n\nI could see Andrew trembling, and looking from person to person as they talked about him. Alexis circled Andrew, sarcastically moving her nude body up against his, as a tease. Everyone seemed thoroughly amused. Even Isabel watched with a silent, mischievous grin. Andrew was just that type of person that you badly wanted to corrupt.\n\n\"Come on baby,\" Alexis purred at him, \"Don't you want to take your clothes off for me?\" Andrew looked at the floor, unable to speak. He was turning red. Alexis chuckled, \"Look at him, he won't even face me. That's too cute!\" Except for Rachel, who was on the phone, everyone in the room had come to see what was going on, even those of us who Andrew didn't pick anything up for.\n\n\"Come on, man. This is like, an opportunity of a lifetime,\" Darrell said, nudging Andrew.\n\n\"I-- can't...\" whimpered Andrew.\n\n\"Why? ... Just because you're shy?\" asked Alexis.\n\nAndrew nodded. He seemed to be on the verge of hyperventilating. All the girls gazed at him, and I realized his fear of getting naked in front of them was a turn-on for them. It certainly was for Alexis, who enjoyed being in a position of power.\n\n\"That's okay, I can help you do it. What do you say? Do you want me to take your clothes off?\" Alexis asked him in a soft voice. It was like she was playing out a fantasy.\n\n\"Um... I... don't know...\" he mumbled.\n\n\"Here, let's start with this, and then we can go from there,\" she said, setting her lunch bag back down on the table. She stood in front of him, forcing him to confront her perky boobs. He gulped as she began to undo each button on his crisp shirt. He kept avoiding her eyes, so she ducked her head down and made him look at her, smirking.\n\n\"Relax, Andrew, it'll be fine,\" she said in a soothing voice. She removed his shirt, and then pulled his t-shirt up and over his head. Poor Andrew stood there shaking in his shoes. He folded his arms across his boney chest and cowered.\n\n\"Okay, pants next, let's go,\" said Alexis, pausing for his approval. He said nothing, so she knelt down and took off his shoes and socks, then began to unzip his pants. She slowly pulled them down. Everyone watched with bated breath. Now Andrew stood trembling in front of us wearing only a pair of tighty whities. The small bulge his penis made in his underwear was visible, and he seemed aware of it, and ashamed.\n\n\"Okay, can I remove your underwear now?\" Alexis asked, putting her arm around his shoulder.\n\nAndrew tried to speak but his voice cracked. \"Um...\" is all he could say.\n\n\"It's no big deal, Andrew. You shouldn't be afraid of letting the girls see your penis. The other guys aren't,\" she explained. \"Can you show us your penis?\"\n\nI saw movement out of the corner of my eye and glanced over. Alyshah, Yuke, and Isabel were all exchanging glances. I could see how cute they found his embarrassment, how much they pitied him, and how turned on they were by the idea of making him undress on the spot. It was written all across their faces. They looked like they were about to burst with anticipation.\n\nAndrew slowly nodded, still unable to speak.\n\n\"Okay, I'm going to take off your underwear now then,\" said Alexis, grinning ear to ear. She squatted back down in front of Andrew, and grasped the elastic waistband of his underwear, then began to pull them down, inch by inch. The waistband moved smoothly over his curly bush of pubic hair, until the shaft of his penis began to emerge.\n\n\"There it is!\" Alexis said, excitedly. She began to pull his underwear down a little faster, until his penis and testicles were completely exposed. Andrew wasn't exactly big, but the girls didn't seem to care. They laughed with delight upon seeing Andrew, of all people, without any clothes on. Alexis finished removing his underwear and stood up. Andrew instinctively threw his hands over his crotch, but Alexis calmly separated them and moved them to the side of his body.\n\n\"Don't be afraid, it's okay,\" she reassured him, curiously observing his genitals.\n\nFor the first time I saw Andrew take a direct look at her body. Still quivering, he stared at her boobs and down her body toward her smooth pussy. All of a sudden, his penis twitched and came alive. It swelled in a matter of seconds, pulsing and raising into the air bit by bit until it was fully erect. It stuck straight out in front of his body, such that the small knob of his head almost brushed against Alexis' skin.\n\nEveryone reacted with a gasp or a laugh. Alyshah turned to Ryan, saying, \"I told you we'd see some erections!\" Andrew was positively mortified. He threw his hands back over his genitals, desperately trying to press down his raging hard-on, doing his best to cover it completely with his palms and fingers. The whole group was beside themselves with laughter and amusement.\n\n\"That's so awesome,\" Alexis said. \"You're the best, Andrew,\" she added, trying to comfort him. She gave him a little, apologetic peck on the cheek. His knees buckled and he remained immobilized by the terror racing through his body.\n\nWhen the laughter subsided, Alexis said, \"Okay, who's left then?\" She spotted Isabel nearby. Instantly the grin on Isabel's face faded. \"Isabel, my dear!\" Alexis was emboldened by her performance with Andrew, and clearly wanted to engage in more fun at someone's expense.\n\n\"Wait-- no!\" Isabel said, taking a few steps back. \"No way!\" she wailed, as Alexis hurried over and gave her a reassuring hug.\n\n\"Come on babe. Literally you're the only person left who hasn't taken all their clothes off!\" Alexis said.\n\n\"I know! And it can stay that way!\" Isabel laughed.\n\n\"Come on, everyone wants to see,\" Alexis continued, tickling Isabel.\n\nI smiled. \"Aww, don't force her,\" I couldn't help but say. I felt bad for Isabel, who immediately looked at me as if seeking help.\n\n\"You're telling me you don't want to see Isabel naked?\" she said, peering at me with a smirk.\n\nI didn't know what to say. Clearly that was not the case. I wanted to admit that I did, to make sure Isabel knew I was interested, but I also wanted her to see me as on her side. I panicked, and said, \"Of course I do! I mean... come on. But, you know.\" Isabel opened her mouth wide at me, and then laughed. I wasn't sure if she was mad, or excited to hear that.",
        "\"Darrell? Ryan? Tim?\" Alexis said, going through the group, implying the same question. Everyone nodded their heads, enthusiastically in agreement with me. \"See? Everyone wants to see you naked!\" Alexis declared. She continued to tickle Isabel.\n\n\"Okay, okay, stop, stop!\" Isabel said, out of breath and unable to bear her tickling.\n\n\"Oh? Is that a yes then?\"\n\n\"Um...\"\n\n\"Well?\"\n\n\"... Maybe?\"\n\n\"Maybe what?\"\n\n\"Maybe it's a yes,\" Isabel said with a smirk and a sigh. I couldn't believe what I was hearing.\n\n\"Do you want me to help?\" Alexis asked, grinning.\n\n\"No!\" said Isabel.\n\n\"Okay!\" said Alexis, throwing her hands up and stepping away. We all watched Isabel, expectantly. She kept glancing at me, with silent pleas for help again. It became apparent that she was stalling.\n\nSeeing Isabel looking at me, Alexis chimed in, \"Taylor, just help her out already.\" Isabel cast me another frightened look.\n\n\"Do you... want me to?\" I asked her, hesitantly.\n\n\"Um... I dunno...\" she said, squirming.\n\nI approached her and whispered, \"I don't mind helping you if you're really going to do this.\" I spoke to her in the soothing, calming voice that Alexis had used with Andrew. She gazed up at me, her eyes widening with terror.\n\n\"O-kay...\" she said, with a hard swallow.\n\nI was completely shocked at what was happening. I had so badly wanted to see Isabel naked, but didn't want to get my hopes up. Now, just like that, Alexis had managed to get her to agree to go nude, and I had the distinct honor of undressing her. I felt an excitement swelling up inside as I gently raised her arms.\n\n\"I'll take off your top first,\" I whispered. She nodded silently at me.\n\nI put my hands under her silk blouse top and began to run my hands up along either side of her body, collecting fabric as I went. I watched as her bellybutton came into view; a soft, sexy dimple as alluring as the ones on her cheeks. I brushed my fingers along her skin as I raised her top. Her flesh was warm and powder soft.\n\nWe stared into each other's eyes as I reached her bra, then moved her top up toward her neck, and over her head. Just as I imagined, she wore a sexy style of black underwear. I always wondered if Isabel had a sexual side that she was just too shy to reveal. I slowly lowered her arms back down. I could see that they were covered in goosebumps. She noticed that I was observing them, and grew nervous.\n\n\"It's okay, don't be so nervous. Getting naked isn't as bad as you think,\" I said.\n\nShe exhaled a great deal of tension, then said, \"Okay...\"\n\n\"Now your jeans. Are you doing okay?\" She nodded nervously, contradicting herself.\n\nI reached down and unbuttoned her pants, not leaving her deep brown eyes. They were large and glistening, scanning and analyzing my every reaction to her body. When her jeans were loose, I inserted my hands into them, on either side, pushing them down slightly. I ran my hands over her body, feeling her soft panties beneath my palms. My fingers ran over her smooth butt as I shimmied down the denim fabric, carefully revealing her lower half.\n\nIsabel's breathing grew quicker as her jeans finally began to slide down her legs, revealing her black, lacy panties. I gazed down at her thighs, and at the soft mound of her sex obscured by the thin, black fabric. Isabel noticed that my hands were shaking. I smiled, and she smiled back.\n\nI bent over and pulled her jeans down the rest of the way. She stepped out of her shoes and I removed her socks, then took her jeans fully off. I stood back up and faced Isabel, standing there in only her underwear. Her body was tense and quivering, and she stared at me like a deer in headlights.\n\n\"Can I... remove your bra now?\" I asked, shaking with increasing intensity myself.\n\n\"Y-yes...\" she said, struggling to form words.\n\n\"Okay,\" I said, taking a deep breath. This was it. I was finally going to see Isabel's breasts, which I had dreamed of a thousand times. My heart was pounding.\n\nI reached around behind her, and then stared down at her chest. Her breasts bulged in her bra, and formed a deep, dark cleft of cleavage that was intensely arousing. I was so close to her that I could smell the faint aroma of whatever perfume she dabbed there. Distracted, I found and fumbled with the strap a bit, until I got it unhooked. When it released, Isabel flinched and breathed in deeply.\n\nI gave her one last look as I gently pulled the bra away from her body, and exposed Isabel's breasts. Nervously, she followed my gaze down, and we looked at them together as they came free. I felt my heart stop again. They were large, firm, and luscious. Her boobs were tipped with deep brown nipples with perfectly circular areolas, covered in goosebumps like her arms. At the center were distinct, erect nubs, which I gazed at with a desperate need to suckle.\n\nWe returned to gaze into each other's eyes again. I could tell she wasn't breathing, so I said, \"You can breathe now.\" She finally let out a slight laugh. Isabel's boobies jiggled before my eyes and I was hypnotized. Feeling them move, and perhaps sensing my excitement, she exhaled and tensed up again. I felt as if the whole world had gone away, and it was just us now, lost in each other's erotic presence.\n\n\"May I... remove your panties now?\" I said. She nodded back at me slowly, still almost frozen with anxiety. I touched her hand gently, and I saw her calm down slightly. She offered me a slight smile which I returned.\n\nI squatted down in front of her, as Alexis had done with Andrew, and looked up at her panties. I observed her outer labia pressing against the light fabric of her panties, and the faint, almost imperceptible impression of her two lips. I did my best to pretend I wasn't as anxious as she was, but secretly I was. I reached up and grasped the elastic waistband of her underwear. Isabel flinched again. I glanced up at her, and saw her boobs moving in and out dramatically as she took heavy breaths and looked down at me, over her nipples.\n\nSlowly I began to slide down her panties. I saw a trail of dark pubic hair begin to peek out as they lowered; not thick but nicely trimmed, and laying flat against her delicate skin. As the waistband moved completely over her vulva, I found myself face to face with Isabel's pussy. I felt my penis begin to lengthen and grow between my legs, but it was out of sight from the rest of the group. Just where her pubic hair began to fade away, her outer labia peeked out. I gazed at the soft, tender, pinkish lips of her pussy and felt myself throbbing, but I no longer cared. My back was still facing the rest of the group, anyway.\n\nI looked up at Isabel as I finished sliding her panties down to her feet, and allowed her to step out of them. She stared down at me anxiously, before spotting my massive erection, which bobbed between my legs. A huge look of surprise broke out on her face and she looked to the side, embarrassed. When she looked back, I whispered, \"Sorry!\"\n\n\"That's okay,\" she whispered back, grinning.\n\nAs I stood back up, I hid my erection by keeping it close to her body. She eyed it with fascination. All day long she'd been looking at my flaccid penis, but now there it was, an order of magnitude bigger; thick, long, and rock hard. Fortunately, I quickly managed to get it under control, and only had to pause for a few moments before I could safely turn back around. Isabel tensed up as I stepped aside and let her face the whole group, exposing her nude body in front of them.\n\nEveryone was silent, having watched me calmly, and respectfully undress her in front of everyone, until Darrell finally spoke up, \"Daaamn.\" The excitement and giggles followed from the rest of the group, as they congratulated her on going through with it. Isabel gave a self-conscious laugh and thanked them.\n\nI smiled at her proudly, silently mouthing, \"Good job.\" She smiled back. Soon the excitement died down and we were all able to eat and return to work.\n\nAn hour passed and I needed to get up for a stretch. I wandered off to get some water and found Isabel struggling with the office printer along the way. I stopped and gazed at her tight, clenched buttocks as she stood on her tiptoes, leaning over the top of the massive machine. As if sensing my presence, she glanced over her shoulder and did a double-take. She quickly dropped to her feet again.\n\n\"Oh! Hi Taylor,\" she said, spinning around. She offered me a painfully shy smile.\n\n\"Hi Isabel, what's up?\"\n\n\"This thing is jammed again,\" she sighed.\n\n\"Want me to get Ariel?\" I asked.\n\n\"She's not at her desk.\"\n\n\"Hmm, okay. I can try to help.\"\n\nAs I approached the machine, Isabel turned back around and leaned over the printer again. She grabbed a piece of paper that appeared to be stuck and began tugging. I came up behind her to see. Looking over her shoulder, I couldn't help but notice Isabel's firm boobies jerking about as she pulled at the paper in frustration.\n\n\"Here, let me try,\" I said.\n\nIsabel let go of the paper and I reached over her to grab it. I could see her tense up as my pelvis moved up against her bottom. I felt the warmth of her body as we grew closer. I gave the paper a tug but it didn't budge. Then another. As I shifted my weight, I felt my naked body brushing up against hers. My penis began to swell slightly as it brushed in between her soft butt cheeks, tickled by a fine peach fuzz.\n\nI saw her suddenly smile in surprise then quickly try to suppress it. There was an electric tingle that seemed to run between us. Finally, the paper sprang free, the force of which caused my cock to slap against her butt. I yanked the paper away and handed it to her. She accepted it, visibly trembling.\n\n\"Th-thanks...\" she said, clearly flustered.\n\n\"No problem!\" I said with a smile. She turned and watched me walk away, still hugging the paper to her chest.\n\nSuddenly, she said, \"Wait.\"\n\nI turned around and said, \"What's up?\" She bit her lip and walked toward me.\n\n\"Um... I just wanted to say... thank you. For earlier.\"\n\n\"For what?\"\n\n\"I dunno, for making it easier to undress in front of everyone. I was afraid I would be mortified like Andrew was. But I felt safer with you there.\" She smiled.\n\n\"Oh... no problem Isabel.\" I paused for a moment. \"I'm... happy you decided to do it. I think it's sorta freeing, after the initial shock. And also, you have an amazing body...\" I could hear my voice quivering. \"It's exciting to see you show it off.\"\n\nShe grinned. \"Thanks. You... look good too,\" she said, choosing her words carefully.\n\nI somehow made it to the bathroom after that, despite the fact that my mind was spinning. I stood in there, staring at myself in the mirror in disbelief, high on the exchange I just had with Isabel, high on seeing her naked, high on everything.\n\n\"This is a perfect day,\" I thought.\n\nBut I had no idea what tomorrow had in store.\n\n***\n\nDay 4\n\nI walked out of the hallway bathroom naked, my backpack slung over my shoulder as usual. This time I was ready for Rachel and her annoyingly potent, feminine charms.\n\n\"One plus one is two. Two plus two is four. Four plus four is eight,\" I chanted in my head, as I opened the office door. Doing simple math in my head, I had decided, required just enough internal focus and attention that it would get me past her, and her naked body, without a repeat of the horribly embarrassing situation the previous morning. Through the doors I went. I glanced to my left as Rachel turned to see me. Her face lit up. \"No, stop, don't look at those boobies!\" I told myself frantically. \"Eight plus eight is sixteen!\"\n\n\"Good morning, Taylor!\" she exclaimed.\n\n\"Good morning, Rachel,\" I said, before returning to my chant. I paused for just a moment, to receive her greeting, and then started off into the room.\n\n\"What? No soldier salute this morning?\" she laughed.\n\n\"I'm not listening!\" I said, blocking my ears.\n\n\"Wait, wait! I had a great idea, though!\" she called after me, sarcastically, \"I saved all these elastic bands. I was gonna shoot them at your erection and see how many I can get it to catch.\"\n\n\"Stop it! Yesterday never happened!\" I laughed. When I reached my desk, I realized Alyshah and Isabel probably heard everything.\n\n\"What was that all about?\" Alyshah asked.\n\n\"Oh, uh, nothing,\" I said. \"Good morning!\"\n\n\"Good morning!\" replied Alyshah and Isabel.\n\nThe two of them sat there side by side, naked as the day they were born, increasingly unashamed to have their boobs on display. The thrill of my encounter with Isabel the day before came rushing back, as I smiled at her and she smiled back. I lingered for a few minutes, giving her plenty of time to check out my body again, before settling in at my desk. I wondered if I was becoming an exhibitionist.\n\nIt was amazing to me how quickly everything was changing. Little by little the anxiety of being naked was going away. We were becoming increasingly familiar with every intimate inch of each other's bodies. We even began engaging in playful physical contact. For example, high fives were replaced with a slap on the butt, or an ass-to-ass bump.\n\nBest of all were the hugs. No one hugged before, but now it was the de-facto reaction to positive news. It started when I delivered some app user feedback to Yuke, who promptly exclaimed, \"Oh, that's awesome!\" before throwing her arms around me and squeezing me tight. I felt her boobs squish against my bare chest and felt as if I was in heaven. Her nipples pressed into my flesh, my groin pressed against her thigh, and it was an amazing sensation. As soon as the other guys saw this, they started hugging her, and the other girls started hugging us. The excitement at seeing each other's nude bodies was quickly turning into a temptation to secretly touch and feel each other.\n\nLater that morning I reached a good point to pause my work for a bathroom break. \"Gotta hit the john,\" I said, passing Yuke.\n\n\"Don't fall in!\" she joked.\n\nI rounded our desks and made my way through the office, strategically past Rachel without making any visual contact, and into the hallway. When I swung open the bathroom door and stepped inside, I thought I heard the tail end of a soft laugh. I noticed one of the stall doors was closed, but I didn't think anything of it.\n\nApproaching the urinal, I thought I heard something again. This time, I got a clearer sense that it was female, which didn't make any sense. I grabbed my penis and held it in front of me, ready to urinate, when there was another sound. I caught just a couple words: \"... hear us.\" Then there was some whispering. I froze and realized that something was indeed going on inside the men's room stall. I remained as quiet as I could, listening carefully, curious about what was going on.\n\nAfter a few moments, the whispering stopped, and I heard a quiet thumping sound. A moment later there was a soft, female moan. Then a louder one, followed by suppressed laughter.\n\n\"Someone's having sex in the bathroom!\" I thought to myself. Instantly, I became aroused. I sprouted a boner that made it immediately impossible to take the piss that I so badly wanted to, but I was too curious to care. \"Who wasn't in the office?\" I asked myself, trying to remember who wasn't at their desk when I left. The thumping became louder. I backed away from the urinal a little, inching closer to the stall, but not close enough for it to become apparent. I could hear in more detail the sound of two bodies slapping together. The whispers were now audible enough to make out.\n\n\"Oh fuck,\" I heard someone say. It was Tim. I heard the thumping become faster, and could just barely make out a slight, wet sucking sound that could only have been Tim's penis entering Ariel as she rode him. \"That feels so good,\" he softly moaned.\n\n\"Holy shit,\" I thought to myself, \"I'm listening to Tim and Ariel fucking in the bathroom!\" My imagination provided a visual to go with what I was hearing: Tim sitting on the toilet seat, while Ariel was straddled across him, her legs splayed out to either side. She was bouncing up and down on his cock, while he cupped and groped at her bouncing boobs. \"Now I'm becoming a voyeur as well!\" I thought.\n\nI hurried back to the urinal and did my best to ignore what was going on so that my erection would go down. I finally managed to pee, wash up, and rushed out of there. I hurried back into the office and went straight to the water cooler for a drink, to process what just happened. Alexis was there. She knew something was up when I frantically grabbed some water and guzzled it down.\n\n\"Wow, you're thirsty,\" she remarked.\n\n\"You don't know the half of it...\"\n\n\"What happened?\"\n\n\"You won't believe it.\"\n\n\"Try me.\"\n\n\"I just went to the bathroom...\"\n\n\"Okay... I'm not sure I need the details on that.\"\n\n\"And... uh... I think Tim and Ariel are having sex in one of the men's stalls.\"\n\n\"What!\" Ariel said aloud, before realizing her mistake. \"What?\" she repeated, in a quieter tone.\n\n\"Yeah. I heard them in there. They're going at it right now.\"\n\n\"Seriously?\" she said, breaking out into a huge grin. She paused for a second. \"Show me?\"\n\n\"Haha, really?\"\n\n\"Yeah. Is there anyone else in the men's room?\"\n\n\"Nope.\"\n\n\"Okay, let's go. I gotta see this!\"\n\nI reluctantly led Alexis into the hall. Rachel perked up when she saw us exit together, knowing that I had just returned a moment ago. I opened the door to the men's room a crack and peeked in. The stall was still closed, so we both slipped inside the men's room. \"There,\" I mouthed silently to Alexis, pointing to the stall in question. We could both hear the grinding and slapping of bodies coming from inside, along with the occasional low moan.\n\nAlexis grinned again and tiptoed quietly toward the stall. I could see how taut and erect her nipples were, and how tense her body had become with sexual excitement, as we listened to the sounds coming from within. She stopped in front of the stall next to the one they were in, leaned over, and put her ear to the one they occupied. After a few moments she pulled away, and turned to face me.\n\n\"Woooow,\" she mouthed at me, opening her mouth wide.\n\nI smiled back at her. She motioned toward the stall, then took her pointer finger and repeatedly thrust it through a circle she made with her other hand, indicating that she could clearly hear them having sex. She leaned back over to their stall and listened for a little while. Occasionally, she turned toward me and mouthed comments such as, \"Oh my god.\" When she had her fill, she tiptoed back toward me and motioned toward the exit. We stepped outside together and we both began letting out the laughter she had bottled up while we were inside.\n\n\"I could totally hear everything!\" she exclaimed.\n\n\"Right?\"\n\n\"Ariel sounded so wet!\" I gave a startled laugh, surprised to hear Alexis put it so bluntly.\n\n\"Wow, you could hear that well?\"\n\n\"Yeah, when I put my ear to the door, I could totally hear him pounding her pussy!\"\n\nI realized I shouldn't be so shocked hearing Alexis talk like this. After all, she was generally the \"naughty\" one of the group. We laughed a bit more, then I suggested we go back into the office. Curiosity was getting the better of Rachel and she immediately said, \"What's going on?\" when we entered. I continued toward my desk, but Alexis headed straight to Rachel, brimming with excitement to share the latest gossip. From afar I saw Rachel's jaw drop as Alexis apparently told her what we'd witnessed. Minutes later, I looked up again and saw Alexis at Alyshah's desk, telling her and Isabel what had happened.\n\n\"Oh boy, there goes the gossip machine,\" I thought. I knew it was only a matter of minutes until the whole office knew exactly what was going on.\n\nAbout ten minutes later, the office door opened and Ariel strolled in like nothing had happened. She was blissfully unaware that the whole office knew. She returned to her seat, and one minute later Tim walked in. Everyone else was exchanging secret glances across the room.",
        "Together we all absorbed what had happened; that thing that we all had lurking in the back of our minds, wondering if it would happen. Indeed, the office nudity had finally led to someone having actual sex. I wasn't sure what that really meant. I reminded myself that Tim and Ariel were already sort of a couple, so it wasn't unusual. But I couldn't help but wonder... what if?\n\nAs the day wore on, the matter didn't get much discussion, but I could see clearly that the shocking idea of sex at the office was burning in everyone's mind.\n\nAt around four thirty, Alexis made her way across the office groaning. She stopped in the center of the room, threw her arms over her head, and slumped down, sticking her ass out to the side. \"You guuuys...\" she moaned, \"I'm so done with work today. Does anyone want to go to a bar afterward?\"\n\n\"Yeah!\" shouted Darrell.\n\n\"Which one?\" asked Ryan.\n\nAlyshah chimed in, saying with a pout, \"Isabel and I might have to stay a little late. We've got a deadline tomorrow.\"\n\n\"Oh no!\" said Alexis. She grew thoughtful for a moment. \"Well, I could always bring pizza and you-know-what.\" You-know-what was code word for beer, which we technically weren't allowed to bring into the office, but it happened occasionally anyway once Karen left for the day.\n\n\"Yes! Keep us company!\" said Alyshah, getting excited.\n\n\"You guys in?\" Alexis asked Darrell and Ryan.\n\n\"Yes!\" they said.\n\n\"Awesome! Anyone that wants to hang out late, let me know,\" Alexis concluded.\n\n\"I've got a thing tonight,\" said Ariel.\n\n\"Yeah, me too,\" added Tim.\n\n\"Bummer,\" said Alexis.\n\nRachel perked up once she heard about pizza, and offered to stay later, as did Yuke, so I agreed as well. A half hour later, we all said goodbye to Karen, Ariel, and Tim, as well as Andrew who was too anti-social to hang out anyway. Within an instant, Alexis had cranked up the music on her computer, and it became a small office party.\n\nI felt a sudden smack against my genitals, and looked down to see a rubber band hit the floor. Rachel smirked at me she walked by.\n\n\"Yeah, yeah, yeah,\" I said, rolling my eyes.\n\n\"Huh?\" said Yuke, who was standing next to me.\n\n\"Nothing,\" I said, \"Private joke.\" She laughed and turned toward Rachel.\n\n\"What?\"\n\n\"Taylor's just embarrassed because he had a huge, erect penis when he saw me naked for the first time yesterday,\" Rachel giggled.\n\nYuke burst out laughing. \"Oh, really...\" she said, grinning at me. \"How come I didn't get a greeting like that?\"\n\n\"Argh, you guys are never gonna let me live that down,\" I replied.\n\n\"Nope,\" they both concluded, smiling at one another.\n\nEventually Alexis burst back into the office holding two large pizzas and her backpack. She removed her clothes again and swapped them with two six-packs of beer hidden in her backpack. Everyone cheered and gathered around, tearing slices out of the pizzas and popping open beer cans. Before long everyone was was happily buzzed and full of pizza. The girls started dancing together, sarcastically grinding their naked bodies together to the music while the guys stood around drooling.\n\nWe carried on for a while until finally Alyshah stood up from her desk, raised her arms in the air victoriously, and announced, \"Done!-- Beer me!\" She and Isabel joined our party and were soon as goofy as the rest of us.\n\nAlexis raised her beer can and toasted the room. \"You guys-- a toast!\" Everyone raised their beer. \"To being totally - fucking - naked at the office!\" she shouted. We all toasted her back, laughing.\n\n\"Thanks to you. You started it!\" said Darrell.\n\n\"Haha yeah. You'd all still be cowards if I wasn't here,\" she replied.\n\n\"That first day though. That was some crazy shit,\" he added.\n\n\"Yeah... I almost lost it when I ran into Taylor naked in the hall.\" She took another gulp of beer. \"Hey, that reminds me. Can I address the elephant in the room?\"\n\n\"What's that?\" asked Yuke.\n\n\"I mean... is it just me? Or... is anyone else fucking horny as shit?\" Alexis asked everyone. The whole group burst out laughing.\n\n\"It's so true. Even that first night, when I went to bed and closed my eyes... all I could see were your guys' penises!\" Alyshah chuckled. All the girls laughed and nodded at her knowingly. It was funny to see everyone finally loosening up about the experience.\n\n\"You think it was any easier for us?\" said Darrell. \"I mean...\" He then gestured to their boobs, and they all laughed. \"Everywhere I look, it's just... boobies, boobies, and more boobies!\" he exclaimed.\n\n\"Seriously,\" said Alexis, \"I dunno what to fucking do. I feel like... we need to have an orgy or something!\" she joked. We all laughed again.\n\n\"Oh yeah, I'm sure that's exactly what Karen had in mind,\" chuckled Rachel.\n\nAlyshah, who was almost as drunk as Alexis, blurted out, \"I'd totally take the bill for everyone's dinner if you gave someone a blow job-- right now.\"\n\nI saw Rachel and Isabel both drop their jaws. Isabel said, \"Oh my god! Alyshah!\" as everyone lost it, falling over each other with laughter.\n\n\"I'm serious!\" said Alyshah.\n\n\"Don't dare me unless you really mean it!\" snapped Alexis.\n\n\"Ha! Well, I dared Ryan the day we took our clothes off, and that turned out to be fun...\" she replied.\n\nRyan was sitting on the rug with a beer next to Darrell. He rolled his eyes. Alexis smirked at him, then said, \"Okay, fine. Stand up dude.\"\n\n\"Ha, why?\" he said.\n\n\"Just stand up!\"\n\n\"You gotta tell me why.\"\n\n\"Cuz I'm gonna suck your dick!\" she laughed.\n\n\"Yoooo!\" Darrell shouted, jumping to his feet. Everyone gawked at Alexis. Ryan looked around the room in bewilderment.\n\n\"Um... Are you serious?\" he said.\n\n\"Yup!\" she replied.\n\n\"Uh...\" Ryan said, staring at her with a dumbfounded look.\n\n\"Oh my god this is too funny,\" Alyshah said, covering her mouth.\n\n\"Come on!\" said Alexis, gesturing to him to get up. Ryan slowly rose to his feet in disbelief. The rest of us exchanged wide-eyed looks, amazed at what was happening. \"Make yourself hard,\" Alexis instructed him, as she hurried off to the table to set down her beer. He looked back and forth between Alexis and the rest of us, visibly terrified. When Alexis returned, Ryan gulped and slowly reached down between his legs. He grasped his flaccid penis and began to gently stroke it.\n\n\"Oh my god,\" said Isabel, turning red. Rachel turned away in embarrassment and started laughing, but quickly returned to watch.\n\nRyan's penis began to grow in front of everyone's eyes, until it lengthened into a massive erection. He let go and it bounced into place; stiff and fully extended from his body. The girls gazed at it in disbelief. Alexis excitedly got down on her knees in front of Ryan and grabbed his cock. He took a sudden inhalation as her fingers wrapped around his shaft. She gave him a few strokes and then leaned forward and took Ryan's penis in her mouth.\n\nWe all reacted with a mixture of amusement and shock, as Alexis boldly sucked Ryan's cock in front of everyone. Her head moved back and forth with precision as we watched his rock hard member move in and out of her mouth, coated with a thin layer of her saliva. She sucked hungrily, filling the room with loud, wet smacking sounds. Ryan's head fell back and his eyes began to roll in his head as he groaned.\n\n\"That's so fucking hot!\" Alyshah exclaimed, as we all watched Alexis working Ryan's cock like an expert. \"I thought I was horny before, but NOW I'm fucking horny!\"\n\nRyan's cock popped out of Alexis' mouth and bounced in the air in front of her face. A thin trail of saliva traveled from his throbbing head to her lips and then broke away as she turned her head and laughed at Alyshah's admission.\n\n\"Oh man. Horny Alyshah. That could be dangerous...\" I said, smirking at her. She grinned at me, and then it turned into a funny look.\n\n\"What?\" I said. She continued to stare at me, with a glint in her eye.\n\n\"Fuck it. Come here,\" Alyshah said, after a long pause. She grabbed my arm.\n\n\"Huh? Where are we going?\"\n\n\"I've always wanted to do something,\" she replied. Alyshah led me into the conference room and stood me by the table. \"Wait right here,\" she added, then hurried out of the room.\n\nThe conference room was enclosed with glass windows, so I stared out at the rest of the group with a confused expression. They all appeared to be laughing at me. Alyshah was running to the snack counter near the water cooler and back. I soon realized what she was getting. Someone had once left a small jar of free condoms there. There was a running joke about how they were vanishing, albeit very slowly. She slammed the jar down on the table next to the empty pizza boxes, yanked one out, and ran back to the conference room, past a crowd of my stunned coworkers.\n\nAlyshah raced back into the conference room, thrust the condom forward, and said, \"Here, slip this on!\"\n\n\"W-what?\" I said, shocked.\n\n\"Put on the condom! I'll let you fuck me on the conference table. I don't care if anyone watches,\" she laughed.\n\n\"Whooooa,\" I said, \"Seriously?\"\n\n\"Yeah.\"\n\nAlyshah hoisted herself up onto the table, and then dropped her ass onto it with a fleshy smack. I glanced out into the office again. The rest of the group were looking back and forth between the two of us in the conference room, and Alexis who was now down on her knees again, giving Darrell a turn to have his dick sucked.\n\n\"Whaaat the fuck is going on?!\" I said.\n\n\"Hurry up!\" squealed Alyshah.\n\nI relented, giving into the sexual excitement I was feeling, and tore open the condom wrapper. There was simply no way I could refuse this beautiful girl begging me to fuck her. Alyshah threw herself back onto the table and flung her legs to the side. I froze and looked down. There was Alyshah spreading her legs wide open, giving me a clear view of her smooth, wet pussy. The moment I saw it, my cock sprang to life and began throbbing. I scrambled to slip the condom over my penis and then approached Alyshah.\n\n\"I can't believe we're doing this!\" I said.\n\n\"Me neither!\" she laughed.\n\nAlyshah's eyes widened as I positioned myself between her legs, then grabbed my hard-on to stop it from swinging about. I reached out with my other hand, and rubbed my thumb over her labia, separating her lips and getting a glimpse of the soft, pink flesh within. I pushed my pelvis forward and began to insert my penis. Inch by inch it sunk inside her, as her pussy stretched and opened wide to accept the full length of my thick cock.\n\nI heard Alyshah gasp and looked up. She was staring at me with a half amused, half startled expression. \"Hoooly shit, that feels good!\" she groaned, momentarily lost in an explosion of pleasure.\n\n\"Oh my god, you're so tight,\" I moaned, grinding my cock slowly inside and out. It emerged each time more wet and slick than it had been before. She frantically looked down to see it entering her, then threw her head back and laughed.\n\n\"We're totally having sex in the conference room!\" she blurted out, thoroughly mystified. I chuckled, then began thrusting a little faster. She grabbed my arms and rocked her hips frantically, in sync with my thrusts, gazing at me with an intense, wild look. We fucked faster and faster, laughing excitedly at the shock and surprise of this unexpected development.\n\n\"Oh my god, you should see your face!\" she exclaimed.\n\n\"Huh?\" I said, between heavy breaths.\n\n\"The way you're gazing at my titties!\" It was true, I was fascinated by the way they swung in circles as our bodies pounded together. \"Just don't drool on me!\" she joked.\n\nWe went on fucking missionary style for a while, until she begged me to flip her over. I pulled my cock out of Alyshah and within a few moments she was on all fours, sticking her round, wobbling ass in my direction. I grasped it and gave it a tight squeeze.\n\n\"Ngh!\" she exclaimed. Then she looked back at me over her shoulder. \"Now fuck me doggy style!\"\n\nI spread the cheeks of her ass and saw the damp, wet lips of her pussy separating, as if inviting me back inside. I pushed my cock deep within and then began pounding her once again. Her soft buttocks cushioned my pelvis as I pummeled it over and over. With each blow, it quivered like gelatin. I gave it a few playful smacks, wanting to see even more movement.\n\n\"Oh fuck! Yes!\" she cried out. I thrust into her faster and faster, amazed at the suction of her tight pussy, which clung to my cock with an incredible viscosity. \"Fuck, fuck!\" she wailed after some time. \"I'm gonna come!\"\n\nI frantically grinded against her, glancing momentarily through the windows. Isabel and Rachel were staring at us, stunned and half-smiling. I looked back down at Alyshah who was in the throes of unbearable pleasure, gritting her teeth as her boobs swung forward and back beneath her chest.\n\n\"I'm coming-- I'm coming!\" she groaned as her body suddenly tensed up. I felt her muscles contracting as the spasms ripped through her body and she clenched tightly around my cock. She rocked her hips back and forth slowly, as if squeezing her body when each wave of the orgasm struck. When it finally subsided, she simply repeated, \"Oh my god,\" over and over again, collapsing onto the surface of the table.\n\nMy cock slipped smoothly out of her pussy, coated with juices that had also begun to drip onto the tabletop. She rolled onto her back and gazed up at the ceiling. Her breasts heaved up and down as she tried to catch her breath. Then a wide smile broke out on her face. I put my hands on the table and began heaving with exhaustion. We smiled at each other.\n\n\"That was amaaazing,\" she cooed.\n\n\"Yeah it was,\" I said between breaths.\n\n\"Wow... I'm like... gonna just lie here for a minute or two...\" she muttered.\n\n\"Okay,\" I chuckled. \"I'm gonna grab another drink.\"\n\nI stumbled out of the conference room, back toward the group. My cock was still engorged and swinging in front of me, covered in Alyshah's secretions, but I simply didn't care anymore. When I reached the group, Ryan and Yuke began to clap, and the whole group started giggling. Except for Darrell, who had Alexis laid out on the floor. She was busy receiving blows from his long, thick cock, and the attention soon turned back to their playful fucking on the carpet.\n\nI noticed Rachel taking a particular interest in me since I returned from an unexpected display of my sexual desires. I had taken only two or three sips of my beer before she wandered over to my side.\n\n\"Hey...\" she said.\n\n\"Hey Rachel,\" I replied.\n\n\"Can I... um... see you for a sec?\"\n\n\"Sure.\"\n\nShe grabbed my hand and led me through the room to her desk, which was far enough away from the group to offer us some privacy. Rachel seemed nervous and bit her nails.\n\n\"What's up?\" I asked, confused.\n\n\"Well... I was just wondering-- what did you think when you saw me the other day?\"\n\n\"When?\"\n\n\"When you first came in... and saw me without any clothes on.\"\n\n\"Oh, well... you saw my reaction,\" I laughed.\n\nShe giggled, then replied, \"I know. What I meant was, what did you really think about my body?\"\n\n\"Um... I guess... I just saw your boobs at first, and thought, 'Whoa, Rachel's naked!' And then you turned...\" I gulped, remembering my reaction in detail. \"And I saw them moving.\"\n\nShe smirked. \"You mean, like this?\" she said. Rachel gently twisted her torso from side to side, letting her boobs jiggle loosely in front of me.\n\n\"Geez... yeah,\" I said, mesmerized. My hard-on came back in full force. It was clear now that she was trying to turn me on. \"And... uh... then I obviously snuck a peek down below.\"\n\n\"Did you like what you saw?\" she asked innocently, touching my arm.\n\nI felt myself starting to tremble a little. \"Yeah... I could just see a little bit of pubic hair at first, but... it was really sexy. You've got an amazing body.\"\n\nShe was grinning ear to ear. Rachel looked into my eyes and said, bluntly, \"Did you want to fuck me, Taylor?\"\n\nI was taken aback. \"Err... like I said, you saw my boner,\" I laughed. \"I was so embarrassed.\"\n\n\"Oh my god, don't be! I felt my pussy tingling when I saw how hard you were,\" she admitted, \"You made me wet on the spot. I wanted to hit that so hard!\"\n\n\"Really?\"\n\n\"Hell yeah!\" She paused for a second, then asked, \"Can I tell you something?\"\n\n\"Sure.\"\n\n\"I've fantasized about fucking you so many times. You have no idea...\" She gave me a long, desperate stare, with a more serious expression than I was used to with Rachel. I was increasingly turned on, seeing how badly she wanted me.\n\nI dared to ask, \"Wow. Do you ever masturbate, while thinking about me?\"\n\n\"Yeah! You have no idea how many times you've made me squirt!\" She paused, embarrassed. \"I can't believe I'm telling you this!\"\n\nI chuckled. \"It's okay. I guess... you can have it it now, if you want. My cock, I mean,\" I said. Somehow I was still nervous, despite how overtly she demonstrated her desire for me.\n\nRachel's eyes lit up. \"Fuck, yeah!\" she exclaimed, excitedly. She wrapped her arms around me, adding, \"You can have me all you want too.\" She leaned in close, and whispered, \"My tight, wet pussy is all for you.\" I thought it was adorable how hard she was working to excite me and make me want her, even though I already did.\n\nI realized I still had Alyshah's scent all over me, and said, \"Um. I still smell like Alyshah. Is that okay?\" The whole orgy thing was admittedly new to me. I didn't know what the etiquette was. Was there even an etiquette?\n\n\"That's okay. I'll just have to make you smell like me now,\" she said, with a wink.\n\nRachel abruptly pushed me down onto her office chair, then threw one leg over me and sat down on my thighs. I felt her warm, fleshy butt cheeks pressing against my legs. She smiled at me and then immediately looked down at my cock, standing upright and at attention. She grasped it in her hand and gave it a gentle squeeze, feeling it surge in her hand.\n\nWe exchanged wordless glances at each other as she playfully tugged it a few times. She seemed to be trying to savor the moment. Finally, she raised her hips slightly and began to position my cock between her legs. Rachel shifted forward, dangling her breasts in front of my face, then lowered herself onto my lap. As she sunk down, my cock sunk deep inside her, devoured by her light mass of pubic hair. The weight of her body forced it to squeeze through her slick, warm canal, until her ass rested against my pelvis and we were as close as two people could be.\n\nRachel moaned and pressed her breasts forward. I buried myself in her boobs, rubbing them all over my face, then taking each nipple in my mouth at a time.\n\n\"Mmmm,\" she whimpered, her voice quivering with emotion. She then began to raise and lower her hips. Rachel moved up and down faster and faster, as we both watched my cock penetrate her hairy crotch like a piston. \"Oh god, Taylor...\" she mumbled, \"I want you so bad...\" She bounced up and down enthusiastically and I watched her flesh jiggle excitedly as we fucked. Her breasts lurched and jerked about, occasionally tickling my chin or lips with her erect nipples. Soon she was making a juicy, squelching sound.\n\n\"I've never been this wet in my life!\" she exclaimed, \"Listen to what you do to my pussy!\" She began adding a rocking movement to the mix as she rode me, as if trying to milk my cock with her body. The sound grew louder and I laughed. \"Mghhh! You're making me fucking squeak!\" she moaned.\n\nI was grinning ear to ear, enormously turned on by her aggression and enthusiasm. \"You're totally out of your mind!\" I chuckled.\n\n\"I wasn't kidding how badly I've wanted to fuck you!\" she said, between heavy breaths. After a moment, she smirked and added, \"Can you still smell her? Alyshah...\"\n\n\"No. Only you!\" I exclaimed. It was true, Rachel was so wet and aroused that all I could smell was the beautiful, feminine odor of her tight, soaking pussy. All I could hear was the soft sucking sound as it squeezed and massaged my swollen cock. All I could see was the frantic bouncing of her large boobs as she rode me, grinning ear to ear, as if living out a dream.",
        "\"I'm fucking dripping, look!\" She gestured to her juices which were running the length of my penis. For a moment, she raised her body up, then ran her fingers along my glistening shaft, then rubbed them together. They were coated in a thick, sticky film. \"Here, taste me!\" she said. Rachel thrust her messy fingers forward and stuffed them in my mouth. I sucked and licked them, tasting her sweet cum until they were clean.\n\n\"Oh god,\" I groaned, \"That's so good, Rachel. You taste amazing...\"\n\n\"Do you want more?\" she asked, as if begging me to say yes. But I absolutely wanted more.\n\n\"I want all of it,\" I said. She shivered when she heard me say this, almost as if my words itself made her orgasm. She looked at me with desperation, like she had an itch that she badly wanted me to scratch. Rachel threw herself off me and pushed the contents of her desk out of the way. She lay down in their place and stared at me.\n\n\"Taylor, please eat my pussy! I want to feel your tongue inside me-- make me come some more!\" she begged. Her nostrils flared and she gave me a look of aggressive, sexual craving.\n\nI threw myself onto my knees as she flung her knees apart. I reached forward with both hands and spread her open. The delicate lips of her pussy, covered with a soft, fine layer of dark brown hair, separated and gave way to her gaping, pink hole. I stretched my tongue out as far as it could go and gave her a long, slow lick, until her creaminess coated my tongue.\n\n\"Ohhh fuck!\" she wailed.\n\nI circled her pussy, teasing every fold. The little nub of her clitoris was pronounced and hard, and could easily be manipulated as I tickled and sucked it, feeling Rachel convulse with pleasure around me.\n\n\"Oh god, yes-- ngh!\" she continued to groan.\n\nI plunged my tongue inside her canal, penetrating the depths of her wild, aching pleasure. She could barely stand it anymore. Rachel was twitching and jerking wildly, unable to speak any more. I tasted a warm flood as she screamed and bucked her hips. Wave after wave of spasms struck her body, squirting on my tongue and lips until her juices ran completely down over my chin.\n\n\"Hooooly shit,\" Rachel finally managed to sputter out, as she began to regain her senses. \"I've never had an orgasm that strong!\" she exclaimed, as if awestruck by some superhuman new ability her body had developed. Rachel collapsed backward on her desk, her legs still spread to the side, her pussy still wet and leaking, and the heavy mounds of her breasts heaving upon her chest. She looked at me incredulously, \"How the fuck did you do that?!\" she giggled.\n\nI grinned and said, \"Yeah that was pretty good. But it's the end of a long work day. You should see me on a good day!\" I teased.\n\nRachel burst out laughing. \"Jesus Christ, I don't know if I'd survive!\" she exclaimed.\n\nI sat beside Rachel as she recovered. We caressed each other and enjoyed the electric sensation of our fingers exploring each other's intensely aroused bodies, until Alexis hurried by.\n\n\"You guuuuys. Stop hiding from the rest of us! Join the party!\" she said. Alexis grabbed my arm and tugged me off the desk. She turned to Rachel and grinned. \"You can't have him all to yourself!\" They both laughed as Alexis whisked me off toward the others.\n\nWhen I rejoined the group, I realized it had become a full-on orgy. Days of pent-up sexual frustration seeing our coworkers naked had finally erupted into a wild, horny, alcohol-fueled sex party. Yuke was on all fours, grunting as Darrell grasped her ass and repeatedly forced his long, thick cock inside her from behind. She looked up suddenly, as if excited that I rejoined the group. Ryan and Alyshah were rolling around next to them, kissing frantically, as their hips jerked and smacked together.\n\nAlexis gazed down at them all, proudly. She reached down and began to rub her clit, moaning softly. She said, \"This is so fucking hot, I've always wanted to do this!\"\n\nI noticed Isabel had returned to her desk. She kept peeking curiously over at her coworkers as they writhed and moaned together, smirking and enjoying what she saw. When she noticed that I was watching her, she quickly grew embarrassed and looked back at her computer screen.\n\n\"What's up with Isabel?\" I asked Alexis.\n\n\"I dunno! She needs to get in on this,\" she replied, distracted by the scene in front of her.\n\n\"I'll go see,\" I said.\n\nI went and sat next to Isabel, in Alyshah's chair. She smiled and seemed happy that I had come to join her.\n\n\"Hey Isabel! How come you're sitting over here?\" I asked.\n\n\"Oh, I dunno. Everyone started having sex, and I was like... uh... okay... So I just sat down and let them do their thing.\" She giggled.\n\nI smiled. \"You don't want to join in?\"\n\nShe looked at me with her usual shyness. Isabel said, \"Well... I wasn't sure if...\" She didn't finish her sentence.\n\nI couldn't help but look up and down at Isabel, shrinking nervously in her chair. I gazed at her smooth, olive-toned skin, and at her perky, chocolate-brown nipples, accenting Isabel's full breasts. I couldn't help but ask, \"Isn't there anyone you want to have sex with?\" I immediately began to panic. I had a burning desire to know, but didn't want to scare her away.\n\nIsabel smirked and looked down nervously. \"Um... maybe... I guess.\"\n\n\"So you should tell them! If you want to feel close to someone, don't miss the chance, \" I said, compassionately. I hoped that someone was me. I started getting up. We smiled at each other, and then I began to step away from her desk.\n\n\"Wait,\" she said, softly.\n\n\"What's up?\"\n\n\"Um... do you... did you want to... do anything with me?\" she asked. I could tell how difficult it was for her to reveal her desires, due to her painful shyness, but this was all I needed to hear.\n\n\"Like what?\" I smirked.\n\nShe laughed, then exhaled a great deal of tension. I returned to sit beside her. Isabel looked up into my eyes nervously, biting her lip. Then she reached forward and hesitantly touched my chest. She ran her fingers over my muscles, quietly exploring the unique features of every inch of my skin. \"Now's my chance,\" I thought. So I reached forward and gently caressed one of her breasts. Isabel flinched when she felt my touch, but soon calmed down.\n\nI gently ran my fingers over her pronounced, sensitive nipple. It hardened at my touch, as if it were seizing up. Then I ran my fingers over her soft skin, feeling the smooth fluidity of her breast as it responded to my touch. I was enamored by their beautiful, outward slope and their subtle wiggle as she reacted to my stroking. I felt my cock lengthen and harden, tingling with excitement as we explored each other's chests.\n\n\"Tell me what you want,\" I whispered to her. I saw Isabel's lower lip quivering.\n\n\"I-- uh...\" she began, mildly frustrated with herself.\n\n\"You can say it, don't be afraid Isabel,\" I reassured her. I saw her glance down at my erect penis, as if accidentally revealing her secret thoughts. Still, she couldn't bring herself to say anything. \"You can touch it, if you like, it's okay,\" I said.\n\nShe looked up at me with surprise, realizing that I'd caught her peeking. Her hand trembled as she reached forward and softly wrapped her fingers around my hard shaft. I watched her eyes, and found in them a look of absolute fascination breaking through a wall of fear. Her hand traveled up and down along the shaft, squeezing gently, observing the full extent of my arousal. She ran her fingers over my swollen head, and watched as my penis stiffly bobbed and swayed at her touch.\n\nFinally she pulled her hand away and grinned at me. She took a deep breath. \"I--\" she began, before taking a second breath. \"I really... like your penis,\" she said. I smiled at her, then I leaned forward and wrapped my arms around her. I felt Isabel melting in my arms. She lowered her head and nuzzled her face into my neck as our warm bodies pressed tightly together. I sat there thinking about how long I'd wanted to feel this way with her.\n\nAs much as I wanted to fuck Isabel, more than anything I mainly just wanted to give her pleasure. I wanted to adore her. I wanted to kneel at her altar and worship her. I whispered, \"Lie back on the desk, Isabel.\" Her eyes widened, and a look of terror flashed across her face, but she did exactly what I asked. Isabel rose from her seat, cleared some space on the desk, and then lay down across it, just as Rachel had done. She stared back at me, tense, and studying my every moment.\n\nI stood and gazed down at her long, smooth, naked body. Isabel's bellybutton was dark, deep, and impossibly sexy. I leaned down over her and gently covered it with kisses, while running my hands up along her thighs. Then I gazed down at the smooth layer of close-cropped hair covering her pubic mound. I could see Isabel shaking with anticipation. I parted her thighs slightly. Her labia began to partly separate, just starting to provide a glimpse of the slippery pink flesh within.\n\nI caressed the sensitive skin of Isabel's inner thighs. Stroking back and forth with soft touches, inching closer to her pussy each time. Isabel's breasts began to move up and down at a faster pace, as her breath quickened and her heart raced faster. My fingers meandered from her inner thigh, to the fuzzy lips of her outer labia. There I stroked them gently, feeling how puffy and damp they had become due to her growing arousal. Isabel gave me a hard, serious stare, as if aching to beg me to eat her, but too shy to say it.\n\nA knelt down and brought my face close to her pussy. It was beautiful, fragrant, and wet. I spread her legs to either side, allowing her to fully open before my eyes. Then I spread her pussy as wide as I could, revealing the tender, pink lips of her inner labia and the hood of her clitoris, covered in moisture. I leaned in close and inhaled deeply. She smelled wonderful; a sweet, erotic aroma, full of intense longing. Finally, I ran my tongue through the deep cleft of her pussy, and got my first taste of Isabel's delicious nectar.\n\nIsabel's entire body instantly shivered. I heard her soft cries of pleasure for the first time, as my tongue began to explore her intimate places. I teased apart the soft, wet folds of her pussy, navigating every crevice, stroking gently along the inside and outside of her labia, and then plunging it into her warm, creamy depths.\n\n\"Oh god-- Taylor!\" she cried out, quickly panting.\n\nExcited by her pleasure, I increased the speed of my movements. Soon I was licking hungrily at her pussy, sucking at her soft lips, and lapping her sweet cum as it began to flow and drip down my chin. I felt her body tremor, as a series of micro orgasms overtook her.\n\n\"Oh, yes! ... Taylor! ... Eat my pussy!\" she was finally able to exclaim. I glanced up at her. Isabel looked like she was lost in a daydream; a fantasy she'd long suffered with.\n\nI finally made my way to her clit, which was hard and erect, poking out from under its hood as a testament to Isabel's wild sexual arousal. I began to tease it, feeling her solid nub press against my soft tongue. She began to squirm uncontrollably.\n\n\"Taylor! Oh my god!\" she screamed. I teased and licked her clit faster and faster, until she lost all sense of what was going on. Suddenly, Isabel body succumbed to a series of frantic, violent jerks.\n\n\"I'm coming!\" she continued to scream. Her juices flowed liberally into my mouth, and I lapped frantically at them, savoring every drop. Seeing how painfully sensitive she'd become, I slowed down and began to softly kiss her pussy, gently rubbing her thighs again as she huffed and puffed. When the intense pleasure began to subside, I pulled away and grinned at Isabel. She gazed at me in wonder, beaming like I'd never seen before.\n\nIsabel's hair had become a mess and I brushed it out of her face. We gazed into each other's eyes, and then I went in for a long, deep kiss. Her kisses were passionate and sweet, full of urgency and desperation. They revealed how badly she wanted me, and how badly I wanted her.\n\n\"I want to feel you inside me!\" she begged. I was positively aching, and wanted nothing more than to guide my throbbing cock deep into that deep, wet canal that I had just explored. I positioned my pelvis between her legs, then took my cock, surging and pulsing with excitement, and pushed it deep inside her satiny, pink pussy. Isabel moaned immediately. I leaned down and we embraced as our hips began rocking in unison. I felt my cock penetrating her slick, tight depths.\n\n\"Oh god, I wanted this so badly! I was just too afraid to tell you,\" she whispered.\n\n\"Me too!\" I said, \"I've wanted you since the day I first saw you!\" Isabel's eyes were wet, and I could see how full of hunger and emotion she was.\n\nFor a few minutes I lost myself in the sight of Isabel's pussy devouring my swollen cock as we fucked, finally able to express the enormous desire we had for each other. I glanced up in bewilderment, seeing Alyshah and Darrell fucking with abandon across the room. On the other side of the room, Ryan had Alexis pressed up against the office windows. A pattern of rectangular office lights sparkled beyond them across the city, overtaken by nightfall. I wondered how many office workers were there, standing alone at their own windows, gazing at Alexis' bouncing tits as she received blows from Ryan's cock.\n\nI saw Alexis look back over her shoulder and laugh. \"What?\" Ryan asked.\n\n\"Everybody's fucking!\" she exclaimed. She paused for a moment, then shouted, \"You guys! We're - having - a - fucking - orgy! Can you believe it!?\" Excited laughter arouse throughout the room. Even Isabel laughed, fully giving herself over to a sexual release that she never thought possible. I continued to pound Isabel's gaping hole until I felt her squeezing my arms tightly. Her face revealed a frantic need to come again and I knew what was about to happen.\n\n\"Taylor, Taylor!\" she blurted out, as I felt her hips jerk. \"Mgh!\" Isabel began to spasm, as a deep, powerful orgasm shot through her body. She grasped me tight as her eyes rolled back and she shook violently.\n\n\"Oh my god, oh my god,\" she repeated, before I felt her body become limp and exhausted. I wanted so badly to come inside her, but I'd been working so hard to last through the orgy as long as possible that I'd missed my chance. Still, I knew that this would not be the last time Isabel and I were together. It was the start of something new.\n\nAfter she recovered, I held Isabel's hand and led her back to the group. All of a sudden she seemed to bring down her wall. With my help, she'd broken through her anxiety and experienced something beautiful and pleasurable with me. I could see an immense pressure lift off her shoulders. She looked at everything anew; with an excitement and enthusiasm for newfound possibilities.\n\nRyan quickly joined us, saying to Isabel, \"Oh good, I'm glad you're back!\"\n\n\"Thanks!\" she said.\n\nRyan gave Isabel a hug, and she squeezed him tightly. Ryan ran his hand down her back, then over her butt and pressed their bodies together. She was grinning when they released each other.\n\n\"Do you...\" Ryan started, hesitantly. \"Um... want to... have some fun with me next?\" he asked.\n\nIsabel looked back at me. I smiled, as if I say it was okay, even though she had no need to seek my approval.\n\n\"Okay,\" she said, excitedly. Ryan was beaming. He led her down to the carpet and they began to kiss. I was excited for her, knowing that she was about to have sex again, and feel the same freedom of release that she just shared with me.\n\nAlexis appeared next to me. \"Oh! There we go! More cock for Isabel means I get to have fun with you,\" she snickered. Alexis tugged me aside and grabbed my cock. She pulled me close and pressed her lips against mine. I felt our tongues entwine, lost in the bliss of Alexis' complete, unfettered thirst for sexual expression. I cupped her breast and ran my finger over her nipples, feeling them harden at my touch, as our tongues continued to dance and curl around each other.\n\nOur mouths released and she narrowed her eyes at me. \"Damn,\" she said, stroking me to full erection again. \"I need that cock in me!\" Alexis pulled me down to the floor and got on all fours. I positioned myself behind her ass, ready to plunge myself into her pink hole which presented itself dramatically before my eyes.\n\nRachel approached the group and stood beside Darrell, who was still recovering from his last fuck. \"Hey... do I get a turn now?\" she asked him, seductively.\n\nHe smiled at her. \"Ohhh, you want a piece of this, eh?\" She nodded enthusiastically.\n\nRachel glanced at Alexis and I, as we fucked doggy style. She watched as Alexis' pink pussy swallowed my cock over and over, and decided to prompt Darrell to do the same with her. Within a few moments, Alexis and Rachel were facing each other, laughing at the sight of each other's boobs swinging in front of their chests, as each of them took blows from our cocks.\n\n\"So you're cheating on me now, huh?\" I said to Rachel, smirking.\n\n\"Just trying to make you jealous...\" she giggled.\n\nDarrell and Alexis laughed. I looked around the room; at Darrell's long cock smoothly entering Rachel from behind, at Ryan excitedly groping Isabel's boobs as she watched his erect penis plunging over and over into her hairy pussy. It was almost too much to bear. Out of nowhere, Yuke and Alyshah arrived. Yuke knelt down behind me and began rubbing my neck and shoulders, offering me a smile while watching Alexis' ass ripple with the force of my blows.\n\n\"Good lord,\" Alexis groaned, \"All I can smell is pussy!\" Her head dropped forward as if she were lost in a trance, transported by the latest in a nonstop series of cocks she took inside her. Her hair whipped about as I fucked her relentlessly, unsure how much longer I could last, working my way from pussy to pussy without allowing myself a final release.\n\n\"I feel like I'm gonna blow any minute,\" I moaned.\n\n\"Same here!\" groaned Ryan, pulling his sopping wet cock out of Isabel. He whimpered, stroking it slowly.\n\n\"Poor thing, do you want me to finish you off?\" said Alexis. Ryan nodded. I pulled out of Alexis and she crawled to his side. Ryan sat next to Isabel, letting his massive, swollen erection stand triumphantly before their eyes. Yuke wrapped her arms around me from behind, and together we watched as Alexis pulled off Ryan's condom, then began stroking the full length of his throbbing cock. He continued to groan and twitch as she gave him a hand job, squeezing and massaging his penis, and studying his movements.\n\n\"Here, we need some of this,\" said Alexis. She reached over and wiped her fingers through Isabel's soaking pussy. Isabel reacted with surprise as Alexis touched her, then laughed. Alexis' fingers were coated in Isabel's glossy juices, which she then smeared up and down the length of Ryan's bare cock to lubricate it further.\n\n\"Ohh god,\" Ryan moaned as Alexis' tight grip pumped slowly up and down the full length of his shaft. She began to gently massage his balls as she milked him. Yuke instinctively reached down and began to stroke my cock as we watched, sensing my desire to feel what Ryan was feeling.\n\nAlexis began to pump Ryan's cock faster and faster, until Ryan began to tense up and quiver. \"Fuck, where do I come?\" he said, suddenly lurching forward. \"Can I come on your tits?\" he asked.\n\nShe laughed. \"I've got no way to wash off, just come on yourself,\" she giggled, stroking him faster and faster.\n\nRyan moaned and jerked his hips faster and faster until finally he leaned back and a look of intense pleasure flashed across his face. \"Ngggh!\" he groaned as a thick spurt of semen shot from his cock. It landed on Alexis' fist and began to ooze down over her fingers. Everyone watched in silent fascination as another thick spurt of cum squirted out, then another, and another. His cock throbbed and pulsed as he came over and over, emptying himself fully until Alexis' hand was completely coated, and Ryan's crotch was covered in puddles of ejaculate.",
        "\"Wow,\" Alexis said, staring at the mess in amazement, \"You're totally covered.\"\n\n\"Geez,\" I said, \"I'm so ready for that,\" I admitted to Yuke.\n\n\"Do you... uh... want to fuck me? And then let me jerk you off?\" she asked.\n\n\"You have no idea how long I've waited to hear you say that,\" I laughed. I was suddenly surprised to hear myself admit that.\n\n\"Really?\"\n\n\"Yeah.\"\n\n\"I wasn't sure, actually,\" said Yuke. \"We've been friends for so long now... I wasn't sure if you were afraid that having sex might change things too much between us.\"\n\n\"Oh-- is that how you feel?\" I asked, suddenly concerned that maybe she didn't want to go through with it.\n\n\"No, no! I was just afraid you felt that way,\" she said.\n\n\"Heck no. You're amazing. I've always thought so. I think deep down, I've always wondered why we never, you know, fooled around together or something. I just assumed that maybe you weren't interested.\"\n\nYuke laughed, \"I thought the same about you.\"\n\n\"Well... that settles that, then,\" I replied, grinning.\n\n\"Indeed!\"\n\nShe smiled nervously at me; a nervousness she didn't have around the other guys. Shaking off a brief moment of awkward pause between us, Yuke placed her hands on my chest and began to caress my muscles. I felt myself begin throbbing and she took notice, making her way back to my cock again.\n\n\"So... have you really spent several years secretly wanting to fuck me?\" she asked, smirking.\n\n\"More time than I'd like to admit...\" I said.\n\n\"Really... That's funny!\"\n\n\"Remember that summer when we went to Central Park and had a picnic by the turtle pond?\"\n\n\"Oh man, yeah! We drank all that wine out of Snapple bottles.\"\n\n\"Right, yeah. Well I got pretty drunk. And you weren't wearing a bra. I swear to God I couldn't take my eyes off your nipples poking against your t-shirt. Every time you moved and I saw them swaying I just wanted to reach forward and do this...\" I said, reaching over and gently squeezing Yuke's gorgeous, massive boobs. She looked down and watched me fondle them.\n\n\"Do you want to know something?\" she asked.\n\n\"What?\"\n\n\"I should tell you... I didn't wear a bra cuz I knew how much you like them. I've seen you staring. Plenty of times,\" she said, smirking.\n\nI laughed. \"Sorry I was so obvious.\"\n\n\"That's okay! I get that a lot,\" she said, \"Truthfully, I've spent a fair amount of time wondering what you had in your pants.\"\n\n\"Really?\"\n\n\"Yeah. I mean, not that girls don't already spend a lot of time secretly thinking about what cute guys might be hiding down there. But you know... I'll admit I was more than a little curious.\"\n\n\"... And?\" I asked, nervously.\n\nShe grinned. We looked down at my erect penis together. It stood straight up in the air as Yuke gave it a long, slow massage, up and down my shaft. It twitched and pulsed at her touch. I could tell she was trying to figure out how to express something important.\n\nYuke leaned in close. I could feel her breath on my neck as she mused into my ear, \"Taylor, I've been sitting next to you for days now, glancing over at your cock literally every five minutes. My chair is so fucking soaked by now that I swear it's gonna need to be replaced, so that I don't have to spend every day smelling how hot and wet you made my pussy. You want the truth? Well, there you go.\"\n\nI stared at Yuke, speechless. \"Oh, shit,\" is all I could spit out. She chuckled.\n\nYuke laid me back on the carpet and then climbed on top of me, full of excitement. Her massive boobs dangled down in front of my face as she squatted over my cock. I watched as she reached down and guided it inside her pussy. We both let out a long sigh as it sunk all the way in. It felt warm, and deep, and comforting; in part because of the physical sensation, but also because she was such an old friend, and to have sex for the first time was thrilling and special. Slowly she began to ride my cock with an innocent joy, as if she was playing with a new toy for the first time.\n\n\"Fuuck, why have we never done this before,\" I groaned, watching my engorged cock glide in and out of her tingling canal.\n\n\"I don't know! We were being stupid!\" she laughed.\n\n\"Please don't tell me I could have had this at any time, if I had just asked,\" I whimpered.\n\n\"Seriously? Taylor-- that day in the park... if we didn't risk getting arrested I would have fucked you right then and there...\" she said, moaning and clutching her breasts.\n\n\"Damn!\" I whined, as she bounced up and down on my cock faster.\n\nYuke continued. \"I remember that day-- I came home all sweaty from being in the sun...\" She started breathing heavily as we fucked with increasing passion. I grasped at her swinging boobs, cupping and squeezing them in my hands like I'd always wanted to do. \"And I peeled off my clothes. I was so hot I just collapsed in my couch, naked. I couldn't stop thinking about you. You had a bulge in your shorts and didn't even realize it. I was so horny-- I wanted you so badly!\"\n\nI could feel Yuke shivering as her pussy squeezed my cock tightly, and her body bobbed up and down in front of me. The most amazing set of boobies I'd ever laid my eyes upon were bouncing and jiggling in front of my face and I couldn't stop devouring their constant movement with my eyes. I felt like I was going to erupt, but I hung on as long as I could.\n\n\"Oh god, Taylor!\" Yuke moaned, trying to keep herself together. \"Your cock... it's so amazing...\" she continued to moan, barely able to continue her story. Finally she regained control and resumed.\n\n\"I couldn't stand it anymore, so I started rubbing my pussy and thinking about that bulge, imagining what your cock must feel like. Then I started fingering myself-- pretending it was you!\" She narrated this memory with increasing emotion, gazing hungrily at me. I rarely saw Yuke losing control. She was always so calm, cool, and collected, but here she was out of her mind with raw, uncontrollable desire for me, which she finally set free.\n\n\"Oh man, I wish you'd just called me. I would have been there in an instant and fucked you right there on the couch!\" I blurted out.\n\n\"Ngh!\" she cried out, as a tremor went through her body. \"You made me squirt so hard that day I made a complete mess of my couch!\" I felt her juicy wetness increase. The odor of her feminine arousal increased, exuding from her pussy, now sopping wet and drenching my cock.\n\n\"Just fuck me like you'd have done that day!\" Yuke growled. She pulled herself off me, then laid back on the carpet and spread her legs wide. I lurched forward and plunged my cock back inside her, watching her lightly hairy labia stretch wide and separate to fit my swollen cock inside.\n\nI fucked her with a wild, unrelenting hunger, thinking back of all the time we'd spent together, unaware of each other's secret desires, but fully consumed by our own. \"Oh my god! Yes! Keep going!\" she screamed. \"Jesus-- I can smell how fucking horny you are! Ngh!\" I started moaning, realizing that I wasn't going to last much longer. \"I'm gonna make you come so hard so won't be able to fucking walk for a week!\" she exclaimed, bucking her hips and adding to the force with which my cock thrust inside her.\n\n\"I'm gonna explode here!\" I replied. \"Where should I come? Inside you? Or on your tits?\" I asked frantically.\n\n\"Or you can come in my mouth if you want,\" she said, breathlessly. I quickly pulled out and yanked off my condom. She scrambled to her hands and feet and took my aching cock in her mouth, sucking it immediately. She quickly gestured to an empty coffee cup on the desk behind me. I reached back, grabbed it, and placed it beside her, so that she'd have a place to spit after I came.\n\nYuke sucked and slurped at my cock with a fierce urgency, as if begging me to come for her. I held on as long as I could, knowing that I was about to succumb to an orgasm like never before. All of a sudden, I felt a tingle welling up from deep inside, it grew and grew until it took hold of my entire body. Waves of pleasure washed through my body, followed by a powerful spasm, like a bolt of lightning. One spasm became another, and another, as I felt myself shooting a torrent of cum into Yuke's mouth. Her eyes widened as it shot straight to the back of her throat, and then splashed over and over again onto her warm tongue.\n\nI felt the most unbelievable release of sexual energy, having built up over more than an hour of fucking my coworkers and friends, exposing secret crushes and erotic desires. Fucking Alyshah unexpectedly on the conference table, and then seeing how wet and horny Rachel had been, having long fantasized about me. Finally breaking through the wall with Isabel and experiencing a deep, passionate union with her, only to then fuck Alexis and then my long time friend, Yuke, in succession. It all culminated in a powerful release, flooding Yuke's mouth with nearly a week of growing frustration and desire. I came harder than I'd ever done before, until I had nothing left, and she was left reeling.\n\nI fall back onto the floor, weakened and spent. My mind was spinning and trying to regain focus. I felt my chest burning, rising and falling endlessly, struggling to find equilibrium once again. I saw Yuke struggling with the amount of cum I'd just ejaculated. She reached frantically for the cup but knocked it over. Suddenly she swallowed everything in order to gasp for much needed air.\n\n\"Jesus, Taylor!\" She was huffing and puffing. \"Any more and it would have come squirting out of my nose!\" she exclaimed, falling back and laughing. Her lips were glistening with cum, but she quickly licked it off.\n\nI started laughing as well. \"I'm so sorry!\" I replied.\n\n\"That's okay,\" she chuckled, finally catching her breath. \"At this point, I may as well finish and clean you off.\"\n\nShe grinned and crawled back over me. My cock was still slowly oozing. She scooped it up and gave it a long, slow lick, then circled the tip with her tongue, cleaning it off. She milked it a little to ensure that she got every last drop. Then Yuke collapsed beside me and put her head on my chest. I was in heaven.\n\nI finally snapped out of the bubble that I'd been in with Yuke. The rest of the group was in various states of similar exhaustion. All of us in a naked, sloppy, wet heap-- bewildered and amused by the explosion of sexual activity that had just taken place, just trying to make sense of it all.\n\n\"What the fuck did we just do?!\" Alyshah asked, gazing toward the ceiling. Everyone burst out laughing.\n\n\"I think we just figured out that we're more than just coworkers...\" Alexis replied. Isabel giggled.\n\n\"I'm cool with that!\" Ryan said.\n\n\"Me too! Me too!\" said Rachel.\n\n\"So... what... we're all fuck buddies now?\" asked Darrell.\n\n\"Boy, I hope so, but it might take me a few days to recover from this evening...\" I said, feeling Yuke squeezing me tight.\n\n\"But Karen's naked office experiment won't last forever,\" Isabel said.\n\n\"Who the fuck needs her experiment? As long as she leaves after work, there's more beer and fun to be had,\" snickered Alexis. And this turned out to be true. We had, and continue to have, more wild sex in that office than I can even wrap my mind around.\n\n\"You know... we're gonna need a MUCH bigger condom jar,\" Alyshah concluded, thoughtfully. We all laughed.\n\nWe laughed-- but sure enough, there it was the following morning, right on cue. Three times the previous size, in its familiar place by the water cooler. "
    ],
    "authorname": "SolarRay",
    "tags": [
        "exhibitionism",
        "voyeurism",
        "group sex",
        "cfnm",
        "cmnf",
        "office",
        "coworker",
        "cunnilingus"
    ],
    "category": "Group Sex",
    "url": "https://www.literotica.com/s/hardcore-headquarters"
}
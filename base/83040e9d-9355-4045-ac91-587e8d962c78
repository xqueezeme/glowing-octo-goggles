{
    "title": "Home 03: Away From Home",
    "pages": [
        "Erin McAllister was going to be a star. Sitting at the bar and watching the woman move on stage, Raegan Hall had little doubt about McAllister's star potential. The band had performed several popular country songs, giving the lead an opportunity to display an ability to make each song she sang her own. Her voice had a full range that she overused a little. Rae made a mental note to address the problem when McAllister agreed to sign with Capitol Records. Critics would pan the singer as a one-trick horse and miss the playful dance in McAllister's voice when she sang Dolly Parton's \"Two Doors Down,\" the fierce passion she put into Martina McBride's \"Independence Day,\" and the soulful longing when she covered Reba McEntire's \"The Heart Won't Lie.\" \n\nThere were a lot of singers in Nashville who could be radio stars. Rae had listened to hundreds in the seven years she had worked for Capitol Records. The seven years had taught her that it took more than a great voice to be a star. Rae had trained herself to look beyond the voice to the performer. Erin McAllister moved easily on stage. She made eye contact with members of her audience and told funny stories between sets. Her personality and talent would win the female fans. They would want her to be their friend.\n\nThe male fans wouldn't care if she couldn't carry a tune. Erin McAllister had painted her jeans onto her body. Her hips were slim. When she wiggled during an upbeat number, they were hypnotic. She wore a fitted tank top that accentuated her flat stomach and the full curve of her breasts. There was a straw hat sitting on the stool behind her, but she didn't wear it. Her short black hair framed her face and when she sang about a lover, it was easy to believe that she was singing to no one but you. \n\nA rueful smile touched Rae's lips. Judging by her own reaction, male fans wouldn't be the only ones falling in love with Erin McAllister. She took a sip of her beer and looked at Beth Randall sitting beside her. Beth was not watching the performer. Her eyes were on Rae. She raised her eyebrows inquisitively. \"Well?\"\n\n\"She's got talent,\" Rae stated. \"How'd you find her?\"\n\n\"Dale took me dancing for our anniversary. It was an open mike night and she performed. I did some investigating afterwards and found out she performs here three nights a week.\"\n\nRae turned her attention back to the woman on stage. She was singing Hank Williams's \"Your Cheatin' Heart.\" Her big voice vibrated off the walls and when she finished the number the audience cheered. \"What do you think? Is there room for another female act right now?\"\n\n\"She's different,\" Rae mused. \"Carrie Underwood is squeaky clean.\" Rae nodded toward Erin McAllister. \"She's a bad girl.\"\n\n\"Does our audience want a bad girl?\"\n\n\"Why not? Country music has always had bad boys. Both Hank Williamses and George Jones were always bad boys. None of the girls have been bad since Tammy Wynette sang about D-I-V-O-R-C-E.\" McAllister was halfway through one of the Dixie Chicks songs that Rae hated but knew always worked up the crowds. \"She's marketable.\"\n\nRae turned to the bartender and held up two fingers. Beth leaned over to whisper in her friend's ear, \"Are you sure you're not just horny?\"\n\n\"Horny I could take care of,\" Rae answered, picking up the two beers. She weaved through the tables and the mass of people, make her way toward the stage, leaving Beth alone at the bar. She kept her eyes fixed on McAllister's face as she neared the platform. She sat one of the beer bottles on the edge of the stage and waited until McAllister looked her way. She lifted her beer in salute, took a drink, and made her way back to the bar. She did not look at Beth.\n\n\"She's pretty,\" Beth commented casually.\n\n\"Beautiful,\" Rae agreed.\n\nThe band finished the song and Erin announced that they would be taking a break. She picked up the beer that Rae had left and took a sip as she walked slowly around the edge of the room, stopping occasionally to smile and speak with a member of the audience. Rae's eyes did not waver as Erin slid on the stool beside her. \"Thank you,\" she said as she took another drink.\n\n\"I'm Raegan Hall, and this is Beth Randall.\" Beth leaned around Rae to smile and wave. Rae motioned to an empty table and the three of them walked silently to it. \"We work for Capitol Records.\" Erin's eyes widened and her smile brightened. Rae held up her hand before Erin could speak. She handed the woman a business card. \"Don't get excited. We don't make the big decisions, but we can grease the wheels for an audition, if you're interested.\" \n\n\"If I weren't interested, I wouldn't be here,\" she stated in an attempt to be nonchalant. \n\n\"Does the band come with you?\" Rae asked with her eyes fixed on Erin's green ones. \n\n\"The boys? If they don't come with me, who'll play for me?\"\n\n\"So, you're not an act,\" Rae said without answering Erin's question. Rae knew that question was better left to the big dogs at Capitol Records. She rested her elbows on the edge of the table and leaned forward slightly. \"What do you do when you aren't singing?\"\n\n\"I work at Old Navy in Opry Mills. That may be as close to the Grand Ole Opry as I ever get.\"\n\n\"How old are you?\"\n\nErin leaned toward Rae, her voice dropping a notch. \"Old enough.\"\n\n\"Old enough for what?\"\n\nThe smile on Erin's face widened as she answered in a hushed tone. \"Old enough to know better and young enough not to care. I have another set to do.\" She stood, her eyes still locked with Rae's. Rae lifted her face. \"Will you be there when I audition?\"\n\n\"I wouldn't miss it,\" Rae replied, surprised at the sudden dryness of her mouth. She and Beth sat in silence as Erin made her way back to the stage. She talked with the lead guitarist, looking over her shoulder once during the conversation to make certain that Rae was still watching. \n\n\"She's all over you,\" Beth said suddenly, yanking Rae from her trance. Rae shifted her dazed expression to her friend, her mind struggling to register the conversation. \"Why don't you ask her out?\"\n\n\"I have a girlfriend,\" Rae growled.\n\n\"Yeah? Where is she?\" Beth snapped in response. Rae narrowed her eyes but did not answer. \"You've bought that big house, but she's still not here. She's never going to come, sweetheart.\"\n\n\"Things aren't that simple,\" Rae said through clenched teeth.\n\n\"If she loves you, things aren't that complicated.\"\n\n\"It's not just her that we have to fit into the equation. She's got Will and the baby that she has to consider, as well.\"\n\n\"She's totally disregarding you, though,\" Beth insisted. She reached out to cover Rae's hand. \"You were satisfied with Jamie, but when you came back at Christmas, you had a glow and a spring in your step that I had never seen before. I was so happy for you, but now you just seem so lonely. There is a beautiful woman practically throwing herself at you, and you can't tell me you aren't interested.\"\n\n\"She is an incredibly sexy woman,\" Rae conceded. \"I wouldn't be human, much less gay, if I didn't notice, but I have a girlfriend. Tara will be here when she can be.\"\n\n\"I hope Tara knows what she has in you.\"\n\n\"You'll be able to ask her soon enough.\" Erin was at the microphone again, pulling her audience back into her performance. Rae returned her attention to the woman on the small stage surrounded by a few local boys who would never do more than appear at a handful of community festivals. Rae was sucked into McAllister's hypnotic spell, as well. Her eyes were transfixed on the lithe body. The tank top hugged all of the singer's curves. Rae imagined she could see the hard little pebbles of Erin's nipples betraying the excitement she felt at performing and the possibility of an audition with Capitol Records. \n\nRaegan Hall found herself lost in Erin McAllister's enchantment. Without the tank top, Erin's belly was flat and Rae imagined it was tan. Her pale breasts would stand out like headlights on a dark road. They weren't large and Rae thought the performer did not have on a bra. Mesmerized by the voice echoing off the walls, Rae imagined her fingers opening the buttons of the tight denims and revealing a wisp of brightly-colored material covering a smooth . . .\n\nRae jerked herself from the train of thought. Flustered, she stood, throwing a few dollars on the table. \"I'll see you at work,\" she mumbled to Beth, already weaving her way toward the door. She heard Beth calling her name, but she did not hesitate until she was outside. She didn't stop walking until she got to her car. Once there, she rested her hands on the hood, allowing the crisp spring air to cool her heated face. \n\nShe was in love with Tara Roding Myers. Tara's husband had died in an accident and at Thanksgiving, Tara had come out to Rae. At Valentine's, Tara had told her mother that she was gay and was moving her small family to Nashville to be with her old friend and new lover. Jane Roding had not taken the news well. Rae knew that was the real reason that Tara hadn't moved yet. Rae had promised to be patient, but the loneliness and uncertainty haunted her.\n\nShe jumped when a hand gently touched her shoulder. \"Hey, you okay?\"\n\nRae turned, expecting to see Beth beside her. Instead, Erin McAllister was standing just inches away, a concerned expression in her green eyes. Aware of the heat emitting from the woman's body, Rae took a step away. \"I'm fine,\" she answered.\n\n\"You ran out of there,\" Erin stated. \"I thought you might be sick.\"\n\n\"Asthma,\" Rae lied quickly. \"The smoke got to me. Shouldn't you be on stage?\"\n\nErin closed the distance, reaching out to play with the collar of Rae's lightweight jacket. Her eyes lightly caressed the record executive's face, coming to a stop on Rae's lips just as the older woman licked them. \"I was concerned,\" the performer said in a sultry voice. She took another step, lifting her head slightly. \n\nRae could feel Erin's body against hers. The back of her legs were against the car. She swallowed with difficulty and looked away. \"I appreciate that,\" she insisted, sidestepping Erin's advance. \"You need to get back to your audience and I need to get home.\"\n\n\"Is your inhaler at home?\"\n\n\"My inhaler?\" Rae mumbled as she pulled her keys from her pocket. \"Yes. My inhaler is at home. I'll see you at the audition.\" She opened the door to her car and looked across the parking lot before slipping behind the wheel. Beth stood in the doorway to the bar, watching the scene from a distance. Rae waved and sat down in her car. Erin took a step back, her hands on her hips as Rae cranked her car and sped away.\n\nRae's heart was pounding as she drove toward the neighborhood where she had just purchased a three bedroom house for Tara and the children. She glided the vehicle into the two car garage and rested her forehead on the steering wheel. \"Raegan,\" she said aloud, the sound of her own voice foreign to her ears. \"Get a hold of yourself.\"\n\nShe stared into the new suburb as the garage door slowly closed. The lock clicked loudly and her footsteps echoed through the two empty stories. She tossed her keys on the kitchen table and walked up the steps without turning on any lights. Her fingertips trailed along the molding as she made her way into the bedroom, undressing as she walked. She pulled on a t-shirt and pair of shorts and then stared at the queen bed standing in the middle of the room. It seemed to mock the distance between Nashville and Tara and reminded Rae of her loneliness.\n\nRae left the bedroom and roamed down the hall. She peeked in the room that she had set up for Tara's four year old son. A NASCAR border matched the racecar bed the boy had in his small room at home. The new room was almost half the size of Tara's current apartment. Across the hall, she had already assembled a crib and given the nursery a coat of pale yellow paint. When she had e-mailed her lover pictures of their new home, Tara had insisted that she would get lost. \n\nThoughts of Tara sent sharp pangs of longing through Rae's heart. They spoke on the phone every night, but had not seen each other for three weeks. A smile formed on Rae's lips as she walked down the steps, memories of Tara occupying her mind. Just thinking about Tara seemed to conjure the small woman's smell and taste. Tara was a responsive lover, her body arching and rocking whenever Rae touched her. She was quiet in her pleasure, her voice a heated whisper in Rae's ear. Rae imagines could feel the warm air of Tara's breath against her neck as she gasped in pleasure.\n\nNow that Tara was eight months pregnant, her hormones were heightened. The last time they were together, Tara had met her at the door with a passionate command. \"Touch me,\" she had whispered before pressing her body into Rae's. Somehow, Rae had managed to get into the house and disentangle herself from her duffel bag straps while kissing Tara and sliding her hands beneath the gown. \n\nTara tore one of Rae's buttons off as she had eagerly attempted to undress her partner. \"Where's Will?\" Rae had asked as soon as Tara allowed her to take a breath. They were already walking backwards toward the fold-out bed. \n\n\"With Billy's mother,\" Tara had answered. \"We'll go get him tomorrow. He doesn't know you're coming, so it'll be a nice surprise.\" She pushed the shirt off Rae's shoulders and unhooked her lover's bra. Her fingers immediately moved to Rae's jeans, undoing the fly and sliding her hand inside. She pushed aside her lover's underwear and slid her fingers into the damp slit. She began rubbing the sensitive button inside as Rae's mouth covered the swollen breast. Tara put her free hand behind Rae's head, thrusting her breast fully into her lover's mouth. \"I love you,\" she said fiercely. \n\nRae sat down on her couch in the home she had bought for Tara. She had not fully furnished it yet. She wanted Tara to be able to make decisions about the house so that her lover would feel like it belonged to her. If everything had been done in the house before Tara arrived, she would feel like a stranger. Rae wanted her to feel home when she finally arrived with Will and the baby. For now, the house didn't even feel like a home to Raegan. Tara was home.\n\nTangled on the sofa bed in the tiny apartment, Rae felt content. Sucking softly at Tara's swollen nipples, Rae's heart was fuller than it had ever been. She had loved Jamie for seven years, but their passion had faded as quickly as Jamie's plane had disappeared into the clouds. Even in the early stages of their relationship, Jamie had not occupied Rae's every thought the way Tara constantly did now. \"I love you,\" Rae answered, emotion thick in her voice. Her mouth left Tara's full breast and she inched down, her hands gently cradling Tara's stomach as her lips moved over her lover's swollen abdomen.\n\nThe baby's head was pushing against the wall of Tara's stomach, creating a slight bulge. Rae kissed the swell and lightly ran her fingertips over it. Tara dropped her hand and combed it through Rae's hair. Rae looked up briefly before continuing her journey down Tara's body. Her tongue parted slick lips as her hand snaked up to hold and squeeze Tara's heavy breast. Her fingers rolled and tugged Tara's nipple as her tongue mirrored the motions against the fat, sensitive button buried beneath her folds.\n\nTara thrust herself against Rae's mouth, her head tossing from side-to-side as she moaned her encouragement. Her body was flushed as Rae's talented tongue pushed her higher. She screamed as she reached the peak. Rae's head snapped up. Tara was usually a quiet lover. With Will being gone, she allowed herself more freedom in expressing her pleasure. Her eyes traveled up the flat body and over the small bosom to the dark eyes focused on her.\n\nRae sat up straight on the couch, looking wildly around the dimly lit deserted room, her heart pounding against her breast. Tara had green eyes and blond hair and her body was fat with the child she carried. The slim figure and deep eyes that had just popped into her memory belonged to Erin McAllister. She immediately reached for the telephone, not allowing herself time to linger on the image of the performer's body. She grabbed the telephone and dialed Tara's number.\n\nHer lover's voice was groggy when she answered. \"Hey, baby,\" Rae said, her voice breathless. \"I'm sorry I woke you up.\"\n\n\"It's all right,\" Tara answered. Rae closed her eyes as she listened to her lover get comfortable. \"What's up, sweetheart? Why aren't you sleeping?\"\n\n\"I was just thinking about the last time we were together and wishing you were here. When are you going to be here, Tara? I need you here.\"\n\nTara sighed deeply. \"We've waited too long, honey. My doctor is here. I'll come after the baby is born. We'll all be there.\"\n\n\"I'll be too far away when the baby comes.\"\n\n\"You said you were going to take off the week I was due.\"\n\n\"What if the baby comes early?\" Rae demanded impatiently. She stood with the cordless phone and began pacing. \"I want you here so I can take care of you.\"\n\n\"My doctor will take care of me, sweetheart. My mother and Billy's mother and Nora are helping. Your mother is wonderful. She and your sister came over today and cleaned my apartment.\" There was a short pause. \"What were you thinking about?\"\n\n\"About making love to you,\" Rae answered quickly. She pushed aside her vision of Erin McAllister, focusing her mind on Tara's small frame and extended belly. \n\n\"Oh, yeah?\" Tara teased with a light voice. \"Tell me about it.\"\n\nRae laughed softly as she walked up the stairs to the bedroom she would soon share with Tara. \"I was thinking about how sweet you taste.\"\n\n\"Mmm. I love your tongue in me. You play me so well.\"\n\n\"And I love the music you make, baby.\" A low, long moan escaped Tara's throat and echoed through the fiber optic cables across the state to Rae's ears. Goosebumps raced down Rae's spine. She felt her pussy lips tighten. \"Yeah, that's the song I like to hear.\"\n\n\"What else do you like?\" Tara breathlessly asked.\n\n\"Your breasts,\" Rae answered without hesitation. \"They are so full right now, your nipples fat when I touch them. Your whole body responds when I suck on them.\"\n\n\"Keep talking,\" Tara ordered in a quivering tone. \n\nThe tremble betrayed Tara's actions to Rae. As she lay back on her bed, the image of Tara's fingers moving over her naked body had Rae reaching into her own panties. \"You make me so wet,\" she whispered as her fingers slid between her slick lips and began rolling the hard, sensitive button buried inside. \"Just thinking about you makes my nipples hard and my whole body tingle.\"\n\n\"My body is tingling.\"\n\n\"Where's it tingling?\"\n\n\"My breasts are tingling. My nipples are tight and stiff and straining to be touched by you. I want to feel your tongue and lips all over me.\" \n\nRae closed her eyes as Tara spoke, picturing her lover moving her hand over her fat breasts and tugging the turgid nipples. She moved her free hand to her breast, squeezing and massaging the pliable flesh. \"Is that the only place that is tingling?\" she asked, her breathless voice matching Tara's.\n\n\"No, I'm tingling a little lower, too.\"\n\nRae grinned at Tara's hesitation. Her lover didn't talk dirty very often. When she did, her cheeks flushed a bright pink. Even in bed, her voice whispered those words considered impolite. It made Rae warm and wet to hear Tara step outside her comfort zone. \"How much lower?\"\n\n\"My stomach is trembling,\" Tara said on a soft moan. \n\n\"Lower?\"\n\n\"Between my legs.\"\n\n\"Come on, baby,\" Rae encouraged. \n\n\"My . . . my pussy is tingling.\" Rae growled when she heard Tara's words and Tara groaned. Rae began moving her hand faster between her legs, her fingers rocking her slick nub. \"Rae,\" Tara gasped.\n\n\"Yeah, sweetheart. Tell me what you're doing.\"\n\n\"I'm touching myself. I'm rubbing my . . . I'm rubbing my clit.\" Tara's voice dropped low as she spoke. Rae felt a shiver ripple through her body. They were both silent, their ragged breathing the only sound echoing across the miles. Rae's fingers rotated against her core, stroking herself higher. Soft sounds of pleasure joined their rapid gasps for air. Rae answered each of Tara's moans with a low response. They encouraged each other as their soft barks grew sharper and more frequent. ",
        "Rae intensified the attack on her clit as Tara's pitch changed. \"Yes, yes, come on, baby,\" she grunted as she pushed herself higher. \n\n\"I need you here, Rae, I need you,\" Tara's words were released in a heated rush. Her need to stay quiet so that Will did not hear gave her voice a raspy tone that unraveled Rae's restraint. She cried out, her voice floating through the empty rooms. There was no need for silence in the lonely house. She pushed herself over the top and released her tension with abandon. Erin McAllister was the farthest thing from her mind as she coached Tara into a soft explosion.\n\nTara laughed softly as she recovered. \"You need to call me more frequently like this, I think.\"\n\n\"If you were here, I would take care of you myself.\"\n\n\"Soon, honey, soon. The baby will be here and we'll come. I promise.\"\n\n\"I know you promise,\" Rae said, her voice flat. \"You'd just better hope some hot little country singer doesn't sweep me off my feet in the meantime.\"\n\nTara laughed again. \"I'd say every hot little country singer that is so inclined is following you around with bedroom eyes, but I trust you completely, darling.\"\n\nGuilt twisted at Rae's gut. \"I'm glad, sweetheart. I love you.\"\n\n\"I love you.\"\n\n\"I'll let you get back to sleep now. I'll talk to you tomorrow.\"\n\n\"All right, honey. Sleep well. I certainly will now.\"\n\nTara hung up without waiting for Rae to say good-bye. Rae collapsed back on the bed and pressed her fists to her forehead. Her body was sated and her heart was full, but the house was still empty. She rolled to her side and stared at the vacant half of the bed. She imagined that she could smell Tara beside her, even though her lover had never been inside the house. Soon, Tara said. The baby would come and Rae would go to celebrate the birth, and then she would bring the three of them home.\n\nShe closed her eyes and pictured the homecoming and at last fell asleep. "
    ],
    "authorname": "Belle_in_south",
    "tags": [
        "female masturbation"
    ],
    "category": "Toys & Masturbation",
    "url": "https://www.literotica.com/s/home-03-away-from-home"
}
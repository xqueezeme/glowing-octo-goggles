{
    "title": "Mike & Karen Ch. 05",
    "pages": [
        "Disclaimer: All characters are 18 years of age or older while actively engaging in sexual activity. This story is a prequel/sequel (sprequel?) to my other work, Alex &amp; Alexa. Reviews are welcome; flames will be snickered at and deleted with extreme prejudice. Enjoy! \n\nPlease Note: There are some incest themes with a secondary couple in this story. Just a forewarning. \n\nChapter 5 -- What Inspires You \n\n1986. A dark, quiet computer lab ... \n\nMike sat staring at the screen, his fingers rubbing against his temple wearily. He'd been looking at the problem for hours now, and the numbers were just not coalescing. He squeezed his eyes shut and rubbed them. The schedule he was on was tight. The damn sequence kept coming up Hodge, and he was decidedly not working on a Kahler Manifold. \n\nThis was Calabi-Yao. Get your fundamental numbers right, universe! \n\nHe pinched the skin between his eyes and sighed, muttering to himself as formulas stumbled through his head. \n\n\"The Ricci Metric on a torus is a flat metric ... the supersymmetry is unbroken if the holonomy is full SU-Three ... supercharges need to remain Type One through the 26-N ...\" \n\nHe put his forearms on the desk and rested his face on them, trying to not sink into the depths of despair-sleep. He'd been given this assignment, because even the professors were unable to crack the math. Explaining superstrings on a flat plane was entirely predicated on this formula. \n\nWhen he came up again, the wayward numbers were still staring back at him, as if laughing defiantly. He clenched his hands, trying to get the feeling back in his fingers. His eyes were raw. \n\n\"It's the line bundle ... I can't match up the line bundle with the Ricci Metric ...\" \n\nHe groaned loudly and put his head on his forearms again, just as a silhouette floated by outside the dark lab. The comely shape paused upon hearing the noise, and the head turned to look into the lab. Mike lifted his head and stared wearily at the screen, completely flummoxed. Without a sound, the shadow walked up behind him, still observing intently, holding several textbooks to its chest. \n\nKaren leaned over him, pondering the endless lines of equations. And the oversized nerd was right; the numbers were decidedly not coalescing as required. Mike blinked and looked sideways for a moment, finally sensing her presence. He drew in a breath, hoping she wouldn't notice that he was inhaling her scent in that stuffy lab. \n\nKaren leaned down some more, over his shoulder, her books pressing into the massive deltoid. Neither of them said anything, just looking at the screen, with its endless green numbers glinting insufferably in the dark. \n\nHer dainty hand reached out and began tapping rapidly on the keyboard. Within thirty seconds, the screen shifted its dynamic, displaying a new, much more attractive numeric cosmology. Mike's eyes widened as Karen stood back up and nodded to herself in satisfaction. She patted him on the shoulder, turned on her heel, and exited the lab silently. \n\nMike stared at the screen silently for several more seconds, before a wide grin spread across his face. There it was, plain as day. \n\nSuperstring lived on. \n\n*** \n\n\"Well, here we go,\" Alexa said as she walked along with her sister, her brother-in-law, and her husband and nephew, Alex. \"The school season is finally upon us. Gonna be weird to be taking classes instead of just dinking around in some stuffy old offices, sorting endless language files.\" \n\n\"I'm kinda looking forward to it,\" Alex replied, looking around. \"I wanna see and hear if all that work we did made any difference to how the courses run.\" \n\n\"Your professors are ecstatic,\" Karen remarked, smiling and giving her son's shoulder a gentle pat. \"Apparently the files haven't been this organized in a decade. They'll give you all the one-on-one time you could possibly need, and I suggest you take it. You'll both jump ahead rapidly, so apply yourselves, and you could have you at least your BA's a full year early, or begin working on your Master's.\" \n\nAlexa sighed happily. \"I love languages. There's a flowing art to them like nothing else, you know? So malleable, so organic, and always endless exceptions to the rules they set up for themselves.\" \n\n\"Just about the most millennial thing I've ever heard,\" Mike mused, making his wife snicker and Alexa stick her tongue out at him. Seconds later, someone called to the little group, and they were joined by Freja and Jeanie, who trotted up and greeted them cheerfully. \n\n\"Well, well, if it isn't Laverne and Shirley,\" Karen mused as the couple approached, holding hands. \"And how are you two?\" \n\n\"I am loving this campus,\" the honey-blonde Danish girl said, gesturing wide with her arms. \"There is space, and trees, and so many interesting buildings! Some old, some new ...\" \n\n\"I'm glad you like it, darling,\" Karen said agreeably. \"But being a foreign student is one thing; how are you doing with your resident status and learning to be Canadian?\" \n\n\"She's getting there,\" Jeanie answered, putting her arm around her Danish wife's shoulder. \"Slowly but surely.\" \n\n\"Hey! I am becoming Canadian quicksome!\" Freja protested, looking slightly offended. \"I put the tree sauce on my breakfast foods, I watch the skatey-punchy with you and your father, and my new favourite animal is the ... the antler-cow!\" \n\n\"She means a moose,\" Jeanie whispered to the others. \n\n\"I'm just surprised she didn't say the beaver,\" Alex quipped, making his wife snicker. \n\n\"Alex,\" his mother said, wrinkling her nose, \"Try not to talk if you can't be helpful. Go on, Freja.\" \n\n\"And I am being told that because my engineering fields are highly desirable --\" \n\n\"Just like you,\" Jeanie cooed, stroking her wife's cheek. \n\n\"-- that I should have no problem with accelerating my residency and even my citizenship. The test will be easy.\" \n\n\"Once she can identify an antler-cow,\" Alexa mentioned, earning her a look from her best friend and then blowing her a kiss. \n\n\"Well, we'd best be off,\" Karen said finally. \"Would hate to have people see us and accuse us of fraternizing with our students.\" \n\n\"Just stick to the fucking of them, ja?\" Freja quipped as Mike and Karen hugged Alex and Alexa and then headed toward the Sciences block. The four friends then began walking through the campus, chatting cheerfully. The central area was swarming with students, busily making their way around, looking for their classes. Fortunately, the four knew where they were already headed. \n\n\"Health sciences for me!\" Jeanie said brightly, giving her friends a squishy hug and her wife a loving kiss before loping off toward her destination. Freja watched her leave and sighed happily. \n\n\"I am very lucky, am I not?\" she mused. Alexa put her shoulder around her friend and kissed her cheek, whispering that she was indeed. Alex smiled as he looked on, knowing how close the two were. They'd been best friends forever, and they knew everything about one another. Chances were that Freja knew Alexa better than he did, and Alexa knew Freja better than Jeanie. They were soulmates, seemingly, although this was not a problem for either of their spouses, to be sure. They walked Freja to the building where her engineering courses were held and then departed for Languages. \n\n\"Looks like we're both stuck going to Intro Linguistics,\" she sighed, wishing she could be more affectionate with her nephew, her husband. But she couldn't, not yet. \"Then I'm off to Advanced Russian.\" \n\n\"Mesopotamian Intro for me, after that,\" Alex replied, shrugging as they walked down one of the halls. \"They know already I'm gonna rip through it, since I arranged their papers for them, but I gotta put in the appearance, out of principle.\" \n\n\"How terrible for you, being surrounded by Sumerian, Akkadian and Babylonian language nerks,\" she giggled. I'm going to miss you, Alex.\" \n\n\"I'll be right down the hall,\" he laughed. \"But truth be told, you know I'll miss you too, Alexa.\" \n\nShe took his hand and pulled him down a side corridor, with no one around. They rounded a corner and she leaned back against the wall, her eyes glinting with desire and her skin suddenly warm and pink. \n\n\"Kiss me goodbye, my love,\" she breathed. \"I don't care if people see us; just kiss me, please.\" \n\nThere was no chance Alex could deny her, not ever. They could have been in the main hallways, surrounded by hundreds of students who knew they were related, and he would have kissed her anyway. He pressed himself against his aunt and kissed her deeply, lovingly. She sighed into his mouth and put her arms around his shoulders, lost in him. The world did not extend around that corner. \n\nThere was only each other. \n\n*** \n\n\"Gnnnn, you incorrigible man,\" Karen grunted as she leaned over the huge, mahogany desk in her office, her shirt pulled up and her magnificent breasts swaying under her while her husband pushed his cock in and out of her wet pussy from behind, her pants pooled around her ankles. \"What if someone walks into my office? I didn't lock my door. Are you trying to disgrace me?\" \n\n\"You are no disgrace, Karen DeBourne,\" he answered, pumping against her rhythmically, his titan cock pulsing as it filled her, making her bite her knuckle to keep from moaning loudly. \"Let them walk in. Let them see why I'm the luckiest man to ever live.\" \n\n\"Oh God ...\" she gasped, her arms trembling with the effort of holding her up, unreal pleasure coursing through her. \"Michael, I love you so much!\" \n\nHis hips slapped against her toned cheeks loudly, the lovers squirming and thrusting lustily, seeking only to make one another cum. Karen, brilliant, imperious and aristocratic, was so devoted and reverent of her husband, that she could no longer conceive of life without him. Michael, the mythic and imposing force of nature, who was so enslaved to this glorious woman, who had made him the happiest man alive by saying \"yes\" to him ... \n\nHis powerful hands reached and took hold of her breasts, squeezing and making her gasp and shudder. She thumped back against him, any and all thoughts of propriety long since gone. To be honest, she'd been hoping he'd take her here in their office before their classes began, and it didn't much matter if someone had in fact come in - everyone knew they were married, the greatest power couple anywhere in the university. She just wanted him inside her and to make the man she worshipped cum in her. \n\nDespite her age, they were trying for another baby, since her doctor had told her that she was more than healthy enough to have another one, and wasn't close to beginning menopause, seemingly. She couldn't wait to give him another child, a little brother or sister for her beloved son, Alex, and a niece or nephew for her baby sister, Alexa. \n\nHer lustrous bronze hair fell around her patrician face as she panted, feeling his massive cock sawing back and forth inside her, throbbing maddeningly, so close to making her lose control and cum. Her fingers flexed against the rich wood of the desk, the scene of so many of their lovemaking sessions over the years. This university meant everything to them -- they'd met here, fallen in love here, and built their careers and lives together around it, becoming renowned physicists in every corner of the world. \n\nShe arched her back, craning her neck and groaning as he touched a spot inside her and her defences crumbled, the orgasm washing over her as she felt his thick, warm cum pumping deep inside her. Ecstasy she could never put into words blossomed through her from her core to the very tips of her hair. His powerful hands gripped her to him, holding her tight, never to let go. \n\nThe lovers finally relaxed, both sighing, his cock still deep inside her. She slowly pushed herself up from the desk, leaning back into him, her hand sliding slowly up his huge frame to caress his cheek. His hands remained on her breasts, caressing them gently. Her head tilted up and her bewitching amber eyes gazed into his ice-blue ones. Her beautiful face radiated love. \n\n\"Wouldn't it be appropriate, my heart, if our child was conceived on this desk?\" she purred. \n\n\"Pretty sure this is where we invented Alex,\" he replied, smiling down at her. He was still lost in her, even after nearly three decades of being in love. How lucky had he been, that she'd chosen him? His quip made her giggle, a sound that he never tired of. \n\n\"Invented Alex,\" she tittered. \"He's not a canonical bundle.\" \n\n\"No, that's true,\" Mike agreed, nodding. \"He's so much more than that.\" \n\nShe smiled, her fingertips on his cheek. \"That he is, my love. When he finally stops living in awe of his oh-so-mighty parents, he'll come into his own, and then there will be no stopping him, will there?\" \n\n\"Thank God he'll have Alexa, then,\" Mike mused, letting his wife slowly slide her pussy off his cock, and then turn around and kneel in front of him, taking hold of the massive shaft and kissing it lovingly before using her wicked mouth and tongue to clean him of their mingled cum. \"She'll be a moderating influence on him, and a driving force for him all at once.\" \n\n\"Mmmmm, like I was for you?\" she asked, her mouth around his member while she looked up at him and winked. \n\n\"Exactly like that,\" he agreed, his fingers in her silken hair. \"I might have still achieved everything I've done up to this point in my life if you weren't in it, but I'd still be so much less than I am, and so incomplete, if you weren't mine, Karen.\" \n\nShe shivered at his words and a single tear glistened in the corner of his eye, knowing that he meant what he said, wholly and completely. They did indeed complete one another and make each other greater than they ever could have been individually. Their gestalt was undeniable. She often thought about how much less her life had been before she'd given in to her feelings for this man, even if she hadn't realized it at the time ... \n\n*** \n\n1986 ... \n\nHe'd never considered himself a great artist, by any means, but he was convinced that he had a decent sense of form and composition, especially when working with pens and charcoals. Paints, he didn't mind, but he loved the challenge of bringing out dimensions and expressions with shades of black and white. \n\nThis wasn't a throwaway course in any way, although it had nothing to do whatsoever with his current major in Manifold Physics. There was an aspect to this art course he wanted, a means of expression outside of numbers, theorems and what often amounted to guesswork. This was all about seeing a presented subject and drawing out from it what he could sense, what it meant to him, how it felt. Numbers were impersonal; they didn't care about how he wanted them to look. There was beauty in solving the puzzle of them, but no room for interpretation. \n\nHe'd sat in this room, around this circle, several times before, using inks and charcoals to bring to life on paper or canvas whatever he was presented with, from the prosaic, such as a fruit bowl, to the exotic, such as a naked man last week. Rumour had it that they were doing another body sketch this week; he looked forward to trying his hand at the human form with his inks this time around. \n\nFifteen other students were sitting around the space, and the professor had covered the small window in the door, for the model's privacy. They were on the second floor of the building, so peeping Toms from outside were unlikely. The windows allowed in natural light in any event. The professor waited patiently while the subject got ready in a small side room. There was a padded stool in the middle of the circle of students, who had arranged themselves at various distances, according to their desired perspective of the model. \n\nThere was a knock at the side room door, and the professor went and opened it, escorting the model in. \n\nMike felt his cheeks grow warm and he looked down at his lap as Karen was led into the room, wrapped in a linen and clearly naked beneath. He could feel her looking at him as she walked by, and he could sense her blushing as well, his presence a factor not counted upon. \n\nHe squeezed his eyes shut for a moment, listening as she padded into the middle of the circle and rustled onto the seat. He wondered if anyone else could hear his heart thundering. \n\n\"All right, class, Miss Gordon has graciously agreed to model for us on this occasion,\" the professor announced as he stood next to her. She still had the linen wrapped around her and was looking around the room, a cool aloofness in her gaze. But she avoided looking at the giant blond man sitting so nearby. \"We have a full three hours to work with, so there's no rush. And now we -\" \n\n\"Excuse me.\" Mike said as he put down his inks and rose, turning and striding out of the room through the door. Everyone stared as it clicked shut. The professor blinked and looked around the room and then at Karen. Her cheeks flushed and she bit her inner lip, strangely upset by this turn of events. \n\n\"That was ... unexpected,\" the professor muttered. \"I wonder what --\" \n\n\"Hang on just a moment, sir,\" Karen said, standing up and heading to the door, still wrapped in her linen. Everyone watched as she went through the door and out into the hallway, the door shutting behind her. \n\nShe may have been standing in a university hallway in a white sheet, but her self-composure meant that she didn't look awkward at all, her hand gently holding the wrap closed at the front while she looked up and down the hallway. She spied him quite some distance away. Damn, he could travel on those mile-long legs of his. \n\n\"DeBourne!\" she called out, her lilting voice carrying down the hallway. \"Michael DeBourne, why are you running?\" \n\nAt the sound of her voice, he stopped. He wasn't discourteous enough to just keep walking, even if he wanted to. He slowly turned and looked down the hall at her, but did not budge, making no show of returning. Karen fretted inwardly, willing him to come back, but he remained still, towering and immovable. \n\n\"Well, if mountain no come to Muhammad ...\" she sighed to herself. She walked toward him slowly, her regal stride far more noticeable than her absurd garb. He watched her approach, his expression unreadable. Karen could feel her heart pounding in her chest, with every step getting closer and closer to the one man on the face of the planet who intimidated her. \n\nNot because he was threatening, no, and not just for his sheer size. It was ... everything about him. She almost didn't want to explain it, not even to herself. And she had, her whole life, always been completely honest with herself, the one person she could always rely on. \n\nAnd yet she couldn't help but have a tiny, niggling suspicion deep inside that she might intimidate him as well. \n\nHow did she feel about that? \n\nBefore she knew it, she was in front of him. She looked up at him as he towered over her, his expression unchanged. Her mouth moved slightly to one side, as if she were analyzing him. Maybe she was buying herself time, she didn't rightly know, since she wasn't quite sure why she was out here to begin with. \n\n\"Okay, I'll bite. What was that all about?\" she asked somewhat casually, still holding her sheet closed. \"I know for a fact that you've seen naked girls before. Kapuskasing isn't that Podunk, after all.\" \n\n\"I wouldn't be so sure about that,\" he said dryly. \"And you're right, I've seen more than my share of naked girls.\" \n\n\"Back to my question, then,\" she continued. \"Why did you confuse the mortals by just upping and leaving?\" \n\nHe didn't answer for several moments, as if struggling with whether he should try to answer at all. Clearly this was a dilemma for him. She wasn't used to him not having an instant and blithe answer about everything, knowing what to say. And to be honest, it bothered her. In a way, she didn't like seeing him unsettled. If he was unsettled, then who could possibly be in control of themselves in crisis moments? ",
        "\"I'm just a girl, you know,\" she pressed. \"I ...\" \n\nDammit, don't pause! Know what to say! One of you has to! \n\n\"I really think you should come back inside,\" she said, her voice soft, and actually rather kind. \"You signed up for that class; you don't strike me as the quitting type.\" \n\n\"I'm not,\" he said, his voice deep, making her control a shiver. \"I just don't think ... I don't think I should be using you as a subject.\" \n\nHer next question was possibly the cruelest she had ever asked in her entire life, but she couldn't stop herself. The cold thrill of his possible answer needed to be heard. \"Why?\" \n\n\"I ... don't know if this will make sense, but ... I respect you, Gordon,\" Mike said finally. \n\n\"You respect all women,\" she pointed out, needing his elaboration. \"You're the most respectful man on campus, and everyone knows it. You've demonstrated it countless times in the eight weeks the semester has been going on.\" \n\n\"It's different,\" he said with difficulty. \"You know it is.\" \n\n\"Do I?\" she asked, raising her eyebrow. \"Please elucidate, O sage.\" \n\n\"And if I choose not to?\" he almost growled. \"I'm not in the habit of explaining myself.\" \n\nShe fought the urge to swallow, realizing she was on the verge of going too far. She had to bring the mood back, to soften him again. It wouldn't do for him to feel she was being adversarial. There might have been a friendly, even snarky rivalry between them, but they were not adversaries. No, there was no room in her worldview where this man was her adversary. No no no. Not that. \n\nMaybe an admission was necessary. \n\nShe sighed, lowering her head for a moment before looking back up, her expression conciliatory. \"I'll be honest, then. I thought I was fully in control of everything. I've nude-modeled before, and it didn't bother me one bit. But the moment I saw you inside that classroom, I got a flush of embarrassment, such a bad one that I thought it might set this dumb sheet on fire.\" \n\nHe raised on eyebrow, although he said nothing, forcing her to continue talking. Damn him. \n\n\"It's not that I'm afraid to be naked around you, per se, at least as relates to anyone else,\" she said, lurching their conversation forward. \"It's just that I wasn't expecting ... you to be in there. For anyone else, I could just sit there like a lump, be nude, and let them do their thing. But you changed that dynamic in there for me. I don't know how or why, and you'd better not apologize. No, don't you dare, I see it in you.\" \n\nHe seemed to bite back whatever he'd been about to say. \n\n\"Maybe neither of us can answer why this is difficult,\" she sighed. \"You respect me somehow, meaning you run away when I'm nude. The thought of you drawing me nude, made me almost spontaneously combust. Stupid, right?\" \n\n\"Well, maybe a little ...\" he almost chuckled. \n\n\"So, here's what we're going to do,\" she said, reaching out and gently touching his forearm, ignoring the electric thrill of it and praying to God Almighty in His Heaven Above that she didn't get wet! \"We're going to go back to that art room. I'm going to sit on my stool, you're going to sit in your chair, you're going to sketch, draw or paint me, and I'm going to get the thirty dollars that the university pays amateur models for a three-hour session. Deal?\" \n\nHe exhaled and nodded. \"You've got a deal, Gordon. Let's do this.\" \n\nShe nodded and turned around, walking back toward the room, trying to keep a giddy swish out of her hips. He followed along behind her, looking right over her head and down the hallway. She stopped in front of the door and waited for him to open it, which he did, and she glided inside, heading back to the middle of the circle of aspiring artists, while he returned to his seat. Everyone was looking at them. \n\n\"All's well, I trust, Mister DeBourne?\" the professor asked, his eyebrow raised. \n\n\"It's been sorted out, professor,\" Karen interjected, still standing and saving Mike from answering. \"Mister DeBourne remembered that our department has a deadline on the algebra for K3 surfaces, and was rushing off to see it attended to, at the expense of his own grade in this class.\" \n\n\"K3 what?\" the professor asked, confused. \n\n\"I don't think you want me to try and explain Calabi-Yau Manifolds to you right now, sir,\" she continued. \"I was reasonably certain I knew what his problem was, since I'm part of the department as well, and so it made sense for me to chase him down. I promised to help crunch the formulas later tonight, as long as he came back and finished his class here. It's handled, sir.\" \n\n\"Unf, well, all right, then,\" the man said, obviously accepting the answer. \"We only lost three minutes, no big deal. Are we set to continue?\" \n\nEveryone nodded. \n\n\"Excellent,\" he declared. \"Miss Gordon will disrobe and stand still for a few minutes, as agreed to by her, so that you can see and feel the human dimensions you'll be working with, get a sense of them. Then she will sit, and your piece will begin in earnest. Miss Gordon, are you ready?\" \n\nShe nodded readily, but inside, she was terrified. A cold chill was giving her goosebumps. Please let everyone think it was the room temperature ... \n\nThe professor helped her slip off the linen blanket and she noticed several eyes around the room widening at the sight of her glorious body - her graceful neck, leading down into her shapely shoulders, taut dancer's muscles evident at the joint beneath her creamy skin. Her large, magnificent breasts, standing up because of the strength of her back and outer pectoral muscles; beneath, her tight, toned midriff and sensual waist, then the flare of her womanly hips. \n\nShe sensed everyone looking between her legs, at her pussy, many of them astonished. Karen kept herself shaved completely clean, except for a narrow strip of trimmed auburn hair just above. She loved how it looked, how it felt when a breeze kissed her privates, how it felt beneath her clothes, or when another girl was squirming their womanhood against hers, like Lisa did with her almost nightly. \n\nHer supple thighs tapered down into her long, elegant legs and perfect feet. She pivoted slowly, holding her arms out to the side so that people could see not only her toned behind, but her obliques and indeed every corner of her body. \n\nCould they see her heart pounding in her chest? \n\nWas he looking at her? She couldn't look at him right now. She couldn't. She'd forced him to come back into the room and do this, and now she couldn't look at him. Did he think she was a hypocrite? \n\nShe risked a glance into the glass front of a cupboard of supplies nearby, looking in his direction - he was indeed staring at her, although she was reasonably certain that he was not aware of her looking back at him right now. Her gaze moved on as her body turned, feeling over a dozen pairs of eyes on her, and only caring about the one. Only excited about the one. \n\nTerrified by the one. \n\nShe then sat up slowly on her padded stool, her back straight, her knees pulled together, but slightly offset from one another, and one hand on her lap while the other rested at her side on a corner of the stool. She turned her head and gazed off into the distance, the outside world and blue sky capturing her notice. \n\nThus began the longest, most terrifying and thrilling three hours of her life. \n\n*** \n\nThe present: \n\n\"There you two are,\" Karen said as Alex and Alexa walked up, joining her outside one of the lecture halls. Standing with her was an elderly woman, wearing a long white lab coat with many pockets and spectacles balanced on her nose. \"This is Professor Lindt. June, this is my younger sister Alli, and my son Alex.\" \n\n\"Ah, yes,\" she said in a clipped tone, shaking their hands. \"Heard about you both from some of my friends over in Linguistics. They said you both did wonderful work for them over the summer.\" \n\n\"I wish our students were that inspired,\" Karen sighed, looking grim. \"Maybe a reward system would spark some interest.\" \n\n\"I have some stickers about theoretical physics,\" Professor Lindt offered. \"Five of them, back in my office.\" \n\n\"Well, you can't know both, now, can you?\" quipped Alex, smirking. The elderly woman just stared at him. \n\n\"You'll have to forgive my son; he was dropped on his head,\" Karen said. \n\n\"Oh, goodness, that's terrible!\" June gasped. \n\n\"Yes, it will be,\" Karen agreed dryly. \"Alli, would you be so kind as to stow this rapscallion in my office while I wait on my husband with June, please?\" \n\n\"As you wish, my lady,\" giggled Alexa, turning to Alex and pointing at the solid wooden door of her sister's office. \"Move it, smart-arse.\" \n\nAlex hung his head and walked in dejectedly, with his aunt following him and closing the door. She leaned back against it and stifled a giggle. \"You're awful, you know that? My poor sissy's going to have no friends left in the department if you keep making physics jokes.\" \n\n\"Hey, I was proud of that one,\" he replied, grinning as he sat in a large chair. \"I thought that was pretty darn good, in fact.\" \n\n\"It is my experience, smarty-pants, that true physicists rarely have a sense of humour about their line of work,\" she lilted, sauntering over to him and settling down onto his lap, her legs on either side of him and her arms around his shoulders while she looked into his eyes. \"Lay scientists, maybe, and students, certainly. And your father, definitely. But physics jokes, especially at their expense, just makes the lifers angry.\" \n\n\"Cry me a river,\" he sighed, shaking his head and putting his hands on her waist. \"Can you imagine how dreary it would be if our profs over in Lingo didn't have a sense of humour about themselves?\" \n\n\"Maybe, but they can tell jokes in other languages,\" Alexa mused. \"Best these old sad-sacks can do is just buzz at one another in scrap-code.\" \n\n\"My father must drive them utterly insane,\" Alex chuckled. \"Mom's not actually annoyed, she's just keeping up appearances. She can't side with me at their expense.\" \n\nAlexa, though, was seemingly done with talking, because she leaned in and pressed her lips to his, kissing him deeply. She moaned into his mouth as her tongue sought out his and tangled with his. He brought her in closer, so that her magnificent breasts squashed to his chest. It felt so good, and so natural, to have her nestled to him this way, as if it was meant to be. Which of course, it was. This was the universe in balance, for a change. \n\nShe shivered as his hands reached up and began fondling her breasts through her shirt, squeezing her just so, and making her warm and moist. Her fingers flexed on his shoulders and she began squirming almost involuntarily on his lap. \n\n\"Mmmmm, you want me to just tear your clothes off right and fuck you here, my love?\" she whispered in his ear. \"Because if you keep molesting me like this, that's what's gonna happen.\" \n\n\"Sounds good,\" he breathed, kissing and biting her neck, making her shudder. \"I've been wanting you all damn day, Alexa.\" \n\n\"You have?\" she almost moaned, craning her neck to the side, letting him kiss her and squirming even more heatedly. \n\n\"Yes, zek ki angu,\" he whispered, making her whimper. \"You are my beloved.\" She loved it when he spoke those ancient languages in her ear, as much now as when he spoke to her in French. She was beyond the point of caring to control herself, and reached down to unzip his fly and pull his hardening cock out of his pants. As she was stroking it, Alex was hastily unbuttoning her pants and then making her stand so he could pull them down, followed by almost tearing off her soaked panties. \n\nUnable to wait a second longer, Alexa jammed her mouth against her husband's and squirmed around until her slippery pussy found his throbbing cockhead. She almost trapped it between her netherlips and sank down steadily, groaning in relief as he filled her. They kissed heatedly as she began to move up and down, fucking his cock deep inside herself. Alexa's hands snaked under her shirt and bra to clutch her soft, full breasts and she shook in response. Her fingernails flexed on his shoulder blades. \n\nShe rode him steadily, controlling her normally unrestrained passions and not moaning loudly. Even Karen's thick wooden door wouldn't drown that out if people were walking by. This was by no means the first time they'd made love in her sister's office, far from it - but they'd never been so daring with so many people around. \n\n\"Mmmmm, Alex ...\" she murmured through the kiss, squeezing his shaft with her eager slit. He felt so good, throbbing inside her, so perfect - like nothing she'd ever known before. They grappled onto one another as she writhed in his lap, her pussy now making very wet sounds as he invaded her. Unreal warmth was flushing over her, the heavenly tingling building in her core and spreading out. She was almost floating, and she could feel his cock swelling, pushing apart her walls as he prepared to cum in her. \n\nAlex pulled her tight against him and she arched her back and craned her neck, her golden hair spilling over his knees as she fought to not scream. Her frothing pussy clenched him savagely as he began pumping his pearly cum deep inside her. She gyrated and ground with abandon on his lap, whimpering instead of crying out loudly. His hands were on her breasts, squeezing them as she leaned into him. Alex bit her shoulder to control his moan. \n\nThe lovers collapsed into the chair, panting and trembling as the last waves of unreal pleasure washed over them. Alex's thick, sticky cum almost bound her to him, which was fine, since neither showed any interest in moving. Alexa was breathing heavily, her entire body floating somewhere. Her sapphire eyes fluttered open, looking into his. Glassy with contentment, they expressed her endless love for him, in ways no mere words could. Her fingers came up and touched his lips, caressing them gently. \n\n\"Every person on earth could come marching in right now, and I wouldn't care one whit,\" she whispered to her husband. \"There is no shame or embarrassment in my love for you, Alex.\" \n\nHe smiled and rubbed his nose against hers, making her scrunch her face and giggle. \"I'd fight 'em all, no question. You and me, against the whole world. Otherwise, it wouldn't be fair.\" \n\nThey kissed again, with Alexa still rocking up and down slowly on his lap, milking the last of his cum into herself, where it belonged. The perfection of this moment, like so many of their others, could never be overstated. She flexed her cheeks each time she went up, squeezing him inside her, while moaning into her mouth. Finally, she felt him relax and begin to slowly soften, and she settled gently on top of him, her head resting on his shoulder. \n\nNot surprisingly, the office door opened, and in walked Karen, followed by her hulking husband. She'd made it as far as her desk, before she noticed them and paused, simply staring. If Alex and Alexa were aware of them, they were too tired and contented to care, because they simply didn't react. \n\n\"Millennials,\" Karen sighed finally, shaking her head as she looked at them. \"No impulse control. We weren't even outside for ten minutes, you two.\" \n\n\"Impulse control is overrated,\" purred Alexa, turning her head to smile at her sister, her deep sapphire eyes still heavy-lidded. Her ass was perfectly visible, as was no doubt her pussy, split apart by and still impaled on Alex's cock. \"Impulse control gets in the way of happy.\" \n\n\"She's got you there, Kar,\" Mike mused, smirking at his wife. \"I had you bent over this very desk not eight hours ago.\" \n\n\"Don't tell them that,\" Karen hissed, shooting him a look while Alexa giggled. \"If you tell them, they'll think they won! Now I have to Scotchgard that damn chair again.\" \n\n\"Why do you even keep it in here if you don't want it used for this?\" Alexa asked saucily. \n\n\"That's exactly why it's in here,\" Mike replied. \"But usually it's just for her and I to -- oof!\" \n\n\"That'll be enough out of you, Quisling,\" Karen muttered, pulling her elbow out of his ribs. \"They'll be in our damn bed next, defiling that when we're not looking.\" \n\n\"Nooooooo,\" Alexa replied, shaking her head. Her face was still flushed and shining with her exertions. \"Still lots and lots and lots of surfaces in the house to violate before we make it that far. I promise, sissy, your bed'll be last.\" \n\n\"Oh, it ab-so-lutely will be the last place you make love, little sister, I assure you,\" said the auburn beauty, nodding and making Alexa snicker. \"It'll be the last place you two ever do anything, in fact.\" \n\n\"Ooh, Alex, I think your mom will kill you if she finds you drilling me in her bed ...\" Alexa whispered to her husband, wiggling on his lap. \n\n\"I'll just make another child,\" Karen confirmed. \"Make another one, and then I'll tell him what an idiot the last one was.\" \n\n\"Well, I'm pretty sure I've already melted his brain right now,\" said the blonde girl, kissing his nose. \"Mine too, actually. You two might wanna occupy yourselves for a minute or two with your nerdy science tomes while I clean my husband up ...\" \n\nKaren and Michael busied themselves with arranging some books on the shelves while Alexa sighed as she slowly pulled herself off Alex's cock, which now flopped limply on his leg. She giggled as she knelt and then took his member into her mouth, cleaning him off. She couldn't help but notice that his jeans had very obvious dark, sticky spots all over them from her cum. \n\n\"Hm,\" she mused, frowning, and causing Alex to look down dazedly at his own lap. \"Didn't quite think that one through, did we?\" \n\n\"Awww,\" Karen said in a sweet-sarcastic tone, gazing at the young lovers with her hands clasped together. \"My little boy's first walk of shame through campus. They grow up so quickly ...\" \n\n\"Har-har, sissy,\" Alexa muttered. \"I know, I know, 'unthinking millennials,' right? Looks like my jeans are pretty gooped up too. Guess it's a double walk of shame. And here I thought we'd last at least one semester before we accidentally outed ourselves as a couple. The first day hasn't even ended yet.\" \n\n\"Luckily for you, Generation X learned to think ahead,\" Mike declared, going over to a closet in the far wall and opening the door. He rummaged around for some seconds before backing out, now holding two pairs of jeans. \"Here you go.\" \n\nAlexa frowned slightly in confusion as she took the proffered pants and looked at them, checking the measurements. \"They're even the right sizes,\" she said, looking up at her sister and brother-in-law. \"How did you -- \" \n\n\"We know your sizes, of course,\" Karen said, shrugging. \"And once we knew you were a couple, and that we'd been leaving you two working here together over the summer, it seemed like a perfectly sensible precaution, because this situation here was bound to happen now, wasn't it?\" \n\nAlexa sighed, bowing to the inexorable logic of her older sister and her mighty husband. She almost felt outsmarted, but in truth, she should have been grateful for their foresight. Silly millennial. \n\n\"Thanks, Kar,\" she said almost sheepishly. \"I appreciate it. I guess we do have a small issue with impulse control.\" \n\n\"Oh, don't worry, there's plenty more pairs of jeans in that closet for the two of you,\" Karen replied casually while flipping through a textbook. She didn't see the look her little sister shot her before sighing and standing. Alexa turned around to ask her a question, but Karen had already absently reached into her purse and fished out a tiny black thong, tossing it to her. \n\n\"It's one of mine, but I doubted you'd care, right? Got some sani-wipes in the little drawer on your right there, of course ...\" \n\nAlexa squeezed her eyes shut for a moment before looking at Mike. The titan man just wrinkled his nose and shook his head. ",
        "\"I'm not loaning Alex my underwear. You're on your own, squirt.\" \n\nAlexa quietly hiked up the thong and then put on the jeans, trying to resent the perfect fit, but failing. She then dressed Alex and made them both presentable before they joined the older couple at the desk. It was Karen's office, of course, so nothing actually needed arranging, but they had done the youngsters the decency of given them some momentary privacy. Alexa was positively glowing, whereas Alex was wearing a barely concealed smug smirk. \n\n\"I have no idea how you two managed to get away with your relationship right under our noses through just about the whole summer,\" Karen sighed. \"It is so obvious now, looking at the two of you.\" \n\n\"Parent visors, obviously,\" Alexa quipped, holding her hands behind her back and rocking back and forth on her heels with a saucy smile, her cheeks still rosy. \"I mean, I'm glad we did, and sorry we had to, and not glad that we did, and we --\" \n\n\"Alli, you're orgasm-babbling, darling,\" Karen chided. \"Well, we can't have the two of you seen together in your current condition. Alex, drive home with your father, and I'll take Alli home in your car.\" \n\n\"Ja wohl, mein mommandant,\" he said cheerfully, turning and kissing his aunt lovingly before exiting the office with his father. Karen smirked as she looked at her little sister, smiling dreamily at the door. \n\n\"I know that look,\" she mused, walking around her desk and opening a drawer to pull out a bottle of old vine Zinfandel, along with two small glasses. \"I still get it every time Michael kisses me.\" \n\n\"We got really lucky, didn't we, Kar?\" Alexa sighed, accepting a half-full glass from her sister and leaning against the desk while she sipped, still staring at the now-closed door. \"The DeBourne men are the best thing to ever happen to the Gordon-Blackwell women.\" \n\nKaren nodded as she sat in her chair behind the desk, gesturing for Alexa to pull over another one. Alexa avoided the chair she had just fucked Alex in, and sat next to her sister, enjoying the caress of the strong, dark wine on her tongue. It was almost sensual, especially in her present mood. Perfection. \n\n\"It was certainly a losing battle for me,\" Karen agreed. \"Not that I put up much of a fight. Once I realized that I could very easily fall for that oversized joker, I didn't resist it, per se, so much as I kept opening up other doors and venues for myself, to give myself options, or at least pretend I had options.\" \n\nAlexa giggled. \"My willpower was shot mere days in. You showed a lot more self-control than I cared to. It still amazes me on occasion that you don't hate me, I gotta admit.\" \n\n\"Alli, we couldn't possibly,\" Karen replied. \"Okay, maybe if you'd ground him up and put him in a soup, I'd be upset about that. But you two falling in love? Speaking from personal experience, I know what you were up against. Just because you're related to him doesn't mean that you're immune to the destiny of DeBourne men. You'll see what I mean when you meet the others.\" \n\n\"I can't wait,\" Alexa sighed, running her fingers through her long, golden locks as she sat sideways in her chair and looked at her sister. \"It's like getting back more of my family that I've never met.\" \n\n\"You won't remember, since you were newly born, but you have indeed met them,\" Karen mentioned. \"They were all there when you were born: Orion, Annette, Connor, Ronnie, Josh, Stevie, Cam ...\" \n\n\"Will they come down here, or will we go up to Kapuskasing to meet them?\" asked the younger sister. \n\n\"Oh, I'm sure they'd happily come down, but knowing Michael, we'd take a road trip up,\" Karen answered. \"Surprise them. A surprise DeBourne bash has to be experienced; there's no decent way to simply describe it.\" \n\n\"Think they'd mind if we brought Freja and Jeanie along?\" Alexa queried. \"Freja's my family, and I love Jeanie, y'know.\" \n\nKaren smiled. \"Of course we'll bring them. They're family, after all, even if they're crazy.\" \n\nAlexa's eyes shone, bordering on tears. \"I've really led a charmed life, haven't I, Kar? Nothing truly terrible has ever happened to me. I guess that's why I ran when I thought my world had crashed; I just felt so guilty and wanted to bring all the hurt with me and away from you and Mike and Alex.\" \n\n\"Noble, if somewhat misguided,\" Karen replied in a reassuring tone, smiling at her sister. \"Truth be told, my life was pretty charmed in most ways too, at least until dad began to lose his marbles. Not only did I have to watch his degeneration, but I had to fight off the ravening wolves who were Blackwell family members, eager to take the controlling interest in the business away from him. I have never been more thankful for Michael than during those days, let me tell you. He was my rock that I leaned on for survival. He kept me strong, when it came to dealing with them, fighting for our family's integrity.\" \n\n\"Mom never told me why she took me away so suddenly, telling no one where we were going,\" Alexa sighed. \"Not even me. I guess she considered it so intensely private a matter between her and dad that she never wanted anyone else to know.\" \n\n\"Mom was one of the strongest women I ever knew,\" Karen agreed, nodding somberly. \"Her and Annette, Michael's mother. But you're right, something terrible must have finally happened, because she didn't dare tell us where she'd gone, and the note she left behind only said that she loved us; it gave no clues. It just said to trust her.\" \n\nAlexa wiped at the corner of her eye. \"She didn't want anyone to know. She loved dad so much, Kar. Sure, she had lovers when we were in Europe, but there was only ever dad in her heart. She never let me forget how magnificent a man he had been. She just never told me what drove her away.\" \n\n\"She wanted me to remember him as he was when they were together and happy,\" Karen said wistfully. \"Not tainted by whatever happened. I imagine that's why she never told you, either. Bless her for trying, Alli. You're back with us now, and not knowing is hardly the end of the world.\" \n\n\"True,\" Alexa agreed, taking another sip and lightening up considerably. \"After all, if I hadn't gone away, Alex probably wouldn't be named after me, and I never would have just been smitten by him in an airport terminal and fallen in love.\" \n\n\"Like I said, I understand about inevitable ...\" Karen agreed, refilling their glasses. \n\n*** \n\n\"So mom really started going to the pub and singing karaoke of her own volition?\" Alex asked as he sat in the passenger seat while his father drove them home. \n\n\"She chose to, yes, but that's not how she explained it to me, either,\" Mike replied, turning them off the highway. \"She said that she grudgingly ended up doing it because it would make me happy, even though we were a long way off from being an item yet.\" \n\n\"I still think it's funny how hard you two fought it,\" Alex chuckled. \"You're the most perfect couple I can think of, and you made it so difficult for yourselves.\" \n\n\"It's a scary thing to fall that hard,\" Mike said, still driving. \"You know that as well as I do. To be honest, I rather envy the mindset you and Alli are allowed to have these days about just going for it. Even back in the mid-Eighties, it wasn't as simple as that, especially when you consider how different our backgrounds were.\" \n\n\"Which is why mom voluntarily doing something as goofy as karaoke is so funny to me.\" \n\n\"Well, sometimes, the goddess comes down from the mountain to celebrate with her mortals,\" Mike pointed out. \n\n\"Is that what mom is for you?\" Alex laughed. \"A goddess on a mountain? What does that make you?\" \n\n\"I'm the great dragon who is eternally and slavishly devoted to her, protecting her and making the world perfect and safe for her,\" Mike said, his voice carrying an undertone of purpose and seriousness. \"Nobody's ever been luckier than me.\" \n\n\"How does mom see things, then?\" Alex asked. \n\n\"Guess you'd better ask her,\" his father replied. \"I'd never presume to know the mind of a goddess.\" \n\n*** \n\n\"Me?\" Karen mused, while her little sister sat next to her, curiosity in her eyes. \"Oh, I'm just the girl who climbed the mountain, so that she could see the great dragon that ruled the earth,\" she said simply. \"His eyes met mine and I've never wanted to be away from him. The girl turned into a little bird so that she could always fly around him and sing to him, to make him happy. And at night, she rests on the mountain while he watches over her.\" \n\n\"That's so romantic,\" Alexa sighed, her eyes dreamy at the thought. \"You're everything Alex and I aspire to be as a couple.\" \n\nKaren smiled and squeezed her sister's hand. \"Have faith, and you two will be so very much more ...\" \n\n*** \n\n\"Well, look at that,\" Karen mused as she walked down the hall with Lisa, Mona and Janet. Behind them strode Mike, pacing himself so that he didn't step on any of them. \"You drew me naked and nobody expired in shock.\" \n\n\"Will wonders never cease?\" Lisa laughed. \"I'm still blown away by how readily Kar suddenly turns into Lady Godiva. Seems like more of a Janet thing to me.\" \n\n\"I have never been shy about my body,\" Karen replied, shrugging. \"I am perhaps just not flagrant about it, like so many girls in this day and age. It's a work of art to be marvelled at, or a shrine to be worshipped at.\" \n\n\"Said she modestly,\" Mona quipped, smacking Karen on the behind while the all walked. Mike just followed quietly. \"So, big man: Was it everything that every guy on campus dreams of?\" \n\nKaren blushed slightly, not knowing how DeBourne would answer that question. If his answer was honest, it would be either boring or embarrassing for him. If he chose to be snarky, he'd be doing it at her expense, and she didn't see that happening either. \n\n\"Guess you should've taken the course and found out, eh?\" was his response. Perfect, thankfully. Mona protested the non-answer, but eventually gave up. They dropped her off at her Ren Art class, and then Lisa at Women's Studies. Karen, Janet and Mike continued on through the campus, until Mike was ready to split off outside his dorms. \n\n\"Well, then,\" Karen mentioned, turning and looking up at him. \"In the interest of parity...\" \n\nMichael's expression soured. \"You're joking, right?\" \n\n\"Do I look like I'm joking?\" Karen asked. \n\n\"Unfortunately, no, I can tell you're not.\" \n\n\"Parity between us, DeBourne, is one of the great balancing forces in this universe. It wouldn't do to have things knocked off-kilter, would it?\" she reasoned. \"Take your time, mentally prepare yourself, but make sure you show up.\" \n\n\"Yes, Your Highness ...\" he muttered as he turned and walked through the doors into his dorm. \n\n\"You really shouldn't poke the bear like that,\" Janet snickered. \"He could just turn around and eat you suddenly, you know.\" \n\n\"I can think of worse ways to die, I admit,\" Karen said simply as they resumed their walk. \n\n*** \n\n\"Oh, Miss Gordon!\" said a throaty voice, calling after her down the hallway. \n\nShe turned and smiled genially. \"Professor Graydon, what a pleasure. How may a humble physics student help the art department?\" \n\n\"Oh, I do not need your help, my dear,\" he intoned as he caught up with her. \"I meant to thank you for modelling for us a few weeks ago, is all. You were a splendid model and many of my students turned in their best works that day.\" \n\n\"I'm sure it's your teaching methods and not the reference material, sir,\" Karen replied. \"The credit is yours, I assure you.\" \n\n\"I just thought that maybe you would care to come and see some of the works you inspired,\" he suggested. \"I don't make a habit of showing the models, and they mostly do not care, but I would like for you to make an exception.\" \n\nShe considered and then nodded. \"It can't hurt, I suppose. Lead on, sir.\" \n\nKaren followed Professor Graydon back to his studio, where she had modelled for him some weeks before. He led her over to a corner of the room. Several canvasses were placed together, as if set aside. He began showing them to her, commenting on their various uses of form, abstraction, light and colour. She looked and nodded, guessing which ones were sketched or painted by women, and which were done by men. \n\n\"But this one ...\" the professor said, pulling a particular one out of the group, \"... I think you will find quite exceptional.\" \n\nKaren stared, the breath subtly leaving her body. \n\n\"It looks like a Roman bust ...\" she said quietly. \n\n\"Indeed,\" confirmed the professor, nodding. \"It is not often one sees a portraiture in another medium than sculpted. But here it is, and the results are magnificent.\" \n\nShe tried not to gawk. She thought of the intent behind the Roman medium, how, unlike the Greeks, with their glorification of the whole human form, the Romans concentrated on the heads of their subjects, capturing expression and character in a way no other culture ever had. \n\nThe space was dominated by a black and white sketch of her from the collarbone up, her neck turned slightly and her eyes gazing into the distance. It was uncanny, but through the artist's use of shading, one could almost tell what colour her eyes were, the shade of her hair, and the blush of her lips and cheeks, even though it was simply charcoal on an off-white canvas. \n\nOff to the side, a small, detailed image of her naked body sitting at rest took up the lower right corner, no more than a reference for the main thrust of the endeavour. \n\nIt was beyond beautiful. There was a reverence of the subject that gave her a chill. \n\n\"Remarkable, isn't it?\" mused the professor, smiling as she stared. \"It's good enough to be in a gallery. But I think you should take it.\" \n\nShe blinked. \"Sh-shouldn't the person who actually did it take it back, then?\" \n\nHe shook his head. \"They didn't want it. Would you like to know who -\" \n\n\"No, it's quite all right, professor,\" Karen interrupted, her mouth and throat dry. She was pretty damned sure that she already knew who it was. \"I think I'd prefer to not know, if it's all the same to you. Sometimes, a little mystery in one's life s a good thing. But if they ever want it back for some reason, please inform me yourself, so I don't find out when they come to collect it.\" \n\n\"As you wish,\" he said, shrugging. \"Allow me to at least wrap it and protect it for you.\" \n\nShe acquiesced to the suggestion, and was soon walking it down the hall, holding it as if she expected it to be stolen from her. She hurried back to her dorm room and stuck it under her bed, before sitting quietly and just staring blankly at the opposite wall for several minutes. \n\nWould her heart never stop thundering? \n\n\"Heya, sexy,\" Lisa said cheerfully as she came in the door. \"You look downright haunted. Everything okay?\" \n\n\"Oh, yes, yes ... fine ...\" Karen said distractedly before blushing. She hated getting caught staring off into space. \"Just stuff on my mind, is all.\" \n\n\"Well, what are my chances of distracting you?\" the slender redhead purred, gliding over and sitting beside her on her bed and leaning in. \"After all, we haven't done it in nearly twenty-four hours.\" \n\nSome minutes later, Karen was lying naked on her back with her legs spread, while Lisa lapped hungrily at her slick pussy. She moaned and sighed, squirming herself against her lover's mouth, but her mind was elsewhere, lost in thought about the portraiture. Even through her climax, Lisa never noticed Karen wasn't really there. \n\n*** \n\n\"It's only a paper moon, sailing over a cardboard sea. \n\nBut it wouldn't be make-believe, if you believed in me! \n\nNow it's only a canvas sky, hangin' over a muslin tree. \n\nBut it wouldn't be make-believe, if you believed in me!\" \n\n\"Y'know, I really don't mind these karaoke nights anymore,\" Janet mentioned as she watched the blond behemoth sing the classic song onstage. \"T'be honest, it looks like Mike has caused the quality of the singing to go up a little, y'know? Because he's good at it, he's subtly influenced other people to try and not sound so shitty, I mean.\" \n\n\"They're still not great, mind, but at least we get these interludes with him,\" Mona agreed. \"Weird though, that he's picked karaoke to be a hobby. Isn't he from some little town up north?\" \n\n\"Yeah, I think he told me Kapuskasing,\" Janet replied. \"Is that right, Kar? ... Kar?\" \n\n\"Hm?\" Karen murmured, turning to look at her friend. \n\n\"Jesus, what crazy physics do they have you working on?\" Janet asked, making a wry face. \"You've been a space cadet for days now, it's freaking me out.\" \n\n\"My deepest apologies,\" Karen said dryly. \"Why was it that you ripped me away from my reveries?\" \n\n\"I was just trying to remember where DeBourne was from,\" Janet explained. \"Is it Kapuskasing?\" \n\n\"Why am I supposed to know?\" queried the auburn-haired girl. \"I wasn't the one sleeping with him.\" \n\n\"Yes, but you remember everything you're told,\" Mona pointed out, gesturing with her beer. \"There are some mornings that Janet can't remember which foot is her left.\" \n\nKaren rolled her eyes. \"If memory serves, he is indeed from Kapuskasing. Why are we pondering this?\" \n\nMona shrugged. \"We just thought it was a weird thing for someone from a small town to be into, y'know?\" \n\n\"Not really,\" Karen sniffed. \"It's northern Ontario, not the boreal forests of the Arctic.\" \n\n\"Wow, did you just defend your great rival?\" Janet laughed. \"Now I'm not so sure it's physics problems you're spaced out about.\" \n\n\"Oh, be serious.\" Karen almost snapped, giving her friend a look. \n\n\"Now that you mention it, she did acquiesce to coming to karaoke night pretty easily,\" Mona added, pouring gas on the fire and giggling. \"Normally it's like pulling teeth.\" \n\nThe pair kept snickering while Karen scowled at the table. Lisa watched on quietly, smiling at her dear friend. \n\n*** \n\nMichael stood outside the door to the classroom, wearing a long robe that barely covered his massive frame. He grumbled to himself, wondering why parity was always so damned important. People walking by in the hallway stared as much as they dared while passing him. \n\n\"You'd better get in there already, they're probably waiting on you.\" \n\nHe turned around and tried not to frown, as he saw Gordon looking up at him, several physics tomes pressed to her chest. \n\n\"Why aren't you in there and ready to draw?\" he almost demanded. \n\n\"Oh, I'm not taking that course,\" Karen replied, shrugging. \"I have no talent for the visual medium.\" \n\nMichael could feel his eye twitching as she sauntered off. His hand gripped the brass knob of the door so tight, it almost bent under the pressure. He opened the door and walked in stiffly. \n\nKaren stopped around the corner and leaned back against the wall, staring at the ceiling and sighing. Why did her heart pound in her chest every damn time she was near that infuriating man? \n\nShe bit her lip as she lowered her head and closed her eyes, wrestling with herself. \n\n\"Don't do it ... don't do it ... don't d- ... dammit ...\" \n\nAnnoyed with herself, she walked back around the corner and down the hallway toward the door of the art room. Her heart was still thumping as she approached. She stood in front of the door, relieved that the professor had pulled the blind down to give the students privacy. \n\nHowever, the blind was slightly askew, meaning that the interior was not totally blocked from view, if someone were to lean in close and look at the corner. \n\nKaren glanced left and right down the hallway, making sure no one was approaching, and leaned in, looking inside the room. \n\nShe spun and threw herself against the wall beside the door, trying not to gasp and to control her breathing. Her eyes must have been wide as dinner plates, she was certain. \n\nDear God above, how many men suffered shortcomings to allow for that to exist?! ",
        "She hustled down the hallway, acutely aware of how warm her cheeks felt, and hoping she could make it to a washroom before anyone saw her. \n\n*** \n\n\"So you drew that picture of mom that's hanging on the wall in your room?\" Alex asked, sitting on the couch next to his wife, his arm around her shoulder while she cuddled into him. \n\n\"Yup,\" Mike replied, caressing Karen's legs as she lay across him on the chesterfield across from Alex and Alexa. \"Most inspired thing I ever worked on in my life.\" \n\n\"And Kar never got the chance to return the favour?\" Alexa teased, winking at her sister. \n\n\"No,\" Mike said, shaking his head. \"It wouldn't have been a portraiture in any event; she would have drawn ... other aspects of me.\" \n\n\"Draw or paint what you're truly passionate about,\" Karen added, shrugging, making Alexa giggle. \"But yes, seeing that picture your father drew would complicate my life for some time to come, I must admit.\" \n\n\"Why?\" \n\n\"Because it made me confront an obvious deep reverence he felt, and, even worse, made me look inward about my own feelings.\" \n\n\"Did you know at that point you'd fallen for him?\" Alexa asked. \n\nKaren shook her head. \"Even subconsciously, I was nowhere near ready to admit that to myself, even if it was true, or just a losing battle. No, Michael and I dated other people for some time after that still, although we mysteriously found ourselves in one another's company quite often.\" \n\n\"I still think it's romantic.\" Alexa sighed. \n\n\"I think you're all nuts ...\" Alex muttered, making them laugh. \n\n*** \n\nThey sat on the sward of grass that the campus centered around, watching as Alex charged up and down the field, playing (mostly) touch football with other students, while Alexa had thrown the ball with surprising strength and accuracy. \n\n\"Quite a pair, aren't they?\" Karen mused as she watched the action. It looked like she was drinking coffee out of a plastic thermos cup, but it was really wine. One never knew when some student with too much time on their hands might get triggered. \n\n\"It'll be a great day when they don't have to hide it anymore,\" Mike agreed, sitting next to her and nodding. \"Then their lives really begin.\" \n\n\"I'll miss them if they move out,\" Karen sighed wistfully, a touch of the forlorn in her tone. \"I'll miss Alex so much, and I only just got Alli back.\" \n\n\"I don't think Alex is going anywhere,\" stated her husband, smiling as Alex leapt in the air and made a magnificent catch, reeling the ball in with his right hand. \"He's very much a DeBourne, and we tend to stick close by to one another. I was the exception to the rule, because I was so different. And Alli'll happily go or stay with him, no doubt.\" \n\n\"I'm glad to hear that,\" Karen said, smiling warmly. \"Although I still want another kid, just in case. I'm not ready for empty-nest syndrome, I will have you know.\" \n\n\"I'm not ready for you to have it either,\" Mike chuckled. \"All the sex would probably kill me.\" \n\nShe giggled and batted his arm before turning to face him, her tawny-amber eyes warm with love. She saw no point in hiding her feelings for him from anyone, because as far as she was concerned, the world needed an example of what True Love was all about. \n\n\"My one true regret in life, DeBourne, is that I made you wait so long before I finally consented to marrying you. I should have let you bop me on the head with a club and carry me off to your cave in Kapuskasing the moment I laid eyes on you in that dumb pub.\" \n\nHe nodded and caressed her cheek with unreal gentleness, something hands so large would seem incapable of. Yet he had infinite capacity for tenderness with this woman, this goddess who made his life worth living. He couldn't imagine life without her, and heaven help reality if it ever tried to take her away from him. \n\n\"And my true regret in life, Gordon, is that I didn't express my feelings for you earlier,\" he said quietly, so that only she could hear him, while the noise and chaotic campus fell away around them. They might as well have been in the middle of a field a thousand leagues wide, for all the difference it made. Nothing existed for them, except one another. \"It was fun, sort of not courting you, but falling for you all the same, but everything up to admitting how in love I was just seems like a waste of time.\" \n\n\"No moment I ever spent with you was wasted,\" she whispered, her heart beating in her chest and her throat feeling tight. \"My only wasted moments were when I wasn't with you, or even thinking about you, because I cherish those moments too, Michael.\" \n\nBlue eyes and amber eyes were lost in one another, an eternity of devotion and love displayed. Moments like this were perfection, never to be forgotten. \n\nThe great dragon and the girl-goddess would never part. \n\n*** \n\nAuthor's Notes: Mike and Karen in the past may keep desperately dancing around their decidedly inconvenient feelings for one another, but it's becoming increasingly obvious to everyone else that they're a destined pair. Of course, we already knew this, but I'm hoping that their uncertainties still come across through the narrative. \n\nI've been holding on to the \"dragon and goddess\" analogy for a while now, and figured this was as good a place as any to use it. The storytelling about their past is getting more organic, meaning that it's not always set up by Karen announcing 'Story time!' and Alex and Alex pulling up chairs to find out how Mike and Karen got together. By now, it should be obvious that's what's happening, right? \n\nNot a lot to explain about this chapter, so I guess I'll just announce that Twin Cities Tryst chapter 6 is up next, followed by Sapphic Serenity. Once TCT is completed, I'm submitting another story that I hope people will find exciting. \n\nThat's all for now. Hope summer's approach is treating you all well. \n\nKeep your stick on the ice! \n\nManagement"
    ],
    "authorname": "BiscuitHammer",
    "tags": [
        "romance",
        "humour",
        "aunt nephew incest",
        "lesbian",
        "destiny",
        "romantic"
    ],
    "category": "Incest/Taboo",
    "url": "https://www.literotica.com/s/mike-and-karen-ch-05"
}
{
    "title": "Three Square Meals Ch. 053",
    "pages": [
        "Dana and Rachel both looked delighted when they strolled into the hangar with Associate Bhaken, and they waved jubilantly at John, Alyssa, and Irillith who were waiting by the Raptor gunship with Jade. The two girls spoke earnestly with their Trankaran guide for a moment, thanking him for being such an excellent host as they waved him goodbye, before jogging over to rejoin their friends. \n\nAlyssa sighed with relief as John dropped his mind-shield, and when she was able to listen to his inner voice, he seemed more like himself once again. His behaviour seemed to be increasingly erratic of late, acting distant and out of character, and she was getting more than a little worried. Jade had been the first of the other girls to notice anything, and it had been a big relief to be able to share her concerns, having kept it to herself to avoid troubling them. Dana and Rachel rushed over with eager smiles on their faces, and she turned to listen to the redhead as she began to speak.\n\n\"That was awesome!\" Dana exclaimed, bouncing up and down with excitement.\n\nJohn smiled at her, and asked, \"Things went well with the Forgemaster, I take it?\"\n\nTo his surprise, it was Rachel who answered first, and she beamed as she replied, \"These Trankarans are so friendly and helpful! The Forgemaster had a male and female assistant, who both let me take some genetic samples. They agreed to let me scan them too!\"\n\nDana nodded animatedly, and said, \"And I've just spent the last hour having a fascinating chat with Forgemaster Gilgrem about metallurgy. Associate Bhaken wasn't exaggerating about the Trankarans having a gift with metals, they really know their shit! They're also mining several metals I've never even heard of before!\" She looked a bit evasive, but grinned at him endearingly as she added, \"I bought a ton of each, just in case they might be useful. I hope that's okay?\"\n\nJohn chuckled and replied, \"Yeah, as long as you got a good deal.\"\n\nShe winked at him slyly, and whispered, \"These Trankarans might be friendly and helpful, but they aren't the sharpest traders. Considering how rare those metals are, I picked them up for a tenth of the price I was prepared to pay.\"\n\nJohn clapped her on the back as he said, \"Sounds like you did some quality haggling! Will the ore be here soon?\"\n\nShe giggled before replying happily, \"Forgemaster Gilgrem said he'd have them delivered straight away, so hopefully they should be here in a few minutes.\" She then looked at him with a quizzical expression and asked, \"How did the meeting with the Chancellor go?\"\n\nHe grinned at her and replied, \"Very well actually, but we can go over the details with everyone back on the ship. Basically, I agreed to help them with their rebel problem, and in return, they're going to outfit the Invictus with the best engine tech they can make. I requested their engine specifications, so you'll know what you're going to be working with, and you can start thinking about how to seriously upgrade our Inertial Dampeners.\"\n\nAlyssa smiled at her old friend and said wryly, \"The Trankarans had some concerns for our safety if they gave us their state-of-the-art tech. Something about our frail Terran bodies not being able to cope with the strain. I think you'll have to come up with something pretty special, to stop us from getting squished like a bug the first time we crank our engines up to max.\"\n\nDana's sky-blue eyes sparkled with excitement, and she said, \"I've actually had a few ideas already, but with the materials bonding research I've been working on, I haven't had the time to come up with anything concrete.\" She then looked torn with indecision, and asked John, \"With all the new metals, and the notes that Forgemaster Gilgrem said he'd send me, I could make some real headway with my materials research. Do you really want me to stop working on that?\"\n\nJohn nodded and said apologetically, \"I'm hoping our mission for the Trankarans will just take a few days, in which case we'll be able to get the Invictus outfitted with new engines very quickly. I want you to drop everything and work on the Inertial Dampeners first, alright?\"\n\nThe redhead pouted, but nodded in agreement.\n\nAlyssa laughed and said, \"Cheer up, Sparks! Remember, you'll be getting your hands on some top-of-the-line alien tech. There won't be a single Terran ship with engines this fast!\"\n\nThat turned Dana's frown upside down, and she looked ecstatically happy once again. Movement by the doors into the hangar drew their attention, and a male and female Trankaran appeared, steering robust, tracked trolleys that were loaded with sturdy ore containers. Dana skipped over to join them, and they smiled at her when she gave them a cheeky wave.\n\nRachel smiled at the others standing with her, and said, \"You should come and meet the assistants, they're very friendly.\"\n\nAlyssa and Rachel walked briskly to catch up with Dana, and John watched the enticing sway of their hips as they departed. The two girls greeted the Trankarans in a friendly fashion, and the Forgemaster's assistants gave them a broad smile, as Dana introduced everybody to each other. The group then began to make their way towards the rear of the gunship, following the redhead's animated directions.\n\n\"I'll go and open the rear loading ramp!\" Jade called out to Dana, who turned and waved at her with a happy smile.\n\nAs the Nymph headed back into the Raptor, John began to walk over to join the girls, but a soft hand gently brushing his arm made him pause. He turned around and was surprised to see that it was Irillith who had reached out to touch him. John glanced down at her slender blue hand, looking at where it rested against his forearm, and enjoyed the feeling of her warm fingers as they lingered on his skin. When he turned to the Maliri woman, her face was flushed, and she snatched her hand away quickly.\n\n\"Is everything alright?\" he asked her curiously.\n\nIrillith gazed at him for a moment, before looking away, and saying in a quiet voice, \"I just wondered why you brought me along to that meeting.\"\n\nAlyssa turned around sharply as she was abruptly blocked from John's mind once again, and she narrowed her eyes as she saw him talking to Irillith. Something about the Maliri was making him act very strangely, and if anything, seemed to trigger him blocking her from his mind. She looked suspiciously at the Maliri woman, but Irillith's body language and posture seemed unthreatening.\n\nA sly grin spread across John's face as he replied, \"Didn't you see how shocked their Chancellor was when I revealed you were a Maliri? She was reeling for that entire meeting because of it.\"\n\nIrillith was surprised at his cynical manipulation of the Trankaran Chancellor, but she hadn't forgotten the consequences of his little stunt. \"If this ever gets back to the Maliri, I'm dead!\" she said to him urgently in a hushed voice. \"You might have just signed my death warrant!\"\n\nJohn had a calculating smile on his face as he said, \"I wouldn't worry about that. I'm quite certain you'll be fine.\"\n\nIrillith didn't feel particularly reassured, but she managed to suppress her anger, and nodded obediently instead, reluctant to break her cover. She smiled at him as she replied, \"If you say so; then I feel better already.\"\n\nHe nodded smugly, and then they walked over to join the rest of the group. Alyssa watched them approach, and being denied her mental connection with John, the rest of her senses were all on high alert. The fact that they all warned her of danger only deepened her suspicions about Irillith.\n\n***\n\nAfter loading up the Raptor with ore, they said goodbye to the Trankaran assistants, and Jade shuttled the crew back to the Invictus. Once they had landed, John and Alyssa unloaded the gunship, with John carrying his share of the ore crates, while Alyssa levitated hers via telekinesis. They stacked the ore containers on the far side of the Cargo Bay, next to the storage containers of Etherite crystals and Onyxium ore.\n\nAfter securing the crates to the deck via mag-locks, they walked back across the Cargo Bay to rejoin the others, who had watched them hauling the heavy containers around with interest. John found Dana staring thoughtfully at the dozens of containers full of Maliri electronics, and he asked her, \"What are you thinking about?\"\n\nDana turned to look at him, and grinned proudly as she said, \"I think I might have a buyer for the electronics, but I was just thinking that we should hold out on selling, until we sort out the problems with the Trankarans. If we stop these rebels from fucking up trade, then there'll be a rush of merchants after Trankaran ore. Our cargo should increase in value considerably!\"\n\nHe laughed and gave her a hug as he said, \"I think you missed your vocation as a merchant!\" When he eventually let her go, he glanced over at Irillith, and said, \"I better secure our guest back on Deck Four.\"\n\nAlyssa stepped forward and smiled, but there was a steely determination in her eyes. John had dropped his mind-shield again on the flight back from the Trankaran flagship, and she didn't want him anywhere near the Maliri woman if she could help it.\n\n\"Why don't you go up to the Bridge and update Calara? I'll escort Irillith back to her quarters,\" she said firmly.\n\nJohn shrugged, and nodded as he smiled at her amiably, then walked over to the grav-tube arm-in-arm with Dana and Rachel. Jade watched them leave, and glanced in Alyssa's direction. *Want me to come along too?* she asked the blonde girl.\n\n*I'll be fine,* Alyssa replied. *You go ahead and catch up on the details of our assassination mission...*\n\nJade frowned, and her thoughts sounded puzzled as she asked, *Assassination mission? That doesn't really sound like our usual line of business.*\n\nAlyssa gave her a worried look, and replied, *Yeah, I know.*\n\nThe Nymph gave her a quick hug, and quickly departed to catch up with the others, leaving Alyssa and Irillith alone in the Cargo Bay. Alyssa turned towards the Maliri woman, who was studying her cautiously, and said, \"Shall we?\" gesturing towards the double doors with her hand.\n\nIrillith smiled and nodded, matching pace with Alyssa as they walked over to the grav-tube. There was a frosty silence in the air as they rose in the anti-gravity field together, and when they stepped out onto the fourth floor, their footsteps seemed to echo loudly as they walked to Irillith's quarters. Alyssa gestured for Irillith to enter, and followed her into the room as soon as she spotted the collar on the bed, left there when John had casually discarded it earlier. \n\nBeing very careful not to let her true feelings show in her expression, Irillith waited patiently for Alyssa to walk over to the bed, and pick up the collar. The blonde girl glanced at the metal circlet she held in her hands, twisting it slowly, so that the light reflected off its cold metallic surface. Alyssa heaved a sigh, then stepped very close to Irillith so that they were only millimetres apart. If either woman had turned even the tiniest bit to either side, their breasts would have brushed against each other.\n\nAlyssa carefully secured the collar back in place, locking it with a soft click around Irillith's slender blue neck. She then stood silently, and stared at the Maliri woman's beautiful face, gazing into her angular violet eyes. \n\n\"John might be fooled by this act,\" Alyssa began in a level voice, \"but I know you're hiding something. Things will end very badly for you, if you try and hurt any of my friends.\"\n\nIrillith stared back into Alyssa's bright blue eyes, with an innocent, disarming smile on her face. She tried to maintain that guileless stare for as long as she could, but something deep within the blonde girl's piercing cerulean gaze sent a cold shiver down her spine. Irillith quivered with fear, and looked away, not able to maintain eye contact any longer.\n\nShe could feel Alyssa studying her coldly for a long moment, before the Terran girl finally turned and walked out into the corridor, leaving Irillith alone in her quarters. The Maliri woman immediately walked over to the door, pressing the button that would close it. As soon as the door swished shut, her shoulders sagged, and she let out a huge shuddering sigh before flopping onto the bed. Between the dreadful irresistible magnetic pull she felt towards the Mael'nerak, and the roused suspicions from that terrifying otherworldly blonde, she knew this horrible nightmare was only going to get worse.\n\n***\n\nTrankaran space was not particularly broad, but it was very long, and wrapped around the edge of Terran Space in a thick band, neatly curtailing future human expansion in that direction. Fortunately, with Port Megara built as conveniently close to the Trankaran's capital as it could be within Terran Space, the journey to Trankara was only going to be a short one.\n\n\"Ten hours,\" Alyssa stated, as she finished making corrections to the flight path Jade had plotted on the Sector Map. She smiled at the Nymph, and added, \"That was nicely done, Jade, you're definitely improving.\" With a final wave of her fingers, she activated Dana's interdiction response suite, which would alert them if any Trankaran vessels got too close.\n\nJade could feel her confidence growing, and she grinned with pride as she looked up at Alyssa, delighted to have impressed her mentor. Her smile quickly faded as she studied the beautiful blonde girl, seeing the telltale signs of worry in her expression, and so the Nymph asked quietly, \"Do you want to talk about John?\"\n\nAlyssa paused, and concentrated on the minds of the other girls she was linked to. She smiled when she listened to their lusty thoughts, as Calara, Dana and Rachel were revelling in a energetic foursome with John. She carefully raised her own mind-shield to prevent the other girls from listening to her thoughts or sensing her emotions, but they were so immersed in their lovemaking that they didn't notice.\n\nShe glanced down at Jade, and nodded as she replied, \"They'll be busy for a while. Let's go and chat in the Ready Room.\"\n\nJade walked after the normally buoyant blonde girl, and now that Alyssa was making no effort to conceal her worries, the Nymph could feel the heavy emotional burden weighing on her friend's thoughts. Alyssa pressed the button to open the door into the Ready Room, and gestured for Jade to proceed, so the green-skinned girl strode inside, then turned to her left, gliding over to the sofas. Jade lay down on one of the long comfortable sofas, then opened her arms invitingly. \n\nThe blonde girl smiled wanly, and then lay down next to the Nymph, resting her head on the comfortable pillow of Jade's luscious bosom. Jade encircled her with her arms, stroking her back and holding the blonde girl close.\n\n\"It's just us now,\" Jade said in a comforting, maternal voice. \"You don't have to be brave any longer.\"\n\nAlyssa clung to her fiercely, her shoulders trembling as her face crumpled, and she began to cry. The tears came in a flood, as she finally released the worry and stress that had been plaguing her for weeks.\n\n\"It's all my fault!\" Alyssa sobbed, wracked with guilt. \"You warned me that encouraging John to be dominant was a bad idea, and now the Progenitor side of him is taking over!\"\n\nJade frowned and said soothingly, \"What happened with the mercenaries wasn't your fault. We'll just have to try and avoid letting him get into combat situations on his own.\"\n\nAlyssa shook her head from side to side, as she sat up abruptly, and stared down at Jade with her eyes wild and full of tears. \"You don't understand! It's been going on for weeks now!\" she exclaimed dejectedly. \"He hardly ever used to block me from his mind. The handful of times he did, it only lasted a few minutes, and it was when he was thinking about something that he thought might upset me. Now it's happening for hours at a time, and I don't think he's worried about upsetting me any longer. It feels like he's doing it to hide his dark thoughts from me!\"\n\nJade pulled the heartbroken girl down into her arms again, and spoke in a soft voice as she said, \"It can't be as bad as all that. He loves you. I've seen how devoted you two are to each other, and you can't fake that kind of connection.\"\n\nAlyssa cried into her chest, while Jade stroked her soothingly, and the Nymph considered what the other girl had said. Jade looked thoughtful while she comforted Alyssa, murmuring reassuring words, and helping her unload the tension and stress she'd been carrying for weeks.\n\n\"I don't think this has anything to do with you encouraging him to be dominant in bed,\" Jade eventually said, her voice firm and full of conviction.\n\nAlyssa lifted her head up, and brushed the tears from her eyes as she asked in a hushed voice that was tinged with hope, \"You don't? How come?\"\n\n\"You said yourself that this started happening a few weeks ago. Who did we meet around that time?\" Jade asked leadingly.\n\nAlyssa's eyes narrowed, and she gritted her teeth as she hissed, \"The Maliri...\"\n\nNodding, the Nymph said, \"Although he's always been lovely with us, and he was brought up as a Terran, John is still a Progenitor. You must remember as well as I do, all those pictures the Ashanath showed us. His species enslaves hordes of women, and uses them for conquest. Then there's all the research Rachel did on the Maliri; they've been designed to be a slave race for a Progenitor to dominate and control.\"\n\nAlyssa looked troubled and said, \"So you reckon being around the Maliri has made the Progenitor side of him emerge? Like a bear being drawn to honey?\"\n\nJade frowned and said, \"I don't know for sure, but it seems like an awfully big coincidence. We meet the Maliri, and John starts losing the plot.\"\n\nA sad shadow crossed over Alyssa's face as she said, \"And we know how John feels about coincidences.\"\n\nThe Nymph smiled at her, and said, \"Exactly. So the question now is, what are we going to do about it?\"\n\nAlyssa looked pensive, thinking over her options, and she finally replied, \"As much as I loathe Irillith, I don't want to just space her, despite what I said. She hasn't really done anything bad enough to justify being murdered, and as horrible as she is, she can't help the effect she's having on John. Even if we did bump her off, I'm not even sure it would dissuade him from following through with trying to complete this deal with Edraele.\"\n\nJade looked thoughtful as she mulled over their predicament, and said, \"I agree. So where does that leave us?\"\n\nAlyssa shrugged helplessly, and said in exasperation, \"I don't know if we have many options. I guess we just have to help get this deal with the Trankarans over with, and then try and convince John to drop Irillith off at Geniya Space Station, then forget all about the Maliri.\"\n\nJade nodded, and gave Alyssa a reassuring smile. \"Don't worry, I'm sure it will all work out in the end. But don't try and carry anything like this all by yourself next time. Remember, you're my little kitten, and I want to look after you.\"\n\nAlyssa laughed and hiccupped at the same time, then giggled, and leaned in for another hug. \"Thank you, Jade,\" she said sincerely. \"You've been so wonderful. I feel loads better already.\"\n\nThe Nymph smiled at her lovingly and placed a tender kiss on top of the blonde girl's head. Her heart surged with gratitude for the young woman she was holding in her arms, and she whispered, \"You saved me from that pirate ship, and helped set me free. I'd do anything for you.\"\n\nAlyssa squeezed her green-skinned friend in a tight hug, then sat up with a smile on her face once again. She suddenly yawned, and blushed, saying, \"Crying always tires me out. Come on, let's go to bed, the others are sleeping now anyway.\"\n\nShe rose from the sofa gracefully, then offered Jade her hand. The Nymph smiled at her, and taking Alyssa's hand in her own cool fingers she stood up elegantly. The blonde girl was about to turn to leave, but Jade pulled her back with a gentle tug, and said in a soft voice, \"Remember what I said. Please come to me if you need to talk about anything.\" She then smiled wryly and added, \"I'm over ten thousand years old; you youngsters should listen to your elders.\"",
        "Alyssa laughed, and joked, \"Well I just hope I have as firm an ass when I'm your age! Come on, 'Old Mother Time', let's go and have a cuddle with the others.\" She paused, then looked into Jade's cat-like emerald eyes, and gently brushed the side of her face with her fingers. Her words were heartfelt as she said, \"I'll definitely come to you if I need to talk again. You really helped, thank you.\"\n\nJade nodded, with a satisfied smile on her beautiful face, and they walked out of the room hand-in-hand.\n\n***\n\nThe alarm began to chime softly, filling the bedroom with a quiet melody, which gradually increased in volume until Alyssa rolled over and stretched, calling out \"Deactivate wake-up call.\"\n\nJohn had set the alarm to activate at six in the morning, three hours before they were scheduled to arrive at Trankara. They intended to stop near Demladuhr trading post, to plan their final approach to the rebel held planet, which was the location of the Radiant Palace, and the lair of the Glowing Queen. \n\nDana and Rachel had been flanking John when they went to sleep, but they were both up first, eager to get started on the day. By the time the others had roused themselves from bed, the redhead and brunette were striding nude from the bathroom, dried off and on the hunt for fresh clothes.\n\n\"You two are early birds this morning,\" John noted with a smile.\n\nDana gave him a quick kiss as she breezed past and exclaimed, \"I need to work on the Inertial Dampeners! Catch you later!\"\n\nRachel smiled at her exuberant lover, and said, \"I want to take a look at the Trankaran genetic samples and scan data I gathered yesterday. If we're about to go into combat with Trankarans, we'll need to know their weak spots.\"\n\nJohn nodded, impressed at their dedication, and said, \"Great thinking, both of you. We'll bring you some breakfast.\"\n\nThe two girls waved them goodbye, then sauntered out of the bedroom. That left John, Alyssa, Calara, and Jade to have a shower, and they luxuriated in the warm streams of water that cascaded down on them.\n\nAlyssa began to massage John's shoulders, and purred in his ear, \"Talking of breakfast, how about giving me a nice full tummy to start the day.\"\n\nCalara and Jade leaned in, both massaging him too, and he groaned as his body responded to their sensual touch. He was about to turn and pin Alyssa to the shower wall to have his way with her, when he held back and said with regret, \"I'd love to, but we're so close to the Trankaran rebels, we better not. We might get in a fight any minute, and I don't want to risk slowing you down with a swollen belly. We'll have some spectacular victory sex later when we're all done, I promise.\"\n\nShe pouted, but nodded, unable to refute his logic. They finished up quickly, dressing and going their separate ways. John and Jade headed over to the kitchen to make breakfast for everyone, while Calara and Alyssa ascended to the Bridge, to keep watch for rebel ships.\n\n***\n\nDana hit the button to open the Engineering Bay doors, and she grinned widely at the purple AI construct, when she saw it sitting on one of her consoles looking lost in thought. \"Good morning, Faye!\" she called out to the violet-hued sprite in a friendly fashion.\n\n\"Dana! Rachel! It's so lovely to see you!\" Faye said with delight as she leapt to her feet. She scampered along the top of the Engineering consoles, and launched herself into the air, her arms flung out in front of her. Iridescent gossamer wings sprouted from her back, and she fluttered over to join them, leaning in to give each girl a kiss on the cheek.\n\nRachel smiled at Faye, quickly getting over her surprise, and said, \"Those are new!\"\n\nFaye hovered in the air beside her and said, \"Do you like them? You said I reminded you of a Fae creature, so I thought I might as well look the part!\"\n\nRachel laughed and said kindly, \"You get a gold star for effort!\" Leaning forward, she asked, \"They're very pretty, could I take a closer look?\"\n\nThe purple AI sprite nodded, looked very pleased with herself, and when Rachel held out her arm, Faye landed, unfurling her transparent shimmering wings. \n\n\"Hey, Dana!\" Rachel called over to the redhead, \"You should take a look at these, they're gorgeous!\"\n\nDana didn't answer for a moment, she was so engrossed in the data she was reviewing. She eventually looked up distractedly, and then smiled as she said, \"Very beautiful Faye, nice job!\" before turning back to look at the data again.\n\nRachel rolled her eyes at Faye, who giggled in amusement. Walking over to join the redhead she asked, \"What's got you so distracted?\"\n\nDana looked up, and beaming a huge grateful smile at the sprite who was standing on Rachel's arm, she said, \"You must have spent hours on this! Thank you so much!\" \n\nFaye looked overjoyed at Dana's reaction and replied, \"It was the least I could do after you set up the holo-emitters to let me roam around the Engineering Bay. I can't tell you how good it feels to be able to have some freedom!\"\n\nRachel gently nudged Dana with her elbow, a playful smile on her face, and she asked with interest, \"Come on, don't leave me in suspense. What did Faye do?\"\n\nDana pressed a few buttons on her console, and a long list of metals appeared, including a wide variety of data on each element. \"She sorted and categorised all the known metals, including those the Trankarans sold to us.\" Glancing to her side, she asked the sprite intuitively, \"Is this list sorted by bonding likelihood with Onyxium?\" \n\nFaye hopped off Rachel's arm, and her wings disappeared as she skipped along to sit on the console in front of Dana. \"That's right!\" the AI construct said, bobbing her head animatedly. \"I remembered how you were studying each metal, and looking at their ability to form metallic bonds. I sorted every metal in your database, and created indexes, so you can cross reference each one against every other metal, and look for likely candidates for your new alloy.\"\n\nDana did a little dance for joy, and with a huge smile of gratitude on her face she exclaimed, \"You're fucking awesome! This would have taken me days to sort out!\"\n\nRachel smiled at the purple creature, and then leaned in to say in a conspiratorial whisper, \"Dana's been getting so cranky trying to finish this research off. If you've helped speed things up, I owe you big time!\"\n\nFaye had not stopped giggling after watching the redhead's jubilant jig, and she looked up at them both in delight, her tiny face shining with happiness.\n\n***\n\nJohn arrived on the Bridge with a plate containing three bacon rolls. The delicious aroma wafted over to the girls, and both Alyssa and Calara turned to look at him, sniffing the air. He strolled down the ramp to the Tactical Station to offer one to Calara first, then climbed up the steps to the Command Podium to present the second to Alyssa. Taking the third for himself, he sat in the Command Chair, and studied the local Sector Map, which was displayed as a glowing hologram in the centre of the Bridge.\n\nHe nodded towards the map, and before he took a bite of the roll, he asked, \"Spotted anything interesting yet?\"\n\nAlyssa paused before taking a bite, and replied, \"We both have actually.\" She glanced down at Calara, who was savouring her first mouthful of breakfast, and she said wryly, \"I guess I better go first.\"\n\nTurning to look up at the Sector Map, her right hand was a blur over the keyboard, while her left held the bap clear of the console. The map began to light up with curving lines, and at first just a few dozen appeared, but eventually hundreds were dotted over Trankaran territory.\n\nJohn looked on curiously, and asked, \"What are all those?\"\n\n\"Asteroid belts,\" Alyssa noted. \"Trankaran Space is absolutely saturated in them. It's no wonder they have access to so many metals, with such huge amounts of resources just begging to be mined.\"\n\nHe nodded, and said, \"I remember seeing a lot when I came here in the Fool's Gold. The sensors on my freighter only had a fraction of the range we've got on the Invictus though. I didn't realise there were quite so many.\"\n\nAlyssa grinned and said, \"With the Trankarans having so many mineral resources at their disposal, perhaps they weren't quite so daft with their trading after all.\"\n\nJohn laughed and nodded, saying, \"Let's not steal Dana's thunder.\" He glanced down at Calara, who was hurriedly gulping down the last of her roll. She smiled at him sheepishly when he frowned, but when she had swallowed the last, he gestured for her to proceed.\n\nCalara nodded, then brought up the data from her long range scans, displaying the data on the Sector Map. \"I found out what happened to the missing merchant shipping,\" she said in a sombre voice. \"The approach to Demladuhr trading post is littered with wrecks. It looks like the rebels have been picking off anything that makes it close to the station.\"\n\nJohn nodded and said, \"Keep your eyes peeled for any rebel patrol ships. We should have a massive sensor advantage over them, and I'm certain we have far greater hyper-warp speed too.\"\n\nThe Latina smiled at him confidently, and asked, \"So just give them all a wide berth and then slip into Trankara?\"\n\nJohn returned her smile, but he shook his head slightly and replied, \"No, I have different plans, if we can find the right target.\"\n\n***\n\nJade strolled into the Engineering Bay, carrying a plate of bacon rolls for her friends. She walked up the illuminated steps to the Chief Engineer's Podium, and as she handed them out, she spotted the purple sprite sitting on the top of Dana's console. Jade greeted her with a warm smile, and said, \"Morning Faye, it's nice to see you.\"\n\nFaye leapt to her feet and gasped, \"I love your colouring, you're very beautiful! Your name's Jade, right? Like the gemstone?\" \n\nShe skipped along the console, then leaned in close to look at Jade's arm, and the tiny flecks in the Nymph's smooth dark-green flesh. They reflected the light and gave Jade's skin an alluring lustre.\n\nThe Nymph smiled at her and nodded, then said, \"That's very kind of you to say, thank you. I think you look lovely too.\" Looking down at her plate, she added, \"Unfortunately I couldn't bring you a digital roll.\"\n\nThe AI sprite giggled, and held out her hand. A second later a miniature bacon bap filled her hand, and Faye took a big bite. \"Yummy!\" she exclaimed after she swallowed.\n\nRachel looked on curiously, and asked, \"Can you actually taste that?\"\n\nFaye shook her head, and explained, \"It's just a 3D image, and I can't taste anything anyway. It's fun to pretend I'm eating with you girls, though.\"\n\nRachel blushed and said, \"You're so convincingly real, I forgot you're a hologram!\"\n\nDana grinned at Faye and said, \"She's much more special than just a hologram!\"\n\nRachel reddened further and apologised quickly, \"I'm so sorry! I didn't mean to make it sound like that.\"\n\nFaye gave her a sparkling smile, and fluttered over to the embarrassed young woman. \"It's okay, I knew what you meant. I wasn't offended,\" the construct said sweetly, and it reached out to pat Rachel on the cheek.\n\nJade smiled at them, and asked, \"So what are you ladies up to down here anyway?\"\n\nRachel glanced at her console and replied, \"I'm going to do a rapid analysis of the Trankaran scan results. If we get into a fight with them on the planet, I'll need to try and find some vulnerable points for us to aim at.\"\n\nTurning to Dana, Jade asked, \"And how about you?\"\n\nDana was staring at the long lists of metals, her brow furrowed in concentration, as her eyes scanned through the data in fascination. She suddenly realised that the Nymph had spoken to her, and she smiled at her apologetically as she said, \"I'd love to be able to get stuck in to my materials research, but the Inertial Dampener upgrades are a higher priority. I've already got an idea of how we could replace them with a completely different system, but I'll need to crunch the numbers. Make sure it's viable.\"\n\nJade nodded and said wistfully, \"I wish I could help with your research, or do something really useful like that. I always feel like a bit of a fifth wheel when we're travelling anywhere.\"\n\nDana gave her a sympathetic smile and asked, \"The swimming pool isn't as enticing as it used to be?\"\n\nThe Nymph laughed and shook her head, saying, \"After being able to roam free on Oceanus, it feels too confining in there now.\" \n\nRachel looked thoughtful for a moment, then asked, \"Why not make yourself as small as you can? Then the pool will feel a lot bigger.\"\n\nJade looked startled for a moment, and then grinned as she said, \"Beautiful and smart. It's a good thing I'm incapable of jealousy!\"\n\nRachel chuckled as Jade wrapped her up in an exuberant hug. When the excited green-skinned alien girl finally let her go, the brunette asked, \"Are you going to go for a swim now?\"\n\nShaking her head, Jade replied, \"I'd love to, but I might be needed on the Bridge. I'll head back up there now, and stop distracting the clever girls.\"\n\nDana and Rachel laughed, and waved her goodbye as Jade bounced out of the Engineering Bay in a buoyant mood. Faye sat down on Rachel's shoulder, and looked hopeful as she asked, \"Did she mean me too?\"\n\nDana nodded and smiled at the purple sprite as she said, \"Definitely! Now, If you aren't busy, I could really use your help to create a holo-simulation of the force negation device I've been thinking about.\"\n\nAn eager grin spread over Faye's face, and she leapt from Rachel's shoulder to the Engineering console. \"Tell me what you're planning, and I'll get started immediately!\" she said, her bright opalescent eyes glowing with excitement.\n\n***\n\nThe frequency of the wrecks increased as they drew closer to the Trankaran trading post known as Demladuhr. Calara brought up the scan results for the wreck sites as they raced past each shattered hull, and she studied each scene of devastation carefully. \n\n\"Looks like they were taken apart by Fusion Beams,\" Calara said, with a sombre expression on her beautiful face. She turned and looked up at the Command Podium and said with certainty, \"It was definitely a Trankaran vessel that ambushed these merchants.\"  \n\nAlyssa had been studying the incinerated hulls of the broken hulks as well, and she exclaimed, \"Taken apart is an understatement! They ripped these poor bastards apart!\" After letting out a sigh, she looked over at the Latina and added, \"The Base Commander at Port Megara said there were eight merchants that were overdue, but we've seen lots more destroyed shipping than that.\"\n\nNodding Calara replied grimly, \"Yes, I've counted eight destroyed Terran freighters. The rest are all from minor empires, but I did see one wrecked Ashanath saucer as well.\"\n\nJohn leaned forward, a hungry gleam in his eyes as he asked, \"Any sign of what took them out?\"\n\nCalara shook her head and said, \"The debris patterns indicate they were hit by multiple simultaneous Fusion beam hits, so it was either from something big, or a coordinated attack by smaller vessels.\"\n\nJohn grinned and said, \"I'm betting they've left a cruiser or two in the area to disrupt trade.\"\n\nThe Latina nodded, and said, \"That would be my first guess as well.\"\n\nAlyssa glanced at John and a worried frown darkened her expression as she had been abruptly cut off from John's inner voice by his mind-shield. She was distracted from her troubling thoughts, as Jade bounded out onto the Bridge a moment later. Alyssa turned her chair, and smiled at her, but the Nymph's eyes narrowed when she noted Alyssa's look of concern.\n\n*What's the matter?* Jade asked her curiously.\n\nAlyssa glanced to her right, at the back of John's Command chair, and replied, *John just blocked me from his thoughts again.*\n\nJade gave her a reassuring smile as she walked past, heading towards the Pilot's station, and thought back to her, *Don't worry, I'm sure everything will be fine.*\n\nA soft chime coming from the Sector Map drew their attention, and they all stared up at the holographic image, as the long range sensors picked up the Trankaran trading post. The huge station was located right in the centre of a swathe of asteroid fields, with clearly defined space lanes providing access routes to the station. They watched with interest as the Invictus made steady progress towards the massive station, travelling between the huge chunks of rock that flanked them on both sides. When the sensors had gathered enough information to display an image of the Trankaran base, they were surprised to see that the facility was built into a huge, semi-circular bowl, hewn out of a vast mineral formation.\n\n\"Looks like a hollowed out asteroid to me,\" Alyssa said with an inadvertent shudder, as she looked at the blunt towers and squat buildings that jutted up from the enormous hunk of rock. \n\nCalara glanced up at her, and asked sympathetically, \"Bringing back memories of Karron?\" \n\nAlyssa smiled at the brunette and nodded, but her attention was drawn back to the map as they flew further along the space lanes between the asteroids. Jade sat down in her chair, and stared at the zoomed in view of the station, her cat-like eyes narrowing as she studied the image intently. \n\n\"I don't think these are separate asteroid belts. It looks like these channels were strip mined through one massive field,\" Jade said, pointing up at the holographic image that floated motionless in the centre of the Bridge. After taking a closer look, she added, \"Do you see those fine clouds of pebbles in each channel leading towards the station? Asteroid belts look like that after Calara's finished testing weapons on them.\"\n\nCalara looked equally surprised, and said, \"The original field of asteroids must have been vast! I don't think there's anything that size in Terran Space is there?\"\n\nAlyssa shook her head decisively, and said, \"No, definitely not. I've never seen an asteroid field like it.\"\n\nThe Latina carefully examined the tactical map and said, \"I'm not getting any power readings from that station. It looks completely dormant.\"\n\n\"Shall I get Dana and Rachel to come up here while we check out the station?\" Alyssa asked John.\n\nHe nodded and said, \"Yes, and tell them to bring Irillith with them as well.\"\n\nAlyssa looked concerned, but she nodded, and sent out a telepathic summons to the girls. Meanwhile, Jade had been piloting the Invictus further along one of the space lanes between the asteroid belts, and they left a sweeping path through the dense cloud of pebbles as they navigated through. By the time they were nearly at their destination, Dana, Rachel, and Irillith had arrived on the Bridge. They looked up at the image of Demladuhr with curiosity, as Dana and Rachel walked over to their posts at Engineering and Tactical, while Irillith moved to sit in the dormant station to the right of the Command Podium.\n\n\"I'll do an active scan of the facility,\" Dana volunteered, having already been brought up to speed by a telepathic brief from the psychic blonde.\n\nJohn nodded, and glanced up at the Sector Map as though searching for something.\n\n\"What are you looking for?\" Alyssa asked him in a quiet voice.\n\n\"Bait,\" he replied with a sly grin.\n\nJade had been studying the image of Demladuhr Station, and she glanced up at John and said, \"I think I see something on the right side of the station. I'll bring the ship around to take a look if that's okay?\"\n\nHe nodded absent-mindedly, so the Nymph skilfully rotated the assault cruiser to starboard, using the retro-thrusters to perform the manoeuvre. When they were facing the desired direction, she began to gradually increase engine power, bringing them around to the flank of the station. There was a sudden intake of breath from the girls, and they stared in shock at the series of holes bored out of the side of the space station, which they could now clearly see from this direction. The rust red armour had several big, ugly russet red scars, where the plating had been melted completely through. Rivers of liquefied metal had streamed down the side of the station, before solidifying once again in malformed lumps on the starboard face of the hollowed out asteroid.",
        "Rachel had been gazing up at the map, and she noticed dozens of disturbingly familiar shapes scattered amongst the debris. \"Can you zoom in on that debris?\" she asked Calara quietly.\n\nBefore the Latina could do so, Jade turned in her chair, and confirmed Rachel's suspicions in a sombre voice, \"They're corpses. At least fifty.\"\n\nCalara looked grim as she nodded, and said, \"Whoever attacked the space station probably caught them by surprise. It looks like they pierced the station's hull, and triggered an explosive decompression. If that Trankaran station is anything like a Terran base, then security doors and pressure fields would have been in place to prevent that kind of thing from happening if the station had been on alert.\"\n\nThe active scan was now complete, and Dana looked sombre as she agreed, \"They were caught with their pants down alright. The rebels probably pretended to be friendly, and hit Demladuhr while it was completely unprepared. The whole space station has been depressurised, and it looks like there's dozens of corpses in there. I'm getting no life signs, but picking up lots of biological matter.\"\n\n\"There,\" John suddenly said, pointing towards the overhead map, and the Trankaran Cruiser that had suddenly appeared at the edge of their sensor range. He looked down at Jade, and ordered, \"Intercept that ship!\"\n\nJade nodded, and brought the Invictus about, turning towards the closest space lane leading out of the asteroid field. This broad path through the hazardous belts of rock put them on a direct intercept course with the Trankaran cruiser, and would allow them to engage the blocky vessel. \n\n\"They appear to be heading for Demladuhr Station, probably on the lookout for more merchants,\" Alyssa speculated, studying the Trankaran cruiser's projected route. \"We should be out of the asteroid field before they get close enough to see us on their sensors.\"\n\nJohn nodded, and said, \"Good. When we're on the edge of the asteroid belt, power down, and we'll hit them as soon as they drop out of hyper-warp. If they keep going, power up the Tachyon drive and we'll interdict them.\" Looking towards Irillith, he asked, \"Can you hack into their ship, and disable them?\"\n\nIrillith looked confident as she replied, \"If you give me back my hacking deck, then it shouldn't be a problem.\"\n\nDana abruptly looked up and said, \"Hold on. Would you be creating an AI to sabotage their ship?\"\n\nThe Maliri woman masked her irritation at being questioned, and replied, \"Yes. I'll construct an AI, provide it some programs, and send it off to execute them.\"\n\n\"What if you already had an active AI?\" Rachel asked with concern.\n\nIrillith glanced at the brunette, and she paused for a moment suddenly remembering with a start that she had forgotten to de-res the last AI she had summoned. Her angular violet eyes went wide as she realised why Rachel was asking. \"Then I'd shut it down immediately,\" she replied coldly and without remorse. \"Either that, or send it off straight away to attack the Trankaran ship, then de-res it once it had accomplished its task.\"\n\nDana looked alarmed, and staring up at John she pleaded, \"You can't let her kill Faye!\"\n\n\"You've named it?\" Irillith asked, her lip curling in disgust, despite herself.\n\nRachel nodded and said sternly, \"Faye has been really helpful, and she's growing into a lovely person. We can't betray her friendship like that, and I won't let you harm her.\"\n\nIrillith fought down her indignant rage, reminding herself she was supposed to be pleasant and obedient. She looked up at John and said in a reasonable tone, \"I'd strongly recommend not keeping an AI as a pet. They are quite temperamental, and prone to becoming very unstable if not put down once they've served their purpose.\"\n\nJohn nodded in agreement, but he hesitated when he saw the disapproving look Alyssa was giving him. After glancing around quickly, and seeing the worried expressions on the faces of the rest of the girls on the Bridge, he ground his teeth in anger. He looked at Irillith, and said, \"Can you hack that ship without using an AI?\"\n\nIrillith looked incredulous for a moment, but she fought down her annoyance, and forced herself to think about his question. With a barely concealed sigh, she admitted, \"Yes, but it's going to take me a lot longer, and there'll be a limit to what I can achieve. I might be able to set up a comms blackout quickly, but fighting my way into secured systems like the shield generator or fire control is probably going to take too long to be useful.\"\n\nHe shook his head adamantly, and said in a firm voice, \"No, don't interrupt their comms.\"\n\nRachel frowned and asked, \"But if we leave their comms systems intact, they'll call for reinforcements.\"\n\nJohn grinned wickedly, and said, \"Exactly. We want them begging for help.\" Glancing over at Calara he asked, \"Have they spotted us yet?\"\n\nShe shook her head, then said, \"They haven't reacted to our approach yet. Going by all the data we got from the scan of the loyalist cruiser, standard Trankaran sensors are only about as good as regular Terran sensors.\"\n\nHitting a button on her console she brought up an image of the Trankaran cruiser in the Tactical Display. The targeting computer recognised its specifications from the active scan they had conducted earlier, and began to list the details of the ship's loadout and capabilities.\n\n\"Four Fusion Beams in fixed mounts to the fore, and three to port and starboard,\" Calara noted. \"They're shorter range than our Beam lasers, but they hit a lot harder. I'd suggest keeping our distance, but their engines are much more powerful than ours, so I don't think that's going to be an option.\"\n\n\"Can you knock out their weapons?\" John asked her.\n\nThe Latina frowned and said, \"Only the gun ports are going to be visible, as their weapons are protected by massive armour plating. I might be able to, but it's going to be tricky, especially with their manoeuvrability. Their retro-thrusters are buried in the armour too, but should be easier to hit. I could try disabling them like I did with the Drakkar.\"\n\nJohn said firmly, \"I just need them incapacitated, I don't care how you do it.\"\n\nNodding, Calara said confidently, \"Don't worry, I'll take care of it.\"\n\nJade had powered up their engines to maximum, and the Invictus raced away from the silent tomb that was Demladuhr Station, making steady progress along the channel between the asteroids. When she finally guided them to a halt by the edge of the last asteroid belt, Dana powered down any extraneous systems, dropping their energy profile to a minimum. They all gazed up at the system map, and watched as the Trankaran cruiser dropped out of hyper-warp, appearing to be completely oblivious to their presence, as it plotted a course around the edge of the field. \n\nIt was disturbing to see such a stocky, blunt, and ungainly looking vessel moving with such speed, and making smooth and elegant course changes. The front of the cruiser was bulbous, and appeared to be a featureless expanse of iron-red armour plating. They could see that the armour on the hull was twice as thick on the front as it was on the sides or rear, with the Trankaran ship designed to take advantage of their incredibly powerful engine tech, and keep their front to an opponent.\n\nDana looked pensive as she cautioned them, \"We do NOT want to get rammed by that big ugly fucker. Our armour is much more resilient than theirs pound for pound, but their front plating is nearly fifteen-feet thick. They'd tear through us like tissue paper!\"\n\nJade nodded, then glanced back at Alyssa, and asked, \"Do you want me to pilot the Invictus for this, or do you want to take over?\"\n\nAlyssa gave her a reassuring smile, and replied, \"You've got this. Don't worry, you'll be great!\"\n\nJade smiled at her proudly, then turned back to her console. They watched the Trankaran cruiser surge closer, and they could see it move within the fire arcs of their Beam lasers.\n\nDana studied the passive scan data and said to Calara in warning, \"Their shields are up already. Looks like they were expecting a fight.\"\n\nThe brunette nodded, and said to Jade, \"Alright keep the nose on them, we'll hit them in the rear at max range.\"\n\nThe Nymph carefully nudged the nose of the Invictus around using light touches on the retro-thrusters, and the front mounted weapon arcs stayed directly over the unsuspecting Trankaran ship. It flew past them, and just as it looked like it was about to get away, Calara pulled the trigger on both of her weapon controls. The six bright lances of energy slashed into the rear of the Trankaran ship, causing a brilliant surge of energy as the energy beams throbbed with power. The beams cut off abruptly to avoid overheating, and the heatsinks began to rapidly vent the excess heat. \n\nThe Trankaran ship reacted immediately, their crew sharp and alert. Moving with disconcerting ease, the massive cruiser executed a sharp turn, and began to head back towards the Invictus.\n\n\"Shields up, all power to max,\" Dana called out, clicking buttons on her Engineering console, and sending the energy signature of the Invictus through the roof. \n\nJade waited patiently as the Trankaran ship bore down on them, seemingly intent on charging straight down the barrels of their weapons. The second the recharging icon winked out on the weapon loadout display for the Invictus, Calara caressed the trigger on her controls again, and the Beam lasers sent pulsating shafts of energy scything into the Trankaran shields. With a scintillating flash of energy, the shields flared and winked out, letting the last of the beams sear across the front of the enemy cruiser. \n\nThe very instant the shields dissipated, Calara pressed the thumb buttons on her controls and the Invictus jerked backwards as she fired the four Mass drivers. The hyper-accelerated shells blasted down the two-hundred-metre long magnetic rails, then left light blue trails linking the ships as they slammed into the front of the Trankaran ship, and detonated a second later. Everyone had been holding their breath, and as the bright light from the explosions dissipated, they saw four deep craters punched into the front of the enemy vessel. The enormous impact craters linked together, and the concave ruin that had once been the front of the Trankaran ship, now made it look like it had opened a massive, toothless maw to swallow them whole. \n\n\"Get us out of here, Jade,\" John said curtly.\n\nShe pivoted the ship, and cranked up the power, and the Invictus began to pick up speed as it attempted to flee the incoming cruiser. A second later, three shimmering red columns of energy hit the Invictus' shields in the rear. One of the Trankaran's weapons had been destroyed by the Mass Drivers, but the three remaining Fusion Beams pulsed angrily, and waves of incredible heat roared like a furnace over the back of the Invictus, straining the energy field protecting them.\n\nDana looked worried and gasped, \"Shields down to 64% already!\"\n\nThe Trankaran ship kept coming, and had now closed to laser cannon range. Calara opened up with the rear mounted weapons, adding in those to the sides, which had fire arcs that covered the rear. In all, twelve turreted barrels opened fire, sending a stream of energy blasts into the front of the Trankaran ship. She narrowed her eyes as she concentrated, aiming for the one-metre-square gap in the armour where the Fusion Beam muzzles were exposed. There was an explosion and a second Fusion Beam exploded and was destroyed, before the Trankarans fired back. \n\n\"Shields at 42%!\" Dana called out.\n\nThe Trankaran pilot had realised what Calara was trying to do, and began to dodge from side-to-side while their Fusion Beams recharged. She compensated, adjusting her aim as she anticipated most of the enemy pilot's manoeuvres, and was able to destroy another weapon with her incredibly accurate marksmanship. The third Fusion Beam was blown apart, causing a muted explosion, which was muffled by all the armour. The last of their Fusion Beams had cooled, and they fired it again, just as she hit the final muzzle with several laser bolts, leaving their ship's bow weaponless.\n\nShe glanced up at John and said tersely, \"I'm not sure I'll be able to disable that ship without destroying them. All their vulnerable systems are at their rear, and our shields can't withstand a volley if they broadside us.\"\n\n\"Careful!\" Alyssa called out to Jade, \"They're turning to hit us with their starboard weapons.\"\n\n\"Take the hits!\" John said sternly, \"Bank hard to starboard, and then go for their retro-thrusters and engines!\"\n\nBoth Jade and Calara nodded, and moved swiftly to obey his orders. The Nymph rolled the ship to the right, then pulled up the nose, bringing them around in a tight turn as she lowered the engine power. Calara opened up with the turrets on the topdeck, and sixteen laser cannons opened fire, strafing the side of the Trankaran ship in a seemingly random cascade of bright orange laser bolts. The rippling explosions over the starboard side of the hull were testimony to the pinpoint accuracy of her shooting, and one retro-thruster after another, was destroyed by the laser blasts. \n\nUnfortunately the blocky cruiser gave back as good as it had got, and the three Fusion Beams lashed out over the Invictus in a raging inferno of heat. The holographic shield strength display rapidly went from orange to red, then faded to black as the shields were burnt out, and the beams of heat went on to lick the glossy white hull of the assault cruiser.\n\n\"Another hit like that, and we'll start blowing capacitors!\" Dana cried out in alarm. \n\nAs the Invictus looped around, the Trankaran pilot fired the retro-thrusters on the port side of their ship, and the cruiser began to make a tight turn. Unfortunately for them, Calara now had a clear shot at the rear of their ship, and the engines on the starboard side were centred in her crosshairs. She gripped all the buttons on the fire control sticks and the sixteen laser cannon turrets sent a relentless shower of laser blasts into the engines. There were two big explosions at the back of the Trankaran ship, as the starboard engines were ripped apart by deadly accurate laser fire, and debris scattered out in a curved trail behind the ship as it continued to turn.\n\nDana gritted her teeth and yelled, \"Incoming fire!\" \n\nThe ship shuddered as the gunner on the Trankaran cruiser opened fire with their Fusion Beams, sending searing waves of heat over the hull of the Invictus. Two of the capacitors exploded as they were overloaded by the energy they were siphoning through the Alyssium hull plating, and several armoured panels buckled and cracked under the intense blaze. \n\nWarning lights flashed on the damage control panel, highlighting a section midway down the hull in red, and Dana winced as she said, \"The armour amidships on the starboard side is fucked! We can't take another hit there.\"\n\nJohn half-raised himself out of his seat and yelled to Jade, \"Get some distance between us, now!\"\n\nThe Nymph nodded curtly, and pulled out of the turn and ramped up the engine power. The Invictus raced away at full speed, and by the time the Trankaran Cruiser had pulled around to hit them with another broadside, they were out of range of their Fusion Beams. With the retro-thrusters destroyed on the starboard side of the ship, and two of their five engines blown to pieces, the Trankarans continued their turn and began running for the Nav beacon.\n\nJohn sat back in his chair, and a humourless smile spread across his face. \"There's no running for you I'm afraid,\" he muttered. Glancing down at Jade he said, \"Bring us into maximum Beam laser range.\"\n\nShe nodded, and brought the Invictus about, bearing down on the fleeing Trankaran Vessel. The assault cruiser was the faster ship now, and began to gradually catch up with the retreating enemy.\n\nJohn sat back, and said confidently, \"Stay out of their weapon range, and take them apart. Leave them alive though, we want them pleading for help from any nearby ships. With a little luck we'll be able to draw away some of the picket vessels from Trankara.\"\n\nThe girls looked up at him, startled at his cruel tone, but set about following his orders. Jade brought the Invictus in closer, and at maximum range, Calara opened up with their beam lasers. The Trankaran ship had started to regenerate their shields, but nowhere near enough to save them from the power of the bright coruscating beams. They eviscerated the enemy shields once again, then slashed through their engines, destroying the remaining three in a series of explosions.\n\nThe Trankarans spun their cruiser frantically, but now they had begun drifting, and Jade matched their speed just outside their weapon range. Calara pulled the trigger and the beams lashed out, carving six deep furrows through the armour plating, making the red hull look like a pair of three-clawed paws had taken savage rents out of their hide.\n\nIrillith had watched the entire battle while sitting on the edge of her seat, spellbound by the entire encounter. She had seen Calara's incredibly deadly gunnery skills before, but this was the first time she'd seen the Invictus effortlessly shrug off incoming energy weapons with its glossy white armour. It was sobering to realise that the broadside which had finally managed to damage the Invictus, would have crippled a Maliri patrol cruiser.\n\nA flashing light appeared on Rachel's console, and she looked up at John and said, \"We're being hailed.\"\n\nJohn smiled and said, \"Put them through.\"\n\nThe viewscreen crackled for a moment, and the image finally settled into that of a blocky-faced Trankaran. The armoured cruiser Captain's granite coloured features were twisted in fear, and he pleaded in his deep gravelly voice, \"Cease fire! We surrender! What do you want?\"\n\nJohn leaned forward and said, \"I'm the heroic Lion of the Terran Federation, and I'm here to punish you for attacking poor defenceless merchants. I want you to die...\"\n\nAlyssa glanced at him, and swore she heard the biting sound of sarcasm in his tone. \n\nJohn wagged a scolding finger at the shocked Trankaran captain, then glanced at Rachel, who took his hint, and cut the comm channel off abruptly. \n\n\"Keep shooting bits off that cruiser,\" he ordered Calara. \"We want them calling for as much backup as possible.\"\n\nThe Latina nodded, turning back and opening fire with the Beam lasers again. This time the energy lances cut through the already ravaged armour plating, and blew out all three Fusion Beams on the starboard side. She aimed carefully with the mass drivers, sending all four shells slamming into the topdeck of the stricken alien vessel, and smashing huge craters into the armour plating. The Trankaran cruiser rocked with the repeated explosions, and they could only imagine what it must have been like for the crew inside.\n\nRachel looked up at John and said, \"I've been monitoring their outgoing comms. I haven't been able to intercept their messages, but they've been broadcasting non-stop since we started taking out their weapons. I also detected multiple inbound messages, which are probably from reinforcements.\"\n\nDana was staring up at the Sector Map, and she confirmed Rachel's suspicions a few moments later as she exclaimed, \"Picking up incoming vessels!\" \n\nThey watched the map as several smaller ships began to approach on the right-hand side of the map. The handful of Trankaran destroyers began to make steady progress towards them, while Calara continued to slash away more armour plating from the immobilised cruiser. \n\nAlyssa did some quick mental calculations based on the speed of the incoming Trankarans and said, \"The destroyers are five minutes from jumping in.\"\n\nJohn nodded and said without emotion, \"That should be enough. Alright, let's finish the cruiser, and go hit Trankara.\"",
        "Alyssa looked at him in alarm and said, \"Chancellor Niskera asked us to minimise casualties. They aren't a threat to us now, we should just let them live.\"\n\nJohn glared at her in annoyance, but after a quick glance at the other girls, he relented when he saw their worried expressions, saying curtly, \"Fine, let's get out of here. Jump out at a two-twenty degree angle from Trankara so they won't get suspicious, then bring us around.\"\n\nDoing as she was bid, Jade turned the Invictus to the heading he had requested, and once they were clear of any gravity wells, she engaged the Tachyon drive. Alyssa expanded the Sector Map, and began to rapidly plot a course in a looping arc that would bring them around to Trankara. With the enormous reach on the Invictus' sensors, they'd be able to see any incoming enemy ships whilst being far out of range of being spotted themselves. Nodding with satisfaction, she entered the course into the ship's Navigation computer. Once the Invictus was safely in hyper-warp, the girls sagged back in their seats, looking relieved. \n\nJohn rose abruptly, and said without ceremony, \"I'll be in my Ready Room. Let me know when we've arrived at Trankara.\" He walked down the illuminated steps, then opened up the door to the Commander's Ready Room and strode inside. \n\nThe girls had grown used to his glowing praise after a battle, and when he didn't so much as acknowledge their brilliant teamwork, his abrupt departure was all the more jarring. There was a hushed silence as they watched him leave, and after the door had closed behind him, Dana, Rachel, and Calara all looked up at Alyssa in alarm. \n\nDana was the first to speak to the blonde girl telepathically, and she asked, *What's up with John? He's acting really fucking weird!*\n\nAt the same time, Calara's worried thoughts appeared in her mind, and she exclaimed, *I've never seen John behave like that! He was totally ruthless!*\n\nRachel's eyes narrowed, and she asked, *He's losing control to the Progenitor version of himself, isn't he? He wasn't quite the same as when Progenitor-John took complete control against the Fulmanax, but he was disturbingly similar.*\n\nJade noted the shocked expressions on the other girls, then shared a long look with Alyssa, before finally saying, *You better fill them in, I'll take Irillith back to her quarters.*\n\nWhen Alyssa nodded, the Nymph got up from her seat, and strode up the ramp to the unlit station at the rear and right of the Bridge. She smiled at the Maliri woman, and said in a kind voice, \"Sorry, but I'll have to take you back to your quarters. Would you come with me please?\"\n\nIrillith was still staring at the door, feeling more than a little alarmed at the way John was behaving. He reminded her more of the Mael'nerak than ever, and she felt a deep chill of fear in her bones. Suddenly realising Jade had spoken to her, she looked up at the green-skinned girl, and nodded distractedly. Standing, she followed the Nymph over to the grav-tube, and stepped into the red glow that would take her down to Deck Four. She was more than relieved to be able to leave the Command Deck, putting as much distance between herself and John as possible.\n\nAlyssa let out a long, forlorn sigh, and then began to explain her worries to the other three girls.\n\n***\n\nJade rejoined them a while later, and there was a stunned silence on the Bridge, with all the girls wearing worried frowns on their faces. She walked down the ramp towards the debriefing room, paused by the door, and said, \"Let's go and talk in here.\"\n\nNodding, the other girls got up, and followed her into the room, sitting down numbly in the chairs around the long table. Alyssa brought up a holographic representation of the Sector Map, and left it hovering above the table, so they could keep an eye on the long range scans.\n\n\"So, John's turning evil,\" Dana blurted out abruptly.\n\nAlyssa and Jade glanced at each other, and the blonde said hesitantly, \"I don't know for sure, but he seems to be under some kind of malevolent influence, probably his Progenitor nature, and it's making him act bizarrely. I thought it might be due to Irillith's presence on the ship, as he started behaving a bit oddly when we first encountered her.\"\n\nThe redhead started to rise out of her seat with a stony expression on her face, and she said, \"Fine. So we kill her, and everything goes back to normal.\"\n\nAlyssa was startled by the sudden fiery surge of anger in Dana's mind. Looking worried, and shaking her head in a wave of blonde locks, she replied, \"I don't think it will make any difference. John started behaving really differently after we met Edraele. That's when he started blocking me from his thoughts a lot more, and acting really out of character.\"\n\nRachel looked sombre as she said, \"I think you're right by the way. I agree with your theory that the Maliri are bringing out some darker side to him. The genetic behaviour modifications the Progenitors built into DNA are very powerful, and can have a dramatic effect. Jade has several overwhelming drivers that influence her behaviour, like her aversion to guns, or the need to have a master. The ones built into John are just as powerful, and this other side of him that appears in times of severe danger, seems to be an extreme manifestation of the Progenitors' skill at DNA coding.\"\n\nAlyssa looked at her and asked, \"Is there anything we can do to try and counter it?\"\n\nRachel paused, looking troubled, and replied, \"I'm not sure there's anything we can do. I think the damage might already be done. Although we all have a wonderful connection with John, Terrans are based off the standard genetic template the Progenitors designed, and our species wasn't primed beforehand. The Maliri were specifically designed to be receptive to domination by a Progenitor. If my behaviour modification theories are correct, once he's around female Maliri for long enough, they'll start throwing themselves at him, practically begging him to enslave them. For a Progenitor, whose species is designed to conquer slave races, that's got to be a powerful instinctive lure.\"\n\nCalara looked forlorn as she said softly, \"One of the things I love the most about him, is his desire to help people, and really bring some good to the galaxy. I don't know what I'll do if he loses that.\"\n\nDana frowned, looking angry, and blurted out, \"I refuse to give up on him! There must be something we can do!\"\n\nAlyssa walked around the table and placed a comforting hand on each of their shoulders. She gave them a reassuring smile as she looked down at them, and said, \"No one said we're giving up on John. We just need to try and come up with some kind of plan.\"\n\nThe five girls looked at each other around the table, until Calara said hesitantly, \"How about we try and persuade him to drop Irillith off at Geniya trading post? Then we forget all about the Maliri, and fly off in the opposite direction? Maybe if he goes cold-turkey, it might shake him out of this.\"\n\nJade nodded and said, \"Alyssa and I talked about the same thing, but the one problem is, what do we do if he says no? I don't think I'm capable of disobeying one of his direct orders. How about any of you?\"\n\nThey all frowned and slowly shook their heads. Calara was about to say something, but paused, dreading bringing it up.\n\n\"Go ahead and say it,\" Alyssa said quietly. \"We're all thinking the same thing.\"\n\nThe Latina stared at her for a moment, before she glanced at the others, and asked in a hushed voice, \"What do we do if our John disappears forever? I don't want to serve an evil Progenitor version of the man I love.\"\n\nThere was a deathly quiet in the room, and Rachel looked deeply troubled as she replied, \"We might not have any choice.\"\n\n***\n\nTheir journey to Trankara was unopposed, with Dana and Rachel spending the two hours continuing with their research, while Alyssa, Calara, and Jade remained on the Bridge. The girls were all very worried after their conversation in the Debriefing Room, and even a loving group hug did little to raise their spirits.\n\nThey stayed well clear of any Trankaran vessels, and with the huge range on their long range scanners, they were able to watch the Trankaran ships whilst avoiding going anywhere near them. Sure enough, a big fleet of five cruisers, a dozen destroyers, and fifteen corvettes flew past them on a direct flight path to Demladuhr Station.\n\nCalara watched the departing fleet, and thought to Alyssa, *John might be acting strangely, but that was a brilliant strategy of his, luring the picket ships out like that.*\n\nAlyssa smiled at her wryly and said, *It was a close run thing. These Trankaran cruisers pack a heck of a punch, and it was just your incredible shooting that saved us.*\n\nGiving her lover a grateful smile for the compliment, Calara replied, *Our problem going up against the Trankarans, is that the Invictus has the same design ethos as their ships do. Lots of big forward facing guns, with the idea being to use our good manoeuvrability to keep the Beam lasers and Mass drivers on target. They have a lot more armour, faster engines, and very powerful short range weaponry. If we fought a group of them, we'd be in really big trouble.*\n\n*We'll keep our heads down. We don't want to risk another fight in the Invictus, especially with the armour torn up as it is,* Alyssa said, with no small degree of caution in her voice.\n\nThe doors to the Ready Room swished open, and John strode purposefully onto the Bridge. He jogged up the illuminated steps to the Command Podium, then sat down in his chair.\n\nHe glanced at Alyssa and asked, \"How long until we reach Trankara?\"\n\n\"We'll be arriving in-system shortly. It shouldn't be more than ten minutes,\" she replied in a calm voice, not wanting to reveal the gnawing worry she felt.\n\nLooking up at the long range scan results on the Sector Map, John said, \"It looks like there's only a minimal defensive force left at Trankara. Did they send out a fleet to assist that cruiser we crippled?\"\n\nNodding, Alyssa replied, \"Yes, we passed them a short while ago. Thirty-two ships in total, with the largest being five cruisers.\"\n\nA smug grin spread on John's face, and he said, \"Good. Bring us in on the far side of the planet from any defensive fleet, and we'll travel down to this 'Radiant Palace' in the Raptor.\"\n\nAfter another minute, the long range scans began to pick up the distinctive signatures of Trankaran vessels, and a fleet of ships about the same size as the one they passed earlier began to appear on the holographic Sector Map. The ships were set up in clusters, consisting of a cruiser supported by destroyers and corvettes, and they ringed around their homeworld to pick up any encroaching vessels.\n\nAlyssa brought up the system map, and the locations of the vessels were tagged on the holographic image. The Trankaran home system had a bright white sun, and Trankara itself was a large volcanic planet on the fifth orbital path around the sun. There were two other volcanic planets, a couple of gas giants, and numerous asteroid belts dotted around the system.\n\nJohn studied the map for a minute, quickly changing his plans to allow for the Trankaran's fleet disposition, and said, \"We'll use the asteroid belts to mask our approach to Trankara. Calara and Dana can stay on the Invictus in the cover of the asteroids, while the rest of us take the Raptor down to the planet. The data we received from the loyal Trankarans said that the asteroid belts aren't rigged with proximity mines, and have no sensor webs in place.\"\n\nThe girls on the bridge nodded warily, and Alyssa said, \"I've informed Dana and Rachel. They'll come up and join us in a few minutes.\"\n\n\"Get them to bring Irillith, she's coming too,\" John said offhandedly, as he stared at the system map, watching the patrol routes of the Trankaran defensive fleet.\n\nAlyssa stared at him a moment, then nodded, and passed on the message. \"The three of them will be here shortly,\" she informed him quietly.\n\nHe didn't bother to reply, and continued his vigil of the Trankaran homeworld. They finally jumped into the system a few minutes later, and Jade powered down their systems as she coasted the Invictus in towards the closest belt of asteroids. Dana, Rachel, and Irillith stepped out of the grav-tube onto the Command Deck a moment later, and they spread out to take their seats.\n\nJohn glanced at Rachel, and asked, \"Any success in finding the Trankaran's weak spots?\"\n\nShe frowned and said, \"Their biology is quite the conundrum. It's bizarrely unique, yet familiar at the same time.\"\n\nLooking displeased, John replied sharply, \"Which means what exactly?\"\n\nRachel looked a bit hurt at his impatient tone, and said, \"Although they're silicon based lifeforms, and not carbon based like us, their bodies follow a very similar template to ours. Vital organs in the chest, and a brain in their cranium.\"\n\nNodding John said abruptly, \"Right. Headshots and torso shots it is then.\"\n\nRachel had been about to continue before he cut her off. Alyssa frowned at him, then smiled at the brunette and asked, \"Did you find out anything else?\"\n\nNodding, their doctor continued hesitantly, \"Trankaran skin is very dense, and the silicon in their bodies forms a tough, resilient shell. We're going to need to use high-powered rounds to be able to hurt them.\" She paused for a moment, looking thoughtful, and added, \"I haven't been able to study their genetic code yet, as I'll need Dana's help to reconfigure my instruments. The fact they are bipedal and have a generally similar physiological to us, makes me wonder if the Progenitors had a hand in their evolution. I'll start looking into that when we get back from the mission.\"\n\nAlyssa smiled at her, and said, \"Thanks Rachel, that was very helpful.\" She then looked over at Dana and asked, \"How are you getting on with your research?\"\n\nDana looked a lot more subdued than normal, but her face brightened a bit at talk of new technology, and she said eagerly, \"I've been working with Faye to create a holographic simulation for the new device I'm developing. It will replace our existing inertial dampeners, and should let us use the full power of the engines.\" Glancing up at John with a worried frown she added, \"I'm still looking into it, but we might need to refit in a drydock for this upgrade. We'd need to build a super-strong central core vertically through the ship, and we can't do that in space.\"\n\nJohn didn't seem particularly phased by this, and he said, \"That shouldn't be a problem. As long as you have the schematics ready in the next week or so, we can take some time out for the refit.\"\n\nRising from his Command Chair, he said, \"Alright, let's get geared up. Jade will be flying us to Trankara in the Raptor, and Alyssa, Rachel, and Irillith will be joining me.\"\n\nAt the mention of her name, Irillith coughed politely, and when all eyes turned to her she said, \"I don't have a replacement vambrace. I'll need my armour back if I'm coming with you.\" Dana and Rachel both began to object at once, so the Maliri woman fought the urge to roll her eyes, and added, \"I can unclip the hacking deck that powers the AI from the vambrace. 'Faye' will be perfectly safe.\" \n\nDana looked relieved, and as she walked up the ramp, she said to Irillith, \"Let's go. You can show me how to disconnect the hacking deck from the vambrace, then you can have your armour back.\"\n\nThe girls going on the mission to Trankara got up and began walking from the Bridge to get equipped in their armour. John stood and was about to walk down the steps, when Alyssa placed a hand on his arm. He turned to look at her quizzically, and once Irillith had left the Bridge, Alyssa whispered to him, \"Are you sure it's a good idea bringing her along? I've got a feeling she's hiding something from us.\"\n\nJohn nodded confidently, and said, \"She'll be fine. Her behaviour modification is kicking in, and she's already much more compliant and obedient.\"\n\nAlyssa frowned, but she could see by the determined set of his features that his mind was already made up, so she decided not to push him any further. They walked down the steps to the grav-tube, then headed to the Commander's Quarters to get fully equipped for the mission. Her worries were coming back in spades now, after seeing John's behaviour during and after the fight with the Trankarans. She stepped into her plated boots in the armour equipping frame, then waited pensively as the robotic arms swung the armour into place over her body. \n\nJohn had finished getting equipped first, and he strode over to the weapons racks. He reached for the gleaming white two-handed sword she had forged for him, and slid it into place in the magnetic fields that sheathed it across his back. Once it was held securely, he reached for a glossy white Punisher railgun, then slotted in a long magazine of saboted 20mm, and a stubbier mag of 25mm grenades for the underslung grenade launcher. After grabbing plenty of spare mags, and slotting them into his combat webbing, he strode out of the walk-in wardrobe without a second glance.\n\nAlyssa's heart sank as she watched him leave, missing their private chats, and flirty exchanges more than ever. Heaving a big sigh, she reached for her own Punisher railgun, the small light on the grip flashing green as she picked it up. She checked the selector switches on the side of the rifle, and made sure the safety was on, and that the weapon was set to high-powered mode. She reached for some magazines, slotting them into place, then glanced at the GUI in her helmet, which showed the remaining loaded ammo, and noted that it read 10/50 as she was expecting. Taking some spare mags, and some clips to reload them with, if they got in a protracted firefight, she walked out in John's wake feeling a deep pervading sense of sadness.\n\n***\n\nJade skilfully swung the Raptor around a massive asteroid with the barest usage of the retro-thrusters. Almost all their systems were powered down, but with access to the passive sensors, Jade had enough telemetry data to be able to plot a nice safe course for them through the asteroid field.\n\nJohn, Alyssa, and Rachel were all geared up in Dana's variant of the Phalanx armour, fully protected by Alyssium plating on their body, and reinforced crystal for their clear faceplated helmets. Irillith was wearing her full set of golden armour, and carrying her laser rifle, but her eyes kept being drawn to the menacing new railguns the others were all carrying. This was the first time she had seen the new weapons, and with the broader, twenty millimetre muzzle, and the underslung grenade launchers, the Punisher railguns looked very deadly indeed.\n\nJohn pointed to the middle of the red and black planet, and said, \"The Radiant Palace is towards the equator on the biggest landmass. I can give you some more directions when we get closer.\"\n\nThe Raptor moved stealthily through the asteroid belt, in long, well-planned manoeuvres that used the barest touches of the retro-thrusters. The Trankarans seemed completely oblivious to their presence, and the vessels out on patrol sailed past without a clue as to the threat lurking in their midst. Jade brought them to a halt at the leading edge of the asteroid field, and once the latest patrol had cruised past, she gently powered up the engines, increasing their velocity to coast in towards Trankara.\n\nThere was a sensor net set up around the Trankarans homeworld, but with Jade's expert piloting, they were able to drift closer without warning them of their approach. She brought them into the upper atmosphere of Trankara, and the dark red and black planet loomed large ahead of them. They began their descent, using only periodic bursts from the retro-thrusters to arrest the speed of their fall, and while Jade stared intently at her controls, her passengers gazed out the cockpit canopy at the planet.",
        "Trankara was a volcanic planet, with huge mountainous ranges, and broad lakes of molten lava. Alyssa was astounded anything could live in a such a hazardous environment, and she glanced over at Rachel and asked, \"What's the atmosphere like down there? Is it breathable?\"\n\nRachel shook her head, and said, \"All those volcanic fumes are constantly pumping sulphur dioxide into the atmosphere. The Trankarans seem to be very adaptable to harsh environments, so they won't have any problem with it, but it's quite toxic for us.\"\n\n\"Over there,\" John said to Jade brusquely, pointing to a large raised mesa in one of the mountain ranges. \n\nEven from here they could see the telltale signs of life amongst the jagged skyline of buildings atop the plateau. Bright orange lights dotted the hundreds of houses, administration buildings, and commercial sectors of the Trankaran capital city, the centre of power for their old government. Raised up atop it all was the Senate Building, and even from this distance they could make out the imposing nature of its design as it towered over the squat structures beneath it. The walls were hundreds of feet high with heavy supporting columns running from the base to the parapet, all worked out of the dark volcanic rock that made up the surface of Trankara.\n\nThe Radiant Palace, as it had been recently renamed, was a beacon of light above the gloomier buildings it overshadowed. It was festooned in strips of orange lighting, and the bright illumination they provided made the new name seem very appropriate indeed. As they drew closer to the mesa, they saw that the lower sections of a huge rocky promontory were riddled with cave entrances, where it jutted out over a lake of magma.\n\nJohn pointed to the cave entrances and said to Jade, \"Down there. Bring us in nice and slow. Senator Vamred's data said that those tunnels were once used for harvesting lava, but that operation was made redundant, and abandoned centuries ago. We should be able to make our way into the palace using those tunnels.\n\nAlyssa frowned as she darted a surreptitious glance at John. She was disappointed that not only was he not asking any of them for advice about this mission, he wasn't even bothering to share the maps and schematics that the Trankaran Senator had supplied him with.\n\nThe Nymph carefully followed John's instructions, keeping close to the surface and drifting in slowly. Lava bubbled and churned beneath them, and the occasional spouting geyser of boiling hot magma prompted her to gain a little altitude, to keep well clear of danger. Her caution turned out to be well founded, as a rippling series of volcanic bursts, sent large plumes of superheated rock high up into the air along their flight path. \n\nTravelling at a slow pace to avoid detection, their inbound flight seemed to take a torturously long time, and if she wasn't wearing a fully enclosed helmet, Alyssa might have been tempted to bite her nails out of worry. Fortunately, they managed to approach undetected, and Jade brought them in silently under the promontory, and touched down on a broad, flat jetty of volcanic rock, which had been built out from the base of the mesa.\n\nJohn stood, and said, \"Right, we're up. Let's go.\"\n\nHe strode out of the cockpit, and Irillith glanced at the other girls, then followed after him. Jade, Rachel, and Alyssa watched her leave, then gathered together for a quick hug. \n\n\"Stay safe you two,\" Jade told them with a smile, but they could both tell that she was worried.\n\nAlyssa nodded and said, \"I'll call you for an emergency evac if we get into trouble.\"\n\nThey parted, then walked out of the cockpit, and stepped into the grav-tube, floating down to the lower deck. Rachel was about to walk into the front loading area, when Alyssa placed her hand on her shoulder, holding her back for a moment. \n\n*Keep an eye on Irillith,* she warned the brunette. *I'm concerned she might try something, but I'm not sure what.*\n\nRachel turned to look at her and said, *I'm not sure it was a good idea even bringing her. Why is John letting her carry that laser rifle of hers?*\n\nAlyssa frowned and replied, *He thinks she's succumbed to the behaviour modification effects built into her DNA, but I don't believe that for one minute. Just be careful not to turn your back on her, and we'll have to hope for the best.*\n\nSmiling at her bravely, Rachel said, *You can count on me. I'll watch your back and keep an eye on Irillith too.*\n\nAlyssa couldn't help but smile back at Rachel's bold effort to reassure her, and she leaned forward to touch faceplates with the brunette. The sound of hydraulics drew their attention back to the room at the front of the gunship, and they walked out to join John and Irillith, who were waiting by the descending ramp.\n\nAs soon as it touched down on the jetty, John strolled out at a brisk pace, his Punisher railgun held at the shoulder as he scanned for targets. Once they were clear, Jade pulled up the loading ramp, and then the Raptor was away. She lifted off the ground quietly, then rapidly gained altitude, before disappearing out over the magma lake. John jogged across the flat jetty, watching warily for any Trankarans, and the girls moved quickly to keep abreast with him. They weaved through old, heavily corroded machinery, the sulphuric acid vapour from the magma lake having chewed through the metal over the many decades since this dock had been in use. \n\nFortunately this lower area was completely deserted, and they were able to enter the tunnels on the lowest level of the mesa without seeing a soul. The tunnel was broad, at least twenty metres wide at the entrance, and had a high arched ceiling that met in darkness several metres above their heads. Set into the basalt floor, were long rails that disappeared off into the gloom, and along those tracks were several loading carts, which had seized up and begun to corrode. The whole dock had a forlorn feeling of decay to it that was quite unsettling.\n\nIrillith followed John into the darkened tunnels under the Trankaran city, and she glanced warily at the ceiling as they walked inside at a hurried pace. She had always disliked being underground, and the thought of the colossal weight of rock above their heads was more than a little disturbing. Her recent experiences with the Fulmanax had done nothing to change her dim opinion of subterranean expeditions, and she gritted her teeth as they delved deeper into the mountain. \n\nGripping her laser rifle tightly in her hands, she kept a vigilant watch ahead for any possible targets. She found it astonishing that John had allowed her to be armed, especially considering how contentious their relationship had become over the last few weeks. Still, this opened up all sorts of possibilities for her to end this nightmare, and her heart surged with hope. \n\nGlancing to her side, she watched Alyssa striding along briskly, her deadly looking rifle held at her shoulder. Irillith knew full well that the blonde girl possessed imposing psychic abilities, so she was being extremely cautious with her thoughts, to avoid accidentally giving away her plans. She resolved herself to maintaining her facade of blind obedience, whilst keeping a wary eye out for any opportunities that might arise. \n\nThe small group made their way swiftly along the tunnels, switching to mag-view to follow the train tracks, when the light from the lava outside faded away. It was pitch black in there, but the metal girders set into the floor lit up like a beacon lighting their way, leading them deeper into the rock, and upwards on a gentle incline. It took about twenty minutes at a fast walk before they started to hear the sounds of movement coming from up ahead, and a slight flicker of light began to brighten the tunnel far away in the distance. \n\nMag-view wasn't picking up any armed or armoured figures in the tunnel ahead, so they continued at the same speed until the sounds began to get much clearer. Up ahead, the left side of the tunnel opened out, and pillars were spaced evenly along the left side of the passageway, casting shadows against the right wall from all the light pouring through the gaps. They jogged up to the first gap between the pillars, and John cautiously poked his head out to take a look.\n\nHis voice came over the voice comm in their helmet as he said, \"We're at the lower forge level. Stick to the right wall, and we won't be spotted.\"\n\nFollowing his own advice, he crossed to the right hand side, then began moving onwards at the same brisk walk as before. Irillith went next, with Rachel following, and Alyssa bringing up the rear. She poked her head out to take a quick peek before continuing after them, and she blinked in surprise at the view. \n\nThey were overlooking a huge forge area, that reminded her of the derelict steelworks back on Karron, which had previously built the digging machinery used to bore out the asteroid. Enormous machinery clanked and ground away, mixed in with the hiss of molten lava, which was being directed down channels through some strange kind of magma viaduct. There were dozens of Trankarans working away in the forge, and the entire area was a positive hive of industry.\n\nJohn's impatient voice sounded in her helmet as he said, \"Stop dawdling Alyssa. Keep up.\"\n\nShe had one last lingering look at the huge forge, then darted over to the right hand side of the tunnel, and sprinted to catch up with the others. She saw them huddled together behind another group of loading carts, so she crouched down next to Rachel, and had a look around to get her bearings. They were in some kind of disused loading area, with pitted, worn, and abandoned machinery lying dormant around the room beyond. To their left they could hear the distant sounds of the bustling forge coming from tunnels that led deeper into the mountain.\n\n\"Follow me, and keep right,\" John said curtly, smoothly mounting the platform, and moving quickly on ahead.\n\nThey followed his lead, and the tunnel leading out from the loading room began to head upwards at a sharp incline. It had been a few months since Irillith had done any hard physical exercise like walking up steep slopes as she now found herself doing, and her body was not in the peak of condition. She was winded by the time they eventually reached the top ten minutes later, and she sucked in deep breaths, while noting that her companions were unaffected by the gruelling climb.\n\nJohn waved them to a halt, and the girls crouched down, covering the entrances to the room with their fire arcs. He glanced at his helmet HUD, and said, \"We're directly under the palace now. According to the maps given to me by Senator Vamred, we just need to travel along a series of galleries, then there's tunnels that lead directly up into the Radiant Palace.\"\n\nAlyssa pondered this for a moment, and asked, \"Are there likely to be many guards?\"\n\nJohn turned to look at her, and there was a glimmer in his eyes as he replied, \"I hope so. Now, let's move out.\"\n\nFeeling a dark sense of foreboding, Alyssa nodded, and watched him dart across the room that the tunnel had opened out into. This room was well lit, with a bright glow coming from the next chamber ahead of them. She covered Irillith and Rachel as they glided out in John's wake, and she gasped when she caught up, as she looked out into the huge room beyond.\n\nShe was looking out into some kind of natural cavern, with pillar lined tunnels visible in the cliff wall opposite, at least one-hundred metres away. They were fairly close to the base of the canyon, with a twenty metre drop to the floor below, and what looked like a river of molten lava flowing along the length of the crevasse. She walked closer to the entrance of this vast room, and looking up, she could see dozens of bridges criss-crossing the canyon. Long shafts of natural light shone down from the surface, a good hundred metres above their heads. From all around them, coming from multiple levels, noisy sounds of clanking machinery could be heard. \n\nThe loud sound of heavy clomping boots rang out from their left, and it seemed that a Trankaran was climbing up the nearby ramp, heading towards the level they were on. The girls melted back into the darkness of the room, but John shouldered his rifle, and drew his sword silently as he pulled back out of sight. A Trankaran soldier was making steady progress up the ramp, and they could see his hulking form cast a shadow along the tunnel wall ahead of them, as he blocked the light from the canyon beyond. Finally reaching the top of the ramp, he entered the tunnel, and immediately turned left to continue along the pillar lined passageway that headed off into the distance.\n\nJohn raised his sword back above his head, then rushed forward and brought it down in a whistling overhead chop. The Trankaran was caught completely by surprise, and the gleaming white Alyssium blade struck him dead centre on the back of his head, then cleaved down through his thick, granite-like skull. The enormous force of John's swing brought the blade down through the Trankaran's armoured torso, and he chopped him in half with a hideous grinding screech of metal.\n\nThe poor alien creature didn't even have a chance to react, and was killed instantly, collapsing to the floor in two separate armoured pieces with a dull clang. John sheathed his sword, and dragged the corpse back into the room, before taking a quick look back into the canyon. Miraculously, no one had heard the noisy execution of the Trankaran soldier, but with all the loud clanging coming from adjoining rooms, the other Rockmen in the area were none the wiser.\n\nConfident that they still had the element of surprise, John unshouldered his Punisher railgun, and strode ahead, while hugging the right hand wall. Irillith followed after him immediately, but Rachel and Alyssa shared a nervous glance before they proceeded down the passageway. It ran in a straight line for over a hundred metres, before ending at set of sturdy double doors that were currently flung open. This seemed to be some kind of stairwell, but luckily there was no one using this particular section at the moment. \n\nThere was a window looking out onto the canyon, and Alyssa could see several Trankarans roaming along the passageway directly opposite them. John walked forward, to continue through another set of doors opposite the first they had just passed through, which would lead them into the next section of tunnel. \n\nJohn paused when Alyssa asked cautiously, \"What if we're seen going along these tunnels? There isn't a lot of cover along here, and one of them might spot us, and raise an alarm.\"\n\nHe turned and smiled at her as he said in a chilling voice, \"Then we kill everyone we see.\"\n\nNot feeling reassured in the slightest, Alyssa walked over to join him at the tunnel entrance. John left the relative protection of the room, and began to stroll along the passageway. His boldness seemed to be paying off, until two Trankarans appeared directly ahead of them in the next stairwell room along, and turned to walk down the passageway that John and the girls were now occupying. They halted, shocked expressions on their big broad features, as they spotted what appeared to be Terran interlopers in the capital city on their homeworld. One of them began to raise his rifle and...\n\n\"VrmPrrrkaow!\" John shot him in the chest with a three round burst from his railgun. \n\nThe hyper-accelerated rounds smashed into the Trankarans armoured torso, punching huge holes through his armour. The eight-foot-tall Rockman teetered and then crashed to the floor, an expression of stunned disbelief on his face. His companion stared at his fallen friend in horror, then roared defiantly as he raised his own weapon. He was shot in the face by John a moment later, and his decapitated body toppled backwards to collapse on the basalt floor of the tunnel.\n\nJohn sprinted down the passageway to the corpses, but the flash of movement was spotted by one of the Trankarans strolling along the corridor opposite. He turned his head to see what the glimmer of white was, and when he saw the slain guardsmen, he rushed into a nearby room and out of sight. John had just started hauling the bodies into the stairwell room that the Trankarans had emerged from, when a shrill ringing sound echoed around the cavern, seemingly coming from several directions at once. The girls ran up to join him, their faces showing their concern at triggering an alarm.\n\nDropping the mangled corpses he had been dragging, John smiled at the girls and said, \"New orders ladies. Kill any Trankarans in our way.\"\n\nA sudden rush of movement caught Alyssa's eye through the window in the room, and she saw what looked like a squad of soldiers running along one of the stone bridges that crossed the canyon.\n\n\"Incoming soldiers!\" she warned him, pointing up at the bridge overhead.\n\nJohn stepped over to the window, then took careful aim. \"VrmPrrrkaow!\" the Punisher railgun chattered, and the window was blown out in hundreds of shards of glass, as the twenty millimetre slugs then smashed into the rocky bridge. The structure trembled, and the guards paused to steady themselves, holding their arms out to keep their balance. He grinned, then flipped off the safety on the grenade launcher with his left thumb, and pressed the trigger button. There was a hollow sound as the 25mm high-explosive grenade left the underslung launcher, and a second later there was a loud explosion as it struck the Trankaran in the middle of the group. The blast sent the hulking soldiers flying, and they tumbled off the bridge, letting out deep rumbling screams as they fell the hundred metre drop into the river of lava below.\n\nIrillith had stopped when they entered the room, and was staring in shock at the devastated corpses of the Trankaran soldiers that John had killed moments before. The first one had three huge, foot-wide holes blasted through his armoured breastplate, and the rounds had continued onwards, creating an enormous cracked cavity in the aliens rocky chest. She remembered the damage their old rifles had dealt to the Fulmanax warriors, and these brutal impact craters were ample evidence of the entirely new levels of destruction these upgraded railguns were capable of. Not for the first time, she was forced to re-evaluate just how viciously effective the Mael'nerak and his lethal band of warrior-women were.\n\n\"With me, Irillith,\" John ordered her curtly, snapping her from her dazed reverie. \n\nNodding, she trotted over to him, and they began to run along the next hundred metre long tunnel towards another stairwell. They paused and fired at Trankaran soldiers as soon as they appeared, killing them quickly with deadly accuracy as they progressed along the passage. John had stopped about half way along the latest tunnel, to take out a Trankaran soldier two levels above them, when a bulky Trankaran leaned out around the doorway ahead of them with his rifle at the ready. There was a strange searing hiss, and then a loud shriek as his rifle fired, sending a shotgun like spread of slugs directly at John. There was an odd whumping sound, and the slugs were harmlessly deflected by the magnetic field, bouncing back to hit the floor and walls. \n\nIrillith raised her laser rifle to fire back, but the Trankaran had ducked behind the doorframe, and out of sight. She heard a sinister bubbling sound, and after a quick glance around, realised it was coming from where the slugs had hit the walls. The walls were pitted and scored where the molten contents of the round was eating through the rock, sending streams of burning liquid down to the ground. Not wanting to risk letting the soldier fire again, she aimed down the corridor, and waited patiently. The second he popped out from behind cover, she shot him in the face with a long burst of blue laser fire that neatly seared his rocky head from his body.",
        "More of these shotgun like molten rounds began to hit the tunnel around them, as soldiers appeared in large numbers on the other side of the canyon, firing across at the interlopers. John led the others in a mad dash into the next room, then crouched below the window frame, and began to return fire. Rachel and Alyssa ducked down next to him, and they rapidly cleared any Trankarans who were visible in the nearby area, rocky heads and chests exploding as they were ripped apart by uncannily accurate marksmanship.\n\nSeeing no visible targets, they quickly reloaded, and John said, \"There's just one more tunnel to cross, then we can head up to the palace. The throne room isn't far from there.\"\n\nAlyssa frowned and asked in a worried voice, \"Won't the Glowing Queen have bolted by now? With the hornet's nest we've stirred up here, she must know hostile forces are nearby.\"\n\nJohn grinned and said, \"They have a panic room apparently. A security vault, which is supposed to be impregnable. Senator Vamred was quite certain she wouldn't leave the Radiant Palace, and would head straight for the vault instead.\"\n\nHe had a quick look around at the levels above them, but seeing no sign of movement, he rose to his feet, and walked over to the next set of doors to the final tunnel. It was still quiet, so he jogged out into the passageway, with Irillith following close behind. Rachel and Alyssa gave each other nervous glances, neither of them liking this mission one bit, but they smiled at each other bravely, then stood to follow.\n\nThe run across the final column lined tunnel proved uneventful, right up until John was nearly at the final set of doors. Suddenly over on the opposite side of the ravine, dozens of Trankaran soldiers appeared at the ledge of the tunnels up above them, and the passageway was showered in molten rounds as they opened fire at John. Ignoring the ineffectual munitions that were being harmlessly deflected by the magnetic field in his armour, he carried on running, with the girls trailing in his wake. \n\nAlyssa and Rachel were approximately ten metres behind Irillith when the fusillade of shots opened up, and they were about to pivot and return fire, when their world suddenly turned upside down. A huge explosion ripped into the tunnel just ahead of them, sending Irillith flying forward, and knocking Alyssa and Rachel flat on their backs with the concussive force. \n\n\"What the fuck was that?!\" Alyssa gasped in alarm, as she struggled to regain her feet. \n\nRachel was dazed, and was shaking her head to clear it, so she didn't reply. Alyssa looked across the canyon, and saw a Trankaran armed with a shoulder mounted missile launcher, aided by a second soldier who was rapidly loading the launcher with another rocket. She raised her rifle and sighted the Rockman with the launcher, her targeting reticle hovering over his chest, and she pulled the trigger a split second before he fired again. The Trankaran was ripped apart in the hail of railgun rounds, sending him lurching backwards, and upsetting his aim, which ultimately saved her life. \n\nThe missile raced down, slamming into the rocky tunnel directly below them, instead of Alyssa who had been his target. Her surging feeling of relief was short lived, as with a tearing crash, the section of passageway she was kneeling on ripped away from the wall, dropping away beneath her and Rachel. With terrified screams they both disappeared out of sight.\n\nJohn had been unaffected by the explosion, but he heard it nonetheless. He whirled to see what had happened, and was about to open fire on the Trankaran soldiers opposite when the second explosion devastated the tunnel behind him. He quickly switched to full auto, then opened up on the mass of soldiers opposite, repeatedly firing grenades onto the ledge as well. The mix of railgun rounds and grenades annihilated the squad opposite, and when he finally ceased fire, there was no one left alive to threaten them. \n\nIrillith had regained her feet, and was walking unsteadily towards him, darting nervous glances across the canyon. He activated his voice comms, and asked, \"Alyssa, Rachel, are you alright?\"\n\nAfter a long pause, Alyssa's voice came through, and she replied, \"We got a bit banged up in the fall, but we're both okay. We're on the level below.\"\n\nJohn nodded and said, \"Alright, get to cover, we'll come and join you.\" \n\nHe turned on the spot, and pushed open the doors, only to get knocked sprawling by a bulky Trankaran who punched him in the face with a huge rocky fist. John's railgun was knocked from his hand, and it skittered across the floor until it got snagged on some debris, teetering on the broken edge of the collapsed passage. He grinned and leapt to his feet, whipping his sword from his shoulder, and charging into the two Trankarans who had ambushed him. \n\nHe ran the one on the right through with his blade, then quickly tore it free as he barrelled into the enormous Trankaran soldier on the left. The two of them went crashing across the floor as the Rockman was knocked off his feet by the impact, while the first soldier collapsed, practically cut in half by John's savage sword thrust. The second Trankaran recovered quickly, twisting and pinning John's right arm to the ground, to prevent him from using his sword. The bulky alien then launched a flurry of massively powerful punches with his left fist into John's torso, the blows mighty enough to leave impact craters in the chestplate. \n\nUnfortunately for the Trankaran, he wasn't aware of John's superhuman strength, at least not until John whipped his right arm across his body, sword in hand, and neatly cleaved through the creature's torso. The Trankaran's look of horrified disbelief was frozen on his slab-like face as John casually flicked his upper body off his chest, then scrambled to his feet. He smiled with satisfaction, until he looked up, and found himself staring down the barrel of a Punisher railgun.\n\n***\n\nIrillith had been sent tumbling to the floor after the first explosion, and her first instinct had been to flee for cover, when she eventually managed to stagger to her feet. After taking a couple of stumbling steps, she saw John open fire on their attackers, and she watched in astonishment as he ripped the Trankaran forces to pieces with the incredible firepower at his disposal. She was about to walk up to join him, when two more Trankaran soldiers ambushed John by the door, and sent him sprawling on his back.\n\nShe raised her laser rifle to open fire on them, when John's glossy white railgun got knocked from his hands, and slid across the ground past her feet. Turning to watch it, she saw it come to a halt just before the section of collapsed tunnel. She took a furtive glance behind her, and saw John rolling on the ground with a Trankaran soldier, and a wicked grin spread across her face. \n\n***\n\nAlyssa raised her right hand, and the metal beam trapping Rachel groaned in protest, lifting smoothly in her telekinetic grip. The brunette quickly crawled free, and when Alyssa offered her a hand, she took it and stood up swiftly. \n\n\"Are you sure you're okay?\" Alyssa asked the young woman with concern, \"Nothing's broken?\"\n\nRachel nodded and smiled at her as she said, \"I'm going to have to give Dana a big kiss for that one. I barely felt a thing when the beam fell on me. I might have a few bruises tomorrow, but I'm not in any pain.\"\n\nAlyssa smiled at her, then the two of them quickly crouched behind the pillars that lined the ground floor passageway, ducking out of sight. They scanned the tunnels opposite but couldn't see any signs of Trankaran forces.\n\n\"Looks clear,\" Rachel said, \"We probabl-.\"\n\nAlyssa abruptly tuned out the brunette, as a gloating, triumphant voice appeared in her mind. One she had never heard through telepathy before.\n\n*I will not be your plaything Mael'nerak. Arrogant fool, to discount me so easily. This ends now, and I can finally be free!*\n\nShe immediately recognised Irillith's voice, and with sudden shocking understanding, realised why she could suddenly hear her. *John!* she cried out to him in alarm, *Irillith's about to attack!*\n\nHer eyes widened in horror as she suddenly remembered she was blocked from his mind.\n\n***\n\nIrillith smiled and shouldered her laser rifle. Powerful as it was, she'd witnessed hours of video footage where the Mael'nerak had discussed the laser reflective power of his armour with his harem. Even though she'd been delighted to get her hands on her laser rifle again, she knew it was far too risky to make an attempt on his life with it. \n\nNow though, his very own rifle had dropped at her feet; the perfect tool to facilitate her escape from his clutches. Having witnessed the awesome destructive power these railguns possessed, she knew it would punch holes through him, just like it had done to those Trankarans. She grinned evilly, and leaned down to pick up the rifle. It was heavy, but she was a strong woman, the females of her species enhanced by the Progenitors. Yet another delicious irony, to compound her using his own weapon to destroy him. She gripped it in both hands, then stalked into the room after him, stopping in the doorway when she saw him rise to his feet. He looked up, his smiling face frozen as he stared down the barrel of his own weapon. \n\n\"This ends now, 'John', or should I just call you Mael'nerak?\" she gloated. \"I won't be serving you, or anyone else for that matter.\"\n\nHe finished standing slowly, his smile broadening into a cocky grin as he said, \"You won't be able to shoot me. I've seen the looks you've been giving me. That overwhelming desire to be my obedient slave.\"\n\nIrillith felt the dreadful truth in his words, and that caused her anger to flare, fuelling her desire for revenge. She aimed at him with the railgun, and tried to pull the trigger, but her finger wavered, refusing to obey her.\n\nJohn laughed at her mockingly, and said, \"You see now? Your body knows what you need, even if your mind hasn't caught up yet.\"\n\nFocusing all her anger, and using it to fuel her will, Irillith mustered every last bit of mental strength she possessed, and with a surge of relief, yanked her finger down on the trigger.\n\n\"Click,\" the weapon went ominously, and she stared down at it in horror. Frantically turning it on its side, the magazine counter read \"18\", so she knew she had ammo.\n\nJohn gave her a slow hand clap, chuckling as he said, \"Your willpower is certainly impressive. It's going to make breaking you all the more delicious.\" Pausing for a moment, he quirked an eyebrow at her and said, \"Turn over the gun.\"\n\nIrillith did as he asked, turning the railgun in her hands, and she spotted a red light on the grip. She stared at him with a look of blank incomprehension, until he said, \"DNA reader built into the grip. Dana must have thought you were too naughty to play with her toys.\"\n\nShe dropped the railgun with an inarticulate cry of rage, and reached for her laser rifle, just as she heard a strange searing hiss, and then a loud shriek to her right. Her right flank was suddenly a mask of scorching, burning agony, a torrid blistering heat more terrible than the lash of a neural whip, and she let out a tortured scream of pain. Staggering backwards through the doorway, she stared down at the melted holes in the side of her armour, where the Trankaran soldier coming down the stairs had just shot her. With a final desperate act to escape her torment, she took faltering steps over to the ledge, and flung herself over the precipice to be incinerated in the river of molten lava below.\n\n***\n\nAlyssa heard half the dialogue above her via Irillith's incensed inner voice, and she leapt to her feet, then started running for the doorway to the stairwell. She had just reached the doorway, when she heard Irillith's agonised scream, and a second later, she saw a flash of gold out of the corner of her eye.\n\n*CATCH HER!!* John's mental voice thundered, sounding deafening as it echoed through her mind.\n\nActing on pure instinct, she reached out with her hand, and snatched Irillith from the air with a telekinetic net, preventing her from falling into the bubbling lava below. Alyssa beckoned with her hand, and the Maliri's golden armoured body came drifting towards her, writhing in anguish. She placed Irillith on the ground, just as Rachel ran over to join them, and the young doctor hurriedly knelt by the critically injured woman's side.\n\nGlancing up at her a moment later, Rachel said, \"This looks really bad. We've got to evac her immediately if we're going to have any chance of saving her.\"\n\nAlyssa wanted to protest, but John's voice sounded in her mind again. *Take Rachel and Irillith, and return to the evac point. I'll join you shortly. I've got business to take care of with the Glowing Queen.*\n\nUnable to deny his will, Alyssa nodded, then gestured to Irillith, lifting the tortured woman with her mind. \"Let's get out of her,\" she said to Rachel firmly.\n\nRachel jumped to her feet, slung Irillith's laser rifle over her shoulder, and readied her Punisher Railgun at her shoulder. \"I'll take point,\" she said bravely. \"You have enough to deal with, levitating her out.\"\n\nAlyssa nodded, and the two of them jogged back down the tunnels, with the thrashing golden armoured Maliri in tow.\n\n***\n\nJohn sighed with relief, no longer having to bother with the pretence any longer. He picked the railgun up off the floor with his left hand, and slung it over his shoulder, his sword still gripped in his right. He glanced up at the Trankaran soldier who was floating off the floor, his legs kicking frantically, as his hands clawed at the invisible fingers locked around his throat.\n\nSmirking, John said, \"Oh, I'm sorry, I forgot about you. Now, I would spend some time making you pay for disrupting my plans, but I've got an urgent meeting with your Queen.\"\n\nWith a casual twist of his wrist, John ripped the Trankaran soldier's head from his body, then let the lifeless corpse clatter in a heap on the floor. He gripped his long sword tightly, and dancing Eldritch lightning began to twist and writhe up its length, moving as though alive, as it engulfed the blade. He began to run towards the stairs, and his form began to blur as he moved, travelling faster than the eye could track. \n\nThe next couple of rooms above him were empty, but in the third, two Trankaran soldiers gripped their weapons tightly, both their broad faces looking deeply worried. He paused for a split second, torn between continuing onwards, and stopping to indulge himself. One look at the brutes helped him make up his mind, and his face curled in a sneer of disgust. These creatures were appallingly ugly abominations, a twisted perversion that mocked the Progenitor ideals. He lunged forward, moving in a shimmering blur, and rammed his sword through the chest of the first creature. It let out a deep bellowing cry of agony as the lightning coursing along his blade lashed through its body, and with a casual flick of his sword arm, its convulsing corpse was sent slamming into the right wall. The second one stared at him in terror, which was the last expression on its hideous malformed features, as he lopped off its head with a broad sweep of his blade.\n\nHis rage momentarily sated, he dashed from the room with a satisfied smile on his face, flickering as he moved, with freakish, unnatural speed.\n\n***\n\nAlyssa jogged along behind Rachel as they backtracked along the pillared passageway, while keeping a close eye on Irillith when she could. They stuck to the left wall, trying to keep away from the gaps between the pillars as much as possible, and they were untroubled by Trankaran soldiers as they retreated. Rachel paused when they came to the end of the last tunnel, peering ahead warily at the downward sloping tunnel entrance. \n\n*This might link up with the other tunnels,* Rachel thought to Alyssa tentatively.\n\nAlyssa took a quick look ahead, then glanced at the ramp leading up to the next level, which would leave them exposed to anyone in the canyon above. *We can't risk getting lost in a maze of tunnels. We'd better just take our chances on the ramp, then we can follow the same path back out.*\n\nThe brunette nodded, and sprang into action, darting over to the basalt pillars to glance around for any enemies. Not seeing anyone in the immediate vicinity, she rushed up the ramp in short bounds, moving quickly to limit the amount of time she was visible.\n\nRachel's voice came through to Alyssa a few moments later, and she said, *I've got you covered. Come up whenever you're ready.*\n\nGlancing behind her to check on the writhing Maliri, she felt a surge of panic tinged with relief when she realised Irillith had stopped convulsing in agony. *Irillith's not moving any more, so she's either dead or unconscious,* she replied, *We're coming up.*\n\nFollowing the same path Rachel had taken, she ducked between the gaps in the pillars, then ran up the ramp with Irillith in tow. The brunette stepped out from cover ahead of her, and the tawny brown lioness on Rachel's shoulder snarled in anger as she opened fire at targets above them. Alyssa couldn't see if the shots struck home, but she heard a Trankaran's scream as he fell to his death behind her.\n\nAlyssa ran through into the darker room at the end of the passageway she had just entered, and Rachel followed her in after Irillith had glided past her silently. Pausing for a moment, the blonde girl asked, *Do you want to check to see if she's still alive?*\n\nRachel shook her head and replied with a helpless shrug, *There's no point. I don't know anything about Maliri physiology, so I can't give her painkillers, or any other form of medication. I might end up accidentally poisoning her by trying to help her.*\n\nNodding her understanding, Alyssa took the left doorway and began the long run down the steep slope that would take them back to the loading area they had passed through earlier. She tried to contact the Raptor using the comm interface in her helmet, but was only receiving static. *Jade, can you hear me?* she asked in frustration, sending her thoughts out to the Nymph instead.\n\nJade's voice surged into her mind, and she immediately replied, *Yes, you're crystal clear. Is everything alright?*\n\n*We're fine,* Alyssa replied with relief, as she ran down the curving passageway. *But Irillith's taken a nasty hit. We're evacuating now, and should be back at the jetty in about twenty-five minutes.*\n\n*I'll be there, waiting,* Jade said with reassuring conviction.\n\n***\n\nJohn raced along the passageway, a trail of broken Trankaran corpses in his wake. Slaughtering these monstrosities had started to get boring, what with them moving in relative slow motion due to his psychically enhanced speed, and he sprinted through the guard room at the end of the tunnel without bothering to clear it. \n\nThe room beyond was a huge square stairwell, with a broad flight of stone steps spiralling upwards around the outer edge of the room, climbing skywards for at least another hundred metres. He started running up the stairs, taking two at a time as he rapidly ascended the staircase, appearing to be an indistinct white blur to the casual observer. The lower levels were clear, and he ascended the first half completely unopposed. However, he soon heard the sounds of dozens of heavy-booted feet making ponderous thumping sounds from up ahead. \n\nRounding the next couple of bends in the staircase, he came face-to-face with a squad of twenty Trankaran soldiers hurrying down the steps. When he paused to study them, they shouted booming cries of alarm, and raised their blocky rifles in anger. Glancing to his left, he grinned wickedly, and created a broad wall of force by the right edge of the room. The Trankarans began to fire at him, but the shots bounced off ineffectually, deflected by the magnetic field built into his glossy white armour. The Rockmen's angry bass shouts suddenly turned to ones of panic, as the telekinetic projection began to shove the rightmost members of the group into their fellows. John let out a dry chuckle, and with a mental surge, the wall shoved the entire squad of soldiers over the balcony. The stairwell reverberated with their booming cries, until there was a huge crash a couple of seconds later, and the seventy metre drop ended their terrified screams."
    ],
    "authorname": "Tefler",
    "tags": [
        "cum inflation",
        "teenager",
        "psychic",
        "maliri",
        "violent",
        "swallow",
        "bossfight",
        "progenitor"
    ],
    "category": "Sci-Fi & Fantasy",
    "url": "https://www.literotica.com/s/three-square-meals-ch-53"
}
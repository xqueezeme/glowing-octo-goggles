{
    "title": "Life after the Lottery Ch. 57",
    "pages": [
        "Some of you have asked for more detail about Samantha and Amy's background. This chapter will help with that. They finally move in and make it their home.\n\n*****\n\nThe Trip to New York and the move\n\nWhen I heard the alarm go off Saturday morning, I felt Dawn roll over and turn it off. I knew it was early.\n\n\"What time is it?\" I asked Dawn.\n\n\"4:30.\"\n\n\"Why so early?\"\n\n\"I have some things to do. Go back to sleep; I'll wake you in an hour,\" Dawn said.\n\n*****\n\n\"It's 5:30,\" I heard Dawn say as she shook me.\n\nI woke up, and Sam was curled up next to me sound asleep. I looked up at Dawn, and she had all of her wet hair wrapped in a tall.\n\n\"She sleeps like a log,\" I said.\n\n\"Wake her up and tell her to start getting ready.\"\n\n\"She will want to have sex,\" I said.\n\n\"Not this morning, we need to get ready.\" Dawn went back in the bathroom.\n\n\"Sam, wake up!\"\n\n\"Em...mm...mmmm...mmm.\"\n\n\"Time to get up and get ready to go.\"\n\n\"Emmmm, what time is it?\"\n\n\"It's 5:30, you need to get up and start getting ready.\"\n\nSam finally opened her eyes and looked at me.\n\n\"Emmm, time for morning sex,\" she said.\n\n\"Not this morning, we let you sleep in.\"\n\n\"It's just 5:30?\"\n\n\"I know. I have to take a shower and get ready too. You need to get up.\"\n\nSam grumbled and finally got up and went to her room. I got up and went to the bathroom.\n\n\"Is she up?\" Dawn asked.\n\n\"Yes. She wanted to have sex.\"\n\n\"She has to learn she can't do that every morning.\"\n\n\"You do,\" I said.\n\n\"Not this morning, I have to get ready,\" Dawn said.\n\n\"I do too.\"\n\nI got in the shower and cleaned up. When I got out and was going to shave, Dawn was sitting in front of the mirror slowly running a comb through all her beautiful wet long black hair. I turned on the water in the other sink.\n\n\"Comb this through my hair first,\" Dawn said handing me a bottle.\n\n\"Are you going to wear it straight?\"\n\n\"Yes.\"\n\nI pulled the other chair up behind Dawn and took the bottle and poured some of it in my hands and then ran them through Dawn's hair. She had gotten up early so she could dry her hair out straight. She wore it straight most of the time, but I knew what she was doing this morning.\n\n\"You know I love it when you do your hair this way,\" I said.\n\n\"It has been awhile; I thought I would wear it this way to New York.\"\n\n\"It will look nice with that white suit.\"\n\nI spent a few more minutes running Dawn's special solution through her hair. When I finished, she picked up her comb and continue to run it through all of her hair as I shaved. By the time I finished shaving, she was slowly blowing it dry.\n\n\"It's 6:00. I will go and make sure everyone is up,\" I told Dawn as she worked.\n\n\"Open the safe so I can get my diamond earrings for the girls.\"\n\nI stopped in the closet and opened the safe then went down the hall to Amy's room. She was sitting at the sink working on her hair.\n\n\"I just wanted to make sure you are up,\" I said.\n\n\"What about Sam?\"\n\n\"Going to check.\"\n\nI left her and walked down to Sam's room. She was in the shower.\n\n\"It's almost 6:00, are you going to be ready by 7:00?\" I asked.\n\n\"Yes! Come back in 15 minutes.\"\n\n\"Okay.\"\n\nI was still naked, but I walked downstairs to check on Sherri and Brenda. I went into Brenda's room first and heard the shower. I walked into the bathroom.\n\n\"Breakfast will be ready in about 30 minutes,\" I said.\n\n\"Oh, good morning,\" she said turning around and looking at me.\n\n\"Did you sleep well?\"\n\n\"Very! I'll be out soon,\" Brenda said.\n\nI walked down the hall to Sherri's room. She wasn't in bed, and I didn't hear the shower running. I walked into the bathroom, and she was sitting at the counter putting on her makeup. Her hair was already dried.\n\n\"You look like you have been up a while,\" I said.\n\n\"I have.\"\n\n\"Breakfast will be ready in about 30 minutes.\"\n\nSherri reached over and grabbed my partially hard cock and held it.\n\n\"Do I have time for this for breakfast?\"\n\n\"Not this morning, I need to get ready so that I can cook.\"\n\n\"Too bad.\"\n\n\"Maybe next time you stay overnight,\" I said.\n\n\"I like the sound of that,\" Sherri said with a big smile and squeezed my cock before she released it.\n\nI stopped in the kitchen and started the coffee then headed back up the stairs. I stopped in our bedroom and heard Dawn's hair drier still running on low. I went back down the hall to Sam's room; she was still in the bathroom.\n\n\"We don't have time for sex,\" I said as I walked into the bathroom.\n\n\"I know, I need you to do something for me.\"\n\n\"What?\"\n\n\"Sit down behind me and braid my hair.\"\n\n\"It's still wet.\"\n\n\"I know. Braid it tight.\"\n\nI got the other chair and sat behind Sam and combed all her long red hair back then began to braid it.\n\n\"Get it tight,\" she said.\n\nI kept working while Sam put on some makeup. About five minutes later I was finished.\n\n\"Are you going to wear your hair like that?\"\n\n\"You're finished?\"\n\n\"Yes.\"\n\n\"Damn, Amy takes twice that long.\"\n\n\"I braid Dawn's hair a lot. Anything else?\"\n\n\"Nope. I'll be ready soon.\"\n\n\"I'm going to start breakfast,\" I told her.\n\nI stopped in the bedroom and grabbed a robe then went down to the kitchen to start breakfast. By 6:30 Sherri and Brenda had come to the kitchen and were helping. A few minutes later Amy and Sam came down dressed too. They all put everything on the kitchen table and sat to eat.\n\n\"I'll be back. I have to get dressed,\" I said.\n\nI went back upstairs and got the black Armani suit out that Dawn wanted me to wear. I had slipped on my underwear and was coming back out of my closet with the white silk shirt when Dawn came out of the bathroom.\n\n\"Wow,\" I said.\n\n\"Is everyone up?\"\n\n\"Yes, they are all eating breakfast.\"\n\n\"Okay, get dressed. Tell the girls to come up here to get some jewelry.\"\n\n\"Are you going to eat?\" I asked.\n\n\"Yes, I will be down after I get dressed,\" Dawn said.\n\nI slipped on my suit as I watched Dawn slip on a white silk thong then the thin white camisole she was going to wear. I admired the way the way the expensive silk formed around her breasts. By the time I had my suit on Dawn had the white skirt on and was slipping on some heels. I left the bedroom and went downstairs.\n\n\"You look good in Armani,\" Brenda said as I walked into the kitchen.\n\nI sat down and fixed a plate.\n\n\"Girls, Dawn said when you finish eating you need to go and get some jewelry from her,\" I said.\n\n\"I'm finished!\" Sam said and jumped up and took her dishes to the sink then ran up the stairs.\n\nA few minutes later Amy got up and went upstairs.\n\n\"Where is Dawn?\" Sherri asked.\n\n\"She will be down soon. I'll fix her a plate so I can clean up.\"\n\nI made Dawn a plate and started picking up dishes. Brenda and Sherri helped me get all the dishes cleaned off and into the dishwasher. I was rinsing out the sink when I heard Sherri.\n\n\"Wow!\" Sherri said.\n\nI turned around and saw Dawn walking toward the kitchen. She didn't do this often, but she had gone native. She had all her hair pulled back and running down her back. The white suit she had on really highlighted the earrings she had on that were made from blue bird feathers. She also had on a turquoise necklace she had had diamonds added to.\n\n\"My god, you look fabulous,\" Brenda said.\n\n\"I was feeling a little native,\" Dawn said as she sat down to eat.\n\n\"Dawn, what do you use on your hair to get it to shine like that?\" Sherri asked. \"I wish I could get mine to do that.\"\n\n\"Secret formula, I will give some.\"\n\n\"Where do you get it?\"\n\n\"I make it.\"\n\nDawn looked gorgeous with all her long black hair pulled back with the white suit. She didn't dress this way often, but when she did, she looked wonderful and very Native American. I looked at Sam and Amy, and they had on diamond earrings and necklaces. \n\n\"Sherri, you and Sam make sure you have the clothes you want to show Linda,\" I said.\n\n\"There in my room,\" Sherri said. She and Sam went down the hall.\n\nJust before 7:00 we were all ready to go. \n\n\"Who is riding with who?\" I asked.\n\n\"Sam, I'll let you drive my Jag,\" Dawn said. \"Amy can ride with us.\"\n\n\"Okay, let's go.\"\n\nWe went out the front door; Dawn, Sam, and Amy got her Jag. Sherri and Brenda got in the Escalade with me. It was 7:00 and we headed to the airport.\n\n\"James, Dawn looks fabulous,\" Brenda said.\n\n\"She doesn't dress like that often.\"\n\n*****\n\nAbout 7:30 we were pulling up to the security guard at the gate that went to the private jet area. He let us through, and we drove to the far end of the airport. I pulled into the parking lot and saw Linda's red Diablo. We parked next to it and got out and grabbed our things and headed toward the terminal door. It was busy for a Saturday morning. I stopped and opened the door and let all of the beautiful ladies walk in. I went in behind them and saw Linda standing and talking to Rachel. She looked up and saw us walking toward her.\n\n\"Oh, my god, Dawn, you look...very Indian,\" Linda said as Dawn walked up.\n\n\"I was feeling a little native this morning.\"\n\n\"You are beautiful. You look great!\" Linda said.\n\nThere were a lot of men standing around; some looked like they were with their wives. They all looked up at Dawn as she stood.\n\n\"They are fueling the jet, we will be ready to go in a few minutes,\" Rachel said.\n\n\"Dawn, are those real bird feathers?\" Linda asked.\n\n\"Yes, I have had them a long time.\"\n\n\"They look perfect with the necklace.\"\n\n\"I had the diamonds added to the necklace. My great uncle made it for me.\"\n\n\"Is that Cherokee?\"\n\n\"No, he just makes them and sells them to the tourist because they think all Native Americans make turquoise jewelry.\" Linda giggled.\n\nA few minutes later I saw her pilot walk into the terminal and say something to Rachel.\n\n\"We're ready to go,\" Rachel said, and we all followed her outside and got onto the jet.\n\n\"Wow,\" I heard Sam say once we were on. \"I like your jet.\"\n\n\"Oh, I forgot you haven't been on it,\" Linda said.\n\n\"It's big.\"\n\n\"I got the big one because we wouldn't all fit on the smaller one,\" Linda said. \"Everyone grab a seat.\"\n\nLinda and Rachel sat down near the front. I walked the rest of them back to the seats. Once they were all seated and we had everything put away, I went back and sat with Dawn across from Linda and Rachel. The pilot got on and pulled up the stairs and went up front. A minute later the engines started, and he came back out.\n\n\"It will be a few minutes before we taxi away from the gate. Once we take off, it will take about an hour and a half to get to Teterboro.\" He went into the cockpit and closed the door.\n\n\"We will be there by 9:30. It will take about 30 minutes to get to downtown,\" Linda said. \"Did you all eat breakfast?\"\n\n\"Yes,\" Dawn said. \"Where are we going?\"\n\n\"We will go to 5th Avenue. There are plenty of places there to see. We will go to Saks last.\"\n\nA few minutes later we were moving. As we taxied toward taking off, I could hear Sam talking. She was very excited and was talking to Amy and Sherri.\n\n\"Please fasten your seatbelts, we will be taking off shortly,\" came over the intercom.\n\nA few minutes later we were speeding down the runway and then up into the air. I heard Sam giggling.\n\n\"This is not like a big jet!\" Sam exclaimed.\n\nIt was about 10 minutes before the seatbelt light went off. Rachel got up and went to the galley. I got up and walked back to Sam.\n\n\"Can we get up?\" Sam asked.\n\n\"Of course,\" I told her. \n\nShe popped out of the seat and walked around looking at everything. I sat down next to Amy.\n\n\"Make sure you keep your sister focused. We will need input from you two,\" I said to her.\n\n\"I hope this takes her mind off going home Wednesday.\"\n\n\"Has she said anything else?\"\n\n\"She just doesn't want to go with you and Dawn.\"\n\n\"I think it is best.\"\n\n\"I know.\"\n\n\"Have either of you talked to your parents about you coming?\"\n\n\"I heard her talking to our mom yesterday.\"\n\n\"Okay.\" I turned to Sherri and Brenda sitting across the aisle.\n\n\"Are you two ready to take some notes?\" I asked.\n\n\"We brought our computers,\" Sherri said.\n\n\"Take pictures with your phones too.\"\n\n\"James, I may take you up on what you owe me if I find some clothes I like,\" Brenda said.\n\n\"No problem.\"\n\nI got up and went back and sat with Dawn.\n\n\"Our teenager is checking out the plane,\" I said.\n\n\"She's fine,\" Dawn said.\n\nRachel came back with glasses of juice after she had served the girls. She sat down next to Linda and sipped.\n\n\"James, are you carrying your gun?\" Rachel asked.\n\n\"Yes.\"\n\n\"Good. We will pick up a few people when we land.\"\n\n\"I didn't see you put your gun on?\" Dawn said.\n\n\"You were working on your hair. I have my shoulder holster.\"\n\n\"Do Sherri and Brenda know you carry a gun?\" Rachel asked.\n\n\"I have told them that you do and that there could be other people with Linda.\"\n\n\"Okay.\"\n\nLinda stood up and turned.\n\n\"I want to stop at a few of the larger boutiques first so we can get a feel for how they look and feel,\" Linda said as everyone listened. \"After that, we will eat lunch.\"\n\n\"Where else are we going?\" Amy asked.\n\n\"I think we can get the best ideas from going to Saks. We can also do some shopping there,\" Linda said.\n\n\"Oh, boy,\" I mumbled.\n\n\"When we land there will be a limo waiting for all of us. I also want you to know there will be some other people joining us; they are my security detail. Don't worry about them following us around; it is a necessary evil,\" Linda said.\n\nLinda sat back down, and the four of us talked for a while. Brenda came up and stood.\n\n\"Linda, what all do you want us to be looking for?\" She asked.\n\n\"I want you to see how the stores are laid out. Saks is huge, but each area is laid out differently. See what you think feels too big and look around the boutiques to see if you find any good ideas. When we get back, I would like for you and Sherri to be ready to meet with the architects Monday and get to work. We have a lot to do.\"\n\n\"Where will be meeting with them at?\"\n\n\"My office. I have a conference room set up.\"\n\n\"What time would you like us to be there Monday?\"\n\n\"If you would be there by 9:00, we could get started. I have a meeting until noon Monday, but you two can see what the architects have so far.\"\n\n\"Okay, I will tell Sherri.\"\n\nBrenda walked back and sat with Sherri.\n\n\"I hope we can have everything worked out in a couple of weeks,\" Linda said.\n\n\"They are ready to go,\" I told her.\n\n\"How did this weekend go?\" Linda asked.\n\n\"Interesting.\"\n\n\"I bet!\"\n\nWe talked some more while we listened to the girls talking behind us. A while later Sam came up and sat on the arm of the seat.\n\n\"Will you unbraid my hair,\" she asked as she turned her back to me.\n\n\"Sam, did you let it dry that way?\" Dawn asked.\n\n\"Yes.\"\n\n\"It will be a mess.\"\n\n\"Just unbraided it.\"\n\nI removed the band from the end of her ponytail and slowly unbraided her hair. She now had three long and curled bundles of hair.\n\n\"Okay,\" I said.\n\nSam got up and went back toward her seat.\n\n\"I have got to see this,\" Dawn said as she got up and looked at Sam. \n\nI turned and looked over my seat. Sam had bent over and had her hair hanging over her head as she shook it and ran her hands through it for a few minutes. She finally stood up and tossed all of it over her shoulders. Now Sam had this mane of curly red hair that was fluffed out into a huge mass of crimson.\n\n\"You have never done that before,\" Dawn said.\n\n\"This is how I curl it quickly,\" Sam said.\n\n\"It looks great,\" Dawn told her.\n\nEveryone talked for a while. Soon, the pilot came on and said to buckle up because we would be landing soon.\n\n*****\n\nThe pilot opened the door and let the steps down. We all got up and got off the jet and into the waiting long black limo.\n\n\"How long is the ride?\" Sam asked.\n\n\"About 30 minutes,\" Linda told her.\n\n\"James, are you going to have any limos this big?\" Sam asked.\n\n\"One or two.\"\n\nWe sat and waited while Rachel talked to three guys. She finally walked to the limo with one following her. He opened the door and got in the front passenger seat then Rachel opened the door and got in and sat next to Linda.\n\n\"What's up?\" Linda asked.\n\n\"Nothing,\" Rachel replied.\n\nThe limo pulled off, and I watched as a black SUV pulled in behind us. I looked over at Rachel, and she looked at me.\n\nWe had driven for about half an hour before we stopped at the first boutique. We all got out and went inside while two guys got out of the SUV and stayed on the sidewalk. Linda was talking to Dawn as they all split up and walked around. Rachel was hanging back as Linda and Dawn looked.\n\n\"What's up?\" I asked.\n\n\"Nothing.\"\n\n\"Try again, Rachel.\"\n\n\"I got a phone call this morning. Her nut job got away.\"\n\n\"Where was he?\"\n\n\"Miami. They snagged him when he got off the plane from Australia and had been holding him. They said he got away last night.\"\n\n\"Who was holding him?\" I asked.\n\n\"Friends of ours. He has no money, and they don't have any idea where he is.\"\n\n\"Great, have you told Linda?\"\n\n\"No.\"\n\n\"You have to, Rachel.\"\n\n\"I will when we get back home.\"\n\n\"When we get back I'll take his picture to the Sherriff's and the Chief of Police and get the word out.\"\n\n\"Thanks. I will have to tighten her security. She won't like it.\"\n\n\"Are your people on the lookout?\"\n\n\"Yes. I have more people at her office, and the security around the house will be tightened.\"\n\n\"You two can always come and stay at the house.\"\n\n\"Okay. I hope she doesn't have a meltdown again,\" Rachel said.\n\n\"I don't think she will. If he shows up in town, there is not much the locals can do because he hasn't done anything here.\"\n\n\"If he shows up in town at his house, my people will take care of him.\"\n\nRachel went to be with Linda; I found Sherri and Brenda. We spent about 45 minutes in the store then left. We went to another boutique, then another. By 11:45 we were heading to one more before lunch. They spent their time in the last one before we were all back in the limo.\n\n\"It's time for lunch,\" Linda said as we settled.\n\nWe drove for a while then pulled up outside a restaurant.\n\n\"We are on time. I made reservations for 1:00,\" Linda said.\n\nWhen we got out the two guys from the SUV were waiting and escorted us all inside. It was a nice restaurant, and we all had a great lunch in a private dining room. By 2:30 we were getting back in the limo.\n\n\"Let's got to Saks,\" Linda said.\n\nThe limo pulled away, and the ladies talked about everything they had seen so far. Soon we were in front of Saks 5th Avenue.\n\n\"Everyone spread out and see as much as you can. I'm going to check out the lady's clothes first, everyone else take in as much as you can,\" Linda said before we got out of the limo.\n\nThe guy got out of the front seat and opened the door, and we all got out and went inside the huge store.\n\n\"James, I am going shopping with Linda, your heart may not take it. Go look at suits,\" Dawn said. \"Sam and Amy, you all look around then call me and find me, and I will get you two some clothes.\"\n\nDawn was right; I didn't mind shopping with her, I just hated getting out my credit card at the end. All the girls walked off, so I walked around until I found the men's section.\n\n\"Nice suit,\" I heard some man say. \n\nI looked, and a guy was standing there. His name tag said, Walt.\n\n\"My wife likes it,\" I said.\n\n\"If you like Armani, I'm sure we can find something in your length,\" Walt said.\n\n\"I had to order this one.\"\n\n\"We have Armani in tall. Would you like to see?\"\n\n\"Sure.\" I needed to kill some time, so I followed him to the Armani section.\n\n\"48 long?\" He asked.\n\n\"If it is cut right.\"\n\nHe went to the racks, and he pulled off a nice looking dark blue suit.\n\n\"This is a wool and silk blend. It is a tall cut. Slip the coat on and let me see if it fits,\" he said.\n\n\"I better take it back to the dressing room.\"",
        "\"No need to, we have law enforcement officers in here all the time. The gun won't bother anyone,\" he said.\n\n\"Good eye, but I doubt you have many law enforcement officers in here buying Amani.\"\n\n\"No, sir.\"\n\nI slipped my jacket off, and he took it. I took the coat and slipped it on. It fit perfectly, and I did like Armani. I buttoned the coat and looked in the mirror.\n\n\"How does it fit,\" he asked.\n\n\"Perfectly.\"\n\n\"Why don't you go and try on the pants.\"\n\nI took the pants back to the dressing room and tried them on and walked out.\n\n\"How do they fit?\"\n\n\"Fine.\"\n\n\"With your build, this size should fit you nicely. What type of law enforcement are you with?\"\n\n\"Attorney General's Office back home.\"\n\n\"Do you always carry your weapon when you are away from home?\"\n\n\"Most of the time, yes.\"\n\nHe reached up and ran his hand over where the pistol hung under my arm.\n\n\"If we let the side out about half an inch under the arm, it will make room for your weapon and the fit will still be okay. I do that on other suits for officers,\" Walt said.\n\nI decided I had just bought a very expensive suit.\n\n\"I like it; I'll take it.\"\n\n\"Let me pin up the legs.\"\n\n\"I'm only here today; I will have my tailor make the changes.\"\n\n\"Very good. Do you have a tux for evening wear?\"\n\n\"I do.\"\n\n\"What about something that is not so formal.\"\n\nHe walked away and went through a rack and brought back a black suit.\n\n\"This is a little less formal than a tux. It has the satin labels and the pants stripe but is not cut like a tux, more like a suit. It looks nice with a white shirt and black tie.\"\n\nI didn't need it, but I tried it on. After two more hours, I was trying on $400 silk shirts. I did like Armani.\n\n\"Walt, I think I have reached my limit,\" I told him.\n\n\"Very good. You have some very nice suits now and some shirts. What else can I show you?\"\n\n\"That should be enough. I better go and find my wife and see how much she has spent.\"\n\n\"Are you two in town today to shop?\"\n\n\"Not really. My wife and I have a partner, and we are opening a high-end ladies fashion store. They are getting some ideas.\"\n\n\"Really, where will it be?\"\n\nI told him the state we lived in, and that was enough.\n\n\"I see. Are there other stores like that in the area?\" He asked.\n\n\"No. We are hoping this will be a major draw for people in the area and for people to come and visit.\"\n\n\"If it's done right, it should be. Are you only carrying women's wear?\"\n\n\"Just high-fashion and high-end lingerie and bathing suits.\"\n\n\"Sir, if you are going to open a store to draw people in, you need to carry very nice men's clothes too,\" Walt said.\n\n\"At this point, it is just women's clothes.\"\n\n\"Is there anywhere in your area that carries clothes like you have just bought?\"\n\n\"No. If men want something nice, they have it tailored locally.\"\n\n\"But sir, that is not Amani?\"\n\n\"No, it's not. I have been able to order the few Armani suits I have.\"\n\n\"Maybe you should consider adding men's clothes. You could carry Armani and other nice men's clothes.\"\n\n\"We are taking a big gamble with the women's clothes. I don't think there will be room in the store to add men's clothes.\"\n\n\"A nice men's store does not take the kind of space a women's store does. Look around, see how little room this section takes up,\" Walt insisted.\n\nI looked around, and all the nice clothes didn't take up that much room.\n\n\"Walt, how big of an area is this?\"\n\n\"About 4,000 square feet or less plus the back room. The only thing not in this area is shoes.\"\n\nI looked for a minute.\n\n\"I guess I better have you ring everything up, Walt.\"\n\n\"Yes, sir.\"\n\nI went back to the dressing room and put my suit back on. I walked out and handed Walt the last shirt I had tried on. He was already making a big pile at the registry along with four suit bags. I watched as he carefully boxed the shirts, ties, and belts. He took his time ringing everything up, and I soon found myself $12,000 lighter.\n\n\"How much longer will you be in the store?\" He asked.\n\n\"Awhile, I'm sure. I have to call my wife and find her.\"\n\n\"Take this with you. When you are ready to leave, all of your items will be waiting for you up front. Just give them this,\" Walt said handing me a tag.\n\n\"Thank you.\"\n\n\"Thank you, sir.\"\n\n\"Walt, how long have you been selling men's clothes?\"\n\n\"About 20 years. I have been here for 15 of those.\"\n\n\"I guess you know quite a lot about the business then?\"\n\n\"Yes, sir. I am the department manager.\"\n\n\"How much inventory does a store like this carry in men's clothes?\" I asked.\n\n\"Do you mean how much do they have in inventory here?\"\n\n\"Yes.\"\n\n\"Well, we sell a lot of clothes here in a short period of time. There is a lot of inventory, but it is turned over often.\"\n\n\"How much?\"\n\n\"At cost, around 2 million.\"\n\n\"Wow.\"\n\n\"You have to understand the volume we do though. We may sell 100 suits in a day.\"\n\n\"That is a lot of money to have tied up in inventory.\"\n\n\"One of the smaller men's stores in New York that carry Armani and other nice men's clothes will only have about $600,000 in inventory. If they turn it over enough, that is plenty,\" Walt said.\n\n\"That's not bad.\"\n\n\"No, sir. A very nice store could be opened for that amount.\"\n\n\"That will give me something to think about,\" I said.\n\n\"Yes, sir.\"\n\nWalt pulled a business card out of his pocket and turned it over and wrote a phone number on the back.\n\n\"Why don't you take my card. My cell phone number is on the back. If you happen to have any more questions about opening a store, give me call.\"\n\n\"I'll have to do some research to see if a nice men's store could make it in my area.\"\n\n\"I am familiar with your area. I have relatives that live there. I think your idea for a nice women's store is a good one. I also think a nice men's store would do well.\"\n\n\"I'll think about it, Walt.\"\n\nI took his card and put it in my wallet when I put my credit card back.\n\n\"I may have to talk to my partner,\" I said.\n\n\"Sir, I have done well here. New York is a very expensive place to live. If you decide you may like to open a nice store, give me a call. I would be interested in going in with you. I would like to move closer to my relatives.\"\n\n\"Would you be interested in moving and running a store?\"\n\n\"Yes, sir, and I have some money to invest.\"\n\n\"May I ask how much?\"\n\n\"I could come up with half a million before I sell my house,\" he said.\n\n\"I'm sure you could buy a nice house where I live with half of what you will sell yours for.\"\n\n\"I could. My wife would really like to be closer to her relatives.\"\n\n\"I'll think about it. There is an 8,000-square foot store next door.\"\n\n\"That would be plenty big.\"\n\n\"I may be calling you Walt.\"\n\n\"Thank you, sir.\"\n\nI walked away and called Dawn's cell.\n\n\"Hey, where are you?\" I asked.\n\n\"Second floor in the lady's designer wear.\"\n\n\"I was afraid of that. Where are the girls?\"\n\n\"They are here too.\"\n\n\"I'll try and find you.\"\n\nI walked around and found the escalators and went up a floor. It took me about 15 minutes to locate all the women. Dawn was sitting and watching Sam model clothes. Linda was helping Rachel with some nice-looking evening dresses. I also saw a pile of boxes on the floor. I sat in a chair next to Dawn.\n\n\"Do I want to ask?\"\n\n\"No,\" Dawn said. \"Where have you been?\"\n\n\"Looking at some suits.\"\n\n\"Did you find any?\"\n\n\"A few.\"\n\nI sat patiently as Sam and Amy tried on clothes for a while. Linda was trying on some clothes as I watched the pile get bigger. The two sales ladies were busy. While they shopped, I sat and thought about what Walt had said.\n\n\"...ready to go...James!\"\n\n\"What?\"\n\n\"Are you ready to go?\" Dawn asked. \"It's 6:00.\"\n\n\"Sure.\" I got up and shook out the cobwebs.\n\n\"We have to pick up our things on the way out,\" Dawn said.\n\nI looked, and each them were carrying bags and boxes.\n\n\"Okay, I have to pick up some things too,\" I told Dawn.\n\nOnce we were at the front door Linda and Rachel stopped and handed some tags to some people, so did Dawn. Rachel had called before we headed down, so she went outside. I walked over and handed the people my tag, and they brought out some bags, boxes, and four suit bags that said Armani on the outside.\n\n\"You did find some suits,\" Dawn said.\n\n\"I bet I spent less than you did.\"\n\n\"I'm sure you did,\" Dawn said.\n\nIt took about 10 minutes to get everything loaded into the limo and the SUV that had been following us. \n\n\"Let's go,\" Rachel said.\n\nWe all went outside and got in the limo.\n\n\"I have dinner reservations for 7:00. Is everyone ready to eat?\" Linda said.\n\nShe got plenty of yeses.\n\n\"Rachel, take us to Per Se.\"\n\nRachel told the driver, and he rolled up the divider. All the ladies looked like they were worn out as we drove. Just before 7:00 we were pulling up near the Time Warner Center then stopped in front of the restaurant. Once we were out of the limo, we all walked in and were escorted to a private dining area. We sat down and took a deep breath to relax.\n\n\"The food here is wonderful; you will enjoy it,\" Linda said.\n\nAfter a few minutes, the wine steward came out.\n\n\"Good evening, Ms. Williams,\" he said.\n\n\"Good evening.\" Linda ordered wine for everyone. \"I hope all of you got some good ideas.\"\n\n\"We did,\" Sherri said.\n\n\"I have ordered dinner; I think you will like it.\"\n\n\"Can I have some wine?\" Sam whispered to me.\n\n\"I'm sure you can.\"\n\nA few minutes later several stewards brought the wine and poured as the first course was served. We all enjoyed a very long and wonderful dinner until a little after 9:00. Linda signed the bill, and we all got up to leave. I had my arm around Linda's waist as I escorted her to the door.\n\n\"May I ask what that dinner cost?\" I asked.\n\n\"No, you may not.\"\n\nOnce we were all in the limo, everyone settled in, and we pulled away from the restaurant.\n\n\"Linda, dinner was wonderful,\" Brenda said.\n\n\"I like to eat here when I am in New York.\"\n\n\"How often do you come to New York?\"\n\n\"About every other month.\"\n\n\"Do you always fly on a private jet?\"\n\n\"Yes. This jet and a smaller one belongs to my company. I have a jet just for my use coming in November until I get a new one in a few years. Trying to fly commercial is just to time consuming.\"\n\n\"Don't forget the helicopter,\" I said teasing Linda.\n\n\"Yes, I also have a helicopter, or the company does. I will have my own in November also.\"\n\n\"Do you fly that much?\" Sherri asked.\n\n\"About once a week. Rachel and I are always flying somewhere. Since I have taken over the company from my parents, I have been traveling all over the world checking on things and making some changes. I took James and Dawn with me to Europe recently.\"\n\n\"She landed her helicopter at the house once,\" Sam said.\n\n\"Linda, why do you need the security people?\" Brenda asked.\n\n\"It is just something I have to deal with when I travel. Rachel is in charge of all of my security.\"\n\n\"Are you afraid someone might attack you or kidnap you?\" Brenda asked.\n\n\"It is a concern. There have been some problems before, so I have to take precautions.\"\n\nI looked over at Rachel, and she was looking at me.\n\n\"That seems like a terrible way to have to live,\" Brenda added.\n\n\"It sucks,\" Linda said.\n\n\"Too bad,\" Rachel added.\n\nWe had ridden for about 30 minutes before we were back at the airport. The limo and the SUV drove out onto the tarmac and up to the plane.\n\n\"Stay here,\" Rachel said and got out.\n\nWe sat and watched for a while as the security guys unload the SUV and the limo and load everything onto the jet. I also saw Rachel on her cell phone, and so did Linda. Rachel finally got off her phone and came back to the limo.\n\n\"Okay, let's go,\" she said when she opened the door.\n\nWe all got out and got on the jet. Rachel stopped to talk to the pilots while we all found some seats. Sherri slipped off the jacket she had on and hung it on the seat. I admired her naked breast under the bodysuit for the second time today.\n\n\"Sherri, I really like that bodysuit,\" Linda said as she stood and looked.\n\n\"Brenda and I have decided to carry the expensive designer ones,\" Sherri said.\n\n\"I wish they would fit me,\" Linda said.\n\n\"Make sure I get your measurements, and I will talk to the designer.\"\n\nDawn took her coat off and hung it up before she sat down.\n\n\"Linda, I brought some other things for you to see,\" Sherri said.\n\n\"We brought some lingerie and bathing suits for you look at,\" Sam said.\n\n\"That is yours and Brenda's area.\"\n\n\"We just thought you might like to see a sample of what we will be carrying,\" Sherri said.\n\n\"Okay. When we get airborne, you can show me,\" Linda said and sat down.\n\nI sat next Dawn and leaned over to talk to Linda.\n\n\"They want you to see some of their samples,\" I said.\n\n\"Okay, if they are not tired.\"\n\n\"They are on cloud nine,\" I said.\n\nRachel walked up and sat next to Linda while the pilot pulled the steps up.\n\n\"Everyone buckle up, we are going to get out of here in a hurry,\" he said.\n\nThe engines came up, and we sat about 5 minutes then we started moving.\n\n\"He is in a hurry,\" Linda said.\n\n\"He wants to get in the air before all the red-eyes take off,\" Rachel said.\n\nSoon we were speeding down the runway and taking off. A few minutes later the intercom came on.\n\n\"Our flight back will only be about an hour and fifteen minutes. We got out of the area before all the late-night flights took off. We are flying directly back as fast as we can. We will level off in about 5 minutes. We should be landing about 10:15 local time.\"\n\nAbout five minutes later the seatbelt light went off. Linda got up and walked to the galley and came back with some wine.\n\n\"I would have gotten that,\" Rachel said.\n\n\"I needed to get up. Sherri, you and Sam can use the room behind that door in the back to change clothes,\" Linda said. \"I want to see what you have.\"\n\nDawn and I had sat in the seats facing the rear of the plane; we saw Sam and Sherri jump up and grab two bags and head to the back. Linda was standing sipping her wine.\n\n\"Who were you talking to on the phone?\" She asked Rachel.\n\n\"I called the airport and told them what time we were landing,\" Rachel replied.\n\n\"Why?\" Linda asked.\n\n\"Because I told one of the guys to meet us at the airport. All those packages are not going in your Diablo,\" Rachel said.\n\nLinda took a sip of her wine and turned and sat across from Dawn.\n\n\"I can't get over how you look, Dawn. Everyone was looking at you,\" Linda said.\n\n\"She does look hot like that,\" I said.\n\n\"Yes, she does. I like that look,\" Linda told her.\n\n\"I just like to dress this way sometimes,\" Dawn said.\n\n\"You should do it more often. You look very sexy,\" Linda said.\n\n\"Thanks.\"\n\nA few minutes later Sam walked between the seats in some of the lingerie I had seen. Sherri stood and told Linda the things she had told me while she stood there in some sexy lingerie. As she explained the differences, Linda felt Sam's lingerie and then ran her hand over Sherri's more expensive lingerie.\n\n\"I like the imported lingerie you have on,\" Linda said.\n\nSherri and Sam modeled some more lingerie and some bathing suits for Linda to look at. Linda talked to Sherri about all of them. When Sherri came out wearing the gorgeous monokini, Linda stopped to look.\n\n\"Wow, that is hot!\" Linda said.\n\nBrenda had walked up behind Sherri.\n\n\"These are pricey, but I think we can sell them,\" Sherri said.\n\n\"What kind of prices?\" Linda asked.\n\n\"The designer I am looking at makes these in some very sexy designs. His can be worn in the water, unlike some of the others. A suit like this runs around $900. They can go from $800 to $2,000,\" Sherri said.\n\n\"They could be a challenge to sell,\" Linda said.\n\n\"Possibly, but I am thinking about my sales ladies wearing them in the store.\"\n\n\"That will help!\" Linda said. \"I like that idea.\"\n\n\"She has plenty more,\" I said.\n\n\"I can't wait to hear them. Are you still planning on featuring the two brothers at the Grand Opening?\" Linda asked.\n\n\"I would like to.\"\n\n\"I like the idea. Once you and Brenda get a better idea of what all they have we will talk about the fashion show.\"\n\n\"Great.\"\n\nSherri and Sam walked away with Brenda.\n\n\"Sherri has some great idea. I don't have any worries about her,\" I said.\n\n\"What about Brenda?\" Linda asked.\n\n\"I think she will be fine. She likes some of the ideas Sherri has.\"\n\n\"Are you going to be taking the pictures they want to hang in the store?\"\n\n\"Are you going to let me take some of you?\" I asked Linda.\n\n\"Maybe,\" Linda said with a big smile.\n\n\"Dawn and I and the girls will be out of town Wednesday and Thursday. If Sherri and Brenda are not at your office, they will be at the house,\" I told Linda.\n\n\"Where are you all going?\"\n\n\"We are taking them home so Sam can get the rest of her things.\"\n\n\"I'll keep Sherri and Brenda busy.\"\n\nIt got quiet on the plane as we flew, everyone was tired. Dawn had nodded off, and Rachel was talking to Linda.\n\n\"Rachel! Why didn't you tell me!\" Linda shouted.\n\nI got up and sat in the seat across from Linda.\n\n\"Did you know?\" Linda asked me.\n\n\"Rachel told me earlier. Calm down; we are going to get this guy.\"\n\n\"But they don't know where he is!\"\n\n\"Linda, just let Rachel do her job. I'm going to take his picture to the Sherriff, and the Chief of Police and get it out. If he shows up, they will get him.\"\n\n\"Shit! I hate all the extra security. The house will be like a fortress.\"\n\n\"You and Rachel can come and stay with us if you want to.\"\n\n\"I'll still have to bring a few people,\" Rachel said.\n\n\"No, you won't. I think we can take care of things,\" I said.\n\n\"I'll think about it,\" Rachel said.\n\n\"Rachel, you make sure you are careful. I don't want anything happening to you,\" Linda said.\n\n\"I'll be fine, don't worry.\"\n\n\"Linda, if things get too crazy, you two come and stay with us.\"\n\n\"How will we know if he is back in town?\" Linda asked.\n\n\"I have people watching his house,\" Rachel said.\n\n\"What if he shows up?\" Linda asked.\n\n\"It will be taken care of,\" Rachel said. \"Just let me do my job.\"\n\n\"Fuck!\" Linda exclaimed.\n\nI sat and talked to Linda until we were preparing to land. After we landed and got off the plane, there were two security guys there. Rachel had one go and get the SUV and drive it to the plane so they could unload the packages. I made several trips along with the girls to the cars to load everything. Linda and Rachel were standing next to us near her Diablo.\n\n\"James, thank you for coming,\" Linda said and leaned into me and kissed me.\n\n\"No problem. Don't get worried about this; it will get taken care of,\" I said.\n\n\"I may take you up on your offer to stay with you.\"\n\n\"Your room is always ready. You may need to bring some more clothes.\"\n\n\"Okay, I'll see you tomorrow,\" Linda said then leaned over and kissed Dawn.\n\nLinda and Rachel got in her car and drove off with the SUV following them. We all got in our cars and headed to our house. We got to the house about 11:00.\n\n\"Leave everything in the cars,\" I told everyone, \"We will get it out in the morning.\"\n\nEveryone went in the house.\n\n\"Anyone want some wine before you go to bed,\" Dawn asked.\n\n\"I think I am going to bed,\" Brenda said.\n\n\"Me too,\" came from Sherri.\n\nThe two of them went down the hall. The four of us got a glass of wine and sat in the den.\n\n\"Did I hear you and Rachel talking about the guy that is stalking Linda?\" Dawn asked.\n\n\"Yes. He got away from her people in Miami. They don't know where he is yet.\"\n\n\"How did Linda take it?\"\n\n\"She is not happy because she hates all the extra security. I told her that they could come and stay here if it got crazy.\"\n\n\"I hope they catch the guy,\" Dawn said.\n\n\"There's not much the local police can do yet; he hasn't down anything here.\"\n\n\"I'm sure you will be talking to some people,\" Dawn said.",
        "\"I will tomorrow.\"\n\nWe finished our wine and went to bed. Sam and Amy went to their own rooms because they were tired. Dawn and I were getting undressed.\n\n\"Would you dress like that more often?\" I asked Dawn as she dropped her skirt.\n\n\"If you want me to.\"\n\n\"It reminds me of the night we got married.\"\n\n\"It does?\"\n\nDawn looked at me as she stripped down to nothing but the necklace and the earrings.\n\n\"That is what I remember,\" I said.\n\nI had my clothes off and got on the bed and laid back. Dawn crawled on the bed and straddled my stomach and sat.\n\n\"You like fucking your little Indian Princess?\" She asked with a big smile.\n\n\"Yes, I do.\"\n\nDawn reached back with both hands and got a handful of her hair in each one and brought it over each shoulder and let it fall over her breasts. I reached under her hair and played with her breasts while she reached back and stroked my cock until I was good and hard.\n\n\"I have got to take some pictures of you when you are like this,\" I said.\n\n\"You have some.\"\n\n\"I need some new ones.\"\n\nI played with Dawn's breasts for a while as she stroked my cock. She finally released my cock and moved back and pushed up on her knees and grabbed my cock. I felt her rub the end between her wet pussy lips; then she started sliding slowly down.\n\nWhen we spent our wedding night on the reservation Dawn had been dressed this way. I remembered her riding me just like she was now with all her long black hair pulled over her breasts while she still wore some ceremonial beaded jewelry. That had been a special night for us.\n\nI looked up at Dawn after she settled and watched her look at me as she wiggled her hips slowly. I had a breast in each hand and was rubbing as she worked.\n\n\"When are you going to take me on a trip again so we can have sex like that?\" I asked.\n\n\"Oh, I'll see.\"\n\n\"You look beautiful, honey.\"\n\n\"Thank you.\"\n\nI kept rubbing Dawn's breasts as she slowly worked her hips, then I felt it.\n\n\"I love you too,\" I told Dawn because I suddenly felt all of her love pouring into me as she worked her hips.\n\nWithin a few minutes, Dawn and I were pushing all of our love into each other. We were both happy and content.\n\n\"Oh, we didn't know how to do this on our wedding night,\" Dawn said.\n\n\"We didn't, but we both knew there was something special between us, we always did.\"\n\nDawn sat and worked her hips in a deliberate motion. It had been a while since the two of us had just been alone and felt each other. In many ways feeling all of Dawn's love flowing through me was more arousing than all of our sexual energy. \n\n\"Emmmmm. James, it needs to be just the two of us like this more often.\"\n\n\"I know. There's not a problem is there?\"\n\n\"No, I just sort of get to recharge like this.\"\n\n\"Well, you recharge all you want.\"\n\nDawn smiled at me and leaned over and kissed me for a minute. She sat back up and kept slowly working her hips as we felt the flow of energy from each other. I knew Dawn was doing something she didn't often do. I knew she was holding back and building to a huge orgasm. Dawn moaned softly as she worked her pussy on my cock for a long time.\n\n\"Ohhhhhhhhh...\"\n\nDawn closed her eyes and kept going. When she did this, it took all I had to not come inside of her because of all the love I felt for her. I could feel the arousal in her building slowly. Dawn kept moaning softly.\n\n\"Oh, James...\"\n\n\"Take your time.\"\n\nI took my hands off her breasts and placed them on her thighs. Dawn kept working her pussy on my cock.\n\n\"Ohhhhhh...\"\n\nI could feel the energy in Dawn as she held her orgasm back.\n\n\"Ohhhh...\"\n\nDawn was filling with more and more energy as she worked. Never speeding up or slowing down, she kept working her hips at the same speed as when she started.\n\n\"Ohhh...\"\n\nI could see the concentration on her face as she worked, getting everything she wanted and giving me everything I wanted.\n\n\"Ohh...\"\n\nDawn was ready to explode.\n\n\"Oh...oh...oh...\"\n\nI was struggling to hold back.\n\n\"Ohhhh!! Now!!\" Dawn screamed.\n\nI felt the explosion of energy come from Dawn. She sat on me shaking as a huge orgasm ran through her body.\n\n\"Ahhhhh!!\" We both screamed.\n\nI felt my muscles convulsing as I jerked and pumped cum into my wife. Dawn sat and shook then jerked then screamed again.\n\n\"Ahhhhhhh!!\"\n\nFor a minute, we both kept coming together. Dawn finally collapsed on top of me. We were both breathing very hard.\n\n\"Oh, that was perfect,\" Dawn said after a few minutes.\n\n\"Yes, it was. I hope Sam didn't feel that.\"\n\n\"She didn't. She is sound asleep.\"\n\nDawn sat back up eventually.\n\n\"I love you.\"\n\n\"I love you.\"\n\n*****\n\nWhen I woke up Sunday morning, it was about 6:00. Dawn had gone to sleep with her head on my chest.\n\n\"Are you awake?\" Dawn asked.\n\n\"Yes.\"\n\n\"I enjoyed last night,\" Dawn said and raised her head and kissed me.\n\n\"I did too.\"\n\n\"What are your plans this morning?\" Dawn asked.\n\n\"How about a repeat of last night?\"\n\n\"That sounds good, but I would like something else,\" Dawn said.\n\n\"What would that be?\"\n\nDawn sat up and pulled all her hair behind her.\n\n\"I want to watch you fuck Sherri before breakfast.\"\n\n\"Is that all?\"\n\n\"After breakfast, I want to watch you fuck Brenda.\"\n\n\"What are you going to be doing while I do that?\"\n\n\"I'm just want to watch, and I want you to fuck them very long and hard,\" Dawn said.\n\n\"Any reason?\"\n\n\"I just want to make sure that they get all they want. If they do, they will keep wanting more,\" Dawn said.\n\n\"Are you wanting this to be a regular thing with them?\"\n\n\"I have some plans,\" Dawn said and reached over and grabbed my cock.\n\n\"And what would those be?\"\n\n\"Let's see how this works out first. I'll be back,\" Dawn said and got up and left the bedroom.\n\nI got up and went and rinsed off last night's sex and returned to the bed. A few minutes later I heard Dawn coming up the stairs; then she walked into the bedroom leading Sherri.\n\n\"I just thought you would like to join us this morning,\" Dawn said to Sherri as she sat on the bed.\n\n\"I like the sound of that,\" Sherri said and sat next to Dawn.\n\n\"Does your roommate work every night?\" Dawn asked.\n\n\"She is off Monday and Tuesday night.\"\n\n\"The first chance you two have, why don't you both stay one of those nights,\" Dawn said.\n\n\"I think she would like that.\"\n\nDawn leaned over and kissed Sherri for a minute. While she was kissing her, Sherri placed her hand on the back of Dawn's head and held her as they kissed.\n\n\"I think I am going to like working for you two,\" Sherri said when they parted.\n\n\"Don't forget Amy and Sam.\"\n\n\"Oh, I won't.\"\n\nThe two of them kissed again for a minute.\n\n\"Get on the bed next to James,\" Dawn told her.\n\nSherri crawled up on the bed and lay next to me. Dawn moved closer and began kissing Sherri's stomach then worked her way up until she was lying on Sherri kissing her lips. I rolled on my side and watched the two of them for a while. Dawn finally removed her mouth from Sherri's and moved down and sucked on one of her nipples for a while as I watched. Soon Dawn sat up and grabbed two pillows and had Sherri lift her ass up. She slipped the pillows under Sherri's ass then kissed her way down and got between her legs and began kissing Sherri's pussy.\n\n\"Emmmm,\" came from Sherri as Dawn licked and kissed.\n\nI watched Dawn eat Sherri until she was moaning loudly. Dawn would slowly lick her then kiss all over her pussy and mound.\n\n\"Oh, Dawn. Yes.\"\n\nSherri placed her hands on her breasts and began to rub them as Dawn kept going. Sherri was squeezing her breasts as Dawn worked on her pussy.\n\n\"Ohh, god, yes!\"\n\nSherri kept moaning as Dawn pushed her to an orgasm.\n\n\"Oh, fuck!! Yes!! Yes!! Yes!!\" Sherri screamed.\n\nShe began to hump her pussy up into Dawn's mouth as she screamed.\n\n\"Oh, fuck!! I'm coming!!\"\n\nSherri began to jerk then I heard her pussy gush.\n\n\"Ahhhhhhh!!\"\n\nSherri was jerking on the bed as an orgasm shot through her body.\n\n\"Ahhhhhhhh!!\"\n\nSherri jerked hard again then reached for Dawn's head.\n\n\"No, more!\"\n\nDawn lifted her head and looked at Sherri while she rubbed her stomach.\n\n\"Ohhhhh, that was great,\" Sherri moaned.\n\nDawn rubbed Sherri's stomach for a few minutes while she caught her breath.\n\n\"Dawn, up here so James can watch,\" Sherri said.\n\nDawn moved from between Sherri's legs and turned around and straddled Sherri's mouth. I watched closely as Sherri licked Dawn's dripping pussy. After a few minutes, Sherri pulled Dawn down onto her mouth.\n\n\"Emmmm,\" came from Dawn as she settled on Sherri's mouth.\n\nI rolled to them and sucked one of Sherri's nipples into my mouth as Dawn squeezed her other one. I listened to Dawn moan for a few minutes the moved and got between Sherri's spread legs. I grabbed my cock and pressed the tip up to Sherri's wet pussy.\n\n\"Emmmm!\" Came from Sherri.\n\nDawn was looking at me as I slowly pushed my cock into Sherri.\n\n\"Emmmmmmm!!\"\n\nI grabbed Sherri's hips and held them as I slowly eased into her as she moaned.\n\n\"Just like that,\" Dawn said to me.\n\nI kept pushing until I was all the way in.\n\n\"Nice and slow,\" Dawn told me as she watched.\n\nI began to slowly slide my cock in and out of Sherri as she moaned from under Dawn. I watched Dawn grab Sherri's nipples and began to pinch and twist them while she watched.\n\n\"Ahhh, yes. Eat me, Sherri.\"\n\nI watched Dawn as she watched my cock slide in and out of Sherri's snug pussy. Sherri kept moaning as she worked on Dawn. I kept going for a while as Sherri moaned.\n\n\"Oh, yes,\" came from Dawn.\n\nDawn leaned forward and placed a hand on each side of Sherri's pussy so she could feel my slick cock sliding in and out of her. I could tell Dawn was working her pussy into Sherri's mouth as she leaned forward.\n\n\"Oh, yes, Sherri!\" Dawn exclaimed.\n\nI kept working my cock in and out of Sherri as Dawn let it slide between her fingers. Dawn began moaning after a few more minutes. I watched my wife take one hand and spread Sherri's pussy lips apart then take the fingers on her other hand and began to rub Sherri's clit.\n\n\"Emmmmmmm!!\" Came from under Dawn. \"Emmmmmm!!\"\n\nDawn's fingers sped up, and Sherri kept moaning loudly as I watched and worked my cock for a few minutes.\n\n\"Ahhhhhh!!\" Dawn screamed then start jerking as she came in Sherri's mouth.\n\n\"Emmmmm!!\" Came from Sherri as she began to thrust her hips up.\n\n\"Ohh, yes!!\" Dawn screamed and jerked again.\n\nDawn sat up and worked her pussy into Sherri's mouth as she watched her thrust her hips up.\n\n\"Emm!!\"\n\n\"Ahhhhh!!\" Came from Dawn and she pushed herself up and then jerked and squirted all over Sherri's tits.\n\n\"Ohhh, fuck!! Yes!!\" Sherri screamed then gushed.\n\nI pushed my cock in all the way and held it.\n\nDawn moved and laid next to Sherri and placed her mouth over hers as they kissed for a minute.\n\n\"Oh, that was good,\" Dawn said to Sherri.\n\n\"Yes, it was! That is a first for me,\" Sherri said.\n\n\"What was a first?\" Dawn asked.\n\n\"Having a huge orgasm while I was eating pussy.\"\n\n\"Oh. That happens all the time here,\" Dawn said then the two of them started laughing.\n\n\"Dawn, I may have to move in with all of you.\"\n\n\"You are welcome to stay anytime,\" Dawn told her. \"When you bring your roommate, I want to watch with her on the bottom and you on top while James does her.\"\n\n\"You like watching your husband fuck other women, don't you?\"\n\n\"Yes, I do. Can I watch him finish you?\" Dawn asked.\n\n\"Of course.\"\n\nDawn sat up and leaned against the headboard so she could watch. I grabbed Sherri's thighs and began to work my cock in and out of her again.\n\n\"Oh, I love your big cock, James.\"\n\n\"Does he fit nice and tight?\" Dawn asked.\n\n\"Ohhh, yes.\"\n\n\"He is nice and big. Have you had anything else that big, Sherri?\" Dawn asked.\n\n\"Oh, no. My roommate's boss has a nice cock, but not like this.\"\n\n\"Do you two do him often?\"\n\n\"About once a month.\"\n\nI sped up and shoved my cock in a little harder.\n\n\"Ahhh! Oh, yes!\"\n\nI held Sherri tightly and began to thrust into her faster and harder.\n\n\"Oh, my, god!! Yes!!\"\n\nI worked my cock in Sherri for a long time. I watched Dawn spread her legs and slide her hand down and slip several fingers into her own pussy. Sherri kept moaning as I worked my cock into her.\n\n\"Oh, fuck!! Yes!! Harder!!\"\n\nI reached under Sherri's knees and lifted her legs up and held them as I drove my cock into her harder.\n\n\"Ahhhhh!! Yes!! Oh, yes!!\"\n\nI was holding Sherri's legs up and apart as a thrust into her. She kept screaming as I kept going. A few minutes later Sam walked in and sat on the bed and watched.\n\n\"Ohhhh!! I'm coming!!\" Sherri screamed.\n\nI kept driving my cock into her as she gushed over and over as she screamed.\n\n\"Ahhhh!!\" I heard come from Dawn. I looked at her, and she was coming.\n\n\"Ahhhhhhhhhh!!\" Sherri let out in one long scream as I kept thrusting into her.\n\n\"Harder!\" Dawn exclaimed.\n\nI pushed Sherri's knees up to her breasts and held them there as I began to drive my cock into her.\n\n\"Yes!\" Dawn exclaimed as she watched.\n\nI watched Sam turn and lay on the bed between Dawn's legs and place her mouth over Dawn's pussy.\n\n\"Oh, yes!!\" Came from Dawn.\n\nI leaned into Sherri and pressed her legs down and kept driving my cock into her.\n\n\"Ahhhhhhhh!!\" Sherri screamed, and a huge orgasm began to make her jerk. \"I'm coming!!\"\n\nI jammed my cock in as hard as I could and began to shoot cum deep into Sherri as she screamed and jerked.\n\n\"Oh, fuck!!\" \n\nShe was jerking, and I was jerking into her as I filled her full of cum. Once we were both finished, I let her legs down and held them as she moaned.\n\n\"Oh, wow. That was incredible,\" Sherri said.\n\nI let her legs fall back to the bed as I held my cock inside her and rubbed her thighs.\n\n\"Emmmmm!\" Came from Dawn as Sam worked her pussy.\n\n\"James, my roommate is going to love you.\"\n\n\"I am looking forward to meeting her. What is she like?\"\n\n\"Tall, blonde, and sexy.\"\n\nI kept rubbing Sherri's thighs as she turned her head to watch Sam and Dawn.\n\n\"Oh, Sam!!\" Dawn screamed then started coming. \"Ahhhhhh!!\"\n\nAfter Dawn came, she pulled Sam up and kissed her.\n\n\"What did we miss?\" I heard Amy say.\n\nShe and Brenda walked into our bedroom.\n\n\"Join us,\" Dawn said.\n\nI slid my still hard cock out of Sherri and sat on the bed. Amy sat next to me as we watched Brenda move between Sherri's legs. She ran her fingers through the cum running out of her and stuck them in her mouth.\n\n\"Very good,\" Brenda said after she pulled her fingers out.\n\nBrenda moved and placed her mouth over Sherri's pussy.\n\n\"Oh, no,\" came from Sherri.\n\nWe all sat and watched for about 15 minutes as Brenda cleaned all of my cum out of Sherri and drove her to another orgasm.\n\n\"Brenda, stop! I'm done,\" Sherri said.\n\n\"Is that what you all do every morning before breakfast?\" Brenda asked,\n\n\"Sometimes,\" Sam said as she got up.\n\n\"Sherri, come with me, and we will get cleaned up,\" Dawn said.\n\nThey left, and Brenda, Amy, and I were still on the bed.\n\n\"Amy and I had a good time this morning, but I think you owe me, James,\" Brenda said.\n\n\"After breakfast,\" I told her.\n\nThe three of us got up and headed downstairs.\n\n*****\n\nWe were sitting at the table finishing our coffee when Dawn and Brenda came down.\n\n\"Brenda, I got to watch James fuck Sherri this morning. I want to watch him fuck you now,\" Dawn said.\n\n\"That sounds good,\" Brenda said.\n\n\"Come with me then,\" Dawn said as she stood and took Brenda's hand.\n\nShe led her to the big bedroom off the den.\n\n\"Sherri, you can join my sister and me upstairs,\" Amy said.\n\n\"Ohh, I'm done for the day,\" Sherri said. \"But, I would like to watch you two if that is okay?\"\n\n\"Okay. Let's go up to my room,\" Amy said.\n\nThe three of them got up and headed up the stairs. I got up and went to see what Dawn and Brenda were up to. When I went into the bedroom, I saw Dawn between Brenda's legs. I sat on the bed next to them and watched until Brenda had an orgasm.\n\n\"Ahhhh!! Oh, yes!\"\n\nDawn took her mouth off of her pussy and moved up and kissed Brenda for a minute.\n\n\"I want to watch now,\" Dawn said.\n\nDawn moved off of Brenda, and Brenda moved to me and leaned over and started sucking my cock. I lay back and watched Brenda for a while as she sucked and deep throated me.\n\n\"Brenda, ride his cock,\" Dawn said.\n\nBrenda slid her mouth off of my cock and moved and straddled me. She grabbed my cock and started it into her pussy.\n\n\"Oh, this will take some getting used to,\" Brenda said as she began to ease herself down.\n\nDawn and I watched as Brenda worked her pussy up and down for a few minutes until she was sitting on me with all of her weight. Brenda had a nice looking body that made me horny.\n\n\"Emmmmm. Dawn, thanks for sharing,\" Brenda said as she worked her hips.\n\n\"No problem.\"\n\nBrenda began to slowly work her pussy on my cock.\n\n\"I think we will need to have a business meeting about once a month here, don't you think so, James?\" Dawn said.\n\n\"At least once a month until things get going,\" I said.\n\n\"That sounds like a good idea,\" Brenda said.\n\nBrenda seemed to be ready to take her time this time. Dawn and I watched her work her hips and pussy for a long time.\n\n\"Oh, my. This is so good,\" Brenda said. \"I like being able to ride a nice cock like this for a long time.\"\n\n\"Brenda, you will find out that James can fuck you as long as you want.\"\n\n\"Oh, my.\"\n\nBrenda kept working her pussy until she came in a gush of juices.\n\n\"Ahhhh!! Yes! Oh, yes!\"\n\n\"Fuck him, Brenda,\" Dawn said.\n\nBrenda began to work her pussy harder. Dawn sat up and straddled my head and lowered her pussy down to my mouth. Dawn was dripping; she seemed to be getting off on watching lately.\n\nI worked on Dawn as she ground her pussy into my mouth and listened to the two of them moaning. Dawn came the first time as Brenda was thrusting her pussy on my cock hard.\n\n\"Ohh, fuck!!\" I heard Brenda scream.\n\n\"Oh, god, yes!!\" Dawn got out as she gushed in my mouth.\n\nThe two of them kept going. I could feel Brenda now working her pussy up and down on my cock hard and fast as Dawn encouraged her. They two of them kept this up for a while until Brenda started screaming she was going to come.\n\n\"Harder, Brenda!!\" I heard Dawn yell.\n\nBrenda was screaming as she slammed her pussy down onto my cock repeatedly.\n\n\"Ahhhhhh!! I'm coming again!!\" Brenda screamed.\n\n\"Now, James!!\" Dawn shouted.\n\nI shoved my cock up into Brenda as she jammed her pussy all the way down. I could feel her muscles contracting over and over around my cock.\n\n\"Ahhhhhhhhhh!!\"\n\nI started pumping cum into Brenda as she screamed.\n\n\"Oh, fuck!! Yes!!\"\n\nShe was jerking on my cock as I kept shooting cum into her.\n\n\"Ohhhhh!!\" I heard come from Dawn and she came again in a huge gush on my mouth.\n\nAfter a few minutes, we were all through coming. Dawn moved and collapsed next to me. I looked at Brenda, and she was sitting on my cock trying to catch her breath.\n\n\"Oh...that was wonderful,\" Brenda said.\n\nBrenda pushed up and off of my cock and lay next to me.\n\n\"Dawn, you are so lucky,\" Brenda said.\n\n\"I know.\"\n\nDawn and Brenda laughed. After a couple of minutes, Dawn sat up and grabbed my partially hard cock.\n\n\"Brenda, he is yours anytime you want him,\" Dawn said.\n\n\"That sounds nice, but I will have to get some work done,\" Brenda said, and the two of them laughed again.\n\n\"You all can take a break during the day,\" Dawn said smiling.\n\nDawn moved down and leaned over and sucked my cock into her mouth. She took her time and slowly got me hard again.\n\n\"Brenda join me,\" Dawn said.\n\nI lay and watched the two for a long time. Dawn and Brenda were swapping up sucking and deep throating me as they laughed and had some fun.\n\n\"I'll have to get some pictures of you fucking James,\" Dawn said as Brenda sucked.",
        "\"Just make me some copies,\" Brenda said when she slid her mouth off.\n\nThe two of them kept playing until Dawn got serious and drove me to the point I was about to come.\n\n\"Finish him,\" Dawn said.\n\nBrenda slid her mouth over my cock and sucked on it as Dawn pumped. I lasted a few more minutes then filled Brenda's mouth full of cum.\n\n\"Emmm!\" Came from Brenda as she sucked and Dawn stroked.\n\nBrenda slid her mouth off my cock and sat up. Dawn watched as she swallowed all of my cum.\n\n\"Emm, that was nice,\" Brenda said. \"I better get cleaned up, I need to be heading home.\"\n\n\"No rush,\" Dawn said.\n\n\"I have some things I have to do today,\" Brenda said as she got off the bed and walked to her bedroom.\n\n\"Is that what you wanted to see?\" I asked Dawn. She smiled at me.\n\n\"Yes. Come with me; we need to clean up the kitchen.\"\n\nI followed Dawn, and we went to the kitchen. About 15 minutes later, Brenda came out.\n\n\"I had a great weekend,\" she said.\n\n\"We did too. We will have to do this again,\" Dawn said.\n\n\"I guess I better get my things out of your SUV and go.\"\n\nDawn and I walked out to the SUV and helped Brenda find all of her packages and put them in her car. Before she left, she told us that she and Sherri would be working at Linda's office Monday and Tuesday.\n\nWhen Dawn I went back into the house we saw Sherri and the girls in the den; they were all still naked.\n\n\"Sherri, don't forget the things you got when you leave,\" Dawn told her.\n\n\"I may never leave!\" Sherri said, and the girls giggled.\n\nDawn and I went and sat with them.\n\n\"Brenda said you two were working at Linda's Monday and Tuesday.\"\n\n\"Yes, she wants to go over some ideas and wants us to work with the architects about what types of fixtures we want in the store,\" Sherri said.\n\n\"Good, it sounds like they are ready to get going,\" I said.\n\n\"They are. They said if we like the designs they have there shouldn't be any problems with opening in time.\"\n\n\"Make sure when you are looking over the floor plans they have a place for your offices.\"\n\n\"They have all that laid out. From what I have seen I think the store is going to look great.\"\n\n\"Good. Once they start making progress on the build out, you two will need to make sure everything is going as you planned. Do you two think you will be finished traveling by the end of December?\"\n\n\"Oh, yes. We will need to have everything ordered well before then.\"\n\n\"Good.\"\n\n\"James, Linda mentioned you were thinking about adding men's clothes,\" Sherri said.\n\n\"I'm thinking about it. While we were in New York, I met a guy in Saks that would like to partner with us and move here.\"\n\n\"I think that is a good idea,\" Sherri said.\n\n\"Linda is not sure what she will end up putting on the top floor, so we discussed using one of the large stores next door.\"\n\nWe talked a while then we all got up and unloaded the rest of the things from the SUV. Sherri loaded her things into her car then came in and got dressed.\n\n\"I guess I will be back here Wednesday,\" Sherri said as she gathered up her things.\n\n\"Okay, We can work on your travel plans when we get back,\" I said.\n\n\"I had a good time,\" Sherri said.\n\n\"We will do this again,\" Amy said.\n\n*****\n\nAfter Sherri left, we all went to get cleaned up and put some clothes on. Dawn was sitting on the bed pulling on some shorts.\n\n\"I think you enjoyed yourself,\" I said.\n\n\"I did. I'm sure you did too,\" Dawn said smiling at me.\n\nWe were all tired from the trip and all the activities. We laid around the house until dinner time. We were all sitting at the table eating.\n\n\"I have something early for your birthday,\" Dawn said.\n\n\"We said no presents,\" Sam replied.\n\n\"It's not. I just made arrangements for you two to observe a few surgeries John is doing this week.\"\n\n\"Oh! Okay!\" Sam exclaimed.\n\n\"You two have to get yourselves up in the morning and be at the hospital by 7:00.\"\n\n\"We will!\" Sam said.\n\nBy 9:00 Amy and Sam had gone to bed. Dawn and I sat downstairs and talked for a while before going to bed.\n\n*****\n\nWhen the alarm went off early Monday morning, Dawn got up and went to make sure the girls were up and getting ready to leave for the hospital. She came back to the bedroom about 6:00.\n\n\"Are they gone?\" I asked.\n\n\"Yes. John will keep them busy all day. What are you getting them for their birthday?\"\n\n\"Well, Sam needs transportation,\" I said.\n\n\"Oh, I forgot about that.\"\n\n\"I thought a couple of new cars would be nice.\"\n\n\"Get them something sporty!\" Dawn said.\n\n\"I was thinking about a couple of Mustangs. That would also get rid of Amy's car payment,\" I said.\"\n\n\"I like the idea. Let's go car shopping.\"\n\n\"I have to meet Sam this morning at the store and let him look around, then meet with Linda.\"\n\n\"What time will you be back?\" Dawn asked.\n\n\"By 2:00.\"\n\n\"I'll be cleaning the house. Get back as soon as you can.\"\n\n\"Lori Walker is supposed to meet me at Linda's office about 10:30,\" I said.\n\n\"Is she going to be able to run things for you?\" Dawn asked.\n\n\"I think she will be okay once things get started.\"\n\n\"When are you two going to check out the limos?\"\n\n\"As soon as we can. We are going to discuss that today because she has been making some calls for me.\"\n\n\"Good, I don't want you spreading yourself too thin.\"\n\nWe got up and went and showered. I went down to start breakfast while Dawn got dressed. It was a little after 7:00 when we finished in the kitchen. I went to my study and called Olivia.\n\n\"Hey, Olivia. Has Sam left yet?\"\n\n\"Not yet.\"\n\n\"I need to talk to him.\"\n\n\"Okay.\"\n\nSam came to the phone.\n\n\"What's up?\" He asked.\n\n\"After we leave the store, can you go with me to Linda's office? The architects are going to be there, and I thought you could get a set of blueprints.\"\n\n\"Sure, that will help.\"\n\n\"I am meeting with the lady at lunch while I am at Linda's office that I hope can run the limo business.\"\n\n\"Okay, How was your weekend in New York?\" Sam asked.\n\n\"Long and expensive.\"\n\n\"Did Dawn do some shopping?\"\n\n\"Yes.\"\n\n\"Ouch.\"\n\n\"Make sure you bring your camera,\" I said.\n\n\"Okay. I will see you there at 8:00.\"\n\n\"Okay.\"\n\nAbout 7:30 I was heading down the drive in the SUV when my cell rang. I looked at my phone, and it said Attorney General.\n\n\"Crap!\" I said as soon as I saw it because I had forgotten about my re-qualification last week. I stopped to talk.\n\n\"Hello?\"\n\n\"Dr. Smith?\"\n\n\"Yes.\"\n\n\"Hold for the Attorney General.\"\n\n\"Dr. Smith?\"\n\n\"Hey, Fred.\"\n\n\"I just got the paperwork from last week's re-qualifications, and yours is not there.\"\n\n\"Something came up, sorry.\"\n\n\"You are more than late. If you don't go tomorrow, I will have to take your credentials to carry.\"\n\n\"Okay. I'll be there if it can't wait.\"\n\n\"It can't. You will be there with the city police officers tomorrow.\"\n\n\"That should be fun.\"\n\n\"James, make sure you are there at 9:00. If you don't show up tomorrow, I will be sending someone to your house to collect your credentials.\"\n\n\"I'll be there Fred.\"\n\n\"You better be. When can you do another seminar?\"\n\n\"How about three weeks?\"\n\n\"Good, that will give me time to schedule it,\" Fred said.\n\n\"I'll see you after I re-qualify.\"\n\n\"You better.\"\n\nI hung up and was rearranging my schedule in my head. I would be at the range until 2:00 tomorrow; then I had to pick up a van for Wednesday.\n\n\"Crap!\"\n\nI left and drove to the store and met Sam and we went in. We walked through the store as he took pictures.\n\n\"I will need a set of blueprints,\" Sam said.\n\n\"I'm sure we can get them.\"\n\n\"Do you want a lot of cameras?\"\n\n\"I think we need them. I want the store covered so plan on whatever we need for that.\"\n\n\"Okay. I will make sure they run enough wire for everything. How is the limo business coming? I still have some money to invest,\" Sam said.\n\n\"If you have $500,000 you want to invest in something, I may have something else that will pay off faster than the limo business.\"\n\nI spent some time running the ideaof a men's clothing store by Sam. After talking a while, he liked the idea.\n\n\"I think if this guy in New York is ready to invest $500,000 and he thinks it is a good idea we may have a good thing,\" Sam said.\n\n\"I do too.\"\n\n\"Is Linda going to invest in the men's store?\"\n\n\"I haven't asked her that yet. I thought if you have $500,000 and the guy in New York has $500,000, I could add $500,000 and we get another line of credit at the bank, and we could split it three ways.\"\n\n\"That sounds good. Have you talked to the guy in New York yet?\" Sam asked.\n\n\"I wanted to run it by you first. If it sounds like a good idea, I think we can use the other big store next door.\"\n\n\"What is going in the other one?\"\n\n\"I big fur shop. I'll make sure they contact you about their needs.\"\n\nSam and I explored the building some more while we talked. When we left, it was a little after 10:00; Sam followed me in his car. It was 10:30 when we got to Linda's building. We parked in the garage and rode the elevator up to Linda's floor.\n\n\"Lori should be here,\" I said as we got off the elevator.\n\nWe walked down the hall to Linda's receptionist outside her office.\n\n\"Hello, Dr. Smith.\"\n\n\"Hi. Has Lori Walker arrived?\"\n\n\"She is in the waiting room. Go on in.\"\n\n\"Where are the architects?\"\n\n\"Next door in the conference room.\"\n\nSam and I went through the doors to the outer waiting room of Linda's office.\n\n\"Hey, Lori,\" I said when I saw her sitting on a sofa.\n\n\"I was starting to worry you had forgotten.\"\n\n\"We have been at the store. This is Sam. His company will be outfitting the limos with the camera equipment.\"\n\n\"Hi, Sam.\"\n\n\"Hi.\"\n\n\"Lori, I need to take Sam next door, I will be right back.\"\n\nI took Sam back out and next door. Sherri and Brenda were with two guys and a lady.\n\n\"Hey, you two,\" I said.\n\n\"You must be James,\" one of the guys said and walked to me and shook my hand.\n\n\"Hi. This is Sam. He will be installing all of the security systems in the store and other things. We just came from the store. I was hoping you had an extra set of blueprints he could have.\"\n\n\"Sure.\"\n\n\"I'll leave him with you. I have a meeting with Linda.\"\n\nI went back to Lori and sat next to her. She was nicely dressed and looked very professional.\n\n\"Are you ready?\" I asked.\n\n\"Nervous.\"\n\n\"Don't be. Linda is very nice and will like to see what you have.\"\n\nThe door to Linda's office opened, and Patricia came out.\n\n\"Hey, James. Linda is ready for you.\"\n\n\"Thanks, Patricia.\"\n\nPatricia left the waiting room, and I took Lori into Linda's office.\n\n\"You must be Lori Walker,\" Linda said as she stood and walked around her desk and shook hands with Lori.\n\n\"Yes, ma'am.\"\n\n\"Have a seat.\"\n\nLinda showed Lori to the sofa and had her sit, and she sat next to her. I sat on Lori's other side.\n\n\"James says you have a very interesting business plan,\" Linda said.\n\n\"I do. It is for my final project for my MBA.\"\n\n\"Explain it to me.\"\n\nLori went over her business plan and explained everything to Linda for about an hour.\n\n\"Lori, I'm very impressed with your work and your ideas,\" Linda told her.\n\n\"Thank you, Ms. Williams.\"\n\n\"I think if you stick with your business plan and get some good advice on operations you will do fine.\"\n\n\"I think she is going to do a great job,\" I said.\n\n\"James, make sure you introduce her to Ian Dain, and the two of you use him,\" Linda said. \"He is pretty smart about starting up a business.\"\n\n\"I'll take her to the bank and let her explain the business plan to him.\"\n\n\"Good idea.\"\n\n\"Ms. Williams, it would mean a lot to me if you would sign off on my business plan. I am supposed to have other people look at it and write a short letter endorsing it if they like it,\" Lori said.\n\n\"I would be happy to do that. I think you have some very good ideas, especially the ones about franchising the business.\"\n\n\"Great! Thank you!\"\n\n\"Before we go, I wanted to run something by you, Linda,\" I said. \"Have you had any thoughts about carrying high-end men's clothes.\"\n\n\"I don't think we would have room unless we put them on the third floor. Have you been thinking about that?\"\n\n\"I hadn't, but I ran into a salesman at Saks that brought it up. He has relatives in this area and thought if we were going to build a high-end lady's store we should consider carrying nice men's clothes. He thinks they would do well in this area if the other store becomes a regional attraction.\"\n\n\"I don't know a thing about men's clothes, James.\"\n\n\"He does. He managed to sell me $12,000 in clothes. I talked to him a bit about the idea and what kind of store and inventory would be needed to carry designer men's clothes like Armani. He has been at Saks for 15 years and seems to know what he was talking about.\"\n\n\"What did he have to say?\"\n\n\"He said for this area, a 6,000 square foot store would work along with about $600,000 in inventory.\"\n\n\"The third floor is a lot bigger than that.\"\n\n\"One of the stores next door isn't.\"\n\n\"The fur store is going in one. We could give some thought to it.\"\n\n\"If we do, the guy I met was interested in running it because he and his wife have relatives in the area.\"\n\n\"It would be about another million to start up,\" Linda said.\n\n\"That is what I estimated. What got me interested in this guy was that he said he could come up with a half a million to invest.\"\n\n\"That makes a difference. If he is willing to invest that kind of money, he may know what he is talking about. Would you want to put up the rest, James?\"\n\n\"I could put it up, but Sam and Olivia have asked me about investing about $500,000 in the limo business. I don't want to dilute the other drivers share much more, so I was thinking about him, and me putting up another million and spliting the ownership three ways if the guy in New York would be interested.\"\n\n\"That might be a good idea. Let me run it by the people that did the market research for me,\" Linda said.\n\n\"Okay. I have his cell number. If your people think this would be a good idea we could bring him here and let him look and we could discuss things.\"\n\n\"That might be a good use for the other large store, or possibly putting it on the third floor. That would leave about 4,000 square feet on it for tailoring and alterations. James, let me look into this,\" Linda said. \"If we have the men here spending big money on their ladies, maybe we can get them to spend money on themselves.\"\n\n\"I did in New York.\"\n\nLinda and I talked for a few more minutes. We left Linda's office and walked out to the waiting room.\n\n\"See, I told you she was a nice lady.\"\n\n\"I can't believe I got her to help with my final project! My advisor will be so impressed!\"\n\n\"I want to take you to the bank as soon as I can to drop off your business plan and meet someone that is going to be a business advisor for us. Let me go and see how Sam is doing, and I will be right back.\"\n\nI went to the conference room and found Sam looking over blueprints with the architects.\n\n\"How are things going?\" I asked Sherri.\n\n\"Great. We like the ideas they already have.\"\n\n\"Good, maybe they can get things moving.\"\n\n\"Brenda and I are working on some ideas to divide our areas of the floor. They are going to draw up some new blueprints and meet with us Thursday.\"\n\n\"Okay. Something has come up, and I will not be at the house tomorrow until after 5:00.\"\n\n\"We will be here tomorrow,\" Sherri said.\n\n\"Are you two going to be at the house Wednesday?\"\n\n\"I think we can get a lot done if we are.\"\n\n\"Okay. We will be back Thursday afternoon. Send me some email and let me know how things go here.\"\n\n\"Okay.\"\n\nI left them and went back to Lori.\n\n\"I think we are through for the day. As soon as I can, I will take you to the bank to present your business plan to a man there so we can get the line of credit.\"\n\n\"Okay. Let me know when,\" Lori said. \"I am working with two companies for us to visit.\"\n\n\"Good, firm that up and see if you can arrange visits on the weekends.\"\n\nWe left, and I hurried back to the house. When I got there, Dawn was sitting on the sofa naked reading.\n\n\"How did your meeting og?\" She asked.\n\n\"Good..\"\n\n\"Eat so we can go car shopping,\" Dawn said.\n\n\"I need to change clothes. You need to put some clothes on.\"\n\nI headed up the stairs and Dawn followed. I took off my clothes and went the bathroom to wash up. When I came back out Dawn was digging through one of the drawers. I went and grabbed some underwear and decided to wear some shorts since it was so hot. I was slipping on my shorts when I saw Dawn pull out an old pair of skimpy shorts. She sat on the bed and pulled the tiny blue jean shorts on.\n\n\"You are wearing those?\" I asked as she stood and pulled them up and snapped them.\n\n\"Why not? It's hot.\"\n\nI looked at her ass hanging out of the back of the shorts. They were an old pair of very short blue jean shorts Dawn used to wear around the house because they exposed everything.\n\n\"I don't think you have ever worn those out in public.\"\n\n\"Do you not want me to wear them?\" Dawn said as she walked and stood in front of me smiling.\n\nI slid my hand up her leg and slipped my fingers inside what there was of the front and rubbed her pussy lips.\n\n\"You know I like it when you show off, I am just curious how you are going to keep from flashing everyone since you are not wearing underwear.\"\n\n\"Who says I'm not going to flash everyone,\" Dawn replied with a smile.\n\nI went back to get a shirt, and when I came out, Dawn was trying to tie very thin white halter top behind her neck.\n\n\"You really are going to flash everyone,\" I said.\n\nDawn finished and looked at me.\n\n\"I don't think you have a problem with that, do you honey?\"\n\n\"You know I don't.\"\n\n\"Let make you a sandwich,\" Dawn said and headed out of the bedroom as I admired her ass cheeks and legs.\n\nI sat down at the bar with Dawn and ate my sandwich and told her about my meeting with Lori and Linda. I finished and looked at Dawn sitting there in her skimpy blue jean shorts with her legs spread so I could clearly see her pussy. Her new tits were straining to escape from the thin white halter.\n\n\"Are you going to expose yourself to everyone?\" I asked.\n\n\"Anyone that wants to look.\"\n\n\"Come on sexy.\"\n\nWe got up and headed to town in my Vette with the top down.\n\n\"What kind of cars are you thinking about for them?\" Dawn asked when we got off the interstate.\n\n\"I have some ideas; we will see what the dealer has.\"\n\n\"They haven't asked for anything, this should be a nice surprise for them,\" Dawn said.\n\n\"Are you doing anything for them?\" I asked.\n\n\"I have set up some more surgeries with Dr. John for them to watch.\"\n\n\"They will like that.\"\n\nWe drove to the biggest Ford dealer in the city, when we got there, I drove around the lot looking at cars and looking for a hungry salesman. I found a long row of the newest Mustangs, and I drove to the far end to park, and we got out. I knew only the hungriest salesman would walk that far in the August heat. We looked for a while; I didn't think anyone was going to come and see us. It was late August, and it was about 98 degrees. I had on some shorts, and a T-shirt and Dawn had on her skimpy outfit that I could see her nipples through as she started to sweat. \n\nI finally heard someone say \"Hello.\" \n\nI turned to see a very young guy, I guess he was just starting, and his boss had made him walk all the way down to where we were. He perked up some when he walked by my Vette.\n\n\"Hi, my name is Steven, can I help you?\"\n\nNot Steve, Steven, he was young.\n\n\"Well, I am thinking about getting a Mustang,\" I told him.\n\n\"For your pretty wife,\" he said looking Dawn over slowly.\n\nHe was just learning but trying. I wanted to laugh.\n\n\"Actually, for a friend.\"\n\n\"Oh.\" He sounded dejected now.\n\n\"What do you have in a sporty convertible?\"\n\n\"Let's look at this one down here.\"\n\nHe walked us down the row of cars to one we had already looked at, it was a blue GT convertible and was a very nice looking car, but I wanted to have some fun.",
        "\"This is next year's Sport GT; it is a top of the line sports model.\"\n\n\"Do you have the keys for it?\" I asked.\n\n\"No, I would have to go get them.\"\n\n\"Would you please, my pretty wife wants to see it with the top down.\"\n\n\"Okay, be right back.\"\n\nI knew if this kid were new he wouldn't have any keys. He jogged off as best he could in the heat.\n\n\"Why did you do that?\" Dawn said.\n\n\"Having fun. What I want is in the showroom, I saw it when we drove in. But I want the hungriest salesman on the lot to make this sale. When he gets back take it for a test drive with him and put the car through its paces. When you get back, I'll have some more fun.\"\n\n\"You are terrible,\"Dawn said.\n\n\"Me?\"\n\nA few minutes later the young guy came walking back up sweating badly. He unlocked the door and climbed into the hot car and put the top down. It was a nice looking car with a V8 and a stick.\n\n\"Is the stick shift okay?\" Dawn said as she looked in the car.\n\n\"It better be, I'm not buying a sporty car like this with an automatic.\"\n\nSteven's ears perked up a little. He climbed out of the car and Dawn got in.\n\n\"Ow, shit! That seat is hot. I burned my ass!\" Dawn said as she lifted her ass up and pulled on her shorts as Steven watched.\n\n\"Are you okay?\" Steven asked.\n\n\"Yes, I didn't think the seat would be so hot,\" Dawn said as she eased back into the seat. \"This is a nice sports car; I think she would love it.\"\n\n\"Why don't you take it for a test drive and see how it handles. Is that okay, Steven?\" I asked.\n\n\"Oh yes, let me stop up at the showroom and get a plate.\"\n\nSteven got in and backed the car out, and Dawn got in the passenger's seat, and they drove to the showroom. I watched Steven get out and run inside then Dawn got out and sat in the driver's seat. I don't know if that was what poor Steven had in mind, but he didn't have a choice now. He came back out with a dealer plate and stuck it on the back of the car and then said something to Dawn. After a minute, he got into the passenger's seat. Dawn drove the car out to the street and turned my way and hammered it. The tires squealed, and she went flying by. I started laughing. I looked at some other cars while they were gone. \n\nAbout 15 minutes later Dawn came racing down between the rows of cars back to where I was, Steven's look was great.\n\n\"I like it!\" Dawn exclaimed. \"It is fast and handles really nice.\"\n\n\"Do you think she will like it?\"\n\n\"Oh yes!\"\n\nThey were getting out of the car; I noticed Dawn's halter was wet with sweat, and her large dark nipples were clearly visible. Dawn wanted to see under the hood. Steven opened the hood and Dawn looked at the engine. She made sure she leaned over enough that Steven could see inside her halter.\n\n\"Do you think she would like the blue one or the red one over there?\" I asked.\n\n\"Oh, that red is nice!\"\n\nDawn walked several cars down the row and looked in the windows of the red convertible.\n\n\"I think she would really like the red one; I didn't see it. Can I look inside? Is it just like this one?\" Dawn asked Steven.\n\nSteven walked over and looked at the sticker and decided it was the same as the blue one.\n\n\"Would you like to see inside this one, ma'am?\"\n\n\"Would you, please?\" Dawn asked.\n\n\"Sure.\"\n\nSteven got smart this time, he took the blue Mustang and drove back to the showroom.\n\n\"Dawn, after you look at the red on, tell me that is the car you want. When we end up in the showroom, there is a black Shelby GT convertible, that is what we are buying. When you see it go crazy and tell him you didn't see that one. The car is a lot more than this one; they will probably think we won't buy it.\"\n\n\"Okay, you are fun!\"\n\nWhen I saw Steven coming back, he had an older fat guy with him I was sure was his boss.\n\n\"Oh, we are going to have some fun now,\" I told Dawn.\n\nThey pulled up, and both got out of the car.\n\n\"Hi, I'm Bill,\" The older guy said as he walked up to shake my hand.\n\n\"I'm James Smith, and this is my wife, Dawn.\"\n\nSteven had forgotten to ask our names.\n\n\"Are you looking to buy a Mustang?\" The older guy asked in just a little bit of a questioning tone I didn't like.\n\n\"Maybe.\"\n\n\"Anything I can help you with?\" Bill asked.\n\n\"No. Steven here has been doing a good job of answering all the questions we have.\"\n\n\"Very good, he just started last week, glad to hear he is doing well.\"\n\n\"He is doing well,\" Dawn told Bill as she turned and caught him looking at her wet top. \"He let me test drive one; it's really a nice car.\"\n\n\"Are you looking to make a purchase today?\" Bill asked.\n\n\"We might be,\" Dawn told him.\n\n\"Is this for you, ma'am?\"\n\n\"No, a friend of ours.\"\n\n\"Oh, are they going to want to come back and see it?\"\n\n\"No, it's a birthday present,\" Dawn told Bill.\n\nSteven had gotten in the red one and put the top down. Dawn walked over to the side of the red car and was looking it over, Bill walked around to the other side, just where Dawn wanted him. As Bill watched Dawn look the car over she bent way over into the car to look at something. I watched as Bill looked down her halter top at her tits hanging out. Dawn took a very long time leaning into the car. I caught Steven looking at her ass hanging out of her nothing-there shorts that had worked their way up into her crack while he stood next to me.\n\n\"Nice looking isn't it,\" I said.\n\n\"Oh, yes...uh...huh, oh yes, the car is nice.\"\n\n\"Steven, do you think we can make a deal on this car?\" I asked. Bill kept looking at Dawn's tits.\n\n\"I'm sure we can, let's go back to my office! Bill.\"\n\n\"Uh, yes.\"\n\n\"Mr. Smith and I are going back to my office to work out a deal on this car.\"\n\n\"Uh, okay...let's go.\"\n\nI let Bill and Steven get in the blue Mustang, we got in my Vette and fired it up, and I raced the engine a few times. Steven looked over finally realizing what I was driving.\n\n\"Have some fun with these guys,\" I told Dawn.\n\nThey backed the Mustang up, and I followed them to the showroom.\n\n\"Remember what I said,\" I told Dawn as we stopped.\n\n\"Do you think that is too much car for them?\"\n\n\"No, but I will have to make sure they don't get in trouble with it though.\"\n\nSteven quickly walked over and opened the car door for Dawn. I watched as Dawn turned and spread her legs and put one outside of my low Vette. Steven was looking down at her exposed pussy as she turned and put her other leg out. She bent over letting him see her tits in her halter then stood. \n\n\"Thank you, Steven,\" Dawn told him sweetly.\n\n\"No problem.\"\n\nBill walked to the showroom door and opened it and waited for us. Dawn walked in first, and we followed, she waited until we all got in.\n\n\"I didn't see this one!!\" Dawn exclaimed as she ran over to the black Shelby convertible. \"Steven, you didn't tell me about this one, it's pretty!!\"\n\nSteven walked up next to Dawn as she leaned over the door of the car. She had already attracted the attention of two other salesmen standing around in the showroom.\n\n\"This is the Shelby GT, it is a high-end performance car,\" he told Dawn.\n\n\"James, this is nice, come look at it!!\"\n\nDawn opened the door and jumped in the driver's seat.\n\n\"Look how sporty this is, look at all the stuff inside!\"\n\n\"This one is a limited edition; they are hard to get,\" Steven told Dawn as I looked the car over.\n\n\"Yes, this is the brand new one, they are rather expensive, it's the only one we have right now, we just put it in the showroom yesterday,\" Bill said.\n\n\"Hmmmm,\" I said.\n\nI looked at Bill, and he smiled like an ass I figured he was. He didn't realize my car cost a lot more than this one. Dawn was smiling after what Bill had said.\n\n\"Oh, James this is so nice, she would really like this, I like this!! How much is it?!\"\n\n\"I don't know; the window is rolled down.\"\n\n\"Can we get this one?\" Dawn asked.\n\n\"If you want this one, they sell for more than list price,\" Bill said smugly.\n\n\"Steven, would you find out how much this car is,\" I asked him.\n\nHe looked at Bill, and the two of them walked into an office for a minute then they walked back out.\n\n\"You do realize that this is a 500-horsepower muscle car?\" Steven asked.\n\n\"I think that should be enough for her, how much is it?\"\n\n\"This one is $55,000.\"\n\n\"Oh really?\" I said a little disappointedly.\n\n\"Yes, it is.\"\n\nI looked over at Bill, and he smiled and walked off...what I wanted.\n\n\"Is that more than you wanted to spend?\" Steven asked sheepishly. \"The other car is nice too.\"\n\n\"It's not too much,\" and left it at that and kept looking.\n\nBill went and sat in his glass office and looked at us. Dawn kept talking about the car.\n\n\"Would you two like something to drink, it is awfully hot?\" Steven asked.\n\n\"I wouldn't mind a soda, Dawn you want one?\"\n\n\"Yes, that would be nice.\"\n\nSteven walked off to get the sodas.\n\n\"James that is expensive, is that okay?\"\n\n\"Do you think it is too much for them?\"\n\n\"They will be crazy, is this too much car for them?\"\n\n\"Probably, but I will have a long talk with them.\"\n\n\"Are you sure they will drive safely, and they only have this one.\"\n\n\"We will see how resourceful Steven is,\" I said.\n\nSteven returned with the sodas; he was hesitant to hand one to Dawn while she sat in the car. Dawn took a sip and looked around the inside of the car some more. Then she laid the soda can between her sweating breasts.\n\n\"Let me see under the hood,\" I told Steven.\n\nWhen Steven got the hood up exposing the huge engine packed inside the car Dawn climbed out to look.\n\n\"Oh wow!\" Dawn said as she leaned into the car to look.\n\n\"It's a big engine,\" Steven said.\n\n\"Let's go to your office and talk while Dawn looks.\"\n\nWe turned to walk off, and two other salesmen were standing and looking at Dawn's ass. Steven led me to his office, and we sat down.\n\n\"Steven, I want that car.\"\n\n\"The Shelby?\"\n\n\"Yes.\"\n\n\"Oh wow, oh, I mean sure.\"\n\n\"Will you get the commission on the car?\"\n\n\"If you buy it from me, I will get paid for it.\"\n\n\"Okay, I will buy the Shelby under one condition.\"\n\n\"They won't come off the price any.\"\n\n\"That's okay.\"\n\n\"It is?\"\n\n\"Yes, but I have one condition.\"\n\n\"What is that?\"\n\n\"You have to find me another one just like it in red before Saturday.\"\n\nSteven paused and looked at me for a few seconds.\n\n\"You want it in red?\"\n\n\"No, I want a red one and a black one.\"\n\n\"You're kidding, right?\"\n\n\"No.\"\n\n\"If you are serious, I don't know if I can get one, they are only shipping one per large dealer right now.\"\n\n\"Do you want the sale or not?\"\n\nSteven looked like he was about to piss his pants.\n\n\"I know there are other big dealers in the area, I could go to one of them,\" I said.\n\n\"Oh no, let me check. Uh, if you had to go to another dealer to get the red one, would you?\"\n\n\"I would really like to buy both of them here so I can get them serviced here.\"\n\n\"Let me look on the computer.\"\n\nI watched Steven browse through the computer for a long time; he would look then frown then look some more.\n\n\"Found one! Oh, sorry, found a red one.\"\n\n\"Can you get it?\"\n\n\"I don't know, I have never done this before, let me go ask Bill.\"\n\nSteven got up and almost ran from his office.\n\n\"Bill!\" I heard him yell.\n\nDawn was walking up to the office smiling. Her tits were pressing through the thin material of her halter, and her shorts were trying to ride up in her crack.\n\n\"I guess you sprung the good news on him,\" Dawn said.\n\n\"He is about to piss himself.\"\n\n\"Can he get another one?\"\n\n\"I asked him to find a red one.\"\n\n\"Don't you think they should both be black so that they won't argue over them?\" Dawn asked.\n\n\"I will make a bet with you; I'll bet Sam will want the red one and Amy will want the black one.\"\n\n\"I hope you are right, and I know better than to bet with you. Where did he go running off to?\" Dawn asked.\n\n\"To find Bill.\"\n\n\"Oh.\"\n\nDawn sat down in the other chair while we waited. I looked at her top and could tell she had been rubbing the wet soda can on her nipples because they were sticking out through the fabric. Steven finally came back with Bill following. \n\n\"Uh, Mr. Smith, do you really want two?\" Bill asked.\n\n\"Yes, and if I get asked that again, I'll go somewhere else.\"\n\n\"Oh, I'm sorry, I just meant it is going to take some doing to get another one, the dealers don't want to give them up.\"\n\n\"I'm sure you have another dealer that owes you a favor.\"\n\n\"This would be a big favor, uh, there might be a premium.\"\n\n\"If there is a premium, I'll just go buy them somewhere else. You have already marked them up $5,000 past sticker.\"\n\n\"Let me go make a phone call,\" Bill said and walked off.\n\n\"Where is the other car at Steven?\" I asked.\n\n\"Other end of the state.\"\n\n\"Do you think Bill can get it?\"\n\n\"Bill can't get it, I know he can't, he won't even try. He is going to call the owner; he is friends with the owner of the other dealership. This will take some work.\"\n\n\"Steven, here is what I want, I want a red one and black one by Saturday. When you get them, I will come pay for them. I want you to put them out in front of the showroom Saturday with a huge red bow on the hood of each one with the top down if it is not raining so when I bring my two friends here they will see them.\"\n\n\"If we can get it, uh, they will want a down payment, but I will be more than happy to do that! I thought the other one was for your wife.\"\n\n\"No, she has a Jag and a Ferrari.\"\n\n\"Oh, really? You have two lucky friends!\"\n\n\"We are lucky to have them. Steven, will you make a good commission off this?\"\n\n\"Oh yes, it is only my second sale.\"\n\n\"Will this piss Bill off?\"\n\n\"Probably,\" Steven said with a laugh.\n\n\"Good. Since it will be Saturday before we pick them up, why don't you tell Bill the two cars would look good in the showroom with a sold sign on them.\"\n\n\"He will stew about that all week!\"\n\n\"I bet Bill made you walk all the way out to us in the heat because he didn't want to, didn't he?\"\n\n\"Uh, well yes. He does that to the new guys.\"\n\n\"When the next person shows up on your lot, will Bill have to tell you to walk out in the heat to greet them?\"\n\n\"Not now!\"\n\n\"Then you have had a good day, it pays to treat all your customers the same, doesn't it?\"\n\n\"Yes sir, it does.\"\n\nWe talked about 30 minutes before Bill came back. Steven kept glancing over at Dawn, either looking at her nipples are between her spread legs. I would catch her smiling at him when he looked up. As we waited, Dawn kept spreading her legs further apart. I knew poor Steven had a good view of her pussy.\n\n\"We can get the other one for you,\" Bill said.\n\n\"I need it before Saturday,\" Steven said a little cocky.\n\n\"And, I don't want it driven here, I want it brought on a flatbed wrecker,\" I told him.\n\n\"We can do that,\" Bill said.\n\n\"Steven has the rest of the instructions.\"\n\n\"Mr. Smith, we will need a down payment, how do you want to pay for the cars?\" Bill asked.\n\n\"You can have a check or cash.\"\n\nDawn smiled trying to keep from laughing.\n\n\"I'm sure a check would be fine. Can we get a 20% down payment?\"\n\n\"Sure.\"\n\nSteven went to work on the paperwork; he had to keep going to Bill's office to ask him questions. The first time he got up, Dawn and I could see the bulge in in his suit pants from the hard-on he had from looking at Dawn. When he came back the second time, he looked at Dawn because she was pulling out the front of her halter top because it was wet.\n\n\"Ma'am, would you like another soda?\" He asked.\n\n\"No, my top is just wet from sweat.\"\n\n\"I can get you one of our T-shirts if you would like to change?\"\n\n\"That would be great, Steven,\" Dawn said.\n\n\"Will a medium fit?\"\n\n\"A small would be better.\"\n\n\"I'll be right back.\"\n\nHe got up and left again. A few minutes later he came back with two T-shirts. He handed one to Dawn and one to me. Steven sat down and went back to work on the paperwork. Dawn looked over at me and smiled. She looked around through the glass surrounding the cubicle then reached behind her neck and untied the halter. She then reached behind her and untied it and pulled it off exposing her tits. I looked over at Steven, and he was just watching. Dawn took her halter and wiped all the sweat off her tits for a minute.\n\n\"Oh, this is better,\" Dawn said mashing her tits together as Steven looked.\n\nDawn looked up at Steven looking at her.\n\n\"Oh, sorry, Steven, I didn't mean to embarrass you,\" Dawn said/\n\n\"Oh, your not embarrassing me, I mean...\"\n\n\"That's okay, I know what you mean,\" Dawn said as she kept mashing her tits together.\n\nShe took the T-shirt and took her time putting it on and pulling the tight T-shirt down over her tits. While she was doing this, she had her legs spread so Steven could see.\n\n\"That's much better,\" she said. Steven was fixated on her.\n\n\"Steven, do you need anything else?\" Dawn asked.\n\n\"Uh, no. I'll get this paperwork done soon.\"\n\n\"No, hurry,\" Dawn said and winked at him then leaned back in the chair and spread her legs enough Steven could look some more.\n\nWe waited as he worked. I wanted to laugh as he kept looking up and looking between Dawn's legs. He got up to make one more trip to Bill's office and had to work at hiding his hard-on. When he came back, he went back to work until he had everything finished. I wrote a check for $25,000, and we left.\n\n\"You are terrible!\" Dawn said when we got back to the car.\n\n\"Me!\"\n\nWe drove to a burger place and went in and got something to eat.\n\n\"Why didn't you have them delivered to the house?\" Dawn asked while we ate.\n\n\"With those two? They are worse than you are. How could I surprise them? They would find them in the garage.\"\n\n\"What are you going to do Saturday?\" Dawn asked.\n\n\"We'll tell them you are taking them shopping for their birthday and ask me to go with you.\"\n\n\"You are bad!\"\n\n\"I need to call when we get back and find out how bad the insurance is going to be for those two. What do you have planned for their party?\" I asked.\n\n\"They just wanted a dinner, and I have some presents for them. I have an idea; can we take them to the dealer later in the afternoon Saturday and I will take them shopping at lunch?\"\n\n\"Okay, I will update Steven for about 4:00 Saturday?\"\n\n\"That should work.\"\n\n\"James, you know the two of them said they wanted to fuck all weekend, we may not make it through the weekend.\"\n\n\"It should be fun!\" I told Dawn.\n\nWe finished and got back in the SUV.\n\n\"I need to swing by the Police Headquarters and see the Chief, then stop at the Sheriff's Office,\" I said. \"Is that okay?\"\n\n\"Of course. What do you need to see them for?\"\n\n\"I need to drop off the information on this guy that is stalking Linda.\"\n\n\"Okay. I'll go in with you. I haven't seen either of them in a while,\" Dawn said.\n\n\"You are going to go in dressed like that?\"\n\n\"Sure? Why not?\"\n\n\"You better stick with me, or you may get arrested,\" I teased Dawn. She giggled.\n\nI drove downtown to the Police Headquarters first. We parked in the garage and rode the elevator up to the lobby. We got off, and I went to the main office with Dawn. All of the police officers were watching and looking as I walked with Dawn. I got to the office and found the Chief's secretary.\n\n\"Hi, Dr. Smith,\" she said.\n\n\"Hi. You remember my wife, Dawn?\"\n\n\"Oh, yes. Hi, Dawn.\"\n\n\"I need to see the Chief. Is he in?\"\n\n\"Let me check.\"\n\nShe went to her desk and picked up the phone and called. After a minute, she came back.\n\n\"He said he is available.\"\n\nDawn and I walked to the back of the large room, and I knocked on his door.\n\n\"Come on in!\" I opened the door, and we walked in.\n\n\"Hello, Dr. Smith, and you brought your lovely wife!\" He said as he looked Dawn over. \"You two have a seat.\"\n\n\"Hi, Chief. I haven't seen you in a while,\" Dawn said as she sat down.\n\n\"It has been a while. I think it was at the last charity function.\"\n\n\"It was.\"\n\n\"I'm sure you two will be there again this year, won't you?\" The Chief asked.",
        "\"You know we will,\" I said.\n\n\"What brings you here, Dr. Smith?\"\n\n\"I brought some information on an individual I would like for you to pass around.\"\n\nI handed him an envelope.\n\n\"This is the information and a photograph of a man that is stalking Linda Williams. He followed her to Italy and got into her hotel room but got away before they could catch him. I told her that I would get this information out to the police force and the sheriff's office.\"\n\n\"Did he hurt her?\"\n\n\"No, they caught him acting as a bellman. Her security people detained him when they caught up with him in Australia and then when he arrived in Miami.\"\n\n\"I'm sure Ms. Williams' security people dealt with him.\"\n\n\"They were dealing with him in Miami, but he escaped. Her security people are afraid he is returning home here. Right now, they have no idea where he is,\" I said.\n\n\"Has he done anything here?\" The Chief asked.\n\n\"Nothing yet.\"\n\n\"We will keep an eye out for him, but there is little we can do if he hasn't broken any laws here.\"\n\n\"I know, but I am sure Ms. Williams would be very grateful if any of your guys see him and let her security people know.\"\n\n\"I will put the information out to everyone. Do they think he is dangerous?\"\n\n\"They are considering him very dangerous. It would be a huge favor to Ms. Williams and me if your guys could keep a look out for him, Chief.\"\n\n\"We will do that.\"\n\n\"I'm sure Ms. Williams would like to help out at the policeman's charity function if I let her know you are helping.\"\n\n\"I will make sure everyone gets this.\"\n\n\"Thanks, Chief.\"\n\nHe sat down at his desk, and I sat next to Dawn.\n\n\"What have you two been up to?\" He asked.\n\n\"Just getting settled in from everything,\" Dawn said.\n\nThe Chief looked over at Dawn's tight T-shirt with her nipples poking out.\n\n\"I'm sure you have finished that huge house by now.\"\n\n\"Oh, yes. Everything is finished. If you are out our way, stop and I will give you the tour,\" Dawn told him.\n\nI watched the Chief glanced down as Dawn moved in the chair and spread her legs slightly.\n\n\"I would like to see it,\" he said as he looked.\n\n\"I know you would. Why don't you give us a call and bring your wife one evening,\" Dawn said.\n\n\"She would like that.\"\n\n\"Good. Is she helping with the policeman's ball?\" Dawn asked as she spread her legs a little more.\n\n\"Yes. She and a few of the officer's wives are doing most of the work.\"\n\n\"Maybe I should give her a call and see if I could help. I may have some time between working at the college and other things,\" Dawn kept talking.\n\n\"Well, they are getting ready for the ball in November, do you think you could help, Dawn?\" The Chief asked as he looked.\n\n\"I'm sure I could contribute in some way.\"\n\nThe Chief picked up a business card on his desk and wrote on it.\n\n\"This is her cell number.\"\n\nDawn got up and bent over his desk and took the card, then sat back down in the chair with her legs spread.\n\n\"I'll give her a call Chief. Maybe I can be of help to her in some way,\" Dawn said. \n\n\"Thanks, I'm sure my wife would be interested in you helping her out if you can, Dawn.\"\n\n\"No problem, Chief. I'm sure I have something I can offer her that she would be interested in,\" Dawn said.\n\nI was trying not to crack a huge smile as Dawn teased the Chief.\n\n\"Oh, I hope so,\" he said as he looked between Dawn's legs.\n\n\"Has she ever done anything like this before...I mean putting on a charity function,\" Dawn said straight faced.\n\nThe Chief was looking between Dawn's spread legs; then I saw his eyes move up to meet Dawn's.\n\n\"This will be her first time. I have been trying to get her interested for a long time,\" the Chief said to Dawn then smiled. \"I think I finally talked her into it...she has been interested in doing something like this for a while.\"\n\n\"Good. I have done things like this before. I'm sure I can help your wife get more interested in doing things like this,\" Dawn said, and I watched her wink at the Chief.\n\n\"That would be great, Dawn. I would sure appreciate it,\" he said with a big smile.\n\n\"No problem. You never know, maybe you and James could help me and your wife,\" Dawn replied. The smile on the Chief's face got bigger and he looked over at me.\n\n\"Dr. Smith? Would you like to help do something like that?\" He asked me.\n\n\"Sure. I have met your wife, I would be glad to help her out. Dawn and I are always willing to help out when we can.\"\n\n\"Great! I have been working on getting my wife to try things like this, you know, helping out when she can. It took me some time to get her interested in these things.\"\n\n\"I'm sure you have. Dawn started helping out with things like this a while back. She gets me to help her and her friends a lot. We have a good time together doing things like this,\" I said.\n\nThe Chief looked up at me and smiled.\n\n\"Very good.\"\n\n\"When would be a good time to call your wife, and talk to her about this?\" Dawn asked.\n\nHe looked back over at Dawn now that she had his attention.\n\n\"Oh, any evening after 7:00.\"\n\n\"I'll make sure I call her soon. Will she know what I am asking about?\" Dawn said.\n\n\"Oh, yes. I have been asking her to get more people involved in these things,\" the Chief said.\n\n\"Good. I'm sure she and I can work something out,\" Dawn said and leaned back in the chair. The Chief looked between her legs again then looked at me.\n\n\"Dr. Smith, you don't mind your wife doing things like this?\"\n\n\"Oh, no. She gets involved in things like this all the time. She will usually ask me to help her out or supervise when I can.\"\n\n\"I see. Do you like doing things like that?\"\n\n\"When I can find the time I really like to help out, as long as everyone is okay with me helping, sometimes the ladies like to do everything themselves,\" I replied.\n\n\"I'm pretty sure my wife would be open to you helping her with things,\" the Chief said with a big smile.\n\n\"That would be great Chief; I know Dawn is open to you helping her if you can find the time. I know I would like to help your wife in any way I could since Dawn would enjoy you helping her out.\"\n\n\"I see. The wife and I have only talked about the other ladies helping,\" the Chief said.\n\n\"I think once she is comfortable doing that, you two should talk about some of the guys helping,\" Dawn said to him.\n\nThe Chief looked back at Dawn then looked between her legs for a minute.\n\n\"Is that something you two are comfortable with?\" He asked Dawn.\n\n\"Oh, yes. I get a lot of help from other guys, and James helps out the ladies when they need it,\" Dawn said. \"We have a good time at the house getting involved in events like that.\"\n\n\"Maybe I should come see your new house,\" he said.\n\n\"We would be happy to have you, but you need to bring your wife too,\" Dawn told him.\n\n\"I see.\"\n\n\"If you two come by one evening, the four of us could talk about just getting the ladies involved in this project first, if that is what we need to do,\" Dawn said. \"Maybe after helping with that you and your wife could decide on getting more involved with some of the guys helping her out.\"\n\n\"Yes, Chief, you need to find time to explore working with other people on these things,\" I said to him with a smile.\n\n\"I think it would be okay for my wife to work with other men and women, I mean, if she is going to let me help her work with some of the ladies, it would only be fair. I can find the time to help out with things she would like,\" he said then chuckled.\n\n\"I think that is a good idea,\" I said. \"I know Dawn likes working with some of the guys we know.\"\n\n\"I think that sounds like a good plan,\" Dawn said. \"You never know, James and I could have events like that at our house every few months.\"\n\n\"You two would like to be that involved?\" The Chief asked.\n\n\"Oh, we stay pretty involved in things like that now,\" Dawn told him.\n\n\"Chief, do you think that is something you two would like to be involved in?\" I asked.\n\n\"I think we are moving in that direction. I would just be concerned about other people knowing I was spending a lot of time on things like this.\"\n\n\"That wouldn't be a problem,\" I said.\n\n\"Then I will talk to the wife about it. Dawn, thanks for helping out.\"\n\n\"Sounds like you have another volunteer then,\" Dawn said.\n\n\"Very good!\"\n\nDawn looked over at me and smiled. The Chief was in his forties and a nice looking guy. We had met his wife once at the policeman's ball. She was a nice looking lady.\n\n\"The psychologist you taught that works for us is putting on a seminar next week, could you come?\" The Chief asked.\n\n\"What day?\"\n\n\"Thursday. Most of the Detectives will be here.\"\n\n\"I'll call her and get the information. You know I am always happy to help,\" I said.\n\n\"I know, and Dr. Smith, thank you for all you have done for us, and I am looking forward to working with you and your wife...on the policeman's ball.\"\n\n\"I'm sure we will be getting together about it soon,\" I said. \"Chief, I am always available.\"\n\n\"I'll get this information out to everyone. I'll make sure my wife knows you are going to call her Dawn.\"\n\n\"I look forward to talking to her,\" Dawn said. \"Maybe I can meet her for lunch, and we can discuss this before we all get together.\"\n\n\"That would be good,\" the Chief said.\n\n\"Thanks, Chief. We need to run,\" I said.\n\n\"Good to see you, and it was nice seeing you, Dawn.\"\n\n\"I'm happy you got to see me.\"\n\n\"I am too,\" the Chief said and laughed.\n\n\"We will see you at the next charity function,\" Dawn said.\n\nWe left his office and went back down to the garage to the SUV.\n\n\"Dawn, you are terrible. Do you really want to do him and his wife?\"\n\n\"It could be in my plans,\" Dawn said as she put her seatbelt on.\n\n\"You are going to have to tell me about these plans you keep mentioning,\" I said to her.\n\n\"I'll will...eventually,\" Dawn said with a big smile.\n\n\"I need to go to the Sheriff's office next. Are you interested in helping him and his wife out...at their next charity function?\" I asked.\n\n\"I'll see,\" Dawn said and winked at me.\n\nWe drove across town to the Sheriff's Office, and we went in to see him. \n\n\"Hey, James, hey, Dawn,\" he said as we went into his office he closed the door. \"What are you two doing here?\"\n\nI had gone to high school with Bill, the Sheriff. I even had a few classes in undergrad with him. He had gone to work as a deputy out of college and had spent his time doing that and making a lot of connections. When he decided to run for sheriff, Dawn and I were glad to donate to his campaign and help him.\n\nI gave him the information about Linda's stalker and the same speech. He said he would get the information out to all of his deputies. I was better friends with the Sheriff because I had hired a lot of the deputies for security and had paid them very well, helping some of them out that needed to earn extra money.\n\n\"James, are you still working for the AG?\" He asked once we finished talking.\n\n\"On and off. He calls if something serious comes up.\"\n\n\"They still won't let us hire a full-time psychologist.\"\n\n\"That lady I referred you to is good.\"\n\n\"She is, but I wish we could hire someone full-time. The department is getting bigger, and we could use one for a lot of things.\"\n\n\"Will they budget for it?\" I asked.\n\n\"Not this year. I'm working on next year, but psychologist aren't cheap,\" Bill said.\n\n\"You know what you could do for now? I may be able to get some of the Ph.D. students to intern with you. All they would need is a supervisor, and I can do that,\" I said.\n\n\"How would that work?\"\n\n\"They all have to work in different settings for so many hours as part of their training. This would be a good practical experience for them. If anything serious came up you know I will always be there,\" I said.\n\n\"Maybe if we could do something like that to help the guys with stress and some of the citizen's we work with, it could show the County Mayor how much good a full-time psychologist would be.\"\n\n\"I'm teaching part-time this fall, let me talk to the Dean. He is always looking for places for the students and post-docs to work.\"\n\n\"That would be great! If it works out well, maybe there will be enough feedback to help.\"\n\n\"I'm sure we can get the deputies to sandbag the Mayor,\" I said, and he laughed.\n\n\"Dawn, what are you doing now?\" He asked.\n\n\"I still help with some surgeries occasionally, but I am now the acting Dean at the University for a new surgical program for nurses.\"\n\n\"Wow, that must be keeping you busy,\" the sheriff said.\n\n\"It is starting to.\"\n\n\"James, I have heard several of the deputies talking about the limo business you are starting. How is that coming?\"\n\n\"Things are moving well. I am going to help some of the deputies and some guys on the city police force open a limo business along with some of the local drivers for other companies.\"\n\n\"That is what they have been telling me. I know a few of the deputies that are nearing retirement are involved.\"\n\n\"A few of the police officers nearing retirement are also. This should give them a nice business to make extra money.\"\n\n\"Will it be big enough to use some of the guys part-time?\"\n\n\"I plan on it. I think once the public finds out what all we have to offer we will take a lot of business away from the other companies. As we grow, the other deputies can work for us.\"\n\n\"Good, it is a less controversial option for them to make extra money,\" Bill said.\n\n\"They can still work security, can't they?\" I asked.\n\n\"Some, but that is becoming an issue because of liability.\"\n\n\"Well, I hope we grow big enough they can drive for us then.\"\n\n\"What are you going to have to offer that will take business away from the other companies?\"\n\n\"The biggest thing will be a very nice fleet of vehicles and very professional people. We are going to make sure we have the cleanest vehicles and the best people. Since most of them will be part owners, I think they will have the incentive to make sure everything is the best.\"\n\n\"How many people are buying into it?\"\n\n\"About ten for now. With my help, we will raise about 2 million to start the company off.\"\n\n\"Wow, you do have some serious investors.\"\n\n\"A lot of the drivers for other companies have been saving for years to buy their own limo and operate independently. This will give them more return and offer them something other than just driving a limo. I think the part owners are going to make sure we have the best of everything and offer the best service and perks,\" I said.\n\n\"What kind of perks!\" Bill asked laughing.\n\n\"Oh, there are a lot of things you can offer customers if you try.\"\n\n\"You mean like booze and things in the limos?\"\n\n\"Things like that. Most limo services have booze if a customer wants it. We are also going to have limos outfitted like an office with everything an executive needs to work while they travel.\"\n\n\"That will be good.\"\n\n\"I'm even considering an armored limo for people that need that kind of security.\"\n\n\"What does something like that cost a day to rent?\"\n\n\"Including the proper security personnel, about $10,000 a day.\"\n\n\"Wow!\"\n\n\"That type of service is not cheap. The limo cost around $250,000,\" I told him.\n\n\"Would you have enough call for that?\"\n\n\"I'm looking into it.\"\n\n\"Where will you get the security people?\"\n\n\"I have some connections for high-end security. They don't come cheap either.\"\n\n\"I have heard.\"\n\n\"We plan on having some perks for people like newlyweds,\" Dawn said.\n\nBill looked over at her as she talked.\n\n\"What, like champagne and things like that?\" Bill asked.\n\n\"Well, we have heard from the drivers at the other companies that newlyweds can get frisky on the way to their honeymoons,\" Dawn said.\n\n\"What do you mean?\"\n\n\"Oh, come on, Sheriff! They like to fuck on the way,\" Dawn said.\n\nBill looked at Dawn for a moment then smiled.\n\n\"So, what are you going to offer them?\" He asked.\n\n\"Well, some of the other limo companies discourage that type of behavior, they don't want to clean up the mess,\" Dawn said and giggled.\n\n\"We are going to get the word out that we encourage that type of behavior,\" I said.\n\n\"That should be interesting for the driver.\"\n\n\"We have been told that it goes on more than you might think,\" I told him.\n\n\"I'm sure it does. I hope you are not planning on that type of thing with escorts, James,\" he said smiling.\n\n\"Hey, we will just be driving the people around. They can do whatever they want,\" I told him.\n\n\"Well, just keep it legal.\"\n\n\"Oh, hell, Bill! Wouldn't you like to rent a limo to take you and your wife to dinner and fuck her on the way back home!\" Dawn said then laughed. Bill laughed.\n\n\"Sure! If I could afford a limo!\" He said.\n\n\"Oh, I'm sure with our friends and family discount you could,\" I told him. He looked at me and smiled.\n\n\"Maybe.\"\n\n\"We are planning on creating some package deals for a weekend limo and a hotel room at some of the nice hotels. You get a nice hotel room and limo to drive you around for the weekend. Since we won't have a problem with other activities in the back, we hope the word gets out how much fun a couple can have for a weekend,\" I told him.\n\n\"I'm sure word will get out,\" he said.\n\n\"Bill, I have met your cute wife. I'm sure she would have fun doing something like that,\" Dawn said.\n\n\"Lucy would get a kick out that,\" he said.\n\n\"I'm sure she would! Let me know when you and she want to take a ride. I'll make sure I am driving!\" I said.\n\n\"Oh, I don't think she would want you or the driver watching!\"\n\n\"You never know,\" Dawn said.\n\nBill looked over at her as she sat in the chair. I could tell he was looking at her erect nipples pushing through the tight T-shirt.\n\n\"When that happens, do the drivers watch?\" Bill asked.\n\n\"They tell me that sometimes they get to, other times they will roll up the dark divider,\" I said.\n\n\"I wonder how much of that goes on?\"\n\n\"A few of the other drivers told me that a lot of the music people around town can get pretty crazy when they are out on the town.\"\n\n\"Really? There are a few lady singers in town I would like to watch getting laid,\" Bill said.\n\n\"They told me when they have the big awards show in town it gets pretty wild.\"\n\n\"Maybe I should drive part-time!\" Bill said and laughed. \"I would like to watch some of that.\"\n\n\"Bill, if people can't watch you and your wife, you can't watch other people!\" Dawn teased him.\n\n\"I guess you and James have done it in the back of the limo and let the driver watch!\"\n\n\"Several times,\" Dawn said and turned toward Bill in her chair spreading her legs.\n\n\"Are you serious?\"\n\n\"Dawn is a freak. She likes for people to watch her having sex,\" I said.\n\n\"Hey, I'm not the one that started it!\" Dawn said and laughed.\n\nBill was looking at Dawn, thinking about what she said, or fantasizing about watching her. I watched as she smiled at Bill and spread her legs a little more.\n\n\"If some of the local stars are doing that, what if one of the drivers talked?\" Bill asked.\n\n\"I guess they don't talk about it, much. It would be wild if someone got a picture of them doing that, especially if it is not their spouse,\" I said.\n\n\"Man, if someone got a video of it and put it on the internet it would hurt some of them,\" Bill said.\n\n\"You know Bill if things like that go on, someone should put cameras in the limos,\" I said and smiled at him.\n\nHe looked away from Dawn and looked at me.\n\n\"Now that would be a good idea!\" Bill said.\n\n\"It sure would,\" I said smiling.\n\n\"James! You wouldn't put cameras in your limos would you!\"\n\n\"I don't know, sounds like a good idea.\"\n\n\"If you did that you could blackmail people!\"\n\n\"Maybe not blackmail, but maybe the drivers could get some great tips if they offered a wild video DVD to people.\"\n\n\"Are you going to do that!\"\n\n\"I don't know. Maybe after you bang your wife in the backseat, the driver could sell you a hot DVD.\"\n\n\"You are going to do that aren't you! You always did crazy shit like that in high school!\"",
        "\"I guess we will find out after you do your wife, Bill!\"\n\nAll of us laughed. Bill looked over at Dawn while she laughed and I saw him look between her legs. I looked over at Dawn, and she had her legs spread, and I could see her pussy lips.\n\n\"Hey, James? How soon can I get a ride in one of the limos?\" Bill asked smiling.\n\n\"We are opening in February. I'll get you and your wife a hotel and weekend limo package in February,\" I told him.\n\n\"What's it going to cost me?\"\n\n\"Nothing, as long as Dawn and I get a copy of the DVD,\" I said. Bill laughed for a minute.\n\n\"You're serious, aren't you?\"\n\n\"I'm always serious, Bill.\"\n\n\"Maybe, but I won't tell my wife you got a copy!\"\n\n\"Come on Bill, Lucy is probably more adventurous than you give her credit for,\" Dawn said.\n\n\"Maybe, but it wouldn't do me any good for a video of the sheriff banging his wife to end up on the internet.\"\n\n\"I suspect we would have a very discreet service,\" I told him.\n\n\"And I am sure you will have copies of all the DVD's James!\"\n\n\"I wouldn't do something like that.\"\n\n\"Bull shit!\" We all laughed again. \"You are really going to have cameras in the limos?\"\n\n\"Cameras, microphones, the works. That is going to be one of the perks we will offer. We will set them up so that the people in the back can turn them on or off.\"\n\n\"I sure when word of that gets out, all of the perverts will be renting your limos!\"\n\n\"Bill, in the bigger limos, they can carry several couples. I can't wait for one of the videos where they are all fucking and watching,\" Dawn told him.\n\n\"I didn't think about that. You may end up having orgies in your limos,\" Bill said. \"What are you going to charge for the DVD?\"\n\n\"I'm not sure yet,\" I said.\n\n\"I'm sure my deputies will enjoy watching things like that.\"\n\n\"I enjoy watching things like that,\" Dawn said and moved in her chair and spread her legs further apart.\n\n\"I don't know if my wife would want to know that she had been recorded or that people were watching us,\" Bill said.\n\n\"Maybe we should find out,\" Dawn said.\n\nBill looked over at Dawn for a moment.\n\n\"Maybe we will find out in February,\" Bill said and smiled.\n\n\"I hope we do. I would like to watch your cute wife getting fucked,\" Dawn said.\n\nBill kept looking at Dawn like he was trying to figure out how serious she was.\n\n\"I would like to watch too,\" I said to get Bill's attention.\n\nHe smiled while he was looking at Dawn.\n\n\"Dawn, you are pretty hot also, I wouldn't mind watching you getting laid,\" Bill said smugly.\n\n\"Anytime,\" Dawn said looking straight into his eyes. Bill held her gaze for a moment then looked back to me.\n\n\"Your wife is crazy,\" he said.\n\n\"She's not crazy; she just likes to have a little fun, Bill.\"\n\nBill looked at both us for a moment then picked up the envelope I had given him.\n\n\"I'll get this out to all of the deputies.\"\n\n\"Ms. Williams would appreciate it. I'll mention it to her; I'm sure she will remember when you run for re-election Bill.\"\n\n\"She better remember it, she already gets a free pass in that red Diablo she flies up and down the roads in, and her limo.\"\n\n\"Does that go for my black Ferrari?\" Dawn asked.\n\n\"Deputy Johnson told me about stopping you a few weeks back,\" Bill said. \"You need to slow down; he let you off.\"\n\n\"I think I should get a free pass too,\" Dawn said.\n\n\"I'll put the word out, but slow down Dawn.\"\n\n\"On that subject, Bill, do you know anyone at the DMV?\" I asked.\n\n\"I know everyone, what do you need?\"\n\n\"I want to see if I can get custom plates for all of my limos instead of the regular taxi plates. I want your guys and the police to know which limos to stop and which ones to let pass.\"\n\n\"I'm sure I can find out who to talk to about that James.\"\n\n\"I would appreciate it. I know your guys wouldn't want to stop one of my limo's if one of their buddies is driving.\"\n\n\"Most of the limos around her get away with a lot anyway,\" Bill told me.\n\n\"I'm sure it wouldn't make the customers happy to have the limo they rented stopped, especially if they were fooling around in the back.\"\n\n\"I don't guess they would,\" Bill said.\n\n\"Let me know who to contact at the DMV. I will get custom plates for all my cars. That way your guys will know which limos to stop and which ones to let pass,\" I said with a big smile.\n\n\"I see,\" Bill said smiling at me.\n\n\"It would really become a problem for the other companies if their limos got stopped all the time,\" I said and smiled.\n\n\"You're still an ass, James! Maybe I should stop yours so I can see what you are recording on the DVDs! It might be pornography!\"\n\n\"Hey! Pornography is perfectly legal! But, I can make sure you get some copies to check out,\" I told him. Bill looked at me and smiled.\n\n\"You were always up to something in school,\" Bill said. \"Is there anything else you are getting into?\"\n\n\"Maybe. I do know some people that are opening a high-end ladies fashion store soon.\"\n\n\"I will have to keep my wife out of there!\"\n\n\"Your cute wife would look good in some nice clothes,\" Dawn said. \"Of course, she would look cuter out of all of her clothes.\"\n\n\"Are you two going to have your hands in this new store?\"\n\n\"We can probably get you some nice discounts,\" Dawn said.\n\n\"You two be careful how you talk.\"\n\n\"Your door is closed. No one can hear us,\" Dawn said as she moved in the chair and spread her legs far enough apart Bill and I could easily see her pussy.\n\n\"What will this new store be selling?\" Bill asked.\n\n\"High fashion ladies' clothes, designer swimwear, and expensive lingerie,\" Dawn said. \"Of course, I wouldn't know anything about lingerie; I don't wear any.\"\n\nBill looked over at Dawn.\n\n\"I noticed,\" he said as he smiled at Dawn.\n\n\"Oh, sorry, I forgot that these shorts open up like that,\" Dawn said as she looked down.\n\n\"That's okay,\" Bill said. He was getting brave.\n\n\"Bill, if your wife wears lingerie, we will have some nice things you can get her,\" Dawn said.\n\n\"She likes to wear nice lingerie, unless she is wearing something like you are, Dawn.\"\n\nBill was really getting brave. I was thinking he was going to see how far he could go with my wife.\n\n\"Oh, I just wear these old shorts when it gets hot,\" Dawn said as she looked down between her legs and took her hand and pulled the thin strip of the blue jeans that was not really covering her pussy to the side. \"They are just comfortable when it gets this hot.\"\n\nDawn moved her hand and looked up at Bill.\n\n\"I guess you are keeping pretty cool in those,\" Bill said.\n\n\"Don't encourage her Bill, I have a hard enough time keeping clothes on her and the girls when they are running around the house,\" I said.\n\nBill looked up at me puzzled.\n\n\"You don't have kids, what girls?\" He asked.\n\n\"We have two beautiful redheads that live with us. They are both going to college,\" I told him.\n\nI could see the gears in Bill's head turning as he tried to put together what I said.\n\n\"Who are they?\" Bill asked.\n\n\"Two sisters we met a while back. They now live with us. We are all very close now,\" Dawn said.\n\nBill looked back over at Dawn.\n\n\"The two of them and Dawn never put clothes on. If you are ever coming to the house, call first so I can get them to put something on,\" I told Bill.\n\n\"I haven't been out to your house since you finished it.\"\n\n\"You will have to come and see it now that we have everything furnished,\" Dawn said.\n\n\"I may have to come by and check it out,\" Bill said smiling at Dawn.\n\n\"I have a better idea. Why don't you call us and let us know when you can come and you can bring your wife,\" I said. \"We could cook out around the pool one evening.\"\n\n\"I'll tell her and I will see when I can get an evening off,\" Bill said.\n\n\"Do that and let us know,\" I said.\n\n\"Make sure you two bring bathing suits if it is hot, or not,\" Dawn said. \"We can swim in the pool.\"\n\n\"Dawn, I don't guess you wear a bathing suit at home, do you?\" Bill asked.\n\n\"Not usually, unless someone is coming over and they don't want to skinny dip with us.\"\n\nI could tell Bill was looking at Dawn, thinking about seeing her naked.\n\n\"I guess that is how you get that great tan.\"\n\n\"It is.\"\n\nBill looked at Dawn for a few more seconds then looked back at me.\n\n\"If we see this guy I will tell the guys to call it in, and we can call Ms. Williams' people,\" Bill said.\n\n\"Thanks, Bill. It would be helping me a lot. She is a close friend of ours. Her people think this guy is very dangerous.\"\n\n\"I will take care of it.\"\n\n\"Thanks, Bill. I'll make sure we setup a weekend for you and your wife at one of the hotels.\"\n\n\"We'll keep that between the four of us,\" Bill said. \"But, I don't think I am going to let you see my wife naked in the back of one of your limos!\"\n\n\"Why not? I'll let you see mine naked,\" I said.\n\n\"James, you are so fucking crazy!\"\n\nBill's head turned to look at Dawn when she pulled up the tight T-shirt and pulled it off over her head.\n\n\"Whoa,\" Bill said as he looked at Dawn.\n\nDawn stood and unsnapped her shorts and let them fall to the floor. She was now standing there naked as Bill looked at her.\n\n\"Oh, my.\"\n\nBill got up from behind his desk and walked to his office door and locked it.\n\n\"You two are going to get me in a lot of trouble,\" he said as he walked to the front of his desk and leaned on the edge and looked at Dawn.\n\n\"See, now I can I see your wife naked?\" I asked.\n\nBill looked at Dawn for a moment then looked over at me.\n\n\"Well, I may be able to get her to have sex in the back of your limo, but I won't tell her there are cameras back there.\"\n\nDawn stepped over her shorts and walked to Bill.\n\n\"It's more fun if she knows people are watching,\" Dawn said as she stood in front of Bill. \"I know it is for me.\"\n\n\"Do you two do this often?\"\n\n\"Occasionally, we enjoy watching other people fuck, then we let them watch us,\" Dawn said looking up at Bill as he looked at her. \"We think it is pretty hot. I would like to watch you and your wife fuck, Bill.\"\n\n\"I know I would like to watch you, Dawn.\"\n\nDawn reached up and grabbed Bill's hard cock through his uniform pants.\n\n\"Do you think your wife would like to watch you fuck, Bill?\" Dawn asked.\n\n\"You mean, like on a video?\"\n\n\"No, I mean would your wife get off watching you fuck another woman?\"\n\nDawn was squeezing and rubbing Bill's cock.\n\n\"Oh...wow...uh...I don't know about that?\"\n\n\"Bill, I'm sure your wife would get off watching you fuck another woman, as long as you got to watch her getting fucked by another man,\" Dawn said as she squeezed.\n\n\"Oh...what?\"\n\n\"It's only fair, Bill. I mean if you got to fuck...say me...it would only be fair if James got to fuck her. Of course, you would get to watch.\"\n\n\"You two are into that?\"\n\n\"We are not necessarily into anything, we just have some fun occasionally,\" Dawn said.\n\n\"Oh.\"\n\n\"Maybe if you two come to the house for a cookout, we could get you two naked with us in the pool and go from there,\" I said as Dawn rubbed and squeezed his cock.\n\n\"Hmm, I might be able to get her to skinny dip. She used to do crazy things like that when we were in college.\"\n\n\"That would be a good start,\" Dawn said. \"Did she do any other wild things in college?\"\n\n\"We dated all through college. We did some crazy things,\" Bill said as he watched Dawn. \"But, we never had a threesome or anything like that.\"\n\n\"I was more curious if she had experimented with other girls while she was in college,\" Dawn said.\n\n\"Oh...I see. Uh, she has never mentioned it if she did. Did you?\"\n\n\"Not in college, but I do now,\" Dawn said and grabbed Bill's belt and began to pull it open.\n\n\"And your husband is okay with things like this?\"\n\n\"Oh, yes. He especially enjoys watching me with other women,\" Dawn said as she got his belt open.\n\n\"I'm sure he does,\" Bill said as he looked down and watched Dawn.\n\n\"It's pretty hot Bill. Have you ever had the chance to watch Lucy with another woman?\" I asked.\n\n\"No, I haven't.\"\n\n\"That's too bad,\" I said as I watched Dawn unsnap his pants.\n\n\"I don't know if she ever tried that,\" Bill said looking down.\n\n\"Bill, you may want to ask her. She might want to do it again, but only if you are okay with it,\" Dawn said as she unzipped his pants. \"You would be okay with it, wouldn't you?\"\n\n\"Oh...sure...yes.\"\n\n\"Are you sure, Bill?\" I asked.\n\n\"Oh, I think I would be okay with it,\" Bill said as Dawn pulled his pants open.\n\n\"As long as you got to watch?\" Dawn asked.\n\n\"Sure.\"\n\n\"James lets me be with other women even when he is not around. I really enjoy it. I'll ask your wife about it when you two come to the house,\" Dawn said as she grabbed the top of his underwear and pulled it down.\n\nI watched Dawn fish Bill's cock out and began to stroke it slowly.\n\n\"Oh, that may not be a good idea,\" Bill said.\n\n\"Me doing this?\" Dawn asked as she looked up at him.\n\n\"Oh, no...I meant asking her about that.\"\n\n\"Don't worry, women talk about things like that all the time,\" Dawn said as she stroked his nice size cock.\n\n\"Is that something you and James do when you are with other people?\" Bill asked.\n\n\"What do you mean?\" Dawn asked.\n\n\"Do you and the other woman...do each other?\"\n\n\"If she is into that. Most of the other couples we have fun with, the lady is into that. We will do each other while our men watch us. They seem to enjoy it.\"\n\n\"I'm sure they do.\"\n\n\"After that, I like to watch James fuck the other woman for a long time. After he finishes, he likes to watch me being fucked. Bill, do you think that is something you and your wife would enjoy doing?\"\n\n\"We have never talked about it.\"\n\n\"Oh, I see.\"\n\n\"Bill, you never know what each of you may want unless you talk about things like that,\" I said.\n\n\"James, I can't ask my wife if she has ever done another woman...or if she would like to get into swinging. I...we couldn't get into something like that. Not with me being the sheriff.\"\n\n\"We aren't really swingers. We just have some close friends that like to have fun occasionally. They are also the kind of people that could never get caught...swinging,\" I told Bill.\n\n\"Bill, maybe if you and Lucy talk about it before you two come to the house, we could have some fun, in private,\" Dawn said.\n\n\"Seriously?\"\n\n\"Sure. You wouldn't have to worry about anyone finding out,\" Dawn said as I watched her get down on her knees.\n\nBill stiffened and looked down at Dawn while she stroked his cock as she looked at it.\n\n\"Bill, I have known you for a long time. I have met your wife several times, and I would like to fuck her,\" I said. \"When I saw her with you in college, I wanted to fuck her, but I knew you two were very close. But, I knew if she ever saw my big cock, she would want it.\"\n\n\"Damn, James!\"\n\n\"I have met your wife too, and I would like to do her also,\" Dawn said. \"Bill, wouldn't it be a fair trade. I mean if you got to fuck me, couldn't James fuck Lucy?\"\n\n\"I don't know about that,\" Bill said.\n\n\"If things go right, maybe you would also get to watch me do your wife, and maybe watch her do me,\" Dawn said as she rubbed his cock.\n\n\"Damn, that would be hot,\" Bill said.\n\n\"Yes, it would,\" I added.\n\n\"Hey, listen you two. I don't know about all of this,\" Bill said.\n\nDawn slipped her lips over the end of his cock, and he jumped.\n\n\"Wow. Uh...I mean, my wife and I have never talked about anything like this,\" Bill said watching Dawn.\n\n\"Dawn and I had never talked about anything like this until an opportunity came up,\" I said.\n\n\"What kind of opportunity? What could have led to you two discussing things like this?\" Bill asked as he watched Dawn slide her mouth up and down his cock.\n\n\"It just came up, Bill. If it came up in a discussion when you two were skinny dipping at the house, would you be prepared?\" I asked.\n\n\"Prepared for what?\"\n\n\"Anything that might happen,\" I said.\n\nDawn was working her mouth up and down on his cock while he watched.\n\n\"Oh, I don't know about that. I mean, I don't know about fucking another woman. I haven't since I have been married.\"\n\nDawn slid her mouth off and looked up.\n\n\"If you are not sure if you could do it, you could try it right now,\" Dawn said.\n\n\"Uh...what?\"\n\n\"You can fuck me, right now. James won't mind watching,\" Dawn said.\n\n\"Oh...wait...I...I mean I could do it...I just haven't since we have been married.\"\n\n\"There is always a first time,\" I said.\n\nDawn slid her lips back down on his cock and worked on it for a minute while we watched.\n\n\"James? You are okay with this?\" Bill asked.\n\n\"Bill, the two of us are pretty open to about anything. We have discovered that since we opened up to things like this that we can have a lot of fun,\" I said.\n\nThe two of us watched Dawn for a few minutes as she worked on his cock. Dawn slid her mouth all the way down and deep throated him for a minute.\n\n\"Oh...wow...\" came from Bill as he watched.\n\n\"Bill, I'm sure this happens in your office all the time,\" I said.\n\n\"Oh, not like this.\"\n\n\"Who?\"\n\n\"My secretary and one of the female deputies, but they don't get naked.\"\n\n\"Does your wife know?\"\n\n\"Hell, no!\"\n\n\"If one of your deputies is doing this, you are already living dangerously,\" I said.\n\n\"She is an old friend.\"\n\n\"Is she the type of lady that might like to join you and your wife?\" I asked as Dawn worked.\n\n\"She is crazy enough.\"\n\n\"See, Bill. If you and Lucy discuss this, you might find some interesting opportunities.\"\n\n\"I wouldn't know where to start with her.\"\n\nDawn was working hard now as the two of us watched.\n\n\"Bill, one thing I have learned, is that a lot of wives have some pretty erotic fantasies. If you two talk, maybe you both can live out some.\"\n\n\"I'm not sure about letting my wife do other guys.\"\n\n\"Why not? If you two are really close to each other, it shouldn't create an issue,\" I told him.\n\n\"And you are okay watching Dawn being fucked?\" Bill asked.\n\n\"Well, I'm sure okay watching her right now. I know my wife enjoys herself and the two of us enjoy talking about it later.\"\n\nDawn was really working on Bill's cock. The two of us watched her for a while.\n\n\"I don't know if I could watch my wife do something like this,\" Bill said.\n\n\"Does she enjoy doing that to you?\"\n\n\"Oh, yes.\"\n\n\"Then you should enjoy watching her do something she likes doing. I would like to watch your wife do me like that.\"\n\n\"I'm sure you would, James!\"\n\n\"Emmmm!!\" Came from Dawn as she worked.\n\n\"Bill, find a way to bring up your wife with another woman first. Maybe while you are watching some girl on girl porn while you two are having sex. She will think you are just being horny. You never know what she may say,\" I told him.\n\n\"Maybe.\"\n\nDawn was going nicely on Bill as we both watched. She sped up and started moaning as she sucked.\n\n\"Oh, god...\" came from Bill.\n\nDawn started deep throating him again.\n\n\"Ohhhh! Ahhhh!\" Came from Bill and I watched as he shoved his cock into Dawn's mouth and came. \"Ahhh!\"\n\n\"Emmm!! \" Came from Dawn as she finished him off.\n\n\"Jeez.\"\n\nDawn slid her mouth off and looked up at Bill.\n\n\"Oh, that was good,\" Bill said.\n\n\"That was just a quickie,\" Dawn told him and stood. \"When I have time, I can do that for an hour.\"\n\n\"Damn, you two. You are both nuts.\"\n\n\"Bill, you would be okay watching your wife do that to my husband, wouldn't you?\" Dawn said as she stroked his cock.\n\n\"I don't know. I'm really not sure about letting her be fucked by another guy. I don't know if I could do another woman while she or someone else watched.\"\n\n\"Give me a minute, and I will get this thing hard again, and you can do me,\" Dawn said.\n\n\"Here!\"\n\n\"Come on Bill, I'll get on your desk, and you fuck me,\" Dawn said.\n\n\"Oh...uh, let's stop a minute. I'm not sure about this. I would need to talk to Lucy about it first.\"\n\n\"I can understand that. James and I talked a lot about it before he watched me get fucked the first time,\" Dawn said.\n\nBill was horny and frustrated as he looked at Dawn."
    ],
    "authorname": "drmac100",
    "tags": [
        "lottery",
        "redheads",
        "james",
        "sam",
        "amy"
    ],
    "category": "Novels and Novellas",
    "url": "https://www.literotica.com/s/life-after-the-lottery-ch-57"
}
{
    "title": "Aprons For Gayle Ch. 11",
    "pages": [
        "AUTHOR'S NOTE: This chapter is longer than my others, done just because there was such a long wait for the previous chapter. Thanks for your comments and votes. They are really appreciated.\n\nAnd thanks to my editor, Scooter!! \n\n*\n\nSATURDAY, AUGUST 10th, 2013\n\n\"Gayle, get up NOW!\" Hamish hollered for the third time from his bedroom as he dressed for the day. \"You've still got to load the basket with food and--\"\n\n\"Sir?! Why are you yelling at me?\" Gayle asked as she walked into his bedroom carrying a tray with two cups of coffee, which she placed on the table in front of the couch. \"I've been up for half an hour.\"\n\nHe was just reaching for his t-shirt on his bed when he turned to face her, pulling the t-shirt over his head. \"I thought I heard you answer. Ah,\" he said when he saw the coffee. \"Give a man a coffee and you win smartie points.\" He chuckled, grabbed a mug and took a sip.\n\n\"What do you want me to wear today, since you won't tell me where we're going?\"\n\n\"I'll find you a t-shirt, and your jeans will be fine but sans your briefs. You won't need them.\" He went to his closet and came back with her notebook and Stephen King's 'It.' \"It's officially Saturday.\"\n\nShe smiled, took them then took a much-needed sip. \"Thanks, Sir. I never did thank you for giving me my picture back the other day. I need to get started on writing, and I have a week to catch up on it. May I start when we get back?\"\n\n\"Of course. I have some work to do so that'll be fine.\"\n\n\"Um, I don't remember going to my bedroom last night. You didn't carry me, did you?\"\n\n\"I did. You must have been quite knackered. You only muttered something when I covered you.\" He retrieved a t-shirt with 'THE WHO' on front which appeared to be thirty years old then handed it to her.\n\n\"Thanks,\" she said as she took it. \"Are you going to want breakfast?\"\n\n\"Maybe just some cereal and fruit. They're forecasting storms this afternoon so we'll eat lunch early so we're back in time. Let me see your hand.\"\n\nShe showed him her palm, which was still a little pink but no longer blistered. \"It doesn't itch anymore. Maybe I landed in a little sprig of the nettles. My blood pressure is normal, too, nothing compared to yesterday after I finished cooking. I wasn't surprised it was so high, considering the ...\"\n\n\"I'm glad to hear that. I'll let Jack know.\"\n\n\"Well, I'm going to take a bath. When do you want to leave?\"\n\n\"Whenever you're ready.\"\n\n------------------------------\n\n\"Yeah, her blood pressure is normal, she says, and her palm does look better.\"\n\nHamish was on the phone with Jack updating him on Gayle's condition while Gayle cleaned the dishes and put them away. She listened in carefully, why she didn't know. Yes, they were talking about her, but she hoped to hear something nice from her boss.\n\n\"Golf next weekend, mate, Sunday? I feel like kicking your ass again ... Sod off. I can't convince you it was skill and not luck ... Great, actually. Just waiting on Ms. Boyce to get her ass moving. We're going to ... ah, it's a surprise.\" \n\nGayle had whipped her head around hoping to hear where they were going. Finally finishing the clean-up, she put the picnic basket on the table where Hamish was sitting. One side had the plates, silverware and cloth napkins, while the other side was for the food. She then pulled out the food in storage containers from the fridge and set them on the table.\n\nWOOOOOFFF! Bessie barked, obviously smelling the chicken and thinking she'd get some.\n\n\"Nope, sorry, poochers. This is people food,\" she whispered. \"I won't forget your nibbles.\"\n\nLeaning forward while he listened to Jack, he opened the small one and popped a deviled egg in his mouth. Gayle looked at him disapprovingly as he chewed, not caring how disgusting it was. But then she couldn't help but grin. \n\n\"No, no. It's all planned. She doesn't know about it yet, though.\" He licked his fingers, staring her down, daring her to say anything. \"Thought I'd tell her the day before. She loves surprises.\" \n\n\"Ew. I don't like surprises while watching you talk and chew at the same time,\" she whispered, but made sure he could hear her. She gave him a sly grin before she grabbed two water bottles.\n\nA few minutes later the basket was neatly packed with the fried chicken, potato salad, eggs and biscuits, all her mother's recipes. She was excited but nervous about him eating it. Well, he'd eat it, she knew, but didn't know if he'd like it.\n\n\"Oh, yes. She is still quite mouthy and testing my patience waiting for her to finish packing.\" Giving her a dirty look, he grinned, his eyes playful. \n\nShe gave him a quirky smile before she retrieved Bessie's food and her bowl then put them on the top. He was just finishing up the phone call when she locked the basket.\n\n\"Right. Sunday it is. Go ahead and have the flyers printed as is ... Will do. Laters.\" He put the phone in the front pocket of his jeans. \"Are you quite ready now?\" he huffed, all of his patience seemingly exhausted.\n\n\"Yes, with the packing. I just need to go upstairs to do something.\"\n\nHe sighed heavily and put the basket by the door. \"You have five minutes.\"\n\n\"Well, it might take me ten,\" she told him, her cheeks flushed.\n\n\"You have seven.\"\n\n\"I'll need fifteen now. You can't rush a good clitty rub.\" That caught his attention, but before he could say anything she smiled before adding, \"Only joking. One can't rush mother nature, boss.\"\n\n\"Bloody hell. That was more information than I needed.\"\n\nGiving him a cutsy smile, she said, \"Hey, it wasn't my fault. You wouldn't leave it alone. I'll be back before you know it.\"\n\nHamish sighed. He knew when he was beaten. \"Ok, but be quick about it.\"\n\nFinally, Hamish, Gayle and Bessie walked toward an SUV that she hadn't seen before. It was a Range Rover Vogue in metallic green, its paintwork glistening in the early morning sun. She wondered if a step ladder was included so she could climb on board.\n\nShe looked at Hamish and back to the luxury car again. \"Do you know that this gas guzzler is responsible for destroying half the Amazon rain forest? I read an article about it that says it only does twenty miles to the gallon.\"\n\n\"Absolutely right, and that's downhill with a following wind. Now do you want to go out today or not?\"\n\nGayle decided that discretion was the better part of valour and keeping her mouth firmly shut was the best way forward.\n\nOnce they were on the road, Gayle's nose was glued to the door window once again. They'd only been driving fifteen minutes and the scenery hardly changed at all from the green farm land.\n\n\"Ugh, more fields,\" she muttered.\n\nWOOOOOOOFFF! Bessie gave her two cents worth as she went from window to window in the boot.\n\n\"Bessie knows where we're going. Look,\" Hamish said, pointing to a sign.\n\n\"I don't speak Doggish, Sir,\" she teased before she saw the sign.\n\n'WELCOME TO TENTSMUIR FOREST'\n\n\"Forest? There are a few trees up ahead and it's a forest?!\" she exclaimed.\n\nHe laughed. \"You've seen nothing yet.\"\n\nA few minutes later the road was engulfed with tall, thin trees lining most of the way with an occasional field with cattle and sheep beyond them.\n\n\"Okay,\" she noted, \"There are more than two trees so I guess that's what y'all call a forest.\"\n\nHe tsk'd and shook his head. \"Oh, ye of little faith.\"\n\n\"Yep.\"\n\nAnd he was right. By the time they'd come to the parking lot the trees had definitely morphed into a full blown forest with a large man-made clearing filled with parking spaces. Dotted around the area were about a dozen picnic benches, about half of which were being used by couples and families.\n\nHamish parked next to an unoccupied table and killed the engine. As Gayle got out of the Rover, she exclaimed excitedly, \"Oh, my god! I can hear the ocean!\"\n\nHamish had just let Bessie out of the back door, and they met her on the other side. Giving her the leash, he said, \"No. Sorry. It's just the wind blowing through the trees.\"\n\nShe instantly deflated, even though she could have sworn she smelled the salty waters. \"Well, crap.\"\n\nHe chuckled then got out a light jacket and handed it to her. \"Just in case you need it. We have a short, leisurely walk then we'll come back and eat your lovely grub in the picnic area.\"\n\nShe nodded and Bessie led them on the narrow path through the trees that became denser still, and with the arrival of the plush greenery, the reddish-purple marsh orchids and yellow Bird's-foot-trefoils, every care she had in the world was gone.\n\n\"Hey!\" she said as she pointed to some berries set deeper among the trees. \"Are those blueberries?!\"\n\n\"Yes, though we call them sloes. We use them to make sloe gin via a recipe which is passed down through the generations, a tradition, if you will. They're harvested in October or November around the time of the first frost, mixed in a concoction of other secret ingredients in a demi-john and left until it's ready to drink three months later.\"\n\n\"Okay, I know gin is alcohol, but from blueberries?!\"\n\n\"Oh, yes. Potent stuff, it is too. The local community has an annual tasting competition with a prize for the best.\"\n\n\"I don't like gin, I don't think.\"\n\n\"Have you ever tried it?\"\n\nShe laughed. \"Well, um, no. But Dad told me to try everything I don't normally eat at home while I'm here because I don't know when or if I'll be back.\"\n\n\"Good advice. I'll have you try some later.\"\n\n\"Oh, no. You just want to see me drunk.\"\n\n\"Damn. You're catching on fast, aren't you?\" \n\nShe suddenly took in a sharp, deep breath after smelling the salty waters of a beach again and realized it wasn't just the wind that sounded like an ocean. But she decided not to say anything, though she allowed herself to believe it was indeed a beach.\n\nFurther down the trail, Bessie suddenly lurched forward on her leash and started barking at the low sand dune that lay before them. A sign declaring:\n\n'KINSHALDY BEACH'\n\n\"Well, would you look at this!\" Hamish exclaimed with a sly grin. \"It appears we've hit the end of the road! Whatever shall we do now?\" he said sarcastically and too dramatically.\n\nGayle looked at him wide-mouthed and narrowed her eyes at him playfully. \"You lied!\" she cried out then laughed. \"You had me thinking I was going insane or something.\"\n\n\"Oh, but you are, lass, after those damned giggles you had last night.\"\n\nShe smartly ignored his comment as they stepped over the dune to the sprawling, wide beach. There were a few thick tree branches scattered about, as if a storm had blown in and brought the trees out to play. About ten feet away were little pink crabs peeking their tiny, little eyes out looking for predators, aka a canine named Bessie, who pulled like a freight train to be free to chase after them.\n\n\"Alright, alright. You'd think you'd have learned your lesson that you'd never catch one.\" He detached the leash and she tore off, pouncing on the small holes and barking enthusiastically.\n\nThe movement from above and in front of them drew Gayle's attention to the birds, which were quite small white birds with black on the back of the head and a long, yellow duckbill. They were outnumbered by the seagulls, squawking loudly and flying gracefully.\n\nAs she looked out toward the waves, which appeared to be not too dangerous and definitely perfect for wave diving, she heard herself say, \"Huh. Even the waves sound different here.\"\n\nAs they walked towards the shore there were more crab holes that she had to walk around, though she still stepped on more than she wanted to. She squealed a few times which made Hamish shake his head unbelievingly.\n\n\"Ms. Boyce, please explain to me how the hell any ocean can sound different crashing to the shore?\"\n\n\"Oh, um, I didn't mean to say that out loud. Granny swore even the birds chirped differently on their travels. Grandad thought she was insane, too.\"\n\n\"So, it does run in the family,\" he teased.\n\n\"I would disagree with you but I have no valid argument. One rainy day the TV guide got wet -- they had staples in the middle back then. So she put it in the microwave and turned it on to dry it. Let's just say the sparks flew, literally.\" She chuckled and side-stepped squashing a little crab.\n\n\"She didn't!\" he asked, aghast.\n\n\"I'm afraid so. THEN what does she do?! She puts in an odor eliminating candle.\"\n\n\"Lit?\"\n\n\"Oh, yes. Burned a nice sized hole right in the middle.\"\n\n\"Jings! What did your grandfather do?\" \n\nBessie came running back to the pair with a stick in her mouth, her tail swishing crazily back and forth. Hamish took it and threw it to the water's edge, and Gayle was amazed the dog wasn't even afraid of the water.\n\nShe continued her story. \"He banned Granny from buying a new one for two years.\" He laughed boisterously. \"The thing is she purposely burned dinner or messed up his grits until he got so fed up it forced him to buy one.\"\n\nThey laughed for a moment. \"So that's where you get your sassiness from?\"\n\n\"Most definitely.\"\n\nShe didn't know why, but she appreciated that he was a good listener. It had been a while since she'd talked about her grandparents and doing so now was comforting. The main point was that it made her feel like he cared about her, not that she was just a maid.\n\nWhen they got to the water's edge, Gayle looked up and down the beach, surprised there weren't tons of bathers lounging on beach chairs or even children screaming and laughing as they played in the water. There were many couples walking their dogs and a few families making sand castles, but that was it. Regardless, the sky was a beautiful blue with white puffy clouds, and the wind was pretty strong; she was relieved she'd put her hair back in a ponytail.\n\nAfter Bessie brought the stick to her master several times, Hamish said, \"Watch this.\" He threw the dog toy about ten feet into the ocean. She went in after it with no fear of drowning, took it in her mouth and came back out, shaking the water off of her.\n\n\"Ah! Bessie!\" Gayle screamed to avoid the wet drops spraying the front of her t-shirt, but it didn't help.\n\n\"Oh, you wuss! You get a little wet and you ...\" He suddenly clammed up when he saw her erect nipples poking through the wet material; although it wasn't completely drenched, it was wet enough to clearly define the obvious arousal, and his mouth went dry. Fuck, they're sticking out like chapel hat pegs was the accompanying thought.\n\n\"What?\" she asked curiously.\n\n\"You need to take off that shirt, Ms. Boyce. You'll catch your death of cold.\"\n\n\"Haha,\" she chuffed, ignoring his order thinking he wasn't serious. \"Hey, stay still, please, Sir.\"\n\nGayle put her hand on his forearm, bent at the waist and removed her sneakers before taking off the other. When she saw Hamish's hand out, she handed them to him. \"Thanks.\"\n\nTaking a few steps down the beach, he stopped her with his strong hand on her shoulder. \"Ms. Boyce, I told you to take off your t-shirt,\" he said sternly.\n\nGasping, she put her hands firmly on her hips and shook her head. \"Sir, I will take a million whoopings with the paddle, but I will NOT walk around here naked!\"\n\nHe laughed. \"Didn't you notice the sign on the board that this is a clothing optional beach?\"\n\n\"No I didn't, but I'm not surprised at all you brought me to a nudie beach.\"\n\n\"Soooooo,\" he egged her on. \"Why don't you give it a go?\"\n\n\"Nope. My ass be damned, but no.\"\n\n\"Ms. Boyce, do you know when the next time you'll be here in Scotland? You may never have this chance again.\"\n\n\"For your information,\" she said, picking up Bessie's stick and throwing it away from the water and starting to walk again, \"I have been at a nudie beach before and did go into the water. So it's really not a big deal. My titties hurt like hell from being knocked about so roughly by the waves.\"\n\n\"Oh, come on. The water is nice and warm.\"\n\n\"Then why aren't other people in it?\"\n\n\"Well, shyte.\" He deflated, knowing he'd been sussed, and he wasn't sure how he felt about that.\n\nA few minutes later his words kept going through her head. He was right: she knew she'd never be back to Scotland, much less back to the beach.\n\n\"Sir, I'll make a deal with you.\" She slowed her steps and looked at him bravely then took a deep breath. \"If we see someone else with no clothes on then I will. Is that fair?\"\n\n\"No, it's not. But I'll accept your condition.\"\n\n\"Oh, that is so kind of you,\" she teased. \n\nBessie went chasing after a seagull that had landed a few feet away and had rapidly taken off again as the dog approached. Gayle yelled at the dog, but she kept on running. \"Let her be. She'll never catch it.\"\n\nFor several minutes they walked in silence, seemingly both in their own thoughts. Hamish was thinking how peaceful and relaxing it was walking the dog after a hard week's work. He loved these quiet periods where he could unwind, and this time he appreciated the company.\n\nGayle was also remembering the times she'd walked the beach on their family vacations, the only time she really had to herself. Shortly after she'd broken up with her ex she wrote off men altogether, knowing there wasn't the perfect man out there for her. The other times she wracked her brain to find the meaning of life. She was never successful.\n\nBessie came running toward them with something in her mouth, but to Gayle it definitely wasn't a stick. It did move, but it wasn't a fish; it was too white. White and black ... \"Oh, my god! She got a seagull!\" Gayle screamed and ran toward her. \"Give here, girl.\"\n\n\"I'll be damned! Good girl!\" Hamish said proudly.\n\nGayle gave him a sharp look before Bessie realized she was outnumbered and dropped the bird. It flopped and squawked, jumping a few feet away. Bessie barked and went after it, but this time when Gayle hollered at her she obeyed. Hamish simply laughed.\n\n\"Sir! This is so not funny!\" she chastised him as she bent over to get a closer look. \"It doesn't look hurt.\"\n\n\"Don't get too close, lass. They carry tons of diseases and are vicious as hell,\" he warned.\n\n\"Oh,\" she said as she stood and watched the bird carefully. \"And it's okay for your dog to kill one?\"\n\n\"Watch it, Ms. Boyce. Labs are retrievers and it is their natural instinct to seek out game and birds ...\"\n\n\"I know, I know. Sorry, Sir. Really. I'm more pissed at --\"\n\nShe screamed in surprise when the seagull suddenly spread its wings and took off into the sky. \"Oh, thank god.\" Looking down at Bessie, who was sitting on her hind legs and wagging her tail proudly, she told her, \"You are getting no doggie treat when we get home.\"\n\nStarting to walk again, Hamish bent down and patted Bessie's head. \"No worries, pal. I'll give you one.\" \n\n\"You spoil her,\" Gayle said, though she was no longer angry at the dog. \"But hey, I guess I would too. She does keep me company.\"\n\nThey had been walking for about thirty minutes, and Gayle had been telling Hamish about the times her family had gone to the beach. Again, she felt as ease talking to him, but what she noticed was that he hadn't said anything about his family. She remembered his mother had died in childbirth, and he'd just had his father and brother. Being naturally curious she wanted to ask him about his family but she didn't dare. She was having too much fun.\n\nAs she talked, she'd been looking at him the whole time, so when she saw movement from the corner of her eye she turned to see what it was. A man and woman, both completely naked, were walking toward them as if there wasn't a damned thing wrong. Well, it wasn't wrong, but the fact that his flaccid penis was not only half way down to his knees but was as thick as her wrist was a shock to her. She thanked all her gods that Hamish wasn't hung like this proverbial horse. The woman's breasts were clearly fake -- she had never seen titties so hard and full that they hardly moved with each step. She was surprised the poor woman wasn't walking bow-legged after being shagged with that monster cock.",
        "She couldn't stop the image of having Hamish take her from behind while she had that stranger's cock in her mouth ... not that she'd ever have the opportunity, or really wanted to, either. Giggling, she shook her head at that horrible thought.\n\nAfter they walked by, Hamish asked, \"What are you giggling at? Didn't you know a man's cock comes in different shapes, sizes and colors?\" he teased, digging his shoulder into hers.\n\n\"Sir, I will not justify that remark with an answer.\" Then she burst out laughing. \"But damn! Can you imagine that poor woman when they have sex?!\"\n\nHe joined in her revelry then stopped in his tracks. \"Sir? What's wrong?\" she asked.\n\n\"Now's your chance.\"\n\n\"What?! With that man?! I would never --\" \n\nHe laughed again. \"You promised you'd undress if you saw another person naked.\"\n\n\"I was delusional. It doesn't count.\" She chuckled.\n\nStill, the deep throaty tone of his voice let her know he wasn't kidding, but she couldn't bring herself to do it. She stood stock still and just stared at him, stomach lurching. Realizing she was frozen to the spot, he took it upon himself to do it for her. Stepping toward her, leaving barely two inches between them, he gazed lustfully into her eyes then put his hands on the hem of the t-shirt and pulled it up and off. She squealed, lifted her hands to cover her breasts, but he pulled them to her side. \n\nSighing heavily, trying to hide a sheepish grin, she quickly took off her jeans, looked around briefly then ran dead-on into the water, diving into an oncoming wave. Bessie barked and went in after her. \n\nGayle had never felt water as cold as this, even in the mountains in the fall when the family went camping and they'd wash their hair in the stream. Her breath was completely taken away, and she swore her heart stopping beating altogether. Breaking the surface, she ran out faster than she had jumped in.\n\n\"AH!! HOLY FUUUU ... OH! MY! GOD!!\" she screamed as she turned and headed toward Hamish, who was laughing hysterically. \"What the hell are YOU laughing at?!\" she bellowed while wrapping her arms around herself tightly and shivering violently. \"Why did you make me go in the water?!\" \n\n\"Ms. Boyce!\" he replied in between gasps of air. \"I don't recall ... ever telling you ... to do that. In fact, I remember it was you who said she wanted to go paddling in every ocean. Here.\" He handed her her t-shirt. \"I'm afraid I don't have a towel.\" Although he tried to stop laughing, he continued to chuckle.\n\nWith her teeth clattering, she put the shirt on then, stuttered, \"If I catch pneumonia I'm going to come back and haunt your ass!\" He offered her his jacket which she gratefully accepted, but it only just covered her bum and the top of her upper thighs. Neither garment, though, was enough to stop her uncontrolled shivering and chattering teeth. She squeezed the water out of her ponytail, huffing constantly.\n\n\"I'll leave some tea out for you in that case. Come on. I do have a blanket in the Rover.\"\n\nWalking for a few more minutes, her legs were dry enough to put on her jeans, which she did, though her body was still numb. They head back to the picnic area and got the table they'd parked by and settled in to eat lunch, even though it was only 11:30. \n\nHamish raved over the potato salad and had three pieces of the fried chicken. \"I must say everything is delicious, Gayle. Thank you for feeding me.\"\n\nLaughing, she said, \"You're welcome. I wished I'd thought of dessert.\"\n\n\"No worries. As well as the chocolates I bought a strawberry cheesecake.\" \n\n\"That sounds great.\" The few moments of silence they'd shared on the beach gave her time to think about what Hamish had said a few times. \"Sir? You've mentioned more than once the pain/pleasure aspect of D/s. I've found it's ... it's not erotic in the least. I don't understand the whole concept of that.\"\n\n\"Well, you got ... excited when I was paddling you, correct?\"\n\n\"Yes, but I have no freaking idea why.\"\n\n\"Was your mind focused more on the the pain or how it felt afterwards?\"\n\n\"The pain, at first. But then ... it was like it went farther. Either my ass was just numb or ...\" She chuckled. \"I knew it was coming but yet ... Hell. I'm not even making any sense.\"\n\n\"Yes you are. You just don't realize it. The best way I can explain it is that you pushed yourself to allow the pain but it turned into something that you felt deeper inside you. Permitting yourself to feel that is good, great, actually. It's just the first step.\"\n\n\"Sir, that makes no more sense than what I said.\"\n\n\"It will. The fact that you were wet tells me you enjoyed it; it turned pleasurable. Gayle, I know you are young and new to being a submissive, but one aspect of D/s that I enjoy is seeing a woman grow, hearing what she discovers about herself that she had no concept even existed.\"\n\nHe leaned forward and tapped his forefinger on her forehead. \"If I can get in here ...\" He trailed his finger down her cheek, chin, neck then to her collarbone, \"... then I can control this.\" She looked at him confused. \"Your body, Gayle. If I get inside that pretty little head of yours then your body will follow.\" Leaning back, he asked, \"Now, does that make sense?\"\n\nIt did make some sense to her, but her body was something she was holding onto. Why? What exactly was she afraid of? That she would hate it? Like it? That she would want more?\n\nA distant, low rumble echoed throughout the forest. Bessie stood up like a shot and danced around Hamish's feet nervously; her tail wagged feverishly. Gayle looked up through the branches and saw no more sunlight. Clouds were rolling in, some white and billowy, others dark and dangerous. She nervously twitched on the bench and looked around as if some hungry monster would come out and attack her.\n\nThen she burst out laughing at her silliness. \"Myths of ghosts and leprechauns here are giving me the willies. That was quick to spring up! I have to warn you I get hyper during thunderstorms.\"\n\nHis eyebrow rose curiously. \"Then I shall have to tie you down to keep you from destroying my home. I'll then have my wicked way with you.\"\n\n\"Why do men have such one track minds? It's just boobage and sex.\" She had to laugh because she was enjoying their playful banter.\n\n\"And steak. You forgot steak.\"\n\n\"No whisky? The world must be ending!\" She laughed and started to clean up. \"And that was a lovely ending to a great day,\" she said sarcastically.\n\n\"The day is still young. Whatever shall we do for the rest of it?\"\n\n\"You have work and I have about three hours writing in my diary. Maybe we could watch a movie tonight? Or play some board games? Do you have Scrabble?\" \n\n\"How boring! We could play in the dungeon. What do you say?\"\n\n\"I say no. Can you help me carry the basket to the truck?\"\n\n\"What do you mean truck! The Rover is a top end luxury vehicle, not a truck.\"\n\n\"Sorry, the gas guzzler, then.\"\n\n\"And Ms. Boyce, we have no leprechauns in Scotland. We kicked them all out during the time of King Arthur and banished them to Ireland.\"\n\n\"Oh, lord. Remind me not to ask you to read me a bedtime story.\"\n\nTaking the basket, he put it in the back and told Bessie to jump aboard. Turning to Gayle, he said, \"Speaking of which, I've not had my Spankers Weekly delivered from the newsagents yet. Are you holding onto that?\"\n\nShe laughed and shook her head. \"Ew. Of course not.\"\n\nHe opened the passenger door for Gayle. \"Now would you get in so we can beat the rain?\"\n\nShe smiled and got in, looking at him as he closed the door and walked around to the driver's side. Although she had a million more questions to ask about D/s, she decided there was plenty of time to discuss it as they went along. Besides, she was afraid it would scare her too much to even try other scenes.\n\nFive minutes before they reached the house it was pouring buckets, though the lightning was still miles away . \"Well, crap,\" she muttered as he pulled into the closest spot he could to the side door leading to the kitchen and cut the engine.\n\n\"We'll leave the basket here for now, since I finished it all.\" He chuckled. \"On the count of three. One.\" They put their hands on the door handle. \"Two.\" They both took a deep breath. \"Three.\"\n\nGayle ran to the door and waited to go in while Hamish got Bessie out. All three were drenched when they stepped into the mud room. The dog shook off the water as the two humans wiped the rain off of themselves. \n\n\"Go ahead and undress. We'll throw the clothes in the dryer,\" Hamish told her as he took off his t-shirt.\n\n'Get undressed' was becoming a normal statement from him, but again she had gotten so used to it that she never thought twice anymore. \n\n\"I'm going to need to wash these as they're full of salt water, and I need a bath. I've got sand in places where sand just shouldn't be allowed.\"\n\nHamish laughed as he took off his jeans and put them on the dryer. \"That I can relate to, lass. Try having sand under your threeskin. Fucking sore it is too. And leave your clothes here. I'll do them while you bathe.\"\n\nShe laughed heartily at his comment. \"Sir, I'd be more concerned about HAVING a penis than having sand in one. And you do laundry? Who would have thunk?\" she teased.\n\nHe laughed as she removed his jacket, handed it to him then removed her t-shirt. Unbuttoning and slipping her jeans down, she noticed how pointy hard her nipples were. She had no idea nipples could get goose bumps as well.\n\n\"I'll get a fire going in my library while you write. Would you like that?\"\n\nShe nodded and smiled. \"I would. Thanks, Sir.\"\n\n\"As much as I would love to warm you up, go on upstairs. I'll make coffee for us.\"\n\nWhile she sat in the hot, steamy tub, she realized she never thanked him for the day. And he was being so kind and fun. \"Fun? I never saw anything fun in him when I first met him,\" she said to an empty room. \"And why are you being so nice? What haven't you told me yet?\"\n\nShe hadn't heard the knock on the door but definitely heard Hamish say, \"I haven't told you about Guy Fawkes Day, and I won't.\" Looking down on her, she saw he was already dressed in his lounge pants and sweatshirt. \"And unlike the rumors, I can be quite fun ... when I want to be. And I am just a nice guy.\"\n\nShe wanted to die from embarrassment and dunk her head under the water. \"Don't I get any privacy at all?\"\n\n\"Sure you do. But I wanted to know if you were in the mood for steak and tatties. I've got to take the meat out of the freezer.\"\n\n\"Oh. Yeah, that sounds good.\" They stared at the other for several awkward moments. \"Um, is there anything else?\"\n\nHe shrugged his shoulders. \"No.\"\n\nThey continued to play the staring game. \"Sir? I won't take long.\"\n\n\"Alright. But who's not fun now?\"\n\n\"Ha. Ha. Sir? Is it okay if I wear my skirt and blouse? I'm still chilled.\"\n\n\"Of course. Anything else, your highness?\"\n\n\"No, your highness-er. I'll be down in a few.\"\n\n\"Oh, I feel sooo much better,\" Gayle announced as she walked into Hamish's study. Bessie met her at the door and followed her to his desk.\n\nHe jumped and gave her a sharp look. \"Woman! I could have been doing brain surgery!\"\n\n\"Then you just killed your patient.\" She laughed, as did he. \"I'll leave you alone.\" Turning to the fire, she was grateful he'd put one of his chairs in front of it but facing sideways so he could see her. \"Lovely! Heat for a change!\"\n\n\"Ms. Boyce, I can always send you to the dungeon You remember how cold it is down there.\" He was clearly teasing her based on his playful tone.\n\nSitting down, she replied, \"'Nuf said, Sir. When do I get my allowance? I can buy anything I want, right?\"\n\n\"Yes. But 50 pounds won't get you much.\"\n\n\"That's okay. I think, I'll get a nice, plush robe first then a camera to send Dad and Catelyn some pictures.\"\n\n\"Your afternoon off is next week, I think Wednesday's would be good.\" \n\nShe nodded. \"Sir, that would make two weeks allowance then, wouldn't it?\"\n\n\"Not quite, but I won't split hairs over a couple of days. \u00a3100 it is.\"\n\n\"Thanks. I should be able to get both then.\"\n\n\"Gayle, I've been meaning to ask you something. Would you like me to teach you to drive tomorrow? That way you can go by yourself and Hodges won't have to take you.\"\n\nShe never even thought of having that much freedom. \"Sure, but do you think you could drive first and explain everything? Your roundabouts scare me.\" She laughed. \"And I hope you have lots of car insurance.\"\n\n\"Now I wouldn't have offered if I didn't. It's a date, then.\"\n\n\"What the heck is wrong with you?!\" she wondered to herself. Stop being so damned nice! You're not the normal Hamish in your natural habitat. What are you after she wondered yet again?\n\nWriting in her diary took longer than she expected. Her fingers were starting to hurt when she thankfully finished. She was so wrapped up in trying to remember the week that she hadn't remembered hearing a word from Hamish. Then she noticed Bessie sitting on her doggie bed beside her chair, all four legs jerking and kicking, her nose twitching like she was smelling something. \n\nGayle laughed, bent over and rubbed her head. \"Hey, girl. Are you having a dogmare?\"\n\nA bright bolt of lightning filled the room immediately followed by a loud, reverberating rumble of thunder. \"How long has it been storming, Sir? I haven't heard a thing.\"\n\n\"It just started. Been raining heavily ever since we got home, though. And Bessie is dreaming about hot, naughty doggie sex with Scooby-Doo.\"\n\nGayle burst out laughing which woke Bessie right up. \"That was good! Is that right?\" she asked the dog. \"Rut Roh?\" She paused a second. \"Rin Tin Tin? He is a much smarter choice. Sir, what time is it?\"\n\n\"Almost five. Are you hungry yet?\" he asked, stretching and yawning in his chair. \n\n\"Not really. Are my clothes done yet?\"\n\nHe nodded and approached her. \"Folded and put in your room already.\"\n\n\"Damn. I didn't even hear you leave. Thank you. But if you left and I didn't even know ... You were looking over my shoulder while I was writing, weren't you?\" she teased playfully.\n\n\"Que? Moi?\" he asked innocently.\n\n\"Oui. Vous, senor.\" She laughed. \"I just love mixing French with Spanish. In secondary school I took four months of French and three months of Spanish. I still get my numbers mixed up, as well.\"\n\n\"Well, try using neither. And of course I didn't sneak a peek. I might have been sneaking a peek at something else, though.\" \n\n\"You did not!!\"\n\n\"No, I didn't. Anyway, I was just about to finish my own book when my crayons ran out. Can I borrow yours?\"\n\nShe laughed. \"I only have purple left. And don't worry. I've found plenty of hiding places for my book. Hey, do you have any good movies we can watch before dinner?\"\n\nHe offered her his hand and helped her up. \"I just got 'Delilah Does Durham' that I've been dying to see.\"\n\n\"Sir? I meant a real movie,\" she snickered.\n\n\"Oh. I don't have any of those.\"\n\n\"Well, find one, please.\"\n\nA few minutes later, Gayle was lying on the couch waiting for Hamish to put in the DVD, still having not a clue what the movie was. After he pressed play, he went to her. \"Scoot.\"\n\n\"Oh, sorry. I thought you'd sit in your chair.\"\n\nSitting up, she sat at the end, looking at him confused because he laid down and stretched his legs, planting his feet firmly in her lap. \"Well, don't just sit there. Come lie with me.\"\n\nShe hesitated a moment. \"Sir, are you sure?\"\n\n\"Yes. Why wouldn't I be?\"\n\n\"Fine, but you'll keep your hands to yourself, right?\"\n\n\"Now that I can't promise you.\"\n\nShe narrowed her eyes at him before she laid down beside him, keeping as close to the edge as she could get. \"Oh, no,\" he fussed, wrapped his arm around her waist and pulled her flush against him, not removing his arm. \"Now this is better. Are you comfortable?\"\n\nTruthfully she was very comfortable being cuddled, even though he was her boss. Once her head was cradled in the crook of his arm, her bum just above his crotch -- their bodies fitting together perfectly -- she moved her left hand up toward her shoulder but found his forearm. At first she jerked it away, but then a second later held onto it loosely. \n\nShe liked the security he provided, especially with the constant thunder and flashes of lightning still raging outside. One thing surprised her, though: Her normal hyperness during thunderstorms was quelled being in his arms. She had no idea why, but she didn't care. It was nice. A little too nice. Her libido suddenly woke up and she fought to keep it away. \n\n\"I guess so. Um, Sir?\" she started, turned her head slightly and smiled warmly at him. \"I've had a really great day today, well, minus the seagull fiasco. Thank you.\"\n\nHe gave her a quick kiss, though she regretted him pulling away. Her brain was on major relax mode, and she blamed that for the kiss. This particular kiss was the first time it felt different ... felt right and natural, and it felt nice.\n\nHe replied, \"As did I. And for me, personally, the seagull was the highlight.\"\n\n\"Only a man would say that,\" she grinned.\n\n\"Who said I wasn't a man?!\"\n\n\"Oh, those rumors. You know how those go.\"\n\nHe chuckled. \"Hush. The movie is starting.\"\n\nAs they settled in, the background music came on, but she didn't recognize the movie. When the name Tom Cruise popped up, she exclaimed, \"Oh! Cocktail! I haven't seen this in years!\" But immediately afterwards came the name Kelly McGillis. \"Wait. This isn't --\"\n\n\"'Top Gun?' Yes, it is. Did you expect anything less from a macho he man like myself? I've also got 'Those Magnificent Men in their Flying Machines' and 'The Dambusters.' Greatest movie of all time that one! Would you prefer one of them?\"\n\nShe chuckled. \"No thanks, but Tom is an arrogant boob.\"\n\n\"Snap. But this was pre-arrogant boob. Now shut up.\"\n\nSighing heavily, she couldn't help but smile. But she hardly paid attention to the movie. Her body was beginning to feel something she hadn't felt before, even with her ex. Sure, she'd had sex with him but there was nothing as ... intense as she was feeling at the moment. He never cuddled. Hhe simply got up, showered and left. She realized she couldn't really miss what she never had, but it actually felt incredible cuddling with someone ... a warm body only, perhaps? No, it was more than that, and though she tried to deny it, she couldn't.\n\nIf she thought she needed relief when her clit was throbbing the day he sexually teased her until she had to masturbate, it was beginning to become just as bad, if not worse. Her breasts were tingling, her ass as well, oddly enough. She didn't know what the hell was going on. It felt like she was having an internal conflict between her head and her body, and in a normal world her head would win. \n\nBut in this world, Hamishville, was it even possible she could be feeling something for him? Glancing at the clock, she figured the movie would be over by 6:30, and then she would decide if she would press the issue of having sex with him. Maybe she just needed some time to make up her mind. \n\nThe next thing she knew Hamish whispered in her ear, \"Lass, I'll give you two hours to stop doing that.\"\n\nShe turned her head and gave him a confused glare. \"Doing what, Sir?\"\n\n\"You've been caressing my arm for the past fifteen minutes. Are you trying to tell me something?\"\n\n\"Not me.\" \n\nNot me, Hamish, but I guess my body is, she heard her body scream at her.\n\n\"Hmm. Who, then, pray tell?\"\n\n\"Sorry, Sir. I didn't realize I was doing it.\" She pulled her hand under her chin, but she desperately wanted to keep the contact with him.\n\n\"I wasn't telling you that you had to stop.\"\n\nHe pressed his crotch against her, a little signal that she had affected him in such a profound way. She wanted to pull away but couldn't ... her body wouldn't allow her to.\n\n\"I think I'd better stop,\" she stuttered and looked away, as if that would take care of what she was feeling.",
        "He slid his hand to the other side of her waist and tugged slightly until she was on her back. Brushing her hair away from her temples, he gazed into her eyes as if they'd been lovers for years. She sighed and found the nerve to meet his own eyes and was sorry she did. If she thought she was in trouble before, she definitely was in trouble now. \n\n\"Don't you think you should start dinner, Sir?\" she asked, her voice quivering.\n\nHe laughed. \"Oh, little fawn. You are most precious.\"\n\n\"Most precious?\" she bellowed playfully. \"I'm not a gemstone!\"\n\nWith her left hand she pushed away from him, thinking she'd be able to sit up then stomp out of the room. But instead she ended up on the floor, flat on her back and looking up at a very amused Scot. \n\n\"Ow,\" she mumbled then she burst out laughing. \"That wasn't as graceful as I'd hoped it be.\"\n\nHe threw his head back and laughed as well, causing Bessie to come see what was going on with the crazy humans. Hamish stood at Gayle's feet and offered his hand, which she took. Pushing the skirt down, he told her, \"I think I shall call you my graceful little fawn.\"\n\n\"Sir, after that I won't even argue with you.\"\n\n\"Come on. I'll get dinner started.\"\n\nDinner was a fairly quiet affair between the two. She explained to him how different Kinshaldy was to the beaches in North Carolina and was surprised the waters were as cold as they were. He explained a little the differences between driving in the U.K. and the U.S.\n\nAnd soon enough both of their plates were empty, causing Gayle's anxiety to shoot up twenty fold. As she cleaned the dishes, Hamish sat at the table drinking a small glass of whisky, being that if what he hoped was going to happen he wanted his wits about him, not that a couple of nips would get him drunk.\n\nWhen she put the last of the dishes away, he asked her, \"So, Gayle. What shall we do now? Play Scrabble, in which I can guarantee you that I will win, or did you have something else in mind?\"\n\nHe knew exactly what she was struggling with and for very good reason. She had in her mind that having sex again after her ex would be just as bad, but he thought he had proven himself that he wouldn't hurt her. Yet here she was, not able to bring herself to ask for what she wants, desires, needs. But as he promised, it would be her decision, and he would not press the issue with her. But he never said there was anything wrong with giving her a little push. \n\nHanging the dish towel over the handle of the stove, she turned and put her hands on the counter then took a deep breath. \"Sir? Would you, um, want some company tonight?\"\n\n\"Unless you are planning on going somewhere, you already have my company.\n\n\"No. I, um, would you ... want to ... take me?\"\n\nHe frowned. \"Take you where? All the shops are closed at this hour.\"\n\nShe sighed. \"I meant do you want me to spend the night with you, you know, to keep you company,\" she repeated. She was clearly getting flustered that he wasn't taking the hint.\n\n\"I've got Bessie, but thanks for asking.\" A sly grin slowly etched his lips as he went to her and stood beside her.\n\n\"No! I mean --\" \n\n\"I know what you mean, Gayle,\" he whispered.\n\nHe suddenly wrapped his arm around her waist, he put his hand gently on her face then pulled her to him, crushing her breasts firmly against his chest. The look of shock on her face was priceless, but he could also see the look of lust in her eyes and feel the heat of her excitement.\n\nPutting his finger under her chin and tilting it up so she had to look him in his face, she growled, \"Say it, Ms. Boyce.\"\n\nShe took a deep breath. \"I was wondering if you'd want to have sex.\" Her cheeks blushed a dark crimson.\n\n\"Oh, no. I don't have sex, Ms. Boyce.\"\n\nShe furrowed her eyebrows, getting pissed off at him for playing this game at the worst possible time. Forcing herself free of his hold she blurted, \"Look! You know this is hard for me! Stop being such a dolt!\" She instantly covered her mouth, her eyes wide. \"I didn't mean to say that! I'm sorry!\"\n\nHe looked at her with mock anger, but only for a split second. Taking her hand, he said, \"As I said, I don't have sex. I make love.\"\n\nGayle practically tripped over her feet as he led her out of the kitchen and up the stairs to his bedroom. Her heart was pounding, as per usual. Her mind was reeling that this was finally happening, but she didn't turn back or stop him. \n\nWalking through the door, Hamish turned around, never let go of her hand and led her to the bed, where he leaned against it and gently drew her to him, leaving a small space between them. She stepped between his feet and put her hands behind her. He smiled, took her hands and held her fingers, gently rubbing the back of her hand with his thumb.\n\nHe asked softly, \"Gayle, is this what you want?\"\n\nShe nodded and forced herself to breath. \"Sir? May I ask that you use no blindfold, no restraints, and just ... not yet.\"\n\nHe put his forefinger over her lips to silence her. \"Lass, you've nothing to worry about. I will be gentle with you. You haven't told me much, and that was my fault. I should have quizzed you harder, but if I do anything that you aren't comfortable with, tell me. I will stop immediately. I do not wish to hurt you, Gayle.\"\n\nShe looked at him like they were only words, and that he didn't mean a word he was saying. \"I'm sorry. I'm just ... scared.\"\n\n\"Is that why you're shaking?\" \n\nShe shrugged her shoulders, and he sighed heavily, but a smile slowly crept over his lips. \"May I undress you?\" \n\n\"I think I need to let Bessie out first.\"\n\n\"Oh, no. I've got you in my bedroom, and I will not let you go so easily. She'll be sleeping by the fire in my library for hours. Now, yes or no on the undressing part?\"\n\n\"I'm used to doing it myself,\" she replied lightheartedly.\n\n\"Then it will be my honor.\"\n\nWith their eyes locked, he slowly unbuttoned her blouse to the bottom, leaving the material open just enough to see the inside curves of her breasts. He smirked when he saw her lower neck and collarbone flush into a bright red rash; the apples of her cheeks were a beautiful rosy pink. Slipping his thumbs between the blouse and her skin, he traced his fingernails back up to the collar and slowly pulled it off of her shoulders, laying it on the mattress.\n\nShe took in a sharp breath from the expression on his face. No one had looked at her like that before in such a compromising moment, not even Hamish. She felt vulnerable, exposed, and ... wanted.\n\nWithout a word, he pulled her skirt down from the bottom hem and laid it on top of the blouse, never taking his eyes off of her. He smiled warmly and pulled her into his arms, pushing her head against his collarbone before putting his arms around her; his rested in the small of her back.\n\nAt first she resisted his touch and the warmth of his body. But soon enough she found herself melting against him, her mind relaxed, and the tingling in her crotch growing. She sighed heavily and welcomed his embrace.\n\n\"How are you doing, little fawn?\"\n\nShe chuckled softly. \"I'm good, Sir. This is nice.\"\n\n\"Ah. In that case ...\"\n\nHe placed his hands firmly on her ass, he picked her up, twirled her to the bed and set her down. She squealed with surprise but laughed. In her best Donkey voice from 'Shrek,' she said, \"That was fun. Let's do that again!\"\n\nHe shook his head but smiled. \"Scootch over.\" \n\nWhen she did, he nonchalantly took off his sweatshirt and lounge pants, leaving on his boxer-briefs. Pulling down the duvet and bed sheets, he jumped onto the bed then under the covers and told her to do the same. Leaving the sheet just above her breasts, she lay on her side with her head in her hand and watched him as he, too, settled on his side facing her.\n\n\"Now, was that so bad?\" he asked.\n\n\"I don't know,\" she replied. \"We've not done anything yet.\"\n\nHe bust out laughing. \"I love your sense of humor.\"\n\nShe smiled sweetly, though the nerves were starting to get the better of her. Looking over his face, she noticed for the first time a scar under his ginger-colored beard on the left side of his chin. Tentatively reaching out, she rubbed the spot with her thumb.\n\n\"Where did you get this from, Sir?\"\n\n\"Oh. I got in a fight with a guy over a girl.\"\n\n\"And you lost,\" she replied matter of factly.\n\n\"No. I always win. You should have seen the other guy!\" He laughed.\n\nShaking her head, she suddenly realized she hadn't removed her hand from his chin, but she didn't pull her hand away. She simply continued to caress his chin. \"Your beard is so soft.\"\n\n\"I moisturize twice a day,\" he chortled. \n\nLosing her smile, she used the rest of her fingers and cupped his chin with her palm, using her fingertips to brush them over his mustache to the tops of his cheeks, his nose, his forehead. Sliding her hand to his right cheek, her thumb over his ear, she slowly yet barely massaged until it slipped down to the crook of his neck to his collarbone. \n\nHe closed his eyes briefly and smiled softly, making her stop and look at him oddly. \"What's wrong?\"\n\n\"I don't know, to be honest. This is just ... nice. I've never really ... ugh,\" she moaned and rolled over on her back.\n\n\"Gayle, don't think.\"\n\n\"I'm sorry?\"\n\n\"You're thinking too much. If you want to touch me I won't burst into flames.\" \n\nShe turned her head and looked at him. \"You might not, but I might.\"\n\nHe chuckled. \"I can assure you that you won't. Love, I get the impression you've not had really explored your sexuality, much less another man's.\"\n\nThat comment took her breath. He was right. \"Sir, having sex was mechanical, and I sure as shit didn't enjoy it. It was like I was nothing but a sack of potatoes and just waited for him to finish. The fact that you can ... get me going shocks me.\" \n\nHe took her hand and placed it on his chest, over his heart. \"Just toss all of your worries. I'm here for you, sweetie. This is your time to get over this wall you've put up around yourself. Nothing will happen unless you want it to.\"\n\nTears welled in her eyes and fell when she closed them. \"Hey, hey. None of that, either.\" He wiped her tears away with the back of his fingers. \"Look at me, Gayle.\" When she did, he said, \"Let's just cuddle. No expectations. If we do nothing more than fall to sleep in each other's arms, I'll be quite happy with that.\"\n\nShe finally smiled. \"Thank you for understanding.\"\n\n\"Now come here.\"\n\nRolling back on her side, she let him wrap his arms around her and nestled her head in the crook of his arm. He intertwined his leg with hers but then noticed her hands still clinging close to her neck. Taking her left hand, he flung it over his shoulder, and she kept it there. \n\nTo her it's what sealed their bond, not the fact that her breasts were flat against his chest. She swore she could feel his heart pounding. Taking one deep, calm breath, she whispered, \"I can't believe you're so hot.\"\n\n\"I wouldn't say hot, more like handsome.\"\n\nShe threw her head back, her mouth agape. \"I didn't mean hot as in ...\" He laughed heartily. \"You know what I meant!\" She finally laughed back then she settled against him. \n\nA few minutes later, she tilted her head back, and he met her gaze. \"Would you kiss me, Sir?\"\n\n\"Hamish.\"\n\n\"No,\" she grinned. \"I'm Gayle. You're Ham --\"\n\nShe was silenced when he pressed his lips against hers, and she definitely lost her breath. Running his hand down her shoulder to her elbow, he licked her bottom lip. Opening her mouth, she flicked her own tongue to his before licking his upper lip. Growling, he dove his tongue into her mouth and their tongues danced in unison. \n\nEvery trepidation Gayle had instantly vanished. Her hand roamed over Hamish's chest, twisting the tips of her fingers with his sparse chest hair. His cock twitched against her thigh, which made her kiss him harder and more passionately. He threw his arm over her waist to the small of her back, pushing her closer to him, though it was hardly necessary; their bodies were as close as they ever would be.\n\nBringing her foot up higher over his thigh, opening herself up to him, his erect penis slid in the crevice but didn't enter her. He could feel her wetness, and he wanted nothing more than to be inside her, but it wasn't his decision. It was hers.\n\nFor the next several minutes, their hands explored the others gently and lovingly, their lips never parting, both softly moaning and groaning in the back of their throats. If she thought his body put off a lot of heat, the sweltering heat building between them was threefold.\n\nBreathless, she pulled her head back and whispered, \"Hamish, I need you. Please.\"\n\nHe kissed her forehead. \"Are you sure?\" She nodded. \"Are you absolutely sure?\"\n\n\"Yesss,\" she purred.\n\n\"Say it,\" he cooed.\n\n\"Fuck! Stop playing that stupid --\"\n\nHer words caught in her throat when he grabbed her upper thigh, his hand grasping almost all of it and lifted it wide. At that particular angle, his cock was poking through the fly of the briefs, and he teased her pussy with the tip of it.\n\n\"What do you want?\" he asked again.\n\n\"I want you to ... fuck me. Please. Please?\"\n\nNo longer teasing her, he pushed her onto her back and swiftly removed his briefs, haphazardly throwing them to the floor. Then he got between her knees, lifted then parted her legs. Purely on raw instinct she promptly wrapped her legs around his waist and stretched her arms over her head.\n\nRubbing the tip and shaft of his dick up and down from her clit to her opening, he bent down and kissed her again before kissing down her neck to her collarbone, occasionally nibbling with his lips or making little circles with his tongue.\n\nShe moaned softly and tilted her head back biting her bottom lip. He had made her wet before but nothing like she was now. She was ready for him -- oh, so ready.\n\n\"Sir, now. Please! But slow,\" she added, a sudden sense of fear cautioning her not to be too eager.\n\n\"Relax, lass,\" he whispered as he rested his hands just under her armpits.\n\nTesting her acceptance of his now swollen and throbbing cock, he inserted just the head a few times gauging her reactions. Her face contorted but it wasn't in pain, he didn't think, or at least he hoped. \n\n\"Gayle, are you ready for more?\"\n\nYes Sir.\" she mumbled\n\n\"Louder. I want to hear you.\"\n\n\"Yes sir.\" she said louder than before.\n\n\"Louder.\"\n\n\"Yes Sir. Fuck me!\" she screamed.\n\nGayle's loud shout, however, awakened the protective instincts in her canine friend, and unbeknown to either of them Bessie padded quietly up the stairs and poked her head around the open bedroom door to check on her. Seeing she wasn't being murdered or being attacked by intruders, she settled on the rug at the bottom of the bed and assumed guard duty ... just in case.\n\n\"Don't come until I give you permission. Do you understand?\"\n\nShe nodded emphatically, keeping her eyes glued onto his. She didn't want to close them for fear of imagining it was her ex and not Hamish making love to her. But she also wanted to close her eyes to experience just exactly how good he felt inside of her.\n\n\"Yes Sir.\" \n\nTaking a deep breath, he pushed in a little more with each thrust, giving her a moment to adjust to his size before pulling almost out then going in a tad deeper each time. Her moans excited him; the slight lift of the corners of her lips told him what he needed to know: that he was doing everything right and was being gentle with her.\n\nHer breathing now shallow, he was almost fully inside when she closed her eyes and her body seemed to collapse into the mattress. Her tight pussy walls undulated against his shaft, reaching out and caressing every inch of his manhood. With her continuous steady, soft whining he knew she was ready. \n\nPulling almost out, he slowly entered her again, inch by inch, until he was fully inside of her. He closed his eyes and relished the feeling of her moist, hot cunt surrounding his cock as he slowly penetrated her gently but growing with each thrust. \n\nHer chest rose and fell as she began to pant, her toes curled, and the heels of her feet dug into his ass cheeks.\n\n\"Is this what you want?\" he asked, his own breathing becoming heavy.\n\n\"Hmmm. Yes. Yessss Sirrrr,\" she whined louder.\n\nShe never imagined anyone would be able to make her feel such heat and passion, much less this demanding, tough, sweet and gentle boss of hers.\n\nHe continued to fuck her -- all the way in before pulling out then going halfway in then to her very core. He circled his hips a few times which elicited a yelp of ecstasy from her. She could no longer control her breathing as she came closer and closer to the edge. She began to pant harder and harder, her loud whines filling the room.\n\n\"Hmmph, please let me ... come. Oh, please...oh fuck. Please!\" Tears filled her eyes as she lost herself as every pulsing nerve ending sent waves of electricity from her cunt to her toes then back again.\n\nHamish's own breathing was fast and heavy, and he groaned from the back of his throat when she tightened her PC muscles tighter around his cock. He was as close as she was, but he thrived on her screams and the power he held over her.\n\n\"No,\" he gasped. \"Hold it!\"\n\nIn one swift movement he flipped her over onto her knees. \"No. No! Not ...\"\n\n\"Shh, little fawn,\" he cooed.\n\nBracing herself on her elbows, he took a firm hold of her hips and entered her with ease. He fucked her slowly at first until soon enough he pounded into her harder, their moans and groans seemed to be in sync, and that only spurred him on.\n\n\"I ... I can't. I can't. Hold it. Please.\" Her nails dug into her palms and closed her eyes tightly, doing whatever she could to hold back her release. \"Oh, fuck! Please!\" she begged.\n\nHe felt her pussy walls begin to spasm and massage his cock. \"Fuck. Fuck. Yes. Ohhh, yes ... yes!\" he grunted between thrusts as the vinegar stroke rapidly approached. \"Hold onto to my cock! Don't. Let. Go.\"\n\n\"NOOOOOOOOOOOOO!\"\n\nHOOOOWWWLLLLLL bellowed Gayle's new bestest canine friend, Bessie, from the floor at the bottom of the bed.\n\nBreathlessly, Gayle whined loudly, \"Then. Don't. Stop. Hmmmm, yes!\"\n\n\"YYEEESSSSSSSSSSSS!\"\n\nHOOWWLLLLLLLLLLLLLLLLL\n\n\"I. Wasn't. Going to,\" he replied. \n\nWith every word he rammed his cock deeper and deeper inside her. Her upper body shook as her orgasm built and built, her lower torso completely stiff from the desperately needed release.\n\n\"PLEEAAASSSSSSSEEEEE!\" she whined at the top of her lungs.\n\n\"NOOOOOOOOOOOO!\" he screamed back.\n\nHOWWWWWLLLLLLL\n\nGiggling, Gayle screamed to her now non favourite canine, \"Bessie, will you PLEASSSEEE shut the fuck up!\"\n\nFor whatever reason, at that moment Hamish gave one long, guttural growl which warned her he was about to come. \"Come! NOWWWWW!\" he bellowed.\n\nHOWWLLLLLLLLLLLLLLLLLLLLLLL Bessie called to the ceiling as if baying to the moon.\n\nHearing both their inhuman growls, and with his permission, Gayle was sent into a blissful heaven a split second later. \"Oh, god! Ohgodohgodohgod!!!\"\n\nHer eyes rolled to the back of her head before she tilted it back, her mouth gaping open. He then came hard inside of her, groaning and grunting at his release before pressing his chest against her back. \n\n\"Yes. Yes! Ohhh Gayle,\" he cooed then pumped twice before holding still.\n\nHe held onto her waist harder as her body shook and spasmed as she rode the wave of her climax, having no control over her body to stop it. His chest rose and fell as his breathing was ragged from his much needed orgasm and they both continued to groan together with their simultaneous climax. \n\n\"Ssssiirrrr,\" she mumbled, suddenly finding tears pouring from her eyes.\n\nHOOWLLLLLLLLLLLL\n\nIgnoring Bessie, he laid down beside her as she collapsed on her stomach, her face looking away from him. Running his fingers down her back, he said, \"Look at me.\"",
        "When she did, he kissed her lips passionately yet slowly, both still breathing heavily into the others' mouths. She reached up with her left hand while she turned a little on her side then wrapped her hand behind his neck.\n\nWiping the damp hair away from her forehead, he wiped the tears with his thumb. \"Why are you crying?\"\n\nTaking shorter, deeper breaths to slow her rapidly beating heart, she replied, \"I honestly don't know.\"\n\n\"Was I that bad?\" he asked.\n\nHer eyes flew open and she looked at him apologetically, until she saw the playfulness in his eyes. \"Yes, you were truly ... awful.\"\n\nHe chuckled. \"That, my dear, is sooo going to cost you! Cuddle.\"\n\nSmiling, she threw her leg over his thigh, put her arm over his stomach and laid her head in the crook of his arm.\n\n\"Again, nice try. Hold my cock too.\"\n\nShe looked at him sharply. \"H uh?\"\n\nHe took her left hand and pulled it down to his cock. \"Hold onto my cock and do not let go.\"\n\n\"Oh.\" A moment later, she commented, \"I thought you said Bessie would be downstairs for hours. It's only been what, three minutes?\" she teased. He promptly smacked her ass. \"Ow! That was so unfair!\"\n\n\"No, it was not. And it must have been the fact we were doing it doggy style that set her off.\"\n\nShe groaned. \"I highly doubt that, but it was kinda funny though, Bessie howling in time to our screams.\" \n\nThey lay together for several minutes before their breathing became slower and more relaxed. A sneeze then came from the foot of the bed accompanied by a gentle fart.\n\nThey both started laughing, looked at each other and in perfect unison said, \"That BLOODY dog!\" "
    ],
    "authorname": "Addicted2Writing",
    "tags": [
        "bdsm novella",
        "bdsm romance",
        "drama",
        "beach",
        "romance novella",
        "outdoors"
    ],
    "category": "BDSM",
    "url": "https://www.literotica.com/s/aprons-for-gayle-ch-11"
}
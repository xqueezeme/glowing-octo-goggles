{
    "title": "Ashley's Revenge Ch. 06",
    "pages": [
        "I was sitting in my office staring at a blank computer screen waiting for my wife to get home and thinking about the bombshell that Ashley dropped on me a few hours earlier when she told me that I was the man that she was imagining the first time she had ever played with her sweet little pussy and made herself cum. I tried my best to wrap my mind around the fact that Ashley had been fantasizing about me for years now and that my wife finally just gave her a reason to act on it when she told Ashley's mom about her and her friends drinking and getting high.\n\nThese revelations made things so much more complicated. My mind flashed back to all of those summer days when Ashley would be sunbathing in her backyard in one of those amazing little bikinis where it seemed like every time I would be out cutting the grass she would appear like magic. I always assumed I was just getting lucky, but now it seemed like luck had nothing to do with it and Ashley was putting on a show for my benefit.\n\nKnowing a girl like Ashley was crushing on me gave me an immense ego boost. It also made me realize that this relationship, or arrangement, or whatever you want to call what we had entered into carried a lot more baggage than I'd initially realized. This wasn't a girl fucking someone's husband just to get back at the wife; this was a girl fucking someone's husband because she wanted to fuck him and the revenge just happened to fit into the plan.\n\nI flashed back to Ashley on her knees in front of me at my desk and how I pulled her sexy blonde hair back and told her that she was my little slut and that I would do with her as I pleased. I really wasn't sure what had come over me, maybe I was trying to scare her away and sabotage the relationship or maybe I was just trying to see how far I could push young sexy Ashley. The answer so far seemed to be that I could push her pretty damn far.\n\nI knew what we were doing was wrong. I knew that it couldn't last forever and I knew that when it ended it could leave behind all sorts of catastrophes in its wake. Maybe if Ashley wasn't so tall, and so blonde and so very, very sexy I could have done the right thing and ended it on so many different occasions or prevented it from happening in the first place. Instead, I had to admit to myself that I wanted more and I was willing to roll the dice that it would be worth it in the end.\n\nWhen I heard the door that led in from the garage downstairs slam shut I opened up my Internet browser and loaded MLB.com to see who the starting pitchers were for the games that evening. My fantasy baseball team had been slipping due to me spending a bit too much time with my now very real fantasy.\n\nIt was a good five minutes before my wife Katherine appeared in the doorway to my office.\n\n\"Hi, I'm home,\" she said as she walked into the room still in her business suit and heels.\n\n\"Hey,\" I smiled as I looked up at her. \"How was your day?\"\n\n\"The usual, idiot customers, idiot employees, the computer system crashed for about 45 minutes making everyone lose their minds. How was your day with your new intern?\" she asked as she sat down in one of the chairs across from my desk.\n\n\"It actually went pretty well, I was impressed with Ashley.\" I was not lying, I was impressed that she could put on such and act in front of my wife and also do whatever was needed to win whatever game she was playing.\n\n\"I noticed the bathrooms are sparkling clean, did you really have her do that or did you clean them after she left?\"\n\n\"Me clean them?\" I laughed, \"You must be kidding. That was all her, and she washed most of the laundry too and said she'd do the ironing tomorrow. She really seemed eager to impress you,\" I said looking over at her, waiting for her reaction.\n\n\"Wow, maybe I have had her pegged all wrong,\" my wife said as she leaned forward in her chair.\n\n\"Anything's possible,\" I grinned.\n\n\"Was she able to help you with your writing stuff too?\"\n\n\"Yes, actually she is really smart and creative. She gave me some great feedback on some of the story ideas I had her sorting out.\"\n\n\"That's good,\" my wife said. \"So she really scrubbed the toilets?\"\n\n\"Yes, evil step-mom, she did,\" I smiled.\n\n\"Now I kind of feel bad, I never thought you'd really have her do that.\"\n\n\"Why? Everyone seemed to agree that she needed to learn a little responsibility, right?\"\n\n\"Yeah, but I just thought you just wanted a little eye-candy around the house for a while. What the hell was with those shorts she was wearing today? Could they make them any shorter?\" My wife looked over at me and shook her head in disbelief.\n\n\"I didn't really notice,\" I smiled, \"it's probably just what the kids are wearing this year.\"\n\n\"You didn't notice, huh?\" my wife smirked.\n\n\"That's my story and I'm sticking to it,\" I grinned.\n\n\"Well, I know it was only one day but so far I'm impressed and somewhat elated that I don't have to do the laundry tonight. Maybe this internship thing with you is a good deal all the way around.\"\n\n\"I hope so, maybe I'll mold her into a future bestselling author,\" I said as I leaned back in my chair and looked across the desk at my wife.\n\n\"Let's not push it,\" she smiled. \"How many days a week is she going to be here?\"\n\n\"Probably three days a week or so until school starts then we'll cut it back to just a couple days after school and maybe a day here and there on the weekend.\"\n\n\"I guess if she keeps showing up and working hard I could talk to Julie about the car thing. Ashley really did seem sorry for her actions this morning. I really wasn't expecting her to hug me and tell me I did the right thing by telling her mom. I'll admit it, maybe I was wrong about her,\" she said as she stood up, \"I'll go make us something for dinner.\"\n\n\"I'll be down in a few, just need to set my fantasy baseball lineups for tonight,\" I smiled.\n\nMy wife exited my office and headed downstairs to make dinner and I picked up my cell phone and sent Ashley a text message.\n\n\"Bravo on your performance, my wife thinks she may have been wrong about you!\" I typed and pressed send.\n\n\"That is thanks to you for helping me with all the manual labor! What else did she say?\" she replied.\n\n\"She thought your shorts were way too short.\"\n\n\"What a bitch! :) Don't forget my panties are in your pocket! When can I get them back?\" I sat there and smiled for a moment, I had totally forgotten that Ashley's black lace panties were sitting in the pocket of my jeans. I took them out and could instantly smell Ashley's sweet perfume in the air. \n\n\"When do you want them back?\" I asked.\n\n\"Tonight.\"\n\n\"Tonight?\"\n\n\"Yes, is wifey-poo a sound sleeper?\"\n\n\"Usually, why? You want to come HERE?\"\n\n\"Mmhmm.\"\n\n\"That's a bit dangerous.\"\n\n\"You don't want me to? :(\"\n\nI couldn't believe that I was actually considering doing it. My mind raced with how hot it would be to have my wife upstairs sound asleep and I'd be downstairs doing all sorts of naughty things with the sexy blonde Catholic high school girl from next door.\n\n\"Can you really be that quiet?\"\n\n\"Yes, or you can stick something in my mouth! :)\"\n\n\"You are SUCH a bad girl! :)\"\n\nThe next message that came through had a photo attached. It was Ashley's sweet pink pussy and she was rubbing it with her well manicured fingers and said simply \"I need you.\"\n\n\"I'll text you when she's asleep.\"\n\n\":)\"\n\nThe next few hours were torture. I was having a constant internal debate about whether or not I should really go through with having Ashley come over after Katherine was asleep. Katherine and I rarely went to bed at the same time, I would often stay up much later than her to watch a movie or a late ballgame and there were of course times I'd be up writing into all hours of the night and next morning. It seemed like having Ashley here with her asleep just made it so much more likely that we'd get caught, which of course also added to the excitement of things.\n\nWhen the time came for Katherine to go up to sleep I told her I was going to watch a late ballgame and I'd be up in a few hours. I turned the television on and after I heard her get into bed I waited for at least a half-hour before I picked up my phone, my heart racing like mad as I typed in the message.\n\n\"She's asleep. French doors to the den are open.\" I pressed send and waited. After about 15 minutes of waiting I wondered if Ashley might have fallen asleep on me or worse yet maybe her parents had caught her sneaking out of the house. Just as I was about to text her again I heard the door slowly opening and saw Ashley slipping in from the darkness.\n\nOur eyes met and she smiled and closed the door behind her without uttering a word. She was wearing a black Victoria's Secret Pink zip-up hoodie with a pair of tight black running shorts that were just slightly longer than the jean shorts she was wearing earlier that day. At the end of her long, sexy legs was a pair of white running shoes and a pair of white frilly socks. Her sexy long blonde hair was again pulled back into a ponytail.\n\nShe walked quickly across the room over to me and threw her arms around my neck. My lips met her soft red lips as my arms wrapped around her waist and I pulled her body to mine, picking her up off the ground as the television lit up the room.\n\n\"I missed you,\" she moaned between kisses.\n\n\"And I thought you just wanted your panties back,\" I groaned softly as I put her down and let my big, strong hands move up and down her back as we kissed.\n\n\"Maybe I do,\" she giggled quietly.\n\n\"I like your outfit, part runner and part cat burglar,\" I said as I leaned in and nibbled on her soft neck and inhaled the sweet smell of her perfume.\n\n\"I figured if the 'rents heard me leaving I could say I was going out for a run and if they caught me coming back in, well, I'd be all sweaty anyway,\" she giggled.\n\n\"I told my wife you were a smart girl,\" I moaned low as Ashley pulled me down to her and kissed me as she wrapped her legs around my torso.\n\n\"She's upstairs asleep, huh?\" Ashley smiled her most wicked of grins.\n\n\"Yes, sound asleep I hope.\"\n\n\"Where are you going to fuck me?\" she asked in her little girl voice as I carried her over to the big black leather couch in front of the 80\" big-screen television hanging on the wall.\n\n\"We can start here,\" I groaned as I put her long slender body down on the couch and kissed her deeply. Our lips devoured each other like lovers who just reunited after a long absence. My hands slid to the zipper of her hoodie as her hands grasped for my belt and pulled me closer to her. I slid her zipper down to reveal her gold cross and chain around her neck along with her firm young breasts covered by the same black lace bra with the little pink ribbon that she was wearing that morning. \"Not a very practical choice for running,\" I smiled.\n\n\"How about for fucking?\" she groaned low as she pulled me in and kissed me.\n\nI unzipped her hoodie completely and I knelt in front of her long slender body as she sat back on the couch. I leaned in and I kissed her stomach softly. Remembering how ticklish she was I avoided the sensitive areas as I let my fingertips caress her soft, supple skin. My lips moved up as I kissed her body, inching higher with every kiss until I reached her lace covered breasts.\n\nI reached up and slid her hoodie down over her shoulders as I playfully nibbled on her flesh through the lace. She pressed her head back into the couch and let out a soft moan as I guided the hoodie off of her young body and let it fall behind her on the couch. I looked up and Ashley was biting her lower lip, her eyes were closed and her chest was heaving.\n\nI listened carefully to make sure I didn't hear any of the telltale floorboards creaking upstairs which would hopefully let me know that my wife was awake. Hearing nothing I let my fingertips move slowly up Ashley's back until I found the clasp of her bra and unhooked it with one quick snap. My eyes were all over her flesh as I unwrapped my presents by lifting the black lace bra up off of her amazingly firm B cups. I couldn't help but think just how close to perfection Ashley's body was with her puffy pink nipples hardening as I watched.\n\nMy mouth devoured her left nipple as Ashley grabbed me by my hair and pulled me in to her chest as I teased her flesh with quick circles of my wet tongue. I playfully nibbled on her hard nipple causing her to let out a barely audible moan. I moved my mouth to her other nipple as I slid my left hand inside of her short little running shorts and found her smooth, wet pussy waiting there for me. She let out another little moan and pulled my head down harder into her chest as I found her clit with my fingertips and made a few quick, teasing motions around it. I playfully bit down on her hard nipple as I teased her and Ashley moaned softly.\n\nAshley grabbed my face and pulled me up to her. She kissed me hard as my fingertips continued teasing her pussy beneath her running shorts. Her body melted into the black leather couch as I devoured her deliciously soft lips. She moaned quietly as she slid her soft tongue into my mouth and I felt it twirl around my tongue a few times before exiting as fast as it had entered. My fingertips moved down and traced her soft pussy lips which were now completely coated with her sweet juices. Ashley threw her arms around my neck and groaned in my ear.\n\n\"What would she say if she came down right now?\" Ashley whispered as she playfully nibbled on my earlobe. I stifled a moan as I felt my rock hard cock pressing up against my jeans and boxer-briefs.\n\n\"I don't know if she'd say anything, she'd probably just kill us both,\" I moaned as I engulfed the sweet flesh of her right breast with my mouth and slid my right hand up to caress the left. I rolled her hard nipple between my fingertip and my thumb and squeezed playfully.\n\nMy left hand slid slowly up and down her soft, wet pussy lips teasing her until my fingertips were thoroughly coated with her slick juices. I rolled my tongue around her puffy nipple as I bent my middle finger and slid it inside of her dripping pussy ever so slowly.\n\nMy finger slid slowly in and out of her tight pussy as I kissed my way back up to her neck. Her body was starting to move in time with the slow thrusts of my finger and I felt Ashley's gold chain beneath my lips as she let out soft little moans in to my ear as I finger fucked her tight wet pussy.\n\n\"Could we tie her up and make her watch?\" Ashley moaned quietly in my ear as her body moved with my finger.\n\n\"Fuck, that would be hot,\" I groaned as I nibbled softly on Ashley's earlobe as my right hand moved slowly up her back. The middle finger of my left hand was slipping in and out of Ashley's pussy and with each little fuckstroke she was letting out a barely audible little moan. I could hear her breathing getting heavier as I slid my finger in and out faster and faster.\n\n\"Mmhmm, let the bitch watch how I can please her man,\" Ashley moaned as my right hand grabbed a hold of her blonde ponytail and tugged it back. I continued fingering her adding my ring finger to the mix. Ashley let out a moan as she felt the second finger slide slowly inside her wet little pussy and she let out a high pitched whimper into my ear when she felt my wedding ring slip between her tight, drenched pussy lips.\n\n\"Oh fuck!\" she moaned into my ear as I let my fingers glide in and out of her tiny little pussy faster and faster.\n\n\"You like that baby?\" I groaned as I pulled her soft blonde hair back harder.\n\n\"Mmhmm,\" she moaned softly as she bit down on my neck.\n\n\"Such a dirty little slut taking my wedding ring inside you,\" I whispered softly in her ear as I pounded her tiny pussy with my two fingers over and over again. My fingers moved in and out faster and faster until I could feel her body tensing up so I pulled her ponytail back hard and buried just my ring finger deep inside of her pussy so that she could feel my wedding band inside her. \"Cum on my ring you dirty little slut,\" I growled quietly.\n\n\"Holy hell!\" she moaned into my ear as her body began convulsing and her dripping wet pussy gripped down hard upon on my ring finger as she stifled her moans by pressing her face into my shoulder.\n\n\"That's it baby,\" I whispered as I tugged her blonde ponytail back as she bit down on my shoulder and came hard. Her pussy gripped down hard on my finger tightly and soaked it and my wedding ring with her sweet juices.\n\nI moved back and looked up at her. There was a mixture of pleasure and animal lust in her sparkling blue eyes. I smiled as I slid my hand from beneath her running shorts, making sure to lightly graze her clit with my wedding band.\n\n\"You took my panties, I should have taken your ring,\" she grinned as she took my hand and engulfed my ring finger in her mouth, rolling her tongue around it to clean her juices off.\n\n\"Your sweet little pussy is probably tight enough to do it,\" I moaned softly.\n\n\"Mmhmm, and I still want to wear her rings,\" Ashley giggled.\n\n\"Fuck, you are such a bad little girl,\" I said as I tugged her hair back playfully and kissed her neck.\n\n\"You love it. You need to get rid of her for a weekend before school starts so I can wake up in your arms again,\" Ashley moaned quietly.\n\n\"We might be able to arrange that,\" I groaned.\n\n\"Good,\" Ashley smiled, \"now it's your turn on the couch.\"\n\n\"Not so fast,\" I said as I released her ponytail and let my hands move down to the waistband of her running shorts and slid them down her long legs. Ashley's blue eyes sparkled down at me and she bit down on her lower lip as she watched me lean in until my tongue was sliding inside of her pussy.\n\n\"Oh fuck,\" she moaned as my tongue enjoyed lapping up the remnants of her latest orgasm. She grabbed onto my hair hard as my rolled tongue darted in and out of her honey hole faster. I looked up to see her biting down harder on her lip and her eyes were closed tightly as she fought what was coming.\n\n\"Remember not to scream you little slut,\" I whispered as one hand moved up to tease her hard nipples and the other moved to let me tease her clit with my thumb as I ate her sweet pussy with my tongue. I squeezed her nipple hard as my tongue darted deep inside her. My thumb made quick little circles around her clit as I looked up Ashley. She was looking down at me, our eyes were locked and she was grinding her drenched little pussy up into my face.\n\nI knew she was close so I turned up the heat and rubbed her clit harder and faster as I pounded deep into her sweet candy with my tongue. She barely made a sound when her pussy unloaded its sweet juices sending the delicious liquid all over my face and the couch. Our eyes were still locked on each other as I used my tongue to try and drink down every sweet drop that I could.\n\nAs she came down from her orgasm I slowly licked her clit and used my tongue to clean up as much of her juices as I could off the leather couch.\n\n\"Wow, what the fuck was that?\" Ashley pulled me up to her.\n\n\"You didn't know you were a squirter, huh?\" I smiled.\n\n\"I had no idea, I guess the thought of your wife upstairs really turned me on,\" Ashley smiled then giggled softly.\n\n\"You could really get me in a lot of trouble,\" I smiled.\n\n\"Mmhmm, I could.\" Ashley looked into my eyes for a moment before she kissed me softly and said, \"Now it's your turn on the couch.\"\n\nAshley stood up as I sat up on the couch. I looked up at her standing there naked in front of me wearing just her shoes, socks and gold chain. She kneeled in front of me and unbuckled my belt and then quickly unbuttoned my jeans. She pulled the zipper down and reached in for my cock in one quick motion she had freed my hardening shaft from my boxer-briefs. \n\nI let out a soft moan as I felt her hot wet tongue caress the head of my throbbing cock. She playfully licked it a few times before she rolled her tongue around my sensitive throbbing head and took me deep into her hot, wet mouth. Her soft red lips gripped my cock tightly as they slowly slid their way up and down my rock hard shaft.",
        "I reached out and grabbed my iPhone from the table next to the couch and put it into video mode. Ashley smirked and looked into the camera as she slowly took my throbbing cock deep in and out of her mouth a few times before sliding her lips free and letting her tongue tease the head of my cock playfully. With every little twist and twirl of her tongue I let out a little moan and Ashley smiled.\n\n\"That's how you suck a cock Mrs. Jones, I hear you might need a few lessons,\" she said looking into the camera before she giggled and started going back down on my cock with gusto. I reached out with my free hand and grabbed her ponytail as she bobbed her head up and down on my pulsating cock.\n\nAshley's eyes were fixed right on the camera as she licked her soft red lips then glided them up and down my cock ever so slowly. Her lips slid down my shaft until I could feel the throbbing head of my cock entering her throat. Up and down she was relentless as she kept coming back for more. She was putting on a performance for the camera and I was a very appreciative audience.\n\nAshley looked up into my eyes as she slowly sucked my cock. I had a perfect view of her amazing tits as they moved up and down with the rhythm of her mouth on my cock. She reached down with her left hand and slid her fingertips between her legs and started rubbing her pussy as she went down on me.\n\n\"What's your favorite fantasy?\" she asked me as her tongue playfully flicked the underside of my cockhead.\n\n\"You are Ashley,\" I moaned.\n\n\"Mmm, and what do you want to do to me?\" She looked up at me with those sexy blue eyes as she slowly rubbed her pussy beneath her shorts. That gold chain around her neck made me wonder if all Catholic school girls were such little sluts.\n\n\"Anything, everything,\" I groaned as I pulled her ponytail back and put the iPhone, still recording, back on the table.\n\n\"What do you want to do to me right now?\" she asked with a wicked little grin as she reached out with her right hand and slowly stroked my throbbing cock.\n\n\"I want to bend you over the side of the couch, slap your perfect little ass and fuck you like the little homewrecking slut you are,\" I growled just loud enough for her to hear me.\n\n\"Yes, sir,\" she said as she leaned in and kissed my cock, rolling her tongue around the throbbing head before I let go of her ponytail and she stood up and walked to the side of the couch. I got up and moved behind her as she bent over the side of the black leather couch and looked back at me as I slid off my jeans and boxer-briefs. She wiggled her ass in the air and I couldn't resist giving it a good smack with my right hand. She stifled a scream as I moved behind her and spread her legs. I pushed her body forward over the armrest as grabbed onto her slim hips.\n\nI spanked Ashley again; trying to make sure the noise of the slap would not be much louder than the ballgame on the television. I had to keep reminding myself to listen to make sure I didn't hear any noises coming from upstairs or else this fantasy could have a very bad ending.\n\n\"Fuck me, baby,\" Ashley moaned, \"I need your cock.\"\n\nI smiled as I guided the throbbing head of my hard cock to her dripping wet pussy and slid it slowly inside as I pulled her back by her hips. Her pussy was so tight it felt like heaven as I slowly slid my cock in and out of her hot young body.\n\n\"When was the last time you threw your wife over a couch and fucked her?\" Ashley moaned low as she looked up at the iPhone on the table and probably realized it was still recording. \n\n\"It's been a long time,\" I groaned low as I reached up with my right hand and grabbed a firm hold on her soft blonde ponytail and pulled her back to me as I thrust my cock deep inside her.\n\n\"I could make you forget her,\" Ashley moaned as she looked back at me over her shoulder.\n\n\"I bet you could do a lot of things,\" I groaned thrusting deeper and deeper inside of Ashley's tiny wet pussy.\n\n\"You know it,\" Ashley cooed as I pounded her slim body against the big leather couch. She let out a moan as a noise came from upstairs and I froze with my cock deep inside of Ashley's tight pussy and listened.\n\n\"Fuck,\" I whispered as I felt Ashley's pussy grip down hard on my cock and then release it.\n\n\"Let the bitch catch us,\" Ashley whispered as she used her tight pussy to grip and release my cock again and again.\n\nMy head was spinning, I was sure at any moment my wife was going to appear and my marriage was going to be over but I couldn't help but marvel at just how good Ashley's pussy felt as it gripped and released my cock over and over. I wondered if she practiced this maneuver or if she was just that good at being a little slut.\n\n\"We can't, not yet,\" I whispered, surprising even myself with the not yet part. My cock felt so good inside her at that moment that I think I would have done anything she asked me to.\n\n\"Fuck me,\" she whispered as she looked back at me with her blue eyes. I figured the noise I heard was just the house settling so I tugged Ashley back hard by her hair and started pounding her dripping teen pussy with my thick, hard cock. The couch moved slightly with ever hard thrust I pounded into Ashley's perfect pussy.\n\nAshley started to moan louder so she grabbed one of the pillows off the couch and buried her face in it as I fucked her harder, faster and deeper. Her pussy was tightly wrapped around my cock as I slammed it in and out of her with abandon.\n\nI heard another noise that sounded like the house settling again but no matter what it was at that point there was no way I was going to stop. My body was on autopilot as it gave it to my most carnal desires as I tugged Ashley's pretty blonde hair back and slammed my married cock home again and again in her dripping teen pussy.\n\nI could feel my explosion getting closer and closer as Ashley's pussy dripped down her thighs as it took in every inch of my manhood inside her. I heard her squeal into the pillow as her tight pussy clamped down hard on my cock like a vise. This time she wasn't releasing so I slammed myself deep inside her, grinding her body hard against the arm of the big leather couch as I came hard.\n\nI bit down on my lip and pulled her hair back as her pussy milked every last bit of jizz that it could from my cock. It took all of my strength to not moan as her pussy clenched and released me over and over again. I let go of Ashley's ponytail and took a deep breath as I slipped my cock free of her pussy.\n\nI reached down and pulled Ashley up to her feet, turning her to look at her. Her face was flushed red but she had a big smile. She put her arms around my neck and got up on her tiptoes and she kissed me deep.\n\n\"You're amazing,\" she said as I wrapped my arms around her.\n\n\"Right back at you,\" I grinned.\n\n\"So, can I have my panties now?\" she giggled.\n\n\"You really did come over to get them, didn't you?\" I shook my head.\n\n\"No, you can keep them, but make sure you don't let your wife find them. I wouldn't want to ruin her new good impression of me!\" Ashley pulled me down to her and kissed me softly.\n\n\"I know, we don't want to ruin a good thing.\"\n\n\"So, am I on the schedule tomorrow morning boss?\" she asked with a grin.\n\n\"Yes, 9AM sharp.\"\n\n\"Well then, I'd better go get some sleep,\" she giggled as she gathered her clothes and got dressed.\n\n\"Yes, I want you well rested for tomorrow,\" I said as I got dressed myself, my eyes all over Ashley as I tried to figure out exactly what it was about this girl that would cause me to risk so much just to have her.\n\n\"Goodnight, baby,\" she said as she kissed me one last time before she slipped back through the French doors and back out into the darkness. I stood there for a moment and wondered what the next day would bring."
    ],
    "authorname": "TallMarriedMan",
    "tags": [
        "ashley",
        "revenge",
        "blonde",
        "schoolgirl",
        "internship",
        "catholic",
        "couch",
        "wife asleep",
        "wife",
        "cheating"
    ],
    "category": "Mature",
    "url": "https://www.literotica.com/s/ashleys-revenge-ch-06"
}
{
    "title": "Lust and Love Pt. 01(?)",
    "pages": [
        "**This is my first attempt at starting a series. I've got some ideas for how I see this story progressing as long as there is interest in Derek and Tristans story so please, any feedback is welcome! -KS8**\n\nIt was the first day of spring break and I was getting ready to go to a party. Most of my friend group decided to stay on campus, as we couldn't afford to travel anywhere for vacation nor did we want to go back home under the watchful eyes of our parents. Being college freshman, we had been greatly enjoying the newfound freedom this year. One of our upperclassmen friends with an off-campus house was throwing a party with his roommates and I have to admit, I was excited. I knew Derek would be there.\n\nDerek is the brother of my best friend at school, Victoria or Tori as we called her. Derek went to university too and was a junior. And he is gorgeous. 6 ft 2, 200 pounds of lean muscle, his body is like that of an underwear model. Which was unsurprising considering he did model underwear part time for extra money whenever he could get a job doing so. He has brown eyes like a puppy dog and short sandy blonde hair that looks like it belongs in 2001. It works for him though. His straight teeth are white but not obnoxiously white and he has the cutest little button nose you'd ever see. And his cheeks had dimples, which I'm a sucker for. He was majorly popular with all the sorority girls, which greatly annoyed Tori. And me too if I'm being completely honest.\n\nI'm far from the preppy valley girls that fawned all over him. For one, I was a boy. 5'6 130 pounds with green eyes and brown hair, I am decently attractive even if I was a small guy and looked a little plain. I'd only recently come out of the closet to my closest friends to the surprise of, well, all of them. I pass extremely well, mostly because of my deep masculine voice and the fact I really do have the personality and interests of what society considers heteronormative.\n\nI'd liked Derek ever since I first met him, when tori introduced us the second week of the fall semester. He was a super nice, easy going guy from the jump that seemed oblivious to the fact he was drop dead gorgeous. He was just so aloof but he was confident.\n\n\"Tristan, this is Derek my douche brother I was telling you about!\" Tori had said when introducing us.\n\n\"Hey Tristan, I'm Derek. Tori's totally awesome older brother that got all the good genes\", he reintroduced himself.\n\nI giggled at him and he gave me a little sheepish smile as if pleased with himself that he'd made me laugh.\n\nDerek was always super friendly with me, almost too friendly. He was a touchy-feely kind of guy with everyone, so even though I didn't read into it when he'd put his hand on the small of my back whenever he'd pass by or throw an arm around me whenever he came up from behind on a conversation I was having, I always got flustered. I couldn't help it, he just had that affect on me and I was sure it was obvious to tori and the friends that knew I was gay. I even felt guilty sometimes, wondering if I should tell him I was because most guys aren't comfortable with that kind of thing.\n\nEven still, I'd begun to notice he was a little more attentive to me in the last couple months. He was always friendly, like I said but he didn't make a point to talk to me or wave every time he saw me at a party or around campus. Yet here lately, I could expect him to come right up to me anytime we saw each other.\n\nWhen I showed up to the party, Derek was with a couple of his buddies surrounded by the usual girls all flirting with him as if competing on an episode of the bachelor. As soon as he saw me come in, he just abruptly walked away from them, one girl in mid-conversation with him. When he got to me, he was all smiles.\n\n\"Hey Tris, how was your first day of spring break?\" He asked earnestly. Yeah, he calls me Tris and I have to admit, every time he did my stomach would do somersaults. That wasn't so unusual, he had nicknames for his best friends and he's the one who gave Tori hers.\n\n\"It was okay, I just slept all day to be honest! I've been looking forward to this party ever since I got up\" I answered him.\n\n\"Yeah dude, you even dressed up for it!\" He said ironically, given that he only had a white undershirt on and khaki shorts. Only Derek could pull off that look at a party full of frat bros in polos.\n\nI rolled my eyes but smiled. \"Not all of us are lucky enough to be able to dress like 14 year olds and still get lucky Derek.\" I said.\n\n\"Ah, It's part of the charm\" Derek said, shrugging his shoulders and smiling.\n\nAnd so the party went on, Tori and our friends Ana and John showed up about 30 minutes later. Normally, Derek would have said his hellos and then went back to whatever bimbo was trying to get with him that night or his friends. But I noticed tonight, he was hanging out with us. In fact, he was practically swatting girls away like they were annoying bugs that night.\n\nWe all got pretty wasted and eventually, tori went off with this guy she'd been talking to all semester. John and Ana disappeared not long after, no doubt to go have sex. They thought they were sneaky but really, it was the worst kept secret amongst our friends. That left me and Derek there with his buddies. His friends were kind of jerks and loved to fuck with the freshman, especially the small ones like me. I took it in good humor though and had a good time. Finally, pretty drunk, I decided it was time to go when his friends went to get more drinks. I didn't want to risk blacking out and having to find my way back to my dorm.\n\n\"Well, I guess I'm gonna head back to the dorm and crash man. If I drink much more, I'm gonna end up sleeping in the bushes somewhere\" I joked to Derek.\n\n\"Why don't you just come back to my place tonight? Its just a few doors down from here man, we'll go back and have a couple drinks, maybe watch something and pass out!\"\n\nI hesitated. If I was sober, I'd definitely have turned the offer down on account of not wanting to risk making things awkward with my best friend by somehow making a mistake that cued her brother in on how I felt about him.\n\n\"Okay man, that sounds good to me! I guess are you ready then?\" I wasn't wasted but I was drunk enough to be stupid tonight.\n\n\"Yeah, let's head out\" Derek responded.\n\nAnd so without telling anybody, we just left the party and started walking up the street. We were laughing about Tori and whether or not she'd finally put out for the first time. She was a dedicated virgin and it was well known.\n\nThen Derek looked at me and asked \"How about you, are you a virgin?\"\n\nI blushed; I was. It's not that I was embarrassed, I just wasn't expecting the question.\n\n\"Don't laugh...but yeah, I am.\" I responded. Being from a small town in North Carolina, finding another gay guy was hard to do seeing as I was picky and, well, the Bible belt and all. I did experiment with a friend though and blew him a few times before he decided it was too gay. But that's the only thing I'd ever done.\n\n\"Really? That's kind of surprising...what's the furthest you've ever gone with someone?\" He asked.\n\n\"Uh...\" I noticed he said someone and not a girl. \"Well...\" I hesitated, unsure if I wanted to tell him the truth.\n\n\"I know you're gay Tris, you can tell me.\" He said with a knowing smile.\n\nI was kind of stung. Not because he knew but because I thought Tori had told my business to him. I guess he could tell because before I could answer, he added \"Nobody's told me anything, it's just kind of obvious to me. I'm sure nobody else can tell though.\"\n\n\"Oh...well then...\" I paused. \"I gave a high school friend a blowjob.\"\n\n\"Interesting...\"\n\n\"Derek if this is gonna be too awkward, I can still just go back to my dorm. It's not a ---\"\n\n\"If I already figured you were gay, why would I feel awkward when I asked you to come back with me? And besides, we're here anyway.\" He said a little impatiently but not at all unkindly.\n\nI smirked as he turned down the sidewalk leading to the door of his rent house.\n\n\"All my roommates went to Myrtle so it's just me. Between you and me, I don't like to be alone.\"\n\nI asked him why he didn't just go with them and he said he had a modeling gig in a couple days and needed to be in town.\n\nWe had a couple beers, sat down on his couch and we started watching a movie. But we talked more than we watched. We were joking around and laughing about Chris, the guy who always gets drunk and strips naked at the parties. Then something occurred to me and I decided I had to ask him about it.\n\n\"Why didn't you just get a girl to come back with you?\" I asked him.\n\n\"Uh...I mean, to be honest I, uh, haven't hooked up with anyone in the last couple months.\"\n\n\"I call bullshit, girls stay hitting on you...there's no way\" I said with a bit of a smile.\n\n\"Yeah but I haven't been in the mood lately. And the being hit on constantly isn't as cool as you might think. It gets to be annoying sometimes. I like to be the chaser too sometimes.\" He said with a shrug.\n\n\"Oh yeah, must be sooo tough on you...but nah, I could understand why that could be a bit overwhelming sometimes. If you weren't such a nice guy, it probably wouldn't be quite as bad ya know.\"\n\nHe smiled at me, so big that I kind of started wondering what I said that made him smile like that. He thanked me. I could only think it was because I called him a nice guy...but why is that?\n\n\"For what?\" I asked him.\n\n\"I mean, it might sound stupid but nobody ever compliments me on anything other than my looks. It really does make you feel like a piece of meat sometimes.\"\n\nI felt my heart flutter a bit and for the first time, I genuinely felt bad for him. The thought of him feeling badly about himself made me feel bad. But I also realized that clearly, he wasn't some dumb jock that reveled in attention. It somehow made me like him even more.\n\n\"I'm sorry Derek...I didn't mean to like dismiss your feelings like that.\" I said, smiling apologetically.\n\n\"It's all good Tris...honestly, you're the first person I've ever told that to. Guess I feel comfortable with you.\" It was my turn to smile big.\n\n\"Well, good...looks like we've both opened up a little bit tonight\" I observed.\n\nWe kept talking, about any and everything and eventually we were teasing each other about what one of us said or about a story we told. Looking back, I can tell what we were doing was connecting with each other and flirting. Eventually, I teased him about some embarrassing story he'd told me.\n\n\"Oh yeah, you know you are way too comfortable picking on me when I could easily wrap you up and you'd literally never get out of it\" He said laughing, poking me in the sides and acting like he was gonna grab me.\n\n\"You wouldn't dare!\" I giggled back.\n\n\"Don't be so sure, my name is dare-ick for a reason\" He said. It was so cheesy but in the moment, so cute.\n\n\"Wow, I didn't realize such a joke could be such a cheesy nerd\" I said back to him, really laughing hard at this point.\n\n\"Nerd?! Who you calling a nerd?!\" He laughed, reaching out and tickling me. I scream-laughed and jumped up off the couch and started trying to get away. I was incredibly ticklish. Derek followed me and cornered me on the other side of the couch in the very corner of the room.\n\n\"Stop Derek, don't come any closer!\" I said, half laughing but feeling incredibly anxious at the same time. I wasnt scared he'd hurt me and if I asked him to stop tickling me, I knew he would. But that didn't mean it didn't give me a slight adrenaline rush seeing him making his way toward me slowly.\n\n\"Oh yeah, or what?\" He asked me with a devilish smile.\n\n\"Stopppp...I swear, if you get any closer, I'll kiss you!\" I threatened, smirking at him. He was now less than an arms length away from me. My arms outstretched, I reached out to grab his wrists. As if I could have ever kept them down, but he didn't try to move them.\n\nI couldn't say anything so I nodded at his feet. He bent down a little in front of me so that we were at eye level.\n\n\"Go ahead.\" Came his soft voice.\n\nI looked up into his eyes and he just had this expression of genuine interest in his face, almost a hunger in his eyes and ever so slight smile on his face. I leaned in slowly, wondering if he was gonna back away like this was a joke. But then he closed his eyes and as I leaned in totally, I closed mine. It was like an electric charge went through my lips when our lips touched softly, sensually. My bottom lip even twitched and quivered as if it had just been shocked by static electricity. Derek didnt really kiss me back, but he'd puckered his lips for the kiss.\n\nWe broke away ever so slightly after a maybe 2 second kiss and we both opened our eyes. I was starting to feel worried, like he was gonna freak out. But then he closed his eyes again, leaned in and he kissed me this time. A little more aggressive than the first, he back me up totally against the wall. He lifted his hands for the first time, grabbing mine now and put them together up over my head as we kissed. He knew what he was doing and I was practically floating on air.\n\nAnd then he picked me up and carried me back to the couch, lying me on my back with him hovering over me. His thigh in my crotch, I knew there was no way he couldn't feel my throbbing erection but he made no indications he did.\n\nAfter a moment, he moved to kissing and sucking on my neck. I gasped quietly when his lips touched my neck for the first time and I felt his mouth form a smile as he continued.\n\n\"Are you sure about this?\" I asked him a little breathlessly. He pulled up and looked at me with a coy smile.\n\n\"You really have no idea do you? Why do you think I always have to talk to you when I see you? I can't help it. Why do you think I asked you to come back to my empty place tonight? Why do you think I've been flirting with you all night? I'd have said something sooner but I could have been wrong and I'm not ready to tell people yet.\"\n\n\"Wait, tell people what exactly?\" I asked him. He through his head back and chuckled\n\n\"What do you mean \"what\"? Im bi, duh. And I like you Tris. I don't give all my little sisters friends pet names, I've been trying to subtly hint it to you for awhile. You really need to research what flirting is\" he laughed. So did I.\n\nEmboldened, I sat up and pushed him to lay down on the other side and settled myself over him and started kissing his neck like he had done to me. He groaned and his hands found my ass and squeezed, hard. I gasped again, a little louder than the last time. We started grinding against each other as Derek squeezed my ass cheeks and pulled up and pushed down on them. I was so much smaller than him that my whole body would move as he did. I could feel him stiffening against me now.\n\nHe tugged up on my shirt and I sat up on his lap with my knees straddling his hips to take it off. He thrusted up and pulled me down at the same time, hard. I felt his erection through his underwear against my ass. It felt pretty big but considering I'd only seen my 6 inch dick and a friends 5 and half inches, I couldn't be sure. He lifted up and pulled his shirt off as well, revealing a sculpted 6-pack with a thin trail of hair from his belly button disappearing into his shorts.\n\n\"Pants too\" Derek said. I obliged. My hard on was sticking straight out inside my boxer briefs and there was a not-insignificant wet spot from where I'd been leaking pre-cum for the last 15 minutes. My whole body was shivering, but I wasn't cold. I was excited, I was nervous.\n\n\"Tris are you cold?\" He propped himself up on his elbows as I straddled him once again.\n\nI told him I was just nervous.\n\n\"You don't have to be nervous, we don't have to do anything you're not comfortable with.\"\n\n\"No, I want to Derek. Really...I've just never done this before.\"\n\n\"You told me you hooked up with a friend before though...\"\n\n\"Not like this, he just was using me to get off\" I said, feeling a little ashamed to admit it.\n\n\"I'm sorry...I'm not using you Tris, you're adorable and sweet and funny and I like you.\" He was so comfortable expressing himself and I was so...not. I admired his confidence.\n\nMy huge smile and red cheeks made it obvious I liked what he was saying. I didn't want to say anything because I didn't want to get my hopes up only for him to change his mind during the post-nut clarity.\n\nAnd so without any further conversation, I leaned back down and gave him a quick kiss and started to move down body, kissing his neck, his chest and his stomach all the way down to his shorts. I undid his belt and then I unbuttoned them and gave them a quick tug. He lifted up and I was able to get them down off his ankles.\n\nOn my knees between his legs on the couch, I kissed it through the fabric of his underwear. I could feel that he was leaking a little too, though not nearly as much as I was. I grabbed his underwear and started tugging at the legs of them. Derek lifted up and I slowly pulled them down to reveal an abnormally thick 8 inch dick. It was a little more tan than his pubic area that he clearly kept trimmed but had grown out a little. It curved downward slightly, giving the effect of being too heavy.\n\nMy mouth slightly ajar, I looked up at him. He smirked down at me, clearly pleased I was impressed. Before I could go down on him, he pulled me back up to him and kissed me again only this time, he shoved his tongue into my mouth and started swirling my tongue with his. I lightly jerked and tugged on his cock as he pushed his hands down the back of my underwear, groping my ass like before. Finally, I went right back down to his cock and immediately licked the bead of precum that had formed on his piss slit as a result of my jerking him.\n\n\"Fuuuck Tris, suck it. Suck my dick\" Derek said.\n\nI opened my mouth wide, stuck his dick about 4 inches into my mouth before enclosing my lips around it, lightly sucking in as I did.\n\n\"Ahhh shiiiit dude\" Derek groaned. I knew I was a talented cocksucker, I got off on doing a good job.\n\nI began to pull back up til just the head was in my mouth and then went down a little further than before. It was difficult and I repeated the process several times. I gagged, I choked, my eyes watered but I kept trying.\n\n\"It's okay if you ca--UGHHH\" Derek groaned his loudest yet as I finally forced him past my gag reflex, completely burying his fat 8 inches in my mouth.\n\n\"Suck that fucking dick\" Derek demanded. And so I did. For 10 minutes I let him fuck my throat. I'd been slobbering all over his dick to the point his pubic hair looked like he had been underwater.\n\n\"Okay Tris\" He finally said. I felt disappointed, thinking he'd come to his senses and this was over. But then he said \"let's go up to my room\" and he picked me up off the couch like I was a toddler. I was extremely turned on by how he basically manhandled me. He outweighed by well over 50 pounds of muscle and my desire for him was almost bursting out of me. He was the alpha and I loved that. I wrapped my legs around his waist, arms around his neck and started giving him a hickey as he carried me out of the living room, up the stairs and into his bedroom.\n\nWhen we got to his bed, he lightly set me down on the bed while my legs were still wrapped around his waist. We started kissing again and I felt his hand find the waistband of my underwear. I grabbed his hand to stop him.\n\n\"Derek, you don't have to..\"\n\nHe looked at me and rolled his eyes.\n\n\"I want to, is it so hard to believe that?\"\n\n\"A little...but also...I'm not as big as you are.\"\n\n\"Okay...what's your point? I don't care how big you are, besides its kind of obvious I'm the top here\" He said with a smirk.\n\nIt was my turn to say duh...was that ever in doubt?\n\nWith one hand he tugged my underwear down from the front and I lifted my legs to allow him to get them completely down. My rock hard 6 inches springing free, Derek takes it in his hand, covering the entire shaft with his large hand. He moves down my body and kisses my abs. I have nice abs, no six pack but they are tight and hard. He kissed down to my pubes and then took my cock into his mouth as I felt a wet warmth envelop my member for the first time. He put it in his mouth completely on the first try with only a little difficulty, though not down his throat. I thought I would cum immediately but I held off. He started to glide his lips up and down my shaft a little clumsily as I placed my hand on the back of his head.",
        "\"Oh shit\" I gasped quickly.\n\nHe took his hand, raising it up to my mouth as he sucked me and held out 2 fingers. I put them in my mouth and start lightly sucking them, swirling my tongue around them. After a minute, he pulled them from my mouth and a moment later, I could feel them rubbing around my puckering asshole. After a couple minutes of feeling consistent pressure against the entrance to my ass, I felt them enter me rather smoothly.\n\n\"Ohhhh Derek\" I moaned as I reached down to grab his wrist. I'd fingered myself many times but his fingers were a good size larger than mine. He pulled off my cock and looked up at me.\n\n\"Do you want me to stop Tris?\" He asked, concerned.\n\n\"No just...be gentle please\" I whined.\n\nDerek smiled and came back up to me and started kissing me again, not aggressively but passionately. He slowly worked my hole as I moaned into his mouth. He pulled in and out of me and wiggled his fingers around. After just a couple minutes, we both felt my hole relax little but Derek didn't speed up the intensity.\n\nHe was taking care of me for my first time and I felt an appreciation that this was my first real experience with another boy. I opened my eyes to see Derek's brown eyes looking deeply into mine as we kissed and he fingered me. There was something so intimate about that moment. I could tell Derek was taking it in, savoring it.\n\nThen he pulled his fingers from my butt, and moved back down to my crotch. But he didn't put my penis back into his mouth, instead he grabbed the underside of my thighs and pushed my legs up giving himself access to my hole. Then I felt his warm breath then the tip of his wet tongue on my entrance. I gasped quietly, my body erupting in goosebumps.\n\nAt first, he ran just the tip of his tongue in circles around my hole, then up and down ever so slightly. Then, without warning, I felt him push his tongue as deep as he could inside my relaxed asshole. I let out out a loud whimper and my hands slammed down on the mattress, spread out and grasping the fabric of the bedsheets. It felt even better than the blowjob did, I was in pure ecstasy and all I wanted was for Derek to be inside me, completely. If I had any doubt that I was a total bottom, this was what removed it.\n\n\"Derek\" I said breathlessly.\n\n\"Hm?\" Came his grunt against my hole, giving me a pleasurable sensation and making me twitch.\n\n\"I want it inside me\" I said a little awkwardly and vaguely. Understandable, considering I was a total novice at dirty talk and unsure of myself at that time.\n\n\"Unkah\" came his affirmation, still with his tongue inside me. But he carried on what he was doing for another couple minutes, until I begged him.\n\n\"Please Derekkkk\" I moaned wantonly.\n\nHe pulled away from my ass, and came up smiling as he kissed me and stuck his tongue deep in my mouth. I accepted it and twirled it with my own tongue for a moment. Then he stopped and looked me in the eyes with one hand in my hair stroking my head, the other propping himself up over me and to the side so he could talk to me.\n\n\"It's gonna hurt, you know? Your first time...and I'm not exactly small\" he added sheepishly, as if his brief lack of humility was embarrassing somehow.\n\n\"I know that...but there isn't any other person I would rather give my virginity too\" I said, blushing a little. Even knowing he was into me, I still felt a little embarrassed speaking so frankly of my desire.\n\n\"We could wait though, I'm not going anywhere. We don't have---\"\n\n\"Derek goddamnit! Fuck me for the love of fucking God\" I said, a little more aggressive than I meant to but with a devilish grin on my face.\n\n\"Oh, you're definitely gonna love it, trust me\" He said. It was clear the awkwardness had faded and we were both starting to feel comfortable being our true selves.\n\n\"Damn, not too humble now are you? You went from feeling weird about talking about your big dick to calling yourself God pretty quick\" I said with a chuckle.\n\n\"You're right...I'll let you make that judgement\" He said, smirking.\n\nAnd with that, he put his hands under my arms, rolled over while simultaneously pulling me over him. It was such a turn on, the ease with which he maneuvered me.\n\n\"You can be on top to start, it'll be easier this way for you to control how deep I go\" He said, a sultry tone returning to his voice.\n\n\"Okay\" is all I managed, quietly and softly. It was clear we both were really feeling it in the moment.\n\n\"You'll need to get my dick wet babe\" He told me. I looked into his eyes, unable to stop myself from smiling like a dork from him calling me \"babe.\"\n\nI slid down his body, and started slobbering all over his big cock. Bending over his manhood, I could feel cool air against my asscrack and could tell I was still soaking wet around my hole. After a few seconds, I maneuvered myself to where I was straddling him with my knees and positioned his cockhead to my entrance. Derek's strong hands gripped my hips as I began to push against his dick.\n\n\"Hu-uhhh\" I inhaled sharply. With the faintest pop, the head of his penis was inside me.\n\nDerek's thumbs started rubbing my hips delicately and he said with a tone just as soft \"easy, don't try to take too much too quick babe.\"\n\nI couldn't really speak so I just nodded my head, eyes closed. I sat there and adjusted for a couple minutes before proceeding. Opening my eyes, I started to slowly slide down his meatstick. Eyebrows furrowed, mouth open, my lips forming an O, I got about halfway down before I inhaled sharply again.\n\n\"Hu-uhhh!\" I instinctively jerked up off his dick.\n\n\"Not so fast Tris, I don't want to hurt you!\"\n\n\"I can't do it like this, I don't know what I'm doing! Could you...please...?\" My voice trailed off.\n\n\"Okay babe, I'm sorry I thought it'd be easier this way.\"\n\n\"It's not your fault, I'm just dumb\" I mumbled to him. He grabbed both my arms just above my elbows tight but not hard.\n\n\"Don't call yourself dumb Tris, it's your first time. I don't wanna hear you talk bad about yourself, okay?\"\n\nI smiled apologetically and nodded my head. I didn't really think I was dumb but it felt really good that he cared how I felt about myself. He sat up, wrapping his arms around my waist and turned over to where I was on my back now. He kissed me, first on the lips and then on my neck before hooking his arms under my knees and lifting them up to give himself access to my hole.\n\nHe spit on his hand and began rubbing his dick wet again, saying \"Okay when I get in position I want your hands holding my back. That way if it starts to hurt, you can dig your nails in and I'll stop.\"\n\n\"I don't wanna hurt you either though!\" I said a little loudly.\n\n\"You won't babe, promise.\" He said with a reassuring smile.\n\nAnd with that, he positioned his dick at my hole and popped his head back inside me. My body jerked a little but it didn't hurt too much. He leaned down over me so that he was directly over me and I could reach up to place my hands where he'd asked on his back, just under his shoulder blades.\n\nHe very slowly, very gently pushed into me little by little until he was back halfway inside me. I gasped and instinctively dug my nails into his skin. He stopped and looked for me to direct him.\n\n\"I'm okay...it's fine.\"\n\nHe didn't move a muscle for a solid minute, letting me adjust some more. I felt my ass relax some and soon after it did, Derek began to push again. This time, he got almost all the way inside me. This time I yelped and dug hard into dereks back, the pressure I did so with forcing my hands to drag across his skin. I knew id scratched him pretty good and once I'd finally caught my breath, I could feel his pubes lightly brushing my ass.\n\n\"I'm so sorry, I didn't mean to---\" I began\n\n\"Shhhh, it's okay. Put your hands back and do it again if you need to\" He said gently.\n\nSo I did, and we sat there like that for another minute unmoving. Then Derek began to pull out of me a couple inches and pump slowly back inside of me. My nails dug into him the whole time but I didn't scratch him this time. Eventually I relaxed enough to where I could open my eyes and saw Derek once again staring in my eyes. He leaned down and kissed me deeply.\n\nDerek pulled out of me completely and I immediately missed feeling him inside of me. Before I could say anything though, he spit into his hand again a couple times and lathered himself up again. When he lifted my legs again and slid back inside me, it went alot easier inside me and soon he was balls deep, bottomed out inside me. I could feel his testicles pressed up against my tailbone. I squeezed his back muscles instead of digging my nails in this time, feeling a jolt deep inside of me that I felt in my ass and cock.\n\n\"Oh babyy\" I moaned loudly. I realized at this point I had a pool of precum on top of my abs. Derek collapsed on top of me, burying his face next to mine in the pillow behind my head. I felt for the first time how much bigger he was than me, he completely covered me. Pinned beneath him, I couldn't have moved if I wanted to. Yet I felt completely safe and I appreciated in this moment what a gentle giant this beautiful boy was. He could do whatever he wanted, he could have decided he didnt care if it hurt but he was so careful with my body. Any doubt I had that this was just some one time hook-up for him disappeared in that moment. I could tell he respected me.\n\nI could also see from this vantage point the bright red scratch marks on his back and a little blood shining on his back.\n\n\"You're bleeding! I'm so sorry\" I hurriedly gasped.\n\n\"It's okayyyy, it's okay. I expected as much, to be honest I like that kind of thing.\"\n\nIt made me feel better that he said that but I still felt a little bad. But with his thick 8 inches buried in my ass, the intimacy of the moment took over and I turned my head to kiss him on the cheek. He pushed himself up and kissed me on the forehead before beginning to pull out and push back inside me.\n\nHe began to pump in and out of me at a steady pace. I kept up a steady stream of fucks and oh my gods, his thickness meant there was pressure against my prostate at all times. I was leaking all over myself.\n\nThis went on only for about 2 minutes until Derek gasped \"Oh fuck, OH FUCK\" and pulled out of me. Groaning loudly as he did, he started to shoot a no-hands thick, huge load. The first volley splattered hard against my hole and ballsack as he moved to sit up on his knees between my legs, his dick above mine. And then his cock started to spurt all over my chest and stomach. Thick rope after thick rope covered my body for several shots before it started to subside some and Derek took his fat dick into his hand and started jerking the last of it out.\n\nHe sat there on his knees after it was over, looking up at the ceiling catching his breath. I got the feeling he didn't want to look in my eyes and I started to feel insecure. Was he beginning to feel regret over the situation? But then...\n\n\"Tris...I'm sooo, so sorry. I didn't mean to cum like that, you were just so tight and God, you're so cute and it just hit me all of the sudden. I couldn't stop it. I'm sorry if you're disappointed...\" He said, looking from the ceiling down to the side of my body still not catching my eye.\n\n\"Are you crazy Derek?? That was the hottest thing I've ever done, watching you cum like that and knowing it was my ass that made you do that...fuck!\" I said assuringly.\n\nHe looked at me finally, smiling a little meekly and saying \"You're sure you're not disappointed? I never cum like that, I swear. Next time, I'll show you. You'll cum first, I guarantee it.\"\n\n\"Oh is that a Derek Lewis guaranteed guarantee?\" I asked with a sly smile.\n\n\"100% guaranteed baby!\"\n\nI smirked.\n\n\"Then I cant wait...but I kind of really need to cum right now...if you're not too spent I mean.\"\n\nWithout a word, he went down on me again. He stuck a couple fingers in my ass as he sucked me and in less than 30 seconds, I felt myself exploding into his mouth. He let the first couple shots into his mouth and then pulled off, continuing to finger and jerk me until I'd finished.\n\nHe got up and went to get a towel. When got back, he wiped my body, hole and cock for me and cleaned me up before wiping his own dick. And then he collapsed on top of me like he had whilst balls deep inside me, his face buried in my neck.\n\n\"That was amazing babe\" He told me.\n\nI really loved feeling his weight pin me down, I stroked his hair and within about 5 minutes, I heard him begin to snore ever so softly. It was an adorable sound and so soothing to me that I fell asleep as well, satisfied that he'd worn himself out with me and excited for where this could potentially go."
    ],
    "authorname": "KinkSlayer8",
    "tags": [
        "young",
        "grinding",
        "attraction",
        "college",
        "gay sex",
        "first time"
    ],
    "category": "Gay Male",
    "url": "https://www.literotica.com/s/lust-and-love-pt-01"
}
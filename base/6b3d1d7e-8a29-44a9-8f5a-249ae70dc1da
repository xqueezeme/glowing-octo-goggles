{
    "title": "My Exception is You Ch. 02",
    "pages": [
        "***All characters are 18+ years old***\n\nWarning: mild derogatory slurs and struggles with homophobia in this chapter. Could be triggering or upsetting.\n\nThis is chapter two of \"My Exception is You\" and I hope it was worth the wait. I was on vacation and was stewing over how to progress. I had some ideas and wanted to lean into one. Hope it is enjoyable. Feedback and votes are welcome and they help me figure out what you do/don't like.\n\nThank you!\n\n==========================================================================\n\nWe both had been busy with classes and training, only getting to be together for lunch the past few days. But he promised this weekend was more free for him so I was just eager to see what Saturday would bring. I was getting changed for practice when Jake came into the room.\n\n\"Hey homo,\" he breathed and I sighed, laughing lightly as I rolled my eyes. \"So how's your boyfriend?\" he pressed and I shrugged.\n\n\"Fine. We're hanging out this weekend. So I'm excited,\" I admitted and he smiled.\n\n\"I'm jealous you're dating and I'm not. Why can't I get a lady? I mean look at me!\" he posed as I pulled my shirt over my head. I pursed my lips as I studied him. He was a self-proclaimed body builder. He was getting bulky and it was moderately impressive. And he was pretty attractive. A thought crossed my mind and I smirked.\n\n\"You're probably a nine in most women's books,\" I started and he beamed. \"But I'm sure the rating plummets the moment you open your mouth,\" I laughed and he scoffed, chucking his pillow at me. \"You call me Homo instead of Bruno now. You're an ass!\" I laughed some more as he grumbled incoherently.\n\n\"But you know I'm joking. And I don't treat women like this,\" he insisted. I could only shrug. \"And most of the interested women are your mom's age!\" he whined and I laughed.\n\n\"You have it so hard don't you?\" I teased and he frowned, flopping onto his bed. \"I'm heading to practice so I'll catch ya later,\" I hurried to the door while he flipped me off. My walk to the field was peaceful. When I got there I saw Clay wearing his practice jersey and running shorts. He had on spandex underneath that clung to his thighs.\n\nI tried not to stare at his body too long as I dropped my stuff by the pile. I crouched down and got my cleats out, snagging my water bottle and sipping it before getting my gear on. I stood up, adjusting my jersey and clearing my throat as I walked toward the team. Devon and a few others were gathered around dribbling and passing balls for fun.\n\nI joined in wanting a distraction. My mind had been wandering to Clay more often than not, especially since we started texting more. And this week after deciding to date it felt like we saw less of each other. So that made us all the more desperate to talk and hang out when we could. It definitely felt like the start of the honeymoon phase.\n\n\"Heads up Bruno!\" a voice called out and I glanced over to see a ball flying toward me. I shuffled back, letting it hit my chest before it dropped to the ground. I kicked it back to the other group when a whistle blew.\n\n\"Drills today!\" coach shouted. Clay came over and led the warm up as our coaches set up some cones. We split in half and I was stupidly happy that Clay was in my line. We ran our warm up series on the track around the field. We were halfway through getting to our side shuffles when I noticed some students on the bleachers.\n\n\"Why do people come watch?\" I laughed, feeling a bit annoyed as I got back in line. Devon glanced at me with a smirk.\n\n\"You embarrassed about how bad you are?\" he joked but I scoffed.\n\n\"Then why am I the starting second striker for Clay and Zack?\" I countered and he chuckled.\n\n\"Your panties are in a twist,\" he teased and I sighed. \"You can never score against me,\" he beamed proudly and I rolled my eyes. Clay was a few people back but I couldn't stop glancing at him. He was stretching and hopping a bit, seeming in his own world.\n\n\"Move up Bruno,\" Zack nudged me and I blinked, feeling a bit embarrassed as I shuffled forward. I tried to stay focused on the drill, not wanting to get caught up in my own thoughts.\n\nAfter our warm up we moved through a few dribbling and shooting drills. We also worked on passing. Then we were assigned numbers, switching our jersey colors accordingly. I couldn't stop myself from noting Clay was white and I was blue. We separated into small teams setting up a smaller field with cones to run some challenges. Devon took the goal and I pursed my lips. Can't score on me my ass! I was determined. I took the field, glancing at my teammates. I was the only striker so it was up to me to score. I took a deep breath and nodded as the whistle blew.\n\nWe worked around the field passing back and forth, challenging the defense. I got a pass with a clear shot and Devon smirked. I positioned my body to fake a long shot as defense came up. Before they could block I quickly rolled my foot over the ball instead of kicking it and spun past the defense. Devon corrected immediately his weight shifted and I took that opportunity to shoot to the top left corner.\n\n\"Dammit!\" he cursed, jumping toward it. The ball hit the net and I smiled.\n\n\"Next team,\" coach called out. I got some high fives and pats on the back. I turned and faced the field when I felt a gentle slap on my ass. I looked to my right and saw Clay smiling.\n\n\"Took a play out of my book?\" he teased and I shrugged, blushing but proud of myself. \"It was impressive,\" he insisted and I smirked.\n\n\"Thanks. Your training tips helped a lot,\" I admitted and he nodded. We watched on, listening to our coach's advice and notes. Then it was Clay's team and I felt antsy, too excited to watch him. Above everything else I was eager to see his skill in this moment. He pulled his two teammates into a huddle and gave them instructions.\n\nThey nodded and jogged off to their spots, the whistle blowing. After some maneuvering Clay got the ball on a shocking pass behind the defense and straight to the goal. Devon went to grab the ball but Clay beat him to it, blowing past and scoring easily.\n\n\"Reckless!\" our coach called out and I flinched, shocked. \"You can't assume a pass in front of the goalie will work every time!\" I realized our coach had been a lot harder on Clay this week and even though that play worked he was mad again. Clay also looked a bit irritated by his reaction, but swallowed his pride and nodded.\n\n\"Understood coach,\" he called out. He came back over to grab his drink. I snuck my way closer feeling cheeky and giddy as I pat his ass. He flinched and glanced at me with a cute smile.\n\n\"That was awesome,\" I professed and he shrugged. \"Coach is just a safe, risk-free thinker with offensive strategy. Your plan works,\" I insisted and he smirked.\n\n\"We could practice the passing to set it up. You, me, and Zack,\" he offered quietly and I nodded. \"I'll talk to him and see how he feels,\" he breathed easily. I watched him take another sip, my eyes glued to his lips and neck as he chugged the water. His lips were gleaming and I thought about kissing him when he glanced at me.\n\n\"Sorry, that's all I wanted to say,\" I turned and hurried away, my ears on fire as I realized how hard I was checking him out. Devon came over to me as we took our water break.\n\n\"You trying to become Clay 2.0?\" he joked and I couldn't help but laugh.\n\n\"I'm not that good. But he has been helping me,\" I admitted and Devon pursed his lips. He stood with his hands on his hips as he glanced at the rest of the team.\n\n\"About you and Clay, did something happen? A lot of guys are worried. It's not like you were glued at the hip but since he helped you study,\" he hesitated as I stood up slowly, dropping my water bottle. I felt uneasy as he shuffled uncomfortably.\n\n\"Since then what?\" I pressed and he shrugged.\n\n\"It's awkward. Like you two are uneasy with each other. You seem to avoid each other instead of talking. Today is the first day it's even felt a bit normal again,\" he grumbled and I tried not to blush.\n\nHow could I answer this? \"Well everything is fine. Maybe it's my fault though. I worry I might get on his nerves if I bother him too much,\" that wasn't a lie, so it felt fine saying it. Clay came over then, seeming concerned.\n\n\"Everything ok? You two look uncomfortable,\" he started, his brow furrowed and Devon sighed.\n\n\"Was just making sure Bruno was ok. He seemed a bit odd lately. Wanted to make sure nothing bad happened between you two,\" he shrugged and Clay smirked as he crossed his arms.\n\n\"Why is that?\" he asked and Devon sighed.\n\n\"I hate to admit it but you two and Zack are the best chance we got at winning the championship. If you guys aren't on your game-\"\n\n\"Was that a compliment?\" I gasped sarcastically, interrupting him. He rolled his eyes, Clay laughing. \"We're fine, see?\" I held my hand out and Clay slapped it lightly with a smile.\n\n\"Ok good,\" Devon nodded and walked off.\n\n\"I have to do better at being discrete!\" I rubbed my forehead feeling exasperated but he only chuckled. \"I'm serious!\" I pressed and Clay sighed.\n\n\"Just don't act any different,\" he shrugged and I blew a raspberry.\n\n\"Easy for you to say,\" I grumbled and he smiled sympathetically. The whistle blew and we went back to practice. It wasn't until the team was walking up to the showers that I started to panic. The first time I showered with Clay was right before we started dating. Luckily, the past few practices Clay and I didn't end up showering together. But I dreaded the timing because the last thing I wanted was a boner if I saw Clay naked again.\n\n\"Bruno you smell awful!\" Zack laughed and I sighed.\n\n\"I sweat a lot. Sue me,\" I slid my shirt off and Devon laughed as he nudged me.\n\n\"Get in first, I can't stand your smell anymore!\" he teased and I rolled my eyes, grabbing my towel and soap to rinse off. When I walked in no one else was here. I sighed, relieved and turned the water on, rinsing off before working the soap over my arms and armpits.\n\n\"I am thinking tomorrow after practice,\" Clay's voice echoed through the shower walls suddenly. I froze.\n\n\"Hey Bruno!\" Zack called out and I looked over. Both of them stood naked, turning their showers on.\n\n\"W-what's up?\" I called out and Zack smiled.\n\n\"Stay after practice tomorrow. We're gonna run some extra plays,\" he continued casually and I nodded, glancing at Clay. He was washing his body, his eyes closed as he rubbed soap all over himself. His hands cupped and stroked his balls quickly and I looked away. My ears were hot, my heart racing as I felt my blood boil. The way his dick and balls moved around in his hands was too much for me to handle. What was worse was the shock; it had only been like a week since my first time kissing a guy and now I'm getting turned on by his flaccid cock?!\n\n\"Bruno!\" Devon called out, coming into the shower and I flinched. \"You got a cute ass!\" he laughed. In any other moment I would have been irritated with him. But his playful comment killed my growing boner.\n\n\"Thanks Devon. Glad my ass strikes your fancy!\" I joked and he laughed as he stepped to the shower on my other side.\n\n\"Quit acting gay!\" Zack barked a bit angrily and I flinched, looking at him curiously.\n\n\"I'm serious man, check out his ass. It looks like a chick's!\" He came over to me and grabbed my shoulders, yanking me to face him.\n\n\"What the hell?\" I demanded and Devon chuckled.\n\n\"You a homo or something? Why the fuck would I want to look at a man's ass?\" Zack demanded and then I felt Devon pull me closer.\n\n\"Sounds like you're in denial! I bet if you looked,\" he grabbed me into a headlock then. Bending me over. My shoulder pressed into his gut, my hands on his hips as I tried to pull away.\n\n\"That's enough,\" Clay sounded closer and then I felt and arm around my waist. I was pulled from Devon, my face hot with embarrassment.\n\n\"Aww come on. I was messing around. Just trying to rile the homophobe up,\" he shrugged and I sighed, pushing away from Clay as I turned to my shower.\n\n\"I'm not a homophobe. Gays don't scare me or upset me. I just think men who fuck other men are gross! Like you have to be fucked up in the head to look at a man and get turned on by it. Guys should be with girls. That's how it is,\" Zack started up then. I rushed out of there, feeling queasy and uncomfortable. I finished getting changed and heard a throat clear next to me.\n\n\"You ok?\" Clay asked and I sighed, throwing my bag onto my shoulder.\n\n\"No. Devon pissed me off with his bullshit. But that's nothing compared to Zack's homophobia!\" I snipped, some of the teammates around us looking over.\n\n\"Well I don't really know what to say about that,\" he started and my cheeks got hot.\n\n\"How could he say shit like that though? Would he care if it hurt my feelings?\" I pressed and Clay's eyes went wide.\n\n\"Wait Bruno what's wrong?\" another teammate came over and I sighed.\n\n\"Devon was being an ass and made Zack say some homophobic shit. I'm pissed!\" I insisted. More teammates listened in, all of them looking uncomfortable.\n\n\"Why?\" he asked gently, Clay looking unnerved.\n\n\"Because I'm bisexual! And it hurts me to hear my teammates say shit like that,\" I called out boldly, all of them stunned.\n\n\"You're bi?\" someone else asked nervously. \"But like, we change and shower in front of you. Why don't you get a boner?\" he asked and I was floored.\n\n\"Huh? Do you get a boner with any girl you see?\" I demanded and he flinched. \"Fuck I'm leaving. This is pissing me off more!\" I slammed my locker, grabbing the rest of my shit and storming out.\n\n\"Clay we have to tell the coach,\" I heard as I left.\n\nI almost exploded, not because of me though. As I calmed down I shook my head. \"Damn assholes don't understand how hurt Clay could be,\" I practically growled to myself as I walked alone to get dinner. The anger was consuming me as my mind looped through the exchange. I stood in line, grinding my teeth and shaking my head as I glared at the hot plates of food.\n\n\"That was quite a performance,\" Clay's voice jolted me as I glanced back at him. I couldn't help but frown as I rolled my eyes. \"You're really mad?\" his tone changed and I sighed, dropping my arms as I looked at him again.\n\n\"Don't I have a right to be mad about that?\" I challenged and he hesitated, glancing around with a slight shrug. \"Doesn't it piss you off too?\" I continued and he sighed heavily, pursing his lips. He stood with his hands in his pockets, looking like he had a lot to say but none of the words came out.\n\n\"I'm used to it,\" he admitted finally and I scoffed, my forehead wrinkling as I shook my head and glared at the wall in front of us.\n\n\"That's bullshit,\" I spit out and he laughed weakly, his hand patting my shoulder lightly before squeezing it gently. I felt his body near mine, my muscles relaxing as my anger subsided a bit. \"It is, you can't convince me otherwise,\" I insisted as he adjusted and hung his arm casually on my shoulder.\n\n\"I won't disagree with you. But I feel relatively desensitized to it,\" he mused, his tone piquing my interest. I studied his profile noticing a distant look on his face as his lips puckered in thought. \"Maybe it would help if I told you more about my family?\" he offered then, his eyes shifting to meet mine as he smiled softly. I exhaled slowly, feeling caught up in the look on his face. On the surface it looked alright, but there was something stirring just below the surface that made me uneasy.\n\n\"If you're ok with that,\" I surmised, stepping up in line to get my food. He followed quietly, both of us walking over to a table. I saw some bags at it and hesitated. \"The team is ok with sitting with me after my outburst?\" I glanced at him and he smirked.\n\n\"Most of the guys were just shocked,\" he started. My eyebrows pulled together as I scanned the dining hall. \"They wanted me to tell coach that Zack made you upset. Not that it would really accomplish anything since they seem to be of the same opinion,\" he sighed, shaking his head as a glimmer of anger shined through. Maybe it was because I was paying more attention, or maybe he was losing his guard, but Clay didn't seem as happy or perfect the more I talked to him. Somehow that realization only made me happier.\n\n\"Hey Bruno!\" Devon's voice scared me as I went to sit down. He was hurrying over to the table, a strange look on his face. \"I'm sorry! I had no idea, I didn't mean to egg Zack on like that,\" he started and I sighed, plopping down.\n\n\"It's whatever. Thanks for the apology. To be honest you're the last person I would have expected to say sorry,\" I dismissed his concerns but he looked worried, his face wrinkling.\n\n\"What? Why would you think that?\" he demanded and I sighed, glancing at Clay as I tried to think about how to word myself.\n\n\"If I had to take a guess it's because you're more of a carefree, jokester. Most of us think you only know how to clown around,\" Clay started, surprising both of us as he sat down across from me.\n\n\"No way! Not about something like that. I have a gay uncle, he's super close with my family and some of the stuff he's been through, even with the rest of our family?\" he blew a raspberry and shook his head. \"I guess I sometimes don't think before I act though. I really am sorry,\" he insisted and I nodded.\n\n\"It's ok. You didn't even really piss me off. Zack did. It's not your fault anyway,\" I shrugged it off and Clay smiled slightly, his eyes studying me as he took a bite of his chicken. \"But I appreciate you saying that,\" I sighed heavily and Devon grinned, reaching out to ruffle my damp hair.\n\n\"Anything for the runt of the team,\" he teased, already back to being a damn pain in my ass. I exhaled sharply as he walked off to get food.\n\n\"So,\" Clay cleared his throat, glancing around before smiling at me. \"What are you doing after dinner tonight?\" his voice was low, muted a bit. I shook my head as I ate a mouthful of potatoes. \"No plans?\" he confirmed and I nodded. \"Want to hang out?\" he offered and I nodded again, trying not to look too excited. Most of the team joined us. It was hard to not notice Zack's absence. We finished dinner as if nothing weird happened after practice and I was both appreciative and irritated by it.\n\nThis agitation didn't leave as I walked to my dorm room to drop my stuff off. Clay said he'd meet me there so I chose to just wait for him outside. As I plopped down on a bench I glanced up in time to see a couple off in the distance holding hands and talking by the entrance to another dorm. Something about how effortless it looked frustrated me. I had no right to be upset, Clay and I were still figuring everything out, but knowing how easy my other relationships were made this even more irritating.\n\n\"You look deep in thought,\" Clay broke me out of my trance and I smiled, pushing up off the bench.\n\n\"You could say that,\" I agreed as we turned to walk to his apartment. There was a worried look on his face but I tried to ignore it. My thoughts and our talk would have to wait until both of us were sitting down, face to face.\n\n***\n\nClay's hands slid up my arms as he leaned over me. I let my weight lower into his bed, our lips locked as he kissed me eagerly. The idea of a conversation seemed too far off as his lips and tongue tantalized me. His fingers brushing up under my shirt pulled me back to reality and I sighed, reaching up to push him away.\n\n\"What?\" he looked concerned, his eyes studying my face desperately.\n\n\"I want to talk about us,\" I held my conviction, the look on his face making me uneasy. \"I mean I want to really understand the direction we're heading in,\" I corrected, hoping the explanation was enough. He sighed and sat back, his hands resting on my thighs. He took a deep breath, squeezing right above my knees before our eyes met.\n\n\"I'm ashamed to be gay,\" his voice was steady, his expression didn't change. His eyes were steady, his forehead slightly wrinkled as his lips pressed together. We were studying one another.",
        "\"Ashamed to be gay? Or upset with the way some people close to you view gay people?\" I challenged a bit bitterly and his lip twitched with a frustrated smile before he composed himself. \"I'm not attacking you Clay I just want to understand you so I don't do something wrong,\" I insisted as he pulled his hands away.\n\n\"Right. Well the few boyfriends I've had it's been a mutual request to stay in the closet,\" he admitted and I sighed, feeling sad for him. \"Kissing you in the dining hall that day, it was the first time I ever publicly showed off my preferences,\" his voice was soft, quivering a bit.\n\n\"Well I'm not ashamed to have these feelings for you. They're confusing and surprising at times,\" I laughed, shaking my head as I sat up and grabbed his hands. He looked like a puppy who was afraid of being abandoned. It broke all of my conviction and I leaned toward him to wrap my lips around his. His arms slid around my waist as he pushed his weight into me. I felt his body rub against mine, my legs sliding apart effortlessly as his hips nestled between my thighs.\n\n\"My family would disown me if they found out,\" he sighed, his face hovering over mine as he held me. I froze, unsure of what to say. There really was nothing I could say. I couldn't tell him that wasn't true, because it probably was. I couldn't tell him it would be ok, because it might not be. I couldn't even tell him it'd be worth it, because I had no idea what I meant to him.\n\n\"I'm not asking for you to bring me to your parents and out yourself,\" I assured him and he actually looked relieved. \"We just started dating anyway!\" I teased and he actually laughed a bit. \"But I don't want to hide my feelings for you,\" I cleared my throat, feeling a bit uneasy as his eyes stared me down. They were so intense.\n\n\"Are you sure?\" he was so soft spoken it was both relaxing and unsettling. I took a deep breath and glanced at him, unable to stop myself from smiling as I laughed then.\n\n\"You look so scared!\" I sighed, reaching up to shove my hand into his hair. He closed his eyes, letting me grab a handful and pull him closer. \"I've already sucked your dick. I don't think you have much to worry about,\" I whispered and he laughed, his eyes flashing open as he bit his lip then.\n\n\"But you only dated girls. How do I know I'm not an experiment?\" he looked like he regretted the question but I appreciated his honesty. Getting a glimpse into his insecurities and his frustrations was making me feel even more connected to him.\n\n\"The closeted gay and the newly discovered bisexual doesn't sound like a stable relationship. I'll agree with you on that,\" I teased and he dropped his head, laughing lightly as he pressed his hands into the bed. He held his weight over me, his hips still against me. But it was a welcome feeling. \"Only time will tell. But my mom already knows. And my roommate. I don't feel the need to make it a big deal beyond that. So however you want to do this,\" I offered and his eyebrows pulled together as the little crevice above his nose wrinkled.\n\n\"But you don't want to hide anything,\" he reminded me and I shrugged.\n\n\"I can refrain from being affectionate in situations if you tell me ahead of time. We can compromise,\" I insisted and he pursed his lips. \"But promise me you'll make a concerted effort not to shower the same time I do after practices,\" I grumbled then, my face hot as I looked away from him.\n\n\"Why?\" his tone changed immediately, sounding mischievous.\n\n\"What do you mean why?\" I demanded, glaring up at him. He was grinning, his eyes bright as he stared back at me. \"I almost got a boner today,\" I admitted sheepishly and he laughed, pressing his forehead to my shoulder. \"I'm serious! I looked over and saw you groping yourself,\" I murmured and he sighed, snickering still as he turned and kissed my jaw.\n\n\"I tried so hard to not look at you. But knowing you couldn't stop yourself from checking me out makes me feel amazing,\" he whispered and I went to push him away, feeling flustered and embarrassed when he locked his arms around my waist. \"When Devon bent you over,\" he started and I tensed up, his lips sliding along my neck. \"If I wasn't mad I definitely would have been hard as a rock,\" he sighed before sucking at my neck gently.\n\n\"Shut up, what was attractive about that?\" I felt self-conscious, my ears hot as I imagined him staring at my ass and balls as I bent over. It made me uncomfortable, but I also felt really excited. My stomach tingled and burned with anticipation as he adjusted his hold on me.\n\n\"You have no idea how nice your ass looks, do you?\" he groaned, one of his hands reaching down to grope it. I flinched, my chest tightening with excitement as I felt my breath escape me.\n\n\"I think your ass looks better,\" I whispered after a moment of silence. His face lifted, his eyes warm as he smiled at me. It looked sexy, handsome, and cute all at once.\n\n\"Does it?\" he looked like he could laugh at any second, but it seemed like he was more overwhelmed with unfulfilled happiness. How many guys convinced him they would be better off hiding their relationship? Did I have any right to promise to be better? Could I do better? Did I want to? \"You know no other guy has said my ass looked nice,\" his voice sounded deeper, his face closer to mine.\n\n\"I can't help but notice it. Especially when you're in shorts, or in the shower,\" I admitted, blushing as I looked into his crystal eyes. He licked his lip, a sexy smirk turning the corner of his lip up.\n\n\"Oh yeah?\" he whispered, his eyes glancing down to my lips. I felt our noses brush, his lips near mine. \"Do you like anything else?\" his tongue and lips brushed against mine, my eyes closing as I trembled. Thrills ran through my body as I reached up and wrapped my arms around his shoulders.\n\n\"Your face is my weakness,\" I admitted willfully, pushing past my own uncertainties. If this relationship was going to work I knew I had to put forth a lot more effort. \"But your entire body looks so nice. Especially your thighs,\" I continued and he nodded slowly, his hands sliding up under my shirt. \"And the way your pants tighten around them when you walk or run,\" I felt like I couldn't breathe, my chest tight as his lips brushed and hovered against mine.\n\n\"What about my cock?\" the feeling of his lips dancing against mine as he whispered was mind numbing. I had no idea such little touches would send my body into overdrive. But my blood was boiling, my hands trembling as I ran one hand up the back of his neck.\n\n\"I was fighting a boner in the shower after seeing it, even flaccid I,\" I hesitated and bit my lip, my eyes locking on his. \"You're really sexy. Effortlessly sexy,\" it almost sounded like a complaint but it was the truth. And I did find it annoying that he was taking up so much of my focus lately.\n\n\"You say that like you're not sexy,\" he breathed. Before I could protest his lips pressed against mine. Our tongues touched and we both groaned. My mouth opened more; I felt desperate for his tongue, for the heat of his mouth on mine. He responded eagerly, his hands clawing at my back as our tongues tangled.\n\nMy heart was racing, my cock throbbing eagerly as we practically ripped our shirts off. We tangled ourselves together, our bodies hot as we panted and sucked on each other's mouths. His elbows pushed into the bed, his shoulders taught as he curved his back. The pressure on my cock was almost painful, but I still groaned as he ground himself against my crotch and ass. My hand clawed at the back of his head, my palm braced against the nape of his neck as my other hand dragged down the length of his back.\n\n\"Fuck you're so sexy,\" his voice was hoarse, his eyes burning as he looked down at me. I licked my lip, my face hot with need as I shoved my hand into the back of his pants. He didn't flinch, didn't even blink as I groped his ass. My breath quivered, my hand trembling as I teased his crack.\n\n\"Is this ok?\" I hated how shaky my voice sounded. I knew it was from excitement but I didn't want him to think I was nervous or hesitating at all. He answered me with a needy kiss, our tongues tangling as I pushed my fingers against him. I felt his ass, his body on fire as his hips twitched and rolled. He was possessed with wanton. A desire to discover his body and what he liked consumed me. My fingers prodded at his hole and he trembled, his breath hot and shallow as he clung to me.\n\nI held him close, my hips thrusting up against his cock. I could feel him against my balls and shaft, my face and chest burning as my need took over. His body matched mine, both of us starting to sweat as I shoved my fingers in more. I tried to concentrate, my cock aching with its own desires as I worked to find his sweet spot. I pressed my fingers deep, wiggling them around and he groaned. His lips sucked on mine, his tongue forcing its way into my mouth. We both moaned, his arms tightening as he locked them around me.\n\n\"Fuck this is so good,\" I gasped as he kissed my neck. He sighed, and then bit me. I hissed, my head rolling back as my back arched. He continued to bite and suck at my neck harshly, my body trembling with excitement.\n\n\"How are you so into this?\" he teased, kissing down my chest. My fingers slid out of his ass, my palm gripping his cheek instead as he started devouring my nipples. It felt so different than the first time, like all of his reservations were gone. My fingers gripped his hair, my chest heaving as I panted.\n\n\"I don't know. But kiss me,\" I whimpered when his tongue slid around and flicked against my nipple. He pushed up quickly our lips crushing against each other. He reached down and grabbed my legs, pulling them up as he thrusted against my ass. I moaned, muffled by his lips and tongue.\n\n\"Fuck I want to go all the way,\" he groaned, panting as he kissed my jaw. My chest tightened, my head swimming as I processed that.\n\n\"You said no anal,\" I gasped when he thrust against my ass. He clawed at my legs doing it again as he pressed his lips to my ear. \"What's another option?!\" I insisted as he kept at it, his lips and tongue teasing the curve of it.\n\n\"I have an idea,\" he huffed, pushing away quickly. His hands were fast and strong as they yanked my pants and briefs off. I was naked, my body burning and heart racing as he licked his lip. \"Fuck this is too tempting,\" he murmured as he started caressing and massaging my legs and hips roughly. The look in his eyes had my body tingling. He looked like a starved wolf and I was a defenseless rabbit locked under his gaze. \"Get on your knees,\" he gripped my hips and I gasped, my heart dropping as a bout of panic consumed me.\n\n\"On m-my knees?\" I clarified cautiously and he nodded. His eyes ran over my body before meeting mine. If he could tell I was worried it didn't show. The look in his eyes hadn't changed. A deep, burning desire controlled him. I could see it on his face, in his eyes, and it had my heart fluttering. With a deep breath I pushed over onto my stomach and slowly tucked my legs up under me.\n\n\"Oh fuck,\" he groaned, his hands running up the back of my thighs. I tensed, shivering as tingles ran all over my body. I couldn't tell if I was excited or terrified. His palms and fingers clamped around my ass, my heart pounding so hard I could hear it in my ears. \"Bruno you're so cute like this,\" his voice was rough with lust as his thumbs slid up between my cheeks. I whimpered, clawing at the bed.\n\n\"This feels embarrassing,\" I admitted finally and he chuckled.\n\n\"It looks sexy as hell,\" he insisted and then I froze, my eyes popping wide as I felt his lips on my balls. He sucked and licked at them eagerly, his hands rolling my ass around. \"They feel so heavy,\" he moaned, slurping and nibbling at them. It was mind numbingly good. My balls churned and tingled, a hot wave of pleasure rolling through me as I relaxed into the bed. I left my ass up in the air, my chest pressing into the soft blankets as I bit my lip and panted.\n\n\"Oh god you're too good at that!\" I felt breathless as one of his hands slid between my thighs to stroke my shaft and tease my tip. He was sucking at my balls, teasing my dick, and groping my ass. My mind was swimming at all the sensations. I gripped the blanket, biting my lip and holding my breath as he pulled my dick back. He sucked on it, his tongue and lips hot and slippery. \"Oh god,\" I hissed, trembling as he worked it deep into his throat, both of his hands back on my ass. Eventually he pulled away.\n\n\"I don't have lube, but I want to-\"\n\n\"No anal,\" I interrupted and he chuckled before nipping at my ass.\n\n\"Can I just finger you though?\" he didn't sound the least bit upset. I bit my lip and closed my eyes as I nodded. I braced myself as his hands caressed my ass, expecting his fingers immediately but what happened next blew my mind. His thumbs slid up my crack, pushing my cheeks apart as his tongue pressed against my ass. It was hot and wet, my ass tingling as he flicked and teased it.\n\n\"Shit,\" I inhaled, the blankets curling up in my fists as I panted. He sucked and prodded at my ass eagerly, his tongue so strong and forceful against me. He kissed down to my balls before going back to my ass, his mouth burning a fire in me. I felt the bed shift and then he pulled away. One hand slid along my back, pushing me down gently as the other shoved between my cheeks. His fingers were hot and stiff as they forced their way into my ass.\n\n\"Is this what you jerked off to?\" he spoke through gritted teeth, his body looming over mine as he fingered and massaged my ass. \"The idea of me playing with your ass?\" he continued, his demeanor so different as he leaned his weight into me. My balls clenched, a jolt shooting through me as he rubbed my prostate.\n\n\"Clay! Oh fuck, right there!\" I cried out eagerly, my hips dropping to push my ass at him. He groaned, his fingers working harder. I felt my eyes roll back as I trembled, my balls tensing and churning as my dick throbbed. \"I'm gonna cum!\" I gasped, my back tingling with excitement.\n\n\"Not yet,\" he pulled his hand away and I whimpered, my balls aching painfully. I felt his hands lie me down onto my back, pulling my legs together. I looked down to see his dick sliding between my thighs. It rubbed against my shaft and I groaned, feeling on edge and twitchy as my cock throbbed.\n\n\"Please I need to cum!\" I reached down to tease our shafts as he crossed my legs and held them together.\n\n\"Squeeze tighter,\" he huffed, both of us sweating and moaning as he fucked my thighs. My balls were getting rubbed, my shaft on fire. \"Bruno, fuck, I'm gonna cum,\" he panted and I trembled, using my hands to help tease our tips as he worked against me.\n\n\"Uhhhnnngh!\" I threw my head back as my balls erupted painfully, my dick pulsing as I came all over myself. He pushed my legs apart, slumping over me as he panted. I massaged his balls as he jerked off over me, his face wrinkled with pleasure as his hips twitched.\n\n\"Fuuuuu!\" he hissed, biting his lip as his hand slammed to the bed next to me. He clawed at it, his mouth falling open as he moaned and grunted. I watched, turned on as he came all over my stomach. Rope after rope of his thick cum mixing with mine. \"Holy shit,\" he gasped, his hand releasing his dick and pressing to his forehead. \"I'm light headed,\" he chuckled and I smiled, trying to catch my breath as well.\n\n\"I uh, I've never felt this good after sex,\" I mumbled sheepishly, looking away as he smiled. I felt his hand on my cheek and glanced at him. My ears were hot with embarrassment as he smiled happily.\n\n\"We haven't even had sex yet. Not technically,\" he reminded me and I couldn't help but bite my lip. \"But I have to agree. This feels more amazing than it ever has,\" he mused, his eyes studying my body as his hands ran over me. \"I wonder why that is,\" our eyes met as I shrugged.\n\n\"I'm not concerned with it. Just happy I get to have such an amazing time with you,\" I liked the way his cheeks blushed whenever I complimented him. He leaned down and gave me a few sweet kisses before he sighed and pulled away.\n\n\"I uh, I'm ok with being a bit more public with you,\" he started suddenly, my heart dropping. \"I don't want to be ashamed of it anymore. It feels too good to be bad, right?\" he shrugged, looking worried even as he tried to be nonchalant.\n\n\"Whatever makes you comfortable, there is no rush,\" I wanted to ease his mind. He looked relieved but determined as he gave me a few more kisses before looking at the bathroom. \"Can you help wash me up?\" I whispered then, reaching down between us to tease his semi-hard cock. I felt it coming to life in my hands as we smiled at each other.\n\n\"You're the gayest straight guy I know,\" he teased and we both laughed as he pulled me up for a hot, sloppy kiss. My mind wandered as he got the shower ready, wondering what his idea of \"more public\" meant. I was willing to find out."
    ],
    "authorname": "CateredContentQueen",
    "tags": [],
    "category": "Gay Male",
    "url": "https://www.literotica.com/s/my-exception-is-you-ch-02"
}
{
    "title": "The Cursed Tattoo Pt. 02",
    "pages": [
        "Back to Work\n\nAs he had predicted, Ryan was already late again. He'd woken from the arms of the doctor, or Melinda now, only to find Eleftheria on her perch atop the drawer, staring at him. He was sure he'd had some books or photos or something on there.\n\n\"Let me guess, you don't sleep,\" he said.\n\n\"A pleasant morn to you, too. And no, why would I?\"\n\n\"Well, I need to go to work, so... I'm already late, and I need to go take a shower. You want to watch that, too?\"\n\n\"In case you missed it, you are already naked, and have been ever since I stripped you down more than twelve hours ago. I have already seen you in situations no one else ever has. And as you know by now, the reason I stand guard over you is nothing personal.\"\n\nClearly having lost this round, Ryan got up and went to take his shower.\n\nHe got out and got dressed, hearing Eleftheria in the kitchen. To his dismay, she had made him a sandwich. A good one, as well. He wasn't sure if she needed to eat, or if she was even human, but apparently she knew how to cook. They had a brief argument as Eleftheria insisted she come with him.\n\nObviously Ryan lost the argument, but he was able to at least convince her that she needed to blend in more. She could not walk around town in her flimsy toga gown, and she definitely could not wear the few pieces of armor that completed her look. And she absolutely could not bring her golden spear.\n\nTo Ryan's dismay, Eleftheria proceeded to strip it all off immediately, right there, in the middle of his kitchen, while he was eating a sandwich.\n\nShe was tall, strong but lean, and also, perfect in every way. What captured his attention the most, though, were her breasts -- large, full, and heavy, but oh so firm. Still, they blended perfectly and naturally into her athletic body. Ryan could feel the energy from his tattoo start flowing.\n\n\"Come at me, little piggy, and I will slice you up,\" Eleftheria said, and slowly reached for the knife she'd used to slice the ham. Her smile was scarier than the weapon. Ryan had had no intention of \"going at her,\" anyway. She cackled, dropped the knife, and bounced into the bedroom.\n\nShe came back with one of Ryan's summer shirts and a belt she liked, and fashioned herself a dress out of them. It ended up being quite short and Ryan had just seen for a fact that she was wearing nothing under it. There's no way this can go wrong, he thought.\n\nEleftheria made a plan for the day. She wanted to gather Ryan's girls in the order he had touched them but Ryan insisted he had to go to work, first. She didn't really care, as long as they got to all of them before nightfall. Eleftheria made sure Ryan wore gloves.\n\nRyan still felt a bit dubious about this whole curse idea, and everything else that had happened, but he had seen enough sudden bursts of uncontrollable lust in the last 24 hours to make him go along with it. So off to work it was, even more late than yesterday, and accompanied by an unnecessarily jaw dropping bodyguard.\n\nHis reception when got to the office was quite unusual. Before Ryan even got to the front doors he could see Annie waiting outside. She was wearing another summer dress but this one was much more revealing than yesterday's. Her hair seemed purposefully done up, too.\n\nAs soon as Annie saw him she almost burst to tears and started running for him. She threw herself at him and surrendered into his arms. Carefully, she reached up to kiss him, and moaned into his mouth as their lips connected.\n\nRyan could feel the energy flow into her. He restrained it enough to not make the poor woman explode, but he didn't dare clamp it down completely. He'd learned his lesson from yesterday.\n\nAnnie pulled away with a shudder. \"I can't believe what's happening to me,\" she said. \"Please, Ryan, make love to me, right now. I haven't eaten, I haven't slept. For some reason I cannot understand, I've completely fallen in love with you, and there's nothing I can do about it. I...\"\n\n\"Silence,\" Eleftheria commanded.\n\nAnnie took notice of the other woman for the first time. \"What?\" She looked at her. \"Who's this?\" she asked Ryan, with fear in her eyes.\n\n\"Relax, poor woman. I have no designs on your prize,\" Eleftheria said.\n\nAnnie looked perplexed, but relieved, and was about say something when Eleftheria grabbed her and started to drag her into the building.\n\nRyan was too stunned to react at first but then jumped after them. \"Where are you taking her?\" he said.\n\n\"She has fallen too deep under the power of your seduction. You must relieve her immediately. She cannot wait until evening. And, since we are already here, you might as well serve the other one, too. This will surely render them more docile, and easier to control.\"\n\nAnnie was ecstatic at the thought of getting herself relieved by Ryan, but equally bothered by the idea of there being a the other one. She'd done what Ryan had told her yesterday, she hadn't confronted their boss Ms. Chandler.\n\nThey got into the elevator and Eleftheria told Annie to select the floor.\n\nRyan was getting a bad feeling about what would happen next. None of this had been in Eleftheria's plan. They were just supposed to talk to the ladies, discretely, and then carry on. Ryan was supposed to have asked for a few days off, but that should not have been a problem. He had vacation days to use. Now it seemed the plan had changed.\n\n\"This is your own fault. You have poured too much into her without release,\" Eleftheria said, as they were getting out of the elevator.\n\nThey continued bickering and arguing, walking through the office. Eleftheria dragged a confused looking Annie by the arm. Ryan followed right behind them. The conspicuous group was almost at the door of Ms. Chandler's office before Ryan realized how much attention they were attracting.\n\nMost women there could tell Eleftheria was wearing a dress fashioned out of a man's shirt.\n\nMs. Chandler's secretary was about to tell Ryan that the boss was already expecting him in her office, as soon as possible, but could not finish the sentence. Eleftheria had already opened the door, shoved Ryan and Annie in, and slammed the door shut behind them.\n\nEleftheria turned around, sat down, and leaned against the door. Some moments later, someone tried to open the door from the inside. Eleftheria leaned back and prevented the escape. The secretary tried to approach her but Eleftheria's grin was enough to scare her back.\n\n---\n\nAmid their protests, Ryan and Annie had been unceremoniously dumped inside. Ms. Chandler was surprised to see Annie, and not that happy with either of them. The boss got up and headed for them. Ryan thought he could see more thigh than usual. He definitely saw much more cleavage.\n\n\"What are you doing here?\" she hissed at Annie. Annie turned around and tried to open the door but it would not budge. Blushing horribly, she turned back around and cast her eyes to the floor.\n\n\"Good morning Ms. Chandler. I was told to come see you as soon as possible,\" Ryan started, unable to hold back a wry little smile.\n\n\"How dare you, you beast! You are late, again! I've been waiting here for you the whole morning, and now you just waltz in like you have no worry in the world. And what with this... this hussy here? What are you wearing, Annie? Has this man done something to you? Did he pressure you into dressing in a way that is uncomfortable to you?\"\n\n\"No!\" Annie jumped. She dropped her embarrassment in an instant. She actually had some fire in her eyes as she stared at her boss. \"Ryan is mine, and I love him. I don't know what kind of a game you are playing here but you can't have him.\"\n\nMs. Chandler was stunned into silence, but then turned her attention back to Ryan. \"What have you done to her? Did you do the same thing to her as you did to me? Answer me or I will call the police right now!\"\n\nThis is getting out of hand fast, Ryan thought. He would have to do something quickly. Luckily -- if you want to think of it that way -- all the tension had gotten his magical sex energy flowing quite nicely, and he was feeling pretty high. The power gave him the kind of false confidence he needed to make some questionable decisions.\n\nThe boss lady was still ranting when Ryan reached out and grabbed her by the throat. The whole room fell silent.\n\nBoth of the women appeared horrified, but unseen, the energy was flowing into Ms. Chandler. Ryan felt it flow, and could almost feel how it was affecting her. Her knees were already weak as she leaned into his grip. Her whole body blushed and she started panting.\n\nHe wasn't gripping her that hard. She could breathe all right, but her pupils grew wide and her gaze unfocused, regardless. She started kissing the empty air, her tongue licking her lips, trying to reach out to him.\n\nRyan had learned his lesson from yesterday and was careful not to overload his boss's libido. This time, he wanted to maintain total control over the situation, and over her.\n\nWhen he felt the time was right, he started to let her closer. Her kissing lips eventually reached his.\n\nRight as she was about to succumb to savagery again, he tightened his grip, just a little bit, and made her yield again. He took his time, enjoying the way he could control and modulate her aggression with his hold on her. Unlike yesterday, this kiss was compliant, almost like... Oops. Almost like Annie's.\n\nRyan broke the kiss to look around. Annie was still standing in the exact same spot she had been, transfixed by the sight of her fairytale prince holding another woman by the throat. Ryan was unable to decipher the look on her face.\n\nAs soon as Annie noticed he was looking at her, though, she panicked and turned to escape again. Ryan reached out with his free hand and grabbed her wrist. She stopped instantly, and shuddered with orgasmic convulsions. She fell to her knees as Ryan pulled her to himself. He tried to help her up but Annie just hugged his leg.\n\nRyan kissed Ms. Chandler again, and then pulled Annie up by the back of her neck. He made the women kiss each other and they were surprisingly willing to do so. The energy was flowing, and as soon as their lips touched, it formed some kind of a feedback loop. He could feel the energy flow from one girl to another and then back into him. He could feel their lips. It was as if he was somehow kissing himself, but very sensually, because both sets of lips felt deliciously feminine.\n\nHe savored the moment in wonder, until he felt like he might be in danger of loosing control again. Reluctantly, he let go of the women. As he stepped back the ladies continued to kiss. Their hands, which had previously hung down in surrender, now began to travel all over each other's bodies.\n\nRyan walked around the desk and sat in his boss's chair. Soon, the women broke off their embrace and looked at each other with puzzlement. A mischievous fire lit up in Ms. Chandler's eyes. She put her hands on Annie's shoulders, as if to push her to her knees.\n\nRyan was interested in seeing where this was going. He managed to remember why they were here, though, and decided to turn the attention back to himself. \"Stop,\" he ordered.\n\nBoth women stopped dead and turned to look at him, one with pure devotion and yearning, almost enough to break his heart, and the other with lust and scorn that made him rock hard.\n\n\"Down on your knees. Both of you.\"\n\nAnnie was desperately quick to comply. Ms. Chandler, on the other hand, took time look him in the eyes and challenge the order. She didn't say anything, though, and eventually did as ordered.\n\n\"Come here. Crawl to my feet. Stay on all fours. You, get under the table. Take out my cock. You, bend over the desk. You, start sucking. Go harder, do it like your life depends on it. You, lay flat, all the way down on the desk.\"\n\nAnnie was under the table. She was going wild. She was pushing her mouth onto his cock with complete abandon. She held on to Ryan's hips and pulled herself against him, writhing and twisting, and constantly switching angles. The sounds were obscene and she was already drooling on her chin.\n\nRyan told her to take his pants off. She kept his cock in her mouth as she complied. The rock hard member pushed deep against her throat when she yanked on his pants. Once she got them off, she threw them across the office.\n\nMeanwhile, Ryan lifted Ms. Chandler's skirt up. She was bent over her own desk. He pulled her panties down, just a little bit, just enough to reveal her dripping wet womanhood. He ran his fingers over her pussy lips, and around her clit, smiling as he made her shiver and moan. He pushed two fingers into her and twisted them around, but then pulled out.\n\nAs she turned to look at him, no doubt to glare at him, he gave her a good old slap on her bare ass. \"Say 'thank you, master,'\" he told her calmly, caressing her again. She recovered from her shock quickly and gave him that scornful glare.\n\n\"Thank you, master,\" she replied, after a pause.\n\nHe spanked her again.\n\n\"Thank you, Master!\" This time the reply came much faster.\n\nRyan had a better chance to really appreciate her body now. Yesterday, he'd been too shocked to completely realize what he was dealing with there. Despite the tantalizing fullness of her little ass, it was blatantly obvious the boss enjoyed her fitness and exercise.\n\nOne of Annie's lush, juicy breasts had fallen out of her dress and she had already slobbered on it. Ms. Chandler's naked pussy was leaking juices on Ryan's fingers. Just the mere idea of a scene like this would have been too much for Ryan a few days ago.\n\nThere he was -- Ryan Dobbs, ordinary guy -- sitting in his boss's chair, in her office, said boss bent over her own desk, him spanking her bare ass and getting thanked for it. All the while his secret office crush, the prettiest girl in the company, was under the desk, forcing herself to swallow him more completely than he would have dared dream of.\n\nHe had realized, though, that he didn't need to cum if he didn't want to. Also, if he did, the girls would calm down and the whole thing would be over. No, that won't do. The fun is just beginning.\n\nRyan stood up, and heard Annie hit her head on the bottom of the desk. She had tried to hold on to her price for too long. Ryan didn't care, not at that moment. His focus was already elsewhere.\n\nHe gave his boss's ass two big spanks, harder than before, and plunged deep into her pussy as she screamed her thank yous. Her hot cunt was wet and tight. She was gripping on to him. The heavy desk jumped with every thrust, causing an impressive amount of noise. Ms. Chandler herself was also starting to get loud.\n\nAnnie had crawled out from under the desk. Ryan grabbed her by the waist and sat her down on the table, next to their boss. Annie lifted them hem of her dress. Ryan was pleased to see she wasn't wearing any panties. Her soft pussy had a nicely trimmed tuft of hair above it.\n\nRyan used one hand to cover Ms. Chandler's mouth and to pull her head up, arching her back. The other hand he used on Annie. Annie covered her own mouth to silence herself.\n\nHer body twisted and writhed as she came over and over again, his hand pumping her cunt for one orgasm after another. The energy was flowing freely. After an awful lot of muffled screaming and panting, and heavy desk clanking, Annie finally collapsed onto Ryan's palm, and then slowly slid to the floor. It looked like she'd bitten her finger while trying to cover her mouth.\n\nRyan turned his full focus back to his boss. With his now free hand, he started to spread Ms. Chandler's juices all over her invitingly pulsating anus. Her protests went unheard because his other hand was still covering her mouth. She tried to push herself up but he pushed her back down. He gave her a few good spanks and went back to lubricating her sphincter.\n\nThis formula kept repeating for a while, and eventually he got his thumb into her, then one finger, and then two. Her ass was very clean and he was sure she had washed it for him on purpose. He was starting to catch on to her game. He doubled his pace, sending her to her biggest orgasm yet. Then he did the switch.\n\nIt was heavenly -- warm, tight, and pulsating. He slowly slid deeper and deeper. He used his other hand to gently squeeze her soaked pussy, and, liking her reaction, started to go harder. That was their pace for a while: he fucking her in the ass, quite fast and hard now, she squirming around under him quite uncontrollably, him grabbing her pussy, and her orgasms almost constant.\n\nHer moans had gotten lower and rougher and Ryan felt like she was nearing her limit. He gave her a few more thrusts, then stayed deep, and came inside her ass. The spunk was plentiful and he let it flow for a good few squirts. Meantime, he gave her ass cheeks a few more slaps and then rubbed her clit until he could once more feel her body spasm around his still hard erection. When her ass relaxed completely, Ryan knew she was done.\n\nRyan knew now that his ejaculation was the final part of the curse's life cycle. Ms. Chandler would now be able to go on with her life, hopefully at least until tomorrow, before she would be desperate for Ryan to ravage her tight little bottom again. Eleftheria had told him previously that no matter what, the curse always gave the women more pleasure than it gave him. If that was true, Ms. Chandler, his boss, was one kinky slut. Now, though, she was barely conscious. Ryan pulled out of her butt with a wet plop and left her lying on her own desk.\n\nAnnie was on her knees, on the ground. Her hand was working furiously under her dress and her face was as red as a beetroot. Still, she kept her eyes on his cock, and did not look away.\n\nHer previous orgasms had knocked her out for a bit but she recovered, and she still needed to receive Ryan's cum to get an actual release. She had been watching him fuck their boss in the ass for a while now. She could not believe how much she adored this man, even though, by all appearances, he was a savage brute.\n\nShe whimpered as he brought his throbbing member right to her face, even though it had just been inside the ass of another woman.\n\n\"Don't worry. She was clean. Taste it.\"\n\nShe took a careful lick. It did smell more like just sex and cum, rather than anything butt-related. She took it in, and while it did taste weird, she decided it was okay.\n\nRyan smiled down at his little slave. That word had horrified him last night, or rather, he had been horrified by how excited it had made him. But now, watching Annie slurp down on his cock, sex slave was the only designation that fit. He would not say the same of all the women he had already taken, though. They all seemed to keep their different personalities. Annie was just extremely eager to please.\n\n\"She had cleaned herself up for me because she knew I might want to take her ass. Maybe you should do the same in the future,\" Ryan said to Annie.\n\nHer eyes grew wide. She pulled the cock out of her mouth and took a few breaths. \"Yes, Master. Thank you, Master,\" she answered.\n\n\"Oh? I'm sorry. You don't need to say that. It was just something I said to Claudia because she seems to be into that kind of thing.\"\n\n\"Oh. I... Thank you. I just... I feel like calling you by name is not enough. I know something weird must be going on, and it should break my heart to see you with another woman, but I just can't help but feel like...\"\n\nThey looked at each other for a while, she kneeling in front of him, silently jerking his cock. It almost seemed like talking with him made her blush more than deepthroating him.\n\nA horrible thought occurred to Ryan. Maybe she's not acting like a slave, after all, maybe she really is just ridiculously in love.\n\nHe reached down and gently pulled her dress up and off of her. He saw her naked for the first time. She was beautiful.",
        "Her breasts were big, about as large as Eleftheria's, but not as otherworldly. They were full and firm and gorgeous, however, but in a more natural, human way. Her body was softer in general, too, in a very delicious and touchable way.\n\nEven though her makeup was running, she was blushing all over, was sweaty, and had drool on her tits, she seemed so happy it made Ryan's heart ache. He lifted her up and gave her his best Hollywood screen kiss. He bent her backward and held her for a long time as their bodies and lips melded together.\n\nRyan sat her on the desk.\n\nAnnie wrapped her legs around him and felt him enter her. She kept her body as glued to his as she could while he took her. It was slow and gentle. Her mind and her body had been scrambled by the constant orgasmic pleasure caused by the energy, but she could feel the next one building more slowly. It was like sunshine after a storm for her, and being this close to Ryan made her so happy she couldn't even cry anymore.\n\nMs. Chandler recovered enough to take note of her surroundings. Her muscles ached and she didn't have the strength to lift herself up yet. Her ass was on fire, but deep down in her belly, she felt this radiant happiness she'd never felt before. She wanted to hate Ryan for what he had just done to her. He'd probably drugged her, or something, and then had slapped her around like a dirty whore. He'd stolen her anal virginity, with complete disregard. But the hatred wouldn't rise. Instead, she felt serene and content, and lacked any ability to fight her happy feelings.\n\nJust like yesterday, the sheer pleasure of having sex with him had been devastating. What really scared her, however, was what she could only describe as a feeling of spiritual fulfillment. She had no love for Ryan, but the sense of peace and contentment he had somehow created in her was soul shattering.\n\nMs. Chandler could hear Annie and Ryan gasping and moaning next to her so she turned her head to see. What she saw made her try doubly hard to hate the bastard. What she saw could only be described as love-making.\n\nThat bastard had just forced her to feel the happiest she ever had by pulling her hair and fucking her in the ass, like a back alley gangster, and now he was making love to this other woman, sweetly and gently. They were wrapped around each other, like in a movie scene, almost moving in slow motion. Claudia pushed as hard as she could to scream in rage but all she managed was a little scoff of frustration.\n\n\"Shut up, Claudia. You've already gotten yours. Now it's her turn,\" Ryan said.\n\nThe cocky asshole had... Well, to be fair, I was the one with the cock in my asshole, Claudia thought. The arrogant idiot called me by my first name. It made her feel like a pet even though she was supposed to be the boss. Grudgingly, she admitted defeat. He had won this round. It was impossible for her to get angry right now because of how happy she felt. Next time, though, she vowed to fight harder. Later, she would be very angry at herself for so willingly assuming there would be a next time.\n\nThe door opened and Eleftheria stepped in. Ryan and Annie turned to stare.\n\n\"What is taking you so long? I thought you would be finished by now. People are getting restless out there, and we have much to do still.\"\n\nRyan redoubled his efforts, and soon Annie's final orgasm hit her like an earthquake. Ryan held their kiss as she screamed into his mouth. Her arms and legs trembled as he shot his seed inside her. The turmoil died down and her head fell back. She was completely unconscious and covered in sweat. Ryan let her down gently and pulled out. His cum started flowing out of her, dripping on the desk, and then on the expensive rug.\n\nRyan turned to Claudia, grinning like an idiot. Claudia followed him with her eyes as he grabbed a corner of her shirt and wiped his dick on it. All the while, Eleftheria was waiting.\n\n\"Well, who the hell is this then?\" Claudia said.\n\n\"What? Are you my mom now?\" Ryan let back.\n\n\"Listen, you punk, don't you get uppity with me now. I might just as well call the cops on you still,\" Claudia said, but her tone was too gentle.\n\n\"Claudia, come on. I just fucked you in the ass so hard you literally passed out. I think we are a bit past playing games. I understand now that that's your kink, or something, but now that we've taken care of all that, might we just talk like adults?\"\n\nThat definitely shook her facade.\n\n\"Look, I'm sorry, I didn't mean to be mean to you. I know you're afraid, and you want answers, and you'll get them. I promise. Both of you, come to my home tonight, and everything will be explained,\" Ryan said.\n\nClaudia glared at him again.\n\n\"Come on. I promise you it's the truth. Go to my place any time. Someone should be there. I need to go to a few places first, but I'll try to be there as soon as possible, and explain everything, or, rather, me and Ele... me and Ellie here will explain everything, to both of you.\"\n\nNow it was Eleftheria who glared at him. \"First of all, my name is not Ellie. It is Eleftheria. And it is I who will explain everything to these ladies, since you know nothing, except for what I have chosen to tell you.\"\n\nClaudia smiled.\n\nObviously, those two would become friends, Ryan cursed to himself.\n\n\"I need to take the rest of the week off. I have days left, so please handle that for me? Thank you. Just please don't fight, and don't call any cops, and all that. Come to my place and we will talk about everything. And please, make sure Annie is okay.\"\n\nClaudia was still bent over the desk, but leaning on her arms now. Ryan hurriedly pulled her panties back up -- well, almost up -- and then partially pulled her skirt back down. He helped her up but her legs were still weak so she had to sit back down on the desk. More cum squeezed out of her ass as the thong rode up between her sore cheeks. She let out a mousy little squeak.\n\nNone of her clothes had been torn, this time, but they were all completely soaked with who knows what once again. Her hair was a mess and her makeup was ruined, not to mention her desk. And then there was the other woman, still passed out, spread eagle. Claudia really wished she could be angrier right now.\n\nRyan's mind had cleared almost completely by now and even the euphoria was starting to ease. He became painfully aware of the enormity of the mess he was leaving the girls in. He flashed beet red and words escaped him. All he could manage was a little kiss on the tip of Claudia's nose, followed by the most awkward little smile, and then he fled the office with Ellie.\n\nRight after they had slammed the door shut one of the little legs of the desk gave up and the whole desk shifted awkwardly. The drop sent a jolt of pain and pleasure through Claudia's tender tush and she let out a very sexual sounding gasp. To her surprise, she could now feel her anger starting to burn. This was, by tenfold, the most insulting and humiliating thing anyone had ever done to her.\n\nIt took her a few moments before she could stand up, though, and then she heard a gasp from the door. She turned to look. It was her secretary, taking in the whole scene.\n\nBut Wait, There's More!\n\n\"The shopkeeper is our next priority...\" Ellie said, as they walked away from the building.\n\nI wonder if I'm ever going to go back there, Ryan thought absently, glancing over his shoulder.\n\n\"...she has gone the longest without your service and might be in dire need,\" Ellie continued.\n\nRyan shuddered, remembering how Claudia had gone full beast mode on him yesterday. Not to even say how nasty and domineering he himself had been acting recently.\n\nThey headed for the corner store.\n\nAs they stepped in, Ryan could see a man behind the counter. He was a big guy. More overweight-big rather than body-builder-big, but still. Dave, it said on his name tag. He seemed to be the only employee there.\n\n\"Hello. I'm looking for the girl who works here, um...\" Ryan was sure the girl had told him her name. Considering the circumstance it felt very wrong for him to not remember it.\n\n\"Emma?\" Dave suggested.\n\n\"No...\"\n\nDave paused. His eyes narrowed. \"You don't mean Lizzy, do you?\"\n\n\"Yes! Lizzy. That's her. Listen man, Dave, I really need to talk to her. Is she here?\"\n\n\"No, it's not her shift. And she called in sick, anyway. She was acting all weird yesterday, too. Seemed like a guy thing. Was that your fault? Did you do something to her?\"\n\n\"Whoa, hey there. I barely even know the girl. I just really need to talk to her, and it's real important. Do you have her phone number, or some contact information, or something? It really is important.\"\n\n\"Come on dude. You're just some random guy. I ain't gonna tell you shit.\"\n\nThe two men kept exchanging words and the argument slowly escalated. Ryan was high on his accursed energy and Dave had a not so secret crush on Lizzy so neither were willing to back down. Eleftheria had seen this coming the second Ryan had opened his mouth and she had started circling around the shelves.\n\n\"Wait a minute! Are you the asshole who broke my fruit stand?\" Dave said.\n\nEllie was now approaching him from the side and surprised both men when she sneaked up on Dave and grabbed him by the collar. She pushed him against the wall. To Ryan, it seemed like she was actually able to lift the big man completely off his feet.\n\n\"Hear me, you oaf, and hear me well. We have no time for idle nonsense. This is a matter of life and death, and it would serve you well to tell us everything we want. Right now.\"\n\nDave tried to struggle but he was unable to escape the beautiful blonde's iron grasp. After she shook him around a bit more, he was ready to spill the beans. He had Lizzy's number -- for work emergencies, he said -- but handily, he also somehow happened to know her home address, too.\n\nEllie let the big man down. He was too shaken to even be angry anymore.\n\nRyan and Eleftheria took a cab to the given address.\n\nIn a somewhat crummy hallway, they knocked on the door of Lizzy's apartment. No answer.\n\n\"I don't think she's here,\" Ryan said.\n\n\"No,\" said Eleftheria. She closed her eyes and turned her head to listen intently. \"She's in there,\" she said. She grabbed the handle and slowly twisted it until it broke off. The handle took the lock with it, and a little piece of the door, too.\n\nRyan had had no intention of messing with Eleftheria before. Now, he definitely never would.\n\nThe apartment was dark and silent. Lights were flashing in the living room, probably from the TV. Ryan peeked around the corner. Lizzy was there on the sofa, curled up into a ball, silently staring at the floor. She looked achingly cute and innocent in her simple, tight top and pajama bottoms. Ryan was just about to step closer when she turned and saw him.\n\nHer big green eyes grew wide and she was just about to scream, but then she recognized Ryan. Her mood shifted from fear to worry. Ryan, instead of a burglar, presented a different kind on danger to her.\n\n\"It's you,\" she said. \"Something weird is happening to me. I've been feeling weird since we met. I have to ask you, did you do something to me? Because I've been thinking about you, a lot. I've even had these dreams about you. I had this need to find you, to... It got worse and worse. I was so worried I might never see you again. It's the scariest thing I've ever felt. But now you're here and I'm still scared. Why do you make me feel like this?\"\n\nHer voice was wavering but she did not cry. She looked like she had cried at some point, though. Her brown hair had been in a high ponytail when they had first met but it was open now and reached her shoulders. It had a natural waviness to it.\n\n\"I'm so sorry about everything and it is my fault, but I swear I did not do it on purpose. Something happened to me right before we met and I let it affect you, too, when I touched your hands. I didn't know this would happen,\" Ryan said.\n\nRyan took Lizzy's hand and let the energy flow, just a little bit. He wanted to make her feel better. She gasped and a few tears of relief rolled down her rosy cheeks.\n\nHe started to explain the situation to her, and at the relevant moment, introduced Eleftheria, who had slipped into the room unnoticed. They explained everything to Lizzy together but Ryan skipped some of the other girls and pretty much all of the sexual details. He had to stop Ellie many times and felt embarrassed about the few things she let slip.\n\nThe idea of explaining all the details of his recent sexual escapades to this scared young girl made him horny, and he was angry at himself for that. He was also disappointed at how much he looked forward to what was inevitably going to happen next.\n\nBy the time they finished telling her the story, he was right up against Lizzy on the couch. Ellie had slid into a dark corner but had not left the room. Ryan let himself slip into his new dickhead-mode, but he was happy to have had the chance to explain everything to Lizzy with a clear head, and with real compassion.\n\nListening to the story had affected Lizzy. She was scared of the power Ryan held over her, but her fear was mixed with anticipation and arousal. She was shy and hadn't had many boyfriends. Lizzy was not a virgin, but this felt very much like a first time for her again.\n\n\"Don't worry,\" cocky Ryan said. \"I will make it all better. You'll feel so good you'll wonder why you were ever afraid at all. You'll feel safe and everything will be great.\" With these words, and a predatory grin, he let the energy flow more freely. Lizzy gasped.\n\nRyan took his time, slowly drawing lines with his fingers all over her arms, at first, and then the rest of her body. Wherever he touched her, she could feel an electric tingle of pleasure. She could then feel the tingles start to move through her body, and eventually they would all gather at her core, forming a pool of ecstasy. Somewhere far below this immense sense of raw pleasure, her only real emotion was a cold sense of inevitability. Deep down, she knew there was absolutely nothing she could ever do to deny this man, and that sense of utter surrender would eventually come to haunt her. Now, though, her mind was gone, and she was just flesh to be touched, and a body to be controlled.\n\nRyan had learned a lot about his new power in just this one day. He had much more control over the flow now, and he could target the energy much more precisely. He felt like Michelangelo, tracing this young girl's velvet skin with his fingers, painting pleasure into her.\n\nHe swam his way under her soft but form-hugging top. Her breasts weren't large, especially compared to Annie or Ellie, but there was definitely enough there to sink one's hands into. The energy was burning inside him, demanding him to unleash it all at once, to shock this girl into oblivion with a barrage of heart stopping orgasms. Ryan maintained his control, he regulated his flow. He gave her just as much pleasure as he wanted to -- no more, no less.\n\nSlowly, he lifted her top over her head. Her chest was now bare, and what Ryan saw was round and firm. There were already the beginnings of hand prints there, and this made him very happy. He gave a few more firm tugs and gentle slaps. This produced some very intoxicating gasps along with all the beautiful jiggling.\n\nLizzy was now writhing in pleasure, lying on the sofa, holding her hands above her head. Ryan pulled her bottoms down, enjoying the flesh he uncovered along the way. Once her pussy was finally exposed it was showtime. Ryan bent down and took as much of her hot womanhood into his mouth as he could and then he let the energy loose. The orgasms started to hit Lizzy fast, and they kept getting harder.\n\nRyan backed off to admire his work. As he pulled off his pants, it occurred to him that his dick looked bigger. He'd been okay before, but now it looked like a porn star's. Suits me just fine, he thought. He rolled the young shop clerk to her side, into a spooning position. Her pants were still around her thighs and they framed her ample hips gloriously. He entered her slowly, and then grabbed a breast and started moving.\n\nRyan realized these moves were for his own benefit only. The girl had been pretty much out of it since his very first touches but the sight of her shapely, glistening body writhing under him was irresistible. Every motion he made caused an instant reaction. A gasp here, a twitch there -- it was like conducting and orchestra. Ryan gently rolled his fingers over her hard nipples. He grabbed her all over just to feel the softness of her flesh. Her eyes were closed. Every time she bent her head back in ecstasy, Ryan bent in to lick her neck and her jaw.\n\nSince about midnight last night, Ryan had been fucking incredibly beautiful women almost constantly, but still, he felt like he could go for more. Up until now his encounters had been frantic and messy, but now he was in total control. This is much more what owning a harem should feel like, he thought. Just show up, push some clothes out of the way, and take what you want.\n\nIn the peace and quiet of that small, dingy apartment he enjoyed himself immensely, fully conscious of his actions and their ramifications.\n\nAfter a good long while, Ryan decided to officially welcome Lizzy into the family. Technically, her fate had been sealed the moment he had first touched her, but he felt like pumping her full of his cum somehow made it properly official, and full was not an exaggeration this time. There was definitely a lot more cum than there should've been. Ryan shot thick jet after thick jet inside this beautiful young woman. Must be another side effect. Maybe the magic will last them longer if I really pump them full of it, Ryan thought absently.\n\nAt the peak of his passion, he had slapped and squeezed Lizzy's ass harder than before, but not as hard as he'd done to Claudia.\n\nAfter Ryan calmed down, he was quick to get up. He wanted to get out while Lizzy was still in la-la land so he wasted no time in getting dressed. He wrote his address on a notepad and left it on the table.\n\n\"That was quite good. I'm impressed. You are learning fast.\"\n\nRyan got startled. He'd forgotten Ellie was in the room. Ryan had no time for banter, however. He already felt like he was going to start feeling bad soon so he just gave Lizzy a soft little kiss on the cheek and left.\n\nRyan's sexual energy seemed worryingly bottomless, but other than that, he felt quite tired already and he wanted to head back home.\n\nEllie insisted he had to finish what he had started and go see the tattoo girl, too, so after a few burgers and another cab ride, Ryan was staring at another one of his crime scenes from last night's spree, the tattoo parlor.\n\nHe remembered the girl. It's not like his other women weren't beautiful, they were -- and Claudia was even a bit intimidating -- but the tattoo girl had been something else. Maybe it was because of the heavy makeup, but Ryan remembered her to be absolutely stunning. She was more like a supermodel playing a tattoo artist in a movie, rather than an actual person you could meet in real life. She had that bad girl, tough girl look down like a piece of concept art. Chances were, Ryan thought, that if a dozen of her biker friends didn't murder him the instant he walked in that door, the girl was probably capable of doing it herself.\n\nAn indignant snort from behind him let him remember that he had a secret weapon, though. If anyone could murder a dozen bikers and one super hot bad ass tattoo chick right back at them, it was Eleftheria. Ryan would be in no physical danger here, only his fragile ego was in real jeopardy. And even then, if all went to hell, he could just reach out and touch the girl and become an evil mind control villain again. Sucking it up, he opened the door.",
        "The first thing he saw was a very lovely pair of long legs and firm buttocks, and it wasn't even his girl. A beautiful tanned blonde was lying on her stomach on the tattoo bench. Her long hair was a natural pale straw color. Her head was turned toward the door and her effortless smile was warm and welcoming. All she was wearing was a very thin yellow bikini.\n\n\"Hi there!\" she said, with a flirty tone, but that tone was so natural to her she might have gotten away with it even at a funeral. Then she squealed and giggled as the tattoo gun started to buzz.\n\nBehind her, though, was Ryan's final victim. She was wearing tall boots with significant heels, and fishnet stockings that led under a very short, flared skirt. Ryan could clearly see the tattoos on her thighs under the fishnet, and he could have seen all kinds of things under that skirt, too, if he had dared to let his eyes linger. From her trim, enticing waist up, it seemed like she was wearing nothing more than a very skimpy, very loose, ripped old top. It was all very punk, and very daring, and very much in line with her piercings and the outrageous cascade of purple hair on top of her head. The sides of her head were shaved and a few of her highest reaching neck tattoos were tall enough to tickle her earlobes.\n\nThat's a really sexy look, Ryan thought, especially on a tall and thin woman like her. But way too sexy for me. He'd never even dared to dream of a girl like her. Ryan was about to start considering the possibility that he might have to get used to her when the girl looked up and saw him. She instantly dropped her tattoo gun and there was a moment of complete silence.\n\n\"Uh... Stacy, I'm gonna have to cut this short,\" the tattoo girl said, with a voice that was more melodic and soothing than Ryan remembered. \"I'm really sorry. I'll reschedule you and give you little discount, if that's okay?\"\n\n\"No problem,\" Stacy, the blonde on the bench, chirped. She started to get up but she stopped and her face lit up. She turned to look at Ryan again, leaving her in a very suggestive body position on the table. She looked very limber. \"Wait a minute! Is this your guy from yesterday? The one you were talking about?\" she started, and the tattoo girl blushed. She quickly slapped a protective piece of plastic film on Stacy's hip and then herded Stacy off the bed.\n\nTattoo girl tried to get Stacy to go behind the privacy screen to change. All the while Stacy was giggling and teasing her. Stacy eventually ended up pulling on her skirt and top in the middle of the room. She was winking at Ryan and wiggling her hips but he still had no idea whether she was actually trying to signal anything or if this was just how she was. Ryan had always been jealous of people who were excessively positive and outgoing by nature.\n\nEventually, after many winks and giggles directed toward everybody -- including Eleftheria -- Stacy was out the door, and an awkward silence descended again. The tattoo girl just stood there and stared at Ryan with the most neutral of expressions. Her sharp features and glorious blue eyes gave him all kinds of hopes, but in reality, he had no idea what she was thinking.\n\n\"Hi. I'm Ryan. I came here yesterday,\" Ryan began, with a higher and breathier tone than usual. His head was swimming. He was beginning to feel horny and that felt very inappropriate. And, once again, Ellie was just watching by and smirking, letting him stew.\n\n\"My name is Remy,\" the tattoo artist said, appearing calm but reserved. She made no attempt to approach him for a hand shake.\n\n\"Yeah, nice to meet you, Remy. I don't know if you've noticed anything strange since yesterday, but there is a little bit of an issue that I'm dealing with. Actually, it has to do with the tattoo I showed you.\" Oh hell, this sounds like I have hepatitis or something, Ryan thought. \"Look, I have no idea how to say this, but...\"\n\n\"Who's she?\" Remy said.\n\n\"This is Ellie, she's a friend, she's just here for moral support.\"\n\nAfter a few more awkward pleasantries, Remy's mood started to shift. It seemed to her that the strange guy from yesterday was indeed here to just ask her out. He was shy as hell but she didn't mind. She could swing either way on introverts and extroverts. If he was a tenth of what she'd dreamed last night, it might be worth a shot. She usually gave almost everyone a chance. If a guy or a girl was brave enough to ask, one date wouldn't hurt anyone. Sometimes it even paid off.\n\nWhat had thrown her off at first was this unusual jolt of joy at the bottom of her belly when she'd seen him again. She'd even dropped her gun. That was definitely unusual, but probably it was just because of the dream, and the fact that she had been thinking about him, a lot. She'd even mentioned him to Stacy, of all people. Somehow, she had remembered him being more mysterious and charismatic, though.\n\nThe next thing that had hit her while Stacy had been doing her thing was the literally divine blonde the man had walked in with. At that point Remy had been sure this was just another threesome offer, but guys that shy didn't usually do that. Even the cocky ones rarely just walk in and start with it.\n\nIf he'd come in all mysterious and charismatic, and said, this is my girlfriend and we want to fuck you, Remy would probably have gone with them to a bar or something, at least, just to hear them out. But now he was all squirmy and shy and the woman was almost laughing at him. This was weird. Even his pitch sounded more and more like he wanted moving help or tax advice, or something, not a date.\n\nMaybe it's a dare or something, and that's why the other girl -- Ellie? -- is getting off on this. Remy decided to be a knight in shining armor. Time to let this poor guy out of his misery, she thought, and moved toward him. She made sure to act a little bit sexy, but not too much. She reached to touch his shoulder. That definitely broke his train of thought.\n\n\"Listen, you seem like a nice guy...\" she started, but then she touched his hand, and it was her thoughts that broke. The contact made her gasp. It was a jolt of pure pleasure. She backed away. She got wet and her nipples got hard. It reminded her so much of that crazy dream she'd had, suddenly she wasn't sure if she was awake or dreaming anymore.\n\nRyan looked at Remy. The release of energy had put him into his dickhead-mode again. Things were already a lot more to his liking. Gone was the unapproachable, perfect punk pin-up fantasy. Instead, he saw a horny little harlot, ready to go -- someone he could easily imagine bending over and taking for a ride. Her perky little nipples were trying to cut even more holes into her tattered top. So little fabric separated Ryan from what he wanted to see and grab. He took a step forward and ripped the top open. It didn't split completely but it was definitely ruined for real now and not just hipster fake ruined, anymore.\n\nRemy squealed, but did not cover up. Her arms were stiff against her sides and she pushed her chest out, even though she was clearly ashamed and confused by this sudden change. Her breasts were firm and round and looked good on her. They were even kind of big, in their own way. They were firm and tight against her body, completely ignorant of gravity.\n\nShe was shivering and squirming but held her place as Ryan ran his nails across her torso. The energy felt like it was scalding her. It was pure hot pleasure. He grabbed and twisted her erect nipples and she did her best to stay standing, despite her knees getting weak.\n\nAt the door, Ellie turned the open sign to closed.\n\nEven though Remy still technically had all of her clothes on, Ryan's access was quite unhindered. While running his hands all over her tight and slim body, including between the thighs, he had some time to think. Something had made him be rougher again.\n\nWhenever the energy was flowing, he felt like he could get glimpses of the girls' personalities. At first, Remy had felt a bit like Claudia, but there was a difference. Claudia felt like she got off on adrenaline, and being adversarial. Claudia wanted a fight and Ryan was more than happy raise the stakes with her a bit. It had been therapeutic to ass fuck the boss. Remy here was different, though. She was not bossy and she didn't feel confrontational. She didn't want to fight, but she did want something.\n\nRyan was pushing a lot of power into her and the girl looked like she was almost checking out already. On a hunch, Ryan decided to go a little lighter with the power. He started to talk to Remy, goading her. \"Who's a little slut, getting fingered right here, in the middle of her own shop? What a whore, gushing on a stranger's hand. We just met yesterday and now you're ready to let me fuck you. Do you get off on the idea of letting me do whatever I want to you?\"\n\nHe twisted a nipple harder than before and got a surprise. In the middle of the gasping and moaning, there was something that sounded like a word. \"What was that, slut? I didn't hear you,\" he said, and gave her a big old slap and a scratch, right on her ridiculously tight stomach. Ryan was painfully aware of her belly piercing now, but he didn't let it show.\n\n\"More,\" was the answer. \"Harder,\" she continued, with her first tears on her cheeks.\n\nRyan was happy to hear that. He kept molesting her and treated her like she was Claudia, but that didn't seem to do it. He decided to give her even less energy flow, and as Remy's head cleared, her demands got more and more extreme: Choke me, slap me, spit on me, tie me up and strangle me, burn me, tattoo insults into my face while you fuck me.\n\nThe list of things she begged to be inserted into her pussy and ass included items that would have definitely necessitated a trip to the emergency room, afterward. Even in his overconfident asshole mode, Ryan was taken aback by some of the suggestions.\n\nBy now, he'd pushed her to her knees and his cock was out. Remy dutifully opened her mouth, put her hands behind her back, pushed her chest out, and spread her legs, giving him full access to do whatever he wanted. She maintained eye contact and her gaze was full of need. She was begging for him to hurt her.\n\nRyan had his fun, for a while, shoving his dick down her throat and spreading the goo all over her sculpted face, but there was no actual blowjob. All she did was passively maintain her position and let him go at her. She was not an active participant, she was there to just take it, all of it. Anything at all.\n\nWhen she finally begged him to nail nails into her body and actually choke her until she died, and then to just keep fucking her dead body, Ryan lost his nerve completely. He didn't want to hear anymore of her suggestions. He stuffed his cock as deep down her throat as he could, just to shut her up, and then turned the energy to full blast.\n\nSoon Remy was safely lost in an orgasm coma. Her posture relaxed and her lips finally wrapped around his cock. She started sucking and even her throat relaxed more. Going slower and sweeter, Ryan could actually get deeper now, compared to the earlier jack-hammering.\n\nMuch better. There's a lot of stuff to go through there, but I'm sure as hell not going to do it now, especially with someone whose name I leaned less than fifteen minutes ago. With that thought, Ryan pulled her up by her hair, gave a few good slaps to her lean titties, and then bent her over the tattoo chair.\n\nHer pussy was exquisite. It wasn't as tight as some of the other girls', not loose either, but there was something extra she was doing with her muscles in there. The energy flow felt different, though. He could feel how pain and pleasure mixed in her body. Ryan was sure that, while causing pure pleasure for the other girls, the energy was causing both pleasure and pain for this one.\n\nHe was going hard, but just Claudia-hard, and not I'm-actually-trying-to-kill-you hard. He tried to thrust into her in a way that would make the loudest slapping sound. By now, she was constantly orgasming, no matter what he did, so it was back to business as usual.\n\nRemy's earlier apparent willingness to get objects inserted into her holes had left Ryan wondering, though. He saw no lube-like substances around so he just used all the natural juices already flowing to start working on her breathtakingly beautiful butthole. There was a lot of juices, to be fair. Pretty soon he had the tip of his cock in there. He thought he could tell this was something Remy might actually be into, for real. For her, it would probably be one of her smallest kinks.\n\nHe pushed her left leg up onto the bench, grabbed her hair, and went for it. Remy's ass was as talented as her pussy and she actively massaged him as he pounded her.\n\nAfter a while, Ryan decided to flip her over to her back. He put his hands behind her head, pulling it toward him. The position looked awkward, but considering the circumstances, he decided to hold it. The view was magnificent. Her toned abs were squeezed tight, her chest heaving rapidly. Her shiny, wet skin revealed every perfect shape of her perfect body. Ryan's every motion was reflected in the changes of her expression and in the noises she was making. Everything was in reach, from the tip of her toes to her puffy little pussy, and all the way up to her oh so pullable hair.\n\nHe went at her ass for quite a while like this, sometimes pushing her down, sometimes pulling her up. It was too bad she was so out of it her eyes were closed. Ryan would have loved to look deep into them. It was easy to see this was the best sex of her life, either way, same as it was for all the other women. Ryan was getting used to his new role as a master of a magical slave harem surprisingly fast.\n\nEventually, Ryan decided there had been enough savagery and he chose to let Remy down gently. He pulled out and wiped his cock on the paper sheet covering the tattoo bench. He had every intention of having Remy suck it again after he'd caught his breath but he could not help but be enticed by the glorious gape he saw.\n\nHer ass was wide open, and he'd never seen anything like it in real life before. The symmetric black hole was mysterious and beautiful, and Ryan could not help himself. He just had to pop a little surprise in there before he moved on. It was just a spur of the moment thing, an afterthought really.\n\nRyan then continued with his original plan and had Remy suck him clean. She did it really well even though she was completely out of her mind.\n\nRyan pushed his swollen cock back into her pussy. He lay on his back on the chair, and surprisingly, Remy was able to ride him just fine. She would even follow directions: slow down, speed up, and so on. Ryan held her hands and their fingers interlocked.\n\nOnly once he came inside her did he need to steady her. Her final orgasm was pretty huge but Ryan still felt like he had managed to introduce her to her new life quite gradually, at least compared to Annie, for example. Come to think of it, that had been just a few hours ago. Annie might still be unconscious for all he knew. And Ryan had already fucked someone else in between, too, before ever getting to this Remy girl.\n\nHe let her gorgeous, limp husk gently glide off of him.\n\nRyan wanted to sneak out fast again but it proved more difficult this time. He was totally exhausted. He'd spent more time fucking in one day than he normally spent doing any physical activity in a week. While the energy was flowing he could go on forever, but once it stopped, the fatigue caught up.\n\nHe got his pants on and found his phone but he was still missing his keys. It was already dark outside.\n\nEllie seemed to be in no hurry to go anywhere. She was uninterested in helping him look for them. Once again, he had forgotten she had been in the room, been there the whole time. Thank fuck I'm finally too tired to be ashamed of everything, Ryan thought.\n\nHe found some water bottles and sat back down on the floor with a few of them. It took him no time at all to down two, but by then he was feeling bad about everything again. Not just about Remy, but all of it. He looked at her and saw her looking back at him. She hadn't moved at all but apparently she was awake already. Busted. Too late to run now.\n\nShe was naked on the floor, next to the tattoo bench, curled up into a ball. No one said anything. Eventually she started to stretch open, carefully pushing her legs out and straightening up her back. She lifted herself on to one elbow.\n\nShe was still so beautiful Ryan almost forgot to breathe. For a fleeting moment, her pose was like a centerfold's: the long slim legs, the curve of her hip, the flexibility of her movements, the way her chest arched as she reached to touch her hair. Her makeup was beyond ruined but it seemed she might be even more beautiful without any. The heavy punk goth makeup had definitely not been there to hide any flaws.\n\nThen she started crying. \"Why?\" she sobbed. \"Why?\"\n\nOkay, time to get a gun and shoot me, Ryan thought. Fair enough. He wanted to console the poor woman but he knew he was the worst person to do it. This was all his fault.\n\nBut then there was a twist.\n\n\"Why am I so happy? I've never felt this good before. Every muscle in my body hurts, but I'm just so... I mean, it's not even drugs. I'd recognize that. My head is more clear than it's ever been and all I can feel is this joy, like all the weight of my whole life has been lifted off of me.\"\n\nShe had a little giggle break and then tried to lift herself up, but she wasn't strong enough to do it yet. \"What ever you've got, mister, consider me signed up. Whatever you want, I'll do it. I'll go lower than any crack whore and further than any fucking suicide bomber for you, just as long as you give me more.\"\n\nRyan was stunned. This girl was still just as crazy as before. \"Hi, I'm Ryan, nice to meet you?\"\n\n\"Yeah, you... Okay. I was kind of assuming you were hitting on me earlier, or trying to catch my attention, or something. So, consider me interested?\"\n\nRyan thought about it. \"Yes, there is a thing here. We will have to spend more time together. But I don't really know that much about what's really happening, either, so?\"\n\n\"Okay, I get it,\" she said, getting more serious. \"I've jumped into relationships with complete strangers for much worse reasons in the past. I just meant that you don't need to be afraid of me. You look so worried. I won't call the cops or anything. I just want you to know that I'm on your side, even if I have no idea what's going on.\"\n\nRyan crawled over to her and helped her to her knees. As he touched her, she gasped. He pulled her in and held her in a long embrace. \"I swear I'll never ask you to do any terrorist strikes, and I'll try my best to treat you like a very expensive whore instead of a cheap one,\" he said, and she answered with a deep, cathartic laugh. The laugh then turned into a squeal. Her insides were probably still quite sore.\n\n\"For real, though, I'm sorry for how rough I treated you,\" Ryan said.\n\n\"I don't think I even remember any of it. Except for a few things I said... Listen, since I kinda only half joked about how I feel right now, I think I have to be real with you. I've been through some horrible shit in my life, and there's a side of me I very rarely show anyone. I've had a bunch of boyfriends and girlfriends and side bitches, but there are very few people who've seen my real dark side.\n\n\"Sometimes, rarely, when I trust someone enough, I can show them how I... That sometimes I like to let people hurt me. I just feel like I... Who cares. That's my baggage, I guess, but that's not the point. The point is that you kind of jumped straight into the deep end, and I guess you saw the most horrible shit first. So thank you. Really. And please don't let me scare you off. Whatever your thing is, you really made me happy in a way I've never felt before, and I'd do anything to feel this way again.\" She was now sobbing again and Ryan held her tighter.",
        "\"So, a good first date?\" he asked.\n\n\"Well, I've never had one quite like this before, so points for originality, I guess.\"\n\n\"Come on. You're coming home with us right now,\" Ryan said.\n\n\"Okay, but I have to ask you something first.\"\n\n\"Anything.\"\n\n\"Is there something in my butt?\"\n\nIt was instantly back to beetroot city for Ryan. He flushed so hard it almost made him shake. He had totally forgotten about his little surprise. He took a deep breath and composed himself. \"I might have popped one of those little ink bottles in there at one point. I think it was an orange one,\" he confessed.\n\nShe sighed in resignation. \"Well, we're not going to go for it now so you'll just have to help me with it later.\"\n\nWith that, Ryan lifted her to her feet, but the indignities were not quite over, yet.\n\nFirst, there was the fact that her shirt no longer covered anything else but her sides. Second, her panties were nowhere to be found, but to be fair, they'd probably be useless anyway. Her fishnets were still somewhat wearable. With her skirt and her boots and a little jacket she had, she could just about sneak through the outside world, though.\n\nIn the taxi, Ellie reached into her cleavage and pulled out Ryan's missing keys. To his quizzical look she replied by telling him that he had already dropped them at Lizzy's place, and not at the tattoo shop.\n\nWhen Ryan, Remy, and Ellie got back to his apartment, they were greeted by the smell of food. Melinda, Doctor Andrews that is, was there, and she had been doing some good and honest home cooking. She'd had a sense there would be guests so she had made enough for everyone.\n\nAnnie from work was also there. She told Ryan what had happened after he left the office, whispering in private:\n\nAnnie had woken up to Claudia shouting at her secretary. Fittingly for a secretary, Claudia swore her to secrecy. Claudia had offered the poor girl no excuses or explanations. As far as Natalia, the secretary, could tell, Ryan just barged into the boss's office and then had almost an hour of floor shaking and furniture breaking sex with said boss and a colleague of theirs while some weird unknown amazon lady held the door shut without any panties on. What Natalia didn't know, though, was that that was all true.\n\nAnnie also told Ryan that Claudia had cursed him to all the hells for ruining her clothes again. Annie and Claudia had had to wait in the office while the secretary sent everyone else home. That was about the extent of Annie's story. As far as office gossip goes, this was bound to reach over nine thousand by tomorrow.\n\nThe rest of the evening at back at Ryan's was quiet and peaceful. Melinda and Remy had some trouble sitting right, but other than that, it was all lovely. The girls made some cursory introductions and gave each other some measuring glances but there was little actual conversation.\n\nRemy got the most of the glares since she was the only one who had not had a chance to shower, and she was barely wearing any clothes, and she had purple hair, and she had tattoos everywhere, and piercings and...\n\nShe took a shower right after dinner and Ryan got an answer to the question he'd pondered earlier. Remy really was absolutely and completely gorgeous even without any makeup.\n\nBy midnight, Ryan was ready to sleep the sleep of the dead, but there was one more issue to solve. Annie and Remy both showed significant interest in sleeping in the same bed with him. For a moment it looked like they were getting ready to fight it out.\n\nEventually, Ryan managed to convince them that they were all in a very unusual situation, and some unusual arrangements were going to be inevitable. The result was that, at least for now, all of the women got equal rights to sleep where ever they wanted -- in his bed, in the guest room, on the couch, or in their own homes.\n\nRyan went down cold almost instantly but he got to see Annie had come prepared. She had brought her own pajamas. Remy had to design hers out of Ryan's clothes. Somehow, Annie ended up feeling like she had lost that round.\n\nMelinda was going to sleep in the guest room.\n\nThe last thing Ryan felt was the warm embrace of two incredibly beautiful women, one under each arm. It was a good thing he had such a big apartment and such a big bed. Other than that, he didn't have much. Except for women now, apparently."
    ],
    "authorname": "FacetiousTales",
    "tags": [
        "anal sex",
        "harem",
        "magic",
        "male dominant",
        "office",
        "workplace"
    ],
    "category": "Mind Control",
    "url": "https://www.literotica.com/s/the-cursed-tattoo-pt-02"
}
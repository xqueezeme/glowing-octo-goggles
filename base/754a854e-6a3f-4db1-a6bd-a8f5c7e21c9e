{
    "title": "The Hot Date Mystery Ch. 03",
    "pages": [
        "This story is part of an ongoing series. The chronological order of my stories is now listed in WifeWatchman's biography.\n\nFeedback and constructive criticism is very much appreciated, and I encourage feedback for ideas.\n\nThis story contains graphic scenes, language and actions that might be extremely offensive to some people. These scenes, words and actions are used only for the literary purposes of this story. The author does not condone murder, racial language, violence, rape or violence against women, and any depictions of any of these in this story should not be construed as acceptance of the above.\n\nPart 11 - The Crime Scene\n\nKrueger continued: \"It's in small print, right near the bottom. It isn't clickable, but it's there.\"\n\nI'd expected one development, not two. I told Myron to let Lt. Masters in Vice know, and also to tell our SWAT Teams to be ready for possible action. As he left, I headed out to Ronald Reagan Park...\n\n* * * * * * * * * * * * * * * *\n\nThe River is the western border of Ronald Reagan Park. The entrance is from the south, leading to a huge, open field with some of the Disc Golf holes around the edges of it. To the north the land rises into a hill, which is wooded. More disc golf holes go through there, as does a concrete walking path that encircles the entire park. \n\nIt was up on this hill, inside the woodline, that the mortal remains of the unfortunate Andy Martoli had been found. Police cruisers and the ambulance had used the walking path to drive up to the area. The sun had set, and the only lights were from streetlamps and the klieg lights set up to illuminate the scene. A tent had been erected over the immediate site where Martoli had been found.\n\n\"Fingerprints match those of Andy Martoli's.\" said Detective Teddy Parker when I came up to the scene. \"He was fingerprinted for a background check for his work, and again when he applied for a concealed carry license. Also, his wallet was in his pants pocket. No cash, but the credit cards were there as well as his drivers license.\"\n\n\"This is a disaster.\" I said as I looked around. \"Detective Warner!\" I called out. She hurried over, all but running. I said \"Did anyone look at this crime scene before all these vehicles drove up?\"\n\n\"Er, I'm not sure, sir.\" said Joanne.\n\n\"Definitely a teachable moment, wouldn't you say... Captain Ross?\" I said, knowing Cindy was sneaking up behind me.\n\n\"Unfortunately yes, sir.\" said Cindy. Not elaborating, I strode up to the tent and went inside, where the Christina Cho and J.R. Barnes were making notes while Martha the M.E. examined the body. Martoli had been found lying on his back.\n\n\"I smell formaldehyde.\" I said as I came up to Martha.\n\n\"Not much gets by you, Commander.\" Martha said, trying to hide a grin as she said it. Realizing I was being teased, I let it go. Martha continued: \"Yes sir, the body was exsanguinated, then preserved with formaldehyde being injected into the blood vessels. Don't ask for a time of death; it's been days, but it's going to be hard to pin down because of the preservation techniques used.\"\n\nI put on latex gloves and picked up Martoli's hand. \"Wow, very cold. Refrigerated as well?\"\n\n\"Yes sir.\" Martha said. \"But not frozen.\"\n\n\"So he was brought here very recently and dumped here.\" I said. \"Detective Warner! Have the Mouseketeers been asked to obtain any camera footage of the area?\"\n\n\"Yes sir.\" said Teddy Parker, answering for Joanne. \"I called them. They already have a documented process for getting footage in and around the Park, and they're implementing that.\"\n\n\"Good.\" I said. \"Pretty obvious what happened here, isn't it, Detective Warner?\" I noticed Cindy peer at me.\n\nJoanne answered. \"Yes sir. Mr. Martoli was killed some time before, then dumped here just tonight.\"\n\n\"How was he killed?\" I asked Martha.\n\n\"No obvious stab wounds or bullet holes.\" said Martha. \"But we haven't fully undressed the body yet. From this needle mark on the neck, I'd suggest he was injected with poison. They may have begun putting formaldehyde into him while he was alive. I'll know more after the autopsy.\"\n\n\"Okay. Thank, Martha.\" I said. \"Detective Warner, who called this in?\"\n\n\"Anonymous tip, sir.\" said Joanne. \"9-1-1 got a call at 7:05pm. Phone number is a burner, and the caller refused to give a name. He said he didn't want to get involved.\"\n\n\"Male caller?\"\n\n\"Yes sir.\" said Joanne. \"9-1-1 played the call for me.\"\n\n\"Nice.\" I said. \"Well, not much else to see here. I'm going to Headquarters and see what the Mouseketeers have for me in the way of video.\"\n\n\"Sir, any strangenesses?\" Joanne asked.\n\n\"How can I tell?\" I replied, acid in my voice. \"The area around this crime scene could not have been destroyed any worse if I had asked them to do it.\" With that, I stalked off back to my car. The Green Crowbar followed, and Cindy got in the SUV with me.\n\nAs we drove back to Headquarters, Cindy said \"You were rough on Joanne tonight.\"\n\n\"Tough love.\" I said. \"Lighting a fire under her ass. She's going to be a great detective, but tonight is not going to be remembered as her best moment. And I'm disappointed that my four years or more of teaching crime scene preservation has been shown to be of absolutely zero value.\"\n\nCindy nodded, knowing that some refresher training was coming, and it would not be pleasant for her Detectives.\n\n\"And of course,\" I said, \"you will go behind me and pick Joanne up and rebuild her. Good cop to my bad cop.\"\n\n\"Oh yes.\" Cindy said. \"I just want to be sure you're okay when you bring down the hammer. By the way, you were all but predicting this. How did you know?\"\n\n\"I had a small but nagging idea in the back of my head.\" I said. \"I'll tell you all about it later. Right now, I want to see the surveillance footage.\"\n\n* * * * * * * * * * * * * * * *\n\nWe were in Classroom 'E'. Myron and Mary were showing me the footage.\n\n\"There are Park Maintenance trucks driving around, doing different things.\" said Myron. \"They go around emptying trash cans just before sunset, and I'm told they do that so if anyone dumps drugs in the trash overnight, we can find those drugs more easily.\"\n\n\"That's actually a good idea.\" I said. \"So... what is this van I see?\" There was a van on the walk path, with the 'Town & County Parks & Recreation Department' logo on the doors and back.\n\n\"That's the vehicle of interest, sir.\" said Mary. \"The license plate is fake; no vehicle registered for that tag. Also, Parks & Recreation doesn't use vans for any maintenance. As you can see, sir, it drove around the walking path up into the woods, stopped right around where the body was found, then a moment later drove off again. We don't have anything better that shows the people in it or what happened when the van stopped.\"\n\n\"Good enough.\" I said. \"Good work, guys. This shows me a few things. Y'all can go home if you don't have anything else.\"\n\n\"Sir, they're getting a warrant to search Martoli's home.\" said Mary. \"So we'll hang around until that's executed.\"\n\nI looked over at Cindy, who was sitting next to me, to my right. \"They haven't done that already?\" I asked.\n\n\"Judge Folsom's warrant let us go in to check the premises for Martoli and for any obvious signs of foul play. But he specifically forbade us from taking anything out of the apartment without another warrant. If we'd found an atom bomb there, we couldn't have done anything about it. And we found no blood, no signs of struggle. The apartment was clean.\"\n\n\"How clean?\" I asked as 'something' hit me. My question caused that 'something' to hit Cindy, too. She said nothing, but just arched her eyebrows.\n\n\"Let's get over there.\" I said.\n\n* * * * * * * * * * * * * * * *\n\nCindy and I beat everyone else over there. Joanne and Teddy had stopped by the Courthouse to get the freshly printed warrant, and were now executing it along with Sergeant Rudistan and Sr. Patrolman Morton.\n\n\"No sign of forced entry on the door.\" I said as they came up. The TCPD's photographer and videographer, a pretty Asian woman named Kim, filmed the doorway.\n\nThere was crime scene tape over the door from the Police's last visit, and I made the proper notations and cut the seal. We went inside.\n\n\"Absolutely sterile.\" Cindy said. Sure enough, the place looked like it had been staged to be sold. Everything was clean and in place. All the dishes were clean and in the cabinets. There was no food in the refrigerator nor freezer. All of Martoli's clothes were laundered and put away neatly; the suits that were hanging in his closet were spaced the exact same distant apart.\n\n\"That's taking it to an extreme.\" I said, pointing that symmetry out. \"It's like a West Point plebe's closet.\" Cindy nodded.\n\n\"No blood anywhere.\" Joanne noted. \"All the windows are shut and locked, and don't look like they've been opened.\"\n\n\"No, he wasn't killed here.\" I said. \"Whoever killed him took his keys, came in here, may or may not have taken anything in preparation for his date with Terry Schultz, then the 'cleaners' came in and sterilized this place.\"\n\n\"Sir!\" called out Teddy Parker. \"Martoli's BMW is sitting in the parking lot, in the designated spot for the apartment!\" We went out and looked. Sure enough, there sat the vehicle in question.\n\n\"Get video footage if you can.\" I said. \"I don't think this place has good coverage, but see what you can find. And canvass the neighbors; see if anyone remembers that car driving up, and when.\"\n\nThe Crime Lab would come in later, but they would find no fingerprints nor anything else that gave us any help to identifying and finding Martoli's killer or killers, much less Terry Schultz's killer or killers. Video coverage was indeed poor, and we got nothing of value from that, nor from interviews with other people, most of whom didn't want to get involved.\n\nPart 12 - Data\n\n\"This is Bettina Wurtzburg, KXTC Channel Two News!\" shouted the lovely redheaded MILF as she stood at the entrance of Ronald Reagan Park at 7:00am, Tuesday, January 24th. \"Channel Two News has learned that the body of Anthony Martoli was found last night, here at Ronald Reagan Park!\"\n\n\"Mr. Martoli was being sought in connection with the murder of Terry Schultz, C.E.O. of Schultz Elite Staffing.\" Bettina continued. \"He was an employee of Dakota Funding, Inc., a structured settlement loan company. Police have no comment on how Mr. Martoli died nor how his body was discovered in the Park, but Commander Donald Troy admitted that Mr. Martoli's death is very likely related to Terry Schultz's murder.\"\n\n\"And let's go to Nick Eastwood for breaking Sports news!\" Bettina said. \"Nick!\"\n\n\"Thank you Bettina!\" said Nick Eastwood, reporting from outside the University Athletics Department offices. \"Channel Two Sports has learned that in response to being stripped of her basketball scholarship and suing the University over it, Jayne Hallerton is suing women's basketball coach Matt Snelling for sexual harassment. Three other female athletes, two basketball players and one member of the Track team, have come out and accused Coach Snelling of sexually harassing them, as well.\"\n\n\"Assistant Athletic Director Miles Messervy, who approved of stripping Hallerton of her scholarship over the weekend,\" continued Eastwood, \"issued a statement saying that the allegations against Coach Snelling will be fully examined, and is placing the coach on administrative leave with pay while the investigation takes place.\"\n\n\"That did not sit well with Coach Snelling,\" said Eastwood, \"who filed a countersuit to Hallerton's legal complaint, accusing her of slander and retaliation for being kicked off the team. He also has filed a lawsuit against the University for wrongfully suspending him without cause. It can only get uglier from here, Bettina.\"\n\n\"That's very true, Nick.\" Bettina said. \"Patricia Iceland, president of the State Organization for Women, the SOWs, issued a statement of support for Jayne Hallerton, saying that this is yet another case of women being sexually harassed by male employers at the University, and the School doing nothing about it. Also, Citizens for Police Accountability spokesmen Jay Swenson and Ken Eidex issued statements calling upon women to march in protest of the treatment of these women by the University.\"\n\n\"And in State news, yesterday's report of a compromise budget and SBI bill was strongly disputed by 1st District State Senator Katherine Woodburn. Roll tape.\"\n\nThe tape played, showing Katherine screaming at the collection of Press microphones in front of the State Capitol, her face red with fury: \"There is no compromise with the safety of our children! We continue to demand that a strong State Bureau of Investigation be fully funded, and given the authority over all counties and the City in order to protect our children from predators and drug dealers! Any reports of compromise with those principles is just more false rhetoric from the Republicans!\"\n\n\"How's Teresa feeling?\" I asked Cindy as we drank coffee in MCD with the Detectives.\n\n\"Much better today.\" Cindy said. \"She's getting blood taken, so she'll be here late. And she's planning on being at the Council meeting tonight.\n\nCue Bettina: \"And tonight's Council meeting will be in executive session as the Council takes up personnel matters. There will be no public meeting tonight.\"\n\n\"Ask Teresa to put the SpecOps Teams on high alert.\" I said to Cindy.\n\n\"You think something is about to happen?\" Cindy asked in reply.\n\n\"I sure as hell do.\" I said.\n\n* * * * * * * * * * * * * * * *\n\nOnce in my office, I explained to Cindy what was going on.\n\n\"You remember we uncovered the code phrase 'Pink Knights' in connection with those Citizens for Police Accountability demonstrations earlier?\" I asked. The anti-bugging device was in use.\n\n\"Yes.\" Cindy replied.\n\n\"It showed up on the CFPA website last night.\" I said. \"Right at the same time Andy Martoli's body was found... and that body being found by the help of an anonymous tip, I might add.\"\n\n\"O-kay.\" Cindy said, probably hoping I'd just tell her instead of making her work at it.\n\n\"Did you also notice,\" I continued, \"just how angry Katherine Woodburn was at those reports of a compromise SBI bill?\"\n\n\"Now that you mention it,\" Cindy said. \"Yes, she was mad. She always seems to be mad and shouting, though, so it's hard to tell.\"\n\n\"True enough.\" I said. \"But take my word for it, she was truly upset in that little snippet this morning. And you'll remember how I was so avidly watching the evening news last night?\"\n\n\"Yes... oh, and that's when the announcement of the compromise bill went on air.\" Cindy said.\n\n\"And an hour later... we find Martoli's body.\" I said, peering at Cindy.\n\n\"You're saying that was cause and effect?\" she asked back.\n\n\"My dear Captain,\" I said, \"what do we think about coincidences?\"\n\n\"As little as possible when you're around.\" Cindy replied. \"Oh wait... you talked to David Krueger, who was once a Jared staffer... ohhhhh...\" I could see she was beginning to connect the dots.\n\n\"Yes.\" I said. \"That compromise story was a planted leak. It caught Katherine Woodburn totally off-guard, which is why she's so upset; she'd heard nothing about a compromise and thought one had really happened behind her back. That has the additional value of showing how paranoid she is about the SBI bill.\"\n\n\"Oh, and didn't that report say you were on your way to Midtown to help with the bill?\" Cindy said, remembering.\n\n\"Ahhhh, and you yourself noted then that I was not really on my way down there.\" I replied with a grin.\n\n\"Good grief.\" Cindy said. \"So.. .why?\"\n\n\"First,\" I said, \"I wanted to find Martoli's body... and we have.\" I said. \"Saved a lot of time having to search for it.\"\n\n\"Good Lord.\" Cindy said as the implications of that hit her.\n\n\"Yes.\" I said. \"I put a little test out there... and someone failed it.\"\n\n\"Okay, you're making my head hurt.\" Cindy said. \"So please just tell me the whole story.\"\n\n\"Okay.\" I said, knowing Cindy's patience was at an end, and then some. \"I believe Terry's death was a professional hit. Someone killed Martoli and took his place on the date with Terry. After indulging himself by having sexual intercourse with Terry, the perp murdered her and took her computer. Then a third party came in and replaced the computer.\"\n\n\"That all happened,\" I said, \"in a manner that was very timely for someone. It delayed me going to Midtown to work on the SBI bill for 24 hours. And when it looked like I was going back down there again... Martoli's body was found.\"\n\n\"Good grief, you and your theories!\" Cindy said, shaking her head. \"You think she was murdered just to stop you from going to Midtown?\"\n\n\"No, not just for that.\" I said. \"But someone knew that was coming, and used it to serve his or her purposes. Someone really did want Terry dead, though, and that likely would've happened no matter what is going on in Midtown.\"\n\n\"To play Devil's Advocate, could Terry's death actually be a coincidence?\"\n\n\"Possibly.\" I said. \"But I plant a leak and then Martoli's body shows up... and that makes two coincidences. And per Dame Agatha Christie, that means there are really no coincidences.\"\n\n\"It all... makes sense, somehow.\" replied Cindy. \"So, any chance of catching the murderer?\"\n\n\"Oh sure.\" I said. \"The way Martoli was killed isn't just some street corner shooting. But we need more data from the State Crime Lab regarding DNA, and we need to hear more from the Mouseketeers about the 'Red Flag' victims.\"\n\n* * * * * * * * * * * * * * * *\n\nAt 8:45am, Teresa Croyle arrived. A short 'Angels' meeting was held.\n\nAt 9:00am, the MCD Detectives, J.R. Barnes, and the Mouseketeers convened with myself and the Chief in Classroom 'E'. The Chief brought doughnuts, which disappeared with amazing speed.\n\n\"All right,\" said Cindy, \"let's get this party started. Anything from the State Crime Lab?\"\n\n\"Not yet, ma'am.\" said Joanne Warner. \"I called Lt. Perlman this morning. She is having the DNA run through national databases with the FBI's help.\"\n\n\"That means,\" I said, \"that she's onto something, and has brought Jack Muscone and his FBI team in on it. That might be a good thing, too. Okay, sorry to interrupt. Carry on.\"\n\n\"Yes sir.\" said Joanne. \"J.R.?\"\n\n\"First, the crime scene.\" said J.R. \"Commander, I take responsibility for what happened there last night, and I will do what I can to prevent it from happening again.\"\n\n\"Thank you for stepping up, Mr. Barnes.\" I said. \"It's not all on you. Everyone from myself on down has responsibility for that, and we will all be receiving refresher training from someone eminently qualified to give better training. In the meantime, what's your report?\"\n\n\"We didn't find much at the crime scene, sir.\" said J.R. \"The wallet had only Andy's fingerprints on it. There were no objects left near the scene, not even any trash from anyone. In his apartment, we found no fingerprints nor hairs nor anything else that could help us. We do think Andy had a computer at home, which was not present and therefore may have been stolen. His laptop is not pinging, so the Mouseketeers tell me, nor is his cellphone, which also has not been found.\"\n\n\"Next, the forensics: Martha hasn't filed the official autopsy yet.\" said J.R. \"She says this is one of the most baffling but interesting autopsies she's ever done. She gave me a quick-and-dirty preliminary report, though. She said the death was likely cardiac arrest from an injected poison. She also believes her first guess was right that they started putting formaldehyde into his body before he died. Needless to say, it's going to take a ton of tests, and Martha sent a lot of samples to Lt. Perlman for extended analysis.\"\n\nBarnes continued: \"Martha also said that Andy was hit on the back of the head, which fractured his skull but was not enough to kill him. And despite the preservation techniques, she's been able to determine that Andy was killed some time last week, maybe as early as Wednesday, but more likely Thursday. Up to Friday noon is within the realm of possibility, she said.\"",
        "\"Makes sense.\" I said, almost to myself. \n\n\"Why not wait until Friday, just before his date with Terry?\" asked Theo Washington.\n\n\"They could have.\" I said. \"And they might have killed him Friday morning. But kill him Thursday night, and he doesn't cancel the date with Terry at the last minute, or have something come up. And it gives them time to preserve his body for later dumping.\"\n\n\"Them?\" asked Cindy.\n\n\"Oh, there's gotta be two or more.\" I said. \"Carrying the body around, cleaning up his apartment, and so on.\"\n\n\"Why did they bother doing that? Dump him like they did?\" asked Joanne. \"I get it that someone killed him to take his place on the date with Terry. But once that was done, why not dump Andy in the River or something? Why preserve the body, keep it cold for days, and then dump it last night?\"\n\n\"And send an anonymous tip to find his body.\" I added. Everyone but Cindy looked confused. I said \"Okay, Green Crowbar, who and what is next?\"\n\n\"M-O-U-S-E!\" sang Cindy.\n\n\"Thank you, ma'am!\" Myron said. \"That makes my day.\"\n\n\"Chief Griswold would approve of your ass-kissing, Myron.\" Cindy said, making everyone laugh. \"What have you found?\"\n\n\"Two big things, sir, ma'am.\" said Myron. \"First, after the Commander made that revelation about someone else putting the computer back, we went and re-examined all the camera footage from around the apartments, as well as the systems. In theory, this system can't just be turned off, and if its computers go down and automatically reboot, a notation is sent to the security monitoring company.\"\n\n\"The company never got any messages that the systems were disabled in any way,\" continued Myron, \"but we think there was some tampering. The system is digital and records digitally, somewhat like cellphone cameras. There are two servers. One records for 24 hours while the other erases, then the other records for 24 hours. Because it's on motion sensors that generally record 30 seconds or less at a time, this should be sufficient storage.\"\n\n\"However,\" Myron went on, \"there appears to be something in the software itself, that allows an override of the messaging system. It also can be set that when the 2nd floor sensor of Building 4 goes off, the 3d floor camera records. Ergo, we have some recordings of blank hallway spaces when it should be recording someone who tripped the sensor.\"\n\n\"Interesting.\" I said. \"Who maintains the system?\"\n\n\"Tom and Tina Yaris, who live right below Terry Schultz, maintain the system as part of their duties for the HOA.\" said Myron. \"There are systems for each building that feed a central office in Building Five, and Tom Yaris maintains it himself.\"\n\n\"Let's get material witness warrants and bring them both in.\" I said. Joanne got up to do that, but Cindy stopped her.\n\n\"You stay here. I'll get Paulina to get the warrants.\" Cindy said. She left the room.\n\n\"Anything else?\" I asked. Myron had nothing. It was Mary's turn.\n\n\"Sir,\" Mary asked, \"is it okay to discuss the information I have in front of everyone?\"\n\n\"I understand why you're asking that.\" I said, protecting her. \"And yes, it's okay.\"\n\n\"In addition to Greg Towson and Dan Walther,\" Mary said, \"we've identified two other strong possibilities. One is named Bart Bell. He's a speech therapist... well, he was. He was 'red-flagged' about a year ago, and then his wife hired a P.I. and got more on him. It came out in the divorce, which was really ugly, that he was seducing the mothers of the children he was hired to work with on their speech impediments. As part of the divorce, his wife's lawyer made a complaint to the State Medical Board, and they hammered him.\"\n\n\"I'm sure that every one of these 'red flags' is a story like this.\" I said. \"What makes Bart Bell special?\"\n\n\"Both his wife and Terry Schultz got restraining orders against him.\" Mary said. \"He said in front of a number of people that he wanted to kill both of them. As of right now, he is the only 'red-flagged' person known to make such threats or have a restraining order against him asked for by Terry Schultz.\"\n\n\"Okay, that does make him special.\" I said. \"And the other one?\"\n\nCindy came back in the room and sat down as Mary answered:\n\n\"The other is Michael Miller. He is the Executive Manager of the State Credit Union here in Town. The State Credit Union is all over the State, serving State Government employees. We County employees are also eligible to be members there, but I digress. Mr. Miller also is the primary officer of a small finance company that he calls a 'venture capital' company. It's called 'MMVC, LLC.'. He's one of the financial backers behind Dakota Funding, Inc.\"\n\n\"Ahhhh.\" I said. \"Connection to Andy Martoli.\"\n\n\"Yes sir.\" said Mary. \"The thing about his case, though... he was 'red-flagged', but his wife would not have really needed to use Terry's service to catch him. He was a well known philanderer... what some would call a 'player'. He's also a lawyer, and so when his wife filed for divorce he knew the law and he was cronies with the judge, who was Harry Nance. He took his wife to the cleaners, and left her virtually penniless. She got a job as a secretary for Forbes & Sehgal Engineering, and they pushed back when Miller tried to get them to fire her. That job is all that has kept her afloat.\"\n\n\"So he doesn't seem to have the same level of motive.\" Joanne said. \"He won.\"\n\n\"But he has better means and opportunity.\" I replied.\n\n\"Seems this Bart Bell might be the one.\" said Theo Washington. \"He's made threats.\"\n\n\"But he has no money.\" said Joanne. \"How does he hire someone to kill Terry, if indeed it was a professional hit? And he would have to hire someone... Terry is going to know all of these 'red flag' guys, and would never go on a date with any of them.\"\n\n\"Great observation, Joanne.\" Cindy said.\n\n\"Yes it is.\" I said. \"As to coming up with the money: where there is a will, there is a way.\" I said, in the form of a quotation. \"Okay, is that everything, Mary?\"\n\n\"For right now.\" Mary said. \"We're still working on all the names.\"\n\n\"Good.\" I said. \"Okay, let's stop theorizing and get some data. Let's get material witness warrants for Bart Bell and Michael Miller. Captain Ross, take one of these Detectives and go see Dan Walther. I'll handle Greg Towson myself.\"\n\nPart 13 - Assisting In Their Inquiries\n\nI called Patrolman Louie Towson. \"Your brother, he's still with the Fire Department?\"\n\n\"Yes sir.\" Towson said. \"Station 3.\"\n\n\"Is he on duty now?\" I asked.\n\n\"No sir, he goes back on tomorrow.\" said Towson.\n\n\"Call him and bring him in.\" I said.\n\n\"The Schultz murder?\" Towson asked.\n\n\"Yes.\" I said. \"If he wants a lawyer or Union rep, have him bring one. By the way, I\"m going to handle his case personally, so ask him to be cooperative.\"\n\n\"I appreciate that, sir.\" Towson said, knowing what I meant when I said I was handling his brother's case 'personally'.\n\n* * * * * * * * * * * * * * * *\n\nI had Fireman Gregory Towson brought to the Main Conference Room. With him was his brother, Patrolman Louie Towson, and a Fire Department Union Rep. The Towson brothers looked alike: both were medium height and a bit husky but in shape, with full heads of black hair.\n\n\"Uh, I didn't call for a rep.\" said Greg.\n\n\"The Fire Department sent me.\" said the rep.\n\n\"Wow, they heard about me asking for Towson to come in mighty fast.\" I observed out loud. The rep shrugged his shoulders. I continued: \"It's as well that you're here. Okay, Greg, I'm going to read you your rights.\" I did so from the card.\n\n\"Okay, Greg,\" I said, \"and I'm calling you by your first name to differentiate you from your brother, here. So you were 'red-flagged' by this Schultz woman? Tell me what really happened.\"\n\n\"I got off duty that day, and met some of the other Police Officers at the Cop Bar.\" said Greg. \"I didn't really want to go home because my wife was nagging the hell out of me all the time. So some of us went to another bar on University Avenue. It was mostly college kids there. The two guys with me picked up a couple of girls and left, and I was about to get a taxi home when a girl started talking to me. She bought me a drink, saying she supported the Police.\"\n\n\"Well, I think she spiked my drink.\" continued Greg. \"I woke up in an apartment near there, alone, and I was naked in bed. My clothes were there, so I got dressed and left, got a taxi and went home.\"\n\n\"Nothing taken from your wallet?\" I asked.\n\n\"No sir.\" said Greg. \"Anyway, I got home and my wife started screaming at me. When I looked in the mirror, I saw I had lipstick marks on my neck. That was the first realization I had that something had gone on while I was out.\"\n\n\"My wife ended up getting photos of me with that girl on top of me. I have no idea if we actually had sex.\" Greg continued. \"My wife filed for divorce. I fought like hell to get custody of my son, and in spite of the odds and a Court system rabidly against the husband and father in divorce cases, I got joint custody. The bitch was not supposed to leave the State without notifying me and the Court... but she did anyway. I tried to find her, and the TCPD and FBI helped... but we never could find out where they went. It's been over four years now since I've seen my son.\"\n\n\"I'll see if I can do something to change that.\" I said. \"So how did you find out Terry Schultz was behind the 'red flag' setup?\"\n\n\"I didn't know.\" said Greg. \"I thought I'd been set up, as did a lot of the other Police Officers I worked with, but we didn't know it was Terry's 'red flag' business until she was murdered... well, I didn't know.\"\n\n\"Your fellow Officers were very supportive of you at the time, weren't they?\" I asked.\n\n\"Yes sir, they were.\" Greg said. \"Some of them investigated the thing on their own time on my behalf.\" said Greg. \"They found out Vivian was cheating on me, which went a long way in the divorce trial. I knew Terry lived in Town, and the FBI questioned her after Vivian skipped town with Mikey, my son, but I didn't have anything to do with her.\"\n\n\"Those pictures...\" I said. \"Is there any chance I can get them, to possibly get an I.D. on that girl?\"\n\n\"They might still be in the Courthouse.\" said Greg.\n\n\"I'll contact his lawyer and see if he still has them.\" offered Louie Towson.\n\n\"No, let me have my Detectives do that.\" I said. \"You're too close to your brother, Louie. Okay, then... Greg, I need you to stay in Town while the investigation continues. Louie, you can escort Greg back out.\" Louie and Greg got up and left, and the Union rep was going to follow, but turned back.\n\n\"You really think you can find his kid, after the FBI has failed?\" the rep asked skeptically.\n\n\"The FBI is busy with a lot of stuff, and they're not as motivated as I am.\" I said. \"If I don't find him, it will not be for lack of trying.\" The rep looked amazed, but just nodded as he left the room.\n\n* * * * * * * * * * * * * * * *\n\nCaptain Cindy Ross and Detective Joanne Warner were escorted to the office of Executive Publisher Dan Walther. He was an older man, his full head of black hair beginning to turn gray. He was relatively short in stature, and took pride that he was once in the United States Marine Corps.\n\n\"Captain Ross, Detective Warner.\" he said as they came in. \"First, as a former Marine myself, I would like to ask you to thank your Commander Troy for what he did for Gunny Guernica and his family.\"\n\n\"I'll be glad to tell him.\" Cindy replied.\n\n\"So,\" said Walther, \"is this on the record?\"\n\n\"Yes sir.\" said Cindy. \"On our record. We need to ask you some questions about Terry Schultz.\"\n\n\"Oh.\" said Walther. \"I wish I could cooperate, but you're going to have to understand that I'm going through a divorce right now, and I've been told by my lawyers to not say anything to you about any of that.\"\n\n\"Even if your lawyer were present?\" Cindy asked. \"Then it would be privileged.\"\n\n\"No, you might be forced to testify,\" said Walther, \"or the Police record of our conversation could be entered into the record of the divorce proceedings. So I'm sorry you came here for nothing, and again I wish I could help, but my hands are tied.\"\n\nHow about your hands being cuffed? Cindy thought to herself. It was Joanne who said \"We understand, Mr. Walther. Captain, he's right, it's a legal issue for him.\" Cindy just nodded.\n\nAs they were leaving, Priya Ajmani came up to them. \"Well hel-lo, Captain Ross.\" she said flirtatiously. \"Can I get an interview? Or maybe with your lovely friend, here?\"\n\n\"Her husband would not appreciate it.\" Cindy replied. \"And we're a little bit busy now.\"\n\n\"Here to see our executive producer?\" Priya said. \"Do we have a suspect right here in our own house?\"\n\n\"No comment.\" Cindy said. She and Joanne turned and left, feeling the many eyes upon them.\n\n* * * * * * * * * * * * * * * *\n\n\"We have a problem here, sir.\" said Sergeant Rudistan, his jovial voice belying the seriousness of the situation. \"Mr. Michael Miller is refusing to come to the Station with us. He's called a lawyer, and insists we wait here for the lawyer.\"\n\n\"You have an arrest warrant, don't you?\" I asked.\n\n\"Yes sir.\"\n\n\"Then... no, tell you what. I'll be right down.\" I said.\n\nA few minutes later I strode into the State Credit Union with no less than twelve Uniformed Officers. The receptionist looked like she was about to stop me, but one look at my face and my red crowbar suggested that might not be a good idea.\n\nRudistan and Morton were at the door to Michael Miller's office. \"He's inside sir, with his lawyer. The lawyer demanded a private, privileged conversation.\"\n\n\"You got that warrant?\" I asked. Rudistan handed it to me. \"This is all I need. Listen up, everyone! Jerks like this do not dictate terms to us! We have a proper warrant, and we are going to execute it!\"\n\nWith that I raised my leg and kicked hard at the door. It splintered but held. A second kick sent the door flying inward.\n\n\"What the hell are you doing?\" snarled Miller as I entered the office. He was tall and fairly slender, in his mid-thirties with a full head of dark brown hair. His lawyer was shorter, older, and balding on top.\n\n\"Get out!\" screamed his lawyer. \"This is a privileged conversation.\"\n\n\"Which you can have at the Station, after Miller is put through full booking.\" I shouted back. \"This is a warrant for his arrest, and I am executing it.\"\n\n\"Who the fuck are you?\" snarled the lawyer. I exhibited the red crowbar.\n\n\"I'm Commander Donald Troy of the Town & County Police Department, and I am personally executing this warrant.\" I said. \n\n\"Er, why don't we sit down and have a civilized conversation.\" Miller tried.\n\n\"I don't think you understand, Miller.\" I said, with as much discourtesy and disrespect as I could convey in my voice. \"You are under arrest. You are going to be handcuffed, walked through this office and outside to a Patrol cruiser, whereupon you will be transported to Police Headquarters and booked.\"\n\n\"On what charge?\" demanded the lawyer.\n\n\"Material witness in the murder investigation of Terry Schultz and Andy Martoli. And a material witness that to this point has been hostile.\" I replied. \"Rudistan, are you taping this?\"\n\n\"Yes sir.\" Rudistan said happily. Indeed, he had the camera operating.\n\n\"Michael Miller,\" I said, \"I am going to handcuff you. If you resist in any way, you will be charged with resisting arrest. Felony resisting arrest. You'll be immediately disbarred, and you will be barred from working at this financial institution. Place your hands behind your back.\"\n\nI actually hoped he'd resist, but Miller complied. I recited his considerable rights to him as I affixed cuffs to his hands.\n\n\"At least have the courtesy to take him out the back way.\" sneered the lawyer.\n\n\"Hold him here.\" I said, then I walked up to the lawyer, who tried to stare me down.\n\n\"You do not tell me what to do.\" I said, almost but not quite hitting the punk in the chest with my crowbar. \"Now shut your fucking mouth before I arrest you, too.\"\n\nWith that I led the perp-walk through the main lobby of the credit union, enjoying the shocked looks of the employees as Miller was led through in handcuffs.\n\nOutside, KXTC cameras were there to record the continuing perp walk. Bettina came up and shouted \"Did you kill Terry Schultz, Mr. Miller? Did you kill Andy Martoli?\" He did not answer as he was stuffed into the backseat of Rudistan's Police cruiser and driven off. KXTC would broadcast those images into the homes of the Town and County on the evening news.\n\n* * * * * * * * * * * * * * * *\n\n\"Thinks he's some kind of fucking hotshot.\" I said in my office, as Miller was being taken through booking. \"Just because he has money and influence with politicians.\"\n\n\"What's got you so fired up?\" asked Cindy.\n\n\"I dunno.\" I said. \"Hearing Greg Towson's story didn't help my mood.\" I related to Cindy what had been said in that conversation. \n\n\"Well, we're having trouble finding Bart Bell.\" Cindy said. \"He was working at the Kroger near the Mall, but they haven't seen him since last Friday. He lives in an old apartment complex near the one that had the fire where Easley earned his MOV, but he's not at home. I put out a State and National APB for him. Running makes him look guilty, does it not?\"\n\n\"Yes, but we can't assume guilt.\" I replied. \"He's made threats before. He's had restraining orders against him. Terry destroyed his life. He's probably the kind that does not trust the System to exonerate him if he is innocent. By the way, what does Bart look like?... oh, never mind, I'll pull up his DMV photo.\" I did so, and saw a man of medium height with light brown hair. He could possibly look distinguished if he'd get his shit together, I thought to myself.\n\n\"Dan Walther wouldn't talk to us.\" Cindy said. \"He said his divorce case is ongoing and his lawyers told him not to talk about any of it. Joanne said she understood and let it go. I didn't rip her a new one in front of him, but I thought she was too quick to let him off the hook. Did we do right to not bring him in?\"\n\n\"You could've told him he still has to come in, get his lawyer, and force him and his lawyer to refuse to answer questions.\" I said. \"Like we're going to do with Miller Time and his bozo attorney, here. But you didn't do wrong, and it's probably the right thing to do to not press it, at least not yet.\"\n\nJust then the Duty Desk Sergeant came in. \"They just brought in Tom and Tina Yaris.\" he said. \"Tom is in I-A, and Tina in I-B...\"\n\n* * * * * * * * * * * * * * * *\n\nI looked through the one-way glass into the Interview rooms. Tina Yaris was in her late 20s. She had light brown hair that was styled to frame her pretty face. She was fairly short, and her body was an hourglass shape somewhat like Teresa Croyle's very fine body. Tina was wearing a dress and high heels that showed off her shapely legs, and I do mean 'showing off'... she was 'advertising', I thought to myself.\n\nTom \"Tommy\" Yaris was relatively tall, slender, had a full head of black hair, and his face matched his age of 29 years young. He was looking pretty sullen right now as he sat alone in the room, but for Patrolman Morton standing guard.\n\n\"He demanded a lawyer the minute we displayed the warrant.\" said Sergeant Abram, who had led the arrest party. \"He shouted at her to say nothing and to demand a lawyer, also, but she has so far not asked for one.\"\n\n\"Okay.\" I said. I turned to Cindy, who had been standing beside me all this time, and said \"You want to interview her, while I take him?\"\n\n\"Sure.\" she said. \"What am I looking for?\"\n\n\"Just start with background stuff.\" I said. \"Then see what she and her husband do as maintenance managers. Then go into the specifics of that night, and the blood dripping. And, as always, let your vibes guide you into any questions about her husband you may have.\" Cindy smiled and nodded.",
        "Detectives Warner and Parker arrived. And so did Tom Yaris's lawyer: H.J. Lynch from Chase, Lynch & Berry, P.C. That told me something.\n\n\"I should've known.\" said Lynch as I entered, before I even had a chance to sit down. \"The Iron Crowbar harassing citizens again.\"\n\n\"I have two murders to solve, Lynch.\" I replied. \"I'm not in the mood to brook your crap. Accuse me of harassment again, and you'll have the chance... and the obligation... to prove it in Court and before the State Bar when I move to disbar you.\"\n\n\"Why have you arrested my client and brought him in here?\" demanded Lynch in reply.\n\n\"First, I am going to read your client his rights.\" I said, not letting Lynch swerve me away from keeping things tidy, legalities-wise. I did so from the card, then exhibited the card up to the camera recording the session... to make sure Lynch and his client Yaris both fully understood that this was being recorded.\n\n\"Mr. Yaris,\" I said, \"I understand you are the maintenance manager for the Alberta Pines Townhouses?\" Yaris looked over at his lawyer, who immediately said \"I want to confer privately with my client.\"\n\nParker and I got up. While Lynch talked to his client, I listened in on the other conversation as Cindy and Joanne interviewed Tina Yaris.\n\n\"Your husband handles the maintenance and the operations of the townhouses?\" asked Cindy.\n\n\"He handles maintenance on common ares, emergencies like broken water pipes, stuff like that.\" said Tina. \"He also handles the security system, parking lot assignments, stuff like that. He can do maintenance inside the apartments, but the owners are on their own handling those things. If they want him to fix something, they have to pay him like anyone they'd hire to fix something.\"\n\n\"What do you do around the place?\" Joanne asked.\n\n\"I usually stay in the office, field calls, show empty townhouses by appointment, clean up trash around the areas.\" Tina replied, sounding bored.\n\n\"Can you operate the security system in your husband's absence?\"\n\n\"I can manually let someone into the parking garages, things like that.\" Tina replied. \"But my husband operates the security system itself, and I never touch that.\"\n\n\"Do you like your job, Tina?\" asked Cindy, and I noticed the Green Crowbar was peering hard at the young woman. Cindy had a vibe, I realized.\n\n\"It's okay. It pays the bills.\" Tina said. \"And we get to rent our apartment for just $300 a month, which is a huge perk.\"\n\n\"True. What about your husband?\" Cindy asked. \"Does he like the job?\"\n\n\"Same thing... he's okay with it. It pays the bills and the reduced rent.\" Tina said. \"I think he could do a lot more with himself if he really wanted to.\"\n\n\"Did you know Terry Schultz?\" Joanne asked.\n\n\"Yes.\" Tina said.\n\n\"Were you friends? Did you hang out? Go shopping together?\"\n\n\"We were on good terms.\" Tina said. \"She was almost never at home, though. She said her business was struggling, so she put a lot of time into it.\"\n\n\"Did she tell you what kind of business it was?\" Joanne asked.\n\n\"She said it was a staffing company for professionals.\" Tina replied. \"Accountants, software developers, that kind of stuff.\"\n\n\"Did you know Andy Martoli?\" asked Joanne.\n\n\"No.\" said Tina. \"I know his name from the news reports, but I never knew him.\"\n\n\"Okay, on the night of Terry's death,\" Cindy said, \"who called 9-1-1? You or your husband?\"\n\n\"Uh, I think I did.\" said Tina. \"Tommy went to get towels and a bucket to catch the dripping blood.\"\n\n\"That must've been shocking, seeing blood drip through the ceiling.\" said Joanne. The macabre nature of that comment belied Joanne's beauty, and was faintly shocking to Tina.\n\n\"Uh, yes, it was.\" Tina said.\n\n\"Neither of you went upstairs to see what was going on?\" Joanne said.\n\n\"I asked Tommy if he was going up, and he said we'd called the Police and let them handle it in case someone was still up there.\"\n\n\"Like a murderer?\" Cindy said.\n\n\"Exactly.\" said Tina.\n\n\"So what were you doing when the blood began dripping through the ceiling.\" asked Joanne.\n\n\"We were in bed.\" Tina said with some relish. \"Making love.\"\n\nAt that moment there was a loud rapping on the window to I-A. Lynch was ready for us. I think he might've waited longer, but he realized I was listening to Tina's interview.\n\nGoing back inside, I introduced Detective Parker and we sat down. \"Okay, Tommy---\" I started, but was interrupted.\n\n\"On the advice of counsel, I refuse to answer any of your questions.\" said Yaris. \"I demand that my wife not be interviewed further until she has legal counsel, and I demand to be either arrested and charged with a crime, or allowed to leave.\"\n\n\"You don't have the right to demand counsel for your wife; only she can do that.\" I replied. \"And I have a court-ordered warrant to obtain a DNA sample from you, since you work in that complex.\"\n\n\"No.\" said Lynch. \"I demand you wait until I can contest that warrant.\"\n\n\"First, Lynch,\" I said, \"you do not demand anything of me in my Police Station. Second, the DNA sample will be taken, if we have to physically take Mr. Yaris, fully restrain him, then forcibly take the sample. The warrant does not require your consent, nor any legal shenanigans about being contested. What will it be, Mr. Yaris?\"\n\n\"Take it by force, then.\" said Lynch. \"And get ready to get sued to death.\"\n\n\"I'll chance it.\" I said.\n\nAnd as six officers, led by Sergeant Rudistan, made good on my threat, literally carrying Yaris into booking and taking a blood sample as well as a cheek swab; I left a whining H.J. Lynch in the Interrogation Room, and went to the other side of the building, where Michael Miller waited in Interrogation-1.\n\n* * * * * * * * * * * * * * * *\n\n\"You sure made us wait long enough.\" snarled Miller's lawyer as Parker and I entered the room. Miller was handcuffed to the table, which I'd ordered done to make sure he understood who was in charge here.\n\n\"Keep up the shit.\" I said. \"I was going un-handcuff Mr. Miller from the table, but since you're being an asshole... he can just remain there.\" I sat down along with Parker and read Miller his rights from the card.\n\n\"Okay, Miller.\" I said. \"You can start playing straight with me, or we can go through these shenanigans for the next 72 hours until your hearing. How do you want to go about it?\"\n\n\"You arrest me, perp-walk me through my employees, chain me to this table, won't tell me what I'm being charged with...\" said Miller, \"and you want me to cooperate with you. You're the asshole here, Troy, and I won't help you one... fucking... bit.\"\n\n\"Well, Detective Parker,\" I said to Teddy, \"this suspect is not being cooperative. I guess he does not understand the words 'double murder', with which he is close to being charged.\"\n\n\"Stop the intimidation tactics.\" said Miller. \"We've heard of you, Troy. I am not some slug off the street. I have influence with important people: bankers, politicians, people who can make your life a living hell.\"\n\n\"Is that a threat?\" I asked.\n\n\"It's just letting you know that your shenanigans, to use your own term, won't work with Michael Miller.\" said Michael Miller. \"Now are you charging me with something, or am I free to go?\"\n\n\"You are not free to go.\" I said, keeping my words simple, formal, and legalistic. \"You are under arrest as a material witness and possible suspect in the murder of Terry Schultz, and you are being detained as a flight risk.\"\n\n\"You're preposterous.\" said Miller's attorney. \"I'll have him out of here before sunset.\"\n\n\"And then we're going to barbecue your ass, Troy.\" Miller snarled.\n\n\"More threats.\" I said. \"Do you always threaten people that cross you, Miller? Like Terry Schultz?\" Miller's eyes grew wide as I said that, and he sat back in his chair as he realized for the first time that he had just fucked up... and was in very deep kimshee. His lawyer went through the motions of whispering something to him.\n\n\"I'm invoking.\" said Miller. \"I have no more to say to you. I want to speak privately with my attorney...\"\n\nPart 14 - Blood In The Streets\n\n\"It's been a long day,\" I said, \"and it's only 2:30pm.\"\n\n\"But a productive one.\" Cindy said. \"I watched the tape of your interview with Miller. He looked like he was about to come out of his skin when you ripped him about making threats.\"\n\n\"Yep.\" I said. \"So, tell me about your interview with Tina Yaris.\"\n\n\"My sense is that she's not happy in her marriage.\" said Cindy. \"She was always bringing up how Tom could do more with himself, do better for himself... and her. Honestly, with her looks and potential charm, she could upgrade, and quickly, if you know what I mean.\"\n\n\"Yes, I understand.\" I said. \"And I agree.\"\n\n\"And Tom immediately took the Fifth.\" Cindy said, then added in a huge understatement: \"I know you and I don't always agree on the subject, but that doesn't bode well with me for his innocence in all this.\"\n\n\"And what are his motives, means, and opportunities for murdering Terry, and Andy?\" I asked.\n\n\"Well, he has means and opportunity.\" said Cindy. \"He could've sabotaged the security systems, gotten into her apartment with a duplicate key, killed her after her lover left.\"\n\n\"The lover that impersonated Andy Martoli.\" I replied.\n\n\"Oh, yeah.\" Cindy said. \"Well, maybe he's in league with someone...\"\n\n\"And his motive for all this?\" I asked.\n\n\"Okay, I give up.\" Cindy said.\n\n\"You're trying too hard to twist facts to suit theories.\" I said. \"And you know a lot more than Joanne about some of it---\"\n\nJust then, Captain Teresa Croyle knocked on my door and opened it, literally blowing by my assistant Helena. \"Sir!\" Teresa said, \"we just got a call from the University Campus Police. A demonstration is forming around the Athletic Complex...\"\n\n* * * * * * * * * * * * * * * *\n\nThe crowd had begun forming near the Athletic Complex, practice fields, and the Track, but it began moving seemingly as one mass towards the basketball arena, which was next to and just south of the football stadium.\n\nBecause this was fairly close to where University Avenue turned west and became North Street, this is where Captain Croyle sent the largest contingent of TCPD Special Ops Officers... basically riot control officers... and with the orders that University Avenue was not to be blocked, nor the protestors allowed to cross the street into Town.\n\nWe also brought out the water cannon. The Town & County Fire Department had purchased what looked like a large ambulance with a small cannon on top. It was really a water cannon with a big tank of water and a pump on the inside. It had not performed particularly well on fires, so Commander Harlow and I arranged to trade two older Police cruisers for it. We had it painted dark blue, and our Officers trained on using it as a bulletproof riot control weapon.\n\nState Troopers were also called in, and as they could go on Campus, they began forming a perimeter to limit the protesters' space to the area around The Arena, as the basketball forum was called. At the Federal Building, FBI Special Agent in Charge Jack Muscone ordered a surveillance drone to be launched, and my Police iPad had an app that allowed me to tap into that FBI drone's video. \n\nI could see that the State Patrol could handle crowds okay, such as after ball games, but if this turned violent they would not know what to do. They were poorly equipped. The TCPD not only had the SWAT Teams and Special Ops people with full equipment, every TCPD officer had bulletproof armor and a helmet upon which a plastic face shield could be snapped.\n\n\"How's it going?\" Cindy asked as she came into my office. We were both now in 'black' uniforms with armor under our shirts, and it would only take putting on helmets and the heavier chest protection armor, which was as thick as a pillow on most people's beds, to be ready.\n\n\"Okay, so far.\" I said as I watched the drone footage. \"They're yelling and chanting a lot, but so far no violence. Croyle said First Precinct is on full alert and gearing up, and Assistant Chief Davies of the Fire Department has the TCFD ready if they're needed. Special Ops is already deploying on our side of University Avenue, near the Bus Station, and they can be seen from the Campus side.\"\n\n\"Is that a good idea?\" asked Cindy. \"If the protesters see it, they might make hay of it. Worse yet, the Media might.\"\n\n\"Good.\" I said. \"I want them to see our 'overwhelming response', and how fast we generated it. I want them to know we are ready.\"\n\n\"What about the houses on the hill above the University to the east, including yours?\" Cindy asked. \"Not to mention the road to the Cabin?\"\n\n\"Rudistan and Morton drove around the mountain from the east side.\" I said. \"They're stationed just below the driveway to the Cabin. The road to the Mountain Nest and the other homes there have a Campus Police cruiser guarding the road... but I'm not counting on much protection there.\"\n\n\"And your kids?\"\n\n\"They're with Laura in her office.\" I said. \"The Campus is on lockdown. Laura could take them down into the dungeon under the building if the Psychology Building comes under attack... and pray the rioters don't find the entrances.\"\n\n\"If they attack there, Teresa will be all over it, regardless of jurisdiction.\" Cindy said.\n\n\"I know.\" I said. \"But my fear is more the entire campus. Thousands of students in their dorms, people in the classrooms. If this were to turn violent... I might not be the only father getting the worst possible news...\"\n\n* * * * * * * * * * * * * * * *\n\nI watched as Bettina and Priya tried to report on the demonstrations. It was mostly women, but there were a lot of scruffy looking young men in dirty t-shirts and blue jeans also demonstrating. I also noticed that a good number of the so-called 'handmade' signs were anything but. They were printed.\n\nThere had been something of a north-south line of demonstrators between the Athletic Complex and The Arena, mostly through parking lots. As I watched the drone footage, I noticed the southern tail start slowly moving west, pivoting around the northern mass. They were trying to move slowly and seemingly naturally, but I was not fooled, and got on Police radio.\n\n\"Commander Troy to Captain Croyle.\" I said into the radio. \"The tail end of the group is pivoting west toward your positions. Get in position. Do not let them block University Avenue. If demonstrators try to block or cross University Avenue, you are authorized to go to 'weapons free' and to fire at will.\"\n\n\"Roger that, Commander.\" said Croyle. \"I see them now.\"\n\nThe group that had been tailing off suddenly stopped as if recoiling from an electric field. They then pushed north, to join the larger mass. Ahhhh, I thought to myself. They are listening in on our radios.\n\nAnd that, of course... meant this was not a spontaneous demonstration, but was being cultivated and led by persons with purpose and intent...\n\n* * * * * * * * * * * * * * * *\n\nAs the sun began setting over the western horizon, it looked like the demonstrations were going to peter out. Alas, that was not the case. Someone threw a Molotov cocktail at the State Patrol, then another set a car on fire.\n\nAt this point, a contingent of well-armored State Troopers, that had been sent in by Governor Jared, retaliated. Smoke and CS grenades were fired and hurled into the demonstrators. The State Troopers advanced, and began making arrests. Most of the demonstrators broke and fled the scene. Some chose to engage the State Patrol, especially the Troopers that were not armed with riot gear. Some Troopers were injured, but the demonstrators were injured in larger numbers and with worse injuries.\n\n\"Oh shit.\" Cindy said. \"The Media is going to be all over this.\"\n\n\"We'll see.\" I said. \"Their reaction will tell us if this is over... or if we can expect worse to come.\"\n\nPart 15 - Peace Through Strength\n\n\"This is Bettina Wurtzburg, KXTC Channel Two News!\" shouted the reporterette from across the street from the University, the stadium in the background, at 7:00am, Wednesday, January 25th. \"We are bringing continuing coverage of the violent riots on the University campus last night!\"\n\n\"A peaceful march through Campus by women's groups, protesting the treatment of University varsity basketball player Jayne Hallerton and demanding the firing of girls basketball coach Arlis Snelling, turned violent and ugly when Governor Val Jared sent State Troopers in riot gear to forcibly quell the demonstration!\" yelled Bettina. \"One car was destroyed by fire, others were damaged, and several Troopers and students were injured.\"\n\n\"The Town & County Police were also out in heavily armed force.\" said Bettina as footage of our well-armed and -armored officers were shown on our side of University Avenue. \"They did not participate in the attack upon the demonstrators, but made it clear that they were ready if the demonstrators tried to leave the Campus grounds.\"\n\n\"The meeting of the Town & County Council was postponed until tonight.\" Bettina said. \"When asked about the TCPD's posture, Councilman Thomas P. Cook said that it was only to be expected that Commander Donald Troy would have his Officers arrayed like soldiers ready to march into war and commit violence. He, along with Councilwoman Kelly Carnes, Councilwoman Malinda Adams, and Councilman Reginald B.F. Lewis, issued a statement deploring the Police Department's unnecessary and overly aggressive willingness to use violent force.\"\n\n\"Meanwhile,\" said Bettina, \"State Senator Katherine Woodburn condemned Governor Jared's use of excessive force in violently dispersing the peaceful riots. Roll tape.\"\n\nThe tape showed Katherine in Midtown: \"Our Constitutional Rights of Free Speech and Freedom of Association have been violently assaulted by Governor Val Jared and his stormtroopers! Our University campus has been turned into a battlefield of shed blood as Governor Jared brutally suppresses our students' voices against sexual oppression, voices that have a right to be heard!\" Cheers could be heard in response, though any crowd of listeners that might've been there were never shown.\n\nBettina was back. \"The Governor issued a statement saying his State Patrol Officers acted correctly and that they were attacked first.\" \n\nNO footage of the Governor nor any spokesperson was shown. And there was NO more footage of the mel\u00e9e, which would've shown Jared to be correct.\n\nAs Bettina brought in 'experts' to tell us exactly what to think about the incident on Campus, an MCD room full of angry Police officers were venting.\n\n\"Every bit of that was an outright lie!\" Joanne Warner exclaimed. I had rarely seen her so angry. \"The State Patrol was attacked! Those demonstrators were the violent ones! The Governor did the right thing!\"\n\n\"I'm just glad they didn't try to cross the street.\" said Cindy Ross.\n\n\"It looked like they were going to.\" said Teresa. \"And that reminds me, Commander... were they listening to our Police radios? As soon as you told me to get ready for that group coming our way, they peeled off, then went to that parking lot... and the Molotov cocktails started flying.\"\n\n\"Yes, I think they were listening to our radios.\" I said. \"In fact, I was counting on it when I made that radio call on the open frequency. I wanted them to know we were watching them and were ready for them, and they did what I hoped they'd do: they backed off.\"\n\n\"Sir, what do you think of those Council people saying our show of force was excessive?\" asked Theo Washington.\n\n\"I think our show of force, as you call it, was a strong deterrent.\" I said. \"And as long as Captain Croyle and I are tasked with protecting this Town's citizens, we will continue to attempt to have peace through strength, not the weakness of loser Council members.\"\n\nThose comments were openly disrespectful of the Council, I realized... but I also didn't really care. Then I heard Bettina starting up again:",
        "\"In other news,\" the lovely redhead said, \"the Police brought in several suspects for questioning in the Terry Schultz/Andy Martoli murders. State Credit Union Executive Officer Michael Miller was detained overnight. Roll tape.\" The tape showed Miller's perp walk, with Bettina shouting questions at him as I led him to the Patrol cruiser.\n\n\"The Police have only said they will not comment on the progress of the investigation.\" Bettina said. \"Channel Two News has learned that Terry Schultz was running a private investigation scheme, where women were hired to entice married men into indiscretions to test their marital fidelity, and that Police believe this could be a possible motive in her murder.\"\n\nAll eyes were on me. My eyes were part of a very sullen look at the television monitor.\n\n\"I bee-leeeeve that Chief Griswold would be teaching us new curse words right now.\" said Chief Moynahan, who had just come in and was filling his coffee cup. \"Your silence is admirable, Commander.\"\n\n\"Words are not needed, Chief.\" I said. \"If and when I find the leaker, my crowbar will do the talking.\" The room became very quiet when I said that.\n\nJust then, the Mouseketeers came into the room, along with Paulina Patterson... and SBI Lieutenant Tanya Perlman. And they were all smiles. Detective David Krueger gave me the thumbs-up sign.\n\n\"Okay, people.\" I announced. \"It is time to make some arrests and close out these murder cases.\"\n\n\"You've solved it?\" gasped Cindy. \"You know who did it?\"\n\n\"Yes.\" I said. \"It's pretty simple, don't you agree?\"\n\nTo be continued."
    ],
    "authorname": "WifeWatchman",
    "tags": [
        "mystery",
        "police drama",
        "crime drama",
        "iron crowbar"
    ],
    "category": "Non-Erotic",
    "url": "https://www.literotica.com/s/the-hot-date-mystery-ch-03"
}
{
    "title": "The Ponytail Express Ch. 04",
    "pages": [
        "The Ponytail Express\n\nChapter 4: Scorekeeper Scent\n\n\"It's the quiet ones you need to watch.\" Fred grinned over his plate of breadsticks at Onvipa \"Oni\" Sakul Dasna, Deb's friend and center fielder for the Ponytail Express. Deb hoped that appetites would lessen the tension. It had been a few months since she tried to set Oni up on date with Fred, with less than stellar results. Oni had managed to ignore Fred so far, but her annoyance began to creep through.\n\nShe set up the meet to see Fred's ability firsthand. Liberal ground rules had been set in preparation; Fred needed to order Oni to do something drastic. With Deb guarding against things spiraling out of control, it would be Fred's job to convince Oni to give him a blowjob under the table. Both were sympatico in the belief Oni would never do something so depraved; suck her bf's boyfriend that she didn't think highly of in a public place in front of same bf. Deb thought it was a ridiculous situation that would only happen in a bad porno, and despite Fred's newfound influence, Deb was confident Fred was ice-skating uphill.\n\nDeb picked an off-campus restaurant with next to no traffic, due to its lack of both Wi-Fi and cellphone signals. Given the possible outcomes to this, privacy was priority. With the meal bought and paid for, Deb's own goal was to get both of her closest friends to bond over the upcoming softball season.\n\n\"How's the vegan cobb salad, Oni?\" Deb asked.\n\n\"Not bad. Didn't even know this place existed.\" Oni's long dark hair hung loosely, cascading down her chest, and she tossed it to the side with an air of nonchalance. Her bangs revealed dark, piercing eyes that currently scrutinized poor Freddy. Oni was as protective of Deb as she was of her. They had been close since Oni transferred during their junior year in high school.\n\n\"So, Fred, thanks for paying for the food,\" Oni managed civility, her voice pleasant. Fred nodded and was about to say something before Oni continued.\n\n\"I hear you're the official scorekeeper for the Ponytail Express. So cool. Did you volunteer for it?\"\n\nFreddy was awkward but he was good-natured. That, and that air of awkwardness endearing. As she and Freddy sat across from Oni, it became clear her friend did not share her point of view.\n\n\"I'm as surprised as you are. I resisted at first, but you know Deb. She can be very convincing.\" Deb ate with her right hand while her left hand was under the table sitting on Fred's lap. She squeezed him affectionately.\n\nOni's nude pink nail polish matched her lipstick as she brought her pinky up to her mouth. She smiled beatifically. \"So did you two play 'Itchy buttocks' last night?\" Oni possessed a no-nonsense severity when it came to teasing people. When it came to her and Deb, trading barbs was a way to push each other and for the most part, a healthy part of their friendship.\n\n\"Itchy Buttocks, Oni?\" Deb felt herself blush against her will. She looked over at Fred, whose effort to play it cool was in danger of wilting under Oni's sharp gaze. It was cute, the way his mouth curled up and the crease in his right eye.\n\n\"Actually, Fred managed to get me the one thing I've been looking for.\"\n\n\"A purple clit vibrator?\" Oni was in rare form.\n\n\"Since you stole mine, smartass? Oni, Freddy found Mia Ryan.\"\n\n\"Get the fuck outta here,\" Oni gasped incredulously. \"Now all you have to do is recruit her!\" Her penetrating gaze found Fred. \"What I wanna know is how Fred here found the time between studying for finals and stalking your pretty ass to find the missing softball player. Maybe he's been holding her hostage.\"\n\n\"Well,\" Fred responded, \"I just went to the local police station, and I asked.\"\n\n\"You asked?\" Amazement evident in Oni's silvery voice.\n\n\"Politely,\" Fred emphasized.\n\n\"You should try it some time.\" Deb threw a little pepper Oni's way, following it with a smile.\n\nOni blushed as her tongue moved across her upper lip. Was Fred's ability taking effect?\n\n\"When you asked politely Fred, was it a man or a woman?\" She began twirling her long dark hair with her fingers absently.\n\nFred answered quietly. \"Woman.\"\n\n\"Did they know anything about your history of stalking beautiful women?\"\n\n\"Subject never came up.\" Deb looked at Fred, clearly intimidated by Oni.\n\n\"Did you show her your dick?\" Oni's normally smooth voice dropped an octave lower; her eyes slightly dilated. Deb could tell she was squirming.\n\n\"Can't say that I did, Oni.\"\n\n\"Did you show D your dick last night?\"\n\n\"Freddy's got game,\" Deb interjected. But Oni wasn't listening; the temperature at the table began to rise. Her friend's engine was clearly revving. Was this really happening?\n\nOni's high cheekbones were flush with arousal now. Her silvery voice notched an octave lower but still managed to hit an accusatory note.\n\n\"I wanna know how you managed to get D to suddenly crush on you. How'd you do it, Fred?\"\n\n\"Dirty limericks, mixed with mellow jazz.\" Fred managed a terse grin as he dipped a breadstick in red sauce. His voice sounded more confident now. Hand on his leg, Deb could feel him trembling; he was a bundle of nerves.\n\nOni looked at Fred intently. \"Size matters, Fred! If you're not hung like a horse, then how are you hung? What kind of engine is under the hood?\"\n\nFred leaned in conspiratorially. \"I think you would like to find out, Oni.\" There was an authority to his tone that made Deb's insides twitch with arousal. Oni's black saucer eyes were glassy pools of lust; her tongue licked her lips invitingly.\n\n\"Show me, Fred.\" Oni sounded nonchalant, but her face told a different story.\n\nThe booth offered enough privacy so if he wanted to, Freddy could have stood and showed her. Instead, he grinned as Deb looked on in disbelief.\n\n\"You should come over here and see for yourself, Oni.\"\n\nFred put a hand on Deb's leg and squeezed, sending little waves of current from her bare thigh to her core. Deb intertwined her fingers with his she watched her friend slide over and duck under the table. From her vantage point, she had a clear view of Freddy's crotch, and watched as Oni undid his jeans at a casual pace. Deb could see the mix of both curiousity and lust as Oni extricated her boyfriend's juicy cock, shivering as Freddy hardened in her friend's strong hands. She was envious of Oni getting to sample Fred's cock before she could. Why wasn't she jealous? Why wasn't she stopping this? Deb glanced at Freddy; his lust-filled gaze a question to her.\n\n\"Deb, can we keep going?\" Her own womanhood writhed in reply to get on with it already. Deb shot Freddy a nod of assent; What the fuck was happening? Why did she want to see her friend fellate her boyfriend? It was like Freddy was some kind of sex god.\n\nDeb's hand followed Fred's as he slid between her own thighs, seeking her moist pussy. She moaned as she moved her underwear to accommodate Freddy. Her other hand went over her mouth as she tried in vain to stifle her groans, slurping her pinky as she began to watch her boyfriend get a blowjob from her bestie while he fingerbanged her.\n\n\"It's ok. I like bigger dicks.\" Oni was under Fred's spell, palming his dick while her thumb stroked his glans. A line of drool rolled down the corner of her mouth; a dollop of precum formed on Fred's crown, quickly consumed by Oni's mouth. She shimmied his pants open until she had access to his scrotum.\n\nFreddy's voice was quiet passion. \"Oh, it'll get bigger.\" Deb moaned into her hand. This was really happening, and she wasn't doing anything to stop it.\n\nHer hips undulated to the rhythm of her boyfriend's fingers, but he was still a novice. Deb resolved to work on that, letting go of her panties to make sure her boyfriend found her clit. Oni's tongue started at his scrotum, travelling the underside of his shaft until she took Fred into her lovely mouth, running her tongue over his glans while massaging his balls with experienced fingers. Time was filled by a series of pleasure-induced grunts and cries, punctuated by Oni's head hitting the underside of the table every so often as she bobbed up and down on Fred's erection.\n\nDeb thrilled to it all; Fred's breath on her collarbone, the squelching of her own sex as she and Freddy tag teamed her twitching muff. Oni's assault on Freddy's love stick, saliva dripping from her chin, little erotic grunts of effort seeking delicious reward. Deb's insides writhed; her eyes squeezed shut in needful bliss. She bit into Freddy's shoulder to keep from crying out. Fred's tongue grazed her ear, his breath hot. Oni's animalistic moans floated from under the table as she worked her boyfriend's meat.\n\n\"Please give me permission,\" Fred whispered roughly.\n\nShe pried her lips from Freddy's shoulder. \"Ahhhhhhh for wha-aaat,\"\n\n\"To come...to come in Oni's mouth.\"\n\nDeb wanted to say no but she felt Oni's hand on her upper thigh and it caught in her throat. She couldn't look away from her friend as she milked Freddy's shaft while frantically tonguing his glans. Oni had been reduced to a cock-craving slut. Need overrode guilt as Deb gushed into both Freddy's and her hand, followed on the heels of that she saw ropes of semen coat her friend's eager tongue and mouth. Freddy convulsed with each splash of cum that shot into Oni's throat as she continued to jack him off, making cooing noises and swallowing greedily. Deb was transfixed by salacious act. Oni caught Deb looking and as her sensuous lips cradled the crown of her boyfriend's dick, coaxing the remaining cum into her eager mouth, she grinned seductively.\n\n\"Please don't be upset, D,\" Her lips glistened with Freddy's seed. Deb wondered what it would taste like.\n\n\"Let me make it up to you by stuffing your pussy with this. You know you want it.\" Deb felt her friend's palm snake up the inside of her thigh to join both hers and Freddy's.\n\n\"Freddy.\" Deb croaked. Fred was still coming down from what must have been an intense orgasm and mumbled something that sounded like \"What?\" Deb intercepted Oni's questing hand with her own. Their hands wrestled. Oni was playful; Deb was urgent, but her hand was slippery with her own juices.\n\n\"Oni, no.\" Deb gasped. \"Freddy!\" Things were heading to a place she really didn't want them to go. Oni switched tactics and was now trying to lick Deb's cum off her hand.\n\n\"Oni, I order you to stop.\" Fred finally found his voice, freezing Oni completely.\n\n\"Go back to your seat.\" She did.\n\nDeb began quickly recovering herself, breathing deeply to calm down.\n\n\"Oni, I order you to take orders from Deb.\"\n\n\"Take orders from Deb,\" Oni agreed.\n\nDeb looked at Fred. He'd put his pants back on and looked both breathless and miserable.\n\n\"I should've done that in the first place,\" He mumbled.\n\n\"Freddy, we need to make sure Oni's all right. I'll take her to the bathroom, and we'll clean up. When we come back out, we'll take her out of the...spell she's under, zap her memory, then finish with the day.\"\n\nFred nodded agreement, clearly upset with himself as he recovered from his orgasm. The best idea was to pull back, take stock, then compare notes with clear minds. As she ordered her best friend to clean herself, she unsuccessfully fought back tears of guilt. She quickly got ahold of herself, making sure they were both presentable for the rest of the school day. Before she left, she decided to order Oni to focus more on her studies and less on dating.\n\nOnce back out in the restaurant they brough Oni back through an induced countdown. Deb added the order that Oni not think too much about the missing 20 minutes. They discussed Mia Ryan, and they were looking forward to recruiting her for the team.\n\nFreddy had arrived separately; Deb had ridden over with Oni, and they would go back the same way.\n\n\"Freddy, make sure to text me this evening so we can go over our notes.\" Fred nodded, still beating himself up over the situation. She texted him one line -- \"Don't do anything rash.\"\n\nAs the rest of Tuesday drew on, Deborah mulled over the new reality. She was romantically involved with a guy who could make women do whatever he wanted. Fred didn't have to stop at sex. He could order her to do anything he wanted. That scared the shit out of her, but she also knew Freddy's personality wouldn't allow him to do something like that; at least, for now. Also, she was all Freddy had; Deb couldn't leave him until he was on his feet. Giving it some thought, she really didn't want to leave him. But it was her choice to stay. Freddy needed to gain better control over his ability so he could defend himself better. She could teach him alot about that. The time would come where someone or some organization was going to make a run at him, and when they did they needed to be ready. Her world was rocked last night by Freddy, and she wanted to experience that again. For Deborah Stallings, it was game on.\n\n7:03pm\n\nFred sat in his truck. It had been a long day. From his vantage point in the parking lot he could see lights on in Deb's room. He had a lot to mull over.\n\nF: Say Deb\n\nD: Heya Freddy\n\nF: Sorry about today. Really really sorry\n\nD: Shit Freddy we went WAY over the line\n\nF: Agreed\n\nD: WAY over\n\nF: You have every right to be mad I'm turning into a degenerate\n\nD: Know how I know you're not?\n\nF: Preach it\n\nD: Degens don't have a conscience -- you do Freddy\n\nF: Sweet of u to say\n\nD: Freddy I'm not mad at you\n\nF: You should be\n\nD: I'm angry at myself more what we did today was wrong. I should've stopped it but didn't\n\nF: It was on me. You were sen-fucking-sational today\n\nD: don't make me cry Freddy It was wrong but also nice. It was on both of us\n\nF: it was nice?\n\nD: guess how many orgasms I had before Sunday\n\nF: I dunno\n\nD: One. Guess how many i've had since Sunday\n\nF: More than that\n\nD: Fucking 6 Freddy\n\nF: Holy shit that's good though right\n\nD: Oh it's good\n\nF: You had an orgasm on Sunday? When was that\n\nD: lol goofball! Come over\n\nF: I don't think I should tonight\n\nD: Don't be a wuss, Freddy. Bring a change of clothes and a toothbrush. And a comb\n\nF: Copy that. Hey, WTF does itchy buttocks mean\n\nD: Lol see you soon\n\nFred pulled out of the parking lot, relieved beyond belief. He had to go back and get his things.\n\nDeb met him at the door in a fierce hug. She smelled so good.\n\n\"Deb, if my pillow smelled like you, I'd never get out of bed.\"\n\nDeb looked up at him with a hint of a confused smile. \"Did you practice that on the way over?\"\n\n\"Yeah. Did it sound good?\"\n\nDeb pulled out of the hug, letting him further inside. \"Still needs work but not bad form.\"\n\nFred has his backpack jammed with all the things. He arranged his hygiene items in the bathroom and came into Deb's boudoir. Her hair was drawn back in a ponytail; a pair of black loose-fitting sweats and a light gray cotton V-neck clung to her body invitingly. She moved through her room with an easy grace. There was an intensity to her that made Fred slightly uneasy.\n\n\"So I take it we're not going out.\" Fred wanted to keep things as playful as possible. He was trying his best not to be awkward.\n\n\"No, we have some ground to cover, and I'd prefer we do it in private. Grab a water and get comfortable. Put on your PJs if you want before I begin.\"\n\nMinutes later Fred had a water and his own PJs; old maroon shorts and a gray t-shirt from high school. Deb took one of her cleansing breaths, pacing back and forth. Fred sat in Deb's chair.\n\n\"The test today revealed you have the ability to enslave women, maybe guys too, through the fragrance you emit. We need to call it something; my vote is 'The Adonis Effect.' Specifically, this effect breaks down the will, but builds on the libido. It appears to even override sexual orientation. I already know the answer to this but are you attracted to other men?\"\n\nFred considered it for a few seconds. \"Maybe Jason Statham for a hot second, but when I tried to get in touch with my feminine side, I discovered it was a lesbian.\" He tried to deadpan it. Deb was on a roll and ignored the remark.\n\n\"Given all the variables so far, step one is protecting yourself.\" Deb continued. \"You've got to come strong out of the gate and get yourself a crack team of security experts. If they can be guys, so much the better, but so far, I'm thinking primarily women.\"\n\nFred was sheepish about co-opting anyone against their will. He shook his head. \"That won't work for me, Deb. I don't want to use anyone...\"\n\n\"Fred, has it not occurred to you yet? If you elect not to, you'll eventually be found out by some shady government organization. of the type that can make people vanish. Or worse, keep them around as test subjects.\"\n\nFuck, she was right.\n\n\"Okay. I need to build a stable of tough bitches.\"\n\n\"I made a list of things I want you to do, Freddy. We need to start by getting you to meditate. It will help you concentrate better. Use your ability as much as you can. I can tell you're hesitant, because you've spent your whole life laying low, falling back, never taking the lead. This whole thing is going to come down to finding a way to control this thing before it corrupts us. It's winning right now; but we're hanging on and we can beat this. You can't let this thing run roughshod over us. We nearly had a three-way in a crappy restaurant, Freddy.\"\n\n\"Got it. Three-ways only in nice restaurants from here on out.\" He was trying to make light but it wasn't working.\n\n\"Freddy, I mean it,\" She rejoined.\n\n\"I see you've given this a lot of thought.\" Fred spoke. Deb flinched in surprise.\n\n\"And you haven't? Freddy, get a grip. It bears repeating - either it's going to beat you, or you're going to beat it. For what it's worth, my money's on you.\" She punched him in the shoulder for emphasis.\n\nFred grinned, rubbing his shoulder. Even playful, Deb was not weak.\n\n\"What if I wake up tomorrow and I don't have the scent anymore?\"\n\n\"That's easy. You nail your finals and go about the business of being Freddy.\"\n\n\"And us?\"\n\n\"What about us?\" Deb inquired.\n\n\"Are we dating? Offically boyfriend-girlfriend?\" Fred was curious.\n\n\"Oh, we're on. There's a few more items we need to go over, though.\" Despite what transpired earlier in the day, she couldn't get over how she felt. It would be easy to say she was influenced by the scent, but here she was, immune, and she still wanted Freddy. He was patient, kind, and being able to give her multiple orgasms had absolutely nothing to do with it. The last and most important fact was that at any time, Freddy could make her into a sex slave but chose not to. She didn't know many people with that kind of restraint.\n\n\"Oh, what's that?\" Fred felt relief and excitement.\n\n\"Karin Berry is the current Mayor of Cantella Forks. She's 55 years old, married with three children, the youngest of which graduated from UCF last year.\"\n\n\"Matilda Berry.\" Fred said.\n\n\"Yeah, she got a job as a nurse right out of college. Guess where she works?\"\n\n\"NireCue. So did you want me to use my scorekeeper scent on both of them?\"\n\n\"You should at least try on Karin. She used to be in the state legislature, and she knows a lot of folks. And they both look healthy. I think your smell affects healthier women more. I have a hunch it's a sort of evolutionary thing.\"\n\n\"You mean we. I'm not doing this without you, Deb.\" Fred was rewarded by an arched eyebrow.\n\n\"Scorekeeper Scent?\" Deb snorted. \"Not nearly as good as Adonis Effect.\"\n\n\"Maybe, but we can term it 'ScSc'. Sounds neat off the tongue.\" Countered Fred.\n\n\"'TAE' sounds good too. The Adonis Effect.\" Deb grinned.\n\n\"Scorekeeper Scent. It's topical.\"\n\n\"Freddy, why ScSc? It should be SkSc, don't you think?\"\n\n\"Deb, don't make me control your ass. ScSc.\" Her laughter was music to Fred's ears.\n\nDeb grudgingly gave the round to Fred.\n\n\"Oh, one other thing,\" She added. \"Since you haven't been thinking very clearly lately,\" clearing her throat for emphasis, \"We should hold off on the Berrys until you've got better control of your ability. It so happens I need six more players; your assignment is to help recruit them. The big one is going to be tomorrow night when we get Mia.\"",
        "Fred nodded. \"She's probably not going to come gently.\"\n\nDeb arched an eyebrow again. \"Apparently few women do when you're around.\"\n\nFred advanced on his sexy girlfriend. \"Nice innuendo joke. Am I rubbing off on you, Deb?\"\n\nDeb advanced on him. \"Only one way to find out for sure.\" Fred's shorts suddenly became uncomfortable.\n\nHe met her lips with his own as his hands sought out her incredible curves. His tongue invaded her mouth and she sucked on it. He felt her arms around him, exploring his body. Fred palmed her lovely ass, crushing her against him as he sunk his hand into the taut flesh. Deb moaned softly into his mouth. His other hand traveled under her shirt, feeling the tightness of her belly on the way to grope a pert breast. Suddenly, she pulled away from him. He licked her minty saliva off his lips and chin.\n\nShe looked like she was waiting for something, and Fred suddenly knew.\n\n\"Terminal.\" He waited.\n\n\"Cupcake.\" She responded.\n\nShe pushed him hard onto the bed, shucking her clothes quickly, crawling seductively onto him. Deb immediately sought his hard cock and begin kissing his shaft while caressing it with her hand, admiring the shape. She laughed as Fred maneuvered her into a sixty-nine. Her laughter turned to coos of desire as he began to eat her. Deb's mouth closed over his dick; her tongue began working his shaft; he tasted like a vanilla latte. She hummed into him as she felt Fred's tongue continue his assault on her sex.\n\n\"That's it, Freddy. Oh Freddy!\" She ground her pussy onto her lover as she slurped around his cock. She felt like she was going crazy.\n\n\"Terminal,\" Deb moaned around his glans as she humped Fred's face. Her eyelids fluttered. Freddy added a third finger, sawing into her while he licked her folds.\n\n\"Cupcake,\" He mouthed, barely coherent, his mouth full of pussy.\n\nDeb rolled his testicles around in her mouth while her hand pumped his shaft. Fred was calling her name between grunts. His cock didn't taste as good as it had.\n\n\"Terminal cupcake!\" And there it was; smell and taste, a medley of him, on her lips. As Deb continued fellating her lover, she felt his tongue lapping insistently around her asshole as his fingers continued to saw into her sopping pussy.\n\n\"Eat my fucking ass!\" Was what she was trying to say, but her mouth was full of cock, so it was just a muffled mess. Her hips bucked, then convulsed. She felt Fred's balls tighten and was gifted with a gush of Freddy's baby batter. She gulped it down like a smoothy. It was the first time she'd ever swallowed semen. It smelled sharply of sandalwood but tasted like vanilla; she wished there was more of it.\n\nThey maneuvered into a clumsy kiss, still reeling from their orgasms. Fred pulled away, licking spittle and cum off his lips. He gazed into Deb's lust-filled eyes. He had one hand on the back of her neck, the other on his wet, still-hard cock. He was rubbing it against her vulva, sending waves of pleasure rippling across her body.\n\n\"You know what I'm going to do now Deb?\"\n\nThey were eye to eye. He on top, erection slick with her juices as he flicked his glans over her glistening folds. Deb lay below, still awash from her orgasm, legs spread invitingly, hips slightly raised in anticipation. Deb and Fred were locked eye to eye, glistening with sweat.\n\nBefore Fred could react, she grabbed his ass with both hands, pulling him into her, balls deep. Her back arched, breasts shuddering across her chest, her right leg spasmed.\n\n\"mmmm, soooo fucking goooood is what you're going to do F-freddy,\" She whimpered.\n\nFred stifled a yell with clenched teeth as he sank into her frothy depths. When he pulled out, he could feel her try to suck him back in. He'd never felt the sensation before and never wanted it to end. He trip hammered into her again and again.\n\n\"Fffreddy say the fucking thing,\" Deb garbled, as she fucked herself into Freddy with abandon. He drove into her twice more as their hips kissed with audible slaps. Her breasts shook with each thrust. Fred couldn't tell if it was sweat or tears, but it definitely stoked his fire.\n\n\"Terminal.\" Slap. \"Cupcake.\" Slap! Freddy kept repeating the phrase. His release was approaching like a freight train. He tried to focus on Deb's tattoo, noting how it contrasted with her skin, her quivering breasts almost made it look like the flowers were blowing in the wind. He hammered into her again, and she called out his name. He lowered himself down, kissing her earlobe while making a series of quick, circular thrusts as he deep dicked her. Deb's eyes had been squeezed shut, but they widened rapturously while she hissed his name again. She held him, hand on his ass, one in his hair. Her legs wrapped deliciously around his back, encouraging him to thrust harder. Fred somehow managed coherence, his teeth holding Deb's earlobe hostage as he drove his cock deep into her sopping furrow.\n\n\"I'm yours.\" Sweat dripped off his face, stinging his eyes.\n\n\"Yeah?\" She nodded. Her hips insisted Fred increase the pace. He was more than happy to oblige.\n\n\"Deb!\" He gyrated his hips for all he was worth.\n\n\"Mine.\" Deb repeated the word like a mantra with each thrust. Finally, Fred came hard into her. His head and chest raised up, his mouth agape as his cock pulsed its molten load into her core. Deb's strong legs held Fred in place, hips raised off the bed, glutes clenched as she milked her man. She rolled her abdomen as she felt his seed filling her. Deb quaked in the throes of another orgasm. Fred whimpered, holding on to the small of her back like a man in a hurricane. The other had a handful of supple breast, his thumb teasing her nipple.\n\nFred listed to the side onto the bed, spent. Deb crawled on top of him, a magnificent sweaty vision of lust. What little mascara she had ran in narrow rivulets off her delicate cheekbones. She grinned like a Cheshire cat over Fred, who was trying to catch his breath. She took his hands in hers, putting them on her sweaty, heaving breasts.\n\n\"Let's shoot for 10, stud.\" Not for the last time, Fred felt out of his depth.\n\n\"Yep,\" He agreed."
    ],
    "authorname": "A_Gavin_MaCross29",
    "tags": [
        "mf",
        "athlete",
        "cunninglus",
        "fellatio",
        "student",
        "male dominant",
        "oral sex"
    ],
    "category": "Mind Control",
    "url": "https://www.literotica.com/s/the-ponytail-express-ch-04"
}
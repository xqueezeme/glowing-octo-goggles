{
    "title": "Streetwalking with a Succubus",
    "pages": [
        "Cold night. Misty. Steven Shearsmith's breath fogged the air in front of him. He heard the blood pounding through his ears as he pressed close to the rough brick wall on the corner of the street and spied on the scantily-clad girl.\n\nShe wore a short jacket of stripy brown fur that seemed two sizes too small for her. It didn't even reach her midriff and couldn't have provided much benefit against the chill night air. That wasn't really the point. The jacket was open at the front and the shiny orange material of her bra\u2014all she wore underneath\u2014was stretched taut over the curves of her large breasts.\n\nSteven liked big boobs.\n\nThe girl wore a short skirt of the same shiny orange material. It gleamed in the orange glow of the streetlight above her and clung tightly to the lush curves of her behind. It was so short it failed to adequately cover the pink cheeks of her buttocks.\n\nSteven liked a perfect peach of an ass.\n\nShe was clearly a streetwalker. The only people that walked these misty streets and dark alleyways after the sun went down were prostitutes and their clients.\n\nAnd killers.\n\nSteven tightened his hand around the object he had in his pocket, careful not to prick his finger on the point.\n\nShe was alone. The cold and the fear had driven the others away. Fear, because five girls had vanished from this area in the past five months. Their bodies had yet to be discovered. A wolf stalked these streets.\n\nThe girl didn't seem to be bothered by either this or the cold. Other than the elaborate tattoos spiralling over her pale skin she didn't look much like the other working girls Steven was used to seeing. She was a lot more attractive for starters. Classy. Chic. Aloof. Along with her short fur jacket and tight orange miniskirt, she wore long orange gloves and stylish boots that were laced up to her knees. Her black hair was medium length and cut in a fashionable style. As she posed against the lamppost Steven thought she looked more like an actress or model than a woman of the night. He wondered what she was doing here.\n\nHis heart fluttered momentarily at her beauty and he stamped down on it. He had work to do. No distractions.\n\nThe one weird thing about her was her sunglasses. It was the middle of the night. There was no sun. Why was she wearing sunglasses? And such a large pair too.\n\nA light bulb dinged in Steven's head.\n\nA black eye. She was hiding a black eye. Someone\u2014a customer, pimp\u2014had clocked her a good one and left a bruise. That's why she was on the streets, and why Steven hadn't seen her before. She wouldn't be able to see her usual clients\u2014rich business types, probably\u2014like that, but the punters here wouldn't care.\n\nSteven was so proud of his deductive prowess he stopped paying close attention to his surroundings. His foot nudged against a discarded beer bottle and knocked it over with a clatter that sounded\u2014to Steven\u2014as loud as a siren.\n\n\"Who's there?\" The girl turned and stared in his direction.\n\nSteven ducked back behind the corner and pressed his back flat against the wall. He squeezed his hand around the narrow object in his pocket. He held his breath. Even though his heart sounded like a drum to him, he knew only he could hear it. Wait. Be quiet. Give it a few moments and the girl would put it down to her imagination playing tricks on her.\n\n\"Come out. I know you're there.\"\n\nNo, she didn't. She was bluffing, trying to sound bold to mask her fear. In a few moments she'd put it down to her imagination and go back to waiting beneath the streetlight.\n\n\"We can play hide and seek all night . . . if you're willing to pay,\" the girl said, her voice mischievous and seductive.\n\nSteven couldn't place her accent. Polish, or maybe Russian. Exotic. Sexy.\n\nStay put. Stay quiet. She'd realise it was only her imagination.\n\nSteven waited for a while, long enough for his thudding heart to subside from somewhere around his throat to back in his chest where it belonged. No more challenges came from the girl. She must have decided it was a cat or rat and put it out of her mind. Steven leaned around the corner for a peek . . .\n\n. . . and saw a flat black pair of sunglasses staring back at him. The girl leant casually against the lamppost and stared directly at him. Her bee-stung red lips turned up in a smile.\n\n\"There you are,\" she said.\n\nCrap.\n\nSteven froze, uncertain of what to do.\n\n\"Come over here, so I can see you,\" the girl said.\n\nSteven shuffled out of the darkness.\n\nThe girl wasn't intimidated by his appearance at all. Even though five girls had vanished without a trace from these streets over the past month, she wasn't frightened of him in the slightest, instead looking at him with an amused little half-smile on her lips. Steven was used to that. No one ever took him seriously. He tightened his grip on the object in his pocket.\n\n\"What are you doing here?\" the girl asked. \"You don't look like you're here for sex or companionship.\"\n\nHer wraparound shades hid her eyes completely. Steven couldn't read her expression at all, but he had the queer feeling her gaze was boring right through him like X-Rays.\n\n\"I-I-I . . .\" he stammered.\n\nHe started to pull out the object in his pocket.\n\nA car pulled up out of the gloom, stopping right under the streetlight the girl leant against. At the sight of its headlights Steven bolted like a startled deer.\n\n* * * *\n\nReece Pemberton opened the passenger door and let the girl in off the street. He was surprised at how attractive she was. She'd looked fine when he'd glimpsed her through the windscreen, but up close she looked even better. Beneath her fur coat her petite figure was curvy in all the right places and slim in all the others. Her medium-length black hair was cut in the style of a chic starlet. She looked like Hollywood's idea of a streetwalker and\u2014in Pemberton's experience\u2014Hollywood was usually way off when it came to these things.\n\n\"Are you okay?\" he asked.\n\nThe girl turned to him and raised a quizzical eyebrow.\n\nAh that explains it, Steven thought, seeing the large pair of sunglasses she was wearing, even though it was pushing on to midnight outside.\n\n\"I saw that fellow and thought you might be in trouble.\"\n\n\"Why would you think I might be in trouble?\" the girl asked.\n\n\"Don't you follow the news?\"\n\n\"No,\" the girl said. She looked every inch the insouciant starlet. \"Far too dreary and depressing.\"\n\n\"There's a killer on the loose. The press have dubbed him the Wolf of Whitechurch. Five girls have gone missing over the last few months.\"\n\nThe girl's lips parted in an open-mouthed expression of shock. She glanced out of the window. The ferrety-looking man with greasy ginger hair had already disappeared back into the darkness.\n\n\"I thought it was quiet,\" she said.\n\n\"Lucky for you I happened to be driving by on my way home from the clinic,\" Pemberton said.\n\n\"Clinic? Are you a doctor?\"\n\n\"Yes,\" Pemberton replied. \"Dr Reece Pemberton. I work at the sex clinic a couple of streets back. It's a charity thing. We hand out contraceptives, give the girls regular checks for STDs, that kind of thing. If we can't keep them off the streets we at least try to make it safer for them. I don't think I've seen you around before.\"\n\n\"I don't normally work here,\" the girl said. \"It's a temporary thing.\"\n\nAnd had something to do with those sunglasses, no doubt, Steven thought.\n\nHe glanced down the full length of the girl's body. She had a phenomenal figure. It was rare to see such a pair of firm, round breasts on a slim frame like hers without the aid of a surgeon's knife. It was a shame she'd chosen to despoil her lovely body with tattoos. The youngsters didn't seem to appreciate what they had nowadays.\n\n\"Um,\" the girl said. \"Thanks for helping, but can you drop me off at that corner up there.\"\n\n. . . so I can find a real paying customer. She was too polite to say it but Pemberton knew she was thinking it.\n\n\"Actually, I have a teensy little confession to make,\" Pemberton said. He reached across and placed a hand on her thigh, let it slide inwards. \"I wasn't just driving home through these streets.\"\n\n\"Really,\" the girl said. One warm hand settled over Pemberton's wandering hand while her other crawled across the gap into the doctor's lap. \"Does the good doctor like to take his work home?\" she breathed in a sultry voice.\n\n\"Don't think bad of me,\" Pemberton said with a cheeky smile. \"I have needs like every other man.\"\n\n\"I don't think bad of you at all,\" the girl said. \"You're my knight. I could be dead right now if it wasn't for you. It's only fair I reward you.\"\n\nHer hand brushed against Pemberton's crotch.\n\n\"Do you mind if we go to my home?\" he asked. \"It's not far from here and I prefer to be in more comfortable surroundings. I'll pay a little extra.\"\n\n\"Sure,\" the girl said.\n\n\"What's your name?\" Pemberton asked.\n\n\"Nicole,\" the girl replied. Beneath her opaque black shades her lush red lips turned up in a suggestive smile.\n\n* * * *\n\nSteven fumbled with his pockets. Why did they have to make them so damn tight?\n\nR419 JTW\n\nHe had to remember that.\n\nR419 JTW\n\nHe'd read the characters off the number plate of the silver-grey BMW the girl had climbed into.\n\nR419 J2W . . . \n\nNo. No. It was already starting to slip away.\n\nHe gripped the object in his pocket and tried to pull it out. The point of the pencil was caught under a fold.\n\nR419 J2W . . . \n\nHe got the pencil out. He rummaged in his other pocket and found a crumpled up page of notepaper. He stood in the orange glow of one of the streetlights.\n\nR419 J2W, R419 J2U . . . \n\nR419 J2U, A419 JTU . . . \n\nWas it R419 J2W or A419 JTU?\n\nSteven couldn't remember. It was gone, slipped out of his thoughts like every number seemed to. He slumped down. Why did he have such a poor memory? Why couldn't his stupid brain remember numbers?\n\n* * * *\n\nThe girl lounged on the big bed in the main bedroom of Dr Pemberton's spacious home, a converted farmhouse a little way out from the hustle and bustle of the town centre. The doctor appeared in the doorway. A smile was on his lips and a strange light sparkled in his eyes.\n\n\"I have another confession to make,\" he said.\n\nHis smile widened, became a rictus grin, like that of a skull . . . like death. Light glinted off the scalpel he held in his right hand.\n\n\"I'm the wolf,\" he said. \"I'm the killer. I killed all those girls. The power of life and death, it's the greatest drug of all.\"\n\nPemberton leant casually against the door, the only exit from the second storey bedroom.\n\n\"You can scream all you like. There's no one around for miles.\"\n\nStrangely, the girl didn't show any intention of screaming. In fact, she seemed completely unfazed.\n\n\"Aren't you afraid?\" Pemberton asked. \"I'm the wolf. The streets whisper my name; the papers write about my deeds; the TV screens scream of my crimes. I'm death.\"\n\nThe girl looked back at him without a flicker of fear.\n\n\"I see nothing more than an arrogant little human,\" she said. \"Another pathetic little speck of blood and meat puffed up with delusions of their own importance. You all think you're playing the starring role in one of the grand tales of existence.\"\n\nNicole smiled.\n\n\"You're not.\"\n\nShe took off her shades.\n\n\"This was never your story.\"\n\nPemberton dropped the scalpel. His face twisted into a mask of fear. Too late he realised even wolves fear tigers.\n\n* * * *\n\nSteven's eyes were drooping shut when he felt a tap on the back of his shoulder. He jolted in alarm, scattering crumpled up balls of notepaper.\n\n\"What are you still doing out?\"\n\nHe turned and saw it was the same girl he'd seen earlier\u2014the really sexy one with big tits and a fur jacket. She was still wearing those big black shades, even though it must be around two in the morning.\n\n\"You're okay.\" His shock gave way to relief. \"I was worried that c-c-car . . . might have been . . . the k-k-killer.\"\n\n\"Oh him,\" the girl said. \"He was nothing, nobody at all.\"\n\nShe watched as Steven leant down and picked up the paper he'd dropped.\n\n\"What are those?\" she asked.\n\n\"N-n-notes,\" Steven said.\n\nHe held up one of the crumpled and dog-eared bits of paper. Strings of letters and numbers were scrawled across it in haphazard fashion. The girl tilted her head and her red lips drew together in a puzzled pout as she tried to decipher Steven's cryptic markings.\n\n\"N-n-number plates,\" Steven explained. \"I hide and write down the number plates of the cars the girls get into. That way if they . . .\" his lips turned down \". . . if they don't come back I can tell the p-p-police and they'll know who the k-k-killer is.\"\n\nThe girl looked at him. He couldn't tell what she was thinking behind those shades.\n\n\"And you do this every night?\" she asked.\n\n\"When I can,\" Steven said. He puffed his chest out. \"I haven't got him yet . . .\" his chest deflated \". . . but I will.\"\n\nThe girl smiled. Steven thought she'd picked up a little more colour than when he'd seen her earlier. Her skin was still very pale\u2014like milk\u2014but there was a glow about her she hadn't had before. She looked less like a ghost.\n\n\"That's so sweet,\" she said. \"You're like a guardian angel to the girls on this street. I bet they must really like you.\"\n\nSteven looked at the floor.\n\nThe girl frowned. \"They don't?\"\n\nSteven shook his head. \"They don't like me being around. They call me b-b-bad things,\" he said. \"C-c-creep. R-r-retarded.\"\n\n\"That's not very nice,\" the girl said, \"to treat you like that when you're looking out for them.\"\n\nShe put a slender finger to her bright red lips. The long nail was painted black, Steven noticed.\n\n\"Oh. They think you're going to frighten away legitimate customers,\" she said.\n\nSteven nodded.\n\n\"And still you come out here?\" the girl asked.\n\nSteven nodded. \"Someone has to stop him.\"\n\nThe girl stepped forwards. She was standing very close to him. She turned her head up and down, from side to side. The nostrils of her perky little nose dilated. Steven thought she might be sniffing him. He didn't smell bad, did he? He sniffed his arm pits to make sure and instead caught a blast of the girl's perfume instead. It smelt nice and . . . exciting.\n\n\"You smell nice,\" the girl said.\n\n\"I shower every morning,\" Steven said. Proud. His mother had been very clear on the importance of good personal hygiene. \"You smell nice too,\" he said.\n\nThe other working girls wore perfume, but it was often so strong it made him feel a little queasy if he got too close. This girl's perfume wasn't like that. It didn't leave an aftertaste like rotten old tyres in the back of his mouth. Instead it slithered up into his brain and massaged the parts that made him feel good.\n\nThe girl smiled. She glanced coyly away.\n\n\"I'm Nicole,\" the girl said. \"I didn't get your name earlier.\"\n\n\"St-st-steven,\" Steven said.\n\n\"Mmm, Steven.\" Nicole took another half step forwards.\n\nSteven felt a little uncomfortable at how close she was. She was practically standing right on top of him. He shuffled backwards to create a little more space. Nicole ducked her head into the gap and moved it from side to side with her nose stuck out.\n\nShe was sniffing him again!\n\n\"You're not on d-d-drugs, are you?\" Steven asked. \"My mother said I should keep away from people on drugs.\"\n\nNicole lifted her head back up and smiled at Steven. \"No, I'm not on drugs.\"\n\nShe slid forwards again. Steven shuffled back to make more space.\n\n\"Do you like looking at the other girls?\" she asked.\n\nSteven nodded. \"They're sexy,\" he said.\n\n\"Am I sexy?\" Nicole asked.\n\nSteven blushed. He nodded again.\n\n\"Would you like to have sex with me?\" she asked. Her red lips turned up in a mischievous smile.\n\nSteven's mouth dropped open. His face went bright red.\n\nNicole shrugged off her fur jacket to reveal a tight orange latex bra underneath. Steven's eyes boggled. She was very big . . . around the chest. The material of her bra was stretched so tight it looked like it might burst. Beautiful.\n\nSteven's lips parted in a wide smile. Then it fell away into abject sadness.\n\n\"I c-c-can't,\" he said. He fumbled in his pocket and came up with a few coins. \"I don't have enough money. I spent the last of my d-d-disability allowance on groceries yesterday.\"\n\nNicole bobbed her head down and looked at the sorry collection of coins in Steven's palm. She put a finger to her lips.\n\n\"Hmm, let me see. You've been out here all night looking out for me. I think that entitles you to a bodyguard discount. Now if we subtract that from my usual rate that leaves us with . . . yes, I think this should be sufficient.\"\n\nNicole plucked a copper two-pence coin from Steven's palm.\n\nThe next moment the rest of the coins were pinging off the tarmac pavement as Nicole gave Steven a suggestive smile before placing both hands against his chest and shoving him back into the dark alley and up against a wall. Her arms wrapped around him and she crushed her soft lips against Steven's. His initial shock melted into warm pleasantness as Nicole kissed him. Her hot breath filled his mouth and ignited fires in his veins. She rubbed her crotch against him and her hands roamed up and down his back. Steven felt the soft mounds of her breasts press against his chest as she hugged him tightly.\n\nThe kiss went on and on, fanning the flames within Steven until it felt like steam was rushing out of him. Nicole sucked on his mouth, drawing the heat from him and letting it mingle with the inferno raging in her own body. Steven didn't want it to end.\n\nWhen Nicole broke off the kiss it felt like a physical snap, as if a single object had been broken into two. Steven reeled as if he'd been hit. He felt oddly wobbly and weak-kneed, even though that was the kind of thing that only happened in the silly romances his mother liked to watch.\n\nNicole gave a sultry sigh of contentment. She ran a tongue around her mouth. Steven thought he saw little white wisps twirling between her lips. She inhaled and drew them into her body.\n\n\"Mmm, that's much better,\" Nicole said. \"There was a really bad taste in my mouth I wanted to get rid of.\"\n\nShe pressed forward and her dextrous hands started working on his clothes\u2014getting under his hoodie and untucking his T-shirt from his trousers. Steven shivered as her warm hands came into contact with his skin. Each touch left a pleasant little tingle behind it. Her hands slid up his chest, taking his top with them. Steven lifted his arms and let her peel his T-shirt and hoodie up over his head. His naked flesh was exposed to the clammy night air, but Steven didn't mind one bit.\n\nStill smiling, Nicole took a step back and wriggled her hips in a teasing dance. She reached behind her and unhooked her orange latex bra. Steven's eyes widened as her large, round breasts bounced free. They looked so soft and inviting. His hands were in front of him and reaching out before he even realised.\n\nBefore Steven could get his errant hands back under control, Nicole's hands darted out and closed around his wrists like manacles. He didn't resist as she pulled his hands forwards until they rested on the soft swell of her breasts.\n\nOoh. Soft. Nice.\n\nSteven gently squeezed the pillowy flesh beneath his fingers. There were black markings all over her pale pink skin\u2014tattoos of strange symbols and pictures. They didn't affect the smoothness Steven felt beneath his fingers. Her skin was how Steven imagined soft silk to feel like. He ran his fingers over the soft little nubs of her nipples.\n\nNicole leaned forward and lightly kissed him on his left nipple. A warm little tingle rippled out from where her moist lips had touched his skin. Nicole's hands moved down to his trousers. She popped out the button and started to unzip his fly.\n\nWas this a dream? He'd dreamt of some of the other girls on the street, the nicer ones, but none of them had ever looked as beautiful as Nicole. No dream had ever felt as solid as this.",
        "His hands left her breasts. He moved his arms, wanting to wrap them around her and hug her naked body close to his. Nicole batted them away.\n\n\"Ah ah,\" she said in warning.\n\nSteven pushed out his fleshy lower lip. She wasn't teasing him, was she? Some of the other girls teased him. They got him all hot and wound up, but then, laughing cruelly, left him like that, left him so he had to go home and take care of it. Nicole wasn't like that, was she?\n\nNicole tilted her head back up. Her eyes were hidden by her wraparound shades.\n\n\"I'm going to give you a reward, something nice, but\u2014\" she held up a slender forefinger \"\u2014only if you're a good boy and do exactly as you're told. Can you do that?\"\n\nSteven nodded.\n\n\"Good,\" Nicole said. \"Now put your arms back against your sides.\"\n\nSteven did as she said and let his arms rest against his sides. Nicole finished unbuttoning his trousers and dropped both them and his underpants to the floor.\n\n\"Now lean back and don't move. Not at all,\" Nicole ordered.\n\nSteven leant back against the cold brick wall behind him.\n\n\"And relax,\" Nicole said, her red lips forming a naughty smile. \"You're going to enjoy this.\"\n\nShe jumped up and wrapped her lithe legs around him. She wasn't wearing any underwear beneath her short little skirt. As her waist fell, Steven felt his cock push against the entrance to and then slip inside her warm tunnel of soft flesh.\n\nHe gave a gasp and Nicole caught his breath as her moist lips wrapped around his in another kiss. She sank down on him until his erect cock was all the way inside her. He felt the slippery and muscular walls of her vagina squeeze and undulate around his throbbing erection.\n\nHe was having sex with her. Real sex.\n\nNicole wrapped her arms around him and hugged him tight enough to mash the soft pillows of her breasts against his chest. Her body was clasped tightly against him. Her heat surrounded him in a pleasant glow.\n\nNicole twisted her head from side to side as she sucked on Steven's tongue and lips in frenzied passion. She braced her knees against the wall behind him and bobbed her hips against him with fluid bounces.\n\nSteven was a good boy. He did exactly as she said and didn't move. He didn't have to. Nicole was so supple and her pussy so tight she was able to generate exhilarating friction with only those short little bouncing thrusts. Steven closed his eyes in pleasure as he felt his cock slide back and forth in the snug clutch of her vagina. Nicole writhed and wriggled and rubbed her swollen boobs against his naked chest. Her heat seeped into him and trickled down into his balls. The damp chill of the night air was already long forgotten.\n\nNicole found a rhythm that set Steven's knees trembling uncontrollably. Inside her, it felt like the swollen head of his dick was pushing between soft bands of muscle that stimulated him with pleasurable little squeezes.\n\n\"Coming,\" Steven warned.\n\nAs much as Steven wanted to release within her warm flesh, he knew that wasn't right. This was where he was supposed to give a warning and pull out. He thought. His experience at these things was very limited.\n\nNicole didn't heed him. If anything she wrapped her body around him tighter, as if she wanted to prevent his escape. She gripped his waist with surprisingly strong thighs and pressed all the way down until the lips of her pussy were kissing his crotch. His whole length was all the way inside her moist heat. The soft walls of her vagina pulsed and throbbed up against his shaft. It felt like her whole sex was sucking on him.\n\n\"Coming,\" Steven grunted.\n\nHe couldn't hold it back for much longer. She had to let him pull out.\n\n\"Release it,\" Nicole whispered in his ear. Her words slithered down his earhole and gently massaged the folds of his brain.\n\nHer pussy throbbed around him like the great low beat of a heart. Muscular walls squeezed against the head of his cock in a hot sticky kiss.\n\nSteven let go with a gasp. He felt his cock swell up against the soft pressure of her vagina and spurt his load of semen right into her moist heart. His cock continued to throb, pulsing with bright bursts of pleasure as he released gouts and gouts of his seed inside her.\n\nNicole went wild on top of him. She slithered and writhed against his body like an electric eel. She rocked her hips back and forth, stimulating his orgasm on and on as her moist flesh rubbed against his dick. Her sex convulsed around him. He felt her hot juices bubble out and dribble down onto his balls and inner thighs, sending tingling fireworks crackling across his skin as they ran down his legs. His head was wrapped in suffocating clouds of her musk. Her perfume formed a solid mass around his face. Each breath he took fanned the fires burning inside him.\n\nSteven couldn't resist or deny her. His hips twitched as he continued to fire load after load of cum into the quivering centre of her sex. She gulped it all down and sucked on his dick for more. How long could this go on for? It felt like her pussy was milking him\u2014milking pints and pints of cum from his body.\n\nSteven slid down the wall. There was no strength in his legs at all. He felt weak all over . . . weak and giddy with pleasure.\n\nNicole rained burning hot kisses down on his lips, cheeks, jaw and neck. Her fingers gripped the side of his head and ruffled through his hair. Her fingernails felt strangely sharp\u2014like claws. Still her vagina continued to suck on his dick, slurping up his cum as if it was ice cream. Steven felt every throbbing release as a white burst of bliss.\n\nHe sank further down the wall. The cold hard bricks against his back didn't register at all. He felt only Nicole's hot body wrapped around him, the moist warmth of her sex wrapped around him and milking him with gentle pulses.\n\nAnother smell mingled with Nicole's exotic perfume\u2014something nasty, like rotten eggs. Steven felt a little skew-whiffy inside. There was a weird feeling in his guts\u2014empty, cold. He ignored it. Nothing mattered so long as he was enfolded in Nicole's warmth.\n\nNicole tossed her head back with a sigh.\n\n\"You're so moreish I could slurp you all up,\" she said, her cheeks flushed red, \"but that's enough.\"\n\nShe unwrapped her arms and legs from Steven and stood up. His penis came out of the snug grasp of her vagina. It pulsed once, twice, little white dribbles oozing down the shaft, and then fell quiet in a mournful sulk.\n\nAww, was it over? Steven thought.\n\nNicole's sunglasses had been slightly dislodged by her passion, the right side riding up on her forehead, and for a brief instant Steven saw her eye, or rather the space where her eye should be. Had she lost it? Steven thought he saw an empty pit, or maybe a pool of blackest oil, then Nicole pushed her shades back down and it was once again hidden.\n\nShe bent down and retrieved her bra and fur top. Aww, Steven thought as her wonderful big, tattooed boobs went back behind their covers.\n\n\"Are you okay?\" Nicole asked with an amused smile.\n\nSteven blinked. A big goofy smile was plastered across his face.\n\n\"Let me help you up.\"\n\nHe was on the floor? Steven blinked as he realised he was sitting with his naked ass against the cold tarmac pavement and his back slouched against the brick wall. What was he doing down here?\n\nLaughing, Nicole took his hand and pulled him back onto his feet. Steven tottered unsteadily as he reached down to draw his trousers back up. His legs felt like spaghetti, but overall he felt like he was wrapped in a nice warm glow. He knew he was grinning like an idiot and he knew his mother had told him not to do that as it gave the nasty types an excuse to be unkind to him, but he felt so good he just couldn't help himself.\n\nNot totally good. There was a groily feeling in his stomach and he felt tired, really tired.\n\n\"I think we need to get you home and into bed,\" Nicole said.\n\nBed, yes that would be nice.\n\nNo! He couldn't.\n\nSteven shook his head. \"I can't,\" he said. He held out his crumpled up pieces of notepaper. \"The wolf. Someone has to catch the wolf.\"\n\n\"I wouldn't worry about him,\" Nicole said. \"I have a feeling we won't hear from him ever again.\"\n\n\"But that never happens,\" Steven said. \"They keep killing and killing until someone stops them. Well, apart from Jack the Ripper . . .\"\n\nSomething in Nicole's enigmatic little smile gave Steven pause.\n\n\". . . but no one knows why he stopped,\" he finished.\n\n\"Yes, very strange that,\" Nicole said.\n\nShe blew Steven a kiss and walked away into the early morning mists.\n\nSteven must have been more tired than he realised because\u2014for a split second\u2014he thought he saw horns on Nicole's head . . . and wings, great black bat wings folded up behind her . . . and a tail\u2014sleek, black, slender like a whip and forked at the end like a devil's\u2014swinging behind her legs. Just a glimpse, and then she was gone, vanished into the darkness with only the sultry traces of her perfume left behind to remind Steven she'd ever been there at all. "
    ],
    "authorname": "manyeyedhydra",
    "tags": [
        "succubus",
        "nicole",
        "hooker",
        "streetwalker",
        "serial killer",
        "demon",
        "devil",
        "jack the ripper",
        "prostitute"
    ],
    "category": "Erotic Horror",
    "url": "https://www.literotica.com/s/streetwalking-with-a-succubus"
}
{
    "title": "The Whipped Heiress Ch. 04",
    "pages": [
        "For years I had sexual fantasies about how a naked slave could be used, abused and punished, however, Corrina Nomikou had her own ideas. One of them was called the single glove.\n\nI was made to stand naked in front of a massive mirror and Ms. Nomikou and one of her maids laced me into it. The leather harness tightly imprisoned my arms behind my back, making me helpless and pulling my elbows painfully close together.\n\n\"It does wonders for a girl's figure, dear. When Katerina is finished with the laces, you'll love yourself,\" Ms. Nomikou insisted as the laces were tightened and my shoulders were pulled farther back, forcing my breasts indecently forward.\n\nI sighed and gazed at my reflection in the mirror. I watched my straining shoulders and prominently displayed breasts with a silent sort of approval. It seemed as if my breasts had been enlarged by at least one cup size.\n\n\"You look exquisite, dear,\" Ms. Nomikou gushed. \"Now straps over your shoulders, just in case.\"\n\nThe leather straps exerted an upward pull on the glove, making me feel even more helpless. The glove immobilized my arms and forced me to thrust my breasts out prominently as if I were offering them up to anyone who stood in front of me.\n\n\"I'll be taking you out in public today,\" Ms. Nomikou informed me as she reached between my legs and began to rub her fingertips over the delicate folds of my pubic lips. \"Today is a very important day and most of the slaves will be making a public appearance.\"\n\nMy breathing became labored as Ms. Nomikou toyed with my swollen labia and I found it difficult to speak or even to concentrate on what she was saying. My breasts heaved up and down as my pussy throbbed and my breathing became ragged. I let out a frustrated moan and my head reeled. My body trembled with the effort of remaining still. And then I gasped\n\n\"Today is Adelfi Day,\" Ms. Nomikou explained. \"Loosely translated into English, the Sklavian word \"adelfi\" refers to an activity when one female slave whips another female slave. Adelfi Day is a new tradition, it was established a mere five years ago, however it's already quite popular.\"\n\nErotic tingles spread across my naked body, and I shuddered, barely able to understand the words coming out of her mouth. She played with my pussy until I was moaning and trembling with sexual desire.\n\n\"Both the tourists and the locals get a thrill from watching one naked slave-girl whip another. Karen and I discussed it and decided that you should be one of the slaves who are whipped for the entertainment of the crowds. They're expecting you to be at the Public Stage today no later than 7:00 PM.\"\n\nMy heartbeat sped up triple-fast at the announcement that I was going to be whipped for no reason other than to entertain the prurient masses, however, Ms. Nomikou's fingers continued to stroke my swollen clitoris and made it difficult for me to concentrate on my fear of being whipped.\n\n\"It will be a grand spectacle,\" Ms. Nomikou assured me.\n\n\"Mistress, being whipped hurts terribly,\" I said as I fought my way through a haze of potent sexual arousal.\n\n\"Yes, I have picked up that impression,\" Ms. Nomikou replied as she continued to diligently finger my sex,\n\n\"But I haven't even done anything wrong,\" I protested. \"Shouldn't an agonizing punishment like a whipping be reserved only for when I've been very bad?\"\n\n\"Oh, Heather, you are so well behaved that it could take years before you do something bad enough to deserve a whipping! And we cannot wait that long. Adelfi Day is today, and your owner has already volunteered you to be whipped for the crowds!\"\n\n\"Mistress,\" I said, attempting to make a cogent argument against me being whipped, but Ms. Nomikou's fingers were driving my libido into an incandescent heat, and I became so delirious with lust, it was almost impossible to think. I tried to talk, but my brain had a hard time forming the words I needed.\n\n\"I think that it's nice for a girl to be intensely aroused before she's whipped,\" Ms. Nomikou said. \"All those endorphins flooding a girl's bloodstream, filling her with delicious sensations of lust and desire, they help to make the experience of being punished far more enjoyable.\"\n\nI was lost in an erotic haze, and I only understood perhaps half of the words that came from Ms. Nomikou's mouth. The insistent throbbing in my sex and the agonizing waves of desire robbed me of my ability to focus and I simply gave up. I allowed myself to be led and controlled and taken away from the estate. I was thrust into a car and delivered to the authorities in town who prepared me for my public whipping.\n\n_ _\n\nDozens of slaves were scheduled to be whipped for Adelfi Day and when I was brought in, I was escorted into a cage with perhaps thirty other naked females. Some of them were bound with ropes, others with handcuffs, still others with leather restraints, but all of us had our hands secured behind our backs.\n\nAs the morning progressed, more slaves were brought into the cage and crowding conditions forced us slaves to press our naked bodies against each other, I suspected that it was planned that way deliberately.\n\nThe slaves broke into social factions while we were locked up. The largest faction of slaves spoke fluent Sklavian. The second largest group spoke fluent English, and the smallest social group of slaves were gagged and were completely unable to communicate.\n\nI was in the English-speaking group.\n\n\"I shouldn't even be here,\" a red-headed slave complained as her naked body brushed up against mine. \"I haven't done anything wrong! I've been perfectly obedient and cooperative! I haven't done anything to deserve this!\"\n\n\"None of us have,\" a cute brunette with taut abs and sexy muscles replied. \"This is all part of some tradition. We're being whipped because Sklavian tradition demands that slaves be whipped on this date for the entertainment of the crowds.\"\n\n\"We get to suffer, the tourists get to enjoy our suffering,\" I added. \"In a nation where slavery is legal, you end up with customs like this.\"\n\n\"Nobody told me about traditions and cruel customs like this when I signed my slave contract,\" the redhead complained. \"I feel like I got tricked.\"\n\n\"You should have actually read the contract,\" said a woman with a posh British accent. \"I thought it was quite clear that even perfectly obedient slaves can be subjected to cruel corporal punishments.\"\n\n\"I wish I had read the contract,\" the self-pitying redhead said. \"But I didn't. And now, I'm screwed.\"\n\nThe redhead was prepared to continue bemoaning her fate and on impulse I silenced her by pushing my body into hers and kissing her on the lips. My mouth melded with hers, and she stopped talking as I hungrily kissed her and parted her lips with my tongue.\n\nI didn't really think about what I did before I did it, but most slaves are starved for sex and physical affection. Rubbing my naked body against hers and kissing her passionately was enough to distract her from her fears and her regrets for a short while.\n\n\"Mmmmmff,\" she moaned into my mouth as we kissed, and I enjoyed the sensations of physical intimacy with her as much as she did with me. Or at least I'm assuming that we both enjoyed it equally. Slaves are kept in a constant state of intense sexual need, so we'll be willing to have sex with anyone at any time.\n\nI felt erotic tingles as I rubbed my breasts up against her naked body and probed her tongue with my mouth. I wanted to wrap my arms around her, but my arms were helplessly bound behind my back in that wicked single glove. Still, I got lost in the highly intimate experience of making out with the naked slave-girl while surrounded by dozens of other naked slaves, who doubtlessly watched with libidinous interest.\n\nThe redhead melted and returned my kisses passionately until the handlers unlocked the cage door and dragged me out for my public whipping.\n\nThere's a sense of crushing hopelessness every slave-girl deals with when she's about to be whipped. She feels that she would promise anything to escape the stinging agony of the whip, but she also knows that all the begging and pleading in the world won't save her.\n\nThe handlers who dragged me to my fate were tall and professional looking in tailored black and grey uniforms. They each had wicked-looking whips clipped to their utility belts, even though I was to be whipped by one of my fellow slaves.\n\nA chain hung down from the arm of the gibbet and I was ordered to stand underneath the chain. It didn't take a great deal of insight to guess that my wrists would end up being bound to that chain and that my naked body would end up being suspended over the stage.\n\nThe handlers unlaced me from the single glove that had bound my arms so tightly together. I was grateful to have my arms free from that hateful glove, but then my wrists were joined in front of me, and lengths of rope were used to expertly tie my wrists together and make me helpless.\n\n\"Don't struggle,\" one of the handlers warned me and then she stood on a wooden chair. I was ordered to raise my arms above my head and then more ropes were used to secure the ropes around my wrists to the metal ring at the bottom of the chain. Once all the ropes were properly in place and tied tight, the handler hopped down from her chair.\n\n\"There, that should hold you,\" the handler assured me before smacking me cheerfully on the ass.\n\nThe other handler looked me up and down and said, \"Maybe we should restrain her ankles. If her legs are free, she could twist and thrash around quite a bit.\"\n\nThe two handlers discussed the pros and cons of further restraints and eventually decided that I needed to have my ankles bound.\n\n\"Legs apart, pretty girl,\" one of the handlers said and then she secured a leather strap around my right ankle. Her partner secured an identical leather strap around my left ankle. They pulled my ankles further out to the sides and then used ropes to tie the leather ankle restraints to stainless steel rings that were embedded in the wooden surface of the stage.\n\nI trembled and groaned as the utter helplessness of my situation dawned upon me. There was a strain in my shoulders and inner thigh muscles as the way they bound me had stretched my body extraordinarily taut. I was on the balls of my feet as my arms were raised so high and legs were spread so far apart my heels couldn't touch the ground.\n\n\"That's much better,\" the handler assured me before smacking me cheerfully on the ass once more.\n\nI trembled in fear and trepidation and then I was introduced to the slave who was tasked with whipping me. Her name was Blake. The way she was oiled up, her naked body glistened, and all her sexy curves, dips and muscles were erotically on display.\n\nBlake looked like an athlete. She was a tall brunette with a concave belly, a slender waist, taut buttocks and admirable muscle tone. She spoke English with an American accent and she tried to put me at my ease.\n\n\"Are you nervous?\" she asked as the handlers stood back and took the single glove somewhere backstage.\n\n\"I'm bound, stretched wide open and about to be whipped in front of an audience of hundreds of sadists. Is there any way a girl in my shoes could possibly be calm?\"\n\n\"The whip stings, but the whip marks will fade,\" Blake quietly assured me. \"And you're a very brave girl. You signed a slavery contract. Most of the people in the audience would never be brave enough to do that. You're a strong, gutsy woman and you are going to survive this.\"\n\nThe handlers who prepared me for my whipping either were offstage so they couldn't hear what Blake and I were saying. Questioning the bravery of the sadistic tourists and locals was the sort of thing that could earn a slave-girl additional punishment. I was relieved. I'd taken an instant liking to her and didn't want to see her abused. Her words had helped me to diminish my panic somewhat, however, the many men and women craning forward to get a good look at my naked body as I was helpless stirred up my emotions and forcefully reminded me of my status as a naked and lowly slave.\n\nOne of the handlers held up a whip and offered it to Blake. There were at least six strips of leather dangling from the handle, and I surmised that it was the sort of whip that could inflict an alarming amount of pain on a naked girl.\n\n\"I've been ordered to give you fifty lashes,\" Blake said and then she saw my eyes go wide with horror. Fifty lashes with an intimidating whip like that? I whimpered and felt all my courage drain away.\n\n\"You can take it,\" Blake assured me. \"Slaves learn how to take the pain from harsh punishments and transform it into something else. You'll adapt. We all do. Trust me.\"\n\nWhile I was bound helpless, Blake leaned in and ran her hands lightly up and down my breasts before taking possession of my nipples and rolling them between her thumbs and her index fingers.\n\n\"Blake, what are you doing?\" I asked timorously as her ministrations caused a surge of delicious tingling sensations.\n\n\"Giving your body something on which to fixate other than pain,\" Blake replied, and then she stepped forward and pressed her naked body right up against mine, breast to breast. Her skin was warm, and her nipples stiffened as she rubbed herself against me. Then her mouth clamped over mine and she kissed me. The kiss was filled with libidinous passion, and I savored every second of it. When her tongue sought entrance to my mouth, I parted my lips and eagerly welcomed it.\n\n\"I intend for you to be feverish with desire before the whip starts to redden your skin,\" Blake explained when she broke from the kiss. \"The sting of the whip will have to fight against the tide of sexual delirium. Wave after wave of desire will drown a lot of the pain out. Just you wait and see.\"\n\nI wanted to argue with Blake, however, my head was reeling and my ability to form words had become greatly impaired. She returned to kissing me, and her kisses were somehow both delicate and passionate. Her tongue danced against mine and created a delicious surge of tingling sensations that began in my mouth and made their way all the way down to my loins.\n\nMy body was already alive with sexual electricity when she reached between my widespread thighs and rubbed her fingertips up and down the line of my sex. I felt my clitoris urgently throb and my whole body was consumed by a wave of libidinous heat.\n\n\"Aaaahhhh,\" I gasped as she thrust her fingers into my vagina and probed my moist interior. The sensations unleashed by her mischievous fingers flooded across my helplessly bound body as I felt a potent orgasm building inside of me. I was intensely stimulated, and my heart was racing. Blake kissed me again and I moaned into her mouth as my sexual heat climbed even higher. I squirmed as much as possible for a girl in tight bondage. It was darkly exciting to be so helpless as a stranger worked her fingers into my sex and forced an orgasm to blossom inside of me while hundreds of lecherous tourists watched.\n\nMy body strained against the leather straps that held me open and my whole body trembled. I gasped and grunted and felt as if I were being raped. I couldn't move and sweat began to form on my naked body as Blake's fingers speared my sex deep and drove me into a feverish state of sexual desperation.\n\nMy whole body ached with sexual need, and I felt deliciously helpless as Blake withdrew her fingers from my sex and left me trembling with unrequited lust. My head was reeling and when Blake touched me next, she grabbed my nipples and roughly pinched them. My nipples became extraordinarily hard in response to the abuse they were suffering and the pain of being tormented by Blake's strong fingers was mixed with an all-consuming sexual heat. I moaned and shook with my sense of vulnerability as Blake toyed with my naked body and then she reached between my legs again.\n\nThis time, instead of fingering my wet sex, she pinched shut my swollen labia, eliciting a whimper of erotic pain from my lips. My wet sex overflowed, and dripped fluids as Blake declared, \"Now, you're ready to be whipped.\"\n\nWith hundreds of tourists focusing intently on my bound nudity, Blake picked up her whip and began to abuse my breasts with a series of hard slaps. The leather cracking across my soft flesh made a series of loud THWACK! CRACK! SPLAT! sounds.\n\nMy breasts seethed with stinging pain, and I struggled against the bounds that held me, but I was bound too securely to get free. All I managed was to do was strain my muscles and twist around in a way that delighted the crowds.\n\nBlake concentrated her blows on one breast at a time, first my left breast, then my right, then my left again. My breasts burned and I swung my head so violently that my long hair went flying haphazardly. When my blonde hair was in such disarray that it covered much of my face, Blake set her whip down, gathered up my hair and worked it into a neat ponytail before she resumed whipping my breasts once more.\n\n\"Aaaaahhhhh!\" I screamed in agony as my breasts were decorated with stinging red stripes. The crowds seemed to enjoy the sounds of my screams and roared with approval. The cruel blows across my innocent, round boobs came faster and faster. And every time I screamed, the prurient crowds responded with boisterous hoots and howls of delight. As I strained against my bonds, I managed to lift my feet completely off the floor of the stage for approximately half of a second.\n\nThe pain was excruciating however, I was forced to confront the reality of something that Blake had said. She had said that slaves learn how to take the pain from harsh punishments and transform it into something else. The whip still stung, but I began to derive a delicious thrill from the pain. I filled the air with my agonized screams, but I felt a dark, intoxicating thrill mixed in with my agony.\n\nBlake was done whipping my breasts, but the crowd wanted more. \"Your breasts are already quite red,\" Blake said over the sound of my sobbing, \"but there are other parts of your naked body that haven't been marked up at all.\"\n\nIt took my brain a few moments to digest the significance of Blake's words. Then I felt her hand between my widespread legs, fingering my pink slit and working my pubic lips apart. I reflexively tried to close my legs shut, but the leather restraints on my ankles made that impossible. Blake played with my pussy, getting the swollen folds of my labia even more swollen and sensitive before whipping my innocent pudendum.\n\n\"Aaaaahhhhh!\"\n\nI screamed louder and louder as I strained against my bonds. The whip splatted wetly against my abused sex, my sexual juices staining the leather strands of the whip and splashing onto my thighs. It was undignified and humiliating, but I was a slave, and all my dignity was supposed to be stripped away, so punishing me in this way was ideal. The pain of the whip across my pink slit felt deliciously sweet and agonizing at the same time. And I moved my hips in a shameless, wanton fashion, almost as if the whip were my lover and I was urging the whip to thrust into my sex more forcefully.\n\nMy whipped sex throbbed with the most painful yet exquisite sensation. There was a sea of faces that watched as my vulnerable sex was painfully reddened. They delighted in my suffering, unaware that the white-hot pain I was experiencing had given birth to white-hot lust. I was gasping from libidinous desire as much as I was gasping from the stinging pain.\n\nThen, much to my surprise, and to the delight of the crowds, Blake dropped to her knees, grabbed my buttocks and worked her tongue across my swollen, abused pubic lips.\n\n\"Aaahhh! Aaaahhhh! Aaaaahhhhh!\" I cried out as she spread the lips of my sex and she began to lap at my hypersensitive clit. I strained against my bonds and squealed as Blake's tongue heightened both my painful suffering and my feelings of orgasmic ecstasy.",
        "My back arched, and I thrust my pelvis shamelessly forward, urging greater contact with Blake's mouth. Blake licked harder and faster, and I strained as the sensations of pain and pleasure both intensified. The crowd roared with approval as I jerked in my bondage, whimpered and panting. The orgasm tore through me in wave after wave of dark, overpowering sensations that turned me into a mindless, screaming, sexual plaything, incapable of coherent thought, but only capable of wanton, shameless desire.\n\nI screamed lustily and frantically bucked my hips against Blake's licking tongue. She licked me expertly as my body trembled and shook. And then she plunged two fingers into my wet sex, and roughly thrust her fingers in and out of my pussy as her mouth licked and suckled my throbbing, inflamed clitoris.\n\nMy body was flooded with a dark, erotic hunger and a feverish, sexual delirium robbed me of my capacity for rational thought. Blake's fingers pumped in and out of my sex as I shuddered and moaned. I was helpless, dazed and filled with sexual fever. I had been cruelly whipped across my vulnerable sex, my boobs and my sensitive nipples, and my naked body was obscenely on display for a nasty, boisterous crowd, but all of this seemed to pale in significance to the sexual tidal wave that had swept me up and was carrying me away to a place of carnal ecstasy.\n\nAt that wild, outlandish moment, I found myself convinced that I made the right decision in signing that slave contract. It was terrifying being naked, helpless and whipped in front of a crowd of cruel, sadistic tourists, however, the sexual rewards were extraordinary.\n\nI twisted and writhed and the sensations inside of me exploded. As Blake knelt between my legs and licked my poor, abused sex, the orgasm tore through me. I twisted and bucked, and convulsions wracked my body as Blake fucked me with her fingers.\n\nShe pounded her fingers up into my aching pussy and sucked my hard, swollen clit as I threw back my head and let loose with a wild, uninhibited scream that seemed to go on forever. The orgasm took possession of my body and continued to shake me and my sex spasmed for a remarkably long time, longer than I would have thought humanly possible.\n\nWhile I was still thrashing around in the throes of orgasm, Blake picked up her whip and I received multiple lashes across my abdomen, buttocks and thighs. I was riding so high on an orgasmic tidal wave I barely even felt the sting of the whip.\n\nI screamed and rode wave after wave of agony and ecstasy for what seemed like hours. If I hadn't been sentenced to sixty days of slavery by Karen Bowden and the Sklavian government, I never would have experienced the erotic bliss of being sexually abused, whipped and raped by Blake. As bizarre as it may sound, that was an experience I would treasure forever.\n\n_ _\n\nAfter it as all over, I was taken back to the estate. The maids and the kitchen staff were eager to examine my fresh whip marks, and Ms. Nomikou allowed them to trace their fingers across my tender, reddened flesh before I was taken upstairs.\n\nOnce upstairs, it took less than a minute before Ms. Nomikou and Mrs. Bowden both insisted that I drop to my knees and lick them to orgasm.\n\nAs I knelt between Mrs. Bowden's legs and lapped at her pink slit, she informed me of some disturbing developments.\n\n\"I ran into Irini at the public whippings today,\" she informed me. \"She wants to borrow you for several hours to take you to some university up north.\"\n\n\"I don't trust her, mistress,\" I said as I pulled away from her slick pubic lips for a few seconds. \"She's an incorrigible sadist.\"\n\nMrs. Bowden swatted me across the ass with a riding crop and admonished me to get back to work, licking her vagina.\n\n\"She's a menace, alright,\" Mrs. Bowden agreed. \"But as a slave, it will be good for you to be loaned out to mean girls like her occasionally. It helps to build character. Also, her mother is extremely wealthy, so I don't want her to go running to her mommy, complaining that I'm being mean to her.\"\n\nIrini asked for permission to take me to Frangou University to show me off to some of the students there. She was either a student there or was looking into enrolling as a student. Either way, Mrs. Bowden gave Irini permission to take me there so she could impress the university students with her naked, American slave-girl.\n\nIt felt weird to be naked on a university campus. The teachers and the students looked so dignified and high class, and I was stark naked with my hard nipples and plump, glistening labia indecently on display.\n\nThe students looked smart in their school uniforms of grey and white and black. The students clustered around me, fascinated by my whip marks, they examined the reddish marks on my skin that had faded only slightly. I had been whipped just the day before and the marks were still tender. I gasped and whimpered as the bolder students traced their fingers across my wounded flesh, touching me where the whip had touched me.\n\n\"What was it like being whipped?\" a female student with honey blonde hair asked as she traced her fingertips across the more vivid whip marks on my breasts.\n\n\"It was the single most painful experience of my life,\" I replied as she touched my nipple repeatedly.\n\nSeveral of the whip marks were layered across my nipples and she brushed her finger across my sensitive left nipple for the fifth time, making it perk up even more than before.\n\n\"I've heard that some girls get sexually aroused during a whipping,\" she said. \"Did that happen to you?\"\n\nI considered lying to her. I got sexually aroused every time a dominant woman subjected me to any sort of corporal punishment, but I didn't want to admit that to this polished, smartly dressed female, with all her haughty classmates listening.\n\nHowever, I also didn't want to lie, as that could get me into trouble. I ended up telling a version of the truth that would make me seem less slutty.\n\n\"I'm forced to take powerful aphrodisiacs every day,\" I replied truthfully. \"I'm sexually aroused all the time.\"\n\n\"Everyone take your seats,\" Ms. Georgakila called out to her students and the keenly interested girl was forced to take her hands off my naked body and she went to go sit down.\n\nMs. Georgakila taught biology and Irini brought me in as a visual aid to help in teaching her class about the female sex organs. I didn't speak any Sklavian, Luckily, for me, Ms. Georgakila and her students spoke fluent English.\n\n\"Heather,\" Ms. Georgakila said with a voice of unquestionable authority, \"spread your legs wide and pull your pubic lips apart. I want my students to get a good look at your genitals.\"\n\nI felt my face blush red hot as I complied. My pubic lips were incredibly tender after having been whipped just the day before, but the physical pain of grabbing my sensitive, abused labia seemed to pale in comparison to the embarrassment I felt as twenty-four young men and women leaned forward and fixedly stared at my visibly plump and glistening pubic lips.\n\n\"You young men, it's especially important for you to pay attention,\" the teacher announced to her class. \"For the females in the class, this should all be review. For the males, this could be a wealth of new information.\"\n\nUsing a telescopic pointer, Ms. Georgakila pointed out the various parts of my abused vulva and gave the technical terms for each.\n\n\"These are the labia majora,\" the teacher explained as she pointed them out, \"and these are the labia minora. Normally they do not look so swollen and inflamed. However, they puff up, become engorged with blood and unfurl during sexual arousal.\"\n\nI was forced to stand there with my pubic lips pulled apart as the teacher explained to her class the role that blood flow plays in the shape, size and behavior of a woman's labia. Then she moved on to explain to her students (at least the male ones) about the existence of the clitoris and the clitoral hood.\n\n\"The clitoris contains approximately eight-thousand nerve endings,\" the teacher explained, \"making it extraordinarily important in any attempts you make to stimulate a female sexual partner. Furthermore, this tiny erogenous zone spreads the feeling to fifteen-thousand other nerves in the pelvis. This makes the clitoris a central player in bringing orgasmic pleasure to any female.\"\n\nI was instructed to slide the clitoral hood away from my clitoris, so the students could all get an unobstructed look as the teacher gave her lecture. Of course, the students had plenty of questions and I was expected to stand there with my swollen clit lewdly on display while those questions were answered.\n\nMs. Georgakila had to explain that not all women have the same size clitoris. My clit was easy for her students to locate as mine is larger than average. However, some women have clits that are quite small and unfortunately the smaller ones require far more effort to stimulate than the larger ones.\n\nConversely, women with exceptionally large clits tend to be very sensitive and are averse to having direct clitoral stimulation.\n\nOne of the male students directed a question specifically at me and asked if my clit was especially sensitive.\n\nIt was mortifying enough to have my sex organs used a prop for Ms. Georgakila's lecture on the female anatomy. It was even more humiliating for me to have to answer questions about my own sex organs.\n\n\"Well, Heather?\" the teacher asked, \"is your clitoris sensitive?\"\n\nI could feel blood rush to my face as I blushed red hot with embarrassment, but I explained to the well dressed, urbane students that my clit was extremely sensitive, but I liked direct clitoral stimulation anyway. For me it seemed, there was no degree of sexual stimulation that was too extreme.\n\nNext the teacher pointed out the location of my urethral opening. She admonished her male students that this was never used for sexual stimulation and that they should never attempt to stick anything in there. Women wouldn't appreciate it.\n\nNext, the teacher pointed out the location of the vagina and ordered me to slide two fingers inside myself to make the location to my vaginal more obvious. I moaned and kept my eyes shamefully downcast as I obeyed. My pussy was dripping wet at this point and my fingers came out glistening with moisture.\n\n\"Those fluids indicate sexual arousal,\" the teacher explained. \"The vast majority of the time, a woman's vagina will be dry. A woman only becomes wet like that when she's ready for sex.\"\n\nThere was some discussion about how female slaves were constantly wet and Ms. Georgakila had to explain that slaves were an extreme exception to the rule. A female who is constantly wet would be analogous to a male who is constantly hard. Neither of those things are the norm. Slaves have to undergo special conditioning to be constantly ready for sex.\n\nNot long after that, the teacher brought up the topic of pubic hair. Most women my age had a great deal of it. I had none.\n\n\"Both male and female slaves are prohibited from having pubic hair,\" the teacher explained. \"Hair removal is typically accomplished by carefully shaving it away. Although sometimes a slave is taken to a hair removal specialist who will use waxing to remove the pubic hair. The main advantage or waxing is that the hair follicles are removed deep down at the roots. That way it takes weeks for them to grow back.\"\n\nThere was a detailed discussion of the advantages of shaving vs. waxing. There was also a discussion of the advantages of hair removal vs. keeping the pubic hair. They covered all of the options rather extensively.\n\nJust when it seemed that every aspect of the female sexual organs had been explained to the class in detail, Irini spoke up and suggested that it might be educational if I showed the boys how to bring a girl to orgasm by having me play with my pussy while the whole class watched and took notes.\n\n\"Um, I think Ms. Georgakila has already told them everything they need to know,\" I said tremulously. Ordinarily, I would do anything to have some orgasmic relief, however, my pussy was still sensitive from being whipped and masturbating would be extremely painful.\n\nIn addition to that, playing with my pussy while thirteen male and eleven female university students openly stared would be intensely humiliating.\n\n\"Heather, you're a prop,\" the teacher admonished me. \"You're not here to offer your opinion. You're here to display your naked body and allow my students to see how the female anatomy works. And I agree with Irini, it could be truly educational for the male students to see what it looks like as a female is expertly brought to orgasm. You will show them.\"\n\nFor a few moments I stood there frozen, like a deer caught in the headlights, but then the teacher informed me that she could punish me if I refused to follow orders.\n\nFeeling as if the entire world was watching, I slowly began to rub my clit with one hand and penetrate my vagina with the fingers of the other.\n\nIn addition to playing with myself while an audience of students watched, I was ordered to explain in detail what I was doing and how it felt.\n\nI felt that the information I was sharing was extremely educational and would be quite helpful if these students ever got girlfriends, however, Irini suggested that the male students should line up in front of me and that I should show each of them one at a time exactly where and how to touch me to get the greatest sexual response.\n\nMy clitoris and my Gr\u00e4fenberg spot were my two most responsive erogenous zones. It was demeaning, but I showed every male student in the class how to locate both things and how best to touch me there if they wanted to stimulate strong sexual arousal. My clit and my pubic lips were sore and touching them made the pain much more intense, but I continued to rub and finger myself anyway.\n\nOne of the more audacious of the students asked if he could finger my pussy and try to bring me to orgasm himself. As a lesbian, I felt extremely uncomfortable at the prospect of my sex being impaled on a man's fingers. Being fingered by a man would leave me feeling sexually violated, however, Ms. Georgakila wasn't at all concerned about my feelings and she told the boy to work his fingers into my pussy and see if her could bring me to climax.\n\n\"Aaahhh! Aaaahhhh!\" I gasped. Even though he wasn't my type, he'd been paying attention when I explained how to stimulate my genitals. While I stood there with my pelvis thrust forward and my legs spread wide, he rubbed my clit with his thumb and penetrated my vagina with his fingers. With the entire class watching he played with my clit and fucked my pussy until I was brought to a screaming, shuddering, boisterous orgasm. My legs went wobbly, my knees went weak, and I collapsed onto the floor while gasping and crying out uncontrollably.\n\n_ _\n\nIrini and another female student helped me to get up off the floor. My legs felt rubbery, and I was still trembling from orgasmic aftershocks. I was both emotionally and physically exhausted and Ms. Georgakila told Irini to take me down to the restroom and clean me up.\n\n\"She's become drenched in sweat, and she's leaked sexual fluids all over her thighs,\" she said. \"Get her looking somewhat presentable before returning her to her mistress.\"\n\nThen she turned to the other female student who had helped me to stand and said, \"Demi, go with her. Make certain that Heather doesn't fall down while she's in your custody. She's looking overtaxed and quite fragile at the moment.\"\n\nI leaned on Demi and Irini and they led me through the hallways of their school. I passed dozens of smartly dressed students as I was escorted, and the more people who saw my naked body, the more naked I felt. Every set of eyes that focused on me made me feel more and more exposed.\n\nOne of the students stopped to talk with Demi and Irini. They spoke in Sklavian, so I didn't understand a word they said, however, when they were done chatting, Irini turned to me and said, \"I was going to take you to the restroom and clean you up with paper towels, however, Doukissa had a better idea.\"\n\n\"We're going to the showers,\" Demi added.\n\nAll three women had wicked smiles on their faces, and I felt like I was the only one who wasn't in on the joke.\n\nWe went down to the first floor, and I was ushered through a locker room and into the room where female students showered. The floor was concrete and there were shower nozzles along one wall. I was escorted towards them and Irini ambled over to the corner of the room where there were taps and a coiled hose.\n\nSuddenly, Demi was holding a single tail whip. I don't know where she got it. She just seemed to pull it out of thin air.\n\n\"Stand over there,\" Demi said. \"And turn to face Irini. She's going to hose you off.\"\n\nThe whip that Demi was holding screamed authority. At least for me it did. When you're a slave, whips are a badge of authority that you take very seriously. Failure to do so usually means painful punishments.\n\nI stood there and waited for Irini to spray me with the hose. It never occurred to me that the water from the hose might be freezing cold. An icy jet of water struck my naked flesh and seemed to knock the breath out of me. It was so cold it stung like a hundred needles, and I cried for Irini to stop.\n\n\"Mistress! It's freezing! Turn it off! Please!\"\n\nIrini ignored my pleading and the cold spray of water continued to abuse my naked body. I tried to evade the cold, cruel spray, but no matter how I bent and twisted, the hose followed me. Then, the jet narrowed and intensified seeking those areas of her being where it hurt most, my nipples, my pubic lips: my anus.\n\nI attempted to use my hands to protect the most delicate parts of my anatomy, but the arctic jet always seemed to be ahead of them. I huddled in the corner, but Irini and Demi ordered me to turn around. When I didn't obey right away, Doukissa cracked a whip across my ass and admonished me for trying to avoid the spray from the hose.\n\nI was a slave, and I knew I couldn't disobey them. I turned my naked, vulnerable body towards Irini and her wicked hose. Then she turned the hose on me, aiming directly at my aching breasts and my swollen pubic lips.\n\nI was aching and miserable, then Irini stopped spraying me long enough for Demi to give me a bar of soap. I stared at it dumfounded for several seconds.\n\n\"You lather yourself up with it, Heather,\" Demi called out to me. \"I thought that would be obvious!\"\n\nI wanted to hurl that bar of soap at Demi's head, however, both she and Doukissa had whips. Antagonizing either one of them would have ended poorly for me.\n\nI lathered myself up. Demi made constant suggestions about which parts of my body should be lathered up most extensively and I obediently did as she instructed. This meant that I spent most of my time lathering up my tender pubic lips, my sore buttocks and my poor, aching breasts\n\n\"Okay Heather, now I want you to face Irini,\" Demi called out to me, \" Feet wide apart. Reach your hands high above your head.\"\n\nI'm sure that Demi would never have done it if she were in my shoes. It was a cruel exposure for a naked girl, but I was just a slave. Suffering in my inferior status, I obediently assumed the pose. My soaped and lathered naked body was soon under assault by the icy spray of Irini's cruel, wicked weapon and I panted and whimpered as she tormented me with it.\n\n\"Spread you legs, Heather! Wider than that! Thrust your pelvis forward! Show me those pink lips!\"\n\nThe water bit at my defenseless, naked body and Irini and her friends enjoyed my suffering. All traces of soap were soon washed away. But the jet had been made more vicious. As it roamed up and down my naked, vulnerable body, hurting my sensitive pussy and my swollen, aching nipples, I couldn't keep from flinching. The stinging agony was almost like being whipped all over again.",
        "And when she directed the concentrated spray directly at my pink slit, my tender pubic lips were separated and held open by the force of the blast. I whimpered and cried out as my sensitive labia were harshly abused, but Irini kept right on abusing them.\n\nFinally, Demi ordered me to turn around and face the concrete wall, standing with my legs far apart, bent over at the waist and with my hands pressed up against the wall. Irini then aimed her hose at my poor, stinging ass and sprayed me mercilessly, not missing a single inch of my naked skin, I cried and sobbed when she aimed the cold, punishing spray directly at my anus and tender pubic lips.\n\nWhen it was over, Irini turned off the water, but I was still sobbing. I was cold, dripping wet, the most intimate, erotic parts of my anatomy were a riot of pain, and I couldn't stop the shuddering sobs of agony."
    ],
    "authorname": "allison22",
    "tags": [
        "bondage",
        "cfnf",
        "female slave",
        "legal slavery",
        "lesbian cunnilingus",
        "lesbian femdom",
        "public whipping",
        "public nudity",
        "whipping"
    ],
    "category": "NonConsent/Reluctance",
    "url": "https://www.literotica.com/s/the-whipped-heiress-ch-04"
}
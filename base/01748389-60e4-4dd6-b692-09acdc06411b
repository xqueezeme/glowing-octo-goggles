{
    "title": "The Mountain Ch. 05",
    "pages": [
        "Thanks for all your comments! I only have one more chapter completely written, so the chapter updates may be a little slower from here on out. I could definitely use a beta reader to keep things moving. If anyone is interested, please private message me!\n\n#\n\nWhen she woke, she was aware of two things. The first was a consuming, throbbing pain in her wrist. The second was Warder.\n\nHe was in the room with her. He was there and together they had done--what had they not done?\n\nImages flashed through her mind. His body covering hers. She had urged him on. She had begged him.\n\nShe had an image of herself kneeling at Warder's feet and taking him into her mouth, sucking and teasing with her tongue until he grew hard. When he came, he had held her head against him and she had swallowed every drop.\n\nWhat had come over her? Had she been drugged? There could be no other explanation for the way she had acted. She hadn't been herself and now that she was, she had to focus exclusively and completely on the challenge of finding her way out of the mountain and to safety. Her mission didn't matter anymore. Or, at least, she was incapable now of carrying it out. She was too weak.\n\nShe had given herself to that creature. He hadn't forced her. She had begged him. What drugs could do that?\n\nShe willed herself to rise. She knew he lurked nearby and she thought, perhaps, that she could kill him now with her bare hands. If only she could lift her head. The throbbing in her wrist revealed itself to be only the worst of a litany of aches and pains, including the wound his teeth had left at her shoulder. She felt as if she had run for miles. Her muscles throbbed. Her pussy was sore and when she looked down, she saw blood and...other things...dried on her thighs. Her head spun at the movement and she lay back down, turning sideways so that she could see the table and the desk.\n\nNo sign of Warder.\n\nHe wasn't in the bed. She sat up, more slowly this time, and scanned the room.\n\nNothing.\n\nShakily, she got to her feet and walked to the tiny bathroom. The door was ajar, as usual, and she saw that it, too, was empty.\n\nShe was alone.\n\nStill, she felt as if Warder were in the room, watching her. She felt that he was the near the same way that she could sometimes feel if someone was watching her from across the room. She tried the metal door, wondering if he were lying in wait on the other side, determined to face him. The door creaked a bit at her efforts, but it remained shut and there was no movement on the other side.\n\nLucy shook her head to try to clear it. The sense of Warder's closeness remained, and she easily summoned a headache on top of her other pains.\n\nUncertain how to proceed, Lucy stumbled back to the tiny bathroom and turned the single tap. She tried turning it all the way right and then all the way left and realized in a moment why she had been afforded the luxury of the distant bath. The shower tap only ran cold, and beneath the warmth of her over-used muscles, the feeling of intense, permanent chill that she usually felt inside the stone walls had returned. Defiantly, she forced herself under the cold spray anyway, scrubbing at her skin until she felt certain that every sign of his attentions had been washed away. Even after she was clean, she forced herself to remain standing under the spray. She realized that she was waiting for the water to wash away this strange awareness of him, the sense of his presence that she could not shake.\n\nIt wasn't working and her teeth were actually beginning to chatter, something she had only experienced once before during an ill-advised February swim at the beach.\n\nShe turned off the water and stood still in the cold air. She didn't have a towel or any clothes. After a moment of indecision, she snatched one of Warder's towels from the laundry basket that sat out, abandoned by Persephone. She sniffed it warily. She could smell his scent on the fabric. She didn't want to undo what she had tried to accomplish with the shower, but she was freezing. She patted herself dry with the towel. Shivering, and with her skin still slightly damp, she slipped a clean shirt over her head.\n\nShe wanted to climb back into the bed and hide under the covers. But the covers smelled of him, too. Worse, they smelled of the mingled scent of their lovemaking. They were wrinkled from sweat and fluid, tangled up and even torn in places. She slid to the floor near the foot of the bed, huddling into the corner and bringing her knees up under the fabric of Warder's shirt.\n\n\"This isn't real,\" she told herself out loud. \"This didn't happen.\"\n\nAll the while, she was aware of Warder, his being and not-being with her. She was not alone even though she felt incredibly lonely.\n\n#\n\nWhen he returned, she was grateful.\n\nOnly because it was him and not Persephone.\n\nShe couldn't face Persephone's derision. She had little energy, and being cold and angry with Warder consumed all of it.\n\nWarder closed and locked the metal door as usual, scanning the room. He found her easily and frowned. \"Your hair is wet,\" he said. \"You'll freeze.\"\n\nHe had carried a basket into the room. He set it down and retrieved a clean blanket. Crouching next to her, he wrapped it around her shoulders, gathering her hair and arranging it so that it was outside the blanket instead of touching her neck.\n\nThe warmth had the effect of setting her shivering again. Without comment, Warder gathered her into his arms and sat with her on the bed, chafing his hands up and down her body until the shivering ceased. \"What were you thinking?\" he said.\n\nShe tried to answer, but she was too weak.\n\nWhen her shivers ceased, he set her down and retrieved a towel. Silently, he began to squeeze the water out of her hair, brushing out the tangles with his long fingers.\n\nThe way he was tending to her was almost soothing, and as Lucy regained her strength, she found the energy to push him away. He let her and stood up, watching her with something that looked almost like concern. He dumped the contents of the basket onto the bed next to her.\n\n\"Persephone has acquired you more suitable clothes,\" he said. \"Dress warmly.\"\n\nShe didn't have to be invited again to cover her body. She reached a hand out from under the blanket and sifted through the offerings. There were more of the same unsuitably summery dresses, but there were also leggings lined in a fleecy material and a black sweater. She pulled on a pair of the leggings, a dress, and the sweater. The heaviest item of clothing in the pile was a fleecy lined jacket, similar to Warder's. She slipped into this as well, running one hand over the buttery-smooth leather.\n\nPersephone wouldn't have wanted her to have anything this nice. She knew it as well as she knew that Warder was watching her again. He had picked out these clothes or arranged for her to have them. She was sure of it.\n\nShe recalled the other jacket with the antenna hidden inside and saw that it was still lying on the floor, discarded when Warder had undressed her. Slowly, she took off the new jacket and made a beeline for the old one.\n\n\"This one is warmer,\" she said, shrugging into it, her face flaming.\n\nWarder misinterpreted her blush. He assumed that even as his mate refused to meet his eyes, she found herself drawn to the jacket that held his scent. Her behavior reassured him that she would settle, with time. Her emotions would be heightened by all that had happened, but she would also begin to feel safer in his care, whether she wished it or not. And once he knew he could trust her, he would allow her to visit her home--under his guard, of course. Once that promise was kept, he would never have to worry about her leaving the mountain again.\n\nUnless...\n\nBut it was too soon to ascertain what the future would bring. From the moment he saw her, he sensed that she would be powerful in her submission. But only time would tell what that truly meant. She was omega--of that, he was certain. But whether she was what he had been looking for, the missing link to a plan to finally leave the mountain?\n\nOnly time would tell.\n\nHe had to come to know her better. To test the boundaries of their bond.\n\nHe relished the opportunity.\n\nBut it was too soon to bed her again. She was moving slowly, clearly sore. And now that the haze of estrous had faded, she would redouble her efforts to distance herself from him. Likely, she would cling more fiercely to hating him as punishment for the way she would still crave his presence. His cock.\n\nRealizing thoughts in that direction would weaken his resolve not to have her again, he chose to stick to his plan to take her out of the room.\n\n\"You'll want your boots, too,\" said Warder. \"We're going out.\"\n\n\"Out?\"\n\nWarder nodded.\n\nWatching him warily, Lucy pulled on her boots. He thought to carry her again, but that measure had been intended to keep her from seeing where they were going. Eventually, she would need to learn some of the more important pathways through the mountain. He would allow her to walk.\n\nWhen he gestured for her to leave the room, she hesitated and then scurried out of his way, following behind him. He noted that she took care to keep at least an arm's length away from him. Swiveling her head back and forth, she was noting every small change in the monotonous scenery. His mate was clever and was always seeking information to help her to escape. He allowed it because he knew that it was her pride that made her strong. Eventually, he would force her to see that her place with him was all she would ever want.\n\n#\n\nSheera cursed as yet another tendril of ivy tangled in her hair. She yanked it away, cursing again when she managed to yank several hairs out of her head. Taking a deep breath, she let her annoyance cool and reached up, using her knife to cut away some of the offending vine.\n\nThis part of the island was completely overgrown, one of many buffer zones between the islanders and the mountain. Two days ago, the council had decreed that islanders were no longer permitted to leave the safety of the main village. The few remaining islanders who lived outside the most populated areas--farmers, loaners, and a few die-hards who refused to leave what had once been secluded summer homes--had been moved to temporary housing in the old school gym.\n\nThe explanation given was lingering tension with the mountain people since Lucy's capture. Sheera knew there had to more to it, but her father was frustratingly silent on the subject. Normally, she would have found out the rest in a few days with eavesdropping or other forms of casual reconnaissance. But she had chosen to remain focused on her goal of finding a way into the mountain from the power plant. Let the elders posture and make their decrees--she would do something real.\n\nThe ban on travel did make things difficult. Sheera knew at least a dozen ways to move in and out of the village undetected, but only a very few were comfortable. The safest routes--in terms of fear of detection--were also the least convenient.\n\n\"Hey, gorgeous.\"\n\nSheera stopped swinging her knife just in time to avoid Miles. He jumped back with a laugh and put his hands on his hips, blocking her path.\n\n\"What do you want?\"\n\n\"I haven't seen you in a week,\" said Miles. \"I figured if I wanted to talk to you, I had to risk getting caught leaving the village, too.\"\n\n\"You're an idiot,\" said Sheera half-heartedly.\n\n\"I'm horny,\" said Miles.\n\n\"God,\" said Sheera. She pushed past him, mindful of the knife, and squinted in the direction of the village, trying to determine if Miles had left a path she could take advantage of.\n\n\"No one saw me,\" said Miles. \"And besides, I have permission to travel freely.\"\n\nThat caught Sheera's attention.\n\n\"Why's that?\" She turned back around and Miles grinned.\n\n\"Wouldn't you like to know.\"\n\n\"You're unusually cocky today, Miles,\" said Sheera.\n\n\"Am I? I thought I was always pretty cocky.\"\n\nSheera gave a short laugh. \"You know that you have information I might actually be interested in and it's making you obnoxious.\"\n\n\"You usually find my obnoxious behavior charming.\"\n\nMiles closed the distance between the in a few puppy-like strides. He reached for her hand and tugged her all the way around to face him, resting his free hand against her cheek. \"I know you miss her,\" he said, \"but you can't keep disappearing. You can't withdraw entirely. You'll go crazy.\"\n\n\"Maybe I already am,\" said Sheera.\n\nShe had meant to lighten the mood, but Miles only shook his head. \"You're lucky then,\" he said. \"I like my women a little crazy.\"\n\n\"I am not your woman, Miles,\" said Sheera, giving him a light shove. \"Get over yourself.\"\n\n\"We could--\" He rested his palm against the tree, cornering her.\n\n\"I'm not going to fuck you against that tree, Miles.\"\n\n\"Okay,\" said Miles, frowning. \"What about that one?\"\n\nDespite herself, Sheera laughed. \"I'm not feeling it, Miles.\"\n\n\"Let me see if I can help you with that.\"\n\nMiles dropped to his knees in front of her, reaching for the hem of her skirt. Sheera pushed at his shoulders, but she didn't truly intend to dissuade him. In a moment, she was leaning back against the very tree that Miles had indicated, biting her lip to keep from moaning.\n\nWhen he wasn't talking, Miles had a very talented tongue.\n\nHe brushed his teeth lightly over her clit and Sheera came, tangling her fingers in his hair. When she came back to herself, she tugged harder, urging him to his feet. In a moment, he released himself from his jeans and plunged into her while Sheera pulled at his shirt, seeking to rake her fingers along his strong back.\n\n\"Sheera--\"\n\n\"Pull out,\" she commanded.\n\n\"I will. I will. I'm almost--\"\n\nShe pinched him, hard, and then shoved him away.\n\n\"I wasn't ready!\"\n\n\"I was,\" said Sheera, trying to keep her voice light. She had been almost completely lost in Miles, his body, his scent. She couldn't afford to lose herself so completely. She needed to stay in control. \"I've decided you don't know anything I want to know after all. You're just a little boy lost in the woods.\"\n\n\"Fuck you--\"\n\n\"No,\" said Sheera, running ahead of him down the path to the village.\n\n\"Sheera!\" Miles shouted after her, his usually calm voice shot through with anger. \"There's going to be a rebellion. If I die fighting, would you even fucking care?\"\n\nSheera stopped. \"They can't do that,\" she said, quickly closing the distance between them. \"They'll never win and Lucy would end up as collateral damage. We need to be smart about this!\"\n\n\"Right,\" said Miles as he tugged his jeans back into place, \"And smart is lurking around that abandoned power plant all day chasing your father's crazy theories. Theories that even he has abandoned, let me remind you.\"\n\n\"You have to stop this, Miles. It's suicide.\"\n\n\"You think I can't do anything. That just because I let you lead in bed, I'm weak.\"\n\n\"There is power in submission,\" said Sheera. \"And it's difficult to dominate someone you don't respect.\"\n\n\"Those monsters inside our mountain seem to be doing just fine.\"\n\n\"Maybe they do respect us,\" said Sheera. \"After all, it's been years and they could have killed us. They haven't. But if we attack--\"\n\n\"Oh, you're a sympathizer now?\" said Miles. \"Even after what they've done to Lucy?\"\n\n\"We don't know what they've done,\" said Sheera. \"Don't talk about her like she's dead.\"\n\n\"You can't stop this, Sheera,\" said Miles. \"You can't control everything.\"\n\n#\n\n\"Where are we going?\" asked Lucy.\n\n\"Back to the Great Hall,\" said Warder.\n\nThis time, Warder was allowing her to walk. She was still weak and hurting from their time together, but she pretended she wasn't, afraid he would insist on carrying her again if he realized how she was hurting. She followed behind him and he got further and further ahead. When he turned abruptly and saw how far back she was, he frowned.\n\n\"I'm all right,\" she said quickly. \"You just have--longer legs than me,\" she added, catching her breath.\n\nAfter that, Warder walked more slowly. She could see that it pained him. His powerful body seemed to radiate impatience at being forced to move at such a pace, even if his movements remained fluid and graceful.\n\nThey passed few people in the hallway and everyone they did see seemed to be in a hurry, too. Still, Lucy had a sense that the strangers were aware of her and of Warder. They were careful to give them space in the wide tunnel. Around a corner, the tunnel widened and a teenage girl rushed by, mumbling to herself. Her shoulder brushed Lucy's arm as she passed and Warder stopped short at the same time she did. He let out a low growl and the girl jumped, eyes wide, leaping away from Lucy as if she had been shocked. She didn't say anything, but she looked from Lucy to Warder with wide eyes and an open mouth.\n\n\"Oh--\" was all she said. \"I--I'm sorry, Warder.\"\n\n\"Watch where you're going,\" said Warder shortly, acknowledging the apology with a curt nod. Then, he shoved at Lucy until she was standing more firmly behind him.\n\n\"Don't talk to anyone,\" he said as she hurried away. \"They might talk to you.\"\n\nIt hadn't occurred to her that they would see other people. Always, before, she had been kept from them. As if it were only herself and Warder and Persephone--and Grace--inside the mountain.\n\nLucy estimated that it had taken them about ten minutes to reach the Great Hall on the first night Warder had taken her there. With her walking, it took at least twice as long. Partly, this was because she was still weak. But even at full strength, this did not bode well for her next attempt at escape. If--when-- she could find a way out of Warder's room, she would need to cover twice as much ground as he did to get ahead of him.\n\nThoughts of escape were briefly replaced in her mind by an awareness of a strange sound. It was like water flowing over rocks. Not the gentle trickle that seemed to be everywhere inside the mountain. But a cacophonous flood, like a waterfall or the crashing waves of the distant ocean. As Lucy tuned in to the sound, it clarified and she realized that what she was hearing was a flood of voices emanating from the curved entrance to the Great Hall. The room that had been so strange and empty and bright when she had first seen it was now very obviously full of people.\n\nMountain People.\n\nSelf consciously, she tugged at her sleeve, pulling the heavy fabric of the jacket down over the wound on her wrist. She didn't know why it seemed important to hide it. Somehow, she suspected that the wound would give her away, telling people about what she had done with Warder. Warder noticed what she was doing. He caught her wrist--gently, so as not to reopen the wound.\n\n\"They will know,\" said Warder. \"Even if they can't see it. They can smell it.\"\n\nShe ignored him and tugged harder on the heavy sleeve of the jacket. Warder stood next to her, trapping her between his body and the curved wall of the hallway. He waited until she had arranged the jacket just so. Then, he reached up and gently brushed her hair--dried now into a riot of tangled curls--over her left shoulder, so that the mark he had made on the right side of her neck was clearly visible. To fix her hair, she would have to let go of the jacket. Either way, the evidence of his claim on her would be visible. Glaring at him, she tried to step out of his arms. He stopped her, pressing her gently but firmly back against the wall.\n\n\"Why are you doing this?\"\n\n\"You weren't allowed to go out before, being what you were. Now, we are mated. It is safer for you inside the mountain, so I am giving you an opportunity to meet some of my people. It will be easier for you to imagine a life here if you have connections beyond our own.\"\n\nMated?\n\nLucy choked back a laugh. \"I don't want more connections,\" she said. \"And I'm not going to make friends inside the mountain. That's called 'Stockholm Syndrome.'\"",
        "He pressed closer so that Lucy was forced to turn her head to keep from looking him in the eye. \"I can respect your reluctance to build relationships. You refuse to resign yourself to your situation. Much has changed for you and I am patient. I will not force you to make friends. For now, I only ask that you be civil.\"\n\n\"I can't decide what to address first,\" said Lucy, mocking his formal tone. \"The insinuation that I am less than civil or the idea that you are actually patient.\"\n\n\"Am I not patient?\" For a moment, Lucy almost thought that Warder was answering sarcasm with sarcasm. But his face remained deadly serious. She bit back a sharp reply and instead, shook her head slightly.\n\n\"I don't know,\" she said. \"I--just don't make me go in there.\"\n\n\"If you do not appear in our society now, it will be more difficult later. Stay close.\"\n\nWith that, Warder stepped away from the wall and grasped her upper arm. He pulled her along with him the last few feet to the entrance of the hall. The roar of voices ceased almost instantly.\n\nIt was common for islanders to discuss the warriors--conjecturing about their way of life and, most of all, their resources. A year could not pass without someone in town raising the possibility of an active rebellion. None had ever been mounted. At first, people were still recovering from the losses of the initial invasion. Resources were scarce and day-to-day living was uncertain. As time went on and the warriors became a more benign presence, the relative safety of their existence created its own inertia. It was tense living in the shadow of the mountain, but at least, after a time, it was certain. Still, the rebellion constantly bubbled beneath the surface. And a frequent point of discussion concerned the potential population of the warrior people. Lucy had heard estimates as high as two or three hundred, but most people agreed that these numbers were improbably high.\n\nNow, Lucy realized that the islanders were wrong.\n\nThere were at least two hundred warriors in the Great Hall alone.\n\nAnd all of them were looking at her.\n\n#\n\nWarder led her into the room, as unmoved by the stares and whispers as he was by anything.\n\nSlowly, conversations resumed, quietly at first and then in earnest.\n\nWarder greeted several people with a nod of his head, but he didn't stop to speak. The stars were hidden under the glare of bright lights and the hall had been set with tables for dining, with a long aisle in the center. Warder led Lucy down this aisle. She tried not to look to either side, but it was difficult to ignore the people watching them. She was immensely grateful when Warder led her through a wide doorway into a smaller, less populated room filled with tables of food.\n\nFor a moment, Lucy was somewhat distracted from the embarrassment of being dragged through a crowd of warriors. She hadn't eaten anything except for Persephone's tasteless oatmeal-like soup since her captivity began. The food in this room was elaborate by comparison. She saw actual bread and something that looked like fruit. Warder led her to one of of the tables and handed her a plate, balancing his own so that he could keep one hand at her back. He walked behind her as she examined the buffet. When she bypassed a platter of something unfamiliar, he stopped her and put something on her plate.\n\n\"You'll like it,\" he said.\n\nHer appetite fled at the proprietary gesture, but she didn't argue, watching sullenly while he piled food on her plate.\n\nWhen they each had a plate, Warder guided her back into the Great Hall. This time, their arrival was slightly less conspicuous, but Lucy could still feel people staring. She was wondering if they were going to have to sit at a table full of strangers, when she realized that Warder was leading them purposefully towards a table at the front of the room. The table was full of people dressed in warrior garb similar to Warder's. With two notable exceptions. One was a boy who looked to be about ten. The other was a scowling Persephone. Everyone stood as they approach, resuming their places only when Warder had helped Lucy to sit and taken the seat beside her.\n\n\"You took forever,\" Persephone grumbled across the table.\n\n\"Hi, Persephone,\" said Lucy, pretending to be cheerful.\n\nPersephone startled and then redoubled her scowl.\n\n\"Hello,\" said the boy sitting next to her. \"I am Shell.\"\n\n\"I'm Lucy,\" she said, reluctantly charmed by his oddly adult manner.\n\n\"Are you Warder's?\" the boy asked.\n\n\"What?\" said Lucy at the same time Warder said: \"Yes.\"\n\nThe boy nodded at Warder, as if this information restored order to the proceedings.\n\n\"Why is Shell here?\" Warder asked Persephone.\n\n\"Like I said, you took forever,\" said Persephone, stabbing at a piece of food on her plate. \"My food is ice cold.\"\n\n\"He's supposed to be in school.\"\n\n\"Closed!\" said Shell joyfully. \"Security Alert.\"\n\n\"Explain,\" said Warder, fixing his attention on Persephone.\n\n\"Patrol found something outside,\" she said. \"Closed a quadrant, including the classrooms. It's probably nothing.\"\n\n\"West side. How high?\"\n\nPersephone shrugged. \"No one knows. I heard fifteen, thirty. Don't know what it was, either.\"\n\nWarder considered this news. Security alerts were nothing unusual on the mountain. However, the last security breach he had investigated had led him to Lucy and her friend. He was about to start peppering his soldiers with questions, when a hand clapped on his shoulder.\n\n\"Warder!\"\n\nHe turned to see a man smiling at him jovially. The man dwarfed even Warder, but he didn't carry himself with the same power. His shoulders were hunched and his smile was friendly.\n\n\"Hello, Liall,\" said Warder. \"Will you join us?\"\n\n\"Already ate,\" said Liall. \"Twice. Wanted to come and--well, that is, I wanted to introduce myself.\"\n\n\"Of course,\" said Warder. He stood up and tapped Lucy on the shoulder. She ignored him and he hauled her easily to her feet, setting her down in front of the giant.\n\n\"Hello,\" said Liall.\n\n\"Liall, may I present Lucy. My mate.\"\n\nLiall's gaze fell disbelievingly to Lucy's neck. \"So it is true!\" he said. \"Let me be the first to congratulate you.\"\n\nLucy realized with a start that the man was talking to her instead of Warder. \"No, thank you,\" she said.\n\n\"What's that?\" asked Liall.\n\n\"I'm not his mate,\" said Lucy. \"Thank you.\"\n\nBehind her, Lucy heard Persephone snort derisively.\n\nOne moment, she was staring defiantly into Liall's confused face.\n\nThe next, she was lying flat on her back on the table, the wind knocked out of her.\n\nWarder loomed over her, turning her head roughly to one side and whispering in her ear. As he spoke, she felt the wound in her neck break open and begin to bleed.\n\n\"Shall I show them that you're my mate?\" Warder's voice was deadly soft. \"Strip you bare and knot you here in the Great Hall until you're so far gone, you're not even aware of all these people watching you?\"\n\nThe pressure against her neck let up ever so slightly and Lucy gulped in a breath.\n\n\"No,\" she managed, her voice strangled.\n\n\"Deny that you are my mate again, and I will do it,\" said Warder silkily. \"I will remind you.\"\n\nHe lifted her back up and kissed her roughly before turning her around to face Liall. \"Apologize,\" Warder demanded.\n\n\"Oh my,\" Liall scratched his head. \"No need for that. Every mate gets out of hand now and then.\"\n\n\"Not mine,\" said Warder.\n\n\"I'm sorry,\" said Lucy quickly. Defying Warder was no longer an attractive option. \"Please forgive my rudeness.\"\n\n\"Of course,\" said Liall, obviously pleased to have the argument behind them. \"Pleased to meet you, Lucy.\"\n\nLiall proceeded to speak to Warder in the Warrior's language and Lucy slid shakily onto the bench and pushed her plate away in one motion, knowing that the tempting food would taste like sand. Sparring with Warder privately had led her to believe, somehow, that her situation had changed. That what had happened between them had placed them on more equal footing. But the way he had held her just now had been more menacing than anything she had seen before. He had meant every word he said.\n\nLucy glanced in Persephone's direction and found that the girl was looking right at her, as if she had been waiting.\n\n\"Liall should have been an easy one,\" Persephone whispered, shaking her head. \"You're an idiot.\"\n\nShell stared at both of them, wide-eyed. \"Shit,\" he said softly.\n\nPersephone pinched his arm. \"Don't curse.\"\n\nWarder finished his conversation and returned to the table, sliding Lucy a few inches down the bench towards him so that their thighs touched. Then, he pushed her plate in front of her.\n\n\"Eat,\" he ordered.\n\nWary of angering him, Lucy placed her hand on his leg under the table and waited until he turned in her direction, mild surprise on his face.\n\n\"I'm not hungry,\" she said softly. \"I'm sorry. I feel sick.\"\n\nHe examined her, as if he could gauge the truth of her words with a look. Then, he reached across the table and poured her a cup from one of the silver pitchers placed at intervals along each long table.\n\n\"Drink,\" he said, placing it in front of her. \"It will settle your stomach so that you can eat.\"\n\n#\n\nLiall was not the last of their visitors. They sat in the Great Hall for what felt like hours as more and more people approached them. Some of them introduced themselves to Lucy as Liall had, welcoming her with easy friendship. More often, the introductions were wary, cold, with people speaking only to Warder and sizing Lucy up while she stood silently by his side. Now and then, he prompted her to speak.\n\nYes.\n\nNo.\n\nThank you.\n\nOf course.\n\nMore than once, people hinted that their mating meant that Warder would soon have a family to feed.\n\n\"You'll be moving out of that bachelor apartment,\" said one man, clapping Warder on the shoulder.\n\nLucy quailed at the thought. If she were to get pregnant, her plans for escape would be ruined. It was one thing to try to abandon Warder now, while he declared her his mate. She knew somehow that it would be suicide to try to leave with his child. A baby would trap her inside the mountain forever.\n\nAgitated, Lucy didn't notice when yet another mountain dweller spoke to her. Warder touched her arm and Lucy responded automatically, unconsciously leaning into Warder for comfort. He placed a heavy arm around her shoulder and she froze, suddenly aware of what she was doing. He felt it and held her more tightly, keeping her from moving away.\n\nWhen there was a lull, he leaned towards her. \"We will leave soon.\"\n\nRelieved, Lucy allowed him to hold her, too overwhelmed and afraid to argue. Persephone was talking to a group of girls who had come to sit at their table, but Lucy could feel her eyes. She peered over her shoulder and several heads swiveled guiltily away. The other girls had been looking her over, too.\n\nShell caught her eye before she turned back, smiling and waving. He pointed to her plate and raised an eyebrow. She gave the slightest of nods and Shell dived happily across the table, beginning to shovel in what was left.\n\nIt took a moment before Lucy realized that someone was screaming.\n\nShe stiffened in Warder's grasp, swivelling her head around to look for the source. Warder noticed her distress, but he didn't seem to notice the noise itself. Instead, he peered at her with concern.\n\n\"Don't you hear that?\" asked Lucy.\n\n\"What?\" asked Warder, alert.\n\nAround them, the hall fell silent and the screaming died off, too. Whereas Lucy and Warder had been the center of attention for what felt like hours, now everyone was looking towards the cavernous doors at the front of the hall. A man dressed in warrior garb walked through them. He was leading a woman behind him by a rope tied to both her hands and her feet.\n\nThe woman looked frail. She was pretty--or, she must have been once. She had the fair hair that was common among the warriors and it fell in long waves almost to her feet. But it was unkempt and frizzy, giving her a wild, ethereal look. She wore a long gown that reminded Lucy of the princesses in her library books. As she walked--haltingly, because of the rope--Lucy saw that her feet peeking out from beneath the dress were bare.\n\nThe woman's gaze darted all around the hall as if she had never seen it before. She leaned her head all the way back to stare at the ceiling, causing her to trip when the man kept walking and tugged at the rope.\n\nIn that moment, Lucy felt certain of two things. One was that the woman, despite her curiosity, had been in the great hall before. She was looking for the stars. The second thing was a kind of certainty that she felt deep within her bones. This woman had been the one screaming. Even if, for some strange reason, Lucy had been the only one who seemed to have heard her.\n\n\"Who is she?\" Lucy asked.\n\nThe question had been for Warder, but it was Persephone who answered. She was standing at Warder's elbow, watching the strange pair make their way through the hall. Her friends had abandoned her to try to get a better view.\n\n\"It's Ysabel,\" said Persephone. \"You've been upstaged.\"\n\nIn the quiet hall, her voice was loud enough for people standing nearby to hear. Warder growled and Lucy heard at least one person laugh before turning their response into a less conspicuous cough when Warder's gaze sliced through the crowd.\n\nIn an instant, the eerie quiet was broken by a loud screeching--audible, this time, to everyone in the hall. It was as if the woman suddenly realized that she was surrounded by other people. She fell to the floor, keening and crying, raising her hands like a supplicant to the sky. The man holding the rope, backhanded her and her wails grew louder.\n\nAround her, conversations started again. Lucy couldn't tell if they were talking about her or if they were trying to ignore that she existed.\n\n\"Isn't someone going to help her?\"\n\n\"No,\" said Warder, and she thought he sounded almost sad.\n\nWithout thinking, Lucy started forward. She only made it a few steps before Warder grasped her arm, tugging her back.\n\nThe woman's head snapped up and she looked in Lucy's direction, suddenly lucid. She stared across the room at Lucy. Then, she began to laugh. It was a horrible sound. Hollow and empty. She reached her arms towards Lucy. Despite her intention to help, Lucy shrank back, alarmed at the naked need on her face.\n\n\"Let's go,\" said Warder, scooping Lucy up into his arms.\n\n\"I can walk,\" said Lucy. She could hear the woman laughing again.\n\n\"I don't care,\" said Warder.\n\n#\n\nWarder left through a side door that led to a small tunnel. The ceiling was so low that Warder had to stoop and Lucy closed her eyes. The sudden change from the openness of the Great Hall made it feel like the walls were closing in again.\n\nWhen they spilled out into one of the familiar, well-lit hallways, it was a relief. Persephone and Shell emerged from the tunnel behind them.\n\n\"I can't believe he brought her here,\" said Persephone. \"Someone must have told him about her.\" She jerked her shoulder in Lucy's direction.\n\n\"It doesn't matter,\" said Warder.\n\n\"Doesn't matter?\" said Persephone. \"He might as well have used the loudspeaker system to advertise that he's afraid of you.\"\n\n\"I don't wish to discuss it,\" said Warder.\n\n\"Fine,\" said Persephone sullenly. Her attitude immediately darkened and she started ahead of them down the hall.\n\nWarder's voice stopped her.\n\n\"Persephone.\"\n\n\"What?\"\n\n\"Go back to the hall and observe,\" he said. \"Shell can bring the deliveries.\"\n\n\"Shell could observe,\" said Persephone. \"Don't be--\"\n\n\"You are still not welcome in my quarters,\" said Warder. \"Make yourself useful as I tell you or find another warrior to follow.\"\n\nPersephone's face fell. Then, her gaze landed on Lucy with an ugly scowl.\n\n\"Fine,\" she said. \"Fine.\" She ducked back into the tunnel and as she went, Lucy could just make out the soft \"I'm sorry\" she tossed over her shoulder.\n\nLucy was tempted to ask Warder to show Persephone some mercy. Instead, she asked him: \"Who was that woman?\"\n\nWarder didn't answer.\n\n\"Warder,\" she placed a hand on his chest and she felt his own hand reach up to cover it, but he stayed silent, his stride carrying them quickly back towards his quarters.\n\n#\n\nBack in the room, Warder set her down and went to his desk, ignoring her.\n\nLucy wanted to scream at him for discarding her, but she was still haunted by the strange woman in the great hall. Instead, she dragged one of the kitchen chairs over to the cabinet with the television and stood on it to turn it on.\n\nWarder glanced up at her but he didn't stop her. She fiddled with the buttons until the alert message scrolled on the screen.\n\nStill level three, whatever that meant.\n\nShe fiddled with the television some more and the picture changed. It was the same women in the same classroom. She spoke in the warrior language, but Lucy realized that the word written on the wall behind her head was in English.\n\nBird.\n\nThe picture flickered and then the woman was back, talking again. Now the wall read: \"Candle.\"\n\n\"It's school, \" said Lucy, to no one in particular.\n\n\"Yes,\" said Warder. \"Language instruction. It's meant to teach English, but perhaps you could learn our language if you pay attention.\"\n\n\"Speak your language?\" asked Lucy. \"Wouldn't that be inconvenient? You seem to enjoy speaking over my head.\"\n\n\"Not everyone speaks English,\" said Warder, ignoring her attempt to provoke him. \"That is why we have that channel.\"\n\n\"What's the point?\" asked Lucy. \"We keep separate. Usually.\"\n\nThen, a thought occurred to her.\n\n\"The people that were taken when you first came to the island,\" she said. \"Are they still alive? Are they here?\"\n\nWarder finished writing something in one of his notebooks. Then, he stood up and strode towards her, switching off the television.\n\n\"I want to learn,\" said Lucy.\n\n\"I can teach you,\" said Warder. He spoke a word in the warrior language. \"That means, 'obey',\" he told her. \"You ought to learn that first.\"\n\n\"If I don't, are you going to tie me up like that woman in the Great Hall?\" asked Lucy. \"She was like me, wasn't she?\" Lucy wasn't sure exactly what she was asking. She remembered the word Persephone had used.\n\nOmega.\n\n\"It seems to me that your situations are quite different,\" said Warder breaking, into her thoughts. \"But perhaps I flatter myself.\"\n\nIgnoring the edge to his voice, Lucy forged ahead. \"Was that man mated to her?\" she asked. \"Who was he?\"\n\nWarder sighed. \"The man leading her was--I believe your word would be 'king.'\"\n\n\"You have a king?\"\n\n\"We have a system of government,\" said Warder. \"And a warrior king is part of that system.\"\n\n\"So--she's the queen?\" asked Lucy.\n\n\"No,\" said Warder. \"The warrior's power does not extend to his mate. We have no queen.\"\n\n\"But they're married?\"\n\nWarder had mentioned something like marriage before, the first time they had visited the Great Hall. He had told her that marriages took place there. No..he had called it a binging ceremony. Apparently, at least for Warder, marriage, or something like it, was a separate act from what they had done together.\n\n\"The King--Hadren--is bound to Grace. And mated to Ysabel.\"\n\nLucy remembered the woman from the hallway. The woman who had made Persephone so uncomfortable.\n\n\"How can he be mated to one woman and bound to another?\"\n\n\"Mating is a separate ritual from our binding ceremony,\" said Warder. \"Have you not noticed?\"\n\nLucy blushed. \"What I mean is--\" she couldn't meet his eye. \"Among the islanders, there's just--marriage. Having a mate and a wife would be complicated.\"\n\n\"It is complicated,\" said Warder. \"Although not uncommon. Some mates live much like you do in your \"marriages.\" Others do not. And many are never mated at all.\"\n\n\"Why did you? I mean, why did we--\"",
        "Warder looked amused at the almost-question.\n\n\"There are certain characteristics of mating that are beneficial to a warrior,\" he said. \"I intended to take a mate some day.\"\n\n\"And you will bind yourself to someone else, like Hadren?\"\n\nLucy meant to sound uninterested, disdainful of their ways. Instead, she felt awkward and exposed as soon as the words left her mouth.\n\nWorse, Warder didn't answer.\n\nLucy was still standing on the chair that she had been using to reach the television. Feeling conspicuous, she jumped down and went to the bed, pretending to turn on her side and sleep. She closed her eyes and put her hands over her ears, hoping to block Warder out.\n\nAfter a few minutes, she felt the bed move next to her as Warder stretched out beside her, trapping her against the wall. As he did, she realized that this was what a part of her had wanted. For him to lie close to her. To make her feel safe.\n\n\"Lucy,\" he trailed a finger down her back.\n\nShe could hear him, but she kept her hands over her ears. \"I'm tired.\"\n\nWarder laughed and tugged her hands away, caressing them in his own.. \"You are angry with me.\"\n\nLucy turned around to face him. \"What?\"\n\nWarder stared at her, much too close. She wanted to move away, but she felt trapped by his eyes staring into her own. \"Hadren treats Ysabel as less than a person. He uses her as a tool in the pursuit of power. Actually,\" he said, thinking, \"he uses Grace the same way, but at least she can hold her own. Ysabel has been broken by him. She is unwell.\"\n\nUnwell. It seemed like a rather benign way to describe what Ysabel was.\n\n\"I feel sorry for her,\" said Lucy. \"And I hate you and your warriors for doing that to her.\"\n\nWarder ignored her declarations of hatred like he always did.\n\n\"I will not use you like that, Lucy. I do not intend to allow harm to come to you.\"\n\n\"It harms me to be trapped here away from everyone I love.\"\n\nHer voice faltered as she spoke. Warder's nearness was making her stomach ache with desire. She wanted him. Even now, when the fog of her sickness had abated. She was keenly aware that if he chose to use her as the king used Ysabel, she couldn't stop him.\n\n\"I don't want to become like her,\" said Lucy softly. \"To lose my mind. To not be myself anymore.\"\n\n\"You will not,\" said Warder. He stroked her hair. \"Ysabel did not become what she is because she is mated. Hadren made her that way. He turned something powerful into something ugly and painful. He treats Ysabel as less than human. After years and years, she broke apart.\"\n\n\"I'll break.\" Lucy nuzzled her head against Warder's chest. He continued to stroke her hair, a moment of shared gentleness that did nothing to dispel the terrifying future Lucy could see before her. \"You'll hurt me. I'll hurt you. And one of us will have to break. I don't like my chances.\"\n\n\"I am not Hadren,\" said Warder. He pushed her away so that he could look in her eyes. \"And neither of us are weak.\"\n\n\"But you will have your way.\"\n\nWarder didn't deny it. \"It will be easier than you think.\"\n\n#\n\nShe woke up to find her arms stretched above her head, tied to the metal headboard of the bed. Startled, she tried to sit up. She was naked under the blanket and Warder was already awake next to her, watching her.\n\n\"Untie me,\" she said.\n\n\"It will be easier for you this way,\" said Warder.\n\n\"It will be rape,\" said Lucy.\n\n\"You are my mate,\" said Warder, as if that explained everything. \"And you're already wet for me.\"\n\nHe reached between her legs to prove that he was right and Lucy blushed when his fingers came away with dew. He leaned over her and she saw that he was already hard. In a moment, he was inside her.\n\nShe was still sore from their first mating. She pulled at her bonds, begging him to stop.\n\nHe ignored her and kept moving. His hands went to her breasts and he teased the nipples and then lowered his head, taking one into his mouth. Lucy gasped.\n\n\"Stop!\"\n\nBut his huge body felt so good towering over her, covering her. He kept moving relentlessly and the soreness slowly melted away and became an aching fullness. Lucy felt herself responding to him. In some rational part of her mind, she was desperate to reach down and push him away. So desperate that she was almost grateful to be bound.\n\n\"Mine,\" Warder whispered in her ear as he drove into her. \"Mine.\"\n\nShe felt his hot cum in her belly as he found his release and she nearly orgasmed again. She shuddered beneath him as his knot grew, locking their bodies together.\n\n\"It hurts,\" she whispered. It didn't, exactly. The pain of stretching to accommodate him melded with a pleasurable feeling of fullness, his cock like velvet.\n\nWarder kissed her, silencing her complaints."
    ],
    "authorname": "MariLeigh",
    "tags": [
        "mating",
        "warrior",
        "omegaverse",
        "contol",
        "dominance",
        "non-con",
        "reluctance",
        "prisoner",
        "scifi",
        "post-apocalyptic"
    ],
    "category": "NonConsent/Reluctance",
    "url": "https://www.literotica.com/s/the-mountain-ch-05"
}
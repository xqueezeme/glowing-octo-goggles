{
    "title": "Getting Back in the Game Ch. 03",
    "pages": [
        "Moment of truth, as they say. I was on my bed, on my knees, and my still rather hard cock was buried to the very hilt in Cecelia's lovely, curvy, and damn near perfect caramel-colored ass. Only one problem\u2014Emily, my regular booty call for the past few weeks, was walking up my stairs, and about to enter the bedroom. I had gotten so turned on over the possibility of bedding this new, latest conquest, I'd never really stopped to ponder how it might affect or what kind of reaction it might trigger in Emily. Or, to paraphrase a song my father loved, I was easily led because I let my little head do the thinking.\n\nGranted, Emily and I had talked about at some length about freedom and openness, the right to sleep with someone else if we so chose, and had assured each other that we wanted the other to feel free to play if the opportunity came along, but there's a big difference between philosophy and application. This was a bit different\u2014my cock was planted deep in another girl's asshole! I quickly considered some rather stupid alternatives like running or lying, but instead swallowed hard decided that this would be the ultimate test of that notion.\n\nThe door opened, and she stepped through. My cocked jumped slightly when I realized she was wearing a very skimpy top and a shorter skirt with white stockings that showed off her wonderful, shapely legs. She had dressed up for me. I felt a small twinge of guilt.\n\n\"Hey. You started without me!\" she shot to Cecelia. My jaw dropped with realization. These clever ladies never ceased to surprise me.\n\n\"I couldn't help myself. All the stories you told me got me worked up, then I had a few drinks tonight, and I was practically dripping through my shorts,\" Cecelia said back. \"You're right, he does have an absolutely wonderful cock.\"\n\nI shook my head with a chuckle. Nothing these girls did really surprised me anymore. Emily came over to the bed, kissed Cecelia deeply, and then practically attacked my face. She let her hand trail on my chest, and slapped Cecelia's ass with the other one.\n\n\"Yes, yes he does. But I get this next round since you already started,\" Emily replied. She slapped her ass again, harder this time. \"Bad Cece!\"\n\n\"That's fine,\" Cecelia answered, \"I need a rest anyway. Besides, I can already tell he really likes your outfit,\" she said with a slight chuckle and another grind backwards into my still-steely cock.\n\nCecelia gently dislodged my prick from her ass, as I grabbed the base of the condom. \"I'll take care of that,\" Emily said with a bit of force, and she quickly unrolled the condom down my shaft. She grabbed the tip, slowly squeezing the cum out, then opened wide and tilted it back above her tongue as she squeezed it out into her waiting mouth. Yet again, I found myself in awe of how cum-crazed this girl was. She swirled it for a second, then calmly swallowed it. \"No need for it to go to waste,\" she said with the evil grin that I was truly beginning to love. \n\n\"How's his taste?\" Cecelia inquired as she padded off to the bathroom.\n\n\"It's actually quite clean and refreshing. But he eats well, so I think that helps,\" Emily replied. I must have had a confused look on my face, because she quickly turned to me and added, \"Her ex apparently tasted funky, so Cece doesn't often swallow. I keep telling her that's the best part.\" \n\nAt that I twitched again, and she bent down and started to lick me and gently draw me into her mouth. She steadily worked up and down, with that crazy fervor she had, doing her slow and sexy figure-eight, then without warning she plunged me fully into her mouth, staring up at me with those big, gorgeous blue-green eyes of hers. I was in heaven yet again.\n\nCecelia had come back over by that point, and was standing a few feet away, admiring Emily's handiwork. Emily gestured her over, but she shook her head. \"Em, we talked about this, remember?\"\n\nEmily pulled off my shaft and smiled slyly, \"Oh, that's right...\" a knowing note ringing through her voice.\n\n\"What?\" I almost demanded. They just looked at each other and giggled.\n\n\"You'll see soon enough,\" Cecelia said with a crazy grin.\n\n\"We have a plan for tonight,\" Emily added.\n\n\"Should I be scared?\" I said, half-joking.\n\n\"Probably,\" Emily retorted, sporting an evil grin. Then she quickly deep-throated me again, making a terrific slurping sound as she bobbed up and down on my tool. I felt myself growing and steeling under her incredible, magical mouth. She popped her mouth off my cock, grinned again, and said \"Mmm, already hard and ready to please. That's what I like about this man the most.\" She gave me a gentle shove down on the bed, and as I scooted back to recline against the headboard and pillows, she bent down for a few more sucks, then climbed up, straddled me, and in one quick, almost violent motion, plunged down on me. I moaned at her tightness and the sudden envelopment in her pussy.\n\nEmily quickly began pistoning up and down on my cock, letting gravity slam her down, and I grabbed her slim and shapely hips and started pulling her into me with each down stroke, pushing up with my hips. She threw her head back and grunted a loud, almost feral sound. I pushed up instinctively and reached down and casually brushed her clit, and was rewarded with the slight drooling and little clench of one of her smaller orgasms. I was learning this girl's body well, and loving the fact that I could make her cum so easily. I reached around, grabbed her ass with both hands, gave it a firm squeeze, then ran my right hand up, cupping her firm little breast, and then caressing her face as I brushed her long hair out of her eyes. She responded by grabbing my hand and placing my thumb in her mouth, leveling those gorgeous eyes at me as she sucked it in and out of her mouth erotically. \n\nAfter a few minutes of this, I wanted to set the pace, so I rolled her over, quickly entering her missionary before she had a chance to object. I spread her legs wide, as I always liked seeing her long, slender legs splayed out while my shaft drove into her. I knew she did, too, having it confirmed as she looked down and said \"Fuck, that's hot. Cece, come here and take a look at his cock spreading me open.\"\n\n\"Damn, that is hot,\" I heard Cecelia say, and as I looked her way, I saw a flash and her cell phone in her hand.\n\n\"Hey!\" I yelled, \"What gives?!\"\n\n\"Just a little something for me and maybe her. A little private memento and fuel for the alone time,\" she responded. \"Don't worry, I'm not showing this to anybody!\"\n\nI shrugged and resumed pounding Emily. Truth was, I barely cared, as long as they didn't end up plastering the block. I pounded into her with abandon several times, and Emily started to heat up the way I loved. I pulled out, slapped her clit several times thoroughly with my member, and was rewarded with a nice spray of her cum across my crotch and stomach as she cried out with a mighty \"OHH FUCCKKKKKKING GODDAMN!!\" God, I loved it when I could make her squirt.\n\nI quickly pushed back in, and started pounding her harder. I was putting forth some effort, and though I wasn't going to cum immediately, I could tell it was on the horizon somewhere, so I pulled out and started eating her pussy while vigorously fingering her. She was absolutely dripping like a faucet left on, and I was having trouble lapping it all up, so I just dove in, aggressively shaking my head as I moved the flat of my tongue against her clit in an up and down motion while slamming my fingers home hard. It only took about another minute before I was being drowned in another gushing spray of her sweet, delicious juices, and again I couldn't swallow even half of it. I got to my knees to swallow a bit and catch some breath, and then she promptly pushed on my chest, halting me as she got on all fours and wiggled her ass at me, looking over her shoulder enticingly. \"Come on loverboy, I wanna feel you fill me up this way before you cum for me.\"\n\nI wasted no time, quickly lining myself up and plunging home. I grabbed hold of her waist, pulling her up off the bed slightly on each stroke in as she backed her ass into me as hard as she could. She started screaming, a mighty \"Oh, OH, OH, OH MY FUCKING DAMMIT!!\" as I felt her pussy contract again, and I knew I wasn't far behind. I closed my eyes and began breathing hard, concentrating on trying to hold out just a bit longer, pulling as hard as I could on those hips as I really slammer my dick home. Suddenly, I felt a warm, pleasant wetness envelop my balls, and I looked down and saw Cecelia gently sucking on me. \n\nShe looked up and smiled, gently caressing my ass and going back to her gentle licking and sucking. She moved up real quick, gave Emily's clit a few vigorous licks, and I felt Emily contract with another quick orgasm. As soon as she recovered, she cried out \"Hey, you weren't supposed to do that until the third round.\" \n\nCecelia just smiled, shrugged, and said \"It looked too good, I couldn't resist.\"\n\nI was boiling over, and I knew it. \"Girls,\" I warned, \"I don't have long left...\"\n\n\"I know,\" Emily responded, \"Cece, keep doing that!\" She quickly resumed licking and softly sucking my balls, and I in turn upped my pace. I rounded my chest over Emily's back, and, after about 30 seconds of slamming home with all my might, I buried my shaft to the base and pumped several mighty squirts of my seed deep into Emily's snatch. Almost on cue, I felt Emily's cunt contract around me so hard that I could barely move my cock. I reveled in the sensation, and loved the fact that we often got each other to cum harder when we came together, which was getting more and more frequent.\n\nAfter I caught myself, and regained some equilibrium, I laid back on the bed. \"God, I love how hard you cum,\" Emily said, as she quickly stuck a finger up her pussy and began literally spooning my spunk out of her and into her mouth. \"I wanted to suck you off, but I know how much you love cumming inside a girl, and I love the way you feel when you shoot.\"\n\n\"I do love a cumming in a girl,\" I acknowledged.\n\n\"Nice to see a guy that prefers the creampie to trying to be a porn star,\" Cecelia offered. \"I get annoyed with guys begging to cum on my tits and face all the time.\"\n\n\"Yeah, but look at your tits, Cece,\" I said. \"Of course a guy's going to want to cum on them!\"\n\n\"No, I mean just blasting on them in general. I'm all good with a guy fucking my tits, especially if I'm into him,\" the thought of her giant, firm tits wrapped around my cock made me twitch, and as it did, I noticed Cece look down and smirk the tiniest bit at the movement. \"I just don't like these guys that presume they can cum anywhere on you.\"\n\n\"Fair enough,\" I responded, somewhat embarrassed that she had picked up on my desire to fuck her tits and trying to play it off. Turning to Emily, I asked \"How can you tell that I like that better? I never told you.\"\n\n\"It's fairly obvious,\" Emily responded. \"You get harder when you cum in me than you do when I suck you off.\"\n\n\"What do you mean?\" I asked, confused.\n\n\"You have a very nice cock,\" she replied, \"And it's great fun to blow you. But when you're about to cum in me, your cock gets so hard, it's like fucking granite. And when you're slamming me hard, it's just so damn intense.\"\n\nWe cuddled for a few minutes, chatting idly, and then I arose to get some water and use the bathroom. I returned to the bedroom, to find both of the girls tucked under the covers. \"Listen, I'm going to need a few. I'm still an old guy, after all...\" \n\n\"Martin, relax,\" Emily interrupted. \"Come lie down with us for a bit.\"\n\nI crawled into bed, and the girls immediately sandwiched me in, cuddling on either side of me. A guy could get used to this, I thought. \n\nCecelia had her phone out and started showing me a few photos of me and Emily together she had grabbed during the act. I felt some small sense of pride at how hot we looked. We chatted aimlessly for a few minutes about nothing, before I dropped off into dreamland.\n\nI woke up several hours later to an amazing feeling of warm and wetness, and opened my eyes to witness both of them sharing my cock like a popsicle, passing it back and forth.\n\nI was amazed that I was so hard again so quickly\u2014despite keeping myself in good shape (my doctor said I was in better shape than a lot of 20-somethings he saw, and I had run several races in recent years), I didn't expect to be able to keep up with two girls so young and vital. But as Cecelia engulfed most of my shaft while working her hand on the remainder, I felt myself steeling against her attentions. After a few seconds, she gave it over to Emily, who quickly took all of me down her throat and stared up at me with those big blue-green eyes. I was in heaven. She popped off, licked up and down the shaft, then some tender attention to my balls, took me in her mouth for several more sucks, and then passed me back to Cecelia. She quickly resumed, and they passed my pole back and forth twice more before I saw Cecelia hold up a condom and arch her eyebrows at me. I grinned what was probably a stupid grin, and she unrolled it down to my base before climbing on and guiding me into her. \n\nShe leaned forward and drove her hips back into me, and I took the opportunity to suck on her nipple as she arched her breast into me. She groaned with appreciation. I began stabbing up into her harder and we started to get into a nice rhythm. I reached up and pulled a nipple into her mouth as she groaned. Almost on cue, I saw Emily grab the other one, and quickly suck it in as CeCe let out a little \"Oh shit, you guys are going to make me cum.\"\n\n\"Isn't that the point?\" I asked.\n\n\"Of course, but it is your birthday...\" she trailed off.\n\n\"This is definitely the best present I've ever gotten!\" I shot out, perhaps a bit too enthusiastically, and the girls both laughed.\n\nAs we both resumed sucking on Cece's tits, I saw her begin to flush, and she started breathing harder. I caught Emily's eye as she mouthed the words \"She's getting close.\" \n\nI nodded and began giving my hips a little extra \"pop\" on the upward thrust. She started to give me deep low moans, and as I saw her eyes roll back just a little bit, I quickly moistened my thumb and put it softly against where her clit was crashing down on my pelvis. \"OHHHH FUUUUUCCCKKKKKK MEEEEEEEE!!\" she yelled at the top of her lungs as she came hard.\n\nShe slowed down, and I grabbed her ass appreciatively. \"That was a big one,\" she said through a grin. \"Thank You.\"\n\n\"The pleasure was all mine, trust me,\" I responded.\n\n\"No, trust me, it wasn't,\" she shot back. \n\nEmily, apparently impatient, smacked her ass and said \"Come on Cece, you're hogging his cock!\" Cecelia slid off, and Emily suddenly and almost roughly yanked the condom off and started sucking and jacking me with purpose. In fact, it almost hurt, but I was enjoying it. As Cece came up beside her, Emily tackled her and came down on top of her, pinning her to the bed and kissing her roughly. She groped her a bit, then moved down into position as she began lapping at her pussy, then stuck her butt up in the air as she wiggled it at me and gave me a quick over the shoulder glance.\n\nNeeding no further encouragement, I grabbed her hips and buried my shaft in one smooth motion. \"God damn fucking yeah!\" Emily cried out as I began pistoning in and out, encountering no resistance as she was already dripping wet. Her encouragement made me want to go harder, and after a few thrusts I was literally picking her butt and legs up off the bed as she planted her hands and dove her face harder into Cecelia's pussy. I felt her pussy gush as she arched her back and groaned with pleasure.\n\nOne of the side effects of having blown twice (as well as getting older) was that I already knew I was going to be able to last a bit before blowing. So I started ramming her as hard as I could, knowing it would be only a short while before she came hard. Sure enough, after about a minute of hard pounding, she clamped down on my cock hard, actually making me wince as she gave a nice little spray of cum against me. \n\nI guess I must have whimpered a bit when she clamped so hard, because Emily stopped moving and quickly gasped out an \"I'm sorry. Oh, baby, I'm sorry...\"\n\n\"No, it's okay, it was just a bit hard...\"\n\n\"No, I'm sorry, I just came so hard, I didn't mean to clamp that hard...\" and with that, she pulled out and started sucking me gently, lovingly even.\n\n\"No, Emily, it's really ok...\"\n\n\"No, it's not. Let me make it up to you. Lean back.\"\n\nI leaned back against the pillows and headboard, and Emily resumed her vigorous sucking. After a minute or so, Cece yelled out, \"Hey, I know where he probably really wants to cum!\"\n\n\"Really?\" Emily asked.\n\n\"Yeah, he's just too proper to say it,\" she responded. And with that, she pushed her tits around my cock and started to slowly move them up and down.\n\nI had to admit, I had never really had the gumption to ask a girl to try this, although of course I had seen it in porn, but I had always wanted to. Her tits were firm yet had the perfect amount of softness to them, and I was in heaven. I didn't want it to stop, but right as we got into a rhythm, Emily shot out \"Wait!\" We both stopped reflexively. \"I have an idea,\" she explained, and began moving us around. Cecelia lying back on the bed. Me straddling her midsection, fucking her tits. Emily quickly grabbed a bottle of edible lube, and liberally applied it to Cece's giant mounds, then pressed them together and pushed my butt to urge me on. Needing no further urging, I started fucking for all I was worth, as Emily went down and started lapping at her pussy again. I began to feel like I was lost in a haze, needing to cum but a bit away from it, but hearing Cece slowly increase in volume as her own climax approached raised my own temperature a bit, and I reached down and began playing with alternating nipples as I happily pumped away. \n\n\"God FUCKING DAMN DAMN FUCKKKKKK!!\" Cece screamed, and I realized I'd been so caught up in my pleasure I didn't realize how close she was. I must have stopped for a second, because Emily spanked me on the ass, and then Cece said \"Don't stop, I wanna see you shoot off a load!\" \n\nI quickly resumed fucking her titties, and Emily nimbly came around and started to lick the head of my cock and take it into her mouth. With the massive size of Cece's breasts, she could only get maybe 2 inches in, but she was going to town unabated regardless. It was all starting to be too much for me, and I could feel the sensation of my spunk building in my balls. Before I could say anything, I looked down, and Cecelia, already sensing what was happening, said \"It's okay baby, I want you to cum all over my tits. Empty it all on me, I want to see you cum!\" That was all it took, and shortly I grunted my release as I emptied a large and impressive load all over her breasts, chest, and neck. I was surprised that I had that much to give\u2014I honestly expected to be shooting nearly dust at this point, but these girls somehow coaxed a large load out of me, I don't know how.\n\nEmily, of course, immediately went to licking and scooping it up off of Cecelia's front. \"No point letting perfectly good and yummy cum go to waste,\" she informed us. As she was slurping up the last of it, she looked over at Cecelia with a questioning look. Cecelia nodded, and she leaned over to kiss her deeply. \n\nAs they separated, I saw Cece doing the same swirling motion I had become so used to with Emily. She swallowed, smiled, and said \"You're right, his is nice.\" \n\nI collapsed back on the bed, wondering what I had gotten myself into. \"Happy birthday Martin!\" Cece shot to me in a chipper voice as she flopped down beside me.\n\n\"Yes, happy birthday lover,\" Emily echoed. \"We thought you deserved a special treat this year. Also, I figured this was way better than a gift card.\"",
        "\"Yeah, I can get behind that,\" I joked. \"Although right now I need food and rest. Maybe I'll go grab some leftovers\" As I started to get up, both girls caught me.\n\n\"Of course,\" Emily said. \"We'll trot down to the kitchen and figure something out. You stay here and recuperate. Close your eyes if you want to.\" \n\nAs the girls got up, I was acutely aware of the fact that, although exhausted, I was grinning like a fool. I didn't care if this was a one-time event or a regular thing, I was thoroughly satisfied. Cece sashayed out of the room, that lovely round ass swaying beautifully, and as Emily followed her, Emily turned back and said \"You're definitely going to need some sleep. We're doing breakfast in bed tomorrow.\" She threw me a wink and walked out, and I shook my head as I stared at her beautiful backside as she went toward the stairs."
    ],
    "authorname": "silverisgold",
    "tags": [
        "mature",
        "group sex"
    ],
    "category": "Mature",
    "url": "https://www.literotica.com/s/getting-back-in-the-game-ch-03"
}
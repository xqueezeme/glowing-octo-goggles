{
    "title": "The Secret Life of My Loving Wife",
    "pages": [
        "Author's Intro: This story is mostly voyeurism with a heavy dose of lesbianism and other fun things. Stay patient at the beginning for a bit of character and plot development, and I hope you'll be rewarded. Based on reader feedback, I did a major rewrite of the ending and think it works. Thanks for reading!\n\n*\n\n\"I can't believe it.\" \n\nCassie shrugged. \"You're a trusting guy, Tom. But I've been monitoring this for a while, and someone is stealing from us.\"\n\nWe were sitting in her office, the door closed, and the facts were laid out on her desk. She had worked for me for a dozen years now, and she knew her stuff. If she said that someone was stealing inventory, then they were stealing inventory.\n\n\"How much do you think they've gotten?\"\n\nShe leaned forward, scanning the spreadsheets as she tucked her hair behind her ear. \"It's not huge. Maybe $1,000 a month. The gemstones are coming in, but they're not being sold and they're not still in the store.\"\n\nI leaned back in my chair and sighed. It was a miniscule amount given the size of the company, but it obviously needed to be dealt with. \"And you think it's an insider?\"\n\n\"It has to be. It's too regular. And they're taking the less valuable stones that we get in higher quantities. It's easier to cover up.\"\n\nI nodded thoughtfully, then lowered my voice even though we were the only two people in the room. \"We need to catch this person in the act with ironclad evidence. Maybe we should set up some cameras.\"\n\nCassie sat back too, nodding and pushing her nerdy but cute glasses back up on her nose. Her natural smile flashed reluctantly, bringing with it a dimple on each cheek. \"I think that's the only way,\" she agreed.\n\nWe were always on the same page, Cassie and me, and that was only part of the reason I adored her. I had hired her straight out of college back when my company was a startup, and she had been a superstar since Day One. As the company grew, I kept promoting her, and now twelve years later she was my Chief Operating Officer, overseeing a staff of nearly 100 jewelry designers and salespeople. She was also my chief confidante on all things corporate.\n\nOf course, the other reason I adored her, the reason I would never admit, was that I had a huge stockpile of fantasies about her. I was ten years older than her and happily married, so nothing was ever going to happen, but it didn't stop me from imagining. She was the perfect complement to my wife, smaller and more lean, brunette instead of blonde, and contemporarily cute as compared to my wife's classic beauty. In short, she would be a perfect change of pace if only I was allowed to have one. \n\nAnd that ass...oh, that ass.\n\nBut back to business. I smiled at her. \"Let me do a little research. I'll get back to you.\" My heart fluttered a little when she smiled back.\n\n****\n\n\"Hi, honey!\" Angela called out as I came through the front door. The dogs bounded into the foyer and greeted me with enthusiasm, so I wrestled with them for a moment.\n\n\"Hello!\" I called back. The house was large and I had no idea where her voice came from, so I searched until I found her in the kitchen, mixing up a salad. I gave her a hug from behind and a kiss on the neck. \n\n\"How was your day?\" I asked.\n\n\"It was good. I just took on a new client, and I think it's going to be fun. They're expanding into Thailand and we'll help set them up.\" Angela was a high-powered attorney, and she dealt in issues that I didn't understand. \n\n\"Hmm, sounds fun. Will you get any travel there?\" My arms were wrapped around her waist and I slowly brought them up to cup her breasts. Angela had amazing breasts, full and large and still firm even in her forties. She giggled and shrugged me off.\n\n\"Behave,\" she said, turning around with the salad and giving me a peck on the lips. \"Maybe I'll get to go. I'm not sure. I'll be working with Alaina and Meg, so we could have a blast together. Now grab some plates.\"\n\nI got two plates out of the cupboard and followed her into the dining room, checking her out for the millionth time as we walked. She had matured physically from the sorority girl that I had married so long ago, but in a way that I didn't mind at all. She now had a curvier figure on her 5-7 frame, and it swayed sweetly in her lawyering suit as she walked in her bare feet. She'd kept her blonde hair long over the years, but her face had acquired a regality to replace the innocence that had once attracted me. Along the way, she had acquired a sophistication that was intoxicating and even a little intimidating.\n\nWe sat down together and began to eat. \"So how was your day?\" She asked. \"Anything exciting happen?\"\n\n\"Nah. Same old thing. We finalized a great design for an engagement ring that I think will sell well.\" We had learned not to talk in detail about our work. We were both highly successful, but our professional worlds were very different. I knew that she'd have a fit if I told her about the thefts, so she didn't need to know. \n\nSo we talked about politics and the latest news and gossiped a little about our coworkers. \n\n\"How's Cassie doing?\" Angela asked after complaining a bit about her boss. \"How did her date go the other night?\" Given her tenure and her high position on my management team, Angela knew Cassie well and asked about her often.\n\nI laughed. \"He showed up in a t-shirt and took her to Applebee's. She was not impressed.\"\n\nAngela clucked her tongue disapprovingly. \"She's so cute. I want to set her up with somebody. There's a new attorney in the office who could be a good fit.\"\n\n\"You've tried that before.\"\n\n\"I know. But this time it could really work. I want to marry that girl off.\"\n\n\"I'm not sure that she wants to be married off yet. She seems to be pretty happy being single.\"\n\nAngela clucked her tongue again. \"When you and I were her age we'd been married for years.\"\n\n\"Yeah, but we were young and na\u00efve. We never sowed our wild oats.\"\n\nAngela gave me a half-serious glare. \"We sowed our wild oats with each other, remember?\"\n\n\"Of course, darling. And on that note...\"\n\nShe saw my inquisitive look. \"Are you leaving town again?\"\n\n\"Baltimore. Tomorrow afternoon for two days.\"\n\nWe'd developed a little tradition of having sex before either of us left town. I wasn't sure how it started, but I welcomed it. We didn't have sex often enough these days, and it gave me an excuse to expect it.\n\n\"Okay, let me rinse the dishes real quick. Meet me in the bedroom.\"\n\nI grinned.\n\nFifteen minutes later, she entered the bedroom. I was already naked, lying on the bed and resisting the urge to masturbate. She looked at my erect cock. \"Ready, I see.\"\n\n\"I'm always ready.\"\n\nShe gave me a sexy smile and stepped to the foot of the bed. It was a large four-poster, and she leaned seductively onto one of the posts. \"Hey, sailor, want some company?\"\n\nI winked at her. \n\nBrushing her hair back, she began unbuttoning her blouse, revealing a silky white bra underneath. Given her curves, she tended to wear sensible bras, not overly flashy. I wished that she would be a little more sensual in that regard, but she was ever the professional. She shrugged the blouse off of her shoulders and unhooked the bra.\n\nI love my wife, and I love her figure. Truth be told, I guess I love female figures in general, but hers is spectacular. Her breasts had filled out to a nice D cup over the years even though we'd never had children, and they were topped with large pale areolas that attracted one's eyes. Looking down, she inspected them and tweaked her nipples, then pressed her breasts together to form a deep cleavage. She almost seemed distracted by them. \n\n\"Hey, I get to play, too.\"\n\nSmiling down at me, she brought a leg up onto the footboard and raised her skirt to hip level. Slowly, she rolled down her lacy stocking, its dark black contrasting with her pale skin, then did the same with the other leg. She shimmied out of her skirt, pulled down her panties, and then stepped around the bed to join me.\n\nAngela truly was a beautiful woman. She had a small shock of dark pubic hair that belied her blonde tresses, and beneath it I could see her naturally prominent inner lips. Climbing atop me, we kissed, and I appreciated the warmth and softness of her curves as they pressed into me.\n\nThe kissing went on longer than I would like, but that was always the case. She liked it, so I kept it up until she finally broke it off. \n\n\"I'm ready. Will you give me my favorite?\"\n\n\"Of course.\"\n\nShe rolled off of me and lay on her back. I rolled over too, pressing myself atop her. Beginning at her lips, I nibbled down her throat to her breasts, gently nipping at her nipples and manhandling her breast flesh. After a moment's distraction, I moved down further, kissing my way down her stomach to her neatly trimmed mound. I began playing with her pussy, prepping her to be eaten.\n\nAngela loved receiving oral sex. She couldn't orgasm easily via intercourse, but a tongue would drive her crazy, so it was the tongue that she always requested. Pinning her thighs apart with my arms, I leaned into her and began running my tongue across her clit, slit, and lips. She had a very nice vulva if one liked them neat and compact: small, almost indiscernible outer lips framing a nicely flowering set of inner lips. She was a beautiful shade of pink.\n\nI worked with enthusiasm, and she brought her hands up to play with her breasts, closing her eyes in pleasure. We were both somewhat shy and reserved, so there was no talking, no moans. Just me licking and her breathing, with an occasional small gasp as her hips began undulating, seeking more and more stimulation. Once we were in progress, I brought my hands in and began caressing her with my fingers, up and down her slit, occasionally dipping into her or down to her anus.\n\nWe'd been married forever, and I know this sounds stupid, but I fantasized about taking her anally. I'd seen porn. I wanted to slip a finger into her and make her orgasm while I was sodomizing her. I wanted to flip her over, prop her ass up with a pillow, and plow into her, forcing myself on her still-virgin anus while I pulled her hair up and arched her back. I wanted to make her gasp and moan while I buried myself inside her.\n\nBut how do you ask that of your beloved wife, the woman you love and respect? She was a classy woman, a well-heeled professional, and as straitlaced as they come. In 20 years of marriage she had never asked for anything out of the ordinary and seemed quite content with our narrow menu of sexual staples.\n\nPart of that was my fault, too, I guess. I didn't want her to think less of me for being a pervert and I didn't want to treat her like a common whore. So I settled for playing tentatively with her back door during cunnilingus, circling it and gently pressuring it as far as I thought I could get away with. All of my other fantasies, and there were many, remained locked in my mind.\n\nWhile I thought about this, I worked her with my tongue, and could feel her excitement. From years of practice, I could see the signs of orgasm approaching. Her breathing became deeper, her hips began moving, and she began biting her lower lip. Her hands squeezed tightly on her breasts, and after several minutes of attention, her back began arching. \"Oh, yeah, this is it,\" she murmured, her breath coming in gasps. She bucked once, twice, three times, then pushed me away.\n\nI sat up, wiping my mouth and looking down upon her. Her face was beatific, her eyes closed in secret fantasy, her fingers still coyly working her thick nipples. I stroked her widespread thighs, wondering what scene she was playing out in her mind's eye, but she was always too shy to tell me.\n\nFinally, one blue eye opened, peering up at me. \"Your turn?\" she asked. \n\nI nodded enthusiastically. \"How about a blow job today?\"\n\nWe switched positions, me lying down and her rising to her side, positioning herself at my left hip. We'd gotten married young so I didn't have much experience with other women, but I knew from porn that Angela's technique was a bit ... different. She preferred to not take me into her mouth, but rather to lick me. I'd never figured out why she preferred this method, but it still worked. Grasping my balls in her left hand, she began gently rolling them while she brought her lips down onto my sensitive frenum. With lips and tongue, she ran down the length of my rock-hard penis and then back up, pausing to wiggle her tongue toward the top. I enjoyed looking down at the top of her head, that beautiful mane of sculpted blonde hair working on pleasing me. \n\nClosing my eyes, I went on a fantasy trip. It wasn't Angela this time, but a stripper. I was in the back room of a strip club and she was servicing me. Or no, maybe tonight it was in my hotel room on a business trip, and she was a brunette that I had met at the bar. I envisioned a petite young brunette, bobbing up and down. Maybe a college girl. Or actually, maybe it was Cassie on a business trip with me, having some evening fun. I settled on Cassie, her big brown eyes peering up at me as she worked. It only took a few minutes before I too was arching my back, trying to get every last bit of pleasure before I blew. \n\nWith a grunt and a moan, I shot out my load, splashing it up my chest in several spurts. Angela knew that I liked to be licked the whole time, so she didn't stop until I gave her the signal. When she smiled up at me, I saw that she had a couple of drops in her hair, but I decided not to tell her. She crawled up and nested her head in my shoulder, and we both sighed contentedly.\n\n****\n\nI came home from work early the next day, and was packing for Baltimore when the package arrived. I was torn for a moment about spending the time on it, but was too intrigued to leave it alone.\n\nI opened it up and smiled. How cool.\n\nAfter finishing up with Angela the night before, I had gone online and done my research, and I bought one of those little secret spy cameras. I must say, it was pretty clever. It was a phone charger just like any normal phone charger, but it also had a tiny camera built into the part that plugged into the wall. You plugged it in, left it alone, and it recorded any time it had movement and uploaded the file to the internet. It didn't offer sound, but I didn't need that to catch a thief.\n\nI had it delivered to the house to keep it private, and of course I was headed straight to the airport so I couldn't go back to the office to set it up. Instead, I decided that it might be a good idea to run a test. The problem is, there's not much action around the house. It was just me, Angela, and our two dogs, Gustav and Archie. Pondering my options, the answer came to me.\n\nGustav and Archie, like most dogs, had serious issues with the mailman. I knew that from having a few sick days over the years, and maybe a video would be fun on Facebook. I found an electrical outlet that faced the front door and plugged the \"charger\" in. It was perfectly situated to catch all the action. I set up the account on the internet, and wrestled a goodbye with the dogs.\n\nBaltimore was a three-hour flight away, and I went out to dinner. Back at my hotel room late in the evening, I logged on, checked some e-mails, and then remembered the camera. I went to the site and logged in.\n\nMy account now had a bunch of files on it, each indicating a period of movement. It took a minute or two to figure out the system, but once I got the first video playing it worked like a charm. As the video opened, Gustav and Archie were skidding toward the door, barking like crazy at a shadow outside. Mailman! I chuckled at their antics for a full minute. The video was very high quality, nice color and crisp resolution. Shot from the perspective of an electrical outlet, the action took place pretty much at dog height, too.\n\nI opened the next file, and it was Gustav wandering by. Then another file of Archie. The camera captured anything that went on and sent me a file, then went dormant when the action stopped. I started figuring out that the smaller files only included the dogs walking by, and the longer files meant more action.\n\nThe fourth file was Angela coming home from work. It must have rained hard that day because she was soaked in spite of her umbrella, her dark blonde hair limp on her shoulders and her clothes clinging to her. I hadn't really thought about seeing her on the videos, and I smiled at my unintended voyeurism. She looked even more gorgeous than usual in her dampness, her dressy white blouse and sexy flannel gray pencil skirt practically painted onto her. She put the umbrella in its stand, ran her hands through her hair, and I could tell she was annoyed. She kicked off her heels, and as she bent to pick them up I got a great view looking upward toward her ass. She walked out of camera range and the file ended.\n\nAnother dog video.\n\nAnother dog video.\n\nA video of Angela in yoga pants and t-shirt, chasing the dogs and pulling them toward the garage.\n\nThe next video surprised me. Angela walked to the door and opened it up. She motioned a welcome and a young woman entered. My eyebrows rose. The woman was young, probably just past college age, and quite attractive. She had long red hair, and once she removed her raincoat she had a nice figure, slender and busty in a slinky but conservative dress. She was probably a couple of inches taller than Angela. The two women hugged, then left the camera range and the video went blank.\n\nWho was that? I puzzled over the possibilities. Maybe it was someone she worked with, but I'd never seen that woman at the office Christmas party, and I would have noticed a sizzling hot redhead. Maybe someone coming to do some work on the house? That made no sense. I looked at the time stamp on the video and it was at 8:15 p.m. \n\nWho was coming to the house at 8:15 p.m.?\n\nWhoever it was, I wanted to meet her. I'd have to figure out a way to find out about her visit, since I certainly couldn't admit that I'd been inadvertently spying on Angela. But wow -- my wife was hanging out with a hottie. I replayed the video. Looking upward from outlet height, I got a good and unobstructed view. Nice legs, nice breasts that were almost as big as Angela's, and young. I paused it and studied her face, but it rang no bells in my mind.\n\nI studied the video for more clues. The two women left the frame toward the right. The living room was on the left, as well as the easiest path to the kitchen. So they were most likely going to the bedroom or one of the guest rooms. I bet Angela was getting a massage and not telling me about it. She loved getting massages, but she usually went to a spa to get them. If that was a massage, I really needed to figure out who the woman was. I felt myself getting hard just imagining a rubdown at the redhead's hands.\n\nI shrugged and opened up the next video. It was time-stamped just before 10:30 p.m. Sure enough, Angela and the redhead were at the door again, this time in a departure scene. Angela was now in a robe, so it must have been a massage. After the redhead put her raincoat back on, the two women chatted at the door briefly, then embraced in a hug. \n\nIt was a rather long hug, I observed. Arms wrapped around each other, bodies in full contact, they appeared to be speaking, Angela leaning back slightly so they could be face to face. \n\nAnd then they kissed.\n\nThey.\n\nKissed.\n\nI was so shocked that I had to look up from the screen to process it. I was lounging on the bed of my hotel room, and I looked straight into the mirror on the opposite wall where I could see my own shocked face looking back.\n\nWhat the hell?\n\nThe video had ended, so I restarted it. It was only about 90 seconds long. The two woman walked to the door. The redhead put on her raincoat. Angela opened the door. They hugged. They chatted, still in the hug, their faces close together. ",
        "And then the redhead leaned in and gave Angela a kiss. And not just one of those sisterly pecks on the lips. It was a KISS. \n\nI leaned closer to the screen. Angela was not pulling away. They were kissing. \n\nThey were kissing!\n\nI moved the laptop off of my lap and stood up. I paced around the room a bit, then came back and played the video again. Then again. And again.\n\nWhat the hell was going on?\n\nI shook it off. It couldn't be what it looked like. My wife was as vanilla as they come. She was virtuous and proper and even above all that, she was hetero. I knew all of these things for a fact. We had been married for twenty years. She was virtuous and she was proper and she was hetero. \n\nI looked out the window at the Baltimore night, but my eyes were elsewhere. I had to be misinterpreting something. This has to be a long-lost cousin or an old sorority sister or something. Maybe that was it. She and her sorority sisters were sometimes weirdly affectionate with each other at the reunions, a fact that never ceased to intrigue me. \n\nI played the video again. The redhead was twenty years too young to be a sorority sister. Maybe she was a pledge or something, but it's not like Angela was active in the alumni network these days. \n\nI leaned in, inches from the screen. They were pressed together. They were talking. They were kissing. Angela was facing away from me, toward the door, and the redhead was facing the camera. What was she saying? I couldn't tell.\n\nWho was this woman? And why was she kissing my wife?\n\n****\n\nI didn't sleep well that night. I tossed and turned and had weird dreams, and when I woke up it was the weirdest dream of all. The laptop was still open, and the camera website was still logged in. Warily, I approached it at the desk and looked. Eight more files, all relatively small. One at a time I opened them. Dogs coming in from the garage, dogs walking around, dogs barking at the mailman. One file was Angela heading out to work. Nothing to report.\n\nI marched through my meetings with a client and a potential supplier, had a quiet lunch, and interviewed a job candidate in the afternoon. In between, I watched a lot of dog videos, which were already becoming rather tiresome. Being two hours ahead of time on the East Coast, I eventually went to dinner and forced myself to wait until midnight before I logged back on again, watching a couple of old movies on the movie channel to kill time.\n\nIt had to be a massage situation, I decided. Women felt differently about affection than men. Maybe for some reason you would kiss a massage therapist in your home.\n\nEven I didn't believe that. But it was the only theory I had that didn't explode my brain out the top of my skull.\n\nAt 12:30 a.m., I logged back on. There was a big group of new files waiting for me. Unsure what to expect, I began clicking through them, deleting the dog files as I went. I kept the file of Angela coming home from work, clad this time in a form-fitting business dress. It must have been sunny today, because she wasn't wearing a coat.\n\nThe good news was that, based on the camera's records, the redhead did not return on this night. \n\nThe bad news is that it was a brunette instead.\n\nShe was slightly shorter than Angela, and had a boyishly short haircut that contrasted sexily with a very feminine figure. She was almost as curvy as Angela, and was wearing a somewhat bohemian pair of slacks with a white shirt and suspenders that were all the fashion rage right now. The two women greeted each other with a cursory hug and stood for a couple of minutes speaking. I wished I could hear what they were saying. Then Angela gestured toward stage right. Either they were going to a bedroom or they were taking a circuitous route to the kitchen. I had a bad hunch it wasn't the kitchen.\n\nThey were gone, and the video ended. The dogs must have been put away because the next video was the brunette exiting. Angela was in her robe and the bohemian brunette was dressed the same as she had entered. They stopped at the entry, had a short conversation, and then -- \n\nBam.\n\nAngela had the brunette up against the wall. They weren't just kissing, they were making out, and Angela was the aggressor. There was no doubt about it. The brunette's right hand went down, and while I couldn't tell exactly where it was, I saw Angela's hips jerk spasmodically. The woman's left hand grabbed Angela's ass and pulled her close. And then ...\n\nI did not sleep well the second night either.\n\n****\n\nCassie knocked on the door frame of my office entry. I didn't even know she was there.\n\n\"You okay, boss?\" she asked.\n\nI looked at her, unable to form a proper answer. It didn't help that she was wearing a white t-shirt and suspenders today. I scanned her up and down, but the Bohemian Brunette was clearly a different person. Damn fashion trends.\n\nCassie cocked her head quizzically, then shut the door behind her and came over to my desk. \"Something's wrong,\" she deduced, sitting in the chair opposite me. \"You've not been yourself at all today.\"\n\nI smiled wryly. \"I am myself,\" I responded. \"I'm just not sure who everybody else is.\"\n\nWe sat silent for a moment, she waiting expectantly and me with a thousand competing thoughts running through my head. Finally she spoke. \"Are you going to tell me or am I going to have to wrestle you down and beat it out of you?\"\n\nThe thought made me smile, partly because it came from this waifish young woman who could likely not outwrestle a 12 year-old boy, and partly because such a thing sounded fun. She was always saying things like that, just flirty enough to plant a fantasy but not enough to be over the line.\n\nI needed someone to talk to. I needed someone to tell me I wasn't crazy. I looked at my watch, and it was 4:45. \"Want to go get a drink somewhere?\" I asked. \"This is going to take a while.\"\n\nHer big brown eyes got even bigger, illuminating the white around them. She looked at her watch too, then nodded, a look of curiosity and concern on her face. \"Let me go shut down for the day,\" she said. \"Meet me at my car.\"\n\nFifteen minutes later, I walked out to the employee parking lot. Cassie's car was a perfect match for her, small and cute and modern. She was waiting behind the wheel, checking her makeup in the rear view mirror. I crossed in front of her and climbed into the passenger seat.\n\n\"Where to, boss?\"\n\n\"How about your place? This is very confidential.\"\n\n\"My condo?\" She turned and looked at me, then started up the car. \"Well, aren't you quite mysterious today?\" Sensing my seriousness, though, she changed tones. \"Something seems wrong. I hope you're okay.\"\n\nIt took me a minute to answer as she edged out of her spot and began driving. \"I'm not.\"\n\n****\n\nCassie made good money at the firm. We designed and manufactured high-end jewelry, and we did quite well. Her early presence in the firm and her brilliance had earned her a great living, and her condo reflected that. It was on the 22nd floor of a downtown high-rise, decorated in a manner that could best be described as \"1960s mod meets rococo.\" I had only been there a couple of times over the years, once at her housewarming party and once for an employee's funeral, but the style matched Cassie's nature, bold and individualistic. She poured us each a glass of wine and we sat on her couch.\n\nI opened my laptop. \"I need you to look at something,\" I said. \"I need you to tell me how you interpret it.\"\n\n\"Oookay.\" She was looking at me like I was half crazy, and dutifully adjusted her glasses.\n\n\"Obviously, it's going to be highly personal and confidential. I just want to be sure that I'm not jumping to any conclusions.\" I told her about buying the camera and my tests with the dog videos and that I hadn't intended to be spying, but the video showed something I wasn't expecting.\n\nA flash of realization came across her face. \"Oh, no,\" she said, and she looked as upset as I felt. \"Angela?\"\n\nI answered hesitantly. \"That's part of it.\"\n\nWe moved together so she could see my screen, our hips nearly touching each other as the laptop balanced on my knees. I pulled up the first video, the one with the redhead arriving. \"This was at 8:15 on my first night in Baltimore.\"\n\nCassie leaned forward, intently watching it. The redhead arrived, she and Angela hugged, and the video ended. Cassie shrugged. \"Am I missing something? Who's the woman?\"\n\n\"Now let's go to the next video. This is a couple of hours later.\" I started up the departure video, and Cassie leaned in. \n\nI leaned back to give her room, and studied her as she watched the video. Maybe it's just because my marriage was going down the drain, but she looked particularly attractive today. Her medium brown hair was shoulder length and flipped inward at the bottom, smooth and shiny. The suspenders, flaring out and up over her narrow shoulders, accentuated her tiny waist and subtle breast swells. Maybe if I ended up single ...\n\n\"Oh, my god!\" Reaching into my lap, Cassie hit the key to back up the video. She watched again, peering intently, then swung her head around to me. \"Are they kissing?\" The look on her face was nearly identical to the look that I had seen in my hotel mirror. She turned around and played the video again, leaning so far in that I could only see her sleek mane of hair in my lap.\n\n\"I'm going to ask a really stupid guy question,\" I said, \"but do women ever casually kiss each other like that? Could that be a friendship kiss of some sort?\"\n\nCassie stood up and began pacing, her small ass swaying. She kicked off her shoes and suddenly got notably shorter, and I realized that I'd never seen her barefoot before. She was smaller than I realized. She stopped, gave me a look like she was a private eye and pointed at the laptop. \"That's a woman,\" she said, as if I didn't understand the obvious. \"That's another woman!\"\n\nI nodded. As traumatic as my night had been, it was entertaining to watch Cassie in this state. I'd never seen her so perplexed and indignant. She was pacing rapidly, as if trying to diffuse energy before it caused an explosion.\n\nShe continued, her hands moving up to clutch her head as she paced. \"I mean, that's Angela! That's your wife! I've known her for years! There must be an explanation. There has to be an explanation for this.\" She was talking a mile a minute, her mind working through scenarios just as mine had done.\n\nI waited for an opening. \"Want to see the next night's video now?\"\n\nCassie's face went pale and she stopped in her tracks. \"There's another one?\"\n\n\"Oh, it gets better. Or worse.\"\n\nShe sat down beside me again, and I started up the Bohemian Brunette video. \"I won't show you this woman arriving because nothing happens there, but here she is leaving a couple of hours later. This is on the second night that I was gone. It goes on for about seven minutes.\"\n\nLike I had done, Cassie watched the video a half dozen times, or at least the most damning parts of it. At some point she plucked the laptop off my lap and crawled up onto the couch, lying against the far arm facing me, then curling up and balancing it on her knees. She braced her bare feet against my thighs and disappeared into the screen.\n\nWhen it was over, she looked at me with bewilderment, her mouth agape.\n\n\"Do you have any theories?\" I asked.\n\nCassie set the laptop on the floor and sat facing me, her feet still against my thigh. I could see a faraway look in her eyes as her sharp mind clicked through scenarios. She gestured toward the laptop. \"That last video makes it pretty clear,\" she said.\n\n\"So what does it mean?\"\n\nCassie shook her head in shock. \"Honestly, it's blowing my mind. I don't know which is more shocking, the fact that she would be cheating on you or the fact that she'd be doing it with a woman.\"\n\n\"Welcome to the club.\"\n\nCassie ran her slender fingers through her hair, her big brown eyes unfocused in thought. She peered at me. \"Is Angela bisexual or lesbian?\" she asked pointedly.\n\n\"Not that I knew of.\"\n\n\"She's never said anything about it?\"\n\nI shook my head. \"I would definitely remember that,\" I quipped.\n\nHer smile was shaky. \"Because they were clearly ... I mean, that other woman, she was ... she was masturbating Angela. Right there at your front door.\" Cassie blushed even saying the words.\n\n\"And Angela was the one who made the first move,\" I observed.\n\n\"Has she ever given you any sense that she liked women? Any sense at all?\"\n\nMost people's sex lives are private, and Angela and I were no exception. In fact, we were very private. But these were unusual times. I looked at Cassie, looked at the laptop, and started baring my soul. \"Okay, here's the whole truth and nothing but the truth. I've never gotten any indication that she liked women. None at all. I've joked over the years about doing a threesome with her, and she always laughed it off. We have sex, but it's really vanilla, and she won't even tell me her fantasies. Won't talk about them at all. But I know she must have them. Everyone has fantasies, right?\"\n\n\"Have you ever watched lesbian porn together?\" Cassie blushed again as she said it, but I think we both knew that this was going to be a no-holds-barred conversation.\n\n\"Well, sure, we've watched some porn over the years, and I really like the girl-girl stuff. She watched it with me, but she never asked for it or anything. She tends to be pretty conservative about sex.\" \n\nCassie looked at me, and then her mouth blossomed into a grin. She began laughing, and I realized what I had said. I had to laugh as well.\n\n\"I'm so sorry,\" she said, wiping away a tear of laughter. \"I guess we know THAT's not true now.\"\n\nIn a world where everything was suddenly upside down, Cassie made me laugh. She was the rock that I needed right now.\n\n\"So what's next? Is this divorce material?\" she asked.\n\nI laughed again, sheepishly this time. \"This conversation is never going to leave the room, right?\"\n\n\"Oh, absolutely not. Just you and me.\"\n\n\"First off, it looks like she's cheating on me. Maybe that's divorce material. It seems like it should be, but I'm still in too much shock to think clearly. But ...\" I swallowed hard. This was rapidly becoming a week of unprecedented firsts. \"But ... I have to say ... it also really turns me on. If she had just asked, I would have been thrilled to let her do it.\"\n\nCassie threw her head back, laughing again, baring her slender throat to me. \n\nWhat the hell. I kept going. All bets were off now. \"I would kill to see her having sex with another woman. It's probably my favorite fantasy. If they're still frigging each other at the front door, I'm dying to know what happened back in the bedroom. If she wanted this, why didn't she just tell me? I would have gladly let her do it.\"\n\nCassie's toes curled against my thigh. She was giggling uncontrollably. \"So you're into the lesbian thing, huh? Would you actually do a threesome with her?\"\n\n\"Hell, yeah! A thousand times yeah!\"\n\nI was oddly euphoric. Everything was happening at once. My world was crumbling, my wife was apparently a lesbian, and I was sitting in Cassie's living room feeling her bare feet on my thigh, telling her that I enjoyed threesomes and lesbian sex. I had a feeling that the next few months were going to be a wild ride, most likely with a horrific crash at the end, but I didn't care. It was that moment on the roller coaster where you just crested the top and you throw your arms up triumphantly right before the bottom drops out.\n\nCassie pulled her feet away from me, reaching down to grab the laptop. \"Let's watch it again. I want to see something.\"\n\nShe hit the replay button and I moved in close to her, our hips and shoulders touching. It was all there again. The Bohemian Brunette went to the door. They had a short conversation. And then Angela pushed the Bohemian against the wall, trapping her in a passionate kiss. The Bohemian's hand went down and into Angela's robe, and my wife's hips jerked in response. The Bohemian then reached around, grabbing Angela's ass and pulling her close.\n\nFor the next several minutes, Angela kissed and pawed the Bohemian, and the Bohemian jilled off my wife. My wife of twenty years. The robe never came off and there was no visible nudity, but it was obvious what was happening. At the end, Angela's hips began moving and her back began arching. \n\n\"Right there, she's having an orgasm,\" I said. I knew that arch.\n\nCassie was rather flushed at this point, and I saw something I'd never seen before. Under her fashionable suspenders, her t-shirt was light and thin and her nipples were quite erect. Erect and large, much larger than I would have thought possible on her petite B-cups. \n\nShe rotated back against the arm of the sofa to face me, looked down, and noticed them. She quickly drew her legs up and casually wrapped her arms around them. \"Do you know what I see?\" she queried.\n\nI knew what I was seeing, but I think she was talking about the video. \"What do you see?\" \n\n\"I see lust, not love. Think about it. Two different women on two different nights. She's not having an affair. She's just fucking around.\"\n\nI'd never heard Cassie use a vulgarity before. Chalk up another first. \"What's the significance of that?\"\n\n\"It's your call. Divorce, intervention, whatever. But I don't think she's cheating on you emotionally. I think she's just getting her rocks off. And it sounds like you kind of like that.\"\n\nI turned it over in my mind. I had been thinking about the situation from my own perspective, and feeling rejected and cheated on. I hadn't looked at it from Angela's perspective yet. A new kernel of thought entered my mind, one that was much less morose. I looked at Carrie and she looked at me, and we exchanged raised eyebrows.\n\nI spoke slowly and carefully. \"I think ... that I need to investigate this more before I do anything. I need video of what's happening in the bedroom.\"\n\n\"Absolutely.\"\n\n\"And I need to figure out who those other women are.\"\n\n\"Absolutely.\"\n\n\"And I need to understand better why she's doing this.\"\n\n\"Absolutely.\"\n\n\"I think I'm going to buy a spycam with sound.\"\n\nShe nodded. \"Give me the one you've got,\" she said, \"because I still need to catch a thief. Oh, and I'll work up an excuse to send you on another business trip as soon as the new camera arrives.\"\n\nWe walked together to the front door. I stopped, and spontaneously we gave each other a big hug. She was so small in my arms, but she held me with great strength. At long last, arching her back so she could look into my face, she said, \"Oh, and one other thing.\"\n\n\"What's that?\"\n\nShe blushed, but her teeth shone in a big grin. \"I'm going to need to view those videos with you. I kinda like lesbian porn.\"\n\nI laughed the whole way home.\n\n****\n\nThe new camera looked like a small clock. Angela wondered why I had bought such a thing, but we tended to be independent about such things, so she just shrugged and let me go on my way. Sitting on my nightstand, it pointed inward at the bed and offered a perfect vantage point. I was very proud of my stealth.\n\nI kept mum about the videos, which wasn't too hard if I worked late every night. I then told Angela that I had to go to Los Angeles, and she didn't question it. I traveled regularly, usually once a month, so having a second trip so soon wasn't unheard of. But I didn't go to Los Angeles. I went to Carrie's condo, where she had her guest bedroom ready for me.\n\n\"Thanks so much,\" I said as I entered. \n\n\"No sense in spending the money for travel,\" she said, \"and otherwise we'd just be on the phone all night anyway.\"\n\nShe padded to the kitchen to get some waters for us. We had a casual workplace, so I usually saw her in jeans and a t-shirt. I seldom saw her in shorts, much less the short shorts she was wearing tonight, and it was a real treat. She was only a shade over 5 feet tall, and she had a small, pert ass that defied gravity. Given some bouncing on her way back, I also decided that she wasn't wearing a bra under her thin and aged concert t-shirt.",
        "\"So what do we do now?\" she asked.\n\n\"Now? We wait. If anything happens at all, it'll happen later in the evening. So you're stuck with me for dinner.\"\n\nWe ordered Chinese, and I paid. As we divvied up our chicken lo mein and \"happy family\" seafood, we chatted. \n\n\"Any luck with the thief yet?\" I asked.\n\n\"Not yet. But it's just a matter of time. Given the pattern, I suspect that they'll show up on video sometime in the next few days.\"\n\n\"Well, they're not going to be happy when we catch them. I'm in a pretty vindictive mood right now.\"\n\nCassie nodded, studying me. \"So how are you feeling about tonight?\"\n\nI took a deep breath. \"I'm not sure. A part of me hopes that she just sits and reads a book, but another part of me wants any ambiguity to go away. No matter what we see tonight, what happened last week still happened, and I have to figure out what to do about it.\"\n\n\"What are you going to do about it?\"\n\nI thought for a second, then threw tact out the window. \"I need to figure out what she's doing and why she's doing it. If she's cheating on me, then we're done. But I'm not sure that's the case. I thought a lot about what you said when you first saw the videos, about whether she's cheating or just fucking around, and I think you're right. Two women in two nights argues that she's not in love with someone else. If it turns out that she's just been wanting more in bed than I've been giving her ... um ...\" I blushed with embarrassment. \"I can learn from that, and I'm glad to be more open to possibilities.\"\n\nCassie laughed. \"You don't mind letting her diddle women as long as you get to watch?\" Her grin was infectious, and her eyes flashed mischievously but compassionately.\n\nI sheepishly grinned back. \"Not just watch. I want to play, too. If she wants to have casual sex with other women, I'm fine with that. In fact, I'm delighted about it. Just let me watch, and give me a crack at the other girl, too. To be honest, I've been bored to death with our sex life.\"\n\nCassie smiled coyly, averting her eyes toward her food.\n\n\"Did I say too much?\"\n\nIt took a second for her to respond. \"No, not at all. I just find it funny that you're a perv. You're so upright and serious at work. You're a boy scout. I've never seen this side of you.\"\n\n\"I'm not a boy scout,\" I snapped peevishly. \"I'm definitely a perv, but I just don't go around talking about it.\" Then I softened back up and thought for a moment. \"Maybe we're all pervs. I just learned that my wife is a perv, and she's the last person I would ever suspect. And now I also know that you like lesbian porn.\"\n\nCassie giggled, her face a deep red. \"What can I say?\" she confessed. \"I like men, but women are soooo hot.\"\n\nIt was indeed a strange new world.\n\n****\n\n\"Okay, are we ready?\"\n\nIt was midnight now, and stone silent outside our little high-rise cocoon. Outside her huge glass window, the lights of the city shone beautifully, and I wondered how many other stories like mine were playing out down there.\n\nCassie had hooked my laptop up to her big screen TV, so there would be no more huddling over a small screen. I logged on and went to today's files. There were several, as usual, but they were less numerous and much bigger than the files from the entryway camera, including one very large file at the bottom. \n\nThe first file, from early in the morning, showed Angela getting out of bed. We slept nude, so Cassie got a good view of Angela's naked ass as she walked toward the bathroom. I felt guilty about the unintentional invasion of privacy, but then again Angela had forfeited that right in my mind. She rummaged in the closet, then disappeared into the bathroom and the video ended. \n\n\"Angela has a nice ass\", Cassie commented to break the awkwardness.\n\n\"Yep.\"\n\nA second mundane video showed her coming out fully dressed, then leaving for work. A third video showed the dogs coming in and jumping on the bed to sleep.\n\n\"The dogs sleep on the bed?\" I couldn't believe my eyes. \"I had no idea they did that. They aren't supposed to sleep on the bed.\"\n\nCassie chuckled. \"It's unbelievable what goes on in your house when you're not there.\"\n\nThe fourth video was in the early evening. The dogs suddenly leapt from the bed and ran from the room, and a few moments later Angela arrived, wearing a nice business suit. She sat on the bed facing away from us and removed her heels, then pulled her phone from her purse. She looked something up, then held it to her ear. Cassie and I sat in anticipation.\n\n\"Hello, Becky? This is Angela.\"\n\n(Silence.)\n\n\"Yes, it's fun time again. Who do you have available?\"\n\n(Silence.)\n\n\"I'm feeling rather combative today, and I need to be taken down a notch. Who do you have that's assertive?\"\n\n(Silence.)\n\n\"Is she taller than me?\"\n\n(Silence.)\n\n\"And you trust her? This is someone that I can be helpless with?\"\n\nCassie and I turned and gaped at each other, eyes wide.\n\n\"Okay, that sounds great. When can she be here? Let's go for two hours.\"\n\nAngela hung up and set the phone on her nightstand, a devilish smile of anticipation on her face. She stood up and stripped down, removing her suit, bra, and panties. I'd seen this show before, so I instead watched Cassie out of the corner of my eye as we sat together on the couch. She was watching intently, her dark pupils dilated widely inside her pretty chocolate irises. When Angela turned at some point, she got a full frontal view. I watched Cassie's eyes do a head to toes scan.\n\n\"She has nice nipples,\" I remarked. \"Just in case you missed them.\"\n\n\"Your wife is so hot,\" Cassie conceded with her typical forthrightness. She shifted a bit on the couch, and I could definitely tell that she wasn't wearing a bra. Her nipples were pushing against the fabric hard. My god, they were long.\n\nOn the screen, Angela walked naked to her closet and opened the door. It blocked our view, but we could tell that she was rummaging around. A moment later she reappeared with a small suitcase in tow. I had seen it in her closet, but had always assumed that it was empty. \n\nShe set it on the bed and unzipped it, and I leaned forward with interest. She pulled out a blue lingerie piece and appraised it, then set it aside. Then out came a red lace playsuit, also appraised and rejected. Then something black and leather. \n\n\"I've never seen these things,\" I said glumly.\n\nCassie pursed her lips. \"Sorry,\" she said.\n\nHands on her hips, Angela considered her options. Setting aside clothing for a moment, she began taking other things out of the suitcase. A vibrator. A large dildo. Some sort of dildo-belt combination. Several smaller items. My jaw hung slack in shock.\n\n\"Did she just take out a strap-on?\" Cassie asked.\n\n\"I had no idea she owned a strap-on,\" I said, dumbfounded.\n\n\"Lucky for you, I guess.\"\n\nI couldn't help but laugh, and Cassie giggled at her own joke. My Chief Operating Officer was showing a very different side of herself.\n\nAngela then surprised us. Instead of putting on lingerie, she went back to her closet and pulled out the outfit that she had just worn home. It was a conservative navy blue skirt and beige top, the uniform of the female lawyer. She began putting them back on.\n\n\"What's she doing?\" I asked.\n\n\"I don't know. But did you notice that she's not putting on any underwear?\"\n\nAngela put on the skirt and blouse, but was commando underneath. No bra, no panties. She then took the waistband of the skirt and began rolling it on her waist. Cassie gestured to the screen. \"Do you see what she's doing?\"\n\nI shook my head. \"I see it, but I don't understand it. What's she doing?\"\n\n\"She's rolling up the waistband to make the skirt shorter. Let's see how far she goes.\"\n\nAngela was standing in front of a mirror now, rolling and checking. The skirt went from just above her knees to mid-thigh, and sexy as hell. My wife had great legs. \n\n\"I wish she would dress like that for me,\" I said. \"I can never get her to dress sexy.\"\n\nAngela left the room, and the video went black.\n\n****\n\nIt was easy to forget that the action wasn't live. The camera captured events and recorded them, so we didn't have to wait for the next chapter to unfold. It was right there in the largest file, the next one on the list. I moved the mouse to it, and hesitated.\n\n\"Are you ready?\" Cassie asked. Her right leg was bouncing with nervous energy. \n\n\"I have a bad feeling about what we're going to see,\" I said.\n\nCassie nodded. \"So what's our goal in watching it?\" Always thinking, that girl.\n\nI sighed deeply and took my hand off the mouse. \"You're right. What is our goal?\" I wanted to see what was next, but why? Curiosity was probably only going to be painful.\n\nCassie pursed her thin lips. \"I think it'll be easy to fixate on what's happening, but you need to know why it's happening.\"\n\nI looked at the screen. The cursor was resting on the file. \"I need to understand why,\" I parroted. I wasn't thinking clearly but I trusted Cassie to have the answer.\n\n\"You've told me that you're not averse to what she's doing. You're just shocked that it's happening behind your back. Right? You told me last week that you're actually turned on by what's she's doing.\"\n\n\"I am.\"\n\n\"So whatever happens next, we need to watch it with an eye toward her motivations. And from there we'll figure out next steps. Given the call, we know now that last week wasn't a one-time dalliance.\"\n\nThe stress of the last week had been burying me, but I suddenly felt much better. Or at least less bad. Cassie was bearing some of my burdens, and she was able to think clearly and objectively. This is why I had wanted her in my business, and now it was paying off personally. To her surprise, I leaned over and gave her a quick hug. \"Thank you so much,\" I said. \"I don't know what I would do without you here helping me.\"\n\n\"You're the best boss ever,\" she replied curtly. \"Of course I'm going to help you.\" She grinned wickedly. \"Plus ... free porn.\"\n\nI clicked the file.\n\n****\n\nWhatever else I might want to say about my wife, she had good taste in women. The video opened with my wife entering the bedroom. Behind her came a beautiful woman with black hair and olive skin, obviously Latina. The Latina was dressed in a black leather corset, her ample cleavage spilling out over the top, along with a g-string and knee high boots. She was a couple of inches taller than Angela, and had a long sexy cascade of jet black hair. \n\n\"Whoa,\" said Cassie. \"She's gorgeous\"\n\nI couldn't speak.\n\nThey stopped and faced each other in a perfect viewing position for us. \"Okay, here's what I'd like,\" Angela said in an instructional tone. \"My safe word is 'F Scott Fitzgerald'. If I say that, the game stops, got it?\"\n\nThe Latina nodded. \"Got it. F. Scott Fitzgerald.\"\n\n\"And no matter what you do, no marks. No bruises no hickeys, no marks. I can't have any marks at the end of the night. That's very important.\"\n\nCassie and I looked at each other as the Latina agreed. \"She doesn't want you to find out,\" Cassie observed. I nodded, frowning.\n\nAngela proceeded. \"Great. Here's the scenario. We're on a business trip, and you're my coworker. We're in my hotel room. You force yourself on me. I'm going to try to escape, but you're going to pin me onto the bed. Rip my clothes off, grope me, do whatever. I'm going to fight hard, but I'll eventually give up and let you know that I've surrendered. At that point, tie me to the bed however you want, and start using these on me.\" Angela pointed to several sex toys on the nightstand. \"Use them however you want, but at some point I want you to use the strap-on on me. Start in the front and then move to my rear. But lube me up a lot before you do it. Lube me up slow and tell me what you're doing. Make me know that you're going to take me anally. And feel free to make me give you orgasms, too. I just want to have at least two myself.\"\n\nCassie looked over at me sympathetically. Her eyes were wide as saucers.\n\n\"I can't believe this.\" I felt as if I could barely breathe, and my skin prickled with shock. \n\nThe Latina nodded at my wife of twenty years. \"What gives you orgasms?\" she asked. \"Will penetration do it? Or do you want a vibrator or fingers or tongue?\"\n\n\"I love oral,\" Angela said, \"but vibrators work great, too. Feel free to do anything you want for your own orgasms.\"\n\nFor some reason, her words comforted me a little. She loved oral. At least she was being honest with me about that.\n\nOn the screen, the Latina nodded.\n\n\"Okay, let's start.\" Angela smoothed her skirt and said, \"Thanks for coming to my room, Samantha. I just needed some help with my suitcase.\"\n\nThe Latina woman, apparently in the role of Samantha, got into her character. \"Glad to help, Angela, but that's not why I came up.\"\n\n\"Why did you come up?\" My wife was a pretty good actress.\n\n\"You know why.\" Samantha stepped close to Angela and ran her hands up Angela's arms. \"Do you feel the attraction too?\"\n\n\"What? No!\" Angela stepped back. \"What are you doing?\"\n\n\"I want you, Angela. I'm going to have you.\"\n\n\"No! I'm married! What are you doing?\"\n\nIt was stilted dialogue, but Cassie and I were glued to the scene like it was an Oscar-winning film.\n\nSamantha stepped forward again, and Angela was now backed up to the bed. The tall Latina offered a truly sinister smile. \"You know you want it.\" She gripped Angela around the waist.\n\n\"Are you crazy? Get away from me!\"\n\nWith a shove, Angela was on the bed and the Latina was on top of her. The two women wrestled quickly and intensively before Samantha gained control. Grasping Angela's wrists, she pulled them over her head and wedged her legs between Angela's knees. \"Kiss me!\"\n\nAngela fought like a wildcat, but she had disadvantages in both leverage and strength. Samantha slowly immobilized her until Angela was helpless. \"Kiss me,\" she repeated, then forced her lips onto Angela's mouth. Angela squealed in mock protest but could only absorb the kiss as her hips and legs flailed, the short skirt riding up dangerously high.\n\nI was in shock. There are some moments that life does not prepare you for, and this was one of them. I was watching my beloved wife of twenty years, lying on our bed in my own home, being forced to kiss a woman in a pseudo-dominatrix outfit. \n\nAnd she wanted it.\n\nMy cock was rock hard.\n\nAngela fought and flailed and struggled, but she had no chance. At some point, Samantha managed to shift both of Angela's slim wrists into her left hand, holding them secure. With her right hand, she grasped Angela's blouse and pulled hard. Buttons flew, the blouse opened, and Angela's creamy breasts were now exposed and vulnerable. Samantha began roughly kneading and squeezing them while Angela struggled. \n\nI looked over at Cassie. Her nipples were quite erect and noticeable, her mouth agape and her eyes unblinking in concentration.\n\nSamantha released her kiss. \"You like that, Angela?\" she purred. She squeezed Angela's nipple hard.\n\n\"You're hurting me! Let me go!\"\n\nAs much as I realized that it was a game, I was still concerned. Samantha was really working Angela's breasts, much harder than I ever had. Angela kicked and struggled, her back arched in pain, but she had no chance of escape.\n\n\"How about something more fun?\" Her left hand still pinning Angela's wrists, Samantha's right hand moved down, sliding up under Angela's shortened skirt. \n\n\"Oh, god!\" Angela's kicks became even more frenetic, her large breasts bouncing with her efforts. \"What are you doing? Let me go!\"\n\nSamantha laughed. \"I'll let you go when I'm finished. But we're just starting.\"\n\nThey wrestled for several minutes. \"Get your finger out! Oh, god!\"\n\n\"Second finger going in.\"\n\n\"Oh, no! No!\" Angela kicked and bucked.\n\n\"Third finger going in now.\" Samantha shifted her hand slightly, and Angela grunted and gasped.\n\n\"No! I'll do what you want! Anything! Stop it!\"\n\n\"Anything?\"\n\n\"Anything! Please!\"\n\nSamantha stopped moving, her hand still under Angela's skirt. Angela suddenly stopped moving and moaned in pleasure.\n\n\"I'm going to tie you to the bed and have fun with you for a while. You'll enjoy it too, or at least most of it. You'll stop fighting me while I do it. Otherwise, I'm going to put my entire fist up you right now. What do you want?\"\n\n\"No fist! Please, no fist! I'll let you tie me up!\"\n\nSamantha smiled cruelly down at Angela. \"This is going to be a fun night. Stand up and strip for me, blondie, then lie down on the bed.\"\n\nAngela stood and stripped, obediently removing the torn blouse and the shortened skirt while Samantha leered. She then lay compliantly on the bed. Using rope from the nightstand, Samantha tied Angela's legs apart, one leg to each foot post, then tied her wrists together and secured them to the headboard. As she worked, Cassie looked over at me.\n\n\"Did you have any idea that she was into this?\"\n\nI shook my head. \"None at all.\"\n\n\"Would you do this to her if she wanted?\"\n\nMy cock was about to burst out of my pants. \"Absolutely. This would be a dream. I've tried for years to get her to tell me her fantasies, and she never will.\"\n\nCassie pursed her lips. \"It's hard to talk about fantasies. And that's not exactly the public persona that Angela projects.\" She tilted her head toward the screen.\n\nOn the video, Samantha peeled off her g-string and removed her corset. She had fantastic breasts and a smooth, shaved pussy. Grabbing a vibrator off the nightstand, she climbed onto the bed between Angela's outstretched legs. \"I'm going to wear you out, girl,\" she said, lowering it to Angela's clit.\n\nI watched my wife submit to the dominant woman. I had never done anything like this with her. I was a man. I was taught not to treat women like this. This was rape, or at least would be if Angela wasn't paying for it. I would never do that to Angela. Apparently that was my mistake.\n\nCassie was leaning back on the couch, watching raptly. She had a knuckle in her teeth, anxiously biting on it, and the other hand was on her hip. She brought her knees up to curl up against her chest. Her shorts were so short that I could see a fair bit of her hip. Was she turned on by this? Horrified? Both? Should I have subjected her to this? I only knew that my cock was standing up like a steel rod, and I didn't know what to think about that.\n\nAngela came pretty quickly. She was tied so tightly that she could barely move, but I could see her telltale signs. As she arched, I told Cassie, \"She's cumming now.\"\n\n\"I can tell,\" she said, her voice low and breathy. She was rocking ever so slightly on the couch, and my hard-on was actually painful, sending order after order to my brain to do something about it.\n\nAngela rode the orgasm for a full minute, moaning and mewing. When she finally came down, Samantha forcefully pushed the vibrator up into her cunt, then retrieved something else from the nightstand.\n\n\"No, not nipple clamps!\" Angela struggled in vain, her muscles tense against the ropes. She howled in pain as Samantha applied them, giving a good yank to their connecting chain to be sure that they were tight. It's a good thing that we live relatively distant from our neighbors, because Angela was protesting loudly, begging to release the clamps.\n\n\"Unbelievable,\" I breathed.\n\n\"What?\" Cassie looked over at me.\n\n\"Her nipples are very sensitive. I've always had to be very careful with them.\" My eyes drifted down to Cassie's t-shirt and her prominent points, and I wondered.\n\n\"Well, it looks like they're really painful,\" Cassie said. \"Those are clover clamps, and they can be tight. But she's not using her safe word, so she must like it.\"\n\nMy, my. Cassie seemed to know a lot about bondage. I tucked that fact away for future reference.\n\nSamantha straddled her way up to Angela's chest, her caramel skin standing in stark contrast to the white mounds of Angela's breasts. \"You're going to lick me, girl,\" she said. \"If I smack your left tit I want you to go faster. Show me your tongue moving fast.\" She slapped Angela's left breast hard, jangling the clamps, and Angela waggled her tongue quickly. ",
        "\"If I slap your right tit, I want you to go slower. Show me again.\" Angela waggled her tongue slower.\n\nSamantha climbed up to Angela's face, turning to look down toward her feet. Angela went to work orally, grunting as Samantha alternated breast slaps, her wrists and ankles flexing against the ropes.\n\nMeanwhile, I was a wreck. I should be furious. I should be calling a divorce lawyer. But instead, I was sitting on a couch about to explode in an orgasm without even touching myself. What was wrong with me?\n\nBeside me, Cassie was flexing her fingers, alternately stretching them and making fists. She seemed fidgety.\n\n\"Are you okay?\" I asked.\n\n\"Yeah. How about you?\" She alternated between looking at me and looking at the screen, where my tightly bound wife was orally servicing an escort. \"If you need to stop watching, we can stop.\"\n\n\"I'm furious,\" I admitted. \"But I'm not furious about her doing what she's doing. I'm furious that she never told me she wanted it.\"\n\n\"So what does that mean for the marriage?\"\n\n\"I can't even think about that right now.\"\n\n\"Why?\"\n\nOn the screen, Samantha was rubbing her pussy across Angela's face, up and back, up and back. The beautiful face that was so angelic in our wedding photos was frantically licking, thrusting her tongue into another woman's pussy.\n\n\"Because I'm so turned on that there's no blood flow above my waist.\"\n\nCassie laughed. \n\nFifteen minutes later, after a very satisfying and loud orgasm, Samantha was hooking a strap-on harness around her legs and waist while Angela begged her to remove the nipple clamps. Cassie looked over at me.\n\n\"Nothing leaves this room, right?\" Cassie asked.\n\nSamantha climbed between Angela's legs.\n\n\"Absolutely.\"\n\nSamantha positioned the dildo and grinned down at my blonde wife, who was breathing rapidly and shallowly.\n\n\"Can we make a deal?\" Cassie asked me. \"Ultra secret?\"\n\n\"Are you ready to take 8 inches?\" Samantha asked rhetorically on the screen. Angela shook her head emphatically.\n\nCassie wrinkled her cute little nose. \"I can see your dick in your pants, and I'm dying over here. Can we both relieve a little pressure? I can help you if you'll help me, or we can just do it ourselves.\"\n\nI wanted Cassie so bad. I had fallen in lust with that adorable face the moment I had seen her, and honestly probably hired her for that more than her competence and brilliance, which were not as immediately evident back in her initial job interview. But even so, I struggled. I wanted her so bad, but I also wanted to retain my dignity. I had never cheated on Angela, and now wasn't the time to start. \n\nSamantha quickly and smoothly forced eight inches of artificial cock up into my wife. She stiffened and let out a stifled gasp. Dropping into a classic missionary position, Samantha began a relentless fucking. My cock was screaming at me. If I ever had a reason to break my wedding vows, this was it. I chewed on my options.\n\n\"Cassie,\" I admitted at long last, \"I've lusted after you for a decade. I fantasize about you all the time, trust me. And I guess now is my chance. If my marriage is over, you're number one on my list. But as improbable as it sounds right now, I can't touch you. I need to maintain my righteous indignation and to do that I can't cheat on Angela. Maybe that's stupid, I don't know. However...\" I unzipped my pants and fished out my cock, rigid as steel and at full length. \"I need to take care of business over here and I'd love it if you took care of business over there where I can oversee it. Deal?\"\n\nCassie seemed stunned for a moment, and she had any number of reasons to be. She looked at my eyes, then my cock, then my eyes again. Her smile was sincere and dazzling and filled with admiration. \"That's reasonable. Let's talk about that fantasizing thing later,\" she said. \"But right now you're the boss.\" Raising her hips, she slid her shorts off of her body, the underwear going with it. Her hand slid between her legs.\n\n\"Naked\", I ordered. \"I've been wanting to see those nipples forever.\"\n\nGiggling, she pulled her t-shirt over her head. \"I love my nipples,\" she said, and I had to agree as I ogled them. They were darker in color than I expected, almost a reddish brown compared to the pink that I was used to seeing on Angela, and her areolas were in nice proportion to her breast size. The breasts themselves were spectacular, well shaped and firm even if much smaller than I was accustomed to seeing. \n\nAnd her nipples, oh, those nipples. They were quite long and erect, and as she brought her other hand up to twist one of them, it was apparent that they were highly erogenous for her.\n\nSo the four of us had the world's most awkward orgy. A Latina hooker, a few hours displaced in time, was fucking my tied-up wife with a large strap-on dildo, thrusting fast and hard. Meanwhile, I and my Chief Operating Officer sat side by side on her couch, watching it and each masturbating furiously. \n\nReality was bending for me.\n\nUnder such circumstances, I wasn't going to last very long, and I didn't. I tried to hold off, tried to tease myself, but even at that I came within a few minutes, splashing my chest with cum. Next to me, Cassie lasted a bit longer, and I got to watch her. \n\nShe had a completely shaved pussy, which didn't necessarily surprise me given her age cohort, and a nicely protruding mound. Leaving diplomacy at the door I brazenly stared, observing her technique as she jilled. Angela wouldn't masturbate in front of me, so it was exciting to watch in more ways than one. Cassie masturbated with both hands and worked her clit a lot, occasionally fluttering down across her outer and inner lips, dipping a finger inside. In contrast to Angela's smooth exterior and protruding interior lips, Cassie was the opposite. Her external lips were surprisingly thick and fleshy, and her inner lips almost invisible within them. It was astoundingly sexy, particularly when she hit the point of orgasm. I watched with delight as she quivered, froze, bit her lip, and closed her eyes, her breathing become hard and heavy. Her small hips began thrusting involuntarily, and after thirty seconds of muted screams she collapsed into the couch, gasping as the corners of her mouth curled up in self-satisfaction. I never in my wildest dreams thought I'd ever see such a thing.\n\nOnscreen, Angela was taking a pounding, longer and harder and deeper than she'd ever taken with me. I was an average-sized guy, and proud of my member, but I wasn't eight inches long, and Angela was taking the whole thing hard and fast. At last, her hair mussy and covered in sweat, she told Samantha, \"I'm getting close to my limit\", and the Latina pulled out. Still wearing the strap-on, she scooted back, kneeled down, and ran a tongue up the length of my wife's slit. \n\n\"Time to make you cum again\", she growled up at her hostage.\n\n\"Pause for a second,\" Cassie said abruptly. I grabbed the remote and paused as she jumped up and ran into her bedroom. She had possibly the best ass I'd ever seen, and certainly the best one I'd ever seen naked, admittedly nicer even than Angela's. It was small and round and tight, perfectly shaped. A couple of minutes later, she ran back in, small breasts bouncing and vibrator in hand. She was so smooth, so sleek, her skin so perfect that my eyes lingered.\n\nShe shrugged apologetically. \"The second one is a little harder.\"\n\nYou don't know what indecision is until you're watching your wife and your secret crush orgasming together, one on screen under a lesbian domination and the other right next to you, so close that you could easily touch her as she masturbated with a vibrator. Angela came silently under her dominatrix's tongue, my knowledge of her my only clue of her climax, while Cassie came with moans and gasps. By this time I was already hard again.\n\nAnd then Samantha turned Angela over. Her wrists and ankles retied, Samantha stuffed a pillow under Angela's hips, propping her ass up. Reaching to the nightstand, she got a bottle of what appeared to be lube, and began slowly rubbing it into Angela's most personal of areas, explaining to her what she was about to do with her eight-inch dildo.\n\nI shook my head in astonishment. \n\n\"What?\" Cassie was still rubbing the vibrator against her clit, beginning work toward a third orgasm.\n\n\"I've wanted to do anal with her for our entire marriage. I always assumed that she was a virgin back there.\"\n\n\"You've never done it?\"\n\n\"No.\"\n\n\"Have you done it with anyone?\"\n\n\"No. We married young. I've become a little obsessed with it, to be honest. I really want to try it.\"\n\nSamantha began pushing into Angela. My wife moaned and gasped, letting out a low guttural groan as she was violated.\n\n\"It looks like she likes it. Why would she turn you down?\" Cassie was moving the vibrator faster now.\n\nI lamented my mistake. \"Well,\" I said. \"I guess I never outright asked her.\"\n\nSamantha's hips pushed against Angela's trapped backside. She had taken all eight inches, and her sweaty face shone with a combination of ecstasy and fear.\n\n\"You never asked her? How come you never asked her?\"\n\nAngela began gasping as her dominator began thrusting. Leaning in and reaching around, Samantha began playing with Angela's pussy.\n\n\"How do you tell your high-powered attorney wife that you want to fuck her in the ass? That you want her to take pain for your pleasure? That's not love.\"\n\nCassie turned to face me, never slowing down with her vibrator. The girl had stamina. She motioned toward the screen, where Angela was moaning and grunting under the attentions of her dominator.\n\n\"Maybe it is.\"\n\n****\n\nWeirdest night of my life. How do you come home after that and pretend everything is normal?\n\n\"Hi, Tom!\" Angela pranced to the door and gave me a big kiss, just like normal. \"How was Los Angeles?\"\n\nI let go of my rolling bag and gave her a numb embrace and kiss. \"It was good. I saw all sorts of interesting things.\" \n\n\"Great! I missed you around here.\"\n\nI wrestled a hello with Gustav and Archie. \"I missed being around. Anything interesting happen while I was gone?\" I tried to keep the strain out of my voice.\n\nShe turned to go back to her chair, where an open book lay. \"Same old, same old. Just a quiet night at home.\"\n\nI bristled, but now was not the time. \"Well, that's good, I guess. I don't want you being lonely.\"\n\nI wheeled my bag into the bedroom, past the closet with the secret sex toys, and I set it on the bed where Angela had been assfucked the previous night. I looked at the bedposts to see if there were wear marks from previous bondage encounters, and I swear I had never noticed them before. The binding spots were worn smooth. I shook my head in disbelief.\n\nI tried to find an excuse to ask her damning questions, but couldn't come up with anything. So we were a happy, normal family. We had dinner together, we went to work, and we didn't have sex, just like your normal married couple. It took a week for Cassie and me to arrange another fake trip, and I was prepared.\n\nI got home from work and began packing. Angela at some point wandered into the bedroom. \"Going somewhere?\" she asked.\n\n\"Back to Baltimore,\" I said. \"Another two-nighter.\"\n\n\"You're traveling a lot lately.\"\n\n\"Business beckons, my dear.\"\n\nShe smiled and came in close. \"And so do you?\"\n\nI smiled back woodenly. I'd been both wanting this and dreading it, but had to act normal. \"Definitely. Strip for me, baby.\"\n\nWithin a minute she was nude, her large breasts swaying. She gently pinched and kneaded her pale nipples as I too got naked. I stepped in and put my own thumb and forefingers on her nipples. I squeezed gently.\n\n\"Do you like this?\"\n\n\"Yeah.\" Her hands went down to my hips, stroking my sides.\n\nI squeezed harder, then harder again, causing her back to arch. I wasn't sure how hard a clover clamp could squeeze, but tried to mimic it. \"Too hard,\" she said, pulling her hands up against mine.\n\n\"Don't you like squeezing?\"\n\n\"Yes, but not that hard.\"\n\n\"Are they a little more sensitive than normal? Have you been playing with them too hard?\" I asked the question in a joking manner, but I wasn't joking.\n\nShe laughed. \"I know how I like it. Now do it again, but gently.\"\n\nOnly slightly relenting my grip, I pulled her by the nipples over to the bed, then gently toppled her over and fell atop her. We kissed, touched, and groped.\n\n\"My favorite?\" she asked.\n\nI moved down between her legs. The Latina woman had been here most recently, licking Angela mercilessly as a finale to their evening together. I wondered if I was as good, because Angela had really enjoyed the other woman's attentions. I took on the task with resolution, and eventually Angela began breathing more heavily. \n\nLooking up through her bush, I saw her fingers pinching her nipples. Time to try something. Pushing my finger inside her pussy, I got it nice and slippery, then moved down. \n\nI had never done this before, never wanted her to think I was kinky, never wanted to do something that would bother her. But now? I wasn't so worried about it. I ran my finger around her anus just like usual, but then I began pushing on its iris. I heard a slight gasp, but nothing else. No encouragement, no discouragement. So I pushed further.\n\nAnd further.\n\nAnd further.\n\nI was still licking her by the time I had buried my finger completely in her ass. She never said a word about what I was doing, about what I had never done to her in twenty years. Instead, she acted as if all was normal, and eventually she began cumming, flexing and arching. I wasn't sure if it was as strong as the ones I'd seen on video, but I was nonetheless proud.\n\n\"I'll do you now,\" she said, and I lay back while she stroked and licked me. All the while, I imagined her with the redhead, with the bohemian, with the Latina. I knew exactly what she had done with the Latina, but not the other two. Did she lick and stroke them, too? Did they sit on her face like the Latina had done? Did they tie her up? \n\nAngela grasped my balls while she licked, which I loved. They were so sensitive as she jostled them, and I was so vulnerable while she had them in her grip. It was wonderful as she pulled on them ever so gently and -- \n\nWhoa.\n\nSuddenly a finger was tracing down further, ringing my anus. \n\nShe had never done this before, and it felt ... oddly ... divine. \n\nI spread my legs to give her more access. She was working industriously, her lips and right hand working on my shaft, and her left hand grasping and massaging my balls while one finger experimented. It was like having sex with a whole new woman. \n\nI came hard, wonderful visions in my mind, and then we lay down together. Angela nestled into my chest and I waited for my heartbeat to slow down before I talked.\n\n\"Angela, baby?\"\n\n\"Yes.\"\n\n\"That was great.\"\n\n\"Thank you.\"\n\n\"You did something different this time.\"\n\nShe was silent for a moment. Her head was positioned so that I couldn't see her face, only the back of her beautiful blonde locks. \"Yeah. So did you.\"\n\n\"Did you like what I did?\"\n\nAnother long silence. \"Yeah.\"\n\nMaybe this was progress.\n\n\"Angela?\"\n\n\"Yeah.\"\n\n\"Tell me about your fantasies.\"\n\nShe chuckled quizzically and looked up into my eyes. \"What?\"\n\n\"I want to know what you fantasize about. We never talk about it.\"\n\nShe laughed, almost a snort, and lay her head back down on my shoulder. \"Proper women don't discuss such things.\"\n\n\"I want to know. You're my wife. What turns you on? What kinky things do you like?\"\n\n\"Mmm, there are some things a woman shouldn't talk about, my dear.\"\n\nI pressed on. \"Can I tell you one of mine?\"\n\nShe looked up at me quizzically. \"What's gotten into you?\"\n\n\"Just feeling kind of horny, I guess.\" I cupped one of her breasts and gently played with it, remembering how Samantha had been yanking on the clamps. Was that a tiny vestige of a bruise, perhaps?\n\nShe remained quiet. I gave her the chance to ask, but she didn't. So I continued.\n\n\"We've never talked about this, but I'd love to watch you have sex with another woman.\"\n\nThe look of shock on Angela's face was priceless. She gaped at me for a second, then struggled for words. It took her a full minute to regain her composure. \"Why on earth are you telling me this?\"\n\n\"It would be fun. You like to receive oral sex, and I'd love to watch a girl give it to you.\"\n\nShe again was at a loss for words. \n\n\"I'd also love for you to perform oral sex on her. Would you ever do something like that?\"\n\nA look of conviction came across her face as she decided on a response. \"You have quite the imagination today, don't you?\"\n\n\"Would you ever do it?\"\n\n\"Keep the dream alive, silly boy. Now get up. You've got a trip to finish packing for.\"\n\n****\n\n\"Your wife has a mean streak,\" Cassie observed. She was naked on the couch, her legs spread, rubbing her clit slowly and teasingly. \"But I kind of like it.\"\n\nWe had a small bench in our bedroom that I often sat on when putting on my shoes. But I was now realizing that that's not why Angela bought it. A slender woman was tied over it, lying on her back with her ankles tied to two legs of the bench and her wrists tied to the other two. The position and the dimensions of the bench forced her back to arch, her head hanging down and her throat exposed, giving her little flexibility for movement. And she was desperately trying to move.\n\nAngela was kneeling between the girl's spread legs, working her clit with a large and apparently powerful vibrator while simultaneously thrusting vigorously into the girl with her fingers. Angela's guest looked to be in her mid-20s, pale in complexion with smallish breasts and long maple brown hair that flowed off the bench to the floor. She was bucking and writhing, trying to escape the vibrator and begging frantically for Angela to stop. We'd already watched her orgasm three times, each more intense than the last, and now the sensation was likely pure torture on her hypersensitive vulva.\n\nAngela reached up and grabbed the chain that connected the girl's nipple clamps, pulling firmly on it. The girl's nipples visibly stretched, but she ignored that pain as she tried to escape the more intense peril below.\n\nI was teasing my cock, trying to hold off as long as possible. Once again, my attention was torn between watching my sex-fiend wife on video or watching my naked employee sitting next to me. I greatly enjoyed the way that Cassie masturbated herself, and enjoyed the graceful ballet of her slender body as her pleasure rose.\n\n\"I wouldn't have guessed her to have a sadistic streak,\" I remarked.\n\n\"Me, either. But she's making that poor girl suffer. It's intense to get a vibrator on you in that situation.\"\n\n\"So you've done it?\"\n\nCassie smiled demurely. \"A few times, yeah. One of the guys I dated for a while would do it to me.\"\n\n\"He tied you up?\"\n\n\"Yeah. He liked to push me over the edge. He would drive me insane, but in a good way. At least, it was good when it was over and I was remembering it later. When it's happening, it's torture.\"\n\nI stroked my cock a little faster. \n\n\"Do you -- \" I swallowed hard, summoning up my courage. \"Do you get into these types of things?\"\n\nCassie giggled. \"What types of things?\"\n\nWhat the hell. We were sitting on the couch together, both naked and masturbating. I could see her glistening slit clearly. My wife was now pushing her fingers into the frantic young brunette, her mouth locked onto the poor girl's hypersensitive vulva. I paused for a second, frowning as I watched my wife aggressively perform cunnilingus on the thrashing, pleading girl.\n\n\"Let's walk through the list. Do you like women?\"\n\nCassie's eyes darted left, then right. \"Is that a serious question?\"\n\n\"Truth or dare time, and I want truth.\"\n\nCassie hesitated for a moment. \"Nothing leaves this room?\"\n",
        "\"I'm a vault.\"\n\nMy petite friend smiled knowingly as she played with herself. \"Yeah,\" she said. \"I've never admitted it to anyone, though. But not romantically. I like men that way, but I fantasize about sex with both.\"\n\n\"No one knows? So you've never done it with another woman?\"\n\nCassie released her vulva and moved both hands up to play with her nipples. On the TV screen, Angela was now sitting on her escort's waist, slapping the young woman's breasts and reaching behind her to finger her babbling hostage's exposed pussy. Her partner tonight had a pleasantly high-pitched voice.\n\n\"I didn't say that,\" Cassie answered with a suppressed smile.\n\nI laughed.\n\nCassie pondered her thoughts for a moment. \"In college we would have parties, and one time I ended up in a bedroom with a woman. She was a cute little redhead, smaller than me even, but she had a great figure. I don't have big breasts so I fantasize about them a lot.\"\n\n\"You have great breasts,\" I said. \"I adore your breasts. But back to the subject. What did you do with this cute little redhead?\"\n\n\"Not enough. We kissed, we got naked, I played with her breasts a lot. We started to finger each other, but then someone knocked on the door and we panicked. Nothing like ... like that.\" She nodded to the screen, then turned to me with an impish smile. \"I pretended to be drunk so I'd have an excuse, but I wasn't drunk.\"\n\nI chuckled. \"You little sneak.\"\n\nCassie's long nipples were so impressive. She lay back, her eyes closed, gently twisting them back and forth as she reminisced. \"The girl talked to me the next day, and she said she couldn't remember anything, but had some recollection of making out with me. So I pretended not to remember, either. But I remembered it all, every moment, because I was stone cold sober.\"\n\n\"Would you do more now? Would you go further with a woman?\"\n\nShe giggled and opened her eyes, and we made long eye contact. Her eyes were beautiful. \"Yeah,\" she said quietly. \"I fantasize about it all the time.\"\n\n\"Why don't you? You're single and there are all sorts of ways to hook up with people in this day and age.\" \n\nShe looked down between her legs, running her fingers gently up and down her glistening slit. \"I don't even know how to start,\" she said. \"I'm not going to put my picture on a web site. And I'm not going to go to a lesbian club. The bottom line is that I like men in the long run. I just really, really want to play with a woman. And I don't know how to make it happen.\"\n\nOn the screen, Angela questioned her little guest, \"Had enough?\" \n\n\"Yes! Yes! Please stop!\"\n\n\"Will you lick me as much as I want?\"\n\n\"Yes! Anything!\" I wasn't sure why the slender brunette's voice was such a turn-on, but it was.\n\nAngela's mouth curled into a strangely elated smile, so unfamiliar to me that it was almost as if she was a different person. Cassie and I both had the same realization as her demeanor changed from aggression to one of anticipatory delight. \"I really don't think Angela is a secret lesbian,\" Cassie said, watching the scene and gently teasing herself. \"I think she's just having fun. Kind of like what I want. Both with women and with kinky stuff.\"\n\nI nodded as Angela stood and took a deep breath, gazing down upon her quarry and tracing a finger along the curve of her pale breasts. \"Truth time again,\" I asked Cassie. \"Do you like the kinky stuff?\"\n\n\"Of course. Everyone likes kinky stuff.\"\n\n\"What do you like?\"\n\nShe looked me up and down, her gaze lingering on the cock that I was rubbing. \"Well, aren't you bold,\" she said, mirth on her lips.\n\nOn the screen, Angela was untying the slender young woman and leading her to the bed. The brunette lay on her back and Angela climbed onto her in a 69 position, her large breasts swaying beneath her.\n\n\"I've decided to stop holding back. And anyway, I've been telling you my fantasies.\"\n\n\"Good point.\" She looked at the wall behind me, her eyes unfocused as she retreated into her mind. She took a deep breath. \"I can't believe that I'm going to say this. I've never said this to anyone.\"\n\nI was trying to hold off on an orgasm. I didn't want to break the moment. I slowed down my hand on my cock as she intensified the efforts on her nipples. I looked straight into her vulva, so soft and inviting with its thick, puffy lips. I wondered what they would feel like if I was pushing inside them.\n\n\"I have a bunch of fantasies that I like,\" she said shyly. \"One of my top ones is about being a high-class call girl. I go to people's houses and I perform for them.\"\n\n\"Perform?\"\n\nCassie's left hand dropped between her legs, and her fingers started stroking. \n\n\"Kind of like Angela's dates are doing. Sometimes it's a single man, sometimes a single woman. Sometimes it's a party and I'm up on a table or a bar. But most of the time it's just me and a husband and wife.\"\n\n\"So a threesome.\"\n\nOn the screen, Angela was still in the 69 position, but she had pulled the brunette's legs up and pinned them under her armpits, jackknifing the girl. She was feverishly working the girl's vulnerable nether regions with tongue and fingers, and appeared to be getting the same treatment herself.\n\nCassie nodded blissfully as she played with herself, watching Angela out of the corner of her eye as she stroked. \"I service both of them. I give them oral, and I let the man fuck me while the woman sits on my face. They spread my legs, each one sitting on one of my thighs to hold me apart, and they play with me until I scream.\"\n\nMy breathing was accelerating. On the screen, Angela was now cumming, her back arched and head up as the slim brunette licked her from below. \"Then what?\"\n\nCassie's voice was getting quieter with every sentence. \"It depends. Sometimes the two of us gang up on the husband and drive him insane. We tie him to the bed and tease him. Sometimes we gang up on the wife and do the same thing. She's always got big breasts and I love playing with them. And sometimes...\"\n\nMy eyebrows rose. Her hand was moving faster.\n\n\"Sometimes they gang up on me. They tie me to the bed face down, and the wife starts playing with me. Lubing me up in the back, which terrifies me. Then she lies down so that my face is between her legs and I have to eat her out. Her husband...he, uh, gets behind me. Then he starts using me anally until I make the wife cum.\"\n\n\"Oh, my god.\" I was stroking myself faster now, as was she. \"You're into anal?\"\n\n\"I've never done it. I want to try it, but it scares me to death. And yet I'm fascinated by it. I want to be used, just a tool for their pleasure. When I finally make them cum I'm so turned on that I'm practically delirious. And then they double up on me again and make me cum over and over and over.\"\n\nOn the screen, Angela and the brunette were now lying side by side, gently stroking each other's vulvas and kissing in afterplay.\n\n\"What type of woman do you like?\"\n\nCassie was briskly rubbing herself. I was starting to learn her signs of impending orgasm, such as the little wrinkle that showed up between her eyebrows. She began to shudder, and I was getting close myself.\n\n\"Can I tell you a secret?\" she panted.\n\n\"Sure.\"\n\nHer fingers became a blur and her back began to arch.\n\n\"The threesome is with you and Angela.\"\n\nI spurted out cum like I never had before.\n\n****\n\nBeep-beep-bop--- \n\nNope. That wasn't the tone. Cassie rewound the recording, we listened, and I dialed my phone again.\n\nBeep-bip-bop-boop-beep -- \n\nNope. We repeated the process.\n\nIt took several more tries to get the ten digits right, and I was scared to death when it finally matched. The phone rang and I handed it quickly to Cassie.\n\n\"The things I do for you,\" she said with a nervous smile.\n\n\"I think this is going to be a win-win,\" I replied, but I was nervous too.\n\nA smooth female voice answered. \"Hello?\"\n\n\"Hi, is this Becky?\"\n\n****\n\nThe following night, I once again greeted Cassie after work as I hid inside her condo. I made some nice salads and she went into the bedroom to change. When she came out, she was wearing something completely foreign to me, a night club outfit that featured a short mini-skirt, semi-transparent top that showed her bra, and knee high leather boots. I looked her up and down. \"If you dressed like that at work, I'd pay you a lot more,\" I quipped.\n\nShe waggled her hips at me. \"After this whole thing is over, you should pay me a lot more anyway.\"\n\nWe sat down to dinner. It was starting to feel weirdly familiar, almost like sitting down to dinner with Angela back in more normal times.\n\n\"So where do we stand in our investigation?\" she asked. \"What are we hoping to learn tonight?\"\n\nI looked at her beautiful smooth face, her bright eyes blinking behind her nerdy oversized glasses, and I smiled, both at the memories of the past few days and the anticipation of what was to come. Whatever else I wanted to say about Angela's adventures, her enactment of her fantasies had inadvertently led to me realizing some of my own. I wanted our investigation to end, but then again, I didn't. \n\nI munched my salad thoughtfully. \"Well,\" I said at long last, \"we know that she's not having an affair. At least, not a traditional one. She's just having lots of sex. We just don't know what it means.\"\n\n\"It means your wife is an insatiable horncat,\" Cassie grinned, and it made me laugh. \"So are you going to confront her?\"\n\nI rubbed a hand up my forehead and through my hair. \"I guess I have to. But I'm not sure how.\"\n\n\"You'll figure it out. Tonight will help, I hope.\"\n\nA wave of sadness swept over me. \"Whatever her reasons, though, it seems clear that she doesn't want me involved in her sex life. And I don't understand it. I've always treated her well. I've always tried to be a good husband.\"\n\nThere wasn't much Cassie could say to refute or comfort me, so she sat silently, a sympathetic expression on her face.\n\n\"I don't even know what to do,\" I said at long last. \"It's not like our marriage has been unhappy. We don't argue. We're affectionate. Our sex life is dull, but it exists and it's ... nice. I guess I could just let her keep doing what she's doing and look the other way, and maybe I could even do the same thing now that I know. It's not like I've been satisfied with our sex life. But that doesn't seem right.\"\n\n\"I don't think you can't keep this a secret, Tom. You have to talk to her.\"\n\n\"But is the marriage over at that point? It seems like it should be, but as weird as it sounds, I don't want it to be. I want to be ...\" I nodded toward the blank big screen TV, \"I want to be part of THAT. I want us to be open and honest and I want to be in the room while she's doing all of those things. And ... and frankly, I would love to have sex with other women with her blessing.\"\n\nI looked across the table at Cassie. Her doe eyes were downcast. \n\nTo hell with it. I'll say it. \"And I probably shouldn't say this, but you would be first on my list if you were interested.\"\n\nShe blushed profusely. \"You don't have to be nice. I apologize if I shared too much last night.\"\n\nI laughed genuinely. \"I've thought about it for years. Remember when I told you that I fantasized about you? It's completely true. Every single day that we've worked together for the past 12 years, I've looked at you and wondered what you would be like in bed.\"\n\nShe scrunched her face in suspicion. \"No, you haven't. Why would you fantasize about me when you've got D-cup Angela with the blonde hair at home?\"\n\n\"If you only knew the thoughts I've had about you,\" I said, then hesitated a moment. \"It's confession time. Do you remember the year at the Christmas party when you wore that silver dress? The ones with the sequins?\"\n\n\"You remember that dress?\"\n\nI snorted. \"You in that dress may be the sexiest thing I've ever seen in my life. My god. If you had any idea about how often I've fantasized about you in that dress...\"\n\n\"The silver sequined dress? The cocktail dress?\" She seemed incredulous, and I could see her mind rewinding to that night. \"That was at least seven or eight years ago.\"\n\nI nodded. \"You were so beautiful that night. You were a vision.\" I closed my eyes and remembered the scene that was so locked into my memory. \"Your hair was swept up in some beautiful type of updo that made you look like a princess, and you had ruby and diamond earrings that I had created. It made me so proud that you wore them. Your neckline was low enough that your cleavage moved in it when you walked, just barely moved, but enough that it would catch my eye every time I saw you. You wore an eye shadow that was gold with some type of glint in it. You smiled at me from across the room, and we had a very formal dance where I kept a hand's width between us. But inside I was torn on whether I would rather bend you over the buffet table and fuck your brains out, or just drive off into the night with you and start a whole new life.\"\n\nI opened my eyes. Her mouth was agape and she was staring at me. Her eyebrows turned up in an empathetic gesture. \"Tom, I never had any idea.\"\n\n\"How could you not know? My pupils dilate every time you walk into the room.\"\n\nShe shook her head. \"I had no idea. You've always been so professional to me, so polite and courteous, that I never dreamed that you had any interest.\"\n\nThe tension was building, and I needed to break it. I winked at her. \"And that whole time, you were lusting after my wife.\"\n\nShe laughed, her perfect teeth glinting in the light. \"Not just your wife, remember. I wanted the full threesome.\"\n\nWe both laughed, but it was a careful laugh. We had breached a critical wall and there was no going back.\n\n\"So what now?\" she asked. \"What are we doing here?\"\n\n\"I feel like I need to give my marriage every chance of surviving, but I have to ask. You and me ... if I asked you tonight...?\"\n\nCassie threw her head back in laughter. \"Tom, I've masturbated in front of you! Of course the answer would be yes! I've lusted after you for years. But at the same time I appreciate your loyalty to your marriage and I always thought the world of Angela. I would never do anything to come between you two if you think there's something to be salvaged. But if not,\" she locked eyes with me for a brief second, and we both felt the chemistry. \"If not, or if you can ever convince her of that threesome, you know where I live.\"\n\nI wanted to kiss her. It wasn't even about sex or romance. She was just a wonderful person. I started to speak, but suddenly the doorbell rang.\n\nWe both froze. Cassie's eyes shone with nervousness. \"Oh, god,\" she said. \"Oh god oh god oh god oh god. Are we really going to do this?\"\n\n\"Are you sure you're okay with this?\"\n\n\"I'm scared to death. But I also can't wait.\"\n\n\"Well, I'll tell you this. You're the best damn Chief Operations Officer that an employer could ever have.\"\n\nI stood up and went to the entry, which was around a corner from the dining area. Out of Cassie's sight, I opened the front door, and there she was. \n\nIt was her.\n\nThe redhead who'd started this whole thing. \n\nShe was well-dressed and sophisticated looking, even though she looked even younger than I remembered. We were betting it would be her based on the very specific and strategized request we'd made, but there was no way to confirm until this moment. My heart leapt into my throat.\n\nShe looked me up and down. \"Is this Cassie's house?\" she asked. She had a calming, low-timbre voice.\n\nI froze up, but somehow managed a short nod. I extended a hand that probably was stupidly awkward but she seemed nonplussed by it, shaking it perfunctorily. She looked past me into the empty living room. \"You know I only work with women, right?\"\n\nI nodded, and my voice and breath began to return. \"Yes, yes, of course. And your name is...?\"\n\n\"Kara.\" She looked at me unblinkingly. \"Are you going to invite me in?\"\n\nAt that moment, Cassie walked around the corner from the dining room. She looked so small, so vulnerable, that I immediately felt a pang of guilt for dragging her into all of this. But then again, this was her fantasy, and it was my gift to her as well as her favor to me.\n\nKara the Redhead looked her up and down, and her eyebrows rose in approval. \"Well, hello, honey,\" she said, and entered the living room.\n\nFor a brief second, I thought Cassie was going to run. She just stared, her big brown eyes so wide that they showed an outline of white. But then, ever so slowly, a smile began to appear on her face.\n\n\"Well, hello yourself,\" she said. \"Please come in.\"\n\n****\n\nKara was a bombshell, a classic femme fatale. She was wearing a very stylish mini-dress, sexy but not slutty, and an oversized handbag bounced at her side. Underneath, it was clear that she had perfect succulent breasts and a gorgeous feminine ass that swayed as she headed toward the couch. Her hair was a beautiful copper, long with a very slight curl that gave it fullness.\n\nCassie and I were both hypnotized by her, and I was the first to break out. \"Would you like a glass of wine?\" I asked.\n\n\"Please.\"\n\nI hustled to the kitchen, not wanting to miss a second. Kara and Cassie sat down on the couch together, turning to face toward each other, and I once again hoped that I hadn't pushed my friendship with Cassie too far. I hurriedly found a bottle of wine, an opener, and some glasses, slightly chagrined that I now knew where everything was stored, and poured us three glasses. I carried them into the living room with only a slight clink, and the two women each accepted a glass. I sat down in a chair facing them.\n\nKara took a long sip and nodded approvingly. \"So,\" she said, \"what's on the agenda tonight?\"\n\nCassie seemed too starstruck to speak, so I stepped up. \"Cassie is a friend of mine. She's always had a fantasy of being with another woman, so I decided to give her something special.\"\n\n\"A friend?\"\n\n\"Yeah. A friend.\"\n\nKara's eyes moved from me to Cassie and back. \n\n\"We just watch porn together,\" Cassie said abruptly, and neither of us could suppress a smile. \n\nKara looked bemused, but shrugged it off. She turned to Cassie. \"And you specifically requested a busty young redhead with long hair. Will I fit the bill?\" She did a spokesmodel move with her hands to draw attention to her body.\n\nCassie stared at Kara's breasts for an uncomfortably long time. She nodded and swallowed hard. \"Yes. Definitely.\"\n\n\"Excellent. And it's just you and me, per my policy. Is the gentleman watching or will he wait out here?\"\n\nThe question surprised Cassie, and she looked at me. I grinned devilishly. \"I'll be watching,\" I said.\n\nShe gave me a playfully baleful stare, and I saw her knees press together.\n\n\"In that case, the gentleman will put this on,\" Kara said. Reaching into her bag, she pulled out a small item.\n\nCurious, I let her hand it to me. \"What is it?\"\n\n\"It's a device to ensure that you don't attempt to become involved,\" Kara explained.\n\nI turned it over in my hand. It was made of stainless steel, a tube and a ring, with a four-digit combination lock on it. I pondered it for a moment before it struck me. \"You want me to put this on?\" I asked incredulously.\n\n\"It's my requirement.\" \n\nI was starting to get the impression that Kara really didn't trust men. \"I'll promise to stay away,\" I said. \"You don't have to worry about me.\"\n\n\"It's my requirement. Put it on or I go. Or if you wish, you can go.\"\n\nWe couldn't have her go. That would destroy the plan. And there was no way that I wasn't going to watch. \"How do I get it off?\"\n\nKara smiled. \"You can guess the combination. On average, it takes about three hours. If you don't get it right by midnight, I'll text it to you.\"\n\nI held the chastity device in my hand. Could I really do this? Sighing, I stood up. \"I'll be back in a minute.\"\n\n\"No, put it on here where I can see it and check it. We're going to be naked, so you can get naked, too.\"",
        "To hell with it. I paused only a moment, then kicked off my shoes and removed my shirt. Cassie had already seen me naked plenty, and Kara had apparently had sex with my wife. Within a minute I stood in front of the two women naked.\n\n\"Put it on quickly before you get hard,\" Kara advised, her eyes scanning my cock and balls with amusement.\n\nI'd never done anything like this before, so it took a little maneuvering to figure out. Kara coached me. \"Put that ring behind your cock and balls,\" she coached. \"Now latch it and start clicking the ratchet tighter. Tighter. One more click. Now close the two halves of the tube onto your penis.\"\n\n\"I don't think there's room.\"\n\n\"You can do it.\" \n\nThe ring behind my cock and balls left my cock sitting between two halves of a hinged tube. With effort and care, I clicked it closed, and the result was that my penis was encased in a small but solid metal tube. I could feel the pressure all around my circumference.\n\n\"I don't know. It feels really tight. How can I loosen it up a little?\"\n\nKara chuckled. \"Baby, you're in it to stay. If you want out, I'd advise you to start trying combinations. It's going to get really uncomfortable when your friend here starts having orgasms.\"\n\nI was chilled to realize that I was only half hard. This thing was going to be painful if I got fully engorged. I looked down and saw a four-digit combination lock on the top ridge of my encased penis. Each digit went from one to five. Let's see, five times five times five times five. This could take a while. I gingerly entered 1-1-1-1 and tried to open it, noting the irony that I had to grip my enclosed penis to enter the numbers. No luck. I looked at Cassie with concern, but she just giggled.\n\nKara laughed and turned to Cassie. \"So now that he's got something to do tonight, tell me a little about yourself,\" she inquired. \"How do you want to play?\"\n\nCassie tried to suppress a smile, and subconsciously smoothed her skirt on her thighs. \"I've never...um...never been with a woman before, but I've always fantasized about it.\"\n\n\"Never?\"\n\n\"I did some heavy petting once, but that's it.\"\n\nThe redhead smirked slightly. \"I can show you how it's done. Now, what's your fantasy? Romantic or kinky?\"\n\nCassie blushed, glancing at me. \"Both, I guess. But tonight I'd probably rather start easy. I'm new at this, so you'd need to take the lead.\"\n\nI watched while trying the next combination. 1-1-1-2. Nope.\n\nKara nodded. \"I can do that. Why don't you start by climbing on my lap and giving me a kiss?\"\n\nCassie bit her lip as she pondered the point of no return. She avoided eye contact with me and stood up, moving the few feet to Kara. Straddling Kara's legs, she sat on her lap and leaned in, their bodies close.\n\nI felt my cock harden as their lips met. Ouch. I shifted uncomfortably. 1-1-1-3. Nope.\n\nCassie had her arms high around Kara's shoulders, while the redhead embraced Cassie's waist. They kissed long and slowly, tasting each other as I watched. When they finally separated, Kara looked Cassie up and down. \"Strip for me,\" she ordered. \"But leave the boots on.\"\n\nCassie took a deep breath and stood up. Casting me a \"here we go\" glance, she pulled her top over her head, then removed her bra. I had always been rather covert about checking her out, but this was at last my chance to stare. I adored her smallish but pert breasts with their long erect nipples.\n\nShe then slid her skirt over her hips, and she wasn't wearing underwear. Her cleft was noticeable, and Kara was right -- leaving the boots on was sexy. Cassie gave Kara a modeling pose, and I drank in her nudity from my vantage post, ogling her petite but round ass. My hand continued working: 1-1-1-4. Nope.\n\nKara was still sitting on the couch. \"Come closer,\" she said. As Cassie stepped in close, Kara put a hand on Cassie's hip and then slid one hand between her legs, which made Cassie gasp. \"Oh, yeah, you're ready,\" she said. \"Take off the boots and let's go to the bedroom.\"\n\nKara was a few inches taller than Cassie, and she gripped Cassie on the back of the neck as they began walking. It was clearly a symbol of dominance, I noted as I stood to follow, and it turned me on immensely, to my great discomfort. Kara glanced back at me. \"You,\" she said dismissively. \"Bring my bag.\"\n\nI looked to the couch and saw her large purse. Picking it up, it was heavier than I expected but not ridiculously so. I followed as the redhead led my naked friend into the bedroom, which I'd never seen before. To my surprise, it was a feminine paradise of pink and lace, not at all like the edgy d\u00e9cor of the living area. Once inside, Kara released Cassie and took the bag from me. It was the closest I'd been to her, and up close her sexuality was overwhelming -- full, soft lips, sexy bedroom eyes, and a feminine shape that could change a woman's sexuality or cause a man to explode. It almost made me lose track of my combination. 1-1-2-1. Nope. I continued to work through the possible combinations in a logical order.\n\n\"Okay, your friend here can watch,\" she said, scanning the room, \"but he has to stay put. I don't want him coming over and interfering with us. So we're going to use a little protection.\" She pulled out a pair of handcuffs and looked around the room. \"Handcuff his wrist to that closet door.\"\n\n\"There's no need to do that,\" I said. \"I'm just watching.\"\n\n\"That's what they all say. Do it,\" Kara said. She handed the handcuffs to nude Cassie.\n\nI must admit, my willingness to be handcuffed to a doorknob went up as she walked over. Completely nude, her smallish breasts bounced slightly and I couldn't take my eyes off of the shaved mound between her legs. She stopped in front of me and smiled up, less than a foot of space between us. \"Give me your hand,\" she smiled shyly, looking up into my eyes.\n\nFor the past two decades, I had only seen sexuality in the blue eyes of Angela. Cassie's brown eyes, alight with delight and anticipation, mesmerized me. Mindlessly, I held up my hand. And with a pair of clicks, I found myself handcuffed to the doorknob, my left hand in one cuff while the other cuff was locked around the narrow part of the knob. Cassie kindly pushed a chair my way and I sat down. 1-1-2-4. Nope.\n\nCassie returned to the bed, where the taller redhead placed a hand on her chest and gently bade her to sit down. As Cassie watched, her eyes alight in pleasure, Kara stripped for her, removing her shoes and dress while turning slightly to also charitably allow me a view. She wore nothing underneath, and I stared agog at her nice full breasts, topped with ultra-pale and large areolae, and her trimmed rectangle of bright red pubic hair.\n\n\"Can I touch?\" Cassie asked. Kara nodded and stepped forward, and with fascination Cassie gently touched, then kneaded, Kara's large breasts. This went on for a few minutes before she turned her attention south. I enjoyed watching her face as she gingerly explored Kara's private region, spreading the redhead's lower lips and running her fingers along the vulva. She was clearly fascinated and excited by the sight.\n\nKara closed her eyes and allowed Cassie to play for several minutes, licking her lips in pleasure as Cassie played. Cassie stroked Kara's large breasts and played with her nipples, then alternately explored between Kara's legs, gently spreading her lips and stroking Kara's slit as she leaned in close. Finally, Kara opened her eyes and looked down at my friend.\n\n\"I want you to make me cum,\" she said. Climbing onto the bed, she lay down with her left side facing me, then motioned for Cassie to position herself between her legs. As Cassie maneuvered, Kara spread her legs wide to allow access.\n\n1-1-3-4.\n\n1-1-3-5.\n\nDammit! My cock was desperately trying to get hard, but was constrained by the chastity device. It was painful in an oddly pleasurable way, but painful nonetheless. If I could get it out, there was no question that I would be stroking myself.\n\nCassie played with Kara's pussy as she sat between her legs. Kara's breasts were magnificent, standing upright from her chest the way only a young woman can muster. Her light nipples were growing hard, and she curled herself up. Grasping the back of Cassie's head, she guided the small brunette's face down between her legs.\n\nOh, my god. My heart was beating quickly. 1-1-4-1. 1-1-4-2. My fingers fumbled at the lock that imprisoned me.\n\nCassie's face was now buried between Kara's legs, and Kara lolled her head back, a smile of pleasure on her face. \"Oh, yeah, girl,\" she murmured, \"Just like that.\"\n\nCassie settled down onto her stomach, lying flat with her feet up in the air. I breathlessly watched her concentrating on her task, her eyes peering up the mound of red pubes toward Kara's stomach and breasts. Cassie's hands stroked slowly up Kara's hips and stomach, settling onto her large mounds. Kara's hands joined hers, stroking their backs as they in turn stroked her volume.\n\nFor the next several minutes, the room was silent but for the lapping of Cassie's tongue and the occasional soft sighs of pleasure from Kara. The redhead dreamily enjoyed the attention, her eyes half-closed, her hands taking up the cause of her nipples once Cassie's hands moved back down. \n\n1-2-1-2. My cock was killing me, swollen within its prison. But I wouldn't trade my place for anything.\n\nKara was a delight to behold. She was built not unlike Angela, albeit at a younger age. She had a nice round ass and it soon began flexing as Cassie did her work. Kara's breaths became deeper, the exhalations stronger, and she began working her thick nipples more strongly. Her undulations began increasing in frequency and intensity, and her breaths slowly turned into husky moans. Between her legs, slender Cassie slid a hand beneath her and Kara's eyes briefly popped open in surprise. \n\n1-2-1-5. My free hand kept working as my other hand lay helpless on the doorknob.\n\n\"Ohhhhh,\" Kara began to thrash, flexing under Cassie's face to an orgasm. Her pale skin got a rosy blush and she pushed Cassie's face deeper. \"Yes! Yes! Keep doing that!\"\n\nI'd never seen two women have sex before, and it had long been a dream. Watching Cassie service Kara to orgasm was more than I could have hoped for. Kara rode it for all it was worth, keeping Cassie burrowed into her until she had eked out every ounce of pleasure. When it was over, she pushed Cassie's face away and Cassie shyly rose up.\n\n\"That was your first time?\" Kara panted. \"You're talented.\"\n\nCassie nodded with a self-satisfied smile. She cast me a quick glance full of meaning. \"I've practiced in my mind a thousand times,\" she said.\n\n\"It your turn now.\" As if some unseen signal had flashed, Kara took over. Rising up, she lay a palm on Cassie's chest and slowly pushed her flat onto the bed. Kara climbed atop her, twining her legs around Cassie's to force them apart, and they kissed and fondled for a few minutes before Kara's hand worked down between Cassie's legs. Their angle gave me a great view of Cassie's exposed pussy, and I feasted on it as Kara's hands explored.\n\nMy cock was about to burst out of its shell. 1-2-2-2. Dammit, open!\n\nMy little brunette gasped, but did nothing to deny access. Her slim thighs began quivering with each stroke of Kara's fingers, and within minutes she was squirming with an impending orgasm. That's when the amateur Cassie was schooled by her professional partner.\n\nKara began teasing her mercilessly, taking her to the edge and back several times, not allowing her to cum. Each time Cassie's breathing indicated an impending orgasm, Kara would ratchet it back, pulling her off the ledge. Cassie's hips were thrusting in vain as she pleaded, \"Don't stop. I'm so close.\"\n\n\"Do you want to cum?\" Kara murmured, leaning in to bit Cassie's ear.\n\n\"Oh, please. Please. I'm so close.\" Cassie's voice was strained, breathless.\n\n\"Tell me how much you want it.\"\n\nCassie's hips undulated. \"I want it. I want it!\"\n\nKara's hand left Cassie's bare mound and slit, and began stroking her thighs and lower stomach. \"I don't think you're ready.\"\n\nCassie moaned in protest, pulling Kara close and burying her face in Kara's neck and long hair. Kara ran a finger up Cassie's slit, and I could see its dampness.\n\n\"Are you sure you're ready?\"\n\n\"Yes! I'm ready!\" Cassie's body was a wave now, moving in an ancient rhythm of pleasure.\n\nKara began slowly moving down Cassie's body, kissing her lips, then her throat, then her chest. She lightly clamped her teeth on Cassie's nipples, pulling them out one at a time, then traced a tongue path down to her belly button and then lower. Now the tables had reversed, Kara's beautiful red mane falling down onto Cassie's hips and belly as she locked onto Cassie's clitoris with her lips and tongue. And from there she continued the teasing, again and again forcing Cassie to the edge and back. Finally, rising up for a second, she looked up into Cassie's half-glazed eyes and smiled. \"I think you've earned it now,\" before diving back down.\n\nI've never seen a woman cum so hard.\n\nKara was a master of her art, apparently. Cassie kicked and writhed and mewed for minutes as Kara plied her tried, and when it was over, Cassie was a quivering mess and I was still desperately trying to unleash my cock from the sheath that was killing me. Kara sat up between Cassie's legs in satisfaction. She gave me a knowing smile, looked back at Cassie, and said, \"We've still got time. I think you deserve another one.\"\n\nAnd from there it wasn't a fair fight. Kara was a professional at this, experienced and cool. Cassie was a rookie, inexperienced and excited. Kara pulled her bag onto the bed and removed a number of toys -- vibrators, dildos, clamps, and other assorted goodies. She then proceeded to use them all on Cassie over the next hour, teasing her, stimulating her, and making her cum over and over again. When Kara positioned Cassie on her knees and penetrated her from behind with a large strap-on dildo, I thought my slender friend was going to pass out. My little brunette was a fighter, gamely attempting to keep up, but in the end, she lay quivering on the bed, exclaiming \"Done! Done!\" as Kara worked one final orgasm out of her. \n\n\"One more?\"\n\n\"Done! No more!\" Cassie was slumped on the bed, head down, ass up, her hair a mess and her body aglow with sweat. \n\n\"We've still got 20 minutes left.\" She reached down and stroked Cassie's exposed vulva, making the young woman flinch.\n\nI decided to step in. \"Actually, I think the girl has had enough.\"\n\nKara slowly stroked up and down Cassie's slit, and the slim brunette actually smiled a bit through her orgasmic haze. \"I'd like a glass of wine at this point, I think,\" Cassie said. \"I need to relax.\"\n\nKara laughed. \"That sounds good to me, too.\" Climbing off the bed, she gave me a good look at her full frontal nudity, then fished around in her bag. \"How'd you like the show?\" she asked, tossing me the handcuff key. Her work done, she seemed more relaxed and friendly now.\n\n\"My penis is trying to give it a standing ovation,\" I said, gesturing at my chastity device. \"Got the combination to this thing?\" I put the key into the handcuffs and released myself from the doorknob.\n\n\"Actually, I don't. They set it at the office and it doesn't come off until I leave unless you're a really lucky guesser. If you can't get it off by midnight, I'll text it to you. Keep trying.\"\n\n\"Dammit.\"\n\nThe three of us walked back into the living room, all naked but for my chastity device. When Kara wasn't looking, Cassie stole a glance in my direction and I nodded.\n\nCassie poured and handed out wine glasses as we sat on bar stools at her kitchen island. Kara began getting dressed as she drank. \"Can I ask you a question, Kara?\"\n\n\"Sure, darling.\"\n\n\"Do you usually work with couples or single women or something else?\"\n\nKara shrugged. \"It's everybody. I'll play with any woman who wants to get her rocks off.\" She looked Cassie up and down. \"It' more fun when they're cute like you.\"\n\n\"But I'm curious. Do you work with single women or married women?\"\n\n\"Why are you asking?\" Kara put her bra into place, depriving me of my wonderful breast view.\n\n\"I have a friend who's married. She's curious about women but doesn't want her husband to find out. Would you work with a woman like her?\"\n\nKara slid a tiny pair of panties up her legs and over her hips. I guess she wore underwear when her shift was over. 1-4-1-2. I was continuing to work combinations with no luck, but at least my wannabe erection was subsiding.\n\n\"I have several regular clients in that situation,\" Kara said. \"I'd be glad to talk to her.\"\n\n\"Several? That's great.\" Cassie nodded, then turned to me thoughtfully. \"Why do you suppose a woman would do that?\"\n\n\"Do what?\"\n\n\"Go behind her husband's back. It seems like most husbands would love to see their wife with another woman.\"\n\nKara picked up her dress and pulled it over head, shimmying it down over her body. \"There are all sorts of reasons,\" she said. \"The husband might be jealous, or he might freak out if she likes women. Sometimes she knows that he'll want to join in and she wants to keep it at just the two of us. Sometimes the husband just isn't any good in bed.\"\n\nI winced. \"What's the most common reason?\" I asked.\n\nKara was running her fingers through her hair, smoothing it down. \"It's not like I have a lot of those clients,\" she said, \"but I don't think there's a pattern. Sometimes they're afraid to tell their husbands what they want. Sometimes they want something different that's just theirs, not involving the husband. Sometimes it's a bad marriage, sometimes it's a good marriage where the wife just wants a little more fun.\" She shrugged as she slipped her shoes on. \"Every woman is different. Tell your friend to give me a call. And text me if you don't have your cock loose by midnight.\"\n\nI opened a kitchen drawer where we had stashed our payment, and handed it to her. She put it in her bag without counting it. \"It's been fun,\" she said. \"Give me a call again sometime. Will you walk me to the door, sweetie?\"\n\nI watched the two women walk to the door, Cassie still completely nude and Kara now dressed for the street. The two women chatted at the door briefly, then embraced in a hug. \n\nIt was a rather long hug, I observed. Arms wrapped around each other, they appeared to be speaking, Cassie leaning back slightly so they could be face to face. \n\nAnd then they kissed.\n\nI think I'd see that before.\n\n****\n\n\"I can't believe you're still wearing that thing.\" Cassie sat down on the couch beside me, naked and gorgeous. She peered at the chastity device with interest.\n\n3-2-4-1.\n\n\"I'm over halfway through the combinations,\" I said. \"I've got to be getting close.\"\n\n\"Well, hurry. I don't want to masturbate by myself if tonight's video is good.\"\n\n\"Believe me, no one wants this thing off more than me.\" 3-2-4-2. I looked at her, not bothering to hide my leer. \"So how was your first girl-girl experience?\"\n\nCassie's grin was sincere and dazzling. \"Oh, my god. You have no idea how long I've wanted to do something like that. Thank you so much for making it happen!\"\n\n\"It looked like she was wearing you out.\"\n\n\"You have no idea. She was fantastic. She knew how to do ... everything.\"\n\nI grinned. 3-2-4-3. \"Was it the best sex you ever had?\"\n\nShe thought for a moment, tucking her hair back behind her ear and bringing her legs up to hug them. \"It's not like we were in love or anything,\" she said at last. \"But from a pure fuck standpoint, it would be hard to beat. And the weird thing is that now I'm hornier than ever. It's like she fed my libido instead of exhausting it.\"\n\nI guffawed at her embarrassment, and she had to smile with me. \"She was beautiful,\" she said in her own defense. \"And she was good at figuring out what I liked.\"\n\n\"She was skilled at her craft,\" I summarized.",
        "\"Precisely.\"\n\nI kept fiddling with the chastity device. 3-2-4-4. Cassie watched with interest. \"How does that feel?\"\n\n\"It's driving me crazy.\"\n\n\"How?\"\n\n3-2-4-5. \"It's tight even when I'm not hard, but when I start to get hard it gets really constrictive. And then that just makes me harder.\"\n\nShe watched me for a couple of minutes as I mechanically worked, one hand on my balls and the other twirling the small combination locks on the shaft.\n\n\"Is it constrictive now?\"\n\n\"A little.\"\n\nCassie chewed her lip for a moment, then smiled devilishly. \"Have I ever given you a good look at my pussy?\" she said.\n\nI looked at her quizzically. \"What?\"\n\nThe smile was still on her face. She spun on the couch so that she was facing me, then spread her legs wide. She brought her fingers down to her vulva and pulled her lips apart. \"Look how soft I am.\"\n\n\"Oh, god.\" My cock was suddenly large and painfully constricted.\n\nCassie ran a finger across her slit, pulling up slightly so that her clitoris stood out. \"Do you like this?\" She was nearly laughing at her own joke. \"Can you imagine being inside me?\"\n\n\"Stop that!\" I admonished playfully, still clicking through combinations. She laughed and mercifully put her knees together.\n\n\"Well,\" she said after a pause, \"we had three goals for this little encounter tonight. Let's walk through them.\"\n\n\"Please do.\" The vision of her was going to be imbedded in my head forever. My cock ached with desire.\n\nShe twisted her lips in thought. \"First, I wanted to have sex with another woman. A beautiful woman. We can go ahead and call that a win.\" Her hand subconsciously lowered to touch her mound, sliding into the crease between her hip and leg, and her smile was adorable.\n\n\"That's a definite win.\"\n\n\"Second, you wanted to see some girl-girl sex. Did we accomplish that?\"\n\n\"Baby, if I could get out of this thing, I'd show you proof. That was probably the hottest thing I've ever seen.\"\n\nCassie grinned and winked at me, then got more serious. \"The third thing is that we were hoping to get some insights from Kara about Angela, and why she's doing what she's doing.\"\n\nI shrugged, disappointed. \"We tried. It was hard to ask anything concrete if she has a bunch of married clients.\"\n\n\"There was no way to hone in on Angela.\"\n\n\"No way at all.\"\n\n\"So what does this mean for our investigation?\"\n\n\"I think it means that I'm getting tired of trying to figure out why. I think it's time to just shut this thing down and go talk to her.\"\n\n\"You're probably right.\"\n\nI looked at the blank TV. It was depressing to watch Angela with other women, but it was also exciting. A part of me knew it had to end, and a part of me was perversely enjoying the ride. If it stopped, I would never see Cassie naked again, never see her masturbate or have sex with another woman again. For that matter, I would never see Angela have sex with another woman again. Was that really what I wanted? My cock again painfully pushed against its prison. I tried yet another combination, the next in the interminable series.\n\n\"Let's watch tonight and it'll probably be our last time.\"\n\nCassie turned on the TV and we began clicking through files on my computer. The damn dogs were still sleeping on the bed, but we skipped those and caught Angela coming home from work. To my simultaneous disappointment and excitement, she brought her phone to her ear as soon as she kicked off her high heels.\n\n\"Hello, Rebecca?\"\n\n(Silence.)\n\n\"Doing well. Hey, is Kara available tonight? I'd like some girl time.\"\n\nCassie and I looked at each other. \"When was this video shot?\" Cassie asked.\n\nI looked back at the file folder. \"5:20 p.m. We'd already reserved Kara by that time.\"\n\n\"We stole her date.\"\n\n\"And now we know that Angela is a regular client of Kara's.\"\n\nOn the screen, Angela seemed disappointed. \"Oh, that's too bad. I really wanted her. Who else is available? \n\n(Silence.)\n\n\"Wait, what?\" Angela's eyes widened.\n\n(Silence.)\n\n\"Marin's back? Oh, my god, seriously? I adore Marin! When did she come back?\" Angela's grin was almost infectious. \"Can you send her over around 8:00?\"\n\nAngela hung up the phone and did a little solo dance of joy. \"Marin's back! Marin's back!\" she sang to herself in singsong tone. I hadn't seen her behave like that since our dating days when we were first having sex.\n\nThe file ended and we clicked through the dog videos to find the next one. Who was Marin, I wondered? Had we seen her before?\n\nAs it turns out, we had not yet seen Marin.\n\nAngela's date tonight was a statuesque brunette with killer legs and a great ass. She was long and lean with the build of a beach volleyball player, towering above Angela by at least five inches as the two women entered the room. She looked athletic, with a boyish haircut and attractive angular features that were still highly feminine. Angela, clad in tiny shorts and braless in a tight t-shirt, tossed herself on the bed and watched as Marin began peeling off her clothes. I exhaled in wonder and heard Cassie hmm in approval. \"Oh, my\", she said.\n\nI nodded. This Marin woman could be a supermodel. Her frame was slender and gorgeous, her smallish, pert breasts perhaps a B cup, and her crotch was clean-shaven. She was the oldest woman we'd seen yet, probably in her early thirties, and she moved with the grace of a lioness. Her naturally swaying hips made me regret my inability to remove the chastity device. 4-3-2-4. How long was this going to take?\n\n\"I can't believe you're back,\" Angela said to Marin on the video. \"How long has it been? Two years?\"\n\nCassie and I gaped at each other. \"Two years?\" I parroted. \"How long has she been doing this?\"\n\nMarin smiled seductively as she set her clothes aside. \"I thought I would get out of the business,\" she said, her voice a sultry purr. \"But I can't. It's just too much fun.\" She climbed onto the bed, her long legs moving easily, and sat back against the headboard of my bed. She spread her legs and patted the space between them. \"Now come to mama.\"\n\nAngela's smile was radiant, and she pulled the t-shirt over her head to reveal her large breasts. Flipping her shorts off to complete her nudity, she eagerly climbed to a sitting position between Marin's legs. Facing the same direction, Angela leaned back, nestling herself into the taller woman's frame, and picked up the remote. \"I missed movie night so much,\" she said.\n\nWe could tell that the television was being turned on. \"What are you in the mood for?\", Angela asked. \n\nMarin's arms were wrapped around Angela affectionately, and she leaned in to kiss Angela's neck, causing my wife to giggle coyly. \"You, my dear.\"\n\n\"Let's watch a little girl-girl action first,\" my wife said. Marin's hands came up to cup Angela's large breasts, weighing them and squeezing them as she continued nuzzling Angela's neck. But like Angela, her eyes were caught by something on the television, which was out of our camera range. The two women began watching whatever was on, though it didn't keep Marin's hands from roaming all over nude Angela. One hand slid down between Angela's legs, the long fingers slowly stroking her slit.\n\nThere was something incredibly sexy about watching Angela nestled within the shield of this taller women, being stroked as the two women watched their porn. My hands were not idle, though: 4-5-1-1, and the chastity lock continued to defy me. \"Damn, this thing is killing me,\" I said.\n\nBeside me, Cassie grinned as she began stroking her own slit. \"I can't believe you haven't gotten that thing off yet.\"\n\n\"I've got to be getting close. There are four tumblers with five numbers each. That's five times five times five times five combinations, or 625 choices. I'm well over halfway now, so it's got to be happening soon. It's overdue.\"\n\n\"Well, if you don't mind, I'll start without you,\" Cassie said. She teasingly spread her legs for me and shifted sideways on the couch, letting me look straight into her vulva again as she ran a finger over her slit and pushed a finger inside herself. She grinned at me as I moaned in pain and frustration. I wanted her so bad.\n\nOn the screen, Angela was also in need. As I fiddled with combinations and Cassie diddled with herself, Angela and her friend Marin watched some sort of porn as Marin stroked and teased Angela. I could see that Angela was getting more and more excited, but Marin kept pulling her back from the edge. The leggy brunette would alternate from softly masturbating Angela to playing with her breasts to seductive licks and kisses on the back of Angela's neck and ears. My blonde wife was beginning to slowly move her hips as she built up to climax.\n\n\"Stop teasing me,\" she murmured as Marin alternated erogenous zones, her hands constantly roaming and stimulating Angela's body. \n\n\"Do you like the girls on the screen?\" Marin murmured into Angela's ear. \"Do you want me to tie you up like that?\"\n\n\"Oh, yes.\"\n\n\"Do you like being licked like that blonde? Do you like being licked while you're tied up?\"\n\n\"Yes...yes. So much.\"\n\nAngela's hips were moving, but Marin pulled away.\n\n\"No! Keep doing it!\"\n\nMarin laughed and moved her hand back, causing Angela to moan.\n\nI looked over at Cassie. \"I'm your boss, right?\"\n\nCassie's hand was stroking between her legs. She laughed uncertainly. \"Yeah, why?\"\n\n\"You're not allowed to cum until Angela cums.\"\n\nCassie looked at me, then the screen. Her eyes darted down to her fingers between her legs. \"No way. I work on my own pace.\"\n\n\"Boss's orders.\"\n\nThe corners of Cassie's mouth wavered upward. \"It could be fun, I guess.\"\n\n\"Play all you want, but no cumming until she does.\"\n\nCassie took a deep breath. \"Well, it's already been a busy night, so I guess I can wait.\" She looked at my trapped penis. \"It's not like you're going to beat me.\"\n\nThe next twenty minutes were the most erotic minutes of my life.\n\nOn the screen, Marin teased and tormented Angela as the two of them discussed the porn they were watching. Angela was writhing and moaning in need as Marin's long fingers tortured her with pleasure. To my side, Cassie cursed the dare that I had made, alternating between frigging herself and then forcing her hands away when she got too close. She would wrap her fingers in her hair, bite her knuckles, or pinch her nipples when she got too close, her thighs spreading and closing in frustration. \"Come on, dammit!\" she muttered. \"Let her cum!\"\n\nI was laughing, but still in the same boat myself. 4-5-3-2. \"Why won't this damned thing come off?\" I too was twisting in frustration.\n\nEventually, Marin grabbed the remote. \"Let's watch some guys, too,\" she said, and then continued her work. Angela shuddered with delight as Marin pinched her long nipples, pulling them away from her chest.\n\nI took the opportunity to get a closer look at Cassie. True to my word, I'd still never laid a hand on her, but it wasn't for a lack of desire. It was so sexy watching her writhe in pleasure as she denied herself release that I wasn't sure if I could keep my promise much longer. Her small breasts thrust proudly upward, topped by rock hard and long nipples. I so wanted to touch them, so wanted to wrap my lips around them and run my fingers down her taut stomach to feel her moistness down below.\n\n\"Ooh, look how they're double-penetrating her,\" Marin said, nodding to the unseen porn ahead of them. \"Have you talked your husband into that threesome yet?\"\n\nMy world stopped. What?\n\nCassie stopped too and turned her full attention to the screen.\n\n\"No,\" Angela gasped. \"I don't think I'll ever get a threesome with two guys. And I want it so bad.\"\n\n\"He won't do it?\"\n\n\"I'm afraid to ask him.\"\n\nMarin played with Angela's nipples. \"Well, it would freak some guys out. But I don't think any man would turn down a threesome with two women. Have you done it with him and another woman yet?\"\n\nAngela cringed. \"No.\"\n\nMarin's mouth dropped in shock. \"Still not? Why? You and I talked about it two years ago. He should give you your fantasy!\"\n\n\"I know. I just can't work up the courage to ask him, though.\"\n\nI stared at the screen in shock. It felt like that very first night in Baltimore, when I first discovered this whole secret life.\n\n\"You haven't even asked?\" Marin continued. \"You were going to ask him if I could join you two years ago! What happened?\" Marin's fingers continued working as she talked, curling inside Angela's opening. She looked over at our nightstand where one of our vacation pictures sat. \"He's pretty cute. I still want to double team him with you.\"\n\nCassie and I locked eyes in shock. \"She wanted a threesome with you and Marin,\" Cassie said.\n\nI couldn't even speak. I looked back at the TV and leaned closer to examine the long, lean brunette. The thought of sex with her...oh, my. \n\nAngela reached for the remote, and the background sounds of sex suddenly went away. She nestled herself deeper into Marin's embrace and sighed. \"You don't understand. Tom is so ... so ... upright. He's a boy scout. He would never understand.\"\n\nCassie guffawed. \"A boy scout! That's just what I've called you!\"\n\nI yelled at the TV in a frustration that was only half-joking. \"No! No! I'm not a boy scout! I'm a perv just like you! More so!\" I looked helpessly at Cassie. \"I want a threesome! I want bondage! I want to fuck women in the ass! I'm really and truly a sick individual!\"\n\nWe both laughed. Cassie pointed at my trapped cock. \"You're in bondage now and you apparently love it.\"\n\n\"Goddamit.\" I pressed in the next combination. \"I have to be getting close.\"\n\nMarin had both arms around Angela, reaching down to spread her lips and explore her clit. \"I bet you'd be surprised,\" she said. \"I don't know of many men who would turn down the two of us.\"\n\nAngela stroked Marin's shapely thighs. \"I came so close the other day,\" she said. \"He and I were having sex, and he asked me my fantasies.\"\n\n\"What did you say?\"\n\n\"I shut him down.\"\n\n\"Why?\"\n\n\"I don't know. It's embarrassing to talk about. I can do it with you because that's what our friendship is about. We have sex. But I'm a completely different woman around him, and that's what he expects. If he knew about all my kinks, I don't know how he'd react. And I love him so much that I don't want to risk it.\"\n\n\"It sounds like he gave you an opening to talk about it.\"\n\nAngela exhaled deeply, her eyes closed with pleasure as Marin nibbled her ear and played with her pussy. \"It gets worse.\"\n\n\"Worse?\"\n\n\"He told me his fantasy.\"\n\n\"Which was...?\"\n\n\"He wanted to watch me have sex with another woman.\"\n\nCassie peered over at me. I shrugged. \"Well, it's true.\"\n\nAngela's conversation with Marin was almost like something a woman would have with her hairdresser, though the hairdresser usually wasn't masturbating the customer. \"What did you say?\" Marin asked.\n\n\"I froze up. It was my opening. I almost fessed up the whole thing right there, the whole three years of these ... these dalliances. The words were right there on my tongue. I'd love to do a threesome with him and you. Love it! But how would I explain knowing you? Or for that matter, knowing Kara, or Elaine or Lucia or whoever? If I said yes, I'd want to confess the whole thing to him, and how could I do that? I'm afraid he'd leave me, and I'd probably deserve it.\"\n\n\"Maybe you could let him pick the girl.\"\n\n\"Tom?\" Angela laughed. \"Tom wouldn't know where to start. He never thinks about other women.\"\n\nI threw my hands up in frustration. If she only knew the thoughts and fantasies that went through my mind every day...\n\nMarin understood me better than my own wife, because she laughed at the concept. \"I bet he does, and far more than you think. He's probably got a whole database of women that he'd screw if he could. Who would he pick?\"\n\nAngela's head tilted in consideration. \"I know that he's sweet on one of his coworkers. He plays it cool, but I can tell the way he talks about her, and I think he gets a little jealous when she dates.\"\n\n\"Would you do a threesome with her? Maybe you could bring up the subject to him and suggest her.\"\n\n\"Cassie? A threesome with Cassie? God, she's the cutest little thing. Five-foot-nothing with a kissable face and the best ass I've ever seen. And I'd kill to bury my face in her cute little tits. But she's a girl scout. She'd never even think of doing anything kinky.\"\n\nIt was my turn to guffaw. I looked over at Cassie, sitting nude beside me in her usual masturbating position. \"You're a girl scout! You'd never think of doing anything kinky!\"\n\nCassie jestingly yelled at the TV screen this time. \"I'm not kinky?!?! I've jilled off in front of your husband, lady! I have a nine-inch dildo in my drawer!\"\n\nOn the screen, Marin reached underneath Angela. With some maneuvering, Angela's mouth popped open and her eyes grew wide. \"Oh, my ass,\" she panted. \"Keep doing that.\"\n\n\"You don't think your husband has ever diddled this woman? They work together.\"\n\n\"Tom and Cassie? Pfft. No way. They'd never even think about it. But I actually wish they would.\"\n\n\"Why?\"\n\n\"First off, she's hot and I'd want to hear how good she is in bed. I fantasize about her every time I see her. And second,\" Angela giggled conspiratorially, \"if Tom came to me and confessed that, it would open the door for me to confess everything I've done.\" She grinned in idle fantasy, \"Maybe it would also open the door to a threesome with him and Cassie. I want her so bad. I would give anything for a night with her.\"\n\nCassie and I sat on the couch in shock.\n\n\"Um, Tom?\" Cassie's voice was small.\n\n\"Yeah?\"\n\n\"I think your wife just gave us a hall pass.\"\n\nI was too stunned to answer immediately, but my imprisoned cock was suddenly painfully erect. \"I think she did,\" I said finally.\n\n\"And ... um, Tom?\"\n\n\"Yeah?\"\n\n\"I think Angela wants a threesome with us.\"\n\nI gulped. \"I think she does.\"\n\nOn the screen, Marin pulled Angela's head back and began kissing her throat. Her hand began moving faster between Angela's legs. \"I've missed watching you cum,\" she said. \"Cum for me now.\"\n\nI watched my wife begin getting actively serviced by the tall brunette as I pondered the implications of tonight.\n\n\"Tom?\" Cassie's voice had a bit of fear in it.\n\n\"Yeah?\"\n\n\"What do we do now?\"\n\nI looked over at my Chief Operating Officer. She sat nude, her small breasts topped by erect nipples. Between her legs I could see her luscious lips. \"Well,\" I said slowly. \"first off, stop playing with yourself right now. I don't want you to cum. As soon as I can get this trap off my cock, I'd like to do everything with you that I've wanted to do for a dozen years.\"\n\nHer smile was beautiful. \"Get it off,\" she ordered. \"Hurry. I'll be back.\"\n\nShe bounced off the couch and ran naked into the bedroom, her tiny ass tight and smooth. On the screen, Angela was cumming in gasps, Marin's tongue buried in her mouth and fingers in her pussy and ass. 5-1-1-1. I had to be getting close. 5-1-1-2.\n\nI heard Cassie's voice from the bedroom. \"When you're ready, let me know,\" she said. \"I want to make an entrance.\"\n\n5-1-1-3. 5-1-1-4.\n\nI worked feverishly. On the screen, Marin flipped Angela onto her back and the two women went into a 69 position. Oh, Marin, I thought. I don't know you, but I owe you so much. For several minutes the two women played with each other while I worked feverishly and Cassie did who knew what in the bedroom.\n\n5-1-2-1. 5-1-2-2.\n\nClack.\n\nOh, my. The chastity device suddenly opened, freeing my long-imprisoned cock. \"Aw, jeez,\" I said.\n\n\"What is it?\" Cassie had heard me.\n\n\"The combination was your street address.\"\n\n\"Are you loose?\"\n\n\"Yeah.\" It felt so good to be free of that infernal device, though at the same time it seemed to have whetted my sexual appetite immensely. My cock was practically pulsing as it swelled to full erection.\n\nThe bedroom door opened, and Cassie came out. She was wearing the silver sequined cocktail dress, her hair swept up in a sexy and sophisticated updo. Her smile was divine.",
        "****\n\n\"So which is it, mister? Do you want to bend me over the buffet table and fuck my brains out, or just drive off into the night with me and start a whole new life?\"\n\nI rose from the couch, a lump in my throat. I smiled uncertainly. \"Both, really. But under the circumstances why don't we go with the first option?\"\n\nIt had been 20 years since I'd had sex with someone besides Angela. I loved my wife, perhaps more tonight than ever before, but at the same time there was something inimitable about the excitement of exploring a new woman. I pushed her back against the wall and we kissed, not in a romantic way but rather in a manner of pure lust and passion. Reaching around, I grabbed her small buttocks and clenched a globe in each hand, forcing my hips into her. Smiling seductively, she said, \"Let's go into the bedroom.\"\n\nHer clothing didn't quite make it. Following her in, I unzipped the back of the dress and pulled it down, seeing with delight that she wore nothing underneath. Naked but for high heels and a pearl necklace, she didn't hesitate as she kicked the dress off her ankles and kept going, her hips swaying. By the time we made it to the bed I was enveloping her, forcing her to bend at the waist and then laying her upper body on the bed. She obligingly spread her legs and I fumbled a bit to place my cock at her opening.\n\n\"Oh, god,\" I breathed as I entered her lubricated tightness. \"You feel fantastic.\"\n\nShe hummed with assent and I began a slow in and out, luxuriating in her exotic feel. Pressing down onto her back, I kissed her neck, then reached around to play with her breasts. They were so different than Angela's, small enough to easily cup with my palm, soft with those long nipples. I flicked and pinched her nipples as I imbedded myself inside her.\n\n\"I've waited for this for so long,\" she sighed, uttering a small high-pitched grunt as I stepped up my pace. In relative silence other than the occasional groan or gasp, I spent the next several minutes stretching her tight pussy. When I started getting close, I pulled out. \n\n\"Time for that experiment we talked about,\" I said.\n\n\"What experi -- OH!\" She instinctively jerked forward as she felt the tip of my cock at her anus. \"Go slow, okay?\"\n\n\"I'll go slow.\" Holding her beneath me, I began applying pressure, my cock still slick with her juices. \n\nReaching in, I cupped my palm against her pubic mound, fingering her clit beneath and holding her in place for my penetration. My other arm wrapped around her small chest. She allowed me to enter, gasping and grunting as I filled her rectum with my iron-hard rod.\n\nIt was an experiment, a grand experiment. She allowed me to use her for several minutes, slowly increasing my speed until I reached a level that would make me cum. Thrusting slowly but rhythmically, I felt my pressure rise, and eventually blew my load inside her. Lying atop her to rest for a moment, I kept my softening penis inside her. \"What would you like?\" I whispered in her ear.\n\nShe was slowly undulating underneath me, keeping the friction going as long as she could against my fading glory. \"That was so erotic,\" she breathed. \"Keep fingering me, really hard and fast.\"\n\nI played with her slick clit, and she did indeed like it hard and fast. After imploring me to speed up a couple of times, I began working her hard, strumming my fingers over her slit until she too began bucking and cumming, her anus clenching and tightening on me as she writhed in orgasm.\n\nWhat a strange and wonderful world I had entered.\n\n****\n\nMy heart was beating like a drum solo when I walked up to her. Angela smiled up at me from her book, her legs bare in a pair of sexy shorts. \"What's up, pardner?\" she asked.\n\n\"Let's go to the bedroom.\"\n\nHer eyebrows rose and her smile broadened to an uncertain grin. \"Feeling a bit randy, are we?\"\n\nI nodded, a lump in my throat.\n\nShe looked me up and down, her gaze stopping for a moment at my crotch. \"Are you going out of town, or is this just a Saturday night special?\"\n\n\"It's a special. Definitely a special.\"\n\nShe appeared to ponder her options for a moment, then put down her book. \"I guess I can make time for a little fun.\" She rose to her bare feet and sashayed by me, pulling me along by my shirt.\n\nI obediently followed, aware now of all of the cues that I had missed over the years. How had our sex life stagnated so badly when we were both so sex-crazed?\n\nWe went into the bedroom and she turned to me, giving me a big, deep kiss. Her large breasts pressed into me, feeling so different than Cassie's smaller frame. I ran my hands down her back and squeezed her butt, reveling in its curvaceous softness. Despite my nervousness, I could feel myself getting hard. \n\n\"Get naked, woman,\" I ordered with mock seriousness. Her eyes alight with mischief, she danced away from me and pulled her t-shirt over her head, then removed her sensible bra.\n\nMy god, her breasts really were fantastic.\n\nShe played with them for a moment, and I finally recognized how much she enjoyed breasts and why she often played with hers when I was servicing her. Catching herself, she regained focus and pulled down her shorts and panties, showing me her nicely trimmed pubic mound. \"My favorite?\" she asked.\n\n\"As always.\" I stripped down myself as she climbed onto the bed and lay back.\n\nIt truly was a delight to eat her out. Her pussy was magnificent, sweet-tasting and gorgeous and aromatic in just the right way. I forced myself to go slow, to give her maximum enjoyment, and per our earlier encounter, I found her anus and actively penetrated it with a finger, making her squirm. Her enjoyment calmed me down about the ambush I was about to spring.\n\nHer back began to arch and her breathing became deeper, her legs spreading wider for access. I kept up my work, and she soon coiled into an orgasm, her stomach muscles flexing as she ground her pussy into my tongue. I held her knees apart and watched patiently as she came back down from ecstasy and caught her breath.\n\n\"That was wonderful,\" she murmured. She lay for another moment before one eye opened and peered down her body at me. \"Do you want your favorite?\"\n\nOkay, it was showtime.\n\nI shook my head. \"I think my favorite is changing. I'd like something new.\"\n\nHer hands were slowly stroking her breasts as she responded. \"What are you in the mood for?\"\n\nMoving up, I climbed onto her belly, then her chest, gently crushing her breasts beneath me as my cock floated close to her face. \"I want to try several new things, and I think you're going to like them.\"\n\nHer brow furrowed slightly as I leaned forward, reaching toward the upper corner of the bed. \"Like what?\"\n\nI pulled her left arm up, then pulled the bondage tie out from under the mattress. Before she could react, I had her left wrist ensnared and stretched upward. \n\n\"What the -?\" I wasn't sure if she noticed that it was the ties that she always used, or if it was just surprise that I was using such a thing at all. I repeated the process with her right wrist, and she looked in puzzlement at her familiar toys.\n\nInstead of pulling her legs down, I forced them up toward her shoulders. Forcing her to double up, I tied each ankle into a leather tie, trapping her ankles up near her ears with a tightness that wasn't cruel, but which allowed no real movement. \n\n\"What are you doing?\" she asked, concern in her voice. She looked up at the ties that held her, testing them with no luck.\n\n\"I've wanted to do this for a long time,\" I responded. \"Now, how about amping it up a little?\" I went to the closet and pulled out her suitcase of toys. As I brought it to the bed, Angela's eyes were wide with horror. \n\n\"How...how do you know about that?\"\n\nWithout answering, I opened the case and rummaged through it. Sizing her up, I pulled out a ball gag and quickly strapped it around her head.\n\n\"Pardon the gag, but I have a few things to say and I don't want to be interrupted.\"\n\n\"No!\" she protested, but the word only allowed me to leverage the ball between her teeth. Her next words were muffled and unintelligible, and she began kicking and pulling against her bonds in earnest.\n\nI opened up her nightstand and pulled out her secret lubricant, then climbed onto the bed and sat at her ass. With her legs pulled up toward her shoulders, her vulva and anus were on complete display. \n\nWe made eye contact, and she knew that she'd been caught.\n\nI gently ran my hand through her trimmed pubic stripe, then lowered it to play with her lips and clitoris. \n\n\"We've been married for twenty years,\" I said in measured tones. \"For richer and poorer, for better and worse.\"\n\nI picked a vibrator from the bag, flicked it on, and began running it over her, sliding it within her silky folds.\n\n\"I really like sex,\" I said, \"and I'm really adventurous about sex. Or at least I want to be. I want to tie you up like this. I want to give you multiple orgasms just to watch you scream with pleasure, because you're so sexy to me.\"\n\nOpening the lube, I reached down to her anus and began stroking it onto her and into her. She tried to struggle, but was completely immobile. She was babbling behind the gag.\n\n\"I've wanted to take you anally, to hold you down and push myself into you like you're a Thai bargirl. But I've never done it.\" I pushed a finger steadily into her rectum as she tried to buck.\n\nI stopped for a moment, my finger imbedded in her up to the knuckle. \"Do you know why I've never done it?\"\n\nHer eyes transfixed on me, she hesitantly shook her head.\n\n\"I didn't do it because I didn't want you to think that I was some sort of sexual deviant. I didn't want you to lose respect for me. And I didn't want to disrespect you by asking you to get on your knees and take it while I pounded you in the ass. It just seemed so ... uncivilized... for a classy woman like you that I didn't think you would do it.\"\n\nI pushed a second finger inside her ass, and positioned the vibrator so I could penetrate her pussy with it. The look on her face was one of utter shock, but not even because of the sex.\n\nI played with her in silence for a moment before continuing.\n\n\"I made an accidental discovery a short time back.\"\n\nAngela's eyes closed in resignation. When she opened them back, I could see that they were full of sorrow, tears welling up in her eyes. But that's not what I was looking for. \n\n\"I know about the other women,\" I explained, continuing to masturbate her with her various toys. \"It was a total accident, but I found out.\"\n\nHer noises behind the gag became much more frantic, the trapped kicking of her ankles more urgent, but I ignored them.\n\n\"I had no idea that you liked girls. Or bondage. Or anal sex. Or a bunch of other things. And I certainly had no idea that you were doing all of these things without me.\"\n\nReaching toward her toys, I grabbed a rather large butt plug. I positioned it against her and began applying a smooth, strong pressure. Her eyes briefly rolled back in her head.\n\n\"But that's not all I found out, and the other thing is much more important. What I really found out is that you're sexually adventurous, too. You've wanted the same things that I have, but you've been afraid to tell me.\"\n\nAngela had a crazed look in her eyes and was stammering into the gag. I wasn't sure if her reaction was to my speech or to the stretching I was giving her as I buzzed her clit with the vibrator.\n\n\"I'm not going to lie. It hurt at first. But then I figured out why it was happening, and I didn't feel so bad. In a way, you thought you were being kind by keeping it a secret. I understand that.\"\n\nHer ass was trying to squirm as the butt plug reached maximum width. With a flex, the widest part suddenly entered her, her sphincter snapping shut on the narrow flange that ended it. Her body flexed hard as it absorbed it, and my cock was getting harder by the minute. She groaned behind the gag.\n\n\"The great irony,\" I continued, \"is that you didn't tell me about your desires for exactly the same reasons that I've never told you about mine. You and I have lain together in bed for 20 years, both wanting to be adventurous but both afraid to reveal ourselves to each other. And isn't that sad?\"\n\nI pushed the vibrator inside of her pussy, then leaned over to the suitcase and fished out a pair of nipple clamps.\n\n\"And I have to confess something,\" I said as I tested the springs. I smiled at her. \"It's a big turn on to think of you with another woman.\"\n\nI leaned forward and pulled her left nipple up hard, snapping the clamp down on it. Her back arched with some type of pleasurable pain. I repeated the process with her right nipple, forcing the nubs to stand up. I sat back and enjoyed my handiwork, watching her struggle with both holes filled, her nipples pinched to stiffness, and her wrists and ankles bound tightly. I looked into her tear-filled eyes.\n\n\"Everything changes as of today,\" I said. \"No more secrets, no more holding back. We're in this together. We're going to play together and we're going to explore everything we've ever wanted. If you don't want that, we can get a divorce. What do you say?\"\n\nI reached forward and opened the buckle on the ball gag. As soon as it came off, she began bawling. \n\n\"Tom, Tom, I'm so sorry,\" she cried. \"Don't leave me. I love you so much! I was just so ... so ashamed of what I wanted. I didn't want you to think less of me! Please forgive me!\"\n\nI leaned forward onto her tightly bound body, luxuriating in her softness, and we kissed, long and deep. When we finally broke off I sat up, kneeling between her upturned legs. \"I don't want to leave you, Angela. I love you, and I want us to keep being happy. And I think we will be, because I've got a surprise for you.\"\n\nClimbing off of her, I found my pants on the floor and dug my phone out of my pocket. Sending a quick text, I stood at the foot of the bed, enjoying the view of her vulnerable and displayed vulva. The front door opened and closed in the distance, and Angela's head jerked toward the bedroom door. \"Tom, what are you doing?\"\n\nFootsteps padded down the hall, and eventually our door opened. In walked the long brunette Marin, completely nude and absolutely gorgeous. My mind reeled momentarily with the thought that she was about to be mine.\n\n\"Angela,\" I said, \"I believe you know Marin. Marin and I are going to have sex now.\"\n\nAngela looked at Marin, then at me, then back at Marin. The brunette shrugged. \"Surprise!\" she said with a bit of sarcasm. \"You okay with this, honey?\"\n\nLying on the bed, ankles tied near her ears and wrists bound, I could see Angela's brain short-circuit as she tried to figure out what was happening. For a long moment, she stared into nothingness, her attractive breasts rising and falling with each breath.\n\n\"She and I are going to have sex,\" I said, \"but I wouldn't leave my dear wife alone and without attention. So I got you a gift, too, and all of four of us can have a good time together.\" \n\nI motioned outside the ajar door, and in walked Cassie, completely naked. She offered Angela an uncertain and wavering smile. \"Hi, there,\" she said, offering a shy little-girl wave as she half-covered her bare breasts.\n\nAngela's jaw dropped, and her eyes traced up and down Cassie's nudity.\n\nCassie stepped uncertainly to the side of the bed, her dark eyes feasting on Angela's helplessness. For a moment that seemed like infinity, the two women sized each other up.\n\nAngela and I made eye contact, and held it. \"Do you forgive me?\" she asked.\n\nI nodded.\n\nFor the longest time she lay motionless. Then slowly, ever so slowly, a smile crept across her mouth. She locked eyes with Cassie and her tongue appeared, licking her lips suggestively.\n\nAs Marin climbed onto the bed and waited for me to enter her, I watched Cassie mount Angela and move into a 69 position. \n\nThis was going to be an amazing night.\n\n****\n\nThree weeks later, I sat against the headboard of my bed. A brunette head bobbed up and down in my lap, and I ran my hands through Cassie's hair. That girl really knew how to give a blowjob. Reaching under her, I played with her perky small tits, enjoying the hardness of her nipples. Her big brown eyes peered up at me as she worked, and she gave me a wink and a smile.\n\nMy eyes trailed further down to her fantastic little ass. Angela was lying beneath Cassie, stroking Cassie's ass while she ate her out. Cassie was squirming in pleasure, her little moans reverberating against my swollen head.\n\nThe doorbell rang.\n\nCassie immediately pulled her mouth off my cock and Angela pulled out from underneath her. \"She's here!\" Angela exclaimed.\n\nThe two women bounced off the bed, both stark naked. I grinned at their complementary curves, Cassie's slender frame and Angela's curvy build.\n\n\"You'll love her,\" Angela said as the pair headed to the bedroom door. \"She's a beautiful Asian woman, and she's really into tying you up and teasing you. We'll have fun watching you tonight.\"\n\nCassie grabbed her and pulled her close, and the two women kissed. I could still feel Cassie's saliva on my cock, and sat back to wait for our new fourth as Angela introduced us to her past partners every week. I clasped my hands behind my head to wait, and Angela caught me out of the corner of her eye. She offered me an adoringly warm smile. \"Can I have my favorite?\" she asked. \n\nI nodded. \"Of course.\"\n\nThe two girls giggled and ran out of the room to greet their new playmate.\n\nLife is good. "
    ],
    "authorname": "BuckRivers",
    "tags": [
        "wife",
        "cheating",
        "lesbian",
        "mutual masturbation",
        "petite",
        "spycam",
        "fantasies",
        "secrets",
        "voyeurism",
        "coworker"
    ],
    "category": "Exhibitionist & Voyeur",
    "url": "https://www.literotica.com/s/the-secret-life-of-my-loving-wife"
}
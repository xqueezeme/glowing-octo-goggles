{
    "title": "The Indian Serenade",
    "pages": [
        "\"Children,\" Professor Barnes intoned, \"Andrew Wyeth once said, 'I dream a lot. I do more painting when I'm not painting. It's in the subconscious.' Can anyone tell me what that means? Yes, Mr. Kadesky.\"\n\n\"Creativity lives in the subconscious. Through the leaks and cracks in our conscious, connections are made that allow our creativity to emerge. The more porous our conscious becomes, the more active our creative process becomes,\" answered Alex.\n\n\"Excellent answer, Mr. Kadesky. You may just earn your scholarship after all!\" Professor Barnes replied to general laughter around the studio. \"How do we ...\" His question was interrupted by a loud crash as a stack of plastic tumblers spilled onto the concrete floor. \"Miss Crane, might I suggest two trips rather than overload yourself?\" he asked in an irritated voice.\n\nShawnee's face turned red, and she self-consciously tucked her long black hair behind her ear as she scrambled to retrieve all the tumblers she'd been carrying. Alex generally likes Professor Barnes, but he sometimes acted like a real dickhead.\n\nAlex ran over to help the shy student assistant. \"Don't worry about Snape,\" he said in a low voice to Shawnee. She glanced up, startled at his voice and swift appearance for help. Shawnee was still too embarrassed by the mishap and her sudden emergence in the spotlight of the classroom to laugh. Barnes merely shook his head and returned to his students. Alex carried most of the containers to the storeroom.\n\nOnce in the storeroom, Shawnee quickly tried to take them from him. \"I'm sorry. I'm keeping you from your class,\" she said in a concerned voice.\n\nAlex smiled at her. \"Don't worry about it. At the moment Barnes is having a wonderful listening to the sound of his own voice, and that could go on for ages. You saved me from staring at the clock, trying to decide whether I should hang myself or shoot myself,\" he said warmly.\n\nShawnee looked up at Alex for the first time and smiled. Alex was aware of the Professor's assistant, but they had never talked face to face before. He'd noticed how shy she was and how she seemed to hide beneath her baggy sweaters and overalls. She usually wore a ski cap and used her long black hair like a screen to shield her from others. He had no idea how pretty her face was. Shawnee had finished putting the cups on the shelf and was unsure why Alex continued to stare at her.\n\n\"I think I can finish from here,\" she said, breaking Alex's trance.\n\n\"Oh, yeah, sure,\" he said as he handed her the last two tumblers in his hands.\n\n\"Thanks for your help,\" she said as her glance swiveled from his face to the floor.\n\n\"No problem. Anytime,\" he said starting to turn. He paused and started to ask, \"Hey, would you like ...\" but he was interrupted by the Professor who was bellowing his name.\n\n\"You better get back to class,\" she said as she smiled looking down.\n\n\"Yeah ... I ... ok,\" he said as he walked back to his easel.\n\nA couple of days later, Alex was in one of the campus cafes doodling in his sketchbook when he glanced up and saw Shawnee sitting by herself at a table across the large room by a large picture window. She wore the same basic outfit, but she'd taken off the cap and had released her long, shiny hair from its clip. He spent the next twenty minutes watching her as she worked diligently on something from a physical chemistry book.\n\nHe was fascinated at the lines of her profile and how the sunlight bounced high off her glossy hair. He started sketching her profile in pencil from different angles. He looked at his drawings and smiled. When he looked up again, she was packing to head off to another class.\n\nFor the next few days, Alex watched Shawnee when he was in art class. Despite the spill from the other day, she was actually quite graceful. She glided around the class so quietly and efficiently that he now realized why he hadn't really noticed her before. She was practically invisible.\n\nAlex went to the same caf\u00e9 at the same time for the next couple of days. Shawnee, as he assumed, was a creature of habit. On Mondays, Wednesdays, and Fridays, she arrived at her table at just about the same time and always hauled out a math or science book to immediately begin working. She was oblivious to the world around her. This enabled Alex to study her from different angles. By the time he decided to walk over to her, he'd developed a whole series of pencil drawings.\n\n\"You look like you could use something cold to drink and some company,\" he said, smiling and carrying a couple of sodas to her table. Shawnee jumped at the sound of a voice so close to her. \"Sorry ... I didn't mean to startle you. May I join you?\" She was too surprised to do anything but nod yes. Let's see ... p.chem, calc, micro ... pre-med, right?\"\n\n\"Right,\" she said with a faint smile.\n\nThere was an awkward silence, which Alex finally broke. \"So ... you're probably wondering why I sauntered over to interrupt your studying.\"\n\n\"Kind of.\"\n\n\"Well, I have a favor to ask, and I think I can do you a favor in return.\" She continued looking at him with big, dark, questioning eyes. He continued. \"I have an idea for my senior thesis, and it involves you ... if you're interested.\" She continued to stare. \"The idea is a series of paintings showing a single model in a kinetic series of poses that interrelate. There's an abandoned cabin I found one day, hiking along the outskirts of the campus property. It's in the woods, and everything is mossy and overgrown, so I don't think anyone's been there in ages. One of the large windows opens to what used to be a beautiful manicured lawn. The setting has great light and would provide a lot of visual texture for the background.\"\n\n\"And, you want me to help you set up and clean up?\" she asked.\n\n\"No,\" he said with a pause. \"I want you to be the model.\"\n\nShe looked at him like he was crazy. \"Me? Model?\"\n\nHe chuckled. \"Yes. Why are you so shocked?\"\n\n\"The campus is full of pretty girls. Why would you want me to model?\"\n\nThe very fact that she asked the question so earnestly was a big reason he was so drawn to her. \"Here's why,\" he said softly as he placed his sketchpad in front of her. Shawnee was surprised and embarrassed to see her profile in front of her. Her eyes rolled toward Alex and back to the pad. He turned the page so she would realize there were more. Shawnee slowly scanned the different sketches of her face, her eyes, and her profile. As she turned the pages, she was stunned at how beautiful Alex made her look.\n\nShe tucked her hair behind her ear and asked, \"How can that be me?\"\n\nAlex tilted his head slightly and looked at her curiously. \"I'll answer with a question. How is it possible that you don't know how beautiful you are?\"\n\n\"But, I'm not. I'm ...\" He reached out and took her hand. She flushed at his touch.\n\n\"You really can't argue the point. The proof is staring up at you from that page. I may not be a good enough artist to do true justice to your beauty, Shawnee, but I'm close enough so you can't deny that the woman looking out from those pages is mesmerizing.\" She looked down again. She had to admit that Alex had made her look amazing, but she was still perplexed by this whole encounter. \"All I want you to do is think about it,\" he said. Then, he added, \"There's one other important thing. Professor Barnes helped me get a $10,000 grant to help with my thesis. I actually only need about $5,000 for expenses, so I was planning on paying the model the rest. I mean, if you could earn $5,000 in a couple of weeks, you could free yourself from the evil clutches of Snape, right?\"\n\nShe smiled. \"I really don't know about this. What would I have to do?\"\n\n\"Nothing, really. Just be yourself. I'll work out wardrobe and make-up. All you need to do is say yes.\"\n\n\"I'll think about it,\" she said looking up at the clock. \"Oh, I'm going to be late for class.\"\n\n\"Can you let me know by Friday?\" he asked.\n\n\"Yes. Friday,\" she confirmed as she gathered her bag and took off. Alex smiled as he watched her leave.\n\nOn Friday, Alex walked into art class and set his books down at his easel. He looked around for Shawnee. He spotted her in the workroom and jogged over to get her answer before Barnes began holding court. \"Well?\" he asked as he approached.\n\nShe turned around at the sound of his voice and was biting her lower lip. \"Okay. I'll try, but I still don't know why you don't get one of the models from the art department. They're all much prettier than me.\"\n\n\"Yes!\" he said thrusting his arms into the air in triumph. \"And. No they're not ... not even close. It'll take a few days to get the approval, but I'll let you know when we can start.\"\n\nAs she tucked her hair, she smiled shyly and said, \"Okay.\"\n\nFor the next couple of days, Alex spent most of his free time at the cabin. He tested lighting with his camera, cleaned and painted the area he planned to use for his series, and sketched images of what he expected his series to produce.\n\nWhen he made his presentation to Professor Barnes, the professor wrinkled his nose and glanced in the direction of Shawnee. \"Her? You're using her as the model for your thesis? Mr. Kadesky, several of my students have used their theses paintings to launch a career. Are you sure you want to stake your career on her?\"\n\nAlex sighed and answered, \"Professor, the proof is in the sketches. Shawnee is quite striking, and her dark features will work very well in the setting I'm using. Trust me.\"\n\nBarnes was skeptical but shrugged his agreement. \"The committee will meet Thursday. Stop by my office around 4:30.\"\n\nOn Friday, Alex couldn't wait to get to art class and to tell Shawnee his project was approved. She smiled cautiously and said, \"Swell.\"\n\n\"It's not going to be that bad. You may find you like it.\"\n\n\"Yeah ... we'll see. When do we get started?\"\n\n\"How about tomorrow afternoon? I can pick you up at the Student Union around 2:00, and we'll drive to the location. Oh, and, wear boots or old sneakers for the walk to the cabin. It's muddy. There's plenty of room to change inside.\"\n\n\"Does it have electricity or water?\"\n\n\"No, but I rented a generator and a spring water contraption we can use to get by.\" She was still unsure about all of this, but she nodded and went back to work cleaning containers.\n\nThe next day was sunny and gorgeous with a light breeze and about 68 degrees. Shawnee was wearing her \"uniform\" of a flannel shirt and overalls. Alex chuckled to himself as he pulled up to the curb to let her get into the car. It took about half an hour to drive to the location. Alex parked his car in a wide spot along the shoulder. He took a couple of cases from the trunk and led Shawnee through the woods.\n\nWhen they arrived, she wasn't sure what to think. \"Is it safe?\"\n\nHe laughed. \"Yes. It may not look pretty, but it's quite sturdy. I've been here for a few days getting ready.\" They walked inside, and Shawnee was pleased to see that it was clean and bright with the combination of sunlight and photography lights bathing the main room. The window he was using appeared to have been off the dining room. He'd even mowed some of the yard outside and had cleaned up a lot of the overgrowth. \"Well, this will be our second home for the next few of weeks. What do you think?\"\n\n\"It's actually better than I expected when we approached the place. What do you want me to do first?\"\n\n\"Just sit on the window sill and look out. I want to take some test photos and play with lighting a little.\"\n\nShawnee looked out the window and started thinking about what kind of family might have lived in the house. She imagined a rural, hard-working family with three or four kids, who went to school and worked on the farm when they came home. Alex began snapping pictures. After about 20 minutes, he stopped and said, \"That was perfect!\"\n\nShe looked at him confused. \"What was perfect? I didn't do anything?\"\n\n\"You were lost in thought and were totally natural. That's exactly the kind of thing I'm looking for in your poses.\"\n\n\"You mentioned wardrobe and make-up. What do you have in mind?\"\n\nAlex walked to the next room and answered, \"Come here, and I'll show you.\" Shawnee walked into the next room, and Alex had a series of sheer gowns in soft neutral colors. \"I want to try a few different colors to see what works best with your dark features. Why don't you try a couple on while we're here, and I'll take some more test shots.\" He turned to walk back into the other room but stopped and turned back. \"Oh, and Shawnee, if you don't mind, leave your underwear off beneath the gowns.\" Then, he closed the door to give her privacy and went to the main room.\n\nShawnee was uneasy changing into the first gown. She chose a silky peach dress that clung lightly to her. She looked around nervously when she began disrobing. As she laid her clothes on the trunk Alex had placed in the room, she heard the crack of wood outside. She quickly grabbed her shirt and covered herself as she ran to the window to find out if anyone was looking into the room. The only thing she saw was a raccoon foraging. She relaxed and turned back to the gown. It fell in wisps around her body. She was both anxious to be so exposed and exhilarated at the sensation of the cool silk against her naked skin. She walked out of the dressing room with her arms folded over her breasts.\n\nAlex saw the concern on her face and asked, \"What's wrong?\"\n\nShe bit her lip and answered, \"I'm not sure this dress will work.\"\n\n\"Why? It looks like it fits great.\" Shawnee slowly lowered her arms. At first, Alex wasn't sure what the problem was. Then, he realized it was the fact that her nipples were so visible against the material. \"Ahh. Shawnee, don't worry. It's just you and me here, and I would never do anything that would embarrass you. You look spectacular in that dress! I kind of figured you had a great body hidden away underneath all that wool and denim, but let me tell you, Shawnee, the real you blows my imagination away!\"\n\nShe blushed as she looked down and smiled. She'd never had any real attention paid to her looks, and she had to admit she liked being told she was beautiful. She moved to the windowsill and sat with one leg propped up on the sill and let the other dangle. There was something very stimulating about being here with the cool breeze tugging at her hair and at the edges of the gown, knowing that she was naked underneath. If the wrong breeze caught her, she would be exposed. That thought made her moist despite her shyness. Of course, it was only because Alex was so appreciative of her looks.\n\nAlex watched her and chuckled.\n\n\"What?\" she asked self-consciously.\n\n\"You're just such a natural at this,\" he said shaking his head. \"You seem to know what to do before I say a word.\"\n\n\"Oh,\" she said smiling and relaxing.\n\nAlex took several photos of various kinds and then took out the photo card and popped it into his laptop. \"Come here, shy lady. Let me begin educating you on just how beautiful you really are.\" Shawnee smiled at him, and, for the first time, didn't look away. She walked over and watched as Alex scrolled through the shots ... medium shots, close-ups, profile shots. She had to admit, he had a knack for making her look good.\n\nShawnee went back to the dressing room and tried on the white silky gown. Alex repeated the process and did so again with the pale yellow gown. Shawnee was becoming more and more relaxed around Alex and with the camera. He was so sweet and kind to her that she tried hard to please him. \n\nShe went back one more time to try on the black gown. She picked it up off the rack, and her mouth fell open a bit. It was mostly made of sheer material. She placed her hand behind it and could easily see it. She wasn't sure if she could bring herself to wear such a garment.\n\n\"Are you decent?\" Alex asked from outside.\n\n\"Yes. You can come in.\"\n\nAlex walked in and saw her standing, staring at the black dress. \"Not what you expected, huh?\"\n\n\"Not exactly.\"\n\n\"I think black is going to be our best choice. I'm using this gown because it absorbs light and is thin to accentuate your body. It's sleek. At the same time, Shawnee, I don't want you to feel apprehensive. I can also use the pale yellow, but black is my first choice.\"\n\nShe looked at the gown again and sighed. \"I'll try it, Alex. I'm just a little embarrassed. I mean, you'll see everything.\"\n\nHe walked over and put his hand on her cheek. \"Shawnee, you are one of the most naturally beautiful women I've ever seen. The vision of you in that dress with this setting and lighting is going to be spectacular and will enable me to do something special. But, it's not worth it if you feel uncomfortable. It's not. You saw the pale yellow shots. They're great. If you're going to feel too exposed, we'll go with the yellow.\" She saw the kindness and concern in his eyes and knew he wouldn't take advantage of her.\n\nShe shrugged. \"We're grown-ups. It's just a body, right? Let me try it on for some photos. Then, I'll make a decision.\"\n\nHe smiled. \"Fair enough.\" Shawnee walked out of the dressing room a few minutes later, and she was a goddess. When Alex turned to see her, his mouth fell open. She had to stifle a smile at his reaction. He was momentarily frozen as he watched her glide to the windowsill. She struck a couple of poses, and Alex began snapping photos. At one point, Shawnee leaned her head back and shook her long, silky hair in the wind to loosen it. When she turned back toward Alex, he had turned his body so that she saw the distinct outline of his erect penis under his jeans. She felt herself moisten even more. Except for Dave, her boyfriend from high school, she'd never seen a man get hard just by looking at her. She felt her taut nipples tingle. Somehow knowing she had that effect on Alex made her relax. The fact that she also thought Alex was a babe made her feel special.\n\nThey looked at the photos together in silence. Alex was staring at her and trying to remain totally professional. Shawnee was looking at the photos and was stunned at how, well, sexy she looked. She'd never thought of herself as sexy, and she was finding this whole experience erotic and fun.\n\nFinally, Alex broke the silence and said, \"Shawnee, if you're okay with it, the black gown is definitely my pick.\"\n\nShe turned to him and smiled. \"Yeah. Even I have to say I like those photos. I can't wait to see what you do with the oils.\"\n\nAlex stepped back and studied her face. She wrinkled her brow and asked, \"Is something wrong?\"\n\nHe tilted his head and looked at her a few more seconds before answering, \"No. As a matter of fact, everything's very right. I was going to ask my sister to come next time to help with make-up, but, honestly, Shawnee, you're so beautiful just the way you are, that I think make-up would get in the way.\"\n\nShe smiled broadly. \"You certainly know how to make a girl feel special.\"\n\nHe smiled back. \"I'm glad, but I'm simply being honest. You are stunning, Shawnee, and in that gown ... Wow! ... You could easily be a professionally model.\"\n\nShe rolled her eyes. \"Yeah, right!\"\n\n\"I'm not joking,\" he called to her as she walked toward the dressing room. She waved backward at him. He laughed.\n\nThey checked their schedules and decided to meet every day at 3:00 to catch the afternoon sun. He borrowed a friend's pick-up and brought a sofa as an additional prop. Shawnee felt more at ease all the time. Alex was quickly turning into an expert on her sleek body. He knew every freckle ... every dimple. So, he was somewhat stunned on day two to discover she'd trimmed off practically all of her dark pubic bush. He had a difficult time averting his eyes, since his male instincts were to explore every facet of the burgeoning flower between her dark, slender thighs. His dick was so hard that day that he hid behind the easel as much as possible. Shawnee smiled devilishly at his predicament and grew very wet knowing she was the cause of his discomfort.",
        "At one point, Alex asked her to lie on her back on the sofa and raise one leg while she stared out the window with her arms above her head. As his artist's eye surveyed the pose, he walked to the end of the sofa to adjust the fan gently blowing her hair. The tension growing within him between the aloof artist and the libidinous man caused him to trip over a light pole. He had to lunge quickly to grab the pole before it smashed upon the ground. In doing so, his head fell to the hem of her garment. His eyes were drawn to the intoxicating path leading from her creamy thighs to the dark umber of her sex, flushed and full. He saw her puffy, dimpled labia peel back from her damp chamber. He watched a single teardrop of moisture slide lazily down her slit and cling at the bottom of the crevice. He witnessed the faint outline of her pink bud peeking out from within her dark reddish brown hood. He imagined running his tongue along her tender gash just before placing the purple head of his engorged cock against the seeping entrance of her canal to begin his slow journey into her inner sanctum.\n\nShawnee, who just a few days earlier would have been traumatized at the thought of a man peering at her sex, especially in its excited, lubricated state, sat motionless. Only her eyes moved as she watched Alex's face and saw the lust intensify as he stared at her, unable to tear his eyes away from the allure of her sanctuary. She wasn't embarrassed; she felt empowered. Here was a gorgeous, talented man whom she'd grown to care about deeply and whom she found insanely attractive frozen with yearning for her and for her body. She'd never felt so alive. She'd been trained by her family to focus on logic and on goals, so this excursion into the realm of pure sensuality was like discovering a part of herself that had remained dormant.\n\nAlex eventually regained enough composure to pull himself away. He looked at her face and started to say, \"I ...\" But, when their eyes met, he was embarrassed. He rose and mumbled, \"Stay there I'll be right back.\" Alex scurried out the front door. Once outside, he closed his eyes and breathed hard. He knew he had to relieve himself, and he hurriedly unbuckled his jeans, slid them halfway down his thighs and furiously jacked himself. His mind's eye was consumed with every precious detail of Shawnee's pussy. It only took a minute for the first milky rope to spray into the forest air. Six more followed before he was able to slow his hand. His orgasm was so violent that he fell against the wall and had to brace himself for a few moments before he could muster the strength to pull up his pants with trembling hands. As he did, he discovered the huge wet stain on his jeans from his leaking cock. He pulled down the bottom of his t-shirt and hoped it was long enough to cover the wet mark.\n\nWhile he was gone, Shawnee's hand was drawn to her own sex. She didn't know where he went or how long he would be gone, but she figured the sound of his boots upon the wooden steps would give her a fleeting alarm. Her fingers dove into her hot vaginal channel. Since the thought of getting caught masturbating would have been horrifying, she decided to forego any subtleties and went straight for her clit. She imagined Alex stripping off his shirt and dropping his pants so he could take her right there on the sofa. She conjured the image of his cock and watched him enter her with her mind's eye. She felt his thick head bore past her entrance and slide, hot and hard into the deepest recesses of her sexual soul. She dreamed her hand was his thick shaft bombarding her clit with each passionate stroke. She pushed her sex toward her hand, imagining the feeling of his heavy balls slap against her. As she passed over to the far reaches of orgasmic bliss she tried to envision the feel of his seed spraying her and filling her cavity. Her back arched high and stiffened as she climaxed. At last her body sank into the cushions of the sofa in much needed relief. Her face was hot and flushed. Once she was able to stand, she rose and ran quickly into the dressing room to run water over her face, wash her hands and to wipe away some of the moisture bathing her thighs. \n\nShe took a deep breath and was on her way back to the sofa when Alex began trudging up the stairs. He walked in carrying a set of brushes in an attempt to obscure the real reason for his quick departure. Shawnee looked at his crotch and saw that the think line was not quite as prominent. Her pussy tingled at the thought that they had both masturbated to relieve the intensity of what had just occurred.\n\n\"Sorry about that. I had to get some things from the truck,\" he said with false bravado.\n\n\"No problem,\" she said lightly.\n\nThe rest of the afternoon was spent in intense work as Alex brought his vision to life. When the light was growing dim, he laid down his brush, wiped his hands and declared that session complete.\n\n\"May I see it?\" Shawnee asked.\n\n\"You're the model. Of course ... you can look any time,\" he said with a smile.\n\nShawnee eagerly trotted to the other side of the easel in anticipation. She sucked in a quick breath and her hand flew to her mouth when she saw the rendering he'd completed of her. It was one of the most beautiful paintings she'd ever seen. The way he captured the wisps of her hair and the delicate contours of her slender body were amazing. But, it was her eyes that left her speechless. He not only accurately recreated their shape and color ... he somehow managed to ensnare the dreamy solitude of both the person and the imaginary character she created as she posed. He was focused on her face, watching her reactions. His smile grew as her approval grew.\n\nA tear formed at the corner of her eye and slid down her face. \"Alex, I don't even know what to say. You made me look ... look ... beautiful.\"\n\n\"I didn't make anything. I tried to capture as much of your beauty as my skill and talent would enable me to do, but the beauty, Shawnee, is yours. It always has been.\" He picked up her hand and softly kissed it.\n\nShe looked at him with her mouth open and her eyes moist. She started to speak, but he put his hand to her cheek and placed his thumb to her lips to let her know she didn't have to say anything. Her reaction told him all he needed to know.\n\nAlex cleaned up and covered his canvas to protect it as it dried while Shawnee changed into the baggy clothes that now seemed out of place to her. They drove back to campus with Shawnee talking a mile a minute about the day and his talent and the process and everything. Alex mostly just listened and laughed at her enthusiasm.\n\nThree o'clock was now the highlight of her day. Shawnee couldn't wait to see what new vista Alex would discover within her each day. He painted one portrait with her sitting in the window. Another was of her bending over the basin washing her face.\n\nOne day, Alex asked Shawnee to walk with him around the grounds before changing. They walked through the woods and came to a creek with an old wooden bench beside it. She sat on the bench as he moved around her to gauge the light. The afternoon light wasn't strong enough to penetrate the thick covering of tree branches. Since the next day was a Saturday, they decided to meet at 7:00 am so the eastern light could bathe the area before hiding behind the trees.\n\n\"If you don't have plans, can I buy you dinner?\" Alex asked.\n\nShawnee's face nearly exploded into a smile. \"No ... no plans. I'd love to go to dinner with you!\" She asked to be dropped off at her apartment first, so Alex said he'd pick her up in an hour.\n\nEach went home, showered and spruced up a bit. Alex wore a blazer, white shirt and chinos. Shawnee fluffed out her hair and let it fall on her shoulders. She'd noticed how Alex responded to seeing her hair fall to its full length. She only had a couple of dresses, but they were killers, she thought. She wore a black dress that clung tightly to her body. It had small gold designs sprinkled throughout. Around her neck, she wore a simple gold chain.\n\nWhen she opened her front door, Alex's mouth dropped open. She beamed. That's the reaction she hoped to elicit. \"Holy shit!\" he exclaimed.\n\n\"You're not so bad yourself,\" she said.\n\nThey decided to head to the other side of town to a seafood restaurant nestled in a marina. The restaurant's dining room stuck out over the lake. The food was terrific, but it was rarely crowded because most people in the city didn't even know it was there.\n\nAlex held her chair for her, which garnered an approving smile from their waitress. Alex ordered a bottle of pinot grigio. Shawnee felt like a princess. She loved how focused Alex was on everything she said. The waitress described the specials, and Alex lit up immediately when she mentioned Maryland crabs that had been flown in that day.\n\n\"Do you mind smashing shells with a wooden hammer and creating a mess?\" he asked Shawnee.\n\n\"That sounds perfect,\" she answered. \"Kind of like this whole evening.\" Both Alex and the waitress smiled broadly.\n\nThis was really the first time they'd talked about themselves, so Alex took the opportunity learn as much as he could about her. Shawnee's parents met in Arizona. He mom had moved there from Brazil to look for work. Her truck broke down and was towed to a repair shop owned by a gentle man named Sam. Sam was an Apache Indian. He was smitten the moment the long dark legs emerged from the tow truck. He fixed her truck and told her the bill was either $50,000 or dinner with him. She flashed a wide smile at him, and he was hooked.\n\n\"So that explains where your exotic beauty comes from,\" he said.\n\nShe blushed and replied, \"I have to say my Mom is pretty hot. If I could look a tenth as good as her, I'd be happy.\"\n\nHe took her hand. \"You have to make me a promise ... right here ... right now.\"\n\n\"Okay ... what?\"\n\n\"Never ever for the rest of your life say anything derogatory about yourself or your looks.\"\n\n\"But ...\"\n\n\"No ... not one more word like that ... ever!\"\n\n\"That's not going to be easy. I've never thought of myself as attractive ... at least until I saw myself in your paintings.\"\n\n\"I'm certainly glad I could open your eyes, but all I do is paint what's already there.\"\n\n\"But, the way you see me is so different from the way I see myself.\"\n\n\"Then, wise up!\" She smiled shyly. \"We are not leaving this spot until you promise me. I mean it.\" She looked into his eyes and saw that he wasn't joking.\n\n\"Okay. I'll try.\"\n\n\"Nope ... not good enough. I want a promise.\"\n\nShe rolled her eyes a bit but held up her hand in a Girl Scout salute and said, \"Okay ... I promise not to put myself down anymore.\"\n\nHe smiled. \"Now, we have to seal that promise so it doesn't escape.\" He rose slightly from his chair and leaned in to kiss the soft full lips he'd fantasized about. The kiss was sweet and gentle ... just like Alex. She closed her eyes and didn't breathe until the kiss was complete. Her eyes remained closed for a moment even after he returned to his seat. He rested his chin on his hand and smiled, watching her reaction.\n\nShawnee sighed deeply and said, \"That was the best kiss ever,\" as she slowly opened her eyes. \"You can do that any time you want.\" Alex took the cue and leaned over to kiss her again. This time, she put her hands around his neck, and they opened their mouths so their tongues could meet. She loved the feel of his soft lips upon hers. She loved the way his tongue probed her mouth and invited her into his. That was the moment she realized she was falling in love with him.\n\nWhen they finally broke their embrace, the waitress waited momentarily for them to recover and then popped over to ask if there was anything else.\n\n\"Do you want some more wine or would you like to go back to either your place or mine?\"\n\n\"I think maybe just the check,\" she said to the waitress.\n\nThe waitress smiled and said, \"Right away.\"\n\nAlex and Shawnee went back to her place. She was acutely aware of what was about to happen, and she thought it might be easier to be in her own environment. Alex stopped on the way and bought a bottle of champagne.\n\nBefore the door to her apartment had even closed completely, Alex pulled Shawnee tightly into his arms and kissed her with a passion he didn't want to display in the restaurant. Shawnee's fingers weaved through his soft blond hair. She rubbed her thigh against the pronounced bulge in his pants and felt a small gush of liquid flow into her panties.\n\nAlex picked her slight body up in his strong arms and carried her into her bedroom. Their lips never parted during the journey. He laid her on the downy comforter and tossed his jacket to the side of the room without breaking eye contact. He moved beside her and wrapped his arms around her back and kissed her with an animal passion that took Shawnee's breath away. He stopped long enough to pull his shirt out of his pants and pulled it over his head. She surveyed his firm chest and tight abs. Then she threw her arms around his neck to renew their kisses.\n\nShe placed her hand over his cock, and Alex stiffened at her touch. He unbuckled his chinos and pushed both his pants and boxers down so she could touch his skin. Shawnee's eyes were closed as she began exploring the heat and ridges of his stiff penis. She cupped his balls and ran her hand up the entire length to the tip, which was leaking slick fluid. Alex used his feet to kick off the remainder of his pants luxuriating in being naked next to her.\n\nHe used one of his hands to slide the zipper of her dress all the way down. She pulled her arms from the garment and pushed it past her trim hips. Alex expertly unclasped her bra and slid one hand under it to finally touch the breasts and nipples he'd been seeing in his makeshift studio. Her breasts were smooth and firm. He didn't have to break his kiss to look at them since their cone shape and puffy caps were etched into his brain. As his fingertips explored them he mentally saw each freckle, the mole on the inside of her left breast, the soft underside curve as they rose off her chest and the dimples of her stiff nipples that always seemed to be at attention.\n\nShawnee lifted her ass off the bed and tugged the black pantyhose down her legs along with her thong. Alex didn't need any more of a hint. He thrust a hand between her silky thighs to touch the oasis he'd seen in his mind a million times since their encounter a few days earlier. It was everything he'd imagined. The swollen lips of her pussy invited his hand and his body into her most private chamber. She was so wet that he felt compelled to break off their kiss long enough for him to suck her nectar off his fingers. That act was so erotic that Shawnee unleashed another small gusher of clear liquid that ran down the crack of her ass.\n\nAlex began moving his head down her body and stopped to suck her nipple into his waiting mouth. She breathed deeply as he rubbed her nipple against his tongue. His journey continued as her heat and panting increased. He moved between her legs and felt his pulse quicken as he took in the full beauty of her pussy for the first time at such an intimate distance. She arched her back as he ran his tongue up the length of her soaked slit. His tongue fought past her labia to reach tantalizingly into her sex. He moved his mouth over her hood and gently coaxed her clit from its protector.\n\nHe inserted one, then two fingers into her and felt the unexpected barrier within. Shawnee stiffened as he hit the wall.\n\nShe rose up on her elbows and looked at him, and said, \"I'm sorry.\"\n\nHe was confused and asked, \"Sorry?\"\n\n\"This is my first time,\" she explained.\n\n\"We all have a first time, but what does 'sorry' mean?\"\n\n\"I thought you'd be disappointed to discover you were in bed with a virgin.\"\n\nHe stopped and moved up so he could look directly into her eyes. \"Shawnee, everything about you fascinates me. I can't stop thinking about you. I can't stop dreaming about you. I can't stop imagining how you look and feel and taste. I feel so honored to be invited into your bed that there's nothing you could possibly that would disappoint me. Can't you see that? Can't you feel that?\"\n\nA tear formed in her eye. \"I think so, but I was so afraid to let myself feel that way in case it wasn't true.\"\n\nHe put his hands on either side of her face and looked deeply into her eyes. \"Believe it. It is true. It is real. And, I hope I don't freak you out by saying this, but I'm falling in love with you.\" Her eyes flooded with tears. \"I don't even know how to describe the connection I feel with you. It's ... It's like a primal bond that starts with my heart and ends with yours.\" She was now sobbing. She moved his hand from her cheek to her mouth and kissed it. \"Are those tears of joy or tears of 'Oh, shit ... this dude is moving way too fast?'\" he asked.\n\nShe laughed at the concern on his face and in his voice. \"They're definitely tears of joy.\" His face softened in relief. \"When you kissed me at the restaurant so gently, I knew I was falling in love with you, and it scared me to death.\"\n\n\"Why?\"\n\n\"Because you're so handsome and talented and funny ... you could have anyone. I worried that you wouldn't want me.\"\n\nHe sighed. \"I wish I could pull you inside my heart so you'd know how I feel about you. I wish you could look out my eyes to see how beautiful you are. I wish you could feel my excitement every time you walk into a room. I wish you could feel how hard my dick gets every time I look at your stunning face and sexy body. I wish, Shawnee, you could see yourself the way I see you.\"\n\nShe smiled as she wiped her eyes. \"Give me time, my love.\" She reached down and wrapped her finger around his erection. \"Right now, I really want this inside me.\"\n\n\"Are you sure? We can always wait if you're not ready.\"\n\n\"I've never been surer of anything in my entire life. If you don't put this beautiful penis inside me this instant, I'm going to have to attack you!\" He smiled at her; she smiled at him.\n\nAlex moved between her legs, and Shawnee immediately wrapped them around his body. He kissed her while he rubbed the tip of his cock up and down her dewy gash. She held his head and continued kissing him as he began his cautious descent into her. Alex let her hands and her breath and her lips be his guide. He moved slowly in and out of her, letting her adjust to her first male invader. He inched his way until he hit her hymen.\n\nShe lifted his face so she could look into his eyes. \"It's okay, my love. I know it's going to sting, but I also know that sting will be replaced by passion.\"\n\n\"I just hate the thought of hurting you.\"\n\n\"That's what makes it okay,\" she said with a warm smile. \"Just kiss me make it one quick plunge.\"\n\nAlex began kissing her slowly and deeply. He pulled out and plunged hard into her. Shawnee gasped and squeezed her eyes shut. Once she'd relaxed and let out a breath, Alex looked at her with tears in his own eyes. She looked at him with deep love and used her thumbs to wipe away those tears. Then she kissed his eyes. \"Okay ... now I'm ready for the good stuff.\" He swallowed and smiled at her.\n\nHe began moving very slowly and steadily picked up speed as he felt her relax and begin responding to him. As he felt the walls of her vagina ripple and grip him, he kissed her neck and her ears. \"I love you, Shawnee,\" he whispered intimately to her. She kissed his cheek and pulled him tighter to her with both her legs and her arms.\n\nAlex'd had his share of lovers, but the intensity of this experience was new to him. He worked hard to bring them to simultaneous orgasm. He ground his cock and his pelvis into her clit with each stroke. He rubbed one nipple between his fingers and sucked the other. He felt her body give itself over to her carnal desires as she writhed against him. Alex felt his balls tighten and knew he wouldn't be able to hold back much longer. He wet his fingers with his mouth and moved his hand so he could gently massage her clit. Instantly, the added pressure pushed her to a new level of passion, as she panted and buried her head against his chest.",
        "Shawnee screamed as the first wave of pleasure exploded within her. She bucked wildly against his cock. Alex let himself go and shot his seed into her with such force that he felt light-headed as he growled. Shawnee ground against him unsure how much more of this pleasure she could consciously stand. Alex kept shooting semen into her, and each blast shook his body with a level of pleasure that was new to him. Shawnee finally arched her back and remained motionless for a moment before letting out two soft sighs and sinking onto the bed. Alex thrusted only a few more times before, he too, was spent.\n\nThey lay together for a couple of minutes recovering. They both knew they'd experienced something magical, and they each wrapped their arms around each other in tight embrace. When Alex's shrunken penis, surrounded by a sea of slippery fluid, could no longer defy gravity and slipped out of Shawnee's pussy, he rolled over so she lay atop him and pulled a blanket over her as she snuggled against him.\n\nAfter a listening to his heart slow to it normal pace and feeling his breathing return to its usual tempo, Shawnee said, \"I am SO glad I waited for you to be my first. I know no one else would have ever been so loving and kind to me. Thank you.\"\n\nHe squeezed her to him. \"That's like thanking me for breathing. I can't imagine treating you any other way.\" She squeezed him back.\n\n\"Obviously, I have nothing to compare it with ...\"\n\n\"Nor do you want to ... believe me, it's all downhill from here,\" he interrupted.\n\nShe continued while she laughed, \"I was going to say it's a shame they don't give gold medals for sex, because I don't need to have had any other encounters to know you're an amazing lover.\" She bit her lip and added, \"Alex, now it may be my turn to freak you out, but I'd be very happy if I never ever had the opportunity to have another lover.\"\n\nHe lifted her up so he could look at her and saw the scared little girl look on her face. He smiled. \"Do you really mean that?\" She nodded yes. He reached up and brushed the shiny licorice hair from her face and said, \"I think I can arrange that.\" She erupted in a huge smile and slammed her head back down onto his chest.\n\n\"That's good because I plan on keeping this delicious monster very busy for the next 70 or 80 years,\" she said as she rubbed his dick with the palm of her hand.\n\n\"I'm sorry that's not nearly long enough,\" he protested.\n\n\"Maybe not, but this is definitely long enough!\" she exclaimed. As he began to laugh, she covered his mouth with hers. They rolled around on the bed making out and touching each other until they were both sweating and panting.\n\n\"My girlfriends told me that the second fuck is amazing, so I want to be on top this time,\" she said as she swung her leg over Alex and lined up his shiny purple head with her dripping vagina. She closed her eyes and moved slowly but steadily down his shaft until she was completely impaled. \"Mmmmmm,\" she murmured as she wriggled on his cock. Alex watched her tits bounce and sway as she slid up and down his pole. He put his hands on either side of her hips. He arched his neck and licked her nipples with every down stroke. She began giggling at the sensation.\n\nAs the tension grew, the both closed their eyes. Alex relished the feeling of her velvety grip massaging him as she moved. When she dropped her head and her body began to tremble, he let himself go and painted her cervix with another series of milky blasts. Shawnee screamed and grunted as her orgasm detonated. She quickly realized she could prolong it by rubbing her clit slightly less harshly against him. She smiled as she relaxed against his chest. She liked being in control. She liked the feeling of having a cascade of semen drip out of her and run down the tender part of her inner thighs. It was hard to explain, but it made her feel more like a complete woman, especially when she was in the embrace of a man she so desperately loved.\n\nSuddenly, Alex rolled her onto the bed and sat up. \n\n\"What's wrong?\" she asked.\n\n\"Nothing. I just want to look at you ... really look at you ... every part of you,\" he answered as his eyes swept lovingly over her. \"I know I've seen you in the studio, but that was different. I want to be able to look at you as a man and not have to avert my eyes so I won't embarrass you or try to recall last night's box scores in the hope of keeping my cock from springing out of my pants.\" She laughed. \"I never want to forget the way your dark hair frames your angular cheeks and the way your rich chocolate eyes smolder in the candlelight.\"\n\nAs his middle finger moved slowly under her breast, he continued. \"I never want to forget the delicate curve of your breast or how the smooth plumpness of your areola feels against my tongue,\" he said in a low breathy voice, \"Or how bumps of your nipples feel against my lips.\" He kissed her nipples seductively.\n\n\"Oh, fuck!\" she panted.\n\nContinuing in his deep, intimate voice, he said, \"I want to lick your tight belly as I close my eyes and breathe in the intoxicating aroma rising from your pussy.\" He sensuously kissed, nipped, and sucked his way down her body toward her sex. He breathed deeply and moaned, \"Mmmmmm.\" Shawnee's head was thrown back and her eyes were closed. She alternated between biting her lip and gulping in air. Alex kissed and licked all around her rose, never quite touching her most sensitive areas.\n\nAs he kissed the delicate skin of her inner thigh, he glanced at her face. Shawnee's expression made him happy. She was caught in a whirlpool of sensual delight. \"I want to feel your strong womanly legs wrapped around me,\" he whispered as he kissed the underside of her knee and nipped her calf. He worked his way to her left foot and sucked her long toes into his mouth. He reversed his actions with her right leg and moved enticingly toward her dripping vagina.\n\n\"I want to coat my tongue with your honey,\" he whispered as the broad face of his tongue finally made contact with her aching sex, moving from valley to crest. Bit by bit, he ran the tip of his tongue along the deep crevices outside her labia. He took her entire clitoral hood into his warm mouth and bathed her sensitive organ with his saliva. He lightly flicked the smooth nub with the end of his tongue, and she gasped.\n\nAlex put her legs on his shoulders, lined up his cock and plunged deeply within her, knowing she was so wet he would easily slide to the base of his penis in one stroke. Shawnee arched her back at his abrupt intrusion and gasped as she was filled with his pulsing organ. His thrusts were firm and fast in sharp contrast to the soft slow build-up of his kisses. Shawnee clutched the sheets beneath her and rose to meet his strokes. Their previous lovemaking was borne out of gentleness. This, however, was an act of passion. It was raw; it was powerful. Shawnee loved having her body ravaged by Alex. She no longer needed his words to assure her of his love. She felt it. His aching appetite for her swallowed her whole and enabled her body to respond to his in a new way.\n\nThis time, Alex emptied his mind. He released all conscious control over his body and allowed his carnal urgency to drive him. He pushed harder and deeper into Shawnee. Her abs and butt flexed and relaxed in rhythm to his thrusts.\n\nWith no warning, Alex unleashed a sudden torrent of semen into her. Shawnee, who'd been at the tipping point for awhile, screamed in response and bucked savagely, repeatedly smashing her engorged clit against him. Alex held her tight hips as he drove his cock as deeply within her as possible, bathing her cervix with gushers of his seed.\n\nTheir lovemaking ended almost abruptly as it had begun. Alex pulled out and collapsed next to her. Both were blanketed with sweat and sticky fluids. He never even opened his eyes. He simply reached for her and clutched her fiercely to his chest. He pulled a sheet over them, and they fell into deep, deep sleep together.\n\nAs the mid-morning sun split the curtains in Shawnee's bedroom and sprayed across Alex's face, he slowly awoke, looked around, and smiled once he realized where he was, who was in his arms and what they had done the night before. Shawnee had not stirred, so he made himself content by looking down at her, smelling her hair, and gently rubbing his fingers along the silken strands of her thick mane. It took another 45 minutes before Shawnee began stirring. Similarly, it took her a moment to realize she was in Alex's arms and to feel a womanly soreness between her legs for the first time. She smiled and hugged Alex tighter at the memory.\n\n\"I think we missed our 7:00 am portrait session,\" he said as he stroked her hair.\n\n\"For a very good cause,\" she added with a slight giggle. She turned to look up at him, and they kissed lightly. As she laid her head back on his chest, she looked down and noticed the sizeable ridge that had formed beneath the sheet. She slipped her hand under the sheet and wrapped her finger delicately around his morning erection. \"Does this thing ever sleep?\"\n\n\"Sometimes, but I have a sneaking suspicion he's rarely going to rest when you're around ... especially when you're naked.\"\n\n\"Mmmmm ... that sounds good. I would love to go for a ride this morning, but I may have to soak my pussy in ice for a few days after last night.\"\n\n\"Totally worth it,\" Alex said with a smile.\n\nShawnee pulled back the sheet. \"Of course, I do hate seeing him look so hopeful.\" She grinned at Alex and sunk the shiny soft purple head of his dick into her mouth. Alex moaned and pushed his cock toward her. Shawnee reached over to her nightstand and grabbed some lotion. She squirted a stream of cool lotion onto his hot skin and worked her hands up and down his thick shaft. It didn't take long for Mt. Alex to unleash his load onto his chest. Shawnee jumped up to get a warm cloth to wash him.\n\n\"Some day I'll figure out how to deal with your huge loads so I can take more of you in my mouth,\" she said shyly.\n\nHe reached up for her, and she lay on his chest. \"Now, repeat after me. Orgasms are good.\"\n\nShe rolled her eyes and said, \"Orgasms are good.\"\n\n\"I don't apologize when I make my lover cum. Say it.\"\n\n\"I don't apologize when I make my lover cum.\"\n\n\"Oh, you're such a smart girl!\"\n\n\"And, you're such a smart ass!\" she said as she tickled him.\n\nHe fought her off as he laughed. He kissed her, and then asked, \"How about a shower?\"\n\n\"And some teeth brushing,\" she added.\n\nThey got in the warm shower and giggled like kids playing and rubbing each other. Alex asked whether she thought the two of them could fit in the tub, and they turned off the shower and filled the tub with bubble bath. As they lay back to soak, Alex took one of her feet and rubbed it and kissed it.\n\n\"Mmmm ... that feels good,\" she said with her eyes closed.\n\n\"Plus, I get a much better angle to stare at your pussy,\" he teased.\n\n\"Watching you in art class, I never expected you to be so horny,\" she said.\n\n\"All artists are horny. Why do you think there are so many paintings and statues of naked women?\"\n\nShawnee laughed and asked, \"What about all that stuff Barnes was talking about the other day. True art is but a ...\"\n\n\"... Shadow of divine perfection. That's a quote from Michelangelo. He was one of the biggest horn-dogs around!\"\n\n\"So, I shouldn't be worried about your obsession with my pussy?\" she teased.\n\n\"If I'm ever not obsessed with it ... THAT's when you need to worry!\"\n\n\"Then I'm one worry-free girl!\"\n\n\"Amen.\"\n\nShe stepped out of the tub and retrieved shaving cream and a razor and proceeded to lather Alex's face and give him a shave.\n\n\"Feels good,\" he said, rubbing his hand over the smooth skin. \"Thanks! Now, I'd like to return the favor.\"\n\nShe wrinkled her brow and looked at her legs, thinking they didn't need shaving yet. He followed her eyes and smiled. He picked up one leg and kissed her calf as he placed her foot on his shoulder. \"I wasn't talking about these.\" Shawnee rolled her eyes and smirked as the light bulb went off in her head.\n\n\"Oh, brother! Where do you want me?\"\n\n\"Anywhere I can get you!\" She splashed him. \"But, for the shave, just sit on the edge of the counter.\" He got out of the tub and folded a towel, which she used as a cushion. He closed the bathroom door to hold in the heat. He smiled broadly as he surveyed her treasure.\n\n\"You're just a little too happy about this.\"\n\n\"I know.\" He squirted some cream into his hands and lathered her private area. Then, he expertly removed all the hair surrounding her pussy, even getting into the folds. At one point, he looked up at her and explained, \"I had one girlfriend who really got off on having me shave her, so I became pretty good at it.\"\n\n\"I have to admit it is pretty sexy to have someone shave your privates.\"\n\nAlex patted her dry and rubbed aloe on her delicate, hair-free skin. Then, he stood back, smiled, and admired his masterpiece. \"Botticelli would be brought to tears at such a lovely sight!\"\n\nShe rolled her eyes. \"You are so full of shit.\"\n\nHe pulled her off the counter, twirled her, and laid her back as if they were performing a Tango. \"I may be full of shit, my love, but I also have the hots ... for you!\" he said with a cheesy fake Italian accent, which made her laugh. He raised her up, and they kissed.\n\nThey finished drying each other off, and Shawnee dried her hair. Meanwhile, Alex looked through her closet and shook his head. He walked back into the bathroom holding a pair of her overalls.\n\n\"I'm sorry, but these don't work for me anymore. You can only wear them if you're wearing nothing underneath.\"\n\n\"Think that would get Snape's attention?\" she asked as she turned off the hair dryer.\n\n\"I don't know, but it would certainly get his attention,\" Alex said as he pointed to his penis.\n\nShe walked into his arms and asked, \"Yeah, like that's so hard.\"\n\nAlex rubbed himself against her and said, \"It is actually.\"\n\n\"So, what are you going to wear, considering that your dong seems to be giving me a standing ovation 24/7?\"\n\nAlex looked as if he was deep in thought for a moment and replied, \"I'm thinking kilts.\" \n\nShe laughed and rubbed his boner. \"That would provide easy access.\"\n\n\"I love it when you read my mind.\"\n\nShawnee shook her head as she took the overalls from him and started walking into her bedroom. He sneaked behind her and tickled her, causing her to fall onto the bed. He plopped beside her.\n\n\"We just got out of bed!\"\n\n\"I know, but if we go outside, I just know you'll cover up that delicious body, and that thought makes me sad,\" he said pretending to wipe away a tear.\n\n\"But, I'm starving!\"\n\n\"Can't you survive on love?\"\n\n\"Love and Ceaser salad sounds a whole lot better,\" she said as she kissed him and rose off the bed.\n\n\"OK, but I get to dress you. And, by the way, we need to do some serious shopping for you!\" He picked out a tight midriff-baring top, overalls and a thong.\n\n\"You're crazy! I'll get arrested!\"\n\n\"Girls wear this stuff on campus all the time,\" he protested.\n\n\"Yeah, but they're ...\"\n\n\"... pretty?\" he asked, completing the thought and staring at her.\n\n\"I wasn't going to say ...\" He arched one eyebrow. \"Okay, maybe I was going to say that, but I can't walk around essentially naked in public. I'm wearing shorts under the overalls!\"\n\n\"There, there, Mr. Winky. Don't cry,\" Alex said in a soothing voice as he petted his penis.\n\nShawnee raised her eyebrows and looked at him as she dressed. \"Mr. Winky, is it?\"\n\n\"Yeah, you know ... one eye ... always squinting.\"\n\n\"You're a nut! And, unless you want to introduce Mr. Winky to Bubba who's sharing a cell with you, you might want to put on some clothes yourself.\"\n\nAt Alex's apartment, he changed but also packed a bag with several more outfits, since he didn't plan on leaving Shawnee's side any time soon. \n\nThe next morning, they awoke early and went to the setting for the last portrait. Shawnee changed and walked to the bench. Alex asked her to lean over like she was going to pluck a flower. When she did, the strap of the gown slid down her shoulder and exposed her left breast. Alex waited for her to fix it, but she didn't move.\n\n\"Aren't you going to cover yourself?\" he asked.\n\n\"Only if you think it would make a better portrait.\"\n\n\"Seriously? You're okay with this?\"\n\n\"Alex, I trust you with my life, and I certainly trust you to make the best portrait possible.\"\n\n\"Stay right there!\" He hurriedly retrieved his camera equipment and took a series of shots with different lighting. Then, he went in to look at them on his laptop. He came out smiling.\n\n\"I've got a great idea, and I'll be able to finish the series from the photos I just took.\"\n\n\"Great! Can I see them?\"\n\nHe smiled. \"In due time, my love.\"\n\nFor the next couple of weeks, Alex and Shawnee were very busy with school. She got caught up on all the work she'd missed, and Alex worked feverishly to complete his series. She protested taking the money he'd offered her, but he absolutely insisted. She did take his advice and told Barnes she was quitting. The two of them met every night for dinner and basically began living together out of her apartment.\n\nOn a Friday afternoon, Shawnee came home from school and found a gorgeous red party dress on the bed along with a pair of elegant black shoes and her hiking boots. She also found a note that read, \"Wear those ... bring these. Pick you up at 7:00. Love, Alex.\"\n\nAt precisely 7:00, the front doorbell rang. She finished putting in her second ear ring and went to answer it. Alex was standing there grinning in a tuxedo ... and hiking boots. \"You live here now. Why are you ringing the doorbell?\" she asked.\n\n\"I know, but this was more fun.\" He kissed her cheek and handed her a bouquet of tulips he had behind his back.\n\n\"They're beautiful! Let me put them in water.\"\n\nAlex drove them to the cabin and used a flashlight so they could see where to walk. Inside, he flicked a switch, and a series of small spotlights lit up each of his paintings. They were all framed and were hung in order along a couple of walls. Shawnee gasped when she saw them. She beamed and kissed Alex before running over to look at each of them in detail. While she perused them, Alex lit candles and opened a bottle of champagne.\n\nThe series included different angles and settings of a woman who looked as if she was waiting for a long lost love. Shawnee was in awe of Alex's talent. She couldn't believe the exquisite creature in those paintings was her.\n\n\"I'm speechless, Alex. Seeing them all together like this takes my breath away.\"\n\nHe smiled broadly at her approval and handed her a glass of champagne. \"The best part is that I got an A for my thesis project and have been offered a scholarship to work on my MFA and doctorate if I choose. So, while you're in medical school, I'll be right here with you. Plus, a teaching stipend goes along with it, so we'll actually be able to buy food!\"\n\n\"Oh, Alex, that's wonderful! I'm so proud of you!!\" She hugged him so hard she practically knocked him over and gave him a huge kiss. \"What did Snape say?\"\n\nAlex chuckled. \"I always figured he was gay, but seeing his reaction to the portraits, I think I can safely put that theory to rest.\"\n\n\"Yuck.\"\n\n\"Such is the price of ravishing beauty, my love.\" He escorted her to the sofa and she noticed the inflatable mattress, pillows, and blankets in the corner. She looked at him and arched an eyebrow. He smiled innocently and shrugged. Then, they changed shoes, and Alex played a CD through his computer while they danced.\n\nLater, he opened the cooler and pulled out two cold crab dinners from the restaurant where they'd had their first meal together. As they started the second bottle of champagne, they moved to the mattress. Alex slowly undressed Shawnee, stopping to kiss each body part as it was revealed to him. Once she was naked, she returned the favor and disrobed him.",
        "He switched the CD to one of Dean Martin love ballads and returned to bed. He kissed her as if it was for the first time. He squeezed her breasts and rolled her nipples between his fingers. She pulled him on top of her so his cock would be pressed against her sexual flesh while they kissed and touched. As an unspoken cue passed between them, he began entering her. He made love to her with great care, his lips only leaving hers when the ecstasy of their orgasms rendered them incapable of continuing their embrace. Then, he kissed the top of her head and pulled her close to him. She cuddled against his chest in a now familiar position.\n\n\"I'm gonna miss this place, you know,\" she said as she absentmindedly played with the hair on chest.\n\n\"We'll always have a piece of it with us,\" he replied. Alex got up and went into the dressing room and brought out an additional painting. It was a portrait of Shawnee from a much more intimate angle as she'd sat on the bench by the creek. The frame was made from wood from the cabin.\n\n\"Oh, Alex, that's so beautiful! How did you do that?\"\n\n\"I just 'borrowed' some of the wood from the cabin that wasn't rotten and took it to a craft shop so they could make the frame. This is for us, Shawnee ... for our bedroom.\"\n\n\"Oh, Alex, it's perfect,\" she said as tears welled up in her eyes. \"Thank you.\"\n\nHe then reached into the pocket of his tuxedo jacket and pulled out a jewelry box. He opened it and showed her an elegant white gold necklace that held two entwined hearts as a pendant. He put it around her neck and smiled when he saw how it looked on her.\n\n\"This isn't a formal proposal. That will come later when we're out of school. This is a symbol of us and a promise I make now to you that I will love you and no other for all time.\"\n\nShe clutched him and sobbed into his chest until she could regain some composure. She managed to choke out, \"And, I you.\"\n\nHe wiped away her tears and said:\n\nI arise from dreams of thee\nIn the first sweet sleep of night,\nWhen the winds are breathing low,\nAnd the stars are shining bright.\nI arise from dreams of thee,\nAnd a spirit in my feet\nHas led me -who knows how?\nTo thy chamber-window, Sweet!\n\n\"You're overwhelming me,\" she said.\n\n\"No. I'm just cherishing you, Shawnee, the way you deserve to be cherished.\"\n\n\"Every time I think I love you as much as any human's ever loved another, you do something like this and make me love you even more.\" She kissed him gently. \"Thank you for this perfect night and for the perfect treasure you are to me. That poem is beautiful. What is it?\"\n\n\"It's The Indian Serenade, written by Shelley. I love the poem, and I thought it was appropriate for my Indian bride-to-be.\"\n\nShe teared up again and said, \"I don't know which is wetter, my eyes or my pussy.\" Alex broke out laughing at the remark. They lay back on the mattress in each other's arms. \"I'll never be able to tell any of my female friends about the things you do for me, you know.\"\n\n\"Why not?\"\n\n\"Because they'll all be so jealous they'll either have heart attacks or they'll try to steal you away from me.\"\n\n\"Steal me away, huh? So, what do these friends of yours look like?\" he teased.\n\n\"Don't even think about it. Besides, where else are you going to find a pussy like this?\"\n\nHe laughed out loud and replied, \"Touch\u00e9!\"\n\nShe cuddled against him and said, \"When I was a little girl, alone under the covers at night, I'd sometimes fantasize about my knight in shining armor and wonder what he'd be like. I never imagined that it would be a tall blonde artist with piercing blue eyes who would sweep in to carry me away. What did you dream about?\"\n\nHe held her close, kissed the top of her head and answered, \"I dreamed of you, my love. I dreamed of you.\""
    ],
    "authorname": "LSanders",
    "tags": [
        "first love",
        "masturbation",
        "oral sex",
        "lovemaking"
    ],
    "category": "First Time",
    "url": "https://www.literotica.com/s/the-indian-serenade"
}
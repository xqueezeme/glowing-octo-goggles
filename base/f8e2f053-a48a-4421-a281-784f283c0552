{
    "title": "The Vampire and the Goth Ch. 17",
    "pages": [
        "There was a time when werewolves, like other wolves, shared a den. More specifically, they shared living quarters as a group. Werewolves don't live communally anymore, but they still live near each other, usually in a small settlement or village. Wherever the pack lives, however, the alpha house is always the center of their community. It's usually more of a mansion than a house, and it's meant as a place for meetings and events as much as it is a residence for the alpha and their family. When Patrick told us that we were coming to the pack lands, I knew we were going to be expected to stay in the Alpha house.\n\nWhen we arrived, the sun had just begun to come up. The alpha house looked like a very large ski lodge with lots of exposed wood and rock. It was exactly what you might expect a werewolf alpha house to look like. \n\nAlthough it was barely dawn, it wasn't a surprise to me that there were a lot of wolves around. However, the number of wolves seemed to unnerve David. Angus held his hand tightly in a gesture that was comforting but was also meant to make sure that he didn't run away. As we walked to the house, there was a female with long black hair standing at the door waiting for us. Patrick ran ahead, taking the stairs two at a time, grabbing the woman and giving her a long, deep kiss, almost knocking her off her feet. She recovered quickly and greeted us with a broad smile while Patrick stood next to her with his hand around her waist.\n\n\"Hello! I'm Marcia Collier, Madam Alpha of the Collier pack and Patrick's mate. We've been expecting you. Please come in.\"\n\nMarcia was a tall, willowy brunette with beautiful, coal-black eyes and a prominent nose that gave her an aristocratic appearance. However, she was warm and friendly, even by werewolf standards, and she greeted me with a hug and a kiss on the cheek. \n\nThe primary role of an alpha's mate is to make sure that members of the pack and their guests are comfortable and happy. It was easy to see that Marcia excelled in these duties -- nurturing seemed to be a big part of her personality.\n\nAfter she hugged and kissed me, Marcia said, \"It's so nice to meet you. I've never met a vampire who was friends with werewolves before.\"\n\nI nodded. \"My people don't know what they've been missing.\" \n\nMarcia smiled at me and said, \"Please, introduce me to your friends.\"\n\n\"This is my best friend, David, and his mate Angus,\" I said. Marcia beamed as David kissed her hand and Angus exposed his throat in a gesture of greeting and respect the wolves call scenting. Once Marcia scented Angus, she hugged and kissed him on the cheek.\n\n\"It's an honor to host what must be the first mated pair between a werewolf and a vampire. Welcome!\"\n\nEveryone smiled, and I continued with the introductions.\n\n\"This is Honoria, William, and Skye, who are visiting from a pack in Maryland.\"\n\nThe visiting wolves stepped in front of Marcia and made the same gesture Angus did. Just as she had with Angus, Marcia hugged and kissed each of them after scenting them. \n\n\"This is my sister, Jadwiga, and her mate, Carlos,\" I said. Marcia smiled broadly. \"Oh, this is a pleasure! It's unusual to meet a pair of vampire siblings.\"\n\nJadwiga looked a little overwhelmed as Marcia gave her a hug and a kiss on the cheek, then turned to Carlos and said, \"You're still human?\"\n\nCarlos smiled at Marcia. \"Yes, ma'am, I am still human, for now, at least. Stosh's mate is also human.\"\n\nElizabeth had been standing behind me. Marcia beamed at her as I stepped out of the way. \"We've met before, at Ben's mating ceremony. Is your sister also here?\"\n\nLaura moved to stand next to Elizabeth. \"Yes, I am. It's nice to see you again.\"\n\nMarcia pulled both Laura and Elizabeth into hugs. \"You're both welcome here. Our diet is very meat-heavy, but if there's something else you'd like, please let me know and we'll take care of you.\"\n\nPatrick put his arm around Marcia's waist once again and announced, \"I want to welcome all of you to our pack and to our home. We're grateful that you're taking the time to help us settle this unhappy situation with our packmate.\"\n\n\u201eTo nie tak, \u017ce da\u0142 nam opcj\u0119,\" David muttered under his breath, complaining in Polish that Patrick hadn't given us the option not to come. Jadwiga giggled under her breath and I smiled at him, while Angus gave him a dirty look.\n\nI doubt Patrick understood David's smart-ass remark, but even if he did, he ignored David just the same.\n\n\"We've made accommodations for all of you. My son, Jamie will show you to your rooms,\" Patrick said, gesturing to an adolescent male wolf standing next to him. \n\n\"Dad!\" the young man hissed.\n\n\"Sorry, sorry, his name is James,\" Patrick said, in an exasperated voice. We chuckled at the interaction and Patrick gave us an awkward smile.\n\n\"He'll also show you to our dining room, where breakfast will be served in about an hour. For those who wish to eat breakfast, of course.\"\n\nWe were shown to our rooms which were all in the east wing. Our room was large and comfortable, dominated by a brass bed. It had too many pillows for my taste, but the mattress was surprisingly soft. As I laid down, I heard Elizabeth say my name.\n\n\"Stosh... STOSH! Wake up!\"\n\n\"Huh? Wha-?\" \n\n\"What happened with your brother and Jadwiga? I didn't want to ask in front of everybody,\" she said.\n\nI was a little surprised by how blunt Elizabeth was, but she had no way of knowing that the situation was so uncomfortable. I took a deep breath and said, \"Okay... Janek and Jadwiga have been feeding off each other's blood.\"\n\n\"Oh,\" She almost sounded disappointed. \"I was worried it had something having to do with sex.\"\n\n\"It does have to do with sex,\" I said.\n\nShe looked confused. \"How can that be? You gave your sister blood when she showed up at our apartment.\"\n\nI smiled to myself hearing her refer to our apartment and I kissed her lightly.\n\n\"It's one thing to give blood to someone to heal them like David and I did with Jadwiga. It's another thing to exchange blood with someone who doesn't need to be healed. That's something that happens usually right before or during sex.\"\n\nElizabeth frowned. \"Ew.\"\n\n\"Yeah,\" I agreed.\n\n\"So when you bite me and drink my blood when we're having sex...\"\n\n\"It enhances the pleasure of sex for me. And after you become a vampire, it will for you, too,\" I smiled.\n\nElizabeth giggled. \"I kind of like it when you do that to me now.\"\n\nI laughed. \"It will be so much better after you're a vampire, I promise. But now, I've got to get some sleep.\"\n\nShe kissed me gently and rolled over.\n\nI woke up in the afternoon to the sound of Elizabeth, Laura, and Skye talking.\n\n\"You have to see the buffet they laid out, Sis! So much meat!\" Laura said, with a voice full of wonder.\n\n\"Wolves like to eat well,\" Skye laughed.\n\n\"Okay, okay, I'll check it out. Just let me get dressed and wake Stosh up.\"\n\nI rolled over and smiled. Skye winked at me. \"He's already awake.\"\n\nElizabeth leaned over and kissed me. \n\n\"There's a party in the main hall, and we're going to check it out. Do you want to come?\"\n\n\"Sure,\" I said, as I rolled out of bed. \n\nAs we walked down the hall, I could hear happy chatter and smell cooked meat. Laura started talking about werewolf physiology, and I couldn't help but notice that she and Skye were holding hands.\n\nWe walked into the main hall and found the party. Musicians were tuning up in one corner and food and drinks were everywhere. There was a large pine tree and boughs of greenery were on almost every surface, along with holly and candles. The atmosphere was very festive, and everyone looked like they were in a good mood.\n\nThere was a small crowd surrounding Jadwiga and given the laughter and smiles, it looked like she was the life of the party. Meanwhile, Angus and David were talking to another couple near an enormous fireplace that seemed to have been made from river stones. Angus was deep into the conversation, but David looked more than a little bored. When he saw us, his eyes lit up. \n\n\"Hey! There's Stosh!\" David said with a smile and a wave. Elizabeth and I waved back at him and they began to walk toward us.\n\nSkye said, \"They make a cute couple.\"\n\n\"Yes, they do. But we're cuter,\" Laura giggled, kissing Skye on the cheek and making her blush.\n\n\"Hi, guys. Great spread, isn't it?\" David asked as he walked up to us. I loved how happy he looked as he held Angus's hand. \n\nWe all nodded in agreement, and Elizabeth looked around and remarked, \"I didn't know werewolves celebrated Christmas.\"\n\nAngus laughed. \"This isn't for Christmas - we're celebrating the lunar eclipse.\"\n\n\"Yeah, and tonight is a full moon. It's the first full moon after the winter solstice, so you know what that means,\" Skye said, with a smile.\n\nAngus, Laura, and I all said at once, \"The Wolf Moon!\"\n\nSkye laughed. \"Yes, the first full moon after the winter solstice is called the Wolf Moon. This year, it's also an eclipse.\"\n\n\"So it's a big deal,\" I said, with a grin.\n\nLaura looked around appreciatively and said, \"It does look a lot like Christmas though.\"\n\n\"Most of what are considered Christmas traditions were originally pagan,\" Marcia said, as she joined our group. \"And like the pagans, wolves love trees and greenery.\"\n\nWe all greeted Marcia as she smiled and hugged everybody. \"It's good to see you here. I was worried you would feel a little lost in the crowd.\"\n\n\"Well, nobody does hospitality like werewolves,\" I smiled. Marcia practically beamed, obviously proud of the effort the pack had put into the decorations.\n\nDavid took a deep breath. \"It smells amazing in here!\"\n\nMarcia grinned. \"Thanks! We put a lot of work into it yesterday.\"\n\nI smiled, remembering the werewolf parties I went to when I lived in Europe. Then I noticed that Elizabeth was frowning.\n\n\"What's wrong, lovely?\" I asked.\n\nElizabeth sighed and said in a low voice, \"Everybody's staring at us.\"\n\nI looked around and she was right. People were trying to be subtle about it, but we were attracting a lot of attention.\n\n\"Stosh is a celebrity,\" David laughed. I scowled at him and said, \"That's not helping.\"\n\n\"Wolves are an inquisitive people. Most of them have never met a vampire, especially one that's been as good to our people as Stosh has,\" Marcia smiled.\n\nIt was flattering to hear her say it, and I had no doubt that she meant it, but Elizabeth found the attention upsetting, and that was uncomfortable for me. Most people were trying their best to not make it obvious, but, as Marcia said, werewolves are naturally curious, even nosy, creatures and it was hard to not feel as though I was on stage. I've lived with wolves before so it didn't bother me that much, but it really bothered Elizabeth, who looked ready to jump out of her skin. I put my arm around her waist and kissed her.\n\nSkye put a hand on Elizabeth's shoulder. \"It's okay, honey, no one here is going to hurt you. They're just curious, that's all,\" Skye said, in a soft voice.\n\nElizabeth gave a shaky sounding laugh. \"I know, I've been here before, and it wasn't that long ago. It's just that there weren't so many people staring at me the last time I was here. Also, I was pretty buzzed.\"\n\nSuddenly, Michelle's brother, Ben was standing in front of us.\n\n\"Madam Alpha,\" he said, baring his neck to Marcia, who scented him and smiled. Then he turned to Elizabeth. \"Hi, gorgeous! I didn't get to talk to you at my mating ceremony but it's good to see you!\" He hugged her and kissed her on both cheeks, and, smelling her fear, looked closely at me.\n\n\"She's a little nervous,\" I said. Ben nodded with a smile. \n\n\"Stosh, would you mind if I borrowed her? I'd like her to meet my mate, April. She's in the library, where there's a lot fewer people.\"\n\nI smiled at Ben. \"I don't mind. Elizabeth, would you like to meet Ben's mate?\"\n\nElizabeth looked a little dazed. \"Okay.\" \n\nAfter Elizabeth left, Marcia turned to David and me. \"I'd like to introduce you around. Maybe that will help with the staring.\"\n\nAngus looked at Skye and said, \"I thought I saw some Glenlivet nearby. Why don't we find it and share it with your family?\"\n\nSkye laughed. \"Or, we could just drink it ourselves!\" Angus winked at her in agreement, and Laura laughed. \"You guys go enjoy yourselves, I'm going to catch up on my sleep. I'm a little too old for this vampire schedule.\"\n\n\"You sure, babe?\" Skye asked.\n\n\"Yes, I'm sure. You guys enjoy yourselves,\" Laura said with a smile. She kissed Skye lightly and left. Once Laura went back to their room, Skye and Angus wandered off in search of Scotch.\n\nAfter Angus and Skye left, Marcia made a point of introducing us around. Werewolves are very touchy, so we were hugged and scented and even kissed on the cheek and the forehead. I knew what to expect, but David looked a little rattled. Marcia noticed it and suggested that we catch up to Elizabeth and Ben. \n\n\"The library is just down the hall and to the right. It's a smaller room, so there should be fewer wolves.\"\n\nI smiled and thanked her. \n\nAs we headed toward the library, David asked, \"Are they always like this?\"\n\n\"Yes, they are. It's worse before a big lunar event, though. If this freaks you out, you really don't want to be here on the solstice.\"\n\nHe looked worried. \"That bad, huh?\"\n\nI smiled. \"Yikes.\"\n\nThe library was much less crowded than the main hall. We saw Elizabeth sitting near a window with Ben and a beautiful female who had hair that was so light blonde it was almost silver. Elizabeth saw David and me and waved us over. I hugged Ben and sat down next to Elizabeth, kissing her on the cheek.\n\n\"Stosh, this is my mate, April,\" he said proudly. \"Stosh is Elizabeth's mate.\"\n\n\"Hello,\" I said and leaned in so she could scent me. \"This is my best friend, David. This is his first time around a pack, and he's a little freaked out.\"\n\nDavid glared at me, then he bowed to April. He took her hand and kissed it. \n\n\"It's lovely to meet you, ma'am. I apologize for my friend being an idiot.\"\n\nApril laughed. \"It's okay. You two are the first vampires I've ever met, and I'm a little freaked out, too. So, how do you know Ben?\"\n\n\"This is the first time I've met Ben, but Stosh knows him,\" David said, putting the ball firmly in my court. April looked at me, her face a complete blank. I looked at Ben and he gave me a weak smile. \"Stosh was there when Michelle had her first freak out.\"\n\n\"Oh, I see,\" April said, a look of recognition in her eyes.\n\n\"I think David was there when she betrayed everyone with that other vampire,\" Ben said.\n\nDavid gave a weak smile. \"I was there. We all were.\"\n\nWerewolves are very loyal people and they don't accept any treachery, so I wasn't surprised when Ben said, \"I'm sorry she did that to you, and I'm glad you've decided to come for the hearing.\"\n\n\"Thank you,\" I said. \"I know how difficult it is to have a sibling turn like that.\"\n\nBen nodded at me. \"You get it.\"\n\nI nodded back. \"Yeah.\"\n\nApril gave me a questioning look, so I said, \"The other vampire Michelle invited into the house is my brother.\"\n\n\"Oh. Wow, that sucks.\"\n\n\"Yeah.\"\n\nWe were silent for a moment, and then David said, \"Hey, it's getting kind of serious in here. Let's drink to being the better sibling,\" Suddenly, he produced a bottle of bourbon from out of nowhere.\n\nBen and I laughed, and after a moment, we were all passing around the bottle and feeling happy again. I've always admired David's ability to navigate even the thorniest social interactions.\n\nWith a smaller room, and fewer wolves around, Elizabeth was noticeably more relaxed and was starting to really enjoy herself. Ben and April were very much in love, and I think they enjoyed the relative quiet as well. David took advantage of their openness to ask questions about werewolf society until suddenly we heard a howl followed by happy yipping in the hallway. Angus came into the library in his wolf form, chuffing as he walked toward David.\n\n\"I think the moon just rose,\" I said.\n\nBen smiled. \"Time to party!\" Ben and April disrobed in front of us and shifted to their wolves, with April becoming a gorgeous silver-grey animal.\n\n\"April, your wolf is beautiful!\" Elizabeth said, and April chuffed, stepping lively in front of her. \n\nElizabeth looked at me. \"Is it okay if I pet her?\"\n\nI laughed. \"It's up to her!\"\n\nApril moved her head under Elizabeth's hand, and Elizabeth scratched behind her ears while April wagged her tail and gave a big, wolfy smile. Then, April and Ben left to go to the bonfire.\n\nAngus shifted back to his human form. \"Do you want to follow them?\" \n\nDavid laughed. \"Sure, it sounds like it's going to be a hell of a party. Are you guys coming?\"\n\nI looked at Elizabeth, and she seemed uncertain. I put an arm around her waist. \"Want to go? Or would you rather have some alone time with me?\" I wriggled my eyebrows at her.\n\n\"Oooh... you mean sexy time?\" Elizabeth said with a wink.\n\n\"Maybe. We can see what comes up.\"\n\nElizabeth laughed, then turned to David and Angus. \"I hope you guys don't mind, but I think I need a break from werewolves for a little while. You guys are nice, but kind of intense.\"\n\n\"No shit!\" David said.\n\n\"Oh, shut your gob, you love it!\" Angus retorted as he shifted back into his wolf.\n\nDavid gave me a wicked grin. \"You've got to love those animal passions!\" He laughed as Angus nudged him out the door.\n\nElizabeth and I started to walk back to our room, listening to the sounds of the party outside.\n\n\"I'm sorry for being such a wimp,\" she said.\n\nI smiled at her. \"You're not a wimp. And anyway, werewolves are exhausting. They're great in small doses, but too much is just too much.\"\n\nSuddenly, Jadwiga ran past us, nearly knocking us down. \"Sorry guys,\" she said. Then she looked down the hall at Carlos, who was running to catch up with her but was laughing too hard to move quickly. \"Hurry up Carlos! The party will be over by the time we get there!\"\n\n\"God damn it Jadwiga, slow down!\" Carlos yelled, with a big grin.\n\nJadwiga waited for a moment, then she turned to us and said, \"See you at the bonfire!\" and took off running.\n\nI laughed and shook my head as Carlos reached us. \"You don't have to be in such a hurry, I'm pretty sure she wants to get caught,\" I said with a wink. Carlos started to laugh, and nearly fell over. \n\n\"I know, I know, but she's so fun to chase!\" Then he looked at us and realized we weren't heading outside. \"Hey, aren't you guys going to the party?\"\n\n\"No, we're going to have a nice, quiet evening in our room,\" I said, but then Elizabeth asked, \"Are you sure you don't want to go?\"\n\n\"I've been to a lot of werewolf parties. There's music, dancing, and drinking, but there's also a lot of play fighting and rutting. It's pretty chaotic.\"\n\nElizabeth looked down with an uncertain smile, and I realized that maybe she was having second thoughts about not going.\n\nI smiled at her. \"You know, we could go for a few minutes and look around.\"\n\n\"Do you think that would be okay?\"\n\nI winked. \"Sure! Werewolves aren't exactly formal people. If we stay on the edges of the excitement, we won't be in anyone's way and if you feel like it's too much we can leave quickly.\"\n\nElizabeth smiled. \"That'd be nice.\"\n\nCarlos let out a deep sigh. \"Cool. I'll walk with you. That will give me time to catch my breath!\"\n\nWe walked outside and saw the light from a large bonfire about a mile away in the woods. We could hear music, laughter, and lots of howls and yips. I squeezed Elizabeth's hand. \"If you want to leave, just let me know.\" She smiled up at me. \"I'm okay.\"\n\nSuddenly, we heard a whistle come from out of the woods, and Jadwiga's voice followed. \n\n\"Come here, lover boy!\"\n\nEven in the dark, I could tell Carlos was blushing, but he still had a big smile on his face.\n\n\"I think you're being paged,\" Elizabeth giggled.",
        "Carlos laughed, and said, \"Well, I don't like to keep a lady waiting...\" and then he took off after her.\n\nAfter Carlos ran to Jadwiga, Elizabeth and I kept walking toward the fire. I was telling her about pack life in Denmark, and she was asking a lot of questions when suddenly, there was a rustle coming from the brush next to us. Two wolves rolled out onto the path, locked in mock battle. Elizabeth let out a small shriek of surprise, and the wolves stopped immediately and looked at us. One of the wolves immediately shifted into a teenaged girl with red hair and beautiful green eyes.\n\n\"Hi! I'm Jordan! We're not really fighting, we're just playing,\" she said, sticking out her hand for Elizabeth to shake.\n\n\"I'm Elizabeth, and this is my boyfriend, Stosh. This is my first time at a werewolf party,\" Elizabeth said, with a nervous laugh.\n\n\"Oh yeah! Everybody knows who he is,\" Jordan smiled. Suddenly, the wolf behind her chuffed and play bowed.\n\nI laughed. \"It looks like someone isn't done with you yet!\"\n\nJordan turned around. \"Come on, Emma, give me a minute.\"\n\nEmma sat politely but she gave a little growl.\n\n\"HUSH! The adults are talking!\"\n\nEmma whined and walked over to us, rubbing on Elizabeth's leg. Elizabeth dropped down and began petting her.\n\n\"Emma's my sister. She's still a kid,\" Jordan said, in an off-handed way.\n\nI smiled.\n\n\"Listen, sir, I'd like to talk to you later. I've been reading about religion during the middle ages. That's where you're from, right? I mean, when you're from.\"\n\n\"Yes, that's right, and I'll be happy to talk to you about my experiences. Elizabeth and I are staying in the east wing. I'm usually up around sunset. Just come find me,\" I said with a smile.\n\n\"Cool! First-hand knowledge rocks!\" \n\nEmma made a small bark, and Jordan shrugged. \"Okay, okay,\" she said, in an exhausted tone. Then she turned to us and said, \"Kids, am I right?\" \n\nElizabeth and I laughed because Jordan barely looked old enough to drive a car by herself. Jordan smiled at us, shifted into a wolf, and ran off with her sister. Elizabeth seemed to relax after we met Jordan and Emma and by the time we got near the clearing where the bonfire was, she had a huge grin. \n\nThe clearing was an enormous field and the bonfire was in the center. As soon as we arrived, people were quick to steer us toward a couple of kegs of beer. \n\n\"You know, except for the wolves, this is a lot like parties I went to in college,\" she laughed.\n\n\"Really?\"\n\n\"Sure! Dancing, singing, people fighting, people fucking, and lots and lots of beer.\"\n\nI laughed and kissed her, only to be jostled hard by a man who was half-shifted into a wolf.\n\n\"Hey, watch it there, buddy!\" I said sharply.\n\nSuddenly, Dmitri stood before us. \"Shit, sorry Stosh! I didn't see you there! Oh, and here's Elizabeth!\" \n\nBefore either of us could say anything, Dmitri grabbed Elizabeth and hugged her tightly, which was a little unsettling, because he was naked.\n\n\"Oh, hi, Dima,\" she said, blushing furiously.\n\n\"What's wrong?\" he asked.\n\n\"You just rubbed your junk all over her, Dmitri. That's a little much for anybody, don't you think?\" Patrick said, stepping into the light from the bonfire.\n\nDima turned to me and said, \"Oh, God, I'm sorry!\"\n\nI rolled my eyes. \"Don't apologize to me, apologize to her!\"\n\nDima bowed his head low and Elizabeth chuckled awkwardly and said, \"It's okay.\" \n\nA female in wolf form whistled for Dmitri. He turned toward her and she switched her tail at him. Then, she looked over her shoulder in a very flirtatious manner and slowly trotted away.\n\nDmitri looked at us with a conflicted expression and I chuckled. \"Don't keep her waiting, Dima. We can talk later.\"\n\nDmitri smiled and winked, then he shifted into his wolf and quickly trotted after the female.\n\n\"That crazy Russian wouldn't know a good thing if it was sitting on his face!\" Patrick laughed, shaking his head as he walked away.\n\nI stepped behind Elizabeth and put my arms around her waist. I kissed her neck as we stood in front of the fire, just watching everyone around us have a good time.\n\nSuddenly, Skye was next to us. \"Hi, guys.\"\n\n\"Hey lady!\" Elizabeth said. She put her arms out to hug Skye but stopped. \"Uhm... I'd hug you... but you're naked. So that's awkward.\"\n\nSkye laughed. \"Thanks for holding back!\"\n\n\"Is Laura here?\" I asked.\n\n\"No, she decided to get some sleep. I think the hearing about Michelle has her kind of bent out of shape,\" Skye said.\n\nI nodded. \"That's understandable.\"\n\nSkye turned to Elizabeth. \"Would you mind talking to me about Laura's relationship with her?\"\n\n\"Sure. Is it okay if we head back to the Alpha house? It's kind of hard to talk here.\"\n\nSkye smiled at her, and the three of us began to walk back. While we walked, Elizabeth told us about Laura and Michelle. She talked about how they met when Laura was in vet school, and how they'd lived together for almost three years. And then she stopped.\n\n\"Uhm... I don't mean to make you feel uncomfortable talking about them living together...\"\n\nSkye laughed. \"It's okay, I know she has a history. I'd just like to understand a little more about why she broke up with Michelle and what you guys think might have led to Michelle inviting a vampire into their house.\"\n\nI smiled. \"Not to speak for Elizabeth, but I think that Michelle was more in love with Laura that Laura was with her.\"\n\nSkye looked at me with a quizzical expression. \"What gives you that impression?\"\n\nI took a deep breath and decided the best way to talk about it was to just be honest.\n\n\"Laura told me she broke up with Michelle because Michelle introduced her to everyone at the pack as her mate. And Laura realized she didn't feel the same way.\"\n\nSkye didn't say anything for a moment. Then her eyes filled with tears and immediately I felt like shit.\n\n\"Oh, I'm sorry, I didn't mean to upset you,\" I said.\n\nSkye hugged me and she started to laugh. \"Laura told me tonight that I'm her mate.\"\n\nI smiled. I had thought that Skye was Laura's mate, but it was wonderful to know that Laura had realized it too. Elizabeth squealed and jumped from excitement, then she grabbed Skye in a big embrace.\n\n\"I don't care if you are naked, I'm going to have another big sister!\" Then both women started to laugh together.\n\n\"That's amazing, Skye. I'm so happy for you two!\" I said.\n\n\"Yeah! I've been waiting for such a long time, I never thought I'd meet the right girl.\"\n\n\"How long have you been waiting?\" Elizabeth asked.\n\n\"Gosh, it's been about seventy-five years, give or take.\"\n\nElizabeth's eyes grew wide. \"Wow! You don't look a day over twenty-five!\"\n\nSkye laughed. \"Flattery will get you everywhere!\"\n\nI said, \"Honoria must be tickled pink.\"\n\n\"She is. But I don't know how to tell her I want to stay with this pack.\"\n\n\"You don't want to go back to Maryland?\" I asked.\n\nSkye sighed. \"Not really. This pack needs a doctor and my pack already has one. Also, my Alpha has some old-fashioned ideas about same-sex couples.\"\n\nThat puzzled me. \"I've never known werewolves to be overly worried about sex, as long as everyone is a consenting adult.\"\n\nSkye shrugged, and Elizabeth asked, \"Do many people share that opinion?\"\n\n\"Well, an alpha sets the tone for their pack. It's been suggested that I keep my 'proclivities' to myself.\"\n\nElizabeth frowned. \"That sucks.\"\n\n\"Yeah, it does suck. But then I met Angus and realized that this alpha doesn't share that bigotry. Meeting my mate here just proves I'm making the right decision, so it's working out,\" Skye smiled.\n\nI clapped my hand on her shoulder. \"I'm glad you're going to stick around.\"\n\nWe basked in the joy of the moment, and finally, Skye continued.\n\n\"I'm happy and Laura's happy, but she's worried about what's going to happen at the hearing tomorrow.\"\n\n\"She doesn't want Michelle to die,\" I said. \n\n\"Yeah.\"\n\nIt was easy to understand why Laura didn't want her ex-girlfriend to be executed. But I didn't share that opinion. I wanted Michelle to suffer the consequences of putting everyone in danger. As I looked over to Elizabeth, I could see that she felt the same way.\n\n\"Well, we have to let the pack figure it out for themselves. Hopefully, Laura will make her peace with the outcome, whatever it is,\" Elizabeth said.\n\nI woke up in the early afternoon in our room at the alpha house. Elizabeth had snuggled into my embrace and was still asleep. I gently kissed and nibbled on her neck and ears as I lightly stroked her breasts. Without opening her eyes, Elizabeth moaned in pleasure and threw her arms back and around my neck, while moving her hips and ass against my cock. I was starting to get hard when I heard a knock at our door. The door began to open, revealing Angus standing in the doorway, with a sheepish expression on his face.\n\n\"Angus?\" Elizabeth asked as I covered her breasts with my hands.\n\n\"What the hell, man?\" I snapped in extreme irritation.\n\n\"Yeah, hi. I'm sorry to bother you, but Patrick needs to talk to you, Stosh.\"\n\nI glared at Angus as he smiled and waved at me. I covered Elizabeth with the blankets because I knew she would feel uncomfortable being naked in front of another man even if that man wasn't interested in women.\n\n\"You might as well come in,\" I said, in an exasperated tone. \"We're done for now.\"\n\nAngus walked into the room trying not to laugh at how disappointed and annoyed I must have sounded \"Sorry, Stosh,\" he said.\n\nI sighed. \"It's okay, we were already awake anyway.\" A wolf is always subject to his Alpha's commands, so I knew being cock blocked wasn't entirely Angus's fault. He smiled in relief. \n\nElizabeth looked uncertain and said, \"Can I come with Stosh? Please?\"\n\nThe look on Elizabeth's face tugged at my heart and I knew there was no way I'd go anywhere without her. I kissed her and said, \"I don't care what Patrick wants, you're coming with me.\" Elizabeth looked relieved. I put my hand on her face and smiled at her, then I rolled out of bed and started to get dressed.\n\nAngus smiled. \"It's nice to see someone who isn't intimidated by the alpha.\"\n\n\"He's not my alpha. I owe him respect, but I don't owe him obedience,\" I said, as I bent over and put on my shoes. I turned to Angus. \"You're coming too, right?\"\n\nAngus smiled. \"Aye.\"\n\nPatrick's office was nice, if a bit cave-like for my tastes. The floor, walls, and desk were all made from dark wood, and there were bookshelves, also in a dark wood, lining the wall. The walls were painted in forest green to match the Venetian blinds, which were mostly closed, blocking out the bright sunlight. There were a couple of chairs and a long, leather couch, all upholstered in black leather, and an oriental rug that was in a deep garnet red. The overall effect made for a serious, almost somber atmosphere that was rather oppressive. I sat down in the middle of the couch with Angus and Elizabeth sitting next to me on either side. \n\n\"Thank you for coming so quickly,\" Patrick said. \"I trust the accommodations are acceptable.\"\n\nI looked at Elizabeth who gave me a half-smile, then looked back at Patrick.\n\n\"We have no complaints. Thank you for providing us a safe place.\"\n\n\"Good,\" Patrick said. Then, he sighed deeply and ran his hands through his hair. \n\n\"How can I help you today, Patrick?\" I asked, hoping I didn't sound impatient or irritated.\n\n\"I need to talk with you about my Beta, Caleb, and also Michelle.\"\n\nWerewolf packs are hierarchical. The leader of the pack is called the Alpha, and they're ultimately responsible for all decisions that affect their wolves. The Alpha has a second-in-command, a Beta wolf. Think of it like a ship -- there's a captain and there's a first mate who acts as a sounding board as well as the person who helps make sure things everything is going smoothly. The Beta is supposed to have the complete trust of the Alpha, so it was beyond strange that Patrick wanted to discuss Caleb with me.\n\n\"Okay,\" I said, raising an eyebrow at Patrick. \"But I don't know either of them very well, and I don't know how useful I can be to you. I'm surprised that you aren't having this conversation with Laura,\" I said.\n\nPatrick laughed. \"I'm that obvious, huh?\"\n\n\"Pretty much.\"\n\nPatrick took a deep breath and ran his hands through his hair.\n\n\"Okay, I'll cut the shit. I want to talk to you about what happened the other night, and I want to get your perspective. I trust nothing said here will go past this office.\"\n\n\"Everything will stay between us,\" I said. \n\nPatrick nodded. \"Okay, that's good enough for me.\" He rubbed the back of his neck and stood up, looking out the window. Then he turned back to us.\n\n\"I'd like your thoughts on Caleb. I don't think you know this, but Caleb has always had deep feelings for Michelle. When they were growing up, he believed she was his mate and he made it clear he wanted to have a relationship with her.\"\n\nMy eyebrows shot up, but I tried not to make it too obvious that I was surprised. \"Interesting.\" \n\n\"Yes. After it became clear that Michelle wasn't his mate, they remained friends. Close friends. And that's why I'm so concerned,\" Patrick said in a low voice, without looking at me.\n\n\"You're concerned because they're still close, and Michelle may have to be put to death,\" Elizabeth said. Patrick gave her a weak smile.\n\n\"Yes. Caleb and Michelle left for the pack about two hours before we left Laura's house, but they didn't arrive here until almost an hour after we did. What does that mean?\"\n\n\"Hmm,\" I said. I could see why Patrick would be concerned about this situation.\n\n\"Yeah. Also, there's the fact that he didn't tell me about the Maryland wolves that were staying in the guest house. I'm very concerned about that.\"\n\nAngus gave me a serious look, and I said, \"You believe you might be losing control of your beta.\"\n\n\"Yes,\" Patrick said flatly. Then he turned to me and asked, \"Have you seen something like this before?\"\n\nAn alpha werewolf may have ultimate control over their pack, but they can be challenged for their position by another. It rarely happens, but when an alpha is challenged, the challenge will most likely come from an alpha's second in command, their beta.\n\nI considered my next words carefully. \"I've heard of challenges happening, but I've never seen one up close. However, I think this situation with Caleb is worth watching.\" \n\nPatrick nodded, and Angus spoke up. \"I've seen two challenges.\"\n\nWe both looked at him but neither of us said anything. \"My pack in Scotland went through an unsettled period after the Great War.\"\n\n\"Is that why Dima came here?\" I asked.\n\n\"Aye. And I can tell you this -- a werewolf that's considering challenging their alpha is going to start consolidating power. That move with Honoria and her crew, that's the one that should make you worried. He's trying to establish dominance.\"\n\nPatrick looked at him for a long moment, then he turned to me and asked, \"Will you stand with me if he challenges my position?\"\n\nI was surprised by the question. \"I'm not a member of your pack. I'm not even a wolf.\"\n\nPatrick smiled. \"No, you're not a wolf. You're more than that, you're unique. You're a powerful being from a species that treats us as prey, but you've become an ally to our kind. Wolves always remember and appreciate our friends, especially when those friends put themselves at risk to support us.\"\n\nI was thinking about what Patrick said when Angus spoke. \"He's accepted my mate and me into his pack. I daresay that Caleb wouldn't do that.\"\n\nI thought for a moment. The pack meant almost nothing to David, but it was very important to Angus. I knew he wouldn't be happy if he were welcomed into the clan without his mate. I also knew that it was extremely unusual to find a werewolf alpha willing to add a vampire to their pack. I nodded at him and said, \"That's a good point.\" I turned to Patrick. \"Okay. I'll support you in whatever way you need.\"\n\nPatrick stood up and gave me a huge hug. \"Welcome, brother! And thank you for your support!\" he said with a grin. \n\nAngus, Elizabeth, and I walked out of Patrick's office, and as he shut the door, Angus turned to me and said, \"Thank you,\" in a soft voice.\n\nI smiled as I realized I should be the one thanking him. My first impulse has always been to stay out of politics and matters that don't directly involve me, and I still think that's a good general rule. But the fact is that if someone won't accept my best friend and his mate, they're probably not people I would want to associate with under any circumstances.\n\n\"It's a rare wolf that would accept a vampire into his pack, almost as rare as a wolf who would accept a vampire as his mate. Patrick is a special man, and so is David. I'm glad you've found them both,\" I said. \n\nAngus hugged me suddenly, a big, bruising, near rib shattering hug. \"That means a lot to me, Stosh. And it means a lot to David, too. Not that he'll ever admit it, the cheeky bastard!\"\n\nThe hearing was scheduled in the evening so that David, Jadwiga, and I could attend. When we arrived, the pack was gathering in the same clearing behind the alpha house where the party had been the night before. The day had been bright, clear, and cold, and as the sun began to set, the temperature continued to fall. Marcia, the perfect Madam Alpha, met us with shawls and blankets to keep the humans warm. \n\nThe bonfire from the night before had gone out, but the remnants were still smoldering. I hadn't noticed it in the dark, but there were fallen logs around the space that served as bench seating. \n\nWhen we arrived, we were directed to sit in the front row. As we sat down, I saw Ben and April come to the circle. Ben sat down behind us and put his hand on Laura's shoulder. He smiled at her and Elizabeth. \n\nOnce everyone was seated, Patrick walked into the circle, followed by Michelle, Caleb, and another male werewolf I hadn't met. Michelle sat in a wooden chair near the center of the circle. Both Caleb and the other wolf sat down in the front row immediately to the right of them. Patrick remained in the circle and began addressing the crowd. \n\n\"We're here tonight to discuss the fate of Michelle Beauchamp, a member of our pack who stands accused of inviting a hostile vampire into a home she shared with a human for the express purposes of intimidating a former romantic partner. In doing so, she endangered the lives of the humans who live at the home as well as their visitors, which included members from another pack and two of our newest pack members, Angus McFaull and David Freeman. We'll hear testimony about what happened, and if it's decided that she willingly participated in an act of betrayal, the punishment will be death. Any questions?\"\n\nThe crowd remained silent. \n\nPatrick turned to Michelle. \"Would you like to make a statement before we hear from witnesses?\"\n\nMichelle looked at Patrick, her eyes glistening with unshed tears. \"Laura is my mate, and I believe that she's been confused by her sister's boyfriend, a vampire named Stosh.\"\n\nThe crowd began to murmur at this point. Patrick looked at Michelle and said, \"Are you referring to Stanislav Szymanski?\"\n\n\"Yes sir.\"\n\nPatrick nodded, thoughtfully. \"Michelle, if Laura truly were your mate, how could someone fool her into thinking otherwise?\"\n\nMichelle's voice began to crack. \"I know humans can be easily fooled, and I think maybe that's what happened to my mate. I only know that our relationship was wonderful, almost perfect, and then her sister met the vampire and my mate's feelings for me soured.\"\n\nElizabeth had been holding my hand, and when Michelle started talking about me, her hand tightened.\n\n\"How did you meet the other vampire, Michelle? The one you invited into the house you shared with Laura Black?\"\n\nMichelle was crying quietly at this point. \"I met him in the woods outside our house when I was guarding it. I saw Laura's sister, Elizabeth, and her vampire go into the house with another wolf. The vampire I met said that if I invited him in, he would get rid of my sister's boyfriend without hurting anyone else. The vampire said that his own sister was being held hostage by Elizabeth's boyfriend.\"",
        "I could see Jadwiga drop her head and start to cry. Carlos put his arm around her and pulled her into his chest to comfort her.\n\n\"But the vampire you invited in did hurt someone else, didn't he, Michelle? He tried to take a female vampire against her will. And he tried to hurt you, didn't he?\" Patrick gently asked.\n\nMichelle began to sob in earnest now. She was unable to speak, but she nodded.\n\nThen, Patrick gently said, \"And Laura isn't your mate. Her mate is Skye, one of the wolves who attacked the vampire you invited into your house.\"\n\nMichelle picked her face up. \"What?\" Then she looked over at Laura. \"Is that true?\"\n\nLaura looked at her and said, in a clear, steady voice, \"It's true. Skye is my mate.\"\n\nMichelle let out a strangled cry and stood up. Reaching behind her, she pulled out a gun from the back of her jeans. \n\nThere were a lot of things that happened at once -- Skye knocked Laura over and shielded her body, Ben yelled at his sister to stop, Caleb ran toward Michelle, and David and I put ourselves in front of Elizabeth. We were all expecting Michelle to shoot either Laura or Skye, but instead, she put the gun in her mouth and pulled the trigger.\n\nThe sound of a gunshot, even outside, is painfully loud, especially when the listeners are people who have extremely sensitive hearing, like werewolves and vampires. The crowd was momentarily frozen in place.\n\nCaleb was the first one to reach Michelle's body, kneeling over her and screaming her name repeatedly. Meanwhile, in the circle behind Michelle, a young male wolf who had been grazed by the bullet as it exited her head started screaming hysterically. Patrick stood, in shock. Then he began to walk over to Michelle's body.\n\nOnly Marcia, acting as a Madam Alpha should, remained calm. She went to the young wolf who had been grazed. He was also wearing a fair amount of Michelle's brain matter and blood on his shirt. She looked at his shoulder, evaluated the wound as not serious, and pull him tightly to her in a hug, speaking comforting words in a low voice.\n\nCaleb was holding Michelle's body and sobbing. He seemed unaware of the fact that much of her face and the back of her head had been obliterated. He looked at me with imploring eyes. \"Stosh, you've got to save her!\" \n\n\"I'm sorry, Caleb. I can't.\"\n\n\"Why not?\"\n\n\"There isn't enough left to save,\" Patrick said, putting his hand on Caleb's shoulder.\n\nCaleb seemed to lean into his touch for a moment, then he backed away and groaned in horror. He stood up without acknowledging Patrick. Instead, he gently picked up Michelle's body and carried it over to where Laura was lying, still protected by Skye's body. He gently laid Michelle's body at Laura's feet, and fixing her with a burning gaze, stepped back.\n\n\"Laura Black, I charge you with the death of Michelle Beauchamp. You led her on. You made her believe you were her mate, and when you rejected her, her grief drove her insane. The grief that killed her is the grief that you caused. You're as responsible for the death of Michelle as surely as the bullet she sent through her brain. And you should share her fate!\" Caleb suddenly sprouted fangs and stood, half-shifted, in front of everyone and growled at her.\n\nI yelled \"NO!\", and as I stepped in front of Laura, ready to defend her, I realized I wasn't alone. Angus, David, and Skye stood directly behind me, shifted and ready to fight, and Honoria and William were behind them. \n\nPatrick said, \"CALEB SUBMIT!\" in an alpha command voice, the kind of voice that made every wolf in the pack bare their necks in surrender -- except for Caleb. He bent his head back and let out a tremendous roar, and turned toward Patrick.\n\n\"I will not submit to you, Patrick! You brought this trash to our pack, these vampires. They confused Michelle's human and you welcomed them with open arms. You even want to add a vampire to our pack!\"\n\nThe look on Patrick's face was resolute. \"Angus is pack and David is his mate. That makes David pack, and we don't turn on pack, no matter who they are or who they love. If you don't like it, you can leave.\"\n\nThe pack sat in silence, enthralled by the conflict. Patrick looked at me, and I knew that this was the moment he had been thinking of when he asked me to back him.\n\n\"I'm a vampire. I've lived with a pack and I know werewolves well enough to understand that there is no denying the mating pull, for either side. A human might not know why they're feeling what they're feeling, but they know when it's right. More importantly, they know when it's not right. No one can fool someone out of feeling the mating pull, or fool them into feeling it if it's not there.\"\n\nThere were nods and murmurs of agreement, but otherwise, the crowd was quiet. Ben stood up and walked next to me, also in front of Laura. He gave me a big hug, and I felt his tears on my shoulder.\n\n\"Don't do this, Ben,\" Caleb said quietly, but Ben ignored him.\n\n\"I love my sister and I will miss her for the rest of my life. But she was mistaken about Laura. She had been looking for a mate for so long, and even though she knew that something wasn't right, she fooled herself into believing that it was.\"\n\n\"No, Ben,\" Caleb said softly.\n\n\"Laura was not Michelle's mate, any more than you were. I'm sorry, Caleb, but she fell for the wrong person, just as you did. She wanted Laura to love her as much as you wanted Michelle to love you. And it was just as hopeless.\"\n\n\"I'm not a female,\" Caleb said flatly.\n\n\"It was more than that and you know it. You weren't her mate. And neither was Laura.\"\n\nThe room was filled with shocked gasps and murmurs. Patrick held his hand up. \"That's enough of that!\" he said, and the crowd fell silent.\n\nCaleb stood frozen, with a shattered look on his face. Ben came over to him and hugged him, and they both cried together. Patrick and Marcia came over to him as well, to touch and comfort. Other pack members slowly came up to hug Caleb one by one. \n\n\"What's happening?\" Elizabeth asked me in a whisper.\n\n\"They're a pack. They're mourning Michelle and they're mourning Caleb's loss,\" I said.\n\nDavid asked, \"What should we do?\"\n\nAngus replied, \"We're pack. Let's show our support.\"\n\nAnd so, we went up and hugged Caleb. As I turned away, I realized that Laura was behind us. She stood in front of Caleb with an uncertain look on her face. He put his arms around her and buried his face in her shoulder.\n\n\"I'm sorry I acted like that,\" he whispered.\n\n\"It's okay,\" she said, tears beginning to fall. \"I wish it had worked out differently for you two.\"\n\n\"I'm glad you've found your mate,\" Caleb said, and Patrick put his hand on his shoulder again.\n\n\"You'll find your mate, Caleb. She's out there.\"\n\nCaleb nodded sadly.\n\nWe stood there for a moment, not sure what to do next. Marcia, ever the Madam Alpha, came over to us and hooked her arms between Laura and Elizabeth. \"There are still plenty of drinks and food from last night at the alpha house. Why don't we go back and see if we can lighten the mood?\"\n\nCarlos said, \"That sounds like a good idea!\" \n\nAnd with that, we headed back to the alpha house.\n\n \n"
    ],
    "authorname": "JosephineKuo",
    "tags": [
        "nonhuman lovestory",
        "gay vampire",
        "gay werewolf",
        "nonhuman",
        "vampire",
        "vampire romance",
        "werewolf",
        "werewolf romance"
    ],
    "category": "NonHuman",
    "url": "https://www.literotica.com/s/the-vampire-and-the-goth-ch-17"
}
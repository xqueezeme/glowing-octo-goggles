{
    "title": "Love Me... Love My Dogs Pt. 04",
    "pages": [
        "Christie and John are back. I thank you all for your words of encouragement, requesting more of this story, and also for your patience in waiting for it. \n\nI hope this chapter meets with your approval, and you enjoy your time reading it. \n\nAs always, please, don't be silent. Send me your thoughts, feedback, and cast your votes. \n\nThank you. \n\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n\"So, honey...you say that you and your mother don't keep secrets?\" I asked, when we talked later that night. I had a conundrum. I wanted to be completely honest with Christie, but I didn't want to make an accusation that could be a simple misunderstanding. I know I said there could be no doubt, but now there was. Funny how that happens. \n\n\"That's the plan,\" Christie replied. \"She knows all about us now, and if she asks, I promised I would answer her questions. I assume you're asking for a reason?\" \n\n\"Um, yeah. You could say that,\" I said, still unsure of how to proceed. \"Have you talked to her since you left?\" \n\n\"No. Why?\" she asked, drawing out the 'why', and indicating I should spill my guts. \n\n\"Well, she kind of invited me over for dinner,\" I began, \"alone.\" \n\n\"Uh huh. Go on,\" she said quietly. \n\n\"She was very talkative. She told me about her sex life with your dad,\" I continued, \"and that she wasn't totally happy...\" \n\n\"Really? That's news to me,\" she laughed. \"What else?\" \n\nSo far, I hadn't really said anything that would cause friction, but the rest of it might. \n\n\"She, uh...she was dressed a bit, um...provocatively,\" I said. \n\n\"Define 'provocatively',\" Christie said. \"What was she wearing?\" \n\n\"It was more what she wasn't wearing,\" I replied. \"Pretty sure she forgot her bra.\" \n\n\"Gave you an eyeful, did she,\" she giggled. \"Is that all?\" \n\n\"No,\" I sighed. John, meet point of no return...point of no return, meet John. \"She kind of hit on me, I think.\" There was a palpable silence. \n\n\"Excuse me?\" she growled. \"What...did...you...do?\" There was a tone in her voice that scared me a bit. \n\n\"Nothing, baby...I swear. I didn't encourage her,\" I said, suddenly gushing in an effort to tell her I had nothing to do with it. \"I went over for dinner, and we ate, and we talked, and she said a few things that were pretty flirtatious, and she said I had her attention if I could keep up with you, and...\"\n\n\"She said that?\" Christie interrupted. \n\n\"Yes, she did...and it wasn't just her words,\" I replied. \"She was giving me this look, like you do when you're horny, and her, um...um...\"\n\n\"Just tell me, John,\" she whispered, \"Please.\" \n\nI took a deep breath and closed my eyes. \n\n\"Her fucking nipples were sticking out like thimbles!\" I blurted. \"I wasn't trying to look, I swear, but it was impossible not to notice.\" \n\nThere was a long tense silence. \n\n\"So, when I could, without being rude, I told her I was tired after the drive,\" I said softly, \"and I came home.\" \n\nThe silence on her end persisted. \n\n\"Christie? Are you mad at me?\" I asked. \n\n\"Of course not, baby,\" she whispered. \"I'm just trying to figure out what she's up to. If she's really hitting on you, then she's messing with my man, and I'll deal with her. If she's doing it for effect, well...that will take a little more thought. You didn't do anything wrong. In fact you did everything right, in my view, including telling me, so if she's trying to trip you up... \"\n\n\"Wait,\" I laughed, relieved that I was off the hook, and that she was being so rational about it. She was very mature, and almost never had an impulsive, emotional reaction. \"You think it's a honey trap?\" \n\n\"I think it's a good possibility. I'm not sure I like that,\" she said. \"It says she doesn't trust you, or doesn't trust my judgement. It's an attempt to sabotage us, in a round about way.\"\n\nAngela should have known better than to match wits with her daughter. Christie had ploughed through the minefield of my emotional baggage and come out without a scratch. This little game... if that's what it was, and I was beginning to believe it was true...was pretty basic as tactics go. My darling was rubbing off on me, and I already knew our next move. \n\n\"So...tomorrow I invite her over, say to use the pool, and see what she does,\" I said, thinking as I went. \n\n\"Better yet,\" Christie replied, \"invite her for a midnight skinny dip, tonight, while Dad's away. If she shows up naked...well, you get to check out her tits, and we know that she's really after your dick. If she shows up dressed, or doesn't show at all, then it's probably a test, and she'll be calling me to tell me about your infidelity.\"\n\n\"What if she does turn up naked?\" I asked. \n\n\"Hmmmm,\" she giggled, \"how would you feel about doing my Mother?\" \n\n\"I decline to comment...\" I said immediately, lest any hesitation lead her to think I was considering it, \"...on the grounds that I may incriminate myself.\"\n\n\"Good answer,\" she laughed, \"but if she shows up ready for action, it raises the question of why? Maybe she really isn't getting enough from my Father?\" \n\n\"Slow down. I like your Mother...but I Love You, and I'm a one woman type of guy,\" I said. \"Are you saying what I think you're saying?\" \n\n\"No. You're mine, and I'm not sharing you...not even with her,\" she said evenly. \"I'm just considering all the permutations. Thank you for being open with me. That must have been hard, given she's my Mother.\" \n\nYou have no idea, I thought. You might have reacted emotionally, and I've become very, very attached to you. The thought that you might be angry had been, quite frankly, terrifying. \n\n\"Um, yeah, you could say that,\" I replied, paraphrasing my true thoughts. I looked at the clock on the wall. \"It's almost 10. I guess I should call her.\" \n\n\"Text her,\" Christie suggested. \"It's not as precise, and gives you another out, if she shows up looking for some nooky.\" Right, I could claim to have been kidding.\n\n\"Good idea,\" I said, picking up my cell phone and scrolling to her number. I typed quickly, then ran the message past the one of us who knew Angela best. \n\n\"Okay, how's this sound? 'Hi Angela. I've been thinking about our conversation tonight. Wanna come over and continue it in the pool? Clothing optional ;-)'. Do you think that will have the desired effect?\" I asked. \n\n\"Yeah, that'll work,\" she laughed. \"Don't forget to let me know what happens. Good night, Sweetheart.\" \n\nMy phone buzzed a few minutes later. It was Angela. \n\nSee you at 12. I haven't had a naked midnight swim in years. Sounds like fun. \n\nA response like that made me nervous. \n\nI had barely put the phone down before it buzzed again. This time it was Christie. \n\nHoney trap. She texted and ratted you out immediately. Have fun. \n\nBy 'have fun', I knew she was giving me the okay to leave her Mother twisting in the wind. The game was afoot, but Angela didn't know she was up against a team of two, with shared intelligence. She didn't stand a chance. \n\n***\n\nI put on my robe, and walked out to sit by the pool. It was just before midnight, and I wanted to be out there when Angela arrived. I was wearing my trunks under the robe, but she didn't know that. \n\nWhile I was sitting there, I reviewed the plan. Make her think I really was interested in taking her to bed. Act like Christie doesn't know, and keep the pressure on, until she folds. Flirt like mad. Try to shock her into admitting she's pulling a fast one. \n\nI was deep in thought, when I heard the gate squeak, and Angela walked into the yard. She was looking quite delicious, as usual, wearing her robe as well. If she wasn't married, and I wasn't in love with her daughter, I wouldn't be pretending to be interested in her. Then again, if my grandmother had wheels, she'd be a wagon. \n\nAngela really was quite the hot older woman. I know, she's younger than me, but by older woman I mean relative to her daughter. If this is what the future held for Christie, she really would be the hot MILF type, getting the attention of a lot of younger guys. She'd be beating them off with a stick. \n\nAnyway, back at the backyard, Angela took a seat across from me. It was one of those 'if she knew that I know that she doesn't know that I know' situations. \n\n\"Thanks for inviting me,\" she said quietly, with a smile. \n\n\"You're always welcome here,\" I replied. \n\n\"So, this is where it all started with my daughter, huh?\" she asked, looking around the yard. \n\n\"I suppose it is,\" I said, looking at her intensely. \"Are you asking if we're going down the same path?\" There, that was pretty blatant, an invitation to my bedroom, where she knew Christie had been a frequent and willing guest. \n\n\"Maybe,\" she smiled, standing up. She reached for the sash of her robe, as she turned away. She opened it, and held it open wide, before dropping it on the deck. She stepped into the pool. \n\nKnowing she was playing games, I hadn't expected her to be nude under the robe...and she wasn't, wearing the same suit Christie had borrowed and worn those first times she visited. Still, her body filled it nearly as nicely as her daughter's had. I had to seem disappointed that she wasn't naked. \n\n\"Oh, I thought you understood that clothing was optional?\" I laughed. \n\nShe turned, backing into the deeper water. She hooked a finger under a shoulder strap, and nudged it off, just as she went deep enough to hide the result. \n\n\"It's okay. This comes off as easily as it goes on,\" she teased. I had to admit, she was good at this flirting thing. Ed must have his hands full. \n\nI stood, and now she was watching me closely. Was she expecting me to be naked? Maybe she just wanted to see what was being used on her daughter's pussy? I opened my robe, and for a split second saw fear, then disappointment, then relief. I was wearing my trunks. \n\nI stepped into the water with her, and took a position across from her in the deep end. We looked at each other in silence, until Angela finally spoke. \n\n\"Are we going to talk, or...do something more interesting?\" \n\nShe was really playing all her cards, continuing the bluff. Okay, I'll call that bet, and raise you one. \n\nI walked across the pool, neck deep in the water, and stopped just in front of her. The poker face she exhibited in the past was starting to crack. She had her arms at her sides, and I took advantage. \n\nI quickly hooked both shoulder straps, and tugged them off. She caught them with her elbows, and covered her breasts with her hands. \n\n\"John!\" she snapped. \n\n\"You're right, it does come off easily,\" I laughed, moving closer, until my chest touched the backs of her hands. I had her pinned to the side of the pool. \n\n\"John, what do you think you're doing?\" she scolded. \n\n\"Just what you wanted me to,\" I bluffed. \"You said you wanted a naked swim, and wanted to do something more interesting. Ed's not satisfying you, and I have your attention. Is that not what you said?\" Our lips were mere inches apart, and she was squirming, looking for a way out. \n\n\"Christie won't like you doing this,\" she smiled, thinking she had caught me. \"You're supposed to be in love with her, and you're hitting on me, her married Mother? I'm sorry, John, but I have to tell her about this.\" She used one arm to conceal her breasts, and put her shoulder straps back up. \n\n\"No you don't,\" I replied, backing away, \"because she already knows about it. She's the one who told me to call your bluff.\"\n\n\"WHAT?!\" she yelled. The look on her face was priceless. \n\n\"You heard me,\" I smiled. \"Of the two of us, you're the one who's in trouble with Christie. Did you really think I wouldn't tell her what you did at dinner? I love her, and that means I talk to her, openly. She's pissed at you. She thinks you don't trust her judgement, and that you don't trust me, either. As for myself, I understand your concerns, but baiting me into cheating on her is pretty low.\"\n\nI'd said my piece, and was feeling a little angry, so I walked out of the pool, picked up my robe and towel, and went inside. As I stopped to close the door, I looked out. Angela was still in the pool. \n\n\"Goodnight, Angela. I trust you can find your way home.\" I flicked the light off. \n\nAfter I dried myself, I laid down in bed, still angry, but soon enough it passed. That's when I heard her. Angela was still outside...crying. \n\n\"Oh...shit!\" I sighed, rolling out of bed, and grabbing my robe. I opened the door and went out onto the deck. \"Angela, are you alright?\" I offered. \n\nShe was sitting in the dark, wearing her robe, sobbing. \"No,\" she moaned. \n\nDammit! Some choice I have. She's the one who tried to wreck your relationship with Christie, so if she got hurt in the attempt, too bad, right? But...she's Christie's mother, and when she hurts, Christie hurts...and when Christie hurts, I hurt. And, she's a woman in need of support, so even if that need is self inflicted, the chivalrous side of me can't ignore her. Oh, hell. \n\nI walked over, and sat beside her, putting my arm around her shoulders. It only seemed to make her cry harder, and she rolled into my embrace, burying her head in my chest. \n\n\"I'm...so so...rry,\" she gasped, between sobs. Her hands balled up, grabbing my robe. \n\n\"Easy there, Angela,\" I laughed, \"I really am naked under here this time, so unless you want to get the whole picture...\"\n\nShe laughed, a good sign, and released her grip. \"Sorry. Again.\" \n\nI just held her, and she calmed down within a minute or so. Rubbing her shoulders, I broke the silence. \n\n\"Feeling better, now?\" \n\n\"Yes,\" she sniffed, \"and no. I'm still fucked. Christie will be furious. No...since she already knows, she is probably already furious. I can't be too popular with you, either. I really am sorry, John. I apologize for doubting your motivation. I believe you now. Christie is a very lucky woman to have someone who loves her that much.\" She paused. \"Can you forgive me?\" \n\nWho among us hasn't done something that seemed like a good idea at the time, and wound up being the dumbest fucking move imaginable in retrospect? We'd all like to take something back. Maybe several somethings. \n\n\"Yes, Angela, I forgive you. Christie will, too. She loves you, and knows why you would think this was a good idea,\" I said quietly. \"I have a question, though.\" \n\n\"What's that?\" she asked, sitting up, and wiping her face. \n\n\"Can I call you Mom?\" I deadpanned. There was silence, then she snorted, laughing wildly. It worked. \n\n\"Don't you dare!\" she giggled, pointing at me. \"Have you asked her?\" \n\n\"Not yet, but I really want to. I love her so much. This on again, off again, long distance thing is killing me.\" Confiding in her couldn't hurt, and would get her on my side. At least I hoped so. \n\n\"Well I guess we'd better let Ed in on the secret, then, hadn't we?\" she smiled, sounding more like the pre-sabotage Angela again. \n\n\"Sure,\" I replied facetiously. \"Shall we leave that to you?\" \n\n\"Um, no,\" she shook her head. \"The best I can do is help. After my actions today, I think that's the least I owe you both. Between the three of us, I'm sure we can figure it out.\" \n\nAngela stood, and bent down to kiss me on the cheek. She smiled. \n\n\"Thank you for forgiving me. I'll let you go to bed now, and beg for Christie's understanding tomorrow,\" she said softly. \"Goodnight.\" She walked to the back gate, opened it, and closed it behind her as she left. \n\n\"Goodnight, indeed,\" I shook my head. \n\n***\n\nI slept surprisingly well that night. I can only assume that it was a combination of the days events...rambunctious morning with Christie, long drive, late night...and the release of stress brought on by the whole Angela situation. Whatever the reason, it was late when I woke up, and my phone was blinking with text messages from Christie. There were several. \n\nThe first few wanted to know what happened last night. Then she realized that I was probably still asleep, and asked me to message her when I woke up. Then, after Angela had obviously been in contact, the tone changed to one of appreciative curiosity. \n\nWhat did you do last night? My Mother is now our new best friend. she sent.\n\nI'm just that good ;-) I replied. Tell you later. \n\nOh, I know how good you are! she replied. \n\n***\n\nThat evening, when we had our nightly pillowtalk call, I filled her in. Call it a post-mission debrief. \n\n\"Alright baby,\" she laughed, \"I'm glad that you love me, and are interested in how my day went...but you know what I need to hear. What happened last night with my Mother?\" \n\nI gave her the rundown...but paused before I got to the part where I yanked her suit down. \n\n\"And?\" she giggled. Even hundreds of miles away, over the phone, she could read the situation...read me...and knew there was more to it. \n\n\"Well, um,\" I continued, \"we're in the pool, and I could tell she was just about ready to break. So, I went for the kill, full shock value.\"\n\n\"Uh huh.\"\n\n\"So I pulled the top of her bathing suit down. She caught it, and covered up, of course, but it made her admit that she was going to tell you about my 'intentions'. When I told her you already knew, and that we knew what she was doing, well, that was the end of it,\" I said. \"She was pretty upset, and worried about you hating her. It took a lot of hug time to calm her down.\" \n\n\"Well, your hugs always work for me,\" she laughed. \n\n\"She said she'll help us figure out how to tell your Dad about us.\"\n\n\"Yes, she said the same to me. I'm still not sure about how to do that, and so far, she hasn't come up with anything new,\" Christie said softly. \n\n\"I don't think it's going to get easier with time,\" I said. \"More likely, the longer we wait, the greater the fallout, especially when your Dad finds out that your Mom knew for quite some time. I don't want this to become an issue between them.\"\n\n\"Thank you, John. Most people would be most concerned with saving their own skin, but you still care about them,\" she said, the appreciation clear in her voice. \"Just another thing to love about you.\" \n\nIt was getting late, and Christie had early classes, so we said our goodnights and hung up. This whole conversation had me deep in thought for hours. I had an idea, but I needed to run through every possible outcome before I let anyone in on it. I couldn't even tell Christie, for reasons that would be obvious if you knew what the plan was. \n\nMuch to think about. Hmmm. \n\n***\n\nI briefly considered getting out the whiteboard and markers to map out the plan and its possible pitfalls, but that would be evidence, and I didn't need any of that right now. \n\nThis whole situation was really a series of alternatives, one after another. The trick was getting the 'ifs' and 'thens' to fall in the correct order to avoid death and destruction at the hands of Christie's Father, Ed. In truth, I really had nothing to lose, as Christie could handle her Father, and Angela was the one who was lying to him, in a fashion, right now. \n\nStill, I thought I could find a way to get through this without bloodshed on anyone's part. If I could only think it through? So far, I had an idea that might work, but it put the bullseye back on my forehead, something I didn't like, but was willing to risk, if it solved other problems. \n\nPoint A, the current situation, was easy. Christie and I are in love, and Angela knows about us. Point B is, in my mind, just a stop on the way to the final destination, and involved letting Ed in on the situation, without getting killed. Point C, my ultimate goal, would see Christie and I wed, and her much closer to home. Perhaps even with child, although that wasn't necessarily needed. Well, not yet, anyway. \n\nEvery time I tried to think it out, I would only get so far before my brain melted. Maybe it would help to work backwards? ",
        "In a perfect world, there would be a way to tell Ed about us, thereby making Christie happy, and have him be happy as well. So what would make Ed happy? What does make Ed happy? Hmmm. Oh, Angela? \n\nI got on the phone and put my inside man, or rather woman, on the case. Angela would pump Ed for information, and combine it with her own knowledge of what makes her husband a happy camper... other than time spent between her legs, of course, although it might come to that...and provide me with a list. \n\nWhen I next talked to Christie, I put the same question to her. \n\n\"Jeez, honey,\" she laughed, \"you're putting a lot of thought into this, aren't you? Multiple spies, a major intelligence operation, and extreme planning. It's like D-Day!\"\n\nPlease!\" I smiled. \"That was only the invasion of Europe. This is being with the woman I love. It's far more important!\" Even more important than I can tell you, I thought. \n\n\"Okay, baby, I'll come up with a list, too,\" she giggled. \"I'd have an easier time listing what makes me happy. Short list. One item. Starts with 'J'.\"\n\n\"Really? How many letters?\" I asked, playing dumb. \n\n\"Mmmmm...that would be four,\" she purred, getting into the game. \"Same number as in 'love'. And 'fuck', 'cock ', 'cunt', and... \"\n\n\"What are you wearing?\" I interrupted, pulling my rapidly stiffening dick out of my shorts. \n\n\"Practically nothing,\" she breathed. \n\nYeah, we get distracted easily. That's what happens when you're in love. \n\nThe rest of our conversation was populated with a lot of moans and groans of lust, as an extreme episode of phone sex broke out. \n\n\"I'm fingering my juicy pussy for you, baby,\" she whispered. \n\n\"My cock is so hard, it hurts,\" I countered. \n\nA few minutes later, we grunted through mutual, simultaneous orgasms, and conversing gave way to panting, gasping breaths. \n\n\"I miss you so much, honey,\" I said quietly. \n\n\"I miss you too, baby,\" she replied. \"Thank you. I love you.\" \n\n\"I love you, too. Goodnight, honey,\" I added. \n\n\"Goodnight,\" she breathed, and the line clicked off. \n\n***\n\nWhile I was waiting for my intelligence reports, I thought I'd look into another portion of my overall plan to make Christie a permanent resident of my bed. I needed to put an end to the 'long distance' part of our long distance relationship. There were only two ways that I could see to accomplish that end : move me closer to her, or move her closer to me. \n\nI was willing to move me if that was the only way, but I'd prefer to stay where I was. I really liked this house, with the pool and nice yard. The neighbourhood was perfect for us, and I got such a great deal when I bought it. Besides, if I could make things work the way I wanted them to, there would be advantages to living next to my in laws. Easy access to babysitting services, for one. \n\nIt seemed the best way to solve the problem was to switch schools, but that was not my decision to make. There was a school in town that would fit the bill, so I was going to gather all the information I could about it before I even suggested anything to Christie. \n\n***\n\nThe longer I thought about things, the more I was sure that my two spies would be absolutely useless. As it turns out, I was to blame for that, since I had sent them on a mission that was flawed from the start. They would be doing their best, of course, but I had asked the wrong question. I had asked what makes Ed happy, and that was far too specific. \n\nI was handicapped by my own narrow vision, and that vision came from the fact that I didn't have any children of my own, from my first marriage. I had been happy that was the case before, because it made it a little easier to deal with the gaping chasm between Christie's age and my own. Having a daughter her age... or worse yet, older...would have made the creepy feeling too strong to ignore. \n\nNow, I had to imagine what a father would feel, and that question was it's own answer. \n\nIt was simple: What makes a father the happiest? Seeing his children truly happy. \n\nFrom what I knew of Ed, he seemed to fit that mold. I didn't know him that well, but he appeared to be a devoted family man and Father. Maybe it really was that easy. \n\nMy phone rang. It was Angela. \n\n\"Hi, John,\" she said happily. \"I've got a report for you, such as it is.\" \n\n\"Thanks Mom,\" I laughed. Poke the bear with a stick. Fortunately, it was a teddy bear. \n\n\"Oh, you are asking for so much trouble, mister!\" she growled, then giggled. \"Please John, this whole 'my daughter's getting married' thing is making me feel old enough, without you stirring the pot. Let's just keep it at Angela, shall we?\"\n\n\"Okay... Angela. Just playing. You have information?\" \n\n\"Well, I don't know how much good it'll do you, but yes. Apparently, my husband is happy about fucking me, lasagna, and blowjobs,\" she sighed. \"He'd also like Denver to win the Superbowl with Peyton Manning. Now he didn't specifically say blowjobs from me...although that had better be all he's been getting...so there may be an opening there for you,\" she giggled. \n\n\"Oh gee thanks, Angela, but no...I'll leave that to you,\" I groaned. Maybe Peyton could bail me out. The Superbowl was in a couple of weeks, and the Broncos were still in the playoffs. Probably best not to bet everything on that, though. \n\n\"Sorry I couldn't be of more help,\" she said. \"I mean that.\" \n\n\"I know you do,\" I replied, \"and thank you. Bye for now.\" \n\nWhen I talked to her that night, Christie did a little better. \n\n\"First off, I have to say I'm not sure I've ever seen my Father truly unhappy,\" she said. \"Sure, I've seen him pissed at traffic, or a bad call at a football game...but I've never seen him angry at anything consequential.\" \n\n\"Oh great, I get to be the first,\" I grumbled. \"Wonderful.\" \n\n\"Now, now baby...I'm sure it won't be that bad,\" she consoled. \n\n\"Hopefully not,\" I breathed. \"You said 'first off'? That means you have more, right?\" \n\n\"Yeah, I suppose. It seems that he's happy when he's making me happy.\"\n\nAh, that's what I thought. Thanks for confirming my supposition. \n\n\"Okay, so we'll go to the circus, then?\" I suggesting with a laugh. \n\n\"I'm not sure clowns are going to do the trick,\" she giggled back. \"Let's change the subject. Valentine's day is in less than a month, and I think we should spend it together. Does that sound like something we could do?\" \n\n\"It's on a Saturday, right?\" I asked. \n\n\"Correct.\"\n\n\"Sure. Why don't we get a room someplace nice for the weekend? Maybe that little town along the way, about an hour from you? There's a lake there. Probably some B&B's with nice views and comfortable beds. Romantic enough?\" I asked hopefully. I needed my fix of Christie's body. There's no way I could make it to Spring break. \n\n\"Sounds perfect,\" she purred, \"and like you've given it some thought already. It's not exactly high season, being frozen and all. They're operating?\" \n\n\"I will look into it,\" I answered. \"Friday and Saturday night?\" \n\n\"Sunday too!\" she pouted. \"I'll take every minute I can get!\" \n\nMe too, I thought. \n\n\"Okay sweetheart, leave it with me. I'll find us a nice place,\" I confirmed. \n\nWe spent another few minutes gabbing about stuff, then said our goodnights. \n\nMy idea was taking form. I thought it would work. I hoped it would work. I was still nervous though. I needed the right setting. \n\n***\n\nValentine's day arrived. Well, the Friday before, anyway. Angela had agreed to babysit the dogs, doing so with a knowing smile. \n\n\"Have fun John,\" she giggled, \"and say hello to my daughter for me.\" \n\n\"I don't know what you're talking about,\" I winked, and threw my bag in the car. I hoped the road would be at least as clear as the last time, since I wasn't borrowing the SUV. The weather was supposed to be fine. \n\nFive hours later, I pulled off the highway, and took a side road to the lake. Frozen and snow covered, this area was at a much higher elevation, tucked into a ridge and surrounded by conifers. In the summer, it must be breathtaking. Now, the silence was deafening amid the snow laden evergreens, and it was beautiful in its monochromatic simplicity. \n\nI found the house, and checked us in, getting a tour of the suite we would call home for three nights. Secluded and private, it was perfect, with a huge king sized bed, and soaking tub, and even a hot tub outside on a private deck, not far from our door.  \n\nI jumped back in the car, and raced off to retrieve Christie, barely an hour away now. Dropping down into the valley where her school was, the weather was warmer, but raining, and I parked outside her dorm while I sent her a message. \n\nYour chariot awaits, I typed. There was an immediate response. \n\nJust packing. Be down in a minute. \n\nPack warm stuff. Snowy up there, I replied. \n\nI was hoping you'd keep me warm ;-), she sent back. \n\nJust in case we make it out of the bedroom :-D, I typed, giggling happily. \n\nChristie appeared next to the car, and opened the door quickly, tossing her bag over the seat back and taking her spot next to me. Rain speckled her face, and decorated her lashes. She said not a word, just leaned closer and planted a passionate kiss on my lips. The embrace lasted a minute or two, before she surfaced for air. \n\n\"Oh, how I've missed that,\" she smiled, tickling my ear with one hand. \"Now let's get there, so I can catch up on other things I've missed.\"\n\n\"Tally ho!\" I called, and turned the key, while she buckled her seatbelt. \n\nIt really seemed to take longer going back to the B&B, but really didn't, and an hour later, we pulled into the driveway. There was a short, private walkway around the house to our entrance, and Christie took my arm as we strolled slowly, listening to our steps crunching in the snow. \n\n\"Wow!\" she gasped, taken by the view. I led around and opened the door. \n\n\"Wow, again!\" she giggled, kneeling on the bed. \"I could get to like this!\" \n\nYes, but I'd rather have you in my bed, every night, at home, I thought. This is a nice intermediate, not the final goal. \n\n\"Do we have a plan for dinner?\" she asked, rolling onto her back and inviting me to join her with her eyes. \n\n\"There's a little diner out by the highway. Looks relatively edible. Lots of trucks,\" I smiled, kicking my shoes off and sliding up the bed into her arms. \"I could have a little appetizer here...if you like?\" \n\n\"Appetizer, huh?\" she giggled, and rolled over on top of me. \"I might want one, too. In fact, I think I'm hungry right now!\" \n\nChristie arched her eyebrows, and inched down my body, licking her lips when she stopped level with my crotch. \n\n\"Ah, here it is,\" she whispered, rubbing her face across my rapidly growing bulge. Her hand gently teased the zipper down, then undid my belt and unbuttoned my pants. A few tugs later, only my underwear was in her way. She kissed the cotton stretched over my dick, and peeked up at me with a mischievous grin on her pretty face. \"Do you have some creamy filling for me?\" \n\n\"I would say 'yes'...most definitely yes,\" I groaned, as she peeled my jockeys down, and freed my stiff cock. Her tongue flicked out, and caressed the head, before her mouth opened wide and swallowed my shaft. \n\n\"Oh shit, baby...that's so good,\" I breathed, laying back to enjoy her considerable skills. \n\n\"Mmmmm hmmm,\" she moaned, sliding her lips up and down slowly. She knew exactly what turned my crank the quickest, and could have received her desired mouthful of cum in no time, but this blowjob took a decidedly languid turn. Christie seemed to relish having my stiff dick deep in her mouth. She sucked gently, twirling her tongue around skillfully while she bobbed her head and stroked me with her hand. The combined effect, and her pretty blue eyes gazing up at me with such obvious love, had my balls boiling in no time, but she put me on simmer, easing me back from the edge. \n\n\"God, I love your nice hard cock!\" she hissed, stroking me firmly, with a string of spit connecting her lips to the head. \"So warm, and hard, yet soft and like velvet against my tongue.\" Her tongue snaked out, and caressed the head of my dick, while she moaned, expressing her enjoyment \n\nI was rather enjoying it myself, but she was also driving me crazy. I was torn between the exquisite sensation she was providing, and wanting her to go just a little harder so I could reach my peak. I fought against the urge to thrust into her mouth, and just let her do her thing. I laid back and closed my eyes, but wasn't silent. \n\n\"Oh honey, you are the best...that's it, baby...that's it...oh yes, suck my cock, honey...oh, shit, yes...oh shit. You're gonna make me cum!\"\n\nChristie sucked harder, and pumped faster, moaning louder and demanding her treat. \n\nI like to think of myself as reasonably well spoken, but I was at a loss for words to express the emotions she was causing me to feel as I exploded, dumping the contents of my balls into her mouth. The best I could do is grunt, and moan, but I think the message got through. She kept sucking and stroking, drawing the last bits of cum out for her to swallow gleefully. \n\nI opened my eyes, watching the room spin counterclockwise over my head. Christie's smiling face appeared in my field of view, as she crawled up the bed to cuddle beside me. \n\n\"Just like fine wine,\" she giggled. \"It's better with time.\" \n\n\"Cork popped, bottle empty,\" I mumbled, still breathing heavily. \n\nShe snuggled closer, pressing her full breasts into my ribs, and resting her head on my shoulder. We laid there quietly for a few minutes, before she vocalized what was on her mind. \n\n\"John, I've been doing a lot of thinking...\" she whispered. \n\nMy head was still fuzzy, but those words snapped me wide awake. This sounded serious. In my experience, 'I've been thinking' is used to justify changing your mind about something, going back on a previous decision. I prayed it wasn't me she was reconsidering. I rolled to face her, and she traced her fingernails across my chest. \n\n\"Go ahead, honey,\" I replied, bracing for the worst words a man can hear. It didn't make me more confident that she wasn't looking at my face, staring instead at the spot her fingers were caressing on my chest. We talked nearly every night, and she had never expressed any reticence. \n\n\"I'm not sure I can take much more of this long distance relationship, stuff,\" she said softly. I could see that she was upset, and feared the worst. \n\nSuddenly, that dark day in my past, when my ex-wife confessed her infidelity and asked for a divorce, came flooding back, overwhelming me with dread and sadness. \n\n\"How would you feel about me moving home?\" she asked. \n\nSee, I knew it was too good to be true. I knew having this wonderful woman...so young and vibrant, yet mature beyond her years, wanting to be with me...had to end badly. Now she wants to...move home? What? Huh? I was confused. \n\nMy eyes had been closed, sure this was bad news, but as I realized that she wasn't breaking up with me, I opened them. Christie was smiling. \n\n\"Would it be okay if I moved home?\" she repeated. \"I mean, being right next door might be harder than being apart, at least until we figure out how to tell my Dad.\" \n\nIt was sinking in now. Her concern was for our immediate future, not our long term plans. We were still us. My heart started beating again, and I exhaled. I realized that she wanted to do what I had been hoping she'd agree with, if and when I suggested it. She was ahead of me again. \n\n\"I'd like that very much,\" I smiled, and pulled her closer. Now that I had survived what I was sure would be bad news...thankfully a misinterpretation on my part...I wanted her more than ever. I pawed her everywhere, tugging at her clothes. She smiled back, and let me unbutton her blouse. \n\nMy hand slipped inside, and I mauled her breasts roughly through her bra. She gasped and moaned softly, while my frenzy increased, until I was ripping her clothes off. Her pants went flying, and I reefed her tiny panties down her legs. She still had her bra on, dishevelled as it was, and her blouse was wide open, but so were her legs, so I dove in, burying my face in her cunt. \n\nShe was wet, and excited, and delicious, as usual. I swirled my tongue rapidly, around the inside of her succulent hole, and up over her clit, suckling on the pink pearl that was peeking out of its hood already. I attacked her pussy furiously, eager to give her the pleasure she deserved...especially now that I knew I had read her mood incorrectly. The relief washed over me, and I feasted on her juicy gash gleefully. \n\n\"Oh my god! Yes, baby... eat my pussy! Suck my clit! It's so GOOOOOOD!\" Christie groaned, squirming blissfully under my tongue. \n\nI glanced up at her without slowing my attentions, and saw her in rapture. Her head was thrown back, eyes screwed tightly shut, and mouth wide agape. She was tugging on her nipples, having lifted her big, beautiful tits out of their confining garment. A flush was building on her chest and neck, indicating that I was on the right track. Of course, all I really had to do was listen. She wasn't being a silent recipient. \n\n\"Ohhhhhhhhhhhhhhh, shit, honey... YES!... JUST LIKE THAT!...RIGHT THERE!... OH... FUCK... I'M... CUMMMMMING! AHHHHHHHHHHHN!\" \n\nShe gushed in my mouth, leaving a slick of salty sweetness on my face. I might normally have remained in place, savouring her nectar for a while longer, but I was hard as a rock again, and I needed to fuck her. Now, and hard. \n\nI crawled up quickly, and impaled her, spearing her gaping hole in a single thrust. I settled into position while Christie wailed happily and wrapped her body around mine. She desperately sought my lips for a passionate kiss, and I was happy to comply, tangling my tongue with hers as I began to pound her cunt. \n\nToo long apart... too much in love... too excited to be gentle...I fucked her with a selfish fury that I'd probably be ashamed of under different circumstances. Fortunately, she shared my ardour, and was enjoying being ravaged. \n\n\"Yes, John, yes...fuck me, baby...fuck me hard!\" she urged. Her hypnotic blue eyes were locked on mine, and her pretty mouth was twisted into a snarl of lust. She had one hand in my hair, and was pulling hard, returning the rough behaviour. \"FUCK MY CUNT WITH YOUR BIG COCK!\"\n\nI briefly worried about the structure of the bed, wondering if the moans and groans it was making were indicative of imminent collapse. Screw it, I thought. If it breaks, it breaks. It'll make a great story. \n\nChristie was squealing unintelligibly, cumming again, while I drove full length strokes into her clutching pussy. I was leaning hard into her, enjoying the sensation of her big, round globes crushed against my chest. Between the bed's loud protestations, my darling's screams of orgasmic joy, and the sharp slapping of bodies colliding repeatedly, I expected a knock at the door any second. Fortunately, I was just about ready to join my young lover in climax. \n\nShe screamed louder when she felt my cum flooding into her, and a smile of appreciation crossed her face. She caressed my face gently while I grunted through the spasms, pumping hot juice deep into her pussy. It was a very fast, desperate, sweaty fuck, and we both loved it. I wilted atop her. The room fell deathly silent, save for our gasping, ragged breathing. \n\n\"Oh...wow...baby,\" she breathed. \"That...was...intense.\" \n\nI moaned. That was the extent of my ability to communicate at this moment. \n\nA minute or so later, I was able to move, dragging myself off Christie to flop beside her, and allowing her to race to the bathroom with cum dripping down her leg. She returned soon, a bright smile on her face, and snuggled next to me. She had discarded the rest of her clothes, and was now deliciously smooth and bare in my embrace. ",
        "\"If that's the kind of welcome I can expect,\" she giggled softly, \"I should have moved back home months ago. Wow! I felt that one, honey.\" \n\nI smiled back at her. \n\n\"I guess I shouldn't be surprised, but I was going to ask you if you'd consider moving back,\" I whispered, looking into her eyes. \"I didn't want to seem selfish. You have a life there, and I didn't feel like I had a right to ask.\"\n\n\"Honey,\" she smiled, \"I'm the one who should apologize. I had no reason to stay away, and every reason to want to be closer to you. I love you. If I had known my perfect man was going to move right next door, I would have started at the school in town. I only moved away to get away from my Mom. I mean, I love her, and she's the best Mom ever, but she can be a bit of a busybody, as recent activities have shown.\"\n\n\"You don't mind transferring?\" I asked. \n\n\"Not at all,\" she replied. \"Actually, it will be an advantage. Their psych department is better...a bit more expensive, but nothing I can't handle.\" \n\n\"You mean 'nothing WE can't handle',\" I grinned. \"When?\" \n\n\"Well, if you can live without me until spring break, that would seem the obvious time. Can you do without me until then?\" she giggled, toying with my exhausted, cum slicked dick. \n\n\"No,\" I laughed, \"but if I have to, I'll give it a shot.\"\n\nSpring break? I thought. That might be the perfect time for everything to be resolved. Just five weeks away or so, it could be the end of one chapter, and the beginning of the best thing that ever happened to me. \n\n***\n\nI was right about the diner. While it might not have been the most romantic setting, the food was good, and surprisingly inexpensive. \n\nWe were catching a lot of attention from the other patrons. Mostly male, and consisting of several truck drivers, they weren't blind to the striking, busty young beauty in their midst. Christie's strawberry blonde hair was tumbling loosely over her shoulders, and partially hiding the display of cleavage she had provided me with her choice of wardrobe. The dress she wore was perhaps a little too light for the wintery conditions, but looked fantastic on her, hugging every curve. \n\n\"All these eyes on me are making me very self conscious,\" she whispered, tossing her mane back to make that crease of heaven between her breasts more visible. \"And horny.\"\n\n\"After what we just did?\" I asked, incredulously. Only an hour ago, we had rattled the windows of our bedroom. \"You're insatiable!\" \n\n\"No one's fault but your own,\" she smiled. \"Can't blame a girl for knowing when she's got a good thing in her bed, and wanting more of it.\" \n\nThe waitress was within earshot for the end of that sentence, and laughed as she put our coffee on the table. \n\n\"Amen to that,\" she winked, and left us alone. \n\n\"See?\" Christie giggled, \"and she doesn't even know you!\" \n\nJust another thing to love about her. That wicked sense of humour. We ordered dessert, and she ate her chocolate mousse in the most erotic and sensual manner imaginable, while I watched her and enjoyed my slice of lemon meringue pie. The look in her eyes told me it was time to go back to our room. \n\n***\n\nWe parked in the driveway again, and walked around the house to our entrance. I turned right, toward the door, but my sweetheart went left, in the direction of the hot tub. It was dark, but the moon was lighting her way. \n\n\"Um, honey?\" I asked, following a few steps behind. She ducked around the privacy screen that hid the tub from the house. \n\n\"Ooooo, this is nice,\" she cooed, lifting the cover and dipping her hand in. \"Very nice.\" She flipped the cover back, and steam billowed out into the cold night air. \"I'm feeling like a skinny dip. Join me?\" \n\nBefore I could say a word, she was taking off her coat, and shimmying out of her dress. Within seconds, she was standing in the moonlight, clad only in her bra and panties, with her totally impractical high-heels on her pretty feet. She turned her back, holding her hair aside, for me to unfasten her bra, which I did deftly. \n\n\"A bit cold for this, isn't it?\" I asked, watching her step out of her panties, and then her heels. She climbed over the edge, and immersed her naked body in the bubbling water. \n\n\"Mmmmm, not in here. Nice and toasty in here,\" she smiled. \"Plenty of room, too.\" She bobbed in the water, shaking her boobs at me, as if I needed enticing. \n\nI sighed, and followed her lead, stripping down to my birthday suit in the cold. It was quite nippy above the water, but once I was in, frostbite dropped to the bottom of the list of concerns. Christie cuddled against me, and I realized how perfect my life had become. I was here, in this beautiful, romantic setting, moonlight streaming through the mist, while the most beautiful, wonderful woman in the world pressed her perfect, voluptuous body against me. She kissed me, and perfect became a little more so. \n\n\"I love you, Christie,\" I whispered, and she looked up at me, eyes glistening in the dim light. She slid off the seat, and stood, turning to face me. \n\nSteam cascaded up around her form, as the hot water dripped down in rivulets that followed her curves. It was ethereal, my goddess in the moonlight, and she climbed into my lap, straddling me. Settling back into the water, her breasts pressed into my chest, she put her arms around my neck, and found my lips with hers again. This kiss was prolonged, passionate, and as hot as the water that cocooned us against the chill. \n\n\"I love you too, John. I can't tell you how much I've missed your touch, and your kiss. And...that wonderful big cock of yours, of course.\" She rested her head on my shoulder, and I held her, for several minutes of silence. \n\nI desperately wanted to ask her. I ran through it in my mind. Christie, will you be my wife? I thought, but knew, as much as this might be the perfect time to propose...romantic setting, Valentine's Day eve...it wouldn't solve our other issue. I needed to wait. Christie sighed. \n\n\"This is lovely, but I think we'd freeze to death doing what I want to do next,\" she giggled. \"Let's go inside.\" \n\nI nodded, then realized that we were going to have to do a wet, naked dash to our door. Christie apparently had the same thought. \n\n\"Hmmm...didn't think this all the way through, did I?\" she chuckled. \"Well, it's not getting any warmer out. Let's go!\" \n\nShe leapt out of the tub, with me right behind her. I closed the cover, while she gathered her clothes in one arm, shoes dangling from her fingertips. I did the same, and followed as she led out. \n\n\"Shit! That's cold on the tootsies!\" she gasped, tiptoeing through the fluffy snow. I agreed. She flicked a few flakes at me playfully. I returned the favour. That's about when things got out of hand, and a naked snowball fight broke out. \n\nThat's not quite right. It wasn't really a snowball fight, as the snow was too dry and fluffy to make snowballs. She scooped a handful in my direction, then ran, dodging my return volley. Giggling girlishly, she shook a snow laden branch at me, getting my right side. It was cold! \n\nI got her on the ass with a handful as she tried to escape, causing a shriek of joy, then she grabbed a handful of snow and lunged at me, rubbing it in my crotch. \n\n\"Oh, now you're gonna get it!\" I laughed, and chased her. She ducked around a trellis, using it to keep me away from her. \n\nPerhaps that was a strategic gaff on her part. Most certainly, what I did next was not my smartest move. \n\nI grabbed the trellis, and shook it. It was thick with snow, and she was under it. You can imagine the result. \n\nSurprisingly, she didn't scream. Pounds of icy, powdery snow dropped on her head, and everywhere else, sticking to her wet body like flocking on wet glue. \n\n\"Oh shit!\" I said quietly. \"Sorry, honey.\" \n\n\"You...are...a...dead...man,\" she growled, shaking her head to clear her vision. \n\n\"Here, honey...kill me inside. Let's get you warm,\" I laughed, putting my arm around her shoulders. She was shivering. At least we were nearly to the door. I dug the key out of my jacket pocket, and opened the door. \n\nShe was giggling again as I took her clothes from her, and shook them out. Both shoes were full of snow, so I knocked them clear. I closed the door, and turned on the gas fireplace, grabbing a big, soft towel from the bathroom which I used to wrap her in. I held her, and we knelt in front of the flames. Gradually, her shivers reduced, then stopped altogether. \n\n\"Feeling better?\" I asked. Tiny drops of melted snow adorned her face as she looked up at me. \n\n\"Mmmmm, yes, thank you,\" she smiled, snuggling closer. \n\n\"Sorry I did that. Am I in mortal danger?\" I whispered. \n\n\"Nah. You're safe. I love you too much,\" replied. \"Besides, I started it, didn't I? Did I freeze your dick?\" Her hand caressed my balls, wet with melted snow, but warm enough. \n\n\"No problem. He'll live,\" I laughed. \n\n\"Just the same, I'd better check on him,\" she breathed, and slipped out of my arms, heading south. \"Are you okay, my little friend?\" she asked playfully. I felt her warm breath on the head, then the heat of her mouth as she inhaled my cock. \n\n\"Oh god, baby,\" I moaned. \n\n\"Mmmmm,\" she responded, sucking gently. She laid on her belly, head tilted up as she perched on her elbows. Her feet kicked at the air as she bent her knees. She moaned again when my cock began to respond to her actions, swelling and lengthening rapidly. She pressed up a bit, and bobbed her head eagerly, slurping my shaft. It felt incredible. \n\nChristie kept this up for a couple of minutes, then withdrew, and pushed me over onto my back. \n\n\"All we need is a bear skin rug,\" she smiled, straddling my hips. She guided my stiff rod to her opening, and squatted, impaling herself. \"Just have to make do with bare skin, I guess,\" she groaned, sliding down slowly until I was balls deep. \n\nI'd never made love in front of a fireplace before. It was very sensual, impassioned, and arousing, even more so when she leaned forward to kiss me, resting her full breasts on my chest. \n\n\"Thank you so much for finding this place,\" she whispered between kisses. \"I really like it here. Of course, that's mostly because of the company.\" She undulated her hips, and purred softly. \"Such good company.\" \n\nI laid back, and watched her skewer herself energetically, sitting up fully, and bouncing her ass on my lap. Her ass wasn't the only thing bouncing. My eyes were drawn to her fabulous, quivering breasts, that were glistening with sweat from the heat of the fire. \n\n\"Oh yeah, let me ride that big fucking cock,\" she moaned. \"So good, the way it stretches my pussy wide open. So fucking good!\" She tilted her head back, and ground her clit against the base of my dick, bringing herself to the precipice. \"Uhhhn! Uhhhhhhhhnnnn! FUUUUUUUUUUUUUUCK!\" \n\nHer eyes were shut tight when she bent back toward me, but fluttered open seconds later. A fire burned inside her, as well as the one we were in front of. \n\n\"Ooooo, that was good,\" she smiled, blowing stray hairs out of her face. She lifted off, and laid beside me, facing away, toward the fire. \n\nI rolled to face her, snuggling close and wrapping her up in my arms. She reached between her legs, and slipped the head of my still rampant shaft into her pussy again. I pressed deep, and she hissed a passionate 'yessss'. \n\nI put one hand on her hip, and started to fuck her again, drilling between her firm yet pillowy butt cheeks. She lifted her right leg, giving me better access, and encouraging me to drive deeper. Finally, she arched her back, and rolled her right shoulder back, making a kiss possible. \n\nSo here we were, locked in a hot, sweaty embrace, laying on the floor in front of the fireplace, fucking furiously. I had one handful of her soft, left breast, and a mouthful of her tongue. I reached around her right thigh, and began to rub her clit while pounding her from behind. The fuse was lit. \n\n\"Shiiiiiit! Yes, baby! Donnnnnnnnn't stopppp!\" Christie groaned. \n\nI had no plans to stop, and stepped it up a notch, stroking into her juicy cunt even harder. She squealed with each ardent stab. Her hand was pressed over mine, directing my flying fingers to just the right spot. I didn't mind the input, and she seemed to be enjoying my dick being put into her like this. \n\n\"Oh fuck! Oh fuck! Ohfuckohfuckohfuckohfuck... OhHHHHHHH FUCK!\" she screamed, as her pussy played a staccato rhythm on my intruder, grabbing tight with each spasm. \n\nI was nearly there myself, and pressed her over onto her stomach, putting my knees outboard of hers and ploughing into her pussy like a madman. She was still cumming, now screaming into her crossed arms, when I reached my zenith. \n\nI just love cumming inside her pussy. It's especially satisfying when she's in the throes of her own orgasm, and seems somehow much more intimate than spraying it all over her. I like that, too, but it didn't feel right, on this romantic occasion. \n\nChristie groaned as I grunted and dumped my load all the way up inside her gash. I can only imagine that, as my third squirt of the night, it wasn't that voluminous, but it still felt like a slice of heaven. When I was empty, I rested on my elbows and knees, trying not to squash her. \n\n\"Hot...\" she whispered. \n\n\"Yes, it was hot, wasn't it?\" I replied, kissing her shoulder. \n\n\"Yes,\" she giggled, \"but that's not what I meant. I am cooking, being so close to the fire. It's too hot! Off me, please, so I can move?\" \n\nYeah, I thought we were a little sweatier than usual, and after I rolled off her, she reached out to turn the fireplace down, and sat up on her haunches. She laughed, and pointed to the smooth floor we had been on. \n\n\"Look at that,\" she smiled. I peeked over her shoulder. On the floor were two boob-shaped sweat smears, where her round breasts had been flattened by our weight. \"Should we leave our mark? Like Grauman's Chinese Theatre, in Hollywood?\"\n\n\"I've heard that Marilyn Monroe and Jane Russell wanted to do boob prints there, but got turned down,\" I smiled. \"Can you imagine? Instead of all those women putting their hands in Marilyn's prints, they'd be testing their breasts against hers. The traffic would be terrible, with all those boobs around.\"\n\n\"Do you think mine would measure up?\" she asked coyly. She glanced down, and cupped her right breast. She smiled, and I moved closer, dipping my head to suckle the offered nipple dutifully.\n\n\"Mmmmm...I'll take that as a 'yes',\" she sighed, and stroked my hair. \"Thank you.\"\n\n***\n\nI woke up before Christie. That was a miracle in itself, given how often she had woken me through the night. Three times we had enjoyed each other's close proximity by making love. We were quiet and gentle each time, but still brought each other to a climax. \n\nI laid there, gazing at my hopefully soon-to-be wife. She was just so beautiful, and peaceful, sleeping like an angel. Her hair partially covered her face, and her plump lips puckered open, blowing little pops and whistles that were so cute. Adorable. I was ruined for life. No other woman could ever measure up. \n\nWhile I watched, she stirred slightly, and one eye opened slowly, peeking out through a curtain of strawberry blonde. She saw me looking at her, and smiled. \n\n\"Mmmmm, good morning,\" she whispered. \"What time is it?\" \n\n\"Don't know,\" I replied with a smile. \"Don't care. We don't have a schedule.\" \n\n\"True, but I'm hungry,\" she giggled. \"We were up a lot last night. You were incredible.\"\n\nI picked up my watch from the bedside table, and checked the time. It took a few seconds for my eyes to focus. \n\n\"Well, breakfast should be here soon. They said they had a special meal for us for Valentine's Day,\" I replied. \n\n\"Really? That's very nice of them. Happy Valentine's Day, sweetie,\" she smiled, kissing me softly. \"I'm going to hit the shower. Call me when the food arrives?\" \n\n\"Of course, darling,\" I said, and watched as she rolled out of bed. She jiggled and wiggled around the corner into the bathroom. The shower started a few seconds later. She had almost finished when I saw the shadow outside the windows, and there was a knock on the door. \n\n\"Just a moment,\" I called, scrambling to my feet, and pulling on the robe provided. I hoped I didn't look too much like I'd been having sex all night, and didn't have pussy breath. I opened the door. \n\nIt was Janice, the owner, with a huge tray of breakfast for us. She stepped in, and placed the tray on the table. She gave me a quick rundown on everything, and was just about to leave when Christie came out of the bathroom, clad in her own robe, and towelling her damp hair. \n\n\"Oh, doesn't this look wonderful,\" she smiled, introducing herself. Janice shook her hand, and glanced at me with a wry grin. She saw the age difference immediately, as Christie was only slightly older than her own daughter. I suppose she had seen similar guests before. \n\nOnce Janice left, we sat down to share breakfast. A flower in a vase was on the tray, along with a danish for each of us. The pancakes were heart shaped, special for today. There was juice, and coffee, and sausage, and bacon, and fruit...everything needed to fuel up for what was sure to be an energetic day. \n\nAnd...it was. \n\n***\n\nMonday morning finally rolled around, and we packed into the car to roll down the hill to Christie's school...or at least, her school for now. We had discussed the idea of her transfer at length between bouts of lovemaking over the last two days. She was going to start the wheels in motion from her end, and I would work from the other. I was ecstatic. Things were working out better than I could have hoped. \n\nMy honey dragged out our goodbye with her usual aplomb, reluctantly leaving the car to attend her class. We had worn each other out over the weekend, but it had to last us another month or so, until she moved back home. A final deep kiss sealed our weekend, and she went inside. \n\nThe trip home was uneventful, just long and lonely. I did a lot of thinking, and came to a few conclusions. Her transfer made life so much easier, but would have been a huge complication if not for the part of the plan she didn't know about yet. \n\nWhen I got home, I was given the usual loud, frenzied greeting by my four-legged kids, and Angela appeared at the door minutes later. She gave me my post trip debrief on the dogs' behaviour. Nothing earthshattering to report. She finished talking, and gave me a raise of her eyebrows. \n\nOh... My turn, right? \n\n\"Ah, well, she's fine, and says to say 'hello'. I think telling you anything more than that would be, um... well, you'd better ask her. She'll probably tell you what you want to know,\" I laughed, blushing. \n\n\"On a somewhat related note,\" I added, \"I've given the 'Ed' situation a lot of thought, and I want to make sure that it doesn't cause a problem between the two of you. So, with that in mind... You know nothing, and you've seen nothing. Got it?\"\n\nAngela laughed, and glanced down at her ample chest. \n\n\"What? Do I look like Sergeant Schultz to you?\" she asked. \n\nI hadn't thought of it, but it did sound like the character from 'Hogan's Heroes', didn't it? \n\n\"Um, no, you don't,\" I replied, shaking my head. \"Far from it, and insulting you was not my intent.\"\n\n\"I know,\" she smiled, \"and I appreciate your concern. Okay, if you want me to play dumb, I can do that. Are you sure you want to go it alone?\" \n\n\"Yup, I've got it all planned, and if there's fallout, I want it to be on me, and no one else,\" I said. \n\nI felt like a naked bullfighter, trying to avoid the horns of an angry bull. Can you be happy and angry at the same time? \n\n***\n\nAt Christie's school, spring break took place just after exams wrapped up, ending the semester. That's why she thought it was the perfect time to transfer. Even better, her new school had exams after the break...exams she didn't need to take, as she hadn't started those classes...so her break would be extended. I was thrilled. ",
        "We had decided to keep the transfer a secret from her parents, certain the surprise would be a good one. \n\nEverything was in place. \n\nI suppose our plans put a little more pressure on her during exams, wanting a clean start with maximum credits in her favour, but she handled it easily, passing with her usual flying colours. \n\nEver since I had given her the ride back to school after her Christmas break, she had been stranded there without her car. Now that she was leaving for good, she would need a ride again. John to the rescue. \n\nI borrowed my friend's truck again, just in case she had a lot of stuff to bring back, and made the drive there one last time. She did have more boxes than my car could have accommodated, so the truck was needed. As she took her seat, she giggled, and sniffed. \n\n\"See? It hardly smells of my pussy at all!\" she smiled. \n\n\"Yeah, well, just the same, let's not reenact the scenario. He gave me funny looks for weeks,\" I laughed. \n\n\"Okay, baby. Home, James,\" she chuckled, pointing in the right direction. I started the engine, and put the truck in gear. \n\n\"Honey...my name is John,\" I said, pulling into traffic, \"but you can call me anything you'd like.\" \n\nChristie behaved herself on the way home, and we had a nice, relaxing trip, with the customary midway pit stop for lunch. While we were waiting for our food, she gave me this look that told me she had something serious to say. \n\n\"Baby, you're sure you'll be okay with this, right?\" she asked. \"I don't want to assume anything, and it will be harder on you than me.\" \n\n\"Don't worry your pretty little head,\" I replied. \"I've had lots of time to figure it out, and I'm sure we'll be fine. I wouldn't have it any other way.\" \n\n***\n\nHaving delivered Christie back home, I stashed her boxes in my garage and returned the truck to my friend, returning with my car. When I walked in, there was a message waiting on my home phone. It was Ed. \n\n\"Hi John, it's Ed, next door,\" he said. \"I wanted to thank you again for picking up my little girl and bringing her back home. We're having a little dinner celebration tomorrow night to mark Christie's return and passing her exams, and I'd like to invite you over to join us. I'll let you call Angela back, since she's the master planner. Looking forward to seeing you.\"\n\nI was a bit surprised. Ed had never called before. Did he know something? \n\nNah, I thought. He's just being a good Dad. So tomorrow's the day. \n\nI called Angela back, and she gave me the time I should arrive, in the middle afternoon. She didn't add anything, so I assume Ed was nearby. \n\nThe evening was quiet. I snuggled with the dogs. Christie didn't come for a visit, but I wasn't expecting her to. We had talked about it, and realized we might be asking for trouble we didn't need. \n\nSleep didn't come easily. I was on edge, and it took a while for me to close my eyes, but that was somewhat helpful, as it led to me sleeping later than usual. At last, it was time for me to walk next door. \n\nI was greeted at the door, before I could knock, by my lovely girl, who stepped out quietly for a quick kiss. She had been watching for me.\n\n\"I missed you last night,\" she smiled. \n\n\"I missed you, too,\" I replied. \"Ready?\" \n\n\"Ready,\" she giggled, and slipped back inside. I waited fifteen seconds, and knocked. The door opened. \n\n\"John!\" she gasped. \"Come on in! Great to see you!\" \n\nOkay, she was overplaying it. She was my girl. I cut her all the slack she would ever need. \n\nWe walked into the kitchen together, where Angela was whipping up something delicious with her usual flair. \n\n\"Hi ya, Schultz!\" I laughed. \n\nAngela went about her business without reaction. \"I don't know what you're talking about,\" she said quietly. \n\n\"Huh? Schultz?\" Christie asked. \n\n\"Ask him,\" Angela smiled, pointing a wooden spoon at me. \"He started it.\" Christie turned to me. \n\n\"I'll explain later,\" I replied. \"Where's Ed? The usual?\" \n\n\"Yeah,\" Angela said, \"except he's watching a movie, since football is over.\" \n\n\"Okay. Wish me luck?\" I asked, giving Christie a kiss. She returned it passionately. \n\n\"Would you two cut it out? I can't very well say I don't know about you if you keep doing that in front of me, can I?\" Angela hissed. \n\n\"You're right,\" I smiled. \"Sorry, Mom.\"\n\n\"Oh...fuck off, you prick!\" she giggled, flicking an olive slice at me, as I walked out. \n\nI'd been to this house often enough that I knew exactly how to find Ed. He was in his theatre. \n\nWhen I got there, Tom Cruise was calling Jack Nicholson to the stand. It was, of course, 'A Few Good Men', one of my favourite movies, and I had timed it perfectly. This was the best scene in the whole film. \n\nMy mind was turning things over, again and again, and even though I wasn't paying attention directly, the movie was colouring my thoughts. I was nervous. \n\nI was in danger. Grave danger? Is there another kind? No, Jack. Really, what was the worst that could happen? Ed would be angry, not homicidal. Christie would still be in love with me. She might even move in. Hmmm. \n\nI watched Tom Cruise's hand shake, as he prepared to confront the Colonel in the movie. I sympathized. I was a little shaky, as well. \n\nCould Ed, as the movie said, 'handle the truth'? I was just mulling that over, when Christie walked in. \n\n\"Mom, could you join us in here for a minute?\" she called. \n\nI patted my pocket. Yes, it was there. \n\nAngela walked in, wearing her apron and wiping her hands. \"Yes, honey?\" \n\nChristie stood in front of us, looking a little nervous. \n\n\"Mom... Dad...I'm moving home!\" she giggled, clapping her hands. \"I've made arrangements to transfer to the University in town, so I'm coming home!\" \n\nThere was a cheer from all involved, and hugs were dispensed. I put my hand in my pocket, and left it there. \n\nOkay, John. It's time. Scrape together all the courage you can gather, and do what you've been wanting to do for months. \n\nI stood, and took my hug from Christie. I looked deep into her eyes, then slowly dropped to one knee. She gazed at me, stunned for a few seconds, before her hand flew up to cover her mouth, and she gasped. Another gasp from behind me signalled Angela's comprehension of the moment. \n\nIn my pocket, the velvet box I had purchased nearly four weeks ago after a long search was tucked in my fingers as I withdrew my hand. Christie's eyes were wide, as I opened it and showed her the ring I hoped to be putting on her finger in a minute. \n\n\"Christie, will you be my wife?\" I asked. \n\nI was being very trusting, putting my back to Ed at this point. He was happy that his little girl was coming home, but I was dousing that fire pretty quickly. The outcome of the night was dependent on Christie's answer, in more ways than she knew. \n\nShe teared up, and nodded, opening her arms to welcome me in. \n\n\"Yes, John, of course I'll marry you!\" she giggled. \"I love you so much!\" We hugged, then Christie stepped back, ring finger extended to accept the ring. I happily slipped it on her delicate digit, then kissed her. \n\nThe order of things was certainly not conventional, but we didn't care. Yes, usually, the bride's parents knew she was seeing someone before the wedding announcement. Usually, but not today. We turned to face them. \n\nAngela was doing her best Meryl Streep impression, passably conveying surprise to those who didn't know better. Ed was just stunned, with his mouth open. \n\n\"You're this mystery boyfriend we've been hearing about?\" she asked, trying not to laugh. \n\n\"So it would seem,\" I smiled. Ed found his voice. \n\n\"So...how long have you two...\" he gestured, unable to finish the sentence out loud. Yes Ed, I've been having sex with your little girl... who, if you haven't noticed, has grown into a full blown hottie. She's a woman now. She's my woman now. \n\n\"Long enough to know that John is the perfect man for me,\" Christie answered. \"He treats me with respect, and makes me very happy, and I love him.\" \n\nShe finished the sentence in a manner that told me there was going to be no debate. Apparently, that message was also clear to her parents. Angela stepped forward, and hugged us both. \n\nOkay Ed...your daughter is happy, and your wife is happy. If you rain on the parade now, you're going to look like an ogre. I don't need you to be happy yet, just look happy. We'll work the rest of it out, between us, later. \n\nI felt a hand pat me on the shoulder, a little harder than merely congratulatory, but there was no knife involved, so I considered it a win. \n\nI hoped...perhaps the correct word was 'prayed'...that Ed could see the same difference that Angela did, between fucking his daughter, and loving his daughter. I hoped to have some time to let him figure it out. \n\nNope. The ladies left together, jabbering happily about wedding stuff, and inspecting the glittering bauble on Christie's hand. That left Ed and myself alone. His face went from happy to serious, and I knew I was in trouble. \n\n\"John...we need to have a word,\" he said. \n\nOh...shit... Dinner was going to be interesting. \n\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nThank you again for reading, and I honestly hope you enjoyed this time with Christie and John. There will be more, but I ask for your patience again, as I have several other stories that need similar attention. Keep checking in. \n\nDid you vote yet? Please do!"
    ],
    "authorname": "ilikeithot6308",
    "tags": [
        "redhead",
        "big boobs",
        "young woman",
        "older man",
        "romance"
    ],
    "category": "Mature",
    "url": "https://www.literotica.com/s/love-me-love-my-dogs-pt-04"
}
{
    "title": "The Craziest Sexy Love Story Ever",
    "pages": [
        "Summary: Straight white, black stud, cheerleader, nerd &amp; submission\n\nNote 1: Although a rather unorthodox love story...this is a Valentine's Day 2014 Contest Entry because I wanted to try something different and because I believe love can occur in so many ways.\n\nNote 2: Choosing a category for this story was a struggle as the more I wrote the more the story took on a mind of its own. It was suppose to be a typical interracial gay story where a straight white protagonist submits to black cock, yet as the story evolved, the plot thickened and the themes took a mind of their own.\n\nIn the end, this is a love story...although the most bizarre love story of all time. The story includes gay interracial sex, public humiliation, lesbian sex, threesomes, pegging, and romance.\n\nI hope you enjoy but please note that this is one of my more unorthodox stories even though it has all my usual kinks.\n\nThemes: I originally was going to put this in gay, and then considered a variety of options:\n\n-interracial because of interracial sex\n\n-fetish because of the wide range of kink in this story\n\n-transsexual and cross dressing because there is cross dressing\n\n-romance because at the heart of the story when it is all said and done it is about love\n\n-group sex because on more than one occasion there are three or more people involved\n\n-novella because of its length\n\n-but in the end I choose anal, as the story has quite a few anal scenes between just men, and men and women with anal sex as the underlying bond that ties the characters together.\n\nNote 3: Thanks to mab7991, Wayne and goamz86 for editing this crazy tale.\n\nThe Craziest Love Story Ever\n\n1. RIGHT PLACE, RIGHT TIME; WRONG PLACE, WRONG TIME\n\nThe saying the right place at the right time or the wrong place at the wrong time is all about perception.\n\nRight or wrong, being where I was, when I was, forever changed my life.\n\nI was a senior, I had turned eighteen in January and it was the third day of varsity basketball tryouts. After an intense practice, I showered and headed home. It was an hour later that I realized, in my state of exhaustion; that I had left my iPad in my gym locker. I was going to just leave it there overnight, but it had my notes for my biology project that I needed to work on tonight.\n\nI hopped in the car and drove back to school hoping there was still a door unlocked. I wasn't surprised to see coach's car in the parking lot as he lived and breathed basketball. I was surprised to see Derrick's car still there though.\n\nDerrick was a senior transfer student who had just moved here a couple weeks ago, just in time to play basketball. He was six foot two, naturally gifted and black as night. He was confident, arrogant and yet there was no doubt he could back his cockiness on the court. Although there was something off about him, he definitely was a strong addition to our already very good team.\n\nThe gym door was still unlocked thankfully and I headed to the locker room, figuring I would stop by coach's office and chat with him briefly if he was available. As I got close to his door, I heard Derrick's voice and stopped dead in my tracks.\n\n\"That's it coach, you're a natural cocksucker.\"\n\nI couldn't believe what I just heard. It just didn't seem possible. Coach was married to my guidance councillor, a women all us guys jerked off to. I didn't move, just kept listening to the surreal sounds of someone, supposedly coach, slobbering on a cock.\n\nA minute later, Derrick asked, \"Do you like sucking my big black cock, cocksucker?\"\n\nCoach stammered a moment later, \"I-I-I'm not g-g-gay.\"\n\n\"I know that, you have one fox of a wife. Do you think she would like my black cock too?\" Derrick asked.\n\n\"Please, don't bring my wife into this?\" Coach pleaded.\n\n\"I'm just saying if a so-called straight man like yourself can't resist this delicious black meat, how could a hot slut like your wife ever resist it?\" Derrick gloated.\n\nI couldn't believe what I was hearing or the reality that my cock was rock hard and dying to be let loose.\n\n\"Please, Derrick?\" Coach pleaded the tone of his voice weak and desperate.\n\nI couldn't resist, I had to see it with my own eyes. I quietly moved to the door which was opened just a couple of inches, curious to see the unbelievable.\n\n\"Please what, cocksucker?\" Derrick asked.\n\n\"W-w-we can't keep doing this,\" Coach replied.\n\nLooking into the room, I couldn't believe my eyes, even after everything I had heard. Coach was on his knees in front of his desk, completely dressed, while Derrick was standing in front of him, his huge cock pointing directly in coach's face.\n\n\"You were the one begging to suck my cock yesterday,\" Derrick said, before adding, \"and again today.\"\n\n\"I didn't beg,\" coach protested.\n\n\"Really?\" Derrick asked his tone amused. \"Tell you what coach. If you don't want my cock in that pretty cocksucking mouth of yours, let me know; I have tons of others who are eager to swallow my load. But if I walk out this door, my cock is off limits to you forever.\"\n\nThere was a long silence as coach seemed to be considering his options. Finally, coach asked, \"Can we please keep this between just you and me? I could lose my job.\"\n\n\"You sure weren't thinking about that when you dropped to your knees and gobbled up my cock in the shower yesterday,\" Derrick pointed out amused.\n\n\"I-I-I don't know what happened to me, I just couldn't resist it,\" coach replied, obviously unsure himself why he did what he had done.\n\n\"It's obvious coach. You're a straight faggot,\" Derrick said, the strangest oxymoron I had ever heard. He continued by explaining, as he shoved his long thick cock back into coach's mouth, \"You see, lots of white guys think they are straight but once they see a big juicy black cock something awakens in their brain and everything they thought they knew about themselves is changed in an instant. It was obvious in your eyes the moment you looked down and saw my cock.\"\n\nCoach was bobbing back and forth hungrily, apparently agreeing with the absurd assessment.\n\nMy hand, with a mind of its own, began rubbing my cock through my grey sweatpants.\n\nDerrick ordered, pulling his big black cock shiny with coach's' saliva cock out, \"Tell me what you are coach.\"\n\n\"Please, don't make me say it,\" the coach pleaded still trying to avoid even more humiliation than he was already enduring.\n\n\"Cocksucker,\" Derrick snapped, his tone suddenly firm, \"Say it, now.\"\n\n\"I'm a-a-a cocksucker,\" Coach blurted out.\n\n\"To all cocks, or just black cocks?\" Derrick questioned stroking his hard on.\n\n\"Just big juicy black cock,\" Coach responded, his eyes never leaving the black python in front of his face.\n\n\"Beg for my cock, cocksucker,\" Derrick ordered.\n\nCoach didn't hesitate this time, didn't plead for help, instead answered, \"Oh God Derrick, I need your big black cock in my mouth. Please let me suck you until you shoot your hot cum in my-my-my cock sucking mouth.\"\n\nDerrick shoved his cock back in coach's mouth and began fucking it roughly. \"You understand I plan to fuck that pretty mouth of yours anytime I have a load to shoot.\"\n\nCoach moaned loudly on Derrick's cock, his free hand rubbing his own cock through his shorts.\n\nThe gay scene was turning me on unlike anything ever had before as I rubbed myself frantically unable to take my eyes off of coach getting his face fucked.\n\n\"And don't think I only want that mouth of yours, a good cocksucker usually also has a super tight man cunt that is dying to be filled,\" Derrick revealed.\n\nI let out a gasp at both Derrick's new declaration and the fact I had just began coming in my pants.\n\nDerrick looked directly at the office door and seeing me asked, \"Eric, are you enjoying the show?\"\n\nI stammered, \"S-s-sorry, I didn't mean to intrude\", as Derrick held coach's head and continued fucking his mouth as if it was a natural thing to be caught doing.\n\n\"Get in here and close the door,\" Derrick ordered.\n\n\"I-I-I need to go,\" I stuttered, desperate to get out of this awkward predicament.\n\n\"Get in here now,\" Derrick said, firmly. \"I am almost done with coach here anyways.\"\n\nI obeyed, going in and closing the door.\n\n\"Here it comes coach,\" Derrick announced a minute later, his cock gliding in and out of coach's mouth like a well-oiled piston. He pulled out, wanting, it seemed, to put on a show for me and show his dominance over coach, by shooting his cum all over coach's surprised beet red face.\n\nCoach didn't look my way, just kept his mouth open as cum covered his face. \"I saved that whole load for you coach,\" Derrick said, as he reached for a phone on coach's desk.\n\n\"Please no,\" coach again pleaded, not wanting photographic evidence of his cock sucking submission.\n\n\"Look at me, cocksucker,\" Derrick ordered, his cock still fully erect.\n\nCoach obeyed, still ignoring me, as Derrick snapped a few pictures.\n\nTurning to me, Derrick took a picture of me and said, looking down at my cum stained sweatpants, \"I see you enjoyed the show, Eric. What got you off, thinking of fucking coach's mouth or replacing him and sucking my cock?\"\n\nI was ashamed at being caught with cum stained pants, but I didn't have an answer to his question. I wasn't gay, I didn't want coach, my idol the past three years, to suck me and I had no interest at all of sucking Derrick's cock. I answered, trying to sound manly and straight, \"I just never saw sex live before.\"\n\nDerrick laughed, his tone implying he didn't believe me, as he put his cock back in coach's mouth. \"Clean me off, coach.\"\n\nCoach slowly moved back and forth, his redder than the reddest apple cheeks showing his utter humiliation at being caught in the act.\n\n\"How long were you watching, Eric?\" Derrick asked.\n\n\"J-j-just a few minutes,\" I replied, desperately trying not to look at coach with a mouth full of cock, yet the gravitational pull downward was becoming impossible to resist.\n\n\"So you heard my straight faggot theory?\" He asked, smiling wide.\n\n\"Kind of,\" I replied.\n\n\"I imagine you were too busy jerking off and imagining it was you with a big black cock in your mouth to really listen and think straight,\" Derrick responded, chuckling at his own pun.\n\nMortified by his statement, I protested, \"What? God, no. It was just such utter racist nonsense I didn't bother to listen.\"\n\nDerrick laughed hard. \"We'll see, I have heard many straight white boys and men say such things, trying to be a man, trying to convince themselves they are not eager white submissive cocksuckers. Yet they almost always, without exception, end up on their knees declaring their hunger to please me. Isn't that right, coach?\"\n\nDerrick pulled his cock out of coach's mouth and waited for a response.\n\nCoach still couldn't look at me as he whispered, so quietly I couldn't hear his response.\n\n\"Speak up, cocksucker, we have a guest,\" Derrick demanded.\n\n\"Yes, Derrick, your cock is impossible to resist,\" Coach admitted.\n\n\"And you want it in your ass next time don't you?\" Derrick pushed.\n\n\"Please, not in front of one of my players,\" Coach weakly pleaded.\n\n\"He already saw you suck cock, heard you declare yourself a cocksucker and is looking at you now with your face covered in cum, it's a little late for dignity and decorum,\" Derrick pointed out. \"Do you want my cock again?\"\n\n\"Yes,\" coach whispered.\n\n\"Where?\"\n\n\"My mouth.\"\n\n\"And?\"\n\n\"My ass,\" Coach admitted, humiliated.\n\n\"Your virgin ass?\" Derrick clarified.\n\n\"From a real cock, yes,\" Coach answered.\n\n\"What does that mean?\" Derrick asked, confused by the answer.\n\n\"Sally has fucked me in the ass before with her strap-on,\" Coach admitted, humiliation piling up on humiliation.\n\n\"Mrs. Murphy pegged you, that is delicious,\" Derrick said, amused. \"You really are a faggot.\"\n\nFor a moment there were no words. Coach still sat on his knees refusing to look up; I was watching it all wordlessly my eyes constantly betraying me as I took glimpses of Derrick's cock; Derrick meanwhile was seemingly contemplating what next.\n\nFinally, the silence was broken as Derrick turned towards me, his cock still hard and now pointing directly at me, said, \"I need to get going soon. Beth is expecting some chocolate tonight. But I could always use another pair of white cock sucking lips to dump a load in. Do you want some, Eric?\"\n\n\"What?\" I asked distracted, looking into his eyes. \"No, I am not gay.\"\n\n\"They never think they are,\" he laughed, as he pulled up his shorts, apparently going commando.\n\n\"When you change your mind, and you will change your mind,\" Derrick confidently said, \"Let me know.\" He patted coach on the head, \"See you tomorrow, cocksucker,\" and left.\n\nSuddenly it was only me and coach and it was even more awkward than when Derrick was there, at least then he was in control of the conversation and the awkwardness was about him.\n\nFinally, after an eternity of silence, I said, \"I've got to go,\" and rushed out of the office forgetting completely about my iPad.\n\nI got to my car and just sat there trying to make sense of everything I just witnessed. It made no sense. Coach was married; coach was a man's man; coach was my idol. Everything in my life that made sense an hour ago was now upside down. Why did watching the homosexual act get me hard? Why did I masturbate? Why did I obey Derrick? Why didn't I stand up for myself and coach? These and a million other questions bounced inside my head as I drove home.\n\nOnce home, I tried to do my homework but it was to no avail, my head was just too full of the shocking development to think about chemistry.\n\nSuddenly exhausted, I got ready for bed and crashed rather quickly.\n\n.....\n\nThat night I had the strangest dream. I was at the NBA draft, a common dream of mine, where I was drafted first overall by the New York Knicks. This too was a common dream of mine...what happened next was new though. As I stood up and started to shake hands with everyone around me every hand I shook was a big black cock. They came from every direction before I woke up in a sweat.\n\nShaking my head, I tossed and turned the rest of the night trying to understand what had just transpired.\n\n2. PROVING MY STRAIGHTNESS\n\nThe next morning I wondered how I would be able to look Coach or Derrick in the eyes. My plan was to avoid both of them throughout the day, which wouldn't be that hard as I didn't have any classes with Derrick and coach only taught two classes. Unfortunately, there would be no avoiding them at try-outs.\n\nI wasn't at school ten minutes when I was paged by coach to meet him in his office. I cursed to myself wondering how I could look him in the eye knowing what I now knew. I made my way to his office and knocked on his door...flashbacks to last night flooding back to me.\n\nAs Coach yelled, \"Come in,\" I shook my head to get the visual out of my head and entered his office.\n\n\"Please close the door, Eric,\" he requested, which I did.\n\n\"Take a seat, son,\" he offered, like he always had during the hundreds of times I had been in this office talking basketball, NFL football and life. Coach wasn't just my coach, nor was he just my idol, he was the father I never had, my own ditching mom and I when I was three.\n\nI sat down and he began. \"I am so sorry about what you witnessed last night.\"\n\nI interrupted, trying to comfort him, \"Coach what you do on your own time is your business.\"\n\nHe said, standing up, \"Eric, I have never done anything with a student in my life before two days ago and trust me I have had opportunities.\"\n\nCoach was a good looking, well built man and I knew for a fact of plenty of girls who would quickly lift up their skirts for him.\n\nI again said, \"Coach, it is none of my business.\"\n\nCoach sat on his desk facing me and said, \"I just want you to know how sorry I am. You should never have to see such a thing.\"\n\n\"I was surprised,\" I admitted, \"but I have to ask what made you do it?\"\n\nHe sighed. \"That is the question I have asked myself on continuous loop since I first submitted to him two days ago.\" After a pause, he continued, \"It's not like I haven't seen a lot of cock before, playing ball all those years I saw many naked teammates and most were black. Yet, I never once thought of them that way, and trust me, I knew some were very, very gay and eager to turn me. But I was always a chicks only kind of man.\" He paused again, unable to really understand himself what had changed just two days ago. Finally, trying to make sense of it while he talked, he continued his explanation, \"One minute I was walking past the shower, a minute later I had a cock in my mouth, a student's cock.\"\n\n\"It just happened that quickly?\" I asked.\n\n\"It really did. He turned around just as I was walking by, his cock already hard as he had been soaping it up and he said, all confident and smug, 'Like what you see coach?'\"\n\nCoach continued, \"At first I laughed, his cock all covered in sudsy soap, I thought he was just being his usually cocky self. But then he put his hand on his cock, stroking it hypnotically while he sauntered over to me and said, so soothing and confident, 'Go ahead coach, I know you want to.' My head was spinning with the whole 'what-the-fuck-is-happening' thought and before I had time to respond he put his hands on my shoulders and guided me to my knees. I would like to say I fought it, protested or at least made a feeble attempt at resistance, but as soon as his cock was directly in my face my mind became mush and all I could think about was his big black cock. When he placed it at my lips, I robotically opened my mouth and took his cock between my lips and well the rest I guess is history.\"\n\n\"Coach, it's okay,\" I said, although I wasn't sure that was truly the case.\n\n\"I could be fired or charged if this gets out,\" he pointed out.\n\n\"I'm not going to tell anyone, Coach,\" I reassured, \"although I don't understand what happened, even after hearing what happened and seeing what happened, you are my coach, my mentor and nothing will ever change that.\"\n\n\"Thanks, son,\" he said, standing up and pulling me into a hug.\n\nStrangely, as he hugged me I wondered briefly if he would suck my cock. Once the embrace was done, my cock beginning to grow again against my own wishes, I quickly said goodbye and headed to class.\n\nThe rest of the day went by like high school days do: a surprise quiz, a terrible science video, another new math equation we will never use and yet another collection of non-rhyming poems that we had to find metaphors and similes and not be allowed to just enjoy the poem.\n\nAt lunch, I hung with my best friends and my girlfriend Karen and it wasn't until I saw Beth walking by that I remembered Derrick's words of going to save a load for her later. Was Derrick fucking Beth? He didn't seem to be much of a bluffer so I assumed it was true, yet Beth was in all advanced academic classes, already accepted to some elite music program on a all paid scholarship and not one to be seen at parties. It seemed so unlikely that Derrick and Beth would ever cross paths never mind get to know each other enough to end up fucking.\n\nBeth was cute like Mandy Moore playing Jamie in 'A Walk to Remember' which was sort of why she dressed plain, always in long skirts and old fashioned blouses although she always wore pantyhose which I had noticed, it was/still is, my fetish. She often inadvertently seemed to tease me by sliding her stocking clad feet in and out of her flats all throughout class. Karen never wore nylons other than with her cheerleading uniform and thus Beth was often the one I fantasized about while under the sheets alone. The more I thought about it the more ludicrous it seemed that Derrick would be fucking her, yet it wasn't any more ludicrous than the fact that he was using Coach as his personal cocksucker.",
        "\"Earth to Eric,\" Karen said, squeezing my hand.\n\n\"What? Oh, so sorry, I'm kind of out of it today,\" I said, which was definitely the truth.\n\n\"So it seems,\" she said. \"Are you coming over tonight after practice...my parents are gone for the night and I will be home alone.\"\n\nKaren was sexually insatiable, which is of course any high school boys' dream, but it was hard to do much with her other than sex. She was rather vapid in regards to academics and thus always talked about superficial things like pop music or shoes. During the election last year she asked who that black guy was. My heart sank, but she was so hot, so good in bed, that it was usually easy to ignore. Did I plan to marry her? God, no! But she was a good time throughout high school.\n\nI glimpsed back at Beth sitting with a couple other girls and imagined her on her knees sucking Derrick's black cock. She is so pasty white and Derrick as black as night it would be a crazy contrast.\n\n\"Is that a yes?\" Karen asked, her tone implying she was annoyed.\n\n\"What? Yes, of course,\" I replied, suddenly turning on the charm. \"Tonight you are all mine.\"\n\nJust as quickly as she was annoyed with me, she was smitten again as she kissed me and slyly squeezed my cock under the table. \"I'm going to even wear something special tonight just for you.\"\n\n\"I can't wait,\" I said, even as I took a sideways glance at Beth.\n\nWe finished lunch, and I returned to the monotony that is learning. Usually, I would be counting the seconds until I was on the court, yet today that was not the case. I knew I would eventually have to be face to face with Derrick and I really had no idea what to say.\n\nThankfully, the practice went like it usually did no hint of anything different. The coach ended the practice with a speech and saying the first cuts will be posted on the wall in fifteen minutes and a reminder of our after school pre-season game tomorrow night. Being a veteran I wasn't worried about being cut, but I was curious which of the young players Coach thought could be key players in our journey to state. We lost in the semis last year and with six seniors this year we figured to be a threat to go all the way, especially with the addition of Derrick.\n\nI went to the locker room and suddenly was paralyzed. I had showered after practice every day since my freshman year, yet now all I saw in my head was coach sucking cock. Yet, I knew I couldn't look like yesterday fazed me to Derrick who implied I may be a cocksucker too. So I got undressed, grabbed my towel and headed to the shower. Of course, nothing happened in the shower and I was just leaving when Derrick walked in.\n\n\"How's the water?\" He asked me.\n\n\"A little cold,\" I shrugged.\n\n\"I may need something to warm me up,\" he quipped back, the innuendo only obvious to me.\n\nStanding firm on my straightness I countered, \"I hope you don't freeze then.\"\n\nHe laughed, as he finished, whispering in my ear, \"It's only a matter of time, cocksucker.\"\n\nFlushed and pissed off, I stormed out of there, got dressed and headed straight to Karen's to prove my straightness to myself.\n\nI texted her I was on my way and she texted back saying to just come in and come straight to her room. Wondering what her surprise was and desperate to get laid, I sped there and quickly made it to her room. She was under the covers.\n\n\"Get naked, stud,\" she said.\n\nI didn't need to be told twice.\n\n\"Already rock hard, what have you been thinking about?\" she teased.\n\n\"You on all fours begging to be fucked,\" I answered, I loved fucking her from behind.\n\n\"I have something a little different planned for you tonight,\" she smiled playfully.\n\nI began moving towards her but she said, \"Stop and Close your eyes,\" she said.\n\nI did as requested curious as hell.\n\nI heard her move off the bed and walk towards me. \"No peeking,\" she said, grabbing my hand and leading me to the bed.\n\n\"Lie on your back, but keep your eyes closed,\" she ordered.\n\nI again did, dying to know what she had in mind. As I mentioned earlier, she was pretty sexually aggressive. She gave me a hand job in a pretty packed movie theatre on our first date, finishing by sucking my cum off her hand; she rubbed my cock under the table with her foot the first time she met my parents for dinner; she sucked my cock while I drove her home including when we went through a drive through; she made me finger her in the library at school; she fucked me in the boys' washroom after school one day. Anyways, the point is she was always full of surprises.\n\nAs I lay on the bed, I felt her join me and a moment later I felt her feet, her nylon covered feet, stroking my cock. I moaned as I opened my eyes to see she was completely naked except for a pair of black thigh highs.\n\nShe smiled, \"You like?\"\n\n\"Fuuuuck, yes,\" I moaned, the stocking sensation feeling so good. I had jerked off with my hand in Mom's stockings before, but this was way different...in a good way.\n\n\"I thought you would,\" she said coyly, as she moved her feet up and down my stiff cock.\n\nI joked after only a minute, \"I am not going to last long like this.\"\n\n\"Are you going to come all over my stocking feet?\" She asked, continuing her sensual foot job, putting a bit more pressure on my rock hard rock.\n\nI moaned in response.\n\n\"Do you want to come on my feet, baby?\" She asked.\n\n\"God, yes,\" I moaned, my balls beginning to boil.\n\n\"You've already come on my hands, face, tits, belly, pussy and ass I guess my feet seem like a natural next spot,\" she teased, reminding me of all the different ways she had got me off.\n\nI quipped, \"Don't forget down your throat and in that sweet pussy of yours.\"\n\n\"I guess the only place left is in my ass,\" she smiled, pumping her legs furiously, teasing me about the one thing we had not yet done.\n\n\"Shhhhhit,\" I grunted, the naughty innuendo the final push needed to let my cock erupt as my cum shot in the air and then onto her feet.\n\n\"So you want to fuck my ass, do you?\" She teased, once I finished coming.\n\n\"That is a dangerous question to answer,\" I said, still out of breath.\n\nShe moved her cum covered toe to her mouth and licked my cum off it.\n\nKaren was a cheerleader and a gymnast and ridiculously flexible, but this was a new moment of hotness.\n\n\"I love your flexibility,\" I said.\n\n\"Go open my drawer,\" she said, as she scooped some cum off the sheets.\n\nI quickly did, curious what else she could have in store.\n\nIt was a butt plug and lube. I returned to the bed with a questioning look.\n\n\"Do you want to fuck my ass?\" She asked again.\n\n\"Yes,\" I admitted.\n\n\"Right here, right now?\" She questioned, her hand moving to her cunt and rubbing her clit.\n\n\"Anything you want,\" I said, my cock never shrinking after my first load.\n\n\"I was hoping you would say that,\" she said, reaching for the butt plug and lube. I watched her lube it up as she explained, \"I had this in my ass all day today, preparing myself for your big cock, baby.\"\n\n\"Oh, God,\" was all I could muster in response, imagining her at lunch sitting beside me or walking down the hallway with this four inch plug in her ass.\n\n\"But I want you to do something for me too,\" she said.\n\n\"Anything,\" I said, willing to do just about anything to get her ass.\n\n\"Bend over, baby,\" she smiled.\n\n\"What?\" I asked.\n\n\"Bend over, you said you would do anything,\" she said, her hand giving my cock a tug.\n\n\"T-t-that's for me?\" I stammered, Derrick's promise to Coach suddenly popping into my head.\n\n\"It is now,\" she smiled. \"Now bend over.\"\n\n\"I-I-I don't know,\" I hesitantly said, suddenly worried that it would make me gay.\n\n\"Baby, if you want my ass, I want yours,\" she said, her tone implying that this was the deal, take it or leave it.\n\nI hesitated, but my cock was doing the thinking, and I ended up moving onto my knees. I felt warm liquid between my ass cheeks as she said, \"I have been thinking about this all day, baby.\"\n\n\"Plugging my ass?\" I asked.\n\n\"Both of us taking each other's ass,\" she said. \"I considered buying a strap-on, or borrowing one from one of the girls, but I figured that might freak you out.\"\n\n\"Other girls,\" I asked, focused more on that then what was about to happen to me.\n\n\"Honey, almost all the girls in my gymnastics' club are either full out lesbians or at least bi,\" she revealed, as I felt the plastic toy pressing between my ass cheeks.\n\nThis was news. She had never mentioned any interest in other girls before. I asked, \"Have you played with them?\"\n\nShe pushed the plug and I let out a small yelp as the butt plug slipped into my ass. \"That is for me to know and you to find out. How does that feel baby?\"\n\n\"Strange,\" I answered, which was true. A slight burn occurred at first, but overall it felt natural.\n\n\"Fuck I wish I would have borrowed the strap-on,\" she said, as she stared at me bent over.\n\n\"In not sure I'm ready for you to fuck me,\" I said.\n\n\"Well, I'm ready for you to fuck me,\" she countered as she stood up, tossed the lube to me, walked over to the wall and bent over. Looking back at me still on my knees, \"What are you waiting for?\"\n\nI didn't need to be told twice. I stood up, the plug in my ass shifting, but staying in me, I grabbed the lube and went to my bent over girlfriend. Reaching her, she said, \"Lube that cock of yours generously and also my ass, baby.\"\n\n\"Sure,\" I agreed, quickly pouring excess lube on my cock. My hand coated, I moved between her ass cheeks and lubed her pretty butthole well.\n\n\"Fuck my ass, baby,\" she said.\n\n\"As you command,\" I replied, moving behind her.\n\n\"You understand I want to fuck your ass too one day soon,\" she said, as my cock moved between her ass cheeks.\n\nNot really listening, but focusing on the task at hand, I agreed, \"Sure thing.\"\n\n\"You will let me fuck your ass?\" She repeated, as my cock poked at her rosebud.\n\nAgain my brain on auto-pilot, I agreed, \"Yes, you can have my ass.\"\n\n\"Goooo slow,\" she moaned, as my mushroom top squeaked past her tight entrance. \"Your cock is a lot longer and wider than that plug I wore all day...in class...at lunch...at cheerleading practice.\"\n\nThe listing made my cock flinch and she giggled, \"You like thinking of me with a plug in my ass don't you?\"\n\n\"It's fucking hot,\" I agreed, as I slowly pushed deeper into her ass. It was so tight I wasn't sure I would be able to pull out.\n\n\"Does your cock in my ass feel hot?\" She asked.\n\n\"My cock anywhere in you is hot, but this is so fucking tight,\" I replied, the plug in my ass poking a bit deeper in me as I pushed forward.\n\n\"Fuck, it burns baby, I'm burning for you,\" she moaned, even as her body trembled.\n\n\"Do you want me to go deeper?\" I asked. \"I'm only half way in.\"\n\n\"Yes, baby, I want all of you in my ass,\" she replied, sounding as if her teeth were clenched.\n\nI continued the slow push forward, my head suddenly going to imagining Derrick's cock slowly going into coach. \"Fuck,\" I said, annoyed.\n\n\"What, baby?\" She asked.\n\n\"Nothing baby, your ass just feels so fucking good,\" I said, which was true as I tried to get Derrick and coach out of my head.\n\nYet, as I pushed further I wondered if the thing about Beth was true, had he fucked her, taken her ass? My mind envisioned Beth dressed in her usual conservative school attire, in the boys' locker room, bent over and getting fucked by Derrick's cock.\n\nKaren moaned. \"Slowly fuck me now, baby. I want you to fuck my ass.\"\n\nKaren's words brought me back to reality and I held onto her hips and began slowly pulling back out. It was so tight my whole cock tingled with pleasure.\n\n\"Back in, baby, slam it into me,\" she begged.\n\nI did, and as my body collided with hers, she screamed, \"Fuuuuck, shiiiit.\"\n\nI grunted too, as the plug in my ass readjusted itself in me, \"Ohhhhh God.\"\n\n\"Now pound me, Eric, fuck my ass hard,\" she demanded.\n\nImitating Derrick, I asked, completely out of character for myself, \"You want all my cock, slut.\"\n\nAs soon as I said it I was mortified, yet her response eased my concern that I had gone too far. \"Yes, fuck your slut's ass, fuck it hard and deep.\"\n\nI obliged as I began fucking her ass. Perspiration dripped off me, as I thrust deep into her again and again. Each hard thrust my body slammed into hers had the plug in my ass poking into me. The double sensation was very stimulating and my head again played tricks on me.\n\nI imagined that instead of a plug, it was Derrick fucking my ass as I fucked Karen's; in essence I was the middle piece of a sex sandwich both giving and getting thick meat. As soon as the thought popped into my head, I shook it out focusing on being a dominant man.\n\n\"Beg for my cock, bitch,\" I demanded, again a derogatory word I would normally use.\n\n\"Oh yes, Eric, fuck my slut ass, make me your cum hungry bitch. You have come in my mouth and in my cunt baby; I want this load of yours to explode in my ass.\"\n\n\"I can make that wish a reality, my little ass slut,\" I grunted, continuing to fuck her ass harder than I ever had before.\n\n\"Oh shit, oh yes,\" she moaned, \"it feels so goooooood.\"\n\n\"What does slut?\" I questioned, getting turned on in this new dominant persona.\n\n\"Your cock in myyyyy ass,\" she screamed, holding herself up with one hand as she moved her other to frantically rub herself.\n\n\"Only dirty ass sluts come from getting ass fucked,\" I teased, even as I began to feel my balls boil.\n\n\"I guess I'm a dirty ass slut theeeeeen,\" she moaned, before shifting to screaming, \"because I'm about to come from getting ass-fuuuuuuucked.\n\nI kept fucking her hard as her orgasm coursed through her.\n\n\"Oh yes, keep fucking your slut's ass,\" she demanded, as she babbled, \"so good, best, ev-ev-ever, fuck, god, soooo, shit, can't quiiiit comiiiing.\"\n\nSuddenly her legs gave out and she fell to the ground.\n\n\"Shiiiit,\" she whimpered, as she fell onto her side.\n\nI pulled her up onto her knees and shoved my cock in her mouth and fucked her face. She slobbered and gagged a couple of times as I roughly fucked her face, my own orgasm near eruption. I asked, pulling my cock out of her mouth, \"Mouth or ass, slut.\"\n\n\"Fill my ass,\" she answered, getting on all fours.\n\nI quickly got behind her and filled her ass with one deep hard forward thrust.\n\n\"Mother fucking Chriiiiiist,\" she screamed, as I learned from this angle I could go even deeper into her ass.\n\n\"Beg for my cum, Karen,\" I ordered, as I continued to drill her ass.\n\n\"Oh God, come, come, come, in my, my, my, asssss,\" she struggled to beg, the mixture of pleasure and pain obvious.\n\nSuddenly Beth bent over taking Derrick's cock popped back into my head and my balls erupted and I shot my second load deep into Karen's ass.\n\n\"Yeeeeeees,\" Karen moaned, \"Fill my ass with your cum.\"\n\nI continued pistoning in and out of her ass until every last drop of my cum was unloaded. Pulling out, I ordered, \"Clean me off, slut.\"\n\nHer orgasm done, I worried she would not be so friendly to name-calling, but she quickly turned around, still on her knees and deep throated my cock.\n\nAs she did, she surprised me as she moved her hand and pushed the butt plug deeper into my ass, my whole body moved forward and my cock went so deep down her throat she gagged and fell backwards.\n\nLaughing, she said, \"Apparently you have an ass reflex.\"\n\nLaughing back, I pulled her up, \"Looks like you have a gag reflex.\"\n\n\"I never had complaints before,\" she pouted.\n\n\"Nor will you again,\" I said, kissing her hard.\n\nWe kissed for a couple of minutes before she said, \"We should probably get dressed. The parents will be home in half an hour.\"\n\nI reached behind to pull out the plug but Karen said, \"Keep it in baby. I want that ass nice and ready for me.\"\n\n\"Are you serious?\" I asked, the idea of a butt plug in my ass kind of gay.\n\n\"Deadly,\" she said, spanking my ass. \"You did me, I get to do you.\"\n\n\"Is that so?\" I asked, her brief submissive behaviour gone.\n\n\"Tit for tat or in this case ass for ass,\" she shrugged.\n\n\"But it's kind of gay,\" I said, Derrick's big cock again popping into my head.\n\n\"Only if you think of it that way,\" she shrugged, keeping the thigh highs on under her sweats.\n\n\"How so?\" I asked, getting dressed myself, the plug still in me.\n\n\"I am a girl and you are a guy, thus it can't be gay,\" she said, rather matter-of-factly.\n\nHer logic made sense. It can't be gay if I am having sex with a woman. \"When you put it that way, I guess it isn't gay.\"\n\n\"Sucking a real cock is gay, sucking my cock will be fucking hot,\" she said, a twinkle in her eye.\n\n\"Why do you want to fuck me?\" I asked, the timing so strange after all I saw recently.\n\n\"I want to do everything with you,\" she admitted, kissing me, her hand squeezing my cock.\n\n\"Tough to argue that logic,\" I gave in.\n\n\"Good, tomorrow night I plan to take your cherry,\" she said, talking in a deep voice, trying to act manly.\n\n\"Don't you ever use that tone again,\" I laughed, thinking it was strange to hear her talking of taking my cherry.\n\n\"Tomorrow after the game, your ass is mine,\" she said, slapping my ass directly where the butt plug was.\n\n\"Fuuuuck,\" I yelped, the plug going where it wasn't supposed to go.\n\n\"And keep it in until you get ready for the game,\" she ordered.\n\n\"Yes, Mistress,\" I joked, as I followed her downstairs.\n\n\"Mistress, I like that,\" she said.\n\n.....\n\nI hurt myself twice, forgetting the plug was in my ass when I got in my car and when I fell on my bed to go to sleep. Oddly, as I lay in bed, I wondered what it would be like to have the toy in my ass moving in and out. I moved my hand to my ass and moved the toy in and out of my ass. I can't explain it but the feeling was indescribable. I wanted more. I wished it was longer so it would go deeper. Closing my eyes, I tried to imagine Karen with a strap-on fucking me from behind. I pumped the small plug in and out of my ass while simultaneously stroking my suddenly rock hard cock.\n\nPumping my cock while I tried to fuck myself, I continued envisioning what Karen had planned for Saturday night for me. I imagined me on my knees, as she again in sexy thigh high stockings slowly fucked my ass. I fantasized her telling me how hot it was to see me with her cock in my ass and how she planned to fuck me all the time. I moaned in response as my own orgasm began to boil. I imagined her moving faster in my eager ass when suddenly there was a deep hard thrust and I screamed and heard Derrick's voice, \"That's it my straight faggot. You love big black cock up your man cunt don't you?\"\n\nI whimpered, \"God yes, I love your cock in my man cunt,\" just as my cock erupted spewing my cum all over my sheets.\n\nOpening my eyes, I gasped at the words I said out loud; mortified my parents might have heard me. I quickly pulled the plug out of my ass, wiped it off with my socks, and went to my bathroom.\n\nLooking in the mirror I was mortified at how Derrick kept getting pulled into my sex fantasies, even during sex with my girlfriend. I just had the most amazing sex of my life and yet images of Derrick popped into my head while I fucked Karen's ass. I'm not gay, or bi, or curious, I said to myself. I need to focus on basketball and Karen. In the end, I thought even though my mind was playing tricks on me, the key was I stayed a man if these strange situations continued to arise, which they did the next morning.\n\n3. THINGS GET EVEN MORE COMPLICATED\n\nI had just got out of the shower, my usual early bird self, when I got a text from coach, which wasn't unusual.\n\nEric,\n\nPlease come over to my office ASAP to discuss the game.\n\nKnock three times.\n\nI often met with coach before the game so this wasn't new, but knocking three times was strange. I hoped it was just game talk, but a feeling in my gut told me Derrick was up to something.\n\nI pondered whether to put the plug in my ass, but decided not to, mostly because I didn't have any lube and well it was really gay.",
        "I drove to school and headed straight to coach's office, mortified that I already had an erection. Why? What was turning me on? Reaching the office, I was surprised to see Beth there.\n\n\"Hi Beth, what are you doing here?\"\n\n\"Just waiting for Derrick?\" She answered sheepishly.\n\n\"Are you two dating?\" I asked, the thought still seeming ludicrous.\n\n\"Um, not really,\" she said, clearly embarrassed to be asked such question.\n\nWanting to know more, I asked, \"What is not really?\"\n\n\"He doesn't want to label it,\" she answered, avoiding eye contact.\n\n\"Beth, don't let him use you, you deserve someone as special as you,\" I said, thinking that perfect someone would be me.\n\nIgnoring my nice guy routine, which wasn't so nice since I had a girlfriend, she said, \"I am supposed to watch the door.\"\n\n\"For what?\" I asked.\n\n\"I don't know,\" she answered.\n\nI repeated, \"Beth you are a very special, pretty girl. You deserve to be treated like a lady.\"\n\n\"Go in,\" she said, still not making eye contact.\n\nSighing, I said, \"If you ever need to talk, I'm a great listener.\"\n\nHer tone biting suddenly, \"Don't you already have Karen?\"\n\n\"I'm just trying to be a friend,\" I said, knowing that Karen has never been nice to her. Karen is hot, Karen is a nasty nympho, but Karen is also an elitist bitch who bullies those below her.\n\n\"Go,\" Beth said, tears beginning to form in her eyes.\n\nI walked in and wasn't remotely surprised to see coach bent over his desk as Derrick fucked him. Derrick called out, \"Get in here Beth.\"\n\nBeth sheepishly came in too.\n\n\"Lock the door, slut,\" Derrick ordered.\n\nShe obeyed, her face so red with shame I couldn't help but feel sorry for her.\n\n\"I thought you would like to see Coach take it in the ass for the first time since you obviously enjoyed watching him suck my cock\" Derrick said confidently.\n\n\"Derrick I am not playing your game,\" I said firmly. I turned to leave but heard voices outside the office now.\n\n\"You can pretend Eric, but you are a straight cocksucker just like coach here,\" Derrick said smugly, as he slowly fucked Coach.\n\nCoach moaned, clearly enjoying the cock in his ass, but kept his eyes closed obviously mortified to be caught in such a compromising situation...again.\n\n\"You see, Coach loves it. You white guys are all the same. At first you think you are straight, but once you see a big thick black cock your brain begins to wonder. At first you are in denial, like you are right now, but I bet you have already had my cock pop into your head. Wondered what it would be like to have a big black cock like mine between your pretty little lips,\" he assessed.\n\nI was mortified by his correct assessment of the thoughts in my head, although I thought his black cock theory was ludicrous. I interrupted, \"Derrick, you're full of shit.\"\n\n\"If I am full of shit, you won't be hard right now,\" he said, continually fucking coach's ass while talking to me as if it was a natural thing to do.\n\nMy face went red as I realized I was indeed rock hard, something I couldn't explain.\n\nHe laughed, \"You got hard watching me fuck Coach's ass. Do you wish it was you bent over the desk? Beth, pull out Eric's cock to see if he is hard.\"\n\n\"Please, no,\" Beth gasped, surprised by the demand.\n\n\"It wasn't a suggestion,\" Derrick said.\n\nI could have stopped her, I should have stopped her. Yet Beth being my secret crush, I was instantly focused on her touching my cock and not the fact that I had a girlfriend, or that she would show off my hard cock.\n\nBeth moved slowly towards me as Derrick explained, \"It's ok Beth. Eric has had the hots for you forever.\"\n\nI wondered how he could possibly know such a thing.\n\n\"On your knees, slut,\" Derrick ordered, continuing to fuck Coach.\n\nI was in awe as I watched Beth, her face red with shame, drop to her knees and fish out my cock. I moaned as her warm hand wrapped around my cock.\n\n\"Is it hard, slut?\" He asked.\n\n\"Yes, hard as a rock,\" she answered, not looking at me or him.\n\nDerrick said, \"My hypothesis again proven correct. Do you want Beth to blow you Eric?\"\n\nI should have said no, yet her hand on my cock, looking down at her in her submissive position, I couldn't resist, \"God, yes.\"\n\n\"Go ahead Beth, show him how you can get an 'A' in cocksucking too,\" Derrick ordered.\n\nBeth suddenly looked up at me as if pleading for help, but I said, getting pulled deeper into Derrick's sick power game, \"Get to sucking Beth.\"\n\nBeth looked back down and took my cock in her mouth. I briefly felt guilty, but once she swirled her tongue around my cock my guilt faded. I don't know how she did it, but she created a wavelike water sensation unlike anything I had ever felt before.\n\nI groaned and Derrick laughed, \"She has quite the technique, doesn't she?\"\n\n\"God, yes,\" I whimpered, knowing I was going to come shamefully quick.\n\n\"Her ass is the tightest I have ever fucked if you want a piece of that too,\" Derrick offered, before focusing on Coach, whose whimpers had been getting louder, \"Beg for my cum in your ass faggot.\"\n\nCoach obviously was too far gone to care that two students were witnessing his humiliating sodomy as he instantly answered, \"Oh God, fill my ass with your cum Derrick, my white ass is yours.\"\n\nThe desk began moving as Derrick slammed harder into Coach. For some reason watching Coach get fucked and hearing him moan really turned me on, and I grabbed Beth's head and began fucking her face trying to replicate the deep hard thrusts of Derrick. My whole cock was shoved in Beth's mouth, her slobbering sounds only turning me on more.\n\nLooking up, Derrick somehow had his phone out and was either taping or taking pictures of me.\n\n\"Fuck Derrick,\" I sighed, realizing he had evidence of my unfaithfulness to Karen.\n\n\"Never know when such visuals can come in handy,\" he shrugged, before again shifting to a whimpering like a school girl Coach and saying, \"Here it comes, coach faggot.\"\n\nCoach moaned, \"Yeeeeeees, fiiiiiiill myyyy asssssss.\"\n\nI watched in voyeuristic awe as Coach got an ass full of cum. My own cock flinched and I shot my load down Beth's throat.\n\nDerrick laughed, \"You came watching Coach get his ass fucked...deny it all you want Eric, but you are my next cocksucker, my next man cunt.\"\n\n\"Never going to happen,\" I confidently said, pulling my cock out of Beth's mouth, my seven inches dangling.\n\nPulling his cock out of Coach's ass, his ten inches swayed confidently, and although I tried to look away it was like a gravitational pull kept my eyes locked on it.\n\n\"Slut come and clean me,\" Derrick ordered.\n\nBeth scurried like a famished woman in the desert and eagerly took his big black cock in her mouth.\n\nDerrick asked, again as I watched, \"Sure you don't want a taste?\"\n\n\"Never going to happen,\" I said, pulling my pants up.\n\n\"Never say never,\" he laughed, as he pulled his cock out of Beth's mouth and pulled his pants up.\n\n\"Beth are you hungry for my cum?\" Derrick asked.\n\n\"More than anything,\" she said, looking like a vapid slut and not the academic genius she was.\n\n\"Go suck my cum out of Coach's ass,\" he ordered.\n\nI thought Beth would recoil, but instead she crawled straight to coach and buried her face in his ass.\n\nDerrick took a couple pictures as he explained, \"Once you get a taste of black cock you will do pretty much anything to have it again. Isn't that right, Coach?\"\n\n\"Yes,\" he admitted, his tone dripping with shame.\n\nI laughed, realizing he was probably right based on what I had just witnessed, \"So it seems.\"\n\n\"One taste Eric and you will be hooked too,\" he said confidently.\n\nWatching Beth move her face up and down hungrily sucking out Derrick's cum I was in awe of Derrick's power.\n\nI was about to say something when there was a knock at the door. Derrick snapped his fingers and Beth quickly stood up. Coach quickly stood up too, fumbled to get his pants up and sat down in his chair, his eyes big with fear and shame.\n\nDerrick unlocked the door and said, \"We'll chat later Coach.\"\n\n\"Sounds good,\" Coach replied, as his wife entered the room.\n\n\"Hi, Mrs. Murphy,\" Derrick greeted, walking out the door.\n\n\"Hi Derrick, Eric, Beth,\" she greeted, her facial expression confused that Beth was in an early basketball meeting and the boys' locker room.\n\nI asked, trying to act casual and keep up the image of a meeting, \"Anything else Coach?\"\n\n\"No Eric, we will see how the game plans works,\" he said, covering well himself.\n\nI grabbed Beth's hand and led her out.\n\nOnce out of earshot she gasped, \"Oh my God!\"\n\n\"That's what I thought too when you sucked my cock,\" I said, suddenly wanting more of her.\n\n\"I can't believe he made me do that,\" she said.\n\n\"I can't fathom how you ended up in this predicament,\" I countered.\n\n\"It's a long story,\" she said, before adding, her tone suddenly sultry, and shocking, \"There is much more to me than meets the eye.\" She subtly squeezed my cock before walking away, leaving me hard and wanting more.\n\n.....\n\nThe rest of the day was the same old, same old, other than every time I saw Beth I imagined her mouth around my cock giving me the best blow job I have ever received. At lunch, guilt washed over me as Karen rubbed my cock underneath the table, unaware of my betrayal.\n\nKaren whispered in my ear part way through lunch, her hand firmly on my cock, \"I can't wait to fuck you, baby. You are wearing your plug for me right?\"\n\n\"I couldn't get it in without lube,\" I replied back, not admitting I really had no interest in wearing one.\n\nHer hand left my cock instantly and she quit talking to me. Although she was a complete slut in the bedroom, outside of it she always expected others to obey her. Knowing there was no way to make her happy other than to do as she says, I whispered, \"It's in my backpack if you have anything to help get it in.\"\n\nHer anger shifted and she turned back to me, \"Can I put it in you now?\"\n\n\"Not here,\" I joked.\n\n\"Of course not, rendezvous spot, five minutes?\" She asked, although it wasn't a question.\n\nTrying to keep her happy, I countered, \"Make it four.\"\n\nShe squeezed my cock and said her goodbyes to her friends; I did the same a minute later and headed to meet her. I saw Beth was talking to Derrick at a doorway and not wanting to get involved in that conversation I turned and took another way around.\n\nKaren, being Karen, had convinced the principal that the cheerleaders needed their own room like the football players had, and as I mentioned, what Karen wants, Karen gets. The room was used for meetings, changing and so forth and often for blow jobs or quickies for me.\n\nOnce in the room, she dropped to her knees, pulled down my pants and said, \"I think there is time for a snack.\"\n\nI totally enjoyed her love of sucking cock. She would often just suck me off, swallow my load and expect nothing in return. She was the perfect girlfriend and yet even as she bobbed up and down on my cock it was Beth who popped into my head when I closed my eyes. At first it was her on her knees sucking my cock, then it was sucking cum out of coach's ass and then it was her taking Derrick's cock in her pussy.\n\nEven though I had already come once, the constant images of Beth flashing in my brain had my balls boiling rather quickly and I shot a second load of the day, this time down Karen's throat.\n\nOnce done, she was back to business, \"Bend over baby.\"\n\n\"I feel like your bitch,\" I joked, even though I knew it wasn't really a joke.\n\n\"Tonight you are,\" she said, as she surprised me by spreading my ass cheeks and licking my ass.\n\n\"Oooooooooh,\" I moaned like a girl, surprised by how good it felt.\n\nA minute later, I felt warm lube coating my ass as she spoke, with a confidence just like Derrick, \"I plan to take that ass of yours tonight, right here after the game.\"\n\n\"H-h-here?\" I stammered.\n\n\"By the time you change, shower and talk to coach, all the girls will be gone, or waiting in the parking lot for the boys,\" she said, as I felt the toy between my ass cheeks.\n\n\"If you say so,\" I agreed, hoping to prolong this situation a bit.\n\n\"Beg for this in your ass,\" she ordered.\n\n\"You got to be kidding meeee,\" I replied, as she slapped my ass.\n\n\"Now, bitch,\" she ordered.\n\n\"Please put that plug in my ass,\" I quickly begged, shocked by her aggressiveness.\n\n\"You mean your man cunt,\" she corrected.\n\nMy eyes went wide at hearing the same words Derrick had used and yet I answered as expected, \"Yes, please fill my man cunt?\"\n\n\"Tonight I'm going to fuck you completely my little slut,\" she purred as she pushed the small toy in me.\n\nI whimpered, the thought both a turn-on and a turn-off.\n\nI couldn't believe how easily I acquiesced to her, particularly after she was so submissive to me last night. Yet, once it was all the way in me, she slapped my ass pushing the plug deeper in me and said, \"Get dressed and don't you dare take that out of your ass until game time.\"\n\n\"Okay,\" I again joked, as I pulled up my pants.\n\n\"And when we are alone, it's Mistress,\" she ordered.\n\n\"Okay,\" I repeated, my ass full and wanting more, yet my shame of being bossed around overwhelmed me.\n\n\"Okay, what? She asked, her tone terse.\n\n\"Okay, Mistress,\" I answered immediately.\n\n\"Good,\" she said, pulling me in and kissing me hard and giving me one more slap on the ass.\n\nThe rest of the day was fine, once I got used to sitting cautiously and not moving much with a toy in my rear.\n\n4. BECOMING A STRAIGHT FAGGOT\n\nIt was last period, with Mrs. Murphy, Coach's wife that things got weird again. Beth is in this class also and I hadn't heard a word of the teacher's lecture, as I drooled over Beth who continually slipped her stocking-clad feet in and out of her shoes. I noticed her toes...which were painted blood red. A couple of times she looked back at me and smiled as if knowing the impact she was having on me.\n\nWhen class was done I wanted to talk to her again, but she left with a couple friends, plus I wasn't sure what I would say to her, so I just let it drop.\n\nI was heading to my locker; I had an hour before we needed to be back at school to get ready to go to the game, when I heard Derrick's voice.\n\n\"Eric, I need a favor,\" he said.\n\nMy whole body tensed at what he may need. I turned around and asked, acting casual, \"What do you need?\"\n\n\"A ride home. I forgot my uniform in the laundry,\" he said.\n\nContinuing to act like I would have before I learned what I learned I said, \"Sure, ready to go now?\"\n\n\"No time like the present,\" he said and we went to my car.\n\nWe actually talked basketball on the walk and the beginning of the drive. I had dropped him off on the Monday before so I knew where he lived; it was about a twenty minute drive.\n\nOnce out of the school area, he asked, \"So did you enjoy Beth?\"\n\nI sighed, \"Let's stick to talking about the game.\"\n\n\"But, I need to know. Beth wants to know if you were happy with her cocksucking,\" he said.\n\n\"I'm sure she didn't say that,\" I said, even as her lips wrapped around my cock returned to my head.\n\n\"She really likes you,\" he said.\n\n\"Isn't she your girlfriend?\" I asked.\n\n\"I am not a one girl guy. I have half a dozen eager to take my load, but Beth was special in her innocence and eagerness. Taking her from an innocent virgin to a cock hungry slut was a lot of fun,\" Derrick explained.\n\n\"How?\" I asked, my own cock rock hard and dying to know how Beth ended up in her current predicament.\n\n\"Like I said,\" he began, as he pulled out his cock, \"once you get a taste of the black side there is no going back.\"\n\n\"Put that away,\" I snapped, as he wrapped his hand around it and slowly made it grow.\n\n\"It's just a cock,\" he said, adding, \"If you are as straight as you say you are this isn't a big deal.\" He stressed the word big, which made me flush.\n\n\"Whatever,\" I said, not getting myself pulled into his game.\n\n\"So did you enjoy Beth?\" He asked again.\n\n\"Yes fuck, but I can't believe I cheated on Karen,\" I admitted.\n\n\"She will rip your balls off if she finds out,\" he said, stroking his cock.\n\n\"Is that a threat,\" I asked, looking at him and without meaning to looking down at his growing cock.\n\n\"No, no, just a fact,\" he said. \"Oh sure, I could blackmail you to suck my cock, but I know it is only a matter of time before you are eagerly bobbing up and down on it.\"\n\n\"Fuck off, Derrick,\" I said, as we stopped at a red light.\n\n\"Go ahead, grab it,\" he a said, \"you know you want to.\"\n\nI refused to look, knowing that even though I wasn't gay, there seemed to be a magnetic pull leading me towards his cock.\n\n\"Look at it, Eric, it's nice, big, and ready for your lips,\" he said, his confident demeanor oddly soothing.\n\nI shouldn't have looked, but yet I couldn't resist and took a look at his now firmly stiff ten inch cock.\n\nI stared at it, unable to take my eyes off it, now so close to me. My mouth watered my sudden desire to have it in my mouth growing even as I screamed inside to resist. Thankfully, a honk told me the light had changed and I returned my eyes to the road.\n\nDerrick laughed, \"Saved by the horn.\"\n\nI didn't respond as I focused on the road and having the strength to not look back down.\n\n\"Beth likes you, by the way,\" Derrick said.\n\n\"Seems she's more into you,\" I replied.\n\n\"That's just natural selection she can't resist me, but she has had a crush on you forever. She just doesn't think she can compete with Karen,\" Derrick explained.\n\nIt was so strange, his cock was out, he wanted me to suck him, yet he was also seemingly trying to set me up with Beth at the same time. I scoffed at the natural selection theory, \"I don't believe there is a sexual hierarchy.\"\n\n\"You're in denial,\" he said, as we reached another red light. \"You know you want my cock, you are using every ounce of strength to hold onto the last remaining threads of your straightness. Go ahead, Eric, just reach over and grab it.\"\n\nResistance suddenly seemed futile. I figured I would just touch it, and then return to driving, but that isn't what happened. Once it was in my hand, I felt like my hand was magnetically attached to it. His cock was so much thicker than mine, and it felt so warm in my hand.\n\n\"That's it, Eric,\" Derrick soothed. \"Just enjoy it in your hand.\"\n\nThe light changed and I kept my hand on his cock as I continued driving. Derrick continued the Beth conversation as if there was nothing odd with the fact that I was holding his cock. \"You see Eric, you and Beth will end up with each other or people like you, that is just the way society works, but that doesn't mean you can't love the life that so many white people fantasize about, submitting to black cock or pussy.\"\n\nIt was so absurd to listen to his words and yet as he spoke them they made sense as well. My hand was on his cock, I had let Beth blow me and unknown to him I had a plug in my ass. \"So I should marry a white girl, that has submitted to black cock?\" I asked, unable to let him know of my conflicting emotions.\n\n\"In essence...eventually you two will settle and this wild time of black submission will fade, but it will always be a lingering effect,\" he said, as if he was some philosopher.\n\nI let go of his cock to pull into his driveway.\n\n\"Ready to submit to your hunger?\" Derrick asked.\n\nMy response betrayed me as instead of protesting I asked mortified, \"Here?\"\n\n\"In the car?\" He laughed, \"Maybe a quick suck to wet your appetite.\"\n\nI froze looking down at his cock. After all the denial, it looked so appetizing, so juicy and I hungered for it.\n\nAs if reading my mind, he said, \"I can see it in your eyes, Eric. You have an insatiable hunger to lean down and take it in your mouth, yet the unrealistic expectations of society are holding you back. Eric you want my cock, you need my cock, and it is only a matter of time before you accept this.\"\n\nI continued staring, the invisible line between straight and not-so-straight fading.",
        "\"Make a decision Eric, if you're not willing to take my load, I need to text my cheerleading cocksucker to take my load,\" he explained.\n\n\"Who?\" I asked, still unable to take my eyes off his big, hard cock.\n\n\"Just a slut, they all are,\" Derrick said, \"at least for big black cock.\"\n\nI looked out the window, we seemed rather secluded, but I couldn't do it here in my car.\n\n\"Now, Eric, taste it,\" Derrick said, reaching for my head.\n\nHe gently guided me down and I didn't resist at all, falling slowly like a leaf in fall, until my face was in front of his cock. With no time to think, I just opened my mouth and took his cock in as natural as opening my mouth to eat.\n\nThey say when you meet the one you just know, and my feelings right then were exactly the same. I just knew, like he said I would, that I was meant to suck his cock. It felt so natural between my lips, his erection so hard that I suddenly wanted, needed to please him.\n\n\"That's it, Eric, take your time with my big snake,\" he said, I imagined him smiling smugly over adding me to his cocksucker harem. Yet, I didn't care. I wanted more of his cock in my mouth and I began to slowly bob up and down on it.\n\n\"Let's take this inside, cocksucker,\" he ordered, now having got me drawn into the thrill of pleasuring him.\n\nI sat up, suddenly embarrassed by what I had done and being called a cocksucker, and said, \"I can't believe I did that.\"\n\n\"Follow me inside,\" he ordered, putting his cock away and getting out of the car.\n\nI didn't move, knowing if I did I would be unable to resist his cock.\n\nJust before he closed the door, he said, \"Eric, I gave you a taste, if you don't come and finish what you started, I will never give you a chance again. It's now or never, cocksucker.\"\n\nHe closed the door and headed to his house. I wanted to just drive away, I wanted to stand up for myself like a man and yet after a brief, futile resistance, I got out of the car and headed inside to suck cock.\n\nIn his house, he was sitting on the couch, his pants at his ankles watching sports highlights. \"So what is it cocksucker?\"\n\nI whispered, ashamed by my own weakness, \"I want to finish what I started.\"\n\n\"Finish what?\" He asked, not looking at me, but at the television.\n\n\"Sucking your cock,\" I admitted, the words tasting like vinegar out of my mouth.\n\n\"Well, don't just stand there cocksucker, get on your knees and crawl to me,\" he ordered, still not looking at me.\n\nI felt cheap, I felt humiliated, but the hunger to have his cock back in my mouth overruled my emotions and pride. I fell to my knees and crawled to him. Reaching his feet, I looked up and saw he had his phone out. Had he taped my whole crawl towards him?\n\n\"Tell me what you want,\" he said, the camera pointing directly at me.\n\n\"Please don't tape this,\" I said, even as I remained on my knees just inches from his cock.\n\n\"This is not for blackmail or show, just for my own personal collection,\" he said. \"Now answer me Eric, what do you want from me?\"\n\nI didn't want to answer, but his massive python directly in front of me had such a hypnotic power on me I just had to have it. I whispered, \"To suck your cock.\"\n\nHe laughed, \"You are in advanced English, you can do better than that.\"\n\nHe tapped my lips with his cock and I instantly opened my mouth to take it. \"So eager, cocksucker, but answer my question first.\"\n\nSo enthralled by his cock, so famished to have it in my mouth, I answered like a complete slut. \"I want to take that immense, black succulent python between my lips.\"\n\n\"And be a cocksucker?\" He asked.\n\n\"Yes. Your cocksucker,\" I added, knowing I would only do this for him.\n\n\"Go ahead, cocksucker, become a straight faggot,\" he smiled.\n\nI winced at the word faggot, but my need to have his cock in my mouth overruled everything else and I leaned forward and took it between my lips. At first I just slowly swirled my tongue around his mushroom top in awe of its width. Slowly though, trying to create saliva like Beth had done on my cock I moved up and down the first few inches.\n\n\"Shit Eric, you're a natural at this,\" he groaned, which somehow turned me on more knowing I was having that sort of effect in him\n\nI continued bobbing back and forth eager to get him off, although not wanting this moment to ever end. You remember your first home run, you remember your first kiss and I was going to forever remember my first time sucking black cock.\n\nA few minutes later, time seeming irrelevant, Derrick said, \"Fuck Eric, you really love my cock, don't you?\"\n\nI couldn't resist as I admitted, \"I fucking love it.\"\n\n\"I knew you would, cocksucker,\" he said, before adding, \"But we need to get going pretty soon or we will be late for the game. So sit up.\"\n\nI did, but still on my knees.\n\n\"I'm going to fuck your face,\" he announced.\n\n\"O-o-okay,\" I said nervously.\n\n\"Open up, slut,\" he ordered and shoved his cock in my mouth.\n\nAlthough he didn't shove all ten inches in my mouth, he pumped his cock furiously between my lips and I just focused on not gagging and breathing. Strangely, sitting there being used for someone else's pleasure really turned me on. I just shut my brain off, shut off my morals and was used as a cum bucket.\n\n\"I'm going to come down your pretty throat, cocksucker,\" he grunted before seconds later I felt his salty seed explode in my mouth. I gagged a bit but swallowed all his seed. The taste was unexplainable, but one I knew I would want again.\n\nAs he pulled out, he asked, \"Did you enjoy it?\"\n\n\"Yes,\" I admitted.\n\n\"Do you want my cock again?\" He asked.\n\n\"Yes,\" I again admitted.\n\n\"Do you need to come?\"\n\n\"God, yes,\" I said, my cock ready to burst for reasons unfathomable to me.\n\n\"You got hard sucking black cock and swallowing cum?\" He questioned a smile on his face.\n\nShame washed over me as I admitted, \"I guess so.\"\n\n\"I thought you were straight,\" he continued, pushing the knife of humiliation deeper into my back.\n\n\"So did I,\" I smiled for the first time.\n\n\"Then what are you?\" He asked, as he put his beautiful cock away.\n\n\"Your cocksucker,\" I admitted, now understanding all his theories.\n\n\"My faggot?\" He pushed.\n\n\"Yes, whatever you want to call me,\" I agreed, knowing I would never say no to him again.\n\n\"Good faggots you know also take it in the ass,\" he clarified.\n\nI stammered, even though I liked the idea of Karen fucking me, his cock was too big, \"I-I-it's too big.\"\n\n\"I'll train that man cunt of yours first,\" he said.\n\nI laughed, thinking of the irony that it was already being trained without his knowledge, \"I'm not sure.\"\n\n\"Don't worry, I am,\" he said, before adding, as he made a call. \"Slut are you home yet?\" After a pause, \"good get your ass over here as soon as you get home...and hurry.\"\n\n\"We will be in a hurry when the slut gets here so get your pants off,\" he said.\n\n\"Who? Beth?\" I asked, baffled.\n\nHe laughed, \"Oh no, this cougar is one eager little black cock loving slut.\"\n\n\"How many do you have?\" I asked, in awe of his prowess.\n\n\"Girls or guys?\" He chuckled.\n\n\"Both,\" I asked, wanting to know how I fit into this picture.\n\n\"Over two dozen women and you're faggot number six,\" he said.\n\n\"What other guys?\" I asked, curiosity taking over, as I got out of my pants and underwear.\n\n\"I don't turn straight boys and tell,\" he laughed.\n\n\"Do I know them?\" I asked.\n\n\"Yep, one is even on the team,\" he revealed as he noticed my butt plug, which I had got so use to I forgot it was there.\n\n\"Is that a plug in your ass?\" He asked for the first time surprised.\n\nShame again hit me as I stammered, \"Y-y-yes, Karen made me.\"\n\n\"That is fucking priceless. I knew she wore the pants in your relationship, but I didn't know she also had the cock,\" he laughed.\n\n\"It's not like that,\" I tried to defend.\n\n\"How is it then?\" He asked.\n\n\"She let me fuck her ass last night, but only if I promised her mine tonight,\" I explained.\n\n\"And after seeing coach get ass fucked you were eager and curious,\" he added.\n\n\"It was before that,\" I corrected.\n\n\"Well, I guess you're already being trained to be a faggot,\" he said, just as there was a knock at the door.\n\n\"Come in, slut,\" he yelled.\n\nA voice I recognized instantly as our cold as ice principal Mrs. Anderson, as she said, \"I thought you would be headed back to school for the game by....\"\n\nShe stopped when she saw me half naked in front of her.\n\nDerrick said, \"Eric here is all hard after giving me his first blow job.\"\n\nMy face went red at the thought of my principal knowing I sucked cock, although obviously she had submitted to him too.\n\n\"You can't be serious?\" She questioned, her tone firm like she always was in school.\n\n\"Knees now, slut,\" he ordered.\n\n\"Derrick this was between you and I,\" she said.\n\n\"Did you mistake this as a conversation where you have any say?\" He questioned. \"I don't fuck and tell but all my subs are free game amongst each other.\"\n\n\"This is going too far,\" she continued her defiant behaviour.\n\n\"Either do as you're told or leave slut, but if you leave you will never get my cock again,\" he threatened, his tone firm.\n\nAfter a brief delay, her resolve dissipated, just like mine had earlier, and she whispered, \"What do you want me to do?\"\n\n\"I was just going to get you to suck my new cocksucker's cock, but now that you were so difficult I think he gets that cunt of yours,\" he said.\n\n\"I'll suck him,\" she said, moving to me and dropping to her knees. She took me between her lips and began bobbing quickly. I couldn't believe our chubby, pretty, huge tit bitch principal, was also under his spell.\n\nAfter a minute of sucking, \"Derrick said, \"Lift up that skirt of yours and beg Eric to fuck that cunt of yours.\"\n\n\"Please, just let me blow him,\" she pleaded.\n\n\"You have five seconds to have that cunt ready,\" he threatened.\n\nDefeated, she pulled up her skirt, revealing she too was in thigh highs and was not wearing any underwear. She bent over the couch, a humiliated look in her eyes.\n\n\"Beg me, slut,\" I ordered, suddenly feeling powerful over the ice queen bitch.\n\nShe glared at me, looked at Derrick before saying, \"Please Eric fuck my cunt.\"\n\nHearing the ice queen use the word 'cunt' was hot and yet unreal. I slid my cock in her surprisingly wet cunt and groaned, \"Shit, she is soaked.\"\n\n\"She is the biggest slut in our school and yet no one knows,\" Derrick said.\n\nHorny as hell, I slammed my cock into her colliding with her wide ass. After a couple of minutes, Derrick said, \"I'll be back in a few going to get my uniform and take a piss.\"\n\n\"Sure,\" I said, loving hearing the moans of Mrs. Anderson as I pounded her from behind.\n\nHer early resistance faded as she begged, \"Harder Eric, fuck me harder.\"\n\nI obliged as I slammed into her with full force making her scream.\n\n\"Oh God yes, Eric, hammer my cunt,\" she continued.\n\n\"I thought you didn't want my cock in that wet box of yours?\" I asked, shifting from submissiveness a few minutes ago to dominant.\n\n\"Just fuck me,\" she moaned, her whole demeanor changing from ice cold to hellish hot once her cunt was filled with my cock.\n\n\"Tell me you're a slut, Principal Anderson,\" I ordered.\n\n\"Just fuck me,\" she repeated, although her tone was her usual bossy one.\n\n\"Do as you're told,\" I ordered, trying to be firm like Derrick, as I slapped her fat ass.\n\n\"Fuck Eric,\" she whimpered, before adding, \"Fine, your principal is a dirty fucking slut. Is that better?\"\n\n\"A contradictory bitch,\" I added.\n\n\"Yes,\" she moaned.\n\n\"Who wants to get ass fucked,\" I continued.\n\nTo my surprise, she replied with a smile, \"You really are a dirty boy, Eric.\"\n\n\"Beg to have your ass fucked,\" I ordered, pulling out and moving my cock to her back door.\n\n\"Oh God Eric, fuck my ass,\" she pleaded, actually moving her ass back onto my cock.\n\nAs my cock slowly penetrated her ass she pushed back, I added, \"You mean your fat ass?\"\n\n\"Yes, dammiiiiiit, fuck my fat ass,\" she moaned as my cock disappeared into her.\n\n\"Man I wish everyone knew that the ice queen was a fucking ass slut,\" I said.\n\n\"Oh God,\" she moaned as her ass cheeks made contact with my body all my cock now in her.\n\n\"Ride me slut,\" I instructed, eager to watch our chubby but pretty principal fuck herself in the ass with my cook.\n\n\"Yes,\" she eagerly agreed, beginning to move back and forth.\n\n\"Yes, what?\" I asked, my cock being milked so well I had very little time left to enjoy my principal.\n\n\"Yes, I love your cock in me,\" she moaned, as she continued bouncing on my cock.\n\nA few more strokes and my balls bubbled and I pulled out, pulled her by the hair to my cock and pumped it vigorously. Without instruction, she opened her mouth wide like the cum slut she was. My first rope of cum shot right into her mouth as did the second. The third and fourth hit her black blouse, my white gooey cum a cool contrast.\n\nShe took my cock back in her mouth and cleaned my cock.\n\nDerrick said, obviously back downstairs, \"We got to go.\"\n\n\"Get yourself off, slut,\" I ordered.\n\n\"A submissive and a Dom,\" Derrick chuckled.\n\nI shrugged.\n\nPrincipal Anderson, obviously hungry to get off, laid back on the floor with no shame and began rubbing her clit.\n\nDerrick said, \"Lock up when you are done, slut.\"\n\n\"Yeeeees, Massssster,\" she nodded as her orgasm got close.\n\nI wanted to bury my face in her cunt, but resisted knowing we had to get going. I said, \"Next time I want to taste that cunt of yours in your office.\"\n\n\"Okkkkaaaaaay,\" she moaned, as her orgasm hit.\n\nBack in the car, I asked amazed, \"Is there anyone you can't get?\"\n\n\"Not yet,\" he shrugged.\n\n\"I can't believe I did what I did,\" I said, as I began driving.\n\n\"Sucking cock or fucking Principal Anderson?\" he asked.\n\n\"Both,\" I admitted, my life changing so much after catching him in the act with coach a couple of days ago.\n\n\"Well, I got another surprise for you yet,\" he said.\n\n\"What would that be?\" I asked.\n\n\"Do you like Beth?\" he questioned.\n\n\"Yes,\" I admitted.\n\n\"You would choose her over Karen wouldn't you?\" he asked.\n\n\"It's not that black and white,\" I said.\n\nHe laughed, \"That is an ironic answer.\"\n\nI laughed back, \"I suppose it is.\"\n\n\"So who would you choose?\" he asked.\n\n\"I like them both,\" I admitted, the conversation still surreal considering what he had just made me do.\n\n\"Ok, Karen is hot, probably amazingly kinky in bed and a complete bitch outside of it,\" he properly assessed.\n\n\"Very accurate,\" I concurred.\n\n\"Beth is more cute than hot, will be as kinky as you train her to be, and yet has the biggest heart in the world,\" Derrick said.\n\n\"When you put it that way it seems pretty obvious,\" I said, him ironically making it rather black and white.\n\n\"Or to put it another way, not that you are ready for it, but who could you imagine marrying down the road?\" he asked.\n\n\"What are you the guru of love and bisexuality?\" I joked, this conversation just so surreal.\n\nHe laughed, \"Truthfully I am just about getting laid and lately turning white guys, but Beth is special...even more special than you know\"\n\nI agreed, \"There is something about her I have always been drawn to.\"\n\nHe smiled, clearly knowing something I didn't, \"After today I am quite sure you two are meant to be.\"\n\n\"Why is that?\" I asked, thinking sucking another guy's cock not something that usually woos the ladies.\n\n\"Trust me, I'm right,\" he said, as we pulled into the school parking lot.\n\n\"Karen will rip me a new one,\" I said.\n\n\"She already plans to tonight,\" he joked.\n\n\"Touche,\" I laughed.\n\n\"Well you have a choice to make my little cocksucker,\" he said.\n\nMy face blushed again as I wondered could I really have Beth? After fifteen minutes of somewhat normal conversation, there it was again. \"Can you not call me that?\" I asked.\n\n\"I won't in public, but when it's just us two you are still my cocksucker,\" he said adding, \"Unless, of course, you don't want to have it in your mouth again.\"\n\nI sighed, \"No, I want it again.\"\n\n\"Right now?\" he asked.\n\nI did truthfully, but looking at the clock we were already ten minutes late. \"We're already late.\"\n\n\"It's okay, I have something on coach,\" he joked, grabbing his crotch before getting out of the car.\n\nWe won the game rather handily 88-56 and on the court nothing had changed. I was still the man. Could I be both a dominant and a submissive? It seemed so replaying the day.\n\nI decided after the game, I would tell Karen we were through. I wasn't sure how I was going to do it, but I would avoid getting fucked in the ass, although part of me wanted to try it.\n\nThe plug in me all day and yesterday causing a growing curiosity to feel what it would be like, yet the reality was I still wanted to keep the facade of being a man's man...despite my obvious hunger for Derrick's cock.\n\nYet, like everything else this week, things didn't go according to plan.\n\n5. ROYALLY FUCKED\n\nI went to meet Karen with the plan to break up with her, but ended up getting a lot more than I bargained for.\n\nI texted her:\n\nWe need to talk.\n\nShe responded back almost immediately:\n\nYou know where I am.\n\nI sighed knowing just how hard this was going to be. I liked Karen a lot; she was everything a teenage guy could ask for, yet that was no longer enough for me...I wanted more than just sex and I could get that with Beth. Knowing Beth liked me, even though she was Derrick's submissive, overpowered everything else. It was strange but somehow Derrick's strange Cupid like advice had me thinking of a future with Beth...even though we both had submitted to Derrick.\n\nI knocked on the door and Karen called out, \"Come in.\"\n\nI took one more deep breath before heading into the verbal slaughter I knew was coming once I broke up with her.\n\nThe first of the domino of surprises that still awaited me that night started when I learned Karen wasn't alone.\n\nEntering the room, I was surprised to find Karen was on a bench legs spread open and even more surprised to see another cheerleader, Skye, on her knees licking Karen's pussy.\n\n\"Hey baby, here is your answer to do I play with girls,\" she smiled.\n\nAll my resolve to break up with her vanished as I watched every straight guy's fantasy, of two girls playing with each other.\n\n\"Come join us, baby,\" she moaned, \"Skye wants to watch.\"\n\nMy eyes went big at the thought of another girl, a classmate, watching me get sodomized.\n\n\"R-r-really?\" I stammered.\n\n\"Sure, she is very eager,\" Karen moaned, pulling the brunette deeper into her pussy.\n\nI watched the lesbian action for a minute or two my cock growing instantly.\n\n\"Give me your cock, baby,\" Karen demanded.\n\nI walked over, tentative, having Skye there making me uncomfortable and excited at the same time.\n\nAs I stood in front of her, Karen quickly fished out my almost fully-erect cock and began sucking.\n\nAs she bobbed, I glanced down to watch Skye licking Karen's pussy. Skye was moving her head sideways while her tongue remained extended. It was the hottest thing I had ever seen in person.\n\nSkye, although not as beautiful as Karen, but she was a solid nine and had the tightest ass in the school. Like Karen, she was a complete bitch to the unpopular kids, a stereotypical cheerleader in every sense of the word.\n\nI suddenly wondered if Karen was going to let me fuck Skye.\n\nI also noticed there was a cheerleading outfit and thigh highs on another bench, which I thought was curious.\n\nKaren allowed my cock to slip out of her mouth as she put her hands on the bench she was sitting on, closed her eyes and allowed the orgasm that had been building to flow through her.\n\nWatching a woman's facial expression immediately before the orgasm hits and during the brief euphoria that follows is super sexy...especially because they are so vulnerable during this moment of pleasure no longer worried about looking perfect.",
        "Opening her eyes, a minute later, Karen asked, \"Ready, baby?\"\n\n\"For what?\" I asked, glancing down at Skye, implying I wasn't comfortable to do what we had agreed upon with a witness.\n\n\"To get ass fucked,\" she said bluntly.\n\nSkye looked up, her face coated with Karen's wetness, and upped the ante, \"And to take my ass.\"\n\nMy cock flinched at Skye's words.\n\n\"I think he likes your proposal,\" Karen said looking down at Skye, before turning to me and adding, \"But first we need to get you in costume.\"\n\n\"Excuse me?\" I questioned, distracted by the thought if fucking Skye's perfectly curved ass.\n\n\"If I'm going to fuck you like a girl, you need to be dressed as one,\" she said.\n\n\"I didn't agree to that,\" I protested.\n\n\"I wasn't asking your opinion,\" she replied, her bitchy tone on full display.\n\n\"Plus, it will be twice as hot that way when you take my ass,\" Skye said. \"You do want to fuck my ass, don't you Eric?\"\n\nWhat does one say to such a question when your girlfriend is right beside you? I looked for help from Karen.\n\nShe shrugged, \"I've fucked her ass already, but she has yet to have a real pulsing cock in her ass and I offered her your cock.\"\n\n\"That was awful nice of you,\" I quipped.\n\n\"I know,\" she smiled, before ordering, \"Now put on your uniform, I even bought you nylons since you love them so much.\"\n\n\"On you,\" I pointed out.\n\n\"I think you will look very sexy in them,\" she countered.\n\n\"Show him that ass for motivation, Skye,\" Karen ordered.\n\nSkye got off her knees, bent over so far she touched her toes and Karen moved over and flipped up Skye's skirt.\n\n\"Do you like?\" Karen asked.\n\nSkye's ass was pantyhose clad and sans underwear, but with a hole exactly where her rosebud appeared. I stammered, \"I-I-I-love.\"\n\n\"Good, now get in your costume,\" Karen demanded again.\n\nAny doubts about doing as she said dissipated when I glanced back at Skye's inviting pantyhose clad ass. I moved the few feet to the cheerleading outfit and got undressed.\n\nOnce in my underwear only, Karen ordered, \"Those too.\"\n\nI obeyed, my stiff cock pointing directly at the two sexy, slutty cheerleaders both still in their uniform...although only Skye still had on her mocha pantyhose.\n\n\"Now it's time for you to become my pretty little slut,\" Karen purred.\n\nThe name calling did not turn me on, but the thought of fucking Skye whose ass was begging for attention, kept me obedient. I put on the ridiculously tight sweater and the skirt.\n\nKaren then suggested \"Skye, why don't you come and finish dressing up our little slut.\"\n\n\"Hmmmmmmm,\" Skye purred, finally moving from her obscenely impressive flexible bending, and moved to me. \"Sit down, slut.\"\n\nI obeyed, slightly ashamed that my cock was so hard when I was being treated so demeaning by my girlfriend.\n\nSkye took the first thigh high and kneeling before me rolled the stocking up and slowly, like a snail meandering, moved up my leg. Her breath hot, wet and so near my cock had me ready to do whatever I had too to get her ass.\n\nFinally, the top of the first thigh high reached my thigh. \"Is this for me?\" she asked, squeezing my iron stiff cock.\n\n\"All for you,\" I replied suavely.\n\nSkye asked, looking at Karen instead of me, \"Can I have a taste?\"\n\n\"Go ahead, get it ready for that ass of yours,\" Karen said.\n\nI watched as another woman put their mouth around my cock. If this was a porn movie it would be criticized as being even too farfetched for porn.\n\nIt was less than a minute, before she allowed my cock to slip out of her mouth as she grabbed the other stocking. She repeated the slow process slithering the stocking up my leg. She joked, \"Next time we better shave our little girl.\"\n\nBeing called a little girl should have made me embarrassed, yet at this moment it turned me on. I was theirs to do as they pleased.\n\nOnce the second stocking was on my leg, she sat up, grabbed my cock and pulled me up from the bench.\n\nTurning to me, Skye asked, \"Ready to fuck my ass with that big cock of yours Eric?\"\n\n\"If you insist,\" I joked.\n\nShe bent over, gripping the bench to balance herself, her pantyhose clad ass right in front of me.\n\nKaren moved to us, handing me a tube of lube. She grabbed Skye's ass and ripped at the seam of her crotch creating a gaping hole for my erect cock. Karen then lowered herself in-between Skye's legs and buried her face in-between Skye's ass cheeks. My cock flinched at the nasty erotic sight even as my mind wondered to Beth burying her face between coach's cum-leaking ass. Beth. I was going to dump Karen today and instead I am dressed as a girl, getting ready to fuck another girl's ass while eventually getting my own ass fucked. My life was officially out of control.\n\n\"That's it, eat my ass,\" Skye moaned.\n\nKaren eventually stood back up, took the lube and poured some between Skye's ass cheeks.\n\nTurning back to me, she poured lube on my cock, then stroking it. \"Ready, baby?\" Karen purred.\n\n\"Yes, baby,\" I replied, Skye's ass begging me to fuck it.\n\n\"Go ahead, my girl, fuck my slut,\" Karen said.\n\nHearing her call Skye 'her slut' made me smile, not remotely surprised that Karen was the one in control in their lesbian relationship.\n\n\"More than ready,\" I agreed, as I moved behind Skye and positioned my cock at her puckered back door.\n\n\"Shove it in, Eric,\" Skye demanded.\n\nI obliged the demand, pushing my cock slowly inside her back door. It was so tight yet I kept pushing my cock deeper.\n\n\"Fuuuuuck,\" Skye whimpered, my cock widening her ass.\n\n\"You like that?\" I asked, as the last inch of my cock filled her ass.\n\n\"Fuuuck, so much bigger than Karen's cooooock,\" Skye whimpered.\n\n\"You're super fucking tight,\" I groaned.\n\n\"Tighter than me,\" Karen questioned.\n\nI looked back and saw she was now wearing a black strap-on cock, of course it was black...although thankfully a lot smaller than Derrick's massive rod.\n\n\"Ready to be in a cheerleader's sandwich,\" Karen asked, her hand stroking her fake cock.\n\nKaren looked stupidly hot with a cock hanging between her legs and any lingering doubts I had about allowing her to fuck me and take my anal cherry had disappeared.\n\n\"Whatever you say, Mistress,\" I replied, getting into the submissive act.\n\n\"Good answer, Erica,\" she said, pouring lube on her black cock.\n\nMy face blushed at how she changed my name from masculine to feminine with just one letter added to my name.\n\n\"Yes, you will be Erica for the rest of the night, is that understood, slut?\" she asked me, the question rhetorical.\n\n\"Yes, Mistress,\" I agreed, as I began moving my cock in and out of Skye's ass trying to maintain my manhood while preparing to really allow my feminine side to be exposed.\n\n\"Good girl, Erica,\" Karen purred, the tone she gave whenever she got what she want...which was always.\n\nSkye moaned, \"Fuck Erica, you are such a bad, bad, giiiirl.\"\n\n\"As are you,\" I grunted back just as I felt Karen's hands on my hips.\n\n\"Relax, slut,\" Karen ordered.\n\nMy cock deep in Skye's ass, I waited for the inevitable. \"Yes, Mistress.\"\n\n\"Beg for me to fuck your ass, Erica,\" she ordered.\n\nFeeling the plastic toy between my cheeks, I begged, curious to feel what it was like to get ass fucked, as I continued to fuck Skye, \"Please Karen take your slut's virgin ass.\"\n\n\"Don't you mean cunt, my little sissy?\" she questioned as lube was poured between my ass cheeks.\n\n\"Yes, Mistress, fuck my cunt with your big cock,\" I begged, the words sounding as ludicrous as they were.\n\n\"Good girl,\" Karen purred as I felt cock begin to push forward.\n\nI clenched my teeth as even the cockhead of her cock was wider than the toy I had yesterday. My cock remained buried deep in Skye as Karen began her journey deep into me.\n\nThe pain was sharp, yet my cock in Skye's ass numbed the pain. I just allowed Karen to sodomize me like a little girly slut.\n\nEventually, my ass was filled and I was literally sandwiched between two hot cheerleaders.\n\n\"How does it feel, Erica?\" Karen asked, her tone telling me she loved this.\n\nThe burn in my ass was not fading, yet I couldn't deny the reality that it felt good to have my ass filled. I wanted to feel now what it felt like to get fucked...like a girl. I answered, \"Good.\"\n\n\"Just good?\" she questioned, feeling my ass full I wanted more.\n\n\"Please fuck me,\" I begged, wanting to feel what it felt like to be fucked instead of the one doing the fucking.\n\n\"Your tight little cunt?\" Karen asked, obviously turned on by my feminization.\n\n\"Yes, fuck my tight cunt,\" I begged.\n\nKaren's hands squeezed my hips, conversely I squeezed Skye's, and I felt the slow pull out of her cock and then back in; as she slowly fucked me, the pain faded away and a strange pleasure replaced it. It was indescribable; it wasn't intense like having Beth's mouth on my cock, but it was a tingling pleasure that created goose bumps throughout my body.\n\nAfter a couple of minutes of getting slowly fucked, I wanted more. I wanted to be pounded, to be used. I finally said, \"Harder, Mistress.\"\n\n\"My little bitch really wants her cunt fucked hard, doesn't she,\" she teased.\n\n\"Oh God yes,\" I moaned like a girl.\n\n\"Let's make this a real sex sandwich,\" Karen said. \"I want you to bounce back on my cock and then slam forward into Skye.\"\n\n\"Your wish is my command,\" I agreed.\n\nAlthough awkward at first, as I slowly got used to the rhythm, I began to get fucked and fuck. I filled my ass with Karen's cock and then filled Skye's ass with mine.\n\nThe two sensations, polar opposites, created a sexy equilibrium that was impossible to explain. My cock and ass, equally receiving pleasure that contradicted themselves, created a balance of pleasure that was euphoric and yet not climatic (yet another oxymoron).\n\n\"Faster, Erica,\" Karen ordered after a couple of minutes.\n\n\"Yes bitch, fuck my ass harder,\" Skye demanded.\n\nThe next few minutes were pure sexual perfection. In a smooth rhythm, I slammed into Karen's cock filling my ass deeply, my cock almost leaving Skye' ass, then I slammed forward penetrating her as deep as I could with my cock.\n\nSkye and I took turns whimpering from getting ass fucked, our breathing getting heavier until I knew I was going to come.\n\nI warned, \"I'm going to come soon.\"\n\nKaren ordered, \"Fill my slut's ass, Erica, while I fuck you to orgasm.\"\n\n\"Yes, Mistress,\" I obeyed, burying my cock as deep as I could into Skye.\n\nI remained buried in her ass, as Karen began fucking me hard. Each forward thrust somehow pushed me to new uncharted depths in Skye and simultaneously it seemed to milk my prostate.\n\n\"Fuuuuuck,\" I grunted, a couple of strokes later as I shot my load in Skye's ass.\n\n\"Fuuuuuck,\" Skye screamed herself as she frantically rubbed her clit bringing herself to orgasm.\n\nNeither Skye nor I moved for a minute as we allowed our orgasms to flow through us. When Karen finally pulled out of me, my ass felt surprisingly empty. I had never come as hard as I had just then.\n\nI pulled out of Skye and watched my cum leak out of her back door.\n\nShifting back into the dominant mode I was in when I took Karen's ass yesterday, I ordered, \"Go get my cum, slut.\"\n\n\"From princess to king?\" She smiled, still wearing the cock that had taken my virginity.\n\n\"Get licking, don't you dare waste any of your king's cum,\" I ordered with a smile.\n\nHer smile faded away as she ordered, \"No, I think you will retrieve your own cum from Skye's ass.\"\n\n\"Pardon,\" I stammered.\n\n\"You're my bitch tonight, Erica. Now eat your cum,\" she ordered.\n\nHer glare and cold tone startled me but I obeyed, dropping to my knees between Skye's ass cheeks and stared at my white goo.\n\nI felt a hand on my head that pushed my face into Skye's ass and my cum, \"Get eating, Erica.\"\n\nI had no choice as I sucked my own cum out of Skye's ass.\n\nWas it humiliating? Yes.\n\nWas it disgusting? Kind of.\n\nDid it turn me on? Yes.\n\n\"Now my little faggot,\" she ordered, already impatient with my lack of obedience.\n\nObeying, like I always did in the end, I lowered myself and tentatively licked Skye's ass. I had never tasted my own cum, although I had been curious about my own taste. It was quite different from Derrick's taste, not necessarily better or worse, just different.\n\nA few seconds later, I felt a hand on my head push me into Skye's ass cheeks as Karen said, \"I told you to eat her ass not make love to it.\"\n\nI extended my tongue and licked Skye's rosebud and my cum that was still leaking out of it. The act was so humiliating, so gay and yet my cock was growing again in spite of it.\n\n\"Like the taste of cum, Erica?\" Karen asked a minute later.\n\n\"\u00cct's okay,\" I shrugged, not wanting to admit that I actually enjoyed the taste of cum, although it was the taste of Derrick's cum that popped into my head.\n\nSkye stood up and said, \"Sorry, but my legs are cramping.\"\n\nKaren laughed, \"Well that was fun.\"\n\n\"Orgasmic,\" Skye quipped.\n\n\"And you?\" Karen asked, pulling me up and kissing me.\n\n\"It was...\" I paused, before adding playfully, \"a little give and take.\"\n\n\"That it was,\" Karen laughed back.\n\n\"Can I get undressed?\" I asked, suddenly self-conscious of my girlie attire.\n\n\"I suppose,\" Karen said, as she sat back down and ordered, \"Skye come and get me off again.\"\n\nI was getting undressed when there was a knock on the door, followed by Derrick's voice, \"Are you done banging your girlfriend, Eric. It's time for just the guys.\"\n\n\"Nice,\" Karen said, \"banging.\"\n\n\"I did get banged,\" I joked, as I finished taking off the dress.\n\n\"Keep the thigh highs on, Erica,\" she ordered, as she held Skye's head between her legs.\n\n\"Really?\" I asked, protesting, \"I'm going out with the guys.\"\n\n\"Do you plan to get naked with them?\" she asked.\n\nI thought to myself, 'Good chance', yet answered, \"Good point,\" and pulled my jeans on over the silk thigh high stockings.\n\n\"Hurry up or I am coming in there,\" Derrick called out.\n\nSkye went to move her head obviously not wanting to be caught in the act of lesbian submission. \"Keep licking slut.\"\n\n\"Be right there,\" I called out.\n\n\"Be a good girl,\" Karen joked as I finished getting dressed.\n\n\"Yes, Mistress,\" I joked, thinking I would possibly be doing exactly that, my cock undeniably hard at the thought.\n\nI headed out, slipping out the door to not reveal the lesbian action still going on, wondering what Derrick had in mind for me. Even after fucking Skye in the ass, getting ass fucked myself and all the other sexual conquests I had been a part of, both giving and receiving, today, I was already growing again with anticipation of pleasing Derrick again. I really was a straight faggot.\n\n6. BREAKING UP AND FALLING IN LOVE\n\nOnce back in the hallway, I walked around the corner and saw a smiling Derrick who asked, \"So I am guessing you didn't dump the ice queen.\"\n\n\"She isn't so bad,\" I said.\n\n\"To you and her posse,\" he said.\n\n\"I suppose,\" I shrugged. \"I can't fathom how I can break up with her and not have her crush me. Breaking up with her is social suicide.\"\n\n\"Unless you catch her cheating on you,\" he said.\n\n\"Ironic, since I have already cheated on her,\" I replied.\n\n\"True, but she doesn't know that,\" he said. \"Is she alone now?\"\n\n\"No, Skye is with her,\" I admitted.\n\n\"Kinky little fuck isn't she,\" he smiled.\n\n\"Thinking of the ass fucking I just took, I said, \"You don't know the half of it.\"\n\n\"Want me to fuck her?\" he asked.\n\n\"Pardon?\" I asked, surprised by his bluntness, although I shouldn't have been.\n\n\"My bitch cheerleader is Skye; I could easily walk in there now and I bet within five minutes your girlfriend would be on her knees sucking my cock,\" he said confidently.\n\n\"I don't know,\" I said hesitantly.\n\n\"Give me your phone,\" he said.\n\n\"Why?\" I asked.\n\n\"Now,\" he said.\n\nI did and he instructed, \"In ten minutes return to the room to get your phone you accidently left in the room. I am pretty sure you will catch us in the act. Play the devastated boyfriend card and storm out.\"\n\n\"You can really get her in ten minutes?\" I asked.\n\n\"Guaranteed,\" he confidently said as he texted someone on his phone.\n\nI would have doubted him but I had seen him in action. I watched him walk back the way I just left and waited. I realized I had just chosen to let the guy who had turned me now go and fuck my girlfriend. I also realized I was okay with it if it meant I could end up with Beth when everything was all said and done. One day had changed everything and yet I wouldn't possibly change a thing.\n\nIt was the longest ten minutes of my life, yet when he didn't come back out a couple minutes after walking in on Skye assumedly still eating Karen, I assumed he was well on his way to turning another white girl to black cock. Oddly, instead of being devastated that my girlfriend was cheating on me, I was jealous that it wasn't me sucking his cock. I couldn't deny it; I wanted it in my mouth again. I wondered if I could take all his cock in my ass like coach had. I pondered how Beth and I could have a relationship with the baggage that went with our submission to the same guy.\n\nTentatively, I went to the door and listened. I couldn't hear anything and wondered if he was successful. Taking a deep breath, I opened the door and walked in on Karen, bent over, getting fucked from behind by Derrick as Skye was underneath her seemingly still licking her cunt...which meant theologically Derrick was in Karen's ass. Karen's sounds were a mixture of moaning and whimpering, clearly she was still getting used to the big cock in her ass.\n\nHearing the door open, she turned to me and her mouth dropped open.\n\nI stared at her pretending to be shocked even though what I was really thinking was again 'was if I could take all his cock in my ass'.\n\nI stammered, \"W-w-what the fuck are you doing?\"\n\nDerrick answered for her, \"S-s-she is taking a cock in her tight ass.\"\n\n\"You fucking bastard,\" I snapped.\n\n\"Sorry man, I can't control who wants my chocolate stick,\" he said as he continued fucking her.\n\n\"Karen,\" I said, feigning devastation.\n\n\"I-I-I'm sorry,\" she struggled to get out as her ass was filled with cock.\n\n\"Stop fucking him then,\" I demanded, playing the wounded card as well as I could.\n\n\"I-I-I can't,\" she moaned, as she grabbed Skye's shoulders to keep her balance from the extreme ass reaming that was now happening.\n\n\"Whatever,\" I said, getting angry like I had seen in the movies, \"Have the slut, I had her first,\" and stormed out.\n\nI went to my car unsure what to do when I was shocked once again. Waiting at my car was Beth.\n\nI walked over to her and said, \"Hi, Beth, what are you doing here?\"\n\n\"Derrick called me to say you and I had a date,\" she said confidently.\n\n\"Really,\" I asked.\n\n\"Do we?\" she asked.\n\n\"I think we do,\" I smiled.\n\n\"Good, because I am not taking no for an answer,\" she said, leaning in and kissing me.\n\nI was in awe. Shy Beth was hitting on me. I melted into her. When Karen and I kissed it was passionate and sloppy; this kiss sent electric shockwaves through me. It was tender, it was passionate, it was urgent and it was perfect.\n\nWhen the kiss was finally broken, she said, \"My parents are out of town this weekend; do you want to go to my place?\"\n\n\"I'll go anywhere you want to go,\" I said, knowing the difference between lust and love with just one kiss.\n\n\"Good, because tonight you're mine,\" Beth said, her hand squeezing my cock.\n\n\"Yes, Mistress,\" I joked.\n\n\"Hmmm, you will be my bitch tonight?\" she asked, rubbing my cock, the words out of her cute lips so hot.\n\n\"I'll obey unconditionally,\" I said, willing to do anything to be with her.\n\n\"Well, getting Derrick to fuck that slut of yours was pretty good proof of your willingness to be mine,\" she said.\n\n\"How do you know that?\" I asked.\n\n\"Derrick texted me,\" she said. \"He said you would be single by the time I got here.\"",
        "\"And so I am,\" I shrugged.\n\n\"No, you are not,\" she said, \"You're mine now.\"\n\n\"Shit, I'm going to come in my pants,\" I groaned, her hand caressing my cock driving me nuts.\n\nShe instantly stopped teasing me. \"We can't have that. I have plans for that load.\"\n\n\"Beth I can't believe how outgoing you are,\" I said surprised completely by her aggressive behaviour.\n\n\"Master D told me to go after what I wanted,\" she said, squeezing my cock through my jeans, before adding, \"And what I want is you.\"\n\nShe led me to her car and started driving.\n\nCurious, I asked, \"I have to ask, how did you end up in a relationship with Derrick?\"\n\n\"He saw through my shy exterior and brought out the woman in me,\" she said.\n\n\"I have always had a crush on you,\" I admitted.\n\n\"I have on you too,\" Beth admitted back.\n\nAt her house, she led me in, closed the door, dropped to her knees, fished out my cock and devoured it whole.\n\nAfter a few seconds, she took my cock out of her mouth and asked demurely from her submissive position, \"Whose ass was your cock just in?\"\n\nThe question wasn't an accusation or judgement, but rather a question. I answered sheepishly, \"Skye.\"\n\n\"Oh, she has one tight ass,\" Beth said, before taking my cock back in her mouth. After another few bobs she added, as I tried to process her comment on Skye's ass, \"although I think mine is even tighter.\"\n\nBeth stood up and ordered, \"Let's get you out of those clothes.\" She pulled my shirt over my head and moved her mouth to my nipples. No one had ever sucked on my nipples before and I moaned on contact. It felt so intimate and erotic. She swirled her tongue around my nipple, sucked it between her lips, bit it and flicked it with her tongue, before moving and replicating the attention on my other nipple.\n\nShe slithered down and tugged my pants off and stopped as she saw I was in thigh highs. \"This is unexpected.\"\n\n\"It's a long story,\" I said, having forgotten I was wearing them and embarrassed to be caught in them by the girl I secretly had been in love with for years.\n\nHer hands moved up and down my nylon clad legs, \"Hmmmmmm, this is so sexy.\"\n\n\"Really?\" I asked.\n\n\"Oh yeah,\" she purred taking my dick back in her mouth as her hands ran up and down my legs. Taking my cock out of her mouth, she explained, \"Stockings are my fetish.\"\n\nI moaned, thinking she was too good to be true, \"Mine too.\"\n\n\"I know,\" she smiled.\n\n\"You do?\" I asked.\n\n\"I've been teasing you forever,\" she said, stroking my cock slowly.\n\n\"You knew?\" I gasped, thinking of the hours I spent watching her slip her feet in and out of her shoes trying to get glimpses of her stocking-clad toes.\n\n\"It was kind of obvious,\" she said.\n\n\"Do you have any idea the amount of learning I lost because I was distracted by you?\" I accused playfully.\n\n\"Can I distract you again?\" She asked.\n\n\"God yes,\" I whimpered.\n\nShe took her blouse off and her perky breasts were barely held in by her lace bra.\n\n\"Can I do the honours?\" I asked.\n\n\"Go ahead,\" she smiled, moving closer to me.\n\nI reached around and, hands shaking, unclasped the bra releasing her breasts from captivity.\n\nReplicating what she had done to me; I leaned forward and took her left breast in my mouth. I licked, flicked and sucked, her breasts. They were the perfect size not too big that they would be sagging in ten years, yet not too small...they were just the right size...a handful.\n\nI went to move lower but she stopped me. \"Not yet.\"\n\nInstead, she turned around, walked over to the back of the couch, and slipped out of her skirt. My cock flinched seeing she too was wearing thigh highs. My cock flinched again at the sight of her perfect ass.\n\nI went to take off my thigh highs but she said, \"Leave them on.\"\n\n\"Okay,\" I said, strangely liking the feeling of them on my legs, although thinking it was strange to have yet another girl wanting them on me. I stared at her, my cock in full salute mode.\n\n\"I want your cock in my ass,\" Beth said, bending over, using the couch for balance.\n\nThe words were another shock, yet I wasn't one to protest the wants of a woman.\n\nOddly, she still had her panties on.\n\nReaching her, she pulled her panties down just enough to give me access for her ass.\n\nI moved behind her and asked, \"Do you have any lube?\"\n\nMentioning Derrick for the first time in a while, \"Master D has been preparing my ass for you.\"\n\nI hated that Derrick had fucked her before me, I wanted Beth to myself, yet I couldn't change the past and ironically it was him who set us up...unorthodox but true.\n\n\"Okay,\" I said, my cock moving between her ass cheeks.\n\n\"Shove it all in, Eric, I have wanted this for so long,\" Beth begged, her hunger undeniable.\n\nAgain not one to refuse a women's needs, I pushed forward past her tight rosebud and into her ass.\n\n\"Oh God, yeeeees,\" she moaned as my cock filled her back door.\n\nShe was so tight, I felt like I had put my cock in a vise. \"Shit, you're so tight.\"\n\n\"Please, Eric, I have fantasized about this for so long, fuck the shit out of me,\" she begged.\n\nI slowly began moving in and out of her ass not believing it was really happening. Just over an hour ago I was fucking Skye while getting ass fucked myself and now my greatest fantasy was coming true.\n\n\"Pound my ass, baby,\" she demanded, the use of the endearing term 'baby' bringing chills up my back.\n\nI held her hips and began pumping my cock in and out of her.\n\n\"Oh yes, fuck me baby, fuck my ass,\" she screamed, as I slammed into her, our bodies colliding forcefully.\n\nHaving come a few times already, I knew this was going to be a lengthy fuck session, which was perfect because I never wanted it to end.\n\nMinutes passed by as Beth continued to moan, beg and talk nasty. Finally, I could feel my balls boiling and I warned, \"I'm going to come soon.\"\n\n\"Fill my ass baby, I want to feel you shoot inside me,\" she moaned.\n\nSeconds later I obliged, shooting a load of cum in her ass. As soon as I was finished coming, she turned around, dropped to her knees and cleaned my cock. I couldn't believe how a girl who looked so innocent, could be so slutty...I guess you can't judge a book by its cover.\n\nTaking my cock out of her mouth, she said, \"I want to fuck you.\"\n\n\"Isn't that what we just did?\" I asked playfully.\n\n\"No,\" she said, standing up, taking a deep breath and pulling down her panties, revealing she had a cock, \"I want to fuck you.\"\n\nI stared at what should have been a cunt, but instead was a cock bigger than mine unable to completely fathom what I had just learned.\n\n\"Still like me?\" She asked, her earlier confidence gone and the insecure girl I thought I knew returning.\n\n\"What? Yes,\" I replied. \"Beth this is just a pretty big surprise.\"\n\nPlaying on my words, she asked, \"Do you mean big as in I have a big cock or big as in holy shit what is happening?\"\n\n\"Both,\" I replied, as I tentatively grabbed her cock with my hand.\n\nShe gasped. \"I have fantasized about this moment for a long time.\"\n\n\"What did you fantasize?\" I asked, my mouth watering with the thought of sucking her cock.\n\n\"The romantic version is you accepting me for who I am,\" she said.\n\n\"I do accept you,\" I said, leaning in and kissing her.\n\nWhen the tender kiss was done, she added, her tone shifting from shy to nasty, \"the naughty side of me wants to see your pretty mouth wrapped around my cock and hear you squeal when I fuck that cute ass of yours.\"\n\n\"Oh my,\" I said, my head still spinning with the shocking revelation that the girl of my dreams had a cock.\n\n\"On your knees,\" she ordered.\n\nI obeyed.\n\n\"Do you want to suck my cock?\" Beth asked, stroking her long eight inch cock.\n\n\"God, yes,\" I said, a sequel to Beth's earlier cocksucking submission seemingly replaying itself. My mouth watered and I was again hypnotized by a big cock in my face.\n\n\"Suck my cock, Eric, get it nice and wet for that pretty ass of yours,\" Beth instructed.\n\nI leaned forward, opened my mouth and took my girlfriend (was she my girlfriend?), in between my lips.\n\n\"Good boy,\" she purred. \"I always thought you would look hot with my cock in your mouth.\"\n\nThe thought that she had fantasized about me as her cocksucker was both surreal and yet hot. I tried to replicate her earlier blow job, wanting to give her pleasure unlike any she has experienced before.\n\n\"You love sucking cock, don't you?\" She asked, pulling her cock out of my mouth.\n\n\"Yes,\" I admitted, no shame in my response at all. I wanted to suck cock and be sucked; I wanted to fuck and be fucked. I wanted it all and with Beth I could have it all. A girl I had a crush on; a girl who gave amazing head; a girl who would accept I liked sucking black cock too; a girl who would take it up the ass; a girl who would fuck me and make me her bitch.\n\nBeth shoved her cock back in my mouth and began to fuck my face.\n\nI moaned a yes, somehow turned on by having my mouth used by her.\n\n\"Ready to get that ass of yours fucked?\" Beth asked, pulling her saliva covered cock out.\n\n\"I'm your slut,\" I said, eagerly positioning myself exactly where she had been just moments earlier.\n\n\"No, no,\" she smiled, moving to the couch and sitting down. \"Come sit on my cock.\"\n\n\"Okay,\" I agreed.\n\nShe explained, her cock standing at attention, \"When you're fucking me I will be your submissive plaything, but when I am fucking you, you will be my bitch, is that clear?\"\n\n\"God, you are so perfect?\" I said, she somehow knowing I needed both the dominant and the submissive.\n\n\"I'll take that as an affirmative. Now ride my cock, Eric, take it all up that cute little ass of yours,\" she ordered.\n\nI awkwardly straddled her, realizing it wasn't as easy as it looked when Karen had straddled me. I tentatively lowered myself feeling her cock poke my rosebud. After a breath, knowing her cock would widen me more than Karen's toy, I pushed down and gasped as Beth's cock broke into my back door. \"Oooooooh,\" I whimpered, a searing pain coursing through me, yet somehow it was numbed by the thrill of knowing it was Beth whose cock was filling me.\n\n\"Fuuuuck, you are the tightest ass I have ever had,\" Beth groaned.\n\nHer words stunned me. How many asses had she fucked? I joked, \"Am I just another conquest for you?\"\n\nShe laughed, \"No you are the final conquest in a lengthy complex plan.\"\n\n\"I aaaaam,\" I whimpered, her cock going deeper into my ass, her words implying something I didn't understand.\n\n\"Oh yes, baby, this night has been a long time in the making,\" she said.\n\nHer tone was ominous and I immediately wondered what she meant. \"W-w-what d-d-do you m-m-mean,\" I struggled to ask, as her cock reached new never explored depths of my ass.\n\n\"This whole night was orchestrated,\" she revealed.\n\n\"I-I-I don't understand,\" I replied, her hands going to my shoulders.\n\n\"This will burn for a second,\" she said and before I could understand her meaning she pulled me down hard onto her cock.\n\n\"Fuuuuuuck,\" I screamed, the pain intense and her cock in me so completely I wasn't sure I could handle it staying in me.\n\n\"Just relax and get used to it in you, baby,\" she whispered, kissing my chest.\n\n\"It burns,\" I whined.\n\n\"It will for a while, but then I am going to rock your world,\" she promised, her mouth going back to my very sensitive nipples.\n\n\"Okay,\" I said, just trying to relax and allow the pain to fade, the idea of being ass fucked still very appealing.\n\nHer lips on my nipples distracted me, creating pulses of pleasure now simultaneously simmering the pain in my ass.\n\n\"So what do you mean tonight was all orchestrated?\" I asked.\n\n\"Shhhhh,\" she purred, \"I'll explain everything after we are done.\"\n\n\"Okay,\" I agreed, feeling completely at the whim of this beautiful woman.\n\nA couple minutes of concentrated nipple play and she said, \"Ride me slowly, baby. I want to watch you fuck yourself.\"\n\nI nodded, preparing myself for the return of the burn. I moved my hands onto her shoulders, looked into her eyes and began to slowly move my ass up and back down on Beth's cock.\n\n\"You look so hot, baby,\" she purred, her eyes never leaving mine.\n\n\"You do too,\" I replied, as I got used to the motion of riding her cock. The expected pain never really occurred, but the thrill of submission making my cock get hard yet again.\n\nBeth noticed, \"You like my cock in your ass obviously.\"\n\n\"Shit, yes,\" I said, each up and down movement creating sensations of pleasure.\n\n\"You're going to be my good little bitch,\" she purred, her hand grabbing my cock.\n\n\"Yes, I'll be a good girl for you,\" I replied, liking the idea of being her bitch, before I realized I called myself a girl.\n\n\"I knew you would,\" she moaned herself, obviously enjoying my ass wrapped around her cock. \"Now ride me faster, Erica.\"\n\nHearing the same name that Karen had used on me confused me and I quickly wondered based on Beth's earlier odd statements if she somehow knew about me being fucked earlier.\n\nAs if reading my mind, Beth said, \"Is my cock better than Karen's?\"\n\n\"What?\" I asked, the avalanche of surprises continuing to fall.\n\n\"I know Karen took your ass tonight,\" she smiled.\n\nJust as I was about to ask another question, she bucked up just as I moved down somehow reaching even deeper into my ass. I screamed, \"Holy shit.\"\n\n\"I'm close baby,\" she moaned herself, as she continued meeting me on my downward movements.\n\n\"Oh fuck,\" I whimpered, the thrill of getting fucked unlike any other sensation.\n\n\"I'm going to come in your ass baby, in that tight man cunt of yours,\" she said, the naughty language from her innocent face such a nasty oxymoron.\n\n\"Oh yes, cum in my cunt,\" I begged, loving the idea of being her girl.\n\nA few more deep thrusts in me and she moaned, \"I'm coming, baby, I'm coming in your cunt.\"\n\nThe feeling of someone coming inside you is utterly indescribable. It made my cock pulse, my body quiver and my ass tingle.\n\nEventually, she stopped fucking me and pulled me in for a kiss, her cock still in me.\n\nBreaking the kiss, she asked, \"Do you want to know a secret?\"\n\n\"Besides the fact that you have a cock?\" I asked.\n\n\"Yes,\" she smiled.\n\n\"Sure,\" I said, although I was nervous.\n\n\"I have been fucking Karen and Skye all semester,\" Beth revealed, this secret somehow more shocking than she had a cock.\n\n\"Really?\" I asked.\n\n\"And the past few days were all orchestrated by Derrick and I,\" she continued.\n\n\"What do you mean?\" I asked, confused.\n\n\"Karen and Skye are my subs,\" she revealed, compounding the bizarreness.\n\n\"Her giving up her ass, taking your ass and being fake caught by Derrick was all part of the plan to get you and I together,\" Beth said.\n\nI was speechless.\n\nBeth suddenly showing her insecurity asked, \"You're not mad at me are you?\"\n\n\"You couldn't have set up me walking in on coach and Derrick,\" I said, trying to wrap my head around this.\n\n\"No that was a coincidence that really got the ball rolling,\" she admitted.\n\n\"And you are a sub to Derrick?\" I asked.\n\n\"Yes,\" she nodded.\n\n\"Did you have anything to do with Derrick trying to turn me?\" I asked.\n\n\"No,\" she admitted. \"But I do find the idea really hot.\"\n\n\"So now what?\" I asked, realizing I had been played and unsure how I felt about it.\n\n\"I want you,\" she said nervously, like Julia Roberts in Notting Hill.\n\n\"In a relationship,\" I asked.\n\n\"Yes,\" she said.\n\n\"No more trickery,\" I smiled.\n\n\"I can't make that promise,\" she said, her hand stroking my cock.\n\n\"I have loved you for years from afar,\" I declared.\n\n\"Well, now love me from up close,\" she smiled and we kissed.\n\n7. Epilogue\n\nThat was five years ago.\n\nDid our crazy relationship last?\n\nWell, I am watching her walk down the aisle dressed in white. My mouth is lingering with the aftertaste of Derrick's cum which Beth and I both shared just minutes ago.\n\nIs our relationship...unorthodox?\n\nYes.\n\nDo I love Beth unconditionally?\n\nYes.\n\nWould I change a thing?\n\nNo.\n\nI have it all. A beautiful woman who loves me and is willing to be my wife, a gorgeous black Master who understands our submissive needs and our wedding gift from our Master is a week at a swinger's beach resort.\n\nWhen she reaches me, I smile for two reasons:\n\n1. I am about to marry my best friend.\n\n2. She has cum in her hair.\n\nThe end."
    ],
    "authorname": "silkstockingslover",
    "tags": [
        "gay first time",
        "lesbian",
        "anal",
        "submission",
        "stockings",
        "pegging",
        "interracial",
        "shemale",
        "oral",
        "cheerleaders"
    ],
    "category": "Anal",
    "url": "https://www.literotica.com/s/the-craziest-sexy-love-story-ever"
}
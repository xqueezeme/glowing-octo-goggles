{
    "title": "Mike & Karen Ch. 20",
    "pages": [
        "Mike shuddered and tried to move as people stampeded by.\n\n\"Dad, hold still,\" Alex said, his voice tinged with desperation as he kept his father on his back, ignoring the frightful chest wound. \"You just need to-\"\n\n\"Alex, listen to me,\" Mike breathed, lifting his head slightly to look at his only son. \"Listen carefully.\"\n\nAlex nodded and took his father's hand, trying to not stare at the massive red stain that was spreading across his chest. He stared into those electric blue eyes, so very like his own, but now...\n\n\"Alex,\" Mike grunted, straining and speaking hoarsely through clenched teeth. \"You... my family... we are not special... we are of no great destiny... there is no... predestined future for you, no promise of glory...\"\n\nHe took Alex's hands in both of his, looking up at his son. \"But that means... your destiny... is your own, son. Yours to carve out, to make great... like I... like I w...\"\n\n\"Dad...\" Alex said, his voice trembling as he ignored the chaos around him.\n\nMike spasmed and strained, holding back something, struggling to speak. \"It's up to you... to look after you mom... and Alli... and be the man I know you can be...\"\n\nAlex squeezed his eyes shut and held his father's hands tightly as Mike fought for breath. \"Make something of yourself, Alex! Grab your destiny by the-\"\n\n\"You two are taking paintball way too seriously,\" Karen sighed, standing over her husband and son, wearing a tight camouflage outfit, and her paintball rifle sitting on her hip. Behind her, Alexa and Andrea just looked on, unimpressed.\n\n\"Aw, but it's more fun this way, mom!\" Alex protested while Mike burst out laughing.\n\n***\n\nMike &amp; Karen\n\nDisclaimer: All characters are 18 years of age or older while actively engaging in sexual activity. This story is a prequel/sequel (sprequel?) to my other work, Alex &amp; Alexa. As always, many thanks and gratuitous panty shots from Freja and Jeanie to my long-suffering editor and beta-reader for their assistance in polishing up and improving this work. Reviews are welcome; flames will be snickered at and deleted with extreme prejudice. Enjoy!\n\nPlease Note: There are incest themes with a secondary couple in this story. Just a forewarning.\n\nChapter XX- A Fashionable Science Girl\n\nBlackwell Manor, early March...\n\nAlexa had taken it upon herself to wander down into the various basements and begin exploring on her own. Though she'd been shown all three sub-levels before, she'd never really had the time to come and just begin looking around.\n\nOne thing she could appreciate was that the hallways were all dry and brightly lit. Even with the long lengths of metal and polymer tubes running along or near the ceilings, everything felt orderly and efficient. It appealed to the Blackwell in her.\n\nAndrea, who was the mechanic, plumber, and electrician for the estate (with unofficial backup from the two groundskeepers, Dave and Yolatunde), kept the place in seemingly immaculate shape, even going so far as to keep dust out of the corridors when she wasn't working on a genuine project.\n\n\"Do the tough stuff first, and everything gets easier,\" Andrea had said. \"Leaves me more time for my OCD projects, if I have the boring and un-fun stuff out of the way first.\"\n\nAlexa had seen examples of Andrea's OCD in one of the plumbing rooms. She'd inspected the room, ordered new pipes in various widths and gauges, and then refitted everything, so that all the pipes were literally lined up in a row along the wall, or in contained frames according to size and purpose. And while it may have been unnerving to look at, it would no doubt drastically cut down on the amount of time Andrea had to spend on finding and fixing any issues.\n\nAlex and Mike had both approved, making references to 'modular battlemechs', whatever that meant. Alexa didn't really want to know.\n\nBut she wasn't down here to look at Andrea's OCD plumbing and wiring, sexily efficient as it might be. She'd come to check out the rooms that only four people had keys for- Mike, Karen, Alex, and herself. And these were the spaces where endless numbers of Blackwell heirlooms were kept, some of them literally centuries old.\n\nShe came to the door of one of the rooms and smirked- the door was heavy wood, and bound with iron, ridiculously out of place. Every bit as ridiculous was the large, heavy metal key she now carried on an iron ring, along with three others. She was aware of the fact that these rooms were tied to Ari's security systems, so the old-timey keys were just an indulgence they'd kept up with, because why not?\n\nGoodness, how she loved her quirky family.\n\nAlexa inserted the key and turned it, trying not to giggle at the loud clank! sound as the door unlocked. She pushed the weighty door open with a grunt, turning and waving at the small security camera in the hallway before entering. She'd been in here before with her sister, but only briefly, just getting the rundown on how things worked. Now was her time to really explore.\n\nShe turned on the lights and there was a hum as the various overheads powered up. She gazed in awe at the rows she was meant to walk down, either side lined with heirlooms and artifacts of the Blackwell family deemed too valuable or sensitive to be kept upstairs. Walking slowly, Alexa took a look at the various items, all carefully categorized and labeled, or having brass stamps attached to their displays.\n\nGreat care had been given to the lighting, both for presentation, and also to make sure nothing was damaged by strong photonic exposure. Alexa had seen so many paintings, murals, and frescoes in Europe faded and damaged beyond repair by the effects of the sun, careless lighting, or endless camera flashes. She was glad these items were being protected.\n\nInside a display case sat several round cylinders and tablets made of clay, covered in cuneiform. She couldn't read what they said (she'd have Alex come and translate for her one day), but there were brief descriptions of what each one entailed.\n\nOne was a note of complaint, apparently the oldest such example known anywhere, from the Sumerian city of Ur, circa 1750 BC. One businessman griping at another. Some things never changed.\n\nAnother was identified as a hymn to the Sumerian and Assyrian goddess Ninkasi, who was apparently the goddess of spirits, such as wine and beer. She'd heard Alex and Mike talk about recreating the recipe described herein.\n\nShe came across a small glass case, and inside it sat a skull. The skull was bound in places with iron bands, and etched onto those bands was a flowing script, created in medieval Mongolia. The skull belonged to a warlord named Targetai, and had come into the family's possession during the Colonial Wars of the eighteenth century.\n\nA Roman gladius sat on a small stand, belonging to some general of note who'd campaigned in Germany and Britain.\n\nIn a display case lay many coins made of gold and silver, all of them from the Spanish Main, from the time when her ancestors had acted as privateers against England's rivals in the Caribbean. Her family, already wealthy as businesspeople and landowners, became even wealthier when they plundered the gold and jewels from Spain's treasure fleets with Drake and other gallant adventurers...\n\n... there she was.\n\nPropped up against the wall, she towered over Alexa, leaning forward and fixed in place with various braces to support her considerable weight. She must have been nearly three meters long or tall, her paint job restored in glorious detail. Her keen blue eyes gazed out across the room, and her gold-leaf hair glinted in the light.\n\nThis was the figurehead of the earliest Thunderhawk, the vessel whose crew had fought the Spanish Armada at the command of Drake (who was a busy man, seemingly).\n\nShe was clearly modeled after a Blackwell woman of the period, since her face had the regal cast, and the aquiline features. Not to mention the blonde hair and blue eyes.\n\nAlexa saw another feature and smiled.\n\nShe saw a small ladder nearby, went over and grabbed it to set it down in front of the figurehead. It was no more than five feet tall, with sturdy legs and a wide base on top. She clambered up the steps nimbly and stood on the base, now eye-level with her 'ancestor'.\n\nWith a smirk, she lifted her shirt, exposing her tits, her eyes never leaving the figurehead's.\n\n\"Mine are bigger,\" she said in a saucy tone. She wiggled her chest at the inanimate woman for a moment, then hopped down, pleased with herself. She returned the ladder to where she'd found it and kept exploring.\n\nA ridiculous winged helmet, made of cheap metal. The little plaque indicated it was an original prop from Wagner's premiere of 'Die Walk\u00fcre', the second opera in his Ring Cycle. She smiled to think that maybe Amalie Materna had worn this very helmet at Bayreuth in 1876. Somebody upstairs had to know.\n\nOld medieval tablets were spaced along the wall, carved with images and Latin texts about Crusader knights, the brass plaques describing yet more of her ancestors. Over the centuries, many had belonged to the Order of St. John, her mother had told her, and they'd even quietly visited very old graveyards in continental Europe, and some of the accessible catacombs in Paris, where many of her ancestors were said to be buried.\n\nShe sighed and looked out over the vast room, with all the... stuff... that it contained, knowing there were two more just like this. And all this was just the part that Harcourt Blackwell had brought with him when he'd abandoned the family titles and moved to the colonies. There was apparently a lot more back in England too, but the eldest Blackwell had brought the treasures he esteemed most.\n\nIt was odd to think that if the eldest line had stayed in England, she and Kar would likely be titled as countesses now. The head of the Blackwell family was an earl back in the old country. When she and mom had moved to Cardiff, they'd discussed possibly revealing themselves to the family, since Hampshire wasn't that far away, but ultimately decided against it.\n\nBecause Alexa had not grown up in that life, and it was Miranda's conclusion that she shouldn't have to undertake it if she didn't want to. Her mom was slowly dying, and she wanted the choice to be Alexa's alone.\n\nAlexa suspected that perhaps the thought of revealing herself to her family again after abandoning them without a word nearly twenty years earlier was just too hard for her mother to bear, and Alexa didn't blame her if that influenced her decision.\n\nThey'd never know what happened to drive Miranda away in the span of one night, but whatever it had been had scared the strongest woman Alexa had ever known (barring her older sister) enough to simply leave, and take her younger daughter without explanation. It bothered Alexa, and it hurt, but she accepted that there was something she simply did not know. It was something her mother had taken to the grave, and Alexa would respect that.\n\nShe now espied many long, wide and thin crates.\n\nMany, many long, wide and thin crates.\n\nDozens of them. Dozens on them, stacked over one another on strong, low frames.\n\nShe walked over and looked down at them curiously, her hands touching the simple wood.\n\nThere seemed to be no plaques indicating what was held within. Each crate was maybe two meters (just over six feet) wide, and more than twice as long. They were around twenty centimeters (eight inches) thick. Curious. Just plain wood that one would make every day shipping crates out of.\n\nFaded words were stamped onto the wood, in blue ink.\n\nIn German?\n\nAlexa bit her lip as she reached for a corner of the crate before her, noticing that they were not nailed or sealed shut. With some effort, she lifted the corner enough to let the overhead lights shine down, revealing what was inside...\n\nShe promptly dropped the lid back in place, turning around and leaning against the crate, blushing. It was several seconds before she realized she'd forgotten to breathe.\n\nShe had so many questions for her sister and her brother-in-law.\n\nAlexa took a deep breath and moved on.\n\nIn a long display case sat an exquisite (if somewhat corroded in places) swept-hilt military rapier. She'd seen dozens like it in museums across France, Germany and Italy. She didn't know weapons history like Alex or Mike did, but she could tell it was French in origin from its general lines and embellishment.\n\nAnd there was some sort of writing engraved into the length of the blade. She leaned in closer to see if she could read it.\n\nD\u00e9di\u00e9e au service de notre reine bien-aim\u00e9e, sa majest\u00e9 Anne d'Autriche.\n\n\"Dedicated in the service of our beloved Queen, Her Majesty Anne of Austria...\" Alexa murmured, reading aloud to herself.\n\nAlways more questions.\n\nAlexa sighed and decided she'd seen enough for today. She walked back to the entrance to the room and turned off the lights. She closed the heavy door and locked it with her heavy key, then turned and headed toward the end of the hall and the stairs back up to the main floor.\n\n\"Hi, Miss Blackwell,\" Andrea said cheerfully as she swished down the corridor, wearing the strategically tight coveralls she seemed fond of and a white tank top underneath. Her favourite habitual large wrench was resting on her shoulder. \"Checkin' out the goodies?\"\n\n\"I'll never understand my family, Andrea...\" Alexa sighed as she walked by.\n\nAndrea paused for a moment, considering what one of her employers had just said, and then shrugged.\n\n\"Welp, that makes two of us,\" she concluded before continuing down the hall to one of the electrical rooms.\n\n***\n\nUniversity of Toronto, St. George Campus, March 1987...\n\n\"Ugh, I still can't believe we had to come back here after that time at your place, Kar,\" Lisa sighed as she walked around the dorm room in her underwear and nothing else. \"Everything feels so... tiny and boring.\"\n\n\"I must disagree, I find the change quite invigorating,\" Karen replied, sitting in her comfy chair and watching her roomie mill about, fussing. She didn't know why Lisa was complaining, exactly, outside of just being Lisa. After all, she'd taken her, and Mona and Janet, to get mani-pedis and facials at a spa nearby only two days ago. Their lives were hardly tragic. \"And were you not the one who referred to the place where I grew up as a... oh, what was it... a marble mausoleum?\"\n\n\"Oh, c'mon, let that one go,\" Lisa whined, now getting onto her bed and kneeling on it, fumbling about for something. \"I was so hung over, and you were playing that music so loudly.\"\n\n\"I forgave you before DeBourne had even carried you off to the kitchen to rid you of your affliction,\" Karen said easily, waving it off. She adored her roomie's quirks, with the possible exception of her snoring and lactose intolerance. \"That aside, though, you know full well I am enjoying my life here on campus. It allows me liberties I would not have back in my parents' domicile.\"\n\n\"Is that a fancy way of saying that it's easier to lez out with a little Jewish redhead here on campus than it would be with mumsy and daddykins looking over your shoulder all the time?\" Lisa teased, pulling a large pneumatic shoulder massager out from beneath her bed. She'd become acquainted with it recently, and quite involuntarily, after Karen had pinned her down and used it on Lisa's womanhood in order to sober her up after she'd nearly blown their ruse against the Chinese businessmen with her drunken antics.\n\nShe found she'd grown quite fond if it, in fact, in small doses and under controlled conditions. She folded one of her towels over and then laid it atop the knobs that vibrated. She wiggled around until her panty-covered pussy was resting lightly against the towel, then reached down and turned on the device on its lowest setting.\n\n\"Ohhhhhh, yeah...\" she sighed, closing her eyes and enjoying the ride, her hands resting on her thighs. \"That's the stuff...\"\n\n\"I am not sure whether I am pleased that you found someone new, or insulted that I was so easily replaced,\" Karen remarked, watching the show with her chin resting on the back of her fingers, an amused look on her face. \"I prithee, Miss Heyman, what does she do that I cannot?\"\n\n\"Nothin',\" Lisa moaned, undulating her hips now, a decided wet spot developing on them. \"But it only happens when I'm wantin' it, it can't pin me down and orgasm the bejeezus out of me to make me behave.\"\n\n\"Nice to know there are some deficiencies,\" said the bronze-haired goddess, smirking. \"But I am beginning to think you actually like being dominated.\"\n\n\"Jus' because you can do it,\" panted the redhead, squirming now, the abused machine humming below her, \"doesn't mean other people can... I'm feisty.\"\n\n\"I seem to recall DeBourne having his way with you,\" Karen mused. \"Every which way but sexually.\"\n\n\"Oh, like you'd do any better,\" Lisa hissed, her body flushing pink now as she rode her new ersatz toy. She was grinding her hips rhythmically, pressing her pussy down harder on the padded knobs that were vibrating so delightfully. \"You'd get rag-dolled like everyone else, princess.\"\n\n\"Very true, but I would also not misbehave in front of him in order to earn such retribution.\"\n\n\"You're the bi one, not me, so believe that all you want,\" Lisa managed to say, reaching up and squeezing her little breasts. Her body was shiny with sweat now, and she knew she wasn't far off from her destination. \"Ooooooh...\"\n\n\"Kno-ooock!\" Janet said as she opened the door and breezed in, followed by Mona, who was carrying her sketch pads and other supplies in a bag over her shoulder. \"Thought we'd come by and ask if- oh, Jesus, Heyman!\"\n\n\"You know to actually knock, not just say the word,\" Lisa gasped, not slowing down at all, and not actually giving a damn that they'd come in. Mona and Janet had caught her in too many compromising positions before (usually with Karen) for her to have any embarrassment about it now. \"You've been told to knock if you don't wa- gnnnnnn!- don't wanna see naughty things...\"\n\n\"She's got you there, girl,\" Mona agreed, setting down her backpack and rummaging about in it long enough to pull out a small camera. \"Not like we haven't been told million times over the past year and change. And how many times have we caught you spiked on DeBourne, and you didn't care? Li, don't cum yet, I wanna snap some pics that I can draw from for my course.\"\n\n\"Just don't... show 'em off...\" Lisa warbled, arching her back and pressing down with her hips. \"An' change my hair colour!\"\n\n\"I'll even give you bigger tits, just to make sure nobody knows it's you,\" Mona said easily, squatting down and snapping shots, the flashbulb on her little camera rotating with each photo. \"That's it, keep it goin', babe.\"\n\n\"Gnnnnnnnnn!\" Lisa moaned, straining to hold on long enough for her art major friend to get whatever she needed. Lisa had never considered herself or been considered sexy before she'd met these three, so it pleased her no end that Karen found her sensual and sexually desirable, and that Mona was more than happy to use her for her erotic artwork.\n\n\"I swear, it's like I'm living in a porn studio,\" Karen sighed, shaking her head and eliciting giggles from both Mona and Janet. They knew she wasn't serious, that this was her commenting just for effect. Karen was, if anything, more sexually charged than all three of her friends put together. Bisexual by nature, and with a very active libido, she'd been Lisa's casual lover and go-to girlfriend almost since the day they met during move-in day in freshman year.\n\nAnd none of them objected, either. Karen was incredibly elegant and dignified, yet uninhibited with her sexual desires. She was more than happy to let Mona use her in nude artwork, even those with an erotic twist when necessary for her courses or just practice. She regularly nude-modeled for the art department, much to everyone's delight, since she had a body that was to die for. With few exceptions (basically terminally straight women and gay men), she was everyone's erotic fantasy.",
        "\"Aside from creeping on Heyman while she's getting her rocks off,\" Janet said, sitting down on the edge of Karen's large bed and ignoring the shameless display happening across the room. \"we came here to find out more about your upcoming glam shoot, princess.\"\n\n\"We've been over this, Remington, it's not a 'glam' shoot, thank you very much,\" Karen sighed, rolling her eyes, and turning in her comfy chair to face her friend. \"A society magazine has agreed to come and do a story on me, since it is very uncommon- as yet- for women from my social position to be getting into applied sciences. And yes, they'll be taking pictures. To get the story done at all, I had to compromise and allow them to do what amounts to a fashion shoot to put in the magazine.\"\n\n\"And that's not a glam shoot somehow,\" Janet iterated, smirking.\n\n\"The fact that I convinced them to shoot it here at the university and not back at my home is a good start, to be honest,\" Karen allowed. \"I think it's very important that people are exposed to the new reality that women from any strata of our society can-\"\n\n\"GnnnnnnnoooooooOOOOOHHHHHHHH GAWWWWWD!\" Lisa wailed, shaking uncontrollably and cumming hard, soaking her panties shamelessly.\n\n\"That's right, you go, girl!\" Mona said, egging her on and still taking pictures.\n\n\"What were you saying, princess?\" Janet asked, batting her eyelashes.\n\n\"Oh, shut your dick holster, Remington...\" Karen muttered, slumping back in her seat, and shaking her head while she scowled at the wall.\n\n***\n\nThe present...\n\nAlexa hadn't spent much time in the main library just yet, but that was because she'd been rather busy of late. She loved libraries and had pictures of herself in some of the oldest and most beautiful ones across Europe. She walked now into the library and looked around in wonder, since the room was a full two levels around an open space with many tables for studying and comfortable chairs and chesterfields for reading.\n\nThere was even a fireplace, although she doubted it was ever lit. Still, very pretty.\n\nAnd this was where she found her family, along with Freja and Jeanie, poring over old textbooks and laughing as they pointed out love notes scrawled in corners, books that had been shared by Mike and Karen back in university.\n\n\"Oh!\" Karen said in excitement as she found one written on the inside of a back cover, pointing to it. \"Remember writing this one, Michael?\"\n\nAlex leaned in and began reading. \"You are an irreplaceable gash in the fabric of reality; your keening static howl is like no other, and if it faded from the abyss, the void that remains would be unfillable, and the mansions of silence would forever fill with my lament.\"\n\nAlex looked up at his towering father, a wry expression on his face. \"Did you have an emo girl phase in university, dad?\"\n\n\"It was one of the most meaningful and touching things he ever wrote to me,\" Karen cooed, tracing her fingers over her husband's bold lettering. \"He knows how to touch a girl's heart.\"\n\n\"Hey, I like a good mushy moment as much as anyone,\" Alexa interjected. \"But I've been in the basement, and I have many questions.\"\n\nKaren sighed and looked up at Mike. \"Our fault for giving her keys and a sense of agency.\"\n\nThey both turned to look at her resignedly. \"What did you find?\"\n\n\"Oh, lots of neat things,\" Alexa said, starting to count off on her fingers. \"Squiggly clay cylinders and tablets, Caribbean plunder, some scary dude's metal skull, a naked wooden chick with small tits, enough Baltic amber to start a war...\"\n\nShe paused and looked at them pointedly. Karen looked up at Mike, and his eyes hardened. \"They'll get it back when Putin is ousted, and fair democratic elections come to Russia, and it can be a trust held by the people. Until then, you'll notice it's safe.\"\n\n\"Well, I can't argue that,\" Alexa sighed, throwing her Millennial indignation out the window. \"But... shouldn't like ninety-nine percent of this stuff be turned over to its country of origin?\"\n\n\"Who, Alli?\" Karen asked, smiling gently. She'd expected this conversation for some time now. \"Sumerian tablets? The Iraqis can't protect them from extremists right now, can they? And for that matter, they're not even ethnically Sumerian. The gold and silver coins from the Spanish Main? Do we break apart the items to determine chemically what region each gold or silver piece is from and then just give it to the locals?\"\n\n\"Well, I...\" Alexa faltered.\n\n\"Who would we give the skull to?\" Karen continued. \"Beijing would end up with it, no question. It still wouldn't be back with its rightful inheritors.\"\n\n\"We not only hold these things in trust for the Blackwell dynasty, as has been done for generations, but also various institutes,\" Mike explained. \"The Royal Ontario Museum, Kingston, Ottawa, Chicago, even London, Paris and Bologna. If they need pieces for a display, we can provide. Hell, we've even loaned out Thunderhawk on occasion.\"\n\n\"Okay, then there was a sword?\" Alexa offered. \"Is it safe to give it back to the French?\"\n\n\"No, the French don't get that sword,\" Mike laughed. \"That is a genuine ancestral heirloom, Alli.\"\n\n\"Y'mean one of my ancestors?\" Alexa asked, somewhat surprised. \"Something in the vault I shouldn't be trying to feel guilty about?\"\n\n\"Michael, where is that book?\" Karen mused, looking around. Mike walked over to a wall and scanned one of the shelves, running his finger along the spines of books and talking to himself. Meanwhile, Alex brought Alexa over to another table and then brought out a heavy, ancient tome contained in a case, putting it down gingerly on the polished wood surface. He put on a pair of thin, transparent gloves.\n\n\"Oh, wow,\" Alexa murmured as Alex opened the case and displayed the leather cover of the book. \"Is that a copy of the Domesday Book?\"\n\n\"Yep,\" Alex said, grinning. \"Grandpa gave it to me for my graduation before going into high school. It's nowhere near as old as the original, but it's probably seventeenth century. He said I was one of maybe three people he knew that would appreciate it. The very first references to anyone named Blackwell are found in here, y'know.\"\n\n\"I've seen the originals at the National Archives in Kew,\" Alexa said quietly, tracing a finger over the cover. \"When mom and I would sneak into London. But I've never touched one before. You can read the Old English, right, Alex?\"\n\nHer husband nodded.\n\n\"Then one day, I want to sit down in here and just listen to you read things to me, and then tell me what they're talking about,\" she said, squeezing his hand. \"I really want to hear your do that.\"\n\n\"As milady wishes,\" Alex said cheerfully, making his mother smile warmly and give him a hug and a kiss on the cheek. She loved how good-natured her son was, Alex was such a DeBourne. It made her proud.\n\n\"Found it,\" Mike announced, pulling another old book off a shelf and holding it firmly but gently. \"C'mon, let's go sit on the comfortable stuff, there's a lot to look over here.\"\n\nThe group made its way over to a small circle of plush chairs, and a chesterfield. Karen took the book and sat in the middle while Alex and Alexa sat on either side of her. Mike eased down into a large, plush chair nearby, while Freja and Jeanie sat on a loveseat together. Karen stroked her hand over the old leather cover gently.\n\n\"It goes back to the late sixteenth century,\" she almost cooed as she gingerly opened the front cover. \"So preserving it has been an ongoing endeavour.\"\n\nShe took some thin, transparent gloves from Mike and put them on before turning any pages. \"It is one of several books that record the ancestry of the Blackwell family. This one in particular deals with connubial bonds on the continent.\"\n\nAlexa smirked. \"I'm surprised a Blackwell ever deigned to marry anyone who wasn't English, from the sounds of us.\"\n\n\"Which is why our mother's name was Gordon,\" Karen said blithely, making Alexa giggle and stick out her tongue. \"But yes, there were many times we married across la Manche.\"\n\n\"Wow, even to the French?\" Alexa queried. After all, apparently a French blade was involved.\n\n\"Silly,\" Karen said as she leafed through the yellowed, often brittle pages. \"Here we are...\"\n\nAlexa leaned in to look while Alex just smiled. He'd been through this book before.\n\n\"This is the owner of the blade,\" Karen explained, and Alexa's eyes went wide with wonder as she looked at an illustration on a page. \"She was a French aristocrat who served as one of the court ladies for Anne of Austria in early decades of the 1600s. But more than that, she was an agent of Anne, renowned for her prowess in espionage, the courtroom, with a blade, and in the bedroom.\"\n\n\"Lady Alexandra d'Assaut,\" Alexa breathed, stunned by the image. The woman was classically beautiful, with a magnificent figure in a court dress, and she had long golden tresses and sea-blue eyes. \"She looks just like me. Is she our ancestor?\"\n\n\"Probably not directly, since there are no records of her marrying and having children,\" Karen replied. \"But her older brother seems to have married a Blackwell in 1636, and they had children. Assuming that she and her older brother looked alike...\"\n\n\"And we have the same name,\" Alexa said, starting to get excited. \"Awesome! A deadly female agent of Anne of Austria, going on daring adventures in her queen's name!\"\n\nShe looked across Karen at her husband. \"Alex, you totally need to start writing stories about her for me! Her adventures, her intrigues, her lovers...\"\n\n\"Like I'm not busy enough with my writing!\" he laughed. \"I can put it on the list.\"\n\n\"Nooooo,\" Alexa whined, getting off the couch and coming to kneel in front of him, taking his arm and holding it in place while she rubbed her large breasts on it. \"You need to do it nowwwwwwwww...\"\n\nAlex sighed. \"I suppose I can push back that Star Blazers story I was working on.\"\n\n\"You do and I'll mop the floor with you,\" Mike warned, giving his son a stern look.\n\n\"And you promised Fre'n me you'd work on that fantasy story where we are part of a sultan's sexy lesbian harem,\" Jeanie pointed out.\n\n\"Ja, do not make me put the hurt on you,\" said the Danish girl, smirking.\n\n\"Mom,\" Alex said, leaning on his mother's shoulder and looking up at her with pleading eyes. \"They're bullying me. Make 'em stop, please? All of 'em? You know you were always my favourite.\"\n\n\"Now all of you, leave my good little boy alone,\" Karen announced firmly, wagging a finger in everyone's direction. \"Don't make life so difficult for him.\"\n\nBefore Alex could say anything else, Karen unbuttoned her blouse and made to fish out her breast. \"Here, darling, are you hungry?\"\n\n\"Oh, jeeeeeeez!\" Alex yelped as he sprang up and hurried away from the gathering, while everyone else wheezed with laughter.\n\nEven Karen couldn't avoid giggling behind her fingers.\n\n***\n\nSt. George Campus, March 1987...\n\nKaren walked down the hallway, frowning as she followed the music. She had her textbooks pressed to her chest and her pleated skirt swirled around her thighs from the steady pace she kept. Someone was playing 'Giant Steps' on a piano, and she wanted to know who.\n\nShe wasn't the least bit surprised when she looked around the corner into one of the music rooms and saw a huge, familiar form in front of the upright piano.\n\nDespite how intently he was playing, Mike paused and turned his head to look at her. \"What? Did you sense of proletarian having fun?\"\n\nKaren made a wry face at the jibe, but otherwise ignored it. She came into the room, still holding her books to herself. \"Why on earth do you know how to do Coltrane changes? Those scare actual jazz musicians.\"\n\nHe shrugged. \"Thought they might be important to know, so I learned them from an old book.\"\n\n\"I was taught Coltrane changes,\" she said, still looking at him, her expression somewhere between curiosity and disbelief. \"You managed to teach them to yourself?\"\n\n\"Yours are no doubt better than mine, Gordon.\"\n\n\"Cleaner, maybe, or more technically precise, but not better, no,\" she said, shaking her head. \"Yours are... genuine in expression, and devoid of artifice.\"\n\n\"That a polite way of saying 'talented amateur'?\" he laughed.\n\n\"No, no, play it again,\" she insisted, coming closer and then looking at the sheet music. \"Play this part here...\"\n\nMike shrugged and did as she asked, playing through the measures indicated while she listened. It was quite enthralling for her.\n\n\"Okay, now listen when I do it,\" she said, shooing him off the old, stout bench. It creaked in protest as he shifted away, but then Karen sat down and centered herself in front of the piano. She had no idea how this would sound, since she happened to know this old beater of an instrument was rather out of tune.\n\nAnd yet DeBourne had sounded fantastic. How? What deep and intrinsic relationship with music did one have to have to make that possible?\n\nUsing the same pages he had, she played the exact same measures while he listened intently. It was the same music, of course, but he couldn't believe how exquisite and perfect every note sounded when she liberated them from the keys. Her fingers fluttered effortlessly across the ivories, her bewitching golden-amber eyes focused like a laser on the sheets in front of her. There was no need to look down at her hand positioning, she was always naturally in the right place, like it was second nature to her.\n\nIt was like she was giving the music wings.\n\nShe finished playing and looked at him, secretly delighted to see the awe in his eyes. She simply nodded. \"Do you see what I mean? There may indeed by a zephyr-like elegance to my style, but there is a raw and primal honesty to yours, DeBourne. And I am in envy of it.\"\n\n\"I dunno what to tell you,\" he said. \"I just do what I do. I expect the music to obey me.\"\n\n\"What it is you do, I want to be able to do it,\" Karen said intently. \"I want to be able to do everything with any instrument I play, and I need to be able to imitate you. It may only be imitation, but no one else needs to know that.\"\n\n\"I suppose you're welcome to listen to me play, or watch me do it, because you're already more technically more proficient than me, so I can't teach you anything,\" Mike said. \"And I'm in awe of your effortless dexterity.\"\n\n\"The same as you told me, watch, and I'm certain you'll have it no time,\" she replied. \"Now that I've solved this mystery, please excuse me, I'm headed elsewhere.\"\n\n\"Hot date?\" Mike asked, smirking.\n\nKaren looked slightly confused. \"No. Why?\"\n\n\"Gordon, that schoolgirl skirt is bordering on scandalous,\" Mike laughed. \"Every guy you pass on campus could very well faint from blood loss to the brain as you walk by. How can you not know that?\"\n\n\"I don't recall saying I was unaware of the effects my current aesthetic has on members of the opposite sex,\" she pointed out. \"Or my own, for that matter. All I said was I don't have a hot date, to borrow your term.\"\n\n\"That's somebody's loss out there, then,\" he chuckled, shaking his head. \"Gordon, you're too formidable for everyone else's good. Go easy on them.\"\n\n\"Duly noted,\" she said, nodding as she stood. Mike had gathered her books up and handed them to her. \"I'll no doubt see you around, but I'm rather busy the next few days.\"\n\n\"Your society girl fashion shoot,\" Mike mused, nodding as he towered over her. He was pleased that their disparity in height no longer seemed to bother her. \"Yeah, everyone's talking about it and hoping to get a peek.\"\n\n\"Splendid,\" she sighed, rolling her eyes. \"Like this won't be annoying enough as it is. They agreed to talk about modern women in science, but I have the distinct feeling that is likely to be glossed over.\"\n\n\"Stick to your guns and make them do it right, Gordon,\" Mike said firmly. \"If you can't make them, then no one can. It's too good an opportunity. Nail it.\"\n\nShe looked up at her fellow student and nodded slowly. She was happy to be holding her books to her chest again, or else she'd be worried that he could see her heart pounding. He didn't mean for it to be an order, but she wanted to take it as one.\n\n\"As you say,\" she agreed. \"Until later, then.\"\n\nShe turned and walked out of the room. Mike watched her leave, unable to tear his eyes away from her, and the way she moved in that skirt. He just stared at the doorway for several seconds after she left before blinking and shaking his head, coming back to himself.\n\nWhat had he been doing in here?\n\nDammit...\n\n***\n\nThe present...\n\n\"If I may interrupt,\" Tatyana said politely, her hands folded in front of her and nodding slightly as she addressed her employers. \"The young mistress has some visitors.\"\n\n\"Eeeee!\" Alexa squeaked excitedly as she leapt to her feet from the chaise she'd been in. Alex, Mike, and Karen looked at her curiously. \"They're here! BRB!\"\n\n\"Now what could that be about?\" Karen mused, Alexa having already hurried out of the room. Tatyana had already left to do something else, so she decided she'd just wait.\n\n\"Normally only me being naked gets her that excited,\" Alex replied. \"I don't know whether to be pleased for her or offended.\"\n\n\"Alex, behave,\" his mother chided. \"Don't talk that way about my baby sister.\"\n\nThey were sitting in one of the small annex rooms and had been discussing its d\u00e9cor when Tatyana had made her announcement. They didn't have to wait long before they heard excited chattering and saw Alexa walking in, leading a small group with her.\n\n\"Well now, it's good to see you all again,\" Mike said genially, standing up, as did Alex. \"Welcome to our abode.\"\n\n\"Alexa, I can't believe you live here!\" gushed Kira, the keyboardist for Alexa's band, the Replicants. She was looking around in wide-eyed awe.\n\n\"Well, it's not like I did anything to earn it,\" Alexa said, blushing slightly. It still felt awkward admitting it to people. \"Just belonged to the right family, I guess.\"\n\n\"Hey, we're all just jelly, babe,\" said Aarie, petting Alexa's arm. She was Chinese and played rhythm guitar. \"This place is off the hook, and that foyer is bigger than my whole apartment.\"\n\n\"You're not the first visitor to say that,\" Alex laughed. \"Now that I know who's here, I'm pretty sure I know what Alexa's up to.\"\n\n\"Hey, it's our fave future roadie!\" Carlotta giggled, giving Alex a hug. \"You're eighteen now, right? Can't exploit child labour, after all.\"\n\n\"Yeah, Charli, she married her underage nephew, just to exploit child labour,\" Alex replied, hugging her back. Predictably, Kira was already hello-hugging Mike and Karen. It was no secret that she'd developed a crush on them both and had already slept with them.\n\n\"When Alexa told us to meet her out here, we were kinda confused,\" Samantha said. She played drums and percussion for the group. \"Kira picked us all up and-\"\n\n\"Oh, God, you all came in the Mystery Machine?\" Alexa exclaimed, trying to not laugh. \"Well, maybe that's not a bad thing, since I wanted to run some things by you.\"\n\nShe turned and looked at Alex, holding out her hand. \"C'mon, roadie. I might need your help.\"\n\nAlex shrugged and took his aunt-wife's hand and they left the room, followed by Alexa's bandmates and then Mike and Karen, who were curious as to what she was up to. She led them all toward the back of the manor, and then toward the stairs heading down to the basements.\n\n\"This place is freaking gigantic,\" Dany said, looking around at the long halls and seemingly endless rooms. \"How old is it?\"\n\n\"It predates the First World War by a few years, it's Edwardian,\" Karen replied, walking hand-in-hand with Michael. \"And I've been told it cost a few million back then, so Heaven only knows what it would be worth today. I've never dared ask, I would probably faint.\"\n\n\"Is that a jacuzzi in a solarium?\" Kira mused. \"Yum yum!\"",
        "\"We'll all try it out afterwards, 'kay?\" Alexa suggested as they began the descent into the basements. They stopped on the first sub-level and made their way into the long, dry hallways. \"Just over here a little bit...\"\n\nShe stopped them in front of one of the doors and opened it, ushering everyone in. They milled around for a moment, looking at the large, completely barren space. There was absolutely nothing except electrical outlets along the walls and various pipes running along the ceiling.\n\n\"Well, thanks for the tour, Lexi,\" Samantha said, making a wry face. \"So, what're we doing here?\"\n\nAlexa smiled, held up her hand and snapped her fingers. Her bandmates gazed at her curiously.\n\nKaren clicked her tongue. They all looked at her.\n\nMike clapped his hands together, the sound barking around the room and making Aarie squeak and jump slightly.\n\n\"I found this room in my wanderings, and if Mike and Kar don't have plans for it, well...\" Alexa began. \"We're always scrounging for practice space where we're not gonna bug anybody, so... what about here?\"\n\nThe girls all looked at her in disbelief.\n\n\"The acoustics are perfect,\" Alexa continued, pressing her case. \"We could add little sound baffles here and there to control noise, and-\"\n\n\"You want us to come and play here? In your giant house?\" Danijela exclaimed. \"Our own dedicated practice space?\"\n\n\"With a post-sesh jacuzzi right upstairs?!\" Kira added, obviously still fixated.\n\n\"Well yeah,\" Alexa reasoned. \"We can set it up how we like it, store all the gear and instruments here for a change, and whenever we wanna practice...\"\n\nShe turned and looked at Mike and her older sister. \"I know you said I have agency here, but... is this okay?\"\n\nKaren smiled warmly. \"Well, we are planning on having a small recording studio just down the hall.\"\n\nAlexa's bandmates looked like they were ready to faint.\n\n\"I'd say we have a deal, mom,\" Alex laughed, catching Aarie before she hit the floor.\n\n***\n\nBack in university, 1987...\n\nMona paused as she saw Janet trudging down the hall, looking rather disgruntled. A young man seemed to be following her, his expression shifting between excited and frightened.\n\n\"Why the cloudy weather?\" Mona asked, tilting her head. She'd finished her courses for the day and was looking forward to relaxing, but whatever was happening with Janet caught her attention.\n\n\"Lost an edgy bet with princess,\" muttered Janet as she stopped in front of her friend and thumbed back at her unwanted companion. \"Now I have to teach this kid how to do a girl in the butt.\"\n\nMona raised an eyebrow. \"As in, do you in the butt.\"\n\n\"Yes, yes,\" Janet sighed testily. \"He's gotta do me in the butt, and he's never been with a girl before. At all. I get to pop his cherry.\"\n\n\"That's... edgy, yeah, but also kind of extreme,\" Mona said warily. \"You could've said no.\"\n\n\"Not after what I told her she had to do if she lost the bet,\" Janet replied. \"A bet's a bet, and we both agreed to the wagers beforehand. You know her, she wasn't about to back down.\"\n\n\"True enough,\" Mona agreed. Karen rarely made bets, but when she did, there was no danger of her backing down. She was probably also cheating, since she'd no doubt done the math and the odds in her head already at frightening speed. \"So where's this going down?\"\n\n\"Her room,\" Janet grunted. \"She's gonna be there, to make sure it happens. Heyman's gonna be there, and you're supposed to come as well.\"\n\n\"Me?\" Mona exclaimed a little loudly. \"Why do I have to be there? Why on earth would I wanna watched a scrawny white kid fuck you in the butt?\"\n\n\"I don't know, I'm just following orders,\" Janet said in exasperation. \"You can... you can bring your art supplies and sketch whatever the Hell happens, practice for your erotic art courses. Please just come along already.\"\n\n\"Fiiiiine,\" Mona said, rolling her eyes. \"I gotta get some stuff from my room, then. I'll meet you up there. Don't start without me. Or do. I dunno. I can't tell if I'm gonna miss much.\"\n\n\"Har har,\" Janet said sullenly before looking back at the kid. \"C'mon, gerbil, let's get this over with...\"\n\nMona watched her friend leave, the boy in tow. She shook her head, rather certain that 'erotic' was not likely to be a factor in whatever she managed to draw from this.\n\n\"Why do I feel like I'm about to watch Wally Cleaver try and pack fudge?\" she sighed as she headed back to her dorm room.\n\nFifteen minutes later...\n\nMona was sitting on a pillow on the floor of Karen and Lisa's dorm room, looking at her subject and then down at the pad in her lap, sketching intently with charcoal. Nearby, on her bed, Lisa was looking at something with a rather wry expression, as if she wasn't exactly sure she understood what was happening. She had the soles her feet pressed together and was clasping them, bouncing her knees while she watched.\n\n\"Are we absolutely certain this is how it's supposed to work?\" she queried. \"Because not to kiss'n'tell, but this isn't anything like what happens when Kar does me in the butt with Nero.\"\n\nJanet looked up from where she was kneeling on all fours in the middle of the floor, buck naked and on display. Behind her was kneeling the scrawny kid she was supposed to be getting sodomised by, but he seemed to be having some technical difficulties, having not really moved past the stage of getting naked and kneeling behind her.\n\n\"Nero?\" she asked.\n\n\"Yeah, the Roman emperor Nero,\" Lisa said, nodding. \"Y'know, the royal pain in the ass for the Jewish people.\"\n\n\"Had to ask...\" Janet said, shaking her head in despair. \"Hey, gerbil, are we doing this any time this week? I've gotta go watch paint dry before long.\"\n\n\"Just... gimme a minute,\" he said, flustered. \"I'm kinda nervous here!\"\n\nKaren looked up from her folder for a moment, almost feeling sorry for him. She sure hoped he was a grower, because he definitely wasn't a shower. Then again, he probably had the worst case ever of the virgin yips right now, which was completely understandable. His first time having sex, and it was almost a command performance in front of a group of women?\n\n\"Relax, Steven,\" she said easily, smiling as she rested her elbow on the arm of her chair and touched her chin with her fingertips. \"You have nothing to worry about, you're in good hands.\"\n\n\"H-how'd you know my name was Steven?\" he asked, looking over at her.\n\n\"Yeah, how?\" Janet asked, looking over her shoulder at Karen suspiciously.\n\n\"It's stitched into his underwear,\" Karen mentioned casually, pointing at the pair of tighty-whities on the floor beside him.\n\n\"Oh, goddammit...\" Janet groused, looking straight forward in exasperation toward Lisa's bed. \"You fucking kidding me? Mommy stitched your name into your undies?\"\n\n\"Ignore her, Steven, and relax,\" Karen said soothingly. \"You don't need to pay attention to any part of her except her behind, after all.\"\n\n\"Y-yeah...\" he said, nodding as he finally took hold of her hips, moving forward so that his flaccid cock was pushed against her ass cheeks.\n\n\"Just think about it,\" Karen continued. \"Do this right, and you'll have a great story to brag to all your friends about.\"\n\n\"Hey, that's true,\" Steven said, perking up. \"They'll all be so jealous!\"\n\n\"Wait a damn minute!\" Janet said hotly, almost moving away from her assigned position, but ultimately staying in place because she knew Karen would just put her back. \"We never said anything about him getting to tell people!\"\n\n\"We never said he couldn't, either,\" Karen pointed out. \"My bet was with you, not him. And that bet said that you taught him how to have anal sex.\"\n\n\"Oh, for-\" Janet strained, balling her hands into fists in the towel she was kneeling on. \"This is horseshit!\"\n\n\"I'm sorry to hear you feel that way,\" Karen said with feigned sympathy. \"It'll be a tragic thing when Steven here goes and tells all his friends that his sex experience with Janet Remington was a total disaster.\"\n\n\"Ooh, damn, girl,\" Mona said, looking up from her pad at Karen. \"You play hardball, don't you? Slandering her reputation as a competent slut.\"\n\n\"You don't want to know what the stakes were if I lost,\" Karen mentioned.\n\n\"Yeah, you really don't,\" Janet sighed, hanging her head in defeat. \"Fine, let's... let's get this kid laid...\"\n\nShe turned to look back at the skinny kid behind her. \"All right, ummm... look, grab that tube of lube beside you, okay? Then take a bit and smear it all over your dick. Not too much, or you won't feel anything.\"\n\n\"That didn't sound good,\" Lisa quipped, making Mona snicker. Even Karen smirked and pressed her fingers to her lips. Janet just gave the redhead a sour look.\n\n\"Oh, can it, Heyman,\" Janet grumbled. \"It could be you kneeling here if you'd lost a bet.\"\n\n\"Kar wouldn't ever do that to me,\" Lisa sniffed, her nose in the air. \"Would you, Kar?\"\n\nKaren didn't answer because she'd already gone back to leafing through the pages in her folder.\n\n\"Kar?\" Lisa queried rather nervously. \"Y'wouldn't make me have bum sex with an icky boy, would you?\"\n\n\"Eh,\" Karen said in a noncommittal voice. \"Let's just agree to not make any edgy bets soon, okay?\"\n\nLisa swallowed and went back to watching Janet try to instruct the skinny virgin about how to grease his dick to have sex. Steven had managed to get the top of the tube open and was now squeezing what he hoped was the right amount of Abelene into his hand.\n\n\"Well, that's plenty,\" Janet said dryly. \"So, um... I guess now just spread it on yourself the way you'd put soap all over your dick when you shower. You've got more than enough there.\"\n\nSteven reached down and began smearing lube all over his crotch with both hands. To his distress, he didn't get an erection from putting it on. He looked at Janet uncertainly.\n\n\"Well, the bet didn't involve me blowing you, and I hate the taste of Abelene, so that ain't happening,\" she muttered. \"So I guess we'll just have to get you hard another way. Take hold of my hips, kid.\"\n\nSteven did as instructed, putting his hands on her hips tentatively. \"Like this?\"\n\n\"Yeah, sure,\" Janet answered in a vaguely bored voice. \"Now, press in with your hips and begin sliding your dick up and down against my ass. Yeah, like that, it- no, slow down, dammit, you're not trying to start a fire with kindling...\"\n\nJanet looked forward and rolled her eyes in resignation. Her entire groin was already slippery with Abelene because of how much he'd used. Her crotch would reek of it for days unless she took at least three showers.\n\n\"Slow down,\" she said in what she hoped was a patient voice. \"Yep, slower... slower... it's not a race. No, don't tense up, you'll blow your load before you even get it in me, and there's no second chances, no matter what princess tells you.\"\n\n\"Relax, Steven,\" Karen said, wanting some form of progress to happen so that she could get on with studying her schedule for the shoot. \"I want you to stroke up and down along her behind with the cadence of my voice, do you understand?\"\n\n\"Yes'm,\" he said, trying to steady himself while looking over at the golden-eyed goddess. Jeez, why couldn't it be her he was fucking? \"I'm listening.\"\n\n\"Now,\" Karen continued. \"Push in and up, slowwwwwwwwly... good... and now back down, slowwwww...\"\n\nSteven did his best to regulate himself, listening to what she said.\n\n\"Up...\" she said gently, watching intently. \"And down, nice and slow. Good...\"\n\nLisa just watched intently, while Mona sketched away, trying to catch anything remotely useful, given that sex wasn't even being had yet. Janet just held still and stifled a yawn, feeling very slippery and sticky. Why had she made this damn bet at all? She should have known better by now than to play the odds against Karen Gordon.\n\n\"There, doesn't that feel nice?\" Karen said pleasantly.\n\n\"Yeah... yeah, it does,\" Steven replied, pleased as he continued to slide his wiener between Janet's buns and began getting an erection. \"It does feel nice!\"\n\n\"Speak for yourself,\" Janet grumbled, still looking forward.\n\n\"Zip it, Remington,\" Karen warned in an authoritative tone. \"Or I'll spit-roast you by having Heyman plug your mouth with Nero.\"\n\n\"Ooh, ick,\" Lisa said, squirming slightly at the thought. \"Nero's been in my butt, Janet, y'probably don't want that.\"\n\n\"Y'think?!?\" Janet groused, glaring at the redhead.\n\n\"See, you're aroused,\" Karen encouraged, noticing that Steven now had a solid hard-on. He was a shower, seemingly, but that didn't amount to more than an average member with him. Whatever, it would do the trick. \"Now you need to get Janet ready as well, before you put it in.\"\n\n\"Jeez, you're gonna make him finger my ass?\" Janet complained.\n\n\"Remember what happened the last time you let a guy lube himself but not your orifice before he put it in?\" Karen pointed out. \"You walked crooked for three days.\"\n\n\"Oh, let's just get this over with,\" Janet said testily. \"Do what you need to do.\"\n\n\"Steven, get your middle finger nice and slippery with the lube you've- yes, good...\" Karen continued. \"Okay, now... very gently place the tip of your finger against her opening... yes, that's right...\"\n\n\"Don't forget to give him a banana sticker when he's done...\" Janet muttered under her breath, making Mona and Lisa snicker.\n\n\"Now wiggle it in, slowly...\" Karen said in a gentle voice.\n\nSteven did as he was told, wiggling and pushing his finger forward into her. Janet pursed her lips and frowned slightly. He pushed past the first knuckle, and then reached the second. Finally, he was in to the bottom knuckle. He paused and looked at Karen for his next orders.\n\n\"Okay, now begin pushing slowly back and forth.\" Karen instructed. \"Slowwwwly...\"\n\nLisa was trying not to giggle, because Janet was clearly bored, rolling her eyes. \"When he gets around to fucking me, I hope I notice a difference.\"\n\n\"Oh yeah, you'll notice,\" Steven declared, apparently starting to feel his oats. He was still sliding his cock up and down between her butt cheeks while he fingered her. \"You're gonna notice all right.\"\n\nJanet raised an eyebrow at his statement, looking at Mona, and then at Lisa, who just shrugged. This was decidedly outside her realm of experience. Janet sighed and rested her elbow on the floor and her chin on her hand, ripple-tapping the fingers of her other hand impatiently.\n\n\"Now,\" Karen instructed. \"You can put it in, but don't push too hard or too fast, you don't want to hurt yourself.\"\n\nJanet's eyes widened, while her two friends dutifully ignored the statement. \"Princess, when we're done here...\" she growled.\n\n\"What?\" Karen asked, looking at her friend. \"You'll ask for pointers on how to not lose a bet?\"\n\nJanet was about to reply, when she felt Steven remove his finger from her butt and start pressing the head of his cock against her opening in its place. She bit her lip and crossed her eyes as she frowned as he pushed through the ring inexpertly. \"Hey, slow down, Andretti!\"\n\n\"Don't worry, you'll like it soon enough,\" he breathed as he relished the feeling of her tight ass around his shaft. So this is what it was like to fuck! He'd never get enough now. \"Yeah, you'll like it.\"\n\n\"Oh, Jesus...\" Janet mumbled to herself in despair.\n\n\"Y'gotta admit, his misplaced confidence is kinda cute and refreshing,\" Lisa observed, causing Mona to quickly put down her charcoal as she began snickering.\n\n\"God, I love you, Heyman,\" the black girl said. \"But lemme catch this moment, Janet's face is just priceless.\"\n\n\"I'm sure it is,\" Janet mumbled, her body rocking back and forth slightly now that Steven had his dick all the way inside her and was beginning to pump back and forth. Could this day get any longer or thinner?\n\n\"Yeah, y'like that?\" Steven panted, smiling evilly at Janet's back. \"Take it all, slut.\"\n\n\"Excuse me?!\" Janet demanded, starting to turn around to glower at the skinny boy fucking her, but Steven suddenly reached forward and grabbed her by the back of the neck, pinning her in place. Janet's eyes were wide as she looked at Lisa in shock.\n\nMona was blinking at what she was seeing. Lisa didn't seem to know what to say. Even Karen looked rather bemused, just watching intently.\n\n\"I'm going to kill him,\" Janet said softly in Lisa's direction, her eyes flashing with outrage as he kept hold of the back of her neck. Was this really happening? \"I'm going to eat him, drive out to Scarborough, and crap him off the bluffs...\"\n\n\"How y'like me now, bitch?\" Steven said eagerly as he slapped his hand across Janet's ass. Lisa winced at the sound, while Janet's eyes snapped wide at the sensation and her body stiffened. \"Yeah, it's good, isn't it?\"\n\n\"Ummmm, does sex always make boys quite this stupid and suicidal?\" Lisa queried, not liking Steven's odds of leaving the room alive.\n\n\"I'm beginnin' to think maybe you and Princess are onto something with the whole lesbian shtick,\" Mona replied, watching the debacle in front of her with a wry expression. She wasn't actually concerned for Janet, but getting the blood out of this expensive-looking carpet that Karen had put down...\n\nThere was a knock at the door.\n\n\"Come in,\" Karen said unconcernedly.\n\n\"Aw, c'mon!\" Janet complained loudly as the door opened, scowling back at Karen now. \"Y'gonna let just anybody walk in and see me like-\"\n\nThere was huge presence in the room, and even Steven slowed up, turning to look at the newcomer. Lisa shrank down on herself, while Mona put her charcoal down again and folded her hands in her lap. Even Janet seemed rather unsettled when she saw who'd come in. Only Karen remained unaffected by the arrival.\n\nMike towered over everyone, assessing the situation quietly. Steven kept pumping his hips slowly, pushing his dick in and out of Janet's ass. Several seconds passed before the giant student spoke.\n\n\"Great,\" he said in his booming bass-baritone voice, looking down at Janet and closing the door behind himself. \"Now I'll have to boil her before I can use her again.\"\n\n\"Hey now!\" Janet protested, finally finding her voice. \"That's your big concern here?\"\n\n\"Do I even want to know?\" Mike asked.\n\n\"Probably not...\" Janet sighed, going back to resting her chin on her hands and looking forward dully.\n\nMike looked over at Karen, his eyebrow raised.\n\n\"Why are you looking at me like this is somehow my doing?\" Karen asked somewhat defensively.\n\n\"A skinny freshman is drilling for oil in Remington's behind, in your room, while Heyman looks clueless and Bresciani can't decide if she's horrified or should be drawing. This could only be traced back to you, Gordon. The route to this point boggles the mind, and it always does when you're involved.\"\n\n\"Not always,\" Karen pushed back, blushing slightly. \"I mean, the scam with the Chinese businessmen a few weeks ago might have been slightly overcomplicated...\"\n\n\"Slightly overcomplicated?\" Mike exclaimed, fixing her with a look. \"Gordon, the only thing missing from that plan was a sign that said 'Free Bird Seed'. Overcomplicated doesn't begin to describe it.\"\n\n\"We pulled it off, didn't we?\" Karen pointed out. She and Mike had apparently forgotten about Janet getting skewered in the middle of the floor while they vied for moral dominance in a much larger war. \"Granted, you proved to have some use and facility, but-\"\n\n\"Are you two done?\" Janet groused, thoroughly fed up with how her day was going. \"I'm kinda in the middle of something here!\"\n\nMike paused in his jousting with Karen and looked down at Janet. \"Do you need something fixed, Remington?\"\n\n\"Hey, pal, you can just wait your turn!\" Steven panted, apparently so high on oxytocin that he had forgotten that Mike weighed three times more than him and was a full head and shoulders taller. \"Get to back of the line and wait while a real man does his- GRRK!\"",
        "At this point, Mike had reached down and his huge hand had latched onto the back of Steven's skinny neck. Mike then began to pull up, lifting Steven off the floor. The first-year hands scrabbled to hold on to Janet, but he lost his grip because of all the lube smeared on her.\n\n\"Hey, ow-ow-ow-wow-WOW-WOWWWW!\" Janet protested as her backside began to lift off the floor, since Steven was still inside her. He came out with a loud 'POP!' and Janet yelped in alarm and flopped on the floor, trembling and with eyes wide. Lisa winced and looked away, while Mona just muttered 'Dayum...' under her breath while frowning.\n\n\"Heyman, open the door,\" Mike ordered. The redhead squeaked and scrambled off her bed, scurrying over to the door and opening it before trying to hide behind it. Mike, still holding Steven by the neck, turned and tossed him through the door and into the hallway. The naked student gasped and whined in panic, trying desperately to cover himself while dashing down the hallway.\n\nThey could hear several girls shrieking in shock or laughing.\n\n\"Was that really necessary?\" Karen asked, standing now and staring at Mike, her hands on her hips to indicate she was displeased.\n\n\"And what would've happened to him if it had been you he'd mouthed off to?\" Mike pointed out, looking back at her levelly.\n\n\"... okay, you have a point there,\" Karen allowed, dropping her hands from her hips. \"But what am I supposed to do with his clothes now? I don't want to touch them.\"\n\n\"Could we perhaps address the matter of my potentially prolapsed sphincter here, people?\" Janet complained, still lying on the floor.\n\n\"Oh, you're fine,\" Karen said dismissively, waving in her friend's general direction. \"You've bragged about taking DeBourne back there, and his manhood is bigger than that kid's neck.\"\n\n\"And why would you know that?\" Janet almost hissed accusingly.\n\n\"I've walked in on the two of you several times,\" Karen replied, before beginning to count on her fingers. \"I've seen him nude modelling for the art department, not to mention Mona... I had him fitted for a suit... I've seen him naked in one of my hot tubs back home before you impaled yourself on him, and-\"\n\n\"All right, all right,\" Janet sighed loudly, rolling her eyes. \"Doesn't change the fact that I nearly got turned inside-out here, y'know?\"\n\n\"What brings you to my room, by the way?\" Karen queried, going back to ignoring Janet. \"I somehow doubt you were sizing up your sexual competition for her.\"\n\nJanet just groaned and buried her face in her hands. Mona leaned in and patted her hair sympathetically.\n\n\"I came to see if you were joining us for the initial run-through of the H6 laser compactification experiment,\" Mike said. \"It's tomorrow at thirteen-hundred in Lab 8D.\"\n\n\"I remember, and I am afraid I must decline,\" Karen said. \"I have a prior engagement.\"\n\n\"Oh, right, your initial interview for the magazine,\" Mike said, nodding. \"Fair enough, it's not crucial. It's just a background test. But I'll be sure to take thorough notes for you.\"\n\n\"I do appreciate that,\" she sighed. \"To be honest, I find this rather irksome.\"\n\n\"Yeah, why would anyone wanna be the subject of a glam shoot in a high society magazine?\" Lisa said, still hiding behind the door. \"Talk about annoying and inconvenient.\"\n\n\"I've done them before, and if I could let you take my place, I happily would,\" Karen almost groused. \"Thank you, sir, for the message and the offer. As penance for your interruption of the proceedings here, would you be so kind as to drop Remington off at her room?\"\n\n\"What is it with you and penance?\" Mike muttered, reaching down and scooping up a very naked Janet and tucking her under his arm. She just hung there, scowling with her arms folded. \"You let me in, after all...\"\n\nHe turned and stood in the doorway before his voice boomed up and down the hallway.\n\n\"EVERYONE IN THEIR ROOMS AND CLOSE YOUR DOORS!\" he thundered. \"DON'T OPEN THEM UNTIL I TELL YOU TO!\"\n\nEvery student and student rep in the entire place heard the voice and knew who it belonged to. They dutifully complied, knowing that if DeBourne wanted empty halls and complete privacy, there was some strangely ethical reason for it, and they were just better off not knowing. He heard multiple doors close firmly before turning and looking at the girls and nodding to them. He then went out into the hallway and headed off, Janet still tucked firmly under his massive arm.\n\nLisa closed the door and sighed, leaning against it. \"Even for us, that was weird.\"\n\n\"I can't imagine Janet being happy about being carted around like a sack of potatoes, even by DeBourne,\" Mona mentioned.\n\n\"Eh, you get used to it,\" Lisa said. For a devout lesbian, she had spent an absurd amount of time being carried around by Mike, very often naked, the most recent occasion having been two weeks earlier when she was condemned to drink pickle brine in order to deal with a massive hangover and her resulting temper tantrum. \"At least you get places quick.\"\n\nMona giggled, because Karen was the tallest at nearly six feet, and Lisa was not quite five feet and three inches, barely reaching DeBourne's sternum. Mike had pointed out to Lisa once that even Wolverine from Marvel Comics was taller than her, and she didn't know why, but that had irked her mightily.\n\n\"He is amazingly patient with us, y'know that, right?\" Mona mused as she stood up. Without Janet getting fucked in the ass, there wasn't anything right now to sketch. True, she could've asked Karen to model for her, but Princess was busy getting ready for her own thing, and Mona respectfully gave her time and distance.\n\n\"It's my understanding that the largest males in most simian species tend to be very tolerant of shenanigans within their tribe,\" Karen answered unconcernedly. \"At least until someone gets mouthy and out of line.\"\n\n\"What're you looking at me for?\" Lisa said defensively. \"I'm not the one always challenging him!\"\n\n\"Are we his little tribe now?\" Mona laughed. \"Could be worse, I suppose. I've got a feeling li'l Steven has gotten the boot, for trying to steal bananas.\"\n\n\"And guess where he was tryin' to hide 'em?\" Lisa quipped, making her friends break out laughing.\n\n***\n\nBlackwell Manor, present day...\n\n\"Well, hello, Glenda,\" Karen said as she walked with her husband into the foyer, having been asked by Alexa to meet her there. \"I take it you were carting Alli around on some mission?\"\n\n\"Well, 'carting' might be a somewhat rough term for it, ma'am, I'm always happy to do my bit,\" Glenda said pleasantly, nodding her head as the couple approached. \"And she is so very excited about what she accomplished. The Bentley is out front, she insisted on bringing in her purchase herself.\"\n\nKaren turned and looked up at her husband somewhat warily.\n\n\"Don't look at me,\" Mike said, shrugging. \"I'm not the one who gave her a Blackwell expense card to spite your family.\"\n\n\"Hi!\" Alexa chimed excitedly as she came in, holding a large crate. \"Where's Alex?\"\n\n\"Right here, don't get your nonexistent panties in a twist,\" Alex laughed as he emerged from another hall. \"Y'find something?\"\n\n\"Did I ever!\" his wife gushed, her sapphire eyes dancing with delight, holding up her large box. \"Help me here!\"\n\nTrilby and Valentina both happened by and paused, looking to see what was happening. They were well ahead of their daily schedule, and thought it might be okay to peek in on the action.\n\n\"So I had Glenda drive me down to the shelter,\" Alexa explained as she lowered the box to the floor. It had a carrying handle and breathing holes. Karen was wondering if her little sister had brought home a Tasmanian devil.\n\nOr a velociraptor.\n\nAlexa unhinged the lid while Alex braced the box. She reached inside and lifted out a ball of fur, cooing and hugging it close before turning it around and presenting it to everyone.\n\n\"Guys, say hello to Morgenmuffel.\"\n\nIt was a cat, of sorts. The animal hung rather limply in her arms, staring at them all. One of his eyes was green, the other was yellow, and had a squint to it. His spastic fur seemed to naturally stick out in all directions, and was a chaotic panoply of greys, browns, oranges, and blacks. One long tooth stuck outside of his mouth and glinted in the light.\n\nThe cat made a phlegmy, scratching sound as it tried to meow.\n\n\"Alli, he's wonderful,\" Karen breathed, smiling. \"What led you to find him?\"\n\nAlexa hugged her new companion to herself as she beamed. \"I just... I decided that I should get a rescue, and while I was walking around, I just looked inside one of the compartments and saw him. He just looked back at me, and I could tell he wanted me to give him a hug.\"\n\n\"He does indeed look huggable,\" Mike agreed.\n\n\"So they opened his compartment and they let me reach in and take him out,\" Alexa continued. \"And he began purring immediately, and loudly. He snuggled into me and rubbed on my chin and I just burst into tears. I knew I had to bring him home.\"\n\n\"He does have a big purr on him,\" Alex said as Alexa handed the cat to him. Morgenmuffel didn't seem to mind a bit, lying in Alex's arms and still purring. \"Oh, he's a big suck, isn't he?\"\n\n\"That's what they said at the shelter, nicest fuzzball they ever had, but nobody wanted him because of his screwed-up looks,\" Alexa said, gently stroking Morgenmuffel's tail. \"Their loss, he's the bestest kitty ever. And apparently he loves everybody.\"\n\n\"I'll go get his supplies outta the car,\" Alex said, handing the cat back to his wife before standing and heading out, followed by Glenda. \"Gonna be interesting to see how he acclimates.\"\n\n\"Here, Kar, he really needs to know you,\" Alexa said gently before handing the furball to her older sister. Without hesitation, Karen began cradling him and stroking under his chin. Morgenmuffel responded by hugging her hand and continuing to purr loudly.\n\n\"Goodness, you just love everyone, don't you?\" Karen cooed, smiling down at him. \"Well don't worry, I'll make sure that everyone knows you have run of the place, but I think you'd best speak with Theresa about where you're allowed to be in the kitchen.\"\n\n\"Eeeee, may I, Mrs. DeBourne?\" Val squeaked, almost dancing back and forth from foot to foot as she waited her turn. Karen nodded and handed the cat over to Valentina, who looked like she was about to faint in delight. Trilby stood nearby, smiling and shaking her head.\n\n\"Well, his dance card is going to be full for a few days,\" Mike chuckled. \"But since we happen to have the two of them here...\"\n\n\"Oh, right,\" Karen agreed, turning to look at her two housekeepers. \"Trilby, Miss Prospero, do you have a moment to answer a question or two?\"\n\nThe girls both curtsied respectfully, even while Val was holding Morgenmuffel.\n\n\"Bien,\" Karen said while Mike and Alexa stood beside her. \"As you are aware, we are having a housewarming later this spring, yes?\"\n\nThe both nodded. Morgenmuffel kept on purring.\n\n\"There is going to be another housewarming after that,\" the bronze-haired woman explained. \"Of a rather more... intimate or perhaps scandalous nature?\"\n\n\"A naughty housewarming?\" Trilby mused, smirking.\n\n\"Mrs. DeBourne,\" Valentina giggled. \"Are you holding an orgy?\"\n\n\"No, nothing quite as depraved as that, I think,\" Karen replied, holding up a staying hand. \"Although with my little sister, Freja and Jeanie in the mix, you can never be certain.\"\n\nShe turned her head and fixed her sister with a look. Alexa quietly glanced at the ceiling.\n\n\"In any event,\" Karen continued, \"I informed Tatyana that I would ask each staff member individually if they felt like participating in that little soiree. It may not be to everyone's taste, and those who opt out will have the full day off with a bonus.\"\n\n\"Is there a bonus for staying on and working this shindig?\" Trilby asked.\n\n\"Of course.\"\n\n\"So I'll get paid for working or paid for not working?\" the hippie girl mused. \"So the big difference is whether I wanna work at this sexy party or not.\"\n\n\"That's the gist of it, yes.\"\n\nTrilby looked at Valentina, who put up her hand, asking for permission to speak. Karen nodded.\n\n\"Ummm... if I do, can I at least have a little French maid outfit that's cuter and sexier than this thing?\"\n\nKaren looked up at Mike and smirked, while he chuckled. \"Miss Prospero, if it's that big a deal for you, then we'll have a quality scandalous French maid outfit fabricated for you, and you can not only wear it that night, but during your regular days, as long as we have no visitors of note inbound, as determined by Tatyana. Do we have a deal?\"\n\n\"Yes! I'm in!\" squeaked the perky brunette, bouncing up and down excitedly, causing Morgenmuffel to mewl a protest at the sudden movement, clasping onto her forearm.\n\n\"Well, I can't let Bubbles have all the fun,\" Trilby sighed. \"Sign me up. Do I get one of those outfits too?\"\n\n\"If that's what you want,\" Mike said, nodding. \"You'll be told more about your assignments that night, in the near future, once we know who we have to work with. Miss Prospero, give Alli back her cat, please, and then you're both dismissed.\"\n\n\"Oops!\" Val said, giving the parcel back to Alexa. \"Thank you, ma'am! Sir!\"\n\nShe curtsied and hurried off, followed more casually by Trilby. There was still work to be done, after all. Alexa was already caressing her new bestie and whispering to him.\n\n\"Alli, why don't you show our new family member around, while Michael and I extend offers to the other staff?\" Karen suggested. Alexa nodded eagerly and wandered off. Karen took her husband's hand and they began a casual stroll, seeking out their next likely volunteer.\n\nOutside...\n\n\"Are we keeping you busy enough?\" Alex asked as he walked down the small flight of front steps with Glenda and up to the Bentley.\n\n\"It's early in my employment period, we're just settling into things,\" she replied, smiling at him. \"And Mister Winson intimated to me during my interview that I would spend more time driving you and your aunt or the other staff members around than I did your parents, barring important social events. And I don't mind at all, because we seem like a big family here. It's a nice change from forced formality.\"\n\n\"I'm glad,\" Alex said as Glenda popped the trunk lid and he began pulling out the Morgenmuffel supplies. \"I really like this crew we've assembled. Everyone seems at ease and everyone works well together.\"\n\nShe smiled and nodded. \"I am enjoying the casual feel of it. Most wealthy families I've worked for in the past are much more... neurotic, I guess. And very pretentious.\"\n\n\"My apologies in advance if you ever have to cart around any of my Blackwell family members then,\" he chuckled. \"Dad told me that he mentioned to you about Alexa and myself and you were totally cool with it. Thanks.\"\n\nShe nodded pleasantly. \"Love is love, Mister DeBourne.\"\n\n\"I'm glad you think so, but please just call me Alex.\"\n\n\"I'll make a deal with you,\" she said. \"I'll call you Alex, but only if you call me Glenda, okay? You can reserve using my last name for formal occasions. Sound good?\"\n\n\"I'll manage it somehow, Glenda!\" he laughed.\n\n***\n\nBack on campus, 1987...\n\n\"So you said they're supposed to meet you here?\" Lisa asked as she stood with her roomie in the foyer of the building that was their dorm. It was early March, and the weather had turned pleasantly mild for this time of year.\n\nKaren nodded. \"Some five minutes from now. Once they're here, we'll discuss where we want the various sets of pictures taken. Yes, I'll no doubt have to give them a few fluff photos, but I admit I'm looking forward to the lab shots, and demonstrating new, broadly normal careers for women of any standing.\"\n\nLisa nodded. \"Women scientists who aren't mousy nerds who will never see a man's penis?\"\n\nKaren shook her head. \"I was more thinking more about how women from my social stratum are not doomed to remain courtesans and debutantes, or at best sinecure corporate executives. Real jobs in the scientific fields, because we have brains that can conceive of numbers and theorems.\"\n\nHer roomie giggled. \"I dunno how you managed to make being obscenely wealthy always sound so dismal.\"\n\nThe bronze-haired girl shrugged. \"It sounds silly to say, but women are born into wealthy families all the time and will never have any true agency over their lives, darling. And while a life of luxury sounds like fantastic compensation, I'll be the first to tell you that if I had to choose between all the wealth on earth, or living my dream of being a renowned physicist, I would always pick the latter. To quote the inestimable Jessye Norman, 'Pigeonholes are for pigeons.'\"\n\n\"Guess you're lucky you don't have to choose then,\" Lisa quipped, patting her lover's behind and then sauntering off. \"I'll catch up with you later, lemme know how it goes!\"\n\n\"Of course I will,\" Karen said, waving at Lisa's retreating back. She smiled and shook her head. She wondered how ridiculous it must have sounded that she envied her friends once in a while. Ambition and hard work earned them their places here at the university, overcoming obstacles Karen had never faced. True, none of them were pioneers in their chosen fields- Mona was by no means the first woman animator, and women lawyers were commonplace these days. And social work and activism had been female domains for almost a century now.\n\nKaren's social position would have assured her a place in the university as long as she was functionally literate. Yes, her grades were off the charts, they always had been. And of course she earned her place here based on merit. Still, it irked her somewhat that there was little to no uncertainty one way or the other about her placement.\n\nHer mind flashed to DeBourne, and what things must have been like for him. Never had she met anyone so driven simply by existing. She'd been taught to excel in all things, to always push herself. She'd always had the means, resources, and freedom to do so.\n\nBut to be born into such uncertain circumstances, from such humble roots, and be driven by your very nature to learn and know as much as possible, it almost felt like a type of constraint she would have found maddening. Her whole life, she'd been presented with challenges, expected to overcome them, and done so handily. Most people would have cracked from the pressure.\n\nShe wondered what DeBourne would have been capable of if he'd been reared in her circumstances. The thought almost frightened her.\n\nWho would she have been if she'd been brought up in his circumstances, poor, but free to do exactly as she chose?\n\nThe door opened and a gust of cool air rushed in, snapping her out of her indulgent reverie. Four people came in, all of them looking slightly out of breath and a little chilled. Two women and two men, all of whom had the air of tradespeople about them. They stopped upon seeing her.\n\n\"You must be Karen Gordon?\" asked the woman who stood near the front of the group. \"I'm Cheryl, we're the crew from Ville et Campagne.\"\n\n\"I am indeed, and it's my pleasure,\" Karen said, coming forward and shaking the woman's hand. She took no notice of them all staring at her. It wasn't like she wasn't used to it, after all, for she had been on campus for nearly two years now, and people still gawped at the sight of her. She shook the hands of the other visitors. \"That means you're Peter, you're Anderson, and you're Beth, yes?\"\n\n\"You know us?\" asked the woman named Beth.\n\n\"I've seen your work in the magazine, you seem to work together frequently,\" Karen replied. \"More than that, I was told to expect you four specifically when your office contacted me last week. Please, come and we'll find one of the study halls to chat in. The dorm rooms can be rather snug.\"\n\n\"I've been to your family's place before,\" mentioned the man named Anderson. \"You choose to live here on campus when you could just commute from the Bridle Path?\"",
        "\"I enjoy the freedom is affords me,\" Karen said simply, leading them into a study hall she already knew wasn't currently in use. \"In here, please.\"\n\nShe gestured for them to sit in some chairs arranged (mysteriously conveniently) in a circle at one end of the room, and sat down once they were all comfortable. \"Thank you, by the way, for this opportunity. I am looking forward to it.\"\n\n\"You've done shoots for us before, haven't you?\" Cheryl asked as she looked around the hall, as if she was assessing it.\n\n\"Well, when I was much younger, admittedly,\" Karen said, smiling. \"Your magazine did a piece at Blackwell Manor about my parents, and also out at my boarding school about the girls there.\"\n\n\"Well, we have four days to get all of our shots, and we can try and work around your class schedule, but I make no promises,\" Cheryl stated. \"If we're pressed for time, are you able to cut corners on class or miss one?\"\n\n\"Well, I... yes,\" Karen said rather hesitantly. \"I try not to, of course. Four days seems like a long time.\"\n\n\"We're being mindful of your workload, and the magazine spaced it out,\" Cheryl explained. \"Before we came to meet you, we took a walk around various buildings to help determine where the best lighting and shots would be for what we have planned. We have your wardrobe for each day back in our hotel, and we can-\"\n\n\"I apologize for interrupting, but you have already scouted out your shoot locations?\" Karen asked. \"And my wardrobe?\"\n\n\"We might have to rethink some wardrobe ideas,\" Cheryl replied, smiling genially. \"To be honest, I don't think we expect you to look... well... like you.\"\n\nKaren's tone was just polite enough. \"Oh. Please elucidate.\"\n\nCheryl looked at Beth, who now took over. \"Miss Gordon, would you please stand?\"\n\nKaren obligingly stood. It suddenly occurred to her that she was taller than everyone on the crew except Anderson. She was wearing snug jeans and a form-fitting cr\u00e8me-coloured cashmere sweater. Beth walked around her while the others looked on, trying not to gape. Karen almost never felt self-conscious about her height or her figure, but there was a twinge of it now.\n\n\"If I may be indelicate, my dear, we didn't quite take into account what your measurements would be when we picked your wardrobe,\" Beth stated. \"You're very proportional to your height, so it is misleading. And your bust is larger than we came ready to accommodate.\"\n\n\"I see,\" Karen said neutrally. \"So what does that mean?\"\n\n\"Many of the outfits we brought simply wouldn't fit you,\" Beth explained, studying Karen's body intently. \"You're absolutely stunning, and that's a good thing, but we may need to improvise.\"\n\nBeth looked over at Cheryl, who took over. \"Miss Gordon, I know you said that you prefer campus life, but am I right in assuming that Jonathon Blackwell made sure his daughter had various expressions of attire available?\"\n\n\"If what you're asking is, did my father make sure I have plenty of elegant clothes handy on a moment's notice in case high tea with the Her Majesty the Queen happened, then yes,\" Karen said. \"I have more than a few available.\"\n\n\"Good, because we may have to rely on some of them,\" Cheryl stated. \"Beth will do what she can with the various outfits the magazine provided, but we don't really have time for many alterations, even with four days to get this done.\"\n\n\"I somehow doubt that my chic and society clothes will look all that good in the light of one of our science labs,\" Karen pointed out.\n\nCheryl and Peter looked at each other. The man shrugged. Cheryl turned back to speak to Karen. \"We have a pretty full list of locations we've already chosen, but we'll do what we can to fit your science lab in there.\"\n\n\"I thought this entire shoot was centered around the notion of society women breaking into science.\"\n\n\"It's a pretty title, and a progressive one, for sure, but we're not in a position to sell less issues of the magazine in the name of progressivism,\" Cheryl said. \"One of the most eligible heiresses on the continent is what our readers want to see, and we always deliver. Now, we should go to your dorm room and take stock of your wardrobe, to see what we can match with our chosen locations.\"\n\nNone of them seemed to notice the thundercloud hanging over their model's head as she escorted them to her dorm room.\n\n***\n\nA strip mall, Toronto, the present...\n\n\"It's really handy that there are still surplus stores around,\" Valentina mused as she wandered through the aisles, looking at the large assortment of camo patterns available on clothing sitting on the shelves. Some were splotchy, some were stripey, some were grey and blocky. Anyone participating was to buy at least four full sets of clothes, barring boots. \"Ooh, that one's pretty.\"\n\n\"I'm not sure 'pretty' is the effect you should be going for, Val,\" Trilby mused, following just behind. She'd promised Mr. DeBourne she'd at least try to keep her overeager co-worker focused on the task at hand. It wasn't that they were pressed for time, but you couldn't be too careful with Val. They hadn't even been working together a month, and Trilby was well aware of exactly how easy it was for Valentina Prospero to fall down just about any rabbit hole.\n\nValentina looked at her and sniffed. \"Mrs. DeBourne and Miss Blackwell are both shopping for outfits. Go ahead and tell me that they're not gonna look sexy as Hell in whatever they decided on.\"\n\n\"Maybe, but they're both ultra-fit, and they have figures to- hey, how do you keep your figure, anyway? I never see you exercising,\" Trilby wondered.\n\nVal shrugged while she continued pondering outfit choices. \"Iono, good eating and clean living, I guess. And my Italian-Irish genes mean I have nice boobies and a cute butt.\"\n\n\"Well, keep your boobies and butt looking for your outfits, the bosses said you should buy at least four full sets. They'll take them in or alter them how ever you like.\"\n\n\"I know, right?\" Val said, wistfully leaning back against the shelves and looking up at the ceiling, her shopping mission once again forgotten. \"Have you seen the serger and sewing machines they have access to? You could unthread and remake a suit of armour with those things.\"\n\n\"C'mon, Bubbles, back to work,\" Tribly said, pointing at the endless rows of camo clothing. Her co-worker sighed and resumed her search, looking for sizes. \"Even I've gotta find stuff to wear, and I'm just the cheering section.\"\n\n\"Yeah, teamwork and solidarity! Up top!\" Val giggled, holding up her hand for a high-five. Trilby shook her head and complied, making sure Val stayed on-mission. Trilby had already spied some funky fatigues done in psychedelic tie-dye colours and would be getting those. Missing by a size or two wouldn't be an issue, since they could be altered and taken in.\n\nElsewhere in the store...\n\n\"Whaddya think, Alex?\" Alexa asked as she held up a camo-pattern T-shirt. It was certainly going to be snug in the chest, but that was the intent to begin with, making Alexa's large tits stand out prominently. She had no doubt her sister would do the same. \"I'll crop the bottom to expose my sexy flat belly, put gussets in the armpits for range of movement, and maybe relax the stitching on the rear of the arms...\"\n\n\"I think you'll look amazing in it, you know that,\" Alex chuckled, watching as his aunt held the shirt that was at least one size too small in front of herself and pretended to model it for him, twisting left and right slightly. She'd already found pants that would sit low on her hips, and with a gusset between the legs, she would have all the range of motion she could possibly need. \"You could be wearing a potato sack, and you'd make it look sexy.\"\n\n\"Thanks,\" she giggled, knowing he meant it, and that he was right. While perfectly capable of being modest, Alexa was well aware of how stunningly attractive and downright sexy she was. \"I need like a bandolier thingy, that'll go around my waist and stay in place on my tits. That'd look awesome.\"\n\n\"You and mom'll have to figure out how to make that happen,\" Alex said, shrugging. \"I can't even picture that shirt lasting more than three minutes before it just rips apart.\"\n\n\"Mmmm, wouldn't that be sexy,\" she purred, leaning into him and whispering in his ear. \"It shreds somehow, and my tits are exposed for all to see...\"\n\n\"Well, I'd certainly have a good ten seconds of solo action while everybody else just stops and stares,\" Alex laughed. \"But y'might wanna think about wearing a bra, those paintballs hurt.\"\n\nShe giggled again and kissed his ear before whispering in it. \"Alex, I've been lovers with Freja for years, it takes a lot more than a couple of hits with paintballs to hurt these girls. It may sting, but that'll just turn me on...\"\n\nAlex shivered and his hand went up and curled into Alexa's long, thick blonde hair, gripping it and making her moan softly. He held tight enough that he pulled back her head back so that he could look into her eyes, with were flashing with delight at his dominance.\n\n\"Keep that up and we're getting arrested, because I'll pin you down and fuck you right here in this store,\" he said in a low, sensual growl that made her wet instantly.\n\nNearby...\n\n\"I am thinking that we can easily find some good, sturdy clothing here for the event,\" Freja mused as she walked with Jeanie up one of the aisles.\n\n\"You're butt's gonna look so cute in whatever you get, Fre,\" her wife giggled, patting Freja's behind. \"And I've gotta find my set too.\"\n\n\"Why, yndling?\" Freja asked. \"Not that I object, but you are not participating, so it is not required.\"\n\n\"I think it should be, for team spirit,\" Jeanie pointed out. \"But more'n that, you and Lexi and Lady Prof and the others are all gonna look so fucking sexy in your combat clothes, and I don't wanna be left outta that. I can always use it for roleplay night.\"\n\n\"This is so very true,\" Freja agreed, loving the thought of her wife is sexy camouflage. \"You are always having the best ideas, my love.\"\n\n\"Just doin' my part,\" Jeanie purred as she brought Freja in for a kiss.\n\nElsewhere on the shop floor...\n\nDave wandered around with Yolatunde and Ari in tow elsewhere in the store, pointing out to them what they'd need and telling them to not worry too much about a perfect fit, since Mrs. DeBourne had already said she'd alter all the clothes personally.\n\n\"So literally all you have to do is pick the right size and what you think you'd look best in, and then they make it fit,\" he said. \"We don't have a colour theme or pattern scheme. Mr. DeBourne said he and his son're wearing black head to toe.\"\n\n\"Nothing frightening about that,\" Ari sighed. \"Giant blond men with freaky blue eyes wearing all black? My ancestors're screaming in delight.\"\n\n\"Not as much as your mother screamed when she insisted on meeting your new employers,\" Tunde pointed out, making Dave grunt in amusement. Ari shot him a sour look. That visit had been something of a fiasco for him. He'd made the mistake of telling his parents that he was working now as the cybersecurity guru for a private family and his mother, in her eternally nagging, badgering way, had insisted on meeting them, to make sure they were good enough to employ her little boy.\n\nShe had almost screamed in terror upon encountering Mr. DeBourne rather suddenly, since she barely cleared his waist. Predictably, the DeBournes had been gracious and hospitable, which frustrated his mother no end, since she could find no particular fault with them, aside from being goyim.\n\n\"The tall blonde girl, the younger sister,\" his mother had remarked to him during one of his visits to his parents' home in Clanton Park. \"Is she available?\"\n\n\"Mom, I can't begin to tell you how unavailable she is!\" he'd laughed.\n\nHe wasn't used to this sort of work environment, admittedly. It felt like he was part of a family, and he was reasonably certain that it was meant to feel that way. It suited his employers to like their staff and be happy to have them around. The DeBournes used the smaller dining room for most of their meals, unless there were important visitors, and they had no qualms at all about staff members eating with them, talking about their day. It was... pleasant.\n\nAri's job was slightly different from everyone else's in that he was essentially on-call 24/7, to respond to alerts about security threats. True, he had a laptop and a handheld device that were hooked into the system, so it was easy to respond to issues; it wasn't like he was chained to his desk. Like Andrea with the plumbing and electricity, he did preventive maintenance and then waited to see what happened.\n\n\"Whaddya think?\" he asked, looking at some of the camo prints. \"This variable grey city pattern for me?\"\n\nIn another section...\n\nAndrea was standing with Karen and Mike, pondering choices for the two women. Mike was happy to have any staff member who volunteered on his team, but given her athleticism and build, he had high hopes for Andrea especially. Outside of his wife, his son, Alli, and probably Freja, she was likely to be the most use.\n\n\"Think they'd lemme wear this tank top?\" the young woman mused, holding it up. It had a standard camo pattern on it, and given her build, it was likely to be a bit snug. Then again, crop and tank tops were what she wore all day at work, under her overalls. It no doubt helped keep her cool while she was working with the boilers and other infrastructure in the basement.\n\nKaren smiled. \"They might appreciate you wearing some pasties over certain parts if you're going to do that, just in case the shirt decides to move askew. Not everyone who plays is over the age of eighteen.\"\n\n\"Okay, noted, but do you think they'll care if it's a little tight?\" Andrea asked, holding it in front of herself. Her breasts weren't as large as Karen or Alexa's, but probably the same size as Jeanie's, meaning that in a snug tank top they'd definitely be on display.\n\nMike chuckled. \"I am pretty sure the owners won't mind, seeing as how hot women in tight outfits is part of their politically incorrect advertising.\"\n\n\"Annnnd what do you two, my bosses, think?\" Andrea asked somewhat tentatively.\n\nKaren smiled wickedly and leaned in. \"We'll crop it for the game, so it will be even hotter on you. Then, if you like, you can wear it while you're working.\"\n\nAndrea hid her face in her shirt, so that they couldn't see her blush.\n\n\"You okay, Miss Kachelmeier?\" Mike asked, amused.\n\n\"Yeah, but...\" Andrea murmured from behind the material. \"Is there a lineup already behind Val to have sex with you two?\"\n\n***\n\nSt. George Campus, 1987...\n\nThey were sitting in one of the oldest and most stately rooms of the university, in the Croft Chapter House, dating back to 1859. The rotunda building was largely unused at the moment, a silent, solemn reminder of glorious days gone by.\n\nSo it was easy for the team from the prestigious magazine to wrangle a few hours of time inside the facility, to take pictures of one of the university's most renowned and prized students. The governing body gave them all the time they needed.\n\n\"So this used to be the laboratory for the university?\" mused Beth, looking around. The round space had ribbed, vaulted ceiling, painted a royal blue. The walls beneath were white, and the floors wood. There was an elegant, if empty feel to it. \"We can work with this.\"\n\n\"I always wondered what it would be like to do experiments in here, during its heyday,\" Karen agreed, looking around. She was wearing a long pea jacket to protect the outfit beneath from the weather outside, and a little case she carried held her shoes and stockings for the shoot they'd planned. \"Black-box science was only barely a thing, and that fascinates me.\"\n\n\"And I think with a little window dressing, we can turn this into an elegant setting for our first shots,\" Cheryl concluded, nodding. \"Pete, Anderson, lights and our props, please.\"\n\nThe two men hurried out to the cube van holding all their equipment, while Cheryl continued to inspect the premises. Beth, who handled outfits, makeup, and hair, waited patiently for the boys to get back. Once they'd set up the lights for the shot, she could make any adjustments to Karen as were necessary. She suspected there wouldn't be many.\n\n\"Let's see this outfit you're wearing, darling,\" the short, stout blonde woman said, coming up to their model. Karen nodded and quickly slid her sheer, black patterned nylons up into place before putting on her elegant heels. Then she removed her long jacket, displaying what lay beneath for the first time.\n\n\"Oh, wow,\" Beth breathed in wonder, loud enough to get Cheryl's attention. The woman came over to look and Karen could tell she was similarly impressed.\n\nKaren was wearing a black jacket laced with golden ivy and blossom motifs. Her short skirt, which came to her mid-thigh, was similarly patterned. The colours played stunningly well against her shining bronze hair and golden-amber eyes. She stood before them, tall, elegant, regal, and so very chic.\n\n\"Will this do?\" she asked, smirking as she placed one hand on her hip.\n\n\"Y-yes, I think that will do nicely,\" Cheryl managed to say. \"Good... good choice, Miss Gordon.\"\n\n\"Thank you,\" Karen replied, turning her head to see the boys hurrying in, carrying their camera and lighting equipment, diffusers and filters. \"I thought it might work in these environs.\" She knew she had to give them some of their coveted 'glam' shots before she could get some more serious subject matter going. There was bound to be give and take, after all.\n\nCheryl moved a chair into position, and then a small, round table. Some props were set on it, notably a tea pot, saucer, and teacup. The lights, diffusers and filters were set up quickly, and then Beth asked Karen to sit in the chair so that she could adjust her makeup for the lighting.\n\n\"So we'll be taking quite a few shots today, just of this set, and then we'll choose the best one or two from it as part of the article,\" Cheryl explained while Beth used a fine stippling brush on Karen's cheeks to complement the light arrangements Pete had set up. \"While we're at it, we can ask you a few questions, sort of a lead-up into what we're getting at here.\"\n\n\"I would like that very much,\" Karen mentioned, holding still for Beth. \"There's plenty to talk about, so filtering it down to the essentials of my work is-\"\n\n\"Okay, we're ready,\" Anderson interrupted as he finished checking the camera, set on a tripod to Karen's front. \"When do you wanna start, Cher?\"\n\n\"The sooner the better, I think,\" the woman in charged mused, now holding her own handheld camera, a Hasselblad 500ELX. \"We don't want the light through the windows to shift too much. Now, Miss Gordon, we-\"\n\n\"Please just call me Karen, if that's allowed.\"\n\n\"Very well,\" Cheryl said agreeably. \"So this first set, in this room, simply has you sipping your tea. You look more than elegant enough, so perhaps we'll try to add an element of casualness to it, okay?\"\n\nKaren nodded, settling back comfortably into the chair, while Cheryl moved around at various angles, seeing what room she had to keep the lights and other equipment out of the shots. Anderson was already checking the focus of his tripod-mounted camera. \"Now, let's have you sipping from the cup and leaning casually in your- excellent, good, stay like that and let me grab a shot or two...\"\n\nKaren had instinctively settled in, but slouched down just slightly, her long, stocking-clad dancer legs visible now, cambering at the knees. She shifted her head slightly in the direction of Cheryl and looked over at her while sipping out of her teacup. The index finger of her free hand rested just inside the lapel of her jacket, no longer a distraction in the photo. Free hands were a distraction and conflict of focus.",
        "She'd remembered asking DeBourne once about why he tucked his thumb into his fist when he flexed his arms, and he'd explained that in professional bodybuilding and posing, thumbs stuck out when you flexed hard, and this was a distraction you did not want the judges noticing. So you tucked your thumb into your fist to make sure their attention was not drawn away from where you wanted them looking.\n\nSure enough, Karen had looked up pictures of famous bodybuilders, and they always seemed to have their thumbs tucked into their fists. It struck her as the same reasoning to not have a lax hand in a photo shoot- she didn't want anyone noticing her unused hand. Her shining hair just touched the flared shoulders of the jacket.\n\n\"So is it true you're not the only woman in the science department?\" Cheryl asked while she crouched down and took some shots. She realized that Karen was a natural at posing, and it would require very little instruction on her part to get what she wanted from the girl. \"There are others?\"\n\nKaren nodded briefly before turning her head slightly for Anderson to take some shots. \"Some, yes, but we're hardly pioneers, after all.\"\n\n\"Then what makes you different?\" asked Cheryl, still snapping away.\n\n\"I think my contribution to women in science continues in the vein of Ada Lovelace,\" Karen explained, touching a finger just under her chin as she looked off somewhere whimsically. \"Women in my social stratum have very little mobility, the vast majority leading the comfortable life of trophy wives. That was never a life for me.\"\n\n\"And this is your message, your crusade, then?\" Cheryl queried. \"Demonstrating that our women readers are capable of moving outside that box?\"\n\n\"Not my crusade, per se, I have plenty of those already,\" Karen allowed. \"But there are too many bright female minds never afforded a real opportunity, because the money they represent is deemed more important.\"\n\n\"You've certainly made a name for yourself on campus these past two years,\" Cheryl pointed out, moving to another angle. \"And especially in the sciences department. It seems to be the case that you have few or no equals.\"\n\n\"I have equals, certainly, just maybe not in my little niche field that I've adopted,\" Karen clarified. \"We have actually made positive steps toward consolidating the research of the various fields, rather than competing, and we hope this means great things in short order.\"\n\n\"Most people tend to think of the sciences as being cut and dried,\" Cheryl mentioned. \"But the university has said there is something of a camaraderie in the department. You even have code names for one another, they told us.\"\n\n\"...yes...\" Karen said somewhat warily.\n\n\"And just to add to the fun, you don't get to pick your own code name, it is more or less assigned to you,\" the woman continued. \"Have you been given one?\"\n\n\"...yes. Another student suggested it, and it stuck.\"\n\n\"And what might that be?\" Cheryl asked.\n\nKaren thought of the name DeBourne had stuck her with, and tried not to scowl and ruin the photo session. \"Chromium Mist.\"\n\nPete, the lighting guy, burst out laughing.\n\n***\n\nBlackwell Manor, the present...\n\n\"Dude, I'd forgotten exactly how gi-fucking-gantic this place was,\" Ted remarked, looking around. \"I don't think I've been here since, what, Grade Nine?\"\n\n\"It's been a while,\" Alex agreed, nodding as he walked his friends through his new residence. \"But now that I live here, I can have you over whenever I want. I figured we'd game and practice our music here, if you guys're okay with that.\"\n\n\"Duh, are we okay with that...\" Dave mocked, tapping the side of his head with his fingers and crossing his eyes. \"Playing in a goddamn mansion? Yeah, I think we're in, genius.\"\n\n\"We can store all our gear and instruments here too,\" Alex added. \"But I actually brought you guys over here to show you something else.\"\n\n\"Better not be your pee-pee, or I'm leaving, fag,\" Jimmy teased.\n\n\"You've seen my pee-pee and it makes you weep with envy,\" Alex snarked back. \"Makes my wife scream in pleasure, however.\"\n\n\"Shaddap,\" his friend grunted, scowling. \"Not fair reminding everyone you've got the hottest girl anywhere.\"\n\n\"So if you didn't lure us here to show us your dick, why are we here?\" asked Greg, looking around. He was the only one of them who hadn't visited the place before, and his eyes were bugging out of his head.\n\n\"Two gaming rooms my dad and I have set up,\" Alex announced, bringing them to a room on the main level in the wing as opposite from the ballroom and conservatory as possible. He opened the door and showed his friends in...\n\n\"What... the... fuuuuuuuck...\" was all Dave could manage on everyone's behalf as they gaped at the interior.\n\n\"Welcome to the RPG room, guys!\" Alex announced proudly, enjoying their reaction.\n\nThe entire room was lined in wood panelling, and had dark wooden beams on the walls, giving it the feel of a medieval or fantasy tavern. The floor was sprung wood. Two long, dark wooden tables were set up with ornate wooden chairs, and in the center of each was a long, flat-panel display. The walls were lined with props of armour, shields, and weapons, and the room was lit by LED torches and candles.\n\nThere was even a fucking bar, with real kegs!\n\n\"The mead dad and I are making is in the kegs, so that'll always be available,\" Alex said as he watched his friends walk around in wide-eyed wonder. \"Ari and I've programmed the displays inside the table for just about any map or background, so we can play any genre pretty damn easily.\"\n\n\"I have such a fucking hard-on right now,\" Jim breathed. \"It's like I'm in one of the taverns we start quests in.\"\n\nAlex grinned. \"Hidden speakers in the walls, so we can play music too, and it won't be intrusive. Y'like?\"\n\nThey all mumbled and nodded rather vaguely, still stunned by their surroundings.\n\n\"Right, well next door is another room I think you retards'll enjoy,\" he said, herding them back out into the hallway. He led them to the room over, and headed in. It was still mostly empty, but in one corner stood a lone arcade console game.\n\n\"Welcome to the other games room,\" Alex announced. \"Dad and I only have the one game so far, but we're getting a bunch more as soon as we find them. Whole space is gonna be full of classics.\"\n\n\"Fuck me, is that Rampage?!\" Dave exclaimed, hurrying over to the corner. \"It fucking is, holy shit!\"\n\n\"Yeah, it's plugged in, go ahead and give it a shot, guys,\" Alex said, pleased. \"Once we've got the power issues sorted out, we're gonna have the walls lined with console games. A few of the more advanced consoles we pick up'll have multiple games inside to choose from.\"\n\n\"I'm playing Ralph!\" Jimmy almost shouted as he jostled his way in front of the game.\n\n\"Yeah, you would, fur-fag!\" laughed Ted.\n\n\"Play nice, ladies,\" Alex called out as he heard the gaming begin, the three players thundering around the screen with their giant monsters. \"Keep it civil, or I won't-\"\n\n\"Helloooooo!\" Alexa chimed as she swished into the room, smiling dazzlingly at her nephew-husband and wearing a largish beach towel. \"Having fun?\"\n\n\"Just showin' the guys the new playgrounds,\" Alex replied, smiling at the most beautiful woman he knew. \"They seem to like the idea of the arcade room.\"\n\n\"Boys,\" Alexa sighed, smiling and rolling her eyes before looking at the knot of young men not far away, engrossed in the game. \"Y'mean they'd rather do that than see me in my new microbikini?\"\n\nAlexa was already removing her towel as the guys all froze and slowly turned around. Even Alex's eyes bugged out at the sight of the barely-there fabric that ostensibly qualified as beachwear. The two tiny vertical strips of black, held together in places by small silver rings, barely covered her nipples and areolae, leaving the rest of her large, creamy breasts exposed. The high-sided thong, once again with silver rings on the sides, barely covered her pussy. Small crystals glittered on the ends of the strings of the garments.\n\n\"Y'like, boys?\" Alexa asked, turning to the side and cocking one leg to show off her ass while she ran her hands through her voluminous locks of golden hair.\n\nNone of them said, anything, just staring stupidly.\n\n\"I think they approve,\" Alex mused, coming over to his giggling wife and putting her towel back around her body. \"Not that I'm objecting, but why're you walking around in your new non-kini?\"\n\nAlexa shrugged. \"Fre'n'Jeanie are coming over for a jacuzzi sesh in the solarium, so I was just dressed ahead of the game, in case we can't go buff for some reason. I thought I'd drop in on you and your troops. Oh yes, speaking of...\"\n\nShe walked over to the boys, who were still gawking at her, their mouths wide open. \"Which of you guys are the paintballers?\"\n\nThe four boys looked at one another before Ted and Dave raised their hands.\n\nShe nodded, her voice taking on an authoritative tone. \"Good. We need two more for our team this Sunday, so you guys just volunteered. Savvy?\"\n\nThey both nodded.\n\nAlexa pointed at Jim and Randy. \"You two're coming too, we need a cheering section. Other people will be there, but it never hurts to have more. Got it?\"\n\nJim and Randy both nodded.\n\n\"Excellent,\" Alexa announced, before looking past them at the video game and making a face. \"Ooh, sorry, guys. I got you all killed.\"\n\nThe four young men all looked at the console and shrugged. \"Eh, no harm done,\" Randy said.\n\n\"So which of you is best at playing it?\" she asked.\n\n\"Me!\" Ted, Dave, and Jim all barked as they returned to the game and decided to show the insanely hot blonde who was king of the monsters. Alex just shook his head and put his arm around Alexa, pulling her into his side as they watched his friends squabble over the game.\n\n\"This is gonna be fun, isn't it?\" she said quietly and dreamily. \"Us, our friends, actually able to have a good time here.\"\n\nAlex nodded and kissed the top of her head. \"Yeah, I'm thinkin' so. It'll be nice to-\"\n\nHe paused and frowned as he watched his friends playing. Clearly, machismo was taking over, and when one of them was down, the others made a show of trying to squat over the downed monster and teabag them.\n\n\"The fuck're you doin', Ted?\" Jim hissed as the gorilla punched and worked its thighs over the werewolf.\n\n\"I'm humping your face off, bitch,\" Ted shot back, laughing. \"Unh! Unh! Unh!\"\n\n\"Mom's gonna kill me,\" Alex sighed, shaking his head. \"I bring you morons over to play a classic arcade game, and you turn it into a kaiju sex massacre.\"\n\nAlexa paused for a second after what Alex said and then looked at him, her eyes wide. \"Oh my God! Alex, that's it!\"\n\n\"What?\" he asked, rather confused. \"What's it?\"\n\n\"The name of your band!\" she exclaimed. \"Kaiju Sex Massacre! It's so beyond perfect!\"\n\n\"What? No!\" Alex protested.\n\n\"But it's perfect!\" she insisted.\n\n\"I am not calling my band Kaiju Sex Massacre,\" Alex said firmly.\n\n\"Guyyyyyys!\" Alexa whined, turning toward Alex's friends and bouncing up and down until her towel fell off again.\n\nThe game was forgotten as the young men all sensed naked female flesh on display and turned to look again, staring dumbly.\n\n\"Alex thinks that my idea for your band name isn't good enough,\" she said, pouting, her hands folded in front of her crotch, but pushing her massive breasts together. \"I think Kaiju Sex Massacre is a great name for you guys, it fits your sound.\"\n\nThe all turned and glowered at Alex.\n\n\"We live in a democracy, DeBourne,\" Ted said haughtily. \"And we all think Kaiju Sex Massacre is a perfect name for our sound!\"\n\n\"Four-to-one, you're outvoted.\" Jim added.\n\n\"More like an autitcracy,\" Alex grumbled under his breath. \"Fine, we're Kaiju Sex Massacre, you horny fuckers.\"\n\n\"Yay!\" Alexa squealed, clapping her hands and bouncing up and down, almost causing Jim and Dave to faint. \"Speaking of bands, you big strong boys don't mind being the roadies and crew for my gals, the Replicants, right? It's only a few times a year.\"\n\n\"We don't mind at all, do we, guys?\" Jim assured her before glowering at Alex. Alex just rolled his eyes in response and waved with his hand.\n\n\"Double and triple yay!\" Alexa laughed, bouncing some more before picking up her towel and covering herself again. \"Thanks, guys! I can't wait to tell the girls. Enjoy your games!\"\n\nShe swished over to Alex and giggled as she gave him a kiss on the cheek before wiggling out the door. The guys were already occupied again with the game when she turned and looked at Alex from the doorway. She flung her towel open, revealing that she'd somehow removed her tiny top, and jiggled her glorious tits at him before disappearing.\n\nKaiju Sex Massacre, Alex thought, pulling his hand down his face. That's just splendid. We won't be playing any kids' birthday gigs, that's for sure. And now she knows she can make these morons do anything.\n\nHe shook his head again. His dad had always insisted he never stood a chance when his mom wanted her way, and now Alex understood why.\n\nHe'd never question the persuasive abilities of a Gordon-Blackwell woman ever again.\n\n***\n\nAn elegant society room, St. George Campus, 1987...\n\n\"Okay, now lean into the dresser just a little more, and turn slightly to face out,\" Cheryl said as she kept taking pictures. \"Yes, now gaze out at something rather distantly...\"\n\nKaren controlled her sigh as she complied, leaning into the Victorian furniture and turning her lovely face out and slightly up to gaze at some point on the far wall. She was wearing a form-fitting black dress with silver accents, black gloves that came up past her elbows, and one of her expensive necklaces, pearls with silver fittings. In her free hand she held a long, black cigarette stem, from which protruded (predictably) a cigarette.\n\n\"Good, good,\" Cheryl said, thrilled with the shots she was getting. Karen Gordon was utterly stunning, and the readership would eat this up. How often were they able to have an exclusive session with one of the most eligible heiresses on the continent? \"Okay, now... I know you don't smoke, but pretend to smoke.\"\n\nKaren gave her a look. \"I don't know how one pretends to smoke, I'm afraid.\"\n\n\"Just... suck the smoke into your mouth without inhaling, and then gently blow out, that's the only effect I need,\" Cheryl instructed. \"Don't worry, the cigarette is very mild.\"\n\n\"Hooray...\" Karen muttered to herself, trying not to scowl as she put the stupid stem between her lips and attempted to not look awkward or cave her cheeks in as she sucked without inhaling. The end of the lit cigarette glowed slightly, and there was an acrid sensation in her mouth. She fought off choking and tears in her eyes as she elegantly blew tendrils of grey smoke into the air in front of her.\n\n\"Amazing,\" Anderson said, shooting from his angle nearby. \"The way the light is catching your jewelry is perfect. Excellent choices, even better than what we brought.\"\n\n\"Thank you, it's authentic,\" Karen said rather flatly while holding her pose. She held no particular doubt that today's shoot was spectacular, but once again, it had nothing whatsoever to do with the purported subject of this entire endeavour, that being society women breaking into the sciences. \"And after this, we can visit a lab and shoot some pictures there?\"\n\nCheryl paused in shooting and looked down at her watch. \"Yes, we should be able to, especially if the lab isn't dependent on sunlight for decent exposure.\"\n\n\"Then let's get this set done, I have much more to show you and tell you,\" Karen said readily, feeling like she was finally making progress. She struck several more elegant poses over the next few minutes, and finally was leading them out of the heritage room and down a hallway. There were some small labs they could use in this very building.\n\n***\n\nNot far away...\n\n\"Is there even a name for the type of little crown-hat-thingy that Jughead wears?\" Lisa asked as she walked down the corridor with Mona, Janet, and Mike. They were all returning from a free lecture on examples of proto-feminism in early literature.\n\n\"Yeah, it's called a clubhouse beanie,\" Mike answered as he strode alongside them casually, making sure his pace was slow so that he didn't leave the women behind. \"They were mostly known in the Depression era, kids would make 'em out of whatever scraps they could find.\"\n\n\"You sure have a knack for grabbing my childhood by its throat,\" Janet sighed, shaking her head. \"Any other completely unnerving facts you pound into my va-\"\n\nThey all paused as they were met by the image of Karen coming down the hallway, wearing an incredibly elegant and sexy black dress, while followed by the magazine crew. They could see her sigh in despair as she stopped in front of them.\n\n\"Good afternoon, Holly Golightly,\" Mike said, smirking and earning him a sour look from his peer.\n\n\"Oh, wow,\" Cheryl said, looking way up at Mike. \"You wouldn't happen to be rich, would you?\"\n\n\"Him?\" Karen almost exclaimed. \"Wealthy people like me regularly hired knights to slay beasts like him when they came to eat the town's virgins!\"\n\nMike raised an eyebrow at her censure.\n\n\"He is rather shaggy, Cher,\" Pete mentioned. \"Seems unlikely.\"\n\n\"How many virgins would we have to feed him, anyway?\" Beth mused, her voice somewhat distant.\n\n\"Let's go,\" Karen said irritably, marching by her friends, all of whom were smirking. \"I can feel Blackwell Manor's property values dropping already!\"\n\nThe magazine crew hurried after her, but not without Cheryl looking back at Mike and making a telephone motion with her hand and mouthing the words 'Call me!' silently.\n\nThey watched as the small party disappeared, before Janet finally spoke. \"Is there anything that woman can't wear and make it look drop-dead sexy?\"\n\n\"And why was she carrying a cigarette in that ridiculous stem?\" Mona wondered.\n\n\"Lucky bitch,\" Janet muttered under her breath.\n\nThey all looked up at Mike. \"What about you, Gargantua?\" Janet asked. \"Not like you to not have anything to say.\"\n\nMike blinked, snapping out of his staring and glancing down at his associates. \"Uh... y'know, if you two were dating, your power couple name would be MonaLisa?\"\n\nAll three women just scowled at him and walked off, leaving him standing in the middle of the hall.\n\n\"Was it something I said?\" he wondered out loud.\n\n***\n\n\"Oh, wow...\" Valentina said as she stared at the framed picture in her hands, her eyes wide and her mouth dry. The picture inside the elegant frame was of Mrs. DeBourne, standing in a classy pose, wearing a posh, form-fitting black dress like something out of 'Breakfast At Tiffany's', holding a long cigarette stem in her hand and looking off at something.\n\nSo elegant... so classy... so sexy, so... beautiful... I can't imagine how-\n\n\"That's a favourite of mine as well, I think,\" someone said behind her, causing Val to squeak loudly and jump, throwing the picture into the air behind her.\n\nKaren almost causally caught the spinning picture without even looking and smiled as Valentina turned around, her eyes wide and her heart almost visually pounding in her chest. \"We just found it in some boxes, so I thought I would see how it looked there on the dresser. What do you think?\"\n\n\"Omigod, Mrs. DeBourne!\" Val said in a loud whisper, trying to compose herself. \"I'm so sorry! I wasn't... I didn't mean to... I hope you can excuse...\"\n\nKaren just looked at the girl, slightly amused by her panicked dithering. This was almost too easy, but the payoff was worth it. \"Go on, darling.\"\n\n\"I... I...\" Val said, blushing furiously and now looking at the floor, her hands folded in front of herself. \"I'm really sorry for snooping, but I just saw this new picture on your mantle and... it's beautiful, ma'am.\""
    ],
    "authorname": "BiscuitHammer",
    "tags": [
        "ethics",
        "flashbacks",
        "group sex",
        "humour",
        "incest themes",
        "lesbian",
        "romance",
        "voyeurism"
    ],
    "category": "Incest/Taboo",
    "url": "https://www.literotica.com/s/mike-and-karen-ch-20"
}
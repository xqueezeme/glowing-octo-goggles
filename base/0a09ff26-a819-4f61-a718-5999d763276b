{
    "title": "A New Way of Seeing Things Pt. 02 Ch. 10",
    "pages": [
        "Standard disclaimer\u2014this story takes place in a world where STDs don't exist and only babies planned for and wanted do\u2014in other words, a fantasy world. Any resemblance to real-life people is purely coincidental. \n\nChapter 10 \n\nGwen returned to the barn to find Dart already unsaddled, Gwen noting with appreciation that her young friend had properly arranged both horses' saddles in the proper places. The two horses were turned loose in the paddock a short time later, Dancer making her annoyance over their disappearance known. \n\n\"How about a swim before I start making dinner?\" Gwen asked as she shut the gate. \n\n\"Before WE start making dinner,\" Cricket corrected. \"At least let me help you. I'm not fancy in the kitchen, but I've cooked for myself since I could reach the stove and most of the time I don't burn stuff. A swim would be nice, but I don't have anything I could wear. There's one of Daniel's business suits in the car that I picked up from the cleaners before...well, before, but no bathing suit.\"\n\n\"I'm sure we can take care of that. I've got some things that might be a little big for you but should fit alright in a pinch, and maybe Ali has something. C'mon in the house.\" The women crossed the yard to the kitchen and went straight to the master bedroom. \"I've got a bikini top that might work for you,\" Gwen told the young woman, \"and I'm not sure how you feel about wearing someone else's bottoms, so how about a pair of gym shorts?\"\n\n\"If you clean your clothes as well as you clean your house, I'm sure the bottoms will be fine,\" Cricket told her. \"I doubt a top of yours is going to fit me, though. You're pretty well-endowed compared to me. I'm in between an A and a B cup.\" The young woman began to volunteer that she would be fine in her sports bra, but hesitated, unsure how her host might feel about her husband seeing her in it should he return early.\n\n\"I'm just a B cup myself,\" the older woman said as she pulled a bikini from its hiding spot in her underwear drawer. \"Try these on and\u2014\" she ducked into the closet for a beach wrap\u2014here's something extra if you like. Bathroom's through there, just leave your clothes on the floor and I'll throw them in the wash before we eat.\"\n\nThe young woman looked at her uncertainly, then headed for the open door on the other side of the bedroom. \"Be right out.\" \n\nGwen began to strip as soon as the door closed, ignoring the Lady's suggestion to use the other bathroom, the one with a lock on it, to change. She was settling her breasts into the cups of her own bikini when the bathroom door opened. \n\n\"The top's a little big, but it should work,\" Cricket said uncertainly. \"Are you sure you don't mind me wearing this?\" \n\n\"Of course I'm sure,\" Gwen reassured her. \"Are the bottoms okay?\"\n\n\"They're fine.\" Cricket eyed the older woman, and decided that Gwen's lack of coverup meant she could go without as well. \n\n\"Do you drink alcohol?\" Gwen asked over her shoulder as she collected some towels and headed for the kitchen. \n\n\"Sometimes. Beer and wine. Mostly wine. \"\n\n\"Wine it is, then. White or red?\" \n\n\"Uhh, red, but please don't make a fuss.\" \n\nA bottle and two glasses were collected, and the women went up the hill together. \"What a lovely spot,\" Cricket said softly as they stepped through the gate.\n\n\"Thank you. Tim built it for me and the children right after KD was born. It helps that's he's a contractor\u2014he called in some favors and he and his friends worked on it on weekends. We paid them in beer and got the materials at cost. The barn got here the same way, even before the pool.\" \n\n\"You're very lucky.\" The younger woman's tone made it clear that she was thinking of her own situation, and Gwen didn't know how to respond. \n\n\"Thank you,\" she finally repeated and handed Cricket a full glass. Gwen was the first in the pool, wading in until she was waist-deep. Cricket followed behind her, diving forward as soon as the water turned deep enough, a strong kick sending her gliding halfway across the pool floor before turning back to Gwen as the bottom fell off quickly. With a strong push, she broke the surface. The top was indeed a little too big, and the cups covering the young woman's breasts resisted the flow of water between excess fabric and flesh and pulled the bikini down. Pert breasts topped with delicate pink nipples glistened in the sunlight. \n\nI guess she is a little smaller than me, Gwen mused as it took the young woman a moment to realize she was completely exposed from the waist up. \"Whoops!\" she cried, dropping back down below the surface while scrambling to rearrange the top and cover herself. \"This is so embarrassing! I'm really sorry!\" \n\nGwen laughed. \"Don't be. They're just breasts. I have them, too\u2014you saw mine, remember?\" The Lady clucked reproachfully over the casualness of it all.\n\n\"Yes, but I asked to see yours\u2014you didn't just up and flash me!\" \n\n\"I offered to show you mine. It's fine, please don't be embarrassed. I've seen breasts before. As a matter of fact, if you're comfortable without the top on, feel free to just take it off.\" \n\nCricket eyed her curiously, as if weighing her decision. \"No, I really shouldn't...\"\n\n\"Then let me help you tie it a little tighter,\" Gwen told her as she began to wade across the pool. \"C'mon, turn around.\" \n\nThe rest of the swim passed without any further wardrobe malfunctions, the young woman more cautious in her movements, Gwen talking with her as if nothing had happened. They had changed and started dinner by the time Tim returned. \n\nThe wine and fatigue loosened Cricket's tongue as the trio sat on the deck and ate, Tim clearing the plates while the women talked horses and riding, the failed marriage discussed in vague terms. The sun had set and the young woman's words had begun to slur a bit by the time Tim excused himself and made his way across the yard to bed down the horses for the evening. \n\n\"He seems like a really good man,\" Cricket said as she watched him walk across the grass. \"Not that I'm an expert. You're very lucky.\"\n\n\"He is, and I am.\" More than you could ever imagine, she added silently.\n\n\"Did he, uhh, like it when you took those pictures?\"\n\n\"I think he did, yes.\" \n\n\"No, I mean, REALLY like them? Like, did he, uhh, show you how much, in there?\" Cricket flicked her eyes at the house behind her, and Gwen correctly assumed she didn't mean the kitchen. She surprised herself by not being too offended or embarrassed to answer. \n\n\"He did,\" Gwen admitted with a smile. \"I was... I was nervous he wouldn't like them, but it made things\u2014made me\u2014more fun...which I think he especially liked.\"\n\n\"I was hoping I would be able do the same for Daniel,\" Cricket replied, again glancing back at the house meaningfully. \"I'm the one who was looking for a little more excitement. He didn't seem to like doing...that...very much...kind of made it seem like it was a chore and that I was a pervert even for wanting to make things a little more exciting.\"\n\n\"A good sex life is important,\" Gwen reassured her. \"It took me a long time to understand that. Just because you wanted your husband's attention in there\u2014\"Gwen's eye motion mimicked the young woman's and Cricket laughed\u2014\"doesn't make you a pervert.\" \n\n\"I bet if he would have been more interested if I had told him I was off my birth control...at least until he knocked me up...\" the young woman's eyelids began to sag.\n\n\"How long since you last slept?\"\n\nHer eyes remained partially closed. \"An hour or two a night since he left...wasn't sleeping really well even before that.\" \n\nGwen gently took the wineglass from her hand. \"Time for bed. Sleep as late as you want, we'll ride whenever you feel like getting up.\" \n\nCricket didn't fight her, rising from her chair. \"I'll try, I don't know if I can...\"\n\nGwen smiled and led her to Ali's room. \"I left one of her nightshirts on the bed for you. Bathroom's across the hall if you need it. Help yourself to whatever's in the kitchen. Sleep well.\" She smiled and shut the door behind her.\n\nGwen next stop was the laundry room to sort out Cricket's now-clean clothes. While her outer attire was top of the line, her underwear was worn and frayed, almost in danger of falling apart. She sensed the young woman's tales of young married life-induced poverty had not been exaggerated.\n\nThe owners of the house tiptoed through it as they prepared for bed, not wishing to wake their guest. On impulse, Gwen peeked in to Cricket's room, as she had for her own daughters so many times. The young woman had managed to change into what had been laid out for her but had not been able or willing to climb under the covers and now lay sprawled on her stomach, fast asleep. The shirt had ridden up to reveal the fact that Cricket had elected not to wear her shorts to sleep in, and Gwen looked down appreciatively at a well-toned bare bottom. With a smile, she took a blanket from a nearby chair and laid it over the sleeping woman to help keep her warm and preserve her modesty, then quietly shut the door behind her. \n\nShe found Tim in their bedroom, already lying down, dressed in shorts and a t-shirt. She again smiled, remembering it had been months since he had worn anything to bed, then stripped down to just her t-shirt and joined him. \n\n\"She asleep?\" he whispered, knowing Gwen had always tried to keep things as quiet as possible on this side of the house when Ali and KD had been younger, recalling the time she demanded he do something to silence the squeaking of the bedsprings during their Saturday night lovemaking sessions. She had not been terribly happy about the outlay of cash for the memory foam mattress that had been his solution, although he thought it a good investment if it at least meant him getting laid once a week. \n\nGwen nodded, paused as if in thought, then pulled down the front of his gym shorts and bent at the waist to deliver a kiss to the tip of his slumbering cock. The soft length began to awaken as she took the pink head between her lips. Now confident her advances were welcome, she worked at pushing down the waistband just far enough to give her complete access to his member while leaving the shorts on should they be interrupted.\n\nTim looked down at the head lying on his stomach, somewhat befuddled by Gwen's aggressiveness. Lovemaking when the girls had been here was always under the covers, in the dark, long after their daughters had gone to bed. And yet, the fact a guest\u2014really, a stranger, lay sleeping just one room over didn't seem to bother her at all. He was only too happy to go with the flow this evening and his hand began to work its way between her asscheeks, headed for what was between her legs. \"Aren't you afraid Cricket might come in?\"\n\nGwen hips shifted to make herself more available to his exploring fingers. \"She'll knock.\" \n\nDespite the presence of their guest just down the hall, Gwen took her time, teasing and tempting and bringing him close to orgasm before backing him down, Tim pleasantly frustrated by this new tactic. It was some time before she stopped teasing and gave him his release, her husband's semen seeming to fill her mouth before she disposed of it with a gulp even as her tongue continued to clean his spongy head. The perverted act triggered her own orgasm, and she struggled not to clamp down on the flesh between her lips. Natalie's right, the Slut mused as his penis began to soften. Not too terrible to swallow. Not great, but not bad. A very slutty thing to do. The thought pleased her. \n\nGwen looked up to see her husband with his eyes closed, a grin on his face. \"What was that for?\" he whispered.\n\n\"Because you're a really good man.\" \n\n***\n\n\"Hey Mom, I'm coming up riding this morning. You going to be around?\" Ali's voice, perky and energetic even at 7am, was loud and clear through the telephone handset. \n\n\"Well, you're up early this morning.\"\n\n\"Yeah, Jason's going golfing and he got me up with him.\" The young woman didn't volunteer that the reason he had awoken her was to deliver a primal doggystyle fucking in the belief that pre-golf sex helped a man's game. It was a ritual she certainly had no problems reinforcing. \"So, are you free?\"\n\n\"Well, I have a guest here, once she gets up we're going for a ride. If you want to come with us, you're more than welcome.\"\n\n\"A guest? Anyone I know?\" My mother has a guest? That's new...\n\n\"Oh, I doubt it. Somebody I met recently. She's been having a tough time and wanted to go riding to take her mind off things, so I offered to let her take Tigger out yesterday. She stayed the night and we're going around the other side of the ridge this morning.\"\n\nIs this my mother I'm talking to? Ali asked herself. A \"guest\", in her home, near her horses? \"Yeah, that would be great. I'll be over in a little bit. Wait for me?\"\n\n\"We will. Cricket isn't up yet, and I'm hoping she sleeps in this morning\u2014I think she needs it.\"\n\nCricket. My mother has somebody named Cricket sleeping in her house. This I have to see. \n\nThe young houseguest had not arisen by the time Ali arrived forty five minutes later. \"I didn't see daddy's truck,\" the young woman said as she poured herself a cup of coffee. \n\n\"He's went fishing with Mr. Culbertson this morning,\" She had warned Tim about staying away from the beaches with the naked people, to which he reminded her with a shrug and a smile that it was Charlie's boat, and Charlie was driving.\n\n\"So, where'd you meet...Cricket?\" Alison as she sat down at the table.\n\nGwen paused. \"She was at the photographer's the same time as your Aunt and I. We, uhh, struck up a conversation and she mentioned she rode. I told her if she ever wanted to get out for a bit to let me know, and she called a couple of days ago.\" \n\n\"Uh-huh. And any topics of discussion I should avoid talking about?\" The blank look on Gwen's face prompted Ali to be more specific. \"You said she was having a rough time. Anything she might not want to hear?\" \n\n\"You don't have to tiptoe around me,\" Cricket said quietly as she appeared around the corner. \"I'm sorry, I didn't mean to eavesdrop. My husband left me this week,\" she said matter-of-factly, \"and a couple of things reduced me to a blubbering wreck yesterday\u2014sorry again, Gwen--but your mother's hospitality, a good meal with a little too much wine and a decent night's sleep have gotten me over the shock, at least I think so.\"\n\nGwen rose from the table. \"Cricket, you're up! I'd like you to meet my daughter\u2014\"\n\n\"Alison,\" her guest said, extending her hand. \"I recognized you from the pictures in your room.\"\n\n\"I'm sorry to hear about your...well, troubles. Men can be such jerks sometimes.\"\n\n\"Thank you, but I'm feeling better today other than this touch of a hangover, thanks to your mother, although I can't guarantee there aren't more crying fits in my future.\"\n\n\"Alison called this morning and wanted to come up to ride,\" Gwen told the young woman. \"Do you mind if she comes with us?\"\n\n\"Of course not! If you'd rather it be just a mother-daughter thing, I can just get dressed and go...\"\n\nDon't be silly! We want you to come along with us! I was just starting to pack some lunches\u2014I think we'll be out a while. What would you like for breakfast and for later?\" \n\nThe trio finished their preparations and headed for the barn, Gwen and Alison to their own horses, Cricket to a seemingly pleased Tigger. \"So, Mom said you two met at the photographer's when you were looking at pictures?\" Ali asked over her shoulder as she hefted a saddle onto Dancer's back. \n\n\"Yes, your mother let me look through her album to see if it was something I felt comfortable doing for my hus\u2014for Daniel.\"\n\nGwen panicked, desperately trying to figure out a way to keep her secret from being exposed. Alison looked at her mother quizzically. \"Wait\u2014you never said you and Aunt Natalie were there to see photos of you?\" \n\n\"We weren't. Your Aunt\u2014\" Gwen began before the Lady screamed for her to stay quiet. \"Can we talk about this later?\" she asked weakly.\n\nCricket looked at the panicked face of the older woman, then back at the smile of her daughter. \"Oh God, I shouldn't have said anything\u2014I'm so sorry\u2014I didn't stop to think\u2014I'm so sorry.\" \n\n\"It's alright,\" Gwen soothed. \"You didn't know. Yes, Alison, I had some photos taken by this photographer. Your aunt recommended him. Can we finish saddling up and ride, please?\"\n\n\"What kind of photos? And why were you there with Aunt Natalie?\" Alison would not let go of that damnable I've got you smile...\n\n\"Later Alison, please?\" The young woman nodded, her smile still there, then went back to cinching her saddle.\n\nThe tension dissipated as they made their way up the hill, the women riding through the morning and into early afternoon, pausing for breaks here and there. Gwen was thankful for her daughter's presence as Ali's efforts to get their companion talking was mostly successful, bringing Cricket out of her shell just a little at a time. She never seemed to steer the conversation towards the topic of relationships and yet it just seemed to occasionally land there among the talk of regional shows and noted trainers, Gwen feeling like she learned more about her Alison's love life in one ride than she had during all of her daughter's years at home. Cricket's too; it seemed her husband made even the old Gwen positively wild and daring by comparison.\n\nThe riders made their way out of the treeline and down to the barn in the early afternoon's blazing sun. The horses were groomed and turned out, happy to be back in their paddock after an unusually long ride. \n\n\"A swim and a glass of wine by the pool?\" Ali suggested as they trudged across the lawn. \n\n\"Sure, why not,\" her mother replied. \"Cricket, are you joining us?\" \n\n\"Maybe one glass,\" she said after a moment's hesitation. \"as much as I'd like to, I can't stay here forever.\" \n\n\"You can stay as long as you like,\" Gwen insisted. \"C'mon, let's get our suits.\"\n\nThe trio eventually straggled back into the kitchen from their respective changing spots. Ali looked at her mother and laughed. \"Well, Cricket, I'd say you've earned Mom's trust. My mother has worn a one-piece granny suit ever since I can remember, so the bikini she's in right now is really stepping out for her!\" \n\n\"Alison, stop that!\" The older woman admonished. \"This is nothing out of the ordinary.\" \n\n\"Given that I can count on one hand the number of times I've seen you wearing it, I'd say it is.\"\n\n\"She wore one yesterday,\" Cricket volunteered as if to stand up for her new-found friend, \"and she loaned me this one. I think I shocked her when my top slipped off.\" \n\nAlison arched her eyebrows in surprise. \"Mother! What exactly we're you two doing yesterday?\"\n\n\"Stop that! It wasn't tied tightly enough, that's all! She doesn't have my middle-aged spread to help keep it up!\"\n\nAlison laughed at her mother's discomfort and leaned into Cricket conspiratorally \"Don't worry, a little flashing is nothing to be ashamed of around here. Mom may not flaunt it when she's around family and friends, but when it's just her and Daddy she doesn't wear anything at all to swim in.\" \n\n\"Alison Marie Nelson, I swear if you don't\u2014\" \n\nHer daughter laughed again and held up her hands in self-defense. \"Alright, alright, sorry, probably too much information. Shall we go cool off?\" \n\nThe women alternated between wading, paddling and sunning for the next hour, not talking much, just enjoying the sun and the wine. \"Well, I should really be going,\" Alison finally announced. \"Need to go grocery shopping before the week starts.\" The women wrapped themselves in their towels and made their way down to the house. \n\n\"C'mon,\" Alison said as she led the way, \"we'll get you something clean and dry to wear for your drive home.\" Mother, daughter, and guest, now all dressed, met back in the kitchen a few minutes later. \n\n\"I really have to get going. Cricket, it was really nice to meet you,\" Alison said, extending her hand. \"I hope you come back again.\"",
        "\"You can come back next weekend, if you like,\" Gwen quickly interjected, much to her daughter's amusement. \n\n\"Thanks, that's very nice of you, but you're right\u2014I really need to tell my mother. I'm going to drive down to her place next weekend and tell her what happened in person. I can use it as an excuse to spend time with Marvin.\" She seemed to hesitate a moment, then brushed past Alison's hand and gave her a tentative hug, as if she were inexperienced in the act. \"Thank you both,\" she said, on the edge of tears. \"I don't know what I would have done at the apartment this weekend. You and your mother are godsends.\" She broke the embrace and moved to Gwen, their hug even longer and more fervent. \n\n\"That's my mom,\" Alison said, all the while thinking, that's not at all my Mom. At least it wasn't. \n\nGwen walked the two women out to their cars. \"Cricket, I expect you to call me with updates, or if you just want to talk,\" she said firmly. \"If you don't, I'll be calling you.\"\n\n\"I really don't want to bother you,\" the young woman said tentatively.\n\n\"If I don't hear from you young lady, you'll be hearing from me.\"\n\n\"I'll try. I promise.\"\n\nAlison hugged her mother. \"I still want to know about what you and Aunt Natalie were up to,\" she murmured in her ear before pulling away and heading for her car. Soon the yard was empty, and Gwen stood there, thoughts of what to tell her daughter alternating with an overall concern for Cricket. \n\n\n\nTim returned as Gwen was finishing dinner preparations. The couple shared their day as they ate, Gwen telling her husband of the embarrassment she had felt over Alison's discoveries and sharing of secrets, Tim detailing the local trade gossip Charlie always seem to have a wealth of. \n\n\"And did you go to those beaches he likes to go to?\"\n\nTim laughed nervously. \"Yeah, he did a slow drive by at the party cove. I think he wanted to stay a while, but I told him it looked like we were a couple of dirty old bastards in a bass boat hanging out with a bunch of day cruisers full of partiers.\"\n\n\"And?\"\n\n\"And what?\"\n\n\"Did he see what he wanted to see?\" Tim guessed that the question was actually aimed at him as well.\n\n\"Well, yeah, I guess he did...\" Tim replied, stressing the 'he'. Admitting to be being in the proximity of women wearing little or nothing was still dangerous territory, and the more he distanced himself from it, the better. \"I mean, a lot of the girls were topless, and few didn't have their bottoms on, either...but there were guys who stripped down, too! Some of women gave Charlie a little show.\" \n\n\"A little show? Like how?\" \n\n\"You know...dancing around, shaking their boobs, or holding them up and squeezing them together, bending over and sticking out their butts...stuff like that. Some of the girls pretended they were making out with each other.\"\n\n\"And the men that were with them didn't care that they were doing that?\" \n\n\"Nah, they just held their beers for 'em and cheered 'em on.\" \n\nGwen said no more on the subject, and Tim wondered if she might be upset that he had been present for the lewd display. If she was, she was hiding it well, he decided, and the couple settled in for a quiet evening of TV. \n\n\"Wouldn't you have been mad if I had done that?\" Gwen asked out of the blue, two hours later.\n\nTim looked at her, confusion evident. \"Done what?\" \n\n\"Made a spectacle of myself in front of strange men. Like those women you and Charlie saw today. And you said their husbands didn't even seem to care.\" \n\nHer husband laughed. \"Sorry, but I can't even begin to imagine you all liquored up and carrying on like that, so I guess I'd be too shocked to be angry.\"\n\n\"Yes, but what if I did? Wouldn't you be mad?\"\n\nTim thought for a moment. \"Nah, can't say that I would be. Those people on the boats seemed to be having a good time, Charlie had a good time, nobody got hurt. Al Murphy didn't seem too upset.\"\n\nAl Murphy, owner of Murphy Motors, where they had bought their trucks for years now. \"What in Heaven's name does Al Murphy have to do with this?\" \n\n\"I'm almost positive I saw Al on one of the boats, and almost as sure Margaret was there, too.\"\n\n\"You have to be kidding me! They must have had their clothes on, right?\"\n\n\"Al did\u2014thank God, that is not something I would want to see\u2014but Margaret, it was her\u2014there were a couple of guys in front of her...well, she was definitely topless, and if she was wearing bottoms, they didn't do a good job of covering anything.\" \n\nA mental image of the woman she had always seen sitting on the other side of the desk at the dealership filled Gwen's head. Co-owner along with her husband, Margaret Murphy was a tall, stately woman in her mid-50s, her dyed-blonde hair impeccably styled, the conservative business suit she always wore when negotiating Nelson Plumbing's next truck purchase unable to hide the fact she had a truly impressive pair of breasts. Others had snickered for years that had she presented her boobs in a more suggestive fashion, Murphy Motors might have sold a thousand more cars. That was not her style, though, Gwen knew her to be a conservative business leader who succeeded through tough negotiating rather than physical distraction.\n\n\"Oh, I'm sure it couldn't be her,\" Gwen said uncertainly. \"I can't imagine she would ever be seen near any party like that.\"\n\n\"Well, you might be right,\" Tim answered in a tone that made it clear there was no uncertainty in his mind. \n\n\"How about you? Did you enjoy the show the women gave you? Margaret wasn't one of them, right?\" The Slut presented a brief mental image of those massive boobs, presented in all their naked glory, being thrust out at Gwen's husband.\n\nTim felt like he was again entering dangerous territory. \"No, no, she was on the boat next to Al's talking with some guys. The other women, well, they were happy to show off, and I'm a guy and we're trained to look...you're a lot more fun to look at though, because I get to look and touch.\" \n\nGwen gave him a smile that showed she appreciated his effort to make her feel special, but doubted whether it was true. \"Uh-huh.\"\n\nThe subject was again dropped, and the couple's attention was drawn back to the TV. It was some time before Gwen rose from her chair and moved to the other side of the coffee table, facing her still-seated husband. Uh-oh, he thought, I'm about to get lectured. He was surprised to hear her tone was soft and inquisitive rather than stern. \"The women who were showing off, did they start out naked, or did they take their clothes off first?\" \n\n\"You mean the women at the lake today?\"\n\n\"How many women are giving you shows? Of course!\"\n\n\"Uhh, already naked, I guess?\"\n\nGwen quickly peeled off her t-shirt and bra, then discarded both jeans and panties with one push to her ankles. \"So, what did they do to make you look?\" \n\nTim stared at the naked woman in front of him. \"Uhh, well they danced around, you know shaking their boobs and butt. That kind of thing.\" \n\nGwen thought a moment and began to swing and undulate, turning in place as she wiggled her bottom at her seated husband. \"Sorry, I'm not very good,\" she apologized as her ass swung back and forth suggestively. \"Am I doing it right?\"\n\n\"You're very good,\" Tim disagreed, \"and you're doing it better than I ever imagined.\" \n\nShe turned back to him, her hips still swaying. \"And you said they made their breasts shake?\" \n\nWithout waiting for answer, Gwen stopped the motion of her lower body and began twisting her chest back and forth as she looked down to check on the swing of her pert mounds. \n\nTim was fascinated, but also had to stifle a laugh at the display of concentration Gwen appeared to be putting into getting her small mounds to violently wobble. \"Just like that,\" he encouraged. \n\n\"Whew, that's quite a workout,\" she said, stopping her movement and looking up at her husband. \"I guess I'm too small to really get them to move much.\" \n\n\"I think they looked great,\" Tim offered.\n\n\"So, what else did they do?\"\n\n\"Well, they stuck their chests out and pushed their boobs up. A couple of 'em even licked their nipples like that.\" Tim wondered if he had overstepped his bounds with that one. \n\nGwen bent forward at the waist and mimicked what her husband had described, looking down to ensure proper form. \"Well, I'm definitely too small to do that last part,\" she laughed. \n\n\"I can do that for you later...\" \n\nGwen straightened and let go of her breasts, the mounds bouncing once before settling high on her chest. \"What else did they do?\"\n\nTim could not believe his luck. \"They, uhh, showed us their asses\u2014they turned around and stuck them out at us.\" \n\n\"Like this?\" \n\n\"Well, they spread their legs some, too...\" His heart nearly skipped a beat as Gwen presented her upturned ass, her pussy and asshole now clearly on display. \"And one of them reached between her legs and started touching herself.\" \n\nThe naked woman put one hand on the floor to steady herself while the other reached between her legs and began to trace a line down her slit. \n\nThis is too fucking good to be true, Tim mused. Why not push for more? \"And one of 'em reached further up and started playing with her, uhh, asshole.\" \n\n\"Tim!\" came the voice from the other side of the legs in front of him. \"Just how close did you two have to get to see that!?\" Her middle finger crept up, hesitating briefly before beginning to draw circles around her crinkled opening.\n\n\"Uh, maybe thirty feet, I don't know,\" he said distractedly, intent on watching what her finger did next. \"Charlie was driving.\" \n\n\"So you mentioned,\" she said, straightening and turning back to him. \"Whew! That made the blood go to my head.\"\n\n\"Me too,\" he said with a grin as he rose. \"Want to go lie down for a bit?\" Gwen smiled at him in reply as she walked past on the way to the bedroom.\n\n\"You certainly look ready to go,\" she said as she lay there watching him undress, his erection slapping against his stomach with an audible pop as he freed it from his shorts. \n\n\"That's your fault for teasing me like that. I hope you're prepared to take care of it.\" Tim hurried on to the bed next to his wife and took her in his arms. \n\n\"I'd be glad to.\" Gwen took hold of his engorged length and lightly shook it. \"Did you get like this with those women on the lake?\" \n\n\"He got a little interested, yeah,\" Tim admitted, \"but nothing like the effect your show had. They were just drunk. You're sexy as all hell.\" \n\nHands and fingers explored naked flesh while tongues danced, two orgasms building. Tim broke their embrace, and Gwen opened her legs in anticipation of being mounted. The man above her had other ideas, however, and with a wink, reached over her prone body to open the nightstand drawer beside her. Gwen blushed a bit when he withdrew her latest acquisition, the short (well, shorter than the other one, she reminded herself) fat one and held it out. \"Hadn't seen this one before. Use it for me?\" \n\nGwen gingerly took the rubber cudgel from her husband's hand and looked up at him uncertainly. The calm determination in his face left no doubt as to whether she should. Closing her eyes, she poised it before her opening, then pushed it forward to let the head rest between her inner lips. \n\nThe weight next to her on the bed shifted, and something hot, soft and slightly salty was laid on her other lips. Gwen kissed it even as a callused finger found her clit and began to circle. She slid the mass between her legs in slowly, savoring the feel of being ever so slightly stretched as the bulbous head plowed its way into her. Gwen turned her head to accept Tim's cock more fully, and the finger on her clit continued to circle. She reveled in the feeling of both her openings being filled, and wondered what it might be like to add a third\u2014touching herself back there had certainly been pleasant, maybe something a bit more...nothing large, that would be painful, but something else...\n\nFor the second time that weekend Gwen had to remind herself not to bit down on the thing in her mouth as her orgasm pulsed through her, a particularly strong wave making almost making her groan ever so slightly around the cock she held firmly between her lips. \n\nTim bided his time while she came, his finger and cock both frozen in place as he watched her shudder through her climax, waiting until she appeared to relax before removing himself from her mouth and straddling her chest. Gwen's watched and felt her husband's cock press into the valley between her breasts as he leaned over her, hands pushing into the pillow on either side of her head,. \"Push your tits together for me,\" he grumbled, and she hurried to do so, leaving the dildo firmly lodged in her opening. \n\nHe groaned as the soft flesh enveloped him, and his hips had a mind of their own as they pistoned his cock back and forth. Gwen watched in fascination as the serpent seemed to strain to reach her lips, and she stifled a giggle at the absurd thought of a forked tongue flicking out of the little mouth as it was pulled open at the apex of its thrust. On Tim's final push it was not a snake's tongue but a white jet that leapt forward. Gwen instinctively closed her eyes a millisecond before a hot bolt of wetness struck the tip of her nose and painted a gooey line across her eye. Several more pulses landed on her cheek and lips, each making her recoil into the pillow as they struck, before the serpent's flicking tongue weakened enough to coat the underside of her chin. \n\nTim scrambled off the bed even as the last spurt found its target. \"Shit\u2014I'm really sorry about that\u2014really shitty aim\u2014don't open your eyes!\" He hurried back from the bathroom with a washcloth, already fearful of the wrath he likely had incurred. Gwen's eyes were still tightly screwed shut, her body shaking, he realized as he approached the bed. To his amazement, the shaking was laughter she dared not let escape through lips tightly pursed due the strand of his semen across them. His panic made him debate the merits of where to start cleaning, finally deciding to work down from where the first jet hit her. Gwen felt the cloth on her eyelid and gently took it from him to expedite the job. \n\nGwen took a swipe across her lips and let loose the laugh that she had been stifling, a sound that brought Tim hope that perhaps he was not going to be sleeping on the couch tonight. \"When you said to keep my eyes closed, I thought that you had another surprise for me, and I couldn't imagine what you could follow up with after that!\" \n\n\"Sorry, sorry,\" Tim repeated. \"That stuff can sting when you get it in your eye. I didn't realize I had that much pressure stored up. I wasn't aiming there!\" \n\n\"Are you sure?\" Gwen asked with a smile. \"Natalie said a lot of men like to do that.\" \n\n\"No, really, it was an accident!\" Not completely true, he silently conceded. He had had a good idea where that first shot was going to land even has it came thundering up the length of his cock, and a desire to watch it happen had overridden his sense of what his wife might find objectionable. Each subsequent pulse had been another opportunity to correct the mistake, but he remained fascinated with the results until his orgasm had passed and common sense again took over. \"Natalie said that?\"\n\n\"Uh-huh,\" Gwen replied as she arched her neck to wipe the remains of his orgasm from below her chin. \"She said Adam does it sometimes, like he's marking his territory. Anyway, can you warn me next time? I never realized how fast that stuff comes flying out! And so hot, too!\" She smiled up at her husband and handed him the washcloth. \"Did I get it all?\"\n\n\"I think so.\" \n\nNext time, Tim thought as he lay there waiting for sleep. She said that like she expected there to be a next time. He fell asleep imagining nasty ways he could make that happen."
    ],
    "authorname": "BusyBadger",
    "tags": [
        "accidental voyeur",
        "outdoors",
        "oral",
        "blowjob",
        "facial",
        "swallow",
        "dildo"
    ],
    "category": "Exhibitionist & Voyeur",
    "url": "https://www.literotica.com/s/a-new-way-of-seeing-things-pt-02-ch-10"
}
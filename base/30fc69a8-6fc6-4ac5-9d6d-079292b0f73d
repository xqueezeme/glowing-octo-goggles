{
    "title": "Fingers Of Fury",
    "pages": [
        "What up, fools. I\u2019m here to talk to the boys (and yeah, open-minded gals) in the class who want to learn how to keep a woman in a state of repeated orgasm for five to six hours. I mean multiple orgasm, one after another, for HOURS. It\u2019s a technique I\u2019ve developed -- technique, hell, insane and inhuman skill -- which I\u2019ve had the privilege of using successfully on five different women. And believe me, when I finished, they were different. \n\nNo, I\u2019m not talking that tantric shit where you sustain one mega-orgasm that bursts your uterus like a pi\u00f1ata. Nor do I mean that multiple orgasm you read about on the feminine hygiene websites where she keeps pumping the dildo until she\u2019s puffy and sore. What I mean is an experience I can\u2019t find any information about anywhere, and if I hadn\u2019t invented it, I wouldn\u2019t know it exists. Unless you\u2019ve pulled it off yourself, you\u2019ll think I\u2019m a liar. In the meantime, give it a try. \n\nBefore I delve into the \"how-to,\" a little background: The first time I witnessed this miracle was in the backseat of my crappy car in college. I was dating a Chinese girl at the time, and we often fucked like crazed ice weasels on death row. Her body was the perfect instrument for the method we were about to uncover together -- hairless, tiny breasts with ultra-sensitive nipples, and she masturbated as though it earned her money. On the night in question, we made out, fucked, then started fondling. The rest, as they say, is undocumented. As I make the grocery list of factors you\u2019ll need, I\u2019ll be referring to my Chinese love kitten often. (She was very American, but with that tight Asian package. I\u2019m missing her, for the moment.) \n\nPart I: Bring the elements together\n\nCan you start touching and rubbing a woman and make her cum? Sure, at the next Super Bowl party for all I care, go nuts. But will you be able to craft the super orgasm? No, it\u2019s important that you prepare yourself and your date for the experience to follow. You don\u2019t have to be in love, but if you are, that\u2019s good too. The weather can be hot or cold, it doesn\u2019t matter, because you\u2019ll create your own heat (that\u2019s literal, not poetic). What IS essential are the following components: \n\nA. FIND A GIRL WHO MASTURBATES. If you want to pull this off the first time, you should start with a girl who isn\u2019t afraid of a big orgasm, and that means a chick who rubs herself. It helps if she knows how to induce her own multiple orgasm, but it\u2019s not mandatory. A girl who frequently orgasms is just a few steps away from achieving multiples, whether she knows it or not, so maybe you\u2019re just the guy to do it. LADIES, if you want someone to do this to you, be a sport and do your homework. Learn to masturbate to orgasm, become addicted to it, then let him know you\u2019re ready to go. \n\nB. PICK THE RIGHT SPOT. (Location, not G-spot, hardy har.) Like I said, the temperature doesn\u2019t matter, but you have to be somewhere that you can build up some steam. A small bedroom will do, but the backseat of a car is best. Avoid saunas -- you\u2019ll have to leave due to dehydration before you\u2019re ready to quit, which would suck. The trick is to get her sweaty without causing her to overheat. Let her pussy get sloppy, keep her licking her lips. A little drool is to be expected, so be a grown-up and let her make a mess. Why the fuck do you think you\u2019re doing this in private? The wetter, the better. Witty!\n\nC. KEEP THE LIGHTS OFF. I know I know, you both want to look deeply into each other\u2019s eyes, and you think it will be sexy to watch each other. Take it to Aruba or some damn place, because it won\u2019t work here. Girls are what they are, and if she starts to get self-conscious about being watched, she\u2019ll pull the emergency brake. Logically, she knows they\u2019re your hands, so it shouldn\u2019t matter, but logic isn\u2019t a factor tonight. Just trust me the first time; you can experiment later, you freak you (wink). ALSO: No music, no TV, no fans, no toys or lubricants, no exceptions. \n\nD. KEEP DRINKING LIQUIDS HANDY. Nothing spoils the party like a girl with blurry vision. China Girl wanted to keep going past the third hour, but her throat hurt from dryness, so she made me drive the car to a gas station and get her a big cup of ice water. Fortunately, I was able to keep her naked in the back seat (the windows were steamed to opaqueness, thank goodness), and I reached back while I drove and continued to finger her. She came three times before I got back to the parking spot. You may not be so lucky. \n\nE. KEEP IT SECRET. If you\u2019re planning on doing this to your sweetie, and she doesn\u2019t know yet, that\u2019s the best way to start. I\u2019m a big fan of telling each other what you want (to the left, harder, oh baby), but this particular event requires a subtle touch and a good deal of patience. If you can gently get her in the mood, without a lot of the blah-blah-blah we boys are famous for, you\u2019ll be in a better position to maneuver emotionally. Does that make sense? What I mean is, when the woman knows she\u2019s expected to have multiple orgasms, she\u2019ll try too hard, and you won\u2019t be able to charm and woo her back onto the orgasm path. With the expectations missing, there\u2019s nothing to do but let go and plow ahead. \n\nF. TAKE THAT GROUP SHIT SOMEWHERE ELSE. I have two things to say to those kids who have sex on the floor at a crowded college party. First, your parents secretly wish you\u2019d been kidnapped at birth. Second, you won\u2019t be able to do what I\u2019m describing here with twenty beer-swilling fraternity brothers looking on. Get in the back seat on a moonless night, and don\u2019t tell anyone where you\u2019re going. This is about two people devoted to ONE woman\u2019s pleasure, not mutual gratification, and sure as hell not a successful gangbang. For conservative married men reading this, well, you\u2019re the star pupils. \n\nPart II: Fuck her brains out\n\nBefore you guide your woman into an ocean of bliss, you must put yourself in the right frame of mind. In other words, you won\u2019t be able to concentrate on her orgasms when you haven\u2019t had one of your own. So go ahead and bend her over, pop that cock in her hole and start fucking. Cum hard once, twice if you really don\u2019t think you\u2019ll be able to stand it (and by the way, good for you with the double-cumming, dude). \n\nThe added benefit of this step is that you loosen up those cunt lips, moisten the vagina, harden the clitoris, basically get her in the mood for more. IMPORTANT: Touch her body during the sex. Sounds obvious, doesn\u2019t it? Watch any porno flick to see how easy it is to forget to touch one another. Hold onto her hips, fondle her boobs, suck on each other fingers. If you don\u2019t, you\u2019ll have to overcome that insecurity later in the evening. Get her used to the feeling of your hands and mouth on her body. THIS IS KEY. \n\nPart III: Develop the scene\n\nSo you fucked, and she\u2019s happy. Did she cum? Doesn\u2019t matter, and I mean that seriously. The dick-in-vagina session was just to get the guy off, so make that your goal in that phase. She\u2019s about to get hers. However, even though you don\u2019t need her to orgasm during the intercourse, you do need her to feel emotionally safe and physically comfortable. How do you do that? Sorry punk, if you\u2019ve read all this looking for the way to charm a woman, I can\u2019t help you. There has to be at least some part of you that believes in romance and treating a woman right, or at least the ability to seduce a woman so you can get into her pants. You ripped-abdominals gym monkeys who hook women with your pecs and roman noses will find nothing in my instructions you can use. Go back to the college party gangbang and leave my technique to the professionals. Although, you can at least give it a shot with these next few tips...\n\nA. CUDDLE, CUDDLE, CUDDLE. Remember what I said about constantly touching? Sure you do, punk. Keep your damn mouth shut and just hold her for a while. Run your fingertips up and down her belly, lick her neck, kiss her earlobes, massage her leg muscles. DON\u2019T tickle her, or at least cut it out after you find a spot. For fuck sake, just roll around with each other for a bit. Play with her hair, on both ends. If she\u2019s sweating, wallow in the sweat. Pinch her nipples a little, fondle her tits. You know, cuddle! \n\nB. SLOWLY CREATE A MICROCOSM OF LUST. Look for the right moment for cuddling to develop into genital manipulation. Go down on her, finger her, or combine the two. Basically, take your time getting her to cum using your hands. Don\u2019t stop cuddling! If you\u2019re fingering her vagina, then don\u2019t stop kissing her neck (read the women\u2019s websites to find out where the goddamn G-spot is). If you\u2019re rubbing her clitoris (same website), then keep pressing your tongue to her breastbone and under the bottoms of her breasts. If you\u2019re eating her out, run your hands up and down her sweaty hips and torso, or entwine your fingers in hers. WHAT YOU\u2019RE LOOKING FOR is a series of two or three orgasms accompanied by nothing but darkness, moaning (however that sounds for your date), and body language encouraging you to continue whatever the hell you\u2019re doing to her. \n\nPart IV: Craft the super orgasm\n\nTime to put the pieces in place. TIMING IS ESSENTIAL. You\u2019ve brought her to orgasm at least two or three times through genital manipulation. Now, start to cuddle again. You\u2019ll find that this second round of cuddling is more purposeful than the first. Your date is more aware of her body and of yours, her body temperature has increased along with the atmosphere around you, her skin is sweaty, and her muscles are taut either from remembrance of the previous orgasm or anticipation of the next. \n\nWhat you have is a girl who wants to cum again but needs a break. You\u2019re about to trick her into believing she\u2019s getting a break, but actually, you\u2019re setting her up for the next round. Here\u2019s the timing: 1) Finish licking or rubbing her pussy, and make her cum. 2) Lie beside her and fondle her tenderly. 3) When she responds to any touch -- e.g. kissing her neck, licking inside her ear, pinching her nipples (these three are great starting points) -- keep that touch going. 4) Continue that touch until she cums. 5) Gently decrease your pressure while she cums, then pick right back up again before she\u2019s completely done. NOW she\u2019s in a state of multiple orgasm. It takes a subtle hand, requiring you to \"sense\" when to back off and when to go faster or rougher. Just keep building the orgasms wave on wave. DO NOT FUCK HER WITH YOUR DICK. This immediately puts her back in the \"must please partner\" frame of mind. Lesbians, put a hold on that sixty-nine for another night. \n\nYou don\u2019t believe it can be done? What can I say. In this state, the woman will cum when you BREATHE LIGHTLY on her neck. Her body is one big nerve just waiting to be struck, and you can have some real fun striking it. You\u2019ll be amazed at the ways in which she responds, like a piano with a hundred keys (or however many fucking keys a piano has). Here\u2019s a short list of touches you can use to cause an orgasm while she\u2019s in this state: 1) Lick her labia (genitals are off limits for the first two orgasms of this phase, then revisit at your discretion). 2) Finger her (never fist). 3) Gently nibble or pinch her clit. 4) Suck her clit. 5) Lick her clit. 6) Lick her inner thigh. 7) Blow on her tummy. 8) Pinch or nibble her nipples. 9) Blow on her neck. 10) Lick her neck (avoid hickey-style sucking, UNLESS she responds -- remember, pain will cause a lingering sensation that is counter to the mood you are creating). 11) Finger that asshole, or lick it clean. 12) Try a number of different moves on her ears, including sucking the lobes and inserting your tongue. 13) Suck her toes -- works like a charm! \n\nA. PAY SOME GODDAMN ATTENTION. If you follow my simple step-by-step instructions, you will fall on your face, and not in a fun S-M kind of way. Use the darkness and wetness to your advantage, to create an ongoing bond of communication between your hands and her body. Every electric current needs a complete circuit, and once you break the circuit, you have to start all over. BE PATIENT, watch the signs, attack areas of the body when encouraged by signs. \n\nB. IF YOU HAVE TABOOS, GO TRY A DIFFERENT \"HOW TO.\" This is about the girl\u2019s pleasure, so you may have to experiment. (Toe-sucking and ass-licking are almost essential.) If you think you\u2019ll earn her respect by being coy and sincere, or if you don\u2019t want to violate her, then you should just fuck each other and go to sleep. The super orgasm requires a degree of adventure and imagination. \n\nC. IGNORE ALL HER COMPLAINTS EXCEPT ONE. When she says, \"I\u2019m gonna pass out,\" she means it! Take a break, give her some water, move your hands away, and don\u2019t speak. If this is her first time to multiple, you may just have surprised the shit out of her. Fortunately, you should be able to resume once she\u2019s had her second wind. Other than that, don\u2019t stop for anything. She may not know she can multiple, and when she experiences the first one, she\u2019ll want to stop. Seduce her, damn it! Touch, caress, fondle, stroke, keep her in a state of hungry passion from which she\u2019d be insane to escape. Eventually she\u2019ll lose the ability to reason, and you may continue triggering her orgasms at will. \n\nD. DON\u2019T BE A SELFISH ASSHOLE. What did I say about intercourse? Gimme that (throws it in a drawer, slams it shut). Tomorrow, she\u2019ll give you the blowjob of your life, but tonight she wants to keep feeling whatever you made her feel. \n\nConclusion\n\nWell sure, you have my word that the super orgasm technique described here is amazing and will change a woman forever, but what proof do I have? Try this on, wonderstud: Before I used this technique, every girl I dated dumped me (apparently, I\u2019m too honest and aggressive). Of the five I subjected to the full-body workup, one-hundred-percent told me they loved me without any provocation, nor reciprocation from me. LOVED, dude. They confused the six-hour orgasm session with TRUE LOVE. Holy shit. If you think you have what it takes, whoo hoo for you. \n\nBE WARNED: The super orgasm is not for impatient busters who are bored with the missionary position and will try anything. You need to be patient and determined, and it wouldn\u2019t hurt if you (the dude or lesbian about to perform the technique) have that certain fetish that compels you to make a woman cum over and over. \n\nADDITIONAL WARNING: There\u2019s a certain kind of girl out there who shares your fetish, and she\u2019ll feel guilty about not pleasuring you more, at which point she\u2019ll try to suck you off or offer her wet hole. Gently explain that you appreciate the gesture, but tonight is her turn to feel like a princess (concubine? Don\u2019t say concubine) so she should roll over and let you keep licking her shoulder blades and asshole and that spot between her big toe and her second toe. She\u2019ll smile, say thank you, and flip over. \n\nI\u2019d love to know if this was successful for anyone, and if it wasn\u2019t, you did it wrong, but tell me that too. And China Girl, if you\u2019re reading this, know that you are my number one fantasy, you sexy masturbating fiend. Smooch. "
    ],
    "authorname": "Lothario the Great",
    "tags": [
        "college party",
        "china girl",
        "clit lick",
        "multiple orgasm",
        "lick neck",
        "frame mind",
        "woman cum",
        "kissing neck",
        "woman",
        "orgasm"
    ],
    "category": "How To",
    "url": "https://www.literotica.com/s/fingers-of-fury"
}
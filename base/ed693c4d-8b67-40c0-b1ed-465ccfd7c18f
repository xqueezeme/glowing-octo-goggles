{
    "title": "Selected for Sport Ch. 07",
    "pages": [
        "A new jolt of fiery emotions shot through Alanna when gentle fingertips touched the sensitive flesh between her parted thighs. Desire brushed her, excruciatingly rich, while her knees slammed shut on the maid's hand. Her spine had yanked straight, and she was trembling with tension and distress even while a throbbing ache pulsed inside her, her alarmed gaze leaping to the gleaming black eyes of the Great Tahl where he lounged, watching. \n\nXanir absorbed that unspoken plea, pondering. The room was still for a moment, and then he sighed, uncoiling springily to his feet and stepping over to sink onto his haunches just in front of his new bride. Alarm was acceptable, at times desirable, but not fear. Yet she had to learn. He held her gaze as his calloused hand slid gently over her cheek, thumb brushing away the moisture trembling at the corner of her eye, lingering to stroke soothingly over her delicate cheekbone, a warm touch of calm.\n\nThe Tahl's deep voice was quieting as he murmured something, looking steadily into her blue eyes, his own unthreatening, and then he leaned in closer. Alanna's eyes slid closed as a soft kiss was pressed to each lid in turn. She was bewildered by this man, the tremble in her growing stronger. Gentle and yet so damn unyielding.\n\nShe took in a deep breath, eyes still closed, starkly reminded of that contrast as even while his thumb continued to stroke the cheek he held cupped in one hand, the other pushed inexorably between her clenched knees and twisted, forcing them apart. After a second she gave up the fight and let him push them to the edges of the tub, wider than before. She had no choice, and had begun to realise how ineffectual fighting him was. She kept her eyes closed, head dipped forwards, her tremble growing as the smooth fingers of the maid slid into her private folds, massaging. A new scent arose, a different soap. Her breathing was erratic, rising with a mixture of distress and lust, and she struggled against the desire rising in her blood at those gentle, circling brushes.\n\nHis deep breathing sounded stronger this close, more compelling. Alanna flinched involuntarily as one careful finger probed her vulva, a wince escaping at the sensation on her torn flesh. Her face turned into the palm cupped to her cheek and she leaned on him, breaths short and shallow while the invading digit pumped gently in and out, twisting slightly, the sharp sting dying then renewing. \n\n\"You were not gentle, my lord,\" the Mistress of the Chamber observed quietly.\n\n\"She was very wet,\" Xanir Tahl replied gruffly, his cock straining with increasing lust as he looked down past those magnificent breasts, watching the fingers teasing those soft folds. His spine ached in memory: the sensation of sliding inside her tight passage. The soft, helpless noises she had made. His chest rising and falling quickly, he brushed her fine hair aside to tilt her face and breathe his heavy, harsh desire into her ear. Words were not needed. Delightfully, her tremble grew in quick panting breaths in return, chest heaving. The blood surged in him. \n\n\"It would be well if you would leave her until tomorrow,\" the Mistress admonished quietly. \"I will apply athil to soothe the entrance.\"\n\nThe words merely amused and aroused him further. He knew his bride was sore, but his blood was surging with the need to imprint himself on her, see her gasping with pleasure under his invasion again. And so he would be gentle, gently draw from her those desperate sounds of delight, ensure the same lush, wet, eager welcome awaited him as before. Tomorrow? Not a chance. \"Your advice is noted,\" he murmured in reply.\n\nWell, he would be as gentle as was appropriate.\n\nThe Mistress of the Chamber said no more. Her position in the court relied upon correct interpretation of the moods of the Great Tahl, together with teaching his many concubines and succession of brides to respond to them in the manner most pleasing to him.\n\n\"Enough,\" he growled. Xanir uncoiled swiftly from his position squatting beside his bride, stripping off his trousers and moving to stand naked, feet planted either side of the tub, directly in front of Alanna's face, voice quiet as he gave another order. \n\nAlanna was relieved, despite the surging disappointment in her blood, when the intrusive fingers withdrew. A second later she drew in breath sharply, recoiling as the rigid, moist tip of his erect cock daubed her cheekbone. Her spine tingled at the feel, the smell of their mingled juices coiling heavy in her nostrils, repelling yet exciting, and her eyes leapt to his. The abandoned nub between her legs throbbed. That look. Eyes smiling, his hands closed gently yet firmly around the back of her skull and he pulled her toward him, until the head of his throbbing, eager member was millimetres from her forehead.\n\nAlanna realised that the maid had untied her wrists, and now a warm, soaked sponge was being pressed into each palm. She sighed in relief at the freedom. The breath of air made the cock in front of her twitch, and the gleam in Xanir's eyes as he looked down at her deepened.\n\nShe flushed gently but didn't resist as the maid's hands closed around her wrists from behind, and lifted hers to gently stroke the sponges from base to tip of the rampant cock in front of her face. She rinsed them swiftly in the tub, then repeated the moves again and again in a swift, rhythmic massage, eyes never leaving his. She felt like she was being hypnotised, mesmerised by the throbbing power dabbing at her face. And in his eyes. The ache to feel him inside her.\n\nThe maid took the sponges from her, and lathered up Alanna's hands with yet another different-scented soap, then she was taught to rub gently on the heavy sack under the root of his member, teasing bubbles across every inch of the sensitive skin. His cock twitched, and he let out a sigh of pleasure. Deep blushes stained her cheeks. The pulse in her neck was throbbing in time to the stroke of her hands, the deep tremble within her belly tightening again as his fingers in her hair guided her lips to run gently against the moist tip facing her. Her nipples stretched towards him, tingling almost painfully. \n\nThe maid closed Alanna's grasp more firmly around the shaft straining towards her, and she was taught a different rhythm, squeezing as she stroked both hands up and down the long pole while the woman poured water along the hard length. It grew in front of her eyes, straining towards her, and Xanir thrust his hips forward, the smooth tip pushing between her parted lips, painting her tongue with a salt-sour, strange taste.\n\nHe bent, and a firm grasp clamped around her damp ribcage. Alanna squeaked, hands tightening about his shaft when she was lifted up, and the Tahl marched impatiently sideways to deposit her on more towels padding the base of the second tub, thumbs lifting to tease lightly over her aching nipples when he straightened. She gasped aloud, hands squeezing around his straining cock, and heard a harsh intake of breath, then a chuckle. Clean water cascaded over her skin and his, bringing her back to herself, and Alanna knelt back, took a short, steadying breath and resumed stroking the insistent length in front of her, moisture pooling between her thighs. She wanted to do this right.\n\nXanir tilted her head back, thumbs brushing her cheekbones as he smiled down at her, and gently lifted her hands away, his voice gravelly as he gave another brief command.\n\nThe woman's firm fingers pulled Alanna's arms behind her again, binding something tight around the elbows this time, thrusting her throbbing, swollen breasts forward. Xanir's smile hardened to something more dangerous, more compelling. She didn't resist, eyes held by the fire of those looking down at her, accepting that her future was his to determine. Her blood was longing for that future, for that demanding jut of flesh, coursing in excitement, shortening her breath. The heavy cock in front of her surged as her sigh played over it, and she opened her mouth to exhale warm air on the tip. Xanir grunted in pleasure, his thumbs stroking her hair.\n\nShe wrinkled her nose when the maid turned her head to the right, to face her. The Mistress opened her own mouth in demonstration, extending her tongue, and a finger tapped on Alanna's cheek. Another lesson; Alanna's blush deepened, together with the racing excitement in her blood. Would this please him? A internal wisp of longing: could she get him to grunt again, pull from him the noises that he had teased from her with such skill? That would be worth learning.\n\nShyly, she turned her head back to Xanir, opened her mouth and extended her tongue. The maid pushed between her shoulder blades, lifting her to kneel more erect until her open mouth was high enough for the throbbing cock waiting before it. Alanna felt an unyielding, wide wedge of something padded, yet with a firm core, being placed on her calves and pressed into the joints behind her knees, a triangular partial seat angled to hold her kneeling semi-erect as she was settled back against it. Xanir rubbed the tip of his cock casually against her distended tongue while the maid lifted her again and tried different sizes of the wedges, before hitting upon one which held her mouth at the most pleasing level for him when she was draped back against it and her head tilted backwards.\n\nImpatiently, Xanir pushed his cock further into the warm cavern, hands cradling her head while he plunging it against the back of her throat, watching her eyes tear and her chest heave with the panic rocking in her eyes. He stroked the tear away, smiling down at her as he withdrew and let her breathe, her lips brushing the sides with exquisite yet unsatisfying softness.\n\n\"Teach her to suck,\" he ordered softly."
    ],
    "authorname": "SmileWhenYouMeanIt",
    "tags": [
        "bathing",
        "being washed",
        "being watched",
        "hand job",
        "taught",
        "tongue",
        "kneeling"
    ],
    "category": "First Time",
    "url": "https://www.literotica.com/s/selected-for-sport-ch-07"
}
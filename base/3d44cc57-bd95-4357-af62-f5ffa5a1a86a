{
    "title": "The Cursed Tattoo Pt. 09",
    "pages": [
        "Andy 3: Andy's Angels\n\nAndy kept spying on Ryan and his girls. Ellie had left him alone since he had reported the ninja attack to her but she had never explicitly told him to stop, and he couldn't stop.\n\nSome days later, he had seen the whole group leave the house together, and then four days after that, just as he was about to get worried, they all came back. Natalia, Claudia's tall and beautiful secretary, told Andy that the boss was on a business trip but he knew that wasn't true because Ryan and the crew had gone with her.\n\nA few days later Ellie showed up at the cafe and told Andy his gig was officially canceled. She did threaten him a little bit, but something seemed off. It looked like her heart was not quite in it anymore. Andy was angry but there was nothing he could do about it. He tried to stop.\n\nHe tried to talk to Annie at work but she didn't want to talk to him about her private life. Annie had changed, too. She was still nice to everyone, but a lot more confident. Andy hated to admit it but she had a glow. She used to be beautiful in a shy, cute, and soft way. Now she was powerful and radiant, and even more beautiful than before. Andy sensed she was still angry at him for having seen her naked. That image would keep warming his soul for a long time to come.\n\nAndy had seen the ninjas, he'd seen seen how all those naked women adored Ryan. He'd seen Ellie fight. This wasn't just about curiosity or jealousy anymore. He had to have some answers.\n\nUnable to let go, Andy found a new confidant.\n\n\"Come on. I know you know something is going on. I know you've seen things. You don't need to say anything because I already know you know. I'm just saying, there's a lot more to it than just some... sex scandal. A lot more,\" Andy said.\n\n\"What's that supposed to mean?\" Natalia said.\n\n\"Ryan is holed up in his apartment, and it's not just Annie and Ms. Chandler that go there. He has at least seven women who visit him there, and some of them even live there with him. Annie lives there now, too.\"\n\nNatalia did not believe him, not totally, but over time, he managed to convince her to meet him at his cafe after work. It was a public place, after all. They sat down together and it was definitely not a date.\n\nNatalia only knew of Annie and Claudia so Andy pointed out the other women to her. They spied on them together for a few nights.\n\nSoon Andy was back to his old routine. Screw Ellie. Andy had spied on Ryan's little harem before she had ever caught him. This is a free country.\n\nNatalia joined him a few more times. Andy was developing feelings for her. She was intelligent and beautiful, tall and slim, and he felt sharing this tangentially sex-related hobby with her was somehow making their relationship a tiny bit intimate, too.\n\nOne night Andy was in his usual spot, sipping on a lemon soda, daydreaming about Ellie, and Annie, and...\n\nA young blonde walked in and sat at a table near his. She had her back to him but he recognized her. She was wearing jeans and a shirt, just casual stuff, but she also wore a cap and sunglasses. She kept staring at the door of Ryan's building.\n\nAndy had seen her sneaking around a few times. She had followed Melinda into the building some time ago. Andy hadn't made her that first time but she'd showed up again.\n\nThis was the first time Andy had seen her in the cafe, though. He didn't know if he should try and talk to her. He could use a new ally but the subject matter was a bit dubious. How do you open with a hi, are you spying on the same people I am?\n\nThe girl seemed too young to be a cop or a private investigator. She was also too young and beautiful for Andy's comfort. Besides, he wasn't completely sure if she was even really involved in whatever this all was.\n\nThe next night the mystery girl came back to the cafe. Andy had thought about it and he was sure he had to at least try and talk to her. He wanted to know who the girl was and what she knew. Deep down, he was excited to have a reason to talk to such a beautiful girl. On the surface, though, he was scared, and felt like a creep.\n\n\"Psst, hey, blondie, come over here,\" he shout-whispered. The girl turned to glare at him but then turned back. \"Hey. I just need to talk to you about something.\"\n\nShe didn't react.\n\n\"You're spying on Ryan Dobbs, aren't you?\" Andy said.\n\nThe girl tensed but then turned to look at him.\n\n\"Ha, I knew it. Come over here and talk. I promise I won't bite. It's a public place,\" Andy said.\n\nThe girl hesitated, but joined him at his table.\n\n\"Hi, I'm Andy. I used to work with Ryan. I've been curious about what he's up to ever since he quit -- or got fired, depending on who you ask.\" Andy extended his hand and the girl shook it, maybe a little bit reluctantly. She didn't reply.\n\n\"I've seen you around here and I know you are spying on them, too. Hey, hey, I'm not one to judge. I'm here, too, right? I thought we might help each other out. You tell me what you know and I'll tell you what I know. Together, we might be able to figure out what they're up to in there. Sound good?\"\n\n\"Okay, tell me what you know,\" she finally answered. The girl was scared and nervous. Andy felt bad for her.\n\n\"Look, let's do it like this. I'll give you a name and you tell me what you know. Okay?\"\n\n\"Okay.\"\n\n\"Ryan,\" Andy said.\n\n\"I think he's a drug dealer,\" the girl said.\n\n\"No, I don't think it's drugs. I thought that, too, at first, but so much more is going on. I know the girls seem a bit too happy all the time, but I don't think it's drugs. I hate to say it but I think they really are just happy.\"\n\nThe blonde was surprised.\n\n\"Ellie,\" Andy said.\n\nThe girl smiled. \"She seems cool. She told me she does private security and martial arts and stuff, and I believe her, kind of. If Ryan is a dealer she might be his bodyguard. I've seen her around, you know, glimpses here and there, like she's been following me, but somehow I'm not scared. For some reason I just feel like she's not there to threaten me,\" the girl said.\n\n\"Okay. I agree she's pretty impressive, and she's a bad-ass. She doesn't work for Ryan, though. She told me she's the boss and I believe her. And again, I'm fairly sure they are not drug dealers,\" Andy said. He gave the next name, \"Annie.\"\n\n\"Who's that?\" the girl said.\n\n\"Claudia?\" Andy continued. The girl said nothing but she looked increasingly perplexed. \"Remy? Lizzy? Melinda?\" Andy went on.\n\nThe girl cracked. \"Okay. Okay. My name is Hannah. Melinda is my mom. If you know anything about what she's involved in, please just tell me.\"\n\nAndy was shocked. He was beginning to realize the girl knew nothing. And also, she was Melinda's daughter? \"Sorry, how old are you, exactly?\" he said.\n\n\"I'm eighteen.\"\n\n\"Wow... I mean, wow. Really? And you're Melinda's daughter? I did not see her having an adult kid. Your mom is way too hot to... Uh, sorry. That was creepy. Heh.\"\n\nDespite all that, Hannah was hooked, and the conversation went on from there.\n\nAndy later introduced Hannah to Natalia. He had had little luck convincing Natalia to come over to his place, to see his investigation board. But now that there were two women, he managed to convince them to come over. Natalia wanted Hannah to come with them because she did actually want to learn more about Andy's investigation. Eventually, Hannah agreed.\n\nAndy really did have a whole wall in his apartment dedicated to Ryan and his girls. He told Natalia and Hannah everything he knew. They were both shocked. They each had only known about some of the women, neither of all seven.\n\nAndy also told them about how Ellie had recruited him to spy on her housemates, but he left out all the sexy details. He did warn Natalia and Hannah that Ellie was a master at lying and manipulating people, though, and maybe a bit of a psycho. Natalia believed him completely. Hannah had a harder time, she still liked Ellie.\n\nAndy insisted he was sure Ryan was having relations with all of the women. Hannah was ready to leave, but Natalia convinced her to stay. Natalia wasn't that comfortable with the situation, either, but she wanted to hear all of it. Natalia could confirm to Hannah that Ryan was having some kind of an affair with Claudia and Annie, at least.\n\nWhen Andy mentioned that recent trip the whole posse taken, Hannah perked up. She'd been sure her mom was lying when she had told her it was just a work trip.\n\nThe three of them spent a few nights together at the cafe, spying. Andy even sent the girls to Lizzy's shop so they could have a look at her.\n\n---\n\nAndy stole glances at Natalia and admired the delicate lines of her neck and jaw. She was breathing heavier because of the adrenaline, and her excitement made her look almost aroused.\n\nHannah, on the other hand, was still grumpy and skeptical. She was the youngest person there, but seemed to be the only one who saw how childish this all was. She started to protest but Andy shushed her.\n\nIt was another \"Claudia night,\" and Andy had managed to convince Natalia and Hannah to follow him inside the building, and all the way up to Ryan's floor.\n\nThe elevator dinged. It was indeed the boss lady herself, Ms. Chandler, who stepped out. Andy and the girls shuffled deeper into the stairwell. Claudia heard something and looked their way but she didn't spot them. She made her way to Ryan's door and reached into her handbag. The spies peeked up from their hiding place to see what she was doing. Natalia gasped when she saw what her boss had in her hand.\n\nA buttplug.\n\nHannah was mortified. This was the first real proof she had seen, with her own eyes, of any kind of crazy perverted stuff going on. But then again, she didn't really know this Claudia woman, or any of these people she was with now.\n\nClaudia took another look around to make doubly sure she was alone. She lifted her tight skirt up to her waist and took a small squirt bottle from her handbag. She dabbed lube on the point of the butt plug and shifted her fancy thong. Natalia gasped again as she watched Claudia push the toy up between her firm cheeks.\n\nClaudia made a few little adjustments to get the thing to sit right, then she pulled her skirt down and rang the doorbell. It was Ryan who opened. He was completely naked, and rock hard. Natalia and Hannah both gasped, blushed, and looked away.\n\nRyan said something to Claudia. She didn't seem happy but she turned around, bent over, and lifted her skirt again. Ryan pulled her panties to one side and checked her. He copped a good feel, too. He seemed happy with what he saw. Only then did he let her in.\n\nNatalia and Hannah were in complete shock. Neither had ever seen anything so perverted. Natalia was also mortified to see Claudia, specifically, in such a situation.\n\n\"See, what did I tell you?\" Andy whispered.\n\n---\n\nRyan let Claudia in. She was only halfway into taking her jacket off when he grabbed her and lifted her off her feet. He pushed his hand under her skirt and inserted two fingers into her pussy. She wasn't even wet yet, but gushed as soon as he pushed some energy into her. He knew just how much it took to edge her.\n\n\"Remy, bring the cuffs,\" Ryan said.\n\n\"Yes, Master.\"\n\nRyan continued to juice up Claudia. Remy came back and gave the pink, fluffy handcuffs to him. He spun Claudia around and cuffed her wrists behind her back. He tore open her shirt and pulled down her bra. He went back to fingering her and gave her left tit some nice slaps. Once she was panting and moaning, he pushed her down to her knees.\n\nClaudia didn't protest. She has come a long way, Ryan thought. Without any further direction from him, she started to suck him, deep down into her throat.\n\nAnnie and Lizzy were also there, alongside Remy, and they were all watching. All of them were just in their panties and high heels.\n\nThen the doorbell rang again.\n\nRemy went to open. She hurried so that Ryan and Claudia would have no time to stop. Remy didn't even bother to cover herself. She liked to troll food deliverers and such by showing them some skin and maybe little glimpses of what went on in their home.\n\nThis time, though, there was a strange woman there. Young, beautiful, tall and thin. She was wearing a prim skirt suit. \"Let me in. I demand to speak to Claudia Chandler,\" she said. Her voice was timid despite her anger. She tried to push in but Remy held the door.\n\nRemy hadn't used the security chain, though, so Natalia managed to get her foot in the door, and then pushed through. She saw her boss on the floor, her breasts exposed, and Ryan's huge cock hovering at her cheek. Natalia didn't know how to feel.\n\nClaudia, on her part, was mortified to have her secretary, yet another one of her subordinates, see her like this.\n\n\"Ms. Chandler, you don't have to do this. Whatever is going on here, I'm sure it doesn't have to be like this. Please, come with me, and we can call the police or something,\" Natalia said.\n\nNo one answered. Remy closed the door behind her.\n\n\"Ms. Jordan, why are you naked?\" Natalia said, to Annie, who was still watching by, too stunned to move.\n\nAfter a moment of indecision, Annie went from shocked to angry. She stopped trying to cover her breasts and let her arms drop. \"This is my home. I can wear whatever I want. What are you doing here?\" she said.\n\n\"I came to get Claudia. You've done something to her, and forced her to be like this, but it's all over now. She's coming with me and the rest of you can deal with the cops,\" Natalia said. She was shaking and her voice trembled. Still, she was determined.\n\n\"Come on, Natalia, calm down. What are you even talking about? This is our home. You can't just barge in here like this,\" Ryan said.\n\nNatalia looked him in the eye, and then at his cock. She blushed and turned around. She saw that Remy had closed the door and felt her panic go up a notch. Natalia evened her breath and turned back. \"Claudia, please, what's going on? Please, just come with me.\"\n\nClaudia was still on her knees next to Ryan and it was impossible for Natalia to look at her without seeing the big cock hovering right next to Claudia's mouth.\n\n\"Miss Dobrova, please leave. What I do in my private life is none of your business. You are seriously violating my privacy, and the privacy of everyone here, and if you talk about this to anyone, I will fire you,\" Claudia finally said. She was at the brink of tears. Usually, she was always just angry, but something was different this time.\n\n\"No. I don't believe you. He's blackmailing you, isn't he?\" Natalia said.\n\n\"Ryan is not blackmailing anyone. We are just... I don't need to explain myself to you,\" Claudia answered. She could not quite bring herself to say anything more in front of Ryan. Having Natalia see her like this was one thing but the idea of letting Ryan hear her defend him was even worse. She loved having sex with him but she would never let him hear her say so.\n\nNatalia looked around. All the women were angry at her. Somehow, even though they were topless, they seemed to have taken the moral high ground. Natalia lost her righteous fervor, and with that, her anger and her courage were gone, too. She turned to make a hasty retreat.\n\n\"No way, bitch. I don't trust you. I don't know who you are or why you're here. I'm not letting you go anywhere until we get some answers. You can't just threaten people like that,\" Remy said.\n\n\"What? Let me go! You can't keep me here against my will.\"\n\n\"You should've thought about that before you forced yourself in. You can't have it both ways.\"\n\nNatalia panicked for real now. She took her phone out and started dialing. Remy rushed her and fought her for it. Ryan went to step in but then realized he couldn't touch Natalia. His relationship with the curse had changed, but touching someone was still unthinkable.\n\nAnnie went for Natalia, too. The three women, two of them topless, were rolling all around the floor, fighting for the phone. Eleftheria walked over and casually reached into the melee. She deftly snatched the phone without anyone even touching her. The other girls wrestled Natalia to the floor.\n\n\"No! You whores! Let me go!\" Natalia shouted, as they pinned her down. Remy covered Natalia's mouth. She shushed her until she stopped struggling. Then she took her hand off, just to test her. Once Natalia seemed calm again, they let her back up.\n\nClaudia stood up and Ryan took the fluffy cuffs off her wrists. She fixed her bra and buttoned up the one remaining button on her shirt. Ellie had given Natalia's phone to Ryan but he gave it to Claudia. She put it in her purse.\n\nClaudia was still very horny and she started stroking Ryan's erection. It was one of those moments where she totally compartmentalized the implications of her actions, blocking out all thought of what it must look like. The energy warmed her soul and calmed her nerves, and she knew connecting with it right now was the right thing to do, no matter what. The warm, familiar power centered her and helped her clear her head.\n\n\"Natalia, I'm holding on to your phone for a while, but I will give it back to you. Even though we have nothing to hide, I don't want you calling the cops on us. We don't need any more intrusions,\" Claudia said.\n\n\"Could you at least put some pants on?\" Natalia said, to Ryan.\n\nClaudia hissed and blushed as she realized what her hand was doing. She let go of the cock.\n\n\"Look, you kind of walked in in the middle of something here, and...\" Ryan started to explain.\n\nClaudia finally snapped. She was ridiculously horny and she could not take the embarrassment anymore. It all just added to her lust. She had to get out of this situation right now, no matter what.\n\n\"Shut up,\" she said to Ryan. \"Girls, watch her until I get back. I have something I need to do.\" Claudia grabbed Ryan by the cock again and dragged him into the bedroom. She did close the door, though. That was something the girls rarely cared about anymore.\n\nNatalia was flabbergasted. Most of the other girls blushed from embarrassment. Natalia wanted to protest somehow but she did not have the words for it. Ellie caught her eye. She pointed at the sofa and Natalia complied. In her skimpy white toga dress, Ellie was one of the most dressed women there.\n\nThe others let Natalia walk to the sofa. Remy got a chair for herself and planted it in front of the front door. Annie went to get some shirts for the girls.\n\nRemy held her post as the other women settled on the couch. It was still Ellie, watching her from further away, like a hawk, that made Natalia feel like she had no choice but to do as she was told, so she took a seat.\n\nBefore they had had any real time for a proper awkward silence, Claudia came back out, totally naked. She skipped across the room and grabbed the fluffy handcuffs. She said nothing and made no eye contact with anyone. She ran back into the bedroom and closed the door again. Now, the silence was properly awkward.\n\nAfter a moment, Lizzy put the TV on. \"So, I'm Lizzy. You're Natalia, right?\" she said, but got no answer. \"Are you a friend of Claudia's, or?\" Still no answer.\n\n\"She's her secretary,\" Annie said, from the other end of the couch. Natalia was sitting between them.\n\nAt least they have shirts on now, Natalia thought. Even in the weird situation, she noted that their casual wear was kind of cute.\n\n\"Oh. Well, I'm really sorry about the whole misunderstanding here, but if you could just wait for a while until Claudia is... finished, I'm sure she can come with you, or whatever you were planning,\" Lizzy continued.\n\nNothing threatening was really happening right then so Natalia relaxed a bit, but only until the sounds of sex started rising from the bedroom. The TV wasn't quite loud enough to cover them. Natalia saw how that sound affected the other women, too. Everyone blushed. They continued to watch the TV. No one said anything but everyone was fidgeting nervously, even Natalia.",
        "Eventually, Remy broke the awkward silence -- silence, except for the TV and Claudia -- by coming over to Natalia. Remy leaned over the back of the sofa and brought her purple lips very close to Natalia's ear. \"You know, I could be in there with them. Instead, I'm stuck here with you. What's your problem lady, really?\"\n\nNatalia tried to get up but both Lizzy and Annie held her arms gently, just enough to stop her. \"I don't believe for a second that Ryan Dobbs just suddenly found seven new girlfriends, and all of you just happen to be okay with all of this,\" Natalia said.\n\n\"We are all happy here, and we love each other. Why are you so threatened by that? Do you have a secret crush on your boss, or something? I have to admit, she is gorgeous. Do you want to know what she tastes like? Hmm? Lizzy, come and give me a kiss. Let's show this bitch how much we love each other in this house,\" Remy said.\n\nLizzy blushed. She knew it was a bad idea but she was feeling frisky now, too, because she could hear Ryan at work in the other room. She smiled a wicked smile and reached up to kiss Remy, right over Natalia's shoulder. Natalia was petrified.\n\n\"Come on, Remy. You know how Ryan and Claudia can get. You may be into that stuff, but you must know other people might not... understand their relationship. Natalia is just genuinely worried about Claudia, so cut her some slack. You know how that stuff can look to an outsider,\" Annie said.\n\nLizzy stopped and backed down. Remy sighed in frustration and stood up.\n\n\"Natalia, please, don't worry about us. We are all happy here. Just go back to your life and let this whole thing drop. Whatever you are worried about is not happening. Claudia is safe here,\" Annie said.\n\nThen the doorbell rang again. Everyone froze. Remy went to check it. She had no intention of opening, though. She even put the safety chain on this time. She looked through the peephole. There was a worried looking young woman on the other side. \"It's some blond girl,\" she said.\n\nNatalia turned to look. \"Is it Hannah?\" she said, hoping for rescue.\n\n\"Who the fuck is...\" Remy said. Then she gasped and peeked again. \"Oh shit, it's Hannah. I can see it, the resemblance. It's Melinda's Hannah,\" she hissed.\n\nShe turned to look at Natalia. \"How the hell do you know Hannah?\" Remy said.\n\nNatalia winced.\n\n\"Hey, wait a minute, does she look kinda like her mommy, but taller? Not as tall as you, but taller than Melinda?\" Lizzy said.\n\n\"Yeah,\" Remy said.\n\n\"You two came to the shop! They came to the shop when I was working. They were checking me out. They've been spying on us,\" Lizzy said. She poked Natalia accusingly. \"Have you been hanging out with that guy? That, what's his name, Andy? You work at the same place, don't you? Did you know Ellie already told him to stop?\"\n\nNatalia took one glance at Ellie and she broke. \"I'm sorry. I just wanted to know what's happening. Something is wrong here and you're not telling me. I was worried about Claudia, and you, too, Annie. I just wanted to help you,\" Natalia said.\n\nHannah rang the doorbell again.\n\n\"I can't let her in. Melinda doesn't want her here,\" Remy said. She sat back in her chair, dejected.\n\nThe silence continued again, except for the TV and Claudia. They were really getting going in the bedroom now and the dirty talk was enough to make Natalia cover her ears.\n\nRemy was staring at the bedroom door, her foot tapping nervously.\n\nOutside, Hannah eventually stopped trying the doorbell, but she was still sitting next to the door when Erica got out of the elevator. Andy was long gone by then. He had tried to stop Natalia from going to the door, but as soon as he had realized the was no stopping her, he ran. Hannah had stayed.\n\nRemy snapped out of her funk when she heard a key in the lock. The door opened, but got stuck on the security chain. Remy could hear Erica on the other side. She told her to wait and then released the door.\n\nErica was there, but so was Hannah. She was scared, but came in anyway. She took a worried look around the whole apartment. She was relieved to see Natalia. Natalia got up and ran to her and the women hugged. Remy closed the door again.\n\nNatalia and Hannah's reunion was made awkward by the sounds of rough sex carrying from the bedroom.\n\n\"Who's in there?\" Hannah said.\n\n\"Don't worry. Your mom's not here,\" Remy said.\n\n\"She knows. We already called Melinda. She's on her way over,\" Erica said.\n\n\"It's my boss, Claudia. You saw her come in,\" Natalia said. \"They've been going at it for ages now, and whatever these people say, that's not normal.\"\n\n\"Fuck this shit. You don't need me here anymore,\" Remy said. She ran for the bedroom, discarding her shirt on the way. A waft of muskiness escaped the bedroom as Remy went in. Her panties were down to her ankles by the time she slammed the door behind her.\n\n\"Well, that didn't make things any less awkward,\" Lizzy said, and gave a nervous giggle.\n\nErica mumbled something inaudible and started to sidle toward the bedroom, too, but Annie stopped her. \"Please, wait a while longer. We need to show some manners and... be cordial hosts to our guests,\" she said.\n\nHannah and Natalia were completely nonplussed.\n\n\"I'm sorry about that. We don't usually have outsiders... uh, guests here, so the ladies can forget their manners. Except for Remy. She's not much of a lady to begin with, so, sorry about that,\" Annie said. \"Would you like something to drink?\" she added, after a pause.\n\nHannah went to the kitchen and took a glass from the cabinet. She poured the water herself, not wanting anyone slipping anything in it. She poured a glass for Natalia, too.\n\nIn the bedroom, Remy was already screaming as loud as Claudia was.\n\n\"Maybe it's better she's not here, so we can talk like adults. Please, come back to the sofa and let's talk,\" Lizzy said.\n\nHannah and Natalia sat down at one end of the couch. Annie held her place at the other end. Lizzy ended up snuggling under Annie's arm. She burrowed her face into Annie's neck and breathed in her scent. Erica sat down on the rug in front of Annie. She wore Annie's legs like a scarf over her shoulders, and leaned her head on her thigh. It was a relief for them to seek comfort in each other in such an awkward situation.\n\nSeeing the intimacy of the human pileup next to them on the couch made Hannah and Natalia uncomfortable. Annie seemed self-conscious at first, but the other girls didn't seem to care at all. Annie soon eased into it, too.\n\nIt occurred to Natalia that this really was their home, and they had the right to pile up on their own sofa in a quasi-sexual way, if they wanted to.\n\nThere was not that much talking. Luckily, someone had turned the volume up on the TV. It took almost half an hour before a key turned in the lock again. The sex was still going on and Natalia was truly horrified by that.\n\nIt was Melinda. \"Mommy!\" Hannah shouted, and ran to meet her.\n\n\"Oh, baby, it's okay. I'm sorry I didn't tell you. I should have told you, but I didn't know how.\" They hugged. It was a deep and teary crunch. Melinda realized there were sounds coming from the bedroom. \"I'm so sorry you had to find out like this. You must think so low of me now,\" she sobbed.\n\n\"What? Mom, no. I have no idea what's going on, but it's not your fault. Please just tell me what's going on. What are you doing with these people?\" Hannah said.\n\nMelinda looked at the other girls.\n\n\"Claudia kind of blindsided us by taking Ryan, so I guess we need to wait until she's done. Then, maybe we can explain everything to Natalia here, and Hannah, together?\" Lizzy said.\n\n\"I'm kind of in a relationship with Ryan, honey, and it's a bit weird, and it's a bit of a package deal, and I love all the girls here. I wanted to tell you so much, but it's such a strange thing that I just didn't know how. It was even a little bit dangerous, in a way, so I wanted to protect you, too,\" Melinda said.\n\n\"Mom, are you bi?\" Hannah asked.\n\nMelinda smiled. \"Yeah, I guess I would have to say so.\"\n\n\"You could have told me. We always tell each other everything. I would have understood, easily. I would never judge anyone by their sexuality. You know that. You raised me better than that.\"\n\n\"Well, it was really complicated in the beginning. You need to hear it all, I think. Ryan has a say in it, too, but if the girls all agree, then you deserve to know the truth,\" Melinda said. Despite her soothing tone, she did glance at Eleftheria for confirmation.\n\nAll of Ryan's girls in the room got up and came to give Melinda their support. Except for Ellie, of course. They gave Melinda and Hannah a group hug. The honesty of their love for her mom swept Hannah along and she forgot to feel weird about getting hugged by some kind of an apparent sex cult.\n\n\"I think we can make it work. We can take her in, even without the touch. She could be a part of the family, with just us girls, and we can leave Ryan out of it,\" Lizzy said.\n\n\"Wait, what touch?\" Hannah said.\n\n\"I'm sorry. We're just really close, and that's why we consider each other to be like family. What Lizzy here meant is that if you want to, we hope you will consider us your friends. Or just your mother's friends. Or whatever you want,\" Annie said.\n\n\"Your mom is your mom, of course, but she's a little bit like a mom to us, too, sometimes,\" Erica added.\n\nThe women piled back on the sofa. Natalia felt left out so she switched to an armchair. She also felt betrayed, seeing how well Hannah suddenly got on with the whores.\n\nThe sex went on for about ten more minutes, and as the moans reached their crescendo, Ryan's girls in the living room got very distracted once again. Natalia eyed the front door but Ellie was there, her arms crossed, like a proper bouncer. Finally, someone turned on the shower in the bathroom.\n\nEllie told Natalia she would have to wait to talk to Ryan before she could leave. Natalia said he should have done so like an hour ago. Lizzy told her to blame Claudia for the delay. She was the one who had dragged Ryan into the bedroom. Erica could not help herself and had to add that Ryan could have gone a lot longer. \"He was quick out of courtesy, he could have gone all night.\"\n\nHannah was perturbed and that made Melinda angry. Erica apologized.\n\nThen the door opened and Ryan stepped into the room. Luckily, he was wearing boxers. As a reflex, all of his girls got up and ran to hug him, even Melinda. Only Ellie held her post at the door.\n\nAs Hannah and Natalia watched, all of the women kissed Ryan all over. They could not help themselves. For them, the tension had broken the moment they saw him. Erica even knelt at his feet but Melinda was quick to tell her to get back up. Melinda was also the first to break off, and went back to Hannah.\n\n\"Ryan, this is my daughter, Hannah, but you have already met,\" Melinda said. Hannah saw that Ryan was a lot hotter than she remembered. He was fit and buff, when Hannah remembered him as more of an average nerd. His face was still plain, but kind.\n\n\"Hi, Hannah, nice to meet you again,\" Ryan said. \"I... We don't usually have guests so I hope the girls have behaved themselves.\"\n\nHannah got up to shake his hand but Ryan backed off. \"Wow, sorry. I can't really shake hands right now, but...\"\n\n\"Honey, sit down and let us explain,\" Melinda cut in. She pulled Hannah back to the couch.\n\nRyan looked at Ellie. She had been a lot less bossy lately so Ryan realized it was up to him to resolve this situation. The other girls settled back on the sofa and Hannah sat back down, too. The shower was still going.\n\n\"I think we should tell them the truth. Make allies. I think Andy got them to spy on us. I would prefer if they were on our side,\" Lizzy said.\n\n\"I agree. Hannah definitely deserves to know everything,\" Ryan said. \"And I guess you might as well hear about it, too,\" he added, looking at Natalia. \"I've heard you've been loyal to Claudia so I will let her decide if we can trust you.\"\n\nThe doorbell rang again. The girls let out a dismayed groan. Lizzy went to open the door since Remy was still in the shower with Claudia.\n\n\"Police, ma'am. Are you the owner of this apartment?\" a female voice said, from the hallway.\n\n\"No, I just live here,\" Lizzy said.\n\n\"Ma'am, is the owner present? Could I come in and talk with them?\"\n\nLizzy turned to look at everyone. Ryan looked around. To his surprise, none of his girls were topless. His gaze lingered on Natalia. She seemed indignant, but not hostile. He nodded to Lizzy. Lizzy let the officer in.\n\nThe cop was stunningly hot. She had African heritage, her skin a medium shade of brown. Her curly hair was very puffy and the tips were colored blond. Her face was narrow and very symmetrical, and her brown eyes were bright, almost green. Even with the unflattering uniform, her body shape was very pronounced. Her powerful legs and wide hips were contrasted by a spectacularly narrow waist.\n\nShe ignored everyone's stares with practiced ease. She scanned the room and stopped on Ryan. She checked her tablet. \"Mister Dobbs?\"\n\n\"Yes, that's me. I'm Ryan Dobbs.\"\n\nThe cop looked around again and counted seven women in the room. She also heard the shower going. \"I'm officer Emerson, from the PD. Are there people in the shower?\"\n\nRyan realized there was something familiar about her. She was easily beautiful enough to be some kind of an ex-celebrity. \"Yes, uh, two,\" he answered.\n\n\"Let me guess. They're hot white girls?\"\n\n\"Yes?\" Ryan said, even though Claudia could technically be considered quite multi-ethnic.\n\n\"Look. I don't really want to know what you have going on here, dude, but I don't see any drugs or any guns anywhere, so I'm just going to ask: Is there a Hannah Andrews here, and a Natalia, uh, Dobrova?\"\n\nHannah and Natalia stood up.\n\n\"We received a strange call that you were being held against your will here?\" the cop said.\n\n\"No, I'm fine,\" Hannah said.\n\nNatalia said nothing.\n\n\"Could I see some IDs?\" officer Emerson said.\n\nHannah dug around for her wallet and found it. She walked to the officer.\n\n\"I'm her mother and I assure you everything is okay,\" Melinda said, and got her own wallet from her purse, too.\n\nThe officer compared the two driver's licenses. They had the same last name, the age difference seemed to just about make sense, and they did have a similar look. The main thing was that Hannah matched the person described in the call.\n\n\"How about you?\" the cop asked Natalia.\n\nShe hesitated. The shower stopped. Everyone's attention turned to the bathroom door. It opened and Remy and Claudia appeared there, wearing only towels. Both of them were very happy and relaxed, and started giggling as soon as they saw the police officer.\n\n\"Wow. You are hot. Has anyone ever told you that? You're a hot cop,\" Remy said.\n\n\"Thank you, ma'am, for the compliment. Honestly, I hear it a lot. Way too much, actually. Usually from asshole men, but often from tattooed girls, too,\" officer Emerson said.\n\n\"Oh, I like you,\" Remy said, and laughed.\n\n\"Miss Dobrova, could you answer my question, please?\" the cop said.\n\nNatalia snapped to action. \"Oh, sure. Here's my ID. That's my boss. I'm just waiting for her. I don't have anything to do with any of these other people,\" she said. She pointed to Claudia while getting her ID. She presented it to the officer.\n\n\"Okay. And neither of you, or any of you other ladies, none of you are here against your will, or anything like that?\"\n\nEveryone shook their heads.\n\n\"Trust me, honey, there's nowhere I'd rather be,\" said Remy.\n\nOfficer Emerson asked to check the place out but Ryan told her that they were actually in the middle of an important discussion. The cop accepted the excuse. She did look around one more time, to see what she could. The amount of discarded women's underwear on the floors seemed reasonable to her, given the context. She was about to ask something more but thought better of it. She apologized for the inconvenience, thanked everybody, and left.\n\nAfter everyone recovered, the attention turned back to Ryan. Claudia vouched for Natalia, and so Ryan and the girls told Hannah and Natalia a fair bit about what was happening. Not any of the dangerous stuff, but the minimal basics of the curse, and how Ellie was there to help them.\n\nThere was also no mention of Ellie being an angel. Most of the sexual details were skipped, too, and Lizzy slapped Remy every time she tried to slip some in. Both of them seemed to enjoy that little game.\n\nRyan had been worried if they could convince the new girls about all the supernatural stuff, but to his chagrin, both of them were perfectly willing to accept that there could be no other explanation for him having this many girlfriends. Remy managed to make it very clear that the sex was literally mind blowing.\n\nMelinda made some food for everyone and eventually even Natalia took some. It was already getting late in the evening by then.\n\nHannah and Natalia were sworn to secrecy, and not to tell Andy, especially. Hannah was told she was welcome to come visit any time, but that there was always a risk of stuff going on.\n\nHannah went home with Melinda. Natalia left with Claudia.\n\nLater that night, Ryan did some research online. He found lots of pictures and articles about Candice Emerson, four hundred and eight hundred meter college phenomenon. She had been very close to qualifying for the Olympics. Those pictures of her in her tight, skimpy running gear were fascinating.\n\nHonest Mistakes\n\nOver the next few weeks, life around the harem fell into a new normal. Hannah and Natalia stayed away from the apartment but Melinda was very happy and relieved she didn't have to lie to her daughter anymore. Things were awkward for her, yes, but awkwardness was so much better than dishonesty.\n\nFree from pretense, Melinda started spending more and more nights with Ryan. She was pretty much an anything goes kind of woman now. She would join in without any hesitation, or any need for an invitation. Most of the girls were getting to that point.\n\nErica and Eleftheria continued researching the curse. Progress was slow, however, since neither of them actually wanted to break it.\n\nThe new flavor in the energy had changed one important thing, though, as it allowed the girls to go longer without Ryan if they ever needed to. Most of the girls were not interested in testing this. They wanted to fuck every day but it was nice to know they had the option. The old energy had been like getting blasted by a fire hose, whereas the new one was more like an ever rising tide in an infinite ocean.\n\nClaudia was the only one still fighting the curse. She was the only one who cared about freedom anymore, and she managed to set the record at a full week before she called Ryan on the phone, one day.\n\n\"Come on, really? I know we have our games, but do you really want to leave, completely?\" Ryan said.\n\n\"There are no games, Ryan. You really are a bully. Why can't you understand that the only thing I like about you is the the sex, and only because I have no choice. I love it, but it's not real. You have always been mean to me and the reason I fight you is because I really do... Look, I don't hate you, but I hate being a slave. To anyone, to anything -- to this curse. I just can't do it, I have to at least try to break free,\" Claudia said.\n\nRyan was stunned. \"That's not true. It's our game and you like it, too,\" he said.\n\n\"No, I don't. You think I'm a buttwhore? Well, you're the only man who has ever done that to me, and the only one who ever will. I don't like it. It's something I would never do in any normal context.\"\n\n\"Don't lie to me! You love it, bitch. Why are you doing this? Please come here and at least we can talk face to face.\"\n\n\"No. Absolutely not. There's no way I can be in the same room with you. Why couldn't you just treat me nice, like you do the others? You can be such a gentleman with them. Why did you have to be so mean to me?\" Claudia said.",
        "\"I didn't know. I really thought you liked it, you know, on some level. I thought that was how you were. It seems I don't know you at all,\" Ryan said.\n\n\"You never even gave me a key. All the other girls have their own key but I need to ring the doorbell, like a whore,\" she said.\n\n\"I thought you didn't want one. You wanted your independence, and you didn't want to live here. You just come and then leave as soon as you can. I thought you made a point of specifically not wanting to be like the others.\"\n\n\"You're right. You don't know me at all. If only you'd bothered to... Shit. Like I said, it's not you, it's the curse. I absolutely just will not be any kind of slave, to anything.\"\n\nWith that, and without any goodbyes, Claudia stopped coming.\n\nAnnie later told Ryan and the girls that Claudia had gone to a rehab facility. Natalia had gone with her to support her. Claudia and Natalia kept the secret of the curse, though, and Claudia continued to be amicable with Annie at work.\n\nThings were hard for Ryan after Claudia left. He realized he had made a horrible mistake with her, and got depressed. He already spent his life lounging around at home in his underwear all day, so the change wasn't huge on the outside. His sex life did suffer, though. He just went through the motions, and the energy did most of the work. He was a lot more gentle with the girls. They didn't seem to mind, except for Remy.\n\nAs far as there were any sides to take in this whole Claudia situation, the girls were instantly ready to forgive Ryan. They didn't blame Claudia for anything, either. Annie even told him that Claudia was doing well and she seemed fine. It was just Ryan who was unable to forgive himself.\n\nThe new, moody, introspective Ryan was actually ambrosia to Lizzy. She had been only in it for the sex, and the friendships with the other girls, so far. Now, she saw some substance in Ryan's personality, for the first time. For her, it felt good and bad at the same time, in just the right way, to love him more because he was in pain.\n\nRyan's relationship with Eleftheria advanced, too. They sneaked around and made out in secret. Ellie sucked him off to get her sustenance. Sometimes they even arranged situations where they could spend more time in private, and properly fuck.\n\nEllie acted like naughty teenager when it came to sex but she was adamant about not letting the other girls see or hear anything. But now that Ryan was feeling down, Ellie had become more distant. Her faith in him was faltering because he had let Claudia go so easily.\n\nEllie, of course, had several different plans she could use to trick Claudia into coming back. At this moment, though, she would have preferred to see Ryan take initiative and do it himself.\n\nAfter a few more weeks, Ryan was getting past the bottom of his slump. His mood was still down, though, and it felt like there was no returning to the heady sense of innocence of earlier times.\n\nDuring Ryan's struggles, Remy had been going out more. Lizzy used to go with her but now she wanted to spend more time talking with Ryan. A few of the other girls went with Remy instead, but no one could really keep up with her when it came to partying.\n\nRyan didn't know it, but even Hannah went out with Remy sometimes. Ellie had suggested it and Melinda thought it was a fantastic idea. She trusted Remy unconditionally, no matter how bad of an idea it would have seemed to an outsider.\n\nOne night, Ryan was on the couch, playing PlayStation with Lizzy. They were sitting side by side, rubbing elbows and laughing. Lizzy was wearing panties only. Ryan was completely naked. Annie was lounging across their laps, gently suckling on Ryan's semi-hard cock, like it was a pacifier.\n\nShe loved to do that. Annie spent a lot of time with the cock in her mouth even when they were just hanging out. She also liked to sleep like that, sometimes. When she wanted to see the TV she would just turn her head and lick the cock for a while instead, before popping it back in her mouth. Right now, she didn't care about what was happening on the screen. It just made her happy to hear Ryan and Lizzy laugh.\n\nErica was on all fours in front of Ryan, acting as a footstool for him. She was completely naked. She arched her back and slowly rubbed herself on Ryan's legs. Lizzy liked to tease Erica by tickling her naked pussy with her toes. Ryan had gotten over Erica's kinks by now so he just let her do her thing.\n\nRemy's traditional spot was on her knees, right next to the couch, ready to obey commands, but she wasn't there now. She was out.\n\nMelinda wasn't there, either. She was at home. Apparently, Hannah was angry at her for getting the tattoo, the one most of the girls already had. Ellie, of course, did not have one, but other than that, only Claudia would have been a holdout if she was still there.\n\nAnnie mumbled some nonsense with the cock in her mouth as she shifted her position. The girl was almost asleep. Lizzy rested her arm on Annie's ass.\n\nThe doorbell rang.\n\n\"Oh fuck, what is it now? One of these days, I'm just going to get rid of that fucking thing,\" Ryan said.\n\nEllie went to the door. She was wearing her usual uniform, which meant she was way more dressed than any of the other girls. She looked through the peephole, then hurried to open the door.\n\n\"Good evening, ma'am,\" officer Emerson said. \"I believe this one is one of yours. I recognized her and she told me she lives here.\" The cop was holding Remy up. Stacy, Remy's friend, was helping, holding her from the other side.\n\nEllie scooped Remy up and effortlessly carried her to the other sofa. Remy was giggling, mumbling, and drooling. She was drunk out of her mind, and possibly high on other stuff, too. Lizzy and Ryan were twisting around to see what was going on. The front door was behind the main sofa and Annie's body-weight prevented them from getting up.\n\nRemy's friend Stacy was a natural beach blonde type. She looked like a surfer girl, even when not in a bikini. Now, she was wearing just a tube mini dress and some stilettos. She was sidling deeper into the apartment, clearly curious to see the legendary den of vice for the first time. She had a big smile on her face as she looked around. She was as happy and carefree as ever. Ryan remembered her from the day he first took Remy. He'd met her a few times since then, too.\n\nCandice Emerson was wearing her uniform. She walked into the apartment. \"Good evening mister Dobbs. I found this one causing a public disturbance, but she managed to convince me to bring her here instead of throwing her in jail. She told me she lives here?\" she said.\n\nRyan pushed Annie up. She was still sleepy, and gasped as she saw the police officer. Annie covered her breasts with her arms.\n\nLizzy crawled into a ball on the sofa. She tried to pause the game, but she and Ryan were both dead already. Erica blushed and tried to look at the direction of the voice, but she couldn't see the officer yet. She held her place, though, on all fours, under Ryan's legs.\n\nBefore Ryan could move, Candice saw he was naked, and also saw Erica. She gasped and turned around. \"Um, I'm sorry. I didn't realize you were...\" Candice said.\n\n...doing whatever the fuck that is, she continued, in her mind.\n\n\"No no. I'm sorry. We weren't expecting guests, and... Annie, find my pants,\" Ryan said.\n\nAnnie dove under the sofa and grabbed a decent pair of boxers. Ryan rushed them on. \"Sorry about that. What did you want to ask me?\" he said.\n\nCandice turned back around and relaxed when she saw he was at least somewhat covered up. The man does have a nice body, and a nice... everything. \"So, uh, this young lady, Remy Laurent. I arrested her for disorderly conduct, but then I recognized her and remembered her from my visit here. She told me she lived here so I decided to bring her here instead of throwing her in jail. Is it true she lives here?\"\n\n\"Yeah, she lives here. Some of the girls do. Is that a problem?\"\n\n\"Some of the girls?\"\n\n\"Uh, I mean, some of my friends live here with me.\"\n\nCandice looked around again. The naked redhead and the naked brunette were peeking at her from behind mister Dobbs. They were huddled together on the sofa. The tiny blonde was still on floor. She was now leaning on her side and stretching herself long. She stared at Candice, challenging her to judge her.\n\nThe tall, strong blonde was checking on miss Laurent. She had laid her hands on the other woman's temples, like a shaman or something. It somehow fit with her skimpy toga. That thing doesn't really cover much.\n\n\"She's fine. She's just drunk,\" the regal amazon said.\n\n\"I'm sure she's fine. I've seen her much worse,\" Stacy laughed. \"Hi, I'm Stacy, Remy's friend. I'm not sure we've met,\" she said, to Erica, and started going around, saying hi to the girls. She was already acquainted with the rest of them.\n\n\"So, how many people live here, exactly?\" Candice said.\n\nRyan looked up and right while he counted in his head. \"Five?\" he said.\"Yeah, five. Pretty much everyone here, except for Stacy of course.\"\n\n\"Sure. And just so we're clear, you live here with five women?\"\n\n\"Yup, pretty much.\"\n\n\"And these are just some of your... girls?\"\n\n\"What?\"\n\n\"Mister Dobbs, may I ask you what do you do for a living?\"\n\n\"I, uh, do research on antique artifacts. That there is Eleftheria, but we just call her Ellie. She is a real expert on ancient Mesopotamian cultures.\" Ryan pointed at Ellie and she smiled warmly at Candice.\n\n\"Remy there is a tattoo artist, and she's really good. I recommend her if you ever want a tattoo. Of course, she's drunk now, but she really is super talented,\" Ryan continued. \"Lizzy here is a clerk at a convenience store and Annie is a former colleague from my previous job. Erica there is actually a librarian.\"\n\nErica waved and winked at Candice. Annie hugged Ryan's waist from behind. She was genuinely worried.\n\n\"So, you see,\" Ryan continued, \"we are all just normal people. It's just that our living arrangement is a bit unusual, so we value our privacy.\"\n\n\"Are their names on any official documents?\" Candice said.\n\n\"What?\"\n\n\"Do the records show that they live here, officially?\"\n\n\"To be honest, I'm not sure. Is that a problem?\"\n\nCandice gave the situation a thought. After her last visit here, she had received some documents from an anonymous source, probably the same person who had made the original emergency call. The documents had seemed dodgy but Candice had run some background checks on the names there. Everything had checked out, and somehow this situation did not feel like prostitution to her. For example, there was no evidence of any clients anywhere. It seemed like this was just one lucky guy. He has to have a secret.\n\n\"Well, to be honest, I'm not sure. But you should definitely contact your landlord. All occupants must be listed and there might be some rules in your lease about subletting,\" she said.\n\n\"No, I own this place.\"\n\nCandice lifted an eyebrow.\n\n\"What? It's the only thing I own. I bought it with some inheritance, as an investment. Trust me, I'm not rich, I don't even own a car,\" Ryan laughed.\n\n\"Whatever. I'll be going now. You people have a lovely evening,\" Candice said. She took one final look around the apartment, and left.\n\nJust as everyone was about to give a huge, collective sigh of relief, Stacy swooped in and gave Ryan a hug. \"Hello there, lover boy,\" she managed to say, before the energy hit her. Ryan was too surprised to do anything. Stacy shook as if she was being electrocuted. She heaved and moaned, and her knees gave. Before Ryan could turn off the flow, poor Stacy collapsed to the floor.\n\n\"Oh shit! What the hell did you do?\" Ryan said. The girls were all stunned silent. Remy was secretly smiling, though. Maybe she wasn't as drunk as she had pretended to be. Eleftheria didn't seem that bothered about this surprising turn, either. Usually she acted much more prescient to such dangers. No one paid any attention to them, however.\n\n\"Wow, what was that?\" Stacy said.\n\n\"That was you ruining your life,\" Ryan said. \"I'm sorry. It wasn't your fault,\" he then added, in a calmer tone. Ryan extended his hand to help Stacy up. The convulsions had put her on the verge of a wardrobe malfunction but she didn't care. She looked at the hand, and then at Ryan.\n\n\"It's okay. I can... turn it down,\" he said. Stacy took the hand. There was no more electricity. Ryan helped her up. She giggled as Ryan went for her breasts, but then she realized he was just fixing her dress. She giggled some more, anyway.\n\n\"Really, what was that?\" she said, eyes wide with wonder.\n\nAfter a few moments of indecision Ryan sat her down on the sofa and started explaining. He was embarrassed about explaining the sexual side of it, at first, but Stacy seemed very excited. Finding out she was now a sex slave didn't seem to dent her positive attitude at all. As Ryan went on, some of the other girls gathered around Stacy. They added in some details and did their best to make Stacy feel safe and welcome.\n\nThe introduction to the curse went on and on. \"Oh come on, just fuck her already,\" Remy finally said. Everyone turned to look at her.\n\n\"I thought you were passed out,\" Annie said.\n\n\"Just do it already. She's a party girl, she's ready to go. Aren't you Stacy?\" Remy said.\n\n\"Sure, why not,\" Stacy giggled.\n\n\"Wait. Did you do this on purpose?\" Ryan said.\n\n\"What ever. You know she likes you, just give her some of that magic.\"\n\n\"No. You can't be that... How could you? How could you do this? She's your friend. How could you do this to her?\" Ryan said.\n\n\"Oh, come on. It's not a big deal. I know her. She will love you, trust me,\" Remy said.\n\n\"You ruined her life. That's horrible. What's wrong with you?\" Ryan said.\n\n\"Oh, master, I'm such a bad girl. Look what I've done, you have to punish me,\" Remy laughed.\n\n\"Stop joking, this is serious,\" Ryan said.\n\n\"I'm not joking. You need to beat the shit out of me to punish me for being such a horrible person, and then you need to fuck Stacy there real good. I'm just trying to help you. You're so hung up on Claudia, I thought you needed someone new, to cheer you up,\" Remy said, completely serious now.\n\nRyan and Remy had their special sessions maybe once or twice a month. He didn't really enjoy it, yet, but he had gotten a lot more comfortable with it.\n\n\"No. This is a serious matter and you need a real punishment. What if I refuse to play your games with you? Would that make you understand that this is an actually serious situation?\" Ryan said.\n\n\"Oh stop with the curse bullshit, Ryan! Don't you get it? You are not a curse. Right, girls? We could all leave if we wanted to but we all choose to stay because we want to be here, because we want you,\" Remy said.\n\nThe other girls mumbled and nodded reluctantly. None of them could honestly disagree with Remy. They wouldn't have put it that bluntly, but what she said rang essentially true to them.\n\n\"Stacy, do you want to fuck Ryan?\" Remy said.\n\n\"Uh, yeah. Like, I wanted to jump him from the start. I didn't know about any of this magic stuff but that means it's going to be even better, right? If I'd known, maybe I would have hugged you a lot earlier,\" Stacy said.\n\n\"But you realize you are bound to me by the curse? You need to come back to me again and again. You're trapped,\" Ryan said.\n\n\"If you really are as good as Remy says you are, why would I not?\" Stacy said. She started to crawl up to Ryan. \"Maybe we should just try it out and see how we get along. I'm sure it'll be great,\" she said.\n\n\"Are you sure? Maybe this is all happening too fast? What if you took a day to think about it. We don't need to do this now,\" Ryan said.\n\nStacy was on his lap now, and came in for a kiss. Ryan held the power back. The kiss did feel nice, though. All of the girls felt different and there was always something exciting about sensing someone new. Ryan was getting aroused.\n\n\"Just because I'm blond and just because I like sex, doesn't mean I'm stupid. I knew there was something going on here and I wanted to find out. I wanted to get to know you, Ryan. I was interested in you anyway,\" Stacy said.\n\n\"You don't even know me, and I don't know you. We should at least get to know each other, or something. This is a bit ridiculous,\" Ryan said.\n\nStacy kissed him again. She was now grinding on his lap. Ryan still held the power back.\n\n\"But you do know me. I'm Stacy. We've met, we've chatted. I'm not a complicated person. What you see is what you get. I believe things happen for a reason, and I believe I can be good for you. If you really are feeling down, then maybe I can cheer you up,\" Stacy said.\n\n\"Wait, did you two scheme this up together? Are you helping Remy on purpose?\" Ryan said.\n\n\"Like I said, I've always been interested in you. Remy didn't tell me anything about any magical curse, but I can see it in her soul that you make her happy, and I already love you for that. Maybe I could just thank you for making her happy by making you happy,\" Stacy said.\n\nShe grabbed Ryan's hands and guided them to her hips. The top of her strapless tube dress slipped down, little by little, as she ground her body against his. She kissed him again. \"It doesn't have to be complicated. Sex is good, right? So let's just fuck and be happy,\" she said.\n\nRyan let some energy slip, and Stacy shook in pleasure. The top of her dress finally revealed her large, natural breasts. Her nipples were almost exactly the same color as her skin. Ryan could feel his energy interact with Stacy's deepest essence, and there really was something there -- something new, something healing. Maybe she was telling the truth, maybe she was just Stacy: happy, warm, and uncomplicated. He could feel Stacy was serious. She was not just drunk. Maybe she really did want him.\n\nRyan clamped down on the energy again when he remembered where he was. He looked around. \"Girls, you must get a say in this. I would be betraying your trust if I took on someone new without asking you,\" he said.\n\nThere was silence. The girls were all horny from watching him but no one knew what to say.\n\n\"Of course you can have her. Trust me, you'll be doing her a favor. When are you going to get it that we all like being with you?\" Remy said.\n\n\"Your vote doesn't count,\" Ryan said. There was more silence.\n\n\"I know her, and I like her,\" Lizzy said. \"I guess we are kind of friends, and I think Stacy is cool. I'd like to have her here. I mean, generally the more girls there are here the less of you there is to go around, so if I wanted to be selfish I would want you to have as few girls as possible. But you don't understand how good it feels to be with you. I want Stacy to feel that. I want everyone to feel that. In a perfect world, everyone would have a Ryan.\"\n\nStacy got off of Ryan and went to hug Lizzy. Their boobs squished together. \"Oh, thank you babe, I love you, too,\" Stacy said. She gave her a kiss. Ryan started to feel a certain inevitability in the air. He was also hard now.\n\n\"I agree. We did well with Claudia here and it's not like any of us ever had to go without getting what we need. There's plenty of you to go around for everyone, so if you want to, you can have her,\" Annie said. Inside, she was conflicted, but as always, she felt like putting Ryan's happiness above her own was the right thing to do.\n\n\"Me too. I think you deserve to have every woman in the world,\" Erica said. She was on the floor, looking up at Ryan, filled with adoration.\n\n\"Wow, I didn't say that,\" Annie said. Erica grinned at her.\n\nRyan looked at Ellie. \"Never hesitate, and never question your own decisions. You are the Master, so in the end, you always have to decide for yourself,\" she said. Ryan was surprised to get her blessing. He still had no idea Ellie actually wanted him to have more women now. Ellie was sure her gambit would work. It looked to her like Ryan had already made his decision.",
        "Stacy stood up. She pulled her dress down slowly, wiggling her hips. Everyone had already seen she wore no bra, but now they could see she wasn't wearing any panties, either. Then she just stood there, in front of Ryan, naked and beautiful. She was not ashamed at all. She was proud to be herself.\n\n\"Okay, let's take this show into the bedroom,\" Ryan said. He took Stacy's arm and then grabbed Remy by the ring in her collar -- he dragged her with them. The other girls followed.\n\nStacy and the other girls ended up waiting, though, while Ryan took Remy to the bathroom. He sat her down on the toilet and watched her go. Then he threw her into the shower and hosed her down with cold water. He slapped her whenever she tried to complain.\n\nRyan brought Remy back into the bedroom and, while the other women watched, he gagged her with a ball gag. He cuffed her hands behind her back and shackled her ankles. He bound her at the knees, too, and then bound her arms to her to her body from the elbows.\n\nEleftheria, who had sneaked into the room, too, was impressed by his general air of authority, but not at all by his bondage technique. He will learn, she thought.\n\nRyan pushed Remy under the bed and said \"You will get your punishment in the morning, bitch.\"\n\n\"Thank you, Master,\" Remy mumbled, into her ball gag.\n\nRyan took a few breaths to calm down. He looked at Stacy. \"Right, I'm sorry about that,\" he said.\n\n\"No, she needs it,\" Stacy said, with a simple certainty that surprised Ryan. She came in for a kiss and he let the energy flow. Her body started to loose strength almost immediately. Ryan tossed her on the bed.\n\n\"Oh my god, I can't believe this is real,\" Stacy gasped.\n\n\"You have no idea,\" Lizzy said.\n\nRyan crawled between Stacy's legs and started licking her pussy. The energy knocked her out, but only after several orgasms. Ryan let his senses be filled with new, pleasant taste and scent.\n\nHe let her rest and dealt with the other women in the meantime. He fucked them all -- except for Ellie, of course, but he was having a hard time figuring why not, anymore -- and when Stacy started showing signs of life again, he turned his attention back to her.\n\nHe fucked her in a missionary position, kind of. He bent her legs up toward her shoulders and spread them wide to get a good view. He kept the energy under control. Stacy stayed conscious. She didn't do anything flashy, she let him take the lead, but he could tell she was good at sex.\n\nErica pushed her head under his crotch and he sat down on her face. Ryan pumped in and out of Stacy, going long and deep. Annie laid her head on Stacy's stomach and was there to suck and kiss Ryan's cock whenever he pulled it out for her.\n\nLizzy clung to Ryan's back. She moved with him as he fucked his newest slave.\n\nRyan could feel Erica's tongue on his balls as he went faster and faster. He pumped out orgasm after orgasm from Stacy, and then went total overkill with the energy. Stacy would be out for a long while. The spike was not for her, however. It was for the benefit of the other girls, who could take a lot more than the newbie. They all came when the burst flowed into the them through Stacy's tired but still stunning body.\n\nRyan shot his load into Stacy. Her mind was long gone, but her body reacted to him, and her pussy pumped more cum out of his cock. Once Ryan was done, the other girls licked what they could out of Stacy's dripping, well fucked pussy.\n\nRyan was already feeling better about everything. Remy's trick was already working. Stacy really could be a positive influence.\n\nAnnie was ready and went for the cock next. She was pretty full on energy but she didn't mind sex just for the sake of it. She got a nice top-off, all over her face. Others were there to compete for it so she had to act fast to keep any for herself. It warmed Ryan's soul to see them giggle and tease each other as they licked the cum off of each other's lips and fingers.\n\nNext, Ryan bent Erica over the edge of the bed and fucked her from behind. He nailed her tight little pussy with sharp strokes. She grunted with each lung busting slam, reveling in what to her felt like a touch of divinity. Ryan eventually came deep inside her.\n\nBy this time Stacy was starting to return to her senses so Erica and Annie carried their newest sister to the shower with them.\n\nRyan fucked Lizzy in the ass, hard, while the other girls were showering. He bent her over on the bed -- face down, ass up -- and just went for it. He covered her mouth with one hand and grabbed an ankle with the other. Lizzy flailed around as much as she could while he took her, and every time she came, the cock just sank deeper and deeper into her yielding butt. And even though this was something that happened to her almost every day now, it still triggered a deep catharsis in her, allowing her to release every primal roar still locked inside her.\n\nLizzy was happy to have the old Ryan back in bed. It had been a while. New Ryan was nicer to talk to but old Ryan was a more exciting fuck. Usually Lizzy liked to act all shocked and innocent during anal but this time she was happy to just fuck Ryan right back. She pushed into him as much as she could, in this extravagant position.\n\nLizzy had gotten sore from anal early on but she was completely into it now. If Ryan had offered her a buttplug of her own she would have accepted it, gladly. She had tried a few from the toy chest, they felt nice enough.\n\nRyan climbed over her back and smashed his cock right against her cheek, and let a huge load of cum splash all over her face and hair from there. Lizzy turned her head to catch some in her mouth, too. She took a minute to savor more of the supernatural treat.\n\nThe first batch came back from the shower. Stacy was even more radiant with joy than usual and she could already stay upright without help again. Lizzy went to shower next. Ryan stayed in bed and lounged around with the other girls. They didn't mind him being all sweaty and musky, not at all. Stacy had a great time bonding with the other girls over their shared experience.\n\nRyan started to feel even better about this new surprise turn. Maybe Stacy could be a positive force in the house. He insisted on a new rule, though. Absolutely no new girls. None of the girls were allowed to bring any friends -- or anybody -- over, no exceptions. Some of the ladies were secretly disappointed.\n\nEleftheria, though, still observing from the sidelines, could see many more ways to bring new girls in, no matter what Ryan said.\n\nIn the morning, Ryan threw the other girls out of the bedroom and Remy got her punishment. It was one she would remember for a long time, and it did leave a few marks."
    ],
    "authorname": "FacetiousTales",
    "tags": [
        "harem",
        "magic",
        "male dominant",
        "group sex"
    ],
    "category": "Mind Control",
    "url": "https://www.literotica.com/s/the-cursed-tattoo-pt-09"
}
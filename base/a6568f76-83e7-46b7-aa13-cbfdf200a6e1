{
    "title": "Impact of Collision Ch. 03",
    "pages": [
        "So hopefully you have read Chapters 1 and 2 before starting on this Chapter, if not I would encourage you to go back and have a quick read. Again, this is a collaboration with the magnificent SiteNonSite.\n\nAnd as always I encourage you to take the time to read all of SiteNonSite's stories if you haven't already.\n\n<hr>\n\n<div style=\"text-align: center\">Take Care of Yourself</div>\n\n<br>\n\nUsually, I try to get to work at least a half-hour early but on Monday I arrived just on time. I stopped to heat my coffee and ran into Keith and Ben in the break room.\n\n\"Friday night was great wasn't it?\" Ben asked.\n\n\"Yeah I had fun,\" I told him but felt sheepish about leaving without saying goodbye. \"I was glad to head home though.\"\n\n\"Who was the blonde?\" Keith asked, a sly look in his eye. \"You looked like you'd hit a wall.\"\n\nI blushed. I hated myself for blushing in front of them. Ben was my age, but he was a big barrel-chested bear of a man. While Keith was diminutive, even for a Japanese man; slender, only a little taller than me. He's only six or seven years older than us, yet he was already the wunderkind at Pentagram when we were still in high school. Now he's in charge of his own department at the Times, and I was blushing in front of him and Ben.\n\n\"Oh, you saw that?\" I said, my color rising. I found myself thinking of my hand on Claire's breast, her hard dark nipples. \"...That was no one.\"\n\n'What is wrong with me?' I wondered, hating myself more. They were looking at me in confusion.\n\n\"I mean, that was no one from work... that was my friend Claire,\" I explained. \"I was pretending to be drunk? Helping her out of a jam I guess? She was with a bachelorette and felt bad leaving early.\"\n\nKeith gave me a quizzical smile but said nothing. Ben just hid his smirk behind his coffee mug. Luckily my phone started vibrating, I made a show of taking it out and looking at it seriously, there was a text from Claire.\n\n\"I need to deal with this,\" I lied, turning and heading towards the ladies' room. Once I was safely tucked in a stall I open Claire's text:\n\n<p style=\"margin-left: 50px; margin-right: 50px\">How's your Monday? There's an opening at the gallery Thursday night, Sophie Calle - the show is going to blow your mind - are you free? Can you come?</p>\n\n<p style=\"margin-left: 50px; margin-right: 50px\">That sounds great, I don't know Sophie Calle, what kind of artist is she? My Monday is fine, but I just found out my boss saw our departure, he saw us leaving and thinks I was totally white-girl wasted. </p>\n\n<p style=\"margin-left: 50px; margin-right: 50px\">A\u00efe! Sorry about that, I hope it's not bad...</p>\n\n<p style=\"margin-left: 50px; margin-right: 50px\">No, not bad at all. Keith is cool, I think he's just amused. What should I wear Thursday night?</p>\n\n<p style=\"margin-left: 50px; margin-right: 50px\">Something sexy, there will be many eligible gentlemen there, but you're my date! There's a big dinner afterward, very posh. Sophie will be there (she's AMAZING, as for what kind of artist she is, she is her own kind, but I promise you will love it the most InfoPorn!</p>\n\nSitting there on the toilet I had a flash of cold terror. I tried to imagine what I owned that would measure up to Claire's standards of sexy. I thought of the little green dress I'd bought for a friend's wedding that spring. I'd chickened out at the last minute after Danny had become irritated with me.\n\n\"You're not wearing that?\" He'd asked. \"You might as well be naked, Sarah.\"\n\nI had been so excited to wear it, to be seen by my friends, but I couldn't do it, he was right, it was just too revealing. I could hear my mother's voice lecturing me about being a good girl, my thoughts, at the time, had been interrupted by his voice.\n\n\"Your boobs are hanging out,\" he'd told me. But I'd known what he meant, that I looked like a whore. I'd started to cry, ruining my makeup, and he'd stormed out of the room. \"Jesus Christ, Sarah you're so fucking neurotic.\"\n\nIn the end, I'd worn a black dress that went down to my knees and no neckline whatsoever. Danny had sulked all night because he didn't know anyone at the wedding. We hadn't even danced because he was sulking... and I was afraid he'd start a fight if I danced with someone else.\n\nI was staring at Claire's text. The tiny picture next to it. Maybe her at the beach?\n\nI was squeezing my phone and clenching my thighs. I tried to relax.\n\n'You're so fucking neurotic,' I told myself.\n\nI would love to say that my week sped by, but the truth is I wasn't really sure how cool Keith was with my drunken departure. Although we were super busy I felt like I was walking on eggshells at work, and after work, all I could think about was what I should wear for my \"date\" with Claire.\n\nThe highlight of my days was texting with Claire, who would send me links to something funny or an update on her day.\n\nWhen Thursday night finally rolled around I was a nervous wreck, and I came very close to bailing. I stood in front of the mirror and stared at myself in the little green dress. It was soooo short, the neckline was sooo low. But I was invested, it was too late to choose a different dress, or at least too expensive.\n\nOn Tuesday I'd splurged on a new pair of heels that went perfectly with the green dress. I'd gotten up early and gotten a blowout, which everyone at work had made a fuss over. And while I don't usually wear much makeup, I'd done my eyes and was wearing the red lipstick I'd bought for the same wedding and NEVER worn. If I changed now, I'd not only be late, I'd have wasted a lot of money on the heels. My whole body was shaking.\n\n\"You don't look like a whore,\" I told my reflection as I grabbed my little trench coat and dashed for the door before I had a chance to chicken out.\n\nIt was warm and my trench flared like a cape as I walked down Tenth Ave. My hair, loose and swept back, floated behind me like big loops of rose gold silk. I felt beautiful and fierce in that moment.\n\nMy breasts swayed and bounced without a bra, something I was not at all used to. I tried to take courage from the click of my heels as I walked down the block and under the enormous black iron bridgework of the Highline. The exhibition was on a wide dark side street, lined by plain, relatively low-rise commercial buildings. The block would have been deserted if not for the crowd of people milling around outside the gallery door. Lots of happy excited voices, but I had a terrible sinking feeling in my stomach when I saw how casually everyone was dressed. There were students in paint-splattered jeans, men in windbreakers, and girls in jeans. There was an old couple, he was in a welder cap and she was wearing a corny red beret. I almost spun on my heels and ran.\n\n'You are a gem,' I heard myself think, wondering where that thought had come from. But it didn't matter, it was enough, I joined the crowd.\n\nThere was a bottleneck at the door as a few people came out and then a few people went in, but no line. I waited my turn and moved with the crowd. Just inside the door was a stack of printer paper four feet tall and two young women each holding a small stack of the same paper. They were handing out pages as people came in. I was relieved to see they were both in little dresses and beautifully made up. If they were also going to the dinner I'd fit right in. The girl who handed me my sheet smiled as she did.\n\n\"You look amazing, girlfriend,\" she told me. I could have hugged her.\n\n\"So do you!\" I whispered back, surprised by how excited I sounded; how excited I knew I must have looked. I'd felt my face explode in a smile - saw my burst of enthusiasm reflected in the gallery girl's eyes as she returned my smile.\n\nI followed the flow around a corner and out and around into a large square gallery. It had a peaked ceiling of wood struts, no less than 30' high.\n\nIt wasn't as crowded as I'd expected, based on the crowd outside the gallery, but the gallery is full of people talking loudly. I hadn't known who Sophie Calle was, but had overheard Claire telling her date about her the first night we met at the wine bar. I had found the image of her, disguised as a hotel maid, going through people's belongings, strangely erotic.\n\nSince inviting me to the show Claire had sent me some articles about Calle. Grids of pictures of other peoples' belongings laid out on their unmade hotel beds. Blurred photos of a man she followed. A picture of a beautiful young Calle in a girlish nightie with words projected across her bare d\u00e9colletage. But still, I only had the vaguest sense of how her work was displayed and was confused by what I was seeing.\n\nIt looked almost like a science fair. On three walls were pictures, monitors, and texts hung salon style. On the fourth floating wall that formed the entrance and exit of the gallery, there was a grid of video screens. I was at a loss, but then I remembered the sheet of paper I was holding.\n\nI had been paying so much attention to what the girls were wearing when I came in I hadn't even thought to look at the paper they had handed me. It was printed on both sides, French on one side, English on the other. It was a letter, addressed to Calle. It was very formal, almost literary. I realized with a start that it was from a lover and that he was breaking up with her.\n\nHe signed it \"Take care of yourself,\" which seemed cold and strangely clinical. Calle had made his closing the title of her exhibition.\n\nI walked over to the nearest group of texts and pictures. There is the text of the email, but marked-up with corrections by a proofreader, the email rendered in cipher by an agent of the secret service, a report on its legal standing by a contract lawyer, the reaction of a nine-year-old child... all of them women. Dozens of women all picking apart the same asshole's letter.\n\nI'd burst out laughing, then caught myself, but too late. I'd laughed out loud and an older couple had turned and shot me disapproving glares. I gave them an apologetic smile, but they just looked away. Each new interpretation was harsher and funnier than the last meanwhile. I tried to stifle my laughter but I couldn't, it was all too fantastic, too bold. Finally, the people around me start laughing too. It's all too much.\n\n\"Sarah!\"\n\nI turn to see a smiling Claire.\n\n\"Oh my God Claire, Sophie Calle is a BOSS BITCH!\"\n\nClaire barks a laugh, but her eyes convey a look of shock, even a little panic.\n\n\"Sarah, may I introduce you to Sophie Calle?\" she asks, still smiling, her diction crisp, her manner formal, eyes enormous. She gestures to her right, and there is an older Sophie Calle than the ingenue I'd seen in the links Claire had sent. Calle's long hair is done up in a bun and she's wearing great big glasses with thick black frames and smiling with uncontained glee.\n\nI blush.\n\n\"I told Claire I wanted to meet the beautiful laughing girl in the green dress,\" she says in a thick French accent, taking my hand. \"You, my dear, are my absolute favorite!\"\n\n<hr style=\"width:25%;margin-left:0\">\n\nMoving around the gallery and later that night, at the private reception across the street, Claire looks beyond glamorous. She makes sure to check in with me regularly but is required to spend most of the night at Sophie Calle's elbow - acting as her occasional translator, assistant, and bodyguard. The dinner is like something out of a movie, with celebrities and billionaires with trophy wives but still, Claire is easily the most beautiful woman there. I think I might be jealous if I wasn't her \"date.\"\n\n\"Sometimes you sell art to flirt,\" she tells me at dinner, squeezing my hand with a naughty smile, making me laugh like a girl.\n\n\"Oh my God Sarah! How good was tonight?\" Claire bellows up at the buildings. We've left the party and are on the street heading back towards the HighLine and Tenth Ave. She isn't wearing a coat, and instead, her bare shoulders and arms are wrapped in a vintage silk shawl, printed with a delicate filigree of Persian designs. She is visibly buzzing with excitement.\n\n\"I sat next to Lou Reed...\" I say, still trying to wrap my head around our evening.\n\n\"I can't believe how hot you look in that dress. Everyone was checking you out! I think you could have gone home with anyone tonight.\"\n\n\"You said 'sexy' - but I was worried until I saw you. Claire, you look so beautiful!\"\n\nI had been thinking my neckline was daring, but then I saw Claire. Only she could pull off a neckline that stopped at the bow around her waist. She shows off her long bare legs, despite artfully covering herself with her wrap as we left the dinner. Her dress is a lovely robin's egg blue and flared beautifully, the hem a bit shorter in the front than in the back. Offering a little peek at her knees.\n\n\"No! your dress is the subject of conversation, no changing it! The green suits your complexion - your strawberry blonde hair - ah, your hair, SO beautiful tonight!\" she says tucking a looping lock behind my ear. And then, after giving me a once over, \"And I very much liked seeing the girls on display.\"\n\n\"How do you feel now that the opening is done?\" I ask, desperately hoping Claire will allow me to change the subject this time. It works.\n\n\"Perfect! Seriously I can't believe it - Paula could not have been happier - I've never seen her laughing like that - and the dinner afterward... WOW!\" Claire hoots, spinning to face me and grabbing me by the shoulders. \"I can't even... How amazing is Sophie Calle?\"\n\n\"BOSS BITCH!\" I chime in. This makes Claire laugh. \"No, really though, she was lovely, so funny and quirky. I hope I'm like that, in big kooky black-framed glasses when I'm a batty old lady.\"\n\n\"Yes!\" Claire laughs and lets go of me, she spins again. \"Let's grow up to be batty old ladies!\"\n\nIt is already very late, much later than I intended to stay out. I knew I should go home, that tomorrow will be a death march if I don't, but I also know I'm not ready to go to sleep, and Claire is literally spinning like a top.\n\n\"Do you think maybe we should go for a drink? Maybe somewhere we could dance off some of this energy?\" I suggest. \"I feel like I'm catching a contact-high - like it was my big night too.\"\n\n\"Oh yes, let's! Have you been to Bed?\" she asks, I must look confused, because she laughs and explains, \"It's a rooftop bar on 27th, I think it's a bit douchey, but we can dance.\"\n\nWe head up 10th Ave towards Bed, arm-in-arm, heels clicking, Claire babbling the whole way. When we get there, there is a long line. Unwrapping her shawl as she walks.\n\n'The girls are awake,' I think, seeing her nipples poking through her dress.\n\nWith me in tow, Claire breezes past all the people waiting and straight to the head of the queue.\n\n\"Hey!\" Some girl yells as the bouncer, without any hesitation, makes way for us, pushing the crowd out of our way with an arm as big as my waist.\n\n\"Ladies,\" is all he says, his voice a deep baritone.\n\n\"Merci!\" Claire chirps.\n\n\"Do you know him?\" I ask as we step inside.\n\n\"No, I've never been here.\"\n\n\"But then how?\"\n\n\"Sarah, you really don't know do you?\" She stops and is looking at me seriously.\n\n\"Know what?\"\n\n\"How exceptionally beautiful you are.\" She takes my little trench and hands it with her wrap to a coat check. She looks back at me, studying my expression seriously, and touches my hair. \"No, just as I thought, not a clue.\"\n\nWe get into an elevator with about a dozen other people, Claire holds my hand. The music is getting louder on our ascent.\n\n\"They have these big beds to lounge on up on the roof, hence the name. But whatever, that's for the finance bros and their mannequins, you're here to dance with me.\"\n\nThe elevator doors open and we are hit with a wall of throbbing sound, strobing lights, and writhing bodies.\n\nClaire leads me through the press by the hand, bodies rubbing against us from all sides. People are packed around the bar four and five deep, but a tall guy next to Claire asks what we are drinking. She yells \"mescal!\" and signaling the bartender over the heads of everyone else he gets us each a tumbler of mescal on the rocks. It's smokey and rich tasting. Claire thanks him and leads me to an open space near a high bar table.\n\n\"You like?\" she asks, yelling over the noise.\n\n\"Yeah, it's great!\" I yell back. \"But I want to dance!\"\n\nWith a wicked smile, Claire raises her glass in toast tossing back her mescal, pouring it down her throat in one long swallow, her eyes never leaving mine. The mescal is strong and burns my throat, but I follow suit, staring back at her with watering eyes as I drain my glass.\n\nI cough and blink away the tears as Claire grabs my hand, dragging me out to the dancefloor with her. She's so uninhibited in her moves. She has a confidence that is contagious. I can't help but laugh as she swings me by the waist.\n\nI completely lose track of time. Men come and go, plying us with more offers of drinks trying to dance with us. We aren't mean, but we are of one mind, tonight is our night, and all we want is to dance with each other. Claire is handsy from the start, and after we have our second and then third mescal she gets handsier still. I don't mind.\n\nShe spins me, catching me by the hips, pulling me against her. Pushing her pelvis against my ass, her hands touching me again and again. She keeps her hand against the bare skin of my back, neck, and arms as much as possible. But there are times when I can see her losing herself in the feeling of her own body, enjoying the slinky curving movements of her spine and limbs. This is my favorite. She is incredible to watch. I try to imagine how it would feel to be that sexy, to feel myself moving and twisting the way she did.\n\nAt first, watching her, I try to imitate the things I see her do, the way she rolls and turns her hips, the twisting and curling of her arms. But more and more I'm not watching her. My body is taking its cues directly from hers, from her hand on my back, her thigh sliding between mine, her hip pressing into my ass, her forearms circling my waist. It's as if we are dancing some sort of super sensuous waltz and she is leading.\n\nI have never been handsy but like the rest of my body, my hands are following Claire's lead, holding her by the waist, moving up her bare arms, resting on the back of her neck. I find myself absorbing her rhythms but also the flow of her movements. I'm not a terribly confident dancer, but with Claire, I feel like the sexiest woman alive.\n\nAnd while we are making a bit of a spectacle of ourselves, we don't take it too far; nothing the crowd around us finds too outrageous. If anything it feels like we stand out in a good way. I start to understand Claire's comment about being exceptionally beautiful.\n\nI think if Claire's feet didn't give out we might have danced all night. But her heels are cutting her. As soon as I see the blood I call an end to the night.\n\n\"I've got work in the morning anyway,\" I soothe when she makes a face. \"We both need to go home.\"\n\n\"No, I'll come with you,\" she states, not giving me a choice in the matter, \"let's get a cab.\"\n\nWe make our way down the elevator, retrieve our things, and head out the doors. The street seems brighter than when we arrived, stark and silver light frosts the buildings across the street. Looking up I see there is an enormous full moon.\n\n\"\u00catre dans la lune,\" Claire laughs. She is smiling at me. I am standing in the doorway, transfixed.\n\n\"Clair de lune,\" I whisper, surprising her. I return her smile and step out onto the street.\n\nThe line is gone, but the same bouncer is still there. He makes a show of walking us to the curb and securing a cab that a couple had just vacated.\n\n\"Come again ladies,\" he tells us, his voice rumbling like distant thunder.\n\nClaire is talking and laughing nonstop, about Sophie, about dancing, about New York, the whole time holding my hand in her lap possessively. Her other hand gently strokes my bare knee and thigh, I feel my body respond. Her fingers gently stroking my bare skin. I'm not sure how I would react if a guy had done that, but I let her, even enjoy it. I am laughing and smiling but I also feel an anticipation building in me. The cab is alone in the deep, narrow canyon of buildings on my block when it drops us at my front door. I have to negotiate paying our fare single-handedly as Claire chatters on, still holding my other hand tight.",
        "I had been so self-conscious to have Claire see my building and apartment the first time, but now I am feeling self-conscious for entirely different reasons. As we walk up the stairs, I think about our cab ride, her hand edging my dress up to rest on my thigh.\n\n'Just Claire being handsy,' I tell myself.\n\nShe babbles and laughs as we click over the filthy penny tile in the hall. Smiling, but afraid she'll wake my neighbors, I shush her under the too-dim bare bulbs lighting the stairs. As I climb ahead of her, I think about the cabbie adjusting his mirror to watch us, how I had spread my legs, wondering if he could see her hand pushing my dress up my thigh. My heart is beating hard and fast as I unlock my door. I can't remember ever feeling this turned on. I'm light-headed.\n\nI lock the door behind us and take Claire into the bedroom. Sitting her on the bed, I kneel in front of her, carefully unstrapping her bloodied shoes.\n\n\"Always something with us,\" I mumble nervously. Claire is sitting on the very edge of the bed, crowding me a little, her legs splayed carelessly. She is idly pinching the hem of her dress, pulling the fabric tight between her hands and raising it up her thighs, I can see her panties, they are pale and look damp, presumably from dancing. I stand to get a warm washcloth but while I'm at the sink she slips past behind me, she strips off her dress and is shimmying out of her panties. I watch her in the mirror, naked, nymph-like, and smiling, her hands rising like a ballerina as she steps into the shower.\n\n\"I'm going to use your toothbrush!\" she announces, leaving no room for debate; reaching across me she grabs it from its glass, jamming it in her mouth.\n\nShe stares at me defiantly and smiles as I hand her the toothpaste and turn to fetch her a towel. She steps out of the shower to meet me on my return, laughing and recounting some bit of gossip, but I'm distracted by her nakedness, trying not to look at her dark nipples. Looking down instead at the beauty of her flat stomach, her narrow waist, and points of her flaring hips. Her neatly trimmed blonde bush.\n\n'Almost nothing at all,' I think, blushing and turning away, suddenly feeling ashamed and foolish about my own shaved pussy.\n\n'What were you thinking?' I berate myself as Claire, still drying off, marches into my bedroom, babbling the whole time.\n\nI listen to her, laughing at her own silliness, but my hands are shaking while I rummage for something for her to sleep in. This time choosing an oversized t-shirt.\n\n\"Here, put this on,\" I say, passing her the t-shirt without looking up.\n\n\"Pah!\" She says pushing past me, dripping wet, dropping her towel, and crawling into bed.\n\n\"Why do I even bother?\" I mutter, trying to focus on the discarded towel, but my attempt is half-hearted at best. I can't help but look up at her stretching long on my bed.\n\nShe pushes the covers down and is laying on her side, facing away from me. Her bare back stretching and twisting, hands in her hair. She has a lovely round bottom. She is quiet, her breathing is slow and even.\n\n\"Already passed out,\" I think. Part of me feels relief, but also disappointment. I think of watching her cum, the feeling of our legs touching.\n\n'Were you hoping for another show?' I ask myself, as I look out my windows at the few lights across the street. I wonder if anyone is looking; if they can see Claire.\n\nI grab her almost unused towel off the floor and think about leaving the lights on, letting any unseen watchers see her, but I turn out the lights and duck into the bathroom to undress instead.\n\nI'm in and out of the shower in almost no time. Standing at the mirror I look down at myself as I dry off, my puffy nipples and my shaved pussy. I'm breathing hard like I've been running.\n\n'What was I thinking?' I wonder, even as I touch myself, the smooth skin. 'What am I thinking?'\n\nMy nightie isn't on its hook. I look at my panties on the floor next to Claire's, prodding them with my toe. They both are darkened in the crotch. Pushing my toe into the gusset of Claire's panties, I see the sheen of precum. I turn out the lights and step into the bedroom.\n\n\"You have such an amazing figure, Sarah.\"\n\nHer voice surprises me, making me jump a little.\n\n\"I'm sorry,\" she husks, sounding sleepy. \"Did I scare you?\"\n\n\"I thought you were asleep,\" I whisper. Claire is twisting over to look at me, and beautifully lit by the moonlight from my windows; it's bright and silvery. I'm naked. I realize I've been standing in the moonlight the whole time, illuminated just like Claire. But despite thinking Claire was asleep, I have been self consciously using my hands to cover my breasts and the smooth skin of my pussy. Still, I take a nervous look out the windows. I move slowly, as bright and white as the moonlight is, the shadows are pitch black.\n\n\"You have the body I always wanted,\" she tells me. Her skin looks like it is made from pale stone. Her hair is ivory.\n\n\"I'd kill to have your body,\" I whisper back, trying not to look at her. Instead of admiring her body, I keep my gaze lowered, looking for my nightie amongst the shadows on the floor. \"You can wear anything,\" I mumble.\n\n\"Come here,\" she orders. Turning back away from me and lifting up her arm - expecting me to spoon her.\n\n\"My nightie-\"\n\n\"Pssht, you don't need clothes for bed... Now Sarah! Tout suite!\"\n\nI hesitate, head spinning.\n\n\"Sarah!\"\n\nI obey, sliding into bed behind her. I curl one arm under my head and put my other hand on her hip but I leave a gap between us.\n\n\"Viens ici.\"\n\n\"Huh?\"\n\nClaire takes my wrist in hers, wrapping my arm around her, pulling me closer. My hand holds her smooth belly, my breasts press against the lean muscles of her back. My face is burning hot, my nipples must feel like stones. She shimmies her ass into my lap. Looking over her shoulder at me she brushes my shoulder with her fingers. \"I mean it, your body is amazing,\" she whispered admiringly.\n\nThe world feels very small, very simple. Just the two of us in bed, naked and unashamed. No city, no boss or work, no mother or church, no Danny. Just us, Claire and I, our bodies pressing together there under the silver light of the full moon.\n\n\"I've always hated how big my boobs are,\" I admit. I'm squeezing her soft abs, kneading the flesh. Her skin feels dry and clean. I make myself stop.\n\n\"My mom... she rode me so hard because of them,\" I tell her. \"I could never wear anything I wanted. She made me... I was too embarrassed to play sports.\"\n\n\"That's not fair,\" Claire tells me, a slight lisp to her voice. \"I'm glad you weren't embarrassed. I'm also glad she wasn't here tonight, that you can do whatever you want.\"\n\n\"Me too,\" I murmur in her ear.\n\n\"I like seeing the girls on display. They're not too big you know, just right,\" she tells me. \"I enjoy seeing others admiring your body the way I do.\"\n\nImagining that; imagining us being watched as we danced at the club, as she touched my thigh in the cab, as we lay together here in my bed. My breath is short, I feel faint.\n\n\"I liked it too,\" I tell her, my voice sounding small and girlish. \"I was afraid, but you make me feel brave. I forgot to be ashamed.\"\n\n\"You have nothing to be ashamed of,\" she says, running her fingers up my cheek and to my hair. \"You looked a treat tonight. That green dress beautifully compliments your complexion.\"\n\n\"I'm so glad you like it, I almost didn't wear it,\" I whisper, rubbing my cheek into her hand, so her fingers tangle and pull. \"I almost chickened out.\"\n\n\"Really?\" She asks, twisting all the way around so she's facing me, sliding her left hand between my arm and my cheek, cradling my face. Her right hand pulls through my hair to my shoulder and strokes my arm. It feels like such a motherly gesture; her expression so warm. I feel comforted and at ease curled up facing her; our knees touching, I move my hand to rest on my rib cage, my elbow folded behind me. My other arm is curled and supporting my head, under her hand. I'm displaying myself to her.\n\n\"You looked so bold,\" she tells me earnestly, \"you should always wear that dress.\"\n\nI smile, imagining picking up groceries in the dress that so thoroughly scandalized Danny. I picture myself going to work in it, what Keith and Ben and the other staff at the office would make of that.\n\n\"Your breasts are magnifique,\" she murmurs, interrupting my fantasy. She's staring at them in the harsh light from the moon. And then, after a long pause, she looks up at me, her eyes liquid and soft. Claire asks, \"May I touch them Sarah?\"\n\nIt is all going too far. I should be shocked, but again, like in the coffee shop, I am passive, letting her touch me. I have no urge to stop her, perhaps because her request was delivered with a child-like innocence, or perhaps because I'd been hoping she would touch me. I should feel self-conscious stretching out in bed naked next to her, my shades open, her hands touching my body, but instead I feel more beautiful than I can ever remember feeling - brazen even. I feel a thrill as I nod. Claire's fingers trail down to my breasts, running over the fragile skin of my nipples.\n\n\"I wish I had breasts like these,\" she whispers, cupping mine, the pad of her thumb rolling my nipple. \"They are softer than mine...\n\nFor a long time we're silent. Just the sound of our breaths, mine hitching as Claire touches me. My breasts ache, they seem to swell in her hand.\n\n\"I've never felt another girl up,\" she admits.\n\n\"I've never been felt up by another girl,\" I whisper back, my breath shallow, my voice still high and girlish; thoroughly enjoying her wide-eyed wonder. \"Is it nice?\"\n\n\"I'm so excited, like a teenage boy!\" She admits, sounding delighted, her voice shaking a little, squeezing me in her hand and delicately pinching my nipple between her thumb and index finger. Her smiling face is close to mine, the smell of mescal is strong on our breaths.\n\n\"Your fingers are trembling,\" I whisper, enjoying her touch, her admiration. \"It feels nice.\"\n\n\"Your skin is so soft, c'est tr\u00e8s jolie, ma ch\u00e9rie,\" she whispers.\n\nClaire's compliments make me feel so beautiful, like dancing with her, I don't feel ashamed, instead, I feel proud. I stretch for her. My body is deliciously tired from dancing, my muscles ache, but I am wonderfully relaxed. I want her to see my ribs, my flat stomach, the points of my hips. I want her to admire my breasts; my nipples, puffy and pink.\n\nClaire says something, but says it so quietly, I don't understand - it's hardly a lisp.\n\n\"What?' I ask, my voice breathy, the full import of what's happening suddenly bearing down on me.\n\n\"Take care of yourself,\" she whispers, taking a moment to lick her lips.\n\nI stare at her, confused; hesitating. Does she mean the exhibition? What had I missed?\n\n\"It has been such a lovely night,\" she whispers, her voice husky and thick, her tongue so wet she was almost drooling. \"I don't want it to end.\"\n\nMy heart is pounding and I feel like my eyes must be as wide as saucers. I open my mouth to say something, but before I can, Claire stops me, gently squeezing my cheek in her cupped hand. Her fingertips gently pull at my skin.\n\n\"I'm not ready to sleep...\" she hushes. \"I want...\" she pauses. \"...this time, together. I want you to take care of yourself, Sarah. I want you to do it for me.\"\n\nOur faces are almost touching, she is still cradling my cheek in her left hand but her right shoulder begins to move in little circles. Her right hand is no longer petting my arm. I let out a long deep breath.\n\n'How long have I been holding my breath?' I wonder.\n\n\"Please Sarah,\" she begs. \"Do this for me.\"\n\nI could feel myself flushing, her hand cradling my cheek pulling our faces even closer. There is no ambiguity, no misunderstanding. I know exactly what she wants.\n\nShe knows I watched her. Did she watch me? Did she see me cum? I can't help but remember my fantasy. My breath catches as I imagine spreading my legs for her, pushing my fingers against my lips, parting the wet flesh. I picture Claire staring as I rub and finger myself, I think again of kneeling over her face, of looking down at her as she watches me rubbing and fingering myself. Would she want to touch me as well? I imagine a drop of cum falling.\n\nThe images are all so obscene... so shocking, so absurdly beyond the pale - my mind rebels. My face is burning hot. I'm sure it must be scarlet. I'm beginning to shake.\n\n\"Je t'en supplie,\" she whines, her voice high and soft with need. Her hand below my cheek pulsing softly. She's begging me, \"please.\"\n\nBut my fingers were already between my legs, touching my smooth hairless mons, my lips. Sliding into myself, I'm wet. Like on the dance floor, her body leads and mine follows.\n\nI take hold of her rolling shoulder with my free hand, squeezing it tight, the tiny motions telegraphing down my arm. Our lips are so close, sharing breaths back and forth. She stares into my eyes, biting her lip. The room is silent except for the tiny wet sounds of us touching ourselves, our little moans, and soft cries. She slides a knee between mine, drawing us even closer. The back of my hand moving against the back of hers. I feel the changing pressure as her hips start rolling, pushing her hand harder against mine, my fingers pushing deeper into my wet pussy. My hips follow her lead, pushing against my hand firmly against hers. Our breaths become shallow, panting, interjected by rapid little moans.\n\nOur breasts are touching as I feel her begin to cum. She says my name, our lips touching. There is a tangle of limbs, her holding me tight, me holding her. The orgasm makes me cry out.\n\n\"CLAIRE!\""
    ],
    "authorname": "ButteredCrumpet",
    "tags": [
        "oral",
        "masturbation",
        "romance",
        "lesbian romance",
        "dating",
        "exhibitionist"
    ],
    "category": "Lesbian Sex",
    "url": "https://www.literotica.com/s/impact-of-collision-ch-03"
}
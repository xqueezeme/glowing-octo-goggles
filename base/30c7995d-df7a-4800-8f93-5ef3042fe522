{
    "title": "Always Ch. 04",
    "pages": [
        "This is the 4th installment of the story of Raph and Riley. More and more characters are becoming regular players and as always, new characters are introduced into this fictional world that becomes more real with each chapter.\n\nAs always, I wouldn't put a story up here without it getting the seal of approval from my editor, RandyD1369. \n\nDisclaimer: All characters are completely fictional. Any characters engaging in any type of sexual activity or situation are 18 years old or older.\n\n*****\n\nThe tires of the Cessna CJ3 gently kissed the runway, trailing small puffs of blue smoke as the sleek jet touched down. The reverse thrusters engaged, using the power of the twin Williams FJ44-3A jet engines, along with the spoilers, to assist in slowing the plane's forward momentum and easing the load on the braking system. As the speed bled off, the plane exited onto the taxiway where it received taxi clearance to the Charter Air FBO.\n\nAs the engines spooled down, the pilot and co-pilot went through the checklists.\n\n\"Congratulations Mr. Savage,\" the man in the co-pilot's seat said, shaking Raph's hand, \"You have successfully passed your final check ride and I'm glad to issue you your jet rating.\"\n\n\"Thank you, Mr. Vasquez, it's been a pleasure,\" Raph said.\n\n\"I must say, you've taken to jet flying better than anyone I've ever worked with. I suspect your time in the TBM has a lot to do with that. You're used to a turbine engine and flying a performance aircraft so you picked this up quickly. You were also a quick study with the systems and avionics.\"\n\n\"I had a good study partner,\" Raph said simply. Riley had sat with him for hours as he studied the new aircraft's systems and Garmin G1000 avionics suite. She had quizzed him to the point that he was pretty sure she could operate the system effectively.\n\n\"Well whoever and whatever method you used, it was effective,\" Vasquez said. \"I'll get the paperwork filled out before I leave and you'll be good to go.\"\n\nRaph finished closing up the aircraft and prepared to head out. He carried his satchel bag out and put it in his truck. He wasn't really in a hurry to get home. Riley had already told him that she was helping Maria with some project tonight so he was on his own, which had become something rare. He and Riley spent every night that they were both in town, together. They were either at his apartment or her house. They spent nearly all their free time together. They also spent time with Maria and Hunter. They went out together or had game nights, so tonight he wasn't looking forward to coming home to an empty apartment but he would never ask Riley to abandon her friend.\n\nHe pulled into the apartment parking lot, looking as always for Riley's truck, but it wasn't there. He parked, grabbed his satchel, and walked to his apartment. He unlocked the door and swung it open. Suddenly the lights came on and people were yelling. He saw balloons and streamers and someone shot confetti at him. He stumbled backward, almost off of the sidewalk before catching himself. His eyes finally focused on Riley's brightly smiling face. She held a poster board sign that read, \"Congratulations to my Jet Pilot\" with an expertly drawn picture of the Citation CJ3. Maria and Hunter were both there as well as Riley's friend Peyton, the red-headed, large-breasted flirt, and a man Raph didn't recognize.\n\nRiley ran up as he stepped back through the door and threw her arms around his neck, kissing him quickly on the lips.\n\n\"Congratulations Raph,\" she whispered in his ear, \"I'm so proud of you.\"\n\n\"Thank you, Babe, but how did you know I passed my check ride?\"\n\n\"Because I never had a doubt,\" she said, smiling her beautiful smile at him. Her optimism was infectious. It was impossible to be sad or depressed around her.\n\nEveryone came up and shook his hand or hugged his neck. Even the guy he didn't know gave him a congratulatory handshake.\n\n\"I still can't believe Riley beat me to you,\" Peyton said as she hugged his neck. \"I didn't think she had it in her but damned if I've ever seen her happier. Don't screw it up.\"\n\n\"I try every day not to,\" he said honestly.\n\nThere was a cake with a remarkable likeness of the CJ3 and \"Congratulations Captain Raph Savage\" on it. There were two candles at the ends of the jet engines which Riley lit.\n\n\"Make a wish,\" she said.\n\n\"I already have everything I could ever want,\" he said before leaning down and blowing out the candles to another round of applause.\n\nEveryone got a piece of cake and sat around in Raph's limited seating. The mystery man turned out to be Evan Longacre. He was a golf pro at the Ross Rogers Golf Course. He and Peyton had been going out for a month, which Riley later explained was kind of a record. He seemed like a nice enough guy and he and Peyton seemed to make a pretty good match.\n\nMaria and Hunter had become close as well. Hunter had come out of his shell around Raph and Riley at least. He joked around and he could talk freely with Riley without sweating or stammering. Raph had taken Hunter fishing at Lake Meredith while Riley and Maria were having a girl's day. They'd even made a cowboy out of him, teaching him to ride horses, which he loved once he got over his initial fears.\n\nRiley came, after making sure everyone had cake and sat on the arm of the recliner where Raph was sitting.\n\n\"You are such a horrible fibber,\" Raph said, poking her on the leg.\n\n\"Who, me?\" she asked, in feigned surprise.\n\n\"Yes, you. The girl who had to go rescue her best friend, leaving me all by my lonesome tonight.\"\n\n\"Did you honestly think I'd be gone today, of all days?\"\n\n\"Aw, it's just another rating,\" he said humbly.\n\n\"Psh, I know how hard you studied for that rating. I've even been thinking about altitudes, barometric pressures, approaches, and departures. Even with all that, I still don't understand how you do what you do.\"\n\n\"Well, now you know how I feel when you talk business. I'm in awe of your knowledge, your out-of-the-box thinking. Things I'd never think of in a million years come from your mind like cards from one of those Vegas dealer machines.\"\n\nRaph pulled her down into his lap and kissed her softly on the neck.\n\n\"Watch it, fella. You'll get your congratulations present, but we have to wait until our company leaves,\" she protested.\n\n\"Yes ma'am,\" he smiled at the thought of his present to come.\n\nThe party continued for another hour or so. Peyton and Evan were the first to leave, but not before Peyton kissed Raph right on the mouth, right in front of Riley.\n\n\"Sorry girl, but I just had to know what I was missing,\" Peyton teased.\n\n\"Oh, you don't know the half of it,\" Riley said mischievously, causing Raph and Peyton both to blush.\n\nRiley and Peyton hugged. Raph and Evan shook hands and Raph promised to come out for a round of golf.\n\nMaria and Hunter stayed for a few minutes more, both helping Raph and Riley to clean up before they too bade them goodnight and left with hugs and handshakes all around.\n\nAfter everyone had left, Raph took Riley into his arms, kissing her tenderly.\n\n\"Thank you for tonight,\" he said softly. \"You're too good to me.\"\n\n\"You deserve it,\" she said, leaning her head on his shoulder. \"You worked hard and you did it, just like I knew you would.\"\n\n\"You helped, a lot,\" he reminded her. \n\n\"That's what you do when you love someone,\" she said simply.\n\nRaph could only marvel at this beautiful, smart, caring woman who brightened his days and filled him with a love he had never dreamed possible.\n\nWhen they finally separated, Riley got her purse from the bar and reached inside.\n\n\"Would you be a dear and walk through to the other lot and get my truck for me?\" Riley asked, holding out her keys.\n\n\"Sure thing,\" he said, taking her keys and giving her another kiss before heading out the front door. He walked through the apartment complex and spotted her Z71 in the back parking lot. He hit the unlock button, got in the truck and wheeled it around to park beside his truck in front of the apartment. He got out, locked the doors, and went back to the apartment. \n\n\"Babe?\" he called as he shut and locked the front door. There was no answer.\n\nHe looked in the kitchen -- nothing. The bathroom door was open and the light was off. The bedroom door was closed. He opened the bedroom door and as light spilled into the room he was graced with the image of Riley, laying on the bed, her arms up, hands behind her head. She was wearing the soft-purple Victoria's Secret bra and panty set Maria had given her for her birthday. She had one leg out straight and the other pulled partway up, leaned over on her other leg. Directly in the center of her pert breasts was a red bow. The sultry smile on her lips was an invitation he couldn't resist.\n\n\"Ready for your present?\" she asked in a low passionate voice.\n\n\"Oh yeah,\" he said, nearly tearing his clothes off as he closed the door behind him.\n\n*****\n\nRiley and Maria sat in a booth at Bubba's 33. Riley was having the Grilled Chicken Salad while Maria was enjoying the small 10-piece order of Kickin' Teriyaki Boneless Chicken Wings.\n\n\"So, was he surprised?\" Maria asked, excitedly.\n\n\"He was completely surprised,\" Riley replied, proudly. \"He was so sweet when I told him I had to help you with a project and wouldn't be there that night. He never brought up that it was his big day or anything, so when he walked in, he was sure he was by himself.\"\n\n\"You're evil,\" Maria giggled, \"but in a nice way. Did he at least get to 'open his present' after we left?\"\n\n\"Well, he got to open the present you got me,\" Riley said, blushing. It took Maria just a second to understand then she too blushed and giggled even louder, \"I think he forgives me for the little deception,\" Riley added with a sly grin.\n\n\"Well haven't you become the little mynx,\" Maria said in a hushed voice.\n\n\"For him, yeah, I guess I have,\" Riley replied honestly.\n\n\"Well, at least you're not having to deal with competition for your man's attention,\" Maria said poutily.\n\n\"Is there some other girl trying to move in on Hunter?\" Riley asked, surprised.\n\n\"No, it's the 'bromance' he has now with Raph,\" Maria said, rolling her eyes, \"He's always wondering when we're going to hang out with you and Raph, have I seen you and Raph, blah, blah, blah. I'll be honest, at first I thought he was smitten with you, but then he starts asking when you and I are going to do something so he and Raph can go fishing or hunting -- he's never shot anything in his life and he's all wanting to go hunting. I think it's just that Raph is so different from the guys he's used to hanging around and he thinks some of Raph's coolness might rub off on him or something.\"\n\n\"Oh, Maria, that is so sweet,\" Riley said, putting her hand on Maria's. \"Raph really does like Hunter and it's sweet that Hunter kind of looks up to him. He could have worse role models.\"\n\n\"I know, and I love Raph too, but good Lord, Hunter could keep some of that stuff to himself,\" Maria opined.\n\nRiley couldn't help but giggle softly at her friend's frustrations.\n\n\"Well, we're about due a girl's day anyway so let's think of something to do and we'll let the boys go play in the dirt and do manly stuff,\" Riley offered.\n\n\"Well, I could use a morning shopping and an afternoon at Indulge,\" Maria said thoughtfully.\n\n\"I'll set up the spa appointments, you decide where you want to go shopping,\" Riley said brightly.\n\n\"Deal,\" Maria agreed.\n\n*****\n\nThe sun was just peaking over the eastern horizon. A low, sparse fog lay over the surface of the water. The morning stillness was interrupted by a soft splash near the bank of the lake, followed by a metallic clacking and gurgling of water as an alien object moved away from the bank, leaving a small wake on the otherwise placid surface of the water. The slow steady chugging stopped suddenly only to be replaced a second later by fierce thrashing at the water's surface. A large-mouth bass jettisoned itself from the water, shaking his head vigorously, mid-flight, before splashing back down into the water.\n\nRaph, standing on the bow of the 20' Ranger bass boat, pulled upward on the rod, noting the bowed arc as the tip of the rod stayed pointing toward the surface of the water. He reeled in the line, moving the fighting fish ever closer, careful not to get too impatient, taking his time, keeping the line taught. He expertly moved the rod side-to-side whenever the cagey fish would try to swim toward a stump or submerged tree, trying to tangle the line enough to get the slack needed to spit the lure from its cavernous mouth.\n\nTurn by turn, foot by foot, Raph finally got the tired fish alongside the boat. Holding the rod tip high, maintaining pressure on the line, he reached into the water with his free hand, feeling his way to the fish's head. He pulled down on the bottom jaw, placed his thumb inside the mouth, careful to stay away from the hook, and lifted the fish clear of the water. He immediately and carefully removed the hook before laying his rod down on the deck of the boat and turning to show his prize to his fishing partner.\n\n\"Dude, that's the biggest fish I've ever seen!\" Hunter exclaimed.\n\n\"I have to admit, it's one of the biggest I've caught since I moved up here,\" Raph confessed.\n\nOne of Raph's fellow pilots lived on Lake Meredith and had told Raph that he was welcome to come up and use his boat anytime he wanted. Raph tried not to abuse the privilege, but it was nice to have such a great boat to fish from, and not to have to tow it on the 50+ mile drive to the lake. \n\nRaph and Hunter continued to fish along the southern shoreline of the lake, hitting the natural points formed by rock outcroppings. Lake Meredith was actually a dammed-up section of the Southern Canadian River, which incidentally begins in Colorado, not Canada. The lake was fed on the western end by the Canadian and the river continued, below the dam spillway, on the eastern end until finally converging with the Arkansas River near Muskogee, Oklahoma, at the western edge of the Boston Mountains.\n\n\"Can I ask you a question?\" Hunter asked as they fished a sloping gravel bank with floating plastic worms.\n\n\"Sure,\" Raph said, not taking his eyes from the mono-filament line stretching from the end of his rod into the water.\n\n\"How do I get Maria to look at me the way Riley looks at you?\"\n\n\"That's a tough one,\" Raph said, trying to think his answer through carefully. \"People date. The reason for dating is to try to determine your compatibility. Do you like the same things, do you dislike the same things, do you have the same moral compass, same belief system, so on and so forth. I only dated two girls before Riley. Seriously dated that is. One was in high school and the other in college. I had pretty strong feelings for both of them, and they both checked off most of the boxes, but there wasn't that deep, soul-binding connection that I have with Riley. Now, at the time, I didn't know that. I knew, instinctively I guess, that something was missing. In both relationships, we just gradually grew apart, over time. Both ended amicably, with both agreeing there was little need in pursuing the relationship any further, but with no animosity. We had conducted the dating experiment and it just didn't pan out.\"\n\n\"I never really dated. Once, in college, I and another Computer Science major went out for a couple of weeks, and to be honest, I think we were both just tired of being virgins. We went out twice, slept together twice, and decided we were better as friends. With Maria, I feel more for her than I've ever felt for anyone else and I think she feels the same way. I've just never been here before and I'm afraid I'm going to screw it up.\"\n\n\"Let me ask you something; in the quiet times, when we're fishing, what are you thinking about?\"\n\n\"Well, of course, I'm thinking about fishing,\" he said, then paused to contemplate the question, \"but I'm also thinking about Maria,\" Hunter said as though he surprised himself with his admission.\n\n\"I'd say that's a good start,\" Raph said, \"Fishing is something that I've done so long that it's muscle memory, I do it without really thinking about what I'm doing. That leaves my mind free to think of other things. Before, it was thinking about flying. Doing ground speed corrections in my head, stuff like that, but now, 90% of the time, it's Riley that fills my thoughts. I can still enjoy our fishing trips just like I still enjoy going flying, it just makes seeing her afterward that much sweeter.\"\n\n\"I watch you and Riley and you're always so in sync. It's like you know what each other are thinking. I try to anticipate what Maria is thinking, and I'm usually wrong,\" he said dejectedly.\n\n\"The important part is that it has to just come. You can't force it. Everybody's experience varies. My parents loved each other until they both passed so I know their love was the genuine article, but I don't remember seeing them be like Riley and I are. Maybe things settle down once you have kids but I just believe that each couple is different, but that connection, if it's the real thing, is always there. Don't try to be me and Riley, just be you and Maria and cultivate that relationship and see what grows.\"\n\nHunter was quiet for a time, busy with his thoughts. Raph began to fear he had offended him somehow.\n\n\"Thanks, man,\" Hunter said finally. \"I never had a brother and my sister is 6 years older than I am so I never really had that close person that I could open up to.\"\n\n\"Well, I never had a brother or a sister, but yeah, it is nice to have another guy that you can just be yourself with, not having to put on the macho mine's-bigger'n-yours crap.\"\n\nBy the end of the afternoon, they had enough fish for a nice fish fry. They returned the boat after filling it back up with gas and also hooked it up to the battery tender when they replaced it in the shop where it was kept. Raph made sure it was as clean when he left it as it was when he picked it up.\n\nThey headed south on highway-136, back to Amarillo.\n\n*****\n\n\"Oh, I am wiped out,\" Maria said as they drove toward Raph's apartment. \"Those deep tissue massages just take everything out of me.\"\n\n\"Well, hopefully, the boys don't have too much excitement planned for the evening,\" Riley agreed, also feeling the full-body relaxation from the massage.\n\nThe smell of supper cooking hit them as they walked through the door. Both girls kicked off their sandals at the door and made the short walk to the kitchen. The site of Raph and Hunter, both clad in Wrangler jeans, boots, and tee-shirts with red aprons on was a sight to see. The boots and Wranglers were other habits Hunter had picked up from Raph. Raph was taking the basket out of the Fry Daddy as Hunter was battering fillets in a bowl of Raph's secret fish fry batter. \n\n\"You girls just sit down and make yourselves comfortable, after we get a kiss that is,\" Raph said, turning his head to look back at Riley and Maria.\n\nBoth girls walked up and kissed their beaus.\n\n\"You boys are so talented,\" Riley said, wrapping her arm around Raph's waist. \"This looks and smells so good. I didn't even realize I was hungry until I open the front door and the smell hit me. Now I'm starving.\"\n\n\"Oh, me too,\" Maria said.\n\n\"Well y'all have a seat and I'll fix you a glass of tea,\" Raph said, gently pushing Riley toward the living room. Both girls collapsed on the love seat, leaning in against one another, their heads touching. Raph knew how Riley was after a massage. She would be wiped out the rest of the evening and would probably be asleep by dark. He got two glasses of tea and sat them on the coffee table in front of the girls before going back to cooking the last of the fish.\n\n*****\n\n\"That was so good but I ate too much,\" Riley said after they'd eaten supper.\n\nSupper had been fried fish, hush puppies, brown pinto beans, and skillet fried potatoes. It was not a meal they had very often as they both tried to eat pretty healthily, but they both had a penchant for fried fish and barbecue.",
        "\"Well, why don't you and Miss Maria go sit back down and watch some TV while Hunter and I clean up and if you feel like it afterward, we can play some cards or something,\" Raph offered.\n\n\"I hate to make you guys cook and clean,\" Riley protested.\n\n\"Hey, it's still spa day,\" Hunter quipped.\n\n\"That is it. It's y'all's day to be pampered,\" Raph added.\n\n\"You're not getting any argument out of me,\" Maria giggled as she and Riley got up and headed back to the living room.\n\nBy the time Raph and Hunter finished cleaning up, Riley and Maria were both fast asleep on the love seat, again, leaning into one another, shoulders, and heads resting against each other.\n\nRaph grabbed two bottles of water and motioned with his head for Hunter to follow as he eased open the sliding door to the small patio. Raph handed Hunter a bottle as they sat in the patio chairs, both kicking their booted feet up on the small metal patio table.\n\n\"Hard to beat a day like today,\" Raph said, sipping his water slowly. \"Good fishing, good food, good friends, good times.\"\n\n\"Yeah, it's hard to believe a year ago I would have spent today locked in my room playing video games until the wee hours of the morning,\" Hunter said.\n\n\"I know the feeling; well sort of. Before Riley, I spent all my free time at the airport. If I wasn't flying I was tinkering around with the planes. I'm not certified to make any major repairs, but I liked just doing little stuff. I realized later, after Riley, that I was just trying to give myself a reason to not just sit here in the apartment, staring at the walls.\"\n\nHunter and Raph talked on for two more hours, long after the sun had set before Hunter announced he'd best be getting Maria home. They went in and gently woke the girls, who apologized for falling asleep. \n\nRaph and Riley walked Hunter and Maria to the door and saw them out. Raph walked Riley straight to the bed, and while she was undressing, he got her favorite sleeping shirt, which was his Beechcraft Baron tee-shirt. He pulled the shirt over her head and settled it down around her as she stood with her arms lifted. When the shirt cleared her chin, he softly kissed her perfect lips, not too passionately as he knew tonight sleep was what she craved, and he was okay with that. He pulled back the covers as she climbed in. He went back and turned off all the lights, checked the front and sliding doors, and returned to the bedroom where Riley was already fast asleep. He could have stood there and looked at her sleeping form for hours and never tired of it -- or he could get undressed and get in the bed with her. He went with the later.\n\n*****\n\nRaph was cruising at 43,000 on his first passenger flight in the CJ3. Dan Simmons was his co-pilot. He was the senior pilot for Charter Air but was nearing the downhill side of his professional piloting career. It was he who had suggested Raph for the captain's training on the new jet, opting for the co-pilot's training for himself. \n\nTheir current flight was to Atlanta, Georgia, an 865-mile flight with a 2:15 flight time. They had six passengers on board, all business types. The flight had been going smoothly but thunderstorms were gathering directly around the Atlanta International Airport. Raph continued to review systems and procedures in his head. He and Dan prepped the expected approach into the flight management system. It was different, flying single pilot and flying with a co-pilot. When flying single pilot, the pilot is responsible for everything. In the pilot/co-pilot scenario, the pilot yields some of that control to the co-pilot and even though the pilot and co-pilot cross-check and verify, it was still strange for Raph not be in complete control.\n\nAs they began their descent the air became more turbulent, but the sleek jet handled it well. Raph and Dan worked well together with Dan talking to ATC and updating the PFD or primary flight display and the MFD or multi-function display of the G1000 flight system. Raph handled the physical flying of the airplane, mostly via the auto-pilot system which he programmed for altitude and heading until the system became locked on the ILS localizer and glideslope. With the wind out of the northeast, they were assigned runway 8L for landing. The runway was still hidden by low cloud cover at 5 miles from the runway threshold. The current approach allowed them to descend to 213 feet AGL, above ground level. If at that altitude they could see the runway, they were allowed to land, if they couldn't definitively see the runway at that altitude, they were required to execute a missed approach procedure, declaring the missed approach and climbing back into the sky.\n\nAt 300 feet AGL, they finally dropped below the cloud base and the runway came into sight. Raph punched off the auto-pilot and hand flew the remaining 300 feet, setting the airplane down on the runway smoothly before deploying the reverse thrusters, not wanting to depend on the wheel brakes on the wet runway. Once the plane slowed enough he exited the runway onto the taxiway, stopping once he passed the hold-short bars on the taxiway which officially cleared him from the runway, allowing for the next aircraft in the landing pattern to come in.\n\nDan had been handed off to the ground controller and had their taxi clearance to the designated FBO. \n\n\"Good job, kid,\" Dan said, nodding his head as though the landing under difficult circumstances was validation of his decision to make Raph the Captain of the CJ3.\n\n\"Thank you, Sir,\" Raph said, keeping his eyes looking out the windscreen. Atlanta was a busy terminal so he was careful not to put himself in a position to get himself in trouble with any other aircraft.\n\nTurning into the FBO, Raph spotted the ramp marshal waving with his lighted wands. Raph eased the jet into position as the marshal held the wands high, straight up, slowly bringing them together, forming an X, Raph's signal to stop. Raph and Dan went through the shutdown checklists before deplaning the passengers. \n\nRaph and Dan went inside the FBO and arranged for the CJ3 to be placed in the overnight hangar since they wouldn't be returning until the next day. Once that was done, they took a taxi to their hotel. As soon as they got in their taxi, Raph removed his phone from his pocket.\n\nRaph: Hey you.\n\nRiley: Hey you, good trip?\n\nRaph: Not bad. A little weather around the airport as we came in but nothing the CJ3 and Dan couldn't handle.\n\nRiley: Yeah, Dan, and you were just over there taking a nap I suppose.\n\nRaph: Well, he wouldn't let me sleep, so I was reading a Southern Outdoors Magazine.\n\nRiley: Keep it up, Cowboy. I know you better than that. I'm glad you made it safely.\n\nRaph: So what are your plans for tonight? \n\nRiley: I thought I'd cook supper for Dad and do some things around the house.\n\nRaph: I'm sure Steve will enjoy that. I'm glad y'all are getting some time together.\n\nRiley: Yeah, I think it'll be nice. It's been a while since he and I just hung out. I may see if I can get him to go riding with me tomorrow.\n\nRaph: I bet he'll jump at the chance.\n\nRiley: So what's on your agenda tonight?\n\nRaph: First off, seeing if they sell earplugs in the hotel cantina.\n\nRiley: Earplugs?\n\nRaph: Yeah, this isn't the first time Dan and I have bunked together. He snores like a log truck. Even worse than you. (smiley emoji)\n\nRiley: I snore?\n\nRaph: No, but you do sometimes talk in your sleep.\n\nRiley: About what?\n\nRaph: Just how much you love me, how awesome I am, how cute my butt is. Little things like that.\n\nRiley: Well, that's all true so I can't say your lying.\n\nRaph: It looks like we're at the hotel. I'll let you know once we're all settled in for the night. Love you, Babe.\n\nRiley: OK, love you too.\n\n*****\n\nRiley was just finishing cooking herb encrusted chicken breasts. She'd already prepared some steamed vegetables and white rice. She made two plates and sat them on the table before walking to her father's study and knocking on the door.\n\n\"Come in,\" he called from within.\n\nRiley opened the doors and stepped inside.\n\n\"Supper's ready,\" she said.\n\n\"Okay, I'll come down and fix a plate in just a minute,\" he said, pulling his reading glasses back down onto his nose.\n\n\"Your plate's already made and waiting beside mine at the dining table,\" Riley said sweetly.\n\nSteve Barrett pulled his glasses off and looked at her and smiled.\n\n\"You want to sit down to dinner with the old man?\" he asked.\n\n\"I most certainly do,\" she replied.\n\n\"Well, who could pass up an offer like that,\" he said, getting up from his desk.\n\nRiley took his arm and walked with him down the stairs and back to the dining room.\n\n\"This looks good,\" Steve said, sitting down at the head of the table.\n\n\"Thank you, I just hope it tastes good too. I tried a recipe I found online,\" she admitted.\n\nSteve cut a generous portion of the chicken and put it in his mouth.\n\n\"Mmm, cooked just right and well seasoned. It's excellent,\" he praised. \"So what's the occasion?\"\n\n\"No occasion. It's just been a while since you and I have had the chance to sit down and eat a family dinner,\" she said simply.\n\n\"It has been a while,\" he agreed. \"I miss it, but I haven't wanted to say anything because I can see the writing on the wall.\"\n\n\"Oh, what writing is that?\"\n\n\"It won't be long before you, or Raph, come and tell me you two are getting married and you'll be moving out -- for good,\" he said in his blunt and honest way.\n\n\"Oh, Daddy,\" she said, reaching her hand over and putting it on his still muscular forearm, \"that is not a conversation that we've ever had.\"\n\n\"You may not have had the conversation, but if that boy isn't making plans, he isn't half the man I believe him to be,\" Steve said before taking another bite of chicken.\n\nRiley sat, quietly thinking. Was Raph planning? Was she? Of course, she'd thought about it. A woman had to think of her future and she knew her future included Raph, but she hadn't allowed herself to think of wedding dresses or venues, she hadn't practiced writing 'Riley Savage' in a notebook. \n\n\"Well, even if someday I were to get married it's not like we'd never get to eat a family dinner together again,\" she finally said.\n\n\"Honey, you have fussed over me for years now. Taking care of me, making sure I eat right, making me exercise, and hanging around this old house with me when you should have been out with your friends. It's time now for you to think about Riley. I know you are afraid to leave me alone because you think I'll be sad and alone. Seeing you happy, especially since you and Raph have been together, has given me 20 more years of life. Seeing you rejuvenated has rejuvenated me as well. This is the way of the world, it's time for you to start thinking about your life.\"\n\n\"I know, and I do, but I also worry about you too.\"\n\n\"I'm going to be here for many years to come, Honey, I will see grandsons, or granddaughters riding horses and playing in the fields,\" he said, as a foregone conclusion.\n\n\"Hey, getting a little ahead of yourself aren't you,\" she laughed nervously. \n\n\"Well, maybe a little but your children are going to be absolutely something,\" he said, smiling warmly at her.\n\n\"Is it weird that you've thought more about my kids than I have?\" she asked, somewhat worriedly.\n\n\"No, Honey, it's not. You're young and in love and right now you and Raph are all you can think about. As your father, trust me, I want to know that you love him, and he loves you, but I'll skip how you two express that love, so I just look out a little further at the product of that love. You're going to be a wonderful mother.\"\n\nRiley's eyes began to tear, \"Thank you Dad, but what if I do what Mom did? I mean, did you think when you married her that she would ever do what she did?\"\n\nSteve's eyes flashed, only for a moment, to his hard raptor eyes, \"You are not your mother,\" he said sternly before his eyes immediately became the soft again, like hers, \"You're the very best of both of us. I have absolutely no worry whatsoever that you will be anything but the perfect mother. Now, let me help you clean up and we'll go sit down and just spend some time together.\"\n\n\"I'd like that,\" she said, smiling and wiping her eyes.\n\n*****\n\nRaph and Dan landed the CJ3 at Amarillo International at 12:32 pm, local time. They unloaded the first round-trip passengers for the new jet who were complementary of the flight and even shook Raph and Dan's hands.\n\nAfter he finished with his paperwork he headed to his truck. Riley was planning on spending the day with her Dad, and for once he had somewhere to go that he didn't want her along. He swapped out of his Charter Air shirt for a non-logo button-up Wrangler shirt. He drove straight to the Westgate Mall, parked, and went inside. Once inside he went straight to the Zales Jewelry Store. \n\nRaph knew what he wanted. He wanted Riley, now and forever. He'd given up on thinking he'd ever make enough or have enough to feel equal to her financially. He'd also decided it didn't matter. He wasn't going to wait around trying to close a gap that was never going to close. He didn't know what she was going to say or think but he could not live with himself if he didn't take the chance. \n\nWhen he sold his parents home and property he had socked the money into an investment account, taking out only enough to pay off his used truck so that he could start debt-free. When he got to Amarillo he'd shopped around to find his apartment, making sure he didn't overpay, but still lived in a good section of town, equally close to work, shopping, and essentials. He'd also squirreled away his wages from flying because he'd planned to eventually buy a house. He would never buy a house without Riley's input, but an engagement ring was another story. He'd been looking online the night before in his hotel room. He'd found the style he wanted. He'd also borrowed a ring that he'd seen Riley wear on her left ring finger to make sure he got the size correct without tipping her off.\n\n\"May I help you, Sir?\" a finely dressed woman behind the display case asked him.\n\n\"Yes ma'am, hopefully so,\" Raph smiled at her. \"I'm looking for an engagement ring.\"\n\n\"Oh, do you have something in mind?\" her eyes lit up, seeing a potentially large commission.\n\n\"Yes ma'am,\" he said, taking out his phone. He showed her a picture of the ring he was interested in. It was a 3-stone, 2-ct engagement ring with a matching 3-stone 1-ct wedding band that fit with the engagement ring.\n\n\"Oh, I love a man that knows what he wants,\" she smiled at him. \"Do you know her ring size?\"\n\nRaph pulled the ring from his pocket and handed it to the salesperson. She slid it down a tapered bar and wrote the size down on a form along with the other pertinent information.\n\n\"Okay, Mr. Savage, I believe I have everything I need. It should be ready for pickup by the end of the week,\" she said, giving Raph a copy of the order form. He paid half of the $6000 price of the rings and exited the shop feeling elated and terrified.\n\n*****\n\nRaph drove, apprehensively, toward Riley's house. The apprehension was because he was driving there at the behest of Steve Barrett, not Riley who sat beside him in the truck. Steve had called him early this Saturday morning and the conversation, like most with Steve, was short.\n\n\"Hello,\" Raph had answered without looking at who was calling. He had answered quickly, hoping not to wake Riley who lay, still sleeping, beside him.\n\n\"Raph,\" he'd heard Steve's deep voice, \"this is Steve.\"\n\n\"Yes sir,\" Raph said, leaning upon his elbow, now wide awake.\n\n\"Can you come out to the house this morning? Say 9:00.\"\n\nRaph looked at the clock on the bedside table, it was 7:01 am, \"Yes sir, I can be there at 9:00,\" Raph said, confused.\n\n\"Good, I'll see you then,\" Steve said before the connection clicked off.\n\nRaph sat the phone back on the table and laid gently back down in the bed.\n\n\"Who was that?\" Riley mumbled without opening her eyes.\n\n\"Your dad,\" he said simply.\n\n\"What did he want?\"\n\n\"He wants me to be at y'alls house this morning at 9:00.\"\n\n\"What time is it?\"\n\n\"7:00.\"\n\n\"Ugh, I guess we better start getting around,\" she said, but instead snuggled up closer to Raph.\n\nHe wrapped his arm around her, pulled her close, and kissed the top of her head, making her sigh contentedly as she slid her leg across his thighs. He could feel her bare breasts pressing into his side and could feel the tickle of her landing-strip-trimmed pubic hair against his hip. This contact combined with man's natural propensity for \"morning wood\" had him nearly fully erect. Riley's hand slid lightly down his stomach until it contacted his engorged member.\n\n\"Maybe we should take care of this and then get ready,\" she said softly, moving her head back to softly kiss the side of his neck.\n\n\"Probably a good idea,\" he said, a loving smile on his face as he lowered his lips to hers.\n\n*****\n\nRaph and Riley pulled into the driveway and Raph was wracking his brain to try and figure out why Steve had called him.\n\n\"And you have no idea why I've been summoned?\" he asked Riley.\n\n\"Not a clue,\" she said. It was cute that even after all these months, Raph was still intimidated by her father. He was an imposing figure to be sure, but having grown up with him, she knew he was actually a big softie. \n\nRaph parked and they went inside. They found Steve in his study. He had several photographs laid out on his desk that appeared to be aerial photos of some land.\n\n\"Raph,\" he said, looking up from the photos, \"thanks for coming and sorry for the short notice. Something just popped in my head this morning and I wanted to work on it.\"\n\n\"Sure, no problem. What'cha got?\" Raph asked, relieved that Steve didn't seem to be mad.\n\n\"These are some aerial photos that I had taken probably 15 years ago. They were of the ranch as it was at that time. I've decided I would like to make some new ones, not just of the ranch, but also the offices. I have the plane, Riley has the camera, all I need is a pilot. Are you up for it?\" Steve asked.\n\n\"Well, Sir, it would be hard to get very good shots from a jet I would imagine. You would have to get high enough that the motion blur didn't affect the pictures, but then you lose a lot of the definition of the shot,\" Raph explained.\n\n\"I wasn't planning on using the jet,\" Steve said, \"I have a Cessna 182 in the hangar here on the ranch, I was hoping to use that. Would that fly low and slow enough to take good pictures?\"\n\n\"Oh, yes, of course,\" Raph said, having completely forgotten that Steve had a hangar, plane, and grass-strip runway here on the property. \"Is the plane up-to-date on all its certifications?\"\n\n\"Yes, I have two of my guys from the aviation department keep it regularly serviced and inspected. They fly it from time to time just to keep it exercised.\"\n\n\"Okay, sounds good. When would you want to do this?\" Raph asked.\n\n\"Now,\" Steve said in his customary no-wasted-words way.\n\nRaph looked at Riley who only smiled and shrugged her shoulders.\n\n\"Now's good for me,\" Raph smiled.\n\n\"I'll go grab my camera,\" Riley said, heading off to her room.\n\nSteve pulled a map from beneath the pictures and outlined the limits of the ranch and also the office property. Raph jumped on the computer and brought up current weather conditions, TFRs, or temporary flight restrictions, for the area, and to make sure they wouldn't be getting into any controlled airspace. Since this would be a VFR flight he preferred to stay out of controlled airspace. Satisfied that the weather would be suitable they headed out to the ranch airstrip. \n\nOnce in the hangar, Raph did a thorough inspection of the immaculate Cessna 182. He checked all of the fluids and control surfaces. He checked the fuel level in the wing tanks and checked for water in the fuel. He also looked over the maintenance logs, finding them filled out concisely and often.",
        "The large electric hangar door had been pulled up and Raph and Steve had pulled the Cessna out of the hangar onto the grass outside. Steve managed to fold his bulk up into the back seat while Riley sat in the right front seat and Raph in the left front. \n\nRaph looked around as much as he could before calling out, \"Clear Prop!\" which was a warning to anyone around that he was about to start the engine. Even though there was nobody nearby, it was a safety measure, something that you train to do every time.\n\nWith the engine started, he checked the gauges for oil pressure, engine temps, and fuel flow. He waited until there was heat in the engine before checking the windsock for wind direction and speed. He selected a direction for takeoff and taxied to the end of the runway, stopping short to do his run-up and test the mags. \n\n\"Everybody ready?\" he asked over the headset.\n\n\"Yep,\" Steve said.\n\n\"You bet,\" Riley smiled at him.\n\n\"OK, here we go,\" Raph said as he powered up and pulled onto the smooth grass strip. He eased in the power and released the brakes, holding back on the yoke to keep as much weight as possible off the nose wheel on the turf. At 60 knots they lifted clear and started a slow steady climb into the air.\n\nRaph followed Steve's direction, keeping his eyes out for any other air traffic. Riley took pictures as Raph circled lazily, climbing 500 feet per circuit. When they had taken all of the pictures Steve wanted, Raph checked the surrounding airspace then set a course for the Barrett Oil offices. Once there, Raph resumed his right-hand bank, slowly circling the office property, drawing the curiosity of a couple of the corporate security guards who came out to watch the low, slowly circling aircraft.\n\n\"They're not going to shoot at us are they?\" Raph joked on the headset.\n\n\"Hope not,\" Steve said simply.\n\nAfter they were finished they circled back around and headed back to the ranch airstrip. He made a soft landing and taxied up to the hangar before shutting the engine down. They all climbed out and Steve and Raph pushed the airplane back into the hangar before closing the large door. Once Raph had secured the aircraft they locked up the hangar and climbed back in the side-by-side and headed back to the house.\n\nOnce back at the house, Riley offered to go and make lunch while the men chatted in Steve's study. \n\nRaph made certain the door was closed before turning to Steve.\n\n\"Steve, I need to ask you something,\" Raph said.\n\n\"Sure, Son, what can I do for you?\"\n\nRaph took a deep breath, \"Sir -- Steve, I'd like your blessing to ask Riley to marry me,\" he said, knowing Steve preferred plain straight talk.\n\nSteve leaned back in his chair, his elbows on the armrests and his hands held up in front of him, fingertips touching. \n\n\"Have you talked to her about this yet?\" he finally asked, his deep voice low and calm.\n\n\"No, Sir. I wanted to speak with you, let you know that I love your daughter more than life itself. This is not some snap decision, we're not in trouble and we're not in a family way. I just can't imagine the rest of my life without her. I've told you before and I reiterate now, my life's mission is Riley's happiness. I will spend every day loving her; making sure she knows she's loved.\"\n\n\"Where will you live?' Steve asked.\n\n\"I've got some money that I saved and the proceeds of the sale of my parent's place in Fort Stockton. I plan to buy a house. Riley will of course help with picking it out, but I will provide her with a real home before we get married, and of course, all of this depends on whether or not she accepts my proposal.\"\n\n\"Well, Raph, there are a couple of things. Number one, Riley is the only person Riley answers to. My blessing, while I appreciate your asking, is irrelevant. Number two, I appreciate you wanting to buy a house but I believe we need to talk a little further on that. I'm not trying to insinuate that you can't provide an adequate house for Riley but I would like to suggest you build a house, here on the ranch property. I'm not trying to keep Riley, or you, under my thumb, but certain security measures have already been put in place around this property. You and Riley can pick most anywhere you want from close by to the far side of the property. You can build whatever you like, it's up to the two of you.\"\n\n\"I will discuss that option with Riley, certainly, but I'm afraid I can't commit to that without her input,\" Raph said.\n\n\"Fair enough,\" Steve conceded.\n\n\"I do love her,\" he said quietly, \"why else would someone like me think he has a chance to have a life with someone like Riley.\"\n\n\"Let me let you in on something, Raph,\" Steve said, leaning forward in his chair and resting his forearms on the desk, \"You are cosmically lucky to be with Riley, but not for the reasons you might think. You see the money, the oil business, this big house, land, and new vehicles. Those things are just that, things. The reason you are so lucky to be with Riley is because of the incredible person she is. Riley is the sum of every good part of me and Rose. She's smart, kind, empathetic, gracious, and loving. She can stand in a boardroom full of stuffed shirts and command the room. She can talk with anyone, on their level, and her smile and personality are infectious. She is such a rarity in this world. She is the genuine article, and 'that' is the reason you're lucky to be with her. It has nothing to do with money, Raph, and the sooner you figure that out, the happier you both will be.\"\n\n\"Steve, thank you for that, and you're right. She would be just as special if she were penniless. She is certainly one of a kind,\" Raph said, relieved by Steve's speech.\n\n\"That she is, Son. That she is. Would you be willing to sign a prenuptial agreement?\" Steve asked.\n\n\"Absolutely,\" Raph said instantly.\n\n\"Well, that is Riley's call, but I'm not going to recommend it,\" Steve said surprisingly.\n\n\"You won't?\" Raph seemed confused.\n\n\"No, Raph, I won't. I'm sure our lawyers will advise otherwise but I honestly think you are the one man on this big blue ball that really is not trying to get rich by marrying a rich girl. I've gotten where I'm at today by trusting my instincts and my instincts tell me you're something special yourself. You and Riley are the most made-for-each-other people I've ever had the pleasure of being around. You two restore my faith in humanity,\" he said in his simple, honest way.\n\n\"Thank you, Steve. I promise, I will not prove you wrong,\" Raph said, looking Steve directly in the eyes.\n\n\"I know you won't, Son,\" Steve said, nodding his head.\n\n\"I do have one question though,\" Raph said, smiling.\n\n\"What's that?\" \n\n\"What is Riley's middle name?\"\n\nA knock at the door halted the conversation immediately.\n\n\"Come in,\" Steve said, leaning back in his chair, assuming a calm and relaxed posture.\n\nThe doors opened inward, \"You boys ready to eat?\" Riley asked, smiling her beautiful smile.\n\n\"Absolutely,\" Raph said, getting up from the chair.\n\n\"You bet,\" Steve said, rising also.\n\nRiley led the way, barefooted as usual, as Raph and Steve followed behind. Steve placed his hand on Raph's shoulder and squeezed it. As Raph looked over, Steve leaned over to whisper in Raph's ear. Raph listened and as Steve pulled away Raph looked questioningly over at Steve. Steve smiled a small smile and nodded his head. Raph nodded back as he felt Steve's hand slide from his shoulder.\n\n*****\n\nRaph and Riley were riding through the scrub-brush along the creek. Raph had subtly claimed the long-legged blood-bay gelding, Ranger, as his steed of choice. Riley was a little less monogamous, switching between the steel-dust gelding, Rocky, the strawberry roan, Bette, and the black mare, Shadow. Today it was Bette she rode. They'd been riding for an hour or so and had helped two of the ranch hands move a small herd from one grazing pasture to another. Afterward, they had gone into the brush, looking for a cow and heifer that the hands had been looking for. They stopped on a small ridge, looking down where the creek cut a swath through the brush. \n\n\"Want to get down and stretch your legs a minute?\" Raph asked.\n\n\"Sure,\" Riley responded, dismounting, trailing Bette's rein on the ground.\n\nRaph bent down where a small rock formation pushed up through the grass.\n\n\"Hey,\" he called to Riley, \"come look what I found?\" he said, pulling at the rock.\n\n\"Did you strike gold?\" she laughed as she approached.\n\n\"You could say that,\" he said, turning toward her but staying on one knee.\n\nRiley froze as she looked down and saw the black felt box in Raph's hand.\n\n\"Riley Milicent Barrett, I want to spend the rest of my life trying my best to provide you with the love and support that you deserve. Would you do me the honor of sharing my life, forever and always?\" he asked, opening the box. The afternoon sun shone brightly off the three diamond set of the engagement ring, nestled into the soft interior.\n\n\"Oh, Raph,\" she said, her voice barely above a whisper. Tears welled up in her eyes as she slowly lowered herself to her knees in front of him. She looked from the ring back to his eyes. She saw anxiety, a shadow of fear, and love; pure, wholesome, unequivocal love. She lunged for him, throwing her arms around his neck. The sudden assault knocked him over backward and she clung to him all the way to the ground. The unexpected fall dislodged the box from his hand, sending it tumbling over the embankment into the brush below.\n\n\"The ring!\" he yelled. Riley's eyes were big as saucers as they both lay on the ground watching, as if in slow motion, as the small black box bounced and rolled up to and over the edge of the embankment. \n\nRiley stood up and helped Raph to his feet. He went to the ledge, looking down into the brambles. As he leaned over the edge trying to see, the ledge gave way, tumbling him down into the brush in a cloud of dust.\n\n\"Raph! Raph, are you okay?\" Riley asked, running up the edge.\n\nAs the dust settled, she heard a groan and some coughing, \"Yeah, I'm okay,\" Raph finally said, \"well, I'm down here, let me see if I can find it. Can you meet me down by the creek?\" Raph called from somewhere in the tangle of brambles.\n\n\"Are you sure you're okay?\" she called.\n\n\"Yep, I just don't think I can get back up this bank,\" he said.\n\nRiley mounted Bette and took Ranger's reins to lead him along behind as she picked her way down to the banks of the creek. When she finally made it, she saw Raph, sitting on a rock on the bank. He was dirty and dusty, had several scratches on his hands, arms, and neck. He had leaves in his hair and the collar of his shirt, but the smile on his face was something she never tired of seeing. She dismounted quickly and ran to him.\n\n\"Oh, Baby, are you okay?\" she asked, examining him more closely now.\n\n\"I'm fine,\" he smiled, \"I'm just glad I found your ring,\" he said, holding out the closed box.\n\nRaph slid from the rock, down onto his knee as he opened the box and removed the ring, \"Let's try this again. Riley Milicent Barrett, will you marry me?\" he asked, holding out the ring.\n\n\"Yes, Raph, my darling, I would love to marry you,\" she said, holding out her left hand.\n\nRaph slid the ring easily on her ring finger.\n\n\"It's a perfect fit,\" she said, holding her hand out, admiring the sparkle of the sunlight on the gems.\n\n\"For the perfect woman,\" Raph said, standing up and taking her hands, \"I love you, now and forever.\"\n\n\"Oh, Raph, I love you too. Now and forever,\" she said as he leaned to her, kissing her softly.\n\n\"Now,\" Riley said when they separated, her eyes narrowed, \"who told you my middle name is Milicent?\"\n\n\"I'm afraid I can't divulge my sources,\" Raph replied cagily.\n\n\"Oh, I'll find out,\" she finally smiled. \"Only three people know and I'm pretty sure you didn't call and ask my mom, so that leaves Dad and Maria.\"\n\n\"Don't be mad,\" he pleaded. \"I just wanted to do this right, minus the almost losing the ring and falling down a cliff.\"\n\n\"It's okay,\" she said softly. \"I would have told you if you asked. I wasn't only named after my great-grandpa Riley, but also his wife Milicent, who they called Milie.\"\n\n\"I like Milicent,\" he mused. \"I may start calling you that.\"\n\n\"Oh, Love, you are so not going to start calling me Milicent,\" she smiled at him. It was kind of a scary smile. Scary enough that he immediately dropped any plans of calling her Milicent.\n\n\"As you wish,\" he said in defeat.\n\nRanger stomped his foot and blew through his nose. Bette cropped grass contentedly. Both were oblivious to the momentous occasion they'd just witnessed.\n\n*****\n\nRaph and Riley walked into the Texas Roadhouse restaurant and told the hostess they were part of a party that had already arrived. She told them where Maria and Hunter were seated and left them to find their way.\n\n\"Hey guys,\" Riley said as they approached the booth, \"sorry we're late.\"\n\n\"No problem,\" Maria said cheerfully, \"We haven't been here long but you're never late. What happened?\"\n\n\"Our ride took a little longer than expected,\" Riley said, smiling and blushing.\n\n\"Uh, okay,\" Maria said, slightly confused. She looked to Raph for an explanation and noticed the fresh scratches and scraps on his neck, and hands, \"Did you get thrown off your horse?\"\n\n\"No, I fell off a small cliff and into a thicket,\" he smiled.\n\n\"How in the world did you manage that?\" Maria asked, even more confused now.\n\n\"I was looking for something I, uh -- dropped, and the edge of the embankment gave way and over I went.\"\n\n\"What in the world was so important that you were hanging over the edge of a cliff?\"\n\nRaph looked at Riley who smiled and blushed even further before moving her left hand from her lap to the tabletop where she laid her hand, palm down, open on the table.\n\n\"Oh my God, you guys!\" Maria practically yelled, causing Hunter to jump and several nearby diners to look in their direction. Hunter was only a second behind.\n\n\"Is that an engagement ring?\" he asked quickly.\n\nRaph beamed while Riley proudly nodded her head.\n\n\"It is,\" she said quietly.\n\nMaria reached out and seized Riley's hand, yanking it toward her until Riley's chest was against her side of the table, preventing Maria from pulling the hand any further.\n\n\"Riley, it's beautiful,\" Maria said breathlessly. \"You did well, Fly-boy,\" she said looking over at the still smiling Raph.\n\n\"Thank you,\" Riley said, \"I love it. It's perfect.\"\n\n\"Congratulations you guys,\" Hunter said, reaching across the table to shake Raph's hand.\n\n\"Thanks, man,\" Raph said proudly.\n\n\"Thank you, Hunter,\" Riley said sweetly.\n\n\"We do have a question for you guys though,\" Raph said, looking from Hunter and Maria over to Riley.\n\n\"Maria,\" Riley said, still holding Maria's hand. \"Would you be my maid-of-honor at the wedding?\"\n\nMaria's eyes teared up and she squeezed Riley's hand so hard Riley was sure the ring was leaving impressions on the fingers next to it.\n\n\"I would love to, Riley, thank you,\" she said, almost crying.\n\n\"And I'll be needing a best man, Hunter,\" Raph said looking at the ashen-faced Hunter who just stared at him. \n\n\"I, uh, I'd be honored,\" he finally stammered out. \"Are you sure you want me?\"\n\n\"Hunter, man, you're my best-friend. You're the one guy I hang with that isn't because of work or something like that. I hang out with you because I like you and enjoy your company and it's just a bonus that you're dating my girl....my fiance's best friend,\" Raph corrected.\n\n\"Fiance!\" Maria squealed, \"Riley, I can't believe you're a fiance!\"\n\n\"Me either,\" Riley said, looking lovingly at Raph.\n\n\"So how did you propose?\" Maria asked Raph, \"I know you fell off a cliff, which is a bit dramatic, but let's hear it all.\"\n\n\"Well, the cliff part wasn't part of the plan,\" Raph chuckled, \"but years from now it'll make the telling of it that much better. We had been riding all day and had stopped on this beautiful little ridge overlooking the creek below, the afternoon sun was just right, so I invited Riley to get down and stretch her legs. I got down on one knee and said....\"\n\n\"He proposed,\" Riley said quickly, cutting him off before he repeated the actual words he used.\n\n\"Wait, what?\" Maria said, immediately sensing there was something she was missing.\n\nRiley rolled her eyes and blushed again. \"He was very formal when he asked,\" she said quietly.\n\n\"Formal?\" Maria asked.\n\n\"Yes,\" Riley said, looking around, making sure no one was listening, \"he used my \"full\" name,\" she whispered.\n\nMaria's eyes got big, \"No, he didn't. How did he....it wasn't me,\" Maria said suddenly, \"I would never, you made me swear an oath.\"\n\n\"An oath, about what?\" Hunter asked, now intrigued.\n\nRiley was now blushing blood-red, \"I knew you didn't. I know who the blabbermouth is,\" she said with a faint smile, \"Raph, being an old soul trapped in a young body, apparently asked for my father's blessing before he proposed, didn't you?\" she asked looking now at Raph.\n\n\"It was the right thing to do,\" he said simply.\n\n\"And I'm guessing he gave it?\" she asked, her eyebrow arched over her left eye.\n\n\"Not exactly,\" Raph replied cryptically.\n\n\"He didn't give you his blessing?\" she asked, now confused based on the conversation she'd had with her father earlier.\n\n\"He said that his blessing was not needed, that you made your own decisions and he trusted your judgment. It felt like it was a blessing, but he made it clear that he had no say in the choices you made in your life.\"\n\nThis sounded just like her father. Always encouraging her independence, but letting her know he'd be there when she needed him.\n\n\"And during this conversation, did you inquire, or did he offer freely the information being discussed here?\"\n\n\"I inquired,\" Raph said, shouldering his share of the burden. He was sure Steve was going to hear from Riley as well, \"He didn't immediately get a chance to tell me, or the history, because as soon as I asked, you knocked on the door and told us lunch was ready. He whispered it in my ear as we followed you to the kitchen.\"\n\nHunter sat looking at the three of them as if they were speaking a foreign language.\n\n\"What are we talking about here?\" he finally asked.\n\nAgain, Riley looked around, making sure no one was listening, \"Hunter, you're about to become a member of a very exclusive club. There are very few people who know my middle name. It's an old family name, as is Riley. You see, my father was very close to his grandfather, and grandmother, so I was going to be named Riley, after my great-grandfather, whether I was a boy or a girl. When I was born a girl, my father somehow talked my mother into naming me after not only my great-grandfather but my great-grandmother as well,\" she took one more look around before leaning over the table toward Hunter, \"My full name is Riley Milicent Barrett,\" she whispered.\n\n\"Milicent?\" Hunter whispered. \"That's the secret here, that your middle name is Milicent?\"\n\n\"Well, you must admit, as a name it's a little -- dated,\" Riley explained.\n\n\"Is it a Brittany, or Amber, or Tiffany, no,\" Hunter said, \"The way I look at it, there are some people who are named after their father just because that's the way it's always been done, but in your case, you were named after not one, but two people, that meant a whole lot to your dad. That's pretty cool in my book. Milicent is not a horrible name, it's a name that had special meaning to your dad, so special that he wanted you to carry it on. My middle name is Bartholomew, also after a great-granddad, I would have gone by it, but I couldn't spell it until I was in the 4th grade and by then I was used to being Hunter. I'm sorry if I'm speaking out of turn here, I just don't think your name is anything to be ashamed of. I like it,\" he concluded.\n\nEveryone at the table stared at Hunter. He looked up after picking up a cheese fry from the appetizer plate and saw everyone looking and immediately got nervous.",
        "\"You know what Hunter, you're exactly right. I've looked at this wrong my whole life. I swore poor Maria to secrecy and threw a fit to my dad every time he mentioned it until he finally just stopped. I do feel ashamed, not because of the name now, but because of how I've represented it. You're right, my dad loved his grandparents very much and it is a great honor to be given both their names. Thank you, Hunter,\" she said, reaching across the table and taking his hand, \"for helping me to look past my insecurity at what that name should have meant to me all along.\"\n\n\"You're welcome,\" Hunter said, relieved.\n\n\"See man, that's why you're my best-man,\" Raph grinned at him.\n\nHunter beamed at them both.\n\nRiley told them the rest of the story of the proposal, including Raph falling off the embankment and having to crawl through the thicket to first, find the ring, and then to extricate himself from the mass of briers and brambles. She told of Raph's second attempt at the proposal, including quoting him as saying \"Riley Milicent Barrett\" and of her joyful acceptance of his proposal.\n\nThey talked about wedding venues, where they were going to live, and many other things until the wait staff began to drop subtle hints that it was time for them to go.\n\n*****\n\n\"I think it would be perfect,\" Riley said, sitting in her saddle.\n\nRaph sat on the flat shelf, looking out over the rolling hills, the creek, and the lower grasslands. It was a beautiful panorama. It was on the far western edge of the Barrett property. Even from this elevated position, he was unable to see the ranch house, barn, or even the hangar and airstrip. From here, they appeared to be the only two people for miles. It was approximately a quarter-mile from where they sat to the property line and the highway. They would build their drive in from the highway if they chose to build here.\n\n\"I definitely can't complain about the view,\" Raph said, looking at Riley, as she sat on the shiny black mare, Shadow.\n\n\"It is beautiful,\" she said, still looking out over the land below.\n\n\"Yes it is,\" he smiled. She turned to look at him and finally realized he wasn't just talking about the view of the land. She smiled and turned the mare with her knees to ride up beside him.\n\n\"Have I told you lately that I love you?\" she said softly.\n\n\"It's been at least an hour,\" he smiled at her.\n\n\"I love you, Raph,\" she said, leaning over toward him.\n\n\"I love you too, Riley,\" he said, meeting her in the middle, their lips meshing together as Raph reached up to cup her neck. \n\n\"I do love it here,\" she said when they parted, \"It's so peaceful and beautiful.\"\n\n\"Then this is our place,\" Raph said, taking her hand.\n\n\"Our place,\" she echoed dreamily, \"I like the sound of that.\"\n\n\"Yeah, me too,\" he said, \"I'll have the builder out here on Tuesday to look the site over and make sure he doesn't see any issues.\"\n\n\"Where are you flying Monday?\" she asked.\n\n\"Cayman Islands,\" he said like he was just going to the corner grocery.\n\n\"Wow, Cayman Islands,\" she said, \"that sounds like fun.\"\n\n\"I should be on the ground just long enough to refuel, file my return flight plan, and get headed back. I should be back by the late afternoon. I still love my TBM, but that extra hundred knots of cruise speed with the CJ3 sure is nice on these longer flights,\" he smiled.\n\n\"As long is it gets you back home to me faster, I like it too,\" she smiled back at him with her beautiful smile.\n\nAs the sun began to set, Raph and Riley brought their horses to a canter, down off the plateau, toward Barrett Manor.\n\n*****\n\n\"This is awesome,\" Hunter said over the intercom as the TBM lifted off the runway. \"I've never been in anything smaller than a commercial jet.\"\n\nRiley turned from the front seat to look back and smiled at Maria and Hunter in the back. Hunter was like a kid on his first plane ride. He was alternately looking from Maria to the windows, watching the ground drop away from them.\n\nRaph was taking Riley, along with her maid-of-honor, to Houston to look at wedding dresses. They were going to look at Casa de Novia, Bridal Couture. Riley and Maria had spent weeks looking at bridal books, dresses, veils, bouquets, and trains. Now they were going to look at some of the actual dresses they'd been interested in.\n\nRaph's boss had been kind enough to allow Raph and the wedding party to use the TBM for the flight down to Houston. Riley offered to charter the flight but Greg Parker, the owner of Charter Air, had flatly refused the offer, telling Riley that she was a member of the Charter Air family and family flew for the price of fuel. Riley had hugged Greg's neck, causing him to blush.\n\nAt cruising altitude, with the auto-pilot doing most of the flying, Riley had changed seats with Hunter for a bit. He asked Raph a million questions, which Raph patiently answered in between calls to ATC. When they got ready to descend into Houston and the Houston International Airport, Riley politely asked Hunter to swap back, mainly because she knew Raph needed to concentrate as he got into the heavy air traffic around the airport and that would be hard to do with Hunter asking his rapid-fire questions.\n\nRaph maneuvered the TBM onto the correct approach path, guided by ATC until he was handed off to the tower for landing clearance. He was vectored in for a landing on runway 15-R. The landing was smooth and well-practiced. Raph let the TBM slow on the runway, exiting onto the taxiway midway down the 10,000-foot runway. After receiving taxi clearance to the ramp, he taxied to a parking spot and shut down the engine. \n\nOnce they secured the TBM, they rented a sedan and headed to the bridal shop. The girls were quickly engrossed in the seemingly endless dresses. Raph and Hunter sat in the provided chairs since Raph was not allowed to see the dress or dresses. After a time, Maria came out and called to them. As they got up, she wrapped her arm around Hunter's arm and started pulling him toward another part of the store.\n\n\"Riley has something she wants you to look at,\" Maria said over her shoulder, \"she's in dressing room three.\"\n\nRaph turned toward the back of the store and found the dressing rooms. He knocked lightly on the door with the big silver 3 on it.\n\n\"Yes?\" came Riley's unmistakable voice.\n\n\"It's me,\" Raph said to the door.\n\n\"Is it just you?\" she asked.\n\n\"Yes ma'am, just me.\"\n\nThe door opened quickly and Riley's hand came out, grabbing him by the front of the shirt, pulling him inside.\n\n\"Well hello there,\" he said as she wrapped her arms around his neck and squeezed him tightly.\n\n\"Hello yourself,\" she purred, \"I've missed you. Usually, when I take my clothes off this much, you're there and the reason my clothes are coming off.\"\n\nRaph suddenly realized Riley was wearing only her bra and panties. He buried his head in her neck and cradeled her round bottom.\n\n\"Mmm,\" she moaned softly as his lips found her neck.\n\nHer sensual body, wrapped in his arms, coupled with the thrill of being in a bridle-shop dressing room was enough to have him instantly erect. A fact not lost on Riley.\n\n\"Well, someone's thinking what I'm thinking,\" she breathed into his ear.\n\n\"Great minds think alike,\" he whispered as he slid his hands into the waistband of her panties, moving his hands downward, taking the lacy garment with them.\n\n*****\n\nRaph was finishing blading the last of the driveway. Steve had given him a crash course on using the mid-size Caterpillar dozer. By the time he'd reached the homestead, he'd become quite good at operating the dozer. He'd also had several 22-yard loads of SB2 gravel hauled in and dumped on the newly graded path. He would back-drag the gravel, smoothing it out. By the end of the weekend, he would be ready for the construction crews to come in and get started on the house. \n\nRiley and Raph had met with the architect and had approved the plans for a four-bedroom house. On the ground floor, there would be three guest bedrooms, a full guest bathroom, kitchen, dining room, den, pantry, and washroom. Upstairs would be the master bedroom, with french doors leading onto a balcony that would offer a spectacular view of the land below. The balcony stretched across the front of the house to another set of French doors, leading to Riley's studio and office. The bedroom included a walk-in closet and a master bath. The lower floor would have a porch on three sides of the house and a patio on the back-side. \n\nThe construction manager had already come out and staked out the foundation. There would also be a basement and the garage would be below the first floor of the house.\n\nAs he rounded the low hill, bringing him within sight of the homestead, he saw the Barrett's side-by-side and Steve standing in the center of the staked out land. Raph pushed the dirt up into a pile before shutting down the dozer and climbing out.\n\n\"Hey, Steve,\" he said, \"what's up?\"\n\n\"Just haven't had the chance to come out and see what all you've got going on,\" he said.\n\n\"I've got the drive about done so we should be able to get the construction crews in starting next week,\" Raph said.\n\n\"You picked a perfect spot,\" Steve said, looking out over the landscape, \"if I hadn't built on the old homestead, this would have been my second choice. The view here is incredible.\"\n\n\"It is, and I think Riley will get a lot out of it, for her painting,\" Raph said. \"The whole house is configured to give her the best views from her studio and the deck.\"\n\n\"That's thoughtful,\" Steve said simply with a small smile on his lips.\n\n\"I want her home to be a place she can unwind from the stresses of her day. Somewhere she can be comfortable to walk barefoot and just relax,\" Raph explained.\n\n\"Sounds like a solid plan,\" Steve said, \"that's exactly what a home should be. You've thought this through. You're good for Riley, don't ever let anyone tell you differently.\" Steve said, reaching over and squeezing Raph's shoulder.\n\n\"She's good for me too,\" Raph said simply.\n\n.\n\nA pickup eased around the corner, following the newly graded driveway. It pulled up next to the dozer and stopped.\n\n\"Hey guys,\" Riley called when she opened the door. \"I brought supper.\"\n\nRaph and Steve both walked over and helped her get sacks and drinks from Ruby's Barbecue. Steve opened the tailgate of Riley's truck, using it as an improvised table.\n\n\"There are lawn chairs in the backseat,\" she said, opening the rear door of the truck.\n\nRaph removed three collapsible chairs from the back seat and sat them around the back of the truck. \n\n\"You did get the driveway done today,\" Riley commented. \"I like the way you did it, following the contours of the land instead of just bulldozing a straight line through.\"\n\n\"I hated to disturb any of the lands, so I tried to keep my path of destruction to a minimum,\" he said around bites of his sandwich.\n\n\"Smart,\" Steve said, \"it'll help with runoff and drainage. The land itself has already figured out the most efficient way to sustain itself, sticking to that natural plan keeps you from creating unnecessary problems.\"\n\nRiley winked at Raph following her father's praise.\n\n\"So, have you picked a venue and a date for the wedding?\" Steve asked.\n\n\"We were going to talk to you about that,\" Riley said, \"If you don't mind, I'd like to have the wedding at the house.\"\n\n\"This house?\" Steve asked.\n\n\"No, our -- your house, out in the back, on the patio.\"\n\n\"I'd love that,\" he said, quietly.\n\n\"Great, and thank you!\" she said, jumping up and hugging his neck.\n\n\"Of course, Honey,\" he said, hugging her back. Raph swore he saw Steve's eyes get a little misty, but he looked away, not wanting to embarrass him.\n\nAfter they'd eaten, Riley walked with Steve and Raph around the land, explaining to Steve where each thing would be, how it would look, and what you could see from the different vantage points. Raph walked along behind, letting Riley talk excitedly to her father, a content smile on his lips as he watched her excitement and Steve's enthusiasm. \n\n*****\n\n\"Come in Babe,\" Riley said, greeting Raph as the front door, \"there are some people here I want you to meet.\"\n\n\"Lead the way,\" he smiled, after grabbing a quick kiss from her.\n\nRiley took his hand in hers and led him toward the den where he heard talking and laughter before they even got in the room. Upon entering, he saw Steve Barrett, his face red, his eyes watering, and a comically large grin on his face. Across from him sat two older women that had to be sisters, and at second glance, had to be Steve's sisters because he could see Steve and even Riley, to a degree, in their features.\n\n\"Aunt Claire, Aunt Molly, this is Raph. Raph, my Aunts Claire Kerry and Molly Kettleman, Dad's sisters,\" Riley said proudly.\n\n\"Oh Riles, you said he was handsome but, wow! You got you a looker here,\" Claire said feistily.\n\nClaire was a stout woman, her brown hair stylishly done. Her eyes were a light brown and had a mischievous sparkle to them as she looked him over appraisingly. Claire was divorced and remained single.\n\n\"Well, anyone standing next to Riley gets a looks-factor boost,\" Raph said, smiling at Riley.\n\n\"Oh, and such a charmer,\" Molly joined in.\n\nMolly was older. She was a little leaner than Claire and appeared to still be in good shape. Her light brown hair, similar to Riley's, had begun to give way to gray and she appeared to embrace it rather than try to hide it. She had an easy smile and Riley's hazel eyes. Molly was a widow. Her late husband was killed in an automobile accident.\n\nRaph liked them both instantly.\n\n\"So, this is the man who not only won the hand of our beautiful Riles but managed to get in good with our grumpy old bear of a brother. You must be something special indeed,\" Molly mused.\n\n\"He is,\" Riley said quietly, hugging Raph's arm to herself possessively.\n\n\"Raph, I would have tried to prepare you for this,\" Steve said, \"but there's little I can do to help you now. If you survive today, you will indeed have earned the right to marry into the family.\"\n\n\"Oh poo,\" Claire said, rolling her eyes, \"you make us out to be terrible old hags, brother.\"\n\n\"We do feel very protective of little Riles,\" Molly said diplomatically, \"we only want the best for her. We're like her surrogate mothers if you will.\"\n\n\"Since her real one ain't fit,\" Claire said, the vitriol clear in her voice.\n\n\"Claire!\" Molly admonished, \"no one condones what Rose did but she 'is' Riley's mother.\"\n\nSteve just shook his head.\n\n\"Please excuse Claire's mouth,\" Molly said sweetly to Raph, \"it's usually a few minutes ahead of her mind.\"\n\nClaire just rolled her eyes but kept quiet for the moment.\n\n\"So, Raph, Riles tells us you're quite the accomplished pilot,\" Molly said, changing the subject.\n\n\"Well, I've been lucky enough to have had the same number of landings as I've had take-offs,\" he smiled.\n\n\"Modest,\" Claire said, \"even Steve has bragged about your work ethic and your rise within your company, and believe me, our big brother is a hard man to impress.\"\n\nRaph blushed and Riley practically glowed with pride.\n\n\"I've been waiting until you got here to show them the house,\" Riley said excitedly, \"shall we take them now?\"\n\n\"Sure, ready when you are,\" he said.\n\nRiley led everyone outside where they got into Riley's truck. Raph drove with Riley riding in the middle of the front seat and Steve on the passenger side. Molly and Claire climbed easily into the spacious back seat. Raph drove out to the highway and around to the driveway entrance instead of bouncing everyone around by going through the pastures and fields. He turned off the highway onto the now well-packed gravel drive that led to their house. Raph never tired of rounding that last bend and seeing the house -- their house -- coming into view. \n\nThe outside of the house was up and in-the-dry. The inside was still under construction with electrical, sheet-rock, flooring, painting, and finish work. Raph pulled up and stopped on the concrete pad outside the garage. The garage doors were there but there was no power to them yet. He parked and helped Riley, then Molly from the truck. Steve extended a hand to Claire as well. Riley led them up onto the porch, explaining everything as she went. As always, her excitement and passion were infectious. Riley, Molly, and Claire were a constant trill of questions and answers. Riley ran around the unfinished interior of the house like a little girl. Her enthusiasm brought broad smiles to everyone around her. \n\nSteve and Raph, after getting in the way more than once when Riley suddenly changed direction, decided to step back out on the porch and just get out of the way. There were a half dozen lawn chairs already on the porch as Raph and Riley often liked to sit out at night and just look out over the fields, under the moon and stars.\n\n\"Looks like they're getting close,\" Steve said as they sat down on the porch.\n\n\"They're saying it's about a month and a half out,\" Raph agreed.\n\n\"Are you going to move in as soon as it's done?\" \n\n\"No, I'll move some of my stuff in, and Riley's going to move some of her stuff in, but since this is 'our' house, we won't officially move in until after the wedding.\"\n\n\"So the house should be ready by December, but y'all are going to wait until March to move in?\"\n\n\"I'm sure we'll be here so much getting things arranged and situated that it will feel like we live here, but yes sir, that's the plan.\"\n\n\"Well, I have no call to doubt your plans because they all seem to be working thus far,\" Steve conceded.\n\nThe girls came out and took seats on the porch and strangely enough, they all became quiet, just taking in the view of the setting sun over the landscape. The majestic beauty was beyond description so each sat quietly, lost in their thoughts. Riley reached over and took Raph's hand. He gave her hand a gentle squeeze. She sighed contentedly looking from Raph back out over the lands below. A lone coyote howled nearby, answered seconds later by a distant barely audible reply. Everyone here had grown up in rural Texas and even though coyotes were a nuisance animal that often killed calves and other livestock, all here appreciated the coyote's call of a lost or separated member from its pack. They understood the need to belong and tonight, sitting quietly on the porch as the sun set below the horizon and the stars started to blink on, they all, Raph included, felt like family.\n\n*****\n\nRiley came downstairs, barefoot, in yoga pants and a tee-shirt. Raph, watching from his seat in the den, smiled at her natural grace and beauty. One of Raph's greatest joys in life was to watch Riley, just going about her daily routine. He was in love with every facet of her. The way she walked, the way she hummed softly to herself as she worked or concentrated. The joy that was evident on her face when she looked upon or just thought of something that made her happy. She was human, and she had her bad days and times when she got down about something, like after a call with her mother who was acting as the travel agent for guilt trips during Riley's wedding planning. Riley had attempted to involve her mother, but as usual, Rose complicated things with her own need for attention. Even during the trying times, Riley was quick to bounce back, refusing to wallow in self-pity or to let things get to her any longer than needed.\n\nHe was snapped out of his reverie when Riley sat down next to him on the couch. This was something else he loved about her. She was a toucher, a hugger, she sought out physical contact. Even if they were both reading a book or working, she would place her small bare foot on his leg, or idly trace circles on his arm with her finger. It was often subtle, but she enjoyed the physical bond between them and, he found, he did as well. He recalled times when he would be on the computer in his apartment, looking at the weather or just online grocery shopping. Riley would walk by, not saying anything, but she would trail her fingers lightly across his broad shoulders as she passed. It was nothing overt or lingering, but it left a radiating warmth that touched the depths of his soul.",
        "\"So, how's your last day of being Miss Barrett been?\" he asked softly as she hugged his arm and laid her head on his shoulder.\n\n\"Tiring,\" she said and he could hear the tiredness in her voice.\n\n\"I'm sorry,\" he said, feeling like there was more he could have done to help her in the past weeks. She and Maria had been like machines with preparations. Raph, true to all the stories his older married friends had told him, had felt like a fish out of water with it all. He wanted to help but didn't want to intrude on what every woman wants to be her most special day.\n\n\"Don't be,\" she said softly, \"You've gone above and beyond, as you always do. You are someone that I know I can count on, no matter what, and you don't know how much that means to me.\"\n\n\"I am forever at your service, my love,\" he said, turning to kiss the top of her head as he placed his hand on her firm spandex-clad thigh, giving it a loving squeeze. He wasn't trying to initiate anything, just enjoying the feel of her body. They'd done pretty much everything in the new house, except making love. They wanted to save that christening until the wedding night. They hadn't completely abstained from sex, just not in their new home. Not yet, but the anticipation was building, and tomorrow was the day.\n\n\"It's going to be weird, tonight, sleeping without you,\" she said, \"If I'm able to sleep at all.\"\n\n\"Yes, it's going to be a little strange, spending my last night in my apartment alone. I'm pretty sure I'm not going to be able to sleep either.\"\n\n\"It's still hard to believe that by this time tomorrow, we'll be married; husband and wife,\" she mused.\n\n\"It's not too late to back out,\" he teased.\n\n\"It was too late a fraction of a second after I met you, Raph Savage.\"\n\n\"I will never forget, opening that lounge door, seeing you for the first time. You had on a white sundress with blue flowers on it. I had no idea who you were, whether you were married or had a boyfriend. All I knew is you were the most beautiful woman I'd ever seen. You told me, that night in the coffee shop, that you met two types of guys. Those who were intimidated by you and those who wanted something from you. I said that night that I probably fit into the first category, and to a degree still do, but I've found myself squarely in the second category as well. I do want something from you. I want you, more than I've ever wanted anything in my life,\" he said, emotion evident in his voice.\n\nRiley turned to look up into steel-gray eyes.\n\n\"Oh, Raph, I've always been yours. I feel like we were born belonging to each other. I'd always felt that as perfect as my life was, there was always something missing, something or someone, right on the edge of my mind. After our first real kiss, in the parking lot of the airport, that shadowy figure suddenly became crystal clear. It was you, Raph. You're what I'd been waiting for my whole life, so yeah, I'm long past backing out,\" she said, moving up to kiss him on the lips.\n\n\"I love the way you can articulate what I'm feeling but never can seem to find the words to express because that's exactly the way I feel about you, Riley Milicent Barrett,\" he smiled at her.\n\nThey talked a while longer before packing up, locking up, and heading out for the last time as an engaged couple. The next time they walked through these doors, they would be Mister and Missus Savage.\n\nRaph drove her home and dropped her off into the capable hands of Maria and Peyton before heading back to his apartment for the last time. He'd already moved or stored everything except for his toiletries, his suit for tomorrow, and an inflatable mattress he would spend his last night on.\n\nTomorrow was the day\n\n*****\n\nRiley stood looking at herself in the full-length mirror. She had politely requested a few minutes to herself after being swarmed all morning. When she'd asked for a minute, Maria had started herding people like cattle toward the door. Friends, aunts, and even mothers were pushed before her as she held her hands wide like she was trying to move an unruly gaggle of geese.\n\nNow alone, she looked at the mirror. The dress was perfect, her makeup and hair were perfect. She felt like she should be nervous, having second thoughts, but as she looked at one of the last personal items left in her room, the picture Raph had given her for her birthday, she felt oddly at peace. It was as if she had simply let herself go, had gotten out of her way, and allowed the universe to draw her forward toward her destiny. She moved to the bedside table and picked up the framed picture. It was of her and Raph, standing in front of Paisano Pete, the 11-foot tall roadrunner, the local icon of Fort Stockton, Raph's hometown. They were wrapped in each other's arms, smiling as if neither of them had a care in the world, even though they'd just come from her mother's house after what had been an emotionally challenging visit. This tall handsome man was her destiny, her soul-mate, her forever person. She couldn't be happier or more sure of anything in her life. This is exactly where she was supposed to be, at this exact moment, and she was going to marry exactly the man purpose-built for her.\n\nRiley kissed the photograph before slipping it into the bag she would be taking home tonight after the wedding. She took a deep breath and had just turned toward the door when there was a soft knock.\n\n\"Come in,\" she said.\n\nThe door opened and Steve Barrett stepped inside, closing the door behind him. He looked at Riley and his eyes teared up.\n\n\"You're even more beautiful than I'd imagined you'd be,\" he said, his deep voice husky with emotion.\n\nRiley couldn't even speak, she quickly closed the gap between them and threw her arms around his neck. Neither spoke for several minutes. Finally, Steve released his bear hug and let her step back. Both had tears freely flowing.\n\nSteve looked and quickly found a box of Kleenex.\n\n\"I'm sorry, I don't want to mess up your makeup,\" he said, quickly handing her a tissue.\n\n\"It's OK,\" she laughed quietly, dabbing at her eyes, \"Maria made sure to get the waterproof mascara.\"\n\n\"I'm so proud of you, Honey,\" he said, clearing his throat. \"You've chosen well in Raph and I'm certain you two are going to take care of each other and have a long and happy life together.\"\n\n\"Thank you, Dad, I feel the same way. I'm a little nervous about the ceremony and all the people and hoping Mom and Aunt Claire don't wind up trying to kill each other, but one thing I'm not nervous about is Raph,\" she said, honestly.\n\n\"Well, that's good. All the rest is just a pageant, but standing up there, looking him in the eye and before the Almighty saying, 'I Do'; that, you want to be sure about and it sounds like you are.\"\n\n\"I am, Dad. I really am,\" she said with confidence in her voice.\n\n\"Well, in that case, let's do this,\" he said, holding out his arm.\n\nRiley hooked her arm in his as they started toward the door.\n\n*****\n\n\"Are you ready for this, man?\" Hunter asked as Raph put his western cut tux jacket on and surveyed himself in the mirror.\n\n\"Absolutely,\" Raph answered immediately, \"I've never been more ready for anything in my life.\"\n\n\"I'd be a nervous wreck,\" Hunter chuckled, \"I guess flying planes and jets must require nerves of steel.\"\n\n\"Not really,\" Raph said, \"I've scared myself plenty of times while flying, especially in the beginning. No, this isn't really about fear. It's about the anticipation of my life from this moment forward. I'm going to spend the rest of my natural life with Riley and I'm so freaking excited about that fact. Until today, there always seemed like the chance that something would happen and she would decide that she didn't want to be with me anymore, and sure, it could still happen, but today means she's ready to stand up and say, 'till death do us part', so that means she's committed.\"\n\n\"You two are going to be together forever, man. I just know it,\" Hunter said.\n\n\"Yes we are,\" Raph said, smiling.\n\nSomeone knocked on the door.\n\n\"Come in,\" Raph said.\n\nThe door opened and Maria stuck her head in.\n\n\"Hun, can I have a minute with Raph please,\" she asked Hunter.\n\n\"Of course, my dear,\" he said, then turned to Raph, \"See you out there, man.\"\n\n\"Okay, Hunter, and again, thanks, man.\"\n\nHunter took his leave, closing the door behind him.\n\n\"What's up?\" Raph asked.\n\n\"Raph,\" she began, taking his hands in hers, \"Riley is, and has been, my best friend on this earth. She has been with me through thick and thin and always had my back. I am so happy for her today, and a little bit jealous, and I just wanted to say, thank you. You have been so good for her. I still marvel at how happy she is. I'm not here to threaten you about keeping her happy because if there's anything I've learned being around you for the past year, is that making her happy is like breathing for you. You do it without even trying, and you try a lot. I know you don't have any family here today, but I want you to know, you are, and will always be, family to me.\"\n\n\"Thank you, Maria,\" he said, his voice shaking slightly, \"You have no idea how much that means to me. I too think of you as family. I've always kind of thought of you as Riley's family because you're as close as sisters, but you're right, over the past year, you've become like family to me as well.\"\n\n\"Thank you, Raph, for what you've done for Riley, and your friendship with me, and Hunter. I appreciate you including him and being his friend, it means a lot to him.\"\n\n\"I'm not his friend as a favor to anyone. I genuinely enjoy his company and I like the way he treats you. As I do consider you a member of my family, I feel protective of you and only want the best for you. Hunter is a great guy and I think the two of you are a great couple. I suspect I'll be dressing up again sometime soon to watch you two start your forever-life together,\" he said prophetically.\n\n\"Maybe,\" she said with a blushed smile.\n\n\"Do you not think of him in terms of forever?\" he asked, genuinely interested.\n\n\"I do, sometimes, I just wonder if he could ever get up the nerve to ask,\" she said honestly.\n\n\"Trust me, if he feels about you like I do about Riley, and I suspect he does, he'll ask.\"\n\nA knock at the door interrupted their conversation.\n\n\"It's time for us,\" Hunter said, sticking his head in the door.\n\n\"I'm ready,\" he said. He turned back to Maria, \"Thank you, for everything,\" he said, reaching for her and pulling her into a tight bear hug.\n\n\"You're welcome,\" she said, hugging him back, \"and thank you too.\"\n\nRaph headed out, going down the stairs where people were staging in the den. Hunter and Maria would be the best man and maid-of-honor. Peyton and Evan would also be a bridesmaid and groomsman. Peyton ran to Raph, grabbing and hugging him tightly, her large breasts crushed against his chest.\n\n\"I'm so happy for you guys,\" she whispered in his ear.\n\n\"Thank you, Peyton, I'm pretty dang happy myself,\" he admitted, \"Thank you and Evan for standing up with us.\"\n\n\"I'm thrilled y'all asked us,\" she said, finally releasing him and taking a step back.\n\n\"Congrats again, man,\" Evan said, reaching out to shake Raph's hand.\n\n\"Thanks, Evan, I appreciate you coming today and taking part in the ceremony,\" Raph said, shaking Evan's hand.\n\n\"Wouldn't miss it,\" Evan said with a big smile.\n\nThe French doors opened and Claire came in.\n\n\"Are you ready, Handsome?\"\n\n\"Yes ma'am,\" he smiled back at her.\n\n\"Well, I believe they're ready for you,\" she said.\n\nRaph headed out to where a large floral arch has been set up. He saw the preacher standing in the center of the arch. There were not too many people in attendance as they had decided to keep it just close friends and family. Raph didn't know half of them. He saw Claire and Molly, Greg and Angela from Charter Air, Janice Decker, Riley's assistant at Barrett Oil and her daughter Polly, and many other people whom Raph couldn't put a name to. On the front row of the bride's side sat Rose Barrett, Riley's mother, and next to her was an empty seat, presumably for Steve. As Raph made it to the front row, he shook hands with the preacher and turned back to face the crowd. On the front row of the groom's side were two chairs marked as reserved. Two frames with pictures sat on the chairs. The picture in the first chair was of Raph's father, Lane Savage, and in the next chair a picture of Raph's mother, Audrey Savage. Tears immediately welled up in Raph's eyes as he looked at his smiling parents in the photographs. He knew instantly that this was Riley's doing. She wanted to make sure Raph's parents were on-hand, in spirit as it were, for their son's wedding.\n\nWhile still lost in his thoughts, the music started to play and he looked up to see Maria and Hunter emerge from the rear doors of the house. They walked arm-in-arm down the makeshift aisle, parting when they reached the arch, Maria going to the left while Hunter stepped over to the right, beside Raph.\n\nNext came Peyton and Evan. Peyton's flame-red hair shone brightly in the sunlight. She and Evan did make a good-looking couple.\n\nOnce Peyton and Evan were in their spots, the music changed and everyone in attendance stood and turned backward, facing the rear of the house. The rear doors opened and Steve and Riley stepped out into the light. Raph could only stare at the vision that approached him, step by excruciatingly slow step. Her light brown hair was done stylishly. Her veil did not cover her face but instead was attached to what looked like a small tiara before white cloth flowed back over her shoulders. Her makeup was minimal and tastefully done. Riley never wore much makeup and didn't need it. Her face was beautiful and her nearly flawless skin glowed. The dress was white and form-fitting with lace around the neckline. The lower half was not billowing but did have a train trailing behind slightly. He would learn later that the train had a hidden strap that she could pull up and place around her wrist or lower arm to keep it from dragging on the ground.\n\n\"Who gives this woman to be married to this man?\" the preacher asked as Steve and Riley stopped before him.\n\n\"Her mother and I do,\" Steve's deep voice said proudly.\n\nSteve gave Riley a tender loving look before taking her hand from the crook of his elbow, stepping back, he placed her hand in Raph's.\n\nRaph took Riley's hands in his as they faced each other. He vaguely remembered hearing the preacher speaking before he became lost in Riley's beautiful hazel eyes.\n\n\"Dearly beloved, we are gathered here today in the presence of Almighty God and these witnesses to join together, in holy matrimony, Raphael Lane Savage and Riley Milicent Barrett....\"\n\nRaph zoned out a little bit, lost in Riley's ravishing beauty. He still did not understand how this loving, caring, kind, and gentle woman, so far about his station in life, could be standing here, her hands in his, vowing to love, cherish, honor, and obey; in sickness and in health; in good times and bad; as long as they both shall live.\n\n\"I do,\" Riley said, pulling him from his trance.\n\nRiley placed the gold band on Raph's finger, \"With this ring, I thee wed,\" she repeated after the preacher.\n\n\"And do you, Raphael Savage, take Riley Barrett as your lawfully wedded wife; to have and to hold; to love, cherish, and honor; in sickness and in health; in good times and bad for as long as you both shall live?\" the preacher asked Raph.\n\n\"I do,\" he answered proudly, before also placing the wedding portion of her ring on next to her engagement ring, completing the set.\n\n\"With this ring, I thee wed,\" he repeated.\n\n\"By the power vested in my by the Almighty God and the State of Texas, I now pronounce you man and wife. You may kiss the bride,\" he said, closing his bible and holding it in both hands at his waist.\n\nRaph kissed Riley soundly on the lips as the crowd cheered and clapped.\n\n\"May I present to you,\" the preacher said loudly, \"Mister and Missus Raphael and Riley Savage.\"\n\nThe music started and Raph and Riley walked, hand-in-hand, back toward the rear of the house.\n\n*****\n\nRaph stood and watched as the music played. Riley and Steve danced the traditional father-daughter dance. He could see them talking but couldn't hear the words, but the looks passed between them were looks of love. Riley finally moved closer and laid her head on Steve's shoulder as his large hand came up to rub her hair. He bent and kissed her on top of the head as she wrapped her arms tightly around his waist.\n\nWhen the music stopped, Riley kissed Steve on the cheek. Steve took her by the hand and led her to Raph.\n\n\"She's all yours now, Son. Take care of her,\" Steve said quietly.\n\n\"I will, with my very life,\" Raph promised.\n\nRaph took Riley's hand from Steve. He raised the hand to his lips and kissed it gently.\n\n\"May I have this dance, Missus Savage?\" he asked, looking into her eyes.\n\n\"You may, Mister Savage,\" she replied demurely.\n\nRaph and Riley danced slowly around the dance floor which had been erected on the large lawn.\n\n\"Missus Savage,\" she whispered in Raph's ear as they swayed to the slow song, \"I like the sound of that.\"\n\n\"Me too,\" Raph said, squeezing her.\n\nThe reception carried on into the evening. Everyone had a good time and even Rose was on her best behavior. \n\n\"Oh, Honey, you look so beautiful,\" Rose said, \"and you and Raph make a wonderful couple. I'm so proud of you.\"\n\n\"Thank you, Mom, I'm so glad you were able to make it,\" Riley said, hugging Rose's neck.\n\n\"I wouldn't have missed it for the world,\" Rose smiled at her.\n\nWhen the reception began to wind down, Raph and Riley prepared to run the gauntlet to Riley's truck while the guests tossed birdseed at them. They ducked their heads and Raph used his large hands to cover Riley's head as they ran. Riley opened the door and Raph quickly hoisted her up and in before following and closing the door. Everyone waved and cheered as Raph started the truck and pulled away with a cacophony of clanging metal cans tied to the back bumper with thin string.\n\nThey went out to the highway and drove the 5-miles to their driveway. They followed the drive until they rounded the hill and their house came into view. Raph clicked the button on the sun-visor and watched as the garage door opened. Once it was fully open, he pulled the truck inside before closing the garage door.\n\nOnce out of the truck, they walked to the stairs, but at the top, Raph stopped Riley.\n\n\"Hold on, we have to do this right,\" he said, smiling at her.\n\nRiley looked back at Raph, not quite understanding his meaning until he bent and scooped her off her feet and into his arms. She realized his intention and wrapped her arms around his neck as he opened the door and carried her across the threshold.\n\n\"Welcome home, Missus Savage,\" he whispered.\n\n\"Thank you, Love. I've waited my whole life for this moment, I just didn't realize it.\"\n\nRaph carried her through the first floor and to the wide steps leading up to their bedroom. He carried her upstairs and sat her down next to the bed. His eyes never left hers as he reached around the lowered the zipper on her dress. With the zipper down, he pulled the dress down her arms, exposing her high proud breasts. He continued past her hips, looking down the see her white lacy panties, her garter belt, garters, and stockings. Once he had pulled her dress past her hips, he lowered her into a seated position on the edge of the bed. He picked up her dress and draped it over Riley's reading chair. He removed his clothes and returned to her. He slowly removed her stockings, kissing his way down her legs as he rolled the stocking downward. When he removed the stocking from her foot he kissed each of her toes as well as the soles of her feet before working his way back up her legs. He hooked his fingers in the waistband of her panties as she lifted her hips. He slid the panties down and off her legs. He lowered his head, taking in her unique addictive scent before diving in.",
        "*****\n\nRaph awoke in the early morning. He reached his hand over and felt the space in the bed where Riley should have been. He raised his head and looked around. He saw the French door to the balcony open so he slid out of bed and put a pair of shorts on. He tiptoed his way to the door and looked out. He saw Riley, wrapped in her bathrobe. She was barefoot, as she tended to be. She was leaning her forearms on the railing, looking out at the sun as it emerged over the hills to the east, bathing the land below in its warm glow, burning off a low haze.\n\n\"It's beautiful, isn't it?\" Riley said without turning around.\n\n\"The most beautiful thing I've ever seen,\" Raph said, talking about the view of the landscape and her lithe figure, standing with one leg straight and the other with her knee bent and only her toes touching the balcony floor.\n\nRaph stepped outside and walked up behind Riley, sliding his arms around her waist as he nuzzled her neck, planting soft kisses on her exposed skin. Riley reached up with her hand, holding the back of his neck.\n\n\"I can't begin to explain how happy I am right now,\" Riley said.\n\n\"You don't have to explain because I know exactly how you feel. I've pinched myself so many times since I met you that I should be just one big purple bruise.\"\n\nRiley turned in his arms and kissed him sensually. \n\n\"Don't worry,\" she said softly, \"we've got the rest of our lives to pinch each other.\"\n\n\"Forever and Always,\" he said before taking her into his arms and carrying her back into the house -- their house."
    ],
    "authorname": "LKilkenny",
    "tags": [
        "romance",
        "romantic"
    ],
    "category": "Romance",
    "url": "https://www.literotica.com/s/always-ch-04-1"
}
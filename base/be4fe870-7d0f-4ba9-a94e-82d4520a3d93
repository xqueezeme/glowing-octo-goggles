{
    "title": "Hero's Life Ch. 10",
    "pages": [
        "Author's note: a longer installment with a surprise (sort of) at the end. Happy holidays folks!\n\n*\n\nLaying beneath my Christmas tree and swathed in an enormous red fleece blanket, Peaches had appeared almost magically in my den in the wee morning hours of the Saturday before Christmas. She had been lying in wait to surprise me. It worked. I was reduced to a heap of pre-adolescent glee.\n\n\"Get in here and warm me up would you?!\" She giggled as I skidded across the slippery hardwood floor in my socks. \"I don't think you guys actually heat your downstairs at night.\"\n\nI wriggled beneath the blanket and came up next to her. \"We turn down the heat. Timer. Sorry.\" I explained, as I pressed against her under the fleece then paused while I ran my hands over the parts of her body that were accessible. \"It doesn't help that you're naked dummy.\" Now we were lying on our sides facing each other.\n\nHeather grinned impishly. \"I'm giving up clothes as much as possible over break. OK with you if I hang around here mostly nude for the next couple of weeks?\" she asked, her sky blue eyes twinkling. She already knew the answer to that question. \n\nShe kissed me with the little pink mouth I'd missed. Her closeness brought a whiff of sweet peach. She'd used her fruity namesake shampoo for the first time in awhile. Her tongue darted out to lick my upper lip and she slid my hand up to cup one of her enormous D-cup breasts. Together we gently squeezed the firm flesh of her amazing mammary. I felt her nipple grow hard beneath my palm. My groin was doing the same thing but on a larger scale.\n\n\"I've missed you,\" she whispered between kisses, as I brushed a lock of golden hair from her eyes. She slid a hand through the button fly of my pajama bottoms to take hold of me. \"And there's something I've definitely been missing the past few months.\"\n\n\"No suitable college boys?\" I teased.\n\n\"Not much time for love. Lots of studying. My few hookups were so-so. You guys have spoiled me. Freshman sex was kind of like nibbling on a pack of saltines to tie me over until I could get home for a thick juicy steak.\" She squeezed my erection at the last three words. \"I hope you took your vitamins this morning fella, 'cause I came home extra horny.\"\n\nWith no further preamble, she drew my cock through the fly of my pajamas to rub it up and down her smooth slit. She lifted her leg a little and hunched her hips forward. The head of my cock just barely managed to wedge its way into her little opening. Peaches wasn't kidding about her shortage of sex. She was near virgin-tight from her long dry spell.\n\nWe ground our way together. It was a slow, friction-intense process because neither of us had let our bodies catch up to our libidos. Finally, we were pressed into each other from thigh to chest and I was all the way inside her. I withdrew slowly and by the second stroke inside her we were already slickened. I began sliding in and out of her lazily. She pursed her lips and squinted her eyes like I was scratching a long overdue itch. In a way, I guess I was.\n\nIt was oddly sensual making love to Peaches while we were both covered from the neck down by the blanket. Usually, sex with her was a visual thing based on her ability to seduce you with her impossibly hot adolescent body. Joining like this was different, more intimate somehow. I focused now on her pretty face. The way her golden hair bounced. The way her large, bright blue eyes shined happily. The delicate curve of her perfect jaw line.\n\nMy reverie was interrupted by Samantha's voice ringing from the door of the den. She was standing there, swaying sleepily, wearing her black satin robe. \"Hey, what happened to....\" she stopped when she registered that Peaches was home. \"Yay!\" Sam burst out and in a few seconds she was wriggling under the blanket to join us.\n\nHeather and I resumed our slow humping as Sam made her way up from the bottom of the blanket. The Sam-sized lump stopped only about halfway up though. I felt her chin brush my balls. That would put her mouth right about... \n\nI watched Heather's eyes flutter with pleasure. Yep, right about Heather's tush. I held Heather still and reached around to palm one of her round little ass cheeks. I spread it gently to make way for what I suspected Sam was doing. Sure enough, Heather cooed happily as Sam's tongue worked more vigorously into her little butt. Heather and I didn't move. We just let Sam do her thing.\n\nEventually, Sam's hand snaked around to cup one of my butt cheeks and pull me forward into Heather. She did it again more insistently. Sam was signaling me to resume fucking. I did, but gently, trying not to dislodge Sam's face from between Heather's buns. \n\nSam and I had never done this for Peaches before but we probably should have thought of it earlier. It was a combination of two of her favorites: the analingual 'treats' Heather adored, together with my cock stuffed into her smooth, tight little pussy. It was working too. Heather's breathing soon devolved into ragged, irregular panting and her eyes were screwed tightly shut with pleasure.\n\nI wasn't going to be able to get going enough to join Peaches in her approaching orgasm, but that was OK. There would be plenty of time for that. Right now, Sam and I made it about Heather.\n\nHeather began to hump forward and back spastically as she got closer. She hungrily used Sam's tongue in her ass and my cock in her cunt. Finally she came, hissing one long \"Yeeeessssss!!\" and burying her forehead into my shoulder as she rocked more roughly forward and back, riding out her orgasm.\n\nWhen she'd recovered, Peaches looked back up at me. \"Now that,\" she sighed, \"was exactly the kind of thing I've been missing.\" She slid herself off me as Sam appeared finally, flushed from being beneath the warm blanket and the lack of fresh air. \n\nThe girls started talking quickly in the near-universal female attempt to instantly communicate every intervening event to a reunited girlfriend. I was temporarily hosed. There'd be no more fun sex stuff until this was over. It was a momentary setback. \n\nI slipped away, leaving the girls beneath the blanket, and went to the kitchen to make coffee. When I came back with three mugs and distributed them I also tossed logs in the fireplace and started up a good fire.\n\nThe frequency and pitch of the girls' banter had by now reduced enough that I could participate: \"So I thought you weren't due back until Monday?\"\n\n\"I smoked all three of my chemistry exams this semester,\" Heather said proudly. \"My grade was high enough that my professor let met opt out of the final. It was my last one so I could come home early. Thought it would make a nice surprise.\"\n\n\"You're not only home, you're home early and you had a good first semester! We definitely need to celebrate.\" Sam disappeared back towards the kitchen in a streak of black satin. She returned a couple of minutes later just as Heather had just reached into my pajama bottoms again to start another round of fun.\n\n\"Look what I've got!\" Sam was proudly holding an icy bottle of prosecco aloft in one hand. \n\nHeather's response was less than enthusiastic. \"Awwww, I kick butt my first semester, drive three hours in the dark, and sleep in the cold under your tree to surprise you both and you give me crummy Italian champagne?!\" Heather whined. Clearly her semester away had not diminished her booze snobbery.\n\nSam was dumbstruck and started looking hurt. I came to her rescue. \"Peaches, look at her other hand...\" Sam held a screw-top container filled with a yellowish-pink slurry. \"She was going to make bellinis to celebrate.\"\n\n\"Bellinis? \"Prosecco plus...\" then the blood drained from her face, \"...plus peach puree. Peaches for me?\" Sam nodded silently and Heather sprang from the cover of her red blanket to bound naked into Sam and hug her tightly. \"Like mimosas but better,\" Heather sobbed and blabbered a long stream of uninterrupted \"thankyouthankyouthankyou!\"\n\nThe scene was sweet and silly and sexy at the same time. Heather was genuinely apologetic. She was also bucknaked and pressing herself against Samantha. I got my first clear look at her juicy little teenage bubble butt in months. Lordy, I'd missed that tush too.\n\nSam recovered and hugged Peaches back. \"That's not all. Here is a small pre-Christmas present too.\" Sam handed her a tissue paper-covered gift bag. \"Frankly, it's kind of a gift for us also. Roll with it.\"\n\nHeather rifled through the bag and gleefully pulled out several red garments. She quickly pulled them on. Here's an odd summary of just how hot Peaches is: she looks great putting clothing on too. \n\nWhen she was done dressing, she looked like Santa's slutty niece. She had the obligatory red velvet hat with white fur trim. Her blonde hair was swept to one side, resting on her shoulder. Her top was nothing more than a red velour push-up bra that made perfect spheres of her giant breasts. The outfit continued with a miniature red velvet skirt, also trimmed in white fur at its bottom. It barely covered her butt. She twirled and the skirt lifted up to reveal a red velour thong that matched the bra.\n\nAn upside to braving the perils of a three-way relationship with two hot women: they give each other lingerie.\n\nWhen she was done modeling her sexy outfit, Peaches snatched the bottles from Sam's hands and went off to make the bellinis. She came back with three tall flutes of yellowy-pink, bubbling goodness. We toasted Peaches' successful college start.\n\nPeaches filled us in a bit more. There was more chitchat until Sam drained her glass and set it down. She drew me up to my feet and pushed me over to sit on the couch.\n\n\"Want to see something cool I can do now?\" Sam asked Heather.\n\n\"Yes, she does!\" I blurted out a little too eagerly.\n\nSam snickered and tugged my pajama bottoms down. I was already half hard. With a few caresses and a couple of smooth pumps of her hand, Sam had me completely erect again. She kneeled between my legs. Her black satin robe was cool and smooth against the inside of my thighs. She twisted her dark hair into a bun and tied it up with a scrunchee she produced from the pocket of her robe. I gleefully braced myself for what was coming. Sam didn't exercise her new found talent all that often. Well, not as often as I would have liked. Which is to say daily. Twice daily even.\n\nSam hovered her mouth over my cock, let a large wad of saliva drip slowly and raunchily from her lips and then stroked me a few times to wet my entire shaft.\n\nShe kissed the tip of my cock then dropped her nose to meet my little tuft of pubic hair. With my dick in her mouth. The whole thing. Completely swallowed. Speared on my shaft, she waggled her head from side to side a little for effect and I shuddered happily as the warm flesh of her mouth and gullet swirled around me. She lapped at the bottom of my cock where it joined to my balls with the tip of her tongue, her green eyes shining up at me. It was fantastic.\n\n\"Dude!\" I heard Heather say, as she knelt next to Samantha to watch. \"You're not even gagging!\"\n\nIt was true. Through a blend of trial, error, and sheer determination, Samantha had eventually conquered her gag reflex a month ago. After a full minute of holding my entire cock in her throat, she slid her mouth back up and off me to grin, \"Pretty cool, huh?\"\n\n\"I didn't think it was possible with that thick dick of his. You're going to have to teach me,\" Heather said eagerly.\n\nSamantha looked proud. \"Well, this can be your first lesson. Watch and learn.\" Sam rested her hands comfortably on the front of my hips and licked my head, pausing to drag her teeth gently across it. Then she re-swallowed me. She began to pump her face up and down my entire length. \n\nAfter a few strokes, Sam reached for my hands, took them, and placed them on either side of her head. When the mood struck her, Sammie liked me to use her a little like this. I was horny enough from my short session with Peaches that I took her up on the offer to take control. I held her head still and started fucking up into her face. She moaned as I plundered her mouth and throat. I paused for several seconds a few times to let her catch her breath then resumed pistoning in and out of her face.\n\n\"Inside?\" I panted, my orgasm already dangerously close. A few of the times Sam and I did this she'd wanted me to come on her face. She'd said that the raunchiness of it appealed to her. Frankly, it disturbed me a little at first, but she enjoyed it and after a few times I got comfortable with jetting come across her nose.\n\nBut this time she nodded her head. She wanted me to come down her throat. In another dozen strokes into her gullet, I tensed, arched my back up, and came, spraying come deep inside her throat. Sam swallowed reflexively and gagged a little before her iron will crushed her natural urge. I kept coming, bumping my pubic bone against her nose as I felt the last few spurts leave me. I collapsed back down onto the couch.\n\nSam swallowed several times and caught her breath, sitting on the floor and leaning against the couch.\n\nI didn't get long to catch my breath. \"Okay, that made me horny again.\" Heather tugged me to my feet. \"Come on. Up. I need it in my butt. It's been months.\" \n\n\"Didn't get that at school either?\"\n\n\"Nope. It's a trust thing. Haven't found any college boys I trust enough.\"\n\nHeather pulled me with her to the side of the couch and bent herself over the couch's armrest. Her little red Santa hat fell off onto the cushion beneath her. Her red skirt was so short that the bottom half of her adorable little ass was uncovered. Her teenaged hamstrings were toned and tight. Above them, her round little buns were split by a line of red velour fabric. The sight made my dick twitch already. \n\nI knelt behind her as she reached back to pluck the thong from between her cheeks and pull it to the side.\n\nShe was looking back at me over her shoulder expectantly. \"You know what I need Hero.\"\n\nI did. I reverently cupped each of her young buns and gently pulled them apart to reveal the little rosebud between them. Then panted one warm breath into her small crease. She shivered with expectation, so I slid one hand down into the keyhole-shaped space between her smooth legs and gently placed my thumb on her clit.\n\n\"That's it,\" she cooed softly, \"just enough to get me ready.\"\n\nI softly swirled my tongue around Heather's asshole and began to circle my thumb on her clit. Soon I was able to pry her ass open and ease my tongue into her butt. I slid my thumb back to the entrance of her pussy. She was drenched. I went back to thumbing her clit.\n\nHeather began rocking her ass back into my face eagerly. I wasn't about to let her off that easily. She whined when I stopped and stood up but quieted when she realized she was about to get what she was actually after. Rimming her perfect teen ass had made me steel hard again. I pressed my shaft between her little buns and humped against her, sliding up and down her crack. She squeezed her muscular little cheeks around me tightly. It felt wonderful. She was slick with my saliva and now the pre-come that was drooling from my cock.\n\nPeaches had a one-track mind at the moment though. She wanted my dick in her butt. Badly. She hitched her hips up and tilted them downwards, trying to center her asshole on my cock head. She was clearly hungry for it. I chuckled and pressed her back down into the couch's armrest.\n\nSam picked that moment to scoot up onto the couch and began kissing her. I watched their tongues twirl as I zeroed the blunt end of cock in on the tiny fleshy knot of Heather's star. She panted into Sam's mouth as I pushed against her backdoor. Her sphincter struggled then caved inwards and I began slowly slide inside her.\n\n\"Feel as good as you remember?\" Sam asked Heather between kisses.\n\n\"Better,\" Heather grunted as I continued easing into her teenage rectum. She rose up onto her arms to brace herself, bent 90 degrees over the armrest.\n\nHer motions had released her red thong and it slid across her smooth ass cheek to rest against the part of my shaft that wasn't yet buried in her ass. I hooked it out of the way with a thumb and gradually finished pushing myself all the way into her.\n\nI paused inside her to let her adjust to the invasion. Heather wasn't in the mood for this either. \n\n\"Just do me, Hero. I've been thinking about this for weeks,\" she groaned.\n\nI gently withdrew halfway and pushed back into her. She sighed as I softly bottomed out in her ass. I did it again. And then again.\n\n\"More,\" she pleaded rocking back into me.\n\nI began to fuck her round little ass gingerly. Despite her enthusiasm, she was out of practice and I really didn't want to hurt her.\n\n\"More,\" Heather urged me, getting impatient. I screwed into her a bit more roughly but she still wasn't satisfied.\n\nShe rose from bent position and turned. My cock popped free from her ass.\n\nShe stepped over in front of the fireplace. \"C'mere and lay down. I'll show you what I want,\" she pleaded.\n\nI grabbed the red blanket, spread it out on the floor, and stretched out on top of it.\n\n\"Good boy,\" she smiled, towering over me and still looking like Santa's slutty niece. \"Now let me take what I need.\" She squatted and straddled me, pulling her thong aside with one hand. She grasped my shaft in the other and held it upright. Her tongue slipped to the corner off her mouth as she arched her back and centered her ass on my dick. I felt the rough dent of her tiny hole catch me and she smiled and pushed down onto me, steadily impaling her ass on my pole.\n\n\"That's it,\" she sighed. \"Here we go...\" She rose abruptly and slammed back down onto me forcefully.\n\nI yelped in surprise.\n\n\"Deep and hard,\" she groaned. \"We can make love later, sweetie. Right now I need my butt fucked really good.\" Sure enough, she did it again. And again. It was nasty and rough. And, of course, hot as hell. \n\nHer little red skirt rose up and down as she bounced on me. Her gigantic tits somehow managed to stay inside the tiny red velour push-up bra. The only trouble was the thong. As Heather's up and down motions got more frenzied, it kept slipping from her fingers and getting into the way of our frenzied fucking. It was too far down for me to reach down and help.\n\nWhen we paused for the fifth time to pull it out of the way, I heard a click-click and saw Samantha coming towards us with a butterfly knife that she had produced from God knows where. I knew her and I loved her but, just at that moment, she still scared me a little. Had Samantha finally snapped? It was all I could do not to grab Heather and try to roll us away to safety. \n\nEven my fearless little Peaches stopped bouncing her ass on my cock when she saw Sam coming with the knife. But she just bent down behind Heather and, with two quick surgical cuts and a flick of her wrist, she removed the irksome thong. \"We'll buy you another one later, honey.\"\n\nPeaches grinned at Sam. \"You're still a little bit Sithy aren't you?\"\n\n\"Just a little,\" Sam smiled devilishly. She smoothly flicked the knife closed and picked up one of the bellinis then downed it in a gulp.\n\nPeaches went back to bouncing on me.\n\nSam set her glass down then came back to kneel and straddle my legs behind Heather. She unhooked the bra from behind and Heather paused to let her remove it. Her fantastic round tits were now bare. Hardened pink nipples jutted out. Then Sam's small hands came around from behind to cup Heather's enormous bouncing breasts. She squeezed them gently and Heather moaned. Sam circled each of her perfect pink nipples with a few fingers of both hands and Heather went back to reaming herself on my cock.\n\nAfter a minute of this nipple play while Heather continued to ride me steadily, Sam cupped her breasts again and pulled one up. At the same time, she nudged Heather's head downwards. \"Can you reach it?\" Sam whispered.",
        "Heather stopped bouncing. She craned her neck down a little further as Sam pulled her breast up a bit harder. Heather's lips closed around her own nipple. Her eyes fluttered with pleasure.\n\nHoly crap that was hot. \n\nI watched Heather's closed mouth move as she twirled a tongue on her own nipple inside her mouth. Then her jaw worked slightly and I realized she was nibbling at it gently. She opened her eyes and looked down at me. She winked and my dick grew another half inch.\n\nSoon Sam was pulling the breast from Heather's mouth, the nipple coming free with a distinct \"pop.\" Sam lifted the other boob up and Heather bent her neck down to suckle that one now. Sam pinched and rolled the newly freed, saliva-slickened nipple. Heather went back to riding me, her eyes locked on my face.\n\nSam leaned forward and her face appeared next to Heather's, her chin above Heather's shoulder. \"You're both going to come nice and big for me aren't you?\" She licked at the back of Heather's bouncing neck. \"Peaches is going to come with your thick dick in her little teenage ass while sucking her own perfect titty.\"\n\nHeather's eyes rolled gleefully at Sam's urging dirty talk.\n\n\"And you,\" Sam looked at me, \"you're going to soak the inside of her tiny adolescent butt with a huge load of your man cum aren't you?\"\n\nI nodded.\n\n\"Tell him you missed his cock in your ass.\"\n\nHeather groaned and nodded too, still suckling her own breast. Her cheeks were bright red.\n\n\"Tell her you missed her small juicy butt.\"\n\n\"...missed your butt...\" I wheezed.\n\n\"Tell her you missed these giant round tits.\"\n\n\"...missed your tits....\" I wheezed again.\n\nIt was all just too much. I gave up trying to hold out and let loose, erupting inside Heather. It was the last thing she needed and it set her off too. My cock jerked over and over inside her, frantically jetting the contents of my balls upwards as her rectum clamped down and she ground herself down onto me and rocked silently in her own orgasm, her mouth never leaving her breast.\n\nIn a minute, when we'd calmed a bit, Heather remembered to let her nipple free. Sam slowly drew Heather backwards off of me and turned her to lay down onto the blanket-lined floor on her back. Then Sam stretched Heather's legs out, stroking the thighs that she'd been using almost nonstop for the last 15 minutes. After several soothing strokes, Sam spread Heather's legs wide and lowered her face between them.\n\nI perked up to watch this. It had been awhile.\n\nHeather chuckled and tilted her hips up to help when she realized what her dark-haired lover was after. I watched Sam's tongue lap Heather's little reddened rosebud a few times before she attached her mouth to it and begin to suck; her cheeks collapsing into a vacuum. Heather twitched and giggled at the sensations and the slurping sounds as Sam drew my still warm cum from her small opening.\n\nI got an idea and rotated onto my belly and moved to join Sam. Pushing one of Heather's legs up further to make more room, I leaned in and licked experimentally at her clitoris. Heather gasped loudly. Her giggles became moans. Sam cocked her head to the side to make even more room for me. I came at Heather's clit completely sideways and licked up and down. The motion of my tongue was side-to-side for her. Heather's favorite. \n\nSam labored at Peaches' ass relentlessly. Together, we feasted on this beautiful little blonde woman, this gorgeous young object of our love and lust. Soon we dragged Heather to another orgasm; this time shrieking and knees shaking crazily in mid-air. I stroked her smooth stomach in circles as she slowly came back to reality.\n\n\"We missed you,\" Sam muffled out from Heather's groin as I rose and threw more logs onto the fire.\n\n\"I can tell,\" Heather grinned, propping herself up on her elbows to look down at Sam with shining, happy eyes.\n\nWe arranged ourselves on the blankets as spoons. Peaches squirmed into the middle because she'd been gone and wanted to soak in as much contact as possible. I was behind her.\n\n\"Everyone warm and happy?\" I asked throwing my arm over Peaches and Sam, my hand curving around to rest on Sam's taut belly.\n\n\"Yes, Hero, warm.\" Peaches wiggled her butt against me.\n\n\"And happy.\" Sam took my hand and squeezed it.\n\nWe didn't leave the house that day. Or the next for that matter. We had time to make up. But in the early evening of the following day, the doorbell rang. I had the most clothes on so I got up to answer it. Plus, I'm a boy and boys answer the door in the dark. Your mom told you right?\n\nWhen I opened the door, two attractive women, one tall blonde and one short brunette, stood on the front porch looking at me with gigantic smiles. They were bundled heavily against the cold. \n\n\"Hello,\" I said. Neither of them answered.\n\nWe stood like that for several long seconds. There was something familiar. Why weren't they saying anything? The blonde stepped into better light. I looked into her eyes - lavender eyes - and it hit me. Her hair was still just as light but her skin was not quite so fair anymore. And the brunette's hair was different; longer, lighter than before, but the freckles were still there.\n\n\"Tracy?! Lisa! Oh my God! Get in here!\" They broke into the warm Australian laughs I remembered from a ten years ago and stepped inside. We hugged and kissed as I took their coats and handed them to Sam, who had just appeared in her black satin bathrobe. \"How on earth did you find me?\" I continued to blabber.\n\nThe tall blonde, Tracy, pointed at her miniature dark-haired companion, \"Believe it or not, Lisa read your story describing our night together in Thailand where you posted it on that erotic story website. Well, it had to be you. We did a bit of sleuthing on their bulletin board and ended up getting some help from a girl named... Peaches?\"\n\nAs if summoned, Heather turned the corner. She was wrapped in just a chenille throw blanket that she managed to hold up with one arm over her generous chest.\n\n\"...connections...\" coughed Sam. \n\nPeaches stepped forward to hug our guests with her free arm. \"You came! I half expected you guys to chicken out! Come on in and sit down. You must be exhausted from the long trip.\" Peaches led them down the hall then turned into the firelit den.\n\nSam and I were left alone, stunned in the entrance hall. She hung the girls' coats then looked at me and cocked an eyebrow, thinking out loud, \"If Peaches is up to what I think she's up to...\"\"\n\n\"...we may need a bigger bed,\" I completed the thought. \"Is 'fivesome' even a word?\" \n\nSam smirked. \"Hmmm, it does sound kinda funny. I'm going with 'menage-a-cinq.' Sounds better.\"\n\n\"Yes, it does.\" I shut the front door then took Sam's hand and we followed them inside.\n\nI'd given up hope for a nice quiet life when I'd told Heather and Sam that I loved them at the same time. Because of who and what they were, it was doubly exciting. Nothing left to do but mentally buckle myself in. This was shaping up to be a very unconventional holiday..."
    ],
    "authorname": "PacoFear",
    "tags": [
        "college",
        "coed",
        "christmas",
        "christmas tree",
        "sith",
        "australians"
    ],
    "category": "Group Sex",
    "url": "https://www.literotica.com/s/heros-life-ch-10"
}
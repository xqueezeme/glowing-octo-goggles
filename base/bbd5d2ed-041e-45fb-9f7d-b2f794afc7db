{
    "title": "Buried Treasure Ch. 96-101",
    "pages": [
        "Heather Rhodes' POV<br >Arrowhead Pack, Roadkill's House<br >New Year's Eve Morning\n\nThe knock on the door woke me up. It was still dark out, no shock around here where the sunrise wasn't until almost eight in the morning. I was burrowed deep under the heavy comforter with my pillow, and I didn't want to expose my skin to the cold of the room. \"What...\"\n\n\"Breakfast is at the main house this morning, Heather. Get up and dressed, we need to be there in twenty minutes, or we'll miss it.\" I just groaned, wondering why I couldn't just sleep in and have Eggos or something later. Looking at my phone, it was six thirty-five.\n\n\"I'm not hungry,\" I said.\n\n\"You need to get out of your room, so get moving, or I'll get you out of bed my way.\"\n\nI didn't need that. Possum practically invented the Ice Bucket Challenge before it became popular. She would use it to get guys out of the Clubhouse in the morning when the crew needed to clean up. I tossed the covers back and rolled off the bed and onto my feet, heading to the small attached bathroom. Eighteen minutes later, I was dressed to go. I had on my favorite jeans, dark blue Under Armor long-sleeve shirt, Ugg boots, and a white fleece pullover. I went out to the kitchen where Roadkill was sipping coffee with Possum. \"It's not even seven,\" I said.\n\n\"Two of Chase's brothers arrived late last night, and everyone is turning out to meet them. You should be there too; they helped Chase take down the warehouse in Los Angeles.\"\n\n\"That was them?\" I'd seen the news, and I knew Vic, Spider Monkey, and Chase had something to do with it, but they'd been tight-lipped on the rest of it. I'd heard of Spider Monkey from when Possum got kidnapped, but she'd been out in California since I arrived back here. Since Vic didn't seem to like me, I hadn't heard much.\n\n\"They and some of their friends. Come on,\" she said as she walked to the stairs for the basement. I'd grown to love the tunnels, as the weather outside was indeed frightful. The rope lighting and ventilation kept the tunnels cool and dry. We walked through them, up the hill to the basement of the main building. I could hear the noise upstairs as we climbed the stairs; of the three big wings that made up the dining area, one was full of people. There was a long table at the far end by the windows over the lake, and I followed them to it. I waved at a few people I knew, but not as many as I should. I'd been a secret here the first time, and after Greg Barks left me behind, I hadn't been very social.\n\nThat was an understatement. I hadn't left my bed except to go to the bathroom until this morning. Possum, Rori, even Mykayla, came to see me but I couldn't stop crying. I didn't want to talk about it, and I didn't want their pity. The man I love had the shit beat out of him, then they exiled him for three months to a place that didn't even have Skype. They were trying to break us up before we got any closer, and they didn't know it was too late for that.\n\nIt was SO unfair, and I hated Roadkill and Chase and Rori for what they did to us.\n\nI was stuck here on a frozen lakeshore. My love was overseas. My parents were dead, and no one was left for me to take vengeance on. I was still in hiding. All of my friends from Orlando said goodbye to me at my funeral. There was no Steel Brotherhood chapter up here to hang out at. Even my new motorcycle was sitting in an enclosed trailer next to Roadkill's garage, and it never even had gas in it.\n\nI'd spent a whole day feeling sorry for myself and now I was done. The tears were gone, and I needed to decide what to do next. I can't leave, and I can't lose myself in a city, so I have to make something of my life here.\n\nI had registered for online college using my fake name and high school diploma, so I could buckle down and study. It sucked having to repeat a semester of Freshman Chemistry and Algebra, but that was life.\n\n\"Are you all right, Heather,\" Possum asked me as we reached the front table.\n\n\"I'll get through this,\" I said. Rori and Chase were near the center of the head table, and Possum and Roadkill were down a few spots from them, with Sawyer, Ashley, Ron, and Teri in between them. There weren't open spots on this side, so I walked behind everyone. All the chairs at the head table were facing the rest of the room like this was a wedding or something.\n\n\"Hey, you're Heather,\" a handsome man in his late twenties said to me as I looked for a spot. \"I've heard a lot about you. I'm Carson, Chase's older brother.\"\n\nI smiled, how could I not appreciate a man who had risked his life to get revenge on the Sons. I jumped forward and hugged him around the waist as he held his hands up in shock. \"Thank you for what you did,\" I said. \"I wish I could have been with you.\"\n\nHis arms came down and hugged me briefly before I stepped back. \"It was my pleasure, Heather. Would you join me for breakfast?\"\n\nI looked to where a gorgeous woman, tall and athletic, was coming up to him. \"If it's all right with you wife,\" I said.\n\nHe looked at the woman, and they both busted out laughing a few seconds later. \"I'm not with him, I mean I am, but he's my older brother. I'm Coral, Chase's twin sister.\"\n\nI flushed with embarrassment. \"I'm sorry. Now that you say it, I see the resemblance.\"\n\n\"Come on, you can sit between us,\" Carson said. \"Coral is married and living in Canada; her husband couldn't make it.\" He pulled out a chair for me, then with perfect manners, did the same for Coral. \"All the pregnant couples are a little tough to take so you can hide with us at this end.\"\n\nI laughed at that. \"Thank you. I'm a little mad at your brother right now.\" As breakfast passed, they helped me forget my troubles with stories of their childhood. Everyone was leaving, and Coral excused herself. \"We've got a big conference coming up that I have to help plan,\" she said. \"I'll see you at lunch.\"\n\nI looked over at Carson. \"The married couples have this one,\" he said. \"I'd just get in the way. What are you planning to do?\"\n\nI didn't have anything planned; maybe work out, or try the pool I'd heard so much about. \"I'm not sure,\" I said.\n\n\"You like motorcycles, right?\" I nodded. \"Come snowmobiling with me,\" he said as he gave me a wide grin. \"They have loaner sleds and equipment, and I'll teach you.\"\n\nMy hand went down to my side, where I'd taken a bullet. \"I don't know if I'm supposed to,\" I said. I waved Possum over; she told me I could if I took it easy, and warned Carson not to make it too fast or bumpy. We went through the tunnels to the garage, where a room held loaner suits, boots, gloves, and helmets. He helped me get dressed, and we went out to a pair of Yamaha RS Vectors in blue and black trim. \"Nice,\" I said as I walked alongside the machine.\n\nHe gave me a quick overview of the controls. They were simple and intuitive, the throttle and brakes the same as a motorcycle. It was actually simpler than one, as there were no gears to change. We fired them up and slowly drove them down to the lake and onto the ice. The helmets were Bluetooth-enabled like some motorcycles, so he could talk to me through our helmets. \"I'll follow you, just take it easy and get used to it.\"\n\nI accelerated to twenty miles an hour, turning side to side and learning how it handled. The ice and snow was smooth, so I opened it up until I looked down and was doing fifty. \"This is GREAT,\" I said. You sat much lower than on a motorcycle, and it felt faster. I looked back to see we were halfway across the lake, so I slowed and turned before letting him catch up. \"Can we race?\"\n\n\"Stop if you feel like you're hurting yourself,\" he said. \"Race back to that green ice fishing house near where we drove onto the ice.\" I could barely see it a mile away. He counted down, and I gunned the engine and released the brake when he said go. It was exhilarating; we were going eighty miles an hour in a few seconds, and it felt like a hundred. I let him win, slowing down when the bumps got to be too much. \"Are you all right?\"\n\n\"Just playing it safe,\" I said.\n\n\"Cool. Do you want to try a trail? They have a long loop through private woods. It's fun.\"\n\n\"Take it slow,\" I said. Carson drove up onto the land and to a well-traveled trail. For the next two hours, we went up and down hills, through dense forest and across grassy clearings, and along bubbling creeks. By the time we returned to the garage, I was hooked on this winter sport. \"That was AMAZING,\" I said as I took my helmet off. \"Thank you.\" I hugged him for a second time, and this time he hugged me back.\n\n\"Are you cold?\"\n\n\"Not as much as I thought I'd be.\" We removed the gear and left it to be cleaned and restocked, then went back through the tunnels to the main house. \"Where are we going?\"\n\n\"There's nothing better after being outside for a while than a soak in a hot tub,\" he said. \"Come on.\" He led me down a hall to the locker rooms. \"Hang your stuff in a locker, and I'll meet you on the other side.\"\n\n\"I don't have a suit,\" I said as I looked at him.\n\n\"There's extra stuff in there,\" he said as he went through the door.\n\nI pushed the door open to find a nicely-appointed locker room. A young teen was putting her jeans into a locker, already naked from the waist up. \"Hi, Mykayla. I'm sorry about yesterday,\" I said as she turned towards me. She had come to cheer me up, and I had refused to see her.\n\n\"Thanks for talking to me this time. It's nice to hang around with someone more my age.\"\n\nI didn't know what to say to that; she looked to be maybe fourteen. This place was packed with good-looking men and women, and most looked to be in their twenties or thirties. I hadn't seen anyone who looked over fifty. Other than the babies, I didn't see any other kids. I found an empty locker and started to undress. \"Are the other teens in school?\"\n\n\"I'm it. The next oldest here is four, then the babies.\"\n\n\"Who do you hang out with? Do you have friends in the area?\" I couldn't imagine being a young teen and not having kids my age around.\n\n\"No, I hang out with other members and help out the pack, I mean the people. I'm home-schooled now, but next year I'm going to go to high school. That should be interesting.\"\n\nI just nodded as she walked naked to the showers and started to rinse off. \"Where are the swimsuits?\"\n\nShe just laughed. \"Nobody in there will care, we all go naked in the pool. Who wants to deal with wet, clingy suits anyway?\"\n\nI just stared at her. \"Carson is going to be in there!\"\n\n\"So will a bunch of others, and nobody cares that you're naked too. If you're nervous, grab a towel and wrap up until we get to the hot tub.\"\n\nI'd never been a nudist, but I wasn't a prude either. I took a quick shower and grabbed a towel, wrapping it around my body. Mykayla grabbed one too, but she just threw it over her shoulder as she walked through the door. My jaw dropped as I saw the inside; the pool, the bar and snack area, even the waterslide was something I'd only seen at large hotels. She was right, everyone was naked and no one gave me a second glance. \"Ah, you made it,\" Carson said from the hot tub as Mykayla got in, leaving a space for me next to him.\n\nSix other women were in the large pool, all smiled at me then went back to talking. I thought about what to do, finally tossing the towel into a nearby chair and lowering myself into the warm water. \"Oh, this is nice,\" I said. The seat left me at a good height, my breasts underwater obscured by the bubbles, and a massage jet in my lower back.\n\n\"It spoils you,\" Carson said as he leaned back. An older woman came over with a tray of drinks, smiling as she handed them to us. \"I thought you might appreciate a fruit smoothie, it's a little early for daiquiris.\" It was wonderful, and I could already smell the pizzas cooking. \"You can get lunch here?\"\n\n\"I like eating in here instead of the dining room,\" Mykayla said. \"You can get pizza, sandwiches and other basic stuff, and you can eat whenever you want.\" There were tables already filling up; people were already eating an early lunch with towels over the chairs. \"I practically live in here during the winter. It makes me forget how cold it is outside.\"\n\nI could see why. The glass was frosted over, hiding us from anyone looking in, and the building and the hillside meant no one on the lake could see you. \"Pretty nice.\" We sat in the tub until it got too hot, then took a dip in the pool before having pizza for lunch. My nervousness at nudity forgotten, I accepted this as my new normal. The only weird thing was how all the women were beautiful, and all the men ripped. I loved my Greg, but everyone looked like they belonged on a calendar. \"Why are there so many more women here? Time of day?\"\n\n\"It's just how it ended up. All of the men are married or in a relationship except me,\" Carson said.\n\nI looked at the gorgeous man in the next chair. \"I'd think you'd be fighting them off,\" I said.\n\nHe laughed. \"I'm glad you're here. You aren't interested in me, but you keep the single women away.\"\n\n\"You're not gay, are you? I mean, nothing wrong with that if you are.\"\n\nHe laughed even harder. \"No. Someday I might find a woman who can become more than a fling, but today is not that day.\"\n\nI left it alone after that, sensing the sadness in his statement. Someone had hurt him badly. I was disappointed when he had to help Chase, who I still didn't want to see. I liked Mykayla; she was like the kid sister I never had. I was shocked when she said she was an orphan, and I gave her a big hug. She didn't have adoptive parents; she had two older women she stayed with who were her guardians. She checked with one and got permission to sleepover in my room. We spent the afternoon in my room watching Netflix and eating junk food, then went back to the pool and stayed there until nine. We headed back to my room and turned on the Times Square broadcast when the door barged open. \"Possum?\"\n\n\"We have to relocate you, Heather. Now. Pack all your stuff now, we're leaving before midnight. No phone, no electronics, leave that all here.\"\n\n\"What?\"\n\n\"It has to be. Mykayla, go to storage and get some boxes and bags. No arguments, pack everything you can, and we'll take it out to the trailer. Don't leave anything behind as we may not come back.\"\n\n\"We're taking the motorcycles?\"\n\n\"Everything. Hurry up.\" Mykayla took off, and I started pulling stuff out of my closet and drawers. I filled up five suitcases and two boxes with clothes, and another two boxes with my stuff. A few more people showed up, taking the things outside. I packed one small bag to take in the car and went out to where Roadkill's Expedition was attaching to the enclosed trailer. It was filled full. \"Who else is leaving?\"\n\n\"We're going with you this time,\" Roadkill said. \"We're taking them too.\" A second Expedition pulled up, this one had a rough-looking man and three women in it. As they loaded more bags, I saw the twins.\n\n\"We're taking Rori's babies?\"\n\n\"We have to keep them safe. There's another threat coming.\" I didn't say any more as we loaded up; if Rori was sending her babies away, it must be a grave situation. A man came up and handed me a bag, telling me to open it when I was gone. I tossed it on the back seat. There were no long goodbyes; I waved to Mykayla as we pulled out into the night.\n\nI looked in the bag; it had bundles of cash, a few bank books and debit cards, and another set of identification showing me with red hair. I zipped it back up and set it on the floor.\n\n\"Where are we going,\" I finally asked as we turned south on Highway 61 towards Duluth.\n\n\"We don't know,\" Possum said. \"We figured we would leave before deciding, that way no one at Arrowhead can help them find us, even if tortured. We have to get well away from here; nothing in the Midwest, Northeast, Rockies, or Pacific Northwest. We can't go to Florida or the Southeast because of the press coverage on you down there.\"\n\nI was reeling at the implications of what she just said. Half the country was out of the question. I looked out at the frozen landscape. \"I suppose the Caribbean is out of the question?\"\n\n\"We have to drive there, and we're going to need protection, even if we're hiding out,\" Roadkill said. \"We're going to need the Brotherhood.\"\n\n\"Isn't that a risk for me? They all know who I am, and all it would take is one person saying something,\" I said.\n\n\"The Brotherhood would never betray you, Heather. They kept Rori safe for years, moving around between Chapters,\" Roadkill said.\n\n\"Which chapter? Who do we trust with the lives of Heather and our grandchildren,\" Possum said as she looked out at the homes along Lake Superior, all lit up with Christmas lights.\n\n\"I've only met a few of the other Ladies at parties,\" I said. \"Mom was friends with Bunny out of Vegas.\"\n\nThe two looked at each other. \"That's a good idea,\" Roadkill said. \"Aces still owns lots of real estate and Vegas is easy to disappear in.\"\n\n\"And we can ride,\" I said with a smile.\n\n\"But not gamble. Casinos have facial-recognition technology and security you wouldn't believe. You aren't going anywhere near the Strip.\"\n\nFine. Desert rides and warm weather were in my future! As much fun as Arrowhead had been, I could leave the snow and cold behind.\n\nI needed to return in three months to see my man, though.\n\nCh. 97\n\nSpider Monkey's POV<br >Phoenix, Arizona\n\nI walked into the lawyer's office, taking in the cheap furniture in the waiting room and the smell of the clientele. Walking up to the buxom redhead, I had to tap on her phone to get her attention. She must have been hired for her tits, not for her ability as a receptionist. \"Excuse me? I have a ten o'clock with Mr. Caldwell.\"\n\n\"Have a seat,\" she replied as she went back to watching the video on her phone.\n\nI turned and looked for somewhere relatively clean to sit, and picked a wooden chair along the wall. I didn't have a phone along as I wanted no electronic record of this trip. I had driven down from the Bay Area to Phoenix, using an alias to stay in a hotel last night. I read a little of my latest obsession, Steamyhot's \"The Change,\" on my Kindle Fire as I waited. I'd dreamed of finding my own Alpha Ned, and now I had my Vic.\n\nI heard a door open; a woman walked out in the company of a man in a dark blue three-piece suit. He was in his fifties, a toupee covering his head looking like a badger died on it. He led her to the door and turned around. \"Miss Kim?\"\n\n\"Yes,\" I said as I stood up and shook his hand. \"Mariko Kim.\"\n\n\"Jerry Caldwell. This way, please.\" He walked me back through a hallway to an office with a big desk and cheap furnishings. I refused his offer of water and sat on the edge of the leather chair as he sat behind his desk. \"How may I help you, Miss Kim?\"\n\n\"I need legal assistance. What is your normal retainer?\"\n\n\"Five thousand, more or less.\"\n\nI opened my purse and pulled out a bundle of cash, the brown label wrapping a stack of $50 bills. \"I need a receipt, of course, now that I'm your client.\" He was eager to do so, and I could tell he liked doing business in cash. If he was hiding income, he was more likely to go for what I wanted.\n\nHe handed the form over, having signed the bottom. I folded it and put it in my bag. \"How may I help you?\"\n\n\"You are also the lawyer for Susan Lamper, currently incarcerated in the Women's Federal Correctional Institution at Tucson.\"\n\n\"I cannot speak of my other clients, I have ironclad confidentiality when it comes to them,\" I said.\n\n\"I have a proposal for Miss Lamper, one that I cannot make in person because of the surveillance visitors and mail are under in the system. However, you can present it to her and secure her agreement in the room reserved for lawyers and their clients.\"\n\nHe sat back, thinking about it. \"It would be unethical for me to do something that was against her best interests,\" he said carefully. An ethical lawyer would be showing me to the door right now.",
        "\"It's a proposal I think she will be interested in accepting. Her husband is dead, killed in the raid on the Sons of Tezcatlipoca clubhouse in Phoenix. Her two-year-old daughter is living with her aunt in a rat-infested apartment. Miss Lamper was caught smuggling drugs across the border, and sentenced under the RICO statutes for that and five other drug felonies. Chances of appeal are slim, and it will be forty years before she is eligible for parole.\"\n\n\"I'm aware of her situation,\" he said carefully.\n\n\"She also owes you fourteen thousand, two hundred and fifteen dollars for legal services. The Sons no longer exist, and she has no money.\" He just nodded, knowing better than to say anything. \"I want you to bring her this proposal. The five thousand is yours if you relay the offer; if she accepts and follows through, I will pay her legal fees in cash.\"\n\nHe took the envelope, reading through carefully. His eyes raised as he saw the offer. A substantial trust fund would provide money for Susan's daughter. $100 a month would be deposited into her canteen fund at the prison as long as she remained incarcerated. Finally, a subsidized apartment in a better neighborhood would be made available to her aunt. \"She confesses and accepts a plea deal for this, and this is guaranteed?\"\n\nI handed him a card. \"The funds and directions are already in Mr. Jones' control. If she accepts, the accounts and direct deposits kick in, courtesy of a mystery relative. You broker a deal with the District Attorney in Orlando, and she confesses and signs the plea deal. I'm sure you can arrange for a concurrent sentence, so she's out nothing. She even gets the prison cred for assaulting a police officer, even if it was with a laced cup of coffee.\" I handed him a copy of the officer's statement and a flash drive with the hospital video. \"She'll have to be credible enough to fake this. Her face and body are close enough, and I don't think the police will question her in detail if she's confessing.\"\n\n\"She's an accomplished liar,\" he said as he looked through the folder. \"How do I get in touch with you?\"\n\n\"You don't. Mr. Jones will hear of the plea agreement, and Mr. Jones will do his part to release the funds once she has done yours. I was never here.\"\n\nHe stood up as I did, leaning across to shake my hand. \"And it was a pleasure not meeting you.\" I walked out through the lobby and back to my car, glad to be done with it. Driving north, I waited until I was in California to text Vic. \"Made offer waiting\"\n\n\"Thank you I love you will fly out soon\"\n\n\"&lt;3\"\n\nI turned off the phone tossed it into my handbag, seeing it land near the positive pregnancy test in the baggie I was saving to show him. I smiled as I pulled back onto the interstate, thinking through ways I could tell him. I was shocked to be pregnant but thrilled to be starting a family with him. I'd only confided in Teri that I was pregnant. She assured me that Vic would be thrilled with the news. I just needed to tell him in person that he was going to be a father again.\n\nI was glad I was so busy with the condo sale and closing up my Bay Area life, plus the cleanup I was doing with the Sons. I wanted my Vic back in my life and my bed. As soon as this big conference was over, I was taking him to a resort near Cabo San Lucas in Mexico. I'd already talked to the hotel and set up a beach wedding, barefoot and in my white bikini. I'd already sent Vic's daughter Celeste and her husband Ted plane tickets. They were arriving the day after us, and I'd paid for them to have a week down there on their own.\n\nOur honeymoon would be in a secluded cove with a private beach, thousands of miles from the cold of Minnesota winters.\n\nI wasn't packing many clothes, and I wouldn't need them.\n\nGreg Barks' POV<br >Beloretsk Pack, Russia\n\nMy wolf shoved my will aside as the instinctual pull to find and claim my mate took over. He was howling for her in my head, our nose up and filled with the scent of gardenias and cedar. People moved away as I stalked through the main floor of the sprawling four-story log mansion. Men and women scattered in front of me as I moved to a stairway, heading upstairs and down a hallway towards the office wing. \"\u043e\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u044c \u044d\u0442\u043e \u0430\u043b\u044c\u0444\u0430 \u043a\u0440\u044b\u043b\u043e (Stop, this is the Alpha wing),\" a warrior said as he stepped in front of me.\n\n\"MATE,\" my wolf growled. His eyes got big, and he moved turned and ran down the hall. All wolves knew of the power of the mating pull, and interfering with mates was a crime. He ran ahead to an ornate set of carved double doors, probably the Alpha's quarters. The scent led behind another door on the right, closer to the hallway; she was in there, and she wasn't alone. I wrested control back and pleaded for him to cooperate before we scared our mate.\n\nI took a deep breath, letting my nose fill with her delicate scent until I was firmly in control again. I knocked on the door as warriors filled the hall behind me, the guard having called reinforcements. I heard footsteps, heavy ones from more than one person, and the door opened.\n\nI moved my hands behind my back and stood tall, unwilling to be intimidated by the huge men who stood together. Both men were built like bears, and together they blocked my view of the room. I looked at the older one, the younger his son. \"Good evening, sir. My name is Greg Barks, a Warrior in the Arrowhead Pack in the United States. My mate is in the room, may I please see her.\"\n\nThe younger man spoke in Russian, translating for his father. When he stopped talking, her father was glaring at me. The father spoke for a while before the son looked at me. \"I am Timur Vasiliev, and this is my father, Vasili Petrovsky. He greets your arrival with a heavy heart. Tatiana is his only daughter, and she is not of age for another two moons.\" He moved his hand over, the big paw gripping it tightly. \"Tatiana Vasililovna has felt the pull since you arrived. Neither of you will act on it until you have my father's permission, and she is of age.\" He moved aside, and my heart exploded at the sight of my mate, standing next to her mother. She was a vision, with curly blonde locks cascading down her back and an athletic figure in the dress that my wolf instantly loved. She was staring at me, eyes open wide, as she tried to get my scent. Her mother held her in place.\n\nI looked back at her father. \"I understand and accept your terms. I request your permission to meet her now, and to spend time with Tatiana while I am here, under the supervision of your family.\" The son translated while I thought about how much this was like Michael Corleone talking to Appolonia's father and brothers in Sicily through the translator. In both cases, the Sicilian proverb was true. Women were more dangerous than guns.\n\nHer father's face softened as the Russian translation flowed. With a smile, he stepped aside and motioned me into his home. \"Ekatarina! Tatiana! Vodka!\" That needed no translation. The two guided me over to the kitchen table, where I sat in the chair next to the big man.\n\nSitting caused my jeans to raise up, exposing the titanium alloy of my artificial leg and catching Timur's eye. Sitting next to me, he spoke in Russian to his father before turning back to me. \"You are the three-legged wolf we were expecting,\" he said.\n\n\"I lost my foot and lower leg in a rockslide. I am fully capable of my duties with this leg,\" I assured him. He translated as the ladies came in with a bottle of vodka, three glasses, and some caviar and crackers. Tatiana moved around, setting the glasses before us. I smiled and took the vodka glass from her hand. As soon as our fingers touched, a pleasurable shock traveled up my arm and to my chest. I gazed into her sky-blue eyes as she froze, and the sensation moved to my groin.\n\nHer face flushed, and the unmistakable scent of arousal came from her core. \"\u0422\u0430\u0442\u044c\u044f\u043d\u0430 \u0434\u0435\u0440\u0436\u0438 \u0441\u0435\u0431\u044f \u0432 \u0440\u0443\u043a\u0430\u0445 (Tatiana, control yourself),\" her father said. She jolted herself into moving again, setting down the rest of the glasses before taking a seat across from me. I pushed my wolf down, smiling at her as her father toasted something. I swallowed the vodka, feeling the burn, and remembering the warning not to try and out-drink a Russian.\n\n\"How do you function as a wolf? We spend much time in the mountains in training.\"\n\n\"I have an artificial leg for my wolf as well. I assure you I can keep up, and I will be able to protect my mate and our pups when the time comes.\" The night passed quickly as her family interrogated me on my background and intentions, and I slowly learned more about my mate. We had maintained contact the whole time, my leg extended to touch her ankle, and that calmed my wolf.\n\nTatiana was not just the most beautiful girl I'd ever seen; she was intelligent and driven. She had graduated from the equivalent of our high schools at sixteen and was starting her sophomore year of college on a pre-med track. Her voice was as beautiful as she was, though she spoke words I couldn't understand. I watched her face and eyes instead. \"She says that as the daughter of a Head Warrior, she would serve the Pack better as a Doctor than a fighter,\" Timur translated. \"She wishes she had taken classes in English like her big brother suggested.\"\n\n\"Both of us will need help learning another language,\" I said as I reached my hand over the table, taking her fingers gently in mine. \"Our love will require no translation. I will work hard and prove myself to you and your family. When we mate, I will bring you home and provide a good life for you. My Alphas would welcome a young Doctor, as his duties prevent him from doing that full-time.\" She melted at my look and at the words her brother translated.\n\nHer father said something, and she pulled her hand back into her lap. \"Prove yourself first, you have two months,\" her brother translated for me. \"Now come, you must check into the student quarters. You can see her in two weeks when the survival training is over.\"\n\nThat sounded fun. We stood, and I held my hand out to Vasili. \"Thank you for your welcome. Your daughter will be safe and happy with me.\" He shook it, his grip almost breaking my hand. I kissed his mother on the cheek and was allowed a brief hug with Tatiana, and then I was escorted to the door.\n\nTwo weeks. I had two weeks until I could see her again.\n\nTimur led me to my quarters where my bag was on one of the beds. \"Congratulations,\" my roommate said. He was a Beta's son from a German pack. \"The whole Pack knows of the mating.\"\n\n\"I need to tell my family,\" I said.\n\n\"Good luck. This place has no internet and mail once a week in the winter. You can write a letter, can you believe that?\"\n\nI sat at the desk that night and wrote a letter to Heather. I thought I was in love, but I had no idea what love was until I saw Tatiana. My wolf had fallen hard for her, and I was too. Heather was nothing to me now that I had found my mate. Vic was right; I shouldn't have led her on. She was young and would get over it.\n\nI pulled out a piece of paper and started to write. \"Dear Heather,\" I began. I knew I was breaking her heart, so I'd do it quickly.\n\nCh. 98\n\nRori King's POV<br >Arrowhead Pack House\n\nMy babies were away for thirty-six hours now, and the hole in my heart was almost painful.\n\nNew Year's Day was behind us, and there was less than an hour until the trial started at noon on the second. All of the Alphas were here, but only Sawyer brought his mate along. It was a wise thing, and I understood why. The split in the Council was deep, emotions would be high, and there was the possibility of war. Sawyer was my lawyer, so Ashley had to serve on the Jury of Alphas in his stead. I was taking no chances; I'd already sent the humans and my children away into hiding. It didn't matter what they threatened; none of us could tell them anything. I was sending Mykayla and all other Pack members not involved in security or trial support downstairs. They would be locked in the Safe Room in the Pack House basement until it was over, watching the proceedings on television.\n\nBeta Teri was supervising the staff as we served lunch in the main dining hall, while Ron and Vic were monitoring internal and external security. A trial like this was a headache; all the Alphas, their Betas, and Warriors, all poking around with the potential to cause trouble. We would be keeping our tunnels secret, meaning we all had to travel outside between buildings and keep our security measures discreet. We had augmented our security posture with men and women from our allied Packs. About half of them were hidden deep within our land, heavily armed and ready to respond if war broke out, but too far away to be sensed by those at the lake.\n\nI walked back into the dining hall from the kitchens after comforting one of my Omegas. One of the Bitterroot warriors tried to cop a feel as she was filling glasses. In most Packs that might get your hand slapped, but she and many other Omegas here had come out of slavery and abuse. She stood frozen, tears streaming down her face as his hand traveled up her thigh. Thank Luna, one of the Warriors was watching, and he pulled her away. He handed her off to another Omega, who took her out of view. I sent her to the safe room, excusing her from further duties. Looking around, I spotted Alpha Richard Long at a table. I walked to the table the offending warrior was at, and he and the other men stood at my approach. I shifted my nails, grabbing his testicles through his jeans as his eyes widened in shock. I dragged him over a few tables and shoved him to the floor at his Alpha's feet. \"My Pack members are not sexual playthings for your males,\" I said with a growl. The room had gone quiet as Alpha Richard stood up in shock. \"You are all warned. Treat the women here with respect, or I will rip your nuts off and go ice fishing with them.\"\n\nThe man looked up at his Alpha in shock and embarrassment, then to me as he got to his knees. \"My apologies, Alpha.\" He would heal quickly, but the blood staining his jeans satisfied my wolf's desire for punishment.\n\n\"Alpha Long, it would be best if you kept this man away from me, and my females during your visit.\" He nodded, linking to him before the man scrambled to his feet and left the room. I smiled like a good hostess as I looked around the room. \"Everyone, enjoy your lunch and the hospitality of the Arrowhead Pack.\"\n\nPeople went back to eating as I walked away, satisfied no one was dying quite yet. I let out a breath as Chase walked up behind me, his hands coming around from behind and resting on my lower stomach. \"How are you holding out,\" he asked.\n\n\"I'm hoping I don't kill anyone important today,\" I replied as I looked around. The seating assignments had mixed allies and foes together, making for a quiet lunch. He escorted me back to our table, where my untouched sandwich awaited. The nervousness about the trial was like a rock in my belly, and I had to force myself to eat. \"Even bacon doesn't taste good today,\" I said as I looked at my Wolfy-style BLT. Two big slices of marble rye, lightly toasted, covered with two inches of maple-smoked bacon, one tomato, one piece of lettuce, and mayo.\n\n\"It's going to be fine,\" he said as he ran his hand over my thigh. I was wearing a knee-length dress with thigh-highs, and I sent him an image of me pulling them on as we ate. The bond swelled with desire, so much that he had to stop eating to adjust himself. \"My family and yours will back you no matter what happens, and you know that. We need to shock them into changing their worldview, or we're going to have to go on without them.\"\n\n\"They could try to kill us and take our Pack,\" I said.\n\n\"They could try. Entrenched Alphas are the last to change. This trial is our chance to make our case directly to their Pack members, most of whom know nothing about what is happening. Even their Alphas can't keep them from hearing about you. Be the woman and the Alpha I know you can be today, and we will win.\"\n\n\"I hope so.\" I finished my meal and used the restroom, not willing to interrupt proceedings because of my bladder.\n\nThe servers were clearing plates as I walked in and sat down with my mate. Chairman Jack Coffey stood; the room immediately hushed in respect. \"The trial will begin in ten minutes. Take your places.\" The doors to the trial room opened, and the spectators started to move in to get the good seats. Sawyer came to sit with us; as the defendants, we would be called forward after everyone else was seated. I did notice the Betas around us, making sure we didn't run.\n\nAs if we'd run from our own Pack.\n\nWe walked in to the defense table, the room silent, and the cameras rolling. The Council sat on a raised table, as Chairman Coffey was the Judge for the trial. Councilmen Oscar Millner and Nathan Kirk were to his left, and Councilmen Yakov Baronsky and Jurgen Nemmers on the other. The other Council members were allowed to ask questions after the Prosecution or Defense was done with a line of questioning.\n\nTo each side, the Alphas were seated at tables in order of seniority. They were the Jury, and a majority vote would result in a conviction. The left side was our allies; Alpha Martin Smith, Luna Ashley Nygaard, Alpha Carson Nygaard, and Luna Coral Sexson. To the right were Alphas John Coffey, Richard Long, Steven March, Alan Robertson, and Paxton Blackledge. Our Pack wasn't on the Jury, nor was the Monongahela Pack. Since Alpha Matthew Kirk had filed the charges, he was responsible for proving them. All of the tables had microphones in front of them, and off to the side, an engineer and producer were managing the feed.\n\nI sat at the defense table, Sawyer on my right in the center aisle, and Chase to my left as I was the dominant Alpha. Chairman Coffey banged his gavel. \"The trial of Alphas Rori and Chase Nygaard is called to order. The Prosecution will read the charges.\"\n\nAlpha Kirk stood and nodded to the council. \"Count One, that Alphas Chase Nygaard and Rori King unintentionally revealed the secret of our nature to a human, Frank Grimes. Count two, the Alphas failed to follow a direct order by the Council Chairman to separate from humans, which led to the reveal.\"\n\nThe Chairman looked at us as we stood. \"How do the defendants plead?\"\n\n\"Guilty,\" I said in a clear voice. There were gasps in the audience, quickly silenced by the gavel. \"It happened, and we won't apologize or show regret over it.\"\n\n\"Is there a plea deal in place,\" the Chairman asked as he looked over at Alpha Kirk.\n\n\"No, Mr. Chairman,\" Alpha Kirk said. \"I attempted to conduct negotiations with the Defense, and they refused to entertain my offers.\" He looked as shocked as anyone.\n\n\"Alphas Rori and Chase, you realize the charges you plead guilty to are subject to penalties up to and including execution?\"\n\n\"We do, Mr. Chaiman,\" I said.\n\n\"Very well, I have entered guilty pleas into the record, and we will proceed to the sentencing phase.\"\n\n\"Mr. Chairman, if I may suggest a change from normal procedures. Allow me time to explain the reasoning for my actions and to answer questions about them, as those reasons will be key to arriving at the appropriate sentence.\"\n\nHe looked at me, then at Alpha Kirk. \"Any objections, Alpha?\"\n\n\"No sir, provided the Prosecution is allowed time and latitude to question them, and other witnesses that may be called.\"\n\n\"Then the Council has no objections. The floor is yours to make your statement, then we will entertain questions.\" He sat back, pen in hand as he got ready to take notes.\n\nThis was it, my chance to make my case directly to the Werewolf race. \"As you know, my upbringing was not normal for a werewolf. I left on a roadside, twenty miles from where I now sit after the Arrowhead Pack was attacked and wiped out. The bodies of my Pack mates are buried five hundred yards from where you sit.\" I took a breath. \"I survived only because of the sacrifice of a brave wolf, who I named my first daughter after. Discovered and later adopted by a human family, I grew up human. When my wolf came forward, it wasn't pretty. We didn't understand each other, and violent outbursts occurred when she got loose. I spent months in mental institutions and clouded my mind for years with psychotropic drugs so I could keep her down.\"",
        "I looked over at Alpha Coral. \"As if the history of my Pack wasn't enough, my dealings with other Packs and the Council were frightening. Multiple abduction attempts occurred while I was with my mother and my Club, attempts in which friends were injured or threatened. I ended up in a psychiatric hospital in Seattle, where I met my mate Chase, who was an intern. When I was released, I still didn't know who and what I was. I didn't know that the chase that almost killed me in Seattle was meant to bring me into the fold.\"\n\nI could see the emotions of the Alphas, who knew of my story, but not from my perspective. \"My parents and the Club hid me in a cabin; we were on a hike when a bear attacked us. I shifted, driving the bear away from my family, but at a cost. I was injured badly by her claws, and Chase was called to help. He brought his Pack doctors, and they stitched me up. My mother and stepfather saw me change, but they weren't afraid of me; they knew me and loved me for whatever I was. I would never hurt them, and they would never hurt me or tell my secret.\"\n\nChase picked up the story. \"My father, the Alpha of the Cascade Pack, reacted the way you would expect him to. He was raised with the laws of the old days when werewolves and humans rarely mixed. He demanded that Rori's parents be killed, when they had done nothing to deserve it, and he wanted my mate punished for rules she didn't know existed. Her wolf was completely detached from her human side; facing the bear was the first time they had coexisted in her mind. She was my mate, and I wasn't going to see her hurt. We mated and claimed her birthright as Alpha of a reborn Arrowhead Pack.\"\n\n\"That was not without its struggles,\" I said. \"Alpha Coral represented us with the Council while I recovered from the bear attack. Instead of being happy that I survived, the Council arrested my Beta and tried to strong-arm us into submission. We had to fight for our land and our Pack, against a corrupt Council and their allies, who wanted power and money.\"\n\n\"Surely you can't blame this Council for the sins of those who have been removed and punished for what they did,\" Councilman Baronsky asked.\n\n\"I do not blame the current Council, sir. I give this background to explain my actions. The majority of my interactions with the Werewolf Council and the Alphas have been negative; unlike many of you, I don't assume them to be good or acting in my interests. My mate understands more of our culture, but his faith in government has been shaken by what he has seen and endured.\"\n\n\"Still, your Pack joined the Council, and you vowed to follow our laws,\" Councilman Kirk said. \"You cannot pick and choose which laws you will follow and which you ignore. We cannot have anarchy,\" he said smugly.\n\n\"We cannot have idiocy either,\" I replied. There was an outcry, both from in front and the gallery behind me, as what I said registered.\n\nCouncilman Millner half stood, pointing his finger at me. \"You will RESPECT this Council and its decisions,\" he said as he shook in outrage.\n\nI waited until he sat down, refusing to let him bait me into losing my cool. \"I do not mean disrespect, Councilman. My argument is a logical one, informed by my upbringing which was quite different than yours. My father was a Captain in the Minnesota State Patrol; his wife was an Emergency Room nurse. They saw humanity at its worst and its best; they raised me to understand right and wrong from the human perspective. It is THIS world that you must understand and live in, because it is no longer possible to live apart from it. The rules you lived by when you ruled as Alpha will not continue to work now,\" I said evenly.\n\n\"Explain,\" Chairman Coffey said.\n\n\"If I may,\" Chase said. \"Let us use the example of DEA Director Frank Grimes, and the failure to immediately kill him for which we are here now. Frank Grimes has been nothing but honest and forthright in his dealings with us. In Orlando, he worked with me to defuse a costly war between gangs that would have harmed our friends. Frank kept my identity secret as he used my information to take down the Sons of Tezcatlipoca, a violent gang of jaguar shifters and humans, even at the cost of his job. As a guest at my home, he fought to protect my family and was injured. The exposure came in the heat of battle, yet he never exposed us to the law enforcement that arrived. He trusted me and I trusted him.\"\n\n\"He never should have been there in the first place,\" Alpha Kirk said. \"You risk too much when you bring humans into your home. Exposure is inevitable with time,\" he said smugly.\n\n\"I fully agree with your last statement, Alpha,\" I said. \"Exposure IS inevitable. Think about the world we have now. Humans have aircraft, satellites, trail cameras, night vision cameras, drones, facial recognition technology, computers, and DNA testing. There is NO place in the world for werewolves to hide safely from the world around them, nor should we want to. We can live among them, in harmony and for mutual benefit, provided we don't run afoul of THEIR laws. Humans will react badly to what they don't understand if they consider it a threat.\"\n\nI let Chase continue. \"So, we have our loyal friend Frank who has done nothing to deserve death, except he saw a person change. Under the law, we should have killed him immediately, especially since the Chairman has already warned us that no more Trusted Agents would be allowed.\" The Council nodded. \"911 had already been called, and Agent Grimes had identified himself. He was a guest in my home, which by tradition meant he was under my protection. If I kill him, there's no way to hide it. Police arrived a short time later, and we could not even hide the evidence of the ones that shifted to protect us. Imagine the shit storm that would descend on us if we were suspected of gunning down a DEA Director.\"\n\nI looked at the Council as I sat forward. \"We had very little time to decide, and we made the decision we could live with. Frank Grimes isn't our enemy. He's an asset to my Pack, and to the Council.\"\n\n\"I'm not so sure about that,\" Councilman Nemmers said. \"The last time he was with us, he nearly died.\"\n\n\"And his werewolf friends saved his life. Frank understands your fear of humans and doesn't hold the actions of one dead man against the rest of us.\" I paused for a second. \"Now we have an ally with contacts high in Government, instead of a missing man who would be the subject of an intense investigation. The deal we made because of Frank stopped our secrets from coming out. How many of you have questionable business dealings, insurance fraud, identity theft, or other crimes?\" I looked at Alpha Long, knowing the Bitterroot Pack's history with humans. \"What happens if your existence comes out the wrong way, and people start questioning the disappearances of women in the area? The past Alphas would kidnap and impregnate women, then kill them and bury them in the woods. Have none of you watched CSI, or any true-crime TV shows? How long would you withstand scrutiny if the FBI shows up with cadaver dogs, ground-penetrating radar, and satellite surveys?\"\n\n\"They wouldn't DARE,\" he said.\n\n\"You have hundreds of bodies and no explanations,\" I told him. \"By the time they are done with you, all of you will be in prison. Or you fight, and they kill you. We cannot allow our traditions to get in the way of our survival.\"\n\n\"So you would what? Throw our lives open to them?\"\n\n\"If done in the right way, I would consider it. It is better to expose ourselves in a planned way than to be exposed in a bad way. When it happens, we will need our human friends to stand with us and vouch for us. I have hundreds of them, a select few who are Trusted Agents and already know my secret. And do you know what?\" I looked back at the room before turning to the Council. \"Four of those women knew what I was before I did. They didn't expose me or take advantage of me; they protected and helped me. They showed more loyalty to me than I've seen from my kind. Yet with all they have proven, I sent them away while you are here.\"\n\n\"Your humans are not here?\" The Chairman looked shocked.\n\n\"Of course not. I sent my parents and my human friends into hiding. I told them I didn't want to know where they went, and they were not to contact me. I sent more than them, though.\" I looked at each of the Council members. \"I sent my CHILDREN with them. In a sad state of affairs, I trust humans with my babies more than werewolves. \"\n\n\"Your children are not in danger from us,\" the Chairman said dismissively.\n\nI laughed. \"My dead Pack members would argue that. So would the dead Alpha and his Betas who wanted to kidnap and rape me when I was sixteen. Can't you understand my hesitancy to trust you knowing my past? I didn't know how this trial would go, and I still don't. If I die, the last thing I would allow is for my children to be taken by men with power and money on their minds. Kill me, and the Blessed line will end.\"\n\n\"Your daughter is still alive,\" Millner said.\n\n\"My daughter will never see or mate another werewolf,\" I promised. \"More than that, do you remember the Council meeting where you voted to arrest me and imprisoned my Beta? Do you remember what I threatened that day?\"\n\nCouncilman Baronsky nodded. \"A video and documentation of what we are, and who we are, including names and locations. A dangerous gambit, but one you played well.\"\n\n\"It wasn't a gambit. The video and documentation is out there, and it's double-blind. I don't know who has it, and the person who has it doesn't know what it is. Nothing has changed; if I die, it goes to the press, and Luna help you all then.\"\n\nCouncilman Millner shot to his feet, his chair skidding into the wall behind him. \"YOU DARE THREATEN US?\"\n\n\"I'm informing you,\" I said evenly. \"It's my little insurance policy of Mutual Assured Destruction.\"\n\nThere was an outcry in the room, and the Chairman had to gavel the proceedings back to order. \"The audience is cautioned to remain quiet and respectful. Alphas, command your members.\" He waited for them to give the orders over the Pack links. \"I have a question, Alpha King. I understand you do not like the rules as they are now, but surely you want some limits on human interaction and knowledge? As you say, the more people know, the more inevitable our exposure is.\"\n\n\"Zero tolerance laws don't work because they are zero intelligence; there is no allowance for circumstance, character or relationship. Human membership should be like we treat applicants to our Pack; we evaluate how they would fit in and contribute to the overall good. Frank is a perfect example, and there are others I would add without hesitation if I could.\"\n\n\"I can't believe what I've just heard,\" Alpha Kirk said. \"To summarize: our laws are stupid, I openly defied you and will do so again, and if you do what the law requires, I'll ensure you're all killed in return. Killing her is too easy; she should be imprisoned and forced to reproduce, with the children adopted out to the Packs to help with our population. At least then, we would get the benefit of the blessing, without the risk this reckless she-wolf brings.\"\n\nMy look could have flash-frozen water at fifty feet. I slowly stood, my claws extending and denting the heavy oak table as I fought to restrain the change. \"Our Goddess Luna would never allow that, nor would I,\" I said quietly.\n\n\"Oh, so now you speak for the Goddess? Do you hand out her blessings and curses now,\" he continued.\n\n\"Alpha Kirk, how many females of breeding age are in your Pack?\"\n\n\"Forty-two,\" he said proudly.\n\n\"And how many children under eighteen are in your Pack?\"\n\n\"Two,\" he said.\n\n\"Two.\" I shook my head, looking at him. \"And neither of them are yours; in fact, you and your mate have not produced an heir in thirty years of mated life.\"\n\nHis face reddened at the implication. \"It is not uncommon for us, we all know how difficult it is to get pregnant as werewolves.\"\n\n\"So you would agree that pregnancy is a blessing from Luna?\"\n\n\"Of course,\" he said.\n\nI just smirked. \"My Pack has fewer females than you, yet we have four children right now. Add in that I am pregnant, no shock there, but so are three other females in my Pack.\" I linked with Coral, Sawyer and Michael, making sure it was all right. \"My aunt, Luna Margaret, is pregnant. So is Ashley Nygaard. Alpha Coral has a young baby at home. Add in the members of our Pack who are finding themselves pregnant, and we have a real baby boom coming. So yes, Alpha Kirk, children ARE a blessing from Luna, and Luna is blessing those who are on my side of this.\"\n\nCh. 99\n\nHeather Rhodes' POV<br >I-80 in Nebraska\n\nIt was near dinnertime, and we had been driving since before midnight. In our hurry to get away from Minnesota, we stopped only to get gas, food, and to use the bathrooms. The big vehicle was comfortable, and we had been rotating driving, shotgun, and sleeping in the backseat. I was driving now, and I was starving. \"Are we going to stop for food,\" I asked Roadkill as I saw the signs for places to eat in Grand Island.\n\n\"I think it's time we stop for the night, the babies need to have some time out of their car seats,\" he said from the back seat.\n\n\"That sounds like a decent place,\" Possum said as she read the sign. I put on my blinker well before the exit, making sure the SUV behind me in our little convoy got the idea. We exited and drove a few blocks to Joy's Place Steak and Pasta, parking in the lot. I took the keys out and handed the to Roadkill before stepping out into the cold and snow. \"I could eat half a cow,\" Possum said as she came around the back.\n\n\"I'll take the rest,\" Roadkill said as he took her hand in his.\n\nI stretched before opening the back door of the second SUV. \"How are the babies doing,\" I asked.\n\n\"They don't like travel much,\" Laura said as she got out of the passenger seat. \"At least they are sleeping now.\" Her husband, Brent, walked in with Possum and Roadkill as I took Cheryl in her car seat, covered by a blanket. Brenda got out, and Zoe handed over baby Mark to her before she followed. We walked inside as Laura stayed behind us, alert and with a hand in her pocket. Brent held the door open for us as we walked in, and my stomach growled with the smell. Fast food and gas station snacks didn't compare to corn-fed beef and pasta.\n\nThe hostess led us to a large round table in the back, and the car seats put on each side of the nanny's chairs. I didn't miss how Brent was next to Cheryl, and Laura was on the other side next to Mark. I'd asked about it after the first few stops, and knew why they were here. They would protect me, but their primary job was to protect Rori and Chase's babies. The nannies would care for them, but they weren't trained bodyguards like the couple was. I took a seat next to Laura; I wanted to find out more about her. She was beautiful and deadly, just like I wanted to be.\n\nThe food was good, and in between bites, I learned more about Laura's background and training. She had been born into a family of warriors, but her older brother was nineteen years older than her. She learned to shoot pistols at eight, rifles at nine, and hand-to-hand combat at twelve. \"You didn't spend your teen years on makeup and boys,\" I guessed.\n\n\"Only to cover the bruises from sparring,\" she said with a smile. \"I was raised to project strength because I would not allow weakness in my body or mind.\"\n\n\"Didn't that make you an outcast?\"\n\n\"Not In the small town where I grew up. The Canadian Rockies are for the strong, and men and women need to be fierce to survive. Nothing is a given; your reputation is what you make it.\"\n\nShe was right; I had a new name, a new life, and right now, my reputation was shit. I was a whiny, injured, helpless teen who wasn't good enough for a fighter like Greg. That was why they sent him away; to keep us apart until he came to his senses. I was a Club Princess, and he deserved a fierce partner like Laura, not me. \"What kind of fighting do you do?\"\n\n\"Mixed martial, it allows me to combine disciplines,\" she said. \"I learn everything; I know boxing, wrestling, karate, taekwondo, Krav Maga, and some Brazilian Jujitsu. I also compete in three-gun competitions locally to stay sharp.\" Three-gun was pistol, rifle, and shotgun; I'd seen a little, and it looked like fun. \"Have you fought before?\"\n\nI couldn't believe she hadn't heard about my background; then again, I was injured and needed a bodyguard. \"In my past life, I was an Under-18 state champion in Judo in my weight class,\" I said. \"I haven't worked on it since getting shot. I'm only now able to start running and lifting again.\"\n\n\"You should train with us,\" she said with a smile. \"I love fighting specialists because they can teach me new techniques. We can teach you how to defend yourself with your hands, knives, and guns.\"\n\n\"You fight your husband?\" I looked across the table at him; Laura was athletic and fit, but Brent was a good eight inches taller and almost twice her weight.\n\n\"We don't just wrestle under the sheets, but that's the only place I let him pin me,\" she said in a whisper.\n\nI blushed as she laughed, and somehow Brent must have heard. \"She's not an easy opponent for anyone, regardless of size. I found that out when I met her.\"\n\n\"Oh, this story I have to hear,\" I said.\n\n\"I was in Winnepeg, at an underground fight club. I was there with a few friends because we had to drive a thousand miles to get away from my reputation and get better odds,\" she said with a grin. \"I'd just dispatched the only woman who would fight me, but the odds were shit. I yelled out that I'd fight anyone, male or female, who had the guts to get in the ring with me.\"\n\n\"I was in the locker room with my buddy Tony, who was in the main fight,\" Brent said. \"The owner came in and said this hot chick was challenging anyone, and the bitch needed to learn her place. He offered $500 for the fight, and I took him up on it.\" He smiled at Laura as he told the story. \"I quickly changed and went out to the cage, only to see the most beautiful woman I'd ever seen in the other corner. It was love at first sight.\"\n\n\"You fought each other for a first date,\" I said as I almost choked on my T-bone.\n\n\"I kicked his ass,\" Laura said with a smile. \"I needed the money bad. I had to win, even if all I wanted to do was kiss him and take him home. He didn't even throw a punch! All he wanted to do was wrestle with me.\"\n\n\"Still all I want to do,\" he added with a laugh.\n\n\"I knocked him down with a spinning heel kick, then choked him out. After I changed and collected my prize money, I waited for him outside the locker room. My friends went home without me; we got married the next weekend. Eight years now and going strong.\"\n\nIt was a great story and a great meal. There was a storm coming over the Rockies, so we ended up staying in a mom and pop motel for a day as we waited it out. When we arrived in Las Vegas, we unloaded Roadkill's Harley and waited for him to talk to Aces. Nobody was surprised when two Harleys returned to where we were parked. Bunny was off the motorcycle before it parked, running over and embracing me in a hug as the others watched. \"OHMYGODI'MSOGLADYOU'REALIVE,\" she said in one breath.\n\n\"Hi Bunny,\" I said as I pushed her back enough that my face wasn't pressed down into her ample cleavage. She was a Jessica Rabbit in real life, and in those heels, she towered over me. Aces came over and pulled me into a hug. The big man was crying as Bunny embraced us both. \"Thanks for taking us in, President.\"\n\n\"Aces,\" he said as he let me go. \"You're family while you are here. I miss your parents every day.\"\n\n\"The Club will be around for protection if we call, but we won't be staying at the Clubhouse,\" Roadkill said.\n\n\"I've got a little place outside town I'll be putting you up in,\" Aces said. \"It's isolated and owned by one of my real estate investment companies. Only the Club Officers and their Old Ladies will know who you are and why you are here.\"",
        "\"So, I'm locked in a bigger prison?\" I was beginning to wonder when I'd be free again.\n\n\"Hardly. There are miles of desert roads out there, and you have your rides. I'd ask that you ride with me, or a Club member, so we can keep you out of sight and trouble.\"\n\n\"I'm not TRYING to be trouble, Aces.\"\n\n\"I know, girl. It keeps finding you.\" We got back in the cars and followed him for another forty minutes, ending up in a desert canyon well north of town. We pulled up in front of an expansive home, no, MANSION, built in the Southwest style of adobe and mesquite. My jaw was open as Aces and Bunny walked up. \"Will this work for you?\"\n\n\"Holy shit,\" I said.\n\n\"Yeah, it's not bad,\" Bunny said. \"Come on; I'll give you all the tour, then you can settle in.\" The place was lavish, and I was kind of jealous of the master suite that Roadkill was taking. The guest bedroom I was in was just as fancy, with a Jacuzzi overlooking the back and a doorway leading to the enclosed garden courtyard. Brent and Laura's room was across the hall, and the nursery was next to them. The nannies were sharing a room by mine.\n\nThe home had a gym, including a ring, and Laura was smiling as we spotted it. Over the next few months, we'd get to know that room pretty well. We grilled chicken for dinner by the pool in the outdoor kitchen, and that night I slept for twelve hours.\n\nWhen I woke, I had to run to the bathroom. I barely made it before I started throwing up. I flushed and leaned back against the wall as someone knocked on my door. \"Heather?\"\n\nIt was Laura's voice. Our bathrooms adjoined, and she probably heard my retching. \"Come in,\" I said. Her nose wrinkled as she walked into the bathroom and smelled my vomit. She helped me up, and I rinsed my mouth out before starting to brush my teeth.\n\n\"Are you all right?\"\n\n\"I must have had some bad chicken.\"\n\nShe came up and checked my forehead. \"No fever.\" She turned me around. \"Are these sore,\" she asked as she squeezed my breasts.\n\n\"Ow,\" I said.\n\n\"Heather, when was your last period?\"\n\nOh my GOD. No. It couldn't be. I thought back, and I just knew. \"The second weekend of November.\"\n\n\"You've had intercourse since then?\"\n\nI nodded. \"We used condoms, except...\"\n\nShe shook her head. \"It only takes once. Was it with Greg Barks?\" I nodded, tears starting to run down my face. He'd knocked me up, and now that I needed him, he was gone. \"We'll get a test and find out for sure.\"\n\n\"What am I going to do,\" I asked her as she pulled me into a hug.\n\n\"You're going to become a kick-ass mother,\" she said. \"You aren't in this alone.\"\n\nThe test later that day was positive, and Aces sent a doctor to the home to examine me. He confirmed the pregnancy and informed me of my options. It would be easy to abort, but I couldn't kill our love child. I just hoped he would be happy when he found out, and that all the talk of love and being together wasn't bullshit. I wrote a long letter and gave it to Roadkill to send back to Arrowhead, where Ron could forward it to Greg.\n\nI could still work out and train, and with little else to do, I focused on that. We would wake early and get in a morning run before the temperature rose. When we returned, we worked on firearms training. They didn't want me exposed to lead dust, so we used high-end air pistols and rifles instead. After lunch we'd do Mixed Martial Arts and Krav Maga; in the evening, we'd practice knife fighting and throwing. Laura was determined to make me a badass, and along with long motorcycle rides, it kept me from worrying excessively about Greg, and his reaction to our child.\n\nTwo months passed with no word from him.\n\nI'd need his love and support more than I ever imagined. At my twelve-week check, the ultrasound showed I was pregnant with fraternal twins.\n\nCh. 100\n\nAlpha Coral Sexson's POV<br >Arrowhead Pack Conference Room\n\nI just wanted to bang my head in frustration.\n\nThe 'trial' of Rori and Chase had ended forty hours ago, and we were no closer to the end.\n\nI had to hand it to my Sister-in-Law and my twin brother; they were forceful and unrepentant throughout. They took every argument in favor of the law on humans and turned it around, showing why it was not in our best interests to do so. By the time their testimony ended eight hours later, the divide within the Packs was greater than ever.\n\nOur jury reflected that.\n\nOur side was solid. I voted with Rori's Uncle Martin, Luna Ashley, Alpha Michael and Alpha Carson in a block that wanted no punishment at all. On the other side, Alphas John Coffey, Richard Long, Steven March, Alan Robertson, and Paxton Blackledge were voting together in favor of severe punishment. The death penalty was no longer under discussion, but they wanted the pair removed from the Alpha position and imprisoned.\n\nA two-thirds majority was required to determine punishment, so two Alphas peeling off would be enough to end this. \"Look at this realistically,\" I said. \"This isn't your standard Pack we are talking about here. Rori and Chase built it from nothing, taking in people other Packs had harmed, with a leadership that doesn't see things the same way. Punishing them won't accomplish anything except drive a wedge between the Packs. We all know they will do it again if they think it is the right thing to do.\"\n\n\"That's EXACTLY why they must lose their positions of leadership,\" Alpha Robertson said. \"They looked us in the eyes and told us they would not accept the Council's judgment or the Council's laws. We cannot allow that to go unchallenged! Our structure and laws will fall apart if a Pack can choose to ignore them without consequence.\"\n\n\"How can you expect that from her after how those same people have treated her,\" Carson answered. \"The way she rules is the way the Packs should be emulating, not punishing. We should end this fruitless deliberation and get to the real business, which should be updating Pack laws.\"\n\n\"You will not get your majority there, either,\" Alpha Paxton Blackledge said. \"It takes the same two-thirds vote.\"\n\nWe went another few hours until it was time to break for lunch. There were more attempts at bridging the gaps, but our block knew what Chase and Rori would accept, and what they wouldn't. All of the proposals involved imprisonment or removal, and were non-starters.\n\n\"I think it is time we admit defeat and report to the Council,\" Alpha Martin said. \"We are deadlocked.\"\n\n\"Hung jury in a trial where the accused pled guilty,\" Alpha Steven March grumbled. We voted, and for the first time, we had a unanimous vote.\n\nThe Council was sitting together in the dining room, and they weren't happy either. None of them had planned to be here beyond two days, and now no one knew when it would end. Everyone had issues back at their Pack to deal with, appointments to keep, or mates who needed them.\n\nSomething had to happen.\n\nI went to the kitchen, getting the packaged meals for the Chase, Rori, and myself. The Council Enforcers wouldn't let anyone in the Alpha's rooms except family, so I had been taking my meals there. As I was leaving, Chairman Coffey came up to me. \"Alpha Coral, I think it's time I intervene personally with the Alphas.\"\n\n\"I don't know if that will work, sir,\" I said. \"They were clear about what they would and would not accept.\" We moved through the big building, exiting into the cold, sunny day, and walking towards the Alpha's home. \"You are right in that we need to do something. The jury is getting nowhere.\"\n\nOur feet crunched through the snow until we entered the big house on the point, leaving our boots by the door. The Enforcers came to attention as we passed them in the upstairs hallway. I sent to Chase that the Chairman was here with me, and he mentally told us to come in. Chase was sitting on a couch in their sitting room watching the news, with Rori's head in his lap as he absently played with her hair. \"Time to get up, love,\" he said as we walked in.\n\n\"Thanks for letting me sleep,\" she said.\n\n\"You are pregnant, and it's not like we have a busy schedule,\" he replied as she sat up. They could execute Pack business on the computer or by mental communication, but not in person. They both stood and welcomed the Chairman to their rooms, inviting him to sit on a nearby chair. \"How can we help you, Mr. Chairman?\"\n\n\"This trial has not gone well for anyone,\" he said. \"The jury is deadlocked on your punishment, as you know. All attempts to forge a compromise have not succeeded because you have instructed your supporters not to accept them.\"\n\n\"The jurors are Alphas; I cannot command them or control them. If they do not accept a compromise, it is because they don't find it in the best interests of their Pack and the Council,\" Rori said diplomatically.\n\n\"Of course, and neither can I command or control them on this. It does leave me with an interesting conundrum; I have Alphas who pled guilty to serious charges, but whom I cannot establish a punishment.\"\n\n\"If you are here to negotiate a plea deal, Alphas Sawyer should be here.\"\n\n\"No, but I have decided the next step in this mess. Call your brother, he should be here for the next part. I will call Alpha Kirk.\" He pulled out his phone and texted him.\n\nChase looked up after the mental send. \"You will be wasting our time, as we have no intention to accept any of the deals that have been put forth.\"\n\n\"And I am not here to broker one; that would be an abuse of my power as Judge. Please, sit and eat before it gets cold.\" Chase turned the television off, and I went to get more chairs out of their office. I laughed a little as Alpha Kirk came in. He was unusually tired and irritable today, with good reason. The Omegas had heard his outburst about what should happen to their Alpha female, and they were getting even in creative ways. His expensive dress shirt had an uneven pink tint after it \"accidentally\" got into a load of laundry with a new red T-shirt. His eggs this morning were cold, the steak with it cooked like shoe leather. A plumbing issue took away hot water to his room, and his wake-up call came an hour earlier than he asked. I could see a stain on his tailored suit where a server had spilled coffee on him at lunch.\n\nHe'd pissed off the wrong people, and to complain to the Host Alphas would show him to be weak.\n\nWhen Sawyer arrived, the Chairman spoke again. \"I am going to declare a hung jury when the Court convenes this afternoon.\"\n\n\"You can't do that! They pleaded GUILTY to the charges,\" Alpha Kirk said.\n\n\"The ruling does not change the plea,\" he said. \"Since the Alphas cannot agree on a sentence, I am continuing the trail for three months. We will reconvene the Alphas here on April Third to resume deliberations.\"\n\nSawyer shook his head. \"The sides are dug in; I don't know how that will change in three months.\"\n\n\"Minds can change, events can change, and leaders can even change in that time.\" I didn't miss the subtle warning there, wondering which leaders he was referring to. I had a few ideas, and if I didn't have my own Pack already, I'd have challenged Alpha Kirk on general principle. I'd have to speak to Mom about whether she wanted back into the Pack life, or if she was going to stay retired with her new mate. \"Three months will allow emotions to settle and saner heads to prevail.\"\n\n\"What about my clients? They are in limbo while we wait.\"\n\n\"The Arrowhead Alphas will remain under confinement, but the restriction will be to their Pack lands. Council enforcers could be left behind to monitor compliance, but I would expect more from Alphas. Your word that you would remain on your lands would be enough,\" he said.\n\nI looked over at Rori; she didn't like it, but it was better than the alternative. \"Chase and I will remain on Arrowhead Pack lands until the jury convenes again,\" she swore.\n\nSawyer moved behind them, placing his hand on his brother's shoulder. \"It doesn't seem like enough to get two-thirds. You need two Alphas to change sides.\"\n\n\"Not this time. The ruling affects us all, not just those in North America. In the next deliberation, ALL of the world's Alphas, save Arrowhead and Monongahela, will decide your fate.\"\n\nMy mind whirled at this, while Sawyer was shaking with anger. \"You can't change the rules in the middle of the trial,\" he growled.\n\n\"Do not growl at me, pup,\" the Chairman said as he stood. \"The Council has decided. If you don't like it, strike a deal before then. Either way, we will settle this the next time I am here.\" He looked to Rori and Chase. \"The proceedings will resume at one. I will be departing for the airport immediately after it ends, so I would like to thank you for your hospitality.\" He extended his hand to Rori and Chase. \"You have balls, young Alphas. I hope they don't get caught in the machinery of justice.\"\n\nI watched him leave, a smug Alpha Kirk behind him. \"Fuck,\" I finally said. \"What does this mean?\"\n\n\"It's not good,\" Sawyer said. \"European Alphas are older and more traditional than American ones.\"\n\n\"They still have to get two-thirds, and we have three months to make our case,\" Rori said. \"There are some that will never change; we need to focus on the ones who were trying to find common ground.\"\n\n\"And if we can't?\" I looked at my family, nervous that our strategy had backfired.\n\n\"Then we make a deal,\" Sawyer said. \"It's better than removal and prison.\"\n\nBeta Ron's POV<br >Arrowhead Pack Offices\n\nIt had taken a week to get everything back to normal after the Council and Alphas left.\n\nIt didn't help that Roadkill and Possum were gone; he did so much with facilities and the motor pool that things quickly fell behind. The people he trained were doing their best, but it wasn't the same. Having our Pack Nurse gone wasn't a hardship since Chase could fill in, but still.\n\nThe Alpha pair wasn't in a good mood. Having their children hidden for protection, and accomplishing nothing that would bring them back, was eating away at them. They were going to miss them growing, their first steps, their first words at this rate.\n\nI almost hoped someone was stupid enough to attack us, just to give them an outlet for their rage. The danger of attack was greater than ever before. Both sides knew they needed to change the minds of an Alpha or CHANGE Alphas. Attacking us solved the problem at the source, while they would have to take out two Allied Packs to turn the jury against us. Their brothers needed warriors back home in case someone tried to take them out.\n\nWe made sure before the Alphas left that they knew an attack on one of our Packs would mean war.\n\nSo we trained and trained hard. Every person in the Pack was getting firearms training, and I was working on improvised explosives and ambush positions.\n\nAll of this left Vic Knightly and his pregnant human love Spider Monkey in limbo. Spider had purchased the lake home just around the lake from our lands, so 'technically' the Pack was not hosting her. She wasn't here long, as she and Vic were in Mexico with his daughter and her mate from Oxbow Lake. They were getting married on the beach.\n\n\"You got mail, baby,\" Teri said as she walked into the office and gave me a passionate kiss. We found out three days ago that she was pregnant with our first child, and both of us were walking on the moon over it. Rori's theory was that Luna was blessing those on her side because she favored it. I didn't care how it happened.\n\nI pulled her into my lap and buried my nose in her neck as my wolf assured himself all was well. She handed me a letter with no return address, postmarked from Orlando. Opening it up, I found another envelope inside with Greg's name on it. \"It's from Heather,\" I said.\n\n\"Are you going to forward it?\"\n\n\"Not after this letter from Greg.\" I opened my desk drawer and got the letter that had arrived from Russia the day earlier, in which he dumped her like she was diseased. \"I don't have her address, and I can't be sure who is forwarding her letters.\"\n\nTeri read the first paragraph and handed it back to me. \"Asshole!\"\n\n\"Yeah.\" I tossed the two letters back in my drawer. \"Heather might do something stupid if she gets this, like trying to find Greg. I think it's best if they handle their relationship issues face to face when he returns.\"\n\n\"If Heather is back here by then,\" she said. \"Luna only knows what will happen with the next jury.\"\n\nI pulled her close as my hand covered her lower belly. \"We will get through this, my love. Come on; it's almost lunchtime.\" I set her on her feet, and we walked out.\n\nCh. 101\n\nHeather Rhode's POV<br >Las Vegas\n\nMy eyes shifted nervously between the three rough-looking men as they moved apart from each other, knives in hand. \"Don't get stuck in the middle, pick one, and attack. When they have numbers, they expect you to stay defensive. Take the fight to one and run when you see an opening.\" I remembered learning from Laura. I picked the smallest guy, spinning and bringing my heel up into his forearm. The knife caught my thigh as I knocked it free. Before it hit the ground, I moved closer and followed with a wicked shot to his ribs, then another to his kidney. His punch missed my face and hit my shoulder. I wanted to finish him off, but the other two were already on me.\n\nOne grabbed my hair, pulling me back towards him. I kept my balance, taking a step back before launching my body in the air. My legs wrapped around his neck, and I used my weight and momentum to send us both to the ground. A punch in the throat and I was free, standing just in time to see the third man send a knife towards my ribs. Twisting to the right, I caught his wrist in my hand. He had extended himself too far, so I was able to pull him easily. I put my hip into his waist and threw him to the ground, as my left hand caught the knife as he dropped it. A moment later, the knife was at his throat.\n\n\"Goddam, Laura, she's good,\" the man said as I let him go. I stood and helped him to his feet and gave Blaster, Master at Arms of the Las Vegas Steel Brotherhood, a brief hug. Taz, the Vice President, was on his hands and knees, trying to catch his breath after the throat punch. All-In, the Treasurer, was holding his ribs as he caught his breath.\n\n\"She's a good student,\" Laura said as she came forward and gave me a big hug. Daily sparring sessions with her and Brent had honed my skills quickly. I found my Judo training gave me a good base for the other disciplines, but we were focusing on Krav Maga. After all, I needed to defend myself, not enter tournaments. I'd soaked up their instructions like a sponge, and in between, I watched instructional videos. \"We are so familiar with each other's style that sparring isn't a challenge anymore. I figured I'd try her against you three.\"\n\n\"She's good, but I was nervous as hell fighting a pregnant woman,\" All-in said as he stood up.\n\n\"It's still early, the babies are small and well-protected,\" I said. \"That was fun.\"\n\n\"For you,\" Taz said. \"You owe me a beer after that beating.\"\n\n\"What beating? Nobody saw nothing,\" Aces said as he came forward. \"Heather was never here, and we were scouting a new route for a run.\" They all nodded.\n\n\"Good, because Brent is grilling the steaks now, and the beer is cold. Get changed and come on up,\" Laura said.\n\nI went into the women's locker room changed back into my clothes; jeans, motorcycle boots, a white undershirt, and a flannel long-sleeved shirt. I took my hair out of the ponytail, letting it spread across my shoulders in gentle waves before joining the rest of our little family out on the patio. Brenda and Zoe were watching the twins play in a fenced-in padded play area in the shade, while Roadkill and Possum were bringing food and plates out. The sun was low, another two hours to go in the day. Possum set a stack of plates on the table, then checked us out as we greeted her. \"No patching up?\"",
        "\"It was just a spar, Possum. I'm fine,\" I said.\n\n\"She pulled her punches, I think,\" Taz said. \"She could have hurt me if she wasn't. She's got fight in her, but what about when her pregnancy is farther along?\"\n\nLaura just smiled as she looked around. Taking an apple from the fruit bowl, she made sure no one was in the way of the throw and nodded to me. Laura tossed it along the edge of the patio, as I drew a knife from my boot and threw in one motion. The blade pierced the apple, sending it tumbling to the rock below. \"So she'll be fine,\" Taz said as he went to pick it up. He tossed the apple into the scrub, then cleaned the blade off with a paper towel before handing it back to me.\n\nI thanked him and put it back in its sheath as All-In brought me my steak. \"I know how Aces and Taz got their road names, but what's the deal with you and Blaster?\"\n\n\"Well, I don't like gambling,\" All-In said. \"When I was a hang-around at the clubhouse, I got roped into one of their all-night poker games. All I wanted to do was drink and dance with one of the girls, so the first hand I got, I went all-in. Same with the next three hands until I finally lost. In the meantime, I'd knocked four brothers out of the tournament in the first ten minutes.\"\n\nI laughed. \"And Blaster? Is he into explosives or something?\"\n\n\"Nope. Burrito Wednesday is his weakness. God help you if you're riding behind him when those make it to his ass, it's like a skunk crawled up his ass and died.\"\n\nI almost choked on my steak; these were my kind of people, and I missed hanging around them. \"I suppose it won't do any good to ask if I can hang out at the clubhouse,\" I said.\n\n\"It's still not safe,\" Aces said.\n\n\"Any idea when it will be,\" I asked Roadkill.\n\n\"I talked to Mongo last night,\" he said. \"Rori won't tell him what is going on, but they didn't come to Orlando this winter, and she won't talk about why. Three Tequila can't even get her to agree to a visit. Whatever is going on, it's not time to return.\"\n\nI looked over at Brent and Laura. \"Have you heard anything?\"\n\n\"We've been off the grid since we left Minnesota,\" Brent said. \"Our orders are to protect the twins, and if possible, you. Until Chase and Rori change those orders, we're not going anywhere.\"\n\nI let out a sigh; it was March 29th, and Greg had told me he would return on April 1st. I put my hand down on my belly, where his babies were growing, and sighed. I wasn't showing yet, but I wasn't happy with him. I'd sent a dozen letters, and none had come back to me.\n\nRoadkill and Possum were going riding with the guys, and I waved goodbye to them as they drove off. I'd claimed fatigue, pulling the pregnancy card when they doubted me. I packed the essentials for a trip into the saddlebags of my Harley, leaving a note behind asking them not to follow. I needed to see Greg when he got home. If no one knew I was coming, I'd get in and out quickly.\n\nI rode to Las Vegas, to a used car dealership that was still open. I paid cash for a 2013 Honda Odyssey minivan, with part of the deal being storage for my motorcycle for thirty days. I drove out of town with my hair under a bandana and a Baby on Board sticker on my back window.\n\nTwo days later, I arrived in Two Harbors just before dinnertime. I pulled up to the gate leading to the Arrowhead Resort, stopping and rolling the window down at the gate. The man who approached looked shocked to see me. \"Heather?\"\n\n\"Hi Lance. Is Greg Barks back?\"\n\n\"He arrived a few hours ago. Does anyone know you are coming?\"\n\nI shook my head. \"No, and I'd appreciate it if you didn't spoil the surprise.\" He nodded and opened the gate, and I drove in and parked by the Main House. There were a lot of cars around, and I could hear the sounds of a party from inside. I went up into the dining area, saying hello to people I knew but not stopping to chat.\n\nThe room got quiet when I came in. I saw Greg at the front of the room, sitting next to Chase, and talking to a huge man I didn't recognize. \"GREG,\" I yelled as I ran towards him.\n\nHe stood up and his eyes got real big just before I jumped into his arms. Wrapping my legs around him, I put my lips to his.\n\nI didn't get the kiss and hug I expected.\n\nHe pushed me away, and I let go as he set me back on the ground. \"Greg?\"\n\n\"I told you we were over, Heather. You need to move on.\"\n\nTears rolled down my face, and I didn't even notice the people gathering around or how the mood of the room changed. \"What?\"\n\n\"I broke up with you in that letter three months ago. You need to accept I've moved on and found someone else.\"\n\nMy heart was breaking, and my hand moved down to my belly. I looked down at it, and anger welled up in me. Looking up, I slapped him HARD across the face. \"YOU FUCKING BASTARD, YOU KNOCK ME UP AND SEND ME A FUCKING 'DEAR JANE' LETTER?\"\n\nHe looked at me in shock, sniffing for some reason. \"You're pregnant?\"\n\n\"Twins,\" I said as I started bawling.\n\nIt was then that the train wreck of my life decided I could take even more. \"YOU BITCH,\" a woman in a black dress yelled as she charged towards me from behind Greg's left side. \"HE'S MINE,\" she said as her fist swung towards my stomach.\n\nI turned, taking the blow in the hip instead of the belly. I heard her knuckles break on my hip bone and her scream of pain. Continuing the turn, I put the side of my foot into her face and knocked her to the ground. \"He was mine first,\" I said. \"But, you can have his lying ass.\"\n\nThe woman's face filled with rage and popping sounds filled the room. I watched in horror as she changed in front of me. Her body got longer, her face lengthened, and fur sprouted out of her skin as her dress shredded. It seemed like forever but was only a second or two before a huge grey wolf stood over the remains of her dress. The wolf snarled at me, white fangs dripping with saliva, before she gathered herself and sprang towards me.\n\nI stepped back with my right foot and put my left hand up as I drew my Glock from the holster in the small of my back. Not taking time to aim, I fired once from the hip at the wolf before taking another step back.\n\n\"NO,\" Gret yelled as he moved towards me. My first round hit the wolf in the shoulder, but Greg knocked my arm as he rushed me and the next went into the window. I tried to get a shot at him, but he picked me up and slammed me down sideways into a table. Pain exploded in my ribs as he landed on me, and I lost hold of my pistol.\n\nPandemonium reigned as Greg pushed off me before rushing back to the injured wolf. There was yelling, people were shifting into wolves and squaring off, and I was holding my side and crying. I rolled up to my hands and knees, looking for my pistol.\n\n\"SHE MUST DIE,\" a man yelled from behind a line of snarling wolves.\n\n\"LEAVE HER ALONE,\" Rori yelled back, a bunch of her friends around her.\n\n\"Friend,\" I heard a familiar voice say from behind me. I felt myself getting picked up and held to a broad chest. \"I've got you, Heather,\" Carson said as he ran out of the room with me. I could hear tables and glass breaking behind us, shouts in Russian and English, and snarls and howls of wolves. The room had erupted into violence with me as the cause. As we ran through Rori's allies, they blocked the exits to cut off the pursuers.\n\n\"What's happening,\" I asked as he carried me down the stairs. I was gritting my teeth, barely holding back a scream. That bastard must have broken my ribs when his fat ass landed on me. It hurt to breathe, and I felt pain with every step.\n\n\"You picked a hell of a time to show up,\" he said as we reached the entrance to the tunnels. We went inside the tunnel, and he closed the door behind us. \"We don't have much time. They'll block the roads out of here, and you're dead if they get to you.\"\n\n\"Who?\"\n\n\"The family of Greg's mate, the one you just shot.\" We reached another door and walked into a locker room. He started removing his clothes. \"Trust me no matter what you see, Heather. I need to get you out of here, and you're going to have to ride on my back. If we get enough of a head start, I can have my men meet me outside Pack lands and get you to my plane.\"\n\n\"You.... You're a...\" I couldn't talk because he was standing there naked in all his glory. He made Greg look puny in comparison, in all ways. He didn't reply to me. Instead, he shifted from his buff, naked self into an oversize wolf, nearer to the size of a small horse. He turned away from me, and I climbed onto his back and held on. Pushing through a double set of doggie doors, he took off for the woods as I clung to him in terror.\n\nHe was running as fast as he could through the woods, dodging trees and leaping deadfalls. Once I got comfortable on top of him, I started enjoying the ride. \"I'm riding on the back of a damn Werewolf,\" I thought to myself as my hands gripped his fur on his forechest. \"Is Greg a werewolf too?\" Carson's wolf chuffed, making me think that was a yes.\n\nWe ran for twenty minutes or so through the pines, aspens, and birch trees as I held tight to his body. I could hear the howls behind us getting closer and started to get nervous. Carson was breathing hard, and I'm sure the wolves chasing us weren't carrying a woman on their back. I thought we were in trouble until we broke into a clearing and climbed onto a two-lane paved road.\n\nA black SUV was approaching and stopped in front of us. Carson trotted to the door as a man came out and opened it. \"I've got you,\" he said as he lifted me off and set me in the back seat. Carson shifted, getting in next to me, and we were off again.\n\n\"That really happened,\" I said as I tried, unsuccessfully, to not look at the Adonis who was pulling on boxers next to me.\n\n\"I have to hand it to you, Heather. You sure can make an entrance.\" The SUV was speeding down the road, heading west. \"We can't get to my airplane; there are too many of their allies around.\"\n\n\"How do you know that?\" He hadn't said a thing, and we'd been running since he took me out of the room.\n\n\"Werewolves can mind link among Pack or Family; that allows us to communicate while we are wolves or humans without having to talk. Chase is my brother and he told me what was happening. The Russians and the Werewolf Council are furious that yet another human has learned our secret. Add in that you are pregnant with a mated male's pups, and they will kill you on sight. His Alphas is pushing for your immediate death, while Alpha Rori is arguing that you are pregnant with pups and should be kept alive until they are born.\"\n\n\"PUPS? I'm having PUPPIES?\" I felt a sharp pain and sank back in the seat. This couldn't be happening, he was a guy who loved me, and now I was having a litter?\n\n\"Your babies will be born and grow normally, but they will be like Greg, like me, like Chase and Rori. They will be werewolves, able to change form at will.\" He saw the look on my face. \"We're not animals. You know us, Heather, we're just like you but with a few more abilities.\"\n\n\"Oh, god...\" My hand went down to my babies, and I looked out the window at the trees flying by. Carson's driver was going over a hundred miles an hour as we fled the scene. I couldn't hold back the panic as the adrenaline dump from the conflict wore off. My breaths were short, and I was starting to feel light-headed.\n\nCarson pulled me into his lap, his strong arms holding me gently as he calmed me down. \"Just breathe, Heather. Focus on my heartbeat and breathe with me. In.\" I took a breath, but it hurt. \"Out. In as deep as you can, hold for a second, then breathe out.\" I did what he said, listening to his heart as he held my head against his broad chest. It took ten minutes to calm down, and then I fell asleep.\n\nWhen I woke, Carson was carrying me to a private jet. \"Where are we?\"\n\n\"Alexandria,\" he said. \"You look better now that you've had some sleep.\" He got me settled in the six-seater executive jet just before it started taxiing out. He held my hand as we took off, the plane turning towards the sunset as it climbed.\n\n\"Where are we going?\"\n\n\"My home, in the Cascade Range in Washington State. We're about forty miles east of Mount Ranier. It's beautiful there, and I promise you that I will keep you safe.\"\n\nI needed to go into hiding AGAIN? I shook my head no. \"Just let me go, I can go back to Possum and Roadkill and the babies and hide with them.\"\n\n\"You can't,\" he said. \"They won't be there. When you left, they had to assume you might be captured. They can't take the chance that you'll give up their location under torture. They will relocate immediately to protect the twins. It's how they are trained to respond in these situations.\"\n\n\"They are all werewolves?\"\n\n\"No. Possum and Roadkill are human, like you. Everyone else at Arrowhead is a werewolf.\"\n\nI let that sink in for a minute, looking out the window as I went through what I had learned. Carson's words from earlier hit me. \"Wait a minute. Earlier, you said that Rori wanted me protected so I could have my babies.\"\n\n\"Yes. All werewolf children are valued, and the fact their mother is human doesn't change that. Werewolves live long lives, but aren't fertile. One child in fifty years is the norm.\"\n\n\"What about AFTER I have my babies?\"\n\nHe sighed. \"I will never lie to you, Heather.\" Oh shit, it had to be bad news with that lead-in. \"Werewolf law would have you imprisoned until you deliver the babies, and then you would be killed. If Greg and his mate doesn't take responsibility for them, and they probably won't to keep the line of succession clear, they would be adopted out to be raised by another couple.\"\n\n\"Oh, HELL no,\" I said as I unbuckled my belt and started to get up.\n\n\"Heather, please. Sit down. We're at ten thousand feet; you're not getting off.\" He waited until I was buckled in again before continuing. \"Rori and Chase are fighting to change these laws, but it is not easy. The Packs are evenly split, and that mess we left behind will bring it all to the forefront. I am granting you asylum in my Pack, for your protection from those who want you dead NOW.\"\n\nFor some reason, I trusted him. \"And when the babies come?\"\n\n\"I will not allow anyone to harm you, Heather. They will need to grow up among their kind, but you will be there with them. You are mine to protect, and I swear on my life that it will be so.\"\n\nI looked into his eyes, he was serious. \"Why? Why would you risk your life over mine?\"\n\n\"There's something about you that resonates with my wolf and my soul, Heather. Let's face it, your life has been one kick in the teeth after another for months, yet you find ways to rise above it. I admire your courage and determination.\" He smiled broadly. \"Plus, you're one badass chick, and I need one around me now that my sister has her own Pack in Canada.\"\n\n\"Oh come ON,\" I said as I blushed. \"I got my ass kicked.\"\n\n\"I'm not kidding. Tatiana Vasiliev comes from a long line of strong warriors. She jumped you, and you not only defended yourself, but you knocked her down in front of everyone. To further her family's embarrassment, she shifted to attack a human and got herself shot. Her mate had to save her from your next shot. Losing to you is a bigger humiliation than finding out her mate was in love with a human and got her pregnant.\"\n\n\"I believed him when he told me he loved me,\" I said.\n\n\"We tried to warn him. For a werewolf, finding your mate is an overwhelming experience. He might even have been in love with you, but human love can't compete with the mating pull.\"\n\nI looked out the window, understanding what he was saying. He would protect me, but there was never a chance for us to be together. He'd friendzoned me.\n\nI leaned the seat back and closed my eyes, my hands clasped together over my stomach. My hip hurt almost as much as my ribs, but it was worth it. If she had connected, she might have harmed my babies.\n\nThey were the only people who mattered in my life now. I was done with men. I was done with Love. And I sure as hell was done with Greg; Tatiana could have him.\n\nI fell asleep to the drone of the engines.\n\nTHE END\n\nComing Next: Book Three... Claiming Treasure "
    ],
    "authorname": "partwolf",
    "tags": [
        "love",
        "mates",
        "motorcycle",
        "pack",
        "werewolf",
        "drama",
        "werewolf romance",
        "supernatural",
        "supernatural drama",
        "supernatural romance"
    ],
    "category": "NonHuman",
    "url": "https://www.literotica.com/s/buried-treasure-ch-96-101"
}
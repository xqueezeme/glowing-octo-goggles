{
    "title": "Hermaphrodite",
    "pages": [
        "Luke and Janet had been friends since Janet moved in next-door nine years ago. She had been the only one to show up at his tenth birthday party. Back then, Luke had been short, fat, and wore enough silver in his mouth to plate the bumper on an old Buick.\n\nNow that had all changed, Luke had grown taller, the fat had melted away as he became more active with sports, and his teeth were straight and pearly white. The only thing that had remained the same was his friendship with Janet.\n\nShe was home schooled and didn't mingle much. This had always confused Luke. While Janet wasn't a raving beauty by any means, she was the typical cute girl next-door type. Luke paused in dealing the cards he held and thought about that. He had never seen Janet in anything besides baggy clothes. She had always refused his invitations to use his family's pool.\n\nLooking across the coffee table at Janet, he asked, \"Why don't you ever come over to go swimming when I ask you?\"\n\n\"I don't swim for one and I don't own a bathing suit for another. Anyway, my mom wouldn't allow it,\" Janet replied as she picked up her cards and looked at Luke expectantly.\n\nWith a little jerk, Luke continued to deal the cards. \"I wonder when the power will come back on?\"\n\n\"When the power company fixes the problems the storm and lightning caused,\" Janet said with a shake of her head and then grinned as she added, \"Duh! You don't like losing at cards by candlelight? It's kind of romantic.\"\n\nLuke finished dealing the cards and ignoring her barbs, he asked, \"Why do you always wear baggy clothes?\"\n\nJanet studied Luke's face for a moment before she replied, \"Because I'm fat, ugly, with three boobs, and a dick that hangs to my knee.\"\n\nLuke stared at her with his mouth hanging open. He had never heard her talk that way before. Foul language wasn't her usual style.\n\nJanet laughed at his expression of shock and then sorted her cards. Before he had even looked at his, she laid her hand down and said, \"Gin.\"\n\nLuke's eyes went from her face to the cards and back again. \"Shit, that's three hands in a row,\" he whispered.\n\nJanet laughed again as she finished adding up her score from his cards. \"That's also game.\" When Luke gave her a sour look, she added, \"Now who's your mama? The winner and still undefeated champion of the world.\" She raised her hands and pumped her arms up and down as she rocked back and forth and from side to side.\n\nLuke glanced at the dark front windows. \"If it wasn't raining so hard, I'd kick you skinny little ass out of here.\"\n\n\"You and whose army?\"\n\n\"Who are you going to harass when I leave for college?\" Luke asked in return.\n\n\"Who says I'm going to let you go off to that big school by yourself? Those college girls would chew you up and spit you out without me there to protect you.\"\n\nLuke looked at Janet sharply. \"You're kidding, right?\"\n\n\"Not a bit. You know you don't know anything about girls. Hell, you've never even made a pass at me.\"\n\n\"I'm not talking about the girls, I'm talking about you going to college,\" Luke said and then did a double take. \"Make a pass at you? What the hell does that mean? You're my best friend, why would I do that. Anyway, sometimes I'm not all that sure you are a girl.\"\n\nJanet grinned and then said, \"I took my finals three weeks ago and my SAT test last week. I should know how I did by Friday. I've already been accepted if my scores meet the requirements and I'm pretty sure they do.\"\n\n\"Us in college together. Oh shit, the world ain't ready for this,\" Luke said and then paused. \"Hell, I ain't ready for this. With my luck, we'll end up roommates.\" He groaned and whispered, \"There goes my love life for another four years.\"\n\n\"What love life, you dip shit. You dated the biggest slut in school twice and never got past second base.\"\n\n\"Cindy was not a slut,\" Luke said hotly.\n\n\"That's not what the football, baseball, and basketball teams said,\" Janet shot back cattily.\n\n\"You're just jealous because I've had a few dates.\"\n\n\"And you're still a virgin.\"\n\n\"So are you,\" Luke said, \"So don't get all high and mighty with me.\"\n\nJanet laughed so hard she fell over backwards to sprawl on the floor.\n\n\"You are, right?\" Luke asked quickly.\n\nAfter a moment, Janet whispered, \"You'll never know one way or the other.\"\n\n\"Hey, you'd tell me if you ever did, you know, do it. We are best friends after all and have been forever.\"\n\n\"Why would I want to tell you? You have the biggest mouth of anyone I know. You would accidentally tell my mom and I'd end up locked in a closet even tighter than I am now, for God's sake.\"\n\n\"I've never understood why your mom is so strict. You have more rules and less freedom than anyone in jail or prison.\"\n\n\"She has her reasons,\" Janet said.\n\n\"Why do you put up with it? How do you put up with it? For that matter, how did you get a pardon to go to college?\"\n\n\"I have to be on my own sooner or later. I have to learn to deal with being around other people, so we talked about it and college seems the right time. I want to go and she really couldn't stop me since I have enough scholarships to cover my expenses and tuition.\"\n\nLuke looked at Janet thoughtfully for a moment and then said, \"Deal with other people? What the heck am I if not other people? You deal with me just fine. Is there something wrong that you haven't told me about. I know about your dad running off and you spending a lot of time in hospitals when you were young. Does it have something to do with that?\"\n\nJanet looked at Luke for a long time. She chewed on her lower lip as she thought how to answer his questions. She had avoided questions all her life; she was good at it. She had to be. Secrets had to be protected for her sake and her moms but she so wanted to talk to someone else. Someone who wasn't her mom or a doctor, someone who was normal and might understand.\n\nFinally, Janet sighed deeply and said, \"It's a medical problem and that's all I can say.\"\n\n\"What do you mean, that's all you can say. Is it a contagious disease or something that you're going to die from? Hey, I need to know these things if I'm going to share a room with you at college.\"\n\nJanet laughed. \"We won't be sharing a dorm room. I'm living in an apartment off campus.\"\n\n\"Freshmen have to live in the dorms for one semester. It says so in the handbook.\"\n\n\"Not if you have medical problems,\" Janet said with a big grin.\n\nLuke eyed his friend for a second and then grinned. \"You are smarter than you look. Talk about having things planned out well in advance. An off campus apartment and all the freedom known to man. Party time.\"\n\nJanet grinned back and then shook her head. \"Study time, not party time, and the medical problems are real enough for the college admin to go along with my request.\"<br >\n\n\"Now you really have me concerned and even more curious than normal.\"\n\n\"There is nothing to be concerned about; I'm as healthy as a horse. As for your curiosity, I thought we had that all taken care of way back when we met. No pressure on questions, remember.\"\n\n\"Yeah but I like you a lot now. Back then you were just the girl next door.\"\n\n\"How much do you like me?\" Janet asked softly.\n\nLuke frowned and nodded. \"Yeah, I like you enough not to pressure you,\" he said in an equally soft voice.\n\n\"No,\" Janet said, \"How much do you like me? It was a question all it's own.\"\n\nLuke looked confused for a second and then said, \"Well, you are my best friend, the sister I never had, and my loving confidant all rolled into one.\"\n\n\"Then I won't scare you away by laying my problems on you?\"\n\n\"You could never do that. I think I could understand anything.... The three boobs would be interesting,\" Luke said holding out his hands and flexing the fingers as he leaned forward and made sucking sounds with his head between his hands.\n\nJanet laughed and shook her head. \"How about the dick down to my knee?\" Janet asked in a whisper.\n\nLuke's eyes got wide. \"There's no way you are a guy. Your cloths might be baggy but I've caught a glimpse here and there and a feel or two when we've wrestled. I know you have at least two boobs and nice high round ones at that.\"\n\nJanet felt herself blush.\n\n\"See, I told you so,\" Luke said with a smile.\n\n\"But that has nothing to do with whether I have a dick or not.\"\n\n\"Dicks and boobs are opposites, like magnetic poles.\" Luke pointed out. \"Well, there are fat guys with boobs but not boobs like yours. Boobs like yours go with a, uh.... You know what I mean.\"\n\n\"With a pussy?\" Janet filled in and smiled as Luke blushed.\n\nThen she asked, \"How come you can say boobs, dick, and butt but not pussy?\"\n\nLuke looked at her and then stammered, \"It's... well.... I.... Uh.... Guys.... Personal.\" Then he blinked and asked, \"When did I say butt?\"\n\nJanet grinned and replied, \"I was just seeing if you were paying attention.\"\n\n\"Hell yes I'm paying attention, confused attention but attention none the less.\"\n\nJanet laughed and sprawled out on her back on the floor. \"I thought confused was normal for you.\"\n\nLuke sighed as he stood up. He moved the coffee table out of the way, being careful with the candle on it, and lay down on the floor beside his friend. He propped his head up with his hand as he rolled onto his side facing her. \"It's only the norm around you. No one else confuses me like you do.\"\n\n\"It's how I avoid answering questions,\" Janet confessed.\n\n\"Just my questions or everyone's?\"\n\n\"Everyone's except for my mom's, the doctors, and some of the psychiatrist's non-personal questions.\"\n\n\"I thought psychiatrists were supposed to ask personal questions?\" Luke said and then frowned. \"Head problems on top of physical ones?\"\n\n\"They think the physical problems will cause me to have head problems.\"\n\nLuke chuckled and said flippantly, \"Yeah, having a dick to the knee would cause head problems for a girl.\"\n\nThat is when Janet dropped the bomb. \"How about having a pussy and a dick?\"\n\nLuke blinked twice and then laughed for a second. When Janet didn't laugh with him, he stopped suddenly and said, \"You're not serious?\"\n\n\"As a heart attack,\" Janet whispered.\n\nLuke's mouth fell open as he stared at his best friend.\n\nJanet shivered under those bright blue eyes and wondered if she had done the right thing in telling him. \"No one needs to know this besides us. If they do, I'll tell them. I hope you understand that.\"\n\nLuke gave a start at her words and then nodded as he closed his mouth. He looked thoughtful for a moment and then grinned. \"You could give a whole new meaning to someone telling you to go fuck yourself.\"\n\nNow it was Janet's turn to blink and hold her mouth open. A second or so later, she whispered, \"I can't believe you just said that.\"\n\n\"I'm nervous and that was the first thing that popped into my head, sorry.\"\n\nJanet chuckled and nodded. \"It is confusing and a hard thing to wrap your mind around isn't it. I've had all my life to deal with it and I still have problems. For me it's not having both sets of equipment that presents a problem but the fact that I'm so different from everyone else.\"\n\n\"Uh, do both sets work?\" Luke asked and then shook his head. \"That's a silly question I shouldn't have asked.\"\n\n\"Yes, both sets work and yes, I'm a virgin both ways,\" Janet whispered and then giggled. \"God knows I've been tested enough. When I was a baby, the doctors studied and tested, and x-rayed me almost to death. Mom finally put her foot down and brought me home.\"\n\n\"Later, when I was older, they wanted to remove one set but they disagreed on which set. My mom told them to forget it, that it wasn't up to them, that I could and would decide what I wanted done and when.\"\n\n\"I've always kind of not liked your mom for the way she kept you locked up but....\" Luke said softly.\n\n\"She's had to deal with some shit, believe me and a lot of it from me. I had a hard time believing that people could or would be as mean as she said. Just to see if she was right, I told a bunch of my friends at school. That's when we had to move and ended up here.\"\n\n\"What about your dad? Did he leave...? Uh, never mind, that was a dumb question.\"\n\n\"Dad leaving had nothing to do with me or mom. Back then I wondered but since then I figured out that he had a problem keeping his dick in his pants and mom tossed him out.\"\n\nLuke nodded. \"I've seen that happen more than once.\"\n\nJanet sighed softly and whispered, \"You are the first person I've told any of this to besides doctors.\"\n\n\"I can keep a secret better than you think I can.\"\n\n\"I hope so for my sake and more so for moms. I'm leaving for college but she has to stay here. I still can't believe people can be so mean to other people who are different. I know it but I can't believe it.\"\n\n\"Yeah, people are crazy and kids are the worse. In school, just wearing glasses was reason enough for name calling. My braces got me tagged metal mouth and a bunch of other things. Being fat didn't help any either.\"\n\nJanet grinned and rolled over on her side to face Luke. \"Yeah, but look at you now.\"\n\nLuke blushed under her leering grin on the outside but smiled on the inside. His eyes were on her but suddenly they darted to her full lips as he wondered for the first time what it would be like to kiss her. Then a weird thought darted across his mind.\n\n\"Uh, if you have both, uh, sets, then how do you know you are a girl?\"\n\n\"Now we get to the meat of the question and why I had to see a shrink,\" Janet said with a laugh. \"Since mom shows the outward characteristics of a female, she figured I would also so she started me out as a girl.\"\n\n\"Whoa, wait, back up. Your mom has both sets like you?\"\n\n\"Oh yeah, I forgot that little detail. I'm like fourth generation hermaphrodite.\"\n\n\"Her what?\" Luke asked with big eyes.\n\n\"Hermaphrodite. A person with both female and male genitalia.\" Janet explained.\n\n\"They have a name for it and everything,\" Luke said with a surprised look on his face.\n\n\"What? Did you think I was making this shit up?\"\n\nLuke shook his head quickly. \"No! Not at all. I was just surprised is all.\"\n\nJanet studied his face for a few minutes and then said, \"Like I started to say, mom started me off as a girl and when my boobs started to grow when I was around twelve, we knew she had made the right decision. All our generations have been female as a matter of fact.\"\n\nLuke blushed a deep red as he whispered, \"Maybe you just have a really big clit.\"\n\nJanet laughed and rolled over on her back. \"Nope. For one, a girl doesn't pee through her clit and two, after all the tests even the doctors agree that it is a dick.\"\n\nLuke shook his head as if he was trying to clear it and whispered, \"Part of me still thinks you're pulling my leg.\"\n\nJanet looked at him sharply and replied, \"I ain't showing you, if that's what you're fishing for.\"\n\nLuke blushed even deeper than before and Janet laughed again. \"You were, weren't you?\"\n\nLuke didn't reply. He rolled over on his back and stared at the ceiling. \"Hard to wrap your mind around, ain't the words for it,\" he whispered a moment later.\n\nJanet grinned and reached over to take his hand. She laced her fingers in his for a few moments and then sighed. \"It took me a long time.\"\n\nWhen he didn't reply, she let go of his fingers and took a hold of his hand. Slowly she moved it over in front of her baggy shorts and then sat it down on top of her dick. His hand jerk up and then settled back to where she had put it. His fingers moved for a moment and then he jerked his hand away.\n\n\"Uh... yeah,\" he said and then looked over at her. \"That's a dick alright or something very like one. I got a feel of Cindy down there through her skirt and there wasn't anything like that.\"\n\nJanet nodded and then they both looked back at the ceiling. Time passed in silence.\n\nThen Luke broke it by asking, \"And you're sure about the... uh... other part?\"\n\nJanet looked over at him and sighed. \"The word is pussy or rather vagina and yes, there is one between my dick and my asshole.\"\n\nLuke groaned and sat up. He looked off across the semi dark room and whispered, \"I'm messing this all up.\"\n\nJanet sighed and sat up. \"No, I should have kept my big mouth shut and avoided questions as usual.\"\n\nLuke glanced at her out of the corner of his eye and grinned. \"Your mouth isn't all that big.\"\n\n\"As compared to what or whom?\" Janet asked with a grin of her own.\n\n\"Okay, now that I've made an ass out of myself several times, what's next?\" Luke asked as he looked around at his best friend.\n\nJanet shrugged. \"I hadn't really thought much about it past the need to tell someone not a doctor or my mother. I'm just hoping it doesn't screw up our friendship.\"\n\nLuke grinned and shook his head. \"Other than my curiosity eating me up and a bunch of stupid questions floating through my brain, I don't think much has changed. Well, except for the fact that you have a dick nearly as big as mine.\"\n\nJanet giggled. \"You haven't seen it hard yet.\"\n\nLuke's mouth dropped open. He closed it, opened it again, and then closed it. \"You ain't seen mine hard so we're even.\"\n\nJanet laughed and changed the subject. \"So what stupid questions do you have? I've opened this can of worms so....\"\n\n\"Uh, yeah, you had to ask,\" he said quickly.\n\n\"Hey, curiosity is a dangerous thing.\"\n\nLuke laughed and laid back on the floor. \"Which do you masturbate with?\" he asked and then groaned. \"Tell me I didn't ask that.\"\n\nJanet groaned and lay back as well. \"Yeah you did and the answer is not simple or maybe the simple answer is both.\"\n\nLuke was quiet for a moment and then asked, \"How does that work exactly?\"\n\nJanet laughed. \"Lets just say it takes both hands to get it right. One on the shaft and head and one at this little spot underneath the base that drives me up a wall.\"\n\n\"Little spot at the base?\" Luke whispered and then glanced her way for a second. \"Maybe you do have a clit after all. It's just buried under your dick.\"\n\nJanet felt her face grow warm. She hadn't blushed in a long time. Too many doctors poking and prodding had got her past that a long time ago. With Luke she felt different but not really embarrassed. \"I've been meaning to ask one of the specialists about that but I haven't been back to see them.\"\n\n\"They would just want to do more tests,\" Luke said and then looked at Janet. \"Do you... uh, what's the word, ejaculate when you do come?\"\n\nJanet shook her head. \"No, but there is a wet surge in my vagina. It can be rather messy.\"\n\nLuke chuckled. \"Messy is when you shoot yourself in the face.\"\n\nJanet laughed and looked at Luke hard. \"That really happened?\"\n\nHe nodded and grinned. \"Just once. I learned quickly.\"\n\nJanet looked thoughtful for a moment and then asked, \"Is this how guys talk between themselves?\"\n\n\"Hell no. No guy in his right mind would ever tell another guy he shot himself in the face. They, we talk about all the girls we've banged and how far we got with who. It's all lies and we all know it but it's one-upmanship to the max.\"\n\nJanet shook her head and asked, \"Then why would you tell me?\"\n\n\"You're a girl and to you it would be funny, I guess. That and you gave me a big secret, so I gave you one back.\"\n\nJanet sighed and whispered, \"Thank you for the secret and for being my friend.\"\n\n\"Hey, you trusted me, so I trust you. That's what friends are for.\"\n\nJanet rolled over on her side facing Luke and propped her head on her hand. She smiled and whispered, \"So far so good.\"\n\nLuke rolled over facing her and found himself almost against her. His knees were actually touching her shins below her knees. He propped his head on his hand and grinned. Their faces were inches apart. He thought about backing up but was very distracted to say the least when Janet leaned forward and brushed her lips against his.\n\nHe blinked twice and asked in a soft whisper, \"What the heck was that?\"\n\nJanet laughed. \"As close to a kiss as you'll ever get from me.\"",
        "\"Oh yeah!\" he said and the next thing she knew, she was flat on her back with him kissing her.\n\nHer eyes were wide and she couldn't catch her breath for a moment. It was her first kiss and she was totally unprepared for what it felt like. She moaned softly and wrapped her arms around his neck as she tried to return the kiss. She had no idea what she was doing. The only thing she had ever kissed on the lips was her teddy bear and this was a world of difference.\n\nLuke sensed that something was wrong and broke the kiss. He started to roll back over but Janet held onto his neck tightly. \"I... I shouldn't have done that.\"\n\nJanet giggled. \"If that was the case, I'd be stomping your ass right now.\"\n\n\"But....\" He started to say but Janet laughed and shook her head wildly.\n\nWhen her head stopped moving, she grinned and whispered, \"The only things I've ever kissed are my mom's cheek, my arm, and my teddy bear.\"\n\nLuke's eyes grew wide. \"I had never considered....\"\n\n\"Where did you learn to kiss?\" Janet asked.\n\n\"Uh, it just seemed to come naturally. One minute I was looking into Cindy's eyes and then I was kissing her.\"\n\nJanet nodded. \"You kind of learned as you went,\" she said and then grinned. \"Roll over so I can kiss you. Maybe that will work better.\"\n\nLuke grinned and rolled them both over. Janet ended up on top of him. \"You won't get any complaints out of me,\" he whispered as they rolled.\n\nJanet grinned down at him and shook her head. \"You are so easy. I'm definitely going to have to protect you at college. Those girls will eat you alive.\"\n\nLuke laughed. \"They won't get any complaints out of me, either.\"\n\nJanet frowned and leaned down to bush her lips against his and then experimented with kissing as he kissed her back. After a few minutes, she got the hang of it and lifted her head. \"But who says I won't be chewing your ass out about it every chance I get,\" she whispered and then went back to kissing him.\n\nHis eyes were wide for a moment and then he closed them and kissed her with growing passion. Janet whimpered softly and returned the kiss. After a while her head was spinning and she had to come up for air in more ways than one. Her legs were now spread wide across his hips and she could feel her hard dick rubbing next to his.\n\nShe groaned, broke the kiss, and sat up quickly. She could suddenly feel the heat in her vagina and the sensitive spot at the base of her dick was now pressed to his ridged shaft. She groaned again and started to lean forward. That just put more pressure on the spot. She sat back up quickly.\n\nLuke was breathing hard and looking into her eyes. After a moment, he took a deep breath and blew it out slowly. After that, he whispered, \"Wow! Cindy has nothing on you at all.\"\n\nJanet giggled. \"I had a good teacher.\"\n\n\"Teacher hell, you're a natural. Is there smoke coming out of my ears?\"\n\nJanet laughed and shook her head. \"I'm surprised there isn't steam coming out from under these shorts.\"\n\nLuke wiggled his hips and grinned up at her. \"Something is hot as hell down there.\"\n\n\"Maybe you should have had Cindy sit on your lap so you'd have something to compare it to,\" Janet said cattily.\n\n\"Hey, now!\" Luke said and then grinned. \"I won't make that mistake again.\"\n\n\"Going out with Cindy or talking about her?\" Janet asked with lifted eyebrows.\n\n\"Both,\" Luke said quickly.\n\nJanet grinned as she whispered, \"Good boy,\" and leaned forward to place her hands on his chest. The heat lessened from her vagina but the sensitive spot tingled from the pressure. She wondered what this would feel like without the shorts and jeans in the way. Then she shivered hard and sat up straight.\n\nLuke was watching her closely as she leaned forward and then leaned back. The heat on his dick lessened and then got even hotter as she sat up straight. \"That... uh... heat is your vagina, right?\"\n\nShe nodded and chewed on her bottom lip for a moment. Thinking about sitting on Luke's dick naked had her on the ragged edge of coming.\n\n\"Are you alright?\" He asked quickly.\n\nJanet nodded again and groaned softly as her eyes closed. Her hips started to tremble and then she was coming and coming hard. She let out a long drawn out groaning moan as her hips jerked and rocked against his hard dick.\n\n\"Are you....\" Luke started to ask with wide eyes and then groaned, as the heat on his dick got even hotter. \"Oh hell yeah, you are,\" he whispered a few seconds later.\n\n*****\n\nJanet groaned and opened her eyes. She was lying on top of Luke, his arms wrapped around her. When he heard the groan he asked, \"Are you okay?\"\n\nJanet sighed and nodded. \"I'm great.\"\n\nLuke chuckled. \"Yeah, you are.\"\n\n\"I... I can't believe I did that,\" she whispered as much to herself as to him.\n\n\"Uh, I can't either but then again....\"\n\nJanet pushed up with her arms and looked into his eyes. \"What do you mean by that?\"\n\n\"Uh, talking to someone about the double equipment thing, your first kiss, and I'm assuming the first time you've sat on a guys lap. Kind of much for a short span of time.\"\n\n\"Yeah, it was as a matter of fact,\" Janet said thoughtfully as she lay back down on top of him. Then she giggled softly. \"I sure made a mess in these shorts.\"\n\n\"Want me to give you a hand getting them off?\" Luke asked in a whisper.\n\nJanet pushed up and looked at him again. He was grinning at her. \"What if I said yes,\" she whispered calling his bluff.\n\n\"I... uh... we... uh... you....\" he said quickly.\n\nWith a laugh, Janet sat up straddling his hips again. \"You're so easy.\"\n\nLuke nodded his head and grinned up at her. \"If you lost your virginity with me and I lost mine with you, at least we'd both know the full stories.\"\n\nJanet cocked her head to the side and then shook it. \"That is some twisted logic you have there.\"\n\nLuke laughed and said, \"You can't fault a guy for trying.\"\n\nJanet shivered and then gave him a leering grin. \"But I have two virginities to lose and I do mean butt.\"\n\nLuke's eyes grew wide and he stammered again. Janet laughed and leaned forward to kiss him. The kiss was gentle and tender, which seemed to make it even hotter than the last one with all its passion. Not to mention Luke's hands roaming over her back and butt.\n\nJanet groaned into his mouth and then broke the kiss. She looked into his eyes and smiled. \"We should have done this a long time ago.\"\n\nLuke took a deep slow breath and blew it out noisily. \"I know there is smoke coming out of my ears now. You're frying my brain.\"\n\n\"It wouldn't take much to fry that pea brain of yours.\"\n\nLuke grinned. \"I wasn't the one who came in their shorts.\"\n\nJanet groaned softly. \"One point for you on that exchange,\" she said as she shifted her hips from side to side. The heat on his dick was increasing as she did.\n\n\"Want to try for seconds,\" he asked as the heat went up.\n\n\"I want to try it skin on skin but that ain't going to happen.\"\n\nLuke's eyes were wide as his mouth worked and nothing came out. He was way out there past stammering.\n\nJanet grinned and whispered, \"One point for me.\"\n\nLuke finally found his voice and said, \"That was more of a triple score.\"\n\n\"Here's another two pointer,\" she said as she took his hands and slipped them under her t-shirt.\n\nLuke's mouth dropped open as he felt the warm skin of her stomach and lower ribs. \"I... I... I...\" He stammered as she moved his hands higher. Then they both groaned softly as his fingertips brushed the lower curve of her breasts.\n\nShe stopped his hands and then groaned softly as she let go of them. They didn't move for a long moment and then she leaned forward pressing her breasts to his palms. She shivered hard and when whimpered loudly as he gave her breasts a light squeeze.\n\nSuddenly, he sat straight up, slipped his arms around her, and kissed her passionately. His hands were now roaming over the warm silky skin of her back. She was shaking from his touch and the kiss. The sensitive spot above her vagina was throbbing where it pressed against the base of his shaft. She locked her legs around his hips and squeezed.\n\nThat is all it took to set her off; she was coming hard again. Her hips jerked and rocked against him, which drove the orgasm even higher. Somewhere in the back of her mind she felt Luke break the kiss and whisper, \"Holy shit!\" That same thought was also roaming around in the back of her mind but her mouth wouldn't work.\n\n*****\n\nJanet sighed and arched her back. Luke's hands roaming over her bare back under her t-shirt felt so good. Her arms were around his neck and her forehead rested on the front of his shoulder. With a shiver, she sat up straight. \"That one snuck up on me with a club.\"\n\nLuke blushed a deep red and she gave him a funny look. A moment later she giggled. \"You got off too.\"\n\nWith a groan, Luke nodded his head. \"That's... uh... never happened before. Not with... uh... out my hand being involved.\"\n\nJanet shivered and whispered, \"I've got off twice and you got off once and we're still virgins.\"\n\nLuke nodded and then shivered hard as his hands moved up and down her back. His hands ended up on both sides of her waist. He had a crooked grin on his face as his hands slid upwards. The heels of his hands ended up on the sides of her breasts. When Janet whimpered softly, he moved his hands to her back.\n\nShe groaned softly as she moved her hands down to the front of his shirt. She took her time as she unbuttoned it. Neither of them spoke until she tried to take the shirt off of him.\n\n\"Uh... what are you doing?\" Luke asked as he helped her get the shirt off.\n\n\"I'm... taking your shirt off.\"\n\n\"Yeah.... I... uh... see that but....\"\n\nJanet tossed the shirt aside and then reached down to pull her t-shirt up, rolling it as she went. Luke's eyes grew wide and his mouth worked but nothing came out. Janet grinned as the t-shirt ended up just under her breasts. She took a deep breath and pulled it up over her breasts. Luke's eyes flew to her breasts and they both groaned.\n\nAs Janet started to take the t-shirt off, Luke looked up at her face and whispered, \"I... uh... you... uh... we....\" His eyes dropped back to her breasts and he licked his lips. \"They are beautiful.\"\n\nJanet shivered as she tossed the t-shirt over on top of his shirt. Luke still had his hands on her back. Her hands went to his shoulders and then she leaned forward until her breasts touched his chest. They both groaned softly. Janet could feel her nipples tingling as they rubbed on his chest from both their breathing. She leaned over harder against him and then they were kissing.\n\nBoth of them were whimpering and moaning as the kiss shot straight up to pure passion. His hands rubbing her back and her breasts rubbing on his chest had Janet on overload very quickly. Her nipples tingled in an antsy, itchy sort of way. Ever so often a jolt of pleasure seemed to jump from her nipples to her sex.\n\nAn orgasm was building but slowly compared to the first two. She sighed, broke the kiss, and laid her head on his shoulder. She took a deep breath and let it out slowly. In one way it calmed her and in another it gave her a bigger jolt as her nipples rubbed on his chest.\n\nLuke squeezed her tightly and sighed. \"I hope the power never comes on.\"\n\nJanet chuckled and shivered. Her nipples were rubbing as she did. \"One dark and stormy night,\" she whispered.\n\n\"Lucy sat in Charlie Browns lap for the first time,\" Luke added with a grin.\n\n\"And they both made a mess in their pants.\"\n\nLuke groaned. \"Yeah but we need to keep that a secret. I'd never live that down.\"\n\nJanet chuckled, lifted her head, and moved her upper body back to look into his eyes. His eyes were on hers at first and then they would flick down to her breasts and back up. About the third time he eyed her breasts, he licked his lips and Janet groaned at the thought of him sucking on them.\n\n\"Uh, yeah,\" he whispered, \"That's probably not a good idea.\"\n\nJanet shivered hard. \"I've gotten off twice and you, once, so which good idea are you talking about?\"\n\nLuke's eyes moved between her face and her breasts. \"I... uh... those....\" He muttered.\n\nJanet groaned again and shivered. \"What's the worse that could happen beside you having a dead friend sitting in your lap?\"\n\n\"You having a third mess in your pants,\" Luke replied with a grin.\n\n\"Or you having to explain to my mother and the cops how you murdered your best friend.\"\n\n\"Was it murder or was it suicide by lust?\" Luke asked and then licked his lips with a flourish of his tongue.\n\nJanet laughed. \"Can nipples explode?\"\n\n\"You're asking the guy who never got to second base?\"\n\nJanet shivered. \"The score is two to one and the top is off, so.... You're pretty much at second base now.\" She put both hands on the back of his neck and leaned back. As her arms straightened, they pressed her breasts together and pushed them up.\n\nLuke eyed her breasts and sighed. \"Do you see the problem with this position?\" He asked as he stuck out his tongue and leaned toward her breasts. As his head and upper body moved forward, she moved backwards.\n\nJanet giggled. \"So who said, I know what I'm doing? Other than doctors and mom, you're the only other person who has seen me with my shirt off.\"\n\n\"And such an honor it is, believe me,\" Luke whispered.\n\nJanet groaned deeply and wiggled from side to side on her best friends lap. \"I, uh, know your dad is out of town for a few days but when is your mother due home?\"\n\nLuke straightened his back, twisted around, and looked at the clock above the mantle. It was battery operated. \"We have like four hours, maybe a little more if traffic lights are screwed up.\" Turning to look at Janet he asked, \"Uh, why do you ask?\"\n\n\"I... uh... need a shower and some clean shorts.\"\n\nLuke grinned. \"I have clean shorts and the shower in my parents room is big enough for two.\"\n\nJanet looked at her best friend though her eyelashes and smiled. \"Are you offering to wash my back?\"\n\n\"And anything else you want washed,\" Luke replied quickly.\n\n\"I'll just bet,\" Janet said with a laugh as she leaned forward and kissed Luke deeply.\n\n*****\n\nJanet felt oddly excited as Luke led her by the hand up the stairs. Walking around naked was something she had experiment with while her mother was at work but never with someone else around. Just being topless with Luke and moving was much more exciting than being nude had ever been alone. The thought of being completely naked around Luke made her stumble on a step.\n\n\"Are you alright?\" He asked as he held her hand tighter.\n\n\"Yes and no,\" Janet said quickly.\n\nThey had reached the top of the stairs. Luke stopped and looked at his friend questioningly. Janet shivered under his gaze. Doctors and nurses had looked at her in much more intimate detail but his eyes seemed to burn right into her mind. When his eyes dropped to her hard nipples, she groaned deeply.\n\n\"Are you alright?\" He asked again. Janet nodded and then shook her head. With concern on his face and in his voice, he said, \"Look, you go get in the shower and I'll go find you a pair of shorts. I think we're moving way too fast.\"\n\nJanet nodded as a big shiver ran up and down her back. She took a step forward and then another but she had to stop as her arm extended backwards. She still had a hold on Luke's hand. With a soft groan, she gave his arm a pull. \"Come on. We've been this far together. It's too late to back up now.\"\n\n\"But...\" Luke said and then shivered as he followed her down the hall toward his parent's bedroom. He stopped them at the dark doorway and said, \"Uh, we forgot the candle.\"\n\n\"We?\" Janet asked in return.\n\n\"Uh, yeah,\" Luke said as he hurried off down the hallway the way they had came from. Instead of going down the stairs, he turned left into the second doorway. A few moments later, he reappeared with a small battery powered lantern in his hand.\n\n\"I, uh, keep this for emergencies,\" he said as he hurried back to where Janet stood.\n\n*****\n\nThe shower was big and had a glass front and door. Luke was getting a set of towels out of the linen closet as she opened the door. The magnetic lock clicked as she did. She took a deep breath and undid the snap on her shorts. A quick look over her shoulder showed Luke standing across the room with towels in his hand looking at her.\n\nShe shivered as she lowered the zipper, her eyes still in his direction. \"Go... go ahead, I'll give you some space,\" he said softly and then groaned deeply as she let go of the shorts and they hit the floor. She didn't have underwear on and her ass looked fabulous.\n\nHis eyes ran up and down her body quickly and then settled on her ass. \"Gorgeous, just gorgeous,\" he whispered.\n\nJanet shivered hard and step forward into the shower. Her vagina was clenched up tight with his eyes on her ass. \"Your... your turn,\" she said without turning around. Her head still turned to look in his direction.\n\nLuke walked over and hung the two towels on the bar on the outside of the shower door. He took a deep breath and undid the snap on the front of his jeans. He took another deep breath and lowered the zipper. He had to wiggle his hips, as his jeans were tighter than her shorts were.\n\nJanet groaned softly as she turned her upper body to get a better look with him this close. As the jeans went lower, his dick came into view. It was standing up against his lower belly the same way hers was. She groaned even deeper as the jeans fell away and he was as naked as she was.\n\nWith a giggle, Janet whispered, \"Yours is bigger than mine.\"\n\nLuke did a double take and then groaned as Janet turned to face him. His brain was at war with itself. She had tits, nice tits at that, but she also had a hard dick. Girls with dicks did not compute.\n\n\"I think you're getting the full impact of my problem,\" she said as she watched his face closely.\n\n\"Uh, yeah, I think I am,\" Luke whispered and then shivered. \"I've uh, never thought much about sex with a guy.\"\n\n\"I'm not just a guy,\" Janet replied. \"I'm your best friend and I'm a girl with a dick and a pussy. Okay, the dick doesn't come down to my knee but....\"\n\nLuke shivered and gave her a twisted grin. \"Yeah, it's the butt part that concerns me.\"\n\n\"Men and regular women have anal sex,\" Janet pointed out.\n\n\"Uh, yeah, so I've seen on the internet,\" Luke replied.\n\n\"Some of those same women have anal sex using dildos, vibrators, even strap-on with their men,\" Janet said slowly. \"That's on the internet also.\"\n\n\"I, uh, kind of skipped over that part,\" Luke admitted.\n\nJanet sighed and shivered. \"I had to kind of explore all the possibilities.\"\n\n\"All the possibilities?\"\n\nJanet grinned. \"Bisexual men and women. The combinations are endless when one of the two has both equipment.\"\n\nLuke sighed and moved to the shower door opening. \"What if they both have both equipment?\"\n\nJanet frowned and shook her head. \"There is very little information on hermaphrodites on the internet. What is there is usually fake porn.\"\n\n\"Maybe that's why I never ran across it,\" Luke said as he stood in front of his best friend. He looked down and then squatted slightly.\n\nJanet laughed and he looked at her face. Looking back down he said, \"We're about the same length but I'm bigger around.\"\n\n\"Can you visualize me wearing a string bikini at your pool for a family get together?\"\n\nLuke grinned. \"With or without the hard-on?\"\n\nJanet shook her head but she was smiling as she turned, moved to the side, and worked the shower controls. \"Even soft, it makes a bulge that is very noticeable in even a pair of panties.\"\n\n\"Uh, yeah, I understand that completely,\" Luke whispered as he stepped up behind Janet.\n\nJanet had the water set to her liking. Turning her head, she asked, \"Is this too hot for you?\" A few seconds later, she gasped loudly as Luke moved up against her, his hard dick pressed to the upper part of her ass and his hands coming around to caress her breasts.",
        "\"The water is fine,\" he whispered in her ear as he moved his hips from side to side and squeezed her breasts gently.\n\nJanet groaned and raised her hands to cover his. \"This, this isn't, uh, getting any messes cleaned up.\"\n\nLuke kissed the side of her neck and out onto her shoulder. Janet moved her head to the side and whimpered softly as he caressed her breasts. His palm rubbing her nipples shot jolts of pleasure straight to her sex. When he crouched down slightly and moved his hips from side to side, his dick centered up between her ass cheeks.\n\nJanet whimpered and pressed her ass tighter to his hot dick. \"You, you're going to make another mess.\"\n\n\"And the problem with that is,\" Luke whispered as he kissed the top of her shoulder.\n\n\"The, uh, score is already two to one. I hate taking advantage of you,\" Janet said in a breathy whisper.\n\nLuke's right hand moved off her right breast and Janet squeezed and pinched the nipple. She took several deep hissing breaths. A moment later, Luke whispered, \"Put a hand on you dick and rub it.\"\n\nJanet moved her left hand to her dick and made a fist around the head and upper shaft. She stroked herself slowly. Between Luke's hand on one breast, his dick rubbing in the crack of her ass, the fingers of her right hand pinching her right nipple, and her hand on her dick, she was fast approaching overload for the third time.\n\nShe didn't feel his lower body move but she did notice his dick wasn't rubbing in the crack of her ass. She made a whimpering sound and flexed her hips. Her hips went forward and when they came back, something was pressing against the very upper part of her inner thighs. The slippery messes from earlier allowed it to slip in deeper.\n\nWith a loud gasp, she realized it was the head of Luke's dick. \"No!\" She yelled loudly and then came up on her tiptoes as it went deeper and rubbed across the hot opening to her vagina. Then it was pressing on the sensitive spot at the base of her dick.\n\nHer hips shivered and shook and then she was coming longer and harder than ever before in her life. Her hips were flexing and jerking with wild abandon as the head of Luke's dick kept bumping the sensitive spot over and over again.\n\nHer orgasm was slacking off and her hips were more or less under control when there was a hot surge over the sensitive spot and at the base of her dick. She looked down just in time to see a white spurt hit the shower wall in front of her. She sighed and grinned. The score was now three to two.\n\n*****\n\nLuke held onto Janet as the steamy water cascaded down her front. His right hand was around her waist and flat against her lower belly. His left hand was still on her left breast and massaging it with slow and gentle movements of his fingers. Her right hand hung down at her side and her left still held her dick.\n\nShe shivered as he kissed her neck. \"That was the best orgasm of my life,\" she whispered as she shivered again.\n\nLuke sighed and whispered, \"The best one of my life also.\"\n\nJanet giggled and took her hand off her dick. It was only semi hard as she twisted in his arms until she could kiss him. The kiss was soft and gentle on both sides. His hand had moved over to the other breast and his semi hard dick was now against her left hip.\n\nWith a soft moan, Janet turned more and felt her dick touch his hip. She shivered hard and broke the kiss as he now had both hands on her back and was caressing her from her shoulders to her ass. \"For two virgins, we sure do get each other off.\"\n\nLuke chuckled. \"And off and off again.\"\n\n\"I'm still one ahead,\" Janet whispered.\n\n\"So you owe me one. I can live with that,\" Luke whispered as he started to kiss his best friend again.\n\nJanet turned until she was facing Luke, her dick next to his. Both of them groaned softly but neither broke the kiss.\n\n*****\n\nA short while later, Luke broke the kiss and whispered, \"We need to save some hot water for mom. With the power off, I don't know how long it will take to reheat.\"\n\nJanet giggled. \"Don't you guys have a gas hot water heater like we do?\"\n\n\"I don't have a clue,\" Luke said as he reached over and picked up a bar of soap.\n\nJanet watched him lather up his hands and whimpered softly. \"I've often wondered how soapy hands would feel. Hands besides mine, that is.\"\n\nLuke gave her a leering grin and whispered, \"Time to find out.\"\n\nJanet took the bar of soap from him and lathered up her hands. \"Time for both of us to find out.\"\n\nIt was a comedy of errors as they tried to lather each other up at the same time. Moans, whimpers, and laughter mixed all together. That all came to a stop as her hands found his dick and rubbed it. He groaned deeply and shivered hard. After a moment's hesitation, his hands found her dick and rubbed it.\n\nJanet made a soft gasping sound as she felt his slippery hands rubbing her dick. It felt way better than she had ever fantasized it would. She felt it growing firmer and harder. His was doing the same in her hands. They both groaned and leaned forward to kiss.\n\nThe kiss went on and on until Luke broke it with a loud moaning groan and tried to step back away from Janet's hands. \"I, I, I,\" he stammered and then his hips were flexing back and forth.\n\nJanet grinned and tightened her grip on his dick as she moved her hands faster. They were both moving up and down but the top one was also twisting back and forth on the head.\n\nLuke let out a soft yell as he pushed his hips forward. They were jerking and twitching as if he was coming but very little if anything came from the head of his dick.\n\nJanet stopped moving her hands up and down but she still twist the one on the sensitive head until Luke grabbed her hands. \"I think that evens the score,\" she whispered as she stepped closer and kissed him gently.\n\nWhen she broke the kiss, she stepped back and let go of his dick. She had a big smile on her face as she rinsed her hands, picked up the soap, and lathered her hands up. Luke stood there and watched as she lathered up between her legs and down the insides of her thighs. She turned around and bent over as far as she could with the wall in the way and used one hand and then the other to rub in the crack if her ass.\n\nShe turned around and started to rinse the soap off. Luke groaned as he watcher her hands rub her body. \"You are so beautiful,\" he whispered softly.\n\nJanet grinned. \"I'll bet you tell that to all the girls you shower with.\"\n\n\"Uh, since you're the only one I've ever showered with, that's a sure thing.\"\n\nStill grinning, Janet stepped to the side. \"Rinse the soap off and lets go find some clothes before you're mother surprises us by getting home early.\"\n\nLuke grinned at his best friend and winked as he stepped under the hot water. \"We're both over eighteen. She might chew my ass out for using all the hot water but....\"\n\nJanet laughed. \"So you don't think she would mind you having a girl in her shower?\"\n\nLuke wiggled his eyebrows and shrugged. \"She might have a heart attack when she notices your dick.\"\n\nJanet shook her head but she was still grinning as she opened the shower door and step out onto the bath mat. She pulled a towel off the door and started to dry off. As she was finishing up, she heard the water shut off and the door opened.\n\nLuke grabbed a towel and started to dry off. Janet wrapped her towel around her waist and watched him. His hair was wet and he was drying it with his towel over his head. With a grin, Janet went to her knees in front of him, leaned forward, and sucked his soft dick into her mouth. His whole dick. He gave out with a loud yell and jerked his hips back.\n\nJanet followed his dick as he moved his hips and looked up toward his head. He had the towel off his head and he was looking down at her with wide eyes. She tried to grin around his dick but wasn't sure how it came off. She slowly moved her head back until just the head was in her mouth. She made a soft whimpering sound as she swirled her tongue around and round.\n\nLuke moaned deeply and whispered, \"Holy fuck!\"\n\nJanet sucked all of his semi hard dick back into her mouth and held suction on it as she lifted her head slowly. It popped out of her mouth with a slurping sound. She was still looking up at him but now she had a big smile on her face. \"I've always wondered what that would be like from both sides. Now I know from this side at least.\"\n\n\"I, I, I,\" Luke stammered as Janet got to her feet.\n\nShe came up on her toes and kissed him briefly on the lips. Coming down off her toes, she sighed and said, \"Your room, clothes, now.\"\n\n******\n\nLuke was rummaging around in a dresser drawer and Janet was sprawled out across his bed. It felt weird in an exciting way to be lying on Luke's bed naked. Her left hand found her semi hard dick and two fingers on her right hand explored the sensitive spot at the base of her dick. It felt slick in one direction but rough if she moved the fingers across it.\n\nLuke turned from the drawer and groaned softly as he saw what Janet was doing. \"Are you, uh, masturbating?\" He asked quickly.\n\nJanet giggled and shook her head. \"After three giant orgasms in a couple of hours, I don't think so. I was checking out my sensitive spot.\"\n\nLuke walked over and squatted down beside the bed. Janet whimpered and raised her knees. Her breathing got faster as she spread her knees wide apart. In her mind, she could feel his eyes on her most secret place.\n\n\"If it was a clit, wouldn't there be a nub or a bump or something?\" Luke asked as he leaned forward.\n\n\"I, I, I,\" Janet stammered as she jerked her hands away from her sex.\n\nLuke grinned at her as he looked up along the length of her naked body. \"Being looked at excites you,\" he whispered softly.\n\nJanet groaned and nodded. \"It, uh, didn't at the hospital but here with you....\"\n\nLuke wiggled his eyebrows and put on his best leering grin. \"Are you saying it's me that turns you on?\"\n\nJanet groaned again and started to close her knees. Luke grabbed a knee in each hand and said, \"No! Please no.\" With an even louder groan, Janet spread her knees even wider than before.\n\nLuke looked at her sex for a moment and then looked up toward her face. He looked back at her sex and worked his mouth from side to side. \"Other than the dick, it looks like a regular pussy only on the small side.\"\n\n\"Thank you, doctor Luke. Tell me something I don't already know.\"\n\nLuke grinned at her as he stuck a finger in his mouth and then held it up. \"Hold still, this won't hurt one bit.\"\n\n\"What?\" Janet said as the finger disappeared from view. A few seconds later, she gasped loudly as the finger poked at the sensitive spot. A few seconds after that, her hips gave a sharp jerk as the finger drew circles over it.\n\nThe circles stopped and he moved the finger up and down across it. Then he moved the finger from side to side and Janet groaned softly. He sat up straighter and held the finger up. \"See no pain.\"\n\nJanet shivered hard and whispered, \"But there was a lot of pleasure.\"\n\nLuke chuckled. \"I don't think that is a clit. It's more like a g-spot on the outside of your vagina.\"\n\n\"G-spot? What the heck do you know about g-spots?\"\n\n\"A guy has to do research, doesn't he?\" Luke asked in return.\n\n\"But....\" Janet said and then fell quiet.\n\n\"I ain't got there yet,\" Luke said with a big grin.\n\nJanet gave him a hard look and then grinned as big as he was. \"I haven't got there yet either.\"\n\nLuke's eyes jumped to her dick and he groaned softly. \"I, uh, let's concentrate on one problem at a time.\"\n\n\"Why do you think it is a g-spot?\" Janet asked to get them back on track.\n\n\"From what I read, they are slick in one direction and rough in the other. The top side of the head of my dick is the same way.\"\n\n\"What?\" Janet said as her hands flew to her dick. She held it upright and ran a finger up and down across the head. \"I, uh, had never noticed that.\"\n\n\"It's a guy thing. We notice everything about our dicks.\"\n\nJanet frowned and looked thoughtful for a second. \"Yeah, but the sensitive spot is rough and smooth at ninety degree angles.\"\n\n\"Maybe that's a g-spot thing. I'm no doctor you know.\"\n\nJanet giggled. \"Some real doctor is going to be in for a surprise as soon as I can get an appointment.\"\n\nShe started to close her knees and Luke grabbed them again. \"Hey now, this not a doctor is not through with his examination,\" he said quickly.\n\nJanet moaned softly as she let her knees fall back open. Luke went to his knees and held his fingertip close to the entrance to her vagina. He gently explored the outer lips and then ran the fingertip up and down in the glassy smooth trench of her slit.\n\nWhen his fingertip teased her opening, she gasped loudly. \"Has, uh, anything been in here before?\" Luke asked softly.\n\n\"My, my finger and an old hairbrush handle,\" Janet confessed with a big blush.\n\n\"Okay, so I won't break anything if I explore deeper?\"\n\nJanet started to giggle and then groaned long and loud as his finger slowly slid up inside her vagina. Her hips lifted off the bed and flexed up and down slowly. She was fucking herself on the finger.\n\nLuke held his finger still. His eyes were wide and his mouth hung open at what he was seeing. Suddenly his eyes darted to the sensitive spot and he groaned softly. He wasn't sure how he knew but he did. A lick or two on that spot and Janet would explode.\n\nHis head moved and his tongue stuck out. His tongue ran over the spot in an upward motion. Janet let out a yell to wake the dead and fucked herself on his finger even faster and harder. At his next lick, she had a double handful of his hair and arched her hips up higher.\n\nShe yelled again as he licked the spot even firmer and there was a surging wet heat around his finger than ended up covering most of his hand. She hadn't been kidding about making a mess. She was pushing at his head one second and pulling it closer the next.\n\nLuke grinned and kept right on licking. Janet kept on coming and fucking herself on his finger. How long this might have gone on was anyone's guess but the lights suddenly flared on and Luke raised his head to look around.\n\nJanet groaned long and loud as her hips settled to the bed and she lay motionless except for her heavy breathing. Luke's finger was still in her vagina. He slowly pulled it out. Janet made a soft whimpering sound as he did.\n\nHe looked at his shiny wet finger and hand and grinned. He brought it up to his nose and sniffed. The fluid had a sweet earthy smell. He licked at the back of his hand and then stuffed his finger in his mouth. The taste was even better than the smell.\n\nJanet groaned deeply and whispered, \"Are you trying to kill me?\"\n\nLuke shook his head as he still had the finger in his mouth.\n\nJanet opened her eyes and gasped softly as she saw him sucking on his finger. \"I, I, I,\" she stammered as her eyes closed again.\n\nLuke pulled the finger out of his mouth with a slurping sound. He smacked his lips and said, \"Oh yeah, that was all you, you, you.\"\n\nJanet giggled and opened her eyes. \"I told you I was messy.\"\n\n\"Tasty, also,\" Luke replied and licked the back of his hand again.\n\nJanet groaned as she watched him licking his hand. \"A tongue is so much better than a finger,\" she whispered a moment later.\n\n\"Especially if it is someone else's tongue.\"\n\nJanet giggled. \"I'm not that limber and my boobs get in the way.\"\n\nLuke did a double take and laughed. \"I'm not that limber either. That or my dick is too short.\"\n\n\"It's no shorter than mine.\"\n\nLuke grinned and replied, \"yeah but my boobs are way smaller.\"\n\nJanet sighed and whispered, \"Just cover me up. I'm going to sleep for a week.\"\n\n\"Uh, my mom might have a few questions about that.\"\n\n\"Just tell her I'm worn out from coming my brains out. She'll understand.\"\n\n\"Which will lead to even more questions,\" Luke said with a grin.\n\nJanet groaned as she worked her way up onto her elbows. She noticed two pairs of shorts and a t-shirt lying on the bed next to her hip. \"Another trip to the bathroom is called for but no shower this time.\"\n\nLuke grinned and licked his hand and Janet laughed. \"You have to wash that thing sooner or later.\"\n\n\"I vote for later.\"\n\n\"How sensitive is your mother's nose?\" Janet asked with raised eyebrows.\n\nLuke sniffed of his hand and groaned. \"I, uh, don't really know but you do have a very distinct odor.\"\n\n\"Uh huh,\" Janet said as she wiggled forward to the very edge of the bed.\n\nLuke moved back and looked at her funny. \"Not a bad odor, a good one as far as I'm concerned. A very good one.\"\n\nJanet grinned and gingerly got to her feet trying not to get any of her mess on his bed spread. Luke stood up quickly and held onto her arm as they went into the hall and crossed it to the guest bathroom. Janet wasn't very stable on her feet.\n\nHe got out a washcloth and handed it to her. \"Ladies first,\" he said and then glanced down at her dick.\n\nShe grinned at him and shook her head. \"The problems pop up everywhere,\" she whispered as she wet the cloth.\n\n\"Uh, a question. I thought you had to play with the head of your dick while you played with the spot to get off?\"\n\nJanet giggled as she rubbed at her sex and between her thighs. \"It seems being finger fucked and having the spot licked has the same effect only a lot stronger. Who knew?\"\n\n\"I sure didn't until you went boom big time.\"\n\nJanet rinsed out the rag and hung it on the side of the sink. She stepped back while Luke washed his hands. \"What, uh, made you lick me there?\"\n\nLuke shrugged. \"I just did.\"\n\nJanet shivered and then groaned deeply. \"Do you realize how many people it would take to cover all of my sex or is that sexes?\"\n\nLuke was drying his hands as he looked at her with wide eyes. \"Uh, at least four. Two dicks, a tongue and either a second mouth or a pussy.\"\n\nJanet groaned softly and whispered, \"Uh, what bout my mouth?\"\n\nLuke shook his head and groaned. \"There ain't enough room for that many people.\"\n\nJanet giggled as she headed out the door. \"But it sure would be fun trying.\"\n\n\"Hey wait a minute,\" Luke said as he started after her. \"What if I don't want to share?\"\n\nJanet was looking at the two pair of shorts he had picked out. She tossed him one pair and started to put the other pair on. \"We're not even dating so what makes you think you have any kind of say?\" She asked with a grin.\n\nLuke looked at her with big eyes and shook his head. \"I'm the only guy that knows about your problem, remember. Who else would you date?\"\n\n\"There is this little blonde down at the book store. She's been giving me the eye,\" Janet said as she headed for the bedroom door.\n\n\"Is she bi or a lesbian? If she's a lesbian then the dangly bit you have is going to throw her for a loop,\" Luke said as he followed along behind Janet.\n\nShe ended up in the master bathroom and picked up the damp towels. She tossed those to Luke. \"Laundry basket,\" she said as she picked up their shorts. \"These, I'll take home and wash while mom's at work.\"\n\nLuke stuffed the towels in a hamper and looked at his best friend. \"You can't breakup the set now,\" he whispered.\n\nJanet looked at the shorts and grinned. \"They are definitely not a matching set.\"\n\n\"I was talking about us,\" Luke said sharper than he meant too.\n\nJanet come over to him and came up on her toes to kiss him softly. As she came down off her toes, she whispered, \"I know what you meant and I agree whole heartedly.\n\nShe turned and headed for the door. \"Where are you going now?\" Luke asked quickly.\n\n\"To find a sack for our shorts and to get my t-shirt on,\" came the reply from down the hall.\n\nLuke was grinning as he started to follow her. He turned off the lights as he went and even remembered to turn off his lantern. He slipped the t-shirt from the bed on over his head.\n\n*****\n\nThe candle was out and the coffee table was back in place. They were both dressed and the TV was on. They were sitting side by side on the couch holding hands when the front door opened and Luke's mother, Mary, came in. She looked at the two on the couch and smiled.",
        "\"How was your day, mom?\" Luke asked.\n\n\"You mean besides trying to run a business with no power or trying to get home with half the red lights out?\" She asked in return.\n\n\"Yeah, the power was out here also,\" he replied and grinned at Janet.\n\n\"So what did you two do to pass the time?\" Mary asked.\n\n\"I gave him a royal stomping at gin rummy and we talked a lot,\" Janet replied.\n\n\"Janet is going to college this fall to the same school I'm going to,\" Luke added.\n\n\"What are you going to major in, Janet?\"\n\nJanet grinned. \"I'm still working on that. Something to do with counseling or maybe something in the medical field.\"\n\nMary nodded. \"Either one is in high demand.\" She walked over to stand behind her son. \"Luke can't decide if he wants to be a Fireman or an Astronaut,\" she added with a grin as she leaned over and kissed him on the cheek.\n\nLuke grinned up at her and whispered, \"I've changed my mind again. Now, I want to be a Forest Ranger.\"\n\n\"So why do you have so many engineering courses lined up?\"\n\n\"Do you think those trees grow straight on their own?\" He asked in return with a wink.\n\nMary chuckled and shook her head. \"I need a shower. Without the air conditioning, that store gets hot. No windows that open. I almost came home early.\"\n\nJanet shivered and squeezed Luke's hand. He grinned at her and gave her a wink. \"Yeah, it got a little warm around here also,\" he said as his mother went up the stairs.\n\nBoth turned to watch Mary disappear down the hall. Janet sighed and gave Luke a crooked smile. \"That went better than I thought it would.\"\n\n\"I told you that mom would be cool about it.\"\n\nJanet tried to suppress a giggle but only half succeeded. When Luke gave her a funny look, she grinned and whispered, \"Wet mat in front of the shower, her shower, and two damp towels in the hamper. Add the small amount of hot water and....\"\n\nLuke groaned softly. \"I, uh, hadn't even thought about that, except for the hot water.\"\n\nJanet grinned and leaned over to kiss Luke on the cheek. \"I think I want to go shopping tomorrow and I want you to go with me.\"\n\nLie looked confused and asked, \"What for?\"\n\n\"I think I want a bikini or a swimsuit so you can teach me to swim.\"\n\n\"Uh, how about the, uh, fit?\"\n\n\"I don't know, I've never tried any on. I've looked but that was all.\"\n\nLuke groaned softly. \"You in a bikini? That would be killer.\"\n\nJanet chuckled and shook her head. \"In more ways than one. Maybe a bikini top and some kind of shorts might be safer.\"\n\n\"Safer for or from what?\" Mary asked from the top of the stairs.\n\nTwo heads snapped around to look at Luke's mother. \"Uh,\" they both said and Janet felt herself blush.\n\nMary grinned as she came down the stairs. She had on a bathrobe and her feet were bare. \"It seems someone used all the hot water or at least most of it.\"\n\n\"Uh, yeah, mom\u2014\" Luke started to say but his mother held up her hand.\n\n\"I didn't ask for an explanation, I was just pointing it out. Two in a shower by candlelight is always fun.\"\n\nJanet grinned at Luke and said, \"Make that lantern light.\"\n\n\"I didn't even know you two were dating,\" Mary said as she went to the kitchen.\n\n\"We, uh,\" Luke started to say with a look in Janet's direction. She winked at him and he smiled. \"It's a new thing.\"\n\nIt was silent for a few minutes and then Mary appeared at the kitchen door with a glass of wine in one hand. \"I'm happy for both of you and I do hope it works out. Just, please be careful and take it slow and easy.\"\n\nJanet grinned at Luke and said, \"Slow and easy is the only way we can go.\"\n\nLuke chuckled and nodded. \"I think the main part of her message was the careful part.\"\n\nJanet shook her head. \"I may be crazy about you but I'm not stupid. We have forever and two days.\"\n\nMary looked at Janet and said, \"I knew you had a good head on your shoulders.\"\n\nJanet laughed looking at Luke. \"One of us has too.\"\n\n\"Hey now,\" Luke said with a wink at Janet.\n\n\"Keep him in line,\" Mary said as she turned and headed for the stairs.\n\nThey watched Mary climb the stairs and go into the hallway.\n\n\"I think, she thinks, we had sex,\" Luke whispered.\n\n\"Well, duh!\" Janet said with a big grin.\n\n\"But,\" Luke said and then groaned.\n\n\"Yeah for both of us until I get to the doctor and setup my birth control,\" Janet whispered.\n\nLuke groaned again and Janet chuckled as she leaned over to kiss him on the cheek. She stood up and said, \"I think I'll let you think on that until tomorrow.\" She walked over and picked up the sack with their dirty shorts in it. \"Call me early,\" she added and headed for the front door.\n\n\"The more things change, the more they stay the same,\" Luke said as she opened the front door.\n\nJanet grinned at him and said, \"Yeah, I'm still as bossy as ever.\"\n\nThen she was out the door.\n\n*****\n\nAs she cut across the wet yard, she had a big smile on her face. Things had worked out even better than she ever thought they would and in more ways than she ever imagined.\n\nShe stopped at the front door to her home and sighed. Now she had to decide how much she should tell her mother if anything. Maybe she should wait and see what the future would bring.\n\nJanet was still thinking it over as she opened the door and went inside."
    ],
    "authorname": "TxRad",
    "tags": [
        "first time",
        "friends",
        "hermaphrodite",
        "virgins",
        "oral",
        "erotic",
        "aroused",
        "orgasm"
    ],
    "category": "Transgender & Crossdressers",
    "url": "https://www.literotica.com/s/hermaphrodite"
}
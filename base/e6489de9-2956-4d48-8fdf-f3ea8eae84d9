{
    "title": "The Last Boy Scout Ch. 04",
    "pages": [
        "======================\n\nSisters, Teacher and Best Friend. Jealous?\n\nSometimes, I'm a big ol' idiot. I don't use an editor often enough, but MarieWriter helped with this series, and it's considerably better for her assistance. I should have mentioned that in the first chapter, where she provided a lot of insightful advice. Of course, I'm never happy with the story and keep tweaking until the last minute. I assure you, any errors are mine, not hers.\n\n======================\n\nI stood in the vestibule of my tent, holding Teri's hand, still stunned by my incredible luck, and wondering what was in store for me under the canvas.\n\nI passed Teri a towel. \"Let's get rid of most of these clothes out here, so we don't bring the storm in with us.\"\n\nI stripped down to my shorts before entering the tent, while Teri took off everything but her underwear. We toweled off, and I gave her a quick hug and kiss, before opening the zipper and heading in. I had quite the surprise waiting. All three girls were naked, with Shannon lying on my sleeping bag between the sisters.\n\n\"Are we the best girlfriends ever?\" Julie asked. \"Look what we have for you. A beautiful naked teacher, all primed and ready to go.\"\n\nI could see that Julie had her hand between Shannon's legs, and Lisa was playing with her tits.\n\n\"Alex,\" Shannon greeted me, slurring her words, \"your girls are being so bad.\"\n\n\"Julie, what are you doing?\" I asked her softly, kneeling down beside her.\n\n\"Getting her ready for you. You don't get us, until you do her first.\"\n\nI was torn. This wasn't what I'd expected, but then again, nothing this weekend had worked out the way I'd supposed. I felt hands around my hips and looked over my shoulder to see a naked Teri pulling down my shorts. \"It's Ok, Alex. Everyone can see how you two are with each other. It's just us. Nobody has to ever know.\"\n\nShannon might have been drunk, but she wasn't completely gone. \"You all have to promise. Nobody can know,\" she said. \"Promise?\"\n\nJulie leaned over and kissed her. \"We promise. It's our secret. Forever.\"\n\nShannon looked at Teri. \"Promise?\"\n\nTeri surprised me for the umpteenth time tonight by leaning over Shannon and kissing her softly. \"I promise. I'd love to see you with him, if just this once.\"\n\nShannon turned her head to Lisa, for another, deeper kiss. \"I promise too,\" Lisa said.\n\nShannon opened her legs, looking at me. I moved between them. \"I'm so worked up now, I won't last 10 seconds,\" I warned her. \n\nShe grinned, struggling up to a seated position. \"I'm going to suck you dry, then you can do me, Ok?\"\n\nI think I liked drunk Shannon.\n\nThe girls pulled me to the ground, gathering around, and then Shannon was between my legs, holding my cock in her hand, looking at it. \"I've wanted this for so long, Alex. Why did you make me wait?\"\n\n\"I wanted to graduate first, so we wouldn't risk your job. Next summer I was going to fuck your pretty brains out.\"\n\nShe gave my cock a lick. \"I guess we'll just have to get started early.\" She looked around, \"It's our secret right?\"\n\nEveryone nodded, watching while her sexy mouth lowered over my cock. She bobbed her head up and down slowly a few times, then lifted up, sucking hard, and pulled off me with an audible pop. \"Is that what you wanted, you naughty boy? Sticking your hard prick in your teacher's nasty mouth?\n\n\"God, I'm so close Shannon. Suck me off, please.\"\n\nIt didn't take a lot of time or finesse. She smiled and took me in her mouth, moving her head up and down steadily. She watched me the whole time, only using her mouth. It wasn't a minute before I warned her of my release. \"Now,\" I groaned, thrusting up into her mouth, and releasing my soul between those amazing lips. \n\nI came hard, shooting over and over, each time I thought I was finished another burst shooting outward. She kept me in her mouth, letting me finish then sat back on her heels, opening her mouth for us, showing it coated from top to bottom with my cream. She crooked her fingers toward Julie and Lisa, beckoning them closer. The girls moved toward her, and she pulled Julie close, pressing her lips to her, sharing my cum. She pulled back, a sticky string stretching between their lips, turning to Lisa. Lisa went to her eagerly, and they kissed for an eternity, before Shannon pulled away. She closed her mouth, swallowing, then opened it for me, showing empty. She smiled at the sisters. \"See? I can share too.\"\n\nTeri was on her hands and knees, over my waist. She looked up at Lisa. \"Can I get him ready for her?\"\n\nLisa nodded. \"Sure. But that's all for now, Ok?\"\n\nTeri didn't answer. She started working on my cock, licking and kissing it. I watched as Shannon moved over next to Julie, putting her arm around my girlfriend's waist. \"Aren't you even a little jealous?\" she asked.\n\nJulie grinned. \"Nope. He could have had her. Could have had any one of them. He chose me. Me.\" She turned and pressed her lips to Shannon's, kissing her deeply. \"I'm never going to let him regret that choice.\"\n\nI was already hard in Teri's generous mouth, but I wasn't about to stop her. It was too fun watching my friend of so many years enjoy herself.\n\nLisa noticed. \"I think he's ready,\" she observed.\n\nShannon leaned over and ran her hand down Teri's bare back, all the way to her sweet little ass. \"Let her play a bit. I think he'll last a while now.\" She turned to me. \"You're going to last for me, aren't you Alex?\"\n\n\"I swear, this thing isn't going down until dawn. Not with you guys here.\"\n\nWe gave Teri a couple more minutes. It was nice, filling her mouth, watching her play, sucking, licking, kissing. In a way it was good she didn't know what she was doing, I was hard, but I wasn't really getting worked up. I'm sure Shannon would have had me on my third erection by now.\n\nShannon lay down beside me, sighing sweetly. \"Whenever you want me lover, I'm here for you.\"\n\nI reached down and lifted Teri's face off my cock. \"Thanks beautiful. That was nice.\"\n\nShe pouted. \"Nice? I was going for incredible.\"\n\nI laughed. \"Maybe if you're good, the girls will allow you some more practice. I'm sure you can be incredible.\"\n\nI got up and moved between Shannon's legs, pausing to listen to the rain and the murmur of the last of the evening's revelers. I lifted her legs, pulling them back toward her head. Julie and Lisa were kneeling on each side of her, watching. I looked at them, \"Hold these, will you?\"\n\nThe girls took Shannon's legs, tilting them back. \"Gently,\" Shannon warned, \"I'm not as flexible as you young things.\"\n\nShe was wide open for me, a pretty little field of red hair above her open pussy. I lay down between her legs, lowering my mouth to her moist lips.\n\n\"Oh, God, Alex,\" she moaned. \"Eat me.\"\n\nI did my best, putting all I'd learned one special weekend at the beach into play. She was moaning from the beginning, and it didn't take me too long to get her to come for me.\n\nShe was a moaner, pretty quiet otherwise. When she came, the moans rose in pitch, quieting afterward. She was consistent about that, as I made her come on my tongue twice. The third time, when her moans had nearly reached the perfect pitch, I rose up and thrust my aching cock into her, to the hilt, pushing her immediately over the edge, and making her come hard on my cock. Lisa leaned over me, caressing my side, her hand wandering down to my ass, squeezing my butt cheek. \n\n\"Did you like eating her out?\" she asked, while I drove my cock in and out of our teacher with a nice leisurely pace, enjoying myself.\n\n\"I loved it. Making her come like that.\"\n\nShe kissed my shoulder. \"You'll do that for us, right?\"\n\nI chuckled. \"Until you beg me to stop.\"\n\n\"Mmm. That might take a while. There are two of us, you know.\"\n\n\"Lisa, I'm dying to taste your sweet little pussy.\"\n\n\"Let her legs go,\" I told my accomplices in the ravishing of our teacher.\n\nThey did, and Shannon stretched her legs out, then wrapped them around me. I leaned over her, bringing my face down to hers. \"I could do this forever,\" I told her softly, kissing her briefly.\n\nShe grinned. \"That wouldn't be fair to our friends. Half of forever will do.\"\n\nI was feeling strong, in no hurry to finish. And I wanted to play. \n\nI pulled out of her, rolling her over, and lifting her hips high. She rose up on her hands, looking back at me. \"Like this, lover?\"\n\n\"Exactly like this,\" I told her, sliding back inside her warmth.\n\nJulie shuffled over on her knees, looking down at where I was sliding in and out of our teacher. \"God that looks sexy,\" she said, reaching between us, her fingers bracketing where my cock was entering Shannon. \n\n\"Kiss me?\" I asked.\n\nShe grinned and brought her lips to mine, kissing me warmly, our tongues playing, while I fucked Shannon. Lisa moved in on my other side, tapping her sister. \"Share?\"\n\nJulie pulled back, grinning. \"Always, with you sissy.\"\n\nI turned and kissed Lisa, for a long, long time almost missing it when Shannon's moans started rising. I pulled back from Lisa, grabbed Shannon's hips and hammered her. She came for me sweetly, gasping, and dropping her head to the ground, that sweet pussy of hers still held high for me.\n\nI looked around for Teri, who was laying on her side, watching us, her hand between her legs. I blew her a kiss, and she grabbed it out of the air, and placed it between her legs, moaning loudly, then winking at me. God, this was a part of her I'd never have imagined.\n\nShannon sighed, pulling away from me. \"Let me watch you with them, Alex. Please.\" She rolled onto her side, looking devastating.\n\nI looked back and forth between Lisa and Julie. \"Shall we?\"\n\nLisa nodded. \"Lie down.\"\n\nI did, stretching out, eager to start. Lisa turned to her sister. \"You go first.\"\n\n\"Are you sure?\" Julie asked, straddling me. \n\nLisa nodded. \"I want to feel his tongue.\"\n\nShe straddled my head, lowering herself. I held her by the hips, adjusting her, until I had room to work. I was right. She did have a sweet pussy. I felt Julie lower herself onto my cock, her tightness driving me crazy.\n\nI spent several minutes under the two of them, before they traded places. Same blonde peach-fuzz, same narrow inner lips, same hard little clit. I couldn't tell one from the other, not by look or taste. Lisa rode my cock a little harder, and was easier to drive into. Funny that my cock could recognize the difference.\n\nI was starting to feel that change in urgency, when they switched back again. They didn't talk, one minute they'd be straddling me, then they'd be switching. The brief switch helped reduce my need. \n\nThey were playing with me, switching more often, only a couple of minutes each time. I was losing track, even my cock was getting confused. I felt the sister on my face starting to squirm against my tongue, and I worked hard to try to get her off before the next switch. I wasn't successful, but I was getting to both of them finally. The next pussy was in the same state of eagerness, trembling against my tongue.\n\nAfter the next switch, I pulled her hips down and sucked hard around her clit, pressing forward with my tongue. I was rewarded with two hands gripping my hair and pushing back, while she shuddered her release.\n\nThe girl at my waist was fucking me hard, and I thrust up against her, groaning, gasping for air. The pussy over my face drew away, but the one down below kept working. I looked down and saw Julie, eyes closed, forehead wrinkled in concentration, while she rode me.\n\nI reached for her, pulling her down to my chest. Her eyes burst open staring at me. I lifted her hips up and jackhammered that tight little pussy, until she squealed for me coming so very sweetly.\n\nLisa lay down beside me, watching. \"Fuck her hard, Alex. Pound that poor tight little pussy to pieces.\"\n\nI was straining from the exertion, but I kept pounding into her, listening to her sweet little moans and gasps. I recalled the night before when she'd gone multi-orgasmic on me. \"Come on my cock, Julie. Come for me.\"\n\nShe cried out, shuddering, gasping, then cried out again, \"Fuck,\" she groaned.\n\nLisa whispered, \"Not inside her, she's not on the pill yet.\"\n\nI moaned, pounding her with long strokes, feeling that small sexy body tense up, before trembling with ecstasy.\n\n\"I'm going to cum,\" I gasped to Lisa.\n\nLisa moved down and indelicately pushed her sister off me, taking my cock in her mouth. I held her head, thrusting into her hot mouth for a few more strokes before erupting. She swallowed gamely, sucking me dry, before pulling away.\n\n\"Lisa!\" Julie whined, \"Where's my share?\"\n\nLisa grinned. \"Next one's yours, Ok?\"\n\nThat seemed to console her. \"Alright, but don't forget.\"\n\nI looked over to the side and saw Shannon was sleeping. \"I guess we were too boring for her.\"\n\nTeri giggled. \"Are you kidding? That was better than porn. You guys fucked the shit out of him.\"\n\nLisa grinned, grabbing my cock and shaking it. \"You want to get him ready for us?\"\n\n\"Can I?\"\n\n\"Please, have fun.\"\n\nTeri was looking for some fun of her own. She straddled me in 69, peeking back over her shoulder at me. \"Do you mind?\" she asked.\n\n\"I'd love to taste you, Bestie.\"\n\nIt was wonderful. We just played with each other, licking, tasting and sucking. Lisa peeked over Teri's ass. \"Hey Alex, you got anything to drink in here? I'm really thirsty.\"\n\nI took a break from licking Teri. \"Sorry. Nothing.\"\n\nShe pouted. \"Where can we get something?\"\n\n\"I'll get us some water,\" I told her. \"Teri, can we take a little break?\"\n\nTeri rose up, grinning. \"No hurry. As long as we can play later.\"\n\nLisa gave her a hug. \"All the oral you want. I promise. Just no sex, right Alex?\"\n\n\"That's it. She stays a virgin,\" I confirmed.\n\nTeri sat up, hand stroking my cock. \"Works for me. You guys are the best.\"\n\nJulie piped up. \"That's the plan. Best girlfriends ever. He'll never be able to leave us. Who else would be willing to share with someone like you or Miss Shannon?\"\n\nI threw on shorts, and headed into the night. I had my coffee pot with me, planning to fill it with water. The camp had completely died down, and things were pretty quiet. I noticed that some of the sleeping bags were intimately close, but I kept my distance, not wanting to interfere with budding romance. \n\nI walked through the second shelter, where we'd spent such an interesting evening, finding it empty. I figured that Max may have convinced Wendy to join him in his tent after all.\n\nThe third shelter held the picnic tables, and the foodstuff that had been moved from the last shelter before the storm. The huge water cooler was there, as I'd hoped, and it only took me a few moments to fill my pot. \n\nI had an urge to check all the tarps, just in case, and to work on the fires, but I forced that urge down. Enough Boy Scout for the evening. I had more serious business ahead of me. Two sisters that I was going to do my damnedest to wear out, before they broke me.\n\nBack in the tent, I was welcomed with a naked parade of firm teenage flesh. We filled up a mug and passed it around, twice, to slake our thirst. \"It was that damned tequila,\" Lisa said.\n\nThe girls had opened up one of the extra sleeping bags, and covering our sleeping teacher with it. I went to check on her. She was sleeping soundly, and I couldn't resist leaning over and giving her a little kiss goodnight.\n\nJulie showed up next to me. \"If you want we can wake her up.\"\n\n\"Let her sleep. You and your sister are more than enough for me.\"\n\nShe giggled. \"Let's just play a while. Get to know each other, a little like last night.\"\n\nHer idea was for us to relax in the dark, kissing, hugging, touching, fondling, all that good stuff. She even thought Teri should play along.\n\nWe killed the flashlight, and played. There was no attempt to hide who was who, the dark just made everything a little more intense. I spent a good amount of my time playing with the 4 Samuelson tits, which I doubted I'd ever get enough of. Every time I moved to a new one, I seemed to earn a chuckle. \"You really do like our tits, don't you?\" Lisa asked as I moved from one tasty nipple to the other.\n\n\"They are perfect. The best in the school. Best I've ever seen.\"\n\n\"Ellen's are a lot bigger,\" Julie said, offering me hers. \n\nI teased her nipple hard. \"Bigger isn't better beyond a certain point. Your bodies are both so amazing, soft, curvy, firm, smooth, it's almost beyond belief.\"\n\n\"What about Teri?\" Lisa asked. \"What do you like about her?\"\n\n\"I love her tits, on her. They fit her. And she has the most incredible ass and legs. I love to watch her walk away from me.\"\n\nI got a squeeze from beside me. \"You really like my ass? It's not too big?\"\n\n\"Are you kidding? It's maddening how sweet your ass and legs are. When I used to beat off to thoughts of you every night, I was almost always thinking of that perfect butt.\"\n\n\"You masturbated thinking of me?\" she asked.\n\n\"Non-stop from 7th to 10th grade. I've come for you thousands of times.\"\n\nShe sighed, reaching down and squeezing my cock. \"Damn, Alex. You have to stop telling me things like that. My pussy is flooding and the urge to cram that huge cock of yours into my virgin pussy is driving me crazy.\"\n\nJulie must have been behind her, at least that's where her voice came from. \"So fuck him already. You both want to. It's your stupid rules keeping you apart. I'll give you a free pass.\"\n\nI turned toward her, feeling Lisa cuddle up behind me. I leaned down and kissed my longtime friend. \"We can wait 'til you're ready. There is no rush, Teri. We can have lots of fun, without making you go that far.\"\n\nI reached down for her breast, and found Julie latched on to it. The girl was a never ending supply of surprises.\n\nTeri moaned slightly. \"I just want it to be special.\"\n\nLisa giggled. \"More special than this? None of us are ever going to forget this weekend. Ever. Julie, was it special for you?\"\n\n\"Oh my God! To have you here with me, and my fantasy man doing it, in the dark with everyone touching me, unbelievable. My dream boyfriend took my cherry, and I got to share it with you.\" She sighed. \"It was so incredible. Later, when Miss Shannon and I shared him, just the two of us, and he gave me my first sex orgasm, and then later, a dozen more, I could have died and gone to heaven. Shannon was so sweet, helping me get that first one, and telling me it was Ok that it was uncomfortable at first, that he was big, it wasn't just me. I could just eat her up.\"\n\nJulie had let the cat out of the bag. \"You screwed Miss Shannon last night?\" Teri asked.\n\n\"It surprised the hell out of me. I was freezing to death when I got back from fixing up the camp for everyone. Only Lisa and Julie were up. Lisa, you drifted off, while Julie tried to warm me up, lying on top of me. Shannon woke up and cuddled in next to me to help warm me up. She was topless. So I held her and we talked about the camp.\"\n\nJulie giggled. \"He was freezing. Teeth chattering, body trembling, the whole works. His normally great big cock was a little tiny cold Vienna sausage hiding from me. Then he kissed her and I swear he grew to full size in less time than I can say it. He really liked kissing her.\"\n\nI laughed. \"I did. I like kissing her. But then wild thing thought it would be a good idea to put my cock to more intimate use, right there in front of Shannon.\"\n\nJulie chuckled. \"She called me 'Heaven'. I only got to do him for a few minutes before he asked me to switch places with her. I couldn't believe he was going to do her right there, with me watching.\"\n\n\"Pretty good, huh?\" Lisa asked. \"Nailing the teacher.\"\n\n\"Hell, I've wanted her since I brought her home the first time. We almost did it once, a long time ago, but stopped. I knew I wouldn't be able to handle seeing her in school every day and not give it away. We've been flirting ever since. Every once in a while I'll steal a little kiss, but not like last night.\"",
        "\"He did us both,\" Julie giggled, \"taking turns. How cool was that? Sharing him with her. He made her come for him, and then he fucked my brains out, making me come so much I thought I was going to die. And she helped me get that first one, playing with my clitty, while he pounded me into the ground. I don't know how long he fucked her after that. I fell asleep and twice woke up to him still screwing her.\"\n\n\"You guys didn't act like you'd been doing it, when you were around the fire,\" Teri said. \n\n\"I think we've been around each other long enough now, that we can keep it separated from our public life. At least I hope so.\"\n\nLisa had her hand around my stiff cock, stroking it. \"Fuck her again for us, Alex?\"\n\n\"She's sleeping.\"\n\n\"I know I'd love to be woken up by your big dick plowing me,\" Lisa argued.\n\nJulie liked the idea. \"Let's do it, Alex. Let's fuck her again.\"\n\n\"She'll love it. To think you can't resist her, even with these two here.\" Teri said. \"I know I would. That would be special. Losing my virginity to you because you couldn't resist having me, even sleeping, with these two here. God, I almost came just imagining it.\" She moaned. \"I'm half asleep, and I wake to you kissing me. I feel you between my legs, pushing yourself in. I'm groaning, feeling its thickness, a sharp pinch when you steal my virginity, then that wonderful cock filling me. You're holding me, that hunk of meat sliding out, and then pushing all the way in, filling me completely, bottoming out. 'I couldn't wait a moment longer', you tell me. 'I had to have you'. Now that would be spectacular.\"\n\nI had to laugh. \"No, that would be rape. Fucking a sleeping virgin.\"\n\nShe pulled me down for a kiss. \"You can't rape the willing.\"\n\nJulie wasn't having any of it. \"Suck him Teri. Make sure he's hard and wet. We're fucking Miss Shannon.\"\n\nI felt like a bastard, but I let them talk me into it. We uncovered Shannon and opened her legs. She mumbled a bit, but seemed relaxed. Teri was on her hands and knees sucking me sloppily. I pushed her away and pressed the head of my cock into Shannon's pussy, moving it up and down until she opened for me. I pushed the head in and leaned over her, watching her beautiful face, as I eased the full length of my cock into her. \n\nShe didn't wake up immediately. She gave a soft little moan somewhere around the 4th or 5th stroke. I long-stroked her gently, and leaned down for a kiss. Her eyes fluttered, and slowly opened. She smiled so sweetly it broke my heart. \"Mmm, that's nice,\" she said softly, closing her eyes.\n\nI stroked her harder, making her perfect tits jiggle. She wiggled underneath me, pushing back against me. \"God, that's good. I wish I could wake up like this every day of my life.\"\n\nLisa poked me. \"See? I told you she'd love it.\"\n\nJulie squeezed in between us, and kissed her. \"You're gorgeous when you're sleeping.\"\n\nShannon's eyes opened, slowly focusing on Julie. \"What time is it?\"\n\nJulie kissed her again. \"It's still the middle of the night. You can go back to sleep if you like.\"\n\nShannon sighed, \"You couldn't resist me, could you, Alex? Not even with our little wild thing here.\"\n\nTeri giggled. \"Told you so.\"\n\nI leaned in and kissed her, fighting with Julie for access to Shannon's luscious lips. \"Who could resist you? I just had to have a little taste. I couldn't wait until morning.\"\n\nShannon grinned, \"Anytime you want, lover. I'm yours.\"\n\nJulie moved down and started sucking on Shannon's tit. It wasn't long before Lisa was latched on to the other one. Shannon moaned sexily. \"Your girlfriends are naughty, Alex.\"\n\n\"Just relax, Shannon. Sleep if you want to. We'll only play with you for a little while.\"\n\n\"God, you're all so bad. Playing with me. Using me. Fucking me.\" I could barely hear her as she muttered. \"Am I dreaming?\" she asked.\n\nI was on my knees, holding her legs up, and fucking her harder. \"You're in my dream,\" I told her.\n\nTeri was still a bystander. \"Kiss her, Teri. Get involved,\" I told her.\n\nTeri climbed up next to Julie, and leaned over Shannon, hiding her face from my view. All I could see above her belly was my girls covering my teacher. Leaving that sweet pussy, the object of so many fantasies, to me. \n\nI watched my cock entering her, plunging into her over and over again. The view was intense, and ridiculously exciting. I fucked her harder, feeling her move under me. I was only going to play, but now I knew that I had to finish inside her.\n\nI tilted her legs back and drove down into her. The feeling was exquisite. Too intense to hold back. I groaned my need, \"I'm going to come,\" I announced, moments before exploding deep inside her. I kept stroking into her, pumping out all I had, hating the thought of ever pulling out of her.\n\nTeri was the first to back away, giving her a last kiss. \"Good night, Miss Shannon,\" she said.\n\nJulie took her place, kissing her for a while. \"Thanks for that. Sweet dreams.\"\n\nLisa gave her a kiss as well, \"We love you Miss Shannon. We all love you. You're the best.\"\n\nI pushed my semi-hard cock into her, and leaned down for a goodnight kiss of my own. \"You were wonderful. Thank you.\"\n\nShe grinned, her eyes still closed. \"Thank you, Alex. That was the best dream I ever had.\"\n\nI still couldn't stand the idea of pulling out of her. I eased in and out, kissing her gently. I concentrated on the feeling, and who I was doing. Slowly, I felt some stiffness return. Not complete but enough to move inside of her.\n\n\"More?\" she asked smiling sweetly.\n\n\"Just a little, if it's Ok,\" I said grinding into her, letting her warm tightness breathe life into my cock.\n\nShe opened her eyes and lifted her arms. \"Hold me, Alex.\"\n\nI laid down on her, wrapping her in my arms. I felt a hand touching me where I entered her.\n\n\"Kiss me,\" she asked.\n\nI pressed my lips to her, exploring her mouth with my tongue. She started moaning for me, softly at first. I picked up the pace a bit, pushing deeper, getting that beautiful reaction from her, the escalating moaning, pulling her mouth off mine and gasping, fingers digging into my back. Teri lay down next to her, brushing Shannon's wild red hair back. \"It's Ok, Miss Shannon,\" she whispered. \"Come for him. Come for us. Come for me. Let me see what it's like to be with him.\"\n\nShannon reached out for her, hugging her tightly. \"So good, baby. So good.\"\n\nEnough gentleness. I rose up on my hands, fucking her hard. She groaned, and the moans started up again, after Teri's interruption. Lisa was over my shoulder, caressing me. \"Finish her, Alex. Give it to her.\"\n\nI grabbed Shannon's shoulders, and hammered that forbidden pussy, finally wrenching a beautiful orgasm out of her, feeling her body tense up, her moans peaking. I slowed down, moving gently inside her, while she caught her breath, slowly relaxing.\n\nI stopped, kissing her gently. \"Thank you,\" I told her softly.\n\nShe smiled, stretching sweetly. \"Mmm, you're spoiling me.\"\n\nI chuckled. \"I'm going to spoil you a lot more, you know that right?\"\n\nShe nodded, her eyes closed. \"Counting on it. Now play with your girls.\"\n\nI gave her a last peck, rolling off of her onto my back. I wasn't exposed for more than a few seconds before Julie was sucking my cock.\n\nShe lifted her head, grinning at me. \"I can taste her on you.\"\n\nI reached down, and pulled her up my body, getting a cute little squeal for my efforts. I kissed her, and felt her sliding my cock into her tight young pussy. \n\n\"Did she taste good?\" I asked.\n\n\"Mmm. So hot, knowing it was her juices on you.\"\n\n\"You like girls?\" I asked.\n\nShe wriggled on my cock. \"I don't know. It's all new, you know. I like Teri and Shannon. Kissing is cool, and getting to play with their boobs is a lot of fun. I like that a lot.\" She lifted her hips, and settled down on my cock, taking almost the full length. \"I like this more.\"\n\n\"You liked tasting her. Do you think you'd like tasting it directly?\"\n\nShe gave me a kiss. \"Kind of scary, you know? That's different.\"\n\nTeri was lying beside me, quietly watching our interplay. I looked at her, while Julie rode me gently. \"You are the surprise of the night,\" I told my longtime friend, pulling her close for a kiss. \"I love that saucy mouth of yours.\"\n\nShe grinned. \"How about a little taste now?\"\n\n\"I'd love it.\"\n\nShe moved down between my legs, and I lifted Julie's hips high, releasing my cock. I felt Teri's mouth engulf me, sucking me so nicely, before easing my cock back into my girlfriend. I thrust into Julie, and she moaned.\n\n\"She's touching me,\" Julie whispered.\n\n\"Like it?\"\n\n\"MmmHmm,\" she moaned, holding me.\n\nI reached down and grabbed her tight little ass cheeks, spreading them open. I thrust into her, and held her still, filled with my cock. It was perfect for me, taking the edge off.\n\n\"Oh God,\" she groaned, and I felt Teri's hands covering my own. \"She's licking me back there,\" Julie whispered.\n\n\"Ok?\"\n\n\"God, yes,\" she moaned. \"She's going to make me come.\"\n\nI started pushing into her, just a little, keeping her impaled, while Teri played with her. \n\n\"Oh fuck! Oh FUCK!\" she cried out, grinding against me.\n\nLisa was sitting next to us, giggling. \"You like that, Jules?\"\n\n\"Oh God, Fuck me Alex. Now, hard,\" she gasped.\n\nI lifted her hips, driving into her fast and deep. Lisa moved closer, her face close to mine. \"Two fingers in her bottom,\" she whispered.\n\nJulie hunched over, whimpering, before suddenly crying out. I felt her pussy clenching down on my cock. I kept pumping her, through her orgasm, feeling that change in her as she came off her high. She was gasping, shaking, looking at me with eyes open in wonder. Julie's mouth opened, no sound coming out, as she came for me again, hard. It seemed to last forever. It was working me up, to my own finish. \n\nI long-stroked her, bottoming out on each deep thrust, her body rocking with each new movement. Lisa reached in and grabbed her sister's tits, giving her nipples a hard squeeze. \n\nJulie went wild, fucking back against me hard, wrenching her ass free from my hands, pounding down against me. She gasped, and I felt her trembling again, and again, until she slammed down on me, crying out once more.\n\nShe was gasping for air, noisily, \"Too much,\" she moaned.\n\nI lifted her up bodily, putting her on her back, and climbing back between her legs, driving into her with one hard stroke, and pounding her with all I had left.\n\nI loved the way she came so easily, once she was worked up. I knew I couldn't last much longer, and somehow managed to remember I wasn't supposed to come in her.\n\nI reached out for Teri, grabbing her head, and pulling her down to where I was connected to the wild one. Julie was coming for me in delightful spasms, wordless cries escaping her. It was too much. I pulled out of her, and pushed Teri's face over my cock. She took it eagerly, let me stroke into her mouth, aggressively, making her gag, until I could hold back no longer, letting loose inside her teasing mouth.\n\nImmediately, I felt guilty for using Teri like that. She was sucking me clean, and I pulled her up off my cock. I lifted her to her knees, kissing her softly. \"Sorry, I didn't mean to be so rough.\"\n\nShe grinned. \"Am I incredible yet?\"\n\n\"Jesus, yes! Better than my fantasies.\"\n\nShe kissed me hard, the taste of own cum strong on her lips. \"Good. Use me however you need. That was amazing.\"\n\nLisa walked up to me on her knees. \"I'm starting to feel a little left out,\" she pouted.\n\nI looked down at her sister, who was lying helpless and used up. \"That's silly. This was all just a prelude to the main act.\" I nodded at Julie. \"Let's tuck her in with Shannon, before you and I get down to business.\"\n\nHer smile was brilliant. \"Promise?\"\n\n\"Absolutely.\"\n\nI lifted up Julie, and Lisa drew back the cover off Shannon. I laid the tiny teen down next to our teacher, pulling Shannon's arm around her, before covering them up.\n\n\"Was this your plan? Wear us out, one by one?\" Lisa teased.\n\n\"I don't want to wear you out. I want to love you until dawn,\" I told her, kissing her softly, my tongue brushing against hers.\n\nThe flashlight we'd attached to the overhead cord was dimming, but it had served its purpose. \"I think that's enough of the craziness for a while. I'm going to turn that out, and lay with you two for a minute, like the first night.\"\n\nI reached up, removing the light from the string. I opened up the big sleeping bag, which had served as a mattress for us so far, lay down inside it and brought both of my girls in to my arms. With everything much saner, I turned out the light, dropping it behind my head. It was pretty much shot anyway. \n\nLisa kissed my shoulder. \"You look like you're worn out. That was pretty crazy what you did to Julie.\"\n\n\"Not at all. It's just that the craziness isn't what I need right now. I just want to hold you, touch you, feel you against me. This is all so incredible. You here with me? Unbelievable. I just need to experience it for a while.\"\n\n\"Any more incredible than doing our teacher?\" she teased.\n\n\"Different. I knew that I'd have her someday, just as I knew for a while that I'd probably be having your sister. But you two? Either one of you is beyond belief. Having both of you here with me, like this? Forget the sex for a moment. Just this, naked, alone, touching, kissing, it's totally and completely beyond even my best fantasies.\"\n\nI kissed Lisa firmly, my hand caressing her. \"You were out of reach. Too much to hope for. The hottest girl in school, and always taken.\"\n\nShe giggled sweetly. \"I'm not the hottest girl in school.\"\n\n\"What are you, nuts? Of course you are. Tell her, Teri.\"\n\nTeri chuckled. \"Gotta be top two or three. It's hard to pick just one. But she'd be on anyone's list. That body? Are you fucking kidding me?\"\n\nLisa was rubbing me gently between my legs, keeping my cock, if not hard, thick and substantial. \"This is pretty fantastic, isn't it? This, here, now. Us.\"\n\nI was enjoying the fondling. I knew that before long, I'd be putting it to her again, but for the moment, I wanted the intimacy. \"Fantastic is a nice word for it.\"\n\nLisa leaned across me, her hand reaching for Teri. \"Are you having fun, Teri? I know this is all kind of crazy. Not what I expected when I thought you should join us.\"\n\nTeri giggled. \"And what were you expecting?\"\n\nLisa sighed, resting her head on my shoulder. \"Something totally different.\"\n\nI kissed her forehead. \"Share?\"\n\nShe chuckled. \"I guess I thought it would be me and Julie here in the bag with you, with Miss Shannon and Teri looking on. You'd take turns with me and my sister, while they watched. More voyeuristic, I guess. Less hands-on.\"\n\nI hugged her to me. \"Kind of what I was expecting,\" I told her softly. \"More intimate than what happened.\"\n\n\"Me too. I thought I'd be in for a show. Not the designated fluffer,\" Teri added.\n\n\"Fluffer? How do you even know about things like that, little Miss Innocent?\" I teased.\n\n\"I thought you had a thing for smart girls?\" she responded. I felt her hand join Lisa's on my cock, getting a little more of a rise out of it.\n\n\"I have a thing for this one.\"\n\nShe kissed me on the neck. \"Can I say something?\" she asked hesitantly.\n\n\"Of course.\"\n\n\"It's not always like this, is it? I mean, I really like playing with your thing. It's so cool to hold it, taste it, see what it does, feel how you react. But the way you pound these girls with it, what you did to Julie, it's kind of scary.\"\n\nLisa laughed. \"No, it's not like this. Not in my experience.\"\n\nTeri sighed. \"Thank God. I'd be scared to death to let him have me. I honestly think I'd dislocate a hip or something. I wouldn't be able to walk for weeks.\"\n\n\"Now you're being silly,\" I told her. \"Don't you remember last night? The way I was with Julie? Slow and gentle is the key for the first time.\"\n\n\"I figured that might have been because of the situation.\"\n\nI pulled her chin up and kissed her gently. \"No. I'm not a beast.\"\n\nTeri was obviously still curious. \"What was your first time like, Lisa?\"\n\n\"Nothing to write home about. After a couple of months of fooling around, and getting fingered plenty, when we finally decided to do it, it took a few minutes to get it inside, and a few seconds before it was done and wilting.\" She giggled. \"I thought two minutes was all I could expect.\"\n\nShe climbed on top of me, relaxing in my arms. \"To be fair it wasn't always like that. Darrell was a little better, and he'd at least get me off with his hands now and then. And a few times he was up to the task, giving me a few minutes before popping. I never came on a cock before this one, though.\"\n\n\"What's it like?\" Teri asked, softly.\n\nLisa leaned over and kissed Teri. \"Beautiful. Really. Someday you'll see. Feeling so full, and wanted. That crazy feeling building up inside, nothing like doing it to myself. God, it's nice.\" She turned back to me, kissing my lips gently. \"Make me feel like that again, Alex?\"\n\n\"I'd love to.\"\n\nShe sat up, and reached between her legs, slowly sliding me inside of her. \"This, right now, you've got to try it, Teri. Feeling him open me up, his thick shaft stretching me so deliciously. The full feeling when it's finally inside. Moving a little until the fit is a perfect match, knowing that my little pussy is encasing his entire cock.\" She settled down on me, wriggling her hips a bit. \"There. Now. I can feel the pressure on the back of my pussy. If he was even half an inch longer, I couldn't take it all. It's on the verge of uncomfortable, so big, so thick, filling me completely. Like it was made just for me. God, Teri, it's amazing.\"\n\nShe rose up, until I was barely inside her. \"You can pull out, and feel it all over again, the slow filling, the feel of him rubbing my insides. Slow, like this,\" she murmured, taking her time riding my full length. She giggled. \"Until he can't take the teasing, and hammers it home.\"\n\nI took the hint, held her hips, and drove my cock into her, making her grunt. \"Shit,\" she gasped. \"Mind blowing. Knowing how bad he wants me.\"\n\n\"How would you do me, Alex? My first time.\" Teri asked.\n\nI pulled Lisa down and kissed her softly. \"Ok if I show her? With you?\"\n\nLisa kissed me back. \"I'll be a virgin for you. Show us both what it could be like.\"\n\nI rolled over with her, putting her on her back. \"I'm no expert, of course, but first of all, we spend a lot of time getting you worked up,\" I said to my lovely audience of two. I leaned over Lisa, kissing her warmly, my tongue exploring her mouth, taking my time. I kissed her all over her pretty face. \"I can't believe this is happening,\" I told Lisa softly. \"I want this to be perfect. Talk to me. Let me know if I do anything wrong. Share with me what you like.\"\n\nI moved down her body, nibbling her ears, tasting her neck, pressing my lips against her collar bone. My hands were in motion, gliding across her skin, caressing gently, learning her.\n\nMy southward journey paused at her breasts, letting me enjoy them the way I had wanted to the past couple of days. Tasting, sucking, nibbling, tugging at her hard nipples, squeezing the supple and generous flesh. \"You have the most wonderful tits. This is Ok, right? Let me know if I'm too rough,\" I told her softly, before sucking her nipple deep into my mouth, biting down carefully on her breast, hearing the sweet sound of her first moan. I flicked my tongue across the pink peak, before taking it between my teeth and pulling, stretching her tit out. Her torso twisted, offering her tit to me. When I felt the tension was too much, I closed my lips and sucked hard on her nipple, until it popped free. I gave its twin similar treatment, playing until the need to continue urged me downward.\n\nThe voyage was a slow one, exploring the flatland of her waist from side to side, from tits to tan-line, teasing her cute innie, nibbling her soft flesh. I pushed the sleeping bag down, exposing her body under the dim outside light of the fire reflected off our tent. My eyes had grown accustomed to the dark, and I could barely make out shadows of my playmates. ",
        "I was at her hips, licking her hip bones, tugging on her fine pubes with my lips. \n\n\"You don't mind the hair?\" she asked nervously.\n\nWhat a stupid question. \"It's beautiful. Perfect. Like all of you. So fine and soft, all natural like everything about you. Never shave it off. It would be a crime.\" I ran my fingers through it playfully, tugging lightly.\n\n\"I thought guys liked it shaved,\" she said.\n\n\"I don't know about anyone else, but I swear as God is my witness, I couldn't imagine anything more perfect than your pretty little playground here. You keep it trimmed so cutely, a little arrow, pointing the way to heaven.\"\n\nI heard her giggle, and felt her running her fingers through my hair. \"I really like that. The way you're touching me and playing with me. It's so sexy.\"\n\nI was rubbing my face against the soft down, my tongue brushing her skin, my hands moving lower, at the joint of her leg, my thumbs stroking the soft flesh where her legs met her body. \n\nWith her puffy tight pussy in front of me, I took the playing more seriously, exploring her, playing with the narrow folds of flesh, pinching gently, pulling, parting her lips. She started squirming, her hips rolling. I licked the inside of her thighs, the outside of her swollen lips. I teased the inner folds open, sucking each one gently, hearing more delightful moans.\n\nMoving my mouth over the top of her pussy, I sucked in all the flesh surrounding her clit, rubbing my tongue against the folds, pushing around the elusive bump within. \"God, Alex, that's good,\" she moaned, her hand back in my hair. An excellent barometer. \n\nI eased a finger inside of her, pressing against the outer walls, pushing downward, feeling the give of her flesh. I continued the sucking, while a second finger joined the first, easing her open, preparing her.\n\nI looked up toward Lisa, and saw that Teri had followed me down, her face only a couple of inches from mine, straining in the near total dark to see what I was doing.\n\nLisa's hips were driving against my mouth, her breath coming faster, her hands pressing my head down. \"Close,\" she whispered, \"I'm so close.\"\n\nI gave my tongue a little more freedom, piercing the folds, working its way down to tease her sensitive clit while I kept my mouth over her. My fingers were teasing the upper inside of her pussy, rubbing across the rough texture just a couple of inches inside, urging her onward.\n\nThe orgasm burst upon her suddenly, her legs clenching tightly around my head, her fingers pulling at my hair. \"Fuuuuuuuck,\" she groaned, lifting her hips several inches from the ground, her entire body taut as one of the ropes tying down our tarps.\n\nHer body slowly released its tension, settling back down, her legs opening invitingly, her hands brushing my hair back. \"Sorry, I'm sorry,\" she whispered. \"I didn't hurt you, did I?\"\n\nI gave her a long slow lick the entire length of her pussy. \"No. It was nice.\"\n\n\"Nice?\" she asked. \"I almost tore your hair out and snapped your neck.\"\n\nI climbed up her body, wiping my face dry with a hand, before kissing her. \"Nice. I made you feel like that. That reaction. I loved it.\"\n\nI kissed her again more thoroughly. \"Are you ready for me now?\"\n\nShe nodded, \"Please. I need to feel you inside me.\"\n\nI opened her legs, taking my cock in hand, and rubbing it up and down her opening, spreading the lips, pushing in just a bit. \"I'm going to start now,\" I told her, pushing the head in far enough to lodge it in her opening. \"You're tight. Really tight,\" I told her.\n\n\"Too tight?\" she asked, teasingly.\n\n\"I hope not.\" I leaned over and kissed her again. \"If I forget later, I want to thank you for this. For choosing me.\"\n\nShe hugged me, \"God, how I wish you had been my first,\" she said.\n\n\"I am. This may hurt a little, but I'm going to take your cherry now. I can't get in any further until I do. Alright?\"\n\nShe looked up at me, her gorgeous blue eyes only glistening shadows in the dark. \"I'm ready.\"\n\nI bent over her, my hands holding her shoulders. I thrust hard, driving into her to the very root. \n\nShe gasped, thrusting back against me, her back arching, her fingers digging into me, \"Oh God!\" \n\nI held still, while she ground against my cock, \"I know it hurts a little. Let me know when it's Ok to move again.\"\n\nShe moaned, \"I felt it, Alex. I really felt you take my cherry,\" she said.\n\n\"I know, it was wonderful,\" I told her, leaning over her and kissing her softly, my cock buried inside of her.\n\n\"No, I'm serious. I could swear it was the real thing. That was fucking intense,\" she said, clutching me to her. \"Fuck me now, slow and easy, while I get used to it.\"\n\nI eased my cock out of her slowly, and took my time with her, screwing her so slowly, long full strokes. I started moving my hips more sideways, stirring her up.\n\n\"Oh shit! Do that some more,\" she said.\n\nI fucked her for a long time, like that, on her back, playing inside of her. Fast and slow, short strokes, and long ones. All the different angles I could find, moving her legs around, using her wonderfully.\n\nTeri spent much of the time behind me, up on her knees, holding me, touching me, kissing my shoulders and neck, and watching my cock pierce Lisa endlessly. \"How long does this go on?\" she asked quietly.\n\n\"Until one of us can't take it any longer. I'm thinking hours.\"\n\n\"You're going to last hours?\" Teri asked.\n\n\"No. I'm going to last a good long while, over and over again.\"\n\n\"When are you going to go crazy on her?\"\n\n\"I'm not. This is our first time. She may not even come. This is all about learning each other, and getting that sweet virgin pussy of hers used to having my fat cock inside of it.\"\n\nLisa was beautiful, laying there for me, eyes closed, letting me have her. I felt her start up the peak toward orgasm a few times, before falling short and moaning sweetly when I'd change things up.\n\n\"Let her come, Alex,\" Teri said. \"I want to see it. A virgin's first orgasm on a cock.\"\n\nIt was worth a try. I leaned over Lisa. \"I want you to come for me. What do you need?\"\n\n\"Long firm strokes, Alex. All the way to the bottom,\" she said softly.\n\nI kissed her, and did as she asked. Long, firm and fast, all the way.\n\n\"A little slower, and grind at the bottom,\" she gasped.\n\nI slowed down, fucking her hard, grinding my hips against her with every stroke. I'd found her weakness, and watched her scale the peaks again, the sexiest sounds escaping her lips.\n\nI could feel her legs trembling, and I pressed them backward, my hands gripping the back of her thighs tightly. I tried to maintain that same pace, not wanting to change anything, when it seemed to be working for her so well.\n\nShe started whimpering, squeezing her own tits, tugging on her nipples. \"Harder,\" she begged.\n\nI didn't speed up much, but each thrust was powerful, shaking her body. I found a motion that rubbed my pubic bone against her clit, sliding against it, at the end of each stroke. Her moans and whimpers became a gasp, and then quiet. I kept pounding her, and she finally went off, huge. She screamed out, and I hurried to cover her mouth with my hand, while I kept fucking her, milking the orgasm out of her. She screamed into my hand again, successfully muffled, squirming underneath me.\n\nI eased up on her, fucking her slowly, while she recovered. She lay quietly, legs splayed open, unmoving, while I still played inside of her. She giggled abruptly. \"Now THAT's how you fuck a virgin. Damn, Teri, I'm so jealous.\"\n\n\"Jealous of me?\" Teri laughed.\n\n\"Hell yeah! That's what it going to be like for you, only better,\" Lisa said stretching sexily. \"I got 5 seconds and an apology.\"\n\nTeri gave me a hug. \"Is that what our first time's going to be like, Alex?\"\n\nI stopped my motion and pulled her in for a kiss. \"Yeah, except I won't stop you from screaming.\"\n\nI pulled out of Lisa, and turned her over, lifting her hips up nice and high. \"I've been dying to do this,\" I told her.\n\n\"Don't let me stop you,\" Lisa answered with a chuckle.\n\nThe last one had been for her, this one was all for me. I slid back into her and grabbed her hips, hammering her hard from behind. When I got a little tired, I made her fuck me, holding still while she did the work, backing up against me. I played with her firm round ass cheeks, squeezing and fondling them when I was screwing her easily, before grabbing her hips again and fucking her as hard as I could. \n\n\"Fuck,\" she gasped, \"I'm going to come for you.\"\n\nI looked at Teri, slowing the pace, \"Don't let her scream.\"\n\nTeri scrambled up the sleeping bag, holding Lisa's head in her lap. I hammered her again, as hard and fast as I could, for as long as I could last. I felt her tensing up, her teasing whimpers accelerating. It felt incredible, fucking her like I was, as hard as I could, claiming her completely, stretching her, molding her tight little pussy into my shape. I couldn't see what Teri was doing, but I knew Lisa was on the edge. And she was taking me there with her. \"I'm coming, baby,\" I groaned, my hips going into overdrive, until I slammed deep into her, erupting powerfully inside. \n\nLisa was trembling, but quiet. \"She's coming, Alex,\" Teri said softly.\n\nI pushed the last of my cum into her, with short firm strokes, bottoming out with each. She whimpered sweetly, while I finished with a few last easy strokes, enjoying her while any remnant of my hardness lasted.\n\nTeri moaned, \"Lisa!\" She gasped a few seconds later. \"Oh God, Lisa!\"\n\nI eased in and out, until I wasn't hard enough to continue, sliding out of her. She stayed on her knees. I moved forward, and saw she had her head between Teri's legs.\n\nI sidled up to Teri, holding her. \"I guess she's as wild as her sister,\" I said softly, stroking Lisa's hair.\n\n\"Jesus, Alex,\" Teri whispered. \"She's so good at it.\"\n\nI played with Teri's breasts, kissing her shoulder. \"I'll have to ask her for lessons.\"\n\nLisa rolled off, gasping for air. \"Damn!\" she murmured. \"I need a break.\"\n\nI laughed, straightening out the sleeping bags so we could lay in them together, a hottie on each side of me. \n\nI pulled Lisa to my side, hugging her to me. \"You're just full of surprises this weekend.\"\n\nShe cuddled in tight, \"Is that Ok?\" she asked sleepily.\n\n\"It's wonderful. Are we official now?\" I asked, kissing her forehead.\n\n\"I hope so. Any more official I wouldn't be able to walk,\" she whispered.\n\nI caressed her amazing body, still finding it hard to believe she was mine. Teri was squirming against my other side, looking for attention.\n\nI turned to her, and found her lips, kissing her gently. She sighed, relaxing against me. \"I could kick myself for losing you,\" she said softly.\n\nI chuckled, which had Lisa tunneling under my arm. \"You can't lose me, ever.\"\n\n\"You know what I mean. All these years when I didn't know, and now, because I was afraid.\"\n\nI pressed my lips to her ear. \"Girlfriends come and go. You are for keeps.\"\n\nShe kissed me again, a little more possessively. \"Would you be my first if I asked?\"\n\n\"Absolutely. I might have to invite the sisters along for the show, but there's no way I'd miss that.\"\n\n\"I'm having second thoughts. That sex thing looks kind of fun.\"\n\nI gave her ass a squeeze, while she giggled. \"It does!\" she whispered.\n\n\"Let's see how you feel by the light of day.\"\n\nShe kissed my chin, \"How do I feel now?\"\n\n\"Like a dream come true. Honestly, you guys are killing me. The only thing I have left to fantasize about is going all the way with you. All my other fantasies have come true.\"\n\n\"Like?\" she crawled more on top of me, her leg between mine, her arms around my neck.\n\n\"Anything with you. Seeing you naked, feeling your mouth on me, even just kissing you, are all things I've dreamed about for years.\"\n\n\"Not disappointed?\" she asked tentatively.\n\n\"Not in the least.\"\n\n\"Not even the boobage? I'm the only B cup around.\"\n\n\"I love your cute tits, Teri.\"\n\n\"What other fantasies? And not about me.\"\n\n\"Shannon, of course. I've been dreaming about her for over a year. Unbelievable.\"\n\nShe chuckled, kissing me softly. \"Good word for it. What else?\"\n\n\"Lisa. I use to fantasize about her a lot last year.\"\n\n\"Not Julie?\"\n\n\"No, she was under the radar until the last couple of months. And somehow I believed I could get her if I wanted her.\"\n\n\"Uh, yeah. Not like she didn't make it pretty damn clear.\"\n\n\"What was your favorite?\" I asked.\n\nShe kissed me. \"Easy. When you pulled out of Heather and came in my mouth. The first time I put my mouth on any guy's thing, and I got a mouthful. Between her juices on you, and the way you shot in my mouth, I shocked myself that I was doing it. Then swallowing your cum and sucking you back hard. God, I felt so naughty. Nasty. A dirty little girl, for you.\" She was rubbing her leg against my cock, and kissing my neck. \"How about you?\"\n\n\"The whole sleeping bag scene last night, especially the moment you climbed on me naked. My heart almost stopped. All up until the moment you were poised to take me, only a few seconds from making the ultimate fantasy come true, and that damn Shannon with the flashlight.\"\n\nShe giggled. \"Kind of how I felt when the sisters showed up at your tent. Otherwise, I knew that Heather and I were going to give you everything.\"\n\nI held her quietly, caressing her. \"John, huh?\"\n\nShe sighed. \"Yeah. I'm interested. Lost two in one night. You and him. To the top of your list, no less.\"\n\n\"Patience, my naughty little BJ queen. I have a feeling Dominique and he may not last.\"\n\n\"Really? Why?\"\n\n\"She knows he likes you better. She was jealous, when you were on his lap kissing. She told me to either take her, or take you back to my tent. Doesn't sound like she's too serious, if taking her was one of the options.\"\n\n\"And you chose me. Any regrets?\"\n\nI spanked her bottom. \"None.\"\n\nShe lay on me kissing my shoulders and neck. \"Sleep, naughty girl.\"\n\n\"Can I suck you again?\" she said softly.\n\n\"I'm done. Really. Wiped.\"\n\n\"I don't care. Can I?\"\n\n\"Go ahead if you want. Like I would ever say no to that?\"\n\nShe climbed into the sleeping bag and took me in her mouth. It was wonderful and relaxing to feel her warm mouth on me. She was getting better, and she got me semi-hard. Pretty big and thick, but not quite fully up. She was content to suck and play with me for a long time, long enough for me to go to sleep with my 7th grade fantasy girl's mouth full of my cock.\n\n* * *\n\nI woke with the dawn, and a bad case of morning wood, in a tent full of naked women. I had to pee badly. I managed to free myself from the tangle of arms in the sleeping bag, and headed for the tent entrance, slipping out quietly. It took me a minute or so to soften enough to take a leak. The rain had stopped, and I looked around at the shelter, where everything was dead. \n\nI would get the fire going in a minute. \n\nI climbed back in the tent, stroking myself to hardness. I wanted to wake up Shannon right. She was only half covered by the sleeping bag, and she looked incredibly sexy. I moved the covers off of her, and opened her legs. God, I couldn't believe I was going to fuck her again, even if only for a little fun.\n\nI rubbed myself across her opening, firming up instantly, and slid my cock into her. It took a little effort, and I leaned over her, kissing her lips. She slowly woke, opening her mouth to me. I kissed her deeply, my tongue exploring her mouth, while my cock eased its way into her.\n\nShe sighed, stretching and smiling. \"Morning handsome,\" she said softly.\n\nShe cracked one eye, tilting her head. \"What time is it?\"\n\n\"Sun's coming up. I'm going to tend the fire in a minute and get the coffee going. But I couldn't resist having you again.\"\n\nShe smiled. \"I'm glad. I've never been woken up better.\"\n\nI fucked her easily, enjoying the ride, wanting nothing more than that feeling of being inside her.\n\n\"Did we really do it with everyone watching?\" she whispered.\n\n\"Uh, huh.\"\n\n\"And again, with all those girls teasing me?\"\n\n\"Yep. They love you, you know. You're everyone's favorite, not just mine.\"\n\nShe sighed. \"God, I can't believe I let this happen. If word gets out...\"\n\n\"Not a word to anyone. Ever. I promise. It stays in this tent. And in a couple of minutes, you're going to get dressed, and help me with the fire and coffee.\"\n\n\"Just a few more minutes?\" she said sleepily.\n\nI kissed her lips softly. \"Sure. I'm going to say good morning to Julie for a bit. She fell asleep shortly after you.\"\n\n\"Mmm. Ok. You know how to wake me when it's time.\"\n\nI pulled out of her, covered her up, and moved over a little, uncovering Julie. She was dead to the world, and I was fucking her for a couple of minutes before I got any response at all. \n\nShe was sighing in her sleep, while I long-stroked her. Her eyes popped open, and she looked startled. \n\n\"Shh, it's me, baby.\" I told her, stroking her hair, and pressing my lips softly to hers.\n\nShe sighed deeply, relaxing, \"What a dream!\" she whispered. \"I dreamed you were teaching me how to fly, and to do it, I had to have you in me. When I woke, I thought we were really flying.\"\n\n\"Sorry, no flying.\"\n\nShe purred, wriggling against me. \"This is so much better.\"\n\n\"I'm going to go get the fires burning, and start the coffee. But I wanted to tell you how wonderful being with you was. And say good morning to my new girlfriend.\"\n\nShe sighed, while I fucked her gently. \"It was wonderful, wasn't it?\"\n\n\"Perfect.\"\n\n\"You going to wake up sissy like this?\"\n\n\"I thought I'd let her sleep,\" I whispered. \"We were up pretty late.\"\n\n\"No. She'd love this. I promise. A little wakeup surprise on our first full day together.\" \n\nThis was getting a little crazy. \"Ok, I hate to stop though,\" I said.\n\nShe giggled. \"Don't worry. You're going to get as much of this as you can stand.\"\n\nI kissed her softly, pulling out and covering her up. \"You can sleep for another hour or so.\"\n\n\"Mmmhmm,\" she murmured.\n\nI crawled into the sleeping bag, and rolled Lisa gently onto her back. I moved on top of her, and she reached for me, opening her legs, her eyes still close. I guided my cock into her, her sister's juices still wet on my cock. I pushed into her firmly, all the way inside within a couple of strokes, her arms holding me.\n\n\"Never wake me,\" she murmured.\n\nIt was slow and gentle, like the previous two, and she laid there quietly, not moving other than to sigh or moan quietly. I kissed her face, neck and shoulders, while I enjoyed her. When I kissed her, she opened her mouth slightly, letting me do whatever I wanted, her tongue barely moving in response. \n\nI was getting excited, and slowed to almost a stop. \"Go back to sleep. It was just a dream,\" I whispered in her ear.\n\nShe smiled and murmured, \"Thank you.\"\n\nI had a brief urge to wake Teri the same way, but I managed to suppress it, going back to Shannon. She accepted me easily, and I fucked her a little harder, my excitement level almost out the roof. Doing the three of them like that was beyond incredible.\n\n\"God, I need to come for you,\" I whispered.\n\n\"Good,\" she whispered.\n\nI hunched over her and gave her a minute or so of fast thrusting, until I had reached my limit. I put my lips against hers, and came strongly, pumping her full. She kissed me back, holding me. I pulled out of her, and she sighed sweetly. \"Damn, Alex. Best alarm clock ever,\" she whispered.\n\nI climbed up and held my cock in front of her mouth. She looked up at me, her eyebrows cocked. \"Really?\"\n\n\"Please,\" I begged.\n\nShe sat up a little, bent over and took me in her mouth. She sucked me clean, and kept at it for a while, until I started to firm up, stopping before I could get fully hard.\n\n\"You are so spoiled,\" she whispered, teasingly.\n\n\"I know.\"\n\n\"Help me find my clothes,\" she said.\n\nWe sorted through the clothing scattered around the tent, and found hers and mine. We got dressed, bumping into each other at the front of the tent. I reached out for a couple of nice gropes, which she would tolerate for a bit, before pushing me away. \"Later. At home.\"",
        "I pulled her close for a hug and a kiss. \"Is there going to be a later, for us?\" I asked nervously.\n\n\"I hope so,\" she said.\n\nWith shirt and shorts on, I climbed out of the tent into a new day. \n\n* * *\n\nI did my job, getting the fires going, putting on some boiling water, and starting the coffee. I thought I'd be exhausted, but I was exhilarated. \n\nShannon joined me shortly after I got going, and parked her sexy little butt in front of the fire, sipping her coffee and watching we work.\n\nI walked around sleeping bodies, seeing them slowly come to life, while I started putting some things away, folding up the tarps that were on top of the logs, breaking down the two shelters that nobody was under. A few people were moving around, and Julie came over and gave me a hug and a kiss. \n\n\"Cocoa's with Miss Shannon,\" I told her.\n\nShe grinned sleepily, filling her mug and sitting next to Shannon, leaning against her. Shannon put her arm around her. It was so cute, I wanted to drag them back to my tent.\n\nThe sun was out, the sky was blue, and the day was quickly heating up. The breakfast crowd started in preparing all the food that was left. We were going to be picked up at 11:00, so we didn't have too much time to waste. I started breaking down the girl's tents, watching couples emerge from their tents, hand in hand, heading for the coffee, the food, or down toward the water. \n\nI saw John emerge with Dominique, both of them looking quite content. Dominique gave me a wave and a smile, as she headed upstream, and John headed down. Max emerged, leaning in and giving Wendy a kiss at the entrance of their tent. He grinned hugely headed my way.\n\n\"Success?\" I asked.\n\n\"Third base, and then some,\" he said. \"Give me some direction. I'm your slave for life.\"\n\nI laughed, and accepted his help folding up the Samuelson girls' tent. Heather walked over as we worked on the tent she was supposed to have shared with Erin. She gave me a hug. \"Morning, Alex.\"\n\nI leaned over and gave her a small kiss. \"Sleep well?\"\n\n\"Better than I would have in that tent of yours, unfortunately.\"\n\nI chuckled. \"I'll see if I can't make it up to you.\"\n\n\"You do that. Making me sleep all alone,\" she pouted.\n\nShe helped Max and I fold up the tent, stacking their gear next to it. I looked over and all my girls were sitting by the fire, chatting, content to let me slave away. \n\nThe morning flew by, eating breakfast flanked by the sisters, tearing down the shelters, my tent, cleaning up the campsite. It was fun to see that six of the eight guys had managed to get paired up. Ellen was all googly eyed for one of the underclassmen, which suited me just fine, getting her away from Dr. Reed.\n\nNo surprise that me and my new girlfriends got quite a bit of attention, especially with Teri constantly with us. I was feeling pretty damn good about myself, free with the hugs and kisses, until Shannon put the kibosh on that. \n\n\"Enough, Alex. We can let a little PDA slide, but you're getting a little ridiculous. Set an example.\"\n\nI grinned. \"I am Miss Shannon.\"\n\nShe rolled her eyes at me. \"A GOOD example for once, Mr. Hamilton.\" Any sternness in her tone was ameliorated by the little wink she gave me.\n\nAt 10:30, the site was cleared and the gear stacked out on the road. I had help this time, three willing girlfriends, if I got to count Teri, as well as Max and even Wendy. It only took 1 trip for all of us to lug my gear out. \n\nWe made one last pass of the campsite, and waited for the bus. I pulled Julie to one side, and leaned against the same railing where we'd confirmed she was my girl the day before.\n\n\"Less than 24 hours ago, right here,\" I teased.\n\n\"Want me to do it again?\" she asked, grinning.\n\n\"I do, but I think that would be a little over the top, don't you?\"\n\nLisa ambled over. \"Let me guess. BJ home-base?\" she asked.\n\nJulie nodded. \"Pretty cool, huh?\"\n\nThe bus showed up a few minutes later, and my girls ran for the doors. \"We'll let you do the heavy lifting,\" Lisa said.\n\nI did. It seemed like John, Max and I did 90% of the work, but that's probably just me. Shannon and Dr. Reed were back in teacher mode, giving directions, and chasing people down. \n\nI got on the bus, sad to leave. One unexpected storm had changed my life forever, I knew that, and wondered how things would be. The girls waved to me from the back of the bus, and I saw they had commandeered the entire last bench. It was going to be a cozy fit, with me and my pretty blonde girlfriends on one side, and John on the other, flanked by Dominique by the window and Teri on his other side next to Lisa.\n\nMax and Wendy were in front of us, and Heather was seated next to Miss Shannon on the other side. Dr. Reed was in the first row, responsible for chaperoning the front, while Miss Shannon had back of the bus responsibilities.\n\nShe turned around and faced us. \"Don't get too carried away back there, you hear me, Mister Hamilton?\"\n\nLisa leaned forward and whispered in her ear. Shannon blushed almost as red as her hair, and turned around.\n\nI pulled her close, \"What did you say to her,\" I asked softly.\n\n\"I told her we're going to blow you all the way home. She can have a turn if she wants,\" she whispered to me.\n\nJulie already was working on opening my pants, not content to just open the top, but pulling them down to my ankles. The bus wasn't moving for more than a few seconds before she had her face in my lap.\n\nIt looked like it was going to be a hell of a year.\n\n===============\n\nI hope you enjoyed The Last Boy Scout. I have a few more of Alex's adventures plotted out, but nothing as extensive as this little tale. His early relationships with Miss Shannon, and with John. I like the characters and may add to the series, once I finish a few more works that I have committed to. Thanks for all the support, votes, and comments. They are always appreciated."
    ],
    "authorname": "Tx Tall Tales",
    "tags": [
        "sisters",
        "teacher",
        "oral",
        "best friend",
        "blowjob",
        "drunk",
        "sleeping",
        "threesome",
        "teens",
        "camping"
    ],
    "category": "Group Sex",
    "url": "https://www.literotica.com/s/the-last-boy-scout-ch-04"
}
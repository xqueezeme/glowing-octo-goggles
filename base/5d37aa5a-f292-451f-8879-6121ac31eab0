{
    "title": "Surefoot 23: Baby Steps",
    "pages": [
        "Stardate 47544.94\n\nUSS Surefoot-A, Deck 2 Fore, Command Quarters -- 0700 Hours:\n\nCaptain Esek Hrelle woke up beside his son, sensing the infant's active state. He drew in a little closer, rubbing the side of his muzzle against Misha's, making him purr. Hrelle grinned and rubbed Misha's tummy, making him gurgle.\n\nOpposite Misha, Kami stirred enough from her own sleep to say, \"Get him up and feed him, ass. I want another hour.\"\n\n\"Sorry,\" he murmured, smiling, lifting up the cub and taking him into the next room, obtaining the bottle from the storage unit and sitting down behind his desk to feed Misha in his arms while he checked his messages and ship updates, smiling at the one from his old friend and fellow captain Weynik of the Starsong, who was promising to beam over gifts for the cub on their next encounter.\n\nThen his attention turned to the overnight change in their course back towards the Bajoran Sector, towards the Tavela Minor system, courtesy of orders from... Admiral Oscar Wayne? Hrelle thought that old guy had retired, but no doubt the recent changes in the Galaxy have prompted more than a few men and women his age to slip back into the uniform.\n\nIn his arms, Misha grumbled, and Hrelle lifted him up onto his shoulder to burp him, before setting him down on an adjacent mat to change him. \"Okay, my little Warrior Prince, let's see what you've got for Papa this morning-\" He wrinkled his nose at the contents of the diaper. \"Ooh yes, another bundle of toxic delights. You shouldn't have, my son. Truly.\"\n\nMisha smiled up at him.\n\nAfter changing and dressing him, Hrelle clad himself in workout clothes and reviewed his schedule for the day, Misha secured in his own little seat beside him, his father occasionally lifting up a vial from a specially prepared kit, uncorking it and bringing it near Misha. \"Vanilla. Va-nill-la.\" He repeated it with the scents of grapefruit, cinnamon, Denebian pine, pumpkin, Caitian peppermint, burning coal, shuris musk, and others, naming them all, watching his reaction to each -- he liked cinnamon best, it seemed, and Tiburian rat the least.\n\nHrelle smiled. A million, million scents out there for his son to discover. It would be a grand adventure for him. And for his Papa as he accompanied him.\n\n*\n\nDeck 3 Fore, Gym -- 0742 Hours:\n\nMisha sat in his chair and laughed as he watched Hrelle struggle with another sit up, while closer, C'Rash managed another set in the interim, encouraging her uncle and Commanding Officer in her own unique way. \"Come on, Fat Cat, you don't want to let your son down while he's watching, do you? You'll scar him for life.\" As she glanced at the infant, she blew a raspberry that delighted him.\n\nHrelle grunted. \"You're- You're- You're demoted-\"\n\nShe made a show of doubling her speed. \"Don't you think it's punishment enough to smell your farts these exercises are producing? And think of your poor cub...\" Then she paused and asked, \"Unless you need to stop because of your heart?\"\n\nHe growled between grunts. \"I thought- we said- you weren't going- to talk about- that?\" His breath quickened. \"I- I can- outlast you- you-you f-fu-\"\n\n\"Language,\" she scolded him, winking at Misha.\n\n*\n\nDeck 2 Fore, Officer's Mess -- 0826 Hours:\n\nMisha screwed up his nose at the taste of grapefruit juice on Hrelle's finger, making his father chuckle. \"You think that's bad, think about having to actually eat one of these.\" He held up his own breakfast in illustration. \"You want some now?\"\n\nMisha tried to blow a raspberry of his own, to his father's sheer delight.\n\n\"Don't you dare give my brother any of that,\" warned an approaching voice. Ensign Sasha Hrelle and several other cadet squad leaders came up to the table with their breakfast trays. Sasha sat down beside her father, leaning in to the infant, touching his nose and going, \"Beep Beep!\" Then she spared a look at Hrelle's breakfast. \"Is Papa Cat giving you his awful food instead of eating it himself like he should?\"\n\nHrelle grunted as he tucked back into his grapefruit and lime syrup, ignoring the appetising scents of bacon and pancakes from Sasha's tray. \"It's not that bad, actually. Healthy.\"\n\nSasha put a deliberately-generous portion of her own food on her fork and waved it in his direction. \"Well, it's nice to see men of your very advanced years making an effort to take care of themselves.\" She forced the contents into her mouth, somehow managing to add, \"Really, keep it up.\"\n\nHe grunted again -- dabbing a forefinger into the lime syrup and giving Misha a suckle; he liked that better. \"And do the rest of you Squad Leaders want to risk Extra Duty making fun of your Commanding Officer?\"\n\n\"It would seem counterproductive, Captain,\" Ensign Falok observed, stopping and regarding the infant, who gurgled, prompting the young Vulcan male to reply, \"No, I am not your godmother, though our scent and pointed ears are similar.\"\n\nSasha swallowed quickly, eyes wide. \"Wait, do you understand him?\"\n\nFalok sat down beside her. \"The basic meaning behind his vocal inflections can be discerned -- with the superior hearing of a Caitian or Vulcan, that is.\" To Hrelle he added, \"Sir, if the grapefruit is displeasing, may I suggest Vulcan gespar for your next breakfast? They contain fewer calories than Terran grapefruit but are considerably sweeter.\"\n\nHrelle nodded. \"I'll give it a try, Ensign, thanks! It's nice to see there are some decent young people onboard.\"\n\nSasha blew a raspberry. Misha tried as well.\n\n\"No respect from either of my children... are all of you ready for the meeting?\"\n\nDelta Squad Leader Naavos Bal sat beside Falok, the Bajoran's tray sporting kava rolls and a raktajino, whose scents made Misha twist about in his chair to investigate further. \"I have to admit I'm a little daunted by what Commander T'Varik will tell us, Sir.\"\n\nHrelle scooped up another spoonful of grapefruit, wishing he had ordered his with extra syrup. \"It's not what she tells you, but what you should bring with you into the meeting.\"\n\n\"And what's that, Sir?\"\n\n\"Nothing. So many cadets have gone in with such high expectations about what they can request for their first post-grad assignment, only to be shot down like a drone on the target range-\" He scowled at Sasha, who was bringing a syrup-coated piece of crispy bacon to Misha, who had happily clamped onto it with his tiny little pin teeth and growled, triggering a game of tug of war. \"Hey! He's not ready for solids!\"\n\nShe chuckled. \"Relax, Fat Cat, he can't eat it, it's too-\" Then she started as he bit through the piece and began swallowing.\n\nSwiftly Hrelle reached out, gently but firmly opening Misha's mouth and removing the piece, before glaring at the girl. \"If his mother finds out-\"\n\n\"But you won't tell,\" she countered, batting her eyes and pouting her lips as she produced a childish voice. \"Will you, Daddy? Pwease?\"\n\nBefore Hrelle could respond, his combadge chirped. \"Captain, Admiral Tattok is on a subspace channel for your weekly briefing, and then you are scheduled to speak with Admiral Wayne.\"\n\nHe tapped his badge. \"I'm on my way to my Ready Room, Neheru, patch Tattok through when I'm there. Hrelle out.\" To Sasha he added, \"I won't tell Kami, if you take your brother to his godmother. It's her turn.\"\n\n\"T'Varik? But she's holding the cadets' meeting, she can't mind him.\"\n\n\"He's due for his first nap. I'm sure she's capable of minding a sleeping cub and instructing all you other cubs on your futures.\" He rose, but paused and sniffed. \"He needs changing.\"\n\nShe frowned. \"He does?\"\n\nHrelle shrugged, as he lifted up his tray to take back to the replicator unit for disposal. \"Well, someone at the table does. I'm just assuming it's him.\"\n\n*\n\nDeck 3 Fore, Instruction Room -- 0848 Hours:\n\nThe Vulcan stood before the assembled cadets, as a collage of various Starfleet vessels and mission statements flashed on displays behind her. \"There are currently 10,191 Starfleet vessels, space- and planet-based facilities, installations and outposts throughout the Alpha Quadrant and extending into parts of the Beta and Gamma Quadrant. You can, theoretically, be posted to any of them, depending upon need, qualification, and the discretion of the local commanding officer.\n\nHowever, you are permitted to complete a Preferred Assignments List -- otherwise known as a list of your 'Dream Posts'. As the needs of the Service must take precedent, your preferences are not guaranteed, but I can assure you that they are considered.\"\n\nNearby, Misha, nestled in his chair, made a mewling sound in his sleep.\n\nThis prompted titters among the cadets, and a raised eyebrow from T'Varik as she continued. \"For those who will not be furthering their education through obtaining Medical, Engineering or Science degrees, this is your opportunity to choose the direction and pace of your future career.\n\nThis talk is designed to submit a measure of practicality towards that opportunity.\n\nIn any typical collection of cadets, I never fail to see a large number requesting postings on the Enterprise, the Lexington, the Venture, Starbase 1, Starfleet Headquarters, and others... for the most part, these requests are a waste of time. The demand for positions in these areas are permanently high, and even among more talented cadets such as yourselves, the odds of acceptance remain substantial.\"\n\nMisha woke up and made a noise.\n\nT'Varik proceeded. \"I know of at least a few of you with designs to achieve command of a starship before the age of thirty-five. While ambition is laudable, one must temper it with reality; one must learn to walk before they can run. And you must clearly define for yourself your purpose for being in Starfleet.\"\n\n\"Our purpose, Commander?\" one of the cadets asked.\n\n\"Your reasons for putting on these uniforms will be as varied as your individual stories, and will be a mix of both selfless and selfish. This is perfectly acceptable, but regardless of your ultimate posting, there is a truth that must be-\"\n\nMisha began crying.\n\nT'Varik turned to him and approached. \"He needs changing.\"\n\n\"He can't!\" Sasha, standing in the front row, objected. \"I changed him before we came in here! It was horrendous!\"\n\n\"Your brother is apparently a most productive offspring.\" Quickly and efficiently T'Varik set out the changing mat on the table where Misha's chair sat, unbuckled the infant and carefully lifted him up. \"All of you: come closer. Master Misha is about to assist me in demonstrating an important point.\"\n\nThe cadets approached and surrounded, Sasha staying protectively the closest as she watched the Vulcan undo the snaps on Misha's diaper and warning, \"Careful, he should be declared a biohazard.\"\n\n\"I have changed your brother before, Ensign.\" As she undid the diaper and reached for the cleaning materials, some of the cadets made groaning sounds at the smell, prompting their First Officer to remark dryly, \"Similar reactions were no doubt made about all of your excretions at this age.\"\n\n\"Not me,\" Neraxis Nemm quipped, her bald blue Bolian head widening with her proud grin. \"None of my parents could speak for hours afterwards when they changed me.\"\n\nAs she proceeded to clean the infant, T'Varik retained her instructional tone, but kept her eyes fixed on the infant in her temporary care. \"Regardless of your particular posting, your career in Starfleet will be much like caring for an infant: the majority of your time will be spent in mundane, unglamorous, even at times disagreeable tasks. Contrary to popular fiction, each week will not be spent exploring strange new worlds, seeking out new life and new civilisations, or saving the Galaxy.\"\n\nShe bundled the dirty diaper and stored it in a recycling container, before cleaning the affected areas on Misha's furred body. \"But this does not mean that your work will not be required, essential... even vital. I will not earn commendations for this duty.\" She leaned in closer, pausing to stroke the longer fur on the infant's head, making him purr. \"But I will earn the relief, gratitude... and love... from this very young person dependent upon me. In the quest for accolades and a place in the history books, one must not overlook the quieter moments of satisfaction one can attain.\"\n\nThen Misha squirted her.\n\nThe cadets laughed as she covered him with a cloth to catch the rest of the flow.\n\n\"I think Little Brother just told you to piss off,\" Sasha quipped.\n\n\"At his age,\" T'Varik noted, dabbing the stains on her uniform. \"He can hardly be expected to have bladder control.\" But she regarded the sly smile on Misha's face now. \"However, I suspect a sense of humour appropriate for the son of the Captain is already developing in him.\"\n\n*\n\nDeck 2 Fore, Ready Room -- 0910 Hours:\n\nMisha lay snoring in his seat near his father, as Captain Hrelle leaned back and steepled his fingers onto his belly, listening to the man on the screen, an elderly, snow-faced human with a neatly-trimmed beard and icy blue eyes. \"The asteroid is 325 kilometres in diameter, and rich in iron, nickel -- and, this is crucial, deuridium. It was discovered 16 months ago by the Dytallix Mining Company, who fitted a series of low-warp impellers to drive it to those who purchased it, the Kobliad. Are you familiar with them, Captain?\"\n\n\"I'm afraid not, Admiral.\"\n\n\"They're a humanoid species -- and they're dying, due to genetic damage caused by the long-term effects of pollution. They need deuridium to stabilise their cell structures. They need this asteroid.\"\n\n\"So the Dytallix people are delivering it to them?\"\n\n\"That was the plan. The engines were installed and programmed to deliver it to the Kobliad system. It was due to arrive four months from now... but it's just been discovered wildly off-course, and headed towards Tavela Minor; it will collide with the planet in eight months' time. I want you to intercept it, determine the reason for its deviation, and get it back on course and to Kobliad on schedule.\"\n\nHrelle frowned, looking to an equally bemused T'Varik, who spoke up. \"Admiral, according to the data sent to us, the asteroid is 42 light years off-course. The impellers manage a maximum of only Warp 1.6; even assuming an immediate course re-correction, it would still take approximately 90 months.\"\n\nWayne's mouth twisted into a gurn. \"That's not good enough, Commander. I want it there in four, or better. Find a way.\"\n\nAt Hrelle's feet, Misha woke up and started crying. His father bent down, unbuckled him and lifted him up into his arms and comforted him, before facing the viewscreen again. \"Admiral Wayne, we've not even determined what's gone wrong in the first place, why the impeller's systems didn't alert to the course deviation-\"\n\n\"Captain,\" Wayne cut in. \"In my day, we didn't make excuses. We made miracles. The Kobliad need that asteroid for their survival.\"\n\n\"I'm aware of that, Admiral, but there are practical limitations to-\"\n\n\"Captain... if you and your First Officer are typical of your generation, then it's for the best that I came out of retirement to show you how it's done. I'll be in touch again in eight hours to hear your plan.\" He leaned in closer to the screen and frowned. \"And I don't expect to see an infant attending an official meeting again, is that clear, Hrelle? This is a Starfleet vessel, not a cr\u00e8che. Admiral Wayne out.\"\n\nThe screen went blank. Misha tried for another raspberry.\n\nHrelle patted his son on the rear, stroking his tail as he looked at T'Varik again. \"What's our ETA with the asteroid?\"\n\n\"2.3 hours at Warp 6.\"\n\n\"Take us up to Warp 9; I have a feeling our Strategic Engineering Officer is going to need all the time he can get to deliver a miracle rather than an excuse.\" He lifted up Misha and rubbed his muzzle against him. \"While I take my Warrior Prince to be with his Mama for a while.\"\n\n*\n\nDeck 3 Mid, Counselor's Office -- 1036 Hours:\n\nKami chuckled as she breathed in her son's scent for the thousandth time. \"And have you been a good boy for everyone? What am I saying? Of course you have! You are an absolute delight, and anyone who says differently will be gutted and flung into space with the rest of the trash!\" She looked up at the girl sitting opposite her and amended, \"Maybe.\"\n\nSasha was leaning back in the chair, grinning. \"If anyone says anything bad about him, I'll hold the trash door open for you.\" She reached up, touching her cheeks. \"Sometimes it hurts, holding him, and smiling so much with how wonderful he is.\" Then her smile dropped. \"Do you... do you get worried for him, being out here? Space isn't exactly safe.\"\n\n\"I know.\" She tilted her head as Misha grabbed a stubby fistful of hair and tugged. \"But really, no place is completely safe. Admittedly, though, if we had a planetbound assignment on, say, Cait, we'd be less likely to run into something like, say, a Nekrosi space mine.\"\n\nSasha's expression sobered completely, and she affected a sigh of mild exasperation. \"This again?\"\n\n\"Yes, this again. Sasha, you died. You died and you were brought back to life. Something like that will force you to re-evaluate the direction your life has taken.\"\n\nSasha brought her hands together, rubbing them absently. \"There's no re-evaluation. I wanted to be in Starfleet before that; I still want to be in Starfleet after it.\"\n\n\"You're still planning on breaking up with Giles?\"\n\nSasha blinked. \"Yes. But my reasons were there before the Nekrosi incident. You and I have discussed it already, I've just been putting it off for too long.\"\n\nKami nodded. \"And you've changed your Preferred Assignments List. You were going to Advanced Command Training at the Academy Annex on Vulcan. Now... you want to come back here.\"\n\nSasha smiled. \"Sure. Why not? Do you think I can't learn more from someone like him than some instructor who's never even commanded a starship?\"\n\n\"The ACT Program is run by former and current starship Captains of some renown and experience; as amazing and talented as we both know your father is, he would be the first to agree that you could learn a whole lot more from the Program. And certainly T'Varik would second that; she was ready to support your application to it.\"\n\nKami paused to adjust Misha's position in her arms, as he had begun to chew on her hair. \"But I have to wonder if your decision to want to come back here is entirely due to the desire to learn more from your father... or the fear of going out alone, to risk being hurt or killed without him around to pull you back.\"\n\n\"I'm not afraid,\" Sasha declared simply. \"I'm twenty years old! I don't need my Daddy to protect me anymore!\"\n\nKami stared for a moment, before continuing. \"Sasha, sweetheart.... You had a near-death experience. It's perfectly natural to react-\"\n\n\"Excuse me, Counselor... but I didn't have a near-death experience. I had a death experience. That's all. And if it did affect me, don't you think it would have made me reckless, even dangerously so?\"\n\n\"Not necessarily. People react to trauma in different ways-\"\n\n\"Or maybe not at all. It's like T'Varik said today, it's best to be realistic, and not to try to run before I walk. I can stay onboard for a few years, work with my Dad, learn from him.\"\n\nKami nodded neutrally, idly stroking the fur on Misha's head. \"That's assuming your father will let you return.\"\n\nSasha stared back for a moment, before rising to her feet, leaning down and saying softly, \"We both know him. Can you really see him sending me away?\" She smiled at Misha and touched his nose. \"Beep Beep!\"\n\nThen she departed to his laughter.\n\nKami lifted Misha up to face him. \"Your Big Sister is swimming in De Nile.\" She leaned in and explained, \"That's a river on Earth, and a bad pun. And speaking of swimming, let's get you bathed.\"\n\nMisha blew a raspberry.\n\nKami assumed it was a coincidence.",
        "*\n\nDeck 3 Mid, Sickbay Suite -- 1202 Hours:\n\nMisha hissed as he lay on the biobed.\n\n\"Sweetheart! No!\" Kami chided, looking at Dr Ling with embarrassment. \"Sorry, Juliet. He's just tired.\"\n\nThe gaunt Asian woman was beginning to show signs of grey in her bun of sable hair, but her smile was one of youthful amusement. \"No, he hates me. All children do. Even when I was a child as well, they hated me.\" She rechecked the readings overhead. \"After I became a doctor, I was going to specialise in Paediatrics, as if constant exposure might somehow lift the curse from me. Worst six months of my life. None of my patients could stand to be near me.\" She passed a more local biosensor over the cub. \"The Chief of Residents practically begged me to take a ship-based assignment, so long as there were no children onboard.\"\n\nKami smiled, but asked, \"Is he okay?\"\n\nLing set aside the instruments. \"Fit as a fiddle, as they used to say. His muzzle will begin growing out soon, and that'll cause discomfort for the next five to six weeks.\" She looked at Kami, smiling. \"But then, you've gone through all this before, with your firstborn.\"\n\nThe Caitian reached out and picked up her infant. \"That seems a lifetime ago, and we were planetbound. Out here... out here feels more dangerous.\"\n\nLing approached. \"Well, there's always that suggestion of mine for a subdermal implant, to monitor his location and biosigns. Since he's too young to wear a combadge-\"\n\n\"Yes.\" Kami didn't like the idea of implants, even temporary ones; as sensible as they seemed, she shared the opinions of many that she knew, that it was an invasion of one's integrity, and left people open to vulnerabilities. \"I'm still not sure. I'll talk it over with Esek.\"\n\nLing nodded, drawing in closer to the infant and smiling. \"And you, Young Sir: when you start Muzzling, make sure your parents get you a strong pacifier.\"\n\nMisha hissed in reply.\n\n*\n\nDeck 3 Fore, Alpha Squad Cadet Quarters -- 1245 Hours:\n\n\"The USS T'Sena?\" Sasha repeated. \"That's one of the Olympic-class hospital ships, isn't it?\"\n\nSitting beside her on the floor of the bedroom, back against one of the bunks, Giles Arrington smiled. \"Yep.\"\n\nSasha continued to stare at the cub in the chair opposite, snoring away to himself, and made the effort to keep her voice low. \"It's a bit less... action-packed for you, isn't it? I was expecting one of the scouts or a frigate.\"\n\n\"Hospital ships crew structures contains permanent Rescue Teams, and more frequent use of shuttles during missions. On one of them, I'm more likely to get to command and fly.\" He knocked the side of his head. \"This is me using my brain.\"\n\nShe smirked. \"Don't tap too hard, you might knock it off that tiny little shelf you keep it on in there. Why not one of the Ambassador or Galaxy-class ones? Large crews, more chance to command Away Teams. You could always get your Dad to pull some strings-\"\n\nHe frowned. \"Don't even joke about that. He and my grandfather and brothers are all trying to jockey me towards Intelligence or Starfleet HQ. 'You're an Arrington', they keep telling me. 'You have a history to uphold'. The Hell with that!\"\n\n\"Shush,\" she chided softly, nodding towards Misha, but then adding, \"Good for you. You should stand on your own feet.\"\n\n\"What about you?\"\n\nSasha lifted up her beer bottle, knowing she shouldn't be drinking so early in the day, but feeling she needed the illusion of courage. \"I'm thinking of asking to stay onboard the Surefoot, as an Operations Officer under Neheru.\"\n\nGiles frowned. \"Really?\"\n\nShe eyed him. \"Why not?\"\n\n\"Because you've been under your father's command for two years now.\"\n\n\"As a cadet. Now I'll be a full-fledged member of his crew.\"\n\n\"Yeah, but...\"\n\n\"But what?\"\n\nThe young man paused before shrugging. \"But nothing. Your choice.\" Then he smiled, leaning in to put an arm around her.\n\nShe stopped him. \"Giles... we need to talk.\" She edged herself away a little, putting distance between them on the pretext of facing him directly, even if her eyes fought to stay on him.\n\nHe flushed. \"Why do I feel like I'm not gonna want to hear what you have to say?\"\n\nSasha frowned back, hoping he wasn't going to make this any more difficult than it already would be. \"Why do I feel like you should have already been expecting this before now? In a few months, we'll be graduating, and after the break take our first post-grad assignments. In separate directions. Not that we haven't been doing that already-\"\n\n\"It doesn't have to be that way,\" he insisted. \"We can-\"\n\n\"We can, what? Get engaged? Apply for the same postings? When you were making your choices, did the thought of the two of us talking about choosing the same ones ever occur to you?\"\n\nHe didn't answer.\n\n\"Okay, I'll be the one to say it: it didn't for me. Because I knew that we didn't have some timeless romance going on here. I... loved the time I've had with you. I've loved you. The company. The sex. The friendship-\"\n\n\"Friendship,\" he repeated, with a bitter aftertaste.\n\n\"Yes; don't belittle friendship. The next few months are going to be intense, and then we're moving on, with individual life plans. We can both feel it. And I think it'd be better to make a clean break of it now, so we can focus on what's important-\"\n\nHe smirked humourlessly. \"Which obviously doesn't include us, right?\"\n\n\"Oh come on, Giles! The last few months, we've been together simply for the sake of being together! Doing things as a couple because it was expected, not because we really wanted to!\"\n\n\"So... looking to hook up again with your cousin?\"\n\n\"No. Nor with anyone else, so don't climb up on that moral high ground. You think I hadn't noticed the attention you've been giving that Epsilon Squad pilot the moment her team joined the ship?\"\n\nHe started to reply, but then just flushed and pursed his lips as he stared down at his boots.\n\n\"Thank you for not denying it,\" she said dryly, watching her sleeping brother, envying his peace. \"I'm not angry, Giles. And I suppose the fact that I'm not angry about it says more than anything else about what we're investing in this relationship.\"\n\nShe reached out and blindly took his hand in hers, squeezing tightly. \"You will always be my first. My first love. My first lover. That will never change, and you can always count on me to be honest and open with you. Which is why I can tell you all this now, rather than later. And... I know it's a clich\u00e9, but I'm hoping we can stay friends.\"\n\nHe made a sound, though she couldn't tell if it was one of agreement at her decision, or derision.\n\n\"We've seen each other's Sex Faces,\" she reminded him. \"That puts us in a special club, doesn't it?\"\n\nHe chuckled despite himself, admitting, \"Yeah. I'm, ah, I'm gonna go now. I've got to process all this.\" Then he slipped out of her touch and helped himself back to his feet, looking down at her. \"Did you choose this time to tell me, with Misha here and asleep so I wouldn't raise my voice?\"\n\nSasha looked up at him silently. Guiltily.\n\nHe offered a smile that never reached his eyes. \"Thank you for not denying it.\" Then he swallowed, and with genuine feeling admitted, \"I'll miss you, Sasha Hrelle. I'll miss us.\"\n\n\"Me, too,\" she agreed, tears welling up in her eyes.\n\nHe saw it, and mercifully said or did nothing but depart the bedroom.\n\nShe had time to wipe her face once or twice before the door slid open again, and Kitirik poked his lime-green reptilian head through the doorway. \"Good Friend Sasha... do you require company, or solitude?\"\n\nShe looked up at him. Most of Alpha Squad were elsewhere on various duties, but they all knew what she had planned to do today. \"Solitude, if you don't mind, Kit.\"\n\nHe nodded. \"I will be in the main room should you wish me.\"\n\nShe smiled gratefully at him as the door slid shut again. Then the sobs flowed. She knew it had been the right thing to do, now before later when there would be other pressures, and she might make a stupid error of judgement. But that didn't make it any easier.\n\nA sound from Misha made her look up from her cupped hands.\n\nHe was awake, staring straight at her, mewling and holding up his stubby arms.\n\nThe thought that she had awakened him, upset him, made her heart plummet. \"Oh, Little Brother, I'm sorry! It's okay! Really!\" She wiped her face again, leaned forward, unbuckled him and lifted him up into her arms. She felt him try to embrace her neck, his purrs travelling through her as her breath went quick and shallow, and she clung to him like a lifeline.\n\nAn hour later, the bedroom door slid open again, and Eydiir Daughter-of-Kaas entered, the tall, dark-skinned Capellan girl spotting Sasha in her lower bunk fast asleep, a protective arm around an awake and alert Misha, who looked up at the new arrival and gurgled with approval, arms clutching Sasha's childhood toy, a plush Caitian doll christened Captain Fuzzybutt, whose tail Misha was currently chewing into oblivion.\n\nSilently Eydiir knelt by the bedside and carefully lifted the infant up without waking her friend, pulling a blanket up over Sasha before taking Misha and his chair and changing kit out with her.\n\n*\n\nDeck 4 Aft, Mission Ops Area, 1411 Hours:\n\nChief Grev wrinkled his stout porcine snout and narrowed his beady black eyes on the infant in the chair. \"You're a smelly little faeces generator, aren't you?\"\n\nMisha blew a stunted raspberry in reply.\n\nThis made the Tellarite draw back and laugh, clicking his hooves in delight. \"He's got the Banter already! We will enjoy insulting each other for years to come!\" He then proceeded to switch on a tiny lightstick, placing the glowing lime-green rod in Misha's grasp. Then, as the infant brought it to his mouth to chew on it, Grev looked to the cub's father, sitting opposite. \"It's non-toxic, and sturdy enough to stand his teeth. I had it tested.\"\n\n\"I hope you have, for your sake; I think he can chew through neutronium with his teeth. Shall we make contact now?\"\n\nGrev grunted and opened a channel. \"Are you through dawdling over there, Lieutenant?\"\n\nOn an adjacent wallscreen, the image of Jonas Ostrow, clad in a standard exosuit, appeared. \"Sorry, I was busy relishing the sweet scent of your absence.\" He stood in a claustrophobic metallic chamber, with other figures in exosuits moving about, visually demonstrating the lack of gravity. \"Captain, Chief, I've done my inspection of the asteroid impellers: eight of the eighteen verteron generators the Dytallix Company stated were implanted here as part of the facility are missing.\"\n\nHrelle sat up. \"Missing?\"\n\n\"As in stolen, Sir. About four months ago.\"\n\n\"How can you be certain, Lieutenant?\" Grev asked. \"Maybe Dytallix... 'exaggerated' the number of generators employed to raise the costs?\"\n\n\"The evidence goes against it, Chief; the power usage dropped considerably at the four month stage, I've found evidence of boarding and laser cutter activity to unbolt the generators, and a false signal was deliberately rigged to send out to make it seem as if the asteroid was still on course for Kobliad. If Dytallix are guilty of anything, it's negligence in not checking the transponder signals more often and more thoroughly.\"\n\nHrelle nodded. \"Any idea on who the thieves might be?\"\n\n\"Yes, Sir: Cardassians.\"\n\nHrelle's expression went taut. \"How do you know?\"\n\n\"They were in exosuits just like us, but they were here for a long while, and like all exosuits, they produced atmospheric waste -- which includes DNA particles from their respiration units. Also, their laser cutters employ a unique helium-neon mixture that left residue.\"\n\nHrelle frowned now. It seemed both outrageous that the Cardassians would implement such a theft -- and also completely typical. \"Educate me, Lieutenant: what are verteron generators used for? And why would the Cardassians risk an interstellar incident and steal some of ours instead of just making their own?\"\n\n\"Well, Captain, normally even engines as large as these industrial warp impellers couldn't form a stable warpfield around an object as massive as this asteroid long enough to get it anywhere.\n\nThat's where the verteron generators come in; verterons are naturally found in wormholes such as the one near Bajor, and they've been found to stabilise large subspace fields, which is a theory as to why the Bajoran wormhole is unnaturally fixed. I'm not yet sure what they could do with the ones they took, unless they have an asteroid of their own to move.\"\n\nHrelle nodded again at that. \"Can we get the asteroid back on course?\"\n\n\"Already done, Sir, it was just a matter of rebalancing the remaining generators and reprogramming the main computer. It'll get there in 92 months.\"\n\nHrelle braced himself before asking, \"Can we get it there in four?\"\n\nJonas blinked. \"Four, Sir? That's... not possible.\"\n\n\"Admiral Wayne says we have to get it there in four months. And we have five hours to come up with a way to do it.\"\n\n\"Sir...\" The poor young man looked so pale now. \"Sir, it can't be done! I promise!\"\n\n\"I believe you,\" Hrelle assured him confidently. \"But have a think about it anyway, and if you can come up with something, anything, consult the Chief, and implement it. Unlike the Admiral, I'm not expecting miracles, but be prepared to tell him so at 1900 Hours. Hrelle out.\"\n\nAs the screen darkened, Grev grunted at him. \"That's a heavy responsibility for the pup, Esek.\"\n\nHrelle rose and drew in to his son, playing a gentle game of tug-of-war with the lightstick in Misha's grasp, smiling at the cub's attempts at growling. \"He won't always be able to solve the problems thrown at him. And he won't always be working for someone as sympathetic or supportive.\" He looked up again. \"Don't worry, I'll be there in case Wayne rattles him too much.\"\n\nThen Hrelle's combadge chirped. \"Captain, that long-distance call has been connected.\"\n\nHrelle beamed. \"Thanks, Neheru! Get Kami, Sasha and C'Rash to the Ready Room!\"\n\n\"I am told Ensign Hrelle is currently indisposed, Sir.\"\n\n\"Fine! Get the others! Hrelle out!\" He lifted up Misha's chair. \"Come on, my little Warrior Prince. Your grandparents are waiting!\"\n\n*\n\nDeck 2 Fore, Ready Room -- 1544 Hours:\n\nThe three older Caitians on the opposite end of the call kept jockeying for a position in front of their holocommunicator, making their image at the receiving end appear as if a shapeshifter was in the midst. One portly grey-furred male with a booming voice suddenly took over, demanding, \"Let me see him again, Kami!\"\n\nKami drew closer. \"Here you go, Papa Mi'Tree.\" She raised the infant up, making a sound. \"I thought you were trying to lose weight for your comeback vivid.\"\n\nHe pretended not to hear her, leaning in to coo and gurgle at the infant -- until he leaned out of shot and his holographic image appeared to become headless, making Misha cry.\n\n\"Papa!\"\n\nThe headless Mi'Tree was pushed off of the transmitter pad, replaced by a large-framed Caitian female of equal age but greater bearing, keeping herself straight and her eyes focused on the infant, waggling her fingers at him until he calmed down again. \"We are still planning on coming out to visit you in a few weeks, Daughter. I might even let you have my grandson back when we're done.\"\n\nKami smirked as she gently jiggled Misha to quiet him again. \"I might let you have him, if you're willing to take on the late-night feedings. I'm sure my nipples never felt this sore with Mirow.\"\n\nMa'Sala Shall chuckled. \"Apply shuris wax. Or get your husband to do it; he looks like he knows his way around your nipples.\"\n\nHrelle gave her a thumbs up, but then wound it up with, \"We don't have long with this channel. We're looking forward to you, Mi'Tree and Bneea visiting-\"\n\nSuddenly C'Rash, who had been almost completely silent during the call, asked, \"Before you close the call: can I have a private word with Ma'Sala, please?\"\n\nHrelle and Kami looked to each other, and then at Ma'Sala's image, before Hrelle replied, \"Sure, cub.\"\n\n\"Leave my grandson as well,\" Ma'Sala insisted. \"He's the only one of you I'm interested in anyway. That, and my human granddaughter; give her my best.\"\n\nC'Rash took Misha out of Kami's hands and waited until the others left before letting her expression sober. \"Thank you, Matriarch.\"\n\nThe older female took visible note of the use of the title, and looked off-camera to say, \"Go.\" After a moment, she faced C'Rash again. \"What is it?\"\n\nThe young female adjusted the infant in her grasp. \"You read the message I sent you? About the incident with Uncle Esek on Skaros?\"\n\n\"Yes. My kin-son did good work. I bet that field smelled of Barbecued Bastard.\"\n\nC'Rash's jaw dropped in astonishment. \"How can you joke about that? He killed dozens of people without a second thought!\"\n\n\"He killed dozens of child sex traffickers, to save the children they had abducted, as well as his crew and himself - and you. If it had been me, or any Matriarch I know, we wouldn't have given it a first thought. Cub, I know they try to instil in you a sense that one shouldn't kill unless absolutely necessary... but given what you told me, do you think your uncle had any choice?\"\n\n\"I'm not arguing that!\" She drew closer. \"Regardless of how right his actions might have been, I... I saw him- it was- he was... savage!\"\n\nThe Matriarch shrugged. \"That doesn't surprise me in the least. You are young; you have never born or raised a cub, and you have never killed. But we all carry within us the love of the Great Mother... and Her Fury, and both emotions are equally potent. I have never known a male to have as much of Her spirit as Esek does. But then, I have never known a male who has endured what he has endured at the hands of the Bel-Zon and the Orions.\"\n\n\"Then you agree? That he needs help?\"\n\n\"He has my very capable Counselor daughter as his wife. And he has the support of his clan -- which includes yourself, I will remind you.\"\n\nC'Rash swallowed as Misha grabbed a fistful of her hair and tugged, before choosing her next words more carefully. \"Ma'Sala... aren't you- aren't you worried about him doing something to Kami or Misha-\"\n\nMa'Sala cut her off with a raised finger. \"You listen to me, you little tail-chaser: I have looked into my kin-son's eyes... and I trust him. I trust him with my daughter, my grandson, my kin-daughter Sasha, with you, and with his crew. You do not need to fear him. The only ones who have to fear him are those who would seek to harm those he loves and cares about.\" She lowered her hand. \"How does my grandson react with him?\"\n\n\"Misha? He's fine. But he's just a cub-\"\n\nThe Matriarch glanced at her. \"He's not 'just a cub'. You hold in your arms the most powerful sensor package on your ship. He is almost pure instinct at this age, undiluted by thoughts of social convention; he knows what he likes and doesn't like, knows who's a friend and who's a threat, and he's not afraid to tell you. You will not raise this subject again, with me or anyone else. Is that clear?\"\n\nChastened, C'Rash nodded. \"Yes, Matriarch.\"\n\nMa'Sala's features softened as she focused on the infant in C'Rash's arms, smiling as she caught his attention with her dancing fingers, ones he reached out in vain to grasp. \"And in return, I will not inform my daughter that you have accused her husband and the father of her cub of being a potential danger to them. Because unlike me, she is physically present, and can do more than just verbally chastise you...\" As Misha began to mewl, she added, \"He needs a nap. You look like you need one too, now.\"\n\n*\n\nDeck 3 Fore, Holosuite -- 1640 Hours:\n\nMisha tried in vain to reach for one of T'Varik's ears as she held him, narrating the holographic displays appearing before her audience. \"On Stardate 47283.56, a Cardassian delegation was invited to an interstellar medical conference on Meezan IV, in the relative proximity of the asteroid at the time; their vessel would have had the opportunity to intercept the asteroid and board it. Of particular note was-\" She paused as Misha tried to put his hand in her mouth. \"Please desist. As I was saying, of particular note was one of the senior members of the delegation: Legate Hovat.\"",
        "\"Hovat?\" Kami, standing beside Hrelle, repeated. \"That name sounds familiar.\"\n\n\"It should,\" Hrelle agreed. \"We've encountered him before, during the investigation of Captain Acres of the USS Tempest. He's my Cardassian counterpart on the other side of the Border, and I'm betting he has little actual interest in interstellar medicine. Now, what about the asteroid, Chief?\"\n\nThe images shifted to a holographic representation of the asteroid and the Surefoot, while Chief Grev led the demonstration. \"Currently the asteroid is moving in a wide, wide arc back towards the Kobliad; the impellers are simple mechanisms compared to a ship's warp drive, which means this asteroid has all the steering capacity of, well, a huge mountain in space. The impellers were mounted based on the a.\n\nMr Ostrow and I have come up with something, based on the Enterprise's encounter with the Borg. We want to rig the warp engine of the Surefoot to channel all its energy through the deflector dish as a massive, sustained graviton beam. This beam will be directed at a specific point on the asteroid, increasing its local gravity and creating a controlled imbalance that will force the asteroid to shift in a tighter arc.\"\n\nHrelle nodded. \"Like shifting on a sailboat to affect its course. Nice. But if the asteroid is moving at warp speed, and our engines' power is being channelled through its beam-\"\n\n\"We'll be riding within the asteroid's own warp bubble when we fire up the graviton beam. It's risky, but doable.\"\n\n\"But that will not be the only risk,\" T'Varik pointed out. \"The Enterprise's activities ended up burning out much of their deflector array, and producing high levels of radiation, requiring evacuation of the areas of their vessel nearest the array.\"\n\nKami looked at her husband. \"You're not seriously considering this, are you?\"\n\nHis expression tightened. \"The Enterprise's adaptation was as a weapon. Will the risks be the same for us?\"\n\n\"Not as great, though I suppose other unexpected problems might arise. But if it does work, it will shave twenty percent off the asteroid's travel time. Maybe even a bit more. Whether or not it might satisfy Admiral Starchass is another matter.\"\n\n\"And it's being implemented now?\"\n\nGrev nodded. \"Mr Ostrow and his team returned to the Surefoot an hour ago.\"\n\nHrelle tapped his combadge. \"Hrelle to Ostrow: Jonas, are the modifications ready yet?\"\n\nA distracted, uncharacteristically ill-mannered Jonas replied with, \"They would be, if there were fewer interruptions- Sir! Ostrow out!\"\n\nThe adults in the holosuite looked to each other, before Kami announced, \"I think I need to take Misha for a walk.\"\n\n*\n\nDeck 8, Deflector Control Room -- 1645 Hours:\n\nKami carried the chair with the napping Misha as they approached the room, listening to the ongoing argument coming from ahead. \"No, Nancy! I said the Primary Coupling! That'll overload first!\"\n\n\"Excuse me, Lieutenant, but you said the Auxiliary.\"\n\n\"I know what I said, Yeager, just do your damn job-\"\n\nKami stopped at the doorway. \"Jonas-\"\n\nHe spun in place, face red. \"WHAT?\"\n\nThat made the group freeze in their tracks. Kami set Misha's chair down beside her, her voice taut and low and measured. \"Firstly: don't ever raise your voice like that to me again.\n\nSecondly: you did say the Auxiliary. I heard you when I came out of the turbolift.\"\n\nHe blinked. \"Oh.\"\n\nKami nodded, adding, \"Thirdly: this is the point when you act like the man I know you are, and apologise to Nancy and the others.\"\n\nScarlet-faced now, he turned to Yeager. \"Sorry, Nance. I'm wound up with this assignment.\" He looked to the others. \"Sorry, everyone.\"\n\nYeager nodded back, and returned to her work, as did the rest of them.\n\nKami set Misha's chair down and beckoned him to approach. As he did, she spoke more softly. \"What are you doing?\"\n\nJonas rubbed his hands agitatedly on the hips of his uniform. \"We're making modifications to the deflector array to emit-\"\n\n\"I didn't ask about the technobabble, I asked what you were doing, putting yourself and the others under such stress?\" She nodded towards the infant. \"Pick him up.\"\n\n\"What?\" He looked down and frowned. \"No! I'll drop him!\"\n\n\"You handle warp cores and doohickeys and framistats all the time, I think you can handle my cub.\"\n\n\"Counselor, we are on a deadline here-\"\n\nShe folded her arms across her chest. \"Pick up my cub right now and cradle him, or I will relieve you of duty with immediate effect; that's a direct order from a senior medical officer.\"\n\nJonas glanced back at his crew, who had stopped again to watch the scene unfold. Reluctantly he knelt down, unbuckled Misha, and stopped to look up again saying softly, \"I don't want to wake him.\"\n\n\"Then you'd better be nice and quiet and calm, haven't you?\"\n\nHe glowered at her, before focusing on the cub, gently lifting him up under his arms and setting him against his shoulder, supporting him under Misha's rear after some silent coaching from Kami, as Jonas returned to his feet, thankful that the cub hadn't stirred. Then he asked in a whisper, \"Now what do I do?\"\n\nShe shrugged. \"Continue with your technobabble. Let's see if you can get your work done without raising your voice or your blood pressure, because I know for a fact that you don't have to go around like a constipated Klingon to lead a team. And in future, when you're feeling under pressure, imagine you're holding him again and trying not to disturb him.\"\n\nHe stared incredulously at her, before turning to face his crew, speaking in a deliberate calm and controlled tone. \"Praas, could you please remove the failsafes on the graviton conduits? The report from the Enterprise stated those were the first to go, and we have nowhere near the strength of a Galaxy-class dish.\"\n\nThe Trill cadet smiled at the young man with the cub and nodded. \"Yes, Sir.\"\n\nJonas looked to the other crewmen. \"Torleen, we'll need redundancies cleared to the warp engines; liaise with Chief Grev to ensure they're on Standby...\"\n\nBehind them, Kami leaned against a wall and watched as the tension began to ease from the back and shoulders of Jonas... and Misha began drooling on the boy's shoulder.\n\n*\n\nDeck 3 Fore, Enlisted Mess Hall -- 1715 Hours:\n\nNeraxis held Misha against her chest and shoulder and gently patted him on the back. \"Come on, Furball, I know you've got it in you-\"\n\nHe burped. Loudly. Drawing attention from the neighbouring diners.\n\nSasha was looking away at another table, but still asked, \"How do you do that so easily?\"\n\nNeraxis set him on her lap, wiping his muzzle with a wet wipe. \"Benefits of being the oldest in a large family: lots of practice.\" She watched and grinned as his long tongue darted out. \"Ooh, you're gonna be popular with the ladies when you grow up.\" She cleaned off a small spoon and let him grasp it in his stubby hands as she looked at her friend again. \"Stop it. It's embarrassing.\"\n\nSasha didn't stop. At the far table, she saw Giles sitting with some crew ensigns, talking away happily. Like nothing had happened to him. \"Only to you. No one else knows.\"\n\n\"Are you kidding? Everyone knows!\" She held out her hand and let Misha smack the spoon into it like a drum.\n\nSasha frowned. \"He didn't even acknowledge me when he came in. It's gonna be like this for the next three months, isn't it? Avoiding me like the Tarellian Plague.\"\n\n\"Give him a break, it must have been a shock for him.\" When Misha spat up some milk, Neraxis took it in her stride and went, \"Oh dear! Ickle Baby!\" before reaching for another wet wipe for her uniform and his face. \"It might be easier for him to have some distance, to help him recover from your amazing charms.\"\n\n\"Maybe,\" Sasha agreed absently.\n\nNeraxis looked up at her, as did Misha, though it was the Bolian who asked, \"Really? Holy Hraxor, I was joking!\"\n\nSasha frowned. \"Are you saying I couldn't ruin him for other woman?\"\n\nMisha blew a raspberry.\n\n*\n\nDeck 1, Bridge -- 1825 Hours:\n\nMisha sat in his father's lap in the Command Chair, chewing on Hrelle's finger, as Hrelle watched the huge black asteroid dominating the viewscreen. It unnerved him, knowing they were riding inside its warpfield, dependent on their impulse engines alone; he felt like a tiny bird trying to fly backwards away from a charging razorbeast. \"Everything okay, Mr Rrori?\"\n\nThe white-furred Caitian male at the helm glanced behind him. \"I... think so, Sir. I just hope this asteroid doesn't mind us getting so up close and personal.\"\n\nHrelle nodded and looked to the Engineering stations. \"Lieutenant?\"\n\nJonas was conversing with Nancy at Station 1, but now looked up, making a visible attempt to appear calm. \"I think we're ready, Captain.\"\n\n\"You think, or you know?\"\n\nJonas swallowed. \"I know, Sir.\"\n\n\"Then give the order.\"\n\nThe cadet nodded and looked to Nancy. \"Engage.\"\n\nSeconds later, the huge column of yellow-white energy shot out from the Surefoot to strike at the predetermined point on the asteroid, causing a plume of coruscating energy to flow around the surface of the rock. Immediately the ship began shaking, prompting Jonas to reach down to his own station, reporting, \"Increasing power to inertial dampeners and structural integrity fields!\"\n\nHrelle's free hand gripped the arm of his chair, immediately hating what was being done to his ship -- though Misha seemed to be enjoying the bumpiness of it all. The shaking abated, but only by a little, as alerts sounded. Behind him, Neheru was announcing over the noise, \"Radiation flares immediately around the deflector array room! It and the surrounding areas were evacuated, but-\"\n\n\"Structural integrity is overloading!\" T'Varik cut in, as secondary alarms sounded. \"Deflector dish showing signs of stress-\"\n\n\"Disengage!\" Hrelle roared over them all. \"NOW!\"\n\nThat caught everyone's attention; in seconds, the graviton beam, the alerts and the shaking ceased, power was diverted back to the warp drive and Rrori moved them out of the path of the asteroid.\n\nMisha sounded disappointed. Hrelle looked down at him and shook his head as he ordered, \"Run full radiation checks, restore everything back to normal.\" When he caught Jonas' anxious gaze, he shrugged. \"You tried, but I'm not risking my ship and crew just to knock a few months off the travel time of that piece of crap out there.\"\n\nBut when the cadet still looked sullen, defeated, he added, \"Mr Ostrow, the work you've done already will ensure that Tavela Minor is safe, and that the asteroid is on its way back in the direction of the Kobliad -- later than expected, but still better than nothing. Baby steps are better than stumbling. Now, come on, let's go disappoint Admiral Wayne.\"\n\nAs he rose, carrying Misha, T'Varik approached. \"Captain, the Admiral expressed a strong preference for not having an infant in the next meeting. Perhaps if I take him-\"\n\n\"No.\"\n\nThe Vulcan regarded him. \"The Admiral will object.\"\n\n\"And if he does, what do you think will be my most likely response?\"\n\n\"Will it be an invitation involving the Admiral's lips and your posterior?\"\n\nHe grinned. \"You know me well, Commander.\"\n\n\"All too well, Sir.\"\n\n*\n\nDeck 2 Fore, Ready Room -- 1902 Hours:\n\nHrelle wasn't quite sure who was grumpier: the little baby in his arms, or the big baby on the screen. He settled on the latter; Misha was more mature. \"What did I tell you before about excuses, Captain? And about children? This is not the place for non-essential personnel!\"\n\n\"He's not non-essential. He performs many vital functions.\" Hrelle glanced down at the bundle of joy sitting up in his lap. \"He's a therapist, a diplomat, a welcome distraction, a reminder of why we're out here... and if you want to court-martial me for insubordination, he'll be my defence attorney; he won't have to say anything, just sit there and melt the hearts of the Board.\" He looked up again. \"The one thing he can't do is get that asteroid to Kobliad any faster. And neither can we.\"\n\n\"That's not good enough, Hrelle! Increase the power of the impellers!\"\n\nHrelle looked to Jonas, who stood up as if he was back in class. \"Admiral, those impellers are designed for haulage, not speed. There are basic physical limitations with regard to the asteroid's mass, its internal structure, that make faster velocities impossible-\"\n\n\"Young man... how old are you?\"\n\nJonas paused. \"Twenty, Sir.\"\n\n\"Uh huh. Well, let me tell you, sonny: I'm over five times your age. And I was out there making the Impossible possible when your grandfather was no bigger than that child on your Captain's lap-\"\n\n\"Excuse me, Sir,\" Jonas suddenly cut in, raising his voice and ignoring the look he was getting from Hrelle. \"I may only be twenty, but I've spent half of that life crawling through the inside of machinery like those impellers! I know what they can do and what they can't do! You don't, Sir!\"\n\n\"Jonas-\" Hrelle prompted him.\n\n\"Oh really, Mister?\" Wayne countered. \"Have they stopped teaching respect for authority at the Academy?\"\n\n\"No, Sir. On the contrary; I have the utmost respect for you, for your authority, and for your accomplishments. It's an honour to be speaking with one of the Heroes of Tomed.\"\n\nThe mention of the name caught Wayne off-guard. \"You know what I did at Tomed?\"\n\n\"Of course, Admiral; it was one of the defining moments of this century. You helped save hundreds of lives when you commanded the USS Crazy Horse. But despite the efforts made by yourself and other captains there, there was still criticism in some circles afterwards that more lives weren't saved. And I remember your response to the critics: 'We did what we could, with what we had, where we were; if you wanted more, you should have got off your butts and lent us a hand.'\"\n\nWayne harrumphed, looking suitably chastened. \"You know that quote?\"\n\n\"Yes, Sir. And anyone who's faced impossible tasks has taken comfort from it.\"\n\nHrelle looked back at the viewscreen. \"Admiral, the Dytallix Company bears some responsibility for this, for their improper security and safety procedures on the project. Perhaps if they wish to maintain their reputation -- and their Starfleet contracts -- they might be willing to bring in some replacement generators, maybe even set up a mining facility on the asteroid immediately, to begin processing the deuridium for shipping to the Kobliad, so they won't have to wait years for the asteroid to reach their system?\"\n\n\"Hmph. That could be doable. Fine, Hrelle, you can take your ship back to your original assignment.\" He looked to Jonas. \"Good work, young man.\"\n\n\"Thank you, Admiral. Oh, and Admiral? Have you considered giving some lectures on the Tomed Incident at the Academy? It would be amazing to hear what happened from someone who was actually there, rather than some wet-behind-the-ears instructor just reading out dry facts and figures.\"\n\nWayne considered the suggestion, making grunting sounds. \"Well, I'm not accustomed to public speaking, but... it's an interesting thought, Lieutenant. Admiral Wayne out.\"\n\nAs the screen went dark, Hrelle smiled as he looked back at Jonas. \"Ah, so that's the Silver Tongue I've heard about.\"\n\n\"Sir?\"\n\nMisha put his head against his father's chest and closed his eyes, as Hrelle continued. \"You are quite the charmer, aren't you? No wonder the ladies are all over you.\"\n\nJonas flushed. \"They aren't, Sir, I promise!\"\n\nHrelle chuckled. \"I'm gonna miss you when you go for that Advanced training.\"\n\n\"I'll miss you too, Sir, all of you here: you, Kami, Misha, Sasha-\"\n\n\"Sasha? She won't be here, she'll be on Vulcan.\"\n\nJonas frowned. \"Really? She's talked about coming straight back here after graduation, Sir.\"\n\n\"Oh.\" He sighed. \"Well, I believe your services as Strategic Engineering Officer are done for today. Dismissed.\"\n\n\"Yes, Sir.\"\n\nHrelle smiled back as he watched the boy depart, before looking down at his infant and tapping his combadge. \"Commander T'Varik, Counselor Hrelle: please report to my Ready Room.\"\n\n*\n\nDeck 4 Mid, Holosuite, 2000 Hours:\n\nIt had been a strange, unexpected order Sasha had received to come here, so strange and unexpected that she was fully inside with the doors closing behind her before she realised where she found herself: a green enclave of trees and bushes, under a bright summer sky. She glanced around, her eyes immediately catching the top of the Golden Gate Bridge over buildings with the Starfleet logo emblazoned on them.\n\nStarfleet Academy: she recognised it, if not the particular spot where she was standing. But the holographic clock on the tower was wrong: Stardate... 66028.36? That was... twenty years in the future! Why-\n\n\"There you are.\"\n\nShe turned to see a tall, broad-shouldered, strikingly handsome Caitian male in a cadet's uniform with Fourth Year insignia. He had the kindest eyes, and fur the colour of mahogany, and a familiar -- very familiar -- smile. He reminded her a little of Kami's firstborn Mirow, whom she'd met months ago on Cait, or even a bit of Dad... \"Who are you?\"\n\nHe laughed, approaching her. \"Forgotten what your Little Brother looks like? I haven't been away that long!\"\n\nHer jaw dropped. \"Misha?\" She shook her head. \"You're a hologram. What am I saying, of course you are, I'm in a Holosuite! What's going on?\"\n\nHe shrugged. \"I'm not programmed to answer that, bubulah. I'm only here to thank you.\"\n\nShe had been ready to depart, to find out what this was all about, but then she stopped. \"Thank me? For what?\"\n\nThe holographic Misha tugged at the sleeves of his uniform. \"For inspiring me. I grew up hearing about your adventures, your achievements and promotions: getting your first command, exploring space, making First Contact missions, saving lives throughout the Federation. Making a real difference.\" He chuckled. \"Everyone in my Academy class was all over me when they found out I was the little brother of the legendary Captain Sasha Hrelle.\"\n\nSasha was gobsmacked by the program, before frowning. \"Where's Dad and Kami?\"\n\n\"Papa's in the Superintendent's office having drinks with the other Admirals, and Mama's consulting with Captain T'Varik. I have to get ready for the graduation ceremony -- but I had to see you privately first.\" He drew closer. \"I had to let you know... know that I know how scary it was for you to go out there and make your mark in the Galaxy, and how brave it was for you to do it anyway. And now I'm going to do the same.\"\n\nHe hugged her.\n\nThen he pulled back and touched her nose. \"Beep Beep.\"\n\nThen the hologram vanished, as did the Academy, leaving the familiar black and yellow-gridded interior of the Holosuite -- and Hrelle, Kami, T'Varik and the real Misha in Kami's arms, the mother cooing at her cub and declaring, \"You're gonna be a gorgeous male when you grow up.\"\n\n\"Indeed,\" T'Varik agreed. \"I must compliment the computer on its extrapolation of his probably appearance at age twenty.\"\n\nHrelle grumbled. \"Damn, I wanted to see me as an Admiral-\"\n\n\"What the hell is going on?\" Sasha demanded, capturing their attention.\n\nHer father focused on her now. \"It's about the future. Or at least, one possible future. One where you aren't afraid to go out and Seize the Day.\"\n\nHer expression tightened, glaring at Kami now. \"I told you before, I'm not afraid!\"\n\n\"Sweetheart,\" the Counselor replied gently. \"You've been afraid for a while now. It's affected you, your attitude, your decisions.\"\n\n\"No! I know that's what you'd like me to think, but-\"\n\n\"Sasha,\" T'Varik contributed now. \"The evidence is clear. I am admittedly no psychologist, but I am perceptive enough to have also seen the change in you of late.\"\n\n\"There is no change in me, okay?\" Sasha demanded, turning to storm out.\n\nBut Hrelle rushed up to intercept her, hold onto her arm when she tried to pull away. \"Sasha... I would be delighted beyond belief if you served with me until I was an old grey-furred cat moaning about getting my tail caught in all the sliding doors. But that would just be me, being selfish. You're meant to be doing more than just hiding out with your old man, letting fear control your life.\"",
        "\"Will you all just stop this cockamamie talk? I AM NOT SCARED! I'M NOT! I'M NOT!\"\n\nShe struggled with him, but he held her tighter, as she cursed, then fought... then broke down into sobs, letting him embrace her and whisper reassurances to her.\n\n\"I'm scared,\" she whispered finally.\n\n\"I know.\"\n\n\"What if... what if something happens again? And you're not there for me? You- You don't understand-\"\n\n\"No?\" he replied softly, stroking the back of her head. \"It's something I fear every day. And I want nothing more than to tether you to me for the rest of our lives. But we both know that wouldn't be right. Or necessary; I'm not the only one who can sweep in and save you if you're in trouble. There are others. But most of all, you have yourself.\"\n\nShe shook her head against him in denial.\n\n\"Think not?\" he asked. \"Nine years ago, when the Bel-Zon attacked Salem Four, it wasn't me who saved a classroom of children and a critically-injured teacher. It wasn't anyone else. It was an eleven-year-old girl. A remarkable eleven-year-old girl who has become an even more remarkable young woman. A woman I couldn't be more proud of.\"\n\nHe drew back, wiping her face. \"I know you're afraid to step out there. So am I. But I have faith, in you... and in the idea that, regardless of our fears, we have to still take those steps out on our own. Because they're worth it. Right?\"\n\nShe nodded, sniffling, wiping her sleeve across her face and gathering herself. Then she stepped back and faced the women, breathing in sharply before finally speaking. \"Commander... would it be possible to reapply for the Command program?\"\n\n\"No,\" the woman replied simply -- waiting a heartbeat or two to look at their shocked faces before clarifying, \"Fortunately, however, I never withdrew your original application.\"\n\nKami looked to her, smirking. \"I hope my cub doesn't pick up that sadistic streak you've developed.\"\n\nAs if on cue, Misha mewled for his godmother, the Vulcan approaching and accepting him into her arms, patting his back. \"I am of course completely ignorant of what you are-\" Then she stopped patting and frowned. \"He gave me the impression of needing burping. Now he is merely pressing against me with his erection.\"\n\nKami smirked. \"He gets that from his father.\"\n\n*\n\nDeck 3 Fore, Alpha Squad Quarters -- 2035 Hours:\n\nMisha lay on his belly on the mat, trying to raise himself up, but dropping down and giggling every time Kit, sitting cross-legged opposite him, would shoot out his long pink prehensile tongue and catch one of the honey-coated giant ants sitting between them.\n\nLounging on the couch, her nose in a PADD reading details of the Advanced Command Training Program, Sasha looked up and grinned, but still warned, \"Make sure he doesn't eat any of those.\"\n\nKit's tongue shot out again, snatching another ant and making Misha giggle again. \"He is not yet ambulatory to reach them, Good Friend Sasha, I can assure you.\"\n\n\"Don't count on that, Kit; felinoid babies apparently develop rather quickly.\"\n\nSitting beside Sasha, polishing one of a twin set of short Capellan swords from her homeworld, Eydiir nodded in agreement. \"I suspect he will be up and on the hunt before any of us have even left the ship.\"\n\nSitting at the table opposite Rrori and Jonas playing Double Jack, Neraxis frowned. \"On the hunt? What's he gonna hunt onboard?\"\n\n\"Us,\" Rrori replied, the Caitian tossing down his latest hand in mild disgust and scowling as Jonas collected the pot. \"Caitian adults will choose someone for the cubs to try and track down. You may find yourselves being pounced on from time to time-\" The door to their quarters buzzed, prompting him to reply with, \"Enter.\"\n\nThe door slid open. Giles stood there, a box in his hand, looking awkward.\n\nSasha swallowed as she looked up, before setting aside her PADD, rising and approaching him, not sure what to say now to him.\n\nHe flushed, glanced down once and back up again. \"Hi.\"\n\n\"Hi.\"\n\nHe nodded at that, before proceeding. \"I, ah, have some things of yours you left in Beta Squad's quarters.\"\n\n\"Things?\"\n\n\"Yes, your, um... remember that underwear you got-\"\n\nShe snatched the box from him, feeling the eyes of her friends on the back of her head as she nodded back. \"Thanks.\"\n\nHe nodded again. \"I, ah, saw on the duty roster that you're on the Afternoon Shift tomorrow. Do you, ah, wanna grab a coffee before you start? I, ah, was hoping for some advice for possible posts for my Preferred Assignments.\"\n\n\"Oh? I thought you were aiming for that hospital ship?\"\n\n\"I was, but I was thinking you were right, and it might be a little too routine, so maybe one of the Ambassador-class ships would be better? Anyway, we can talk it over tomorrow... unless you think that wouldn't be a good idea?\"\n\n\"Mm? No, no, that's no problem. I'll see you in the Mess Hall, 1530.\"\n\nHe smiled. \"Great. Good night.\"\n\nShe stepped back, letting the door shut again. She returned to the couch, box still in hand, before she set it aside, looked at the others and asked, \"What?\"\n\n\"You're not gonna start something up again with him, are you?\" Neraxis asked.\n\n\"What? No!\" More softly, but more resolutely, she repeated, \"No. We'll both be much better off now. I'm just glad that we're back on speaking terms again.\"\n\nThe Bolian nodded, but then asked, \"Let's see the underwear.\"\n\n\"Stroke off.\"\n\n\"Eydiir?\"\n\nThe Capellan quickly grabbed the box and tossed it to Neraxis, as Sasha cursed and went in pursuit of it.\n\nAnd Misha laughed at it all.\n\n*\n\nDeck 3 Mid, Sickbay Suite -- 2248 Hours:\n\nSasha rushed in with a crying Misha in her arms. \"Doctor Ling! Hurry! It's an Emergency!\"\n\nLing departed from her office, alarm on her face. \"What's wrong?\"\n\nThe younger woman's face was pale. \"I don't know! He wouldn't settle! He's been crying, and then he bit me! Maybe he swallowed something when we weren't looking, or he has a virus or colic or poisoning or-\"\n\n\"Bring him over.\" Sasha carried him to the biobed where Ling stood, settling him down and looking up at the readings overhead. \"Where are his parents?\"\n\n\"They're having... some alone time. I said I'd babysit tonight! They trusted me! And now somehow I've made him sick!\"\n\n\"Where were you? What were you doing?\"\n\n\"We were in our Squad quarters, watching some vivids, playing cards-\"\n\nLing nodded in understanding. \"And keeping him stimulated well past his bedtime.\" She looked up at Sasha. \"You've got a case of Cranky Baby here, Ensign.\"\n\n\"What? That's it?\"\n\nLing nodded, looking at Sasha's bleeding hand. \"They do have some sharp teeth at this age, don't they? Go see Igavo next door to get that fixed; I'll give your little brother a very mild sedative, and then when you take him back, put him in a dark, quiet room to let him sleep.\"\n\nSasha nodded. \"You- You won't tell Dad and Kami, will you?\"\n\n<br >\"Me? No. You'd be surprised at how many secrets I keep.\"\n\n<br >Sasha smiled. \"Thanks, Doctor.\"\n\nLing watched her depart, before retrieving a hypospray and ordering from the medical replicator 2ccs of ambizine -- and a subdermal tracer, loading it up and injecting the infant.\n\nHe hissed at her.\n\nShe leaned in, stroking Misha's head, her voice a soothing murmur. \"You are a cute little thing, aren't you?\" She sighed. \"I really hope the Bel-Zon don't order me to hurt you...\"\n\nHe hissed again.\n\nTHE ADVENTURES OF THE SUREFOOT WILL CONTINUE IN: SNAKES ON A STARSHIP "
    ],
    "authorname": "Surefoot",
    "tags": [
        "star trek",
        "fan fiction",
        "fanfic",
        "caitian",
        "starfleet",
        "federation"
    ],
    "category": "Celebrities & Fan Fiction",
    "url": "https://www.literotica.com/s/surefoot-22-baby-steps"
}
{
    "title": "The Cottage: Last Day",
    "pages": [
        "Copyright (c) 2020 James Miehoff, All Rights Reserved. \n\nThis work may not be published whether for fee or free without this copyright.\n\n------------------\n\nThe following is a work of fiction and as such all characters mentioned herein are fictional and any resemblance to any persons living, dead or fictional is coincidental. All characters mentioned herein that participate in sexual activities are adults (18 years of age or older).\n\n------------------\n\nDramatis Persona \n\n------------------\n\nRobert -- the protagonist/narrator\n\nEileen -- Robert's girlfriend\n\nStephanie (Steph) -- Eileen's sister\n\nJenny -- Steph's classmate and friend, Chad's girlfriend\n\nJohn -- Steph's classmate and friend, his uncle owns the cottage\n\nChad -- Steph's classmate and friend\n\nSandy -- Steph's classmate and friend and organizer of the weekend, John's girlfriend\n\nHeather -- Steph's classmate and friend\n\nRob -- John's uncle and owner of the cottage\n\nOlivia -- Rob's supermodel hot wife\n\n------------------\n\nThe following is the continuation of the story The Cottage: First Day and The Cottage: Second Day. If you haven't read them, please do. Otherwise, some of the characters and situations may not completely make sense. This is the tale of the events that unfolded on the final day at the cottage.\n\nThe other two, The Cottage: First Day and The Cottage: Second Day will be published simultaneously so you can read them sequentially. \n\nIf you like these, please rate them and drop a comment.\n\n------------------\n\nI woke up early. The alarm clock said 6:32am. Eileen, my girlfriend was draped over me and Heather, a friend of Stephanie's, Eileen's sister was asleep snuggled up on the other side. Technically, I guess she is my friend too, since I did fuck her in the ass last night.\n\nAs I reviewed the events of the last couple days in my head, my morning wood turned into morning steel and began to throb uncomfortably. I nudged Eileen a little and she cooperatively rolled off me and settled in on her side facing away from me. I carefully slid out from between my two sleeping beauties and headed for the bathroom. \n\nIf it didn't hurt so much, it would have been funny. I had to pee so bad, but I couldn't. My cock was so hard that when I bent it down to point at the toilet, it was like bending a straw. It collapsed and I couldn't pee. I finally settled on flipping around and bending over the toilet reverse cowgirl style. It must have looked ridiculous, but it worked. It was only afterwards that I looked at the shower and realized I could have just taken a shower and peed in the shower. Duh. File that away for the next time.\n\nWhen I tried to reverse getting back into bed, Eileen woke up and seeing my hard on pointed right at her, she drew up her legs and wrapped them around my hips pulling me into her. Add this to the list of firsts for this weekend. I gave in and thrust deep and hard and it brought a smile and a low moan.\n\nAfter a dozen or so strokes, she looked at me with those blue grey eyes and whispered, \"I want to be on top.\"\n\nI rolled us over, which unfortunately caused me to roll onto Heather's arm, waking her up. She retrieved her arm and then laying on her side began to watch us intently. Since I could see my cock going in and out of Eileen, I am pretty sure Heather could too. \n\nAfter a few minutes, I could feel her hand sliding down my chest and then wrapping around my cock as Eileen slid up and down on it. Eileen obviously felt it too as she stopped and asked, \"Can I help you?\"\n\n\"I just wanted to feel what it is like when a cock is inside your pussy,\" Heather replied softly. \"I want it so bad but I am so scared of it. My Mom would kill me if I got pregnant.\"\n\n\"Oh, baby girl,\" Eileen said as she climbed off of me to hold Heather. \"You'll know when it is time. Just know there are lots of things you can do for a guy without giving up your pussy.\" \n\n\"Ah-hem,\" I said clearing my throat. \n\n\"You can do this for example,\" Eileen said as she swung her hips over my head and presented her pussy to my face. As I reached up to tongue her slit, I felt her lay down and engulph my cock with her mouth. A moan escaped my lips as I felt her slide her mouth down the shaft and with a push and a swallow slid me into her throat. Apparently the lessons from Sandy were working.\n\nI felt her reverse course and unswallow my cock. \"Or you can do this,\" she said as she grabbed my cock and began to stroke it vigorously. I found myself unable to continue to lick her pussy and I concentrated on the feelings she was stirring up in my cock. \n\n\"Have you ever had a cock come in your mouth?\" Eileen asked.\n\n\"No,\" was the quiet answer.\n\n\"Would you like to?\" \n\n\"Can I?\"\n\n\"Please do,\" I said. \"Please. Please. Please.\"\n\nI felt the bed shift and a mouth lightly touched the tip of my cock. I groaned and my cock throbbed. \n\n\"I think he is close,\" Eileen said. \"Here, wrap your hand around him like this and stroke it up and down. There, that's good. Now wrap your lips around the tip of his cock. You can take a little more. And keep stroking him. \n\nI was groaning with each stroke now and my hips were trying to fuck her hand. \n\n\"He is really close now. Suck on his cock and swirl your tongue over the head. That's it. Are you close, baby? Tell us how close you are.\"\n\n\"Oh god,\" I grunted, \"I'm just about there. Keep it up, please. Don't stop. Oh god here I go.\"\n\nAnd with that, I felt the cum boil out of my balls and rush up the shaft and into her mouth. It surprised her and she pulled back when the first spurt hit her mouth. The second spurt caught her on the upper lip and across her nose. But by the time the third one jetted free, Eileen had pushed her head down and I spurted into her mouth she sucked on it by instinct and swallowed that one and the next one and the next until I stopped. \n\nEileen used a finger to catch up the errant spunk on Heather's face and sucked her finger clean. \"Good girl,\" Eileen crowed proudly, \"You have just performed your first handjob, given your first blowjob and gotten your first facial.\"\n\nHeather sat up and hugged Eileen and they started kissing. Watching them kiss breast to breast made my cock throb even as it was gradually losing the battle to stay hard.\n\n\"While I could watch this all day,\" I began, \"Should we go get showered and start breakfast. I am feeling weak after the workout last night and this morning.\"\n\nTwo minutes later found us in the shower soaping each other up and despite my protests of fatigue, I was able to fuck Eileen with Heather's help. Heather got me hard with another handjob and then guided my cock into Eileen, who was bent at the waist while I pounded her pussy from behind. Not to ignore Heather I had her stand next to me so I could suck her nipples while rubbing her pussy to a very noisy orgasm. Considering that before last night, she wasn't sure she had ever had an orgasm, I thought she was a very apt student.\n\nIt was later than I had intended when we stumbled out of the shower and threw some clothes on after drying off. Heather only had the blue nightie she had on when she came running into our bed terrified of the lightning storm last night. Eileen kissed her and told her to go get changed and we would see her in the kitchen shortly for breakfast.\n\nSurprisingly, the other two weren't up when we started in on making breakfast. We were down to the last can of orange juice and the last package of bacon. There were just enough eggs for a big batch of scrambled eggs and a cheese omelet for Steph. \n\nSpeaking of whom, Steph came into the kitchen yawning followed by Sandy and Heather. I wasn't going to say anything, but Steph was wearing her night gown inside out. Eileen wasn't so nice. \n\nBlushing Steph pulled off her night gown and flipped it right-side out and slipped it back on. I certainly didn't mind the view of her blush that went almost all the way down to her titties or the view of her beautiful titties bouncing as they were freed from the fabric. \n\nTo redirect the topic I spoke up, \"Kudos to whoever planned the menu for this weekend. We have just enough of everything and only a little bit left to haul back.\"\n\nSandy spoke up sleepily, \"That would be Steph and Jenny, but since Jenny isn't here, it is all Steph's credit.\"\n\n\"Well done, Steph,\" I said, \"The cooler will be much more manageable to carry back to the car versus hauling that ton of food in.\n\n\"Speaking of hauling, if we are going to get you graduates back in time to get cleaned up for your big graduation party, we are going to have to leave by about 12. So that is the deadline to be packed, cleaned and dressed and out by the van. Got it?\"\n\nHeads nodded all the way around. \n\n\"Good,\" I said as I piled the last batch of bacon on top of the rest. \"Can I get a hand or two to carry this out to the dining room while I finish Steph's omelet?\"\n\nThere was a sudden flurry of activity as everybody grabbed something and headed out to the dining room. One more flip on the omelet and a quick toss onto a plate and I followed.\n\nAs I walked into the dining room, it was dead silence as all eyes were on me and my eyes tried to be everywhere. All four girls had taken their clothes off and were sitting around the dining room table stark naked. As I set the omelet down, Steph broke the silence by starting to snicker. That set Sandy off followed by Heather and Eileen. Pretty soon all of us were laughing until tears ran down our faces. \n\nWhen I finally gained control enough to speak coherently, I asked, \"So who do I thank for this delightful naked breakfast?\"\n\nThree arms immediately pointed at Steph. \n\n\"Thanks a lot for ratting me out,\" she pouted.\n\n\"Well, I thank you very much Miss Stephanie for the lovely show,\" I said as I walked over and kissed the top of her head. Peeling off my shirt, I announced, \"When in Rome.\"\n\nWhen my shorts hit the floor there were wolf whistles and catcalls galore. I sat down quickly before my cock grew any more. \n\nAfter a lovely breakfast, I clinked my coffee cup and announced, \"Before you girls run off, Remember, we have to be on the road by noon. I would like to show our appreciation to Rob and Olivia by taking care of the bed linens and towels before we go. So please strip your beds and pile the sheets and the used towels outside the laundry room door.\"\n\nI thought I would get a lot more flack but everybody nodded. Eileen looked at me and said, \"Dishes or linens?\"\n\nI said, \"Dishes.\"\n\n\"I'm gone,\" and she was.\n\nI turned to see Steph starting to clear the plates. \"Don't you have a bed to strip?\" I asked.\n\nShe started to blush again and this time amazingly it went almost all the way to her belly button.\n\n\"Well, no,\" she said slowly. \"I slept with you guys the first night and Sandy the rest of the time and she volunteered to take care of the sheets. So I decided to help you.\"\n\n\"Thanks, I appreciate the help,\" I said with a grin, \"And the view.\"\n\nHer first blush was fading but the new one was even redder.\n\nBetween the two of us, it took almost no time to get all the dishes and pots unloaded from the dish washer from last night's dinner and get the breakfast dishes loaded in and started.\n\nGlancing around, I could see we were good when Stephanie spoke up, \"Robert, could you come here? I have a little problem.\"\n\nI walked over to the sink and said, \"What's up?\"\n\nStephanie turned around and grabbed my cock with one hand and pulled me in with the other. Kissing me frantically, she whispered, \"I need a cock in me. Now!\"\n\nSurprised, I pulled back and she hopped up on me. I don't know if it was luck or skill but as she slid down I caught her legs and she impaled herself on my cock. \n\n\"Oh god that feels so good,\" she said breathlessly. \"Eating pussy and getting eaten is good, but nothing beats a cock.\"\n\n\"I'm not sure we should be doing this,\" I tried to tell her. \"What would your sister say?\"\n\n\"She would say that nothing beats a hard cock in the morning,\" came Eileen's voice from behind me.\n\n'OH FUCK!' went the chorus of voices in my head. \n\n\"You couldn't wait?\" Eileen continued. \n\n\"I'm sorry,\" said Stephanie. \"We were done in the kitchen and I couldn't think of any other way to keep him here.\"\n\n\"What if he had wanted to fuck your ass again and I wasn't back with the lube,\" said Eileen.\n\n\"I think there is vegetable oil in the cupboard,\" said Steph, her voice trailing away.\n\n\"Why do I feel like I have been set up again?\" I asked setting Steph's legs down on the floor.\n\nIgnoring me, Eileen said, \"C'mon, let's go out on the couch.\" With that she turned and headed out of the kitchen with Stephanie following. I hesitated and then followed. One of the voices in my head was screaming, 'You need to get your head examined.' I couldn't agree more.\n\nOnce out in the living room, Eileen ordered me to sit on the couch. Steph straddled me and picked up where we had left off, sliding my cock slowly into the tight wet confines of her pussy. Ok, maybe this isn't so bad.\n\nWe had just started to get a rhythm going when Steph stopped and I felt a finger slide alongside my cock. Eileen was finger fucking her sister's ass. It felt strange but in a good way. Pretty soon I felt two fingers, then three. I was lying back on the back of the couch with my eyes closed just focusing on the amazing feelings the sisters were stirring up in my cock. Suddenly I felt something bigger than a finger push along my cock. I lifted my head and opened my eyes. Eileen was wearing a strap-on and was sliding her faux dick up Stephanie's ass. Oh my god. Stephanie was arching her back and moaning when we both felt the vibrations. Apparently there was a vibrator in the tip of that bad boy and Eileen just turned it on. I think my eyes rolled into the back of my head. \n\nI could feel Eileen slowly pushing her way into her sister's backdoor making her pussy oh so much tighter around my cock and then Steph started to come. Between the vibrations coming from Eileen's rubber cock and the pulsing muscles in in Steph's pussy, I was being pushed to the edge of my control. Steph collapsed onto my chest and lay there moaning incoherently.\n\nAfter a few minutes where I thoroughly enjoyed Eileen's gentle movements, Steph lifted her head and with a shaky voice called out, \"Switch.\" \n\nI had no idea what was going on, but Eileen pulled out and Steph got up on shaky legs. I started to get up, but Eileen put a hand on my chest and said, \"Stay.\"\n\nSteph turned around and Eileen reached down to grab my cock. She held it steady as Steph turned around and then positioned it at the wide open entrance to Steph's backdoor. I moaned as she began to sit down on my cock slowly burying it to the balls in her ass. Once down, Steph nodded to Eileen who assumed the position between her sister's legs and pushed her rubber cock slowly into her sister. I think we both felt the vibrations at the same time, because we both began to moan. \n\nThis time, I took a more active role and began to slowly fuck Steph's ass in counterpoint to Eileen's motions fucking Steph's pussy. It didn't take long for both of us to climb the mountain. I could feel Steph begin to squeeze my cock and that was all it took. I managed to blurt out, \"Coming,\" before blasting my spunk into my girlfriend's sister's ass. That set her off and we both went somewhere for a while. \n\nWhen I came to, Steph was laying on me and I had wrapped my arms around her and I was cupping her breasts. My slowly shrinking dick was still embedded in her butt. Eileen was just coming into view, drying the strap-on with a paper towel.\n\nA long ways away, I heard a buzzer go off and Eileen obviously heard it because she slapped Steph lightly on the tummy and said, \"C'mon sleepy head. First batch of sheets are done we need to get them out of the dryer and move the wet ones over.\"\n\nSteph nodded slowly and stood up even more slowly. Then she slapped a hand over her butt and sprinted for the bathroom. I looked over at Eileen and said, \"I'll help.\"\n\nShe nodded and then said, \"Only after you go wash that,\" pointing at my dick, \"We don't have time to rewash sheets if you mess them up. I'll meet you there.\"\n\nI got up and headed into the kitchen to wash up. On the way to the laundry room, I grabbed my shirt and shorts and put them on quickly. When I got to the laundry room, Eileen had the first batch of sheets on top of the dryer and had just finished loading the wet sheets into the dryer. Slamming the door, she jumped when I stepped up behind her and pulled her to me by the simple expedient of wrapping my arms around her and grabbing her tits. \"Oh my god, you scared the shit out of me. Don't do that.\"\n\nActing petulant, I pouted and said, \"I just wanted to let you know how much I love you. Let me help you fold those sheets.\"\n\n\"All right. I guess you are forgiven,\" she said as she passed me a corner of a sheet. In no time we had the pile of sheets and pillow cases folded up and sorted out. Rob and Olivia had a color coded system so it was easy to match sheets with pillow cases and which room they went to. Eileen looked at the piles and said, \"Those are from the master, but I don't know where the other sets go.\"\n\n\"We'll let the girl or girls that dropped them off collect them and put them back on the bed. In the meantime, let's go put these back on the big bed.\"\n\nAs we walked out, Steph was walking toward the laundry room. \"I'm sorry,\" she said. \"When I stood up it felt like I was going to flood the place.\"\n\nEileen giggled and said, \"No problem. I found this big studly sissy man to help me out.\"\n\n\"Ouch,\" I said.\n\n\"C'mon and give us a hand putting the sheets back on that monster bed,\" Eileen suggested.\n\nSteph nodded and followed Eileen. I hung back a little to watch two beautiful girly asses walk ahead of me. Did I mention that they were both still naked?\n\nIt was hard to concentrate on the bed with two gorgeous naked young ladies jiggling as they made the bed, but I managed somehow. When we were done, I suggested a shower so we would be ready to travel. Steph told us to, \"start without me, I need to go grab my suitcase and I will be back to join you two.\"\n\nWe were well soaped up when I pulled Eileen tight, eliciting a squeak from her. \"Have I told you that I love you, lately?\" I whispered into the hair at the back of her neck.\n\n\"No,\" she said. \"I'm waiting.\"\n\n\"I love you,\" I said.\n\n\"Then prove it,\" she said. \"Get it up and start fucking me before my sister shows up.\"\n\nThat wasn't as hard as it sounds. We were wet and slippery and we found out what those seats in the corner of the shower could be used for. I put one of Eileen's legs up on the seat and slid into her pussy. We were well into fucking each other's brains out when Steph showed up. She came up alongside us and hugged us. \"I love you guys,\" she said. \"I wish this weekend never had to end.\"\n\nShe had slid her hands down and when she said, 'end,' she stuck her middle fingers up our butts. We both jumped together and started coming as she began to wiggle her fingers inside us.\n\nA few minutes later we crawled out of the shower and piled our dirty towels up for the last load. It was going to be tight, but I think we could still make the noon deadline. I went off the pack the last of the food from the fridge into the cooler. Steph and Eileen took the suitcases out to the van and then went back to finish the sheets and get the towels started.\n\nIt took some work, but the van was packed and I had locked all the doors except the front door when Rob and Olivia pulled up. They were in an SUV this time, pity; I really would have loved to get a ride in that Lambo.\n\nWe went over and hugged them and expressed our delight at being able to stay at their \"cottage\". Eileen let them know that the sheets and towels had been washed and the beds were made. Olivia looked at Rob and smacked him upside the head, \"You didn't tell them about the maid service?\"",
        "Rob shrugged, \"I forgot. Sorry guys. We have a maid service that comes and takes care of that. But we really, really appreciate you guys going to all that trouble. Any problems?\"\n\n\"The power went out Saturday night and I switched it over to the generator. That thing worked like a charm. I checked it a little while ago and the power was still off.\"\n\n\"Yeah, it may be out for a couple of days. The storm hit a substation down the road. I saw the power company trucks next to it. The last time we had more than one truck, the power was out for a week.\"\n\nWe chatted a little more and then let them know that we were leaving the beer and wine and then said that we had to go. They were a little disappointed, but they understood when Eileen mentioned the graduation parties. I started to hand Rob the keys and he told us, \"Keep them, who knows we may have you out another weekend or two before you guys go back to college.\"\n\nA few minutes later, we had collected the girls, they made their final potty stop and we hit the road.\n\nWith that, I shook my head and I came out of my reverie. I realized I had completely forgotten why I went out to the garage in the first place, but I had a new purpose as I walked back into the house.\n\nI found Eileen in the kitchen and I snuck up on her and attacked. I squashed her against the sink, pressing my now tenting shorts against her ass while I groped her breasts and kissed her neck. \n\n\"Oh my,\" she said. \"Somebody is happy to see me. So what do I owe the pleasure of this unwarranted attack on my person?\"\n\nI flipped the plastic bag with the dried wildflowers onto the counter next to her while continuing to dry hump her.\n\nWhen she saw the flowers, the jig was up and my reasons were crystal clear. She pushed me back with her hips and spun around in the tiny space she had created. Wrapping her arms around my neck Eileen pulled me in for a really warm kiss. \n\nBreaking the kiss, she whispered, \"It feels like I should call Olivia and see if she and Rob are free some weekend soon.\"\n\n\"MmmmHmmm,\" I mumbled while kissing the tastiest part of Eileen's neck, \"That would be a most excellent idea.\"\n\nBut alas, that is a tale for another time."
    ],
    "authorname": "JamesMiehoff",
    "tags": [
        "cottage",
        "vacation"
    ],
    "category": "Anal",
    "url": "https://www.literotica.com/s/the-cottage-last-day"
}
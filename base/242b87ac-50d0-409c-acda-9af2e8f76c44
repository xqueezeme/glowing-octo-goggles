{
    "title": "Twin Cities Tryst Ch. 06",
    "pages": [
        "Disclaimer: Bork bork bork. I don't feel like writing out the full disclaimer. Anyone portrayed fucking or having sexy-time is 18 or older. There you go. \n\n***** \n\nChapter 6 -- A Sense Of Urgency \n\nI woke and felt a distinctly wet and warm sensation between my legs, along with hearing some giggling and light moaning. My eyes slowly opened and I looked down to see Janie and Annie taking turns massaging and licking my cock, bringing it to life. My blonde lover looked up at me and winked while our red-headed playmate bobbed up and down on my shaft, moaning in pleasure as one of Janie's hands reached behind and fingered her gooey pussy. Her fingers flexed on my thighs as she squirmed back against Janie's hand. \n\n\"Mmm, morning, daddy,\" cooed my beloved Janie. \"Nice way to wake up?\" \n\n\"I can't think of a better way,\" I replied, reaching down and caressing Annie's red hair while she sucked on me. Janie giggled and crawled behind Annie, who was lying on her stomach. She nestled around, coaxing the redhead to part her legs, and pressed her pussy to our plaything's. She began to squirm around, causing Annie to moan around me in bliss. \n\n\"Does she look good sucking on your cock while I girl-fuck her, daddy?\" Janie asked, smirking at me. Her eyes shone with pleasure, excitement and love as she looked across to me. Her legs were scissored with Annie's while she undulated sensually. Annie reached under herself and squeezed one of her breasts as she continued moving up and down my cock. \n\n\"She looks wonderful, baby,\" I said, nodding at her. \"You chose good. Wish we could take her home with us.\" \n\n\"Mmmmm, don't tempt me ...\" Annie purred, shivering as Janie fucked her. \"I haven't had this good a time in fucking forever. I wanna stow away in your suitcases.\" \n\n\"Oh God, that sounds wonderful,\" Janie sighed as she ground her slit against Annie's. \"I totally wanna make you fall in love with me and bring you home.\" \n\nApparently Janie's words triggered something in Annie, because her mouth popped off my cock and she instantly scrambled around to almost tackle Janie to the bed, kissing her feverishly, their bodies squashed together. Janie moaned loudly and wrapped her legs around Annie's waist while they rocked and ground against one another. Their tongues plunged hungrily, fingers groping and squeezing all the supple flesh they could find. They were almost panting as they ravaged one another. \n\nI moved down below them and took hold of Annie's ass, since she was on top. Her legs were splayed out to the sides, knees beside Janie's hips. Janie's legs were still wrapped around the redhead's waist. Their glistening pussies were squished together, presenting the perfect target. I steadied them, and Annie whimpered as I dragged my cockhead up and down her slick pussylips. Without further warning, I steadied myself and pushed inside her with one firm stroke. Annie wailed into Janie's mouth and shook like she was having a seizure. Janie held her tight, knowing what I was doing to her lover. Buried deep in her slit, I held myself in there for several seconds, letting her adjust to my invasion. She slowly calmed down, still kissing Janie, but trembling and turning a lusty shade of pink. \n\nI held onto her pert ass cheeks and began to push back and forth inside her, my cock almost leaving her pussy and then sliding back in. She groaned shamelessly, trying to squeeze my cock as I fucked her. \n\nBut then I pulled myself out of her entirely and as she moaned in protest, I lowered my aim and pushed my cock into Janie's waiting pussy right below. She almost yelped in surprise, but then shoved her hips up violently, as if trying to take more of me in. She kissed Annie fiercely as I filled her and rocked lustily. I could feel her trying to squeeze my cock as well. \n\nThey writhed and ground against one another, moaning through their wet, passionate kiss while I pumped my hips, sawing deep inside Janie, then pulling out and pushing myself back into Annie. She gasped loudly and looked back at me, her eyes glazed with unreal pleasure and lust. She was actually drooling, so lost was she in her ecstasy. \n\nThe girls almost mauled each other with their eager fingers and kissed loudly and sloppily. I fucked them in turn, determined to make them both cum as many times as I could before releasing myself. Annie gasped and cried out as I cracked my palm across her pert ass cheek, which started to go pink. \n\n\"Fuck!\" she rasped, shivering. \"Fucking smack it again! Smack me!\" \n\nI was buried in Janie while I smacked her again, loving how she groaned and squirmed in response. Her sloppy pussy was glazing Janie's with her wetness. I reached down and took hold of Annie by her chin with my hands. As I pushed deep into Janie, I pulled back on Annie's head, arching her back and neck toward me. She keened and shook violently, her now bleary eyes gazing back at me. Her breath was little more than gasping chokes as I almost accordioned her spine. \n\nJanie shuddered and spasmed suddenly, her pussy gripping me savagely as she came without warning. She almost screeched, but managed to strangle the noise somehow. Her hands tightly gripped Annie's pert breasts, leaving red welts. The redhead writhed and began cumming as well, even though I was not inside her. Not wasting a moment, I pulled out of Janie and speared myself into Annie, whose orgasm suddenly went into overdrive. Tears streamed from her eyes as she came, her hands scrabbling at Janie's soft shoulders in desperation. \n\nI slid back into Janie, who was still shuddering but seemed to cum again, if the noises she made indicated anything. Releasing Annie's face, she collapsed on her and trembled uncontrollably, even as she kissed her new lover. I was pleased to note that I didn't need to cum yet, meaning I could continue to brutalize the two of them, and proceeded to do so. \n\nI used my size and strength to pummel myself inside the girls, who were now screaming into each other's mouths, as if I were killing them, as they grappled onto each other for dear life. Annie's pale skin was flushed a deep pink, and even Janie's more tan complexion was considerably redder than normal. They were both also sweating profusely, bodies shining, and their sticky pussies were glued together. \n\nI was reasonably certain they'd each cum at least three times now and decided to join them. I jammed my hips forward as my cock reached deep inside Annie, swelling and throbbing. I began to cum, hard, lashing her insides with my pearly essence. I was still cumming as I pulled out of her and pushed into Janie, rapt by her wet heat as her pussy swallowed my cum. \n\nFinishing cumming, I eased myself back into Annie, then Janie, until I felt like there was nothing left. Both girls were barely moving, as if utterly exhausted, which they probably were. I couldn't lie on top of them without crushing at least one, so I pulled out of Janie and lay beside them, looking at the ceiling. My erect cock throbbed still, glistening with their wetness and dribbling cum from the tip. \n\nJanie and Annie were somehow still awake enough to be kissing, although these efforts were feeble, compared to their earlier eagerness. I could feel the heat radiating from their bodies as they lay next to me. We said nothing for several minutes, just existing. I thought they might have gone to sleep, with their lips still pressed together in a kiss. \n\nFinally Janie stirred, her hands reaching down slowly and taking hold of Annie's ass cheeks, squeezing gently and massaging them in little circles. Annie sighed contentedly, pecking and nibbling at Janie's lips, and then their tongues began tangling languorously. I watched contentedly as they pleasured one another. \n\nAnnie whispered something in Janie's ear, and my beloved blonde giggled and nodded. They both sat up and then moved over my hips, almost like they were crab-walking. Annie then pressed her pussylips against my still-erect shaft and began squirming against it. Janie then sidled in, her legs scissoring around Annie's and then pressing her gooey slit into the other side of my cock. They looked at one another and giggled as they undulated their pussies against me and one another around me. \n\nI watched in lazy fascination as they fucked each other around my cock, sighing as they felt me throb between them. Then Annie eased forward slightly and sank down onto me, until I was deep inside her. She groaned and moved up and down slowly, while Janie kept squirming against her wetly. Then the redhead pulled off and Janie pushed her cunt down on me, while Annie pussy-fucked her. \n\nI was in no danger of cumming, but the two amused themselves for some minutes until Janie moaned and climaxed, followed by Annie as she was impaled on me. Annie lay on top of me, facing up, with my cock in her while Janie lay on top of her and they kissed and rubbed their sweat-slicked bodies together, whispering to one another. \n\n\"Holy shit ...\" Annie sighed finally. \"Can't believe we just woke up. I already feel like we've been in a fuck marathon, and the day is young.\" \n\nJanie nodded and sluggishly got off the bed, stumbling over to the desk and retrieving two bottles of champagne. She popped them both and came back, taking a stiff pull from one bottle while handing me the other. Bubbly for breakfast. All righty, then. \n\nJanie clambered onto the bed, kneeling in front of Annie, who also got on her knees. Janie took another drink and then snuggled her body into her lover's and they pressed their lips together. Annie moaned as Janie fed champagne into her mouth. I could see their tongues moving inside their mouths, lips sealed to keep the champagne from leaking out. \n\nI took pulls from my bottle while they shared each other, doing a surprisingly good job of not making a mess on the bed. If they did, it was because they began giggling, and some of the bubbly dribbled out between them. Fortunately their breasts caught most of it, a perfect excuse to lick and suck on one another. \n\n\"Mmmm, we shouldn't make a mess of the bed like this,\" Annie purred as she cradled Janie's head while she licked champagne off her nipples. \"Why don't we try out the jacuzzi, and we'll bring the bottles with us?\" \n\n\"That sounds like a great idea,\" Janie mumbled around the glistening pink bud in her mouth. \"Let's go ...\" \n\nHand in hand they slid off the bed, with Janie reaching over to take me by the hand as well. They wiggled their way into the bathroom and passed the time by giggling, feeling one another up and making out while I started the water. \n\n\"Daddy, can we also take her down the hall and fuck her in the sauna?\" Janie cooed, reaching out and stroking my cock while giving me an imploring look. I nodded readily and they both squealed in delight and jiggled about. The water was nowhere near full when they both clambered into the tub, wasting no time in turning on the jets and then wrestling around, trying to pin one another against the jets, blasting their pussies. I just watched in amusement. \n\nPredictably, it wasn't long before they were both on all fours in the middle of the tub, kissing deeply and letting selected jets massage their girly bits relentlessly, moaning all the while. Some people might have pointed out that they were paying a lot of attention to one another at this point, rather than me, but to be honest, I was enjoying and needing the interlude. Women cum again sooner than men, and can keep going. Once a guy climaxes, he generally needs time to recharge, not to mention build up the cream reserves again. This was giving me a chance to regenerate, so to speak. I'd fucked her in the jacuzzi before; I could wait until the sauna. \n\nI soon climbed in with them, making sure that the tub would not overflow. They made room for me to sit in the middle, while they resumed their positions, leaning across me to kiss, their hands resting on my sizable quads. They both found my cock, not surprisingly, and began to caress and stroke it while they made out. \n\nAnnie shivered and moaned loudly, squirming her ass as she came. It wasn't long before Janie joined her, whimpering into her lover's mouth and cumming hard. They broke the kiss, panting as they tried to compose themselves. I smiled and caressed their behinds gently, letting them recover. Janie leaned in and kissed me lovingly, while reaching for Annie's head and taking it gently to bring her in close. Annie's mouth replaced Janie's in the kiss, while my blonde lover nibbled at the redhead's skin. \n\n\"Are we including you enough, daddy?\" Janie asked, caressing my cheek. \"Don't want you to feel excluded.\" \n\n\"I'm resting up for the sauna,\" I replied, reaching under and fondling one of Annie's pert breasts and making her moan into my mouth. \"Takes a lot of energy to keep up with two horny young girls, you know.\" \n\nJanie and Annie giggled and then snuggled into me, their hands wandering over our bodies while we relaxed. I wasn't surprised when they kept finding my shaft and stroking it, bringing me back to a state of semi-hardness. I could see the glint in Annie's eyes as my cock slowly stiffened in her hand. \n\n\"Ooh, daddy, I know what she wants,\" whispered Janie in my ear. \"Even if you're not ready to cum yet, you should make her cum. You ready to do that?\" \n\nI nodded. Unless a girl is an absolute succubus, I tend to be capable of staying hard and refraining from orgasm as needed, simply by pacing myself and letting fleeting, non-sexual images enter my head every so often to control my ardour. Without another word, we shuffled around until Annie was in my lap, kneeling on either side of my thighs and facing out. Her slippery pussy found my cock and she pushed herself down on it eagerly, letting out a guttural moan as she bottomed out. \n\nJanie turned down the jets, probably because she wanted to hear Annie's moans more clearly. Kneeling at our side, she kissed the dancer while we both fondled and squeezed her breasts. Annie shuddered and groaned as she began to churn up and down on my cock lustily, clearly not intending to prolong the activity, but race ahead to her orgasm. The jets were at a low hum now, the water eddying around us gently, and we could clearly hear one another, which seemed to be the point. \n\nThe door to the room opened, and in walked Erika, poor thing, carrying champagne bottles. \n\n\"Good morning,\" she said cheerfully, turning to look to the jacuzzi when she heard the hum. \"I brought you -- oh, goodness, I'm sorry.\" \n\n\"Don't be,\" Janie replied, smiling while continuing to fondle Annie. \"We gave you permission, after all, so we're not gonna be doing anything we'd worry about you seeing.\" \n\n\"You do seem to keep multiplying,\" Erika agreed, still standing in the doorway, bottles in hand. \"I ... guess I'll just put these down.\" \n\n\"In here, please,\" Janie said, pointing to the small table nearby us. \"That way we don't need to get out to go and get more from the other room. This is Annie, by the way; she's a new friend of ours.\" \n\n\"Hello, Annie,\" Erika said politely. \"I'm Erika.\" \n\n\"Hi ...\" Annie panted as she bounced up and down, her pert tits jiggling away. \"Nice to meet you ...\" \n\n\"Erika,\" Janie began, blushing a little. \"D'you ... we were hoping to use the saunas in a bit, possibly the pool. Are we gonna get in trouble if we --\" \n\nErika picked up quickly on what Janie was asking and just waved it off. \"I'll make sure you have time. How long and when?\" \n\nJanie considered, looked at me and then back at Erika. \"Ummm ... three hours, starting in an hour?\" \n\nErika shrugged and smiled. \"Wouldn't be the first time I've closed down the pool and saunas for a private party, dear. Consider it done. So, close it at nine o'clock?\" \n\n\"Thanks, Erika, you're the best!\" Janie said, still fondling Annie's tit with one hand but looking at our advocate. Erika nodded and exited our suite quietly, leaving us to our depravity. With Erika gone, Janie now knelt in front of us, her knees on either side of mine, close enough to squirm her body against Annie's while I fucked her. They kissed one another hungrily as the redhead churned on my lap, squeezing my cock with her pussy. I let my mind wander on occasion, my member staying hard, but my desire to cum forgotten enough to rein in my passion. She would cum, I would wait. \n\nThis still felt amazing, though, no two ways about it. \n\n\"Oh!\" Janie exclaimed suddenly, pulling back from the kiss with a small splash. Annie was confused as Janie almost threw herself out of the tub and scurried into the main room. She returned quickly, carrying both of our phones, activating them. \n\n\"Annie, I know you're busy,\" she said as she clambered back in with us, still holding the devices. \"But are you willing to allow me to record us with you? I'm trolling a friend who's a meanie and said I was too chicken to fuck my daddy.\" \n\nPreoccupied as she may have been, Annie seemed to answer readily, looking at Janie with heavy-lidded eyes. \"Are they here in the city?\" \n\nJanie shook her head: \"Totally different state.\" \n\n\"That's fine then,\" she breathed, pushing down hard and squirming herself in circles on me, getting me inside as deep as possible. \"Just let me have videos as well, I wanna remember this.\" \n\n\"I'm glad,\" Janie said eagerly, activating the camera on one phone, then snuggling in beside us and focusing the action on Annie and myself, the big screen forward, so we could see what was happening. \n\nAnnie appeared on the screen, moaning as she pumped up and down on me, with my hands squeezing her breasts. It stayed focused on us for a few seconds, before panning over to Janie, who smirked at the camera. \n\n\"Hey, guys,\" she said cheerfully. \"We're still having fun, and we found a new playmate. More later. Bye!\" \n\nShe clicked off the camera and giggled as she saved it and sent it to me, Annie, Les and Hannah. \"This'll really burn her cookies,\" she snickered as she finished. \"Annie, want me to film daddy making you cum?\" \n\n\"Uhh, please!\" rasped the dancer, her skin almost the same colour as her hair. She was leaning forward now, still gyrating, but leaning on my thighs for support. I could feel her pussy clenching tighter and tighter around me and it took considerable willpower on my part to focus past the pleasure and not cum. \n\nJanie began recording dutifully, her phone trailing up and down our bodies as Annie fucked me. Her gasps now had a wheezing quality to them as she churned and bounced, her lovely body beginning to tremble. Janie had to really concentrate on recording; I could see the eagerness in her eyes. \n\nAnnie shook and groaned loudly, arching her back and pressing down as hard as she could. Her pussy gripped me savagely as she came and she writhed like she was in some state of transcendent rapture. I gripped my hands on the sides of the tub to help control myself, letting the feel of her squeezing me go. I watched Janie do her thing in an attempt to calm myself, and it seemed to work, because I was still plenty hard, but didn't cum. \n\nAnnie collapsed back against me finally, her chest heaving. She was breathing heavily, like she'd sprinted up the hotel steps to our floor as quickly as possible. She looked at me through glazed eyes and put a weary hand on my cheek. \n\n\"Oh, daddy ...\" she sighed, totally out of breath. \"No wonder your little girl loves you so much.\" \n\nI chuckled and wrapped my arms around her, my hands on her breasts as I kissed her neck, making her purr and squirm. Janie was still filming, but I was not at all surprised to see her free hand had snaked down between her legs to pleasure herself. Less than a minute passed before she whimpered and came as well. If the camerawork became jittery, as least she had a good excuse. \n\nJanie stopped recording and set the camera down, before coming in and sitting on my legs again, leaning in to kiss Annie tenderly. We sat together serenely, caressing one another for some minutes before Janie sat up again, bringing Annie with her. They ran their hands over one another as they stared into each other's eyes and then kissed before Annie eased herself off me, moaning as I slipped out of her. Finally, I allowed myself to relax and stand down. ",
        "\"God, I guess we'd better shower next,\" Janie sighed, looking around. \"We wanna be clean before we go defile the sauna, right?\" \n\nAnnie giggled and agreed, looking forward to trying out our fancy shower. They got up and wiggled out of the tub while I let out the water. Janie had started the shower heads and they were both in by the time I'd left the tub. I joined them under the deluge, feeling the water scouring my skin. The girls giggled and covered me in body wash, squirming their sexy forms up and down my frame, their hands pumping my cock and making me hard again. Janie took my member in her mouth and began bobbing back and forth, before giving it to Annie, who repeated the process. \n\nThey knew I couldn't fuck just yet, but they seemed quite ready to tease me, squirming their asses back against my crotch, my throbbing dick almost going inside them repeatedly. Predictably, the teasing made them horny, and it wasn't long before they were lying on the floor of the shower in opposite directions, legs scissored and rubbing their wet pussies together. I cleaned myself and watched as they fucked, until they both strained and cried out, cumming hard. I couldn't keep the smile off my face, because I was really pleased that Janie was having such a good time. I loved her and wanted her to be happy with our week together. \n\nSluggishly they parted from one another, and I reminded them of the time we were due over at the sauna and pool for privacy. They nodded and cleaned themselves before we all left the shower and went into the main room. I mentioned that there wasn't really enough time to order food, but they both waved it off, saying that they'd survive until after our private session. I told them I'd order room service afterwards and they readily agreed. \n\nSome fifteen minutes later we were heading down the hall, wearing plush robes from the hotel. I'd noticed Janie and Annie giggling and slipping some strap-ons into the oversized pockets of their robes, along with a few smaller items, like massage oils we'd bought. Erika was waiting for us at the entrance to the facility and smiled pleasantly. \n\n\"Prompt, I like that,\" she remarked. \"So basically, I've booked off the facility for a private event and waived the fee. There'll be small signs notifying passers-by that the facilities are indeed being used from nine to noon. The doors will be locked from the outside, but you can leave if anything is wrong, of course. This is a key to get back inside, if you must leave for any reason.\" \n\nI accepted the key from her. I figured I'd better be the one to hold onto it, before it ended up in someone's pussy 'accidentally.' Probably not the first time for this key, now that I think of it, given who some of the previous VIP guests had been. \n\n\"You've been a very big help, Erika, this entire week,\" I said, smiling at her. \"Thank you for everything so far.\" \n\nShe blushed a little and then turned and walked away. I'd been holding the door open and the girls swished inside before I allowed it to close behind us. \n\nThe next phase of our entertainment had begun. \n\n*** \n\nThe little hallway leading into the facility was all wood, and had a nice cedar smell to it. There were small change rooms on either side, not that we needed them, and then a few small dry sauna rooms, all made of wood, with two levels of seating. There were also two wet saunas just beyond, both lined with ceramic tiles. Two small rooms, each with private whirlpools, greeted us next, and then the large area, containing a decent-sized pool, and a jacuzzi mounted on a small raised surface just beyond. \n\n\"Jesus, how are we going to use everything?\" Janie breathed, looking around. \"I mean, I wanna cum everywhere, right?\" \n\nI took a deep breath. \"How about this? We have three hours. I can probably cum soon, and then again near the end. You both keep having your orgasms, and I'll fuck you as much as I can, with those two objectives in mind, okay?\" \n\nThe both agreed readily, and I had to admit, I was happy they could help in making one another cum, because if it had been just up to me, I probably would have just crumbled into dust by the end of the second hour. They decided on one of the hot tubs first, because they'd already used ours. The difference here was that these were bigger, and there was lots of room for us to spread out and get inventive. Janie already had our phones set up at various angles for recording, no doubt for posterity, but also to drive Hannah crazy. \n\nI turned on the jets from the wall unit, and the girls had already shed their robes and were climbing in. The back two thirds of the room was taken up by the jacuzzi, with small benches on the sides near the front of the room. The entire room was, of course, made of wood, giving it a very warm and sexy feeling. The tub was well over eight feet across each way, so there was all sorts of room for misbehaviour with just the three of us. \n\n\"Oh God ...\" Janie purred, turning slowly in the water and trailing her hands through it. \"I'm seeing daddy fucking me from behind while Annie is lying on her back on the edge here and I lick her pussy.\" \n\n\"That sounds amazing,\" Annie agreed. \"Then then I'll lie on you again and your daddy can take turns fucking us.\" \n\nWith the girls clearly planning our itinerary for the next three hours, I simply climbed into the churning, foamy water. Janie instantly snuggled into me, purring and then kissing me deeply, lovingly. I could feel her heart strumming under her soft breasts. \n\n\"Daddy, I love you so much ...\" she murmured through our kiss while Annie looked on, smiling and caressing her waist. We kissed in the middle of the jacuzzi, bodies melded together perfectly. I was so in love with this girl. And Annie could see it in the way we held one another and kissed. \n\n\"It's amazing how in love you are,\" she said softly. \"Not just daddy and daughter stuff, but like two real people in love. I'm totes jelly.\" \n\nJanie sighed and ended the kiss, reaching out and pulling Annie gently to us. She joined us in our embrace, fitting in snugly and perfectly with it. Janie smiled at her. \n\n\"You started out as a plaything for us to share, but I think we both like you and would happily consider you a friend.\" \n\nAnnie blushed for a moment and then smiled. \"Never been friends with anyone I danced for before, but you two are my exception. I'd like to be friends.\" \n\n\"Yeah,\" Janie said, taking a breath. \"So, I'll be honest with you. He's not my father. Not even my big brother. We're friends, yeah, and we've been in love this whole week, but we're not daddy and daughter. We kinda ran with that as a prank for funsies, to see people's reaction, and kept it going. But you should know the truth, because you're our friend now.\" \n\nAnnie looked back and forth between us for a moment, sighed lightly and nodded. \"Kinda too good to be true, it was really hot,\" she admitted. \"But yeah, I can see that happening with two weirdos like you. And it's also really obvious that you're desperately in love, so that's still awesome. I'm glad you were honest with me. When's the wedding?\" \n\nJanie's turn to blush. \"N-no wedding, we're just together for the week. Having sex wasn't really planned, and we just agreed to enjoy the dopamine rush of being in love before this goon goes home again.\" \n\nAnnie, however, didn't see any point in this spoiling the mood, and smiled wickedly. \"Well, then we'll both pretend he's daddy and we're naughty little sisters, okay? How's that sound for a hot afternoon?\" \n\nJanie's eyes fairly blazed with sudden lust at the suggestion, and Annie found herself grappled onto and kissed fiercely by my blonde beloved. She shuddered and began returning the kiss eagerly, hands groping and squeezing. Seconds later, Janie pulled her to her knees, and they both took my cock, sharing it as they sucked me to a raging hard-on. \n\nThey kissed one another sloppily around my now glistening shaft, tongues tangling and fluttering. Janie was pumping my cock in her hand when they both looked up at me, eyes glazed with a deep need. \n\n\"Gonna fuck us, daddy?\" Annie breathed, an excited expression on her lovely face. \"Fuck your little girls good and hard? I've been bad!\" \n\n\"And I've been so good, daddy!\" giggled Janie, really getting into the spirit of the roleplay Annie had initiated. They kissed one another again lustily, standing and moving over to the edge of the tub where the deck was widest. Still kissing, they lay down on it, with Annie on the bottom and Janie pressed down on her. Arms still wrapped around each other, they kept kissing, but spread their legs wide, their slick pussies on display for me. \n\nCouldn't disappoint my girls now, could I? \n\n\"So, who gets it first?\" I asked I came and stood between their legs, tapping my cockhead against their wet slits and making them both shudder and moan. \"Who will daddy fuck first?\" \n\n\"Daddeeeeeeee,\" whimpered Annie, pausing the kiss with Janie and looking over at me. \"Just fuck us! Together! Don't tease us!\" \n\n\"Fuck us hard,\" rasped Janie, looking back at me now over her shoulder. \"But fuck our asses too! I'm feeling really daring right now ...\" \n\nWithout another word, I pushed my cockhead through Annie's pussylips and slid deep inside her, making the redhead seize up and cry out as I filled her. Holding onto Janie's ass cheeks, I began pumping back and forth, fucking her steadily. She hissed through her clenched teeth, her eyes squeezed shut while Janie nibbled at her neck and ear. \n\n\"Gnnnnnnnn, fuckfuckfuckfuck!\" she grunted, writhing beneath Janie. \"Ohhhhhhhhhhhh fuck!\" \n\nHer legs had wrapped around Janie's waist again, and they began kissing feverishly. I pulled out of Annie, making her wail in protest, and then pushed into Janie, who groaned loudly into her \"sister's\" mouth. They rocked around while I fucked her and smacked her ass cheeks, turning them pink and making her yelp. I moved back and forth between their pussies, controlling myself while I made them each cum, screaming into one another's mouths so as to not alert the entire floor to our activities. \n\nMy cock was slippery with their cum and natural lubrication, and I pressed the head against Annie's puckered knot just below her pussy, held her steady and pushed firmly, popping through the tight ring and making her gasp in shock. She wheezed as I slid myself inside her, and her eyes went wide, like they'd bug out of her head. I pinned her to me and held still for several seconds, letting her adjust. She was sucking in air, trying to adjust, and I waited patiently. \n\nAnnie finally smiled and began kissing Janie again, so I took this as permission to proceed. I began a slow back-and-forth motion, sliding my cock almost all the way out before pushing in again. I could hear her moan and felt her trying to squeeze me with her ass. This girl was a trooper, no question. I had a good view of my rod pushing in and out, the pink ring of her ass pulling back with me as I fucked her. \n\nAs with fucking their pussies, though, I finally pulled out of Annie and pointed my head at Janie's ass. She knew what was coming and seemed to be squirming eagerly, looking back at me with glinting eyes. I pulled her cheeks apart, giving her a small stretch and making her keen. I placed the throbbing head at the small, dark hole and eased inside. Janie sighed and then shuddered and arched her back as I slid in farther. \n\n\"Mmmmmm, Michael ...\" she murmured. \"I love it ...\" \n\n\"Mmmm, daddy's name is Michael?\" Annie mused, smirking. \"You look like a Michael.\" \n\n\"And I'll bet your name is in fact Annie,\" I replied as I began to push back and forth inside Janie above her. \n\nAnnie blushed. \"It is. I was too lazy to come up with a stage name, so I just tell everyone my stage name is Annie and they believe me.\" \n\n\"Well, you look like an Annie, so kudos to my little girl for being honest.\" \n\nI fucked Janie some more and then slid back into Annie's ass. They were both panting, kissing and whispering about how naughty they were, and how dirty, letting daddy fuck their asses at the same time. They were really getting off on this, and it was making us all hot. They were squeezing me tighter and tighter, and I did not try to retain control. I knew I had to cum soon, and then spend time recovering, if I was going to cum again later. \n\nAnd cum I did. I squeezed Janie's cheeks hard, grunting and shoving against her roughly. She almost shrieked, but Annie had the presence of mind to hastily cover her mouth with a kiss before she knocked down all the walls. She came as I did, pumping thick ropes of creamy cum into her ass. Without hesitation or warning, I pulled out and jammed myself into Annie, who wailed through her kiss, shuddering and grinding lustily as I came inside her as well. \n\nBoth girls were panting as I finished cumming inside them, kissing one another and moaning. I slowly pulled out of Annie and pushed back into Janie, since I was still hard. I stroked in and out, slowly eliciting a whimper before pulling back and sagging into a sitting position in the churning tub. The girls disentangled themselves and came to join me. They snuggled into either side of me and sighed contentedly. \n\n\"Gawwwd, I'm gonna be so bummed when this morning ends,\" Annie sighed as she gently nuzzled her cheek against my chest. \"Back to sucky reality.\" \n\n\"Yeah,\" Janie murmured in a little voice from my other side. \"After tomorrow, our week together ends ...\" \n\nI cuddled her in closer and she looked up at me. Janie fairly melted into the loving kiss we shared, while Annie looked on, smiling wistfully. \n\n\"Well, it's not like we can't make this morning last forever, right?\" she announced cheerfully. \"What's next? One of the saunas?\" \n\nJanie broke the kissed and grinned. \"Oh, yeah, I can't wait for that. We should do that soon. Once daddy has his strength back, of course ...\" \n\n\"I'm not dead, you know,\" I muttered, making them both giggle and kiss my torso before meeting in front of me for a tongue-tangling make-out session. Not surprisingly, their hands found my cock and were working on bringing it back to life. I settled in and leaned back in the water, relaxing like a king while these two gorgeous girls stroked me and nibbled at my skin. \n\n\"Mmmm, let's continue this in the dry sauna,\" Janie purred. \"Put on a show for daddy and turn him on ...\" \n\nI released the drain and we exited the tub. While it was a shame how little time we'd actually spent in it, we still had much to do. They led me by the hands and we walked a little farther down the corridor to the dry sauna, which, I must say, was excellent. Bigger than what the three of us could need, but also still feeling cozy. The wooden walls and benches smelled of cedar, and I was pleased to note that the stones were still quite warm from a previous user, and wouldn't take long to get back up to their appropriate heat level. While I was adjusting the temperature, the girls were already sitting on the upper bench, looking into one another's eyes and feeling each other up. \n\nI was feeling very relaxed, and sat lengthwise on the lower bench, watching the two of them. They kissed as they caressed one another's breasts, moaning gently and waiting for the sauna to reach peak temperature. They drew closer and closer to each other, until nipples were brushing and they both shivered in delight and then began squirming. Fingers soon found pussies, and then they were whimpering and moaning as each fucked the other's wet slit. These two were insatiable. I already knew this about Janie, but together they were dynamos. \n\nThey broke the kiss and Janie was biting her lower lip and smiling as she let Annie finger her. She spread her legs wider, giving her lover more access, a better angle. Annie leaned in and nibbled at Janie's ear, making my blonde goddess close her eyes and shiver. Her hands reached up and squeezed Annie's breasts and her hips churned around her probing fingers. Annie whispered something, and Janie nodded readily, her eyes still closed. I swear, she was almost drooling. \n\nJanie lay down along the length of the top bench, one leg hanging over the side and the other bent. I could see her glistening pussy, the wet folds slightly pulled apart from Annie's fingering. The redhead climbed over Janie and faced down her body, her eyes meeting mine for a moment as she smiled wickedly. Janie took hold of her hips and leaned her head up, kissing and licking at Annie's womanhood. Annie shuddered and arched her neck, moaning, before leaning down and beginning to return the favour. She pulled Janie's slippery netherlips apart, showing me her wet, inner pink. Her tongue snaked around the clit and then traced up and down the lips, while her fingers held Janie's pussy open, stretching her and making her keen beneath her. \n\nI knelt up and watched silently, rapt by the Sapphic bliss they shared, undulating and squirming against one another slowly, enjoying the pleasure. Annie's tongue dipped inside Janie, while her fingers deftly traced around the lips, or her thumbs teased her clit. I could hear Janie moaning, and then saw Annie gasp and buck as Janie did something wonderful to her. \n\nI may have cum recently, and was in no danger of doing so immediately, but this was still a huge turn-on for me to watch, and my member began to swell. I helped it along by stroking it casually, and as the fervour of the girls' squirming and moaning increased, I was starting to grow hard. Annie looked up and saw what I was doing. She smiled and beckoned me to come closer with a finger. I stood on the bench I'd been sitting on and came closer to her. She slid her fingers into Janie, while she turned her head and sucked my cock into her wanton mouth. \n\nEven while pleasuring Janie and being pleasured by her, she still went at it with a will, bobbing back and forth ardently along my length. It wasn't long before I was throbbing and hard again. Her tongue swirled around the tip, flicking against it, while she smirked at her handiwork. \n\n\"Daddies,\" she giggled. \"So easy to turn on.\" \n\n\"With two naughty girls like you, that's just a given,\" I replied, taking her cheeks between my thumb and fingers, squeezing firmly and making her look up at me. She shivered at the display of dominance, her eyes wide and fairly glazed with lust. I pushed my cock against her lips, her cheeks, and around her face, and she whimpered, her eyes closed. \n\n\"Fuck ...\" she murmured, lost in some world of submissive bliss. \n\nI pushed inside her mouth again and she sighed as I released her, moving up and down my shaft, which was glistening now. She was breathing heavily as Janie pleasured her relentlessly with fingers and tongue. I pulled out of Annie's mouth finally, letting her breathe, and sat her up so that she was sitting on Janie's face. My blonde lover's hands latched onto her thighs to hold her in place, and Annie shuddered in delight as she squirmed up and down on that skilled mouth and tongue. \n\nFrom this position, I couldn't really fuck Janie, even if I got in closer. I would have to lie on the top bench with them, on top of her, but with my back arched to keep making room for Annie. I settled for teasing her by putting one foot on the upper bench, leaning in and drawing the head of my cock up and down her mushy pussylips, almost as if I was stirring them, and Janie moaned loudly into Annie, making her gasp and shudder again. \n\nMy cock pressed against her clit, and Janie squealed and shook, cumming. Whatever she did inside Annie set her off as well, because she cried out loudly, grinding on Janie's face with a dreadful eagerness, her spine seeming to accordion. I heard Janie splutter and gasp suddenly, almost thrashing. Annie leaned forward hastily, looking back as she let Janie raise herself up on her elbows. Janie's eyes were wide, and she seemed rather surprised. Her face wasn't just shining with cum, it was dripping.  ",
        "\"Sorry,\" Annie giggled, blushing and biting a nail. \"Sometimes I'm a squirter, I just don't know when, until it happens.\" \n\n\"I'll say ...\" Janie murmured. \"Wow.\" \n\n\"You're not mad at me, are you, daddy?\" Annie cooed, sidling forward until she was pressed up against me, tracing a fingernail up and down my chest while giving me puppy-dog eyes. \n\nJanie sat up now and cuddled Annie from behind, her hands on her breasts while she kissed her back and shoulders. Annie purred and squirmed down onto her while still teasing me. It may have been the dry heat sauna, but we were all still sweating, especially the girls, from their exertions. \n\n\"You two stay here while I get the steam sauna ready,\" I said. They both nodded readily, and Annie turned around in Janie's lap to make out with her. That would keep them occupied for a good time, while I saw to our next venture. It was not far down the narrow wooden hall, but completely different from the other rooms thus far -- it was clad from floor to ceiling in sky-blue ceramic tiles. The floor was textured to keep people from slipping when it got wet. \n\nI found the knobs that controlled the steam, along with a rock heater in the corner, complete with a large bucket and ladle for extra steam. The hissing noise from the valves kicked in, and within minutes, the steam was so thick that I could barely see a foot in front of myself. Satisfied, I slipped out of the room and went back to get the girls. Not surprisingly, I found them churning against one another, with Annie lying on her stomach and Janie on her back, their legs scissored past one another. Their hips undulated and squirmed as they pussy-fucked one another, both groaning. \n\nI seemed to have arrived well into the action, because Janie arched her back and sighed loudly while Annie gasped and pushed back on her hands against Janie's pussy for all she was worth. They strained for several seconds, bodies shaking as their hips pressed and gyrated, until finally they collapsed back onto the bench, panting as the orgasm passed. I gave them a minute or two before gently pulling them off their bench, helping them down and leading them out. \n\n\"Jesus,\" Janie exclaimed as we stepped into the steam room, waving a hand in front of her face trying to disperse the thick, sweltering mist. \"Good thing I'm gonna have you guys inside me, or I'd lose track of you.\" \n\n\"This is gonna be fun,\" Annie giggled. \"I almost won't be able to see whom I'm fucking, just feel them.\" \n\nThey'd already latched onto one another and were kissing hungrily, while I towered over them. I watched as they squirmed their increasingly slippery breasts together, the thick, curling steam obscuring the view somewhat even from this close. \n\nThey knelt together and stayed closely pressed while they turned their attention to my cock, taking turns sliding their mouths back and forth along its length. They flicked their tongues together around the head, giggling and having fun as I grew hard yet again. These two were going to kill me at this rate, because I knew they expected to be fucked, even if I didn't cum. That was the deal, after all. \n\nOnce they had me good and throbbing hard, they took me toward the long tile seats and began arranging themselves. Annie sat on the upper level, her back propped against the wall and her legs spread wide. Janie knelt on the lower level, burying her face almost instantly in Annie's pussy, making the redhead suck in her breath and then moan, her eyes rolling up into her head. Her hands grasped Janie's wet blonde hair, squeezing. Janie's ass wiggled at me temptingly, her glistening slit visible, begging to be fucked. \n\nKnowing she didn't want to wait, I took hold of her hips and pressed my knob against her, eliciting a groan, before sliding deep inside. I could feel her, but only barely see her through the wreath of steam that filled the room. I could make out Annie's squirming shape, less than two feet away, hear her moaning and panting, her red hair more visible than the rest of her. My thighs slapped against Janie's ass, her supple back leading into the mist below. I could see my cock sliding in and out of her dripping pussy, feel it clench around me. I just kept watching the sensual movements through the thick steam, enjoying our exotic surroundings and not letting myself concentrate on the sheer pleasure of being deep inside Janie. \n\nHer skin was slick with perspiration, and I smacked her cheeks with my palm, making her gasp and whimper. I felt her contract around me and she pushed back, hard. She licked Annie harder, making the redhead squirm and moan even louder, clutching reflexively at her blonde locks, unable to keep her legs still. \n\nI fucked Janie harder, eliciting loud, shameless groans. One of her hands was bracing itself on the tiles, the other massaging and squeezing her own breasts. She sucked on Annie's clit loudly, and Annie sounded like she was having an asthma attack. I thrust in and pushed up, a sawing motion deep in her pussy. \n\nAnnie wailed that she was going to cum, and Janie pulled her mouth up and jammed it against Annie's, kissing her hard. Her fingers slid into the redhead's blossoming cunt, working in and out quickly. Once again Annie spasmed and began to squirt, with Janie catching the shots on her breasts. Annie writhed as Janie pressed into her, and then I slammed home as hard as I could. Janie screamed into Annie's mouth as she came. I closed my eyes and ignored the savage contractions around my cock, thinking instead about how this was our last full day together, tonight our last night. \n\nI didn't cum. I kept pounding against her, mercilessly, but I didn't cum. I'm pretty sure the girls both came again at least twice, although it was hard to tell with all the moaning they were doing as they kissed. I shivered as I finally pulled out of Janie's well-abused pussy and sat down next to them, sighing. They parted from their rapturous kiss and snuggled into me again on either side. \n\n\"Daddy starting to wear out?\" Janie giggled, pressing her finger against my cock, making it wobble. \n\n\"I'll live up to my end of the bargain somehow,\" I replied, hoping I wasn't blustering. \"Somehow.\" \n\n\"Awww, you just need some TLC,\" she cooed. \"Annie and I will look after you.\" \n\nShe asked Annie to get from towels from the hall. The redhead wiggled out and came back in, holding four plush white towels. Janie laid three of them on the floor, and then rolled up the fourth one, putting it at the top of the arrangement. \n\n\"Now lay down and let us massage you.\" \n\nI nodded and lay on the towels, which were now between me and the floor tiles, providing some level of softness. My head rested on the rolled towel nicely. The girls then leaned in and began rubbing their slick, slippery forms all over mine, using their bodies to rub me down and massage me. I was transported to absolute heaven, and my cock stayed hard, making them giggle every time they were close to it. Annie slid her breasts around on my chest while Janie used hers to envelop and massage my throbbing manhood, kissing it as it appeared from between them. \n\nI lost track of how long I'd actually been laying there, but I was rather convinced it had been a good while, and the girls kept up the massage devotedly for the whole time. Eventually, they turned me over to lie on my stomach, and seemed to have already accounted for my hard-on, because Annie lay down facing away from me and slithered under my hips after Janie coaxed me into raising them. Lying on her stomach as well, Annie slithered her tight little dancer's butt against my crotch, making sure I stayed hard. Janie used her hands and the rest of her body to caress and rub me, leaning down occasionally to whisper in my ear about how in love with me she was. \n\nThe way she was making me feel, I didn't doubt it. \n\nAnnie eventually turned herself over, lying on her back and still underneath me. My hips were still arched by her body, but I felt her take my cock in her hand and guide it into her slit. She pushed with her hips and sighed as I penetrated her. My cock was pulled down slightly by the unusual angle, but it still felt wonderful, being buried in her warm, tight pussy. She undulated underneath me while Janie kept massaging me and cooing to me. \n\nThe angle was clearly a pleasant one for Annie as well, because she was breathing heavily and moaning beneath me. While I doubted that she needed the help, I began to push down with my hips as she pushed up, sinking even deeper inside her and making her gasp. She didn't object at all to my assistance, so I kept going. \n\nNot cumming was actually relatively easy this time around, because of the pull downward on my cock, not to mention all the attention Janie was giving me. At some point, I felt Annie writhe and shudder, moaning loudly as she came yet again. I had no idea how I was supposed to keep up with these two. She squirmed away until my cock was out of her pussy, and then I felt her shimmy underneath me again, this time head-first, taking my throbbing member into her hot, wet mouth and sucking the cum off it hungrily. \n\nI was getting sleepy. They say you shouldn't spend too long in a sauna, but that probably doesn't account for strenuous activities, like having sex with two girls while you're in there. So lethargy was understandable. Even my companions seemed to be getting sluggish. \n\n\"Ladies, let's go take a dip in the pool,\" I suggested. \"Wake ourselves up.\" \n\n\"Okay!\" they chorused, slowly rising. I got to my feet, and they exited as I turned off the steam valves. I went through the final set of doors to the pool deck, where I found Annie and Janie waiting, sitting on the edge of the pool, kicking their feet back and forth like little kids and holding hands. They slipped into the cool water and looked up at me, but both squealed in shock as I jumped into the air and cannonballed, thoroughly soaking them. \n\nI had barely surfaced before they were attempting to push me under, laughing and wrestling with me. We tussled and splashed one another for several minutes, the activity punctuated by kissing and groping. At one point Janie was lying on her back, treading water with her legs spread, while Annie was holding her by her behind and lapping at her pussy. Janie moaned loudly and shamelessly, her blonde hair floating around her like a corona of gold. I smiled and leaned in to kiss her. She wrapped her arms around me and kissed me back, still lying there and letting Annie pleasure her. \n\n\"This is such a wonderful morning, Michael,\" she breathed, her eyes locked with mine now. \"I love you so much.\" \n\n\"I love you too, Janie. So damn much.\" \n\nShe smiled now, her eyes shining. \"I wish this -- gnnnnnn -- I wish this morning would never end.\" \n\n\"Daddy,\" Annie murmured, her mouth still on Janie's mound, \"let me go get some of the toys Janie brought and we'll fuck her together.\" \n\nI nodded, and she pulled her mouth off Janie and swam over to the side of the pool, lifting herself out of the water. Janie and I held one another as she wiggled out of the room, disappearing back to retrieve the robes we'd brought. Janie wrapped her legs around my waist and looked up at me, her blue eyes shining with love. \n\n\"I can't tell you how much this week has meant to me, Michael,\" she said softly, while my hand caressed her cheek. \"I am so in love with you, and I feel like my heart is gonna break when tomorrow comes and I have to let you go.\" \n\nShe turned her head away from me and wiped at tears, before looking back. She smiled at me somewhat wanly, and then squirmed her pussy against my cock, smirking as she felt my hardness. \n\n\"You're such a perv,\" she giggled. \"Violating innocent girls like Annie and me. What will society think?\" \n\n\"They'll be jealous of me, of course,\" I said, lining my cockhead up with her pussy and pushing inside her, making her gasp deeply. Her hands gripped my back as I held her in place by her ass cheeks. I began a pumping motion, sliding in and out of her. Janie bit her lip and looked up at me, her eyes glassy with pleasure. She squeezed my cock with her pussy muscles, still loving the sensation. She leaned in, resting her head against my shoulder, sighing and moaning quietly. \n\nOn the far side of the pool, the walls were glass windows, giving the people inside a great view of the city. As far up as we were, thankfully, we didn't have to worry about anyone outside seeing us flagranting the delicto like this. Maybe I'd fuck them in the window, if time and endurance allowed. \n\n\"Ooo, lookit you two,\" Annie giggled as she wiggled back in, carrying the robes. \"Couldn't wait to get back at one another, hm? Not that I blame you.\" \n\nJanie didn't actually reply verbally, just shaking her head as she kept her forehead pressed to my shoulder. Annie had slipped into the water and was fastening on one of the dildos by a small leather belt. She waded toward us, smiling wickedly. \n\n\"Well, Janie, since daddy is already lodged in your cunt, do you want your sissy to put it in your ass?\" \n\nJanie nodded again and I widened my grip on her cheeks, spreading them apart slightly. With the water easing the weight, I bent my knees a little, so that Annie could actually get into Janie's ass without difficulty. The redhead put her arms around Janie's torso and found her breasts, caressing them before taking hold of her dildo's shaft and wiggling it around until she found Janie's knot. \n\nJanie shook and let out an intense groan as the dildo penetrated her ass and slowly pushed inside her. She bit at my shoulder, her fingers flexing into my back desperately. I could suddenly feel Annie's dildo through Janie, her phallus separated from my cock only by a thin membrane between Janie's pussy and ass. We were not in rhythm, and as I pulled out, she was sliding in, and vice versa. \n\nJanie whimpered and almost seemed to be crying as we double-teamed her this way, but then Annie smiled wickedly and whispered. \"Let's push inside her at the same time, now ...\" \n\nI slowly pulled my cock out of Janie, keeping the head pressed against her pussylips. Annie pulled back until she was set as well. I nodded and we both slowly pushed into Janie at the same time and she shook violently and almost wailed in pleasure, her neck craning back and her wide eyes staring at the ceiling. We paused inside her, keeping her filled for several seconds. I could barely tell if she was breathing. \n\nThen we both pulled slowly back, doing our best to keep in sync. Janie shivered and sucked in her breath. Before she was ready, we pushed back inside her and she whimpered, her arms leaving my back and hanging loosely at her sides, as if all energy and control of her body had left her. She just sat between us, almost limp, and braced by our bodies sandwiching her. \n\nWe both began sawing in and out of her, up inside her body, in a firm rhythm, with Janie shuddering and flopping between us almost bonelessly. I looked at Annie and she smiled back at me evilly, enjoying what we were doing to our mutual lover. She bit at Janie's shoulder while she fucked her and groped her breasts, pinching the nipples. Janie shuddered in response. \n\nThere was no one around and I did nothing to quiet the noise as she wailed in sheer ecstasy, cumming between us. We kept fucking her strongly while she screamed out the climax, collapsing back against Annie, who barely caught her. Janie's eyes were rolled up into her head and she seemed to have experienced one of her blackout orgasms. I was still deep in her pussy, but Annie was no longer in her ass. She was looking at our plaything curiously. \n\n\"She's not dead, is she?\" she asked. \n\nBy way of response, I reached down and gently pinched Janie's clit. She didn't open her eyes, but she shivered in response. She was also drooling. \n\n\"No, she's just mostly dead,\" I replied. Janie moaned and sluggishly gave me the finger, making Annie giggle. \n\n\"Did you cum in her, daddy?\" the redhead asked. \n\nI shook my head. \"No, Janie'd probably like it if I save my blast for you, to be honest. I'm sure I'll pump her full many more times before I leave tomorrow evening.\" \n\n\"Damn well better ...\" Janie murmured, stirring finally. \"Ohhhhhh shit ... never felt anything like that in my life.\" \n\n\"Enjoy it?\" Annie asked, snuggling in and caressing Janie's breasts. \"Sure sounded like you did.\" \n\n\"Well, it's defo how I wanna die now,\" Janie sighed, sitting up somewhat, my hands still on her ass to support her in the water. She shivered as she felt me still inside her and hugged me close. \"God, I love you so much ...\" \n\nI slowly let her down to her feet, my cock slipping out of her pussy and springing to attention, making Annie giggle. She played with it, watching it wobble as she pushed it around with her finger. Janie sagged back against the pool wall, sighing heavily. Her eyes were glazed and she seemed less than fully focused. \n\n\"Fuck her good and cum in her, I'll hold onto her or something ...\" she said wearily. \n\n\"Yum-yum-yummy!\" Annie quipped as she snuggled up to Janie, rubbing their noses together. \"Time for my cum-cum-cummy! Where shall I get fucked? Oooh!\" \n\nShe pointed excitedly at the other side of the room, toward the giant windows that looked out over the city. \n\n\"The windows! Press me up against the windows and fuck me hard! Let's give the cities a show!\" she squeaked. \n\nWell, this girl was a stripper for a living, so how modest could she possibly be? \n\nI had barely nodded my assent before she'd clambered out of the water and was skipping around the pool toward the windows. She was looking out over the city in delight, seeming positively giddy about the prospect. I certainly had no objections, and I gently took hold of Janie, picked her up and eased her out of the water. She got to her feet while I pulled myself out. Then we walked over hand in hand to join Annie, who was almost bursting with anticipation. \n\n\"I, uh, might need you to take that off first, mind,\" I mentioned, pointing at her crotch. She looked down and giggled, remembering that she still had the strap-on she'd fucked Janie with fastened to her. She whipped it off and tossed it aside, presenting herself as if she were brand-new merchandise. \n\nI moved past her hand and pressed my palm against the window we were standing next to. It certainly seemed to be sturdy, which was good, given the pounding I was supposed to give her. There were at least two panes of glass, both of which seemed to be solid, probably weather- and cold-resistant at this height. \n\n\"Whatcha waitin' for, big man?\" she teased, looking up at me and leaning back against the window while pushing her hips forward and stroking her fingers up and down her pussylips. \"Need a break or somethin'?\" \n\nWell, if that's how she wanted to play it... \n\nShe gasped as I took her by the head and pushed her down to her knees and then fed my cock into her mouth without warning. She gurgled and almost gagged, but then adjusted readily, moaning loudly as I began to push my hips back and forth, my still-hard shaft sliding down her throat. I felt her hands grasp my thighs as she tried to steady herself. Credit where it's due, the girl was a Myrmidon. \n\nI then took both her hands off my thighs and pulled them over her head, gripping her by the wrists with one hand. She shuddered at the display of my superior strength and bobbed back and forth, her eyes closed, and her body trembling. My other hand rested in her red hair, keeping her in place. Beside me, Janie watched with intent fascination. \n\nAnnie gagged slightly and coughed as I pulled out of her mouth, but then I almost yanked her up by her arms and slammed her back against the reinforced glass of the windows. She gasped in delicious fright, her eyes wide and shining, her pupils tiny. I grabbed her by the ass and pulled her against me roughly, lifting her up. Without waiting, I lined my cockhead up against her pussy and pushed inside. ",
        "Annie cried out at the penetration, her arms still over her head, even though I was no longer holding them. Her eyes were wide with what might have seemed like fright, if I hadn't known better. Her back and ass thumped against the window as I slammed my cock into her, the glass flexing behind her. \n\nAnnie gasped and panted as I fucked her harder and harder, no longer needing to restrain myself or hold back this morning. Janie had moved in closer, watching as I violated Annie, who began whimpering in pleasure, her tiny body helpless against mine. \n\nHer legs wrapped around my waist and she began grinding her hips against me, her eyes squeezed shut as she bit her lip and tried to fuck me back. But then her eyes snapped open and she yelped out as Janie leaned in and bit her nipple, holding it between her teeth. Annie writhed, but couldn't escape the position. Her skin was flushed, the wetness of the pool soon replaced with sweat. Still I kept fucking her, pumping my cock deep inside. \n\nWithout warning, I turned her around to face out to the window, but still held her petite body off the ground. Her breasts were squashed flat to the glass, but I pulled back on her lower body, arching her spine so that her legs stood out behind me on either side of my hips. She screeched as I pushed my cock back inside her, so that she was truly pinned and helpless against the window. \n\nAnnie gasped and panted as her forehead pressed against the glass, fingers grasping at the smooth surface. Janie had ducked down and squeezed herself beneath Annie and was now caressing her stomach, arched down and readily available. She nipped at the skin and trailed her tongue along her belly before stopping to watch in fascination as my cock plunged in and out of the redhead's pussy. \n\nAnnie shuddered as much as she could, shrieking through clenched teeth as she orgasmed, hard. Her cum bathed my cock and I kept fucking her relentlessly. She started making gasping and choking noises, no doubt because her body was compressed into its current shape. But she didn't seem to want me to stop, so I kept going. I could see my glistening cock sliding back and forth inside her, the pliant, pink inner pussylips wetly gripping my shaft. \n\n\"I think she's just about done, daddy,\" I heard Janie say from below. \"Go ahead and bust in her. You've waited long enough.\" \n\nI grinned and allowed myself to lose control of my pleasure, no longer trying to rein it in. I fucked her harder and faster, feeling Janie massaging my cock and Annie's slit with her hand. Annie whimpered and begged for me to cum in her, turning her head to look back at me. Her eyes were bleary and red with tears, which glistened on her cheeks. \n\n\"Cum in me ...\" she gasped. \"... oh God, please!\" \n\nShe was shaking again and I could now feel my own climax boiling up as her pussy clenched me harder, throbbing around me like a slippery vise. Janie leaned in closer, and I could feel her tongue flicking against my shaft and Annie's pussy, teasing us both. Ragged gasps escaped the redhead as her body churned against me. \n\nThumping harder and faster, my hips smacking between her legs as my cock plunged inside her, I gripped her hips tightly, the tingling bliss working its way out of my core and through my body. I pushed in as far as I could, almost leaning forward on my toes and causing her back to arch almost ninety degrees from her hips. Annie shrieked loudly and shook violently as she came. \n\nI released myself, pumping my ropes of cum deep inside her greedy pussy. Janie was moaning beneath us, her tongue sliding around, tasting us. I growled and kept fucking, my mind on a roaring wave of pleasure. Annie moaned and wailed continually, as if unable to control herself. Maybe she wasn't; I wouldn't blame her, folded up the way she was. Her pussy sucked the cum out of me greedily, milking me with every slippery clench of her muscles. \n\nI willed myself not to fall to my knees and drop Annie. Slowly I began to lower her, while Janie reached up and put her hands on the redhead's torso, helping me ease her down. Annie whimpered as my cock slid out of her, and she nestled into Janie's arms, the two of them kissing and humming in bliss. \n\nI loomed over them, leaning forward against the window and breathing heavily. Janie giggled as she noticed my softening cock swaying next to her face. She began kissing it lovingly, soon joined by Annie, who seemed to have survived her orgasm tsunami. She kissed and licked around the shaft, squeezing her thumbs along the vein on the underside, as if to milk out the last precious droplets of my pearly cum. Annie held her mouth open below while Janie aimed the offerings onto her tongue. \n\n\"Ohhhh my God,\" Annie breathed, still pink from her exertions. \"I'm pretty sure you two have ruined sex for me, so thanks a lot ...\" \n\nJanie giggled and laid the redhead down, lying partially on top of her and kissing her while caressing her weary, abused body. Annie accepted the pampering readily, while I knelt down next to them, thoroughly spent. Annie reached out and took hold of my cock, coaxing me closer to her mouth. Upside down, she took me between her lips and ran her warm, wet tongue around my shaft lazily before bobbing up and down, cleaning me off. Janie kissed and swirled her tongue around Annie's nipples at the same time, before crawling down and parting her lover's legs. \n\nAnnie moaned in pleasure as Janie began licking and scooping my cum out of her pussy, murmuring about how good we tasted together. I kept kneeling over Annie while Janie did her part. I could only describe what I was feeling at that moment as well-earned exhaustion. I kept myself disciplined enough to make sure my lovers had cum repeatedly, and finally been rewarded. Life was pretty damn good. \n\n\"I think we should all go sit in that hot tub up there above the pool,\" Annie murmured, her voice rather dreamy. \"Only place we haven't violated yet, right?\" \n\nJanie and I wearily nodded our assent. \n\n*** \n\nJanie and I were still wearing our robes while Annie had dressed up in her street clothes again, her belongings tucked into her high school-style backpack. She seemed to have recovered from her ordeal, looking refreshed and cheerful now. \n\n\"Are you sure we can't accompany you downstairs?\" Janie asked, trying to pout. \n\n\"Yeah, best this way,\" Annie sighed, nodding. \"Here, I can kiss you shamelessly, without attracting attention. And if you come down with me, I might not leave when you're right there. I need the walk to steel my resolve.\" \n\n\"Well, there's my whole scheme blown,\" Janie snickered. \"But I know you have to get going. School and stripping and all that.\" \n\n\"Mmm, you make it all sound so tawdry,\" Annie purred as she sauntered over to us, smiling wickedly. Janie pulled her into her arms and they shared a deep, wet kiss, tongues tangling loudly. Janie then broke the kiss long enough to add me to it, and the three of us kissed sensuously for some time until Annie pulled back, trying to control herself. \n\n\"Sorry, nearly lost it there,\" she managed to say, wiping at the corner of her mouth. \"I gotta go, or it's just not happening. Wish me luck making it to the front doors.\" \n\nWe accompanied her to the door of our suite and I opened it. She looked at us, giving us both a wan smile for a moment before blowing a kiss and then walking out. I watched her from the door until she reached the elevator. Tempted as I might have been to make sure she got on, I was reasonably certain that if she turned around inside the elevator and saw us staring at her, she would come rushing back. \n\nWith a resolve I didn't want to feel, I closed the door. Janie was already back in the room, preparing champagne and absinthe. \n\n\"Letting her go like that was hard,\" she mentioned, taking a sip from her glass immediately and looking at me. \"Did we do the right thing?\" \n\nI chuckled. \"I'm not sure we want to be the reason she misses her high school classes, even if she's eighteen and a stripper. Yes, darling, we did the right thing. And to be honest, I'm going to enjoy just concentrating on you again. It's what I came here to do, after all.\" \n\nShe blushed and looked at the floor. \"You're so good to me,\" she said quietly. \"How was I not supposed to fall in love with you?\" \n\nI pulled her close and held her to me. I kissed the top of her head while she nuzzled her face against my shoulder. \"I love you too, Janie,\" I replied. \"Nothin' the least bit convenient about it, is there?\" \n\n\"No, there isn't,\" she confessed, pushing her face farther into my chest, as if to hide her expressions from me. She was very emotional, that much was obvious. \"Just ... take me to bed, and let's sleep this morning off. You said tonight you're gonna wine, dine and romance me, so I'd better be rested up, right?\" \n\nI smiled and nodded: \"Let's do that, beautiful.\" \n\nWe both drained the glasses she'd fixed for us and shed our robes before crawling into bed. She nestled her naked body against mine, seemingly deep in thought as she gazed at the wall. \n\n\"It's happening,\" she murmured. \"Tomorrow is coming. It's almost here. Too quick.\" \n\n\"Then tonight had better count, right?\" I reasoned, kissing her head again and holding her close. \"Don't think about it, lover. We still have a lot to do.\" \n\nShe looked up at me and smiled, her eyes dewy with love. Nodding, she crawled on top of me, her pussy nestled to my cock and her breasts squashed to my chest. Janie sighed contentedly, relaxing her body. \n\n\"A girl could get used to sleeping on her man like this,\" she said quietly, resting her head and closing her eyes. \"Three hours?\" \n\nI nodded. \"See you then. Love you.\" \n\n\"God, I love you, Michael ...\" she murmured, already drifting off. \n\n*** \n\nI was adjusting my tie in the mirror, having put the rest of my suit on already. Beside me, Janie was adjusting her lovely evening dress, just moving the top into place. She'd done her hair up and her eye makeup was a subtle blue-grey. An elegant, thin necklace sat on her collarbone and a delicate bangle on one bicep. \n\n\"So, how do I look?\" she asked, turning to smile at me. I paused in tying my tie and faced her, putting my hands on her arms gently. \n\n\"You're a goddess and you know it,\" I said warmly, smiling. \"You're an absolute vision, and I am so in love with you.\" \n\nShe bit her lip. \"How do you expect me to keep this dress on when you say things like that? Do you promise to defile me in this dress when no one is looking?\" \n\n\"Of course I do,\" I replied. \"I wouldn't dream of missing an opportunity like that.\" \n\n\"Well, let me fix you up here,\" she suggested, reaching in and straightening my tie. \"A girl's gotta look after her man, right?\" \n\nI was reasonably certain I'd done it right to begin with, but who was I to deny her the chance to fuss over me? She seemed satisfied with her work and nodded before returning her attention to her own details, and a hint of blush to her cheeks. I looked her up and down as she did so -- she really did look magnificent, with the dress clinging to her curves in all the right ways, the royal blue fabric encasing her toned butt and leaving her shapely legs to be seen. \n\nI moved behind her while she was adding some lip gloss and took hold of her ass cheeks, pressing myself into her. \n\n\"Nffffff, God, not now, male,\" she sighed, trying to ignore me and continue her makeup application. I ground my crotch against her ass, slowly lifting the dress up to expose her tan nylons and the tiny black thong she wore beneath. \"Michael, please ...\" \n\nNever one to refuse a lady's request, I continued molesting her, squeezing her hips and gyrating against her slowly and rhythmically. She put down her makeup and leaned against the table, closing her eyes and biting her lip. She began squirming her ass back against me, feeling my cock grow inside my trousers and making her moan. \n\nPreparations were paused as we ground against one another, needing this moment together. Her blue dress was bunched up on top of her ass, only the nylons and thong panties in the way now. Janie gasped and shivered as I hooked my fingers into the nylon fabric and pulled them tight against her. She pushed back against me harder still, whimpering in need. \n\n\"Bastard,\" she breathed, her cheeks flushed. \"These are my best pair, don't stretch them...\" \n\nThis protest, though, did not keep her from reaching back and pawing at my now-hard cock, still encased in my trousers. She massaged my hardness before allowing my to return to grinding and humping against her. I had no intention of cumming, since I wanted to be ready for later tonight, but I could make her cum, and putting myself on edge for later wasn't a bad idea at all. I'd keep teasing her all night, and she'd thank me for it. \n\nI pushed and undulated against Janie slowly as she leaned on the ledge, both of us looking into the mirror, enthralled by the sight of us bonded in heated teasing. I reached forward, sliding my hands up her torso to her ample breasts, still encased in the snug blue top of her dress. I fondled them, making her shudder, before slowly pulling the fabric down, exposing her pale orbs. Janie groaned as I squeezed them again, making her push back against me her throbbing womanhood against my crotch. \n\nShe panted and writhed around, her fingers clutching the marble of the sink. I could just picture her pussy clenched and rippled around my member, a wet, tight fit that I would never tire of. I pinched and gently pulled at her nipples, making her groan loudly again, her head tossing around. Her skin was turning flushed all over. We didn't intend to prolong this session, since we had reservations to see to. But God, molesting and torturing her right then was the best idea. \n\nShe pushed back against me as hard as she could, straining and arching her back. Her eyes were squeezed shut and she bit her lip as she fought down a scream. I pushed in turn, pushing as close to her through our clothes as possible, letting her feel my cock throb and swell. Janie whimpered as she came, her pussy soaking her thong and even dampening her nylons. Against all odds, I managed to not cum, and worked on calming myself down while she panted and squirmed, mewling in pleasure. \n\nJanie fell forward on the marble basin, sighing heavily. I gently leaned down and rested on her back, moving my pants away from her gooey slit. Our hearts beat loudly in tandem, and my hands still gripped her lovely breasts from below. \n\n\"That was so perfect,\" she murmured, her forehead pressed to the marble. \"Oh my God, you always know exactly what to do ...\" \n\nMy hands slowly pulled away from her breasts, and she shivered as her nipples pressed against the cool surface. I stepped away from her, eliciting a moan from my lover. She slowly pushed herself up and then turned around, keeping the skirt portion of her dress hiked up while she squatted down in front of me and unzipped my pants, fishing out my tool and kissing it lovingly all over. She hummed and moaned as she rewarded my intuition, but not enough to make me cum. She finally tucked him away in my boxers and zipped my back up, making sure there were no wet marks on my dark grey trousers. \n\n\"Girl's gotta know how to look after her guy on date night, right?\" she quipped, winking at me. I nodded and she stood up again with my assistance, smiling at me before wiggling back into the main room to presumably replace the nylons I'd stretched. \n\n\"Should I put on a fresh thong?\" she called back to me as I finished cleaning myself and pulled my pants beck on. \"Or should I just put a pad in this one?\" \n\n\"I personally love the idea of you walking around in the wet thong I made you cum in,\" I replied, adjusting my tie again. \n\n\"Say no more,\" she announced cheerfully. \"Whatever my man wants, he gets.\" \n\nShe joined me again before long, needing to reapply her makeup, now that she had a freshly fucked glow to her as well, something Janie could not readily hide. Soon enough, though, she was ready, and more gorgeous than ever. I loved this woman so much. \n\n\"Mmm, those nylons you tore,\" she purred as she hooked her hand through my arm. \"I'll be keeping those, one of my spoils of war from this lovely holiday. They'll get a place of honor in my bedroom and everything.\" \n\n\"I'm flattered,\" I replied, kissing her forehead. \"Art thou ready, my lovely?\" \n\n\"I so very am,\" she purred, stroking a finger along my chin and winking. \"Shall we head down to my car?\" \n\n\"Actually ...\" I said, giving her pause. \n\n*** \n\nJanie was absolutely giddy to be riding in the back of the limo I'd rented for us, kicking her feet as she drank some of the complimentary champagne from the cooler, while I'd slipped some absinthe into her glass. \n\n\"My poor little car,\" she giggled. \"She's gonna be so jealous that I've been cheating on her.\" \n\n\"Well, I promise to help you make it up to her by making love to you in her,\" I answered, pointing at her with my own glass as I sat across from her. \"Would that help?\" \n\n\"Worth a try,\" she quipped, toasting me with her own glass and sipping again. \"God, you've thought of everything, haven't you?\" \n\n\"A chap does what he can,\" I said airily. \"I try at all times to remain preux chevalier, darling. And one is either preux, or one isn't.\" \n\n\"I don't know what that means, but you're absolutely correct,\" Janie snickered. \"I'd forgotten this club was literally on the other side of the city; it would've taken over an hour to get there in my little beater.\" \n\n\"It's going to take an hour in this thing, but at least it'll be in style,\" I pointed out. We had jazz playing on the radio and we were already on the second bottle of champagne. We talked about the rest of the evening and I avoided mentioning tomorrow, because I knew she was upset about how quickly this week had flown by. \n\n\"I can't believe the lengths you've gone to for me, Michael,\" she murmured, her eyes somewhat misty as she looked at me. She got up and moved over to me, hiking up her skirt so that she would straddle my lap. She drained her glass and put it aside. She smiled, but there was a tinge of sadness in the expression. \"I love you so much.\" \n\nShe kissed me gently and then smiled again. \"I guess ... I guess the one good thing about this week being almost over already is that we don't have time to plan anything stupid like get married, huh?\" \n\nI caressed her beautiful face and tried to think of what to say. The truth of what she was saying unsettled me. I didn't like it, but I forced a smile... while my fingers were on her cheek. \"I can think of far worse fates to be resigned to than marriage to an insatiable alcoholic lesbian.\" \n\nShe choked back a laugh and wiped at a corner of her eye. \"And maybe being married to a giant Canadian smart-ass wouldn't be so bad either. At least my drinking partner could keep up with me, then.\" \n\nShe kissed me again and just hugged me, sighing. I held her gently, caressing her and letting her feel loved. I was running out of time to do so, and nothing else was really that important to me. Soon enough, we'd be eating, drinking, dancing and having a wonderful time. It wasn't exactly late, and the night was young. \n\nRoughly an hour had passed when we arrived at the dinner club, one I considered very posh for what was an essentially middle-sized city by my standards. Long and low, with more than a few marquee lights around, it beckoned to us, advertising its exclusive fare. I'd paid our driver for the evening, so he would simply wait outside in the limo while we wined and dined. \n\nI opened her door and she gracefully stepped out. I offered my arm and escorted her to the door, walking her through and inside. I was duly impressed with the spacious layout, and elegant jazz was being played by a quartet on a small stage. The hostess took our reservation and led us to our secluded seats. Janie smiled as she looked around. ",
        "\"Always wanted to try this place, never had a reason.\" \n\n\"You're my reason,\" I said simply, making her blush and smile. \n\n\"Sweet-talker ...\" she murmured at the floor. \n\nThe other thing about Janie, of course, is that she's not afraid to show her appetite. After some lovely appetizers, ranging from a simple caprese salad to stuffed figs and mushrooms, we were served a Mulligatawny soup, accompanied by sherry. \n\nThe second course was fish, served with a crisp, fruity white wine. The main course for me was a rare steak, while Janie was served a veal ossobuco, accompanied by champagne. Even though each serving of our drinks was only a glass, not much more than a tipple for me, I was given to conclude that mixing alcohols was a great way to get Janie drunk quickly. It's like her body couldn't adjust or react readily. I made this observation and she frowned, somewhere between confusion and attempted offence. \n\n\"s'posed to mean?\" she demanded quietly, holding her champagne flute. \n\nI considered, and finally used a Star Trek analogy, since we were both big geeks. \"It's like your shields can't oscillate their frequencies quickly enough to keep out all the phaser damage they're taking. Remember how Klingon shields could withstand that Breen weapon in DS9?\" \n\nShe frowned and nodded: \"Fuckin' Klingons.\" \n\n\"Well, you don't have Klingon shields when it comes to mixed alcohol. A few frequency oscillations and your defences are down.\" \n\n\"And I suppose you mean to take advantage by boarding me while my shields are down?\" she asked, smirking and winking. \n\n\"I prefer a diplomatic invitation, but I will resort to a forced boarding when necessary,\" I replied, raising my glass. \n\nShe raised hers in response: \"To forced boardings. May they always be welcome, and never go out of style.\" \n\nDessert was various poached fruits, served with port. It had been a perfect meal and we sat for a bit, allowing Janie to adjust, since she was rather drunk. Once she could walk readily under her own power, we made our way to the dance floor, taking advantage of the slow numbers they were playing to dance closely. Janie was nestled in my arms, radiating a sense of love and comfort at being there. \n\n\"Talk about a moment that needs to never end ...\" she murmured before pressing her cheek to my shoulder and closing her eyes. I had to admit, I agreed with her; this was pretty close to perfection right now. We danced slowly through a few more songs before making our way out to the limo, which then took us to a hall that was holding ballroom dancing that night. \n\nJanie had mentioned taking ballroom dance and waltzing lessons before, and I was familiar enough, so this would be a wonderful experience together. More than just Strauss, they played waltzes by Chopin, Mahler and even Cole Porter. We smiled and laughed, enjoying the more energetic dances, while the slower, circular and more stately ones found us staring into each other's eyes as we twirled around the room. \n\nSometimes I was holding her close enough that I could feel her heart beating against me. It took supreme willpower not to just take her cheeks in my hands and kiss her, deeply and lovingly, although I am sure she would not have objected, since the world seemed to have fallen away for both of us, leaving only one another. \n\nShe looked up at me, her blue eyes shining, and I understood just how in love with me she was. I could identify, of course, because I felt the same way about her. \n\nThe night of dancing ended quickly, and we had our limo driver take us back downtown, dropping us several blocks from the hotel. As he drove away, we held hands and began a slow walk through the downtown core, not taking much notice of anything or anyone, just walking and saying nothing. Janie mostly looked at the ground, seemingly lost in her thoughts. \n\n\"Slip of gold-pressed latinum for your thoughts,\" I offered, squeezing her hand. \n\nShe smiled, but kept looking at the ground. \"I was just wondering where I wanted you to make love to me before we went back to the hotel,\" she answered quietly. \"I mean, I know this city ain't big by your standards, but there's still a lot of places we might have done it, y'know? A week wasn't nearly enough to hit everything.\" \n\n\"I know,\" I said soberly. \"So the place you pick had better be special. Take your time thinking about it.\" \n\nShe nodded and we kept walking, still taking little or no notice of anything that wasn't a red light or a stop sign. I heard her whispering or humming to herself on occasion, but every once in a while she would look at me, smile, tell me she loved me and then kiss me on the cheek as we strolled along. Just being with her was enough, it wasn't like we were in a rush. The night air was warm and the city sounds made us feel anonymous and unnoticed, even if men were constantly glancing at her when we walked by. \n\n\"I ... might have a confession to make ...\" she said finally as we walked. I looked down at her and let her continue. She blushed for several seconds before continuing. \n\n\"Remember how I said on our drive into the downtown from my place that I was on the pill to control ovarian cysts and such?\" \n\nI nodded, getting an uneasy feeling about what came next. \n\n\"Well, I might've lied about that,\" she said, tilting her head down even more toward the sidewalk. \"I just ... God, Michael, when you came in me that first night in my shower, I ... I didn't want to do without that again. And I'm a lesbian, I'm not on birth control, and I don't have ovarian cysts, I just know a friend who does, same as your ex did.\" \n\n\"Are you concerned for some reason?\" \n\nShe shook her head. \"No, I just needed to be honest. I've kept it to myself all this week, and actually considered telling you after you'd left. But you don't need to worry, I wouldn't let anything happen anyway, and I have insurance.\" \n\nI put my arm around her and pulled her into my side as we walked. \"I trust you. And I plan to keep cumming in you. I'm pretty addicted to that myself.\" \n\nShe smiled. \n\n\"And thank you for being honest, just out of principle,\" I said. \"Any idea where we're headed?\" \n\nShe blushed and nodded. \"Just follow me...\" \n\n*** \n\n\"This feels vaguely illegal,\" I mentioned as we went up the winding steps inside the tower, with Janie leading me by the hand. \"But I also feel like you somehow had this planned out or arranged.\" \n\nShe smiled. \"I know someone who works for the city and agreed to open it for me under cover of dark. It's got an amazing view over the city.\" \n\nThus we found ourselves in Witch's Hat Water Tower, under cover of darkness. The tower had not functioned for over fifty years, only occasionally hosting social events a few times a year. Apparently she'd called a friend, who agreed to leave it unlocked for us. It's nice to know people in high places. \n\n\"You kept this a good secret, I didn't suspect at all,\" I said as we reached the observation deck and stepped out into the Minneapolis night, warm and with a gentle breeze. The hill the tower was on overlooked a great deal of the city, which glittered below us. \n\nShe smiled as we held hands and looked out over the lights beyond. \"Not the first time I've managed to sneak up here, although never done it for this purpose before. Normally it was just as a teenager to get stoned or to be alone and reflective for a bit, you know?\" \n\n\"I'm happy to contribute to the list,\" I replied, squeezing her hand. \"Guess it was kind of inevitable, hm?\" \n\nShe nodded. \"Right after we'd made love in my shower and were laying in bed, I knew I wanted to bring you here and make love to you here. I called my friend and set it up so they'd come and unlock it for me when I was certain I was ready.\" \n\n\"Seems really personal to you,\" I observed, turning her gently to look up at me. \"And I'll admit, I'm flattered.\" \n\n\"You oughta be,\" she said, smirking and putting a hand on my chest. \"Only ever had one girlfriend before that I'd considered bringing here. But no, I brought you, and it's just about the rightest-feeling thing I can imagine.\" \n\nShe put both her hands on my chest and looked up into my eyes. \"And I can't begin to tell you how much this means to me, Michael. Make love to me as we look out over the city; make me cum so hard I think I'll die. And then hold me. Because tomorrow, you're lost to me ...\" \n\nI pulled her to me and kissed her deeply, lovingly, and with all my heart. She melted into the kiss, almost whimpering as we joined. With the city lights below us, we began slowly removing one another's clothes. I gently slipped Janie's dress off her, leaving only her nylons, panties and heels on. \n\n\"Hmmm, why do I suspect that these nylons'll be shredded before this night is out?\" she purred, smirking at me. \n\nShe then began undressing me, removing my jacket, shirt, and then my trousers and boxers, until I was naked. She was kneeling now, and smiled while taking gentle hold of my member, beginning to stroke it and sighing wistfully. \n\n\"Let's make this count, big guy,\" she said softly to my cock. \"By tomorrow afternoon, I'll be missing you, more than you can imagine.\" \n\nShe began kissing gently while she stroked, swirling her tongue around the engorged head as I hardened in her hand. The sounds of the city were distant, almost to not be heard, while the wind through the nearby trees was our atmosphere. Janie hummed as she placed her lips around my head and formed a seal, slowly beginning to bob back and forth. I gently clasped her head and closed my eyes, just enjoying the sensation of this beautiful woman devoting herself to pleasure. \n\n\"Mmmmm, I'll miss this so much,\" she murmured around my cock, taking time to kiss the head and the shaft. \"I'll miss making love to you so much, Michael. I'll miss you making love to me ...\" \n\nI began slowly and rhythmically pushing my hips back and forth against her mouth, and she relaxed, letting me gently fuck her mouth. Her hands moved to her breasts, massaging them gently or pulling on her sensitive nipples. She shivered and moaned as I slid in and out between her wet lips. \n\nI was hard and throbbing with need and she pulled her mouth back with a wet \"pop,\" smiling up at me. \n\n\"My turn now?\" she asked, batting her eyelashes. I took her hand and stood her up before making her turn around. She giggled as I put my arms around her waist from behind and began kissing down her neck. My hands caressed her soft skin as I worked my way down her back, kissing and nipping, making her shiver. I reached her nylons and pulled on them with my teeth. Janie giggled and bent her knees, presenting her butt to me and wiggling it. \n\nThen she gasped as I took the nylons in my hands and pulled hard, shredding them and leaving her moist thong exposed. My teeth nipped at her ass cheeks, making her moan and breathe heavily. I nudged her to the railing so that she was leaning on it, looking out over the city. I moved her legs wider apart and kept kneeling as I kissed her ass cheeks some more before pulling her thong aside and pressing my tongue against her wet pussy. \n\nJanie moaned loudly, pushing herself back against my exploring tongue and squirming her hips around. I fluttered my tongue inside her as my hands rested on her ass cheeks and my thumbs pulled them wider, giving her a delicious stretch that made her whimper in pleasure. God, she was so wet and yielding before me. My cock was throbbing like crazy, desperate to be buried inside her. \n\n\"Uhhhnnnn, oh God, Michael ...\" she panted, still writhing back against me as I lashed my tongue inside her. \"God, I need you ...\" \n\nI slowly stood, and she widened her stance, bracing herself while looking out over the landscape below us. There were no lights nearby, and the city lights were too far away to illuminate us, so unless some eagle-eyed person spotted her pale body in the tower, we had plenty of anonymity. Provided we didn't get too loud. \n\n\"Gnnn, I want you inside me ...\" she murmured as I stood behind her and nestled close, my pulsing rod hard against her dripping womanhood. \"Please, Michael ...\" \n\nHer head dropped and she clenched her teeth as I pushed the head of my cock through her slick lips and inside her. As I began to push forward, she pushed back against me, taking me deep inside her pussy, and groaning shamelessly as I filled her. My hands clenched on her thighs while she squeezed around me. \n\n\"Yesssssss,\" she said softly, her body shuddering in relief. \"God, I need this. So much...\" \n\nI began pushing back and forth, sliding my cock in and out of her. Janie panted as she leaned on the railing, gyrating her ass against me. My hands slowly travelled up her body until they came to rest on her warm breasts. I gave them a squeeze and she arched her back and groaned in pleasure. \n\n\"This is perfect,\" she said in rapture, squeezing my cock inside her in rhythm with my gentle thrusts. \"Uhhhh, I wanted this for us so much, Michael...\" \n\nShe bit her lip and her whole body squirmed as I pinched her nipples and tugged on them gently. She leaned forward and pushed up on her hands while her legs left the ground and her ankles crossed behind my ass cheeks. I was obliged to move my hands down her body to her hips to support her now, but she sank even farther down onto my cock and moaned loudly. \n\nShe rested her elbows on the railing now, feet still locked behind my back. Past her, I could see the city, its denizens blissfully unaware of us. I fucked her slowly, taking my time in pushing back and forth inside her. Her hips were arched slightly because of how I held her, and her ass was pressed to me. Her thong was now thoroughly soaked, pulled off just to the side as we fucked. \n\n\"I dunno... how long I'm gonna last, Michael...\" she breathed, her body beginning to shine with a warm sweat. \"Can I please turn around to see you and you can fuck me until we cum? I want to be looking into your eyes.\" \n\nI nodded and let her down gently. She trembled as her feet touched the deck, then stood still, trying to control herself. Janie moaned as I pulled out of her, but then turned around readily. She smiled and nodded at the railing behind her before lifting herself on her hands. I assisted her up and braced her securely as she sat on the railing. She parted her legs and I moved between them, my throbbing tool now pressed to her pussy again. \n\nJanie smiled at me expectantly, hooking her legs behind my waist now as I moved my cock over her soaking thong, teasing her. She kept one hand on my shoulder and used the other to reach down and move the wet, black material aside, exposing her. \n\n\"Door's open, just come on in...\" she whispered. \n\nI nodded, and we looked into one another's eyes as I placed the throbbing head of my manhood against her and gently pressed in. Janie sighed and then we kissed deeply as I pushed myself deep into her, my hands cupping her butt. She shivered as I bottomed out in her again. Our tongues tangled as she reveled in the feeling of me filling her. \n\nIt wasn't long, though, before she was moaning into my mouth as she churned against me feverishly. Sitting on the relatively thin rail, but still safely supported by me, she squirmed and ground on my cock with a great need. I, in turn, thrust deep inside her, lost in the sensation of her tight, velvety pussy rippling around me. We pushed in time, sinking me in as far as possible with every rocking motion of our bodies. \n\nJanie broke the kiss and now looked into my eyes intently, her arms around my neck, keeping me close. Her breasts were squashed to my chest and I could feel her heart thumping. I could see in her eyes how important this moment was to her, how much it meant. She'd brought me here, to this place she considered almost sacred, and we were making love. This was, very much for her, the culmination of our entire week together. \n\nAnd I could see in her blue eyes how desperately in love she was with me. \n\nThere was indeed a deep sense of urgency to this lovemaking, as well as the passion for one another we'd already discovered and indulged so readily. I indulged her again, able to deny my beautiful Janie nothing. I held her tight and began thumping against her, our hips meeting as she grunted and whimpered with each thrust. \n\nJanie was panting now, grinding her hips against me, her nails in my traps. Her pussy was fluttering around me now, growing wetter by the moment. I knew she didn't want me to hold back, so I thrust into her harder and harder, my eyes never leaving hers. \n\n\"Love me, Michael?\" she asked through a gasp. \n\n\"I love you so much!\" I huffed, feeling my orgasm building deep within. Her fingers flexed on my skin in response to my craved words. \n\n\"I wish we could marry,\" she almost sobbed. \"I want to be married to you!\" \n\n\"I wish we could too!\" was my increasingly difficult reply, because my throat was tightening up. My whole body was starting to tingle, and I could feel her tightening her legs around me as her climax approached as well. \n\n\"I'd be your girl!\" she almost pleaded, her eyes glassy with pleasure. \"I'd be your wife! I'd have your kids!\" \n\n\"You'd be an amazing mom!\" I moaned, almost leaning forward on my toes, desperate to be as deep in her as I could possibly be. \"God, Janie, I love you!\" \n\n\"Michael, I love you!\" she gasped, her body starting to shake and her eyes going wide. \"Cum in me! Please!\" \n\nMy eyes were still locked with hers as we both strained, faces inches apart. A wet wave of pleasure blossomed through me and my knees almost gave out as I began to cum. I pumped my pearly ropes deep inside her greedily clenching pussy, while Janie bit her lip to keep from crying out so loud that the whole neighbourhood could hear us. I pulled her down off the railing and just held her by her butt cheeks while thrusting up inside her. \n\nHer eyes never left mine as we came. \n\nAs our orgasm finally ebbed, I slowly sank to my knees, resting her on my thighs and letting her hug me close. I could feel her trembling, and while I knew she was still feeling the effects of the climax, I could also feel wet tears on my skin as she pressed her face into my shoulder. She wasn't out-and-out crying, but those were definitely tears. I wrapped my arms around her and held her against me, letting her emotions play out, no matter how long it would take. \n\nBecause I understood fully what she was going through. Tomorrow held a dread for us both, because it meant I was leaving, and we had fallen so madly, desperately in love. I hated thinking about it, my mind almost recoiling from the mere touch of the vile notion. \n\nI rocked Janie gently in my lap, still deep inside her, and let her weep quietly. All I could hope was that this moment, this experience, was everything she'd hoped it would be. I'd never felt closer to her, or more in love with her. I found myself extremely conflicted, but I very much wanted to marry her right at that moment. And I knew that's what she wanted as well. \n\nOur hearts pounded together as a sadness mixed with our euphoria, bonding us even closer to one another. \n\nHow tight did I have to hold her so that this moment would never end, and I would never have to leave? \n\n*** \n\nAuthor's Notes: I know some people are going to be peeved, but there's only one chapter left. And yes, this saddens me as well, but it will also make room for another project I'm working on and excited about. \n\nTalk about a frenetic and depraved day. A guy needs to keep his reserves up, especially when his two partners have a combined age of less than his own. Ouch! \n\nI know my author's notes can go on sometimes, often to great amusement effect, but it's 3:45 in the morning here, and I'm really zonked, boys and girls. So if it's all the same to you, I'll cut this short and go make love to Mistress Sleep now. I'm sure Janie will forgive me. ",
        "Keep your stick on the ice! \n\nManagement"
    ],
    "authorname": "BiscuitHammer",
    "tags": [
        "romance",
        "troilism",
        "lesbian",
        "public sex",
        "alcohol",
        "lesbian sex",
        "romantic"
    ],
    "category": "Erotic Couplings",
    "url": "https://www.literotica.com/s/twin-cities-tryst-ch-06"
}
{
    "title": "Old Neighbours Become New Friends",
    "pages": [
        "Welcome, dear reader, to my latest story.\n\nThis is a romance -- or rather it is two romances because I wanted to try and tell a story from two separate characters' individual points of view.\n\nThis means three things. Firstly, there is, in places, a degree of repetition as each character tells their own versions of events. Secondly, that the story is rather long; I did consider dividing it into parts but there were no points at which the story could be split without losing the flow. Lastly, as with many of my other stories, the story builds slowly so if you're looking for a quick sex romp story then this isn't for you!\n\nThanks, as ever, to my wonderful editor, Winterreisser, for his excellent editing, comments and encouragement and to Gay Kat for being a lovely friend and chief guinea pig for my writing.\n\nFeedback is, of course, very welcome whether as scores or (even more useful to an author) by comments.\n\nI hope you enjoy the story.\n\n<center>- - - - - - - - - - - - - - - - - - - - - - - - -</center>\n\nDecember 2019\n\nI have edited this story - not only for typos and errors (yes, I'm embarrassed at the number there were) but also to improve the story. Hopefully, it is a little less obviously repetative as well as being more readable.\n\n==============================================\n\nChapter 1: My Neighbour the stranger\n\nMattie\n\nI push open the back door of my small block of flats and walk across the small, paved area that the estate agents always insist on referring to as a 'patio', though 'small, bleak slab of concrete' would be more accurate since there isn't really room for chairs, much less a table or barbecue. I clamber down, putting my legs under the lower balustrade rail to dangle down towards the garden some six feet below and hook my arms over the middle rail.\n\nIt's a surprisingly warm evening for the end of April; perhaps the cold, wet spring that felt more like winter is finally ending and summer is here at last. I look across the rectangle of hedge-bounded lawn that is the flats' small communal garden and out across South London towards the North Downs in the hazy distance. That always seems a bit mad, looking south to the North Downs, but that's the way it is.\n\nI fumble in my back pocket and pull out the battered and rather squashed cigarette packet trying to ignore words 'Smoking Kills' emblazoned across the front. Yeah, right; and being dumped puts you at risk of terminal depression. I tip out the disposable lighter and shake out a single fag, light it and take a deep draw. Ten weeks, five days, two hours and... forty-six minutes since Lisa walked out of my life and I still don't feel I can smoke in the flat because she always hated it and always seemed to know, no matter how many candles I lit or windows I opened. Even cooking curry didn't work; that woman's nose was unbelievable!\n\nShit, I'm crying -- again! The cigarette trembles between my lips, dumping ash onto my white tee shirt that I hastily brush off. God, I miss Lisa and, even after the way she left -- walking out with the news that she'd been seeing someone else for the previous two months -- I'd still have her back in a heartbeat. Of course I would: we'd been together for four-and-a-half years, since her second year at university, and when I was just an apprentice. She'd been my first proper girlfriend and the girl I'd come out to my parents to be with.\n\nAnd now she is gone.\n\nI stub out the cigarette, flicking the butt into the bush below to join the others, before immediately lighting up another. It is going to be a dull, depressing Wednesday night, I can tell. Still, I never get tired of the view, one that I also have from the flat but on such a pleasant evening being outdoors is good.\n\nThe sound of the door opening behind me makes me jump but I don't turn round; I really don't feel very sociable. I'm surprised therefore when, after briefly standing next to me, someone climbs down to sit beside me. \"Hi,\" the woman says. I glance to the right and see that it's a neighbour; she lives on the first floor, I think, and we have a nodding 'hello' relationship. There are only eight flats in the whole block, just two per floor, and I don't even really know our -- now just my -- neighbours on the same floor, much less anyone living two floors down. However, while I don't know her, that doesn't mean I've not noticed her: with her shapely hips and waist, her long, dark hair, attractive face and latte-coloured skin, of course I've noticed her.\n\n\"So, is this the smokers' corner?\" she asks, trying to engage my attention. My brief glance takes in again the pale caramel of her complexion and the dark, lustrous length of her hair, but also this time, the dark eyes, above high cheekbones in a heart-shaped face.\n\n\"Um, yes, I guess,\" I reply and look away. It occurs to me that I sounded like one of my sullen, teenage nieces when asked if they're enjoying a family gathering. The woman, however, doesn't seem to notice my tone and proceeds to take out a pink tube that, I realize, is of those e-cigarette things and begins fiddling with it. \"Look, I'm sorry if I was a bit rude just then,\" I apologise, \"I'm just a bit out of sorts, I guess.\"\n\n\"No, it's fine, really,\" she replies as she places the tube in her mouth and starts puffing. \"You live upstairs, don't you?\" she asks and I nod. Looking more carefully she doesn't seem much happier than me. It appears that misery attracts company. I vaguely recall that she lives with a guy; I've seen them together from time to time, coming and going. I wonder why she's upset and whether I really want to know. In the end, my curiosity gets the better of me.\n\n\"Er, why do you need a smokers' corner to use one of those?\" I ask. \"I mean, it's not like they give off smoke like real fags do.\" I hold up my own cigarette as exhibit A.\n\n\"Oh, I don't need to come out for this, particularly not now. It's just an excuse to get outside on a nice day, that's all,\" she pulls her mouth into what might have been intended as a smile but is more of a grimace. \"So are you banished out here when you want to smoke?\"\n\n\"No, well, I used to be, before...\" Oh god, no! I'm determined that I will not start blubbing in front of this almost-stranger. \"...before my partner left,\" I finish quietly.\n\n\"Oh god, you too,\" she says quietly and her large eyes glisten. \"I'm sorry.\" Is she saying that her bloke has walked out on her? I try to recall and I don't remember their car being in the car park for the past few days.\n\n\"Sorry, are you saying...\" I begin, not sure how to ask what she means but she nods.\n\n\"My completely-ex-boyfriend Gavin's told all our friends that he finished with me because of 'irreconcilable differences', rather than the truth, the lying, shagging bastard.\" I'm a little startled by how open this woman is being to me.\n\n\"And the truth was?\" I ask without thinking and then worry that I shouldn't have. Pain twists her features, but before I can say anything else she replies.\n\n\"The truth was that I caught him buried cock-deep in a woman -- ha, practically a girl! -- in our bed when I came home early last Monday.\"\n\n\"Oh shit! That sounds like a pretty irreconcilable difference,\" I tell her and she gives a tearful little chuckle.\n\n\"Very true,\" she sighs. \"So anyway, it's 'Hello, Dumpsville, Arizona, population: me...' and you too by the sounds of it.\" She gives a slightly strained smile and I give a slight smile back. \"Oh, I'm Raveena, by the way, Raveena Roy.\"\n\n\"Mattie, er, Mattie McConnell. Nice to finally talk to you Raveena.\" \n\n\"And to you, Mattie. You've now spoken to me more than my next-door neighbours in number four ever have: they always both blank me as they walk past,\" she grumbles.\n\nI finish the second cigarette \"I don't really know anyone in the block. I guess we all ought to know each other really, given how close together we all live.\"\n\n\"Maybe, but then this is London and we're all too busy with our own lives I guess... until something goes wrong.\" There is that edge of despair in her voice again. If I were a better, stronger person, I would reach out and comfort her and know the right thing to say -- rather than the only thing that occurs to me: a very unhelpful comment of, 'That's what you get for being with a guy.' However, I can't honestly think that what Gavin did to her was too much worse than what Lisa did to me, so I can't claim any moral superiority for lesbianism right now.\n\nI climb to my feet. \"Sorry but I've got to go, Raveena,\" I tell her. \"I hope you'll be okay.\"\n\n\"Thanks, Mattie; you too.\" She turns to look out into the distance as I head indoors and up to my top-floor flat.\n\n<center>- - - - - - - - o o O o o - - - - - - - -</center>\n\nRaveena's Diary\n\nWednesday 16 April\n\nI hate coming home to an empty flat. This was only the second evening but somehow it seemed worse than last night; perhaps it felt more permanent -- like this is how it'll be from now on. Maybe I'll get used to it in time, even come to enjoy the solitude: it's only my second day on my own, after all.\n\nTwo days; can that really be all? Just two days since I came home early and caught him. I spoke to Katie this morning and she informed me that he's been going around telling people that we'd split up, that he'd had to leave due to 'irreconcilable differences'. When I told her what really happened she was shocked, though not shocked enough to not ask if I was going to give him a second chance. \"Not a fucking chance!\" was my reply. Maybe I should have sent her the photos I took; then she wouldn't have asked.\n\nMy phone beeped just after I got in and it was a text. \"Oh crap!\" was my heartfelt response because I'm going to have to put up with him coming round on Saturday to collect his stuff. I've been so tempted to dunk his clothes in tomato soup, to run his leather shoes and his games console through the washing machine, to clean his CDs and DVDs with a Brillo Pad... but I have decided to be the bigger person and retain my dignity as a grown-up. It's worked so far.\n\nI've realized that I can minimize the time he spends here when he comes so I took the roll of bin liners and began filling them. The cases of the CDs split the bin liners, so I used a couple of pillowcases and a duvet cover instead. It took two hours, but in the end, I had packed up all his stuff -- all that I think is his anyway. I'm sure there'll be arguments over some of the furniture, but he can't need much, surely.\n\nWhen I looked out the window it was into beautiful, evening sunshine. The view across the houses and offices to the wooded hills in the far distance, where I grew up, was particularly lovely. It certainly made me want to take a break and get some fresh air. \n\nI made my way out to the shared garden, somewhere I've only visited once or twice before. As I pushed open the door and stepped out, I saw a woman, from one of the flats upstairs, sat with her legs dangling over the wall that drops down to the garden. She was and leaning on the central railing as she smoked. I guessed she was a smoking pariah, banished outside for her habit. \n\nI walked over to the railing, surprised again by how far below the grass of the garden lies. Of course, we're on the side of quite a steep hill, but it's still surprising. I leant on the railing and took a few gentle puffs from my e-cig. I know: the e-cig thing was meant to be a step on the way to giving up smoking, but that hasn't happened and what with all this crap with Gavin, I suppose I should at least congratulate myself on not going back to smoking real cigarettes.\n\nI peeked down at the woman, who seemed to be ignoring me. There was something about her body language and the half glimpse of her face that suggested she was in a similarly low mood to me. In fact, in the odd sightings I've had of her recently, she has always seemed very glum. A brief internal struggle followed, as my desire to be on my own and ignore her came up against my habitual urge to fix things for people. Thirty seconds later, when I found myself climbing down to sit beside her, I realized that perhaps there never really was much of a struggle.\n\nI glanced at her fleetingly; she had short brown hair, which gleamed with an auburn tone where the low evening sunlight caught it. Her skin was a very pale rose, with a dusting of light freckles across the bridge of her thin nose and the tops of her cheeks, and I caught a flash of denim-blue eyes as she looked down. More than anything, what I noticed was the air of deep sadness that surrounded her and that tugged at me, tangling empathically with my own sadness. I can't help it: I hate seeing anyone sad and upset and I found myself wanting to comfort her. I wondered what her life story was and if some bloke had been a bastard to her too. I've tried to recall if I'd seen her with anyone and all I can think of is another woman, a friend bit older than her. \n\n\"Hi,\" I said to her as brightly as possible, trying to exude friendliness. \"So, is this the smokers' corner?\" I asked.\n\n\"Um, yes, I guess so,\" she replied uncertainly and a little grumpily before looking away. I noticed a slim silver ring in the side of her nose, the double piercing in her left ear and, as her head tipped forward, below the collar of her white, slightly grubby tee-shirt I saw the top of a tattoo: an intricate Irish knot pattern at the top of her back. It felt like I was intruding and I didn't know what to say, so I opened the e-cig to check the fluid level. She turned back to face me and apologised: \"Look, I'm sorry if I was rude just now. I'm just a bit out of sorts, I guess,\" she said. \n\nI assured her that it was all fine as I continued to smoke. \n\n\"Why do you need a smokers' corner to use one of those?\" she asked. \"It's not like they give off smoke like real cigarettes do.\" She waved her cigarette, wafting the smoke around to make her point.\n\n\"No, I don't need to come out for this,\" I told her, pointing out that it was simply an excuse to come outside on a nice day, that was all. I ventured a little smile of friendship. \"So, are you banished out here whenever you want to smoke?\" I asked.\n\n\"No, it's just that I used to be, before...\" she hesitated and I saw real pain and sadness in her eyes. \"...before my partner left me,\" she concluded quietly. \n\n\"Oh, god, not you too,\" I exclaimed without thinking and then quickly apologised. However, it made me wonder if the woman I'd seen her with was more than simply a \"friend\"? Was -- is - this woman -- Mattie -- a lesbian? The short hair, the tattoo and piercings, the boyish clothes had me wondering but then I began to worry that I was stereotyping. \n\n\"Sorry, are you telling me...\" she asked uncertainly, picking up on what I'd said..\n\nI told her about Gavin and what he'd been saying about 'irreconcilable differences. I think I called him a 'lying, shagging bastard'. When she asked me what had really happened, somehow it felt right to tell her. I loved her reply:\n\n\"Shit, that sounds like a pretty irreconcilable difference to me!\"\n\nIt was so nice to hear someone think that I was right to end it with him instead of being asked if I was going to 'take him back' or 'try to patch things up'.\n\n\"Anyway, it's 'Hello, Dumpsville, Arizona, population: me,'\" I told her, trying for some humour, \"and you too, apparently.\" I added, in an attempt at sisterly empathy. She gave me a smile, slightly forced perhaps, but still a smile, so I introduced myself.\n\nShe told me her name -- Mattie McConnell and she seemed a bit more relaxed. She even said it was nice to talk to me.\n\nI didn't want her to slip back into her gloomy state so I tried to carry on the conversation. I told her that she'd spoken to me more than anyone else in the block had in the past eighteen months. I mentioned that even my neighbours in Number Four ignore me. \"They're not a very friendly lot here,\" I told her and then wished I hadn't because some could be good friends of hers. \n\nHowever, Mattie admitted that she didn't really know anyone in this block of flats either, which was surprising given how close together we live.\n\nI had to agree but, as I pointed out, this is London where people only seem to take an interest when things go wrong. That thought unexpectedly choked me and filled me with sadness: we're only talking because things have gone wrong for each of us. Suddenly she shuffled back from the edge and climbed to her feet.\n\nShe apologised, saying that she had to go but I hoped I'd be okay. I wished her the same back and after she went inside. I sat out a little longer, watching the sky darken from dark cobalt to navy to deep indigo and towards black -- or as close to-black as city skies ever get. By then I was stiff and cold so I headed back indoors.\n\nIt's getting late but I've managed to keep my renewed resolve to keep a diary -- for the first day at least!\n\n<center>- - - - - - - - o o O o o - - - - - - - -</center>\n\nChapter 2: A new friend in need\n\nMattie\n\nSince it's a Saturday, and one on which I have no work for a change, I'm not impressed to be woken up by the shouting I hear through the open bedroom window that overlooks the car park. I turn over and am about to pull the covers over my head to muffle the sound when I register who is shouting: it is the woman I talked to during the week, Raveena. \"You selfish shit, you can't just take whatever you like!\" she yells. \n\n\"I'll fucking well take what I want of my stuff,\" a man's voice shouts back. I'm intrigued and fully awake now so I climb out of bed and walk naked over to the window to see what's going on.\n\nFrom the third floor, I'm looking down at a steep angle to the small car park. A large white-roofed van has been reversed in, selfishly blocking the exit. The back door of the van is open and there are two men pushing a large piece of furniture, a bookcase by the look of it, into the van. From this angle, I don't recognise either man, but one turns as Raveena calls out, \"We got that for my books; why do you even need it? You never read!\" I lean forward, but from the window, I can't see her.\n\nOne of the men -- her ex, Gavin, presumably -- turns to reply and I think I recognise him. \"We didn't buy, I did. Anyway, my CDs and DVDs need somewhere and Sadie's got books and stuff.\" He glances back and I notice the head of a very attractive woman leaning out of the van's passenger window. \n\n\"That bitch can stay away! She's not coming in, ever.\" Raveena's sharp, bitter exclamation confirms my guess that this Sadie woman is the one Raveena caught Gavin in bed with. The woman says something I can't hear but Gavin laughs. As I watch they finish loading the bookcase and head back towards the flats and there are more comments and laughter. I feel a sudden sad empathy for Raveena. When Lisa left and took her stuff, it was horrible -- there are still gaps where her things used to be -- but at least she didn't bring her girlfriend round to laugh at me. On a sudden impulse, I decide that I'm going to go and support Raveena.\n\nI think for a moment before opening the middle drawer of the chest of drawers and pulling out a running vest, underwear and shorts that I wear when I occasionally suffer from a bout of exercise-guilt. I dress quickly; the lack of bra isn't an issue when even your lover describes your tits as fried eggs, although she had been cheating on me when she said that. Still, what they may lack in size, they more than make up for in their sensitivity.\n\nHastily stuffing my feet into my training shoes, I head out, grabbing my keys as I go. Now I can claim that I'm just going for a run and bumping into Raveena is an accident.",
        "As I near the first floor I hear voices: Raveena again objecting. I'm halfway down the final flight of stairs and I can see the door of Number Three is open. The woman, Sadie, is stood by the door holding a pair of dining chairs stacked seat-to-seat, and struggling a little with the weight, while Gavin and his mate manhandle a small dining table out through the door. I stay out of sight in the shadows as the men pass. \n\nThey are held up as they try to work out how best to carry the table down the stairs, and I take the opportunity to admire Sadie's figure: she is gorgeous, though Raveena is by no means completely outshone by her. She is younger even than me, and I can understand why Raveena loathes her for it. It occurs to me that if she is an old girlfriend of Gavin's, then their previous relationship can barely have been legal! However, no matter how attractive she is, she is also feeble as, after a short while, she has to put the chairs down to have a rest. \n\nRaveena follows them across the hallway, \"Gavin, you heartless bastard; this is so unfair!\" she complains, her voice breaking. They ignore her and begin moving down the stairs with Sadie the Feeble laboriously following. \n\n\"Raveena? Are you okay?\" I ask, coming unnoticed down the final steps and approaching her. \"What's happening?\" To my surprise she steps forward and throws her arms around me, burying her head in my shoulder and sobbing. The feeling of her is startling, awkward and rather pleasant, all at the same time, as I tentatively hug her back and make sympathetic noises. I'd come down just to lend some moral support; the fact that our rather unhappy conversation yesterday makes me her best source of comfort is rather sad. \"Raveena?\"\n\n\"It's so horrible,\" she whispers, her head still pressed against me. \"I'm sure he's just taking things to punish me; I mean, I can understand him wanting the telly but why take the bookcase or the dining table and chairs? I bet he doesn't need them.\"\n\n\"Has he said he's taking anything else?\" I ask, keeping my voice low and hugging her a little more tightly for a moment. She releases her embrace and moves back a little to look at me.\n\n\"He said he wants the bed.\" She hesitates and adds, \"In some ways, he'd be welcome to it as I can't help remembering the sight of him fucking that bimbo every time I look at it.\" I nod in understanding: my own bed has more memories of Lisa than are good for me.\n\n\"Can you afford to replace the bed?\" I ask.\n\n\"I can't really afford to replace any of this stuff,\" she tells me sadly.\n\n\"I take it that he's not offered to pay anything?\" I ask and she shakes her head. \"You haven't anything of his you could ransom, have you?\" Another head shake. \"That just leaves blackmail then. Do you know any of his dirty little secrets?\" I'm more than half-joking at this point, but to my surprise, a hard gleam appears in her eyes.\n\n\"Ha, maybe I should threaten him with putting the photos I have on Facebook.\" I look at her questioningly and she pulls out her iPhone and taps it. \"I, um, took these when I saw what they were doing; I didn't want to be able to pretend to myself later that I hadn't seen what I did.\" \n\nShe shows me the phone and there are three photos: all show Gavin from behind and mounted on top of Sadie, who has her legs wrapped around his waist. In the middle photo her face, open-mouthed and eyes closed, is clearly visible.\n\n\"Shit, it looks like he's screwing her in the arse!\" I exclaim. Raveena looks at the photo.\n\n\"He wasn't but you're right, it does look like it,\" she agrees but shakes her head. \"However, there's no point in my threatening him with these; he'll just laugh at me. Knowing him he'll think the photos make him look like some kind of super stud\" \n\nI think for a minute. She's probably right; the photo won't upset him too much, even if you could see his face. It will almost certainly matter to Sadie the bimbo though... \n\nNow, I may not be into men in any way, but I work with them and, while they don't seem to go in for deep meaningful conversations when socialising, it's surprising what men will discuss when working alongside one another. One thing I've learned was how much guys will do to be with a sexy woman and Sadie, although apparently having the brains of a goose and the personality of a rat, is attractive, very sexy and apparently very enthusiastic in bed. Gavin isn't going to let that go easily.\n\n\"Do you want me to help? I think I know a way to get him to cough some money.\"\n\n\"Fuck, it's that dyke bitch from upstairs.\" Gavin's voice startles both me and Raveena.\n\n\"Ugh, a dirty lezzer,\" the woman's voice chimes in, \"do you think she ever gets mistaken for a man?\" she gives a simpering giggle. Oh, thank you, Sadie; I might have had a conscience about doing this until you said that.\n\n\"Probably more often than your pathetic boyfriend has,\" I reply as I turn and Gavin gives me a filthy look.\n\n\"Come on Dave, let's get the bed,\" Gavin says and marches past Raveena with Dave in tow. Sadie moves to follow but I stop her with a gentle hand on her arm.\n\n\"Just a moment, er, Sadie. You look like a woman who uses Facebook, yes?\" I ask innocently.\n\n\"What? Yes, no wait, I mean what's it got to do with you?\" she looks at me suspiciously.\n\n\"Oh, I just wanted some advice on what you think would make a good tag for this picture. I can't decide between 'Cheating bastard boyfriend Gavin fucks bimbo in the arse' or 'Slutty bitch loves Gavin giving it to her up the shit'. What do you think? Tagged and shared with everyone, of course.\" I show her the photo, and the look of terrified horror on her face is perfection.\n\n\"You wouldn't dare,\" she stammers.\n\n\"What, a dirty lezzer like me wouldn't dare humiliate a bitchy straight bimbo like you? Want to bet your reputation on it?\" I ask, fixing her with my hardest, meanest stare. She looks towards Raveena in mute appeal. \"You reckon you'll get any help there?\" I laugh and she looks miserable. \"Of course, if you can come up with -- what do you think Raveena? -- say three hundred pounds to compensate for this outrageous taking of furniture, then I think Raveena might not feel the need to share the photo.\" Raveena nods. \"Off you go then; you've got ten minutes,\" I tell her.\n\nSadie gives me a poisonous look before turning towards the flat. \"Oh, just one thing,\" I add in warning, \"Tell the bastard ex that if he or one of his mates ever come and upset Raveena, then I promise the photos will be posted not only on Facebook but on many other sites on the internet -- with your names in full, of course -- so that the photo will be the first thing anyone Googling your names will find.\" She nods sullenly and walks away.\n\n\"Mattie, you have a very mean streak!\" Raveena says to me, smiling as she takes the phone and slips it into her pocket, \"and I mean that in frank admiration because I'm too much of a coward! I wonder what the bastard will do?\"\n\n\"Cough up the money, I should think. Would you settle for two hundred and fifty quid if he haggles?\"\n\n\"Mattie, it'll be bloody amazing to get anything!\"\n\nIn the end, with Sadie flapping backwards and forwards trying to negotiate, we settle on two hundred and eighty-sixty pounds -- all the money the three of them could scrape together on such short notice -- and I let the bastard think he'd done well by insisting on taking the bed. \n\nFinally, we watch them drive off. \"Mattie, thanks ever so much for helping me; you were a complete star.\"\n\n\"It's no problem, Raveena. He was a chauvinistic, homophobic bastard. She wasn't much better; they deserve each other.\"\n\n\"Um, Mattie,\" she begins hesitantly and I think I can guess what's coming, \"er, are you gay?\" she finishes in a rush and it makes me smile. \"I mean, when you threatened that bitch you called yourself a, um, 'lezzer'.\"\n\n\"Yes, Raveena, I'm gay, though I wouldn't usually use the term 'dirty lezzer' to describe myself.\" I look at her and decided to come clean. \"I said my partner had left me when we met the other day... her name was Lisa. Is that a problem?\"\n\n\"I've gay men as friends and colleagues but you're my first gay woman friend.\"\n\n\"I'll bet I'm not but... you called us friends?\" I say, touched and surprised.\n\n\"Sure. Only a friend would have helped me in the way you did.\"\n\n\"Thank you, Raveena. Can I ask what are you're going to do for a bed now the bastard's nicked yours?\"\n\n\"Well, I have got an inflatable guest bed somewhere that I can use, but I'll need to buy a proper one from somewhere.\"\n\n\"There's always Ikea,\" I suggest.\n\n\"True, apart from two things,\" she smiles. \"First, I haven't a car and second I'm allergic to flat packs!\" and she makes me laugh.\n\n\"Well, I can help you with both of those, if you like, since we're friends.\"\n\n\"Oh no, I couldn't ask you to do that,\" she protests. \"\n\n\"Why not? I quite like Ikea and you could always stand me breakfast if you like.\"\n\n\"That's very kind, Mattie, thank you.\"\n\n<center>- - - - - - - - o o O o o - - - - - - - -</center>\n\nRaveena's Diary\n\nSaturday 19 April\n\nTalk about the morning from hell! I cannot believe just how fucking unpleasant Gavin decided to be -- it was almost as if he had decided to take items of furniture based on how much they'd upset me: the bookcase (my books now in wobbly, untidy stacks along the wall), the table where I liked to sit for breakfast and in the evening with my little laptop when he hogged the telly to watch some crappy sporting fixture or tedious documentary; which was most evenings, come to think of it. He got it wrong with the bed though; I mean, while I couldn't afford to throw it out, I wasn't too upset to see it go, given the memories associated with it.\n\nI guess I didn't exactly handle the situation well, shouting at him and calling him names, but I was so upset. And then Mattie appeared and was just amazing! I can't believe how she threatened Sadie the bitch with the photo I'd taken. It was like she just knew instinctively that Sadie was the one to go for to make the bastard at least pay me something for the furniture. Perhaps she was some Mafiosi extortionist in a previous life because she played it perfectly. It was a little scary actually!\n\nAfter Mattie finished dealing with the bastard and his bitch, she was then so sweet offering to take me to Ikea. I tried to refuse, though perhaps not as strenuously as I might. When she said that if I could pay for breakfast that would be good I felt happier accepting her offer.\n\nBreakfast was so cheap it was almost embarrassing. Still, Mattie seemed genuinely happy going around the store, so I didn't feel too bad. She was good company too, making me laugh with her pronunciation of the Swedish names of the products, and she certainly knew her way around the meandering store, and even where there were shortcuts.\n\nThe bed section was... interesting. I wanted to test the mattresses for comfort and to try the different bed frames, but when I lay on the first mattress I was surprised when Mattie lay down next to me. She wasn't particularly close to me and she just wriggled and complained the mattress was too hard (it certainly was) but it felt, well, strange. What I'm not sure about is whether I'd have felt strange with any female friend lying on the same bed or whether it's knowing that Mattie is gay that made me feel a bit uncomfortable.\n\nI could have spent a small fortune, even just replacing the bookcase, table and chairs and the bed. In fact, the bed alone cost more than what the bastard paid me, but I have some savings that I dipped into. The items are all a little more basic than the ones he took, but at least they are all 100% MINE!\n\nWe brought the table and two chairs home in Mattie's car; the other items are too big, so they're being delivered on Wednesday afternoon when I'm home. Mattie helped me bring the things in and then helped with the assembly. Actually, she did almost nothing towards actually the assembly -- apart from helping to support some parts while I screwed them together. \n\nHer real contribution was to tell me that I was an intelligent, capable woman more than capable of putting some flat-pack furniture together and to \"...stop being such a complete Sadie-bitch-girlie, read the instructions and just put the fucking bits together!\" The 'Sadie bitch girlie' comment really stung but it worked and I assembled the table and both chairs: go me! Okay, she did stop me from making a couple of silly mistakes, such as putting one side of a chair on upside down. She also suggested I check and tighten up some of the screws so there were no wobbles. I asked her to double-check them afterwards and she said they were all fine.\n\nShe finally left mid-afternoon and I decided to write this before I pop out for some shopping.\n\nI suppose I should think about how I feel about Mattie, my new friend. I really like her; she's kind and caring, clever, speaks her mind and has the courage to act. We discovered that we both like the same young adult fiction books; she also likes science fiction, which I don't really like. She smokes and drinks and told me she'll watch at least the first twenty minutes of any film, so she's seen lots of films I'd never even consider watching. Of course, she's also seen just the first twenty minutes of dozens and dozens of others. And of course, she's a lesbian.\n\nI loved how safe she made me feel today, safe and cared for. When we hugged, I felt her body, firm and strong, and that hug kept me together. When she was on the bed next to me in Ikea it felt strange as I looked across at her: her short, auburn-tinged hair; her pale, slim face unadorned by makeup; her skinny, rather boyish figure clad in jeans and a dark grey shirt with a logo on it. And yet she is very pretty. No, pretty isn't the right word but I can scarcely use the word attractive about a gay woman can I?\n\nI was also more touched than I let on by the fact that she told me I was capable and could do things for myself. Gavin always told me how useless I was, particularly when it came to anything practical. I stupidly believed him, always doubting myself when it came to attempting new things and depending on him instead. But he was wrong and my friend Mattie is right: I can do things myself and I love that she showed me that. \n\nI guess I'm afraid of the fact that I like a gay woman, nervous of what that makes me. Stop it! I'm being ridiculous: I can like her, enjoy being with her as I might any other female friend without that making me a lesbian. She's a good looking woman, I can recognise that and it's not as if I'm going to go to bed with her -- apart from in Ikea obviously!\n\n<center>- - - - - - - - o o O o o - - - - - - - -</center>\n\nChapter 3: Don't call me butch\n\nMattie\n\nI enjoyed the trip to Ikea with Raveena. I do like the place and the weird names they give things: Bjursta, Gul\u00f6rt, Framst\u00e5... How the hell do you say that A-with-a-circle anyway? Raveena laughed when I read them out in my corny Swedish accent, and she started doing the same. I've missed having someone to share things like that with. \n\nThere was one brief moment of awkwardness when we were in the bed department. I guess that was my fault. Raveena lay down on one of the mattresses, testing it for firmness, and I lay down beside her. The mattress was far too hard for my liking and, as I wriggled trying to get comfortable, I told her so. When looked at her, I found she was staring at me with the strangest look on her face: her eyes fixed with an intense fascination and yet she bit her lip uncertainly. I returned her stare and thought about her and my feelings towards her.\n\nI remembered how she had made the effort to talk to me during the week, shared her pain with me; she deliberately hugged me and, damn it, was uncomfortably attractive with her large, dark eyes, caramel skin and a deliciously feminine figure. We'd been chatting as we walked around but she hadn't tried to pry about what had happened with me and Lisa. This impressed me because it showed a level of sensitivity and kindness that I've not often encountered; rejection for being gay is more common -- sometimes direct but more often a subtle distancing and wariness. Other times, there are questions about how I know I'm gay or what lesbians do together. Raveena's sensitivity, with her humour and openness, makes her more than just physically attractive. \n\nSo what was the strange look she gave me? Was she wondering about me, about what she felt for me? No, whatever either of us thinks or feels, I can't go there. Anyway, she's completely straight and has just broken up with her prick of a boyfriend. \n\nThen I realized. It was probably my lying next to her that was the problem: a gay girl on the same bed was a bit disconcerting for her and so, not wanting to make her more uncomfortable, I stood up and went and tried another mattress. Raveena and I can be friends and I can admire her beauty and the loveliness of her personality without wanting to seduce her.\n\nI know us tomboyish lesbians (I hate the term 'butch') have a bit of a reputation for wanting to seduce any girlie that shows even the slightest sign of bi-curiosity but that has never been me.\n\nThe most hurtful thing Lisa ever said to me was that my appearance was a lie: that I dressed 'like a butch dom' (ugh, that word again) but behaved 'like some near-submissive femme'. It was so unfair. I dress the way I'm comfortable; it expresses my boyish nature and outlook. Neither am I 'near-submissive' though I also hate the idea of dominating a woman.\n\nI love the flirting and the excitement, the playful seduction and adventure of a fledgeling relationship, but I want it to end with love and intimacy and affection, not just a one-night tumble in bed and the chance to boast of seducing a straight girl. I want more than just a brief fling. And why not? Plenty of people, male and female, want the same. Anyway, even if Raveena was a raving dyke, I'm not in the place for a new relationship; the pain of losing Lisa is still too raw, despite her hurtful comments.\n\nAfter helping Raveena assemble the table and chairs -- or more accurately calling her a 'Sadie-bitch girlie' and shaming her into doing it herself -- I've come home to spend the rest of the afternoon getting sorted with washing, tidying and cleaning the flat, Lisa's other lasting impact on my habits, alongside my treks down to the garden when I smoke.\n\nKayleigh and Emma call round just before eight o'clock to first ask, then coerce and finally bully me into coming out. I finally give in but only on condition there will be no attempts at matchmaking and trying to pair me up with any female who takes an interest in me. \"I really mean it,\" I warn Emma when I catch the mischievous look she gives Kay.\n\n\"Ha, busted Em!\" Kayleigh laughs before holding her hand up. \"Okay, Mattie, we solemnly swear -- no matchmaking at the club... but, please, Mattie, can we have you at least just looking at attractive women?\" I suppose that a few lustful glances would be an improvement on my going round with a face as miserable as sin.\n\n\"I guess I can try,\" I concede.\n\nAs we head out into the surprisingly warm evening a voice calls \"Hi, Mattie!\" I look up and Raveena is just arriving carrying a couple of grocery bags, evidently back from a shopping trip. I see her look me over, taking in the dark blue men's sports jacket, collared white shirt and loosely tied tie and smart jeans. I realize that if I hadn't confessed my sexuality this morning she'd certainly have worked it out now.\n\n\"Oh, hi Raveena,\" I reply and hold the door open for her. \"Successful shopping trip?\" I ask.\n\n\"Oh, yes; just a few groceries and a bottle of wine. Girls' night out?\" she asks back, in a surprisingly cheerful tone given the morning she had.",
        "\"Uh, yeah,\" I reply a little awkwardly; for some reason, I feel guilty that she's caught me going out when she's stuck at home. However, she doesn't seem to pick up on this.\n\n\"Have fun. See you around,\" she says as she turns and heads in as I say goodbye. I watch as the door closes. I'm trying to decide whether Raveena has suddenly become remarkably at ease around gay women or if she's just a brilliant actor when Kayleigh nudges me.\n\n\"Who's the new hottie?\"\n\n\"Oh, she's a neighbour but she not new, it's just I've only got to know her over the last week,\" I see the look on both her and Emma's faces, \"and she is completely straight; she's only recently broken up with her boyfriend so... will you two stop it?\" I slap Kayleigh's arm as she's nearest.\n\n\"We only promised not to matchmake at the club!\" Emma laughs, linking her arms through Kayleigh's and mine as we start walking. \n\n\"So no interest there then? Really?\" Kay asks and I shake my head, hoping my cheeks aren't as pink as they feel.\n\n\"You two are impossible!\" I tell them, \"but I love you both. So, where are you dragging me? The Full Moon as usual?\" I ask, giving what is, I suppose, our regular destination. \n\n\"Actually, we thought we'd try somewhere new,\" replies Emma, \"it's called The Rose Garden and it's a proper gay nightclub. Is that okay with you, Mattie.\"\n\n\"I guess,\" is my non-committal reply. The looks on their faces show how annoying they find my attitude. \"Okay, I'm sorry... I'll try and enjoy myself, I promise. I'll even dance -- but only after a few drinks!\" That seems to satisfy them and, to be honest, Raveena's hug earlier has reminded me how good it feels to hold and be held by a girl.\n\nIt's a longer journey than to the The Full Moon; two buses taking us up through Streatham. The club entrance is discrete, a pair of double doors between an estate agents on one side and a sports shop on the other. I'm sure I'd never have noticed it had I been walking past. Above the doors is the club name - The Rose Garden - and a pair of roses entwined. We make our way in, paying a fairly nominal entrance fee, before heading down a flight of stairs to find ourselves in a large room. It is subtly lit with a bar along one wall, booths and tables around the edge and a dance floor in the centre with just a few women dancing to the music being played by the DJ in one corner. It's not very busy and we find a booth before I go to the bar and buy the first round of drinks. Kayleigh and Emma thank me, considering me generous but it gives me the chance to buy and drink a Jameson Whiskey before taking my beer, Emma's dry white wine and Kayleigh's vodka and diet coke.\n\nWe drink and chat for a bit, even Em and Kay happy to sit while the dance floor remains so underused. However, the club is gradually filling up and before long Em is pulling me from my seat to join them dancing. Though reluctant I remember my promise and allow myself to be semi-dragged into dancing to a fast, repetitive track. It's not that I dislike dancing; it's more that I'm a bit too self-conscious, rarely completely losing myself in the music and the movement of my body, usually wondering what someone seeing me might think. That's why a few drinks are an essential prerequisite.\n\nMy self-consciousness means that I'm very aware as another group of three women merge themselves into our little group. Kay and Em seem to move so unconsciously and instinctively to allow them to join us that at first, I wonder if they are even aware they've done it. When I notice that their group, like ours, seems to be a couple and a singleton, I begin to suspect accidental or deliberate matchmaking by the two couples. \n\nI look at the woman I suspect is single: dyed burgundy-red hair, grey eyes and a youthful rounded face and soft, short, feminine figure. She catches my eye and raises her eyes in a look of exasperation that so matches my own feelings that I find myself smiling back. She leans in, \"Hi,\" she says over the music, \"I'm Charlotte.\"\n\n\"Mattie,\" I tell her in reply. \"So you've been, er, encouraged to be here too?\"\n\n\"Di and Lucy mean well,\" she smiles as the music's volume dips momentarily as a new track emerges from the end of the previous one.\n\n\"Yeah, I know the feeling!\" I agree.\n\nWe dance together for a while before all heading back to sit. Six of us together in the booth is a bit of a squash but it's a little quieter and we can talk. Kayleigh and Lucy visit the bar for more drinks and it starts to shape up to an enjoyable evening. When there's a move back to the dance floor I take Charlotte's hand to help her out of the narrow booth. Our hands remain together as we navigate onto the dance floor when I happen to glance to the right... straight into Lisa's eyes.\n\nThe world seems to come to a halt; everything else fades but Lisa and me. I can feel my heart hammering and my throat tightens to the point of pain. Oh Lisa, my beautiful woman, my love... can you be here for me? Have you come back at last? I am filled with wild hopes and excitement for this is too wonderful to be believed. And there is a twinge of guilt too, guilt that I'd been dancing with Charlotte. Had Lisa seen? I blink and see that Lisa is holding another woman's hand, a tall, gym-toned woman, slim and with short blonde hair. Lisa turns and pulls the woman into a tight embrace and their kiss is deep, passionate and lingering. Once again, as on that evening two and a half months ago, my heart breaks and I fight tears. \n\nThe kiss ends and Lisa glances back towards me. I feel a flare of anger: Lisa, the woman I still held in my heart, had deliberately kissed her new lover right in front of me, taunting and mocking me, the, the... the bitch! In a rage I turn and grab Charlotte, tugging her to me and startling her. I kiss her roughly, determined to pay Lisa back for her treatment of me. The kiss lasts the moment it takes Charlotte to recover from her surprise when she immediately pulls away. I see confusion in her face. Oh shit, what was I doing? Then she grins and lunges forward, planting her mouth on mine. Now it is my turn to be surprised, surprised and not a little aroused as I feel Charlotte's mouth open. I respond and our tongues entwine. There are needs and urges inside me that have been chained up by loss for eleven weeks and this kiss is unlocking them. \n\n\"Oh god, I want you!\" I growl as our mouths separate, but whether I'm talking to Charlotte or Lisa I cannot tell. I feel Charlotte take my hand and gently pull me and I glance at her face to see her cheeks flushed, her eyes, wide and dark with arousal, glitter with disco lights. I follow as she turns and heads off the dancefloor.\n\nShe leads me through an opening at one end of the bar into a short corridor. There are double doors at the end with panic bars that Charlotte pushes and I find that we're in a stairwell. She backs into the wall, tugging me with her. \"You want me, Mattie: take me!\"\n\nI am filled by a mixture of anger at Lisa, excitement and these sudden events, alcohol and... yes, simple horniness, a primal and urgent lust. I press her against the wall and kiss her hard and she opens to me, her mouth almost sucking my tongue in. My hand cups her left boob: it is wonderfully soft and full. I squeeze gently as my thumb rubs the hard swelling of her nipple and she gives a moan of arousal and pleasure into our kiss. \n\nI move to kiss her neck and smell her perfume, a light, slightly spicy musk that suits her perfectly. I trail kisses just below her jaw and then down. I give the soft flesh a little nip and she groans, \"Oh god Mattie, fuck me, please!\"\n\nI am going to make this woman cum, right here and now. My hand drops, slipping up under her short skirt and my fingers brush satin panties. The fabric is warm and soft and I can feel the line of her pussy's cleft in the swell of her vulva. I feel my own body's arousal: the hard, tight tingle of my nipples and the wonderful hot, prickling dampness of my pussy. However boyishly I dress, I love the way my body feels, especially when I'm aroused.\n\nAnd I am so turned on! My hand massages Charlotte's sex through her panties and she writhes under my touch. I suddenly realize how much I've missed sex and that I'm desperate to taste a woman once again. \"Lift your skirt,\" I say, my voice so thick with lust I can barely speak, and she immediately complies. I squat before her, one hand pushing her leg to open wide the other tugging the satin fabric aside, revealing the soft down of her neatly trimmed pubes and the beautiful red wetness of her swollen labia.\n\n\"Oh yes, yes,\" I hear her say as my mouth closes over her womanhood, my tongue immediately penetrating her. The taste of Charlotte's sex explodes in my mouth and I cannot help a soft moan of pleasure. I suck and lick, savouring the best taste in the world. I raise my right hand, slipping it up the inside of her thigh, upwards, higher, higher until my fingers gently penetrate her. The soft, wet walls of her pussy take two of my fingers and these begin to fuck her, in and out with a lovely slurp and squelch sound. I penetrate her deeply as my tongue once again begins to lap at her pussy lips.\n\nCharlotte is giving little mewls of pleasure and excitement whose tempo increases with that of my fingers. I feel her tremble and my mouth moves up to suck the top of her cunt before my tongue flicks out to brush the hard lump of her clitoris, making her squeak. My own lust drives me hungrily on and I begin to lash and lick her clit mercilessly as my fingers redouble their efforts. There is no subtlety or finesse here, just the urge to bring her fast and hard to orgasm.\n\nWithin minutes it begins. Her hips try to buck and twist but I grasp them with both hands, pinning her to the wall as my mouth ravages her. She cums with a loud cry that echoes in the stairwell and thick cream oozes into my mouth, and I drink down avidly.\n\nCharlotte struggles to remain standing as her orgasm passes and she pants heavily. I move the fabric of her panties back over her puffy, glistening pussy and notice that some of the delicate lace trim has torn away and is loose where I yanked the panties aside. \"Oh, Miss Mattie, you can do whatever you like to your little Charlotte tonight,\" she tells me in a simpering voice and I apologise for the tear. \"I'll be a good little slut, I promise\" She smiles happily but, as my excitement wanes, I am increasing disconcerted that I could have torn her clothing.\n\n\"What?\" is all I manage to ask.\n\n\"A big, strong woman like you could tell me to do anything and I'd have to obey or you'd punish me.\"\n\n\"What?\" I say again, \"No, I wouldn't,\" I protest, climbing to my feet. \"Charlotte, I'm so sorry I was rough with you then I, I don't know what came over me.\" \n\n\"Well, Mistress, the obvious answer is me!\" she says, smiling as she reaches up and touches the drying stickiness of my cum-smeared cheek. \"But Mistress doesn't have to apologise for being rough with her little slut.\" I feel anger again inside me; anger at her but even more at myself for doing what I did, for becoming something I'm not.\n\n\"Charlotte, no! For fuck's sake, I'm no one's mistress and certainly not yours!\" She looks shocked at first but this quickly becomes upset, as if I've betrayed her.\n\n\"Why did you kiss me and finger fuck me then?\" she demands. \"You dress like that, you grab me and kiss me on the dancefloor and lick me and finger me and now say you don't want me! You... bitch!\" She pushes past and I see tears in her eyes. The door slams and I'm left alone in the stairwell. Why did I do what I did? I sit on the bottom step, my head in my hands. I know why I did it: to get back at Lisa, to have sex with another woman just like she is fucking that blonde bitch girlfriend of hers. \n\nI don't know which is more upsetting: what I did, why I did it or that fact that it made me Charlotte's dream dominatrix.\n\nI ought to talk to Charlotte again, to apologise and try to explain who and what I am, so I dry my face on the tail of my shirt and, tucking it back in, I head back into the nightclub. On impulse, I stop at the bar and order a double whiskey that I gulp down hastily before ordering the same again. \n\nI'd just taken a mouthful of this second drink when Kayleigh and Emma locate me. \"What the fuck happened back then?\" Kayleigh demands. \"The way you attacked Charlotte with that kiss, then the two of you disappear and then she comes back all tearful... Mattie, what's the matter?\"\n\n\"Guess,\" I tell her, lifting my face towards her, letting her see the upset that I know must show there.\n\n\"I've no idea, Mattie, but you look dreadful...\" she turns as Emma taps her shoulder and points across the dance floor. \"Oh shit: Lisa,\" Kay gasps and I take another gulp of whiskey and signal the barwoman for another refill. At this point getting seriously hammered is a very appealing idea and I slap another ten-pound note on the bar. I drain my current glass and pick up the third to drink when Emma places her hand over the glass, stopping me.\n\n\"Mattie, stop a moment,\" she pleads, \"tell us what happened.\"\n\n\"Lisa, she happened... kissing her new girlfriend in front of me... deliberately,\" I gasp, fighting to keep from sobbing. Emma's hand drops and I immediately drink. \"And then Charlotte... we had sex, in some back corridor, and...Oh god, it's all such a mess; I'm a mess!\" I drain the glass but the alcohol doesn't seem to affect me, offers no anaesthesia.\n\n\"Come on, we'll take you home,\" says Kayleigh. \n\n\"I... I ought to say sorry to Charlotte,\" I say dejectedly.\n\n\"Too late, I'm afraid,\" Emma tells me, \"she and Di and Lucy left shortly after she came back without you.\"\n\n\"Oh fuck. I'm so sorry...\" They shush me, take my arms and guide me from the nightclub and up the stairs into the cold night air. However, the reviving effects of the chill breeze have less effect on me than the rapidly consumed alcohol that is now flooding my veins and I stumble slightly on a paving slab. \"Ooops!\" I mumble.\n\nI recall little of the journey home except Kay and Em looking after me. I explain, ramblingly, what happened and pour out my embarrassment and shame at the way I used Charlotte to get back at Lisa. \n\nEventually, we arrive at my flat and, after seeing me to my front door, my two good, kind, caring and generous friends say goodbye and I enter the sanctuary of my home. Inside me, feelings of love and hate and guilt churn together as I fall, still fully clothed, onto my bed.\n\n<center>- - - - - - - - o o O o o - - - - - - - -</center>\n\nRaveena's Diary\n\nSunday 20 April\n\nIt was a shock seeing Mattie this morning: she looked washed out and red-eyed, as if she'd barely slept and had spent most of the night crying. I was already outside, standing down in the shadowy garden when she came out. She didn't notice me at first as she sat in her usual spot, her legs dangling down with her arms resting on the middle rail of the railing. Last night she had seemed happy going out with her friends and I wondered what had happened.\n\nAs I looked at her I thought again about her being a lesbian. Her two friends seemed likely to be a gay couple too, given the way they looked at and held each other. I've never really known a gay woman before; several gay men, yes, including colleagues at work, but no lesbians -- at least, as Mattie had pointed out, none that I'd been aware of -- until now. \n\nHer sadness and distress upset me, as it did that first day. I also wanted to help her and make her happy because I owe her a lot for all she did for me yesterday. I decided I ought to say something before she noticed me and perhaps suspected me of spying on her. \"Oh, hi there Mattie,\" I called up to her trying to sound as if I'd just noticed her. She turned her head sharply, staring down at me with a slightly horrified look. I guess she didn't like me seeing her upset again.\n\nWorried she might simply bolt indoors rather than talk to me, I quickly headed up the steps from the garden. Sure enough, she was twisting and pulling her legs back, preparing to stand. Close up she looked even worse, and I was worried that something truly dreadful had happened. \"Mattie, what on earth is the matter?\" I asked.\n\n\"It's nothing, just a bad evening yesterday. I've got to go.\" She climbed to her feet and moved to go past me, back indoors. I reached out and grabbed her arm.\n\nI asked her to wait and she hesitated, staring at me. She reminded me so much of myself the day after Gavin's betrayal that it almost hurt seeing her. She mentioned a relationship ending and I wondered if that was the problem or if it was something else.\n\nWithout thinking I stepped forward and pulled her into a hug and felt her go rigid. Had she made any attempt to move away I'm sure I'd have let her go, but she was sort of paralyzed so I just held her gently but securely, wanting her to feel safe and cared for as I had with her, yesterday. It told her that it would be okay, that whatever it was would get better. Maybe she knew my words were just platitudes because I felt her tense at what I'd said. I thought at that point she'd pull away, but she didn't: she gave a little sob and I felt her relax into me, though she didn't hold me.\n\nAfter a minute or so she apologised, saying she was being stupid. However, she still didn't try to move. Finally, she gently broke the hug. \"Thank you,\" she mumbled, awkwardly.\n\nI told her again how good she'd been to me yesterday and invited her in for coffee. \"I can listen to whatever the problem is, if you want,\" I told her, \"or we can just talk about, something else, like the last film you enjoyed or the worst meal you've ever had, anything.\"\n\nShe looked unsure but accepted my invitation.\n\nI the flat I made her sit while I boiled the kettle made her a mug of tea to her specification -- strong, not too much milk and two sugars. \"Builder's tea,\" she called it.\n\nWe both sat on the sofa. Now she was here and had calmed a little I wasn't sure what to say; I certainly didn't want to pry. I had enjoyed our day yesterday and it was good to have a friend as a neighbour but there was some deep sadness in her. Before I could work out what to say, she suddenly asked why I'd hugged her.\n\n I panicked, worried that I'd done something upsetting or inappropriate or, oh god, maybe she thought I was coming on to her. Not knowing what else to say, I gave her the truth. \"You were so sad,\" I told her. I explained how seeing someone upset always makes me want to help, but especially her, after how she'd helped me. \"I know how it feels after a relationship ends badly,\" I concluded. She gave me a funny look, as if she thought I was weird. \"You told me about your partner leaving so I assumed that's why you were sad,\" I explained.\n\n \"I did, didn't I,\" she said, as if she'd forgotten. I wondered if she was about to cry, but she didn't. Instead, she admitted that I was right and that she had seen her ex (Lisa, she said her name was) yesterday evening and that she still wasn't over her. \"When she saw me she deliberately kissed her new girlfriend, right there in front of me,\" Mattie said.\n\n\"That must have been horrid for you!\" I agreed but then, trying to make Mattie feel better, I suggested that perhaps Lisa hadn't done it to hurt her exactly but to prove that her relationship with Mattie was over. I don't believe that was the reason: I just think the woman was being a spiteful bitch. Still, I held Mattie's hand just to support her.\n\nMattie then said something a bit odd, something about seeing her ex made her do things... but she didn't say what these things were. She certainly looked embarrassed about them, whatever they were.\n\nI tried again to comfort Mattie, telling her everything would get better, eventually, but it might be slow. I hope that's true, for me as much as for her. ",
        "I said that I hoped my hugging her hadn't upset her and that she hadn't thought was coming on to her. She didn't reply immediately, though I'm still not sure why, but then told me it hadn't upset her and that I give very nice hugs.\n\nAs she drank her tea, Mattie told me about her and Lisa from the beginning. Mattie had been doing her apprenticeship at college, when Lisa, three years older and a student at a London university, started renting a room in Mattie's parent's house. At that point, Mattie knew herself to be gay but hadn't had a real girlfriend. She fancied Lisa from the first time she saw her and, before long, she was sneaking into Lisa's room at night. It was a sweet, romantic story but I must admit the image of Mattie's and Lisa's nighttime liaisons was even a little arousing -- certainly more arousing than it ought to have been. \"Keeping it secret was hard when thing got lively,\" she said, making me glad that my skin tone makes my blushes hard to notice\n\nI told her that was almost too much information and now I'm a bit embarrassed about the \"almost\" because it made it sound like I was interested in hearing about her and Lisa together. \n\nMattie didn't seem to notice, explaining that the difficulty in keeping it secret pushed her to tell her parents about her sexuality. Of course, I had to ask how do you tell your parents that you've been sleeping with the female lodger?\n\nIt hadn't been easy, apparently, though Mattie's Mum and Dad had at first seemed more upset by the idea that Lisa had betrayed their hospitality by sleeping with Mattie than with the fact that she'd just told them she was a lesbian!\n\nMattie and Lisa had moved into the flat upstairs quite soon after that, something that Mattie thinks actually helped her parents to accept her sexuality. When Mattie mentioned that them not being religious may have helped too,.for some reason it occurred to me that, with my Mum, religion would have been much less of an issue than the probable lack of grandchildren! I guess that my being twenty-five, childless and single again will be a boringly repetitive theme of any conversation with Mum for the foreseeable future.\n\nMattie said that she and Lisa had been together for four and a half years, \"...and then Lisa walked away.\" Perhaps it was insensitive, but I couldn't help asking what had actually happened, although I would understand if it was too painful\n\nThere were tears in her eyes and I didn't think she'd tell me but then she took a deep breath and roughly wiped her eyes with the back of her hand.\n\n\"It's been nearly three months; it shouldn't still be painful. I shouldn't still be bursting into tears every time I think of her!\" she complained and again took her hand to comfort her. \"Maybe telling someone will help,\" she said and started to explain that things had been a bit \"uneasy\" -- that was the word she used -- between her and Lisa. Mattie thinks it was the fact that Lisa was an English graduate who loved to read and talk about literature. \"All those big, highbrow books\" Mattie called them whereas her own reading was limited to books like Harry Potter and The Hunger Games.\"\n\nOf course, I had to defend those books because I think they're good books, as I told her and pointed to where the bookcase should have been but where my books are now stacked up by the wall, including all the Harry Potters and The Hunger Games trilogy.\n\nIt made her smile for a moment but Lisa didn't agree and started going out more and more with colleagues from work and her old University friends. It was one of them, a girl she'd been with during her first year at University that she'd started seeing. Mattie began crying again when she told me this, so I moved over to hug her again and this time I felt her hug me back, which I found sweet. \n\nEven though I knew it would sound trite, I told Mattie that Lisa leaving wasn't her fault but Lisa's, just as it's not my fault that Gavin was a lying, cheating bastard. \"We need to let the cheating bastards and cheating bitches go,\" I told her.\n\n\"I know, but it's hard!\" she pointed out, and I had to agree.\n\nI warned her that even if Lisa came back tomorrow, she couldn't just take her back because the old relationship they had is over. It would be like starting from the beginning again, finding out who she really is. \"She may not be the person you're meant to be with,\" I told her, which I could see made her think. \n\n\"You're right,\" she said eventually. Mattie thought she'd been a bit love-struck, seeing Lisa, and had even felt guilty for dancing with another woman earlier, which Mattie knew was ridiculous. When Lisa kissed the blonde woman -- her new girlfriend, Mattie assumed -- it hurt Mattie so much and made her furious -- so furious that she just wanted to get back at Lisa, to hurt her back. I was looking at Mattie closely and could see she was really upset.\n\n\"I just grabbed the girl I'd danced with and kissed her, hard, without care or love,\" Matie said, tears trickling from her eyes. \"It was horrible of me to do that to her, and I never said sorry.\"\n\nI was surprised at her confession, a little shocked too I suppose but I tried to comfort her, telling her she'd been upset and confused. I edged closer and slipped my arm around her to just be a source of comfort. There was an odd contrast between the firm muscles of her body and the emotional softness and vulnerability within her.\n\nEventually she calmed. \"Thank you, Raveena, for listening and caring.\" I felt, in a small way, that I'd repaid her for her help yesterday. \n\nI made her another mug of tea. Given how open she'd been I couldn't help my curiosity and asked her if she was what they called a butch lesbian. When she gave a slight grimace at the question, I quickly apologised. \n\n\"No, it's okay Raveena,\" she answered tiredly. \"The answer is probably, yes; at least a lot of gay women would call me that, but I hate the term 'butch', I really do.\" She said and I asked why. She said it was because the word 'butch' always make her think of the ugly dog in the 'Tom and Jerry' cartoons, which made me laugh.\n\n\"That's so not you!\" I assured her, \"because you're very attractive and lovely.\" I blurted this out without thinking; I mean, it is what I think I worried I shouldn't have said it. \n\nHowever, there was more. It's wasn't just the word 'butch' that Mattie didn't 't like but the assumptions that go with it, things like people thinking that she literally wants to be a man. \"I really don't,\" she explained, \"I actually like my body the way it is -- female.\"\n\nIf that's the case, I asked, why dress like a tomboy?\n\nHer reply was that she liked the freedom boys seemed to have; the freedom to run and mess around and play football and get dirty without being told they had to be quiet and neat and tidy and be 'ladylike'. She wasn't interested in clothes and makeup but liked practical things, which everyone seemed to say were boy things. \"So why not join the boys: dress like them, play football with them and get messy like them,\" she smiled. \"I guess I ended up fancying girls the way they do too!\" She added, laughing.\n\nAnd that was part of the 'butch' problem, she explained: the assumption that she'd be dominant, to be in control of the lovemaking and, basically, to be 'the man' in the relationship. \"That's what Charlotte, the woman last night, assumed, but that's not who I am. I want to share as an equal. Am I stupid to want that?\" she asked.\n\nI assured her that it wasn't. Gavin always wanted me to be the 'little woman' and I went along with it and let him, almost without realizing it, I told her, adding how good it felt when she made me get on and put the table and chairs together on my own. \"I guess the only stupid thing is ending up as something you're not for the sake of someone else,\" I said.\n\nI was quite proud of summing it up so neatly, especially when Mattie told me it was \"a very wise observation,\" and that I wasn't just a very pretty face, making me bashful.\n\nWe got onto talking about what I do for work, and she was interested in my job as a physiotherapist, particularly as she's once been a patient at King's College Hospital when she broke her wrist, well before I started working there.\n\n\"Do you do massages?\" she asked.\n\nI told her that I did, but that I'd trained in sports massage too. \"Have you a nagging ache you need treating?\" I asked, feeling a little suspicious of where this was going.\n\n\"Not at the moment,\" she replied, smiling and laughing. It was good to see her a little happier.\n\nI commented on the fact that the chairs and table were still standing and thanked her for helping me overcome my flat-pack assembly-phobia\n\n\"No problem; I'm always happy to show a woman she doesn't have to depend on a man!\" she smiled but there was definitely more than one meaning to that comment and she knew it. To cover my discomfort I asked her what she did and was amazed to hear she works as an electrician and full of admiration as she told of the problems of being a woman in a very male-dominated job. I asked her if she would like another cup of electrician's tea.\n\n\"Builder's tea!\" she laughs, \"and that would be lovely, thanks.\"\n\nWhen I handed her the tea I put on a serious face. \"Right, now we can talk about something I really want to know about you: which do you think is better, 'The Hunger Games' trilogy or the 'Divergent' trilogy?\" Mattie laughed.\n\nI don't think we reached a conclusion, though Mattie insisted that either would have been better with a lesbian love interest rather than the boringly predictable heterosexual one. When I pointed out that these were classed as books for teens and young adults, her reply was that there are teenage lesbians too, which was, I had to admit, a fair point. We chatted on for some time and I lent her one of my books, 'The Girl with All the Gifts' to read and she promised to drop one into me later.\n\n<center>- - - - - - - - o o O o o - - - - - - - -</center>\n\nMattie\n\nThe day was hard, physically. We've been pulling cables for the wiring, so I'm tired as I drive home. It's on days like this that I really wish I wasn't single and that there was someone to come home to and who'd make a fuss of me. \n\nI park up and stretch my back and try to loosen the stiffness from my shoulders, looking up at the block of flats. There is a movement at one of the first-floor windows and I realize that it is Raveena waving at me through what I work out is the bedroom window. It's so sweet I cannot help waving back and, on impulse, I mime smoking and she gives a thumbs-up. If I go for a fag now it saves climbing the stairs twice; I just wish I'd stopped and bought a couple of cold bottles of beer on the way home.\n\nI lock the car door and head indoors, through the hallway and turn right into the corridor to the garden, when Raveena calls down the stairs to me. \"Can I bring you anything, Mattie? A drink perhaps?\" I want to say no, but she leans around the bannister and sees my face, which obviously tells a different story and, before I can reply, she smiles and asks, \"Wine or beer?\"\n\n\"Beer would be great, thanks.\" I wait in the corridor until she comes down, handing hands me a gloriously cold bottle before we walk out into the garden. Sat side by side I raise my bottle and tap it against hers. \"Thanks, Ravi; cheers.\" She gives a little laugh.\n\n\"If you call me Ravi then I'm going to call you Matt; Ravi's a boy's name!\"\n\n\"Ooops, sorry!\" I hastily apologise. \"It's just 'Raveena' sounds so very formal. Would Veena be acceptable as a nickname?\"\n\n\"It's better than 'Raver', which is what I got called sometimes at school so, sure, why not?\" She taps her bottle against mine. \"I might still call you Matt though,\" she teases.\n\n\"You can if you want, though you might not want to do so in front of Kayleigh or Emma, the women you saw me with on Saturday,\" I warn her.\n\n\"Why's that?\" she asks, intrigued.\n\n\"Well, because they're quite likely to tease you about wanting me to be your man or something equally embarrassing.\" I try to gauge her reaction but have absolutely no idea what her expression means: confusion, surprise, intrigue, worry -- any or all would fit.\n\n\"Ah, I see. I'd better stick to Mattie then,\" she says as she takes out her e-cigarette. I pull out my packet of cigarettes and light up. \"Anyway, I think Mattie is a lovely name and suits you. I sometimes wish I may parents had given me a nicer name; you're right, 'Raveena' does sound a bit pompous \"\n\n\"My parents didn't name me 'Mattie',\" I admit and immediately wish I hadn't as I can see Veena wants to know what my name originally was. I hold up my hand to stall her question. \"Okay, Veena, I'll tell you but you must promise not to laugh, okay?\" She nods in agreement. \"It was... Matilda.\"\n\n\"Like the Roald Dahl character,\" she smiles, \"but I think Mattie is much more you.\"\n\n\"Thank you. I guess 'Raveena' is an Indian name; does it have a meaning?\" I ask.\n\n\"It is; Mum is Indian and my sister Vasanta and I both got Indian names. Raveena means 'sunny'.\"\n\n\"And that is very appropriate for you,\" I tell her, \"you were been brilliant yesterday morning.\" She smiles shyly at my heartfelt compliment.\n\nAs the evening darkens we talk easily, sharing how our days went and drinking companionably. I twist and stretch my sore shoulders, giving a little grunt of discomfort.\n\n\"What's up, Mattie?\" she asks.\n\n\"Oh, nothing, I'm just a bit achy after the work today; too much lifting and pulling.\" She immediately scoots back from the rail and moves to kneel behind me. I feel her hands lightly resting on my shoulders.\n\n\"Where is it sore? Here, in the deltoids?\" She touches the rounded ends of my shoulders.\n\n\"No, nearer my neck and a bit lower.\" Her touch makes my neck and scalp tingle.\n\n\"So, here? Or is in more here and deeper inside?\" Her hands touch just below the base of my neck either side of my spine and trail lower, between the shoulder blades.\n\n\"Um,\" I say, moving my shoulders and trying to judge the location, \"sort of both really. Sorry,\" I laugh apologetically.\n\n\"That's okay. It seems to be your trapezius muscles, here...\" her fingers trace from my neck out across the backs of my shoulders, \"and possibly the deeper rhomboideus muscles here...\" her fingers glide from my spine outwards to the tips of my shoulder blades and this time I cannot help the shiver. \"Are you okay Mattie?\"\n\n\"Um, yes, just a bit cold,\" I lie. \n\n\"Would you like me to work on your shoulders for you?\" she asks. \"The muscles seem very tight and massage would help them relax and heal.\"\n\n\"No, Veena, you don't need to do that.\"\n\n\"Come on, Mattie, you've been so good to me over the last week and you're coming to help me build the bed and bookcase on Wednesday. Let me help you with this.\"\n\n\"Okay, thanks.\" I flop forward and wait.\n\n\"Um, this isn't ideal here. I mean, it's a bit cold and the concrete is killing my knees and, er, I can feel that you're wearing a sports bra and a thick work shirt so I can't really work on the muscles properly.\"\n\n\"Oh, yes; I guess you need me undressed to massage me.\"\n\n\"Not necessarily. I can massage through thin clothes, something like a loose tee shirt and not use oil. If you'd prefer a massage with oil then I need bare skin, obviously. For treating your shoulders, you could just wear an ordinary bra or wrap a towel around yourself to keep covered up.\"\n\nI can't help a little chuckle. \"I don't do 'ordinary bras' Veena, only sports bras. I'd rather go braless than wear some pink, lacy girlie bra!\" I think for a moment then smile. \"I guess I could just strip to the waist rather than faffing around; it's not as if I've much to hide!\"\n\n\"If you'd be happier doing that,\" she replies in an offhand way as if my body is a matter of indifference to her, which is a little disappointing. I guess in doing her job she must see semi-naked women and men fairly regularly. Anyway, she's straight, so what did I expect? There was never going to be a lustful gleam in her eye. Besides, why should I want that? Charlotte looked at me like that and look what happened there.\n\n\"Veena, it would be really kind of you; I've never had any kind of treatment like this so I'd love to try it.\" I climb out from the railing and stand.\n\n\"I just need to pick up some oils and towels and bits,\" Veena tells me as we walk up the stairs so I wait as she pops into her flat and then we head to the top floor. \n\nOnce in my flat, I see her looking round in interest and smiling. \"It's not all from Ikea!\" I tell her \"There's stuff from Habitat too.\" She tells me it's lovely, which makes me happy. Almost inevitably she's attracted to the poster that dominates one wall and goes over to study it. \"They're all the posters from my hundred favourite films, as of a couple of years ago,\" I explain. \n\n\"It's brilliant,\" she replies, examining the playing card size copies of the movie posters \"it's the sort of thing you could spend ages studying. So what's your favourite film?\"\n\n\"Oh, that's too difficult a question; I found it hard to get it down to my favourite hundred!\" I ask her what she wants me to do to get ready. \n\n\"Well, you'll need to undress and then if you can sit backwards on... this chair.\" She takes towels out of a small holdall and drapes one over the back of the chair; then the second towel, still folded, is placed on top of the first, balanced on the top of the chairback. \"To rest your head on,\" she explains and then takes a couple of bottles out of the bag. \"Have you any allergies?\" she asks, \"Nuts or anything?\" and I tell her no.\n\nI remove my shirt and bra, watching Veena as she watches me. She says nothing as I reveal my titties but gives me a professional but friendly smile. I sit as instructed and she asks if I'm comfortable before her oil-slick hands glide across my shoulders. \n\nShe begins gently, long strokes and subtle kneading, \"Just to loosen the superficial muscle,\" she explains and the feeling is lovely. The pressure increases, her thumbs working on tight circles and I cannot help gasping at the stab of pain the pressure brings. She apologises and eases off a little but doesn't stop. Her ministrations lull me, her touch soothing and relaxing. There is a scent from the oil I do not recognise, slightly flowery but warming and comforting.\n\n\"What can I smell? Is that the oil?\" I ask.\n\n\"The oil is sweet almond oil but I've added a little lavender essential oil. Lavender has anti-inflammatory and has healing properties but is also stress-relieving and relaxing. I figured after the weekend you could benefit from some help unwinding.\" She is absolutely right and I already feel more relaxed than I have in weeks. I lose track of time, my world just the smell of lavender and wonderful feel of Veena's hands on my shoulders, back and neck. \n\nInevitably, and all too soon, Veena is back to giving long, gentle strokes and then she is finished. \"There we are, Mattie. How do you feel?\"\n\n\"Oh, Veena,\" I sigh, \"you've turned my shoulders to a wonderful, soft mush! I feel... Mmmmm,\" I sigh again and she gives a little laugh.\n\n\"I'm glad you enjoyed it.\" I turn and reach for my shirt and slip it on as she wipes her hands. \"I should warn you that you may feel a little sore in the morning where I've worked on the muscles but that should pass as you get moving. A hot shower or bath can help too.\"\n\n\"Okay. I was going to cook some pasta; you're welcome to join me if you've not eaten,\" I offer. \n\n\"Thank you. I... I'd love that. I get a bit lonely in the evenings so being here would be much better. Is there anything you need? I can pop down and fetch it.\"",
        "\"Well, I've no drink in so...\"\n\n\"I've got a bottle of wine; I'll go and get it,\" she smiles and she heads off. I watch her go and it occurs to me how much easier Veena's being straight makes our relationship, allowing us to simply be friends and she's quickly become a very good friend indeed.\n\n<center>- - - - - - - - o o O o o - - - - - - - -</center>\n\nRaveena's Diary\n\nMonday 21 April\n\nI noticed Mattie getting out of her car after work this evening, and when she looked up, I couldn't help waving. She invited me to meet her for a smoke and I brought a couple of beers for us to share. She's now calling me Veena, which is quite sweet and much better than 'Ravi', her first nickname for me! \n\nAs revenge for 'Ravi' I said I'd call her 'Matt. However, she suggested that her friends might think I fancied her if I called her that. I don't know if she really thinks that might happen or if she wanted to see my reaction. I honestly don't know how I'd feel if it happened, but I'd certainly try not to be offended because that would probably upset her. I was tempted to call her 'Matt' just to see her reaction but I suspect she's a little too fragile to tease too much. \n\nShe told me that Mattie wasn't the name her parents gave her: she was actually 'Matilda'! I told her that Mattie suits her much better, which it does; rather cute and slightly androgynous, which seems to be Mattie to a tee. God, I'm glad I didn't say that to her face! She asked about my name and told me that 'Sunny' suited me after the help I'd given her when she was down, which was very touching.\n\nShe winced when she moved her shoulder, and when I asked she said her shoulders were stiff and painful. I did a little investigation and it seemed to be her trapezius and/or rhomboideus muscles so I offered to give her a massage. She eventually agreed and thought I meant to massage her right there and then, but given that kneeling on concrete was pretty damn painful for me, that she was already shivering from the cold and the thick shirt and sports bra below wouldn't make massage very effective, I said we needed to go inside and she led me up to her flat. I stopped in here on the way up to pick up my treatments bag.\n\nI was intrigued going into her flat for the first time, wondering what her tastes were: is she tidy, what colours does she like, would there be pictures, what furniture? The short hall is pale cream with a varnished wood floor that continued throughout the flat. I could identify each room of course, since her flat has exactly the same layout as this one. Her bedroom door was ajar: the surprisingly feminine pale lilac of the walls was echoed in the slightly darker duvet cover that I could see covering the corner of the bed that was just visible.\n\nShe led me into the tidy and clean main room --the estate agents' descriptions called it a 'lounge-diner' -- which, perhaps unsurprisingly, wouldn't have looked the least bit out of place in the Ikea catalogue and that thought made me smile. Mattie noticed and smiled back, evidently reading my thoughts. She told me that it wasn't all from Ikea; some of it came from Habitat. I assured her it was lovely, which it is.\n\nMy eye was drawn to a single large poster on the long wall opposite the window and I moved to have a closer look. It was a collage of dozens and dozens of movie posters, each one a little bit bigger than a credit card. There were many I recognised but many more that I didn't. From what I know of films, it was an eclectic mix covering an impressive range in terms of dates and genres. \"My hundred favourite films, as of a couple of years ago,\" she told me as she saw what I was looking at.  \n\nI told her it was amazing and asked what her most favourite film was. However, she claimed that question was too difficult and even getting down to the favourite hundred had been hard.\n\nI looked around the room and suggested that, for the massage, she sat back to front on one of her dining chairs. I put towels on the wooden back of the chair to support and cushion her head whilst she got ready.\n\nShe was disturbingly happy to get undressed. I did wonder if she was being deliberately flirtatious but I stayed professional, reminding myself to treat her as any other client. When she did strip I have to confess that I struggled not to stare. I've seen my fair share of women undressed, in changing rooms and as a physiotherapist but there is something about Mattie physically that I find... not actually attractive, obviously but... intriguing? Captivating? Her boobs that she always calls small looked good, I mean they suited her, her shape and nature I mean.\n\nI added lavender to the massage oil on the basis it would help her physically and emotionally and then I massaged her. Perhaps it was the affection I feel for Mattie, for what she's done for me, for the bad things she too has gone through, but I really loved massaging her. Why am I being so bashful in my private diary? I should be able to admit how much I enjoyed massaging Mattie, how much I liked the feel of her skin under my hands: as soft as any woman's but with a muscular firmness beneath that reminds me of sportswomen. I watched my dark fingers glide across her pale skin and the dark ink of her Celtic tattoo. I couldn't help prolonging the massage, not that Mattie minded, not one bit. It was no surprise that she said her muscles were mush after almost forty minutes of being worked on -- but mush in a good way! \n\nShe invited me to stay and eat, and of course, I accepted. Mattie makes very nice Spaghetti Carbonara and we chatted and drank. I think she gets lonely too in the evenings. The view from her window is even better than mine as she is well above the trees and bushes. I pointed to the hills on the horizon, the North Downs, and told her that was where I grew up. As we sat and ate and talked the sky darkened and lights came on outside until we were looking out across a glittering sea of lights: the motionless glowing of offices, houses and street lights and the moving twinkles of vehicles. It was magical; the view and the meal and Mattie.\n\nWhile we talked about what I wanted to ask her was what it's like being a lesbian, what does she think and feel when she looks at a woman? And how did she know she was gay and not, say, bisexual? I'm not sure why I want to know all this -- no, I do know why: it's because it's been sort of playing on my mind, like when I looked at her topless. I didn't ask her, of course: I wouldn't want her to feel I was prying and, well, I don't want her to think I fancy her or anything.\n\nTuesday 29 April\n\nI found a book sitting outside my door when I left for work this morning with a slip of paper tucked into it: \n\n<blockquote>\"Sorry, I meant to give this to you yesterday evening. \n\nI hope you enjoy it.\n\nLove, \n\nMattie x\"\n\nP.S. It's amazing: my shoulders feel wonderful! No aches at all, this morning. Thank you.</blockquote>\n\n Mattie had obviously left it on her way out to work so I took it with me and began reading it at lunchtime. It's called 'Afterworlds' and it's an interesting premise: a story within the story of the girl writing that story. \n\nBum note: I've been asked to work Saturday as Clive's got some domestic crisis he needs to deal with at the weekend.\n\nWednesday 30 April\n\nI got home in good time for the Ikea delivery this afternoon and boy was I glad that Mattie and I hadn't been able to fit the things in her car: the bedframe and bookcase were big and heavy enough but getting the mattress up the stairs would have been impossible! \n\nAs the afternoon wore on I was increasingly excited waiting for her to arrive. Part of it was that I still don't like being on my own in the evenings and she's good company, part was getting the furniture assembled (though I assumed she was going to expect me to do most of it once again) and part of it was I wanted to have a word with her about the book she lent me, the sneaky, mischievous woman.\n\nIt was nearly seven o'clock when she knocked on my door and I have to confess I was like a child before her birthday party: my tummy was full of nervous butterflies. It was ridiculous and not a little disconcerting at my age. I suppose it's a sign that I need to get out, as Mattie is doing, and try to find a new relationship. \n\nWhen I opened the door to Mattie's knock the first thing I saw was not Mattie but my two odious neighbours entering their flat opposite. They are a middle-aged white couple (he's balding and overweight, she's small and bird-like with sharp little eyes) and were apparently just returning from a shopping trip, carrier bags in hand and resting on the floor as they opened their front door. They gave me their customary glares before turning away and entering their home. However, even their habitual racism couldn't dampen my mood when I saw Mattie.\n\nI welcomed her in trying not to grin like a maniac. To my surprise, Mattie immediately apologised, \"I'm sorry Veena, I think I may have put you in your neighbours' bad books by visiting you; what a pair of miserable, homophobic gits they are.\"\n\nI told her that it wasn't her but me and the colour of my skin the objected to. It's ridiculous, I explained, because I'm as British as they are. Dad's family are British going back generations and, okay, Mum came to this country with her parents from India but she was only thirteen at the time!\n\n\"Ah, so they're homophobes and racists.\" Mattie observed. They'veI called her 'deviant' and 'pervert' as they've walked by apparently. She thought It was a pity that she wasn't black so that my neighbours' outrage might great be enough to choke them to death. \n\n\"Or if I were lesbian,\" I suggested laughing and wanting to show solidarity with her. Mattie gave me a searching look, wondering if I was teasing her, I suspect so I offered her a drink. She opted for tea, saying that the beer could wait until we'd finished building the furniture. \"I don't want you drunk when in charge of an Allen key!\" she teased. With her tea in hand, she asked what item I want to start with and I told her the bed because I really didn't want another night on the blow-up mattress. \n\nIt ended up a team effort, not because the bed was complicated but due to its sheer size; holding a six-foot-long side rail steady so it could be screwed to the six-foot-wide bedhead was challenging and would have been impossible on my own. Mattie's refusal of the beer was probably wise. An hour or so later Mattie and I lifted the mattress into place on the bed. I flopped onto the bed from one side and Mattie did the same from the other. Our arms and shoulders bumped together as we met in the middle and we looked at each other. I smiled at her, grateful for her help and that I have her as a friend. \"I want to talk to you about what you did the other day,\" I told her and a look of concern, almost guilt, crossed her face and she moved to stand up, apologising. I told her to come back and that I wanted to talk to you about lending me 'Afterworlds' She looked a little relieved and then grinned, guessing what I was going to say.\n\n\"Chapter Fifteen? The rooftop?\" she asked. \n\nI told her that I couldn't remember the exact chapter number but, yes, the meeting on the roof She deliberately gave me a book with a lesbian love interest, I complained. She flopped back onto the bed, lying on her side to face me. \n\n\"Are you upset with me?\" she asked. \n\n\"Of course not; actually I really liked the surprise and...\" I hesitated. What I wanted to say was that I found the idea of the women starting their relationship, discovering each other, sharing their lives intriguing and enthralling but I didn't feel I could say that to Mattie, that she might think I was trying to suggest something. Instead, I said, \"...and I'm really enjoying it. I didn't expect gay love in a young adult book but you're right: there should be gay heroes and heroines. How do you like the book I gave you?\" I asked\n\nShe's only read the first few chapters but thinks it's very good so far. \"Kinda sweet and creepy at the same time,\" she called it but she hasn't yet worked out what Melanie's secret is. She does, however, know what the name Pandora means now. \n\nI promised no spoilers but assured her I thought the story was very good. It occurred to me that I was lying next to her in bed again but I didn't feel uncomfortable; on the contrary, I felt happy being there with her. I asked if there were other books with gay characters and she said she'd found one other with a lesbian protagonist so far, adding that she didn't know of any with gay male characters. \"Not that I've been looking, to be honest,\" she said.\n\n\"I just wondered,\" I said, trying to suggest idle curiosity and no more. I suggested we ought to get on with building the bookcase and then I'd order pizza as my treat as a thank you. She approved of that plan.\n\nThe bookcase didn't take long at all, but Mattie insisted on me at least trying to use the hammer to nail the back onto the bookcase. She had to pop up to her flat to get her hammer since I don't have any tools at all and I was terrified of hammering my fingers. That meant I was tapping the nail too lightly to actually drive it into the wood. I could see she was getting a little exasperated with me and I thought she'd step in and take over. Instead, she came up behind me and reached forward to take both my hands in hers. \"Just relax and let me move your hands, don't fight me,\" she warned.\n\nThere was something very nice, very comforting I suppose, about the sensation of Mattie's toned body wrapped around me. However, my mouth had gone dry and I was aware of enjoying, far more than I should, the feeling of what she was doing, so the last thing I was going to do was to fight her! Her idea worked though: Mattie moved my hand to swing the hammer to strike the nail cleanly and, though I flinched, the point of the nail penetrated the wood. Before I could react she swung the hammer again and again so the nail was almost all the way in. \"Okay, now you finish it,\" she ordered me, releasing my hands. I did, though the first swing missed the nail; two more swings and the nail was fully home.\n\nShe did the same for the next half dozen or so nails and then, as my confidence and skill increased, she helped me with the first hit to get the nail started and then let me do it all. We lifted the finished bookcase into position and she drilled the wall and fixed the bookcase in place, probably figuring that I'd learned enough craft skills for one day. Of course, it may have been simply terror at the damage I might do with an electric drill in my incompetent hands!\n\nWe shared a pizza that had delivered and it was very nice just being with her chatting. For future reference: Mattie says she's happy with any pizza toppings apart from tuna, mushrooms or chillies.\n\nThursday 1 May\n\nI had a night-in tonight, reading and surfing the Internet but still on my own, and it was less fun than last night. The film version of Divergent is on at the cinema at the moment. I liked the book series a lot but I cannot remember if Mattie said she'd read it. I wonder if she'd come to see it with me over the weekend?\n\n<center>- - - - - - - - o o O o o - - - - - - - -</center>\n\nChapter 4: Trying for a new start\n\nMattie\n\nOver the last few weeks, I've avoided going out with Kayleigh and Emma. I hated seeing Lisa and I hated even more what I did to Charlotte. That's not to say I've not been out at all; I've been to the cinema with Veena, out to the pub a few times (twice with Veena and three Fridays after work with workmates) and once to a restaurant with Veena when I was emailed a discount voucher. Of course, Veena and I don't just go out, we also meet up quite often in the evenings after work too.\n\nAs you can tell, Veena and I have become good friends, often cooking for each other of an evening. We both agree it's nice not to be alone every evening, so after eating we talk, perhaps about the books we share or watch TV or a DVD (since Veena seems to want to work her way through the one hundred films on my poster). I've been tempted to feign injury and try to scrounge another of her incredible massages. I've not done so, partly because I don't want to take advantage of her good nature and partly because she'd probably be able to tell I was faking as soon as she touched me -- my muscles would probably give me away! \n\nWe've kept up our book exchange, of course. It's been good, both in trying new books and not having to pay for them and we seem to share a lot in our tastes. I've not given her the other book with a lesbian protagonist -- yet! I have plans, though... Yesterday evening, Friday, I decided to pop into Veena's as I came in from work to return her book 'We Were Liars'; I really liked the book but guessed the ending, although Veena seemed to doubt this when I told her. I met her friend Katie as I left and I don't like her much; I suspect she's homophobic, from the comment I overheard. It was so sweet hearing Veena's angry reply; if I didn't already know, then it would have told me just how much she cares for me as a friend.\n\nI still love Kayleigh and Emma, of course. However, going out with them would be easier and more relaxing for me if they'd just go to the pub or even a film, but it seems that, for the two of them, a night out must include dancing. Nonetheless, they are very persistent so, eventually and having made them promise that there'll be no matchmaking -- absolutely, cross our hearts, sweat to die promise -- I agree to accompany them this Saturday evening to The Full Moon. That's always been our usual club. It's not exactly a nightclub but really a pub with a bar and a dance floor and pseudo-nightclub upstairs. Neither is it an exclusively gay venue, though a reasonable percentage of the clientele are gay, making it a safe and comfortable place to be.\n\nThe evening starts easily with drinks downstairs, but Kay and Em are desperate to head upstairs. It's not the dancing that I object to, though I'm not as keen on it as they are, it's that I mistrust them, despite their promise. \"You two could go up and dance and leave me down here you know,\" I point out.\n\n\"Oh no, you can't sit here drinking alone,\" protests Emma.\n\n\"Em, if you two are off dancing then I'd be sat on my own upstairs,\" I point out but they don't want to leave me. \"Okay, let me have one more drink down here and then I'll come up and find you; I might even dance,\" I tell them. It takes another few minutes of persuading but eventually they head off, though Emma keeps looking back guiltily as they walk up the stairs. \n\nI go to the bar and order another beer and an Irish whiskey; I've said I'd dance so I'll need this. Kay and Em seem to have forgotten that Lisa loved dancing, forever dragging me out onto the dance floor or pleading to stay on for just one more song. They also seem to have forgotten what happened after I danced with Charlotte.\n\n\"Hey, cool, another Jameson's drinker!\" I turn at the sound of the woman's voice close by and see her looking at me. She is older than I, maybe in her early thirties, and going by her eyebrows the mass of red-orange curls are her natural colour. This, with her pale skin and green-blue eyes, suggest a Celtic heritage.\n\n\"I'm sorry?\"\n\n\"You drink Jameson's whiskey: it's one of my favourite tipples,\" she explains, smiling. \"I'm Roz; are you here on your own?\"\n\n\"Er, no... my friends are upstairs; they wanted to dance.\"\n\n\"But you didn't, er...\" she pauses and I sit there until I realize she's waiting for me to tell her my name.",
        "\"Oh, my name's Mattie. And no, I don't want to dance, not at the moment.\"\n\n\"Good, that means we can talk.\" Roz leans on the bar to signal one of the bar staff and orders, of course, an Irish whiskey. \"So, what brings a girl like you here this evening?\" she asks after taping her glass against mine in a sort of unspoken toast. She runs her tongue nervously across her lips.\n\n\"My friends, mainly,\" I answer neutrally.\n\n\"Hmm, and yet they have abandoned you,\" she observes.\n\n\"Well, they both wanted to dance together but I wanted another drink,\" I explain, feeling the need to defend them against the implication that they didn't care about me.\n\n\"Ah, so they're a couple and you're playing gooseberry,\" Roz says in the same knowing tone that's beginning to annoy me.\n\n\"Look, you know nothing about me or my friends, so what's your point?\" I look at her, \"Are you trying to hit on me?\" To my surprise, a look of panic crosses her face.\n\n\"I'm sorry,\" she replies hastily and begins to stand, her face red, \"I shouldn't have done this...\" She is on her feet and starts to turn away, sadness in her face and her shoulders slumped dejectedly. \n\nI don't understand what just happened or exactly what's going on here. However, that doesn't stop the surge of guilt I feel as it seems that, somehow, I've done something wrong. After what I did to Charlotte, I really don't want to distress or hurt any more women. \"What's the matter? Roz? I didn't mean to upset you.\"\n\n\"Sorry, Mattie, I thought you were, you know... gay.\" She ducks her head nervously as if fearing I'd be angry. Then it strikes me: the superficial veneer of confidence over her underlying awkwardness and uncertainty. As she starts to turn and leave I put my hand on her arm and she looks back at me.\n\n\"Roz, would I be right thinking you've not tried to chat up a woman before?\" She bites her lip and nods. \"Please, sit down; I didn't come here looking to meet anyone but we can at least finish our drink together.\" She hesitates and then sits.\n\n\"Thanks. Sorry, I didn't mean to insult your friends or you.\"\n\n\"No, I realize that. You were just a bit, I don't know... Like you were talking as if you knew it all but without really understanding, sort of... Anyway, I'm actually quite impressed: I'd never have had the guts to come somewhere like here on my own and try to chat up a woman I didn't know.\"\n\n\"I didn't do a very good job, did I?\" she replies but I can see she enjoyed the compliment.\n\n\"I've heard worse approaches, though, uh, usually from guys. So: you picked me because I'm on my own and because I'm dressed like this, I assume.\"\n\n\"You're, um, very attractive too,\" she blushes prettily.\n\n\"Thank you. You're very lovely too,\" I assure her, \"but you've never been with a woman?\" She takes a large gulp of her whiskey, draining the glass. \"Would you like another?\" I ask, pointing to her empty glass.\n\n\"Please,\" she nods. Once she has her refill and I have another beer, I pose the question of her experience again. \"I've wondered about it since I was a teenager; there was always a, a, an interest in girls, women, but I've never acted on it before now. I've always suspected I might be bisexual, so...\"\n\n\"So you want to find out for sure,\" I finish for her and she nods. She's a little more relaxed and manages a small smile. I notice she really is quite cute. However, even if I was on the lookout, getting involved with a bi-curious woman? NOT going to happen! Still, I ought to be kind and support someone trying to understand their sexuality.\n\n\"That was the idea,\" she admits. \"I guess I don't have much idea of how to know if a woman is lesbian and much less how to approach her.\"\n\n\"Well, you started off okay; the comment about the whiskey was a good start and even finding out if I was on my own was fine -- a good idea actually -- but then you seemed to be criticising Kayleigh and Emma for leaving me. I think a simple, 'Can I join you?' would have been better.\" She nods, then holds out her hand.\n\n\"Hi, I'm Roz, do you mind if I join you?\" she smiles as I shake her hand.\n\n\"Sure, no problem; I'm Mattie. Is this your first time here?\"\n\n\"Yeah. Slightly terrified actually but also more than a bit excited to be doing something I've wondered about for so long. So, you're not with anyone, I mean, not in a relationship?\"\n\n\"No, and sorry Roz, but I'm not looking to be, not at the moment.\" I can see the penny drop for her: a single woman dragged out to a nightclub by her girlfriends so maybe she can meet someone... the same story, whether you're straight or gay.\n\n\"I think I understand. Okay, that kind of makes it easier; we can just chat.\"\n\n\"Absolutely,\" I tell her. \"So what does Roz do for a living?\"\n\n\"Oh, I'm an architect, a junior in the practice of course. Mainly housing developments, but I did most of the design work on a small warehouse and office for a company a few months ago. What about you, Mattie?\"\n\n\"I'm a sparks, an electrician. I guess that kinda makes me a bit of a tomboy-lesbian stereotype; you know, a woman in a man's job, but I wanted to do something practical that also used my brain and my Dad suggested it. He's a plumber but said that being a sparks was cleaner and less smelly!\"\n\n\"There can't be many women in your job.\"\n\n\"No, not many, though there was one other girl on the apprenticeship. We both had to work hard to prove we weren't useless girlies.\" I give a little laugh. \"She was straight and in some ways, she got more hassle with the boys trying it on with her. Dressing and looking like I do made it a bit easier to become one of the lads, I guess, though there are always sexists and homophobes, unfortunately.\"\n\n\"There are quite a lot of women architects these days, although the older, senior ones seem to mainly be men. One of the senior architects at work is an openly gay man and he seems quite accepted. I guess seeing lesbian women more and more in the media has sort of helped me in deciding to do this, to explore my other, erm, sexuality. Here, can I get you a drink?\" Roz asks and I accept another beer.\n\nWe continue to chat and I find she's quite good company. Our shared involvement in the building industry helps, but she is also friendly and has a self-deprecating humour that is so unlike the persona she tried to project when she first approached me.\n\n\"The worst mistake I've made at work?\" I repeat her question, buying time to think. \"Um, well we had some work in a school IT room and there was a run of power sockets along one wall so I placed all the sockets out and went and wired each one then started screwing them to the wall; except that I found I'd wired all ten of them upside down! What about you?\" I ask as she laughs.\n\n\"Let me think... Um, there was this one time when I managed to...\" \n\n\"Well, so much for one drink and then you'd come and dance!\" Kayleigh's voice interrupts Roz. \"That looks like your third drink at least. Hmm, and you've found a new friend I see, Mattie.\" Roz is startled by the interruption; I am too, but my surprise is quickly replaced by annoyance at the smirks on Kay's and Em's faces.\n\n\"Cut it out you guys,\" I warn them. \"Roz, this is Emma and Kayleigh, self-appointed and over-enthusiastic keepers of my emotional wellbeing and remaining sanity.\"\n\n\"Whom you love dearly and wouldn't be without,\" Emma points out, grinning.\n\n\"Which is also true,\" I concede. \"Kay, Em, this is Roz, a... newbie,\" I look at her and she nods.\n\n\"In, er, every way,\" she adds. I glower at the terrible two, willing them not to say anything inappropriate or embarrassing to Roz. Remarkably, this seems to work.\n\n\"Hi Roz,\" says Emma who leans in to kiss her cheek as Kayleigh gives a little wave and also says hello. \"So why don't the two of you come up and dance?\" Emma asks. I look at Roz, feeling I should let her decide if she wants to go. She seems quite keen, so we all head up to the thumping darkness of the nightclub. \n\nWe merge into the crowd on the dance floor, as I pick up the rhythm of the song and begin to move in time. I've never been the world's greatest or most flamboyant dancer; when I get into it I quite like the way the music and my body's movement makes me feel, but mainly I dance just to be with my friends. Roz, on the other hand, is remarkable: confident and accomplished she moves beautifully and artfully. Kay and Em notice this and follow with bolder and more adventurous moves than usual. Even I feel the pressure to up my game a little so as to remain part of the group.\n\nOne song shifts to another and the three of us fall into the habit of waiting for Roz to set the pace and nature of the dance before we follow. Despite, or maybe because of this, I'm having more fun dancing than I have in a very long time. For once I don't cry off after the first few tracks.\n\nThe song changes yet again, and I do not register the change in tempo, waiting as usual for Roz to respond, which she does: she turns towards me and her hands slip around my waist as she sways in time to the slow rhythm of the love song. Instinctively I reciprocate, and we interlock, our bodies moving together in synch to the music. My eyes close as the heat of her body presses against me, the soft swell of her breasts on mine. Her head moves to rest on my shoulder and I reach up to stroke her hair. \n\nThe feeling of slow dancing and being held takes me back to a happier time. Oh, Lisa, I've missed this... but instead of Lisa's silky, straight hair, my fingers caress Roz's soft, curly locks, and I tremble. Lisa is not here, she is with her new girlfriend somewhere. So why do I feel like I'm being unfaithful to her? At the same time, there is anger, my mind's eye seeing Lisa kissing that blonde bitch, and fear; fear of Roz's evident attraction to me. I feel panicky: my heart racing, my breathing fast and shallow; I need space and time to calm down and to think, not this hot, loud and pulsating room. I step back, so suddenly that Roz stumbles. \"I'm sorry, I can't do this. Sorry, Roz.\" I tell her loudly before turning quickly; my arm bumps Kayleigh, and she and Emma break their embrace to look at me as I move away.\n\n\"Mattie? Wait, Mattie...\" Roz calls loudly but I do not stop. I am trembling and panting as I flee downstairs and outside, walking quickly away through the people milling on the street in the warm night air, laughter and shouts and the sound of traffic doing nothing to calm me. I glance over my shoulder and see a black cab, a haven of solitude and calm. I hail it and when it pulls over and the driver asks, \"Where to, luv?\" I automatically give my address before flopping onto the wide, worn seat at the back. I hug myself, trying to steady my breathing and not cry. I feel so useless.\n\nI arrive home, pay the driver and get out. As I walk towards the door I glance up; Veena's light is on and I consider going up and knocking on her door. She'd hug me and listen to me and take care of me, I'm sure because she has such strength and kindness. No, I can't: it's not fair to keep crying on her shoulder every time I become an emotional screw-up. I'm inside and I realise that my feet have taken me towards the garden and my smoking spot even as my left hand has pulled the packet of fags from my jacket pocket. Why am I so fucking incapable of sorting myself out? Why do I need Veena or cigarettes or Em or Kayleigh or alcohol for everything? For a tough, independent tomboy, I'm pretty bloody feeble.\n\nEnough! I crush the cigarette packet in my hand and I stomp upstairs. I need to stop this, once and for all. As Veena pointed out weeks ago, Lisa has gone and the person I keep remembering doesn't exist because Lisa is different now, a stranger to me. \n\nI treated Roz badly tonight, I guess... although I had told her I wasn't looking to hook up, which means she had no right to expect anything, right? Still, she was cute and we were getting along very well. No, best to remember that she's experimenting and I'm not sure I'm up to dealing with the emotional conflicts that might come up. I did like what I'd seen of her though.\n\n<center>+ + + + + + + + + + + + + + + + + + + + + + +</center>\n\nI slept surprisingly well, all things considered. After breakfast, I am in desperate need of a cigarette but when I go to my jacket I'm faced with a crushed packet containing three pulverised cigarettes. Oh, yes: last night I decided to sort myself out and stop relying on things and people to prop me up. However, the thought of going cold-turkey on fags is, frankly, terrifying! As I stand, contemplating the sad remains of my ciggies and a scarily nicotine-free future, my phone beeps with the arrival of a text. It's from Veena:\n\n<center>No milk so off to shops. <br>\n\nDo you need anything?</center>\n\nI text back immediately: 'Yes, your company -- please!' Two minutes later there is a knock on the door. \"Are you okay Mattie?\" Veena asks the moment I start to open the door. I let her in, telling her I'm okay, sort of. She walks through the hall into the main room and notices the crushed cigarette packed where I left it on the table. \"Oh, what happened to your cigarettes?\"\n\n\"A sudden rush of determination to sort myself out,\" I tell her ruefully. \"I sort of decided not to smoke any more last night but...\"\n\n\"Second thoughts?\" she suggests, smiling.\n\n\"Yeah, definitely! I don't know that my willpower is anywhere near strong enough. I...\" I was going to say 'I can't even go out for an evening without getting upset,' but I realize that I'd end up telling her everything that happened, and that would be no fairer this morning than it was last night, so I end with \"...get frustrated with how feeble I am sometimes.\"\n\n\"Mattie, you're not feeble at all, I think you're... brilliant. Um.\" She seems unsure of something before smiling suddenly. \"Anyway, giving up smoking is hard. You could try one of these,\" she pulls her e-cig out of her pocket.\n\n\"That may not be a bad idea if they help, but you're still smoking yours after months,\" I point out.\n\nVeena laughs. \"Very true, but part of the reason for that is that it's a good excuse to join you when I see you go out to smoke, like when we first met.\"\n\n\"Veena, my dear girl, you never need an excuse,\" I tell her, taking her hand, \"surely you know that? You're a really good friend, maybe the best.\" She looks at me in surprise.\n\n\"What, better than Emma and er, Kayleigh?\"\n\n\"Well, you don't insist on dragging me out to gay clubs so I can meet people!\" I tell her and she laughs but I sense a little embarrassment too. \n\n\"No, and nor am I ever likely too, though, I mean, if you ever, um you know, needed someone to come with you, I mean, if it would help then I, er, could...\" Wow, that was unexpected but very kind, as I can see how nervous she is with the idea.\n\n\"Veena, that's very sweet of you, but I couldn't ask you to become my fake girlfriend. I like you too much as my friend to do that to you.\"\n\n\"Well, I love you enough as my friend to do it, just remember that,\" she insists, squeezing my hand back as a brief but comfortable silence falls between us. \n\n\"Did anything happen last night,\" Veena asks after a while, \"anything, you know, upsetting for you?\" Damn, this woman is too perceptive and knows me too well. I decide to give her the abridged, simplified -- and less shameful -- version.\n\n\"Kind of. I met a woman last night, Roz her name was. It was her first time there... her first time, well, anything actually as she's never had a girlfriend. She said she's always been interested in having a relationship with a woman, but had never done anything about it -- until last night.\" Veena nods, listening intently. \"Anyway, we got on quite well together and we danced, but when the slow dance began I suddenly knew I wasn't ready for a new girlfriend, certainly not a bi-curious woman who wants to explore her sexuality. I sort of walked out on her,\" I conclude awkwardly. \"Actually, I more sort of ran out. I was a bit shitty to her really, but as I said, I'm really not sure I can cope with being a bi-curious girl's experimental first girlfriend.\"\n\n\"Oh poor you,\" Veena sympathises. \"Can you call her and say sorry? Explain you're not ready for a girlfriend?\"\n\n\"Well, I don't have a number for her; I don't even know her surname. I should apologise but it looks like I can't.\"\n\n\"Mattie, you know you can't keep running away from new relationships because of Lisa.\"\n\n\"I know, but it's hard... almost as hard as giving up smoking!\" I say in a feeble attempt at a joke.\n\n\"I can't help you find a girlfriend, but maybe I can help with your smoking, Mattie. How about you try using an e-cig and vaping and together we try and give up? It was why I started originally.\"\n\n\"Okay, it's a deal. Now, I need to buy one, so will you come and help me?\" I ask.\n\n\"Sure. I was going to go and do a bit of shopping anyway, so that would be good,\" she tells me and I get ready to go. \n\n<center>- - - - - - - - o o O o o - - - - - - - -</center>\n\nRaveena's Diary\n\nFriday 16 May\n\nKatie came over for the evening. Her flatmate, Judith, had a romantic evening with her boyfriend planned and wanted the flat for just the two of them. When Katie told me, I felt obliged to invite her over and spare her an evening shut in her room pretending, like Harry Potter, to not exist. In return for my hospitality, Katie had promised to order us in some food.\n\nA little while before Katie was due, Mattie popped up to see me and return the book, 'We Were Liars'. She had come straight from work, so she was dressed in her typical work attire: worn and dusty olive cargo pants; a similarly worn and dirty blue polo work shirt with 'e e smith electrical' and a horizontal lightning bolt embroidered on it in yellow thread; work boots with toecaps so scuffed and dirty that they were almost white rather than the original black and her hands and face grubby. Somehow this all suited her, made her look rugged, in a way that contrasted with the delicacy of her features, and the overall effect was, well, adorable.\n\nI invited her in for a cup of tea and, as she passed close by, I could smell her: the sharp mineral tang of the building site dust, the salt-sour of her sweat, the faint musk of her deodorant and the underlying scent of her skin. Does the fact that I liked the smell of her make me weird? \n\nWith tea made, we sat and chatted about the book, another impromptu meeting of our two-woman book club. She claims that she worked out what was happening three or four chapters before the end. \"It was obvious, the weird stuff happening, it had to be.\" I did express a degree of scepticism at her claim. Certainly, when you reached the end it was obvious but before that? However, she stuck to her claim and I felt that friendship required that I believe her. \n\nOur discussion was interrupted by Katie's arrival. I introduced the two of them to each other. Mattie seemed relaxed enough but Katie seemed tense and wary. Mattie said she had to go and we hugged and I kissed her cheek as usual. However, when I turned back to Katie as I was closing the front door she was looking at me as if I was crazy. I asked her what the matter was.\n\n\"That woman. I mean she has to be a dyke!\" she said loudly. \"Raveena, I can't believe the way you kissed and hugged her,\" she looked at me with a worried expression, \"I mean, are you and her..?\"\n\nI could hardly believe what she was asking. but I was more upset by the judgemental and unpleasant way she spoke about Mattie than with the suggestion I might be gay. \"Katie!\" I almost shouted at her and then hesitated, unsure of what to say. I took a steadying breath and, a little more calmly, explained that Mattie is my friend, a very good friend and, yes, Mattie is gay but so what? That didn't make her my girlfriend or lover any more than Mike or Colin being her friends made them her boyfriends or lovers. I realized that my voice had risen again and that the front door was still ajar so I shut it and took another deep breath before continuing more quietly. \"Do you have a problem with my being friends with a lesbian?\" I asked."
    ],
    "authorname": "ScattySue",
    "tags": [
        "romance",
        "friendship",
        "first time",
        "experiment",
        "oral",
        "love",
        "caring",
        "massage",
        "dating",
        "uncertainty"
    ],
    "category": "Lesbian Sex",
    "url": "https://www.literotica.com/s/old-neighbours-become-new-friends"
}
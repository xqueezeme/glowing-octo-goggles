{
    "title": "Protecting Les",
    "pages": [
        "I'm Mallory -- Mal to just about everyone -- and I made the mistake of introducing my best friend, Les, to Beth, a woman from work. I knew it was a bad idea and I told Les it wouldn't work, but he insisted. What did he have to lose? he argued. If it doesn't work, then it doesn't work. But I didn't want him to get hurt. I've known Les for ten years, ever since I moved here from Canada and was the super shy new girl in 10th grade homeroom. We met the first week of school. After I overcame my shyness, we became buddies -- I could talk to Les about anything -- and helped each other survive high school. I moved back here a couple of years after college and bam, we were best friends again, like I'd never left. I was substitute teaching until I got my new job, which is where I met Beth. When I needed to find an apartment, it was Les who got me into one right next to his. And it was Les who put in a good word with the landlord, helped me move in, unbox my stuff...everything. He's that kind of guy, always there if you need something. It may sound meaningless -- I know it's too easy to say it and not mean it -- but he's a sweetheart. And Beth wasn't a good match.\n\nLes and I saw each other almost every day. We were running partners, 15-plus miles a week. Neither of us cooked much, so we often shared takeout, usually at his place. He loved old movies and had a great set up -- big screen, sound system, huge poofy chairs, kind of a guy thing. Les was a software designer and classic films were his hobby. It was how he unwound. At least once a week we would hang out and he'd riff on old movies, most of which he'd seen more than once. He always knew who wrote, directed, produced -- all that stuff. I learned a lot and Les could be viciously hilarious talking about movies he didn't like.\n\nI guess when things started to change was after I broke up with my boyfriend, He Who Shall Not Be Named. On second thought, let's name him; we'll call him Shithead. After we broke up, I was pretty down for a while and not very easy to be around, so Les suggested we have a party to cheer me up. Not a party, really, more of a drop-in-if-you-want-to thing, an open house. He invited some of his friends, I invited some of mine, we opened both apartments, had coolers of beer, wine, some munchies, Marx Brothers, I think, on the screen -- very casual. Les thought maybe I'd meet someone. Instead, that's when he met Beth.\n\nLike I said, I worked with Beth. She was a little older and ran a team in Sales. My team did Fulfillment, so we saw a lot of each other. She was lively and social (Sales, right?) and went out with lots of guys. I swear it seemed like a new one every month, and she'd go back and forth between them. She didn't brag about her love life, exactly. But she's kind of sassy, likes to talk and she's matter-of-fact. If you asked her who she went out with, she'd tell you. If you asked what they did, she'd tell you. People at work loved gossip, so they would even ask if so-and-so was good in bed and, you guessed it, she'd tell you. I have to admit her stories were entertaining until Les got involved.\n\nI don't know who found whom, but it seemed like Beth and Les spent the whole party together. Talking and laughing, they pretty much ignored everyone else -- probably quoting movies to each other. The next day we went on our usual run and Les started asking me about Beth. You know, Beth, Beth, Beth. How long had I known her, what did she like to do, did she have a boyfriend, and so on. He even told me she looked like Katherine Ross. He adores Katherine Ross in The Graduate and Butch Cassidy, so I knew he was seriously crushing. I was surprised, honestly. First of all, she does NOT look like Katherine Ross. If anyone does, I do (that is, if Katherine Ross wore glasses). Maybe Amy Adams -- Beth's pretty, I admit -- but Katherine Ross she is not. I tried to be helpful and answer Les's questions, but I didn't want to get his hopes up. Even more surprising, then, was the next day at work Beth did the same thing -- she found me at lunch and wanted to talk about Les. She was not as excited Les was, but clearly interested.\n\nAfter Les nagged me non-stop, I agreed to invite Beth to my place one evening so Les could just casually drop in with a bottle of wine. I knew what she liked. And I, of course, would just happen to have ordered a little extra Thai. After that, and a couple more meetups, they started seeing each other. Soon they acted more or less like a couple. I couldn't believe it when Beth referred to Les as her boyfriend -- actually she said 'one of my boyfriends' -- a bad sign.\n\nLes and I kept running together, but otherwise I saw less of him. I gathered it was because he was spending time with Beth. We always talked on our runs, about all kinds of things. But when he started fishing for hints about what Beth said about him, I stopped him. \"Hey, I'll make you a deal, Les. If you don't ask me what she says about you, I promise not to tell her what you say about her.\" He laughed but pointed out, \"Hey, I don't say anything bad about her, so why would I care?\" He had a good point. I was a lot more worried about what Beth might blurt out about him, especially about bedroom antics, if they'd gotten there. I really didn't want to hear it.\n\nI didn't want to hear it, but I did. One day Beth was talking casually about some recent date. She hadn't mentioned Les by name, but I was pretty sure that's who she was talking about. She was really enjoying herself as she described how they were on third base when she called it off. Why? \"His dick was way too small!\" She lowered her voice, as though telling a secret. \"There was no way I would fuck him. Seriously. It's ridiculous!\" Ouch! Poor Les. There were two women besides me in the break room and they loved it, which egged her on. \"In fact, if he wants to stay with me, I'm going to lock up that puny dick.\" The other two were in hysterics. Not me. I must have looked shocked. Looking right at me, Beth said, \"I've already ordered the cage.\"\n\nPoor Les. I had figured it would end badly. It wasn't enough to just break up and leave it at that, she had to insult him. I mean, how bitchy is that? I kept waiting for Les to tell me they were through. When he didn't, I decided he must be really bummed and just didn't want to talk about it. Two days later, Beth showed me the cage at work. Like I wanted to see that. She said, \"I thought you might be interested.\" Uh, no. But I couldn't believe she bought one. I thought she was kidding or just bragging because she had an audience. You know, empty talk. But she had the actual thing. It was stainless steel and really small. She showed me a little lock and key. When I shut my eyes, she said, \"Well why didn't you tell me he had a tiny dick?\" Like I would know. I walked away. She laughed and called after me in a sing-song-y voice, \"Next time you see him, he'll be wearing it!\"\n\nWell, she was right, though I heard it first from her, not him. She told me she would be over at his place Saturday and why didn't I come over. She would make him show me. She lifted a thin gold chain around her neck to show off the key, swinging it like a little pendulum.\n\nOn our run that Friday morning, I felt I had to say something to Les even though I had promised to stay out of it. It was a little easier because weren't looking at each other, just running. I blurted out, \"Beth told me she made you wear some cage thing. Bullshit, right?\" Les laughed uncomfortably. He eventually said, \"Well, I'm sort of trying it out. What's the harm?\" I ignored the question, if that's what it was, and we kept running. Finally I said, \"She invited me to join you guys tomorrow. No offense, but I'll pass.\"\n\nSo I didn't go that Saturday and things were sort of normal for a while, but then Les himself asked me to join them on another Saturday. He said Beth was bringing a friend with her and I got the impression that the friend was supposed to be for me. I wondered cynically, is this Beth's way of being nice to me? Great. Is the other guy locked, too? How's that supposed to work?\n\nHer friend's name was Brian, and he actually seemed like a good guy. Good looking, easy going, funny. As for Beth, she was surprisingly turned out -- linen skirt, coordinated tank top and button shirt, liner and gloss, and sure enough, she was wearing her little necklace and key. Sheesh. We had takeout barbeque, Les put Chinatown on the screen, and we all sat down to chat and only half watch the movie while we ate. Les had only the two big chairs, but okay, they were big enough to share. Except Beth took the chair with Brian! Not that I minded -- I wasn't looking to claim Brian, but then they started getting touchy with each other. Beth's hands never left him, and the two of them were whispering and giggling. Before long, she was practically in his lap with her tongue in his ear. I swear I wasn't jealous, but come on, she's supposed to be Les's girlfriend. After half an hour, Beth got up, pulled Brian out of the chair, and dragged him to the bedroom! It had to be the bedroom -- I heard the door close. I gawped at Les. WTF?! He shrugged his shoulders like 'what am I supposed to do,' and pretended to watch the movie.\n\nI wanted to leave but that would have been pretty rude to Les. So I stayed for moral support but kept craning my neck towards the bedroom, muttering over and over 'I cannot f-ing believe her.' Les just sighed and kept watching Jack and Faye. After a while -- too long a while -- they returned or, I should say, Beth did. She said nothing about it, just that Brian had to leave and had let himself out. Like it was no big deal. I was going to start hollering at her, but Les spoke up so I stayed mum.\n\n\"Hey, we missed you, Beth.\" [God, why didn't he slap her!]\n\nShe tossed her head carelessly. \"Is that so?\" Then she smirked, \"You had company.\"\n\nLes went with it (why, Les?). He nodded and said, \"Yeah, we had a little fun.\"\n\nShe glanced at his groin, then at me. \"Hmph. I'm sure.\"\n\nLes said sarcastically, \"Hey, my tongue's not locked.\"\n\nI gagged. What?! I froze. Beth gave me a look, but I had no idea what she thought. She glared at Les and then walked right up to his face, challenging him. \"Okay, then give me some, Lover Boy!\" She pushed him down by his shoulders -- to his knees -- then lifted her hem and pulled his face into her crotch. \"Lick!\" she ordered. After a few seconds she loosened her grip on his hair enough to pull her panties aside. \"Open wide, lover!\" she said and started grinding -- I mean serious grinding -- on his face. Are you f-ing kidding me?! I mumbled something about it being time for me to leave but I doubt either of them heard me. I grabbed my phone and scrammed.\n\nBeing home felt completely weird because I knew very well what was happening right next door, only a few yards away. Mind you, I didn't say I understood what was happening, but I couldn't get the image out of my head. And so here's other strange thing. I ran straight to my bedroom, dragged off my jeans, and started jilling like crazy.\n\nThis is anonymous, so I might as well confess. I masturbate all the time. Constantly. Once I figured out how to do it, and what happens if you do it right, I couldn't stop. I live for orgasms. There are three kinds. Mainly just 'small' and 'large,' but they're all good. Small is like a perfect salted caramel, or the buzz from a glass of champagne except the buzz is in your clit and spills all over you. It makes you coo and sigh and love the world. Large is more intense and, well, bigger (duh). It makes you moan and groan and clench and not really care about the world. The third type is the best and it's rare. It's like a whole-body orgasm. Front and back, top and bottom, inside and out. My pussy gets just...fried -- like it's one enormous clit; my butt seizes up, my boobs throb, my nipples twitch, my abs crunch, my legs shake; I can barely breathe and have to gulp for air. If there's anything in my bladder, it's coming out. My eyes shut tighter than tight and I see red. My toes clench and cramp. If there was anything in my butt, like one of those old-timey thermometers, I swear it would break in half. That's how hard I come. It's incredible. I call them 'tsunamis' and like I said, they are rare. If I have one in a week, it's an awesome week. One a month is more like it (and I'll take it).\n\nI didn't have my first tsunami until I was 20 and had been jilling for years. It took me totally by surprise, but whoa, did it ever get my attention! I have been trying to have them ever since. That's how I got to be a regular masturbator. You have to keep doing it, you can't pass up that morning rub or that bedtime jill, because what if this is the one? You never know when it might come. You probably figure that makes me a total slut, right? Or like Beth, always looking for the next guy. Not at all. First of all, I'm shy. If I go to a bar, I might have a drink, two at most, but I'm too bashful to talk up strange guys. After a couple of hours, I realize how much time I just wasted. I could have been home having a tsunami -- with time left over -- but no, I went to a stupid bar. And second, I'd rather be alone. A tsunami while I was with someone would be mortifying. Can you imagine, I'm spazzing out, probably swearing, maybe peeing and tooting, foaming at the mouth, a total animal. And I want someone to see me like that? No way. I would die.\n\nSo it turns out masturbation is really the way to go. Do it yourself. I'm a perfectly normal, high functioning person the rest of the time. I'll be jilling for the rest of my life, hoping to find the next big wave, but I'll be doing it alone, even if I get married. I have learned a couple of other things about tsunamis, though. First, the right toy can really help. My favorite is one my sister Dana brought me from Finland. It's basically a super-soft three-fingered glove, very flexible, with a small disc that fits in your palm and a strap around your wrist. The glove fingers have all these special wires or fibers -- the company calls them 'tendrils' -- and when you turn the thing on, they all just purr. It's amazing, like turning your favorite fingertips into living vibrators. It has some Finnish name I can't pronounce. I just call it my Glory Glove. About a month after Dana gave it to me, she called and asked if I had tried it yet. I said something like, 'Oh, no, I keep meaning to...' When the truth was, I had practically worn it out.\n\nThe second thing is mental. Thinking about something romantic or erotic might get me off with a small orgasm, and that's fine. But I'm more likely to have a tsunami if the movie in my head is nasty or taboo -- something brazen, over the top. Doesn't guarantee a tsunami, but it's a better trigger.\n\nThat's why I had to rub off after the scene with Beth and Les. I mean, my God, she took another guy to Les's own bedroom, and did whatever they did (and Beth's not shy), then she forced Less to eat her out. And of course in my head, I'm imagining what might be in there. All this, while his dick is locked up and the key is around her neck. And in front of his best friend. Talk about brazen! And yes, nasty. It totally filled my head -- me on my bed with my legs splayed, madly strumming my V with the Glory Glove. And no, I didn't have a tsunami (I was so hopeful) but I did have two good orgasms.\n\nAfter I put myself back together, I felt incredibly guilty. God. My friend had gotten utterly used and dissed, right in front of me -- and he knew I had seen it. Yet there I was using the scene to get myself off. How selfish is that? No way to treat a best friend, for sure. Poor Les. I could only guess whether they had broken up on the spot or were still having a huge fight. Les and I were supposed run Sunday morning. I assumed he would skip it and that was more than okay by me. I would leave him alone. But when I came out to start the run alone, there he was stretching by the walk. I'm not going to lie -- it was awkward, but it got a little better once we were on the road. Eventually I said something lame like, \"Really sorry about last night.\" He just sort of grunted. I tried to sound supportive and positive. \"Best to break up and be done with it, you know?\"\n\nHe understood we were not on the same page, but I did not, until he said, \"Well, we'll see what happens.\"\n\nI was shocked. First, evidently neither of them had dumped the other, and I did not see how that was possible. Which leads me to: Second, I obviously didn't understand either one of them, especially Les. I don't know if I was yelling or pleading, but I said to him, \"Les! Come on! She cheated on you. In front of you. And then made you...you know. How is that not a deal breaker?! And she has you locked. She flaunts the goddamn key!\" Then I clammed up.\n\nLes sighed. He ignored the part about cheating and focused on the lock. \"I wish you understood, Mal. I mean, I wish I could explain it to you.\" [Yeah, me too.] \"Beth locking me up? That's like her saying -- no, it's her proving -- that she wants me. Wants to own me. She's denying the whole world access to me. Which means I belong to her alone. To me...well, that's sort of incredible.\" He was fumbling and I didn't interrupt, but I thought he was full of BS. Then he said, \"And fooling around with Brian? I get what you're saying, I guess. Trust me, I don't love it. But she put the lock on me, not him. She may want to play with him, but she wants to own me! Does that make any sense?\"\n\nI didn't answer but I was thinking, hmm, well, no, Les, it doesn't. Let's see: number one, she's a two-timing bitch. Number two, she doesn't love you. Number three, she's using you and laughing at you behind your back. Number four, you're too good for her. I said none of that, of course. I wondered how many people wished they could say exactly all that to their best friend but don't.\n\nLes said, \"I hope someday it will make sense to you, Mal, but meanwhile, I need you to not be mean to Beth, okay?\"\n\nI still said nothing, so in the silence he nudged my arm and tried to crack a joke by quoting a movie: What we have here, is failure to communicate. I didn't feel like joking so he dropped it but asked again, seriously. \"Hey, okay? For me?\"\n\nI mumbled okay, but he knew I wasn't happy.\n\nThe next day I was still very mad at Beth. I wanted to go into work and scratch her eyes out or slash her tires (yeah, not very creative, I know). But I had promised Les I wouldn't be mean. Fortunately, she wasn't at lunch or breaks and I hoped I wouldn't even see her. That would great. But she confronted me in the parking lot as we were leaving. She marched right over to me. \"Did Leslie go down on you? Yes or no?\" she demanded, just like that.\n\nWell, hello to you, too, Beth. I stared a second -- gave her the stink eye -- but then just said, \"No.\"\n\n\"He's got to make up for that!\"\n\nWait. What? \"Beth, no. Nothing happened, I swear.\"\n\n\"I heard you. But he lied to me. He has to make it right.\"\n\nI should have just left, but I was frustrated and tried to explain, \"No, Beth, he didn't lie. All he said was that his tongue wasn't locked. That wasn't a lie.\"\n\nShe gave me a haughty look. \"What are you, his lawyer now? He tried to deceive me. He implied it. It's the same thing.\" As she walked to her car she said over her shoulder, \"Anyway, I figured he had to be fibbing. He had no clue what he was doing with his tongue.\" As she drove away, I was thinking, 'Yeah, well, what about what you were doing?' Bitch.\n\nNext time I saw Les I could tell that something was bothering him. We were in my kitchen and he was nervous and fidgety. Pretty soon I found out why. It turned out Beth told him he had to go down on me!! Truth. According to her, he claimed he'd done it when in fact he hadn't, so now he had to do it for real. Besides, she pointed out (I could just see her evil smirk), maybe he would actually learn something, enough that someday she might possibly, maybe-but-maybe-not, allow him to lick her. I was so fried. This is why you can't be nice to Beth. Here she was, trying to manipulate Les and me. Like she was going to prove her power over both of us. Sorry, not happening. And plus, what a total freaking insult: I'm supposed to be the practice dummy and she's the holy prize? He should learn on me, the better to satisfy her? No, no, and no. And aside from that, what the hell was Les even thinking? How dare he tell me all this even if she actually said it? I was pissed and suggested he should leave. He did, after apologizing. Steamed as I was, I admit that I rubbed off later, thinking about someone -- okay, Les -- licking me and, okay, I came. But I was still pissed.",
        "The next day, Les apologized again, by text. He promised he wouldn't suggest going down on me, absolutely swear to God. But, please, he really needed to learn things, because he really hoped that one day Beth would let him do her. Would I help? Please? Could we at least talk about it? Could he just ask me questions? He didn't have anyone else to ask.\n\nI agreed reluctantly, for two main reasons. One, I was already masturbating to fantasies of Les licking me. Since I couldn't stop thinking about it, I felt like a total hypocrite: that I would refuse to have a mature conversation about cunnilingus, while the whole time I was secretly jilling about it. And two, Les sincerely wanted help. So I told myself, okay, this would be for Les and not AT ALL for Beth. Still, I was too embarrassed to talk about it in person, so we started with texts and emails. I told him that first he had to know female anatomy -- go learn what was what and don't come back with questions until you know the geography, thank you very much.\n\nWell, Les got into it. Les makes his living analyzing problems and designing solutions, and he's good at it. He asked me questions I had never thought of and couldn't really answer. Some were not even about oral; some were just about what women want. Did I have a G-spot? What kind of foreplay was best? What was essential? What did men most often do wrong? What made me want to dope-smack them? What was my most sensitive spot? What did I crave most often? What had no one ever done that I wished someone would? You get the idea -- basically, here was a creative, inquisitive mind asking totally embarrassing questions. Some were specific. Like, okay, if someone was licking me, was it better up-and-down, or side-to-side? Circular? Where -- on the clit or off? I mean, come on, I don't even know.\n\nI didn't know because no one had ever done it for me. I barely knew more than Les did -- I knew how to masturbate, but that was about it. Shithead thought it was disgusting to go down on me, but that I should just love going down on him. Like a penis is holier than a vagina. Please. Needless to say, Les wasn't like that, and he tried to be delicate, not coarse, just wanting to learn. It was charming in a way. Unfortunately, I just didn't know what to teach him. And I hated the idea that some bitch -- Beth -- would be the beneficiary of whatever he figured out.\n\nThe turning point came when Les sent a long email with yet more detailed, numbered, ultra-polite questions about cunnilingus, including a link to a lesbian blog post. Frustrated, I thought all of a sudden, you know what, let's just do it. I sent him a text: u around? He was. Okay. I took a deep breath, screwed up my courage, took off my jeans and rummaged through my closet in top and panties, searching for my skirt. The only one I owned was a drab, shapeless peasant number (I'm a slacks, jeans, and leggings girl). When I found it, I put it on and barged into Les's apartment before I could change my mind. He was surprised. I asked him, \"Do you really want to do this?\" He looked perplexed at first (like, 'do what?') but he nodded. All right. I sat down, lifted the skirt and invited him in. I should have skipped the underpants, but they weren't a problem for long. \"Let's go.\"\n\nLes was surprised, but he went with it and started smooching, tentatively at first, but then just... licking. Wow...licking. He was inexperienced, but whoa...wet licking. I had imagined giving instructions, you know, calmly directing him in the spirit of education and then we could be done. But, God...Licking. Without either of us saying a word, but with Les going like a machine and my pussy starting to glow, I realized what was going to happen. I was going to come. Faithful Les kept licking and I got closer. Still licking. Suddenly I pushed him away, stood up, and cringed, covering my pussy with my hands. Basically, I panicked. I could barely talk. I needed to get out of there before it happened. I mumbled 'sorry' and ran out like a little girl racing to the potty.\n\nBack in my apartment, I started rubbing, afraid I had lost it. There's this fine line... you can lose an orgasm if the moment passes, and I was worried it had. I hadn't wanted to come in front of Les, but having gotten this far, now I really, really did. Fortunately, it wasn't too late. I had a sweet little climax. Petite, but lovely. As I relaxed into the after-orgasm, Les texted me. I remembered my panties were still over there and got embarrassed all over again. Was that what he was texting about?\n\n- U ok?\n\n- Fine. No worries [But hmm, how do I ask for my panties back?]\n\nOn our run the next day Les was still concerned that either I'd had a problem or he had done something wrong. I made light of it. Nah. No big deal. \"Then why did you leave?\" he asked.\n\n\"I just needed to do something.\" I hoped he would drop it if I hinted at something personal. Like having his face in my crotch wasn't already personal.\n\n\"In the middle of that? You needed to 'do something'?\"\n\nI blushed and confessed. \"Okay. I was afraid I was going to come.\"\n\n\"Really?\"\n\nI didn't respond.\n\n\"I made you come?\" He was getting more interested, not less. \"So it was good?\" Now he was getting proud, at least hopeful.\n\n\"Let's drop it, okay?\"\n\n\"But why did that make you leave?\"\n\nI got exasperated. \"It's embarrassing, Les.\"\n\n\"Oh.\" He grinned. \"But isn't that what's supposed to happen? Isn't that the whole point?\"\n\n\"Can we please not talk about me coming?\"\n\n\"Okay.\" But he couldn't drop it. \"But you did, right?\"\n\n\"Les...\"\n\n\"Sorry. I just...I mean, I'm trying to get good at it. That's all.\" We ran a little farther. \"You're a good teacher.\" Now he was teasing me.\n\n\"Les...\"\n\n\"Sorry.\" Then he added softly, \"It was really pretty.\"\n\n\"Huh?\" As soon as I asked, it dawned on me that he was talking about my pussy. Now that's embarrassing. I must have turned bright red, but at the same time it felt nice. I guess we were both happy. Wow. My pussy's really pretty.\n\nYou can guess what happened later when I was by myself. Again. I couldn't help it, thinking about Les's tongue. Who cared whether he knew what he was doing? It was a tongue, for God's sake. In my pussy. Licking! A tongue is so different from fingers. Or a penis, for that matter. It's erotic, but it's also such a cool little organ. Soft, warm, wet, flexible, oozy, wiggly. I took a gamble, put my skirt back on, and marched back over to Les's. Commando this time. I figured if Les took the hint, we'd have another lesson. If not, no problem, I'd just come home and do it myself.\n\nWhen I walked in, he understood without either of us saying a word. [Les is a smart guy.] He saw the skirt, looked at me, and raised his eyebrows. I nodded. Butterflies. We used one of the poofy chairs -- I just sort of sank into it, closed my eyes, and waited for him to lift the skirt. We were both less nervous this time. I let him start however he wanted -- whatever he thought he had learned was fine by me. He was probably wondering if I would run away again. I knew I wouldn't. Now I wasn't afraid to come -- I was hoping for it, practically counting on it, which was probably unfair to Les.\n\nOnce he got me warmed up, I did give instructions. \"Flat tongue. No, FLAT. No...yes, there. Yes, yes. Slow...slow, slower. EASY...Now pointy tongue, stiff. Okay. Yes. Like that...Just like that. Don't stop...\" At first I was calm, like I had imagined being the first time. Eventually I got so hot, I just blurted whatever. And I couldn't always say what it was I wanted anyway -- I just grabbed his head and moved it or jerked it or twisted it. I was creaming and probably moaning. Pretty soon I was, like, wearing his face. Without thinking, I lifted my shirt and got a hand under my bra to work on a nipple. Les couldn't see and anyway I didn't care if he did. God. I was going to come. Sometimes it sneaks up on you, but usually I know when an orgasm becomes possible, then likely, and then -- hallelujah -- you can't stop it. It just takes over. This was a pretty big one -- I was like falling through it, rubbing on Les's tongue like crazy, but falling, falling...then crash! Everything stopped with me gasping and spazzing, gripping Les hard, holding him still -- frozen -- rigid. He can't touch my clit again or I'll die. Hold it. Hold it. Hold...then ahhhh. It really is amazing. When I finally relaxed and pulled my fingernails out of his scalp, he looked so happy. His face was glistening. I was panting and sweating but he shouldn't have been, so the wetness must have been all me.\n\nHe grinned. \"Let me guess. You came, right?\" He was so pleased.\n\nI was too weak to laugh, but I had to smile. \"If Beth doesn't let you do that, she's insane.\"\n\nActually, Beth was insane, and she proved it just about every time we spoke about Les. The next time I saw her was at a company off-site. It lasted all day and everyone was tired and grumpy by the time they opened the pop-up bars. Beth had been one of the presenters and looked totally played. She made a beeline for the wine bar, got herself a glass, and looked for a chair. I drew a breath and joined her, without a drink. Les told me that he hadn't seen her for a while, and I thought he was bummed out. I figured I'd see what I could find out. She wasn't in a very good mood, but she did speak right up.\n\n\"I heard Leslie finally corrected his mistake. How nice.\"\n\nFor Les's sake, I was determined not to get into a fight and so ignored the snarky comment. I said, \"Listen, Beth, why don't you give him a break, okay? He's been a really good sport.\"\n\n\"How would you know? And what sort of 'break' did you have in mind?\"\n\n\"Well, you call him your boyfriend. Why not treat him like one? Or at least be nice once in a while.\"\n\n\"Oh, I see. And just how do you treat a boyfriend? I suppose you think I should unlock him. Did Leslie tell you to ask?\"\n\nBitch. I shook my head. \"No. He wouldn't do that. But it wouldn't kill you, you know.\"\n\nShe took a sip of wine. \"I told you. I won't fuck him.\" Her eyes twinkled, like she had decided to enjoy this. \"Oh my. Mousey Mallory thinks Little Leslie deserves a fuck.\" She rolled her eyes. \"Even if I did it, it would be the Pity Fuck of all Pity Fucks. Sorry to disappoint you.\" Then her eyes brightened, and she said, \"I know! Why don't you fuck him? I'm sure he'd love it, and maybe you wouldn't mind it. I give you my permission!\" As if that settled everything.\n\nI was quickly moving from 'mildly annoyed' to 'really pissed.' I said, \"Les and I are just friends, Beth, okay? He's your -- air quotes -- 'boyfriend.' And you locked him, remember?\"\n\nShe giggled and waved her hand. \"Oh, I didn't mean fuck fuck. I meant you could peg him.\"\n\n\"What?\"\n\nShe leaned toward me. \"Peg him. You know, get a harness and a dildo (not too big to start), and...boom,\" she pantomimed, complete with a pelvic thrust, not caring whether anyone was watching, though she whispered the next part. \"You fuck him, silly. You know, in his cute little butt.\" As though I hadn't understood the first part. \"He might even be a virgin,\" she added, like that was a bonus.\n\nI was offended and got up to leave. \"Never mind.\"\n\n\"Oh, I see. Not your problem. You're right, of course. But it's not mine either.\" She smiled with mock understanding. \"It's dear Little Leslie's problem, isn't it?\"\n\nI stared daggers at her, but Beth was having too much fun to stop. She put a hand on my arm to keep me from leaving. \"Don't worry. I'll have Brian do it. Problem solved.\"\n\nWhat?! She knew she had shocked me and was loving it. Also, she was batshit crazy and she might actually do it. With my teeth clenched, I told her, \"Les isn't gay.\"\n\n\"Well who said he was?\"\n\n\"Jesus, Beth, be serious. You can't rape him.\"\n\n\"Well, of course not.\" She was indignant. \"You're the one who thinks Leslie needs a fuck. I'm just trying to help. How about this? I hereby promise not to rape him. Nor will Brian. But I don't think consent will be a problem. I find that boys in chastity will consent to almost anything. In fact, they'll beg for it.\" She chuckled. \"Isn't that your experience, Mallory?\"\n\nEvil. In my whole life I have never more regretted a conversation. As I walked away, she called after me, \"Brian is sizable, you know. Leslie will need to prepare himself.\" She laughed.\n\nI had to say something to Les, but what? 'Watch your back!'? 'Don't go near Brian'? 'Beware of your bitch girlfriend'? I mean, what do you say? Poor Les. I felt even worse when he showed up in my kitchen a couple of days later with a shopping bag. I had a bad feeling, and sure enough he awkwardly pulled out a dildo and harness, trying to be nonchalant about it. Like it was nothing unusual, probably the third or fourth I'd seen already that day. In my kitchen.\n\n\"Now, don't get upset, Mal.' [Never a good way to start.] \"We, umm...we don't have to do this. But, well...Beth says if I let you, she'll unlock me. So, umm...\"\n\n\"Les, you CANNOT be serious.\"\n\n\"We don't have to...\"\n\n\"She said she'll unlock you? For real? For good? She'll hand over the key?\"\n\n\"Well, she didn't say that.\"\n\n\"What did she say? The two of you will have sex?\"\n\n\"Not exactly.\"\n\n\"Jesus, Les, what then?\"\n\n\"That she'll let me, you know, jerk off once.\"\n\n\"That's IT?!! That's all you get? One wank and then she puts the lock back? Jesus, Les. In exchange for that?\" I gestured at the fake cock. \"Forget it.\" [I know, who am I to sneeze at a wank, right?]\n\n\"Well, I haven't gotten to for a while now,\" he sort of apologized. I hated that Beth was right -- he was going to beg for it. He looked a little sad, or maybe ashamed, but he really wanted me to do it. I felt terrible and wanted to kill Beth. Plus I was worried about Brian.\n\nTwenty minutes later I was wearing the stupid cock over my jeans and Les's shorts were around his ankles. He was bent over the kitchen table, waiting for it. I was a lot more nervous than he was (I did peek at the famous cage). I had rubbed canola oil all over the thing and I kept asking him, \"Are you sure? You really want to do this... Are you sure?\" And every time he nodded. Finally, we just did it. I mean I pushed it up his butt. He winced and I paused. \"Are you okay?\" He nodded and said we needed to do a couple more. Thrusts, I guessed he meant, so I did, and that was that. I took the harness off and looked the other way while he pulled his shorts up. He thanked me -- can you believe it? -- and left with his shopping bag. I resisted the urge for the rest of the afternoon, but eventually gave in and rubbed off.\n\nWell, it wasn't good enough for Beth. She wanted proof. Of what? That Les wasn't a virgin? I mean, come on. The next day Les was back with the harness and one of those little tripods for his phone. He kept saying don't worry, everything would be fine as he was herding me into my bedroom -- my bedroom! He handed me the dildo -- \"Here, put this on\" -- while he positioned his phone on the table by the bed.\n\n\"No, Les. No pictures!\"\n\n\"Don't worry, it won't show you, just me. Here...\" He started helping with the harness while I protested haplessly. He was doing everything at once -- taking off his pants, setting up the phone, lubing the cock. I was fairly useless. Then I heard Beth's voice. God, nooo! We were Facetiming.\n\n\"Is that you, Leslie? Good... And that must be Mallory. Good morning, Mallory...Leslie, fix the camera, I can't see...That's better...Good.\" Les kept whispering to me, \"It's okay. It's okay. Just a few minutes. No problem.\" He leaned over the bed and dropped his boxers. Beth instantly objected. \"Oh, no! I want Lover Boy on his back. Legs up. Let's see everything.\" Les didn't even hesitate. He just turned over and raised his legs. I noticed he was hairless. Whose idea was that? Losing no time, Beth took charge. \"Okay, Mallory, you're on. Time for Leslie's fuck.\"\n\nI didn't budge, so Les reached around his hip and grabbed the cock to guide it home, mouthing to me 'don't worry, it's okay.' And then it just sort of happened. We did it. I was pegging him. Beth scolded me for being too gentle (\"Mallory, I know you can do better than that!\") and Les kept saying 'it's okay' until I began to get a little annoyed with him, too. But I was pegging him. I won't say it stopped being weird, but I did find sort of a natural rhythm. It reminded me of tennis: backstroke, stroke, follow-through. Or a baseball pitcher: wind up, delivery, follow-through. I actually thought of Annie Savoy in Bull Durham. It's like a lot of things, I guess, follow-through is important. I had stopped paying attention to Beth -- who probably was having the most fun -- but at one point she started taunting Les about how he was not allowed to see anything. That annoyed me, so I took off my shirt. Probably a mistake, since Beth no doubt intended it, and she started clapping. \"Oh, there you are, a lingerie show, Leslie.\" Oh yeah? I unsnapped my bra and flung it somewhere. Naturally, Beth loved it. \"My goodness, Mallory!\" Then she added, \"You see there, Leslie? Those are tits. Only smaller.\" Bitch. Les did finally stop repeating 'it's okay' and stared at my chest (which I'm actually proud of, thank you). I started kneading my breast and pinching my nipples. Still going with the rhythm.\n\nI was definitely warming up. I guess Les was already there because he started moaning. For a second, I worried I was hurting him. His moans got louder, and his eyes were screwed shut when he suddenly went rigid and splooged. It went everywhere. I mean, everywhere. You know how when you have a mouthful of milk and someone makes you laugh? That's what happened to Les. His penis spurted hard -- I forgot he hadn't come for a while -- but the cage was in the way and semen sprayed us. Messy, for sure, but pretty hot. Then, bam, I came, too. Complete surprise. My knees almost buckled. Beth was beside herself.\n\nI guess Beth thought that was the finale because right after, she signed off with mock congratulations. I was on auto pilot. My thrusting had slowed, but still had a pop to it. I had come, yes, but I honestly thought there might be more. I couldn't tell what Les was thinking. His orgasm looked a lot bigger than mine. \"Is she gone?\" I panted, so relieved to get rid of Beth.\n\nLes nodded. \"I think so.\"\n\n\"For real? Turn the phone over.\" I didn't trust her. But pinned to the mattress by my fake cock, Les couldn't actually reach it. I leaned over to whack the phone away. \"Les?\" I asked as I returned to business. He groaned as I pumped. \"Les!\" I repeated.\n\n\"Yes. What?\"\n\n\"I need you to lick me.\" We could quit if there was nothing there, but I wanted to try.\n\n\"Okay.\" Good old Les.\n\nThe interruption was frustrating and almost killed the mood. I had to withdraw from Les, get the harness off, get my jeans off, panties, the whole show. Les stayed put patiently. At last, I straddled his head. Relief. My pussy found his mouth, his tongue was out, and the licking started. Ahh; I settled. I was sitting on his face, his eyes peering up between my thighs as he licked me. His head was a saddle and I started riding. Even now, that sounds harsh, but it didn't feel harsh. It was so nice, so natural, so perfectly comfortable. Still, I don't think I'd have gotten the tsunami if Les hadn't suggested that I turn around.\n\nIt was reverse cowgirl on his mouth. There I was naked (first time), wide open on my knees, my pussy and rosebud completely exposed -- really lewd, but that made it so hot. In front of my face, his penis was puffed up in the steel cage. It looked uncomfortable, but that just made it hotter. I supported myself with one hand and leaned over his body so I could reach under and frig myself with the other, right on his mouth. I began rocking on his tongue, squeezing his face with my thighs. Again, lewd, but again, that just made it hotter. And, God, I was in control of everything except only the tongue itself. My breasts hung over his torso and swayed as I moved (and yes, they sway, despite what Beth said). When I wasn't frigging my clit, I was frigging my nipples. We were soaked in sweat, semen, lube, cream, everything. Les had buried his wiggling tongue. If he needed to breathe, he would have to speak up. GOD it was hot.",
        "When I felt the orgasm on its way, I knew it was going to be good. Usually it just gets steadily closer and closer. You know when the bell's going to ring. But this one didn't get closer, it got bigger. And bigger. And closer and bigger. I realized it was going to be scary good. Les kept working and I started making noises and pounding the bed with my fist. Losing my mind. He better not stop. I wasn't just rocking and rubbing, I was bucking and bashing. I had never had an orgasm riding someone's face. The pelvic spasms started and split me open. I think I was gushing and might have been screaming. The truth is, I don't know. It just overwhelmed me. I had a full kinetic fit right there on Les's wonderful tongue and had to force myself to fall over when my pussy couldn't take any more touching. Holy tsunami. When Les figured it was finally over, he thanked me, God bless him. So unnecessary it was touching.\n\nAfter that tsunami I gave up masturbating. Seriously. That very week I bought two more skirts. Les knew what to do and would never pass up the chance to do it. He got incredibly good at it. All I had to do was show up in a skirt, and I couldn't resist it. He never actually asked me to peg him again, but I did because I knew he liked it. He would come in the cage without even touching himself, and he always thanked me. Also, he did some research all on his own and ordered us another strapon.\n\nIt was pretty amazing until I realized what was happening. We were having sex. You're rolling your eyes, like no, duh, Sherlock. But that's not at all how it started, so the realization sort of shocked me. Facts: one of us regularly penetrated the other, and we both had orgasms. Obviously sex. I couldn't deny it. Once I realized it, I obsessed about it. I was full of guilt. If Les and I were having sex, it meant that Les was cheating on Beth, not just following her instructions. And I was a homewrecker. I was the 'other woman' and I despised myself for it. I never thought that could be me.\n\nI freaked out for a day or two and tried to raise the topic on one of our runs, but Les didn't seem to care. I hadn't spoken to Beth lately and I realized (or accused myself, anyway) I had been avoiding her at work. And yet, I kept putting on the skirt. And God, I stopped counting the tsunamis. I was in so deep, I told myself I might have to find another apartment just to escape of the mess I was in. I told Les we needed to talk about it and began practicing a breakup speech.\n\nLes told me to come over the next evening. I was nervous, dreading it, and was even late arriving (in jeans, not skirt). When I walked in, Beth was there, calmly seated at the kitchen table with a glass of wine. I was surprised and nearly panicked. I fought the urge to flee. She just smiled at me and nodded. Les was there, too, without a drink, looking blank. I said, \"Beth, um, sorry, I didn't know you were here. I'll come back another time.\"\n\nShe raised her hand. \"No, no. I need to be going. Leslie and I were just finishing up, weren't we?\" She smiled at Les and he nodded obediently. She asked him, \"Are you ready?\" When he nodded again, she asked, \"Do you have the box?\"\n\nLes opened a drawer and pulled out a small box covered with black velvet. Holding it carefully, he approached Beth and dropped to one knee in front of her. He held up the box and flipped it open. I thought, OMG, she's making me watch him propose to her. I choked up. But the box was empty. Beth calmly reached behind her neck and unclasped her necklace. She lowered her key into the box, followed by the chain, then folded her hands in her lap. The chain was a golden pool in the black velvet box as Les then turned to me and said, \"Mallory, will you do me the honor of accepting this key?\" Stunned, I took the box and lifted the chain.\n\nA fly on the wall would have seen Beth with her hands clasped in delight and a pleased smile in her eyes; Les, with trembling hands and a pleading look in his eyes; and me, Mallory, holding up a gold necklace and steel key. With my jaw on the floor.\n\nBeth broke the silence. \"Well, good luck, you two!\" She tousled Les's hair playfully before she left and said, \"You see, Les? I told you it would work.\" To me she smiled and said, \"Sorry to be such a bitch, Mal, but it was fun.\"\n\nSo it's my key now. Les insists that I wear it all the time, like he's proud of it, and says it's totally up to me how to use it."
    ],
    "authorname": "whoamireally",
    "tags": [
        "female masturbation",
        "jilling",
        "male chastity",
        "cunnilingus",
        "femdom",
        "flr",
        "pegging",
        "keyholder",
        "female orgasm",
        "sph"
    ],
    "category": "Fetish",
    "url": "https://www.literotica.com/s/protecting-les"
}
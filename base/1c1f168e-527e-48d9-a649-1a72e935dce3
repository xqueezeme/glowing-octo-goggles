{
    "title": "The Grade-Whore Ch. 02",
    "pages": [
        "The conclusion to The Grade-Whore: Ch. 1 Bargain Accepted\n\nAuthor's Note: This submission is not intended to stand alone. Please first read \"The Grade-Whore: Ch. 1 Bargain Accepted\" by LeoDavis,\n\nSATURDAY: LUST IS NOT ENOUGH\n\nShortly after dawn Jan got up and went to the bathroom. She had to peel herself off me because we were still intertwined. I could still feel the impression of her body against mine, and her scent clung to the sheets. I was in a hazy, not-quite-awake-but- not-asleep state, and I allowed myself to fully enjoy the physical and emotional sensations of euphoria that were swirling through me. The difference in our ages didn't enter my consciousness. I was certain that my complete infatuation with Jan was quickly becoming love.\n\nI heard Jan run water into a glass, and I assumed she was taking her pill. She cleaned her teeth and returned to bed. I pretended I was asleep as she tried to wrap herself around me again without waking me up. Her body was warm and soft, and my emotions consumed me as she began to snuggle against me. \n\nMy abrupt erection gave me away. \"You're awake, you faker! Now go to the bathroom and clean your teeth and come back to bed! It's time to finish what you started last night!\"\n\n\"Yes, Ma'am!\" I muttered. I stumbled to the bathroom and did as she had ordered. I certainly wasn't going to argue with her! But with wakefulness came a return to reality. What the hell was I thinking, anyway? She was so damned young! \n\nWhen I returned to the bed, Jan was lying on her back with her knees pulled up and her legs apart. Her pink pussy lips were already getting wet. I stood at the foot of the bed and stared at her body. Her thick, golden curls framed her pink sex, then flowed up, around, and into a triangle on her lower abdomen. I gazed up her trim muscular body and then back and forth between her proud, perky breasts. When I looked into her face our eyes locked. She was smiling. All traces of common sense vanished, and the emotional euphoria returned.\n\nAs I had done a few hours earlier, I positioned myself for the missionary position. We continued to gaze into each other's eyes. With the head of my penis gently touching her opening, I began to suck Jan's nipples, first one, then the other. After several minutes I leaned forward to kiss her mouth, and she lifted off the bed, pulling about a third of my penis inside her. I was leaning on my elbows, so I rubbed one breast with each hand as I kissed her. I began a slow in-and-out motion with my hips. Her eyes remained wide open and staring into mine.\n\nEach in-stroke gained me additional depth, and I steadily approached complete penetration. Jan was deliberately squeezing my penis, and I coordinated my motions with hers. Once again I felt her uterus moving aside to accommodate me, and then our bodies pressed together. She wrapped her legs around my waist and held me inside her as she continued to squeeze my penis. We both finally closed our eyes.\n\n\"I've never done it slowly before.\" Jan whispered against my lips. \"But I knew it would feel . . . incredible. You just fit so . . . completely and perfectly inside me. Yesterday was wonderful, and I . . . \" I pulled gently on both of her nipples and she groaned, then kissed me again. I sucked her tongue inside my mouth. It tasted of toothpaste.\n\n\"Oh! I don't want this to ever end!\" Jan moaned. She clearly enjoyed the fullness of complete penetration, so I stayed inside her. I stimulated her clitoris by lifting upward against her with my penis, and twisting. I followed her pattern of squeezing, but I added my own rhythm to our dance of love. I rubbed her sensitive breasts and nipples in time with twists against her clitoris. It didn't take long.\n\nJan's vagina began to squeeze my penis faster and faster, in time with my stimulation. I slowly picked up the pace, and she promptly climaxed. I had kept sucking on her tongue so she couldn't pull it away, and she screamed against my lips as her orgasm rippled violently through her abdomen and into my own.\n\nBecause of our sexual activities the day before, I was not in immediate danger of ejaculating. But the sensations traveling up my penis were slowly getting me there. I released Jan's tongue and sucked on her lips. As the pulsing around my penis diminished, she kissed me, hard. \"That was really special!\" She whispered. \"Thank you!\"\n\n\"We're not done yet.\" I whispered against her nipples as I returned my mouth to her breasts. \"Just relax and enjoy the ride.\"\n\n\"Yes . . . Professor!\" Jan said in a sultry voice. \"Teach me another lesson!\"\n\nI wasn't absolutely certain what was really going on between us, but whatever it was, it was sexy as hell. In this position I could measure Jan's level of arousal by the way she squeezed my penis. Or so I thought. \n\nI brought Jan about two-thirds of the way to climax, then stopped rubbing her nipples and gave her several short, quick thrusts with my penis. I couldn't easily detect her reaction, so I repeated everything several times. \n\nThen I did my thrusts as I sucked on one of Jan's nipples and pinched the other. She jerked her hips so hard and fast I almost fell off the bed. She pushed up against me and pulled me deep inside her with her legs each time I pulled myself several inches out of her. She kept building her arousal, higher and higher. She had become a mating female animal, and she wanted my penis to stay inside her body. I could feel her firm uterus rubbing against my erection, even when I wasn't moving inside her.\n\nFinally the friction on my penis was too much to resist, and I ejaculated in a violent squirt. Before I could ejaculate again, Jan arched her back and screamed louder than I'd ever heard her before. She wrapped her arms and legs around me and crushed me against her breasts. We both screamed as I ejaculated two or three more times. I repeatedly shoved her hips against the bed, and she repeatedly shoved me back up with powerful thrusts of her own hips. The bed squeaked and groaned in time with our movements. \n\nWith my elbows on the bed I didn't crush Jan as I collapsed on top of her. She was still able to breathe as I slowly regained the ability to see. I had nearly lost consciousness. I didn't realize how fast my heart was beating until I felt it downshift and begin to beat at something close to its usual pace. Jan was smiling as she peppered my mouth with kisses. Her face was streaked with tears. \"That felt incredible, Doc! It was . . . fun! I felt the warmth each time you came inside me.\"\n\n\"Why are you crying?\"\n\n\"Dummy! You really don't really have to ask, do you?\" \n\nPost-play lasted for a long time. I was surprised when I realized I was still erect inside Jan. She realized it too. \"Can you go again?\" She asked.\n\n\"No way!\" I said. \"Let's just enjoy how it feels to hold each other like this. I don't know why I'm still hard, but I can't do any more right now!\"\n\nSeveral minutes later we were both more relaxed, although I was still fully erect inside Jan's vagina. \"God! We're drenched! I feel like I just played a hard three-set match on a hot day! Only better! And your back is really sticky.\"\n\nI felt Jan rubbing my back, and the expression on her face was one of confusion. She lifted her right hand from my back and held it up so she could see it. \"Oh my God! It's covered with blood! You're bleeding!\"\n\n\"I'll live, I think. But when you let yourself get excited, you go all the way!\"\n\n\"I can't lie her knowing your back is covered with blood. I don't want you to come out of me, but I guess you'd better.\"\n\nI kissed Jan and we stared into each other's eyes as I slowly pulled my penis out of her. She squeezed it as hard as she could. Finally he squirted free. \"I suddenly feel empty.\" She whispered. \"I like it so much better inside me. I fell asleep really happy last night.\"\n\n\"Not it. Him. The Boss!\" I corrected and Jan laughed. We looked down at her pussy and watched her vagina slowly close. Semen and vaginal fluid were coming out of her in little busts as her abdomen continued to quiver. Her golden curls were streaked with our mixture. I reached my hand down and wiped it from her anus to her clitoris, coating my fingers with our combination of sex juice. Jan's pussy rippled and she moaned as I did so. She was obviously still extremely aroused.\n\nI slowly leaned back on top of Jan and pushed my fingers toward her mouth. She was holding her slightly bloody hands apart and made no effort to stop me. I smeared her lips with the mixture, then kissed her. She ignored the blood and grabbed me again. She squeezed me hard against her body as we rubbed our tongues and lips together.\n\n\"Thank you, Doc. That was even better than I'd hoped.\" She whispered when there was only a faint, lingering taste of our sex on our lips. \"Now get off me so we can shower off and I'll put antiseptic on your back. Then we eat. I'm starved!\"\n\nAfter our shower Jan took care of my back. Then, in an incredibly intimate and loving act, she shaved my face. Men, if you've never been shaved by a naked woman before, let me recommend it to you! I stared into her eyes as she concentrated on what she was doing, and every so often she would look into mine and smile. The way I felt at those moments I would have done anything she had asked. Anything. I knew I was far, far beyond infatuation. What kind of fool feels that way after less than a day of sex?\n\nI heated up some frozen sausage and cooked us some eggs. Yes, Jan was hungry. She ate three of each. We finished breakfast with toast and coffee. But our relationship had clearly changed. When I cooked the eggs, she kept her body touching mine. As we ate, she pulled her chair close so that our bodies touched. We shared kisses and caresses every few seconds. We laughed and giggled about silly things. As impossibly wrong and inappropriate as it was, we had become real lovers. We were falling in love with each other in a relationship that had no future, but we ignored the future and enjoyed the present to the fullest.\n\nRather than voice the obvious problem with our ages, we explored our feelings and sensations. I had never felt anything like this before, not even when I had thought I was in love with my lesbian ex-wife. Love! All-consuming, intense, impossible love. And Jan was a freshman child and I planned to retire within a decade.\n\nAfter our leisurely, loving breakfast we worked out together in my exercise room. Sweat was soon pouring off our naked bodies, and whenever we moved between machines we kissed each other. Jan's lips tasted salty, and the scent of our fresh sweat was primitively erotic. I teased her wet breasts until her nipples stood out. \"This is so . . . raw, so primal!\" She whispered against my mouth. She slid her hand up and down my side. \"Your sweat smells so . . . Well, it excites me! But stop! I can't do my reps with your hands on my breasts!\" A few minutes later as Jan was riding the exercise bike I came up behind her and slipped my hand under her crotch, between it and the seat. She moaned as I cupped her pussy with my fingers curled around her pubic bone. Her pubic hair was wet with sweat. She giggled and groaned. \"You're really driving me insane. You know that?\" She muttered, but she kept peddling. My thumb was rubbing the smooth skin between her vagina and her anus, and her hip movements quickly became more sexual than bike-riding.\n\nMoments later my thumb slipped inside Jan, and for the first time I found her G-spot. As she peddled, her body twisted back and forth, causing my fingers to rub her clitoris and my thumb to rub her spot. It drove her wild. Her violent, twisting hip thrusts forced her to stop peddling. \"You're a sex fiend!\" She screamed. \n\nJan leaped off the bike and wrapped her sweaty body around mine, much as she had held me the day before when I had carried her across the field. Her kisses were hard and frantic. Her hips wiggled against my erection, clearly trying to slide The Boss inside her. I took several steps and held her against a wall. I lifted her hips and she easily pulled my penis completely inside her. Once again we mated standing up, covered in slippery sweat that made little \"splat\" sounds as it dripped onto the floor. She couldn't lean her head back, and when she climaxed she screamed directly into my mouth as I kissed and sucked on her lips. \n\nJan threw her entire body into her orgasm, and her leg and arm motions made it difficult for me to hold her against the wall. When her excitement finally died down, she clung to me and squeezed. My penis remained erect inside her as I pressed her against the wall. I hadn't climaxed, but I didn't care. I was making love to a woman I was falling in love with, not fucking my sex toy. I had no idea I could have been any part of an orgasm as exciting as hers! My elaborate plans for the weekend were completely shot to hell. I truly wanted to please and pleasure Jan, not destroy her.\n\nEventually my legs began to tire, and Jan laughed. \"I can't believe you can hold me up like this for so long! And feeling you inside me like this . . . I don't know how to describe how good it feels!\" She kissed me, then pulled her mouth away. \"But you'd better pull The Boss out of . . . where he is before you fall down!\" She'd almost told me her pet name for her pussy! Well, maybe she would do so later.\n\nI lifted Jan's hips and pulled her off me with a wet slurping sound, then lowered her so that The Boss, still sticky with her juices, slid between our bodies. Her legs were even more shaky than mine! We helped each other walk into the bedroom and finally into the shower. We cooled off by sitting wrapped around each other in the bottom of the tub, alternately running water over us, then turning it off while we cuddled, kissed, and talked. We were in there a long time, becoming increasingly more in tune with each other, physically and emotionally.\n\nWe shared an intimate lunch, spiced with constant kissing and caressing. After a quick bathroom break and teeth-cleaning, I decided to show Jan what I'd purchased for her weekend with me. I took her into the tiny spare bedroom I used as my at-home office and study. Everything was spread out on top of my desk. She gasped, then looked into my eyes. \"What are you going to do to me?\" She asked. Her eyes were filled with concern, not affection.\n\n\"Jan, I knew I couldn't have sex with you for three straight days. So I decided I would force you to remain aroused with these things. After all, you didn't have a choice, did you? I could have done anything I wanted to you.\"\n\n\"Past tense? Subjunctive mood? So you really mean you're NOT going to . . . torture me with this stuff? Why . . . Has something changed?\" She gave me a come-hither look that was so incredibly loving I stopped breathing.\n\nI pulled her against me. \"You know it has, Jan! I l-l-like you too much to take that kind of advantage of you, although I'll admit the idea really turned me on. But not now. My . . . emotional feelings for you are much too intense.\"\n\nJan buried her face in my chest and I could feel her crying. Why? Was it something I said? \"When you undressed in my office, I couldn't control my reaction.\" I said. \"But now it's like you said. I can't fuck you anymore. I want to make love to you, but only if you want to make love to me. I'm going to keep you here until Monday, but I'm not going to force you to do anything. Well, I'm going to keep you naked! But that's all! If you don't want to have sex again, I won't force you to.\"\n\nJan's crying slowed, but she was still sniffling against my chest. \"I don't know how your other professors reacted when you seduced them, but I . . .\"\n\n\"YOU ASSHOLE!\" Jan suddenly yelled. \"You don't know how hard it was for me to act so trashy! You've been a friend, not just a professor! But I really had to get a better grade or I couldn't come back next semester. You're the ONLY male friend I have since I broke up with Chuck! And I felt so guilty because I took advantage of you, but I had to do it!\"\n\nI smiled at Jan's outburst. \"Well, you did an exceptionally good job of acting the slut. I figured you had lots of practice. In fact several of my colleagues had commented how much they'd like to crawl between your thighs.\"\n\nJan tried to act angry, but she saw the look on my face and began to giggle. \"Well, I have to admit you surprised me, too! I figured you MIGHT be able to do it once a day - tops. I knew you weren't married, and I really liked you, so even though you're an old fart, I figured I could somehow endure it!\"\n\nI held Jan close and we laughed and kissed. \"Let your 'old fart' show you the things he bought. Maybe we can still play with some of them.\"\n\nJan fingered several of my toys, then picked up a small book with the title, \"Illustrated Guide to Sexual Positions\" with subtitle, \"Instructions for Maximal Marital Satisfaction.\" She began to leaf through it. \"God! These aren't drawing! They're photographs!\" I could see her beginning to blush. Then she started to giggle. \"Both of them are bald! They don't have any pubic hair! They both look like little kids, only bigger!\"\n\nJan was looking at a series of pictures showing doggy-style mating. \"Maybe it makes it easier for the reader to understand all the details. See how clear it is? Would you like to try some of them? Like this one?\" I asked.\n\n\"M-m-m-maybe!\" Jan's blush ran almost to her waist. \"What's this other stuff?\" I noticed that she held on to the sex manual.\n\nI handed her another of my purchases. \"This almost looks like The Boss!\" She exclaimed. \"Is this a vibrator inside it?\" \n\nI nodded. \"I planned to turn it on and fuck you with it. I figured I could get you to have climaxes that way if I couldn't bring The Boss back to life.\"\n\nJan looked directly into my eyes. \"As good as those I've already had?\" She whispered. I shook my head, and she kissed me. \"Maybe we can try it anyway. It might be fun!\" She laughed at the expression on my face. She waved the dildo in front of my face. \"Don't worry! This won't replace The Boss! Nothing could do that!\"\n\nI moved on. \"These are special cords that will hold you tight but won't cut into your skin. They fasten to the underside of the bed so that you are completely helpless.\" \n\nJan's eyes opened wide and she looked slightly shocked. \"You were really . . .?\" \n\nI nodded. \"And this blindfold completes the set. You wouldn't be able to see what was coming next.\"\n\nJan shuddered, making her breasts shake invitingly. \"That's sick! That's disgusting! How could you . . .?\"\n\n\"Control, Jan. It would give me complete control. And power over you. According to the book you're holding, the person restrained sometimes has incredibly powerful climaxes.\" Jan flipped through the pages until she found pictures of both the man and the woman, tied to a bed, screaming in apparently overpoweringly powerful orgasms.\n\nJan was visibly trembling when she turned back to the desk. \"And these things? With the wires coming out?\"\n\n\"Radio-controlled vibrators. The egg-shaped one for your Golden Lamb of Love, and the longer, thin one for your anus. Then I could turn them on and off with these controllers.\" I demonstrated, and the vibrators both wiggled and danced on the desk.\n\nJan laughed, but it sounded slightly forced. \"So if you couldn't get it up and were too tired to fuck me with the penis-shaped one, you could just push those buttons and get me off? Was that the plan?\"\n\nJan looked at me and I felt my face get hot as I blushed. \"Yes, Jan. I'm sorry, but yes, that was my plan.\"\n\nJan shook her head and muttered something I couldn't hear. She picked up the last item. \"And what's this thing?\"\n\n\"A butt plug. It's to stretch you open. You know. To help prepare you for anal intercourse.\"\n\nJan laughed and blushed. \"Can't you picture me walking around stark naked with that sticking out of my ass?\" Then she froze. \"You were going to fuck me in my ASS?\"",
        "\"I still will if you want to try it. I've never done it, but the book makes it look pretty easy!\" I replied. \"I even bought a pack of enemas.\" I held them up.\n\nJan shook her head. \"If you meant it when you said you wouldn't force me to do anything, I won't do that. But I will if you order me to. That was our deal.\"\n\nI kissed Jan. \"Yes, we have a deal. But we will only do things you're willing to do. We're going to share, not just satisfy me. Okay?\" Jan nodded, then kissed me for a couple of minutes. There were more tears in her eyes when she pulled away.\n\n\"Why not look through the book and find some things you've never done but would like to try? I admit I was really only interested in fucking you in the ass when I wanted to grind you down.\"\n\n\"Why did you want to do that to me, Doc? To grind me down, I mean?\"\n\n\"I was sick, angry at women in general. Suddenly I could do anything I wanted with you and . . . and I'm sorry! Dammit I was wrong!\"\n\nJan was quiet for several seconds. \"And I used sex to get you to . . . do what I wanted. That's part of it, too. Isn't it? That's why you were going to . . . be cruel to me?\"\n\nI looked into her troubled eyes. \"Yes, I'm afraid so. I'm not making any excuses, but it makes me look pretty bad, doesn't it?\"\n\nJan's eyes slowly changed, and I felt like she was reading my mind. Her look was sympathetic when she said, \"She really hurt you, didn't she? Your ex-wife. She took away your sense of being a man.\" She studied my face. \"And you didn't see it coming, did you? You thought . . . You wanted your marriage to go on.\" \n\nIf Jan wasn't reading my mind, she was dangerously intuitive. I felt my eyes filling with tears. I nodded. \"I thought we were so comfortable with each other. I didn't know about her lover. I felt so damned stupid!\"\n\nJan hugged me until I stopped sniffling, then stared into my eyes again. \"This is unfair, but I'm going to ask it anyway. Did you every have real intimacy with her? Was the sex good?\"\n\nMy emotions were sending me all kinds of confusing signals. I stared into Jan's deep blue eyes and tried to sort everything out. Finally I said, \"We obviously were never truly intimate. We had sex, but less and less often. I masturbated a lot, and it was usually better than sex with her. I realize now that we just copulated. Fucked. Screwed. We didn't ever really make love. At least she didn't.\"\n\nJan gave me her incredible smile. \"But we did, didn't we? We made love. It wasn't just sex. Everything inside both of us took part. We didn't hold anything back, did we?\" She whispered and kissed me lovingly and gently.\n\nI hugged her tightly against me. \"Yes, Jan. We made love. I'd never done it before, but what we did was certainly making love.\"\n\nThe leaned back and stared into my eyes again. \"Thank you, Doc. It wasn't fair of me to pry like that. But I thought . . . Well, I could already sense . . . I knew what you were feeling. I knew you would tell me, too. I knew you would be as honest with me as you are with yourself.\"\n\n\"Jan, I'm all mixed up right now! Can I turn the tables on you? Why were you crying?\"\n\nJan's eyes filled with tears again. \"Doc, you know! I don't have to tell you, do I?\"\n\n\"No, you don't. I just want to hear it from you.\"\n\n\"Dammit Doc! I don't want this . . . What we're doing and feeling . . . I don't want it to end! And it will in a couple of days!\"\n\n\"Maybe that's why we're so intense. We can't afford to waste time with silly games. We don't have time for that.\"\n\nJan kissed me, then pulled away. \"Let's not waste time talking about stuff we can't change anyway. It's time for lunch, isn't it? I'm starved! For some reason I'm burning up a LOT of energy!\"\n\nJan was clearly interested in the book, and she paged through it while I made sandwiches for lunch. As we ate, we looked at the pictures and aloud read the instructions for doing several interesting sex acts. \"Until I looked at this,\" Jan held up the book, \"I thought I was so experienced because Chuck had come inside me three times and I'd sucked some penises. Now I feel like a beginner!\"\n\n\"Let's go for another walk, this time in daylight.\" I suggested as soon as lunch was finished and Jan had finished with the book. We cleaned our teeth and used the toilet, and we put on our sandals.\n\nJan surprised me. She had an impish look on her face. \"How about we put those remote-control vibrators in. It should make the walk more fun!\"\n\n\"If we do, I'll bet you won't be able to walk five-hundred feet if I turn them both on!\"\n\nJan shook her head. \"No, that's not what I meant! I'll wear the egg in iz . . . oops, I almost said it! My Golden Lamb of Love. And you'll have the other up your ass!\" She handed me one of the disposable enemas. \"Better use this first, Doc!\"\n\nI handed Jan another one. \"Let's both do it. Just in case I want to put something up your ass, too!\" In fact we gave each other enemas as we giggled and joked, then waited for them to work. I held her body against mine as we kissed and cuddled. Within a few minutes we both giggled again as our intestines began to flex, rumble, and churn.\n\nWe took turns on the toilet for several minutes until we were finally done. Even with nearly constant toilet-flushing, the stench was terrible! We took quick rinse-off showers, dried off, and closed the bathroom door to contain the stink. \"I thought it was embarrassing to have you watch me use the toilet before. But that! That was truly disgusting!\" Jan laughed.\n\nI persuaded Jan that she needed to be prepared before I put the egg into her pussy. I had her get onto her hands and knees, and I slipped under her from behind, lying on my back. I looked up at her beautiful pussy. I reached around her legs and cradled her dangling breasts and I she lowered her pussy to my face. I began cunnilingus as I fondled her breasts and sensitive nipples.\n\nOnce again it didn't take long. Jan expected me to stop when she was just starting to get aroused, but I kept licking and sucking on her pussy as I rubbed and pinched her nipples. The combined stimulation brought her to a loud orgasm. This time I was careful, and I had enough time to pull my mouth away from her crotch so that I could breathe. She still almost crushed my head between her thighs. Her athletic legs felt like wooden beams as her muscles contracted - and then held firm.\n\nWhile Jan's body was still trembling, I turned on the egg and pressed it between her vaginal lips. Her legs clamped harder and she screamed. She immediately experienced another orgasm, louder and more violent than the first. I turned off the egg, but her orgasm went on and on. She slowly came back down. Her pussy was dripping fresh juice into my mouth and all over my face. \n\nI touched the control again, and I watched Jan's labia slowly close around the buzzing egg. Finally there was nothing visible except the thin white wire hanging out of her. I turned off the egg and counted out thirty seconds. Then I gave the egg a quick buzz, and she jumped. \"If you want to take a walk, stop that!\" She muttered. More juice came gushing out of her pussy. \n\nJan crawled forward and stood up. I buzzed the egg for a couple of seconds, and I could see the muscles in her abdomen jerk. It obviously worked as advertized!\n\nJan smeared lubricant all over her finger and inserted it inside my rectum. She gently rubbed my prostate, and my penis became fully erect. She rubbed, then stopped, then rubbed until I was almost ready to explode. Finally she pulled her finger out of me and lubricated the vibrator. She turned on the vibrator and pushed it inside me as it buzzed. She carefully moved it deeper with her finger. As it touched my prostate, I screamed, then quickly ejaculated onto the exercise mats in several quick bursts. \"After what you just did to me, it only seemed fair!\" She said.\n\nAfter we cleaned up, we took turns rubbing suntan lotion on our white and sensitive areas. We were both aroused when we finished this exciting chore! I strung bootlaces through convenient holes on the controls, and we each hung a control around our necks. After a quick, three-second burst to make certain the vibrators still worked, we put on our sandals and began our walk.\n\nEvery hundred yards or so we took turns with the vibrators. I found that I could turn Jan's on and determine her level of arousal by the color and stiffness of her nipples. One long, twenty-second burst of vibrator stimulation would get her sufficiently aroused that she could no longer walk. She used three-second bursts, about five seconds apart, and continued them until I was fully erect. Then she would give me a ten-second burst until the head of my penis turned dark. She always stopped just before I ejaculated. Our hour-long walk kept is both in a stage of nearly constant, extreme arousal.\n\nWhen we finally returned to the porch, we were both almost insane with sexual desire. We kicked off our sandals as soon as we entered the house, and we turned on both vibrators. Jan could barely walk as far as the exercise room. I pushed her down on her hands and knees and crawled up behind her.\n\nI could see Jan's labia pulsing as the egg buzzed inside her. I took hold of the wire and gently pulled it out. \"No-o-o-o! I was almost there!\" She moaned.\n\nI pushed the slippery, buzzing egg firmly against Jan's anus, and she gave a sudden screaming moan and it abruptly disappeared completely inside her. In one forceful stroke I pushed my penis completely inside her wet, trembling pussy. I reached around her torso and pulled her against me by pressing her breasts against her ribs.\n\nThe sensations were so intense I closed my eyes. I could feel the egg in Jan's rectum vibrating directly against my shaft, and the other one was stimulating my prostate. Her entire body began to shake and she screamed, again and again. I ejaculated so hard it felt like cramps in my groin.\n\nJan's entire body was shaking and she was still screaming. She began to move around under me, and as she straightened one of her legs, I lost my balance and I fell to the mat, pulling her onto her side. I was still erect but had come halfway out of her. I pushed myself back inside her and pulled her back against me as the vibrators continued to buzz. It felt like I was having one long, continuous ejaculation.\n\nJan continued to scream, and I screamed with her. I could barely hear us over the intense stimulation of the vibrators. The sensations were so powerful they became painful. She twisted around and grabbed both controls, turning off the vibrators. We lay together on the mat on our sides. Still, joined together, with the now motionless vibrators lodged in our rectums. Our breathing came in short, ragged gasps.\n\nMy penis softened and I could no longer hold it inside Jan. As we separated, I slowly pulled the vibrator from inside me, then gently removed the one in her. I spooned my body against hers, one hand caressing her breasts. \n\nAfter several minutes Jan spoke. \"I don't need that, Doc. It was incredible, but it went on far too long. It stopped being good. It wasn't at all like making love.\"\n\n\"Me too.\" I replied. I just wanted to rest and I held her tightly, my sticky, flaccid penis between the cheeks of her behind. As the discomfort in my groin gradually subsided, I allowed myself to drift off.\n\nIt was at least two hours later when I awoke. Jan was already awake, and we kissed, then climbed into the shower. Once again we mated standing up as the water ran over us. \"Those vibrators were okay, Doc, but this is what I really like better!\" Two minutes later I ejaculated into her and she screamed with joy.\n\nAs we ate our TV dinners, Jan got playful. \"I saw this in the book.\" She announced as she straddled my lap and sat down facing me. She adjusted her position until I slipped most of the way into her. \"Now we can eat!\" She announced.\n\nIt took a long time to finish our meals. Jan's breasts were right in front of me, and as she held her tray with one hand and picked up pieces of her meal, I leaned forward and sucked on her sensitive nipples. As I ate, Jan leaned back and squeezed my penis with her pussy. \n\nAfter about fifteen minutes both meals were cold and I couldn't handle any more stimulation. I stood up, placed Jan's behind on the table. I slammed in and out of her as hard and fast as I could. In a few seconds she screamed as her orgasm exploded. She pulled me back on top of her, and the unfinished TV dinners were smashed against her back. We didn't care. I kissed her until her body finally relaxed. I had not climaxed, and she asked if we should keep going. I told her I was saving myself for the bedroom, and she gave me a fantastic, loving smile. \n\nWe had a quick, loving (but sexless) shower, and after we dried off, I carried Jan to the bed and laid her gently on top of the sheet. I turned on all of the lights and picked up my camera. Jan looked apprehensive. \"Doc, why are you going to take pictures? What are you going to do with them?\"\n\n\"Jan, these are only for me to look at after you've left on Monday. I'll keep them in a special envelope in my file cabinet. My attorney has instructions to destroy that envelope if anything happens to me. But I want . . . I want to remember you exactly as you are right now.\"\n\nJan smiled. \"I'd like some of you, too. But it would be too dangerous if someone found them. Okay, snap away! As long as these are just for you!\"\n\nI took nearly fifty color Polaroid pictures of Jan's body, including closeups of her Golden Lamb of Love. I had her lie on her back, on her side, and on her stomach. I took pictures of her holding and kissing my penis. I took several as I slipped inside her. When I was done, we took turns looking at them.\n\n\"This is my favorite, Doc!\" Jan said as she showed me a closeup of her Golden Lamb of Love with my pubic hair pressing against it. Her clitoris and about a quarter inch of my penis were visible. The rest of my penis was completely inside her body.\n\nWe made frantic love in the missionary position until we both came, and then I rolled Jan over on top of me. My penis softened inside her, then slipped out. Instead of dropping off to sleep she began to stroke my penis and balls. When he didn't become erect, she slipped a finger into my anus and began to massage my prostate. That did it! She almost sucked me inside her and then began to ride up and down on my erection. I tickled her nipples and she clamped down with her vagina. The abruptness and intensity of our orgasms surprised me. She flopped down on top of me and kissed me hard. I was still erect inside her as I fell asleep,\n\nSUNDAY: AWARENESS\n\nWe woke on Sunday morning in a bed that was so sticky the sheets clung to us. While the sheets and mattress pad sloshed in my washing machine, Jan shaved me. \"My legs are getting a bit rough. I really need to shave them. And my underarms. Do you have another razor?\"\n\n\"Of course! But it's my turn to shave you, Jan!\"\n\nJan gave me a look of complete disbelief. \"You've got to be kidding! Right? Right?\"\n\nI shook my head. \"If there are any special tricks, you'd better tell me, Jan! I'd hate to mess up!\" \n\nJan shook her head, then ran from the room. I chased after her. She ran into my study and picked up the sex book. She flipped through the pages. \"Here! How about I shave your balls, too? It's supposed to be really good for oral sex!\"\n\n\"Sure! Why not?\" I laughed. \"If you'll kiss my balls after you shave them, I'll kiss your legs and underarms, too.\"\n\nWe ate breakfast and then started shaving. It took us almost an hour, but Jan's underarms, Jan's legs, and my scrotum were soon smooth and hairless. \"Do you want to shave . . . my pussy . . . my Golden Lamb of Love, too?\" She asked.\n\n\"Not a chance! I love your Golden Lamb of Love, even if I do get hairs in my mouth when I kiss it. I'm not shaving the most beautiful pussy in the world! Never!\" The sparkle in Jan's eyes spoke volumes.\n\nMy balls felt really strange and soft when she finished trimming and shaving them. Jan kissed and fondled them and giggled. I kissed her legs and underarms, then continued to kiss her entire body. She did the same to me. It tickled, and we both laughed like little kids.\n\nWe also became aroused. Finally we ended up on the exercise mats, with me lying on my back, doing sixty-nine. Jan's giggling was interrupted by several loud orgasms, and I came twice. We were still licking, kissing, and laughing when the crash-boom of a sudden thunderstorm interrupted our revelry.\n\nWe raced from room to room closing windows, and the storm gradually passed by. Jan ate lunch sitting on my lap. She wiggled around until I was inside her, and we finished the meal that way. I played with her breasts until she climaxed. When I didn't ejaculate, she flexed her hips and squeezed me with her vagina until I did. We were so in tune with each other's bodies that we could easily achieve any level of passion we desired. I couldn't help remembering that I'd never been certain how to arouse my ex- wife.\n\nThe storm had nearly disappeared, but the sky was overcast and a gentle rain was falling. Jan and I took a long, slow walk around my trails as the droplets of water fell from the sky and slowly soaked us. The air was still warm, and our skin was slippery and smooth. We explored each other's bodies as we kissed and cuddled during our two-hour walk.\n\nWhen we returned, we took a few moments to towel off, then Jan led me to our bed. \"I want to be in charge this time.\" She announced as she gently pushed me back onto the bed. \n\nJan straddled me as I lay on my back. The Boss was dark red and ready. She faced me and began to lower herself onto The Boss. \"I can't believe I didn't think he would fit!\" She whispered. \"I'm going to move him around in me until he's touched me everywhere!\"\n\nWith just his head inside her, Jan began to twist and flex her hips. Her abrupt orgasm caught us both by surprise, and she had to struggle to keep from impaling herself on my shaft. But then she lowered herself in small fractions of an inch, each time twisting and rotating herself around the portion of my penis that was inside her. As I approached the point of no return she stopped, and continued as soon as I calmed down. Sweat was dripping from both of us.\n\nI had never before explored a woman this way. My penis rubbed all around her uterus, and she gasped as her sensitive cervix slipped back and forth across his head. Slowly I slipped deeper into Jan, and her vagina began to grab me with a rhythm she couldn't control. \n\nAll at once Jan dropped the last half-inch, and I was fully inside her. \"God, Doc! I can't stop . . . I can't help . . . Oh! OH!\" I lifted my hips from the bed and thrust myself against her, and she screamed. I felt my own ejaculations as our bodies jerked and bounced. The bed moved against the ball and made a banging sound like a drum beat. My whole body tingled and I thought I heard more thunder.\n\nSometime later I awoke to find Jan lying on top of me, trembling. We were dripping with sweat, her nipples hard against my chest. I was still inside her, still erect. I kissed her and she kissed me again and again. \"God, Doc! We didn't hold anything back, did we? Can it ever be better than that?\"\n\n\"No, Jan. If it got any better, it would kill me!\" \n\nJan looked into my eyes. \"You've never had one that good before, have you?\"\n\nI shook my head. \"No, Jan. So who's the teacher now?\" She laughed and held me close. We lay like that for a long time. \n\nWe finally cleaned up for supper. As the TV dinners heated up, Jan sat in my lap, facing me as we kissed and cuddled. My penis was motionless, most of the way inside her. \"I just want to hold him this way.\" She whispered. \"I can't believe how wonderful he feels inside me!\"\n\nOur food was cold before we finished. It was difficult to eat. After getting up to take the dinners from the oven, Jan had climbed back onto my lap and pulled my penis inside her. I couldn't believe how wonderful it felt, either.",
        "After we cleaned everything up, we took bathroom breaks, then I carried her into the bedroom. I slipped into her, then held her on top of me. She wiggled until I was pressing her deepest regions. We kissed, and Jan began to cry. \"It's almost over. Tomorrow I have to leave! How . . . how do you feel about me?\"\n\n\"Jan, I didn't know a man and a woman could ever be the way we've been with each other the past couple of days. It's incredible. I'm totally, completely, helplessly in love with you. But it won't work! I'm almost forty years too old for you!\"\n\nTears were now streaming down her face. \"I know. I'd do anything for you! I'm so much in love I can't imagine life without you. But I also know we can't make a life with each other. I was born too late and you were born too early. But can't we try?\"\n\n\"In a few short years I'll really be an old man and you'll still be a young woman. Whatever love we share will be destroyed as I being to fail. I can't put you through that!\"\n\nJan held my face and stared into my eyes. \"You're wrong, you know! It wouldn't destroy my love for you! But living without you . . . I just can't!\"\n\nI was crying too. \"Jan, we can't keep going like this. You need to find someone your own age. Someone you can build a life with. I can't be that man! It's not fair to you!\"\n\n\"How can I possibly find someone else after knowing this love with you? Who could possibly . . . \" Jan began to sob. We held each other and cried for a long time.\n\n\"I'm on the pill, but it doesn't always work. And we've had a lot of sex! What if I'm pregnant?\"\n\n\"Jan, in that case I'll marry you. You won't have an illegitimate child by me. But it would be terrible for the child because I probably wouldn't live long enough to be much of a father. Or a husband to you.\" \n\nFinally Jan said, \"You're right, Doc. Our affair has to end tomorrow. And I couldn't possibly trick you into marriage that way.\" Jan stared directly into my eyes. \"But we still have tonight! Let's make the best memories we can!\"\n\nWe did exactly that. It was the first time that Jan had used her oral techniques to revive my penis after I ejaculated so that we could continue to make love. Our orgasms were intense but not as draining as before. Neither of us wanted the night to end. \n\nDuring our many intimate conversations I had learned nearly everything important about Jan's short life. Given the soap-opera experiences she had endured, I was amazed that she was as mature and well-adjusted as she was.\n\nJan's imminent arrival into the world had precipitated her parents marriage when they were seventeen and still in high school. Her birth came less than two months after their nuptials. Subsequently her mother had a series of miscarriages before carrying a second child a full nine months. While her parents went to the hospital for the birth of Jan's first sibling, Jan, ten-years-old at the time, had been left in the care of fourteen- year-old Kim, her usual babysitter. Several hours later her father came home and announced the terrible news that both her mother and the baby had died. Jan's father had been so devastated that Kim had been the person who comforted Jan.\n\nSubsequently Kim had spent more and more time at their home, supposedly taking care of Jan, but eventually \"taking care\" of her father, too. Four years later when Kim graduated from high school, she had become Jan's stepmother. Apparently following a family tradition, Kim gave birth to Jan's first stepsister about two months later. A second stepsister arrived two years later. \"My dad's ten years older than Kim, but it doesn't seem to matter. When I'm living at home, I hear them making love all the time. They're both really loud!\" \n\nEven before she became Jan's stepmother, it had been Kim who had explained the facts of life to Jan. Kim had explained menstruation, had helped Jan buy her first bras, and ultimately had explained the sex act to Jan. Jan saw Kim not as her stepmother, but more as a slightly older sister who happened to be having frequent, loud sex with her father.\n\nJan had avoided the family tradition of early pregnancies with two strategies. First, she had given blowjobs to the three high-school suitors who had been most ardent. Second, she had started taking birth-control pills as soon as she turned eighteen. During her first semester in college, Chuck had deflowered her in the back seat of his car. He had managed to have sex with her twice more in the bed in his dorm. During post-play after their final tryst, Chuck's roommate and two friends had walked in and found Chuck and Jan lying undressed in Chuck's bed. Chuck had announced that Jan was \"really hot in bed\" and had offered Jan to the other three men. Jan had wisely decided Chuck wasn't worth her time. \n\nIn spite of our efforts to prolong out love-making, I fell asleep thinking about Jan's short but complicated life. I marveled that we had somehow fallen in love. \n\nMONDAY: THE APPROACHING ENDING\n\nWe awoke and made love shortly after sunrise, but the details will fit better if I relate them a little later. Suffice it to say that we spent so much time making love that we didn't have time for breakfast.\n\nI offered the various sex toys to Jan, but she shook her head. \"They're not real, Doc. They'll just remind me of The Boss, but they won't be the same. I could never use them.\"\n\nAbout 10:00 we made love in the shower, then got dressed for the first time since Friday. It was silly and sentimental, but we moved from room-to-room, kissing in each one to remember how we had made love. Finally we held each other and kissed goodbye on my porch. \"I like it better when we're naked, Jan!\" I whispered.\n\n\"Me too, Doc! This just doesn't feel right, does it?\"\n\nWe climbed into my car, with Jan sitting in the front seat for the first time. \"The only other time I rode in this car I was scared and naked in the back.\" She said. \"This time I'm fully dressed, but I'm more mixed up now than I was then. And I'm still scared.\"\n\nJan rested her hand on my thigh as I drove back to campus. She was tense, and her hand flexed and trembled against my leg. She used a tissue to blot the tears from her eyes. We didn't say anything to each other. I repeatedly glanced at her profile and my throat got tight. Even though she was dressed, I knew exactly how her body looked, and I already missed the sight of her little nipples jutting out as she became excited. \n\nI stopped my car around the corner from Jan's dorm. Most of the students had departed for home over the weekend, and there was nobody around. She turned toward me. \"My folks should be here in about an hour. I won't be back until the fall. Maybe I'll be okay by then. Take good care of The Boss. I'll never forget wha . . . wha . . . what we did. And how much I love you!\" She started to open the door of the car.\n\n\"Wait, Jan. Here.\" I handed her a plastic bag. She looked inside with a puzzled look, then blushed deeply. \n\n\"The sex book? Doc, I don't want this! What . . . \"\n\n\"Jan, it's graphic and direct. But we both know how . . . useful it is. Wh-wh-when you find the right man . . . \" My throat tightened and I couldn't finish the sentence.\n\nJan's lower lip was trembling and her eyes were filling with tears. \"God, Doc! I can't believe you love me so much that you can . . . \" With that she opened the door and stepped out of my car. I could see the tension in her body as she stiffly walked away. She was clutching the plastic bag containing the sex book against her breasts.\n\nShe looked back once, and her face was streaked with tears. Within seconds she had disappeared around the corner of the building. I realized that she hadn't said anything about my changing her grade. She knew I would change it, but that wasn't more important than what we were feeling. She knew it would have cheapened everything we had experienced if she had mentioned it. \n\nWhen my churning emotions calmed sufficiently to allow me to drive, I started the car and drove to the Registrar's Office. I filled out the paperwork to change Jan's I grade to an A. I had betrayed my own academic integrity, but I really didn't care. It seemed unimportant and insignificant. I had just allowed the woman I loved to leave me. I felt stupid for falling in love with her, but even more stupid for being unable to deal with our inevitable separation.\n\nWhen I got home, I threw the sex toys into the trash.\n\nSUMMER: JAN IS REALLY GONE\n\nI didn't resume masturbation for several weeks. When I did, Jan was my only pretend lover. On hot days I could smell the scent of her sweat in my exercise room, and it made me get hard. Almost every night I would look through the pictures I had taken of her. I'd kiss each one, then fall asleep with an erection. I was truly a pathetic, degenerate old goat. \n\nJan was so much younger than I, and that made our relationship feel almost incestuous. Three other factors tumbled and tossed in my mind. Our affair had begun abruptly and had ended quickly after three, short days. We had immediately achieved a level of sexual and emotional intensify that was almost beyond imagining. Finally it was the only relationship I'd ever experienced that was completely private and that nobody else knew anything about. I knew these four factors were intertwined and interrelated, but that knowledge did nothing to abate my less of loss.\n\nThe summer passed slowly. I kept thinking about Jan. We'd made love in every room, and the memories simply would not go away. When my ex-wife had announced her true sexuality, I had felt disgust whenever I entered our old bedroom. Now my emotions were exploding in me and I felt love, lust, and most acutely, loss.\n\nI had to spend time in my office so that I could prepare to teach my fall classes. Each time I looked at my office doorway, I could picture Jan leaning half naked against the door as she'd seduced me. Bart wouldn't have understood how much more she was than simply a grade-whore. He would have called me, quite correctly, a silly old man. A cunt's a cunt, right? There's nothin' special about a free piece of ass, right? \n\nFALL SEMESTER: JAN RETURNS\n\nThe first day of classes finally arrived. I wondered how I would react when I saw Jan again. Would she be walking across campus hanging onto a young hunk? Would she be practicing tennis in her short skirt? Or would she transfer to another college rather than face me?\n\nI was preparing to teach my first class in the fall semester when I found Jan's name on the class roster. She had enrolled in the next semester of calculus with me! I felt myself getting dizzy, and I realized I had been holding my breath ever since I'd seen her name. I was so emotionally wired that I almost couldn't walk into the classroom. \n\nIt was still warm weather, and Jan was braless in short-shorts and sandals. She was deeply tanned, and looked incredibly healthy. When I called her name, I looked into her eyes and felt myself getting erect. She stared back and smiled knowingly at me. Her nipples were tenting her top. I wanted to take her in my arms and hold her. Somehow I moved on and called the names of the remaining students. Somehow I even managed to teach that class. \n\nAfter class she followed me back to my office and sat down in front of my desk. She was the picture of innocence if anyone saw her through my open office door. \"Why did you give me an A, Doc? Our deal was for a B.\" She whispered.\n\nI couldn't manage to say anything. Finally I whispered, \"Jan, you're killing me! I love you! I want to touch you. And hold you.\"\n\nJan blushed. \"Yes, I know. I love you, too. I really miss touching and kissing The Boss. And holding him inside me, too. I was a tramp to use sex to get a better grade. I won't do it again. I won't have to. Besides sex is too important to me now. I'll try to avoid making you uncomfortable in class.\"\n\n\"Why . . . Why are you taking this class, Jan? You don't need it for your major!\"\n\nShe gave me her familiar smile, and I felt my heart melt. \"This was the only appropriate way I could spend time with you. And I'll take one of your courses every semester until I graduate. Since I can't share your bed, maybe we can share this tiny part of our lives. You can't be my lover, but you're still my favorite professor! I want to be able to look at you. And dream. I can't stop what I feel.\"\n\nWe were silent and stared into each other's eyes. Memories of looking at her face before and after we had made love sprang into my consciousness. Jan glanced down and I followed her gaze to her breasts. Her nipples were dark and hard against her thin top. She looked into my face and smiled. \"I want to feel you looking at my body, Doc. Can I . . . Is it okay . . . I won't wear panties and you can look at my Golden Lamb of Love during tests. Is that . . . what you want?\"\n\nI knew that staring at Jan's body would only make me feel worse, but I couldn't resist the temptation. I nodded my head, and she smiled. I could tell how aroused she was by looking into her eyes. The Boss was trying to rip himself out of my pants.\n\nAfter several minutes Jan sighed, rose to her feet, and quickly left my office. I was so lost in thought that I almost forgot to teach my next class, and it was two hours later.\n\nI somehow adjusted to seeing Jan five days each week in class. She was clearly the best student. But staring at her exposed pussy during tests nearly drove me insane. I was too weak to ask her to wear panties. \n\nI knew she was dating, and I almost defeated the jealousy within myself and nearly managed to hope that she found a good boy - well, man - to love. She had that sex book. Was she working through it with another man? Damn! It should be me!\n\nI thought I was handling the situation fairly well until about 10:00 one Saturday night in November, the week before Thanksgiving. \n\nI heard a vehicle unexpectedly coming down my long gravel driveway, and I watched through the window as a strange car approached, then stopped. I gasped a short cry as Jan got out and came to the door and knocked. I opened it and stood trembling as I stared at her. She was crying. \"For God's sake, Doc, can I please come in?\"\n\nI cast off my feeling of shock, and I pulled her inside and held her. \"What's wrong, Jan? What happened?\"\n\n\"I thought . . . he might work out.\" Jan sobbed. \"He was considerate, and he was starting to . . . get me to respond. And he wasn't pushy. Until tonight.\"\n\nI held her close as she gathered her thoughts. \"Then tonight he told me we were going to a party. When we got to the apartment, there was nobody else there. When I told him I wouldn't have sex with him, he undressed himself and tried to rape me. I hit him in the balls and walked back to campus. Then I drove out here.\"\n\n\"What do you want, Jan?\" I was afraid to express my own desire.\n\n\"I want . . . No, I need. Make love to me tonight. Just tonight. I'll leave in the morning. Please.\"\n\nEvery rational thought told me I was making a mistake, but I really had no choice. I kissed the tears from Jan's face and began to undress her. Halfway through, she stopped crying and began to undress me. I couldn't believe how exciting it was, particularly since we'd never undressed each other before. When we were both naked, I picked her up and carried her in my arms to my bed and we made love, intensely and happily. It was as if we'd never been apart. It was almost dawn when we finally fell asleep.\n\nWe awoke that late Sunday morning wrapped around each other once again. As soon as we had the sheets in the washing machine and had mated standing up as we had taken our erotic shower, Jan dressed herself, kissed me, still naked, goodbye, and departed. I sobbed as the sound of her car slowly disappeared. My emotions were again in turmoil, and I was barely able to teach on Monday. Fortunately classes ended on Tuesday for Thanksgiving break, and I had the rest of the week to recover. I had a turkey TV dinner for Thanksgiving and dreamed about Jan. Until the odor turned sour, I left the sex-stained sheets on the bed so that I could smell her. I knew I wasn't rational, but I no longer cared.\n\nADJUSTMENT: SEPARATE LIVES, TOGETHER\n\nJan was true to her word. Each semester I requested and was assigned to teach courses that she could take, and each semester until she graduated she enrolled in one of my classes. After that second calculus class they were all three-credit courses, and I only saw her three days each week. But it was so very much better than nothing. She continued to expose her Golden Lamb of Love to me during tests, and I remained confused, lost, and alone. \n\nBeginning the following spring I attended all of the women's tennis team practices, and I watched all of their home matches. Jan was now playing number one, and I could see her game improving from week to week. My colleagues thought I was a silly old man who was lusting after young, female bodies. They didn't suspect my lust was specific to Jan.\n\nI subscribed to two tennis magazines, and eventually I learned to play. I only played with Jan once. The erotic scent of her perspiration overwhelmed me, and we stopped before we both lost control. I still felt a connection to her each time I walked onto the court. I found the sport gave me a good workout, too. Isn't that pathetic? I couldn't have Jan, but I could enjoy her sport.\n\nAbout once each semester Jan would experience an emotional crisis, and she would abruptly appear at my house and we would make love. Each time I thought it was our last time. Then, during the spring semester of her senior year, she arrived with a different message. \"I think I've found someone, Doc. I think I'm in love with him, too. So this is . . . This is really goodbye. I owe you so much, and I love you so much, but I want . . . I want to be true to him. Do you understand?\" Tears were streaming down her face. I knew she was afraid of how much she was hurting me.\n\nI held Jan until she stopped crying, and instead of making love we talked all night. She told me everything about her young man. It was obvious that she was very much in love with him. She kissed me goodbye in the morning. We had never even undressed. I was incredibly happy for her, but I also felt an intense sense of loss. I truly realized she would never make love to me again. I had faced this certainly again and again, but this time I knew it was real. This time there really was another lover in her life.\n\nJan hugged me after graduation, and I got my first look of her new man when he passionately kissed her. My stomach hurt as I watched, and I quickly turned and walked away. That part of my life was over. Jan was now nothing more than an impossibly wonderful memory. We could now get on with our separate lives, mine much shorter than hers.\n\nI should have known better. Just over a year later I received an invitation to Jan's wedding. Inside was a personal, handwritten note from Jan. She begged me to attend. Of course I replied that I would. I made travel arrangements and prepared myself mentally and emotionally for her big day. Well, at least I tried. How do you prepare to watch the woman you love marry someone else?\n\nAbout ten days before Jan's wedding, she unexpectedly appeared on my front porch. It was early one hot Saturday afternoon. I was afraid something had gone wrong with the wedding, but she quickly stopped my questions. \"Doc, everything's fine. Except for one thing. I drove here to have one last day with you. I'm going to marry Bill, but I'm not married yet. Once I am, I'm going to be completely faithful. I haven't promised him that, yet. I love Bill, but I still love you, too!\"\n\n\"Oh my God! Does he know? That you're here? With me?\"\n\nJan gave me her special smile. \"I told him all about us. He knows I'm here, and he probably knows why. He knows this is something . . . something about you and me, not about him. Something we have to finish if we can.\"",
        "Jan could see I had serious doubts, so she used her best weapons. She slowly removed her clothes. In moments she was standing in the bright sunshine on my porch, completely naked except for her shoes. The sight of her perky breasts and golden triangle of pubic hair made me dizzy. \n\n\"Well? Aren't you going to join me in a walk? Didn't you tell me last year that you'd put in another trail? I'd love to see it. But take off those clothes! I feel silly standing naked all by myself\" Then she laughed and began to undress me.\n\nWe held hands and skipped and danced along my new trail. We frequently stopped to kiss and hug, then moved on. We made love next to a little rocky stream, standing up as we had done our first time since there was no soft place to lie down. Once again she bloodied me as she climaxed. After a long shower and after she took care of her scratches on my back, we made love again in my bed. We shared of usual TV dinners, then made love all night long. After breakfast we built each other as high as we could stand, and once again Jan bloodied my back as together we exploded in orgasm. Afterwards we held each other as closely as we possibly could. \n\nThe rest of the day is a confusing blur of making love, crying, and making love again. Just before supper she kissed me goodbye. She pushed something hard into my shirt pocket. I pulled it out and saw her birth-control pills.\n\n\"I took the last one this morning, Doc. Bill and I are going to start a family as soon as we can. I'm just sorry that's something that you and I will never share.\" Jan began to cry, and I held her until she composed herself.\n\n\"Are you both . . . Is he . . .?\" Somehow I couldn't ask the question.\n\nOf course Jan understood. She nodded and smiled. \"Yes, Doc. As good as we just were. That's how I knew. Not the first time, but after we got used to each other. I taught him everything you taught me, and then we learned some things together. He's a good student!\" She didn't mention the book, but I knew they had read it together. She blushed because she realized I knew.\n\n\"So were you! My best ever! Student and lover!\" I whispered. She kissed me and turned to leave. \n\n\"I almost forgot. Izzy. You always wanted to know.\" She said with a shy smile.\n\nI had absolutely no idea what Jan was telling me. She laughed at the expression on my face. \"Isia Isabella. Izzy for short. That's the scientific name for the wooly bear caterpillar! Remember how I laughed when you said it looked like I had a caterpillar between my legs?\"\n\n\"Your Golden Lamb of Love!\" I exclaimed. \"Your fuzzy, golden pussy! Your wooly bear!\"\n\nJan giggled. \"But she's Izzy no more. Bill calls her his Golden Fleece. He's like you! He won't let me shave it, either!\"\n\nI knew my mythology. \"And you call his penis 'Jason?'\" I asked. \n\nJan blushed deeply. \"You're too damned smart, Doc!\" She pressed herself against me and we kissed for several minutes. I thought the pet names were cute, but possibly ominous. As I recalled the legend, Jason and Medea shared the golden fleece, and their marriage didn't go all that well.\n\nAs I held Jan, she suddenly shuddered in my arms. \"You know I didn't do this . . . come back to make love to you . . . to hurt you. I just had to . . . \" She paused and was silent for several seconds. \"It's like that old song. I'm torn between two lovers. I'd stay with you and never leave you if I could. I'm not strong enough, Doc! I want more than the few years you and I could have together. I'm so sorry.\"\n\n\"It's okay, Jan. Life tricked us. But we shared more than most people ever know. Live your life. Completely. Just remember me from time to time, okay?\"\n\n\"You know I will! I'm out of time. I've really gotta go. Goodbye, Doc. I really want to see you at my wedding.\" She gave me another quick kiss and then she was gone. I heard her sob as she jumped into her car.\n\nI stared into the distance long after her car disappeared. \"I've never been quite certain, Jan. Were you the better student? Or was I? I love you!\" I whispered. I stood on my porch for a very long time, thinking, remembering, and wishing. It didn't make me feel any better. Later when I looked in the mirror, my eyes were red and there were tear- streaks running down my naked body.\n\nJAN'S WEDDING: EMOTIONAL TURBULENCE\n\nI was almost numb at Jan's wedding. I watched and heard everything, but my emotions were in turmoil. It didn't feel real. I didn't want it to be real. I listened to their vows, and I remembered Jan's words. She promised to be faithful to Bill and I knew she would be. The only way she would ever make love to me again would be if something happened to their marriage, and I didn't want that. Or did I? I realized I probably did, and I felt ashamed. Was the curse of the Golden Fleece real? I secretly hoped so. \n\nI waited with the other guests so that we could greet the people arranged in the receiving line Jan's father seemed to be incredibly young as he shook my hand! He didn't even have any gray hair! And Kim, Jan's step mother, was pregnant again and looked younger than Jan. Meeting them and seeing them in the flesh made me feel ancient.\n\nAs I approached the radiant bride, my heart began to pound in my chest and I felt faint. Jan surprised everyone when she kissed me passionately on the lips. \"Thanks, Doc! I love you! I always will!\" She quietly whispered in my ear so that nobody else could possibly hear. I felt the pressure of her perky breasts against me, and then she released me and greeted the next guest.\n\nI shook Bill's hand and congratulated him. He gave me an intense, penetrating stare, and I felt a moment of guilt, knowing I had made passionate love to his bride a few days earlier. \"Thank you for coming, Professor Davis. Your being here was important to both Jan and me.\" Was all he said. His handshake was firm and strong. \n\nI continued through the receiving line, meeting and forgetting stranger after stranger. I found a place to sit down, and I tried to carry on several conversations during the reception banquet. I failed. I could still taste her lipstick and I could feel how her breasts had pressed against me. Even her bridal dress couldn't conceal their firmness, their shape, and . . . I thought about her sensitive nipples and lost myself in my own world of memories and dreams.\n\nSuddenly Bill tapped me on the shoulder and asked if I could talk to him in private. I didn't even know him, and I wondered what he wanted to say to me. I followed him to another room. As he closed the door behind us, I began to panic. Did he suspect how deeply I was involved with Jan? Was he angry? What would he do? A quick memory of Jan's bouncing breasts as we had recently made love appeared in my head, and I began to tremble. I was still lusting after this young man's new wife! \n\n\"Professor Davis, Jan told me all about you. I want to thank you for what you did for Jan. And ultimately for me as well.\" I was both shocked and relieved. He obviously had no idea of the true nature of my relationship with Jan! Clearly he only knew about the seven classes she had taken with me!\n\nThe expression on my face must have given me away. \"No, I mean it! I know all about your love affair. How she planned to fuck you for a better grade! How you fell in love with each other and made love several times over the next three years. But if you hadn't helped Jan to learn how to love and to make love, she would never have become the woman I also fell in love with. I promise you that I'll always treasure her as much as you have.\" He shook my hand, and I nodded. For once in my life I was speechless. Of course I had known that he and Jan were making love, but having him state it still bothered me. And more than I cared to admit. He was so damned YOUNG! \n\nI followed him silently out of the room. Just before we reached the rest of the guests, he turned. \"And I know about her trip to be with you two weeks ago. Jan didn't tell me, but I know that you and she. . . . Well, I could tell when she came back after that day and night with you that she was finally . . . well, completely ready to begin a life with me. Thank you for loving her enough to let her come back to me. You're a better man than I am. Perhaps when I'm older I'll understand how you could . . . be so selfless. Jan has never said this, but I know she would never have married me if you had been a younger man. Or if you had asked her not to marry me.\" He shook my hand again.\n\nBill's words sounded and felt sincere, and I knew that Jan had chosen well. But his words still rocked me. I liked Bill. In spite of my sense of loss, I was happy for Jan. I fought back tears. I was an emotional mess. Should I have asked her to break up with Bill and marry me? Doing it would have been wrong, but the idea stuck in my head and wouldn't go away.\n\nI stayed in the background as the reception worked its way to its conclusion and the newlyweds finally got into their car and departed. I was no longer any part of Jan's life, but memories of our love made everything almost too poignant to bear. Intellectually I was happy for Jan, but I still felt like crying. Perhaps I could have married her, not Bill.\n\nAbout three weeks later I received a thank-you note from the new bride. \"Doc, I can't thank you enough for your gift. Only you and I know how you wrote it. It's the only secret I'll ever keep from my darling Bill. Every time I read it I'll remember the love we shared. Yes, I'll always love you. Don't forget me! Jan.\" \n\nI had given them a pewter serving tray engraved with the following untitled poem: When I awake holding you with you holding me, I am reborn whole again. Your very touch tells me of your love for me, As I pray does mine for you. We begin another day and share our love together, A gift from God we scarce deserve. We dare not waste our love this day nor any other. Each is precious; each is delicate. We know not what tomorrow brings, but surely Today is love. We need no more. Leo Davis\n\nThat Monday morning after my grade-for-a-fuck weekend with Jan, I had made love to her as the sun rose. Then I had grabbed a pad of paper and a red pen from next to the bed. With my half-erect penis still lodged inside her, I had placed the pad against her wonderful breasts and I had written those words. When I had shown them to her a few minutes later, tears had streamed down her face. \"God, Doc! That's so wonderful! It's exactly how I feel!\" She had said. \n\nJan had set the poem aside and hugged me. After several minutes of squeezing me with her vaginal muscles, I had become erect again. We had then made slow and gentle love until she climaxed, and I ejaculated into her for the second time that morning. \"Even if we don't have much time, we haven't wasted today, have we?\" She had said as we cuddled. Just over two hours later I'd dropped her off at her dorm so that her parents could take her home for the summer.\n\nREFLECTIONS\n\nI have to accept that this is the way things must be. But in spite of my wonderful memories, the thought of Jan and Bill making love still brings me pain. I should be the man with my penis inside her! My love for her isn't strong enough to put that aside. Dammit! That's what WE did so well together!\n\nSometimes I'm just a silly old man. But I do have some terrific memories, not to mention the photographs. I hope they'll be enough to sustain me when I retire in a couple of years.\n\nSomething in my demeanor must have changed because of my affair with Jan, and I managed to date several of the women who had previously turned me down. Two took me to their beds, but our coupling, although competent and reasonably exciting, was contrived and artificial. They both seemed desperate to find a man to share the final years of their lives. Somehow I couldn't settle for something so shallow. Before falling in love with Jan I would have married either one, if only to have a woman to hold and caress.\n\nNobody ever talks about the REAL price we might pay if we fuck our students. Losing my job or my marriage would have been easier to bear. But of course Jan and I didn't only fuck, we made love. Bart will never know the difference. But I do. I think about Jan all the time, and I'm truly grateful that we had the opportunity to explore our love together. But it still hurts to be alone without her. \n\nBart was wrong. Sometimes they're not grade-whores. Sometimes they're the true loves of our lives. At least that's how mine still is. I miss her every day, particular when I wake up alone. Sometimes I think I can feel her body against mine, and when I wake up I start fo weep when I realize she's really gone. \n\nIn moments of weakness I wish Jan had been a grade-whore. That would make it easier to endure. I wouldn't know that another man was enjoying precisely what I was pretending I still had. "
    ],
    "authorname": "LeoDavis",
    "tags": [
        "doc love",
        "turn jan",
        "lips doc",
        "jan surprised",
        "doc jan",
        "birth-control pills",
        "teach class",
        "long jan",
        "jan stared",
        "laughed expression"
    ],
    "category": "Mature",
    "url": "https://www.literotica.com/s/the-grade-whore-ch-02"
}
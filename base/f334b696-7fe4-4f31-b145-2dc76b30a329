{
    "title": "More than Friends Ch. 02",
    "pages": [
        "I stretched out on my bed, thinking about what had just happened. I had come from college excited to see my friends and family, not knowing what a hot woman my best friend Amanda had developed into while I was gone. We had gotten to talking, and before I even realized what was happening we had moved our relationship into a totally new place. I had fingered her to an incredible squirting orgasm, and then she had given me the blowjob of my dreams. And to top it all off, we were about to fuck.\n\nBut despite what I had just said to her, I was a little worried. The sex was incredible--as hot as anything I had ever fantasized about--but even with Mandy's assurances I wasn't sure what this meant for our friendship. Would this change things between us? And if so, for the better or for the worse?\n\nMy thoughts were interrupted by the sound of the front door opening and my mom's voice calling up the stairs.\n\n\"Joel, are you and Mandy up there?\" I scrambled to my feet and pulled my jeans up, even if they were damp still from Mandy's cum, buttoning my shirt as quickly as I could. I wasn't ready to tell my mom about the new place my relationship with my friend had gone to yet, and I definitely wasn't ready for her to see what a mess we'd already made of my room. Hell, I hadn't even unpacked yet!\n\nI stuck my head out the door into the second floor hallway and shouted down, \"Yeah, Mom, we're just hanging out! Mandy's in the bathroom, but we'll be down in a minute!\"\n\nI collected Mandy's shirt and skirt and balled them up in my hands and then softly slid into the hallway. My younger sister, Laila, who like Mandy had just graduated from high school, was just going into her room. Her eyebrows raised as she saw my flushed face and the ball of clothes in my hand, but she didn't say anything. She just shut the door behind her.\n\nI tapped on the bathroom door with my fingertips and then let myself in. Mandy was standing at the sink, and I had to marvel again at her perfect body. She'd lost weight (and somehow increased her bust size to a 38DD) while I was gone, and in all the FaceTiming we'd done I hadn't noticed how incredibly gorgeous she had become. I'd noticed when the braces disappeared, of course, and I'd seen her raven-colored hair growing longer, but she had always just worn baggy and comfy clothes when we were talking. And hell, she kept the phone on her face, which had always been cute, but which now I saw with new eyes. Her little upturned nose, her green eyes flecked with brown, the little spray of freckles across her cheeks. It was a combination that left her looking like a \"girl next door\" model, especially when combined with her incredible figure.\n\nHer breasts were so round and creamy, so goddamn big on her little frame, that she looked like she belonged on the pages of Playboy. Her narrow waist flared out just right into a rounded and shapely ass, and her legs were long and toned. My cock started to get hard again, and I thought about how I just wanted to sit there to hold and kiss and lick and nibble and stroke and squeeze and pinch and fuck that incredible body all day and all night.\n\nBefore I could say that to her, though, she whispered to me, \"You didn't mean that, right, that we were just hanging out?\"\n\nHer bottom lip was wavering a little, and I realized I had upset her.\n\n\"What? No, of course not! I'm just not sure what to say to my mom yet, and I thought we could figure out how to explain our new relationship together. Maybe not tonight, but later. I don't know, it's just all so new. 'Mom, Mandy just gave me an amazing blowjob after I fingered her to orgasm, we'll be right down' didn't seem to be quite the right thing to say.\"\n\nHer face brightened as she laughed. \"No, I get that. I went into stupid girl mode there for a minute and thought maybe you were having second thoughts.\"\n\nI grabbed her waist and pulled her to me, smashing her tits into my chest as I kissed her long and deep.\n\n\"Not even for a second,\" I said, trying to out my earlier thoughts behind me. She smiled and took the clothes out of my hand. \n\n\"OK, then, you better get down there before it gets too hard to tear myself away from you,\" she said, grabbing my crotch through my pants.\n\nI slipped out the door and ran down the stairs to see my mother sitting on the couch. Her eyes were closed, and for just a moment I admired her body too. It may have been clothed and 19 years older than Amanda's--she and my father had married young, when she was right out of high school--but it still looked incredible. If Mandy's tits were large, my mom's breasts were huge, like something out of a dirty movie, and with her long blonde hair and tall figure, she could have probably had a job as a lingerie model. Or a porn star. As it was she worked as a paralegal at a large law firm in town that specialized in Immigration and Employment cases, which she loved. It had good benefits, and though the pay wasn't quite as high as she wished it was, she always said she felt like she was doing something that mattered.\n\n\"Hey mom,\" I said now, flopping down beside her. \"How was the cheerleading dinner?\"\n\nShe rolled her eyes, but with a smile. \"Oh God, Joel, I am so glad your sister is graduated. The looks the dads and male teachers at that school gave me were bad enough, like they wanted to eat me up. But the cheerleading moms? It's a whole different level of bitch than I ever knew existed.\"\n\nI laughed.\n\n\"Did you and Mandy have fun catching up tonight?\" \n\nFuck yes we did. \"Yeah, I've really missed her. We texted and FaceTimed a lot, but it's not the same as being with someone.\"\n\nMom sighed and put my arm around my shoulder, pulling me into a side hug. \"No, it's not, hon. I've learned that too. I've missed you a lot this year. It'll be nice to have a man around the house, at least for a few months. And then Laila will be heading to school downtown and you'll be headed back to Colorado and I'll be in this empty old house all by myself.\"\n\nI was surprised at how sad she sounded. I hadn't expected her to be feeling so lonely. \n\n\"Mom, Laila's school is just twenty minutes away. You know she'll be back here all the time. Heck, maybe you could convince her to stay here instead of the dorms.\"\n\nShe shook her head. \"No, Joel. I don't want to stand in the way of whatever she wants. Or you for that matter. I just want to set you on a course that will make you happy.\"\n\nOut of the corner of my eye I saw Mandy coming down the stairs, her clothes back on like nothing had happened. \"Mission accomplished, Mom. I'm happy. Hey, can I grab the car, I'm going to run Mandy home.\"\n\n\"Sure thing. The keys are in my purse. You might run up and change your pants though. Did you spell something on them? They're all wet.\"\n\n***\n\nMandy and I sat in the car in the driveway of her house. We hadn't said much on the drive over to her place together, and I wasn't sure what to say now. Fortunately, she broke the ice for me.\n\n\"Hey, we're good, right? You still feeling okay about everything?\"\n\nI nodded. \"I think so. Honestly, I'm still trying to wrap my mind around things though. I mean, I have totally missed you all year, but then to come home and see you in this whole new light. To see this new side of you. It's an adjustment. I was expecting to have a movie buddy and to hang out playing video games and board games and making fun of how people dressed at the mall. To sit on the couch and not care if I had crumbs on my shirt and point out who looks hot and who looks like they had too much plastic surgery on Big Brother. And now...\"\n\n\"Now we can still do all of that. We will do all of that. I want all of that! I just want to add mind blowing sex to it too!\"\n\nI laughed. \"Well, that sounds pretty good. I just really don't want to mess up what we have. You're one of the most important people in my life. I don't want you to be just a fuck-buddy.\"\n\nShe leaned her head on my shoulder. \"If you're saying you want this to be a real relationship, Joel, well then duh, that's obviously what I want too. I realized months ago how much I wanted you. But I also get that I kind of threw myself at you tonight. And geez, I'm so embarrassed by the way my filter just turned off with you. I'm sure that was kind of weird. So I understand. You need to process how you feel. Here's my proposal: Think about it. If you think risking our friendship because we might break up weeks or months or years down the line is too much, I get it. Heck, I'll even feel flattered to know how much our friendship means to you. I'll be sad, and maybe we won't hang out quite so much this summer, but I promise, I don't want to lose your friendship either, so we'll make it work. No harm, no foul, just two awesome orgasms that we'll put behind us.\"\n\nI wasn't sure how to respond. It seemed like either way it would be hard, if not impossible, to go back to our normal friendship. And I wasn't sure I even wanted to. But where did that leave us?\n\n\"Take a day or two or however long you need, and then call me and talk to me. Or come over or text or whatever is easiest. And I promise, even if you decide this is a bad idea, I'll be ok. Disappointed and a little heartbroken, but ok. Deal?\"\n\nI looked at her again. She was gorgeous in the moonlight. \"Okay,\" I said. She gave me a peck on the cheek and opened the car door.\n\n\"I will appeal to your inner caveman though and remind you what an amazing time we just had; that could just be the tip of the sexual iceberg if you want it to be.\"\n\n\"You're not going to make this easy on me are you?\"\n\n\"Well I'm definitely going to camp laugh for what I want, which is amazing friendship and making all of our sexual fantasies come true, but you know, you do you.\"\n\nI laughed.\n\n\"Seriously, though, whatever you decide, we'll make it work. Oh! And before I forget, you know my mom is dying to see you. She's missed you too.\"\n\nI smiled. Mandy's mom, Julia James, was a couple years older than mine, but every bit as beautiful. She was a dance teacher, with long legs, a gorgeously toned ass, and medium sized breasts--very different than Mandy, but with the same raven black hair. Julia always wore it piled up on her head in a messy bun. For several years she had been like a second mother to me, but just like my own mother it was hard not to think about how attractive she was. I had masturbated to fantasies of fucking her many times in high school. Who knew I was paying attention to the wrong James woman.\n\n\"Tell her I've missed her too,\" I said. \"And I can't wait to have one of her famous chocolate caramel cookies.\"\n\nMandy smiled and shut the door. She looked over her shoulder at me as she unlocked the door to her house, flipping her skirt up briefly and flashing me her bare ass with a grin, then walked inside. I felt a warm glow in my chest.\n\n***\n\nI walked down the hall after my shower the next morning to find my sister sitting on my bed in her pajamas--a pair of short terry cloth shorts and a spaghetti strap tank top. Her arms were wrapped around her long, toned legs, knees up in front of her, and I could see the bottom of her ass hanging out. I could also tell she wasn't wearing a bra. Her chest was smaller than Mom's or Mandy's, but her round little breasts were taut and athletic B cups, and when she put her legs down as I walked in, I couldn't help but notice that her nipples were hard.\n\n\"Hey, Laila. You need something?\"\n\n\"Did you fuck Amanda James last night?\"\n\nI almost dropped my towel. \"What?\"\n\n\"Your best friend, Amanda. Did you screw her or what?\"\n\n\"Jesus, Laila. No.\"\n\n\"So she was just hanging out naked in our bathroom for fun?\"\n\nI couldn't come up with an answer to that, but I didn't have to. Laila barrelled forward. \"Listen, Joel, it's your life, I'm not judging. I'm just saying be careful. She really had a hard time you while you were gone. In fact, I don't know if she told you, but we hung out some while you were gone. We got kind of close, just because I think she missed you so much.\"\n\nThis was a surprise. Amanda and I had run in the same circles, but not Laila, who had run with the popular crowd. I didn't know she and Mandy had been hanging out.\n\n\"She's a cool girl, you know? So if you're into it, that's awesome and I'm happy for you. But if you're not, if you're just messing with her to get your dick wet, then I'm just telling you, it's not cool to screw with a girl like that. Especially not a sweet girl like Mandy. I know she got super foxy while you were gone, but even so, she's generous and nice and, I don't know, wholesome. If you just want to get laid, I know plenty of cheerleaders who would love to brag about getting banged by a college boy. Don't mess things up with Mandy.\"\n\nI was really surprised, and touched that she would stick up for Mandy like that. So I decided to be honest too.\n\n\"Look, we didn't have sex, but we did mess around. Like, pretty hot and heavy.\"\n\n\"What does that mean?\" Laila asked.\n\nI blushed.\n\n\"Jesus, Joel, I'm not a naive little virgin. Just spit it out. What does hot and heavy mean to you?\"\n\n\"I fingered her,\" I said, the words rushing out in embarrassment. \"And she gave me a blowjob.\"\n\nLaila nodded. My confession didn't seem to phase her. \"Well did she at least come?\"\n\nI blushed again. \"God, Laila. Yes. Are you satisfied?\"\n\nShe smiled at me, but her eyes were still determined. \"No, I mean, I'm glad you had a good time and all, but I'm still serious. If you're not into her, just tell her it was a mistake. Turn back now and it's probably still possible to salvage things.\"\n\nI sat down on the edge of the bed, holding the towel around my waist.\n\n\"Well that's the thing,\" I said. \"I'm not sure I want to turn back. In fact, I think I really want this. I'm just afraid of messing things up. I mean, what if we get together and then we break up? I'd lose my girlfriend and my best friend all at once.\"\n\nShe rolled her eyes. \"Come on, Joel. Are you serious? You don't know if the person you like hanging out with most in the world is the right person to get together with? Isn't that the dream? Are you telling me there is another girl who you'd rather spend time hanging out with?\"\n\nI shook my head. \"No, of course not. Mandy's always been my favorite person.\"\n\n\"Ok, then let's go at it from the raw, carnal side: do you think you're going to get a girl hotter than Mandy?\"\n\nI shook my head again. \"No. I can't believe how much she's changed. If we weren't so close, she'd be way out of my league.\"\n\n\"So what, then? The sexual chemistry wasn't there? Bad blow job?\"\n\nI looked at her. I was still surprised how frankly she was talking to me, but my embarrassment was fading away. \"It was one of the most intense orgasms I'd ever had.\"\n\n\"Then what's the problem?\" she asked.\n\nI thought about it. I'd had Mandy firmly planted in the friend category in my brain for so long--even if not consciously--that moving her to the lover category seemed strange. But Laila made sense. What was strange about realizing that our bond had a physical, sexual, and emotional level in addition to the social and pyschological ones? There WASN'T anyone I was more excited to see this summer. I couldn't imagine a relationship with a girlfriend that would somehow improve on how close Mandy and I already were, except for adding a physical element, and Mandy seemed to want that. Really, really want that.\n\nAnd so did I.\n\n\"You're right,\" I said. \"I want her.\" I looked at Laila. \"Holy hell, sis. I really want her!\"\n\nShe stood up and stretched, her tank top exposing her taut abs. \"Was that so hard?\"\n\nI stood up to give her a hug, and the towel slipped from my waist. I caught it, but not before flashing my cock at my younger sister.\n\n\"Whoa, sorry.\"\n\n\"Easy there, tiger,\" Laila said. \"Save that for Amanda.\"\n\nShe walked toward the door and turned back, pointing at my crotch. \"But just in case you were worried, I think that thing will make her very happy.\" And then she turned and walked out the door.\n\nDid my little sister just compliment my cock?\n\n***\n\nI texted Mandy and asked if I could come over that morning. When I got there, her mother was just on her way out the door.\n\n\"Joel! I'm so glad I got to see you before I left for work!\" She gave me a big hug, and I savored the feeling of her athletic, sexy body against mine. For a dancer, her breasts were large--not quite as big as Mandy's double Ds, but at least a C cup. Even with the sports bra she had on under her tank top her cleavage was plentiful. \n\nI tried not to think about it too much though. This wasn't just my best friend's mom, anymore. I hoped it would soon be my girlfriend's mom.\n\n\"Mandy's upstairs in her room. You can just go on up. But come by sometime when I'm around--maybe dinner next week or something! I can't wait to hear all about your first year at college!\" \n\n\"Sounds good, Julia!\" I said. \"Great to see you again too!\" I heard her shut the door behind her as I bounded up the stairs.\n\nI knocked on Amanda's door and then pushed it open. She was sitting in a beanbag chair on the floor, a copy of David Mitchell's latest book in her lap.\n\n\"Oh hi!\" she said. I could tell there was a little strain behind her voice. She was nervous.\n\n\"Hey,\" I said. \"How're you doing?\"\n\n\"Good,\" she said quietly. \"I didn't really know if I'd see you this morning.\"\n\nI felt bad for how worried she looked.\n\n\"Let me just jump right in,\" I said. \"Before I chicken out. I thought about your offer a lot last night. The pros and cons. The risks. The rewards. And here's what I think. We're both going to school in the fall. Who knows what directions our lives will head in. Maybe you'll write the novel you've been dreaming about. Maybe I'll go to law school. Maybe we'll do those things together or separate. I don't know. What I do know is right here and right now, this summer, there is no one I'd rather be with than you. There's no one in the world who I want to sit next to and laugh with and kiss and hold like I want to do those things with you. When I'm honest, Mandy, it's not even a choice. I want you more than I've ever wanted anything else. Will you be my girlfriend?\"\n\nMandy squealed and jumped out of the beanbag chair, wrapping her arms around me, her lips attacking mine in a deep and wet kiss that I felt from my scalp to my toes.\n\n\"I was so worried you wouldn't want me,\" she said. \"That I came on too strong last night and freaked you out. I know I can get a little intense when I'm turned on.\"\n\n\"Are you kidding?\" I asked. \"That was incredible. I loved how wild you got. It's like I know the real you, but I also got to see the animal down inside, the one that no one else sees.\"\n\n\"You're the first boy who's ever seen that side of me,\" she said, blushing. \"I worried you would think it was weird or gross.\"\n\n\"No way,\" I said, kissing her. \"Sexiest girlfriend ever. I love that side of you just as much as I love your nerdy 80s-movie loving side and the way you want to talk about books I haven't read with me and the way we stay up late playing Dead of Winter. You're a more incredible package than I ever could have dreamed of.\"\n\nShe laughed and pulled me toward her, and within seconds we were making out on the bed. We kissed on and off for a while, talking about all the things we wanted to do this summer--seeing some other friends, planning out the summer movie schedule, maybe taking a trip together. Mandy worked part time at her mother's dance studio as a facility coordinator, and I had a job lined up at the library, so we knew we needed to make the most of the time we had.\n\n\"Well in that case,\" she said. \"I think we were interrupted last night. I believe we still have some business to conduct.\"\n\nHer body felt incredible underneath me. Her boobs were meaty and soft between us, pressing into my chest like soft pillows. I had one knee between her legs, grinding my leg against her pussy. We kissed more, our tongues dueling, and she started to moan softly.",
        "\"Mmm, you're a good kisser,\" she said. \n\n\"Back at you, Mads,\" I said, feeling her hips pushing her snatch against me. \"I could get used to this.\"\n\nMy hands found their way under her shirt, and I felt her bra-encased tits in my hands, my fingers exploring her soft skin while my palms pressed against the lace on her bra.\n\n\"Take my shirt off,\" she whispered, and I complied.\n\nHer body stunned me again. Her bra was red and lacy, and it pushed her tits out like two fleshy offerings, round and yielding.\n\n\"Shit, Mandy,\" I said, \"You are so damn hot. I can't believe you want to be with me.\"\n\nShe smiled, but her eyes were filled with lust. \"Believe it, Joel. I want you. Why don't you take off your shirt too.\"\n\nI pulled my t-shirt over my head, pulling it off just in time to see her undoing a clasp hidden on the center of her bra. The red lace undergarment sprang off, revealing her full tits, with their hard red nipples standing up like two exclamation points.\n\nMy mouth latched onto her right breast immediately, taking the nipple into my mouth. I traced my way around the areola with my tongue, and then gently bit the bud at the center, my wet tongue flicking against it as I held it between my teeth.\n\n\"Goddamn, yes,\" she sighed, as I switched to the other nipple. One of my hands was kneading the tit I wasn't sucking on, and her crotch was still writhing against me.\n\n\"Fuck, Joel, that feels good,\" she moaned. \"I knew I liked sucking my own tits, but it feels even better when you do it.\"\n\nI leaned up to kiss her on the mouth again and squeezed her breasts gently. I loved hearing her voice get more intense, her language more depraved, the more turned on she got.\n\n\"Harder,\" she said. \"I'm not a doll, I won't break. Squeeze them harder. Pinch my nipples. Oh, fuck yeah, just like that! Shit that's good!\"\n\nThere was the dirty talk back again. It was such a turn on. My cock was straining against my clothes. She arched her back, pushing her tits toward me even more, her head back and eyes closed. When I pushed her breasts together and licked across both nipples, her eyes snapped open.\n\n\"Get my goddamn shorts off. And yours too.\"\n\nI complied right away. I loved this side of her. Forceful and focused. Almost unhinged with desire.\n\nI dropped my pants first, my hard cock bouncing out like it was spring loaded. She grabbed the shaft in her hand, her teeth gritted with lust. \n\n\"I fuckng love this thing. I can't wait to get it inside of me.\"\n\n\"Uh-unh-unh,\" I said, wagging my finger at her. \"Not yet. I think I have some other ideas first.\"\n\nHer green eyes flashed as her brow creased. \"No way, I've been waiting to fuck you for months. I want that dick.\"\n\nI grinned as I slid down the bed. I wanted to match her words. \"Oh, don't you worry, Mandy. You're going to get this dick. You're going to get it nice and deep. But first let me just inspect where I'm putting it. I felt this little pussy yesterday, but I didn't really get a close look at it.\"\n\nI dropped my head down between her legs, my face just inches from her smooth cunt lips. \"And I certainly didn't get to taste it. Your squirting juices don't count.\"\n\nAnd with that I stuck my tongue out, wide and flat, and licked her pussy from bottom to top. She flexed her hips, driving her pussy closer to me as she whimpered, \"Oh fuuuuuuuuck\" soft and low.\n\nI licked along one edge of her pussy and then the other, kissing at the top right were the stiff little nub of her clit was. I repeated the process, again and again, as I felt her pussy loosening up, the lips wet with my saliva and her juices. And then I flicked my tongue rapidly against her clit. She thrashed above me, a series of low, animalistic moans coming out of her mouth.\n\n\"Oh fuck, Joel, that feels good. Oh, God, I've never had a boy lick my pussy before. Shit, this feels incredible. Ooo, fuck.\"\n\nI pulled back for a moment, her words sparking something in the back of my brain, but I ignored it and said, \"Mandy, help me out. Spread your pussy for me, baby.\"\n\nShe reached down with her left hand and made a V with her index and middle fingers, spreading her pussy lips and exposing the pink paradise within. \n\n\"Has anyone ever told you your pussy is gorgeous?\" I asked.\n\n\"Mmm,\" she groaned. \"You like it? You like my little cunt?\"\n\n\"It's fucking perfect, baby,\" I said, sticking my tongue out and licking it again, darting it inside. \"I can't want to fill it up with my hard cock.\"\n\nShe shuddered a little bit, and then I felt her right hand against the back of my head, and she pulled my face into her pussy. I opened my mouth wide and sucked it like a peach, her juices spreading all over my face, my cheeks, running down my chin. I couldn't believe how wet she was, and kept sucking away. She tasted incredible. I wanted to drink her in all day long.\n\n\"Oh, fuck, baby, get that pussy,\" she cried. \"Drink in my juices! Suck on my clitty!\"\n\nI responded as directed, moving my mouth up and sucking on the thick nub of her clit. Then I eased off and flexed my tongue, extending it deep inside her cunt, as far as it would go. I pulled it back and shoved it forward again and again, penetrating her depths with my stiff tongue.\n\n\"Oh God!\" she cried, and this was no low moan, but a full throated shout. \"Oh god oh god oh god, yes! Tongue fuck me! Taste me! Lick me out! Eat that fucking pussy, Joel! Eat it!\"\n\nI complied, licking, sucking, tonguefucking her cunt for all I was worth. When her breathing started to get ragged, I thought she was close to cumming, so I moved back up to her clit, sucking it into my mouth as I shoved two fingers deep inside her.\n\n\"Oh fuck!\" she moaned breathlessly. \"Oh jesus fuck! More, you motherfucker, more! I'm about to fucking cum!\"\n\nI pulled my hand out and shoved it in again, this time with three fingers. I could feel her pussy stretching around my fingers, her slick juices pouring around my hand, and I couldn't wait to get my cock inside of her. \n\nBut not until she came. Her hand on my head was pushing it hard into her snatch now, the other hand squeezing her nipple. And then she arched her back again, hard, and shuddered, and just like last night I felt her squirting all around my hand. Only this time my face was right there too, and sucked up as much of her squirting cum as I could into her mouth. She tasted like nectar, but also musky, primal. I wanted to taste it forever.\n\n\"FUUUUUUUUUUUUUUUUCCCCCCKKKKKKK!\" she screamed as she came, and I kept my mouth sealed on her cunt until I felt her body relaxing above me. Then I pushed myself up the length of her and kissed her deeply. Her tongue probed mine,savoring the juices I hadn't swallowed yet,and when we broke the kiss she grabbed my head again in her hands, licking my cheeks and my chin, trying to taste more of her own cum. It was fucking incredible.\n\n\"Goddamn, you little minx,\" I said. \"I love watching you cum. I love hearing your dirty little mouth.\"\n\nShe was panting as she laid back down on the bed. \"It's only for you, baby. Only you get to see the real me. The slut I am deep down inside.\"\n\nI slapped her tit playfully, watching it jiggle. \"You are a good little slut. I wouldn't have you any other way.\"\n\nShe giggled and reached her hand down to my cock, stroking it slowly. The giggle reminded me of all the silly laughs we had shared together, the late night phone calls and in-jokes that had made us so close. Her laugh was a bridge between that Mandy and the hot, sweaty fuck sessions we had started last night. It was intoxicating.\n\n\"So let me be that slut for you, stud. Get this fucking thing in my cunt and let me know what a real man's dick feels like.\"\n\nI pushed up on my arms and grabbed my cock with one hand. She reached down and spread her pussy lips open again, and I placed the head of my cock against her opening. For a moment I just stayed there, sliding the tip of my dick along her pussy, adding my precum to her already wet little cunt. And then she grabbed my shoulder.\n\n\"Quit teasing me, Joel. Shove that cock inside me and fuck me!\"\n\nI pushed in in one deep, smooth stroke. She'd already told me she'd popped her cherry masturbating, and I knew she played around with dildos and who knows what else, so I didn't meet any resistance going in other than the tight and warm pressure of her pussy. Still, it was only my second time inside a cunt, and it was her first time with a real cock, and both of us moaned with the intense pleasure of the moment.\n\n\"Oh fuuuuuuuuuuuucccccckkkk,\" she moaned softly. \"It's even better than I imagined! And your cock, Joel. It's so fucking thick. It feels so goddamn good!\"\n\nI pulled my hips back and pushed in again, savoring her wet love tunnel. And then again, faster. And again faster. And before I knew it we were fucking at a nice steady pace, our hips coming together in a rhythm that seemed so natural I wondered again how we had never gotten together before this.\n\n\"Damnit, Mandy, I feel like my cock was built just for your pussy,\" I groaned.\n\n\"That's right, baby, that's right. Me too. This pussy is all for you, you stud! Fuck it. Fuck my little pussy! Goddamn, you feel so good! You feel even bigger than you looked! It's so fucking hard inside me, and hot! I love it!\"\n\n\"That's right, baby. Take it. Take my cock deep inside you.\"\n\n\"Yeah,\" she said. \"Fuck me, Joel. Fuck me! Fill me up!\"\n\n\"You like it? You like this thick cock up your little pussy?\"\n\n\"Oh fuck yes I do, you stud! Because you ARE a stud. A fucking big-dick stud! And I'm your little whore!\"\n\nI moaned again. Her dirty talk drove me crazy. Even I was getting to expect it, it was still so different than her normal talk that each word was like a shot of adrenaline running through me. My cock felt like an iron bar. \"That's right, baby. You're my little slut. My little whore Amanda. I wish I'd known sooner how much of a nasty little whore you are. Why didn't you tell me? All through high school I should have been doing this to your slutty little body. Fucking plowing your dirty little pussy with my cock for years. Would you have liked that?\"\n\n\"Oh god yes,\" she moaned. \"I wanted you, so fucking bad! Worse than I ever admitted, even to myself. But I was afraid you wouldn't want me. I needed my body to remind me what it was for. I needed to give you a tight little pussy like you deserve. And big fucking tits like you deserve. A juicy round ass like you deserve. So I can get that hard fucking cock like I deserve. And now I'm all fucking yours. I'm your little cumslut whenever you want me to be. I want to worship this fucking cock with my tight little fuckhole, baby. So fuck me!\"\n\nI began slamming into her harder. The wet sounds of her cunt being invaded by my cock sounded like music to our ears. I bent down and sucked on her tits again, her big firm tits filling my mouth with their softness, and she moaned like a little pornstar. Then she twisted at the waist, and I rolled over onto my back.\n\nShe rode me then, hard, her gorgeous tits hanging over her in my face, her knees digging into the mattress. She rose up off my dick and thrust down, and I could feel her pussy squeezing my cock. It felt divine. \n\n\"Fuck me, you motherfucker,\" she cried. \"Fuck me like you own me! You do. You own this little cunt. You turn me into such a depraved little slut! You like that? You like my big fucking tits in your face? You like seeing them bounce together when we FUCK? Suck on them, Joel! Suck my fucking tits and fuck my tight pussy!\"\n\nI lifted my head up, latching onto one of the swinging boobs, feeling them both jiggle against my face was the force of our thrusts, her long black hair tickling my cheeks. It was fucking paradise.\n\n\"God, you little bitch, you feel like heaven. You feel so fucking amazing!\"\n\nShe pulled off of me for a moment, sliding her knees back, sucking my cock into her mouth, thrusting her head down over my man meat for one, two, three quick strokes of her mouth, and then slid forward again and plunged it back inside her cunt.\n\n\"God fucking damn, we taste so good together, Joel.\" And she leaned down and kissed me deep, her tongue swirling our combined juices between our mouths. It was incredible.\n\n\"Oh, fuck that's hot! Jesus, you nasty little slut, I love your filthy mind!\"\n\n\"I fucking love this, baby!\" She cried out. \"I fucking love YOU! I've been fantasizing about this for so long. Every fucking variation I could think of. I want to do it all! You can do anything you want to me, Joel! Fuck my pussy, fuck my tits, fuck my ass. Cum inside me, cum on me, piss on me, spit on me, whatever you fucking want, just don't ever stop fucking me! I want you in my life, I want this thick goddamn shaft in my pussy, forever, baby! I'm all yours you sweet motherfucker!\"\n\nEvery word made me harder and harder, and I knew I wasn't going to be able to hold back much longer. It was hotter than any porn scene I'd ever watched, because Mandy was so fucking sexy, and because it was US, and because even if the fucking seemed raw and filthy, it was driven by the passion and love we felt for each other. \n\n\"I'm gonna cum soon, you little slut. Where do you want this hot fucking cum this time?\"\n\n\"Shoot it deep inside me, Joel. Cum deep in my little cunt and fill me up with your jizz! I want it so fucking bad! I've never felt anyone cum inside me before! I want you to be the first! I want you to be the only! Fucking explode in my wet goddamn pussy!\"\n\nAs I felt my balls preparing for lift-off I reached up and grabbed her fat swaying tits again, squeezing them hard, watching her flesh spill out around my hands, and rolling the hard nipples between my fingers. She put her hands on top of mine, squeezing her tits with me as she arched her back, her orgasm starting just before my cock unleashed a huge load of cum deep inside her cunt.\n\n\"Oh fuck I'm cumming,\" she yelped, and then \"OH FUCK! FILL ME UP!\" as she felt my cum exploding inside her. She lost her breath, her eyes rolling back, as the waves of orgasm pulsed through her body, but my screams of pleasure made up for her sudden quiet.\n\n\"OH JESUS CHRIST YOU HOT LITTLE BITCH I'M FUCKING CUMMING! TAKE MY CUM! TAKE MY FUCKING CUM AMANDA! MY LITTLE CUM WHORE! I FUCKING LOVE YOU!\"\n\nIt felt like rivers of jizz were flowing out of me, pulse after pulse of thick cum shooting deep up inside her. My cock contracted again and again.\n\nAs she started to come down from her orgasm, she collapsed onto the bed beside me, her tits quivering as she caught her breath. When the words came back they came in a babble.\n\n\"I never knew it I never knew it could feel like this oh my god why don't people just fuck all the time Joel it felt so fucking good you made me feel like I've never felt before and it was jesus christ it was so goddamn hot you fucking stud.\"\n\nShe caught her breath and looked over at me. \"And did you say you love me?\"\n\nI smiled, my own heartbeat starting to come back to normal. \"I wasn't the only one. And why not? I've loved you for years, even if it was just as a friend then.\"\n\nShe smiled back. \"Friends don't do that to each other. I didn't mean it like a friend.\"\n\nI kissed her lips. \"Neither did I. And believe me, that was one of the least shocking things you said.\" \n\nShe laughed. \"God, I don't know what comes over me. It's like there is no filter on my brain anymore, and every depraved thought I have just comes pouring out of my mouth. It's ... It's freeing, you know? Like I don't have to be my normal self--and I like my normal self--but I don't have to think about anyone else while we're doing it, what they might think of me--except for you. Like I can just be this conduit for pleasure, everything I want deep down in the darkest corners of my body. I'm glad it doesn't freak you out.\"\n\nI looked down her body, at her juicy round tits, her smooth stomach, her soaked little pussy, which was still wet and dripping with my thick cum. \"God no! It's so hot! An even bigger turn on than your incredible body--and I didn't think that was possible--because it's so raw and intimate. I mean, goddamn you're sexy. I love the you when your brain is in control, and I love the you when your sex drive is in control, and I love that somehow they're both part of the same incredible person who wants me too.\"\n\nShe smiled and kissed me hard. I felt my cock start to stir again.\n\n\"Hey, before I get carried away again, you're leaking, baby. You want me to get you a washcloth or something?\"\n\nShe reached down, scooping some of the cum up out of her pussy with her fingers and playing with it, watching the stands of fluid that connected her fingertips before sticking them into her mouth and sucking my jizz and her cunt cream off, one finger at a time. \n\n\"I mean, I don't really need one, but it's sweet of you to offer.\"\n\n\"Fuck me,\" I grinned. \"Just when I think I've seen everything, you surprise me again with how goddamn fucking hot you are.\"\n\nShe laughed wickedly. \"And filthy.\"\n\n\"So fucking filthy.\"\n\nI kissed her deeply, then rolled out of bed. \"I've gotta go grab some water real quick. I'll bring you a glass too. Don't go anywhere. I'm not done with you.\"\n\nI stood up, my cock still dripping with a little bit of cum, and walked out of her bedroom buck naked, Mandy idly tracing her fingers along her cunt behind me. I made it to the kitchen, filled two glasses with ice and water, and was on my way back when I saw Julia standing in the living room, staring at me, her mouth wide open.\n\n\"Oh, shit,\" I said."
    ],
    "authorname": "WillyShakes",
    "tags": [
        "dirty talk",
        "big tits",
        "pussy eating",
        "friends",
        "hardcore",
        "18-year-old",
        "romantic",
        "slut"
    ],
    "category": "Erotic Couplings",
    "url": "https://www.literotica.com/s/more-than-friends-ch-02-4"
}
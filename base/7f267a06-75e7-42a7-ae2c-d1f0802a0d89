{
    "title": "Silver Ch. 05",
    "pages": [
        "Chapter 5: Son and Lover\n\nPelaam\u00a9: October 2007.\n\nTristam had avoided any cases for just over six weeks. They had all suffered, leaving them both mentally and physically drained, from the events on Terra II. As the team's commanding officer, as well as their being his family, he knew they needed to relax fully. He especially needed to know Theophilus was capable of resuming his place, and full participation, before a new mission was accepted. Things had been particularly hard on the blond. However Tristam, and the others, had been pleased and proud at the way the young Dregan had recovered. \n\nHe had watched as the haunted look in expressive golden eyes had slowly been replaced by his normal confidence. He and Uist, in particular, had spent a great deal of time both together and individually with Theophilus, assuring him of their love for him and his unwavering place in their lives. Rayner and Sholto had ensured that the three of them had plenty of relaxing times as well as fun, not letting Theophilus duck out of anything they had planned. Throughout it all, Xavier had stood back, allowing his extended family help heal his mate, letting Tristam know how much he was grateful for their united care.\n\nTo some degree, Tristam now felt he no longer had any choice. Jameson had contacted them to say they had some strong, reliable information on a slaver the Elite had long wanted to catch: The Sheik. So named because he wore long, flowing robes and a turban wrapped around his head and face to preserve his anonymity. The thought of young, helpless men and women snatched from their homes and family to be slaves, of one kind or another, had Tristam particularly distressed. He desperately wanted his to be the Lead Team. \n\nAlthough to some degree breaking a slaving ring was a 'fire-fighting' exercise, the more they broke the more lives they saved, even if the trade didn't cease. He knew Theophilus had a strongly compassionate nature and would not be approaching the blond if he had not already spoken to Xavier, both as husband and physician, and been assured that Theophilus was ready to work again. Taking the young Dregan to one side, he had not even finished his talk before Theophilus was almost begging for them to take on the mission and for him to be allowed to participate. He had been so proud of the less mature male's attitude and commitment. They had hugged tightly before he had sent Theophilus to Xavier and he had contacted Jameson. Now they were heading to rendezvous with the older man.\n\n****\n\nIn their quarters, Tristam laid side-by-side with his beloved husband. Their hands traced random patterns on each other's skin and they smiled gently. Rayner pushed his bigger mate onto his back and kissed him thoroughly, straddling over the broad, golden-tanned body.\n\n\"Thank you,\" he murmured, nuzzling at Tristam's throat. \"For making Theophilus so happy.\"\n\n\"What did I do?\" Tristam asked, his voice a deep, sinful rasp. \"I want to make sure to do it again if this is my reward.\"\n\nRayner laughed softly, his tongue then meandering down his husband's throat to his chest where he finally sucked contentedly on a dark pink nub.\n\n\"Although he is much improved, knowing you wanted him to participate in this case, to still be a part of the team, meant so much to him.\" Rayner said. He felt the discontent even as it began in the older man's mind. \"Hush, love,\" he admonished, nipping at the succulent nubbin to a small gasp. \"You know it is a part of his heritage. Sholto has spent a lot of time teaching Theophilus some of his world's more modern history and customs. He had never revisited Drega, even through computer, from the day Xavier took him as his mate. He understands, intellectually, his world has moved on. But he still finds himself tied by what he was brought up to think and accept. The change is happening, both for the planet and for Theophilus, slowly. This is the start. When you think about it, he never expected to have to face anything to do with Drega again when Marcellous effectively cast him aside.\"\n\nTristam nodded slowly. That was something he had not considered. He could now understand some of Theophilus' feelings. The blond Dregan had subconsciously held onto a measure of his origins when faced with an unknown universe, whereas he himself had no idea of his own. Whoever had taken him and made him into a hybrid of human and PrideHomer was also unknown, as were their ultimate intentions towards him; although a human who could see, hear and smell as well as the cat-race had obvious advantages in certain situations. But he had only come to be able to control his abilities with the care and compassion shown by Jameson and Aurora. When first in their home, they had spent untold numbers of days retreating to a room where it could be light, sound and smell free. His mastery of his senses came from love, devotion and determination. He doubted whether if he had remained a prisoner, he would be sane or even alive.\n\n\"Hey,\" Rayner murmured softly, effectively breaking into the older man's thoughts. \n\n\"I love you, angel,\" Tristam said. \"You are so very, very special.\" He rolled their bodies and began to caress his lover's soft, honey-tinted skin. Mouth and tongue began to follow the trail of his hands until his face was buried in the dark nest of curls that adorned a smooth, erect penis. Tristam rumbled his approval as Rayner spread his legs wide and the bigger male licked around Rayner's sac and shaft. He could taste and scent his mate's musk and arousal. Tendrils of pleasure from his lover's mind slipped into his own, increasing their mutual stimulation.\n\n\"Feels good,\" Rayner whispered, his hands caressing Tristam's head and shoulders. \"Oh, that's nice,\" he gasped as his husband's talented tongue swirled around the reddened head of his shaft. His hips moved in desultory thrusts and he enjoyed the feeling of his lover's warm, wet mouth around his erection. \"Make love with me,\" he murmured.\n\n\"Always,\" Tristam vowed, reaching for the oil they used. Kneeling between Rayner's splayed thighs; the big male thoroughly coated his fingers. He leant down to kiss his beautiful love as he probed delicately between smooth nether cheeks. He caressed the tightly furled rosette that granted him entry to his mate's body before reaching inside the hot, tight channel. They let their shared pleasure ebb and flow between their minds as Tristam tenderly prepared Rayner's body amongst adoring kisses and words of love and devotion. As he stroked his fingers across his mate's jewel, it was almost as electrifying as having his own touched as Rayner shared the mental delight with him. All too quickly, however, their bodies demanded more.\n\nRayner embraced his husband as the bigger man positioned his sex against Rayner's prepared portal. \n\n\"Make us one, Tristam,\" he begged. His moan of pleasure was echoed by his mate's as two bodies united. Slowly everything else slipped away, all that existed was tight heat and the flow of joy between them as the lovers sought to be as one physically, mentally and spiritually. Their bodies moved in a silent harmony, dancing to music as old as time that only they could hear. Soft sounds of need and pleasure added to the melody. Their hips undulated in synchronised movements, driving them both to a shattering crescendo and the outpouring of their combined seed. Rayner coated their bodies and Tristam filled his husband with his release, each man vocalising shared joy. For long moments they lay together, content to simply bask in their orgasmic afterglow. \n\n\"I love you, Tristam,\" Rayner said quietly, his voice laced with satiated pleasure.\n\n\"I love you,\" Tristam replied instantly. He manoeuvred their bodies to lie facing his beloved. He kissed reddened, swollen lips. \"I don't like this mission. Even though I know I want to do it,\" the older man confessed. \"You, Sholto and Theophilus are all young and beautiful enough to catch the eye of this man and you will be where he can reach you.\"\n\n\"And we will be watched over by you, Uist and Xavier. You can be with us in moments if anything happened we couldn't control.\"\n\n\"I just don't like deliberately putting any of you in jeopardy. I never have and never will.\"\n\n\"Any of us could refuse and, in case you've forgotten, it was our idea to make ourselves prominent in the hopes we *do* catch his attention. I trust you. I trust all of you. Anyway, all we'll be doing initially is gathering data and allowing ourselves to be seen in what we believe to be his most usual haunts. How dangerous can that be?\"\n\n\"Dangerous enough,\" Tristam growled, gathering the lithe form close. Something was making him feel very protective. Putting it down to concern for his mate's and chosen brothers' safety, Tristam settled them both snugly. As Rayner slept, he mounted vigil. \n\n****\n\nIn another part of the ship, Uist was feeling the same level of inexplicable protectiveness. He had barely let Sholto further than arm's reach since Tristam had confirmed they had accepted the mission. Additionally, he had felt it necessary to check out those to whom he was Protector. Rayner and Theophilus had been happy to accept his need as simply part of his nature and he had been grateful for their forbearance. \n\nHe nipped gently at the creamy, fur-dusted mounds that were before his avaricious eyes. His lover was on his hands and knees, his head pillowed on his arms. The cat-man's tongue slid slowly down the exposed cleft once more, teasing the younger human and he growled approvingly as Sholto pushed back, silently demanding more. Their combined scent of arousal and desire was a potent aphrodisiac and this time Uist's tongue thrust greedily inside his mate to taste further.\n\nSholto moaned his appreciation as he felt the thick, slick, agile muscle push inside him. His lover's protectiveness had resulted in a day of touches and caresses that had kept the young man's arousal simmering. As tempting as it had been to haul Uist into their den and love him senseless earlier, Sholto knew if he let nature take its course, waiting until Uist was at the edge of his control, it would be even better. Already his mate's tongue had mapped out every inch of his body, leaving not a millimetre that unlicked. The undivided, erotic attention had driven Sholto to his first climax. He was again hard, dripping and eager, but Uist was still wetting him, stretching him, using his sinfully talented tongue to drive Sholto to the edge of the precipice over and over. It was amatory torture and Sholto loved it, loved Uist, and loved the way his big mate could play his body to perfection.\n\n\"More, please, love,\" he whimpered, pushing back. \"Oh, yeah, gooood,\" Sholto gave a guttural groan as thick, oil-drenched fingers replaced his mate's tongue. They swept over his jewel repeatedly until the young man was almost incoherent with need and his pleas were unintelligible except on a primal level.\n\nSatisfied with his effect on his adored husband, Uist lined up his slickened sex against the entrancing entrance and finally pushed inside the tight channel. For a moment he let both of them relish the feeling of being as one and then began to thrust in long, slow, deep movements, each one dragging over his mate's sweet spot until Sholto was shaking with need. Uist watched his shaft slide in and out of his lover before pulling the smaller body to sit astride his strongly muscled thighs. In this position all the control was his. He used powerful haunches to drive himself into Sholto's body, holding tight to the smaller man with one hand and pumping the rock-hard rod between his mate's legs with the other. His kissed and nipped at the fragile throat, bared for his ministrations. He could feel and scent how close his lover was.\n\n\"Come for me, mine,\" he rasped in Sholto's ear, his voice low and thick with arousal.\n\nThe sound, as much as the words, was enough for the younger male. Stars danced before Sholto's eyes and his body shook with the ferocity of his release, his seed fountaining over the bed. He felt his body clamp brutally around the flesh impaling him and he moaned wantonly as hot, wet juices filled him. He felt thoroughly debauched and totally sated. His limbs were leaden and he simply let his husband position him as the cat-man desired.\n\n\"That's nice,\" he mumbled, as his mate's sinful tongue rasped over his body, licking him clean. Then he was tucked securely up against Uist's large, strong body.\n\n\"I love you, mine,\" Uist rumbled.\n\n\"I love you, too,\" Sholto replied, nuzzling against Uist's shoulder.\n\n\"Sleep safe,\" Uist whispered, as he felt Sholto slip into slumber. As he kissed his mate's temple, apprehension tickled at the periphery of his awareness. Those he loved were purposely undertaking dangerous work and he had to permit it. His grip tightened around the lithe form. He vowed to be especially vigilant.\n\n****\n\nIn the ship's pool, Theophilus and Xavier were enjoying relaxing in the water. Theophilus had felt a little off-colour and, given the upcoming case, neither male were unduly surprised. The idea to play in the pool was Xavier's and Theophilus was grateful to his husband and feeling himself once more. He laughed joyously as his mate's tail snaked between his spread thighs as he trod water and tickled at his perineum. Strong arms enveloped him and he was carried, laughing and kissing Xavier, into shallower water. Theophilus murmured his pleasure as his mate's tail slipped between his cheeks to thrust gently into his rapidly dilating body.\n\n\"You are easily aroused today, my heart,\" Xavier whispered, before his tongue slid in and out of the blond's willing mouth.\n\n\"I love you so much, my husband,\" Theophilus replied. \"It seems I just cannot get enough of you and your touches. I am ... apprehensive ... about this mission. I do not want to let any of you down perhaps that is why I feel I need you so much.\"\n\n\"Put it from your mind and let me love you, my sweet. We can talk in our nest,\" Xavier crooned.\n\n\"Yes, oh yes, yes,\" Theophilus' words became a chant as Xavier's tail was replaced by his twin sexes. Theophilus knew how close he was and unsurprised his lover formed his knot instantly. Xavier's tail wound around his aching erection and within three rhythmic contractions his climax erupted. He heard Xavier's trill of completion as he cried his husband's name and he felt the reptilian's seed flood his still spasming channel. He slumped replete in strong, loving arms.\n\n\"So tired,\" he murmured. He often felt drained after they made love but, at that moment, he felt incapable of keeping his eyes open.\n\n\"You are worrying about the mission too much,\" Xavier whispered. \"Let your body tell you what you need. Do not push yourself too hard. I will carry you to our nest and when you wake we will talk.\" The lizard gave his unique smile as Theophilus' head snuggled into his shoulder and a soft, unintelligible murmur was his only reply. Xavier hoped his mate did not worry himself into exhaustion.\n\n****\n\nFrom their meeting with Jameson, the six returned to 'Silver' with chips, tapes and even some paper records all with information on, or believed to concern, the slaver they sought. Whilst Tristam, Uist and Xavier remained on the main deck, piloting the ship and discussing the ways they could best help protect their mates, Sholto, Rayner and Theophilus were closeted away, making themselves familiar with every piece of data. With their nemesis preserving anonymity, they could not always be certain the reports concerned the same man. Sholto offered the thought that there could be more than one as some of the information seemed too old to relate to the same individual.\n\n\"I will return quickly, my brothers,\" Theophilus excused himself, smiling reassuringly as Sholto and Rayner looked up. He quickly headed for the ship's medical centre, knowing his mate was on the command deck. It was distasteful to him to be secretive towards his husband or his family. However, he had not felt himself for a couple of weeks. He was certain he was not ill, but perhaps still feeling some lingering effect from the time at Terra II. He desperately needed to undertake this mission and did not want the overly protective, more mature males, leaving him out. He ran a simple blood test; not wanting to do anything that Xavier could find and question him about. \n\nHe stared at the result and quickly ran a second. The result did not change. //It cannot be// he thought to himself, but he knew the results did not lie. He buried his face in his hands for a moment and then stood up straight. He could manage this. It had already been decided that if they had no success within a week, they would need to withdraw and begin again. //A week is no time at all. I can wait that long. I shall wait that long.// He shut down the computer terminal, but in his stunned state failed to stop the machine automatically saving the results. He selected some medicinal herbs that would help fortify his system and then returned to Sholto and Rayner.\n\n\"These are the space station bars that our man seems to prefer,\" Sholto said as Theophilus joined them once more. \"There are three of them. We thought we could work in pairs,\" he explained. \"You and me, Rayner and me and you and Rayner. Does that seem fair?\"\n\n\"I am quite happy,\" Theophilus nodded. He smiled at the two humans so beloved to him. He was making the right decision. A week would make no difference.\n\n****\n\nIt was the end of a tiring and distasteful day. Three protective males sat at the poolside as their mates swam and splashed, both cleansing and comforting themselves following the day's events. Once the three young men were dry and dressed once more, they convened a meeting with the Leader of the Elite they would be working closest with. \n\nDarius was pleased to find he was as welcomed by the attractive Dregan and his hovering reptilian mate as by the others of Tristam's team. He had held some lingering concerns that either Theophilus or Xavier may not have been happy to work alongside the man who had put the blond into custody when accused of murder, however, Theophilus had treated him affectionately and warmly.\n\n\"How did you fare, guys?\" he asked as they sat around the circular table. At the looks that passed between them, Darius guessed it had not been pleasant.\n\n\"We spoke privately to the bar owners. Only one owns and runs his bar, the others employ managers to do the work,\" Rayner said. \"The two run by managers were by far the ... seedier.\" He gave a shudder and Tristam and Uist growled at the implied memory. Rayner gave them a wry smile. \n\n\"One of the owners, despite seeing both mine and Theophilus' Elite Security ID chips, actually asked me if I was interested in 'selling' Theophilus,\" Sholto said. This time three males gave the impression of growling, Xavier's frill becoming redder and his trill low and menacing. \"A young Dregan is almost unheard of out here and, of course, Theophilus is exceptionally beautiful.\" Sholto grinned at his brother, who stared at him with wide eyes.\n\n\"Sholto, please,\" Theophilus murmured, a crimson blush stealing over his face.\n\n\"My mate speaks true,\" Uist rumbled. \"We each have a beautiful husband and we regularly experience avarice and deal with it. However, this goes beyond normal jealousies.\"\n\n\"The one who owns and runs his bar seemed helpful.\" Theophilus spoke, his colour slowly returning to normal. \"He wishes to keep a 'clean bar' as he put it. He is happy for us to sit and watch for the Sheik. He was even willing to point out the man if we missed him. With the other two, I think it would be advisable to have undercover Elite stake them out. I do not think we would be supported, or particularly safe, in their establishments.\"\n\n\"I think our other teams could also find it profitable to enquire into the background of someone as foolish as to proposition Sholto so brazenly,\" Xavier said, the lizard's anger making his voice brittle.",
        "\"I think credit signs made him speak without thinking,\" Sholto said. \"He was almost unable to take his eyes off our brother to form coherent speech. Anyway, we therefore thought it best to remain in the bar of Barlok, who seemed affable enough, and stick to being there in pairs over the next several days. We can make covert notes of all who visit the bar and, between the three of us, be there during its opening hours.\"\n\n\"You have given things a great deal of thought and discovered some interesting sidelines for us to follow up on,\" Tristam said, nodding approvingly at them each in turn. \"You are all certain you want to go ahead with this? No one wants to step back a little and follow up other leads?\" Tristam was not surprised when all three insisted they wished to focus on their prime miscreant. \"Ok then,\" he smiled grimly. \"We go ahead as you've outlined and Darius will select undercover agents for the other bars as well as someone to follow up this other man. What was his name again?\" he asked Sholto.\n\n\"Lokai,\" the auburn-haired young man said, his voice laced with distaste.\n\n****\n\nIn their nest, Xavier diligently loved his beautiful mate. His tail was deep in tight, slick heat, its tip caressing Theophilus' sensitive jewel. His tongue encircled the head of the smooth arousal, the forked organ flicking rhythmically over the rosy flesh to mewls of pleasure and delight as the blond thrashed wildly. His golden hair was spread luxuriantly over the cushions and pillows catching a myriad of colours from the lamps Xavier had lit. A delicate pinch to a reddened nipple sent Theophilus over the edge, Xavier's name on his kiss-swollen lips. Carefully, Xavier's formidable maw swallowed all Theophilus could offer.\n\n\"Beautiful,\" the reptilian husked. \"So very, very beautiful.\" His large hands swept lovingly over heated skin to wordless murmurs of appreciation. Xavier could see his beloved was completely spent from the intensity of his climax. He gave a mental frown. His young mate was tiring too easily. He was concerned Theophilus was pushing himself too hard. His tongue slid over the blond's throat. Even his taste seemed to be subtly altered. He cradled Theophilus to his chest. \"Be safe, my heart,\" he whispered. \"Come home into my arms where you belong.\" He carded a hand through the blond mane, pressing random kisses to his mate as he did, not wanting to waste a moment of time with the most precious thing in his life. He would catch up on his rest the next day. For now he intended to drink deep of his husband's beauty and enjoy the feeling of the sated, soft and warm body in his embrace.\n\n****\n\nRayner and Theophilus sat as unobtrusively as possible in Barlok's bar. Theophilus wore a mantle to hide his tresses. Although the young men had dressed dowdily, in an effort to appear needy, their beauty was unmistakable. Rayner gave a small smile at remembering Barlok's warning that Theophilus was a rare catch and suggesting someone else be found to take his place. Theophilus coughed discreetly as he saw the barman scurrying over, a tray of fresh drinks in his hand.\n\n\"I've had a very good shout your man is both in town and has cargo. The Sheik is renowned to be both a successful trapper as well as courier.\"\n\n\"Trapper? Courier?\" Theophilus queried as he took the drinks from the tray.\n\n\"'Tis easy enough to catch prey, the men and women that is,\" Barlok explained. \"Couriering them to their destination 'tis the more dangerous. 'Tis where the bigger money is made.\"\n\n\"So the man we seek is both.\" Rayner said. \"The sooner he's stopped the better.\"\n\n\"Others have tried before, my brother,\" Theophilus warned.\n\n\"Your friend here would be worth a King's ransom,\" Barlok said thumbing in Theophilus' direction. \"I'm glad ye at least covered his hair.\"\n\n\"There would be instant retribution if any tried to harm Theophilus,\" Rayner warned. \"Apart from being under the protection of Elite membership, he has a husband and Protectors who would deal with would-be kidnappers.\" Rayner was not sure whether Barlok was warning or coveting. In this place it seemed friendship was bought and sold, just another commodity to trade.\n\n\"Just making sure ye know what you're doing, boys,\" Barlok said, shaking his head. \"There's those around here would sell their grannies to slavers if 'twould earn them the price of another round of drinks, or the price of a ride out of this station. Young boys like you shouldn't be here. 'Tis dangerous enough for those that know the place and call it home, 'tis not for the likes of ye.\"\n\nRayner could not help but smile as Barlok went back to the bar, shaking his head. \n\n\"Perhaps I misjudge him,\" Rayner said softly.\n\n\"He seems inoffensive, but so many eyes watch us, my brother. I feel it.\" Theophilus sipped carefully on the fruit juice he had selected. Some things made him queasy quickly and he was having difficulty selecting what was and was not safe here. It was not a good option, the taste too tart, and Theophilus eyed distastefully where the bathrooms were located.\n\n\"Not alone,\" warned Rayner. \"We get fresh drinks on our return.\"\n\nTheophilus felt miserable as he pushed back his tresses and wiped at his face. He was almost never nauseous and it left him feeling shaky. He flushed the less than clean facility and then stepped outside the stall. He frowned as he did not see Rayner. He moved towards the sink and glanced into the dirty, stained mirror. The reflected sight of his friend on the floor had him whirling with a distressed cry but, even as his hand sought his weapon, he felt the dart penetrate his throat and he dropped soundlessly to the floor.\n\n\"Two for one,\" the robed and turbaned figure rasped as he appeared from his place crouched above an empty stall. \"Lokai has earned a bonus.\" He removed the wrist communicators with a barked laugh, dropping them contemptuously to the floor. He slung the blond over a shoulder and the brunette he tucked under an arm. He exited as he had entered, via a door that appeared secured from the inside. \n\nBarlok glanced over to the table where the boys should be sitting. They still had not returned. A cold dread washed over him. He hurried to the washrooms and stared inside. Two communicators lay on the floor. As he looked at them he felt a cool breeze on his back and turned with a soft moan of denial. His shoulders slumped as he went to retrieve the discarded equipment and then to the bar to make a call.\n\n****\n\nBarlok had been discomfited at the menacing presence of the big blond human male and more than nervous by the attitude of the PrideHomer, but it was the Phixian, whose species he had only ever seen as placid, who terrified him. The great lizard pacing angrily, tail lashing, frill raised and vermillion, whirled on him once more.\n\n\"Are you certain you saw and heard nothing?\" the reptilian demanded.\n\n\"If you have played any part in the abduction, I will kill you ... slowly,\" the PrideHomer hissed in his ear, turning Barlok's bowels to water. He shook his head frantically, his mouth too dry to speak. He had no doubt the threat would be made good and he could almost feel sorry for whoever was involved. \n\nAlmost. Because he would gladly have given these men a name, if he had one, to save himself.\n\nThe three males had combed every inch of his washrooms, but had come away empty-handed. He had, however, overheard them muttering about a vaguely familiar scent, but one they were unable to place. Barlok wanted to appease them. He wanted to be as far away from them as possible.\n\n\"I had a good call the Sheik was in town. I told them to be careful. Such pretty ones'd turn anyone's head,\" Barlok began to babble. \"No one knows his name. He's a dangerous man. I've heard he's killed many who tried to take him in. I'm sure the reason he hides behind that turban is as much to hide his scar ...\" As Barlok gabbled on he ran a hand diagonally down his face in imitation of a jagged mark. If he had been terrified before, there was no word to describe his level of fear as the human and PrideHomer threw back their heads uttering inhuman cries of fury and the shriek that came from the Phixian was a sound Barlok prayed he never heard the likes of again. He was certain he would hear those sounds in his nightmares for months to come. As the three flew from his premises, the PrideHomer's voice was the last he heard and it turned his marrow to ice.\n\n\"He is a dead man.\"\n\n****\n\nTheophilus awoke slowly. As consciousness returned, he remembered what had happened to him and Rayner. He could hear no one else in the room and opened his eyes carefully. He felt light-headed and nauseous, each seeming to fuel the other. The drug was clearly taking a long time to clear from his delicate system. He sat up, holding his stomach as it protested the motion. He was surprised to find he was in a sleeping quarters. He had expected to be in a cell. His hair had been freed from its mantle, but nothing else seemed out of place. He stared with disgust at the clothing laid out next to him; a gold chest harness and a diaphanous gold kilt. The kind of clothing a pleasure slave would wear. He swept them to the floor angrily. Nothing would induce him to wear such items.\n\nThe door opened and the Sheik entered. He began to unwind the turban as Theophilus watched him as a bird would a snake.\n\n\"It has taken a long time to have you in my bed,\" he said, his voice muffled, yet frighteningly familiar to the blond.\n\n\"Marcellous,\" Theophilus gasped as the black cloth fell away to reveal the man beneath. The younger male felt his stomach rebel at the sight and he clutched at it, giving a soft moan of both distress and pain.\n\n\"Your consorting with inferior species, like the humans, has made you weak,\" Marcellous huffed impatiently. \"I will need to build your resilience.\"\n\n\"I want nothing from you,\" Theophilus replied, forcing himself to stand and move away from the bed. \"I will do nothing you desire.\"\n\n\"Oh but you will,\" Marcellous said silkily. \"You may not want to, or even enjoy it to begin with, but I have tools, toys and drugs at my disposal back home. You will be willing enough ... eventually.\"\n\nTheophilus could scarcely believe he was hearing such things and his head shook mutely as his lithe frame shook with shock.\n\n\"You were the most beautiful of my sons, and the most pliant,\" Marcellous said. \"My plan was to allow you to marry and then your spouse would meet with an untimely accident. No one on Drega would question you returning to your father under such tragic circumstances. From there to my bed, where I would have comforted you, and thence to working alongside me. You turn the heads of many species. That would be valuable in my ... alternative trades. I may still be able to use you in that way, once you're trained.\"\n\n\"My family will come after me,\" Theophilus said bravely, trying to quell the icy fear at Marcellous callous words.\n\n\"I'm sure they will. In fact, I'm counting on it.\"\n\nTheophilus looked stunned.\n\n\"I dose my cargo with a little concoction that permanently wipes three to five days of memories. Pretty little Rayner won't remember whether you were with him on the transport or not. I will make sure word reaches the right ears for him to be found. A few judicious words in avaricious circles and the news of a Dregan on the market will spread like wildfire. Of course, you will never be there. Your precious 'family' will simply waste their time trying to find you, when you will be nice and safe back home on Drega.\"\n\nTheophilus' head dropped. It seemed his father had planned this as immaculately as their early encounter. However, Marcellous did not know everything and the blond made sure he kept his stance submissive, as if resigned to his fate.\n\n\"Might I spend some time with Rayner, father?\" he asked, raising his eyes just a little, dredging his memories for those things in his childhood that had earned him affection or cooperation from the silver-haired man.\n\n\"But of course. I would not deny you your opportunity to say farewell.\" Marcellous said magnanimously. \"Not that your 'brother' will remember. Your wrists, child,\" he commanded.\n\nTheophilus walked forward, keeping his head bowed, and meekly held out his wrists. There was no point fighting here and now. He knew he was still weak and dizzy. There would be time when he was stronger. There *had* to be.\n\n****\n\nRayner, along with the other half dozen captives, looked up from their cell floor as Marcellous brought the manacled Theophilus. The brunette's heart ached at the look of defeat and exhaustion on the blond's face. Their cell was locked by thick metal-barred gates, rather than an electronic field, but it occurred to him that it might be harder to explain such a large, secure space. It seemed likely that the metal gates could be removed, when there was no cargo, leaving open space that no one would question. At the snapped command, they shuffled back. Their hands, like Theophilus, were manacled, but the chain was attached to their manacled ankles.\n\n\"You have a day to make your farewells,\" Marcellous said silkily, as he locked the gate behind the blond.\n\nTheophilus waited till he could no longer hear his father's footsteps.\n\n\"You are unhurt, my brother?\" he asked anxiously. \"And these young ones are well?\"\n\n\"We're all fine,\" Rayner assured. \"He takes very great care not to damage the merchandise. Are you...?\"\n\n\"I am unhurt and ... untouched. Although he has ... plans.\"\n\n\"They're coming, Theophilus,\" Rayner said emphatically. \"You know that don't you?\"\n\n\"I know,\" Theophilus smiled. \"His intent is to drug you and the others so you will not remember me being here. Let word reach our family of where to find you and for them to assume I would be there also whilst he takes me to Drega.\"\n\n\"Not going to happen,\" Rayner assured.\n\n\"I have to get free. I have to stop him. I cannot let his taint be a part of me.\"\n\n\"It isn't, Theophilus,\" Rayner began, but stopped as Theophilus made a halting confession. \"Oh, Theophilus,\" Rayner continued. \"You should have told us sooner,\" the brunette said, wishing he could hug the blond. \"You shouldn't have had to deal with this alone.\"\n\n\"I could not. It was important to show I belonged with you. Now it is important I do something to stop Marcellous. You do understand?\" he asked.\n\nRayner gazed up at the beautiful face on which were etched tiredness, concern and a tinge of hope and he nodded, smiling.\n\n\"I understand, but you must take no unnecessary risks. They are close, my brother,\" Rayner said, closing his eyes and his smile widening. \"Very close.\"\n\n\"I can unfasten the manacles and maybe the gates, too,\" a young, beautiful woman offered. \"If you promise to help us escape,\" she added.\n\n\"We'll return everyone to their families or take them to a place of safety,\" Rayner said. He and Theophilus then stared as she manipulated her wrist until a small piece of metal wire appeared. She then used her teeth to pull it free. Rayner could see the sight had made the blond queasy. \"Theophilus sit down a while,\" he said concerned. \"This will take several minutes.\" \n\nThe blond obeyed. The smell of the place, its oppression and the sight of the wire being teased from frail flesh had made him feel ill. He longed to feel his husband's strong arms around him. He closed his eyes, dropping his head onto his knees and wishing he was safe with Xavier, remembering just how loved he was.\n\n****\n\nAboard 'Silver', Xavier was checking the medical facilities, ensuring anything and everything he might need was exactly where he knew to find it. He found it impossible to just sit on the command deck. An unscheduled use of the medical computer had him run off the last reading. He stared at it. He threw back his head, his roar echoing around the rooms and he raced to his family.\n\nTristam, Uist and Sholto were stunned by the reptilian's appearance and his agitated state.\n\n\"Xavier, what is it, what's wrong?\" Tristam asked worriedly.\n\n\"Theophilus,\" Xavier husked dryly. \"My beloved. He carries our child. He is pregnant.\" The lizard looked at each of his stunned family, before an agonised howl broke free from Uist. \n\nTristam grasped the reptilian's arm.\n\n\"We will reach them in time. I swear it,\" he said. He glanced at Uist and Sholto. Both men's fingers flew over 'Silver's' controls and he felt a surge as the ship's speed increased. \n\nThe images of two PrideHomers appeared onscreen. The older was Uist's sire, Willis, the younger his sibling Steffen. Uist had wasted no time in declaring Bloodfeud on Marcellous when they had realised he was the Sheik they sought. He had immediately contacted his sire, who had been en route to Earth and the older PrideHomer had instantly changed course and was now closing in on Marcellous from a lateral direction. At the news concerning Theophilus the older male growled menacingly.\n\n\"If he harms my son or my first grandchild I will make him beg for death,\" he rumbled. As Uist was a Protector to the Dregan, so Uist's family took the blond to their heart as if he had been born of their familial pride. Family was of great importance to PrideHomers. \"We are closest to the ship you identified. We will give him the offer of surrender. Will he know, my son?\" he asked of Xavier, looking with sympathetic eyes at the distraught male.\n\n\"I do not think so,\" Xavier said haltingly. \"Theophilus would not reveal it to him for fear of Marcellous' reaction ... one way or another. It would be a potent weapon to ensure my husband's cooperation. But his body will be trying to take care of the life he carries. He will tire quickly as it devotes energy to the growing baby. Now I understand why his scent seemed subtly different, his hormones were changing. Why did I not see it sooner?\" he moaned softly.\n\n\"For the same reason Tristam and I reacted protectively to his changed scent and did not know why. This has come as a surprise to us all. Although once he and the child are safe and well, I will speak personally to him for not telling us sooner,\" Uist growled, his protective instincts surging and making him agitated. He looked at his mate, as a hand squeezed his arm gently, and he reached to hold Sholto.\n\n\"He still fears Marcellous' taint,\" Sholto spoke up. \"He was desperate to prove himself to us. He had no way of knowing how things would turn out, or who the Sheik was going to be. I don't want anyone telling him off for the way he acted. He will be consumed with guilt enough.\" The auburn head turned to look pointedly at the three bigger males and a loud guffaw came from the view screen.\n\n\"Well spoken, little one,\" Willis said. \"I would agree with him.\"\n\n\"You are right,\" Xavier said. \"We will need to treat him very gently. This will have taken a great toll on him.\"\n\nUist still growled, but nodded his acceptance. He doubted whether when face-to-face with his beloved brother he would be able to do anything other than hold him tightly.\n\n****\n\nMarcellous sat at his command console. His legs splayed wide, leggings around his ankles. His hand stroked languidly up and down a long, thick, hard length as he smiled coldly. He was looking forward to the conclusion of another successful delivery ... and the unexpected bonus that had come into his possession. He growled angrily as he was alerted to the presence of another ship heading towards him and its desire to contact him. He stood, yanking his leggings back up and stuffing his still-erect penis inside. His tunic hid his arousal and he flicked on his communications. It had always paid not to arouse undue attention by refusing to accept calls. However, the image that would appear on the other ship's view screen was not his. He stared at the face of a PrideHomer, one that seemed vaguely familiar. This was something completely unexpected. The Dregan frowned. He disliked surprises.\n\n\"I am Willis, sire to Uist who is Protector of Theophilus. Under PrideHome law this makes Theophilus as a son to me and a part of my pride. Any attack on him, or those he holds as family, is an attack on me and mine and will be met with whatever force is deemed necessary. My firstborn has invoked Bloodfeud. If the boy is aboard your vessel, and has suffered any harm, blood will be avenged. I offer you the opportunity to stop and surrender. \"",
        "Marcellous quickly flicked off the image and activated the secondary engines. His ship flew forward. He was close to his destination and he doubted anyone would fire on him if they believed they might hurt Theophilus. The ship suddenly began to shudder and slow. Marcellous hit the console over and over, but got no response. He viewed the cargo holding area, unsurprised to find it empty.\n\n\"Perhaps you are more of an adversary that I anticipated, my son,\" Marcellous acknowledged grudgingly. \"But you will not stop me.\" He left his command centre and headed for his shuttle hangar. Marcellous ran down the slope to the control panel that activated the inner and outer doors. He moved swiftly to his shuttle as the outer doors began to open. However, he heard them stop and turned to find Theophilus barred his way.\n\n\"You have a choice, child,\" Marcellous said menacingly. \"Stand aside and I will let you go. This time. If you try to oppose me, I will not hesitate to do whatever it takes to defeat you.\"\n\n\"I am an Elite officer and you are a wanted felon. I will not let you escape justice. Surrender and you will be given a fair trial.\"\n\n\"You are a fool, Theophilus. Do you honestly believe you can defeat me? You will either end up with me on the shuttle, or dead, if you stand against me.\"\n\nTheophilus was not certain he could overwhelm his father in a fight; however, he could not stand by and let the older man get away. He owed it to himself, his unborn and to his family to try and at least contain Marcellous until help could arrive.\n\n\"I do not fear you, Marcellous,\" he said quietly. \"I am not the child that you cast aside on Drega. It is my duty to oppose you and place you under arrest.\"\n\nThe two Dregans met in a battle that pitched youth and speed against age and cunning. Theophilus was also aware that most of his moves were defensive, instinct making him protect the life he carried. The dance was deadly in its intent. He knew Marcellous was a desperate man. An unexpected manoeuvre caught Theophilus unawares and, as he lost coordination, a kick landed in his groin, dropping him instantly. He rolled to protect his stomach as the older man followed up with another brutal kick, catching the blond hard in the lower back.\n\nMarcellous resumed opening the hangar's external doors and then went to begin powering up his shuttle. He would drag Theophilus aboard once all systems were fully engaged.\n\nTheophilus gave a grunt of pain and despair. He was crawling towards the slope and safety, but his body was demanding he rest. The hangar's inner doors had now begun to open slowly and the drag was almost impossible for him to fight in his weakened state. He gave a whimper as he inched forward just a little more and then a loved voice reached his ears over the sounds of the doors.\n\n\"Theophilus. Here. Reach for me.\"\n\nTristam was bending low, his hand stretching towards him. Theophilus could see that, in his turn, Tristam was held by the welcomed sight of a pale-green hand. With his last strength, the blond reached and clutched desperately at Tristam's hand and felt himself being pulled to safety.\n\n\"No. He is *mine*.\" Marcellous' furious bellow came from the shuttle doors. The Dregan's strength was displayed as he strode towards them, the opening doors seemingly unaffecting him. \n\nTristam almost had Theophilus safe as Marcellous reached them. With a cry of rage and denial, his grip was easily broken by the silver-haired male. The blond too exhausted to resist as he was pulled from Tristam's grasp and carried towards the shuttle.\n\n\"Xavier, let me go, I won't lose him,\" Tristam shouted, angry that Theophilus' mate would be hauling him away. However, as he was pulled through the doorway, he saw the reason.\n\nSteffen ran through swiftly, heading for the wall-mounted control panel, as two huge, furred forms, growling angrily, bounded past Tristam and Xavier. \n\nTristam recognised Uist immediately and could only assume the other was Willis. He watched as Marcellous shrieked in terror, shoving Theophilus at one beast as he tried to dodge under his shuttle away from the other. Theophilus was caught and swung into a gentle embrace by Uist as Willis dove after Marcellous. The great beast brought the barely conscious blond to where Tristam and Xavier waited and tenderly laid him in his husband's arms. A massive paw with deadly claws carefully caressed Theophilus' belly, causing the blond's golden eyes to flutter open and a weak hand to cover the paw.\n\n\"Our baby,\" he whispered, his eyes focusing on his husband. \"Is he well?\"\n\nThe beast gave a contented purr before leaving them and Tristan replaced the paw with his own hand. He could smell what he now knew was the slightly more musky scent of the blond that denoted pregnancy. His hearing could pick up the tiny heartbeat of the life beneath his hand and he smiled.\n\n\"Very well. He is as strong as the one who bears him. Take care of him, Xavier,\" he added, nodding away from the unfolding events on the hangar deck.\n\nXavier did not hesitate. Whilst he trusted Tristam's assessment, the big blond was not a physician. He wanted to check his beloved out personally and ensure their child was indeed well. As he strode towards 'Silver', he halted as Sholto came running towards him.\n\n\"Rayner and I have secured Marcellous' 'cargo' aboard the ship. They will need checking over when you're ready.\" His hand reached for Theophilus' stomach and the blond managed to cover it with his own. Sholto gazed anxiously at Xavier.\n\n\"I believe my beloved and our child are both well, if exhausted.\" The reptilian answered the unspoken question and received a wide grin. \"I will tend to those who need me after settling my mate.\"\n\nSholto then joined Tristam who was gazing down into the shuttle hanger.\n\n\"It's over,\" the blond said, without moving. Sholto laid his hand on Tristam's arm and was pulled into a tight embrace. \"It could so easily have been you and Theophilus he took,\" Tristam said, kissing Sholto's brow. \"We could have lost you both.\" Tristam inhaled the familiar scent, taking comfort in the arms that returned his hug with equal strength. Without the link he shared with Rayner, they would never have been able to track Marcellous. \n\n\"But you didn't. Rayner is with the others Marcellous was planning to sell into slavery. Go to him. You need each other. I'll look after things here. It will take a few minutes for Uist to resume his form and I don't know how quickly Willis can resume his.\"\n\nWith a final kiss to a much beloved brother, Tristam nodded and left. Sholto smiled at the retreating figure and then grinned at the huge male, still in primal form, that stood and purred happily at him.\n\n\"Well done, big guy,\" Sholto said, sitting on the floor. \"Come and lie here whilst you change.\" As he looked up, Sholto's blue eyes widened. Normally after assuming the primitive shape, Uist was tired. However, Sholto was staring at a large, ruby-red headed erection that jutted proudly from the beast's furred groin. It would not be the first time he and Uist had mated when his husband was still in his other form, but it was rare. Uist dropped to his hands and knees and, as the big male's head pushed into Sholto's groin, the sounds of snuffling mingled with rhythmic purring, Sholto was fairly certain what was prompting the need to mate. It had long been decided that he, Rayner and Theophilus would bear their children at the same time. The recent proximity of a pregnant blond was tripping all of his mate's instincts to sire his own child.\n\n\"Not going to happen without Xavier's assistance, lover,\" Sholto smiled, as he began to unfasten his clothing. He slapped off the claws that tried to simply rend the clothing that stood in the way of skin-to-skin contact. \"No way, Uist. I am not greeting your sire and sibling naked.\"\n\nThe purrs increased in intensity as Sholto removed the last of his clothes and lay back naked and erect. He spread his legs wide, silently telling the dominant male he was willing to mate. His reward was a sound between a yowl and a purr before the long, rasping tongue began to tease at his nipples. As the tongue moved lower, claws, wielded with infinite care, scratched at the taut teats and the sensitive insides of out flung thighs. His lover's tongue lapped away all of the addictive silvery trails before moving lower still.\n\nUist nosed at his mate's groin happily. The copious pre-come was both an aphrodisiac and an indicator of his mate's level of arousal. A primal part of him wanted to mate, to sire his own pride. Another acknowledged that, although this was not the right time, it would be soon and so the beast was appeased. He thrust his tongue between his mate's cheeks, unerringly seeking the tiny portal. He lapped assiduously around it, relaxing and pleasuring Sholto, before thrusting deep inside his love's body, stretching and slicking the tight sheath.\n\nSholto knew the rhythmic purring was an integral part of relaxing him. He closed his eyes, hands reaching to stroke and pet at his mate's furred body, trusting that Uist would take care of him. He moaned as the long, agile muscle flicked over his sweet spot before rubbing it in earnest. Sholto bucked and writhed, but was easily held by the bigger male, until certain he was going to come. He whined his disappointment as Uist's tongue withdrew. His legs were then hooked over strong arms and the broad head of Uist's sex pushed against his opening. \n\nThe big male hesitated. Waiting. Intense amber eyes locked with oceanic blue.\n\n\"Yes, Uist, yes please,\" Sholto pleaded. \n\nWith a drawn-out yowl of unbridled joy, the bigger male slid into his mate's body. He held still, waiting as the tight sheath rippled and stretched to accommodate his length and girth. His size was greater in this form and so he took more care with his lover's smaller body. A hitch of slender hips told him Sholto was ready and he began to move. From slow undulations to long, deep strokes, Uist made love with his adored husband. He relished each and every cry, moan and mewl from Sholto. The combined scents of musk and desire were heady and potent in fuelling the cat-man to mate with and claim that which was his. He bit down on Sholto's bared throat, sucking, wanting his mark on his lover and feeling strong fingers dig into his back in response. He released Sholto's legs and they wrapped around his waist, as best they could. He felt Sholto use the leverage to move in counterpoint to his powerful thrusts. It was enough to send him over the edge. With a roar that seemed to echo for long minutes, he erupted, filling his mate with his seed.\n\nSholto heard Uist reach his peak and cried out as wet heat filled him. It triggered his own cataclysmic climax. Wailing Uist's name he came hard, vision greying, pleasure firing through every cell and synapse to leave him completely drained and fully satiated. He murmured wordlessly as Uist's tongue began to lick him clean, the purring man replacing the purring beast. \n\nSholto felt himself be lifted and buried his head into Uist's shoulder, barely able to keep his eyes open.\n\n\"I love you, Sholto,\" Uist said softly.\n\n\"Love you,\" Sholto whispered. He gave a groan burying his head deeper as he heard a familiar voice speak.\n\n\"Your sibling and I will wait for you outside, my son. I want to be sure of Theophilus' health before we do anything further.\" Willis' voice held a trace of amusement as he and Steffen left the mated pair.\n\n\"They have gone,\" Uist said, restrained laughter colouring his voice, as he lowered a crimson-cheeked Sholto to the floor.\n\n\"So much for them *not* seeing me buck naked,\" the younger man growled, pulling on the carefully removed clothing. He glowered at his snickering mate, which only resulted in a full laugh. Unable to remain either indignant or angry in the face of Uist's obvious joy, Sholto joined in the laughter. \n\nWillis and Steffen were waiting as they promised. They ruffled Sholto's hair playfully and rubbed their cheeks against his before doing the same with Uist.\n\n\"Marcellous will not harm any of mine again,\" Willis said, his deep voice resonating with satisfaction.\n\n\"Our blood is avenged,\" Steffen said, nodding.\n\n\"It is as it should be,\" Uist confirmed, holding tightly to his mate.\n\n****\n\nEpilogue\n\nRayner lay in lush foliage, relishing not just the perfect level of heat and the scent of the exotic flowers surrounding him, but the talented mouth that worked his erection. His hand stroked Tristam's hair as his husband made love to him with lips and hands. A talented tongue slid up and down his length, swirling slowly over the head. He felt Tristam drink down his salty elixir as drop after drop was teased from the tiny slit. His husband's hand cupped his sac, tenderly rolling the precious orbs within which ached for release. He cried softly as Tristam brought him to the edge over and over. Finally he tugged on the shaggy mane.\n\n\"Be inside me,\" he begged.\n\nTristam moved to mate their mouths, letting his lithe lover taste himself. He moved lower to suck and nip at chocolate nipples haloed with coffee areolae as he reached into the oil he had ready nearby. As his tongue moved in abstract patterns over his mate's smooth, honey-tinted skin, Tristam's finger sought the tiny entrance hidden in the downy declivity of the beloved body. Rayner's pleasured sounds increased as Tristam slid a lone digit inside, a second finger joined the first, and his mate's hidden jewel was caressed again and again until once more Rayner was panting and pleading.\n\n\"Ride me,\" Tristam husked, as he withdrew his fingers from molten depths. He lay back, watching avidly as his mate straddled him. Gentle fingers coated his aching length with oil, reaching to massage his sac, heavy with its unspent need. \n\nRising up, Rayner positioned Tristam's hard flesh at his prepared portal and shimmied to push the engorged head past the initial defences of his own body. Slowly he eased down, his internal muscles clenching and releasing to deeper and deeper guttural groans from his husband. Finally he was fully impaled and he gazed down, adoration in his deep brown eyes. He smiled as Tristam caressed his abdomen. It was not his time yet, but very soon; Tristam's paternal instincts were as strong as those of Uist and, if Rayner were honest, he wanted to carry his husband's child. He slowly undulated and rotated his hips, giving a soft laugh as Tristam groaned again.\n\n\"Imp,\" Tristam growled. He smiled at the gasp from his lover as he stroked and squeezed the elegant erection as it bobbed gracefully in time with Rayner's motions. \"I love you,\" he added, flicking his thumb over the head of the engorged flesh in just the way he knew would drive Rayner wild. It was his mate's turn to groan as he partnered the movement with an upward snap of his hips.\n\nRayner shifted slightly, a pleased cry escaping his kiss-swollen lips as his mate's shaft rubbed him perfectly. The time for teasing was past. He began to move faster, lifting and lowering higher and harder to increasingly harsh breathing from them both. He threw his head back enjoying the feeling of fullness, the stimulation to his sweet spot, the touch of his mate's hand, as well as of his mind. It was perfection. Multicoloured supernovae detonated behind his closed eyes, heat and need radiated from his groin and with a cry of Tristam's name, his release jetted over his lover's fur-dusted chest.\n\nTristam could feel in his mind, body and heart that his lover was reaching his climax. He hitched his hips, wanting, needing to be as deep inside as he could get. He cried out Rayner's name at almost the same second as Rayner climaxed, his cream filling the clenching sheath that enveloped his pulsating shaft. He caught his lover as Rayner slumped forward and for long minutes the lovers simply basked in the languorous afterglow.\n\nEventually they arose gracefully and wrapped the sarongs on which they had lain back around their hips. Each with an arm around the other, they ambled slowly into a large clearing filled with a wide assortment of people. They smiled as they looked at their family. Jameson and Aurora were sitting with Xavier's parents and Uist's sire and they went to join them. \n\n\"Is it true we no longer have to fear Marcellous?\" Aurora asked. She had feared the Dregan would in some way try to reclaim the blond she considered her son.\n\n\"It is true,\" Willis purred. \"He died at my hand and his body was sucked out into space. It is fitting there will be no place of rest for him.\"\n\nTristam cast a quick glance at Uist who sat nearby, clearly listening to the conversation. He saw the other man's head nod and then their eyes met. Tristam was the only other who knew that Willis had actually thrown the still-living Dregan through the space doors before Steffen had shut them. No one, other than Jameson, of those present knew Marcellous had been the Sheik, and nobody ever would. Marcellous' ship had been destroyed. It would simply be as though the older man had vanished. By Dregan law after one year and a day, if Marcellous did not make a return, his estate would be shared amongst his sons. Tristam knew Theophilus had wanted no part of the wealth, but was instead persuaded to use his portion to benefit those whom Marcellous would have preyed upon and to create additional scholarships for talented Dregans to both Phixian and PrideHomer universities. \n\nTheophilus and Xavier came into view. The blond's hair was still wet from swimming with the reptilian and he looked radiant. At the sight of the gathered group, Theophilus gave a cry of surprise and delight. They had chosen to spend time on PrideHome to recuperate, but Xavier had made no mention of his own family arriving, or of the presence of Jameson and Aurora. He was swept into loving embraces, his still-flat stomach tenderly caressed by all.\n\n\"It is a wonderful surprise to have you all here,\" Theophilus said, his smile incandescent. He settled himself with Rayner and Sholto as the others watched Steffen play Xavier's younger brother Yve at a Phixian game of logic and strategy. \n\nTristam was engrossed by the game and vaguely aware that Rayner, Sholto and Theophilus had moved away from the main group. He could feel his husband's joy filtering in and out of his mind and he smiled contentedly. Within the next couple of weeks Xavier would implant an artificial womb into Sholto. As soon as it was certain it had taken, he would then fuse cells from the couple to create their child. Then it would be Rayner's and his turn. He was already eagerly anticipating the pregnancies. He became more and more involved in the duel between PrideHomer and Phixian, watching as despite Steffen's best efforts he was beaten soundly. \n\nSteffen looked up with a growl which, as he looked at Tristam, became a snicker. At his side Yve tried to be polite, but at Theophilus' musical laugh and Sholto and Rayner's more baritone mirth, he too joined in. As other voices were added, Tristam reached upwards, finally feeling ... something. His hand encountered the crown of flowers that had been delicately placed.\n\nWith an expert pounce, he captured his mate, who was almost helpless with laughter. Although he expected to be tackled by Theophilus and Sholto he found Steffen and Yve adding to the melee.\n\n\"I yield,\" he laughed, as he was easily rolled and pinned to the ground. He looked up at those above him, smiling affectionately. Four very divergent worlds and peoples were linked by one beautiful blond. He caressed Theophilus' joyful face before doing the same to Sholto and then pulling Rayner down for a long kiss. He was aware of the mixture of sighs and snickers from those around him and he let it wash over him. The love they all shared was almost palpable at that moment. He gazed up into Rayner's eyes and saw the depth of emotion they held. He sighed his bliss; he had the love of his mate and his family. What else did a man need? "
    ],
    "authorname": "Pelaam",
    "tags": [
        "gay novella",
        "gay drama",
        "gay romance",
        "action adventure",
        "gay action adventure"
    ],
    "category": "Gay Male",
    "url": "https://www.literotica.com/s/silver-ch-05"
}
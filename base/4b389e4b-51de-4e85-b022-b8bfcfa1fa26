{
    "title": "Project - Prometheus Ch. 30",
    "pages": [
        "Void Lord cackled with delight as the files he secured were uploaded to his deck. He quickly made a copy, to be stored in a small storage device, imbedded into his brain. While it may have seemed distasteful, the man was, if nothing else, pragmatic. He knew that if he was ever to be outed or caught, his deck would be confiscated and the data he took would be back in its owner's hands.\n\nHe had several such incidents, where he'd been in some close scrapes, having to abandon his gear. Most times, Void Lord was able to recover it, but in certain instances, where he couldn't, he'd activated the self destruct feature. Though the hardware would be lost, he would still retain the valuable knowledge he'd taken. The man smiled to himself, thinking he'd gotten away scot free, but an alert on his deck told him otherwise.\n\n\"What the... SHIT!\" he cursed after looking through the data. \"Son of a... the fucking cunt let me leave!\"\n\nThe hacker fumed for maybe a minute before springing into action. Void Lord knew he had to move fast, or he'd risk getting caught. He'd evaded pursuers before, but after checking out the files of the Darkstrider crew, the man knew that tangling with them in the physical world was a fight that he'd lose. He collected everything that he brought with him and stuffed back into his bag, before bolting out of the room.\n\nHe knew the elevator was a crap shoot, so he'd have to take the stairs. He flew down the flights, reaching the ground floor in record time. The man kept going, knowing that his pursuers would likely come for him that way. He hit the first basement, then the second, before he went hunting for the vent panel. Void Lord had done his homework and planned out this route, should the worst happen.\n\n\"Fucking little cunt! I am so going to ruin her ass when I get out of here!\" the man grumbled as he found his exit and dislodged the panel.\n\nHe crawled into the air vent, happy that he was a rather thin and reedy type. Had he been any bigger, this escape route would not have worked. Void Lord crawled as quickly as he was able, eventually finding his way out of the maze of ducts several minutes later.\n\nHe came out in a maintenance area that had seen little in foot traffic, as he had planned. Void Lord grunted as he brought a program from his wrist computer, securing a ghost line to Saubath. The Takharian picked up on the seventh ring, answering the hacker's call.\n\n\"What is the meaning of this? You were not supposed to contact either of us...\" Saubath started before he was cut off.\n\n\"They traced me. I got what you needed, but they traced me, and I don't doubt that these people from the Darkstrider will find me. I need safe transport off the station, and I need it now!\" Void Lord told the commodore.\n\n\"Fuck! You are not in anyone's custody at the moment?\" Saubath questioned.\n\n\"Not yet. I don't know how the bitch did it, but she found me, and no one finds me! If she found me there, it's only a matter of time before her and her friends get to me,\" Void Lord worried.\n\n\"Make your way to the military zone of the station and head for checkpoint forty-one! I have men stationed there who will help you, if you can get there!\" the commodore told him. Void Lord brought up the schematic of Veldhern station and plotted a route to the checkpoint. It was a fair distance just to get there, but it would have to do.\n\n\"I can get there! If you could send any sort of escort, that would be much appreciated!\" the reedy man replied.\n\n\"Already on it. Get moving!\" the Takharian ordered before he killed the line. Needing no further motivation, Void Lord hauled ass, hoping that he'd make the checkpoint before Taal'ani and her friends found him.\n\n******************************\n\nJaesa had tracked the man down to his suite and accessed the security cameras in the hotel. She did so quietly, not wanting to alarm hotel security, and pulled up stills of the man's face. It wasn't just his face she had gotten shots of, but also his height, weight, build and his walk. Jaesa fabricated an algorithm to track the man based on these parameters and had one ready within minutes.\n\n\"Jaesa? What are you doing?\" Natalya asked.\n\n\"Just finished a tracking algorithm, so we can find this... Void Lord,\" Jaesa replied with a smirk.\n\n\"You got one ready that fast?\" Taal'ani asked, eyes wide with surprise.\n\n\"You know who you're talking to, right?\" Jaesa sassed, while giving Talon a look.\n\n\"OK, no need to press the point,\" Taal'ani replied. \"Any idea how we'll find him?\"\n\n\"Is there any way to contact Administrator Dohbalan? He could issue the order needed to find this man and apprehend him,\" Jaesa replied. \"Or we could go and find him ourselves.\"\n\n\"We don't have our weapons!\" Natalya reminded Jaesa. \"Hold up while I call the Darkstrider.\"\n\n\"Darkstrider, come in. Darkstrider, is anyone there?\" Taal'ani called in.\n\n\"Talon, are you all right?\" Inari asked in answer.\n\n\"I'm fine. You guys still on the line with Williams?\" the Fel'caan woman asked.\n\n\"Yeah! We're trying to figure where Void Lord may have gone and who he is, but we're coming up empty on that. There's so little to go on, as no persons of interest were flagged over the past few days, so we got nothing!\" Inari griped.\n\n\"Jaesa tracked the bastard down and got stills of him. We're sending you a data package now,\" Taal'ani stated as she nodded to Jaesa, who uploaded the information packet to the Darkstrider.\n\n\"That's Void Lord? This skinny little shit?\" Inari scoffed.\n\n\"Probably why he's got such an issue with me handing his ass to him,\" Taal'ani sniffed.\n\n\"Weak men will always fear a strong woman. Mainly because such women cannot and will not be controlled. Least of all, by men like them,\" Alex observed.\n\n\"Well said! Just how much data did he get?\" Priya asked, fearful of what had been taken.\n\n\"He didn't get the full route, but he got enough where it wouldn't take them long to piece it together. Even if they have that fragment...\" Jaesa stated.\n\n\"It would mean open war with UCW, on a scale that hasn't been seen since the Dark War with the Xuul'khan!\" Williams breathed.\n\n\"We cannot let the Collective get their hands on this map! Jaesa, have you had any luck pinpointing the man's location?\" Alex asked.\n\n\"Working on finding him, but I can't get my hands on the live security footage of the station,\" Jaesa replied.\n\n\"Allow me to fix that,\" Williams stated, as she put her line on hold. She was gone for a few minutes before she reappeared in the holo display. \"Station security has been alerted, and I have secured you and Taal'ani access to the live feeds. Hopefully, it helps with locating the man.\"\n\n\"Much appreciated!\" Jaesa thanked, as she delved into cyberspace. Taal'ani was right there with her as they plugged in the algorithm. Their search was fruitless for a few minutes until they received a ping with their quarry.\n\n\"Found him! He's in the hospitality district of the station, right by the tours kiosks! He popped right out of a vent!\" Taal'ani yipped into the line.\n\n\"Dispatching security to apprehend him! We've got this!\" Williams told them.\n\n\"Commodore, I would respectfully request that Taal'ani and Jaesa go to help with his apprehension. Taal'ani has had some experience in dealing with him, and she would be instrumental in getting him to hand over what he stole. If not, she could be essential in getting him to give up his employers,\" Alex queried.\n\n\"Request granted. Ladies, make your way to the hospitality sector and meet up with Lieutenant Hardick. His unit is the closest unit that I can personally trust with his arrest,\" Williams stated.\n\n\"Copy that. On our way!\" Natalya stated before killing the line.\n\n******************************\n\nVoid Lord mingled as best as he could with the crowd milling around the various kiosks. While he didn't stick out like a sore thumb, he was noticeable, which worked against him. He kept his cool as a group of security personnel walked over to the group of tourists he was blending in with and approached him directly.\n\n\"Sir? If you will come with us, the commodore is waiting,\" the officer of the group told him.\n\n\"Waiting for what?\" Void Lord asked suspiciously.\n\n\"The package you promised to deliver to his hands,\" the officer replied with a smile. Sighing in relief, Void Lord relaxed and allowed himself to be led away by the group of soldiers. He was happy that the man that employed him, who happened to be a commodore no less, had gotten his men to protect him. The group was making good time, heading to the military zone, when a voice rang out.\n\n\"Lieutenant Sarnoc!\" the voice called out.\n\n\"First Lieutenant Hardick! What is it, sir?\" Sarnoc replied as he saluted.\n\n\"That man you have with you is to be remanded into my custody, immediately!\" the man stated.\n\n\"This is highly irregular and does not follow the chain of custody,\" Sarnoc argued.\n\n\"Take it up with Commodore Williams, she's the one who issued the order,\" Hardick stated as she showed the hologram of the order.\n\n\"We have our orders as well, from Commodore Saubath. Thus, I have to follow my orders,\" Sarnoc said with a level of smugness.\n\n\"Commodore Williams was commissioned before Commodore Saubath was and is the commander of the Second Fleet. Therefore, her orders take precedence. Hand the man over, now. That's an order!\" Hardick replied as he put his hand on his sidearm, flicking the holding clip off it.\n\nSarnoc looked hesitant and backed up a step, caught off guard by how direct Lieutenant Hardick was being. He turned, making a beckoning motion, before he gave his next command.\n\n\"Shoot them! Kill them all!\" the junior Lieutenant roared as he tackled Void Lord to the ground and out of the line of fire.\n\nThe security guards that were with Sarnoc were on Saubath's and the Collective's payroll. They opened fire on Hardick and his men, driving them back and even wounding a couple of them. If it hadn't been for the personal shield generators they wore, they would have all died in the first salvo.\n\nThankfully, Hardick and his men retreated and found cover before their shields were depleted. Civilians who saw the firefight start, ran and ducked for cover. Seconds later, alarms sounded through the station as the firefight escalated. Because Hardick and his men were in the way, Sarnoc and his men had to try to find a way around.\n\n\"Why Sarnoc?!?\" Hardick called out, furious at the betrayal.\n\n\"Because the UCW is a dying initiative! Something better needs to replace it!\" Sarnoc howled as he opened fire, giving his men the cover they needed to move.\n\n\"You're a fool if you believe that!\" Hardick fired back, breaking cover to unload his weapon on the traitorous men. The incoming shots forced the traitors to scramble for cover as some of them were hit by the spray of bullets.\n\n\"Am I? Am I a fool to believe that the Collective will reward me for bringing them something they've wanted?\" Sarnoc shot back.\n\n\"You're just a pawn to them, Sarnoc! They will discard you the moment they have no further use for you!\" Hardick called out.\n\n\"We will see about that!\" the lieutenant called out as he fired back. He just received a ping on his wrist comms, which told him about incoming squads of reinforcements. He grinned as he kept the banter going. All he had to do was keep Hardick talking and he would soon be a dead man.\n\n******************************\n\n\"What the hell is going on?!?\" Alex called out as he heard the alarms wailing.\n\n\"Weapons discharged near the military zone!\" Jaesa informed him as she pulled live feed of the firefight going on, showing it to him.\n\n\"Shit! Tell Nats and Talon to hold back! They're walking into a fucking warzone!\" Alex snapped.\n\n\"Already done, sir, but they are insisting on aiding Lieutenant Hardick. There are reinforcements inbound to his location, but they are not the friendly ones. Local chatter suggests that they are backing Hardick's assailants,\" Jaesa stated.\n\n\"Damn! Jaesa, give me access to the armory, now!\" Alex said as he raced for the elevator!\n\n\"What are you doing? Sir?\" Inari called out after him.\n\n\"Getting some guns to bring to the ladies. You two stay here and keep an eye on the ship! In case this firefight is a distraction!\" Alex ordered.\n\n\"You think they might try to board the ship if they make it this far?\" Inari asked worriedly.\n\n\"We have all this advanced tech on board, and someone just stole a map fragment to try to get to the source of the tech. Do the math,\" Alex rumbled over the comms.\n\n\"All Sentries, go to full defensive mode and protect the Darkstrider by any means necessary! Extreme prejudice authorized!\" Inari barked. The Sentries aboard the ship snapped to attention and increased their patrols throughout all sectors, keeping a watchful eye for any potential intruders.\n\n******************************\n\nNatalya, Taal'ani and Jaesa were on their way towards the firefight, but kept a watchful eye. They didn't want to get caught by any men who were loyal to Saubath as they neared the sound of guns blazing. Though the women were bereft of any firearms, they at least had personal shield generators and nanoweave vests on. They were crouched behind a planting of some of the flora and fauna of Veldhern when they received a call.\n\n\"Ladies, where the hell are you?\" Alex's voice called in, laced with panic.\n\n\"Over by the lily display, just past the food vendors!\" Jaesa called out over the line.\n\n\"I see you! I'm on my way!\" Alex replied. Maybe a few minutes later, Alex jaunted up, keeping his head down, his arms festooned with weapons.\n\n\"Damn, Alex! Did you bring the whole armory with you?\" Natalya joked as she plucked a pistol and an assault rifle from his arms.\n\n\"I could have, if I suited up with the Phalanx. But bringing that aboard the station, having to explain it to security and the like, wasn't something I thought was a good idea,\" he replied.\n\n\"Good call! What's it looking like, Jaesa? Are Hardick and his men still holding?\" Taal'ani asked the AI as she pulled a pair of SMGs and a hand cannon.\n\n\"They are, but they're losing badly. Several men have already fallen with life-threatening injuries, and some are already dead. They need backup and any reinforcements that Williams could provide won't get there in time!\" Jaesa reported, as she was handed an automatic pistol and sniper rifle, per her request.\n\n\"Well then, it looks like it's up to us! Let's go drop some traitorous scum!\" Alex said, cocking his heavy machine gun as he stood up, offering the women tactical safety glasses.\n\n\"I have updated your HUDs on the glasses, so they will display hostile and friendly combatants,\" Jaesa replied, falling in behind Alex as they marched.\n\n\"That will make sorting the bastards out much easier!\" Natalya growled as she moved behind Alex, keeping her eyes peeled for any threats. The group continued their advance, coming closer to the sound of gunfire. They rounded a corner and nearly walked right into a quartet of soldiers who were approaching Hardick's position. They hung back, avoiding detection as they watched the men continue forward.\n\n\"What about these ones?\" Alex whispered.\n\n\"Unknown. Leaning towards Saubath I would guess, but I can't say unless they make any aggressive moves,\" Jaesa whispered back.\n\n\"Shh,\" Natalya breathed, before gesturing for them to listen.\n\n\"So, we're just to fire on Hardick? What the fuck for?\" one of the soldiers asked.\n\n\"Orders from Saubath. You remember the pledge you made? To be above all races and creeds? To ensure that our mission was above all others?\" the senior soldier groused, reminding his subordinate of his place.\n\n\"Yes, sir. Just seems like such a waste is all,\" the private grumbled, which earned him a cuff upside the head.\n\n\"Any who don't believe as we do must die. The Collective's will is all that matters!\" the man yelled.\n\n\"That makes this that much easier to do!\" Alex bellowed as he broke cover, catching the men off guard.\n\nThe soldiers had maybe seconds to react, but they didn't move fast enough. Alex opened fire and cut down the soldiers like wheat before a scythe. Natalya, Taal'ani and Jaesa backed him, their weapons firing in a concerted effort to bring the men down. The one soldier who questioned his orders dropped to his belly, cowering, hoping and praying that he wouldn't get shot.\n\n\"On your feet, soldier!\" Alex ordered. The man raised his hands, looking at the imposing stature of Alexander Tomisic with a mixture of fear, awe and respect.\n\n\"Well, what are you waiting for? You heard the man!\" Natalya told him, pointing her rifle in his direction, spurring the man to his feet.\n\n\"I don't know what you heard...\" he started.\n\n\"We heard enough, so don't try pulling no bullshit. You want to live, help us out. How many teams are here and where are they positioned?\" Alex demanded. The man hurriedly told him where the soldiers were located and their team composition. Alex listened intently as the women took up sentry positions around them.\n\n\"That's all I know, I swear!\" the man told them.\n\n\"I believe you. Now, have yourself a good nap,\" Alex stated, before he decked the man as hard as he could, knocking him out.\n\n\"Was that really necessary, Alex? What if this comes to bite us in the ass?\" Natalya groused.\n\n\"You still on the line there, Commodore?\" Alex asked out loud.\n\n\"Yes, I am! Got his face and have his service record in front of me. While I don't condone traitors, maybe we can work with this one. Put him to use before we decide his fate,\" Ana told him.\n\n\"Sound plan. Jaesa, best angle of attack?\" Alex asked. Jaesa gave the location of the nearest high point with cover, which Alex and the ladies scooted to. They stayed out of sight, closing in on the nearest position where they could help Lieutenant Hardick and his men. Once they were in position, Jaesa informed them they hadn't been noticed, so surprise was on their side.\n\n\"All right. Break cover and open fire on my command,\" Alex told them. He counted down from three using his fingers and once he was down to zero, they popped up and unleashed their fury upon the traitorous soldiers. Saubath's men were caught off guard, many of them facing away from Alex and his fireteam. By the time they figured out what was going on, a third of their number had already been gunned down.\n\n\"What the fuck is happening?\" Hardick called out.\n\n\"Reinforcements, sir! The traitors are on the ropes!\" a sergeant replied, hope lacing his voice.\n\n\"Break cover and open fire!\" the lieutenant commanded.\n\nHis men obeyed, and they got up, battered and bloodied as they were, and fought back. A good portion of the soldiers loyal to Saubath fell in mere seconds, the crossfire too much for them to keep up with. The smart ones dove back into cover, trying to stay alive while a hailstorm of death came down on them.\n\n******************************\n\n\"What the fuck?!?\" Sarnoc cried out. \"Those reinforcements weren't supposed to get here until after we'd killed Hardick! How did they get here so fast?!?\"\n\n\"These aren't the reinforcements! They're civilians!\" one of his remaining corporals replied as he cowered behind a bench.\n\n\"Where the fuck did civilians get their hands on military grade firepower?!?\" he growled.\n\n\"I think we have more important things to worry about!\" the soldier told him, as he pointed to where Void Lord lay. The hacker was behind some cover, but he was bleeding badly. His body was riddled with bullets and his breathing was shallow. He wasn't mortally wounded, but it was bad enough that if he didn't get any help, the hacker would die.\n\n\"What the shit?!? Tell me the data you got is safe at least!\" Sarnoc implored as he crawled up to the man. In Void Lord's hand was his rig, shattered by several large caliber holes. The lieutenant cursed and chanced a look at their assailants and saw they were slowly closing in.",
        "\"Great! We fucking failed and we're going to die here! All for fucking nothing!\" the soldier cursed.\n\n\"No, we... won't,\" Void Lord replied.\n\n\"What the fuck do you mean??\"\n\n\"Rig is... broken... but have a... backup copy... stored... here,\" the hacker said, tapping his head.\n\n\"You memorized the intel you got?\" Sarnoc guessed.\n\n\"Storage... cortex. Just the two of us... have to... make it,\" Void Lord told him. Sarnoc popped his head upwards to look again and saw that the reinforcements he'd been fearing had indeed arrived. With that many men, there was no way the two of them would make it. One, maybe, but not two, if any of them expected to survive.\n\n\"No. Just me!\" Sarnoc growled as he moved to the hacker. Void Lord's eyes widened as he realized what the lieutenant was about to do.\n\n\"Don't you fucking... nnnoooooooOOOOOOOOOO!!!!\" the hacker screamed before his voice was turned into a bloody gurgle. Sarnoc's own men stared at the grisly sight of their commander hacking the man's head off. He severed it with relative ease, using his vibroknife, pulling the hacker's head from his body. Once he had the head, he shouted out his command, expecting his men to obey.\n\n\"Kill them all!\" he cried as he broke cover.\n\nSarnoc opened fire, sending dozens of bullets towards Hardick and the crew of the Darkstrider. His men joined him in his attack, trusting in the lieutenant's actions. Some defenders dove for cover, avoiding the incoming fire, while several of the newer arrivals returned fire. Many of the soldiers who fought with Sarnoc were gunned down, as they didn't stand a chance.\n\nThe smoke cleared a few seconds later, and the crew advanced on the enemy positions, thinking they were cleared. There were a few survivors, but they did the smart thing and surrendered, not wishing to join their comrades. The crew quickly found the corpse of the hacker they had been hunting, but were mortified to find him without his head.\n\n\"What in the name of all that is holy happened??\" Alex breathed.\n\n\"Sir! Over there!\" Jaesa cried out, pointing at the retreating Lieutenant Sarnoc.\n\n\"Is that... Void Lord's head in his hands?\" Taal'ani gasped, sickened by the grisly sight.\n\n\"Void Lord had a storage cortex implanted in his brain! He made copies of the data he stole and stored them there!\" Jaesa blurted out. The crew took a beat to process this information before they realized what it meant and tore after the traitorous officer.\n\n\"What the fu... WHERE ARE YOU GOING??\" Hardick called out as he chased after the departing crew.\n\n\"Going after that officer! The head has a storage cortex, which holds sensitive data!\" Alex rumbled as he matched pace with the women.\n\n\"How sensitive?\" Hardick shouted, barely keeping up with Alex's long stride.\n\n\"Enough to kickstart a war over it!\" Natalya called back.\n\nThe lieutenant's eyes widened, now fully aware of what the stakes were. He controlled his breathing, pacing himself with the crew as they gave chase. Sarnoc chanced a look back and panic was written all over it. Hardick watched the man pick up the pace and the rest of them ran faster to match it. In his mind, there was no way that Sarnoc was getting away. He'd done too much evil to just be let off so easily.\n\n******************************\n\nSarnoc zig zagged his way through the military zone, hoping to lose his pursuers. He cut through the checkpoint with relative ease, as they were men he knew. He'd hoped they would have gunned down the people chasing him, but several commands from Hardick had them join the pursuit. He growled as he called in to reach Saubath on the Stalwart.\n\n\"Sir?!? Are you there??\" he called, hoping that the commodore was reachable.\n\n\"Sarnoc? What's happened?!?\" Saubath questioned as he saw the moving landscape around the lieutenant.\n\n\"Compromised sir! But I have the package and am on my way! Tell me the shuttle is on its way!\" Sarnoc begged as he kept moving and dodging obstacles.\n\n\"It should be there momentarily! Where is Void Lord??\" Saubath worried.\n\n\"Dead, but the sneaky bastard had a storage cortex in his head! I have it and I'm bringing it to you!\" Sarnoc breathed.\n\n\"Good! Keep moving! You're almost there!\" Saubath urged. \"I have men stationed at the shuttle! Get to them and you'll be safe!\"\n\n\"Yes, sir! Out!\" Sarnoc yelped as he killed the call.\n\nSarnoc turned his head once again and hoped that he'd finally lost them. He was shocked and terrified when he saw his assailants were still on his tail and closing fast! 'Fuck!! Who are these people? Galactic athletes?!?' he thought as he kept running. Sarnoc had always been fast on his feet, among the fastest at the academy! Yet these people were still on him and didn't even appear to be breaking a sweat!\n\nThe Collective agent kept his eyes ahead of him as he kept dodging and weaving, giving them no line of sight to shoot. He knew he was getting close, as the pre-arranged extraction point was coming up. Sarnoc tore into the docking bay thirty-nine and saw the shuttle there, waiting for him. Around it stood four soldiers, with their weapons out, ready to engage anyone who came at them.\n\n\"They're right behind me! Shoot to kill!\" the lieutenant screamed as he raced for the shuttle.\n\n******************************\n\nAlex burst into the docking bay and waded into a hail of incoming fire. He would have been cut down, were it not for the personal shield generator he was wearing. Diving behind a crate, the big man got a warning to those who followed him, urging them to take cover.\n\n\"Fuck! The bastard's getting away!\" Natalya screamed as she popped up and returned fire, sending the soldiers scrambling for cover. She aimed several bursts at the fleeing officer but yelled in frustration.\n\n\"What is it??\" Taal'ani queried.\n\n\"The fucker is shielded! There's no way I'll be able to drop him!\" Natalya cursed as she kept firing, hoping to cut through his shields.\n\n\"We can't let that info get out!\" Alex called out. \"Ideas?!?\"\n\n\"I have one,\" Jaesa stated, as she cocked her sniper rifle. \"Cover me!\"\n\nDoing as the AI asked, the group broke cover and unleashed hellfire with their weapons. It was enough to keep the soldiers on their heels, but Sarnoc kept moving, his shield giving him the confidence to stay out of cover. The man was moving quickly, but staggered slightly, as though winded. He neared the ramp that led into the shuttle, and the AI knew that time was short.\n\nJaesa sighted the man in, but then moved her gaze to the bloody trophy in his hand. Taking careful aim, she waited for the precise moment before squeezing the trigger. The round was expelled at a velocity that even she couldn't track, but her aim was true, as she watched the head of Void Lord explode in a shower of gore.\n\nShe saw a messy tangle of wires dangling from the remains of the hacker's head and took aim again. Sarnoc had just turned and screamed in horror at what he held before the second round was fired. It hit the remaining piece of the head, vaporizing it in a split second, leaving nothing to be recovered. The traitor stared outside the shuttle in Jaesa's direction, before the ramp closed and the ship took off.\n\n\"Please tell me you got the bastard!\" Hardick begged.\n\n\"His shield was too strong. I couldn't punch through it in time,\" Jaesa replied with a grim smirk on her face.\n\n\"Then why in the name of the gods are you smiling?\" the lieutenant retorted.\n\n\"Because I shot and atomized Void Lord's head. Unless it can me magically reconstituted from free floating atoms, then I'd say that our mission was a success,\" the AI smirked.\n\n******************************\n\nSarnoc cursed and groaned as he looked over the remains of Void Lord's head. He knew that he had failed in his mission and was beside himself with worry. The soldier had no idea how he was going to explain this to Saubath. One way or another, he'd have to tell the man about it and wondered when the best time to do it would be. That decision was taken away from him, as a holocall beeped, startling him.\n\n\"You might want to pick that up, Sarnoc! It's the Commodore,\" the pilot told him. Sighing, Sarnoc knew that the best way to deal with this was now. He picked up the call on the fifth ring, letting the hologram of Commodore Saubath materialize in front of him.\n\n\"Lieutenant Sarnoc, report! Did you secure the asset?\" Saubath asked eagerly. \"Tell me that you at least secured the cortex!!\"\n\n\"That's a negative, sir. I was aboard the shuttle, when the damn thing was blown out of my hands by a sniper shot. This is all that remains,\" Sarnoc growled, holding up the goopy remnants of Void Lord's head.\n\n\"Fuck!!!\" Saubath raged, and even though it was a hologram, Sarnoc shrank away a little, terrified of the Takharian man. \"Get aboard the Stalwart immediately! We have one final card left to play.\"\n\n\"Aye, aye, sir!\" Sarnoc replied dutifully, saluting his superior. He wondered what Saubath had in mind, but was glad that he wouldn't be on the receiving end of it.\n\n******************************\n\nArcann Saubath growled ferally, beyond angry at the chain of events that had transpired. They had what they needed and were so close to gaining their long sought after advantage! Though Saubath wouldn't be able to deliver what he had promised, he could at least try to rectify the situation he was in. He turned to his XO and barked a singular command.\n\n\"Execute Operation Warlord!\"\n\n\"Confirm order, sir,\" the human man asked him, making absolutely certain that he wanted to go this route.\n\n\"Execution of Operation Warlord, confirm!\" Saubath snarled.\n\nNodding, his XO sent the coded activation message throughout the fleets and Veldhern station. Operation Warlord was a last ditch contingency plan, which Saubath had drawn up and organized years ago. It was a final signal, which was sent to all Collective agents throughout the Veldhern sector. The operation itself was simple; break cover and take whatever areas and ships you could, by whatever means necessary.\n\nWhen Saubath had first arrived at this posting, there were few Collective agents in the system. That had eventually changed, as the Collective slowly sent infiltrator agents to take up mundane posts on the station. From there, they had expanded further, slowly bringing in agents who were with the UCW military.\n\nThat in itself was a chore, as there were so few among the military who were selected to be here. The protocol for getting assigned to Veldhern was exceedingly stringent, so despite their best efforts, few Collective infiltrators were sent here. There was enough to make a difference though, and Saubath hoped it would get the job done.\n\nThe signal was sent, and his men began executing their true agendas. It was regrettable to have to kill so many talented men and women, but if they didn't side with the Collective, then they would die. There could be no dissension amongst the ranks, because such division would often bring the entire ship down. Saubath would liked to have had more Collective agents here, but for now, what he had would have to do.\n\n*******************************\n\n\"Command, what the fuck is going on?\" Hardick called into his comms.\n\n\"People are going haywire! We have multiple engagements popping up all over the station! Guards are being systematically gunned down, while civilians and tourists alike are being taken as hostages!\" came the reply over muted gunfire.\n\n\"Command, are you secure?\" Hardick bellowed, hoping they were.\n\n\"Trying to hold position but having trouble with doing so! We need backup now!\" came his commander's voice.\n\n\"Fuck! Commodore Williams, are you there?\" Alex called into the comms.\n\n\"Never left! If you're about to ask for reinforcements, I'm afraid I can't spare any men! Both fleets are in disarray and we're trying to contain the infiltrators!\" she replied before she barked several commands to her subordinates.\n\n\"Shit! What about the surface of Veldhern? Did any such men get down there?\" Alex asked.\n\n\"Wait one!\" she called out, as she was busy getting her ship in order. \"I'm not detecting any distress signals from the surface, thank Allah!\"\n\n\"Call up Captain Fitch and whatever security personnel that can be spared! Any aid they could render would help us turn the tide!\" Alex suggested.\n\n\"Brilliant! I'm sending out a signal now! Hopefully Karl picks up!\" Williams replied, a smile cracking her face.\n\n\"What do we do?\" Natalya asked.\n\n\"We aid the lieutenant here in taking this station back! You ladies with me?\" Alex questioned. All three affirmed this by hefting their weapons and cocking them, readying themselves for battle.\n\n\"Sir? I would recommend that we put a call into the Darkstrider and put the Sentries to use! If there are any insurgents in the docking bay...\" Jaesa told him.\n\n\"Do it! Put the call into Inari and Priya! We need to contain this situation before it gets out of hand!\" Alex agreed. \"Well, lieutenant, what are your orders?\"\n\n\"Follow me and stay close! We need to clear out the nearest sectors one by one and reinforce those who need it! Let's go!\"\n\n******************************\n\n\"All right, everyone armed up?\" Captain Karl Fitch asked.\n\n\"Sir, yes sir!\" came the unified reply.\n\n\"OK then. Let's head on up and get this shit sorted out! We've got some Collective to kill!\" he rumbled.\n\nMany of the soldiers present shared his enthusiasm, as the Collective were sworn enemies of the UCW. They had hit them and made them hurt, and now it was time to hit back. They all marched aboard the transports, which were primarily used for food, to get to the station. Karl hoped that after this incident, the UCW would approve the funding for some proper military transports.\n\nThough the food haulers would do, they were unbearably slow and would take more than twice as long to get up to the station. It was the best they had at the moment, and the transports were packed with as many soldiers as they could fit. Half the remaining detail had been called up from their rest days to maintain the illusion of security on the planet. Though they had earned the day, Karl knew that shit had hit the fan, and they needed every available gun possible.\n\nWhat he didn't know was the mercenary known as Rasner and the three women he had freed had stowed away on the transport. They were currently packed into a storage closet, which hadn't been emptied, as time was of the essence. Rasner did everything he could to keep the women quiet, as this sort of situation they were in was not planned. He only hoped that once they had landed on the station, they could blend in with the personnel there and be on their way.\n\n******************************\n\n\"Confirmed! Mobilizing defenses!\" Inari replied over the comms before she shut down the line. \"All Sentries mobilize to secure the landing zone! Deadly force is authorized!\"\n\n\"Love, what's going on?\" Priya asked, having just come out of the simulator. Inari filled her in on the situation, which left Priya shocked.\n\n\"Fuck! What in the name of Shiva did we just step into?\" Priya growled as both women headed to the armory.\n\n\"A cold war that's been brewing between the Unified Coalition of Worlds and the Tosh'Kanthi Collective! I'd heard rumors about this back during our days as part of the Federation, but this is nuts!\" Inari griped.\n\n\"Looks like this cold war just got hot!\" Priya sighed as the elevator deposited them to the third level. Wasting no time, the women got armed and armored and were soon outside the Darkstrider. Inari locked the ship down, before directing the Sentries as they moved to find anyone in need of their help.\n\n\"How are we going to tell who's part of the UCW and who's with the Collective?\" Priya asked.\n\n\"Before the attack, Jaesa picked up a signal that was sent out. It was weak and almost invisible, but she detected it and is decoding it as we speak. What she has figured out was that it's likely an activation signal, which has spurred the Collective agents to break cover. She's sent us a cobbled together IFF signal (Identify Friend or Foe) that should help us identify who's who. Here,\" Inari told her as she handed Priya a pair of tactical glasses.\n\n\"Well, that will certainly help!\" Priya responded as she put the glasses on. The HUD on the glasses activated, lighting up everyone in the vicinity with the IFF signal. The civilians and dockworkers near them were lit up in green, while military personnel and guards were lit up in blue. A woman approached them, a full Commander by her insignia with apprehension on her face.\n\n\"Who are you and what are you doing here?\" the soldier barked.\n\n\"Lt. Commander Inari Sunara and Gunnery Sergeant Priya Patel, reporting in. We're here to assist in locking down and holding the docks. We and the Sentry-bots behind us are at your disposal, Commander...?\" Inari asked.\n\n\"Callista. Commander Tanya Callista. Glad you're here! Follow me! We have work to do!\" the soldier told them as she marched towards the sound of a firefight. Inari and Priya followed on her heels, with the Sentries behind them ready to do battle.\n\n******************************\n\n\"Get on your feet! In front of us!\" one of the nurses yelled.\n\nThe assembled staff of Karonis Medical Sciences were being herded in front of the trio of nurses who had pulled weapons on them. Some of the staff thought they were playing around and pranking them. But after shooting several doctors and gunning down the security staff, it was clear they meant business. Lilliana Vesper had her hands up, hoping and praying to God that she wasn't next.\n\nShe controlled her breathing to keep herself from fainting, and it helped her focus. Lilliana kept her eyes moving, hoping to see some way to get away from these people and get a warning out. No one had thought to hit the panic button, as no one had ever breached Veldhern station. This incident here would change that mentality if they survived it.\n\nDr. Vesper was snapped out of her introspections by incoming gunfire. Shrieking in alarm, she fell to the ground, hoping that she wouldn't get hit by the deadly projectiles. She saw one person, a woman, charging at them, wielding a pistol in each hand, firing like she knew what she was doing. The nurses returned fire, thinking to drop the annoying woman, dismissing her as little more than a wannabe heroine.\n\nWhat they didn't know was that this woman was First Lieutenant Tayla Markosi, UCW Internal Affairs. Though she was wearing a nanoweave vest to deter any shots made at her, she didn't leave anything to chance. She performed a sequence of acrobatics that allowed her to avoid every shot fired at her until her assailant's clips were spent. Tayla had only emptied half her clips and came up with guns blazing.\n\nHer returning fire dropped one nurse, cutting her down like she was nothing. The other two, a man and a woman, were seriously injured, bullets finding nerve clusters that put them in immeasurable amounts of pain. They too fell, but unlike their friend, they were still breathing. Tayla sprinted over, pointing her weapons at the Collective operatives, keeping her eyes on them.\n\n\"Are there any more?\" she called out.\n\n\"What?\" replied one of the doctors.\n\n\"People waving guns like this. Are there any more, or is it just these three?\" Tayla demanded.\n\n\"It's just these three! They were going to use us as human shields!\" one of the nurses blubbered, thankful to be free.\n\n\"Not on my watch. Everyone, get inside and shutter the clinic! Don't want anymore of these assholes coming here and shooting up the place,\" Tayla told them.\n\nShe didn't need to repeat herself as everyone snapped to action, getting back inside the clinic. Once everyone was in, the panic button was hit, and the clinic was shuttered from the inside. Armor panels slid over the glass and the doors engaged their heavy locks, barricading the staff inside. The only way to get through was with starship grade ordinance, and everyone hoped these infiltrators didn't have access to that kind of hardware.",
        "\"Ma'am? What do we do with them?\" one of the nurses asked her.\n\n\"Sedate them, then treat them. I want them in good health for later,\" she growled as she motioned for the staff to move in.\n\nThe Collective agents could have tried something, but they were in too much pain to bother. They tried fighting, but with so many people surrounding them, it was futile. They were soon knocked out and placed on operating tables as the staff got to work in treating their wounds.\n\nTayla moved to the entry point of the clinic, peering outside to see what was going on. There were few people moving around at the moment, but most of them were station security and some military personnel. For the moment, they were safe, and she turned around to go and take a seat. She would have moved, had it not been for her ex, Dr. Lilliana Vesper, standing in her way.\n\n\"So, this was the part of your life that you couldn't talk about?\" Vesper mumbled.\n\n\"You're picking now as the time to talk about that? We're in the middle of a crisis here and you want to talk about our old relationship?\" Tayla scoffed.\n\nShe shook her head, incredulous that Lilliana wanted to pick now to speak of this! She made to walk past her, but was shoved against the door by Dr. Vesper. Tayla had a rebuke come to mind and would have voiced it, but for Lilliana mashing her lips to Tayla's. She was shocked by the kiss, but soon melted into Lilliana's arms and kissed her back.\n\nTayla swore she felt Lilliana's tongue in her mouth, which sent a bolt of delight through the woman. Lilliana finally let the lieutenant come up for air, and the pair of them stared at each other. Their chests heaved and with the passion she saw in her ex's eyes, Tayla knew that as far as Lilliana was concerned, they weren't done.\n\n\"I'm asking, because I want my girlfriend back,\" Lilliana replied breathlessly. \"I never knew that you were such a badass. I want to know it all. The good, the bad and the ugly.\"\n\n\"Are you sure? If you ask this, odds are that we'll have to stay together, no matter what happens,\" Tayla replied, worried that Lilliana didn't know what she was getting into.\n\n\"I wouldn't want to live my life any other way,\" Lilliana replied without hesitation. Tayla blinked rapidly, almost in full disbelief at what she was hearing! She gulped and then nodded.\n\n\"After this is over, we'll talk, I promise,\" Tayla told her.\n\n\"Over dinner,\" Lilliana agreed, leaving no room for argument or debate.\n\nTayla just nodded and moved to sit down while Lilliana went to assist the doctors with treating the infiltrators. Tayla breathed heavily as her mind whirled with what she just experienced. Of all the times she had been with Lilliana, she'd never seen that level of intensity from the woman. Though Tayla was a little apprehensive, she was willing to take a chance and see just where it would lead.\n\n******************************\n\n\"We have them both! The saboteurs have been apprehended and are being remanded to the brig!\" Lt. Commander Williams replied, filling his wife in on what was happening.\n\n\"Well done, Lt. Commander! Secure them and then report back to your post! We will need everyone manning their stations if we are to survive this!\" Ana Williams replied. \"XO, report!\"\n\n\"We've secured control over most of the second fleet, ma'am! There were attempted mutinies aboard almost every ship in the fleet and some fighters did get loose from The Dauntless,\" Maia reported.\n\n\"How many?\"\n\n\"Twelve, ma'am. Four were vaporized, while three more have been rendered inoperable, by incoming fire from nearby frigates,\" the Commander told her.\n\n\"And the other five?\" Ana pressed.\n\n\"They have found safe harbor aboard the Stalwart. Also, the Firelance, Saurtath and that other ship... the... Zahl'kres? Their crews were overcome, and they are moving into defensive positions around the Stalwart,\" Mae finished.\n\n\"Fuck! What about the third fleet?\" the commodore questioned, already lamenting the loss of both frigates and the destroyer.\n\n\"Half the third fleet has followed the three turncoat ships into positions around the Stalwart, but they're moving defensively,\" O'Toole stated.\n\n\"Smart! Keep as many ships as he can and hope that enough will turn to give them an edge! What about the other half of the third fleet?\" Williams queried.\n\n\"Any ship that hasn't sided with Saubath is heading in our direction, broadcasting their intent as friendlies. What are your orders?\" O'Toole asked.\n\n\"They are to transmit a full account of everything that happened with attempted mutinies of their own ships. Transmission will grant them safe harbor with the second fleet, until a proper investigation can be launched,\" Williams ordered.\n\n\"Very good, Ma'am,\" Maia replied.\n\n\"What is the status of Security Captain Fitch and the reinforcements he's bringing to Veldhern station?\" Williams asked.\n\n\"Checking now, standby,\" Maia replied as she did a check in on the shuttles. \"They've broken the atmosphere and are redlining it to the station. ETA, fifteen minutes.\"\n\n\"What of the status of Veldhern station itself?\" Ana questioned.\n\n\"Many of the main zones are still in lockdown, but security does have a handle on all the major zones. There are pockets of resistance and there is a battle currently raging for the command center of the station,\" Maia told her.\n\n\"Fuck! If they get control of the command center, any progress made by security won't matter!\" Ana griped.\n\n\"Hold on... Command has just received reinforcements!\" Maia whooped.\n\n\"Who?\"\n\n\"Lieutenant Hardick and his platoon, along with several crew members of the Darkstrider!\" Commander O'Toole replied.\n\n\"I almost feel sorry for those fools who sided with the Collective!\" Ana giggled \"Almost!\"\n\n******************************\n\n\"Damn! The Collective has the techs, guards, and brass corralled and pinned! We need to find a way to seize the advantage!\" Hardick growled as they scooted to cover, while avoiding the incoming gunfire.\n\n\"What do you need?\" Alex questioned.\n\n\"A distraction would be nice! Something to draw their fire while we move and get set up for a crossfire assault!\" Hardick replied. Alex groaned, thinking about how they would cause a distraction, until he saw a mote of purple light dance in his hand.\n\n\"I have an idea!\" Alex stated as he put his weapon and focused.\n\n\"Alex, are you sure that's wise?\" Natalya worried, concerned about the possible repercussions.\n\n\"If we do nothing and these fuckers win, then what lengths do you think the Collective will go to, to have us in their arsenal?\" Alex argued. Seeing no real rebuttal, Natalya nodded, but not before giving him a tonsil knocking kiss and a stern reminder.\n\n\"Don't get yourself killed.\"\n\n\"And miss out on making you my wife? Never!\" Alex smiled.\n\nHe put his focus back into his power, calling to it, letting it suffuse his entire being. It was there, just beneath the surface of his consciousness, waiting to be let out. Now, instead of it coming to him on reflex, he was bringing it out willingly. He breathed in and out one final time before he opened his eyes, which were now pools of purple energy.\n\n\"Wha--\" Hardick started, unfamiliar with what was happening. That was all he got out, before Alex stood up and called out, drawing the attention and ire of the Collective attackers.\n\n\"Hey, asshats! How about I give you something else to shoot at for a change?\" Alex challenged.\n\nScoffing at the stupidity of the man, half the infiltrators turned their weapons on Alex, intending to gun him down. Alex gestured and made precise hand motions, calling the Aether to him. It answered, forming all around his hands in complex sigils and designs before it solidified. He then spread his hands wide and in front of him, a shield formed, stopping any bullets before they could reach him.\n\n\"What the fuck?!?\" came the surprised reply of several Collective agents.\n\nWhile they had seen personal shield generators stop bullets cold, that was maybe seven or eight shots before the field's integrity collapsed. This force field had stopped dozens of rounds cold and looked nowhere near ready to drop. It was only when they stared at the man who conjured it, more specifically, his eyes, that they realized they were out of their depth.\n\n\"Now!\" Alex commanded, dropping the shield as the agents started reloading. Natalya, Jaesa, Hardick and the men he commanded broke cover, unleashing a torrent of fire on the Collective. Some agents were gunned down, while others dove for cover as they saw station security come at them, weapons blazing.\n\nTaal'ani, however, was worked up into a lather that she had forgone the use of firearms. Several times, she had suffered nicks and near misses, which sent her into a frenzy. Because of this, she holstered her weapon and unsheathed her claws, preferring to engage her enemies at melee distance. More than ten Collective infiltrators had already died at her hands before they arrived at Command, and she just kept adding to that count.\n\nThe defenders of Veldhern station charged in, overtaking the Collective's positions. Some agents tried fighting back, but they were put down brutally. Seeing the fate of their counterparts, the infiltrators who were furthest away surrendered, not wishing to join their friends. Taal'ani rushed over, seeking to end to them, looking menacing with blood splattered all over her face and claws.\n\n\"Taal'ani, that's enough!\" Natalya called out, catching her friend's attention, stopping her from throttling a man who surrendered.\n\n\"The bastard shot at us and has probably killed some of the folks here!\" Taal'ani argued.\n\n\"Be that as it may, we need information and we can't interrogate a corpse! Stand down!\" Alex commanded. Taal'ani grumbled but put away her claws as she was instructed.\n\n\"That's right, sweetie!! I'm important enough to keep alive!\" the man sneered as he was apprehended and cuffed.\n\n\"Just because you're breathing doesn't mean that maiming isn't off the table. Utter another word without being questioned and I'll let Taal'ani here castrate you,\" Alex threatened. Taal'ani just grinned and unsheathed her claws once again, showing she was more than willing to follow that order. The man whimpered and kept his mouth shut, not wanting to lose his manhood like that.\n\n\"Remind me to never piss off a Fel'caan woman!\" Hardick remarked as he directed his soldiers to restore order to command. Natalya snorted a laugh, as did Alex, thinking the Lieutenant hit the nail on the head with that one! The barricaded techs and officers in the center were coaxed out of the cluster of offices. When they came out, they were relieved to see that their attackers were dead or in cuffs.\n\n\"Who is the ranking officer here?\" Hardick called out, hoping that there was still a semblance of command.\n\n\"That would be me. Lt. Commander Royce, at your service!\" a human man replied, stepping up to salute him.\n\n\"Do you know how to run this place?\" Hardick questioned.\n\n\"Somewhat. I was fifth in line to command here and I was still learning the ropes,\" the man replied.\n\n\"Well, you're going to need to learn fast! The station is still in disarray and we need eyes and ears out there, if we're going to take it back,\" the lieutenant stated.\n\n\"Roger that! All right, everyone, back to your positions! We've got work to do, let's go!\" Royce's voice boomed. At once, everyone scrambled back to their positions, heading back to their consoles and checking the feeds of the various zones.\n\n\"Please tell me we still hold the docks!\" Royce muttered.\n\n\"I can confirm that we do, sir! Looks like Commander Callista and her soldiers have completed a sweep of the area. There were some troublemakers and infiltrators in the area, but they were swiftly dealt with!\" one of the techs, a Nauc'turi woman, replied.\n\n\"Casualties?\"\n\n\"None, sir! Some of these... Sentry-bots, were damaged, but they are still fully functional!\" the woman told him, as she was listening to the Commander on the other end.\n\n\"Sentries? Are Inari Sunara and Priya Patel with Commander Callista?\" Alex queried.\n\n\"Lt. Commander Sunara and Gunnery Sergeant Patel are in command of these... Sentries and have assisted the Commander admirably! Commander Callista is awaiting further orders,\" the woman said, glancing in Royce's direction.\n\n\"Have half her men fan out and start retaking the zones heading into the station, one by one. We will need as many strategic zones captured if we are to have a chance at turning this cluster fuck around,\" Royce commanded.\n\n\"Sir! We have a problem!\" another tech, a Takharian man, called out.\n\n\"What is it?\"\n\n\"We have ships that have been identified as Collective ships that are making a beeline for the transports that hold our reinforcements!\" he said, his voice taking a terrified edge.\n\n\"Fuck! Are the transports within range of the station's cannons?\" Lt. Commander Royce asked.\n\n\"Negative sir! It will take them ten minutes to get within range and the enemy ships will have them in seven!\" the tech stated, knowing the situation was hopeless.\n\n\"Commander Royce? I would advise you to redirect Lt. Commander Sunara and Gunnery Sergeant Patel back to the Darkstrider! If they can get aboard and launched, they might be able to reach the transports before the intercepting ships do!\" Alex told the man.\n\n\"We can't lose the support of the Sentries they command!\" Royce said, making a snap decision.\n\n\"The Sentries can be tasked to accept a temporary Commander in times of crisis,\" Jaesa supplied. \"Have Inari and Pree establish a temporary command with Commander Callista!\"\n\n\"Sound strategy! Tahlkanti, relay the order, double time!\" Royce barked. The Nauc'turi woman nodded and soke into her headset, sending off the order. He only hoped that Sunara and Patel would get to the transports in time!\n\n******************************\n\n\"Pree, check to be sure the docking clamps are clear!\" Inari yelled as she raced to the cockpit, the doors sealing shit behind them. She jumped into the seat and powered up the Darkstrider, the ship roaring to life. Forgoing preflight checks, Inari put full power to the engines and waited for all clear from Priya.\n\n\"Clamps are clear!\" Priya shouted from the tactical console.\n\n\"Hang on!\" Inari shouted as she put the ship in reverse and gunned it out of the docks. She put half the engines on full forward thrust, while leaving the other half in reverse. The Darkstrider spun like a top, doing a full one-eighty degree turn on the spot. Inari then put full power to their thrusters and charged out of the bay, chasing down the intercepting ships.\n\n\"Give me a count, love! What are we dealing with here?\" Inari asked.\n\n\"Hold on...\" Priya replied, as she was doing a check of the holographic radar. \"Two frigates, half a dozen corvettes, and double that in fighters!\"\n\n\"This is going to require some fancy flying! Handle the guns! I'll do what I can to keep us alive!\" Inari told her girlfriend.\n\n\"Yes, ma'am!\" Priya replied.\n\nInari kept the speed cranked up to flank, pushing the Darkstrider's engines to their limits. She was catching the frigates coming up on their aft. They sensed she was there, and they slowed down and started turning. Inari knew they were looking to slow her down, so she wouldn't reach the transports in time. She scoffed and had Priya load the torpedo tubes, prepping the ordinance.\n\n\"Fifty percent power, Pree. I want them disabled, not destroyed,\" Inari told her.\n\n\"Copy that. All four frontal tubes are loaded and ready to fire!\" Priya told her.\n\n\"Fire!\"\n\nThe projectiles launched out of the ship, homing in on their targets. Inari kept up the speed and wove around the frigates with a complex spinning maneuver. She sped past the ships as they took direct hits from the torpedoes the Darkstrider had launched. The shockwave from all four torpedoes detonating was enough to knock out the shields on them both. Inari was grateful for the advanced engines on the Darkstrider, which allowed them to clear the shockwave, though just barely.\n\n\"Damn hon! That's some amazing flying!\" Priya enthused.\n\n\"We're not done yet! Sight in those bastards when they're in range and fire at will!\" Inari barked.\n\nPriya focused back on the tactical console and brought up the gunnery chair before getting seated. Once she was in, the HUD came alive and displayed her targets. They were all far away, but Inari was closing in on them, and fast! Priya kept her eyes on the fighters, as they were the ones she'd have to take down first. Ninety seconds later, one of the corvettes slid into range and she opened fire.\n\n\"C'mon!\" Priya gritted as the concentrated fire from the Pulsar cannons whittled down their shields.\n\nSeconds later, the shields dropped, and laser fire peppered the corvette. Whooping in triumph, Priya sighted in her next targets, a pair of fighters, and opened fire. In seconds, she sent the pair of ships careening towards the planet below, powerless. As Priya took aim at her next few targets, they broke off their assault on the transports to focus on them.\n\n\"I'd say that we've got their attention, love!\" Priya yelped, firing at whatever ships came into her crosshairs.\n\n\"That's exactly what we need to do! Keep them off the transports, so they can dock with the station!\" Inari said as she dipped and dodged, pulling out every maneuver she knew to stay alive.\n\n\"That's another pair of fighters disabled!\" Priya exulted.\n\n\"Wish we could just blow the bastards up!\" Inari grumbled.\n\n\"Only if we have no choice, love! Remember, ships are expensive!\" Priya reminded her.\n\n\"I know! I know!\" Inari grunted as she put the ship into another series of spins. A good deal of the incoming laser fire sailed harmlessly past them. Some shots were direct hits, but the shields held, keeping the women aboard alive.\n\n\"These guys are really starting to get on my nerves!\" Inari yelled as several fighters danced in, landing several direct hits, before flying out of range. \"Shields?\"\n\n\"Fifty-seven percent! These guys know their shit, babe!\" Priya squealed in alarm.\n\n\"Commodore! Ma'am, can we shoot to kill? We're getting pummeled out here playing nice!\" Inari squawked.\n\n\"Withdraw to the station's effective cannon range! The transports are safe now!\" Williams informed them.\n\n\"Mission accomplished, love!\" Priya cheered.\n\n\"Thank God!\" Inari sighed as she gunned it to the station, outrunning the attacking ships. \"How many did we shut down?\"\n\n\"Seven fighters, two corvettes and one of the frigates,\" Priya answered.\n\n\"I thought we hit them both!\" Inari huffed.\n\n\"One of the frigates must have recovered its power. It's headed back towards the turncoat fleet,\" Priya grumped.\n\n\"Not on my watch!\"\n\nInari turned the ship and locked in the escaping frigate, searching for any discernable weak point. It was hobbling along, going maybe one third of its top speed, which made Inari smile. A slow-moving target was always easy to get the drop on. It appeared that its speed was hampered, as it wasn't going any faster, despite the Darkstrider closing in on them.\n\n\"Love, what are you doing?\" Priya squeaked, as she saw that the Hades Cannon was powering up.\n\n\"Just making sure they don't get away,\" Inari said as innocently as she could. The moment they were at maximum range, she fired the weapon. The incandescent beam of the Hades Cannon brightened up space as it passed through, neatly cutting through the engine housing of the frigate. The frigate lost all power and then just drifted, propelled by the inertia of its now dead engines.\n\n\"You know, a couple of torpedoes would have done the job,\" Priya told her slyly.\n\n\"Really? Huh. Didn't think of that,\" Inari commented off-handedly.\n\n\"Uh-huh. You just wanted to fire the big honking gun,\" Priya accused.",
        "\"What? Can you blame me?\" Inari protested, giving her girlfriend big Bambi eyes. Priya just giggled and went back to checking the scope.\n\n\"Looks like any survivors are breaking off the attack and trying to get back to the formation around the Stalwart,\" Priya replied.\n\n\"Let's deter them, shall we?\" Inari smiled as she saw their shields were restored.\n\n\"Let's!\"\n\n******************************\n\n\"Docking seal is engaged and clamps are locked in!\" the pilot told the soldiers as they waited by the airlock.\n\n\"Commander Callista, is the docking bay secure?\" Fitch called over the comms.\n\n\"It is. We're waiting outside for you,\" the commander told him.\n\n\"All right, kids! Let's roll!\" Karl barked as the airlock doors hissed open.\n\nThe soldiers filed out, weapons ready and eager to get to work. The Collective had infiltrated the place they had called home for the last few years. It was time for some payback on these bastards. Karl and D'zalah were out first, directing traffic and ensuring that no one got hurt. Karl noticed something seemed out of place, or rather a particular someone.\n\n\"Soldier, front and center!\" Karl called out, singling out the one who wasn't in full body armor. The man looked around and realized that he was being called out and stepped up, saluting Karl.\n\n\"Yes, sir?\" Rasner asked, hoping this was a random inspection.\n\n\"Name, rank and serial number, now!\" the captain demanded.\n\n\"Rasner, Ronald T., Corporal; E2 (Elite Level 2 proficiency), 79035672,\" Rasner replied, stating who he was in truth. He hoped the gambit would work and that the captain would let him off the hook.\n\n\"Didn't have time to get armored up?\" D'zalah questioned.\n\n\"It was a bit of a scrum down there, sir. Just grabbed what I could and rushed to the transport,\" Ron lied.\n\n\"You ready to kill some Collective?\" Karl asked, quirking an eyebrow.\n\n\"Hoo-aah, sir!\" Rasner replied and cocked his rifle, showing he was ready to get down to business.\n\n\"Fall in with Sergeant Deak's squad,\" Fitch ordered, directing the man.\n\n\"Yes, sir!\" Ron saluted before he jumped in with the squad.\n\n\"You do know he's not one of ours?\" Lieutenant Kantori questioned once the squad had left.\n\n\"Oh, I know. My guess is that he might be a civilian playing hero, or... something else,\" Karl surmised.\n\n\"You think he might be...\" D'zalah asked, not finishing the question.\n\n\"Possibly. The way he was looking around suggested he's looking for an avenue of escape, but not just for him. I've already relayed orders to Deak to keep an eye on him. If he makes even the slightest move of aggression towards our men, he's instructed to gun him down,\" Karl stated.\n\n\"Why take the risk?\" D'zalah asked, seeing this as highly unusual.\n\n\"Call it a gut instinct. Something tells me that this guy isn't all bad. I'm giving him a chance to prove it,\" Karl replied.\n\n\"All right then Captain. On your head, be it,\" D'zalah Kantori replied, hoping that Karl wasn't making a colossal mistake.\n\n******************************\n\nRasner stepped into line with Deak's squad and followed the sergeant's orders. He knew he did the right thing by ordering the women he'd taken from Dorian to stay on the transport. There was a firefight going on and if they stepped off, they'd likely wind up dead. Soldiers were battling each other, and they didn't know who was who.\n\n\"Any idea on who we're supposed to shoot?\" Rasner called out.\n\n\"Here! The HUD's been updated! Gun down anyone outlined in red!\" Deak told him as he handed the merc a pair of glasses. Rasner took them and put them on, looking around.\n\nHe saw the outlines on the soldiers that surrounded him and nodded, seeing the blue coronas that surrounded them. He cocked his weapon and kept his eyes forward, searching out any potential targets. The squad approached a burning restaurant and stared at it, but Rasner had a gut feeling that nagged at him. The fire was burning way too brightly for it to have been a casualty of standard gunfire.\n\n\"Shit! Get down!\" the man called out, knocking several soldiers in front of him to their faces. They were about to get up when a squad of attackers popped up from behind a floral display, guns blazing. Several of the men in the squad were hit, but their shields held. They quickly got out of the way and dove for cover, while Rasner and the trio he knocked to the ground brought their weapons to bear.\n\nThe shots they fired hit their assailants and most of them hit the ground, injured or dead. Rasner then scrambled forward and scooped up one of the rifles that had hit the ground and turned back to the burning restaurant. By the outer walls of the restaurant, additional turncoats popped up, hiding behind the burning furniture. They took aim at the soldiers on the ground but didn't get a single shot off.\n\nRasner brought both rifles in his hands to bear and opened up on the enemies in the burning restaurant. Half the rounds he fired were stopped due to the shield generators they wore, but the other half overloaded their shields. The Collective infiltrators turned their attention to the man shooting at them briefly, but that was their last mistake. Seconds later, they were gunned down by the men of Sergeant Deak's platoon.\n\n\"Everyone out there, OK?\" Deak called out.\n\n\"Can confirm that, sir!\" one of the soldiers called out, getting up from the ground.\n\n\"Damn, Rasner! That was some quick thinking!\" another man commented, clapping the merc on the shoulder.\n\n\"How did you know they'd use that tactic?\" Deak queried as he ambled up to assess the situation.\n\n\"Part of the training I received in the Federation military. An ambush tactic that is a favorite of spec ops teams there,\" Rasner told them.\n\n\"How do you know that?\" Deak questioned, suspicious of the man.\n\n\"I was an E2 corporal for a while,\" the merc told the sergeant. Deak quirked an eyebrow, then smirked.\n\n\"Glad you're on our side! Take point with Rahkort and Dominguez. Squad, let's keep moving! We still have a station to clear!\" Deak called out, rallying them.\n\n\"Hoo-aah!\"\n\n******************************\n\n\"Keep pushing ladies! Last holdout is just ahead in docking bay ninety-four!\" Alex called out, as he holstered Wolf's Fangs and brought Stormbreaker out, cocking the weapon.\n\n\"Yes, sir!\" all three of them replied.\n\nThey followed him towards the last known zone that held Collective infiltrators. They charged in, with the Sentries and Commander Callista backing them. Lieutenant Hardick had since been relegated to Command security, keeping them safe as the battle for the station raged on. They quickly breached the doors to the docking bay and flooded in, eager to end this conflict.\n\n\"All right, you little bastards! The way I see it, you have two choices!\" Alex called out as he hefted his machine gun in front of him. \"You can fight for the Collective, refusing to surrender and wind up corpses in a matter of minutes.\"\n\n\"You said there were two options! What's option two?\" came a reply from the crates that were stacked as temporary barricades.\n\n\"Option two is that you lot surrender and walk out of here alive. It's clear that there's no way out and as it is, the fleet that is defending the station is far greater than those under Saubath's command,\" Alex told them.\n\n\"Fuck!\" came a distressed reply.\n\n\"You're lying! Operation Warlord has succeeded, and the station is surrounded by a fleet loyal to the Collective!\" came an arrogant, yet desperate reply.\n\n\"Commander?\" Alex asked the Lebanese woman who stood next to him. She pulled up her suit computer and tapped in several sequences. The bay doors opened, but the containment field remained active. Outside, in space, a battle could be seen raging. The battle fleet, lead by the Dauntless, was pounding the picket ships that guarded the Stalwart.\n\n\"There you go. Witness with your own two eyes, the failure of Operation Warlord. Those are your options; fight and die, or surrender and live,\" Alex told them.\n\n\"We surrender!\" came a reply, which was accompanied by an auto rifle popping out behind a stack of crates. It clattered to the ground and out stepped a human man with his arms raised. Many others also threw down their weapons and came out with their hands in plain sight. All but one infiltrator had come forward, throwing themselves at the mercy of the UCW.\n\n\"COWARDS!\" the lone human woman screamed as she launched herself at the soldiers of the UCW, her weapon spitting fire and thunder.\n\nSeveral soldiers scattered, looking for cover, while others hit the deck, avoiding her shots. Alex stayed calm, spun and dropped to one knee, while he drew his hand cannon, took aim and fired. The bullet bypassed what meager shields she had and hit the weapon in her hands. The auto rifle spun out of her grip and hit the ground in front of her. The woman stared at the weapon she just held, then at Alex, who kept his weapon trained on her.\n\n\"Next shot goes right through your head. Feel like tempting fate, missy?\" Alex asked as he cocked the hammer on the hand cannon. The woman reluctantly put her hands up and growled at Alex as they put her in cuffs.\n\n\"Where did you learn to shoot like that?\" Commander Callista wondered, rarely having seen such marksmanship.\n\n\"Self taught, mostly,\" Alex replied.\n\n\"Feel like giving some lessons?\" the commander asked, flirting with large Croat.\n\n\"He's busy,\" Natalya said, walking right in front of the woman. Commander Callista stared at Natalya, then hopefully back at Alex.\n\n\"You heard the lady. My schedule is full,\" Alex smirked as he followed Natalya, before putting his arm around her waist. Tanya seethed with envy, but found that she couldn't begrudge Natalya for protecting what was hers. She smiled wistfully as she saw how Alex looked at the Trini-Rus woman, wishing for something like that.\n\nShe watched the other two civilians join Alex and Natalya as they stepped away, their aid no longer required. Shaking her head, the Commander went back to directing her soldiers, making sure that each prisoner was secure. Now that they had taken back the station, they could get things back to normal. First thing was the mountain of paperwork, which Tanya wasn't looking forward to.\n\n\"Commander Callista?\" came an automated voice, and she turned to regard the Sentry-bot that stood a few feet from her.\n\n\"Yes?\"\n\n\"The threat to Veldhern station is contained?\" the Sentry asked, following its programming.\n\n\"It is. Thank you for your assistance!\" she replied to the machine.\n\n\"Happy to be of assistance. Temporary command structure is at an end. Returning to the Darkstrider,\" the Sentry informed her, and the remaining machines followed the lead bot, falling in behind it.\n\nTanya was amazed at what these Sentries were capable of and was curious if they had tech like that at their disposal. If so, she'd have to see command about getting them built and operational. Though she kept her mind primarily on the cleanup job ahead, as there was a lot to do before any sense of normalcy could resume.\n\n******************************\n\n\"Seems that no matter where you go, you attract attention,\" Natalya huffed in irritation.\n\n\"What can I say? I'm a likable guy,\" Alex teased, to which Natalya humphed. \"You know, you're cute when you get jealous.\"\n\n\"I'm not jealous!\" Natalya snapped. Alex gave her a look, and she softened her stance. \"OK, maybe a little. Can you blame me when hussies like the Commander are throwing themselves at you?\" she queried.\n\n\"Not at all. Though to be fair, Commander Callista doesn't have a snowball's chance in hell,\" Alex told his lady and she preened under the attention.\n\n\"All right, save it for when you're alone, you two,\" Taal'ani laughed. \"I'm curious though about how you worked so well with us during the firefight there, Jaesa.\"\n\n\"I'd like to know that too! It was like you were reading our minds and responding to our instructions on where to be and what to do!\" Natalya agreed.\n\n\"That is down to my combat programming. When I was crafting it, I made it so I would read and analyze the combat styles of my companions and adapt accordingly. It was a little jittery when I started it up, but towards the end of it was when things were really coming together,\" the AI admitted.\n\n\"That final push against the group in the military zone really had my head swimming!\" Alex admitted. \"It was literally like you were twinning with Nats back there!\"\n\n\"I know! I just hope that the fleet pulls off something similar out there!\" Taal'ani said as she stared out a nearby viewport, wondering what would happen next.\n\n******************************\n\nSaubath's face was impassive as he watched yet another ship from his fleet explode. He was beyond pissed at the turn of events, as the Takharian man hoped that his plan would have been more successful. He wondered what happened to those two engineers he had transferred to the Dauntless. If they had done their jobs and at least sabotaged that ship, the battle could have gone differently.\n\n\"How long before we have the co-ordinates to make the jump to hyperspace?\" Saubath demanded as his fleet tried to get away.\n\n\"Two minutes, sir! The navi-computer is working as fast as it can!\" the navigator told him fearfully. The man knew that Saubath was in a foul mood and hoped that he wouldn't be the subject of his ire.\n\n\"That's another ship down, sir!\" his tactical officer stated.\n\n\"Which one was it?\" Saubath ground out.\n\n\"The Grah'kess, sir,\" the tactical officer replied and Saubath cursed. That was one of the destroyers that was armed with the new pulsar tech. They only had several ships with it left, and Saubath only hoped that they could get the calculations before they were destroyed.\n\n\"Sir, we have an incoming transmission! It's from Dexter Malkaran!\" his communications officer told him.\n\n\"Put him through!\" Saubath ordered. The hologram of Dexter materialized and Saubath smiled, glad to see his compatriot alive. \"You got off the station?\"\n\n\"Barely! I'm in a shuttle headed right for you, but it's tough keeping all these ships off my back!\" Dexter stated, as it could be seen that he was piloting the ship through the firefight.\n\n\"Where are you?\" Saubath questioned, looking for his signal among the tactical map.\n\n\"I just cleared the second fleet's picket line and am trying to get to you! These fighters aren't making it easy for me!\" Dexter replied, sounding harried.\n\n\"If you want to get out of here, hurry! The fleet is taking far too many losses and we're severely outgunned!\" the Takharian man urged.\n\n\"Send a fighter escort to help me out!\" the former administrator demanded.\n\n\"All my fighters are tied up trying to ensure our escape! I can't spare any!\" Arcann snapped.\n\n\"Sir! Our shields are down to seventeen percent! We can't hold together any longer! We need to leave now!\" the tactical officer told him.\n\nSaubath looked over the holographic representation of the battle and growled at what he was seeing. Much as he hated to admit it, the man was right, they'd taken too many losses. The second fleet was bearing down on them, along with the support of the other half of the third fleet. Then, there was that nuisance of a ship, the Darkstrider.\n\n\"Comms, get the message out to the loyalists. Full retreat. Any that can't make it will have to be left behind,\" Saubath ordered.\n\n\"Arcann, what are you doing?!?\" Dexter screamed into the commlink.\n\n\"What I have to, to keep what we have from being taken. I'm sorry,\" the commodore replied with a smirk as he made to kill the line.\n\n\"No, you're not!\" Dexter accused, before the comms were shut down.\n\n******************************\n\nAna Williams watched in disbelief as Saubath's ships turned tail and entered hyperspace. She growled quietly to herself in frustration, angered that Saubath had escaped with nearly half the third fleet! The commodore's face was etched in pure anger, something which the bridge crew could see plain as day.\n\n\"Comms, open a line to broadcast to the fleets on the military and security channels only,\" Williams commanded.\n\n\"Channel is open, ma'am. Go ahead,\" her communication officer told her a few moments later.\n\n\"Soldiers of the UCW, this is Commodore Ana Williams. I know many of you have questions about what's been going on, considering this most recent attack on Veldhern. We have all suffered a great betrayal today, with those among us whom we called friend, showing their true colors as traitors. Your officers may or may not have told you, but what we suffered today was an attack by Tosh'Kanthi Collective,\" Williams stated.\n\n\"I know many of you have heard the rumors about us being at odds with them. Many of the business practices and actions they have taken caught the ire of many a citizen in the UCW. Many other races and organizations have also run afoul of them and their shady and reckless dealings. Today, marks a more important point in the history of this conflict,\" Williams went on.\n\n\"They tried to outright take that which was not theirs or in dubious claim. They sought to undermine everything we had established here and take it for themselves. But, as today has proven, that is something they are going to have to work for. What they tried to pull off today failed and it will continue to fail, because we have something that they don't. Heart.\"\n\n\"Hitting us from behind won't stop us, it'll just piss us off. As of this moment, I will begin making my report to high command and forward the petition to invoke war against the Tosh'Kanthi Collective. For too long, we have stood by on the sidelines, watching as this organization of terrorists, wantonly steps on and enslaves all who stand up to them. It's past time that this pacifistic attitude end,\" Williams told them.\n\n\"No longer will stand by and stand down in the face of such evil. We will take the fight to them and just as they displayed today, we will show them no mercy! No more waiting, no more hoping, but actually doing something to end this threat, once and for all! They hit us where we live and I say we hit them back,\" Williams stated passionately.\n\nThe bridge crew had turned to regard their commander as she made her speech. They all nodded and agreed with every word she had said, eager to get into the fight. For years, the Collective had operated on the fringe of Galactic Law, always staying just within the boundaries. Because of the inaction of the powers that be, they continued to do what they wished and never be held accountable. Today, that would change.\n\n\"I know that we've already lost good people this past week. Going to war like this will see us lose many more, and it is not something I advocate for lightly. The Collective must be dealt with, or soon, the rest of the galaxy will see them become too powerful to stop. Continue with your duties and await further orders from your superiors about what's to come,\" Ana finished before she killed the line.\n\nApplause erupted around her and she smiled at her crew, glad to see they stood with her. Ana then stood and saluted her crew and they all saluted back, elated to serve with such a woman.\n\n\"In light of recent events, every member of the military and security service will be granted a thirty-six-hour furlough. Rotate it so that there are only thirty-three percent of said personnel are on furlough, while the other sixty-six are on duty. Start up with the lists, including yourselves, and pass the order on throughout the fleet, the station, and the ground teams. We all need a break after this cluster fuck,\" Ana stated tiredly.\n\nAnother cheer came from the bridge crew and everyone snapped off to work, more than eager to get the lists drawn up. Though the crews usually did get shore leave now and then, the longest they got was twelve hours at a time. A whole thirty-six hours?!? Many would jump at that, eager to do things they couldn't do in twelve hours.",
        "Ana retired to her cabin and started putting together a formal report for high command. She was also receiving reports from various officers aboard the station, which she intended to use to push her petition. With this new evidence, and the proof that Arcann Saubath was a traitor to the UCW, high command would have no choice but to declare war on the Collective. At least, that was her hope, and that high command wasn't too deeply mired in the politics of the UCW to do anything.\n\n******************************\n\nAlex, Natalya, Taal'ani and Jaesa were just finishing with rounding up the last remnants of resistance on the station. Though they could have just stood by and let station security handle things, the crew figured they might as well finish the job. Lieutenant Hardick, along with Commander Royce, and the other station personnel were grateful for the assistance.\n\n\"So, the civilians were spared from the carnage and the trauma of the attack?\" Alex questioned the Lieutenant as they headed for the administrative offices.\n\n\"For the most part, yes. The moment the station's alarms went off, everyone beat feet to the panic rooms. Some were caught outside, but thank God there were no fatalities,\" Hardick commented with a sigh.\n\n\"Things on the prisoner front, though, that didn't go so well,\" Commander Callista said as she stepped up to join the troupe.\n\n\"What do you mean?\" Natalya asked.\n\n\"Some prisoners we had, who were slated for transfer to the prison colonies, got loose,\" the woman told them.\n\n\"How many? And who?\" Taal'ani questioned.\n\n\"Mostly pirates, but that quintet of traitors from the planetside security force. They not only broke out, but they boarded a ship and escaped,\" Tanya told the group.\n\n\"Ah, damn it!\" Alex growled. \"That one guy, who was their leader, he's going to cause all kinds of trouble!\"\n\n\"You don't have to tell me that! I've run into the guy more times than I cared to and each time was an... unpleasant experience,\" Callista shuddered.\n\n\"I know what you mean! Dealt with that asshole personally, and he's damn lucky that Korsa wasn't around to put his ass down!\" Taal'ani huffed.\n\n\"Indeed! The Sergeant would likely not have survived such an encounter. I would say that by the time the good doctor would have been done with him, Cullen's own mother would not have been able to recognize him,\" Jaesa stated matter-of-factly.\n\n\"I would pay money to see that happen!\" Tanya laughed, her mirth infecting the group that marched through the offices.\n\n\"You and me both, Commander!\" Hardick chuckled. They finally arrived at the sealed room and Hardick let them in. Dohbalan was already there, along with Captain Fitch and Commander Royce. Commodore Williams and Lt. Commander Williams were there as well, via holo.\n\n\"... Saubath's defection and the loss of nearly half the third fleet are a PR nightmare!\" Dohbalan griped.\n\n\"I agree, but at least we have something to show for it,\" Ana stated.\n\n\"What do we have as a means of lessening the blow of such a devastating breach of security?\" Fitch wondered, angered that his home had been violated.\n\n\"We confirmed the death of the hacker known as Void Lord. That alone should net us some brownie points,\" Alex stated, as he made his presence known.\n\n\"You have confirmed proof of that?\" Dohbalan questioned.\n\n\"Jaesa?\" Alex asked, and the AI mentally reached into her memory cortex and replayed the man's death on a nearby holo emitter.\n\n\"That's all well and good, but what about...\" Graham started, but was shushed by his wife. They continued watching the recording, which showed Lieutenant Sarnoc with the hacker's head, boarding a shuttle seconds before the head was atomized.\n\n\"Damn! That's a fine ass shot! Who made it?\" Callista asked.\n\n\"That would be me,\" Jaesa stated, having finished playing the feed. She was careful to make it appear as though it was from a body cam and not her own eyes. Though the crew of the Darkstrider knew what she was, these people did not, and she wanted to keep it that way.\n\n\"So that hyperspace route is out of their hands then?\" Ana asked, sounding hopeful.\n\n\"Unless they have a way of reconstituting a memory cortex from free floating atoms, then I'd say yes,\" Taal'ani smirked.\n\n\"Well, that's the second victory we've had today!\" Ana stated.\n\n\"Second victory?\" Alex questioned.\n\n\"Yes. We've captured one of the top agents for the Collective, Dexter Malkaran. Tried to get to the Stalwart as a means of getting away, but he took too long and they left him behind. Thank Allah that his shuttle wasn't equipped with a hyperdrive!\" Ana sighed.\n\n\"But there is still the fact that Saubath has in his possession at least two ships that have been outfitted with the new pulsar cannons,\" Dohbalan groaned.\n\n\"At least they didn't have one equipped with the new transmitter,\" Graham stated.\n\n\"Still, getting away with tech like that, seriously cripples any advantage we may have had,\" Dohbalan griped.\n\n\"Lieutenant Hardick, Commander Callista, please verify your security clearance levels,\" Ana told the soldiers. They did as they were asked and Ana reviewed them, along with a brief of their service records. She looked them over, before adding several notations and making her announcement.\n\n\"Lieutenant Hardick, Commander Callista, you have both shown initiative that goes beyond the level of the rank and file. I am recommending the both of you to receive commendations for your efforts today. Especially you, Lieutenant, and I feel that you have held your position long enough. Effective immediately, you are now promoted to the rank of Lieutenant Commander and are now second in command of station security. Congratulations!\" Ana told him.\n\n\"Thank you, Commodore!\" Hardick replied with a salute.\n\n\"Commander Callista, I also see that you have applied for a transfer that goes beyond the duty level of handling the docks. That is a transfer I will fast track and have you promoted to the responsibility of security commander of the entire station,\" Williams told her as she finished putting the order through.\n\n\"Thank you, Commodore!\" Tanya replied graciously as she saluted.\n\n\"Now that the both of you are of the appropriate security clearance, you need to be read in on the situation,\" Ana told them. She told the both of them the reality of the situation, and of who Alex, Natalya and the rest of them truly were.\n\n\"So, you are from Earth, six-hundred years ago?\" Hardick questioned, astonished that Alex was that old.\n\n\"Yup. Me, Kasumi and Jaesa,\" Alex stated.\n\n\"I understand that this is a lot to take in, but we have more pressing matters at hand. Commodore, I know that you have already given us much in regard to tech advantages, but is there anything else you would be willing to part with?\" Ana almost begged. Alex stood there, thinking things over. While he was leery of giving out more tech, he didn't want Veldhern to fall into the wrong hands, either.\n\n\"Sir, if I may offer a suggestion?\" Jaesa questioned.\n\n\"Go ahead,\" Alex told her, letting her have the floor.\n\n\"I would suggest that we use our knowledge to upgrade the station's cannons and the shield systems. Especially the Bulwark shield system. If we can increase its potency and efficiency, I think that in itself would provide the station with a much needed edge,\" Jaesa stated.\n\n\"Now that... is an idea I can get behind,\" Alex smiled.\n\n\"So can I!\" Ana replied. \"What would you need to make this happen?\"\n\n\"Well, for starters, we would need to gain access to the cannon and Bulwark's systems, so we can make the changes and modifications required,\" Natalya replied.\n\n\"Also, I would recommend that the station's engineers also be present, so they can see what we are doing and know firsthand of how to maintain the modified systems,\" Jaesa replied.\n\n\"Would it be all right if Lt. Commander Williams accompanied you? I'm sure he would like to see such modifications firsthand,\" Ana queried, and Graham was nodding vigorously at this statement.\n\n\"As long as he's fine with observing, he's more than welcome to come and see us work,\" Natalya smiled.\n\n\"Splendid! Oh, and if you ladies would record what I'm about to say? Just so any engineers that maintain the systems don't give you any grief,\" he said to the women. Nodding, both Jaesa and Natalya brought up their comms systems and began recording the administrator's words.\n\n\"I, Administrator Phineas Dohbalan, hereby authorize Natalya Vostrikov and Jaesa Harkness to commence work on the station's cannons and shield systems. I am invoking executive order Ares, so they are allowed to work on the station without impediment. Any who stand in their way will answer to me, directly,\" the man stated.\n\n\"Thank you, sir! We appreciate it!\" Natalya smiled, before looking over to Alex. He nodded to her, before the Trini-Rus woman and the AI turned and left the room. Both Lt. Commander Hardick and Commander Callista left with them, as their guides to the bowels of the station. Lt. Commander Williams' holo winked out, as he was likely on his way to a shuttle to board the station.\n\n\"We truly appreciate the gesture, Commodore!\" Ana said to the big man, and he bowed slightly in response.\n\n\"It's the least we could do, given the situation we're all in right now,\" Alex replied.\n\n\"Any idea just how potent they'll make the cannons and shields?\" Dohbalan asked.\n\n\"Let's just say that by the time those two are done, any pirates or raiders who think about attacking this place will be in for a rude awakening!\" Alex smirked.\n\n******************************\n\nD'zalah Kantori stood in the observation room, just adjacent to the interrogation room, where the mercenary known as Rasner sat. She was looking at the man with a modicum of interest, as his actions on the station had caught her attention. The man fought with all the tenacity and ferocity of a battle hardened spec ops soldier and had the training to prove it.\n\nIn her hand was a tablet which showed her the man's service record. His name, rank and serial number were exactly as he had given them, along with his training level. Once the threat to the station was ended, both she and Fitch had confronted the man. Mainly about who he was, why he was there and how he was there. Rasner had fessed up about everything, him being aboard the Cerberus, working for the pirates, everything.\n\nD'zalah was especially concerned about the women that had stowed away with him on the transport. She'd met and talked with them briefly, enough to know that the poor things had been through hell and back multiple times. The man had been honest about why he took them, which was to see them safe and away from the monster that was Dorian Johnson.\n\nThe Nauc'turi woman had seen the armor cam footage of the pirate captain and saw that the man was truly soulless. It was a delight to see Shazza literally choke the life from the man, as such creatures couldn't be allowed to exist. The girls had been remanded to Veldhern medical and would remain in their care for the immediate future. That Rasner did what he could to save those poor girls showed that he, unlike Dorian, had a heart.\n\n\"So, any ideas on what to with this guy?\" Karl asked as he entered the room.\n\n\"I have a few ideas, yeah,\" D'zalah told her friend and boss.\n\n\"What are you thinking?\" Captain Fitch questioned.\n\n\"I'm thinking we could use him. As a soldier, either planetside or up here, on the station,\" Lieutenant Kantori stated.\n\n\"Use him? Like, give him a job?\" Karl asked incredulously.\n\n\"Yes! He's proven himself a capable soldier and willing to follow orders, in the correct circumstances,\" the Nauc'turi woman said.\n\n\"He's a merc!\" Karl griped.\n\n\"Maybe, but he's a warm-blooded one. You saw the state of those girls after we fished them out of the transport. They were wondering where Rasner was, calling him their 'deliverer',\" D'zalah told her boss.\n\n\"I know! I was there! Fuck! You know, this is a terrible idea! It's absolutely horrible and could wind up biting us in the ass!\" Karl groaned.\n\n\"Which is exactly why it's what we need! In case you hadn't noticed, we have become a little shorthanded in the last week. Some guys are on their backs, while others are being sent home... in bags. It's not ideal, but it's a fuck ton better than what we have right now! Besides, a former spec ops soldier who hasn't lost his soul or identity? That's a rare find! Besides, you gave me the idea when you suggested he fight with Deak's squad,\" D'zalah pointed out.\n\n\"All right, fine! Your points are too numerous and too logical to be countered right now,\" Karl admitted. \"But this guy, he will be your responsibility. He fucks up, it's on your head. Understood?\"\n\n\"Crystal, sir!\" the lieutenant saluted. The pair then walked out of the observation room and into the interrogation room, where Rasner waited. His hands were cuffed to the table, but he was completely at ease. Karl and D'zalah walked into the room a few seconds later, and he looked up at them.\n\n\"I would assume that you two have some kind of plan for me?\" Ronald asked.\n\n\"What makes you think that?\" D'zalah asked while cocking an eyebrow.\n\n\"Well, for starters, I'm in an interrogation room and not the brig, which is a good sign. There's also the fact that you were nice enough to bring me a coffee as well,\" Rasner said as he gestured to the empty mug that sat on the table.\n\n\"A spec ops soldier who can think. I like that,\" Karl replied, before he looked down at the lieutenant and nodded.\n\n\"You're not wrong about that guess. Let's just say that you have two options in front of you. Option one; you join us in the defense of Veldhern, as a soldier. You sign a contract that keeps you here for a period of at least ten years and, of course, we will monitor you. Given your recent history of working with soulless pirates, I'm sure that you understand the precaution there,\" D'zalah stated.\n\n\"All right. What's option two?\" Rasner asked, as he liked to know all the alternatives he had before making a choice.\n\n\"Option two is we send you to the brig and command dispatches you off to a prison colony, along with every pirate and traitor we have locked up here. Trust me, where they're going is not a pleasant place,\" Karl told him.\n\n\"I believe it. Is there anything about option one you haven't told me about?\" Ron wondered.\n\n\"Well, you will be paid of course, and hold the rank of corporal. You will have a tracking chip implanted within you, so we can see where you are at all times. We want to be able to trust you, but you have to show us you are trustworthy,\" D'zalah stated.\n\n\"That's fair. Before I accept your generous offer, I have a question and an offer,\" Rasner told them.\n\n\"What is the question?\" Karl asked.\n\n\"Those three women I took from the Cerberus, are they going to be all right?\" the merc asked.\n\n\"They are in the care of Veldhern medical and will receive the help they need. With enough time, I think they'll be able to resume normal lives,\" Lieutenant Kantori replied.\n\n\"I'm happy to hear it! No one should have to be enslaved to that scumbag Dorian, physically or mentally!\" Ronald growled. D'zalah's eyebrows climbed at this and a smile lit up her face. She was happy to see that the merc not only had a heart, but a soul.\n\n\"What was the offer?\" Captain Fitch wondered.\n\n\"If you're offering me something like this, then it's clear that you are in need of some help in manning this station and the planet below. I can help you in sorting out who's who among the men in the brig,\" Rasner told them.\n\n\"How?\" Karl queried.\n\n\"I wasn't the only merc among the ranks of the pirates. Let me see who you have in lock up and I could help you narrow down who could be useful to you,\" the merc told them.\n\nKarl and D'zalah looked at each, thinking this could be a great idea, or something that could bite them in the ass. They had methods of seeing if someone was being truthful on the fly, though. So maybe a test like this was what they needed to see if Rasner would play ball with them. D'zalah winked at Karl so Rasner couldn't see, and he nodded.\n\n\"OK. Come with us and help with sorting out who could be of use and who we send to the prison colony,\" Karl said as he walked over and unlocked the merc's cuffs.\n\n******************************\n\nMaia O'Toole was walking along the promenade of Veldhern station, surveying the damage that had been done. Most of it had been superficial, thankfully, and it was nearly cleaned up as she walked by. There were still some cleaning crews ambling about, doing what they could to restore once friendly and peaceful atmosphere of Veldhern.\n\nThough the tourists and civilians had been shaken by the attack, the station had been prepared for such an occurrence. The panic rooms equipped with automated defenses and built in redundancies to keep hackers out were a godsend. Some of the bigger skeptics wondered if such security measures were needed when they first built the station. Maia was happy that now, those same voices were silent.\n\nMaia was finally on shore leave, having finished the mountain of paperwork she was assigned. It had been a long day, winnowing out the last of the traitors, locking them up and making the reports. Maia hated paperwork and was glad to be done with it at last and was now enjoying some shore leave several hours later.\n\nCommerce and business were still flowing, albeit at a much slower and subdued pace. Maia supposed it would be this way for at least a week until the final shock of the incident wore off. She recognized some of the workers from her favorite haunts that were still plowing through their shifts.\n\nThe commander had to admire their tenacity for continuing to work. She was sure that these folks were getting overtime and the woman smirked. Though a job on Veldhern station paid well, there was always money to be made, which drove some workers. Others did it because they wanted that routine, to help keep them sane and to maintain some semblance of normalcy.\n\nShe noted how many of the places were understaffed, but the managers weren't harassing the employees. They had all been through a lot, so a slower pace was acceptable at the moment. Maia noted how some places had closed entirely, for the day at least, and couldn't blame them. With the massive scrape everyone had just been through, taking the day to blow off some steam was a given.\n\nThat was exactly why Maia had been elated to be among the first third of fleet personnel to be let off for shore leave. While normally a creature of habit, Maia needed to cut loose and live a little. She sighed and smiled to herself as she followed the directions to the Red Light district. Maia headed straight for Sirens, knowing that it was the one place that had what she was looking for; scantily clad women willing to make their patrons feel better.\n\nShe normally didn't come to places like this, as Maia was looking to bound forward in her career. But after a serious brush with death, she figured, 'Fuck it!' and walked into the club. Though she and her captain were involved from time to time, it wasn't enough. Not for Maia, who still had yet to find herself anyone serious. Though she didn't think she would find anyone here, Maia would at least find some serious fantasy fuel.\n\nShe checked in at the club's entrance, paying the cover charge before entering. It was there Maia learned that all fleet members had a thirty percent discount on all services in the club. This gesture of thanks was currently being enjoyed by many of the soldiers and sailors in the club.\n\nMaia saw the club was nearly filled to capacity with many service members from the second and third fleets. They were all eating, drinking and being merry, living up the good fortune of being alive. They were boisterous and rowdy, but they were managing it with some level of respect for the workers and their fellow officers. None of them wanted to appear as total idiots or looking to be put on report.",
        "Maia found a less occupied area of the club where a cluster of men and a few women were watching Amarthena dance. She scooted over to a small two person table that had been recently vacated and sat down to watch the woman dance. Maia couldn't help but be pulled in by the hypnotic way that the Rondathan woman was dancing. She smiled as she watched the woman move and shimmy about, keeping everyone's attention on her.\n\nA waitress ambled by, wondering if Maia wanted anything to eat or drink. Feeling a little peckish, Maia ordered a double pint of beer and some human nibbles. The waitress then bustled off to fetch her beer and put her order through, and she turned her attention back to Amarthena. Licking her lips unconsciously, Maia let her thoughts run rampant, letting them give her fuel for her lusts and fantasies.\n\nMaia would have done more than just stare at the woman, but being a commander aboard the Dauntless, a level of decorum was required. That didn't mean that she wouldn't unleash everything she wanted to do when she was alone. Maia was getting more than a little hot under the collar, as she'd always had a thing for Rondathan women. Something about the way they moved and how they carried themselves always drew her in.\n\nUnknown to Maia, Amarthena was eyeing her with extreme interest. Though she had kept to her own kind for the most part, Amarthena had developed a taste for humans. Human women, especially, left her panting and wanting more than just a taste. Maia, with her classic Irish looks and short brown hair, caught her attention in a way she did not expect. She then put a little extra effort into her step, her eyes seeking to meet Maia's.\n\nMaia enjoyed watching the routine and was having to fan herself periodically as she watched. Her food and drink came a few minutes later, and she dug in while watching the show. Just as she was starting into some nachos, she looked up and her gaze locked onto Amarthena's. She blinked a few times, to make sure she wasn't imagining things, and saw that the Rondathan stripper was indeed staring at her.\n\nShe took a beat to breathe, then started into her food and noted that the woman was watching her. Maia thought it odd that such a gorgeous, plum skinned woman would stare at her, but she still enjoyed the attention. As Maia ate, she saw Amarthena was making an extra effort to make her tits bounce and shake. It was almost as though she wanted Maia to come up and bury her face in her substantial rack.\n\nAmarthena knew she had caught the commander's attention, as she could see the woman staring back. Interestingly enough, the Rondathan felt warm, feverish and lustful, wanting to take that woman right here and now. She could feel a warmth bloom in her nethers, and she moaned quietly as she danced. Her set was nearing its end, and she was getting ready to see who wanted a private dance.\n\nSeeing that Maia had just finished up with her nibbles and was nursing her beer, Amarthena opened up the digital tip jar. The digital jar was a representation of what those watching her thought her performance was worth. Many of the soldiers and officers tipped her well, and she was pulling in hundreds of credits from that little thirty minute stint.\n\nShe then received several requests for a private dance in an enclosed room. She looked through the offers and they were all standard in what they wanted. As she scrolled to the end, that's where she saw the offer that was put in by Maia. It was a bit higher than what the others were offering. A few moments later, the other offers topped up to match it, hoping that they'd be picked instead.\n\nAmarthena had already made up her mind though and wanted to do a dance for Maia. She didn't let anyone there know that though, as she stopped dancing. Though she was normally supposed to be naked at this point, Amarthena kept her flimsy lingerie on, as something to show off for her audience of one. She made a big show of sauntering down off the stage and sorting through the offers so everyone could see them.\n\nMany of the guys there were panting and itching to get their hands on her, but they knew the rules; no touching unless you were specifically invited by the dancer to do so. She eliminated most of the offers, leaving Maia's and two other officers' up on display. Amarthena made it look like she was having a tough time deciding, before she seemingly pointed at random to Maia's offer.\n\nThe other offers fell away, and she turned to the human woman, who was shocked and stunned at being the one picked for such a dance. The male finalists looked a bit crestfallen, having lost out on a private dance to a woman. But their pride was assuaged when another dancer popped up; a Khontaran woman with pink skin named Shiva. This commanded the men's attention, as seeing a Khontaran woman outside of their home system was extremely rare!\n\nAmarthena took Maia by the hand and led her towards the back, where the private rooms were located. She stopped by the entryway to the corridor before waving and catching a security guard's attention. She then tapped a wrist comms and sent a signal, telling him she'd be in one of the rooms for forty-five minutes. The signal chirped affirmatively, and she was sent a security code and a room number.\n\nTaking the lead once more, Amarthena walked to room number seven and entered the code on her watch. The door unlocked and let the pair of them in, before it closed automatically, locking behind them. The constant thump of the dance music in the club was muted to a dull roar, making it easy for the pair of them to talk.\n\n\"Hi! I'm Maia,\" Maia said, introducing herself.\n\n\"I'm Amarthena, but you can call me Thena. First time?\" the Rondathan woman asked. She came across as confident but was nervous, like a girl experiencing her first time.\n\n\"Yeah! Kind of obvious, huh?\" Maia smiled sheepishly.\n\n\"Just a little. How about you make yourself comfortable, while I set the mood,\" Amarthena said.\n\nMaia just nodded and looked about, noting how clean the room was. Everything around her was white, with black accents, making the entire room pop. There was a comfy armchair, a large lounger, almost big enough to be considered a couch, a small dais with a pole attached to it and a small bar with a couple of stools next to it. On the bar was an assortment of drink bottles, with various liquors and crystal glasses.\n\n\"Drink?\" Amarthena called out.\n\n\"Vodka, straight up,\" Maia told her. Amarthena fixed her a glass with three fingers' worth of the alcohol, before prancing up to the commander.\n\n\"Your drink, ma'am. Feel free to loosen your jacket and pants a little. No cameras in here,\" Amarthena cited, her amber eyes smiling with her.\n\n\"If that's the case...\" Mae replied as she plonked herself down on the lounger behind her and undid her tunic.\n\nAmarthena couldn't help but stare at Maia's pert chest, wondering how her tits would feel in her hands. She started, as she remembered she was supposed to put on a show for the woman, and clapped her hands. The sequence was one she did often, which dimmed the basic lighting and turned on background lights. It started as a deep blue, before blending to purple, then red, before it shifted back in the opposite direction.\n\n\"Oooooooo! I like this!\" Maia grinned as she took in the lighting, appreciating the look of it.\n\n\"If you like that, then I'm damn sure you're going to love this hun!\" Amarthena stated. She clapped again and house based dance music started up behind her, coming through hidden speakers in the room. The Rondathan stepped up onto the dais, grabbed the pole and moved with the beat. Amarthena was dancing in ways that made Maia wish she was the pole, with the alien woman's luscious body grinding up against hers.\n\nAmarthena was feeling like she was being ravished with Mae's eyes and loved every moment of it. She slowly lost the flimsy top, letting it fall to the ground as her pendulous breasts swung free. Hearing a moan, she chanced a glance down and saw Maia rubbing her thighs, squirming like mad. Biting her lower lip, Amarthena caught Maia's eye and did a little finger gesture, telling the commander to go ahead.\n\nMaia could scarcely believe what she was seeing, but wasn't going to wait on a written invitation! She undid her boots and trousers, letting them fall away from her body. Maia swore she heard the Rondathan woman sigh happily, but focused on the woman dancing. Amarthena had soon teased her way out of the thong she was wearing and danced her way down to where Maia lay.\n\nMaia was still wearing her undershirt and panties but was half out of her tunic as she rubbed herself. Watching the show was making her unbearably horny, and she wanted to do more than just watch. But, like the men who were watching outside, she knew that she couldn't do anything unless she was told she could.\n\n\"You like what you see?\" Amarthena teased, licking her lips as she shimmied and ground her naked body on Maia's.\n\n\"Yes!\" Maia breathed, trying to stop herself from losing her mind.\n\n\"Would you like to do more than watch?\" Amarthena questioned with a smile on her face.\n\nIn response, Maia leaned forward, desperately wanting to kiss the Rondathan woman. She held herself back, going only halfway, wanting to see where Amarthena stood on this. Maia waited for ten seconds, but then drew back, thinking she didn't want it or was waiting for a bigger payout. She was surprised when her lips were smothered by Amarthena's, as the alien woman kissed her fiercely.\n\nHeart soaring, Maia kissed her back, letting her passion and lust bleed through the kiss. She could feel Amarthena's hands on her body, roaming up to her breasts, cupping them in her hands, before squeezing them gently. Maia moaned deliriously as the two of them continued to kiss, grinding hard into each other. Amarthena felt the human woman's hands on her ass, grasping and pulling her hips close.\n\n\"Uh... I don't... I can't...\" Maia started, realizing what she was doing and what it might cost.\n\n\"Shh. Don't worry about it, hun. In case you hadn't realized, I want you just as bad,\" Amarthena told her. Maia was beyond flustered and amazed at what the woman in her arms was offering. She wanted her?! Her?!?!? If Maia didn't have the Rondathan on top of her, she would have done a happy dance.\n\n\"I want to know what you taste like. Lose this pesky thing, would you?\" Amarthena asked, gesturing to Maia's tunic and undershirt.\n\nNodding dumbly, Maia slid out of her tunic and pulled the undershirt over her head, exposing her breasts to the air. The dancer's mouth descended hungrily on her tits, pulling a nipple into her mouth. Maia hissed, as it had been some time since her last encounter, and she was really sensitive.\n\n\"Ooooooooo! Someone likes it when I do that!\" Amarthena giggled.\n\nShe licked Maia's breasts, leaving not a single inch untouched by her tongue. It was all Maia could do to contain herself, as Amarthena went to work on her tits. She didn't know how long she had done that for, but she was soon bereft of the sensation on her chest. Maia then felt Amarthena's mouth and tongue questing lower, seeking her hidden treasure.\n\nMaia felt herself get all gooey and steamed from the stimulation, wanting and needing this. Amarthena kept going, taking hold of her panties and sliding them off. Maia shivered as she felt the cool air hit her nethers. That was short-lived as she felt the Rondathan woman's mouth clamp down on her pussy. She cooed and crooned at the feeling of it and writhed in Amarthena's grip.\n\n\"Oh... fuck!!!\" Maia yipped, beyond happy in that moment.\n\nAmarthena smiled as she licked her human lover's quim, enjoying the taste of her. She loved the way Maia moved as she ate her out, taking the time to lick and suck her. Though she could have done this all night, Amarthena knew they didn't have that much time. She wanted to hear this woman scream her name before they were done and licked her with teasing abandon.\n\nMaia was literally dripping by this point, right on the verge of cumming as her new lover licked her pussy. Her hands snapped to Amarthena's head and pulled it into her quim, wanting her to go harder. The Rondathan woman obliged her human lover and did just that, gripping Maia by the ass to pull her into her mouth. She flattened her tongue just then and pressed it hard on Maia's clit as she sucked it hard.\n\nA scream tore out of Maia and she wailed like a banshee as she came, endorphins racing through her system. Her entire body quaked, wracked by the pure bliss that was passing through it. Eyes rolling back through her head, Maia nearly passed out from the intense feeling as she shivered and sighed. She then pulled at Amarthena's arms, drawing the woman up for a kiss as she sighed through the aftershocks.\n\n\"Mmmmm! You enjoy that?\" Amarthena giggled, brushing her black hair out of her face.\n\n\"Just as I'm sure you're going to enjoy this!\" Maia grunted.\n\nAmarthena had no chance to respond as she was suddenly flipped and placed on her back on the lounger. She tried to protest, but soon found her ability to do so hampered by Maia's lips. The human woman kissed her with a fervor that she had seldom seen, much less experienced. Her heart beat faster as Maia pressed up against her, rubbing her naked body all over hers.\n\n\"I... I've... never... been...\" Amarthena stuttered.\n\n\"It's not in my nature to be a selfish lover. Just as I enjoyed myself, you should just sit back and do the same. Let me take care of you,\" Maia soothed.\n\nAmarthena peeped in delight as she watched Maia descend on her pussy, her mouth lapping up every drop she was leaking. Maia was surprised to see that the dancer was leaking as much as she was, since she wasn't the one who was being pleasured initially. Maia smiled inwardly, as she knew that this woman in her hands found her attractive and for now, that was enough.\n\nShe licked Amarthena's steaming hole, going to town on every inch of flesh that she could reach. Maia didn't stop, wanting to make this woman's experience just as memorable as hers. She didn't just use her tongue, but also her fingers, teasing the Rondathan woman's entrance with them. Amarthena thrust her hips upwards, trying to get Maia's fingers to slip in.\n\n\"Please!!! Put them in!!!\" Amarthena begged.\n\n\"You want it that bad?\" Maia teased, feeling playful.\n\n\"Yes! Please!!\" the alien woman pleaded.\n\nNot wanting to draw things out too long, Maia pushed two of her fingers into the woman, and they slid right in, meeting no resistance. Amarthena yelped at the intrusion, but welcomed it, wanting them as deep in as they could go. Maia slid them out, slowly, before pushing them in again, going at a steady pace. It wasn't long before she had established a rhythm and Amarthena was putty in her hands.\n\nThe Rondathan woman bucked and yowled, wanting more, and Maia was all too happy to give it to her. Mae kept licking and sucking on Amarthena's inner and outer lips, teasing her clit as she finger fucked her. The alien woman's legs jittered as Mae continued going, and she knew right then what to do.\n\nMaia picked up her pace, the tempo of her fingers increasing rapidly, as did the speed of her tongue. Amarthena yipped and squeaked, nearing her peak as Maia did this to her. She yelled out in frustration as she sat right on the edge of bliss, unable to go over until Maia pushed her. Feeling the vibrating woman beneath her, Maia sucked on her lover's clit, before she curled her fingers inside the woman, tapping her g-spot, hard.\n\nLike a dam bursting, Amarthena screamed in pleasure and adulation, arching hard as she came. Her orgasm was so intense, she literally gushed, soaking Maia's hand and face. She didn't know how long she stayed arched like that, but by the time she fell back down on the lounger, her muscles were sore. She blinked her eyes blearily and gazed lovingly up at the woman, who had made her orgasm like no one had before.\n\nMaia wasn't done with her yet though, as she shifted her body and slid her hips so that they butted up against Amarthena's. The Rondathan woman's eyes went wide as she saw what her new lover was up to! She wanted to scissor with her while she was still cumming?? This woman was certainly giving this encounter everything she had! She moaned as she felt Maia's pussy mash against hers, prolonging her pleasure.\n\nMaia started grinding her hips into Amarthena, the friction jolting them both awake. If Amarthena thought what happened a few minutes ago was something, this was taking things to a whole other level! Though her orgasm had just finished petering out, she could feel another one rising within her! Though she had her share of encounters, this one was blowing her mind and she loved it!\n\nMaia felt similar sensations roll through her as she ground her quim into Amarthena's. The bliss that was rushing through her veins would overwhelm her soon, and she wanted nothing more than to see Amarthena enjoy the same thing. She watched the woman sit up, her chest heaving as she moved in tandem with Maia. Her arms snapped to Maia's neck and Amarthena drew the woman in for another kiss.\n\nMaia moaned into the kiss, wrapping her arms around Amarthena as they continued to hump each other. The sensation kept building as they moved, rising to a crescendo before it finally crashed into them like a tidal wave. Both women broke the kiss as they howled, clutching one another in a death grip as they peaked. They sat there, holding each other as they slowly came down from their orgasmic high.\n\nAmarthena stared at Maia, her amber eyes boring straight into Maia's brown ones. What had just happened between the two women should not have, but it did. The spark that ripped through the both of them, the moment Amarthena took Maia by the hand, caught them both by surprise. Maia stared at Amarthena, a little winded and sated, but still wanting more of this woman she held in her arms.\n\n\"I'm... just...\" Maia stuttered, flustered and shocked at the intense connection they shared.\n\n\"Yeah... me too...\" Amarthena replied, smiling at her lover shyly. They just sat there, holding and cuddling each other, wanting nothing more than for that moment, to carry on forever. It ended not even a minute later, when they were interrupted by a small alarm that sounded.\n\n\"What's that?\" Maia squeaked.\n\n\"The warning alarm. We have maybe five minutes before the door unlocks and our time together is up,\" Amarthena informed her.\n\n\"You're sure you don't need any...\" Maia started, thinking about what many people must have paid for such levels of pleasure from the Rondathan woman.\n\n\"Shh,\" Amarthena replied, putting a finger to Maia's lips. \"As far as anyone else knows, you got a really hot dance. I can take the hit and honestly, even if you did offer anything, I wouldn't accept it. What we had, money cannot buy.\"\n\n\"Think we can... do this again?\" Maia asked hesitantly.\n\n\"You don't even have to ask! What did you have in mind?\" Amarthena asked as she stood up and brough out some moist towels from a hidden compartment. Steam and scent of lemons wafted from the hot towels as both women got cleaned up.\n\n\"Well... when do you get off?\" Maia wondered.\n\n\"Are you... asking me out?\" Amarthena asked, her heart fluttering wildly at the thought of a date with the human woman.\n\n\"That is the idea. Are you opposed to it?\" Maia queried, looking unsure of herself.\n\n\"Not at all!\" Amarthena smiled widely, already liking where this was going. She tapped her watch, and the holographic display came up with the time.\n\n\"I get off in about three and a half hours. Meet me on the planetary observation deck then?\"\n\n\"With... Irish coffee?\" Maia offered, and Amarthena smiled even wider.\n\n\"And chocolate chip cookies!\"\n\n\"It's a date!\" both women said at the same time and giggled furiously.\n\nThey helped each other get cleaned up, Amarthena helping Maia with her uniform. Once they both looked like they ought to, the final alarm beeped and the door unlocked, letting both women out. Maia's heart hammered in her chest as she wrapped her head around the fact that she had a date! The wait was going to kill her, but if what she felt was any indication, it would be worth it!",
        "******************************\n\nArcann Saubath paced in his quarters aboard the Stalwart as the ship was traveling through hyperspace. His gambit had failed, and he'd lost a great many men and agents that had been placed in the station. All he had to show for it was a ragtag fleet and maybe a piece of new tech, provided it was still intact.\n\nThe frigates that had the new pulsar cannons had taken some serious damage to their weapons batteries, which was not good news. He only hoped that at least one of these new weapons survived. He knew that the upper echelons of the Collective wouldn't be pleased at this, but at the moment, there was a slight advantage. If the Collective were to send a fleet to Veldhern now, they might be able to win the engagement.\n\nThat was a mighty big 'if' and no doubt his failure to secure the entirety of the third fleet would be looked down upon. Sure, they likely had the new pulsars, and if any of the cannons survived, it might not be seen as a total loss. Saubath only hoped that he'd get the chance to convince them to send a fleet. If they did, they would crush the remnants of the Veldhern defense fleets like ants beneath their boots.\n\n******************************\n\nAnd that's where chapter 30 ends! This one took a while to craft, as it's much longer than what my standard chapter is, which I hope everyone enjoyed! So much coming together and more people becoming aware of who Alex and co. are! What will become of them? Will those who now know be considered friend or foe? What happens when news of them reaches the wrong ears? For that and more, stay tuned for additional chapters to come!\n\nAnyway, thank you for taking the time to read my work and I hope that you've enjoyed it! I'm open to constructive criticism and will seriously consider any suggestions made about various story arcs. Please rate and comment on my work down below and ask me questions if you wish, as I love hearing from my fans! If you like what I write, don't be afraid to follow and share with your friends, though your views, ratings and comments are enough for me.\n\nIn the meantime, this is C.H. Darkstrider, signing off to grab a beer and some quality time with the wife! ;) You will attain whatever you most desire, as long as you believe in yourself. Cheers!"
    ],
    "authorname": "C.H. Darkstrider",
    "tags": [
        "scifi",
        "lesbian",
        "action",
        "adventure",
        "aliengirls"
    ],
    "category": "Sci-Fi & Fantasy",
    "url": "https://www.literotica.com/s/project-prometheus-ch-30"
}
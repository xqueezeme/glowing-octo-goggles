{
    "title": "Risk Your Heart",
    "pages": [
        "All rights reserved. No part of this novella may be reproduced without written permission of the author, except in the case of brief quotations with credit to M.J. Roberts. Copyright \u00a9 M.J. Roberts 2015. \n\nALL CHARACTERS ARE OVER 18 YEARS OLD.\n\nThis story won first place in Literotica's 2015 Summer Lovin' contest. If you like it, please make sure to give it the number of stars you think it deserves, to keep it on top of the top lists.\n\nThanks!\n\nDear Readers,\n\nWith every story I write, I try to add something to make it even better than the last. More romance, hotter sex, a character who battles his or her own inner demons the way we really do. Here's your chance to journey with two new people I hope you'll fall in love with.\n\nEnjoy.\n\nMJ\n\n<blockquote> RISK YOUR HEART   </blockquote>\n\nThe scarred man yanked a vicious-looking curved knife from his jacket and raised it high, aimed directly at me. I stopped breathing. A flash from oncoming headlights glinted off the knife as he prepared to strike. I wrenched open my car door and jumped out; we were moving at full speed. \n\nThe cold wind hit me first, an instant before the hard smack of the ground. I dropped and rolled. The impact on my back was so hard that my teeth clamped together, I tasted blood, but I didn't stop. I was up and running, barefoot, screaming with no sound, my pleading cries eaten up by the fierce winds. \n\nThe air itself taunted me, pressing me back as I hurled myself against it. I was running full out, my heart a thousand dogsleds trying to burst out of my chest, my sweat going from hot, to clammy, to cold in an instant, soaking me fast with my abject fear. I twisted to look behind me as I ran. I saw four more men, wearing white, Jason-like ski masks, and carrying long black wooden stakes raised high over their heads. I started to hyperventilate. I tripped.\n\nI heard a voice from far away. The tone calm but firm. \"Leah, you are perfectly safe. You are here in my office. Come back. You are perfectly safe.\"\n\nMy heart stopped beating for a second, and I jerked back with a gasp, jackknifing up to sitting so quickly I almost flew an inch off the couch. I put a hand to my chest.\n\nDr. Jeffington's kind face was drawn in concerned lines, his body leaning forward out of his chair. \"Leah, look around you. You are right here, just where you started. Feel the couch under you,\" his voice was slow and soothing, almost medicinal. \"Take some deep calming breaths.\"\n\nMy heartbeat was techno music on speed, and my eyes were like pinballs, my panicked gaze ricocheting from the paintings to the bookshelf to the desk, bouncing but not registering, until I focused on the sunlight streaming in through Dr. Jeff's window. The tree that had green leaves on it all spring looked as if some witch has sucked all its life juice from every cell and then cackled, a sad result from the late May/early June drought. I knew how it felt. Despite being freezing cold in most of my dream, I was sweating now. \n\nI took a deep, steadying breath and held it, and then let it out very slowly. I let my hand drop from my chest. Reluctantly I looked at my therapist.\n\n\"Now, tell me what you saw in the dream,\" he said.\n\nI shook my head. Tell him I was chased by faceless strange men, again? No thank you. You don't need a degree in psychology to read into that one.\n\n\"Leah, I can't help you if you don't talk to me. You were fine, and then you weren't. Why don't you start with\u2014\"\n\nI got up. \"I think that's enough for\u2014\"\n\n\"Leah, PTSD is normal in cases where\u2014\"\n\n\"\u2014today,\" I said.\n\nHe sighed. \"You are going to face your past some day, Leah. All of it.\"\n\n\"Gotta go,\" I said. I grabbed my purse, and walked out the door.\n\n*\n\nThe Hershey's bar had melted in my purse, which was a total bummer because my post-therapy chocolate bar is the one weekly splurge that I allow myself. I sat in my black Ford Focus and banged my head against the wheel. I thought I might look like a blonde Muppet, moshing her head back and forth to Animal drumming or maybe banging my head to The Ramones' \"My Brain is Hanging Upside Down\".\n\nI leaned back against the hot car seat, suddenly spent. I had one of those silver-colored windshield sunscreen thingies, but I had forgotten to stick it in the front window. I guess in the back of my mind I probably figured the car couldn't get that hot during a 50-minute therapy session. Wrong.\n\nI thought about the dream, vision, whatever, again. Yes, it was awful, but I wasn't helpless. Maybe I wasn't just running away from something, maybe I was also running toward something.\n\nThe air conditioning in my car finally hit the point were it was blowing cool air, and I leaned toward the vent and peeled my shirt away from my chest at the neckline and flapped it back and forth in the air stream, enjoying the cool flow on the top of my breasts.\n\n\"It doesn't have to necessarily mean anything deep,\" I said to myself. \"So, I have weird hypnosis sessions and freaky dreams. Steven King has freaky dreams too, and he's totally sane.\"\n\nSomehow I didn't find that too reassuring.\n\nI revved the car and carefully looked over my shoulder as I backed out of the parking space. I noticed I was checking my rearview mirror more than normal, as if I half expected zombies from The Walking Dead to acquire super speed and be able to run up to my car and grab on to the back bumper.\n\nI pictured a bunch of them, in their torn clothes and gray make-up, hanging off the back of my Focus like an undead 'Just Married' streamer party favor. That made me smile.\n\nI pictured the imaginary zombies losing grip, getting run over by the SUV behind me, and exploding into dust. That took the edge off. Imagination is good. I could probably beat these dreams just by thinking silly endings to them. Like Doc Jeff said, the answers to our problems had to come from within.\n\nWhatever.\n\nI canceled my therapy appointment for the next week, and the next. What can I say? I'm a coward. The temperature climbed to record highs, making me worried my air conditioner would break. As I spent most of my time at home in front of the computer, directly under the vent, the thought of an A/C failure was almost enough to give me a new set of nightmares.\n\nI had a lot to be grateful for. Hershey bars, a great imagination, central air conditioning. I focused on that.\n\nIronically, as the temperatures outside got hotter, my dreamscapes got colder. I was often naked, or almost naked. When I ran in my nightmares I was so cold, my nipples stood out to sharp points that could cut glass as I tried to cover them, wrapping my arms around myself. My feet would slip on the sheer sheets of wet ice, my bare hands plunging into cold mixtures of ice and slush. \n\nMy dreams were getting worse. I couldn't remember the last time I slept through the night. The night I woke up screaming, I had to consider going back to counseling.\n\nA summer in therapy. I'd managed to escape it for part of June, and I had had high hopes for skipping most of July. It wasn't how I wanted to spend my August either.\n\nI had planned on ignoring my problems and catching up on all the back episodes of Game of Thrones.\n\nDamn this need for peaceful sleep thing. \n\nI called Dr. Jeff and made an appointment. I didn't exactly walk in with a jaunty step. I didn't hang my head, but it was close. It's a good thing I didn't have a tail, or I might have had it tucked between my legs, because, yeah, I wanted to be there. Right.\n\n\"No hypnosis this time,\" I said, after I said hello.\n\n\"Fine,\" Dr. Jeff said.\n\nHe had me fill out this form. It was more of a chart really. \n\n\"These are the main areas of a person's life,\" Dr. Jeff said.\n\nYeah. I could see that. You rated how well you were doing in which category and why. The categories were things like finance, physical, spouse relationship, family, friends' relationships, social, career, etc. Blah, blah. \n\nI filled it out and handed it to him. I don't know exactly why he made me do it. He knew all this stuff about me. When I finished the chart he took out a marker and colored in the parts that needed work in red. It was a pie with three-quarters missing, a huge red chunk of life torn out.\n\n\"I wanted you to see this. You can't live like this and be okay. No one can live like this.\"\n\nSocial: none. Past: gah. Family: HAH! Spiritual: pfft. Mental: basket case with frequent Freddy Kruger. Career: good. Finance: eh. Health: good. Sex: imaginary. Romance: nix, nada, zip, hopeful. Happiness...intermittent. \n\nDr. Jeff had me color the rest of the chart in. Blue for the areas that were somewhat decent, purple for the areas I was totally satisfied with, and an orange over the red for the areas where I had a little more willingness to work. \n\nThe chart looked like one big sunburst. A volcanic stop sign. It was too overwhelming to fix. \n\n\"It's June 21st,\" Dr. Jeff said. \"Officially the first day of summer. Traditionally spring is a time for planting and renewal, and summer is a time for really rejoicing and wholeheartedly embracing brand new activities. So we're going to start in and do new things.\"\n\nI had been abused. Run away. Lived on the streets in some horrible times. Then my Dom had found me, and it had all changed. Eleven amazing years. Now he was dead, and I was looking at blood-red pie. My Dom had helped me with everything, how was I possibly going to....\n\n\"All right Leah, we're going to pick one category and work on that. Where do you want to start?\"\n\nHow about canceling therapy? \n\n\"Okay, here's your assignment. You are going to volunteer for something,\" Doc Jeff said.\n\n\"What?\"\n\n\"Volunteer. Something that gets you involved with people and does good for others. By next week I want you involved in something new. You've got no religious or spiritual support either, that will be next. By next session I want to hear that you've joined a volunteer project and what it is.\"\n\nI stood up. I got the same feeling I often had, that I never wanted to come back, but this time it was fierce. It rushed through me. \"Thanks, Doc,\" I said.\n\n*\n\nTruthfully, I forgot about it. I work from home as a graphic artist, and a big project came up. I became engulfed in that. My dreams were a little less violent, my sleep a little less fitful, my ever-pressing need for sex a little less pressing. Fuck Dr. Jeff. I just needed time. \n\nIt made sense that June was rough. June of last year was when my Dom died. June was almost over. I was a mess, but I kept feeling like something magical was right around the corner. It was like when you see something move out of the corner of your eye, but when you turn to face it, it has already flashed out of sight.\n\nJuly pressed in with three days of over 100-degree weather, and a heat index that cut like a sharp knife, peeling the skin off the landscape. The morning of July 4th the heat wave broke, as if Mother Nature wanted everyone to have a good time.\n\nI opened my window to enjoy the 80-degree weather and the balmy breeze as I worked at my computer. Firecrackers boomed in the distance, even though they sounded vaguely like gunshots, they didn't bother me.\n\nMy apartment complex was having a 4th of July party, and by mid-afternoon I could hear kids playing, yelling, and splashing in the pool, and adults talking and laughing. I smelled barbecue sauce and pork and beans, and something that smelled sticky sweet, maybe cut watermelon; the scents carried up through my window by the gentle breeze.\n\nI thought about going down, but it was my first Independence Day without Nick, and I really didn't feel like celebrating. Sitting in front of my computer I realized that I didn't know anyone in my apartment building. The one couple we had been friends with, a Dom/sub pair with the same age difference and general ways as us, moved away right after Nick died. Even though I had been alone for a year, I had blocked out the fact that I had been so lonely. Suddenly the loneliness felt like a yawing empty pit in my stomach that reminded me of the Grand Canyon.\n\nI knew more appointments with Dr. Jeff would help, but somehow I thought it would take more than that. I got up and looked out my window. Dr. Jeff had wanted me to volunteer. I bit my lip. I had to live a little, and I knew I should love again, or at least love as much as I ever could again. I'd built a wall around my heart that never softened. It wouldn't be easy. \n\nSunday afternoon when I was driving I remembered the dream, the one with the masked men and the knife and the stakes. My mouth turned sour, as if rancid milk lined my tongue, then dehydrated quickly and sucked my tongue up so it stuck to the roof of my mouth. The back of my neck and my palms broke out in sweat, and the air conditioner quickly turned them cold and clammy. It was hard to breathe. \n\nI drove on, not really paying attention to the turns. \n\nI felt my throat constricting, closing up like a maze with the walls squeezing inwards. Sweat beads popped out of my pores, making a cold beaded curtain on my forehead and palms. There was a sudden fisting contraction of my stomach, and the feeling that an elephant was sitting on my heart. Oh, no biggie. I recognized the symptoms as a prelude to a full-on panic attack. \n\nI paid attention to the green in the leaves that lined the road as they flew by the side of my vision and looked for a place to stop. Finally I pulled over into the lot of a big church with a broken steeple. I turned the car off and placed my forehead on the wheel. Had driving set off the dream because that hypnosis nightmare at Dr. Jeff's weeks ago had a car in it? Would I have trouble with driving now?\n\nThis was ridiculous. I had to do something. What had Dr. Jeff said? Volunteer. I looked up. I was at a church. Maybe they had... I don't know...bake sales or something. Probably nobody would be there on a Sunday late afternoon. I noted the name of the church and promised myself I would call them later.\n\nI turned the key in the ignition and my car made a chk-cha-hick sound.\n\nWhat?\n\nI tried it again. More sputtering. Fuck.\n\nI dug my cell phone out of my purse. No reception. ARRRRGGGHHHHHH. Figures.\n\nI got out and walked to the church doors fully expecting them to be locked. Nope. Open.\n\nIt was nicer inside than I expected. There was a hush, a loaded poignant silence, the kind you only get in sacred places. There was a ton of light. I walked around calling out and trying to find someone. I finally stopped in front of a bulletin board. I looked at the notices, everything from 'Jesus loves you' to 'need a babysitter'. I spied the church calendar out of the corner of my eye and was just going to check for a bake sale when a huge shaft of light landed on a notice. \"Labor Day volunteer coordinators needed. Have fun, meet new people, and make a difference. Make it a 'labor of love'.\"\n\nIt was as if the flyer had a neon sign on it that said 'Yes, I mean you'. I was used to having my dominant telling me what to do. Now I was looking for direction from signs.\n\nI stared at it. I considered just taking the notice off the board but decided not to. Forget it. Maybe. I took a few steps back, staring at the notice and digging into my purse for a pen at the same time. I was walking backwards while I looked down into my bag still not finding a pen....\n\nAnd knocked someone over. Someone large. And hard. I landed on my back on top of him. Papers flew everywhere and both of us wiggled and floundered, unable to find purchase. The harder I tried to push up the more I just ground myself into him.\n\n\"Wait,\" he said. Then he rolled us, and he was on top of me.\n\nHoly shit. Our eyes met, and I swear there was an electricity, a snap. I was frozen, mouth agape. He reminded me of my Dom. I stared into those brown eyes, only a few inches from mine, and was lost.\n\n\"I'm so sorry, I'm....\" He got a knee on the floor but slipped on a paper, and he fell on top of me, hard, crushing my breasts. \"Oh shit,\" he mumbled.\n\nThe paper wafted down. I tore my eyes away from him to look at it. I could see the letters --Day - -unteer.\n\n\"Freakin' glossy flyers,\" the guy said trying to get off me, and slipping. He fell on top of me again. \n\n\"God damn it!\"\n\nI laughed. \"You're in church.\"\n\nHe rolled off me, and kept rolling until he was away from the paper pile. Then he sprung up. He walked back, watching his step, and offered me his hand. I took his hand, and very carefully stood up. Then I was face to face with him again. \n\nIt wasn't so much that he looked like my Dom. They were both brunettes, built, about 6'3, with brown eyes. So I understood why this guy reminded me of him. This guy was closer to my age. He had a face that was innocent, open and smiling. He reminded me of fields sparkling in the sun.\n\n\"I usually offer to buy a woman dinner before I try to get on top of her,\" he said.\n\nI smiled back at him. \"I usually request dessert first,\" I said.\n\nHe stuck out his hand. \"I'm Drew.\"\n\n\"Leah,\" I said.\n\n\"Pleased to meet you,\" he said, and crouched down and began to sort the flyers into piles. There were at least four different colored flyers. I helped him sort.\n\n\"What do you do? Work at Kinkos?\" I asked.\n\n\"Huh? No, no. I'm an assistant Deacon here. I'm in charge of volunteers.\"\n\nMy head swam. I said the words. Separately. \"You're. In charge.\" I paused. \"Of volunteers.\"\n\n\"Uh-huh.\"\n\nREALLLLLLY. Thank you Doctor Jeff. \n\n\"That's quite a coincidence. I came here looking for an opportunity to volunteer.\"\n\n\"Well, you came to the right guy. We've got the multi-denominational pre-holiday dinner, end-of-summer cleanup, adult literacy, kids' summer reading, home building, poverty and feeding volunteers, the Labor Day fair. Then there's publicity, recruiting\u2014\"\n\nI broke into tears.\n\n\"Hey, hey. Wait. What?\"\n\nHe put the piles of papers on a table and dragged over two metal folding chairs. \"Sit,\" he said firmly and pointed. That I could do. After all, I was used to following orders. I sniffled.\n\nDrew took both my hands in his. \"Now. Tell me what's wrong.\"\n\nI shook my head. What was I going to say? Hey, I'm a sub. I'm not used to being overwhelmed with choices. When there's a big brunet hunk around I'm used to him making the decisions and telling me what to do? I don't think so.\n\nDrew lowered his voice. \"You can tell me. Hey, I'm the assistant Deacon here. That's the same as the associate Deacon, the vice president Deacon, the honorary 'I comfort crying women all the time' Deacon. You can tell me. I do this all the time.\" \n\nI had been looking down and I looked up at him a little bit through my lashes. \"It's... silly. I... lost someone. Sometimes little things... are just too much.\" There, that didn't sound awful. \n\nDrew took a deep breath. He held my hand briefly, for two or three seconds, no more, and then rubbed his thumb back and forth over the sensitive skin in the 'V' of my hand, where my thumb met my forefinger. It felt incredibly nice, calming and exciting at the same time. He stopped way too soon.\n\n\"Tell me what's bothering you,\" he said softly.\n\n\"I'm not even sure I can talk about it.\" I squeezed his fingers. \"I'm just part wind-up toy that keeps going and going on automatic and part....\"  blinding need. \n\n\"Part what?\" Drew asked.\n\nI shook my head again.\n\n\"Okay,\" Drew said. He pulled his hands away from mine. \"I'll tell you a story from my life instead. How about that?\"\n\nI nodded. \"That would be great.\"\n\n\"I married my high school sweetheart. I was a big dweeb, a jerk, but I got the girl. Everyone thought we were too young to get married, but I wanted to nail it down, make sure that amazing cheerleader would be waking up next to me for the rest of my life. So the day we finished high school we eloped, and despite the naysayers we did really well.\"\n\nFuck. Married. I should have known. I looked down at his left hand. Gold band on his ring finger. I should have noticed it before. ",
        "I looked in his eyes. They were a really nice warm shade of brown with gold flecks. Of course the cheerleader married him. \"So one day, three years ago, we were having sex...\" he trailed off for a second and looked at me, like he was making sure it was okay to say this. I nodded.\n\nHe smiled, remembering. \"We were having sex, and I was on top of her, having a grand old time, and she laughed. Just out of nowhere. It was probably just a giggle of joy really. But I said, 'You think that's funny?' and she nodded, and I said, 'I'll show you funny', and I started pounding harder.\" \n\nHe paused staring at a blank spot on the church wall. \"Well that just made her laugh harder, so I started thrusting harder, and she started laughing more, and you know how it is, it was a challenge now, pretty soon I was going at it with everything I had and she said, 'You're going to break something.' Pretty soon we were both laughing and sweating and coming and it was absolutely the best sex you could possibly imagine, the best I've ever had, I swear I saw stars I came so hard.\"\n\nHe paused. I wondered if that was the end of the story.\n\n\"I rolled off her, and she put her hand to her chest and said, 'Ow.' Then I said, 'What?' She said, 'I have terrible heartburn or something.' I thought, serves you right for laughing at me during sex, but I didn't get a chance to say it because she said. 'It really hurts, Drew, will you go get me some Tums? I hopped out of bed to get her some Tums, and when I returned with the bottle she was dead.\"\n\nI blinked.\n\n\"It wasn't heartburn. It was 'or something'. She had a heart attack.\"\n\n\"Oh my God. Drew.\" \n\n\"I never told anybody that before. I mean, the, you know\"\u2014he made a pumping gesture with his hands\u2014\"you know, the sex part. Everyone knows my wife died of a heart attack.\"\n\n\"Holy.\" I covered my mouth, horrified. \"How old was she?\"\n\n\"Twenty-three,\" Drew said. \"You see, no one thinks that can happen to someone that young, right? That's part of the reason I told you. You look about that age. Young. Too young to have lost someone you love. You said you lost someone. It's bad enough that you want to break things, throw dishes, drive off a cliff, cry in front of a stranger? Well. I get it. But don't drive off a cliff, and don't cry in front of a stranger anymore. Cry in front of a friend.\"\n\nI gave him a half smile, one side of my mouth sort of quirking up, as my eyes filled again, but the fat tears didn't roll over. \n\n\"Your turn,\" he said.\n\nI shook my head. \n\n\"Come on, it can't be worse than my story. I fucked my wife to death.\"\n\n\"You did not!\"\n\n\"I know. I just wanted to see if I could goad you into sharing. Maybe now's not the time. Maybe it's time for action. Let's figure out which project you're going to volunteer on.\"\n\n\"Can you decide for me?\" I asked in a small voice.\n\n\"Sure, Leah,\" he said. The way he said my name, drawing it out slightly, with a deep tender sound made me feel warm inside. \"Let's start you off with the Labor Day festival. I know we're smack in the middle of July, and September seems far away, but in planning terms, it's practically right around the corner. We've got to hop to it. The start of September, change of seasons, maybe it will give you something to look forward to; I have a feeling it's been one hard summer for you.\"\n\n\"You can say that again.\"\n\n\"Maybe a little hard labor will do you good,\" Drew said.\n\nA little hard something anyway. Maybe not so little. \n\n*\n\nDrew gave me my assignments. I was going to work on publicity for the Labor Day festival, demonstration, show, and concert in the park. He walked me to my car. Only when we got there I remembered that the car hadn't started.\n\n\"Fuck,\" I said.\n\n\"Sssshh,\" Drew said. \"You're in church.\"\n\n\"It's the church parking lot. That doesn't count.\" I kicked my front tire.\n\n\"What's wrong?\"\n\n\"I think my battery's dead.\"\n\n\"No problem. I've got cables.\" \n\nI waited while Drew drove his car up to mine and did that thing with the jumper cables that all guys know how to do. After a minute he said, \"Okay, now try.\"\n\nI did. Same sputtering sound. \n\nDrew leaned into my open driver's side window. \"That's not the battery.\"\n\n\"What is it?\"\n\nHe shrugged. \"Alternator probably.\"\n\nYikes.\n\nI took my cell phone out to call a tow truck. No service. \"Fuck.\"\n\n\"Bad girl,\" Drew said.\n\nI snapped my head around to him. He had been joking; he hadn't meant to make me wet.\n\nDrew took out his cell. He had service. He put the phone up to his face and made his voice mimic the exact tone of the geeky guy in those old commercials. \"Can you hear me now?\" Drew glanced over at me, and I could see he was fighting a smile.\n\n\"Very funny,\" I said. \n\nI got out and stood next to him. I went to grab the phone from him, but he held it up and away and I had to reach for it, bringing my body against his.\n\n\"Tell me who you lost,\" he said softly.\n\n\"My...\"\u2014Dominant\u2014\"Boyfriend. We never officially got married, but we lived together for eleven years. So by common law, that's my husband. He died a year ago. Car accident.\"\n\n\"Eleven years?\" Drew said. \"How old are you?\"\n\n\"Twenty-six,\" I said. \n\nI could see him do the math in his head and raise his eyebrows. \n\n\"We weren't...\" I touched my forefinger and thumb together and made a fucking motion with my fingers. \"You know. Together  that way  at first.\"\n\nHe put his hands up. \"No judgment.\" \n\nHe handed me his phone. I called; they said it would be an hour and a half wait. Fuck. Sunday late evening. Crap.\n\n\"Listen, Leah,\" Drew said. \"The first Labor Day planning committee meeting is here, tomorrow. You work from home right? Why don't I give you a ride home? I can pick you up tomorrow, and we can deal with it then. We can call it in, have the meeting, and when we're done the tow will be here.\"\n\nI nodded. \n\nWe laughed more on the ride back to my apartment than I had in the past year. Drew and I had an ease of conversation I've never had, not even with my Dom. \n\nDrew was an EMT. I got instinctively that he tried to make up for not being able to save his wife by saving others. I also understood that he liked the excitement. I liked that he liked the excitement. I wanted excitement, too.\n\nHe dropped me off, promised to pick me up at six p.m. tomorrow, and motored out of sight. \n\nI stood in the parking lot for a minute, staring down the road where his car had been, like a puppy straining at its leash, leaning forward, panting for its owner to come back. \n\nIt took me a while to get my key into the lock and open the door to my apartment. I kept replaying him saying, 'I have a feeling it's been one hard summer for you.'. I felt like we had some sort of mystical connection, and it gave me a warm, fuzzy feeling that spaced me out enough that it took me three tries to unlock my door.\n\nFor some strange reason (cough) my evening was relaxed. I only woke up once during the night, and I felt refreshed in the morning. It was like meeting Drew helped heal something.\n\nThe day passed, and I found my mind drifting to Drew more often than not. I was anticipating six o'clock long before lunchtime. It had been months since I had anticipated anything.\n\nAs soon as I opened my door that delicious zing of excitement ran from my head to my toes. I realized I never felt that before.\n\nI gave him my biggest smile and a sharp salute.\n\n\"Ready for volunteer duty,\" I said.\n\n\"Great,\" he said, stepping back so I'd have room to walk past him, \"Let's get to it.\"\n\nThe air had cooled down somewhat. A bunch of teenagers ran by us, wearing tiny bikinis, carrying lawn chairs, and letting their red, white, and blue beach towels flap out behind them like flags.\n\n\"You'll like everyone else on the team,\" Drew said when we got in his car. \"Like I said, we have a lot to do and only a few more weeks to get ready.\"\n\nI was embarrassed to admit it, but I didn't even know exactly when Labor Day was.\n\n\"Ahhhh, I've pretty much been in my own world lately.\"\n\n\"Understandable,\" he said. \"This will bring you out of it somewhat. Now I also have you arranging and finalizing performers and lecturers for the festival. Kathy was doing it, but she went into early labor, no pun intended, so now I'm counting on you.\"\n\nI nodded. \"Yes, Sir,\" I said comically and gave him another snappy salute. That wasn't the way I wanted to be saying yes sir to him, but it would have to do for now.\n\nHe gave a soft chuckle.\n\n\"I've got all the stuff you need in a folder here.\" He glanced down to the console between us, and I saw an orange folder. \"You'll need to fill a few holes in the schedule.\"\n\nThe meeting went by quickly. I took care of my car. Something about just meeting Drew had made mundane tasks seem okay.\n\nI worked on the Labor Day Festival plans every day. I frequently needed to call Drew to ask about details. Pretty soon I was looking forward to the calls, making up reasons for longer and longer conversations, soaking up details about his life like an avid stamp collector gathers pretty postage squares. \n\nEach time I called, that miraculous connection I felt between us grew stronger. It was like tasting a fabulous dish, that as you ate each bite only got better and better.\n\nI looked forward to the twice-a-week Labor Day volunteer meetings more than I could remember looking forward to anything in a long time, maybe ever. \n\nDrew and I fell into a pattern of standing by my car after each meeting and talking for a while. The topics stayed light: movies, music, favorite TV shows. Drew liked Big Bang Theory. He was an avid Star Trek and Star Wars fan and loved animated films. He declared, with unabashed verve, that Toy Story was the best.\n\nWe both agreed that it was a terrible summer for the pop charts. Drew made me laugh by doing rousing parodies and perfect imitations of Taylor Swift, Jason Derulo, Bruno Mars, Nikki Minaj (complete with butt wiggle), and other summer releases we played on our phones. The same five or six artists kept churning out hits that sounded suspiciously like what they released last summer and the summer before.\n\nI was falling more and more for Drew. I thought he liked me. The problem was he wasn't making any moves. I wasn't the make-the-first-move type. I had been a submissive for so long I was used to it. Maybe I was naturally submissive. \n\nI didn't know how to bridge the gap between just friends and what I really wanted. I was afraid Labor Day would come and go, my volunteer tour of duty would be over, and I would never see him again. I wanted to do something. But what?\n\nI decided that maybe the best way to broach the subject was just to come out and say it. I practiced what I was going to say. 'Drew, I'd like you to be my dominant. Drew, I want you to be my dominant; I'd love you to be my dominant.' Not exactly flowery, and it had a lot of potential for rejection, but it was straight to the point.\n\nOn the phone wouldn't be good, so I decided the best time would be after one of the festival planning meetings, during the usual conversation time Drew and I had after the meeting, in the parking lot. \n\nIt was the first Tuesday in August, the first meeting in August, and I decided that was as good a day as any. Gulp.\n\nI sweated enough during the meeting that I imagined putting buckets underneath me to catch the overflow. Maybe we could take my sweat to a desalinization plant and solve the late August summer drought. I felt like all my art pencils were lodged in my throat.\n\nThe meeting dragged on, and everyone's voices began to sound far away, as if they were underwater. I wanted to wipe my armpits. Despite chill from the loud air conditioner, I felt hot. My skin was clammy, my palms damp, my mouth dry. I guess I should be used to that. It only got worse when Drew and I went to stand by my car for our after-meeting talk.\n\n\"Leah, you okay?\" Drew asked me.\n\n\"Ah, yes, it's just I....\"\n\n\"What?\"\n\nI looked down at the pavement, overcome by nerves. My heart was racing. \"I want you....\" I said, but then I stalled out.\n\n\"Oh, God, Leah,\" he said. \"I want you, too.\" He reached out and caressed my cheek, slid his hand to the back of neck, pulled me close, and kissed me.\n\nI immediately got lost in the kiss. His tongue danced with mine so sweetly, and his left hand pressed firmly into my lower back. My body heated, and my nipples tightened. I sighed into his mouth.\n\n\"I wanted to do that for a long time,\" he said when he broke away for air.\n\nI was all relaxed from the kiss. It was like being drugged in the best way. I remembered my Dom once saying you should start as you plan to finish. \"I was going to say, I want you to be my Dom,\" I said.\n\nHe took a step back. \"Like....\"\n\nI waited.\n\n\"Dominance and submissive?\" He sounded very unsure, and maybe a little repulsed. BDSM?\" \n\nI nodded.\n\n\"Leah, I don't know anything about that.\"\n\nI felt like my heart collapsed.\n\nThere was a pause\u2014barely a second\u2014where I thought of all those nightmares I'd been having, and waited to be rejected.\n\n\"But if it's something you want, I'm willing to learn, and if it's something you need, I'm willing to try,\" Drew said.\n\nI smiled at him. Looked like it was going to be a good day after all.\n\n*\n\nThe next night Drew took me out to a fancy restaurant, and followed it with a silly movie called Pixels, where aliens attack using a big Pixelated Pac Man. I thought I'd hate it, but I laughed my ass off. Even though it was our first date, I thought it might be pretty indicative of who Drew really was, deeply romantic and joyfully silly. \n\nDrew's schedule rotated. The next week he had the evenings off, and he planned a date for us every night. On every date he held my hand, or gently ran his fingers up the tender skin on the inside of my forearm. \n\nThe next week he switched to night shifts, leaving days and evening free for dates. He planned a museum trip, lunch at a burger joint, and hikes that included picnics by the lake, and two sunset walks on the beach. One day when he came to pick me up he brought me a big sunflower. Yeah, it sounded like a hokey personal ad, but I loved it. Coming from being a teenager on the streets, to my Dom's strict ways, all this wooing was new to me. I was captivated by each little gesture. \n\nDrew was holding my hand as we walked a bike path in the park when he said, \"I haven't forgotten what we talked about.\"\n\nI didn't need to ask what he was referring to, even though we had had many general conversations since, and none about... you know.\n\n\"I've been doing research. I want to make sure I get everything right for you. Start out well, continue well. I want it to be everything you want it to be. Something that will last.\"\n\nI got goose bumps. A dominant and a nice guy? I hadn't thought such things existed.\n\n\"I guess good things come to people who volunteer,\" I said.\n\nHe made a 'that's sickening' gagging noise in his throat. \"Good things come to good little submissives who follow directions.\"\n\nI smiled, and then bit my bottom lip. I saw a lot of hope for this.\n\nAfter that conversation there wasn't any other mention of things to come.\n\nI spent the next days in a delicious juxtaposition of enjoying the quiet romance and fighting the building tension and anticipation of what he might do. \n\nIn my mind I thought that Labor Day might be a culmination of the waiting, a jumping board starting point, although I didn't know why. \n\nWhen the morning of Labor Day, September 7th, came, I was nervous, excited, and anxious. My skin was clammy, and my fingers were cold. I could wrap them around my water glass and keep it cool all year and back to next summer again. I reminded myself that a submissive's job was to trust.\n\nBut as I stood in front of my closet I found myself having a slight anxiety attack over what to wear. I was used to my Dom making so many of my decisions for me that when it came to a big day, even for a festival, I was staring at too many choices, hoping to get the exact outfit to best please Drew. I decided to call him.\n\n\"Hi, Drew,\" I said. I heard my voice falter. I wondered if calling him was a good idea. \"I'm not sure what to wear? I was calling to see if you had a preference? A suggestion?\"\n\nI could hear the change in his breathing; it was like there was a snap in the air that caused a change in the temperature. When he spoke his voice was firm to the point of demanding. \"You're going to wear a red push-up bra, a red thong, your best jeans, and the loosest shirt you have.\" His voice got even harsher, lower in tone, quieter. \"Say, 'Yes, Sir.'\"\n\n\"Yes, Sir,\" I said.\n\n\"Good.\" He hung up.\n\nYikes.\n\nI dressed with care, taking extra time on my hair and make-up. I had a red bra and panty set I had never worn that fit the bill. I wasn't sure about the loosest shirt. The biggest shirt I had was actually a white shirt with a cartoon cat on it that I wore as a nightshirt. I decided to wear it with a little scrunchi hair band tied at the hip in one corner, 80's style.\n\nI met Drew at the volunteer's tent. He raked his eyes up and down my body, from head to toe and back again, his gaze predatory. I thought he had x-ray vision from how he smiled. \"Nice,\" he whispered in my ear when he came in close. The way he said that one word, with an edge to it, like he was saying, 'Oh fuck yeah', made me catch my breath.\n\nI was surprised how much that one compliment made me glow inside. I had missed this so much.\n\nThe festival started on time. The turnout was huge, and everyone was enjoying themselves. Pretty soon the park was packed, and it was time for all the entertainers and educators I booked, one after another. Drew found a place for us in the crowd. He pulled me in front of him, and wrapped his arms around my waist. He moved a little bit, until he was leaning against a big oak tree. \n\nI got caught up in the excitement of the crowd, the great feeling of Drew's chest, warm against my back, and how great he smelled, some subtle cologne I couldn't identify and his own unique scent that made me feel so bonded to him. We enjoyed the casual feel and the joy of the day, and listened to band after band, and a lecturer. The final performer took the stage, a magician who was both informative and attention grabbing with his messages. \n\nDrew slipped the elastic hairband off the lower corner of my shirt. His hand slid up to my stomach.\n\n\"So,\" he whispered in my ear, his voice deep, \"you'd like it if I tell you what to do, and how to do it.\"\n\nI blinked, the sudden change of pace shocking my brain into a new mode I hadn't expected. Without me giving it any conscious direction to, my head seemed to move on its own, and I nodded, ever so slightly.\n\nHe caressed a circle on my belly. \"And you want me to tie you down when I make love to you, fuck you.\"\n\nI wasn't sure if that was a question, or if that needed a response, but I nodded again, just the tiniest movement. \n\nDrew opened the top snap of my jeans.\n\n\"And excite you in public places.\"\n\nOh my God.\n\n\"Nod for me, Leah.\"\n\nI nodded.\n\n\"Good girl,\" he growled softly. At those words I got wet. His hand slid lower. I was suddenly aware of all the people crushed around us, the sunshine, the sound of the microphone's occasional feedback as the magician talked about the \"magic\" of the laborers getting together in 1882 for social change.\n\nDrew's hand dipped lower.\n\n\"Blindfold you.\"\n\nOh fuck.\n\n\"Put a gag in your mouth when I fuck you so hard I make you scream,\" Drew whispered in my ear. His fingers gently pushed my panties out of the way and caressed my folds. My temperature spiked.\n\n\"Use a spreader bar when I take you from behind.\" Drew found my clitoris and gave it a quick flick. I jerked. Drew wrapped his other arm around me and tightened his hold. \"Don't moooovvve, Leah.\" Pause. \"Or I'm going to\u2014\" Pause. \"Punish you.\"\n\nMy eyes fluttered closed to half-mast.",
        "\"I'm going to find out what you like, and make you do what I like.\"\n\nSomething happened in my brain. Synapses snapping and popping like fireworks maybe. Then everything around me faded away.\n\n\"Take care of you, and take you to subspace.\"\n\nHoly crap, he knew what subspace was.\n\nHe found my clit again and started making slow circles around it.\n\n\"Share you. With whoever I want, male or female, if I feel like it.\"\n\nMy eyes closed all the way and my ears burned red. I didn't know how I felt about that.\n\n\"Take a rose petal, or a feather, or an ice cube, or hot wax\u2014\"\n\nI couldn't hear the rest for the thundering in my ears.\n\n\"Have you come when I tell you to\u2014here\u2014in the park.\"\n\nThen he worked me, and it was all I could do to bite my bottom lip and not make noise, not move, not let the excitement of being found out throw me over the edge.\n\nI was desperate with the need to come, my honey soaking his hand, my mind in a zone where only pleasure existed. I didn't think the pleasure could ratchet any higher, but he moved his fingers just a little bit over to the right, and I teetered on the precipice. I had to fight not to break apart as his hands seared me into an amazing hedonism that had every nerve singing. Finally being completely still was impossible, and I started to shake.\n\n\"You may come now, Leah,\" he whispered in my ear.\n\nMore pleasure than I could possibly imagine blazed through me, like an untamed star expanding everywhere with satiety and safety and joy. \n\nLighting shot through my body, and I soared up into the sunny sky. \n\nThen there was a moment where I hovered above my body. I was weightless, a spirit looking down on all the people crammed together in the park. Then there was a sharp buzz and a pop, and as if I was a kite yanked down hard by it's string, I plummeted down and slammed back into my body.\n\nI felt alive! Every cell tingled. Drew's arms were still around me. His lips grazed my ear. The magician's show ended and he said, \"Let's give a hand to all of the performers today and all of the staff and volunteers who make this event possible.\" The park was suddenly filled with noise, all those hands smacking together as they clapped and the joyous shouts as they cheered. \n\nAll the colors seemed more vibrant. Many of the kids were wearing bright yellow T-shirts with the Despicable Me Minions' thick goggles (both one-eyed and glasses style) leering out from their tiny chests. Women were wearing sparkling white slacks and jeans, getting their last white before Labor Day fashion sense in. The smell of burning hot dogs and juicy hamburgers wafted over me.\n\nI slumped back against Drew.\n\n\"Did that do you, Tonto?\" Drew asked.\n\nI nodded.\n\n\"My work here is done,\" he said.\n\nHe said it like a movie quote. I had a vague thought that maybe he had called me Tonto because he was quoting The Lone Ranger, but that was far before my time, and my head was swimming with endorphins, like a minnow in a barrel of beer, so I just let a stupid smile spread on my face as people exited around us.\n\nI tilted my face up to the sun. I felt boneless. Thank God Drew still held me, or I might have sunk to the ground.\n\n\"Is that what you needed?\" Drew whispered in my ear a few minutes later when most of the park had cleared out. \n\nI was too toasted to answer. \n\n\"Are you all right?\" Drew asked, sounding very concerned when I didn't answer, not realizing that it was because I was still too satiated to speak.\n\nI nodded, and I nodded again.\n\n\"I hate to do this to you, Princess Leia, but I'm part of the clean up crew.\"\n\nI groaned.\n\n\"I'll walk you to your car,\" he said.\n\n\"Can you carry me?\" I squeaked.\n\nHe laughed. \n\n\"Maybe I can just fly there,\" I said. \"I feel like I'm still flying.\"\n\n\"That wasn't flying, that was falling with style.\"\n\nI had no idea what he meant, maybe because my brain wasn't firing on all cylinders. I twisted around to look at him.\n\n\"You know,\" he said. \"From Toy Story.\"\n\n\"I never saw Toy Story,\" I said.\n\n\"You never saw Toy Story!\"\n\nI shook my head.\n\n\"You're deprived,\" Drew said. \"Stick with me kid. I'll right the ills in your sorely lacking experience. I can't believe you've made it to twenty-six without seeing Toy Story.\"\n\n\"Almost twenty-seven. I made it to this ripe old age without seeing Toy Story, or getting diddled in a public place, before today that is.\"\n\n\"You saw Toy Story today?\"\n\n\"Very funny.\"\n\n\"Come on, sweetheart. I'll walk you to your car. Before I get tempted to give you a pre-birthday present and diddle you in a public place twice.\"\n\nI put a hand over the warm spot in my chest. Drew. He was funny, and kind, and sexy, and now I knew he could be dominating and hot as hell. He could give me everything I needed.\n\nHappy Labor Day to me.\n\n*\n\nDrew might not have known how to be a Dominant before the Labor Day EXPERIENCE but he sure got it down now.\n\nI was just finishing my work for the day the next afternoon when my phone rang. It was him.\n\n\"Come down to my office. NOW.\" He hung up.\n\nWait, what? That doesn't make sense. He didn't even have an office.\n\nI heard a siren wail briefly, so close it almost sounded as if the sound came from right below me. \n\nI jumped up, ran to the window, and looked out. There was an ambulance parked outside.\n\nOh shit. I ran to the bedroom thinking I'd change out of my sweats and into something nice. \n\nI thought about the forcefulness with which Drew said 'Now'. \n\nOh God. I turned around, so I ended up just running around in a circle in my living room. \n\n\"Okay, okay,\" I said out loud. \"Ah... keys.\"\n\nI grabbed my keys and ran downstairs.\n\nI ran to the ambulance, and up to the passenger side. I had to stand on tiptoe to look through the window. Empty. \n\nHuh. Could I have the wrong ambulance? There was only one. That was a relief. It would be really embarrassing if an ambulance came for a medical emergency, and I had to explain I was standing next to it panting for no reason. \n\nI looked around. I went to the back of the ambulance. I knocked on the double doors. One of them opened.\n\n\"In.\" Drew said it firmly. His expression was all hard lines, serious business, and raw power. \n\nI hopped up into the ambulance. Fast.\n\nDrew closed the door behind me, shutting us in. He had put his hand firmly on the inside of my upper arm to help me get in the ambulance, and once I was up and in he didn't let go. He used my momentum to pull me forward. I crashed against his side. Drew pushed me down on the cot. \n\nFaster than my brain could follow he had me on my back. He straddled me and yanked my hands above my head, holding both wrists together firmly in one hand while he did something with the other. I twisted around to look up at my wrists. He was binding them together, quickly, with thick gauze, and wrapping the gauze around a metal bar, some sort of stability handle I guess. \n\n\"Wha\u00ac\u2014?\" Is all I managed to get out before he shot me stern look that said, 'Shut up and get ready.' It was happening too fast for me to process.\n\nDrew pulled the gauze tighter, and my wrists jerked closer to the bar. The back of my fingers just barely touched it; it was cold. \n\nI heard a rip, and then another one. The gauze? I had been watching my wrists, but now I stared at Drew. His face was intense. Is this what he looks like when he is working on someone who is hurt, giving them emergency care that might mean the difference between life and death?\n\nDrew wrapped the gauze around my head, over my eyes, creating a blindfold. There's a slightly rough pattern to the threads of the fabric. When I opened my eyes behind the bandage, it was like seeing through a tightly woven grid of spider webs, or perfectly square lace. Everything had a white haze over it. I was able to see movement. Drew was industriously moving around, but his shape is a blur, his face obscured.\n\n\"Do you trust me?\" Drew asked. His voice was low, husky, raspy. It was filled with the power I saw in his expression when he opened the door for me, but filled with something else, also. \n\nUnbridled lust.\n\nThe answer to his question was on my lips, an automatic yes. I mean, obviously I trusted him. \n\nBut then Drew yanked the side of my shirt up and I felt something cold and sharp scrape my skin.\n\nFear, a shrill electric bolt of it, zapped up from my side to my heart. My heart started beating double time, and then triple, as if it were a galloping horse that could run away and burst out of my body.\n\nThat was a knife. My God, a knife. Or...or...a scalpel.\n\nI started to breathe loud, short pants, just this side of hyperventilating.\n\nDrew grabbed my chin with one hand. \"Leah,\" he said firmly. If ever there was a dominant voice, that was it. It was so deep, so in control, so calm, that I calmed immediately.\n\nHe repeated his question. \"Do. You. Trust. Me.\"\n\nWhatever sharp instrument of destruction he had had against the side of my waist had disappeared.\n\n\"Ye-ye-yes,\" I stuttered.\n\n\"Not good enough,\" he whispered. The whisper seemed very loud in the small confines of the ambulance, almost like a shout.\n\nDrew let go of my chin. He speared one hand through my hair and made a fist, twisting my long strands around his fingers. He used his grasp on my hair like a handle to gently pull my head back; I had no choice but to go with the motion. The delicate tug on the roots of my hair did something strange to me. The low-level anxiety I live with every day was always buzzing around, like the mechanical noises in your house you learn to ignore. With Drew's hand fisted in my hair, my neck arched back and exposed, my whole body slightly off balance, blindfolded but still able to see somewhat, and tied up to a metal bar, that constant jagged humming of 'not right' in my skin stopped\u2014silenced\u2014and something deep inside me unfurled, relaxed. \n\nI remembered once seeing a TV special about a beekeeper who blew pot smoke into the hive to chill the bees out before collecting honey. The honeybees lay back in a contented stupor.\n\nI was like that. I knew Drew was there, the ambulance was there, my body was there. But this time when he put whatever it was\u2014a dagger?\u2014against the side of my skin and slid it up from my waist to my rib cage to the band at the bottom of my bra and over the cup to tease my nipple through the thin cotton fabric of my bra, all I felt was pleasure. All I could hear was the quiet, steady beat of my own heart pumping, and the delicate white noise of comfort I had slipped into, and then the silence, complete and absolute, of acceptance. \n\nI floated. \n\nSubspace. \n\nI heard Drew's voice, as if from far away.\n\n\"Picture you're laying on a beach, on a big, blue blanket. The sand is the whitest, finest, purest sand you've ever seen. You can hear the waves, lapping onto shore. You can smell coconuts, and coconut oil.\n\n\"The sun is beginning to set, and streaks of magenta and gold are resting in the sky.\" Drew's voice got even quieter, and his words slower. \"Your wrists are tied to the bottom of a palm tree. It's just the two of us.\"\n\nSlowly, as if Drew was luxuriating in the texture of my skin, he stroked the tips of his fingers up the inside of my arm. \n\n\"So soft,\" he whispered reverently. \n\nDrew's hand was warm, and his fingertips were rough, like he had had super glue on parts of the tips but some of it had worn off. He grazed the back of his knuckles lightly over my hands, and traced his fingers down my other arm, moving painstakingly slow, circling in through the armpit of my T-shirt before reversing direction and caressing up again.\n\n\"You feel a warm breeze come off the ocean and dance over your skin.\"\n\nI felt the wind, holding all the warmth of summer, blow gently over my neck and upper chest. I felt the ocean air.\n\nMaybe that was Drew's breath. He was so close.\n\nDrew lifted my hair off my neck, and it tickled me as he moved it to the side to plant slow kisses from my ear down to my collarbone.\n\nDrew pushed my shirt way up, and twisted it around the gauze around my wrists, so it formed another layer to the makeshift handcuffs.\n\nI heard a quick snip, and my bra parted halves a little bit at the center. That's what that blade he'd so gently edged along my skin was. It wasn't a scalpel, or a knife, or a dagger. It was scissors. Probably the kind EMTs used to cut clothes off.\n\n\"I trust you,\" I whispered.\n\nDrew very gently, very sensuously peeled the halves of my bra open, grazing his knuckles over the sensitive sides and tips of my breasts as he went.\n\n\"Do you know what I'm going to do to you now?\" Drew asked me.\n\nI shook my head.\n\n\"I'm going to make love to you on this beach, sweetie. In this public place, where anyone could come by and find us, but no one will. I'm going to make love to you, slowly, gently, then harder and faster, until your whole body is shaking with the intensity of it.\"\n\nDrew ran his hand possessively over my stomach. He traced one finger along the elastic waistband of my sweats, playing with it, before slipping underneath. He nipped my hipbone with a quick bite, surprising me, and making me buck off the bed.\n\n\"I'm going to make love to you, right here, with you tied up, over and over and over again,\" Drew said. He pulled my sweats and underwear off. \"I'm going to make love to you until you can feel my love for you, and know it is as real, and as tangible, as anything on this planet.\"\n\nDrew settled his body weight on top of mine. I could feel the sand beneath me shift slightly. I forced part of my mind to record everything, or at least try to record everything, he did. I knew I would want to remember every little detail, to replay each action Drew was doing to me when I could think, which there was no way I could do now. Sheer pleasure washed over me so strongly, it was like I was one big raw nerve of sensation. Amazing, fantastic, hot, sticky, wildly shaking sensation.\n\n* It was dark when Drew gently brought me back from the beach, and I found myself in the ambulance again.\n\n\"I think you really will need to carry me home this time,\" I joked.\n\nTo my surprise he picked me up in his arms, cradled to his chest, and carried me all the way up two flights of stairs and back to my apartment. He set me down in front of my door. \n\nI surprised myself, when after I put the key in the lock, I looked over my shoulder at him and found myself saying, \"Stay?\"\n\nHe shook his head slightly. \"I have to return the ambulance, baby.\"\n\nMy whole body slumped forward, and I must have looked crestfallen.\n\nDrew put his hand under my chin. \"But I can come back. If you want?\"\n\nMy smile was bright enough to light up the entire hallway.\n\n****\n\nI hadn't slept with anyone in over a year, and I expected it to be weird. I lay on my side, and Drew wrapped his body around me. It was an absolutely perfect fit, with every line of the back of my body snuggly settling into his, like puzzle pieces cut from the same jigsaw. My ass nestled against his groin, apparently spent from the scene in the ambulance. His arm curled around me, and his large hand settled on my breast, holding it completely, safe and warm.\n\nWithin what seemed like less time than it took me to fluff my pillow, I heard him snore softly. I smiled slightly. Somehow the sound was comforting, oddly reassuring, and in a few seconds, I followed him into dreamland, happily replaying him slowly kissing his way down my hip and leg in the ambulance, and not so slowly working his way back up.\n\nBefore I knew it I was deeply asleep. It was the most peaceful sleep I'd had since I was a little kid. \n\n*\n\nI woke up to the smells of bacon, eggs, and fresh coffee, which was confusing, because I wasn't cooking, and I lived alone.\n\nDrew.\n\nI rolled over, but the spot on the bed behind me was cool, so he must have been up a while. \n\nDrew.\n\nI flashed back to the scene in the ambulance. His strong, large hand, low on my pubic bone, pressing firmly, while he held me down. I couldn't help thrashing up against him while he did wicked things with his tongue.\n\nGod that was hot.\n\nA huge smile spread across my face. I jumped out of bed.\n\nPublic fingering, bondage in an ambulance that felt like I was at a beach. Damn. I felt like a kid in a candy store, but better. I actually rubbed my hands together.\n\nI was still rubbing my palms together, like some cartoon villain, or a truly demented pervert, when Drew came in carrying a tray with a really great breakfast on it.\n\n\"What are you thinking, looking so devious yet so delectable?\"\n\nI stopped mid-hand rub and looked down at myself. Naked.\n\nDamn.\n\nBusted.\n\n\"Uh...\" I said.\n\nDrew smiled, a huge, brilliant, pearly white, you-could-reflect-beams-from-outer-space smile. \n\n\"I'm thinking I need to wash my hands before breakfast?\" I asked lamely.\n\n\"That's not what your expression said.\"\n\nI sighed. \"Okay. I was thinking that meeting you was amazing. Labor Day was incredible\u2014\"\n\n\"That fair was pretty killer,\" Drew interrupted me.\n\nWise-ass. I continued as if he hadn't spoken. \"Yesterday was mind-blowing. I'm beginning to think of each moment with you as a miraculous scene of its own. I can't wait to see what you will do next. \n\n\"I think you have officially given me the best summer ever,\" I said, and stared at him, my gaze softening. \"And for the rest of my life, I'm always going to have a really soft spot for ambulances.\"\n\nIf possible his smile got even bigger. \"I don't know why, they're loud, sterile, and occasionally bloody. It's secluded romantic beaches you should have the hots for.\" He lifted the tray he was holding an extra inch. \"I made you breakfast in bed. You're not in bed.\" He raised his voice. \"Get in bed, slave. NOW!\"\n\nI hopped into bed, and dove under the covers. I pulled the sheets up over my breasts. He narrowed his eyes slightly.\n\nDrew stalked over like a fierce predator. There's no other way to describe it. \"Lower the sheets, little slave,\" he demanded. \"Let me see those beautiful breasts of yours. Our day is just beginning.\"\n\nA rush of heat soared down into my core, and when he put one knee on the mattress next to me, I got even hotter.\n\n\"First, I feed you breakfast,\" Drew said, and if the lust in his eyes got any hotter I was going to spontaneously combust. \"And then,\" he said, very, very slowly, so I wouldn't miss the double entendre, \"you, are going to feed me.\"\n\n*\n\nWe spent most of the day in bed. We alternated between having sex, napping, and eating Chinese food that Drew ordered and had delivered, so that we didn't have to leave the apartment. He answered the door to get and pay for the Chinese food, wearing my big, fuzzy, pink terry cloth bathrobe, which sent me into a fit of laughter that only ended when he tackled me and threatened to tie me down.\n\n I will NOT fall in love with this guy. \n\nIt was almost five in the afternoon when Drew decided it was time for us to get dressed and venture out of the apartment.\n\nI followed the order blindly. It felt so good, to have someone make decisions for me again. It relieved some of the pressure. Back when I was with Nick, I used to work at a graphic arts firm where I had to go into an office every day. Nick used to set out my clothes for me in the morning before he left for work, and set out whatever leather, strapped piece of basically nothing, and high-heeled shoes he wanted me in when he got home.\n\nIt sounds weird now, but at the time, it was my anchor, an oasis of calm in what probably would have been a terrifying minefield of my own inner mind if I didn't have that calm ritual to guide me. I used to change into whatever sub outfit he set out for me, and kneel, head bowed, until he got home, whatever the hour.\n\nBoy, was Drew different.\n\nWhen Drew said we were going out, it hardly sounded like a command, more of a suggestion really. I just followed it, but I was aware of how happy it made me. It's hard being alone. I'd been working from home, ordering everything I needed from the Internet, making all the decisions, even the little ones, by myself.",
        "I dressed in my best jeans and a nicely fitted blue T-shirt, and followed him down to his car. It was nice not to have to drive, too. I was beginning to hate driving.\n\n\"Where are we going?\" I asked.\n\n\"It's a surprise,\" Drew said. \"I thought I'd get you something special.\"\n\n\"Hhhm,\" I said. Inside I could feel my heart glow. When's the last time I got a surprise, or a gift? I couldn't remember.\n\nI recognized all the roads we were on. Then we turned on some roads we didn't know, and after a minute or two we were driving on a road lined with really dense trees, and I realized we were approaching the church where I first met Drew.\n\nWas he taking me back to the church where we first met? That was kind of romantic.\n\n\"We're going to church?\" I asked.\n\n\"Huh?\" Drew glanced over at me, and then back at the road. \"No.\"\n\nI looked at him. His brown hair had grown longer, so the back was curling under, a little further down his neck.\n\nWe took a right turn, and then another, and then headed into a strip plaza I didn't know was there.\n\n\"Close your eyes,\" he said.\n\nI followed directions.\n\nI felt the car slow, and then Drew was parking, and then the car stopped. I heard Drew get out. I heard my car door open, and Drew helped me down. I kept my eyes closed. Drew led me a few steps, across the parking lot, I assumed, and up onto the sidewalk. \n\n\"Open your eyes,\" Drew said.\n\nI did. I was looking into a store window, at an easel and art supplies.\n\nI felt a little seizure in my chest. I didn't know why.\n\nDrew grabbed me by the elbow.\n\n\"Come on,\" he said excitedly.\n\nHe dragged me into the store.\n\n\"Surprise!\" Drew said. \"You're at that computer all the time. I noticed you didn't have any painting supplies in your apartment, but you said you loved art. I figured I'd buy you whatever you want. Paints, charcoals, pastels, hell, even photography equipment if you'd like. Then if you wanted, when we go hiking you could bring some stuff and paint by the lake while we picnic or\u2014\"\n\nHe broke off mid-sentence.\n\nI was wandering around.\n\nI was sure all the blood had drained from my face. I put a hand up to my cheek. It was cool, dead cool. I had a feeling it was gray and ashen.\n\n\"Leah?\" \n\nDrew's voice sounded very far away, under water, tinny. Part of me, the part that was still functioning normally could tell it sounded concerned.\n\nI walked the aisles.\n\nFabrics. Wood cut-outs. Sparkles. Candle-making supplies. Scrapbooking papers. Ribbons. Beads. Markers. Pencils... Paints.\n\nMy mind went blank.\n\nPaints. Paint brushes.\n\nI began to hyperventilate. I couldn't breathe.\n\nThe men. The ones with the white hockey masks. I couldn't see. \n\nI stopped breathing completely. I was choking. I grabbed my throat.\n\nThere was an elephant sitting on my chest. A heavy, heavy elephant.\n\nMy knees felt wobbly. Gelatin-like. Liquid.\n\nI bent over at the waist.\n\nI felt a hard smack on my back, real or imagined, and I took in a deep breath.\n\nI started shaking.\n\nMy heart started racing. Like I had had too much coffee. The beat got faster and faster, like a sewing machine racing out of control, until the needle was tattooing a beat on my heart that was too fast to follow.\n\nA big fist clamped down on my heart, squeezing it.\n\nI floated above my body, watching it. The trembling got worse.\n\n\"Leah?!\"\n\nI think Drew's hand was on my back, but I couldn't be sure. I wasn't even sure where I was.\n\nSuddenly I felt sick to my stomach. Acid and bile combined, in a red, biting, caustic, ball of stomach churning heartburn. It heaved up from my stomach, to my chest, into my esophagus, and I put a hand over my heart to keep it from spilling out.\n\nFrom far away I heard myself talking, and belatedly realized that maybe I said the worst possible thing. \n\n\"I need a Tums.\"\n\n\"LEAH!\"\n\nAs if it were operated completely by someone else, as if I were a marionette, and someone else was pulling my strings, my head and neck turned toward Drew. Like a video camera with no one behind it, my eyes recorded his presence.\n\n\"Leah,\" Drew said in a very calm voice. \"Do you have any pain in your chest? Do you feel any tightness, heaviness, aching, or burning in your chest? Do you feel any pain radiating down into your arm?\"\n\nI didn't answer him.\n\nHe spoke louder. \"Are you having any difficulty breathing? Are you having any pain in your back? Anywhere in your upper body? Feel like you're having heartburn?\" His voice went up a lot at the end at that one.\n\nDrew took his phone out of his pocket. He dialed with one hand and started taking my pulse with the other. Vaguely, as if from far away, I heard three tones, three numbers being pressed. 911.\n\n\"Yes,\" he said loudly into the phone. \"I need an ambulance at....\" He looked around, presumably searching for an address.\n\nPart of me smiled at the word ambulance, but part of me also got it. He was calling an ambulance. I yanked my wrist out of his hand and tried to wave it in such a way to waive away his concern.\n\nDrew was reciting the address into the phone.\n\n\"I just need a break,\" I said softly.\n\n\"Leah,\" he said very slowly, as if I were seriously retarded or very, very drunk, \"You're having a heart attack.\"\n\nI shook my head.\n\n\"This is EMT badge number 748-935-652412,\" Drew said, \"I need that ambulance, at the art supply store, STAT\u2014\"\n\n\"I just need a break,\" I said a little louder. I stood up straight.\n\n\"Can I get an approximate ETA on that?\" Drew asked.\n\n\"I just need a break,\" I yelled at the top of my lungs. I couldn't believe it. I never yelled. It was like something took over, and I couldn't control it. I threw my hands up in the air and walked out of the store.\n\nI heard Drew cancel the ambulance, and I felt, rather than heard, his baffling sentiment, which seemed very far behind me. The minute I was out of the store I felt better. It was like whatever happened never was. I blinked in the bright sunlight. The day was warm. It reminded me of those movies where you walked through a door and you were in another dimension. I don't know where I had just been, but when I was on the sidewalk, everything was normal again.\n\nI walked to Drew's car, and on automatic pulled at the passenger side door. Locked.\n\n\"You want to tell me what happened back there?\" Drew said from behind me.\n\n No. \n\n\"Back where?\" I said.\n\n\"Get in the car,\" he said. I recognized that voice. My Dom used to use that. The voice that said, 'I am  NOT happy.' I'd never heard Drew use it before.\n\nI felt like I should say something, but what? \n\nWe were silent. It was the first time the silence was uncomfortable. \n\nDrew started the car and started driving. The car sounded loud. The silence stretched on. It was probably only a few seconds, but it seemed like more because the silence felt laden with cement.\n\nI started to shake. The trembling started in my toes, and then quickly jerked up my body, as if I were having spasm fits in each muscle group in quick succession.\n\n\"Wh-wh-what's ha-hap- happening to me?\"\n\n\"Adrenaline burn-off,\" Drew said.\n\nI looked over at Drew. That one lock of hair was flopped over his forehead. His mouth was set in a grim line.\n\nThe shaking stopped as abruptly as it started.\n\n\"I'm sorry if I scared you,\" I said.\n\n\"How often do you get panic attacks?\" he asked.\n\n\"Almost never,\" I said.\n\n\"You could have told me,\" he said.\n\n\"I was hoping it would never come up,\" I said.\n\nDrew pulled off the road. I looked around. He had pulled into the church parking lot.\n\nOh. Full circle.\n\n\"Well, you did scare me, Leah. You scared the fuck out of me,\" he said loudly. \"I love you, and I care for you, and I wish I had known, because then it might not have taken me quite so long to figure out what was happening.\"\n\nI don't like being yelled at. I really don't like being yelled at. It's one of my things. Even though he wasn't exactly yelling, he wasn't yelling at all in fact, his raised voice triggered something in me and the fist started to close around my heart again. I could feel my breathing get shallow.\n\nDrew's voice became very soothing. \"It's all right, baby. It's just with my history with my wife, I wish I had known, is all, it's okay.\"\n\nI nodded, but I was having some kind of reaction, and I couldn't slow my breathing down. I didn't want to have another attack. But worrying about not having another attack was making me more anxious. Sweat beads popped out on my forehead. I tried to take in a deep breath and hold it for the count of five, but I couldn't do it.\n\nSuddenly I was freezing. I shivered.\n\n\"Okaaaaayyyyyy,\" Drew said. He hopped out of the car, around to my side, and firmly dragged me out. \"In the church we go.\"\n\n\"Right,\" I said. I resisted the urge to giggle hysterically. Strangely, just walking from the car to the church calmed me. Oh, right. Physical exercise could calm people down. I forgot.\n\nWe went in the church, and Drew guided me into the same room where we first bumped into each other, fell on top of each other, fell for each other, or didn't in my case because I wouldn't let myself. Wait. Did he say he loved me? No. I must have imagined that. It's been a long day.\n\nI walked over to the bulletin board. It looked the same. Babysitter needed. Chevy Impala for sale, cheap. The flyer for the Labor Day Fair was still up, peeking out under another flyer pinned on top of it. There was a flyer calling for volunteers for a kids' Halloween dance. Hard to believe that people were planning for Halloween already when it was still so hot out. My mind was still stuck on August. \n\nI was reeling. I thought about how Drew was with me in the ambulance, and I immediately calmed down. He'd talked me into the most romantic scene, where we both were transported to a tropical island, having sex outdoors on the beach. I glanced over my shoulder.\n\nDrew was standing a few feet behind me, giving me some space.\n\nI remembered how hot it was. The air on the beach was hot. Being tied up was hot. Having Drew, totally in control, dominating but not domineering, slowly kissing and nipping his way down my body...my temperature rose as I thought about it.\n\nPerhaps Drew sensed a change in the air, because he came and stood closer to me, very close. He was close enough that I could feel heat radiating off him, and I pictured just a millimeter of space was between the front of his body and the back of mine.\n\n\"What are you thinking about, sweetheart?\"\n\n\"That scene you built for us in the ambulance.\"\n\nHe laughed, one sharp bark. \"That's not what I would have guessed,\" Drew said.\n\n\"I have to distract myself for a minute,\" I said.\n\nDrew closed that last hair of space between us, pressing me to him tightly, and wrapped his arms around my waist. \n\n\"Tell me about it,\" he said.\n\nI slapped his hand lightly. \"You were there, perv. You know what happened. You made it happen. You know how it was. You know what it was like.\"\n\n\"I want to know what it was like  for you. \"\n\nI was silent.\n\n\"Tell me about it,\" he said again, but in a deeper, more commanding voice. \"That's an order.\"\n\nI laughed softly.\n\n\"Well, let's see,\" I said quietly. \"We were on the beach, and you were doing magical things with your tongue.\" I could feel my breath quicken, but in a totally different way this time. \"I was as wet as the ocean, dripping.\"\n\nDrew started caressing his thumb on that sensitive part of my hand, sort of the 'V' of my hand where my thumb met my forefinger. It was hypnotic.\n\n\"You kept licking, circling, teasing, driving me mad, and driving me wild. I think you knew what you were doing to me.\"\n\nSuddenly I was back there, both in the ambulance and on the beach.\n\n\"Then you zeroed in, and found exactly that spot, and I bucked up against you, but you didn't let up.\"\n\nMy heart started beating faster, as if I were running, but it felt totally fine. I was soaring; it was exhilarating. \n\n\"Mmmmn?\" Drew said, when I stopped talking for a second, picturing myself pushing up against his mouth and also being held down by his strong hand.\n\n\"I came hard, and came again, but you didn't stop,\" I said. I heard a noise from Drew, close to my ear, a cross between a grunt and an affirmation. I felt him harden slightly against my backside.\n\n\"Part of me wanted you to stop, to do something else, I was so sensitive, swollen, everything seemed so...pink.\"\n\nDrew's breathing was right in my ear now, his lips touching my hair, the pace of his breathing increasing.\n\n\"Part of me didn't want you to stop doing that, ever.\"\n\nDrew made another 'Mmmmnnn,' sound, but it sounded totally different this time. His hand dropped from on top of my hand to my belly. It wasn't sexual, more possessive.\n\nI stopped talking for a minute, and focused on taking a few deep breaths and letting my chest expand as much as possible. I opened my eyes and looked at the bulletin board. I didn't want to get  too  carried away. We were in a church. We had already ended up on the floor of this room once. I had a feeling if we ended up on the floor again it wouldn't be so PG.\n\n\"Go on,\" Drew said.\n\n\"Where was I?\" I asked.\n\n\"I was rocking your world,\" Drew said.\n\nI laughed. \"Right.\" I closed my eyes again. \"So I was feeling overly sensitive, and the sun was warming my skin, and I was wishing you would stop licking me and also wishing that amazing thing you were doing with your tongue would never end.\"\n\nI felt Drew smile against my ear.\n\n\"Then you climbed up my body, and I wasn't sure exactly what you were going to do next, but I hoped. I wanted you inside of me so badly. \n\n\"You leaned to one side, I had a brief thought for a second that maybe you were opening your pants and putting a condom on, but I couldn't be sure, all I heard was the ocean waves. I was sure you were going to thrust into me, one hard fast strike.\"\n\nI paused. Drew pulled up my shirt a little, and rubbed a slow circle on my belly. It was calming, sensuous, caring. It was beautiful and lazy. His energy was taught, but the motion of his hand was distinctly non-sexual.\n\n\"Yes....\" Drew prompted.\n\n\"Uhhhh....\" I said. He nibbled my neck, very gently, very slowly. Drew was using my hair to lightly brush against my skin before carefully moving it out of the way. If he was trying to distract me from whatever had happened before he was doing a damn good job.\n\n\"Go on, little slave,\" Drew said.\n\n\"Right,\" I said. \"I can do that. Because my addled brain is totally capable. Mmn. Sure. No problem. So. Um.\"\n\nMy neck lost some muscle function. Funny how you never think about the fact that the neck needs activated muscle fibers to hold itself up, until they decide to quit on you. My head thunked back onto Drew.\n\nHe made a masculine chuckle sound.\n\n\"Yeah, yeah,\" I said. \"You're a Dom Sex God.\"\n\n\"My work here is done,\" he said.\n\nI sighed. Wow. That was a contented sound.\n\n\"Go on,\" he said.\n\n\"Where was I?\" I asked.\n\n\"You thought I was going to thrust into you,\" Drew said.\n\nI nodded against him. \"I tensed up a little, waiting, sure you were going to plunge into me. But you didn't. You kissed my collarbones. The top of my breasts.\" I got warm again, and then warmer. \"My nipples.\" My nipples perked up a little hearing themselves referred to. \"Then you made figure eights over my breasts with your palm. It was such a light touch. I was surprised I liked it so much, it was like...\" I stopped. I had nothing to compare it to. I suddenly had a picture of a woman rolling out dough with a rolling pin, but that didn't make sense. \"It was like...ah... I don't know, a soft kind of arousal, different, but so good. Like dropping into a soft cloud that is totally sexy.\"\n\nI paused again, savoring.\n\nDrew didn't prompt me to continue this time, he just waited, rubbing slow circles on my belly with one hand, and slow, small strokes on my hand with the other.\n\n\"Then you must have leaned on your elbows, I guess,\" I said. As I said it, I felt like I was entering subspace again, because I could feel the sands shift under me.\n\n\"And you entered me, but so slowly, and just the tiniest bit. It was agonizing, and also glorious.\"\n\nI tilted my head up slightly, as I had done then, to feel the sun on my face even more.\n\n\"I was so wet, I was sure you'd slide all the way in immediately, but you didn't, so I knew you had to be using your strength to hold back. I told myself that shouldn't be sexy, that shouldn't be hot, but it was. The control, the patience. I wondered, what is he waiting for?\"\n\nMy eyes fluttered as I felt the tip of him inside me, just as strongly as when it was actually happening.\n\n\"I was waiting for our connection to get even greater,\" Drew whispered in my ear, \"for you to blossom for me.\"\n\n\"Oh,\" I said. The word sounded choked.\n\n\"Then what?\" Drew asked.\n\n\"It seemed like an eternity. I wanted to spur you on, encourage you, but I didn't know what to do.\"\n\nI felt Drew smile against my ear.\n\n\"I began to squeeze you. Squeeze and release, squeeze and release, squeeze and release. I used every bit of my concentration. Every time I tried to squeeze a little bit harder. I did it to encourage you, but then I realized I was turning myself on.\"\n\nWe both laughed quietly at that one.\n\n\"But still you didn't move,\" I said.\n\n\"Then I realized I wasn't being a very good little sub,\" I said. \"I was being pushy. I said I trusted you, but that's not really letting you lead, so then I stopped.\"\n\n\"Exactly,\" Drew said. \"That's when you relinquished control. You surrendered. And your whole body opened up. And that's when I slid into all that warm, wet, slick, heavenly goodness.\"\n\n\"Agonizingly slowly,\" I said.\n\nDrew smiled again. \"I didn't hear you complaining.\"\n\nI opened my eyes, and twisted my head to look over my shoulder at him. \"No, I was too busy moaning.\"\n\nHe wiggled his eyebrows. \"Yeah?\" he asked, and nipped my bottom lip.\n\n\"Oh, yeah. Then when you were buried to the hilt you paused, and I wanted to scream. But then you started to move, oh God, and it was all worth it.\"\n\nI closed my eyes, and I was right back there. \"It wasn't just a slow in and out, it was the circles, and the side to side, and the change of tilt, and angles. I just didn't know it could be like that.\"\n\nI shuddered. \n\nI was beginning to worry I would come, standing up right there in the church. I opened my eyes again. \n\n\"Maybe we should stop here,\" I said.\n\n\"Nope,\" Drew said.\n\n\"You're a sadist,\" I said.\n\n\"One of my better qualities.\"\n\nI crossed my arms over my chest and refused to talk for a minute. Drew waited me out. He didn't push me, or cajole me, or force me.\n\nWhen I had calmed down a little, I continued.\n\n\"It seemed to last a really long time at that pace. I pictured the sun setting, the bands in the sky that were pink and magenta fading to darker blue. I hit a sort of...zen place...where I just...yielded, I guess. Enjoyed completely. I was building and building an arousal. I had already come twice, and I don't come from intercourse, so I guess I didn't think I would come again, but then I realized I was sort of slowly climbing up arousal hill. Then, like a switch flipped, you changed into high gear. The vibe changed, and you were all hot and heavy, fast and forceful.\n\n\"It took me by surprise. The sex had been all slow, languorous love making, and suddenly it was fucking, hard. In and out, in and out, in and out. Pounding.\"\n\nI think Drew was holding his breath, waiting to hear my reaction to that, although I'm sure he knew.\n\n\"It was fucking amazing,\" I said.\n\n\"The change was so fast, and intense, and volcanic, and surprising, that it threw me over the edge, and I came so hard I saw stars,\" I said. \"I'm sure I screamed, and then you put your hand over my mouth to gag me.\n\n\"That reminded me that we weren't on a beach, we were in an ambulance, in the parking lot where people could hear me screaming if you didn't have your palm over my mouth like that. I didn't know which was sexier, being exposed on an isolated, romantic beach, where someone might come by and see us, or being at my apartment complex where people could hear us if we weren't careful.",
        "\"Then I couldn't think about it, because I was coming, again. I couldn't believe it. Suddenly it seemed like I was everywhere at once, in the ambulance, on the beach, looking at myself from your point of view, in my body looking at you, even though I was blindfolded and couldn't see you. \n\n\"Then I felt something weird.\"\n\nI stopped there. I hadn't meant to tell him what happened next. It must have been being off kilter from before walking in the church that made me slip up.\n\n\"What?\"\n\n\"Ah, nothing.\"\n\n\"Leah...\"\n\n\"Well, I couldn't have actually seen anything, because I was still blindfolded, but I 'saw' a blue light, or a few lines of blue light actually, from you to me. Sort of felt them, warm and sparkly, connecting us. Just for a few seconds and then they were gone.\"\n\nDrew nodded, as if that wasn't weird at all, as if he had heard of things like that before. \n\nI wanted to rush over that one, whatever that was.\n\n\"Then you collapsed on top of me, and talked me back from the beach, and my entire body felt like it was singing and melting into the cot at the same time. I'm not sure, but I think you carried me up to the apartment. The rest is history.\"\n\nI focused on the bulletin board again, because I needed to calm down, and my underwear was wet, and I didn't want them to get any wetter. There was a dresser for sale.\n\n\"Hey, do you think that dresser would look good in my apartment?\" I said.\n\n\"Nice try,\" Drew said. \"Distraction time is over.\"\n\nHuh?\n\nDrew let go off me. He dragged two metal folding chairs into the middle of the room, which immediately reminded me of the first day we met.\n\n\"Sit,\" he said forcefully.\n\nUt-oh.\n\nI sat.\n\n\"So,\" he said. \"The thing about panic attacks, is that they rarely come out of nowhere.\"\n\n\"Can we not talk about this?\"\n\n\"No.\"\n\nDamn.\n\n\"They rarely come out of nowhere,\" Drew repeated. \"Usually, they have a trigger. Was there something specific today that set you off?\"\n\nOh, I felt some serious suckville coming on. Isn't this what I have Dr. Jeff for? Do I have to do this with my boyfriend?\n\n\"Would you like to tell me about what happened today?\"\n\nNo, no, and hell no.\n\nDrew just stared at me.\n\nWell shit on a stick.\n\n\"Why don't you just start at the beginning?\" Drew asked.\n\nPass.\n\n\"Baby,\" Drew said in a softer voice, and scootched his chair a little closer to mine. It made a high-pitched scratching sound on the linoleum. \"Lots of people have panic attacks, or anxiety attacks, or whatever you want to call them. I get that. Being in a Dom/sub relationship can probably even be very reassuring, and help keep the frequency down, right?\"\n\nI stared at him and pursed my lips. I don't have to answer him. I gave a head motion that was half nod, and half so-so maybe.\n\n\"And, with my magical powers of intuition I'm getting that you really don't want to talk about this,\" Drew said.\n\nI will not crack a smile.\n\n\"But the thing is, chances are, you will have another one, and because we're in a relationship, you might have another one while you are with me. And, because of my history, I'll probably assume you're having a heart attack, which will be awful for me. Then I'll assume that it's not a heart attack, that it's a panic attack, but considering they have almost identical symptoms there's no way for me to know for sure. So I'll assume that it's a panic attack\"\u2014his voice got softer\u2014\"but what if I'm wrong? What if you're wrong? What if there's no way to know until it's too late?\"\n\nI sighed.\n\n\"Sweetheart, I'm not asking you to do anything different right now. I'm just asking you to talk to me.\"\n\nDouble damn.\n\n\"I don't really like to talk,\" I said.\n\n\"Tough shit.\" It was the harshest I had ever heard him sound. I remembered the first day we met, something about cursing in church versus cursing in the parking lot and a slightly hysterical laugh threatened to bubble up.\n\n\"Baby, we're in a safe place.\" He gestured around the room. \"You're with a safe guy.\" He gestured to himself. \"You can tell me. Hey, I'm the assistant Deacon here. That's the same as the associate Deacon, the vice president Deacon, the honorary, 'You better fucking tell me Deacon'.\"\n\nI stared at him.\n\n\"Sweetheart, I wouldn't push you if I didn't really need to know everything about them. When they started, how often. Everything you can tell me about what the panic attacks are like, I want to know. Can you tell me what triggered it today, please?\" \n\nI looked off into the distance.\n\n\"I don't even know really,\" I said. But as soon as I said it, I did know. Shit.\n\nI would have to approach this the long way around.\n\n\"You know, for some people there's a pivotal moment, a path taken, or not taken, like a choice to go to school, or not,\" I said.\n\n\"For some people, there's this one moment, a moment where something happens. Maybe it's something awful. Maybe it's something really awful. Maybe some people handle it well, like it's no big deal. But maybe for some people, it feels like the world ends. Maybe for some people it's somewhere in between.\"\n\nDrew was silent, letting me get to the point, if there was one, in my own time.\n\n\"But maybe, maybe, for some people, something happens, and it creates this moment, this surreal, 'No, this can't be happening to me' moment, where their heart breaks. Where it explodes, or implodes, or just collapses. Or maybe it flakes off, or turns to dust, or falls apart.\n\n\"Maybe part of it stops beating. Maybe it is like a mini heart attack, because part of it dies, the tissue atrophying never to be good again. Maybe a thick wall, thicker than fortresses of old, forms instantly. Maybe, the whole psyche schisms, and someone new is created.\"\n\nI knew I was stalling, talking in generalities, waxing poetic about something that was vague and not poetic at all. Protecting myself, again, as always.\n\n\"I think, for some people, there's one moment in a lifetime where they have an unbelievable, unexpected, devastating heartbreak, right?\n\n\"So, I mean, it would make sense, right, that when Nick died in a car accident a little over a year ago, that was the one moment when my heart broke, when I was no longer whole, and would never be.\"\n\nI paused. Looked away from Drew again. Kept my eyes on the far wall this time. The tiles were a faded no-color color, but I thought they once might have been yellow.\n\n\"I think of myself as the girl with no past, really. I shut the door on it, like a basement that's unfinished that you never open, and eventually you almost forget it's there. Do you know what I mean?\" \n\n\"I know what you mean.\"\n\n\"Do you?\" I asked. My voice went up a lot at the end.\n\n\"Mm-hm.\" \n\nI looked at him. He nodded, and I dared to hope.\n\nDrew stared into my eyes, and I seemed to fall in. It was like slowly leaning off a dock and gently sliding into a cool lake. I waited for him to say something more, but he didn't say anything.\n\nHe just held my hand, and gave me that feeling that we were the only two people in the world. His expression told me that he was listening, not just to my words, but to what I wasn't saying, too. I don't know what or how, maybe he was listening to my emotions that I couldn't help from wafting out, and my body language maybe.\n\nThere was silence for a while, and it felt okay.\n\nI had the distinct feeling if I wanted to say more, he would wait forever to hear it.\n\nWhat the hell was that about? Who does that?\n\nI took a deep breath, held it and counted to five, and let it out as slowly as I could, like Doc Jeff had taught me to do.\n\n\"Where was I?\" I asked.\n\n\"You felt like you were no longer whole, and would never be,\" Drew said.\n\nHe remembered. \"Wow, whoa, okay.\" I took another deep breath. \"Okay, so I thought that was when my heart broke.\"\n\n\"Makes sense,\" Drew said.\n\n\"Do you ever feel like that? I mean still. Like there was that moment, that one moment in life where your whole life changed and your heart just...froze and shattered?\"\n\n\"Frequently.\"\n\nI wanted to ask him how did he go on, but I didn't.\n\nI put my hand over my heart, as if that would keep it from falling apart, or falling out. Then I shook my head. I forced myself to put my hand down.\n\n\"Well, so I thought that was my moment. After that was when the...\" I was going to say nightmares, but at the last minute I changed my mind. \"The dreams started.\"\n\nI thought he would ask what dreams, but he was silent, creating space for me to tell my story in my own way.\n\n\"Um, ah, so...the dreams were bad, I was freezing and running in the middle of summer, but my heart was never involved. I realized that wasn't when my heart broke, and it was partially because I hadn't given my whole heart in the first place.\"\n\nI was quiet again. I wondered if he would condemn me. Would he think worse of me because I said that? That's not what I saw in his face.\n\nI had to look up and away, because my eyes were beginning to tear up, and I didn't want any of the fat drops to spill over. Tears pooled, weighing against my bottom lashes like heavy dew threatening to fall off a curved, downward-sloped leaf.\n\n\"So then I thought my heart broke when I was twelve. It was a few days after my mom left, and the landlord came to the apartment. I realized my mom had been paying him in blow jobs, and I couldn't pay the rent.\"\n\nI started to shake. Drew squeezed my hand harder.\n\nEveryone has trauma, I reminded myself. Whether it's getting fired from a job, or wanting a divorce, everyone has something they want to escape from. I'm not going to feel sorry for myself.\n\n\"Hey, maybe that's why I think about sex so much.\"\n\n\"What?\" Drew asked. \"Wait, what?\"\n\n\"I guess that was a quick change of topic. I meant to avoid thinking about all this,\" I said, and waved my hand vaguely through the air, as if to indicate all I had been talking about. Drew's expression kind of fell. It was so abrupt it was comical.\n\n\"Just checking to see if you were listening,\" I said, and then laughed.\n\n\"I'm listening,\" he said very seriously. Then he leaned in and kissed me. It was a very soft, tender kiss, more like a brushing of his lips against mine really. His lips seemed softer, warmer. It was the tenderest thing I had ever felt, and despite my resistance I felt my heart open a little.\n\n\"Where was I?\" I asked.\n\n\"Sex.\" Drew said.\n\nI laughed again.\n\n\"So I figured that moment, when the landlord came, and I realized I would be homeless, that was the moment my heart broke, that my whole life changed, that I would never, ever really trust anyone again unless I....\" I stopped, not able to say it.\n\n\"Unless someone pretended to make you,\" Drew said. \"Tied you up and told you to trust him, so you could pretend you had no choice to trust him, even if you really didn't, not a hundred percent.\"\n\n\"Damn you perceptive Assistant Deacon nice guys.\"\n\nHe smiled at me.\n\n\"But noooooooo,\" I said. \"When you were so nice to me at the paint store, the reason I...the paint store triggered it. I don't want to talk about it. Well, I don't want to go into it too much. I want to tell you, but I don't want you to ask any questions, okay?\"\n\nThen I did start crying, I couldn't help myself. The heavy tears rolled down my cheeks, salty and hot. I could feel my face getting red and splotchy already, and I hadn't even started. I did the breathe in, hold, slow breathe out thing again.\n\n\"So, I realized that moment, the moment when my heart collapsed, was when I was nine, and my dad drove me to the art store to get supplies and said, 'Pick out whatever you want, I'll be back in a little while'....\"\n\nI rolled my lips together in a thin line and ducked my head. I couldn't finish the sentence.\n\nDrew lunged across the space between us, picked me up, and pulled me into his lap. He held me tightly and rocked me, and like a tsunami that had been held back for so long finally broke loose with a vengeance, the dam broke, and I cried so hard I shook, the tears I had never let myself cry my whole life.\n\nDrew rocked me back and forth, and made soft, sort of mmmmmnnn sounds, and whispered, \"I got you, baby,\" over and over again.\n\nI cried so hard, I think I left a puddle on the floor, which reminded me of the day I sweat so much it felt like I had sweat buckets, before I asked Drew out, right here onto the same grayish-beige linoleum. They won't need a janitor anymore, we can mop the floor with my body fluids. \n\nI must have been dehydrated, or high from the exertion, because for some reason that struck me as incredibly funny, and I started to laugh hysterically. I couldn't stop laughing. I sounded like a hyena.\n\n\"So you see, everyone I've ever loved, in my whole life, left me. My father left me, my mom left me, Nick left me. I can't do it again Drew, I just can't. If one more person abandons me, or leaves me, or dies, I think...\" I began to hiccup loudly because I was having so much trouble breathing.\n\n\"Put your arms over your head,\" Drew said calmly.\n\nI did, and the hiccups stopped. I was amazed.\n\n\"Putting your hands up is a cure for hiccups?\"\n\n\"Only when they're caused by severe stress. That's when the hiccups are sharp, quick diaphragm contractions due to lack of equalized air pressure. When you raise your arms, you give your lungs more room to expand. It only works when the cause is you crunching down on your lungs in the first place.\"\n\nI blinked. I wasn't processing. I had a moment of 'Where am I?'. All of a sudden I flashed back to the beginning of summer. I saw myself that day in June, in Dr. Jeff's office, and I could hear him say, \"You're okay, Leah. Feel the couch under your thighs.\"\n\nI looked down. I could feel the top of Drew's strong leg muscles under my thighs. I was sitting on his lap with my hands held high in the air.\n\n\"I feel kind of silly.\"\n\n\"Probably better than how you were feeling a minute ago,\" he said.\n\nI belched up one last, really loud hiccup.\n\nSlowly I brought my arms down.\n\n\"So I can't risk falling in love again, Drew. I just can't.\"\n\nHe rubbed my back, slow, calming movements up and down my spine. \"That's okay, baby. I'll love you enough for both of us.\"\n\nI broke into tears again.\n\n*\n\nStrangely, or not strangely, I had some backlash. A lot of backlash. Yesterday, when I was sitting on his lap, I felt like he got me. It felt like someone really \"got\" me, maybe for the first time ever, and I wanted to crawl closer and closer to that amazing, warm, comfortable intimacy. Today I didn't want to snuggle closer; I wanted to run away in the other direction.\n\nI felt as raw as if I were a carrot that had been vigorously shredded with a sharp vegetable peeler. I didn't want to talk to Drew. Hell, I wasn't going to\u2014wouldn't\u2014talk to Drew. I was way too vulnerable. \n\nIn the morning I kept sitting at my computer only to stand right back up again and walk\u2014zombielike\u2014in ever widening loops in the living room and then from room to room. Needless to say I didn't get any work done, but I tried, I really did.\n\nSometimes it's like I'm a different person with different people. Or, at least I used to be, before I started working from home. Once that started it was more like I wasn't anybody, maybe because I rarely interacted with anyone. \n\nI had been slowly fading away, further and further into my own castle of aloneness, if that's a word. I had a few similar, but not exactly the same personas, but not a true down-to-the-core, that's really me personality. \n\nIn other words, I was an actress, stuck playing out a part, or parts, that I didn't write, or audition for, but couldn't seem to get out of either. It was like having layers of Kevlar instead of clothes, or clown paint instead of skin. The real me\u2014if I even knew who that was\u2014was buried too deeply to be seen by anyone. I doubted I could find it myself, even with a divining rod, a microscope, a bloodhound, and a private detective license.\n\nMakes sense I guess, that I subconsciously wanted to keep everything under wraps.\n\nI never, ever, told anyone what I told Drew. NEVER. I didn't even want to believe, or admit it was part of my past, much less tell anyone. It felt like I had ripped off a huge scab to reveal red, raw, body parts I couldn't identify. \n\nDrew called at noon. I let it go to voice mail, and I didn't check it. He called again later, but I didn't check that voice mail either.\n\nI watched twelve episodes of Orange Is the New Black\u2014almost the whole first season\u2014a show I thought I'd never watch. I zoned out in front of the screen. I had the same vague feeling about my life as I did about the women's stories unfolding on TV; it's mildly interesting, but has nothing to do with me. \n\nI stopped when my eyeballs felt scratchy and burning from the strain.\n\nI wished I could take back what I had said in front of Drew.\n\nI wished I could take back him being so nice to me.\n\nBefore crawling into bed I thought about listening to my voicemail, but that seemed like too much work. I took a quick peek at my texts and there was a message from Drew that had come in early in the morning. He let me know there was an emergency with his sister. Drew had left town to take care of it. It might take all day.\n\nGood. Maybe it would take weeks. Maybe months. Maybe I could change my phone number and move to another state. One where no one knew my past hadn't been perfect. Hell, forget perfect, discussable.\n\nI crawled under the blankets, sure that the nightmares of men chasing me through frozen tundra would haunt me. Instead, I dreamed of the Labor Day festival, with its warm sunshine, happy crowd, and surprise orgasm.\n\nI woke up early. The dreams of Drew holding me dissipated when I remembered what I'd said. I got even more twisted in the head when I realized that he didn't judge me or run away from me, when he found out about my past. In fact, he seemed to completely accept me, and like, or even love me, more. Somehow that was even scarier.\n\nIt was enough to send me crawling right back under the blankets. I didn't even eat my breakfast at the table; I went back to bed and I took my Pop-tarts into bed with me. Breakfast of champions.\n\n\"This must be the break-up version of breakfast in bed,\" I said to myself, and laughed until I cried.\n\nI pictured myself, in the church, in his lap, saying 'I can't risk falling in love again, Drew. I just can't', and I wanted to cry even more.\n\nI stayed in bed most of the day. I only got up to microwave some hot cocoa, which it was still way too hot for outside, but I had my air conditioning cranked up to the max.\n\nDrew called three times, but I didn't answer. After the third time I turned my phone off.\n\nMy bed was an oasis of comfort. Which was a good thing, because I planned to spend the rest of my life in it.\n\nAt around seven p.m., hunger drove me out of my cocoon and into the kitchen. I was eating mac and cheese out of the pot when I heard a loud banging on my door. For some reason I was sure it was my landlord, the only one I know who knocks so forcefully, so I opened it without thinking.\n\nUt-oh. Not the landlord. Drew.\n\n\"Hello, hot stuff.\"\n\nI looked down at myself. Stained, faded pink sweatshirt that I had been wearing for two days. Raggedy gray sweat pants. Uncombed, slept-in Don King hair. Holding a pot and a yellowy-orange elbow-shaped noodle laden spoon. Yep. I'm a knock-out. \n\n\"Gug,\" I said.\n\nHe came in and kissed me on the cheek. \"Good to see you too. Your cell service isn't working, so I thought I'd come in and check on you.\" He held up a bag in his right hand. \"I brought Chinese.\" Then he held up his left hand, \"And chocolate ice cream.\"\n\nOkay. Maybe I couldn't fall in love with him, but I had to admit he had lovable qualities.\n\n\"I could go for some Chinese food,\" I said. I inhaled deeply and the smells of Szechwan beef and greasy egg rolls assaulted my nose in the very best way. I looked down at the glumpy mess in my pot. Yuck.",
        "He put the bags down on my dining room table.\n\n\"So,\" Drew said in an overly casual voice that made me instantly wary. \"I have four days' vacation, and we are going to take a trip together, and get out of this heat.\"\n\nMy eyes widened. No, oh no. No, I couldn't handle it, not an overnight trip. Yesterday (or was it the day before?) I just got vulnerable. I can't get vulnerable again. It's too soon, and it's too intimate.\n\n\"Little slave, you're coming,\" he said, in a voice that was low-pitched, but more kind than demanding.\n\nThen he whipped handcuffs out of his back pocket and snapped them on me.\n\n\"Aeeeeek!\" I yelped.\n\nHe raised one eyebrow, and his face had a smug expression that said, 'Ha! Sur-p-rise.'\n\nDrew pulled the handcuffs up, so he was holding my wrists above my head. I imagine this was a pretty interesting sight, as I was still holding my pot of creamy disgustingness. \n\nHis eyes went up to look at what I was holding. He tilted his head up and sniffed, and then he wrinkled his nose. \"Sexy slave,\" he said. \"Don't you know part of a sub's job is to take care of herself?\" He took the pot away from me.\n\n\"Like by not going away with strange men?\"\n\n\"I'm not that strange. You're the one with the penchant for kink.\"\n\n\"Still I don't think\u2014\"\n\n\"You will come to Vancouver with me, Princess Leia, and you will enjoy it.\"\n\nDrew pulled me toward him and kissed me. Then he let me go abruptly, turned away and took a few steps toward the door. He tossed the handcuff key over his shoulder. \"We leave tomorrow.\" He turned back around to look at me and smile. He pursed his lips and said in a cartoonish old lady voice, \"Don't forget to pack your angry eyes. You won't need them, but don't forget to pack your angry eyes.\"\n\nThat didn't even make sense. \"What movie is that from?\" I asked.\n\nHe slapped his forehead, and looked down like I was hopeless. \"Toy Story!\" \n\n\"Still haven't seen it,\" I said.\n\n\"You should be in handcuffs. That's a crime.\"\n\nI rolled my eyes.\n\nHe raised his eyebrows. \"Next time you do that you're going to be punished,\" he said.\n\n Oh boy.  \n\nDrew put his fingers to his lips, blew me a kiss, and let himself out.\n\nI guess that meant I was eating dinner alone. Oh well. More of that Chinese food and delicious ice cream for me.\n\nI bent my wrists trying to fit the little key in the lock. Turns out trying to get yourself out of handcuffs is a lot harder than I thought. Bugger. It's so easy to get oneself into them.\n\n*\n\nIt's kind of ironic, or coincidental, or kismet, or some star-crossed super romantic fate that Drew picked Vancouver, because of all the cities in the world, this was the place I've always wanted to go the most. I don't know why. I've always been drawn there. \n\nIn the photos Vancouver's sleek buildings always look so cool. Pictures of the Capilano Suspension bridge always look like people created the ideal quaint pathway of nature's most perfect spot. The water always looks so blue and fresh. \n\nI have a folder on my computer where I keep photos of Vancouver taken when the Aurora Borealis is visible over the skyscrapers. Northern Lights, green and eerie, floating like iridescent specters in their wispy gowns, rushing to a party in trendy downtown. \n\nIt's both neat and a little pathetic that I keep track of what's going on there, when I figured I would never go. They are making so many TV shows there now, interesting ones, like Fringe, Once Upon A Time, and Arrow. I've had this secret crush on Vancouver for years. I've never told anyone. Hmmmn. That's where Drew plans to take me on vacation. \n\nA song, from a long time ago, way before my time, popped into my head. 'Do You Believe in Magic?' I couldn't remember who sang it. I went to my computer and looked it up. It's by a band called The Lovin' Spoonful, 1965. \n\nHuh.\n\nI thought about how Dr. Jeff said I should volunteer, and then I got lost and parked at a church I don't know, and the only guy there is 'in charge' of volunteers. How my car wouldn't start, so I have to spend time with said guy. How his wife died and my boyfriend died. How connected I felt from the beginning. How he counsels and heals, and I desperately need counseling and healing. How he's silly and I'm serious. He picked Vancouver.\n\nNope. I don't believe in magic. I don't believe in fate either.\n\nI do believe in choice.\n\nI'm still not going to open my heart. I mean, my heart hurts just thinking about it. I know what I am going to open though, the white cardboard box that holds my new, fancy, black leather corset with steel rings on it. Lingerie, prepare to make your Canadian debut.\n\n* \n\nI didn't expect a limousine to pick me up. When the chauffer opened the limo door, there was Drew. His brown hair was almost falling in his eyes because he needed a haircut. His Spiderman T-shirt was pulled tight against his chest because of his position, leaning forward toward me. He was holding a white Styrofoam to go box.\n\nHe wiggled his eyebrows at me. \"Come in, little slave,\" he said.\n\nI got in, and the chauffer closed the door behind me.\n\nDrew opened the to go box to reveal a perfectly made omelet and a small stack of pancakes with a smiley face drawn on top.\n\n\"I had to make sure I had something worthy of luring you out of bed and to the airport,\" Drew said.\n\nHow did he know I planned on spending the next few years in bed? \n\nHe cut a perfectly square piece of pancake, speared it on a fork, and held it out in front of my mouth.\n\n\"Open, baby,\" Drew drawled.\n\nI did, and he waited patiently while I chewed. It was the best pancake I ever tasted. \n\nHe stabbed another piece onto the fork, but he didn't lift it directly toward my face. He made a circle in the air with it. I thought he was being playful, like a parent making an airplane motion with a kid. It took me a second to realize he had drawn a loop around my heart.\n\n\"Open,\" he said again before bringing the sweet pancake up to my mouth.\n\nI closed my eyes, but good little sub that I am, I followed orders. With my mouth anyway.\n\nDrew fed me the rest of the breakfast before feeding himself. The whole ride was quintessential Drew. Surprise romance and super class of a limo. Juxtaposed with silliness of Spiderman. Casualness of a breakfast to go with plastic silverware. Hidden message without being pushy.\n\nI shook my head. A Dom and a nice guy. It was in total contrast to everything I had ever believed about the cruelty of reality. It was hard to take in. Yet, it was the most natural thing in the world.\n\nEven the normal hassle of the airport seemed okay with him.\n\nDrew took the lead in Vancouver. Without me telling him, he picked every hot spot I had dreamed about. He made a point of picking restaurants with Canada in the name, as if he could make a theme of how many places we could get great food, hear the Canadian anthem, and hear people say 'eh?' over and over.\n\nThe hotel suite was as big as my apartment. I was tired after playing tourist all day, but the prospect of making love to him in a romantic hotel room gave me a shot of adrenaline that woke me right up. There were candles everywhere, and Drew went about lighting them, giving me a somewhat bashful smile over his shoulder as he did.\n\nI wandered toward the big bed. There was a silver ice bucket with a bottle of champagne on ice in it, and a box of chocolate-tipped strawberries, each strawberry looking extraordinarily red and vaguely carnal.\n\nI shivered.\n\nDrew came up behind me and wrapped his arms around me. \n\n\"It's too nice,\" I said. My heart was in my throat. I focused on two thick, white column candles in front of a mirror on the dresser. They flickered, their flames dancing hypnotically, creating the illusion that the candles were trying to get closer to one another, an amorous pair.\n\n\"Nah...\" Drew said. \"Besides, you deserve some nice,\" Drew said.\n\nOh God.\n\n\"You definitely deserve some nice, eh?\"\n\nI laughed at his Canadian imitation.\n\n I will not fall in love with this guy. \n\n\"How about some romantic music?\" Drew asked.\n\nOh no. Oh no. Ohno. No no no no.\n\nDrew let go of me and went to a stereo player located near the TV.\n\nI turned away from him and buried my face in my hands. It was too much.\n\nPitbull came roaring out of the speakers. 'Shake, shake, shake, Se\u00f1ora. Shake it left and right. Work, work, work it, Se\u00f1ora, right into my ride'.\n\nI looked at Drew. He was bent over, facing away from me, shaking his ass and singing at the top of his lungs along with Pitbull. \"My girl got a big ol' booty. Your girl's got little ol' booty.\" Drew was holding his hands two feet wide and then two inches wide to go with the lyrics. \"My girl got a big ol' booty. Your girl's got little ol' booty.\"\n\nDrew turned around, put my hands on his shoulders, and then moved my hips back and forth in a way that reminded me of a conga line. \"Jump in the line. Shake your body on mine.\" Then Drew switched to falsetto, with a vaguely Hispanic Caribbean accent. \"Let me see ya'. Jump in the line, shake your body on mine.\"\n\nI tried to hold in the laughter, but I felt it bubbling up, like when someone puts regular dish soap into a dishwasher and suds multiply and spill out and flood the entire kitchen.\n\n\"Classy,\" I drawled. \"Real romantic.\"\n\n\"Only the best for my baby,\" Drew said. He had a silly grin on his face. He also had an expression that I thought said, 'I realized you were tense, and I fixed it'.\n\nDrew walked back to the stereo and changed the music.\n\nAn old tune that it took me a minute to recognize flooded the room. The words were slow and lovely.\n\n'Wise men say...'\n\nDrew held has hand out to me, palm up.\n\n\"Dance with me, baby?\"\n\nLike it was the most natural thing in the world, like I was in a trance, I took the few steps that separated us, and then I was in his arms.\n\n\"Only fools, rush, in,\" Drew sang softly with the track. His voice was a rich, deep baritone, warm and velvety. He swayed us back in forth, in time with the music. \n\n\"But I, can't, help, fall-ing in love, with you.\"\n\nOh shit.\n\nDrew moved us around in tight circles, shifting our weight from one foot to the other as we danced. My head fit snugly on his shoulder. He had a great voice, and it cast a spell on me, making a small part of me believe that it was all right to let go, just a little bit, for now. \n\nI told myself that it would be okay if Vancouver was sort of an aberration of loveliness, a little refuge, a mirage of romance that I could let myself believe, take part in, whether or not it was totally real. That thought helped me deal with the overwhelming feeling, the one that wanted to make me run out of the room screaming.\n\nI let myself melt further and further into Drew. Into his strength. Into the hard line of his chest, and the safe embrace of his arms. I let myself melt into how good he felt. I let myself sink into that wonderful smell; it suddenly reminded me of forests. \n\nEven though I braced myself, and kept part of myself apart, locked away, safe, I let myself fall deeper into the part of us that felt so connected, and felt even more connected with each laugh, with each caress, with each time Elvis and Drew sang, 'Can't help falling in love.'\n\nI was glad when the song was over.\n\nReally, how much can one heart take?\n\nDrew smiled at me; it was a tender and bittersweet smile, as if he knew what I was thinking. He brushed his knuckles lightly against my cheek. \n\nThen he went to change the music again.\n\n'Endless Love,' by Diana Ross and Lionel Richie.\n\nReally?\n\nAarrrgggghhh.\n\nSomething must have shown in my face because he said, \"You don't like this song?\"\n\nI didn't answer.\n\n\"It's supposed to be the greatest love song of all time,\" Drew said.\n\nI shrugged.\n\n\"I could play Alvin and the Chipmunks if you prefer.\"\n\nI tried to suppress a smile. \n\n\"It's been a long day,\" was all I said.\n\n\"And it's not over yet.\" Drew came to me and bit a quick playful chomp on my neck. \"I plan to feed you strawberries... and then inaugurate the bed.\"\n\n*\n\nWe got an early start the next morning. The Vancouver air was cool and crisp, a distinct change from the being boiled in oil feeling I'd had all summer at home. Our first stop after breakfast was to a film location, where we got to see part of a new movie being shot. The movie was called Deadpool. I had to give Drew serious props. He was man enough he didn't seem to mind that I was watching Ryan Reynolds, sleeveless, swing a sword around looking totally hot. \n\nI tried not to drool.\n\nDrew and I spent the afternoon walking around downtown, taking advantage of the great weather. I took way too many photos, not caring that I looked like a tourist. Drew mugged for the camera occasionally. When we asked a passerby to take a photo of the two of us, and she said, 'You and your husband make such a lovely couple'. I felt a pang in my heart that made me want to break into tears.\n\nI was ready to go home after that. Or at least back to the hotel.\n\nWe ordered room service. How decadent is that! But I couldn't read the menu. It was in French. Ack. La salade, that must be salad, right? Maybe I'd just stick with salad. I realized I was sticking my tongue out I was concentrating so hard.\n\n\"My sweet,\" Drew said.\n\n\"Mmmnnn?\" \n\nHe flipped the menu over. English. Phew.\n\n\"Unless you're fluent in French?\" Drew asked.\n\n\"Not in this lifetime. I'm fluent in yum though. Oh, bacon. Wow, they have a maple-coated bacon, and a bacon-on-bacon ice cream sundae. Ack. That makes me feel fat just reading it, maybe I better stick with the salad.\"\n\n\"Oh,\" Drew said. \"You're being so good. Such a good girl. Are you going to be a bad girl for me later?\"\n\nYIKES.\n\n\"No comment.\" I wiped my forehead. \n\n\"You have to try french fries with white vinegar,\" Drew said.\n\n\"What?\"\n\n\"French fries. With white vinegar on top.\"\n\n\"Who puts vinegar on french fries?\" I asked.\n\n\"Canadians,\" Drew said.\n\nWeird.\n\nThere were a ton of choices. Oh...there was a filet minion with lobster. \n\n\"I know what I want,\" Drew said, slamming his menu closed. \"Do you know what you want?\"\n\n\"Ahhhh...yeah.\"\n\n\"Okay,\" Drew got up and called room service. \"Yes, I'd like...\" he looked over at me.\n\n\"A Cesar salad with grilled chicken,\" I said.\n\n\"A Cesar salad with grilled chicken,\" Drew said into the phone. \"French fries with white vinegar, the lobster tail, and...\" Drew paused dramatically. \"Some beaver tail.\"\n\nI bit my lip.\n\nWhen he hung up I burst out laughing. \"You want a little bit of tail? Craving some beaver?\"\n\nHe blushed slightly.\n\n\"I give up,\" I said. \"What's beaver tail?\"\n\n\"I have no idea. But it is on the menu and I am not going to miss the opportunity to say I was able to order some tail and have it sent up to my hotel room.\"\n\nI smiled at him.\n\nI am not going to fall in love with this guy. But he is pretty damn likeable. Damn funny people, always trying to get under your defenses.\n\n\"You're just jealous,\" Drew said. \"If you'd seen it on the menu, you would have ordered it too.\"\n\n\"Damn straight. Abso-fuckin'-lutely.\"\n\nDrew pounced, locking his hands onto the arms of my chair, caging me in. He let out a comic roar followed by a fake growl.\n\n\"All this talk of tail is making me hungry.\"\n\nMe too. \n\nI licked my lips. \n\n\"Oh baby, don't do that,\" Drew said. \"They said this room service would be up here lickety split.\" He paused at how that sounded and smiled. \n\nThe food was scrumptious. I had to stop myself from moaning at every mouthful. Apparently the Canadians know what they are talking about with the white vinegar thing.\n\n\"It's like you,\" Drew said.\n\n\"Huh?\"\n\n\"It's incredible. Surprising.\" His voice lowered. \"Delicious.\" He smiled again. \"And it's got a bite.\"\n\nI laughed. \"You're incorrigible.\"\n\n\"One of my many charms.\"\n\nBeaver tail is a dessert. Go figure. It was a sort of pastry thing with really cold fruit inside, which was nice after the warm day we had. It had chocolate syrup over it, and was decorated with a red, candy maple leaf on top.\n\nI put my hands over my belly. \"It's a good thing I like to wear these yoga pants with the elastic waist,\" I said.\n\n\"Yeah,\" Drew said. \"Not only are they convenient for making room for dessert, they're easier to get you out of quickly. Handy. So to speak.\"\n\nI just shook my head.\n\n\"Come on, Lee. I've got a treat for you.\"\n\n\"Is it beaver?\" I asked.\n\n\"You perv.\" Drew took a disk out of his suitcase. \"It's a movie.\"\n\nHuh. Movie on disk. Old school. Drew put it in the DVD player. He pressed play.\n\nA gray desk lamp hopped across the screen.\n\nPixar.\n\n\"Toy Story,\" Drew said.\n\n\"Ahhhhh,\" I said.\n\n\"Come on, little sub. Come sit on the bed with me and enjoy one of the greatest animated films ever made.\"\n\nDrew took a flying leap onto the bed, settled against the headboard, and patted the space next to him. He looked so joyous. \n\nWe had an amazing day. Now there was a wonderful guy, a big bed, a movie playing on the screen behind me. It was perfect, so perfect it started to freak me out.\n\nI pulled on my bottom lip.\n\nDrew looked at me. Every line in his face radiated concern.\n\nHe patted the space on the bed next to him, softer this time. \"Come on, Leah. Let me take care of us.\"\n\nMusic came out of the TV speakers behind me, and a male cartoonish voice said, \"Nobody move, this is a stick up!\"\n\nI started to gasp, short little breaths in through my nose that sounded like what I imagined a fish might sound like, drowning in air. A huge vise clamped down on my heart, the pieces closing in and exerting a crushing pressure. \n\nIt came out of nowhere. I was being squashed under a steamroller. I was tied to anchor and dropping in the ocean. Thousands of pounds of water pressure was squeezing the life out of me.\n\nI expected Drew to jump up and run to me, crowding me, but he didn't. Instead, he made his facial expression super relaxed, almost doped out. He crossed his legs at the ankles, spread one arm out, and let his head loll back a little. \n\nThe edges of the room browned out and sounds fuzzed away to silence, maybe from the pressure that was stopping me from breathing. \n\nIf at all possible, Drew's body language got even more relaxed. Drew made a smooth, sort of sweeping gesture toward the chair farthest away from him, and closest to the door. The movement sort of said, 'Hey, I'm so chill, I'm whatever, but if you want to sit you can plop yourself down waaaayyyy over there.'\n\nThe vise loosened its hold.\n\nTime had stopped for a second while a hundred horses were galloping over me, but watching how over-the-top Drew's calm was made them go away as quickly as they had barreled in. \n\nI hadn't realized it, but when I started to panic I lost my hearing. \n\nThen I heard Tom Hanks' voice from the TV. \"Hands up! Reach for the sky!\"\n\nThen the first cartoony voice I had heard. \"Oh no! It's Sheriff Woody.\"\n\nI went and sat next to Drew on the bed.\n\nHis super stoned casualness disappeared. He put his arm around me. \"Welcome back,\" he said.\n\n\"Thanks,\" I said.\n\n\"No problem,\" he said. Drew pointed toward the screen. \n\nI snuggled in to him.\n\nI couldn't focus right away. If it was because things were so great that caused the panic attack, then the thought that he was so amazing while I was having one might make me have another attack. Best not to think at all.\n\nI turned my attention to the movie. I didn't think I'd like it. I was drawn in, rooting for all the characters, enjoying the vibrant colors, and laughing and smiling. Before I knew it, the theme song 'You've Got a Friend in Me' was playing and the closing credits were rolling.\n\n\"Wow,\" I said.\n\nDrew smiled. \"Now, you're an adult,\" Drew said. \"Yeah, sure Dom/sub kink is nice, but you haven't really passed a milestone into true adulthood until you've heard Buzz Lightyear say, 'To infinity and beyond!'\""
    ],
    "authorname": "MJRoberts",
    "tags": [
        "love story",
        "romance novel",
        "summer",
        "erotic",
        "erotica",
        "short story",
        "romantic",
        "funny",
        "hot sex"
    ],
    "category": "Romance",
    "url": "https://www.literotica.com/s/risk-your-heart"
}
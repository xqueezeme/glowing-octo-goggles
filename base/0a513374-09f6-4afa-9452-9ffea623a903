{
    "title": "Falling Home Ch. 02",
    "pages": [
        "\"This is it,\" she said as we stepped up to a large apartment complex a few minutes later. We'd walked the rest of the way in a comfortable silence with our arms linked. I was beginning to get cold after giving her my jacket and was glad when she led me up to the gated building.\n\nI looked around and smiled as she pressed a code into the keypad and opened the glass door. \n\nI walked in and stalled, waiting for her to lead the way. She brushed past me, took my hand in hers, and led me to the stairwell; hesitating, she asked, \"It's the fifth floor, do you mind the stairs?\" \n\n\"No, after you.\"\n\nOn the fifth floor, Natalie reached into her back pocket and dug out a key that was attached to her back belt loop by a small silver chain. \"So I don't lose it,\" she said.\n\nShe opened the door and flipped on a light. The place was nice; really nice. The floor was a honey coloured hardwood and the walls were a neutral khaki. The hallway led into a sitting room. There were steps leading down to the large red sofas that were curved to fit exactly against the rock wall of the lowered, semi circular portion. In the middle was a glass and wooden table sitting on a white, shaggy sheepskin. \n\nThe corner of the room held a workspace with a pile of magazines. I would recognize the yellow covers anywhere; they were National Geographics. In the center of the mess sitting on an old bed sheet with a large glass vase on it. The bottom of the vase was wrapped in what looked like blue pieces of material, which began in a deep blue shade and faded to a lighter hue as the rings went up the vase. I'd ask about it later.\n\n\"Wow, this is really nice,\" I exclaimed, unable to mute my awe of the design.\n\n\"Thanks.\" She walked into the living room and stood beside me, looking down at the lowered sitting area. \"My friend is an architect who was hired to design this 'new and modern' apartment complex. As part of the contract, there was the option to rent an apartment without the six month wait.\"\n\n\"So why isn't he here?\" I walked around the lowered area to the glass wall on the other side. \n\n\"Well, she was already living with her fianc\u00e9 in a large Victorian terraced house; so she offered this place to me.\"\n\"And what did you have to do for her?\" I teased, turning and wiggling my eyebrows. She hesitated before walking towards me.\n\n\"Oh, nothing that would be of interest to you, I'm sure.\" she responded in the same teasing tone that I had used. She came within inches of pressing her body against mine and and raised an eyebrow as she pulled the sliding glass door open behind me.\n\nI was glad for the rush of cold air that hit me and gave me a moment to collect my thoughts as I backed out onto the small balcony.\n\nNatalie placed her hand next to mine on the railing.\n\n\"You'd be surprised at what does catch my interest,\" I said, no longer teasing. I wasn't sure if I was going too far. My mouth always seems to lead towards what my body wants and what my mind isn't ready for. I held my breath as Natalie gazed down at the neighboring streets and then looked at our hands, side by side. She moved hers slightly and began to rub the back of my hand with her fingers.\n\nI swallowed and mentally cursed myself for taking it a step further than I was willing to go. I watched as Natalie traced my arm with her eyes, she had a wicked smile on her face and my eyes widened involuntarily. \n\n\"So you want to hear all about exactly what I did to get this place?\" She hesitated. \"How I designed the web site for her firm free of charge?\" She burst into a laugh as my face turned bright red.\n\n\"I...I...uh,\" I stuttered and tried to form a coherent, collected response. \n\n\"You had that deer in headlights look again.\" Her smile faded as she continued, \"You know I don't want to do anything you don't want to do.\"\nI relaxed a bit. \"I know, sorry.\"\n\nShe put her finger to my lips. \"You don't have to apologise; I just don't want to be the cause of that look.\"\n\n\"What?\" I joked, trying to lighten the mood, \"you don't like the way innocent deer look?\"\n\n\"No; innocence is nice, but I don't want to be the one that causes you to look scared enough to run away and get hurt in the process.\"\n\n\"Oh,\" was the only brilliant remark I could muster. \"Thanks.\"\n\nI turned back to look down at the empty streets and Natalie straightened up and walked back in doors. I stayed outside, leaning on the railing, trying to figure out what was going on in my head. I was attracted to Natalie. There was no denying the way my blood rushes when she moves close to me or how my hands shake and my stomach flips at the thought of her touching me. But why was I so scared to go beyond that attraction?\n\nI was mulling over this line of thought as my heart rate slowed enough for me to realize that it was freezing. I jumped slightly when I felt a warm jacket being slid over my shoulders. \n\n\"I thought you might need this.\"\n\nI turned around; she pulled the front of the jacket together and held her hands there on my collar. \n\n\"Thanks,\" I managed, and smiled.\n\n\n\nIt's funny what you think of when a moment gets too intense. As Natalie and I stood there under the overcast London sky, with her hands resting near my neck, I thought how nice it was that she was only a little bit taller than me. Just and inch or two. Nice fit.\n\nThe moment drug on; but neither of us were willing to break it. She walked backwards into the apartment, pulling me by the coat as she went. \n\nShe stepped in and pulled me around so I had my back towards the middle of the room. She let go of the jacket and slid the glass door shut. She reached down and pulled off one heel, then the other and held them in her hands as she walked out of the room.\n\n\"Want a tour?\" \n\n\"Sure.\" I tentatively began to follow her, my hands still on the collar of my coat, where hers had been so shortly before.\n\nShe led me to a large bedroom that was dominated by a four-poster bed that had a light, sheer canopy draped over the top, and wound around the four poles. She tossed her shoes into the closet and removed her earrings, putting them on a dresser. She ran her fingers through her hair and turned around, leaned on the dresser and appraised me.\n\n\"I don't bite; you still look so unsure.\"\n\nI sighed and walked closer. \"I know, it's just, I don't let myself get in this position often. And...\"\n\nShe interrupted me, \"And you don't owe me any explanation.\"\n\nI sat down on the bed and pulled the coat tighter around me. \"No, I do. I agreed to come here with you; it's just that every time I've been to this point with someone, I realize that I am not able to give them what they want and I freak out.\" As I spoke I closed my eyes and dropped my head a little. My hands dropped down to rest in my lap.\n\nI felt her move across the space and kneel in front of me on the hardwood floor. \nI whispered, \"And I don't want it to be that way with you.\"\n\nNatalie put her hands on my knees and slid them up to clasp mine. \n\n\"Hey, look at me.\" \n\nI did.\n\n\"I don't know what you've been through, but I wouldn't have brought you here if I thought you might not be worth it. I don't want to push you. I want you. And, I won't deny that you make me so hot I can hardly keep myself from touching you, but I think there's so much more to you than just my desire. And, I want to get to know that part of you too. That's why you're sleeping in here and I'm sleeping on the sofa.\"\n\nNatalie reached up and kissed me gently on the forehead. Then she rose and turned to open a dresser drawer.\n\n\"I'm not about to run you out of your bed.\"\n\n\"You don't get an option. After all, it's only fair; you loaned me your coat; I loan you my bed.\"\n\"Doesn't work that way.\" I stood and shrugged off the jacket.\n\nShe put a pair of plaid pajamas and a t-shirt in my hands. \"Here. Bathroom's right in there.\" She smiled sweetly and pointed toward another door leading off from the bedroom.\n\nI didn't know what to do, so I walked into the bathroom and changed into her clothes. They fit me loosely and comfortably. I felt relaxed. I used her mouthwash and then washed my face. Once free of makeup I looked into the mirror for a while and wondered what she would think of me if I weren't so well put together. It was time to see. \n\nI left the bathroom and found the duvet turned down with the lamp casting a soft glow over the room, but no Natalie. I dropped my clothes on the floor beside the bed and went into the other room.\n\nShe was sitting on the sofa wrapped up in a blanket, with glass of water in her hand. \n\n\"Hey,\" I said.\n\n\"You look cute in my clothes.\"\n\nI blushed slightly. \n\n\"And, you're turning red again. I was just about to watch the news and weather before I went to sleep, care to watch the woes of the world with me?\"\n\nI nodded; she scooted over pulled the blanket off herself and offered it to me. I let her hand me the soft fleece, and then I tossed it back over her shoulders and sat down next to her, wrapping it around us both. \n\n\"Oh.\"\n\nWe were sitting so closely that her crossed knees leaned over my legs. \"Don't worry; I don't bite,\" I said and smiled. She leaned over and placed her glass on the table and leaned her head on my shoulder.\n\nShe clicked the remote and the TV came to life.\n\nSometime within the next thirty minutes of reports of economic downturns and natural disasters, Natalie dozed off. I was slowly falling asleep as well, and yet, very aware of how comfortable I was with her weight against me. I wanted to lie down, but I wasn't ready to break contact. \n\nMy arm was well on the way to losing all sensation so I decided to relocate both of us to the bedroom. I gently moved my arm up and over the back of Natalie's head and nudged Natalie. \n\nShe woke up just enough to touch my face and groggily say, \"No, stay.\" \n\n\"I'm not going anywhere tonight,\" I told her, and quickly changed my mind about moving. I shifted my position so that I was lying with my back to the sofa and Natalie was tucked in front of me. I pulled the blanket around us tightly and hugged her to me. The last thing I remember before drifting off was breathing in the scent of her hair and feeling her hand lightly on my arm. \n\n\n\nChapter 3\n\nThe next morning I woke up alone. The smell of coffee was strong and I opened my eyes to see Natalie sitting in the big chair to the right of the sofa, with her legs folded carefully under her and a cup of coffee balancing on her knee.\n\nI didn't move immediately. I just looked at her. She was even more beautiful in the fresh light of morning than she was last night. She had her hair pulled back sloppily, leaving a few errant hairs hanging in her face as she read The Guardian.\n\nWe slept together. I could feel my face turn red. \n\nI moved my arm; Natalie looked at me, \"Morning. I didn't want to wake you, but I wasn't sure what time your flight was.\"\n\n\"No, it's perfect.\" I sat up and stretched my arms above my head.\n\n\"What's perfect?\"\n\n\"Hmmm?\" I mumbled, and sat back on the sofa.\n\n\"You said, 'it's perfect.'\"\n\n\"Oh, just, this,\" I looked around the room; \"You sitting there drinking coffee and reading the paper.\"\n\n\"This isn't perfection; it's routine,\" she laughed.\n\n\"Maybe, but from my point of view it's perfect.\"\n\nShe looked at me with a bemused smile. \"Well, then you need to get up and get some coffee in you so you can see straight.\" Natalie folded the paper and set it on the coffee table. She stood and walked towards the kitchen, asking over her shoulder, \"What time is your flight anyway?\"\n\n\"1 p.m. What time is it now?\" I stood and folded up the blanket and laid it on the end of the sofa. I replaced the pillows we had knocked off during the night and walked into the kitchen.\n\n\"It's 7:00 a.m.\" She pulled down a cup for me. \"Black?\" \n\n\"Please.\"\n\n\"What time do you need to leave for the airport? And where're your bags?\" She sat a Mickey Mouse mug in front of me.\n\n\"Nice mug.\" It was red with big mouse ears for the handles on either side. \n\n\"Watch it; that's a classic. I reserve it for very special people.\"\n\n\"Well then.\"\n\n\"So, are your bags at a hotel or something?\"\n\n\"I was just going to stay at some hostel in the city, so yeah, my bags are at the airport already. I guess I need to be there around 10:30 a.m.\"\n\n\"Want anything to eat?\" \n\n\"No thank you.\" I smiled at her. She smiled back and pulled a stool around the bar to sit opposite me.\n\n\"Good, cause omelets are not my specialty.\"\n\"Really? That's a shame,\" I told her, \"Cause I was hoping you could get me to like them.\"\n\nShe laughed and pushed a bit of hair behind my ear. \"I'm glad you stayed last night.\" \n\n\"Me too.\"\n\n\"When will you be back from the states? January?\"\n\n\"Yeah. I fly back on the fifteenth, I think. I don't know for sure. The info's in my bag.\" \n\n\"Shame.\"\n\n\"What?\" \n\n\"That I just met you and you're already going as far away as possible.\"\n\n\"It's Georgia, not Australia,\" I smirked, \"But I'll be back.\"\n\n\n\nI glanced around the kitchen, then the living room. I looked everywhere I could to focus on not blushing. I could feel Natalie watching me. My eyes lighted on the workspace with the vase. \n\n\"What's that?\" I indicated it with a nod.\n\n\"That? Nothing.\"\n\n\"Looks like you're a bit of an artist. But tell me, why the stack of magazines; I mean, why the National Geographics?\"\n\nNatalie looked in the direction of the vase. \"Doesn't the color just seem warm? Inviting? It's going to be the top of the world.\"\n\n\"Vase?\"\n\n\"World. I've been collecting various magazines of different genres and color covers to build up a representation of human nature and what we feel in relation to colors and theoreticals.\"\n\n\"National Geographic: sun, warmth, golden yellow. Makes sense,\" I sipped my coffee; Natalie didn't elaborate. \"So, the blue is...\" I prompted. I had an idea, but I wanted to hear her say it, though explanations from the artist can as easily define a work as fence it in.\n\n\"The blue is the basis of life. Some are Conde' Naste Travelers; some are oceanography magazines, pool journals, island life mags, and I even think there might be a few quarterlies on lagoon studies rolled up in there.\"\n\n\"Green?\"\n\n\"Yep, travel magazines, green issue magazines, and I've managed to collect a couple of rainforest ones from Africa too.\"\n\n\"What next?\" I asked.\n\n\"It's more fun for you to guess. Besides, I'm not quite sure where it's going to go. I have the colors in mind, but only one or two set in stone.\" She returned her full attention to me, \"And even stones roll over from time to time.\"\n\nI took a long sip of my coffee and thought about the colors, the art, the hands that created it.\n\nNatalie looked at me, a smile creeping across her lips. I could feel my face turn red under her scrutiny. \"What?\" I finally asked.\n\n\"You're cute when you blush.\" \n\n\"Right.\" \n\nMy face was burning. \n\nShe reached across and brushed my hair back. \"You are.\" She stood up. \"Great. We've got to get moving if you want to make that flight. If you want a shower there are towels and such in the closet. Want any more coffee?\"\n\n\"No, I'm good. But I am going to grab a quick shower.\" I took my cup to the sink and began to wash it. She put her hand over mine on the soapy mug. I froze. \n\n\"I've got this. Go get a shower.\" She smiled at me. Damn it. My face was burning again. I turned and tried to duck out of the kitchen before she noticed. As I crossed the living room I heard her call. \"And you might want to use cold water; see if you can get rid of that blush.\" \n\nThirty minutes later, I was dressed in the clothes I had on the night before, my hair was damp and curly and Natalie was insisting, from the other room, that she was going to Victoria Station with me. While I was in the shower, she had put on some casually ripped jeans and a fitted, long sleeve t-shirt that brought out the color of her eyes. Her makeup was subdued. She looked good. I felt under dressed. \n\nI was staring at her. \n\n\"What?\"\n\n\"Nothing,\" I bumbled. I turned and headed towards the door. \"We should get going.\" I could hear her shoes on the hard wood behind me. She grabbed her keys off the table in the hallway and I opened the door and walked onto the landing. I held the door open and waited for her. She stopped inside the flat and was holding my jacket in her hands, smirking.\n\n\"Are you trying to leave your jacket here so you have a reason to come back to my place again?\"\n\n\"Actually, yes.\" I grinned at her. She held open my jacket and I slipped into it. \"Thank you, my lady,\" I put on my best high-brow voice.\n\n\"You are most welcome,\" she mimicked my pompous tone.\n\nWe braced ourselves against the cold December wind and walked in silence to the tube station. Down through the stairwells and tunnels, we pushed our way onto the crowded platform to wait. She pointed to the mice playing under the track. \"Someone better get them out of here or the line will be closed for mice removal.\" A man next to her chuckled. \n\nWhen the train approached, she grabbed my hand and squeezed. The doors opened and people spilled onto the platform; she nodded to me and stepped forcefully forward into the car. She pulled me in behind her with just enough space for the door to close around my head. The tube was packed. We were standing face to face, so close together that our bodies were almost touching. \n\nThe tube lurched forward; I lost my balance, and quickly reached to either side of Natalie to catch myself. Her hands caught my hips. There was no longer any air between us. When the tube got up to speed I pushed off the door to give her some room. Natalie pulled back against my hips to maintain the connection. I looked at her, but she was looking away. \n\nAt Victoria Station we made our way up to the trains and over to the Gatwick Express. The next train was leaving in three minutes. \n\nWe stood by the train doors, looking at our feet, both wanting to say something, anything. \"I'm really glad I met you last night,\" I began, \"And not just because you're cheaper to stay with than a hostel.\" I smiled, joking as I tended to do when the mood was tense.\n\nNatalie smiled back. \"Just you wait. The first time at the chateau de Brayton is free, but next time will cost you.\"\n\n\"Certainly are sure there'll be a next time, aren't we?\"\n\n\"Well, yes.\" She looked down and then stepped forward and grabbed my hands. \"I mean it. I do hope there will be a next time.\"\n\n\"There will be.\" The train was about to leave. I pulled Natalie into a hug and held her tightly. I released her and stepped back. I felt my eyes begin to fill; I didn't understand. How could she have me so undone when I just met her? I stepped back and into the train. The doors began to beep. Natalie rushed forward and jumped through them as they closed. \n\nI was too shocked to say anything until the train slowly pulled away from the station. \"I couldn't let you go, yet.\" She said.\n\n\"I'm glad you jumped on, because I would have had a tough time explaining how I missed my flight by jumping off the Gatwick Express right before it left.\"\n\nShe smiled and grabbed my hand, and led me to a set of empty seats. We rode the whole way to Gatwick, not saying much, but holding each other's hand and watching London recede from view. \n\nWe pulled into the station at the airport and the doors opened. We hopped out of the train and walked to get my luggage out of storage; Natalie waited with me while I checked it in and got my boarding pass. It was around 10:30 a.m. \"I don't suppose you're hungry?\" I ventured.\n\n\"No, but I would love a cup of coffee.\"\n\nWe went to Starbucks; she reached for her purse to pay, but I shot her a look and said, \"You promised.\" \n\n\"Yes, I did, but I didn't specify when I would let you buy me that coffee. And I choose not to redeem that promise until you get back.\"\n\nNatalie paid for our drinks and we settled into large, leather chairs with our knees almost touching. I was nervous. ",
        "\"So...\" Natalie began.\n\n\"I feel like this is a first date.\"\n\n\"I know what you mean,\" she said. \n\n\"I haven't been on a date in ages. What do you talk about on first dates?\"\n\n\"Well, you can tell me about you, or your family, or your school, or your hair, your eyes, your skin, your mouth. It doesn't really matter what you say. I just want to hear your voice so I can remember it while you're gone.\"\n\n\"That's sweet. But what about you? Where're you from?\"\n\n\"Originally, I'm from Steventon.\" \n\nMy face lit up. I smiled at her. \"Yeah, that's right,\" she said, \"Jane Austen's hometown. But really, there's not much else there.\" \n\n\"Is your family still there? Is your family related to Jane?\"\n\n\"Jane? Are the two of you on a first name basis?\"\n\n\"Yeah, we're close.\"\n\nShe leaned her head back and laughed. Her throat was exposed and I was starring again. God, you're beautiful.\n\n\"What?\"\n\n\"Shit, did I say that out loud?\" Stupid! My face was burning. \n\nNatalie put her hand on my knee. \"You are too, you know.\"\n\n\"Nothing like you, but thank you.\" An elderly man walked by and bumped her chair. The moment dissipated.\n\n\"So, you're not related to Jane Austen.\"\n\n\"No.\"\n\n\"And is your family still in Steventon?\"\n\n\"Yeah.\"\n\nShe wasn't opening up, but I wasn't content to drop it or put the focus on myself. I tried again. \"Do you have any brothers or sisters?\"\n\nHer eyes clouded over. \"I have an older brother and sister. Both are married with kids and living right down the lane from mom.\"\n\n\"Dad?\"\n\nNatalie hesitated and looked away. She shook her head and seemed to come to a decision. She looked at me and said, \"Dad died a few years back. Let's just say that mom and dad could never accept their youngest daughter's lifestyle. So, back to your family. Have any siblings? Older? Younger?\"\n\nI could see a painful story written on her face. I didn't push the matter. All I could do was give her an opportunity to talk if she wanted one. When people are ready to talk, they just need to know that someone is willing to listen.\n\n\"I have an older sister. She's twenty five, lives in Tennessee and is married with two kids that are regular hellions. My mom and dad are still together and as traditional and narrow minded as ever, but I figured out a long time ago that what they don't know won't hurt them.\"\n\n\"Ah. Understood. You and your family get along?\"\n\n\"Sometimes. We have our ups and downs, but they're family. I have to love them no matter what, cause they've always loved me.\"\n\nNatalie looked away again. She was thinking about her family; I could tell. I tried switching topics. \"What's your favorite thing to do on a weeknight after a long day of graphic designing?\"\n\n\"I like to sit at home and relax, turn on the fireplace, get a glass of wine and watch a movie or read a book. Why?\"\n\n\"I'm just planning a night together for when I get back.\" I smiled at her and patted her knee. The board behind her showed my gate number. I had to get moving if I was going to make it through security and still have time to find a toilet before boarding. \n\n\"I've got to go,\" I said. \n\n\"I know. But that doesn't mean I want you to.\"\n\nWe stood up. No matter how many times I go to Gatwick, I always look for rubbish bins that aren't there. I sat my cup down on a near-by table and Natalie and I walked to the security checkpoint. \n\n\"Well, I guess this is goodbye,\" she said.\n\n\"No, it's see you later.\"\n\n\"Right.\" Natalie stepped forward and pulled me into a hug. I held on to her for a long time, inhaling her scent and trying to remember her feel. Finally we broke the hug and she stepped back. \"I'll let you know exactly when I'll be back,\" I said.\n\n\"Ok.\"\n\n\"Bye.\"\n\nI turned and got in the long line for security. Natalie walked toward the exit. I couldn't do this. I couldn't let her walk away. I couldn't always be the coward that gets chased. \n\n\"God, help me,\" I prayed and ducked under the security partition and rushed to catch up to Natalie. I reached her in the area between the inner and outer doors of the airport. I grabbed her shoulder and spun her around. Before I could lose my nerve I gently put my hands on her face and pressed my lips against hers. I held that position for a moment. Then I slowly pulled back and kept my eyes closed. \n\n\"Hey,\" Natalie spoke in a whisper. \"Look at me.\"\n\nI did. \n\n\"I couldn't let you walk away without knowing what you did to me,\" I confessed. I released my hold on her face and my hands trembled. I was overcome with emotion. I'd never kissed anyone so suddenly before. I'd never kissed a girl at all. \n\nShit, shit, shit! I looked everywhere but at Natalie. I knew that she would know how inexperienced I was and wouldn't want me, but my God, I wanted her. \n\n\"You've never done that before.\" It wasn't a question.\n\nI looked at her in mock horror. \"What gives you that idea?\"\n\n\"It's okay. But you didn't have to. I could have waited as long as it took.\"\n\n\"But I couldn't.\" \n\nNatalie smiled. The dimples appeared in her cheeks and her lips shined with my lip gloss. She leaned forward and kissed me softly, then leaned her forehead against mine. \"You better go, and come back to me.\"\n\nI touched my lips and smiled. \"You bet your sweet ass I'll be back.\" I grinned, cheekily, showing all my teeth and not caring that I was making a fool of myself in the airport doorway. I turned and walked confidently back to the security checkpoint, ready for Christmas to be over. "
    ],
    "authorname": "MaryJane26",
    "tags": [
        "drama"
    ],
    "category": "Novels and Novellas",
    "url": "https://www.literotica.com/s/falling-home-ch-02"
}
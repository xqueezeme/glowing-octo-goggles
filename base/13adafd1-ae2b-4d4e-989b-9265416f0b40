{
    "title": "Joining a Fraternity Ch. 03",
    "pages": [
        "This story probably won't make much sense unless you've read the first two in this series. Enjoy!\n\n*****\n\nAfter Dave told me that he also wanted me to ask \"the girl\" to have anonymous sex with him, I spent some time thinking about how to pull this off and did a little research. As a result, I had come up with what I thought was the perfect plan. Basically, I knew that I needed to arrange a meeting between \"her\" and Dave during a time when there was no possibility that Josh would be home or that Karen would show up looking for me. After going through both of their schedules, I realized that they were each taking a lab course that meets for an extended block on Wednesday afternoons. Dave and I, luckily, did not have class during this time. \n\nI found Dave in his room a few days after he talked to me the first time and told him that I'd talked with my friend. I told him my friend said that one fuckbuddy was enough for her, but that she had a friend\u2014also a virgin\u2014who was interested. Her friend was planning to come over the next week on Wednesday afternoon. I also told him the same conditions that I always told Josh: he needed to be blindfolded with the lights off, laying on his bed either naked or in his underwear (he somehow was lucky enough to score a single room), and that there would be no touching and no talking. I told him that I would help him get ready, if he wanted, and would lead the girl into his room when he was ready. I also reassured him, just like I had with Josh, that the girl said her friend was \"protected\" and that he didn't have to worry about cumming inside of her without a condom. He blushed a little when I said that and, as I subtly glanced at his groin, I noticed that his penis had stiffened slightly in his shorts and was tenting out the crotch. Apparently, he liked the idea of going bareback and shooting his swimmers into her anonymous pussy. \n\nDespite my excitement about Wednesday, the next few days slogged by. Karen and Josh were both really busy with their classes, so I didn't see much of either of them. On Tuesday evening, Josh and I finally reconnected. I was getting ready to go to the bathroom to prepare for my meeting with Dave the following day - my pussy needed a little trim - when Josh walked in and closed our door.\n\n\"Man, I'm so freaking horny. Any chance you can text your friend and see if she'll come over tomorrow evening. I need her.\" He said this and then tried to discreetly adjust his cock, which was clearly hard and visible through his jeans.\n\nI said that I would text her, but I was torn about what I should tell him she said. One of my biggest fantasies was having sex with two different guys on the same day, but given the size of Dave's cock, I was also worried about the state that my pussy might be in after my afternoon getting fucked by him. However, just thinking about taking two different cocks on one day got my pussy so wet that, despite my misgivings, I just couldn't say no. I waited a few minutes and then told him that she said yes and that she'd come at 8pm the following evening under all of the same conditions as before. \n\nI was so excited that night that I had a hard time sleeping and found myself tossing and turning in bed. I decided to jerk myself off to put myself to sleep, but resisted the urge to use my dildo... I knew my pussy was going to get a whole lot of use the following day and I wanted to make sure I didn't wear myself out ahead of time. Instead, I played in my pussy lube and ran my finger around my vulva, just teasing my opening, as I used my other hand to jerk my hard clit off. At some point, I felt the bed begin to shake back and forth slightly in a rhythmic motion and realized that Josh was jerking off in his bunk above me. It seemed like he thought I was asleep and I could hear him whispering to himself. It sounded like he was fantasizing about my pussy and what he wanted to do to me tomorrow. Even though he didn't know that it was me that he was murmuring about, I found it hot to know that my pussy turned him on that much and that thought brought me to my own orgasm. I fell asleep in the gently shaking bed with my fingers still on my clit. \n\nJosh left for his afternoon class around 1:45 the following afternoon and I immediately went to go check in with Dave.\n\n\"Are you still into doing this?\" I asked him, adding \"my friend just text me and said that her friend is headed here now.\" \n\n\"Ready as I'll ever be,\" he responded with a grin. \n\n\"Well, then you need to get ready,\" I said, and reminded him of the rules. He immediately stripped his shirt and jeans off and I admired his build. Unlike Josh, who was lean and muscular from rowing crew, Dave was slightly stockier - not heavy at all, but just a little more thickly built. He had very little body hair, but had a little untrimmed trail of hair leading down his belly that I suspected lead to a bush around his cock and balls. I asked him if he had a handkerchief or something to use as a bandana and he said he didn't, so I went back to my room to retrieve one. \n\nWhen I returned, I found Dave lying on the bed with his eyes closed and his hand inside his briefs, obviously stroking his cock. The leg holes of his briefs were stretched out by his erection and by his hand, so I could see the curly, dark hairs covering his large ballsack and my mouth watered with the thought of taking each of his plump, egg-shaped balls in my mouth and running my tongue over them. Though I was enjoying the view, I figured I should alert him to my presence, so I cleared my throat and, when he opened his eyes and saw me standing there holding the blindfold, he removed his hand from his briefs, which were still hugely tented by his hard member. \n\n\"Do you want me to put it on you, or do you want to do it yourself?\" I asked him, and he gestured that I should put it on him. As I was tying it, I told him that I was going to turn the lights out and then let the girl in. Just like my times with Josh, I called \"the girl\" into the room, said I would be waiting in the TV room, and then stayed on the inside of the door as I closed it. I stripped naked, leaving all of my clothing in a pile by the door, and approached the bed, where Dave was once again playing with his cock. This time his hand was on the outside of his briefs playing with the little pool of pre-cum that had oozed out of his cumhole and created a growing wet spot. I tapped his foot and he stiffened, suddenly realizing that \"she\" was there and ready to get started. As he gripped the edges of the mattress with both of his hands, I straddled him and moved up my body until my pussy was right over his groin. \n\nI then lowered myself until I was almost sitting on him... his briefs-covered cock was lodged between my folds and his engorged head was pressed right up against my hard clit. I tilted my pelvis back and forth, grinding and humping my dripping pussy against his clothed cock and leaving trails of my lube all over his briefs. After a few minutes of this, I needed to feel his bare cock against me, so I reached into his briefs and wrestled his cock out through the fly. When I finally got it out, I looked at it and my breath caught in my throat: his cock was truly a manhood, a perfect specimen of maleness built to make almost any vagina quiver in anticipation. This was definitely a cock created to penetrate and inseminate. Though I had seen it flaccid in the bathroom before, I was unprepared for the beauty of its erect state. It was maybe 7\" or 8\" long and light brown (reflecting Dave's Italian heritage), with a couple prominent veins running along it. Its huge, shiny, dark red, plum-shaped head was encircled by a thick foreskin, which was pulled back and bunched up below the ridge of the head. His piss slit was large and oozing his pre-cum, which was dripping down over his frenulum. \n\nI knew I had to taste him. Because he was still wearing his briefs, I was less worried about him feeling my beard, so I grabbed his shaft with one hand and ran my tongue around his cockhead\u2014briefly teasing the tip of my tongue around his slit and collecting all of the pre-cum dripping out\u2014and around his bunched up foreskin before taking as much of his cock as I could into my mouth. Given how little experience I had with cocksucking and how thick his head was, I could only take about 4\" into my mouth before I started to gag, but the look on Dave's face told me that even that much might be too much for him and that he was getting close to cumming. Though I knew I wanted to take his load down my throat at some point, my pussy was hungrier for his cum right then. \n\nI straddled him again and lowered myself so that my pussy was right over his cock. When I grabbed his cock again, beginning to run the head back and forth through my wet snatch in preparation for sinking myself down on it, Dave moaned deeply and I knew this would be a short fuck. Luckily, all I really wanted was to feel him empty his balls inside of me. I sank my hips down so that his cockhead was pressing right up into my opening and felt the outer ring of my vulva stretch tightly\u2014the tightest it had ever been stretched\u2014to open my vagina to receive him as I continued to lower myself down on his bare cock and the head of his member began to push into my sheath. It was a very tight fit and, despite my copious wetness, it was getting to the point of almost being uncomfortable when, suddenly, his whole cockhead was inside my tunnel and my vulva was able to return to a more normal size as his shaft began to enter my body. I began to stroke my clit as I continued to lower my pussy onto his cock.\n\nI'm not sure how I managed to keep from cumming when his huge head, still moving into my slowly yielding pussy, pressed right against my g-spot. But when he was fully inside me and his huge head lodged itself right up against my unprotected cervix, I started thinking about his big plum leaking its pre-cum directly against my cervix and could no longer keep myself from cumming on his cock. My sheath seized around him, gripping his shaft and head tightly, my velvet walls milking his manhood for his semen as my pussy muscles rippled around him. \n\nI was not surprised when he began cumming in response. I felt his muscles tighten and his cockhead begin to throb deep inside of me as he released his swimmers right against my cervix. It turned me on to know that my cervix, still spasming from my own orgasm, was pulling his sperm up into my womb. I sat on him for another minute, letting him continue to enjoy the feeling of my cum-filled vagina squeezing his cock as he finished cumming and then began to soften inside of my sheath. \n\nThis time, I did a good job of immediately cupping my pussy to keep his load inside of me as I pulled up off of him and quickly moved to get dressed. I even managed to keep almost all of his cum inside of me as I got my briefs on, but I felt it begin to gush out of my pussy as I stepped out of his room and sat down on the sofa in the TV room. \n\nJust like Josh after his first time, it took Dave a few minutes to get dressed and to find me in the TV room, but I was glad I waited to see the expression on his face. I don't think I've ever seen a man look so blissed out after a single fuck. I looked at him and raised an eyebrow in question.\n\n\"I just wanted to thank you,\" he said. When I smiled, he continued: \"That was amazing. I guess she had to run, but I wish she'd stayed for another round.\"\n\nI glanced down and noticed that he already had another erection. \n\n\"I'm glad you had a good time,\" I said, loving knowing that his sperm were\u2014without his knowledge\u2014swimming in my vagina as we talked to each other as frat brothers about him getting some pussy. \n\n\"I'm gonna go take care of this now,\" he said, gesturing down at his revamped erection and turning back towards his room.\n\nAs soon as he left, I hightailed it out of there. I was so anxious to play with my cum-filled snatch that I almost ran back to my room. It was only 3pm, so I still had about an hour and a half until Josh would return from his lab. \n\nPausing only to pull off my jeans and briefs and to grab a make-up mirror that Karen had forgotten in my room a couple weeks earlier, I climbed into my bunk and spread my thighs widely. I wanted to see what my pussy looked like after taking such a huge cock. I was a little surprised to see that my opening had, while a little swollen, mostly returned to its original tight state. Dave's semen, thick and white, oozed from my hole and was visible in my pussy hair and even around my clit, which was still hard and poking out of my engorged folds by about an inch. I pushed two fingers inside my snatch and wiggled them around inside of my used sheath, scooping some of Dave's cum out... I then put my fingers into my mouth and sucked his juice off of them, still wanting to taste his cum. Dave's semen tasted a little different\u2014a little saltier and more astringent\u2014than Josh's and had a slightly different texture. I loved the way it felt on my tongue and knew that next time (this time, I was confident that there would be a next time), I'd want to taste his ball juice directly from the spout. I started to rub my clit as Dave's cum continued to leak out of me, but then realized that I should hold off so I wouldn't wear myself out before my visit with Josh later that evening.\n\nI got dressed and went to go check the mailbox to see if my testosterone had been delivered yet. Because I hadn't realized I was running so low and I had forgotten to transfer my prescription over to my new school pharmacy from the compounding pharmacy I'd been using at Smith, I was about a week late for a shot and still waiting for my new bottle to arrive in the mail. I wondered briefly to myself whether I should be worried about being so late for my shot given the number of loads of cum I'd taken in my pussy recently, but I hadn't felt any cramping or anything, so I figured I was probably still safe and that I would just take my shot as soon as my new bottle arrived to make sure I could keep taking loads in my hole with no ummm... complications arising. \n\nNot wanting to think about that any more, I decided to head to the library for a few hours to kill some time and to get caught up on my homework - all of the sexual encounters I'd planned in the past few weeks had distracted me from my classes. Relishing the feeling of being full of Dave's cum, I put the same briefs, which were damp in the crotch from Dave's cum dripping out of me, back on. \n\nI returned the frat house about twenty minutes before \"the girl\" was supposed to come see Josh, and he was already getting ready in our room. When I walked in, he was just tossing his mattress onto the floor. \n\n\"She's still coming?\" he asked when he saw me standing there watching him.\n\n\"As far as I know,\" I responded, putting my backpack down and stepping over his mattress to lie down on my own bed. I crossed my arms behind my head to prop myself up a little and watched him as he got ready for our \"date.\" There was something hot about watching him get ready to have sex with me knowing that he thought he was having sex with a hot girl instead.\n\nI watched as he took off his shirt and pants and moved to put on a jockstrap.\n\n\"Do you think I should wear a jock again?\" he asked.\n\n\"She didn't say anything about it this time, so I guess it's up to you,\" I replied. He rifled through his jocks for a while and finally decided to put on his green one. This one was not quite as sexy as the red one he wore last time, but did really show off his package nicely. He was already starting to get hard as he put the jock on and seemed to have a hard time arranging his cock and balls inside of the pouch. \n\nA couple minutes before 8pm, I tied the bandana around Josh's eyes and he got onto the mattress. Like both of our previous times, I turned the lights off, went outside to get \"the girl,\" returned with \"her,\" told both of them that I was leaving, stayed inside the room as I closed the door, and got naked near the door. This time, I was careful to make sure my belt buckle didn't hit the floor loudly. \n\nI approached his prone form and decided that I wanted to tease him a little first before getting down to business. I admired his package in his jock and began to run the tip of my finger\u2014just one finger\u2014around his package, tracing his balls, the cleft between them, the shaft of his cock, and the outline of his cockhead. When I ran my finger lightly back and forth over his frenulum, still covered by his pre-cum slicked jock, I heard him gasp, shocked and turned on by the sudden contact. I then traced the same pattern with the tip of my tongue, pressing my nose into his ballsack and inhaling his masculine scent. Still worried about him feeling my beard against his inner thighs, but really wanting to feel his balls in my mouth, I sucked as much of each one as I could\u2014one at a time\u2014into my mouth through his jock and ran my tongue over each one. I imagined the sperm stored in each one and was excited thinking about him adding it to my already cum-filled cunt. \n\nWhen I reached down to jerk my clit as I sucked on and tongued Josh's balls, my hand encountered a crazy mess. Between Dave's earlier load, which was still dripping out of me, and my own lube, my pussy and inner thighs were completely coated in our combined fluids. Thinking about this got me so turned on that I just couldn't hold off any longer\u2014I needed to feel Josh's cock inside my hole right away. I mounted him backwards in reverse-cowgirl style, just like the previous time, released his erection from his jockstrap, and positioned its pre-cum coated head against my tight, dripping opening. I then quickly lowered myself down until my pussy completely swallowed his invading member. I almost came thinking about how, even in just penetrating me this time, Josh's cock pushed Dave's sperm deeper into my vagina while adding its own pre-cum to the mix.\n\nI reached down to continue jerking my clit and teasing his balls, and as I raised myself up slightly to start our fucking, I felt Josh's hands grab onto my hips, my hairy, muscular hips. I freaked out and tried to get off of Josh, but he held my hips down, pulling me tightly against his groin, and thrust his hips up so his cock penetrated me to its root with the head knocking against my cervix. Then, Josh spoke, quietly, but decisively...\n\n\"Let's stop playing games, Steve... I know it's you. I don't understand how you have a pussy, but I'm not about to stop fucking it.\"\n\nI was speechless, but stopped struggling to get off of him. I just sat there on his cock, not really sure how to proceed, as Josh removed his blindfold. I craned around and watched him, still just sitting there, my pussy impaled on his cock. Josh, finally making eye contact with me and sensing my indecision, took control of the situation.\n\n\"If you want to pretend to be a girl, then I want to fuck you like one.\" He began pushing me to the side and I got off of him, my pussy making a squishing noise as it released his cock. \n\n\"Lie down on your back,\" he ordered softly, and I followed his command, lying down on my back on his mattress. He grabbed my knees and pulled them apart, spreading my hairy thighs and revealing my messy pussy to his gaze for the first time. His cock jumped a little when my pussy came into view and a little bead of pre-cum dripped out of the tip. \n\n\"You had sex with Dave this afternoon, didn't you?\" he asked, and I nodded yes in response. \n\n\"And you didn't make him wear a condom, did you? You let him cum inside your slutty pussy.\" I nodded yes again. \n\n\"And now you want me to shoot my seed in your used pussy also, don't you? Your pussy that's already full of another brother's sperm,\" he pushed.\n\n\"Yes... that's what I want,\" I moaned, louder than I intended to, \"fuck me and fill my hole with your cum. I want you to empty your nuts in my snatch.\"",
        "He fisted his cock a few times and the bead of pre-cum that was at the tip dripped down and formed a string of pre-cum leading directly from his piss slit to the tip of my clit, which was once again hard and protruding by about an inch and a half. \n\n\"I'm going to mount you, take you like a girl, and fill your pussy with my sperm,\" he said. In response, I drew my feet into the air, spreading my legs even wider and tilting my pussy up submissively to receive his bare cock. \n\nAs promised, he mounted me, covering my body with his and plunging his cock completely inside of me. He put his mouth close to my ear and asked \"want to know how I knew it was you?\" as he fucked his cock in and out of my rippling tunnel. \n\nWhen I didn't answer, he began to tell me, punctuating each phrase with hard thrusts into my pussy. \n\n\"First. The noise. From your belt. Made me think.\"\n\n\"Second. I looked. In your hamper. The crotch. Of your underwear. Smeared with cum.\"\n\n\"Third. Dave said. Only you. Went into. Our room. That night.\"\n\n\"Fourth. Last night. You said. You texted her. And she. Said yes. Your phone. Was on. The desk.\" \n\n\"Fifth. My class. Was cancelled. Only you. Went into. Dave's room today.\"\n\nWhen he finished, I wrapped my legs around his ass, pulling him tightly against me and we rutted against each other, his bare penis filling my cum-filled vagina and his cockhead making love to my cervix, preparing it for his load. This is what we were doing when we heard a knock at our door. \n\nJosh froze on top of me, but neither of us said a word or made any move to disengage from the other. Then we heard a knock and Karen's voice...\n\n\"Steve, are you in there?\" she called. \n\nHearing Karen's voice, Josh put his mouth right back up to my ear and began thrusting into me again.\n\n\"What do you think Karen would say if she could see you right now?\" Josh whispered into my ear. \"Do you think she knows her boyfriend's pussy is so slutty and cock-hungry that he'll pretend to be a girl to take two guys' loads in his snatch on the same day?\"\n\nUnsure whether Karen was still outside the door, I tried to hold my moans in, but what Josh said got me so hot. I couldn't hold back my orgasm any longer and tried to be as quiet as possible as my cunt clenched and rippled around Josh's member. \n\nMy orgasm seemed to set off Josh's and I felt his cock throb over and over inside of my hole as he released his semen into me. He then just laid there on top of me, panting, with his softening penis still plugging my hole. \n\nSuddenly, my mind was racing. I hadn't fully thought out what would happen if he figured out that \"the girl\" was me and I was suddenly worried about everyone finding out that I'm a transsexual, about losing Karen, and my spot in the frat, and maybe even my scholarship money. \n\n\"Are you going to tell anyone?\" I asked.\n\n\"Why would I do that?\" Josh asked in response. \"This way, I get all the pussy I want with none of the complications... and you're going to help me try some things I've been wanting to try, but would have been too afraid that someone else might find out about. I know you're not going to tell anyone.\"\n\n\"What kinds of things?\" I asked. \n\n\"Well, for starters, I want you to ride my face,\" he said, and got off of me. \"Well...?\" he said, when I didn't move.\n\n\"Right now?\" I asked. \"But I'm all messy.\"\n\n\"Exactly,\" he said.\n\nI stood up, still a little shaky from my recent orgasm, and Josh laid down on his back on the mattress. His hand instantly went to his cock and began to stroke it up and down, using our cum (and probably some of Dave's as well) as lube.\n\nI straddled his body and slowly crawled up the bed, until my pussy was over his face.\n\n\"Are you sure you want to do this?\" I asked. \"You know I'm full of Dave's cum also, right?\" He moaned in response and grabbed my hips, pulling my pussy down onto his face. He sucked my clit into his mouth and sucked on it briefly, and then pushed me forward slightly until my huge clit was grinding against his nose and my opening was directly over his mouth. He ran the tip of his tongue around my vulva, teasing my opening and collecting all of the cum and pussy lube leaking out of me. I used one hand to pull one side of my pussy lips open to help him get better access to my hole. He then began to work his tongue into my hole, sucking and licking at it and attempting to get all of the cum mixture, which was still flowing out of me in globs, onto his tongue and into his mouth. \n\n\"Do you like that?\" I asked, \"eating another man's cum and your own cum out of my pussy. Dave really emptied his balls in me earlier, so you're eating a big load of his sperm. Do you like that?\" He moaned loudly and it sounded like he was going to shoot another load. I knew I was probably done cumming for the day, but didn't want to waste a load of his cum. \n\nJosh was visibly displeased when I pulled my pussy off of his face, but he calmed down when I faced the other way and lowered my pussy back down over his mouth, now in 69 position. As he worked his tongue back into my spermy sheath, I licked and sucked his balls and eventually took his cock into my mouth. I continued playing with his sack with my fingers and it didn't take long before I felt his balls tense up and then felt his hot, salty cum filling my mouth as his head throbbed against my tongue. \n\n*****\n\nI'm not sure whether this is to-be-continued or whether this is the last chapter of this story, but I'm open to ideas and suggestions."
    ],
    "authorname": "realpussyboy",
    "tags": [
        "ftm",
        "transguy",
        "cisguy",
        "impreg",
        "creampie",
        "stealth",
        "fertile",
        "sloppy seconds",
        "missionary"
    ],
    "category": "Transgender & Crossdressers",
    "url": "https://www.literotica.com/s/joining-a-fraternity-ch-03"
}
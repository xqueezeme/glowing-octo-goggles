{
    "title": "Unlocking Tally Ch. 01",
    "pages": [
        "\"Tally, you okay out here?\"\n\nIt was an understandable question for Claire to ask. She and the rest of my friends were inside the hotel room, talking and laughing up a storm, while I was standing outside on the balcony. It's not even like I had a decent excuse for doing so. The barren landscape of my tiny desert town didn't make for much of a few. Besides, I was the maid of honor. The whole party was supposed to be my responsibility. Yet, here I was, feeling uncomfortable as usual.\n\n\"Yeah, I'm good,\" I told Claire. \"Just getting some air. It's getting kinda warm in there. I'll be in here in a bit.\"\n\n\"Cool,\" she said, and headed back inside through the sliding glass door. I could still hear giggles and laughter coming from inside. It was an excuse, sure, but based in truth. There were about seven women all crammed into what was assuredly the best room the Day's Inn had to offer. But the heat itself wasn't what drove me outside.\n\nRei's presents. That's what did it.\n\nIt was a bachelorette party, I get that. And I also get that I probably wasn't the best person to ask when it came to putting one together. My general shyness combined with a Mormon upbringing meant that my \"wild side\" usually involved having a single drink, at home, by myself. I was nervous when Marie made me her maid of honor. People were going to be bored with my inevitably lame-ass party!\n\nLuckily, Rei showed up.\n\nShe'd always been the more...open of our group, let's say. Never one to let society's labels or standards get her down, Rei was always out and proud, whether it be about her weight or her sexual orientation or anything else for that matter. There didn't seem to be a single aspect of Rei that was kept on the \"down low.\"\n\nI couldn't believe I'd just used the phrase \"down low.\"\n\nRegardless, if any one of our group was going to bring the wild side to this particular get-together, it was going to be her, and when she'd arrived at the hotel room holding a veritable goodie-bag full of suspiciously-shaped packages, that supposition was confirmed.\n\nAccording to her, she had caught a \"fantastic sale\" at the adult bookstore just outside of town, and decided to celebrate Marie's upcoming nuptials by making a run on the place. While the rest of the girls giggled as she brought out each mysterious present, I scrunched up in my seat, getting more and more uncomfortable. Sex wasn't something I had, well, any experience with, and the whole thing was rather new to me. But maybe it wouldn't be so bad, I'd thought. Maybe there would just be a few funny little penis-shaped novelty cakes or something. I'd seen that in movies, right? Maybe?\n\n\"Wow, that is a HUGE butt plug!\" Marie said as she unwrapped her first gift.\n\nThat's when I left.\n\nBut I was feeling guilty. If Claire had come out to check on me, that must have meant that my absence was noted. And, after all, today wasn't about me. Today was about Marie and her happiness and blah blah blah stupid friend stuff.\n\nFine, I thought as I opened the door to the hotel room again and stepped inside. Unfortunately, the festivities weren't quite over. The group appeared to be scrutinizing one item in particular. It looked like a belt of some kind, with a heart shaped plastic piece on front and various other accoutrements that were completely foreign to me.\n\n\"Okay, so that I actually have used before,\" Rei pointed out.\n\n\"I don't even know what it is, much less how to use it.\"\n\n\"It's a chastity belt,\" she stated as though this fact should have been readily apparent to us. \"Really? Nobody?\"\n\n\"You're kinda on your own there, Rei,\" Marie said with a shrug.\n\n\"There's actually a funny story with that,\" Rei began, taking another swig of her drink. \"This was when I was still living with my girlfriend in New York. I was staying with her at her parent's house while I looked for a place, and one day I was all by myself and I thought: 'Hey, I should wash the chastity belt.'\"\n\n\"As you do,\" Ariel interjected.\n\n\"Exactly! It's about good hygiene, really,\" Rei continued. \"So, anyway, I'm standing over the sink, scrubbing this thing down, when, all of a sudden, her dad comes through the door!\"\n\n\"What did you do?\" I asked.\n\n\"I just sorta stood there,\" she said, imitating a frozen expression. \"And he looked at me, then looked down at what I was holding, then looked back at me, and just left the room. It was great.\"\n\n\"Did he know what it even was?\" Ariel asked.\n\n\"I don't know, but I mean, it's a belt, shaped like a heart, with little heart shaped locks on it. I'm sure it didn't look good.\"\n\nAnd so the bachelorette party went on, with each new toy brought out eliciting more gasps and laughter. There were all manner of strange and foreign devices, each a bit more risqu\u00e9 than the last. The last present was a particularly huge specimen. Everyone in the room looked at each other with a mixture of confusion and intrigue.\n\n\"Tell me that's a whole bunch of gifts in one big box,\" Marie said to Rei as she was handed the gift.\n\n\"Nope,\" Rei replied cheerfully. \"This one's special.\" She glanced over in my direction. \"Hey, Tally, you're big into the Avengers, right?\"\n\nI blushed and look down. It was true, although the sudden refocusing of the group's attention didn't thrill me. \"Um...yeah. Yes. I am.\"\n\nRei began tearing the wrapping paper off the gift. \"Well, feast your eyes on...\" Her voice deepened to an almost comical level. \"The Incredible Hulk\"\n\nThe room filled with gasps and laughter as the gift was produced. I don't know what else I'd be expecting with that name, but there it was. A huge green penis. It had to be a foot long, two inches across, and covered in realistically rendered veins. Maybe someone would be aroused by that. My first reaction was a fear response.\n\nPossibly sensing my hesitation, Marie decided to be an excellent best friend and command the attention of the group. She took the large plastic dong in hand, and held it out in front of her.\n\n\"That's my secret, Captain,\" she began, doing a fairly terrible yet charming Mark Ruffalo impersonation. She then raised the hand holding the end of the floppy green toy, making it look more...erect. \"I'm always horny.\" The room burst out in laughter, and I tried desperately to find new depths of my chair to sink into.\n\nClearly, I was out of my element here.\n\nFortunately, that was the final gift, and the rest of the night passed mostly without incident. There was some rum involved, as well as pretty much every episode of Supernatural where Jared Padalecki took his shirt off, but, eventually, people began drifting off to sleep. It ended up being a fun night, even if my involvement in that fun was minimal.\n\nThe next morning, everyone began filing out of the hotel room. Normal lives to return to and all that. Unfortunately, Marie was blocking the exit, the large stack of gifts from Rei next to her.\n\n\"Nope. Sorry. I am not taking all of these home with me. Thank you, Rei, but this is just too many sex toys.\"\n\n\"Eh, I figured as much,\" Rei said with a shrug and a smile.\n\n\"So you all are taking some of these home with you. Grab whichever ones you want on your way out.\"\n\nI sort of clenched up in fear at this. Intellectually, I knew it was silly. To start with, there was nothing intrinsically scary about them. They were just plastic, after all. Plastic in a very specific shape, but plastic nonetheless. Plus, I could just throw whatever one I got away as soon as I was out of sight. That would be pretty dang easy. Easy peasy lemon-squeezy, even. My thoughts seemed to get goofier as I got closer to the front of the line of people heading out the door and the nerves started to take over.\n\nMy plan was to simply pass by unnoticed. \"Thanks, Marie. Had fun! Bye!\" I tried to scoot out the door, but found Marie's arm there, blocking me.\n\n\"You're not getting away that easy, Tal. Come one, everyone has to take something.\" My face scrunched up with discomfort, and Marie lowered her voice to a whisper. \"I know you're not into this whole thing, Tal, but I really do need to get rid of some of these. Just, you know, grab you one. Might do you some good.\"\n\nI looked up at her, skeptically.\n\n\"Please, for me. It would be a really good maid-of-honor-y thing to do.\"\n\nI let out a large, exasperated sigh. \"Fine.\"\n\n\"Thanks,\" she said chipperly.\n\nI took a quick glance at the now-smaller yet still intimidating pile of adult toys. Try as I might to fight it, my religious upbringing was still triggering an instinct to look away whenever I saw anything remotely sexual, so focusing on choosing one from the bunch was difficult. Eventually, I settled on the least intimidating one I could find: a small purple vibrator. Smooth, plastic shape. No realistic veins popping out, no strange, indecipherable attachments. Just something basic. I stuffed the thing as far down into my purse as I could.\n\n\"Call me if you need any help with the flowers tomorrow!\" I blurted out, and rushed out the door, my head lowered in embarrassment.\n\n\"See ya, Tal!\" Marie called after me, chuckling. I must have looked like an idiot. Right now, though, I didn't care. Right now, I just wanted to rush out of that building. It felt like I was smuggling a loaded gun in my purse as I speed-walked out the front door and into the parking lot. Like I was carrying an armed bomb. I had to get rid of it.\n\nBut I didn't get rid of it. I don't know why. Maybe I was just too embarrassed to stop anywhere. As though someone would see me in the brief window of time where I was throwing the toy away, and word would spread. I mean, it was a small town. Rumors were common. But I didn't have a good reason why anyone would care about what I did, or how they would see me in such a brief instant. Still, I just kept the thing in the bottom of my bag, and headed home.\n\nWhen I got there, I gave a brief greeting to my mom. I was worried she would somehow...I don't know, suspect something if I stuck around too long. As though there were plastic penis rays emitting from my bag that she could somehow detect. That's what being sheltered does, I suppose. She asked me how the party went, I told her it went fine, then quickly ducked into my room. If anything, she probably thought I was drunk or stoned or something. That would be easier to deal with, sadly.\n\nIt's not as though it was her business, though. I mean, sure, I was still living at my parents' house, but I was twenty-four years old. I was an adult. Been one for a while now. It's just, you know, times were tough. It's not so easy to get a job in today's economy. It was a perfectly valid lifestyle choice, even if it meant not really having any independence.\n\nTruth be told, it was tough getting out at all these days. I wasn't very social, because, well, I couldn't be. Somehow I'd ended up with the night shift at work, and, as such, wasn't really available during the times when most people would go and hang out and get together. My friends kept telling me I needed to get a boyfriend, but I wasn't sure how I was supposed to do that, given that most dates didn't happen in the middle of the day.\n\nBut I still managed to have my fun, and I was reminded of such as I walked into my room, which was decorated with various geeky paraphernalia. There were plenty of decorations strewn about, from action figures of comic book heroes to Doctor Who props to various little bits and bobs from all the games I liked. I probably had enough Kingdom Hearts merch to open my own store at this point.\n\nBefore I could get to any of the fun times, however, I had to dispense of my Hazardous Material. I went over to my dresser, and, checking to make sure the door was closed, the blinds were down, and no surveillance equipment had suddenly appeared, I took the purple vibrator out of my bag, gave it a quick glance, and hid it away.\n\nTurns out, it wasn't that simple.\n\nI'd taken the whole day after the bachelor party off work, mostly because I figured there'd be some sort of recovery involved. But, truth be told, none of us had ended up that drunk. I was a lightweight by any standards, but none of the other girls were really heavy drinkers either. As such, it ended up being a hangover-free evening. What that meant was that I'd ended up with a day off work and a lot of time to kill. I started off by catching up on my comics, checking Tumblr, and playing a bit of Minecraft, but none of it could solve the problem I was having. None of it sufficiently distracted me from the events of last night.\n\nGoddamn it, I couldn't stop thinking about sex toys.\n\nIt was annoying. Most of the thoughts were purely intellectual in nature. A lot of the toys Rei brought were things I had never even seen before, much less considered using on myself or others. There was some sort of ring that Marie was supposed to use on her husband. I didn't know what that was for. There were clamps that were supposed to go...somewhere. I didn't know where. It was almost a purely intellectual curiosity. Almost an anthropology study.\n\nAlmost.\n\nAs much as I hated to admit it to myself, some of the items on display did intrigue me in...non-intellectual ways. I might never have had a boyfriend but that didn't mean I was completely...dry down there. I'd touched myself a few times. The first time scared the hell out of me, or, rather, scared the hell in to me, as I thought that my late night indiscretion would damn me forever. But, eventually, I became more and more comfortable with it, probably thanks to all of the erotic fanfics and fanart I'd seen on Tumblr. I didn't do it that often, but there was a part of me that enjoyed some self-inflicted fun every once and a while. And, try as I might, I couldn't stop the thoughts of those toys from eliciting that familiar downstairs tingly feeling.\n\nDamn it, Tally. Have some self-control.\n\nI looked over at the clock. It was one in the morning now. I'd managed to lounge around for an entire day. Not my proudest moment. Still, I was a night owl by nature, so being up this late wasn't a big deal to me. I just had to last a few more hours until my regular bedtime, and then I could start a fresh day with stuff to do to keep my mind of sex, toys, and the intersection of the two. I could get rid of the dull ache in my crotch if I just held out for a little while longer.\n\nAnd then I came across that goddamn fan art.\n\nIt came across my Tumblr dash innocently enough. Well, as innocent as a sexy drawing of Loki and Tony Stark could be. But it wasn't intended for me. I just happen to follow the Frostiron shipping tag, and, well, sometimes we fans could get a bit...creative.\n\nStill, I couldn't deny the effect it was having on me. The picture was of a roughed-up looking Tony Stark, shirt long since discarded, with a look of passion on his face. Behind him, an equally shirtless Loki, a look of almost malevolent glee on his face. The drawing wasn't completely explicit, but, given both men's expressions, nudity, and pose, it wasn't hard to figure out the idea here. Clearly, there was some thrusting happening, and it probably wasn't aimless.\n\nI bit my lip, letting out a sigh as my heart began beating rather quickly. It's true that this particular pairing did do a lot for me. Maybe it was the characters themselves, maybe because the actor who played Loki in the movies was just incredibly hot. Either way, I started to feel a flush emanating from between my legs. Now was probably not the time. It's not like I was alone in the house or anything.\n\nOn the other hand...that picture was really hot.\n\nScrew it. A few clicks later, I was at my favorite Frostiron blog, browsing the NC-17 section. There was a new fanfic I hadn't read yet. What better place to start?\n\nIt was a fairly simple story, all things considered. The two of them stranded somewhere, having to huddle in a cave, a \"well, body heat will keep us warm\" scenario. But it was doing the trick. What the author lacked in originality they made up for in storytelling granularity. Lots of excellent descriptions of heaving chests, rippling muscles, and sweaty bodies.\n\nAlmost absentmindedly, my hand drifted down the crotch of the sweatpants I was currently wearing. The thin fabric gave little resistance as I began gently running my fingers up and down my increasingly moist mound. I could feel the fabric getting more and more damp the further I scrolled down in the story. Once I reached the point where both characters were naked, their bodies pressed up against each other, I knew that outside stimulation wasn't going to cut it anymore.\n\nSlowly, I untied the drawstring on my pajama pants. I could feel the rough texture of my pubic hair as I ran my hand down my front, until, with a tingle, I felt my fingers reach their destination.\n\nThe story had done its job. I was fairly wet already. I continued reading, lightly tracing the outline of my lips as I did so. My fingers pressed harder and harder against my slick pussy, until, finally, at the moment of penetration in the story, I slid one tentative finger inside myself.\n\n\"Ah!\" I let out a small sigh at the initial intrusion. I extracted my digit, rubbed my outer lips a bit more to get them slick with my wetness, then slipped both it and a second finger back into my hole. Normally, I would go in for more clitoral stimulation, but something about tonight was making me yearn for more. I needed to be filled. I slipped a third finger in as well, feeling my inner walls gripping me tight.\n\nBut it wasn't working.\n\nThe story was hot, and the pleasure of my busy fingers was certainly there. But it wasn't enough. I knew I wasn't going to be able to take myself the rest of the way like this.\n\nMy eyes shifted over to the dresser drawer.\n\nNo. It was a joke. A gag gift. Not something to actually be used. But...why not use it? It was just sitting in there.\n\nWith a sigh and a wet \"squeak\" sound, I pulled my fingers out of myself. That aching need was still there, made all the worse by my stopping halfway through. I wiped my arousal off on the side of my sweatpants, and walked over to the dresser, opening the drawer with some trepidation. In my rush to get it out of sight when I got home, my first idea was to put it at the bottom of my \"random junk\" drawer and cover it with stuff. The idea was good, in my opinion, for two reasons. First, I didn't want to put the toy in my underwear drawer, because that's the first place someone would check. Second, putting a fake penis in a \"junk\" drawer was kinda funny.\n\nBefore too long (and after grabbing a set of batteries that I figured would be handy), the box was uncovered, and, sitting inside the clear plastic case, was my new purple friend. I picked up the box, removed the top cover, and took out the small vibrator.\n\nIt felt strange in my hand. I'd expected a hard plastic, but this was more soft. Porous, almost? The exact specifications of manufactured plastic weren't my area of expertise. Still, it was more inviting than I had been expecting. Less of a hard, plastic instrument and more of an...accessory. Still, this was kind of a turning point, and my nerves were going off appropriately. While a few teenage years spent doing Taekwondo had removed the physical barrier, this was going to be the first time I'd actually be...penetrated. I felt my excitement build as I removed the batteries from their flimsy cardboard case, and unscrewed the bottom of the toy.\n\nAfter fumbling around for a bit, I managed to get the batteries into the vibrator. My hands are shaking with anticipation, but I was able to screw the cap back on. Wanting to give the sensation a quick test before its trip southward, I hit the button on the vibrator's base.\n\n\"Ooh!\" the force of the buzzing is surprising. I was expecting something a little more subtle, but this...well, this certainly had some verve to it. I debated my options; would it be better to start the vibrations before I actually put it inside myself, or after? I supposed that it didn't matter. It's not as though this vagina was a rental that I would have to turn in the next day. If one way wasn't satisfactory, I could try both.",
        "I quickly stripped out of my oversized shirt and pajama pants, and started to head back over to my computer desk. One look at the leather chair, however, and I started to have second thoughts about my choice of fondling locations. I had a glimpse into the future, and the idea of leather sticking to my more sensitive areas didn't sound great, and, one quick jaunt to my closet to grab a robe later, I found myself in a much more appealingly cotton-cushioned seating arrangement.\n\nWith my left hand clutching the toy and my right hand on the mouse, I resumed my story. Already, the characters I was reading about were pulling ahead of me in the orgasm department. Loki had finished the oral exam of the yarn, leaving Mr. Stark satisfied in a way that flew in the face of established canon. As the Trickster God positioned himself behind his paramore in the story, I began running the vibrator along my slit.\n\nI'd usually savor the teasing parts of a good fanfic, but there was somewhere I needed to be. I practically skimmed the next few sentences, until I got to the point I was waiting for. The comic book supervillain thrust into his target, and, in kind, I thrust the plastic phallus into myself.\n\nMy first thought was: Whoa! Should have gone a bit slower there! There was a tightness issue to be sure.\n\nMy second thought, after the discomfort settled down a bit: oh my god, oh my god, oh my god. This was what I needed. I was done with just fingers. Waves of pleasure swept over my entire body as I began moving the toy in and out of myself. Not only were the sensations incredible. Not only did the feeling of bliss as the toy reached as far as it could go send shivers through my mind and body. But also, just knowing that I was doing this was the most delightfully perverse feeling I'd ever experienced. I could smell the hot scent of my sex wafting up to me, and I could hear the wet sounds coming from my pussy as I plunged the vibrator inside. I wanted to scream, but the fear of waking someone up prevented me from doing so. Problem was, that only made it even more intense. The short gasps that escaped as I rolled my head back in my chair, mouth open with arousal, made me feel passionate, dangerous, and so, so erotic. Even despite the intense pleasure I was feeling now, I managed to pause for a moment.\n\nThere were still two things left to do: I had two buttons to hit.\n\nThe first was the button on the bottom of the vibrator. I knew how it felt when I did my little test run earlier, and I could only imagine how it would feel when it was actually inside me. I braced myself, then hit the button.\n\nIt was hard to keep from screaming as the vibrations from the toy went off inside my pussy. I could feel every pulse of the toy, and, god, it felt so damn good. I let out a growl from deep in the back of my throat as I began pivoting the toy inside myself, finding the perfect spot.\n\n\"Ah, ah,\" I gasped, as I found my target. I might have been an overly tall, chubby, nerdy pariah of a girl, but, right now, I didn't need anyone else. There was just me and my plastic friend here, and he was treating me like a goddamn princess.\n\nNow, for the second button. Mine.\n\nAs the toy let out its muffled buzz from deep inside my pussy, I began stroking my clit, rubbing it faster and faster as I shoved the plastic cock into my hole over and over. The sensation was incredible. Unlike anything I'd managed to accomplish with just my fingers alone. My muscles began to tense up. My limbs were shaking. I was close. I just...just needed to...\n\n\"Nnnaaggghhh!!!\" I let out as my climax hit. The walls of my vagina squeezed around the toy as a thousand tiny explosions burst throughout my body. I could feel several small spurts of fluid start to run down my hand as the orgasm continued pulsing through my body. Eventually, the sensation passed, and I felt my body unclench, sinking back into the chair. The only sounds in the room were my desperate panting and the buzzing of the toy still sticking halfway out of me. In my delirious state, I somehow managed to hit the button again, turning the toy off, and pulled it out.\n\nThat...that was more than I ever hoped it would be. I figured I was missing out on something by choosing to forego sex, but I'd never imagined it could feel this good. A shiver passed over me, and a huge smile crept across my face. This was going to be the start of something great.\n\nI knew I wanted more. I felt like I'd taken that first big jump into a cold swimming pool. Now that my body had adjusted to the change in temperature, I wanted to swim around in it. I wanted to truly explore myself. Really see what I was like as a sexual being.\n\nMy eyes drifted back over to the fanfic on my screen. I'd kind of forgotten about it, particularly once the awesome vibration part of my own erotic adventures began. I continued to read over it. I wasn't done. Not by a long shot. And, as I read detailed descriptions of Loki thrusting into Tony with wild abandon, a frighteningly exciting thought crossed my mind.\n\nI looked over at the vibrator, still sitting on the computer desk, slick with my juices. I glanced at the story again. Before I could convince myself not to, I quickly tied my robe and headed out my bedroom door.\n\nSlowly, deliberately, I put one foot down in front of the other, making sure the entire pad of my foot came to a rest before picking it up again. The goal here was to make as little noise as possible. If my parents woke up at two in the morning and saw me just going to the kitchen, that would be one thing. I could claim I was just getting a glass of water. But the return trip was the tricky part. There was absolutely no good excuse I could think of if I got caught on the way back.\n\nSo far I was doing a pretty damn good job staying quiet. I managed to get into the kitchen with no problems, and slowly pulled open the pantry door, taking as much care as possible to do so without letting it squeak or anything like that. Once the door was open, I used the light from my cell phone to see inside. A quick scan of the shelves, and I'd found what I was looking for.\n\nGiven that tonight was the first time that anything had penetrated me, I didn't exactly have a full stock of lubricant on hand to satisfy my curiosity. So, a quick Google search for \"lube substitute\" was in order. There were a few recommendations, but one stood out as easily accessible: vegetable oil. It was one of the messier options, but apparently it was safe to use.\n\nI quickly grabbed the bottle, tucked it under my arm, and slowly closed the pantry door, making sure to turn the knob beforehand in order to avoid the telltale shutting sound. My heart was beating a thousand times per minute, and my breath was coming in short, excited gasps. Was I really doing this? Me? Tally? The girl who, until now, could barely even talk about sex? I didn't give myself time to think about it too hard as I raced back to my room, the bottle of oil concealed under my robe.\n\nBefore I made it back to my room, I made a quick stop at the bathroom and grabbed a couple of towels. Knowing my clumsy self, the likelihood of spilling some of the oil was pretty high, and having a bit of extra insurance against making a complete mess would be good. Also, it would be easier to explain having to wash towels than having to wash my entire bedspread.\n\nTowels in hand, I made it back to my room, closed the door, locked the door, and went ahead and propped my computer chair against it for good measure. The last thing I wanted was someone walking in on this.\n\nMy hands shook as I walked back over to the bed. I reached under my pillow, searching with my hand. Eventually I found the cylindrical, plastic object to which I'd become so well acquainted tonight. I looked it over, and, thinking about where it had to go, what had previously seemed so small and inoffensive suddenly seemed huge. Probably best to work up to the dildo.\n\nI untied the robe and let it fall to the floor. For a moment I just stood there, running my hands up and down my body. It felt like something had changed. I was still way too tall. I still had pudge in some places. But it didn't matter. I felt...better. More confident. I always knew that hymen was holding me back from greatness.\n\nI also gave myself a quick tweak of the nipple. Just for fun. The twinge sent a shiver down and I felt myself starting to get that fun tingle.\n\nAfter laying the towels down to form a protective layer of sorts, I climbed onto the bed, bottle of oil in hand. Now to find the best position. I climbed onto my knees, and started to undo the cap. Just pouring the vegetable oil directly onto my anus was probably not the best plan. Instead, I poured a bit into my left hand, then, used my right to spread it around onto my finger. Then, trying not to touch anything else, I set the bottle down onto my night stand.\n\nOkay. I'm actually doing this.\n\nI fell forward, resting on my elbows. I took a deep breath and reached back behind myself, shivering as I felt the cold, oil-covered finger graze against my puckered anus. Slowly, I began rubbing my finger around the hole. I started to feel my arousal growing as I put pressure on the outside of my ass. Even that sensation was intriguing in a new way, firing off nerve endings I'd never experienced before. After a few seconds off rubbing the lubricant in, I figured I was probably ready to go, and began to push. I gasped as my finger penetrated my anal ring.\n\nIt felt...good!\n\nI hadn't expected it, but just the presence of a single digit made me feel so wanton and dirty. This was all for me. I wasn't doing this for procreation like I was taught in church. I wasn't simply lying on my back and getting pounded to fulfill my wifely duty. This was me, fucking myself in the ass with my finger. I shook my head, laughing at the thought. It was so foreign to me. But there it was. I was fingering my asshole because it felt good, and I wanted to cum. For myself. The freedom was almost as profound as the physical sensation.\n\nThere was no way I was going to be able to do this without touching my pussy. I raised myself up onto my knees, and stuck my free hand between my legs. As I slowly pushed my middle finger into my ass, I began rubbing my lips as fast and hard as I could. Right now I had no interest in being delicate with myself. Once I was up to the second knuckle on my right hand, I began intermittently pinching my clit, sending sharp shivers throughout my entire body. My left hand was getting wetter and wetter from my own arousal, every touch driving me wild, and the pressure in my ass only adding to the feeling.\n\nFuck it. I would build to a big one later. I just wanted to cum right then. My finger found my pink button, and began rubbing it furiously. My knees buckled, and I had to stifle a moan.\n\n\"Yes...yes...ohhh...\" I whispered through my teeth, unable to stop myself. My back straightened as my limbs started to tense up, and I started to buck against the finger in my ass. Bolts of electricity ran through me as I started to move my finger in and out of my tight hole, all the while still rapidly frigging my clit. Then, it happened. My breath caught in my throat, and I felt the first glorious shiver of my orgasm. I tensed up as my body teemed with pleasure, and I felt my ass contract around the finger still inside it.\n\nI let out a sigh and sank back down to my knees, removing my finger. It wasn't the most prolonged orgasm, but I was getting to that. All I knew then was that I wanted more. The rational Tally who knew her limits might have decided to work her way up by sticking two fingers in, then three. But that Tally wasn't around right now. Right now, I was horny as hell, and ready to break all of my boundaries. Care and patience was going right out the window.\n\nI picked up the bottle of oil again, untwisting the lid and pouring a few more drops of it into my hand. I reached back and smeared the additional fluid onto my hole. Once a fresh coat was thoroughly applied, I knew it was time to take that next step. I grabbed the dildo, gave the shaft a couple strokes in order to apply the oil that still remained in my hand, and took a deep breath.\n\nI started slowly, moving the head of the plastic cock around my rosebud in small circles. Even with that small motion, my body began to quiver in anticipation. Carefully, I started to apply a little bit of pressure. The extra time and lubricant did it's job, and the toy began to slip inside my channel with relative ease. The feeling of fullness was incredible as the toy started to make its way slowly into my tight little asshole. I sank back onto the bed, resting the bottom of the toy on the surface of the mattress so that I could simply slide down it at my own pace. I do so, slowly sinking down onto the toy as I rubbed my pussy, feeling the pressure in my ass growing more and more intense as I impaled myself on the plastic cock. When it was about halfway in, I stopped rubbing my labia and, instead, start inserting my fingers into myself. I started with one, then two, growing wetter and wetter as I continually thrust into my moist hole. I could feel the toy between the thin membrane that separates my ass and pussy, and the raw depravity of it all nearly sends me over the edge.\n\nThere was a bit of resistance now as I started to work the second half of the toy into my ass. I felt a slight twinge of pain. It was possible I was coming at things from the wrong angle. Reaching back, I grabbed the base of the toy and began to slowly rotate it, putting light pressure on as I searched for just the right point of entry. As I did so, I caught a glance at myself in the full-length, mirrored door that led to my closet. It was hard to even recognize myself. Who was this girl on her knees, with her fingers wrapped around a plastic cock and two fingers shoved inside herself.\n\nA sudden desire struck me. With half of the toy still inside me, I moved over to the nightstand, where my phone sat, plugged into its charger. I quickly turned it on, and, with a swipe, brought up the camera app. Crawling back to the middle of the bed, I pointed my rear end toward the mirror. Grabbing a cheek with one hand and holding the camera with the other, I quickly took a picture of myself in this pose, before I had the chance to think about it too much and change my mind.\n\nI looked at the results on the phone's screen. It wasn't a great picture. It certainly didn't have the professional qualities of even the most low-budget porn pics, but it was me. There I was. I could swear that I could make out the droplets of moisture dripping off my wet pussy, although that could have just been a reflection from the flash. I had no idea what I planned to DO with the picture. But just knowing that it was on there. That anyone could see it if they looked at my phone sent a shiver down my spine.\n\nMy naughty pictorial thus completed, I set the phone down and got back to the task at hand, bending over and rotating the base of the toy once more. The dildo didn't seem to be making much progress until...\n\n\"Oh!\"\n\nI let out an involuntary gasp as the rest of the toy sank in with a wet squelch. There was just enough left sticking out of my hole to still grab onto, but it was all the way in now. My breath came in short rasps, and it almost felt like the sensations were reverberating all the way up to my chest. My tight channel gradually became accustomed to the sensation, as my fingers moved down to my slick snatch and started to rub once more.\n\nAs I slipped one finger inside myself, the thought occurred to me that the toy, just sitting inside of me, was feeling more like a distraction than a real source of pleasure. Getting it inside was fun, but now that it was in, it seemed to be simply occupying nerve endings that would normally be responding to the sensations in my pussy. It was a bit surprising, as I had heard anal sex built up as this big thing, and was expecting much more powerful sensations. While I'd had some fun with my fingers, perhaps anything bigger just wasn't for me. Still, I thought, it was a fun experiment, at least. I grabbed the base of the toy and began pulling it out.\n\n\"Oh! Oh, wow! Wow!\"\n\nI didn't even try to stop myself from making noise this time. The feeling of the toy in motion was simply incredible. Fireworks went off on my brain, and I lost all cognitive reasoning ability. So THIS was the part of anal sex that got me going!\n\nI pushed the toy back down my hole, thankfully meeting much less resistance this time. Once it had slid in fully, I pulled it back out again, resulting in even more mental fireworks. I started to pick up speed, pulling the toy out until just the tip remained inside, then shoving it back in. After a few moments, I'd fully acclimated to the toy and was out-and-out fucking myself with it.\n\nMy other hand was busy working overtime. I'd managed to get three fingers inside myself, and was rapidly rubbing my inner walls. The angle wasn't quite working for me, though, so I pulled my fingers out, still dripping with my wetness. I gazed at them for a moment, then, without hesitation, shoved the fingers inside my mouth, tasting the tangy flavor of my pussy. It wasn't something I'd ever done before, generally preferring to wash my hands thoroughly after my previous secretive sessions, but it just made me feel so hot. Slutty, even. I knew from reading Tumblr that the word had tons of negative connotations that, as a feminist, I should be offended by, but right now that didn't matter. I was a slut. A whore, who, it turned out, enjoyed the taste of pussy.\n\nI bunched my fingers up together inside my mouth, forming as phallic of a shape as I could muster, and started working my tongue around my digits. As I continued to thrust the dildo in and out of my ass while licking the makeshift cock in my mouth, my mind began to wander. I thought about the two male baristas who worked the evening shift at the Hastings on 52nd street. I always saw them when I went in to read comics, and had idle thoughts about their cuteness before. But now, I was picturing a different scenario. I pictured going up there on a slow night when nobody else was around, maybe flashing my tits at them. They get the hint immediately and lead me to a back room, where they rip my clothes off. I get wetter and wetter as I feel their hands all over me.\n\n\"Ungf!\" I moaned around the fingers in my mouth. The pleasure in my ass was growing by the second, and I started letting out short, breathy grunts and moans with every thrust. I could feel myself getting close.\n\nI took my fingers out of my mouth, letting a trail of saliva fall onto my chest. I didn't even care. It just made me feel all the dirtier. In my mind, it was the barista, pulling his cock out of my mouth and shooting strand after strand of hot, sticky cum all over my breasts. I moved my hand back down to my throbbing mound, and started rubbing once more. Each pass over my clit sent shockwaves racing through me. My breathing became even more strained and rapid as I got closer and closer, my fingers slick with my own juices.\n\nI wanted more. I took my clit in between my two fingers and pinched. It hurt, but in a good kind of way. I pinched it again, feeling sharp stabs of pleasure reverberating through my limbs. During my occasional perusal of the more erotic parts of the internet, I'd occasionally caught furtive glimpses of the rough stuff, glancing away as soon as I saw it. I probably wasn't going to go full bore with that sort of thing, but the little bit of pain mixed with pleasure I was inflicting on myself now definitely had its appeal.\n\nI went back to rubbing myself for a bit, before giving my pussy a short, sharp slap. It felt good. I kept it up, intermittently hitting my wet quim as I continued to rapidly stroke my outer lips.",
        "Then, I felt it.\n\nMy orgasm was approaching rapidly, the pleasure building higher and higher. My asshole began to clench around the plastic cock inside of it, and I felt my muscles tense up in anticipation. My gasps had turned into grunts of wanton abandon. My fingers found their way back to my clit, and I started involuntarily rocking my ass back and forth. It felt so damn good. I was so close. So...fucking...\n\nMy breath stopped, and I fell forward into my pillow, letting out a whimper as my orgasm washed over me. My back arched, hard, as I came, my inner walls tensing as the feeling of ecstasy coursed through my body. I continued to slap my clit as sparks went off in my head. More and more of my wetness poured out as I let out a deep moan into the pillow.\n\nWith a long, heavy sigh, I fell back onto the bed, still gasping from the explosion of pleasure. I removed my hand from my soaking crotch, and bring it up to my face, breathing in the smell of my arousal. My head still awash with lust, I start licking my juices off my fingers, moving my tongue around each digit like I was licking the icing off an egg beater. My mind was a complete fog of arousal, but I managed enough presence of thought to remove the dildo that was still deep in my ass.\n\nI let out one last sigh as the toy vacated my hole. There was a funny feeling of emptiness from where it had been, and I felt just the slightest hint of the cool breeze from my ceiling fan before my rosebud closed once more. After taking a few more seconds to catch my breath, I bundled the toy up into the towel, wiped my hands on it as well, and got up, slipping on an oversized t-shirt before heading out the door.\n\nAs I washed off both the toy and myself, only one thought occurred to me: I wanted more. It was ridiculous to think that I'd been...well...afraid of sex for so long. My experiences tonight were incredible. It was as though I'd unlocked a part of myself. Sure, I'd touched myself to a few steamy fanfics, but this was something different. I wanted to be fucked. Maybe, as the still-lingering taste of myself reminded me, I wanted to fuck a girl. Either way, this was a turning point. I was aching, ready, and full of the desire to unleash my full erotic potential.\n\nI had a lot of work ahead of me. "
    ],
    "authorname": "NerdyNymph",
    "tags": [
        "shy",
        "nerdy",
        "sex toy",
        "vibrator",
        "bachelor party",
        "masturbation",
        "female masturbation",
        "anal",
        "anal masturbation"
    ],
    "category": "Toys & Masturbation",
    "url": "https://www.literotica.com/s/unlocking-tally-ch-01"
}
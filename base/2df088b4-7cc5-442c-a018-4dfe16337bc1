{
    "title": "Pool Bet Ch. 03",
    "pages": [
        "[This is the long-delayed third chapter in a series I started more than five years ago. The two previous chapters are my highest-rated work on this site, and I hope I've kept up the quality in this installment. There's enough context here for this to stand alone, I think, but if you want to start at the beginning, you'll find the first two chapters, along with a few other submissions, at https://www.literotica.com/stories/memberpage.php?uid=1354783&page=submissions Hope you enjoy! - TD] \n\n*****\n\nI finally caught the barkeep's attention. The restaurant bar wasn't busy, and I was a little annoyed that it had taken so long to get another beer -- but I caught myself before letting that show, because I knew what I was really annoyed about. I was supposed to be on a date, my first real date since my wife and I split up seven -- no, eight -- months ago. But she was half an hour late, no text, no call, nothing. I'd been planning to leave after my first beer until the barkeep changed channels to put the Red Wings on. I figured I might as well watch the first period in the bar and then head home during intermission to catch the rest. So I wanted that second beer.\n\nI was just about to order some wings to go with it when I heard Dan's voice. \"Steve? Hey, what's up, buddy?\"\n\n\"Hey,\" I said. It probably sounded more sullen than I felt.\n\n\"Get stood up?\" he asked.\n\n\"Looks that way,\" I said.\n\n\"Aw, man, I'm sorry.\"\n\nI shrugged. \"Not that big a deal, really. I mean, I was looking forward to it, but it was just dinner.\"\n\n\"Man, Nikki really messed you up, huh?\"\n\nI gave him a quizzical look. \"Whaddaya mean?\"\n\n\"When you met Nikki, and about a half-dozen girls before that that I know about, you had half your lives together planned out before the first date.\"\n\nI laughed. \"Yeah, I did, didn't I? I was an idiot.\"\n\n\"No, you're a romantic. Or were,\" he said. \"Your first date after your divorce, and it was 'just dinner'? That's what I mean: Nikki really messed you up.\"\n\nI thought about that for a minute. \"Well, Nikki hurt me, I can't deny that. But I hope it was 'just dinner' tonight because I'm smarter, not because I'm damaged.\"\n\n\"Keep tellin' yourself that, man. To me it just means whoever this fool is who stood you up tonight isn't the one.\"\n\n\"Thanks, man, I appreciate that. But aren't you and Melissa supposed to be having a date night?\"\n\n\"Yeah, she's at our table. Wanna join us?\"\n\n\"Naw. You guys don't get a night away from the kids very often, you should enjoy it.\"\n\n\"We'd still enjoy it if you joined us. And I don't want you sitting here feeling sorry for yourself.\"\n\n\"I'm fine, really.\" And I actually meant it. \"Go enjoy dinner with that beautiful wife of yours.\"\n\n\"You sure?\"\n\n\"Go,\" I said. \"I'm missing the game.\"\n\n\"All right, man. See ya.\"\n\n\"Later,\" I said, and turned back to the TV. Two minutes hadn't gone by yet when I heard my name again, from a different but still familiar voice.\n\n\"Hi, Steve,\" Melissa said. I turned to look as I said hi, and I didn't look away. Not many guys look away from Melissa when they see her; for that matter, not that many women do either. She's astonishingly beautiful in that girl-next-door kind of way that sets men's hearts beating like no beauty queen ever will, and if you once lock your gaze with those arresting green eyes of hers, you don't want to look away, ever. Especially if she's smiling at you, looking happy to see you, as she was to me right now.\n\n\"What's this nonsense about you not joining us for dinner?\" she said.\n\n\"Like I told Dan, I don't want to get in the way of your date night. Go enjoy yourselves!\"\n\n\"And leave you here by yourself?\" she asked.\n\n\"I'm fine, really,\" I said. \n\n\"I know you are,\" she said. \"In fact, the last couple times I've seen you, you've seemed happier than you've been in a long time.\"\n\n\"I am happier than I've been in a long time,\" I said. And I meant that, too. Finally getting away from Nikki's constant negativity felt like your first breath of pure air after being cooped up in a car for six hours with a farting dog. Sure, you can roll the windows down and get a little relief, but you just know another one's coming, and you know it'll be as foul as the one before it, you just don't know how soon. So you never really relax, y'know? Now I could breathe, and it felt good.\n\n\"I like it,\" Melissa said, smiling dazzlingly at me. \"So come join us already.\"\n\n\"You know it's really hard to say no to you when you smile at me like that,\" I said.\n\nHer smile didn't change, but a hint of triumph crept into her eyes. \"I know,\" she said.\n\nI took a swig from my beer and pretended to think about it, but she knew she'd won. She grabbed my hand, turned and started walking. So I got down and walked behind her, enjoying the view the whole way to their table. \n\n\"What, my invitation wasn't good enough for you?\" Dan said when we got there.\n\n\"She's a lot harder to say no to than you are, buddy,\" I replied.\n\n\"I know that's right,\" he said as Melissa slid into the booth next to him. I slid in on the other side. Dan had already ordered a bottle of wine, a pretty good Cabernet, and a waitress was there in a jiffy with a third glass. Dan poured me some, we ordered, and we laughed and talked our way through a good meal. \n\nOver dessert, I asked them what they had planned for the rest of their date night.\n\n\"We haven't really decided yet,\" Dan said. \"We were gonna talk about that over dinner, but ...\" He trailed off.\n\n\"Oh, I know exactly what we're doing,\" Melissa said with a saucy look aimed straight at me. \"You're coming home with us as soon as we pay the check.\"\n\n\"First of all, I'm paying,\" I said. \"And second, no way. I know you guys don't get time without the kids very often, and I've taken more of it than I should have tonight.\"\n\n\"Don't disappoint me,\" Melissa said, still saucy, before excusing herself to go to the restroom.\n\nDan and I both watched her walk away until she turned a corner and disappeared from view. Then he turned to me and said, \"Seriously, dude. Don't disappoint her.\"\n\n\"Really?\" I said. \"I mean, I know it'd be fun, but isn't the whole idea of date night to keep the romance alive?\"\n\n\"Dude, I don't think you understand,\" he said. \"Since the three of us started, uh ...\"\n\n\"Playing together?\" I filled in.\n\n\"Yeah, since that, she's been amazing. She's giving me head a lot more often, she's acting all playful, she's been an animal in the bedroom -- and not always in the bedroom. And it's not just sex, either; she's cooking more instead of just heating up frozen stuff, made my favorite meal twice last month -- hell, I swear the house is cleaner, too. It's like she's re-energized.\"\n\n\"That's great, man! I'm really happy for you,\" I said. \"So go enjoy that.\"\n\n\"You still don't get it,\" he said, and he leaned forward and his voice dropped to a whisper. \"I LIKE sharing her with you, man. Not just the changes in her because of it, but the actual thing too, OK? I mean, if you ever try to go behind my back with her, I'll kill you, but as long as I'm part of it? Whenever you want, man. Whenever you want.\"\n\n\"Did you talk some sense into him, lover?\" Melissa asked as she returned to the table and slid into the booth on my side this time. She dropped something in my lap and put her hand on my thigh under the long tablecloth. I looked down to see a pair of lacy panties in a shade of green that almost matched her eyes. I shot her a look; she avoided my gaze but pushed her leg up against mine.\n\nI put my hand under the table and found her thigh just below her skirt and left it there. She moved her hand from my thigh to my hand and pulled it higher, and that was enough invitation for me. I kept moving it up her leg, slowly, until my pinky finger brushed her soft folds. A little farther and I could slide my middle finger between her lips, and her sharp intake of breath when I lightly grazed her clit brought Dan's attention back from trying to make eye contact with the waitress. \n\nThen I slid my finger back down to discover that she was already delightfully damp. I curled my finger inside her, prompting her to close her eyes and go a little limp. I pulled my finger out and brought it up above the table, looked Dan straight in the eye, said, \"Dude, did you know your wife's not wearing any panties?\", and sucked my finger clean.\n\n\"Check, please!\" Dan practically shouted as a waitress passed by. She wasn't our waitress, which made it funnier, and he reddenned a little but joined Melissa and me in laughing about it -- and right then I knew we were going to have another great sexcapade.\n\nMelissa took my hand and brought it under the table again, and I kept lightly caressing her inner thigh way up high, with occasional brushes against her lips, until the check came. Dan and I argued good-naturedly about it, but when I started to reach for my wallet with the hand I'd been caressing Melissa with, she grabbed it and said, \"Uh-uh. That hand's busy.\" So I let him pay.\n\nWith the paperwork finished, I reached up a little higher and gave Melissa's pussy a little more direct attention as I said, \"Shall we?\" She squirmed a little and said, \"Definitely!\"\n\nWe left the restaurant, they got in their car and I got in mine, and I followed them toward their place. They made a light I had to stop for, and when I got to their place Dan met me at the door just as Melissa came out of the bathroom. She smiled brilliantly at me and said, \"Want a drink?\"\n\nI said, \"No,\" as I closed the gap between us with two quick strides, wrapped her in my arms and kissed her hungrily, then picked her up and carried her toward the stairs. Looking over my shoulder at Dan, I said, \"You coming?\"\n\n\"Not yet, but I'm damn close already,\" he said. Melissa buried her head in my shoulder as she giggled, and I laughed too as I started up the steps. She swung lithely out of my arms as we reached their bedroom and landed lightly on her toes, put her hands on my face and returned my hungry kiss. As Dan came in, she reached one hand out for him, grabbed a fistful of his shirt and pulled him over, then switched from kissing me to kissing him while she started unbuttoning my shirt. When she struggled a little to take my shirt off without breaking her kiss with her husband, I wriggled out of it myself, and she promptly switched her kiss back to me and started working on Dan's shirt. When he was bare-chested too, she unbuckled his belt, unbuttoned his pants, and pushed them and his shorts down, and from the corner of my eye I saw his cock spring free, already semi-erect.\n\nIf you've never had a gorgeous woman kiss you while she strokes her husband's cock, I highly recommend it.\n\nShe didn't do that for long, though, before she switched her kissing again and got my pants and shorts down too. Dan and I both managed to step out of our shoes and free ourselves from the pants around our ankles while she kissed him and stroked my stiffening cock.\n\nWhen she switched her kiss back to me, Dan stepped behind her and unzipped her dress. And yeah, if you've never had a gorgeous woman kiss you like she means it while her husband unzips her dress, I highly recommend that too.\n\nShe pulled her arms out of the sleeves of her dress and it fell to the floor, leaving her with nothing on but a bra. As I gazed appreciatively at her breasts, I noticed the bra was a front clasp and made quick work of it so we were all naked.\n\nShe reached behind herself, seized Dan's cock, and led him around her until he was beside me, and then she slowly knelt down, running one hand down his chest and the other down mine until she reached our cocks, and then she started stroking them in unison. She looked up at us and said, \"Must be my lucky night!\" \n\n\"I was just thinking the same thing,\" I said, smiling. My smile changed as she took my cock in her mouth and gave me some wonderfully slow strokes, keeping the same pace with her hand on her husband's pole. Soon she switched, stroking my glistening rod while swallowing his.\n\nThen she pulled back, took his cock in her hand again, and pulled him and me toward each other until the tips of our cocks were touching. Starting at the base of his dick, she corncobbed him all the way up and then kept right on going down mine, then back up mine and down his, and back up his. But she stopped in the middle this time and tried to corncob both of our heads at once. I felt her tongue flicking on and off my frenulum and knew Dan was feeling the same thing.\n\nMelissa moaned happily as she stopped her oral ministrations. Stroking us both and rubbing the heads of our cocks together, she looked up at us again and said, \"Some day I want to just keep doing this until neither of you can take it anymore.\"\n\n\"Fine by me,\" Dan said. \"Me too,\" I said, smiling again.\n\n\"But not tonight,\" Melissa said, looking at me. \"Tonight I'm hoping you'll try what you talked about last time.\"\n\nMy mind snapped back to our last get-together, when Dan had agreed to Melissa's request for an hour alone with me and then, very reluctantly, cleaned up my creampie from her, all because he wanted two mouths on his cock at the same time. And I remembered what I had suggested when they asked if I had ideas for next time -- which was now this time.\n\nNodding, I said, \"Reverse cowgirl or doggy style?\"\n\nWith a mischievous look, Melissa said, \"Yes.\"\n\nChuckling, I said, \"Greedy little slut, aren't ya?\"\n\n\"You two bring it out in me,\" she answered, pushing Dan backward toward the bed. She kept pushing until he flopped back onto it on his back, and then she confused me by lying down beside him on her back. My confusion vanished when she looked at me with that lusty look that makes me willing to do anything for her and said, \"Mind getting us both ready?\"\n\nI did not need a second invitation, and with no more foreplay than sliding my hands up her bare shapely legs on the way, I buried my face in her pussy. I licked and sucked and flicked my tongue all over and reveled in the smell, taste and feel of her, especially as her hips started rocking slowly. But before I could bring her over the edge, she pushed my head up with her hands and said, \"Mmmm, that's enough for me. Now him.\"\n\nI didn't need a second request for that, either. If you want to say that makes me gay or bi, go ahead and say it, I don't care. All I know is that I liked sucking his cock for her. I looked over at his cock, which was mostly soft, and I crawled across her left leg and his right until I was between his legs instead of hers. Then, looking directly at her, I picked up his member with my mouth, took all of him inside quickly the way I used to love my ex-wife doing when I was soft, and just held him in my mouth, working my tongue on his shaft as best I could.\n\nMelissa writhed beside him and quickly piled some pillows behind her so she could have a good view while still relaxing. Then her hand was between her legs, and she diddled herself as she watched.\n\nI felt Dan stiffening and struggled to keep all of him in my mouth as the head of his cock hit the back of my throat. I relaxed my throat and felt him slide even further in as his erection grew to its full 7 1/2 or 8 inches, and then I gagged a little. That made me lose part of him, but as soon as he was out of my throat I closed my mouth around him again and worked my tongue on him as I pulled slowly back. I pulled all the way off so Melissa could see my tongue trace circles around the head of his cock and flick the oh-so-tender spot on the bottom, and then went slowly back down, never taking my eyes off Melissa -- her lusty gaze, her fingers on her sex, her lusty gaze again. \n\nI came slowly back up, using my tongue the way I like a woman to use her tongue on me, and came all the way off again, intending to give Melissa another show. This time I got a quick taste of precum, so I milked Dan's cock with my hand to produce a bigger drop, licked it right off the tip, and savored it with my eyes locked on Melissa's.\n\n\"I think he's ready,\" I said to her.\n\nThis time she was the one who didn't need a second invitation. She tucked her legs to one side, raised up on her knees and lifted one leg over him to straddle his hips, facing me. I held his cock as she lowered herself onto it, letting out a long, slow moan as she felt his fullness.\n\nShe took his full length, forcing my hand out of the way, and then gave me a show, rocking her hips back and forth on him. Then she leaned back, and I knew that was my cue. Starting from Dan's ball sack, I licked straight up slowly, along his shaft and then up her lips to her clit. When my tongue first hit her joy spot with his cock hard inside her, she said softly, \"Ohhhhhhhhh, fuuuuuuuuckkkk ...\"\n\nDan started rocking his hips, sliding in and out of her. With the tip of my tongue, I found the spot where the two of them became one and I could lick his shaft and her lips at the same time, and I flicked my tongue from there up to Melissa's clit and back again, trying to match the pace of Dan's thrusts.\n\nThose thrusts were rapidly becoming more urgent, and Melissa's hips were starting to rock too. They mistimed each other a bit and suddenly his cock was out and between my tongue and her. Without hesitation I took him into my mouth again, savoring the taste of her sweet pussy on his hard cock. I gave him two or three strokes, my tongue pressing and twisting, then turned my attention to Melissa, licking her wetness straight from the source, before guiding him back into her.\n\nThe brief break seemed to renew Dan's stamina, and he began some long rythmic stroking at a medium pace. I did my best to keep my tongue on both of them, but Dan's thrusts were hard enough to make Melissa bounce a little. Finally I just held still and let them both move against my tongue; this had the added benefit of bringing Melissa's clit to the tip of my tongue on every downstroke, and I could tell by the pleased little noises she let out each time that she enjoyed that as much as I did.\n\nDan's pounding intensified, but Melissa said, \"Don't come yet, baby, I want to doggy.\" He lowered her all the way down on him one more time and then let go of her hips and relaxed. She spun off of him and was on her elbows and knees faster than I would have thought possible. I could tell Dan was still coming down from the edge, and the view Melissa was giving me was too inviting to pass up, so I licked her slit from behind, going all the way up to her ass. I had never rimmed anybody before, or wanted too, and actually I went a little farther than I meant too -- or maybe Melissa rotated her hips a little, I'm not sure -- but she said, \"Oh my gawwwwwddd\" when I got there, so I stayed a while and paid her asshole proper attention. \n\nDan finally sat up and got off the bed, and I knew he would be heading for where I was, so I lightly tongued my way up between Melissa's cheeks and found a delightfully sensitive spot just at the very top of her crack, and I was still licking that spot lightly when Dan knelt on the bed beside me, nudged me and said, \"Slide over, dude.\"\n\nMelissa said, \"No, slide under, stud. With your cock up here under my mouth.\"\n\nWell, that took a little arranging. Melissa raised up on her left arm so I could get underneath her, but my head was at her stomach, so I wriggled around until I could put my feet on the headboard and then pushed myself toward the foot of the bed until my mouth was below her beautiful pussy. Looking up, I saw Dan, who had sat back on his heels waiting for us to get in position.\n\n\"I'm gonna need a pillow,\" I said, realizing I was too low to lick anything. Melissa swung one around to me, and I stuffed it under my head and shoulders until it raised me up enough to put my tongue and mouth on her without much effort. Simultaneously, Dan raised up on his knees, which meant that pretty much all I could see besides the curve of Melissa's butt was his ball sack and mostly softened cock. He started stroking it to get hard again, but I tipped my head back and said, \"Give it here.\" He aimed it into my mouth, and I worked my lips and tongue on him some more; he quickly stiffened, and I realized that this angle was very different. My throat was straighter and it was easier to take him deeply -- which was good, because at this angle he was in total control of how deeply he went it, and he went in as far as he could, twice, before pulling out and aiming at Melissa's pussy.",
        "I had to catch my breath a little after that, but the sight of him parting her labia with his cock head and her lips being pulled in as he slowly penetrated her was, um, invigorating to say the least. I watched, mezmerized, as he plunged all the way into her and then slowly back out, watching her glistening lips move in and out with his rod. On his next stroke, I raised my head and tongued her clit. She said, \"Unf!\" and then I felt her hand lifting up my cock and then her mouth and tongue on me.\n\nDan's rod rubbed along my nose. His sack dragged across my forehead and my eyes. I didn't care. I loved everything about it: The taste of her, the smell of sweat and sex, the feel of Melissa's butt as I cupped and squeezed it, the feel of her mouth on my cock and her breasts on my stomach, the sights and sounds of Dan sliding in and out of her and her juices glistening on both of them -- and I just reveled in all of it. I realized later that the sensory overload had improved my stamina, and I filed that fact away, hoping it might come in handy again some day.\n\nI have no idea how long that lasted; it could've been 2 minutes or 20 minutes. At one point I thought I was going to come, but Melissa must've sensed it too because she let my cock slip out of her mouth and kissed and licked my thighs and balls for a while before resuming her ministrations.\n\nIt was shortly after that that Dan's sack tightened and he sped up his thrusting. Melissa began grunting with each thrust while still keeping her mouth and tongue busy on my cock. I knew she was trying to come with Dan and I did everything I could to help her, flicking my tongue across her clit and trying to keep time with the thrusts. I felt Dan's cock pulsing against my nose and knew he was spilling a big load into his wife, and still I kept on licking. Somehow Melissa never took her mouth off my cock as she screamed through a shattering orgasm.\n\nFinally Dan thrust hard into once more, elicting another grunt from Melissa, stayed in, and half collapsed onto her back. And still I kept on licking.\n\nI could feel more than see his cock softening, and soon it slipped out -- followed by a giant glob of his cum, which drained straight into my mouth. At my angle, it slid right to the back and I swallowed reflexively. And now Melissa stopped sucking me. Looking down my body under hers, I saw that she was watching me between her legs. I knew what she wanted to see, and I obliged, twisting my head just enough to get Dan's limp cock aimed at my mouth. Lifting my head, I got the head of his shaft in my mouth and sucked it hard. That got a surprised grunt from Dan, and he straightened up, then spread his knees a little farther to lower himself. I happily took his full length into my mouth -- easy now that he was soft -- and licked and sucked him for several strokes.\n\nThen I let him go, smiled at Melissa between her legs, and buried my face in her sweet, sticky wetness. As I sucked her mound like a peach, I got several more globs of Dan's cum, and I swallowed it all and kept on going. She took my cock in her mouth again and began bobbing up and down fast and deep, still working her talented tongue in ways I don't fully understand. Soon her hips were rocking again and she ground her pussy into my face. I grabbed her butt cheeks and pulled her even tighter, trying to keep my tongue as busy as hers was. \n\nI've never felt studlier than I did when I made her come on my face before she made me cum in her mouth. She shuddered and moaned for a long time, and just when I thought her orgasm was finally ebbing, she said softly, \"Oh my god ...\" and bucked hard against my face some more. As she relaxed again she went back after my cock with a vengeance, and I exploded in her mouth, shooting jet after jet of hot cum down her throat -- or so I thought.\n\nI had barely finished when she spun around to face me and smiled at me with closed lips. Reaching between her legs and mine, she grasped my cock around the base and squeezed, keeping me hard enough to lower herself onto it. Removing her hand, she began rythymically clamping down on my shaft without otherwise moving. I didn't know if I could stay hard enough to stay inside her, but it felt great so I went with it.\n\nDan moved over and began fondling her beautiful, firm breasts and leaned in to kiss her. She grabbed his cock with one hand and the back of his head with the other and held him tightly to her open mouth, which I'm sure is the first time he realized that her mouth was still full of my cum. I saw him try to pull away at first, but she held him close and in a few seconds I saw him decide he didn't care, and they kissed passionately, sharing my load. When a little bit dribbled down Melissa's cheeck, he even licked it up and kissed her some more. And all the while, she somehow kept up that rythymic clamping.\n\nI was idly caressing her thighs and hips, occasionally brushing a thumb across her joy button, when I realized that the sensation and the scene were actually working; I had a chance of getting good and hard again without ever really going soft. Melissa obviously felt this, because she started rocking her hips just a little, clamping me hard as my cock slid outward a few inches and then easing up as it slid back inward.\n\nIt was when she finally released her hold on the back of Dan's neck and put that hand behind her to start caressing my taint and balls that I got convincingly hard again. Holding her hips, I encouraged her to rock more seriously, and she quickly got the hint. I've always loved fucking this way, woman on top and just rocking back and forth, partly because it's easier for me to prolong the action than some other positions and partly because of the view -- and when the view is Melissa, trust me, it's fantastic. \n\nI lost track of time again. After a while, I realized that she was intensifying, and just as I was about to start rubbing her clit, she leaned forward over me and switched from rocking her hips to moving her whole toned torso back and forth, slowly for a couple of strokes and then faster and harder once she knew how far forward she could go and still keep me firmly inside her. She changed motions now and again so we could kiss, and although I had all but forgotten about Dan, I wasn't surprised when he started poking the side of our kiss with the head of his cock, which was still mostly soft from his orgasm. I remembered how much he had enjoyed having two mouths on his cock at the same time -- who wouldn't? -- and clearly he wanted it agin.\n\nMelissa and I obliged, about equally happily, I think. She lifted her head enough for him to slide his pole between our lips, and we each put our lips on him and let our tongues dance with each other as he slowly thrusted and slowly stiffened.\n\nWhen he was good and hard again, Melissa turned her head and sucked him in, taking his whole length quickly and then slowly working her way back off. She lingered on the head a little, then used her mouth to push him toward me. I gave him the same treatment; the sideways angle was awkward, but I managed it and then pushed him back toward her. We traded him back and forth several times this way, Melissa gently rocking her hips on me all the while and keeping up that amazing clamping and releasing.\n\nAt one point as she was worshipping his head before giving him back to me, I moved a little and started tonguing his shaft. Almost immediately, he said, \"Fuck yes! Fuuuuuuuck yes!\" Without communicating, Melissa and I both knew we should keep on doing exactly what we were doing, and we did. Very quickly, I felt his urethra pulse under my tongue and knew he was filling Melissa's mouth with cum. His cock dragged across my lips and tongue as he pulled out, softening, and collapsed beside us on the bed.\n\nMelissa smiled down at me with her lips closed, and I knew what was in store for me. She lowered her whole body onto mine, her breasts compressing warmly against my chest, her hips still, but still that clamp-and-release, better than any other woman I'd ever been with -- and she kissed me. Even though it was Dan's second load of the night, there was a lot, but I was prepared for it and didn't let it slide all the way back where I would have had to swallow it, because I wanted to play with it with her like we had last time.\n\nJust like last time, the taste didn't bother me, but the texture was unpleasant at first and I felt a gag reflex building. But Melissa was still kissing me, and I concentrated on how amazing it felt to be lying with her like this, and soon the texture didn't bother me anymore. I'm still not sure if that's because it changed as we kissed with it, mixed it with our saliva and swallowed some or if I just got used to it, and I guess I don't really care.\n\nEventually she started moving more, sliding her body up mine a few inches and then back down, and it became harder for us to keep kissing. I'm sure I had more than half of Dan's load in my mouth when she finally broke it off, and I swallowed it without complaint and then curled myself a bit so I could reach her left breast with my mouth. She adjusted her position to give me better access, and as I sucked her deliciously firm mound she got serious about her other movements.\n\nI traced abstract shapes on her back and butt with my fingertips, occasionally brushing that super-sensitive spot at the top of her cheeks and eliciting increasingly urgent moans each time. \n\nThen I felt the back of Dan's hand sliding up my shaft. This surprised me; although he was incredibly generous with his wife and had apparently decided he was OK with eating my cum from his wife's pussy or mouth, he was still clearly uncomfortable with paying any attention to my cock, and I wondered what he was up to. He slid his hand up until a finger was inside Melissa's pussy along with my cock. Then he pulled it out, and less than a second later Melissa stiffened sharply and gasped. Recovering herself and relaxing again, she looked over her shoulder at her husband and said, \"Warn a girl before you stick your finger up her ass, wudja?\"\n\n\"Your reaction wouldn't be as much fun that way,\" he said, smiling. \n\nShe looked back at me, biting her lower lip, and said huskly, \"Fuck me back now.\"\n\nOnce again, I did not need a second invitation. I grabbed her hips and began thrusting up into her with short, rapid strokes. Her grunts and mine synchronized as we built toward the peak, and she shuddered and moaned deeply as I exploded inside her. After a few small thrusts neither of us could control, she collapsed on me, shuddering again as Dan withdrew his finger.\n\nWhen our mutual heavy breathing had subsided, she said wearily, \"I'd love to have you clean me up again, but I don't wanna move.\"\n\nI was exhausted, but I did not like the idea of disappointing her, so I said, \"Shall we roll over?\"\n\nShe responded with mumbled acceptance, so I rolled us over, managing to stay inside her. Then I pulled out slowly, earning another little shudder from her as we separated. I had planned to work my way down her body slowly, but I'd gotten only just past her collarbone when she said, \"I'm going to drip!\" and pushed my head downward. Sure enough, as soon as I got there I could see a glob of my cum at her entrance, and as I watched it began dripping out. It moved faster than I expected and was on her taint before I got my tongue to it. I licked from there all the way up to her clit, then smiled at her while showing her my coated tongue and kept smiling as I swallowed.\n\n\"There's more,\" she said. This time I just buried my face in her sweet wetness and tasted her, myself and us -- and probably still some of Dan, for that matter. As tired and spent as I was, I love eating a beautiful woman's pussy and had already discovered tonight that I don't love it any less when it's full of cum, so I gave it my best and stayed at it for probably 10 minutes. About midway through, Dan roused himself enough to start sucking one her breasts and playing with the other one. \n\nThen I heard her say, \"No way.\" I made a questioning noise without stopping, and she said, \"No fucking way.\" A few seconds later, \"There is NO WAY you're going to make me come again.\" She was breathing deeply. \"No fucking way. No fucking way.\" Then she grabbed the back of my head and pressed me into her, hard. \"Oh my god you're fucking kidding me. No. Fucking. WAY.\" Gasping now, with almost animalistic grunts: \"You're. Going. To. Make! Me! CUUUUUMMMMMM!\" No bucking hips this time, just her whole body tensing, shivering for an endless moment, and then going rag-doll limp.\n\nI scooted up a little so I could rest my head on her stomach; she pulled one knee out to the side to make room for me before we all fell asleep.\n\nI woke up hours later needing to pee. I pulled the sheet and a light blanket over the two of them, found my boxers and slipped them on, did my business and then crashed on the couch downstairs. \n\nI woke up again another few hours later to the sound and smell of bacon frying. I padded sleepily into the kitchen to find Melissa there wearing nothing but my dress shirt, with only a couple of buttons in the middle done up.\n\nShe gave me a reproving look and said, \"Why were you sleeping on the couch?\" I told her why I'd gotten out of bed and said I hadn't wanted to disturb them coming back, but she said, \"Next time, you come back to our bed. Understand?\" The way she said \"our bed\" made it clear she meant all three of us, which gave me the warm fuzzies -- and a little tingle between my legs, too. \n\n\"Next time?\" I said.\n\n\"Oh yes,\" she said as she handed me a carton of eggs and fetched a frying pan. \"Next time. Soon, too.\""
    ],
    "authorname": "tonyd1509",
    "tags": [
        "group",
        "group sex"
    ],
    "category": "Group Sex",
    "url": "https://www.literotica.com/s/pool-bet-ch-03"
}
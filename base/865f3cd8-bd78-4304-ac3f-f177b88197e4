{
    "title": "Getting Past Guilt",
    "pages": [
        "When I got married, I had spent four years with my partner, but we had not once had a truly honest conversation about our sexual fantasies.  We\u2019d try, but then get embarassed or would tell only part of what we were thinking out of fear of judgement.  To be honest, I\u2019m not even sure we knew enough about our own fantasies to express them to each other, much less to start negotiating way to incorporate them, and their power to make us feel really nasty in a good way, into our sex life.  Over the last five years, we have actively worked to overcome the barriers to our communication, and our sex life is better, hotter, and more mutually satisfying than ever.  And, the benefits reach into other areas of our partnership--it\u2019s tough to be cranky with someone who made you cum for an hour the night before, and it\u2019s harder to judge or be insecure about someone who knows your most secret sexual self and loves you more, not less, for it.\n\nBased on what I\u2019ve seen in life and on the internet, an awfully lot of people are searching, often unsuccessfully, for sexual fulfillment.  In that search, espeically on the \u2018net, many spend some portion of their time consuming sexually explicit materials, words and images meant to get you turned on and fantasizing about sex.  For some, porn acts as a substitute for a partner and provides masturbation material--arousal based on imagining one isn\u2019t alone with their desire.  And, in that capacity, sexual materials are utilitarian tools, the vehicle in which we drive toward release.   For some people, even those with partners, the wide range of sexual words and images serves as a way to experience the fantasies that many (or most) can\u2019t imagine having in their real life--power games, bondage, promiscuity, group sex, total control or lack of it, sex with \u201cinappropriate\u201d people like authority figures, religious leaders, and even relatives.  And this is where things start getting complicated and the lines of communication break down, creating misconceptions and bad feelings.\n\nIn pursuit of sexual fulfillment, I suggest that we engage in a dialogue with our fantasies.  First,  we must learn to recognize sexual fantasy in our selves, our activities, and our culture.  Second, by looking at how we feel about sex, and questioning the inner voice that makes us feel fear, shame, and guilt about sex we can start looking for its sources.  Then we can decide for ourselves whether or not those messages are appropriate to our lives and our world and make some informed choices about sexual fantasy and behavior.  And finally, we can overturn some of the false assumptions about fantasy and its relationship to real life by learning to communicate our fantasies to our sexual partners honestly, and to hear theirs without judgement.\n  \nSeeing Fantasy & Denying Reality\nIn other, more coded forms of expression, we can make excuses to ourselves about what we like and what it says about our fantasies:  romance novels are about \u201ctrue love,\u201d not being aggressively fucked; the public is \u201cappalled\u201d by violence, even if each movie-of-the-week about abuse dwells in loving close-up on every blow, every bruise, and every tear; and empowered women certainly don\u2019t secretly dream of fucking Daddy, so if fifty year old men continue to date twenty year olds, those girls must be gold-diggers or victims--in other words, deviant and wrong and not like \u201cus,\u201d right?   Sure.  And all those things have their place in our individual and cultural lives.  They can even be a step toward realizing sexual desire--nice suburban mothers can read romance novels without fear of censure or worrying about harming her kids, and she can still enjoy the sexual fantasy, even if the writing and the sex are masked under flowery language and coyness substitutes for real foreplay.  But they do nothing to substantially increase long-term sexual pleasure because they do nothing to make us confront our own ambivalence out sex--it\u2019s the one thing everyone has in common, and the subject we\u2019re least able to be open about in our personal lives and media-centered culture.\n\nErotica, on the other hand, puts the fantasy right out in the open, where we can no longer deny it.  Thus, pornography makes us feel guilty; it is, in fact, the very definition of a \u201cguilty pleasure.\u201d  It\u2019s the magazine you\u2019re wanking to when Mom walks in and you\u2019re both mortified, the bound and gagged victim the feminist imagines herself as to get off, the desire to feel firm flesh filling his ass that makes a straight man question his identity and react with homophobia, the button-nosed pixie of a nice girl who also loves to fuck both men & women, and isn\u2019t afraid to do so.  It\u2019s our shadow self, the steamy jungle of the forbidden, a living contradiction: pornography and sexual fantasy more generally create a place where we can drop our social roles--gender determinations, various roles of responsibility and authority, and all varieties of  \u201cnormality\u201d and \u201cacceptability\u201d in pursuit of orgasm--and still be able to pick up those roles again after we come.\n\nBecause of this, watching or reading erotica/pornography (a distinction I find wholly arbitrary and meaningless) touches on the taboo: particularly in a cultural climate as anti-sex and rabidly anti-porn as the U.S., seeing or reading sexual fantasy and description invokes our most deeply hidden desires, the ones that for various reasons make us feel vulnerable to judgement and intensely guilty, and it turns our mixed emotions into sexual excitement.  It makes us hot, but what it doesn\u2019t do is make us feel good about it.\n\nRaising the Stakes: Recognize & Question Authority\nTrying to contain sex and fantasy, telling people what to desire and how, when, and with whom they can have it, informs the social and political agendas of a wide range of groups; looking at the shared censorship goals of some divergent camps tells us a great deal about fear of sexual expression and the desire to repress sexual fantasy.  Years after the Meese Commission spend thousands of hours looking at every possible variant of pornography--just to prove to themselves how horrible it was by looking again and again--the cultural understanding of sex remains stubbornly riddled with paradox: even the most avid smut collector probably hasn\u2019t amassed, or even seen, nearly the quantity of porn that censorship campaigners have.  It\u2019s a drama many have exploited to make their name as public figures (Andrea Dworkin, for example) or to establish themselves as \u201cpro-family\u201d politicians.  And now the picture starts to develop.\n\nMisguided pro-censorship feminists have formed a troubling alliance with repressive-minded Christian conservatives in loudly denouncing the sexual fantasy represented in pornography, most commonly most aggressively targeting the fantasies which deviate most sharply from their view of \u201cnormal\u201d sex.  You know normal sex, right?  It\u2019s got a lot of names--straight, vanilla, mutual, and even clean are common descriptors; more telling, though, is the name associated with the ultimate expression of this kind of sex--\u201dMissionary style.\u201d  In case the name doesn\u2019t already give it away, the implication of this kind of public discourse is that this narrow window of possibility is the only kind of sex church officials (and by extension, God himself) endorse--monogamous and straightforward vaginal intercourse between married partners, aimed toward procreation more than pleasure, and if not actively denying then certainly unconcerned with female orgasm.  The two camps have built their temple of purity on top of a long history of sexual repression and religiously-rooted cultural taboos, and have managed to make sex even more complicated than it has to be.\n\nSo, \u201cnice girls\u201d don\u2019t do anal, \u201creal men\u201d don\u2019t play with each others\u2019 cocks, \u201cstrong women\u201d don\u2019t want to be forcefully taken, and \u201cgood Catholics\u201d never wonder what Father\u2019s got hidden under his vestments.  By taking our fantasies and making them forbidden, political groups in search of power and specialists in search of money colonize our minds and control our bodies--letting homophobes, churches, psychiatrists, feminists, 12 step programs, and even the government take away our ultimate freedom of expression, sex and bodily pleasure.   These groups gain power by making us feel bad about our desire, and their spheres of influence overlap and reinforce each other--church-sponsored guilt about \u201cdeviant\u201d sex finds another support in (and also supports) sodomy laws and provides curious justification for the state denying gay marriage the property-rights and other protections accorded to straight marriage under the law.  \u201cCurious,\u201d that is, in a nation that prides itself on having squashed religious persecution by virtue of separating church and state.  These things are not just coincidences, and they don\u2019t \u201cjust happen.\u201d\n\nMindfuck: the (Mis)creation of Sexual Guilt\nThis power over individual\u2019s minds and bodies isn\u2019t necessarily created with exploitively Machiavellian intent, enacted by evil people with evil plans; often, we adopt these models with the best of intentions--to protect physically defenseless children from violence, to help ensure that women are culturally valued as more than mothers and whores, to discourage emotionally immature teens from rushing into actions which carry potentially serious and permanently life-altering consequences.  But, the teaching of these models comes to shape our identities and mold our perceptions of ourselves in potentially damaging, and always restrictive, ways.  For instance, church officials (in some religions) tell us that birth control is wrong, and they justify it by quoting Biblical text (though I doubt Eve could have gotten a diaphragm, even if she wanted one) and invoking the ultimate fear of judgement and punishment, the wrath of God.  \n\nDivine judgement represents the totality of our fears--God is the Father (family), the Creator and thus source of all truth, and the ultimate authority figure who metes out eternal punishment and whose judgements are always, as a matter of dogmatic law and principled faith,  true and just by definition.  I\u2019m not qualified, as I lack the Red Telephone to the Almighty, to question either the sources or the speakers who speak for God on the issue of  birth control, but I suspect it\u2019s more than coincidental that denying birth control to the converted helps to keep a religion\u2019s membership roster growing.  In terms of creating and sustaining the socio-political power of such religions, more children in the world (to protect and educate) is good, but more indoctrinated, obedient and tithe-paying church members is even better.  It\u2019s a little unsurprising, then, when churches lead the way in pushing for monogamous, married, procreative heterosexuality and the repression of all other sex.\n\nStruggle vs. Submission: Communication as Resistance \nGuilt has real consequences and can cause real emotional pain, but its repressive power is not total--we have the capacity to resist inscription in the cultural codes which limit sex to the confines of Mom & Dad\u2019s dark and silent bedroom.  In fact, guilt can be turned to the purpose of sexual satisfaction, if you\u2019re willing to manipulate yourself and take a little agency in the creation of your erotic self and fulfillment of your sexual fantasies.  No, I\u2019m not suggesting that everyone try to screw their sisters, blow the Pastor, or hypnotically create a harem of sex-starved zombies.  Nor am I advocating an absolute abandonment of conventional codes of ethics and moral sentiments.  I\u2019m not even trying to imply that all sex is equivalent in my own mind--that I don\u2019t have judgements of my own informing my thoughts and desires.  \n\nHowever, if we\u2019re going to open our minds enough to make sexual fulfillment available to everyone who seeks it, then we\u2019re going to have to broaden our understanding of eroticism rather than arbitrarily marking some desires deviant, degenerate, and dangerous.  The first step to this is personal, and it requires an investment in self-examination.  What I\u2019m suggesting is examining our guilt about sex, and the anxieties about porn and fantasy which result, more closely as the first step.  Then, armed with the fantasies we\u2019ve learned to admit to ourselves, we can start honestly talking with each other about them, beginning with our partners and moving on from there until it\u2019s part of the public discourse in a more honest and less fear-driven way.  \n\nComing Out: Embracing Fantasy without Sacrificing Personal Ethics\nOnly by getting past the need to hide our perversions can we start changing the culture\u2019s attitude about sex and free expression; only when we recognize that even the darkest and most forbidden fantasy doesn\u2019t necessarily make one crazy or criminal or morally bankrupt can we start making real sense of desire--and start turning those transgressive fantasies into safely satisfying sex for more people.   When incest is the most commonly read genre of online porn, meanwhile parents can\u2019t even acknowledge sexual desire when teaching their kids about what it means to be a healthy and responsible adult, something is really wrong--and the fantasy isn\u2019t the problem.  We need to learn that fantasy and reality aren\u2019t, and aren\u2019t meant to be, easily reconciled.  The real risk isn\u2019t that those incest-reading parents will fuck and damage their kids, it\u2019s that they\u2019ll stop talking to them at all out of shame or will send the children confusing mixed messages stemming from the parents\u2019 fear of their own erotic imagination.  We should be less afraid of the guy wanking to fantasy images of bondage and torture, and more afraid of the guy who disrespects every woman he\u2019s involved with because he thinks only evil and worthless women want sex.  \n\nIs such a thing possible?  I don\u2019t know.  Not overnight, certainly.  But, in the bigger picture, I see no reason why not.  So, embrace your fantasies and look for safe, healthy ways to explore them; after all, one needn\u2019t be a young student to get a spanking from the stern Principal, any more than one must commit incest to hear someone say, \u201cYes, baby, yeah, show me you love it...oh, my good little girl.\u201d  The mind/body connection is more complicated than we think, but NO fantasy is so powerful that we need fear it.  Maybe if we can all own up to our fantasies, drag our inner perverts out of the closet a bit, we can all stop feeling so guilty and afraid when it comes to sex.  And as a result, perhaps we\u2019ll learn to allow each other and ourselves more real freedom to express ourselves, in mind AND in body."
    ],
    "authorname": "RisiaSkye",
    "tags": [
        "wide range",
        "sexual fantasy",
        "sexual fulfillment",
        "normal sex",
        "romance novels",
        "sexual fantasies",
        "birth control",
        "mind body",
        "makes feel",
        "fantasy"
    ],
    "category": "How To",
    "url": "https://www.literotica.com/s/getting-past-guilt"
}
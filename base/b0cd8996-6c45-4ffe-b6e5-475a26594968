{
    "title": "Returning Home Ch. 03",
    "pages": [
        "<p align=\"center\">I hurt myself today, To see if I still feel, I focus on the pain, The only thing that's real</p>\n\nHurt, Trent Reznor - Johnny Cash rendition\n\n<p align=\"center\">* * * * *</p>\n\nHector immediately started thinking about how he could get Jim out of the compound when this was over. He didn't need to pay attention to the two of them. There weren't going to be any surprises here. Liam was an outlaw and a killer. Hector knew of at least three men that Liam had put in the grave. He was lean, but strong and there wasn't an ounce of mercy in him. \n\nBut Jim was a professional. Hector gave Liam less than five minutes to live. \n\nLiam clambered to his knees on the cold dirt, spun and looked up at Hector at the top of the stairs, blocking the porch and the entrance to the building. There was no way past the big man. Liam scanned the tree line and looked at Bill who was clutching his bleeding leg and lying on the porch. \n\nHe was maybe eight feet from Jim. It would be two quick strides, striking on the third. \"Look, Hec, you can't just\u2014\" He whirled back towards Jim and launched himself. One step, two...\n\nJim moved forward and to his left, grabbed Liam by his shoulder and the back of the head and rammed him into the truck. Jim slammed Liam against the hood again and again, always making sure that the right side of Liam's face made contact. Jim stepped back and watched him slump to the ground. \n\n\"How's that eye, Liam?\"\n\nLiam scraped up some dirt and hurled it towards Jim's face as he scrambled to his feet. \n\nLupine smile back in place, Jim allowed a small laugh to escape. \"This isn't the movies, Liam. That shit's not gonna work. And if it did, don't throw the dirt at someone's bad eye, you idiot.\"\n\nWiping the blood from the side of his face, Liam panted as he stared at Jim. Spitting some blood on the cold dirt, Liam's eyes grew sharp, pupils narrowing. Voice low and emotionless. Here was the real Liam. Stripped of humanity, the sociopath without the facade of civilization. \"'M gonna kill you.\"\n\n\"Let's finish this up, Liam.\" \n\nHe was fast. Hector had to give him that. Liam punched Jim twice, thudding into the ribs on his left side. Jim stepped closer and swung his elbow parallel to the ground, again targeting Liam's right eye. The blood flowed in volume from Liams face as he pushed closer to Jim, grabbing the larger man in what seemed to be a bear hug. \n\nJim screamed as Liam bit into his neck where it met his shoulder. He picked Liam up in his own hug, spun and forced himself to the ground, using Liam as the buffer. Blood streaming from his shoulder, Jim stood quickly and kicked Liam in the right knee. Kicking that leg again and again as Liam scrambled backwards. Jim... stopped. \n\nBacking up and moving again towards the truck, Jim looked down at Liam. \"How's that leg? Doing okay? One leg and one eye each. Now it's getting fair. Did you make it fair for Ann?\" Jim stood tall and stretched his arms out at his sides, looking up at the gray sky. He took a deep breath, letting it out slowly. Jim slowly looked around, as if taking everything in. \"Get up Liam. We're not done.\"\n\nHector looked on, wondering why Jim didn't kick Liam in the head and end it. Jim had a look that worried him. As if things weren't just coming to a head, but to an end. \n\nLiam looked back at Hector and his friends. None moved to help him. He took three deep breaths, wiped the blood from his face and stood carefully, favoring his left leg. He spat some more blood. \"Dead. 'M gonna kill you!\"\n\n\"Yeah, I heard you the first time. Whenever you're ready.\"\n\nLiam cautiously moved forward, shoulders slumped, hands held low. Feinting at a take down attempt, he moved in to Jim's left and punched him just to the side of his bad eye. As Jim recoiled, Liam slammed his forehead into Jim's nose. Grunting, Jim took a step back and moved forward again immediately. \n\nBending over slightly and crouching at the knees, Jim moved forward and thudded a fist into Liam's ribs. As Liam leaned down and to his right in pain, Jim stepped past him, slipped an arm around his neck and locked it in place with his other arm fastened behind Liam's head. \n\n\"That was better. Hit me where I'm blind. Much better. Is that what you did to Ann? Attack her in the dark? When she couldn't see? This is the end. You're not raping anyone again.\"\n\nLiam's flailing gradually slowed. His pulling on Jim's arms grew progressively weaker. His body slumped down, no longer carrying his weight. Liam would be be dead soon. And Jim... stopped. He released the choke-hold, threw him to the ground and kicked him in the scrotum. Liam groaned and rolled over. \n\nJim went back and sat on the bumper of the truck. He lifted his shirt to wipe the blood from his ruined nose and bent over to pick up some pebbles. \n\nThrowing them one by one at the recumbent body, Jim started calling to him. \"Liam. Liam. C'mon Liam. We're not done. Get up.\"\n\nHector hocked up some phlegm and spat. \"Jim, it's over. This isn't you, man.\"\n\n\"Today it is.\" He could have killed Liam at least three times by now. Hector didn't recognize this man wearing the face of his friend, blood staining everything below the nose, like Pitctish war paint. \n\nJim threw another pebble. \"Get up, Liam.\"\n\nHector had to give it to him. Liam was tougher than he thought. He watched as the rapist struggled to get to his feet. \n\n\"'Kay. Okay, hero. Let's finish this.\" He staggered towards Jim, shifting so had Jim between himself and the treeline that the rifle was fired from. Falling to his left, he grasped the hood of the truck to stay upright. As Jim stepped forward, Hector saw Liam reach behind his back and pull the knife from the sheath at his waist. If Hector had seen it, he knew that Jim had to. \n\nJim lifted his arm, as if to throw another elbow, and... stopped. Again. Liam plunged the knife into his side. With a grimace, Jim clutched his side with his right hand. He dropped his left, crouched, and punched Liam in the crotch hard enough to lift him to his toes as the knife again plunged into Jim's side. Jerking upright, Jim grabbed Liam's head and rammed it into the hood. Once. Twice. Three times. Liam refused to let go of the knife and managed to stab him again. \n\nJim stepped to Liam's right, lifted his left foot and thrust it into the side of Liam's knee. The cracking sound was audible where Hector stood. Liam immediately fell to the ground. Grabbing his side, Jim stepped forward and kicked Liam in the crotch again, balanced himself, stood directly over him and stomped his heel into Liam's groin. \n\nJim took a small step forward, still clutching his side and stood, boot ready, staring at Liam's head. He leaned forward and... stopped. He lurched backwards until he could lean on the truck again. \n\n\"I didn't kill him. I didn't...\" Jim took his blood soaked hand from his side, looked at it, and slowly fell to his knees. \n\n<p align=\"center\">* * * * *</p>\n\nHector's hands were stained with Jim's blood from when he picked him up and put him in the truck. They clenched tightly around the steering wheel. Jerking with every bump, the old truck wasn't intended to drive at these speeds. He had called 911 with one hand while steering with the other. The phone was on speaker. \n\nIdle, disparate thoughts flew through his mind. He'd need a new shirt, his was soaked with Jim's blood. Would the hospital loan him one? Would they have it in his size? Should he try to call Ann? Where are the cops? He regrouped and concentrated on the phone.\n\nHector barked at the person on the other end of phone. \"Just have them ready! We'll be there in five minutes. Maybe less.\"\n\n\"Sir, we've alerted the hospital. I'm patching in someone now. Please stay on the line.\"\n\nA new voice joined the call. Female, business like. \"Hello, can you hear me?\"\n\n\"Yeah. I can hear you. We'll be there in a couple of minutes.\"\n\nShe continued in the same measured, professional tone. \"What can you tell me about the injuries?\"\n\n\"I don't know, he was stabbed and now he's panting and babbling. Breathing shallow.\"\n\n\"That's not unusual. His body is compensating for the fall in blood pressure with an increase in heart rate and vasoconstriction. What else?\"\n\n\"He took some kicks and punches, but not much. His leg's been sort of fucked up and he got hit a couple of times in the face, near his bad eye.\" \n\n\"Are those preexisting? What can you tell me about them?\"\n\n\"Call the fucking V.A.! His name is Jim Mason. I don't know what the fuck is wrong with him. He's got a bad eye and a fucked up leg.\" \n\nShe kept asking simple questions, often going over what he had already said. None of this was being passed along to someone else. She was talking to keep him calm. \n\nHe stopped paying attention to the phone and started talking to Jim. \"Listen to me, if you can make it back here after what happened to you, you can fucking make it to the hospital. Hang on. Just hang on.\"\n\nJim's words tumbled over each other in their unnatural haste, broken only by his hurried, shallow breaths. \"Tell her. Tell her. Tell Ann. I didn't, I, he's alive. I didn't kill him. Tell her. Tell Ann.\" \n\nTears were streaming down Hector's face. Everyone under him would kill and likely die for him. They were his brothers. He had allies. He could call on people if needed and they would show up and stand by him. He had people that owed him. If he reached out, they would do their best to repay what they owed. \n\nBut he only had one friend, the man who was dying next to him. \n\n\"You'll tell her yourself. Hold on, Jim.\"\n\nJim's panting grew rapid, louder and more shallow, speech following suit as it developed a low, gurgling undertone. \"Tell her. Tell her. I didn't do it. Tell Ann.\"\n\n\"I'll tell her, Jim. You didn't kill him. Jim, listen to me. Can you hear me? Listen! Jim, I'll finish things. I'll take care of it. \n\n\"Tell Ann. Tell her. Tell...\" \n\nTears continued unabated \"I'll tell her, Jim. I'll tell her.\"\n\n<p align=\"center\">* * * * *</p>\n\nJim could sense the bright light through his eyelids. He just wanted to lie there a few more minutes. \n\nThe soft voice called to him. \"Jim.\" \n\nHe waited another moment before opening his eyes. The sun was bright and the air was warm, but comfortable. He saw the branches of the tree overhead and the picnic basket to his left. \n\nShe called again. \"Jim\"\n\nHe turned towards her and got up from the grass. \n\nShe was more beautiful than he remembered. His heart at peace, he walked to join her at the banks of their river. \n\n<p align=\"center\">* * * * *</p>\n\nEveryone gave her space. It was just the three of them at the front of the room. Ann, the body and his friend. She stood there, looking down at him, fist clenched, slowly beating her thigh. \"I've had a lot of time to think. I never got it, did I Jim? You didn't have to taunt them. You didn't have to wave the red flag in front of their face. But you did. You knew as soon as you got here.\"\n\nShe was speaking quietly and without emotion. Her shoulders were slumped and she leaned forward.\n\n\"This was an elegy for your own life. Your blaze of glory. A goodbye tour of violence, right Jim? With your shield or on it and you chose on it. You're such a fucking coward. I can't believe how blind I was.\"\n\nHer voice started to quaver. \"How could you do this to me? How could you leave me again?\" She stared down at the coffin and started to shake. Falling to her knees, Ann started sobbing. Jeremy knelt at her side and held her as her father quickly, walked to her side, helped her stand and guided her to a chair. \n\n<p align=\"center\">* * * * *</p>\n\nThe guests had left and Ann sat on the couch, staring at nothing. Jeremy finished wrapping up the platters, casseroles and dishes, putting some in the freezer and some in the refrigerator. \n\nTrying to fill the silence, Jeremy turned to Ann. \"That was nice of them. You've got enough food here for a month.\"\n\nHer bitterness shone through. \"Yeah. They're really caring people once you're dead.\"\n\nJeremy stood there watching her, unsure how to proceed. It was clear that there were many people at the wake that liked Jim. A number loved him. His friend would have had a warmer welcome if he wasn't so closed off. \n\nHe saw that there were no plates in front of Ann. \"Did you notice that I haven't eaten since last night?\"\n\nShe looked up, focusing for a minute. \"I'm sorry, Jeremy. Did you want me to fix something up?\"\n\n\"I would, but I'm not eating until you do.\"\n\n\"I... I'm not hungry.\"\n\n\"Okay, I'll wait.\"\n\n\"Don't be silly. There's plenty here. I'll make a plate.\"\n\n\"Ann, I'm not eating unless you're eating with me.\"\n\nShe hesitated for a minute. \"All right. Two plates.\"\n\nThe television droned on in the background and they ate without conversation. A few hours later Jeremy was looking through the window as two cars approached. He stood at the door and watched as a man drove Ann's car into the driveway and her father got out the passenger side. Another car waited in the street. The man that drove her car walked out to the second car, got in and they drove off. Andy walked unsteadily to the porch and saw Jeremy standing at the door. \n\nJeremy stepped back, giving him room to enter. \"Sir.\"\n\nAndy didn't look up from where he was going to next place a foot, walking as deliberately as possible. \"More fucking soldiers.\"\n\nAnn didn't say anything as her father made his way to the room he had shared with Liz for so many years. Within minutes they could hear his snoring. \n\n\"Ann, I'm going to head out. I don't think Jim had the phone hooked up at the house, but I'll have my cell. Call me if you need anything. I'll be back to pick you up for the mass at eight.\"\n\n\"Please... We have room. The couch is comfortable. You... Please stay. I'll get some blankets and a pillow.\" \n\n\"Let me grab my bag.\" \n\nAnn set up the couch while Jeremy grabbed an overnight bag from his truck. He found her waiting on the second couch when he came back from brushing his teeth. \n\nAnn smiled without it reaching her eyes. \"What time do you want me to wake you?\"\n\n\"I'll be up by six. That should be fine.\"\n\nShe touched his shoulder in a sign of thanks as she made her way to her room. \n\n<p align=\"center\">* * * * *</p>\n\nAnn insisted on Jeremy sitting with her and Andy during the mass. There were a few times when he looked behind him. Jim would have been shocked to see how full the Church was. Andy was sweating profusely and held the hymnal in shaking hands. He had joined Jeremy, Cort and Archie as a pallbearer and the cost was obvious. He clearly hadn't gone without alcohol for this long in years. \n\nJose Cortez kept smoothing down his suit jacket as he stood and walked to the lectern. He coughed before starting and pulled a sheet of paper from his pocket. He stared at the paper as he started to speak. \n\n\"If he saw me now, Jim would be laughing his ass off. Butt. His butt off. Sorry, Father. I'm sorta nervous. He would have bet his last dollar that I'd never get up in front of people and talk.\" Cort looked up a the gathering and then up towards the rafters. \"Well, here I am, Jim.\"\n\n\"That's who Jim was. He was the guy that made you do things you wouldn't otherwise do. He didn't say anything. He was just there, ya know? I'm not saying this right, but if Jim was around, you just wanted to do the right thing. If you left practice when the coach blew the whistle, you knew that Jim would still be there working with the guys who rode the bench, helping them pick up on something. He'd carry in some coolers. And you'd feel like sh\u2014, bad, you'd feel bad if you just walked away.\"\n\n\"If you needed something and Jim could get it for you, he would. End of story. You didn't have to come up with some big deal or trade. He'd just give it to you. And that's the way he was to everybody. Not just friends. Jim never thought he had many friends. Me, Archie, Hec,\" Cort looked down at Ann after mentioning Hector, concern on his face. \"a few others. That's not how people saw him. Everyone thought that they were Jim's friend. Everyone thought that Jim was their friend.\"\n\nCort wiped away a few tears and paused. \"I hope he's someplace where he knows we loved him. I'm not like Archie. I'm not too good with words. Sorry.\"\n\nArchie spoke next, peppering his eulogy with anecdotes of their youth, inspiring some quiet chuckling. He spoke comfortably and earnestly, leaving those who didn't know Jim well with a rounded picture of who he was growing up. Tissues were used, smiles were frequent and some of the tension lifted. \n\nJeremy heard Ann's father mumbling the words Andy wanted to say over and over, having memorized his eulogy by rote. When the priest asked if anyone else wanted to share their thoughts, he waited for Andy to stand. Jim's uncle never found the courage. Before the priest stepped back to the microphone, Jeremy stood and made his way to the front. \n\nHe spoke about their service in general terms, mentioning how Jim was thought of by the men he served with. It mirrored much of what Cort said. He also spoke about how Jim frequently talked about his family and friends back home. Jeremy was a poised and confident speaker, but didn't allow emotion to enter his voice. He finished with his recollections of how important honor and tradition were to Jim and the stories he heard about Jim's father and grandfather. \n\nJeremy rode in the town car to the cemetery with Ann and her father. She was emotionally vacant during the most of the burial, only focusing during the honor guard volley and the presentation of the flag. Andy pulled himself together enough to accept the condolences of people that attended. Ann sat, leaning forward, hands clenched together, staring at the grave. \n\nShe pulled herself together as the last person shuffled forward. Mr. Childress removed a small box from his jacket pocket, opened it, looked at it for a moment, closed it again and then lightly tossed it onto the thin layer of dirt that had been shoveled into the grave. \n\nJeremy stepped forward, next to the old man. \"Was that a Purple Heart?\"\n\n\"He saw it at my house once.\" Mr. Childress replied. \"He was fascinated. The missus and I had BBQ's for the team and Jim saw it in the case I keep. You know, he stopped by this week? He brought her some flowers. She cried when she saw him and cried when he left. We never had kids. She couldn't take seeing his injuries. He was a good boy. A good man. He remembered an old man and his wife and... and now this.\"\n\n\"I'm sure he would have appreciated it and you being here. Is your wife here?\"\n\n\"No, she couldn't get herself out of bed. She... She's pretty shook up.\"\n\n\"Maybe she could come over to Ann's? She's having a supper for some of Jim's friends.\"\n\nJeremy was startled to hear Ann's voice as she stepped up next to him. She hadn't spoken in hours. \"Please come. We'd love to have both of you. You don't know how much it meant to have the two of you at his parent's funeral. He cared for you both. A lot.\" \n\nShe stepped forward and hugged him. Ann, her father and Mr. Childress headed back to the waiting Town Car. Jeremy looked about fifty yards in the other direction and saw Hector, leaning against a tree. He nodded at the big man. Hector nodded back. \n\n<p align=\"center\">* * * * *</p>\n\nHector dwarfed the seat he was given at the police station. The room smelled of stale coffee and uncycled air.\n\n\"I don't know what to tell you. We've gone over this before. I invited him out to catch the games. We've got the NFL package, so we pretty much get them all. Jim came down, I met him outside. We joked around for a minute and were about to go in for the first game when Liam came out. He was definitely on something. He started screaming at Jim, telling him that he'd raped Ann, yelling about her father, the drunk. Liam wouldn't shut up. Jim had enough, apologized for not staying, and started to leave. Liam attacked him from behind.\"",
        "Clearly, neither of the detectives believed a word he was saying. The waitress had confirmed that they had discussed watching the games, but that meant nothing. Hector continued.\n\n\"So, Jim tried to defend himself, but it wasn't really a fair fight. Liam stabbed him multiple times. They pronounced Jim at the hospital. I've told you this a thousand times. Why are we going over it again?\"\n\nHector was still stunned at how it went down. Liam should have never been able to get that knife out. It was obvious that Jim could have killed him at any time during the fight. He also could have beaten him into unconsciousness. Hector even thought it likely that Jim could have simply taken the knife away from Liam. \n\nSitting across from him, the one playing good-cop did the talking. \"Liam's dead. Someone got to him in the infirmary at the jail.\"\n\nThe look of feigned shock on Hector's face was openly exaggerated. The large, tattooed biker resembled a terrifying Scaramouch, overacting his part. \"Seriously? Wow. You guys need to work on the security over there.\"\n\nThe talkative detective continued while his partner stayed in the corner, quietly watching. \"Yeah, weird though. The guy that did it? He was a member of another MC that we've heard owed you.\"\n\n\"I don't know anything about that, but I'll look into it. Am I good to go? I'd like to get some lunch.\"\n\n\"You're free to go, Hector. Stay close.\" \n\nHe stood and stretched his large frame, cracking his neck audibly. \"You got it.\"\n\nThere were rules that Hector used to abide by. Certain loyalties to his men and rules of how things were to be handled. Life was going to get difficult for him, but he didn't really care. In fact, he hadn't cared about much of anything since Jim died. \n\nHe wasn't like Jim. Hector didn't have that moral code to keep him in check. Let them come. Unlike Jim, he had no compunctions about killing. If shit happened, it happened. \n\n<p align=\"center\">* * * * *</p>\n\nAnn left her sullen father sulking on the couch as she drove to the lawyer's office. She was sure he thought he would be able to take the car when Ann returned. Things had changed. She had taken his key that morning while he slept. If he wanted to go get drunk, he could walk. She was done paying penance for her mother's sins. \n\nAnn had known and hadn't told him. She had been wracked with regrets for more than a decade. Would they have stopped if she told her mother that she saw them? Would her father have stopped them if she told him? She had no idea. What she did know is that the time was long past to let it go. Ann had been fourteen. She should have never been in that position. \n\nResting her head on the steering wheel, she sat in the parking lot realizing that this would be her last interaction with Jim. His lawyer needed to meet with her about his will. Jeremy offered to join her, but she politely declined. He was unfailingly polite and seemingly concerned, but he was too closely aligned with Jim for her to form any type of relationship with. \n\nJim had taken some perverse pride in not killing Liam, just leaving him next to dead. It was as if he found salvation in legalism. Look at me, Ann! Aren't you proud? I found a way to have my revenge without breaking my word. He knew that any action was hers to take or not to take and he didn't give a fuck. As frustrated as she was, she hoped his cheap sophistry eased his soul as he passed. \n\nMr. Begley escorted Ann to his office as soon as she entered the building. \n\nAnn had been through this once before with her mother's passing, but the attorney must deal with similar situations frequently. His smile was professional, but still kind as he began. \"Well, this is pretty cut and dried. You'll need to speak to someone with expertise in estate taxes, but with few exceptions, Mr. Mason left you everything. You're the beneficiary of his life insurance, he left you the house, the property, the hunting cabin; well, pretty much everything.\"\n\nPausing, he looked across the large mahogany table. \"I'm sorry, Ms. Mason. My assistant called out ill. I don't know where my manners are. Can I offer you a soft drink? Some water?\"\n\nHands on her lap, Ann looked at the box of tissues conveniently left on the table. Was this the point where he stops to allow me to regain my composure? Sorry to disappoint, barrister. I'm all cried out.\n\n\"No, thank you. I'm fine. Let's continue.\"\n\n\"Alright. Mr. Mason had a sizable amount of liquid assets. I can have a check for you by the end of the week. I'll have any necessary deeds and titles transferred within two weeks, give or take.\" He pushed a folder across the table. \"That's a complete listing of everything that Mr. Mason detailed. He was a rather detail oriented man. He could have just listed 'contents of home', but he has everything down from tools to spare parts for the truck.\" \n\nThe lawyer pushed an envelope across the table to her.\n\n\"There were two items Mr. Mason seemed particularly concerned about. He set up an account with Orion's Auto for the maintenance of the truck. Oil changes, brakes, putting on snow tires and general credit. This is the more... unorthodox item, he also left you gift cards totaling five-hundred dollars to D K Donuts in Boise. That's a lot of doughnuts.\"\n\nAnn picked up the heavy envelope and scanned its contents. There were two pages from Orion's Auto, the gift certificates, and a brochure from the Boise State University School of Journalism. It had almost been a joke when she was a child. Whenever someone in the family went to the city they brought her back two maple glazed donuts from D K. They couldn't have cost more than a dollar and a half, but she always lit up like it was Christmas morning.\n\nMaybe she did have some tears left. Ann found it difficult to keep the emotion out of her voice. \"Thank you. Are we done?\"\n\n\"Yes ma'am. I'll keep in touch as things develop, but what you have there,\" gesturing to the folder \"is pretty comprehensive. Please let me know if there is anything I can do, and again, you have our deepest condolences. He must have loved you a great deal.\"\n\nShe was saddened to realize that he was right. Jim did love her. Just not enough. He didn't care for her enough to live. He didn't cherish her enough to give up his vengeance. \n\n<p align=\"center\">* * * * *</p>\n\nThree weeks later, Ann packed her belongings in what was now her truck. Andy stood at the house entrance, leaning his considerable weight on the door frame, beer in hand. \n\nHis voice was clear. Andy had showered and was wearing a clean pair of jeans, but his stained t-shirt marred his effort. It seemed that he had cut back on his drinking since the funeral. \"So, that's it? You're leaving?\"\n\n\"What do you want me to do, Dad? I'm leaving you the car. You'll still get your checks. I'm not going off the grid. You can call. The spring semester starts in three weeks. I need to find a place to stay and get settled in.\" \n\n\"You got your degree. Why're you going back to school? Why not just stay here?\"\n\n\"It's Boise State, Dad. Not the podunk university I went to. I need to get my Masters. I can't be your caretaker anymore. I can't just sit here waiting for my life to start. I've been waiting too long. You'll be fine.\"\n\n\"Ann, come in the house for a minute.\"\n\nAnn stood there staring at the truck. She just wanted to be gone. He was sitting in his favorite chair when she walked back in. The beer can on the card table to his left, his hands were fiddling with a long, gray cloth. \n\n\"I've been a shit father. I know it. Everyone knows it. I was as bad a father as I was a husband. I'm not gonna sit here and give you excuses or try to explain it away. I know what I've done, what I've lost.\" \n\n\"Dad, you\u2014\"\n\n\"Ann, let me just say this, okay?\" He lifted the cloth. \"These were your grandfather's. Gold coins. They were always sort of my, I don't know, my fallback. I want you to take them. Use them for school. Give them to your kids. It's a good amount. I know what you must think of me, but I've always loved you Ann. I can't believe I helped create you. You're the only thing in my life I'm proud of.\"\n\nHe had gold. He had fucking gold and she was paying for his medicine, food and utility bills. Her flash of anger melted as she saw her bear of a father starting to cry. \n\n\"Get your degree, Ann. Be happy. Call me once in a while and let me know how you're doing.\" \n\nHe stood and walked her back to the truck, pushing the cloth with the coins in her hand. His hug squeezed the air out of her and she didn't care. She clung to him desperately before starting to push away. Still hugging her, he leaned down, kissed the top of her head and whispered in her ear.\n\n\"I'm sorry, Ann. I love you.\"\n\nShe rolled down the windows once she had driven far enough past the slaughterhouse. The stench of death had dissipated, and the temperature had risen. She periodically checked the rearview mirror, never noticing the small smile that found it's home on her lips. \n\n<p align=\"center\">* * * * *</p>\n\nAnn thrived in academia. With the money Jim left her and from the rent from his parent's house, she didn't have to work, but she kept writing. More people attended Boise State than lived in her home town. It took a while for her to crawl out of her shell, but she found that all of the social stigmas that were attached to the poor daughter of the town drunk didn't mean a thing here. \n\nShe applied to the school paper and within days they called her for an interview, hiring her on sight. She was a professional journalist and they were aspiring to what she had already achieved. Ann discovered that she had a talent for organizing and became involved in a group that aided in the distribution of meat from hunters to soup kitchens and a peer group that arranged for escorts to walk female students to or from buildings at night.\n\nShe spent every Tuesday and Thursday evening volunteering at a home for veterans. Answering phones, filling out paperwork, cooking; she did whatever was needed. It was her way of continuing her families tradition of service. That's what she told herself. It certainly wasn't due to any guilt about Jim. He didn't deserve her sympathy. \n\nShe'd sit and talk to the veterans that had visible injuries, slowly trying to draw them out and talk about what happened to them, asking questions she never asked of her cousin. Trying to offer them comfort she never offered Jim. \n\nMany nights after leaving she would wake up in tears. It had nothing to do with Jim. \n\n<p align=\"center\">* * * * *</p>\n\nAnn stepped into the veterans home and stopped, dead still, heart starting to pound. Jeremy was sitting on a couch next to another man about ten years older than him. Jeremy was helping the man fill out some paperwork. Ann stood there and stared until someone brushed past her as they entered. \n\nHis back to her, Jeremy was visible from the kitchen where she prepped food the staff and veteran's dinner. Able to overhear some of the conversation, she knew that Jeremy had been helping the residents with job applications. He was alone, shuffling through the papers, making changes here and there. \n\nPutting down the cutlery and leaving the mise en place, she approached the couch. \"Hello Jeremy. Could we talk?\"\n\nHe looked up, startled. \"Ann? God, it's great to see you. What are you doing here?\" \n\n\"I, uh, I go to Boise. Getting my masters. I'm here Tuesdays and Thursdays. Can we... can I ask you something?\" \n\n\"Of course.\"\n\n\"Jeremy, what happened to Jim?\"\n\n<p align=\"center\">* * * * *</p>\n\nThere were certain things that he couldn't tell her. Jeremy needed to find out what had been declassified and what hadn't. It was difficult to assess what she should hear and what she shouldn't. He decided to answer any questions she had, but to speak in broad strokes when necessary. \n\nThey met at Guru Donuts a few days after their initial discussion and he started with the IED that caused Jim's injuries and the ambush that followed it. He told her about the men Jim saved that day and his long road to recovery. She was spared the worst of the details. \n\nAlbertsons Library on campus became their meeting place when they realized a donut shop wasn't the best place for their discussions. Ann learned about most of Jim's career, with Jeremy focusing on friendships made and loyalties tested. Her cousin was held in high esteem by the men he served with and she was slowly learning why. \n\nAfter a month of once a week discussions, she asked him if they could get together at her apartment the following week. It was just more convenient. She wouldn't have to head back to campus after coming home. That's all it was. They would get some food delivered. Or maybe she'd cook something. \n\nAnn wasn't nervous. Her hands were sweating because she had been cooking. \n\nJeremy seemed to enjoy the tandoori chicken. Not that it mattered too much if he didn't. If he didn't like it, he could just pick up some take-out next time. She didn't care. But he did like it, or at least that's what he claimed. \n\nHe grabbed his laptop and pulled up some maps of the Middle East to give her an idea of where they were at different times. They had retired to her small living room, her on the chair, Jeremy on the couch. \n\nAs he was about to leave, he leaned in to hug Ann. She took a half step back and extended her hand. Looking confused, he shook it and bid her a good night. \n\nThe following week she made baked ziti with garlic bread. He seemed to enjoy it, but she was certain she didn't really care. This was the seventh time they had gotten together. Jeremy seemed to be speaking often in abstracts, details about Jim's service grew more and more scant. As he was leaving, Ann lightly touched his upper arm. \n\n\"Thank you. For... for all of this. I never asked if talking about this was difficult for you.\"\n\n\"No, it's fine. I'm actually glad to have the chance to talk about Jim. For a long time, he was the closest friend I had.\"\n\n\"Okay. Next week?\"\n\n\"Sure. Next week.\"\n\nAnn stepped close, reached up and kissed his cheek. She immediately regretted it, feeling like an awkward teenager. \n\nThe aromas of chili verde swirled through Ann's small apartment when Jeremy arrived the following week. They spoke and ate. She interspersed questions about his family and their car dealerships through the anecdotes about Jim. The stories had turned less serious. Jeremy told her how Jim was the only man he knew that brought a cloth napkin with him in the field. He would swear it was a handkerchief, but he would pull it out and neatly fold it in half when eating an MRE. \n\nThey laughed as he told her about pranks they pulled on each other, attempting to let off steam. Ann found it hard to believe that Jim had a sense of humor. So much of her cousin was a mystery to her. She would have learned so much if she had just asked.  \n\nThey stood at the doorway. \n\n\"That was delicious. Thanks. Next week?\"\n\n\"Jeremy...\"\n\n\"Yeah?\"\n\nForcing the words out was almost painful. Her pulse was racing. It all seemed so easy in her mind, but panic was setting in. Ann ruthlessly pushed down the fear. \n\n\"Don't go.\"\n\n<p align=\"center\">* * * * *</p>\n\nIt was unseasonably warm on the third anniversary of his death. Ann stood there at his grave, her baby in her arms. She noticed for the first time that Jim was almost equidistant between his parent's graves and her mother's. \n\n\"Hello, Jim. I'm sorry I haven't been here in a while. Jeremy would have come, but I wanted it to be just us. This is James, your namesake. What would you be? Second-cousins? We would have called you Uncle Jim and you would have been wonderful with him.\" She paused for a moment. \"I thought this would be so much easier not having to look you in the eye. After all those times calling you a coward, I guess I'm no better.\"\n\nSensing he was about to stir, she softly cooed as she rocked James.\n\n\"I ranted at you. I yelled and blamed you for things and took out all of my anger on you. You just took it. You even felt guilty. You just stood there and took it, while I could see your scars and your limp and how withdrawn you were. You never told me what happened, how you got hurt. I'll never forgive myself for not asking. I was so wrapped up in my own pain that I couldn't see yours.\"\n\nShe wiped away her tears as James tried to grab her nose. \n\n\"I was seeing a professional, getting help, slowly getting better, and you came home, alone, to die. I saw the look on your face when I told you that you weren't there for me. The pain, the remorse. I'll carry that with me for the rest of my life. Where the hell was I when you needed me? I'm so sorry. There's nothing I can do to make it better, but I'm going to make sure that James knows that his Uncle Jim was a hero, was loved and was my best friend.\"\n\n<p align=\"center\">* * * * *</p>\n\n<p align=\"center\">What have I become, My sweetest friend, Everyone I know, Goes away in the end</p>\n\nHurt, Trent Reznor, - Johnny Cash rendition\n\n<p align=\"center\">* * * * *</p>\n\nThanks for reading! \n\nAs always, I owe a huge debt to the kind people that took a look at this in a much rougher form and were kind enough to share their thoughts and expertise. Amongst others, thanks goes to Todger65, Anomic, NotWise (chapter 1), Steve M, Jack and Alex. Editors and beta readers are the unsung heroes of Literotica. They deserve far more credit than they receive.\n\nI'd like to take a moment to thank the readers that spent some of their precious time voting and commenting. Whether they are positive or negative, if comments aren't intentionally malicious, they are appreciated."
    ],
    "authorname": "Bebop3",
    "tags": [
        "aunt",
        "nephew",
        "cousin",
        "vengeance",
        "bikers"
    ],
    "category": "Non-Erotic",
    "url": "https://www.literotica.com/s/returning-home-ch-03-2"
}
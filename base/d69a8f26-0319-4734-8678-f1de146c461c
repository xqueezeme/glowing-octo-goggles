{
    "title": "Christian College Sex Comedy Ch. 34",
    "pages": [
        "*Some masks hide who we are. Others show who we want to be*\n\n(Thanks to a ton of people who helped with this who gave me patience, suggestions, read through it and occasionally kicked my ass to get me back on the job. Thanks too to Frontma for the final edit.)\n\n(Yes, this tale is supposed to be somewhat humorous and outrageous too. While not always comedic I'd like to think it is mostly a good-natured romp.) \n\n*\n\nAs Rio and I pulled into the driveway of my house, I noted both the progress Aunt Jill's contractors were making on the extension being built to shelter the motorcycles that were now hanging out at the place and their number. I also saw a bike that I didn't recognize with a brazen gang emblem on the saddle bags -- Stormrider's, not Valarie's.\n\nRio was still sulking over Mercy being with her parents. It was Saturday night so she had less than a day to go before Homecoming ended and Fall Break began. The hope was that Mercy could convince her parents she was required to stay on campus for the week school was out. Considering what her family patriarch thought of women's opinions, we didn't think she had a prayer.\n\n\"A lot of bikes,\" Rio noted. \"I don't care what Jill says, I'm grabbing a few beers.\"\n\n\"Don't run around the front yard naked or swing from the rafters and we'll do fine,\" I joked. I wasn't going to fight Rio on this -- I was preparing for a hung-over Rio at Church in the morning.\n\nWe heard laughter as we stepped onto the porch. I swung the door open and announced us.\n\n\"Jill -- it's me and Rio,\" I said. The laughter died down and I heard footsteps coming my way.\n\nJill and I met at the entry to the living room. We hugged, kissed and then she showed us in. Belle and Willa were regulars and Valarie was expected. The ginger-haired woman with a beer and a smile was unknown to me, though.\n\n\"Zane, Rio, this is Fontana Palmer, Valarie's mother,\" Jill introduced us.\n\n\"How's the leg, Old Lady?\" Rio grinned. That's Rio for you. Fontana turned to Valarie.\n\n\"You were right -- you can't go ten minutes without wanting to punch her,\" she chuckled.\n\n\"I got it for you,\" Belle hopped up. Rio, in her foul mood, was ready to get in a scrap right then and there but I knew that was plain stupid.\n\n\"Come on, Belle,\" I intervened. \"GF problems.\"\n\n\"Yours or hers?\" Belle hesitated.\n\n\"Hers,\" I answered. Belle leaned past me and looked seriously at Rio.\n\n\"Mercy's in trouble?\" Belle sounded concerned. Willa half-turned on the sofa to get a better view of things.\n\n\"She's with her,\" Rio bit down on the expletive for Jill's sake, \"parents.\"\n\n\"Ah, what a bitch,\" Belle moved past me and led Rio to the sofa. \"Isn't it great when the folks decide that you aren't good enough for their little pride and joy? Been there, done that.\"\n\nBelle handed Rio her beer then looked back at me.\n\n\"Zane, two more beers,\" she ordered.\n\n\"Hi, Zane,\" I mocked myself, \"Glad to have you back. How did the match go?\"\n\n\"It is good to have you back, Zane,\" Jill touched my arm. \"How did the match go?\"\n\n\"What was the match in?\" Fontana inquired.\n\n\"Oh, hi, Mrs. Palmer,\" I corrected my rudeness. \n\n\"He was in a marksmanship competition,\" Valarie jumped in. \"How did you and Hope do?\"\n\n\"Hope took top spot but it was close,\" I informed them. \"The number two guy came in .02 points behind and third was .08. The team took third place.\" All I have to say is those two guys scared the crap out of me. Apparently they shoot moose with .22's in their spare time or some shit like that.\n\n\"Congratulations, Zane,\" Willa grinned. The room followed suit -- except for Rio. I motioned Jill to return to her chair and made for the stairs.\n\n\"Beers, bitch,\" Belle teased me. \"Sorry, Jill -- beers, Punk.\" I opted to not make a scene so I dropped my bag, went to the fridge, and got two beers.\n\nBy the time I got back, Rio had buried her first beer and grabbed for her second. Belle took hers and winked.\n\n\"What? No tip?\" I wondered.\n\n\"Oh, what were you expecting?\" Belle tilted back her head.\n\nI ran a hand through her hair, leaned in and kissed her on the lips. Our tongues darted forth, then danced back and forth within our mouths. I put a hand on her shoulder then let it migrate down to her breast. I squeezed it gently and Belle moaned. I broke the kiss and smiled at her.\n\n\"That'll do,\" I chuckled. Belle's eyes were alight and she was smiling as well.\n\nJill was looking into the fireplace and blushing, Rio was blas\u00e9, working through her beer, but the other three women were staring at me.\n\n\"Beer, Zane,\" Valarie leered. Fontana, far from being protective, patted her daughter on the shoulder.\n\n\"Oh, hell no,\" I waved off. \"I was crawling through the woods all morning then spent the rest of the day riding in a bus with other smelly athletes. I'm putting my bag in my room and taking a shower.\"\n\n\"Are you sure you know what to do showering alone?\" Valarie called after me. Bitch.\n\nThe first thing I noted was that someone had been sleeping in my bed. My money was on Fontana. I'd deal with that later but at the moment, all I wanted to do was get clean. As the hot water scalded away the grime and sweat I thought happy thoughts about Hope. She hadn't complimented me but she hadn't a bad thing to say about my performance either.\n\nIn a way I felt 'in the zone'. I caught the range, slope and wind changes like a pro and I thought her score showed it. I knew she wanted the team to do better but with the youth of the squad, coming in third out of a field of twelve felt good to me. For Hope, nothing short of first would do.\n\nBy the time I got downstairs, I was shirtless, wearing gym shorts, and drying my hair with a towel. The group had migrated to the den, the TV was on, and the conversation was muted. Jill's look told me I should have put on more clothes. I only wanted to unwind. The looks the other women were giving me were far less motherly.\n\nI groaned, shook my head and went to the kitchen for some OJ. When I returned, I looked around for a seat and decided to sit down at Jill's feet. She leaned forward and patted my shoulder. That was fine. Valarie and her mother constantly stealing my glances my way was less so.\n\nRio was nursing a beer and her hurt feelings, Belle was running her hand through Rio's hair in a strangely comforting gesture, and Willa seemed amused by the whole affair. At the commercial break, Fontana stood up.\n\n\"Zane, can I talk to you alone for a minute -- outside,\" she requested.\n\n\"Sure,\" I half stood then, \"Wait, does this involve me and pain?\" She snorted mirthfully.\n\n\"No,\" she smirked. \"If you behave I won't hurt you too much.\"\n\n\"Go on, you wuss,\" Rio teased. \"It isn't like you've despoiled her daughter or anything.\"\n\n\"But I didn't,\" I explained desperately.\n\n\"That's right,\" Willa joked. \"It isn't like you two have rolled around in that -- it's not a bed. What is it?\"\n\n\"It is a sleeping platform,\" I mumbled. \"I got tired of girls taking a header off my bed.\"\n\n\"That's awful considerate of you,\" Fontana smiled warmly. \"A moment, please.\"\n\nI followed her into the hall, then reluctantly outside to the porch. I was wearing shorts and it was cold so I folded my arms to conserve some warmth. Fontana moved a few more steps down the porch, turned, and looked me over.\n\n\"Zane, thank you for being a good friend to Valarie,\" Fontana began.\n\nThat wasn't what I was expecting to hear.\n\n\"Umm -- okay,\" I responded.\n\n\"See,\" Fontana went on, \"when her father forced this on her to make her into his mold of what a good Christian woman should be, I was afraid the experience would leave her bitter.\"\n\n\"Why is she doing this anyway?\" I asked. \"She's eighteen and can make her own choices.\"\n\n\"Oh,\" Fontana mused thoughtfully. She paced back and forth once. \"She likes you so much I assumed she told you.\" She paused for a moment. \"After my problem with the law, my ex threatened to keep my other two daughters from me unless Valarie came to FFU.\"\n\n\"Oh, the fuck you say,\" I growled. My arms came down and I balled up my fists. \"Listen, I know a pretty good lawyer if you want someone to have another go at your case -- or I can shove his head down a toilet until he changes his mind.\" Fontana laughed.\n\n\"No, you are doing enough. Stormriders take care of themselves most of the time but it's good to have friends too,\" Fontana smiled.\n\n\"Valarie is having a great time at school. She likes the girls she's met -- well, some of them -- and she's happy that so many are heading out our way over the summer,\" Fontana went on. \"She's very proud.\"\n\n\"I would have never guessed,\" I replied sarcastically.\n\n\"No, really,\" Fontana faked her surprise well. \"I know she hides it well but she's really proud of where she comes from. Honest.\" She paused again. \"Can I ask you a personal question?\"\n\n\"Sure,\" I shrugged.\n\n\"Why haven't you and my daughter hooked up? She won't tell me,\" Fontana questioned.\n\n\"I'm not sure,\" I worked out. \"I've never pressed her. She may not like having sex with the eternal audience that hovers around me. Maybe she's respectful of all the other women in my life right now. All those answers sound plausible.\"\n\n\"Ha,\" Fontana laughed. \"Stormriders aren't exactly bashful. She says your girlfriend, Heaven, shares but I think she really likes you because you aren't hitting on her.\"\n\n\"She likes me because I respect her boundaries? Oh, Gawd,\" I groaned. \"At times I really wish I was an asshole. As it is, I'm afraid that one day my dick is going to fall off.\" Fontana walked up, patted my crotch.\n\n\"That would be a pity,\" she whispered into my ear before heading inside.\n\nBecause I Must Secretly Abhor a Good Night's Sleep\n\n(Later that evening)\n\nAt school, I slept on a contraption that easily slept twelve and was often occupied by eight. I go home so I can sleep -- on the sofa? See, Valarie and her mom were in my room -- they were guests after all. In the prepared guest room, now Belle's room, Willa and Belle had crashed out. We had three other rooms upstairs but Jill hadn't gotten around into making anything of them.\n\nRio was supposed to join Valarie and Fontana in my bed but somewhere between 12 and 20 beers (she and Belle were sharing) Rio decided to grab a throw pillow, curl up on the floor and pass out/go to sleep. An effort to rouse her failed so I put a quilt over her and let her sleep it off. After 11:00 Jill went upstairs and the rest followed her to bed. I put a few logs on the fire and laid down to sleep on the sofa.\n\nI couldn't have been asleep more than an hour when I felt something nudge my hip. I looked up to see Fontana's ass pressed against my side, her looking down into my eyes. Fontana was beautiful but in a hard, flinty way. She was mature but compact, like a she-wolf with little padding or softness to her.\n\nHer long ginger hair was pulled back in a ponytail though her bangs were hanging loose. She wore a tight grey t-shirt that said 'Eyes Up!' that highlighted her breasts. Sure, a bit of a sag in her 36C's but very nice. The shirt only came halfway down her belly, fully exposing her bright red bikini brief panties to my gaze.\n\nHer eyes were the same blue as Valarie's and danced in the fading fire's light. There were lines around her eyes and her face was weathered but strong. I could have stupidly asked what she wanted but, hey, she was sitting next to me, dressed like that after 'lights out'. I propped my upper body with my right elbow while reaching out with my left and cupping her right cheek.\n\nAs I drew her to me, Fontana twisted her body around so that she straddled me. I had to scoot my body toward the edge to give her knee room to settle down. She kissed me with a steady intensity that slowly pushed my head back to my pillow.\n\n\"Man, you are easy,\" she breathed playfully after we broke a long embrace.\n\n\"I thought I'd have to explain myself or some other shit like that,\" she added.\n\n\"If there's anything else I need to know, you'll tell me,\" I said softly as I brushed her bangs aside. \"I figure Valarie already knows you are down here.\"\n\n\"Oh, yeah,\" she laughed. Rio stirred on the floor.\n\n\"Some chick named Leigh crawled through your window,\" Fontana whispered.\n\n\"Oh -- sorry about that,\" I muttered.\n\n\"That's okay,\" Fontana grinned. \"Val sent her over to Belle's room.\" Oh, yeah, there was going to be some feedback on that; feeding a sorority/college chick to Belle in the middle of the night.\n\nI had to go get Leigh -- eventually. I didn't want to be rude to Fontana, though. I put both hands to the side of Fontana's head and pulled her back into a deep French kiss. We hummed and moaned for several minutes, doing nothing more than twisting our tongues and saliva back and forth.\n\nWhen Fontana finally came back up for air, she was really smiling.\n\n\"You don't just fuck a girl, do you?\" she snickered. \"This is nice, but I still want to get fucked.\" She began grinding her crotch against me so I decided to move things along. I let my arms gently drop down her front, fondling her breasts briefly before moving down to her panties.\n\nBeing subtle -- I put two of my fingers from each hand inside her panties and worked them down the miniscule distance allowed by her legs being spread to either side of me. Fontana chuckled, dismounted and shimmied out of her underwear. I threw off my blanket lickety-split and yanked/pulled/kicked off my shorts.\n\nFontana remounted me slowly, letting me drink in the beauty of her body. My cock was lying flat against my stomach as she settled her labia against the base of my shaft. I put my hands on her hips and began to rock her back and forth over my rod. Fontana placed her palms on my shoulders as she leaned forward. This allowed me to migrate my hands back to her butt cheeks.\n\n\"Ass man?\" she teased.\n\n\"I like sexy,\" I rolled my hips beneath her, \"and you are definitely that and more.\"\n\n\"Flatterer,\" she huffed playfully.\n\n\"Bullshit,\" I challenged her. \"When was the last time you went home alone when you didn't want to?\"\n\n\"You think I get picked up in bars?\" she mused.\n\n\"You are more of the hunter than the prey,\" I countered.\n\n\"Good boy,\" she grinned.\n\n\"I hang out with dangerous women all the time,\" I grinned back. \"I have to be good on my feet.\"\n\nFontana was moving back and forth rapidly and her vaginal fluids began to make both of us slick. By the uptake in her breathing, I could tell she was aroused. To prove it, she propped up on one knee, took my penis in her hand and aimed it at her pussy. She played with it along her slit, getting it extra wet.\n\nA guttural growl escaped her lips as my cockhead pierced her lips and began to penetrate her. Now, Fontana wasn't a tight fit -- in fact, she was rather loose but not uncomfortably so. She more than compensated by exhibiting extraordinary vaginal muscle control and soon was sucking my cock in.\n\n\"Oh, yeah,\" she exhaled as her pussy ground all the way down. She kept her eyes on me, pleased with herself and my reactions to her machinations. Fontana began bending forward then pushing up. This brought her tits back into my focus. Her shirt was so tight they didn't move much but that only made them more enticing to me.\n\nI gave her ass one playful slap before making a move on her breasts. The spanking earned me an arched eyebrow and a smirk. Fontana certainly didn't stop me from massaging her breasts. She even moved her hands to the back of her hips so that her chest was thrust forward. I followed that move by pushing up with one arm. My lips latched onto her left breast while my hand clutched her right one.\n\nSuckling on her nipple through her shirt was tough going. Fontana had mercy on me. She took her shirt and began lifting it up in slow, tantalizing bits. She was playing me like a pro and I loved it. When she got to the swell of her breast, I lowered my head down and began running my tongue along the base, sweet with her sweat.\n\nFontana showed her approval by keeping her shirt there for some time. I could have pushed my hand beneath the shirt but I didn't. I wanted her to give it to me. She finally did give me her exposed breast and I dove straight on her pinky-sized nipple, sucked on it, and bit down lightly. Fontana jolted and hissed out but also pressed her tit harder into my mouth.\n\n\"Someone trained you well,\" Fontana purred. I mumbled something. \"What was that?\"\n\n\"Several somebodies,\" I clarified, then smacked back onto her tit. I didn't use my teeth again, keeping it sensual and compassionate without being rough. Fontana was encouraging my efforts so I felt I was doing well.\n\nShe finished working her shirt off. She cupped the breast I was suckling on so I could play with more of it. Her right hand reached down and touched my face. Fontana traced along my temple, to my cheek, and finally to my lips. She pressed two fingers between my lips and I sucked them in, letting my tongue play with the tips of her fingers along with the nipple.\n\nThe effect got Fontana huffing like a steam engine. Her thrusts down on me became stronger but more erratic until she erupted in a primal scream. Poor Jill.\n\n\"Aaaaiiieee!\" she went off. Fontana's vaginal muscles spasmed around my cock while fluids sloshed down onto my crotch, down my ass, and onto the sofa cushions.\n\n\"Fuck it all,\" Fontana heaved breathlessly. \"Too bad you are a millionaire playboy. You'd make a great bitch on the back of my bike.\"\n\n\"I was thinking the same thing,\" I panted.\n\n\"Really?\" she eyed me skeptically.\n\n\"Yeah, you would make one hell of a personal secretary in my office,\" I snickered.\n\n\"Oh, you bastard,\" she laughed, before drawing me into a kiss. We fell back onto the cushions, making my hold on her breasts a bit difficult. I let my restless hands roam back to her ass and grabbed each taut cheek. She had a really hard, muscular ass with just enough play to be fun.\n\nFontana wiggled her hips between light kisses to my lips and nose.\n\n\"Somehow, something big and hard has gotten inside me,\" she teased. \"What are we going to do about that?\"\n\n\"Well, you wanted me to be the bitch on the back of your bike so let me get behind you so you can find out what it would be like,\" I dared her.\n\nFontana didn't say anything for the longest second.\n\n\"Don't get carried away back there,\" she warned me. \"I'll let you know if I want any kind of 'special treatment'.\" Okay, no butt sex. Fontana wiggled her hips as she rose up off my cock until it slapped down on my stomach.\n\nI pulled my knees up and Fontana turned around and went down on all fours on the other end of the sofa. Yeah, that was a magnificently sculpted ass. I moved behind her, pushing her right knee forward so I could kneel behind her with my right leg straddling hers. Then it was only a matter of lining my penis with her cunt and sliding it in.\n\nShe murmured happily as my rod twitched and penetrated inside her. I made a few strokes in as she gently pushed back against me. Once we had our rhythm, I leaned onto her back and began playing with her breasts once more. It was a slow, casual love-making; neither one of us was in a hurry.\n\nFontana began dipping her back down then thrust up as she contracted her vagina around my shaft and cockhead.\n\n\"Oh, God,\" I groaned as she built up the pressure on me.\n\n\"That's what you get for playing nice,\" Fontana purred.\n\n\"I thought you might enjoy a nice, slow screw,\" I ground out as my balls tightened.\n\n\"Oh, I do -- but I'd like to get some sleep too, Zane,\" she lustfully taunted me. I sat back up and placed my hand on her hips. Then I began picking up the pace, the wet slapping sound beginning to echo around the room. Fontana grunted as I pounded her, her ass and thighs absorbing much of my impact.\n\n\"Cu- -- cumming,\" I warned her. Fontana went from her hands to her elbows to maximize penetration.\n\n\"I'm ready, Honey,\" she huffed. \"You can give me all you've got.\" It wasn't what she said but the way she said it that set me off. ",
        "I was ejaculating before I knew it. I slammed my penis as far into her as I could while my semen shot out. Every time a strand of my seed painted Fontana's womb, she let out little 'ahs' until I was done. Even then, I held her tight until my cock began to deflate. I fell back on my heels and Fontana shifted so that she was lying on her side and looking back at me.\n\n\"Happy?\" she quizzed me.\n\n\"Oh, yeah,\" I exhaled happily. \"You?\"\n\n\"Honestly, I expected to get hammered -- but I liked this more,\" Fontana smiled. \"It was nice to know you weren't simply fucking some biker slut.\"\n\n\"Oh, hell no,\" I chuckled. \"If I did that, the line for my ass kicking would go around the corner and Belle would head it up.\" Fontana's response was musical.\n\n\"Valarie said you live under the constant threat of girls beating you up,\" she teased.\n\n\"You think you've beaten my ass tonight?\" I crawled toward her hungrily.\n\n\"Nope,\" Fontana waved me off. \"I'm willing to call this one a draw. You came, I came; we are even.\"\n\n\"But I want to end up on top,\" I growled. Fontana rolled onto her back and let me part her legs and poise my body above hers.\n\n\"You are going to be loads of fun this summer,\" she sighed as I slipped my hardening cock into her once more. \"Loads of fun.\" That's right, if I couldn't hook up with Valarie's mom this summer, I could always get together with one of her friends in one of the Southwest's women's correction facilities. I understood that I was popular in prison.\n\n(Belle, Leigh and Willa -- oh, what the hell am I doing?)\n\nI let Fontana go upstairs first while I cleaned up in the downstairs bathroom. I snuck back to the sofa, got dressed, and dropped down beside the snoozing Rio. I kissed her on the top of her head -- she's my best friend after all. Then I kissed her on the ear and she lazily swatted me away.\n\n\"Bad little piggy,\" she mumbled. She thought I was Mercy.\n\nI was hoping she was having happy dreams; she deserved them. I was still a long way from my own sleepy time. I had to go save/retrieve Leigh from Belle. Personally, I liked Belle, but she really didn't like most college kids and expressed that in a very aggressive style. I padded upstairs to Belle's door, heard a muted buzzing from within, and knocked softly.\n\nI heard someone get out of bed and come to the door. Willa initially eyed me cautiously but smiled when she saw it was me and not Aunt Jill.\n\n\"We captured a home invader,\" she winked as she let me in then shut the door behind me.\n\n\"Hi, Zane,\" Belle rotated her head and looked at me.\n\nBelle was on her side on the bed. Leigh was beside her, half her shirt stuffed in her mouth, her hands cuffed in front of her and she'd been crying -- and cumming a great deal. Belle had a black six-inch vibrator out and was rubbing it along Leigh's pubic mound and thighs, currently avoiding Leigh's cunny.\n\n\"We are teaching this bitch how to fucking knock on a door,\" Belle explained.\n\n\"Absolutely,\" Willa confirmed. \"For some strange reason she just jumped into our bed half-naked and started humping Belle.\" That had to have gone over famously.\n\nLeigh's plea was muffled but I could see the desperation in her eyes.\n\n\"She's quite the cunt-lapper when she shuts up,\" Belle grinned wickedly at me. \"She kept claiming she was looking for you but everyone knows the two of us don't sleep together; right?\"\n\n\"Of course not,\" I agreed. \"If we were going to have sex, it would be downstairs on the sofa.\" Damn, that sofa gets a lot of sex. Aunt Jill must use a ton of Fabreeze on it.\n\n\"So, are you here to get a piece or do you want me to let her go?\" Belle eyed me seriously.\n\n\"She's a good friend, Belle. She meant no harm. Valarie sent her over here after she crawled in my window,\" I explained. \"Please let her go.\"\n\n\"If I don't?\" Belle kept eye-balling me.\n\nI could ball up my fists and talk about how this was my house -- blah -- blah -- blah -- but that would make me a douche.\n\n\"Well, then, I guess Leigh's boned until the Kappa Sigmas send out a search party. It is your home too,\" I sighed. Leigh squealed something that might have been 'No'.\n\nBelle turned back to Leigh and pulled the shirt out of Leigh's mouth.\n\n\"What do you have to say for yourself?\" Belle taunted Leigh. Leigh had to work the saliva back into her mouth before she could speak.\n\n\"Sorry. I'm really sorry I broke into your room and I won't do it again,\" Leigh pleaded.\n\n\"And you'll leave Zane alone?\" Belle pressed.\n\n\"I -- umm -- I -- ah, screw that. Put the vibrator back in,\" Leigh insisted. \"It will take more than you two (Belle and Willa) to convince me to give that dick up.\"\n\nBelle snorted and Willa laughed.\n\nBelle rubbed the vibrator up Leigh's thigh and onto her clit, causing her to jolt and writhe on the bed. By the look of Leigh's vulva, she'd already been worked over pretty well but she was willing to take on even more over-stimulation to keep having sex with me; how humbling. On the other hand, Belle wasn't the kind to take Leigh's devotion at face value.\n\nBelle wanted to put Leigh through an ordeal; I couldn't talk her out of it. I could be there for Leigh though. I walked around the bed tailed by Willa, crawled up on the bed and settled in on the far side of Leigh.\n\n\"Who said you could get on my bed?\" Belle sneered. Okay, then...\n\n\"Your room -- my friend,\" I pointed out. \"Do you want to step outside and settle this?\"\n\n\"Seriously, Nancy?\" Belle smiled. \"You want to do this now? For her?\"\n\n\"Would you prefer I pick and choose how and when to support my friends?\" I countered.\n\n\"Let's go,\" she hopped out of bed. \"Back or front yard?\"\n\n\"Backyard; I'd hate to embarrass you in public,\" I responded with a toothy grin.\n\n\"Let's go, Nancy,\" Belle sneered. Nancy as in 'Nancy-boy'. This was going to be fun. I'm wearing my old shorts, Belle is in a tight black Fallout Shelter t-shirt and black panties that she's had for a while -- I can see a tiny bit of white elastic peeking through the worn waistband.\n\n\"Willa, please un-handcuff Leigh and bring her along?\" I requested.\n\n\"Willa, keep a hand on her. I haven't finished with Leigh yet,\" Belle called over her shoulder.\n\nAs we made our way out the back door I couldn't help but up the ante.\n\n\"Belle, after I kick your ass you're going to wear a dress to church tomorrow,\" I prodded her.\n\n\"Oh, yeah,\" she laughed loudly. \"After I stomp you into the ground, I'm going to have my name tattooed on your ass as my property.\" I had a feeling that my laugh was less convincing. Belle quick-stepped/skipped out onto the cold grass. The outside lights had come on when the motion sensors picked us up.\n\nI followed Belle at a more sedate pace with Willa and Leigh trailing behind.\n\n\"Kick her butt,\" Leigh encouraged me. Willa looked around for the garden hose. She was going to soak the first one of us to get knocked out. There was none of that pansy submission shit for Belle -- that would be too damn easy.\n\nBelle spun around to confront me. She shook out her arms and began closing.\n\n\"From the first time we met I wanted to know how tough you were,\" she gave me a feral smile.\n\nI gave her a snap-kick to the chest in response, sending her flying back and rolling over in the grass. I didn't chase after her, though.\n\nFrom Rio, I had learned that Belle's style was one part wrestling, one part boxing, and padded with dirty tricks. Belle summersaulted over and came up on her feet with that feral look still in her eyes. This time I met her halfway. I feinted, she failed to fall for it then we both followed up with a series of boxing jabs and blocks.\n\nBelle got in a blow to my ribs, swung at my head and missed, then took my jab to her face, cutting her lip. She licked the blood and her eyes blazed with passion. Belle caught me off-guard by tackling me. That took us to the ground with her on top, straddling me and raining blows down on my head.\n\nShe landed a good blow to my cheek, which stung. I was able to grab her head and head-butt her in response. That stunned her so I head-butted her again. She swayed back on her hips. I pushed her further back, sat up, and received a head-butt in return -- fuck, that hurt! Belle took the advantage by pinning my left arm back.\n\nShe was about to smash my face again but I punched her in the throat. That brought her up short long enough for me to twist my hips and roll us over. I tried to escape so Belle wrapped her legs around my waist. Our hands sought out each other's arms. I won that little contest, finally crossing her arms across her chest. Belle tried to take a bite out of my arm.\n\nDamn. She was serious about this fight. I scooted my knees under Belle's ass, leveraged our bodies up then slammed us to the ground -- twice. On the second go-round, her grip slipped. This allowed me to pop her in the temple which led in rapid succession to me getting behind her and applying a chokehold while we were still on the ground.\n\nBy this time, my legs were around her waist, from behind, and despite several elbows to the ribs and fingers raking my arm, her efforts eventually became feeble, then stopped. I pushed her off of me and just lay there, catching my breath for half a minute. I was roused by Willa hitting us with terribly cold water from the hose.\n\nBelle and I sat up at the same time, arms resting on our knees and looking at each other. Belle glared at me initially, then chuckled and shook her head.\n\n\"Rio's been holding back on me,\" Belle rasped. \"She said Hope beat you with wrestling moves.\"\n\n\"She did,\" I groaned, \"but she's been giving me some pointers over the past few weeks. Don't take it out on Rio. She has the attention span of a weasel.\"\n\nI stood up first. I offered Belle my hand but she snorted.\n\n\"Don't make me slap you, damn it. I'll get my own ass out of the dirt,\" she grumbled.\n\nBefore I could say anything, Leigh ran to me. She was giddy, and horny, from the contest she had just witnessed.\n\n\"I knew you could do it,\" she kissed my face. \"Now let's go in and have some sex!\"\n\n\"Ask Belle,\" I replied. \"This fight was for me being allowed on the bed. You still need to pay for breaking into her room.\"\n\n\"What?\" Leigh squeaked.\n\n\"Come here, Slut,\" Belle laughed. She hooked an arm around Leigh's waist from behind and began dragging her back into the house.\n\n\"Zane?\" Leigh called out fearfully.\n\n\"Coming -- coming,\" I groaned. \"I feel like someone dropped a cinderblock on my head -- and my ribs.\" I staggered for the door only to be intercepted by Willa.\n\n\"You are one freaking weird dude,\" she whispered.\n\n\"You have no idea,\" I responded softly. As she came alongside, I put my arm around her waist -- then down inside her panties, and cupped her right ass cheek.\n\nI gave it a good squeeze. I figure Willa could pull away or punch me in my sore ribs. Instead, she bumped my hip and put her head on my shoulder.\n\n\"Have you ever been with another woman?\" I asked.\n\n\"No,\" she regarded me.\n\n\"Willing to experiment?\" I teased her. She smiled, snaked a hand along my back to my neck and finally grabbed a handful of hair. She pulled me down into a kiss and finished with her own devilish grin. I took that to be a yes.\n\nWe made our way back to Belle's room, where Belle and I stripped out of our wet clothes.\n\n\"You don't have to handcuff me,\" Leigh begged of Belle. \"I'll behave.\"\n\n\"I know you'll be a good girl, but I don't care. I'll do it because I want to,\" Belle taunted her. Leigh pouted and looked my way. I shrugged helplessly in response. She stripped, crawled to the middle of the bed, rolled onto her back, and put her wrists together just below her breasts.\n\n\"I'd rather fight than be a victim,\" Belle mocked her as the bindings clicked shut.\n\n\"No, that's some dick, you skank,\" Leigh wound up her courage. Belle's response was to retrieve the vibrator and turn it on.\n\n\"Calling me a skank makes you feel tough, eh?\" Belle closed in.\n\nThe vibrator began rubbing against Leigh's thighs as I settled into the bed behind Belle. Willa resumed her position on the far side after she stripped down. Belle gave me a curious look over her shoulder before turning back to Leigh. I snuggled into Belle before nibbling and sucking on her neck and shoulder.\n\nAs Belle pushed the vibrator between Leigh's labia, I ran my left arm down Belle's back and parted her ass cheeks. I could feel Belle look over her shoulder again -- my lips were sucking on her shoulder at that moment -- and visually question what I thought I was doing. I could sense a struggle going through her mind by the increased tenseness of her shoulders.\n\nShe had to be deciding if she would let me distract her or not. A moment later she made up her mind; she bent her leg and pulled her knee toward her chest to make my access to her easier. I scooted farther down so I could move my hand below her ass and begin stroking her pussy, back to front.\n\nBelle wiggled the vibrator inside Leigh's vagina as my fingers worked her over. She kept it going until she felt my cock pushing past her butt cheeks. Belle didn't caution me about her anus; she didn't have to. When my cockhead touched her vagina, Belle responded by looking back at me, daring me to stick it in.\n\n\"Do you want me to stop, Belle?\" I gazed into her eyes. Belle's response was to suddenly push down on my cock, pushing it half way in with one thrust.\n\n\"Fuck,\" she hissed. I grabbed her hip and finished driving my rod all the way in. I quickly withdrew, then slammed it home again.\n\nAt the same time, I moved my right hand, pinned underneath me, under Belle's body, until I burrowed to her pelvis. Belle began humming as my hand reached her slender landing strip. I also noticed that her activity with Leigh had lightened up. Her vagina walls strongly massaged my cock's passage and the stimulation was soaking up more and more of Belle's attention.\n\nThe vibrator cut off. Belle had dropped it so she could start pulling and pinching her breasts as my four fingers began to vigorously rub her clit. For five minutes I kept going at her sideways until she grabbed the sheets so she could shove her body into mine and almost pushed me off the bed. Her climax seized her, her breath came in short gasps and tremors passed from her body to mine.\n\n\"Damn it,\" Belle cursed. It took me a moment to figure out what she was pissed about. She began thrusting back against me. \"Still hard, huh?\" she growled. Why, yes I was, but I wasn't going to tease her about it. I missed the visual exchange between Willa and Belle but the end result was Belle giving in, letting Leigh off the hook.\n\n\"I'm getting on top, Zane,\" Belle demanded. What proceeded was a bit of bedroom acrobatics but I kept my penis inside as I moved towards the bed's center while Belle swung up to a reverse cowgirl position. I pushed up, palms on the bed behind me, and watched her ass begin to bounce on my lap.\n\nAt first, Belle rested her hands on my shins and used that to balance her rocking and thrusting of the hips.\n\n\"Don't, Zane,\" Belle panted as I pressed my chest against her back. When I wrapped my arms around her, she made one last protest. \"Oh, damn you.\"\n\nI hugged Belle tight, my left arm around her stomach and the right around her chest. She slowed down for a few seconds before turning her upper body so that we could kiss. Our tongues flickered against each other, then slowly danced back and forth between our mouths.\n\n\"I really should bite you right now,\" Belle sighed.\n\n\"What the hell for?\" I muttered.\n\n\"I'm going to have to look across the room now and find a reason for not jumping your bones, you idiot,\" she breathed in short bursts.\n\n\"Someone likes being 'Zaned',\" Leigh teased. Willa slapped her somewhere; I couldn't see where.\n\n\"Shut up unless you want to be tied up all night,\" Willa whispered. I was busy letting my hands migrate over Belle's tight body now that I had 'permission' to sex her up. I let Belle lean into me. Her hands cupped her breasts while my hands went from her shoulders to the top of the tits but avoided the nipples.\n\nI skated around her upper chest, linking my hands over her pulsing abdomen then lightly traveling down to her thighs.\n\n\"You are not in a hurry,\" Belle observed breathlessly.\n\n\"It is our first time,\" I reminded her.\n\n\"Oh,\" was all she had to say. Her body rubbing against me was her real reply. It was with gradual ease that we upped our tempo until Belle finally 'gave it up' again. This time I came with her -- and I completely spaced about a condom -- again. Belle writhed her body against mine for almost a minute as we regained our composure and our breaths.\n\n\"You came in me, didn't you?\" Belle said seriously.\n\n\"Yeah, I screwed up. I'm sorry,\" I groaned.\n\n\"What are we going to name our kid?\" Belle showed a tiny bit of mirth.\n\n\"I'm partial to Beausephus if it is a boy,\" I told her as I kissed her neck, \"and Andromeda if it is a girl.\"\n\n\"Our kid is going to kick ass,\" Belle laughed.\n\n\"Aren't you on the pill?\" Leigh wondered.\n\n\"Listen, you stupid Cunt,\" Belle twisted on my semi-rigid cock so she could lock eyes with Leigh, \"do I look like I can afford Healthcare?\"\n\n\"Answer me, Bitch,\" Belle began wiggling off my lap and out of my arms.\n\n\"Let it go,\" I begged Belle.\n\n\"Don't think that just because you have my dick in my cunt, that makes me your bitch,\" Belle growled to me.\n\n\"As your friend, I'm asking you to drop -- 'my dick'?\" I hesitated. \"Just because MY dick is in your cunt doesn't make it your dick,\" I teased.\n\n\"Crap -- slip of the tongue,\" Belle mumbled.\n\n\"It's okay,\" both Leigh and I said.\n\n\"Several of our girls feel that way,\" Leigh added. \"We feel possessive about that cock.\"\n\n\"What she said,\" I finished. \"That's why when it is not attached, I keep it in a locked box.\"\n\nBelle snorted and Willa and Leigh laughed.\n\n\"You went with the detachable penis?\" Belle stared at me. \"That's so sad.\"\n\n\"Hey, now,\" I blushed. \"I have a horny naked biker babe sitting in my lap, with my dick in her vagina. I'm a little shaken up right now.\"\n\n\"You can be real trying at times,\" Belle leaned into me compassionately.\n\n\"What? You said you wanted me to try your ass?\" I joked. \"Okay.\"\n\nBelle's vaginal muscles constricted around my cock, exciting me to hardness again.\n\n\"You rip up my ass and I'm going to rip off your balls,\" Belle grinned shark-like.\n\n\"Your? No, I meant Willa's ass,\" I verbally back-pedaled. \"Look, she's sitting there, ass up looking all inviting, lush, and full-formed.\"\n\n\"You wouldn't dare,\" Willa smirked at me. By her own accounts, Willa loved anal sex, but apparently it wasn't something she normally shared. Belle's instincts were leading her past the deception.\n\n\"Are you freaky, Willa?\" Belle mocked her friend.\n\n\"Hey,\" Leigh piped up. \"Barbie Lynn likes it and she's no freak.\"\n\nI rolled onto my side, trying to let Belle slide off my shaft.\n\n\"Am I going somewhere?\" Belle turned and joked with me. I shrugged, put my left hand on her shoulder and pumped into her hard several times.\n\n\"Okay, okay,\" Belle panted. \"Go bang Willa. My pussy is still tingling from the last orgasm, Stud.\" Belle twisted onto her stomach which allowed my cock to pop free. Belle moaned sensually and lay there for a minute with her eyes closed. Dangerously, Leigh crawled over Belle's still form, retrieved something from Belle's nightstand, and handed it to me -- lube.\n\nLeigh must have seen Belle pull it out and lube up the vibrator before shoving it in. Belle wasn't a total sadist. I slipped beside Willa who kept drinking me in with her eyes.\n\n\"Where do you think you are going with that?\" she said. Willa remained on her stomach, her ass proudly pointing up and proffered.\n\n\"Would you like to try anal?\" I winked. \"I'm sure if you try it, you'll like it.\"\n\n\"This won't make me your Old Lady,\" Willa teased back. \"I'll try it. Let's see what you've got.\" \n\n\"I only want to make you happy,\" I breathed into her ear. Willa shivered in anticipation.",
        "I brushed her hair to the far side of her head then kissed the top of her neck. Willa began to murmur pleasurably as I trailed butterfly kisses down her spine to her tailbone. A single finger stroked farther down to her pussy and down to her pubic mound. Willa was only lightly shaved, keeping her bush full.\n\nThe return trip lingered around her anus, pushing slightly and making Willa moan. She opened her legs farther and farther apart as I continued to rub her gently. With my free hand, I opened the tube of lubricant and let it pour down her ass cheeks. I teased her sphincter twice but abandoned it to rub the thick liquid all over her pussy and perineum.\n\nRecall that Willa was going through a long, dry spell -- being an undercover officer in an outlaw biker gang -- so she was bursting at the seams for sexual contact.\n\n\"Damn it, Zane,\" she pleaded.\n\n\"Willa, you are a freak,\" Belle chuckled.\n\n\"Watching him work has gotten me so horny,\" Leigh whined. I ignored the peanut gallery; I was dripping oil on my three middle fingers, pushing my forefinger against Willa's sphincter. Willa must have really liked her experiences with anal sex because she relaxed her sphincter on contact and let me in. Man, her asshole felt hot compared to the slight chill of the room.\n\nMy finger corkscrewed past the second knuckle when Willa let out another heartfelt moan. I pushed in a little farther while resuming my kisses on her back. Inside a minute, Leigh had sidled up to Willa and me. Belle had propped herself up with her pillow on the headboard but was studying the three of us intently.\n\n\"You are acting like you've never seen a three-way before,\" I commented to Belle.\n\n\"Not from the outside looking in,\" Belle shrugged. I had no immediate comeback to that. Saying something like 'maybe next time,' or 'enjoy the show' felt inappropriate. I devoted my attentions to Willa once more instead.\n\nSpeaking of Willa, she was now relaxed enough for me to stick my ring finger into her anus. I noticed Leigh getting terribly interested in Willa's arousal.\n\n\"Willa, rise up. Push up off the mattress for me, Babe,\" I coaxed Willa. She looked back at me, smiled lustfully, and began raising her ass.\n\nA few more twist and turns with my fingers and Willa was up on all fours, head down, and her face screened from view by her long, black hair. I was about to encourage Leigh but she was already slipping under Willa and putting her lips to Willa's closest tit. Willa's grunt rose over the sound of Leigh's suckling noise.\n\nI had to move completely to Willa's rear to allow Leigh more room to maneuver beneath Willa. Leigh's right hand quickly sought out Willa's cunt while her left began caressing Willa's right breast. I had to admire Leigh's enthusiasm as well as her willingness to not hold Belle's rough treatment against Willa.\n\nBelle began to rub her cunny as she watched us play. I also caught Willa shake her head ecstatically when I wormed my third finger into her butthole.\n\n\"Someone's all excited,\" Leigh giggled, as she lifted up her fingers that had been in Willa's cunt for me to inspect. They weren't just slick; they dripped with her juices.\n\nFinally, Willa had enough.\n\n\"Enough foreplay, Zane,\" she gasped. \"Put that big cock in me. Stick it to me now.\"\n\n\"Ask and you shall receive,\" I replied. With one hand on her hip and the other one on my rod I placed my throbbing cockhead against her mildly gaping sphincter.\n\nI could literally feel the breath slowly exhale from Willa's body as my cock first slipped inside her anal cavity.\n\n\"Zane, Zane, Zane,\" she exulted softly as I inched my way inside her rectum. I had been wrong all this time; I had thought I'd never find someone who liked anal sex as much as Barbie Lynn, but here she was.\n\nShe was tight, hot, and damp. By the snug fit I could tell she had abstained for some time but her reactions were pure pleasure -- to me and her. I could also feel Leigh's fingers vibrating rapidly within Willa's cunt as well as her vaginal muscles squeezing them back. I let my penis sit there for a moment before withdrawing all but the head.\n\nI repeated this three times, with Willa moaning louder each time I thrust my deepest.\n\n\"Hammer her,\" Belle demanded.\n\n\"Her ass -- her rules,\" I chastised the head Warlord Babe.\n\n\"Hammer me, Zane,\" Willa virtually screamed. O-kay then, a hammering I will go. I plunged in without mercy. The first thrust nearly toppled her over but on the second one, I held her hips tightly and she pushed back to meet my attack. The loud smacking of skin began to echo throughout the room.\n\n\"Don't -- stop -- un -- til -- you -- fill -- me -- up,\" Willa gasped between lighting swift penetrations. I felt like my hips were moving in a blur. Willa's whole body was a mass of spasms beneath me.\n\n\"Fuck, fuck, fuck, fuck, fuck,\" Willa gasped, then she squealed. Yes, squealed like a little school girl.\n\nI didn't relent, though. She had told me to keep going, so 'hi-ho, hi-ho, it was off to fuck I go'. I caught sight of an exhausted Willa turning her head sideways and mouthing something to Belle through her mass of hair. Belle tilted her head, then shook it in the negative.\n\n\"No, you can't keep him,\" she explained to Willa but for my benefit. \"Too many people know he's here. Wait until you get Zane alone before you take him.\"\n\n\"Hey! That's our line,\" Leigh spoke up indignantly. \"Kappa Sig property.\"\n\n\"You had better put those lips back to work on Willa before I put this vibrator back to work on you,\" Belle threatened. Leigh huffed, then went back to lip-smacking Willa's tit.\n\n\"Shit, shit, shit,\" then a squeal from Willa once more. Damn, that had been a fast one.\n\nAfter that, Willa went down to her elbows, smothering Leigh with her tit. Leigh responded by going hog-wild on the whole breast -- biting and chewing on the whole damn thing.\n\n\"Jesus Christ!\" Willa howled, followed quickly by the loudest squeal of them all. Her body contractions dissipated what remained of my self-control.\n\nI began ejaculating, grinding my hips hard into her ass and plunging to the farthest depths yet. Willa collapsed in a state of perpetual groaning. Belle was kind enough to pull Leigh free before I collapsed on Willa. I barely had the strength to prop myself up on my elbows so as not to crush Willa beneath me.\n\n\"Willa,\" Belle mused, \"you really are full of surprises.\" If only she knew -- or maybe it was better that she didn't know. It took a physically devastated Willa several seconds to reply.\n\n\"You aren't going to give me shit about this in front of the other girls, are you?\" she asked. Willa was a probationary Warlord so her reputation was incredibly vulnerable.\n\n\"Yeah; let me see,\" Belle ticked off events -- while massaging Leigh's half-raised leg from knee to inner thigh, \"From the sounds of it he nailed Fontana Palmer -- thrice -- before coming up here, kicking my ass, then fucking me so good all the lights came on. Then he rolled you over and plowed your butt through three orgasms ... no.\"\n\n\"They'll strap Zane down to the pool table for one hell of a weekend,\" Belle pointed out. \"All the guys will resent him for that, so they'll bust him up and put him in the hospital where he can't perform for a month. Then the female riot ensues. I don't need that kind of hassle.\"\n\n\"Thanks for looking out for me,\" I mocked.\n\n\"Eh, you are almost a friend,\" Belle smiled.\n\n\"Okay, on that note I'm going to take Leigh and leave,\" I began getting out of bed. Leigh had enough common sense to look to Belle for permission before climbing over Belle's legs and hopping free.\n\n\"Try to keep the noise down,\" Belle teased as I opened the door.\n\n\"I think Leigh's pussy has been abused enough for one night,\" I shook my head. \"We are going downstairs to cuddle.\"\n\n\"Nah-uh,\" Leigh said as she grabbed my hand. \"Penetration -- orgasm -- cuddle -- that's the way it's going to go.\"\n\n\"No, wait,\" Leigh corrected herself. \"Penetration -- orgasm -- orgasm -- cuddle is how it's going to go.\" I'm sure Willa and Belle heard my groan of despair as I shut their door.\n\n\"Leigh, your pussy looks much abused,\" I told her. \"How about we not have sex tonight?\"\n\n\"After all I went through -- please,\" she begged.\n\n\"How about we have a sex-date later this week,\" I suggested.\n\n\"I want to spend some time with you,\" Leigh pouted.\n\n\"Leigh, I have Fall Break this week,\" I informed her. \"We can have as much time as you like.\"\n\n\"You do?\" Leigh visibly perked up. \"Oh, thank God,\" she then moaned. \"I can barely walk, I'm so sore.\"\n\n\"Do you still want to cuddle?\" I asked.\n\n\"I'd love to, Zane,\" she sighed, as she put her arm around my waist. \"I want you to know that if it wasn't for Tawny, we really would keep you as our sex slave,\" she added lovingly. Yay me.\n\n\"That's it,\" I snarled. \"I'm going to go over there one night, tie all of you up, and butt-fuck the lot of you.\"\n\n\"Oh, that sounds like fun,\" Leigh giggled. \"Would we be tied up side by side so we could watch you do it to the sister next to us?\"\n\n\"Are you taking freak lessons from Rio?\" I wondered. \"Because you are starting to scare me.\"\n\n\"Nope. Frankly, with the way she wields that strap-on, she kind of scares us,\" Leigh confessed.\n\nAh, an unlooked for benefit of my Direct-to-Video lifestyle; I have provided the World with a warning label for Rio. Speaking of Rio, when we arrived at the sofa we discovered that she'd crawled up on it and was fast asleep again. I draped my blanket over her then curled up with Leigh in the quilt I had originally taken out for Rio.\n\nI lay down on my back and Leigh curled up on top of me. She started to say something to me but was overtaken by a yawn. She put her ear to my chest, yawned again then started snoring. I must have nodded off right after that because the next thing I knew Jill was shaking us awake gently.\n\n\"Leigh,\" she inquired, \"are you staying for breakfast?\"\n\n\"Sure, Aunt Jill,\" she yawned. \"Let me get cleaned up and I'll help out in the kitchen.\"\n\n\"Thank you, dear,\" Jill grinned. Leigh scampered off to the bathroom while Jill went to the kitchen. Rio was blissfully asleep still.\n\nI followed Jill into the kitchen and leaned against the counter while she soaked a paper towel under the faucet.\n\n\"Did you sleep well last night?\" I questioned.\n\n\"Oh, Zane,\" Jill smiled serenely, \"I learned to sleep through your antics several weeks ago.\"\n\nShe dabbed my cheek -- the one Belle had popped last night. It stung but I manned-up and took my mothering like a big boy. I made sure the ladies upstairs were awake before doubling back on my room to get dressed for Church. Fontana and Valarie propped themselves up and took in the show.\n\nAs I was making sure my tie looked good in the mirror, I caught Fontana smacking her daughter in the forehead. \"Sleep with that young man, damn it,\" she advised forcefully.\n\n\"Subtle, Mom,\" Valarie groused back. \"I mean, he's standing right there.\"\n\n\"What do you think, Zane?\" Fontana chuckled. \"Do you mind me giving my daughter some helpful advice?\"\n\n\"I'm not going to step into that conversation, Fontana,\" I evaded, \"and Val, that was a mean thing you did to Leigh. Belle was unforgiving.\"\n\n\"She should learn to use a door like a normal person,\" Valarie smirked.\n\n\"I am just warning you that Belle is particular about her private space,\" I cautioned her.\n\n\"Valarie, you should clear the air with Belle,\" Fontana advised her daughter. \"This is her home too and her territory.\"\n\n\"I'll take care of it,\" Valarie yawned then shrugged. I had the feeling she wasn't taking this seriously. \"Let's get some food, Mom. I still need to get dressed for Church too.\"\n\nOh, Valarie didn't know the half of it, but I managed to keep Rio and her from ragging on Belle when they learned that Belle had lost a 'bet' with me and had to wear a dress to church along with the rest of them. Rio turned out to be hangover proof. Jill cooked up a wonderful breakfast and Leigh received her measure of revenge when she, Belle, and I had to go over to the Kappa Sigma house to find a dress that fit.\n\nOh, those sorority girls were walking a thin line between cordiality and an ass-whooping because Belle wasn't in the mood to take shit from anyone. Tawny was a big help and Jersey provided the acceptable black dress for Belle to wear. Ricky provided the stockings and shoes.\n\n\"The first one to say a damn thing dies,\" Belle glared at the assembly back at my house when she walked in the door.\n\nJill must have missed that. When she came downstairs and saw Belle, she walked up and hugged her.\n\n\"You look beautiful, Belle,\" Jill said while examining her.\n\n\"Ah -- thanks, Jill,\" Belle looked around evasively.\n\nHad anyone else said or done that, we would have died. Jill received a weak smile instead. Belle ended up in Sunday school class with Jill, who introduced her as Belle Kennan -- and no one made the connection despite Belle's constant scowl. Rio bringing Belle around to the Masters clan did something to ameliorate the situation.\n\nSuddenly having the young unattached males of the church pay attention to her was something Belle found downright darkly amusing. Rio was running around, introducing Belle as her Aunt from Michigan -- very single and clearly well-connected. Rochelle Wellington was the only one to figure out the ruse and she said nothing.\n\nOnce we got home, Belle couldn't wait to be shed of those clothes. I took them back to the Kappa Sigmas with my gratitude for helping out yet again. When I came back I found Belle standing alone on the back porch.\n\n\"Penny for your thoughts,\" I said.\n\n\"I really ought to punch your lights out for putting me through that,\" she opened up. \"I fucked three of those guys in high school and they didn't even recognize me now. I was in a pretty dress, a touch of make-up, and hung around with rich friends and -- BANG! -- suddenly I wasn't the poor, dirty tramp in their eyes anymore.\"\n\n\"Who gives a crap what they think or remember?\" I countered. \"You are still the same unique you no matter how you dress.\" Calling Belle beautiful was pointless -- true but pointless -- because she would have read that as me trying to get back into her pants.\n\n\"You've never wanted for anything in your life,\" she mused.\n\n\"What the fuck?\" I rounded on her. \"Bitch, for two years I only got to take showers when it rained; forget having any deodorant, and for amusement we played tag with pythons because we only had electricity when someone was pedaling the bicycle.\" She rounded on me with an angry rebuttal but immediately burst out laughing.\n\n\"Yeah,\" she snickered, \"and I finally got it out of Jill what a bad little monkey you were too. She told me you had 30 girlfriends and would screw around behind Tim's back all the time. You were a slut too.\"\n\n\"Where? Belle, look around you,\" I grinned. \"I am still a slut and proud of it.\"\n\n\"Fuck you,\" she smiled. \"Here I was getting worked up into a true fury and you come along and cheer me up.\" \n\n\"That's what friends are for,\" I quipped.\n\n\"I should have shoved Rio's head down that toilet,\" Belle teased. \"You really complicate my life. Let's go in and grab a bite before we get all mushy.\"\n\nThat First Time\n\nFontana wasn't leaving until the morning so Valarie decided to spend another night at my place. I didn't want another night on the sofa so I opted for Rio and me to crash out in my dorm for the night. Vivian would be gone for the week; I hoped she would be spending quality time with her boyfriend Thomas.\n\nBarbie Lynn would be around once she saw her family off, but Opal, Brandi, and Paige, plus Christina and company, were gone for the week. They were all due back Saturday afternoon. The dark lining to this silver cloud was that both Paige and Heaven were ... 'needy' and that didn't bode well for my Saturday night upon their return.\n\nThat left us with twelve other girls on my floor tonight, one of which was Iona. She had decided that her time was better spent keeping Rio and me in line than being bored out of her skull back in her hometown. I was sure the fact that we would have a good deal of unobstructed time together had nothing to do with it.\n\nIona was cuddled up with me on my right side on the large sofa closest to my bedroom screens. On my left, Rio was slouched down, channel surfing. She never stayed on any program long enough to see if it was any good. She was bored and angry. I was peripherally aware of someone activating the door and coming up but I wasn't paying too much attention until I noticed someone standing there and looking around for somebody.\n\nIt was Mercy. I could hardly believe it. Our eyes met and she shrugged in confusion. She couldn't see Rio because my buddy's head was below the top of the back of the sofa. I surreptitiously moved my left arm over the top and then pointed down to where she was. Mercy's eyes lit up and she skipped on over, her bouncing proving to me she was braless.\n\nRio was in such a foul mood, she didn't notice, so Mercy began leaning over until her shadow interfered with the suspended lighting. Finally, Rio rotated her face up to see what the problem was and looked right into Mercy's eyes.\n\n\"Hey, you,\" Rio sounded remarkably nonchalant.\n\n\"Hello, Rio,\" Mercy grinned hopefully. \"I convinced my parents that I had to stay.\"\n\n\"That's nice,\" Rio shrugged. Considering all the hell Rio had put me through during Homecoming and this weekend about Mercy being gone, I wanted to start punching her.\n\n\"I wore my collar all weekend,\" she indicated the collar Rio (me, really) got her that had the school colors but Rio's initials on it.\n\n\"I expressly forbid you from doing anything that might tip your parents off,\" Rio shook her head. \"Simple fucking instructions and you manage to screw that up,\" she sighed. \"I'm going to have to spank that kitty, aren't I?\"\n\nMercy's smile grew absolutely wanton.\n\n\"I bet you are not wearing underwear, you tramp,\" Rio looked put out.\n\n\"I seem to have lost them on the way over here,\" Mercy beamed.\n\n\"Really? 'I lost them' is the best you can come up with? Give me some nipple-age, damn it,\" Rio insisted. Mercy bent over farther while Rio unbuttoned Mercy's shirt.\n\n\"Remember, I'm only biting and sucking on these bad babies because you've been naughty, not because I enjoy it,\" Rio informed Mercy as she wiggled up to meet those naked breasts half way.\n\n\"Okay,\" Mercy sighed happily as the first dangling breast went into Rio's mouth and her lips sucked the nipple in so her tongue could abuse it.\n\nRio alternated between Mercy's tits, slurping and nibbling but not really biting down, as promised. She also reached up and grabbed her lover's shoulders, pulling her farther and farther. I was sure Mercy's feet had come off the ground. I would have looked but Iona took that moment to begin massaging my thigh.\n\nI looked to her; she was looking over at Rio and Mercy when Mercy started tumbling head first onto the sofa. Rio rolled Mercy onto her back, her skirt bunching up around her waist to reveal her baby-smooth pussy.\n\n\"You are my bitch, Bitch,\" Rio growled as she pressed down on Mercy and tried to kiss her.\n\n\"No -- no,\" Mercy giggled as she kicked her heels, shook her head from side to side in an effort to avoid the kiss. \"Please, let me go. I don't want to be kissed, or licked, or spanked, or have my body abused all week long. No, that would be horrible. Please, please, please, release me. I'll be good. I won't tell a soul about the terrible things you have planned for me.\"\n\nRio hovered there, clearly in shock.\n\n\"Why you rebellious little slut,\" Rio gasped. \"Oh, I'm going to ream your ass for that little outburst.\"\n\n\"Eeep!\" Mercy squeaked.\n\n\"Move that butt to the boudoir, you skanky whore,\" Rio pulled Mercy off the sofa, then spanked her bottom. Mercy looked over her shoulder fearfully and hurried that way with Rio in hot pursuit. Iona stood up, pulled on my arm and led my gaze to their retreating forms.",
        "\"You want to join them?\" I questioned.\n\n\"I want to watch,\" Iona clarified. \"They are so much in love; it is a beautiful thing to witness.\"\n\n\"That it is,\" I agreed as I stood up as well. I led her toward my bedroom, Iona squeezing my hand tightly.\n\n\"Also, getting naked under the covers with you has its own appeal,\" Iona gave me a cute, hopeful look.\n\n\"What makes you think I'll get naked?\" I teased.\n\n\"Well, Zane, you are my friend -- and you're easy,\" she teased right back. Ouch!\n\n\"I prefer easily accessible, thank you very much,\" I stated indignantly. \"Have you been taking etiquette lessons from Rio?\"\n\n\"Zane,\" Iona pouted. \"That was unfair. I'd never abuse you the way Rio does -- or Barbie Lynn, or Paige, or Heaven.\" As we rounded the last turn in the Chinese screen maze that separated my sleeping quarters from the rest of the floor, Rio was pushing Mercy face-first onto her (Rio's) side of the bed.\n\nRio squatted behind Mercy. Mercy's torso was on the bed but her legs were still splayed over the edge. Rio probed forward, took a lick of that pussy, then another, before spanking Mercy's right cheek.\n\n\"Has anybody else been using what is mine?\" Rio inquired threateningly. Mercy shook her head violently in the negative.\n\n\"Are you sure?\" Rio persisted. \"You are pretty clueless. Someone might have sexed you up while telling you they were doing your taxes, or something stupid like that. Did you let someone do your taxes?\" Again Mercy shook her head 'no'.\n\n\"Well ... I don't trust you,\" Rio mused. \"Zane, come over here.\"\n\nBy this time, I was naked -- I take off my clothes really fast because I hang around with some impatient women -- and Iona was down to her socks and panties.\n\n\"Sure,\" I responded. I walked around the bed until I was looking over Rio's shoulder.\n\n\"Does this cunt and asshole look used to you?\" Rio asked me.\n\nI reached out and with my forefinger, rubbed along Mercy's slit, starting with her clit. It was still a small nub but a few circles by my finger brought her out to play. Mercy moaned, wiggling her hips as she did. I scooped up from there, dipping between her labia until her fluids coated my fingers. I brought the finger up for a taste.\n\n\"Yum,\" I grinned at Rio, who double-pumped her eyebrows and smiled like the madwoman she was. I stuck my finger back in Mercy's pussy to get it nice and wet again, causing Mercy to moan repeatedly. This time, I placed my finger against her anus. I rubbed it around but didn't try to press it in.\n\nThe moment Mercy decided I wasn't going to give it to her, she thrust back, trying to drive my probing digit inside of her anyway. Rio smacked Mercy's ass to make her stop.\n\n\"No, you don't, Wench,\" Rio threatened.\n\n\"Rio, your baby-girl is pristine -- she's nice and tight,\" I informed my buddy.\n\n\"Thanks, Zane,\" Rio snickered. \"I can never tell with this slut, she's always so horny. Or maybe I'm always so horny for her -- I get those confused.\"\n\n\"How about option three: you both are hot, horny babes addicted to each other's bodies?\" I offered.\n\n\"I really don't care what Mercy feels,\" Rio lied. \"She's only serves as a vessel for my lusts. Don't you exist to be solely a receptacle for my lusts, Slut-Bunny?\"\n\nMercy slid down the bed until her knees touched the ground. She turned around to the less than amused Rio, waddled up to her lover and wrapped her arms around Rio's waist, hugging her tight.\n\n\"Yes, yes, yes,\" Mercy murmured contentedly.\n\n\"What the -- listen, you sk- --\" Rio started out angrily. She never finished calling Mercy a 'skank'. She hesitantly, then gently, ran her fingers through Mercy's hair. \"I missed you so much -- I was going nuts without you; just ask Zane,\" Rio gave her heartfelt confession.\n\n\"Rio,\" Mercy looked up as Rio petted her head, \"I've given this a lot of thought and I want you to be my first -- tonight -- right now,\" Mercy pleaded. Rio's eyes shot a panicked look in my direction.\n\n'You can handle this,' I mouthed my assurance to my Best Buddy.\n\nRio returned her gaze to Mercy and tilted her lover's head up until their eyes met.\n\n\"You know there is no coming back from this,\" Rio stated. Mercy nodded. \"This will make you mine forever,\" Rio said next. Mercy nodded with greater vigor. \"You know I am a complete fucking train-wreck and am more likely to ruin your whole damn life than make you happy.\"\n\n\"I am yours and you are mine,\" Mercy whispered, mimicking the tattoo Rio had placed on Mercy's back.\n\n\"I can't do this,\" Rio stroked Mercy's cheek. Mercy looked devastated. \"We are both wearing clothes -- how can we properly make love if we are both still wearing clothes?\" Mercy gawked, then shoved her face into Rio's stomach and bit down -- hard, it appeared.\n\n\"Ow, Bitch!\" Rio screamed. \"That hurt.\"\n\n\"Rio, you nearly scared me to death.\" Mercy sounded so pitiful as she looked back up at Rio. I really had no idea how Rio's twisted, crazy mind would take that. For a second, I thought she'd explode -- Rio didn't take pain like a rational person.\n\n\"I apologize -- Love. I have no excuse,\" Rio responded softly. She even used the 'L' word.\n\n\"Really?\" Mercy whispered. Rio nodded. \"Will you do me one favor?\"\n\n\"Okay,\" Rio replied cautiously.\n\n\"Please never apologize to me again, my Love,\" Mercy pleaded. \"It scares me nearly as much as you being mean to me a moment ago.\" Rio studied Mercy for a few seconds.\n\n\"Did you use the 'L' word?\" Rio glared at Mercy. Mercy's eyes grew wide; she then buried her face back into Rio's stomach and began kissing away. \"No, you don't, Wench. I will not be mollified by your sloppy, wet kisses. Strip your ass down and get into bed. Mom is going to go primeval on every inch of your smoking hot Temple of Babylon.\"\n\nMercy smiled, spun around, and quick-stepped as fast as she could back to the bed while still on her knees. Rio flashed me a look that spoke of a happiness I had never seen in her before. She was slipping out of her skirt as she hopped her way to her dresser, undoubtedly to get some toys. As for me, I crawled past Mercy and slipped under the covers held open by Iona.\n\n\"Should we leave?\" Iona whispered to me.\n\n\"Mercy is somewhat of an exhibitionist and I doubt Rio cares,\" I answered quietly.\n\n\"In that case, let me get close to Mercy in case she needs some comforting,\" Iona told me under her breath. Before I could reason that out, she snuck her naked, tight little body over mine and slid under the covers to be close to Mercy.\n\nIona reached out a hand tentatively toward Mercy. Mercy regarded it, gave Iona a warm smile, and placed her fingers in Iona's palm. Rio affixed her modest-sized strap-on and lubed it up before walking over to Mercy. Her lover seemed entranced with the way the false phallus bobbed about as it approached her.\n\nRio threw back the blanket roughly so she could gaze down at Mercy's beautiful naked form. Instinctively, Mercy began to move her knees up to her chest.\n\n\"What's that?\" Rio pointed to Mercy's hand being held by Iona. Mercy started to withdraw it when, \"Did I tell you to move it?\" Mercy stopped. \"Put that hand back and put those legs down, you insipid cow.\"\n\nDown came Mercy's legs with a muffled thud.\n\n\"Now I'm going to fuck you like I own you,\" Rio growled.\n\n\"You do own me,\" Mercy chirped. \"I'm yours.\"\n\n\"Are you ready for me to pound that pussy?\" Rio glared.\n\n\"Yes,\" Mercy moaned softly.\n\n\"Well, tough,\" Rio smirked. \"You don't tell me what to do. I'm going to do this at my own pace, damn it.\" She sidled down to the foot of the bed while still facing Mercy. With delicate ease, Rio lowered her lips to Mercy's right big toe, kissed it then began sucking on it.\n\nMercy had raised her chin to her chest so she could meet Rio's steady gaze. As Rio began playing with her toes, Mercy shivered and groaned. When Rio switched to the left foot, Mercy whimpered.\n\n\"Please, Rio,\" she moaned.\n\n\"Hush, you,\" Rio mumbled around the current toe she was sucking on. \"You are my plaything and I'll do what I want with you.\" Mercy's head fell back on the pillow as she clutched Iona's hand tightly. Iona seemed totally taken with events. She had rolled on her side so I cuddled behind her, my cock pressing against the small of her back, and began kissing her shoulder.\n\nIona pushed back into me and wiggled her butt against my thighs. She also reached back, took my free hand in her own then placed them together on her stomach. She matched me as I traced small circles over her torso.\n\n\"I hope I find someone who makes me that happy,\" Iona murmured.\n\n\"You'll find someone worthy of you, Iona,\" I replied quietly. She tilted her head to give me better access to her neck.\n\n\"I believe I will, Zane,\" Iona purred. \"Now I know what to look for.\"\n\nRio was taking her sweet time with Mercy -- torturing the poor girl with lust.\n\nIona actually scooted over and gave Mercy a quick peck on the cheek to comfort her. She was back in my arms before Mercy could decide to take shelter in Iona's innocent sexuality. This was Rio and Mercy's moment and we knew she shouldn't forget that. When Rio got to the knees, she pressed Mercy's legs farther apart and rotated the hips so she could access the back of Mercy's knees.\n\nShe was running the tip of her tongue along the inner joint, driving Mercy nuts. The girl was humping her crotch up in the air and began pinching her right nipple.\n\n\"None of that, you cougar-wannabe,\" Rio snapped. \"You can't toy with my playground. It's mine.\" Mercy's face scrunched up in frustration as a single tear escaped her left eye.\n\nMercy's free right arm began to flail about as Rio reluctantly stopped teasing the knees and began nibbling her way up Mercy's thigh. Iona felt the sympathetic energy and began massaging her left breast.\n\n\"Please don't,\" she gulped as I moved my hand to her right breast. \"I'll lose it and this should be their time, not mine.\"\n\n\"Yes, Mistress Iona,\" I teased quietly. \"Whatever you desire.\" Iona pummeled me with her butt against my thighs.\n\n\"Behave,\" she sighed.\n\nRio kept pushing Mercy's legs to the side until she was face (and lips) to Mercy's smooth cunt, letting the breath from her nostrils tickle the surface.\n\n\"Something's been drooling, all,\" was all Rio got out before Mercy exploded into orgasm.\n\n\"MotherfuckingChristGoddamn!\" Mercy howled. Her whole body shook like an epileptic seizure had taken over.\n\n\"Cunt-muncher,\" Rio sputtered. \"Did you just squirt in my face?\"\n\nMercy was in no shape for an immediate reply. I didn't help matters when I snickered at Rio as her face rose above Mercy's thighs. Syrupy vaginal fluid was dripping off her nose and chin. Rio glared at me. I had a sinking feeling she was about to exile me from my room.\n\n\"I'm -- I'm sorry,\" Mercy groaned.\n\n\"I was thinking weak, pathetic, or nasty,\" Rio grumbled. She began stalking up Mercy's body on all fours until she was face-to-face with her toy. \"Was that the extent of your apology?\" Mercy propped herself up feebly and began to lick Rio's face clean. \"If I'm not satisfied, no fucking for you tonight,\" Rio taunted her. That spurred Mercy on. She was sucking Rio's eyelids and eyebrows, licking her cheeks, jaw and neck as if her life depended on it.\n\nMercy ended up trying to French kiss Rio but she was having none of that.\n\n\"Do you think I've got some of your cunt juice hiding under my tongue?\" Rio quizzed her. Mercy gave a short, energetic nod. Rio cracked a smile and her lips and Mercy dove up to literally tongue-fuck Rio's mouth until she was thoroughly satisfied she'd gotten every drop.\n\n\"No, you don't,\" Rio chastised her. \"I know what you are doing and it is not going to work. I'm going to spank that sopping wet kitty and there's nothing you can do to distract me.\"\n\n\"Have mercy,\" Mercy pleaded convincingly.\n\n\"Oh, I am going to have Mercy again and again and again,\" Rio mocked her lover.\n\nRio retreated down Mercy until her false cock slipped past her pubic mound. Rio used her right hand to guide the dildo up and down between her labia. The response was tiny simpering noises from Mercy. When Rio let the tip enter her vagina, Mercy became very still.\n\n\"Relax, Babe,\" Rio urged her gently. \"It will make it less uncomfortable.\" Rio avoided using the word pain.\n\n\"Deep breaths, Babe,\" Rio soothed her. \"Think about how much pleasure you feel when I shove this dick up your ass. It will be the same way with your pussy, but better.\" \n\nI could tell Mercy was really trying and that was the problem; she was trying too hard. Rio had an answer for that though.\n\n\"I've got a better idea,\" Rio grinned wickedly. She pulled out of Mercy and waggled her phallus at her mate. \"I'm not going to do all the damn work, you perverted minx. Hike up those legs and spread them wide -- none of this folding at the knees crap. I'm going to mount you like John Smith ambushed Pocahontas, leaving you stupefied and wondering who the fuck just hammered you through the New World.\"\n\n\"I'm going to fuck you harder than the Pilgrims screwed over the Wampanoag -- you are going to ride my cock 'til dawn.\" I image the rest of us clearly showed our amazement that Rio knew so much -- well, of anything, much less American History. \"What the fuck?\" Rio took in our gawking. \"I read -- things -- occasionally. Don't look so shocked.\"\n\n\"Iona,\" Rio added, as she went back to looking down on her woman, \"get my camera phone. I want to record this moment for posterity.\"\n\n\"Zane?\" Iona whispered to me. She didn't want to put either Rio or Mercy at risk of exposure.\n\n\"Its fine,\" I petted her shoulder. \"You can make sure the file is secure.\"\n\n\"I'm okay with it,\" Mercy assured Iona. \"I trust Rio.\"\n\n\"Be quiet, Pumpkin,\" Rio sneered. \"This is going up on YouTube fifteen minutes after we are done. I'm going to title it: Lush Virgin Innocent plundered by Psycho Mistress.\" I groaned as Iona slipped off the bed to get the phone. \"What; not descriptive enough?\"\n\n\"Plunder me! Plunder me!\" Mercy meeped. Rio slapped both of Mercy's nipples.\n\n\"Hush, you,\" Rio glared at Mercy. \"The only thing I want coming out of that mouth had better be your tongue in my vagina.\" Iona walked up and handed the phone to Rio. \"You keep it, Iona,\" Rio told her. \"You'll get a girl's point of view. With Zane, it will be nothing but tits and ass.\"\n\nWe both knew that wouldn't be the case -- most likely wouldn't be the case. Iona returned to my side but was sitting up on her knees. She looked at the image in the phone and edged forward. I moved in behind her so that my stomach was against her buttocks. I remained reclining. Iona reached out and took Mercy's hand once more.\n\n\"I'm ready,\" Iona said softly. Mercy paled, biting her lip over her dual anxieties. Rio had let slip a serious yet compassionate facial expression which reaffirmed that her Mistress was about to take her. The other was the originally unlooked for trait of Mercy the Exhibitionist. Oh, it terrified her that her sexuality would be discovered, but that thrill only made her actions that much more vibrant and alive.\n\nRio positioned her fake phallus at the gateway to Mercy's virginity again. She leaned over Mercy, her arms resting on her fists to either side of Mercy's breasts, but her lady was taller and Rio couldn't quite span the gap between their faces.\n\n\"Get up here and kiss me, Mercy,\" Rio said, choked with emotion. \"Kiss me one more time as my fuck toy. Next time we kiss, you'll be my girlfriend.\"\n\nMercy used her right elbow to prop herself up until her lips met with Rio's.\n\n\"Are you going to own me, use me, and protect me forever and ever?\" Mercy pleaded.\n\n\"Baby-cakes, I own you for all time, I am never going to become tired of using you, and if anyone except me lays a finger on you, I'll wipe out their whole fucking family,\" Rio recited her twisted version of a marital vow with the tenderness of a child addressing a kitten.\n\n\"Thank you for choosing me,\" Mercy fought back tears. The kiss she gave Rio was long, passionate, and steeped in familiarity. Mercy was still enraptured with the declaration and kiss when Rio pushed forward. Mercy's hymen tore, completing her evolution from the blindly obedient school girl that had come to my room as one of the Chancellor's enforcers so few weeks ago into the woman who dared to experiment with her deepest erotic desires.\n\nMercy's eyes welled up with tears due to the pain. She trembled and her lips quivered. Rio didn't relent despite her lover's pain. She drove the dildo in relentlessly to the hilt. She ground the strap-on's base against Mercy's clit, withdrew a half inch, then slammed down hard. At the same time, she moved her left hand around to the back of Mercy's head, grabbed a handful of hair and forced Mercy into another kiss.\n\n\"What are you, my little Orgasmic Bombshell?\" Rio demanded.\n\n\"I'm your girlfriend,\" Mercy sobbed through the renewing pain.\n\n\"You don't sound very convinced,\" Rio insisted. \"Am I going to have to put a ring on that clit?\" she bumped Mercy's clit again, causing Mercy to gulp and whimper.\n\n\"Not enough to teach your confused, simple mind who the boss is? Nipple rings it is, then,\" Rio taunted with all apparent seriousness. \"You still don't get it?\" Mercy shook her head, tears starting to seep down her cheeks as Rio kept fucking her. \"Nose ring?\" That suggestion seemed to scare the girl, probably because hiding such a piercing would be difficult.\n\n\"Oh, sigh,\" Rio exaggerated. \"I guess nothing but putting a ring on that finger will beat the point home.\" Mercy's eyes grew wide and her mouth gaped open. \"Of course, that makes me your husband and Master -- none of this wife-shit for me. You'll have to do double duty as wife and sexual gratification machine -- available for sex on demand.\"\n\n\"Okay,\" Mercy wept joyously. \"I am so annoyed with you right now -- Annoyer.\" Annoy = love; that pretty much symbolized those two.\n\n\"Mercy, if you fail me this time, I'm going to clone fifty of me and fuck you until you explode,\" Rio threated. Damn, Rio was so often unhinged from reality and common sense.\n\nI figured the only reason Mercy didn't rebel right then and there was that she knew Rio couldn't really clone herself. Otherwise, death by multiple orgasm was exactly how Mercy would chose to exit her mortal coil, and Rio knew it. She also knew she was hammering Mercy into another orgasm quickly.\n\n\"Christfuckshithell!\" Mercy screamed. Her legs vibrated then fell to either side of Rio. She wept, screamed, and convulsed on the bed but her Mistress held her firm by the hips and head. When Mercy finally collapsed, boneless from the exertion, Rio gently withdrew her cock from Mercy's vagina and settled on Mercy's right side, studying her intently.\n\nMercy's chest rose in ragged pulses for over a minute. Her first act was to release Iona's hand and carefully place it on her labia, dabbed it gently, then drew the results up to her face. Vaginal fluid mixed with a trace of blood was what she saw. Mercy's smile returned then. She rolled facing Rio and curled submissively into Rio's body, her head resting between Rio's breasts.\n\nThe four of us were quiet for some time. It was Mercy who broke the silence.\n\n\"I'm okay,\" she murmured into Rio's chest. It took Rio nearly half a minute to respond.\n\n\"You talk too much,\" Rio whispered to Mercy as she stroked her hair. \"I think you can find something better to do with that mouth, so get to it.\" Mercy began suckling. \"Good girl.\" "
    ],
    "authorname": "FinalStand",
    "tags": [
        "college",
        "humor",
        "bikers",
        "lesbian",
        "cunnilingus",
        "sorority",
        "anal sex",
        "mff",
        "older woman",
        "first time"
    ],
    "category": "Group Sex",
    "url": "https://www.literotica.com/s/christian-college-sex-comedy-ch-34"
}
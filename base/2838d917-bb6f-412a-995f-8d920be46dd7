{
    "title": "Luscious Young Neighbor",
    "pages": [
        "This union was meant to happen, and it did.\n\n*\n\nNote: I've been a writer for quite a while, but this is my first effort with erotica. Please be patient; the action builds slowly but surely. Any comments or suggestions are welcome. \n\n*****\n\nScott Sheldon didn't think he was actually falling in love, but he was definitely in lust.\n\nHe was 32, had gotten divorced seven months ago, and was happy to be away from his hateful wife, who became a completely different person once they'd gotten married. She went from sweet and sexy to bitchy and frigid almost overnight, and he still wasn't sure how he lasted six rocky years with her.\n\nBut she wasn't his problem now (except for the monthly payments); his next-door neighbor was.\n\nThe O'Connor family had lived next door since Scott and his wife had moved in right after they were married. At the time, the neighbors' daughter, Dani, was 12 and cute as a button, with curly red hair and a bright smile. \n\nBut now she was a senior in high school, and she had become a budding superstar in the looks department. He had tracked her development through the years and she was now so hot - in an understated way - that he had a hard time concentrating when she was around.\n\nScott wouldn't say he was obsessed with Dani, but he would admit that there were many nights, especially lately, when it was hard to get to sleep without taking care of his throbbing dick first. And most of the time, while he was stroking himself, he imagined what it would be like to hop into the sack with Dani.\n\nHe had kept himself in good shape, partly because he had a home gym he frequently used, and mostly because the landscaping company he worked for kept him active.\n\nScott hadn't really returned to the dating scene yet because he wasn't ready mentally, plus he couldn't keep thoughts or visions of Dani out of his head. Something was going to have to happen.\n\n***\n\nDani O'Connor had never known what love is, but she was starting to understand the vibes her young body was giving her.\n\nShe had led a fairly sheltered life so far. Her parents were basically workaholics, trying to build their business, a financial consulting firm a 30-minute commute away that required them to take frequent overnight trips. \n\nAs she had grown up, she had been watched by a nearby aunt when her parents were away, and her aunt had been even stricter than her parents.\n\nAs a result, Dani had always been a really good student, had worn conservative clothes and hadn't done much on the social scene. She had developed very few close friends, and spent most of her free time doing homework, reading and playing in her back yard. \n\nProbably the best thing her parents had done for her was agree to put in a backyard pool three years ago.\n\nBut several things had changed over the last year. For one, her aunt had died. Her parents decided that she was old enough, and they trusted her enough, to allow her to be alone after school, and even some of the times they needed to be out of town.\n\nFor another, Dani noticed that she was becoming more popular at school. She had a new BFF, Trina, and she noticed that quite a few boys were being much friendlier to her. As a result, she had started dressing a little less conservatively and she liked the results.\n\nShe had even been on a few dates after her parents reluctantly gave in to the idea, and she had allowed those boys to get to maybe second base - one even almost got to third base - before she had urged them to stop. \n\nSo Dani had experienced having her breasts roughly caressed, and a finger had been in her pussy, and she had felt a penis with her hand, but there was something holding her back from trying more.\n\nThat something was Scott, the O'Connor's dreamy next-door neighbor. Dani had had a crush on Scott almost since the day he moved in with his bitchy wife, and as she had gotten older, that crush had never gone away. In fact, as her body developed and she became more in tune with it, those feelings for Scott had intensified.\n\nSo here she was, her 18th birthday one week in her rear view mirror, with a small pool party planned for Saturday night, when her parents would be attending yet another conference. \n\nAnd all she could think about was Scott, and what would it feel like if she could figure out how to get him interested in her enough that he could be her first.\n\n***\n\nOn Monday, Scott arrived home from work, took a shower and wandered out to his back deck to have a beer. He heard music playing next door, so he thought maybe Dani was out in the pool area. With that in mind, he went back inside and upstairs to the back bedroom. He picked up his binoculars and went to the window, hoping for a good view of his young neighbor.\n\nWhat he got was much more than he'd planned for. Dani was walking up the steps of the pool and she was wearing a very tiny and very wet yellow-striped bikini that left little to the imagination. He had never seen her wear anything other than a one-piece suit before, so this was quite a step.\n\nScott immediately started growing a chub as he looked over her light and freckled skin. Dani had to be at least 5-foot-8, so she was equipped with a set of nice, long legs. That led to a spectacular butt that had just the right amount of baby fat to give her cheeks the impression they were ready to burst out of her suit's bottom. \n\nShe had pulled her long auburn hair back over her shoulder as she turned toward him, heading for a chaise lounge. That gave him a perfect view of her front. \n\nHis eyes were drawn to her chest, where she was displaying - maybe for the first time he could remember - some serious cleavage. Partly that was due to the cut of the suit, but her firm breasts were making that bikini top stick out, and her nipples were clearly making bumps in the material.\n\nScott almost felt faint as he took in the wondrous vision. And it got even better when she moved to lay down on the lounge, because her tits nearly fell out of her top and Scott could swear he was able to see every inch of those fleshy breasts.\n\nHe had no choice. He dropped his shorts and briefs and sat on the bed, gripping his hard-on and closing his eyes as he tried to preserve that glorious sight. When he did open his eyes, he thought he saw a flash of yellow in his neighbor's yard, but he was too far gone to really notice.\n\nScott reached for a bottle of lotion he kept on the table next to him, slathered it on his dick and pounded away. It wasn't long before he erupted, sending a spray of cum onto his stomach and up onto his shirt. He was squeezing out the last of his semen when his doorbell rang.\n\n***\n\nWhile in the pool, Dani had been thinking about her upcoming party and all she had to do to get ready. She did not want to have the party get out of hand, so she was trying to limit it to Trina and their circle of friends, plus a group of guys from the soccer team.\n\nThen as she went to lie down on the chaise, she remembered that she needed to talk to Scott about a few things. So she walked in the house, threw on a tank top and shorts and walked next door to ring his bell.\n\nShe was about to leave when Scott finally opened the door.\n\nHe said, \"Oh, hey, Dani, what's up?\"\n\nDani noticed that Scott's face was flushed and he was wearing a robe that wasn't really tied that tight. She said, \"Are you OK?\"\n\n\"Sure, I was just getting out of the shower.\"\n\nShe noticed his hair wasn't wet, but, whatever.\n\n\"Do you have a minute? I have a couple of questions for you. I'm hoping you can help me get ready for my party.\"\n\n\"Absolutely. What party?\"\n\n\"Well, I turned 18 last week, and on Saturday I'm having a small pool party to celebrate. I know your company does our mowing, so could you make sure it's done Friday?\"\n\n\"Sure, I can make that work. I'll take care of it myself.\"\n\n\"And ... I hate to ask, but do you think you could buy some beer and stuff for us? My friend's brother was going to do it, but he got in trouble with his parents and doesn't want to take a chance. I have two designated drivers lined up, so you won't get in trouble.\"\n\n\"Uh, yeah, I guess I could do that. Do your parents know about this party?\"\n\n\"Well, no. They're on a trip again - they're taking off Friday afternoon and won't be back until Monday. Is that a problem?\"\n\n\"Not for me. Just wanted to make sure what the deal was.\"\n\n\"All right ... thanks. I was hoping I could count on you.\"\n\n\"Dani, you can always count on me. If there's anything else you need, let me know.\"\n\n\"OK, thanks. See ya.\"\n\nAs Dani turned to go, she thought, \"Well, there is something else you could help me with, but I don't know how to ask for it.\"\n\n***\n\nScott closed the door and laughed to himself. \"Just got out of the shower\" - yeah, right. What if he had told the truth? \"Well, Dani, I was checking you out with my binoculars, which got me really turned on, so I jacked off and came all over myself.\"\n\nBut then he thought: She was 18 now, huh? Interesting. Maybe he wouldn't feel so guilty when he was having all those impure thoughts about her.\n\n***\n\nTuesday, Trina came over to Dani's house after school. Trina had made it her mission to help Dani with her transformation from conservative bookworm to a normal high school senior. She'd done a lot of work so far, and she could see Dani's potential, but she had a long way to go.\n\nToday, she was working with Dani on using some makeup. All the while they were chatting about the party, who was coming, what they were going to do, etc.\n\n\"You know, Dani, you should check out Brad. He's coming with the soccer guys, I think. He's pretty good looking, I hear, but I don't really know him.\"\n\n\"Jenny told me he was coming. She might be after him, too.\"\n\n\"Well, you should get the first shot - it's your party, after all. Hey, did you ever get that bikini we saw online last week?\"\n\n\"It came Monday. It's pretty, um, skimpy.\"\n\n\"But does it fit? Let me see it.\"\n\nDani pulled the yellow suit out of her bureau and held it up.\n\n\"Wow,\" Trina said. \"Put it on - I want to see what you look like.\"\n\n\"Now?\"\n\n\"Yeah, why not?\"\n\nWell, Dani thought, because I haven't been naked in front of anybody since I was a kid. But she was trying to change her image, so she decided to do it.\n\nDani stripped off her shorts, and unbuttoned her blouse and took it off. Then, blushing, she turned away from Trina to take her bra off and slip off her panties.\n\nAs she did, Trina said, \"Damn, girl, what have you been hiding all this time? Your body is ridiculous.\"\n\n\"C'mon, Trina, give me a break.\"\n\n\"I'm serious. Put the bikini on.\"\n\nOnce it was in place, Dani turned around to show Trina.\n\n\"Shit, that looks good. But your top isn't right.\"\n\nDani tried to adjust it, but Trina said it still wasn't right. So she stepped up close to Dani, asked her to turn around and Trina changed the way the straps fell in the back. When Dani turned around to face her, Trina reached out to adjust the material in the front.\n\nWithout really thinking about it, the palms of both her hands made contact with Dani's already erect nipples, causing a jolt of energy to go through both girls. Trina quickly looked up into Dani's eyes, and saw an expression of surprise, but also something else.\n\nDani was shocked, but realized that Trina's touch sent waves of pleasure through her. So she didn't say anything, even when Trina spread her hands all the way over her breasts. And she didn't say anything about a minute later when Trina slowly pulled the straps over her shoulders and let the top fall away, baring Dani's breasts to her.\n\nTrina made sort of a whimpering sound, then bent over to give Dani's right tit a kiss, which eventually led to Trina's tongue sliding all over her breast and ending with her sucking the nipple into her mouth. Then she moved over to the other tit and repeated the process.\n\nWhen Trina moved her head again, Dani put her hands on either side and pulled her up, stepping forward to give her a kiss right on her moist lips. At the same time, Dani's hands went to Trina's chest and began massaging her full breasts.\n\nWhen the kiss broke, Trina stepped back to pull her shirt off, and then unhooked her bra, unleashing her tits. While Dani's were very firm and kind of cone-shaped, with small but erect nipples, Trina's were larger, rounder and had plum-sized areolas with smooth nipples.\n\nDani hesitated, but finally gave in to the strange feelings she was experiencing, and kissed and licked first one, then the other breast, causing Trina to moan in response. As she finished sucking on the second one, it occurred to her how weird this was. So she stopped, stood up, looked Trina in the eyes and said, \"What are we doing?\"\n\n\"I don't know, but something happened there. I hope you didn't mind.\"\n\n\"Umm, no, I guess not. It felt good, but strange. Why don't we go back to doing the makeup? I've got to think about this.\"\n\n\"OK with me, but don't be surprised if I want to do that again. I think I liked it.\"\n\nDani thought to herself, \"So did I.\" She had all of these new sexual feelings bubbling to the surface and wasn't sure how to handle them.\n\n***\n\nScott had gotten home from work and jumped in the shower. As he toweled off, he decided to get dressed and head to the neighborhood tavern for a burger and a couple of beers, but he heard some giggling coming from the backyard next door.\n\nHe went to the back bedroom and saw Dani with her friend, Trina. They were putting their towels down before jumping into the pool and as they did, Scott noticed something different about Dani. He pulled the binocs up to her face and realized she was wearing some dark eyeliner and some other makeup that made her look older and a little racy.\n\nAfter the girls got into the pool, he heard Trina laugh loudly and realized she was pointing at Dani and immediately saw why - the makeup was messed up by the water and Dani looked like she had raccoon eyes.\n\nAs she got out of the pool he saw that she was wearing that daring yellow suit again, and couldn't help but ogle that nearly perfect body. But he did tear his glasses away to check out Trina, who wasn't bad, either. She was shorter, had a better tan, and her round tits looked like they were ready to spill out of her bikini top.\n\nThey sat down at the edge of the pool for a while, then he heard Trina say she had to go. So they stood up and gave each other a hug, and - to Scott's surprise - they gave each other a serious kiss on the lips.\n\nWhat the hell was that?\n\nHe was starting to learn a lot more about his neighbor, and the more he knew the more interesting she got.\n\n***\n\nThat night, as Dani lay in bed trying to get to sleep, she kept replaying what happened in her room with Trina. It seemed spontaneous enough, because Trina seemed as surprised as she did. But it had been exciting, and as she thought about it more, she could feel herself getting wet.\n\nDespite feeling strange, it didn't take long for her hand to slip underneath her panties and start to dip into her moist slit. This was not an unusual practice for Dani, but her thoughts were typically about Scott. The fact that she was hot for another girl made it quite different, but in the end, her orgasm was just as powerful.\n\n***\n\nOn Friday, Scott arranged his work schedule so that his last customer was the O'Connor's. As he unloaded the mower from the trailer, she saw Dani come out of the front door. As usual, she was a vision of loveliness, with a red halter and a pair of tight cut-off jeans.\n\n\"I was wondering when you were getting here,\" she said with a big smile. \"My parents left about a half hour ago.\"\n\n\"OK. It should take about an hour to get the grass done.\"\n\n\"All right, I'll have something for you to drink when you're done.\"\n\n\"Thanks,\" he said. Then his eyes locked on Dani's swaying butt as she walked back up the sidewalk to the door. And, when she glanced back as she opened the door, he knew he'd been caught. But she just smiled again.\n\n***\n\n\"Oh, wow,\" Dani thought as she went inside. \"He was checking me out. Glad I changed into these shorts.\"\n\nFor the next half hour, Dani was busy with some things inside while Scott mowed the front and back yard. But when she was finished, she looked out the back window to see where he was. And he had taken his shirt off and was doing edging around the fence. Dani could only sigh and she watched his back muscles ripple as he worked the trimmer.\n\n***\n\nWhen he was finished, Scott loaded his equipment back on the truck. He saw Dani open the front door and said, \"Let me take this stuff to the shop and I'll come back and hit you up for that drink. Maybe 10 minutes.\"\n\n\"See ya then.\"\n\nAs he drove away, he wondered if he was thirsty more for that drink or for who was serving it.\n\nWhen he returned, he found Dani on the back deck with a pitcher of ice water. He poured himself a glass and sat down, noticing that she was sitting in a chair with her legs crossed and showing a lot of flesh with her short shorts.\n\n\"Thanks for doing that, Scott. I want the yard to look good for tomorrow.\"\n\n\"No problem, and thanks for the drink. It's a hot one today.\"\n\nScott downed his glass of water and poured another as they made small talk. \n\nFinally, Dani said, \"You know, it's so hot I was going to take a dip in the pool. Do you want to join me?\"\n\nFuck! Of course I do, and I want to bend you over the edge of the pool and bang you, too. \n\nInstead, Scott said, \"Thanks. That's nice of you to ask. Yeah, let me go take a quick shower and I'll be over.\"\n\n***\n\nDani was thrilled as she ran upstairs to get changed. I'll get to see all of those muscles again.\n\nShe reached for the yellow bikini, but changed her mind, because she wanted to save that for Saturday. So she found a flowered one-piece that fit pretty tight and put that on. As she stood in front of her mirror, she thought, \"He ought to like this.\"\n\nBy the time Scott showed up, Dani had moved the tray with the water and glasses out near the pool and got in the water, standing along the side with the water up to her neck. As soon as Scott arrived, he dove in and came up shaking the water out of his hair.\n\n\"Wow, that hits the spot,\" he said. \n\n\"Well, I know my parents might not approve, but they're not around, so I thought it was neighborly to ask you over.\"\n\n\"I certainly appreciate it.\"\n\n\"Hey, are you still thirsty? Want some more water?\"\n\n\"Sure.\"\n\nDani walked to the steps and up to the deck, hoping that Scott's eyes were following her. She tried to give an extra wiggle to her butt, but her suit fit so tight she wasn't sure if her cheeks moved at all.\n\nShe thought she heard a sigh, but wasn't sure if it was Scott or the breeze.\n\nDani poured a cup full of water and brought it over to the pool, bending down to give it to Scott and hoping he got a nice view of cleavage. She couldn't believe the things she was doing in front of him - she had never acted this way before, but it seemed to come so natural to her.\n\nAs Scott retreated to the far side of the pool, Dani plopped down to sit on the near side with her feet dangling in the water. She had a desire to open her legs really wide and give him a perfect view of her crotch, but that would have been way too obvious.\n\nThey talked and made arrangements for Scott to bring over the beer the next afternoon, and she even convinced him to bring a fifth of vodka, too. \n\nWhen Scott said he should be leaving, Dani leaned forward again, then got up and bent over to pick up the tray. She was sure she'd given him a good look. \n\nWhen she got to the back door, she turned to say goodbye and he was about five paces behind her. She could clearly see a bulge in his wet swim trunks. And she could tell that he saw where her eyes had been, causing her to blush.\n\nThen she went through the door.\n\nThat night in bed, all Dani could think about was that bulge. She'd actually seen only one cock in her life, and had felt a couple of other dicks, but neither one came close to the size of what was in Scott's pants.",
        "***\n\nAs soon as Scott got to his house, he ran upstairs, pulled off his trunks and started jacking off. He was so whipped up by that little show Dani had given him, he didn't need any lotion.\n\nHis young neighbor was turning into a sexy little vixen and was, whether she was doing it on purpose or not (he thought yes), making him crazy with lust.\n\nAll he could think about was that spectacular ass of hers in that tight bathing suit and how he'd like to yank it aside and plunge balls deep into her juicy pussy.\n\nAnd that's all it took to make him erupt. He was standing over his bed and he simply let his cum fly onto the bedspread - fuck it, he'd have to get it cleaned later. A considerable amount of jism got all over his hand, too, but he didn't care. \n\nDani was driving him wild, and he knew he couldn't take much more.\n\n***\n\nAfter lunch Saturday, Trina dropped by Dani's house to check on the plans for the party. Dani assured her everything was good - she had snacks and cups and stuff, and Scott was bringing over the alcohol that afternoon.\n\nDani almost started saying how much Scott turned her on, but she decided to keep that to herself for now.\n\n\"Dani, have you thought about what happened Tuesday?\"\n\n\"I have.\"\n\n\"Well, was it a good thought?\"\n\n\"Yeah. Honest? I was thinking about it when I went to bed that night and I got pretty excited. I had to, ya know, get myself off.\"\n\n\"Me, too! I was worried I was the only one feeling that way. I've got about an hour before I need to be home, so do you want to do it again?\"\n\nDani moved closer to Trina on the couch, and said, \"Does this answer your question?\" before giving her a big kiss. After a few more kisses, they stopped to take off each other's shirts and bras. This time Dani took the initiative and bent down to suckle Trina's tits first. She couldn't believe how quickly her fire was lit, but she was having fun.\n\nThen it was Trina's turn and Dani fell back on the arm of the couch to give her more room. Trina used a lighter touch than Dani, but it was just as effective and Dani could feel the heat being generated between her legs. That heat got even hotter when Trina reached down and used her fingers to push on Dani's crotch.\n\n\"Oh, my,\" Dani breathed out loud.\n\n\"Should I keep going?\" Trina asked.\n\n\"Yeah.\"\n\nTrina's fingers continued to push against the material of Dani's shorts, then she boldly stopped, reached down with both hands and undid the top button and pulled the zipper down. Then she grabbed the hem and pulled down as Dani arched her back and the shorts came off. Trina did the same thing with Dani's panties, then looked up into Dani's eyes.\n\n\"I think I want to taste you - is that OK with you?\"\n\n\"Oh, god, Trina, go ahead. Do it.\"\n\nSo Trina kneeled on the couch as Dani fell back against the arm rest. She could not believe this was happening, but she also couldn't wait to feel what it would be like when Trina did what she thought Trina was going to do.\n\nAnd then Trina dipped her head and gave Dani a kiss on her pussy lips. Dani wasn't shaved, but she had a light thatch of red pubic hair that she had trimmed recently. After some light kisses, Dani felt Trina start to use her tongue, and the first time she licked hard enough to get past her lips, Dani thought she was going to come right then.\n\nAs it was, Trina was only down there about two or three minutes before Dani felt herself start to shake and moan, and a spectacular orgasm rippled through her young body. She had no idea that would have been possible with another girl, but since it was the first time she'd come other than on her own, she was thrilled.\n\n\"Oh, my god, Trina. That was awesome! I've gotta do it to you now.\"\n\nTrina stood up and Dani worked her pants and briefs off quickly. She had Trina sit on the couch and got on her knees in front of her and pushed her legs apart. Dani saw that she was completely shaved, and realized the time might be here when she'd have to do that, too.\n\nAt first, Dani just used her fingers on Trina, playing with her and then pushing one, and then two, into her hole. She was psyching herself up for what she knew she wanted to do, and finally, she leaned forward. Just as she reached out with her tongue she could smell an intensity coming from Trina's pussy that was exciting.\n\nAs Dani made contact with her face, she felt Trina's hands on her head, urging her to push in more. So she wormed her tongue into the opening and wiggled it around. The taste was surprisingly sweet, so she speeded up her licking moves for several minutes, moving back out to lick the lips and finding Trina's clit.\n\nAnd that was all it took to set Trina off, although Dani kept her face buried between her legs as she rode the orgasm out.\n\nDani sat back and smiled at Trina, who was trying to recover. Both girls gave a sort of nervous laugh.\n\n\"I can't believe how fast I came,\" Trina said. \n\n\"Same here. I guess we were both pretty worked up.\"\n\n\"I'll tell you what, if the boys aren't nice to us tonight, we may have to do this again.\"\n\n\"Good idea. We can give them a chance, but we'll have a Plan B.\"\n\n\"Either way, you should get a nice birthday present. Hey, I've gotta get going. What time do you want me here, 7?\"\n\nAs the girls stood up to put their clothes back on, Dani said, \"Yeah, sometime around then will be good.\"\n\nThen they embraced and had one long last kiss.\n\n***\n\nScott had been out running errands and arrived home with his truck full of groceries and the beer for Dani's party. He put away all of his stuff first, then carried two cases of beer into Dani's back yard. As he passed the side window, he thought he saw some movement, but kept going. \n\nOn his way back out front, he snuck a look in the window and thought he saw Dani's friend Trina getting up from the couch, which was set right in front of the window. And about a second later, he realized that it had looked like she didn't have any clothes on.\n\nThis time, he carried a third case of beer and the vodka to the back yard and stayed below the window ledge. On the way back, he peeked in and this time all he could see was what looked like the top of Dani's head. What the hell was going on in there?\n\nFor his last trip, Scott carried a plastic tub and three bags of ice back, trying to be as quiet as possible. He put the stuff down, thought about what might be going on, then slowly walked back toward the window. \n\nAs he took a quick look, he saw them standing up and apparently putting their clothes back on. When they gave each other a kiss, Scott was given a big clue - and he remembered that kiss he'd seen the other day.\n\n\"I'd bet those two are getting it on,\" he thought. He tried to picture that in his mind and all it did was give him an erection. \"I'll be damned.\"\n\nHe wasn't sure how to play this, so he hustled over to his house, just in time to see Trina go out the front door and take off in her car.\n\nScott still had to put the beer on ice, so he took a chance and walked back over to Dani's back yard. About a minute after he began filling the tub with ice and beer, Dani came out of her back door.\n\n***\n\nHoly shit, Scott was outside!\n\nDani was still in a state of satisfaction and confusion when Trina left, and then she heard noises out back. She looked through the kitchen and saw Scott pouring out a bag of ice.\n\nShe was caught off guard, that's for sure, but she knew she should go and help him. \n\nAs she opened the door, she said, \"Hey, Scott, I didn't hear you bring this stuff over. I was busy.\"\n\nScott straightened up from the tub and Dani saw right away that his bulge was showing again. Damn, my hormones are going crazy right now!\n\nAs they finished the job, Dani kept sneaking looks at her neighbor, almost as if her eyes were being drawn like a magnet to that lump in his pants.\n\nScott said, \"I put the vodka over there on that table. Is this where you want the tub, or do you want it back in the shade?\"\n\n\"Let's move it there, yeah.\"\n\n\"So, anything else I can do for you? If you're having a party to celebrate your 18th birthday, it should be special, so if I can help with anything else, let me know.\"\n\n\"No, I think I'm good ... wait, there is something. Are you going to be around tonight?\"\n\n\"I was going out to grab dinner, but I'll be back by 8:30 or so.\"\n\n\"Well, I invited about 15 or 16 people for tonight, but I'm worried word might get around, and I can't let it get out of control. If I need you, can you help me ask some people to leave?\"\n\n\"Sure. Tell you what I'll do - I'll be sitting out on my back deck watching a ballgame. If you need help, just holler my name.\"\n\n\"Thanks, Scott.\"\n\n\"Any time. Have fun.\"\n\n***\n\nScott grabbed a shower and went to his favorite tavern for some beer and a burger. He bought a six-pack of Yuengling and made it back home by 8:15.\n\nHe had a nice little setup on his back deck, with a couple of comfy reclining chairs, a 50-inch flat screen TV and a refrigerator. The party next door must not have gotten cranked up yet because all he could hear was some hip-hop music and a bunch of giggling girls.\n\nHe kept the sound down on the baseball game and enjoyed listening as the party developed. He heard a bunch of guys arrive and the noise went up from that point on. He could remember back 15 years or so when he been at some pool parties that got pretty wild.\n\nThe next time he had to take a leak, he wandered upstairs and had a look through the binocs. The scene looked just about as he expected, with about six or seven teenagers in the pool horsing around, a few sitting on the side and the rest on chairs. They had pulled the beer out into the yard so it was nearby and everybody had a red plastic cup in hand.\n\nHe couldn't help but notice Dani, though, because she had that fabulous yellow-striped bikini on. She was sitting alongside the pool with a guy beside her, obviously hitting on her and just as obviously - at least to Scott - getting a great view of her left breast. He sighed and wished that was him sitting in that spot.\n\n***\n\nThings were going well, Dani thought. Everybody was having a good time and she got to spend a good bit of time with Brad, who was pretty good-looking, but seemed to have a very high opinion of himself.\n\nThen about 10:30, she heard noises from out front and car doors slam shut. Suddenly, a group of five boys, all already carrying beers, walked into her yard. She had no idea who they were, and didn't like the way they looked.\n\nTrina quickly came over and said, \"Dani, those guys are from the South side and they're bad news. We've gotta get rid of them.\"\n\nSo Dani stood up and walked over to them, and asked the guy in front, \"Hey, who are you guys? I don't think you were invited.\"\n\nThe guy in front of her, clearly their leader, said, \"I'm Chuck. We heard through the grapevine there was a party here, so we thought we'd bring you some more fun. How 'bout it, guys?\"\n\nThe other guys piped up - \"Yeah.\" \"Where's the beer?\" and \"Yeah, and where's the chicks?\"\n\nDani, not wanting this to get out of control, simply turned to her right and yelled: \"Scott!\"\n\n***\n\nScott had already noticed that all the usual chatter next door had stopped, and then he heard voices, but couldn't hear what was being said. But he clearly heard Dani call his name, so he slipped on his flip-flops and jogged around the front to get on the other side of the fence, and then went into her yard.\n\nHe could immediately see that a gang of new boys was standing in front of Dani, with the friends who were already there beginning to gather behind her.\n\n\"What's the problem, Dani?\"\n\n\"These guys showed up, but they're not invited. I don't even know them.\"\n\nScott said, \"In that case, I think you guys should leave.\"\n\n\"Yeah, who the fuck are you to tell us to leave?\" Chuck said.\n\n\"I'm Dani's friend next door. You're not invited. It's her party and she doesn't want you here. That's all you need to know.\"\n\n\"That's bullshit. We came here to party and drink some beer, so we're fuckin' staying.\"\n\n\"What's your name?\"\n\n\"Chuck.\"\n\n\"Well, Chuck, here's how this is going to go. There are five of you,\" Scott turned around to see who was behind him, \"and seven of us, plus the girls. I will personally kick your ass if you don't leave, and I'm betting your buddies won't make out very well, either.\n\n\"Meanwhile,\" and Scott pointed to the girl closest to Dani, \"you get your phone and call the police if these guys don't leave. And, Chuck, just to be nice because I know you'll make the right decision here and leave,\" he pointed to one of the boys behind him, \"go get Chuck and his friends a beer as a going away present.\"\n\nWhen the kid returned with the beers, Scott handed one to each of Chuck's buddies, and the last one to Chuck, who Scott could tell was pissed, but was probably going to do the right thing. So he gently took hold of Chuck's elbow and led him out front just to make sure.\n\n\"Good decision, Chuck. I get it that crashing a party can be fun, but not here, and not tonight, OK? And don't even think of coming back, because I'll be here waiting and I just memorized your license plate. Go find somewhere else to have your fun tonight.\"\n\nHe could tell Chuck wanted to save face, but he just put his head down and got into the pickup, and when his guys were all inside, he took off.\n\n***\n\nDani watched Scott lead Chuck out front and held her breath. Finally, Scott walked back to the yard, and signaled her with a thumbs up, then turned to go back to his place.\n\nBut Dani ran up to him and clearly surprised him by putting her arms around his neck, pulling him close and saying, \"Thank you, Scott. You were amazing and you saved my party.\"\n\nThen she gave him a quick kiss on his cheek and ran back to her friends, thinking, \"I wish I could thank him the way I really want to.\"\n\n***\n\nScott stood frozen in place for several seconds, mesmerized by the touch of Dani. His skin tingled from where she had pushed her ripe young body into his and as he watched her backside moving away from him, the blood rushed to his dick.\n\n\"That girl is going to kill me,\" he muttered to himself.\n\n***\n\nThe party got back on track for the next half hour, and when the buzz about the intruders died down, the vibe changed - now everybody was looking for somebody to pair off with.\n\nEventually, Dani found herself connected to Brad again, although she was thinking as much about Scott as she was Brad. They talked for a while, and Dani could see that everybody had found a partner and most were at least in the early stages of making out. \n\nSo when Brad invited her to share his chaise, she did. He immediately starting kissing Dani, then after about five minutes, his hands started to get busy. She was lying on top of him, so his hands moved from her shoulders to her back and quickly to her butt, which he roughly squeezed. Then he pulled her toward him, and it didn't take Dani long to realize that his hard cock was pushing into her abdomen.\n\nIt had been a sexually charged week for Dani, and what Brad was doing got her hot quickly. So she began squirming her hips lightly, grinding back into him a little. That little bit of movement placed his shaft right against her already damp pussy and the intensity level rose.\n\nDani put her hand on Brad's chest and started to get up, and he said, \"Where are you going?\"\n\n\"Follow me.\"\n\nShe grabbed his hand and led him to the deck, where there was a much larger outdoor couch with thicker cushions and much less light. They sat side-by-side and Brad immediately put his right hand on her breasts, squeezing and stroking them. It didn't take long until he pushed aside the little bit of material of the bikini and started grabbing her naked breasts.\n\n\"Brad, take it easy, that hurt.\"\n\nShe reached down into his lap and felt his stiff dick, tracing its length inside his swim trunks. Even in her excited state, she thought, \"Well, he's not nearly as big as Scott,\" then tried to put it out of her mind.\n\nBy this time, Brad had leaned down to kiss her tits, but he was rough with that, too; it was nothing like how it felt when Trina had done it. To distract him, Dani pulled the drawstring on his shorts and worked her hand inside and played with his cock.\n\nApparently, that was all Brad could take. He sat upright and pulled his shorts off, then turned to Dani and started to yank her bottoms off. He was not gentle, and Dani was beginning to feel uncomfortable.\n\n\"Brad, slow down.\"\n\n\"Come on, just lie back, we're gonna to do this.\"\n\n\"I'm not sure I want to do that yet.\"\n\n\"C'mon, Dani, you've got me so worked up, I need to put it in you now.\"\n\n\"Brad, no. I'm not ready for that. Just be patient.\"\n\n\"No way, baby, I need it now.\"\n\n\"Brad, you're scaring me. I said no.\"\n\nAll at once, Dani felt a presence, and a shadow fell over both of them.\n\n***\n\n\"I believe you heard what she said: she said no.\"\n\nScott had noticed that the noise from the party had died down and he figured there was some serious necking going on. He had to admit, he felt a stab of jealousy, because he wanted to be in the shoes of whoever was with Dani.\n\nBut then he heard voices coming from Dani's deck, which was only about 25 feet from where he was sitting, and the more he heard, the more disturbed he got. When he clearly heard, \"I'm not ready for that,\" he stood up, and when he heard, \"Brad, you're scaring me. I said no,\" he was on the move.\n\nWhen he skirted the side of the O'Connor's house, what he saw was Dani lying on her back, with Brad kneeling on the couch trying to pry her legs apart.\n\nBrad looked up and said, \"Hey, you got no right to barge in like this; this is private.\"\n\nScott looked Brad squarely in the eyes and said, \"The lady said no. I could hear that from next door. It doesn't look to me like you're stopping. Get up.\"\n\nAs Brad moved to get up, Scott reached to a nearby chair, grabbed a beach towel and held it out to Dani so she could cover herself. A sulking Brad put his trunks back on and walked away.\n\n\"You all right?\" Scott asked Dani.\n\n\"Yeah. A little embarrassed, but yeah. Thanks for coming when you did. I was OK with a little messing around, but then he went a little nuts.\"\n\n\"I'll turn around so you can get dressed.\"\n\nScott was looking at the yard and several of the couples had already reacted to what they'd seen. He heard Brad tell his buddies that it was time to go and he heard a couple of curse words in return, but eventually everybody started to get their stuff together.\n\nDani walked past Scott to talk to her friends and Scott went back to his deck. It wasn't long before he heard car doors closing and vehicles taking off, and then the music was shut off.\n\nHe could hear Dani moving around next door, apparently cleaning up after the party, so he decided to give her a hand. She did not look happy as she picked up a bunch of red cups.\n\n***\n\nDani was overcome by a sad mood and she felt like crying. She went from having fun at her party, to getting together with Brad and looking forward to trying some new things with him, to being totally devastated when he tried to force himself on her.\n\nIf Scott hadn't intervened, she didn't know what might have happened. But now that everybody was gone, she was totally bummed about how the night had ended. It was hard to hold back the tears.\n\nAnd then she saw Scott walking toward her.\n\n\"Need some help?\"\n\n\"No, Scott, I can handle it. Besides, you bailed me out twice tonight already.\"\n\n\"I guess it wasn't exactly a normal party, huh?\"\n\n\"You can say that again. I was having fun, until ... you know.\"\n\n\"Well, look, let me help you clean up, and then maybe you and I can sit down and have a toast for your birthday.\"\n\n\"OK, thanks.\"\n\nSo the cups were put in the trash, all the pool toys were put away and the lounges were moved back into place.\n\nDani was feeling better, her mood obviously brightened by being around Scott. He had really helped her out tonight and she wanted to make sure he knew how grateful she was.",
        "***\n\nScott saw immediately how depressed Dani seemed when he first arrived, but by the time they finished cleaning up, she seemed to be better.\n\nIf circumstances were different, he might be thinking about how to seduce his young neighbor. After all, she had - whether intentionally or not - been teasing him all week, and the whole time they were cleaning up, she was walking around and bending over in that risqu\u00e9 yellow bikini.\n\nBut thanks to the boy's actions, he figured tonight was not a good time to push the issue. Dani was probably not looking to have anything to do with a man tonight.\n\nHe figured they'd have that beer to celebrate her birthday and he'd head home.\n\n***\n\nDani realized that her emotions had been on a rollercoaster that day. First, there was the session with Trina that she was still trying to understand what to make of, then she did some flirting with Scott, then the party started and they dealt with the unwanted company, and, finally, Brad had ruined the rest of the night by being impatient.\n\nFor most of the evening, Dani had been screwing up her courage to give Brad a blow job. Trina had told her that it wasn't nearly as gross as some girls said it was, and the boys really liked it. But stupid Brad had messed up that chance.\n\nOn the bright side, Scott had been a savior twice. It suddenly dawned on her - shit! - he had seen her naked! But instead of leering at her, he had provided a towel for her. Dani hoped that was because he was being a gentleman, and not because he didn't like what he saw.\n\nShe was determined to have this night end right. And since Scott had saved her tonight, maybe she could find a way to thank him so he'd really know how she felt.\n\n\"I think we're done here. C'mon, Scott, let's have that drink.\"\n\n***\n\nScott grabbed two cold beers out of the tub and opened them. He suddenly realized how thirsty he was as he sat down at one end of the couch where he had rescued Dani. He handed her one of the beers as she stood in front of him, and said, \"Dani, congratulations on turning 18. I'm sure you have a great future ahead of you,\" and they both took a big swig.\n\nThen Dani surprised him by sitting right next to him, with her leg right up against his, and leaned down to put her beer on the floor.\n\nWhen she sat back up, she turned toward him, looked him in his eyes, and said, \"Scott, I can't thank you enough for all you did for me today, but I'm gonna try.\"\n\nWith that she reached up and put her arms around Scott's neck again and pulled him down for a kiss. Suddenly, a spark ignited and that simple kiss turned into a heated, passionate moment when all of the desires that had built up over the last week for both of them burst into flame.\n\nBy the time they came up for air several minutes later, their tongues had gotten into it, Dani had turned and hopped up onto Scott's lap, their arms were wrapped around each other and both were breathing hard.\n\nScott was unsure what to do. On the one hand, he was totally worked up and hard as a rock, which she surely had to feel under her ass. On the other, he was worried sick that pushing too hard after what had occurred earlier would ruin everything.\n\nBut it took only a couple of heartbeats until he knew it would be OK.\n\n***\n\n\"Scott, thanks again for coming over when you did tonight. I don't know if I could have stopped Brad, and if not, it wouldn't have been fair. Because, well, because I want somebody special to be my first ... I want it to be you. And I want it tonight. Will you?\"\n\nAs soon as Dani spoke the words she had wanted to speak for so long, she got worried. Scott got a very strange look on his face and she thought he was about to reject her.\n\nBut then Scott said, \"Oh, my God, Dani - yes. I have wanted you so bad for so long, but I never knew if you felt the same way. And then with what happened tonight, I felt like I needed to back off. But, yes, I'd love to have the honor of being your first.\"\n\n\"Thank you.\"\n\n***\n\nScott hugged her as tight as he could, then feverishly kissed her.\n\n\"Where? Your bedroom?\"\n\n\"Yeah. Follow me.\"\n\nAs he followed Dani through her house and up the stairs and down the hall to her room, Scott had three thoughts battling it out in his brain: 1.) I must be the luckiest man in the world tonight; 2.) I have to go slow with her and do this right; and 3.) The vision of her legs and perfect ass in front of me right now will never leave my memory.\n\n***\n\nDani was extremely nervous as she pulled Scott toward her bedroom, but she knew she was making the right decision. She knew he'd be nice to her, and she was definitely ready for this moment.\n\nShe also couldn't wait to see what was hiding in his shorts. When they were on the couch, she could feel a large bump under her butt, and now it was time to see what it looked like.\n\n***\n\nScott took a quick glance around Dani's room, which looked just how he expected a high school girl's to look - plenty of posters on the walls, clothes draped over the chairs and a crowded desk. There was also a queen-size bed that he figured to get intimate with soon.\n\n\"Dani, why don't you take off that bikini that's been teasing me all week? It doesn't leave much to the imagination anyway.\"\n\nIt didn't take her long to reach back and unclasp her top and let it fall to the floor. Scott was transfixed by the sight of her perky breasts, sticking straight out with her pink nipples already stiff. Then she took hold of her bottoms, pulled one long leg through and stepped out of them, displaying her downy patch of red hair and just a peek of lips that were already glistening.\n\nIt nearly took Scott's breath away.\n\n\"My god, girl, you are gorgeous. I have to admit, I've tried to imagine what you'd look like with no clothes on, but you are way better than that. Damn!\"\n\n\"Well, I'm glad to hear that, but it's your turn now.\"\n\nScott took only a few seconds to pull off his T-shirt, and drag his shorts and briefs off. He wasn't quite completely erect yet, but his dick was twitching with anticipation.\n\n***\n\nDani put her hand up to her mouth and said, \"Holy shit, Scott, you're big! I kind of, you know, noticed it a couple of times when you were excited, but ... wow.\"\n\nShe was mesmerized at the way his cock seemed to be growing and standing more upright as she watched. It was also thicker than she expected, and the head seemed to be getting bigger and turning darker in color.\n\n\"Can I touch it?\"\n\n\"Dani, you can do anything you want. This is your night.\"\n\nSo she stepped close to him and grasped him with her right hand first, and then both hands, causing a loud sigh from Scott. He felt so different from the few penises she had touched. She could barely get her hand around his circumference, and she could put one hand on top of the other and just barely reach the underside of the head.\n\nDani was amazed how hard his cock felt and she could feel the heat being transferred to her hands.\n\n\"Let's get on the bed,\" she said.\n\nScott got on first and lay with his head on the pillows. Dani got onto her knees between his legs and took hold of his shaft again. She was thrilled to be able to feel his power, but was - at least a little - worried about how it would feel when he was inside her. But right now, she wanted to taste him. She had been working herself up to suck Brad, but now she had a much better opportunity.\n\nShe leaned over as she tugged his dick in her direction, and licked the tip. As she did, a small amount of fluid escaped from the end (that must be the precum Trina talked about) and was caught by her tongue. She didn't know what to expect, but it had an OK flavor, so she licked all of it up, using her tongue to swirl around the head and down the shaft.\n\nShe looked up at Scott and his eyes were closed and his face was scrunched up, but when he opened his eyes and saw her looking, he said, \"You're doing great, Dani.\"\n\nShe licked up and down his length several more times, and detected more precum spilling out. But now it was time to see if she could fit this cock into her mouth. So she pulled her lips apart and encircled his head, pushing her lips past the ridge of skin. It felt like her mouth was totally full already.\n\nBut as she gradually went lower, she discovered that she could get more dick into her mouth than she expected - at least half of what was in front of her. Then she remembered that Trina had told her to suck hard on the way back up, so that's exactly what she did, which brought a small wave of cum taste onto her tongue. \n\nShe decided she liked it.\n\n***\n\nScott watched through his slitted eyes for several minutes as his hot neighbor went down on him, and realized he was not going to last long if she kept this up. He couldn't ever remember a time when he'd stopped a girl from giving him a blow job, but he had a strong feeling that he wanted his first orgasm with Dani to be something a little different.\n\nSo, reluctantly, he reached down and put his hands on the side of her head, pulled her gently up, and said, \"Girl, you have to stop that now, or I won't last.\"\n\n\"Aw, I was just starting to get into it.\"\n\n\"Well, so was I. But I have another plan for that load you've been working up in me. Besides, you'll have plenty of time later to finish what you started. Switch with me.\"\n\nAs soon as Dani was prone, Scott straddled her, put his hands beside her shoulders and bent down and gave her a wet kiss, which lasted a full minute or more. Then he trailed more kisses down her neck, across her shoulder blades and onto her breasts, which were just begging to be played with.\n\nBecause she was lying down, her tits weren't sticking up as much, but her nipples certainly were. Her areolas weren't much bigger than a nickel, but her nipples jutted out about a half inch and his mouth was drawn to them like bees to honey. He kissed and suckled one breast, then the other, and Dani was clearly enjoying it.\n\nAs he sucked one nipple, Scott played with the other one with his fingers, deliberately being gentle. He was determined to be the anti-Brad tonight.\n\n***\n\nDani loved all the attention Scott was giving to her breasts. It was even better than how it felt with Trina, partly because she was already so turned on, and maybe partly because of the stubble on his face that just made her skin so sensitive.\n\nWhen Scott started kissing his way down her chest and abdomen, Dani knew it wasn't going to take long for her to explode. He nuzzled her inner thighs and kissed his way through her mound, then kissed her right on her pussy lips, which gave her a jolt. Then he ran his tongue along the length of her slit and she nearly screamed.\n\n\"Ummmm, you taste so good, Dani.\"\n\n\"Oh, god, Scott, you're driving me crazy.\"\n\nHe reached up and grabbed a small pillow and stuffed it under her ass, then dipped his head into her crotch again. This time, his licks seemed a little more purposeful, as he went from the top to the bottom of her pussy and used his tongue to go side-to-side.\n\nAnd that's when the dam broke for the first time. She moaned in delight and her torso shook a little and Scott was rewarded by a small flood of her juices. Dani sank back on the bed and couldn't believe how good this felt.\n\n***\n\nScott had jacked off several times fantasizing about this exact moment, but as fun as those moments were, the real thing was so much better he couldn't believe it.\n\nThis girl tasted so good he couldn't get enough. She had already cum twice, because he could feel a gush of pussy juice when she did, and it made it taste even better. By now, he had rubbed his face all over her pussy, had dipped his tongue in as far as he could go, and had just buried two fingers into her vagina.\n\nAnd he could tell she was building up for another climax as he slowly moved his fingers in and out of her and lapped at her clit. Then her whole body started shaking and she raised her ass off the pillow and choked off a scream. When he felt the next rush of liquid all over his tongue, he knew it was go time.\n\nHe kissed all around as she settled back down onto the bed, then gave her one more smooch right on her pussy lips, just to get a last taste of her. He gave his face a quick wipe on the sheets to get rid of any excess juice, but that wonderful musky scent was still there.\n\nScott got up to his knees and smiled at Dani, who looked as relaxed as could be. When she smiled back, any last vestige of doubt about what he was ready to do evaporated.\n\n\"Are you ready, Dani?\"\n\n\"Yes, I am. I want you in me now. And, Scott? Don't worry - I've been on the pill for a few years now.\"\n\nThat was something Scott hadn't even thought about until now, but it was a big relief. Because he had a feeling once he entered this girl, he wasn't going to want to come out.\n\n***\n\nDani was flushed with excitement. She had just experienced multiple orgasms for the first time in her life and was riding a serious high. And now it was time for her first fuck.\n\nShe was thrilled and scared. Happy as hell, and worried. But she knew it was the right time and the right guy, so she let herself relax.\n\n\"I'm gonna go slow, but if it hurts, let me know,\" Scott said.\n\n\"I will.\"\n\nDani watched as Scott got up on his knees again, scooted up above her and aimed that long, fat dick at her pussy. Then, just as his head touched her lips - she couldn't believe it - he stopped.\n\n\"Hey, let's do this a different way. It's your first time, so why don't you get on top so you can control how much you can handle?\"\n\nSo they rolled around until Dani was over him now. He held his cock straight up and she maneuvered until her pussy was above him. Then she slowly sank down until they were touching. After a little adjusting, she felt his cock head push past her lips and enter her hole, and what a feeling it was!\n\nEven with just the head in, she felt full. But it was a wonderful feeling, so she eased down a little farther. She could feel his steely hardness slip in little by little as her slick and wet pussy seemed to pull him in. She looked down to see that he was only about a third of the way in, and was startled.\n\nSo she backed up to the tip again and pushed down a little harder, determined to get more stuffed into her. And she did get lower this time, more than halfway there, and she felt a little tug inside, but the painful feeling went away quickly. Dani felt filled up, but knew she could take more. So she pulled back to the top again and pressed down even harder.\n\nThis time, she noticed Scott pushed up into her a little and that was enough for him to get all the way in. She could feel her lips bump into Scott's body at the base of his dick, and she felt impaled - in a very good way. Nothing had ever been up inside her pussy that far and she felt a great accomplishment getting all of him in.\n\nDani stayed there for a few seconds, simply enjoying all the sensations she was experiencing. But then she pulled back and slowly began moving up and down on Scott's wonderful cock, and that's when she knew she was experiencing true fucking. \n\nAs she secreted more juices, and as she rocked back and forth a little faster, Dani noticed she could feel the ridge of Scott's head moving in and out of her. She could not believe all the excitement she was experiencing, and her brain was on overload. She threw her head back and tried to take it all in, because she didn't think it would ever be this good again.\n\nThat's when the first ripples of another orgasm began.\n\n***\n\nScott believed he had entered the gates of heaven. He was glad he had suggested they change positions, not only so that Dani could control the pace. \n\nHe realized now that he had the best seat in the house to watch as she truly experienced sex for the first time. Watching her move her body, watching her firm tits shake, and watching the expressions on her face just added to his enjoyment.\n\nWhich he didn't think was possible, because he had never felt anything this good in his life.\n\nAfter he had entered her and she had moved down his shaft for the second time, he felt something give, and he understood that he would always be her first. When she dropped down a third time, Scott couldn't help but push back up, and the feeling when she completely enveloped him was so intense he thought he was going to come right then.\n\nThe phrase \"hand in a velvet glove\" came to mind, but his dick in Dani's impossibly tight pussy was way better than that.\n\nHe could tell by reading her face - as if her moans didn't do it - that she was getting ready to come again, and once she started he knew he wouldn't be far behind. Dani began literally bouncing up and down on his cock, triggering that delightful feeling in his balls that his orgasm was close.\n\nScott grabbed her by the hips and pushed up into her as she pushed down. They got into a perfect rhythm and he felt his cum slowly and excruciatingly building. And then he knew he was there.\n\n\"Ah, fuck yes!\" he cried.\n\nAnd the sperm rocketed up his shaft and into her canal, spurt after spurt after spurt. They kept fucking and he kept shooting his cum deep inside her. She was screaming right along with him until he finally slowed down and tried to catch his breath. \n\nThe feeling had been so intense, Scott thought he'd almost passed out.\n\n***\n\nDani was just coming out of her orgasm when Scott speeded up his strokes and she knew instinctively that he was close.\n\nAnd it wasn't long until he yelled. Then she could feel his cum spewing into her vagina, setting off yet another small orgasm for her. The spurts just kept coming and if she thought she was filled up before, she knew she had to be now.\n\nAs their bodies stopped rocking, Dani put her head on Scott's chest for a minute or two, trying to recover.\n\nThen she sat up, looked down on him and said, \"That was awesome, Scott. I never knew it could be that good. Thank you.\"\n\n***\n\nScott looked up into Dani's green eyes and heard the words she spoke, and couldn't believe how lucky he was. This beautiful girl - well, she was now a woman, he guessed - was thanking him for the most exciting thing he'd experienced in his life.\n\n\"Dani, I should be the one thanking you. Trust me.\"\n\nWith that she leaned forward and started a fresh set of kisses, until Scott felt a puddle of his cum drain out of her and pool on his stomach.\n\nShe giggled, then reached over to her chair for a towel and wiped it off of him. \n\nAs she lay down beside him and stretched that lithe body over his, she said, \"What are you going to show me next, neighbor?\"\n\n***\n\nDani then had a thought, got off the bed and said, \"I'll be right back.\"\n\nShe walked downstairs, feeling more than a little naughty. For one thing, she was naked; for another - and she almost had to pinch herself - she just had sex for the first time! And it was with Scott, who she'd been lusting over for years! She almost felt like she was walking on air.\n\nDani strode out to the back deck and pulled the vodka bottle from the tub of ice, then grabbed two glasses from the kitchen on her way back upstairs. She hoped this was going to be a long night.\n\n***\n\nScott used Dani's absence to find a bathroom, but was back on the bed by the time he heard her coming back.\n\n\"I was thirsty, and I thought we could do another toast,\" she said.\n\nShe handed him the bottle and held out both glasses. Scott poured a good slug into each and set the bottle on the bedside table.\n\n\"Cheers,\" he said, as they clinked glasses and took a big swallow.\n\n\"Hey, I have to make a confession. I've been watching you grow up, and over the last couple of years, you've become so damn beautiful. I've had dreams about you and I being together like this, but you were so young and I never thought it would ever happen.\"\n\n\"Well, then, the feeling was mutual, at least for the last year or so. There were quite a few nights I was in this bed wondering if I could ever get you up here. And now, here you are - and you're not leaving anytime soon.\"",
        "Scott took another swig of vodka as his eyes took in the luscious girl on the bed with him. It had been quite a while since he'd had good sex and he wanted to make the most of this opportunity. So he finished his drink and set the glass on the table and turned to Dani.\n\n***\n\nDani watched Scott toss down the rest of his drink, so she did likewise and set her glass on the floor. When she sat back up she could see Scott turning toward her and knew it was time to start it up again.\n\nShe pushed Scott onto his back and climbed on top of him, and they began a marathon make out session. Not only did it verify how they felt about each other, but it got both of them ready for more action. Dani could feel her slit getting damp and Scott's dick rising a little. \n\n\"I know what I want to do,\" as she sat up. \"I really want to suck you off. I've never done that before tonight, but I really liked it earlier.\"\n\nScott moved up on the bed to give Dani more room and she got on her knees between his legs. She reached out to touch his cock and it twitched in anticipation. She took it in her hand and lightly stroked it, watching in wonder as it grew. She could actually feel it pulsing in her fingers.\n\nThen she leaned down, stuck out her tongue and licked the entire length of it, realizing that she could taste herself on his skin. And it grew more. She tilted it toward her and popped the head into her mouth and sucked on it, and it got even bigger. By the time she bobbed down farther and took in as much as possible, she was hoping it wouldn't grow any more, because her mouth already felt stuffed.\n\nShe pulled off and licked up and down the entire shaft, getting it wet and tasting more of her own juices, then moved back to the top and started sucking in earnest. She was figuring out how to move up and down on his dick and regulate her breathing. \n\nAs she moved her head rapidly up and down on his shaft, Dani was aware of how much saliva the movement was producing, and it felt like she was slobbering all over his dick.\n\nThis is wonderful, she thought. She really loved the taste of Scott's cock; it gave her a feeling of happiness she couldn't quite define. Dani had a realization that sucking a man's dick was something she'd be doing a lot of in the future. \n\nIt was soft and hard at the same time, and exuded a heat that felt good in her mouth. And, based on the noises coming from Scott, she knew it must feel good to him.\n\n***\n\nScott couldn't take his eyes off what was happening below his waist. He was still trying to wrap his head around the fact that he had finally scored with his hot neighbor, and he wasn't sure if he seduced her or vice-versa.\n\nBut as good as the last session with her was, this one was at least as good. For somebody who said she'd never given a blow job before, Dani was a whiz. She was either a natural, or figured it out very quickly. And best of all, she seemed really into it.\n\nShe was bobbing her head as she sucked on him, and the friction of her lips and the movement was taking its toll on him. She took periodic breaks to lick up and down the shaft, but then went back to work on her sucking, and even incorporated some swirling tongue action.\n\nScott assumed it'd be a while until he was ready to come, but what she was doing to him was too much to take. He was getting off seeing her lips stretched as she moved on his cock, and watching her red hair fly around as her head went up and down was a vision of beauty.\n\nAfter another couple of minutes of almost excruciating pleasure, Scott could feel his orgasm starting, and it started from the tip of his toes.\n\n\"Getting close, Dani,\" he whispered. \"You're gonna make me come.\"\n\n***\n\nDani was thrilled to hear those words from Scott. She was so happy she could please him that much.\n\nShe hadn't tasted much precum this time, but maybe that was because he'd already shot a load. But she knew what was going to happen soon. She decided she wanted to taste his cum, but didn't know if she could take as much as he shot into her pussy earlier. \n\nWhen Dani heard Scott say, \"Oh, shit,\" she knew to get ready. She was glad for the warning, because she wouldn't have anticipated the power of that first spurt of semen that flew into her mouth - it almost knocked her off his dick.\n\nBut she recovered and kept it all in her mouth, at least until the second jet came and then it was too much. She swallowed quickly, but some of the cum leaked out of her lips and ran down his cock. The taste was stronger and slightly more bitter than what she'd tasted earlier, but still not bad, and she was excited to eat it.\n\nScott must have fired out most of his load in the first two blasts, because not a lot more came out of his dick. She was able to begin to suck his cock again, and then she tasted another short spurt of cum. And then it was over.\n\nExcept she didn't want to give his dick up yet, so she kept sucking and licking until she believed she had gotten all of his cream and he started to shrink. \n\nShe was astounded by how much she liked this. Some of her friends had said it was gross, but for Dani, it was a huge turn on. She wanted to keep going.\n\n***\n\nScott was in ecstasy. He could tell that his new lover had turned into a cocksucker before his eyes, and he was just grateful to be the one who reaped the benefits.\n\n\"Holy shit, Dani, you can stop now. Damn!\"\n\nShe reluctantly let his cock fall out of her mouth, looked up at him and gave him a fabulous smile, made even better when she licked her lips to clean up any leftover cum.\n\nHe said, \"C'mere girl. That was awesome - you are a natural at sucking cock. I can't believe you made me come that quickly.\"\n\n\"Oh, my god, I loved it! I want to do it again.\"\n\n\"Hold on there. It's gonna be a while 'til I'm good to go again. But come down here.\"\n\nHe reached out his arms and Dani fell into them. He just had to kiss her, and it didn't matter that he tasted his own cum. He was too excited to care.\n\n***\n\nDani woke up realizing that she had to make a bathroom visit. She didn't even remember getting sleepy, but she figured between the long day of prepping for the party, all the drama that happened and the alcohol she'd had - not to mention the thrilling sex with Scott - her body needed a break.\n\nAs she walked back to the bed, she almost shivered with delight. In the past, she had been almost terrified to think about having sex for the first time. Now that it had happened, she realized that her fears had been unfounded. \n\nWell, almost - if Scott hadn't been there, Brad might have ruined everything.\n\nBut sex with Scott had been beyond her wildest dreams. And she wanted more. Dani saw the clock said 6:23, and decided to let Scott sleep a little longer. \n\nShe went to the kitchen and got everything ready to take some breakfast upstairs to serve Scott. She poured some juice, got the condiments together, whipped up some scrambled eggs and put a couple of waffles in the toaster. She found a tray and loaded everything on it, and went up the steps.\n\nDani walked into the bedroom and set the tray down. Scott was still sleeping, with a sheet covering only his legs from the thigh down. She took a few moments to take in his muscular form and tried to tamp down the desire welling in her brain - it would have to wait until after breakfast. \n\nShe put a hand on Scott's leg and gave it a gentle shake.\n\n***\n\nScott awoke with a start and for the first second or two had no idea where he was. But he turned his head and his eyes took in the sight of Dani, standing beside the bed in all her naked glory and everything that had happened the night before rushed into his brain.\n\nAnd what a vision she was. Her auburn hair was tousled with sleep and her makeup was a little messed up, but that body was still nearly perfect, and Scott knew deep inside he had to have some more of it.\n\nThen he smelled the food, and his senses made that the priority.\n\n\"I thought you might be a little hungry,\" Dani said.\n\n\"Oh, yeah, I am. For you. But the food was a great idea, too.\"\n\nShe gave a nice little laugh as she set the tray down on the bed.\n\n***\n\nOnce the plates were empty, Dani got off the bed and put them on a nearby table. She could feel Scott's eyes on her as she returned to the bed, but her eyes were focused totally on that wonderful cock of his, lying across his leg. It wasn't the least bit hard, but she estimated it was already about 5 inches long and thick.\n\nShe wanted it in her mouth again.\n\nAs Scott moved to give her room, Dani stretched out on her side with her face inches from his groin, and reached out with her free hand to take hold of his dick. She gave it a few tugs and then caressed his balls with her fingers. It was already starting to grow, and she decided she wanted to feel that growth with her lips and tongue, so she leaned forward and took his cock gently into her warm mouth.\n\nAs she enveloped the head and part of the shaft, Dani could tell it was working. She swished her tongue over the head and within a few seconds it seemed to almost double in size. And as she took more into her throat and slid her lips lower, it was clear that Scott was totally hard and at his peak size.\n\nShe wanted to see how much she could stuff into her mouth, so she made sure the whole length was covered in her spit and worked it back into her throat. Dani had heard stories of girls being able to deep throat their man, but had no idea how to do it. She did the best she could, but when Scott's head got so far, she felt like gagging and had to stop.\n\nDani worked her way down again as far as she could go. She opened her eyes and saw there was still at least an inch left. Well, that was going to have to be a challenge for another day. Maybe she could get some advice from Trina.\n\n***\n\nScott was stunned by what Dani was doing. He was having a hard time believing that this girl had been a virgin until a few hours ago. Her mouth was voracious, and she seemed to know just what to do to give him the most intense pleasure. \n\nFor a couple of seconds, he actually thought Dani was going to be able to take all of him into her mouth. He'd had a few girls try, but none had succeeded. He had no doubt that if Dani kept at it, she'd eventually get there.\n\nScott suddenly became aware of the fact that Dani's pussy was within easy reach. He figured if she was getting a taste, he should return the favor. So he moved his head over and began kissing around her snatch, getting off on the wonderful smell emanating from her pussy.\n\nHe tapped on Dani's leg and she understood, lifting it high enough for him to gain access to her already swollen lips. He let his tongue dance over her vagina, drawing some of the wet nectar into his mouth. As he found her clit with the tip of his tongue, he reached over and gently and slowly pushed a finger into her hole, which caused a muffled groan.\n\nBut while Scott could have stayed just like that for as long as it took, he realized there was something he wanted even more. \n\nSo he pulled away and said, \"Dani, I need you to stop for a second.\"\n\n***\n\nDani heard the words, but she really didn't want to stop until she had coaxed another load of cream from Scott's wonderful dick. Reluctantly, she let it fall out of her mouth, and looked up at him.\n\n\"This is fabulous,\" he said, \"but want I need to do right now is fuck you again.\"\n\nAnd with those words, Dani realized he was right. Her pussy was dripping wet and it was ready for action.\n\n\"Yes, Scott, please fuck me. But promise me one thing - I want you to come in my mouth. I need to taste you again.\"\n\n\"OK, I promise. How could I say no to that?\"\n\nDani rolled to the middle of the bed and parted her legs, inviting Scott in. He got on his knees, placed the head of his massive cock at her entrance and pushed in. This time, there was little resistance as he slowly but surely filled her to the brim.\n\n\"Oh my god, that feels awesome,\" she said.\n\nAnd as he began to rock in and out of her, Dani's pleasure went to another level and she let herself go, simply enjoying all of the physical and mental vibes created by this man.\n\n***\n\nScott was astounded again by how tight Dani was. This time when he pushed into her, his cock went all the way unimpeded, but it felt like her cunt was coiled around his shaft. The sensations created when he moved in and out put his brain on overload.\n\nHe placed his hands on either side of her shoulders, drew his butt muscles tight and began to gradually increase his speed. As he moved faster and faster, Dani's moans increased in volume, which helped bring him even more pleasure - he knew she was enjoying it as much as he was.\n\nScott was actually grateful that he'd already had two orgasms, because as good as this felt, it wouldn't normally have taken long to shoot his load. He wanted to enjoy this ride as long as he could.\n\nBut he did want to try something different, so he pulled out of Dani and asked her to get on her hands and knees near the edge of the bed. When she complied, he stood up beside the bed, gazing down at the spectacular sight of Dani's two beautiful ass cheeks and her swollen pink pussy lips. That was a mental picture he was sure he'd never forget.\n\nHe stepped up and filled her with cock again, reveling in the feeling of being surrounded by her hot flesh.\n\n***\n\nEverything was new for Dani and everything was wonderful.\n\nAs good as it felt being on her back, when Scott drove his dick into her from behind, she felt like it was even further inside her now. As he increased his tempo, she could feel his balls slap against her ass and his hands gripped her hips tighter.\n\nAs he banged into her again and again, Dani understood that when he was done, she'd be feeling well fucked. And she loved it.\n\n***\n\nScott had been gentle with Dani before, but once he shoved his cock into her and felt his pelvis ground into her butt, he had trouble holding himself back. It simply felt too good to pound into that amazingly tight pussy, and she was so wet he knew he wouldn't hurt her. \n\nSo he let himself go a little and sawed in and out of her until his legs began to get a little tired. By that time, he believed he was pretty close to coming, so he decided to rearrange things again.\n\nHe got back on the bed, rolled to his back and asked Dani to sit on him. She straddled his hips, reached down to direct his dick, then sank her hips to envelop him with one satisfying push. In this position, Scott knew he wouldn't have to do the work because she was so excited she did the moving for both of them.\n\n***\n\nAs she dropped down on Scott's cock again, Dani knew it'd only be a short time until she came. There had already been several mini orgasms, but the big one was building.\n\nSo she rocked up and down on his pulsating meat, getting lost in how good it felt. That indescribable feeling of being totally filled up eventually was more than she could take.\n\nDani started with a low moan, which increased in volume.\n\n\"Oh, god, Scott. Oh, shit! I'm fuckin' coming!\"\n\nAnd then the wave burst over her, filling her whole body with warmth and she screamed in delight as she skewered herself on that huge cock. She never had any idea she could feel this much pleasure.\n\n***\n\nScott was already getting close, but watching Dani's face contort and hearing her screams was about all that he could take.\n\nAs she finally slowed down with her bouncing, he whispered, \"I'm close, if you want to finish me off.\"\n\n***\n\nDani heard his words and immediately dismounted. She kneeled beside his hip, leaned over and took his cock into her mouth, already sucking as she allowed more of his dick to enter. She slid her lips down as far as she could go and sucked for all she was worth on the way back up.\n\nThen she heard Scott scream, \"Fuck, yeah!\" and the first blast hit the roof of her mouth, immediately filling her with hot gobs of semen. Before she could react, a second shot slammed into her. She swallowed what she could, but some cum leaked out of the corner of her mouth.\n\nScott wasn't nearly done yet, though. As Dani savored the hot taste of his cum, she detected at least three more blasts coming from his dick as she sucked on the head and stroked the shaft with her hand.\n\nJust the thought of what she was doing almost caused Dani to come again. She felt totally wanton as she swallowed more of Scott's cum, and all of the sexual things that had happened to her in the last week came crashing into her memory.\n\nBut she realized that she loved doing this the most. As she sucked up the semen that had escaped her mouth earlier, and licked all over Scott's cock and balls, Dani knew she was becoming addicted. Nothing in her life had ever given her such a charge as sucking a dick and swallowing, and she wouldn't be able to live without it.\n\n***\n\nScott was in a state of total amazement.\n\nHe had lusted over his young neighbor for so long that it was hard to compute that he'd just had glorious sex with her three times in the last few hours. What stunned him was that she was clearly overjoyed to finally be experiencing sex and she couldn't get enough of it. \n\nAnd she was damn good at it.\n\nHe watched with a huge smile on his face as Dani lapped up the last remnants of his orgasm, which had almost blown his mind with its intensity. This girl apparently really liked the taste of cum. He couldn't believe his luck.\n\n***\n\nAs she licked up all the cum she could find, Dani was almost numb with pleasure. She couldn't believe what a thrill it was to have sex, and to have sex with Scott as her first made it even better.\n\nShe moved up alongside him, smiled and looked up into his eyes, and said, \"Scott, thank you so much for last night at the party, and thank you for everything else we've done. I could never imagine it being as good as it was.\"\n\n\"Dani, you are one sexy girl. I'm just glad we could share this together.\" \n\nWith that, the happy couple moved into a tight embrace, and both wondered how long it would take until the flames began again. Both thought, \"Not long at all.\""
    ],
    "authorname": "Elickser",
    "tags": [
        "female virgin",
        "lesbian oral",
        "long legs",
        "neighbor",
        "older man",
        "pussy eating",
        "redhead",
        "younger women",
        "mature",
        "first time"
    ],
    "category": "First Time",
    "url": "https://www.literotica.com/s/luscious-young-neighbor"
}
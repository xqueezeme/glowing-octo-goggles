{
    "title": "Making a Sissy Jock Pt. 03",
    "pages": [
        "I dreamed of cock.\n\nI dreamed of Rob's cock making me cum, filling me, filling my ass, filling my insides with huge cockmeat and then cum.\n\nI wake up from my sex dreams of Rob to having Robin there with one of my legs over his shoulder and he has something shoved in my ass and it's vibrating intensely and rattles my brain.\n\nPleasure, pure pleasure and the vibes were too much pressed right into my sissy spot and my eyes rolled in the back of my head as I came.\n\nAnd came.\n\nOh, oh, oh fucking goddess Robin was grinding this powerful viberator into my sissy spot in my ass and there's no way to defend against cumming and crying out.\n\nNot touching my cock at all just each vibrating storm making me cum like I never thought I could before this.\n\nI was an anal virgin before this and Robin took my cherry and changed me when he took me and I'm waking up having these sissygasm feelings running through me waking me up and having me sobbing.\n\nI have never felt so many waves of buzzing pleasure in my life and I'm sissying and trying to breathe and thinking seems so far away.\n\nI don't care.\n\nI came and sobbed and nearly passed out and then Robin rolled me the rest of the way over and put my other leg over his shoulder and sank his huge, thick, hot living cock inside of me.\n\n\"Breathe Macy, Breathe baby, feel the size, feel the heat.\"\n\n\"Mm...Macy?\"\n\n\"You silly sissy girl, you're Macy, You're my sweet Macy girl.\"\n\nI was mentally reeling still my brain going from sleep to sissygasmed shock to this...to Rob looking me in the eyes and softly and sweetly saying that, calling me my sissy name.\n\nThen he has his hands in my hair and pulls my head up enough to softly, sweetly and passionately kiss me.\n\nI've made out with lots of girls.\n\nReally haven't been the one getting kissed.\n\nI've never been kissed like I mattered.\n\nAnd kissed like that as Robin was slowly fucking me with his huge cock.\n\nKissing me more, deep looks in my eyes, calling me Macy.\n\n\"Macy my sweet sissy....\"\n\n\"Macy my sissy girl....\"\n\n\"Macy my sissy angel.\"\n\nAnd when Robin hears me whine as another sissygasm builds in my depth he does these over and over short sweet humps, thumping his cockhead over and over and over into my sissy spot until I cum and tumble blissfully deeper.\n\nThe entire time each jab of pleasure came with \"Macy.\"\n\nHe kept saying my name.\n\nMy sissy name.\n\nIt got better as Robin got me off again and again and kissed me and held me through it as he ended his chanting of \"Macy\" with him sinking his cock as deep as he could and as I was having my sissygasm he came too filling my insides with his seed, his cum.\n\nI've never been a woman, never been a gay guy before this.\n\nI don't know how normal it is for my body to love feeling cum gushing inside of me.\n\nLike I craved Robin's seed.\n\nI sobbed again literally because it felt so good and right and with Robin's cum in my ass I felt whole.\n\nI'm spent and I'm exhausted from all the lovemaking and all of the sex that Robin put my virgin sissy body through and I'm drifting off as I feel him settle headphones around my ears and there's pleasant music with just the slightest voices hidden within?\n\nI woke up and things felt different.\n\nI don't know why or how they're different but they're different.\n\nNo it's calmer.\n\nI feel calmer less anxious, like less anxious about anything.\n\nHappy? Satisfied?\n\nBoned...really deeply boned and it's like the best after feeling in the world.\n\nLike laid used to be but it's literally I can feel inside of me stretched and changed and massaged and loved and fucked and filled.\n\nFilled.\n\nOh my, the thought of that.\n\nIt's just, just.\n\nAnd I see Robin in bed with me sleeping and I see him with that morning stiff and hard and I am moving to suck that beautiful cock of his drooling and actually mouth watering at the thought.\n\nI almost tear up sucking his cock, getting his perfect big, thick, cockhead past my lips.\n\nGiving the first long sweet slow blowjob of my life.\n\nI don't understand how some women don't like sucking dick.\n\nWhen you have a big huge alpha cock to suck and nothing but time.\n\nIt's heaven.\n\nI never thought I'd be doing this but after how this all started, losing my cherry to this big perfect cock and now being able to do this.\n\nSucking cock slowly, leisurely, enjoying it, taking my time with it is so powerful.\n\nIt's as sissy making as getting faced fucked was because this is all willingly going on.\n\nSavoring all the tastes and textures, feeling Robins pulse through my lips and tongue.\n\nSlowly teaching myself to go deeper down, wanting to do that, be that good, learn that skill.\n\nRobin wakes with this moan and a slow hip roll. \"Oh Macy, of babe that's so good, perfect, just perfect Macy.\"\n\nIt makes me feel good, makes me smile around his big cock and stroke him, suck more but not faster just more intent.\n\nGod I really want to be a good cocksucker.\n\nI really feel invested in this.\n\nI want Robin to like me, like really like me and stay.\n\nI keep going, getting more and more into it.\n\nRobin keeps rolling his hips, his fingertips, touching my face, tracing down as he says my name.\n\n\"Macy, Macy, oh good girl Macy, good sissy girl.\"\n\nWe do this until his breathing changes and He cums in my mouth and I pull back and relax, give him enough room to flood my mouth with his hot seed.\n\nAnd when he stops spurting I close my eyes and taste it.\n\nActually stop everything and just taste Robins creamy cum and savor it and I have to admit I like it.\n\nKnowing exactly what it is even makes it better.\n\nI mean given everything I thought about myself it shouldn't but it is really good, and sexy too and I can see myself loving it, that cum will be important to me.\n\nRobin pulls, well guides me back up to him and we kiss and he touches me in places that none of my lovers touched me before and he massaged my non existent chest even and played with my nipples.\n\nThen he got hard again and rolled my over onto my front and spread my cheeks and lubed me and sank into me.\n\nI groaned.\n\nI was sore from losing my cherry last night but Robin was in me.\n\nInside of me because he wanted to be.\n\nAnd this time was different.\n\nRobin fucked me slowly.\n\nTook the time to stretch me out and fill my insides before he started making slow love to me and finding my prostate, my sissy button pretty much in a few strokes and he slowly softly bounced his big cockhead there and made me moan and fist the sheets as he kept me right on the edge of pleasure and cumming, that delicious feeling that I've only ever felt from Robin's cock.\n\nAll the time he's kissing my neck, talking in my ear.\n\n\"Macy, sweet, sexy, Macy.\"\n\n\"Sissy girl, such a good sissy girl.\"\n\n\"I love this, the way you feel, the way you fit me, you wrapped around my cock is heaven.\"\n\nI get right into the edge and fast and shallow breathing.... going to spurt and then Rob will sink into me all the way which feels so satisfying after the mini strokes to my sissy button.\n\nBut it's cool down time.\n\nIn my depths, filling me, hitting that deeper ache then talking to me, calling me by my name, my sissy name and then into more deep strokes until he decides to go back to bumping my sissy spot over and over again.\n\nThe best sex of my life and I'm the one getting fucked, I'm the girl, I'm the sissy and I love it.\n\nIt lasted I don't know how long but when I cum Rob bumped me hard and fast right over the edge and fucked three fast full length strokes into my ass before my sissygasm overtook me an I came really hard into the bedding whining like a sissy girl and chanting. \"Rob, Rob, Rob, oh god Rob I'm cumming!\"\n\nI heard him breathing hard, sank deep inside me as my sissypussy wrapped around his cock and pulsed and I felt all of him until I slackened and Ronin bump humped my spot, my really sensitized spot again until he started sounding like he was going to.\n\nRob kissed my neck, sucked on it, and said in my ear. \"Feel this Macy, feel, this, close your eyes feel this, feel me cumming inside your sweet sissy ass.\"\n\nHe bumped and bumped my spot then he ground into it, ground and pushed into it and it kinda hurt but in this special way then he groaned \"Macy....\"\n\nAnd he held his cockhead into my sissy button and came and I gasp, whined, screamed as I sissied again that fast as jets of hot thick Rob cum squirted not just inside of me but right pressed into my sissy button.\n\nHow? How was sissy sex this mindblowing mind breakingly good.\n\nI went limp and twitchy and Robin spooned me until his phone chimed.\n\nHe took it and smiled and kissed me.\n\n\"Don't panic, I hired a few people for this weekend and they're not from around here. Just enjoy it.\"\n\nHe kissed me and took one of the sheets and went and let them in.\n\nTwo french maids to clean and wait on us, a cook that started making us breakfast and a woman that had a big make-up case and clothes with her and had the maids run me a bubble bath.\n\nShe smiled at me. \"Miss Macy I am Giselle, I am your fantasy stylist and my job is to make you femmy and pretty and perfect all weekend for mister Robin.\"\n\n\"Now I have the maids running your bath and we shall start the Spa.\"\n\nI was shocked and more so that she never batted an eye or the maid that ran my bath or the one that brought my coffee and called me \"Mademoiselle Macy.\"\n\nI was smiling and feeling very much not like the old me as I sank as gracefully as I could into the bathtub of hot bubbles and other things that already felt amazing on my skin."
    ],
    "authorname": "Sissyhalo1",
    "tags": [
        "big cock",
        "blowjobs",
        "cock sucking",
        "sissy",
        "mind control",
        "hypnosis",
        "sissygasms",
        "transgender"
    ],
    "category": "Transgender & Crossdressers",
    "url": "https://www.literotica.com/s/making-a-sissy-jock-pt-03"
}
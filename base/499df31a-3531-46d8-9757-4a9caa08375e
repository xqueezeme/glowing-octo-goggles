{
    "title": "To Protect and Serve Ch. 12",
    "pages": [
        "Proofread by FernieLyn \n\nThis story is a bit wordy and fairly long, so if you are looking for immediate gratification, you might want to look elsewhere.\n\nThe following story is a work of fiction. Any resemblance between these character and events and any real person or events is strictly coincidental . . . and pretty darn impressive seeing as it is a science fiction story. Do not reproduce or copy this story without the consent of the author.\n\nThis story is based in an alternative universe, where history took a different course than the one we are used to. In this world, the creatures which we now believe to be legends have walked alongside man for the duration of our existence. Vampires, werewolves, wizards, witches, sorcerers, and a host of other beings share our world.\n\nThe following story contains, in one chapter or another, lesbian, homosexual, heterosexual, anal, group, sci-fi/fantasy, non-human, and BDSM sexual activity. There may be some erotic horror in there somewhere as well, but I haven't made up my mind.\n\n---------------------- ------------------------\n\nShamira had one clawed foot on the back of one dragon, trying to keep it still while she kept her eyes on the enormous above-ground pool that had been constructed nearby. Periodically, a little head, and by \"little\" she meant the size of a bowling ball, popped up shyly out of the water, looked around, the dove under the surface again. There were a lot of strange people in the barn, as well as two larger dragons and a large number of Lesser Dragons. Shamira had the sinking feeling that she would never have free time again. \n\nThe new addition that had hatched turned out to be another male. He was also a Sea Serpent, which was a type of Moon Dragon. Archimedes had identified it quickly based on some old pictures and they had quickly gotten it to the pond while the pool was being built. The Sea Serpents could breathe above and below the surface and could live in both salt and fresh water. And they could apparently get big. Really big. \n\nAccording to legends, six hundred feet was not unthinkable, and Archimedes claimed that their heads could easily be the size of a double-decker bus. They had no wings and had only a front pair of arms, but their tails were broad and ideal for swimming. Supposedly some Norsemen had once found the skull of such a creature which had given birth to the legend of the Midgard Serpent, a beast that supposedly encircled the world.\n\n'We're going to need a bigger pool,' Shamira thought tiredly as the newcomer poked his head up again, touched her nose, then went swimming. The other dragon, a Thorn-Tail Sun Dragon, kept trying to see what his new little brother looked like, smelled like, and was doing. Shamira began to wonder how her sister managed to corral both nephews. \n\n'Maybe I should call her,' she pondered. She had not broken the news to her sibling that she was walking again, much less that she had become a dragon. Samantha was in the final stages of a divorce, and Shamira did not want to distract her. \n\n\"How's he doing?\" Clara whispered from nearby.\n\n*I'm not sure. His mind is a jumble of images and everything. He's confused. I'm not who I'm supposed to be, but he still trusts me. *\n\n\"He wants his mommy,\" Clara said, feeling a twinge of maternal sympathy. \n\n\"Or father,\" Archimedes said as he stepped up. \"Like many species of birds, dragons shared nesting duties between males and females.\"\n\nShamira glanced down and saw Alessandra talking with two other newcomers at the other end of the pool, both recently arrived members of the Tribunal. One was an elf so amazingly handsome that he made Daniel, the creature that had tortured Shamira, look like a hideous hunchback by comparison. The other man was a lycanthrope, or rather was THE lycanthrope. The bushy-bearded mountain of a man was the most alpha were on the planet, hence his place on the Tribunal. He could reduce other weres to quivering messes just by staring at them, with the present exceptions of Clyde Pritchard and Travis McNeil. \n\nShmira realized how powerful of a friend the former must be, and how great of a catch as an employee in the latter. Both members of the Tribunal had brought retinues of bodyguards with them which, combined with Alessandra's group as well as Shane's household and security detail, made the farm a very crowded place. \n\n\"Sorry we're late,\" Kira said as she and Arthur hurried over. \"Finding a place to park was a beast. I've never seen so many . . . hey, there's the little guy!\" she cooed as the baby Sea Serpent poked its head up and made a happy chortling sound. It worshipped Shamira, but these two pink pale things smelled like her and were a tad less intimidating. It did not help that Kira had been feeding it sardines on and off for the last twenty-four hours since its birth. They had just run back down to their apartment to change before coming back.\n\nThe young Thorn-Tail started sniffing around Kira, trying to get at some of the fish. Arthur wound up tossing him a few, making the male half of the couple the dragon's new favorite person. \n\nShamira looked around and located Katar, asking him to come over. * Are you sure that you and yours don't mind looking after the children for a bit? I'd really rather be human for this meeting. *\n\n* Absolutely, * he replied. * The new young -- *\n\n* That's it. I'm going to come up with names for both of them by tomorrow, * Shamira thought irritably.\n\n* As you wish. As I was attempting to communicate, we can help, though none of us are particularly good swimmers. I might recommend contacting the merfolk though. They can communicate as we can and could help acclimate the Sea Serpent to ocean life. They have a representative on the Tribunal as well. *\n\n* Do you have a representative? \n\nKatar looked away, and for a moment Shamira could sense resentment. * No. We have never been powerful enough. *\n\nShamira was not sure why, but she thought that unfair. * You will. *\n\nKatar and several of the Lesser Dragons looked up at her. They seemed to have a conversation amongst themselves, then a couple jumped into the pool and started playing with the Sea Serpent. * We have come a great distance to help you. Do not toy with us now. *\n\nShamira shifted back into human form. \"I'm not toying.\" She let Clara slip a robe over her body as the meeting got underway. \n\n\"Well, now that everyone is present and accounted for, we will begin,\" the mega-lycanthrope began. He was simply referred to as Alpha, which in his case was not actually pretentious. Renata, who was standing at Shane's side, looked almost awestruck. The guy gave off serious pheromones. He had an accent that was hard to place, but he probably came from Eastern Europe.\n\nAlessandra stepped forward. \"This is a momentous time in our world. The Unveiling is coming closer, a revolution has been thwarted, and the Greater Dragons have begun their return. Even now, Shadow Wing stands among us.\" \n\nEveryone looked at Shamira for a moment. She waved somewhat awkwardly at everyone. \"Hey.\"\n\nThe Representative smiled. \"The Tribunal wants it to be known that Lord Stapleton and Shamira have their full support during this time of transition.\"\n\n'Huh,' Shamira thought. 'Since when do I rate being at the same level as Shane?' \"Has there been any word on Jonas or where that portal leads to?\" she asked. \"That's kind of the Christmas present I'm hoping for. Him with a nice red bow on.\" \n\nThe elvish member of the Tribunal, known only as the Shepherd, cocked an eyebrow, filling Shamira with envy, as well as wondering if that ability was a criteria for getting on the damn Tribunal.\n\n\"Do you still see the one known as Jonas as being a threat?\" the elf asked with a strong yet lyrical voice.\n\n\"He allowed a member of my House to be tortured and participated in the morning star trade,\" Shane said. \"He betrayed his lord, offended me, offended a member of the Tribunal,\" he added, pointing towards Alessandra, \"and sought to enslave the Greater Dragons at their birth for some nefarious purpose. If we are to go public, then those like Jonas must be eliminated.\"\n\n\"His days are numbered,\" the Alpha replied. \"I will be calling for a Wild Hunt. The weres will run him to ground and finish him.\"\n\nThere was a lull in conversation. The Wild Hunt was a serious matter, meaning that those who committed to it would not rest until the quarry was captured. And it appeared the Alpha would lead it. The Alpha was actually a werewolf, so the desire to hunt was strong in his blood. Several of Shane's weres looked at him, waiting for a sign. When he nodded, all of the weres of Shane's house, with the exception of Travis McNeil and Sebastian, stepped forward. \n\nRenata, Bengaly, Kira, Raul, Monique, Valeska, and Barbara would take up the call. Travis took a position to Shane's left while Sebastian stood at the right. The bear and the spider would guard their lord, along with their vampire brethren. Clyde Pritchard looked like he was aching to step forward along with many of his men, but a lord could not abandon his land. \n\nThe Representative looked solemn as she took the floor again. \"The Tribunal acknowledges and blesses this Wild Hunt. The life of the traitor Jonas is forfeit in our eyes.\"\n\n\"Once they start, they'll keep picking up more weres as the Hunt goes on,\" Clara whispered in Shamira's ear. I've heard that the Hunt can be measured in the thousands by the time it's done. It just depends on how long until they catch him.\"\n\n\"Do they even know where to start looking?\"\n\n\"I'm sure they'll think of something.\"\n\n\"Is Shane going to be in trouble keeping the peace?\" Shamira asked worriedly. \"I mean he's losing so many --\"\n\n\"I'll be fine,\" Shane interjected, approaching while the Hunt gathered up more members from the audience. \"The Shepherd and the Representative are both here with their entire contingents of bodyguards. And I'll be creating more vampires soon. Speaking of which, I would like to discuss the matter we were talking about earlier.\"\n\nShamira so very much did not want to discuss attempting to create her own vampires, so she was almost relieved when the Shepherd walked over.\n\n\"Might I have a word with Shadow Wing in private?\" he directed to Shane.\n\n\"Absolutely,\" Shane replied with a slight bow. \"Though I humbly suggest calling her Shamira, otherwise her attention might wander because she forgets you're talking to her.\"\n\n\"Once,\" Shamira mumbled. \"I only did that once.\"\n\n\"Lady Shamira,\" the Shepherd started, \"I feel I owe you an apology of sorts.\"\n\n\"Apology? I didn't know you'd pissed me off, and I usually try to keep track of those things. Usually it's Shane.\" She noticed that the corners of the Shepherd's mouth quirked just a little.\n\n\"We all discussed the matter of your recent incarceration,\" he replied. \"It seems that your sole encounter with my people was not exactly an endearing one.\"\n\nShamira felt a little chill in the deepest parts of her mind. \"I spend a lot of time trying not to think about it.\"\n\n\"And I am remiss again at bringing it up. My greatest regret, besides what you endured, was that the elf responsible did not face our justice. I assure you that we are not a barbaric race.\"\n\n\"Hey, Jonas and Lacroix were both assholes, but it's not like I hate all vampires.\" She clapped him on the shoulder. \"So no hard . . . what the fuck?!\" All of Shepherd's bodyguards had surged forward while Shamira took a step back. \"Lay off! I wasn't --\"\n\n\"No one lays a hand on the Shepherd!\" on guard shouted, moving between the two with a gun drawn.\n\n\"Shamira!\" came a shout from behind her. It was Arthur, and he sounded really nervous. \"Baby's awake!\"\n\nShamira's stress had apparently gotten through to the Thorn-Tail, who had awoken scared and angry and prepared to defend his nest. The Lesser Dragons swarmed around it, slowing it down a little but not looking too thrilled about it. One of the guards raised his weapon, and Shamira's protective instincts kicked in. \n\nShe didn't even bother removing her robe before she began to shift forms, placing a full sized Moon Dragon right in the middle of the upcoming squabble. All elvish guns were pointed upward, all the dragons looked genuinely pissed off and agitated, the weres were trying to figure out what was going on, and the Shepherd was plastered against Shamira's scaly chest. \n\n\"STOP!\" the Alpha yelled at the top of his enormous voice, then let out a long, bone-chilling howl. He stepped into the fray, shoving guards and dragons and just about everything else out of his path . . . until he came face-to-snout with Shamira. Neither was about to back down, much to the Alpha's credit, considering he was outweighed by several tons by an opponent who could breathe fire. \n\n\"That --\"the Shepherd sighed, \"-- was not how I pictured that conversation going.\" \n\n\"Shamira, what happened,\" Shane asked. He left out \"this time\" and \"What did you do?\" which Shamira appreciated. She was pretty sure that this was NOT her fault.\n\n\"Lady Shamira placed her hand on me without letting me know in advance. My bodyguard reacted.\"\n\nShane shook his head, containing a shit-eating grin. Shamira really did not mean to do these things. \"Shamira, you never lay your hand on a member of the Tribunal unless you are ALSO on the Tribunal or unless he or she has granted you permission.\"\n\n* Well hell, how was I supposed to know that? He just walked over and talked to me! *\n\n\"Everyone, lower your weapons!\" the Alpha growled.\n\nThe Shepherd turned around and nodded to his people while Shamira sent a mental command to the dragons. Even the little Sea Serpent was poking its head out of the pool and looking vexed. \n\nThe first guard to have pulled its gun was making evil eyes at Katar, probably because he knew he was not going to stare down Shamira. \"Lesser Dragons finally grow some backbone now that the big ones are back,\" he mumbled. \n\nShamira ducked her head and glared at him. * They are smaller, but not lesser, * she sent, her thoughts as cold as deep snow. \n\n\"That will be enough,\" the Shepherd said, his look letting the guard know that he was in for a world of punishment later.\n\nShamira gave a mental sigh. * I apologize for the transgression, * she projected. * I meant no offense. As Lord Stapleton can attest to, I am not exactly up on all the rituals and protocols. * She had to pause while Shane covered his mouth and coughed an agreement into his hand. \n\n\"I try not to take offense where none is meant, and I would be hard-pressed NOT to call the inheritor of the power of Shadow Wing an equal to any on the Tribunal.\" He looked straight up at her. \"Actually, if you don't mind --\" he started, reaching his hands forward. Shamira settled onto the ground and he placed a hand on his scales, and his eyes filled with a wonder she would not have expected. Several of the elves did the same.\n\n\"Magnificent,\" the Shepherd murmured, then bowed and walked back to the Alpha and the Representative.\n\nShamira shifted back. \"What the hell was that about?\" Shamira asked as Shane handed her another robe. Shane shrugged, but Archimedes had something to say on the matter.\n\n\"Many of us have been alive a long time,\" he explained, walking beside her as she led the Thorn-Tail back to the nest and then went to check on the Sea Serpent. \"Once you have lived for a thousand years or so, you begin to run out of things that surprise you. For some of the more long-lived members of the Tribunal, the magic of simply existing has waned. You,\" he said, placing a friendly hand on her muscular shoulder, \"are a wondrous creature.\" \n\n\"I could have told them that,\" Clara said, kissed her girlfriend on the cheek. She handed Shamira a cell phone. \"By the way, your sister called.\"\n\n--------- ----------------\n\nAn hour later . . .\n\n--------- ----------------\n\n\"Well, looks like I'm getting a visit,\" Shamira said after finally getting off the phone with her sister Samantha. Apparently being able to walk again and turn into a dragon was kind of a big deal. Who knew? She looked over at Kira and Arthur Blanks. \"You guys gonna be available to babysit a while this weekend?\"\n\nKira was tossing bits of beef jerky to the Thorn-Tail while Arthur was sitting on the deck of the pool watching the Sea Serpent swim underneath. \"Yeah,\" he said. \"I think we can manage.\"\n\n\"Katar, do you and yours have to be heading back to South America at some point? I hate the idea of just keeping you here indefinitely if you've got things needed doing.\"\n\n* The entire flock is here, and this is a momentous time. * Katar directed his next thought so that only Shamira could receive it. * We heard what you said to the elf. We will remember you for defending us and speaking of us as being other than a servant race. *\n\n\"I've noticed that friends are a lot more likely to bail my ass out of a problem than people who've gotten stepped on. Just a thought.\"\n\nShane waved her over to where he, his household, and the members of the Tribunal had gathered again. The elvish bodyguards were noticeably absent.\n\n\"Just a few more things to discuss,\" Shane said, walking in the circle. \"First, I have decided what to do about the territory around Savannah. Currently, we are the controlling authority, and are faced with several possibilities for bringing law to the lawless.\" \n\n\"Either I could expand my direct control southward, get Lord Mayla of Jacksonville to expand northward, or the Tribunal has given me permission to install a regional sheriff who will technically be under me but will act with more independence than one of my enforcers. I have decided to enact this third option.\" He stopped in front of Banshee. \"And I have chosen my oldest child to take that post.\"\n\nBanshee's face shot up and her eyes opened. She was a difficult woman to surprise, but Shane had just done it in spades. \"What? My Lord Stapleton, surely --\"\n\n\"Banshee, I know that you have doubted your leadership ability since what happened to Shamira, but that woman,\" he said with a smile and a wave in Shamira's direction, \"has shown that even the wisest leader can make mistakes in dealing with those under the care. You are less than a decade away from full vampire status anyway, and it is a natural progression of power.\" \n\n\"Lacroix and Jonas were lax in their duties while they pursued their own aims of conquest, leaving their lands in chaos. I want order, and the Tribunal has demanded it. Already word has spread of the vengeance you wrought in the name of this household, though few if any know exactly why. You can keep the peace,\" he continued lovingly, \"better than anyone else I can think of.\"\n\n\"But --\" Banshee looked around, clearly embarrassed and confused, \"I do not wish to leave. I serve you.\"\n\n\"And I ask you serve me now by taking up this task and relieving me of the burden. You would be granted your own house to build as you see fit. Since the Representative's bodyguard will be at my disposal for a time, I shall lend you some of your brothers and sisters to aid you until you can create fledglings of your own. You will be given a stipend to hire on additional weres or any other races that you feel necessary.\" He placed a hand on her shoulder, then wiped a single bloody tear from her eye. \"Don't look at this as breaking up the house, but rather as building an addition. I would not ask this of you if I did not feel you would do me proud.\"\n\nBanshee stood as tall as she could. \"I will not dishonor you by doing any less than my best.\"\n\n\"I have a request for you. With the recent addition of a Sea Serpent to look after you, I would request that Shamira travel with you and that you accept her as part of your security team.\" He looked at Shamira again. \"I did not mean to spring this on you nor does it indicate any unhappiness. But that new dragon --\"",
        "\"Is gonna need a lot more space than we can provide up here,\" she said begrudgingly. \n\n\"Sir --\" Clara started to say, actually looking a bit flustered.\n\n\"And I was going to send Clara with you as well, to bolster you magical defenses and . . . well, splitting her and Shamira up at this point might prove hazardous to my health.\" \n\nClara grinned at him and took Shamira's hand. \"You are wise beyond your years.\"\n\n\"Once Banshee is better established, I will call my household home so she can develop her own, though she is now and always will be my first child. Leaving home for the first time can be hard, but it can also be rewarding.\"\n\nShamira glanced at the Representative, who was looking like a proud grandmother. A really, really hot, proud grandmother. Everyone in the house stepped forward to hug Banshee and congratulate her on her impromptu promotion. When Shamira hugged her, they held on for a little bit longer. \n\n\"So you aren't going to be our . . . you know, vampire? Anymore?\" Arthur asked when Shamira broke free of the mob.\n\n\"Crap! I didn't even think --\"\n\nBanshee walked over. \"Would you consider coming under my employ?\" she asked. \"You have already shown yourselves to be worthy and invaluable. If Shamira is still concerned with bringing you over herself, I would be most willing to induct you both.\"\n\n\"Really?!\" Kira asked excitedly, then looked confused. \"Wait, what did you mean about Shamira still being concerned?\"\n\nShane chose this most annoying opportunity to bring up a subject Shamira had been trying to avoid. \"We believe that Shamira has skipped two stages at least in her evolution as a vampire. Blood witches have confirmed that her blood is that of a full vampire, capable of creating vampires of her own.\"\n\n\"Really?\"\n\n\"Wait a minute,\" Shamira objected, \"let's not forget that this is all hypothetical. You yourself admitted that I'm kind of an odd case here.\"\n\n\"But why not try?\" Arthur asked.\n\n\"Because one of the steps to becoming a vampire is dying. If I try and fail, and --\"\n\n\"I get it,\" Kira muttered. \"There's no mulligan in that case is there?\"\n\n\"No,\" Shamira said, seeing how appealing the idea of being a vamp was on her friend's face. \"And I'm not willing to take that risk.\"\n\n\"But --\"\n\n\"I'm sorry, I just can't. Hey, you guys seem to be doing better right? You'll still be around in ten years, and that'll give you time to figure out what you want to look like for eternity.\"\n\nArthur and Kira looked dissatisfied, but they accepted Shamira's logic. \"I wish you hadn't gotten them worked up like that,\" Shamira said disapprovingly to her boss. \"You know how I feel.\"\n\n\"And you know how I feel as well. You're right in saying that Kira and Arthur both have time now, thanks to your blood, but there are many who will wait and die in vain to be brought over simply because of those ancient laws that you've already demonstrated disdain for.\" He relaxed his tense frame, then, \"Shamira, the Tribunal is willing to suspend those laws for you when they would not for me. I will bring over a dozen more. You could save two more, of your choice.\"\n\nShamira wrung her hands. \"Shane, if I do this and they die, I'll do more than blame myself. You KNOW I'll be mad at you and the Tribunal for putting me through this.\"\n\n\"And I am so confident in you and your power that I would risk the wrath of a dragon.\"\n\nShamira walked over to where the Thorn-Tail was sitting, anxiously awaiting his alpha to comfort him some more. The two other pale things may smell like her and the little dragons could give comfort, but Shamira was the authority. Even when she was not communicating with its young mind, her presence was obviously calming and comforting. A weight seemed to be returning to Shamira's shoulders.\n\n\"This is just so hard,\" she said in a whisper, trying not to let the young one sense her distress. \"Shane, I can barely take care of myself. Now I've got two babies that I barely understand that I'm responsible for, and you want me to try and make vampires? I know it's a broken record, but I kind of suck at being a vampire.\"\n\n\"I think you don't give yourself enough credit,\" he replied soothingly, placing his hands on those rippling shoulders and slowly massing some of her stress away. \"At least consider it. I'll work with Archimedes, and see if we can find ways to make things a little less hectic for you. Between your Renfields and the . . . Smaller Dragons,\" he added, kissing Shamira's neck lovingly, \"we should be able to give you more time to catch up on other things. It will be a while before Banshee is ready to establish a permanent estate down in Savannah.\" \n\nShe stroked her young charge's scaled head, then looked for Archimedes. \"Where do you think this guy came from?\" she asked. \"What part of the world?\"\n\n\"Skeletal remains were found of similar species throughout what we now call Europe. The first were found near Scotland.\"\n\n\"So maybe a Scottish name? What's that old language of theirs?\"\n\n\"Gaelic.\"\n\n\"Yeah. Something Gaelic. And the Sea Serpent is from all over I'm taking it, so . . . hey, maybe name him after the Midgard Serpent? How did you pronounce that?\"\n\n\"J\u00f6rmungandr.\" Archimedes smiled. \"A fine name indeed.\"\n\n\"Hey what's the Gaelic word for fire?\" she asked, watching a wisp of smoke unfurl from the young one's snout.\n\n\"Aodh.\"\n\n\"Is there anything you don't know?\"\n\n\"Maybe.\n\nShamira grinned. \"Aodh and J\u00f6rmungandr ,\" she said again. At least she'd finally gotten around to naming them.\n\n------- --------------------\n\nThat weekend . . .\n\n------- --------------------\n\n\"So that's pretty much been my life,\" Shamira finished. She had just recounted her recent life-changes to an already shell-shocked sister, who every now and then just asked Shamira to stand back up just so she could assure herself that the paralysis was gone. \n\nSamantha's eyes drifted over to the the dragon Aodh, who seemed to just as curious about her as she was about him. He managed to be around constantly, so much \"underfoot\" that he was almost cat-like. He was obviously beginning to understand spoken words. \"Don't put your nose there,\" was a phrase he had learned quickly, because Shamira thwacked him hard when he went sniffing people in inappropriate places. Katar had curtailed such admonishments a bit by reminding her that this was how dragons investigated things. \n\n\"He's just so . . . big!\" Samantha said happily, then walked over and let the dragon sniff. Aodh made a rumbling noise to indicate his happiness, which a mother like Samantha could detect instantly and was pleased by. \n\n\"I guess you smell enough like me that he knows we're family,\" Shamira said with a smile. Her sister was in her element in times like this. Okay, maybe the kid was a little bigger that Shamira's nephews, but it was an intelligent life form and a child. Therefore, Samantha would dote on it. \n\n\"He's just a big sweetie, yes him is!\" the sister replied, rubbing her hands over his muzzle. \"My God! Do dragons need vets?\"\n\nShamira shook her head. \"They're smart or smarter than people and can live hundreds of years. I think they'll need their own doctors, not veterinarians.\" Samantha did not appear to be listening, as she had already begun a cursory investigation, checking the eyes and the teeth. \n\nAodh thought it was all great fun, as if he were being preened. \"I think J\u00f6rmungandr wants a turn,\" she said, seeing that the Sea Serpent had poked his head over the edge of the pool and was making a clicking noise from his throat. Samantha moved over and reached her hand out to pet the watery serpent, and J\u00f6rmungandr accepted the attention for a moment before retreating to the safety of the water. \n\n\"Can I go in there with him?\"\n\n\"I don't know. I guess it would be safe, though Aodh will probably want to go swimming as well.\"\n\n\"Swimming sounds nice,\" Clara said as she walked over to where the sisters were sitting. She had wanted to give the two a chance to catch up, but it seemed that things had settled down a bit. \"Why not go out to the pond? It's big enough for everyone.\"\n\n\"Can he go out there?\" Samantha asked, looking at the pool.\n\n\"He can breathe air just fine, and he'll just slither on out there,\" Shamira replied. \"He's done it before. He seems to like fresh water from time to time. We've added a ton of salt to the pool.\"\n\n\"I'm for it. Anyone got suits?\" Samantha asked.\n\nClara grinned. \"Is clothing really necessary?\"\n\n\"You're not seriously suggesting we go skinny dipping?\" Samantha laughed. \"That's so . . . high school!\"\n\nShamira raised both eyebrows. \"You're not just trying to see my sister naked, are you?\"\n\nClara grinned bigger and shrugged. \"I promise to keep my hands off of her.\" She kissed Shamira not-so-innocently on the lips. \"For now.\" \n\nSamantha gave Shamira a questioning look. \"She's not serious, is she?\"\n\n\"I don't think she'd actually make a pass at you,\" Shamira said. \"At least not while she's dating me.\" She left out the fact that Samantha was not a submissive member of Shane's house and that if she were, Shamira's girlfriend might very well bang the crap out of her. Shamira just shook her head and headed outside.\n\nSeveral hours later, they were all quite thoroughly soaked, exhausted and entertained. And for Shamira, this time it had not involved sex. She strode out of the pond, water glistening on her tight skin and flowing down her carved body.\n\n\"Great,\" Samantha muttered, turning the other way to see a smiling Clara. \"Now she's just showing off.\"\n\n\"Mama likes,\" the vampire crooned. \n\n\"You know she used to be ashamed of that body?\"\n\n\"We kind of beat that out of her,\" Clara finished. If the sister only knew she was not kidding.\n\nSuddenly, the Thorn-Tail scurried to the top of the bank and started looking (not \"looked\") around.\n\n\"What is it, Aodh?\" Shamira said, almost afraid to approach considering the agitated manner in which the youngster was swinging his tail. \"Clara --\"\n\n\"Everyone out of the water,\" Clara interrupted, heading towards the bank. \"Katar, get J\u00f6rmungandr out of the --\"\n\nAt that moment, a wall of flame erupted around the pond with such heat and force that Shamira was forced to dive towards the ground. Aodh's tail was singed and he cried out, hurrying away and preparing to take flight. Another wall of fire shot up, crossing the entire clearing and cutting them off from the house at large.\n\n\"Who the hell --\" she started to say, wondering who could have the audacity to attack such a highly guarded compound, but she did not have time to dwell on it. Her sister, her lover, one of her young charges, and Katar and several of his dragons were trapped inside, while Shamira and Aodh were caught between a flame and a hot place. \n\n\"YOU RUINED EVERYTHING!\" a voice boomed, containing a vile rage that Shamira had never heard before. It reeked of rot and waste, so much so that Shamira almost did not recognize it. Almost.\n\n\"Jonas,\" she growled, mostly to herself.\n\nBurning shapes began to appear around her, humanoid but far from human. She could not see Jonas yet, but she could feel him, his very presence a malice carried by a brisk autumn wind. \"Everything I worked for, everything I set up, every moment I waited, for NOTHING!\" A ball of crackling white flame shot over her head, making her duck, but it was obviously not meant to hurt her. Jonas wanted to play with her first.\n\n\"You're a fucking idiot!\" she shouted, preparing to transform. \"You came here?! You know you won't make it out alive!\" The flaming forms were getting closer. \n\n\"I'll turn you to ash before you can finish transforming,\" came Jonas's voice. \"Yes, I know who you are now, and I remember you. You . . . we had you hanging like a side of beef and we let you go?!\"\n\n\"Actually, I ripped your buddy apart before my friends came for me. Not that you'd know, since the only ones coming for you are the Wild Hunt.\" All the flames were rendering her Shadow Sight useless, and she had to find him. She started the transformation, letting the smoke pour out of her pores. Then a blast of energy flew past her and nailed Aodh in the side. The young dragon screamed and looked like it was going to take to the sky. Another bolt of energy clipped its wing. Shamira jumped between the source of the bolt and her wounded charge.\n\n\"You son of a bitch! He's just a baby!\"\n\n\"He should be mine!\" Jonas said, stepping seemingly out of the flames. His eyes let off little blazes of their own, and oh did they show how much he hated Shamira. \"Lacroix was so short sighted. He would have been just sat around that little piss-poor excuse of a land for all eternity and whine about how Stapleton had stolen the big prize away from him. I hadn't been studying sorcery my whole life to be security chief to a weakling like that.\"\n\n\"So you hatch a plan to take over by getting him into so much trouble that we have to kill him?\" Shamira was angry. She might be able to shift, but Jonas might seriously hurt Aodh. And she had no idea how her sister and Clara and the dragons were doing inside that ring of fire. \"Samantha?!\" she shouted. She heard some coughing and shouting, but she couldn't make out anything specific. \"Let them out or so help me --\"\n\n\"You'll what?\" Jonas gave an evil grin. \"The only way I stay alive in the long run is I make it so that people, even the Tribunal, are afraid of me.\" He pulled a collar out from behind his back, and Shamira recognized it as similar to the one she had pulled of Aodh. \"Having the 'Great Moon Dragon' at my beck and call should help with that.\" \n\n\"There's no fucking way --\"\n\n\"Put on this collar and swear yourself to me or I'll boil everyone in that pond alive, I promise you.\"\n\nA chilling sensation crept up Shamira's spine. This son of a bitch had not only condoned but had seen her tortured, had betrayed his own lord, had been responsible for who knows how many magical creatures being bled out, and now he wanted Shamira to just hand herself over to him? The left side of her body started to warm up, and she dodged just as one of the flaming forms lunged for her. Whatever the hell these things were, they served Jonas. \n\nShe lashed out instinctively, feeling a solid core to the thing before the burning sensation became too much. She held her arm with its blackened skin close to her body, grimacing in pain as she moved away from the lumbering entity, but keeping herself between it and a terrified and angry Aodh.\n\n\"Put on the damn collar and I'll let the others live,\" Jonas reiterated. \"I'd really rather not be here when the Wild Hunt realizes that I'm not where they think I am, and I know your friends in the barn --\" He stopped when he heard thunder and saw a bolt of lightning in the sky. That same sky had been clear earlier that night. \n\n'Where did all the clouds come from?' Shamira wondered. Someone, one of her friends, must be up to something. She had to give them more time. \n\n\"How do I know you'll let them go?\" she shouted. She grabbed a rock from the ground and hurled it with bullet-like speed towards the nearest of Jonas's fiery servants, making it take a step back but only for a moment.\n\n\"You do what I say and pray that I'm a man of my word,\" Jonas snarled. He glanced around, looking for something . . . Shamira could not tell what. His eyes finally rested on the flaming ring surrounding the pond, and his mouth formed an unflattering sneer. Someone in there was doing something Jonas did not like. Shamira almost smiled, knowing it had to be Clara. The shaman had power over nature and the ability to maintain the balance. Jonas had brought fire, so Shamira's girlfriend was going to bring rain. \n\n\"Fucking red-skinned bitch!\" Jonas growled.\n\n\"Big mistake,\" Shamira said, lunging forward. Jonas turned in time to avoid part of her charge, but not enough so that she did not clip him a little. He staggered off to the side and lost his grip on the collar. He looked like he wanted to pick it up, but realized it would not be a good idea to take his eyes off of his opponent again.\n\n\"She hears that kind of racial slur, and you'll be lucky if I kill you first.\"\n\n\"You might want to listen to reason,\" he said, his eyes glowing and the flames around the pond grew higher. \n\nShamira heard screaming from inside the fiery circle, and she heard Aodh cry out in pain as the flaming forms moved closer to him. She stared at him with more hatred than she had ever felt before. Then, the rain came. And boy, did it ever come with a vengeance. The flames around them were magical in nature, but so was the water that poured down from the sky, drenching only a few hundred acres of North Georgia forest and nothing else. \n\nGaps were appearing in the wall of fire that had separated the barn from the field of battle, and Shamira's allies started popping through. Reaper opened up on one of the flaming enemies with a high pressure water hose. Shamira liked the ingenuity. Sebastian leaped through another gap and started firing his handgun, slowing another enemy down but not killing it. A pickup truck came hurtling through an opening and ran over a third fire creature, then Bunny got out of the cab and ran like hell before the whole thing exploded. \n\n\"You . . . lose,\" Shamira said. Her eyes tried to move to Jonas' right in response to something teasing her peripheral vision, but they shot back of their own accord. There was nothing out there. 'But I could have sworn --'\n\nJonas' eyes were wild now. He grabbed the collar from the ground and lunged forward with uncanny speed, intending to put the collar on Shamira by force if necessary. He extended his hands with the device.\n\nShamira did not see the blow come. All she knew was that Jonas' hands just fell off, the collar still clutched in their grip. Jonas screamed and sunk to his knees. Suddenly, Banshee was standing beside him, looking down on him with complete disgust. She held a sword in one hand, and the parts not coated in Jonas's blood gleamed. Shamira had forgotten about the assassin's Mind Fog aspect that made those around her simply not pay attention to her. \n\n\"You cannot have her,\" Banshee said with ice in her voice. \n\nThe flames all began to die down, and the fiery enemies seemed confused. Shamira finally allowed herself to shift, her body stretching and smoking and growing until the last Moon Dragon stood in the clearing. \n\n\"He is yours,\" Banshee said, looking at the vanquished foe kneeling on the ground. \n\nShamira's dragon jaws lunged forward and caught Jonas around the midsection, then she swung his flailing legs around to face Aodh. The small dragon recognized the smell of the man and remembered what had been done to it. Aodh grabbed those legs with its mouth, and the two dragons ripped the would-be conqueror in half. \n\n\"That,\" started a voice from the pond, \"was intense!\" Samantha stood naked in the water, watching her sister eat a vampire. She looked a little . . . shocked. Shamira looked at her sister who had just been put in mortal danger because of her proximity to the dragon-vamp, then at Aodh, which she had failed to protect. Even now, the young dragon was winding its way around Shamira's feet, trying to take comfort from her.\n\n* Samantha, are you okay? *\n\nSamantha blanched. \"My sister just . . . ate that . . . oh dear,\" she said, then did what most sensible human women would do in her situation. She passed out. 'I suck at being a dragon!' Shamira thought again angrily. And then she saw Clara floating face up in the water, and her giant heart almost broke. She reached out with a giant claw to lift her lover from the water, but she started to move towards the show, propelled by an unseen force. Smaller dragons started poking their heads up above the water to look about, but it was J\u00f6rmungandr who was pushing Clara. A quick scan of the beast's mind showed that it did not understand exactly why Clara was important, only that she was important to the great beast. ",
        "Shamira turned human again and went to Clara, who Katar and his people had dragged over next to Samantha. How did one check to see if an undead were still \"alive\"? She slapped Clara's face a little, then checked on Samantha. Suddenly Shane and Tabitha and a hoard of bodyguards arrived, the rest of Jonas' fiery minions having vanished or been vanquished. Shamira met her lord's gaze. \"Is she okay? Please let her --\"\n\nLillian moved forward and stared at Clara. The necromancer looked beyond the vampire's skin and into something much deeper and less tangible. \"She's still with us,\" she said in a relieved voice. \"She's just passed out from heat and exertion. She must have been casting some serious mojo in there.\"\n\n* She kept up a wall of water and cold air for as long as she could, * Katar projected. * Lady Shamira, I think we should get J\u00f6rmungandr to the pool -- *\n\n\"Yes, please,\" Shamira said, ashamed she had not thought of it herself. \"He must be scared out of his mind.\"\n\nThe Sea Serpent crawled out of the pond as if to follow Katar to the barn, but first he turned and put his nose close to Shamira's face. She ran a hand over his snout and apologized to the universe and the fates that she had almost let this magnificent creature die. It nuzzled her softly, then nuzzled its brother Aodh before making for the safety of its pool. Aodh stayed near to Shamira, allowing the faerie princess Coramen and Lillian to look over its burned wing. They were both convinced it would heal.\n\nTabitha managed to wake up Samantha, who just looked around dazedly for a moment before her eyes came to rest on Shamira, then they opened wide.\n\n'She's afraid of me,' Shamira thought. 'Now she truly understands what I am.\"\n\nBut Samantha just grinned. \"Okay, I always thought that you being a cop was the closest thing I'd get to excitement, but this . . . this is your life?\"\n\nShamira just hugged her sister. \"I'm sorry. I'm so sorry.\"\n\n\"Shamira, I realize we're in the South and everything, but being hugged by my naked sister is just creepy to me.\" When she was released, \"Why are you sorry? This wasn't your fault --\"\n\n\"I should never have brought you into this world. Being near me almost got you killed and almost got Clara killed and --\"\n\n\"I almost get killed every day,\" Clara said, her eyes opening as she sat up. She looked a little pale, even for a vamp, but her eyes were alert. \"If you go ape-shit with guilt again, I will slap you silly. And not in the way you like.\"\n\nSamantha glanced confusedly over at Clara, who cracked a wry grin before falling back to the ground while someone got her a blood pack to drink. \n\n\"I'll explain later,\" Shamira muttered. \"Much later. Okay, maybe never.\"\n\nSamantha did the eyebrow-cocking thing. \"Don't tell me you're into the whole spanking thing too?\"\n\nShamira found something else to look at.\n\n\"You are?!\" Samantha leaned back. \"Anything ELSE I need to know about you?\"\n\n\"I'm going to kill my girlfriend,\" she said, glowering at Clara. Clara's eyes were closed, but she was smiling and sucking blood out of a plastic bag. Shamira stood up, clutching her arm. \n\n\"Shamira, what's wrong with your arm?\" Shane asked, stepping closer.\n\n\"Nothing I don't deserve,\" she muttered, forgetting for a moment that Shane would still be able to hear her.\n\nHe lifted her chin to face him. \"Okay, I realize that my relationship with you is not the same as Clara's, but this is for your own good.\" Before her face could even form a puzzled expression, he kissed her full on the lips, letting one hand grab firmly at her ass while doing so. She almost forgot the pain in her arm and the doubt weighing on her mind, her body grinding (with no permission from her brain) against Shane's body. He was a pretty damn good kisser, though this kind of intimacy was unusual for him. \n\n\"Okay, why are you making out in front of your boss in front of your girlfriend?\" Samantha asked. \n\n\"Oh, she's done a lot more than make out with him. Okay, because it probably would be uncomfortable to talk about it and to head off further surprises and because I don't have anything else to do until I can open my eyes again without the world spinning, \"Shamira is more than an exhibitionist. She's a sexual submissive in a communal setting where any dominant can perform any naughty thing their mind can come up with to her, and we're an imaginative lot. And I promise you, Shamira enjoys it far more than even our other submissives. She has fantasies that none of the rest of us have tried before, and Shane is four-and-a-half centuries old. Did I miss anything?\"\n\nShane shrugged. \"That covers about everything, except,\" he said, looking at Samantha, \"that we all love her very much, and not just in a carnal way. This is our way of life, and Shamira fits in it. We enjoy more than just her participation in the game. We make sure to the best of our abilities that all her needs are met. Right now, she just needs to be reminded that some things happen that she cannot control, and that sometimes when she's trying to save the world, it's okay to let the rest of us chip in.\"\n\nSamantha snorted. \"Good luck with that.\"\n\nShane smiled at her. \"Is it the nature of your family to take these little surprises with such calm?\"\n\n\"Buddy, I ran out of disbelief when my sister turned out not to be dead despite getting shot a dozen times.\"\n\n\"Buddy?\" Shane attempted to feign being offended.\n\n\"Yeah, 'buddy.' Let her freak out if she wants to. She'll put herself back together during crunch time. Always has, always will.\"\n\nThe lord of Atlanta smiled broadly. \"That is some of the best advice concerning Shamira that I have ever heard.\"\n\n\"Hey, I'm still here,\" Shamira grumbled. She hated it when people talked about her as if she was not even present. \n\n\"Hey,\" the sister said, looked at Shamira, \"I thought you were dating her? Isn't that cheating?\"\n\n\"Monogamy isn't exactly the thing around here,\" Shamira replied shyly, digging the toes on one foot into the ground. \"You must be totally freaked out --\"\n\n\"Damn right, but you're still my sister and I still love you. Just . . . just lay off the surprises for a bit. I mean, you aren't secretly like . . . like a psychic too, are you? A mermaid? A Republican?\"\n\n\"Hey, no need to get --\"\n\n\"Okay girls, I think we should all retire to the barn for a bit,\" Shane interjected. \"Let the guards finish clean up.\"\n\n\"Just let me check on --\" Shamira started.\n\n\"No,\" Shane said. He held up his hand. \"Katar can keep an eye on the Sea Serpent, and Aodh will be put to bed so his wing can heal. You,\" he said firmly, \"need rest as well.\"\n\n\"But --\"\n\n\"Tabitha, please take these young ladies to your temporary lab and make sure they let themselves get checked out. Even if you have to tie them to the table.\"\n\nSamantha looked annoyed. Clara looked amused. Shamira, in spite of herself, looked a little excited.\n\n----------- ---------------\n\nA week later . . .\n\n----------- ---------------\n\n\"Are you sure you're going to be okay? You have the number of where we'll be and --\"\n\nArthur and Kira were both grinning from ear to ear as Shamira acted like a nervous parent. The two Renfields had once again agreed to babysit the young dragons, along with Katar and his flock, while Lord Stapleton's house had a special dinner to celebrate their recent success in finally quelling the rebellion from Southern Georgia. The Tribunal, as told by the three present members, had expressed the whole body's approval to Shane and his people. \n\nThe dinner would be held nearby in case Shamira needed to get back quickly, but Archimedes thought things would be able to be kept in control. The spell-casters had come up with talismans that would temporarily allow the dragons' caretakers to communicate telepathically with the young reptiles, and there was a huge number of guards to make sure they stayed safe. \n\n\"Yes, you put it on the refrigerator next to the pizza money,\" Kira said with a straight face.\n\nTheir vampire mistress looked confused, the scrunched up her face in faux annoyance, then she smiled. \"I'm being overbearing, am I?\" Despite not wanting to be a mother, she still felt responsible for the two young dragons. She had spent most of the night playing with them, hunting with them, and generally getting them tired out so that they would sleep well. She had managed just enough free time to get a quickie in with both of her human donors and letting them have a taste of the blood that has so greatly improved their lives and fought back the disease they carried.\n\n\"It's all right,\" Arthur replied. \"Honestly, I don't think you know what to do with yourself now that no one is trying to kill you.\"\n\n\"That we know of,\" Shamira muttered, adjusting the bra-line on her evening dress again. Somehow, Clara had managed to find one for her that could only barely be considered street legal due to the cleavage shown. It was one of those dresses that showed off a woman's shoulders to perfection, which is just what her girlfriend had been going for. There was no bra, and her underwear certainly fell under the decorative-rather-than-functional category. \n\nAt least she had been spared high heels by managing to convince Clara that they were simply a chauvinistic tool of torture designed by men for women. Of course the same could be said for lingerie, in her opinion, but most lingerie did not threaten to make her trip, thereby making a fool of herself in public. There were some forms of punishment that really did not turn her on that much, hence, the stylish black flats.\n\n\"Hmm, lookin' good, sexy lady,\" Renata purred, dressed in her own come-hither evening wear.\n\n\"You too. I've never seen a girl who could make a brown dress look that good,\" Shamira said. Of course, the fact that it was hugging Renata's rocking body like a second skin made the color pretty much obsolete. \"Where's Clara?\"\n\nSebastian walked over, looking dynamite in a tuxedo. \"We decided the two of you needed to go in separate limos, otherwise neither of you would show up without smearing your lipstick.\"\n\nShamira rolled her eyes. \"We CAN control ourselves,\" she said.\n\n\"Yeah, but you don't. Don't get me wrong, I think it's charming. And kind of hot to watch.\"\n\n\"You got that right,\" Renata said. \"It's gonna suck when you two are halfway across the state,\" she pouted, giving Shamira a hug. \"You guys goin' with her?\" she asked of Kira and Arthur.\n\n\"Hell yeah,\" Arthur responded. \"A friend of mine is going to run the store up here and Shane's promised to help me set up another one in Savannah. And Kira's job can be done from anywhere.\" He looked at Shamira. \"We don't want to give up the best thing that's ever happened to us.\"\n\nShamira felt an internal flush of pride. \"I would have missed you guys too. By the way, I think I'm going to pick up more donors when I get there. This whole being-a-dragon thing tends to require more energy than just being a vampire.\"\n\n\"We figured. When we put ourselves on the list to be donors, we always knew that it wasn't supposed to be an exclusive relationship,\" Kira said.\n\n\"Yeah, but I want to put you two in charge of finding them. I've got a lot on my plate, and I trust your judgment.\"\n\nKira flushed with pride of her own. \"You got it. We won't disappoint you.\"\n\n\"I doubt you could if you tried.\" Shamira turned back to Renata. \"I guess we'd better get going. Thanks a lot.\"\n\n\"Okay. Have a great time at the party.\"\n\nThe members of the House of Stapleton made their way out to one of the limos. Shamira saw Clara standing up in another vehicle, half of her appearing out of the moon roof. They smiled at each other until Shamira was shooed into the waiting transport. Shane had rented a lodge for a couple of nights, and the only non-House members that would be in attendance were the members of the Tribunal. Even their guards would remain outside. \n\nThey pulled up next to a number of other limos and fancy cars. Shane was sparing no expense on the evening's festivities. Shamira was flanked as she walked inside, where a large well-lit room was waiting for her. It was like she had walked into a medieval hall, complete with heavy wooden tables and benches, and a large free-standing fire-pit in the center of the room. A raised area at the other end of the room sat five chairs. Shane was in one with Banshee at his side. Next to them were the Representative, the Alpha, and the Shepherd. Archimedes had decided to stay and look after the dragons. \n\n\"Welcome one and all,\" Shane said when the doors closed behind the last entrant. \"It seems so rare, after recent events, that we are able to come together and be a family. So since our family will be expanding and rearranging, I thought we might meet here tonight to not only celebrate recent victories but also to enjoy each others' company as we have not been able to do for some time.\"\n\nShamira's eyes met Clara's at that point, and there was a wicked twinkle to be seen there. 'What's she thinking now?' she thought.\n\nShane indicated that he wanted Banshee to rise. \"As you are all aware, Banshee will be taking over control of the Savannah territory with the assistance of some members of this house. This move has been blessed by the Tribunal and while it brings me great pride, it also saddens me. I will miss the constant presence, edge, and wisdom of my eldest child. Note that I intend to keep in regular contact with her, and I would encourage the rest of my house to do the same.\" He smiled proudly at the assassin, who looked stern but competent. \"Now before I say more, the Representative will speak on Tribunal matters.\"\n\nThe Representative stood, ever the model of elegance. Of all those in the room, only Shane and Shamira had seen the side of her that was less poised . . . more depraved and common. \"Thank you Lord Stapleton. It is the decision of the Tribunal, now that the threat of Lacroix and Jonas has been eliminated, that we shall move ahead with the process of outing ourselves to the world at large.\"\n\n\"Your own housemate, Pierre, has told us of, and investigated, a small group inside the FBI and is associated with the Behavioral Sciences unit that is composed of agents that might be more willing to believe the fantastical world that they will be exposed to. A plan is already being put together to initiate first contact, and it is all because of the work that you have done and the example that you have set.\" \n\n\"We thank Lord Stapleton for assembling such a talented group to pull this off, and we thank all of you for all that you have done.\" She looked at Shamira. \"And we would most like to thank Lady Shamira, for her courage, her wisdom, and her selflessness. She had helped bring peace to the region and wonder back to our lives, even those of us who thought we were beyond being surprised.\" She gave a slight smile.\n\nShamira really wondered what was going on. Was there something on the agenda she did not know about?\n\nShane was about to make that perfectly clear. \"And that brings us back to Shamira. Less than four months ago, she was a human police officer who had no idea that we creatures of magic and darkness even existed. The first time I met her, she put her life on the line for me, and I knew that the world would miss such a magnificent individual should her first death be her only death.\" \n\n\"Since then, she has become the most powerful fledgling vampire in our history, saved many number of lives, survived unspeakable cruelty with tremendous courage, turned into a dragon,\" he continued, letting a full warm smile break out, \"and has been quite possibly the biggest pain in the ass of any employee that I have ever had.\"\n\nThe crowd snickered and Shamira covered her face. She hadn't been THAT bad.\n\n\"In a world of tradition, she arrived like a hurricane. In a culture of secrecy, she tread loudly.\" His words seemed critical, but his voice was still fond. \"And in the middle of it all, she taught us all a little something about bravery and honor. She also taught us, a household based on pleasures of the flesh, a few things on satisfying those carnal urges.\"\n\nShamira's eyes were growing wider. The look on Shane's face was positively hungry now. She knew what he was going to do, namely mark fantasy number one off the list.\n\n\"It is my belief that her recent rise to power may have gone to her head. Tonight, we shall remind her of who she really is and where she belongs. Bring the serving tray.\" Some of the other subs wheeled out a rolling platform, complete with a four-foot-by-four-foot hardwood deck and a set of five-foot metal bars sticking up from mid-way along the sides. The two vertical bars were connected at the top by another bar, effecting forming an upside-down \"U\". \n\nShane came down of the dais with Banshee and Renata at his sides. \"Tonight, you will do what you should have been doing all along . . . serving.\" He nodded to his compatriots, who stepped forward and grabbed Shamira, hauling her \"struggling\" body to the platform and then shoving her down to her knees. There were holes in the platform at set intervals, and rope was run through these wholes and around Shamira's legs, tying her securely around the knees and again at the ankles. Her wrists were raised above her head and tied to the metal bars on either side of her, and a chain was run from her caller to the bar over her head. \n\n\"You will serve anyone and everyone who wants you,\" Shane continued smoothly, \"and in whatever way they desire. Tonight, even your fellow submissives are above you.\"\n\nShamira strained against the chains, careful not to break them but enough to show off the muscles in her arms and shoulders. She knew Shane liked watching her like this, the struggling captive. He was giving her to everyone in the household, numbering more than twenty. What about guests? Would the Alpha, the Shepherd, and the Representative be allowed to have a turn at her? That deep, dark, decadent part of her hoped so.\n\n\"Place her at the foot of the dais,\" Shane instructed, \"facing away from us.\" The platform was moved, and Shamira found herself looking out upon the room, filled with hungry gazes and dishonorable intentions. This was not punishment for her, nor true humiliation. It was her fantasy, to be taken in a restaurant in such finery by anyone with an interest to do so, and Shane was making it a reality for her. This was not A reward, but rather THE reward. \n\n\"I have not seen a table-setting quite so fetching before,\" the Shepherd said, his voice betraying a bit of his interest. \n\n\"She smells like she is in heat,\" the Alpha added. \n\n\"She always does,\" Shane agreed. \n\nThe feast began, and Shamira was left waiting. She saw people looking at her, all of them awaiting some sign from the lord for the games to begin. Then, Shane himself finished his meal.\n\n\"I find myself now in need of relief,\" he said, striding down the stairs and approaching Shamira from the front. He unzipped himself. He was semi-rigid, having been in anticipation of this all evening. \"Now let this little slut earn her keep.\" He grabbed Shamira's head and shoved it towards his cock, enjoying the sensation of her warm mouth as it entrapped his member. She went after it hungrily, almost desperately. She had him at full staff already, so he pulled out and slapped her in the face with his cock. \"Don't get greedy, slut.\" \n\nHe stepped back and slapped her breasts through the thin fabric of her dress several times, then shoved his dick back into her mouth. In the brief moment of his absence, Shamira could see that her friends and housemates were staring at her, some with glee while others looked on with jealousy. The other submissives were wishing it was them in Shamira's place, and she hoped they took it out on her. \n\nShe was glad that she and Shane had arrived at a truce, because he really was a spectacular male specimen, and he had a knack for just taking charge of her mouth and using it like a sex toy. He had glimpsed into her mind and saw her desires, and he had spared no expense in making them come true. His heat filled her throat and his balls were slapping against her chin as he shoved his way past what had once been a gag reflex, hammering her throat with abandon. ",
        "\"She seems quite . . . enthusiastic,\" the Shepherd said from behind her. \"But can she multi-task?\"\n\n\"She can do many things at once,\" Shane assured his guest.\n\nShamira just knew that she that her dress was being lifted up, exposing her minuscule panties. Those were ripped off with ease, and then her sex was penetrated from behind. The Shepherd had to be kneeling as he took her, but he did not seem to mind. She had cock in her mouth and pussy, and that made her happy. The Shepherd felt long but slim, making it easy for him to slide in and out of her with rapidity.\n\n\"Prepare to accept a symbol of my power over you,\" Shane said, withdrawing his member from Shamira's mouth. He pointed the head at her face and ejaculated, coating her face with streams of his seed. It dripped from her nose and mouth and cheek, which he seemed to please him. He zipped up and stepped away, allowing everyone in the room to see her face. \n\nShane leaned over and whispered into her ear. \"Whore.\"\n\n\"Yessssss,\" Shamira hissed as the Shepherd continued to enjoy his vaginal plundering. She watched Shane step away, then came face to crotch with the Alpha. His manhood strained against his tights, and . . . 'Wow!' she thought. 'That thing is huge!' And when he whipped it out. It had to be ten inches long at least, as well as being thick with a beautiful head. \"You are Alpha,\" she muttered, then lowered her eyes. She was not supposed to address her dominant. Of course, the Alpha was not a dominant in the sense she was used to.\n\n\"Damn straight,\" he said, pushing his way into her mouth. \"I enjoy your style of hospitality, Lord Stapleton. Most lords just offer me something to drink.\"\n\n\"Most lords do not have as fine of fare as I do,\" Shane replied with a smile. He was very proud of his group of sexual deviants. \n\n\"I'll say. If you hadn't made this one a vampire, I'd certainly like to see her as a werewolf.\"\n\n\"She does seem content on all fours.\"\n\n\"My kinda girl,\" the Alpha replied. \n\nShamira's mouth was being stretched to the limit, and she felt a small flush of pride as the Alpha expressed his interest in her. 'What can I say?' she thought. 'A girl wants to be wanted.' The idea of getting access to this kind of manhood on a regular basis had a certain amount of appeal. She wondered if Clara might consider getting a strap-on of similar size. \n\nThe Shepherd had been enjoying himself for several minutes more before cumming inside of her. He gripped her ass cheeks hard as he unloaded a surprisingly large amount of seed. He rested inside of her for a minute longer before withdrawing, leaving a void that Shamira hoped would soon be filled.\n\n\"Excellent,\" the Alpha said, pulling out of her greedy mouth and taking position behind her. \"This is how animals are supposed to do it,\" he added, plunging his sword all the way into her sheath in one movement, driving everything from her body except the gratitude of being completely filled by him. \n\n\"My god,\" Sebastian spoke from the audience, his voice carrying feigned shock, \"she really has no dignity at all, does she?\" \n\n\"I don't pay her for her 'dignity,' now do I?\" Shane replied.\n\nShamira could barely keep track of any conversation, her body given to the powerful man who was drilling her from behind. He was relentless, bordering on brutal, stretching her opening to its limit. She wanted to cum, but she held back, wanting him to satisfy himself first.\n\n\"Representative, you gonna have a go with her?\" the Alpha asked as he hammered Shamira.\n\n\"Undress in front of the masses?\" she asked pointedly. \"I'm not a savage,\" she added, her voice lightly mocking. \"Turn her around, however. There is something she could do for me while serving your purpose.\" As Shamira's platform was quickly spun around while the Representative slipped her dainty foot out of her shoe, presenting it for Shamira to worship. \n\nAs the Alpha started using her sex for his pleasure again, Shamira started to lick and kiss those feet and sucking on those toes. Shamira had never really saw feet or toes as sexy before, but damn if they weren't turning her on at the moment. And the Representative was not exactly complaining.\n\n'Thousand year-old vampire has a foot fetish,' she thought. 'Who would've thunk?' \n\n\"Might wanna take them lovelies out of her mouth for a sec,\" the Alpha said.\n\nThe old vampire shot him a glare, letting Shamira finish cleaning her right big toe before pulling her foot away. Then Shamira realized that the Alpha was just preventing those toes from being bitten off when he pulled out of Shamira's pussy and drove that telephone-pole of a cock slowly into Shamira's ass. \n\n\"Sweet Mother of the Moon,\" the Alpha growled. \"This thing is so tight, I'm surprise you get any work done, Stapleton.\"\n\n\"Oh, she's plenty of work by herself, I assure you,\" he said a bit dryly. Shamira would have rolled her eyes at him if they were not about to pop out of her head. The Alpha was taking his sweet time as he navigated her asshole like a semi-trailer winding its way down a farm road. It could be done, but it was going to take a while. And she was enjoying the ride more than she would have thought possible. \n\nThe first time she had been taken anally, it had just hurt, but now she understood the pain . . . even relished it. She looked forward to the moment when her sphincter ring relaxed a bit and the sharp pain turned into an ache that she could really get into. She wanted more, generally preferring anal penetration when she was being violated in her other orifices as well. When it was safe, at least she got to suck on the Representative's toes again.\n\n'I can't believe I'm thankful to have toes to suck on,' Shamira thought, until the pressure in her asshole made further thought impossible.\n\n\"What do you say to these nice people?\" Shane asked her.\n\n\"Thank you,\" she said after the Representative pulled her toes out of Shamira's mouth, her voice gaspy.\n\n\"Louder,\" Shane told her, \"and be more specific.\"\n\n\"Thank you,\" she said so that everyone could hear her, \"for fucking my ass and making me a whore.\"\n\n\"Oh, I think you were a whore before I ever showed up,\" the Alpha said. Shamira took it as a compliment. His cock plunged deep into her and then he stopped, and she could feel him explode, his seed streaming into her ass and making her feel warm. But then he withdrew, leaving her with a hollowness that she wanted filled. Hot semen leaked out of her and into the crack of her ass, and all she could think was that she wanted more.\n\nOnce the Alpha was drawn, the true games began. One table at a time got up and brought her over, each person taking whatever pleasure they wanted with her. Her dress had been torn to shreds as each abused her in some way. She noticed that the doms all were taking their turns first, and they were rougher with Shamira than their guests had been. \n\nRenata helped Reaper out by grabbing Shamira's head and shoving it onto his cock until he came all over her face, then Renata forced the captive to lick the werejaguar's pussy. Bangaly got similar help from his lionesses. Sebastian and Henry tag-teamed her with some double penetration, then Yosyp stepped in to make it an all-holes-filled trifecta. While those three fucked her every which way but loose, Bjorne and Monique were actually biting her on the shoulders, arms, and breasts. Hard enough to hurt . . . hard enough to please. \n\nAll three men deposited their loads onto Shamira's face, giving her a glazed look. That was when Clara came in for a bit.\n\n\"You are looking a bit worse for wear,\" she said disapprovingly. She held up a garden hose complete with a variable-setting spray head. She started washing the cum from Shamira's body, then turned the hose onto \"stream\" and sending a concentrated stream of water directly onto her crotch.\n\nShamira gasped out of instinct. It was like using the shower sprayer back home, but a hell of a lot more intense. She tried to ask permission to cum, but she got sprayed in the face whenever she opened her mouth. She experienced an insane climax and was unable to anything but gurgle. \n\n\"She came without permission, didn't she?\" Shane asked. He watched his shaman nod, then made a \"tsking\" sound. \n\n\"She is my responsibility for the time being,\" Banshee said. \"If it pleases you, I shall punish her.\" When Shane nodded, she pulled several coils of colored rope from underneath her chair.\n\nShamira's soul was smiling. This was SO staged, but she did not care. Banshee was a master (or mistress, if you will) of Kinbaku, a very beautiful, artistic form of Japanese bondage. Dessert was brought out as Banshee painstakingly removed Shamira's current bonds only to replace them with a web of brightly colored rope. By the time the Japanese woman was done, it looked as if Shamira, on her knees, had tried to push her way through a spider's web. \n\nBoth her breasts were lightly bound as well, though a good portion of skin was still available, as was every point of entry. And the ropes were applying pressure on some very sensitive parts of her body, specifically the outer rim of her mound. When Banshee pushed her fingers between Shamira's folds, that mound was pressed tighter against the ropes. \n\nThis was the first time that Shamira had been able to enjoy Banshee's particular brand of domination, as the former Yakuza member tended to be more elaborate and time-consuming in her preparations than other dominants. She kind of liked it. Her bindings seemed both more strict than metal cuffs and chains, but was also more comforting and comfortable. \n\n\"She's ready,\" Banshee said proudly. She gripped Shamira's nipples and pinched them hard while Shamira bit her bottom lip. Banshee stepped backward but did not release her hold, stretching those nubs out until they were finally released to an audible sigh. Then the woman began to disrobe, leaving her herself in a leather corset, matching thigh-high boots and . . . well, that was pretty much it. \n\nWith great dexterity and agility, Banshee threaded one foot through the rope web and over one of Shamira's powerful shoulders, then using the metal bar over her captive's head for balance, threaded the other foot through as well. The result was that she was straddling Shamira's shoulders, using the metal bar to keep her balance, and offering her sex to her captive's hungry, willing mouth.\n\n\"Oh Clara, I believe you have taught this one some useful skills,\" Banshee murmured as Shamira's tongue parted her captor's labia and teased its way to the core. \n\n\"Birds fly, fish swim, and sluts do oral,\" Clara said. \"She was a quick study.\" She sat on the platform in front of Shamira, getting a world class view of Banshee's ass as she rode their captive's face. \"You know, you have a really nice butt,\" she told Banshee. Meanwhile, her fingers were caressing Shamira's slot, teasing her to excitement again.\n\n\"Thank you,\" Banshee said, pushing her mound against Shamira's face. She was happy that this particular sub would be joining her in Savannah for a time. They had a great deal of pleasure to catch up on, assuming she could pry the woman away from Clara for any amount of time. \n\nClara grinned as she pushed four fingers up into her girlfriend's box, making a small twisting motion. \"So whore,\" she whispered, \"if you can hear me when you have Banshee's thighs acting as earmuffs, then you might want to listen. I'm going to split you in two, the way only I can. Do you understand me?\"\n\nShamira could barely hear anything, but she knew exactly what Clara was planning on doing to her. The idea excited her more than it should, so she intensified her efforts. Banshee's clit was actually kind of cute, peeking out shyly from its hood whenever her tongue swept over it. \n\nAll the while, the pathway to her sex was being penetrated and pushed farther and farther open. The thing about a vampire's body was that it always returned to the state it was in when he or she died. When Shamira died, she had been in fantastic shape. And she had been very, very tight. \n\nShamira felt an almost compulsive need to make Banshee climax before Clara accomplished what she had set out to do, mostly because Shamira knew that any basic motor skill would be lost to her. She went after Banshee's clit relentlessly until --\n\n\"Here it comes,\" Shane said, putting his fingers in his ears.\n\n\"What?\" the Alpha asked as he leaned over. He was wondering if Shane might \"lend\" him Shamira at some point. Just to study her shifting ability of course. \n\n\"You ever wonder why I gave the name Banshee to someone who is usually really quiet?\"\n\nThe Alpha looked confused, then noticed that the Representative had actually covered her ears. The old vampire tended to know what she was doing, so he protected his own eardrums just in time. \n\nThere were two things that got Banshee's blood going . . . the hunt and the climax. The former she did in profound silence, the latter she did with a scream that did her namesake proud. Her wail of release deafened those nearby and filled the hall with its might. \n\n\"Good . . . grief!\" someone muttered, breaking the stillness that had followed Banshee's expression of pleasure.\n\n\"I always said you were too noisy,\" Clara added with a smirk. She had not been able to cover both ears like her compatriots due to one hand mauling Shamira's sex, but she figured her hearing would recover. She rarely had an opportunity to tease Banshee about anything.\n\n\"You . . . uhm . . . you did a good job with her. Did I say that already?\" Banshee replied, her voice tinged with the happy glow of satisfaction. She slowly extricated herself from around Shamira's face.\n\n\"I believe you did.\" Clara took advantage of the distraction by pushing her hand all the way up into Shamira's sex. \"Good thing too, because she's going to be pretty useless for the time being.\"\n\nShamira's brain had fire alarms and bells and whistles and all other manner of noises going off in it. That incredible yet brief pain, followed by a tremendous sense of fulfillment, was something she had only ever experienced once before, and only Clara had done it to her. It was as if the Native American had claimed Shamira that night in a manner that would make all other sensations pale next to it. \n\nAnd, despite having had sex with a giant metaphysical anime octopus and having been gangbanged by strangers or any number of other things, Clara had done just what she had intended. Shamira's collar belonged to Shane, her body might be passed around like a cold, but the deepest and most intimate parts of her belonged to Clara.\n\nClara's fest began its prodding explorations, touching what it could, caressing all it could come in contact with. Her wrist was trapped by both Shamira's powerful vaginal muscles as well as the odd angle she was holding it, but she would be able to do just enough. \n\nShamira's mouth gaped and her eyes rolled back in her head as the first of many climaxes tore through her body. With the fingers moving inside of her, Clara was going to play Shamira like a piano, creating a symphony of pleasure leading to a crescendo of --\n\n\"Oh!\" Shamira gulped. \"Mistress Clara, permission to --\"\n\n\"Oh just shut up and cum already,' Clara growled playfully as Shamira's body shook like a possessed soul being exorcised. Clara would know too. She had seen it happen.\n\nShamira had no control over her body for several minutes. Pulse after pulse of erotic bliss raged through her blood and muscles and brain. She heard the metal bar which she was tied to start to creak and bend, and several of the ropes holding her snapped. Later she would find out that several members of the audience had reached new levels of arousal just by watching her muscular body strain against her bindings. It would be a pleasant thought.\n\nClara was pretty sure that her lover had inadvertently broken Clara's wrist. At the very least, it hurt like hell. But the look of exquisite joy on her girlfriend's face made it all worth it. She wanted badly to drop her dominant act and just kiss this girl, but she would play by their rules for now. 'I'll get her alone later,' Clara promised herself as she extricated her hand.\n\nAs before, Shamira felt an emptiness that was more than physical after Clara pulled her hand away, but she was content. Her life before all of this had been simple, but it has also been empty. Here, she was the decadent, sexual, uninhibited person she had always wished she could be, surrounded by people who would go to war with her and for her, and loved . . . so genuinely loved in so many ways. \n\nEven as Shane unleashed the other submissives on her, ordered to enjoy her flesh, she saw beyond the \"show\" and the pageantry of it all. Her eyes met Clara's as the other woman moved away while still staying close, watching hungrily as more bodies moved in close. She loved the beautiful shaman and felt loved in return. More importantly, she truly believed in that affection, something she had never done before. \n\nThe other subs surrounded her like a wave of flesh, poking her and penetrating her in every way. They did not take turns, but rather acted as a single entity. It reminded her somewhat of her encounter with the Conduit in the faerie ritual, being a creature of undulating appendages seemingly designed to pleasure her in every way. \n\nSexual parts presented themselves to her face while fingers or cocks penetrated her lower openings. Teeth nipped at her abused flesh and fingernails dug into the flesh of her buttocks and breasts. All were careful to avoid damaging her back, knowing she was still sensitive in the area near the base of her spine. Each of them used her in some way until they had achieved release, but did not stop until she had climaxed many more times as well.\n\n\"Let this be an example to those who might follow in Shamira's lead,\" Shane said, trying to sound menacing while practically beaming with pride. \"Do as she did, and the same treatment will await you,\" he added, looking at all the submissives still gathered around Shamira's mostly-bound and wholly-satisfied form. For them, that was a serious promise that they hoped that they could one day \"deserve.\" \"Clara, please take that creature somewhere and get her cleaned up.\"\n\nClara grinned, then started pushing Shamira's cart back to the double doors leading to the kitchen. When they were finally alone, Clara looked into her girlfriend's glazed, happy eyes, and then she finally got the kiss she had been waiting for.\n\n------------- ---------------------\n\nEight months later . . .\n\n------------- ---------------------\n\n\"Aodh, could you please help Kira and Arthur get the kids settled down? Company will be here soon,\" Shamira half-shouted, half-sighed. Being a mother to a nest of little dragons was exhausting. Since defeating Jonas, four more eggs had hatched, giving her another Sea Serpent (this one a female), a female Horned Dragon from the Far East, a male Stone Dragon from the Rocky Mountains of the United States, and a male Quetzalcoatl from Central America. \n\nLuckily for Shamira, baby dragons mature quickly given the right guidance. Aodh was already able to understand human language and was the emotional and intellectual equivalent of a teenage human. That was not always a good thing, but most of the time it was a blessing. Aodh, being the \"big brother\" of the group, helped direct his younger siblings as much as he could. He understood what had happened to his race, but seemed more inclined to be like his adopted mother (who he worshipped) than to start dragging up old feuds. \n\nSo he, Kira, Arthur, and Archimedes were wrangling up the youngsters who were rambling all over their large enclosure. Banshee's new estate on the shore of the Atlantic just north of Savannah had been built for its remoteness, access to the ocean (for the Sea Serpents), and for the security it offered its reptilian inhabitants. They were more worried about detection than any magical threat. ",
        "Banshee had already put the fear of God into the troublemakers of the area. She was a very hands-on sheriff who had already developed a reputation as a bad-ass before taking charge of the political reins as well. The lawlessness suffered under Lacroix's rule would no longer be tolerated. \n\nBanshee had found several magical beings to act as her enforcers, adding to the group that Shane had lent her. Staying true to Shane's guidance, she was going to build a diverse group rather than favoring her own race, and it was proving to be a wise track. Not only did she have vampires and weres, but she had, with Shamira acting as her representative, convinced the entire local faerie colony to take up residence on her estate. In exchange for physical muscle if needed to protect the colony, the faeries provided a powerful magical security to the land itself. \n\nBanshee had also enlisted a brother/sister pair of elvish assassins. The elves were still wanting to get back into Shamira's good graces, despite her assurances that she did not blame the entire race for the actions of one rogue member. But apparently, everyone wanted to make damn sure that the last Moon Dragon was not pissed off at them. \n\nFor her part, Shamira was looking forward to the day that she could be a full time enforcer again and stop playing Tyrannosaurus Nanny, though the role did have some rewards. The first time Aodh had shown understanding of what had happened to his race and vowed not to let it happen again . . . that had filled her with hope and pride. And the first time that J\u00f6rmungandr swam in the ocean, his mind transmitting unparalleled glee, had also made her heart sing. \n\nLuckily, the merfolk of the Atlantic were more than happy to assist in acclimating the great beast, already thirty feet long) into how to navigate and survive in the great expanse of the oceans. As a result, Shane and Banshee had both forged an alliance with the merfolk, a previously unprecedented event. \n\nKatar and the other Lesser Dragons were also living on the estate, though Katar would soon be leaving. The Tribunal had been impressed that a once subservient race would aid in the resurrection of those who had once treated them so badly. But Katar and his folk saw the Greater Dragons as a part of themselves that had been missing for too long. In exchange for their help, the Lesser Dragons had been granted a membership in the Tribunal, and Katar would be its first ambassador. \n\nShamira shook her head as she watched Aodh telepathically attempt to reason with the Quetzalcoatl and coax it out from under the pile of hay bails that it had used to create a cave. The feathered serpent had been harassed by a Sea Serpent, who had already been sent to the swimming pool for a \"time out,\" but the Quetzalcoatl refused to budge from his hiding place. \n\n\"Now I know how my sister must have felt,\" Shamira muttered.\n\n\"Speaking of which, she called a few minutes ago,\" Clara said. She was sitting on the edge of the pool, letting the Sea Serpents swim by and tickle her toes. \"She told me to tell you hi, and not to freak out but that she was going out with Clyde tonight and was . . . and these her words, not mine . . . hoping to get lucky.\"\n\nShamira clamped one hand over her grimacing face. Samantha had started dating the werewolf lord of Huntsville, AL, shortly after her divorce was finalized from that cheating asshole Patrick. Shamira's sister had taken a great interest in the magical community after finding out that Shamira was a vampire dragon thingie, but her interest in Clyde was still a little disturbing. Okay, maybe he was handsome and charming and much more loyal than Patrick, but . . . but Shamira just could not fathom that her sister was dating a werewolf.\n\n\"She's a grown woman,\" Clara said, reading her lover's thoughts, \"and she's probably safer now than she's ever been. No one, human or magical, is going to hurt her without going through a very powerful local lord and his entire pack.\" Clara pulled her feet out of the water and strode over to her girlfriend. The two of them were still sharing a room and, more importantly, a bed, and both of them were quite happy with each other. \n\nShamira finally smiled. \"I know. It's just that so much has changed. It's barely been a little more than a year, but I still remember being alive. I remember being a cop and complaining to her on the phone about how dull my life was. Now she's humping a lycanthrope, I'm an undead part-time dragon who sleeps with a beautiful undead woman who also ties her up sometimes --\"\n\n\"And these are all good things,\" Clara interrupted, wrapping her arms around Shamira's neck and holding her close. \"Especially that last part.\"\n\nAbout that time, a limousine flanked by black SUVs pulled into the shelter, and Shamira said, \"And now it's show time.\"\n\nShane got out of the limo, leading several blindfolded and shackled humans from the depths of the vehicle.\n\n\"You are in more trouble than you can guess,\" one of the captives said. \"Do you have any idea what kind of trouble you're in? Kidnapping federal agents --\"\n\n\"And as I tried to tell you,\" Shane interrupted, \"that these are merely temporary inconveniences. In a few moments, all will be explained to you. I promise you that no harm will come to you, and that you will all be released if you wish to go.\"\n\n\"Why the hell wouldn't we --\" a woman started to say, then she gasped as her blindfold was removed. All the humans were relieved of their blindfolds and bonds, though they were surrounded by Shane's and Banshee's guards. The Tribunal members had chosen not to attend this meeting, mostly as a precaution in case things did not go well.\n\n\"You're Shane Stapleton,\" one of the men said, looking amazed. \"You're one of the richest men in the country, so why would --\"\n\n\"Why would I be kidnapping FBI agents and bringing them to a secret location and then promising to free them?\" Shane looked at each one of them. \"You were chosen to be here because you, more than anyone else in the United States government, are inclined to believe the impossible. You were chosen because you have always been assigned the jobs that no one else could understand or would even WANT to understand. You are the kind of people who look into the dark places and wonder not only who might be hiding there, but also what might be hiding there.\"\n\n\"Are you going tell us that you're aliens?\" one of them scoffed. \"That's a little too X-files for my taste.\"\n\n\"Aliens? Don't be absurd,\" Shane replied with a smile. \"Of course I'm not an alien. I'm a vampire.\"\n\nThe humans looked shocked, amused, or befuddled. Sometimes all three.\n\nThe woman spoke. \"A . . . vampire. Seriously, is this some kind of --\" The woman stopped and shrieked as Shane opened his mouth and caused his fangs to grow right before her eyes.\n\n\"Nice trick,\" the first man said again. \"But I'm sure --\"\n\n\"Before you say '-- that there's a logical explanation,' let me assure you that there are vampires in this world, and all other sorts of beings that you could scarcely imagine. Before you leave here, you will understand what truly lives on the other side of the shadows that most humans have feared, sometimes rightly so. We believe that it is time to come forward and be part of the great community of this planet, and you will be our liaisons back to your world. And before you attempt any further objects, I believe that I can show you all the proof you could ever need.\" He pointed at something behind the humans' backs.\n\nThe FBI members turned around to find that the guards had parted to reveal --\n\n\"Oh my God,\" one whispered, his eyes coming to rest on Aodh, who was curled in a semi-sphere around Clara and Shamira. \"What is that?\"\n\n\"That's my adopted son,\" Shamira replied, remembering the role that Shane had wanted her to play. She felt Clara pulling her robe away, leaving Shamira nude. \"And that's not the coolest part.\"\n\n\"It . . . isn't?\" the woman muttered, still staring at the Thorn Back dragon.\n\nShamira began to smoke and then shift, growing to massive size and taking a new form. It a few moments, she was no longer a muscular young vampire, but was instead Shadow Wing. Her wings of smoke and ash extended to block out the view of the ceiling, and her neck strained forward to the first man to have spoken. Her nose stopped just a few feet from his amazed face. Shamira was pleased to see more awe and wonder in his eyes than fear. He was a believer whose cynicism had just been short-circuited. \n\n\"You're the most beautiful thing I've ever seen,\" he said at last.\n\nFrom behind the dragon, Clara laughed. \"I keep telling her that, but she doesn't believe me.\"\n\nShamira, her thoughts smooth and warm, reached out to the man and his companions. * Once, I was like you. I found myself trying to understand the notion of a world that had been just beyond my own. But eventually, my eyes were opened to the reality of it. We are real. We are here. The only question now is, do you believe? *\n\nThe man reached his hand forward slowly, touched the smooth, cool scales of her snout. For a moment, everyone watched in silence. Finally, the man began to smile. \n\n\"I believe,\" he whispered. \"I believe.\"\n\n------- --------------------\n\nThe end . . ."
    ],
    "authorname": "Evil Alpaca",
    "tags": [
        "sci-fi",
        "vampires",
        "lesbian",
        "magic",
        "bdsm",
        "group",
        "anal"
    ],
    "category": "Sci-Fi & Fantasy",
    "url": "https://www.literotica.com/s/to-protect-and-serve-ch-12"
}
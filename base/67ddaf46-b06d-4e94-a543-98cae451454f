{
    "title": "Three Strikes Ch. 08",
    "pages": [
        "I want to thank Oldnakeddad for taking the time to edit this story. Any errors are likely the product of my need to tweak. \n\nAlso, I wanna shout out to the Finer Things Club: Mfa607, MrTimTam009, Soft Sighs, AC, Belligerent Bok Choy, Alice, Allen, AwayThrow, Candace, Erin, Laura, MFA607, MKFanatic, Vanessa, SoftSighs, Nina, John, and Nash. Y'all are the best supporters out there. \n\n***** \n\nI hadn't been asleep nearly long enough when my phone started to beep at me. It wasn't an alarm, only a reminder I'd set the previous week. I didn't want to forget\u2014not that forgetting was a possibility. \n\n8:30 a.m.: Go to the clinic and get tested, you barebacking moron! \n\nI hadn't quite slept off my smorgasbord of negative emotions that derived from last night's game, so waking up to that specific reminder was icing on the cake. Only the icing was fondant and everyone knew fondant was fucking terrible. \n\nI threw the covers off and wrapped myself in my fuzzy throw as I made my way to the kitchen to start Nespresso. Coffee had never held any magic powers in my life. I never needed coffee in the morning, I simply enjoyed the habit. \n\nSometimes it was tea, but it was usually coffee because I liked the buzz. Though coffee wasn't magic, it's never stopped me from hoping that the morning routine of sitting at my kitchen table with a hot beverage in my hand would somehow fix whatever was broken in my life. \n\nI didn't feel anything change after my first sip. It was expected, but disappointing nonetheless. I let my mind wander to other things. \n\nI needed to buy toilet paper before I became stranded, which would've been approximately in three bowel movements. Maybe more if I remembered to grab the partial roll from the guest bathroom. However, I would hate to leave a guest stranded and yelling for toilet paper that I probably didn't have (that'd be awkward!), so I simply needed to remember to buy more. \n\nI was also out of Windex and my catwalk vanity was smeared, thanks to the DONNAS' constant usage and lack of cleaning. Oh, and UPS was expected with some new skincare products I'd ordered the other night from LUSH. Skincare made me think of my upcoming date with Shane, which I wasn't sure was still on, which made me think of Shane and the way I stormed off like a child... \n\nMy endless thoughts were interrupted by a knock on the door. I smiled excitedly to myself because, new skincare! \n\nI was only wearing boxer briefs and they were pretty scandalous for straight boys, on top of that, my delivery guy was six months away from retirement. I was all about a sexy silver fox except that wasn't an accurate description of Earl (my UPS delivery man) so I re-wrapped myself in my oh-so-soft, fuzzy throw and hustled to the door. \n\n\"Hold on!\" I yelled. \n\nSkin care, skin care, skin care! My shower was gonna be a new level of epic. \n\nI have a good relationship with my delivery drivers because I like to keep them happy. A happy delivery driver means my boxes won't end up being kicked around before they end up in my care. Not wanting to keep the man waiting, I quickly opened the door. I took one look at the man standing outside and slammed the door shut as quickly as I'd opened it. He was most definitely not Earl. \n\nIt was Shane. Why was he at my house? How did he get my address? There were the more important things, too, such as the fact I hadn't showered and was only wearing undies and a blanket. Normally my bedhead is manageable because I don't shower before bed and it still looks halfway decent from the day before. \n\nNot now, oh no. I'd decided to shower before going straight to bed. Which meant it dried as I rolled around in my sleep. My hair looks exactly like you'd expect it to look\u2014not good. \n\nA knock on the door broke me from my internal panic. \n\n\"What do you want?\" I asked as I stared through the peephole. \n\nHe looked good standing there casually, with is hands in his pocket, smiling at the door. \n\n\"Well, I was hoping we could talk, you know, face to face.\" \n\n\"I'm not ready for visitors. Come back in...one hour.\" I could feel the ugliness of my hair as I ran my fingers through it. \n\n\"Or, I could come in now. I really don't care what you look like,\" I watched as he silently chuckled, shaking his head in amusement. \n\nThat's what they all say until they see the Bride of Frankenstein. The downfall of always looking on point is\u2014 people rarely see the hideous beast you are prior to the primping. If things worked out between Shane and I\u2014not that I was saying they would, but if they did\u2014it was still going to be a while before he'd see the true me. \n\n\"Well, I'm going to shower, first.\" \n\n\"Are you going to make me stand out here the whole time?\" \n\nI didn't know the etiquette for a situation like this. I definitely wasn't going to let him see me. But, it would've been rude to leave him outside. What about the fact he showed up unannounced? That was rude, too. I decided I'd let him in...after I left the room. \n\n\"Well,\" I hesitated, \"I suppose not.\" I thought about it for a second, then continued, \"Count to thirty, then come in and sit at the table. There's coffee or tea if you want, or nothing, I don't care. Just count to thirty before you do anything.\"  \n\n\"Okay. One, two, three-\" he started counting \n\nI took a deep breath and carefully unlocked the door. I was about to run to my room when Shane opened the door, almost instantly. \n\n\"Thirty!\" he yelled. \n\nI wasn't exactly counting along with or anything, but I was positive it wasn't anywhere close to the standard thirty Mississippi count. It was more along the lines of one-two-skip a few-twenty-nine, thirty. \n\n\"What the fuck?\" I shouted as I dashed from the foyer as quickly as possible. \n\nI pulled my throw up so it covered my hair and tightly cinched it under my chin so it was wrapped around my face. Just in case I didn't make a clean escape, I didn't want him to see anything incriminating. I turned the corner and was almost to the stairs, when I heard his steps behind me. He was actually chasing me like a child. \n\nI made it up two stairs when I felt his arm around my waist, halting me from going any further. \n\n\"Where are you going in such a rush?\" He asked, as if it wasn't obvious to the blind man at the street corner that I as running away from him. \n\nShane was smirking. I couldn't blame him, though. I probably looked like a goon with the blanket wrapped around my head like a nun. I'd definitely be smirking at me if I was him. \n\n\"I'm trying to take a shower. What are you doing?!\" I screeched as I tried to wiggle my way out of his grip. \n\nHe smiled and his eyes shone with amusement as he took in my 'situation'. The way he was looking at me both pissed me off and made me melt at the same time. \n\n\"Take the blanket off of your head,\" he smirked. \n\nThe fucking bitch was cray cray! There was no way he was going to see Donovan-all-natural. \n\n\"No way. Let go!\" \n\nI tried to pull away. I needed to retreat up the stairs, but he was strong and his grip was surprisingly firm, yet gentle. I pulled again and was met with the same resistance. I looked at him with my most threatening look, but the cocky rat bastard was still smiling. He thought this funny. At that moment, I decided I wasn't going to change his nickname, even if things worked out\u2014which I wasn't saying it would. Only if it did. \n\n\"Shane,\" I half warned, half pleaded. \n\nHe used the hand that wasn't pinning me down and tried to free the blanket from my head. I didn't want anyone to see me like this and I wasn't about to let that happen voluntarily. I gripped the blanket tighter under my chin and tried even harder to free myself from his grip. I panicked and started flailing my head around in hopes he wouldn't land a good grip. \n\nDuring all of the chaos of trying to escape, I slipped on the step and fell backward. The fall was slow, ridiculously so. And since Shane was holding onto my waist, he fell on top of me. \n\nFall might not be the right word. Like a leaf falling in the Autumn, his body gently pressed down on mine. I felt his warm hand grip my arm, immobilizing me, while his other hand successfully removed the blanket, unveiling the god awful unmanicured, morning Donovan. \n\n\"What the fuck, Shane,\" I breathed in a panicked voice as my chest raised and fell rapidly. No one sees me like this. Ever. \n\nI used my hands to cover my hair in an effort to minimize my embarrassment. It was all in vein, two seconds later Shane grabbed my wrists and pinned them to the stairs making my eyes widened in shock and humiliation. \n\nOne minute I'm safe in my home, running half naked toward my LUSH package. The next I'm being attacked and pinned to the wood staircase. \n\nI wiggled and tried to get up, but he had me completely pinned beneath his giant body. \n\n\"Please, let me go,\" I pleaded. \n\nMy words fell on deaf ears. He was too busy critiquing me. His eyes darted to my hair, my face, down to my chest (that was barely hidden by the blanket), back to my hair, before he repeated the variation a few more times. The playful smirk never left his face as his eyes tormented my body enough to make me squirm. I didn't know what he was looking for, but he wouldn't have to look that hard to see my utter humiliation and embarrassment. \n\n\"Please stop?\" I begged in a meeker tone. \n\n\"You look-\" \n\n\"Terrible, I know,\" I whined. \n\nI turned my head and closed my eyes. I couldn't stand watching him watch me anymore. Not knowing what the look in his eyes meant and waiting for a snarky comment to fall from his lips. \n\n\"Not at all. You're stunning. Sexy, even.\" \n\nI jumped when I felt him release me but I didn't have time consider my option before felt his soft, warm lips on mine. My mind was flooded with the memory of our night together and suddenly, I was hungry for more, so much more. Without thinking, I ran my fingers through his hair like snakes in grass and pulled him closer until there was no room left between us. I forgot that I looked like I dried mop and took what he gave me, right there on the stairs. There was a mixture of raw fire and smoldering passion and, if the hardness between us was any indication, neither of us seemed all that upset by it. \n\nHe tasted amazing and felt amazing. \n\nSomehow, through the intoxicating pleasure, rational thoughts bullied their way in. I hadn't brushed my teeth, I still looked like a whore after homecoming, and why the hell was I making out with Shane, again? Before we even had a first date. I pushed him back. \n\n\"What the hell are we doing?!\" I asked in a panic. \n\nI scurried out from under him and quickly tried to cover my hair, again. I couldn't believe Shane broke into my house, manhandled me the way he did, and saw me as I was\u2014not showered and unruly. How dare him! \n\n\"Have you ever dated someone before? Because you just skipped like, a hundred steps!\" I barked. \n\nI saw him smiled before I ran up the stairs and shut myself inside of my room before he had a chance to reply or defend himself. \n\nI walked across the room and I saw myself in the mirror. I looked terrifying. It wasn't just my Albert Einstein hair, oh no. Once I got a good look at myself, I realized the throw blanket wasn't long enough to cover my head while also covering anything below my waist, which meant Shane had a nice view of my barely clothed ass during my retreat. If I hadn't been embarrassed before, I was now. \n\nI took a quick shower and fast tracked everything else; including my post shower moisturizing and hair care regime. Leave it to Shane to ruin my daily routine. \n\nI got dressed and stood by the door for a moment before going downstairs. Everything had happened so fast. I didn't have time to process the fact Shane was at my house, or that I was kind of giddy that Shane was at my house. I was also embarrassed that Shane saw me the way he did. No one ever saw pre-prepared Donovan. \n\nShane was sitting at the kitchen table, drinking water, and staring out of the window when I finally made my way down. He looked up and smiled as he watched me move about the kitchen as I got myself a glass of water before sitting across the table from him. \n\nThere was a silent standoff as we stared at each other, each of us wearing our own little sly smile. His, probably because he saw me looking like trash. Me, because he's really hot. \n\n\"Why are you here and causing me trouble?\" I asked and his smiled gently, but seriously. \n\n\"Because, yesterday, you were upset about a lot of things, including me. I deserve it but I don't like it, so I'm here trying to make an effort to un-upset you.\" \n\nHe didn't look cocky, or shy, or smug, he just looked very\u2014matter of fact. We stared at each other for a moment. \n\n\"How'd you know where I live?\" \n\n\"All\u00e9 told me. I ran into him after you stormed off.\" \n\n\"Okay. So, what do you want?\" \n\nI was being stubborn and I knew it. I might have wanted him to grovel and beg a little more. I looked at him and, with a smidge of frustration in his brows, he narrowed his eyes at me. \n\n\"Don't be like that, Donovan. I told you why I'm here. If you're not interested then I'll leave, but don't be coy. I like you but I don't want to waste both of our time if you have no intention of it going anywhere.\" \n\nFuck if I didn't feel put into place by that comment. Coy is my jam. I loved the art of a good tease and being coy is a skill I excelled at. He hadn't even seen coy yet. \n\nI drummed my fingers on the table and leaned back. \n\n\"Well, firstly, if you have a problem with me being coy, then you should leave because that ship is permanently at sea,\" I shrugged. \n\nToo bad, so sad. \n\nHe smiled and chuckled at my honesty. \n\n\"Okay. You can be coy all you want, but not during serious conversations.\" \n\n\"Okay, fair enough,\" I smiled. \"What exactly do you want to talk about today? For the record, I wasn't exactly being coy with my last comment.\" \n\n\"Okay,\" he nodded in agreeance. \"So, I wanna know if you're going to be able to forgive me for the things I've said in the past. I can understand if that's hard, but if it's impossible then, obviously there's no point in moving forward. I was acting like a fifteen-year-old boy who couldn't flirt with the cute boy, so he called him names. I hope you know I didn't intend to be malicious. I feel really terrible about it and it felt shitty to have it thrown into my face last night. I'm not saying I didn't deserve it, but I also don't want it to be hurled at me every time you're upset.\" \n\n\"Are you saying you think there's going to be a lot of fights?\" I teased. He laughed in return. \n\n\"Oh, hell yes. I'm not good with words and I'm super rough around the edges. I don't know you well enough, yet, but I know I'm going to piss you off and you're going to frustrate the shit out me.\" \n\nI rolled my eyes. \n\n\"Stop the sales pitch and sign me up already. Damn Shane, you sure do have a way with words.\" \n\nShane smiled his rare, yet megawatt, smile. \n\n\"I told you I'm not good with words. So, are you going to be able to forgive me?\" \n\n\"Yeah, but I'll be honest, it won't be today or tomorrow. Once I can trust whatever you say has merit, then it'll be water under the bridge. Until then, I'll be holding you at arm's length.\" \n\nHe agreed and we talked more, mostly about the game; how the other team behaved, how I felt about it, and how Shane felt about it. As it turned out, it hit him harder than expected to see it so blatantly in front of him. \n\nEarl finally came and delivered my box. Shane was curious so I showed him everything I'd bought. He asked a million questions because he couldn't figure out why any dude would need 'all of that shit'. I decided I might look forward to pampering him one day. I'd show him how good it felt to treat yo' self to something with more substance than antibacterial bar soap. \n\n\"So, what are you doing, later? I was wondering if you, maybe, wanted to get lunch with me,\" Shane asked as I put all my LUSH products back into the box. \n\nHis question reminded me of the one thing I needed to get done that day. I contemplated telling him about it. I did have to do with him after all. On the other hand, was it going to be awkward to talk about? \n\nShane misinterpreted my silence. \n\n\"Oh. I didn't mean to intrude. We'll keep our plans for tomorrow, if you still want to.\" \n\nOh, my god, he was so cute when he'd get all shy and timid. I wanted to devour him. \n\n\"No, it's fine. It's just, well...\" \n\nI handed him my phone, which had a banner with my notification written across the screen. He looked at it, and started laughing. I couldn't believe his reaction. \n\n\"Seriously though. I need to go to the clinic and have my blood drawn really quick since I decided to go all YOLO and risked my life for...a piece of ass\" I said. I tried to hide the smirk that pulled the corner of my mouth, but I failed. \n\n\"Yeah, but it was a great piece of ass! Am I right?\" \n\n\"Shut the fuck up,\" I laughed at his overly cocky smile. \n\n\"Now who's the one who knows how to sweet talk?\" He cooed \n\nI rolled my eyes and took our water glasses to the sink. \n\n\"Well, I probably need to go to the clinic, also, since I was with a guy who went all YOLO and tossed the condom across the room. I think he was trying to get pregnant, but I can't be sure,\" he added. \n\nMy jaw dropped at his response. Fucking witty son-of-a-bitch. \n\n\"Oh, look who got the jokes!\" I teased back. \n\nHe smiled but it was mostly at himself because he was so proud. \n\n\"Sometimes, yeah. I don't know why but you're easy to joke with, it comes natural.\" \n\nI was seeing a side of Shane I knew I could really grow fond of and his words were more than just a superficial compliment, and my stomach fluttered in response. \n\n\"Well get up and let's go. It looks like our first date is going to be a trip to the clinic for an STD screening. How will you ever top this?\" \n\n\"I've already topped it, so that's old news,\" he said, popping the 'p's' and 'd' in topped. \n\nI was about to correct him and tell him I meant 'how will you ever top this romantic first date', but I realized he just pulled another quick one on me. I looked back and saw him barely holding himself together. He was so adorable when he thought he was being funny, I could've died right there. \n\n\"You're about to eat lunch alone, with your jokes.\" \n\n\"No, I'm not,\" he laughed. \n\n\"No, you're not,\" I agreed. \n\nI closed the door behind us and, as I locked it, I couldn't stop smiling. I didn't know what the day would bring, but I had a feeling it was going to be good. \n\n*** *** *** *** \n\nOur conversation was light and good on our way to the clinic\u2014perfect for the first stage of getting to know someone. It was going so well, yet, I had an overwhelming need to change the subject and talk about something that had been bothering me. If I had any tact or sense of preservation, I would've let the whole thing drop, but I didn't. \n\nI turned in my seat until I was facing him and let my eyes wander over him for a moment. He was the most put together I'd ever seen him. He was wearing a yellow, orange, white, and grey wool shirt with the sleeves rolled up, which revealed his strong forearms. Seemed a little warm for the summer weather but who was I to judge? On paper, the shirt sounded hideous, but damn if it didn't look delicious, especially paired with his auburn hair and worn denim jeans. I had a feeling he didn't buy his jeans worn like that. \n\n\"Since we're going to the clinic, I want to clarify a few things.\" ",
        "He glanced over and nodded for me to continue. \n\n\"Contrary to the evidence before you, I'm not a total slut. I don't hook up very often and before you, I've never in my life not used a condom. I don't know what the heck I was thinking, but that was not normal for me.\"  \n\nI noticed I was using my hands too much. A nervous habit that helps me help drive my point home. I quickly put them back on my lap. I didn't wanna seem desperate or like I might be trying too hard to convince him of my innocence. \n\n\"Anyway, I needed you to know...you know, that I'm not totally irresponsible, and yeah, it was stupid...\" \n\nI trailed off, not exactly sure what else to say because I'd basically made the point I'd set out to make. \n\n\"Yeah, me, too. Before you, I've never had sex without a condom, either. It was...different,\" Shane admitted. \n\nI skeptically looked at him. Different wasn't the word I would've used to describe how it felt about it. There were a lot of words that could've been used, but I don't know how I felt about different being one of them. I raised my brow. \n\n\"Different?\" \n\nHe lightly strummed his fingers on the steering wheel, nothing obsessive, but enough for me to take notice of his...nervousness? \n\n\"Well, yeah, different. Good different. Really good different.\" \n\nHe glanced at me to check my reaction in case he'd gone too far, which he hadn't. I smiled at his adorableness and decided to ease his worries. \n\n\"Yeah, really good.\" \n\n\"Yeah,\" he said, too casually. \n\nHe smiled and relaxed. He wasn't lying when he said it was really good, in fact, thinking about that night and how impossibly close we were had caused a slight situation in my pants, which I ignored. \n\nI wanted to make sure we were on the same page so I sternly pointed my finger at him. \n\n\"But it won't happen again.\" \n\n\"Of course not. It was stupid,\" he responded immediately, but without much conviction and maybe even a little disappointment, although I doubt he'd ever admit it. \n\n\"So stupid,\" I reiterated, to myself. \n\nThe more I'd thought about how amazing the sex was, the weaker my conviction became. Maybe my conviction was directly related to my dick; the stronger one became, the weaker the other one became. That was definitely the contributing factor I told myself. It would also explain the reason I went YOLO in the first place. \n\nThere was an awkward presence in the air, directly caused by the fact both of us were sporting partials. I'm sure we were both disappointed that sex, without a condom, was off of the table. I couldn't help but beat myself up for not enjoying it as much as I could've when I had the chance. \n\nWe didn't have time to dwell as we pulled into the clinic parking lot. Any way you rolled the dice, getting your blood drawn with the person you had unprotected sex with, the same person you might be at the beginning stages of dating, was awkward. Certain things that were better left to the imagination. \n\nThat was why, on the way to lunch, we'd decided we weren't going to be people who spent their date recited every known fact to each other. If we wanted to know what the other person's favorite color was, then we'd have to pay attention. \n\nI think there was an unwritten competition to keep things as vague as possible. \n\nBy the time Shane had dropped me off at my house, I'd learned he had three brothers, his parents were still married, he was an independent contractor (but I didn't know what he did), he'd recently bought a fixer upper, and the truck he drove was his because his brother couldn't afford it. He took over the payments, otherwise he'd prefer an SUV over a truck, but the truck had grown on him. \n\n\"Will I see you tonight? Maybe I'll come early and watch your game before I play,\" I asked as I stood next to his truck. \n\n\"Well, we were supposed to play Hank's tonight, but I just received a text saying it was cancelled. It turns out the board received a ton of complaints this morning so Hank's is possibly getting pulled from the league.\" \n\nHe held up his phone and, sure enough, he'd received the information via text only minutes before. \n\n\"I'd go to watch your game, but I'm going to have dinner with my family. We were planning on something tomorrow but decided to squeeze it in earlier. I felt like having an open schedule tomorrow, you know, for other things...\" \n\nI could tell by the look on his face that he was dropping hints that he was free. He wanted to spend the day with me instead of his family. \n\n\"No problem. Have fun with your family, maybe I'll see you tomorrow?\" \n\nHe smiled brightly, \"Yeah. Can I pick you up in the morning? Ten fifteen?\" \n\nI returned his enthusiastic smile. \n\n\"Ten fifteen. Don't come any earlier because I need time to get presentable. No more of that arriving unannounced bullshit.\" \n\n\"No promises,\" he winked. \n\nHe started pulling away before I could reprimand him. As I walked toward my house, I wondered if he'd actually show up early. After all, he appeared to be the type who might do that since he seemed to enjoy chasing, pinning, and torturing me earlier. I decided I wasn't going to chance it by waiting until the last minute to get ready. \n\n*** *** *** *** \n\nThe DONNAS came over so we could get ready for the game together\u2014it felt good to be included again. I hated being the only regular-looking baseball player on the team and I loved the time I spent with my friends. I'd decided to tell them everything that had happened with Shane. I hated keeping secrets from them, even if they disagree with what I'm doing. \n\n\"I knew it! Shane was being so weird that night. He's always been nice to us, but last Friday, he was way too nice. After we got to the bar though, he was suddenly nervous. He kept staring at the door and looking around. At first, I thought he was on drugs, but this makes sense, too,\" Oliver remarked. \n\nSammy was visibly upset and disappointed. \n\n\"I'm not going to lie; this information is mildly disappointing. I actually thought I had a chance with him, but now I feel like such a dumbass,\" he pouted. \n\nI felt terrible. I suspected he had a crush on Shane, but I couldn't help how things had played out. I went and sat next to him on the bed and rubbed his back in an effort to console him. \n\n\"Salami. I didn't mean to interfere. I didn't know.\" \n\nI rested my head on his shoulder and he let out a hollow laugh. \n\n\"Don't worry, it was obviously wishful thinking. Looking back, it's obvious he was into you. After we beat them and we went to the club, he was watching you the whole time. He occasionally talked to other guys, but even then, he was watching you. At first, I thought he was helping you out, but I kinda doubt that now.\" \n\nI looked around at the rest of the group and hoped some of them might have advice on how to deal with sad Sammy. Sad Sammy was the worst and it usually took a group effort to cheer him up. Although, I got a bit of an idea... \n\n\"I've been meaning to ask you, Salami. What are your views on older men?\" \n\nSammy perked up at that question and curiously looked at me. \n\n\"Well, how old?\" \n\n\"You tell me, it's an open-ended question.\" \n\nEveryone else shot me knowing smirks and winked at my epic distraction while Sammy thought about the question. \n\n\"Feed me a scenario,\" he said. \n\n\"Okay. What if there was an older, well established gay gentleman, who hadn't had a lover in many moons, and you were the sexy, twenty-something twink who could bring him joy and pleasure he's never known before?\" \n\nSammy's eyes sparkled at the idea. \n\n\"Like a cub?\" \n\n\"Yes, like a cub.\" \n\n\"I might be interested,\" he smiled, happily. \n\n\"Well, you might meet someone like that tonight at the game, so you better get ready for the ball, cub-erella!\" \n\n*** *** *** *** \n\nWe finished getting ready and arrived at the park with fifteen minutes to warm up. AARP hadn't shown yet, but they'd mentioned they were going to make it to one of the games so I'd hoped that would be it. \n\nThey did end up coming twenty minutes into the awesome game we played against Pete's Printing. They were kind and wonderful to play against, and in the end, we were victorious. Once we cleared the dugout, I introduced the DONNAS to AARP and they all seemed to hit it off. \n\nThe only thing that could've made the night better was if the DAKS had been there, also. The gay crew, the manly crew, and the old men crew. We'd be the ultimate threat\u2014yeah, we were basically on the same level with the Power Rangers. \n\nThe best part was introducing Mickey to Sammy. Mickey had been watching me with lust filled eyes but I wasn't about that life, not when I had the prospect of Shane. I had a feeling Mickey and Sammy might hit it off since Sammy was slutty enough to be turned on by a much older man. Plus, I'd been watching Mickey and the dude had money. Not that he'd be a sugar daddy, but I bet Sammy would get a lil sumin for doing a lil sumin. \n\nAs we left the park, Sammy ran up to me as giddy as I'd ever seen him. \n\n\"Hoo,my,god! He's so cute! Isn't he cute?\" \n\nHe was acting like a teenage girl who'd just gotten noticed for the first time by the hunky quarterback. I can attest that this situation didn't bare the slightest resemblance. \n\n\"Yeah, he's pretty cute,\" I lied with a lot of enthusiasm. \n\n\"I gave him my number! Can you believe I gave him my number? Oh, my god! I shouldn't have done that, huh? He's going to think I'm a slut, isn't he?\" \n\nYep, classic teenage girl. \n\n\"No, he's going to think you're a slut when you let him nail you on the first date,\" I teased. \n\n\"Maybe,\" Sammy kissed my cheek and pranced off. \n\n*** *** *** \n\nShane was supposed to be at my house by ten fifteen that morning, which meant he'd probably get there around ten, so I was going to be ready by nine just to be sure. My shower was as luxurious as ever with my beloved LUSH products. \n\nMy mind wandered to Shane and there was definitely a fantasy of soaping him down and spending extra time on his beautiful, curvaceous boo-tay and strong thighs. My preference had always been bottoming, but topping Shane would be the ultimate top fantasy for me. \n\nI'd knead his ass and run my hands down his thighs while watching myself move between his soft but muscular mounds. It was rare for me to masturbate to the thought of topping, but as it turned out, that particular Shane fantasy was quite stroke friendly. \n\n\"Donovan?\" \n\nI froze naked, I'd just stepped out of the shower seconds before. \n\nYou've got to be kidding me! \n\nI looked at the clock\u2014nine twenty-two. I didn't bother drying off, I simply wrapped the towel around my waist and stormed down stairs (without any real anger). Sure enough, there he was, sitting at the kitchen table and looking as snug as a bug in a rug. \n\n\"What are you doing here? Coming over early isn't a thing you can do...stop it!\" \n\n\"But it's more fun this way.\" \n\nHis brown eyes were dancing with amusement as he tried to hold back his smile, which only made him that much cuter, which was almost impossible. \n\n\"Let me watch you get ready,\" he said, biting his lip playfully. \n\nI looked at him as if he'd gone crazy. \n\n\"Ab-so-fucking-loot-lee-not! Between yesterday morning and this morning, you've already tried to skip a hundred and fifty levels. Watching me get ready? Oh, hell no! That's like a six months into a relationship step. No way. You get to sit here and suffer in silence for the next forty minutes. That should teach you to come early.\" \n\nWith that, I turned on my heel and ran back upstairs. I hated feeling pressured into getting ready. I always gave myself an adequate time frame to shower and do my thang without feeling rushed, but since he was there, I felt rushed. Half of me wanted Shane to sit alone until exactly ten fifteen as a punishment while I took my time, but the other half of me wanted to hurry up so I could go downstairs and keep him company. Ultimately, I decided on somewhere in the middle. \n\nI did my normal routine\u2014moisturizing from head to toe, hair, face (special moisturizer), teeth, brows (making sure they're shaped), and then clothes. I'd wanted to make him suffer so I tried to pick out an extra good, I'm not trying too hard to look sexy, but I know I look so fucking good, outfit. \n\nI'd briefly seen what he was wearing\u2014navy blue chinos, a light-blue, plaid, collared, shirt with a grey sweater. \n\nThat boy could clean up, I thought to myself. \n\nI decided on a pair of mustard-yellow slacks that were snug in all of the right places (which was everywhere), a white shirt, a grey, plaid blazer, and leather shoes. I triple checked myself in the mirrors from every angle and finally decided I was ready. \n\n\"Are you tired of waiting, yet?\" I asked as I walked into the kitchen. \n\nShane immediately stood and tried to hide his double-take as he checked me out. I didn't mind, though. I didn't take forty minutes to get ready so he'd look elsewhere. \n\n\"No, not at all. Actually, I just finished arranging your kitchen cabinets. I think my new arrangement is more economical now and even a little fung shui if you're into that.\" \n\nWhat the fuck. I didn't care how charming his smile was, I'd cut him if he touched my kitchen. Who does that anyway? Who rearranges someone else's kitchen without asking? \n\n\"You didn't!\" I stared into his eyes. \n\nI rushed into the kitchen and started opening cabinets to figure out what kind of damage he'd done. I just knew it was going to take me a whole day to undo it. I was on my fifth cabinet when I heard Shane laughing, it was about the same time I realized nothing had changed. \n\n\"First, you show up an hour early...\" \n\n\"Fifty-two minutes,\" he interrupted with a smug ass smile. \n\n\"Fifty-two minutes early, which made me rush.\" \n\n\"This is your rushing?\" He teased. \n\n\"I'm so done! Do you want to go to brunch or not? Is this your way of canceling?\" I teased. \n\nShane walked over to me and put his arms around my waist. He was smiling like the devil and I knew he was going to lean down and kiss me, which I wasn't opposed to, but I had a point to prove. I ducked away from his advance, broke free from his arms, and walked toward the door wearing my own smug smile. \n\n\"In your dreams, sucka.\" \n\n*** *** *** \n\nI'd never been to The Endless Brunch and it was wonderful. I heard lots of wonderful things but nothing had prepared me for the actual experience. First of all, it was more upscale than I'd expected\u2014a 'jackets required' type of situation. The inside was beautiful, but not your typical five-star restaurant with white linen and stuffy wait staff. \n\nNo, each table had a different theme, which made the restaurant full of color. Normally, I would've thought it was borderline too much\u2014too much color, too much non-conformity, too busy, too much chaos\u2014but amongst the too much was just the right amount of simple, classic, and elegance to pull it all together. \n\nThere wasn't a menu, per se, so you basically got to choose if you had any dairy restrictions (vegetarian, vegan, gluten free, dairy free) and, other than that, they did all of the work. We'd started with tea and biscuits, then we had ten more courses that were all mouthwatering, delicious finger food. \n\nI sank my jaws into a bite-sized piece of chicken and vegetable quiche and my shoulders instantly relaxed in pleasure. My eyes shot to Shane when I moaned, a little too erotically. I finally understood the term food porn. He only smiled. I held up the last partial bite (since shoving it all down my gullet seemed frowned upon) to Shane and moaned again, less erotically this time. \n\n\"I'm going to be ruined for all other food. I've never had food this good and I want more. Why is everything so small? I need, at least, twenty-five of these little guys.\" \n\nShane laughed as I popped my last bite into my mouth and held up the last partial bite of his. \n\n\"Do you want the rest of mine?\" \n\nI knew he was joking, but I took the damn offering before he could rescind it. I don't think he expected me to actually eat his food because his mouth was practically lying on the ground. \n\n\"Lesson one: Don't offer me food if you don't want me to eat it, especially those little bites of heaven.\" \n\n\"Noted. You're not one of those people who says they're not hungry and then eats all of my fries, are you?\" He raised his brow and smiled. \n\n\"Absolutely, I am. If we ever go out to eat and I say I'm not hungry, you better order extra fries and probably a burger, also.\" \n\nWe shared fugitive glances and lots of smiles throughout the meal. Conversation was light and easy. Teasing was present but not overwhelming, and the food, of course, was amazing. In my wildest dreams, I wouldn't have ever thought brunch could rival dinner in the romance department, but it did. \n\nPlus, unlike dinner, where they tend to cycle everyone through as quickly as possible, brunch was slow and steady. We didn't finish until noon, which was actually the worst part of the whole date. I didn't want the date to end and I was used to dinner dates where, when you're finished, you could go back and have a nightcap. \n\nIt also seemed more acceptable to make out for a while before you gave the excuse of, it's getting late and you should be going. What were we supposed to do after brunch? Was he going to take me home and that's it? I hoped not. I didn't know what I wanted, but I wanted more than parting ways. \n\nShane was a gentleman and helped me put my jacket on, which no one had ever done before. As it turned out, he had a thing about wrinkles, he kept sliding his hands across my shoulders and down my arms, you know, smoothing out the fabric?  \n\n\"You're going to wear holes in my favorite blazer if you keep doing that,\" I teased after the fifth pass. \n\nShane's hands seized immediately and his face flushed red with embarrassment. \n\n\"I'm sorry. You just look good and you have great shoulders,\" he smiled, shyly. \n\nAs we walked out of the restaurant, I chuckled at his addition of 'great shoulders'. I did have great shoulders, but that wasn't something I was usually complimented on. \n\n\"So, you're a shoulder guy, yeah?\" I bumped his shoulder playfully. \n\n\"Yes, among other things.\" \n\n\"Yeah? What else?\" \n\nI looked at him anxiously. Excited to hear what he had to say. He scoffed at my question and raised his brow. \n\n\"I thought we weren't divulging too much information. You know, take things slow and learning the art of learning?\" \n\n\"Well, yeah, but how am I supposed to know what to flaunt and what not to?\" I pouted. \n\nShane's laugh was deep, thunderous, and hot as hell. \n\n\"Don't worry, you tick all of the right boxes. Just keep doing what you do.\" He paused before continuing, \"What about you?\" \n\nWe both blushed at the directness of his question. It was one thing to casually mention something in a conversation\u2014the way he'd mentioned my shoulders, but it was another to be so direct. We were both slightly embarrassed. I wasn't an overly bashful person but walking through the parking lot of a super fancy restaurant wasn't the ideal location to tell him his boo-tay lit my fire. \n\n\"I don't have a specific body part that I'm overly attracted to. As a general rule, I appreciate almost all of the male anatomy. Each guy has a feature that catches my eye, but it's different from person to person.\" \n\n\"What's my feature? What caught your eye?\" \n\nThis time, Shane blushed at his cute as hell question. ",
        "\"What do you think it is?\" \n\n\"My hair,\" he confidently said. \n\nI shook my head. \n\n\"But you said, and I quote, 'your hair is your best feature', at the salon, remember?\" \n\n\"I did say that, didn't I? Well, it's not,\" I laughed. \n\n\"My arms? My legs? My face? My shoulders? My eyes? My nose?\" \n\nI shook my head at all his guesses. \n\n\"Don't you find anything attractive about me?\" \n\nHe actually seemed worried. \n\n\"Of course. I like all of the things you mentioned, but they're not the feature that first caught my attention, or catches my attention every waking minute we're together.\" \n\nWe got into his truck and, once we were settled, he shook his head in thought as he tried to think of other possible options. He had to know the answer. There was no way anyone would accidently leave the gluteus maximus off of the list. It was an obvious choice. \n\n\"Don't be coy, Shane,\" I said in a mocked tone. \n\n\"Ears? Cheeks? Hands? Fingers? Toes? Feet?\" \n\nAgain, I shook my head to each guess and laughed at his frustration. \n\n\"Good Lord, Shane, it's your ass! How could you be so obtuse?\" \n\nIf I thought I'd seen Shane surprised before then, I was wrong. He looked at me with a mixture of annoyance and hurt, and rolled his eyes. \n\n\"Shut up. Now you're being mean,\" he scolded me. \n\n\"What are you talking about?\" I said. My mouth and eyes were competing to see which could be wider with shock. \n\nHe narrowed his eyes at me as if he was tired of playing games. \n\n\"I don't have a nice ass. It's too big and...\" \n\nHe didn't bother finishing his sentence, but instead shook his head with annoyance. He genuinely didn't think he had a nice ass. Evidently, his previous boyfriends weren't ass fans. Then there was the fact he couldn't find pants because they all fit weird\u2014too tight in the thighs and butt or too big in the waist\u2014which was why he always wore athletic shorts or pants instead of jeans. \n\n\"Where do you shop?\" I asked him. \n\n\"JC Penney.\" \n\nWhy does everyone shop there? I wondered if he was related to one of the AARP members. \n\n\"Well, that's your problem. Do you have plans or are we just going to sit in the truck?\" \n\nHe shook his head and said. \n\n\"I don't have any plans, but I'd definitely love to hangout longer.\" \n\n\"Okay, drive to Rosedale.\" \n\nHe hesitantly looked at me. Rosedale was a moderately upscale shopping center with nicer shops than most other malls where you'd find your average shoplifting teenage girls or the droves of moms with Craigslist strollers. \n\n\"I need to check out a few stores anyway, so I'll show you where to buy proper pants. It'll be a win-win.\" \n\nIt was true, I did need to pre-shop for AARP. \n\n*** *** *** \n\nShane was modeling the twelfth pair of pants as I struggled to contain my appreciation for proper fitting jeans. It didn't help that he kept pulling up his shirt up so he could check the fit around his waist, which gave me just enough skin to keep my imagination stoked while simultaneously inducing flashbacks from our one night together. \n\n\"I can't believe how good these feel, and they actually fit.\" \n\nHe was turning from side to side as he looked at himself in the mirror; adjusting his pants, squatting slightly, checking the waist, and totally oblivious to the drool I had to constantly mop up. He looked edible. \n\nHe went back into the dressing room to try on the last pair of pants. \n\n\"I told you I know my stuff. They're not going to be your thirty-nine dollars and ninety-nine cent jeans, though,\" I told him through the door. \n\n\"Yeah, I saw the tags. It's all good.\" \n\nWhen he stepped out of the dressing room, I thought the floor might fall out from beneath me. I shouldn't have shown him proper fitting pants. I set myself up to fail. \n\nHe was wearing a pair of dark-blue denim with the right balance of crisp and distressed. They might have been a little tight, which I was incredibly thankful for because...yummy! I tried not to watch him as he did his usual 'I'm oblivious to how hot I look while trying on pants' strut around the dressing room. \n\n\"These feel tight. Are they too tight?\" He asked hesitantly, as if it was a bad thing. \n\nI shook my head as casually as possible while discretely keeping my massive boner hidden. Shane, wearing proper pants, was sinfully delicious. \n\n\"I feel like the pants make me look bigger.\" \n\nObso-fucking-lutely they did. \n\n\"Kind of, but not in a bad way. You were hiding in your pants before, but now you're showing off. So yes, your butt does look a little bigger, but in the best possible way. It's all very flattering.\" \n\nI tried to keep my comment low key but he didn't look convinced as he walked back into the stall so he could put his regular clothes back on. He legitimately had no idea how hot he was. He wasn't being coy, he wasn't playing games\u2014he genuinely didn't know. I decided to set the record straight. \n\nI got up, knocked on the stall door. \n\n\"I have something else for you to try on,\" I lied, kinda. \n\nHe cracked the door open while hiding most of his body behind it. I could tell he'd already taken his pants off and was wearing only his underwear. \n\n\"More? I think these are enough,\" he frowned at the thought of trying on more clothes. \n\nI pushed the door open and stepped into the large dressing room, then closed the door behind me. He looked confused but happy, as I gently pushed him to sit on the large, cushioned bench that stretched across one side of the stall. Then I straddled his lap. \n\n\"Oh.\" His voice was deep and breathy. \n\nHe put his hands on my hips and smiled at me as I settled on his lap. I loved seeing him surprised and aroused at the same time. Our lips met with an electric charge. \n\nAll I could think about was the night we were together, how good it'd felt to be impossibly close to him, and how much I'd wanted that again. I knew I couldn't have it, not in the dressing room. Our tongues fought the line between passion and lust as I ran my fingers through his thick locks and used them to pull him closer, if it were possible. \n\nI moaned as I felt his hardness against me. It was a weird angle, and without thinking, I lifted my hips and reached into his boxers so I could move him to a better position. His breath hitched when I made contact with his sensitive organ and I smiled. I stroked him a few times before settling back down and grinding myself against him. This time I was able to feel him and slide properly against him (as proper as you can get with pants on). \n\n\"Stand up,\" I commanded. \n\nHe did while barely breaking contact with my lips as I ran my finger between his waistband and his skin. I slowly scooted them down a little further, revealing a little more each time. He was half exposed when I broke the kiss and went to my knees in front of him. I looked up froze when his hooded dark eyes were looking back at me. I pulled his underwear the rest of the way down until I exposed every inch of his perfect erection. \n\nEvery wall had a mirror. Everywhere I looked was a different view of Shane's ass. I'm sure Shane's view was just as appealing\u2014a three hundred sixty degree view of Donovan sucking dick. I wanted to take my time and savor my first taste of Shane, but that wasn't going to happen because I wanted all of him, now. I didn't waste another thought before I took him into my mouth. \n\nShane was above average\u2014almost eight inches and perfectly thick, just like everything else about him. I used both hands to grab his ass, pulling him closer until most of his length into my mouth. As I squeezed his ass between my fingers and bobbed my lips on his dick. My eyes rolled back when I felt his hands on my shoulders as his hips flexed back and forth. I loved the feeling of his ass muscles flexing beneath my hands and his hands clenching in an attempt to control his desire. \n\nI looked up to find the happiest boy in the world. He was watching us in the mirrors and looked like a kid in a candy store. A very erotic candy store. I let go of him for a moment and took my shirt off as quickly as possible, considering all of the buttons it wasn't as quick as I wanted. Why do I always where so many buttons? I thought and vowed to change my ways. \n\nIf he liked shoulders, then he was going to get three hundred sixty degrees of Donovan's shoulders...all while giving him head. \n\nShirtless, I grabbed his ass and pulled him back into my mouth with one quick movement. \n\n\"Oh, shit,\" he tried to stifle his moan. \n\nHis fingers gripped my shoulders as he braced himself against the onslaught of my mouth, lips, and tongue against his cock. He started to move his hands across my shoulders and down by back. I knew he was watching me in the mirrors and it turned me on like never before. \n\nThere was a knock on the door and the store associate asked if Shane needed anything. I smiled around his shaft and sucked harder, which made him stumble with his words as he spoke to her. \n\n\"Yeah. Fine. It's perfect. Thanks.\" \n\nShane squeezed my shoulders and flexed his hips against my movement. I couldn't take it anymore so, without letting go of his cock, I pulled down my pants with one hand, while the other one was still firmly attached to his luscious ass, and started stroking myself. \n\n\"Fuck! That's hot,\" Shane moaned as he desperately kneaded my shoulders. \n\nI felt the tightness in my stomach and toes as I climbed higher until I finally tipped. I jerked myself at lightning speed as I cried out in pleasure while Shane's cock was still sealed between my lips. He moved deeper into my throat as I shot my load with an intensity of a thousand fires. I barely had time to recover when I felt his cock expand and his grip tighten more as he'd leaned the majority of his weight on my shoulders in an attempt to stay up. \n\n\"Fuck, I'm cumming,\" he tried to whisper. \n\nI felt him release into my mouth and I took everything he had before I released him from my lips, then I pulled his underwear back up. When he was out back together I pulled my own pants back to their original position as I stood. \n\nWith a mischievous smile painted across my lips, I casually said. \n\n\"So, I think you should definitely get the last pair of jeans.\" \n\nShane shoved me against the wall and his lips attacked me with a vengeance. I stood there stunned and before I had a chance to recover, to do anything about it, or reciprocate, he pulled an away. \n\n\"Sounds good. I was thinking of getting a few pair, but maybe you should pick since you have such strong opinions about it,\" he said, still panting from everything that just happened. \n\nI bit my lip as he planted one last kiss. I picked out my five favorites\u2014three denim and two khakis. \n\n\"I'm not a slut,\" I said as we got situated in his truck. \n\nHe looked at me and laughed. \n\n\"God, I hope that's not true.\" \n\nThe drive home was chill, at least compared to the three hundred sixty-degree blow-fest from earlier. The temptation to drag Shane into my house and ravage him was mostly gone since I'd been sated at the shopping center. When we got to my house, he walked me to the door and kissed me. \n\nBy kiss, I mean he had me pinned against the front door while we made out for a solid five minutes...it was heaven. After that, he kissed me once more. This time is was simple and sweet. Then he left, but not before we made plans to see each other again."
    ],
    "authorname": "Mrsgnomie",
    "tags": [
        "gay",
        "gay male",
        "gay romance",
        "gay love",
        "baseball",
        "love",
        "blowjob",
        "romantic"
    ],
    "category": "Gay Male",
    "url": "https://www.literotica.com/s/three-strikes-ch-08"
}
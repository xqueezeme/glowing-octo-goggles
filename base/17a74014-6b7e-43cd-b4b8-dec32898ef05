{
    "title": "Celeste's WD-40",
    "pages": [
        "I am just a blue and yellow can of WD-40, the small, convenient sample size. I have a thin red plastic straw held against me by a rubber band. I love my little red straw, and she is everything to me; her close contact keeps me in a constant state of arousal. I love to feel her smooth, cool surface pressed against my steely body.\n\nMine is an extraordinarily pleasant existence.\n\nIt is a day not unlike any other. I lie in darkness, and the click-clack sound of Celeste's computer keys fills the drawer with its pleasant rhythm.\n\nI listen patiently, and there are muffled voices, of Celeste and her husband, then more typing, and then the phone rings. The voices continue.\n\nBut there is something different about this day. I can sense it in the tone, in the electricity in the air. I am alert. I am ready. Something is going to happen.\n\nAnd all of a sudden, my drawer flies open and I am bathed in light. I am grabbed, with desperate, trembling fingers, and an electric current blasts through me. For an instant, I can see the scene, and Celeste holds my body and stares at my cylindrical form, her eyes full of lust. I know she admires my body, my perfect 4-4-4 figure. Her eyes sparkle and dance.\n\nAnd I am unceremoniously tossed away.\n\nI roll along the floor, around and around, and finally settle to a stop. And I can not see a thing.\n\nI have been rejected before, but I hold no grudges. I know Celeste needs me. More than anything else, I know she needs her WD-40.\n\nBut it sounds like Celeste is having a fine old time. Lots of grunting and cussing and farting.\n\nIt is over surprisingly quickly. Words are exchanged, kisses, and the thudding of feet. The clack of computer keys begins anew.\n\nA few minutes later, the computer is shut down, and the room is suddenly quiet. A chair slides against the floor. I hear the shuffling of pencils and papers, and then a jarring grate of metal.\n\n\"Fucking drawer!\" Celeste mutters. \"Sticking again.\"\n\nMy attention perks. These are the love whispers I long to hear!\n\nI hear her approach, her bare feet on the floor, and I can sense her searching for me, for only I can satisfy her now! Her husband? No! KY? Hardly! Her computer? I laugh!\n\nIt is I! It is I who holds the key to her ultimate gratification!\n\n\"There you are,\" she says.\n\nI am lifted into her warm, damp hands. My entire being tingles with arousal!\n\nHer soft, slender fingers curl around my turgid cylinder. Gently, every so gently she peels off my flaming red cap, and now my nozzle is exposed, bare, trembling with expectation. Her soft finger touches my hard head, and the pressure from within me forces a glistening drip of ooze from my pin-point duct. I am so excited, I almost come right there, right on the spot!\n\nShe points my expectant nozzle into the warm, dark nether regions of the drawer works. The graceful track wheels and shiny sliders beckon me forward, and Celeste guides me down, inwards, until my poised one-eyed knob is inches away from the reluctantly sliding channel.\n\nHer fingers caress my head, lightly, along my wrinkled top surface. Slowly, with a smooth, practiced motion, she presses down.\n\nOh! The ecstasy! The huge, gushing release of my precious fluid! I spurt forcefully, once, and she presses down again, and I shoot forth another joyous burst! The gasses and fluids inside me swirl as the rapture rocks my entire being!\n\n\"Shit,\" Celeste says.\n\nI am delirious with joy, the orgasmic shock still reverberates in my hollow body. I don't remember it ever being this good before!\n\nAnd then my little red plastic straw, my soul mate, is removed from my side, and my arousal moves on towards an even higher plateau. Celeste guides the beautiful, round red form into the tiny circle in my head. It is as if my indentation were designed for holding my little red straw, she fits so snugly inside me, and my freshly wet duct stares excitedly down the barrel of her long, silky, inner core.\n\nBack towards the dark drawer we go, Celeste's fingers again stroking my poised head. The end of my lover's scarlet shaft settles into the dark crevasse between wheel and slide. And Celeste presses down - oh! That sets me off again, and a huge release of my juice gushes into the tight tight tunnel of my beloved straw. The flaming red passage carries my precious liquid down, down and out, down into the inner workings of the drawer. And Celeste taps again, and again I explode.\n\nAnd then her finger presses and holds, and I deliriously spew forth a constant stream of my lubricating nectar. Out it comes, continuously, the force rocking my trembling cylinder, tapping me, tapping me, draining me, taking everything out of me that is me.\n\nI sputter and falter. I am utterly spent. Celeste's finger moves off my sensitive head. I feel like an empty shell. And I have never felt more content.\n\n\"Damn,\" Celeste says. She shakes my drained body next to her ear. \"It's empty.\"\n\nAnd she drops me, and I tumble, down, down, into the trash bin, cradled softly by crumpled papers and tissues. I feel warm and exhausted and fulfilled.\n\nI hear the smooth glide of metal on metal, and a soft clunk as the drawer slides shuts.\n\nAnd the lights go out."
    ],
    "authorname": "poisoniv1",
    "tags": [
        "red plastic",
        "red straw",
        "lube",
        "oil",
        "anal",
        "gas",
        "inanimate",
        "lubrication",
        "sticky drawer",
        "trash"
    ],
    "category": "Humor & Satire",
    "url": "https://www.literotica.com/s/celestes-wd-40"
}
{
    "title": "The House on the Ridge",
    "pages": [
        "This story is for the \"Behind the Walls of Sleep\" Gothic Horror invitational. It is a completely different style and type of story for me and I learned a great deal from trying this. Thanks to blackrandi for the invite; these events push me out of my comfort zone and I learn a lot from them. Thanks to blackrandi, sbrooks103x, Bebop03, Piper and stev2244 for the beta reads and editing. MattBlackUK gave me the final setting for the story. This would be unreadable without all of them. There are others who prefer not to be named; you know who you are and you know you are appreciated.\n\n*\n\nWe sat in silence as our coach made the passage up the road through the mist-clad Yorkshire moors. Ashen fields, grey and dull, faded into a pallid colourless sky. The sun made no effort to push through the shrouding overcast of clouds, a feeble, mocking imitation of daylight. The nervous whickering of the horses was the only sound beyond wet creaking as the coach crept along the half-mud half-rock course up to the dark shape of Ridge Manor overlooking the bleak countryside.\n\nThe coachman was stubbornly mute, having only rumbled the slightest greeting to us at the train platform, telling us Father's solicitor would be meeting us at the house. We passed nobody, not one traveller on the road, just the endless dead pastures and stunted twisted black trees.\n\nIt had been a very difficult year since my husband had died of the Fever. It'd left an unshakeable grey pall over our little home. Money was beginning to run short and I'd felt lost and hopeless. His death had left me weak and in a miserable disturbed state. Unremembered nightmares shocked me awake in gasping terror at vague and formless thoughts. Sleep brought me no rest, and I woke in the mornings shaking from ever-worse exhaustion. Sometimes, frighteningly, I woke in odd places. Sometimes I found myself standing in the parlour, or even in the street in front of our little house. I had finally stopped wearing my widow's veil after a year at my daughter's insistence, as she felt it was making my illness worse.\n\nIn my desperation, I'd begun to think to ask Father for help.\n\nI swore I would never do that, never turn to the man who rejected me so soundly and coldly. \n\nFather. Elijah Moorhead. Hope, my daughter, had never met him and I was secretly glad that she never would. The very breath of his name made me wince in pain. We had been so very close, once, but it had been so many years since we had spoken, and that last meeting had been harsh; many things had been said that were impossible to take back. \n\nHe'd been so angered with my choice of Conall as a suitor that he'd had me forced from the house, saying that he'd never countenance an Irishman in his home, even though my mother was herself half-Irish. I still wore Grandmother's silver Saint Patrick's medallion, as I had from the time I was five. I knew he was really angry because I chose to leave, to live my life differently than he and Mother had.\n\nI'd run to Conall, and we'd run together to the city over fourteen years ago.\n\nFor Hope's sake, I feared I would have to turn to Father, accept whatever punishment he would mete out in retaliation for defying him. \n\nAs it was, I received word of his death in a letter from his solicitor, a letter that also informed me that I was to be present for the dispensation of his estate, as I was named to receive a substantial inheritance.\n\nI was quite shocked at that, as I had truly believed he would never forgive me for defying him.\n\nHope and I were nearly bereft of money, and even selling all we could, I was just able to pay for passage on the trains to reach the ancestral family estate that Father had moved to after I had left. \n\nHope peered up at the foreboding shadow of the manor. \"Mother, is it always so unhappy looking?\"\n\nI followed her gaze. 'I've never been to the Ridge Manor in my life. My mother, your grandmother, had sworn never to come back here for any reason before I was ever born.\" \n\n\"Why?\" She asked it with the guileless honesty of youth. It would be another three or four years before she would begin her passage into womanhood.\n\n\"I do not know, only that she found the manor repulsive.\"\n\nHope studied the distant shape for a moment. \"It doesn't frighten me, Mother.\"\n\nI smiled at her softly. \"I'm quite glad of that. At least one of us should be comfortable there.\"\n\n\"Will it be our new home?\"\n\n\"I don't know, Hope. That depends on a great many things.\" Mostly, I thought, it depended on how much Father's anger at me had dissipated. \n\n\"It could be a wonderful place to explore, I think.\" \n\n\"You'll not explore anything without telling me first. I know nothing about this place.\"\n\n\"Yes, Mother.\" She said it agreeably enough, but I knew I would have to watch her carefully, as she had her father's joie de vivre and irrepressible love of adventure. She meant well, but I was certain she would be haring off down every corridor and garden path in search of some great discovery.\n\nHope so reminded me of my husband; she was the only light in my fog of exhaustion. \n\nShe smiled. \"Perhaps we'll have crocuses here.\"\n\n\"Kirkstall Abbey is famed for their crocuses, so if we have none here, perhaps we may see them there.\"\n\n\"The Abbey at Leeds? The ruins we saw when we were on the train?\"\n\n\"Yes. Some of the stone from the Abbey was used to construct Ridge Manor. Or at least that is what I was told growing up.\" \n\nAs we pulled past the towering wrought iron gate, past the empty stone gatehouse, the road turned into a dark grey cobbled drive. \n\nWe slowed to a stop at the foot of the steep stone stairs, and I could see the butler standing at the massive front doors. \n\nTaking Hope's hand, I squared my shoulders and walked up as bravely as I could, but halted when I realized he wasn't our old butler, Martin.\n\nHe greeted me graciously. \"Mrs. Malone. You may call me Thomas.\"\n\n\"Good afternoon, Thomas. May I ask what happened to Martin?\"\n\n\"I'm afraid he passed away at the same time as your Father, due to fever.\"\n\nI sighed. \"That's unfortunate, he was a very good man.\"\n\n\"So I have been given to understand. Mrs. Naxby has only the highest praise for him.\"\n\nI smiled at the name of the old cook. \"Nora is still here?\"\n\n\"She is, Madame. Most of the staff departed after your father's passing, and we've limited taking on help until you determined what course of action to take. We do, however, have a gardener on retainer for the coming spring and one maid who is tasked with maintaining the household for the time being. I do apologize for that rather Spartan approach, but Mister Genovese, your father's solicitor, was quite concerned with preserving the accounts until you arrived.\" \n\n\"I'm sure it will be fine, Thomas.\" Hope and I were quite used to 'Spartan' as we had had no money, even for a maid-of-all-work, since Conall's death. \n\n\"If you have need of anything, I will be on call. I'm afraid Tillie, the maid, and I shall have to serve out meals as we haven't the proper staff, so I will not be as readily to hand as I would prefer.\"\n\n\"Thank you, Thomas.\"\n\nHe paused, almost awkwardly. \"Madame?\"\n\n\"Yes?\"\n\n\"If I may. Your... It is not my place, but as you appear to have no personal maid... your holy medal seems to have fallen to the outside of your garments.\"\n\n\"That's not an accident Thomas, I wear my grandmother's memory this way at all times.\"\n\n\"I see. All due apologies for overstepping my bounds.\"\n\n\"No, Thomas. No apologies. I appreciate the concern, I understand that many in this area are uncomfortable with the Catholic. I don't wear this for religious purposes.\" \n\n\"Yes, Madame.\" He paused again. \"Tillie will see you to your rooms, and I will arrange to have the coachman bring your bags into the house.\"\n\nI turned and started as I suddenly found myself facing the maid. I hadn't heard her approach at all. Pale, gaunt and grim, she stood silently, a scar violently crossing her face, her left eye drooped mostly closed. She looked terribly odd and lopsided in a most disturbing manner. \n\nI caught myself as best I could, smiling and nodding to her. \"You must be Tillie.\"\n\nShe didn't move. I couldn't even tell if she was breathing. \n\nAfter a slightly uncomfortable pause, Thomas spoke. \"All due apologies Madame, Tillie is quite mute, I'm afraid. She is, however, very competent.\"\n\nTillie, slowly and mechanically, grasped her black skirts and then gave a slight, peculiarly smooth, curtsy. Despite her inelegant appearance, she almost appeared to float effortlessly.\n\nHope stepped forward and took her hand, smiling. \"Most pleased to meet you Miss Tillie. My name is Hope.\"\n\nThe little maid looked down at her, expressionless. Hope persisted. \"Where is my room Miss Tillie?\"\n\nTillie gave me an ever so slight nod, and with a look, I supposed, of resignation she led us up the stairs to the east wing.\n\nI glanced around, Father's opulent tastes were evident everywhere. Thick rugs covered the floors, and heavily embroidered tapestries hung over every inch of the walls.\n\nTillie showed us to adjoining rooms. She had obviously been expecting us to arrive as she already had coal burning in the grates, and had very fresh linens laid on.\n\nShe stayed with us just long enough to lay in our clothing when the coachman brought our trunks up. The paucity of our clothing didn't seem to register with her at all, and she had it laid in very rapidly, despite Hope's continuing efforts to talk to her.\n\nAfter she left, I looked over at Hope. \"Well, she's just a bit sullen, isn't she?\"\n\n\"She's a mute, Mother.\" \n\n\"I know that, but she certainly lacks any lightness of spirit.\"\n\nHope looked at the closed door. \"She's just very sad, Mother, I can feel it.\" \n\nI reflected on that. \"She's probably fearful that we have our own staff and she will be displaced. She has to be very new here from what Thomas said.\"\n\n\"You're not going to let her go, are you?\"\n\nI smiled at Hope's distress. \"I can hardly replace her with servants we don't have. Besides...\" I gestured around the room. \"Thomas was right, she is very competent. The curtains have been cleaned, the linens are fresh, and the fire laid on perfectly.\"\n\nHope looked around so very seriously. \"Everything does seem to be in order. And I will work on making her happier.\"\n\nI smiled at her relentless optimism. \"I think you've chosen quite the task for yourself.\"\n\nHope smiled. \"I believe she really wants to be happy.\" \n\nShe pulled our small jewellery case from a valise and opened it for a moment. It had those few mementos left to me by my grandmother, her collection of silver Saint's medals. Father had wordlessly handed it to me as I was forced to leave our home after that last argument, though he would let me have nothing else. \n\nWe'd had to sell so many other things, but even at my most desperate, I could not part with those.\n\nHope quietly, reverently, closed the case. She looked at me, studying me. \"You should rest, Mother.\" \n\n\"I will be fine. I'm just worn out from our journey.\" \n\n\"At least for a moment or two, Mother. The illness takes so much out of you sometimes.\"\n\nI felt the exhaustion crawl along the edges of my mind. \"For a moment or two.\"\n\nHope sat in a chair by the bed, as she often did when the sickness took hold of me.\n\nI lay back and fell into restless sleep.\n\n*****\n\nI drifted down the dim hallway, a dark luminescence floating just ahead of me, a shadowy moon. The stones of the walls twisted and changed as I was drawn forward, unwillingly, until I saw a dim figure ahead. \n\nThe figure coalesced and I saw an image of myself, distorted and twisted as by a warped mirror. A curl of lip, a raised eyebrow. The countenance was unrelentingly cruel and dissipated. Her hand reached toward me, clawed with bloody nails...\n\n*****\n\n\"Mother!\" \n\nI snapped awake, to find Hope gently smoothing my brow, fingertips weaving through my hair. \"You were having bad dreams again.\"\n\n\"I didn't try to get up, did I?\"\n\nShe shook her head. \"No, I didn't let you stay asleep long enough to do that, but I fear you would have. We will have to lock the doors at night to keep you in.\"\n\nMy somnambulism was worse when my illness flared. After Conall's death it had become much more frequent, happening even when my sickness was mild; it was as if I was seeking, looking for something vital to me. I'd awaken disoriented and lost, over and over again. Sometimes I would awaken in odd corners of our little house, sometimes much further afield.\n\nI was used to it, in some measure, having been cursed with waking beneath a distant tree or in some other odd place since I was only eleven years old, But this, this was different, plagued with harsh dreams to which I'd never been subject.\n\nHope and I locked every door and window, yet it still happened all too often. The dreaming path pulled ceaselessly at me until I managed to slip away.\n\nFor a moment we sat staring at each other until a sharp rap at the door interrupted our reverie.\n\nTillie stood at the door bearing a silver tray with a notecard.\n\nHope walked up to her. \"Thank you, Miss Tillie.\" Her insistently cheerful approach didn't seem to catch Tillie's notice at all, she simply gave the slightest of curtseys and departed silently.\n\nThe neatly lettered card informed us that dinner would be served in one hour and that Mr. Genovese, father's solicitor, would be joining us as a guest.\n\nHope looked through the door thoughtfully as I looked over our dresses for dinner. \"Do you think, Mother, that Miss Tillie could be a lady's maid one day?\"\n\nI laughed softly. \"It's hard to imagine Tillie concerned with dresses and parasols.\"\n\n\"I like her. I think she would be a fine lady's maid.\"\n\nI very much doubted that, but decided to keep that to myself. \"Since Tillie is not here to give her opinion, which dresses do you think we should wear.\"\n\nShe pointed to my dark blue velvet dress. \"That one, Mother. It brings out the darkness in your eyes and makes your skin look like the finest ivory.\"\n\nI pulled her dark blue dress as well. \"Then we shall dress alike, you and I.\"\n\nWe dressed and she pulled on silk gloves to fasten our necklaces; there would never be any tarnish on Grandmother's medallions.\n\n*****\n\nMr. Genovese, I was sorry to discover, was a pallid unctuous man with little strength of character or personable nature. It was all I could do to put off talk of the business at hand until after dinner. Only the arrival of the food, or, perhaps, Mr. Genovese's apparent discomfort with Tillie, was actually able to put an end to his determination to discuss the inheritance. \n\nDinner itself was quite palatable, not surprisingly as I remembered Mrs. Naxby's skill. Even with the restrictions placed on purchasing by Mr. Genovese, her dinner of cucumber soup and Pheasant Mandarin with Vichy carrots followed by gooseberry fool was the best food Hope and I had eaten in ages. \n\nAfter the last course was finished, I looked to Thomas. \"I believe we will retire to the parlour. If you could be on hand to serve out brandy for Mr. Genovese, I would appreciate it.\" \n\nI had no choice but to meet with Mr. Genovese, however unseemly and inappropriate it would normally be, but the presence of a male servant would at least render some accountability. To my relief, Thomas picked up on my request immediately. \"Of course, Madame.\"\n\nHope promptly took a disconcerted Tillie by the hand and asked her to show her around the mansion.\n\nMr. Genovese's oily manner left me no less disconcerted in the parlour, but Thomas made certain to seat me so as to avoid any possible impropriety, for which I was quite grateful. \n\nWe were barely seated before Mr. Genovese started. \"If you accept the terms of the inheritance, I will file the necessary paperwork in the morning.\"\n\n\"Terms?\"\n\nHe paused, sorting through papers. \"Nothing particularly intrusive. The house is never to be sold outside the family. You and any children you have or may have are required to stay in residence, though you are, of course, allowed to travel as necessary or desired. None of the attached grounds are to be sold for any reason.\" \n\n\"Just how much land is attached, Mr. Genovese?\"\n\n\"Just over six hundred acres. Mostly forested land.\"\n\n\"Any other conditions?\"\n\n\"The usual, maintenance of the staff if they wish to keep their positions. Mrs. Naxby is the only remaining staff to whom it applies, as the others who were listed seem to have tendered their resignations and departed, I'm afraid.\" He paused. \"There is one odd codicil to the will, he added it when he was quite ill, just before he passed.\" \n\n\"That is?\"\n\nHe read it off. \"Dearest Isobel. Please forgive an old man his pride. I know this is late, too late. You have my blessings and apologies.\" His voice trailed off uncomfortably.\n\nI closed my eyes and breathed deeply, refusing to break down. I'd always known, I think, that the only thing that kept us from reconciliation was pride. Pride on both our parts.\n\nThomas moved slightly closer and even Mr. Genovese seemed to understand the moment. \n\nI caught my breath. \"Is there anything further Mr. Genovese?\"\n\nHe sorted through the papers. \"There appears to be nothing else related to accepting the inheritance. I'll file the necessary papers and ensure the accounts are transferred to your name.\" He looked up. \"I don't have exact balances with me today, but your father made several very successful investments and there is more than enough money for you to be quite... comfortable.\" He looked suddenly disconcerted discussing finances with a woman.\n\nI stared at him for a long moment. \"How 'comfortable,' Mr. Genovese?\"\n\nHe took a deep breath. \"Just under five hundred thousand pounds sterling in assets. Madame.\"\n\nI blinked. Even Thomas blinked. It was unimaginable wealth, far beyond what I had even dreamed possible. I struggled with the shock for a moment, then felt I had to say something. \"Thank you, Mr. Genovese.\"\n\nHe nodded slowly, staring at the papers in his hands. \"You will be granted access to the accounts as soon as the papers are processed. I will file them immediately in the morning. I suspect the bank chairman will want to meet with you within the week.\"\n\n\"I suspect you are correct, Mr. Genovese.\"\n\nHe bit his lower lip and 'tssked.' \"I will return tomorrow with any messages from the bank and to confirm that everything is filed. If you wish, I will continue acting as your solicitor until you decide on a different course of action. Unless you have your own solicitor, of course.\"\n\n\"I have no solicitor, Mr. Genovese, pleases consider yourself on retainer.\"\n\nI had little energy for further discussion, and our talk wound down quickly.\n\nAfter we finished our talk, Thomas showed Mr. Genovese out while I slowly went in search of Hope and Tillie. That took no time at all as they were just arriving in the great foyer as I entered it.\n\nHope held Tillie's arm up to show a circlet of dried flowers around her wrist. \"Mother! I found some dried flowers and made a bracelet for Miss Tillie. It's beautiful, isn't it?\"\n\n\"It is quite pretty.\" There were at least some dull purple blossoms, lavender, perhaps, amongst the dull grey leaves.\n\nThe corner of Tillie's mouth may have twitched up although I suspected it was a mere trick of the light.\n\nHope stared at me for a moment. \"Mother, you look exhausted.\"\n\nI hadn't realized how much the meeting with Mr. Genovese had taken out of me until that moment. I felt myself sag a bit. \"I'm just tired.\"\n\nShe rushed to my side immediately, gripping my arm. \"Miss Tillie, we must get her to bed.\"\n\nTo my surprise the taciturn little maid took my other arm with remarkable strength as they escorted me up the stairs to our rooms. Tillie turned down the beds and banked the fires expertly. When she was satisfied with her work, she nodded then left us to our devices.",
        "Hope helped me change into my sleeping clothes, and afterwards changed into her own.\n\n\"Did Mr. Genovese say we could stay here, Mother?\"\n\n\"Indeed, we may. It appears that we own this estate and much, very much, besides.\"\n\n\"I like this place, Mother. The house, the forest, everything. We have it here, the peace and solitude you need.\"\n\n\"We may.\" I could hear my own unease all too clearly. Despite the estate, despite wealth beyond belief, I found myself hesitating. \n\nHope seemed to miss my concerns, though, and bid me goodnight.\n\n*****\n\nThe hallway flexed and shivered like the inside of a living animal. I could see my mocking self ahead of me, waving for me to come on, to catch up, one lip curled in a sneer. \n\nThere was a shimmer in the air like the heat of a fire rising, but the feeling was instead dank, and the taste of cold ashes filled my mouth. A slight scent of iron, of blood, caught in my nose, but it was in an instant gone, and I hastened to catch up to her.\n\nTo this other me that danced ahead.\n\nVague shadowy forms seemed to flock to surround her. Twisted things with no real form, but a feeling of power and an awful sense of alien being. She writhed unashamedly amongst them for an eternity, then looked directly at me with complete contempt. \n\nWith that, she turned and disappeared through a door, leaving only a laugh like slow falling pieces of leaded glass striking stone.\n\n*****\n\nI blinked awake, barely able to stand, just catching myself on the stout door in front of me. I'd had this happen before, many times, but I felt more disoriented than ever. \n\n\"Mother?\"\n\nI looked down and found Hope holding my hand, a silk ribbon linking my wrist to hers. \"I'm awake. I think.\"\n\nHope gripped my hand all the tighter. \"We must get you back to bed, Mother.\"\n\nI let her lead me through the house and up the stairs, barely able to even walk in a straight line until we reached our room. She sat on the bed next to me. \"I tied us together so you couldn't slip away.\" \n\n\"Did I say anything?\"\n\nShe shook her head. \"You were uneasy and unhappy, I think. But you said nothing. You tried that door, but it was locked, and you just stopped there. Maybe you were trying to get out, into the forest.\"\n\n\"Maybe.\" I did not want to share the dream with her, the wicked version of me that beckoned me on.\n\nShe sat in the chair next to me this time and held my hand through the uneasy sleep and restless dreams that followed, yet she looked fresh and awake in the morning through the magic, I suppose, of innocent youth.\n\nA teapot sat on the small table near her, and she offered me a cup. \"When dawn came, I went down and asked Mrs. Naxby if she could make some chamomile tea. It always seems to sooth you when you are ill. She is sending breakfast up so that you may get more rest.\"\n\nI took the cup and sipped the warm tea carefully. \"She always had some on hand for your grandmother, you know.\"\n\nA knock on the door later, Tillie entered bearing a tray of breakfast. \n\nAfter breakfast, we simply relaxed. Hope read and I slept until I felt I had to get up and walk a bit; even that was well after the mid-day meal. \n\nHope insisted we bring our cloaks with us as she had something to show me.\n\nShe led me to the end of the hall away from the stairs to the main foyer. \"Miss Tillie showed me this yesterday.\"\n\n\"Tillie showed you or did you drag her along?\"\n\nHope blushed a bit. \"She seemed to enjoy it.\"\n\nI doubted Tillie enjoyed very much at all, but when Hope opened the door and we stepped up the short flight of stairs, I decided perhaps she had.\n\n\"This is quite amazing, isn't it?\"\n\n\"Yes, Mother.\"\n\nWe were on the roof where a broad slate-tiled walkway went from one wing of the Ridge House to the other. Ornate filigreed wrought iron handrails lined both sides, with a breath-taking view in every direction. Seemingly endless forests and moors graced three sides, while the other overlooked a turbulent broad river.\n\nThe winter sun was dimmed by haze, but the sky had no clouds. Shadows were oddly lacking, though the land seemed dark. \n\nI looked over the forests and Hope spoke what I was thinking. \"It's perfect, isn't it Mother?\"\n\n\"It's private and peaceful. No crowds, no constant visitors.\"\n\n\"Do deer live out there?\"\n\n\"I suppose they do.\"\n\nHope smiled. \"I would like that, I think.\" She suddenly pointed up the road. \"I think that is Mr. Genovese's coach. I saw it out front yesterday when he visited.\"\n\n\"I suppose we had best retire then, as we are dressed entirely too casually for visitors.\"\n\nHope giggled and we headed back down.\n\nMr. Genovese having apparently noted my discomfort the previous evening simply left a notecard to be brought up by Tillie. All papers were filed, all accounts were in order and at my disposal. The bank chairman had sent a letter with him, offering to meet with me at my convenience.\n\nI decided to rest a bit more; my sleep in the daylight had been far less disturbed than in the night, as was so often the case with my condition.\n\n*****\n\nOnce again, I drifted down the hall, the dark moon ahead of me promising darker things, and leading me towards her, ever towards her. I knew I had to find her, to stop her. \n\nStop myself.\n\nI was in an instant facing the door, aching to pass through it. A dull throbbing chant of half-heard dead voices pushed through it to me, calling me forward, calling me down.\n\n*****\n\nHope stared down at me. \"You were upset Mother, you sounded desperate.\"\n\n\"The dreams are back.\"\n\n\"Night is almost here and the moon is rising.\" She paused. \"I went down to talk to Mrs. Naxby about supper, but I couldn't find her. The kitchen fire is cold. I couldn't find Thomas or Miss Tillie either. We're alone in the house.\"\n\nA sick feeling washed over me, beyond even that of my illness. I had no suspicions of anything, only a feeling. \"Where is the doorway you found me at, Hope? I cannot remember where we were when I woke.\"\n\n\"On the main floor just near the kitchen entrance.\" She squinted her eyes, thinking very hard. \"You had pushed back one of the tapestries, and the door was there.\"\n\nI couldn't think why this felt so important, but I knew it was. I slid off the bed. \"This has to be looked into. The dreams are too intense.\"\n\n\"What about your condition, Mother?\" \n\n\"The sickness will fade in a few days. I can bear it for now.\" \n\nI could see in her face that she doubted me; she kept silent for a moment as I pulled on my robe and stepped into my slippers, then, setting her little jaw, she stared up at me as firmly as she dared. \"Your illness will pass, Mother; it always does, but it will get worse before it wanes.\"\n\nShe wanted to demand to go with me but held back. She was correct, though. \"I don't want you out of my sight in this place right now, and I may need your help anyway.\"\n\nA smile struggled to break onto her face, but she suppressed it. \"We shall need a lantern.\"\n\nThe sun was casting a dull brick red on the scattering of dead grey clouds as it rested on the horizon. \"We shall, I think.\" \n\nThe house was steeped in silence as we quietly walked down the stairs. The heavy tapestries and scattered rugs seemed to swallow every sound. \n\nHope looked around fearfully for a moment. \"It's so empty... like a tomb.\"\n\nI didn't respond, just clutched her hand tighter. We had to pause at the bottom of the stairs as nausea washed through me again.\n\nHope led me down the hall towards kitchen. \"It was...\" she paused, \"... here, I think.\"\n\nShe pulled a tapestry back and stared at the blank wall. \"Oh.\"\n\nI saw a familiar odd image on a tapestry a little way down the hall. \n\nI traced the familiar darkened moon on the tapestry with one forefinger, then in a rush pushed the tapestry aside. I faced a door of heavy oak planks, iron-bound and solid as a stone wall. \n\nHope took in one long breath and nodded mutely, then remembering her manners. \"That's it, Mother, that's the door.\"\n\nI pulled the door, half hoping that it would be locked, but the treacherous thing swung open with only the slightest near-silent groan of protest. The gaping maw of the blackened stairwell waited hungrily.\n\nThe darkness seemed to suck in the light from the lantern, leaving the stairs black and foreboding, each stair-step felt rather than seen.\n\nWe reached the bottom and found ourselves wrapped in suffocating shadow. \n\nMoving around in the darkness of the cellar was slow and uncertain. The lantern fought fiercely, and eventually we would just make out a vague menacing shape. Drawn almost against our will, we found ourselves pulled toward it as if by malignant force. \n\nAs the shape across the room was finally illuminated by the feeble light from our lantern, Hope gasped in horror. \n\nI pulled in my breath. Martin's face stared at me, frozen in a look of pain and horror, eyes milky white. Mrs. Naxby, Mr. Genovese and a half dozen others who I had never met were piled, pale and breathless, like so many wax figures. Some were horribly slashed and cut, while others seemed simply still and unmarked. \n\nI could smell no corruption, no putrid rotting, just an underlying scent of cold ash. I hesitantly reached out to touch the nearest corpse. The woman was cold, not the chill of death, but a deeper, ice-like freeze, her flesh hard and slick.\n\nIt took me a moment to see it, but the most horrifying realization was that the bodies were stacked and twisted grotesquely together to form a throne of sorts.\n\nShuddering in revulsion, I grasped Hope's hand. \"We must be away immediately. There is great evil here, and the day wanes.\"\n\n*****\n\nWe ran up the narrow stair and raced down the hall as best we could; I railed silently at my weakness and brushed falteringly along the wall, trying to stay upright as Hope pulled me along.\n\nI gasped down at her. \"We have to get away from here, try to make it to the road. Maybe someone can help us if we can reach the road while it is still light outside.\"\n\nShe nodded, wide-eyed, but stumbled to a halt as soon as we entered the great entrance hall. Thomas stood poised very properly in front of the doors.\n\n\"Leaving so abruptly, Madame?\"\n\nI stood straight trying to hide my shortness of breath. \"We just... just... I just want to take Hope for an evening walk, Thomas.\"\n\nA sneering humour lit his eyes. \"I rather think not. A lantern in your hand? It's clear you've just come up from the cellars and we all know what you've seen there, so I believe it is time for this charade to end.\"\n\nI pushed Hope behind me and whispered to her. \"Go. Up the stairs past our rooms, go to the roof walk.\"\n\n\"Mother...?\"\n\n\"I'll catch up to you, but I can't outrun him right now and you can.\"\n\nShe hesitated for just a moment then I heard her scamper up the stairs behind me.\n\nI shook my head. \"Thomas. You don't have to do this. We just want to leave.\"\n\nHe laughed, low and mocking. \"Oh no, that wouldn't do at all. Not with all the trouble we've gone through. It would ruin all her plans. She'd be very angry, she would, and I wouldn't enjoy that at all.\" He paled slightly at that. He shook his head and flexed his hands.\n\nI waited until he started to step forward, then I hurled the lamp at his feet. My sickness betrayed me, a spasm of weakness hitting me at just that wrong moment. Instead of bursting all over him, the lamp glass popped free and the glass bottle cracked open feebly, spilling oil lazily onto the carpet. The flame of the lamp died in a sad curl of smoke.\n\nHe shook his head sadly in grim humour. \"That's most pathetic... Madame.\"\n\nI began half crawling up the stairs, drawing my ragged breaths in as best I could while he watched in cruel amusement.\n\nHe stepped forward slowly, casually kicking the top of the lantern as he stepped over the oil and it rolled in a long lazy circle.\n\nThomas grinned evilly. \"It's been a long time since I felt a soft neck crack in my hands. I'm really going to enjoy this.\"\n\nI looked at him over my shoulder as I struggled up the stairs and saw the wick of the lantern spark to life behind him. Unhappily he followed my gaze and saw the flare as the wick hit the oil-soaked rug. \n\nHe growled unintelligibly and swept his coat off, turning, prepared to beat out the flame. He cast a nasty glare back at me. \"You'll suffer for this.\"\n\nThomas paused for a long moment, clearly pondering whether he should kill me first or deal with the fire, a bit too long as it turned out. The fire seemed to come alive all at once, spreading across the carpet and catching on the tapestries with terrible speed.\n\nRealizing the fire was beyond smothering with his coat and tails, Thomas charged up the stairs, away from the licking flames chasing across the floor. \n\nI staggered onward, but caught in yet another spasm of weakness, there was no chance I could flee from him. He shoved me into the wall, my sickness making a mockery of my desperate attempt to escape, I fell to the ground helplessly. Instantly he was on me, kicking again and again into my ribs until I curled up gasping for breath.\n\nThomas looked over at the burning tapestry and snarled angrily. \n\nWith one last kick, he sent me rolling against the bannister, doubled up in pain. \"She'll be furious over losing the mansion. You should have just had the good grace to die when you were supposed to.\" \n\nI curled up tighter, unable to do much more than that. \n\nLooking down at me, he grimaced. \"Fine then, burning's as good an end as any for you.\" Then he turned and began to run down the stairs, looking for an escape.\n\nHe stopped suddenly at the second landing, staring at the sea of flame that the foyer had become. \"You've killed us all!\" \n\nI lay feigning helplessness as Thomas came back up the stairs, red fury on his face. Just as he reached the top, I lashed out with a kick into his shin, catching him as he stepped, with only one foot touching the ground. He pitched back down the stairs, flailing wildly.\n\nAs he fell back, he grabbed the only thing he could reach. The massive flaming tapestry tore loose of its hangers and wrapped around him in a burning shroud as he tumbled down the main stairs into hellish foyer. \n\nI flinched back from his horrifying, inhuman screams, then lurched up the hallway toward the roof exit, clutching my ribs as every breath sent spikes of pain through me.\n\nDesperately praying that Hope had made it up to the roof, I stumbled up the short flight of stairs and pushed the door open, falling into the final dying light of day. If we could cross the roof, we could escape the fire.\n\nI saw her immediately. She stood near the railing, next to Tillie and another woman, a woman I hadn't seen. The woman turned and I gasped in shock, nearly swooning at the sight.\n\nIt was me.\n\n*****\n\nThe face, the hair, I saw them in the mirror every day.\n\nI faced myself; a harsh, anger-lined version of myself, lit by the gibbous glow of the rising full moon.\n\nThe woman in my dreams.\n\nShe leered at me; an unhealthy, lurid smile splitting her face. \"Well, dear Sister, aren't we a sight?\"\n\n\"Sister? I don't have...\" Even as I started to say it, I knew I was wrong. She was too much the evil parody of me.\n\nHer smile widened, a feral animal grin with less humanity than the savage smile of a rabid dog. \"Oh, but you do, Dear, Dear Sister. I'm your older sister, Marguerite. They never told you about me because they were ashamed of me.\" Her eyes glittered madly.\n\n\"Why... why would they be ashamed?\"\n\n\"I'm their terrible little secret. A family of their status with a daughter committed to the asylum for the criminally insane?\"\n\nI grasped the railing, my head reeling as I fought to understand. She chuckled, a low rasping sound like a dying animal. \"Oh poor, poor Isobel. I started with breaking dolls, how I so loved breaking dolls. But I found so much better. There are stone foundations behind the House that were servants' quarters. I burned them all. Those Outside talked to me, told me what I had to do to gain power, real power. I chained the doors shut so they couldn't get out and I burned them all.\" Her eyelids fluttered and she shuddered in ecstasy. \n\nShe opened her eyes and pouted mocking-sad. \"Father and Mother didn't like my little fun at all, but they wouldn't bear any scandal, so they locked me away and pretended I didn't exist. Years and years of cold water treatments and cold stone walls, before Those Outside helped me escape. The sanatorium burned in a most terrible fire, and so Father believed me dead, or he certainly would have been more cautious. Perhaps he might even have warned you.\"\n\nI glanced over where Tillie was holding Hope tightly to her. \"Just let Hope and I go, we'll leave and never say anything to anyone.\"\n\n\"Oh darling Isobel, I can't do that. When I take over the estate it will be as 'Isobel.' With you living away for so long, nobody will know I'm not you.\" She shook her head with a sardonic smile. \"Of course, that only works if your dear little daughter died. We'll say it was of the fever I suppose. It would be fitting.\" She chuckled at some private joke. \"Her father died of fever, her grandfather died of fever. Don't you find that interesting?\"\n\nI froze, uncertain and afraid to ask.\n\n\"Just a little concoction I invented. A drop or two in the afternoon tea and they die in a couple days. It looks just like the Fever. Nobody even questions it.\"\n\n\"You murdered Conall and Father.\"\n\n\"Of course I did. It wasn't difficult at all.\" \n\n\"Why?\" I hated the weakness in my voice, but the pain was overwhelming.\n\n\"How else to get you back here so I can take your place? Besides, it was quite entertaining. I often just send Tillie to deal with these little things. She's remarkably skilled, you know, and so very quiet. She's completely mine, completely in my thrall, so she will do anything I demand of her, just as Thomas. But your Conall and our Father were family, so it seemed fitting to take care of it myself.\" \n\nShe looked over at Hope and Tillie. \"I think it's about time sweet little Hope went on her way.\"\n\nHope gasped as Tillie's grip tightened on her arm. \n\nI raised my hand weakly, pleading. \"Tillie! Please, she hasn't done anything to you!\"\n\nMarguerite's laugh rose madly, ringing in the darkness. \"Tillie? Appealing to her better nature? Oh dear, she hasn't one. Not at all. Her name's not even Tillie.\"\n\n\"Tillie?\" Hope whispered the name plaintively.\n\n\"Try 'Blinky.' That's her old name from when she worked for the Forty Thieves gang in London after she escaped prison.\" Marguerite's laughter hissed nastily. \"I doubt she even remembers her Christian name. She used to have one, you know. A long time ago she was quite the respectable little factory girl. Such a common little thing. Of course that was before a drunken sot of an Earl rode her with her husband and her new-born down in the streets.\" She made a dramatic sad face. \"It took her six months to walk again, then she learned it's not acceptable to carve up a toff, even if he killed your little family. She's much more interesting now. Not common at all.\"\n\nI tried to stall for time, as an excuse to struggle closer to the madwoman. \"That's why she can't speak.\"\n\n\"Oh no, that is why her eye doesn't open right, but her tongue was cut out later by a rival gang when they caught and tortured her. They did most unspeakable things to her, then wrapped her in an old carpet and threw her in the Thames. All done and gone, but my little Blinky can be a bit difficult; she simply refused to die. She hunted them down later and killed them all. She's very fond of her little stiletto, quite the murderous little thing.\"\n\nTillie stared at me steadily, her dark eyes emotionless and cold as the night. She held the long needle-thin knife to Hope's throat. My unspoken plea died in my throat.\n\nMarguerite rolled her eyes. \"Blinky, finish the little thing off, I'd hate for her to have to watch her mother die in front of her.\"",
        "Hope looked into Tillie's face. \"Tillie?\"\n\nThe little maid stood as still as a statue, her steel stiletto unwavering. She suddenly blinked her one good eye and gave her head a single shake as if she were waking from a dream. She looked into Hope's face and then up at Marguerite. She slowly shook her head twice and gently let go of Hope's arm, her knife slowly lowering to her side.\n\nMarguerite's face hardened in anger and she snatched Hope's wrist cruelly. \"I'll deal with you later, Blinky. You'll have to be punished for this.\" Her face lit as she said it, and Tillie flinched a bit. \"The stiletto would have been quicker.\"\n\nShe started dragging Hope toward the railing, her mad strength easily making child's play of Hope's ineffectual struggles.\n\n\"She's just a little girl!\" I dragged myself towards her, but a wave of sickness swept over me and I collapsed to the slate.\n\n\"Not for very long, soon she'll be just another little broken doll, like so many I've left behind.\" She said it wistfully.\n\nA motion caught my eye, Tillie was trembling fiercely, looking down and turning something in her hand. She twitched oddly and whatever she was holding fluttered to the slates. She looked sharply up at Marguerite, her face twisted in hate, then hurled herself violently across the slippery tiles with a horrid bubbling scream.\n\nTillie slammed against Marguerite, tearing her away from Hope. As they reeled, staggering wildly across the rooftop together, I could see the long flashing needle of the stiletto plunging again and again into the madwoman. \n\nThey crashed into the railing overlooking the boiling river, then Marguerite hurled Tillie aside and began to laugh. Throaty, unhinged peals of laughter echoed up into the flame-lit sky. Dark blood streamed from a dozen stab wounds, running down her pale dressing gown in gory lines.\n\nShe reached down and picked up the dried circlet of flowers Hope had made for Tillie and looked at it. A small broken baby rattle had been tied to it. \"Lavender, hyssop and sage. No wonder then she was able to resist me.\" She tapped the rattle. \"Really Blinky? A soft spot for children. How hopelessly droll.\" \n\nShe tossed it onto Tillie, where she lay weakly on the roof beside me, curled up and weeping piteously, almost silently.\n\nMarguerite smirked, looking down at her stab wounds, stark and black in the light of the full-risen moon. Like tiny gaping mouths, they slowly writhed as they closed and healed unnaturally. \"You've ruined a perfectly good dress Tillie. I will certainly enjoy your punishment for this.\"\n\n\"Those Outside gave me real power. I just have to keep doing their bidding. Leave my little broken and burned dolls where they tell me to.\" Marguerite waved her hand almost casually and the leaping flames below suddenly guttered and died. She looked over at Hope and smiled as I pulled myself to my knees, struggling for breath against the waves of nausea. \n\nI slowly reached up and clutched the medallion hanging from my neck. With a shock of awful burning pain, the delicate chain snapped, spilling from my grip and dropping to the slate. A wave of agony wrenched through me. \"A witch?\" I gasped it out as best I could. \"You traffick with demons?\"\n\nHer mad laughter echoed again. \"How very delicate of you. 'Traffick.' Yes, Dear Sister, I am Malefica, what you call a witch.\"\n\n\"Do you think...?\" I choked against the horrible racking pain for a second. \"... really think that you're the only monster in our cursed bloodline? Sister.\" It was hard to speak at all, hard to say anything. I leaned forward until my forehead touched the cool stone, feeling my gorge rise as blackness momentarily twisted my vision. \n\nDimly I sensed movement as Hope crawled to Tillie and hovered over her protectively. All concern and fear of Marguerite had vanished from her in a moment. I managed to open one eye and in the brilliant moonlight, I could see Hope mouth the word \"mine\" at me.\n\nMarguerite caught the shift in her and looked down at me in puzzlement. \"What...\"\n\nI felt my illness, my Curse, rush though me, a brutal storm of strength and fury and hateful joy, loosed at last from that awful bond of blessed and burning silver. I snapped my head up and watched Marguerite recoil in stunned shock from my bright yellow eyes. The lengthening muzzle and savage fangs made it impossible for me to say anything coherent anymore. I didn't want to say anything anyway; I could smell her delightful fear as she realized what I was, what I had become. Realized that she had no time for her dark magicks.\n\nI launched myself at her in terrible ecstasy, bearing her over the railing to fall together with me into the dark angry waters below, my fangs ripping into her soft throat as my mind faded into that delicious crimson dream. \n\n*****\n\nMy eyes blinked open and Hope looked down at me in unconcealed amusement. \"You would wait until we've gotten you completely cleaned up before you awakened, wouldn't you Mother?\"\n\nI sat up slowly, the aches of my transformation making me move stiffly. The fingers and palm of my bandaged hand throbbed where the terrible silver had burned me. Brilliant rays of sunlight slashed in lines from the half open curtains. Tillie watched me warily from behind Hope. \n\n\"Where is she?\"\n\nHope bore herself up proudly. \"We buried what was left of her. It was very messy. You taught me well, Mother. I remembered to bury the head away from the body, as you told me had to be done with witches.\" She paused. \"What remained of the head, in any case.\" She gave an exasperated sigh. \"It was VERY messy. The tongue was gone, eaten, I suppose. So was her heart, if she even had one. I filled her mouth with cold iron horseshoe nails. Miss Tillie found them for me, she was very helpful.\"\n\nI looked down at the clean white gown I was wearing. My medallion, neatly mended, hung close around the collar of the gown. \"Thank you, Tillie.\"\n\nThe little maid gave me a cautious nod. Hope stared at me very seriously. \"I shall be very cross with you if you eat her, Mother.\" \n\nShe opened our little jewellery box and looked over her great grandmother's collection of silver medallions. Gently pulling on her silk gloves, she selected one carefully, avoiding even the slightest possibility of it touching her skin. She was young yet, but someday it would be of paramount importance, as the burns on my hand reminded me. The Curse didn't pass to every woman in the bloodline, it certainly hadn't passed to Marguerite, but Hope had the irrefutable signs already. \"This one feels right for her, what do you think, Mother?\"\n\nI smiled as she held it up for me to approve before she placed the protective medallion, a medallion of my own inherited silver, over Tillie's head. \"Saint Hubert? The Patron Saint of Hunters?\"\n\n\"She was a great help in finding you in the woods. I thought you would prefer to wake in bed than under a tree again, and she agreed most eagerly. She's not afraid of the dark at all. I held her hand to make sure you would let her alone.\"\n\nTillie fingered her medallion in wonder. Hope took her hand gently. \"Never take that off. Ever. Most especially never in the full of the moon. It is the only protection against the Loup-Garou, the only true ward against Mother's... hunger.\" \n\nStill holding Tillie's hand, she breathed in deeply and looked firmly into Tillie's eyes. \"As in a few years it will be the only proof against mine.\"\n\n*****\n\nThe moon-sickness had lost its grip on me once I had let it loose. My strength surged and I felt vital and fully alive. \n\nHope insisted on touring the grounds, cold though it was. Tillie, her enthrallment completely broken, was pleased to show us around.\n\nShe gripped Hope's hand tightly, certainly from fondness of Hope, but perhaps partly from fear of me. \n\nAs we walked we stared out at the forests, where, for just a day or two a month, I could let my curse loose with no fear of harming another, save perhaps deer. \n\nAs Father understood from living with my Mother, it was far, far easier to let it run, if only for a short time than to keep it caged for years as I had tried. Conall had loved me beyond reason and for him I would do anything, even suffer the miseries of suppressing my curse. But he was gone now, and I had to follow the best path for both Hope and I.\n\n\"Mother, watch where you step.\" Hope pointed down at the ground near my foot where a single brilliant purple crocus struggled from the grey dead grass.\n\nI bent down, gently brushing my fingertips across the vibrant purple petals, seeing as I did, the reassuring promise of many more beautiful flowers pushing up from the dormant ground.\n\nSpring was coming.\n\n*\n\nPost Production Notes\n\nThis was actually more difficult to write than most of what I write. There are conventions to Gothic Horror, many of which were not easy to write for me. I really struggled with the main character; I'm not a fan of weak or sickly characters and they are very much a convention in Gothic. So I had to find a way through this. I finally focused on why she could be so weak and it all fell together. \n\nIn the end this became a sort of written version of one of the old Hammer Studio \"bucket of blood productions\" many of us grew up with. The first half is all setting and atmospherics and the second half is full of blood, fire and fangs. I kind of picture Thomas being played by Peter Cushing, though you might prefer Christopher Lee. \n\nThanks again to the editors-all of whom are writers themselves and who donated time to help me on this. \n\nSpecial thank you to all of the readers -- this has built into a full blown effort from a simple dare, all because of the incredible encouragement and support we've gotten here. The Missus and I have had a great time with it. Speaking of which, The Missus has been amazing as usual -- this one was really a challenge and she really defined the plot and the characters from the beginning."
    ],
    "authorname": "Todd172",
    "tags": [
        "gothic",
        "hope",
        "horror",
        "isobel",
        "loup-garou",
        "tillie",
        "victorian",
        "werewolf",
        "witch"
    ],
    "category": "Erotic Horror",
    "url": "https://www.literotica.com/s/the-house-on-the-ridge"
}
{
    "title": "Clans of Luteri Bk. 02 Ch. 08-End",
    "pages": [
        "Hey, Everyone. So these are the final chapters of the two-book series. I hope you like it. I want to give a huge shout to Bellie444, without whom I wouldn't have posted this. Check out her writing. She's great. -Harp\n\nChapter Eight\n\n\"Corsaire!\" Aslin was yelling even before she reached the Aspens, riding straight into them, Ilian weaving and dodging trees, the horse's sides heaving, lathered and blowing. Ilian was exhausted. \"Corsaire!\"\n\nShe didn't see anybody, looking around frantically. The woods seemed empty. Corsaire Hold was another hour from the eastern border, but surely they would hear her soon. She penetrated deeper and deeper into the Aspens, still yelling. Nothing. Her voice was getting hoarse when Ilian bolted sideways to avoid collision with Deter, Ruthe crashing through the trees toward her. \n\nRuthe threw himself off his horse, running to her as she dismounted, staggering, coming to meet him. He grasped her upper arms, looking her over.\n\n\"Are you hurt? What's wrong?\" he said. \n\n\"Ruthe!\" she panted, looking all around them. \"Where's my father?\"\n\n\"He is riding in the woods behind us, not far. What has happened, Aslin?\"\n\nThe bond throbbed in her, pain, the wolf was in pain, pain like he was dying. She ground her teeth, getting control of herself, breathing.\n\n\"Duellan clan attacks Tavishi Hold. Kane stayed to protect me. Corsaire must come,\" she got out.\n\nIt was such a relief to tell him. Ruthe would come, her father, her clan would come and Kane would live, her wolf, they had to live, she could not exist without them. She waited for Ruthe to move, to react, anything. Ruthe just stared at her, not speaking. Did he understand her? \n\nHe slowly dropped her arms, stepping away from her. She gazed at him in disbelief. \n\n\"Ruthe! Tell them!\" she cried urgently.\n\nHe just stared at her. Something shifted in his eyes. \n\n\"No,\" Ruthe said, shaking his head. \"No, we will not. We will not fight for them. We will not come to the aid of Tavishi.\"\n\n\"Pelar wasn't killed by Corsaire, Ruthe! She was killed by Duellan!\"\n\nRuthe made a face at her, disbelief and then dismissal.\n\n\"It doesn't matter! Tavishi killed Anore of Corsaire. That's our feud with them.\"\n\n\"Kane's other form came to protect me. He attacked their line alone! He'll die!\"\n\nRuthe's fists clenched and he glared at her. \n\n\"I would protect you with my life, Aslin, but not him. Not them.\"\n\nShe approached him, her panic rising, clutching at his arm with both hands.\n\n\"You can't let this happen!\" she cried. \"You cannot just leave them to die!\"\n\n\"I can, and I have no difficulty with it,\" Ruthe said grimly, pulling away from her, turning to Deter. \"I will take you back to the hold, Aslin. You'll be safe there.\"\n\n\"Ruthe!\"\n\nHe made no sign, walking to Deter. She watched him go, watched him turn his back and just walk away from her, frustrated need and fear and the beginnings of hate rising in her, choking her. Corsaire weren't coming. They were abandoning her. Of course they were. It was all lies and posturing and they weren't hers and she wasn't theirs. Her eyes narrowed at him, her teeth coming up. \n\n\"Then I go to Tavishi!\" she said, breaking and running for Ilian. \n\n\"No!\" Ruthe cried behind her, and she heard the fear in his voice, coming after her, heard his running steps. \"Aslin!\"\n\nHis hand went to her arm, whirling her around. He jerked her toward him, his face close to hers.\n\n\"Listen to me! Duellan are too many. Tavishi cannot withstand them alone. That's why Kane sent you here, so that you would live. Corsaire are your clan, we will protect you now.\"\n\n\"My clan!\" she sneered, blind with tears. She struggled in his grasp but he held her effortlessly. \n\n\"Duellan will kill you, Aslin.\" \n\nShe was suddenly cold. She slowly drew herself up, her face becoming calm. She looked Ruthe down and up. Her voice was even when she spoke.\n\n\"I know that. Let go of me. I ride to die with my clan. It's my right.\"\n\nHe stared at her. Denial came to his eyes. Then desperation, but the way he dropped her arm told her he couldn't stop her. She backed away warily toward Ilian, not trusting him, her hand going to rest on the dagger at her waist. Ruthe's eyes followed her hand, narrowing, then to her face. \n\nHe didn't move, his fists clenched, but he watched her closely, his jaw working. Then he paced once, side-to-side, running his hand through his hair. She had to get to Ilian. She turned, walking quickly to the horse.\n\n\"I won't let you do this,\" Ruthe suddenly said, striding toward her quickly. \"You're coming with me.\"\n\n\"Daughter.\"\n\nShe turned, Ruthe did. Her father was on his horse Enith, two mounted Corsaire clan warriors behind him, watching. \n\n\"Father,\" Aslin said, turning to face him but staying near Ilian. They wouldn't keep her here, she would fight them, Ilian would. She began to breathe fast, looking at her father's face. She could hardly speak, could hardly breathe, the words coming in bursts, her throat closing around them. \"Duellan attack Tavishi Hold. Please. If you love me. My bond. His other form. They're hurting him, I can feel his pain, but he's still alive. Help them, please.\"\n\nShe waited, her shoulders shaking with silent sobs, her hand on the saddle, ready to mount Ilian when he refused. Kavini turned in profile to the men behind him.\n\n\"Corsaire clan rides to the aid of Tavishi Hold,\" he said.\n\nBoth the men wheeled their horses around immediately and left, riding hard for Corsaire Hold. Aslin sagged against Ilian, the tears coming hot and fast, now in relief. \n\nRuthe immediately went to her father.\n\n\"We ride to their aid?\" he cried in outrage. \n\n\"This is the trap we set for ourselves when I rode into Tavishi Hall fifteen years ago with a truce band on my arm to ask for an oath,\" Kavini answered him. \"Now we fall into it.\"\n\nRuthe appeared to force himself to calm, breathing, returning to her father. He stepped closer, his voice low and urgent, glancing at Aslin.\n\n\"Let me take her to the caves, High Lord, if she is why you do this. She is clan, she is my cousin and I will protect her. I will keep her there with me where she is safe. Nobody will see us. She will not leave, I swear it, I will take the dishonor, you do not have to say you knew anything about it. I will free her the moment we get word that it is over. But don't send us to Tavishi's aid. Leave them! This attack is a gift! Duellan will kill them and we will be rid of the feud that way!\"\n\nHer father just stared at him. Ruthe stared back and then shook his head at whatever he saw in Kavini's face. Ruthe made a violent motion of rejection, his face twisting, tears of rage coming to his eyes.\n\n\"They are Tavishi!\" \n\nKavini walked to him and took Ruthe's head in his hands and pulled him forward, pressing his forehead to the other man's, their long dark hair mingling. Ruthe relaxed against him, choking his breath out once, his jaw clenched.\n\n\"The paths of honor and vengeance part here, Ruthe,\" Kavini said to him. \"And we must take one or the other. Aslin is within her rights to ride to die with her clan if that is what she decides, and by our laws we cannot stop her. She is within her rights to call on her clan for battle in defense of her bond and by our laws we cannot fail her. To do otherwise, to choose vengeance, would destroy us. You know this, son of my heart. Corsaire must choose honor.\"\n\n#\n\nKane woke. Everything hurt, but his side most of all. Warm air blew onto his left cheek. He reached with his arm, his side shooting pain, and pushed something heavy away. It returned, more warm air. He opened his eyes, gummy, the world coming into view, blurred.\n\nHe was on his back, his head turned to the side. He shifted his eyes a little. Grass, dry and brown. Something he couldn't figure. A man's hand, just his hand, a ring on the smallest finger. Kane turned his head and a stab of pain through it made him gag weakly. A black blur obscured the sky. Pain. Shai, it hurt so much. \n\n#\n\nKane woke. Warm breath. Something was in his eyes, wet and sticky. He blinked quickly, focusing, staring, and saw a large dark liquid eye staring back. \n\nShaol. \n\nHis vision blurred again, darkness taking him, but he couldn't remember where Aslin was. \n\n#\n\nKane startled awake, panicking, trying to remember where Aslin was. He felt for the bond. It was alive, faint with distance. He had sent her on Ilian to Corsaire Hold, telling the horse to defend her, to run. \n\nRelief went through him. Duellan clan hadn't caught her. She was safe.\n\nTavishi. His clan. They would have no warning.\n\nHe rolled onto his side, curling up, his hand going where it hurt the most on the other side, encountering something cold and hard and thin, jostling it. He cried out and then blew his breath, panting in pain, rolling onto his back again, lifting his head to look down at himself. \n\nHe was naked. There was a gash across his chest, bleeding, another on his arm. There was an arrow in his right side in his lower ribs, in the bone, another in his right thigh. He raised his head more and cried out, his hand going to his head, blinding pain, coming back shaking with blood, his hand covered in it, so much blood, his breath stuttering. It was in his eyes. He slowly brought his elbow to his side, avoiding the arrow, trying to get his breath. His ribs were broken. \n\nHe wondered briefly how many Duellan clan lay dead around him. It looked like he had taken about a quarter of them. Duellan would still be too much for Tavishi. \n\nThey hadn't expected to stumble into his beast directly in front of them on the grassy plain. He had taken them by surprise. The Luterian wolves of the High Lords didn't go into battle, not ever. The beasts didn't understand that. But his beast had understood the direct threat to Aslin just fine, and it hadn't mattered even a little to the animal that he faced a line of mounted Luterian warriors, or what standard they flew. All that mattered was defended his bond.\n\nThey'd rolled over him and left his beast for dead. He should be dead. Kane felt dead. \n\nHe was losing consciousness, his head falling back. Kane grunted with effort, shaking his head to clear it, sending pain through it in an explosion of light. He fell back and didn't feel himself hit the ground. \n\n#\n\nShaol's breath on his face. Kane was on his back. He opened his eyes, reaching his arms around the horse's neck, lacing his fingers in the horse's mane. Shaol raised his head steadily and Kane cried out, the movement stretching his side as he was brought up. He couldn't breathe, short hitches. His leg with the arrow collapsed under him as he tried to stand. He held on, afraid to let go and fall, hanging off of Shaol's neck limply as sparks lit behind his eyes and crackled in tiny bursts he watched.\n\nHe slid his leg and got it under him, trying not to put weight on it. He grasped Shaol's neck, making his way down in painful increments, trying to breathe, leaning on the horse's shoulder. It took him forever to reach the horse's side, holding on to whatever he could. He missed his grasp and jolted, straight through his head to his ribs to his leg, so many textures and layers of hurt, the arrow in his side wavering. \n\nHis stomach heaved and he swallowed heavily, and again, acid rising. Shaol stood absolutely still. \n\nKane looked at the stirrup in front of him and gave a wheeze of weak laughter, losing all his breath, sucking it in slowly. Shaol had never seemed so tall. He threw his foot into it, his bad leg collapsing, grabbing the saddle's edge with one hand as he twisted to avoid the arrows bumping and his vision went black at the corners. He hung off of it, panting. \n\nHe gathered and pushed and heaved himself up and onto the horse, yelling with the pain, his voice hoarse, ending up half on his good side in the saddle, the arrow in his side jostling again, sending agony through him. He slowly brought his leg over, bit by bit, whimpering, trying to leverage himself, to get the height he needed not to jostle the arrow again. His leg finally fell limply onto the other side of Shaol.\n\nHe tried to straighten in the saddle. He couldn't get enough air. His head stabbed and dizziness hit him and he lost all sense of himself, his balance gone. Shaol shifted, compensating for his slide and Kane jerked awake, leaning himself to where he needed to be. \n\nCentered, his head bowed forward, canted, his upper body curling around his side. His forehead touched the pommel, leaving a smear of blood, and he jerked back. His hair hung in his face as he dipped again. \n\nHe realized Shaol wasn't moving forward, was just standing there, and then he forgot, drifting. Shaol stood patiently. \n\nHe would take Aslin walking at dawn in her cloak. Aslin in morning light through the window, dark hair over her pale shoulders. She woke, her eyes opening. They were dark, such dark eyes. She smiled at him. He jerked in the saddle.\n\n\"Home, Shaol,\" Kane croaked, unable to whistle.\n\nShaol moved forward, the thuds of his huge hooves on the grass, every step sending pain through Kane's side, his leg, his head. \n\nThe horse picked his way through Duellan bodies and parts of bodies, stepping on a man's arm, who moved. Shaol brought his back leg up high as he stepped and then brought it sharply behind him, kicking the man in the head as he walked over him, his ears flattening briefly, his teeth clacking. \n\n#\n\nThe smell of smoke. Kane looked through his hair that was hanging in front of him. Dead Luterian sheep Duellan had left, bloody forms Shaol passed, a farm on fire. Tavishi on the ground in front of it, two men and a woman, Duellan arrows in them. A Tavishi man was still hiding behind a cart, a child with him. They stared at him as he passed. \n\nKane looked. Two men dead, farmers, two Tavishi warriors on the ground also dead defending them, sword wounds, their warhorses standing over them. Kane stared at their blank faces as Shaol went around the horses warily. Milos and Bran. Kane's vision blurred as he looked at the horizon.\n\nMore smoke, more fire in the grasslands. Shaol walked the trampled grass, riding the wake of the Duellan warriors as Kane's head dropped forward again. \n\n#\n\nKane woke on Shaol and in pain. His head was hanging in front of him. He raised it, wincing, looking ahead as Shaol walked down the path. Kane stopped the horse. He could see down into Tavishi Hold.\n\nThe Tavishi gates were twisted and broken open. \n\nThe village was empty, bodies of Duellan and Tavishi clan warriors strewn on the cobbled streets. He saw Davit just past the gates, the man dead on his back, his throat cut. Davit, Kane's mind full of the man, memories crowding him. He pushed them away.\n\nThey would have pulled the villagers into the castle while Duellan broke the gates. Kane's eyes raised to the castle. In front of it writhed a mass of Duellan colors, yellow and black, so many of them, Luterian warhorses snapping their teeth and screaming and stomping, the sounds faint from here. Tavishi warriors in gold and brown fought back as they had obviously fought them from the gates. He could see his father, fighting. \n\nKane's beast had taken out many of Duellan's numbers, but Tavishi would still soon be overcome, he could see that. Duellan were to many. They would all be killed, and behind them were those they protected. Helene. All of them. \n\n\"Skit, Shaol,\" he muttered, the horse in motion under him, Kane going to die with his clan. Kane urged him faster, straightening to the degree he could, a trot and then a canter down the winding path, his vision wavering, motion being pain. He couldn't see, sweat in his eyes, or more blood. \n\nHe looked ahead and slowed Shaol, squinting, not understanding. His vision wavered as he watched Luterian warhorses sailing high over the lowest spread of the ruins of the Tavishi gate from the main road, jumping over it. \n\nCorsaire clan colors, a standard of Aspen trees, Kavini at their head, Ruthe on Deter beside him. Corsaire warriors at Tavishi Hold.\n\nKane stared, Shaol still in motion as the Corsaire figures raced straight up the village streets toward the battle. Then Shaol jolted going down the decline and the colors faded into a blur, the dizziness coming so fast. Kane's head fell back and Shaol missed his step, feeling his rider going.\n\nFor the first time since he had learned to ride as a boy, Kane fell off his horse. He landed with a dull thud on his back and was still, silence in the forest.\n\nShaol slowed to a walk and came around slowly, walking to stand over his rider, blowing above his leg with the arrow, his side with the other arrow, then his head, then his face. His rider didn't move. Shaol tossed his head, pawing at the ground next to him. The horse finally stood, raising his head, eyes alert and roaming, his ears rotating to sound, waiting.\n\n#\n\nKane woke. Everything hurt, but his side most of all. He was on his back. His eyes opened. He was in a cot in Tavishi Castle, in the Healer's Hall. He turned his head to his right. Aslin was asleep on a far cot, her dark hair falling across her cheek. Kane raised his head a little to see her better, relief washing through him, and then let it fall as pain laced through his side. He lay there, breathing, looking at the ceiling again. \n\n\"The Tavishi healers say they think you'll live, but I'm still holding out for fever,\" he heard from his left. \"They found you where you fell off your horse at a safe distance from the battle. Very heroic of you, I must say. Naked again, I have to point out. It makes me think you are a pervert. My cousin hasn't left your side for two days, and this is the first real sleep she's gotten, so don't be self-serving and wake her if you can possibly help yourself.\"\n\nKane turned his head. He could just see Ruthe leaning against the wall, his leg crooked, his dagger out. \n\nRuthe began to sharpen it. Kane looked away, staring up at the wood rafters, breathing shallowly. Shai, his side hurt. He glanced at Ruthe again, having to raise his head a little to see him better.\n\nAslin had made the request and Corsaire had answered, coming to the aid of Tavishi on her behalf, defending her bond. Kane almost couldn't believe it, but that was the only possible explanation. \n\n\"I hope you know that I still hate you,\" Ruthe said, not looking at him, the shrik of his knife on the stone. \"I have always hated you. Not just that you are Tavishi, not only for the feud.\" Ruthe looked up long enough to point the tip of the knife at him. \"You, Kane, the person.\" \n\nRuthe looked down again, continuing to sharpen his knife.\n\n\"I hate that you go prancing all over the world dragging your Luterian warhorse with you. I fear you will be killed like the careless person you are and he will fall into the hands of foreigners who will breed him with lesser horses. I hate that you found my pretty cousin in this Alverian land of savages, that I wasn't the one to protect her, that she must suffer you. And I find you to be an arrogant and selfish and irresponsible person, Kane, and you think you are funny when you are not.\"\n\nKane released his head back with a grunt, breathing.\n\n\"I had no idea you like me so much, Ruthe,\" he said. \"I am flattered.\"\n\nRuthe glared at him.\n\n\"This is what I am talking about, you believe you are amusing,\" he retorted.\n\nKane laughed weakly and then groaned, his hand going to his side.\n\n\"I hope it hurts,\" Ruthe muttered.\n\nKane gave another small chuff of laughter.\n\n\"It does, Ruthe. I can describe the pain if it would please you.\"\n\n\"Kane?\" a voice said from the doorway. \"You're awake?\"\n\n\"Helene,\" Kane responded, trying to see her and falling back again, pulling in shallow breaths, relieved to know she was all right. \"You're just in time, before this one bores me to death despite the healer's efforts.\"\n\nHelene came in, looking like their mother Aletha, so graceful, in a dress as green as her eyes, her shoulders bared, long wavy hair loose and warmed in the light from the window, two strands drawn away from her face, her lithe form. Kane smiled to see her. ",
        "Then Kane's eyes were drawn to Ruthe, who had put his knife away and left his careless pose by the wall and was staring at her, looking so stupid in his face as if his warhorse had thrown and then trampled him and he was just finding his feet again.\n\n\"Go away, Helene,\" Kane said quickly, looking at him.\n\nBut when he turned his head, Helene was looking back at Ruthe, taking in the Corsaire warrior's face, his long dark hair and eyes, the breadth of his shoulders, her eyes sweeping him and then dropping, long lashes, suddenly seeming shy.\n\n\"I am dead,\" Kane said bleakly to the ceiling. \"I am dead and I have gone to the place where the Alverian sky god tortures evil men for eternity.\"\n\n\"You're Helene?\" Ruthe said as if Kane hadn't spoken.\n\n\"I am,\" she answered. \n\n\"She was just leaving,\" Kane insisted. \"Helene, you were just leaving.\"\n\n\"What, Kane?\" Helene said, her cheeks flushing. \"Am I not allowed to greet our allies? They did save our lives.\"\n\nKane tried to raise his head again, falling back, gaping at her.\n\n\"Am I not injured enough for you?\" he said indignantly.\n\nRuthe strode to stand in front of her, slowly looking at her down and up. \n\n\"Don't mind him, Helene,\" Ruthe said, smiling at her lazily. \"The Tavishi is ill with fever, I hope, and he has hit his head, I think, and he was never very bright to begin with.\"\n\nHelene's mouth actually twitched\n\n\"Helene!\" Kane cried, seeing it.\n\n\"I'm sorry, Kane,\" she said, looking down, the dimples in her cheeks deepening. \n\nRuthe's eyes were roaming her like he was fascinated. He stepped closer, his head tipping to the side to see her face. She glanced up, her eyes lighting with interest, and then at Kane. \n\nKane hesitated. Ruthe turned and looked at him. He met the man's eyes. \n\n\"Helene, this is Ruthe of Corsaire,\" Kane said, his voice neutral. \n\nThey both watched as Helene froze, the color leaving her cheeks. She swallowed. She looked up at the Corsaire warrior.\n\n\"You're Ruthe?\" she said.\n\nRuthe's face had become grim, seeing her reaction. He nodded once. \n\n\"I am.\"\n\nHelene backed away from him toward the door. She turned in the doorway, glancing at Ruthe again at the threshold. He was staring back at her. She dragged her eyes away from him.\n\n\"I will tell the healers you are awake, Kane,\" she said. \"They'll bring something for the pain.\"\n\nShe gave one last glance at Ruthe and left. Ruthe stared at the doorway for a long moment after she was gone. Then he walked to the window, looking out.\n\n\"Maele?\" Ruthe asked him.\n\n\"Yes,\" Kane answered, his voice even. \"He offered her his oath when they were younger. Helene didn't accept. He was only ever a friend to her. But after what happened at the festival with\u2014.\"\n\nKane stopped. He still couldn't say that man's name. Ruthe was looking out the window.\n\n\"With Veris of Corsaire,\" Ruth finished for him, his voice low. \"I hope he died badly, Tavishi, and that it took a very long time.\"\n\n\"I was not inclined to be merciful,\" Kane said, deciding not to relive that horror at this moment. \"After we retrieved her, Maele was the only one Helene would have near her. Not me, not our father. She couldn't speak. She wouldn't come out of her rooms. Maele used to carve animals for her. She'd open her window and line them up, sitting there looking out, waiting for him to return. Maele had told me that morning he'd promised her a Luterian horse carved from black wenge wood. I told him to wait for me. I didn't know he'd gone alone to find some to carve for her until it was too late.\" \n\nRuthe reached into the pocket of his cloak and pulled out something small. Kane watched as the man looked at it in his hand. Ruthe finally placed it on the windowsill. A small black Luterian horse, carved from wenge wood, unfinished. Over fifteen years Ruthe must have carried it. \n\n\"You'll maybe give that to her, Tavishi,\" Ruthe said, leaving him. \n\n#\n\nAslin opened the door and stepped out into the Tavishi Healer's Hall to the garden, the scent of herbs, small pathways. Kane was finally asleep, at her urging taking the tonic for pain the healers gave him. She drew a deep breath, the fragrance soothing. She saw Ruthe sitting on the bench on the winding path. Aslin hesitated. They hadn't spoken since the forest in Corsaire territory. She went and joined him, sitting next to him, putting her hands on her lap. They sat in silence. \n\n\"When you become a warrior for your clan, they tell you about it,\" Ruthe finally said without looking at her. \"Beshrat. Every Luterian warrior must face it in his life. The crisis when a person either chooses what is honorable or what is wanted. It is Shai's test of faith for us. Sometimes there is no right answer, but just a choice, as when the Tavishi protected you, putting you ahead of his clan and dishonoring himself. That was the answer he gave to Shai, and I don't think she disapproved. I never thought that I would fail in the face of mine.\"\n\n\"You didn't fail, Ruthe\u2014,\" she began. \n\nRuthe looked at her, his face bitter, and she stopped. \n\n\"If Kavini hadn't stopped me, I would have assaulted you, Aslin, and dragged you to a cave out of the sight of others for the shame of the act and restrained you until Tavishi were defeated and those you loved were dead. I would have told myself I was protecting you, keeping you safe, that it was best for our clan. I would not have listened to you. If you fought me too hard, I might have hurt you, and I would have commanded Deter to hurt Ilian if you had called on her to defend you.\"\n\nAslin's heart was pounding. She couldn't look away from him. \n\n\"I was ready to deny you my body in defense of your bond, which is your right to ask of me,\" he continued. \"I was ready to deny you your freedom and your right to die with your clan. Those were my intentions, those dark deeds, because I couldn't let go of my hate. I failed you badly. I failed my clan, and my High Lord, and myself.\"\n\nThere was pain in his voice. He reached out and touched her cheek.\n\n\"And I would have done this to you, my pretty cousin, broken your trust, who has already endured so much from men. I saw the hate in your eyes. I hope you can forgive me someday, Aslin.\"\n\nRuthe got up and left her, striding out of the gardens, her eyes on his back.\n\n#\n\nKane lay in their rooms, in the bed, on his back, unable to draw a full breath, hot and then cold, itchy and in pain, restless and so frustrated, watching the Corsaire. It had been two days since he'd woken in the Healer's Hall, four days since Duellan attacked. He'd spoken with his father before they'd carried him up here in a litter, Munse apologizing repeatedly when he was jostled. He had been trapped here ever since, and Aslin with him. \n\nTavishi and Corsaire had declared peace. Kavini and Ruthe would return to Tavishi Hall in eight days. Metas, the Duellan High Lord, was in the Tavishi dungeon mourning his son and heir, Lyle, dead on the field, those warriors of the Duellan clan who had not been killed also in the dungeons. \n\nThe tonic the healers gave Kane for pain made him groggy and he'd thrown it up, so he refused it. He shifted irritably, sending a jab through his leg.\n\nHe could use a distraction, at the very least. The Corsaire could ease him for pity, if nothing else. \n\nThe healers had advised him to rest on his back, only a small prop, and he wasn't allowed to move. Later they would bring a man to help him to walk. They'd told Aslin this as well and she wouldn't fuck him, refused him for his own health. \n\nThe fire was large and warm, the only light in the room. The Corsaire was lying back in the steaming bath in front of it, one leg up so he saw her knee, her other foot braced on the edge\u2014she had the prettiest feet\u2014her hair over the side in a great silky dark fall that trailed on the floor, just her forehead visible. \n\nAs he watched, she disappeared, dunking her head under, pulling her hair into the water. She came out of the water tits first, her head back, streaming. She washed her face and slowly stood up, wet all over in the firelight, pulling her hair over her shoulder and beginning to wash it, starting at the ends.\n\nHer breasts were full and firm and jiggling, her nipples rising when she brought her arms up to massage her hair, her belly so sweet, the shock of dark hair between her pale thighs, her hips bliche. She was humming softly, not looking at him. She began to wash her body, his eyes following her slippery hands over her belly, between her legs, her pink nipples hard and disappearing and popping out from behind them, slick with the soap. \n\nIt was maddening he was so aroused watching her. He grunted with frustration. She glanced at him. She turned her back to him as if this would give him some relief from the sight of her. As if the back of her were less interesting to him. \n\nHis eyes ran over her delicate pale shoulders and down to the deep dip of her waist, her round butt. She turned back around and picked up the bowl, putting it into the water, bringing it up and rinsing herself, tilting her head back, the water running over her hair and down her shoulders and between her breasts and down her belly between her legs, and she did this repeatedly.\n\nShe reached for a small jar of oil and the razor, glancing at him and frowning, but he just scowled back at her. She poured some of the oil into her hand, rubbing it all over her pussy. She sat on the edge of the tub and sat facing the other way, her leg propped, looking down where he couldn't see, shaving there carefully, his cock aching and throbbing. \n\nShe finally got back into the tub and rinsed, turning her back and bending over to get her towel, going straight down as he knew she would, her pussy coming into view, a dark pink naked invitation in this light, flashing between her pale thighs. \n\n\"Are you trying to torture me?\" he said hoarsely.\n\nShe straightened quickly, turning around and holding the towel in front of her and staring at him indignantly like she hadn't just given him a display straight out of a Luterian brothel, her cheeks flushed with the warm water, full lips and dark eyes. His cock jumped. \n\n\"There's nowhere else for me to bathe! I have to get clean, Kane. You don't have to look at me,\" she pointed out, turning side on to him in the firelight that danced over her warm pale skin, giving him her silhouette, bending down a little to wring out her dark hair, starting from the top, her tits peeking out from behind her arm, jiggling again. \n\nHe didn't believe for a moment she didn't know what she was doing to him. She began to dry herself. He scoffed. Like it was that easy.\n\n\"There's two choices when you're naked near me,\" he answered, following the towel's path with his eyes. \"There's watching you and there's dead.\"\n\n\"Well, I'd rather it wasn't the latter,\" she said with a sniff, stepping out of the tub and reaching for her wrap. \n\nShe pulled it around her, still a little damp, the garment wonderfully short, the material clinging to her nipples, her round butt when she turned around to hang the towel over the side of the tub. She tied the wrap. \n\n\"Come here, Corsaire,\" he invited, holding out his hand. \n\nShe shook her head, keeping her distance, going around the bed. She was careful since he'd caught her last time.\n\n\"We're not doing sex.\"\n\n\"Why not?\" he cried, dropping his hand.\n\nShe gaped at him, gesturing.\n\n\"You're lying there with bandages all over you. You were cut open. Your head was split! Your ribs were broken! The healers had to pull arrows out of your body!\"\n\nHe resisted the obvious retort, that there was nothing wrong with his cock, Shai's mercy. Her face was flushed, breathing. He eyed her. He just needed her in range. Persuasion. \n\n\"I heal very fast, Corsaire. All my bloodline do. It's a part of our gift. Look, come here, I'll show you how much better my leg is.\"\n\n\"The healers said you should rest.\"\n\n\"I've rested! I've done nothing but rest!\" \n\n\"For two days!\"\n\n\"It's been four.\"\n\n\"You were unconscious for two,\" she argued.\n\n\"That's sleeping!\"\n\nShe pursed her lips and walking to her nightdress. \n\n\"No.\" \n\nHe threw his head back onto the pillow. He turned his head and watched her as she drew off the wrap, his eyes roaming over her, the nightdress coming over her head. He made a sharp noise of disappointment. \n\nShe took up her comb, running it through her hair repeatedly, her back to him.\n\n\"You could give me another bed bath,\" he suggested slyly. \n\nShe turned and frowned at him accusingly. \n\n\"Not again, not after what happened last time. Do you want me to read to you?\" she said, pitying him but not enough.\n\n\"Yes. Sit by me and read to me, Corsaire,\" he said immediately, patting the place next to him.\n\nShe got up and moved to the table, several books there. She sat.\n\n\"What would you like me to read?\" \n\n\"I don't want it,\" he said, turning his face away, his ribs hurting, his head. \n\nShe stared at him.\n\n\"I can't believe you're sulking.\"\n\n\"I'm resting,\" he snarled, closing his eyes.\n\n#\n\n\"Hello Brill,\" Aslin said, smiling at the woman.\n\nBrill looked up from folding bandages, a large pot over the fire with a huge wood stick to stir it, more bandages in it, some hanging on a line to dry, steam in the room. Brill's brown curly hair was drifting around her face where it had come from her braid. Aslin reached and began to fold the clean and dry bandages with her.\n\n\"Aslin, hello. Thank you. How is Kane? No fever?\"\n\n\"None. He's well,\" Aslin replied casually. \"He's a little restless.\"\n\n\"That's to be expected.\"\n\nAslin nodded. They folded for awhile, Brill glancing at her curiously. \n\n\"Actually, he's awful and relentless,\" Aslin confessed. \n\nBrill laughed. \n\n\"After only five days?\"\n\n\"Has it only been five?\" Aslin said desperately, Brill laughing again. \n\n\"He's the worst patient,\" Brill nodded. \"I've had to tie that one down before. Lucky his bloodline heals so fast. Don't mind him.\"\n\nThey folded together, Brill bringing the pile to put away and taking down others that were dry. Aslin began to fold beside her again. Brill glanced at her curiously. \n\n\"I appreciate the help you've given the healers, Aslin. Did you want something?\"\n\nAslin looked at the bandages in her hand a little blankly and then set them down, looking at Brill.\n\n\"You said that Kane should rest and not move around too much. Could you be more specific?\"\n\nBrill's eyebrows went up.\n\n\"Has Munse been helping him to walk? He'll heal faster that way, and it will prevent thickening in his blood from lying still for so long.\"\n\n\"Munse did come,\" Aslin said, taking up another bandage and folding it. \"But then he wouldn't anymore, so I begged Stavin to come and he did, but when he left yesterday he told Kane that he wasn't coming back and that, 'If I wanted to be abused I'd go to a Luterian brothel and pay to have it done by someone prettier than you.'\"\n\nBrill snorted.\n\n\"I'll send Loche. The man doesn't listen to anyone. I give my stubborn patients to him.\"\n\n\"Is there anything he absolutely shouldn't do?\" Aslin asked. \n\n\"Well, he's shouldn't run or ride or fight, certainly. What does he want to do?\"\n\nAslin looked down, her cheeks warming. Brill looked at her for a moment and then burst into laughter.\n\n\"The general rule with his bloodline is that if he wants it that badly, he's well enough, Aslin,\" the woman said, still laughing, reaching for another bandage. \n\nThe healer stopped her in the doorway, Aslin's cheeks entirely flushed.\n\n\"Not too enthusiastically, mind you.\"\n\n\"Thank you, Brill.\"\n\n#\n\nKane heard the front door to their rooms open and close. He glared at the door to the bedchamber as the Corsaire came through it. He'd woken at dawn and woken her and she'd refused him again, and then woken a second time to find her gone. She'd been away forever, leaving him here alone with his pain. \n\nShe closed the door behind her, leaning against it, looking at him. He turned his face away from her, his gaze going to the window. \n\n\"Are you hungry?\" she asked him, trying to mollify him again. \"I've asked Will to bring up some food.\"\n\n\"No,\" he said shortly, not looking at her.\n\nHe pushed the coverlet off himself irritably, too warm in the room, and then a moment later he'd be too cold. His body was still restless, itching and achy and just lying here for days made him so miserable he wanted to toss himself out of the window's height just to end it. \n\nHe realized the Corsaire hadn't moved, still leaning against the door looking at him. He looked at her and scowled. \n\n\"What are you doing?\" he said rudely, ready to fight with her again, anything to distract himself.\n\nHe knew he was being entirely unreasonable and unpleasant and he didn't care. She drew a deep breath, letting it out. Her hands went to the ties of her tunic as his frown turned to confusion. She began to undo them.\n\n\"Are you going to take another bath?\" he sneered. \n\n\"No,\" she said, reaching down and taking off her slippers, the ties to the dress trailing. \n\nHope was growing in him as she set them beside the door neatly and returned to the dress, slowly unwrapping it, her shoulders revealed first, then her belly and breasts. Now she was just in the pants, straightening the dress and walking to put it neatly over the chair. She removed the pants, going down, stepping out of them, dark hair and pale thighs. Her hands went to her hair, loosening it until it fell all around her in silky waves. Kane sat up a little, his ribs twinging. \n\n\"I'm sorry I've been such a trial to you, Aslin,\" he said quickly in case she remembered his behavior and changed her mind. \n\nShe drew a deep breath again, shooting him a look, and went to the basin, walking naked, his eyes all over her, his cock hard. Her hips swayed. She brought the basin to his bedside, her tits above it, bending to set it down. She brought the water and poured it in, getting a cloth. She walked to stand beside him, near to him as she hadn't been for days. \n\nHe reached his left hand, touching her belly, wrapping his hand at her hip, squeezing a little. Soft and warm, Shai, she was soft. She let him, taking up the cloth and wetting it, ringing it for excess, then beginning with his other hand, moving to his arm, and then the other. She put it on his chest, washing him there gently and slow. \n\n\"It's not too cold?\" she said softly. \"I can get some more hot water.\"\n\n\"Don't go anywhere, Corsaire,\" he said hoarsely. \n\nHe ran his hand up her waist under her breast, cupping it as she ran the cloth over his neck and back to his chest, making her way down, the water feeling cool, good. She still didn't stop him.\n\nShe rinsed the cloth again, ringing it, drawing it lower to his belly, his cock raising the coverlet under that. He found her nipple as she leaned over him, squeezing. He'd wanted them under his fingers, his breathing deep. Her hips squirmed a little, his eyes between her legs to the small crease he could see there, perfect naked lips. \n\nShe drew the coverlet back completely, his cock exposed, his leg with the bandage. She rinsed the cloth again and began at his legs, bringing it up to his thighs, washing all around him as his cock jumped and throbbed. His hand went to her other nipple, pinching from under it, tugging. She squirmed more with that, her breath catching. Then she took the cloth and let it drag over his cock. She put her hand over that and began to move it on him, from base to tip and back again. \n\nKane closed his eyes, his breath releasing, his hips rocking as she continued. She stopped and got on the bed carefully until she was kneeling between his legs, Kane moving them. Her hand cupped his balls, the other holding his cock. She touched the bond and leaned down, taking him into her mouth and then pushing him deep into her throat.\n\nYes, her cousins had told her how to do this. \n\nShai, the pleasure. It was immediate, overwhelming. He opened the bond, feeling her arousal to do this, feeling her reacting to his response. ",
        "He rocked his hips gently, her mouth drawing him in, the edge of his pleasure on him fast. He was panting hard, grunting as she pushed him deep again, pulling out. She adjusted, getting her breath. Then she pushed him in, shallow, long strokes, the head of his cock sometimes slipping into her throat, his hand going to the back of her head gently, her silky hair. She took him deep in her throat again, gagging a little, and then more, swallowing around him.\n\n\"I'm going to\u2014.\"\n\nHe came, rising under her mouth. \n\n\"Good, that's good,\" he choked out.\n\nHis hand grasped her hair as she drew him out and pushed him in again deep in her throat, swallowing as he spilled more into her, crying out, his hips thrusting and shuddering, his cock pulsing. \n\nHis hand gentled on the back of her head as he thrust lightly a last time, his heart hammering, smaller shocks of pleasure still going through him. He finally stilled. She drew him out of her mouth into her hand, releasing him and sitting back on her heels. He looked at her, his breathing fast. \n\n\"I didn't hurt you?\" she said in a moment. \n\nHe snorted a little, shaking his head, trying to get his breathing under control. She raised herself, scooting back off the bed, but he caught her arm, finding her hand, pulling her. She resisted for a moment and then she was over him, her arms braced on each side, straddling him, not touching any of him. \n\n\"Oh no, Corsaire. I need a moment. You won't hurt me.\"\n\nAwhile later, he heard a muffled knock at the front door. Aslin startled, her eyes opening above him, his mouth on her nipples. They were red and jutting, sensitive, his teeth scraping a hot bud, his fingers on her pussy. \n\n\"Leave it, Will!\" he drew back and yelled, not even caring if the man heard, returning to her. \n\n#\n\nFive days later, he and Aslin walked into Tavishi Hall. Kane had a prop for his leg, the muscles still weak. Kavini and Ruthe had come this morning. He never thought he would see Corsaire warriors in Tavishi Hall peacefully. They congregated in their own area, Tavishi grouped across from them. Kavini and his father Bache sat at a table in the center of the room opposite one another, everyone doing their best not to glare at one another. \n\nKane's eyes roamed, finding Ruthe against a far wall, leaning on it, looking at him, neutral. The man straightened and looked past him. Kane turned to see Helene come in, saw her eyes search and find Ruthe, skittering away.\n\nMunse gestured to a chair, but Kane shook his head. He would stand while he could endure it. Aslin crossed the invisible line between the two clans to her father and greeted him. He smiled at her and rose, embracing her. \n\nThen Aslin went directly to Ruthe, who looked surprised. She put her hand on his arm, leaned in and kissed him on the cheek. When she withdrew, his mouth crooked at her. She walked back to Kane, standing near him, giving a concerned glance at his leg. \n\nKane looked to the doorway when a Corsaire man arrived, nodding to Kavini. Bache rose as Kavini did, Kavini speaking first.\n\n\"Thank you for having us at Tavishi Hold,\" Kavini said, his face expressionless. \"Bache, High Lord of Tavishi clan, our allies.\"\n\n\"You are welcome here, Kavini, High Lord of Corsaire, our allies,\" Bache replied, equally expressionless.\n\nThey said the words, neither of them giving any indication what they felt. Then Kavini addressed the Hall. \n\n\"When I learned that my daughter still lived,\" Kavini said. \"I contacted Ilse of the Siblin, their record keepers. Ilse found the entry for a ship that left Minsk for Caska fifteen years ago on the day I was told my oath and my daughter died. That ship was the Prisha, and one of the ports at which it stopped was Alveria. \n\nI have been waiting for that ship to return to port. It landed yesterday. I had the Shipmaster retrieved and brought to me here at Tavishi Hold so that he could answer to me, to my clan, and to our allies.\"\n\nKavini turned to the doorway and gestured. Two Corsaire warriors came into the hall with an older man in strange clothing between them. Caska, north of Alveria in the common trade route, although an entirely different people. The man had a long jacket with huge buttons, boots, a furry square hat on his head, his hands bound. Behind him walked Ilse. \n\nThe man with the furry hat struggled against the Corsaire warriors, arguing his way to a place in front of the High Lords, babbling at the Siblin man, the Siblin ignoring him. The Shipmaster was older, white hair and a stocky body, deep eyes, a long mustache. Ilse was young-looking, though he was probably well over one hundred, well made, broad shoulders, tall and blonde, coat tails and a felt top hat. Ilse came with his brother, a dark-haired man dressed the same way, also big. Siblin brothers shared everything, including their women.\n\nKavini spoke to the Siblin man.\n\n\"Ilse Far Eyes. I thank you for your help. We want to ask questions of the Caskian Shipmaster.\"\n\nIlse bowed. Siblin were a wonder with languages, being nomadic, picking them up effortlessly. Kavini looked at the Shipmaster, who was glancing all around at the Luterians around him, openly terrified. \n\n\"Fifteen years ago,\" Kavini said to the Shipmaster, who stared at him blankly, \"we believe a dark-haired Luterian girl of around five years old boarded as a passenger on the Prisha. She was taken to Alveria.\"\n\nIlse translated Kavini's words to the Shipmaster. The Shipmaster blanched in fear and then stammered out a string of words. When he was done, Ilse turned to Kavini.\n\n\"He says,\" Ilse reported in an even, uninflected voice, \"'I didn't do anything to them. It wasn't my fault. You cannot blame me for that.'\"\n\n\"Ask him what he means,\" Bache requested.\n\nIlse translated. \n\nThe man began to speak quickly again. After a moment, Ilse put a hand up and the Caskian stopped. Ilse turned and translated. \n\n\"He says: 'We were preparing to sail from Minsk when three Luterian men came to me. I couldn't understand their language. They paid me gold and brought two bundles they carried, wrapped in blankets. The only thing they said that I understood was Alveria. They kept saying that.\"\n\nTalk broke out in the hall, people murmuring and exclaiming. The Shipmaster spoke again, a long string of gibberish, and they quieted. Ilse listened, turning to Kavini again.\n\n\"He says,\" Ilse translated, \"'I had no idea it was a woman and child until we sailed. They had been drugged. I didn't know they were Luterian.'\"\n\nThe Shipmaster continued unprompted. The Siblin man listened and then winced. He turned back to Kavini, his face grim.\n\n\"He says,\" Ilse said, still in a calm voice, \"'I took care of them myself. I put them in the hold. I made sure they were warm and fed and had fresh water and a lantern. I didn't speak their language. When we were almost to Alveria, some of my crew became ill with the food. The woman died. She just got sick, it was nothing I did.'\"\n\nThe Shipmaster was breathing fast, the sound loud in the silence of the Hall, everyone horrified. Kane looked at Kavini. It couldn't be easy hearing this, to know, finally, for true, that Maleen was dead. Kavini must have had some small hope. \n\nThe High Lord's face was expressionless, his jaw clenched, but his hand on the chair was shaking lightly. Kane looked at Aslin. She was staring at the Shipmaster. Kane reached and took her hand. She didn't give any sign, but she squeezed it very tightly. Her mother had been with her, had died on the passage. No wonder she didn't remember. A terrible thought occurred to him.\n\n\"Ask him how long it took to get to Alveria,\" Kane said to Ilse. \"If you would, please, Ilse Far Eyes.\"\n\nIlse bowed to him, turning, asking the question. The man responded. Ilse turned to Kane.\n\n\"He says, Kane, son of Tavishi, 'It is on our trade route, slow. Sixteen weeks.'\"\n\n\"Ask the Shipmaster if during those four months he ever let them out of the hold,\" Kane said. \n\nMurmuring rose up all around them as people realized. Ilse turned to the man and translated. The Shipmaster stared at him blankly. The man swallowed, looking at the Luterians around him. When he gave his answer, it was in a weak voice. Ilse turned to Kane.\n\n\"The Shipmaster says: 'No. I didn't dare. The woman was too beautiful. I kept them secret. I feared she would be seen by the crew.'\"\n\nKavini was staring into space, his face still expressionless. \n\n\"What did you do with my oath's body?\" Kavini turned to ask the Shipmaster directly, his voice hoarse, controlled.\n\nIlse spoke to the Shipmaster, who shook his head. Ilse repeated the question, varying it. The man's face went white. He answered. Ilse turned to Kavini, hesitating. Ilse knew. Luterians gave their dead to Shai's fire. Ilse squared his shoulders and spoke. \n\n\"He says, Kavini, High Lord of Corsaire clan, 'I waited until night had fallen and gave her body to the sea.'\"\n\nKavini was suddenly struggling. His breath choked out once, his eyes filling. He averted his face. Kane's father Bache turned to look at Kavini, expressionless except for his eyes, a flash of recognition, compassion. Bache's jaw clenched. Bache turned, speaking to Ilse, giving Kavini time to recover.\n\n\"Ask him. The child?\"\n\nIlse spoke quickly to the Shipmaster, who answered, a long answer. Kavini turned back, in control again. Ilse turned and repeated his words.\n\n\"He says: 'I don't know. When I brought her from the hold at Alveria, she was sick. She didn't speak or move. She was carrying a box, but when I tried to look at it she began screaming. I was afraid people would think I had taken her. I carried her off the Prisha and gave her to the authorities in Alveria, telling them I'd found her hiding on my ship in port. They took her. I don't know what happened to her after that.'\"\n\nBache frowned, looking at Kavini.\n\n\"Why would the child have the oath box?\"\n\nKavini looked at Aslin. His voice was still hoarse.\n\n\"As a child, Aslin was fascinated with it. Maleen kept it in our rooms, but Aslin would often retrieve it and take it with her. She was always careful and always brought it back. I think she knew it was important and found it beautiful. I bought an empty oath box to try to replace it and gave it to her, but she wasn't interested in it. So we talked to her and told her she mustn't lose it. Perhaps Shai guided her to take it that morning.\"\n\n\"Ask him,\" Bache said to Ilse. \"These Luterians who paid him. What clan were they?\"\n\nIlse asked the question. The Shipmaster answered, shaking his head. Ilse turned back.\n\n\"I'm sorry, Bache of Tavishi. He doesn't understand what you mean by 'clans.'\"\n\n\"Ask him what colors they were wearing,\" Bache said.\n\nIlse translated, giving the man's response.\n\n\"He said: 'Yellow and black. The Luterians wore yellow and black.\"\n\nSilence again in the hall. Kavini nodded to the Siblin man. \n\n\"Thank you, Ilse Far Eyes. Corsaire owe you a debt.\"\n\nThe Siblin bowed as the Caskien backed away from two Corsaire men who came to take the Shipmaster's arms. The man was yelling, appealing to Ilse in his language, and they listened to his voice recede down the hall, Besh following his brother. \n\n\"Duellan clan,\" Kavini said, his voice now gravelly, his eyes black. \n\n\"But why?\" Ruthe said from Kane's left. \"Why take Maleen and Aslin? Duellan are not enemies to Corsaire. We've been in feud with Tavishi for three hundred years.\"\n\n\"We have been waiting for our allies to learn the answer to that question, son of Corsaire,\" Bache said. He turned to Munse and Kevar. \"Bring Metas, the Duellan High Lord.\"\n\nIn a short time, Metas stood between the two Tavishi warriors in the Hall, filthy and stinking from the dungeon. He was a large man like all the High Lords, dark blonde wavy hair, high boots with fur, a cloak. He looked at everyone gathered, his gaze roaming, and then he walked to the center of the room, stopping, his feet planted, his arms crossed. \n\nKane dropped Aslin's hand and came forward, leaning on his prop, his leg aching from standing, his ribs. He placed the bracelet on the table between Kavini and Bache. Kavini looked at it and then at him. \n\n\"An oath bracelet, son of Tavishi? Whose is it?\" Kavini asked him.\n\n\"It is the oath bracelet that Bertran gave Penal, his oath, High Lord Kavini. Aslin and I found it in Shai's shrine on Tavishi lands with the body of her Tavishi cousin, Ashe, who died there, a Duellan arrow in his side,\" Kane answered, setting the Duellan arrow beside it. \"Penal and Ashe must have stumbled across Duellan mining the precious stones on the northern border on the ridge that spans Tavishi and Corsaire territory. They killed Ashe, and when Penal fled, they killed her, too. Then they dumped her body in Tavishi territory with a Corsaire arrow in her back to make Tavishi believe Corsaire had done it.\"\n\nAll eyes turned to the Duellan High Lord. The man smiled bitterly. \n\n\"It was my grandfather's decision, and every Duellan heir since then has had to live with it. He was Gars, High Lord of Duellan clan over three hundred years ago. Our ruby mines in Duellan territory have failed. We had mined them dry. Gars sent Duellan to search for new deposits. They crossed over and found them in the caves of the unoccupied north. Tavishi and Corsaire didn't care about them, too busy herding their sheep.\"\n\nHundreds of years of contempt in those words. The Duellan clan kept themselves separate from the other clans, mining being their only source of wealth.\n\n\"You have been stealing from Corsaire and Tavishi lands for three hundred years,\" Bache confirmed.\n\nMetas gave a short laugh, shaking his head. \n\n\"You didn't even know the stones were there. Even if you had known, you wouldn't know what to do with it. At first we gathered the stones a little at a time, in secret, but the mines were very rich, more rich than any we had ever found on Duellan lands. Gars ordered Duellan to mine. We couldn't hide that. We had barely mined for forty years when Pelar and Ashe discovered Duellan on Tavishi land. Duellan warriors pursued and lost them. We finally found the woman, Penal. Duellan warriors were only supposed to take her prisoner so we could hide her away, but a Duellan warrior killed her with an arrow. So Gars had them put a Corsaire arrow in her body and brought her to Tavishi lands.\"\n\n\"And Tavishi killed Anore of Corsaire in retaliation, beginning the feud,\" Kavini said.\n\n\"We have mined your territories for three hundred years and you have never known it,\" Metas said dully. \"But when Kane of Tavishi agreed to give his oath to the daughter of the Corsaire, I knew it was only a matter of time before the decision made by my grandfather would come back to Duellan. You would learn of the deception, end the feud, and ally with each other to attack us. So Duellan took the child from the boat on the lake with her mother, upending it and setting it adrift. I did not want their blood on Duellan hands, so I ordered Duellan warriors to drug them, arranging for them to disappear where they would never be found.\"\n\n\"Maleen of Corsaire died on the passage to Alvaria,\" Kavini said to him, toneless. \n\nMetas looked at Kavini, meeting his eyes. Then he looked down, his jaw jumping. He nodded.\n\n\"Her death was not what I wanted,\" Metas said. \"But I am responsible for it. When Kane brought his oath back to Luteri, and then when they discovered the mine, I ordered Duellan to attack Tavishi Hold while you were still enemies. When the Tavishi High Lord and his heir were dead, we would have ridden and taken Corsaire Hold. Then Duellan clan would have been safe, and we would have continued the mining we require to survive. But once again, your clans allied, as you have always done. Now I am captured by my enemies, my warriors fallen, and my heir Lyle is dead in front of the Tavishi gates. Shai has delivered her judgment on Gars for the feud, on my clan, and on me, for the death of these women, and I would give every ruby in my coffers to have my son back with me.\"\n\n#\n\nAslin sat to the left of Kane in the Tavishi Hall, Bache next to him, Helene to her father's right. Aslin watched as Helene's eyes were once again drawn to the table where Kavini sat with Ruthe and the other Corsaire warriors. Ruthe looked up, his eyes finding hers, and Aslin watched as Helene looked away. \n\nDute was dead, and Colit, in the attack. Garit. Other Tavishi warriors she hadn't known as well. Among the three Corsaire warriors she knew best, Bren had been killed in the Tavishi courtyard defending Moren, who had been cornered by two Duellan warriors. It seemed so cruel for them to die so close to peace between the clans.\n\nAslin's eyes were drawn to the table where Dute had always sat, his chair now empty as if still waiting for him to return, his large laugh and wild hair. Moren was sitting beside the empty chair, his hand resting in front of him, staring blindly. She looked at Colit's chair, still finding it difficult to believe that the lanky man with his kind smile and green eyes wouldn't come striding into the Hall with his instrument in his hand, already whistling a tune.\n\n\"You will look for them until it becomes something you know deep, Aslin,\" Kane said quietly beside her. \"and you will forget and remember again that they are gone. The hurt of it will fade some with time.\"\n\nAll because of Duellan and their rubies. Her mother dead. Her father's heart broken. Herself abandoned in Alveria. Warriors of both her clans killed. So much pain, all for small gems that couldn't possibly replace them. Aslin felt the beginnings of the stirrings of outrage, anger. They should be made to suffer for what they had done. Kane touched her hand and she looked at him. He looked sad. \n\n\"What will happen to the Duellan High Lord, Kane?\" she asked him, her voice tight.\n\nKane sighed. \n\n\"The High Lord Metas will be executed in the Tavishi courtyard, Aslin, and his body dumped in front of the Duellan gates. It's our way. His oath, Levina, will pay our ransom for her remaining Duellan warriors. Tavishi and Corsaire will also demand weregild for all the warriors killed in the feud in both clans, and to the families of the farmers and villagers killed in their attack, and for Pelar and your mother Maleen. Duellan will pay to each clan in precious stones. Levina will agree. She doesn't have a choice.\"\n\n\"Will there still be a Duellan clan?\"\n\n\"Of course, Aslin. There are five clans in Luteri. There have always been five clans. Although it sounds as if their clan will have to learn how to raise Luterian sheep. Levina will lead the clan until Shai chooses a male heir from the Duellan.\"\n\n\"How will they know which one she chooses?\"\n\n\"He will have Shai's gift, Aslin.\"\n\n\"Won't Levina seek revenge for Metas and their son?\"\n\nKane shook his head grimly.\n\n\"She may want it, but Tavishi don't have to ransom Duellan warriors back to her, Aslin. They could also be executed in the courtyard. We could take our revenge on those in Duellan territory, both the clans, go there and kill Duellan people as they killed Tavishi farmers crossing our lands, but we won't. Kavini and Bache have agreed to ransom and weregild to secure the peace. We are tired of feud.\"\n\nEpilogue\n\nKane rode Shaol through the open Tavishi gates in summer, seeing the line of Corsaire warriors in their black leather, blue swirls. The Corsaire men were absolutely still, expressionless, not getting off their horses.\n\nHe dismounted Shaol, dropping the reins. The line of Corsaire parted and Kane saw a flash of bright red hair coming up from behind them\u2014no Luterian had hair like that\u2014and then Jaime emerged and, to Kane's surprise, Miss Corsham. Behind them came Trevin and Lenore Mistral, all of them on small Minsk long-haired horses, the Alverians looking like smaller, more tidy and polite versions of his people. \n\nThey dismounted, one Corsaire warhorse taking a small swipe at Jaime's mount, his teeth bared. The smaller horse grunted in fear, moving sideways as Jaime tried to hold it, enraging the Luterian horse, whose Corsaire rider turned it away with a sharp sound as it tried to lunge, clacking its teeth.",
        "Jaime dropped the reins over the mount's neck and moved forward quickly, Kane closing the distance between them and catching him up, hugging him fiercely, laughing, releasing him and then taking him up again, pounding him on the back. Jaime was grinning and laughing with him, returning his embrace as everyone looked on.\n\n\"I am so glad to see you, my friend, I can hardly contain it,\" Kane said in Alverian, stepping back and blinking hard, clapping him on the shoulder, Jaime staggering a little and recovering. \n\n\"I am so very pleased to see you as well, Kane, I can't tell you how much,\" Jaime said as Kane swiped his eyes, sniffing.\n\nJaime glanced at Ruthe and the Corsaire warriors, all of them still expressionless, watching. He leaned in, speaking Alverian. \n\n\"Is everything all right, Kane? Those are Corsaire clan warriors, are they not? I wasn't sure what to do when we emerged from No\u00ebthe lands and they surrounded us, but they haven't said a word. I admit it was disconcerting. We got here in one less day because they took us through Corsaire lands\u2014beautiful Aspen trees, have you been there?\u2014but I was afraid to speak to them since they didn't greet us and I was unsure of the protocol.\"\n\nKane laughed, putting his hand on Jaime's shoulder. He glanced at Ruthe, who had not left, watching. Ruthe was curious. Kane responded in Alverian.\n\n\"You did well, and I would never leave you to my enemies, Jaime. I told you in my letters, Corsaire are our allies now. I did not know Ruthe would do you the honor of allowing you through Corsaire lands and escorting you to Tavishi. We do extravagant favors for each other to ensure the peace and so that we can still continue to insult each other. It is now my turn, and I must give Ruthe something he will like.\"\n\n\"That's good to hear,\" Jaime said, turning and holding out his hand, the young woman Kane remembered coming and taking it. \"This is Margaret, Kane, whom you met in Alveria,\" Jaime said, his eyes dancing. \"Margaret is my wife. I wanted to surprise you. We were married last year.\"\n\nKane turned to her and grinned.\n\n\"I predicted it when I met you, Margaret,\" Kane said, glancing at Jaime, who was smiling proudly, \"that you would be my friend's oath. I am so pleased.\" \n\nHe was unable to stop himself from sweeping her up gently as well. She was so tiny. He released her, stepping back. She smiled up at him, sweet, her hand going to her hair, brushing it back from her face a little.\n\n\"Maggie, please, Kane,\" she warbled, gesturing. \"Only Jaime calls me Margaret. I had no idea our arrival would be so dramatic. Jaime told me how large the Luterian horses were, but I never imagined any that large. I have been observing them, and they appear to be almost predatory, it's very unusual, have you noticed?\"\n\nKane laughed.\n\n\"I have noticed, Maggie, and you are still a born naturalist. I'm looking forward to my father meeting you. He will like you very much.\"\n\nKane turned to Lenore next, taking her hand and bowing over it, and then Trevin, holding out his hand as the man shook it heartily. Kane stepped back, speaking to them both. \n\n\"Welcome to Luteri, Lenore, Trevin,\" Kane said. \"I am happy you accepted my invitation, and to have you here.\"\n\nThe Mistrals were happy as well, judging from their manner, and maybe a little relieved to see him, Trevin glancing briefly at their expressionless Corsaire escort.\n\n\"You couldn't possibly believe we wouldn't come, Kane,\" Trevin said warmly. \"We have been preparing and anticipating it since you invited us. It is the greatest adventure, and we can't thank you enough.\"\n\n\"You are welcome here. All my clan welcomes you here,\" Kane returned.\n\nKane glanced at Ruthe and then at Shaol and then he turned to Lenore, a small smile on his mouth. \n\n\"Would you like to greet Shaol, Lenore?\" Kane asked her. \"I don't think he would mind if you rode him a little. He has missed your presence.\"\n\nStrong excitement came into Lenore's eyes and then she looked worried.\n\n\"I thought, Kane, that you didn't want your clan to know you had allowed it? I would not betray your confidence.\"\n\n\"I know you would not have said anything, Lenore,\" Kane said, grinning, turning to Shaol and gesturing. \"But it is too late. Shaol has already seen you.\"\n\nAnd Shaol had seen her. Lenore turned to look at the horse. Shaol's ears were up, his head up, staring straight at her, very still. He suddenly extended his neck and gave an ear-shattering, peeling cry, greeting her. \n\nRuthe noticed it as well, giving Lenore a puzzled glance, then a suspicious glare at Kane. The Corsaire heir grimly got off his horse and walked toward them, coming to stand at Kane's side.\n\n\"Thank you, Kane, thank you,\" Lenore said happily, walking quickly to approach the stallion, who was dancing in anticipation, looking at her. \n\n\"Shaol, you beauty, you wonderful, gorgeous Luterian warhorse,\" she crooned, twisting her hair and tossing it over her shoulder, hiking her skirts impatiently. \n\nIn a moment she was on his back, scaling his great side as if she had only seen him yesterday, turning Shaol with her legs. Her lips flattened and she gave a great piercing Luterian war whistle as Kane had done. She leaned forward as Shaol gathered himself and shot off across the land at full speed, Lenore clinging to his back, her whoop drifting back to them.\n\nRuthe turned to Kane, looking hungry, his eyes narrowing and his lips stretching into a fierce grin.\n\n\"You let an Alverian female ride your horse, Tavishi?\" he said softly.\n\nKane looked away from his face, watching Lenore on Shaol. \n\n\"Thank you for escorting my friends, Ruthe,\" Kane replied. \"I will leave it to you to tell all the clans. Make it humiliating. I would not want you to waste this opportunity.\"\n\nRuthe's smile widened, and then he was laughing in delight. \n\n\"I almost believe a day will come when I won't hate you so much, Tavishi. Thank you. I have not been this happy in years,\" Ruthe said when he could. \"I promise I will not waste your gift and that I will do my very best to make sure you regret it.\"\n\nThey watched as Lenore turned Shaol around and rode back to them, handling him effortlessly. When they arrived, she threw her leg over his neck and leapt to the ground, looking for a moment like she was flying, landing easily and dropping his reins. \n\nShe walked to the warhorse's front and Shaol actually lowered himself so she could throw her arms around his great head, which she could barely reach around, and that Shaol endured as her hands went to him. Soon he was leaning and twisting for better places to scratch. She finally released him and walked toward them, her cheeks flushed, her plainness made beautiful. Ruthe watched her with interest. \n\nRuthe looked at Jaime.\n\n\"I am Ruthe of Corsaire,\" he said to him stiffly in Luterian, as if unsure Jaime knew the language or had manners.\n\nJaime immediately turned to face him, inclining his head. \n\n\"I am Jaime of Alveria,\" Jaime answered in the same. \"I and my companions\u2014this is Trevin and that is Lenore, his oath, and this is Margaret, who is my oath\u2014thank you for the honor of your escort through Corsaire territory, Ruthe of Corsaire.\"\n\nRuthe's brows went up and he eyed Jaime. \n\n\"I have heard you sheltered Aslin, my cousin, while she was in Alveria, and that you are her friend,\" Ruthe said slowly, looking at him now as if Jaime were more real to him, taking in his clothing, his face.\n\n\"I am pleased to call myself Aslin's friend, yes,\" Jaime said.\n\nRuthe's eyes ran over the Alverians again, who stood patiently under his perusal.\n\n\"Tell the little Alverian female she has a strong seat,\" Ruthe said to Jaime, gesturing at her.\n\n\"Ruthe of Corsaire admires your skills in riding horses, Lenore,\" Jaime said to her in Alverian. \"It is a high compliment from Luterians.\"\n\n\"Why are there so many more words that you say?\" Ruthe said to Jaime suspiciously.\n\n\"I am translating the meaning and not just the words, Ruthe, so she understands, drawing from my own knowledge of Alverians and my experiences with Luterians from Tavishi Hold and my long friendship with Kane. What I said to her exactly was: 'Ruthe of Corsaire admires your skills in riding horses, Lenore. It is a high compliment from Luterians.'\"\n\nRuthe eyed him again.\n\n\"That is intelligent,\" Ruthe said. \n\n\"Please tell Ruthe of Corsaire,\" Lenore said to Jaime in Alverian with solemn intensity, \"that Luterian horses are the most beautiful, the most intelligent and spirited, the most magnificent horses ever to live and in the whole world and I have loved them with all of my heart since I knew about them.\"\n\nJaime translated that faithfully, raising Ruthe's brows, who looked Lenore over and cocked his head for a moment. He looked at Jaime again, narrowing his eyes, then Maggie, who smiled at him sweetly. Ruthe's mouth quirked at her, taking her in top to bottom and back. He looked at Trevin, who was gazing at Lenore, enrapt, a small smile on his mouth before meeting Ruthe's eyes. Trevin shrugged at him, grinning, and Ruthe's smile got wider.\n\nRuthe took a step back and gestured, his hand turned inward, to his forehead, his chest, and then toward Lenore, and Trevin, and Jaime, and Maggie. He spoke to Jaime.\n\n\"Tell them. The horsewoman is invited to Corsaire Hold, and the one who has given her his oath, and you, red-haired Jaime, and your oath, the pretty little songbird, in three days, staying for five. If you decide to come, while you are in Corsaire territory you will be under the protection of Corsaire. Our allies will be your allies. Our enemies will be your enemies. I will show the tiny horsewoman my Borta, Shaol's bloodline, over which I have authority.\"\n\nJaime turned to them and translated.\n\n\"Ruthe of Corsaire invites all four of us to Corsaire Hold in the morning in three days, staying for five days and nights. While we are there, the Corsaire clan will protect us, and we will share their clan relationships, their enemies and their allies. Ruthe would like to show you horses from Shaol's bloodline, Lenore, the Borta, which he is personally responsible for breeding.\"\n\nLenore's eyes became huge and she walked forward to stand directly in front of Ruthe.\n\n\"Thank you, Ruthe of Corsaire.\" she breathed. \"Thank you, yes, I will come, absolutely I will come.\"\n\nRuthe looked at the tiny Alverian woman vibrating in front of him and then at Jaime and burst into laughter. \n\n\"I do not need a translation,\" Ruthe said. \"She is fiery, Jaime, like our clan's women. I like these Alverian females.\"\n\nJaime came and stood beside her, smiling.\n\n\"Ruthe says you have Corsaire fire, Lenore, and that he likes the women from Alveria,\" Jaime translated, and then turned and said to Ruthe in Luterian, \"I wouldn't want you to get the wrong impression, Ruthe of Corsaire. Lenore is entirely unique among Alverians.\"\n\nRuthe eyed him with interest and then laughed again, walking to his horse. Corsaire were looking at the four Alverians, no longer expressionless but curious now. Ruthe mounted.\n\n\"I am off to spread the word of your humiliation, Tavishi. I have work to do, if I am to make sure even the most remote Prash hears of it,\" he said cheerfully to Kane. \n\n\"I expected nothing less of you, Ruthe,\" Kane answered, making a disgusted face.\n\nRuthe's glance grew sly.\n\n\"Will you tell my cousin Aslin hello from me and to forgive me soon because I miss her? And your beautiful sister Helene that I greet her and hope she will go walking with me again before long.\"\n\nKane glared at him. Ruthe smirked as Kane put his hands behind his back and looked up as if trying to commit the message to memory, reviewing it.\n\n\"Let me see if I have it. You give your greetings to Aslin and wish her well despite the fact she wants to gut you at the moment, and to tell Helene you don't want to go through with the oath ceremony in a month and that you dearly hope she finds a man who is worthy of her from her own clan so she can stay home like she should instead of going to the clan of a black-eyed blathering Corsaire.\"\n\n\"See what I'm saying, Kane,\" Ruthe said reasonably, gesturing. \"You think you are funny when you're not. Every time I see you I have to point this out, it's like you're not very bright.\"\n\nRuthe's lips flattened and he gave the whistling command, and on that parting shot Corsaire turned as one and left. \n\n\"Where is Aslin, Kane?\" Jaime said. \"Is she all right?\"\n\nKane's face went absent for a long moment and then animation came back into it. Jaime stared at him curiously.\n\n\"She is well, Jaime, and impatient to see you,\" Kane replied in Alverian as they all remounted their horses.\n\nKane rode Shaol through the open gates, Jaime and Maggie at his sides on the much smaller horses, the Mistrals close behind them. Tavishi clan stopped to stare, some waving to Jaime, calling his name, who returned their greetings, pleased. \n\n\"The ship was late,\" Kane continued, \"and we didn't know when to expect you. We asked No\u00ebthe clan to look for you, and I came as soon as I heard you were at the Tavishi gates with Corsaire a day early. Aslin has been in the stables with Ilian for two days, who is about to foal. I have told her the animal doesn't need her help, but she won't leave Ilian's side. The mare's time has reminded Aslin she is angry with Ruthe for breeding Ilian, and she's not speaking to him, and she is still a little upset with me that I would not restart the feud on her horse's behalf. Are you going to accept Ruthe's invitation?\" \n\nJaime looked worried.\n\n\"I don't think I could keep Lenore from it, Kane, and they will need me to translate.\"\n\n\"You will like Ruthe, I think. We are alike in many ways.\"\n\n\"It wouldn't bother you, Kane, if I did?\" Jaime asked him carefully.\n\n\"He's not my enemy anymore, Jaime.\"\n\nJaime glanced at him curiously.\n\n\"You seem different, Kane. Lighter than the last time I saw you.\"\n\n\"I am, Jaime. Shai's mercy, I'm alive, the feud is ended, my clan is safe and my beautiful oath still enjoys the sight of my face. Now you are all here, my good friends, and I couldn't ask for anything better.\"\n\nThe End\n\nHey, Everyone. I had great fun posting this story. I'm glad I did it. I promise I will be putting something together before too long. Thanks for reading. -Harp"
    ],
    "authorname": "semiosis50",
    "tags": [
        "werewolf",
        "victorian",
        "non-human",
        "nonhuman"
    ],
    "category": "NonConsent/Reluctance",
    "url": "https://www.literotica.com/s/clans-of-luteri-bk-02-ch-08-end"
}
{
    "title": "Four Inches",
    "pages": [
        "Gentle reader: Thank you for reading this. It is my first story, and writing it has been both cathartic and nerve wracking. The basic premise is autobiographical, and has been rattling around for years. The details are (mostly) fiction.\n\nHaving discovered this place on the web, I have found an outlet.\n\nI thank my wife for being my proof reader and loving critic, without whom, it would not be as good as I hope you will find it.\n\n* * * * *\n\nYou know that I really like you, and you're a good friend; I would love to go out with you, just, if you were a little taller...\"\n\nIt was the Kiss of Death. I'd heard it hundreds of times. Kristi had that look on her face, the one that was trying not to be embarrassed, and look sincere at the same time; I had seen it so often that I saw it in my nightmares.\n\nKristi was about five foot four, and right around a hundred pounds. Slender, but not skinny, with just a hint of B cup tits poking out her blouse. Thick black hair that hung to the center of her sweet, sweet shoulders. She was everything I looked for in a girl on the cusp of becoming a woman; smart, quick witted, and fun to talk to and be around. And did I mention her eyes? Ice Blue? Grey? White? Different light made them all three. They were the most amazing eyes I had ever seen. In a group of friends she laughed, oh, that throaty gurgling laugh, and bantered back and forth. She would giggle, and put her hand on my arm, give me a little shove as she got the double entendre of a classical reference that went right past the others. It had given me that most cruel of things, Hope.\n\nIt had taken me weeks to gather my courage, talk myself into believing that Kristi would be able to look past my altitude disadvantage, and say yes. But it was not to be. My heart was somewhere south of my feet, I felt the old familiar gut-punch of disappointment, but I kept smiling. \"That's OK, I understand,\" I said. \"I'll see you tomorrow after lit class. Maybe we can grab a sandwich and discuss our papers.\"\n\nThe look was back, stronger. Her eyes started wandering, looking at everything but me. \"I don't know, I told some friends that I would meet them for a study group for my sociology project... but I'd like to if it wasn't for that.\"\n\nThe Double Kiss of Death. I made appropriate sounds, and bailed as fast as I could. I found myself in my hidden little spot behind the engineering building. I was breathing heavily, sad and mad knowing I had screwed up another friendship. Kristi now knew that I had more intense feelings for her, that I wanted to date her. That maybe we could go to the next level of friendship, and now every time she saw me she would think first of all that she was four inches taller than me. Four lousy inches.\n\nI was short. I had never grown up thinking much about it. Hell, everyone in my family was short. You should see my sisters and mother and aunts! My dad was taller than me, but even he was only about five five. The altitude record in the family was a cousin that at five eight got every joke about the weather and hey tell us what's going on over there. I was five foot (with my shoes on) and actually not badly proportioned. Just everything was proportioned on a small scale. I had even had several girls make remarks about my butt, and that I looked pretty good, other than that fact that I was shorter than all of them. The only thing that gave me any hope was that there was one thing that was not scaled proportionally. In high school, I played in the band, and changing into the marching uniform, guys would say, \"Holy shit dude, how did you wind up with that thing!?\" Unfortunately, guys don't spread the word to their girlfriends that somebody else has a bigger cock than they do.\n\nMom was worried about me, I was starting to see it. I joked with her about liking tall girls, because I didn't have much choice. But mom would occasionally ask if I had met someone now that I was a freshman in college and away from the small town I'd grown up in, and I would turn red, and and say something about there were a few girls I had my eye on. Right. My eyes, and that was all it would ever be. Mom would sigh, and say something about girls would mature and get past the height differential, and University would be better.\n\nI just couldn't quite understand why a young woman could be so nice and easy to be around, seem to care about me and interact in a group, but the second I hinted at a date, it all came crashing down. The easy laughter, the conversation that had been so effortless, the joking back and forth, all became stilted and forced. Then whoever she was would find reasons to avoid me, and the group of people we hung out with would distance themselves, letting me know that I was the reason she had left.\n\nI was tired of it, and depressed. I quit hanging with anyone, and wrapped myself up in studies, and found that I had a knack for writing technical papers that were easy to read, and didn't need an engineering degree to understand. My counselor at school had introduced me to several professors who honed my talent, and showed me that getting a broader education in literature and classical writing in addition to science and engineering would improve my skills.\n\nThen I had met Kristi in my English Lit class. From the first day of the class my breath had gone short, my dick took on a mind of it's own, and the old familiar awkwardness tied my tongue in a knot. The prof had taken the paper assigned the first week of class, and spread them around so that we proof read them for each other, and did editing markups. Kristi, by the grace of the Old Gods, got mine. She sought me out, and wanted to not only discuss my paper, but have me proof hers as well. We started hanging out after class and my tongue started losing the knot. The Prof tended to use my work as the benchmark for acceptability, and other students started joining us for the lunch time discussions. I had never been so accepted, and even sought after for my thoughts and input. And Kristi had seemed to be there in the middle of it all, helping me to get past my shyness, and coaxing me to believe that people really wanted to know what I thought. If only she knew that the awkwardness and shyness was because of her. \n\nWell, now she did, and the old familiar dance was beginning again. I would be alone, the others would blame me for Kristi's absence. I had hoped, prayed, that Kristi wasn't like all the others, would see me for me, and not just a collection of inches. A substandard collection.\n\nMy little refuge behind the engineering building was screened by trees and shrubs, quiet and cozy, a place where students could relax and think. It was wasted on engineering students, who were in a lab or rushing off to a math class. They didn't have time to sit and smell the flowers. The math was why I got into writing. I was always a term behind in understanding what the hell was going on. It had been that way since high school. I had had fantasies of bringing Kristi here, sitting and talking just the two of us. Well, one thing growing up and staring at girls made up of Unobtanium had given me was a healthy (?) active imagination. Rosy Palmer had never let me down.\n\nIt was a week later, and spring was well and truly arrived, and sure as the growing hints of professors about subjects of Finals, the Greeks were planning their Spring Bacchanalia's. There were other groups putting on parties, but the ones of legend were the Frat/Sorority parties. I was a freshman, and definitely not one of the \"in\" crowd. I was planning on spending the time getting a head start on papers for finals, and pounding the math I had to pass.\n\n\"Yo! Ken, what you doing this weekend?\" Dave was yelling down the dorm hall, and I groaned inwardly knowing he was going to button hole me about going to a party somewhere. He was a buddy that, to give him credit, tried to get me involved in a social life. I hated it. Dave and all his friends either had girlfriends, or were having a great time playing the field, dating multiple women, and of course, getting laid on a regular basis.\n\n\"Studying, man. Gotta get the math grade up, or finals will kill me.\" He gave me that pitying look, and walked over and stood looming over me.\n\n\"Man, you have got to get out and loosen up. It would probably even help the damn math; you stress too much. Science club is having a little get together starting Friday night, with Saturday for good luck . They booked the game room and pools at the Holiday Inn that night and all day Saturday.\" Dave grinned and slugged my arm. \"I've already booked a room, you should get one too.\" I stepped back and looked up at him, \"Yeah, you and Sandy are gonna have a great time, and Paul and Janine, and all the regulars. A, I don't have the money for a room, and B, I don't have a use for one.\"\n\nDave frowned and tilted his head a little, his eyes getting intense. \"Hey, I thought you and Kristi were getting to be pretty good friends, you could always ask her to go.\" I just stared at him in amazement. How the hell did he know about Kristi? He saw me turn red. \"You guys doing the Lit thing at lunch? Even the Prof's are talking about it. Lund is even talking about the possibility of starting a regular club and writing workshop. You and Kristi seem to be at the center of it. People talk, you know?\"\n\nI didn't know what to say, so the truth fell out. \"I asked Kristi for a date, and she bolted.\" The look of incomprehension on Dave's face was both priceless, and comical. I lost it. \"Look, you people think it's all so easy! You go up to a girl, ask if she'd like to go get coffee or a movie, and off you go. How the fuck tall are you?\" I was yelling, everyone on the dorm floor was poking heads out of doorways, and Dave obviously didn't have a clue why I was asking how tall he was. \" How tall, goddammit! Six feet, six two? How tall is the average girl on this campus? Five five to five eight. It has never crossed your mind that a woman will be concerned about it. But when I ask for a date, all they see is four goddamned inches!\" I was really screaming now, and pins dropping would have been an earthquake. I suddenly noticed Dave was blushing red, bright red.\n\n\"Hey! Calm down dude. Man the whole campus heard that. What, your telling me that girls won't go out with you because they're taller than you? That's crazy...\"\n\nWhen my fist smashed the door to the room the sound popped and echoed down the hall. Maybe it was my knuckles popping, because my hand sure as hell began to throb.\n\nDave grabbed me by the shoulders and hustled me into the room, shoved me over onto the bed and grabbed the desk chair. He was pulling his phone out of his pocket. \"Yeah, Sandy, I need you to get over to the dorm. Ask anyone for Ken's place. Thanks\" Dave was not stupid, he was here on multiple math and science scholarships. And the wheels were turning.\n\n\"So, if we follow the evidence, you've never been on a date.\" Dave said it as fact, and he wasn't wrong. \"The corollary to that is that you've also never been laid. No wonder you are so uptight. Sex is the only thing that gets people through school, man. Why do you think every one is hooking up with, well, every one? Without the release, the way to get it out, we'd all die of heart conditions before we could graduate.\" He paused, and his voice got strangely gentle. \"You're right, I've never given my height a thought. Hell, I've never really given yours a thought. This is going to take some thought. Sandy can help, maybe get Janine to help. So, you never even had a date in high school, never did the make-out thing?\"\n\nI shook my head, my whole body felt as if it was glowing so hot that the bed should catch fire. \"Not since playing doctor at eleven or twelve. Then the girls grew, but that was cool, because they hit first, and pretty much all the guys were in the same boat. But then you all, you know, regular guys, all caught up and shot passed the girls at fourteen or so. Me, I grew a couple of inches at twelve, but since then nothing.\" I couldn't believe that I was being so open to Dave. I was down to being merely cherry red.\n\nThe door flew open and Sandy strode into the room. \"So, what's the big emergency Dave. I could tell by your voice somethings up.\" Dave looked over at me, then stood and gave Sandy a hug, and a kiss. Sandy was about five seven, and curved in all the right places. Her hair was long, and reflected her name, legs that were trim and went all the way to the ground. Perky C cup breasts rode her chest like a pair of schooners setting sail. She was majoring in American history, with an eye on teaching at the collegiate level, and had a scholarship on the school rowing team. She also ran swam competitively on the off season, to stay in shape. Man, she figured in my active imagination, but I was careful to not let a hint of it show to her and Dave. Over the years I'd gotten good at that. It beat getting beat by pissed off boyfriends.\n\nDave had an arm around Sandy's waist, and he turned her to me. \"Tell me what you think of Ken, about how you would react if he asked you on a date.\" I did the radioactive thing again, as she looked at me for a moment. \"Be honest,\" Dave said.\n\nSandy looked me up and down, and gestured for me to stand up. \"Well, he's not bad looking, and he does have a nice butt, but a date? We'd look kind of weird walking together. I mean, I'm so much taller than he is.\"\n\nDave looked at me, then Sandy. He asked Sandy why it made a difference, look at Paul and Janine. He was much taller than her, by six inches or so. Heck, Dave had five inches on Sandy. \"That's normal, all men are taller than women,\" she replied.\n\nI grinned, \"Yeah, that's me, Abbynormal.\" Sandy had the grace to blush. Oh man, fodder for fantasy.\n\nSandy looked puzzled for a minute, \"What's this got to do with...\" her eyes got wide, and she put a hand to her mouth. \"You asked Kristi for a date, didn't you?\" She sat down in the desk chair. \"That explains a few things. I mean, I've heard that you two were becoming an item over at the Union, but suddenly she's not there. And apparently she's been upset about something.\"\n\nI was looking at the floor, and couldn't meet her eye. \"Yeah, I did, even knowing what would happen. But dammit, I thought she would be better than that. I mean, she was the one that wanted to start hanging out.\" My anger, and maybe my desperation was leaking through. \"She was being so, so cool, especially when other people started to hang out, and we were having a good time.\n\nBut four fucking inches!\"\n\nI realized I was shouting again, took a deep breath, reached for calmness.\n\nI finally looked at Sandy. I walked over next to her, even sitting down she was looking me in the eye. \"As long as we were talking school, authors and papers and stuff, it was all good. But as soon as it gets personal, boom. And then she can't look me in the face without being embarrassed. So she's gone. Then I'm the bad guy in the crowd because she won't admit that it's a bias, and work past it. I thought, hoped university would have people mature enough, cool enough to get past societal hangups, but even you say that it would be too uncool to go on a date with me because you're taller than me.\"\n\n\"And don't even go to the place about finding a girl shorter than me. Most are built like bowling balls with appendages, and any cute girls are booked out for the next ten years. They get their pick of studs. I can't compete.\"\n\nDave, without thinking about it, picked Sandy up, sat in the chair, and sat her on his lap. Her arm went around his shoulders without any more thought. They were a hell of a couple. I was so damn jealous.\n\n\"So,\" he said, \"You see the problem. No dates, no social intercourse, no intercourse.\"\n\nSandy's eyes got big again. \"Oh, my God!\" She hopped off Dave's lap and began pacing the room, all five steps of it. She began thinking out loud, probably not even aware of it. \"So, Kristi, who is really smart, and a really nice girl, is upset and avoiding you. You asked her for a date. I know that she's been out with other guys, but she seems to be pretty picky; but I've also heard that she knows what to do in the bedroom,\" she glanced over at me, smiled, and said, \"Woman's grapevine. Especially with the pretty ones. Everyone gossips about every one.\" She resumed her pacing, tapping her lips with her right index finger. We just shut up and let her think.\n\n\"So, are you going to go to the science club blow out?\" the question startled me, and I started to explain why I couldn't go. \"Of course you are going to go. And you're going to have a good time, regardless. Even if it's just a good drunk. You need to unwind, relax, before you blow up. Freshman year is totally fucked up.\"\n\nSandy and Dave were sophomore's, as was most of the crowd they hung with. Why they tried to include me was more than I could figure. \"Bring a bag with some swim wear, basic toilette kit, and a change of underwear. Maybe a clean shirt. Dress comfy casual. Dave, you see that he gets there, if you and the guys have to rope and dope him. I gotta go. Janine and I will put us girls' heads together and make a plan.\" She smiled at me. The Sun made an appearance, and the glow of the Great Bird of the Galaxy surrounded me. I tried not to let hope seep in at the edges.\n\nFriday afternoon, and I was as nervous as a drug smuggler at the border. I was wearing a nice pair of jeans and a short sleeved Hawaiian button down shirt. I'd had my 'kit' packed since the night before. I couldn't stand still, let alone sit. I was preparing myself for either Heaven or Hell, and I was betting on Hell. Dave had let me know that he would pick me up in front of the dorm at four, and if I wasn't there, Sandy would track me down. He wasn't responsible. Apparently, the girls had a plan. I was scared shitless.\n\nDave and Paul pulled up in Dave's mustang, and I piled into the back. \"Good thing I'm small, or you'd have to get a bigger car.\" I quipped. Dave grunted and hit the gas. We were at the hotel in ten minutes.\n\n\"The ladies are already here, Sandy's in the room, so we'll go drop your stuff there, then go mingle for a while, get some nibble's and booze. Then we'll hit the pools.\" It was becoming obvious that Dave had strict instructions.\n\nThe mingling thing was going fine, I knew a lot of the science people because of classes, but because of my credit load, I hadn't actually joined the club. It would be nice, and was thinking it would be a good thing for next year. I noticed that though I wasn't being chaperoned, some one of Dave group was always where they were visible. I had had some of the finger food, and a couple of beers, which put me at my safe limit. More, and I ran out of mass to soak it up, then I'd get maudlin. Then I'd get stupid. Experience, eh?\n\n\"Hi, I didn't expect to see you here. I thought you were cramming math, or something.\"\n\nI turned around and nearly dropped my beer. My ears were working after all and the eyes confirmed that Kristi was really standing there. My tongue knit itself into a knot, Mr. Stiffy started to rise to the occasion, and really, really wanted to say Hi!\n\nKristi was wearing a white midriff length top that clung to her assets in a way that drew the eye, without screaming slut, but left a very nice, flat, expanse of skin exposed. The purple mid-thigh length sheath of a skirt, (complete with slit,) started at just high enough to cover her belly button, then drew the eye to one of the best pair of legs I'd ever seen. To top it off, she was wearing white open toed one inch flat sandals. Her nails and toes were colored to match the skirt. I knew Kristi was stunning, but I had never seen her wear this kind of outfit before. My dick was trying to prove that it met the military height requirement.\n\n\"Uh, I, I didn't really expect to be here either,\" I stammered. Great beginning. \"But now I'm glad that I am. Uh, I didn't expect to see you here, I mean, I didn't know you hung out with the science and geek crowd.\" Way to classify yourself, idiot. \" Not that your a geek, or anything...\" Keep on shoveling, moron.",
        "Kristi gurgled her laugh, and motioned with the glass of wine in her hand. \"I came with a friend that's a computer sci nerd,\" Mr. Stiffy started to go to \"at ease\", as I heard her say that. I started to say something inane, when she continued, \"She talked me into it, because the people here aren't so much arrogant assholes as the Greek people. And I've heard stories about unattached women that go to their parties.\"\n\nShe? She talked her into it? My cock was at attention again. I hadn't even noticed until I started to take a step towards her. Oh my God, I saw Kristi glance down, then do a double take. Her eyes widened, and I swear I saw her pupils dilate. I didn't have chance in hell of trying to rearrange things so as to not be so obvious.\n\n\"Well, I'm really glad you're here. We've, well, I've missed you at the after class discussions. So you were invited to one of the Greek parties?\"\n\nShe smiled and turned towards the food tables. I moved to stay with her. \"Yeah, one of the junior frat guys was trying to get me to go, but I think he was trophy hunting, and I don't need that kind of crap. So, here I am.\"\n\nWe made it to the food, and she picked up a little sandwich of something; I couldn't take my eyes off of her, my brain couldn't seem to pick a point to stare at. Her eyes, her tits, that lovely expanse of smooth (so smooth) belly flesh, that slit in the skirt, the legs running down from under it, her hair, her eyes. I was getting dizzy.\n\nI saw her eyes flick down again, and she suddenly seemed to get nervous. I realized she'd picked up the food to have something to do with her other hand. Kristi took a large sip of her wine, then drew a deep breath. Now I was really dizzy. That breath did things with her breasts that should be illegal.\n\n\"Look, I'm sorry about avoiding you. I know it's silly, and you deserve better, but hey, we all have to fight our little hang ups. I really owe you an apology. I have been stupid, and my roommate has been giving me no end of grief over it. It doesn't help that she's six foot two, and has a personal thing about being too tall, even though she's putting herself through school modeling. She's told me stories about some of her dates, and says that being taller than a guy shouldn't be a show stopper. If it was, she would never go out, according to her.\"\n\nJust then, Dave and Sandy, Paul and Janine came over to the food table, and the guys started to scoop up plates of nibblements.\n\n\"Hey Ken,\" said Sandy, \"who is this fair lady I find you here with?\" Janine was trying not to snort her beer.\n\n\"Hi, this is Kristi,\" I said. \"She came with a comp-sci major, and well, I don't know where she is, but I need to thank her.\" Kristi smiled.\n\nSandy looked Kristi up and down, and obviously approved her outfit, then smiled and said, \"So you're Kristi. We've never met, but I know your dorm-mate. How is Michele, I haven't seen her in a while. I hear she's heavily booked at the agency, and is going to have to choose school or modeling. Tough choice!\"\n\nDave was grinning, and Janine was still fighting with her beer. Paul was just standing to the side, trying to play it cool. The girl's plan was starting to form in the back of my brain, what of it that wasn't trying to corral my eyes.\n\n\"Hey, we were just getting a little fortification, then heading over to the pool to work off some alcohol.\" said Dave. \"We were just going to collect Ken here so he could go change.\"\n\nSandy winked at me, then smiled at Kristi, \"If you brought a suit, maybe you would like to join us?\"\n\nKristi looked at Sandy, then at me. I could see wheels starting to turn behind her eyes, (those gray eyes). \"Sure, sounds like a good idea. I'll go find Kate and let her know what's up, and meet you at the pool.\"\n\nI told you she was smart. But hey, I can claim complete innocence in this scheme.\n\nKristi turned and smiled at me and said she would be right back. As she walked away, those hips and legs were doing things that made me forget my name. (Oh man, that slit...)\n\nI heard the sound of a slap as Dave said, \"Holy shit.\" Janine lost the battle of the beer, and broke out in giggles. Paul just looked at me and asked if I was going to be able to put on a swim suit. Janine giggled harder. That made her tits cross the line to illegal.\n\nSandy was laughing at Dave, the slap more for form than anything else. \"Come on guys, we better go change and get down there before we lose momentum.\" She looked at me and blew me a kiss. \"Kristi really is a knockout, isn't she. If it wasn't for the lunkhead over here, I might have to chase that myself.\" My jaw dropped open; Dave was whooping, Paul was grinning, and Janine was just trying to breathe. \"When I found out who her roommate was, I knew we had it sewed up. My father helped Michele get started at the modeling agency, and Janine knows Kate, the friend that convinced her to come.\"\n\nThe pool room was dim, and there were about twenty couples and assorted single men lounging around eyeing the candy. We had just got there, and I had immediately hit the water, because I couldn't stand around holding a towel to my crotch forever. Mr. Stiffy the wanna be soldier was fighting a winning battle with my suit. The afterimage of Kristi walking away was still making me blind.\n\nSpeaking of, Kristi and another girl, who had to be Kate, walked through the door into the pool room. Every eye of every guy, and not a few of the women, locked onto the girl with the black hair and the slit skirt. We all started to get dizzy. My soldier was out doing himself for standing inspection parade.\n\nKristi walked over to the chairs where Sandy and Janine were laying out their towels and stuff, introduced Kate, a vivacious brunette with blue eyes, pert nose, and at least D size tits. The few extra pounds she carried seemed designed to support those massive mammaries.\n\nThen I did go blind, or the scene that played out was so burned into my retina's that nothing else was going to make an impression for months. Kristi kicked off her sandals, then started slinking (yes, slinking!) that purple skirt down over her hips, Mr. Stiffy was saluting with everything he had. I was starting to worry about clouding the pool. The skirt finally made it over the hips and hit the floor. Besides revealing those legs that just wouldn't quit, it also uncovered her belly button, which had a diamond stud just to one side of it. The purple bikini bottom that had been hidden under that skirt wasn't a thong, but it was so close I don't have a clue what to call it. How about the best piece of near nothing that I've ever seen. The strip of cloth that ran down her pubes, disappeared between her legs and reappeared near the top of her butt crease in back covered the outer lips of her sex, but looked like it was showcasing them at the same time. There was total silence in the echoing pool room by now.\n\nThen Kristi reached for the bottom of her top, and slowly, slowly, lifted it up and over her head. The bikini top matched the bottom, in that while still legal, and covering everything that needed to be covered, left absolutely nothing to the imagination. Have I mentioned I have an excellent imagination? It failed utterly. The triangles of cloth were attached to tiny strips of material that wrapped around under her arms, wove around and joined the one that went behind the neck. That top caressed those glorious breasts, gave the nipples a place to strut, and did absolutely nothing to support them. In my dictionary under the word \"pert\" is a picture of those perfect, perfect tits. A perfect handful, more than a mouthful. And those nipples were announcing their presence to every eye in the room.\n\nThe most amazing, wonderful, heart stopping, orgasm inducing thing about Kristi's whole performance, was that she had found me in the pool, turned to face me, and locked eyes with me. They never left me the entire time she stripped on the pole, without the pole. Then she casually gathered her hair back into a pony tail, and flat dove into the pool. Everyone in the place took a breath, except me. Venus without the half shell rose from the water in front of me. \"Hi!\" she said.\n\nSome indeterminate time later, it was determined that we needed more alcohol, and a bite to eat. Dave and friends had joined us in the water, and some mild grab-ass had followed, as everyone used the cover of the dim lighting and water to get in a little fore play with wandering hands. Of course, I touched nothing, somehow not even myself. Venus, Kristi was here and talking to me, and Hell was just around the corner if I screwed it up again. We talked about the class, finals, and then Kristi started relating some of Michele's dating stories. I could tell some things were being left out, but hey, PG-13 was good. The upshot was, she was trying to deal with the height thing, She had said several times that she owed me an apology. I kept saying forget it.\n\n\"Let's get out and join the others,\" Kristi said. I colored up, \"I really can't, uh, get out of the pool right now. You go ahead and I'll catch up.\" Kristi looked down into my eyes. \"Can't, huh. And why would that be?\" I felt her hands grab my thighs and she pulled herself down under the surface. There was a burst of bubbles, and her head popped back up, and she was gasping for air. Her eyes were definitely dilated.\n\nI have read stories about guys getting erections that \"grew down their leg\". Come on and get real. If mine tried that, it would snap off. Let's just say a good portion of Mr. Stiffy was poking up above the suit waistband trying to introduce himself. Apparently he just had.\n\nThe walk back to the game/lounge area where the food was found Sandy and Janine next to me when Kristi and Kate excused themselves to the ladies room. Sandy said it looked like things were going well, and that Kristi really seemed to be into me. Janine snorted, and when I looked at her, she giggled and said maybe it would be the other way around. I turned radioactive again, and said something about Right, like that was ever going to happen.\n\nIt was Janine who grabbed my arm and said, \"Look, have some self confidence, and go with it. Kate says Kristi knew something was going on, but Kate wouldn't spill. Kristi went out and bought that whole outfit for tonight. So she's invested in this, and from what I see, she is trying to prove something to herself, as much as you.\" Janine may come across as somewhat of an air head, but that is just protective coloration. There was a brain in that head, and green eyes that didn't miss much.\n\n\"That, and I think she likes what she sees,\" grinned Sandy. \"From the little I've seen, if it wasn't for the lunkhead, I might have to get a little of that myself.\" Her eyes rolled down to my swimsuit, and I groaned and re-wrapped a towel around my waist. So much for getting things under control.\n\nFood and drink weren't allowed in the pool area, so we hung out in the lounge area with snacks and drinks. I had gotten glasses of a California Merlot for Kristi and I, and she smiled. \"I didn't know you liked wine, or is it just to impress me.\"\n\n\"No, actually I prefer it, there is such a variety, and most beers are too hoppy for my taste,\" I replied. \"But Dave gives me shit about it, and beer is easier to judge intake with.\"\n\nKristi was about to add something, when Kate bounced up. \"Hey, they've got the lights mostly off on the outside pool, and there are a whole bunch of people skinny dipping out there. You guys want to go join in?\"\n\nI turned bright red again, and looked at Kristi. My hind brain was screaming Go For It! While the fore brain was twisting my guts into knots. She paused, and got a distant look in her eyes, and I noticed in the lower lighting, that they were on the white side of the spectrum. She looked between Kate and I, and put on an insolent grin. It said \"I dare you\" all over it. \"Sure, I'm good if you're game\"\n\nSo much for the stupid towel around me; soldier boy was clawing his way out of that. Right then, Dave sauntered up. \"Hey people, the rest of us are heading out to the outside pool to cool off. Thought you'd like to know.\"\n\nCooling off, right. The woman of my dreams wants to go get in the all together with me, and I'm so nervous I'm about to puke.\n\nI looked up into Kristi's gorgeous eyes, and to my amazement, behind the bravado, I could see that she was as nervous as I was. A sense of calm descended on me. I found myself taking a great, giant breath, and putting my arms around both women, I said. \"Sure, lets go cool off. It will be fun.\"\n\nKate went and grabbed their things from the the inner pool area, and came back over and put her arm back around me and we headed out the double doors to the outside. I had a handful of Kristi hip flesh, and other than my right hand, the rest of me was numb.\n\n\"Breath, fool,\" Kate whispered into my left ear. Their hips were rubbing mine as we walked out into the noise of fifty or sixty people doing sexy, silly things in the Olympic sized pool. Some idiot with more booze than sense slipped off the end of the three meter board right about then and splatted into the water.\n\nKristi started laughing and said, \"That hadda hurt!\" The ice was broken and we found Dave and friends, and put our stuff down. Dave was grinning like a fool, and Sandy had a thoughtful look about her. They were already naked. I didn't even notice.\n\nKristi turned to me, reached out to the towel at my waist, and I could see her fingers trembling. She hesitated, staring down at my crotch, and whispered, \"Can I unwrap you?\" I couldn't speak, but managed to nod my head yes. Her fingers grasped the edges of the towel, and pulled. Sandy, Kate, and Kristi all sucked in a deep breath, and I swear I saw Sandy wipe her mouth. There was a good two inches of Mr. Stiffy poking up above the band of my suit; and boy was he happy. I heard Kristi I moan, and her hand shook and reached, but she pulled it back.\n\n\"Holy shit, dude, where did you get that!\" exclaimed Dave.\n\nI was in radioactive mode again, so did the only thing I could think of. I dropped trow and ran and jumped about six feet out over the heads of some people at the pool edge and hit the water. I heard a splash, and Venus reappeared treading water next to me. I have no clue how she got that top off so quickly. Didn't care. My eyes were glued to the most perfect pair of tits I'd ever seen, internet porn included.\n\nI damn near drowned as I felt a hand reach down and grab hold of my cock, and give it a gentle tug. This can't be happening, I kept thinking. Kristi had a distant, dreamy look in her eyes, that were back to ice blue, and she was breathing heavily as she tread water.\n\n\"Does this count as a date?\" she asked. \"I still really owe you an apology.\" She started moving to the edge of the pool, towing me by my steel dick. We grasped the rim, and her oh, so shapely legs wrapped around mine. She was leaned back away from me, and her perfect, Granny Smith apple sized tits were poking up and out at me. Her nipples were swollen and blood red, about 1/2 of an inch long, centered in deep pink aureole's and the most beautiful things I'd ever laid eyes on.\n\nI reached out, slowly, my hand shaking so hard I could hardly control it. I hadn't been this close to a naked girl since I was twelve, and that had been a cousin. I touched the back of her neck, hesitated, then drew Kristi to me and our lips met.\n\nOur breath gusted into each other like a storm front. Kristi pulled back for a second, stared into my eyes, then clamped her lips to mine. I felt her tongue poking at my mouth, and I let it in. I didn't have any practical experience at this kissing thing, so I just tried to relax and follow her lead. Next thing I knew, out tongues were dancing around and over each other, and I was getting electric shocks straight to my groin. I think Kristi was too.\n\nWe both let go of the edge of the pool to wrap our arms around each other. Her legs were like a vice around mine. We slipped under the surface of the water, and didn't notice. Until we started to gasp for air. We broke the kiss and the surface at the same time, out chests heaving. My cock was planted firmly between out bellies, and that heaving was doing marvelous, dangerous things to it.\n\nI started to hear clapping and whooping from the pool deck, and Dave was giving me a thumbs up, and Sandy and Janine, and some others were laughing and giving high signs.\n\nI gripped the rim of the pool with both hands, and Kristi wrapped her arms around my neck. Her legs were still clamped around me, and I could feel the base of my cock rubbing on her mound from the wave action, her diamond stud poking me just under the helmet of soldier boy. We were just staring into each others eyes. Suddenly Kristi pulled herself to me and put her head on my shoulder, which felt good. But those soft, firm tits with those 1/2 inch nipples were boring holes in my chest, trying to reach my shoulder blades. Mr. Stiffy was sending me happy signals, and I knew I was approaching the point of no return.\n\nI somehow disengaged Kristy from me, got some space between our bodies. Her arms were still clasped tightly around my neck, but I had one hand on her hip holding her hips and associated parts out away from Mr. Stiffy. The overwhelming urge to cum slowly faded. \"If this is a date, sign me up for a million more. If that doesn't cover the rest of my life, I'll contact a lawyer in the morning. If I'm still alive. Kristi, you're killing me here. Please, please feel free to continue.\" I gave her a half grin, and holding her nethers away from where I wanted them was the hardest thing I'd ever done. Pun intended.\n\nWhile this had been going on, Sandy and the rest had jumped into the pool, and I heard them teasing and torturing each other. We were kissing again, and Kristi's legs were trying to close the gap I was so painfully holding open. She grinned, then began gurgling, and I felt her hand reaching down to my dick again, but this time she just lightly stroked it with the tips of her fingers and nails. I felt no trembling now.\n\n\"How about we start out with five hundred, just to see if we're compatible.\"\n\nI tilted my head forward, and brushed her lips with mine. \"This isn't fair, Kristi, I'm keeping us from drowning, your teasing the hell out of me, and I can't return the favor.\"\n\nHer lips lightly touched mine, and I felt her nibble on my lower lip. \"I know, so where do we go from here?\"\n\nGood question. Expense be damned, but I didn't think there was a room left by now. \"I know where I'd like to go from here, but I think we're too late...\"\n\nKate to the rescue. She was was squatting on the edge of the deck, and it says something about my focus that I didn't even pay attention to the near naked pussy winking at me next to my head. \"Guys!\" she squealed. She was waving something in her hand. \"You won't believe this, but Steve and Stephany are having another fight. She took his car keys and took off. Steve and Jim are going to try to catch her!\"\n\nKristi broke eye contact to look up at her, \"So? What's that got to do with us? They're always fighting about stupid stuff.\"\n\nKate giggled. \"Well... Steve was grabbing Mary and she was grabbing him, and Steph caught them. She's real pissed. While Steve was trying to get his clothes on to go after her, I just happened to find this room key laying around.\" That's what she was waving around. \"It's paid for and everything. You wouldn't happen to know anyone that needs to get a room, would you girl?\"\n\nI couldn't breathe, my cock got even longer and harder, and was reaching out rub across that little landing strip at the top of Kristi's pubes. I was blushing merely pink, it's tough to go red when eighty percent of your blood is stuck in your dick.\n\nKristi caught her breath, then got a calculating look as her eyes met mine, then bored a hole in the water. \"Yes, yes Kate, I think we do.\"",
        "Oh My God!!!!! I could sense the Gates of Heaven swinging open, and if I didn't drop dead of heart failure, I might make it through. I felt like I'd been gut-punched, but it was completely different from all the other gut-punches I'd ever experienced.\n\nKristi let go of me, and lithely bounced up onto the pool edge. \"Come on, Big Boy, lets get dressed.\" I didn't move a muscle, but found myself standing next to her, and I didn't give a single solitary damn who saw the flagpole proudly standing up and slapping my naval.\n\nKristi snatched the key card from Kate, \"You don't know which room do you,\" she asked.\n\n\"Come on, who do you think you're dealing with here,\" Kate snickered. \"Jeff said Steve's been bragging all week about how he was getting laid tonight. Room 427, king size bed included.\"\n\nDave and Sandy saw us putting our suits back on, and padded over. Dave was obviously having a good time. Sandy looked more than a little distracted too. Kate intercepted them, and spoke in low tones. Sandy squealed, Dave grinned and they both looked over at Kristi and I and smiled and gave double thumbs up. Plot complete.\n\nSandy came over and gently touched Kristi on her cheek. \"Be patient. You have a complete innocent on your hands. Think about being fourteen again.\" Kristi turned bright red, and jerked her head around to me with the widest eyes I'd ever seen. Her breath caught in her throat. Suddenly I couldn't meet her eyes again.\n\n\"Oh,\" she sighed. \"Oh!\" Kristi's right hand went to Sandy's cheek in return. Her fingers gently stroked down Sandy's cheek to her jaw line. The trembles were back. \"This, changes things,\" she whispered. \"Thank you. Thank you for telling me.\"\n\nKristi grabbed my hand and with the other her top and skirt. She turned to Kate and mouthed, \"Thanks\" and pulled me out of there.\n\nRoom 427 was your standard hotel room, but all I saw as the door swung open was that huge expanse of bed. We slowly, as if wondering how we'd gotten here, entered. The door swung shut. Kristi walked over to the bed and sat on the edge. \"Is Sandy right? You've never been with a woman before? Never made out or anything?\" She seemed a little incredulous, not believing a nineteen year old male could exist that long without seriously learning anything about the opposite sex.\n\n\"Well, there was an older cousin when I was twelve.\" I said. I gave a little shrug. \"Every girl I ever asked out reacted like you did. I was never given a chance.\" I didn't know if I was sad or getting mad, or just lost in despair. My gut was twisted into knots the like of which I'd never felt before. Then I looked up at Kristi, and she was grinning like a fool. My heart rose up into the heavens, and I knew I was at the gates. She held out her arms in the most welcoming gesture I could imagine. And I was there. Her head was pressed between my palms, my lips planted firmly on hers. We were lying on the bed, with me on top of her.\n\nKristi started gurgling, and rolled me off of her. \"We better dry off, or we're going to stick to everything before we're supposed to stick to everything.\"\n\nShe stood, and flexed her shoulders, and that wonderful creation of a bikini top fell slack, and with a quick flick of her body, her hair flipped forward, and the neck strap went with it, and the little piece of nothing was on the floor. Her hair flipped back, and Kristi slowly reach up and back, and pulled her pony tail loose. Her perfect, more than perfect, breasts rode even higher, and jutted out even further. The schooners had set full sail.\n\nShe smiled at my completely gobsmacked look. \"Michele did a photo shoot in Italy, and had one made for me. Getting all the measurements was a pain, and she won't tell me what it cost. Right now, I don't care.\" Then she got a teasing, sensuous look, and cat-footed over to me. \"Would you care to help me with the rest?\"\n\nI knelt at her feet, reached up and gently, my fingers trembling, took hold of that tiny piece of fabric on each side of her hips. I held my breath, and began to pull it down. Her legs spread wider, and as it pulled from her womanhood, it paused, then jumped away, tiny strings of her juices clinging to it. I remembered to breathe, and the scent of her moist sex hit me like a padded hammer. I had never dreamed that anything could smell so...exotic, fresh, exciting. How I didn't cum a flood then and there I don't know, and never will. I looked up at Venus, and Kristi had a tentative, pensive, questioning look on her face, as if she wasn't sure I would like what I saw.\n\n\"Oh, God. You are the most beautiful girl, woman, I have ever dreamed of. You're pus...\" I trailed off, the words wouldn't come.\n\nKristi smiled delightedly, and pulled me up by my arms. \"Pussy, Ken. You can call it a pussy, or a cunt, or snatch; whatever you like, just don't call it a vagina, because I'm not in a doctors office.\" She giggled, and suddenly knelt on one knee, and pulled my bathing suit down to my feet in one quick move. She paused, her eyes riveted on my cock as it bounced gently from being completely released from bondage. All seven and a half inches of it.\n\n\"You have the most gorgeous cock I have ever seen,\" she whispered. Then she moaned. \"How the Hell did you get this?\n\nI grinned. \"Tell you a true story. Just before high school graduation, when I couldn't get a date for the prom, my mom caught me jerking off. Looking back on it, I don't think she believed it either. But she tried to make me feel better. She said that God had made all men with the same amount of flesh, and that for us little guys, the extra had to go somewhere. That someday, some woman would discover my \"gift\" and find herself truly blessed.\" My grin got cockier.\n\nKristi moaned again, deep in her throat. \"Your Mother is a wise woman.\" Then she laughed her throaty laugh. \"And it gets to be me!\n\nShe bounced up again, tossed me a towel, then stood there in the center of the room, looking at me.\n\nI got the idea, and moved to one side of her, stood soaking in the profile of her. Tits, perky, definition of. Stomach, flat. Ass, not flat, tight and made for holding. Legs, long, and slender, calves defined and flowing into flawless ankles and feet. I began to dry her body, slowly, lovingly. I started at her feet, ran the towel up those long, long legs. When I got to the junction of them, I gently rubbed the towel up her slit. Kristi hissed, squatted a bit for better access. I dropped that end, and began stroking the globes of her ass, ran up the crack of her ass, then resumed using both hands to knead those incredibly round, tight cheeks.\n\nI moved up her back, wiping away what wetness was left from her brief time lying on the bed. Caressing her neck, one hand reaching around to the base of her throat, then around her ears.\n\nI moved behind her and pressed my impossibly hard cock to her ass crack, and stroked her slit again, then began the journey north. I pressed a finger into her naval, which made her squirm. Mr. Stiffy liked that. Then, slowly, gently, I rubbed the towel up to the underside of her breasts, around to her sides, over the top of her chest and back down, letting the knapp of the cloth pass over her hard nipples. Kristi moaned again. It was the most incredibly sexy sound I'd ever heard. I never wanted to stop hearing it.\n\nThe towel dropped from my fingers, and I finally filled the palms of my hands with Kristi's tits. Her pink aureole's where the size of fifty cent pieces, the nipples jutting up and out proudly, burning the palms of my hands with their heat. I took those nipples between finger and thumbs, and gently pinched and twisted.\n\nKristi's hands met mine, and as she moaned even lower, and longer, took my fingers and used hers to make me pinch and twist even harder. Her buttocks were moving in a slow, sensuous circle, with my dick trapped in them.\n\n\"Now who's teasing who?\" she suddenly giggled.\n\nKristi stepped away from me, snatched the towel from the floor, and began to dry my body off, in almost a repeat of what I did to her, except she had the wisdom and restraint to not even touch Mr. Stiffy.\n\nWhen she finished, I now knew that my own nipples were almost as sensitive as hers, and she apparently liked my moaning and twitching, because it made her giggle. She leaned down into me and took my left nipple into her mouth, licking and sucking, and then gently bit it.\n\nI screamed, I think, because blood was rushing to my head, and I wasn't hearing very well. Then she did it again to the right nipple.\n\nI was collapsed back on the edge of the bed when I could sense what was happening again, with my feet almost touching the floor, and Kristi was standing over me grinning. She brought the towel slowly to my rigid dick, and gently rubbed it over it, and down to my balls. After all this time, I was dangerously close to blowing the biggest load of sperm I think I'd ever built up, and trust me, with my imagination over the years, I'd built some doozies.\n\n\"I know you won't last long,\" Kristi said, a completely open and serious look on her face, \"But I want to do this. For you, and for me. So you will last for us.\"\n\nWith that, she sank to her knees between my legs, cupped my balls with her left hand and grasped the base of my cock with her right, and slid her mouth over the head. Her eyes were locked on mine. My whole body was in suspended animation, as my mind screamed that it was FINALLY happening. Then she swirled her tongue around the knob, and with a hollowing of her cheeks, slid half my length into her mouth.\n\nMy toes bent backwards, my legs went to full rigid extension, held apart the width of her slender waist. The sensation was beyond any imagining, a sensual overload so strong that I was gasping for breath, trying to say how good it felt. Weak little sounds were escaping from me, like a tea kettle building up steam.\n\nKristi pulled back, swirled her tongue again, then began a slow bobbing of her head. She never tried to take more than half of me. Mr. Stiffy was ecstatic, and my hips were trying to rock my cock deeper into her mouth. Kristi had her hands on my hips, controlling the force I could exert. I realized that she had done this before, and thanked God someone knew what they were doing.\n\nThen I felt it. My eyes opened wider than I thought possible. My thrusts were bringing my ass off the bed, and Kristi rode with it, her eyes never having left mine. My ass clenched tight enough to form diamonds, the only things touching the bed were my thighs and the back of my head.\n\nI came.\n\n\"OOOOOHHHH FFFFFUUUUUCKKKKK,\" I wasn't loud, it was just the steam escaping the kettle.\n\nKristi's eyes went huge, her cheeks ballooned out, I could feel that she was trying to swallow, but I was spasming huge jets of cum into her mouth, as fast as my muscles could fire. Cum began to run out from the corners of her mouth, a huge glob of it rolling down my shaft, onto her hand, and still I was cumming, shooting into her mouth, her throat. She coughed, and sperm jetted out around her lips up to my belly, but she tightened up again, and kept swallowing.\n\nAn eternity later, thirty or forty seconds, I slowed down to just dribbles leaking out of the slit in my cock. Kristi swallowed two more times, sucked hard for a time to make sure I was done, then released my softening dick with a little pop.\n\nA last spasm hit me, and a little ball of spend arched out and fell splat on top of her left breast. I blinked the tears away, and could see that Kristi had my cum slowly running down her chin, sliding off to drop onto her chest and tits, joining the little splat. It began pooling in the valley of her tits. I had never seen anything as erotic, as beautiful as she looked at that moment.\n\n\"Jesus!\" she exclaimed. \"I never... that was... Christ, I don't have words. I knew you were full, but I never expected that!\" She began laughing, her titties shaking, sperm sliding, and I began to catch my breath and laugh with her. She picked up the towel from where she had dropped it on the floor and wiped my seed from her face and body.\n\n\"Oh my god, babe, Kristi; I can't believe that happened. So Good, so, so. Damn.\"\n\nShe leaned forward, and ran her tongue up my stomach, where the cum had pooled when she coughed, and began to suck and slurp it up. Her face scrunched up into a delighted grin. \"I never really like the taste of a guys sperm, but yours is, I don't know, fresh, a little salty, good. She cleaned around the base of my dick and licked her hand clean.\n\nMr. Stiffy, my proud soldier, who had never made it past \"At Ease\", sprang instantly to full attention again, and poked Kristi under the chin.\n\n\"Holy shit!\" she yelled, grabbing him with her hand. \"You're ready to go again already?\"\n\n\"Yeah, but first there is something I want to do. For you. Maybe a little for me, but mostly you.\" I stood on shaking legs, and gripping Kristi's shoulders, pulled up and around, and sat her on the edge of the bed where I had been. I went to my knees. \"Shit!\" Once again, nature screwed me. I was too short to reach the Gates of Paradise from there.\n\n\"Oh, Ken, don't worry about it. There is always a way.\" Kristi knew what I wanted, and by the expression on her face, so did she. She slid up the bed and ripped one of the big pillows from the headboard, and slid it under her lower back and ass. She smiled as she spread her legs, pulling her knees back and up to open herself to me.\n\nI launched myself up the length of the bed, grasped her tit with one hand, and turned her face to mine with the other, and sucked her lips into mine. I opened my mouth and pushed my tongue into hers. After a little more tongue fencing, I pulled my head back, and started kissing my way down her cheeks, neck, with a detour to her ears. I tried the nibbling the earlobe thing I had read about. Kristi seemed to like it, so I did it to the other one. I resumed my way down, circling her tits, licking and kissing all around them, spiraling closer to the goal slowly. Kristi was making those low moans again, so I knew I was doing something right.\n\nI stuck my flattened tongue out, and slid it across her nipple, continuing down, over, and up to the other one. The moaning got louder. Then, I latched on to her right tit, and started to suck like it was life itself. Kristi had her hands on my head, fingers stroking through my hair, and began guiding me over to the other side. I let her lead, dragging my tongue in between kisses as I went. Then the sucking continued.\n\nWhen her nipple and aureoles were crinkling up, I paused and looked up to see her smiling at me. I bit her nipple. Her shriek and the look of pained ecstasy on her face was incredible, so I did it to the other one. The shriek repeated, and her breathing got ragged. \"So good,\" she moaned, her hips gently moving on the pillow.\n\nFiguring I should quit while I was ahead, I returned to my journey to Heaven starting at the bottom of her breasts, where the tits began their fabulous rise to prominence. Kristi's tits were the size of large apples, and firm enough that they didn't flatten out much when she lay back. Entrancing. Gorgeous. I didn't want to leave, but Heaven was calling.\n\nRemembering her reaction with the towel, I kissed my way to her belly button, and kissed it, then stuck the tip of my tongue in it and swirled it around in the tiny hole. Kristi grabbed my head as she groaned, then giggled, and forced it away.\n\n\"Not there, Ken. That's the automatic kick 'em in the balls, spot.\"\n\nI grinned up at her through the gap between her tits. Stuck my tongue out and dipped it in again, then quickly kissed my way to her little landing strip of a bush. It was as black as the hair on her head, but with a slight curl to it, rather than straight. That rubber mallet was beginning to make it's presence known again. I saw that Kristi had freshly shaved and trimmed everything at Heaven's Gate, making me wonder just how much she had suspected. Then I wondered, sucking in a great breath, if it had been for me...\n\nI couldn't hold back another second. I slid down and ran my tongue through the slit of her sex. My God, the scent and the taste! I pulled my head back to simply gaze at her perfection. Her outer lips were as slender as the rest of her, but puffed up with her desire. The inner lips were stuck together with her juices, deep pink,just peeking through the outer lips. Kristi was still groaning, and her legs were again up and back.\n\nWhoa, there boy. Don't be too eager, I thought to myself.\n\nI caught hold of her left knee, and planted a kiss there, and nibbled my was up her thigh. The skin was so smooth, the texture like silk. I neared her slit, and kissed up along her outer lip and thigh. I inhaled, and again ran my tongue up her slits length, from just over her puckered anus, to a flick at her hooded clit.\n\nKristi was making little squeaking sounds, and her hips were thrusting at me. I grabbed her right leg, and repeated.\n\n\"Goddamn it, quit teasing me! You're killing me here, Ken!\"\n\nI was back to the entrance of Heaven, and Kristi had me by the hair, and was not letting me go. I wasn't sure just what the rules were, so I figured Kristi would let me know one way or the other. I put a hand under each thigh and pushed them up and out and commenced to munch that muff.\n\nKristi exploded. Sighs, moans, groans and squeals as I licked up and around. I pointed my tongue as much as I was able, used two fingers to spread the inner lips apart, and stuck it in her pussy. The lord giveth, and taketh. My tongue wasn't anything to write home about. But as she had said, there was always a way.\n\nWhen I started mining her pussy, I struck gold. Her juice was flowing, and I sucked it up as best I could. The sweet, tangy and somewhat musky flavor lit my taste buds on fire. I couldn't get enough. I ran my tongue up to her clit, which by this time was out of her cave and pulsing a code that said Hi! Suck here! So I did. I also stuck my index finger into Kristi's cunt so it wouldn't feel left out.\n\nDid I say Kristi exploded? A sound that started low and slow tore out of her and ran up the scale in tone and volume. Her thighs clamped around my head, and I felt like I was losing hair as her hands shook, and forced my mouth tighter to her pussy. I was flicking her nub with just the tip of my tongue, and now had three fingers shoved into her, and was working them in and out. Her hips were bouncing, and I felt the edge of the bed to one side. I don't know where the stupid pillow went. This is what ground zero was like during a nuclear test.\n\n\"HOLY FUUCK!!! Oh shit, oh Shit! FUCK ME, Oh God, Help me, EAT MEEEEE!!!!!!!!\n\nWe hit the floor, and the spread and most of the blanket came with us. I was twisted on my back and side, with Kristi more or less on top of me, her hands still clutching my hair, and her cunt humping my face. I don't think she noticed the change in locale.\n\n\"OH FUCK, FUUCKKK. EAT ME!\" Kristi was screaming, and everybody on the floor, and maybe above and below, knew what was happening here. Didn't care. I got my fingers going again, sucked some more of that elixir out of Kristi's pussy, and started rubbing her clit with the thumb of my other hand. My head was bouncing on the floor.\n\nSuddenly, the pressure of hands and thighs loosened. Kristi drew in a huge breath of air, and let it out in a long soft squeak. She rolled off of me, and bounced on the side of the bed. Now that I could see again, I saw that the covers had fallen so they draped over her upper body and head. Her arm swept them aside, and as her head reappeared, I had to laugh. Her long, black hair was a complete mess, sweaty and tangled, draped over her shoulders and tits.\n\nDamn, I was proud of myself.\n\n\"Holy shit Ken, where did you learn that!\" Kristi was chuckling and gurgling, with a bright smile pasted to her face. \"How did we get down here?\"\n\n\"Well, there was this fifteen year old cousin when I was twelve, I don't remember details, but she may have taught me something. As for here, you kind of bounced us off the bed.\"",
        "\"You mean to tell me this is the first time you've ever eaten a pussy? Twelve doesn't count.\" She was starting to get her breathing back to normal. \"Christ on a crutch! Michele's good,\" She colored prettily, then went on, \"But that was unbelievable. And you didn't even hit my G spot.\" She saw the confused look on my face. \"You don't know what that is? After I teach you I might as well make out a last will and testament. Got to love enthusiasm.\"\n\nI heard, \"After I teach you.\" Shit, I haven't screwed it up yet!\n\nWe stood up, and Kristi pulled the blanket and spread the rest of the way off.\n\n\"We won't need those. Lie down, I gotta go pee.\"\n\nI jumped onto the bed, and lay on a pillow with my hands behind my head. Yep, I was feeling better than I ever had, and Kristi was telling me she wanted more. Life was good.\n\nKristi had left the door to the bath open, and I could hear her sigh as water hit water. If Mr. Stiffy wasn't still so hard, that might not have been a bad idea, but I didn't think I could get a flow going.\n\nKristi came back to the bed and slid on next to me. I could see her staring at Mr. Stiffy.\n\n\"Does that thing ever go soft?\" she asked.\n\n\"His name is Mr. Stiffy\", I said. She arched an eyebrow at me. \"Well, all these years it's just been the two of us, I had to call him something.\"\n\n\"I see\", she said. \"Well, I hope Mr. Stiffy is up for a ride. Because you're not leaving until that flagpole has been inside me.\"\n\nI rolled over, and kissed her as passionately as I knew how. Kristi started coaching.\n\n\"Not so hard, just let it flow. Take your time, we're not going anywhere. Ouch! A tongue is tender.\n\nThat's right, just nibble. Don't be afraid to pinch. You'll know if it's too much. Let me see your fingers.\" Kristi sucked them into her mouth, and let them get good and wet, guided them to her clit. \"Now rub.\" It was comfortable, and good.\n\nAfter a time of this, she pulled her mouth from mine. Grabbing soldier Stiffy, she cocked her head at me and said, \"It's time.\" She leaned down, and slid me into her mouth. I could see spit dribbling down the shaft. She spread it with her tongue, slowly bobbing her head.\n\nKristi sat up and threw a leg over me. She was smiling, and now I knew what people meant by seeing lust in someone's eyes. Those blue-gray eyes.\n\n\"I've never been near anything this big, well, I haven't had many, but you know what I mean; so I'm going to start on top to make sure everything gets going OK.\"\n\nMy breath caught in my throat, Mr. Stiffy was painfully erect. Here it was, the moment of truth; a beautiful woman wanted me. Was going to have me, and I her. I hoped Kristi could see the lust in my eyes. I wanted her more than life itself.\n\nKristi gently took my cock in her hand, held it up and centered herself. With a gaze centered on the next galaxy, she began to lower herself down.\n\n\"AAHHhhh\", we both sighed, as the crown began to spread her inner lips. She paused, then went a little lower. Lower still.\n\n\"Oh, fuck me,\" she whispered. She shifted a bit, to change the angle. Lower still. I pulled a pillow under my head and shoulders so I could see better.\n\nMr. Stiffy was half way in, and the feeling was tight firmness, slowly opening and giving way. Heat, moisture. I could see Kristi's juices running down my dick. She raised up a little, then pushed down again. Six inches in, almost there. Kristi did it again, and almost gone.\n\nMy eyes were crossing, sounds were leaking from both of us. \"Oh, good, soo good. Hmm.\"\n\nKristi stopped, looked down at me, her gaze returning to here and now. \"Never been so deep, so full. So damn stretched. Never been So Good!\"\n\nShe rose, paused, and dropped. Her pussy was on a mission, and it would not be denied. She squeaked again as she bottomed out against my pubic bone. Now she was the tea kettle, leaking steam. Then she began to move.\n\nI thought I was going to die. I was in Heaven. Figuratively, and literally. The sensations being reported by Mr. Stiffy were incredible, unbelievable. He had never been so happy.\n\nKristi was rocking on my cock, making little circular motions, with a lift in the middle. The steam leak got louder, more continuous. More juice was flowing from her, and where we met was soaked.\n\nHer eyes, glorious eyes, locked onto mine, and the motion changed. Kristi started to rise higher, move faster. There was a slap as she hit bottom. She leaned forward, bracing her arms with her hands on my shoulders, and her ass began to speed up and down my pole. Her gaze was back on the Magellanic Clouds.\n\nKristi collapsed on me, her tits squashed against the top of my chest. Her mouth mashed against mine. Tongues fought and danced. Her hands cupped my head, stroked my hair. My hands cupped her ass cheeks, helping to keep the rhythm, pulling her down, harder and harder.\n\nShe broke the kiss, eyes closed, breath coming in ragged gasps. \"Now!\" she screamed. \"Fuck me now!\"\n\nI grabbed her ass as her legs locked around mine, her arms locked around my shoulders, and we rolled. It would have been perfect, except we each went the opposite way. Eyes popped open, laughter ensued, then we did roll, and I was on top.\n\nMy hands slid up and forced her legs up, until her thighs were mashed against her breasts. I gathered my knees under me. And then I began to fuck Kristi. Long strokes, guided by little more than instinct. I took a clue from her, and began to include circular motions as I stroked in and out. Ah, I thought, screwing!\n\n\"Oh God, baby, Ken, that's it. Just like that. Oh, faster. Yeah, So Good. Go a little harder, fuck me, I won't break.\"\n\nI did my best to obey, speeding up, slamming into her, the bed shaking and pounding the wall. Then I changed it up, going to rapid short strokes, barely moving out, circling again, before crashing back in. She was shaking, squeaking, gasping. Her eyes were rolling to the back of her head, her hair was flying side to side as her head rolled. Her hips were pumping up into mine. I had never seen or felt anything like it.\n\nMr. Stiffy reported that he was about to be very happy again. I reorganized my legs, and went back to long, powerful strokes as I held Kristi's legs up in the air. Her tits didn't flop so much as describe little controlled circles on her chest. I was mesmerized.\n\n\"Oh, oh Ken. Love Mr. Stiffy. So good. So DEEP! Can't stop cumming. Don't make me stop!\"\n\n\"Babe, I'm going to cum soon, Where, where do...\"\n\n\"It's OK, all good. Pill. Fill me. Fuck me. Pound me. I want, I want it...\"\n\nI was pounding her into the bed, stroking the full length of my rod of steel. My toes and hands were all that touched the bed. My ass hurt from the force of my pounding. I couldn't believe how good it felt, how happy Mr. Stiffy felt. Sweat was running off me, onto Kristi, her body glistened with it mixed with her own.\n\nI came with a bellow. I had never bellowed before. I thought the first time, in Kristi's mouth was powerful, intense. Now I knew what it meant. My cum hit the back of her cunt, hit and splashed. My cock was pounding into her cervix, and there was no room. I looked down, and her juices and my cum were rolling out of her, running down her ass, pooling on the sheets.\n\n\"OH FUCKINGHELLLLLL!!!! AAAAAAAAHHHHHHHHH FUCK ME. Dying! CUMMMMMINGGGGGG!!!!!!\" Kristi was screaming, Not shaking so much as vibrating. Only the whites of her eyes were visible. Her arms and legs were locked around me, pulling her up off the bed.\n\nI collapsed as I stopped spurting my seed into her. I couldn't move, except for jerks and twitches, in the aftermath of the most powerful climax I'd ever had.\n\nKristi was in the same state. Twitching, legs jerking where they were clamped around mine. Her face and tits were bright red, her breathing erratic, full of little squeaks and steam. I could see the color of her eyes again, a bright, deep blue. As I watched, they faded back to the ice blue of normality. A deep gasp, and her muscles loosened as reality returned.\n\n\"Hey Ken, you're not a virgin anymore,\" Kristi murmured. \"Thank god; any more experience, I think you would have killed me.\"\n\nShe shifted under me, kissed me tenderly on the cheek. I kissed her back, no urgency, no need. The kiss of a satisfied man.\n\nThere was a knock at the door. We both jerked, and Mr. Stiffy, now sated, slipped out of Kristi's pussy, followed by even more mixed juices. The knocking came again, along with voices.\n\n\"Shit! Dave and Sandy.\" I rolled out of bed, grabbing the blanket from the floor. Kristi slid under the top sheet, pulling it over her breasts. There was a huge wet stain in the center of it, visible to any one who looked.\n\nI answered the door, Dave, Sandy, Paul, Janine, and Kate all trooped in, giggling and laughing.\n\n\"What the fuck?\" What's up with this? I was embarrassed, and not sure whether I should be mad at the intrusion, or glad to see friends who cared.\n\nSandy and and the girls were doing some sort of telepathy with Kristi, and they were all making eyes and laughing. The laughter of friends happy for each other.\n\n\"Hey man, thought maybe you'd like your stuff. So we thought we'd bring it by, you know, and make sure Kristi hadn't killed you yet. Kate said she heard someone screaming in here.\" Dave threw my kit onto a chair. Then he began to see the wreck of the room. \"Shit guys, I guess you've got it under control, eh?\" He fist bumped me\n\n\"That's a hell of a wet spot\", said Paul.\n\nJanine smacked his arm and snorted. \"You wish you could make one that big!\" She broke up in laughter again.\n\n\"Are you all right, Kristi? You look, well, good.\" Sandy was by the bed, touching Kristi, who was still breathing hard and blushing, on her shoulder, A gentle smile played on her lips.\n\n\"Oh, you have no idea! I'm so alright, I've never been more alright. I think I saw God!\"\n\nThe girls broke up in howls of laughter, the guys turned red and looked every where but Kristi or me.\n\nPaul set a bag on the desk, \"They were closing up down there. Thought you might need something, so there's some beers and sodas if you want them.\"\n\nKate was eyeing the huge wet spot on the sheet, \"I'm glad someone got some use out of the room.\"\n\nI looked over at her curiously.\n\nKate grinned and sat on the foot of the bed, \"I heard that Steph is in jail. She wrecked Steve's car, and when he got there, she kicked his balls off. He's in the hospital.\" She made sure she had Kristi's attention, and added, \"He was so sure of a good thing, it seems the room is paid for two nights. In case anyone wants to know...\"\n\nSandy waited for the gales of laughter to die down, then began hustling everyone out. As she paused at the door she looked at us over her shoulder and said, \"I'm happy for the two of you. Be good to each other.\" As the door closed, we heard a shouted, \"David! Take me to our room! I want a wet spot like that!\"\n\nI turned to the bed and Kristi. Damn, that was a huge spot. I let the blanket drop, and slid in under the sheet till I was cuddled up against her. \"I don't know why those guys did all of this. Why Sandy and the girls set this, us up. I didn't know what they were planning, just that it was something.\"\n\nKristi rolled until an arm and a leg were laying across me, her knee gently letting Mr. Stiffy know he wasn't forgotten. Her breast was still burning a hole through me. Her lips nuzzled my neck.\n\n\"They did it because you are a good guy, a good man. I'm glad they did. Since,\" Kristi inhaled a breath, not looking at me, \"that day, I've felt horrible. I was wrong. I know it, knew it then. In my mind, I kept trying to justify what I did to you, how I hurt you. And I realized, that it wasn't the first time for you. To be hurt that way. And the more I excused myself because of what other might think, seeing us together, with me being taller than you, the worse I felt. God, I couldn't stand to see myself in the mirror.\"\n\n\"Sandy must have talked to Michele, and she unloaded on me. Then, after her anger cooled, she started really speaking to me of her own hurts and experiences. You two should meet.\" Kristi raised up onto an elbow, and smiled down at me. \"You could give her some pointers on eating pussy.\"\n\n\"The point is, I was at least as miserable as you, and by then I couldn't face you. I wouldn't have blamed you if you hated me, was afraid you did. When Kate started bugging me about the party, I was so depressed that I could barely go to classes, so she took pity on me. Told me what the girls were setting up.\"\n\n\"I didn't lie that day when I said I really liked you. From that first week in class, you fascinated me, and the more I got to know you, fascination began to turn to infatuation. I couldn't wait for you to ask me out. I hinted, I sent all the signals. I could not understand why you waited so long. Then, when you finally did ask me out, my eagerness suddenly twisted into fear. Fear that my friends wouldn't understand, and only see the difference in our heights. That I would be rejected.\" Her voice was soft, speaking to herself, \"God, that must have hurt.\"\n\n\"When Sandy told me that you were an innocent, to be patient; I understood, really understood how lonely and painful your life must have been. My heart nearly burst. Yet you are still a good, caring man.\"\n\nNow Kristi looked at me, her eyes fastened on my face, trying to read my soul.\n\n\"So today was my day of redemption, to make it right. I was happy, yet so damned scared that you would rebuff me. Now I know how truly wrong I was about everything. The look on your face, in your eyes, when you turned to me, gave me hope that it would be all right.\"\n\nI didn't know what to say. Silence lingered. The truth fell out. \"Kristi, from the moment I saw you, you excited me. I couldn't believe my luck when you got that first paper, and then the lunches, the discussions. You wanted to be with me. Then, a group of friends. But always you. You're smart, you make me laugh, and get my stupid jokes. So incredibly gorgeous, every bit and particle of you. Especially the parts of you I saw tonight. I could lose myself in your eyes alone for eternity, and count myself lucky. You are everything I ever dreamed of in a woman, and knew I could never have. I don't want tonight to ever end, because it can't be real, and I'll wake up alone. Tonight feels like the Dream within a Dream. Poe may not be the best inspiration...\"\n\nKristi kissed me. I felt a tear fall on my cheek. She kissed it back off.\n\n\"Hold me. Love me. Make Love to me.\" The kisses resumed.\n\nI lifted her leg, and slowly penetrated her. Our lovemaking was long, and gentle and passionate. We both cried through most of it. At the end we came together, quietly, two tea kettles giving off steam. She squeaked, just a little. Enough to let me know she was pleased.\n\nMr. Stiffy had never felt so loved.\n\nThe next twenty four hours we discovered each other, reveled in each other. We found that that bed was the perfect height to bend her over the edge and pound her from behind, which Kristi loved, or lay with her butt on the edge with her legs wrapped around me and leisurely pleasure each other, which I loved. Those gentle swirls Kristi's tits make fascinate me to this day.\n\nWe found that 69 only works with Kristi on top, because Mr. Stiffy does not do backwards. I discovered what a G spot is, and we ended up on the floor again. It took an hour of laughter to recover from that one. We tried and explored everything we could think of.\n\nMichele had breakfast with us Sunday morning, after we left the room. Lord that girl is tall. When we met I stood on a chair in the lobby to hug her, and thank her. Michele thought it cute, Kristi was roaring. Michele told me that Kristi's bikini cost almost twenty six hundred dollars and so far there are only six in existence. And promised slow death if I told her.\n\nI have four hundred ninety nine dates left to see if we are compatible.\n\nEpilogue:\n\nIt has almost been eight years since The Party. We have stayed in close contact with Sandy and Dave, and Kristi, Janine and Kate are still good friends. Janine and Paul broke up the next year, but Janine is engaged to a really great man named Dustin. Kristi loves pointing out the he is a couple inches shorter than her. Kate is having fun dating, and looks better than ever.\n\nThe Woman's hot-line must have heated up some, after The Party, because I started noticing girls paying more attention to me. I even had invites to some of the Greek events. Kristi and I went to a couple, and while fun, we had more fun discussing how the idiots were trying to separate us. The guys were all hitting on her, and the women were trying to confirm what I had in my pants. We agreed that we didn't need that crap. We had each other.\n\n\"You have the reservations made, honey?\" Kristi asked me.\n\n\"Remember Squeaky, I told them to just book us for those dates every year. Room 427. The plane tickets are all set. I hear there may be a party happening at the hotel that weekend. Sandy and Dave are hoping to be there. We'll drop the kids off with Grandma and Grandpa on the way to the airport. \"\n\nKristi squealed, \"Cool! Skinny dipping!!!\"\n\nWe were married three years later, just before we graduated on a beautiful Spring day. The date just happened to coincide with the date of The Party. We have a daughter, Kaylee, and a son, Kevin. Kaylee is three, and Kevin is one year old. Kristi is talking about maybe one more.\n\nKristi teaches American Literature at a small, nationally known private college near her parents home in Michigan, where she grew up, and is doing well. She published a \"Juvenile\" Science fiction/fantasy novel, and we are collaborating on a similar, more adult themed story. My nerd tendencies have rubbed off on her.\n\nMe, I work from home, so location doesn't matter. I worked for large corporation for two years doing technical writing, but discovered I can make more money as an independent, and have a growing clientele. I also do a science and technology channel on the internet that is also growing, and starting to provide income. I also get to stay home and spoil the monsters.\n\nWhen Kristi took me home to meet the family, I was a nervous wreck, she had the confidence of a Jedi Knight. We arrived, and though I was greeted warmly, I could tell there was a tension. I had seen the Look on her family's faces. So had Kristi.\n\nJust before dinner that first night, Kristi excused herself, and took her parents and older brother into the kitchen. I could hear voices, but not what was said. Fifteen minutes later, they emerged. Kristi's mother's face was pink, and she gave me glowing smile. Her dad and brother gave me man hugs, which was awkward, because they were both approaching six feet in height.\n\nKerry, Kristi's brother said, \"Dude, I'm jealous. Kristi's a lucky girl. You take care of my baby sister.\"\n\nThat night I asked her what she said to them.\n\n\"I told them the truth. That height didn't matter, because in bed, you have the four fucking inches that women dream about, and stand taller than most other men on the planet.\" Kristi then proceeded to make Mr. Stiffy very happy, and the whole house knew it.\n\nI had never considered it that way.\n\nFour Fucking Inches."
    ],
    "authorname": "AFoolRushesIn",
    "tags": [
        "romance",
        "virgin",
        "college",
        "party",
        "short height",
        "romantic"
    ],
    "category": "First Time",
    "url": "https://www.literotica.com/s/four-inches"
}
{
    "title": "Childhood's End",
    "pages": [
        "Short and sweet for Summer Lovin 2020. It's my first ever contest submission and is inspired by a true story and some great memories.\n\n*\n\nBack in the Summer of '87, my dad took me and my brother to a resort in Wisconsin for a week's vacation. I was just a 13-year-old kid and wasn't really looking forward to missing sandlot baseball games in favor of fishing at 6 am, but I didn't have a choice. \n\nThe drive was over four hours from our suburban Chicago home and back then we didn't have any electronic devices to pass the time and it was boring. Kids today will just never know that depth of true boredom. \n\nTo pass the time, my dad came up with a thing where he would count down 3-2-1 and then we'd all turn our heads and look at the people in the car next to us at the same time with a shocked expression on our faces. It was silly, but that was dad. \n\nMy dad didn't even have a good tape selection in the car. Enya, Duran Duran, Dire Straits, and The Traveling Wilbury's were played on rotation when we couldn't get a good radio station. Looking back, all of those are legendary artists. It's funny how time changes perception. \n\nThe resort was basically a motel with an attached lodge on the lakefront with a few cabins. They had those old aluminum boats that you could rent to fish on or you could swim and fish off of the dock. \n\nThe good thing was that the water was crystal clear. \n\nThe owner was an old friend of my dad's and he lived up there with his family in the summer. When we checked in, I saw a girl about my age playing the jukebox in the small bar they had. \n\nAbove the jukebox was a big wood carved sign that announced you were in The Bear's Paw Lodge. It was that kind that had the charred lettering. It was very rustic looking and fit the old place nicely. \n\nIt was a cool old jukebox that played old 45's, but it seemed to be broken. It only played one song at a time. The girl sat there and fed it a quarter after each song ended. \n\nI got up my courage and walked over to say hi after getting some quarters off of my old man. \n\n\"Hi, I'm Jeff,\" I said. \"Can I play a song or two?\"\n\n\"Nope,\" she said. \"You can give me your quarters and I'll play the songs though.\"\n\nI laughed and said, \"Nope. You keep paying. You're doing just fine.\"\n\nShe gave me a sneer and since she didn't seem interested in talking, I went back to my dad who was ready to go to our room. \n\nMy dad's friend, Gus, handed him the key and shouted, \"Hey, Vicki, show them to room 4.\"\n\nThat wasn't really necessary. It was a four room motel and all of the rooms were sequential, but I think he just wanted her to do something. \n\nIt's Still Rock And Roll To Me was playing and she complained, \"Aw, Dad! After my song please.\"\n\n\"Nope. Right now young lady,\" Gus said. \n\n\"Fine. Let's go,\" she said walking out the door without waiting for us. \n\nWe walked the 50 yards to the room and she said in the most bored tone possible, \"Here's your room. If you need anything, let us know. Welcome to The Bear's Paw Lodge. Enjoy your stay.\"\n\nShe ran back to the lodge, no doubt hoping to hear the rest of her song. \n\n********\n\nThe first few days were filled with swimming and fishing. Gus had two younger boys that were fun to hang around with and they seemed desperate for our attention. I thought that maybe it was more of an old men fishing type of place than a kid-friendly place and they were starved for some other kids to play with. All there really was to do in the lodge was play Pac-Man or play on the lone pool table. \n\nOn the 3rd day, it rained - all day. I camped out in the lodge while my brother and the two other boys went looking for worms in the rain. \n\nAfter a couple of hours, my dad stopped feeding me quarters so I had to read the old fishing magazines that were laying around. \n\nI was so bored I had almost decided to go look for worms when Vicki walked in. She walked over to me and asked, \"Got any money for the jukebox?\"\n\n\"Nope, sorry,\" I said. \n\nShe grabbed my arm and said, \"Come on.\"\n\nShe took me out back to a covered carport that was about 100 yards from the main building. There were a couple of chairs set up with a small tray table. \n\nShe said, \"Let's play Truth or Dare.\"\n\nI figured, \"Why not,\" and played along with the reclusive girl that seemed to want to avoid me as much as possible. \n\n\"Truth or dare,\" she asked.\n\n\"Truth,\" I answered. \n\n\"Do you think I'm pretty?\" She asked. \n\nI almost laughed, but I took a moment to look her over and she was cute. She had brown curly hair that was cut short. She had a small nose and some freckles under her brown eyes. She was also very thin. \n\nI said, \"Yes. You're pretty.\"\n\nShe smiled and blushed. \n\n\"Truth or dare,\" I asked before she could comment on my answer. \n\n\"Truth.\"\n\n\"Why do you mope around here avoiding everyone?\"\n\nShe looked at me sadly and said, \"I hate it here. Dad bought this dump 3 years ago and ever since then my whole summer is always wasted. Instead of having a summer vacation, I have to work here cleaning rooms.\"\n\nI felt bad for her. When you're a kid the only thing better than Summer vacation is Christmas and she'd lost hers. \n\nShe snapped out of her malaise and said, T or D?\n\n\"Dare,\" I said, wondering what there was to do. \n\n\"Kiss me.\"\n\n\"Huh?\" I squeaked. \n\n\"Kiss me. You've kissed a girl right?\"\n\n\"Uh, sure,\" I lied. \n\nI leaned over and gave her a peck on the lips. She grabbed my head and pulled me back in for more. An amazing first kiss. \n\n*********\n\nAfter that, we spent the rest of my time there sneaking away as often as possible to make out with each other or just hang out and play pool and the jukebox. \n\nShe must have played that old Billy Joel song 50 times. I never got sick of it either. She'd dance all over the room singing along with a huge smile on her face. Using a pool cue as a microphone was a cute touch. \n\nI did find out that she lived and went to school back home about a half-hour away from me, but being so young, it may as well have been on the moon. \n\nWe got along so well that it was strange. I'd known her for only a few days, but it felt like she was my girlfriend. If we walked together, we always held hands. The making out part wasn't bad either. My dad even brought her out to dinner with us a few times. \n\nBut then, like everything, our time came to an end. Neither of us, that week, would speak about what would happen after I left. We wanted to enjoy every moment we had without dwelling on the sadness to come. \n\nOn our last day, I was putting our bags in the car and I was sad that I hadn't seen her all morning. She knew it was my last day and I wanted to say goodbye and give her my contact information. I figured that we could talk on the phone or at least write to each other. She never showed. Her mom said that she wasn't feeling well and was in bed. \n\nHer brothers and parents said goodbye to us and as we were about to leave her little brother handed me a note. \n\nHe said, \"She said to wait until you were in the car to give it to you.\" Then he ran into the lodge. \n\nAs we were driving away I looked back at the lodge and saw her standing by the door watching us drive away. \n\nThe note read:\n\nJeff,\n\nThank you for giving me some summer fun. I hope you come up next Summer. I'll miss you. \n\nVicki\n\nWe didn't go back for 5 years. \n\n**********\n\nYou have to remember that there was no email, no google, people had unlisted numbers, long-distance phone calls were really expensive, and people didn't have pocket computers back then. \n\nMy dad had given me her local address and phone number so I waited until fall and tried to call her. The phone number was no longer in service, so I had sent her a letter with my contact info. I was disappointed that she never responded. \n\nA couple of years later, I was hoping to connect with her once I got my license and could make the drive to her town, but that never happened either. When I went to her address, I was told that she had moved. \n\nAfter begging my dad to take us back every Summer since that year, he finally took us the year I graduated high school. \n\nMy 18th birthday was in June and he handed me a card. He said, \"I think you're going to like this birthday present the best, Son.\"\n\nI opened the yellow envelope and inside was a card that had some old lady in a cartoon on it. I didn't think it was funny, but it was from my dad so that was to be expected. \n\nInside the card was a shock. It was from Vicki. \n\nHer note said, Your reservation is confirmed for July 26th through 31st in the Chicago Bears cabin. Can't wait to see you! xoxo\n\nI was over the moon. I would finally get to see her again and she remembered me. \n\nI shouted, \"Yes!\" gave my dad a hug and said, \"Thank you.\"\n\nHe smiled and said, \"Easy, killer. You've got a couple of weeks to wait.\"\n\nAnd what a painful wait it was. \n\n*********\n\nThe drive up seemed to take hours longer than it should have. My anticipation level was through the roof. All I thought about for that last month was, Vicki. What would she look like? Would she like me? Would we pick up where we left off? Did she have a boyfriend?\n\nBy then I had a Nintendo Game Boy, so at least I had something to do on the drive up and the new van had a CD player. I was able to control the music and my dad tried to be a cool dad by suffering through all of my choices. \n\nWhen we pulled onto the mile-long road leading up to The Bear's Paw Lodge, I saw that nothing had really changed. There were paddle boats, which I didn't remember from before, but everything else looked the same. \n\nAs I walked through the lodge door, with my dad and brother, I looked around the room. As my eyes adjusted to the dim light, I saw the same lone pool table and the same old jukebox. \n\nI walked over dropped a quarter and looked over the songs. The labels were more faded, but the selections were the same. \n\nI remembered the number of the song without finding it and pressed B-17. The old machine moaned through its mechanical movements and after a moment the song blared out. \n\n\"What's the matter with the clothes I'm wearing?\" Sang Billy Joel. \n\nI was grabbed and spun around and was looking into the most beautiful brown eyes I'd ever seen. Her smile was ear to ear and she pulled me into a hug.\n\n\"I can't believe you're really here,\" she said. \n\n\"I've missed you so much, Vicki. You can't even imagine.\"\n\n\"Yeah, I think I can,\" she said laughing. \n\nShe grabbed my hand and led me out the front door past my dad checking in. \n\n\"We'll be on the dock,\" Vicki said to her mother who was talking with my dad. \n\nMy dad just laughed and waved us on. \n\nShe was already barefoot and sat down putting her feet in the water without letting go of my hand. I kicked off my sandals and sat down hip to hip with her. \n\nShe snuggled into my shoulder as I let go of her hand and put my arm around her. \n\n\"Do you have a girlfriend?\" She asked. \n\n\"No, do you?\"\n\n\"Nope,\" she said, \"and no boyfriend either.\"\n\nShe giggled at herself and then said, \"I'm sorry I didn't say goodbye last time. I was too sad.\"\n\n\"I understand. I was depressed for a while and missed you. My dad got your address for me and I wrote to you, but I didn't hear back.\"\n\n\"I never got it. I tried to 411 your phone number but you're unlisted.\"\n\n\"Ugh! Such wasted time. I thought that we could have gotten together after our time here.\"\n\n\"No, it couldn't have happened. We moved up here year-round at the end of that Summer. It sucks here. I can't wait to go to college and get out of here.\"\n\n\"Where are you going to school?\" I asked. \n\n\"Carthage down south. Still in Wisconsin, but closer to a city. I hate it out here in the sticks. Where are you going to school?\"\n\n\"Southern Illinois University. All the way at the bottom of the state.\"\n\nShe frowned. I guess she was hoping we could be closer. I know I had hoped it. \n\n\"So,\" she said, \"have you practiced your kissing, loverboy?\"\n\n\"I've kissed some, but none of them were you.\"\n\nShe smiled and I leaned over to kiss her. Soft and tentative at first but becoming more passionate as the moments passed. She spread my lips with her tongue and I opened to let her in. \n\nShe tasted like bubblegum chapstick and her lips were as soft as I remembered. Our tongues danced and she hugged into me with a warm embrace. \n\nWe heard the footsteps at the same time and broke apart to see our younger brothers walk onto the dock with fishing gear. \n\n\"Excuse us, lovebirds,\" her brother said. \"We're going to fish.\"\n\nShe got up with a death glare on her face and walked over to her brother. As I got up to follow, I laughed as she pushed him into the lake. My brother wisely backed away as I caught up to her and she grabbed my hand. \n\nWe walked over to the old carport where we spent so much time before. \n\n\"Boy, nothing really changes here does it,\" I said, as we sat in the same chairs with the same table. \n\n\"Nope. Same old boring Bear's Paw, except that you're kissing has improved,\" she said blushing. \n\n\"I had a girlfriend last year. She dumped me for a neighbor that was in college. Not much I could do to compete with that. She did like to make-out though.\"\n\n\"That's crap. You're a great looking guy with a tongue like a snake, I can't believe she'd do that.\"\n\n\"It is what it is,\" I said. \"I didn't feel for her after a year, the way I felt about you after a week.\"\n\n\"I felt something then as well,\" she said softly. \n\nI leaned over and kissed her again. We made out pretty heavily until I heard my dad calling out for me. \n\nWe broke apart as my dad walked around the corner. \"Hey, Jeff. We're going into town for some lunch and groceries. Come on.\"\n\n\"Jeez, Dad. Can't I stay here? I'm catching up with Vicki.\"\n\n\"Nope, let's go.\"\n\nShe kissed my cheek and said, \"I've got some work to do anyway. Meet me on the dock after dinner. We can take a paddleboat out. I know a cozy little cove tucked into some trees.\"\n\nShe winked and walked away. I couldn't help but check her out from behind. She had a perfect little heart-shaped ass that I hoped to get a handful of at some point. \n\n**********\n\nWe met that night and had another wonderful make-out session. I got to second base but petting farther was difficult in a paddleboat on the water. \n\nWe spent every minute that she wasn't working and I wasn't with my family together. It was like back when we were 13 all over again and it was bliss. \n\nThe grounds were a large wooded area and we took a lot of walks together. We held hands while we walked and we embraced while we kissed. We talked for hours about everything and nothing. \n\nI would miss her worse when I left her than the last time. \n\n********\n\nWe were leaving on Sunday and she didn't have to work Saturday, so I convinced my dad to let me spend the day with her. \n\nIt was a beautiful day, the sky was clear and bright blue and the water was still and calm. \n\nWe borrowed one of the lodge's aluminum boats. She made me laugh when she wasn't strong enough to pull the cord to start the outboard motor. \n\nShe did steer though and took me to a large sandbar that was in a secluded section of the lake. It was large enough to lay a blanket out on and we had a picnic. We kissed more than we ate and since we were finally alone got a lot more friendly. \n\nShe was wearing a red bikini and after a few minutes, her top was off. She had the most amazing breasts that I'd ever seen. They were perfectly proportionate to her lithe body and her nipples were hard as a rock as I licked and sucked on them. \n\nI licked and nbbled on her neck and ear lobe, while I gently squeezed her tight ass. I found a spot, just under her jaw, that made her shiver when I licked it. I spent a lot of time there. \n\nShe moaned and sighed as I brought my hand around to her front. I didn't know how far she'd let me go, but I was too far gone to stop. I cupped her mound and pressed my middle finger into the thin fabric hiding her treasure from me. \n\nShe breathed heavily into my ear and said, \"Go ahead, sweetie. It's okay.\"\n\nI kissed her and moved my hand inside her bottoms. I felt the warmth and wetness of her pussy, only the second that I had ever touched. I was able to find her clit easily as it was more pronounced than my last girlfriend's and I knew I had it when she gasped. \n\nI gently massaged her button as we kissed. I never wanted to stop kissing her. It was the most amazing experience of my life. \n\nShe started to squeak and make little mewling sounds as her body tensed and shook. \"Oh, baby, that's it I'm going to cum, Ahh!\"\n\nShe cried out, \"Yes, just like that. Right there. Oh God yeah!\"\n\nI felt her juices flow over my fingers and after a moment she said, \"Slow, it's really sensitive now.\"\n\nI rubbed her for another few seconds and then pulled my dripping fingers out of her bikini. I put them into my mouth and tasted her nectar. It tasted divine. \n\nShe sat up and said, \"Jeff, I'm a virgin.\"\n\n\"Me too.\"\n\n\"I want you to be my first. I can't think of a more special way to go.\"\n\n\"Are you sure? I mean...\"\n\n\"Whatever happens after you leave tomorrow is going to be meant to be. We are both going off to college and we live hundreds of miles away from each other, but I don't care about any of that. We can try to make something work. We have our whole lives ahead of us.\"\n\nI kissed her and then she reached into her bag and pulled out a condom. \n\n\"Please make love to me.\"\n\nI stood up and took my clothes off as she took her bikini bottoms off. I knelt down and embraced her while kissing her like it would be the last time I tasted her lips. \n\nI rolled the condom on and she pushed me to my back. Straddling my hips, she lined her dripping tunnel up with my iron-hard shaft and slowly lowered herself. \n\nThe tightness that enveloped me was almost painful. Her eyes were closed and she was biting her lip taking me inch by inch inside of her. \n\nWe always hear about a woman's first-time being painful, but she didn't seem too bad. I was glad she was in control, I'd be afraid to hurt her. \n\nShe bottomed out and slowly moved in circles, grinding into me.\n\n\"Oh, wow! You feel so good, Jeff. You're bigger than my vibrator and I didn't expect how good this feels.\"\n\n\"You feel amazing too, Vicki.\"\n\nShe began to lift and drive herself onto me. Slowly at first, but then as she loosened she drove faster, pressing my butt into the damp sand under the blanket. \n\n\"Oh fuck, so good,\" she moaned and she pressed her hands into my chest causing me to gasp the air out of my lungs. \n\nShe bucked and rode me like a piston, her movements feminine yet so mechanical. Every move was made to derive more pleasure from our coupling. \n\n\"Oh, oh, yes. I'm gonna cum, baby. Oh yeah, yeah,\" she cried. \n\nI saw her eyes roll back as she threw her head back. Her hair whipped around with her head as she gyrated on my body, riding me through her orgasm. \n\nI couldn't believe I was lasting so long, but after a few more minutes I shot the largest load of my life into the latex glove. \n\n\"Oh shit!\" I groaned. \"I've never cum like that. I feel like I was cumming out of a cannon.\"\n\nShe pressed to to my abdomen, continuing to slide back and forth, pulling every bit of bliss that she could until I softened and fell out of her. \n\nThe condom almost slipped off, but I was able to grab it in time. \n\nShe laughed and fell to my side. Stroking her fingers across my chest, she said, \"No matter what happens after tomorrow, I'll never forget this moment.\"\n\nI had no response, so I simply hugged her into me. Before we fell asleep in each other's arms, i said, \"You have a vibrator?\"\n\nShe slapped my shoulder and tucked into my chest. \n\nI never forgot that moment either. \n\n**********\n\nWe awoke a few hours later and had to get back. She joined us for dinner, but we were fairly subdued. The thoughts of my leaving the next day permeated everything. ",
        "Before I left the next morning we exchanged current phone numbers and addresses. We didn't commit to each other and I think we knew that the stars didn't line up for us. We did promise to stay in touch and we had a real goodbye that time. \n\nShe hugged me at my car and kissed me as if we'd never kiss again.\n\n\"Goodbye, Jeff. Never forget me.\"\n\n\"Not possible, girl. I'll write you when I get settled in at school.\"\n\nShe nodded, gave me another hug and thanked my dad for his patience. \n\nAs we were driving away, I thought she mouthed, \"I love you.\"\n\nI blew her a kiss and returned from heaven to real life. \n\n*********\n\nWe wrote to each other all through college. She got her degree in hotel management and I got mine in teaching. She was able to get a job in France at one of the major chains and took it. I was truly happy for her and didn't beg her to stay for me. I wouldn't have wanted her to resent me for missing that kind of experience. \n\nWe tried to stay in touch for a few years, but life got in the way and I haven't heard from her in about a decade. \n\nI stayed in my hometown and married a wonderful woman with whom I went to high school. We had 2 children who are doing alright in college. Both want to be teachers, like me. \n\nMy Melissa died of ovarian cancer two years ago. No one should be taken in their 40's, it's just too young. I've been getting by okay, but it's Summer now, and without school to keep my mind occupied, I've been a little down. \n\nI gave Melissa every bit of love that I could and we were happy, but I always had a locked door in a corner of my heart. That room was saved for Vicki and that little bit of love never went away. \n\n*********\n\nMy dad had been after me to go fishing for a while, so we drove up to the old Bear's Paw Lodge to spend a week on the lake. It changed owners and even names a few times over the last almost 30 years since I'd been there. \n\nAs we pulled onto that familiar road, I felt a sense of sadness. I couldn't help but think of Vicki and how she made out. I had googled her a few years back and saw that she moved up to Vice-President of her hotel chain. I was glad for her. \n\nOver the years, with her having a tough schedule, she hadn't settled down and never got married. At least she hadn't the last time I got a letter from her and when I googled her, she hadn't changed her name. \n\nWe walked up to the old lodge and I smiled as I opened the creaky screen door. It smelled the same. That old musty air that I hope never changed was still there. I noticed the old Bear's Paw sign was still up. I was glad the new owners liked it and brought it back to the name I'll always remember. \n\nAs my eyes adjusted to the light, I saw the jukebox was still in its same old spot. I pulled out a dollar, seeing that someone upgraded the electronics, but not the songs. \n\nI smiled as I pressed B-17 and waited for her song to play. \n\nWhen the song ended, I felt a hand touch my shoulder. I had tears in my eyes and didn't want him to see, so I didn't turn around. \n\nI said to my dad, \"I think of her every time I hear it. Always have.\"\n\n\"Me too,\" a soft feminine voice said. \n\n\"Vicki?\" I asked as I turned around and gazed into those all too familiar brown eyes filled with their own tears. \n\nShe didn't say a word. She pulled me into a hug that was so tight I almost couldn't breathe. My dad was standing by the bar with the biggest smile I'd ever seen on him. \n\n\"Welcome to The Bear's Paw Lodge,\" she said through tears. \"I've missed you so much.\"\n\nI hugged her again and asked, \"What are you doing here?\"\n\nShe kissed me softly, but I felt her love in it. \n\n\"I bought the place a few years ago. I changed the name back and re-opened it after it sat vacant for a bit.\"\n\n\"I thought you hated this place.\"\n\n\"How could I possibly hate where I spent the best two weeks of my life.\"\n\nI kissed and hugged her again. \n\nShe whispered in my ear, \"I'm never letting you go again. It's about time we get on with the rest of our lives.\"\n\nYes it was."
    ],
    "authorname": "Bh76",
    "tags": [
        "first love",
        "first time",
        "love at first sight",
        "summer",
        "romance",
        "love story"
    ],
    "category": "First Time",
    "url": "https://www.literotica.com/s/childhoods-end"
}
{
    "title": "Wheelchair Girl",
    "pages": [
        "<p align=\"center\">She was dying. Cory wasn't putting up with it!</p>\n\nAuthor Notes: It is a fact that twins and sometimes children enjoy lifelong connections transcending distance &amp; time. With that in mind, this story is a tribute to my wife, who has put up with me for 35 years.\n\nFor years she'd ask me if I felt there was someone out there. An only child, she couldn't shake the feeling that someone was missing. I had no such feelings.\n\nHer stepfather died, and we discovered her mother was descending into dementia, something he had been covering up. When she confessed a month later that there had been a sister born two years before her and given up for adoption, we didn't know how to take it. Dementia, fantasy or was this the truth?\n\nI put my internet skills to work and built a site keyworded around what information we had. It took a couple of months, but one day we came home, and I checked my email.\n\n\"I think I'm the person you're looking for!\" was the message.\n\nI literally felt the blood drain out of my face. We'd found her.\n\nConnections, through time, space and blood. My wife had it, and now a sister to prove it!\n\n***********\n\n\"I don't want to be with you anymore, Cory! The wedding is off!\"\n\n\"But...,\" Cory sputtered, \"our tickets! You wanted to go someplace romantic for Valentines!\"\n\n\"Keep 'em,\" Sheila suggested. \"It's over!\" With an audible click, she was gone.\n\nCory stared at his phone with disbelief. Two years with her and his fianc\u00e9e dumps him just before they leave for a trip, she talked him into? Never mind their wedding plans for next summer.\n\nThirty minutes later, he was even more pissed. He couldn't change the tickets to take a friend or get a refund. He was stuck. Angrily, he logged into their joint account they'd been saving together for a wedding. They'd been contributing according to a percentage based on their salaries. He took his seventy-five percent of the balance plus the cost of his hotel and plane tickets and moved it over to his own account, then changed the password he'd trustingly shared with her. It was her idea; she could pay for his trip. Lastly, he took her ticket, put it in an envelope, and took it down to the mailbox. By the time she got it, the plane would be in the air. If she changed her mind, tough shit! He was going alone.\n\n**********\n\n\"Seriously, mom, I'm old enough to make my own decisions.\"\n\n\"I know, baby, but I'm worried about your health.\"\n\nJamie blew a loud raspberry. \"That ship has sailed, mom. It's not going to change, and I need to enjoy the time I have left.\"\n\n\"But if you...!\"\n\n\"I've done it for years. I don't want to live like this anymore. I've made my mind up. I'm going.\"\n\nJamie hung up the phone on her weeping mother. She felt guilty, but it was time to take control.\n\n**********\n\nCory was sitting in the airport departure area reading his Kindle, waiting for his plane three days later.\n\n\"Excuse me.\"\n\nHe looked up to see a girl in a wheelchair. She was pretty, although her face was somewhat gaunt, her arms and body looking like several good meals wouldn't go to waste. Her skin tone didn't look all that healthy either. Still, for some reason, his interest quickened.\n\nShe nodded toward his travel bag protruding out into the aisle. Her chair couldn't get past.\n\n\"I'm so sorry,\" Cory exclaimed, bending down and pulling the bag underneath his chair.\n\nShe wheeled on past, muttering, \"Fuckn asshole.\"\n\nStunned at her rudeness, he watched her make her way over to the departure counter and understood her frustration. People had haphazardly dropped bags all over, and she was having a difficult time getting through. She had to stop several times while people cleared a path for her.\n\nShe finally made it, so he went back to his Kindle.\n\nThey called his flight. He grabbed his stuff and started moving in that direction. Although they loaded the disabled and small children first, his seat was in the back; he'd be on the second call. It suddenly occurred to him that the back was also where they put handicapped people and stored their wheelchairs. That meant...Oh, fuck! He could only hope Miss Personality Plus wasn't sitting next to him.\n\nMaking his way down the plane aisle, he mentally cursed, spotting her sitting next to the window in the last row. His row. It wasn't a total loss, though. He had the aisle seat, which meant whoever was in the middle could enjoy her stellar personality.\n\nHe put his bag up in the bin and nodded at her as he sat down. She rudely rolled her eyes and turned to look out the window, ignoring him.\n\nThe hum of passengers getting settled, putting baggage into the upper bins continued while the plane filled. Finally, he heard the front door latch, and the sudden pressure in his ears told him the interior air conditioning had been switched on. There was no one left in the aisles, and the seat between them was still empty. Of course! It finally dawned on him that it was Sheila's seat, and Sheila wasn't coming. Cory groaned with dismay. Although socializing didn't seem to be Miss Personality's strong point, he'd have to put up with his new neighbour.\n\nThe plane jerked backward as the tractor pulled it away from the terminal and ten minutes later thundered down the runway. When it bounded into the air with an abrupt lift, he heard a startled squeak, and she fished in front of her for a vomit bag. He grabbed his and held it out for her as a backup just in case. She flailed her arm at him knocking his hand away, so he dropped the bag beside her and withdrew.\n\nShe puked into the bag three times before folding it up and setting it on the seat beside her. Wiping the back of her hand over her lips, she grimaced at the horrid taste in her mouth. Cory reached for the stewardess button.\n\nWhen the stewardess finally made her way down the aisle, he nodded toward the girl and her puke bag on the seat.\n\n\"Oh dear, sweetie. Let me take care of that for you. Would you like some water?\"\n\nMiss Stellar Personality nodded and pointed up at the baggage bins. \"I need my pills, please.\"\n\nCory jumped up. \"Why don't I get her bag while you get the water.\"\n\nHe opened the bin and grabbed the pink one.\n\nThe stewardess was back in a minute with water to rinse her mouth and spit out, along with a bottle of water to drink.\n\nMiss Determined-to-make-everyone-else-miserable, did nothing to improve her standing. Handing her bag back to Cory and the spit bowl back to the stewardess, she thanked nobody. Curled up, cradling the bottle of water, she went back to brooding, staring out the window.\n\nCory counted that flight as the longest, ugliest flight of his short life. He was a sociable guy and could get along with almost anyone. Except for her, apparently. Once they landed and got ready to deplane, he handed her bag down to her and opened his mouth to say goodbye. The words died in his mouth with the look of scorn and hatred she gave him.\n\nWhat a bitch, he thought.\n\nThe customs lineup was long and slow. He noticed her over in a line devoted to handicapped people. The customs officer there had her pill bottles lined up in front of him, and it was obvious he was giving her the third-degree over them. He could see the bitter look on her face as she almost spat her answers back to him.\n\n\"Somebody, you know?\"\n\nThat brought his attention back to the customs officer in front of him now. \"Sorry, not really. I sat beside her on the flight and from everything I saw she's really sick. I've seen the difficulties she's been through at the airport back home and on the flight. I kinda feel sorry for her. It isn't easy to be handicapped and travel. That other officer looks like he's really giving her the third degree over her prescriptions.\"\n\n\"He has a reputation,\" the officer said diplomatically. \"Anything to declare?\"\n\n\"No.\"\n\nThe officer waved him through. Walking out of the airport, he could see her still explaining her various medications to the customs guy. Suddenly he had the craziest vision of her losing her temper with the idiot and blowing the roof off the airport when she exploded. He chuckled; the idiot had no idea what a short fuse he was dealing with.\n\nIt felt like a weight lifted off his chest, walking out into the warm tropical sunshine. He found his hotel bus and handed over his luggage. Two weeks of eating, sleeping, drinking, and lying on the beach. It sounded like an ideal place to mend after Sheila shit all over him.\n\nChecked into the hotel, he made his way to his suite. Stripping down, he bounced on the bed. A nap seemed like a perfect project right now before finding something to eat.\n\nA while later, after a refreshing nap, a quick shower and a change to cooler clothes, he opened the door to the hallway. Across the hall, the girl in the wheelchair was wheeling out of her room.\n\nThey both froze. Instinctively, it was on the tip of his tongue to say hi when she gave him another scornful glance.\n\n\"You again?\" she spat out like she'd just discovered dog shit on her shoe.\n\nCory lost it. \"I've seen all the pill bottles you're packing, lady, but you might have left the one with the nasty pills at home. This is supposed to be a fun vacation, not an episode in your personal vendetta against strangers. Don't bother talking to me again.\"\n\nHe stalked off down the hallway.\n\nHe hadn't made it far when he heard faint sobs behind him. He almost turned to go back and apologize, but shit, this was all on her. There was no reason for him to say sorry.\n\nSitting staring out at the ocean view while waiting for his food, he noticed her wheel in. Although the restaurant was empty at that time of day, she picked a table as far away from him as possible. He shook his head. Whatever that woman had stuck in her craw was her problem, although it was a pity. She was cute; they were both here alone. They might have had some fun together as friends.\n\nIt seemed to be his luck lately to get shit on by women.\n\nThat brought him full circle back to Sheila. What had happened there? The last few days, he'd gone over and over their relationship in his mind. There had been some episodes where she seemed distracted lately but not a hint that she was unhappy with their lives and where they were headed. Then out of the blue...!\n\nWould she come back? Was this some temporary anxiety over their coming Wedding? He'd heard of grooms and brides suffering from those kinds of jitters. Many got back together after they worked their way through their feelings.\n\nDid he even want her back?\n\nHe thought some more about those episodes where Sheila seemed distracted. It had started around three months ago. A blinding flash hit him. Right around the time, that new guy named Brad had started where she worked. At first, she'd talked about him so often he was getting uncomfortable. But when he thought back on it now, she'd stopped mentioning him. Was that it? If she was emotionally or physically unfaithful to him, he didn't want her back. That he was sure of. But somehow, deep down, he knew he'd find her with Brad when he got back.\n\nAs if cued, his phone rang, showing her name. He debated answering it but decided he might as well get it over with.\n\n\"Hello.\"\n\n\"Hi, honey. I wanted to apologize for my nasty behaviour the other day. Not sitting down with you and talking it over was a bad way to handle things. If I wasn't happy, I should have shared that with you. I thought if you were home, I could drop by, and we could talk, and I could get some of my stuff from your place.\"\n\n'You'll have to wait a couple of weeks.\"\n\n\"Oh...you went on the trip anyway?\"\n\n\"Why not? I paid for it, and a vacation is a good place to lick my wounds.\"\n\n\"I really wanted to go on that trip,\" she said wistfully.\n\n\"Yeah, well. So, how's Brad?\" he took an unexpected shot in the dark.\n\nThe sharp inhale and the deafening silence following told him everything he needed to know.\n\n\"You know?\" she finally ventured.\n\n\"I do now. Thanks for confirming it.\" He clicked her off and blocked her number.\n\nDone!\n\nGreat, so here he was stuck in this romantic destination resort they'd chosen to celebrate Valentine's Day and his birthday. Everybody else was paired up and here to celebrate Valentines. He hadn't seen a single girl out on the beach alone; they all appeared to be with someone.\n\nSo, one bitch was cheating and dumped him! As far as he knew, the only other single woman close at hand was a psychopath. Speaking of which, he took a quick look in her direction.\n\nHer head quickly snapped back down at her plate. She'd been staring at him. Interesting! Maybe she was contemplating feeding him to the sharks when he was swimming. He knew there were moose calls and deer calls. Was there a shark call? Maybe you just whistle. Hey, you there with the big teeth. Can you chomp this annoying guy for me?\n\nPerhaps he should head into town and scout out a nightclub or a hot bar tonight. Find an available single woman. Somehow, he knew his head wasn't in it. No, he was alone and alone he'd stay; it was better that way.\n\nHe gave himself a shake. This morose mood was ridiculous. The sun was shining, the ocean looked dazzling. And plenty of eye candy from the look of some of those bathing suits, even if they were taken. He needed to be out on the beach, swimming and having a good time. A drink or five wouldn't hurt to help dampen his emotional pain.\n\nHe grabbed a towel from the attendant and got directed to the tent where his two sunbeds were located. Sheila had insisted on reserving them for the entire two weeks, despite the astronomical cost.\n\nAfter lying in the sun, then enjoying a long refreshing swim, he was walking out of the water, slicking back his hair, when he spotted a small forlorn figure up by the hotel.\n\nThe path to the beach was down a slight hill. Where the sidewalk exited the hotel and turned toward the beach, they'd built a small outlook with a gazebo for people to sit and savour the ocean view. There was a lonely girl sitting in a wheelchair, occupying it.\n\nCory immediately felt sorry for her. The sand was loose and deep. He doubted she'd be able to wheel that chair over the beach to get to the water. If she could even swim? She certainly couldn't take the chair in the ocean. After oohing and ouching his way across the blistering sand, he grabbed his sandals and headed up the path. Why he had no idea. He had to be a glutton for punishment, but his heart went out to his fellow walking wounded.\n\nShe saw him coming but chose to ignore him.\n\n\"Would you like...?\"\n\n\"What is it with you?\" she interrupted bitterly. \"Don't you get it?\"\n\nShe waved her hand around, indicating the beach and ocean. \"Look! This is my final hurrah! I'm dying! I'll never wake up in the arms of a hunk like you. Never be married, never have children. Never, never, never! I JUST WANT TO BE LEFT ALONE!\"\n\nSobbing, she wheeled off. Stunned by her outburst, he listened to her weeping until the hotel door slid shut behind her.\n\nJesus!\n\nThat was horrible. No wonder she was so ornery. What a burden to carry. Somehow, it made losing Sheila seem like a minor problem.\n\nHis brain clicked into gear. Wait a minute! A hunk like him? She said that? So, she wasn't hating or dissing him. She was fighting her attraction. Trying to drive him away before...? Oh my God, he'd been wrong about her motivation the whole time.\n\nHe sat down on the bench under the gazebo and stared out to sea for quite a while. Finally, a smile lit his face. Leave her alone, huh?\n\nHe didn't see her at supper nor when he went to the bar, spending some time sipping a few drinks and people watching before heading upstairs with a case of beer. Cracking a cold one, he sat on the balcony and opened his Kindle to read, enjoying the tropical breeze redolent with the smell of flowers and the sea.\n\nHe woke up the next morning, tired after a rough night of sleeplessness. It was wracked over and over with dreams of that cute girl, her wheelchair careening out of control down a steep hill. As fast as he ran, he couldn't catch it, his fingers missing by fractions of an inch every time. She kept turning back to him, arms outstretched and crying, \"Don't you remember us? How could you forget me? Don't let them take me!\"\n\nWhy he'd dream something like that, he had no idea. Remember us? That made no sense. He figured he needed to check what he was eating a little more carefully. Strange country, strange ingredients equal weird dreams, perhaps. He rolled back over and went back to sleep.\n\nAdmiring the ocean panorama while enjoying a late breakfast, he watched his target wheel up to the gazebo and park, taking in the view.\n\nPerfect!\n\nStartled, she squawked, clenching at the arms of the chair, feeling like she was going over backward when he tilted her wheelchair and started walking them down the path toward the beach.\n\n\"What the hell are you doing?\" she snarled at him.\n\n\"You've got this last hurrah stuff all wrong. It's supposed to be fun, embracing life, enjoying those last moments, living life to the fullest. So that's what we're going to do. By the way, my name is Cory.\"\n\n\"If you think I'm going to sleep with you out of gratitude because you're being nice to me, you've got it wrong!\" she spat out.\n\n\"Thank God for that. Now I don't have to worry about waking up in the middle of the night with a knife in my back!\"\n\nShe was quiet for a moment, then started giggling. \"I guess I might have left that impression!\"\n\nHe loved the sound of her giggles; they sounded like tiny bells. \"You did! So, what's your name?\"\n\n\"Jamie. How do I know you're not taking me to the end of this path and dumping my body in the weeds?\"\n\n\"It's a tempting thought,\" Cory mused out loud, \"but we're going in here.\" He turned the chair around and towed it backwards through the deep sand. Arriving at his tent, he stopped and picked her up and sat her on the end of the sunbed. She hadn't scratched his eyes out when he picked her up. He counted that as a win.\n\nShe looked around. \"This hotel is a romantic destination; how come your girlfriend isn't here with you. Is she coming later?\"\n\n\"Fianc\u00e9e,\" he corrected her. \"She decided on another man and dumped me three days ago. This trip was her idea of a romantic Valentine and celebrating my birthday. I've paid for the tent and sunbeds for the two weeks I'm here, along with Valentine's dinner and dance tickets for tomorrow night. We're going, by the way.\"\n\nShe scoffed. \"I can't dance!\"\n\n\"The hell you can't.\" He hauled his Kindle out of his backpack and found a bookmarked page. \"Just watch these videos.\" While she was doing that, he folded up her wheelchair and stored it in the back of the tent.\n\nShe watched \"Gravity, Wheelchair Dancing.\" Tears were running down her face after. \"That was beautiful! You'd do that for me? I think your fianc\u00e9e is a foolish woman giving you up.\"\n\n\"Yes, I'd be happy to do that for you. The hotel gave me a deal on a small meeting room for us to practice. Maybe this afternoon we can try some moves. As far as my Fianc\u00e9e goes, after I found out about the other guy, it was for the best. I don't want her back. So, can you walk at all or swim?\"\n\n\"I can walk, except it's extremely painful on my feet. Using a wheelchair is just easier. Swimming's great; I do that all the time for therapy. Chest to shoulder deep, and the buoyancy takes the weight off my feet. I can walk around in the water or swim.\"\n\n\"So, swim or sunbathing first?\"\n\n\"Sunbathing, I don't have a bathing suit here. These shorts and t-shirt won't hide much once they get wet.\"\n\n\"TA-DA, we have a solution!\" He fished in his backpack and hauled out a small shopping bag. \"A bathing suit for you.\"\n\n\"How...?\"\n\n\"I pointed you out to the saleslady at the clothing boutique in the lobby. She eyeballed your sizes and found a wicked-looking bathing suit. I'll close the tent flaps and wait outside while you try it on.\"",
        "Stunned, she watched him close the curtains. What a hunk; she'd been attracted the second she saw him. And in her miserable contrariness, went to work to drive him away so she wouldn't end up heartbroken when he ignored the girl in the wheelchair. But he wouldn't stop his not ignoring her in the face of her attempts to drive him away, and he was right. A last hurrah WAS supposed to be fun, living life to the fullest. He seemed willing, despite her circumstances. Her deliberate bitchiness hadn't fooled him one bit. He was a genuinely nice guy, she realized, who had obviously given a lot of thought to her needs. Could she trust him? She thought so!\n\nShe held the bathing suit up for inspection. Oh my! There was a whole lot less material than her usual choices. But what the hell! It wasn't like her gravestone was going to have a flashing arrow with a sign saying, 'the slut is buried here.'\n\nIt fit her to a 'T.' Determined to give him her best presentation, she slid off the sunbed wincing at the agony in her feet and struck a pose.\n\n\"You can open the curtains.\"\n\nJamie would always treasure her memories of the moment when Cory's jaw dropped at the sight of her. Shivers ran through her body at his whispered, \"Beautiful!\" Arousal flared. It had been so long since someone had looked at her that way. They stared at each other, almost dumbfounded. Then somehow, she was wrapped up in his strong arms, their mouths devouring each other.\n\n\"Oh my God, that was...!\"\n\n\"Awesome,\" she finished the thought for him, their foreheads pressed together, gazing into each other's eyes.\n\n\"I'm sorry, I didn't mean to...!\"\n\n\"Don't you dare apologize, MISTER!\"\n\nHe caught her wince of pain. \"Are you okay?\"\n\n\"My feet!\"\n\nCory easily lifted her back onto the sunbed. \"So, swimming?\"\n\n\"I need to put my hair into a ponytail.\" She grabbed her bag and started fishing around in it.\n\n\"Any chance you got a shark whistle in there?\"\n\n\"Huh?\" She stopped rooting around and eyed him. \"What the hell is a shark whistle?\"\n\n\"Oh, nothing, just a random thought,\" he innocently offered.\n\nCory carried her out to the water using his sandals on the hot sand. They had a blast for the rest of the morning talking, tanning and swimming. Approaching lunch, they figured they'd had enough of the hot tropical sun for the day and headed for the hotel.\n\nDuring a lull in the conversation, while they enjoyed their lunches, she confessed.\n\n\"My kidneys!\"\n\n\"Your kidneys?'\n\n\"Mmm, yes. I have chronic kidney disease. They've been declining for the last few years, and they're barely functioning now. I've been offered dialysis, but I don't want to live a life like that. I'm tired all the time; painful feet can be a side-effect, and mine are bad. You saw one of my vomiting sessions. I'm getting skinny cause I have a hard time keeping food down. I'm way down the transplant list, and my Doc told me it's unlikely I'll get one. I've decided not to do the dialysis. Doc figures it'll catch up with me in about five to six months, and that'll be it.\"\n\n\"What would happen if you took the dialysis?\"\n\n\"Maybe I'd live another four or five years. I'd have to go for dialysis three or four times a week, taking a good half day each time.\"\n\nCory whistled. \"That's not much of a choice either way, is it?\"\n\n\"No, it's not. If I chose treatment, that would give me a better chance at a transplant, but the quality of life is the shits. If I don't get a new kidney, I've suffered all that time for nothing. That's why I decided to let nature take its course.\"\n\n\"Is it what you really want?\" he asked.\n\nShe nodded.\n\nHe tried to accept that, but it disturbed him to the core.\n\nShe yawned, and he could see she was tired.\n\n\"Did you want to have a nap before we try the dancing?\"\n\n\"If you wouldn't mind. About an hour, okay?\"\n\n\"I'll be in the bar.\" He watched her wheel off. Amazingly, he'd enjoyed the hell out of this morning with her. It's shocking, really, when he thought about how it all started. She'd been stunning in that bathing suit. And that kiss...scorching. He could still taste her searing lips on his. Hopefully, there'd be more. He had some feelings for her, he realized. Could there be four to five years with her, or would it all be too hurtful for both? She'd told him some things, but he didn't have enough information.\n\nHe headed into the bar pulling his Kindle out. It was time to do some research.\n\nHe knew a whole lot more by the time she showed back up, looking tousled and sleepy. Enough information to realize there were many variations to the disease, and he needed to know more. He'd have to take it easy, though. He didn't want to come off as giving her the third degree.\n\nThey watched various videos showing wheelchair dancing, deciding which moves they could master and which were too hard. After a couple of hours practising, good-naturedly laughing together at their silly mistakes, they felt they had at least three variations they could use depending on the type of music.\n\nArriving back upstairs, Cory unlocked his door and wheeled her in. He saw her body tense momentarily but then relax. Good, she was going with the flow.\n\n\"Hungry?\" he asked.\n\n\"I could eat.\"\n\n\"Pizza?\" he asked, thumbing through the local advertisements in the room's instruction booklet, getting ready to make a call.\n\n\"Oh yeah,\" she enthused, \"stuffed crust, double pepperoni, double sausage, green peppers and onions.\"\n\nShe couldn't miss the clatter of his phone hitting the tile floor or his shocked stare of disbelief.\n\n\"What?\"\n\n\"That's exactly what I would have ordered!\"\n\n\"Well, if it tastes good...,\" she offered.\n\n\"...It tastes good!\" they finished together, staring at each other in surprise.\n\n\"I've said that many times over the years,\" Cory confessed.\n\n\"Me too!\" Jamie answered.\n\nIt was on the tip of his tongue to tell her about his dream last night. The weirdness of it was frozen in his head. For some crazy reason, he momentarily wondered if there was any truth to the idea of lovers in a past life coming together again.\n\nWhile waiting for the pizza, they talked about growing up getting to know each other. Jamie shared that her father had died when she was young. She had no memories of him, just pictures and some stories from her mom. Cory shared that he had been adopted. He had no idea who his real parents were. But he was happy with his adopted family. He confessed his childhood had been awesome growing up.\n\nWith the piping hot pizza sitting in front of them, Cory passed her a piece and got one for himself. He was taking a bite when his brain twitched. Automatically, he reached into the box and handed her a seasoning packet.\n\nHer surprise was evident. \"How did you know I was going to ask for that?\"\n\n\"For what?\" was his puzzled response.\n\n\"The seasonings!\"\n\n\"I...don't know,\" he whispered, staring at the packet in her hand. \"Did I give that to you? I don't even remember passing it over!\"\n\n\"Oh!\" That thought held Jamie while she finished her first piece. Their unexplained connection seemed so weird, along with her instant attraction to him at the airport. She had to admit his persistence was amazing, and yet he wasn't pushy. He'd simply walked right past her defences and fit himself into her life like he'd always been there. And that kiss. Whoa! She'd never been kissed like that or experienced the feelings she'd felt while their lips were connected. With a sudden certain conviction, she understood there was something more here.\n\nThat helped her make her mind up.\n\nHissing at the blazing pain from her feet, she stood and took him by the hand, leading him over to the bed. Pushing him down, she grasped his shorts and stripped him.\n\n\"Ahhh?\"\n\n\"Shh,\" she told him, taking a moment to admire his body. She'd jilled off to enough porn videos to know what he was packing was respectable. Painfully hobbling over to the pizza box, she took another slice then grabbed the seasoning packet again. She had an idea as she climbed up next to him on the bed.\n\nOne stroke of her hand had his dick aiming for the stars. She wrapped the hot pizza around his cock. Perfect. The sharp little pizza tip tucked neatly into his frenulum where she knew guys were uber-sensitive. Cory moaned at the feeling of hot cheese and meat surrounding him. She sprinkled some of the seasonings over top and started licking around his head before sucking it into her warm mouth. She almost burst out laughing when his hips bucked upward, trying to stuff his dick and that entire piece of pizza into her mouth. Ambitious as he was, that was so not happening!\n\nShe soon had his hips writhing all over the bed.\n\nGiggling at his need, she teasingly nibbled around the lips of his glans, then took her first small bite of the pizza, eagerly licking off the grease from the newly exposed area of his cock. She kept going until she felt him go iron-hard, then plunged her mouth down over the top, greedily drinking down his spurting seed.\n\nWith his sperm warmly nestled in her belly, she went right back to work licking, sucking and nibbling on her pizza dick. Working the food into her tummy until he served her a second warm creamy dessert that she gratefully swallowed.\n\nWith the pizza gone, she sucked his wilting cock into her mouth, savouring the warm softness and taste, chasing the remains of the cheese, grease and tomato sauce. She traced little rivulets of the grease and tomato sauce down his balls, suckling each until they were squeaky clean. Cory's hand was stroking her hair, relaxing her, making her feel loved and wanted.\n\nFinally, she pushed up and grinned down at him.\n\nCory cracked an eye open and smiled at her. \"That was the most incredible blow job I've ever had,\" he confessed. \"Where did you get that idea?\"\n\n\"I don't know. I've never given a blowjob before. I've seen videos but never anything like that. It just popped into my head!\"\n\n\"Back at ya!\" he said to her startled squawk when he flipped her over on her back. Clothes went flying, and then he dove in.\n\nJamie finally surrendered after her fifth orgasm, screaming in ecstasy as she tried to stuff his head and wicked tongue into her pussy.\n\nCory could see she was exhausted. He pulled the sheet up over them and pulled her to him. Amazingly, they folded into a spoon position like they'd been doing it for years. There wasn't the slightest hesitation; arms and legs seemed to know just where to go.\n\nHe listened to her breathing gradually slow until it was soft and even.\n\nFinally, with a sigh, he felt her body relax into sleep. She softly murmured something. A stunned Cory bolted upright, startling her awake. \"What? What did you say?\"\n\n\"I don't know; I was dozing off. What did I say?\"\n\n\"It sounded like, 'together again'!\"\n\n\"I don't remember that!\"\n\n\"I'm sure that's what it was.\" He figured it was time to share that weird dream he'd had.\n\n\"Last night, I had the weirdest dream. You'd lost control of your wheelchair on a steep hill. I was trying to catch you and missing each time by fractions of an inch. You kept turning back to me, arms outstretched and crying, 'don't you remember us? How could you forget me? Don't let them take me!' I had that dream multiple times last night! And now you just said, 'together again.\"\n\n\"That is strange! I know I haven't been able to get you out of my mind since I saw you at the airport. It was an instant attraction. What do you make of it?\"\n\n\"I've had the bizarre thought that maybe you and I were lovers in a past life. Even when you were being rude, I kept wanting to succour you.\"\n\nShe rolled over and faced him. Pulling his head back down on the pillow, she stared into his eyes. \"You have succoured me, Cory. I feel good for the first time in years. Thank you for that.\" Her lips found his, and they shared another mind-boggling kiss.\n\nCory could see she was spent, emotionally drained and struggling to stay awake. \"Let's talk about it in the morning,\" he offered.\n\n\"Mmm,\" she agreed, and then she was gone.\n\nCory watched her face in sleepy repose for a while, his mind troubled. Lovers in a past life? That seemed so out there in left field. Really, how could it be? He had to admit things were happening that seemed to defy any reasonable explanation. But that? It seemed impossible. Still troubled, he finally drifted off to sleep.\n\n**********\n\nJamie woke up first, staring at the ceiling, having no idea where she was. She looked over and spotted Cory's face; the previous night came flooding back to her. Her first reaction was embarrassment, but then she thought about how good Cory made her feel. It made her shiver, her skin all tingly. A warm liquidy feeling in her vagina suggested that maybe she wasn't averse to a repeat.\n\nShe eyed the tented sheet. Morning wood, she figured. She'd only had sex once before, a short pathetic tumble in the back seat of a car. Her date came in thirty seconds flat, thanked her, and then drove her straight home. They never spoke again. Her sickness had taken over shortly after, and she'd discovered that girls in wheelchairs don't get dates. Nor did they keep friends. Gradually, everyone drifted away until she found herself alone. Last night had been an absolute revelation to her. It beat jilling off by a mile! And she had to admit, she felt great. Those endorphins had been a good thing for her body.\n\nShe eyed that tented temptation again. Maybe, just maybe, she could...she decided to throw caution to the wind. Gently pulling the sheet down, she felt her breath hitch at the sight of his iron-hard morning erection standing proud. Carefully straddling Cory, she used two fingers to part her lips and nestled that bell end into the gap. With a hiss of breath, she allowed her weight to drive herself down, sinking until their pubic hairs were entwined together.\n\nShe had him, so deep in her belly she almost felt sick with delight. Hitching up again, she slid back down, giggling when she caught Cory's eyes flashing open, a confused look on his face.\n\n\"Whaahhh?\" was his intelligent response. That set off a fit of giggles in her.\n\nThose giggles didn't last long. Cory, the sneaky cheat, pulled her down into one of those scorching kisses again. How was she supposed to resist that?\n\nShe'd have to..., \"Whoahhh!\"\n\nIn an act of gymnastics that she couldn't even fathom, Cory had flipped them over, taking ownership of her pussy while her legs shot straight for heaven in a V of surrender. Not that she wasn't a participant, no, she was acutely aware someone was screaming their damn fool head off and was shocked to realize it was her. Hips pounded at hips while thighs slapped eagerly together until they locked up while his seed spurted down into her eager womb.\n\nTwo hours later, they fell apart, Jamie unable to get even a twitch out of her frazzled new toy. Looking at Cory, she had to laugh. He had a goofy look on his face, tongue clenched between his teeth sticking out slightly. She snuggled under his chin. \"Good?\" she asked.\n\n\"Best ever,\" he admitted, pulling her close. \"Happy Valentine's Day,\" he reminded her. \"That was a wonderful way to wake up!\" He felt her tense up!\n\nOh yeah, that thought hadn't even crossed her mind. It was Valentine's Day, and Cory was the closest thing to a relationship she'd had in years. Suddenly, she felt vulnerable and started to pull away. Wheelchair girls never got to be happy!\n\nInstead, berating herself mentally, she grabbed hold of her jittery nerves. For once, she'd be honest and not the contrary bitch she'd become. She'd deal with the hurt later if that's how things went down.\n\nShe relaxed back into his arms. \"You're my first Valentine in years,\" she confessed. \"I'd given up on the idea. So, thank you for seeing past my defences and Happy Valentine's Day to you too.\n\nWorn out and tired, she snuggled in and drifted off.\n\n************\n\nThe hotel had been adamant in their confirmation letter that while dressing up was allowed, the dress would be beach casual for Valentine. That way people didn't have to carry extra clothes while travelling. Most couples showed up dressed casually, although a couple of women couldn't seem to resist dressing to the nines. They looked completely out of place.\n\nDinner was delicious, and Jamie resisted comment when Cory passed her the salt and pepper just before she asked. He didn't notice when she mindlessly handed him the pepper back without being asked to sprinkle on his mashed potatoes.\n\nIt was inexplicable!\n\nAll the exercise and endorphins left her starving, and she was able to stuff herself like she hadn't eaten in years.\n\nThe comedy show after had the audience in stitches. She couldn't remember when she had laughed that much before. Cory had moved his chair beside her and held her hand while they cuddled together. The evening was turning into bliss for her.\n\nAfter the comedy wrapped up, the music started. People seemed startled, then intrigued when they moved out onto the floor with her wheelchair. It wasn't long before they were in the middle of a circle of dancers watching the wheelchair dance. They clapped and cheered after. Then left them lots of space on the dance floor. After three songs, Cory and Jamie took a break. On the way back, the people at the table beside them followed them and asked if they'd like to join them. They moved their tables together and introduced themselves to each other. It wasn't long before they were joined by others, a group of people dancing, talking and drinking. Jamie was stoked. It had been so long since she'd been part of a social gathering and basked in the acceptance.\n\nA couple of husbands asked her to dance and tried to replicate some of the moves they'd seen. Of course, they screwed up, and all had a good laugh at the antics.\n\nThe inevitable hen party decided it was washroom time. One of the girls grabbed Jamie's wheelchair and wheeled her along with them.\n\nThey all chattered while repairing their warpaint in front of the mirror until the question came up that Jamie was dreading.\n\n\"How long have you two been together?\" one of the girls asked.\n\nJamie thought about lying, but that would be too easy to catch them out. \"We met yesterday. It's just a holiday fling.\"\n\n\"Holiday fling, my ass, Girl,\" one of them scoffed, \"that man hasn't given any other woman in the room a second look. He only has eyes for you. And you for him. Time to start wedding plans, I think.\"\n\nThe others nodded in agreement.\n\n\"But we barely know each other,\" Jamie whined. No way was she going to lay her decision to let herself die on these people.\n\nAnother girl piped up, \"You two are joined at the hip; I've never seen two people so in tune with each other. I watched you hand him a fork. You weren't even watching him when you took one off the table and handed it over to him when he dropped his. His fork hadn't even hit the floor yet. It was like you knew he'd dropped it before he even knew, and he knew you were passing him another. Neither of you was even looking at each other. It was the spookiest thing I think I've ever seen.\"\n\nJamie had a vague memory of that fork and felt she had to confess, \"There's been a few things like that. Cory has the idea that maybe we were lovers in a past life. It seems so weird, but there have been hard to explain things happen.\"\n\nThe same girl that brought up the fork spoke, \"I'd have laughed if you brought that up before. But after what I saw, I think he's on to something. You two belong together.\" She stopped and thought for a moment. \"Lovers in a past life, how fucking cool is THAT!\" she beamed. \"I may have to divorce my klutz and go look for mine.\"\n\nThey all chuckled at that. Still, it was a more thoughtful group that headed back to the table.\n\nThe rest of the evening was a blast. Cory and Jamie tumbled into bed, barely able to tear their clothes off; they were so tired. Their bodies seemed to spoon into each other without effort. They were just dropping off to sleep when Jamie trilled like her mouth was full of liquid, \"Kontan.\"",
        "\"SelKontan,\" Cory gargled back to her.\n\nFour eyes flew open, staring at each other in the dark.\n\n\"Did you...?\"\n\n\"Yes, I said happy, and then you said so happy,\" Jamie responded, not needing him to finish the question. \"At least those were the emotions behind it. I don't know the words, yet I do.\"\n\nCory nodded, then reached over for his Kindle. Trying different phonetic versions of what they'd just uttered in Google translate brought zero response.\n\nFrustrated, he closed the tablet. \"It has to be a dead language or an unknown culture.\"\n\n\"I knew it. A stubborn Neanderthal who wouldn't leave a poor wheelchair girl alone. Gonna club me over the head and drag me into your cave?\"\n\nCory chuckled, \"Tempting, but right now, I'm tired. Let's get some sleep and explore it more in the morning.\"\n\nCory had the wheelchair chasing dream several times that night. This time, he caught the chair. It was Jamie, her voice plaintive with need. \"So many years. Where have you been? Promise me you'll never leave me again!\"\n\nWhen Cory woke up in the morning, the vivid dream ran through his mind. It had been so real he almost had to pinch himself to prove he was awake. That being said, he knew one thing.\n\nHe'd sworn an oath several times last night to never to leave Jamie again. And meant it!\n\nOver breakfast, they discussed the strange events of the evening, seemingly unable to come to any conclusions. Cory pulled out his Kindle and looked up 'Lovers In A Past Life.' He read it out to Jamie.\n\n\"Are You Past Life Lovers?\n\nYou Connect Instantly.\n\nYou Feel a Connection Through Time and Distance.\n\nYou Anticipate Their Moves.\n\nYou Feel You Belong Together.\n\nYou Share Unexplained Past Memories Together.\n\nYou Have No Problem Sharing.\n\nYou Notice Time Doesn't Exist Around Them.\"\n\n\"We seem to have a lot of those things happening,\" said Jamie.\n\n\"We do,\" Cory agreed.\n\nJamie brought something up. \"You know when we first met, you told me your Fianc\u00e9e had dumped you. I was so focused on that; telling me you were here to celebrate your birthday went right over my head. I hope it hasn't passed.\"\n\n\"Geez, I'd forgotten about that. It's tomorrow, the sixteenth.\"\n\nJamie stared at him. \"Cory, I didn't come here to celebrate Valentine's Day. I'm here to celebrate the last birthday I expect to have. It's tomorrow, the sixteenth! We have the same birthday!\"\n\n\"Let me guess, you're twenty-eight too.\"\n\nHer face turning white was answer enough for him. \"Look, I don't understand all these weird events but let's forget it for the rest of our vacation. We can solve it all once we get home, okay?\"\n\n\"Sure,\" she answered. Cory was too distracted to notice the lack of conviction in her words.\n\nThey had a fantastic time for the rest of the vacation. The hotel made a massive birthday cake and fed all the diners on their special joint birthdays. They got tons of invitations for drinks, meals, tours and beach time. They spent hours making love. By the time the plane landed, Cory was almost ready for a vacation from his vacation.\n\nThrough customs and out in front of the airport, Cory wheeled Jamie into the handicapped zone.\n\n\"Wait here, I'll go get my car.\"\n\nJamie waved to one of the drivers for the disability-equipped vans. \"It's okay, Cory. I'll take a cab home.\"\n\n\"A cab? Why would you do that?\"\n\n\"Look, Cory, it's been a great vacation fling, but we're back now, and my life is headed in a different direction than yours. You need to find yourself a nice woman and settle down. You've got a life to live; I have different plans. You're a great guy; some woman will be lucky to land you.\" She couldn't stand to look at his face, his eyes suddenly brimming with tears. She tried to pretend her own didn't exist.\n\n\"Don't do this, Jamie; you know it's wrong,\" he whispered. \"I love you!\"\n\nShe steeled herself. \"I don't love you. It's better this way. In a while, we'll forget about each other.\" She waved the driver over. \"Can you load me, please?\"\n\nThe driver came and collected her and the suitcases, clearly uncomfortable with the situation.\n\nJamie couldn't wait for the cab to pull away from the curb. She needed to get out of there as soon as possible. Shame ran through her like a hot knife through butter. She'd done the shittiest thing she'd ever done in her life. After everything Cory had done, he didn't deserve it. She'd acted no better than his Fianc\u00e9e in dumping him with no notice. She'd outright lied to the man that she loved more than anything by denying that love. He knew that wasn't true.\n\nShe burst into tears, disgusted with herself.\n\nThe cab driver studied her for a moment, then the young man still standing back on the curb staring after the cab.\n\n\"If you don't mind an old man saying so, Miss, I pick up a lot of people at the airport and see a lot of these vacation romance breakups. And one of two things always happens.\"\n\n\"What's that?\" she sniffled.\n\n\"If it's a casual fling, the dumped party turns around and leaves almost right away. If it's serious, the dumped party will stand there staring after the cab till it disappears. And Miss, he's still standing there.\"\n\n\"Oh, Cory,\" she wailed, tears spilling out, twisting to look back at a forlorn figure still standing there.\n\n\"Would you like me to swing back and pick him up, Miss?\"\n\n\"You don't understand, driver. I'll be dead in six months. I can't put him through that agony.\"\n\n\"That's sad, Miss. Does he know that?\"\n\n\"Yes!\"\n\n\"And yet he seems pretty willing.\"\n\nShe had to change the direction of this conversation. Wiping her eyes, she checked out the driver's cab license.\n\n\"Gordo12, that's a very unusual name?\"\n\nHe chuckled, \"I blame my parents. They had me when all the robot movies were popular. Names like R2D2, 3CPO and Johnny 5. They seemed to think there was a coming revolution and decided to include me in it. It turned out to be a good thing, though. Customers always remember my name and ask for me when they want a trusty cab driver. The tips from repeat customers are good.\"\n\nThey chatted the rest of the way, and Gordo tried to keep it light. He wheeled his distraught passenger inside when he dropped her off and got her set up at the kitchen table. Taking a moment to fill the kettle, he made some tea for her. It wasn't his typical service, but he couldn't deny she was grief-stricken.\n\nWith her taken care of, he said his goodbyes and let himself out. His last sight was her sitting there, staring out a window with tears streaming down her face. Such a beautiful young girl to be dying so young, but then he wondered if she wouldn't die of a broken heart first. To find somebody you loved so much and be forced to give them up because you're dying. He shook his head, fighting tears himself. Some days, his job was shitty beyond belief.\n\n**********\n\nA light tap on his door interrupted Dr. Wilson from his never-ending patient updates on his computer.\n\n\"Come on in, Millie.\" With no patients due for another fifteen minutes, only she would be disturbing him.\n\nShe looked kind of flustered when she opened the door. \"Doc, sorry to do this; I know you're busy, but there's a young man here, and I really think you should listen to what he has to say.\"\n\nDoc sighed. Millie was the best assistant he'd ever had. She wouldn't ask something like this unless it was important. He looked at the computer and the never-ending paperwork all those reports demanded. He saved his work and clicked it off. That was the thing about never-ending. It never ended anyway, so a few minutes wouldn't matter.\n\n\"Send him on in, Millie.\"\n\nListening to the earnest young man in front of him, Doc's dread grew. This represented one of those ethical violations that could cost him his license if he wasn't careful. And yet, the patient involved and her mother had pissed him off to no end for wildly different reasons. The patient's stated intent of dying when he'd told her technology was close to solving many of her problems gnawed at him. Hell, in ten years, she'd probably be walking around healthier than a horse with a new cloned kidney. Her stampede to the boneyard was unreasonable, in his opinion. Too many of his patients had already died from the lack of transplants.\n\nAfter listening, Doc gave it some thought. There was no doubt the young man was madly in love with his patient and determined to save her. It was a one in a million shot, but what the hell. It fit Doc's temperament perfectly. The young man made one small personal request that Doc agreed to honour.\n\n\"I can't confirm or deny that we have such a patient, you realize. But if I was to do a test and there was a match, you would be willing to donate a matching patient a kidney?\"\n\n\"I would!\"\n\nDoc wasn't going to look a gift horse in the mouth. Clicking on his intercom, \"Millie, can you bring me a bloodwork kit?\"\n\n\"Okay, so the process starts with bloodwork to determine compatibility. Would you roll up your sleeve, please?\"\n\n\"How long does all this take, Doc?\"\n\n\"There are three tests, and the results can take up to three to six months.\"\n\n\"But she...!\"\n\n\"I know, I know, I'll make things happen,\" then he cursed internally, realizing he'd inadvertently given something away.\n\n**********\n\nThree weeks later, Doc scanned through the paperwork in front of him. He'd pushed the limits by having all three tests done at once instead of checking for one before proceeding to the next.\n\nHe angrily hissed to himself, \"Imposs..., I've nev...!\" He sat back, thinking. The odds were either a billion to one or...? With a sudden realization of what this might mean, his rage erupted.\n\n\"That goddamn fucking Bitch,\" he screamed, throwing his coffee cup to smash against his door.\n\nMillie cautiously opened the door taking in the coffee splatters on the wall and shards on the floor. Doc was angrily pacing in front of his desk. She'd never seen him like this.\n\n\"Doc?\"\n\n\"Sorry, Millie. I lost it. Would you call the hospital and arrange an operating room for a transplant for Jamie? Then phone her and give her the details. I'll take care of Cory. Then phone Jamie's mother and tell her I want her in here, no if, ands, or buts about it, the day before Jamie's surgery.\"\n\nWorld's worst mother or not, there was no reason not to push forward with this transplant.\n\n**********\n\nThe woman waiting in the patient room was twisting a handkerchief around in her fingers. Her eyes were red and weepy.\n\n\"Do you know what's happening?\" Doc asked.\n\n\"Jamie said she's getting a transplant.\"\n\nDoc nodded. \"And there are things about this transplant that go back to what you've been hiding from her all these years. It could affect her future severely. I need you to tell her.\"\n\n'I can't, Doc,\" she cried in anguish. \"She'll hate me, and the other stuff could get me charged.\"\n\n\"That was twenty-eight years ago. Nobody is going to give a shit. Isn't your daughter's health more important?\"\n\n'I can't, Doc, I just can't!\"\n\nDoc lifted his hand and pointed at the door. \"Get out. I don't ever want to see you again.\"\n\nThe weeping woman fled past him and out of the office.\n\n\"Goddamn self-centred, selfish bitch!\" Doc couldn't help cursing her. Then he gave the privacy laws a good cursing. If only he could tell Jamie himself. But her mother had confessed something to him in confidence years ago, and he had to honour that.\n\n**********\n\nThe surgery went well. Doc was standing in the hallway talking to the head nurse Gail when he spotted Cory struggling down the hallway, taking his first steps.\n\nShit, the one thing he'd hoped to avoid.\n\nHe turned and looked down the other way. Sure enough, there was Jamie coming.\n\n\"Double shit!\" he reiterated.\n\nGail straightened Doc's tie up. \"What's wrong? What are you up to, you old goat?\"\n\n\"I kind of promised Cory to put him on a different floor, so he and Jamie didn't meet. He didn't want her to know he donated the kidney.\"\n\n\"But you told me to put them close together!\"\n\n\"I know. But I promised him something else.\"\n\n\"Let me guess, you want ME to take the blame?\"\n\nDoc looked hopeful.\n\n\"What do I get out of this?\"\n\n\"The Delmont!\"\n\nOhh, the most exclusive restaurant in town. \"When?\"\n\n\"Tonight!\"\n\n\"Anything I want?\"\n\n\"Anything.\"\n\nShe leaned up and kissed him on the jaw. \"Deal!\" Then hauled out her ever-present Kleenex and pretended to wipe his face, leaving the lipstick right where it was. They'd been flirting around each other for years, but mutual respect for working together had kept them apart. Both had lost spouses years ago. They were both close to retirement now, so she no longer cared; they could fire her. She was serving lipstick notice to the rest of the women that Doc was hers.\n\n\"Let's take care of this,\" she said.\n\nCory saw him and waved. \"Doc!\" he called out.\n\nAt the sound of his voice, Jamie's head snapped up.\n\n\"CORY?\" she exclaimed.\n\nA stricken Cory looked at Doc. \"You promised!\"\n\nGail looked contrite. \"Cory, I apologize. I was swamped when Doc talked to me. He says he told me, 'don't put them on the same floor.' All I caught was, 'put them on the same floor.' My fault; I should have stopped and listened closer.\"\n\nJamie arrived just then. \"CORY? What are you doing here? And you're...oh my God, it was you that donated the kidney. You foolish, foolish man!\" She started crying.\n\n\"I couldn't stand the thought of you dying,\" Cory admitted, staring at the floor, his eyes already tear stricken.\n\nThen they were in each other's arms hugging, the clang of their IV poles going unheard.\n\n\"I think we're off the hook,\" Doc whispered.\n\nGail nodded and noted from the look of the tent in Cory's gown one organ was working fine and didn't need checking after the surgery.\n\nHe and Jamie went walking down the hall, arms wrapped around each other while tugging their IV poles along.\n\nDoc and Gail smiled at each other and high-fived before Gail headed back to work.\n\nPeople kept giving Doc strange looks until lunchtime when he went into the washroom and discovered what Gail had done. That damn woman had lipstick branded him! He had no doubt it was all over the hospital by now!\n\nHe couldn't help laughing; he was really looking forward to tonight. For the rest of the afternoon, there was a spring in his step that had been missing for too many years.\n\n**********\n\nSeveral months later, Doc opened the gilded wedding invitation, then frowned. In the back of his mind, he'd hoped things between Cory and Jamie would run a while and then wither away. No such luck, they were getting married in four weeks and invited him and a guest.\n\nHis suspicions welled up in his head, and once again, he cursed Jamie's gutless mother for the situation she'd created and refused to face up to. His hands were tied because of confidentiality laws between him and all three. IF he was right! But maybe not; there was that one in six billion chances.\n\nHe had to know!\n\nGathering up information from their files, he filled out a medical requisition. Then rethought the issue; if it was in the medical system, there'd be a record, and it would be obvious he knew. Instead, he went on his computer and located one of those private DNA testing sites and emailed it to them.\n\nThree weeks later, he had an envelope on his desk. He put it to one side, procrastinating over opening it.\n\nIt was two hours before the Wedding. Doc was dressed up, sitting at his desk with an open bottle of scotch and a shot glass keeping him company. He took a sip, staring at that taunting envelope.\n\nPicking it up, he tapped the mystery response against the desk a few times. The answer was there if he wanted to know? But nobody had asked him to do this. It was really none of his business, was it? And with the Wedding in two hours, he'd procrastinated the time away.\n\nDecision made, he cheerfully fed the envelope to the shredder, its little metallic teeth cheekily chattering away like a squirrel as it digested its paper meal.\n\nCapping the bottle and shooting the last scotch down, he headed out to pick up Gail.\n\n**********\n\nJamie looked stunning, dressed in white as she walked down the aisle to the strains of the Wedding March.\n\nHer skin glowed, her hair shone, she'd gained back the weight she'd lost when she was sick. She was the picture of health. Her eyes were fixated on Cory, looking splendid in his tux, surrounded by four equally well-dressed men.\n\nWalking up the stairs to the altar with her bridesmaids, she and Cory embraced and turned to face Father Michael.\n\nHe went through the usual preliminaries and then...!\n\n\"Cory, do you take this woman...?\"\n\n\"He does, and I do!\" Jamie announced in a loud voice to everyone's amusement.\n\nThe priest chuckled at her eagerness. Before he could continue...!\n\n\"I do, and she does,\" Came out of Cory.\n\nFather Michael chuckled again and folded. \"I guess with that out of the way, I now pronounce you man and wife. Go on, you may now kiss the Bride.\"\n\nThey looked so happy up there, Doc thought, glad he hadn't stuck his nose in further.\n\nHe looked down at Gail's face where she was cuddled under his arm. \"I think it's time we had a serious talk.\"\n\n\"About time, you old goat! And the answer's yes!\"\n\n<p align=\"center\">Wheelchair Girl: Epilogue</p>\n\nWith tears streaming down her face, she rinsed the blood off and examined the cuts and bruises in the mirror. She was going to have two black eyes, and her lip was already swollen like some parasite had burrowed in and made itself at home. She tested a tooth with her tongue. It was loose, and she wondered if she'd lose it. Her body ached all over from the punches and kicks he'd rained on her. At least he hadn't broken her nose again this time. Every time he slapped her face while healing, it was torture.\n\nShe could still hear him rampaging around the house, smashing things, and overturning furniture. Baby Jamie was wailing in her bedroom, disturbed from all the screaming and begging she'd done while getting the shit pounded out of her.\n\n\"I'll shut that little bitch up,\" she heard him scream.\n\nAs busted up as she was, she was moving. Her baby was in danger!\n\nIn the kitchen, she grabbed a handy paring knife. There'd be no more begging; there'd be no more pleading. He was an insane beast and had to go. She rued the day she'd ever met him and thought him sexy. Dead or alive, she didn't care. Jamie was everything, and he wasn't touching her.\n\nShe caught up with him at the bedroom door and, in her own rage, plunged the knife into his shoulder without compunction. He roared with pain and turned just in time for her to viciously slash him across his cheek down to his lip. It left a gaping wound, the two sides of hanging tissue spouting blood. He put his arm up to defend himself, and she slashed him across the bicep, happily defacing that tattoo he was so damn proud of.\n\nBacking away, he held his other hand up defensively. She drove the knife clear through the palm, then ripped the blade free and went for his belly. But he had already turned to flee in panic, like the cowardly bully he was.\n\nThe screen door banged, and she heard the roar of his truck, tires spinning as he fled.\n\nShe had to move fast. No doubt the police would be there soon. From previous experience with them, she didn't trust them to keep Jamie away from him if they arrested her. Around here, it was a man's world. Beating your wife was considered a sport. Nothing to be taken seriously.\n\nEven standing in court in front of a judge with multiple bruises and black eyes, he'd refused to issue a restraining order again her husband.\n\nThere'd be no justice. Only prison time for being a woman stupid enough to fight back. The good-old-boy justice system knew how to train women in this neck of the woods.",
        "After what she'd done, she knew he'd kill her when he came back.\n\nShe took a little time to nurse Jamie until she settled down. Then grabbed a suitcase out of her closet and dumped some clothes and underwear into it. Another suitcase got Jamie's dresser drawers dumped in. She hauled both out to her car.\n\nLastly, she grabbed the tin can she had hidden with the three thousand dollars that she'd managed to squirrel away before he poured it down his throat. On her way out with Jamie in one arm and the can clutched tightly in her hand, she paused.\n\nThe handgun! He kept it in the dresser by his side of the bed. If he came after her, she'd need it.\n\nRacing into the bedroom, she retrieved the gun and a box of shells. Outside, she tucked Jamie into her car seat and hit the road, taking the opposite direction from town. The state border was two hours away, and if she could make it that far, the local cops wouldn't be able to grab her without raising attention.\n\nRoaring up the highway, she wondered whether her husband would go to the hospital or head for Fred's place. The hospital would call the cops. No way would he admit to them she had bested him.\n\nWith a wisdom born of years of living and being beaten by him, she knew the answer as sure as the sun rising. He'd get Fred to bandage him up and come after her. Which was good because the cops wouldn't be involved and, at the same time, alarming. No way could her car outrun that truck.\n\nShe kept an eye on the mirror and, sure enough, it wasn't long before she glimpsed a flash of red, the same colour as his truck. A few minutes later, it was confirmed. His truck barreling up the highway at a high rate of speed, determined to catch up. She couldn't even fathom how he could be driving like that after the wounds she'd given him.\n\nShe started watching the road looking for the right spot. Going around a sharp curve, she found it.\n\nShe pulled over and stepped out of the car. He'd be blind coming around the curve, and his temper wouldn't allow him to slow down; that would be his mistake.\n\nMaking sure the gun was loaded, safety off, she braced herself and waited. One of the only good things around this neck of the woods was the male insistence that women learn to shoot. And she'd gotten outstanding. She could hit a can at fifty feet with that pistol.\n\nThe roar of the motor got louder, and there he was. Fred was with him, and she saw their shocked eyes widen with fear realizing she had them lined up with a gun. Both of them knew she wouldn't miss. The brakes screeched, and the tires smoked as he tried to stop to no avail. In a split second, she saw his eyes turn ugly like he was going to crush her with the truck. Then she saw the abrupt shift when he realized he'd also ram the car with Jamie in it, sending his baby daughter over the edge. That changed his mind, and for that brief change of heart, she almost forgave him.\n\nBut anger over years of beatings and humiliation won out!\n\nThe gun roared, and the front right tire blew out with a huge bang. The truck abruptly veered to the right, the unintentional change in direction rolling it up on two wheels until suddenly, there was nothing under those wheels but air.\n\nIt flew about forty feet down the slope, bouncing once, then rolled a couple of hundred feet further before wrapping itself around a tree like a horseshoe.\n\nShe listened for a couple of minutes. There were no pleas for help, no moans of pain. Nobody crawled out; things were silent. Just the buzz of the cicadas in the wilderness looking for a mate. Those two were either dead or unconscious; she'd prefer dead. Even Fred, who abused his wife as severely as she'd been, deserved to die.\n\nSatisfied no one was getting out of the wreck, she walked over to examine the pieces of tire left on the road. She lit up with excitement when she spotted a piece with a bullet hole in the sidewall and an exit hole in the tread. Perfect shot! She picked it up. With that evidence gone, the cops could never prove anything. All they had were a couple of good old boys that wrecked going too fast around a sharp corner, and the front tire blew out.\n\nUnless they survived.\n\nShe eyed the wreck again, but nothing had changed. Satisfied, she climbed into her car and headed for someplace no one would ever find her and Jamie again.\n\n************\n\nThe wedding was over yesterday. Cory and Jamie had gone back to the same resort as before on their honeymoon\n\nUnable to quell the demons in her head, she sat in her usual pew with her purse open, fondling that gun from so long ago, its silver gleam hypnotizing. To this day, she had no idea whether she'd killed them; or if there were warrants for her arrest. All these years, she'd held the truth away from Jamie, afraid that confessing would lead to a life in prison for her and Jamie in his custody. Would Jamie even believe why she'd killed her father or tried to?\n\nIt was time to finish it. Take the gun and end her pain.\n\n\"Mary, I hope you're not considering using that on yourself in here!\"\n\nStartled, her head snapped sideways and she spoke before thinking, \"Father Michael! No, I was thinking about the back alley.\"\n\nHe sat down beside her and pulled her into a comforting hug. \"It's not the answer, Mary. You'd traumatize Jamie, and that isn't fair. Not to mention you won't get to see your grandchildren. You fought so hard to get here; why are you faltering now?\"\n\n\"It eats at me, Father. The guilt is unbearable. Not being able to tell Jamie about her father. Maybe having killed two people. It haunts me at night. I wake up screaming! Other nights I wake up screaming that he's coming after me again and going to beat me.\"\n\nHe nodded; they'd discussed her trauma before in confession. He'd been trying to talk her into counselling for years.\n\nFather Michael sighed. \"Mary, I would never break the confidence of a confession, but I did something. Maybe a bad something! I'd like us to walk next door and talk to my lawyer friend Don. I asked him if he could do some work in confidence, quietly checking out your old haunts to see what happened. He has a report there and says it's quite startling. Maybe it'll go a long way to easing your mind. In the meantime,...!\" He put his hand out for the gun.\n\nSurprisingly, some of her darkness lifted when she handed the gun over. She realized keeping it had been burdening her all these years, a reminder of her descent into killing violence.\n\nDoc and Don were waiting for them.\n\n\"I asked Doc to come too because I could see you were quite upset.\" Father Michael confessed.\n\n\"It's ok! I confessed it all to him years ago.\"\n\nSeated in Don's comfortable office, Father Michael did the introductions.\n\nDon went over to a locked cabinet and pulled out a file.\n\n\"You're welcome to read all this, but if you like, I can give you the highlights right now. I think you'll be shocked by what we found!\" Don said.\n\n\"We?\" Mary questioned.\n\n\"Yes, I have a friend in the area I went to law school with. I gave him the anonymous information, and he discreetly investigated for me. He has no idea who he's doing it for.\"\n\nMary braced herself for the worst. \"Okay, what did you find out?\"\n\n'Your husband survived the wreck, although he spent a couple of months in the hospital, he was so badly injured. He's walked with a cane ever since because his leg was shattered. His friend did not survive. Your husband was charged with dangerous driving and pled guilty. He was sentenced to three years in prison for the crime. At his trial, his pleadings to the judge stated he had beaten you badly, and you had fled with your daughter. He confessed he was drunk, angry, and chasing after you at a high rate of speed when the tire blew out, and he wrecked. He was remorseful because his drunken rampage had lost him his wife, daughter and best friend. His exact words from the transcript!\"\n\nMary was gobsmacked! \"Are you shitting me? He took all the blame?\" She was immediately embarrassed; swearing wasn't something she normally did.\n\n\"He did. It gets better. He got out of prison six months early for good behaviour. In prison, he found religion. His first act on getting out was to find a local Church and join. He stood in front of the congregation and openly confessed what he had done to you and that you had rightfully fled the violence with your daughter. He was gutted that he had behaved like that toward the woman he loved and lost you both. He has a huge scar on his face and calls it his eternal reminder of the drunken violence he embraced in the past. According to him, he got it in the accident.\"\n\nMary was stunned, her mouth gaping open in shock.\n\nDon took her silence as permission to continue. \"He studied for the Ministry and was ordained as a minister two years later. He took over the church he joined, and he's been the pastor there ever since.\"\n\nMary clutched at Father Michael's hand. She couldn't believe what she was hearing.\n\n\"My friend was intrigued by what he heard, so he made an effort to go visit your husband.\"\n\nMary panicked. \"He didn't tell...?\"\n\n\"No, he told him he had clients that were interested in buying land in the area and asked him if he'd ever thought of selling? He said your husband was very kind and soft-spoken and invited him in for coffee. That gave him a chance to look around. He said the house was neat and well looked after. But what caught his attention was a large picture of you and your daughter on the mantle with burnt candles on either side. He remarked on it, and your husband freely told him the whole story. And how he hoped beyond hope that someday he might be reunited with you or his daughter so he could apologize and maybe make amends.\n\nAfterward, he stopped in town at a local diner. He mentioned to the waitress he'd met your husband and was touched by the honesty of his story and the picture on the mantle. The waitress told him that it was known around town as your husband's shrine, and he prays in front of that picture with the candles burning every night before bedtime.\"\n\nMary's head was spinning after hearing all this. It was unbelievable. \"And charges...?\" she hesitantly asked.\n\n\"Nope, he refused to press charges. Said you had rightfully fled the violence and taken your daughter to a safer place after he almost beat her in his drunken state. There's nothing against you.\"\n\nDon passed the file over to her. \"There's a lot more in here. He has a long list spanning almost twenty-five years of charitable and community organizations he's supported and works with, including spearheading a local group against domestic violence. All in all, I'd say your husband has shown genuine remorse and maybe deserves some consideration. But that's not my business.\"\n\nDoc spoke up, \"Mary, I have some questions if you don't mind.\"\n\nMary nodded.\n\n\"So, Jamie never had an identical twin brother?\"\n\n\"No, the only identical twins in my family were my sister and me.\"\n\n\"This may be harsh, but did your sister ever have sex with your husband?\"\n\n\"I caught them in bed during an affair they had. I was so mad at her; she went into hiding and then disappeared. I never heard from her again and discovered years later she was dead. Why?\"\n\n\"Jamie and Cory have given me permission to share some medical information. Cory and Jamie's DNA is similar. I thought for sure they were possibly brother and sister; that's why I was so mad at you that day in the clinic, but obviously, that isn't the case. I may be that your sister ended up pregnant and gave him up at birth.\"\n\n\"But that would make them...!\"\n\n\"First cousins! Maybe half-siblings!\" Doc confirmed. \"But there's a one in six billion chance it's natural.\"\n\nFather Michael spoke up. \"First cousins marrying are fine in this state and a lot of others.\"\n\nMary spoke up, \"It's more complicated than that. My husband also had an identical twin brother. They used to share women when they were younger. If she was sleeping with him...!\"\n\nDoc shook his head; could this get any more convoluted? \"Those kids are beyond happy. I'm not digging for mud and destroying their lives. I vote we don't pursue the issue.\"\n\nEveryone nodded in agreement.\n\n\"Do you want to drop all this on Jamie?\" Father Michael asked.\n\n\"I'm not phoning her today with this. Maybe later, after she gets back from her honeymoon. I need to absorb all this. It's stunning! But I do feel a lot better knowing the facts.\"\n\nMary held her finger up to stop everyone. \"You know, as strange as it sounds and thinking back on it all, I often had the impression Jamie was talking to someone when she was in the womb. Lying in bed at night listening to sounds that sounded like gurgling coming out of my belly. Frequently it felt like she was stretching her arms out to someone. It was weird. I thought it was a pregnant woman's emotions out of control. Thinking about her and Cory's experiences, now I'm not so sure! How could they be talking to each other from a distance?\"\n\nDoc shrugged, \"There's a lot about twins we don't know. Connections between them are common, even distant connections that are inexplicable by current science. Those two are so closely related; who knows? It happens in siblings too. They mentioned a strange language they both understood to me. It's called cryptophasia or idioglossia and is more common in twins, both identical and fraternal. But children invent them too. It's their own made-up language.\"\n\nMary shared some more. \"When she was still small, she would often stop and cock her head like she was listening to something, then giggle. Like something funny had happened. Then she'd blow a kiss and go back to what she was doing. I used to wonder if she was alright in the head? It stopped when she got older.\n\n\"The thing is, I never shared a connection like that with my sister. And as far as I know, my husband didn't have anything like that with his twin brother. Why is that?\"\n\nDoc just shrugged! \"As I said, there's a lot about twins we don't know.\"\n\nIt was all very strange, they agreed.\n\nWith the meeting over, Mary gave them all a hug for caring so much. For the first time in 28 years, she felt the darkness lift.\n\n**********\n\n\"Hey sweetie, did you guys have a good time?\"\n\n\"It was awesome, more fun than I can ever recall having.\"\n\n\"Is it ok if I pop over and talk to you two?\"\n\n\"We don't need the \"when are you having kids\" lecture, mom,\" Jamie teased.\n\n\"I know. Twenty minutes?\"\n\n\"See you then.\"\n\nCory and Jamie were a little shocked when Mary showed up with Father Michael and Doc in tow.\n\nAfter serving everyone coffee, Jamie pointedly looked at Doc and Father Michael, then asked, \"Is everything ok, mom? What's going on?\"\n\n\"Yes, no. Doc and Father Michael are here for moral support. I need to confess something. I've kept our past a secret, and you haven't been told everything. I'm here today to tell you what happened and ask your forgiveness. I'd like to be able to talk without questions. You can ask anything you like after.\"\n\nJamie and Cory glanced at each other. \"Ok, mom.\"\n\nMary started talking. When she finished, Jamie sat there stunned. Then she got up out of her chair and sat beside her mom, gathering her in her arms.\n\n\"You did what you had to survive and keep me safe, mom. I have no regrets over what you did. It was the right thing. I can understand why you never went back or mentioned it. Thank you for protecting me!\"\n\n\"Thank you, baby!\" Mary sobbed. \"You have no idea what that means to me.\"\n\n\"So, my dad is alive?\" Jamie was having a hard time with that.\n\n\"He is, and he's done a lot of years of penance for his behaviour. As much as I hated him, he's become a good person now. His only desire is to reconnect with you or us. I'm not sure I can handle that, but you might want to. His number is there in the file.\"\n\n\"Should I call him?\"\n\n\"It's up to you, baby. I'll support you either way.\"\n\nJamie got up. She needed her Cory; her hands were trembling.\n\nBurrowing into his loving arms, she gradually calmed down. Finally, they looked at each other, and she nodded.\n\nWatching eyes did not miss Cory dialling her phone despite never being told the number or looking at the file. Cory's calm hand held the phone up for her while she snuggled close for support.\n\n\"Church of the Valley, Pastor Mellon speaking.\"\n\nJamie tried to talk, her voice almost verging on tears.\n\n\"Daddy?\"\n\nThere was a shocked silence on the other end. Then his voice came back tremulous with emotion.\n\n\"Jamie? Oh my God, JAMIE?\"\n\nThe End.\n\n\u00a92022 Gordo12\n\nAuthor's notes: There are four contests a year on Literotica, and Valentine's is one of them. Your vote is especially critical today. And as always, your comments are welcome.\n\nThe favourite story and favourite author buttons are badly underused on this site. If you enjoy my demented little ramblings, click on them, please. The site will notify you on your control panel of new stories.\n\nIf you'd like another romance story of mine, please read: \n\n\"On The Streets Before Christmas With A Four Day Old Baby\"\n\nIf you'd like something humorous, it's been called one of the funniest stories on Lit: \n\n\"Cheating Wife? Not While Rufus Is On Patrol!\"\n\nDon't forget Valentine's...vote!"
    ],
    "authorname": "gordo12",
    "tags": [
        "wheelchair",
        "kidney disease",
        "little sex",
        "spooky",
        "ckd",
        "valentine 2022",
        "mind connections",
        "lovers in a past life",
        "pizza blowjob"
    ],
    "category": "Romance",
    "url": "https://www.literotica.com/s/wheelchair-girl-1"
}
{
    "title": "Collateral Ch. 23 - And Epilogue",
    "pages": [
        "Chapter Twenty-Three\n\nSummary: You taught me what it feels to be afraid.\n\nHe went to his office, without even wondering whether he was supposed to search for Jake or not. If last night had been any indication, the ball was in Jake's court now, and he only had to be patient and wait for events to unfold as the new master of the game desired.\n\nBut waiting was torturous, he thought, as he carefully arranged the papers on the desk. The rest of the house was bustling with activity, with his personnel busy with putting everything back together after the party.\n\nThere were messages on his phone from Hans, but he decided against reading them. Right now, there was just one thing he needed to think of. Jake. No one and nothing else.\n\nThe soft knock on his door was barely a surprise. But his voice was still a tad hesitant as he urged the person on the other side to come in. The first thing he noticed was the luggage.\n\n\"I came to say goodbye,\" Jake spoke, without moving an inch away from the now closed door.\n\n\"So soon?\" Klaus frowned. \"I was quite certain you could stay a few more days.\"\n\n\"Yeah, well, that was before,\" the young man said with a sigh.\n\n\"Before what?\"\n\n\"Don't pretend you don't understand,\" Jake almost snapped. \"It's enough for me to just be in the same room with you and I can only think of one thing.\"\n\n\"I feel the same way,\" Klaus replied. \n\nHe remained seated, despite what his instincts were yelling at him to do.\n\n\"Bullshit,\" Jake murmured.\n\n\"Jake,\" Klaus hoped the warning tone in his voice was enough to make the young man pay attention.\n\n\"It feels wrong, you know?\" Jake spoke again. \"That you only have to snap your fingers and I do what you want me to do. How can I trust myself? Whatever you say, I'll just accept it. Like I don't even have any power over myself.\"\n\nKlaus felt his chest growing tighter.\n\n\"Aren't you even interested in hearing me out?\" \n\n\"You'll just make it sound like you were right and I was wrong. And I'll just agree with you. Because ...\"\n\nThe boy looked away, with a pained expression written all over his handsome face.\n\n\"I know why,\" Klaus interjected, trying to make his voice as gentle as possible. \"But this does not mean you are wrong, Jake. And I must apologize.\" \n\nJake seemed shocked at the last words.\n\n\"You're like ... sorry?\"\n\n\"Yes. I acted on impulse that night.\"\n\n\"Really? You? The guy who has a tight schedule on even when to take a leak?\"\n\nKlaus pursed his lips. Now was not the time to laugh at Jake's jokes.\n\n\"You really do not see it, do you, Jake? You taught me what it feels to be afraid.\"\n\n\"Like hell I did,\" Jake protested, but leaned against the door, a sign that he was, at least, willing to listen.\n\n\"You walked through that door like you were the savior. And I was in a room packed with trigger-happy morons, just waiting for a reason to shoot. If you had gotten hurt then, I would have never forgiven myself. All it could take was for them to think you were a traitor to their ... whatever they believed in. So I did the only thing I could think of. I turned the tables, and counted on your brother's sense of loyalty towards you. Which, luckily, worked.\" \n\nJake seemed to ponder over what he was hearing. That was a good sign.\n\n\"I wanted you to trust me, even without telling you everything.\"\n\n\"You lied to me,\" Jake said accusatorily. \"You thought I was blind or stupid.\"\n\nKlaus sighed.\n\n\"I wanted to protect you. And the truth was I wanted you as far away from your brother as possible.\"\n\n\"See? You just think that you're right, all the time,\" Jake's eyes darted sideways, as his resolve was clearly shaking.\n\n\"No. I was not. And I am not. You just made me feel things I never thought were possible. Not for me. And not only fear. Also jealousy.\"\n\n\"Jealousy?\" Jake snorted. \"Like who could you be jealous of?\"\n\n\"Your brother.\"\n\n\"Diaz? What the fuck, man? Did you think I was screwing him on the side or something? That's gross.\"\n\n\"No,\" Klaus shook his head. \"It was nothing like that. But you often spoke of him. Diaz did that, Diaz said that. If Diaz was here, he would do this or that. Diaz, Diaz, Diaz,\" he said through his teeth, glad, for a change, that he could finally express his frustration. \"Yes, I was wrong to be jealous of him. And I suppose it was natural for you to speak of him so much, seeing that you two had been on your own since you were so young. But ... I did not think clearly. And, along with my apologies, I have to admit that taking my frustration out on him held a certain degree of petty satisfaction.\"\n\n\"Fuck,\" Jake murmured.\n\n\"Can you accept my apologies?\" Klaus pressed and got to his feet.\n\nJake recoiled.\n\n\"Yours, maybe, but mine, never,\" he spoke.\n\n\"What do you mean?\" Klaus frowned. \n\n\"I knew shit was about to go down,\" Jake spoke. \"I didn't tell you.\"\n\nKlaus exhaled. Was that all?\n\n\"I knew what was going to happen without you telling me. Stop fretting over nonsense. You are here now, with me. This is all that matters.\"\n\n\"Like hell it does,\" Jake said back. \"I don't want your understanding or your pity.\"\n\n\"What are you talking about? You make no sense,\" Klaus started to walk.\n\n\"Stay where you are,\" Jake said and Klaus froze.\n\nJake was different from what he remembered. Last night had not been just a whim, Klaus thought. But that did not change anything in his heart. \n\n\"All I am asking is for you to stay,\" Klaus spoke. \n\n\"No,\" Jake said stubbornly.\n\n\"Please.\"\n\nThe word felt foreign in his mouth. When was the last time he had said it? Jake just looked at him, his eyes swimming in hurt. If he could only tell this beautiful amazing young man who had taken his entire world by storm and changed everything, that nothing mattered, that he could not care less about white lies and what not. \n\n\"I love you,\" he said simply.\n\n\"Don't fucking say it,\" Jake protested. \n\n\"Marry me.\"\n\nThe first thing he had not planned in maybe his entire life. But it just felt like the right thing to say. Nothing felt more right. \n\n\"Now I know you are completely out of your fucking mind,\" Jake turned quickly on his feet, and pulled the door open. \"I just came to say goodbye. So goodbye.\"\n\nThe door slamming shut was like a physical slap. Klaus pressed his palms against the desk, to regain his balance. Nothing was more wrong than this.\n\n***\n\nJake went out on the street, without any idea where he was heading to. He took out his German dictionary, something he had asked Hans to lend to him and cursed inwardly, after sweeping through a few pages. At least, he knew how to hail a cab.\n\nAnd who to call in such desperate times.\n\n\"Hey, man, sorry to bother you. I know you're already on your honeymoon. Oh, damn, thanks a lot. I need you to tell me where I can find the following.\"\n\nHe repeated each word after Hans as the guy was slowly speaking. Eventually, he chose to just record Hans's voice. That would have to do, he thought, as he murmured his last thanks to the guy.\n\n***\n\n\"Sir, you should at least put on a coat,\" his butler spoke, opening the door to the balcony for the umpteenth time. \n\n\"Please, you are becoming tedious, Bernard,\" Klaus waved him away. \n\nThe ashes burned his fingers. It was all beautiful and white. It had snowed the entire morning, and the garden looked even better all covered in white like this. Everything was beautiful, but it was all for nothing. Because it did not matter if there was no one to share it with.\n\nThe door behind him swished open once more.\n\n\"Bernard,\" he sighed. \"I told you ...\"\n\nA coat was placed carefully over his shoulders and he wanted to protest, but strong arms embraced him from behind and he stopped, not daring to turn. He placed his palms over the hands holding him like he wanted to check if they were real and not just some trick of his imagination.\n\n\"You suck at proposing,\" Jake spoke, without letting go.\n\n\"Is that so?\" he exhaled.\n\n\"Yeah.\"\n\nJake made him turn and watched him carefully.\n\n\"This is how you do it,\" the young man followed, and rummaged for something in his jacket. \n\nKlaus chuckled as he saw the object.\n\n\"Don't you dare to laugh,\" Jake mumbled as he took Klaus's hand. \"I hope I'm not stupidly off the mark here.\"\n\nNo, he wasn't. It fit. Klaus put out his hand, admiring the simple golden band on his ring finger. \n\n\"And now?\" he turned his attention back to the raven haired beauty in front of him. \"What is next?\"\n\n\"I suppose you should say yes, or else I'll have to consider selling my ass to get the money for the airplane ticket back home,\" Jake responded promptly.\n\nKlaus pulled him into a hug and laughed.\n\n\"Do not even dare to say that in jest. Did you just spend all the money you had on this?\"\n\n\"Yeah, like why not?\" Jake shrugged.\n\nA few snowflakes caught into the long dark eyelashes and Jake blinked a few times.\n\n\"Well, I don't suppose that you brought this ring's counterpart, so you have me at a disadvantage here.\"\n\n\"Actually, I did,\" Jake protested and struggled to break free so he could bring forward the second ring from his pocket.\n\nKlaus took it slowly and examined it.\n\n\"Please don't start commenting on how cheap they are and shit like that,\" Jake spoke.\n\n\"Nothing of the kind,\" Klaus linked his fingers with Jake's and slid the ring on the designated one. The one connected to the heart.\n\nThe small clink made as their hands came together as the rings touched had to be the happiest sound Klaus had ever heard in his entire life.\n\n\"May I ask you what made you change your mind?\"\n\nJake sighed, a bit too theatrically to take to heart.\n\n\"I lost this battle a long time ago. I wanted to go back and just try to forget about you. But then you had to say all those stupid things and I knew I couldn't leave no matter how much I wanted to. Or that I would be stupid to do that. Or maybe I would have just groveled and begged for you to take me back anyway. Even if you didn't say anything. I don't know, really.\"\n\n\"That certainly explains everything,\" Klaus joked.\n\n\"So just hurry up and say yes already.\"\n\n\"I did not say yes already?\"\n\n\"No, you didn't. You just want me to go crazy here.\"\n\nKlaus cupped the young man's cheeks.\n\n\"Yes,\" he said solemnly.\n\nJake smiled.\n\n\"That's better. Oh, shit,\" he exclaimed.\n\n\"What is it now?\" Klaus frowned.\n\n\"I will have to learn how to speak German, right?\"\n\n\"You will do just fine. You can start with some familiar terms, that is all. And I will be glad to help you.\"\n\n\"I won't count on you.\"\n\n\"And why is that?\" Klaus asked, taken aback.\n\n\"I'm pretty sure I won't be able to focus with you wearing glasses around me, behaving like a teach.\"\n\n\"Oh, that. Well, it will do you good to get used to a little discipline.\"\n\n\"No way, I'm done with that. I'll just have Hans and Stephen help me. By the way, I already know a few words from them and I know that you swear a lot when you think no one understands you. So stop playing the sour teach act. You're not a fucking spinster.\"\n\n\"I was almost in danger of becoming one,\" Klaus joked.\n\nJake's hands were cold as the young man struggled to pull his shirt out and sneak inside to rest on his chest. Klaus winced, but it was not that unpleasant. Actually, he wanted nothing more but to make Jake burn head to toes now.\n\n\"Let's take this inside,\" he whispered, as his lips hovered closer to Jake's mouth.\n\nHe was rewarded with the sweetest kiss. \n\n\"What do you think the guys will say?\" Jake asked sheepishly once he was allowed to breathe.\n\n\"I bet they will say that it was about damn time. But, for now, let them just enjoy their honeymoon. By the way, they go to Martinique tomorrow. Would you like us to go, too?\" \n\n\"And ruin their honeymoon? Nah,\" Jake shook his head. \"I like how winter feels here. And I just want to be with you.\"\n\nKlaus could not have hoped for a better answer. Just like the man saying the words, it was absolutely perfect. He took his soon-to-be husband by his shoulders and they walked back inside. Agnes was waiting in the hallway, outside the open bedroom door with the tea set already prepared. \n\n\"Hot tea?\" she asked with a smile that shone brighter than all the Christmas lights in the garden.\n\nKlaus was about to say something, but, instead, he suddenly sneezed. Jake laughed softly next to him.\n\n\"Let me get that, Agnes,\" the young man hurried to take the tray from the old lady's hands.\n\nKlaus stared at the scene in front of him with new found fondness. Then he noticed something and frowned slightly.\n\n\"Did Agnes just ... wink at you?\" he asked Jake, as the head of housekeeping walked away, humming something to herself, closing the room door behind her.\n\n\"I don't know, man. You must be imagining things.\"\n\nBy the mischievous smile on Jake's lips, that had to be a blatant lie. The kind he could live with. He allowed Jake just enough time to place the tea set on the table. Grabbing him and squeezing him tightly, he whispered in Jake's ear.\n\n\"Do you have any idea how much I missed you?\"\n\n\"I think I do,\" Jake whispered back.\n\nFor long seconds, they just looked at each other, getting lost in each other, and holding on to each other like drowning men holding on a straw. \n\n\"I still cannot believe it,\" Klaus chuckled softly.\n\nJake giggled in turn.\n\n\"Well, you should.\"\n\n\"Promise me,\" Klaus's voice turned stern and serious. \"That you'll never leave again. Never leave me.\"\n\n\"I promise,\" Jake said back, just as solemn. \"But you should promise, too.\"\n\n\"Anything you want,\" Klaus agreed.\n\n\"Promise me you'll never let me go,\" Jake said, while biting his bottom lip.\n\nKlaus's quirked an eyebrow.\n\n\"Wait, you little rascal ... Were you disappointed I didn't chase you down? I thought you wanted nothing to do with me.\"\n\n\"Well, it wasn't like that,\" Jake's eyes darted sideways. \"At first, I was so pissed at you. I wanted nothing to do with you. But, after a while, I just started to wonder what you might be doing, how you would go about your day, who you would fuck. And stuff like that,\" the boy added quickly.\n\n\"So were you jealous?\" Klaus laughed. \"Imagining me in another man's arms?\"\n\n\"Jealous?\" Jake glared like he could not believe his lover was really accusing him of such a thing. \"All the time,\" he added matter-of-factly.\n\n\"That is good to know,\" Klaus smiled.\n\n\"Why?\" Jake seemed alarmed.\n\n\"It means you care, Jake,\" Klaus shut his lover up with a short kiss.\n\n\"Oh, that,\" Jake giggled. \"I don't know ... I mean ...\"\n\n\"Quit joking,\" Klaus pretended to frown.\n\nJake touched Klaus's forehead and smoothed down the wrinkles there with his fingers. The touch was featherlike, but it conveyed so much. Klaus caught Jake's hand, forcing it down slowly, without breaking eye contact. \n\n\"All this time,\" he spoke, \"I wanted nothing but for you to come running back to me.\"\n\n\"Well, I took a cab just earlier. It was faster than running. Does that count?\" Jake joked.\n\n\"I want you so badly. It is a little scary, you know?\" Klaus said gently.\n\n\"If it's of any help, I'm freaking out here a little, too. But I'm owning up to it. Will you do the same?\" Jake's eyes darkened for a second.\n\nKlaus let go of Jake's hand so he could cup the young man's cheek. \n\n\"Never been surer of anything else in my entire life. I want you here, with me. Forever.\"\n\n\"That's good, that's good to know,\" Jake stuttered, biting his lower lip. \n\nKlaus covered Jake's mouth with his, licking the bite. It had been too long. And Jake seemed to think the same thing, as he began to undress Klaus with the same impatient, although hesitant at first, moves. \n\nThey landed on the bed with a loud thump. Jake tried to giggle again, but this time Klaus was having none of it. He pushed his lover on his back, staring at him with hooded eyes. \n\n\"You know, Jake, you might come to regret your decision to tie the knot with me.\"\n\n\"Really?\" Jake glared, but his lips were quirking into a smile. \n\n\"I might not let you out of the bed for days.\"\n\n\"Then I'll go out at night,\" Jake shot back.\n\n\"I will be possessive and sometimes act like a jerk.\"\n\n\"Sometimes?\" Jake quirked an eyebrow.\n\n\"Well, I will try to function like a normal human being.\"\n\n\"Oh, yeah? And what do you want? A prize?\" Jake challenged him.\n\n\"I get the feeling someone wants to be taken in hand.\"\n\n\"Like who?\"\n\n\"Hmm, funny,\" Klaus commented.\n\nHis erection was pressing on top of Jake's crotch, and there was no understatement that both were feeling the same way. Carefully catching one naked ankle with his fingers, he made Jake bend one knee, until it pressed against his chest.\n\n\"You are definitely a keeper. So brave,\" Klaus cooed.\n\nOf course Jake had to roll his eyes and make a cute little sound. \n\n\"I think I might want to show you right now how much I want to tie you down.\"\n\nThat earned him a quizzical look from Jake. \n\n\"Do you still remember your old friend?\" Klaus asked, as he sneaked one hand to rummage through the clothes rumpled on the floor. \n\nJake's eyes flickered when he saw the belt. The familiarity of it all was almost making them both tremble with want. Jake tried to rise on his elbows, bending his head a little, but Klaus pushed him down. As much as the small sign of submission was filling him with pride, he wanted something different this time.\n\n\"Give me your hands,\" he asked instead. \n\nThe question in Jake's eyes remained there, but the young man offered his hands together. Klaus was quick to tie them and fasten them to the headboard with steady fingers. Jake looked beautiful like that, as Klaus pushed him higher on the bed, so he could lie comfortably, his sinewy arms bent from the elbows. The young man was not tamed, as his gaze remained unflinching. \n\n\"Amazing,\" Klaus commented.\n\nJake's eyes fluttered. It took so little to make his lover come undone. Nice words worked best. Always. \n\n\"Just bring your knees up and show me,\" he asked. \n\nJake obeyed. Klaus began preparing himself. No matter how much his body throbbed with want, he wanted to take it all in, while taking his time. \n\n\"Say it, Jake,\" he cooed as he placed himself at the tight entrance.\n\n\"Nobody fucked me,\" Jake replied. \n\n\"Good answer, love,\" he said as he pushed inside.\n\nJake cursed softly, his head turned to one side. Klaus was louder. His lover was tight and hot, and that made his eyes roll in his head, as he was gripped by that powerful channel of muscles. \n\nHe was maybe in over his head now. But there was no other confirmation needed except for Jake's abs going up and down with each thrust, as the young man's cock lay on them, jerking steadily. \n\nIt was perfect. So Klaus took Jake's hard-on in one hand and began pumping it to the same rhythm of his hips. Jake stared at him, mouthing things with his soft lips, biting them from time to time, driving Klaus mad. \n\nHe knew he would not take long. Not this time. But Jake still beat him to it, letting the words of his rising excitement flow with impunity out of his sexy mouth, as Klaus just continued to pound into him with careless abandon. He followed swiftly, grabbing one of Jake's ankles and sinking his teeth into the sensitive skin there, wanting to mark his lover in more ways than one. \n\nMinutes later, as they both lay panting on the bed, Jake's drowsy voice made his eye snap open. \n\n\"Hey, how do you say ... you know ... the words in German?\"\n\n\"The words?\" Klaus blinked and turned to look at the beautiful man in his bed and his life.\n\n\"C'mon, you know what I mean,\" Jake pouted, knowing what kind of effect that had on Klaus.\n\n\"Oh, the words. Ich liebe dich,\" Klaus pulled his lover closer and looked him in the eyes.\n\n\"Then, I should just say them,\" Jake smiled. \"Just in case.\"\n\nThe words, no matter how clumsy, were sweeter than honey on his man's tongue. Klaus took Jake in his arms and kissed him. Yes, nothing else ever felt more right in his entire life. ",
        "Epilogue\n\nA few years later\n\nJake checked his phone again and sighed. \n\n\"What is it?\"\n\nHe turned to face his husband and smiled.\n\n\"Nothing, really,\" he pushed the phone away from him, on the desk.\n\nKlaus leaned against the desk and watched him with an expression on his face that was telling him it was not a good idea to hide anything from the man.\n\n\"I know that there have been certain financial transactions from here to somewhere across the pond,\" Klaus spoke slowly.\n\n\"Well, I'm using my own money,\" Jake mumbled. \"I would not steal from you.\"\n\nKlaus shut him up with a short kiss.\n\n\"You know very well that you have the right to spend all my money, if you want, love.\"\n\n\"No. He's my brother, my responsibility.\"\n\n\"I respect that. But if you ever need my help ...\"\n\n\"No way. He hates your guts. He barely talks to me.\"\n\n\"And? Did you manage to tell him that we have been married for years now?\"\n\n\"I did. After that, he did not speak to me for a whole month. But now, ever since he got shot, and cannot do much, he seems more willing to talk and accept my help.\"\n\nKlaus caressed his hair slowly.\n\n\"It feels wrong that I cannot do anything to help your brother. He is, after all, family.\"\n\nJake grabbed Klaus's hand and placed a small kiss inside his palm.\n\n\"I would not trust the two of you in the same room. You would be at each other's throats in no time.\"\n\n\"You underestimate my restraint.\"\n\nJake snorted.\n\n\"Maybe you could be civilized. But I doubt Diaz could. I do what I can for him. The rest is up to him alone. Are you ready to go to bed?\"\n\n\"Yes.\"\n\n\"Then let's not talk of my brother anymore. All I want is right here, next to me.\"\n\nTHE END\n\n*****\n\nAuthor's note: \n\nThank you for reading! You've been very nice, leaving comments and encouraging me, and that truly means a lot. I hope the ending was to your liking, and that you stuck with Jake and Klaus until the end.\n\nI will start publishing another story here soon and I hope you will enjoy it just as much. It is different from Collateral, so the only thing I think I'm asking is to start reading it with no expectations. Lol, that sounded a bit wrong, but you're all very smart people here, and I believe you know what I mean, even if I have troubles expressing my thoughts.\n\nNow it's time for me to take a bow.\n\nThank you for being so lovely.\n\nI wish you all the best,\n\nLaura."
    ],
    "authorname": "laurasfox",
    "tags": [
        "gay novel",
        "gay romance",
        "romance",
        "romantic"
    ],
    "category": "Gay Male",
    "url": "https://www.literotica.com/s/collateral-ch-23-and-epilogue"
}
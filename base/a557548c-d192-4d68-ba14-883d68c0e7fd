{
    "title": "Sex Ed 101: Cunnilingus",
    "pages": [
        "Cunnilingus.\n\nWhat is it? \n\nSome believe it's an economy car from Holland that is low on exhaust emissions, high on performance and easy on gas mileage. Some believe it is the casual name of the Bohemian goddess Lililabiana, the guardian of all things vaginal. Others put forth the theory that cunnilingus is a shortened slang term for a cunning, well read linguist. There are even those that believe it is the alias for 1903 vintage porn star and part time haberdasher Gus Liunnnic, from Hoboken, New Jersey.\n\nI pose the question, \"What is it?\" for a simple reason. Most guys don't know what it is, and if they do it's only a very elementary understanding at best. Don't take offense fellas, but let's face it: the average male's understanding of the art of oral sex is about as comprehensive as a review of \"War and Peace\" written by Ed Grimly and edited by that guy from \"Sling Blade.\"\n\nThere are a lot of misconceptions about what to do and not to do when it comes to performing oral sex. Porn would have us believe that achieving a gut busting, honey squirting orgasm can be done by simply playing with your lover's clit and applying healthy dose of random tongue play and finger banging. Of course, porn would also have us believe that you, a mere pizza delivery driver, actually have a chance to score with that one hot MILF out on Bumfuck Drive if you simply bring her a sausage pizza and a twinkle in your eye.\n\nGuys, we all wish that our simple presence would be enough to give her that one electrifying orgasm. But things don't work that way. Like anything worthwhile, cunnilingus requires practice and a willingness to learn. \n\nBy no means am I some expert, and I won't pretend I am. If this were TV Land, I'd be closer to being Ritchie Cunningham than the Fonz. They never came out and said it, but you know the Fonz knew his way around the female nether regions. The man had a finesse and confidence that one can only have if he knows what he is doing. True, in my youth I looked more like Ralph Mouth, but better that than being Potsie. How Potsie ever got laid is beyond me... \n\nYet I digress. \n\nI'm just an average guy who has had the luck to be with some women that had the patience to teach me. I lost my virginity at age 19 to a 39-year-old blonde bombshell massage therapist named Tracy who looked like a 36-year-old blonde bombshell massage therapist named Tracy. She was gorgeous, sexy and adventurous. I think that probably explains why she decided to fuck a 19 year old virgin. Still, for six months she trained me and her lessons have served me well ever since. \n\nNow, I pass this knowledge on to you... I mean, if you're reading this you've finished rotating your socks, put all the toilet paper in nice little stacks under the sink in the bathroom and there's nothing good on QVC right now. So pull up a chair and have a beer, young man. Get ready to hear some advice you probably already know.\n\nWhat's important to remember is every woman is different. Some are very inhibited and may not want you down there. Don't pressure her, for God sakes. You can suggest it, and even talk about how much you'd like to, but don't make her feel bad about it. Other women see it as a requirement. You may laugh at this, but guys, when was the last time you had sex and didn't get a blow job? What would be your reaction if you didn't get a blow job from your woman? \n\nTit for tat, boys. Tit for tat.\n\nSo, here are 8 very simple rules I hold myself to when I'm going down on a woman. They won't all work for you, but maybe a few will. Or maybe they won't. Either way, you've read this far so it would be silly not to get to the good part ...\n\nRULE #1: THE RULE TO LIVE BY\n\nTracy, my massage therapist dominatrix, once told me, \"If you can't make out with my pussy like you make out with my mouth then you've got a problem.\"\n\nGood advice.\n\nOf course, she also told me that I would get over the after-taste of tonguing her ass...\n\nRULE #2: THE BUILD UP\n\nWhen you go to eat at a fancy restaurant, do you rush through the meal? No, of course you don't. You enjoy the meal and relish it. Men, going down on a woman is a fantastic experience, and you want her to enjoy every moment of it as much as you do. Don't waste it. You should be on your desperate little knees thanking God that a woman has gone this far with you, let alone even wants you down there. That being said, unless there's a special occasion or she's already aroused to the point of tearing the sheets off your bed with her toes, DO NOT go directly for the clit. That would be like your woman just sucking your cock into her mouth and playing with your head like it was a chew toy.\n\nYou need to be mindful of where she's at, her body language and her vocalizations. Here are some surefire signs you're NOT doing this right:\n\n1. She looks down and asks, \"When is 'Charles in Charge' going to be on?\"\n\n2. She yawns and pats your head gently.\n\n3. She's painting her toe nails.\n\n4. She asks, \"Are you almost done?\"\n\n5. She paints your toenails.\n\n6. She turns the television on to watch \"Family Feud.\"\n\n7. She says offhandedly, \"That's not how your dad does it...\"\n\n8. She finishes knitting that sweater for your grandmother.\n\n9. She asks if she can pop that zit on your back.\n\n10. She says offhandedly, \"That's not how your mother does it...\"\n\n11. She's looking at your dog Scruffy longingly as he licks his balls.\n\nYou need to make her want it. She needs to want your mouth down there so badly it makes your need for a blow job seem like a passing fancy. Before you decided to grace your tongue over her most sensitive of regions, make the effort to caress her and kiss her. You have two hands, so use them. She has an entire body there just waiting to be enjoyed. Suckle on her breasts as you massage her thighs and trace your fingers over her outer lips.\n\nNow, if you've been able to do all of the above, then you know it's safe to proceed. Still, the name of the game is building up tension. Go slow and firmly. Use your tongue on her thighs; even suckling on the tender meat of the inner thigh can create an incredible sensation. A thoughtful massage of her mound and a gentle grazing of the fingers below to her ass can go a long way. Plant hot, wet kisses around her lips and give her slit a long, slow lick from one end to the other. Put her thighs up on your shoulders and massage her breasts, tweaking her nipples as you eat her out. You want to be able to taste her, to be able to feel how aroused she's getting. Listen to her voice, the moans and sounds she's making.\n\n*IMPORTANT! Relaxation and comfort are of key importance here, but beware. Some women can become too relaxed and break wind (i.e. blow an ass clapper, rectal whistle, angry duckling, muddy nelson, toot, beefy breeze or fart). Should this happen, withdraw immediately and abort the mission. REPEAT: ABORT THE MISSION. A loving facial expression and willingness to the let the air clear between you both is essential. No matter what, neither you nor your woman wants you down there when the duck quacks.*\n\nRULE #3: NO SHARP OBJECTS\n\nMake sure your fingernails are clipped and rounded, guys. Nothing ruins the mood for your woman more than having Freddy Krueger finger bang her with his right hand.\n\nRULE #4: LET YOUR FINGERS DO THE WALKING, LET YOUR EYES DO THE TALKING\n\nA good finger fucking goes hand in hand with oral sex. \n\nThat being said, be gentle. When your woman is aroused and wet enough, you'll be able to feel it. Gently insert a finger or two to start out, and play with her. Again, listen to the sounds she makes. How is she moving her hips? Is she getting wetter? Does she want to take a break for lunch?\n\nHow you use your fingers will depend on the woman. I have an ex-girlfriend who immediately after an orgasm during oral sex wanted three fingers in her pussy pounding away like a jackhammer. She wanted it rough and powerful. This led to her squirting so hard that it was like a fountain. Other women won't need or even want that kind of stimulation. Never assume. \n\nLook into her eyes if you can. Eye contact is essential. Nothing is sexier than when you're making eye contact and doing something as sexually intimate as this. Think about it, guys. When your woman is sucking your cock, is she meeting your eyes? Nine times out of ten she is. There's truth in that look, and you know automatically that you're both enjoying this equally.\n\nThe eyes and the fingers have it. \n\nRULE #5: THE TONGUE TECHNIQUE\n\nThere is no set way to use your tongue. \n\nAgain, don't believe what you see in a porno flick. A woman's clit is very sensitive and usually requires a lot of arousal before you can go ape shit on it. If you jump the gun and go for the clit, you're risking a cancellation on all the wonderful things to come. The clit is a hot spot, but truthfully, there is an entire vagina there to be licked, nibbled and suckled on. It's true, your woman will probably want you to spend a good amount of time working on her clit, but don't let that hang you up by being overzealous.\n\nHere are some helpful hints:\n\n1. BE CREATIVE \n\nDon't just do the same thing over and over again like you're licking an ice cream cone. Lapping is an awesome move, especially when your woman is so aroused that she's literally dripping, but it should be used in moderation. Try new things and experiment on her. Listen to how she responds, and if you can, look into her eyes to see her reaction. You'll know when you're hitting her sweet spot with the right technique.\n\n2. DON'T BE AFRAID TO MESS UP\n\nLearning is half the fun. If you're in a new relationship, it'll take time to figure your woman out. Have the confidence to take any suggestions or constructive criticism she might have to offer. Most women won't mind telling you if you're doing something they don't like. And who knows, you might just stumble on something she likes.\n\n3. GENTLY NOW\n\nSuckling and nibbling on the lips and clit is tricky business, but can be very pleasurable for your woman if you do it with care. If she likes it rough, she'll let you know. But never assume she does. You know how you would feel if she chewed the bark of your log right off the bat.\n\n4. BREATHING \n\nSeriously, guys. Breathing and relaxing the jaw can allow you to go for a long time without getting sore. In the beginning, I could only eat my lover out for maybe 10 minutes at a time before taking a rest because my jaw hurt. Now, I can stay down there for up to a half hour and longer if my lover is willing, teasing and playing with her. I love eating pussy, and for me it's one of the biggest turn-ons I know. So take your time and relax and breathe.\n\nRULE #6: THE MYTHIC G-SPOT\n\nThe G-spot, like the clit, is a hot spot. Put your finger inside her with your palm facing up. Curl you finger and feel for a difference in the membrane of her vaginal wall. It's usually towards the top of the wall and has a kind of spongy, bumpy quality to it. You can usually tell you've found it by her reaction. Personally, I tend to rub and rhythmically press on this spot, playing with it and teasing it as she gets more and more aroused. You can give your woman some mind blowing orgasms by loving on her G-Spot. Again, if you want to see your woman squirt, this is a great way to make it happen. Mind you, all women are different, so this may not apply all across the board.\n\nRULE #7: KNOCKING AT THE BACK DOOR\n\nI've been with a few women who enjoyed having their anus played with during oral sex. If you're going to do this, make sure she's lubed up. Whether it is a finger or a dildo, smooth and well-greased passage will guarantee your woman won't have problems sitting down the next day.\n\nRULE #8: USE YOUR VOCAL CHORDS\n\nSometimes the moaning and groaning of your voice against her pussy can be very stimulating. Slurping sounds and lapping like a dog can add a lot of frosting to an already irresistible dessert. Don't be afraid to let her know she is the best thing you've ever tasted, and if you could you'd bottle her nectar up and use it for a power drink. Let her know how much you enjoy going down on her. It will build her confidence and make the experience more enjoyable. When a man can show how he feels it allows his lover to open up more and relish the experience.\n\nRULE #9: A THICK BUSH IS ROUGH GOING\n\nThis one is for the ladies... \n\nThere are as many variations on the upkeep of pubic hair as there are women. I prefer a woman who keeps her pubes trimmed and short. A thick bush of hair can be difficult for a guy to get through, and can even be a turn off. To be delicate, women are just like guys in the respect that too much hair can lead to an unpleasant scent. No one says you have to be shaved bare (though that does allow for your man to lick more of you), but a nicely trimmed thatch of hair is erotic and much easier to work with.\n\n...and besides, there's nothing worse than choking on pubic hairballs.\n\n***\n\nThe act of cunnilingus is without a doubt one of the most intimate actions that can take place between two people. It's a complete breaking down of taboo and expectation, a most intimate revelation of your partner's sexuality. The act can draw you and your woman closer than you ever thought possible. It promotes better sex and provides an infinite number of possibilities. Don't be afraid to tell her how much you enjoy it. Don't be afraid to let yourself enjoy it, too, guys. \n\nAnd on that note, I'm gonna go take a cold shower now. "
    ],
    "authorname": "bluefox07",
    "tags": [
        "oral sex how-to",
        "oral sex advice",
        "sex advice",
        "sex technique",
        "cunnilingus how-to",
        "cunnilingus advice",
        "how to eat pussy"
    ],
    "category": "How To",
    "url": "https://www.literotica.com/s/sex-ed-101-cunnilingus"
}
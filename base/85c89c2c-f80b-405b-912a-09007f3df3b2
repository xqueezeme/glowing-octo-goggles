{
    "title": "Earth Date",
    "pages": [
        "It's Earth Day and excuse me but it's me. You know, Earth? The planet you live on? So I figure why shouldn't I be able to go out and have a little fun for a change. I haven't had a date in geological ages, and if it weren't for the occasional comet dropping by, or a meteor shower, I wouldn't see anyone. Of course, the moon's always around, but she's so one-faced. As they say, the more she changes, the more she stays the same. She should really consider a makeover.\n\n\"Hey Luna,\" I said, \"How's about you and me doing some stepping out this Earth Day?\"\n\n\"Oooohhh,\" she says, \"I don't know. What're you thinking of?\"\n\n\"I don't know. Nothing special. Maybe get us a couple of dates, just go flying around.\"\n\n\"Did you ask Sol about this?\" Luna asks. \"You'd better get his permission first.\"\n\n\"Hey, I'm a big girl. I don't need his permission. I thought about maybe asking Mercury or Mars. Maybe even one of the gas giants.\"\n\n\"Oooohhhh, I don't know.\" the moon says. \"You've still got a bad case of people, you know. Who's going to want to go out with a planet with a social disease? They'll come down with a case of humans.\"\n\n\"You just keep your big mouth shut about them, Luna dear. From here you can't even see them. Besides, they're not as bad as they used to be. At least not all of them. The French haven't set off a nuke in years, and this rash on America seems to be clearing up.\"\n\n\"I don't know. I've been watching and it seems to be getting worse again these last three years.\"\n\n\"Oh the hell with you.\" \n\nI wait till I toll around and swing out facing space, then I call out to Mars, \"Hey Red! How's it going?\"\n\n\"Hey there. Earth! What's shaking?\"\n\nHe's making a joke, teasing me for that little burp I had in Iran not too long ago. \"Very funny.\"\n\n\"Hey, did you hear the news? I might have had water too! Looks like you're not the only one who's so damned special.\"\n\nAll the planets resent me for my beautiful water. Mars especially seems fascinated with it, and even Luna can't stop playing with and pulling it. Really, it's my best feature. On the good days I have nice fluffy clouds that even rival old Jupiter's. Sure, Titan and some of the groupie moons that hang around Jupiter have ice, but I'm the only one in this system that has liquid water.\n\n\"That's great, Mars! Congratulations.\"\n\n\"Yeah, I might still have some locked up under ground. Word is, I might get some humans too.\"\n\nHaving a case of people isn't all bad. It has a kind of negative appeal in the solar system.\n\nMars isn't a bad neighbor, but he sure is full of himself, especially for a guy whose moons are so\u2014forgive the indelicacy\u2014miniscule. Now, I know: the size of a planet's moons doesn't matter, it's how he uses them, but there are other disadvantages to going out with Mars. For one thing, he's smaller than I am, and that doesn't look good when we go out. As he keeps on going on about how fascinating he is with his little traces of water, I'm already thinking of someone else I can hook up with.\n\nMercury is even smaller, but he's a lot wittier and has a hotter temperament, as long as you stay on his bright side. He can be awfully cold otherwise. Venus is about my size, but I don't really swing that way; female planets not being my thing. She's also very jealous of my water, having squandered hers way back when. I mean, sure she had clouds, but they're frigging sulfuric acid, for cry eye!\n\nThat leaves the gas giants. Frankly, Uranus isn't that bad, but I just can't take all those jokes people make about his name, especially since they found those rings. You know: rings around Uranus, har har. Neptune and Pluto are too cold. Saturn might be okay, but here's a guy who really does have rings, and he's so hung up on them. Besides, he has a thing going with Titan. So it's Jupiter that comes to mind. He's a big guy\u2014a BBP, we call him\u2014and a lot of fun. He's, well, jovial.\n\n\"Hey there, little lady!\" he yells back when I call his name. \"What's quakin'?\"\n\nAgain with the Iran jokes. But coming from him, I don't mind it as much.\n\n\"It's my Earth day,\" I say. \"You want to party?\"\n\n\"Whoa yeah!\" he says. \"I just got to get a sitter for the moons and I'm with you, sweets!\"\n\nSo a little later we're off on some orbital excursions. \n\nLong story short, we end up back at his place, just star gazing.\n\n\"Mind if I get comfortable?\" he asks, loosening his asteroid belt.\n\n\"Knock yourself out.\"\n\nIt's payoff time, and Jupe makes his move. He sidles up to me and puts his hand on my South Pacific.\n\n\"Ummm, baby,\" he croons, \"You're already wet!\"\n\n\"Easy, big boy! Your hands are cold.\"\n\nHe just laughs, and pretty soon his hands slide over and he starts caressing my Africa. He knows what that does to me, and I give a little tremor.\n\nDamn! They'll feel that one in Tokyo, but I can't help it. It feels so good.\n\nHe moves my clouds away and puts his hands on my Himalayas and begins to play with them. He puts his lips next to my Ireland and whispers, \"Oh yeah, Earth. You're the best. You're just all molten inside, aren't you, baby?\"\n\nMaybe I am, but his spot is just getting redder and redder, so he's in no position to talk.\n\nHis hand leaves Africa and travels up to the moist, wet forests of my Hindu Kush, and I can feel his gravity working slyly through my ozone hole and pressing against my Antarctic circle.\n\n\"Oh no,\" I say. \"I don't go that way. Do me straight or not at all.\"\n\nHe chuckles. \"Can't blame a planet for trying, huh?\"\n\nHis hand slides under Asia and I can feel him teasing my Pacific Plate all along my deep, wet, Mariana trench. There's a reason they call it the Ring of Fire, you know, and in a minute I'm just like magma in his hands.\n\n\"Do it!\" I say. \"That's enough teasing!\"\n\nThat's all he needs to hear. He's already got his fingers up my Mediterranean and they're oozing with Greece. I roll over a few hours and he spreads my lesser Antilles and pushes his big thing right up into my Bay of Fundy, so deep that I can feel him in Turkey.\n\n\"That's it, roundboy! Give it to me now! Nice and hard!\"\n\nIt's a good thing the moon's behind me and gone into eclipse or she would have been blue in the face. I grab onto his rings and he fucks me so hard my oceans slosh, faster and faster and I'm getting closer and closer and... Yes! I'm coming! Volcanoes blow all along my Andes and Italy kicks Sicily with a convulsive little jerk as I come and I can feel it all the way down to my Guam: a 9.9 on the Richter if ever there was one.\n\nOld Jupe is spitting methane and ammonia as he comes hard, and his metallic hydrogen spurts out of his very core in long, silvery threads that land all over Australia and hang in long, dripping threads across New Zealand. I scoop them up with my Hawaiian Islands and feed them into my mouth of the Ganges. Yum!\n\nAfterwards we lie around basking in the glow of my Northern Lights, but he's got all those satellites to take care of and her can't really stick around. Already Luna's coming out of eclipse and I know she's going to start letting me have it. She's such a prude.\n\nSure there was a little damage, a few tsunamis and some heavy quakes, the usual mudslides in South America, but it was worth it. I mean, it was Earth Day.\n\nAnd what an orgasm! I actually felt myself move!"
    ],
    "authorname": "dr_mabeuse",
    "tags": [
        "earth day",
        "earth"
    ],
    "category": "Humor & Satire",
    "url": "https://www.literotica.com/s/earth-date"
}
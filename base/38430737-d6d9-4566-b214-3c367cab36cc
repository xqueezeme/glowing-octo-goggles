{
    "title": "Two Hundred Dollars Ch. 25",
    "pages": [
        "49 Dollars \n\nStunned out of all sexual arousal, Bailey laid herself flat out on Kent's bed, absently noting the way the bed sank as Kent sat down beside her. Considering himself tacitly invited by her longstanding appreciation of his massages, his hands moved to her sore cheeks and began rubbing gentle, healing circles. \n\n\"I'd never thought of it that way,\" she told him in a quiet voice. \"I'm the good girl and Laura's the bad girl.\" \n\n\"Really?\" Kent didn't pause in his ministrations, \"It seems obvious. More so now that you're wearing white underwear.\" \n\n\"Since when is it obvious?\" Bailey squeaked out, \"Just this weekend?\" \n\nLaura had made out a few obvious statements in that regard, about her sinfulness and such, but only in the last few days. \n\n\"No, before that,\" Kent replied slowly, his hands pausing and resuming. \"You've always felt like you were doing something wise and smart, making a fair trade, right?\" \n\n\"Yeah. I guess so.\" \n\n\"And Laura has always been about something else,\" Kent said. \"Repaying you for getting her out of whatever trouble she got in, like the spankings counted as the punishment she deserved for whatever that was.\" \n\n\"But now it's just punishing her for, y'know, her orgasms,\" Bailey pointed out. \n\n\"Right,\" Kent agreed. \"Orgasms are bad. Spankings are for bad girls. So if she gets spanked, it works out.\" \n\n\"Bailey, spankings good,\" Bailey intoned, \"Laura, spankings bad.\" \n\n\"Uh huh,\" he went on. \"Although I'm never sure if the spankings are for the last orgasm or the next one.\" \n\n\"What?\" Bailey twisted around. \n\nWhat the fuck are you talking about? \n\n\"When I spank her,\" Kent stopped, his grip tight on the muscles she'd tensed up in order to turn and state at him. \"I think sometimes I'm spanking her to punish her for the orgasm that happens after the spanking.\" \n\n\"That can't be a thing,\" Bailey dismissed it with a twist of her hand. She turned to Kent with a worried look, \"Can it?\" \n\n\"Not my religion,\" Kent took his hands off her butt to wave his hands defensively. \n\n\"Or anyone's, I bet.\" \n\n\"There are billions of people on Earth,\" Kent pointed. \"I doubt any two of them believe the exact same thing.\" \n\n\"Hmph,\" Bailey didn't feel like agreeing. \n\nBut what does that mean for Laura? I'm going to have to talk to her about this, won't I? \n\nBailey, looking across the floor at her discarded panties, decided she would pay a lot more attention to the colours from now on. She would have to talk to Laura, though, as it seemed like a decent friend ought to have a few words and make sure the air had cleared. \n\nWhat should I do? She's so happy right now, like I've never seen her. \n\nBailey spared a glance at the white board, realizing only forty nine dollars remained of her original two hundred dollars. \n\nNot much longer, at this pace. \n\nAnd what then? \n\nFor me. For Laura. \n\nWhat then? \n\n============================= \n\nKent knew that the cumulative effect of his encounters with Bailey and Laura had warped his entire outlook on sexuality. He knew, for instance, that when he came back to the apartment on Tuesday, he'd find Bailey and she'd ask for more spankings. The conclusion read out so clearly in his mind that he didn't feel the need to rush things. \n\nWhen we started doing this, I'd make sure to make a bit of noise coming in, hoping she'd hear me. Now I know better. \n\nInstead, Kent slipped in quietly, walked past his bedroom and hit the kitchen, an ardent need to quench his thirst with a glass of cool water. Feeling a little perplexed about his thirst relative the weather, he opened the freezer and dropped a pair of ice cubes in his glass. He didn't hear Bailey come out of her room until he'd filled his glass from the jug of filtered water in the fridge. \n\n\"I haven't talked to Laura yet,\" Bailey fretted as she came in. \n\n\"About what?\" Kent poured himself a glass of water from the filtered container in the fridge. \n\n\"This whole good-bad thing?\" \n\n\"Oh,\" Kent sounded surprised as he closed the fridge. \"Now you're worried about that?\" \n\nBailey shrugged and ticked her chin down the hallway, \"Kinda. But she's cramping right now, so...\" \n\nKent nodded his understanding, \"Maybe in another day or two.\" \n\n\"Right,\" Bailey agreed hesitantly. \"I made four marks on the board, though.\" \n\n\"Going pretty hard, aren't we?\" \n\n\"I don't like being in debt,\" Bailey turned her nose up, then looked around the kitchen. \n\n\"Here?\" Kent asked. \n\n\"Should be fine,\" Bailey pulled one of the chairs from the kitchen table in the middle of the open floor. \"Sit down.\" \n\n\"O-kay,\" Kent replied slowly, setting his glass down on the table behind his chair. \"What are we doing?\" \n\nBailey stood on his right side and unbuttoned her jeans. Kent looked, well past the point where he wanted to pretend he didn't want to stare. She pushed her jeans and panties down all at once, letting him get a brief look at her pussy before she leaned over. He took her weight, feeling her body press down over his lap until her hands could reach the floor on his left. \n\n\"Comfortable?\" he wondered aloud. \n\n\"Good enough,\" she said. \"Do them fast, though. I don't know what kind of time we have.\" \n\n\"Fast?\" \n\n\"Well,\" Bailey wiggled uncomfortably. \"You don't have to. It's your dollar.\" \n\n\"Uh-huh.\" \n\nKent surveyed the cheeks before him. The balancing out he'd done the day before, hammering her left cheek to match the right, had almost faded. \n\n\"I can go fast,\" he said. \"But it's going to make you extra sore.\" \n\n\"Whatever,\" Bailey huffed, the awkward position making it difficult to breathe, \"I haven't been able to sit down properly for days.\" \n\nKent squeezed her right cheek, \"Should we go with that, then?\" \n\nBailey didn't answer, leaving Kent in a quandary. \n\nWhat does she want here? Am I supposed to go hard on her seat or have we actually crossed the threshold where she doesn't want it anymore? \n\nHe stalled, massaging her cheeks with both hands, feeling her tense and shiver under his grip. \n\n============================= \n\nI'm kind of ripping him off here, Bailey realized. I know what he wants to do, and it's his money. If he wants to spank me low, I should let him. \n\nShe also knew how rough the last few days had gone for her, sitting down gingerly everywhere she went. Some of her lectures were held in the old halls, the ones with hard, wooden or plastic seats. \n\nI should tell him to go ahead. Dare him or taunt him or something. \n\nBut part of her whimpered inside, too. \n\nThe conflict inside Bailey welled up out of her chest, constricting her vocal chords. \n\nI want the debt gone. This is the only way past it. I already made the marks, but I can't handle what he deserves to get from me. \n\n\"Gah,\" she said out loud and pushed herself upright. \n\nShe slid her jeans and panties all the way to the floor and put a leg over Kent so she could straddle him. \n\n\"Look,\" she said, \"I want to do my four dollars, but I can't take it low. I need at least a day where I can sit down.\" \n\nThe sympathy in Kent's eyes shook her right down to the base of her spine. \n\n\"I see,\" Kent gulped. \n\nI need to make an offer, something to salve the way I'm stealing from him. \n\n\"You remember with Laura?\" Bailey asked. \n\n\"Specifically?\" \n\n\"Oh,\" Bailey looked at the ceiling and sighed. \"I wish I had some whipping cream.\" \n\n\"Oh?\" \n\n\"She looked so pretty,\" Bailey moaned sadly, remembering her friend's curves, \"her nipple all hard while you were sucking on it.\" \n\n\"I remember,\" Kent inhaled sharply as she felt him harden underneath her. \n\n\"How about that, then?\" \n\n\"How about what?\" he raised an eyebrow. \n\n\"You do the spankings high,\" Bailey said slowly. \"But I, um, well ... here!\" \n\nShe used her right hand to lift one side of her shirt up and exposed her breast to him, pressing it toward his face. \n\n\"Suck on your nipple?\" \n\n\"Uh-huh,\" she breathed, watching his lips move toward her. \n\n\"Too bad there's no whipping cream.\" \n\nBailey squeaked, feeling his breath over her skin. \n\nIf only we had some. If only, if only. \n\nHer eyes frantically looked around the kitchen, brainlessly hoping to find some whipped cream lying around. \n\nEven a can of the fake stuff would be fine right now, she thought, imagining the sound it would make if she sprayed a little floret over her breast. \n\nHer eyes lit on the glass of ice water behind Kent. \n\nWho drinks ice water in the middle of November? \n\nBailey didn't care, reaching past Kent to dip her fingers in the water and bring those wet digits back to her chest. She shivered and jerked as the coldness touched her sensitive areola, dripping down her flesh, in little dots, making her nipple harden. \n\nThat's got him, Bailey realized her triumph as Kent's lips wrapped around her nipple, tacitly accepting the deal. \n\nKent's hands, already squeezing her cheeks, swung out into the air. \n\nOh, god. He's doing double spa- \n\nThe first two spankings came down on her cheeks simultaneously. \n\n\"One, two,\" she moaned. \n\nOnce before in her life, when she'd made out with her last boyfriend, he'd tried kissing her nipples. Still hating her stupid, skinny body, she'd only felt mortification, as if the boy had set out with the intent to mock her body. \n\nBut not Kent, she noted, looking down at his closed eyes. He's into this. Into me. He loves doing this. There's nothing wrong with me. \n\nThe second pair of spankings cracked down and Bailey stared at Kent wide eyed. \n\nThere's nothing wrong with me. \n\n\"Three, four,\" she said, feeling nothing of the spankings as her mind spun in circles. \n\nThrough his eyes, there's nothing wrong with my body at all. Holy shit. \n\nThe spankings went on and when they got to the end Bailey had the vague feeling that she'd counted them correctly because Kent hadn't stopped at any point. But her mind had gone elsewhere. \n\nThis is so nuts. The guy who spanks me for money is the guy who makes me feel the best? How fucked up is this? \n\nShe could have tried for an orgasm, feeling his tongue circling around her nipple as his palms bounced off her ass cheeks, but Bailey only let it go on. At some point, Kent stopped spanking her and started squeezing her cheeks instead. \n\n\"You need to come, baby?\" she asked him, pushing down into his lap. \n\nHis suckling became ferocious at this prompting and she put her hands on the back of his head, pulling him tightly to her breast. \n\nMy nipple might end up sore in the morning, Bailey thought, a perverse sense of pride glowing at the ache in her flesh. I thought my tiny boobs would make me useless for this sort of thing, but Kent's really going full out. \n\n\"It's alright,\" she whispered, \"Go ahead and come.\" \n\nHe vacuumed up far too much flesh into his mouth, pulling at her breast as his fingertips sank hard into her cheeks. For her part, she held on tightly to his head and gyrated in his lap. He grunted in to her chest and she felt his orgasm exploding underneath her. \n\nMessy pants for him, not my problem. \n\nAfter a moment, spending himself empty, Kent released his grips upon her body. \n\nHow much debt do I have left? Bailey tried to do the math. Forty five dollars now? I have to get rid of it. Fast. \n\n============================= \n\nThe soreness of her flesh got Bailey to thinking more deeply on Wednesday morning. \n\nI can't keep doing this, not at this pace \n\nEasing her way through her breakfast, she decided to take her scrambled eggs back to her bedroom rather than let Carson see the way she had to sit down. \n\nWhen was the last time I could just drop myself down into a chair? \n\nShe assured herself that it hadn't always felt like this. At some point in the past, she and Kent had taken long enough breaks between spankings that she could recover. \n\nMy butt hasn't felt like continuously since September, has it? \n\nGrimacing for her mental anguish, she took a bite of her toast. \n\nI want to get this done, though. Not after Christmas, not after my next period. Now. \n\nThe mission had become more difficult with Laura's absence. Having to go until at least Friday night, probably Saturday, entirely solo made things harder on her own butt. \n\nAt least Laura was good at sharing, she winced as she realized how badly she wanted to use her friend just to spare her own flesh. \n\nSo what's my problem, here? Bailey tried to firm things up in her mind. I want ot burn through my debt, but I can't take another spanking right now. Or at least not a lot of them. \n\nLooking up at the ceiling, she acknowledged she could probably pay another dollar, maybe even two, before the pain just overpowered her. But she also knew that two dollars at a time wouldn't get her anywhere important. \n\nSo if not spanking, what? \n\nShe felt a hard wall press up against the front of her body, in that way that bumping your nose against something in the dark made your whole face light up with instinctive, spinal reflex fear. \n\nI'm not willing to do most of the things men pay women for, Bailey twisted her lips before taking another mouthful of eggs. \n\nAlways mindful of her own internal accusation of prostitution, Bailey steered herself away from anything even close to a purely sexual exchange. \n\nI'll give him handjobs, but not for money, she frowned, so that's not going to help me. I'm not going to blow him for money either. \n\nShe hook her head, realizing that making a list of all the negatives couldn't help her here. \n\nWhat does he want that I can make money from? she wondered. I'll take off my clothes, even pose for him. So I guess being a stripper is okay after all. \n\nBailey mentally saluted Laura for getting that out in the open. The question lay with Kent as to whether or not he would pay just to look at her. She couldn't imagine making that offer without the context of a spanking. \n\nHow awkward will it be if he doesn't respond eagerly? Bailey shivered. But pictures... maybe he'd pay for a picture. \n\nEven then, the pictures had always related to the spankings immediately preceding them. \n\nI can either make up something entirely new or I can find a way to make the very few spanking I can take worth way more than usual. \n\n============================= \n\nLaura lay on her bed, curled up on her side, facing away from her bedroom door. \n\nUgh. Sometimes you get cramps and sometimes the cramps get you. \n\nSuch is the trial of woman. \n\nThe preacher had gone silent for days after the brutal morning of spanking on the weekend, and she'd thought him gone for good. The reality, however, lay elsewhere. Her oncoming period, and the pain that occasionally struck with it, had kept the nasty little man away. \n\nSo Laura had eked through her early week and, as Wednesday came and her muscles started to relax, the preacher had returned, his internal voice gone silky smooth as if he stalked around her room behind her back and merely whispered his invective.  \n\nKnow you not the gluttony of your sins? Surely, this is the path to damnation? Not only for your own weakness, but for your encouragement of your friends. \n\nThey'd be doing this without me, and you know it. \n\nIt would be nothing compared to the awfulness you have invoked. \n\nFlashing before her eyes, she saw her own breast, covered in whipped cream, Kent's mouth moving down to vacuum it from her flesh. \n\nLaura whimpered. \n\nThat was pretty bad, actually. \n\nYou know, and yet you continue. \n\nI gotta be me. \n\n\"You alright, sweetie?\" her mother called down the hall. \"You want some tea?\" \n\n\"Thanks, mom,\" she called back. \"Yes, please.\" \n\nA kettle clicked on. \n\nCount on mom to know when my period is. \n\nWith her thoughts straying from her debauchery, the preacher went silent once more. \n\nHe and mom don't really get along, do they? \n\nIt made Laura wonder why the nasty little minister had followed her here all the way from back home. If her parents didn't push their religion on her these days, why did the voice of their old preacher still echo inside her head? \n\nUgh. Two more days, she thought hopefully, two more days and I can see Kent and Bailey again. \n\nOf course, Laura knew she could go over and see them any time she wanted. She just wouldn't be able to have fun with them until this was over. \n\nYou're planning it now? That only makes it worse. \n\nI know. I know. I'm a very, very bad girl. \n\nAt least you admit your state of sinfulness and- \n\nAnd I need a good, hard spanking. \n\nThat is not-! \n\n============================= \n\n\"Okay, look,\" Bailey came into his room Wednesday night, the moment Carson stepped out. \n\n\"Look?\" Kent asked, observing Bailey's wide-eyed glare, noting the way her lips pressed together. \n\nShe's looking a little belligerent and wary, Kent noted, is she upset about something? Is all of this finally wearing her out? \n\n\"There's only so much my butt can take, right?\" \n\n\"Right,\" Kent spoke slowly, wondering where she led him. \n\nIt's always up to you, Bailey. Take a day off. Take a week off, if you want. Kent peered at her. In fact, why are you in such a hurry? \n\nBut he didn't question her out loud. The hectic pace at which she and Laura had burned through Bailey's debt had kept all of their hormones pumping for days now, and he'd grown addicted to the state of constant intoxication. \n\nIf she wants to rush, it's her ass on the line. \n\n\"So here's the thing,\" she said. \"There are only so many things I'm willing to do for money.\" \n\n\"Like getting naked and taking a spanking,\" Kent confirmed. \n\n\"Right, I'm not-,\" Bailey paused. \"I don't do, well, y'know.\" \n\n\"Prostitution?\" Kent spoke the word for her. \n\n\"Exactly.\" \n\nShe means she won't even do hand jobs for money. I get it. I suppose this counts as the clearest we've ever communicated on that part of her boundaries. Bailey's never really had to discuss her limits, though, has she? Because she always tells me exactly what she's willing to do at any give time. \n\n\"So?\" he prodded. \n\nBailey took a deep breath, \"I want to do nine dollars.\" \n\n\"Nine!?\" \n\n\"Hold on,\" she held up hand. \n\n\"I'm listening,\" Kent lowered his voice a little, but the worried tension still came through. \n\n\"I'll be naked,\" she said, holding out his favourite kitchen implement, \"And you'll use the spatula.\" \n\nKent peered at her. Using the spatula meant half as many swats as spankings, but it wouldn't work out evenly if she wanted to pay nine dollars. \n\n\"And,\" Bailey paused. \"Remember, the blindfold?\" \n\n\"I'm blindfolded?\" Kent turned his head aside doubtfully. \n\n\"Not you-\" \n\n\"You're blindfolded?\" \n\n\"No,\" Bailey looked up a the ceiling, then held out her hands with her wrists overlapping. \"You can tie up my hands.\" \n\n\"Oh,\" Kent felt his breath catch. \"Naked and tied up?\" \n\n\"Just the wrists,\" Bailey warned, her voice faintly tinged with panic. \n\n\"The pose?\" \n\nBailey shrugged, \"However you like. But tying me up - and using the spatula - means it's just three sets.\" \n\nKent steepled his fingers, \"So just nine swats at your ass?\" \n\nBailey nodded. \n\n\"Deal.\" \n\nShe turned away from him and he watched as she carefully made nine marks on the whiteboard. ",
        "\"I've never seen so many marks at once,\" Kent pointed out. \"There's barely room.\" \n\nBailey nodded, \"I'll get my scarf.\" \n\nShe stepped out of the room and Kent stood up. \n\nWell, this is going to be different. Assuming I get her all tied up, what do I do with her? \n\nBailey returned a moment later and handed him a black scarf. \n\n============================= \n\nAlright, Kent, Bailey pursed her lips patiently. Ball's in your court, now. You have to come up with something original. \n\nTo punctuate her argument, she held out her hands, limp wrists overlapping. \n\nHe's uncomfortable, she smiled. Good. \n\n\"It'll be easier if you undress first, won't it?\" Kent asked. \n\nDamn, good point. \n\nBailey tried to imagine removing her shirt with her wrists tied together. \n\n\"Fine, sure,\" she replied. \n\nFeeling a little shaken by the sudden derailment, Bailey didn't want to waste any time. She unbuttoned her jeans and pushed them and her panties down to her ground at once. Regaining her posture, she pulled her shirt off over her head. \n\n\"Good enough?\" she prodded, her eyes lifting to his face and finding his shocked expression greeting her. \n\nSheesh, you've seen me naked before. \n\nKent nodded and laid the smooth, cotton scarf over her wrists, wrapping them twice before tying a knot. \n\nThat's pretty tight, actually, Bailey realized with a gulp. \n\nThe idea of giving Kent this much control over her had seemed hot, but feeling her wrists cinched together brought on another sensation. Bailey did her best to stomp on her anxiety as Kent took the long, trailing end of the scarf. \n\nKind of weird, now that I think about it, she stared at the scarf. He didn't tie me up with the middle of the scarf, but one end. \n\n\"Do we need, like, a safe word or something?\" Kent wondered aloud. \n\nDid he notice my anxiety? Is he offering me a way out? \n\n\"Meh,\" she rolled her eyes at him, then leaned her in towards his face, \"The safe word will be, 'untie me, you jackass'.\" \n\n\"Haha,\" Kent breathed lightly and then laughed with more honesty. He pulled on the scarf, leading her toward the doorway. \"Fine. Let's go.\" \n\n\"Go?\" \n\nGo where? \n\n\"You said I could pick the pose, right?\" \n\n\"Yeah.\" \n\n\"Well?\" Kent tugged on the scarf again, and she followed him out into the hallway, letting a little bit of tension build in the scarf between them. \n\nHe's using it like a leash, Bailey withheld a whimper. \n\nKent led her to the bathroom where he put his end of the scarf over the horizontal steel pole that held the curtain rod in place. \n\nOh, god, she thought, What's my safe word? What's my safe word? \n\nKent didn't look at her though, until after he'd threaded the scarf over the pole. By then, she'd banished the panic from her expression and replaced it with indifference. As he pulled on the scarf, Bailey let her wrists rise until Kent had stretched her to the limit. \n\nHe's still pulling, though. \n\nBailey went up on her tiptoes, her body moving forward so her knees rested on the edge of the tub. \n\n\"There we go,\" Kent announced triumphantly. \n\nThe benefit, for Kent, lay in the fact that he could hold the scarf tight with his left hand, stand almost anywhere in the bathroom, and still have his right hand free. \n\nOkay, this is weird but I can handle it. \n\nShe listened as Kent took a few experimental swings with the spatula, letting it swish through the air near her naked cheeks, creating a gentle breeze over her skin. \n\n\"You finally made it,\" a touch of astonishment touched Kent's voice. \n\n\"Made it?\" \n\n\"Remember when we started?\" he asked. \"What did you want me to pay for spanking you?\" \n\nBailey thought back, racking her brain to recall their first encounter. When they'd started, she'd wanted him to do five spankings, over top of her jeans, for a dollar. But he'd insisted on ten- \n\nNo, wait. Before that? \n\n\"One spanking for each dollar,\" Bailey told him. \n\n\"Except now you're naked.\" \n\n\"And you're whacking my butt with a rubber spatula,\" she tried to look over her shoulder, but the scarf made it to awkward to do anything but catch the sight of her body, stretched out, in the small mirror over the sink. \n\n\"You realize,\" Kent lowered his voice. \"These are the most expensive spankings you've ever offered.\" \n\nThat's a bit on the ominous side, Kent. \n\n\"Uh-huh,\" Bailey replied, trying to stick her hips out at him, but failing due to the way he'd stretched out her body. \"I know what I'm in for.\" \n\n\"Hope so. Ready?\" \n\nBailey nodded and took a deep breath. \n\nAt a dollar per hit, I expect - HA! \n\n\"One!\" she shouted, pain searing through her left cheek. \n\nKent didn't give her a moment to think, striking her right cheek next. \n\n\"Two!\" \n\nThe worst part, as far as she could tell, came from the tension in her muscles. Extending her body this way, and forcing her to keep it extended, left every muscle from her calves to her lower back, in a state of extreme tension. Kent exploited this by striking the centre of her cheeks \n\n\"Three! Four!\" \n\nHe's alternating. Is that a kindness? \n\n\"Five! Six!\" \n\nHe paused after those two strikes, gently running the spatula over her flesh even while he kept the tension on the scarf tight. \n\nI'm not as scared as I was when he first tied me up, but this is still weird and I'll be glad when he unties me. \n\nBailey knew she could tell him to untie her at any time, but that didn't go with the spirit of every encounter so far. \n\nJust three left and it's over. \n\nKent resumed his pace, striking her left and right again. \n\n\"Seven! Eight!\" \n\nKent laid the business end of his implement squarely across both cheeks and Bailey squeezed her legs together, offering him the chance to strike across both sides at one. Instead of striking her in the centre and hitting both, however, he struck the right again. \n\n\"Nine!\" she cursed. \"Bastard.\" \n\n\"Those were expensive,\" Kent pointed out. \n\n\"For you and me both,\" she scolded, but noted he hadn't relaxed his grip on her scarf. \n\n\"You want a picture?\" he asked. \n\nThat would extend my time in this position, all tied up, at his mercy, she realized and took a breath. But the hard part's over. \n\n\"How do I look?\" Bailey twisted, trying to see herself in the mirror, and Kent relaxed his grip just enough to let her turn her head. \n\nHer body stretched out before her, every muscle from her calves to her shoulders locked in a pose the lights accentuated to perfection. Bailey caught her ass cheeks and the bright pink circles Kent had created in their centres. \n\nNot his usual artwork, but I see how it works with the pose I'm in. \n\n\"Yeah, get my phone,\" she said. \"It's in my jeans.\" \n\nShe waited, keeping her hands in the air but resting on her heels for a moment while Kent left to retrieve her phone. \n\nOh, damn, Bailey realized she had to bring her hands down so she could unlock her phone and disable it. Kinda ruins the whole effect, but what can I do? \n\nThat done, she handed the phone back to Kent and he pulled her up onto her toes again. \n\n\"I can go higher,\" she told him, remembering how her muscles looked at maximum tension. \n\nHe pulled and she whimpered, almost leaving her feet as the mountings for the steel pole groaned against the wall. \n\n\"Quick,\" she pleaded. \n\n\"Right.\" \n\nThe camera clicked several times. \n\n\"Can you see all of me?\" \n\n\"Yeah, there's just enough space in here.\" \n\nThe pull on her wrists relaxed and she sank back to the ground, breathing a sigh of relief. Turning back to him, Bailey held out her wrists and waited patiently while Kent unthreaded the scarf. \n\nShit, that's tight, Bailey felt her blood pressure rise as Kent had difficulty with the knot. \n\n\"You want that pic?\" \n\n\"The whole thing?\" Kent sounded surprised, his hands freezing in the middle of his efforts to release her hands. \n\n\"The whole thing. No blurring.,\" she made sure to look him in the eye. \"Two whole dollars, though.\" \n\n\"Sure.\" \n\nThat didn't take him long, Bailey felt a wave of satisfaction flow through, an endorphin rush as satisfying as walking out of any exam she'd ever written. Probably 'cause I'm naked. That makes eleven dollars gone in one night. \n\n\"Come on,\" she urged, jerking her chin toward the doorway. \n\n\"Come on?\" \n\nWhy is he so clueless? \n\n\"Your bed,\" Bailey urged. \n\n\"Oh.\" \n\nKent got it then, to her relief, and took the lead by grabbing up his end of the scarf to pull her back to his bedroom. She pulled against him, playfully, and Kent looked back, meeting her eyes. Bailey held her wrists against her chest, letting tension snap the cotton fabric between them. Kent pulled harder and she resisted a bit before giving in and they both stumbled through the doorway. Bailey kicked the door closed behind her and got to work on Kent's clothes. With her hands tied, the button on his jeans took a great deal of work, but Kent let her flail away as he ran his hands through her hair. \n\nOnce she had his pants off, she took his boxers down with them, letting his erection spring free into her face, touching her nose. \n\nI didn't let him lick me, that time he offered, Bailey recalled, is it different now? \n\nImpulsively, she kissed the tip of his penis, opening her lips up just wide enough for the drop of pre-come on the end to pass into her mouth. Kent groaned and she stood up, clumsily pulling his shirt off as she did so, and she pushed him until he bumped into his bed. \n\nThe scarf is almost in the way now, unless- \n\nKent jarred her thoughts by pulling his end of the scarf and twisting her onto the bed on her side. He knelt on the floor beside her and surveyed her naked body, up and down. \n\nWhat's he planning to do, exactly? \n\nHe dropped the scarf off the end of the bed and leaned over to pick it up, but she quickly realized he'd run it under the bed, around one of its legs. When he pulled on the scarf, her arms went up above her head, off the end of the bed. \n\nKent could probably dislocate my shoulders. \n\nInstead, he used her incapacity to lower his mouth to her left breast, closer to the edge where he knelt, and gently kissed her nipple. Bailey thrashed against her binding, lifting her chest up and wishing she could grab the back of his head to press it into her breast, but his grip on the scarf held firm. The gentle teasing at her tip maddened her. She looked down to see him watching her eyes, checking her reaction as he wiggled his tongue around her areola. \n\n\"You bastard,\" she whispered, unable to catch her breath. \"You son of a -\" \n\nKent stopped then and, with a last blink, took his eyes off hers. His mouth moved down her body, kissing her ribs, her solar plexus, her navel. \n\nOh, god, should I let him? Bailey felt her stomach tightening anxiously. All I have to do is nothing and... \n\nHer legs answered of their own volition, opening as he turned his body to the other end of the buffet he'd laid out by tying her across his bed like this. As kneeling beside the bed no longer gave him the reach, he got up on his feet and leaned over to continue kissing his way down to her pussy. When his tongue delved between her lips, she moaned. \n\nI never let them do this. Bailey's mind played out the words over and over again. A finger on my clit is one thing, but... oh, god. \n\nShe wondered, briefly, if Kent had ever done this with his other girlfriends as she writhed under his ministrations. The desperate thrusts and twists of her hips ground her sore flesh against his bed sheets, but that only amplified the sensations flowing through her body. \n\nWhy didn't I let them do this? Bailey asked herself, but the answer came just as quickly. Because they weren't Kent. \n\nBailey felt every nerve in her body go into overload, the stimulation overwhelming her senses and causing her body to shake. \n\n\"Too much,\" she gasped. For a moment, Kent started moving his tongue faster, \"No, no. Really. Too much.\" \n\nHe stopped, then, his head turning to look up her naked body, one eyebrow raised in query. \n\n\"Just get on top,\" she pleaded. \n\nTilting his head, but not releasing his grip, Kent stood and looked at her again. \n\nOh, god, is he wondering if I meant penetration? Bailey felt her stomach twist at the confusion she'd created. \n\nIn a moment, though, Kent caught the look in her eyes and realized what she'd actually meant. He crouched down on the floor for a moment, doing she knew not what, and then stood up, preparing to climb into bed. \n\nBailey tried to move her arms, hoping to get her hands on his erection for at least a moment, or get her arms around his neck, but found the scarf gave her no room. \n\nHe tied me to his bed? \n\nHelpless, she watched Kent move over top of her to situate himself between her legs. He laid his shaft along her lips, into which his length sank smooth and wet. \n\nThat's better. \n\nBailey pulled against her scarf, her wrists still locked above her head, as Kent ground himself against her pussy. Looking down her body, she saw his swollen penis poking between their locked up stomach muscles. \n\nRight on my clit. It's perfect. \n\nShe'd never before had the impression of looking down the barrel of a gun, knowing it might go off at any second. \n\nNothing I can do about it... nothing I can do... \n\nThe complete lack of control, and the knowledge that he could come any time, drove Bailey over the edge. \n\n\"I'm -,\" she gasped, feeling her entire body lock up. She heard a whimper issue from her throat, \"I'm coming!\" \n\nAs her vaginal muscles contracted and pulsed, she felt Kent's weight suddenly press down hard on her pussy. \n\nOh, god, she panicked, looking down her body, and turned her face aside. How far can he-? \n\nThe first volley of semen streaked out and a wet line suddenly formed over her breastbone, up to her neck, reaching her left cheek. \n\nThis is what it was the like the time I blindfolded him? The time I can't remember? \n\nBailey knew she'd jerked him pretty hard that time, splattering little droplets all over her body. This time, streaks played over her flesh as Kent had control of his cock. \n\nTwisting aside, some instinctive impulse trying to keep his come from hitting her directly in the face, Bailey turned her body enough that the second streak went up the right side of her body, over her breast to her collarbone. \n\nThat wasn't as far, was it? Good, he's dying down. \n\nHer moment of relaxation led her into error. Kent's third volley slid up her breastbone to play across her chin to her right cheek. \n\nGood, god. It's everywhere now. \n\nFortunately, Kent really did start to fade at that point, and Bailey relaxed, thrusting her hips up in time to his rhythm to milk the last of his come out over her stomach. \n\n\"Fuck, Kent,\" she panted. \"I feel like a porn star, now, you jackass.\" \n\n\"And that's bad?\" he breathed back to her. \n\n\"Fuck you,\" she laughed. \n\n\"If it were porn,\" Kent pointed out, gently disengaging himself from her vulva, \"I'd wipe my cock off on you, or shove it your mouth while the camera got a close up.\" \n\n\"That'd be weird,\" Bailey said. \"Would that even feel good? After you've already come?\" \n\n\"Porn's not about reality,\" Kent shrugged. \"I think it would be over sensitive.\" \n\nBailey nodded as she watched Kent kneel over her chest and reach for her wrists, his still somewhat swollen member leaving little droplets over her chest as it shrank. \n\n\"Speaking of which,\" Kent trailed off, wiggling his tongue, \"what happened?\" \n\n\"It was good,\" she nodded encouragingly. \"No one's ever done that for me.\" \n\n\"So?\" his voice drawled out, asking her to continue. \n\n\"Maybe,\" she shrugged. \"Slower next time? I don't know. It felt good. It was just too much somehow.\" \n\nKent nodded, finally getting her wrists undone, and rolled to lay next to her on the bed. \n\n\"Um, Kent?\" Bailey asked. \n\n\"Yeah.\" \n\n\"I need to wipe this off?\" \n\n\"Oh, right,\" Kent agreed, a certain drowsy quality in his voice. \"You looked so pretty, though.\" \n\n\"It gets cold, jackass,\" she scolded. \n\nYes, I caught your hint there, Bailey twisted her lips. And no matter what you say, I'm not taking a picture of this and neither are you. \n\nKent reached over her body to grab his shorts and a box of tissues. \n\nThoughtful, she noted, I'm not about to wipe my face with his underwear, but I guess that's okay for my chest. \n\nHer right nipple, streaked with semen, had perked up as the liquid cooled off. She wiped it gently before taking a few tissues and cleaning off her chin and cheeks, thankful he hadn't gotten any in her eyes or mouth. \n\nI'm pretty sure I held my breath through his entire orgasm, just to make sure, Bailey realized. But I don't think I ever closed my eyes. Didn't want to miss it again, I guess. \n\nBailey turned her body away from him and backed into his embrace, forcing her eyes toward the white board. \n\n\"Thirty four left,\" she noted. \n\n\"Soon as I get that pic, yeah,\" Kent agree quietly, his arms wrapping tightly around her chest. \n\nAlmost done, she nodded in satisfaction, just a few more days."
    ],
    "authorname": "xtorch",
    "tags": [
        "debt",
        "ejaculation",
        "money",
        "nudity",
        "orgasm",
        "spank",
        "spatula",
        "stripping",
        "fetish"
    ],
    "category": "Fetish",
    "url": "https://www.literotica.com/s/two-hundred-dollars-ch-25"
}
{
    "title": "Baseball Ch. 10: The Old Man",
    "pages": [
        "1. All characters are 18+\n\n2. No characters resemble real people\n\n3. Enjoy the fiction\n\nBaseball Ch. 10 - The Old Man\n\nWilliamsport was a smaller town than Allentown, but it was one of the larger cities in the area, surrounded by tinier towns. It was home to the Crosscutters, one of the Phillies' single A minor league teams.\n\nThe good news about being assigned here was that it was still in Pennsylvania. I was only a few hours of driving from Casey. I could have been assigned to another single A team further south, much farther away.\n\nThe bad news I was easily the oldest player here, at 27. Most of the other guys were 19, straight out of high school. Everyone was under 23 except for one 25-year-old named Hank Lyman, a third baseman.\n\nThey all looked at me funny when I came into their locker room. A few of them thought I'd retired and become a coach. \"No, I'm here to play,\" I told them.\n\n\"Awesome, you can buy us beer,\" one of the young guys quipped.\n\n\"Ha! No.\" I quickly shut that down. I'd find out later that they could get their own beer, thanks to the couple of guys of legal age. Their actual interest was more about my contract and salary. As a former triple A player, I was still making decent money. These single A guys had poor salaries, and many had daytime and winter jobs to help support themselves.\n\nIt was weird getting used to the new position. I'd drilled at first base during spring training, but the coaches and trainers had forbidden me to do some things. \"No sliding,\" they told me first. I nodded. Second was \"no diving for the ball.\" \n\nI frowned at that. \"You don't want me to... field grounders?\"\n\n\"Fielding is fine. Bending over to get them, yes,\" Bud said. He was my new coach here in Williamsport. \"But no diving left or right. Above all, we don't want you to reinjure your knee. You're too valuable a player. We don't want you to do anything the doctors don't clear you to do.\"\n\nI guess I should be grateful that they still saw me as valuable. The team was invested in me. I wanted to show the same level of commitment.\n\n----\n\nSpeaking of commitment, Casey and I decided to go ahead and plan for a mid-November wedding. The season would be over, and we'd have a winter honeymoon before the next spring training. Casey promised to visit during the season as much as possible. And Lani, Casey's best friend and soon-to-be maid of honor, was on board to help.\n\nThen the GM, Bob Blazer, had a heart attack, right before the season started. He survived, but he'd be out for at least a month. Casey was suddenly thrust into his responsibilities. I knew before she told me, she'd have no time to drive out to me. And even when I had a day off, she'd be busy.\n\n----\n\nBud played me at first base every other day, giving me plenty of time to rest and recover. He clearly wasn't taking any chances with me. After the first few weeks of the season, I was feeling better. My knee didn't bother me so much, and I felt like I was acclimating to playing my new position.\n\nI told that to Bud. But he wasn't going to take a chance and play me more than one day in a row. He also had other, younger players to play. He told me, \"I need to see their potential, just as much as yours. I know you're used to playing most days. But I just need you to be patient.\" He didn't say it, but the message I was receiving was this: I was a low priority to him. He made his living on developing the young guys, and rehabbing the old man wasn't as important.\n\nAfter watching Hank Lyman, I realized why Bud thought that way. Hank wasn't good. He'd never advance to a higher league. But he had a contract, and management was too lazy to cut him, so Bud had to play him every once in a while. Hank was hanging onto the dream for as long as he could.\n\nBud was an older man, skinny, with short white hair, and a perpetual frown. It took a lot to make him smile, let alone laugh. It was unfair that Bud was lumping me in with Hank. I was much better, but older. And I began to resent the implication that I was another Hank.\n\n----\n\n\"You're not happy,\" Casey told me on a video call one night. I sat on my bed in my tiny apartment. It was a studio, far smaller than my first place in Allentown, but it was cheap and close to the stadium.\n\n\"No, I'm not. I just want a chance to show I'm doing better.\" I sighed. \"I'm wasting time here. And to top it off, I'm hours away from you.\"\n\n\"I miss you too.\" She gave me a soft smile.\n\n\"How's the team? And Bob?\"\n\n\"The team is fine, just fine.\" Then she frowned. \"Bob is... not well. He's not recuperating as fast as expected. He wants to come back, but Dad is thinking he should just retire.\"\n\n\"Wow. If he does, are you ready to take on the big job, full time?\"\n\n\"I'd better be. I'm already doing it. I had to hire someone to help take care of my job while I do Bob's. Landon is helping where he can, but he's a data analyst, not a manager.\"\n\n\"I get that,\" I said. \"I'm sorry you're overwhelmed.\"\n\n\"Me too. I could use you here. I need some stress relief.\"\n\nI grinned. \"Me too.\"\n\nShe picked up her computer and carried it into her bedroom. \"Take off your clothes,\" she said, closing the door behind you.\n\n\"What are we doing?\" I asked, taking off my shirt.\n\nShe took off her shirt too. \"We're having phone sex. Video style.\" She deftly removed her bra, then squeezed her breasts in her hands. \"I miss you so much.\"\n\n\"God, I miss you too. I wish I was there with you.\"\n\n\"Tell me what you'd do if you were here. Describe it to me.\"\n\nI'd never done this before, so I didn't know any smooth lines or sexy things to say, but I gave it my best shot. \"I'd kiss your neck, right by your ear, in that spot you like.\"\n\n\"Ohh, yes.\"\n\n\"Then I'd run my hands all over your body, softly, to give you goosebumps.\"\n\nCasey shuddered. \"Im feeling them.\"\n\nThat gave me a little confidence to keep going. \"Then I'd kiss your breasts, nibbling on them gently. And I'd slide my hand into your pants, gliding my finger on your little slit.\" I watched as Casey closed her eyes and her hand dipped into her shorts. I asked, \"Are you getting wet for me, baby?\"\n\n\"Yes. So wet.\"\n\n\"Take off your shorts, let me see.\"\n\nShe stripped them off with her underwear, and now sat naked on her bed. \"You too,\" she said. \"I want to see you.\"\n\nI dropped my pants too and my dick proudly stood up for her. \"Oh, hello friend,\" she cooed, \"I miss you too.\"\n\n\"He misses you. He wants to be inside you as soon as he can.\"\n\n\"I want that too. Soon, I promise.\" Casey opened her legs, and shifted the computer away from her so I could see all of her, head to thighs, in one shot.\n\n\"You're so fucking beautiful.\"\n\nShe rubbed her pussy with her fingers. \"I'm glad you think so. But I want to see you touch yourself too.\"\n\nI wrapped my hand around my erection and watched my gorgeous fiancee work her fingers in and out of herself. \"If I was there,\" I told her, \"those would be my fingers. I'd tease you and make you squirm for me. Then I'd lick you until you came on my face.\"\n\n\"God, Johnny, yes.\" Her fingers worked faster. \"I need you.\"\n\n\"Then I'd slide my dick in you, slowly, stretching your sweet pussy.\" I continued watching her while I stroked myself. It was probably the hottest thing I'd ever seen on a computer screen. I mean, I'd seen porn before, but this was Casey, putting on a personal show for me. Nothing could ever beat that.\n\nShe stopped for a second and reached over, off screen. It took me a second to realize she was rummaging through her drawer. When her hand came back, she held a small vibrator.\n\n\"Where'd you get that?\" I said, smiling.\n\n\"I've had it for a while. I just don't need it when you're here.\" She turned it on and pressed it to her clit. \"Oh. Oh yes.\"\n\n\"Remind me to use that on you someday,\" I told her. \"Imagine, my dick inside you while I tease your clit.\"\n\n\"Johnny...\" she moaned, eyes closed.\n\n\"I want you to come for me, baby. Come hard.\"\n\nShe opened her eyes. \"You too. I want to see it.\"\n\nI increased my speed and just watched her. The visual spectacle, along with hearing her moans, was all I needed. \"You're so hot, I'm getting close.\"\n\n\"I'm close, I'm... I'm coming!\" She cried, then she definitely did. Her legs snapped shut on her hands, and I could see her muscles tense. But she was still watching me. I aimed upwards, avoiding hitting my computer, and spurted jizz all over my stomach instead.\n\nWhen we'd both relaxed, I held up my sticky hand. \"I think I need a shower,\" I said with a smile. \"That was quite a show.\"\n\n\"I love you,\" Casey said with half-lidded eyes. \"I promise, I'll make time to come visit you soon.\"\n\n\"I love you too. And as fun as this was, I look forward to the real thing.\"\n\n----\n\nI trudged along with the team. As unhappy as I was with only playing every other day, and being generally ignored by Bud, I tried to focus on being happy that I was still playing.\n\nI realized quickly that the young guys looked at me like a hero. Not like a movie hero, more like someone to aspire to be. I'd been to the majors, a few times. A few asked me questions, and I answered them. Then more questions. I became a minor celebrity.\n\nI did give them advice on things to improve. I showed them drills that helped me, workout tips, and shared some of my stories. Even Bud took notice, and saw me contributing in a way he hadn't expected. The only guy who ignored me was Hank Lyman, the other old guy.\n\nI found myself hanging with Hank one night, just the two of us, at the local bar. \"Don't think I don't know why you're here,\" he said, sipping whiskey.\n\n\"Why am I here?\" I said, confused.\n\n\"You're here to inspire me. Or make me quit. Either one.\"\n\nI shook my head. \"If you think Bud or any other management sent me here for you, you're mistaken.\" I ordered a beer and told him, \"I'm here to rehab, and continue my career. The fact that we're here together, us two old guys, is just a coincidence.\"\n\nWe sat in silence together for a little while, then Hank spoke again. \"I stink.\"\n\n\"Are you looking for my opinion on that?\"\n\n\"I guess so.\"\n\n\"Yeah. You stink. I guess I can't blame you for wanting to keep playing. That's what I want too. I could've hung it up when I got hurt, but I just couldn't.\" I took another swig of beer. \"Now I'm here, grinding it out, and the worst part is I haven't seen my fiancee in over a month.\"\n\n\"Huh. You're sure she's not banging other dudes?\"\n\nI frowned. \"She's not. I trust her. And she trusts me to be faithful too.\"\n\n\"That's good. My girl was banging other dudes. That's part of why I'm still here. I don't want to go back to my hometown. I can't face her, or my family.\" He finished his whiskey in one last throw.\n\n\"You want my advice?\" I said before he walked away.\n\n\"Okay.\"\n\n\"She's the slut, not you. You got no shame. You want to go home, go home. Or don't, if nobody's making you. You can do anything you want to do, and it doesn't seem like you've got anything tying you down, or holding you back. So, just go for it.\"\n\n\"Go for it? That's your advice?\"\n\nI shrugged. \"You're in a good spot, when you think about it. Things could be worse, but they're not. Do what you gotta do.\"\n\nHank shook his head. \"Good thing you're a ballplayer. You're shit at counseling, college boy.\"\n\n----\n\nI must have been better at counseling than Hank wanted to admit. Bud told me later that Hank was hanging it up at the end of the month. It lifted Bud's spirits a little to be losing the dead weight from his roster. Enough that he finally gave me a little more playing time.\n\nI made use of the time, too. I starting hitting like I did when I was on the IronPigs. Single A pitchers aren't as good as Triple A, but it was still something to be proud of. I was also not embarrassing myself at first base, and the team doctors gave me more liberty to move around. They said I could dive for balls, just don't make a habit of it.\n\nThen life threw me a funny curve ball. Eventually, Bob Blazer recovered enough to work part time, and Casey was able to finally get a weekend off. She'd arrived as the Saturday night game was getting started, so I didn't get to see her beforehand. But she was watching the game from the stands, wearing her Phillies jersey with my name and number on it, and that made me just so happy.\n\nI had been playing first, and we were winning, thanks to an RBI double I'd hit earlier. Then, in the bottom of the eighth inning, our catcher got hit by a pitch in the elbow, and wasn't looking good. I looked around for his backup. \"Where's Adams?\"\n\n\"Puking. He got sent home,\" came the reply from one of the other guys.\n\nBud had sent an outfielder in the game as a pinch runner. But he had nobody else qualified to catch for the last inning of the game. I saw him turn to look at me and scowl. \"Mills. How's your knees?\"\n\nI knew he was thinking the same as me. He was desperate, and I was willing. \"Feeling good, skip.\"\n\n\"Find some pads and a mask. On the double.\" He turned to another guy. \"Brown, go in at first for Mills. He's covering the plate.\"\n\n\"Alright, Millsy,\" cheered on one of the younger guys.\n\n\"Let's go Mills,\" came another cheer. \n\nSo, a few minutes later, I emerged from the dugout in catcher's pads. They weren't mine; I'd left mine in my apartment. But I looked to Casey, and her jaw dropped when she saw me. So did mine, as I knelt at the plate. There was discomfort, but not pain. Not yet, anyways. I hoped I could get through this quickly so I didn't hurt myself.\n\nThe nineteen year old pitcher threw nine pitches at the first batter he faced, and walked him. This would be a really long inning at that rate, so I went to the mound. \"You and I need to communicate,\" I told him gruffly, unhappy with his pitches. \"How are you feeling, kid?\"\n\n\"Nervous,\" he admitted, \"you?\"\n\n\"Same. I haven't been allowed on my knees like this since I was hurt. But it might surprise you that I know your stuff. Your pitches remind me of my friend Ken Jackson.\"\n\n\"Really?\" He suddenly smiled. Ken must have been an inspiration, since he was now a major leaguer.\n\n\"Yeah, really. So be like him: do what I tell you, and we'll get through it.\"\n\nHe nodded, and I went back to the plate. I then got him to strike out the next guy, then induce two grounders. We won, and that young guy had found the confidence he'd never had before. And I caught an inning, and didn't hurt myself doing it.\n\n----\n\nI found Casey waiting for me outside the stadium. \"About time,\" she said. \"Your little twerp teammates have been eyeing me.\"\n\n\"I guess I can't blame them,\" I said, and gave her a smoldering, long overdue kiss. \"I don't need to beat any of them up, do I?\"\n\n\"No, none of them approached me. I don't think those little kids know what to do with a real woman,\" she said, and I laughed. She added, \"Plus, it's a little obvious I'm taken.\" She gestured to her jersey and her ring.\n\n\"That you are. And I'd hate to have to cripple the next generation of IronPigs.\" I steered her towards the parking lot. \"And right now I'm taking you home.\"\n\nShe grinned. \"Home is good. What will we do there?\"\n\n\"I'm sure we'll think of a few things. Just take it easy on my knees, baby.\"\n\nShe frowned at my tiny apartment when she saw it. \"That's all?\"\n\nI laughed. \"Yes that's all. I'm just glad I don't have to share a place, like the young kids do. If I did,\" I said, pulling her towards me, \"I wouldn't be able to do what I want with you.\"\n\nShe kissed me. \"Well we've only got tonight, and I've been waiting for this for months. Let's get started.\" She nudged me backwards so I sat on my bed. \"How's your knees?\"\n\n\"Tender. They don't hurt, but they're sore.\"\n\n\"Nurse Casey will make you feel better,\" she cooed. She took off the jersey and the tank top she wore beneath it. Then she unzipped my jeans and slid them off with my boxers. \"Hello my friend,\" she said to my dick, which was rapidly rising to the occasion. She took him in her mouth right away, and ran her tongue around the head.\n\nI shivered in response. \"God, Casey. Whatever I did to deserve you, let me know and I'll keep doing it.\"\n\nShe looked up at me and smiled, my erection still in her mouth. She popped it out just long enough to say, \"Not every guy continues to heap love and praise on a girl who's already going to fuck him. So keep doing that, and we'll be just fine.\"\n\nShe bobbed her head up and down, working my shaft like an expert. I laid back and watched, and she continued to watch my face. It was something I loved, and had dearly missed since we were separated.\n\n\"You're gonna make me cum,\" I warned her after a minute. She only nodded and continued. I knew then what she wanted. She was going to make me explode once, then get me hard again and fuck me. How did I get so lucky? \"I'm coming,\" I groaned, and she took it all in her mouth and swallowed like a pro.\n\n\"I'm hoping you've got more,\" she said, standing up.\n\n\"I got more, and you can have as much as you want, if you give me a minute.\"\n\n\"I'll give you a few minutes,\" she said, stripping off her jeans. Underneath, she had a white thong that matched her bra. \"But you gotta do something for me.\"\n\n\"You're a goddess,\" I told her, taking in her beauty. \"Come here, let me return the favor.\"\n\n\"I was hoping you'd say that.\" She slipped out of her remaining clothes, and so did I. I was going to lay her on her back, but she surprised me by pushing me onto mine again. \"Stay down there,\" she instructed. Then she lifted her leg over my body and backed her cute little ass into my face.\n\nI pulled her by her thighs and brought her juicy peach to my lips. It tasted just as good as I remembered, as good as I dreamed. \"Oh, Johnny,\" she moaned as I went to work, \"please tell me you'll always do this. I love your tongue.\"\n\n\"Everyday, as long as you want it,\" l reassured her. Then I teased and nibbled and tongued her until she squealed and came all over my face. \n\nI wiped the juices from my cheeks, and used the lubrication to insert two fingers right into her. \"Oh!\" she gasped at the sudden entrance. \"Yes, I love this.\" I continued to tongue around my fingers, making her moan happily.\n\nThen she leaned forward a bit more, and her hands found my dick, which had come back to life. She idly played with it as I continued to finger her.\n\nI looked up from where I was, and saw her perfect ass cheeks splitting, and her tiny pucker dotting the middle. I kept my fingers in her pussy, but I moved my mouth and laid gentle kisses on her ass. She didn't stop me, so then I licked her there, just a slow lick from pussy to ass. I had never done that before, with anyone, and neither had she, but it was so damn tempting.\n\n\"Oh!\" She gasped when I did it. \"You licked my ass.\"\n\n\"I did. Was that okay?\"\n\n\"Yes. It felt good, just kinda strange.\"\n\nI did it again, and this time, tentatively licked around her back door. It didn't taste bad, as she was clean there. She seemed to appreciate it, so I kept going, but I kept fingering her pussy.\n\n\"Johnny, do you want to...\" she said, then stopped.\n\n\"Only if you want to.\"\n\nShe turned and nodded. \"Maybe just one finger?\"\n\nShe was just as curious as I was, apparently. I drew my fingers from her pink flower and used the wetness from there. I placed my one finger at the entrance, and said, \"Just one. Okay?\" \n\nShe nodded, so I pushed inside. It was so tight, and I didn't want to hurt her, so I didn't go very far. But I did get past the first knuckle and stopped. \"Oh my God,\" she whispered, \"your finger is in my ass.\"\n\n\"Yes it is. Is that still okay?\"\n\n\"Yeah, it's just so different. But good different.\"\n\nI kept my finger there, but slipped it out a little and back in. Then I moved my tongue back to her pussy, and licked her there. Soon, very gently, I was fingering her tiny asshole, and tonguing her clit, and she cried out, \"God, keep going. Keep going!\"\n\nI did, and the combined sensations made her have one of the biggest orgasms I'd ever seen her have. I had to give her plenty of time to recover after. \"Everything is so sensitive,\" she sighed. \"I didn't know if I'd like that, but I guess I do.\"",
        "\"I'm glad you did.\"\n\n\"I don't think I can take your dick there though. That's too much.\"\n\n\"Okay,\" I said. \"Not a problem. I'm not ready for that either. But I am ready to take you normally.\" I flipped her over onto her back, and got into position above her. At her nod, I slid myself into her waiting tunnel. It was like paradise, and I told her so.\n\n\"I missed this too,\" she replied. \"I need you to fuck me.\"\n\nI drove into her with long, slow strokes, reacclimating myself to her. It had only been a few months since spring training, but I felt out of practice. Just as I was getting ready to speed up, she must have had the same thought. \"Fuck me! Harder!\" Casey cried out.\n\nI sped up and gave her as much of a full stroke as I could, and that satisfied her. She made happy noises as I rammed her. The whole bed shook from the hard fuck I was giving my fiancee. I thought it might break, but it surprised me by holding together.\n\n\"Coming!\" Casey suddenly screamed, and her snatch gripped my member, making me go over the edge too. I spilled into her, grunting with each blast.\n\nWhen I'd finished, I pulled out and collapsed into the bed with her. At that point, we were both tired and sweaty, but neither of us could be bothered to clean up more than a quick trip to the restroom. I was glad for that, because I just wanted Casey lying in my arms that night, which she did. It also increased the probability of shower sex the following morning, which also happened. We had agreed we didn't want to waste any of the limited time we had together, and that's exactly what we set out to do.\n\n----\n\nThe flu that Adams had apparently swept through the clubhouse. I had it a few days later, but not as bad as the other guys. It wasn't just us, either. Other teams, and other minor league levels, were all getting it. Casey eventually caught it too, and couldn't come visit when she'd planned. We had to settle for a video call instead. She looked tired from her sickness and the meds she had been taking, so it wasn't a long call. She had it worse than I had, and was sick for a few days.\n\nShe came the following weekend instead. This time, on her visit, some of the young guys asked about her. \"She got a sister?\"\n\n\"Nope.\"\n\n\"Maybe a cousin?\"\n\nCasey walked up. \"Yeah, I have a cousin. I'll tell Derek you want to meet him,\" she told the guy, and the rest of the group laughed.\n\nShe joined us at the bar for a bit, celebrating a win for the team, and a home run for me. We sat with the guys who were 21, had a couple of beers, and we razzed the younger guys at the next table who were drinking soda.\n\nThen they razzed us right back, as we left the bar later, headed back to my tiny apartment. I guess it wasn't much of a secret what we were going to do. I frowned, but Casey just shrugged it off, saying they were just jealous boys.\n\nThat night, we lay in each other's arms, post coitus, and we talked about the wedding. Lani and Casey had both been putting things together, preparing for November. We were only five months away from being husband and wife. \"I'm looking forward to being your husband,\" I told her.\n\n\"Is there really that much difference from now?\" she asked. \"I mean, I am still leaking your stuff from my hoo-ha.\"\n\n\"There is a difference,\" I insisted. \"I want to hear you call me your husband. Even if it's you telling me 'take out the trash, husband,' I still look forward to it.\"\n\nShe giggled. \"Only if you tell me, 'hey wife, come here and give me a kiss.'\"\n\n\"That's a deal.\" I said, and kissed her.\n\n----\n\nJuly Fourth did not bring the fireworks anyone expected. Bud called me into his office that morning. \"Bob Blazer passed this morning. Another heart attack. I wanted to let you know, since you worked with him.\"\n\nI nodded, stunned. \"I appreciate it. Um... wow.\"\n\n\"Yeah, wow.\"\n\nWe both sat in silent for a minute, taking in the news. I said a silent prayer, and I thought of Casey. Bob was not just her mentor and boss. She'd known him her whole life.\n\nBud poured two glasses from a bottle he'd produced from his desk drawer, and handed me one. \"To Bob,\" he said, and we clinked our glasses. I drank the hooch down in one swallow.\n\n\"Casey's going to be getting real busy now,\" he said. \n\n\"Yeah,\" was all I could say. I let the alcohol burn in my throat.\n\n\"I know you and I didn't always see eye to eye at first,\" he said. \"But I see the writing on the wall.\"\n\n\"What's that?\" I asked curiously.\n\n\"I'm not the only short-timer in the organization,\" he explained. \"Bob was the first. He went too early, but he was one of our generation. Me, Chuck, and a few others. We're all on our way out. Have been for a few years.\"\n\n\"You retiring, Bud?\"\n\nHe nodded. \"Can't do it forever. There's guys that are waiting to take my spot. Maybe not around here, but somewhere. A new generation. Just like when you're a player, there's always a young guy behind you, waiting for their shot.\"\n\nI nodded. \"I guess so.\"\n\n\"Chuck saw something in you. You've got a good way with these kids. I'm seeing it too, now.\" He looked at me dead on. \"You'll be a helluva coach someday.\"\n\n\"Maybe. But not today. I'm still a player, Bud.\"\n\n\"And I'm still your coach. But, keep it in mind, one day.\"\n\n\"One day.\n\n----\n\nCasey went to Bob's funeral, with her father, Lani, and Landon at her side. All of the triple A players and staff went too. He'd been with the organization for decades, and was well loved. Casey told me all about it later that night on a video call.\n\n\"I'm sorry I couldn't go.\"\n\n\"You had a game. Everyone understood.\"\n\n\"I'm tired of being away from you,\" I said.\n\n\"You'll make it back soon.\"\n\n\"Not soon enough. And not without getting assigned to Double A first.\"\n\n\"Reading is much closer, though,\" she said positively. \"It's only like an hour away. Half the distance.\"\n\n\"I know. It's just hard.\"\n\nCasey looked at me and told me. \"John Mills. If it wasn't hard, it wouldn't be worth doing.\"\n\nI smiled. \"Yes ma'am.\"\n\n\"You're living the dream, remember?\" She continued. \"Neither of us wanted you to give up your shot. So here we are.\"\n\n\"Here we are. Hopefully I can get called up to Reading. At least I'll be closer to you, my love.\"\n\n\"I hope so too, and soon. The bed feels empty without you.\"\n\n----\n\nCasey had been named interim GM when Bob passed away. It only took a couple weeks to make it official. At 26, she was now the youngest GM in minor league baseball, and one of the few women. But everyone in the organization had faith in her, including me. Especially me.\n\nI talked to Bud about any potential call-ups to Reading. He scowled at me. I said it was not just for me, but for Casey. He harrumphed again, but reluctantly said he'd look into it. A few days later, he came back and told me there might be some discussion, but to be patient.\n\nIt was the end of July by the time I heard news. Bud said they were sending me to Double A, starting August 1st. My batting was good, and while I wasn't a gold glove first baseman, I'd proven I wasn't a defensive liability.\n\nI video-called Casey right away. \"Hi, baby. I have some big news.\"\n\nShe looked a little pale on the screen. \"Oh! Me too.\"\n\n\"What's wrong?\"\n\n\"Nothing. You go first.\"\n\n\"They're sending me to Reading, next week.\"\n\nHer face brightened up a little, but not completely. \"Really? That's great. I'm so happy.\"\n\n\"Casey, what's wrong? You don't look happy.\"\n\n\"I am happy, honest. It's just...\" she trailed off.\n\nI heard Lani's voice in the background. \"For God's sake, Princess, if you don't tell him right this second, I will.\"\n\n\"Tell me what?\" I urged.\n\n\"Umm, remember when I came to Millersport right after I'd had the flu?\"\n\n\"Last month? Yeah, of course.\"\n\n\"I think the meds I was taking messed up my... my birth control.\"\n\nI sat for a second, a little taken aback. \"Are you saying...\"\n\nCasey gulped and nodded. \"I'm pregnant.\"\n\n \n"
    ],
    "authorname": "Octave888888",
    "tags": [
        "baseball",
        "romance",
        "blonde",
        "sports",
        "minor league"
    ],
    "category": "Romance",
    "url": "https://www.literotica.com/s/baseball-ch-10-the-old-man"
}
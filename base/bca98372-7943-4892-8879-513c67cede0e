{
    "title": "Lady in Red Pt. 02 Ch. 09",
    "pages": [
        "As Steve and Chip rode with Captain Neary to the airport, they discussed the current situation. They understood its gravity and dispensed with any banter.\n\n\"Kate wanted to try to talk you out of going,\" revealed Chip. \"I told her that it wouldn't change your mind, but it would make leaving more difficult. She understood. She's amazing.\"\n\n\"Gwen wasn't happy, but she knows I've got it to do. It helped when I told her that you were going with me. You've made a very positive impression on the entire family, especially Kate. I don't have to tell you how important that family is to me.\"\n\n\"Yeah, and I can see why. The Anderson women are thoroughbreds. I've never seen a family with so much beauty and brains, yet remain so grounded,\" replied Chip. \"I'm going to do everything I can to win Kate. I can't stop thinking about her.\"\n\n\"They're the best. That's for sure. This situation we're headed into may get kind of hot. Maybe it wasn't fair of me to ask you to come along, but there's nobody that I'd rather have cover my back. We'll have to keep our eyes open and play this close to the vest. I'm not sure exactly what the state department plans, but we need to be ready to adjust on the fly.\"\n\n\"I wonder how they're going to handle this. We don't negotiate with terrorists. What could they expect you to do?\" wondered Chip. \"I've got a bad feeling about the whole thing. Don't volunteer for anything stupid. Look at the life you have. You're wealthy, have an incredible girl friend, a great career, and some great friends. You've got it all. Think twice before you risk it.\"\n\nMeanwhile, Gwen and Kate were still at home, trying to not answer questions. They were reluctant to say much of anything.\n\n\"Mom, we really don't know very much. Steve was told to report, and he asked Chip to go with him. He obviously felt more comfortable with Chip going along. You can understand why. Except for Steve and Jason, I've never been around a more capable, confident man,\" responded Gwen to questions from her mother.\n\n\"That's right!\" agreed Kate. \"I was going to ask Steve not to go, but Chip told me that responsibilities fall on the shoulders of men like Steve, and we can't ask him to shirk them. Chip said that Steve feels that it's 'his to do', as the two of them like to say, and it's important that we support him any way possible rather than make him feel guilty about leaving us to do what he must.\"\n\n\"This is quite unusual,\" interjected Jason. \"Steve shouldn't even be considered for any mission until he's totally recovered, and given some time off. You just don't go on back-to-back missions. I'm guessing this may be something forced on the state department, rather than something planned. Maybe they want him to go to some function and escort someone's daughter around or something like that. Of course, he wouldn't need Chip for that.\" \n\n\"Let's just try to enjoy what's left of the holiday,\" offered Jordan. \"We need to have faith in Steve and Chip to do what needs to be done and come back to us. Let's talk about the new homes we're going to build. I want room for at least three kids in my house. Seeing Lisa pregnant has started my maternal juices flowing. Charlie and I really like the concept of all of us living close together in a safe environment. Steve had a great idea.\"\n\nThe next morning saw Gwen and Kate arrive in the kitchen quite early to find their mother already making coffee. They immediately sensed that something was wrong. Paula's face was tight and she looked extremely upset.\n\n\"You both need to watch the news from Iraq this morning! A bus with seventeen kids on it was hijacked yesterday. They were international students. All of them were children of western diplomats, mostly European. There's hell to pay. The kidnappers have demanded a ransom, or they'll kill the children,\" stated Paula very seriously.\n\n\"Do you think that has something to do with Steve having to report in last night?\" asked Gwen as she moved in front of the television to better see the story.\n\n\"I'm afraid so,\" replied Paula grimly. \"He's the ransom they're demanding.\"\n\nGwen suddenly became light-headed. She quickly sat down as her mother's words played over in her mind. \"Steve's the ransom? Do you mean they want the government to swap Steve for the kids?\"\n\n\"So it seems,\" replied Paula. \"This is the same fanatical group that attacked Sparta years ago. They seem to have a real bug up their ass about Steve. They've put their demands out over the internet. The kids will be executed unless Steve is turned over to them by midnight, which is 5 PM here.\"\n\nGwen mulled that information over for less than a minute before she picked up her cell phone and pressed a number. \"Ashley, have the crew of the Red Lady prepare a flight plan for Iraq and tell them to be on stand-by. Call the helicopter service and get them here to Sparta as soon as you can. They need to be ready to fly me to the airport on a moment's notice.\"\n\n\"Gwen, you can't be thinking about going to Iraq! It's not safe there!\" gasped Paula.\n\n\"Don't even bother, Mom. Gwen has to go, and I'm going with her,\" insisted Kate. \"Those guys risk everything for us. If they need us, we have to be there for them. What kind of women would we be if we just went about business as usual?\"\n\n\"Oh, Kate! You, too?\" cried Paula. \"I understand, but I hate it. I'm going to call Jason and see what he thinks you need to take with you, since you're so determined to go. He'll have some good suggestions.\"\n\nTwenty minutes later, Jason and Lisa walked into the house as Kate and Gwen pulled their suitcases into the living room. \"I saw the news. Now your mom tells me you're going to Iraq.\"\n\n\"Yes, Kate and I are all packed. We'll be leaving before long. We just want to know if there's anything you think we should take with us. You're served in Iraq. What will we need?\"\n\n\"What you'll need is me,\" responded Jason nonchalantly. \"This trip is going to be dangerous as hell. I'm all packed and ready to go.\"\n\n\"You just got out of the hospital. You're not healed completely. Lisa's pregnant! We can't ask you to go with us,\" worried Kate. \"Lisa, make him stay!\"\n\n\"Kate, my guy is one of 'those guys', much like the guys you both have. He's not staying here when my sisters need him. I wouldn't ask him to. I love him because of his strength and devotion to family. I wouldn't have him be any other way. He'll take care of you.\"\n\n\"How soon are we leaving?\" asked Ted as he emerged from his bedroom with a duffel bag. \"Do I have time for coffee?\"\n\n\"Dad? You're going with us? I'm not surprised when I think about it. You're the best father in the world!\" managed Gwen as she hugged her father.\n\n\"The helicopter's waiting for us by the park. Let's get going,\" urged Kate as she hugged her mother and opened the front door. \"Look at all of the reporters out in the street! It looks like the circus is in town.\"\n\n\"That's one more reason why we need Asgard,\" observed Gwen as she carried her bag out the door. \"We have to get going. Dad, you drive. I'm so wrought up I'd probably run over a few of these idiots.\"\n\nTed threaded his way through the media frenzy and then accelerated down the street as reporters scurried to follow them. They pulled up at the park near the high school a few minutes later. Gwen was surprised to see two helicopters sitting on the grassy field near the parking lot. As she climbed out of the family SUV, several other cars pulled up and parked next to where she was standing.\n\n\"Look! It's Jordan and Charlie, Billy and Charlotte, Jared and Naomi, and even Coach and Laura!\" exclaimed Kate. \"Why are they all here?\"\n\n\"I think it's because they're our friends. They must plan on going with us!\" sobbed Gwen as she hurried to embrace them.\n\n\"Paula thought a good doctor might be needed and I wouldn't let her go without me,\" explained Coach Watkins. \"A man has to keep his pregnant wife safe.\"\n\n\"Laura! You're pregnant! Congratulations, but do you think it's a good idea for you to be going with us?\" worried Gwen.\n\n\"You kids keep saving the world and I keep seeing it on TV. This is my chance to be part of your incredible saga. We'll be telling our grandkids about this trip. Besides, you may need a good doctor and I happen to think that I'm one of the best. I never would have met Coach if you and Steve hadn't gotten us together. If I expect you two to be the godparents of my baby next winter, we'd better get over there and pull Steve's ass out of the fire.\"\n\n\"You always had a way with words,\" chuckled Gwen. \"Thanks so much for coming along, even though I worry about your baby. As soon as we can, we'll head back home.\"\n\n\"You weren't thinking of leaving without telling us, were you?\" asked Charlotte. \"Paula called all upset and asked if Billy might go along to help keep you safe. I told her 'damn straight' he would and I'd be right there with him. Let's get loaded and headed for the airport.\"\n\n\"Gwen! Could I catch a ride? I was preparing to return to Washington when the network told me to stay here and interview you about this new situation. I was just getting to your home when your car left the driveway, so I turned around and followed,\" revealed Amber Stahl. \"I'll stay out of the way and I'll clear my reports with you before I send them, at least until this is resolved.\"\n\n\"Sure, as long as you don't report anything that could endanger us, or Steve,\" replied Gwen. \"That may mean waiting till this is all over and we have Steve back home.\"\n\n\"Everyone get on the choppers!\" called Kate as she grabbed her bag and started for the helicopters. \"We're wasting time that we don't have by standing here talking.\"\n\nAs the group crowded into the two helicopters, news vans began pulling into the parking lot. The first two into the lot managed to video the doors closing and the choppers lifting off. That was all they were able to report. The destination was unknown.\n\nAn hour later, the group had transferred to the Red Lady and was waiting for permission to take off. \"Gwen, why are you going to Iraq? What do you hope to accomplish?\" asked Amber as she aimed her camera at Gwen's face.\n\n\"You remember when Steve dove into that icy river to save those infants? I knew I had to be prepared to help him when he surfaced, so I jumped into the water to be there for him. It turned out that I saved his life because I was proactive. I didn't wait for the situation to develop. I saw what was going to be needed and I prepared for it.\n\n\"That's what I'm doing today, what all of us are doing. Steve may need help. He's going to need his friends and he's especially going to need me. I'm going to be as ready as possible when the time comes.\"\n\n\"What about your friends? Aren't you concerned that they'll be in danger, too? Is it a good idea to take them with you?\" asked Amber.\n\n\"There are many different thoughts about what constitutes a friend,\" replied Gwen as she looked around at the assembled entourage listening to her every word. \"For Steve and me, friends are people that we love, and we will risk everything for. They owe us nothing, but give us everything. I'd never try to dissuade any of these friends from going on this journey. It would be disrespectful to them. I'm their friend and understand how they feel about Steve and Chip, and about the responsibilities of friendship. These are the people I want around me when the chips are down. They'll stand with me, no matter what. Of that, I'm certain!\" \n\nIt was an extremely long flight with a stop in Germany for fuel. It was on the last leg of the journey when Gwen received the news. The pilot spoke briefly to Jason, who returned to the cabin to relay the information to the other travelers.\n\n\"The pilot just received word that Steve has been exchanged for the seventeen students. The kids are all safe and healthy.\"\n\nEveryone went silent and looked to Gwen as the meaning of Jason's words sunk in. Gwen's lip quivered briefly, but she managed to force a smile. \"Those poor, dumb bastards! Steve won't let them live now that the kids are safe. They'll all be dead before this is over.\"\n\n\"Yeah!\" agreed Kate. \"Chip will help Steve kill those mother f...., uh, mud suckers. Sorry about the language, Dad.\"\n\n\"Don't worry about offending me,\" chuckled Ted grimly. \"If those mother fuckers aren't dead when we get there, we'll soon remedy that situation.\"\n\nKate's mouth fell open when she heard her father swear, but she soon recovered. \"That's my Dad! Be sure you give Chip 'The Talk' when we get him back with us. He's going to be hanging around your youngest daughter quite a lot from now on!\"\n\n\"There's got to be more to this story,\" reasoned Charlie. \"The U.S. doesn't negotiate with terrorists. We'd never offer to exchange a citizen in good standing for foreign nationals, regardless of the threat to them.\"\n\n\"We'll try to figure all of that out when we can, but our first priority is to get Steve back,\" insisted Gwen. \"We need to find Chip. He must have some sort of plan, or at least an idea on how to rescue Steve. I'm really glad now that he went with Steve. I'm certain he'll do everything possible to get Steve out of this mess.\"\n\n\"We need to begin making our own plans,\" advised Jason. \"Jared, Charlie, and I have been on the ground in Iraq and understand the culture better than the rest of you will. Everyone needs to stay close and to heed any suggestions or orders from any of us three. It's got to be that way. There's no debate. Does everyone understand and agree?\"\n\nEveryone nodded their assent and remained quiet as Jason continued. \"We'll find out as much as we can about where Steve was swapped, who he was handed over to, and where they may have taken him. The CIA should be all over this. I imagine they have a plan to get Steve back. We don't want to interfere with their efforts, but we need to be ready to do what we can.\"\n\nThe Red Lady landed in Baghdad around 1 AM Local time. Jason and Jared immediately began calling their Army contacts in Iraq. Naomi did much the same with her Navy friends.\n\n\"The guys are really upset that the state department allowed this swap,\" announced Naomi after speaking with some of her comrades in the Navy. \"Our government didn't make the swap; they simply introduced Steve to the families of the kids being held. That was about an hour before the deadline. No one was surprised when Steve volunteered to make the trade. My friends feel that Steve was set up. The CIA knew what kind of man he is and how he'd respond to the situation. No one's seen Chip. They didn't even know that he was with Steve. This whole situation stinks to high heaven!\"\n\n\"I'm getting pretty much the same from my contacts,\" confirmed Jared. \"The whole military is upset that something like this was allowed. What really pisses them off is that the CIA hasn't asked for any help, or even backup, from the Rangers or Seals already in Iraq. They're all more than willing to walk into hell to make this right, but they've been given no orders.\"\n\n\"I finally found someone that had a hunch about what was going on,\" revealed Jason. \"I had my brother make some inquiries. He's a colonel now and has a few connections. He's been given the impression, unofficially of course, that the CIA isn't trying too hard to get Steve back. If he's killed by these terrorists, Congress will allocate all sorts of funds to have the group destroyed. The CIA will be in high clover if that happens.\"\n\n\"What! They'd allow those bastards to just kill Steve to pad their budget? The government doesn't work that way, does it?\" demanded Kate. \"President Hanson wouldn't do that to Steve!\"\n\n\"He probably wasn't even informed until it was too late,\" responded Jason. \"The CIA plays by its own rules. Presidents don't always know what it's doing, or what its goals are. \n\n\"The good news is that there's a consensus about where Steve would likely be held. Everyone thinks he'll be taken north as far as possible, which isn't all that far with our planes and drones looking for them. Most of the so-called experts think Steve must be within a hundred miles of Baghdad, and probably north.\"\n\n\"Let's set up about a hundred miles north, then,\" reasoned Gwen. \"We have some helicopters already hired to carry us to our final destination. You know the general area where I want to go, Jason. Can you suggest a safe place for us to stay while we try to find out more about Steve?\"\n\nJason moved his head slightly and left the room, with Jared and Charlie following. After a few minutes, the men came back inside. \"We've determined a location to set up. It's a medium sized village with a pretty good American presence. It's relatively safe, at least for this part of the world.\"\n\nA couple hours later, the group had rented several small homes from locals that were delighted to accept American money for the use of their homes. They would stay with relatives until the Americans were gone.\n\nGwen, Kate, Jordan and the rest soon began asking questions about Steve and Chip. They handed out flyers to anyone that would accept them and asked numerous questions of anyone that could speak English. Jason and Jared contacted anyone and everyone they knew in the Army to put out the word that they were looking for Steve and Chip and would follow up on any rumors or leads they would get. \n\nIt was shortly after noon when Jason once again approached Gwen as she, Kate, and Jordan were speaking to a young villager. \"Ladies, I just heard that the terrorists put out a new video on the web. Steve was in it. He was pretty badly beaten, and the terrorists promised they'd post another video at noon. It's going to be one of those graphic and grisly videos of a beheading.\"\n\nJordan and Kate gasped loudly before turning their attention to Gwen. She was extremely pale and appeared to be trembling as she spoke. \"This won't stop us! Steve's alive right now and we'll keep trying to find him. He wasn't meant to end like this. That video will never be aired because it'll never happen!\"\n\nGwen quickly turned and walked away. Once she was in an alley between two shops, she leaned back against a wall and began crying. That's how Kate and Jordan found her a little bit later. \n\n\"I know it looks bad, but Steve had Chip watching his back,\" reasoned Kate. \"You've seen what those two guys can do. We can't give up. They need us and we have to be ready to help them any way we can.\"\n\nA few hours later, Billy hurried up to Gwen, Jordan, and Kate. \"Charlotte insisted that I find you. The second video was never aired! Those bastards promised a video of them beheading Steve at noon, but it never materialized. That's gotta be a good thing!\"\n\nThe next two days dragged by slowly. Gwen and Jordan had ordered that basic supplies for the people of the village be flown in. Gwen believed that the more people they came into contact with, and impressed favorably, the better their chances of learning something about Steve and Chip. They were overseeing the distribution of food items, seeds, and simple tools on the third day after Steve had been turned over to the terrorists when an old man tugged on Gwen's sleeve.\n\nGwen excused herself and stepped off to the side with the wizened old man. \"I don't know if you can understand me or not, but I only speak English. Do you need food?\"\n\nThe old man led Gwen farther from the group. Once they were out of sight, around the corner of a building, the old man remained silent as he held his closed hand out to Gwen. Not knowing exactly what he wanted, she simply looked on in bewilderment. The man took her hand with his other and pulled it to his closed hand. Then he dropped something onto her palm.\n\nCuriously, Gwen raised the items closer to her face so she could see them better. She suddenly gasped as she recognized both Steve's and Chip's dog tags! She forced herself to remain calm as she studied the face of the old man. \n\n\"Where did you get these?\" asked Gwen gently, not wanting to frighten the man. All she got from the old timer was a blank look. Just then, she saw a young man that she knew spoke English walking past. Gwen summoned him to her side.",
        "\"Ask this man where he got these tags! Try to find out anything he might now about them,\" insisted Gwen to the young man. Then she stood by silently as the two conversed for a couple minutes. Finally, the old man turned and slowly walked away.\n\n\"He says that two men with only three legs staggered into his yard last night. They are very sick and will probably die. He hid them in a small cave in the hillside behind his home. He heard that you were looking for two men, so he walked here to let you know. He brought the tags as proof of his words.\"\n\n\"Do you know where his place is?\" demanded Gwen. \"Can you tell me how to get there and how to identify it?\"\n\n\"Sure. Everyone knows his home. It is on the road north, next to a stream and a small waterfall. It's the only stream within a hundred miles. It'll be easy to recognize.\"\n\nGwen raced back Jordan. \"We're leaving! Tell everyone to get to the helicopters right away! I may know where Steve and Chip are!\"\n\nJordan wasted no time asking questions. \"Okay, I'll go tell the guys. They're down at the police station asking questions. You let the rest know. I wish we could use our cell phones!\"\n\nGwen found Kate with Laura as she examined a small child's bruised arm. Gwen waited the two minutes it took for Laura to announce the injury was healing. \"I think I've located Steve and Chip. They're in a bad way and need help immediately. Get everyone together and get to the helicopters. Forget about suitcases and clothes. We don't have time!\"\n\nTwenty minutes later, the entire group was climbing aboard the two helicopters. Gwen had just explained the situation. \"An old man just gave me the dog tags of Chip and Steve. He said that 'two men with three legs', whatever that means staggered into his yard last night. He hid them in a small cave and then walked here to let me know. He said that they're very ill! We need to follow the road north until we find a house by a stream and a waterfall. The guys will be hidden in a small cave in the hillside.\"\n\n\"Here's how this is going to work,\" interrupted Jason. \"Jared, Ted, Charlie, Billie, and Coach will ride with me in the first chopper. We'll go in first to be sure this isn't a trap of some sort. Once we give the 'okay' you guys will land and find Steve and Chip. I can't stress enough that if we do find them, we need to load and run as quickly as we can. There's a shitload of bad guys after their asses. This won't be any picnic. Now let's go!\"\n\nAmber had been filming events for the past several days. Tensions were high and she knew it was all coming to a head so she videoed everything she could. The helicopters remained close to the ground as they moved rapidly north. In a surprisingly short time, the lead chopper reduced speed and made a quick circle around the small home by the stream.\n\n\"There's a couple of trucks headed toward the stream from the north,\" shouted the pilot of the ladies' helicopter. \"They're going to put down between the vehicles and the home. We're going to land behind the house. You need to find those guys in that cave and get them back here as fast as possible! It looks like there's going to be shooting and we can't afford to lose even one of these birds!\" \n\nGwen and Kate quickly exchanged glances and quick nods. There was no doubt that they were going to lead the search for the cave and the two injured SEALs. As soon as the chopper touched the ground, Gwen threw the door open and jumped out. Kate was on her heels as the two women raced toward the hill. As they ran, they heard shots, a lot of shots, coming from just up the road.\n\n\"Gwen! Over by that shrub! There's an opening!\" cried Kate as she veered to her left.\n\nGwen and Kate reached the cave at the same time. \"Let me go first!\" insisted Gwen as she raised a handgun and stepped inside the dark cave. She waited for her eyes to grow accustomed to the dark. The cave was littered with junk and it took twenty seconds for Gwen to detect boots concealed behind a pile of old pallets. She carefully made her way to the pallets and peeked around them.\n\n\"Over here, Kate!\" called Gwen as she slid the gun back into a pocket and dropped to her knees by the two men. \"They're both alive! They're feverish and unconscious. Is Laura coming?\"\n\n\"I'm right here,\" replied Laura calmly as she pointed a flashlight toward them. \"These guys are too big for us to carry very easily. I'll examine them while someone gets those stretchers from the chopper. From the sounds of the fighting up the road, we can't waste a minute!\"\n\nNaomi and Charlotte returned to get the stretchers that Laura wanted while Amber filmed the scene in the cave. Even through the viewfinder, it was evident that both men were extremely ill. Their breathing was shallow and one of them made a wheezing sound when he breathed. Both men were shirtless and covered in blood. Then Amber noticed that Steve's right leg and Chip's left leg were bound together tightly. Steve's arms were bent back and his hands were out of sight. Chip clutched a gun in his right hand.\n\n\"We've got to separate their legs. I don't know why they're bound together, but there must be a good reason, so be very careful when you separate them,\" cautioned Laura as Gwen produced a strong pair of scissors from Laura's bag and began cutting at the straps around the legs of the two men.\n\nThe sharp scissors quickly severed the leather bands and the two legs separated and moved slightly. Chip let out a loud groan, although he failed to regain consciousness.\n\n\"There's the answer! Chip's leg's broken, at the very least,\" declared Laura. \"They bound them together so they could walk. These guys have been through hell. Let's get them on the stretchers and if the men aren't here by then, we'll just have to carry them out ourselves.\"\n\nThey had just managed to carefully roll both men on the stretchers when Coach entered the cave. \"Laura, Ted and I will try to get these guys out, but you're needed down by the choppers right now. Charlie's been hit pretty bad!\"\n\n\"Oh, no!\" cried Jordan as she rushed from the cave, followed closely by a grim faced Laura. \n\n\"I won't be worth a shit!\" exclaimed Ted. \"My arm's been hit and I can hardly move it. We need the other men.\"\n\n\"Coach, if you take the front, Kate and I can each take one side of the back. We can get them out! Let's just do it now!\" urged Gwen as she leaned down by the left side of the stretcher occupied by Chip.\n\nIt wasn't easy, but they managed to get Chip down the hill and loaded onto a chopper. As they carried Chip, Gwen saw Jared and Billy carrying a very bloody Charlie down the road, with Jason limping alongside them. They reached the chopper just after Coach and the girls had carefully placed Chip inside. \n\n\"Help us get Steve from the cave and we'll get out of here!\" yelled Gwen to Jared and Billy. \"He's on another stretcher. Follow me!\"\n\nJared and Billy wasted no time transporting Steve to the second chopper and placing him in it. \"Everyone get your asses on board right now!\" demanded Jason. \"There were some more trucks a couple miles up the road and they were headed this way fast!\"\n\nAmber was able to video the three pursuing vehicles as they pulled to a stop and began firing at the helicopters as they raced over the countryside. The pilots dropped down over a hill and the shooters were lost from sight. Then she turned her attention, and camera, to Steve as he lay unmoving. She heard Gwen say something and moved the lens up to catch her face as she spoke.\n\n\"We're headed straight for the Red Lady. We're going back to the states as fast as we can fly! Dad, how badly are you hit? Let's have a look at that arm. It's bleeding quite a lot.\"\n\n\"You just take care of Steve. I'll be fine if Charlotte will bandage me up a little, so I don't bleed all over. Compared to what Steve and Chip went through, and Charlie, it's hardly a scratch.\"\n\n\"How badly was Charlie hurt?\" asked Amber as she turned her attention to Ted.\n\n\"It's hard to say. There was a lot of blood. He was hit in the head and dropped like a rock. I want to tell you that Jason and Jared shot the hell out of those bastards. The rest of us helped, but you could tell who was getting the job done. Charlie showed his Army training, too, until he was hit. We took out about ten of them. I hope I never have to do that again,\" admitted Ted as Charlotte worked on his arm.\n\n\"Do you have anything we can use to get these cuffs off Steve?\" asked Gwen to the pilot. \"He has a broken arm and those damn cuffs have to be painful!\"\n\nWhen they reached Baghdad, they landed very close to where their jet was waiting. They quickly carried Chip, Charlie, and Steve onto the waiting jet. Within half an hour, they were airborne. The Red Lady landed briefly in Germany to refuel before turning its nose toward the United States and stretching out.\n\nAs they flew, Laura, with the help of Charlotte and Gwen, examined the three badly injured men. \"Gwen and Kate, carefully cut those filthy clothes off your men. They're not much more than rags anyway. I need to examine them more closely to see the extent of their injuries.\n\n\"Charlie's been hit pretty hard, but it looks like the bullet made a groove on his head, but didn't penetrate his skull. He probably has a concussion, and he bled a lot, but I'm optimistic that he'll make a full recovery, as long as he didn't suffer any brain damage. That seems unlikely.\"\n\n\"Thanks, Laura,\" replied Jordan gratefully. \"I don't know what I'd do if I lost him, but I'm sure proud of the way he fought to keep us safe. These are the best men I've ever seen, and you're pretty gutsy, too. I'm sure glad that you came along!\"\n\n\"So am I, Jordan,\" agreed Laura as she examined Charlie. \"Helping these fine young men gives me a great feeling. I've started Chip and Steve on antibiotics and I'm hopeful that their temperatures will begin to drop by the time we land. Make no mistake, these men are very ill. They both require surgery. It looks like Steve has a broken arm and a punctured lung, along with numerous injuries from several beatings. Chip's leg was broken by a bullet and his shoulder has another one lodged in it. They both lost a lot of blood. How they managed to walk at all amazes me. They're two very tough hombres!\"\n\nKate listened to Laura discuss the injuries as she gently cut Chip's pants away from his bloody leg. \"They are tough hombres, aren't they? I see now that falling for a real hero has some disadvantages. Gwen's been aware of it for some time. They have to be rescued and nursed back to health a lot, but that's okay. Chip saved Steve's life. I'm sure of it, and I'll always love him for that, and probably a lot of other things as well.\"\n\nKate watched Gwen tenderly sponge the blood and dust from Steve's body and soon began doing the same for Chip. She felt no embarrassment as she sponged every inch of Chip's body. Ted stopped by to see how his daughters and the injured men were doing. He found Jordan, Gwen, and Kate, lovingly caring for their men.\n\n\"Dad, promise me that you'll give Chip 'The Talk' when he's feeling better. I think I've fallen for the guy. Will you accept him into our family?\" asked Kate as she placed a damp cloth on Chip's head.\n\n\"Kate, I'll give him the best 'talk' I've ever given. If you think he's the one for you, he'll be welcome with open arms. My three girls sure know how to pick men! Jason was cool under fire and extremely effective this morning. My appreciation of his courage and loyalty has increased greatly on this trip. Steve's proven himself time and again. Now Chip is lying there all shot up because he's Steve's friend. He sure came through for Steve and that goes a long way with your mother and me. If you love the guy, it'll guarantee his place with us.\" \n\n\"Jason told us about what a great job you did today, Dad. He's really proud of how brave you were, especially since you've had no training of any kind,\" added Gwen. \"Now you have a bullet wound, just like all the other men in the family. You're the best father a girl could ever ask for!\"\n\nTed hugged the three girls and went back to his seat. They continued to care for their men as Laura divided her time between the three wounded heroes. \n\n\"We're going to take these guys to Sparta. It'll take a little longer than stopping in Washington or some other city, but I want them to have the best possible care and to be safe while they receive it. Right now, I don't trust anyone, except my friends and family,\" announced Gwen as everyone sat quietly listening. \"They had no business asking Steve to trade himself for those kids, but worse was how they abandoned him after he was swapped. The CIA dropped the ball. Jason has me wondering if they wanted Steve to be killed so Congress would have a reason to better fund the CIA.\n\n\"Even if it was just incompetence, or stupidity, I still don't trust them. How they let Steve walk into that situation and not do anything to help him is something I won't forget. I don't know how Chip managed it, but he was the difference. One man alone was more help to Steve than the entire U.S. intelligence community. They never even asked for the help of Rangers, or Seals. We're going to see that these guys get well, and then I'm going to stir things up in Washington!\" promised Gwen. \n\nShortly before landing, Charlie regained consciousness. He complained of a bad headache, but Jordan was thrilled beyond words. \"You had a bullet bounce off that hard head of yours! You were so brave! We found Steve and Chip and we're almost back home in Sparta. You're my hero!\"\n\nBefore they landed, Gwen made a very brief speech to her friends. \"I can't tell all of you how much I appreciate that all of you'd go with me on what many people would have felt was a fool's errand. It was dangerous, yet you stood by me, risked your lives to help Steve and Chip, and for that, I'll always be grateful!\"\n\nPaula and Lisa had put in a very long week. They tried to go about business as usual, but that quickly became impossible. Once word of the terrorists wanting to trade the hostages for Steve became known, reporters were all over Sparta. Then there was the awful video of the terrorists holding Steve on his knees and promising the next video would show his beheading! \n\nPaula's family came to her home to offer their support. Steve's grandparents, Aunt Janice, and cousin Jen returned to Sparta just after the video of the beheading was promised to be aired. When the video never appeared, the group began to dare to hope that Steve might survive.\n\n\"It absolutely amazes me that your daughters and their friends flew to Iraq to search for Steve and his friend,\" stated Steve's grandmother, Beatrice. \"The loyalty and courage of that group is unbelievable. But can they possibly do any good? If the military can't find them, and the CIA has no idea where Steve is, how can Gwen and the others hope to find anything?\"\n\n\"You saw Gwen react when Steve was flown in on that helicopter last week. She knew he was close by. She could feel it. If anyone can find him, it's Gwen,\" replied Paula with emotion. \"She has no faith in the CIA. She said they didn't involve the military in any part of the exchange and have not asked for its help in finding him. She said she's concerned that the CIA may have no intention of getting Steve out alive. She's even worried about them listening to her phone calls and reading her texts and emails. She won't be calling me much because she doesn't want to jeopardize the safety of her friends, or Steve and Chip.\"\n\n\"She thinks the CIA deliberately allowed Steve to be taken and possibly executed by these terrorists?\" asked an astounded William Patterson. \"That's difficult to believe. If you listen to the press conferences, they claim to be searching every inch of Iraq for him.\" \n\nIt was later that afternoon that the cable news first aired a report that earlier that day, a drone had launched a Hellfire missile at a suspected terrorist stronghold. The resulting huge blast indicated that explosives, and lots of them, had been stored in the building. Teams were trying to find and identify any remains, but it was feared that Steve Hammer had been held in that facility. Talking heads seemed to agree that if he had been there, it was very likely that he had already been murdered when the drone strike occurred.\n\n\"I can't believe it! If there was a chance that Steve was alive and in that building when they hit it with a missile, they should be tried for treason!\" insisted a very angry William Patterson. \n\nThe next two days were the longest Paula ever experienced. She no longer heard from Gwen, Kate, or Ted. Lisa had been told by Jason that they would not call or email until they had something substantial to report. Cable news constantly reported that Steve's remains may soon be identified from the scene of the missile attack. The public was beginning to ask questions about why the government would launch a missile attack on a building when it was possible that an American citizen was being held there.\n\nFriday morning, cable news had a new story to report. Huge numbers of bikers were traveling toward Sparta. They were riding to show their support for Steve. By noon, thousands of bikers were on the interstate. They had gradually joined up and formed a procession. Bikes were traveling two abreast for miles. Estimates ranged from three to five thousand bikers riding toward the Spartan Nation!\n\nThrough all of this, speculation was rampant as to the whereabouts of Gwen and her friends after they had left Sparta on the two helicopters. It was known that the group landed at the airport and soon departed in the Red Lady. Flight plans showed that Iraq was their destination, but no one could determine exactly where in Iraq they had gone after landing in Baghdad.\n\nPaula, Lisa, and their extended family were having lunch in a private room at Marsh's Landing when Lisa's phone rang. \"It's Jason!\" exclaimed Lisa as she answered the call and listened for several minutes, asking only a few questions.\n\nShe seemed almost in a daze as she returned her phone to her purse. \"They're on their way home! They should be landing at the airport within the hour! They'll be bringing Steve, Chip, and Charlie to the hospital by helicopter as fast as they can get them loaded. The hospital has been alerted. \n\n\"Dad was hit in the arm, but he's doing fine. Charlie was wounded in the head, while Steve and Chip have numerous injuries and are still unconscious. Can you believe it? They found Steve and Chip, and they were in a gun battle! Charlie's hurt pretty badly and Dad was wounded!\"\n\n\"How's Billy and Charlotte?\" asked Billy's father excitedly as he approached the table. \"I overheard you saying that they're coming home. My wife will be so relieved! Billy was in a gun battle?\"\n\n\"Everyone else is fine. Jason said they all pulled together and he was extremely proud of the entire group. Gwen and Steve sure have some special family and friends. I'm so proud of Jason, and Dad! He's a great father!\"\n\n\"My God!\" exclaimed a jubilant William Patterson. \"Those young people are incredible. They practically went to war to save their friends. They did what the government was either unwilling, or unable to do!\"\n\nAs soon as The Red Lady came to a stop and shut down its engines, the three injured men were immediately transferred to waiting helicopters. Then the rest of the group piled in, and they took off on the last leg of their journey. They had only gone a dozen miles or so when Naomi pointed to the interstate.\n\n\"Look at all of those bikes! They go on for miles! Is there something going on that I haven't heard about?\"\n\n\"I called the network to let them know I was back and had the story of the century,\" confessed Amber. \"They mentioned a procession of bikers riding to Sparta. It seems that the state department has been suggesting that Steve had died, and drones had killed the terrorists in a missile attack. These riders are headed to Sparta to pay their respects. I was told that there are thousands of them.\"",
        "\"They're riding to pay their respects? They think Steve is dead?\" questioned Gwen, before pulling her cell out and hitting a button. \"Larry? Larry Carson? Yes, it's really me. I'm wondering where you are at the moment. I thought so! Look up and to your left. That's our group in the choppers. No! Steve didn't die.\n\n\"We brought him home from Iraq! He's hurt pretty badly. So are Charlie and Chip, but we're expecting them to recover. Yes, you heard right. No, it isn't a secret any longer. Tell everyone that Steve's alive and coming home to the hospital in Sparta. I'll feel a lot safer with you and your group in town. You're our friends and that means a lot to us!\"\n\nGwen turned off her phone and watched as the bikers began waving to the helicopters as they roared past the procession. She knew that Larry would spread the word to his fellow riders. They would turn a solemn procession into a celebration. With that thought, Gwen dialed Ashley.\n\n\"Ashley, we're coming home! He's hurt pretty badly, but he should get better with the care he'll be receiving. Chip's with us. We expect him to recover as well. Charlie was knocked out by a bullet that bounced off his head, but Laura thinks he should be okay. They're all badly injured, but they're already looking better than they did when we first found them.\n\n\"We'll catch up on all of that later. Right now I wanted to tell you that thousands of bikers and motorists are headed for Sparta. Originally, they were coming to pay their respects, but now it's going to be a celebration of sorts. We're going to need vendors to supply free food and drinks for everyone. You've already arranged it? Ashley, you're the best! Make sure that we have enough. From the air, I see a lot of vehicles turning off the interstate at the Sparta exit. This is going to be big!\"\n\nWord spread quickly through Sparta that Gwen and friends had gone to Iraq, found Steve alive, and were bringing him back to the hospital! Hordes of reporters, photographers, and citizens began gathering in front of the hospital, not far from the pad designed for helicopters to land. A shout went up as the two choppers came into view, circled the area once, and then the first chopper landed on the pad. \n\nHospital staff immediately pushed gurneys out to the waiting helicopter as passengers began stepping out. Everyone recognized Billy and Jared as they gently swung a body on a stretcher from the helicopter and placed it on the waiting gurney. Kate Anderson rushed over to accompany it as it was carefully guided toward the entrance to the hospital as a second gurney replaced it by the helicopter. Billy and Jared carefully lifted a second stretcher and placed it on a gurney as Gwen Anderson watched closely. She accompanied that gurney as it was pushed toward the hospital. As she drew closer to the large crowd, people began to loudly cheer and clap. She had brought Steve home when the government and media were suggesting that he was probably dead! \n\nThe helicopter quickly took off and the second one landed. Another gurney was pushed along side as Billy and Jared helped passengers off before once again lifting someone on a stretcher onto the waiting gurney. Jordan Quick accompanied that gurney as it made the short journey to the hospital. Once again the crowd roared its approval. Everyone realized that Charlie must have been injured if Jordan was hanging so close.\n\nThe remaining friends started down the walkway to the hospital. Cheers and whistles continued as locals expressed their approval, and pride, in the actions of the young friends of Steve and Gwen. Reporters called to them to answer questions, but the group simply waved and continued into the hospital. "
    ],
    "authorname": "Harddaysknight",
    "tags": [
        "iraq",
        "terrorists",
        "helicopters",
        "baghdad",
        "hostages",
        "trade"
    ],
    "category": "Novels and Novellas",
    "url": "https://www.literotica.com/s/lady-in-red-pt-02-ch-09"
}
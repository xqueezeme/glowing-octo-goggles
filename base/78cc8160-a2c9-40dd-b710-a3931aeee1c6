{
    "title": "Boss Nanny Ch. 07",
    "pages": [
        "It took longer than usual to navigate the door lock. Seamus could barely keep the key steady as he tried to get the damn door open. Looked like Matt wasn't the only one sprinting on nerves and adrenaline. Was any of this a good idea? Matt had no clue. Was it a terrible idea? Hell no.\n\nFinally, Seamus pushed the door open. Matt smirked as he walked by. Took you long enough to which Seamus blushed. Seamus never blushed. But he composed himself quickly and took Matt's hand, pulling him along, rather hastily. If Matt was a weaker man his shoulder might have been dislocated.\n\n\"This is my apartment,\" Seamus said. \"Kitchen, living room, bathroom,\" he pointed. \"My roommates are there and there,\" he pointed to Matt and Aidan's rooms.\n\nMatt laughed as they continued through the apartment. When they got to Seamus's room, he turned and pressed his back against his door, blocking them from going in. \"And this is my room.\"\n\nMatt tried to peek over his shoulder, playing along, secretly anxious to be on the other side. \"It's a real nice door. Goes well with the rest of the house.\" He reached past Seamus and knocked on the wood. \"Sturdy. Is that solid wood?\"\n\nSeamus twisted to look behind him. \"Yes, maple I think.\"\n\n\"Maple is a hardwood. That's good. You got a solid door here made of hardwood.\"\n\n\"Yep. Maple is one of the hardest woods.\"\n\nNeither one of them could hold a straight face.\n\nHardwood.\n\nMatt pressed forward, pressing his hips against Seamus. \"What other hardwoods are there?\"\n\n\"Oh. Cherry, walnut, hickory, oak\u2014\" he listed, though his voice was far less confident now that Matt was pressed against him.\n\nSeamus was always a bit stoic so it was fun to watch the man stumble a bit. It evened the playing field. Matt needed the leg up. Seamus was hotter, more successful, and overall a better person. No way he had enough clout to sit parallel to someone of Seamus' caliber.\n\nSo, yeah, watching Seamus behave like a normal person\u2014tongue tied and awkward\u2014was a boost to Matt's self-esteem.\n\nWith that extra confidence, he leaned in, initiating another kiss then he fumbled for the handle. They stumbled backward, managing to stay connected without ever breaking the kiss or their grip on each other.\n\n\"You feel so fucking good,\" Seamus said, pulling Matt's shirt up so he could touch more skin. Matt moaned and tried to undress the hottie in front of him. His fingers were burning with anticipation.\n\nHe unzipped Seamus' pants and stuck his hand inside, straight for the gold. Seamus shuddered and stilled as Matt fumbled with his cock. He pushed his pants lower so Matt had full access.\n\nSeamus was solid. Matt could easily appreciate what he was packing. Having dated almost every gay person in a one-hour radius back home, Matt had a lot to compare against. They undressed down to their boxers. Quite the feat considering their unwillingness to stop groping or kissing. Seamus hit the bed first, pulling Matt on top of him.\n\nMatt took a second to admire all the perfection that was Seamus Ryan. Nice chest, toned tummy, chestnut chest hair trimmed short, nice legs\u2014muscled, hairy, sexy as hell. Matt paused. \"Do you still have your socks on?\" he asked. \"Please tell me you don't have your socks on.\"\n\nSeamus took his socks off, throwing them on the floor. \"There,\" he said, breathlessly. \"No socks.\"\n\nMatt bit his lip then swooped down and kissed Seamus because not kissing him wasn't an option. He could feel Seamus melt under him and it only drove him crazier. Matt could already feel the pressure building in his belly.\n\n\"Here.\" Seamus shoved Matt's boxers down until he was fully exposed. \"Holy shit.\" Seamus stared at Matt's cock. \"You're huge.\"\n\nHe returned the favor and shoved Seamus's boxers down then took them both in his hand. Matt was thicker but Seamus was a little longer. He moved his hand, making them both lose control. Breathing, panting, moaning. Everything became frantic as they thrust against each other, and with each other, until it became too much and they both came.\n\nMatt closed his eyes and tried to steady his breathing. It had been a while for him. He almost forgot how physical it was. He moved off Seamus and laid like a dead fish on the bed. Seamus shifted next to him, groaning as he pushed his boxers all the way off. When he was done, he made a noise, a cute sleepy laugh. \"I think that was better than the ice cream.\"\n\n\"What?\" he laughed. \"I think you're delirious.\"\n\n\"After the inspection when I gave you the icecream bar?\"\n\nMatt flushed. \"I can't believe you're bringing that up. I embarrassed myself.\"\n\nWhen he tried to bury his head in the pillow, Seamus pulled him close. \"Notice how I'm always bringing you ice cream bars? Yeah, I've been chasing that high ever since. I'm just glad I could bring you to the same ecstasy as those little chocolate crunch bars.\"\n\nMatt bit his lip. He was so happy. Happier than any ice cream bar ever made him. He snuggled in deeper. The moment was calming. The orgasm, the smell of Seamus everywhere, his soft breathing. If it wasn't for the fact the lights were on and the door had possibly been left unlocked, he would have fallen asleep right there.\n\n\"I'm gonna make sure everything's locked up for the night,\" Matt whispered. He slowly pulled away. Seamus made a weak attempt to keep him but he was half way to sleepy la la land.\n\nHe made his rounds, locked the door, turned off the lights, and then decided to shower. Seamus was right, he stunk from the club. If he never went back it would be too soon. When he was done, he walked toward Seamus and paused. He was positive Seamus wanted him in his bed tonight. He was fairly certain. The man had been clear about what he wanted and what he wanted was Matt. But the more he thought about it the more he doubted himself.\n\nMatt rubbed his face in frustration and turned for his room. Better safe than sorry. How embarrassing would it be if they were on different wavelengths? Not that they were, but what if...\n\n****\n\nThe door squeaked. One of the hinges needed to be replaced really bad. No matter how carefully you closed it, it always squeaked at the very last moment.\n\nMatt didn't think anything of it until the blanket moved and the bed shifted. It was technically morning but far too dark to be considered a reasonable time of day. Then Seamus nestled between Matt's thighs and his whole body became woke. Strong hands tilted his face and then soft lips gently kissed the sensitive line of his neck and jaw.\n\n\"Why did I wake up alone?\" God his voice was everything. Deep and husky from sleep.\n\n\"I wasn't sure\u2014\" if I should go back in or not.\n\n\"You weren't sure?\" Seamus asked, still kissing Matt's neck and just generally driving him all sorts of crazy. \"I hunted you down at that filthy club, told you I like you, that I wanted you, and brought you back home. Tell me what wasn't clear?\"\n\nMatt didn't answer. How could he when Seamus was short circuiting his system with those kisses and, well, his body and his overall presence. Then Seamus pressed his erection against Matt's thigh and suddenly everything was worse and better all at once.\n\n\"Is this clear?\"\n\n\"Yeah,\" Matt breathed. \"That's pretty clear.\"\n\nSeamus sat back, fucking naked, and pulled Matt's boxers off. It was kind of awkward as Matt's legs flailed but Seamus was oddly proficient. Then he surprised Matt in the best possible way by bending over and taking as much as he could in one swallow. Matt's eyes bulged and his back came off the bed. The sound he made was unnatural and could've terrified a lesser man but Seamus was on a mission and his mouth was the MVP.\n\nThere was nothing gentle or teasing, it was all high intensity and demanding as fuck. Matt gripped the chestnut hair; not sure if he wanted to pull him off or push him down. He settled with watching him bounce up and down on his cock.\n\n\"Feels so good.\"\n\nWho knew a blow job could double in intensity but that's exactly what happened. Seamus's fingers dug into Matt's hips as he sucked and slurped Matt into oblivion. His brains were being sucked out of his dick and he was losing control of his limbs. Every muscle seized as an orgasm racked through his body.\n\nThe sucking slowed as he came while maintaining enough pressure to pull him through to the other side without becoming uncomfortable. Seamus kneeled over Matt and began working his own cock. Three strokes and Seamus added his cum to Matt's.\n\n\"Are you punishing me?\" Matt asked. He was heaving, his chest thumping a mile an hour. \"Trying to kill me over a misunderstanding?\"\n\nSeamus hovered over Matt. His arms on either side of Matt's head, his own head hanging limp in exhaustion, his dick dangling semi-softly as he tried to catch his own breath. \"Just trying to prove my point.\"\n\n\"That you can blow a guy into another dimension? Point proven.\"\n\n\"That I can make you moan more than a chocolate crunch ice cream bar.\" Seamus's eyes crinkled. He lowered himself to his elbows and hovered his lips above Matt's. They were both damp with perspiration. Despite looking completely wrecked, Seamus's eyes were sad.\n\n\"Why'd you sleep in here?\"\n\n\"I didn't know what to do,\" Matt explained. \"I started going back to your room but then I froze. I don't want to mess up.\"\n\nSeamus pressed his body against Matt's. He was warm, bordering hot. A little clammy. A lot sexy. \"Always come back to my room.\"\n\nMatt leaned up and kissed him which led to them making out, slower than the night before. No rushing, no end goal in mind. Just some good ol' fashion lazy, finally-with-the-person-you're-crazy-about kissing. And boy was Seamus a great kisser. They moved in sync. Neither of them more eager or aggressive than the other. Everything about them was perfect together.\n\n\"What time do we need to head out?\" Seamus asked after kissing for a half hour.\n\n\"No rush,\" Matt said, kinda missing Seamus' lips. \"In time for an early dinner.\"\n\nSeamus ran his fingers along Matt's jaw, down his neck, and over his collarbone. \"We could go early and hang with your dad.\"\n\n\"AKA you miss Aidan.\"\n\n\"And you don't?\"\n\n\"I do,\" he said. \"But I subtly suggested we stay in bed all day and you countered with leaving early and hanging out with my dad.\"\n\n\"I miss Aidan,\" Seamus admitted with a laugh because he knew he was caught. \"What if he started walking?\"\n\n\"He's not even crawling yet.\"\n\n\"Some kids never crawl. They go straight to walking.\"\n\n\"He's barely standing,\" Matt laughed. It was still dark but dawn was filtering through and the early morning light only made Seamus look sexier.\n\nSeamus rolled off Matt, adjusted the blanket that had been pulled to the side and snuggled in close.\n\nMatt smiled. \"We'll leave late morning. This is the longest Aidan's been away from us, we probably shouldn't push our luck.\"\n\n\"Wouldn't want to traumatize him,\" Seamus yawned.\n\n\"Yes, heaven forbid Aidan is traumatized by a little separation.\"\n\nSeamus pinched Matt's side in retaliation. \"Ouch. That hurt.\"\n\n\"Oh, I hope I didn't traumatize you.\"\n\nMatt grumbled but pulled the blankets the rest of the way up and snuggled in.\n\nThere was no more hanky panky when they slowly acclimated to the day. Once it reached a reasonable hour, Matt called his dad and then they were on the road by ten-thirty. Seamus reached over the console and threaded his fingers with Matt's.\n\nMatt's stomach whooped and he smiled at the road.\n\nThere were things he needed to figure out. Seamus was technically his boss and nanny and they were roommates. Those were things that needed to be taken into consideration sooner than later. He wasn't going to overthink it or anything but he knew all the cards needed to be on the table if this was going to work.\n\nThey talked about plans for Aidan's first birthday. Matt thought it would be nice to have his dad come over. They could have a small celebration at the loft. Pizza, cake, and a few unnecessary gifts.\n\nSeamus had other plans. Bigger plans. Pizza party at Dough Guppies with everyone they could think of. It was over the top but Matt couldn't find it in himself to deny Seamus. Not after he'd done so much for Matt and Aidan.\n\n****\n\nBrad lived in a nice, modest home in a comfortable neighborhood. Matt had nothing but fond memories growing up. Most of the neighbors had lived there for as long as he could remember. The Seegers always over paid him for mowing their yard. Matt had thought it was normal so when he mowed the Halversons, he'd been a bit disappointed. Turns out that even they had overpaid him.\n\nHe always had friends to play with. A few times every summer they'd set up a lemonade stand. They made a killing. The tip jar always brought in more than the actual sales. Plus, with generous investors they had no overhead cost. As he drove through his neighborhood, he hoped Aidan would have those same experiences.\n\nSeamus was out of the SUV as soon as Matt put it in park and in the house before Matt could catch up. By the time he entered, Aidan was chattering excitedly in Seamus' arms while his nanny peppered his chubby face with kisses. It was unclear who was more excited to be reunited.\n\n\"Two peas in a pod,\" Brad said from the kitchen doorway. He was watching his grandson with so much love despite having just spent an entire weekend with him.\n\nMatt smiled fondly and tried to hide the hearts in his eyes. \"They have a special relationship.\"\n\nSeamus lifted Aidan's hand and waved. \"Hi Maaa-tt,\" Seamus sounded out the name so Aidan could learn it.\n\nAidan's face lit up when he saw Matt. He started bouncing in Seamus's arms and leaning toward his brother. Matt quickly scooped him up and said hello. He smelled like baby shampoo and sleep. Something in him relaxed. It felt good to hold his brother, to see him smiling and chatting nonsense. Its possible Matt missed Aidan more than he realized.\n\nThey sat in the living room for a while. Aidan couldn't decide who he wanted so he kept going back and forth. He had no intentions of letting Matt or Seamus out of his sight. Seamus used the rest of the evening trying to get Aidan to say his name.\n\n\"He's half mastered yours,\" he complained. \"Shay-mus,\" he said, over exaggerating the sound. Aidan smiled and made a noise. Seamus looked at Matt with wide eyes. \"Did you hear that? He said my name.\"\n\nHe hadn't, not really. It was a distant relative\u2014a fourth cousin twice removed situation. But no one was going to rain on his parade. Anything to keep Boss Nanny happy. And what made him happy was hearing Aidan attempt his name.\n\n****\n\nMatt was worried that Seamus might do something like hold his hand or really anything that might grab his dad's attention. But Matt and Seamus acted the way Matt and Seamus always acted, save a few shared looks that were anything but subtle. How could they not? Things had changed. Feelings were shared. They'd gotten off together, twice. Sharing heated looks and sly smiles were par for course and exciting as hell. He should've been more concerned that he'd give them away. Matt could hardly look at Seamus without flushing all over.\n\nSeamus wasn't the blushing noob he'd been the night before. Nope, he was far more composed. Still, Matt was able to coax one or two from him. Matt liked that. He liked both sides of Seamus, the one he could make stutter and blush and the one who seemed unfazed and unapproachable.\n\nIf Brad noticed any of it, he didn't let on. Or maybe he just didn't care. He was cool like that. Never fancied himself to meddle in people's business and always allowed Matt to find his own way.\n\nMatt wondered if he'd be concerned about the age difference? Eight years was a lot when you're twenty-one. If that wasn't a big deal to him, maybe it would be the relationship and how it might jeopardize the dynamic they shared. Matt had the most to lose if things went south. Job, housing, help with Aidan. That should make Dad skeptical.\n\n\"I was thinking we could make this a regular thing,\" Brad told Matt while Seamus was outside loading Aidan into the car. \"I wouldn't mind making this a monthly thing with Aidan. I remember how grateful I was when my parents took you for the weekends. It was good for me but also good for you and the relationship with grandparents.\"\n\nMatt could hardly hold in his excitement. He loved Aidan but having the weekend to himself had been good for his mental health. Plus, he loved seeing the way his dad loved Aidan. \"Please, yes.\"\n\nHis dad laughed. The age lines around his eyes and mouth accentuating just how good his life had been. \"Good, good. We'll connect and find another weekend that works. You still coming home for the summer?\"\n\n\"Yeah,\" Matt smiled.\n\nHe was ready to come home for the summer and spend some quality time with his dad. He was also excited to give Seamus a break. The poor guy was with Aidan all the time.\n\n\"My last day with the Coffee|Bar is June first but I'm gonna stay in town until Aidan's birthday party.\"\n\n\"Let me know if you need any help,\" Brad offered as Matt walked toward the car. From the door, Brad made kissy faces at his grandson then waved at Seamus.\n\n\"I like Brad,\" Seamus said as they pulled out of the driveway. \"He's chill.\"\n\n\"Chill would be the perfect word to describe him. Though there were some pretty unchill moments growing up.\"\n\n\"I should hope so. I can't imagine you were all that easy.\"\n\n\"Hey,\" Matt complained, shooting Seamus an evil eye from behind the wheel. \"I'll have you know I was as close to perfect as it gets. I didn't have any siblings to fight with and I hated getting in trouble.\"\n\nSeamus hummed unbelieving then smiled. \"You're a lot like your dad. You share the same mannerisms. I felt like a creep for watching him but it was crazy. Kinda like looking into the future.\"\n\n\"Yeah, I get that all the time. I can't tell you how many times I heard 'oh, you must be Brad's kid'. They even called me BJ for short. Lucky for me that didn't stick.\"\n\nSeamus laughed and Matt told him not to get any ideas.\n\n\"Did your parents split custody? I get the impression you spent more time with your dad.\"\n\n\"Technically. I spent more time with my mom until I was older, then I chose to be with Dad.\"\n\n\"Did it bother her? That you preferred your dad?\"\n\nMatt thought about it. \"I don't know. I'm sure it did at times. Mostly I think she was content doing her own thing at her own convenience and that included being a mom.\" Matt glanced over and saw Seamus frowning. \"What's that look?\"\n\n\"It's crazy to me,\" Seamus said. \"How differently people take to having kids.\"\n\n\"What about your family?\" Matt asked. \"Must be a reason you don't go home much and don't tell me it's work,\" he warned.\n\n\"It's not,\" he said honestly. He pulled out his phone and started scrolling through. When he found what he was looking for, he held his phone up.\n\nIt was a photo of a dozen or so people, either a decent candid or a terribly posed photo taken in what looked like a rundown mobile home from the seventies. Faux wood paneling on the walls, smoke-stained ceiling and curtains, mismatched furniture, a recliner with hand towels draped over each arm to protect the fabric. An older man was wearing a stained white shirt with suspenders and a trucker hat, the woman was grossly thin with big hair and a leopard jacket. Everyone else looked like they'd come straight from the pages of White Trash Weekly.\n\nMatt wasn't sure if it was a current photo or an old photo, either way, it was cringy. He could smell the stale air and cigarette smoke from the photo.\n\n\"That's my family.\" Matt must've made a face because Seamus laughed and put his phone away. \"I'd like to think I'm the black sheep. My family is the epitome of trailer trash; happy to live off the government. They think it's owed to them. I was the only one who couldn't wait to leave. I graduated early just to get out of dodge. They didn't care. They hated that I thought there was something better out there and they were happy to see me leave. I didn't hear from them until they heard I was dating someone with money. Then, after Kelly died, they tried to play nice.\"",
        "\"For the money?\"\n\n\"I had no illusions. Most young kids idolize their families when they're little, no matter how fucked up they are. I can't remember a time when I wasn't repulsed by mine. I saw through them at a young age.\"\n\n\"You still see them, though. I think I remember you saying?\"\n\n\"Eeh. I talk to them once a year, maybe...but I see them less. It's been a few years at this point. Not long enough if you ask me. Denying them money only to be put back on their do-not-call list only solidified my feelings and my decision. I grew up with too much of their toxicity. I don't want it anymore.\"\n\nSeamus was incredible. How hard it must've been to grow up with that kind of family. It was a miracle that he was so unlike them. Matt didn't particularly like his mom but his family failed in comparison.\n\nMatt grabbed Seamus' hand and pulled it to his lips. \"Love shouldn't feel like that.\"\n\nSeamus looked at Matt, all dark eyes and hero worship. Like Matt was something special and incredible. Once again Matt was taken aback by how responsive Seamus was when no one was around.\n\nThey talked more, about life and their childhoods. Seamus told him about college and a little about Kelly. Matt wanted to know so much more, but asking about someone's dead husband was something that needed to be done with tact and grace.\n\nThey moved on to trivial things like pets. Matt had three dogs during his life and they were all named Mowgli.\n\n\"From the Jungle Book?\"\n\n\"Best Disney movie ever.\"\n\n\"Three dogs eh?\" Seamus asked, totally disbelieving. \"You couldn't have switched it up. Named one Bagheera or Baloo?\"\n\n\"Bagheera were my cats' names.\"\n\n\"Cats.\"\n\n\"Yes, both of them.\"\n\nSeamus smiled then leaned across the console and kissed Matt's cheek. \"I don't date,\" Seamus blurted. He was still leaning against the console, watching Matt drive. \"I have nothing against it, it's just not something I've felt inclined to do. But I want to date you.?\"\n\nMatt glanced at Seamus and smiled. \"Okay?\"\n\n\"Is that something you want?\"\n\n\"Oh, I want.\"\n\nSeamus let out a loud breath then pressed his fingers to Matt's chin and tilted his head. He kissed the corner of his lips, his cheek, along his jaw, and down his neck. The kisses were soft and really fucking distracting.\n\nSeamus paused and looked toward Aidan making Matt instinctively glance in the mirror. He was zonked, head leaning to the side and slightly forward.\n\nA hand slipped into Matt's lap and gripped his thigh. It was low enough to be disappointing but high enough to be distracting. He continued to tease Matt, kissing and nuzzling his neck from across the console.\n\nMatt had teased and been teased by a lot of guys. It was a fun game to play, an easy way to build things up. A power trip. One that Matt loved. Seamus wasn't intentionally driving Matt crazy, he wasn't sitting there, kissing Matt and touching his leg in an effort to make Matt beg or assert his dominance. He wasn't trying to get Matt hard and hornier than shit.\n\nHe was though. He totally, totally was. Matt adjusted himself because he was all of those things plus mildly uncomfortable in his tight jeans.\n\n\"Laugh away,\" Matt warned. \"I'm gonna fuck you up later.\" Drive him crazy, make him beg, bring Seamus to his knees.\n\nSeamus sucked in a breath and rebounded a second later. He was all over Matt, dangerously so. Good thing they were only a few blocks from home. He was kneading Matt's crotch and sucking Matt's neck. Matt covered Seamus' hand and held it firmly against his bulge.\n\nThe second Matt put the truck in park he grabbed Seamus' face and kissed him back. Fuck Seamus for driving Matt crazy. He reached between Seamus legs and grabbed a fist full of denim erection. Seamus leaned into Matt and moaned. They were practically crawling across the console. Then Aidan whined and the two sprung apart like bad mattress coils.\n\nHe was half asleep but slowly coming-to.\n\nSeamus adjusted himself. \"I'll grab Aidan if you grab his stuff.\"\n\nThey emptied the SUV and made their way to the loft. As far as fire retardants went, Aidan was primo. He was clingy and needy after spending a weekend away from his two-favorite people. When bedtime came around, he refused. The kid was scared they might disappear.\n\nMatt tried to put him to bed a few but Aidan kept stirring. The last thing he wanted to do was wake the beast. It wasn't until mid-night when he finally fell asleep on Matt's chest.\n\n\"Seamus,\" Matt half yelled, making sure to keep his voice quieter than the TV. Heaven forbid Aidan wake. \"Get me a blanket and I'll sleep on the couch with the sleepy potato.\"\n\nA minute later Seamus came out, holding a blanket open as he walked to the couch. Matt looked up when Seamus finished tucking the blanket around them. Matt realized Seamus was naked.\n\nLean muscles and naked.\n\nWhite, firm tushy and naked.\n\nCurved shoulders, biceps, and naked.\n\nTight waist with dimples above his butt and naked.\n\nStroking his hardon and naked.\n\n\"On second thought,\" Matt held Aidan to his chest and rocked up. \"I bet I can get Aidan to sleep in his own crib.\"\n\nSeamus laughed as double checked the door lock while still stroking himself. \"You do you. I'm going to bed. I guess I'll see you when I see you.\" With that, Seamus disappeared behind his very nice hardwood door.\n\nAidan stirred, not much but enough to throw Matt into a quick counter bounce dance. Once he was settled again, Matt quickly tiptoed to Aidan's room. He was determined. Fucking hell if Seamus was going to sleep alone tonight, not if Matt had anything to do with it.\n\nHe quickly but very carefully swaddled Aidan, just enough to fool him into thinking he was being held. He held his breath as Aidan wiggled around but, in the end, he settled down. Matt left, slowly shutting the door behind him. Once the coast was clear, he ran to the bathroom, quickly brushed his teeth then hightailed it to the other end of the apartment, leaving his clothes like bread crumbs along the way.\n\nSeamus was kneeling with one knee on the bed as if he was just getting ready to crawl in for the night. His back was arched, his ass popping just so. He looked over his shoulder so fucking casually. Matt didn't miss the fact Seamus was still touching himself and he was pretty sure the pose was no accident. Maybe Seamus enjoyed the games after all.\n\n\"Aidan's asleep?\" He asked. Matt nodded. \"You gonna fuck me up tonight?\"\n\nHe walked up to Seamus who was still bent over and presenting and pressed himself against his hot body. He nuzzled his cock between Seamus ass cheeks, making Seamus moan. He pushed back.\n\n\"C'mon,\" he begged.\n\nMatt dug his fingers into the soft flesh, feeling the meat of his lover's thighs, ass, and the curve of his waist. Every inch was inviting. \"What's your preference?\" Matt asked, nipping the back of Seamus' neck and slowly pressing him into the mattress. Seamus kept his back arched, forcing Matt's cock to press in just right.\n\n\"As long as you follow through on your promise, you can have me however you want.\"\n\nI'm gonna fuck you up. That's what Matt had promised and obviously what Seamus wanted.\n\nMatt continued to kiss his shoulder then reached down and ran his finger along Seamus' entrance. \"Condom? Lube?\"\n\nSeamus motioned toward the dresser. Everything they needed was laid on top, waiting.\n\nMatt grabbed the lube and started working Seamus open. He must've been relaxed and needy because he opened right up and never faltered as Matt stretched him out. When Matt put the condom on, Seamus looked back with smoldering brown eyes.\n\n\"Do it in one push. I like it that way.\"\n\nHe wanted to argue, tell him it would hurt. By Seamus' own confession it had been a while since he last had sex and Matt wasn't small.\n\nHe didn't want to argue though. He didn't want Seamus to change his mind. He rolled the condom on, applied more lube and, for safe measure, spent another minute prepping Seamus. When he was ready, he put one hand on Seamus' lower back and used the other to aim his cock.\n\n\"One push,\" Seamus reminded him.\n\nMatt did as he was told. It felt good. So damn good. Seamus made noises, not all of them sounded like ecstasy but they weren't the sounds of a pig at slaughter either. When Matt bottomed out, Seamus was gripping the sheets and breathing hard. There were beads of perspiration around his hairline and his head rested on his forearm. Matt ran his hands up Seamus' back, exploring the sexy lines and tense muscles.\n\nHe felt Seamus relax. The tight grip around his fat cock eased a little, enough for him to pull out a few inches, then back in. Seamus felt amazing. Better than anyone had ever felt. He found a steady pace, seesawing Seamus into a frenzy. Every time Matt flexed forward, going deeper, Seamus responded with a sound that was pure need. And when his fingers dug deep or he held Seamus down, the man got even wilder.\n\nSeamus really wanted Matt to fuck him up.\n\nMatt's whole body was on fire. Watching Seamus claw the bed and shift relentlessly as he chased his own pleasure did something to Matt. He wouldn't consider himself a jealous man or a controlling man, but he liked what was happening, he liked how Seamus needed him. It made Matt want to claim him.\n\nSeamus couldn't get enough, egging him, encouraging him on until Matt couldn't stop if he wanted to. He squeezed Seamus as he pounded him from behind.\n\n\"You're going to make me cum,\" Matt husked. \"Can you come with me?\"\n\nSeamus had one hand braced against the headboard and the other hand under him. His whole body was flex tighter than a guitar string. Matt pressed him down with all his weight, grinding as deep as the orgasm swept through him. He felt Seamus' ass flex around him. Heat flooded his body like a tidal wave and he cried out, spilling into the condom.\n\nHe lost his head at the end. When he came to, Seamus was sprawled out under him, panting heavily. His hips, thighs, and shoulders were littered with red blotches where Matt had torn him apart.\n\nBy some miracle, Matt was still half hard and nestled in Seamus ass. He hovered over the redhead like a blanket. He finally pulled out, pinching the condom off and tossing it aside.\n\nSeamus still hadn't said anything, he hadn't even moved\u2014not even when Matt pulled out. He looked dead. His face was buried in the mattress and Matt wondered how well he was able to breathe.\n\nMatt propped himself on an elbow, one leg still over the back of Seamus' thighs and ran his hand softly down his spine. \"Hey,\" he whispered. \"Are you okay?\"\n\nSeamus made a noise and moved, barely. Matt didn't know what the grunt meant. Was he okay? No? Had he been too rough? Was he happy?\n\nHe took a moment to soak in the man\u2014his hairline, his freckles, how his ass was a perfect, squishable mound, the way his back tapered, and the muscled lines on his arms. When he was done studying that, he forced Seamus to roll over.\n\nHis face pinched like a child being woken up. His chest hair was trimmed and there was cum drying on his belly. Matt pushed him over until he was flat on his back, then pulled the blanket over until they were cocooned with Matt on top.\n\nSeamus finally opened his eyes. He was scowling.\n\n\"Hey,\" Matt said, smiling. \"Everything okay? Do I need to apologize?\"\n\nSeamus gripped Matt's ass, hauled him as close as he could and kissed him. \"I really fucking like you.\"\n\nMatt bit his lip. \"I really fucking like you, too.\"\n\n\"It's been a while for me.\"\n\n\"Yeah? Was it okay?\"\n\n\"No,\" Seamus said, closing his eyes. \"Okay doesn't do you justice. Shit, Matt. You almost killed me.\"\n\n\"Sorry.\" He wasn't.\n\nSeamus squeezed him. \"I feel very good and thoroughly fucked. When can we do it again?\"\n\n\"Probably not for a few days. I think you took a beating. I was a little rough.\"\n\n\"I'll survive.\"\n\n\"Maybe, but I won't chance it. You said it yourself, it's been a while.\"\n\n\"I bet I can convince you otherwise.\"\n\n\"Sure,\" Matt smiled. \"Maybe in a few days.\"\n\n****\n\nSeamus convinced him otherwise. It didn't take much. Matt was easily persuadable where a naked Seamus was involved.\n\nMatt got early so Seamus could sleep in. He spent the morning with Aidan, playing and eating. Seamus was still sleeping when Matt had to leave for class, so he laid a napping Aidan in bed with him on his way out.\n\nThere was a bounce in his step as he made his way to school. Happiness had always come easy to Matt but he'd just reached a whole new level. What a weekend. Aidan was officially his and now, so was Seamus.\n\nHe laughed as he crossed campus. He'd been so stupid. Blind and stupid. There were so many signs staring him in the face yet he thought he was going crazy. He was so sure there was no way Seamus wanted him, no way. Seamus was a generous person. He would've watched anyone's kid. Ha.\n\nMatt needed to trust himself. If he would've, he might have enjoyed these spoils a little sooner. But then again, the wait made it taste all that better.\n\n \n"
    ],
    "authorname": "Mrsgnomie",
    "tags": [
        "gay",
        "gay male",
        "m/m",
        "gay romance",
        "boss",
        "nanny",
        "anal",
        "blowjob"
    ],
    "category": "Gay Male",
    "url": "https://www.literotica.com/s/boss-nanny-ch-07"
}
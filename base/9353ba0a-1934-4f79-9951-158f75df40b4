{
    "title": "Mind Games Ch. 03",
    "pages": [
        "The airlock doors cycled shut and I let my head sag against the wall for a few moments. The feeling of no longer being dangled over a pit was something I was going to revel for a bit. Seeing the Earth had really crammed the importance of what I had done to me. Virgil Station was no longer in an unstable orbit. It was no longer going to plunge through the upper atmosphere like the fist of a furious god. It was no longer going to smash into one of those massive, blue-blue oceans and create a tsunami the likes of which our poor planet hadn't seen for centuries. \n\nBut that left one big question. \n\n\"What now?\" Lucas asked. His voice crackled in my ear - loud in my helmet. I grabbed said helmet and yanked it off, breathing the station air. I had gotten into the air lock that was on the second level down from Habitation -- Lucas had said that it was PsyOps. \n\n\"What does PsyOps do?\" I asked. \n\n\"It's a fancy term for rest and recreation, La- Bae,\" Lucas corrected himself. Halfway. My brow furrowed. \n\n\"Bae?\" \n\n\"I'm not callin' ya Beatrice. I'm not paid by the syllable,\" Lucas said, sounding dry. \"PsyOps has a lot of recreational shite. Immersion Rooms, some restaurants, a null-G pool, that kind of stuff. But it also has some working food dispensers, if you're getting hungry.\" \n\nAt that, my belly rumbled. I made a face. \n\n\"Way to remind me,\" I said, pushing away from the airlock wall. \"I'll get something to eat, and we can work out what to do next.\" \n\nThe airlock doors opened to reveal a broad, welcoming corridor. The walls were painted a pale blue and the ceiling was decorated with slowly moving cloud motifs. The lights were bright and yet not harsh. Instead, they diffused a warm yellowy glow through the whole place, like sunlight. The only problem was that rather than a soothing breeze, the air was filled with the feted stench of rotting meat. I gagged and put the back of my hand against my mouth to try and block it out. \"What is that?\" I whispered. \n\n\"I don't know, Bae. Last I heard from PsyOps was that the Tesc were fuckin everything up, like they did on tha rest of the station.\" \n\nI nodded slowly, then stepped back and grabbed my helmet. With it snapped back into place, I could only smell myself, but the memory of the scent clung to the inside of my nostrils like a fine film. I wanted to blow my nose. Instead, I walked forward and past several doors that led into open meeting rooms that had a wistful, forlorn air to them. One had a rotting meal set out beside a bench with a book dropped on the ground. Another had some clothes left behind - whoever had been changing or naked inside had run off and left them behind. A third had a single severed hand, still clutching what looked like a baseball bat that had been bent in half. \n\nThen I came to an intersection - more like a courtyard, actually. It was two stories, with the wrap around balcony overhead leading to yet more stores and rooms. The lower level had three fountains in the middle. Each one was choked with bodies. Feet faced me and arms were placidly laid across backs. Heads were forced under the slowly burbling water. Hair floated and tangled together like chunks of sea weed. But the thing that made me want to scream and scream and scream and never stop...were the shoes. \n\nFifty. Maybe sixty sets. Neatly taken off, paired off, then set to the ground. Almost a hundred people had walked in here, quietly taken off their shoes, then as a group, jammed their heads into the fountain. Their bodies had started to tighten and rot - and I could see the faint squirm of bugs underneath the skin. I stepped slowly back. \n\n\"Jesus...\" I whispered. \n\nTink tink tink tink. \n\nThe sound - not unlike a piece of bone rapping against a metal wall - echoed from the mall. \n\nI gulped. \"Lucas. Go through the networks and find the security footage of this place. Find out what happened.\" I backed towards one of the stores - a large, cheerful sign overhead announcing that it was a TempleSoft Toy's For Tots store. The interior showed large squishy stuffed animals in neat rows on shelves, their button eyes looking out at the mass suicide with clear curiosity. There were several blocks strewn across the ground, each one unmarked. I stepped over them carefully - but my nearness caused one to whir and open up, revealing it was a multi-modular playset. It started to construct a replica of Virgil Station and play a cheery tune. \n\n\"Checking,\" Lucas said. \n\nI crouched down near the corner of the room and tried to get my breathing under control. The tink tink tink noise was growing closer. My ears filtered some of the echos out and I breathed slowly in and held the breath. Tink tink tink. It was coming from above me. Whatever it was was in the balcony right overhead. I looked at the ceiling, trying to gauge the thickness of it. Then I heard a quiet sigh - a very human sigh, as bizarre as that sounded. Then the tink tink tink faded away. I remained still for a few more minutes, letting my heart rate slow. \n\n\"I think it's gone,\" I whispered. \n\n\"Still working on the camera footage,\" Lucas said. \n\n\"Keep at it.\" I stood and walked forward. \n\n\"I love you!\" \n\nI screamed and leaped away from the shelf of stuffed animals. A large teddy bear was looking up at me, it's eyes shining as it cocked it's head. It spread its tiny arms. \"I'm sorry, I didn't mean to scare you.\" \n\nI lowered my shotgun, panting heavily. \"Fucking- Lucas, these are smart toys, aren't they?\" \n\n\"You're big and smart!\" the teddy bear said. \"I am not actually a person. I'm just a toy.\" \n\n\"Ah, those fuckers,\" Lucas muttered. \"Teddy Fazbear fucking scared me, even when I was a kid.\" \n\nI shook my head at the bear. \"I'm not a child,\" I said. \"The shotgun and spacesuit gives it away, doesn't it?\" \n\nThe teddy bear nodded solemnly. \"I am sorry. But since you are an adult, I can tell you that the Teddy Fazbear semi-sentient talking bear toy is a perfect toy for a new mother.\" He sounded so cheery I could almost forget the pile of corpses outside the store. \"We can help take care of your baby, and tell you if anything goes wrong. All yours for only three hundred United Nations credits - but you get us fifty percent off using TSPN!\" \n\n\"TS...what?\" I asked. \n\n\"TempleSoft Promissory Notes,\" Lucas said, casually. \"The longer you work with TempleSoft, the more your TSPN to credit ratio goes up. Mine was at 1.5. If it was at 1.2, I'd have quit this bloody job...\" \n\nI shook my head. I was starting to think it was a good thing I didn't remember Earth. I turned away from Teddy Fazbear and started for the door. \n\n\"Achieve death, Beatrice!\" Teddy said, cheerily. \n\nI spun around and used my shotgun to bash the bear off the rack. I stomped its head and felt the flimsy plastic endoskeleton crunch under my nanoclad heel. I smashed my foot down again and again and again, until it was nothing more than a mangle of metal, wires, crystal and smoldering fur. I stepped away from the mangled mess, then glared around at the rest of the store. \"Any of you else want to say creepy shit?\" I snarled. \n\nThe bears were silent. \n\nOnce I came into the mall again, I looked for a map and found it - blown up big in the corner of the room. There were several dozen TempleSoft brand restaurants. I headed for the nearest one, taking a broad corridor. I would have been more comforted to find signs of battle, or other haunting reminders that humanity had once thrived and walked through this place like the population of a small city. Instead, I walked through a corridor so utterly clean and litter free that it only accentuated how busy this place should have been. \n\nMy mind drifted back to those shoes, lined out. As if everyone was going to get out of the pool. Instead, maggots were eating their fat, chewing underneath their skin. A convulsive shudder tried to crawl from my ankles to my forehead. The next mall had no fountains. Instead, it had what looked like a jungle gym that had been designed just big enough to make adults think they might be able to play on it - but there was a glowing blue fence surrounding the false grass that the gym was built on. The shimmering letters that slipped and twisted along the blueness made it clear: Kidz Zone. \n\nFour children sat on the swing sets. \n\nThey were all dead, but it took me a few seconds of looking at them to figure it out. I saw the tiny bloody dibbles coming from their ears as I walked a circle around the blue fence. I stepped hesitantly over the fence -- but it didn't set up an alarm. I came closer to the corpses and saw they too were slowly rotting, their bodies stiff. I saw that each one had a set of foot prints in the grass behind them, leading to one of the cafes I had planned to eat at. My eyes followed the prints and I tensed. \n\nFour people sat in the cafe, at a round table. They were stock still, but their skin didn't look drawn and greyish. They breathed. They were alive. I walked forward, my shotgun at the ready, and the door hissed open and let me into the cafe itself. I was so glad for the helmet - it made me feel secure, even if it was only a thin pane of glass and plastic. I could breathe myself, and not the rot of the corpses of children. \n\nThe four people were a mixture of genders and races. A black man, a white woman, a pink haired androgynous person who could have been anything, and an older Asian woman with a strong, mannish chin. They were seated stock still, their faces blank, their hands clasping tea cups. The liquid within looked like it had cooled and concealed into a muck that was as drinkable. As I stood in the doorway, I saw the face of the white woman's face was streaked with tears. She breathed in ragged breaths. Her hands shook with tiny, barely perceptible motions. \n\nSuddenly, each of the people pulled out tiny things. The white girl pulled a screw driver. The tip was black and studded with hardened globules. She put it into the cup and stirred it. The Asian woman had a knitting needle. The black man had a pen. Each one was caked with gore. \n\nI wanted to throw up. \n\n\"He's coming,\" the white woman hissed. \n\n\"Kill us,\" the black man wheezed. He sounded like he could barely get the words out between his lips. \n\nTick tick tick. \n\n\"Run,\" the pink haired androgyne whined. \n\nTick tick tick. \n\nI stepped backwards, then ran out into the mall itself. I tried to tell where the ticking sound was coming from - but it seemed to come from everywhere. It had been on the second floor back in the toy shop. Run. Run, that was what the pink haired one had said. Run. My mind flashed to the people drowned in the pool. The killed kids. I turned and I ran - my heart in my throat, panic rushing through me. Whatever that thing was, it had made people kill themselves and each other. If it saw me, who knew what- \n\nMy legs staggered. I fell and planted my face on the ground. The faceplate crunched, but the crack sealed itself up. My legs felt as if they had turned into solid stone. I panted, grabbing at the floor - and now my hands were locked in place. \n\nTick. Tick. Tick. The sound had slowed. My eyes rolled around - looking desperately for the source of the sounds. But then the ticking stopped and I felt every muscle in my body twitch. It wasn't instantaneous. Rather, it started at my eyebrows and worked its way down my head, to my neck, to my shoulders, along my spine. Every muscle group I had twitched and wriggled and settled. My toes wiggled in time, and then my back twisted, stretched, and I pushed myself to my feet. My muscles weren't moving because I wanted them too. Instead, they pushed and tightened and stretched themselves, leaving my brain inside my head, screaming. I walked back to the cafe, grabbing my helmet and yanking it off. I breathed in the scent of corruption and filth and smiled brightly as I walked to the table. \n\nIt wasn't my smile. \n\n\"Lass? What are you doing?\" Lucas hissed. I didn't respond. \n\nI sat down at the chair, my palms pressed there. I tried to fight, desperately, as I looked at the black man. My lips moved despite every single thing I tried to do. I could feel my lungs dragging in air, pushing them out. What was natural and normal became painful as my diaphragm compressed and the words formed, my tongue twisting to form them. \n\n\"Do you have a nice big fat black dick?\" I asked. \n\n\"Beatrice!\" Lucas shouted. \n\nThe man - tears glinting in his eyes - nodded. \"Of course.\" \n\nI smiled and stood. My hands went to the collar of my suit, undoing it. The nanites slithered away from my body, splattering onto the ground with wet drops as the controlling force that kept them in place was removed. It felt like solid mud being peeled off my body. My nipples hardened. And I felt a shameful blush rush through my whole body - the Tesc that was doing this didn't suppress the blush. Because the telepath hadn't needed to tweak and twist my body to get my nipples hard, to get my sex moist. Being exposed to the four people - the three others were all looking at me, their faces blank, their eyes filled with sympathy. \n\nWe all knew what was going to happen. \n\nThe black man was also dressed in nanites - but they had been coded to look like a rather nice three piece suit. When his collar came off the clothes seemed to freeze. Jagged lines of black formed across the white and gold hues of the suit, as if it was on a screen whose channel had changed unexpectedly. Then the suit began to fall away in pieces, revealing sculpted muscle and ebony dark skin, glistening with sweat. It was as if he had been struggling for...days...to move. To do anything. And that wear showed, even if he walked over languidly as a panther. His head was bald and he had a sleek circle goatee shaved around his mouth. He looked dignified and sensual, even naked, even with eyes filled with pain. \n\nI tried to force out words. I breathed them. \"It's okay...\" \n\nHis hands cupped my breasts. They were so very warm. I shivered and hissed quietly, my eyes half closing as those dark fingers found and tweaked my nipples. Pleasure tingled and buzzed along my body. My back arched without me wishing it, pushing those breasts into his hands. \n\n\"Jules,\" he whispered. \n\n\"Bea,\" I whispered back through clenched teeth. Then his hand smacked across my face. It was sudden and hard enough to send me sprawling to the ground - for a moment, I thought that the telepath had let me go, but I realized with a sinking feeling that that was the furthest thing from the truth. It had orchestrated my fall with the same grace and poise as a movie director. My body was as under control as it had ever been - I fell in exactly the pose the telepath wanted, with my thighs slightly spread, my face twisting into a look of confusion. My lip bleed sluggishly and my tongue moved under its whims, licking along the stinging cut. \n\nJules stepped forward, his cock hardening. It was long and thick and my head spun with his closeness. I breathed in and for once, didn't smell the corruption and rot. He whispered, barely audible. \"I'm so sorry.\" \n\nHis cock slapped my face. It was gentler than his hand, and yet felt infinitely more humiliating. The thickness of his shaft left an impression against my cheek, and I felt hot pre dripping along my neck. My breasts ached, wanting to be touched, but instead, I whimpered and my voice forced out words. I looked up at him - trying to show with my eyes as I spoke to the telepath's script that I didn't mean what i said. \n\n\"J-Jules, don't. Please don-\" \n\nHis hand grabbed my hair. \n\nHis fingers - strong and firm - clenched on my hair and I felt the roots tug at my scalp. Tingling buzzing pleasure shot along my spine despite the pain. Or maybe it was accentuated because of the pain. But my begging, pleading words were cut off, cut off by Jules shoving his thick cock into my mouth. My throat opened for him and my eyes locked on his. And as my tongue twitched against the underside of his cock and his balls slapped my chin, I felt something shocking. \n\nI... \n\nI was feeling good. \n\nIt wasn't from any physical stimulation. The telepath could move my muscles, but it didn't seem to do anything to my brain. To my soul. And my soul buzzed with the happiness at the fact that in this sick, twisted moment, I could give this man something. It was nothing next to what he had been forced to endure. What he had been forced to do. But it was a tiny flicker of physical pleasure. And the telepath couldn't take that from me. My tongue swirled around and around his cock, my hand closing around the base of his cock. I was no longer quite sure if the telepath was pushing me to do this as I bobbed my head and Jules squeezed my hair roughly. His hips bumped against my knuckles and his balls slapped my chin. \n\n\"Fuckin bitch,\" he snarled - the words too loud, too unforced to be real. I ignored them. \"Suck my dick. Bitch. I'm gonna skull fuck you.\" \n\nThe slick want between my legs grew more insistent. \n\nThen Jules' cock slipped from my mouth. I gasped loudly. \"Please...\" I whispered. His hand shifted. Pushed my head backwards. The cock leveled at my eye. My eye widened and the look of terror on my face was slapped there by the telepath...but it really didn't need to be. \"Don't...\" I begged. That cock slipped against my cheek. Then Jules shifted to the side. I felt a moment of relief. Then I felt his cock pressing to my ear. \n\n\"Don't,\" he hissed. \n\nHis cocktip pressed, gently, against the hole of my ear. My fingers tightened and my brain raced. There had to be a way to get out of this. But everything I did, every single muscle in my body, all of them were controlled by the telepath. Jules bumped his hips back, then mashed his cock against my ear hole. The pressure of his member made my ear ache, and I heard a quiet hiss of pain shoot through Jules. Pain! Maybe pain would- his cock smashed again, and I whimpered, my eyes filling with tears. My ear rang with the impact and I felt something hot and wet drip from my ears. \n\n\"Please don't,\" Jules snarled. \"Stop it!\" \n\nPain didn't stop it. He was hurting. He had hurt worse when he had slid that pen into his own kid's ear. \n\nWhat... \n\nHis cock pushed a tiny bit further in. The ringing in my ear became a scream. My eyes screwed up tight. \n\nElectrical impulses. \n\nNerves were electrical. And the new ability in my body wasn't a muscle most humans had. I had one shot. I looked down through a blurring mass of tears at the ground. Tile flooring, not metal. It'd have to work. I breathed in deep, focused through the pain, and let my electrical pulse out through my palms. Lightning surged along my body, crackling and popping. Jules whole body tensed and the hair of his goatee stood out like porcupine pins. He tensed, then fell backwards, the bleeding tip of his cock flecking my cheek with a mixture of fluids I tried to not think about too hard. \n\nBut I was slightly too focused on the pain of the lightning surging through me. Some of it had pulsed through my muscles, transmitted through the hand on my scalp and the cock in my ear. That connection was gone, and the pain faded as I wiggled my fingers, then slumped forward. I gasped. Jules was sitting up, groaning. \n\nTicktickticktickticktick! \n\nThe sound was receding. Though it was hard to tell - I could only hear out of one of my ears. \n\nThe telepath was fleeing. But as I tried to get my body to rights, I saw the three other stand up and march towards the back of the coffee shop. As they walked mechanically towards the back, Jules managed to rasp out. \"Stop them.\" ",
        "I pushed myself to an unbalanced, uneven stance. My inner balance was entirely fucked. I took a step and the whole world spun around me. I staggered to the back of the coffee shop and I saw the three other controlled people were standing before a blender. The older Asian woman had already turned it on and was calmly reaching for it - her fingers so close to the blades that skin was coming apart and blood flashing against the edges of the glass. I lashed out with my left hand. Lighting surged, then shot outwards and smashed into the lot of them. They writhed, twitched, then collapsed to the ground, smoking slightly. As they lay there, I gasped softly, trying to ignore the pain aching through my ear. The warm fluid dripping down my cheek. \n\nThe fact part of me was still kind of horny. \n\nThen the old woman whimpered. She put her hands over her face. \n\n\"Why did you stop me?\" She gasped between wracking sobs. \"Why did you stop me?\" \n\n### \n\nBlocking off the entrance to the TempleSoft Game Stop for Entertainment store was as easy as upending a tacky plastic statue, pushing a few metal shelves around, and finally, closing down the blinds. \n\n\"If it can't see us,\" Jules said, panting as he stepped away from the covered window. \"I don't think it can control us. But you scared it the fuck of. I've never seen anyone other than corporate using tesch.\" \n\nI smiled at him, then cocked my head. \"What?\" I asked, play-loud. \n\nIt was a terrible joke. \n\nEveryone burst out laughing. \n\nWhen I sat down next to the others, the pink haired girl (she had clarified that by introducing herself as Marisa) was sitting next to Amanda and rubbing her shoulder. The white girl was Tracy, and she had drawn her knees to her breasts, but was keeping herself from crying by whispering under her breath. \n\n\"First, I'm going to find out how many legs it has. Then I'm going to break then. One at a time. I'll let them heal. Then I'll break them again. Different this time. Then it starts on the death march...\" \n\nI looked from her to Jules. He had gotten his collar back on and used one of my nanite tubes to rebuild a suit. Simpler that the three piece suit - just a white shirt and jeans. He looked...I wasn't sure how he looked. It was a mixture between completely devastated and faintly amused. He forced the devastation away, a wry twist to his lips only accentuating his handsomeness. He had the most curiously angular face I had ever seen. \n\n\"So, we've told you our name,\" he said. \"What's yours? You from AzteTek?\" \n\nI shook my head. \"Cryonics. My name's full name is Beatrice.\" \n\nHe whistled softly. \"You're one of the corp...er...one of the cryogenics? What is your deal?\" He looked curious. \n\n\"I dunno, not really,\" I said, shrugging. I winced as my ear continued to ache. \"Anyone got a med kit or something?\" \n\nTracy cut out of her increasingly detailed monologue about what she was going to do to the telepath and looked at me. \"What's wrong?\" She paused. \"Oh. Right. Your ear.\" She moved forward and then looked at my ear - I had jammed a chunk of cloth from my backpack and wrapped it into place with a bit of nanites. I wasn't sure why the healing side effect of my nanite suit hadn't kicked in. But Tracy leaned close to my collar and tapped a switch on the back. The nanites on my chest shifted slightly against my skin, then projected out a holographic interface. Tracy worked quickly, tapping buttons and moving symbols around. \n\n\"I worked as a doctor,\" she said. \"The suit's self repair's set for minor shit. This is going to be cold, but it'll repair your eardrum.\" \n\nI smiled. \"Thanks Tracy.\" \n\n\"Don't thank me,\" she hissed, her face twisting with rage. \"You couldn't have showed up a fucking week ago when I was feeding my kid crushed glass?\" \n\nI flinched. \n\nJules put his hand on Tracy. \"It's not Beatrice's fault,\" he said. \"It's that thing.\" \n\nI nodded. \"Lucas, you still there?\" I asked. \n\n\"Oh holy shit, you know Lucas?\" Jules asked, sounding shocked. \n\nI frowned. \"He seems to be incommunicado. Maybe hacking into the security camera footage got him caught or something.\" \n\n\"The telepath doesn't work through computers - but the station's AI was co-opted by the Tesc when they broke containment,\" Jules said. \"By the way. The full name is Dr. Jules Verne Delecroix. I work in Heresy.\" \n\n\"Heresy?\" I asked. \n\n\"Sorry, in joke. I work in physics. We were disproving so much accepted scientific maxims - general relativity has been taking a beating, that if we had released any of this shit on the open networks,\" Jules said, chuckling softly. \"Well, we'd be branded as heretics.\" \n\n\"How can-\" Tracy's eyes bulged. \"How can you fucking laugh, you-\" \n\nJules shot a glare at her. \"I can laugh...\" His face twisted. \"Because goddamn that fucking thing isn't going to break me. I'm going to laugh and enjoy life and I'm going to mourn Jeremy when it's dead and I can dissect it.\" But despite his words, his eyes brimmed with tears. His voice grew choked. He put his hands over his face. I was about to say something when I felt the nanites - which had been quietly creeping towards my ear - flow into my ear canal like a flood of ice cold water. I gasped, kicking one leg. \n\nI'd have accepted far more pain for the effect it had on Marisa and Amanda - apparently, my face was hilarious enough to make both smile. \n\nJules slid his hands from his face. \"Still. Where the hell did you get fucking X-Men superpowers, Beatrice?\" \n\n\"Or are the megarich really able to do anything?\" Tracy asked, her voice sour. \n\nI shook my head. \"I don't- I got them from WepTec,\" I said. \"The labs in engineering.\" \n\nJules' eyes widened as he looked at me. \"You were in the Weaponized Tesseract Labs?\" \n\nMy eyes widened right back at him. I felt a sudden urge to vomit. My hands rubbed together. My heart pounded. No. That couldn't be right. Those labs were Weapon Technology. Right? But Jules looked at me with growing horror, and I saw that he realized what it was too. I scrambled to my feet, walking a quick five paces away - this brought me to a smiling poster of a store employee, the conversation bubble coming from his mouth telling me that I could buy anything I wanted half off using TSPM. I grabbed the poster and ripped it off the wall with a snarl. \n\n\"I didn't inject fucking Tesc shit in me!\" I said, spinning around to face them. \"I didn't!\" \n\nAmanda looked as if she thought I was going to start ripping her to pieces. The fact she looked fucking hopeful for that made my belly clench. My skin turned clammy. I closed my eyes. I would not throw up. I shook my head and then started for the back of the store. \"Wait here.\" I snarled. \n\nOnce in the back, I looked for an inventory. My fingers needed to reach into some mechanical guts - and a cool, contemplative part of my brain was working through what I'd need to stop the telepath. The only problem was that there was no inventory, no piles of boxes, no game consoles for me to pillage. Instead, the rear of the store had a pair of fabrication machines and a single computer terminal. I tapped it on. A password screen balked me. My fingers shook as I tried to tap out a request for computer components. \n\nThe computer screen turned red and informed me in a polite but firm way that another attempt to hack the computers would call station security. I snarled and felt lightning buzz along my fingertips, the urge to just blast this fucking thing into pieces almost overwhelming. But just as quickly as the urge came, it passed. I ducked my head forward, my eyes closed, my palms resting on the desk. I shuddered and felt hot tears burn along my nose and cheeks. They dripped onto the keyboard and I whimpered. \n\nI was scared. \n\nWeaponized Tesseract. \n\nI had injected that...into me... \n\n\"Hey.\" \n\nJules voice - a soft, male burr - made me jerk my head up. I wiped off a smeary mass of tears and snot from my face, sniffing furiously. I tried to look presentable as I turned to face him. He looked like he was trying to be calm - but that just drew my attention to how tense he had to be. He stepped over to me. \n\n\"It's okay,\" he said. \n\n\"No it's fucking not,\" I whispered. \n\nHis dark hand cupped my cheek. I remembered the feel of him slapping me and forcing me to my feet. No. Not him. The telepath. I trembled like a deer, ready to leap. But whether I was going to leap forward or sprint away wasn't clear in my head or heart. I looked into his warm, dark eyes as he murmured. \n\n\"It'll be okay. We'll get off this station.\" \n\nThe tone of his voice drew a shuddering sniffle from me. I breathed up and felt my nostrils clear ever so slightly. I hung my head forward, letting his palm caress through my hair. The simple human contact eased some fears - but accentuated others. \n\nI had put the needle to my skin. I had pressed the plunger down. Was I going to become like Maria? All bits and pieces and seductive intensity? The mental image of my body - twisted and made exotic and beautiful and terrible - straddling Jules face flashed through my mind. My cheeks darkened and I stammered. \n\n\"W-w-we will.\" \n\n\"And I have five hundred TSPM,\" Jules said. \"What do you need? I'll buy it from the kiosk.\" \n\nI lifted my head. He drew his hand away from my head. I felt the ache of its absence. But that part of my brain that knew how to rip open key panels and rewire their innards started to whisper out components. I licked my lips and then stepped backwards. I looked at the dispensers and then looked at the part catalog some helpful corporate employee had hung up. Just in case they had to fix one of their machines. I rattled off a few machines. Jules smiled and opened his mouth. \n\nThen he stopped. \n\nHe looked desolate. A deep, dark desolation that crossed over his face and remained there for some time. He looked down, then turned and walked out of the room. Quick stepping. I wanted to grab him and hold him. Tell him the same lie he told me. It was going to be okay. When he came back, the fabricators were already whirring away. Whatever they did was hidden behind sheet plastic and blackened glass. The only thing I felt was the warmth of the machines when I put my palms on their sides. But then the first game consoles came out. Ripping them apart was therapeutic. Jules handed me screw drivers and collected parts and listened as I let the words flow. \n\nIt was technological babble that I only half grasped. But listening seemed to keep that wry smile on Jules face. And working on the new problem let me not think about the problem after that one and the one after that and the one after that... \n\n\"Tell me about where you're from,\" I said, picking up a clump of wires, realizing that I needed two hands for this, and tucked the wires gently between my teeth. Jules shrugged slightly. \n\n\"France,\" he said. \n\nI opened up a component, then tilted my head. The wires were firm enough that I could at least get them settled. I looked at him - awkwardly, considering i was stooped over a mass of computer components. I grunted and he leaned forward, placing a single black finger on the wire tip, keeping it grounded. I let go with my teeth. \n\n\"You don't sound French,\" I said. \n\n\"Ah, do you want me to speak wiff an outragious french axscent, hua hua hua hua?\" Jules asked, drawing himself to his full height. I snorgled. Which was a noise I had never known I could have made - it was somewhere between a snort, a giggle and a sob. Jules laughed and shook his head. \n\n\"Ever since the Caribican Wars, there's been a lot of American expats in France,\" he said, casually. \"Best way to get away from the killing fields. My family adapted, but Dad never did learn French.\" He winced as I picked up one of the soldering tools. The acrid smell of burning metal wafted to my nose, as sweet as perfume compared to the stench of the rest of the place. I smiled at Jules. \n\n\"Everything I hear makes Earth sound so much nicer,\" I said. \"I just remember...\" \n\nMy mind flashed to it. The beautiful woman. Her bikini top slipping away. Her mouth pressing to mine. My cheeks flushed. \n\n\"What?\" Jules asked. \n\nI coughed, picking up one of the fifteen batteries I had managed to yank from the handheld systems I had forced Jules to buy - emptying his account. There was something grotesque in dropping months of work onto entertainment devices that I was going to immediately rip apart and rebuild...while both of us were trying to not think about how fucking hungry we were. \n\n\"A girl,\" I admitted as I slotted a battery home. \n\n\"A cute one?\" Jules asked. \n\n\"Uh, I mean, do big tits count as cute?\" I shot back, trying to sound casual - my cheeks growing darker. Jules smiled at me. \n\n\"Girlfriend?\" \n\n\"I have no fucking idea,\" I admitted. \"Hope not. Or if she is a girlfriend, I hope she's open minded.\" \n\nJules chuckled, quietly. \"If she's anything like my Marie, then she's seen at least one episode of Star Trek.\" His face fell, his mirth fading. \"What you do while under the influence of mind - or, ah, body control in this case - isn't your...fault...\" His voice grew soft. I put my hand on his shoulder. I felt the strength underneath and the past few hours of near death smashed into me with the strength of the fist of God. \n\n\"It wasn't that I was worried about,\" I whispered. \n\nJules looked up at me. His eyes were confused. My hand slipped along his bald scalp, drawing back to his neck, and I dragged him up and forward. The soldering gun slipped back into its wire holster as my mouth and his met. His tongue filled mine and for a moment, I didn't taste the scent of rotting corpses. I just tasted him. His black hands cupped and squeezed my pale, white ass - and for some reason, that excited me even more. \n\nBefore I knew it, we were on the ground. his hands were tugging at my nanite uniform, tearing chunks aside. The nanites flowed off his fingers and back into the mass of clothes until I broke the kiss and rasped a quiet order. \"Turn them off...\" \n\nThe collar, it turned out, didn't need any additional instruction. When Jules' desperate, seeking hand tugged the nanites off my breasts, they tore away like sticky paper, revealing my glistening, sweating skin and my diamond hard nipple. His beard tickled me as his mouth closed around the hard nub and he sucked. Hard enough to make me hiss. My back arched and I whimpered. \"Oh Jules...\" \n\nHis mouth drew back and he panted. \"We shouldn't, but-\" \n\n\"Fuck it,\" I snarled, grabbing his neck again. I drew him to my neck, then pushed myself forward and down, so that my mouth and his pressed together again. His tongue was even more insistent now, and my hands reached down to his hips. I tore at his nanites and they fell aside, revealing more dark skin. I had felt his cock in my mouth - fuck, I had felt it in my ear - but it still took my breath away when my palms caressed and cupped his black dick. I squeezed it and his mouth drew away from mine. \n\n\"Beatrice...\" he crooned. \n\n\"Fuck me, Jules,\" I begged. There was no other word for the desperate, hungry tone in my voice. My thighs spread as wide as they could, my hands grabbing onto his shoulders as I settled myself under him. There was no foreplay, no hesitation. Jules pressed his dick to the thin slit of my pussy - and while I was sure I wasn't, I felt like a virgin. I couldn't remember anything before - and the sensation of a married man plowing into me, filling me, fucking me, was so intense that it made my eyes fill with a white haze. My fingernails dug into his back and shoulders as I closed and locked my legs around his hips. \n\n\"Ohhhh...\" I whispered. \n\n\"You're so fucking tight,\" he hissed in my ear - his voice fraught with a complex melange of emotions. I could feel his tears drip onto my shoulder. But my eyes only saw the ceiling - looking past his head, my fingers caressing his back as his hips worked back, then slammed home again. His black balls slapped my ass lightly at first, then harder and harder as he started to work up steam. The ground creaked underneath us and I felt the first of my orgasms rushing towards me. My eyes closed and I moaned - wantonly loudly. But when I breathed in to moan again, my mouth didn't breath in corruption and filth. \n\nI just smelled him. \n\nJules planted his arms wide and started to use every bit of his sleek physicality. He was strong. He was flexible. He had stamina. And that stamina showed, as his cock plunged into my hot cunt again and again and again and he didn't cum. I had already climaxed once -- a dizzying sensation - but Jules didn't slow. Didn't stop. He gasped. Panted. Kept thrusting. My legs remained tight, locked around him. I wouldn't have let him stop, even if he wanted too. \n\n\"Oh Jules!\" I hissed. \"Oohgods yes, don't pull out, don't, ah, fuck, don't pull out!\" \n\nI didn't know why I needed him inside me so badly. But I did. I needed it bad enough for it to hurt. The idea of him not dumping both ballfulls of thick, white cum right into my womb made me want to scream. I squeezed him tighter - and felt Jules shudder. It was convulsive and body spanning. His whole form locked up and his eyes went unfocused as his balls emptied themselves into my cunt. The hot rush set me off again and I moaned like a damned soul. \n\nI felt him fill me. \n\nI felt his cum in my womb. I gurgled, unaccountably happy, my voice entirely deserting me as I clung to Jules. His arms grew weak and he sagged on top of me. The crushing weight of his musculars body made me squeak - but then Jules rolled to the side. His cock slurped from my sex. He lay on his belly beside me, his arms resting before his head, his head turned to the side as he looked at me. Looking at him, he seemed to be almost like an african God. \n\n\"That was...\" I whispered. \n\n\"A mistake...\" Jules said. \n\n\"Amazing,\" I purred. \n\nJules was silent for a time. \n\nThen, just as quietly as he had been loud before, he murmured. \"Amazing.\" \n\nI blushed, hard, my hand going to my sex, feeling the ache of being well fucked for the first time in my life. Cum dripped between my fingers. \n\n\"Is...Marie on the station?\" I asked. \n\n\"Yes,\" he said, softly. \"And for all I know?\" \n\nI looked at him. My eyes softened. \n\nDr. Jules V. Delacroix looked at me. His eyes were unreadable. But then he smiled slightly. \n\n\"Even if this was a mistake, and we never do this again?\" He took my hand, then squeezed it. \"I...\" he paused. \"F-Fuck, how can something wrong feel so good?\" \n\nI shrugged, then leaned forward. I kissed his knuckles. \n\n\"Ask me again, later,\" I murmured. \"I'm going to be testing - to see how good murder feels.\" I sat up. I grabbed the device I had been working on. I snapped a final component in, then looped it around my neck. The electircal imputs pressed to my skin and I flicked it on, grinning. \"Test.\" I said. \n\nMy body shuddered as a light electrical shock went from my neck to my toes and I felt my muscles go numb, then relax. I chuckled. \n\n\"Now,\" I said. \"Lets see if this can break a telepath's control.\" \n\nJules sat up, watching me. \"Mon Cherie?\" he said, stopping me before I left. He smiled at me. \"Thanks.\" \n\nI saluted him. \n\nThen left. \n\nThere was a telepath to hunt. \n\nTO BE CONTINUED"
    ],
    "authorname": "DragonCobolt",
    "tags": [
        "mind control",
        "telepath",
        "psychic",
        "oral",
        "cheating",
        "adultery",
        "bbc",
        "interracial"
    ],
    "category": "Erotic Horror",
    "url": "https://www.literotica.com/s/mind-games-ch-03"
}
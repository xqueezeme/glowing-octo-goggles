{
    "title": "Celestial Matters",
    "pages": [
        "Let there be Light\n\nWhen your chamber grows cold, and your hearth grows wane, know that creatures abound who be most profane. Demon's they be, the denizens of hell, heed my words lest you be taken by their spell.~ An excerpt from Alexander Morningstar's 'Celestial Matters.'\n\n-------\n\n(Paris 1623)\n\n-Devnik-\n\nThe sun had set, and with it passed the pretense of nobility.\n\nThe sin that its golden light held at bay ... was now free to come out and play. The moon hung in the air ... and the fresh smells of a new night were intoxicating.\n\nI inhaled deeply of that heady aroma.\n\nThe city howled around me ... crying out the passion and seduction that could be enjoyed by any who desired. Tavern owners opened their doors and tapped their barrels of wine. Whores applied sensual paints to their faces, hoping to catch the eye of a wealthy patron. Beggars filled the street corners ... their hands raised and their heads lowered.\n\nThe city has readied itself to receive them ... and finally, they had arrived. The aristocrats of Paris were on the prowl. Gold jingled in their purses and thoughts of temperance were far from their minds.\n\nIt was perfect.\n\nI set out from my place of rest with my cloak adorned and my cuffs buttoned ... I was ready to partake of the nightly sin that humanity had to offer.\n\nThe cobble stone road clicked delightfully under my heels. Men and woman swarmed the streets. Revelry was audible from every tavern ... passion tangible from every brothel.\n\nI had a specific establishment in mind for the evening's delights. A noble I had taken a particular shine to had recommended it last night at the opera.\n\nThe brothel was called 'The Rosy Garter.' It was one of the nicer places in town. My outfit was assembled to reflect the latest in fashions. A black cloak with a vest and a red cravat.\n\nThe door to the house of ill repute was closed, and a burly guard stood at the ready. His hand rested on the pommel of his weapon. A scar decorated his face, giving his appearance a sense of experience.\n\nA gold coin was enough to buy a smile from him, and allow my admission.\n\nI stepped smartly across the threshold.\n\nPublic housing was a wonderful thing.\n\nAn old woman confronted me at the door. She walked with steps that belonged to one far younger than she ... yet despite her artfully applied rouge the lines on her face were obvious. Her dress was modest and her expression imperious. She could be no other than the Madam of the establishment.\n\nShe took one look at my arrogantly expensive clothes and began to fawn over me. I gave her my most charming smile ... and she tittered like a woman twice younger than her age.\n\nI kept my gaze about the room. I had to make sure not to make eye contact. At times when I am calm my eyes are burgundy ... almost passable for brown, but when my power comes to the fro ... my eyes glow red ... bright red.\n\n\"Good evening Madam,\" I said in my most alluring tones, \"I seek the pleasures that only your house is known for.\" She bowed low, \"Of course Monsieur, I believe you will find my hospitality most enjoyable.\" \"Thank you,\" I purred into her ear. I slipped a gold coin into her hand.\n\nHer calloused fingers knew the feel of a livre without the benefit of sight.\n\nShe smiled. She looked like a cat who ate the canary. She turned to a serving wench who was passing by with a round of mead.\n\nShe spoke slow soft French. \"Fetch Maria for me.\"\n\nI returned my eyes to my surrounding and looked around the room. It was quite opulently furnished. Reds and golds lay out amongst the couches. Goblets made of pewter stood like soldiers on the polished tables. Pretty girls flitted from man to man ... looking for someone to end the night with her in her bed chamber.\n\nBut the mark that made this establishment superior was that nothing overtly sexual was going on. Men flirted with women, and everyone was drinking but there was no groping or even any drawn out kissing.\n\n\"Good evening sir.\" said a sultry voice from behind me.\n\nI turned.\n\nMy breath caught, and my silver tongue failed me.\n\nShe had flowing golden hair that was straight yet thick. It tumbled from her head and framed an alabaster face that could not have been more perfect ... more enthralling. A tight red dress clung to gentle curves. Her corset did not look as if it was strung to tightly, as many of the other whore's did. I bent low, and placed a light kiss upon her hand.\n\nMy lips tingled.\n\nI was already savoring the sweet struggle this girl would give me.\n\nI raised my head, and gazed into her eyes ... they were the shade of polished silver.\n\nShe giggled at my theatrics.\n\n\"A most splendid evening it is,\" I replied. \"Might I ask the name of the goddess that stands before me?\"\n\nShe giggled slightly. \"My name is Maria,\" she said, her voice dripping sex.\n\nI sighed softly. \"Sweet Maria ... I came here looking for nothing more than a conversation to keep the lonely hours at bay, but after seeing you, I'm afraid I must ask if you offer more ... intimate services?\"\n\n\"Why yes I do Monsieur,\" she said, doing a cute little twirl.\n\nHer blond hair danced briefly as she spun ... she smiled at me.\n\n\"Follow me then Monsieur,\" Maria said, \"My chambers are upstairs ... I feel that that would be a more comfortable setting for aiding you against your loneliness.\" She grabbed my hand, and I followed her up the marble stairs.\n\nHer room was apparently at the end of the hall. It was also the only one that I could see that had double doors. She let go of my hand to open the door. She stepped through the frame gracefully.\n\nI eagerly tried to follow.\n\nI promptly hit my head on an invisible wall. I stood looking the fool outside of the doorway.\n\nDamn.\n\nShe actually slept here and considered this room her home. That made these four walls her residence. I couldn't come in uninvited.\n\nMaria turned her beautiful face around to peer at me. Her eyes betrayed her puzzlement. I'm sure no man had ever hesitated to enter a bedchamber with one as pretty as her.\n\n\"Well?\" she said.\n\nI tried my best to look nonchalant. \"Forgive me, milady, but I do not enter a lady's abode without her permission.\" She laughed ... a real laugh. \"I like you Monsieur, but I am no lady.\" She paused, watching me simply stand outside her room.\n\n\"Oh very well.\" she said, as if suddenly annoyed. She put on a false aristocratic accent. \"Enter good sir.\" She said dramatically.\n\nThe wall vanished. I stepped in.\n\nThe room mirrored the opulence down in the drawing room. A red canopy bed occupied the entire room. Silks and other soft and feminine things were artfully arranged across the walls.\n\n\"My dear,\" I said, \"Your chambers would say that you are a lady.\" I layered my voice with demonic influence.\n\nAt my charmed statement, her face soured.\n\n\"Yes, currently I have the honor of the Queen's suite,\" she said tensely, \"But as soon as someone prettier than I comes along, I will soon be serving beer along with the other aging sows.\"\n\nMaria blinked suddenly, and cast a furtive glance at me ... as if suddenly remembering that I was a customer and not her confidant. Her face dropped to the floor for a moment.\n\nShe looked back up at me demurely. \"Forget I said anything Monsieur ... don't worry about my problems. I'm here to take care of you, not the other way around.\"\n\nShe stepped up to me, and placed her cherry lips to mine. Lips that felt too good to be of this earth, the best kiss I had ever had.\n\nMy sluggish mind slowly made sense of the clues that I had been ignoring.\n\nNo human has silver eyes ... no human could have enraptured me like this one had ... no human kiss could leave me speechless. I quickly pulled the young girl off me. She gave a startled yelp. I grabbed her shoulders and lifted her off her feet like a kitten. She struggled wildly, her eyes wide and fearful.\n\nI shoved her against the wall to still her.\n\n\"Are you an Angel?\" I asked her softly. My calm tones betrayed my inner fury.\n\nMaria tittered nervously from her place against the wall. \"You're sweet.\" She said.\n\nShe acted like she didn't know ... like I hadn't just caught her in the act of her deception. She probably had a blessed blade nearby, ready to cut my heart from my chest.\n\nI shook her. \"I know you're an Angel!\" I practically shouted at her.\n\nHer face was panicked now, \"Your eyes ... something ... something's wrong with your eyes!\" She said.\n\nI could feel my powers stirring. I hadn't used them in over a week, but they were rising. I imagined my eyes would be glowing red. Soon my shadow would start to grow and the room would get cold.\n\nMaria broke out into a sweat. Her eyes were wide with fear. \"What ... what are you...?\" she asked, voice barely more than a whisper.\n\nHer obvious confusion stilled my anger. She really didn't know ... she thought she was human. But I knew that couldn't be true.\n\nShe wasn't an angel. An angel would have fought back by now.\n\nThe window panes began to frost over and the candles began to dwindle.\n\n\"I am a demon, my child.\" I said, in as soft as candor as I could muster. I let go of her, and she slumped down the wall till she hit the floor.\n\nTears began to fall from her eyes, the lusty seductress was gone, in her place, a eighteen-year old looked very scared. She clutched her arms to her chest.\n\nShe looked up at me ... and shivered.\n\n\"Our Father, who art in Heaven, hallowed be thy...\" I quickly cut off her prayer by clapping my hand on her mouth. My ears had started to bleed.\n\nNormally listening to someone pray didn't provoke such a strong reaction. More like being sea sick. When she began to pray though, it felt as though someone took a pick to my ears. Human prayer couldn't do that.\n\nThey were too full of sin and faithlessness ... but this girl...\n\n\"I would appreciate it if you would not do that.\" I said. She sobbed around my hand. Her silver Angel eyes looked up at me pitifully. I cautiously took my hand away. She gazed at me, no longer crying, just sniffling.\n\nHuman fear on an Angelic face ... she couldn't be anything else.\n\nI leaned down and placed my hands on her flushed cheeks, \"Look at me Maria,\" I said softly.\n\nHer silver eyes darted away to stare at the floor.\n\n\"Maria...\" I whispered, \"You're a Half-Angel.\" She cringed away from me like I was a monster ... I smiled indulgently down at her. After all ... I am a monster.\n\n\"Half Angel,\" she whispered.\n\n\"Well, the correct term is Aethling, but yes.\" I said with the same grin on my face.\n\nMaria's fear quickly turned to indignation. Her surprise at my display had dissipated ... and in its place stood righteous fury.\n\nShe slowly climbed to her feet, drew herself up, and took a deep breath.\n\n\"Demon,\" she said in a quivering voice, \"If you are not going to hurt me, I would like to ask you to leave.\"\n\n\"I am afraid you can't make me leave, Maria.\" I said with a chuckle. \"You gave me an open ended invitation ... I can stay as long as I want ... and you, are fascinating.\"\n\n\"I don't believe you ... Angels live in Heaven, and I can't be the daughter of one.\" She said softly.\n\n\"Have you never felt the powers in you? The force that turns violently deep inside? Powers that demands to be used ... to be acknowledged\n\n\"Powers? ... no ... no ... I am a prostitute for God's sake,\" she said. \"I was called to serve you by Madame because you looked rich ... now ... now this.\" She said shakily.\n\nI was barely listening to her quibbling. This was the first time I had ever stumbled upon an unaware Aethling.\n\nI had been rather bored lately. Perhaps this would serve to amuse me for a time.\n\n\"Hmm ... I wonder if Aethlings are like Tithlings.\" I wondered aloud.\n\n\"What's a Tithling?\" She asked, after a bout of hiccups.\n\n\"Half demon,\" I said absently, deep in thought Tithlings required exposure to magic in order to awaken to their potential, if Aethlings were the same, I could Awaken her right now. Though I doubt an Aethling has ever been Awakened by Demonic magic before.\n\nI sighed ... and strode over to Maria, and placed my hand on her head.\n\nShe quivered.\n\n\"Brace yourself,\" I said softly, \"You might not enjoy this.\" A flash of red light erupted from my palm.\n\n -------\n\nAethling\n\n~The most noble creature I have ever seen is an Angel. Their bright silver eyes are enchanting, and to hear one speak is enrapturing. My life has been miserable since that meeting, because when I was in the Angel's presence I knew joy like no other.~ The suicide note of Lord Brenon\n\n-------\n\n-Maria-\n\nIt felt like fire was ripping through my body.\n\nThe pain was so intense that my mind couldn't process it. It felt like invisible flames were in my blood, in my very soul. It was all coming from HIS hand.\n\nThe demon's hand. The aristocrat with the bright red eyes and the face of an angel. All I could see was red. I could feel my consciousness ebbing. The black was beginning to close in on the crimson. My last thought was to start screaming, but I never managed to.\n\n-------\n\nI could hear the sound of water dripping.\n\nDrip Drip Drip ... it was so cold...\n\nI tried to open my eyes. They were crusted shut with dry tears ... funny, I don't remember crying. I tried to open them again. This time I met with more success. Yet I might as well have kept them closed.\n\nIt was dark and cold. And damp. Very damp. This place felt earthy and I didn't like it. It made me feel ... cramped.\n\n\"I see you're awake my dear,\" said a voice from the darkness.\n\nA candle suddenly burst into life, all on it's own.\n\nThe face of the demon was suddenly visible. Candlelight flickered over his face ... his perfect face.\n\nPerfect except for his eyes.\n\nHunger and evil stared out from those twin crimson orbs. They still burned with a bright red light ... and they looked ... hungry.\n\nI quickly scooted back until I hit a rock wall; in the back of my mind I realized this must be a cave.\n\nHe gave a little smile, as if amused.\n\n\"My dear, you have nothing to fear from me,\" he said, his voice comforting, like a priest giving a confession. He sounded understanding, and calm ... he sounded like ... safety.\n\nI shook my head vigorously.\n\nI racked my mind for something to aid me.\n\nI remembered a line from the Bible.\n\n\"Get behind thee Satan!\" I screamed. He chuckled.\n\n\"My dear, you're lucky it's just me, for I am certainly not Lucifer ... your situation would be most dire if he sat before you.\n\n\"I know you're not ... THE Satan...\" I mumbled, \"but I thought, I thought I could...\"\n\n\"Drive me away with archaic words?\" He supplied.\n\nI nodded lamely.\n\nHe chuckled again. \"Well, my dear. Three things that prevent that little plan.\" He began.\n\n\"One, you're on unholy ground.\n\nTwo, that doesn't really work unless you're holding a cross.\n\nAnd three, since I am neither in your dwelling nor a church, a demon of my caliber is not put off by holy muttering and groveling.\"\n\nI hardly heard him. I was too busy looking at his eyes. I gave myself a little shake. I got some blond hair in my mouth as a reward.\n\n\"Where are we?\" I asked.\n\n\"Why, this is one of my homes,\" he answered. \"This cave is on the de-consecrated ground of an old Christianity sect from two hundred years ago.\n\nI nodded as if I understood. He looked at me carefully.\n\n\"By the way ... how are you feeling?\" he asked.\n\nHis demonic eyes trained on my face.\n\nI spluttered a bit. \"Why ... why do you ask?\" I responded.\n\n\"Well,\" he began, \"If all went well, I would expect you to be awakened by now.\"\n\nI looked at him, trying to convey confusion in a glance.\n\nHe sighed. \"Maria,\" he said. \"You're an Aethling ... a half angel.\"\n\nI continued to stare.\n\n\"Tithlings and Aethlings both require a surge of magic to awaken their immortal side.\" He explained. \"Now I wasn't sure if an Aethling could be awakened with demonic power or not ... but I was curious enough to try.\"\n\n\"Well I don't feel any different,\" I said, taking a quick inventory of all my bits. I seemed to be a perfectly functioning eighteen-year old HUMAN girl.\n\nHe frowned...\"Well you see that is just it, I've never awakened a Tithling or an Aethling so I have no idea if you would feel different or not.\"\n\nHe began pacing the small cave. The candle still flickered, making him look like a big black shadow going back and forth.\n\nBack and forth ... it was hypnotic.\n\nHe suddenly spun around.\n\n\"I know,\" he said. He reached into a leather pouch that hung on his waist. Quick as a cat he tossed something directly at my face. I caught it reflexively ... and dropped it just as quickly ... it felt like he had just tossed me solid fire.\n\nI looked down at my hand. It was red and raw with blisters ... I cast my eyes down to the rock floor, expecting to see a glowing coal smoldering at my feet.\n\nInstead all I saw was a small jade pentagram with a string attached to it. Presumably so that it could be wore around a neck.\n\nHe was smiling smugly. \"That sting a little?\"\n\nI choose to ignore him. I tepidly touched the pentagram with my pointer finger. As soon as I touched it my finger felt seared. I could even see a little smoke coming from it.\n\nHe was laughing now ... a deep and somber sound. \"Those that belong to the light can't touch our symbols,\" he said between laughter. \"I did it. I awakened you...\" He was beaming at me.\n\nI looked down at my hand. The blisters were already starting to fade...\n\n\"Impossible...\"I muttered to myself.\n\n\"Apparently not.\" he said. He stopped. Then looked thoughtful again...\"Come stand by the candle,\" he said.\n\nI didn't really want to, but somehow my feet were suddenly under me, and I was walking over toward the candle.\n\n\"Stand still,\" he said.\n\nThen he stopped, and it looked like he was directing his gaze to the wall behind me. He smiled again.\n\n\"You don't cast a shadow,\" he said smugly.\n\nI twisted around quickly to look at the cave wall. I could see the shadow of the demon, but there was no black outline of me.\n\nSomething in my head snapped I spun on my heels towards him. And I punched him with all my might in the face. Surprisingly, he went flying backwards into the cave wall, then dropped straight down onto a stalagmite.\n\nThere was a wet sound.\n\nI quickly ran up to him.\n\nHis torso was impaled about the sharp rock. Near his abdomen Had I ... killed him?\n\nBlood slicked the stalagmite, and crimson was spreading onto the dark cave floor...\n\n -------\n\nThe Way Things Are\n\n~Hey doo doo, hey dee dee, gather round and listen to me. When the sun comes up you've no reason to cry, the demons all run, from that orb in the sky. But before the night, be safe in your home, and invite no strangers in if you are alone.~ Forgotten Children's Rhyme\n\n-Devnik-\n\nI had only had the pleasure of being impaled once before. And that was on a battle field during the Crusades, when a warrior priest named Daniel Fleeting ran me through with a sword blessed by Pope Urban.\n\nNeedless to say, landing on a stalagmite after being punched by an emotional teenage half-breed was nowhere near as dignified.\n\nThe pain, however, was excruciating. I must have blacked out, because I was now facing down in a sizable pool of my own blood.\n\nI tried to move around the rock. Nothing, it was firmly stuck. I looked up. The beautiful adolescent Aethling was standing in front of me in my poorly lit cave. Tears fell freely from her pale face.\n\n\"Are you going to live?\" she asked, her voice trembling\n\nI groaned in the affirmative.\n\n\"Good...\" she paused...\"you stole my shadow you bastard,\" she said finally ... though this time it was barely more than a whisper.\n\nI couldn't help laughing, even though most of my diaphragm had stalagmite through it.\n\n\"I didn't do anything to your shadow, little girl.\" I said with a sneer. \"It's what you are ... creatures of the light do not cast shadows.\" I said between moans of pain.",
        "\"Undo it.\" She said.\n\n\"What?\"\n\n\"UNDO IT!\" she screamed. \"Change me back, make me human again.\" She sounded hysterical\n\nI was confused ... she wanted to be human? ... Interesting.\n\n\"You're much better off now,\" I said, while slowly easing off the stalagmite.\n\nWet sounds of gore echoed off the cave walls. I tried not to look at my destroyed body.\n\n\"No, no no no no,\" she cried. \"I was normal, I had life all figured out,\" she blubbered, tears fell full force down her flushed cheeks.\n\n\"You were a prostitute,\" I said nastily, \"That's hardly having life figured out.\"\n\n\"But it was my life,\" she shrieked, \"I climbed my way up from the gutter as an orphan. And I worked for years as a scullery maid til one man offered me ten silver for a night with me. The money was so good that the next day I tried to get into all the brothels in Paris.\" she was sobbing again, the anger had left her voice.\n\n\"I sold my body so I could eat ... so don't you tell me what I don't have figured out.\"\n\nThere was a lull in our conversation. The candle had almost burned down. Leaving the cave in a faint orange light. Water droplets pattered down the rock walls. Maria shivered, and clutched her arms to her chest.\n\nWith one last effort I pulled myself free of the stalagmite, however, my weak knees promptly deposited me onto the cave floor. I grunted as my back met the ground.\n\nShe looked out from behind her tangled blond tresses. \"You know, for a demon you're pretty pathetic.\" she said. She seemed to have gotten over her terror of me. Now she made fun of me like I was her brother.\n\nI liked the terror better\n\n\"It took a lot of my powers to awaken you, you little trollop.\" I said, trying once again to get my footing. I managed it this time. But I leaned against the cave wall to catch my breath.\n\nShe looked at me puzzled. \"That wound would have killed a man.\"\n\nI tentatively poked the hole in my stomach. \"Yes it would have, but for me, it is merely incredibly painful.\"\n\nShe eyed my wound now. \"Will it heal up?\" she asked.\n\n\"Yes.\"\n\n\"When?\"\n\nI sighed. \"It would have started immediately if I had all my powers,\" I said, \"in my current state it will probably take all day.\"\n\nShe looked startled. \"You mean it's day time?\" she said, sounding shocked. \"I've been asleep all night!\"\n\nI couldn't help but smile at her.\n\n\"No dear,\" I said. \"You were asleep for five days.\"\n\nShe looked faint again.\n\nI really couldn't blame her.\n\n-------\n\n-Maria-\n\nI was just a little bit dizzy.\n\nFive days ... but it seemed like just minutes. I glanced down at my hand again.\n\nThe blisters had healed.\n\nI was still shocked that I got them from touching a pentagram. Apparently that's something else I can't do.\n\nI looked past my hand to the groaning demon on the floor. He was lying face up, staring at the roof of the cave. His hand was gently resting on the dinner plate sized hole in his stomach.\n\nHe suddenly coughed, and spit up a large amount of blood.\n\n\"Gross,\" I said before I could stop myself.\n\nHe turned his head slightly so he could make eye contact. His red eyes pulsed with displeasure.\n\n\"Oh, I'm sorry mademoiselle, but maybe next time you could not strike me into pointy objects during a perfectly polite conversation,\" he said.\n\nHe apparently hadn't lost any of his sardonic charms.\n\n\"Sorry,\" I replied. I could hear my voice shaking. \"But, I thought ... well I mean you flew so far ... and.\" I trailed off.\n\nHe winced. \"Enhanced strength is part and parcel of your knew state of being. I've been trying to tell you what it means to be an Aethling and belonging to the Light.\" He said. \"If you weren't too worried about missing something as insignificant as a shadow I could have told you that.\"\n\nHe paused.\n\nI smiled. \"I like the way I made the discovery much more...\"\n\nHe coughed up more blood. \"Yes I imagine you did,\" he said.\n\n\"Anything else I should know about?\" I ventured.\n\nHe smiled, \"Don't try and lie.\" He said mysteriously.\n\nI blanched. \"Why?\" I demanded.\n\nHe smiled again. \"Tell me a lie then, my dear.\" He said sweetly.\n\nMy mind drew a blank, how often did someone ask you to lie to them?\n\n\"Um, I don't know, what should I say,\" I asked quietly.\n\nHe paused. Then a big toothy grin appeared on his all too perfect face. He cleared his throat of excess blood.\n\n\"My dear,\" he began, \"tell me that you enjoy being a lady of the night.\" His smile was positively evil now.\n\nHe looked at me expectantly...\n\nI was not worried.\n\nI couldn't keep track of how many times I had told fat slobs that they were gods beneath my sheets. I couldn't remember how many times had I told men too drunk to become erect that they satisfied me.\n\nI drew myself up.\n\n\"Monsieur,\" I said, \"I enjoy being a prosti...\" The words died in my mouth. My throat felt dry, and a dizzy spell had come over me.\n\nI put my hand against the cave wall to steady myself.\n\n\"Not so easy is it?\" He said lightly.\n\nI glared at him, and took a deep breath, and tried again ... I didn't even get the first syllable out. As soon as I even thought of lying my stomach did flip flops. Before I knew it I was throwing up. Not having eaten for five days, there wasn't much.\n\nThe demon was practically giggling.\n\n\"Let's try not to do that again, my sweet.\" He said playfully. \"This cave floor is already filthy enough,\" he said, eying the circle of blood around the stalagmite.\n\nI was beyond furious now.\n\n\"Why can't I lie to you?\" I screamed. I was balling my fists and carrying on like a little girl ... but I didn't care.\n\nHe took a breath. \"Lying, is another thing that those who belong to the Light can't do,\" he said. \"At first you just become short of breath, then as it would appear you become sick.\" He continued. \"I imagine if you tried to lie again you would pass out.\"\n\nI was beyond shocked. I was trying to imagine a life where I could not lie ... ever. It did not sound like a pleasant existence.\n\n\"Is there ... well, anything else I should worry about?\" I asked ... afraid to know the answer.\n\nHe shrugged. \"I don't know of any other physical draw backs to being an Aethling or belonging to the light...\" he said.\n\n\"But there are some benefits that you might be interested in.\"\n\nI didn't care about my benefits ... my shadow was gone, I couldn't lie, and I had to be careful not to touch any demonic jewelry.\n\n\"What are the benefits?\" I asked glumly.\n\nHe smiled, \"Well, for starters, eternal life.\"\n\nEternal life ... wow I thought...\n\n\"You mean, I won't ever die?\" I asked.\n\n\"Correct, you will never age or die ... unless something kills you.\" He said.\n\nI paused, thinking.\n\n\"Wait, you mean I'll be eighteen for the rest of eternity!\" I shouted.\n\nHe looked sheepish...\"Correct.\"\n\nI fumed at him...\"What else?\" I asked.\n\nHe thought for a moment.\n\n\"You probably have some sort of 'holy' powers at your disposal ... but I couldn't tell you what those are,\" he said.\n\nI rolled my eyes ... he was no help at all. The demon slowly picked himself off the ground ... and staggered his way across the dingy cave. He collapsed into a black armchair. A chair that I was sure hadn't been there before. He put his head in his hands.\n\n\"This is more trouble than I thought it would be,\" he said quite pathetically.\n\nI felt like fighting...\n\n\"Why? Am I more effort than you thought I was going to be?\" I growled...\"Don't want to put up with me anymore?\"\n\nHe looked up at me with unfocused red eyes.\n\n\"No, it's not you,\" he said. \"Though you're certainly not behaving yourself.\"\n\n\"What then,\" I said sarcastically.\n\nHis head returned to his hands...\n\n\"Well,\" he said, \"It's just that there is an Angel outside ... and if I am reading her right, she's not very happy with me.\"\n\n\"Oh,\" was all I could say.\n\n -------\n\nVisitor\n\n~May the enemies of the Dark find no place of rest in the dreaded day. May they never know carnal pleasure, or the beauty of a cold night. May they be cursed with a mortal life. May they be chained to the bidding of an uncaring God.~\n\nPrayer of the Dark Acolytes\n\n-------\n\n-Devnik-\n\nThis truly couldn't have turned out worse. I thought, as a stared at my lone candle lighting the cave from my chair. There was an Angel outside. That was certainly bad. There was an angry angel outside ... that was really bad.\n\nI took a few deep breaths, which only served to aggravate my wound.\n\nThe gaping hole had dwindled from dinner plate size to roughly tea coaster size. There was no way I could fight an angel when I was drained of all power and sporting a stomach wound.\n\nStrangely, however, she had made no move to enter my little cave. I searched for her with my mind ... she was sitting peaceably next to a stream just outside the entrance.\n\nI leaned back in my chair.\n\nI glanced at my little rebellious Aethling. She was crouched in a corner, staring at her feet. She hadn't said a word since I told her we had a visitor.\n\nThe Angel seemed rather ... calm ... I thought ... though even from here I could sense an underlying fury. I wonder if she knew who I was. Hopefully she didn't, that could lead to more than one problem ... if possible I would wait out the day. My wound would hopefully be healed by then, and the sun would not be an issue.\n\nA voice suddenly rang out in my head.\n\n{Send her out}, the voice said with barely contained rage. I winced telepathy always gives me a headache.\n\nI tried to summon enough power to communicate.\n\n{What business do you have here little angel, } I said, trying to sound as intimidating as possible.\n\n{Just send her out, I have not come to do battle.} The voice replied, suddenly sounding weary.\n\nI thought for a moment ... my experiment was in all actuality concluded. I had satisfied my curiosity of whether or not an Aethling could be awakened by a demon ... Though as I thought about it, angels must have quite a bit of raw power. I still felt rather drained after performing my little Awakening. The sniveling girl curled up in the corner of my cave suddenly felt like quite a burden.\n\n{I will do as you ask, } I replied mentally.\n\n'Hurry.'\n\nI stood up quickly. I was pleasantly surprised that my wound hurt less. I pointed at Maria.\n\n\"The angel wants to speak with you, my dear,\" I said.\n\nMaria looked up at me, dried tears clung to her face ... she looked exhausted.\n\n\"Is she here to take me to Heaven?\" she asked, in a monotone.\n\n\"I don't know,\" I replied.\n\n\"Oh\" ... she said...\"Is she here to send you back to Hell?\"\n\n\"No,\" I replied...\"She just wants to talk to you.\" This entire conversation was becoming tiresome.\n\n\"Which way is out?\" She asked.\n\nI pointed to a gap in the rock wall that led to the entrance. Without response, she slowly trudged out of the chamber, and disappeared into the mouth of the cave. I slowly sat back down in my chair, and leaned back.\n\nFeeling quite relieved.\n\nI quickly fell asleep.\n\nThe candle went out.\n\n-Maria-\n\nThe passage out of the cave was long and winding. I constantly tripped over loose crags as I tried to navigate my way to the surface. It was getting lighter though. With every step I took I felt as if a burden was being lifted from my shoulders. I was invigorated. I marched with a new determination, eager to get out of the demon's cave. And even though I didn't like the idea ... I was happy to meet someone who was the same species as I was ... well, half the species I was.\n\nThe light blinded me as I stepped out of the cave. Everything seemed so bright. Everything seemed so beautiful. The air was crisp and clean. The warmth of the sun bathed my face, and gave energy to my limbs.\n\nI took a breath of fresh air and sighed.\n\n{Seems you've been in that cave too long.} came a voice ... from ... inside my head?\n\nI quickly scanned the small field. A young woman with strawberry red hair was sitting on a bank, dangling her feet in a nearby stream.\n\nI made my way across the field, until I stood directly behind her.\n\n\"It's nice today, isn't it?\" she asked. Her voice had a dreamlike quality to it.\n\nA candor that could put you to sleep.\n\n\"Yes, it is...\" I agreed. \"I wonder why I haven't ever stopped to appreciated days like this.\" I said. I looked up at the clouds in sudden wonder. They were white fluffy things, moving slowly in a breeze I couldn't feel.\n\n\"Sit with me,\" she said, her voice soft.\n\nI pulled up my rather dirty white shift to my knees, and sat down next to her. I put my feet into the stream. The water was cool. My body tingled.\n\nThe woman still hadn't looked at me.\n\n\"The water is refreshing isn't it?\" She asked.\n\nI simply nodded.\n\nI was looking at her face. She was staring off across the stream, but I could still see the side. She had very pale cheeks, along with flowing locks of light red hair. Hair that seemed to move even without the aid of the wind.\n\nShe had silver eyes.\n\n\"Would you like to know my name Maria?\" she asked calmly. Her gaze was still fixed on the other side of the bank where sheep grazing. In the distance a sweaty farmer was painting his barn.\n\n\"Yes,\" I said, \"I would like to know your name.\"\n\nThe conversation lulled for a minute. Birds flew overhead, trilling sweet songs as they flew to warmer climes.\n\n\"My name is Cariel...\"she said.\n\nAnother pause...\n\n\"Are you an Angel,\" I blurted out.\n\nHer face remained tranquil at my outburst.\n\n\"Yes,\" she said in her dreamlike voice. \"I am what humans call an Angel.\"\n\nWe stopped talking again. For a time we watch the trees rustle, and listened the gentle sounds made by the lambs across the water. Everything seemed so peaceful. Everything seemed so perfect.\n\n\"Do you know why I'm here Maria?\" She asked\n\n\"No Cariel,\" I said...\"I don't know why your here.\" I felt like I was in a trance. Her presence made things seem ... less real.\n\nShe turned her face to the sun.\n\n\"I'm here because something awful has happened,\" she said, her tone never wavering, her voice impassive.\n\n\"What?\" I said, already knowing the answer.\n\nA fish jumped out of the stream, startling me.\n\nCariel seemed unaffected.\n\n\"Why ... you were awakened Maria ... you were awakened far before your time ... the scripture says that no Aethling shalt ever be Awakened before two decades since birth ... lest they be a child forever,\" she said. Her tone sounded as if she were reading something incredibly tedious.\n\nI swallowed hard.\n\n\"So, um, I've broken the rules of Heaven?\" I asked tepidly.\n\nHer face finally turned, her silver eyes met mine.\n\n\"No, dear child,\" she said. \"The Demon is fully to blame for your misfortunes.\"\n\n\"But, being eighteen forever won't keep me from Heaven ... right?\" I said.\n\nHer eyes showed something close to pity ... then it was gone.\n\n\"No, being eternally ten and eight will not be what keeps you from Heaven.\" She said. \"There are two Aethlings in history who have been Awakened before their times ... they were accepted lovingly into the fold. One was ten and nine. The other ten and one.\n\nI was confused. \"Then, what keeps me from being like them ... why can they go to Heaven?\n\nI caught another glimpse of the pity in her eyes.\n\n\"Your Awakener, is what bars Heaven from you. She said.\n\n\"So I was awakened by a Demon, what does it MATTER! I shouted...\"I am just the same as any other Aethiling ... right? I ended hesitantly.\n\n\"Physically yes. But differences lie elsewhere.\" She said.\n\n\"So whats the problem?\" I asked. \"STOP being so vague!\" I yelled.\n\nCariel sighed.\n\n\"Relax my Sister in Light, for you to understand, I must wax you a story.\" she said ... I grumbled. \"Several thousand years ago the first Aethling was born. His name was Yadrial ... Yadrial was born just as you were. Human in every aspect ... until on his twentieth birthday his mother visited him. She was distraught and angry. She had never been able to see her son, or even talk to him. Her superior officers would not allow it. So she traveled down to Earth one night, during the winter solstice, when Heaven is always at its weakest. And she met her son.\n\nHe was a Sheppard, but he was discontent. When he met his mother, he lusted after her angelic powers. His mother, upon examining him found he had powers. Powers as strong as most of the angels. It was just sleeping. It needed a taste of power in order to emerge.\" She paused, and looked down at the stream.\n\n\"And so the first Awakening took place. Yadrial's mother placed her hands on his face, and kissed his forehead, all the while feeding him her Angelic powers. Yadrial's powers did indeed awaken. And he became as if he were an angel. But yet he was not. He had none of the obligations an Angel had. He did not have to obey the Arch-Angels, and he would not adhere to the word of The Lord. His 'Holy Powers' were used for his own selfish gain.\"\n\nI was trembling slightly...\"What happened?\" I asked.\n\nShe lay back on the grass.\n\n\"He burned the village he grew up in. And he didn't stop there. He defiled churches and women, and blasphemed against the prophets, and even God himself...\" She paused.\n\n\"So he was hunted. One day Michael couldn't stand the sight of Angelic power causing so much misery in the world. So he hefted his sword, and ventured down to Earth. Where he fought, and slew Yadrial. After that day the Arch-Angels acknowledged that future half-breeds might occur, as it was impossible to police all the Angels in matters of taking human lovers. So they worked great magic for over a year.\n\nThey wrought so that any awakened Aethling would be obedient to the Angel that Awakened them. This would be to preserve order...\"\n\nShe paused again.\n\n\"To lessen the blow they added that the Awakener would be the Aethling's lover and spouse, so that the Aethling might find happiness with their Awakener, and not come to hate them for their control over them. So it has been in angel society. That an Aethling should live on Earth for two decades, where they could grow older and wiser. Then, an Angel without a partner would be chosen, and come down to Awaken them. From thence they would go to Heaven, and live happily, and spread Gods word.\"\n\nI slowly unraveled her story.\n\n\"So you mean.\" I started ... too scared that my assumption was correct.\n\n\"Yes,\" she said, \"the demon that awakened you now has a certain amount of control over you.\"\n\nI began to cry...\"But ... I want ... you mean I can never go to Heaven because some filthy Demon can control me?\" I shouted.\n\nShe nodded. Her face still impassive.\n\nI became desperate.\n\n\"Can you change me back?\" I asked, spluttering slightly. \"Make me human again?\"\n\n\"No,\" she said. \"Such a thing has never been done before.\" She looked puzzled though. \"Certain precautions were made against this.\" she said. \"Your powers should have had a barrier encasing them, so that until the one selected by Michael could Awaken you, you would be human. To Awaken you this demon would have had to break the power of an Arch-Angel...\" she said. Her voice for once, sounded slightly uneasy.\n\nShe glanced at the entrance to the demon's cave.\n\n\"Whatever demon lives in that cave could undo what was created by Michael...\" She trailed off.\n\nIt was getting dark ... crickets began to chirp their nighttime interlude. A cool day had turned into a frigid night.\n\nWhy did you even come?\" I asked miserably. \"Just to tell me that paradise is forever lost to me?\"\n\nShe closed her eyes. \"No, We take care of our own, I was to come check on you, ensure your safety, and explain your situation.\"\n\n\"Thats it?\" I asked tersly.\n\n\"If possible, I am supposed to discover the identity of the demon in question,\" she said, looking at me. \"How many eyes does he have? Are his hands similar to hooves? Are his teeth like that of a bear?\n\nNone of these described the twisted perfection residing under the earth.\n\n\"No,\" I said. \"He simply looks like a very handsome black haired man ... with red eyes.\"",
        "\"No deformities?\" she said wonderingly. \"Who are we dealing with here?\"\n\nWe sat in the cold night a little longer. My mind was in turmoil. I only wanted escape.\n\n\"Take me with you!\" I cried.\n\nCariel shook her head slowly. Something inside of me broke.\n\n\"But then you condemn me to be a slave to that DEMON.\" I screamed.\n\nThe moon was rising, and the water reflected its milky rays.\n\nShe looked at me again, a blank look on her beautiful face.\n\n\"It won't be that bad. Your body will begin to crave his touch. The magic of the Arch-Angels will see to that ... He is your Awakener after all. You might even come to love him.\n\nI stared blankly at her.\n\nHer voice became far away. \"In fact, you'll probably be begging him to take you to bed by the week's end.\" she said matter of factly.\n\nShe turned, and began to walk towards the stream.\n\n\"Wait!\" I shouted...\"I have so many questions.\"\n\nI don't know if she heard me, because she had already disappeared.\n\nI sighed.\n\nI sat down heavily. Hitting my butt hard against the ground. I flopped onto my back, and listened to the night.\n\nMy mind was troubled...\n\nAfter an hour, I felt a draw to go back to the cave. At first it was almost like an itch. An urge that was annoying, but manageable.\n\nSoon that itch became overwhelmingly painful.\n\nI stood up, and padded across the grassy field back to the cave entrance.\n\nI took one last look at the moon lit sky.\n\nThen I began my descent.\n\n -------\n\nVoyage into Slavery\n\n~Demons are creatures of Earth and Fire, Blood and Bone. These are their attributes, and they are at their strongest in the presence of these things. Angels are creatures of Air and Water, Tears and Spirit. These are their attributes, and they are at their strongest in the presence of these things.~\n\nFirst Year Magician Lesson\n\n-------\n\n-Devnik-\n\nI awoke to total darkness.\n\nThe cave smelled foul. Blood and vomit had mixed in the air, creating a putrid odor.\n\nWater still dripped from the ceiling, and the cold was fierce and biting. My hand strayed back down to my stomach. My gut wound had closed, leaving nothing but a hole in my shirt to remember it by. I tried to stand and I managed to rise with something resembling grace.\n\nI stretched and yawned. I felt muscles uncoil as the fog of sleep temporarily lifted from my mind. I held up my hand and concentrated.\n\nRed sparks danced across my finger tips, sending a lurid red light dancing across the cave walls.\n\nI did a silent little jig in the dark.\n\nMy powers had returned.\n\nI quickly turned my attention to the squalor I had to endure while my magic was depleted. With a sweep of my hand the blood and vomit disappeared. With another wave I removed all stalagmites. I wasn't taking any chances with those pointy bastards...\n\nI then focused on making the place more livable. I replaced the cave floor with a plush black rug. I created a table with some chairs around it. In the corner where my stalagmite had been I erected a marble fireplace complete with fire. Then I moved my comfy armchair so that it faced the hearth. Finally to round off my new luxury accommodations, I created a king sized four poster bed, with red silk canopy and red silk bedding.\n\nI stretched again.\n\nI threw myself onto the bed and sighed. No matter where I was I always created the same room, with the same furniture. It felt very ... comforting.\n\nI yawned. The fog of sleep was resettling\n\nI was tired enough to sleep for a year. I still wasn't completely recovered, and with my new furnishings I felt very contented.\n\nVery contented indeed ... I gazed at the crackling hearth.\n\nAnd I drifted back to sleep, with flames dancing before my eyes.\n\n-------\n\n-Maria-\n\nThe trip back down was horrible. With every step I took I felt like I was damning myself. My footsteps grew heavier and heavier, and it felt like a great weight was being pressed down onto my shoulders.\n\nWhy did my supposed eternal husband like to live in a cave I wondered?\n\nThen I remembered.\n\nOh, that's right; he's a filthy demon, that's why he likes caves. Oh, and he stole me away from my true Awakener, who would have been my true angelic love.\n\nI sighed, and continued my trek down the long winding passage ways. While the trip to the surface had been an exhilarating sense of freedom, this journey back down seemed like a voyage into slavery.\n\nI shook my head, and put such thoughts out of my mind. I concentrated on putting one foot in front of the other, while my hands stayed close to the cave wall, ready to lend support should the path prove treacherous.\n\nIt did, numerous times, but finally I began to see the familiar flickering of orange light. I silently sent up a prayer, blessing that lone candle for lighting my path. I moved through the gap between the two rocks.\n\nMy jaw dropped.\n\nThis was not the same sordid cave that I had left behind.\n\nThe room looked like a noble's chambers.\n\nA soft rug of black wool lay covered the hard cave floor. A dinner table and chairs set with silver plates and cutlery occupied a corner. What I had mistaken for the lone candle was actually a roaring fire, set in a breathtaking white marble fireplace. But that's not what caught my attention. Sprawled on a four poster bed was the demon. His dark hair a tangled mess over his perfect pale face. He was shirtless. His body was well defined, and his alabaster chest was hairless.\n\nI edged closer to him, trying to get a better look. While sleeping he looked utterly harmless. With his taunting red eyes closed he seemed more like a boy of eighteen-years, rather than the twenty-year old I had mistook him for. I slowly reached out a hand, and I brushed his hair out of his eyes. His eyelids fluttered, but he stayed asleep.\n\nHe was so beautiful.\n\nI quickly realized what I was doing, and yanked my hand away from his face.\n\nThis was getting out of hand, I thought. An angel tells me that I am going to be a mindless lusting animal for this vile creature, and the first thing I do is start clucking over him like a mother hen...\n\nThis was not the way to prove Cariel wrong, this was not the way to get back to my old life. I glanced at his sleeping form one more time. Then I quickly turned away.\n\nI made my way through the opulent decorations to the fire place, and eased myself into the the plush black arm chair. I gazed into the hearth.\n\nThe chair was warm. Either from the fire, or from ... him.\n\nThe latter gave me goose bumps ... and that worried me.\n\n-------\n\n-Devnik-\n\nI woke with a start. I had been having the most erotic dream. The dream starred a beautiful golden haired girl. It had been a gripping fantasy. A sheen of sweat covered my bare chest.\n\nMaria...\n\nI was almost sorry the angel had taken her away. She had been such a pretty half-breed. I rose from the bed, and summoned my black silk sleeping shirt. It materialized around my body. It felt good to have my powers back, I had missed the luxury that they afforded.\n\nThe cave was warm. The fire had burned down to a low ember, setting the cave in a calm dim glow.\n\nAnd there was a girl in my chair...\n\nI blinked.\n\nThere, curled up like a cat, was Maria. Her blond hair fell in disorganized waves over the arm of my chair. Her slim face looked stunning contrasted with the firelight. Its dull light played off her high cheek bones. She looked innocent, she looked peaceful. The silver eyes that looked upon me with such hatred were closed. I watched her for a minute.\n\nHer breathing seemed to get faster.\n\nHer cheeks flushed, and her bosom was heaving. I found my gaze straying towards her breasts. They were two mounds of female perfection. Roughly the size of grapefruits, they were quite large for the eighteen years that she claimed. I drew my gaze away, and looked at her more closely. Why was she still here? Why hadn't the angel taken her to everlasting happiness? A place forever denied to me.\n\nDid the Light think she could serve as a spy? Surely they knew I hadn't played a part in Lucifer's war on God for six centuries ... but what if they didn't know who I was...\n\nI tried to remember if I had ever told Maria my name. Did I? At the brothel perhaps ... no, during our talk ... no. I had never told her my name ... I paused ... maybe she could be a spy, attempting to figure out why a demon awakened one of their own.\n\nFools, I thought. They must think I have some personal connection to this girl. I would have to prove them wrong ... if she turned out to be a spy I would show no mercy.\n\nI clicked my fingers.\n\nA spark of red flashed, and a whiff of sulfur appeared in the air. Sulfur ... the stench of Hell.\n\nThe space in front of me became distorted, until it reorganized itself into a crouching mass.\n\n\"Hello, Turkik,\" I said.\n\n\"How may I serve you Lord Devnikolus?\" he said. His voice sounded oily, and his speech uncouth.\n\nTurkik possessed the body of a human baby, with hands shaped like bat claws.\n\nI pressed my finger to my lips, and motioned to the sleeping girl.\n\nHe bowed low to acknowledge his understanding.\n\n\"Turkik, earlier today an angel and this girl talked outside this cave next to a small stream. I want you to discover who this angel was.\" I said, keeping my voice as a whisper.\n\nTurkik bowed again, \"It will be done.\"\n\nWith a small pop, he disappeared.\n\nI exhaled.\n\nIf Turkik discovers that the angel Maria talked to was Terial, the leader of the angelic spies, or one of her agents, I would kill her.\n\nWith a wave of my hand another black armchair appeared. I turned it so it would face the sleeping girl.\n\nI watch her breath in and out.\n\nI watched the way her rumpled white shift clung to her young nubile body.\n\nI watched her delicate face.\n\nAll the while I pondered the most entertaining way to kill her...\n\n -------\n\nBlessed are Thou\n\n -Daniel Fleeting-\n\n(1097 AD. Somewhere outside Jerusalem)\n\n\"Ave Maria, gratia plena, Dominus tecum.\n\nBenedicta tu in mulieribus, \n\nEt benedictus fructus ventris tui, Iesus.\n\nSancta Maria, Mater Dei, \n\nOra pro nobis peccatorbus, nunc, \n\nEt in hora mortis nostrae.\n\nAmen.\"\n\nI moved to my next bead. And I began again. Battle was nigh, and I alone continued to say my prayers.\n\nAll around me men sat by the campfire.\n\nWeeks of forced march had made their minds weak and their spirits corrupt. They sat and drank their ration of beer, and spoke of carnal pleasures outside of wedlock, and boasted of how many men they'd slain. And they claimed to be soldiers of God ... pathetic.\n\nMost had already discarded or lost the cross given to them by their legates. Mine lay safely in a pine box I made with my own hands.\n\nBut I was different. I believed in our cause. The rest were mere sell swords. They offered their blades like a whore offered her body ... if the price was right. They were all of them sinners.\n\nI looked up from my beads. Father Fredrick the legion's priest sat before me.\n\nI hadn't heard him approach.\n\n\"My child,\" he said. \"Are you aware that before dawn that we march into battle.\" His voice was soft and wise, like a Father's should be.\n\n\"Yes Father,\" I said. \"I am not afraid.\" If I die, then I would go to Eternal Happiness, Pope Urban the Second himself said this to be true.\n\nFather sighed.\n\n\"And yet, it saddens me that you alone spend your time with your rosary and with God,\" he lamented. \"The rest seem to find more comfort in the devil's debauchery.\"\n\nI replied with fire, \"I am not like them Father, I will see God's will done. Deus Vult!\"\n\nHe raised his hand to calm me. \"Yes, I can see that. That is why I have come to you out of so many others.\"\n\n\"What would you ask of me Father?\"\n\n\"Tell me child, have you ever wanted to be a Priest?\" he asked.\n\nI treated this as a test of faith. \"Good Father, I am not worthy to be the voice of God,\" I replied. I diverted my eyes down to my hands, which were clutching my rosary.\n\nFather gently shook his head. He reached out and calmly took my chin in hand, and lifted my eyes to meet his.\n\n\"No child, you are worthy, and God needs you this night,\" he said, his voice grave.\n\nI tried to speak. He cut me off.\n\n\"No, my boy, time is short, and you must know the dangers that you face.\"\n\nI nodded, and remained silent.\n\n\"Tonight we will lose the coming battle,\" he said calmly.\n\nI leapt up to protest.\n\nHe waved me back down. \"Peace, child, peace. Let me say my piece.\"\n\nI returned to my seat.\n\n\"As I was saying, we will lose tonight's battle, lest you take up the challenge I must present you.\" He paused. \"Tonight, leading the forces of the Seljuk army is a demon.\"\n\nMy jaw dropped. \"Satan himself meddles in this Holy War,\" I cursed.\n\nFather shook his head. \"We do not know how involved the devil is in these affairs,\" he said. \"But this demon stands in his inner most of unholy circles.\"\n\nI was in shock.\n\nFather drew himself up. \"That is why we need you Daniel. This demon and his army shall slaughter us this night lest you give us your arm in battle. You alone are pious amongst these barbarians, so only you have a chance of success.\"\n\nHe paused to draw breath. \"Though priesthood normally requires a life of devotion to God to achieve, my order has sent me to extend it to you. If you should accept, you will become the first warrior Priest, of the Order of the White Cross.\"\n\nI bowed, \"What would you have me do Father?\" I asked.\n\n\"Come with me.\" He said.\n\nFather Fredrick rose, and made his way through the dusty camp ground. I hurriedly moved to follow him.\n\nThe men all around were drunk. They drowned their fear in drink, to numb themselves to the coming battle.\n\nBy now, the enemy banners were visible on the dark horizon.\n\nI paid the men no mind. Sinners are nothing in Gods eyes, and they were nothing in mine.\n\nI continued to follow Father Fredrick, his billowing white robes helped me keep track of him, as the fires about the camp were fading, and none bothered to rekindle them. Battle was too close to think of such things.\n\nFather Fredrick entered a brown tent on the outskirts of camp. I followed him in.\n\nAn altar occupied most of the tent. A wooden cross hung above it, attached to the material of the tent.\n\nFather turned to look at me.\n\n\"Kneel before the altar Daniel,\" he said.\n\nI kneeled.\n\nFather Fredrick smiled. \"Now, child, don't move during the ritual unless I tell you to.\"\n\nI nodded.\n\nFather Fredrick reached down under the altar and produced a censer. He lit it with flit and tinder. Smoke began to rise, and the most wondrous smell filled the tent. He began to swing the censer, and he slowly began to walk around me and the altar in a circle. All the while swinging the censer.\n\nA certain peace filled my mind.\n\nThe incense smelt wonderful, and my mind became foggy. Father Fredrick began chanting. At first it sounded like Latin. But then I realized it was something else. Something better. The words of the mysterious language filled my heart with joy.\n\nThe chanting lasted five minutes.\n\nFinally Father stopped his circling and chanting. He stepped behind the altar and produced a book. It was not the Bible.\n\nThe Father looked at me kindly. \"Daniel, I am going to ask you some questions, and I want you to respond, 'I do'. Nothing more, nothing less.\"\n\nI gave a nod.\n\nHe began.\n\n\"Daniel Fleeting,\" he intoned.\n\n\"Do you renounce Satan, and all his works?\"\n\n\"I do.\"\n\n\"Do you fear God, in accordance with the scriptures?\"\n\n\"I do.\"\n\n\"And do you accept by choice, the life of the Judicar.\"\n\n\"I do.\"\n\n\"Then stand child, and take up your sword...\"\n\n-------\n\n(Paris 1623)\n\nI awoke with a start. The night's chill wrapped my sweat covered body with its caress. I dreamed that dream again. It was the dream of that night, so many years ago, when everything had changed.\n\nI only had that dream when he was close.\n\nI smiled to myself. I would find him again...\n\nHe would never escape me.\n\n -------\n\nLust\n\n (Outskirts of Paris 1623)\n\n-Maria-\n\nConsciousness returned to me slowly.\n\nI stretched out on the black arm chair, and sat up. The room was warm, but the fire had all but gone out. A few smoldering coals provided nothing but a dim light to see by. A faint outline of a man was visible.\n\nSitting on an identical chair was the demon. His glittering red eyes were trained on me.\n\n\"Glad to see you in the land of the living,\" he said sarcastically.\n\nI blushed. \"Umm, good morning,\" I said.\n\nHe smiled.\n\n\"Actually it's evening, my sweet,\" he said lightly, \"you just can't seem to keep track of time,\"\n\nI harrumphed.\n\nHe continued unabated. \"So, why did you come back?\" He said. \"I thought the little fairy that came and visited would have spirited you off to the land of eternal sunshine...? Or are there currently no vacancies?\"\n\nHis words rang in my already muddled head. What he just said was technically not a command, but I could feel my bodies' desire to give him an answer, even though my mind was loath to describe my situation.\n\n\"Tell me why you returned\", he said very calmly.\n\nThat was a command.\n\nThese words rang even louder in my head. So loud it was almost deafening ... it took all my strength of will just to shake my head.\n\nI never saw him move. But suddenly his right hand was around my throat, and my legs were dangling in the air.\n\n\"I'm going to ask you again,\" he said. \"And I will be very displeased if you don't answer me.\"\n\nThe ringing now sounded like a church bell. I could feel my mind caving ... and my body leapt at the chance to obey his orders. My mouth started moving, even though I didn't have enough air to talk.\n\nHe set me down. \"Try again,\" he said.\n\n\"The angel said that they would not accept me because I was awoken by a demon,\" I said in a rush. I had enough control left to leave out the part where he could give me orders and expect me to obey them ... that would just be uncouth for a young girl to say.\n\nIt seemed that my status as a creature of 'The Light' prevented me from telling direct lies, but lies of omission didn't seem to be a problem.\n\nThe beautiful dark haired youth returned to his seat, and put his chin in his hands.\n\n\"Yes, they would be suspicious of you wouldn't they,\" he mused. \"Or maybe they're just prejudice ... I should have anticipated this ... anything else you want to tell me?\"\n\nThis caused some slight ringing, and I could feel my body eager to tell him of his control over me. My mind, however, was able to make the wanton thing shake its head.\n\nHe continued muttering to himself... \"Yes, well, it'll be more fun to wait for Turkik to return anyway...\"\n\nWhile he was talking to himself, I started at him. I locked my gaze on his perfect face.\n\nI curled up on the chair again, and watched him like a dog watches its master.\n\nMy sex was dripping wet. But I ignored that.\n\n-Devnik-\n\nShe seemed uncomfortable in her chair.\n\nShe was constantly fidgeting like she couldn't get comfortable ... hmm, I thought, maybe she knows she's in danger? I didn't know ... it was hard to tell with this girl.\n\nFor one thing, I still didn't understand her reasoning for returning. Even if the angels didn't want her, why not run back to Paris? Why run back to me, a demon? I was by nature an enemy to her kind. I didn't doubt her explanation of why they wouldn't let her into Paradise.\n\nAs a member of the Light she couldn't physically lie ... but if she was a spy she would hardly tell me. The angel would have certainly taught her how to avoid telling me of her true intentions...\n\nThe one thing I did notice, was that she smelled. Not terrible, as it was my opinion that a sweaty dirty girl could never smell bad. But she did have a certain air of musk to her. I decided to help her with that.\n\nI concentrated.\n\nA red spark popped in front of my nose.\n\nThe white shift that had become filthy with a week's worth of grim began to glow red.",
        "Maria looked down at her clothing in alarm. The white shift began to change ... the glowing red cloth twined around her form like a serpent.\n\nWhen the change was finished, she looked like a different person.\n\nThe dirty girl that looked like a street urchin in a white pillowcase was gone. In her place I had wrought a princess. The shift had changed into a frilly ice blue satin dress, with frills and a built in corset.\n\nIn my moment of generosity I had also fixed her hair. The matted tangles that her golden blond tresses had formed were reborn. Her hair now fell in golden curls all the way down to the small of her back. I had removed all fleas from her hair too, as they seemed all to common in Parisians. I had also made her hair a bit longer, but I didn't feel like it would be a bad thing.\n\nShe was looking at me shocked ... then she looked down at herself ... she touched her dress, her hands dancing over the smooth silk. Then she reached up to her head, and felt her golden curls.\n\nShe started to cry.\n\nShe curled up into a tighter ball on the chair, and hugged her knees.\n\n\"Why are you being so nice to me?\" She asked, her voice sounded pathetic, and confused.\n\nI smiled. \"I take it you like the dress,\" I said.\n\nShe nodded, tears still falling from her face. \"Yes, I love it...\" she stuttered, \"thank you...\"\n\nI gave a courteous nod from my chair. \"My pleasure my lady,\" I replied.\n\nShe continued to cry.\n\nEventually I got tired of her weeping angelic face, and turned to the dim coals. With a click of my fingers the hearth's fire sprang back to its former glory.\n\nI sat back in my chair, and dozed.\n\nMaria's eyes never left me.\n\n-Maria-\n\nIt was official. I was horny.\n\nI might be crying like a bitch, but God help me I was aroused.\n\nAnd he wasn't doing anything to help me. In fact, nothing he did seem to make any difference to how much NEED I was in. Need for him.\n\nHe dangled me like a piece of meat by my neck, and all it did was make me pant in arousal.\n\nBut what really turned me on was his display of kindness. He did something completely kind and considerate. Using his somewhat scary powers he had changed my tattered underclothes into a dress fit for an aristocrat. It was real satin too. Not like the fake dresses at The Rosy Garter that were simply designed to be easy to remove.\n\nThis dress was the genuine article, but unless I kept my legs crossed, it was going to get wet.\n\nI rubbed my legs together a little bit. Applying friction to my sopping vagina.\n\nIt felt good, and a small moan escaped from my lips.\n\nHis eyes glanced over to me. \"Are you all right little half breed?\" He asked, his tone was soft, despite his words.\n\nI simply nodded, very much aware that my crotch had produced more moisture at the sound of his voice.\n\nThis continued for what seemed like hours. I would try to covertly rub my legs against my pulsing sex, and try not to draw attention from the demon.\n\nEventually I had a small shuddering orgasm that did nothing to satisfy me. My new found lusty abandon scared me. But my hungry pussy overturned my fears.\n\nMy body seemed determined to have him, even if my mind still resented him for what he'd done to me.\n\nI made a resolution to seduce him, after all I was a prostitute, seduction used to be my job.\n\n -------\n\nUnusual Thirsts\n\n I was getting impatient.\n\nI was only pretending to read the book in my hands. My eyes had been glancing over the same page for nearly an hour now.\n\nIt had been two days since I sent Turkik out to identify my angelic caller, and so far he had not returned.\n\nThe two days of his absence had sent into an uneasy pattern. Every evening I would arise at about nine, to which I would be greeted by a shy 'hello, ' from Maria.\n\nI didn't know if she simply slept the daylight away like I did, or if she just awoke whenever I got up.\n\nIt seemed that all she did was follow me about my cave. If I sat in my chair by the fireplace, then I could expect her to curl up in the chair next to mine for a cat nap.\n\nIt was becoming unnerving. She even slept in that chair, as I had yet to offer to use my powers to create her a bed.\n\nI didn't want to waste the energy if Turkik came back with news that would mean her death.\n\nCurrently we were in the same position we had occupied for most of the two days. I was reading by the fire, and she was snuggled into the other armchair.\n\nHer stomach growled.\n\nShe opened her eyes in surprise. Several emotions played over her face. Confusion, surprise, realization, was just a few that I could name.\n\n\"I'm ... hungry,\" she said, in a voice of utter shock.\n\nI looked over the top of my book.\n\n\"What would you like to eat little half breed?\" I said.\n\nShe shook her head.\n\n\"No, it's just, I haven't eaten for a week ... and I, well ... should have starved by now,\" she trailed off, sounding suddenly unsure of herself.\n\nI shook my head and chuckled.\n\n\"Well, child, you are half angel, and to the extent of my knowledge angels don't eat anything.\"\n\nShe nodded dumbly.\n\nI continued, \"But you are still half human, you are going to need to feed that half of yours every once in a while.\"\n\nShe looked up at me, with the same weird expression that she'd worn recently.\n\n\"So I only need to eat once a week?\"\n\n\"Looks that way,\" I replied, turning my attention back to my forgotten book.\n\nI read for close to an hour, till my attention was once again taken. Maria had began to fidget. I could tell she was working up the courage to say something. I still don't know why she stays with me even though she is obviously terrified of me. I didn't send her away because I would enjoy killing her if Turkik would come back.\n\nShe seemed to have found her courage. \"Umm, Mr. Demon, you said something about food?\"\n\n-Maria-\n\nNow that I was hungry it was the only thing I could think about.\n\nWell, I was really thinking about two things, but I had been thinking about that nonstop for the past two days, so it didn't count.\n\nThe demon closed his book with a snap.\n\n\"Why, yes Maria I do believe I did say something about a little supper,\" he said. He stood with a flourish. \"Now, what do you like to eat,\" he asked softly.\n\nI could feel my face getting hot. It was the most words he had said to me in two days.\n\n\"Oh, nothing much really, if you have some bread that would be nice,\" I said, craning my neck around looking for a cupboard that could hold food. I had never seen the demon eat.\n\nThe demon cocked his head, looking confused. \"No, no, that won't do at all,\" he said.\n\nHe waved his hand, and several little red sparks emerged, and darted around the cave.\n\nThere was a red flash, and i was blinded I was blinking the light from my eyes when I felt him take my hand.\n\nHe led me in the direction of his table.\n\nHe pulled my chair out for me, and gently lowered me into it. The flash slowly began to leave my eyes, and I had a sneaking suspicion that he meant for me to be blind.\n\nAs I regained my sight, I saw him on the other side of the table.\n\nHe grinned.\n\n\"Well, eat up,\" he said, gesturing to the table.\n\nWhat I saw took my breath away. Laid out on the table was a feast for an army. A roast pig with an apple in it's mouth sat as the centerpiece. All around it were plates of grapes and apples. Potatoes and loaves of bread were scattered everywhere.\n\nI tentatively picked up a loaf of bread and nibbled on it.\n\nIt was the best thing I ever tasted ... for the next hour I gorged myself on delicacies I could have only dreamed of.\n\nHe calmly watched me binge from across the table.\n\nWhen I finished, I leaned back in my chair, feeling just a little bit sick.\n\n\"Well, you certainly proved to be an excellent dining companion; I have been blow away by your skills of conversation,\" he said.\n\nI blushed for the second time of the evening.\n\nI started a bumbling apology.\n\nHe waved his hand at me to settle me. \"Not to worry little half breed, it was very interesting to watch you eat, almost like a wolf tearing the carcass of a deer.\"\n\nHe wasn't doing anything to make me feel better.\n\nHe apparently didn't care. \"Are you finished?\" He asked.\n\nI just nodded.\n\nWith another wave of his hand the food disappeared. He leaned forward, his elbows resting on the table.\n\n\"So, in all honesty, how was my cooking?\" He said\n\nmockingly.\n\nI ignored him, I had been thinking about a question for some time, and it had begun to gnaw at me.\n\nI asked my question before my will left me.\n\n\"Do you eat?\" I asked. \"I noticed you didn't eat anything while I was ... um ... having dinner.\"\n\nHis smile turned dark. \"My dear, it would be best if you didn't know my eating habits. I eat some strange things...\" he said mysteriously.\n\nFor some reason, I desperately wanted to know what he ate.\n\n\"Please tell me,\" I said. \"I'll answer any questions you want!\"\n\nAt this statement he paused.\n\n\"Answer any question...\" he mused. \"You realize if I take you up on that promise you will have to tell me, as not telling me would constituent as lying.\n\nI nodded.\n\nHe gazed right into my eyes with his red orbs.\n\n\"Are you staying with me to spy on me for the light?\"\n\nI answered so quickly that the compulsion ringing was hardly audible when I said,\n\n\"No, they never asked me to spy on you, and if they ask me I will not agree. The angel only asked me if I knew of any deformities on your person.\"\n\nHe smiled.\n\n\"Alright then,\" he said, lightly. \"Now I believe you wanted to know something?\"\n\nI growled in frustration.\n\n\"Tell me what you eat!\" I shouted.\n\nHe smiled, and held up three fingers. \"I can eat three things,\" he said.\n\n\"One,\" he ticked down a finger, \"I can devour the soul of a human who pledged it in mortal combat.\"\n\n\"Two,\" another finger went down, \"I can eat the flesh of any sinner wallowing in Hell.\"\n\n\"Three,\" the last finger descended, \"I can drink the blood of a willing host.\"\n\nI was slightly uneasy about his answers, but they raised more questions than they answered. \"Why would a man pledge his soul in combat? What do they have to gain?\" I asked.\n\nHe laughed at this. \"Eternal life,\" he said.\n\n\"What,\" I said.\n\n\"If they defeat me in combat then they receive an unending life of youth.\"\n\n\"Oh,\" I said. Wondering how many men had lost their lives trying to attain something I didn't want.\n\nI asked another question. \"Why would someone allow you to drink their blood?\"\n\nHe sat back in his chair. \"One wish,\" he said.\n\nI was confused, \"Meaning ... what?\" I asked\n\nHe smiled, obviously thinking I was very slow.\n\n\"Meaning I am compelled to use my powers to grant a desire of theirs that is within my abilities, excepting that of eternal life of course.\"\n\n\"Oh,\" I said. I didn't bother asking about the people in Hell. I was focused on other things now.\n\nI paused; my mind continually scolded my wayward body for even contemplating this.\n\nI looked up at the demon. \"I want you to drink my blood,\" I said. I was pleased to see him double take in shock.\n\n\"Really, do you have some wish that you want fulfilled?\" He asked mockingly.\n\nI nodded.\n\nSuddenly he was standing right next to me, on my side of the long table. He was holding the silver knife I had used to eat. I offered it to me.\n\n\"You have to cut yourself,\" he said. \"I can play no part in the breaking of the skin.\"\n\nWithout giving myself time to think about it, I cut across my wrist. I was hardly even surprised when blue blood started to seep from my wound.\n\nThe demon was eying the blood hungrily. \"Now say these words,\" he said. \"I freely give my own blood to fulfill my own desires.\"\n\nI said the words.\n\nHis mouth descended upon my wrist so quickly that he was a blur of movement. I felt his lips latch on, and began to feel him draw blood from my body.\n\nThe first draw stung, almost like a bee sting.\n\nThe second draw felt like a warm fire after a cold day.\n\nHis third draw from my body bordered on ecstasy.\n\nI began to writhe and moan under his iron grip on my arm. I could feel my nipples hardening, and my own juices had begun to leak down my leg.\n\nAnd still he kept going.\n\nI felt like I was going to go crazy.\n\nMy mind was delirious with pleasure ... all I could do was wait for him to take his next sip of my blood with baited breath.\n\n\"Take it all!\" I shouted in passion, \"Please ... take it all.\"\n\nHe took it all.\n\n -------\n\nCoupling\n\n I couldn't think, I couldn't move. All I could do was drink.\n\nIt felt like liquid pleasure was slipping down my throat. My ears were pounding, I could hear her saying something, but I didn't understand any of her words.\n\nFinally, I tried to take another sip, but no more came.\n\nOh no ... I had drained her dry ... I had never killed a blood donor, but I knew the penalty for betraying our contract ... I waited with my eyes shut ... one minute passed, then two.\n\nI cracked one eye open. Nothing happened.\n\nMaria's corpse was still in my arms. Her cut wrist dangled between us. Her eyes were closed, and she wasn't breathing.\n\nI didn't understand. I had killed her, her lifeless body lay in my hands, and yet, I wasn't bursting into flames. I wasn't slipping back into Hell.\n\nI was so preoccupied I didn't realize that her wrist had healed.\n\nI quietly brushed her blond locks from her face ... I felt quite strange. It was almost like I was sorry for her death. This sentiment confused me. I had spent the last two days thinking of inventive ways to kill her.\n\nI leaned down, and slowly kissed her forehead. I pulled my lips back, and gazed down at her porcelain face.\n\nHer eyes snapped open. They locked onto me. I watched as her pupils dilated, leaving only a sliver of silver visible.\n\n\"Fuck me,\" she said.\n\nBefore I knew what was happening, Maria was on her feet. She grabbed me under the arms and lifted me like a child.\n\nShe threw me and I went sailing through the air. I landed on the bed with a thud.\n\nIn a blur of motion she was kneeling above me, with her legs straddling mine.\n\n\"You bastard,\" she screamed. \"You bastard, you bastard you FUCKING BASTARD!\" She was fiddling with the buttons on my leather pants.\n\n\"If you don't fuck me I am going to fucking RAPE you,\" she said. Her face was determined even though her eyes had tears in them.\n\nI reached out and grabbed her by the shoulders, trying to keep her from moving. She struggled and wiggled like a hellcat. She was surprisingly strong, but then again, she did just throw me across a room.\n\n\"Maria, STOP!\" I screamed.\n\nSurprisingly, she suddenly froze in place. Tears still streamed down her face, but her eyes were looking at me hungrily.\n\nShe was panting, her whole body was shaking just inches from mine, but still she did not move.\n\n\"But I need it,\" she said, her voice pleading. \"Please let me, please. I'll do anything...\"\n\nI looked at her puzzled. I wonder why she didn't just continue trying to undress me, was it just because I told her to?\n\n\"Why'd you stop?\" I asked, curious.\n\nConfusion played against her face, before it too was swallowed by lust. \"But, you told me to stop.\"\n\nI nodded.\n\nI was having fun with this game. \"But why did you? You look like you're going to lose your mind if you don't get fucked. So why'd you stop?\"\n\nShe whimpered. Her body was shaking more violently now. Not only from passion this time. I smelt fear rising from her pores.\n\n\"Don't make me tell you...\" she whined. Her whole body was convulsing, I looked down, there was a wet spot on the bed where her crotch was hovering, the blue silk dress was torn in several places, and one of her milky breasts was hanging loose.\n\nI gave her my best evil grin.\n\n\"Tell me Maria,\" I said.\n\nShe shuddered, and her body went limp. She fell on top of me, her blond hair landing on my chest.\n\nShe began talking in a dead voice, one with no emotion.\n\n\"I have to obey your commands,\" she said simply.\n\n\"You'll have to be more specific than that half-breed,\" I said.\n\nI felt her chest heaving next to mine. \"No, please, don't.\"\n\nI was very firm. I grabbed her head and forced her to look at me.\n\n\"Yes, tell me everything, leave nothing out,\" I commanded.\n\nHer eyes dilated again, and she shivered.\n\nDid she just have an orgasm?\n\nShe once again began speaking in a monotone voice.\n\n\"Demon, because you are my awakener, my body is forced to follow your orders, due to ancient magic made by the angelic elite. In an effort to control Aethlings, who are not compelled to obey God,\" she droned.\n\nThat was something I didn't know...\n\nShe continued. \"In angelic society, an Aethling is awakened on their twentieth birthday, by the one that destined to be their spouse. Hence, it was included in the spell that the Aethling in question would be physically attracted to their awakener.\" She stopped, and paused.\n\nShe blinked rapidly, looking confused.\n\n\"Oh, God,\" she said. \"Did I tell you?\" She sounded terrified.\n\nI nodded, smiling.\n\nShe looked at me nervously, \"So, what are you going to do to me?\" She asked.\n\nI thought for a moment.\n\nI remembered the nights I spent dreaming of killing her. However, I also remembered my regret, when I thought I had taken her life.\n\nI looked at her panic stricken face. \"I'm supposing you couldn't leave me if you wanted to.\"\n\nShe nodded pathetically\n\n\"Then I suppose I'll have to take care of you,\" I said simply.\n\nShe looked relieved, and buried her head in my neck, crying softly. I stroked the back of her head absently, marveling at my own behavior rather than her own. I was doing a lot of unselfish things lately. I didn't know how I felt about that.\n\nShe suddenly jerked her head away from me in a blurring movement. She still didn't know how to judge her supernatural speed.\n\nShe looked me straight in the eyes, panting once again.\n\n\"You owe me a wish,\" she said, her voice breathy and weak.\n\nI nodded.\n\nShe smiled, and stretched like a cat, curling her toes and fingers.\n\n\"Then I wish you would fuck me.\"\n\nI felt a discharge of power, and felt the compulsion of a wish that was within my abilities to grant.\n\nMy body started moving on its own. I quickly grabbed her by her shoulders and spun her down onto the bed. I was now sitting on top of her.\n\nShe was grinding up against me. \"Yes, yes, fuck me, take me,\" she moaned.\n\nShe needn't ask, her wish would make sure I preformed.\n\nWith my powers I mentally undid the buttons on my pants, and slipped out of them. I wasn't wearing any under clothes.\n\nHer eyes grew wide when she saw my cock. \"Umm,\" she said, \"how big is that?\"\n\nI shrugged; I had never bothered to measure it. I had never made love to a willing girl before. And such questions just don't come up during rape.\n\nShe suddenly seemed very nervous. \"Be gentle,\" she quivered, \"I don't think humans get that big.\"\n\n\"Sorry,\" I said, \" But you didn't wish for 'gentle'.\"\n\nI grabbed her dress at the bust, and savagely ripped it in half, revealing her pale sweaty body. Her chest was heaving, making her breasts sway slightly as she tried to catch her breath.\n\nI roughly placed my hand between her legs. She was still oozing cum in large amounts. She obviously liked what I was doing.\n\nI stuck two fingers in. I relished the hot warmth of her center. I felt her vaginal walls contracting, trying to draw my fingers in deeper.\n\nShe squealed.\n\n\"Enough, enough, just FUCK me,\" she bellowed. \"I need you inside me,\" she said, her voice torn between need and determination.\n\nI lifted my body up, and positioned my cock head in front of her outer lips. I could feel the heat emanating from her pussy.\n\nShe groaned, and roughly pushed up against me, trying to capture me inside her ... I slid in effortlessly.\n\nShe went crazy, and started bucking and squirming.\n\nI moaned. Her sexy felt heavenly.\n\nI drew my hips back, far enough that only the head of my cock was still in her. Then I brutally pushed my dick all the way inside her, making sure to hit her hard clit with my body.",
        "I felt the head of my cock ram against her cervix. My balls bounced off her ass.\n\nShe screamed. Whether it was in orgasm or pain I didn't care. I fiercely grabbed her milky white tits, and used them as leverage to piston my cock in and out of her sopping hole.\n\nMaria was doing everything to prolong the contact. She began to meet my thrusts with her hips. Her eyes never left my face. She was gazing at me with what I could\n\nonly call love. An emotion that I had never felt directed at me.\n\nHer gaze drove my pleasure to unimaginable heights. I gripped her tits tighter, and began thrusting harder.\n\nShe groaned. She no longer met my thrusts; she simply lay there and took it, whimpering. She had four more orgasms under this treatment.\n\nI felt my own climax rising. My strokes became longer, and her moaning became louder.\n\nWhen I felt like I could fuck no more, I once more drove my cock all the way into her abused sex, and came.\n\nMy cum blasted deep into her cervix. When she felt my hot seed fill her channel, she had another explosive orgasm, and shrieked a wail loud enough for the heavens to hear.\n\nI watched her eye lids flutter. Her breathing had slowed, and her pale body stopped moving.\n\n\"So good,\" was all she said before she lost consciousness.\n\nI released her breasts, taking note of the red hand marks that were imprinted on her soft mounds. I then slowly withdrew my cock from her soaking cunt. The head popped out with an audible 'squish'. It glistened with her nectar. I could see my cum slowly begin leaking out.\n\nHer vaginal channel was still contracting, as if trying to entice my cock to return to its warm embrace.\n\nI rolled off the little half breed, and lay on my back next to her sleeping abused body.\n\nI pulled the sheets over us, and with a wave of my hand, the fire in the hearth went out.\n\nThe room plunged into darkness.\n\nI stared at the cave ceiling, wondering what I was going to do with a sex addicted Aethling.\n\nI wondered if she loved me.\n\nI wondered if I could love anything.\n\n -------\n\nCarry me Away\n\n -Maria-\n\nI was rudely jostled awake ... by the bed?\n\nI scrambled about disoriented. I made to sit up. Several muscles screamed in protest ... I was so sore.\n\nI settled for opening my eyes.\n\nI was lying flat on a hard wooden surface, looking up at a wooden ceiling that was much closer than it should be.\n\nThis time I really did pull myself up, ignoring my groaning body parts.\n\nI looked around. I was in a carriage. My sleeping body had been unceremoniously draped across the wooden bench meant for passengers. Occupying the bench across from me was the demon.\n\nHe was once again adored in the clothes of a nobleman. He was wearing a pitch black coat, with a gray vest, black collared shirt and a white cravat.\n\nHe looked stunning; at least, the parts of him I could see looked good. His face was hidden by a black top hat, which he had pulled down to cover his eyes. His arms were crossed and he was leaning against the carriage wall.\n\nIt occurred to me to check my own state of dress.\n\nApparently while I was asleep I had played quite the dress up doll.\n\nMy hair was no longer done in curls; instead it was straight, and brushed out glossy. I also realized I was sitting on some of it.\n\nIt hurt.\n\nWhen my hair was in ringlets it came down to the small of my back, now straight, it seemed to reach down to my butt.\n\nI didn't remember my hair being anywhere close to this long before my awakening. It wasn't fashionable to have long hair in Paris at the moment ... I wondered if HE had anything to do with that.\n\nForgetting my hair I explored the rest of my attire.\n\nIt was even better than the silk dress. This dress was blood red with black hemming and frills. It extended to just above my feet. In this dress there was also a built in corset, which served to push up my modest breasts, and make them seem bigger.\n\nI didn't need a looking glass to know that I was beautiful in this dress. Apparently the demon didn't like under dressed companions.\n\nThe carriage jostled again, reminding me to wonder why I wasn't asleep in bed, recovering from a night of extremely pleasurable abuse.\n\n\"Mr. Demon,\" I said, prodding his leg with my barefoot. \"Mr. Demon, wake up.\"\n\n\"Devnik,\" he replied sleepily.\n\n\"What?\"\n\n\"Devnik,\" he repeated, \"my name is Devnik,\" he said, his voice muffled by his hat.\n\nIt took me a moment to realize that this was the first time he had told me his name. Even as a prostitute my standards were high enough to get the man's name before I slept with him.\n\nI shook my head.\n\nThat was not your fault. You were magically forced to want to have sex with him ... and beg him for sex ... and enjoy sex with him ... and ... let him 'use' you how he saw fit ... oh dear.\n\nI could feel myself becoming aroused again.\n\nDevnik raised his hat revealing his crimson eyes.\n\n\"I wouldn't become too hot and heavy little half breed,\" he said. \"It would be awfully embarrassing to walk by the servants panting and flushed would it?\"\n\nI blushed, and tried to keep a hold of my feelings ... especially the ones about what he DID to me last night...\n\nWait ... did he say ... servants?\n\nI locked my gaze on him, and remembered that I was angry at him.\n\n\"Where are we going,\" I demanded.\n\nHe just looked at me, amused by my little snit.\n\nI continued, eager to speak my mind.\n\n\"Why on earth did you remove me from bed, and dress me, and comb me, and place me in this carriage ... and ... and...\" I trailed off, sacrificing angry words for an even angrier glare.\n\nHe just laughed.\n\nMy temper snapped, and I started shouting. \"And don't you think that that appalling treatment you gave me was in anyway enjoyable. You treated me as if I were a masturbatory aid and not a person.\"\n\nHe reached across the carriage and put a finger on my lips. My body trembled, and I felt silent.\n\nIt wasn't healthy to let him affect me this way.\n\nDespite my efforts my sex was creating a wet spot on my new dress.\n\n\"You wished for it,\" he said. \"And you enjoyed it. You enjoyed it so much that you passed out ... because your body could not handle the stimulation.\"\n\nI couldn't think of anything to say, so I huffed, and stared out the window at the night.\n\n\"Oh, and as to where are going, we are traveling to my house,\" he said calmly.\n\n\"I guess that squalid cave isn't where you live,\" I said snottily.\n\nHis glowing red eyes swiveled to meet mine. \"I rather like that cave thank you,\" he said. \"Now, be silent, all this talk is making me tired.\"\n\nLast night when I had attempted to ... um ... rape Devnik, I had discovered something about my compulsion to him ... it had evolved.\n\nNo longer did church bells ring in my head until I obeyed, now my body simply just acted, independent of my mental struggles.\n\nHence, no matter how much I wanted to scream 'YOU THINK YOUR TIRED' my mouth would simply not move.\n\nInstead I once again shot him angry looks from my side of the carriage.\n\nHe looked back at me, and then his eyes widened. \"Oh dear, Maria,\" he said. \"You can speak, do whatever you want,\" he said hastily.\n\n\"Thank you,\" I said frostily.\n\nHe sighed, \"I haven't gotten used to being able to give you commands. I'll have to be careful about what I say.\"\n\nI paused, that was rather thoughtful of him ... I admitted grudgingly.\n\nWe rode on in silence. He tilted his hat back down and rested. I continued to gaze out into the night. The road bumped us again. We were on a little dusty country road. There was no sign of any other people...\n\nWe must be far away from Paris. How long had I been asleep?\n\nNot nearly long enough my body seemed to say. I stretched, and leaned my head against the carriage door.\n\n-------\n\nOnce again, I was shaken awake. This time, however, it was by Devnik's hands.\n\n\"Wake up little half breed,\" he whispered. \"We're here.\"\n\nI blinked sleepily. Can't a girl get some sleep I thought grumpily?\n\n\"I think you'll like it here,\" he said smugly.\n\nI felt the carriage slowing down, and then pull to a stop. I heard the horses whinny outside. A stout mustached man who I assumed was the driver opened the door to the carriage. He placed some wooden steps down for us to walk on.\n\nDevnik gracefully descended the steps, and then turned and offered a pale hand to me.\n\nSurprised but grateful, I took his hand and let him steady me as I descended the steps. I hopped of the last one, and landed lightly on soft grass. I took a deep breath. The cool night air was refreshing.\n\n\"Welcome to my home,\" Devnik said, gesturing behind me.\n\nI turned. He was pointing at a breathtaking sprawling mansion fit for a Duke.\n\nI gasped.\n\nI heard him laughing behind me.\n\n -------\n\nThe Demon's Chamber\n\n -Devnik-\n\nA chilled wind swept through the country side.\n\n\"Your home is so ... beautiful...\" she marveled, her gaze still fixated on the chateau.\n\nI moved to stand behind her. I wrapped my arms around her clasping them just under her breasts. I put my chin on her soft shoulder.\n\nI whispered directly in her ear, \"I'm glad you approve Maria.\"\n\nShe shivered.\n\nI could see goose bumps appear on her neck, but that could have been from the cold...\n\nShe was still so nonplussed with my house that she didn't notice my butler Jon approach with a lit torch.\n\nShe jumped in my arms when he spoke.\n\n\"Good evening, Mousier Devnik, I trust your journey was enjoyable? He asked.\n\n\"Wonderful,\" I said, \"I had pleasant scenery to enjoy.\" I nodded to the still extremely surprised blonde in my arms. \"Close your mouth, dear, you'll catch flies,\" I said mockingly.\n\nShe snapped her mouth shut and glared at me. She wiggled free of my arms, and eyed me from a distance. Her mouth turned down in a pretty little frown.\n\nI turned to Jon.\n\n\"If you would not mind giving her the full tour Jon, I fear it will be dawn soon, and I must be retiring to my chambers.\"\n\nJon bowed low, \"but of course sir, I'll see the young Mademoiselle around the grounds. Should I send her to your chambers, or prepare a room for her?\"\n\nI glanced at the gorgeous half breed. \"Let her decide her own sleeping arrangements.\" I said.\n\nJon nodded, \"very good sir.\"\n\nI opened my arms for my little Aethling. \"Come give me a kiss before bed.\"\n\nHer eyes opened wide, and then became lidded, as she strode over to me. She stepped into my arms. I could smell her. She smelled of roses and sugar ... and ... other things.\n\nShe brought her full lips to my own, and gave me an emotionless kiss. I pulled away from her.\n\n\"Darling, give me a passionate kiss,\" I said calmly \"I almost fell asleep during that one.\"\n\nWith no change of expression, she once again planted her lips on mine. Her tongue roughly forced entry into my mouth, and began prodding mine. Her hands reached up, and grasped my long hair until her fingers were embedded in it.\n\nShe moaned, and shivered slightly.\n\nI pulled away and our lips disentangled with a 'pop'.\n\nI readjusted my top hat.\n\n\"Thank you, dear,\" I said. Her face was red, and she was breathing heavily. Her beautiful red dress was askew, and her silver eyes burned with unanswered desire\n\n\"Now I bid you adieu.\" I turned on heel and sprinted as fast as I could to the house.\n\nHer scent still clung to my lips.\n\n-------\n\n-Maria-\n\nMy eyes were closed.\n\nI pulled away from Devnik's lips, lips that I had been commanded to kiss, not once, but twice.\n\nI was so hot.\n\nI hoped he had a decent bedroom in this mansion.\n\n\"Now I bid you adieu...\" ... what? I opened my eyes.\n\nHe was gone ... as if he turned to air.\n\nThat fucking bastard! ... He left me. I was panting, and he left me horny and cranky.\n\nI ran up to Jon and poked him in the chest. \"What room does he sleep in?\"\n\nJon calmly lowered my offending finger, \"Miss, I think it best I gave you the tour, then we may discuss the sleeping situation.\"\n\n\"But, but,\" I was at a loss for words.\n\n\"Now, now, Miss, it won't be that bad, I think you'll quite enjoy our little tour of the manor.\"\n\nHe made a sweeping gesture, \"After you Mademoiselle.\"\n\nI gave him the cold shoulder, and quickly walked by him, and took my first steps towards the chateau.\n\nThe chateau itself was made of tan rock, fitted together seamlessly by cement. The entrance way was a grand marble staircase, that lead up to a heavy wooden double door.\n\nFrom my position at the bottom of the stair case I couldn't exactly tell how large it was, but from the looks of it, the building had three wings. A center wing where the front door was, and then two wings sprouting from either side.\n\nI imagined that if I was a sparrow in the skies, the house would look like a big U.\n\nJon caught up with me.\n\n\"Come along, come along,\" he said, \"let's get out of the nights chill shall we?\"\n\nI nodded silently at him. He opened the door with a flourish, and bowed.\n\n\"After you.\"\n\n\"Thank you, I said coldly\"\n\nI walked into the demon's mansion.\n\nThe entrance room was ... well ... rather anticlimactic. The entire room was white, with a red oriental carpet adorning the center of the room. A shiny varnished grandfather clock ticked softly in the corner.\n\nJon seemed to read my mind. \"The mansion is rather sparsely furnished mademoiselle ... You see, the master does not really desire many things, being what he is ... so only items that are special to him occupy this house.\"\n\nWait ... did Jon know that Devnik wasn't ... human?\n\nIn fact he was a rather strange choice for a servant. The young butler couldn't have been older than twenty five. He had long brown hair tied back in a bun. But the most curious thing was his face.\n\nHe had one large scare starting from his left ear to his cheek, and several smaller ones dotting his forehead and chin. He looked like he put his face in broken glass.\n\nA very odd choice for a butler indeed...\n\n\"So, um, I am guessing that you know Devnik isn't ... entirely human,\" I asked nervously.\n\nJon gave a good natured laugh, \"Entirely human, I guess that is a polite way to phrase it,\" he said in-between laughs, \"But I don't think it is proper to consider him even remotely human ma'am.\"\n\nI found myself laughing along with him, it was infectious.\n\nHis laughter died down, and he appeared to somber rather quickly. \"I am sorry ma'am, it was not my place to be so informal with you, but I haven't had anyone to laugh with for twenty years.\"\n\n\"Twenty years!\" I exclaimed, \"But you are only twenty five or so.\"\n\nA small tepid smile appeared on his face. \"Ah, but looks are not everything, he said sadly, \"I haven't aged in a long while.\"\n\nI was confused again, \"Does that mean you're not human?\" I asked. \"Are you a demon like Devnik ... or ... something else?\"\n\nHe looked upon me compassionately. \"No, I am a human,\" said Jon softly, \"yet I do not age ... The twenty seven year old body you look upon holds the soul of a very old man.\"\n\n\"Yet, how are you human then?\" I asked.\n\nJon sighed.\n\n\"My ... longevity ... is not for me to discuss Mistress,\" he said. \"Talk to the Master and see if he will tell you.\"\n\nI nodded.\n\nHis smile returned, \"Now! I believe I have a house to show you.\"\n\nFor the next hour Jon ushered me through the chateau. The kitchens and the dining room occupied the entire right wing, while the left wing was composed of a magnificent library, and drawing room. While discussing the true rarities of in the library, something occurred to me.\n\nThe entire house was empty.\n\n\"Where's all the staff,\" I said.\n\nJon smiled sheepishly. \"You're looking at the staff,\" he said, \"Besides me and the driver Lucis, who lives in the small village south of here, there are no servants. This house is empty save for me when the Master is away.\n\nI looked at him, as if seeing the true melancholy of this man for the first time.\n\n\"You must be so lonely.\"\n\nHe nodded absently.\n\nThere was an awkward silence. The morning sunlight started streaming in through the windows. The cold library suddenly felt very light and warm. The sun felt good on my face.\n\n\"You're an angel,\" Jon said calmly.\n\nI was startled. \"Half angel,\" I said, \"How did you know?\"\n\nJon pointed down at the sunlit ground. \"No shadow.\"\n\nI sighed. \"That's going to take some getting used to.\"\n\nHe looked puzzled, \"You mean, you haven't know of your heritage long?\"\n\nI nodded glumly, \"Devnik awakened me a week ago.\"\n\n\"I didn't know that demons could awaken Aethlings.\"\n\n\"Neither did he.\"\n\nHe cracked another smiled, \"That does sound like Devnik.\"\n\nI yawned, and stretched.\n\nJon noticed. \"Forgive my lack of manners,\" he said, \"I should have known that you would be on the master's sleeping schedule. Please follow me to the master suite.\"\n\nI stayed silent as he once again lead me from the library, back to the center wing. We were back at the front door. Directly across the entrance room from front door, was another door. This door was jet black, and had intricate carvings on it. I wondered why I didn't notice it before.\n\nJon, ever the mind reader, launched into explanation.\n\n\"I bet your wondering why you didn't see the door on your way in?\"\n\n\"Yes.\"\n\n\"Well, Master has it enchanted, so that only if the door is pointed out to you is it visible.\"\n\n\"That is ... wow.\"\n\n\"It does take some getting used to,\" he said.\n\nHe opened the door and stepped through. Inside was a bare bedroom with a white linen Queen sized bed, and white curtains.\n\nI hesitated, and looked at Jon questioningly.\n\nHe sighed. \"You want to sleep in HIS room don't you?\"\n\nI simply nodded pathetically.\n\nMy body already felt uneasy having been separated from him for so long.\n\nHe sighed again, and strode across the room. On the wall was a brass candle holder, he seized it and yanked it.\n\nA panel in the wall opened up to a dark passage way, with winding stone steps descending into the earth.\n\nI stepped inside the passage, and put one foot and the dank stone steps.\n\n\"Sweet dreams,\" Jon said in a sing song voice.\n\nHe closed the secret door.\n\nEverything plunged into darkness.\n\n -------\n\nJudicar\n\n-Daniel Fleeting-\n\n(1097 AD. Somewhere outside Jerusalem)\n\n\"And do you accept by choice, the life of the Judicar.\"\n\n\"I do.\"\n\n\"Then stand child, and take up your sword...\"\n\nI slowly rose to my feet.\n\nLaid across Father Fredrick's palms was a sword.\n\nIt was a plain thing. The hilt was unadorned and wrapped in leather, while the blade itself was made of iron and had a thin layer of rust over it. The only distinguishing feature about the sword was the small cross carved into the base of the blade.\n\nI scoffed. \"That is a peasant's sword!\" I said.\n\nA dark look passed on Fredrick's face. It was a face that a kindly Father should never wear.\n\nHe spoke softly, \"You would do well to lose that pride of yours ... it was Satan's undoing and it will be yours too lest you heed yourself.\"\n\nI swallowed back my retort. I lowered my eyes to the tent's dirt floor. \"Yes Father.\"\n\nHe smiled, his face once again gentile\n\n\"Now before your rather unfortunate interjection, I was going to tell you of this swords power.\"\n\nPower?\n\n\"Please, go on father,\" I said.\n\n\"This sword, my son, is holy,\" he said.\n\nI gave the rusted old hunk of metal a once over.\n\nIt still looked like something he fished out of a bog.\n\nI decided to play along. \"What makes this sword special Father.\"\n\nHis smile grew larger. \"My son, this sword was blessed by Pope Urban at my insistence.\"\n\nI could feel my jaw drop. Pope Urban ... the leader of the True Faith, laid hands on this wretched weapon.\n\n\"Pope Urban listens to you?\" I asked, still trying to process that the Pope was now somehow involved.\n\nFredrick chuckled. \"He should, my child, as I am his personal advisor to all things demonic.\"\n\nI felt my legs go weak, and my knees sank to the ground. \"His Most Holiness listens to you,\" I said. \"Please forgive my impudence, and share your great wisdom.\"",
        "I pressed my face into the dirt, and prayed I had not condemned myself.\n\nI felt his hands on my shoulders. He gently raised me, until I once again stood, and looked him in the eyes.\n\n\"Hush now Daniel, your humility is admirable, but we are all servants to the light here,\" he said softly.\n\n\"Servants to the Light?\" I said questioningly. \"You mean servants to God right?\"\n\nFredrick paused. \"In a sense yes, God is the ultimate incarnate of Light. But when I say servant of the Light, I simply mean that we are enemies against the Dark, of which Satan is the ultimate incarnate.\"\n\nI didn't know how to respond.\n\nHe just laughed again. \"I know this takes time to understand ... and there will be time for that later. But right now, I need to explain what you have become.\"\n\nI was confused. \"Become, Father?\" I began. \"I have not become anything, I am still Daniel Fleeting, crusader of the Fourth Regiment.\n\nHe shook his head. \"No Daniel, that life is behind you now,\" he said. \"From hence on, you are a Judicair, or a sword of the Light.\"\n\n\"A Judicair, Father?\"\n\n\"Yes Daniel. A Judicair is a human immortal servant of the Light, sworn to eliminate all elements of Darkness on Earth so that the Angels may focus on the celestial.\"\n\n\"Father, would that make me a real Crusader then?\" I asked.\n\n\"The realest you can be,\"\n\nI nodded. \"What must I do?\"\n\nFredrick once again proffered the old sword. \"A Judicair takes an oath taken to the Light. I have already preformed the initiation, and you have answered 'I do.' Now all that is left, is for you to take your sword, and your promise will be complete.\"\n\nSlowly I reached out my hand, and grasped the pommel of the old sword.\n\nIt was warm to touch.\n\nSuddenly, words began appearing on the blade, just above the small cross.\n\nThey read 'Fleeting Light'.\n\nFather Fredrick began applauding me. \"Congratulations Daniel. Your sword's name is 'Fleeting Light.' Take care of that sword, as it is the symbol of your power. If the sword breaks, your promise is also broken, and you will no longer be a Judicair.\"\n\nI nodded solemnly, \"I understand.\"\n\nFather looked at me closely. \"Yes ... yes I believe you do understand. And with that, I can tell you of tonight's mission.\"\n\nI gazed at my sword, and the letters inscribed on it. \"I am to slay a demon this night, aren't I Father.\"\n\n\"Yes Daniel.\"\n\n\"What do I need to know?\"\n\nHe sighed. \"Look for a dark haired man of unearthly beauty and fiery red eyes. This is the demon, and this is the foe we must face, lest he slaughter the entire Regiment.\"\n\nI bowed, \"It will be done Father.\"\n\nHe raised a hand. \"Do not be so rash or proud Daniel. You need more than that. This is the advice I give you. His name is Prince Devnikolus, the Demonic Lord of Destruction. He is one of the Ten Immortal Princes of Hell.\"\n\nFather Fredrick handed me a small gold cross with a rune scratched on it.\n\n\"Throw this at his feet and challenge him to a battle. Say these words exactly, 'I challenge you Devnikolus, upon my immortal soul I wager a duel for immortality.' Wait until he accepts, else he may either run or enlist help. When he accepts he will be trapped to a duel of single combat. When this happens throw the cross at his feet. With luck the magic of the cross will hold his demonic powers at bay long enough for you to deal a mortal blow.\"\n\nI nodded silently, and pocketed the cross.\n\nFather quickly ran his eyes over me. \"That my son is all I can do for you.\"\n\nHe clapped me on the shoulder.\n\n\"Thank you Father,\" I said.\n\nHe gave a slight bow. \"Go in peace, to love and serve the Lord.\"\n\n\"Thanks be to God...\"\n\n(Paris 1623 Flower and Oak Inn)\n\nI could feel myself waking steadily this time. One of those times when your consciousness simply crawls from out of sleep.\n\nThe room was warm.\n\nA small coal fire burned in the fire place. I was sitting in a small wooden rocking chair in the common area of the Flower and Oak Inn. It was just outside Paris.\n\nI rocked back and forth.\n\nBack and forth.\n\nI'd had that dream again ... meaning I was getting closer...\n\nAnd that was all that mattered.\n\n -------\n\nPleasurable Torture\n\n (France 1623, Chateau)\n\n-Devnik-\n\nShe was here.\n\nI could sense her.\n\nAt the top of the spiral stairs, standing in what must be total darkness, was Maria. It felt strange to have her in this room. It somehow felt very personal, as if I were sharing an embarrassing secret.\n\nMy chambers were furnished exactly like the cave was. But here, in this house, the furniture was original, and not the product of unholy trickery. The only light of the room was from the marble fireplace.\n\nIt was identical to the fireplace we spent a week gazing into in the cavern. I lay on the same red silk bed that she had wished ... no, begged, for my physical love. An identical table to the one she gorged herself on sat in the corner, set with the same delicate silverware.\n\nIt was like we never left.\n\nBut we had.\n\nShe was now in my most private of sanctums. I had trusted a member of the Light with the one place on this Earth I felt safe. But she was MINE.\n\nMine to fuck.\n\nMine to control.\n\nMine to ... love?\n\nNo.\n\nA demon has no soul in the eyes of the Lord. One with no soul cannot love. Of that I am sure. There is no hope for one such as me.\n\nShe still stood there. Unsure ... and just a little bit scared.\n\nI smiled, and called to her.\n\n-Maria-\n\nThe stairway was cramped.\n\nDark stone pressed in from all sides. The only light was a dim flickering glow that came from down the stairs.\n\nThis room felt ... nice.\n\nIt was as if I had come home. I had never felt as safe anywhere. Not at the sleazy brothel, not in the 'Wooden Ladle' where I cleaned dishes, nor at the orphanage where the Spanish nun Sister Maria took care of me ... and named me.\n\nI doubt I felt as safe in my mother's womb.\n\nI was suddenly fearful... 'What is wrong with me...? This is a demon's chambers, an agent of Satan! And I felt no fear ... just an overpowering feel of ... coming home.'\n\nThe candles all along the stairway suddenly burst into life. His power over fire unnerved me.\n\nHIS voice rang out from deeper in the depths of the chambers. It echoed off the low stone walls.\n\n\"Maria! ... Come!\n\nHis command resonated with my very being.\n\nMy body interpreted in two ways.\n\nMy legs indeed started moving down the stairs at a hurried pace, eager to reach him.\n\nBut that's not all.\n\nI also had an explosive orgasm.\n\nTremors racked my body as I descended the steps. I bit my lip as to prevent from screaming. My knees would have given out if they weren't under orders to bring me to him.\n\nI continued down the endless staircase. I could feel my own juices running down my legs. My eyes were lidded, and I could feel my chest heaving.\n\nHave I said before that his effect on me is not healthy?\n\nI came around the last bend in the spiral stair case, and descended the last stair.\n\nThe warmth of a fire hit my face, sending tingles down my already alert body. Lying with his head propped up by red satin pillows, was Devnik. He wore a black shirt that was unbuttoned, lending me a good look at his alabaster chest.\n\nIt was only till I had made a complete inventory of Devnik, that I noticed the rest of the room.\n\nIt was the same as the cave. All the furniture was the same, and in similar places.\n\nIt was like we never left.\n\nI saw a slow grin creep its way over his all too perfect face.\n\n\"Are you just going to stand there or are you going to be a good girl and give your Awakener a kiss? He said amusedly.\n\nI hesitantly tested myself, to see if I was compelled to kiss him, or if I could choose. To my surprise and delight, I was under my own will.\n\nI walked up to him, pretending to pucker my lips. I then drew back my hand and slapped him as hard as I could. His head snapped around, and fell back onto the bed.\n\nMy hands were shaking with embarrassment, and seeing him look so smug and possessive had driven me over the edge.\n\nSuddenly in blurring motions I was somehow under him, with my arms once again pinned above my head. His blazing red eyes stared into me.\n\n\"What was that for you ungrateful wench?\" He said, with anger evident in his voice.\n\nI hissed at him, which I admit was rather childish.\n\n\"You!\" I shouted. \"You and your damned control over me, makes me so furious.\"\n\nHe looked puzzled. \"I haven't done anything to you.\"\n\nI laughed in his face. \"Oh yeah,\" I said. \"Smell me.\"\n\nHe leaned his pale face down to my stomach, and drew a deep breath.\n\n\"You smell like sex.\" He said simply.\n\nI struggled and kicked from under him in rage. \"OH REALLY? DO I?\" I screamed. \"That's because I came on myself like a little bitch when you yelled at me up the stairs.\"\n\nUnderstanding dawned on his stupid stupid perfect demonic eyes. \"You mean, when I...?\" He trailed off.\n\n\"YES,\" I shrieked.\n\nSpittle flew up and hit him in the cheek.\n\n\"You stupid bastard, my life is ruined thanks to you, and all I can think about is YOU! I feel uncomfortable when I'm not near you. Which is pathetic. Ever since you awakened me I've been nothing but a pining bitch in heat for you, and apparently since everyone is telling me I'm immortal, I'm going to be your pining bitch FOREVER.\"\n\nI took a deep breath after my rant. I then tried to surprise him. I yanked my head up and tried to bite his face.\n\nHe was ready for me.\n\n\"STOP.\" He yelled.\n\nI could feel myself losing control over my body. My muscles would not obey my commands, my bones felt frozen.\n\n\"Lie down on the bed,\" he said, his voice taking on a scary calm.\n\nI felt my head lean back and rest itself on the pillows. He got off me, and now stood at the foot of the bed, watching me lie prone in front of him.\n\n\"I'm going to punish you,\" he said, once again calmly.\n\nI viciously tried to force my body to attack him. But it simply lay listlessly on the bed, waiting for the next command.\n\n\"Cum,\" he said.\n\nAn overpowering ripple washed over my body.\n\nI could feel my sex throbbing uncontrollably under my dress. Moisture poured out onto the back of my dress. I could feel my cheeks flush, whether it was from passion or embarrassment I couldn't decide.\n\n\"Cum,\" he said.\n\nThis time it was even stronger. Ecstasy was all I could feel. My nipples stood at attention, begging to be touched. My sex felt hot and empty, as it contracted around air. It begged for a hard cock. I still couldn't move.\n\n\"Cum, ' he said.\n\nI couldn't take it. It was torture with pleasure.\n\nDarkness encroached on my vision. I was going to pass out. I was past embarrassment now. All I wanted was a cock. My sex was in overdrive, and all my feminine urges had come to the surface.\n\nI wanted to feel him ruthlessly pounding me. I wanted to feel his seed seeping into me. I wanted my belly to be full with his child. I wanted him, but he seemed content to only play with me.\n\nMy last thought before the pleasure took me, was that even though I thought of him as a lover, he seemed to treat me as a toy.\n\n-Devnik-\n\nI think she passed out. Her breasts were heaving underneath her dress, and her cheeks were flushed. Her eyelids fluttered, and her mouth was slack, with some drool oozing out from a corner of her heart shaped lips.\n\nA large wet spot was visible on her dress. Whether she liked it or not, her body certainly enjoyed my commands.\n\nMy cock was rock hard, but I did not feel like satisfying myself with an unconscious girl. Instead I decided to have some more fun. I had felt sorry for her long enough. I would no longer watch my commands around her. She will simply have to learn to do what I say.\n\nI brushed some blonde locks from her eyes, and tucked them behind an ear. I then leaned down next to that ear, and began whispering more commands.\n\n\"Maria.\" I said. \"When you are in this room your clothes will feel unbearably itchy, and no amount of scratching will dull the itch. The only way to gain relief, will be to remove your clothes.\"\n\nI paused and thought of my next command.\n\n\"When you are in my presence your sex will always be wet and aroused.\"\n\nThis was fun.\n\n\"Your orgasms, no matter how great, will never be satisfying unless you receive them directly from my cock.\"\n\nI thought again, and realized one important one.\n\n\"Every time you attempt to hit me, you will have an explosive yet extremely unsatisfying orgasm.\"\n\nI could get used to this.\n\nFor the rest of the night I paced my chambers. I gazed into the fire some, and I gazed at my unconscious blonde beauty.\n\nWhenever a new command came to my head I would whisper it into her head. I was careful to only command physical things to her.\n\nHer personality was perfect, and I didn't want to change a thing.\n\nI plopped down into a black arm chair, and smiled to myself.\n\nMaria was right, with me in control her life would never be the same.\n\nShe was in for a few surprises tomorrow.\n\nMy nighttime orders would see to that.\n\n -------\n\nCruelty\n\n -Maria-\n\nI felt hollowed out. As if someone had reached into me and pulled out all my insides. My muscles were too sore to even think about, let alone move.\n\nI could feel the soft silk sheets under me, and the satin pillow that I rested my head on.\n\nI cracked my eyes open.\n\nThe fire had gone out, but the room wasn't cold.\n\nDevnik wasn't here.\n\nThat made me sad.\n\nI shook my head violently, trying to clear the unwanted demon from my mind. The shaking reminded me of how sore I was.\n\nI stretched slowly, and listened to my bones crack. I felt better, the ache was still there, but it was manageable.\n\nThere was a popping noise, and the space at the foot of the bed became distorted, as if I were looking into a stream.\n\nThe distortion settled into Jon the Butler. He was holding a tray.\n\n\"Ah,\" I screamed before I could think. I quickly gathered up all the covers around me. I swear I had passed out dressed, but it seemed Devnik enjoyed playing dress up doll, and had removed my clothes.\n\nHe smiled, \"I thought you might be interested in a spot of breakfast.\"\n\nAt that time, my stomach growled. I could feel myself turning red. It seemed I needed to eat more than once a week after all. I was famished.\n\nJon's smile turned into a grin. \"I thought so.\"\n\nHe set the tray down in front of me. \"You'll have to excuse me if my cooking is not as good as whatever Devnik has been feeding you. But I, unlike him, cannot simply wish food into existence.\"\n\nI wasn't listening to him. The tray was piled high with croissants and jams of all colors. Also set out on the tray was a small pot of tea.\n\nI picked up a croissant and a knife and lightly spread the red jam across it.\n\nI took a bite.\n\nSome of the flakes fell off and landed on my chin.\n\nIt was the best thing I'd ever tasted.\n\nI quickly picked up another pastry and this time simply dipped it in the jam rather than wasting time with the knife. I quickly devoured the entire plate, and I was still hungry.\n\nJon was gazing at me astonished.\n\n\"Hungry were we?\" He asked amusedly.\n\nI simply nodded. \"Did you make those?\" I asked.\n\nHe smiled, \"I made everything from the jam to the pastries.\"\n\n\"Those were the greatest things I've ever eaten.\" I said with all seriousness.\n\n\"When you have lived as long as I have, you learn how to cook.\"\n\nI looked down at the empty plate. \"Well maybe you can teach me sometime.\"\n\nJon suddenly looked surprised. \"You mean you're staying for a while?\"\n\nI looked up at his scared face. \"Why is that shocking?\" I asked, feeling a little uneasy.\n\nJon looked up at the ceiling. \"Oh, well, Devnik has never brought anyone here before. But, um, in the stories that he tells me, he usually uses his mistress of the time ... then kills her.\n\nHe ended awkwardly\n\nI could feel my limbs go cold. Devnik killed other girls like me. Would he kill me to? More importantly would I let him?\n\nOr would I run away and suffer the torment that would be leaving his presence.\n\nI didn't know what to do. So I ignored it, and made small talk.\n\n\"What time is it Jon.\"\n\nJon was watching my face closely, as if looking for panic.\n\n\"Just after sun set,\" he replied. A smile once again broke through his somber facade. \"I see you have adapted to Devnik's sleeping schedule.\"\n\nI nodded again, wonder why Devnik was nocturnal to begin with. I looked down at the bed and furrowed my brow. Maybe it was time for a confrontation. Ever since we met I had simply gone along for the ride. But now I needed to know where I stood. Did I continue on with him? He was a demon after all and I still felt uncomfortable with that. Jon said he had killed the women he had slept with in the past. So does that mean I should return to Paris? I would have to beg for my job back after missing a week. And I really, really, hated being a prostitute.\n\nJon cleared his throat.\n\nI looked up to meet his eyes.\n\n\"You know, Devnik is expecting you in the study after you finish your breakfast,\" he said.\n\nMy heart fluttered.\n\nI probably looked a mess, but I suddenly had an unbidden urge to see him again. I couldn't explain it. But the feeling of separation had already set in, and my body felt as if something was missing. It was a feeling that made me quite nauseous.\n\nI stood, and wrapped the silk sheets around my body. Using them as a garment, I made my way to the spiral staircase.\n\nJon called from behind me. \"Um, madam, I do have a dress for you.\"\n\nI looked over my shoulder. \"No time, I've got to see him now. The sheets will do.\" I continued up the stairs.\n\nMy legs remembered the way to the study even if my mind did not. I would have bet my legs knew the way to Devnik even if he was on the other side of the sea.\n\nI burst through the oak double doors, clutching the sheets to my chest and searched for Devnik.\n\nHe was directly ahead.\n\nHe was seated behind a large desk, his feet up on the table, reading leather bound book.\n\nHe didn't look up. He didn't even acknowledge me at all.\n\nI continued to look at him, willing him to notice me.\n\nHe continued to read. Strangely enough, I began to feel myself get wet.\n\nVery wet.\n\nI tried to secretly rub my legs together and relieve some of the itch that my aching cunt seemed to be generating.\n\nThis was absurd. I was leaking like an old kettle from simply looking at him. I refused to believe that anyone could be so desirable.\n\nHe turned a page.\n\nStill he did not look at me.\n\nUnder the sheets my sex was throbbing uncomfortably, it was eager for him. If he threw his book aside and mounted me right now, I would be the happiest half woman on the Earth.\n\nHe turned another page.\n\nI could feel my legs getting weak. Still I craved sex. Still all I had done was gaze upon his perfect face.\n\nWas this my fate, to be an oversexed doll in his presence, and a pining wretch when separated from him?\n\nUnintended mewling sounds escaped my lips.\n\nHe looked up, and his red eyes met mine.\n\nMy legs gave out, and I felt myself tumble to the floor. My fall was absorbed by the sheets around me, and I was now crumpled into a silk ball.\n\nI began rubbing my sex with wild abandon under the sheets, trying eagerly to alleviate the arousal that was possessing my body.\n\nI could hear his boots against the wooden floor as he neared my crouched form.\n\nI increased the pace of my rubbing. Wet sounds of sex were audible from under the sheets.\n\nI felt a tug on my hair. I was being lifted. My feet were forced to support my weight, else my own hair would scalp me.\n\nI felt his lips right next to my ears, and could feel his cold breath on my face.\n\n\"Good evening Maria,\" he said calmly.\n\nHis voice is lovely, I thought. As my mind exploded into pleasure.\n\nI could hear him chuckling above me.\n\nBut at the moment it sounded very far away.\n\n -------\n\nThe Guilty Demon\n\n -Devnik-\n\nI felt a strange ball at the back of my throat.",
        "I swallowed ... Still no good. No matter how many times I tried to dismiss it, but it would not fade away. It made me ... uncomfortable, like a forgotten memory combined with a hint of nausea.\n\n... It is hard to describe.\n\nI looked down at the beautiful Aethling whom I was grasping by the hair. Tears fell freely from her glistening silver eyes. Her pale legs quivered with the effort of standing and suffering an unwanted orgasm.\n\nShe looked to be about at her breaking point.\n\nThe ball was still at the back of my throat.\n\nIs this ... guilt?\n\nI don't know.\n\nShe looked so beautiful. She looked so fragile. She looked so hurt ... and I was the one hurting her.\n\nI dropped her hair as if it burned me.\n\nShe thumped gracelessly to the hard wood floor. She squirmed and moaned.\n\nWhat have I done?\n\nI quickly tear my gaze from the blonde vision tangled in bed sheets on the floor.\n\nI walk back to my desk in a daze, and sit down heavily. My hands cradle my head.\n\nI don't know what is wrong with me. That damn ball still sits in the back of my throat ... and I still couldn't bring myself to look at Maria.\n\nI did this every time I had a mistress. Slowly I'd enslave her using either my magic or my blood ... and then I treat her as chattel ... until she bored me.\n\nThen I savored killing her. After which I moved on to my next tryst.\n\nThis time felt different though.\n\nAll I knew was the guilt. And it consumed me.\n\n-------\n\nSeconds felt like minutes, minutes felt like hours ... and the moon crept through the skies. Miserably I stared at my desk with my head in my hands.\n\nI didn't know what time it was.\n\nI didn't care.\n\nI felt soft arms wrap around me. I felt hair tickle the back of my neck, and warm breath on my cheek.\n\n\"Devnik ... Devnik ... I'm fine ... please look at me ... please just look at me.\"\n\nI slowly raised my head. Maria was standing behind me, she quickly maneuvered herself into my lap. Her shining silver eyes sought mine.\n\nI couldn't look away.\n\nShe was so soft in my lap.\n\nShe spoke.\n\n\"Devnik ... is that how you treated the other girls?\" Her words were soft, as if she were inquiring about the stars or the weather. There was no accusation, in those honeyed words.\n\nI was startled that she knew of my other mistresses. But surprise lead back into the feelings of guilt, and I was miserable again.\n\n\"Yes.\" I said quietly.\n\nShe nodded, as if understanding that I dominated and murdered countless young girls before her.\n\nShe pressed her head into my shoulder. Her blonde tresses fell in waves on my arm. They were as soft as a silk weave.\n\n\"Why couldn't you treat me that way Devnik? I wouldn't resist if you did.\"\n\nI wrapped my arms tightly around her.\n\n\"I can't Maria. Something about you prevents me from using you like that.\"\n\nShe quietly reached up and pecked me on the cheek with her soft lips.\n\n\"I'm glad.\" She said in her same soft cadence. She once again burrowed her head into my chest. I stroked her back gently with the tips of my fingers.\n\nI gazed down at the top of her little blonde head. I swallowed. The ball was still in the back of my throat.\n\n\"How can you be so calm about all this?\" I asked dejectedly. \"You just saw firsthand what a monster I can be. Do you know what I was thinking about when I was holding you by your hair?\" I paused.\n\nI felt a soft shake from her head.\n\n\"I was wondering if I could fuck you so hard that you would bleed. Then if you did bleed I would have thrown you across the room for bleeding on my study floor ... it is an old routine I have done for decades.\"\n\nThere was silence...\n\nThen she spoke... \"What would you have done next.\"\n\nI paused... \"I would have listened to you beg for mercy, and then if I still wanted to keep you I would continue fucking you ... if I didn't ... I would have killed you.\"\n\nShe shivered.\n\n\"How many girls have acted out that little dance with you Devnik?\" She asked morosely.\n\n\"Eight.\"\n\nShe broke down into tears again.\n\n\"I don't believe you ... your nice ... you were nice to me before today ... why did you think to do that to me?\"\n\nI sighed. \"It's what I am.\" I replied coldly. \"Demon's have no conscious ... watching entire families burn means nothing to me.\"\n\nAs I said that, the little ball of guilt seemed to grow larger.\n\n\"It just seemed like the right thing to do ... you were getting too close ... other girls have been in love with me before ... but I never felt anything for them.\n\nI felt her stiffen in my lap. \"You think I love you?\" She asked.\n\n\"I know you do.\" I replied softly.\n\nShe nodded as if accepting it as fact.\n\n\"But you don't love me.\" She said timidly.\n\nI paused, and carefully thought of my answer. I took a deep breath.\n\n\"A week ago I would have said a demon couldn't love ... I'm not sure I love you ... but I at least ... feel something for you.\"\n\nHer body relaxed into mine.\n\n\"That will do for now.\" She said contentedly.\n\nShe started to hum quietly in my lap. I continued to stroke her head.\n\nWe sat like that for a time.\n\n-------\n\nMaria eventually fell asleep in my arms, and began to snore prettily into my shoulder.\n\nI let her sleep her traumatic experience away.\n\nI quietly disengaged one of my arms from her, and raised it.\n\nI snapped softly.\n\nInstantaneously Jon appeared before me.\n\n\"Yes sir,\" he said in a whisper.\n\nI studied my butler.\n\n\"Jon, I want you to spend the daylight hours tomorrow finding out everything you know about Angelic Awakening. I want to know its bylaws and its customs, I want to know its strengths and its weaknesses, and I want it by the time I awake tomorrow night.\"\n\nJon bowed low.\n\n\"At once milord.\"\n\nJon turned tail and exited through the double library doors.\n\nI turned my attention back to the little ball of girl sitting in my lap. Her lips were pouted and half open, and her hair was a strewn mess.\n\nI protectively wrapped my arms around her. I promised to myself I would take care of her.\n\nI finally swallowed the ball of guilt.\n\n -------\n\nSin or Suicide\n\n -Daniel Fleeting-\n\n(1097 AD. Somewhere outside Jerusalem)\n\nThe battlefield was decided. It was a great dusty plain, with mountains to the far west, and Jerusalem straight ahead barley visible in the distance.\n\nI could see the banners of the Seljuk Turks standing their ground a mile ahead of our regiment.\n\nI grasped my holy weapon tighter. I paid no mind to the mortal foes that made up the enemy rank. I kept my eyes moving constantly, searching for the demon.\n\nFather Fredrick said I'd know him when I saw him.\n\nHours rolled by. Our two opposing armies simply stared at each other, waiting for the other to make the first move.\n\nThen I saw him. A tall man in black armor strode out in front of the Seljuk lines. A red mist clung to his body, and I felt an overwhelming sense of evil from him.\n\nHe began to pace in front of the enemy. He was talking to them, encouraging them to slay God's soldiers. They began to stomp their feet.\n\nA steady beat began to fill the air. It was a beat of death, and the demon was conducting.\n\nThen the demon casually pointed towards us.\n\nThe Seljuk's roared and ran at us. They ran past Satan's creature as if he were a rock fixed in a stream. They came on horses and they came on foot.\n\nThey came bearing sword and axe, bow and spear. I heard Crusader Commander Williams raise his voice.\n\n\"Men at the ready,\" he yelled.\n\nAnd then they hit us.\n\nThe first one to fall was one of ours. He took an arrow to the throat. He was a youth with blonde hair and round eyes.\n\nThe second was an older Norse man. Someone I suspect simply marched across the world to die on a battlefield. An axe was planted in his head, cutting it in half.\n\nThe deaths mounted exponentially, seas of blood stained the dirt field.\n\nOver the din of the shrieks and cries of pain, I heard laughter. I tore my eyes from the heathens slaughtering God's warriors.\n\nMy gaze once again found the demon.\n\nHe was laughing.\n\nIt was the most beautiful sound that I had ever heard. It was like a lilting flute intermingled with bird song and a babbling brook.\n\nIt was terrifying.\n\nMy sword started to glow.\n\nA golden aura seemed to emit from it. My terror seemed to subside, and a feeling of warmth washed over me. I felt my feet take a step forward towards the demon.\n\nSuddenly the demon stopped laughing.\n\nHis blazing red eyes and beautiful pale face locked onto mine. My blood stopped in my veins.\n\nA thins sneer emerged on his fine lips.\n\nMy sword grew brighter, and I kept walking toward him. No enemies stepped within my path. I proceeded unchallenged, and my steps grew larger. The demons sneer turned into an ugly grimace.\n\nHis lips didn't move, but I could hear his voice, it\n\nwas cold.\n\n\"Little human, you know more than the rest of the puppets, yet that sword you hold is not a toy. Turn around, for you know not what you deal ... you should just...\"\n\nHis voice all of a sudden sounded muffled. Instead a warm buzz seemed to fill my ears. I felt concentrated, and focused. His presence was cleared from my mind.\n\nAll of a sudden he broke out into a huge grin. The smile twisted his face even more, making him seem like a snarling animal.\n\nI stood not ten feet from the monster. Well within hearing range. The demon began walking towards me.\n\n\"You're a Judicair,\" he said calmly.\n\nThe warmth was still present in my mind. I simply nodded serenely. A voice spoke through my mouth. It sounded like my voice, yet the words were not mine.\n\n\"Yes Prince Devnikolus, Lord of Destruction, I am a Judicair, and I have come to return you to hell so you may meddle in this war no more.\"\n\nDevnikolus cocked his head to the side.\n\n\"You're new.\" He said. \"Your Celestial personality has not integrated with your human one,\" he paused, \"If I remember correctly, that means you were made this year, perhaps even this month.\"\n\nI felt the voice talking again. \"It is true that we are not yet one, and that we are new, but Raphael himself wishes you banished back to hell. Much holy power has been invested in us for this task.\"\n\nI didn't remember being told all this. But the voice seemed confident. I contented myself to simply watch.\n\nAll of a sudden the voice was speaking to me, silently in my head.\n\n~Daniel, you must fight, I am too weak and too new to fight this demon. But we have been given power, great power to vanquish our foe~ The voice said.\n\nI gripped the blade tighter. I knew my task.\n\nDevnikolus shrugged, \"It would seem you are not to be dissuaded, very well.\" The demon waved his hand, and a red spark appeared.\n\nThe spark grew and glittered, and formed shape. The demon now held a sword with a black blade and a silver hilt, with a blood red ruby in it's pommel.\n\nI remembered what Father had told me.\n\nI threw the cross down on the ground. A green spark flashed. The demon screamed. I looked up at him. He was gazing at the cross. His eyes seemed less red, as if they had been drained.\n\nThe voice spoke through me again. \"Prince Devnikolus, I challenge you to a battle of immortality.\"\n\nThe demon tore his eyes from the cross, his face still twisted in obvious discomfort.\n\n\"Clever,\" he whispered. \"I am obligated to accept your challenge.\" He maneuvered his sword so that the point touched the ground. \"To begin our battle touch the tip of your blade to the earth.\" He said.\n\nI complied, and slowly reversed my glowing blade till it pointed downwards. I slowly sunk it into the earth.\n\nI didn't even see him move.\n\nHe was a blur of motion. His blade suddenly cleared the space where my head was ... or would have been had my legs not decided to move themselves.\n\n~Your mortal speed is not fast enough to fight Devnikolus. You must use my power. I cannot help you like that again. Our connection is still too new, I exhausted myself saving us. The voice said.\n\n'How do I tap this power?'\n\n~Just think it~\n\nI thought it.\n\nSuddenly, I could see better. It was if dirty had been wiped from my eyes that had been there my entire life. I felt full of energy.\n\nThe demon snarled.\n\n\"I guess I'll have to give this a decent go.\" He said half amusedly half angrily.\"\n\nI turned my new and improved eyes at him. It was if he was moving slower. Not slow ... but like an agile human, rather than a blur of unholy speed.\n\nI easily brought my sword up to counter him. My parry caught him by surprise. The look in his eyes was incredulous.\n\nI slid my sword down his blade and tried a basic riposte. The demon blocked easily, though he looked surprised to be on the defensive.\n\n~It's no good. You might not realize it, but we were moving at the same speed as him. Raphael must have grossly underestimated this demon. I know you didn't know, but when you attacked at that speed you wasted almost half of our given energy.\n\nI gulped.\n\n'What happens when we run out of power?'\n\n~We slow down, and he goes back to being a blur ... and I won't be able to dodge us a second time.\n\nWhile our mental conflict was going on the demon was viciously attacking us, furious that we could keep up with his blindingly fast attacks.\n\nI was purely using defensive maneuvers, and trying to move as little as possible.\n\n~We have a little less than a third of our powers left.\n\n'So you mean we've failed? The army will be slaughtered by this monster!'\n\n~Maybe we are not meant to survive this encounter.~\n\n'What do you mean? If we die then there is nothing stopping him.'\n\n~We could take him with us. Swordsmanship is useless if your opponent is willing to die to kill.~\n\nA small part of me felt a twinge of fear. I have always feared death. My priest at home told me this was why I devoted my life to God, to escape death. I disagreed wholly, but ... still.\n\n~Do not fear Daniel, I will take control, I have enough strength for this.~\n\nI wanted to protest, but I felt my limbs go numb, and no matter how much I was screaming at the voice in my head, I could feel him taking over.\n\nMy body all of a sudden dropped it's guard.\n\nThe demon pounced, and sunk his sword into my shoulder. It was a mortal wound. But this was the voice's plan. For as soon as his sword pierced my shoulder, the voice drove our sword into his heart.\n\nThe demons sword disappeared in a wisp of smoke, and my sword stopped glowing. The voice let go of the pommel, and it stayed stuck in the demons chest.\n\nThe demon, however, did not shriek or cry, he simply stood there.\n\n\"I am bested it would appear,\" he said in a calm melodious voice. \"Your wound is killing you, but mine is fatal.\"\n\nI felt myself gain control of my limbs again, and with it came the pain. My shoulder felt as if it were on fire. I fell to my knees in front of the demon.\n\nThe demon continued. \"In a moment I will burst into flames and burn away. In the ashes will be a small black stone with a glowing red pentagram etched into it. To claim your immortality simply hold the stone to your heart and say 'I accept'.\n\nThe demon took a deep breath, and grimaced slightly. \"This really hurts you know,\" he said, indicating the sword.\n\nSuddenly flames seemed to spring from nowhere, and engulf the demon. They spread quickly, but the demon made no sound. As quickly as they had come, they disappeared, along with the demon.\n\n~We did well. Leave the stone be. We will succumb to the wound in a moment, and then we shall pass into nothingness, until the War on the demons is won, and the Lord comes and judges the living and the dead.~\n\nI wasn't listening. I was slowly crawling my way to the ashes, my eyes fixed on the luminous red glow.\n\n~What are you doing ... STOP ... STOP ... you don't know what you're DOING.~\n\nI slowly clasped my hand around the stone. It was warm to the touch. It seemed to thrum with a life of its own.\n\nLike a little miniature heart beat.\n\n~STOP, no, you'll condemn us both. Accepting demonic deals is a SIN!~\n\nWith trembling hands I tore away my worn leather jerkin, and placed the rock next to bear skin, right over my heart.\n\n~No, no, NO, I don't have the energy to take over again. STOP, for the LOVE of GOD STOP!~\n\nThe rock felt right against my chest, as if it were staving off the cold of death that seemed to be seeping from my wound.\n\nIn the background the voice was weeping hysterically.\n\n\"I Accept.\"\n\n -------\n\nMy Dark God\n\n (France 1623, Chateau)\n\n-Maria-\n\nVisions of sunshine and lilies danced before my eyes.\n\nA beautiful green field with a sparkling stream babbling cheerfully in the background. The sun was a warming beacon in the sky, allaying my worries, whispering softly that everything was all right.\n\nThen why did I feel so uncomfortable?\n\nSuddenly the field turned cold, and the warm sun turned to an icy moon. A chilled fog rolled into the meadow, and the stream no longer sounded inviting, but rather a dread promise of bone chilling waters.\n\nI was no longer alone in my field.\n\nTo my right stood an Angel with flaming red hair.\n\nIt was Cariel.\n\nShe was dressed in a blinding white. It was a white so pure and bright that it hurt my eyes to look at it. It seemed to glow even in this darkest of nights. In her hand she grasped a silver sword. It had golden runes etched on it that seemed to move and glide along the flawless blade. She was a picture of perfect beauty, and deadly grace.\n\nYet she did not look at me.\n\nHer gaze was fixed just past me. Her eyes were locked on the other side of the field ... because that was where Devnik stood.\n\nDevnik stood calmly amongst the grass and flowers of the field. He was wearing a dark black cloak, which was clasped with a dark ruby at his neck. His dark black hair framed his pale face, and accentuated his raw prowess. He loosely held a blade as dark as night in his left hand. His red eyes were glowing, and his face was turned down in a sneer. He had never looked more the warrior. He had never looked more the demon ... and it was intoxicating.\n\nI had never felt more owned by him ... I wished to simply drop to my knees and serve this ... creature ... this ... dark god.\n\nHe could tell me to slaughter and kill innocents and I would do it. I would do it happily ... simply because he asked ... because I wanted to please him ... because I needed him to be pleased with me.\n\nSuddenly Cariel's voice pierced the frigid night. It was the dream like candor that I remembered, except this time it was laced with power.\n\n\"We know who you are, Prince of Destruction ... I have been sent to correct this unholy blemish upon the order of things ... I will send you to hell, and Gabriel, Michael and Raphael will assemble, and wrest the control of the Aethling from your demonic control.\"\n\nDevnik's sneer turned into a full blown snarl, his red eyes flashed, sending a lurid glow across the field.\n\n\"She is MINE.\" His voice sounded inhuman. Like a mix between a wild animal and a vengeful spirit, bent on enforcing its will.\n\nYes, I thought ... I am his ... I belong to him ... to my dark god. This time I really did fall to my knees. My eyes fixated upon Devnik ... upon my master.\n\nCariel's silver eyes glittered dangerously.\n\n\"You will fall to my might demon,\" she shrieked.\n\nCariel suddenly became a blur of silver, as she streaked towards my dark god.\n\nMy master raised his sword, and grinned the grin of a mad man.\n\nJust before their swords clashed his eyes met mine.\n\nI woke in a cold sweat.\n\nI was in a bed, with soft silk sheets.\n\nDevnik was behind me, his strong body pressed against me from behind. I felt his cock. It hard even though he was asleep. It was wedged between my bottom. His arm lay draped across my body, and his hand was possessively holding my breast.\n\nI let out a small sigh, and tried to sink into his comforting embrace. The room was dark and cool, but not cold, and it was warm in the bed.\n\nIt was safe in the bed."
    ],
    "authorname": "Noble_Truth",
    "tags": [
        "mind control",
        "male dominance",
        "paranormal",
        "romantic"
    ],
    "category": "Mind Control",
    "url": "https://www.literotica.com/s/celestial-matters"
}
{
    "title": "Everyman's Handy Guide to Cunnilingus",
    "pages": [
        "It's been noted that, just perhaps, members of the male gender haven't fully grasped the essential techniques of the wondrous sexual act known as cunnilingus. I will endeavor to use my decades of experience with hundreds if not tens of thousands of satisfied women (some of whom had to undergo physical therapy afterwards to regain proper use of their orgasm-weakened legs) to help those poor unenlightened men throughout the world.\n\nOf course, some of you do not need this advice. For those of you I say, good men!! The rest of us hate you, of course, and tell women behind your backs that you are actually nice, Church-going guys who'll care for them and listen to them just to make sure that you never again in your lives see live poonage. We're guys. What can we say?\n\nFirst, the act of cunnilingus should not be undertaken without some preparation. Proper physical preparation includes basic stretching exercises, especially the neck which will receive certain abuse by being yanked about mercilessly during the act. Other preparation involves breathing exercised designed to increase lung-capacity. Women, for reasons unknown, tend to hold a man's face into their nether regions during cunnilingus much as a mafia hit-man might hold a victim's face in a swimming pool - until they stop wriggling. Dying during cunnilingus is considered gauche in polite circles no matter how legendary it may make you inside countless frat houses.\n\nSecond, a man should never proceed directly into cunnilingus. There is a concept known as foreplay which should always be undertaken. Contrary to popular belief, foreplay does not consist of kissing her, smacking her ass, and saying \"You wet yet, baby?\". This is also considered gauche and may get you shivved. You should take some amount of time in kissing her and caressing her back and arms gently, proceeding to her legs. Take your time. It's not as if you have an Academy Award ceremony to attend. You don't have anything in the microwave. Take your time. Your patience will be rewarded.\n\nOnce you have given her the proper amount of foreplay, she will give you subtle hints that she is ready for more intimate attention. She may do such things as guide your hand to more intimate areas or take your genitals in her hand and softly say \"If you don't lick my pussy, I'll squeeze these things into pate\". For some reason, this is not considered gauche. Do not try to question her at this point. She is a woman on the edge of either satisfaction or homicide.\n\nThird, move swiftly and unhesitatingly toward her genitalia. Kiss the insie of her thighs gently. Nip them softly with your teeth. Again, should she take vise-like hold of your testicles, feel free to move straight to the vagina. Use your tongue as a master artist might use a paintbrush to paint a delicate landscape. Run your tongue up and down her vagina slowly and gently, to increase her desire (again, paying close attention to any sudden and possibly felonious moves she might make to hasten you along). Part her labia with your fingertips (taking care not to use your fingernails. Try scratching your nails along your own penis. Go ahead - I'll wait until you've stopped weeping) and gently dart your tongue into the succulent inner folds. Taste her as you would the sweetest ambrosia, regardless of whether it's ambrosia there or not. Women are like wine: Some have a piquant and insouciant taste. Some are seasoned and spicy. A rare few taste of old dishwater. Suck it up, men, and get your tongue in there.\n\nFourth, once you have whetted her appetite, move toward her clitoris. Please don't stop and ask at this point where that is. If you haven't found it by now, look it up on the internet. But for those of you who won't do this simple thing, I'll give you a hint. It's up there at the top of the vagina and, if yuo've been following my advice thus far, it should poke you right in your lazy, uneducated eye. Don't cry. You deserved that.\n\nAgain, staying with the painting analogy, use your tongue to circle around her clitoris as you would paint the bright loose clouds of a June morning. You may, if you wish, gauge her reactions (which may include hair-pulling, demonic moaning, and head smacking) to move directly onto the clit itself. If when you do this you hear a hearty moan, you should smile and stay right where you are. You have found the Promised Land. Now, bring it home. There is an important note here. You may use your teeth, but DO IT LIGHTLY! Again, ask her to bite your penis for a comparative feeling.\n\nOne handy cunnilingus technique I have used to great effect is that of writing words with your tongue in cursive letters. Penmanship isn't important here, but enthusiasm is. Write her name, your name, or even a love letter. The more prosaic and prolific you are, the better. A woman will only rarely complain of too much cunnilingus. Vary the pressure between gentle and hard, increasing in pressure as her excitement grows. Take care not to press too hard. This isn't a test for a rat in a maze. You won't get a food pellet. You may get something - something we call a concussion when she axe-handled the base of your skull. You're warned, so don't wheel yourself over to me later crying and asking me what your name is because you can't remember anymore.\n\nAfter some amount of time she will beging to invoke God and shudder. This is not the time to admire your handiwork. This is \"crunch time\". Get in there and bring that orgasm home to Poppa! Lick like you've never licked before! Sign your name with a great flourish and punctuate it vigorously! Beware of the fluid which will arrive, though. Take a quick deep breath and imagine that you're Jacques Cousteau, but for the love of all that's holy, stay in there!\n\nWait! WAIT!!! Beware the Thigh Clamp! Be sure that you have a full chestful of air. Once her orgasm arrives, your head will stay right where it is. No amount of frantic yanking and muffles pleading will get it out of there. You're stuck like Baby Jessica in a Texas well. I am told that there is a preparatory technique wherebly you can place your arms inside the woman's thighs which may prevent this and will allow you to do other finger-related things. I do not trust this. You run the very real risk of having your head and arms trapped betwixt her thighs. You'll be embarassed. Trust me on this.\n\nAfter the orgasm, continue to lick very lightly around the clit. Show her your caring nuturing side by licking like a cat would as a small bowl of milk. Remember that the clit becomes quite sensitive after orgasm. If you've acted correctly, you may induce a second and even third orgasm. This is good. You'll want this. Again, lick lightly. You'll know you're licking too hard as she may wince, draw back, or, in extreme circumstances, fling you across the room or kick you in the forehead. Remember, in this, like in all things sexual, the goal is to give maximum pleasure without incurring debilitating physical injury. (What about minor physical injury? That can be okay in some circumstances.)\n\nIf you can do this correctly, your sex life will improve drastically. You will find yourself the object of much affection and endless sexual encounters with your woman. You may, of course, gloat to your male friends. Never do this, though, in front of her female friends or you may never get the chance to do it again."
    ],
    "authorname": "JazzManJim",
    "tags": [
        "sex advice",
        "self-help",
        "oral sex how-to"
    ],
    "category": "How To",
    "url": "https://www.literotica.com/s/everymans-handy-guide-to-cunnilingus"
}
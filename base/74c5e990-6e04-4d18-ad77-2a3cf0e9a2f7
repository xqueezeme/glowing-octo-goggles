{
    "title": "The Next Level",
    "pages": [
        "It's been a couple of weeks now since I sucked my last shemale cock and swallowed her load, and with enough distractions, it hasn't been too difficult keeping myself preoccupied and my mind off of satiating my new fixation. Still though, I do have my moments when I sit back and imagine a beautiful girl busting her load in my mouth, but I distract myself with work.\n\nThe problem I've got now, though, is an unexpectedly large bonus for my last project that went far better than I had hoped. I can spend the cash on any one of a few needs, like some overdue car repairs, new laptop, retirement savings, whatever, but my mind keeps thinking that money could get me a whole bunch of shemale enjoyment. Who am I kidding? It's all but a foregone conclusion that I'm going to indulge. \n\nOk, it's time to be an adult though, and budget accordingly. There's enough for my indulgence while still socking enough away for other things, I just have to moderate myself. With a budget figured out and X amount of dollars set aside for my new habit, I go back to the online sites that have treated me so well in the past and peruse a bit.\n\nMany familiar faces, a few new ones, nothing that jumps out at me though, until...whoa, what is this? My God, she is gorgeous! A tall, slender built Dominican beauty named Taya with all the right curves and she says she's got ten inches of fun between her legs. Good lord, ten inches? I can't suck that much! The two girls I've swallowed weren't anywhere near that, and I could barely handle them without choking myself. It seems like way too much, but damn, I'm very intrigued. Scrolling down her ad, she says she's dancing at a local strip club. Hmmm...I've never heard of the place, looks like it caters to an alt crowd. I check the address and it's twelve miles away on the freeway, not a bad drive. \n\nThis gives me an approach. I can go in, check her out, and if I don't like what I see, just leave. Easy enough, and no risk other than a short drive and a little bit of gas. Ok, it's set, I'm going to go see her.\n\nTwo hours later, done with work, showered and ready to head out the door. Rush hour has passed, the drive isn't bad at all, I'm there in less than twenty minutes. Looking around, I think to myself how many times I've driven past this area on my way to elsewhere, and this place was never even a blip on my radar. Well, no sense wasting time, I go in...\n\nIt's almost funny, if I were to describe the place, all I could say is that it's just like most every other strip club in the world - it's dark, loud with old hair band music and smells like cigarettes, booze, stale perfume and despair. I kind of smirk at that, if only for the irony that here I am, looking for a ten inch shemale cock. I pay the cover and go find a table out of the brightest lit area near the side wall and take a seat.\n\nAlmost instantly after I sit, a waitress comes by asks for my drink order, and she's a stunner, looks like a mix of Polynesian and Latina, very exotic, very sexy, and fills out her waitress uniform very nicely. I order, and since it's not very busy, she's back with my beer quickly. \n\n\"You're a new guy, aren't you? Don't think I've ever seen you here before,\" she says as she sets my beer down. \n\n\"Yeah, first time here for me. Been by this place a million times, never even knew it was here.\" \n\n\"Mind if I join you for a little bit?\" Her question surprises me a bit, but she's gorgeous, no way I'm saying no. \n\n\"Of course, please, sit,\" and she slides in next to me on the couch I've found. She extends her hand and introduces herself as Sheri, and I shake her hand and tell her my name and she smiles such a pretty smile at me, it almost makes me blush. \n\n\"So what, or better yet, who brings you by,\" she asks me. Hmmm, now I'm a bit stifled. Here's this beautiful woman asking me why I'm in this seedy little out of the way strip club that obviously caters to the alt lifestyle, and what the hell do say in response? \n\n\"Oh, I don't know, just having a look to see what's what, I guess.\" I sit there looking straight ahead at the stage, wondering if she bought my line. \n\n\"Yeah? Usually, new guys are coming in here looking for someone specific. This isn't exactly the type of place that brings in random customers, you know what I mean?\" Yup, I knew exactly what she meant, but still, how do I tell a goddess like her I'm here looking for a monster shemale cock to suck? \n\nThen the DJ pipes in and announces the next dancer, Jasmine, because every strip club has to have a Jasmine or two, and Jasmine turns out to be quite a looker. I take advantage of the DJ's timing to mention that Jasmine is pretty sexy, and Sheri agrees, shaking her head, \"she sure is, she's got a great body.\" Yeah, I clearly saw that for myself, but Sheri isn't letting me off the hook so easily. \n\n\"So you don't want to tell me, huh? That's ok, we don't judge here, it's all good, babe.\" I look at her and she's smiling at me, and she rubs my thigh and turns towards the stage where Jasmine is dancing. \"We bring in all kinds of folks here, gays, bisexuals, butch and fem lesbos, curious straights, the trans click, whatever, everyone's welcome. So how about doing a shot with me?\" With a segue like that, how could I say no? \n\nSheri got up to go to the bar and get us our shots, and I couldn't help but stare at her the whole way. She had a beautiful figure, and her black skirt hugged her hips as snuggly as her white blouse hugged her tits, and I'd guess they were 36Ds or so. Her walk was so smooth and fluid, just so sexy. A few minutes later, we're doing our first tequila. Not my favorite, but when in Rome, so down it went. The crowd didn't seem to fill in as the night progressed, but that's probably because it was a Tuesday night, hardly the busiest night for a place like this. That worked out well though, because Sheri had a light work load and was able to sit with me. She and I sat when she wasn't serving drinks and watched all the dancers together, and I could tell she was gauging my reaction to each of them. \n\nAn hour and a half and several more shots later, still no sign of Taya, and I'm wondering if I'd wasted my time. I guess my constant looking around for her cued Sheri in further that there was definitely someone in particular I was there to see. The liquor has loosened me up a bit and I'm chatting more about the dancers with Sheri, talking about which ones I liked and such, and she's just taking it all in. There were a few very pretty girls, three shemales who danced also, two of which were pretty hot, but not Taya hot, and she is who I wanted to see.\n\nSheri sets another two shots down and it's become a reflex now that I just pick it up, clink her glass in a toast, and throw it back. Definitely feeling a bit giddy now. \n\n\"You look like you're expecting someone, if you don't mind me saying,\" Sheri spoke to me as I caught myself looking towards the door in the hopes that Taya was arriving soon. \"Me? No, not really, just looking around, you know, taking it all in.\" \n\n\"Hahahahaa! Yeah, right! You can be straight with me, I said it before, we don't judge. You're not just here off the street for curiosity, I don't buy that.\" \n\nI sit there thinking about what she said, and I wonder why I'm apprehensive about telling here why I'm there. What's the big deal? Why can't I tell a total stranger whom I'll probably never see again that I've got a fetish for sucking shemale cock? Hell, she's here working in a place that caters to people like me. She's heard it all before. I should be able to tell her about this if no one else. \n\nI look a Sheri, take a breath and tell her yes, I am there to see someone in particular. \"And who would that be?\" she asks with a smirk. \n\n\"I saw an ad for girl who said she was dancing here tonight, her name is Taya.\" Sheri's face is steady, then she looks around like she's thinking, then she turns and looks at me with a devilish smile, \n\n\"Oh yeah, Taya, I know her, she's new, very pretty, uh, lady.\" I feel my face getting flushed a bit, hoping it's the effects of the shots we've shared and not embarrassment. \"So you like Taya, huh?\" \n\n\"Um, well, I don't really know yet, I've only seen her ad, I've never seen her in person yet.\" I'm looking straight ahead at the stage but I can feel Sheri's stare from my right side, like she's processing things about me. I'm not sure what to think about that or how to feel, so I just sit there staring at the stage, then her hand lands on my thigh and runs up and down it a few times, and rests just a few inches from my cock. \n\n\"Taya's a special kind of girl, you know. There's a few like her in here.\" Sheri then takes my hand and places it on her thigh where her skirt is covering her leg, and I'm instantly rock hard. I've been sitting here with this gorgeous girl for about two hours watching all these dancers with her, but every time she got up to get us more drinks, I couldn't help but stare at her every move between us and the bar and back. She's such a vision, just drop dead sexy. \n\nShe rubs my hand for a moment, then slides it under her skirt, and my heart starts racing. Her inner thigh is so silky soft, I can't wait to feel her pussy. She's slowly gliding my hand further and then there it is - she's got a big, throbbing cock trying to burst through her panties, and I momentarily pull my hand back, then look at her, and she's just smiling at me. \n\n\"It's ok, baby, you don't have to be freaked out, I'm sorry if I shocked you.\" I sat there for a moment taking it all in and instantly regretted pulling my hand back, so I softly placed it back on her thigh, hoping she'd give me another chance. \n\n\"I'm sorry, it was a bit of a surprise, that's all. It was a good surprise though, it just caught me off guard, that's all, it felt really good.\" I hoped she'd believe me, I really did like how her cock felt, I wanted to feel it some more. \n\n\"I get it, baby, you're all good. Like I said, we don't judge. I like you,\" and she hit me with that smile again. I badly wanted to lean in and kiss her but didn't want to push things when we were in view of everyone in the place, so I just rubbed my hand a bit on her thigh, hoping she'd get us back to where we were a moment ago. \n\nRight then, she looks away from me for a moment and lights up with a huge smile, then looks back at me, \"your girl is here,\" then she motions with her eyes to the door, and there she is - Taya walked in, and my jaw dropped. She was even more stunning in person than her photos. the perfect hourglass figure, long, dark hair past her shoulders, everything was as beautiful as I hoped. I just stared at her and watched her walk all the way across the place and to the dressing room, then just stared at the dressing room door as it closed behind her until Sheri nudged me a bit and brought me back to life. \"Wow, so just like that, I've been replaced?\" Sheri's question made me feel uncomfortable, like I had to choose between the girl who sat with me for two hours, got me drunk then let me slide my hand up her skirt, or dump her like I was just using her until someone better came along. She chuckled a bit at me when she saw my face and kissed me on the cheek and turned sideways on the couch we were on, facing me, and took both my hands in hers. \n\n\"I know why you're here, baby, I don'blame you. She's beautiful.\" Sheri then slid closer to me, slid her left leg behind me, opened her right leg a bit, and slid both my hands up her skirt where her cock was now free of her panties, rock hard and now in my hands with hers guiding them up and down its' full length. My word, it was so hard and so thick, I wanted to lean her back and lift her skirt right there and wrap my lips around it, didn't care of the whole place watched. \n\n\"Just a little to remember me by, sweetie. I've got a few new customers, I'll be back in a bit,\" then she stood up, discretely tucker her cock back in her panties, and walked off. I felt crushed watching her walk away. Did I make the wrong choice?\n\nSitting there by myself, I suddenly felt very alone. Weird, since the place isn't packed, but brought in a few more people, but they aren't the people I'm here to see or with whom I want to spend any time, they're customers, they're here for the same reasons I am. Truth is I'm enamored with Sheri's cock. I can't believe, first of all, that she's even got one, and even better, that she let me feel it, she offered it to me. I want more of it.\n\nIn my adoration of Sheri, I forgot all about Taya until the DJ announced that she was next on stage, and a moment later, there she was, strutting her stuff, and my God, what a bombshell! She was just stunning! She came out wearing a skin tight black mini dress that was low cut enough to show off her beautiful tits, and it hugged her hips and ass so perfectly, she was a fantasy come to life. Every time she leaned over, the short length of the dress let her red thong peak out and gave just a hint of her ass. I wanted so badly to climb up those legs and bury my face between them, she was just such a shocking vision, I've never seen anything like her.\n\nShe had several admirers waiting to tip her while dancing, and she indulged every one of them with a brief show in exchange for their offerings, so I decided to wait until she danced her second song, since they all danced two songs then exited the stage. I had to make a statement though, differentiate myself from the rest of the crowd, so she might be enticed to join me after she's done on stage. I figured she'd appreciate a bigger tip than anyone else gave her, because after all, it's always about the money. I folded a twenty dollar bill in half and walked up to the stage, and she saw me there immediately, so she danced her way over, turned away from me and bent over in front of me, showing off her ass, and I was awestruck. I just stood there, not blinking for her brief but effective show, then she crouched down in front of me, dress raised up to her hips, knees spread so I could see her thong and the bulge it contained, and she ran her finger through her garter, waiting for me to slip the money ion it. \n\n\"Wow,\" is all I could mumble, as I slipped the twenty in the garter on her thigh, and she smiles as she noticed it wasn't the typical smaller bill. \n\n\"Oooh, thank you, sweetie,\" she said as she leaned in and kissed me on the cheek. \n\n\"I'd love to get you a drink when you're free,\" I told her, and she said she'd like that and she'd be over in a few minutes. My heart raced a bit, she's coming over to sit with me!\n\nBack at my table, I sat as patiently as I could while anticipating Taya's arrival, and about five minutes later, I saw her silhouette walking across the room towards me. She moved with a sexy fluidity that I don't think I've ever seen before. She was truly a vision. She approached the table and slid right in behind it and sat next to me on the couch, then kissed me on the cheek again and thanked me for the tip. She smelled like lavender and her skin was so soft, I wanted right then to lean in and kiss her on the lips but I refrained. I didn't want to come across the wrong way.\n\nWe sat for a while, we had a few drinks, then she did her first lap dance for me. At one point in the song, still dressed in her thong and top, she leaned back against the table and thrust her hips out straight at me, and my God, what I would have given to be able to reach out and just run my tongue up and down her from head to toe. I reached out and just grazed her thighs as she danced, and she didn't seem to mind. I ran my hands lightly up and down her legs, then up to her hips, and she turned around away from me and bent over the table. Her ass was as perfect as I've ever seen, and it was everything I could do to stay seated. I slowly ran my hands up the back of her legs and to her ass, hoping I wasn't pushing things too quickly, and Taya's little ass shake in response told me I wasn't.\n\nTaya then turned around facing me, taking my hands in hers and slid them up her body to her tits, letting me cup them both. They felt so perfectly soft, and I could feel her nipples getting hard right in my hands through her top. She then came closer, leaned forward and straddled me on the couch and grabbed the back of my head, forcing my face into her cleavage. Her tits felt so good on my face, I just closed my eyes and started licking them, sucking on her bare skin, when I reached for her top and pulled it down a bit, just enough to expose her nipples. \n\nShe read what I was doing and leaned to her side a bit, bringing her nipple to my mouth, and I didn't let the chance slip past, I sucked on it like it was a lifeline. Her nipple was rigid and I pursed my lips around it, swirling my tongue all over it, and her groan told me she was enjoying it as much as I was. \n\nAt that point, I leaned back for a minute to look up at her face, and she was looking down at me, then without a word, she leaned in and kissed me on the lips hard, her tongue finding mine and her lips sucking on it, then tongue exploring my mouth again. Her lips were like satin, her tongue wet and soft. We kissed for a few minutes, then she again leaned back, pulling my head down to her tits with her hand. \n\nThat's when I reached around her to untie her top, wanting to free her tits so I could suck them both free of her top. She stopped me right then, saying no. When she leaned forward to reach behind her and retie her top, I felt horrible. All I thought was that I did something wrong and she was turned off, I had blown it. Here I was with the sexiest creature I've seen in forever, I had my mouth all over her and somehow ruined the mood.\n\nHow elated I was when I saw why she stopped me.\n\n\"Not here, baby, everyone can see us. Let's go out back to VIP.\" WHEW! I didn't blow it! She just didn't want us to be so visible to other patrons. Ok, I'm good with that, I'd like some more privacy with her too, even as dark as it is. She stands up, takes my hand and leads the way. We stop along the way to tell Sheri we're heading out back since she's our waitress, then we stop again at the doorway to the VIP area where I'm assuming I'm going to have to pay the guy standing watch there to enter, but Taya said something to him I couldn't hear over the music and he nodded and motioned her in, still holding my hand and bringing me in with her. \n\nAs dark as it was in the front room, VIP was even darker, and my eyes needed a few minutes to adjust. The layout of the place looked different than out front, like what looked to be almost cubicles around the outer perimeter of the room, but with walls going to the ceiling. Taya walked to the furthest one back, farthest away from the doorway, and lead me into our little cubicle. Everything was black, the couch, the table, the walls, everything. I could barely see her until the my eyes adjusted to the one very dim light above us.\n\n\"Ok, this is more like it,\" Taya said, as she sat down, still holding my hand. I sat down next to her and she turned towards me and threw a leg or mine, grabbed my face and once again stuck her tongue in my mouth, probing every bit of it. I leaned back, letting her kiss me, sucking and licking her tongue as it was all over the inside of my mouth. I immediately reached for her top, pulling it down to expose her tits, and she grabbed my head and forced it to her nipples, and I eagerly responded. Her nipples were hard as rocks now, and I kept going form one to the other, sucking and licking them to her groans as she leaned back. \n\n\"You have a very talented mouth,\" Taya said to me as I devoured her nipples. \n\n\"I'll suck anything of yours, sweetie, you're so sexy,\" I responded, hoping she'd want to take me up on it.\n\nShe pulled away and stood up, and told me she wanted to do another lap dance for me, to which I happily agreed. The song began and her hips swung back and forth, mesmerizing me, as I ran my hands up and down her thighs, up to her sides, wanting badly to reach between her legs but not treading there yet. Then she laid on her back on the small round table right in front of us, and as small as it was, her ass was barely a foot away from me. I leaned in towards her, she wrapped her legs around my head and drew my face closer, and I kissed her inner thighs, slowly working up her legs. I was so close to her cock, I could barely contain myself. Then she leaned forward off the table, straddling me on the couch again, pushed me upright against the back of the couch and wrapped her arms around me, kissing me again. This time though, she pressed herself tightly against me, and I could feel her hard cock against me.",
        "I instantly went rock hard myself when I felt her cock rubbing against me. I pulled back a bit to look down at her, hoping I'd get to see a glimpse of her hard cock in her skimpy thong. That's when she stood up on the couch, straddling me, grabbing my head, swaying her hips side to side, then thrusting them forward, her cock inches from my face behind the thin material of her thong. I couldn't take it anymore! She was driving me crazy! I wrapped my arms around her ass, pulled her towards me and forced my face straight into her cock, thong and all. Her cock felt huge on my face! She was so hard! I just sat there, rubbing my face back and forth across her thong when she grabbed my hair and pushed forward, grinding her cock up and down on my face.\n\nShe felt so good, and I was getting her hard. \n\n\"Let's see how good that mouth works on something bigger than a nipple, huh?\" And with that, she pulled her thong aside, exposing her ten inch cock to me, leaning in to rub it back and forth across my nose and mouth. I couldn't believe how beautiful it was. I've never seen a transsexual cock so perfect. It was about ten inches, cut with a perfect, swollen head, just a bit thicker along the middle of her shaft and it was rubbing my face. I wasted no time showing Taya my oral skills. When she again tried to rub her cock across my face, I opened my mouth and leaned in, taking a bit of her her ten inch monster in, sucking on the head at first, then she stopped swaying, grabbed me by the ears, and slowly pushed her cock straight ahead into my mouth. I had about four inches of her cock in my mouth now, and I started rocking my head back and forth, wrapping my lips tightly around her thick shaft.\n\nI reached up to cup her balls, and they felt tight and smooth, and I lightly massaged them, never letting her cock out of my mouth. Taya started a bit of a deeper rhythm now, swaying forward in and out of my mouth, and every few strokes, I took another inch of her cock deeper into my mouth. She had the best tasting tranny cock I'd ever sucked yet, I didn't want to stop sucking it.\n\nJust then, she stepped down, taking her cock out of my mouth, leaned in and kissed me again, and walked around to the opposite side of the table, facing me. As tall as she was, her cock rested flat on the table, and she motioned to me to come get it. Ok, anything she wanted, I would do, especially if it meant I'd have her cock in my mouth again. I leaned across the table, laying flat down on it on my stomach, wrapped my arms around Taya's ass and took her cock into my mouth again. \n\n\"Mmmm, that's it, baby, that's a good cock sucker,\" she said while I worked her cock in my mouth. Her thrusting in and out of my mouth began again and I was enjoying every stroke of her cock sliding past my lips and tongue.\n\nAs I closed my eyes and focused on her hard shaft penetrating my mouth, Taya reached down to my hands still wrapped around her ass. I was expecting her to move them up to her tits maybe, butt happened next was definitely not what I was expecting. I hadn't heard her over the music, especially while I was distracted with Taya's cock in my mouth, but Sheri had come in, sneaked in behind me, and when Taya grabbed my hands, Sheri took them from her and in a very quick motion, positioned them where Taya reached down under the table and put them in handcuffs attached to the table.\n\nWhat the hell???? What the fuck is going on? In the matter of a split second, these two hancuffed me to a table where I'm bent over and completely prone. I tried to speak, but Taya forced her cock deep into my mouth and all I could do was gurgle some imperceptible drivel. Ok, this wasn't funny, but what the hell do I do? Do I scream for help? No, I can't even speak a word with Taya' still hard cock in my mouth, and whatever mumbling comes out when I try is muffled by the loud music. Besides that, who the hell would come help me here in this position? The doorman at the VIP entrance won't do anything, he's working with these two. I can't believe it, I'm gonna get ripped off by two shemales who tied me up to a strippers table. What the ever living fuck!!\n\nJust as I'm thinking this is as bad as it gets, Sheri leans over my back, pressing herself against my ass and speaks into my ear \"you're gonna be ok, baby, we're not gonna hurt you, we're just gonna have our own kind of fun with you.\"\n\nTheir own kind of fun? Uh oh, I'm not sure I like the sound of that. Taya's cock is still six inches deep in my mouth, and she slowly pulls it out, still rock hard, and before she backs away, she rubs the head of it across my cheeks. Then she kneels down in front of me, putting herself eye to eye with me as I'm bent over the table. \n\n\"I'm sorry we had to trick you, honey, but trust me when I tell you, you're gonna be fine. We're not gonna hurt you, at least we don't intend to hurt you, but like Sheri said, sometimes we want to have our own kind of fun with someone and it's not easy to find people who are into what we like.\" \n\n\"Um, what do you like?\" I was terrified of the response my question would get, but I had to ask. \n\n\"Oh, sweetie, we like all sorts of things, but tonight, I think we're in the mood for some humiliation, maybe some group fun, what do you think?\" \n\nSheri then chimed in, \"ooh, it's been a while since we did both. Candy and Trish are here tonight, you know.\" \n\nTaya looked up at Sheri with a bright eyed look, \"they are? Great! Those two love this stuff!\"\n\nBefore I knew it, Sheri's hands were all over me, rubbing my cock through my pants, then running up and down my ass, rubbing my chest, then she started dry humping my ass while I'm stretched out over the table, bent over. \n\n\"Oh yeah, we're gonna have fun with this ass right here,\" Sheri said to Taya as Taya went right back to fucking my mouth.\n\nCandy and Trish? Um...WHAT??? Now I'm worried. I just came in here to see Taya, not to be abused by a gang. \n\nWhile I'm getting nervous enough to feel my heartbeat begin to race, Taya shoves her cock all the way deep in my throat, then draws it out to the head, then slowly slides it back in, and my lips are puckered on it, sucking every inch of it on its' way in and out. As she continues fucking my mouth, I feel Sheri start to unzip my pants, and in a split second, I feel them down around my ankles and the cool, damp air on my bare ass and legs. I'm nervous, I feel completely vulnerable.\n\nSheri stands behind me, reaches around and starts stroking my cock now, and I'm as hard as I've ever been. She's pressing her hips against my ass, and I can feel her hard cock trying to bust out of her thong. Meanwhile, Taya's cock feels like it's getting bigger in my mouth, and her rhythm is smooth now, she's fucking my mouth like she's trying to cum. \n\nI'm wondering if Taya is going to pull out or blow her load in my mouth, and just then, Sheri slides a finger in my ass. The shock jolts me a bit, and I jerk just enough to slow Taya's thrusting for just a moment. She slaps me in the face and tells me to not move, then shoves her hard cock deeper in my mouth than ever. I feel it pushing against the back of my throat, and I do everything I can to keep my lips wrapped around it and not let go. Now she's back to fucking me like before, and I'm thinking it's just a matter of time. \n\nHere I am, bent over and chained to a table while a hot shemale is fucking my mouth faster and faster, and I'm at her mercy. If she wants to blow her cum in my mouth, I can't do anything to stop her. Do I even want to stop her? I realize I don't. I want to feel her thrusting get faster and faster, like the other girls I swallowed, I want to feel her cock get engorged in my mouth, I want to see her balls swell up and tighten just before her hot cum blasts down my throat. Her grip gets tighter on my ears, her thrusts into my mouth are picking up speed, her cock feels like it's even getting hotter. She's groaning now, she's going to cum, her cock is building heat, it's thrusting faster and faster now, all the way deep in my mouth, then all the way back out to the head, then all ten inches deep to my tonsils again, and my lips sucking harder and harder. I'm gonna make sure she doesn't have a drop left when I'm done sucking her dry.\n\nThen...then...\"UHHHHHHHHHHHH\" She launches a huge load of hot cum that almost chokes me, but I grunt and swallow every drop on the first thrust. Then another thrust from her cock, and a smaller blast of cum, swallowed again, then a third hard thrust, and she pushes deep in my mouth then freezes, holding her cock still ten inches deep and I keep my lips puckered tight on it, running my tongue around the shaft. She jerks once, then again, and I taste a few more drops of cum seep out of the head of her cock as it twitches in my mouth. Her cock feels so hot, like it's on fire inside. She finally lets go of my ears and puts her hands down on the table on either side of my face but doesn't pull her cock out of my mouth yet, so I keep sliding my tongue up and down her shaft, and she's still rock hard. She draws a few inches of her cock out of my mouth, and I slide my tongue up to the head of it, and lick the slit on the head, giving her a bit of a jolt.\n\n\"Holy shit, Sheri, this guy gives the best head! You gotta try this!\" \n\n\"Does he now? Well, well, well, he has talent, huh? He's got a pretty nice ass too, and it feels like a tight one.\" Sheri has been fingering my ass the whole time Taya was mouth fucking me, but now she's trying to get a second finger in it, and it's making me tighten up. \n\n\"I think I'm gonna try this end out first, maybe try out the mouth after.\" Wait a minute, Sheri wants to take me at both ends? What the fuck? Are they gonna keep me here all night? Just as I ask myself that question, I feel her fingers pull out of my ass and her hands grab my hips. She squeezes her thigh in between my legs from behind, forcing me to spread my legs apart, and now I feel as brutally prone and helpless as I ever have in my entire life. Her hands cup the insides of my ass cheeks now and I feel her trying to spread hem apart. I'm so nervous now, I know what's coming, I still have a mouthful of Taya's cock that I can't believe is still hard and I can't even beg her to go easy. \n\n\"Sit very still, play toy, this will go much easier if you just accept it and don't fight it,\" Taya said to me, now holding her hands down on my back, still holding her cock in my mouth. That's when I first felt it - the first shemale cock to ever touch my ass. The head felt enormous, and it scared the living shit out of me. Sheri tried to push the head of her cock into my hole and I reflexively cinched it tight, forcing her to push harder. \n\nThe pressure against my hole was getting harder, and Sheri's grip on my hips was getting stronger too. All the while, Taya is holding me down from the front and I've still got five inches of her ten inch cock in my mouth. I can't scream, I can't make a sound, even if it could be heard over the music. \n\nThe pressure was so much, then I finally gave in, and Sheri pushed the head of her cock inside me. It felt gigantic, and I could only pray she'd give me a moment to stretch out, if I even could. \n\n\"How's that feel, baby? Do you like that? I hope you do, because I'm gonna fuck your ass all I want tonight, and you can't do a damn thing about it.\" Sheri's words defied every notion I had about her previously. The truth was it hurt, it didn't feel good, I was being stretched out by a rigid shemale cock and it hurt. Thankfully, she pushed in only a few inches then stayed still, like she was giving me a chance to take it. Just as I thought I had a brief moment, Sheri pushed in another three inches, and still with Taya's cock in my mouth, all I could do was groan.\n\nJust then, Taya finally pulled her cock out of my mouth, but didn't back away without rubbing her ten inches all over my mouth and nose. \n\n\"Please, please go easy, please, I beg you,\" I pleaded with Sheri now that my mouth was empty. \n\n\"Don't you worry, my little bitch, I'm not going to ruin you too soon,\" was Sheri's response, then she forced the rest of her eight inches deep inside me, pressing her hips against my ass. The pressure in my ass felt like nothing I've ever experienced before. It felt like her cock was going to explode inside me, she was so thick and hard.\n\nJust as Sheri's cock went balls deep inside me, I looked up to see Taya stepping aside to let another girl in our little room, and in the dim light, all I could see was she looked to be shorter than the other two, but with even bigger tits.\n\n\"So this is the champion cock sucker, huh?\" \n\n\"Yup, he sure is. I just came in his mouth harder than I have in months. He swallows too,\" Taya responded to the new girl. \"Give him a try, Candy, he's not going anywhere, he's ours for tonight.\" With that, the new girl, Candy, waltzed up me, raised my chin up to look at her, and she looked me right in the eyes and told me she was going to skull fuck me like the slutty whore I was. I was scared and aroused both at her words. \n\n\"He took your whole cock, Taya?\" Candy asked. \n\n\"Oh yeah, he took it all, didn't spill a drop of cum either.\" \n\n\"Hmmm...I'v been looking for a new cum dumpster, let's see if he's up to it.\" Candy then hiked her black dress up above her hips to expose her thong, then slid that down her legs and tossed it on the table near my face. Taya then reached down and grabbed Candy's cock and started stroking it, and I could see it was pretty thick.\n\nThat's when Sheri decided she had given my hole enough time to stretch out and started thrusting her cock, slowly at first. My hole wasn't adjusted yet, it was still tight, but that's what I think she wanted - a nice tight hole to fuck. I was still resisting her cock inside my ass, still trying to squeeze my hole shut, and every time I did, she groaned a bit more. The friction of her eight inches all thrusting in and out of my hole was building up heat I could feel inside me. I didn't have much time to think about that though, because Candy's swollen cock was about to be in my mouth now.\n\nI couldn't quite believe it - two shemales were about to run a train on me. \n\nWhat the holy fuck!!\n\nCandy positioned herself right up against the table where my face was, reached down and cupped my chin with her hand and tilted my face up to her. \n\n\"Now be a good little cum whore and suck this cock, you slutty little bitch!\" She grabbed the back of my head and shoved her whole cock in my mouth, balls deep, all seven inches of it. She wasn't as long as the other girls, but damn, she was MUCH thicker around! She wasted no time at all, and started to fuck my mouth hard and fast instantly. I followed her orders and tightened my lips around her fat cock as much as I could, but she was huge. I tried to wrap my tongue around her cock as it was sliding in and out of my mouth, but it was so thick, all I could do was just lick it around the bottom. I guess that was her trigger, because in just a few minutes, she was groaning.\n\nAt the other end, Sheri was pounding my hole so hard, the heat was building, and the pressure of her hard shaft pushing out on my hole began to feel better and better. I was finally stretching out and the pain had given way to pleasure. Her fingers were tightening their grip on my hips and she began pulling them harder and harder onto her cock with every thrust into me. Candy's cock began to swell even bigger in my mouth, and I was so turned on thinking I could have that effect on her.\n\nMy mouth was going to make two sexy shemales cum, and I was loving it.\n\nSheri's cock was slamming harder and harder against my ass now, and I swear, she was trying to fuck me all the way through from my hole up to my mouth. She began to moan just as Candy's cock began to build that same heat I felt in Taya's cock before she came. My hole was on fire now and I was loving how strong and hard Sheri's cock was. I was hoping she wouldn't cum too soon, I wanted more of her pounding. \n\nBetween Candy's cock in my mouth and Sheri's cock in my ass, and both of them fucking my holes hard and fast, I was in Heaven. I tightened my lips harder on Candy's cock and she let out a groan, just like Taya did before her. And just like Taya did before her, Candy began fucking my mouth faster and faster, and her cock became even more engorged, and there was that heat, the heat of a fresh load of cum pumping up through a hard cock, about to explode\n\n\"Oh...God, yeah, oh fuck, oh...fuuuuuuuck...UHHHHHHHHHH!\"\n\nAnd then she blew. Candy's hips thrust forward deeper into my mouth than ever before, and a gigantic load of hot cum exploded into my mouth. I gagged on it at first because her cock was so thick, but I managed to save it all. She held still deep in my mouth for a moment before drawing back out and thrusting again, blasting another smaller load of cum in my mouth. I swallowed it all, every drop. She gave another couple smaller thrusts then slowed, then stopped, but left her cock in my mouth for a moment, enough for me to lick it clean with my tongue. \n\nI didn't have time to make sure she was drained because just as Candy's load explode in my mouth, Sheri's was about to explode in my ass. It felt like her fingernails were going to dig into my hips the way her grip was so strong, and I tried to squeeze my hole as tight as I could against her throbbing cock every time it pounded in and out of me. It must have worked, because it only took another few seconds before she started to cum. \"I'm...gonna...oh shit...here it comes...\"\n\nWith Candy's cock still in my mouth dribbling it's last bit of cum, I put one last effort to squeeze every ounce of muscle into tightening my hole so Sheri would cum heavy.\n\n\"Oh yeah, that's it, squeeze my cock, you fuckin slut! Make me cum, you bitch! Make...me...CUUUUUUUUUUMMMMMM!\"\n\nWith that, Candy's cock exploded her load of cum inside me, and her cock pounded my ass the hardest just then. It felt like her cock fattened up when she came because my hole was so stretched and so hot. She kept fucking me though, shooting more cum in my hole with five or six more thrusts. She finally came her last drops, then fell over forward onto my back. \n\n\"Damn, his ass is as tight as his mouth, that little slut is the best whore we've had in here so far.\" Sheri said after she stood straight up, still with her cock inside me. \n\n\"And you three weren't going to let me play?\"\n\n\"Hey Trish, you're just in time. We've got him all warmed up for you. You're gonna love this one, you may want to do him in both ends.\" Taya responded when Trish walked in. That's when Candy slid her cock out of my mouth and I looked up to see Trish. As sexy as Taya was, Trish was even sexier. Trish was tall, almost six feet, and easily packing 44Ds that fit her thicker but incredibly sexy hourglass figure. She was wearing a white tight fitting dress, slit on the sides and flowing long, below her knees. She had a South American look to her with long, flowing, dark hair down to her curvaceous ass and an air about her that made you feel like she was the alpha, and not only knew it, but enjoyed enforcing it. \n\n\"So is this one a keeper, girls?\" Trish asked the other three. \n\n\"He sure can suck some dick.\" Candy replied. \"He's got a tight ass too, at least for now.\" Sheri snickered. \"We'll see about that.\" Trish remarked. \"Flip him over.\" Taya and Candy unlocked the handcuffs, stood me up, took my shirt, shoes and pants off, turned me around and laid me down flat on my back on the table, then they recuffed me to the table, putting my hands behind me under the table. I'm lying face up now, looking at the ceiling, and can see all four girls standing around me now. Forget what I said earlier about feeling as vulnerable and defenseless as I ever have in my entire life, because this very moment now holds that title. \n",
        "\"Let's see if he's still tight after this.\" and then Trish lowered her dress, stepped forward and stood right next to my face. I couldn't look away. Her cock was every bit of ten inches, and she wasn't even hard yet. It was amazing. Even soft, she was as thick as Candy. How damn huge was she gonna be when she's hard?\n\nWait a minute - where's she gonna put it when it's hard?\n\nOh shit! This girl is gonna split me open! Before I could say anything, Trish is rubbing her cock on my face. She's tall enough that her cock is right at table level and she's taking advantage of that. She grabs my head and turns it towards her, then stuffs the head of her cock in my mouth. She's still soft, but I'm feeling her begin to get hard while I slobber all over the head of her cock, and she responds by sliding two inches into my mouth. I close my eyes and just suck on the head, licking all around it, sliding my tongue as far down the shaft as I can. She grabs the back of my head and forces three more inches deep in my mouth. My God, she's massive! I love feeling her getting hard in my mouth, but she's getting too big, I can't handle her if she gets much bigger. \n\nDown below, Candy and Sheri have grabbed my legs behind my knees and have spread them open, and Taya is softly rubbing her hands up and down my cock. Trish is slowly sliding just the first five inches of her cock in and out of my mouth, taking it out and rubbing on my face, then putting it back in my mouth. Taya found a bottle of something from somewhere, opened it, put some on her fingers and started rubbing it on my hole. It was cold, and she slipped two fingers inside me, and even after the pounding I just took from Sheri, it was still hard to take, but it felt good. \n\n\"You like that, baby? You like my fingers in your ass?\" Taya asked. \n\nTrish, still slowly mouth fucking me, slapped my face, \"she asked you a question, you fucking slut!\" \n\n\"Yes, yes, I like it.\" I answered. \n\n\"Good, here's some more then.\" and Taya then put two more fingers in my hole.\n\nThere I was, stark naked, tied to a table, legs spread wide open, ass hanging off a table on full display for four sexy, abusive shemales, completely defenseless at at their mercy entirely, and I couldn't dream of being anywhere else.\n\nTrish's cock was a real monster. Fully hard, she was twelve inches and almost as thick as a soda can. All I could think was I wish I had more tequila. Her cock was delicious, I didn't want to stop licking it, then I felt another cock pushing against my hole again, and I looked down to see Taya standing between my legs, Candy and Sheri still holding them apart, and she grabs me by my sides and pushes her hard cock all the way deep inside me. The shock overtakes me and I grimace a bit, but don't let Trish's cock out of my mouth. Taya fucks me all the way deep almost immediately, with her cock going balls deep every time, and that heat I felt in my hole was back instantly.\n\n\"May I?\" Taya asks of Trish, as I see Trish nod yes.\n\nTaya gets the approval she hoped for and starts pounding my ass like a jackhammer, and I feel like there's a steel rod fucking me. Trish takes her cock out of my mouth, walks down to my feet and starts stroking Candy's cock while Taya is getting closer and closer. I see her eyes beginning to roll back in her head, and her grip tightening on me, her thrusts are getting faster now, and my hole is getting hotter and hotter. Knowing how much Sheri liked it, I squeezed my hole as tight as I could when Taya started getting closer to cumming, milking her cock with my hole.\n\n\"Oh, shit, I'm gonna cum so fucking hard! Oh yeah...cum, baby, CUUUUUUUMMMMM!!\"\n\nWith that, Taya pounded my hole so deep, my ass came off the table, and her cum launched into me like a fire hose. Three more thrusts, and her eyes closed, and she leaned forward, depleted, and my hole was burning for more.\n\nTaya pulled her cock out of me, and Trish walked up to my face. \"I hope you can handle this, because these girls can fuck hard, but I'm gonna make sure you can't walk straight for a week, you dirty whore.\" Taya's cock felt so good inside me, and I want more, but Trish's cock, that may be too much for me. I'm legitimately nervous now. \n\n\"Hold him down tight, girls. He's not ready for this.\"\n\nTrish's words sent another chill through me. She took her place between my legs, still held open by Sheri and Candy, and reached up to grab my hips. As tall as she was, she struck a very intimidating pose as I looked up at her between my legs. She pushed her stiff cock up on my cock and rubbed it up and down the shaft of it, getting me harder than I was. Then she wrapped her hands around my cock, stroked it up and down a few times and rubbed my balls a little.\n\nI was hard and ready to fuck, or so I thought. Trish again grabbed my hips, then pushed the head of her cock against my hole. I've only been fucked in the ass twice in my life, both times today, but already I can feel the difference in the size of Trish's cock, it's massive. The head of her cock feels like a water bottle trying to fit inside me. How am I ever gonna take this? The resistance my hole is putting up seems to amuse Trish, as she looks down at my ass, so she leans forward over me, grabs my shoulders, and forces the head of her cock all the way into me. Oh my God! Holy SHIT! Her - cock - is - HUGE! My hole is throbbing and I'm about to black out, and I scream. Candy, like this is routine, lets go of my leg, walks up and grabs my face, turns it towards her and stuffs her cock in my mouth. I can't scream now, but I'm still groaning in initial agony. Candy slides her cock in and out of my mouth, and I'm trying to use that as a distraction from my hole being torn open by Trish's monster erection.\n\nTrish holds her cock still in my hole, letting me try to stretch out a bit, but holy shit, I don't know if anyone could stretch that much. She pushes in another inch, and I wince, then push my face closer to Candy, hoping she'll fuck my mouth deeper. Anything to distract from the fucking I'm getting.\n\nIt felt like an eternity that Trish held still in my hole, it had to be seven or eight minutes before I could even move. Candy's cock, hard as before, was still sliding in and out of my mouth, but I couldn't give her the same attention I did before. I can't believe it - for the second time today, I've got two shemale cocks fucking me in both ends.\n\nMy hole is finally beginning to relax a bit, but it's still so tight that I can barely move. Trish pushes inside me another couple inches and I squirm some more, but it's a bit easier than before. The pain has subsided from ten to a five, allowing a slight bit of pleasure to sneak in. The sensation is amazing, to feel both pain and pleasure at the same time. I finally feel good enough to move a bit, and I try to grind on Trish's cock just a little, to see if it'll feel ok. I raise my hips up a bit against her, and she responds with another two inches of cock pushed inside me. It's getting a bit easier to take more of her cock, and I think she sees that too, so she draws out a bit then pushes back in. The friction of such a monster cock pushing in and out of my hole is so intense, the pressure against my hole is like nothing I've ever felt. She's moving slow, but drawing her cock all the way out to the head and pushing back in as far as she was before, but she's only got six inches inside me, and she's still got another six inches to go. I'm beginning to feel better now, but I know I'm being stretched out.\n\nCandy is starting to thrust faster into my mouth now, and I think she's getting closer to cumming in my mouth again. Her cock is engorged more than before, and again, that pre cum heat is in her cock from head to balls. I'm sucking on her cock as strong as I can, hoping I get another load.\n\nTrish's thrusting is beginning to pick up a bit, and she's now reached under my legs and put them up over her shoulders, folding them tighter against my chest, putting her in a better position to go deeper inside me with her cock. And she does exactly that. She leans forward, braces her feet, and gives a hard push and suddenly, my hole is on fire. Trish's cock gets fatter at the base, and she's got all twelve inches inside me now. I feel her balls against my ass, she's rock hard and I'm feeling every bit of her rigid steel cock. I've never felt so filled up, and then she starts pulling back. It's a bit of relief when she pulls back since her cock is thinner towards the tip, but then she thrusts back in and I get all the thick shaft spreading me wide open. \n\nI'm getting used to it now and can respond to Trish's fucking with some fucking of my own. I grind my ass up and down, and wiggle side to side, trying to squeeze my hole as tight as I can, and Trish responds with faster thrusts of her cock. She leans forward a bit more, pulls her cock out all the way to the head and then power slams it all the way in my hole like a missile.\n\nOh - my - GOD!\n\nThat was INTENSE! I turn my head away from Candy's cock to moan so Trish knows I like it, and she picks up on the hint. She does it again - her cock is almost all the way out of me, then - BANG! Another power thrust as deep and hard as she could, and my hole is throbbing! Candy is now standing next to me stroking her cock over my face. I reach up to lick the head of her cock, and she puts it back in my mouth while she keeps stroking the shaft. I can feel the pulse in the head of her cock, she's about to cum and I need it in my mouth. \n\nTrish's cock is now ram rodding my hole like the piston of an engine, just as fast and just as hard. The cock in my mouth is enough to make me orgasmic, but the other one stretching out my hole is making me euphoric.\n\nCandy tilts her head back as I feel the head of her cock swell in my mouth and she blows another load of cum in my mouth and all over my face. I can feel the heat of her load on my skin as she spurts out a few last drops on me, and I reach up to lick her cock clean. She helps by leaning forward and slipping her cock in my mouth, and I lick it all the way from balls to head, kissing the tip once more before she backs away.\n\nNow it's just me and Trish, and Trish's cock is wrecking my hole. The friction is so intense, and she's only getting faster. She sees that Candy is done with my mouth, now Trish is getting after me with the power fuck again - drawing all the way out, then BAM! She drops my legs from her shoulders, leans forward on top of me, puts her arms under my shoulders and lays on top of me, her 44Ds rubbing against my chest. Like it's rehearsed many times, Taya and Sheri grab my legs and hold them up again so Trish can go deep inside me, and she does. Trish goes hard and fast, now a constant power fuck of my hole, and I can feel every inch of her cock filling me up every time she thrusts. She's going so deep inside me, and her cock is so thick, my hole is aching for more, she needs to keep going. I lean my head back and close my eyes, and just surrender to her massive cock, just relentlessly pounding my hole so hard and so deep. She presses her head against my neck, never slowing her jackhammer fucking. I want her deeper inside of me with every thrust, but she's already every bit of her twelve inches in me. Her cock is so fucking hard, and it just keeps pounding me.\n\nShe's laying flat on my stomach, fucking away, and i tell her don't stop, keep fucking me. Just don't stop, please don't stop. She doesn't stop, she keeps on going, and now she moves her cock side to side while fucking me, bringing a whole new sensation to my hole. I didn't think she could feel bigger, but she does.\n\n\"Are you my fucking cum slut?\" she asks me.\n\n\"Yes, baby, yes, I'm your cum slut. I'm your cum slut forever.\"\n\n\"You want my cum inside you, little cum slut? You want my load?\"\n\n\"Yes, baby, please give me your load, I want your cum inside me, please cum inside me.\"\n\nJust then, Trish buried her face in my neck and, pushed her cock hard all the way in me, held it for a moment, drew back only an inch, then pushed hard all the way into me again, then drew out only short strokes, and began going faster and faster with the short strokes, still twelve inches deep inside me.\n\n\"I'm gonna...cum...I'm gonna cum...so hard, baby. You want my cum?\"\n\nI couldn't even speak anymore, I just moaned.\n\nHer cock was pushed so hard into my hole, and she drew out an inch again, then another hard thrust, then again, then again, then again, and my hole began to build heat. It was heat from Trish's cock, she was about to cum inside me. The heat got more intense, and her thrusts got shorter and shorter, but still deep and hard. The pressure on my hole was more than ever, her cock was swelling up, I could feel it, she was ready to cum. I didn't want the fucking to end but couldn't wait to take her load. Her cock was swelling up more, the heat was getting stronger, she was grunting now with every thrust...\n\n\"Here...it...coooommmmes...here it...UHHHHHHHHHHHH!\"\n\nShe threw her head up and her hips forward, pushing her cock into me so hard she almost pushed me off the end of the table.\n\n\"UHHHHHHHHH...uhhhh...\"\n\nTrish bucked up and pounded my ass, filling me up so much that I could feel all twelve inches unloading, then she drew out, and pushed all twelve in deep again, and again, until she was dry of cum completely.\n\nShe laid on top of me for a few minutes, cock still inside me, and just breathed, her beautiful 44Ds resting on my chest. I know she was spent, but I wanted more. I wanted to wrap my arms around her, grab her ass and force her to keep fucking me but I was still in cuffs. A moment later, she leaned up, kissed me on the lips, licking some of Candy's cum off of them and slowly pulled her cock out of me. I suddenly felt very empty, I wanted to be filled again, but after that brutal fucking, Trish would need some recovery time.\n\n\"May I?\" Sheri asked. Trish nodded. I smiled."
    ],
    "authorname": "Nitromethane",
    "tags": [
        "transgender",
        "tranny",
        "transsexual",
        "trans"
    ],
    "category": "Transgender & Crossdressers",
    "url": "https://www.literotica.com/s/the-next-level-6"
}
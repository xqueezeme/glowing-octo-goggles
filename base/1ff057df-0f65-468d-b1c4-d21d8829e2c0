{
    "title": "My Exception is You",
    "pages": [
        "***Everyone in this story is 18+ years old***\n\nHello! Author here. Just wanted to provide a little note. I've yet to release a story about discovery, so here is my attempt. I hope you enjoy!\n\n======================================================================\n\n\"Bruno!\" a voice called out and I hesitated, sliding across the dirt to a halt. My heart was racing, my chest heaving as my lungs cried out for air. It was unbearably hot, the summer sun scorching even this early in the morning. I glanced across the track and saw Clay waving his hands as he jogged toward me. I took a deep breath, placing my hands on my head as I focused on breathing deeper.\n\n\"What's up?\" I held my hand out as he approached, he slapped it lightly glancing around with a smirk.\n\n\"Let's run together,\" he offered and I hesitated. Beads of sweat poured down my neck, face, and chest. I could even feel some sweat rolling over my nipples and along my asscrack. I had already ran two miles and didn't want to run too much more. \"Come on!\" he insisted, noticing my wariness. I took a deep breath and sighed, grabbing my shirt and wiping at my forehead.\n\n\"Alright fine. How many miles?\" I asked and he smirked.\n\n\"How many have you done already?\"\n\n\"Two,\" I shrugged and he pursed his lips.\n\n\"Two more for me, then walk a third one to cool down,\" he gestured and I sighed, nodding as I wiped my face some more. He reached up and slid his hand into my sweat soaked hair to ruffle it. \"Attaboy!\" he breathed and I smirked, pushing his hand away as we turned and started jogging lightly to work up to a run.\n\nClay was a senior this year and was the captain of our university's soccer team. Since my freshman year he's taken me under his wing. It was then I found out he was already captain of the team as a junior, and that all the players on the team respected him. In fact he was rated nationally for his talents and had a shot at playing professionally if he really wanted to.\n\nWhat made everything worse was that he seemed to have no flaws. He made Dean's list every year, he was a part of several clubs and student programs. He attended every major school event and hosted several parties for the team to bond. On top of that he was such a nice guy. And painfully attractive. I was envious of that the most.\n\nHe stood at 6'2\" tall with broad shoulders, a lean waist and hips, muscular legs, and a toned physique due to all of his training. He had a small mound of golden curls on his head, keeping the rest shaved. But what bugged me the most was his face. He had soft crystal blue eyes, a strong jaw and nose, and really cute lips. It looked like he was pulled out of a male model catalogue. And he had a voice like honey; it wasn't crazy deep and it wasn't jarring either. It was melodic and smooth.\n\nAnd as we run around the track together, both of us panting and chatting occasionally I couldn't help but steal glances at him. The way his sweat soaked his hair, how his shirt clung to his figure, the way his shorts wrapped around his thighs and ass. I had never been attracted to men before, but most of my friends said there was always that guy that could make you question yourself. Clay was that guy for me.\n\n\"One more lap Bruno, come on!\" he nudged my arm before running a bit faster and I grit my teeth, already feeling that burning in my chest as I huffed for air. But I wanted to impress him. I caught up quick enough, matching his stride as we continued around the track.\n\n\"That pole, is the end of our lap,\" I pointed it out and he glanced at me with a smirk. I faltered, hating how nice it looked.\n\n\"Beat you to it,\" he breathed casually and my heart thumped painfully. I watched him take off and then gathered myself, sprinting after him as best I could. He obviously beat me there but I made good ground to catch up. He turned, patting my shoulder as we both panted. \"Good job, walk it off,\" he heaved, grabbing his shirt and pulling it up to wipe his face. I couldn't help but stare at his abs as his stomach heaved and clenched with his efforts. His pecs were hardened, his nipples puckered and his body dripping.\n\n\"We don't have practice this afternoon right?\" I tried to pull my mind back to reality, blinking those weird thoughts away as he dropped his shirt and put his hands on his hips. We started our cool down walk, working on our breathing when he nodded.\n\n\"No practice today. Did you want to go running again this afternoon?\" he glanced at me with a smile and I sighed, hating how desperately I wanted to just say yes.\n\n\"Maybe, not sure yet,\" I shrugged, reaching up to push my hair back. He grabbed my shoulder and squeezed it, pushing me around playfully as he chuckled.\n\n\"Let's run together and then grab dinner at the dining hall,\" he insisted and I hesitated, feeling shocked but excited.\n\n\"You sure you're not busy?\" I pressed and he shook his head.\n\n\"Senior year has been rather relaxing compared to my other ones!\" he mused light heartedly. What a guy. Even being as busy as he was he made time for people. I felt unworthy.\n\n\"Alright it's a date,\" I breathed. The words came out effortlessly I almost didn't realize what I said. Before I could get embarrassed he laughed throwing his arm over my shoulders and pulling me close. I felt a bit off balance but didn't want to pull away.\n\n\"Then it's a date,\" he chuckled some more and I was both relieved and overwhelmed. Thankfully we parted ways shortly after. I wallowed in self pity, cringing as the thought loop consumed me. In the shower, as I tried to get some work and studying done, as I changed into a fresh set of running clothes... I just kept shaking my head.\n\n\"It's a date? Who the hell says that to their friend?\" I scoffed as my fingers rubbed my forehead. I took a deep breath and stepped in front of my mirror. I pursed my lips and sighed.\n\nI was 5'9.5\" tall, but claimed to be to 5'10\" because it was close enough especially with shoes. My frame has always been relatively lean and firm thanks to all the exercise. But I definitely was not as broad chested or muscular so some of the other guys on the team. I had dark, shaggy hair and an average face.\n\nI remember an ex of mine mentioning I had the kind of face no one would remember for a line up. She said I was cute but I had no outstanding qualities. The only things remotely recognizable about me were my skin color and this tiny little speck of a mole on the outer corner of my right eye.\n\n\"Are you running again?\" Jake looked shocked as he came through the door and I nodded. \"You'll get even darker!\" he laughed and I shrugged.\n\n\"Can't help being half Cuban,\" I muttered and he nodded.\n\n\"I wish I had your color. Chicks fucking love a buff tan guy,\" he insisted. I tried not to roll my eyes. \"We grabbing dinner after?\" he mused plopping down on his bed.\n\n\"Uh no, a friend already asked me,\" I admitted and he nodded slowly.\n\n\"Have fun I guess,\" he waved me off. I took the small gym bag I packed with my shower stuff and a change of clothes. There was an eagerness I was trying to ignore as I walked to the track. Something about spending time with Clay always made me happy. Maybe because it felt like such a rare opportunity? I mean he was a great guy but we weren't exactly friends. At least not like the kind who hung out except when necessary. Or by happenstance.\n\n\"You didn't back out!\" Clay called as he stood up from the bench by the field. I walked over, dropping my stuff.\n\n\"Why would I?\" I mused and he shrugged. \"Come on,\" I turned and started walking to warm up.\n\n\"How many miles?\" he asked, my eyes checking him out as he adjusted something on his watch.\n\n\"Three?\" I offered and he nodded.\n\n\"Use the bench as our lap marker,\" he threw his thumb over his shoulder and I just nodded. We walked quietly, the crunching of the dirt beneath our feet and our light breathing the only noise we had.\n\n\"Ready?\" I asked as we approached and he nodded. He was so focused when running. It was captivating. We held a brisk pace and he kept checking his watch probably to maintain it.\n\n\"Last lap,\" he called out and I tried not to show my disappointment. My first day getting some time with Clay and I wasted it.\n\n\"Let's make it count,\" I called out then, taking off. I heard him catch up and grit down pushing as hard as I could. He barely overtook me as we rounded the last turn and past the bench.\n\n\"You're getting faster,\" he smiled proudly and I shrugged, sliding my shirt off and wiping my face.\n\n\"I think it's all the extra training,\" I admitted and that seemed to make him smile. \"Thanks for suggesting it,\" I grabbed my bag, holding my shirt as he guzzled some water.\n\n\"Yeah man, I'm just upset I couldn't dedicate more time training you myself. But we have this year,\" he insisted and I smirked.\n\n\"You're a great captain. And do a great job helping out even though you're busy,\" I lightly punched his arm and he sighed, bending over to grab his bag too.\n\n\"I'm glad you feel that way,\" he muttered, glancing at me in a way I had never seen before. \"You brought your shower stuff right?\" he gestured to my bag and I nodded, both of us turning to head to the athletic center.\n\n\"So is senior year a lot easier?\" I muttered awkwardly and he chuckled.\n\n\"In a lot of ways yeah. But I realized somethings I missed out on recently,\" he mused, a distant look on his face.\n\n\"Like what?\" confusion and curiosity wrinkled my forehead as I looked at him.\n\n\"My social life has sucked!\" he laughed lightly. \"Like I have never just hung out with friends. Let alone date these past two years!\" he let out a snort and shook his head.\n\n\"I haven't dated since my break up last year,\" I admitted casually, not sure why that mattered. \"Hasn't felt like I was missing out though,\" I chuckled nervously, shrugging as I stared ahead.\n\n\"What happened?\" he pulled the door open as he studied me.\n\n\"We just weren't that into each other, like we were better off friends,\" I shrugged and he smiled. \"I mean not like I have issues in bed or anything!\" I stammered and he pressed his lips together as he laughed. My face got hot as I pushed past him. Great job Bruno, get all weird around him!\n\n\"I have a hard time being into people myself,\" Clay admitted as we got to the locker rooms. That shocked me. I studied him in awe and then shook my head slowly.\n\n\"So many girls seem to like you though. You're bound to be into any one of them right?\" I challenged and he shrugged. We set our stuff into lockers, undressing and heading into the showers.\n\nI did my best not to stare but it was hard not to steal glances. This was the first time we had ever showered after a work out. And the curiosity was eating at me. He had a great ass, his naked body looking chiseled to near perfection. I was envious yet again.\n\nBut what kept catching my eye was his junk. Even soft his dick hung proudly between his legs. And like his head, an equally unruly golden mound of hair clung to his mound and balls. There was something kind of sexy about that though.\n\n\"So you shave?\" he asked me suddenly and I blushed.\n\n\"Yeah but only my pubes. I don't have much body hair so I think I look better this way,\" I admitted and he nodded.\n\n\"The idea of a razor near my dick terrifies me!\" he laughed and I joined in. We finished and dried off, getting dressed and heading to the dining hall. We didn't talk much but the silence wasn't awkward.\n\n\"I'll get a table,\" I offered and he nodded, heading to join a line. I found one and plopped down, relaxing until a hand slapped my shoulder.\n\n\"There you are! Clay just ran into us said you were here too!\" Devon smiled with some other guys from the team. They all sat down, leaving a seat for Clay. I decided to get up and get food, ignoring my mounting disappointment at wasted and lost alone time with him.\n\n\"Why does that matter?\" I grumbled to myself, shaking my head as I settled on some pizza. I got a drink and joined the table. They were all rowdy, laughing and chatting happily as we ate.\n\n\"Clay you should come to the party tonight,\" Devon started and he shook his head.\n\n\"I told Bruno I'd help him with some studying,\" he lied easily and I felt confused as everyone looked at me.\n\n\"Forget that and both of you come,\" Devon insisted and I noticed Clay glancing at me expectantly.\n\n\"Oh uh, I have a test coming up and he offered to help since I'm so nervous,\" I tried to lie convincingly but Devon didn't seem to accept it.\n\n\"Why would Clay have to help?\" he pressed. Before I could struggle to answer Clay sighed and smiled.\n\n\"He's in my major and I'm his captain. Helping him keep his GPA keeps him on the team. Who else would he ask?\" he countered and everyone agreed. Devon gave up with that and as we all finished Clay got up. \"Ready?\" he asked and I nodded.\n\nIt wasn't until we were halfway across campus that I got the nerve to ask him. \"Why'd you lie like that?\"\n\n\"Sorry to put you on the spot. But I don't like hanging around Devon. He's fine in small doses but,\" he shrugged and I felt dazed. He didn't like someone? \"You look shocked!\" he chuckled and I shrugged.\n\n\"Never thought I'd hear you say you didn't like someone is all,\" I admitted and he smiled.\n\n\"Staying civil and passive makes things easier on me. But I only really enjoy a few people,\" he admitted and that shocked me more. \"Like you for instance,\" he continued. I couldn't hide my smug smile.\n\n\"I like you too,\" I offered a bit awkwardly and he chuckled.\n\n\"Good,\" he led me to his off campus apartment. It was more like a community house and he had a bedroom and bathroom. But in his room he had a TV, a console, a desk and laptop, and a queen size bed.\n\n\"Nice,\" I felt stupid and he laughed.\n\n\"Feel free to get comfy,\" he mused, disappearing. I sat down against the side of his bed and laid my head back. My arms rested on my knees as I breathed deeply. His room smelt like him. It was like his subtle deodorant or cologne and just, him. It was hard to place but it was comforting.\n\nHe came back in and I looked over to see him carrying a 6-pack. My stomach knotted queasily. He sat down, setting the little carrier between us. \"Want one?\" he gestured to it and I hesitated before shrugging. We both opened a bottle and I took a big swig, shuddering and cringing as the alcohol hit my throat. He laughed and I did too. \"Is it bad?\" he teased.\n\n\"No, probably the best beer I've tasted. Just don't drink much. So it takes a second for me to adjust to the alcohol,\" I shrugged and he smiled.\n\n\"Well there's three for each of us if you want,\" he nudged the box and I nodded, taking another long swig. It went down easier, still a bit bitter on the back of my tongue though. I watched him rest his arm on the bed as he threw his head back and chugged one. The way his throat bobbed and pulsed with his drinking made my ears burn uncomfortably.\n\nWhy was I feeling this way? I shook my head and chugged mine too, setting the empty glass down and grabbing the next one. I popped it open and sighed, resting my arms on my knees as I fiddled with the bottle.\n\n\"You ok?\" he asked after opening his second one.\n\n\"Yeah. Just thinking about something,\" I shrugged and he smirked.\n\n\"Tell me,\" he insisted. I took a long swig of my beer hoping for some liquid courage as I took a deep breath.\n\n\"My friends back home always used to talk about their exception,\" I started, chuckling at the confusion on his face. \"Like a person who was the exception to their rule,\" I tried to explain but it wasn't landing.\n\n\"Give me an example,\" he pressed and I sighed, finishing off my second drink quickly. I cringed, holding back my chills as I set the bottle down and grabbed the next.\n\n\"I'm already feeling it. I'm such a lightweight,\" I grumbled and he chuckled.\n\n\"Me too!\" he insisted, tilting his bottle toward me before throwing it back and chugging it. \"Your example?\" he reminded me and I chuckled.\n\n\"So like I've dated girls. So my exception would be a guy who made me question my sexuality,\" I offered casually feeling warm and light headed as I sipped my last beer.\n\n\"Hmm. So I guess I get it,\" he mused and I nodded. \"Who is your exception?\" he smiled, looking so stupidly handsome. I felt my ears burn more as I shrugged. \"How about I tell you mine?\" he pressed and I hesitated then nodded. \"Ok. If I put thought into it I'd say my exception would be Audrey Hepburn. If she were alive of course,\" he chuckled and I nodded, laughing as well.\n\nIt took a minute for my drunk brain to realize what that meant but when I did my face burned. He's gay. \"You're gay,\" I blabbed immediately and he laughed.\n\n\"Wow it took you a minute,\" he laughed some more and I blushed, chugging my beer.\n\n\"Alcohol slows me down,\" I muttered sheepishly and he nodded, sipping his beer as well. After a brief silence he sighed.\n\n\"Tell me yours,\" he pressed. It was hard to swallow, my lips feeling dry and chapped as I glanced at him. He had his head resting in his hand, a warm smile on his face, and turned slightly toward me. His other arm rested on his knee, his leg closest to me stretched out lazily. He looked like a model for a beer ad.\n\n\"It's so stupid how good you always look!\" I started suddenly, my rational mind leaving me as the alcohol took over. \"Like you're tall, fit, painfully handsome, and even naked you look great. Maybe even better!\" I snorted, chugging my beer until it was empty. I set it down in the carrier closing my eyes and resting my head back. \"It's just not fair. Not only that but you're smart, talented, kind! You're like the perfect man,\" I mumbled and he chuckled lightly.\n\n\"Are you saying I'm your exception?\" he asked then and I sobered up immediately as I realized what I was admitting to suddenly.\n\n\"Um, well, uh,\" I stammered and he laughed.\n\n\"Aren't exceptions supposed to be barely plausible at best? If I'm being honest it sounds like you just have feelings for me,\" he mused playfully and I sighed. \"Not saying they're much of anything. Just saying they may exist,\" he shrugged and I nodded slowly, my brain fighting the alcohol to try and process everything.\n\n\"Sorry if I made this weird or uncomfortable,\" I muttered finally and he laughed shaking his head.\n\n\"No it's flattering,\" he mused, still smiling and I sighed. \"If I'm being honest with you Bruno, I think you're really cute,\" he muttered, his ears red now. I felt my heart throb and glanced at him shocked.\n\n\"Pffft, no way,\" I shook my head and then we both laughed.\n\n\"Honest! Your skin always looks amazing, you have really warm brown eyes, your hair is thick and shiny and always tempting to touch,\" he started then and I felt butterflies in my stomach as he admired me. \"Not to mention this cute little mole,\" his hand brushed my cheek as his thumb pressed against it lightly.\n\nI felt frozen as we looked at one another. He leaned toward me then and I didn't move. I could only stare into the depths of his stunning blue eyes as he reached up with his other hand and held my face.\n\n\"Your lips look really plump and kissable too,\" he whispered then and I felt a heat emanate through my chest as I closed my eyes. I leaned toward him without thought, our noses brushing as he tilted his head. I felt his lips on mine, my wrinkled forehead relaxing instantly.\n\nHis lips were strong and warm, moving against mine with ease. My whole body felt electrified, burning eagerly as my lips tingled. I felt his tongue brush my lips and hesitated. But before I could think anything through he did it again. My inhibitions abandoned me and I reached out to hold his waist as my lips parted.\n\nOur tongues touched, his thumb sliding against my ear gently. I heard myself moan as a delicious thrill ran down my back. Clay froze, my eyes opening to see him staring back at me. I cleared my throat, blushing as he sat back and grabbed his beer.\n\n\"You look worried,\" he teased and I sighed, rubbing my face.\n\n\"Confused I think,\" I admitted and he chuckled.",
        "\"Would kissing me again help?\" he joked but then flinched when I pushed toward him with wide eyes.\n\n\"You want to kiss me again?\" I asked, feeling incredibly inebriated and bold. He set his drink down and stood up. My stomach turned as he crawled onto his bed.\n\n\"Do you want me to kiss you again?\" he asked, sitting back against the wall. I hesitated then took a deep breath and got up onto his bed as well. Without giving myself time to worry or think I actually crawled onto his lap. He looked shocked, his hands hesitating before they grabbed my waist.\n\n\"I uh, I want to kiss you again,\" I muttered and he sighed, hanging his head.\n\n\"Tell me if this is the alcohol talking. I don't want to get my hopes up,\" he admitted nervously and I bit my lip.\n\n\"You don't understand how long I've felt this about you. Seeing you naked today?\" I started and then blushed and let my face fall into my hands. \"Sorry. This might be the alcohol a bit. At least liquid courage but I was sober before,\" I whispered and he sighed before squeezing my waist gently.\n\n\"Then kiss me,\" he whispered and I gasped looking up at him. I leaned forward and pressed my lips against his. We both moaned as our tongues mingled, my hands gripping the front of his shirt. I realized how many times I've been in this spot but where he was. That thought made me freeze.\n\n\"You okay?\" he demanded and I bit my lip with a shrug.\n\n\"Just weird. Last time I kissed some one like this I was sitting and she was the one on my lap,\" I muttered and he smirked.\n\n\"So would this be more comfortable?\" he pushed me down into the bed, my elbow braced into the mattress as my hand reached up and grabbed the back of his head. Our mouths met as he held himself over me, his leg between mine.\n\n\"I think it's just because you're bigger than me that I feel like this,\" I muttered and he hesitated, seeming disappointed. Before he could pull away I grabbed his shirt, lying back entirely. \"Did I say I didn't like it?\" I whispered and he bit his lip with a cute smile. He laid down with me, his body pushing on and rubbing against mine.\n\nHis mouth was rough and strong, his tongue eager as it played with and caressed mine. I couldn't tell if my mind was swimming because of the kiss, or if it was the alcohol. But I pushed those useless worries aside. I felt his hand slide up under my shirt and sighed. It was so hot, his palm large and strong. It felt wonderful.\n\n\"You're really soft,\" he whispered and I actually blushed.\n\n\"Um. Thanks? You're really hot,\" I muttered and he chuckled. \"Like temperature!\" I insisted and he bit his lip, nodding.\n\n\"I don't think we should keep going though. I feel like I'm taking advantage of the alcohol,\" he muttered and I couldn't help but pout. \"You don't even have a boner so stop pouting!\" he laughed and I covered my face as he pulled away.\n\n\"I promise I can get it up,\" I grumbled and he laughed.\n\n\"I don't have one either Bruno, relax!\" he teased pulling me up. I sighed and rubbed my face to hide my embarrassment. \"Maybe when we're sober if you still feel this way,\" he offered quietly and I felt my body heat up. That's when I felt my dick stirring.\n\n\"And now I'm hard,\" I grumbled, pushing up from the bed. But he didn't tease me or laugh. I was thankful for that.\n\n\"Can I walk you back to the dorm?\" he stood up too and I nodded, getting my stuff together as I continued to sober up. I had a lot to think about.\n\n****\n\nThe weekend came and went with homework and my usual training schedule. Clay was there but we couldn't really talk for obvious reasons. And he was busy doing some work for his senior project. In fact it wasn't until Tuesday that I even got a text from him.\n\nI had been stewing all weekend over what happened. I know I liked it because I kept thinking about kissing him again. But was he avoiding me because he had second thoughts? Or did he really have so much going on? All of this was running through my head as I wandered to lunch when I got his first text.\n\nMsg: You look really cute today\n\nI looked around frantically, my heart racing when I heard his laugh from the direction of the dining hall. I looked over and saw him standing by the building with a few other people. He was smiling at me as he put his phone away. My heart was racing as I felt my ears get hot. What the hell was happening?\n\nI felt giddy and nervous as I continued walking on. He did turn back to the group to continue chatting, so maybe he didn't want to talk to me? I was about to walk past when I hesitated. Did he want me to say hi? Or should I act normal? It was hard because we never really talked about it. I decided to continue inside, pulling my phone out.\n\nMsg: thanks... didn't want to interrupt. Have you had lunch yet?\n\nI took a deep breath and sent it as I got in line. I waited for my phone to go off but felt more and more nervous as it didn't. I never worried about this stuff before. So why did I now? Of course I knew the answer. I had no idea what it was like being with another guy!\n\nI went to check my phone when an arm rested on my shoulders. \"You wouldn't have interrupted,\" Clay breathed and I blushed, looking at him. He had a warm smile on his face as he looked forward. I took this opportunity to take him in. He had on a long sleeve cotton shirt and white board shorts. His legs were a bit tan, his thighs looking big and well defined. My eyes lingered on his legs, captivated by his wild blond body hair, the subtle tan to his complexion, and the simple white sneakers that made his feet look so long.\n\n\"So are we having lunch?\" I muttered finally and he nodded, leaving his arm on me as we stepped up in line. It felt casual enough but I wasn't sure where we stood. So it was hard to read.\n\n\"I meant what I said in my text by the way,\" he nudged me and I glanced at him. He smiled and looked around. \"You look really cute today,\" he muttered and I felt my face get hot.\n\n\"Please. You're the one who looks good,\" I insisted and he chuckled. It was true though. I just had on a pair of my running shorts and a light cotton tee. I even put an old baseball cap on since my hair looked ridiculous.\n\n\"You look sporty,\" he insisted as we both looked down at my outfit. I wiggled my toes in my slides and shrugged. \"Let me get a table. I already ate but I want to talk,\" he muttered and I could only nod. He slipped away and I exhaled sharply feeling nervous all over again. I grabbed a cheeseburger combo and a drink, cashing out and heading to the dining room. I saw him at a booth fiddling with his phone and headed over.\n\n\"So you wanted to talk?\" I offered immediately and he nodded, setting his phone down as he crossed his arms and smiled. I felt uneasy eating while he watched but ignored that shy feeling as I took a big bite.\n\n\"Have you thought about it? Us?\" he asked gently and I nodded, wiping my lips and taking a sip of my soda.\n\n\"Yeah, it's all I've been able to think about,\" I admitted sheepishly. He looked happy and concerned at the same time. \"I wanted to talk to you this entire weekend but couldn't find any time that would work,\" I continued and he nodded slowly.\n\n\"And your thoughts?\" he pushed after I ate a few more bites. I took a deep breath and cleared my throat.\n\n\"I want to try and, uh, date?\" I offered and he smirked. \"I just don't know how this works,\" I admitted and he raised an eyebrow.\n\n\"What do you mean?\" he sounded on edge, a bit defensive even. I couldn't blame him though.\n\n\"Like are you out? Do we have to be a secret? What is that like? The team, can they know?\" I explained and he sighed, seeming relieved.\n\n\"I thought you were going to say you don't know how a relationship worked,\" he chuckled and I shrugged.\n\n\"Some of it will feel new I'm sure. I guess,\" I offered and he nodded slowly. \"I just,\" I hesitated and blushed, taking a sip to squelch the fire in me. \"I can't stop thinking about it, I mean you, not since we kissed,\" I muttered bashfully and he smiled.\n\n\"Good. I feel the same way. Why don't we hang out after my last lecture today and talk about it some more?\" he mused and I nodded. \"I have to run but I'm glad I caught you on your way to lunch,\" he mused and I nodded. He looked around quickly then reached over and grabbed my hand.\n\n\"This feels like it should be something else,\" I muttered and he smirked.\n\n\"I want to kiss you,\" he admitted and I blushed.\n\n\"So, uh, why don't you?\" I stammered nervously and he looked floored. He hesitated and pursed his lips.\n\n\"You're not worried if someone sees?\" he asked cautiously and I shrugged.\n\n\"It's just a kiss,\" I insisted and he sighed, squeezing my hand.\n\n\"Wow, I've never had a guy say that to me before,\" he mused and I felt a pang in my gut. How many secret boyfriends has he had?\n\n\"Well after we kissed I called my mom to talk to her about it. She was shocked but reminded me that it's normal. That if I don't feel ashamed I shouldn't hide it,\" I shrugged and he nodded, still looking amazed.\n\n\"Ok, so I can kiss you?\" he looked around again and I nodded. He leaned over the table and I did too, kissing him happily. It felt so nice, better than the way it did in my drunken stupor.\n\n\"Have a good day,\" I muttered as he stood up.\n\n\"You too. Text me whenever,\" he walked off and I sighed happily as I finished my lunch. Before I got up I got a text from Jake.\n\nMsg: Bro, is this you?\n\nIt was a picture of me kissing Clay. I took a deep breath and sighed.\n\nMsg: Yes\n\nThat's all I could say. As I packed my trash onto my tray another tray slammed down in front of me. \"Since when are you gay?\" Jake demanded and I hesitated. I couldn't tell if he was angry, shocked, or uncomfortable.\n\n\"Um, I think I'd say bisexual?\" I corrected and he laughed then. \"What?!\" I demanded, feeling flustered.\n\n\"You never hit on me. Am I not your type?\" he joked, wiggling his eyebrows. I scoffed and he laughed. \"Chill man, I'm just messin' with ya! I was just shocked is all,\" he shrugged and I sighed.\n\n\"It's kind of surprising to me too,\" I admitted and he looked intrigued. So I swallowed my pride and told him everything. The drinking, the kissing, all of it.\n\n\"Do you know anything about gay sex?\" he demanded and I hesitated before shaking my head. \"You should do your research. Don't blow your chance because you're inexperienced!\" he joked. I knew he was being light hearted but a new panic consumed me. I knew nothing about how to have sex with a guy! I knew the basics but, would that be enough? \"Are you ok Bruno?\" Jake interrupted my thoughts and I sighed.\n\n\"Yeah sorry, still trying to wrap my head around everything,\" I admitted and he smirked sympathetically.\n\n\"Tell me something, did that kiss feel the same or better than with your exes?\" he pressed and I faltered. Besides the initial shock I thoroughly enjoyed it. Even if it was just sloppy, slightly inebriated kissing. I could feel my entire body burning up and even though I didn't get a boner it still felt amazing.\n\n\"I want to say yes?\" it felt like a question, both of us laughing as he shrugged.\n\n\"Then don't sweat it. If it feels right the rest will come naturally right?\" he asked and I nodded. \"How's your mom by the way?\" he changed the subject and I was relieved.\n\n\"She's doing alright. Misses her kids now that we're all officially out of the house,\" I shrugged and he nodded. \"Oh she asked about you. Wanted to know when you were going to come by to visit again,\" I mused and he nodded, smiling.\n\n\"I'll do my best to find some time,\" he muttered and I nodded. \"I'm going to be working late today since I have that big project,\" he started and I continued to nod as I listened to him complain about having to code a program to properly measure and cut sheet metals. It sounded complicated and he lost me halfway through but it felt rude to mention it. We were both jolted by the sound of his phone alarm which relieved me a bit. \"Oh shit, gotta go!\" he grabbed his trash and got up quickly. I sighed and got up as well, walking slowly toward the dorm.\n\nMy mind was still dancing around the idea that I would be pitifully inexperienced with Clay. I knew how to kiss, but what did men like? Most of my exes just expected to be pleased. And as long as I got off I was happy too. But would it be different with a guy? Or was it just a fight to jizz first? God I felt like an idiot as I blushed and hurried into my room.\n\n\"I have to figure this out!\" I grumbled, grabbing my laptop and crawling onto my bed. I opened up a private browser and bit my lip, my fingers hovering over the keyboard. What do I even search? \"What spots on the body turn a man on?\" I asked as I typed it in, my heart racing as a million results came up. \"Six erogenous zones... No thirty-one? Thirteen, eight, sixteen?\" I scrolled through, feeling even more uncertain. \"What the hell is a perineum?\" I grumbled, opening one of the first links. \"Between the scrotum and the,\" I sighed and shook my head. \"The fucking taint,\" I took a deep breath and cleared my throat.\n\nI went back to the search bar and held my breath for a moment. My fingers trembled as I typed the next one. \"How to give a blow job,\" I muttered, my face feeling hot as blog posts popped up. I saw one written by a dude and clicked it, shocked to see it was for gay men. My eyes scanned as I read the tricks, absorbing the ones that seemed the most interesting. Some of this sounded way more intense and pleasurable than the shitty blow jobs I have received. Only one of my exes was even slightly good at it, and she complained about doing it so I gave up on asking.\n\n\"Would Clay want to suck my dick?\" I gasped, my body heating up as my cock stirred at the thought. I hesitated glancing down at my lap. Clearly the idea of doing this stuff with him was getting me excited. But, could I really do it with a guy? I felt an uneasiness wash over me as I faltered. I had no idea. It wasn't like I tried it and didn't like it. This was uncharted waters. I pursed my lips and took another deep breath, clearing the search bar and typing a line I never imagined being entered into my private browser. \"Romantic gay porn,\" I shook my head, amazed I'd even be looking this up.\n\nThere were too many videos and a lot of the previews looked way too intense. I took a deep breath and went to a different site. A lot of the home made ones seemed more appropriate so I started browsing them. And then it dawned on me. Would I be into anal?! My throat felt tight as a cold sweat broke out on my back. The idea of a man driving his dick into my ass freaked me out. Wouldn't it hurt? \"No, don't ruin your chances because you're inexperienced!\" I reminded myself, nodding as Jakes words echoed around in my head.\n\nI opened one of the videos and decided to strip down to my briefs. I put earbuds in and hit play, sitting back comfortably as I watched. There were two men who were making out on a bed, kind of like how Clay and I were kissing. That thought alone already had me excited. It was easy to imagine and I already started feeling my cock twitching as I listened to the smacks and gentle moans of their mouths as they made out.\n\n\"God you're so fucking hard,\" one of them groaned and I watched as the guy on top started grinding and humping the other one slowly. It looked sensual and needy, their muscles twitching and bulging as they clung to one another. They began undressing, rolling around and just seeming to enjoy each other's bodies. Soon enough the guy with tattoos undid his pants as the guy below him reached down and grabbed his dick. He used both hands, licking his lip as he smirked and watched as his partner groaned and tensed excitedly. I had to admit it was pretty hot.\n\nMy hand drifted into my briefs, my cock already stiff and hot with need as my hand wrapped around my shaft. I skipped forward a bit and watched as the tattooed guy took the other's pants off, leaving him naked on the bed. Then he laid between his legs, holding him tenderly as his mouth swallowed his dick. It looked like they were both so into it, the one guy groaning and humping as his dick was being devoured. I listened to them moaning, the heavy slurping and breathing hot as I closed my eyes. I imagined lying on a bed naked with Clay's face by my dick and groaned.\n\n\"You're so hot,\" a voice called out and I whimpered, my hand brushing up against my tip as I closed it tighter. I licked my lip, imagining what it would be like to have that gorgeous head of golden locks bobbing up and down between my thighs. To be able to run my hand through his hair, to hold his head as my hips worked with his hand and mouth. My chest tightened, my heart throbbing eagerly as I panted. I could feel my hand jerking roughly, my body taking over as I listened to more moans and slurping.\n\n\"Oh yes, oh god feels so good,\" I heard another moan and looked down. The tattooed guy was holding his legs back, his face buried in his ass. He was sucking and slurping at it, the other guy caressing his balls and shaft as he moaned and whimpered. I felt my forehead crease as my eyebrows pulled together. \"Please,\" he cried out and the tattooed guy chuckled, running his tongue up over his balls and along his shaft. Why did that look so damn hot?!\n\nThe tattooed guy slid his briefs off, his cock looking massive and throbbing as he stroked it gently. The other guy adjusted, kneeling over and sucking his dick happily. I was shocked to see how easy it was for him to take almost all of it in one go. They caressed one another, both of them still moaning and panting excitedly. I skipped ahead until the tattooed guy was on top, holding his legs back as he started grinding his dick along his ass and balls. The guy reached down and helped guide him in, both of them groaning as his cock disappeared inside of him.\n\n\"So tight,\" the guy groaned, going slow, his ass flexing and clenching with his efforts. He leaned over, kissing his partner as he fucked him. It looked so loving and sensual I was actually a bit jealous. I had been the one to put the effort in with all of my exes but got little in return. To see two men get to completely give in to the other and have it returned, it really made me envious. I watched them, my other hand sliding into my briefs. I caressed and massaged my balls lightly, curious to see how it felt if I touched my own taint.\n\nI slid my fingers down more, massaging that rough patch of skin and let my head fall back as I gasped. A weird sensation shot through my cock, making it throb in my hand. I wiggled my legs apart more, stroking myself as I shoved my fingers between my thighs. I massaged and rubbed my balls and taint, huffing and groaning as my body actually started to sweat. \"Deeper!\" the guy cried out and I gasped, feeling my body tremble as his moans drowned my ears. What was so good about the ass? I thought eagerly, wanting to feel the pleasure this man was feeling.\n\nMy fingers slid down, rubbing against my ass and I could feel my muscles twitching as my legs spread more. I pushed one finger in, wincing as the pain burned. \"Oh don't stop, deeper!\" he cried out again and I groaned, my hand jerking furiously as I desperately hoped for that feeling. What was making him freak out like that?! I pushed the lap top off my lap, rolling onto my side as I pushed my briefs down. I curled up, reaching between my legs again. I shoved two fingers in deep, wiggling them around as I jerked off. It only hurt! What was that damn spot? \"Oh god there, oh no deeper!\" he cried again and I whimpered. It was infuriating! I shoved my fingers in as deep as they could go and rubbed where ever I could. And then it hit me. The stupid prostate. Where was it? I bit my lip, panting and moaning as I jerked off wildly. I rubbed my fingers in my ass, hoping to find that spot.\n\n\"Yes!\" he cried out and then I felt it. My body felt like it was zapped, my toes curling as all my muscles clenched and spasmed.\n\n\"Oh fuck,\" I moaned, rubbing it again as I jerked off. My body was hot and tingly, my heart racing as I worked at both spots.",
        "\"I'm gonna, oh fuck, I'm gonna, oh make me cum!\" I heard in my ears and trembled, my balls churning and squeezing as my dick swelled. I pressed and rubbed against that spot, exploding violently as I groaned. I gasped for air after my body calmed down, flopping onto my back. That was the best feeling ever! I pulled the ear buds out, working to collect myself before a quick shower. I knew Clay was going to invite me over any time after his last class and I wanted to be ready.\n\n****\n\nMsg: outside\n\nIt was a simple word but my hands trembled as I sent the text. My mind was racing as I thought about all the things this relationship could lead to. Soon enough the door opened and Clay smiled. He had the same outfit on, but no shoes this time and the front of his shirt was tucked in. I noticed a slight bulge in the front of his shorts I didn't get to see before and it made my body tingle.\n\n\"Come on,\" he grabbed my hand and my heart thumped against my chest as I took a deep breath to steady myself. We walked through the house to his room, and I plopped down onto his bed as he shut the door. \"So how has your day been? I was hoping you'd text me,\" he started and I pouted, realizing I was being too much of a perv to even text him.\n\n\"Oh I ran into my roommate after you left and he took up most of my afternoon. Then I did some studying and took a shower before you texted me,\" I shrugged. It wasn't a lie. I was technically studying. I smiled sheepishly as he crawled onto the bed and sat back against the wall. \"How were your classes?\" I muttered, turning and crawling to sit next to him. He took a deep breath and sighed.\n\n\"Fine. But I have been thinking about this all damn afternoon,\" he grumbled, seeming worried. I nodded slowly, swallowing a lot of my own fears and nerves as I studied him. \"Do you actually want to date me?\" he asked then, looking confused as he studied me. I blushed, thinking about what I did earlier. Could I tell him that I had more than just dating on my mind?\n\n\"I mean why not? I'm attracted to you, you're really nice and I enjoy being around you. Since I joined the soccer team I've always felt like I could trust you and rely on you. Although we haven't hung out alone much, any time I spend with you is time I enjoy,\" I tried to explain my feelings in a way that made sense. He nodded slowly, taking a deep breath as he rubbed his hands together slowly. I noticed how broad his palms were and the way his muscles and veins twisted and bulged slightly. It looked so nice.\n\n\"You told your mom about it, really?\" he sounded dumbfounded. I shrugged and nodded. \"Huh,\" he sighed and cleared his throat.\n\n\"Oh and my roommate saw us kissing so I guess he knows too?\" I offered and he tensed up, looking worried. \"Are you not out yet?\" I pressed and he sighed heavily, rubbing his face.\n\n\"It's not that I'm not out. People just assume I'm straight. But I've never dated any girls. In fact I've only ever dated a few guys in secret. My family doesn't even know,\" he admitted quietly and I nodded slowly, realizing how deep this might be. I have been treating it so lightly without taking him into consideration.\n\n\"I'm sorry. I feel like I should be doing better at making you comfortable,\" I grumbled and he laughed then.\n\n\"What do you mean? I've known I was gay since I realized what it meant! You just started having these feelings,\" he chuckled, shaking his head. \"I'm not saying I want it to be a secret though. I'm tired of hiding it,\" he grumbled and I nodded slowly. He took a deep shaky breath and cleared his throat. \"After practice Monday I talked to coach about it,\" he muttered and I tensed up then.\n\n\"Is that why you waited?\" I asked suddenly and he sighed, smiling weakly as he nodded.\n\n\"He said we could do whatever we wanted. We were adults. But it shouldn't interfere with the team or practice. And that if we broke up we'd still have to act ok at practice and stuff,\" he sounded uneasy, his ears red. I smirked, feeling embarrassed too but happy I got to see this side of him. He always seemed so sure and confident in himself, even if it was just a casual aura it still exuded from him. So to see him get all uneasy and embarrassed was refreshing to say the least.\n\n\"It's crazy our coach didn't say anything homophobic,\" I grumbled then and he scoffed.\n\n\"His face said it all,\" he muttered and I sighed. \"Don't worry, this stuff is always going to happen right?\" he offered weakly and I couldn't help but frown. \"This isn't what I wanted to talk about, not really anyway,\" he started again and I sighed.\n\n\"I want to date you Clay. I want to see where this goes. These feelings I have for you, I,\" I hesitated and pursed my lips. \"They're new for me. And I mean that like it's never felt like this, no matter who I tried to date before,\" I looked at him and he stared back at me with a calm but surprised face.\n\n\"Yeah? But you understand if we date I would want more than just kiss,\" he started, sounding nervous again as he cleared his throat. I blushed, pulling my knees up as I pressed my mouth into my palm and glared at his window.\n\n\"You don't have to worry about that,\" I muttered, even my ears were burning I was so ashamed.\n\n\"What do you mean?\" he demanded, a playful tone in his voice and I sighed, covering my face.\n\n\"I watched gay porn,\" I grumbled and he grabbed my wrists.\n\n\"What?!\" he tugged on my hands and I looked at him.\n\n\"I jerked off to gay porn while thinking about you!\" I snapped, and then flinched as I hung my head. \"Sorry. I didn't meant to snap. It's just a bit embarrassing to admit,\" I mumbled, his hands letting mine go. I took a deep breath and cleared my throat, adjusting uncomfortably as the silence festered.\n\n\"Can I ask what you thought about?\" he whispered then and I looked at him in disbelief. \"What?!\" he laughed, throwing his hands up, his face glowing as he smiled at me. \"I was just curious. If you want to date me, shouldn't I know what you're into anyway?\" he muttered then, leaning toward me. I felt my throat close up as I watched his lips part slightly. Our eyes met and then closed as his nose brushed mine. We kissed, his lips molding and sliding around mine intoxicatingly. I pushed up off the bed and onto his lap again and he looked shocked.\n\n\"I thought about us doing exactly what the two guys were doing in the video,\" I muttered, my face feeling hot as my cock twitched. He looked uncertain but I could see it in his eyes, that he was turned on. \"They kissed, sucked each other, and then fucked until they both came,\" I muttered, leaning into him. My hands held his shoulders, pushing him back into the wall gently as I closed my lips around his. Soon enough I felt his tongue, his hands on my waist as we made out. I pulled away, running my hand down his arm. He actually shuddered, letting me take his hand and move it from my waist. \"Clay I'm already hard,\" I grumbled, putting his hand on my crotch.\n\n\"Fuck,\" he groaned, pressing his palm against my shaft. I gasped, a thrill of pleasure making my body crumple into him. \"Are you really this sensitive?\" he whispered, rubbing me again and I trembled.\n\n\"I jerked off before I came over here,\" I grumbled and he froze. \"I couldn't stop thinking about it and I didn't want to show up with that on my mind. It didn't feel fair to you,\" I admitted, closing my eyes tight. \"If that bothers you I'm sorry. I just,\" his lips covered mine, his hand rubbing me through my shorts as his other pushed up into the back of my shirt. His skin was so hot it set fire to mine. I let my hands run down his stomach, pulling his shirt up. He inhaled heavily, holding his breath as my palms pressed up against his stomach. I ignored my jitters and slid them up toward his chest. His pecs felt so firm.\n\n\"Bruno what are you-\"\n\n\"Do you want me to stop touching you?\" I asked quietly, stopping with my thumbs against his nipples. His eyes were so bright as they stared back at mine. We both waited a moment before he blinked and shook his head. I smirked and continued to touch him, kissing him again. My fingers ran along the humble patch of chest hair that trailed down the center of his stomach. It was soft and blond, like his hair and his pubes. I took a deep breath and let my fingers run down to his pants. \"Does it go all the way down?\" I teased and he groaned.\n\n\"You've seen me naked,\" he countered and I shrugged.\n\n\"I was trying not to stare,\" I admitted and he scoffed, his hand in my hair as he pulled my mouth toward his again. We both moaned as our tongues tangled. My fingers curled into the top of his shorts, tugging on them a bit as we kissed.\n\n\"I was going to tell you I wanted to take this slow and let you get used to it,\" he panted when I pulled away. He cleared his throat, his ears red as he ran his hands down my back. \"But you seem really into it,\" he grumbled. I shrugged and bit my lip.\n\n\"I'm also a young man who hasn't had proper sex in a very, very long time,\" I muttered and he laughed.\n\n\"It doesn't change that I want to take it slow still,\" he started and my excitement slowly started waning.\n\n\"What does slow mean for you?\" I let his pants go and he sighed, smiling.\n\n\"No anal?\" he offered and I flinched and then let my forehead fall into his shoulder as I laughed. He chuckled too, his hands sliding down my hips to my thighs. He pushed them up into my shorts, his hands freezing as they neared my hips again. \"Are you not wearing any underwear?\" he grumbled and I blushed, my chest feeling tight as I adjusted on his lap.\n\n\"I don't usually like to. Is that a turn off for you?\" I whispered. He didn't answer, he just slid his hands down and back up along my thighs. It felt rough, but in a way that made me feel wanted. His fingers brushed up against my ass and I tensed up, then trembled. \"Why are you stopping yourself?\" I whispered when he ran his hands down again.\n\n\"Because I know how far I can go before I can't hold back,\" he grumbled and I smirked. I wrapped my arms around his shoulders, pressing my lips and tongue to his neck as I kissed and sucked at it lightly. He gripped my thighs, inhaling sharply as I continued to work toward his ear. I hesitated before spreading my lips and biting him gently. He shuddered, his head tilting to give me more room. My eyes closed as I continued to kiss along his neck, my one hand sliding up to his hair. I pushed my fingers into it, loving how thick and bushy it felt as I gripped it. I pulled his head back more, hearing him groan as I bit and sucked at his neck harder. My other hand moved up the back of his neck, my finger and thumb teasing his ear gently as I continued.\n\nHis hands slid up the backs of my thighs, not hesitating as they gripped my ass. I tried not to react to the foreign sensation as he started groping and rolling my ass in his hands. I adjusted, my lips sliding up to his ear as my hand released his hair and slid down to tease the other side of his neck as I sucked and nibbled on his ear. \"Fuck,\" he moaned quietly. His hands slid over my thighs and then I froze when I felt his hand touch my dick. \"Is this ok?\" he whispered gently, starting to stroke my shaft. He was tugging and lightly twisting his hand, his thumb rubbing that amazing spot at my tip with every pass.\n\n\"God yes,\" I whimpered as an amazing surge of pleasure coursed through me. My body was on fire, my cock throbbing as his strong, hot hand tugged and stroked it expertly. I reached down to undo his shorts and he bit his lip. I went to try and push them down when he pulled away. I was about to protest until he pushed me down onto the bed. He knelt between my thighs, a look in his eyes that could only be described as lust.\n\n\"You really know how to push a man's buttons Bruno. You sure you've never done this before?\" he grumbled and I hesitated, biting my lip.\n\n\"I uh, the studying I did, was,\" I started and a knowing look flashed across his face. He sighed and smirked, reaching down to push my shirt up. I helped slide it off and then was shocked when he leaned down and wrapped his arms under me. He kissed my stomach and up my ribs toward my nipple. My heart was racing as I watched his lips and tongue tease my skin, his eyes meeting mine as his lips parted. I felt his tongue and teeth tease my nipple and I gasped. An electric thrill shot through me, my back arching as my hands gripped his biceps.\n\n\"Oh good, I love sucking on nipples. I'm glad you like it too,\" he whispered before closing his lips around it. He sucked and bit at it, his tongue flicking it about. Tingles ran up and down my spine, my cock twitching as I burned up. He worked toward the other one giving it just as much love and attention. I reached over his shoulders, pulling his shirt up. He pulled away slightly, helping slide it off before he laid down on top of me.\n\n\"Oh god,\" I gasped, the feeling of his warm, firm body against mine was incredible. We tangled our bodies together, kissing each other desperately as my legs squeezed his hips. Before I knew it my shorts were being tugged on, his hands at my hips. A moment of nerves overcame me and I grabbed his wrists, taking a deep breath. \"Wait, uh, um, what are you going to do?\" I asked and he smiled sweetly, kissing my chin before taking a deep breath.\n\n\"I wanted to take these off so I could make you feel great. But if you'd rather keep them on,\" he went to let go and I shook my head.\n\n\"No, I guess I'm just a bit embarrassed. No one's ever really um,\" I cleared my throat and he smiled.\n\n\"What? Seen your asshole?\" he pressed and I flinched, nodding as I took a deep breath. My body was jittery and hot as he worked my shorts off. \"I won't look or touch you there. I promise. Unless you ask me to. It is the best part though,\" he murmured. I felt him slide down my body and lower on the bed, my heart racing.\n\n\"Clay you seem different when you're turned on,\" I grumbled and he laughed then I felt his lips on my thigh.\n\n\"You do too Bruno,\" he mumbled and then I felt his lips slide along my thigh toward my dick. The anticipation was killing me. A warm gush of his breath touched me first, making me shiver and then I felt the hot, wet warmth of his lips and tongue on my tip. I groaned, reaching down and grabbing his hair. His arms tucked up under my legs, one hand on my stomach as the other caressed and pulled at my shaft with his mouth. I could feel his tongue, his lips, the pressure of his hand, all of it was maddening as my cock throbbed and twitched with excitement. I looked down and almost exploded at the sight of his hand and face on my dick. It looked even better than I imagined!\n\n\"Fuck you're gonna make me cum,\" I groaned when I felt him adjust, my dick rubbing against the roof of his mouth and into his throat. His tongue would slide against my shaft and flick my tip as he bobbed his head, swirling around it occasionally. I was covered in his spit, his hand working my shaft torturously as he continued giving me the blow job of my life. My balls started to churn as he worked faster, the pressure seeming to coerce everything out of me. \"Shit, Clay I'm gonna cum!\" I tried to push his head away but he ignored me. He worked faster, his mouth slurping and his hand slapping against my skin as he pumped my dick.\n\n\"Mmm,\" he hummed and I threw my head back, grabbing his hair as my hips lurched. My dick swelled, my balls sucking in and tensing as I shot what felt like the biggest load of cum into his throat. He kept going, sucking now as he bobbed his head. I could feel the pressure, my eyes rolling back as I trembled and lurched with another blast. I felt like I couldn't breathe, my body locking up as a few more pitiful spurts forced their way out. He held my dick up, licking and slurping it all over to clean it up. I felt him shift but couldn't find the energy to look down anymore.\n\n\"Holy shit,\" I huffed, rubbing my face. I felt light headed, my body hot and jittery as I tried to recover. I looked down when I realized Clay hadn't moved. He was kneeling over me, biting his lip with his pants down. I was shocked to see him jerking off, his forehead wrinkled. My heart dropped. Did he not want me to help him? \"Hey,\" I sat up and he hesitated, looking shocked. I grabbed his wrist and studied his face. \"Let me try?\" I offered and he bit his lip, his forehead wrinkled as he trembled.\n\n\"You're dangerously good at making me go crazy,\" he muttered and I smirked.\n\n\"I'm not promising it'll be any good,\" I mumbled and he shrugged, pushing his pants off. He was completely naked then as he sat back against the wall. I took a deep breath, adjusting to lie between his legs. I put my arms on his thighs, my eyes wide as I admired his dick. It looked it'd be huge while it was soft but I didn't expect it to be this big. \"Will it even fit?\" I muttered out loud and he chuckled, reaching down to slide his hand into my hair.\n\n\"You could suck on as much of it as you can while I jerk off?\" he mumbled, his voice heavy with desire. I shuddered at the sound, looking up with a small smile. His ears and cheeks were flushed, his mouth hanging open slightly as he admired me. I adjusted kneeling then to take his tip into my mouth. It was hot and stiff, the flesh around his tip a bit squishy against my tongue. I sucked on it and he groaned. \"Watch your teeth,\" he muttered and I tried to open my mouth more, focusing on my lips and tongue. I could smell his muskiness, the taste a bit salty and bitter as I bobbed my head up and down like he did.\n\n\"Hmmmpf,\" I pushed as deep as I could, gagging and he groaned, tensing up. I felt his fingers claw at my head realizing he liked that. I focused on breathing, not caring how much I was drooling as I continued to ease him into my mouth. I closed my eyes and pushed deep again and he gripped my head, his hips lurching then. I gagged immediately, pulling away with a loud slurp as his dick slipped out of my mouth.\n\n\"Sorry! Sorry,\" he grumbled nervously. I pushed his hand away from his shaft, taking it in both of mine. His head fell back as I twisted gently in opposite directions, stroking him eagerly. His hands slid up into my hair and I leaned down, watching him as I pressed my lips to his tip. His eyes flashed open, meeting mine. \"Fuck,\" he groaned, his face contorting with pleasure as I licked and sucked at his tip, my hands working his entire length.\n\n\"Where do you want to cum?\" I muttered, closing my lips around his tip as I closed my eyes. He groaned, his thumb and finger stroking my ear as he held my head.\n\n\"Huuuuh, your throat,\" he moaned and I trembled, loving the sound of his pleasure. He pulled my hands away and I held his waist, letting his hands hold my hair as he worked me up and down along his shaft. \"Yes, just like that!\" he panted, my tongue and lips coercing him. I tried to remember the blow job tips, wanting him to really enjoy it. As he pulled my head up I licked at his tip, teasing that little fold and letting my lips curl and rub his shaft to keep the sensation going as I drooled all over him. \"Bruno I'm,\" he trembled then, his fingers knotting in my hair as he thrusted at my throat. My eyes watered as I gagged, swallowing as I felt the first bout of cum pour into my throat. I was afraid of choking so I kept sucking and swallowing as his hips bucked slightly. Finally it stopped and I ripped my mouth away, gasping for air. I heard the slap of his dick against his stomach, wiping my mouth with my arm as I looked up at him.\n\n\"H-how was it?\" I asked nervously, my cheeks hot as he breathed deeply. His eyes opened, a warm smile on his face.\n\n\"It was great. Especially for your first time,\" he muttered and I smiled. \"Um,\" he glanced at the bathroom and cleared his throat. \"Do you want to rinse off and hang out for a bit?\" he mumbled and I bit my lip.\n\n\"Are you offering that we shower together?\" I asked, feeling nervous but also excited and still jittery. He sat up off the wall, grabbing me and pulling me toward him. Our lips opened together, his tongue sliding along mine.",
        "\"Only if you want to,\" he muttered and I felt my stomach knot up.\n\n\"I think I want to,\" I whispered and he smirked. \"But I really want to just hang out too. I promise. I'm not this big of a perv,\" I grumbled and he laughed.\n\n\"Don't be embarrassed. It's really nice having someone as into it as me,\" he breathed softly and I bit my lip. I was reluctantly excited, ignoring all of the weird nagging thoughts about how complicated this might get.\n\n==========================================\n\nChapter two to come...(?)"
    ],
    "authorname": "CateredContentQueen",
    "tags": [],
    "category": "Gay Male",
    "url": "https://www.literotica.com/s/my-exception-is-you"
}
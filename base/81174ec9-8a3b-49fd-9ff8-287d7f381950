{
    "title": "Gamers Pt. 11",
    "pages": [
        "I didn't draw the cards.\n\nThe moment Vee said those words, I felt as though I had been punched in the gut. It was hard to breathe, for a minute. Her hand was still in mine, but she pulled it away, to take up her napkin and dab at her eyes. She couldn't stop crying.\n\nI finally recovered my senses, and realized that she needed me. Whatever I was feeling - or not feeling, since I was so stunned - Vee was hurting. I sat next to her, and tried to comfort her, putting my arm around her shoulder, and stroking her arm.\n\n- \"It's alright.\" I told her. \"It'll be alright.\" \n\nShe shook her head. She stopped crying long enough to say \"Please - take me home.\"\n\nI apologized to the waiter, and paid for our wine. The drive home was agonizing. She was still sobbing, and refused to even look at me. I mumbled platitudes, trying to make her feel better.\n\n- \"Where do I take you?\" I asked. \"Should we go for coffee, and talk about this?\"\n\nShe shook her head. \"Trisha's.\" was all she said.\n\nI walked to the door with her, but she wouldn't let me in.\n\n- \"Vee.\" I said. \"We have to talk about this.\"\n\n- \"I can't.\" she said, starting to sob again. Her makeup was smeared, with tear tracks down both cheeks, and her mascara had run, making her look exactly like I felt - horrible.\n\n- \"I don't think I should leave you alone.\" I said.\n\n- \"Please. Just go.\"\n\n- \"Vee -\"\n\n- \"I'll call Lucy. And Trisha. Please ...\" She still wouldn't look at me.\n\nI let her close the door on me.\n\nI have no memory of driving home. All I remember was calling Lucy, and then texting her when her phone was busy. Lucy replied in the affirmative: she was talking to Vee. I did park my parents' car in the drive, and then went for a walk through my neighborhood. It was a steamy, humid night.\n\nI didn't draw the cards.\n\nThe moment she said it, I knew who had. And felt like an idiot for not knowing it sooner. Vee loved abstract, and never drew or painted people or animals, just like the Moorish art she admired so much.\n\nHer embarrassment, her reluctance to have me use the cards with the game - I had thought it was because the seventh card, which I took to be her, was too sexy. That wasn't the problem. It was the fact that they weren't her work at all that bothered her.\n\nHow many times had I complimented her on her cards? How many others had commented on them, telling me, or telling her how wonderful they were. 'The girl who drew those must really love you', someone had said. It must have been like twisting a knife in Vee's heart every time she had to hear that. \n\nAnd now I was questioning her, and questioning myself. What did I feel for Vee? At the beginning, she had been in love with me for a long time, whereas I was caught by surprise. It was flattering, of course, to have a beautiful girl say she loved me. A boost for my ego. And I responded by falling in love with the person who loved me.\n\nWould we ever have reached an equilibrium? Would we have ended up feeling the same about one another? \n\nVee was hurting, and I wanted to reach out, to offer her some support. But maybe I was a large part of the problem. Every time she saw me, would Vee be thinking about this?\n\nAnd would I do the same? Would I be able to look at Vee and not think about the cards - and the person who really had drawn them?\n\n**************************\n\nI was pretty much useless the next day. I didn't do a single constructive thing. Les called, but I couldn't think of what to say, so I postponed that conversation. Later that evening, I found the energy to read my mail. Les and Lucy had both sent me messages, offering a shoulder to cry on if I felt so inclined.\n\nAnd there was a message from Jazz. It consisted of a single line.\n\nI am so sorry.\n\nThe next day, Monday, I kicked myself out of my funk - this wasn't helping anybody. I called Vee, and to my surprise, she agreed to see me - Tuesday night.\n\n- \"Come over to Trisha's.\" she said. \"About 8:00, okay?\"\n\nI managed to keep myself busy for a day: cut the grass, cut our elderly neighbor's grass, clean out the garage. Mom must have figured that I had lost my mind.\n\nAt 8:00 sharp, I was knocking on the door of Trisha and Angie's apartment. I had not the slightest clue what I was going to say. Vee opened the door. She had been crying again, but looked a little more composed. She offered me a beer, which I accepted, if only to make this seem a touch more normal.\n\nShe put me at the table, and then sat down opposite me.\n\n- \"This isn't going to be easy for me.\" she said. \"You'll have to bear with me. But I'll tell you the truth, as best I can.\" At least she was looking at me today.\n\n\"I told you that I fell in love with you right away. And that's true. But I didn't tell you - I didn't tell anybody - because you were with Kasia. I ...\"\n\n- \"You don't have to do this, Vee.\" I said, even though I didn't know what she was going to say. \n\nShe held up a hand. \"Yeah, I do. Let me tell it. I knew what Kasia was doing - we all did. But I didn't tell you, because she's my friend and you were ... just some guy I was crushing on. And you were her boyfriend, even if ... you know.\"\n\n\"I wasn't going to try to steal Kasia's boyfriend. Then ... you know. Everybody found out. It was such a mess. I tried to forget about you - maybe I did. I don't know.\"\n\nVee bit her lip. She was being very courageous, trying to remember everything she thought I should know.\n\n\"Then you started gaming with us again. Without Kasia. I had ... things going on. But the real reason I didn't say anything was just ... I'm kind of a chicken, in some ways. But that's not the point. It took me a few weeks to get up the courage to say something - I don't know, to ask you out.\"\n\n\"I was having lunch with Jazz and Lucy. It was a couple of days after you all went to that club - that British Invasion Dance.\"\n\nI nodded. It was the first time Jazz and I got together.\n\n- \"So we're laughing about something, and then I decide to tell them both that I'm going to ask you out. I guess I figured that might commit me, or something. Like once I said it, I would have to actually follow through and do it.\" \n\n\"And both of their faces dropped. I mean, they looked horrified. Well, you know Jazz - she took a deep breath, and she told me truth. She told me that she had slept with you, and that she was crushing on you herself. She apologized - I think she was more upset than I was.\"\n\n\"It was nobody's fault, really. But Jazz has always been protective of me, and she was really torn - I could tell. She kept saying 'Three days'. If she had waited three days before sleeping with you, she would have known how I felt, and then she could have stepped aside.\"\n\n- \"Is that why she told me that she wasn't 'girlfriend material'?\" I asked\n\n- \"No. If I remember correctly, she told me that day that she had already warned you. See, her father had been talking about moving her to Australia, to be nearer her sister. One week it was on, another week it was off. He'd been doing that to her since reading week. She said it was like being a passenger on a yoyo.\"\n\nVee sniffed. I stood up, went into Trisha and Angie's bathroom, and came back with a box of tissues. I placed them on the table next to her. Vee smiled for the first time.\n\n- \"I'm ok.\" she said. \"But thank you.\"\n\n- \"Go on.\" I encouraged. \"Lunch with Jazz and Lucy.\"\n\n- \"Oh - not much else, that day. But maybe two weeks later, Jazz called me up and we got together. She said that Australia was on again. She admitted that she was still sleeping with you, and ...\"\n\n- \"And?\"\n\n- \"And that she was more in love in you than she was when you first started.\" Vee looked like she might cry. I nodded at the box of tissues, but she shook her head.\n\n\"No - I'm fine. Anyway - Jazz said that ... with Australia on again, she would try to keep your relationship with her to 'a short fling'. Her words.\"\n\nI remembered the exams that year. Jazz had insisted that we both study for exams. She had suggested that we not see each other until they were over. Had she been trying to gradually wean me off her? Or herself off me?\n\n- \"Go on.\" I said.\n\n- \"It was about that time that Jazz came up with an idea. I think it was after exams. She said that she could limit your relationship to a 'summer romance' - again, those were her words. And she told me that I could step in when she left. If she left.\"\n\n- \"She wasn't sure?\" I asked.\n\n- \"I told you: on one week, off the next. But she said that I had to be 'in position' to step in if she had to go. She wanted to plant the idea of me in your head.\"\n\n- \"She did, Vee. She talked about you a lot. How wonderful you were, how pretty you were. I didn't realize ... I didn't understand what she was doing.\"\n\n- \"Jazz said that she would try to encourage you to think of other girls, and me in particular. But she didn't want to be too obvious. 'He's too intelligent to con', she said.\"\n\n- \"How wrong she was.\" I said.\n\n- \"I don't know.\" said Vee. \"But then Jazz came up with another idea.\" \n\n- \"The cards.\"\n\n- \"When she drew them, she was pretty sure that she'd be leaving during the summer. So she talked me into giving them to you, and letting you think they were from me. I ... I had objections. But if I'm going to be entirely honest, I didn't say no.\"\n\nVee tried to remember the exact words of their conversation. They went something like this:\n\nJazz: You're an artist. He knows that you're an artist.\n\nVee: You're an artist too. He'll recognize your style.\n\nJazz: I've never shown him any of my work. And I'm using a style I've never tried before.\n\nVee: But they're yours. Why don't you give them to him yourself?\n\nJazz: He's a romantic. Very sentimental. That would just make him fall in love with me.\n\nVee: You're in love with him already! Why would that be a bad thing?\n\nJazz: That's not the point, Vee. If I'm not going to be here in September, then the less he's in love with me, the better. It won't hurt him as much when I go. And the more highly he thinks of you, the sooner you two can get together.\n\nVee: It just sounds so crazy. \n\nJazz: I want you both to be happy, Vee. You have strong feelings for him. And if I wasn't in the picture, Dean would probably have strong feelings for you. So now that I know I won't be here ... it just makes sense to help you two get together.\n\nI was silent for a while, digesting that. Vee continued.\n\n- \"It got weird when she kept drawing cards, and then giving them to me. She had just finished the second set, I think, when her Dad changed his mind, and the move was off. I said it was time to tell you that the cards were hers, but she asked me to wait. Sure enough, her father changed his mind again. Somehow, I think she knew that he would.\"\n\n\"When she finally did leave, I could see that you were devastated. Part of me wanted to comfort you, to offer you a shoulder to cry on. But I was afraid. I thought it was too soon.\"\n\n\"So I waited too long. And then you hooked up with Angie. I don't blame you, or anything ...\"\n\n- \"That was just sex, Vee. Neither of us was in love with the other. We both knew that from the very beginning. It was her idea, really, to just remain friends. And then she told me that she wanted to go out with Rick.\"\n\n- \"Rick the Dick?\" she asked.\n\n- \"Yeah.\" I was glad to see that the nickname was sticking. It fit.\n\n- \"I didn't know ... the details.\" she said. \"All I could see was that you and Angie were getting close. It looked to me like I had missed my chance - again. So when Max asked me out, I accepted. He's your friend, so I figured he must be a nice guy. But there was no spark there. I shouldn't have gone out with him at all. That was a mistake.\"\n\n- \"But you found the courage to tell me how you felt.\" I said.\n\nShe waved a hand in dismissal. \"That may be the only thing I did right. I did everything else wrong. And letting you believe that the cards were mine was ... just stupid. I was stupid. Jazz meant well, but she was stupid, too.\"\n\nI had no idea what to say. We sat there in silence for a little while.\n\n- \"So ....\" I ventured. \"Where do we go from here?\"\n\nVee looked up, with a tremendously sad expression on her face.\n\n- \"Nowhere, Dean.\" she said. \"We can't go on from this. Now you know that Jazz loved you all along, and still does. She loved you so madly that she tried to make sure that you would have a girlfriend when she left.\"\n\n- \"She lied to me.\" I said.\n\n- \"She lied to make you happy. I lied to keep you for myself. Her lie was unselfish. Mine wasn't. Every time you look at that game, at those cards, you're going to be reminded of just how much she loved you - and that I deceived you.\"\n\n- \"I won't -\"\n\n- \"You won't be able to help it. How could you possibly think anything else?\"\n\n- \"Vee, I have strong feelings for you.\" I said. And I meant it.\n\nShe smiled, finally, but very sadly. \"I know, Dean. You've loved me, these past few months. It's been wonderful. And maybe you'll always wonder what might have been, had things been different. But if you and I tried to stay together, it wouldn't work. You would always be wondering about Jazz, and what might have been with her. I don't see how you could avoid that.\"\n\n\"Let me do something selfless, for a change. Follow your heart, Dean. Try a long-distance relationship, or whatever you can. I won't stand in the way, and I won't make you feel guilty. I love Jazz, too.\"\n\nI had to bow my head. Vee spoke the truth, and the words found an echo inside me. She was right. If I stayed with her, I would always wonder ...\n\nWe promised that we would remain friends, and that she would continue to game with us. Only time would tell if we could live up to that. She let me hug her, and kiss her cheek. And then Vee sent me on my way.\n\n**************************\n\nTwo days later, I took out my Amazons game. It made me realize that Vee had been right. I was thinking about Jazz. The board made me think of Jazz. And the cards ... Vee had been wrong about one thing: they didn't make me think of betrayal, or of deception. They made me think of Jazz.\n\nI felt much the same about Vee as I had weeks ago. I had strong feelings for her, but not as strong as hers for me. She was smart, and kind, and beautiful. I was powerfully attracted to her physically. But the disparity between the intensity of our feelings made me uncomfortable. Maybe, in time, that would have changed. Maybe.\n\nSo I spoke to my Professor at work, and watched the movie 'Good Will Hunting' - for about the 6th time. I also had a long conversation with my parents. Of course, I also stared at Jazz's self-portrait, hanging on my wall, above my computer. It had been moved only once - the night Vee came over, and we made love in my bed. The next night, I put the portrait back.\n\nIt's amazing how little details, little things like that, can tell us so much. I asked Lucy and Les to meet me at a pub downtown. \n\n- \"You talked to Vee.\" said Lucy. It wasn't a question.\n\n- \"She told you?\"\n\n- \"She said she told you everything.\"\n\n- \"She did.\" I said. \"She was brutally honest. And she let me go.\"\n\n- \"You ok?\" asked Les.\n\n- \"I'm good.\" I replied.\n\n- \"What are you going to do?\" asked Lucy.\n\n- \"I'm going to Australia.\" I said.\n\n**************************\n\nIt's a fucking long flight to Australia.\n\n**************************\n\nIt takes quite a while to fly 10,000 miles. By the time you get through customs, it's unlikely that you will be feeling - or looking - your best. But when I finally collected my luggage, and stepped into the arrivals area, I immediately felt like a million bucks.\n\nBecause Jazz was there to meet me.\n\nI had sent her my flight number, and my arrival time, but not much more. I also didn't read her email reply, because I didn't want her to talk me out of it. I forwarded the message to Lucy, and asked her if there was anything I needed to know. \n\n- \"She'll be there.\" was Lucy's simple reply. \n\nJazz was wearing tight jeans and a lime green t-shirt. Her hair was slightly dishevelled, as always. She was so beautiful that my chest hurt.\n\nShe waited for me. I closed the distance between us, from 10,000 miles to a single yard. And then she leapt the final yard, wrapping her arms around me. She nearly knocked me on my ass. Her lips sought mine, and she poured almost a year's worth of love and longing into a kiss.\n\nFinally, Jazz released me, and allowed me to gulp in a breath of air.\n\n- \"You're not staying at a hotel.\" she said. Jazz made a grab for my luggage, but I wasn't having any of that. \"Don't be a fool - you're staying with us.\" she insisted.\n\n- \"Alright. Just lead the way.\" I said.\n\nShe had borrowed her sister's car. I knew that August was winter in Australia, but I still wasn't prepared for 12 degrees Celsius. As she drove, Jazz pointed out local landmarks and simultaneously tried to fill me in about her living arrangements.\n\nI remembered Botany Bay, and the fact that she was living with her sister and her sister's husband. Her father had helped them purchase a large two-story house, with plenty of room for all four of them. Her Dad was presently away on business, but would return the day after tomorrow, which suited me fine.\n\nIt took about half an hour to reach their place. When we arrived, her sister opened the door. Reem was four years older, and just as lovely. She was a bit heavier, but had the same brown eyes and aquiline nose. Reem had a warm smile, and like her sister, she wasn't shy at all.\n\n- \"Dean.\" she said, wrapping me in a full-body hug. \"We're so glad you're here.\"\n\nI met her husband, Liam, who was built like a linebacker. \"Welcome to Sydney.\" he said. We exchanged a few pleasantries, but Reem didn't give him a chance to say much more. \"C'mon, Liam. We'll let Dean settle in. I'm sure he could use a rest and chance to freshen up. We have some errands to run, but we'll see you for dinner.\" \n\nJazz took me upstairs. She showed me to a well-appointed guest room.\n\n- \"Do you want a drink, first? Or a shower?\" \n\n- \"A shower, please.\" \n\nHalf an hour later, dressed in clean clothes, I joined Jazz in the sitting room. She cracked open a beer for each of us, and then sat down beside me on the couch. She was unusually hesitant.\n\n- \"I don't know where to start.\" she admitted. \"I can't believe you're really here.\"\n\n- \"Me neither.\" I said. \"You look like a dozen of my best dreams all rolled into one.\"\n\nJazz rarely blushed, but she did flush very prettily. Then she grew suddenly serious.\n\n- \"Dean, before you say anything, I want to tell you once more: I am so very sorry about you and Vee. I never meant to hurt her. Or you, for that matter. The opposite, in fact. I wanted you two to be happy together.\"\n\n- \"You don't have to apologize.\" I said. \"Vee told me everything, from her perspective.\" I gave Jazz a summary of what Vee had said.\n\n- \"That's true.\" she said. \"It was stupid. I meant well, but I didn't think it through. I made a Vee a partner in my deception, and it ended up hurting her.\"\n\n- \"Don't blame yourself too much.\" I said. \"Somehow, I don't think that Vee and I were that good a match, anyway.\" I explained about the difference in the levels of intensity between us. \"I've had a lot of time to think about everything. I'm pretty sure, now, that the little awkwardness between us would have always been there. I would always be wondering if I only loved her because she loved me.\"\n\n\"And it would never have been right for Vee. She would always be worried that I was still in love with you. And she would have been right.\"\n\n\"It's odd, though. I thought, at the beginning, that you and I had started that way. I was madly in love with you, and you kept trying to discourage me with your ' I'm not girlfriend material' routine.\"",
        "- \"I was trying to warn you off.\" said Jazz.\n\n- \"I know. But I also came to understand that it didn't matter. You couldn't change how I felt about you. And then I realized that you felt the same - despite your warnings. I don't know how I never figured out that the cards were yours. I can be pretty dense, sometimes.\"\n\nShe smiled, then, and reached up to touch my hair. \n\nI matched her gesture, and raised my hand to touch her hair. I caressed her cheek, and then I leaned forward to kiss her. She met me halfway, and wrapped her arms around me.\n\nSomehow, we got off the couch and up the stairs without breaking contact. Jazz steered me toward the guest room. We were kissing more passionately, more aggressively, our hands searching and exploring. Her pants were undone, and my belt was gone.\n\nI tried to strip off as much of her clothing as I could, before my baser urges took over completely. She seemed equally frantic, tugging at my clothes. She also reached behind her, into a bedside drawer, and produced a condom.\n\n- \"You have to wear one of these.\" she said. \"I went off the pill after I got here. But I only got a dozen - I may have to go shopping for more.\"\n\nWe managed to get most of our clothing off, and the condom rolled on, before we sank down onto the bed together, and I finally entered her. The moment of penetration was exquisite. We both groaned. I had no finesse, no romance, and I was not particularly gentle - but that was exactly what Jazz wanted. I pushed inside her, trying to get as deep as I could, while she clutched at my ass, trying to pull me further in.\n\nOur bodies slammed together, as I tried to nail her to the bed. On every stroke, her hips came up to meet me. It was too much for me. I groaned again, and exploded inside the condom. She moaned, feeling me spurt inside her, and clutched me even tighter.\n\nI couldn't leave her like that. I took her nipple into my mouth, while I slipped a finger inside her, and teased her clit with my thumb. Jazz was so excited, it only took a few moments to bring her to a climax.\n\nWe held each other, pressing our now sweaty bodies together.\n\n- \"You're going to need another shower.\" she whispered.\n\n- \"Are you propositioning me?\" I asked.\n\n- \"What if I am?\"\n\n- \"What time is it?\" I asked her.\n\n- \"About 2:30. We're not going out for dinner until about six. Do you want to take a nap?\"\n\n- \"No.\" I said. \"I want to talk. I have a whole list of things I need to tell you. Seven of them, as a matter of fact.\"\n\n- \"You made a list? Okay - what's number one?\"\n\nI propped myself up on one elbow, and looked into her beautiful brown eyes.\n\n- \"I had to see you. I've missed you, and thought about you - but the urge to see you again was overpowering. And from where I'm lying now, it was worth the airfare.\"\n\nJazz pulled my head down, and kissed me. \"Sweet talker. Keep that up, and you'll be getting into my pants in no time.\"\n\nI rolled out of bed, and went over to my luggage. I came back with a small package and an envelope. I put the package on the nightstand, next to her.\n\n- \"Two.\" I said. \"Lucy and Les sent you a present. They miss you, too. And Lucy said that I was to ask you about a painting.\"\n\nJazz blushed, this time. \"I'll ... I can show you later.\" she said.\n\n- \"Three.\" I continued, handing her the envelope.\n\n- \"What is it?\"\n\n- \"Open it.\"\n\nShe did. It was a cheque for $10,000, from Circle the Wagons Games.\n\n- \"I can't -\" she started.\n\n- \"You can, and you will, and there's no discussion. Ed West loves your work. He's interested in Maharajah, too, and he really likes the board. I have to warn you, though - he's going to try to persuade you to draw character cards for Maharajah as well.\"\n\n- \"We can discuss this later.\" she said.\n\n- \"The cards, yes. The cheque, no. That's simply what your cards and your board are worth, according to the people who bought Amazons. There's an option for more, in fact, if the game sells particularly well. Don't fight me on this, Jazz - you'll lose.\"\n\n- \"Thank you.\" she whispered. She insisted on a kiss and a big hug, which led to another kiss, and threatened to turn into considerably more. I pulled back, and held her at arm's length.\n\n- \"Four.\" I said. \"I have to apologize. I was a fool. I should have known that the cards were yours. And I should never have let you go the way I did. It was very stupid of me, and I'm sorry.\"\n\n- \"Apology accepted.\" she said. \"I wasn't any smarter.\"\n\n- \"Five. I came to Australia with ulterior motives. I didn't just come to see you, and talk to you, or to deliver a parcel and an envelope. I planned all along to kiss you, and to take you bed. I'm here to make love to you as often and as well as I can.\"\n\nShe pulled me down beside her. We kissed and caressed each other for a while. I decided that it was her turn to come first this time, and worked my way down her body until I could kiss her lower lips and run my tongue between them.\n\nJazz let me work her over thoroughly, unhurriedly. She ran her fingers through my hair, and gently rubbed my earlobes, but otherwise let me have my way with her. She came softly, with a slight trembling in her legs.\n\nShe pulled me back up next to her, then rolled me over on my back. She kissed her way across my chest, and down my stomach, until she scooped up my lengthening organ in her mouth. She made sure that I was fully erect, and thoroughly wet, and then put a condom on me.\n\nJazz straddled my hips, and took hold of my cock, and then sank down upon it. She placed both of her hands on my chest, and began to ride - but so softly, so slowly, with an easy motion. She was in no hurry, either. We both stared into each other's eyes, and a huge smile lit up her face.\n\nUnlike our first frantic coupling, this was a languid feast for the senses. But most of all, it was about intimacy and closeness. Emotionally, it was the most intensely satisfying experience I had ever had. \n\nShe rode me quietly for many long minutes, until I came again.\n\n**************************\n\nWe showered together, and cleaned up, well before Reem and Liam returned to take us out to dinner. They had chosen a Spanish tapas restaurant, of all things, swearing that the food was excellent.\n\n- \"Watch yerself.\" said Liam. \"These two like to slide a fella the spiciest stuff, and then laugh when it blows his 'ead off. I was sweatin' from my 'ead, an' they thought it was 'ilarious.\"\n\n- \"Stop exaggerating.\" said Reem. \"It's our treat, Dean. We heard that congratulations are in order. It must be a thrill to have sold your game.\"\n\n- \"I taught them how to play.\" said Jazz. \"But they haven't seen this.\" she added, passing the cheque I had given her across to her sister.\n\nReem's eyes went wide. \"Whoa!\" She showed it to Liam.\n\n- \"Bloody 'ell!\" he said. \"Why are we the ones payin'?\"\n\nThey were excellent company, bright and funny, but also genuinely interested in what I was doing back home. Reem wanted to hear how we had first met, from my perspective. Jazz had obviously already told her own version. Reem also trotted out a few of the obligatory embarrassing stories from her little sister's childhood. Jazz didn't seem too traumatized, and got some revenge by telling me the story of how Reem and Liam had met.\n\n- \"He spilled a beer on her at a football match!\" \n\n- \"It was an accident.\" protested Liam. \"'Sides, I was carrying three at the time. I did save two of 'em.\"\n\nReem had been visiting a friend, but Liam was appealing enough that she had returned to Australia for a second visit six months later. Her third trip to Australia had started three years ago - and was still ongoing.\n\nThe girls went off to the ladies' room together. I watched Liam follow them with his eyes. He turned back and grinned at me.\n\n- \"I think she likes you. Mind you, after everything Jazz told us about you, it would be a wonder if she didn't.\n\n- \"Reem? She seems amazing.\" I said.\n\nLiam nodded. \"She is. I would drink her bathwater. And her sister is a pearl beyond price. You don't know how lucky you are.\"\n\n- \"I have a pretty good idea.\" I said. \"Why do you think I'm here?\"\n\nWe didn't stay out too late. Reem suggested an early night, because I would probably be jet-lagged. But the way she was smiling at her little sister told me that she didn't expect us to be sleeping anytime soon. Reem and Liam wanted to show me around Sydney a little bit, but promised to wait until tomorrow afternoon, to let me sleep in.\n\nBack at the house, we said goodnight, and Jazz led me upstairs.\n\n- \"Leave your bag in the guest room.\" she said. \"You'll be sleeping with me tonight.\"\n\nJust inside the door to her room was her makeup table, with a mirror above it. Next to the mirror was the print I had given her of an Amazon in the Warrior's pose. While I stopped to look at it, Jazz stood behind me, and wrapped her arms around my chest. She looked at me in the mirror.\n\n- \"Do you have any idea how special that print is to me?\" she asked.\n\n- \"It made you cry, if I remember correctly.\"\n\n- \"Do you know why?\"\n\n- \"You liked it?\" I guessed.\n\n- \"I had just finished the first card for Amazons the day before. The one that looks like me? In the Warrior's pose? How about that? You gave the very pose I was working on. That's a bit too much of a coincidence.\"\n\nI turned around inside the circle of her arms, and kissed her. \n\n- \"Wait.\" she said. \"Lucy told you about a painting. I meant to show you all along. Reem said that if I didn't show it to you, she would.\"\n\nJazz's room was L-shaped. There was quite a bit of space for her computer table, an easel, and some of her art supplies.\n\nAbove her computer was a framed painting - of me.\n\nIt showed me sitting at a table, with a board game in front me. I was leaning forward slightly, one arm extended to move a piece. There were others sitting at the table, but their faces were deliberately obscured.\n\nI remembered the moment - Vee had taken a photograph of me at Trisha and Angie's apartment, one night when I was teaching them a new game. I couldn't recall which game it was, but Jazz had clearly set up Amazons, with a difference. There were tiny figurines on the board, depicting Amazon warriors.\n\nShe had painted me realistically - warts and all, as Cromwell would have said. No, I don't have warts. But my hair was ruffled, as I had pulled a sweater over my head that night. Jazz had painted my messed-up hair, along with all of my other minor imperfections. And yet she had made me look ... smarter? Like some kind of board game visionary ...\n\nIt was immensely flattering, and yet humbling. I had a momentary flashback, seeing myself opening the first tube she had sent me, with the board for Maharajah and her self-portrait. I didn't need further proof that Jazz loved me, but here it was. And I didn't feel awkward at all, because I loved her every bit as much - even if I couldn't express it as beautifully as she did.\n\n- \"It's ... I didn't know that you saw me quite like that.\"\n\n- \"Of course I do.\" she said. \"I love you.\"\n\nWords failed me, so I turned and took her in my arms. I cradled her head gently against my shoulder. She could feel the catch in my breathing, and the tightness in my chest. I was close to tears.\n\n- \"You know,\" she said, \"I think that Amazons would be even better with figurines. It would help to keep track of where the players are on the map - who's at the siege of Troy, or on a quest. It'd be great if the figurines could match the poses on the cards.\"\n\nThat saved me. She brought me back to earth, and made me smile. \"You're such a nerd.\" I told her.\n\n- \"The better to be with you.\" she answered. \"Now, you never finished telling me all of the things you wanted to say. You only got as far as number five. Are you saving 6 and 7 for a special occasion, or did you want to tell me those now?\"\n\n- \"Six is easy.\" I said. \"It's just one word.\"\n\n- \"One?\" she repeated. I could see her mind working as she tried to guess.\n\n- \"Rematch.\" I said.\n\nShe smiled a little uncertainly, not sure what I meant.\n\n- \"Rematch.\" I repeated. \"You said it after every game you didn't win. And I'm saying it now. I am more in love with you at this moment than I was a year ago. I should never have let you go.\"\n\n- \"I had to go, Dean.\" she said.\n\n- \"I know. I meant 'let you go' in the sense of trying to stop loving you. I want another chance, Jazz. I want to be your boyfriend, your lover - call it anything you like - the man in your life. And I want you to be the only woman in mine. Long-distance relationship if necessary, but if we can we can be together, that's what I want.\"\n\n- \"Together?\"\n\n- \"That's right. You come home, or I come here. I don't mean in a week, or a month. But in a year? We're both in the last year of our programs. I will probably start my Masters - but I'm not necessarily tied to one place. I want to be with you. Wherever you are.\"\n\nJazz was on the edge of tears.\n\n- \"I don't know ...\" she got out. \"It's ... complicated.\"\n\n- \"Wherever. Whenever.\" I said. \"I will wait for you, Jazz. And I will go wherever I have to. I want a rematch, and I'm not going to lose you this time.\"\n\nShe came into my arms, and let the tears flow, with her head on my shoulder again. But they were tears of happiness. I could tell, because she was trying to kiss me at the same time, and squeezing me so tightly that it was making it hard to breathe.\n\n- \"How?\" she asked. \"How can we do it?\"\n\n- \"I know that it's complicated - for you, at least. That's one of the reasons I'm here. My seventh reason, in fact.\"\n\n\"I'm going to speak to your father.\"\n\n**************************\n\nReem and Liam did let us sleep in, and they prepared lunch. Then the three of them took me down to the harbour, to show me the Opera House and the Royal Botanic Gardens. Jazz said the Art Gallery was pretty good, but her sister suggested walking out to the Rocks, which turned out to be a good idea.\n\nThat afternoon confirmed my first impression of Reem and Liam. They were good people: kind, generous, and interesting to be around. She had Liam right where she wanted him, but he didn't seem to mind at all. I could hear - in my head - Gerry and Les making whipping noises, and it made me smile.\n\n- \"Are you going to do that to me?\" I asked Jazz.\n\n- \"Do what?\"\n\n- \"Keep me wrapped around your little finger - the way Reem does Liam?\"\n\nJazz grinned. \"What makes you think I'm not already doing it?\"\n\nWe stopped several times, because apparently Australian law says that you can't travel more than two kilometers without going into a pub and having a pint. At least, that's how Liam explained it to me.\n\n- \"Makes perfect sense in summer. It's so fuckin' 'ot - you've got to keep your fluids up.\"\n\n- \"But it's winter now.\" I pointed out.\n\n- \"Practice makes perfect.\" he replied. \"Or off-season trainin'. Something like that.\"\n\nReem loved the sunshine and the heat of summer; Liam preferred the cooler winter.\n\n- \"'Sides,\" he said, \"in winter there aren't so many budgie smugglers on the beach.\"\n\n- \"Budgie smugglers?\" I asked. I swear, that's what he said. But I had no clue what he meant.\n\n- \"Men wearing Speedos.\" said Reem, by way of explanation. \"Looks like they're smuggling budgies in their bathing suits.\"\n\n- \"Eew.\" was my reaction. All three of them laughed.\n\nWe were back at their house by early evening, where I was treated to steak and shrimp 'on the barbie'. Copious amounts of beer seemed to be required.\n\nReem asked for my help in my kitchen at one point.\n\n- \"Can you slice up the mushrooms?\" she asked.\n\n- \"Sure.\"\n\n- \"My little sister is worried.\" said Reem. \"She seems to think that you're planning on talking to my father.\"\n\n- \"I am.\"\n\nReem put down the knife she was holding, and turned to face me. \"Tread warily, Dean. He's stubborn, and temperamental. He doesn't suffer fools gladly. I don't mean that you're a fool - I'm just saying that my Dad isn't the most patient or understanding of men.\"\n\n- \"Thank you.\" I said.\n\n- \"He thinks that you're going to try to steal away his baby girl. In his eyes, she's still his little princess. But if it helps, Liam and I are on your side. We know how Jazz feels about you.\"\n\n- \"Thanks, Reem. Now I understand why Liam says that he would drink your bathwater.\"\n\n- \"He's so gross, sometimes.\" she said. But I noticed that she was smiling.\n\nWe ate far too much food, until no one wanted to move. I volunteered to do the dishes, and drafted Jazz to dry and put them away. Afterwards, Reem suggested that we play a game.\n\n- \"How about Amazons? I'd love to learn some strategy from the game's inventor.\"\n\n- \"Just one game.\" insisted Jazz. \n\nJazz had reproduced her board, and had copies of her cards. Reem knew most of the girls they represented. She liked using Angie's card. Jazz used her own, of course. I took Lucy's. Liam couldn't keep them all straight.\n\n- \"Give me the one with the big bosom. Who's that one again?\" Then he yelped as Reem kicked him under the table - hard.\n\n- \"That's Vee.\" said Jazz.\n\n- \"Oww.\" complained Liam. \"What was that for? Which friend is she?\"\n\n- \"Dean's girlfriend after I left.\" said Jazz, with a sweet smile.\n\n- \"Oops.\" said Liam. \"I may need your 'elp in this game, Dean. I think Reem is out to kill me.\"\n\nI allied with him, but it made no difference. The sisters rolled over us like a tidal wave, and then fought it out for the final victory. Jazz had the hotter dice, and claimed the win.\n\n- \"It's a good game.\" said Liam. \"Fun. How many copies d'you think it'll sell?\"\n\n- \"I really don't know.\" I admitted.\n\n- \"I don't know about you, Liam,\" said Reem, \"but I'm tired. Why don't give these two some time alone?\"\n\n- \"Your wish is my command.\" he answered. \"G'night all.\"\n\nJazz took me up to her bedroom.\n\n- \"Thank you.\" she said.\n\n- \"For what?\"\n\n- \"For being so nice to my sister and her husband.\"\n\nI laughed. \"You've got it backwards. They're the ones being nice to me.\"\n\nShe kissed me then, and didn't let me go for several hours.\n\nShe insisted that my first orgasm had to be in her mouth. I responded in kind, so that we ended up stretched out across her bed in a sixty-nine. I tried to keep up, to the best of my ability. Jazz, of course, had to turn it into a competition, swearing that she could bring me off first, and daring me to keep up.\n\nI lost that contest, but it was close - as I grunted and spurted into her mouth, it triggered her orgasm. She squeezed my ass cheeks so hard, she left nail marks - which she found very amusing.\n\nI might have dozed for a while after that, but I awoke to find her caressing my balls and sucking me back to life. She unrolled a condom on my dick, and climbed back aboard. I let her go for a while, then sat up. We made love sitting down, with her on my lap, face to face.\n\nIt was a great position, close and intimate. There was no danger that I would come early that way. But it worked well for her, and she came first this time. She buried her head in my shoulder and bit my neck.\n\nThat fired me up. I flipped us over, and put her on her knees with her backside in the air. I thrust all the way in from behind, in one long lunge. Then I began to pound into her, my hips slapping her ass. It only took a dozen strokes before I stiffened and sprayed the inside of the condom with my seed.\n\nWe slept after that. I had no idea what time it was when I woke up, to find that my morning erection was poking her in the ass. She obviously felt it, too. \n\n- \"Your turn.\" she mumbled.\n\n- \"My turn?\"\n\n- \"To get a condom.\"\n\nI found one.\n\n**************************\n\nHer Dad came home in the late afternoon. My first impression was of a fairly short, balding brown man. He was considerably darker than his two daughters. Reem and Jazz must have gotten their looks from their mother.\n\nI don't know what his first impression of me was - but I don't think he was impressed. Mind you, if I had been on the road for a week, I think I would have wanted a shower and a drink. Meeting my daughter's boyfriend would have been a distant third on my list, too - so I was prepared to cut him some slack.",
        "But my father always told me to begin as I meant to carry on. I would treat Mr. M___ with respect, but not subservience. He was entitled to be grumpy - but not rude.\n\nDinner was a little awkward, because of his mood, but Reem directed the conversation to safe topics. It wasn't until the sisters served coffee after the meal that the fireworks started.\n\n- \"So you are still in school, Dean?\" said Mr. M___.\n\n- \"I'll be starting fourth year in September, Sir.\" I said.\n\n- \"What is your program? Computer games?\"\n\n- \"Math, Sir.\" I said.\n\nThat slowed him down for a minute. I was sure that Jazz had told him, at some point, but it was obviously something he had not considered important enough to remember.\n\n- \"Ah. How much is your tuition?\" he asked.\n\n- \"I'm on full scholarship, Sir. $12,000 last year, but it's going up to $16,000. Tuition at my university is a little over $7,000.\"\n\n- \"Is this financial aid that you receive?\" he continued, taking one more shot.\n\n- \"Daddy!\" protested Jazz.\n\n- \"It's alright. Your father is curious. It's an academic scholarship, Sir. If I can maintain my grade point average in my final year, I will graduate magna cum laude.\" I was keeping my voice neutral, but Mr. M___ was looking me in the eye as I said it. He could tell that this line of questioning wasn't paying dividends for him.\n\nSo he changed tack. \"This ... obsession with games - isn't this a distraction?\" At this point, Liam showed his disapproval by getting up and leaving the table. \n\n- \"It's a hobby, Sir.\" I said. \"I was not planning on selling my game. It was just something that I designed for your daughter and some of our friends.\"\n\nHe grunted, clearly unimpressed.\n\nLiam returned from the kitchen with two beers, putting one of them on the table in front of me. \"Would you like a drink, Mr. M___?\" he asked.\n\n- \"No, thank you, Liam. Maybe just a little more coffee.\" Reem got him a refill. \n\nIt felt like halftime, or intermission, as dear old Dad put cream and sugar in his coffee. But he wasn't finished with me.\n\n- \"I understand that you made some money on this game?\" he asked.\n\n- \"Daddy.\" said Jazz. \"Look.\" She handed him the cheque that I had brought her.\n\nHe didn't even flinch. \"And how much have you made on the sale?\" he asked me.\n\n- \"Nothing yet, Sir. With my father's advice, I chose to take a percentage of future sales.\"\n\n- \"How much?\" he asked, bluntly.\n\n- \"I will earn a little over two dollars for each unit sold.\" I answered.\n\n- \"And how many do you expect to sell?\" he continued.\n\n- \"The company has projected sales between 25,000 and 35,000 units. They could be wrong, of course.\"\n\nI have to give Mr. M___ some credit. When he found his way blocked, he could switch to another line of argument without a pause.\n\n- \"So you could make $70,000 - while my daughter gets ten?\"\n\n- \"Daddy!\" protested Jazz.\n\n- \"That's unfair, Father.\" said Reem. \"Why are you being this way?\"\n\n- \"It's alright.\" I said. \"Sir, if Amazons sells more than 25,000 copies, Jasmine will receive royalty cheques. If sales reach 50,000 units, she will have earned another $10,000. The Game company is also considering buying a second game from me, which Jasmine helped me design, as well as drawing the board. We would share any earnings there.\"\n\n- \"Dean, no.\" she said. \"That was your work.\"\n\n- \"Your ideas, as much as mine.\" I said. \"We collaborated. Then I made the rules, while you designed the board.\" \n\nShe gave me a beautiful smile, and covered my hand with her own.\n\n- \"Yes - that's very nice.\" said her father. \"But what happens to this business relationship in a year's time, or two years? How can you maintain this arrangement when you are living on separate continents?\"\n\n- \"Well, Sir - that's something I wanted to discuss with you.\"\n\nHe didn't respond immediately. Instead, he just stared at me with narrowed eyes. Jazz squeezed my hand - in encouragement, I hoped.\n\n- \"Go on.\" said her father.\n\nI was ready. I had been rehearsing this speech for weeks.\n\n- \"In a year's time, we both graduate. I intend to go on to graduate school. Jasmine isn't quite certain yet. She may look for a job, or she might stay in school. Either way, Sir - I would like it if we could pursue our careers in the same city. At home - or here.\"\n\nI had just dropped an atomic bomb - but he showed no reaction.\n\n- \"Liam, I will take you up on your offer. A scotch, I think - neat. If you don't mind.\" he said. After years of gaming, I have no trouble recognizing delaying tactics. Jazz's father waited to be served before coming at me again.\n\n\"Dean,\" he said, \"you seem to be a bright young man. But have you considered the pitfalls of a long-distance relationship? Absence makes the heart grow fonder, I know - but not for years. And the distance couldn't possibly be greater.\"\n\n\"You two have known each other for, what? A few months? How can you be so sure that you are ready to commit your future to such a brief impression?\"\n\n- \"Daddy.\" said Reem. \"They've known each other longer than Liam and I did before I came here. Are you questioning my relationship, too?\"\n\nMr. M___ seemed annoyed by her intervention. \"That was ... different. You were older.\"\n\n- \"One year older.\" said Reem. She crossed her arms. \"And Dean has just said that they will wait until they both graduate.\" God bless her. I already liked Reem, but that night she became one of my favorite people in the whole world.\n\n- \"I am talking with Mr. Dean here.\" said her father. \"Please let us finish. Now - where was I? Ah - yes. What makes you think that you will still feel this way a year from now?\"\n\nThere it was: the million dollar question.\n\n- \"Two reasons. First, we've already been apart for a year, and my feelings for Jasmine are stronger now than when we parted. Second, and most important: because your daughter is the most beautiful person I've ever met.\" I couldn't help looking at Jazz. There was a tear in her eye. Also, she was squeezing the shit out of my hand.\n\n- \"You exaggerate.\" said her father. \"I am well aware that my daughter is a lovely young lady, but 'most beautiful'? And you must know that beauty is only skin deep. Physical appearance will only take you so far. You should not base a relationship solely on her looks.\"\n\n- \"I wasn't talking about her looks.\"\n\nHe didn't quite know how to respond to that. I didn't give him a chance to answer.\n\n\"Jasmine is generous, and selfless. She put my happiness ahead of her own. She is confident, strong-willed, and independent. She doesn't suffer fools gladly - a trait I'm told she gets from her father. She's a talented artist, and a good teacher. She makes me laugh. Better yet, she makes me feel good, and feel good about myself. She has also given me the most beautiful gifts I've ever received.\"\n\nHe sat still, silent, absorbing what I had said. Then he spoke.\n\n- \"That's all very well, but Jasmine may not feel the same. She's still ...\"\n\nJazz lifted her hand from mine, and reached out to touch her father. Tears were flowing down her cheeks.\n\n- \"I know what I want, Daddy.\"\n\n- \"You're still too young to know what's best for you.\" he insisted.\n\n- \"Damn it!\" shouted Reem. She jumped to her feet, and stormed from the room. Even Liam looked stunned at her ferocious outburst. We heard her stomping up the stairs. A few moments later, she came stomping back down.\n\nReem charged back into the dining room. In her hand she carried Jazz's painting. She thrust it in front of her father.\n\n- \"Look! Look at this!\" she shouted. \"Why can't you understand? She loves him! She's been miserable and lonely for a year. But look at her now! Can't you see the difference?\"\n\nA less stubborn man would have caved in, but Mr. M___ was no quitter. He looked at me, and then at Liam.\n\n- \"Gentlemen? Would you excuse us?\" he asked.\n\nWe did. Jazz kissed me, smearing tears across my cheek.\n\n- \"It'll be fine.\" she whispered.\n\nLiam took me down the road, to a pub. He bought us two pints - each.\n\n- \"No worries.\" he said. \"They'll sort him out. E's a stubborn old bastard, but there's no way he can fight both of 'em.\"\n\n- \"You think so?\"\n\nHe snorted. \"I know so. Could you resist those two?\"\n\n- \"I wouldn't even try.\" I said.\n\n- \"Wise man. Mr. M___'s not all that bad, once you get to know him. 'As his moods, of course, but he's been pretty decent to me.\"\n\nI wanted to believe him. I just wasn't sure.\n\n\"Trust me.\" he said. \"Let's get your mind off o' this. No point worryin' 'bout what you can't change, anyway. You play darts?\"\n\n- \"Not very well.\"\n\n- \"Perfect. Let's play, then.\" he said.\n\nFour pints later, Liam's cell phone vibrated. He took a quick look.\n\n\"There we go. All done.\"\n\nBack at their house, there was no sign of the girls. Mr. M___ was downstairs, by himself. Liam got the message - with a nod to me, he excused himself. That left me alone with Jazz's father. Mr. M___ stood up.\n\n- \"I see that Liam has been showing you some of the local colour.\" he said.\n\n- \"He has.\"\n\nMr. M___ came straight to the point. \"Dean, I must apologize. I've acted very badly. I should have been hospitable, and welcoming. Instead, I've subjected you to unfair questions - an 'interrogation', my daughter told me.\"\n\n\"Will you accept my apology?\"\n\nHe looked 100% sincere.\n\n- \"I understand, Sir. You were just being protective of your daughter.\" I said.\n\n- \"Over-protective. And rude. I'm very sorry. I should learn to trust my daughter. Daughters. I have found very little in their judgment to criticize in the past.\" He scratched his head. \"Will you have a drink with me? And allow me to at least begin to make amends?\"\n\nI had had more than enough to drink by that point, but it would have been impolite to reject this olive branch. With a beer for me, and a scotch for him, we sat down in the living room.\n\nMr M___ asked about my parents, and about Jazz's friends. In turn I asked about his wife - Jazz's mother, who had passed away when she was 14. Maybe I was just lucky, and hit a positive chord. Or, maybe he was truly making an effort to be pleasant. Either way, we had a decent conversation. \n\nWhen our drinks were done, he nodded at the stairs.\n\n- \"She'll be waiting for you.\" he said. \"Tell her I'm sorry to have kept you so long.\"\n\nI wished him a good night, and climbed the stairs.\n\nJazz was sitting up in bed, pretending to read a book. I nodded, to let her know that it had gone well. She sighed, and then held out her arms to me.\n\n- \"I'm so proud of you.\" she murmured. \"You were wonderful.\"\n\n- \"You sealed the deal.\" I replied. \"You and Reem. I don't know what you said - or did - but it worked.\"\n\n- \"Let's discuss it later.\" she suggested. \"Right now, I have this incredible urge to make love with you.\"\n\n**************************\n\nWe have lived happily ever since.\n\nTHE END\n\n**************************\n\nThank you all for your support, and the constructive criticism. "
    ],
    "authorname": "AspernEssling",
    "tags": [
        "games",
        "board games",
        "friends",
        "college",
        "long-distance",
        "reunion",
        "australia"
    ],
    "category": "Romance",
    "url": "https://www.literotica.com/s/gamers-pt-11"
}
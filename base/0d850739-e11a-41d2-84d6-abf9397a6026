{
    "title": "Captured Ch. 05",
    "pages": [
        "I should warn this chapter is more risqu\u00e9 than the others with new demons on the scene. I mean in my typical non-con way (nothing gruesome). Hope you like this one, and thanks for voting and commenting.\n\n~I write for pleasure; I post for joy~\n\n********\n\nSirah screamed in pain. Her eyes flew open, and she strained against the demon holding her down.\n\n\"Thoran, stop!\" she cried, struggling.\n\n\"Be still, Sirah!\" He grunted, cruelly wrapping her long, blonde hair about his hand. \"I must do this!\"\n\n\"It hurts! Let me go!\"\n\nSirah frantically twisted under him, gasping for breath whilst Thoran's large hand urgently searched for her buzzing wings. Then Sirah was forced on her back to face him.\n\n\"Thoran! You're hurting me!\" she shrieked. But he ignored her, and jerked their foreheads together.\n\n\"I bind you to me, Sirah!\" he growled, his dark eyes wide with panic. \"I...\"\n\n\"No!\" Sirah snarled.\n\nWith horror, Thoran's voice died as a ring of red fluidly encompassed Sirah's pale-green irises. Before he could continue, he was thrown off her and hit the opposite wall with a force that took his breath away.\n\nBriefly shaking his head to recover, he lunged toward Sirah, and was thrown back again.\n\nWinded, Thoran groaned and opened his eyes. Sirah stood over him, staring with a look devoid of any affection or familiarity. As though they were strangers.\n\n\"Sirah, please!\" Thoran pleaded. \"I must bind you again!\"\n\n\"No,\" she said emotionlessly, still gazing at him. The red faded from her irises, but her light green eyes filled with contempt. Without another word, she turned and walked away.\n\n\"Where are you going!\" Thoran roared, angered by his physical weakness.\n\nSirah's scornful reply floated back from the cavern entrance, the sweet tone of her lovely voice in contrast to the coldness of her words. \"To find a demon worthy of me.\"\n\nThoran crawled after her. \"Sirah!\" he shouted hoarsely.\n\nSummoning the strength to stand, he staggered out, raising a hand to shield his face from the blinding sun. With her colourful wings sharply taut, Sirah stood with her back to him, boldly surveying the landscape.\n\n\"Sirah, please! Listen to to me-!\" Thoran seized her shoulder and turned her.\n\nIt wasn't Sirah. Her mother, the witch, glared accusingly, her long purple hair streaked with ruinous black.\n\n\"What have you spawned, demon?\" she sneered.\n\nThe anger on her face rapidly dissolved to terror. \"Thoran, what have you done?\" she fearfully whispered, tears poured down her cheeks.\n\nWhat have you done?\n\nWhat have you done?\n\nWhat have you done?\n\nThoran seized the witch's slender shoulders.\n\n\"WHERE IS SIRAH?\" he screamed.\n\nJerking awake, Thoran stared around frantically, his temples dripping sweat. Realising Sirah slept peacefully beside him, he breathed a deep sigh of relief. Running a shaking hand through his hair, Thoran lay back, panting. He couldn't remember the last time he'd had such a dream. Or any dream.\n\nSirah stirred, nestling closer. Carefully angling his arm between her wings, Thoran drew her against him, and the silken rainbow sheets curled about his large bicep in a featherlike embrace. Slowly, Sirah's nearness soothed his unsettled wakening.\n\n\"I don't care what she said,\" he muttered breathlessly into Sirah's soft, blonde hair. \"I can't live without you. It was just a dream.\" He kissed her forehead and took a deep, shuddering breath. \"It was just a dream.\"\n\nBut even with the blissful relief of the vision being mere fantasy, the witch's true words flashed through Thoran's mind to directly connect with the nightmare.\n\nShould death befall Sirah, do not resurrect her.\n\nThoran sighed harshly and shook off his emotions. Before he could rouse Sirah with kisses, his eyes sharpened, and he abruptly sat up.\n\nStartled from sleep as she slipped from his chest, Sirah blinked up at Thoran, who was now on his feet and looking very alarmed.\n\n\"W-What is it?\" she whispered nervously, but Thoran held up a hand, keenly listening to something Sirah could not decipher.\n\nThen he ran from the room, and Sirah turned in time to see a thick wall of devil's mist rise up behind him.\n\n**********\n\n\"He comes,\" Marun smiled, as Thoran quickly emerged.\n\n\"Brothers?\" he enquired, warily looking between Marun and Tareg. Though his voice was casual, he was clearly unnerved.\n\n\"Aye, it is us, Thoran,\" Tareg gently inclined his head. \"We have come to congratulate you. And behold our new sister.\"\n\nRealising his oversight, Thoran's face fell. Despite being estranged, they were the same blood. Of course they would know.\n\n\"She is sleeping,\" Thoran said tersely, crossing his own arms.\n\nMarun and Tareg exchanged a bored look.\n\n\"Thoran,\" Marun sighed, stepping forward in a conciliatory manner. \"Our journey was long. We have a right to see her.\"\n\nThoran looked away angrily. \"I will not return to war.\"\n\n\"The war continues without us, as you see,\" Tareg said roughly. \"We are not here to bicker about your choices. But you have taken a mate, we will meet the one whom we would protect.\"\n\n\"She does not need your protection!\" Thoran growled, though wasn't entirely sure of his words. Marun noticed.\n\n\"Our blood decrees it so. But something has already happened,\" he softly surmised. \"I have never seen you worried.\"\n\nAgitated, Thoran uneasily scratched at the nape of his neck while his brothers patiently waited.\n\n\"Very well,\" Thoran said sourly, glaring at them. \"But if either of you dare-!\"\n\n\"Do not insult us. Why should we be tempted?\" Tareg cut him off, disgusted. \"Exquisite as your choice may be, we can find our own prey.\"\n\nMarun nodded, also offended by the implication.\n\nThoran cast his eyes to the darkening sky. \"Hold to your words.\" Then he signalled them into his abode, and left in search of Sirah.\n\nTareg and Marun waited in a silence brimming with tension, both brothers very unimpressed by the change in Thoran. But something in the air quickly altered, and when Thoran returned with his mate, they immediately straightened with fresh alertness.\n\nThoran firmly took Sirah's hand. \"My mate, Sirah. Sirah, these are my blood-brothers, Tareg and Marun.\"\n\nTremulously nodding her greeting, Sirah shyly returned their inquisitive stares, lightly blushing as she felt two pairs of eyes sharply scrutinise her lovely face and slowly move down her gleaming tight dress to her pretty bare feet. Marun was particularly captivated by the rainbow glimmer of her wings.\n\nThoran's brothers lightly resembled him, far more than Scarn, who falsely claimed to be a blood-brother. With short black hair like Thoran, Tareg appeared a fearsome warrior. Though strikingly handsome, his strong features and brooding black eyes created a formidable impression.\n\nMarun was almost beautiful, with large, gentle brown eyes and shining long hair neatly draped over his shoulders. He was, like the others, supremely muscular, with only a particular glint in his eyes to warn of danger.\n\nPerhaps most confronting for Sirah, was that they were unashamedly naked. Even Scarn and his companions were mildly covered from full nudity. Thoran was always shirtless, but chose to wear pants, which Sirah was first grateful for, but now considered a great hindrance to her desires.\n\n\"Greetings, Sirah,\" the alluring brothers spoke in unison, their deep voices echoed in a way that sent a pleasurable thrill over Sirah's skin.\n\n\"We almost lost faith in you, Thoran,\" Tareg mused. He stepped forward, his hand reached to stroke Sirah's hair.\n\n\"Do not touch her.\" Thoran spoke with quiet menace.\n\nTareg's lowered his arm, his eyes alight with challenge. \"Are we not entitled?\"\n\n\"Now, now,\" Marun calmly interjected, before they could argue. \"It is the way of the world, Thoran. Do you deny that if she was in trouble, you would not summon us?\"\n\nThoran's jaw clenched. After the confrontation with Scarn, he knew it would be foolish to turn them away.\n\n\"We may not be on the terms of most blood-brothers, but that does not deem us untrustworthy,\" Tarun said curtly.\n\nMarun and Tareg took a moment to observe Sirah from a respectful distance.\n\n\"Do you feel it too, brother?\" Tareg quietly murmured to Marun.\n\nMarun briskly nodded affirmation and looked sharply at Thoran. \"What is she?\"\n\n\"One of a kind,\" Thoran answered evasively, with a warning look.\n\nTareg smirked. \"Secrecy already, Thoran? Hardly a good start with your mate.\"\n\nConfused, Sirah looked up at Thoran. \"What does he mean?\"\n\nThoran shrugged, his eyes blazed. \"Things we will discuss later, Sirah. Do not mind them.\"\n\n\"Aye, do not mind the kin of your mate,\" Tareg said tartly, his face a cross between contempt and amusement. \"Needless to say, you do not disappoint. It will be an honour to defend you, should the need arise.\"\n\n\"The need is quite inevitable,\" Marun dryly predicted, his eyes raked Sirah's tempting beauty whilst her aura scratched at his desire. \"And with a voice like music... She must be a siren?\"\n\nTareg tilted his head. \"Impossible. She has wings. And Sirens died out centuries ago.\"\n\n\"Thank heavens for that,\" Marun chuckled.\n\n\"I'm a nymph!\" Sirah declared with some exasperation.\n\nAgain, she looked to Thoran for answers, her eyes narrowed with frustration. \"Scarn asked, too. Why do demons question what I am?\"\n\n\"Aye, dear brother, enlighten us all,\" Tareg mocked.\n\n\"You encountered Scarn?\" Marun probed, very interested. \"And escaped unscathed?\"\n\n\"I returned before he trespassed further,\" Thoran snapped.\n\n\"Needing our protection so early, brother?\" Tareg chuckled, but Marun was serious.\n\n\"What happened with Scarn?\" he questioned.\n\nThoran looked grim. \"He visited whilst I was gone. He tried to bind her.\"\n\n\"He...He tried to bind her?\" Marun repeated incredulously, looking at Sirah. \"At first encounter?\"\n\nTareg and Marun exchanged a quick glance. \"Scarn is a valuable warrior, but he is trouble. If he is fixed on your mate, we must end him. It is a treacherous path, but with the three of us together, it will be an easy feat.\"\n\nThoran winced. \"Plyon and Vertar were witness.\"\n\nTareg groaned. \"Why did you leave her alone, without binding her first? Why did she not journey with you?\"\n\nThoran could feel Sirah's inquisitive gaze burning one side of his cheek. \"I had reason.\"\n\n\"Our own journey was long, and we would rest,\" Marun said, shrewdly looking between Sirah's confusion and Thoran's guilty face. \"I suggest you reconsider your secretive nature, Thoran. It could be the undoing of us all.\" He paused. \"We will remain until Scarn makes his move, which he will.\"\n\nThoran nodded his gratitude.\n\nSilence fell, and Sirah felt something cloud her energy. The three blood-brothers continued to stare at each other. Then she realised.\n\nThey were conversing, but Thoran blocked her from his mind.\n\n*******\n\nWhilst Thoran saw to his guests' comfort, Sirah angrily flounced onto the bed. When her mate finally appeared, she did not look at him.\n\n\"Come, little one,\" he sighed, hands on hips. \"Do not sulk.\"\n\n\"You're keeping things from me,\" she grumbled, plucking at the soft blanket.\n\nThoran sat beside her and he reached to stroke her wings, but they pointedly evaded his touch.\n\n\"Sirah, you don't trust me anymore?\"\n\n\"What did you tell your brothers, when you struck me from your mind?\" she scowled.\n\nThoran smiled at her choice of words. \"I would never strike you, Sirah.\" He lightly stroked her jaw, and shivered with desire. \"Ask your questions, and I will answer them.\"\n\n\"Why can demons not see I'm nymph?\"\n\n\"Because you are only part-nymph.\"\n\n\"Because my wings are so small?\" she snapped with heated insecurity, jerking her face from his caressing hand.\n\n\"No. Because you are half-witch.\"\n\nSirah started, all trace of petulance gone. \"W-What? But...But that's impossible! That would mean my father...?\"\n\n\"Aye, little one.\"\n\nAfter an unsettling pause, Sirah stubbornly shook her head. \"You lie.\"\n\n\"Do you feel that I lie, Sirah?\"\n\nAfraid to tap into his energy, she looked away. \"It can't be.\"\n\nThoran shrugged. \"It is why I could not ravish you that first time. It is why I waited to bind you. It is why you were forbidden to leave your lands for the rest of your life.\"\n\nRemembering the days, hours, years that she angrily pondered her unfair restrictions, whilst every other nymph could travel, his words rang true. \"My people could not protect me?\"\n\n\"You were protected in nymph territory. But that brings me to the next disclosure, which you may have already guessed.\"\n\nSirah had no idea, and waited for him to continue.\n\n\"You draw evil creatures toward you.\"\n\nSirah flushed. \"My father said I was uncommonly pretty.\"\n\n\"Aye,\" Thoran admitted with a grin. \"But the world is filled with lovely things. You entice with more than the eye. If you left your territory with escort, you would likely be their very demise.\"\n\n\"Oh,\" she breathed. It made her feel slightly better that she was restricted to protect her people. She would never endanger a nymph.\n\n\"Demons feel lust, like all creatures. But they do not yearn for any particular.\" Thoran looked at her meaningfully. \"I yearn for you, Sirah. As did Scarn. All of them, my blood-brothers included, feel your charms. I believe you affect demons on different scales. Unless you use your lure. I am confident you could ensnare any demon if you applied it with purpose.\"\n\nSirah frowned. \"A lure? How could I have a lure? I don't-\"\n\n\"Oh, believe me, you have a lure,\" Thoran wryly interrupted, remembering how her forceful energy almost immobilised him when he took her virginity. \"I will guide you to use it better.\"\n\n\"Is my mother truly dead?\" Sirah asked suddenly.\n\n\"No.\" Thoran sighed heavily. \"But when or if she is ready to see you, trust me, she will.\"\n\n\"Have you met her?\" Sirah watched him suspiciously, an angry flush filled her cheeks at his telling silence.\n\nIn a rage, she raised to her knees to confront him. Before she could shout, the invisible collar manifested, and she fell back. Thoran looked foreboding.\n\n\"I will see to your needs as best I can. But do not forget that I am your master, by the binding and your own words. Do not mistake me for a weak sap who you can bully to your will, Sirah, because you will discover a side of me that we both regret.\"\n\nSirah sullenly curled her knees to her chest, and Thoran peered at her stormy face. \"Shall I leave you alone tonight?\"\n\nSirah wanted to send him away, for the sake of their argument. But she did not want him to leave, for the sake of her own satisfaction. A night without Thoran's kisses and caresses seemed too cold and long to endure over upsetting aspects that weren't of his making.\n\n\"Well?\" he asked, arching an eyebrow. \"Answer me.\"\n\n\"No, Master,\" she pouted, her pulse already racing with anticipation. \"I want you to stay.\"\n\nThoran's stern expression melted to warm desire. \"I have a question for you.\"\n\nSirah begrudgingly wriggled closer to him.\n\n\"The blade you formed, when you tried to kill yourself. How did you do it?\"\n\nSirah's brow furrowed. \"I was making trick-webs. I've formed such shapes before but...I suppose I was very upset at the time.\"\n\n\"That you were,\" Thoran smiled, kissing her cheek. Immediately her full mouth turned eagerly toward him, but Thoran held himself just out of reach.\n\n\"Do you know what I will teach you first, little one?\" he spoke huskily against her lips. Sirah breathlessly shook her head.\n\n\"The size of your wings matters little, with the power inside you,\" he murmured. \"I will teach you to glide like a nymph should. Possibly better.\"\n\nThen he hungrily kissed her, his hands quickly worked to remove her dress. Giddy with excitement from his touch and his promise, Sirah urgently cooperated. Now completely naked, she kissed him feverishly as her small hands fumbled with the front of his pants.\n\nAdmiring her nudity, Thoran lay back and watched her release him. Every time, she marvelled at his size, and Thoran loved the way she stared wonderingly at his cock in her small hands, before giving herself to him.\n\nHis dark eyes glowed with unspoken lust as Sirah excitedly played with him, casting mischievous glances his direction, a light flush of demure indulgence reddening her elegant cheekbones.\n\nGrowing impatient, Thoran reached for her, his hands cupped and kneaded the soft curves of her breasts, before settling on her hips. Sirah squeaked with surprise, losing grip on his member as she was abruptly lifted.\n\nSirah gripped the stones on the wall for support, her knees resting on Thoran's wide shoulders. With a lusty chuckle, he jerked her forward, and she collapsed, the apex of her thighs connecting with his face. Then his large hands each encompassed a taut buttock, and indulgently squeezed.\n\n\"Oh!\" Sirah's eyes widened and her wings buzzed approval as Thoran's mouth hotly opened against her core, his tongue teased, tickled, swirled about her wet nectar, and lithely entered her. Gasping, she bucked against his face.\n\n\"Yes!\" she moaned, arching against the wall. \"Yes, Master, yes!\"\n\n*******\n\nOn the other side of that very wall, Thoran's handsome blood-brothers lay on their backs staring broodingly at the ceiling.\n\n\"Do they know we can hear?\" Tareg complained, determinedly not touching his straining cock.\n\n\"Unlikely, but much they'd care. If Sirah was my mate, I would not,\" Marun replied.\n\n\"How is it that she tempts us?\" Tareg said testily. \"We're the predators. We do not yearn.\"\n\n\"We yearn now, brother,\" Marun moodily answered.\n\n\"He would never share her with us?\" Tarag pondered, with a desperate edge to his voice.\n\n\"Not this decade!\" Marun said harshly, feeling his own desire simmering at the erotic image of all three of them taking Sirah at once. If only Thoran embraced demon culture.\n\nMarun's wistful musings were interrupted when Tareg angrily leapt to his feet, his usually tidy short hair stood on end with frustration.\n\n\"Have you lost your senses?\" Marun snapped, braced to tackle his blood-brother.\n\n\"No!\" Tarun savagely answered. \"But if I do not find a way to allay this,\" he furiously pointed between his legs, \"then I certainly will!\"\n\nSighing with relief, Marun dropped back to his sleep-space. For a few more seconds he tolerated Sirah's delighted squeals, her sweet voice breathlessly pleading for more. Accepting his limits, Marun's jaw fiercely clenched.\n\n\"Curse you, Thoran!\" he snarled, roughly securing his gleaming brown hair at the nape of his neck. Jumping to his feet, he left the cavern to follow Tareg.\n\nIt didn't take long for Marun to find him some miles away, in a lone, grassy field. Tareg frowned, his arms extended to the wilderness fringed by thick forest.\n\n\"We shall not have to share, brother,\" Tareg spoke without averting his gaze. \"There are two tonight.\"\n\n\"Fruitful lands,\" Marun remarked, standing by Tareg's side. \"No wonder Thoran settled here.\"\n\n\"Now he has no need to hunt fruit,\" Tareg replied sardonically, but held up his hand to stop Marun's reply. \"One is mortal. The other...I do not know.\"\n\nThe mortal woman quickly stumbled into view, and made a running beeline for Tareg. With coarse black hair and a kindly face, she was dressed for fruit-picking, in a plain grey frock stained with juice.\n\n\"I am so sorry,\" she gasped, clutching a stitch in her side. Unfazed by the brothers' lack of clothes, her black eyes raked their chiselled, muscular forms. \"Oh...um...I don't know why...?\"\n\n\"Rest easy. We know,\" Marun smiled reassuringly, and the woman's fear was somewhat alleviated by his more gentle features. With a restless sigh, she sank to the ground and waited.\n\nScowling, Tareg held up his hand for silence. \"I need your help with this one, brother,\" he murmured.\n\nVery intrigued, Marun extended his arms alongside Tareg. A moment later, a figure staggered from the safety of the trees, loudly cursing. She was tall and slender, with very long red hair braided tightly down her back. She clutched a bow in one hand, and seemed unable to grasp an arrow from the quiver across her back.",
        "Marun's curiosity quickly morphed to excited wonder. \"A she-elf!\"\n\n\"How does she resist?\" Tareg frowned, angling his head at the flustered elf, who still managed to keep a safe distance.\n\nMarun pointed. \"About her neck.\"\n\nTareg followed Marun's gaze to the glitter of silver about the elf's throat. Protection against malevolent magic. Though immortal beings were naturally more resilient against dark magic, they were not immune. A female elf was certainly no match for two demons.\n\nNot understanding anything, the mortal woman stared dumbly at them, still marvelling at the wondrous heat pulsing through her.\n\nFinally, the elf sighted the very tall, naked demons and straightened with a gasp. Though it was night, the demons could see her cheeks flood with embarrassed colour at their stark nudity. Then she looked to their faces.\n\nTaken aback by their alluring physiques, the elf stared pensively at Marun, his more wholesome appearance gave her pause. But then he smiled, and she immediately fled.\n\n\"The lure again? Or do you feel like a chase, brother?\" Marun grinned, but Tareg was already in pursuit.\n\nAelena blindly ran for her life. She should have known nothing good would draw her to the open, and cursed her inability to resist the compelling desire. But ultimately her limbs betrayed her.\n\nComing so close to two malevolent beings was very unsettling. They were startlingly beautiful, and it caught her off guard. She had never seen a demon before, and despite being well-informed of their visual appeal and dangerous lures, she was wholly unprepared for the confronting experience. At first she disbelieved malevolence could exist in such breathtaking forms, but when the more kindly one smiled, his intent was pure evil.\n\nThe demons crashed through the still undergrowth, practically at Aelena's heels. The charm at her throat throbbed warningly, its protection yielding to malevolent power as the demons closed in.\n\n\"Oh!\" she gasped, skidding to a halt when Tareg suddenly stepped out in front of her, blocking the path. Too late, she reached for an arrow, only to be hoisted into the air from behind.\n\n\"An easy quarry,\" Marun noted with mild disappointment. Tareg stepped forward and pinched Aelena's chin.\n\n\"But a worthy find,\" he breathed, quickly forcing his mouth over Aelena's while Marun held her immobile.\n\nHeated lust flooded Aelena's body, but still she scratched at the strong arms about her midsection and kicked angrily. Only when Tareg released her chin could she break the kiss, and he took his sweet time. Taking a deep breath, Aelena's scream was smothered under Marun's wide palm.\n\n\"Take her to the mortal woman,\" Tareg grinned. \"And I think after, we will keep this one.\"\n\n\"Hold a captive?\" Marun frowned, easily subduing the squirming elf. \"Why?\"\n\n\"Because if we are to stay with Thoran for any duration we will need reprieve from Sirah's aura at the ready. And because I've not had an elf, and I believe I will like it.\"\n\n\"Aye,\" Marun conceded, the edge of his mouth curved in a provocative smile. \"Thoran will not be happy.\"\n\n\"Unless he is willing to share Sirah, then he must be,\" Tareg retorted.\n\nWhen they reached the field, the mortal woman eagerly scrambled to her feet. The brothers paused, considering her.\n\n\"Do we need two?\" Tareg mused, stroking Aelena's smooth cheek before she could dodge his hand.\n\n\"I am more pleased with this one,\" Marun shrugged, releasing Aelena's mouth.\n\n\"Then we shall share, after all,\" Tareg said lightly, and raised his palm to the mortal woman.\n\nThe woman shrieked and collapsed on the grass, writhing in agony.\n\n\"Cowards! You can only find innocents?\" Aelena spat, viciously fighting to escape Marun's arms. The blood-brothers chuckled.\n\n\"I do not think you are so innocent, she-elf,\" Tareg said with a certain gleam in his eye. \"We know you are not virgin.\"\n\nAelena flushed. \"Release me!\"\n\n\"Eventually,\" Marun smiled. \"Perhaps.\"\n\nWith one arm firmly about her waist, his other brazenly moved across her chest, deftly unbuttoning the front of her black tunic. Aelena's round breasts were quickly freed from chaste confinement, her silky firm flesh settling into Marun's searching hand.\n\nBy now, the mortal woman had come to her senses and fled to the forest.\n\nAelena gasped when the charm was ripped from her neck. Tareg closely inspected it. \"Not bad,\" he smirked. \"You need darker magic to evade our lures.\" Tossing the broken charm aside, he stepped close and Aelena seized up with fear in Marun's arms.\n\n\"Don't!\" she fearfully whispered. \"Stay away! Stop!\"\n\n\"Do not fear, elf,\" Tareg smirked as Marun's hand quickly left her breasts to catch her wrists before she could claw Tareg's face. \"You will soon beg us not to stop.\"\n\nApprehensively shaking her head, Aelena blinked rapidly, barely managing to stifle a moan when her limbs warmed with desire. \"Wait! Please!\" she begged, squirming.\n\n\"Relax,\" Tareg drawled, and began to undress her.\n\nThe demon deftly shifted, eased, and tore at her attire. Soon Aelena stared down, horrified, as the last of her clothing fell away. Only black laced boots graced her body, and Aelena felt the foreign sensation of heated skin-on-skin as Marun's hold on her tightened, his muscled chest flush against her bare torso.\n\n\"Better?\" Tareg asked lightly, though his eyes burned with the thrill of their conquest.\n\n\"Yes... No!\" Aelena vigorously shook her head, and Tareg narrowed his eyes knowingly.\n\n\"Let her hair out?\" Marun suggested.\n\nTareg slowly removed the tie end, and unravelled Aelena's shining red locks. From afar it would appear strangely beautiful; the elegant elfish girl in nothing but boots, caught between two male athletes. Naked, their flawless skin gleaming in moonlight, pale innocence against smooth tan. An immortal trio, of a contrary, warring species engaging in a shamelessly open intimacy.\n\nAelena lifted her legs to kick, and Tareg caught one ankle and pulled it wide, stepping between her thighs.\n\n\"That's better,\" he breathed, running his hand through her hair to form a fist. Pleasure flowed from his fingertips, and Aelena's eyes rolled back in a dizzy moment before she regained consciousness.\n\n\"S-stop!\" she weakly insisted, but her voice was no longer indignant, her wide eyes fixed longingly on Tareg's smiling mouth.\n\n\"Hush,\" Tareg cooed, gently caressing Aelena's delicious breasts, his hard cock ready and beginning to probe her entrance.\n\n\"Oh! Don't!\" she implored, feeling her sex spread wide as the demon violated her. \"Please! I have treasure! If you let me go-!\"\n\n\"Do we care for trinkets?\" Tareg said thickly, his sizable length sliding further inside the wriggling elf.\n\n\"Hardly,\" Marun chuckled from behind Aelena.\n\n\"Virgin or not, she's so tight, brother,\" Tareg groaned. With such a rare conquest, he could explode any moment.\n\nAelena abandoned pointless begging, her head fell back against Marun's shoulder as her breathing took over, she felt her body rise and fall against Marun's smooth chest with Tareg's thrusts.\n\nAelena closed her eyes. The demon inside her continued to caress her breasts, her light-pink nipples stiffly sensitive to his pinching fingers. Aelena's mouth dropped open from the sensations, until Tareg seized her hair and his demanding mouth found hers.\n\nWhilst Tareg kissed her, Marun's charming voice spoke close by her pointed ear. \"Do you enjoy my brother, elf?\"\n\n\"Y-Yes,\" she uttered against Tareg's lips. \"Don't stop...\"\n\n\"Good.\" Marun released her wrists, his free hand joined Tareg's, touching her breasts.\n\nSomething amazing was budding inside Aelena, like small sparks building to an incredible climax. The way the short-haired demon used her body was so wonderfully foreign. Dimly she knew she was bewitched by their lures, but did not care in the moment.\n\n\"Oh,\" she moaned, wrapping both arms around Tareg's neck to kiss him fervently.\n\nForgetting herself, her tongue boldly slid into the demon's mouth, and his own devilish tongue moved enticingly about hers. Aelena's heart raced, her slender thighs flexed around Tareg's waist. \"Oh...!\"\n\nThen Tareg's cock suddenly squeezed from her, the slick withdrawal quite audible in the still night, aside from their heavy breathing.\n\n\"Oh, why?\" Aelena dizzily protested, and the brothers gruffly chuckled. With an inkling of dread, she remembered what they were.\n\n\"Beg for my brother's cock, elf,\" Tareg ordered, staring into her wide blue eyes, his own ablaze with lust.\n\nThe demons collectively reduced application of their lures, wanting to see some of Aelena's rare fighting spirit and enjoy her subsequent submission.\n\n\"I...what...?\" Aelena's vision sharpened, her sex still wet and needy.\n\nBut she was also fully naked but for her shoes, in the embrace of two demons. Mortified, Aelena abruptly let her legs fall from around Tareg's waist and pressed both hands to his chest to push him away. But Tareg didn't budge, his hands remained on her breasts, and Marun still held her exposed between them.\n\nFurious outrage twisted Aelena's pretty face. \"How dare you! I'll kill you! You cursed, filthy-!\"\n\nPleasure struck her, and Aelena arched in Marun's arms. Shifting restlessly she realised her body actively searched for demon cock. How could she ever tell her people of this?\n\n\"We're waiting,\" Tareg mocked, his hands on her breasts squeezed.\n\nThough overcome with hapless desire, Aelena took the brothers by surprise and sharply clawed Tareg's cheek. Tareg merely grinned in reply, and seized her wrists.\n\n\"We're waiting,\" he repeated, more gleefully than the first time. \"We will keep you here, torture you, until dawn.\"\n\n\"No, please!\" Aelena pleaded, shaking. She jerked with surprise when Marun's hefty cock teased her soft folds.\n\n\"Do you want this?\" Marun murmured against her neck, his lips curled against her skin in a wicked smile.\n\n\"Yes!\" Aelena gasped, fighting to inch down, but the member evaded her.\n\n\"Well, we are waiting,\" Tareg said sweetly. Releasing her wrists, his fingertips stroked over her breasts, and down her smooth stomach. Spreading her legs wide, he bent to peer between them.\n\n\"BY THE GODS!\" Aelena incredulously shouted her defeat, struggling to free herself as Tareg's tongue teased her aching nub and squeezed inside her. The terrible act should have revolted her, but instead brought her arousal to immense heights.\n\n\"No!\" Aelena shrieked, horrified to take pleasure in such an obscenity. \"Stop! I don't like it!\" she lied.\n\nSalaciously licking his lips, Tareg straightened to look her in the eye. \"We're waiting, tasty elf.\"\n\nAelena flinched when he called her 'tasty'. \"I...Please, take me...\"\n\n\"No, no,\" Tareg chided, stroking matted red hair from her sweaty brow. \"Beg better.\"\n\nAelena thought of how the night began with a simple search for an herb, to where she was now, and inwardly damned her foolish impatience for not waiting till daybreak.\n\n\"Please, Masters, take me,\" she whispered, her face red with humiliation.\n\nUnmoved, Tareg raised an unimpressed eyebrow, and Aelena grit her teeth.\n\n\"Please, I want your brother's cock!\"\n\n\"My brother's demon cock, elf. Is that what you want?\"\n\nAelena resentfully nodded.\n\n\"Your males are so fierce in battle,\" Tareg purred, gently tracing her jaw with one finger. \"Why do she-elves not join the fray? You take down ogres quickly enough,\" he pondered with false confusion. \"Tell us, why can't a she-elf defeat a demon?\"\n\nAelena met Tareg's cruel gaze, her own eyes flashed lustful hate. \"Because we...damn you!\" she snarled, thrashing in Marun's arms.\n\n\"Did you hear, brother?\" Tareg chuckled.\n\n\"Enough banter!\" Marun impatiently growled against Aelena's neck, angling her body to position over his aching member.\n\nTareg watched Aelena's eyes widen with eager surprise and her full mouth wantonly fall ajar as Marun took his turn. Then her eyes drifted closed, her legs again wrapped about Tareg's waist like they belonged as Marun eased into her.\n\nIt was not often they snared a pretty creature who would fight them, and it awoke a primal urge within Tareg. The elf's seduction was one of the most thrilling encounters he had experienced, and he hungrily licked Aelena's cheek, before pressing close to line himself up and gently nudge alongside Marun's girth slickly moving in and out of her.\n\n\"No! Oh! NO! Please!\" Aelena cried out with terror, gripping Tareg's shoulders desperately. \"Please, no!\"\n\n\"If we are to keep this one, you'd best not,\" Marun warned breathlessly.\n\n\"Fine,\" Tareg relented, and stepped away. \"Lower her.\"\n\nStill impaled on Marun's cock, Aelena watched the ground slowly rise to meet her, until she supported herself on hands and knees. Though savouring Marun's thrusts, her eyes were bitter from the disgraceful act to come.\n\nTareg fell to his knees before her, tugged her head up by her hair and kissed her deeply with Marun delightedly taking her from behind. Pausing to admire the elf's creamy, flawless skin shimmering with perspiration, Marun reached back to release his own hair to tumble across his shoulders.\n\n\"Your mouth is lovely,\" Tareg grinned wickedly, pressing a last soft, offending kiss to Aelena's parted lips. His hand tauntingly fondled her bouncing breasts. \"Do not disappoint me.\"\n\nFearing he would try to doubly impale her again, Aelena opened her mouth wide to accept the enormous cock pointed to her face. For a while it evaded her lips and merely rubbed her cheeks playfully, then Tareg's hands threaded through the soft hair at her scalp to guide her, his outer fingers insultingly stroked her pointed ears peeking through her tresses. Marun had already seized the ends of her long red hair, lightly pulling to keep her upright and facing Tareg.\n\n'At least they are stupidly handsome' Aelena thought, in a self-comfort attempt. But the indignity was too great for an elf with her pride. On hands and knees, with a dastardly demon at either end of her, Aelena acknowledged her wretched circumstances.\n\n\"I can never go home,\" Aelena bleakly whimpered, her voice heavy with shame, and the brothers exchanged an evil smile.\n\nThen Aelena gave in to the inevitable and dutifully accepted Tareg into her mouth, tasting her glistening juices from before. He groaned his approval, his fingers tangled through her hair massaged her scalp encouragingly.\n\nBreathing through her nose, Aelena couldn't take more than a quarter of his length, and pleased by her efforts, Tareg seemed to accept this. Saliva coated Aelena's lips and seeped from the corners of her mouth down her chin, Marun's thrusts quickened behind her, forcing her onto Tareg's cock each time.\n\nTareg tilted her face upward so he could lock eyes with the newly submissive elf, her mouth stretched perfectly wide around his girth. With Marun holding her long hair from behind, grunting toward his release, it was a wonderful sight.\n\nThe fact they toyed with an immortal was better than they could have hoped. Immortals had supreme endurance in sensual tussles compared with species that naturally expire. What sealed the fate of their prey as a fine acquisition was the elf's unique beauty, her shining hair a rare colour for their part of the world.\n\n\"I don't think we'll ever let you go,\" Tareg muttered, smiling distractedly as Aelena's eyes widened with horror. But she continued to suck him like a sensual goddess, and Tareg knew her body was riddled with crippling pleasure.\n\n\"I am ready!\" Marun moaned behind Aelena. Normally he'd draw out the experience, but he was impatient to rest from their journey. Already he envisioned sleeping soundly, comfortably entwined with the soft, naked elf, and waking to taste her through the night at his leisure.\n\nTareg nodded, still holding Aelena's miserable gaze. \"So is she.\"\n\nIncensed that a hateful demon brashly announced her feelings, Aelena angrily snapped her eyes shut, willing her body to fight the powerful urge to release. She summoned the last scrap of dignity left to defy the demons and not join them in climax.\n\n\"She's withholding!\" Marun accused, watching Aelena's body tense with the effort.\n\n\"Eyes open, elf!\" Tareg barked, his grip on her head tightened warningly as she reluctantly obeyed. \"You belong to us, now. We will enjoy this together.\"\n\nAelena groaned around Tareg's cock when both brothers sharply applied their lures. Her endurance was nothing to Sirah's, and immediately her body seized up with blinding ecstasy. Eagerly sucking Tareg, she arched, pushing back against Marun's invading girth. She felt her insides flood with hot demon seed, but hardly noticed in the blissful moment.\n\n\"And she yields!\" Marun hoarsely marvelled as Aelena's snug channel clenched around him with rapture. \"Good, little elf!\"\n\nDespite moaning with elation, Aelena longed to fill both demons with arrows and set them alight.\n\nTareg's panting increased tempo, until his cock stiffened in her mouth, and warm liquid spurted across her tongue. Surprisingly, the taste reminded her much of a celebratory drink elves indulged in perhaps twice a year.\n\nThen the bizarre illusions faded, and Aelena woke to the fact she was on hands and knees, in a scandalous act between two demons. The one behind casually removed himself, and she felt the result of his spent relief drip down her thighs. Tareg's eyes were closed, but he slowly released her hair, and Aelena hastily sat back to wipe remnants of his pleasure from her chin and breasts.\n\n\"We must tarnish her clothes beyond hope,\" Marun said thoughtfully, watching Tareg interestedly pluck Aelena's well-made black tunic from the grass. \"I do not want to fend off a rescue.\"\n\n\"Aye, they are a persistent race,\" Tareg dryly added, then his eyes glowed mischievously. \"Can you imagine Thoran's face, waking to find an Elven army outside his home?\"\n\nThe demons roared with laughter.\n\nStill gasping for breath, Aelena would have shed angry tears, but she suddenly felt their attention shift back to her. Even in her state of stupor, where waves of lust still tickled her senses, she keenly understood their passing commentary. Their intent to keep her as a slave.\n\nNot caring about her nudity, Aelena leapt to her feet and sprinted for the forest. Though deliriously glad for her shoes, her legs felt like weak twigs. Nonetheless, she fled at an impressive speed from pure adrenaline. Though the demons abused her appallingly, it was certainly not the worst they could do.\n\nPeering after Aelena, Tareg stood tall and calmly stretched his muscled arms over his head. Very satisfied, Marun sat back, also staring after the thoroughly ravished she-elf.\n\n\"So spirited after our tryst!\" Tareg grinned, flexing his biceps. \"I will enjoy this chase more than the first.\"\n\nMarun chuckled and waved him on. \"Fetch her, but do not take her again. We must return before Thoran notices our absence and fears something amiss.\"\n\nTareg arrogantly began to walk Aelena's direction, before Marun rebuked him.\n\n\"Hasten, brother,\" Marun demanded, bothered by an unlikely possibility she might evade them. \"I like this she-elf.\"\n\n\"As do I,\" Tareg smiled, and in the blink of an eye, vanished.\n\n*******\n\n\"Thoran?\" Sirah sleepily rubbed her eyes, feeling a notable absence at her side.\n\n\"Hush,\" Thoran sharply whispered, already on his feet and listening to the new sounds in his abode. \"Wait here.\"\n\n\"But-\"\n\n\"Wait here!\" Thoran growled, and was gone from the room.\n\nNow wide awake, Sirah heard strange noises and eventually discerned cheerful male laughter, drowning out a shouting female. Forgetting Thoran's order, she scrambled from the bed to find her discarded dress.\n\nMarun and Tareg turned, their faces still jovial to meet Thoran's thundering frown.\n\n\"What is this?\" he snapped, gesturing to the struggling, naked girl draped over Tareg's shoulder.",
        "\"Why, this is our new pet,\" Marun said innocently.\n\nThoran stared. \"Is that an elf?\"\n\n\"A she-elf, brother,\" Tareg cheekily corrected. \"She poses no danger to us.\"\n\n\"Aye, she is most receptive to our lures,\" Marun grinned. He had the girl's wrists trapped in one hand, his other covered her mouth. \"We did not mean to wake you, I thought she tired of screaming.\"\n\n\"Let her go,\" Thoran said flatly, arms crossed.\n\n\"Do you reign over our desires, brother?\" Tareg asked coldly.\n\nIndulgently squeezing Aelena's wriggling bare buttock, he tilted his head at Thoran's severity. \"It was the sounds of your mating that turned us to the night. If you are to keep Sirah to yourself, we must procure our own means for release.\"\n\nTareg gestured to the squirming, lithe body draped across him. \"After our deeds with this elf, she will likely return with a male troop less susceptible to our charms.\"\n\nThoran hesitated. Elves were a dignified race, and the males were particularly vengeful if their women were misused. \"You will not hurt her?\"\n\n\"Only her pride,\" Marun chuckled, staring into the elf's blazing eyes. \"You know our tastes, Thoran. And you also know we'll not find a better prize to entertain us. Mortal women are too docile to keep our attention,\" he finished with distaste. The elf finally managed to jerk her face free.\n\n\"Let me go!\" she gasped to Thoran, still desperately pulling against Marun's grip on her wrists and trying to evade his hand petting her tousled red hair. \"Please, I will tell no one! I will never return! Let me go!\"\n\n\"I suppose we have certainly had our fill of her,\" Marun joked with exaggerated thoughtfulness. \"If she promised never to tell...\"\n\n\"Please! Yes! Please! I will never tell!\" the elf desperately begged, wincing every time Tareg pinched her bare behind. \"I promise!\"\n\nEarnestly looking into Marun's soulful brown eyes, Aelena stopped struggling and even allowed the demon to brush his lips across hers.\n\n\"She sounds very convincing, brother,\" Tareg remarked with false enthusiasm, as Marun's hand again smothered Aelena's fresh protests. \"Perhaps we should release the elf?\"\n\nPerfectly aware they toyed with their prey, Thoran's jaw set. \"Ensure she has clothes, when you are not using her.\"\n\nWith a last glare of disapproval at his brothers, he turned to confront Sirah's shocked countenance.\n\n\"I told you to stay away.\" Thoran's voice was cold.\n\nSirah rebelliously peeked around his intimidating height, and gasped. \"Is that...an elf?\"\n\nSirah stared at the unusual female addition to the male-dominated abode, and Aelena returned Sirah's fascination, her blue eyes enlarged with astonishment.\n\nThoran's dark frown lightened to amusement. \"You've not seen one?\"\n\n\"Oh, they visit us, but rarely. When their prince invited me to their lands, father was angry. He forbade me to speak with them alone,\" Sirah said distantly, then blinked away her surprise. \"Have you told them to set her free?\"\n\n\"I tried.\" Thoran could not resist tweaking an unruly lock of light-blonde hair. \"Come to bed, Sirah.\"\n\n\"Where are her clothes?\"\n\nThe brothers grinned at Sirah's na\u00efve bewilderment. \"She has no need for them,\" Marun flippantly answered.\n\n\"But-\"\n\n\"They give their word they will not harm her.\" Eyebrow warningly raised, Thoran turned to give his brothers a hard stare.\n\n\"Of course, Thoran, we will not harm her,\" Tareg echoed. Though the two brothers shook their heads innocently, their eyes glinted pure mischief.\n\n\"Ouch,\" Marun grinned. \"She bites.\"\n\n\"And claws,\" Tareg chuckled, sharply smacking the elf's behind so she yelled into Marun's hand.\n\n\"Thoran, they lie!\" Sirah exclaimed, her voice thrummed with censure.\n\n\"Bed, Sirah. Now.\" Thoran's tone did not brook argument.\n\nSirah was overcome by a very strong desire to poke her tongue out at Thoran's brothers smugly enjoying her chastisement. Directing a stormy gaze at Thoran, she stubbornly remained.\n\n\"Shall we discuss alternatives, Thoran?\" Marun offered.\n\n\"Keep your elf, and sleep well, brothers!\" Thoran snarled, still with his back to them. Then he seized Sirah and carried the indignant nymph back to their room.\n\n\"But Thoran!\" Sirah gasped, outraged. \"The elf was naked!\"\n\n\"By necessity,\" he said wryly, dropping her to the soft bed.\n\n\"What did Marun mean by alternatives?\" Sirah pried.\n\n\"Do you really wish to know?\"\n\nSirah hesitated, remembering the first time he asked the same question with an answer she feared. \"Is...Is it about me?\" she asked in a small voice.\n\nThoran slowly nodded. \"If they are to stay, then they need a ready source to abate their lust.\"\n\n\"Demons have no trouble finding victims! They do not take prisoners!\" Sirah hotly argued, feeling awful to be the reason behind the elf's imprisonment.\n\n\"Being close to you is different. They cannot very well leave the cavern every moment your aura strikes them. Unless you are willing to bed us all, you will not interfere.\"\n\n\"Bed you all? You mean... if they were sated? I-If I accepted all three of you, the elf would go free?\" Sirah faltered, with a nervous gulp.\n\n\"Aye, she would. But do not trouble yourself considering. I forbid it. I will not share you, Sirah,\" Thoran answered with a note of finality.\n\n\"Is that not the demon way?\" Sirah pouted.\n\n\"If you do not notice, I am not like other demons!\" Thoran snapped sarcastically.\n\n\"It should be my decision,\" Sirah grumbled, so irked by Thoran's domineering manner that she paid little attention to the meaning of her words.\n\nThoran's eyebrows shot upward. \"Do you desire my brothers?\"\n\n\"No!\" Sirah hastily answered.\n\nThoran was certainly enough for her, and she was blissfully happy with him. But if an innocent was being cruelly retained on her account...\n\n\"They truly won't harm the elf?\" she persisted.\n\nThoran smiled. \"They are not blood-lusters, like Plyon and Vertar. My brothers favour sensual torture, but torture it is. The elf will suffer the insult of relentless pleasure, no more.\"\n\n\"This is a terrible thing, Thoran,\" Sirah muttered, curling up with her back to him. \"Elves are noble creatures.\"\n\n\"As are nymphs,\" Thoran replied. \"And you are happy here.\"\n\n\"I accepted you. But your brothers...I am uneasy, Thoran.\"\n\n\"It is our way,\" he said heavily, lying beside her.\n\nFrom the corner of his eye he saw her wings twitching anxiously, and turned to his side to indulgently trace their silken sleek edges. \"They will not harm her, Sirah. I promise you.\"\n\n\"But this is your home!\" Sirah reasoned, and Thoran knew she was pouting.\n\nDespite her unhappy mood, Sirah edged back to give better access to her wings. The sensation was a unique enjoyment she had come to adore in their quieter moments together.\n\n\"Sirah, it was the very sounds of your pleasure that forced their search,\" Thoran bluntly revealed, grinning as a small, mortified squeal emitted from under her palms. \"Be consoled they will not harm her, the way other demons would.\"\n\n*******\n\nThe following morning Tareg and Marun relaxed outside the cavern entrance, and met Thoran's glowering appearance with beaming smiles.\n\n\"I trust you slept as well as we did, brother?\" Tareg grinned.\n\nThoran exhaled impatiently, knowing the cause of his brothers' good spirits. \"Sirah is not pleased.\"\n\nMarun shrugged. \"It is her choice. If she wishes to change the arrangement...?\"\n\n\"It is my choice, and I will not have it!\" Thoran growled.\n\n\"You could guide her compliance, now you are bound. You know she would enjoy it,\" Tareg pointed out, grinning as Thoran's hands clenched into fists.\n\n\"Do not goad him,\" Marun lightly punched Tareg's shoulder, then looked at Thoran. \"Do we hunt?\"\n\n\"Aye, but we hunt for ourselves. Sirah eats fruit.\"\n\n\"Why, we were only hunting fruit last night, were we not, Marun?\" Tareg said slyly, but Marun frowned.\n\n\"Cease, Tareg,\" he warned, sensing Thoran's simmering temper. \"Thoran, what do elves eat?\"\n\n\"How would I know?\" Thoran retorted. \"You battle them.\"\n\n\"Aye, but we don't take prisoners.\"\n\n\"I imagine their diet is similar to mortals,\" Thoran shrugged. \"The food itself is not your challenge. Elves are stubbornly righteous. Convincing her to eat...\"\n\n\"She must eat,\" Tareg grimaced. \"I'll not see that delicious flesh reduce to a bony twig!\"\n\n\"And she needs nourishment to fight us,\" Marun chuckled. \"There's no sport tussling with a weakling.\"\n\n\"You've not had an elf, Thoran?\" Tareg asked. \"We'll gladly share ours with you,\" he sneakily added.\n\nThoran grit his teeth at their callous musings. It was true he'd not been lucky enough to snare an elf, and he might have relished in it before Sirah. But no encounter however fortunate could exceed the joy found in his mate.\n\nThoran glared. \"Sirah is enough for me. And remember, you may keep your elf so long as-!\"\n\n\"Aye, softling, she will not be harmed!\" Tareg rolled his eyes. \"Marun is enamoured with her. Tis fortunate she's dead to her people.\"\n\n\"Once spent, I took my rest,\" Marun snorted, also rolling his eyes. \"I was not kissing her 'til daybreak!\"\n\n\"One day she will admit to liking it,\" Tareg grinned ruefully.\n\nHugely puzzled, Thoran dismissed the unusual exchange. \"What is the elf's name?\"\n\n\"We still wager who will coax it from her,\" Marun answered, his light-brown eyes brightened by the challenge.\n\n\"Aye, we could not extract it without harming the girl. I believe she fears we'll bind her,\" Tareg laughed.\n\nEyeing them reproachfully, Thoran knew there was little point debating their unfortunate prisoner.\n\n\"Marun, come with me,\" he said, raising a hand when Tareg made to rise. \"Remain as guard. We won't go far, signal if there is trouble.\"\n\n\"Why not Marun and I go?\" Tareg queried, and Thoran looked cynical.\n\n\"I hunt for...\" Thoran's eye twitched. \"I provide for my mate.\"\n\nMarun chortled, and Tareg threw back his head with a laugh.\n\n\"Aye, trust us not, to pluck hearty plums!\" Tareg solemnly shook his head, but the jest proved too much, and he succumbed to mirth.\n\n\"I hope you are invigorated, brother,\" Marun's chuckle increased to match Tareg's ample laughter. \"We passed a fearsome apple tree last night. Coaxing fruit from it will be no easy feat!\"\n\nThoran snarled at the sniggering pair and stalked off, with Marun eventually following at a wary distance.\n\n******\n\nOnce finally left alone, Aelena slept deeply. By dawn she was thoroughly exhausted, more than she could remember being her entire life. Relentlessly fighting two demons through the night as they took their pleasure and forced her own, strained Aelena beyond endurance. The prolonged effort proved too much and at one point she fell unconscious.\n\nBut she woke soon after, entwined with both demons. Eyes fluttering open to face Marun, who looked deceptively innocent in slumber, Aelena was dismayed to discover that Tareg was awake and curled about her, gently tasting the flesh of her neck. Suddenly aware of her consciousness, Tareg turned Aelena to claim her mouth fully. As Aelena tiredly yielded, Marun stirred but did not wake, nor did his hand leave her breast.\n\nStill fatigued, Aelena sighed awake as the devil's mist imprisoning her trembled. Biting her lip, she sat up apprehensively, watching the smoke wall shudder as though encountering an attack. The brother demons were gone, so she'd hoped. Aelena dragged the blanket about her and waited, not daring to dream of a rescue.\n\nThen a slender arm broke through, clawing at the mystical smoke. Huffing and puffing from the effort, the golden-haired nymph burst forth and continued to drag herself through the prison barrier. Aelena did not dare try assist, lest she touched the smoke and was thrown back again.\n\n\"I...\" Exhausted from the struggle, Sirah took a moment to catch her breath. \"I am Sirah.\"\n\nAelena stared as Sirah approached the bed.\n\n\"H-How did you do that?\" Aelena spoke finally, unsure what to think of the strange nymph.\n\nSirah comfortably settled on the floor. \"I don't know. I tried to have you set free, but my mate forbids it. I wanted to see you weren't harmed.\"\n\nThe female company and kind words tugged at Aelena's stoic mask, and after withholding tears for so long, she choked on them.\n\n\"How do you measure harm?\" she asked tremulously. \"They chased me and...in the open they...both of them...did things to me!\" she stiltedly confided, her tear-streaked cheeks burned with shame as she remembered. \"Anyone could have seen, and they did not care! And worse, they forced me-!\" she broke off bitterly and shuddered. \"I'd rather they killed me.\"\n\nSirah had no words to comfort the distraught elf, but at least only her dignity was hurting. Having experienced both sides of the lure herself, Sirah knew Aelena's ordeal would not have been on the unpleasant side, unless she disobeyed. From her dire encounter with three demons, Sirah learned very few, if any, had her level of resistance.\n\nAelena wretchedly shook her head, still trying to make sense of the strange circumstances. \"A demon bound you? And his brothers keep me now? Why?\"\n\nA tell-tale blush stole across Sirah's cheeks. \"Because they desire you. They enjoy your challenging nature.\"\n\nAelena again shook her head with confusion. \"What kind of demons are they?\"\n\nSirah shifted uneasily. \"The better kind.\"\n\nAelena started up, recalling Sirah's words from the night before. \"You've met the Elven Prince?\"\n\nSirah nodded.\n\nAghast, Aelena stared at Sirah's dainty wings. \"You're not...Sirah, King Devan's daughter?\" she gasped with horror, forgetting her own plight.\n\nSirah nodded happily, and Aelena's long hair cascaded about her bare shoulders as she vigorously shook her head to clear her mind. \"A Princess with a demon!\" She raged, clenching the blanket. \"You must be returned!\"\n\n\"I am happy to live a free life with Thoran,\" Sirah said simply. \"I love my father and my people, but I would have seen none of the world, but for Thoran.\"\n\n\"But surely you cannot prefer to love a demon!\" Aelena cried, striving to forget she was slave to two malevolents.\n\n\"My father would let me love no one,\" Sirah cynically answered.\n\nAelena frowned. \"Why?\"\n\nSirah's expression became suddenly closed. \"Never mind why. Just know that I do not want to be restored to my people. And if you try to harm my mate, I will fight you.\"\n\nAelena genuinely smiled for the first time since her capture. \"Oh, little nymph. You are a gentle princess, and I have seen more war than you ever shall.\"\n\nSirah bristled at Aelena's patronising dismissal of her threat. Moments later, the elf scrambled back with alarm.\n\n\"Sirah, go! They return! I can feel it!\"\n\n\"They do not return,\" Sirah said sullenly.\n\nAelena's eyes widened. \"Malevolent!\" she hissed, recoiling. \"What has the demon done? Can it be reversed?\"\n\n\"It is the way that I am.\" Sirah carelessly tossed her head to hide how much Aelena's reaction hurt her.\n\nIt seemed her whole life Sirah could never fit in; her wings were too small to be a common nymph. Though her people cherished her, she was also alone. And now, her dark ability set her apart from all benevolent races. Whether in the company of good or evil, she could never belong.\n\nBut thankfully, Thoran was an outcast; a contradiction to his kind. Now Sirah realised that he understood her plight, and was the best companion for her.\n\n\"So there is dark blood inside you,\" Aelena concluded in a hushed whisper.\n\nSirah's eyes filled with tears. \"Do you sense I am evil?\" she asked mournfully.\n\nWiping away her own tears, Aelena shook her head. \"No, Sirah. You are the very picture of innocence. But I noticed your manner with the demons, your confidence. It surprised me,\" she admitted. \"Now I understand. And I appreciate you spoke for me, even if they disregard it.\"\n\nStill saddened, Sirah bit her lip.\n\n\"I do not wish to kill your mate,\" Aelena said slowly. \"But I want my freedom back, and I will fight for it.\"\n\nSirah cocked her head. \"A she-elf could never defeat a demon.\"\n\nAelena wanly smiled. \"Perhaps with your aid, I shall.\" Confused, she watched Sirah rise to her knees and shyly reach for her glossy red hair.\n\n\"It's a wonderful colour I've not seen before,\" Sirah explained with awe, gently stroking a long auburn strand between her fingers.\n\nAelena hoarsely chuckled. \"Says a nymph whose beauty is perfection.\"\n\n\"Perhaps you will unite with one of Thoran's brothers, and reside nearby,\" Sirah said, her wings wistfully fluttered.\n\nThough aware her hopes were foolishly unrealistic, it would be nice to have female companionship now and again. Elves were wonderful sources of knowledge, and lively company.\n\n\"Sirah, I despise them,\" Aelena said flatly, slowly retreating from the nymph's touch. \"They take me, they mock me, and they give me no peace whilst I'm within reach.\"\n\nSirah glumly nodded her understanding, and sat back with a sigh.\n\n\"I must escape,\" Aelena muttered, her nails digging into the blanket. \"I must. Demons find their victims and release or destroy them. To be their captive...to perpetually suffer the lures of two demons will take its toll on me. I could lose my mind.\"\n\nGuilt flooded Sirah, and she opened her mouth to explain the predicament, but quickly stiffened, the colour drained from her face as she sensed the barrier behind her dissolve at the same time Aelena's face darkened with loathing.\n\nSirah turned to see Tareg bearing down upon them, his eyes warmly fixed on Aelena, who blushed angrily when he winked. Finally, Tareg's attention was on Sirah.\n\n\"Greetings, sister,\" Tareg smiled down at her, but the smile was not kind. \"I see Thoran did not exaggerate your capabilities. You should not be here.\"\n\nSirah defiantly angled her head to glare at his great height. \"This is my home too, Tareg. I may go where I please!\"\n\n\"Aye,\" he agreed.\n\nBefore Sirah knew what he was about, Tareg seized her throat. Not to choke, but with enough firmness to hold her immobile. Sirah's eyes widened with dread as Tareg drew their faces close.\n\n\"Stay away from our pet, unless you wish to take her place,\" he warned.\n\nSirah angrily began to retort, but Tareg forced their lips together in an unyielding kiss. Seconds later, Sirah stumbled back, stunned, and Tareg stood tall as though nothing had happened. But his eyes were black pools of desire.\n\nTareg had a distinct, yet similar energy to Thoran, and Sirah's heart raced with unwilling excitement from the contact. Likewise, Tareg's toned, bare chest rose and fell heavily as though he'd approached at a run.\n\n\"Thoran said you were hunting!\" Sirah said hotly, fighting to expel the physical attraction. \"You should not be here!\"\n\n\"One remains as guard,\" Tareg silkily answered. \"I am your protector.\"\n\nWithout a worthy retort, Sirah bared her teeth at him.\n\n\"Now run along, little halfling,\" Tareg huskily advised. \"Your touch has created a need I must satisfy.\" Then his lustful stare returned to Aelena, whose jaw hung open as she realised the dynamic.\n\n\"That's why you keep me?\" she exclaimed, her eyes flashed indignantly. \"She's part siren?\"\n\n\"Something of that nature, but you are diverting alone, elf,\" Tareg shrugged, his eyes sinister. \"I am afraid we will take you with us, when our journey resumes.\" He looked to Sirah. \"Do you remain to watch, or join us?\"\n\nWith bewildered tears dampening her cheeks, Sirah furiously stamped past him. The smoke barrier returned, and she heard Aelena's angry protests immediately after. Tareg's delighted laughter carried through the mist and seemed to shadow Sirah all the way to Thoran's bed."
    ],
    "authorname": "Bellie444",
    "tags": [
        "elf",
        "forced",
        "noncon",
        "nonhuman",
        "princess",
        "prisoner",
        "romance",
        "threesome",
        "witch"
    ],
    "category": "NonConsent/Reluctance",
    "url": "https://www.literotica.com/s/captured-ch-05-4"
}
{
    "title": "It Ain't No Joke",
    "pages": [
        "Author's note: Everyone is 18+ in this absurd fictional stroker set before cellphones and the Internet. Views expressed may not be the author's. Details may be incorrect. Tags: aphrodisiac, chemistry, compulsion, incest, GILF, MILF, pigments. Enjoy this APRIL FOOLS 2021 contest entry!\n\n<center>=====<br>IT AIN'T NO JOKE<br>It's all in the cards. And family.<br>=====</center>\n\n\"Oh, you're still sorta cute. And you didn't fool me too much.\"\n\nHis big sister Kayla kissed his cheek, then stuck a tongue in his ear.\n\n\"Me too, buddy!\"\n\nHis little sister Heidi kissed his other cheek and tongued his other ear.\n\n\"Hey, will you quit that?\" Willard complained.\n\nHeidi tweaked his nose.\n\n\"Ask again next year and see what happens,\" his little sister teased. She walked away, wiggling her astral ass.\n\nKayla issued another nose-tweak, then rubbed his neck.\n\n\"You're not bad for a little brother, Willy. Now get back to work.\" Her departing derriere wriggled, too.\n\nWillard sighed and returned to his Richard Brautigan notes. This crucial paper on ALL WATCHED OVER BY MACHINES OF LOVING GRACE had to be as great as his usual work if he wanted that scholarship. Eastern Tech, on the other side of the city, wanted its science majors to appear literate. Damn.\n\nHe remained absorbed in schoolwork when his mom Marcia came in, still in her tidy office skirt-suit, and kissed his pale forehead. At least she did not lick his ear, or sway her MILFy hips when she walked away. Well, no more than usual.\n\n=====\n\nAPRIL FOOLS!\n\nIt was a long tradition. Ever since Willard could write &mdash; and his gym-rat Grandma Beryl, living nearby then, had filled his early years with literacy &mdash; ever since then, he gave April Fools joke cards to his mother, sisters, grandmothers, aunts, girl cousins, and special classmates who might wear dresses.\n\nIn his early years he drew funny figures and penned joking messages on big index cards from his pompous dad's oak desk. He folded envelopes from typewriter paper. As time passed and his allowance increased, he bought cardstock and colorful envelopes from stationers. His artistically handcrafted and nicely painted efforts looked better than commercial readymades, sure.\n\nHis jokes were mostly silly, often snarky, but never cruel. Most of the women and girls within reach laughed and many kissed his cheek. Some classmates groaned but they never refused his cards. How long did they keep them? He never knew. And his card message of LET'S APRIL FOOL AROUND took on new meaning as he grew.\n\nHe swapped rude, raunchy jokes with his male buddies, and looped little rubber bands around the tails of incautious cats. They never got the joke. He soon learned that cats lack a sense of humor.\n\n=====\n\nTime passed; he and those around him inexorably aged. Even in high school, he still made cards for family and friends, but part-time jobs paid for fancier stock. He now painted cartoons with pigments he ground and mixed himself. He felt as if his own goofy grin was embedded in every card.\n\nHigh school was finished! The academic scholarship was his! But that prize was no full-ride deal with a dorm and meals and everything, so he remained living at home.\n\n\"I'm really glad you wanted to move to the storm cellar, Willy,\" his mom Marcia said over yet another meatloaf dinner. \"I appreciate using your old bedroom as a home office, even if I had to sanitize it. Just don't poison the house with your chemicals.\" Her boobs jiggled sternly in her loose blouse.\n\n\"I'm careful, Mom,\" he said, pointedly looking elsewhere. \"At least now, with the outside door working, I can go in and out without making noise here.\" He squirted ketchup on his meal.\n\n\"Just be choosy about which girls you sneak in and out.\" Marcia sipped her pink chablis.\n\nWillard's little sister Heidi, eleven months younger than him. finished her small portion and her glass of wine. Yes, she was legally adult but underage for alcohol so she drank here under parental supervision. She spooned her jello fruit salad and glared at her bothersome brother.\n\n\"You've heard NOTHING, Mom. My bedroom was next to his. The cellar deserves him.\" \n\n\"And I don't have to listen to your clarinet, Sis. You get to clean the funky bathroom yourself, too.\"\n\n\"That's a lot easier now. The shower walls aren't so messy.\"\n\nHe thought of four snide replies that were not suitable for the family dinner table so he stayed silent.\n\nHis big sister Kayla, eleven months older than him, sighed and pretended boredom. Or was that ennui? The French word sounded more sophisticated, so tres chic, oui. She just HAD to seem sophisto! \n\n\"Oh Willard, I have a chore for you,\" their mother Marcia said, refilling her and his sisters' wine glasses from the table's bottle. No refill for him, Willard noted, and winced.\n\n\"The divorce is final and I want all traces of your asshole father Fred out of the house.\" Marcia said. \"He emptied his office; his clothes, pictures, knick-knacks, and sleazy porno magazines are gone; but there's still stuff from his family stored in the attic. I want you to go through the cartons up there and weed-out whatever isn't connected to my family or you kids. Throw it in the back of the pickup and dump it in the driveway of that condo he shares with his teenybopper slut. Don't bother throwing a tarp over it there. Rain is due the day after tomorrow.\"\n\nMarcia's nipples hardened at the thought of ruined memorabilia for her ex. Willard tried not to notice.\n\n\"Okay Mom, I'll get to that right now.\" He excused himself, rinsed his tableware for the dishwasher, and hit his cellar for clothes and electric lanterns. He slid into sneakers and cutoff jeans; the attic would be stuffy and dusty.\n\n=====\n\nDamn, Willard thought, I can't throw out all this stuff! Not the solid residue of Grandpa Ben's childhood. The Lionel O-gauge train collection, the Erector set, those porno slideshows... he must hide those, maybe under his big bed, until he sold them on the geek classifieds.\n\nHe opened cartons and decided what to discard. One group of metal boxes grabbed his attention: the Gilbert general chemistry, organic chemistry, and atomic chemistry sets. He would empty those into grocery bags, integrate them with the rest of his home lab, and dump the rusty boxes.\n\nHe cut up Grandpa's dusty, moth-eaten flannel shirts to wrap the lab glassware for protection. Test tubes, flasks, retorts... he could use those. The chemical bottles were sturdier and demanded less care.\n\nGrandpa's athletic uniforms and trophies... out! That cracked bowl mandolin with a warped neck... toss! The broken Pachinko game, and old board games with missing pieces... gone! Badly-assembled models of cars and planes... junk! Anything rusty, moldy, or shattered... history!\n\nHe lowered basket after basket of rancid detritus by rope from the attic window, right into the cargo bed of the family pickup truck parked in the driveway below. He climbed down to empty the baskets and hoofed back upstairs for more. \n\nHeidi, noisily practicing clarinet in her room, did not volunteer to help. Marcia and Kayla, busily critiquing worthless men as they did yoga poses in the exercise room (formerly Fred's office), did not even THINK of helping. Nobody noticed what Willard took to the cellar.\n\nHe stashed sellable items in milk crates under his bed. Nobody would look there! Chemistry set supplies went on his lab shelves, innocently admixed with existing wares. His Geiger counter only clicked a little when he unloaded the bag of atomic lab gear.\n\nAs ordered, he dumped the load by his disgraced dad's front door, then returned to his cellar. He glanced at a tame old porno slideshow &mdash; so much thick hair! &mdash; before he showered and masturbated, thinking of girls with trimmer pubes. Ah, variety! He would sneak tasty, nerdy Sandi and her neat pussy into his cellar soon.\n\n=====\n\nWillard's fall semester at Eastern Tech went well. Big sister Kayla was a year ahead of him there, majoring in architecture and pliable professors. Little sister Heidi was a high school senior, doing just fine with economics, the school band, and sweaty soccer jocks. Clarinet practice gave her excellent breath and tongue control, much appreciated by the healthy, horny futbolistas she fellated with relentless energy.\n\nWillard's and the girls' social circles did not intersect. None of his sisters' girlfriends shared his bed but he had his own special chemistry with a herd of nerd girls who appreciated his attention.\n\nThe fall and winter holidays passed. Family gathered for Turkey Day, and later to exchange Christmas presents, the grandparents, aunts and uncles, and cousins... but not Fred's few sympathizers. He really WAS an asshole to most relatives. \n\nNew Year's festivities were calm at Marcia's house. Sure, Uncle Ned, the used-car dealer Marcia's sister Megyn had optimistically married, was a commode-hugging drunk as usual, and Grandma Beryl insisted on showing off her scarlet satin bustier &mdash; she filled it well &mdash; but the rest of the family stayed fairly decorous. \n\nWillard was only seriously taken under the mistletoe by busty cousin Jen, whose wide tongue tasted of the red Port she absorbed. She pressed ample boobs into him.\n\n\"Oh cuz, what're you doing later?\" Jen breathed in Willard's open mouth. \n\n\"Whatever you want,\" he whispered back, \"but no poodles or Ukrainian dwarves.\"\n\n\"You're not dwarvish,\" she murmured, sloppily groping at his crotch, \"but you can be my puppy dog.\"\n\nJen's big brother Larry, home on a rare occasion, kissed both Kayla and Heidi. Just imagine what they did later.\n\n=====\n\nThe year's first quarter flew past as Willard brewed his new joke card pigments. He found useful substances in Grandpa Ben's old chemistry sets. Mix phenolphthalein (which had mutated a bit over the decades) with common sodium bicarbonate for just the right pinks. Add crushed beetle husk rich in cantharidin for an iridescent red. Use graphite for blacks, grays, and darkening; azurite for blues; sulphur for yellows; blend those and others for chromatic shades. For stability, add crystals of cholesterol-based dimethyl tryptamine (DMT). Mix those powders and make paints using an organic solvent, dimethyl sulfoxide (DMSO). \n\nHe could not know that young Grandpa Ben had jerked-off near his chemicals; aged cum had crystallized in opened bottles. Dust forced Willard to sneeze, adding his own DNA to what he mixed. Organic debris from overhead spiderwebs contributed vagrant steroids.\n\nNot yet a skilled chemist, he did not consciously make personalized, skin-penetrating, psychedelic aphrodisiacs. But subconsciously? Well, maybe. At least he wore lab gloves as he worked.\n\nWillard was disappointed at the small quantities of vivid pigments he ended with. He decided to save those colors for women in his family, and his closest girls, and only use colored pens and markers for everyone else. \n\nHe created, addressed, and sealed the cards, then dropped them in the corner mailbox a few days early... even those for his mom and sisters. That was his tradition.\n\n=====\n\nHis first hint of consequences came the next day when raven-haired cousin Cyndi, still living around the block with her parents Ned and Megyn, caught him coming home from campus on the city bus. She dragged him to her house. \n\n\"Oh Willy, I couldn't wait to open your card, and it's so BEAUTIFUL, damn! I touched it and a shock went through me, no joke! I didn't know I had such feelings for you! I'm really sorry I've teased you so much. I want to make it up to you. Right now! The folks aren't home yet so we can be private. Please, please!\"\n\nShe dragged him to her bedroom and stripped him and herself. She stuck a perky breast to his mouth, held one of his hands on her unoccupied tit, and his other hand at her already-wet pussy. She pushed his fingers inside her.\n\n\"Oooh, I feel such a buzz! Suck me and stroke me, oh ghod yes! Yes! Oooh, that's great. Ahhh...\"\n\nCyndi shivered under his tongue and fingers. She moaned, and fell back on her rumpled bed, pulling him atop her, between her wide-open knees.\n\n\"I know it now, cousin: my body tells me you're the love of my life, my one true love! I'm burning up for you! Fuck me! Fuck me!\"\n\n\"Cyndi,\" he said worriedly, \"shouldn't I get a condom?\"\n\n\"I can't wait!\" she cried, guiding his stiff stick smoothly into her juicy cavern. \"I'm on fire! Fuck me now!\"\n\nShe bit his neck and clawed his back. He was not about to deny a lady, not even the cute cousin who had teased him since they were little. He nicely fucked into her nasty, steaming-hot depths. Damn, her pussy was fiery! Her cunt muscles were like the hot hand of Hades, grabbing him, pulling him ever deeper inside her raging furnace.\n\nHe did not last long; and his live jizm, erupting from his phallic lava tube, did not cool her, but only excited her more. Was she on The Pill? He did not really care then.\n\n\"Oh cuz, baby, do it again, and again... I need you again!\" \n\nHer legs wrapped around his thighs to pull him yet deeper. She pushed his torso up, raised her head to his chest, and nibbled his masculine little nipples. She felt his cock stiffen inside her.\n\n\"Yes! Yes! Keep fucking me! Don't stop! Never stop!\"\n\nHe certainly was not about to stop. He was hard again, but she needed more.\n\n\"Oooh Willy, you feel so good in me, but it's not enough. My tits are buzzing. You've got to&mdash;\"\n\n\"I've got to fuck you like the arrogant bitch you are, cuz\" he grunted. \n\nHe pulled out of his horny cousin, flipped her over on her hands and knees, and entered her from behind like a ball-heavy mastiff. His bold hands pinched her nervous nipples and used her hanging mammaries as grips to pull himself deeper into her.\n\nHe first cum had drained him but his testicles recharged with the energy of youth. Still, it took a while. He pounded into her almost endlessly, his thighs slapping her flushed buttocks, wap-wap-wap! Her cries proved her satisfaction. He finally jetted what felt like a whipped gallon of creamy semen into her willing womb. His grunt rose to a roar.\n\nThey were in no hurry to untangle themselves. But Cyndi was not finished yet.\n\n\"My tits still itch like crazy, Willy! Suck me again! And my pussy! I've got to have you in my pussy! My ass burns, too! Oh damn, what's happened to me?\"\n\n\"I don't know but I'm not complaining,\" he groaned.\n\nShe twisted onto her back and set him where she wanted.\n\n\"Oh Willy, suck and pinch my tits! And fill my holes... you must, you must!\"\n\nHe nibbled one nipple and pinched the other. She moaned. His other hand reached between her legs to gather their frothy juices. His nimble thumb plumbed her vagina and two wet fingers slid into her anus. Her sphincters tightened, clenching at him as he stroked in and out.\n\n\"Oh Willy, oh Willy, yeah, oh fuck yeah!\" she wailed. \"I love you! I love you so much!\"\n\nAnd that's where they were when Cyndi's mom Megyn, Willard's slim aunt, walked through her daughter's open bedroom door with the day's mail in her hands.\n\n=====\n\nMegyn knew better than to yell, \"What are you kids doing?!?\" That was pretty obvious. She said nothing to distract them, only stood quietly watching. They did not notice her sort through the mail and open Willard's chemically enhanced joke card. She only drew their awareness when she fingered the hand-painted dragon cartoon, and gasped. \n\n\"Mom!\" Cyndi wailed. That she was orgasming at the moment only made her cry more plaintive.\n\nWillard's mouth left his cousin's breast while his digits remained in her nether holes. \"Uh, hi, Aunt Megyn.\"\n\n\"Oh kids,\" Megyn breathed, \"you're so... and I'm so... oh fuck, where am I? Why do I feel like this?\" She stripped out of her prudent office clothes and fell into bed with her daughter and nephew.\n\n\"Kids, my tits are so hot! Suck me!\"\n\nWillard rolled so his and Cyndi's mouths were at Megyn's inflamed breasts. They suckled. Megyn moaned. Willard kept one hand's fingers and thumb inside Cyndi's holes but intuited his twitchy aunt would want the same. Yes, her pussy was wet! Yes, he lubricated his other hand's thumb and fingers, and inserted them into Megyn's nether orifices. Yes, she whimpered passionately, and wept as an orgasmic wave swept over her.\n\nBut that was not enough for her.\n\n\"Willy, my mouth is so hot! I need relief! I need to suck your cock! NOW!\"\n\nThe naked three rearranged themselves. Willard found just enough room to noisily nurse at his cousin's breast and finger-fuck her while she suckled and fingered her mother who desperately fellated the young man. He had no semen left to soothe or punish his aunt's throat but he felt fine with his dickhead tickling her larynx.\n\nWillard had long thought his Aunt Megyn sexy but he had never expected THIS!\n\n\"Willy, my pussy is radioactive,\" Megyn complained. \"You've got to cool me down! Not, don't only suck my clit... tongue-fuck me! I need this!\" \n\nShe disconnected Willard and Cyndi and sprawled atop his body, lowering her vulva to his face. \n\n\"Go on, stick your tongue all the way in! And pinch my nipples! Ghod, I'm so hot!\" \n\nShe swallowed his cock again. His tongue stroked her velvety vaginal folds. What a flavor!\n\n\"Aw crap, Mom, my mouth still buzzes like crazy! I need some too!\" \n\nCyndi slithered between Willard's thighs and inhaled his scrotum, a ball in each of her cheeks. Her flooding saliva cooled her throat only a little. She sucked harder on his swelling, throbbing testacles. Could she excite him to cum in her mother's mouth? She stroked his hairy thighs.\n\nMother and daughter bumped heads but neither relented.\n\nWillard knew he would not recharge for a few minutes but he sure liked 69ing with his MILFy aunt while his hot cousin sucked his balls. What was not to like?\n\nAnd that's where they were when Cyndi's dad Ned stepped through his daughter's open bedroom door. He blinked twice. And again.\n\n\"Damn, I haven't even had a drink yet,\" he thought; \"now's the time to start.\" He left for his cozy man-cave to drain a tumbler of Scotch, watch some football, and forget what he thought he had seen.\n\n=====\n\nWillard extracted himself from his tingling relatives after cumming down his aunt's throat. \n\n\"Cuz, Aunty, I've got to get home.\" And figure out what happened, he thought.\n\n\"But my mouth still burns, and my pussy,\" Megyn whined.\n\n\"And my tits are all tingly,\" Cyndi said. She hugged Megyn. \"Mom, maybe we could...\"\n\nWillard watched in amazement as his cousin climbed on her supine mother's face. He saw a maternal mouth feast on her daughter, her tongue pushing through her offspring's labia.\n\n\"Oooh baby, I taste him in you! Oooh yeah!\" Megyn moaned.\n\nMother and daughter pinched each others' swollen nipples. Willard had to drag himself from the scene. He dressed; the engrossed women almost forgot him. They were 69ing &mdash; call it bonding &mdash; when he left, reluctantly but politely closing the bedroom door behind him. Their groans followed him down the hallway.\n\nThe images swirled through his mind as he opened the storm cellar's outside door, dropped his books and clothes, showered the sex smell off his body, and dressed sensibly for dinner. \n\nHis scientific consciousness tried to find causes. His mature consciousness thought of how much his mother looked like her sister, and his cousin resembled his own sisters. His juvenile consciousness wanted more pussy. He adjusted his briefs. Whoa!\n\n\"You're late for dinner,\" his mother Marcia mildly scolded when he took his chair at the kitchen table. His sisters smirked at him and swallowed their meaty lasagna and red wine.\n\n\"Sorry, I was caught up in something. Cousin Cyndi dragged me off. You know how she is.\"\n\n\"Yeah,\" Heidi said, \"she always treats you like stale underwear.\"\n\n\"Not at the table, dear,\" Marcia warned. ",
        "Heidi shrugged. \"Okay then, like leftover pasta, without sauce.\" She snared another saucy forkful. \"What happened this time? She's still making fun of you?\"\n\n\"It was unexpected, that's for sure. No, I think we have a new understanding. We'll see.\"\n\nHe noticed that his mother and sisters were not wearing bras under their loose, colorful blouses. He visualized marinara sauce splashing into cleavages and tried to divert his attention. Good luck, there.\n\nKayla tapped her almost-empty wine glass.\n\n\"Earth to Willy. Hey bro, is all Dad's crap, er I mean crud, out of the attic now? You know I really need it for a design studio. I've run out of space in my bedroom for my drafting board, desk, graphics workstation, and big plotter. Get it cleaned out.\"\n\n\"Everything's out,\" he said around a mouthful of pasta. \"Vacuum it yourself. I have my own schoolwork.\"\n\n\"At least you can help me carry things up there... please, pretty please?\" \n\nShe wiggled her boobs at him. He mostly kept his eyes on his plate.\n\n\"Tote dem barge, lift dem bale,\" Heidi giggled, and sipped her wine.\n\n\"Willy, you know you should help your sister,\" Marcia said. Her boobs shimmied, too.\n\nHe saw no path out of the trap. \"Yeah sure, right after dessert. Peach cobbler, right?\"\n\nFrench vanilla ice cream and glasses of limoncello helped the store-bought cobbler. Willard DID help his big sister; he opened the attic vents but insisted she carry the Hoover upstairs to vacuum it to her satisfaction. She hauled her lighter belongings up, nipples visible through her sweaty blouse. Willard was almost amused but toting her heavier gear soured his mood. Damn bossy sister...\n\nHe tired of being helpful. He showered, dressed just enough, scooted to the old table serving as a desk, and hit his coursework. He tired of that, too, but kept at it until his eyes and mind gave out. Sleep came easily; he WAS rather fucked-out.\n\n=====\n\nWillard woke early the next morning, the last day of March, and ate a fast breakfast of raspberry granola, peach yogurt, and plenty of Guatemalan coffee. He dashed to catch the bus to the Eastern Tech campus before others of the household rose to annoy him.\n\nAt school, he ran into a couple of the girls he had known and mailed joke cards to since forever... drawn this year, not painted. They smiled and wiggled as they passed. \n\nHis hard science courses were easy; the literature classes, not so much, because they were so subjective, lacking objective facts and reasoning. Fiction can say whatever shit you want. How to pass? Know the instructor's kinks and quirks. He could handle that.\n\nAn anonymous phoned-in bomb threat emptied the campus and cancelled all afternoon classes. Willard left early for lunch at his empty house; Kayla had obviously sheltered elsewhere, like underneath knobby Professor Xerxes.\n\nWillard ensured the home was empty and its phone line unused, and called his nerdy fuck-friend Sandi to invite her to his bed. He was a bit drained from yesterday's deep fucks; he was sure he could keep an erection in her for a long time. She liked that... out of her loose, geeky clothes, she liked it all afternoon. Sandi blew him hard; he fucked her long; their orgasms satisfied. \n\n\"Billy...\" (he preferred that nickname) \"...Billy, I'm your favorite girlfriend, right? I'm not just a cum-bucket to you, right? Not like those other girls you have here, right?\"\n\n\"You're the best, baby,\" he promised, his milky semen dripping down her leg.\n\nSandi blew him again and swallowed an unusually small, thin load of cum. She suspected she was not his first recently but did not complain. She left before dinner.\n\n=====\n\nThe evening meal went much as usual, with taunts from the sisters, weak peace-making by their mother, and decent food tonight: hot enchilada casserole with room-temperature dark beer, Modelo Negro in longneck bottles.\n\nWillard finished, excused himself, rinsed his tableware, and hustled downstairs. He did not see Kayla and Heidi open his joke cards in their rooms.\n\nHe heard feet and voices descend the ratty steps to his cellar quarters. The footsteps were determined; the voices, quarrelsome.\n\n\"Hey, *I* felt it first so *I* get him first,\" he heard windy Heidi peevishly say. \n\n\"But *I'm* the oldest so *I* get him first,\" insisted krusty Kayla's throaty growl.\n\n\"We'll just see about that, so watch out,\" Heidi threatened.\n\n\"You and who else is gonna stop me?\" Kayla countered. \n\nHe heard sounds of a minor struggle before his door opened. Then they were inside, both wearing tight tees and bright mini-shorts above their glittery sandals.\n\nTheir voices overlaid. \"Little brother,\" and \"Big brother,\" in dissonance. \"I've done you wrong,\" in chorus. \"It's no joke,\" in harmony, \"Don't throw us out,\" Kayla urged. \"We have to make up with you,\" Heidi pleaded. \"Please please please,\" in broken time.\n\nWillard slowly spun his cheap Ikea swivel chair at his makeshift desk; he faced his teary tormentors, curious.\n\n\"What's up? And what are you making up for?\" he asked cautiously. \"This isn't April Fool's Day yet so no pranks till tomorrow, okay?\" He wondered at their attitudes.\n\n\"Willy, Willy,\" Heidi whined, \"I never knew I had real feelings for you. No joke.\"\n\n\"Me too,\" Kayla maintained. \"You've always been a good little brother and I'm a bad big sister. I just realized... it came to me, an epiphany, and I mean it. Really and truly.\"\n\n\"That's right,\" Heidi broke in, \"same for me. Something just happened. I'm so sorry.\"\n\n\"I don't know how our heads got turned around,\" Kayla justified. \"You've never been mean to us and we've always been mean to you, always fought and razzed you.\"\n\n\"Yeah, I've noticed,\" Willard said. \"So how are you going to make that up for me? Kiss my feet or something?\" He started to get a weird, wanky premonition.\n\n\"Willy, Willy,\" Heidi implored, \"I'm on fire; my mouth and throat on fire. I need to suck your cock. I need you to cum down my throat, to cool me off.\"\n\n\"No no, little sister,\" Kayla demanded. \"I'm older and hotter. *I* get his cock first!\"\n\n\"Wait, wait, girls, I mean ladies,\" Willard said. \"What would Mom say about this? She'd say you have to share.\" The situation reminded him of last night.\n\n\"*I* have dibs on Willy's cock because I called it first,\" Heidi announced. \"If we're gonna share him, I'm first. But he can suck on your tits till it's your turn. Your tits are hot too, right? Just like mine?\"\n\n\"You think YOUR tits and mouth and pussy are hot, little sister? Okay, we'll do it your way. You suck his cock, he'll suck my tits. For now.\" Kayla sounded ominous.\n\nWillard naturally noticed that neither girl wore a bra under her thin tee. He especially noticed their bouncing boobs and nail-hard nipples when they peeled the tees over their heads. Those bare boobs distracted him as they approached; he was unable to defend himself when Kayla pressed his back to the chair and a firm, fruity tit to his mouth while Heidi pulled his cargo shorts and boxer knickers down his legs.\n\n\"Mmmphfff...\" Willard croaked, his mouth stuffed with Kayla's boobage.\n\n\"Mmmphfff...\" Heidi grunted, her mouth full of Willard's dickage.\n\n\"Oooh, suck harder,\" Kayla demanded, and Willard subvocalized, in chorus.\n\nHot drops squirted into Willard's mouth from Kayla's anxious nipples but did little to relieve her. Warm precum oozed from his cock onto Heidi's torrid tonsils but was just as unsatisfying. Willard felt no relief yet, either, but this sure was fun!\n\nKayla pulled Heidi's hair and dislodged her mouth from their brother's swollen manhood.\n\n\"Hey, it's *my* turn there now,\" the older sister barked, reinforcing Willard's image of her as a bitch.. but a bitch with two good tits. Alas, the nipple he comfortably nursed left his mouth as Kayla's mouth captured his cock. But aha, Heidi's nearest nipple quickly replaced her sister's between their brother's lips. Suckage continued.\n\nKayla's throat entertained a few more drachms of precum, but without relief. Heidi's hot hooters &mdash; first one, then the other, then back again &mdash; felt a bit better as Willard suckled, but not much cooler. And both sisters felt deep needs throughout their inflamed bodies.\n\nWillard's willy was ramrod-stiff. Kayla was daringly desperate. Their current connection could not prevail.\n\n\"Enough!\" Kayla cried. \"My cunt needs you! I just itch and burn so much, and only a cock can help! YOUR cock, little brother. Take me now!\"\n\n\"Wait!\" Heidi wailed. \"My pussy is on fire, too! Maybe Willy's tongue will cool me off!\"\n\nThe commando sisters straightened slightly, enough to drop their minuscule shorts. Heidi reached down and ripped Willard's shirt from him. All were naked now.\n\n\"Not here in the chair &mdash; on the bed,\" Kayla ordered. She grabbed Willard's feet. Heidi saw the obvious, and hoisted her not-too-big brother by his bony shoulders. Together, the sisters hauled him to his not-too-rumpled sleepspace and tossed him on his back. \n\nHeidi quickly sat on his mouth and watched her sister straddle his hips and guide his throbbing knob balls-deep into her burning box, already lubed by damnable desire.\n\n\"My tits are still red-hot,\" Kayla moaned. \"Little sister, you've gotta suck me!\"\n\n\"No, no!\" Heidi resisted. \"That's so pervy! And mine are scorchy, too. Okay, you suck me awhile, then I'll suck you, that's only fair, okay? But then I get his cock next, okay?\"\n\nKayla impatiently pulled her little sister's head forward till mouth met mammary. Heidi slurped noisily at her big sister's rosy niblet while Willard's drooling tongue soothed the youngest's yoni a little. Then he swiped at Heidi's clit till she shuddered, her orgasmic secretions giving a slight relief to her raw nerves. \n\nHeidi was in no hurry to stop suckling her sister. She received no milk, but her copious slobber cooled her own mouth and throat just a bit. And Willard's tongue certainly boosted her mood. Would his cock and sperm work even better? She would find out.\n\nKayla bounced her bubbly buns on her brother's lean loins and rocked around, back and forth, up and down, enough to further provoke her girly gushes. But she did not loosen her grip on her little sister's head, tightly maintaining the oral suction. She loosened up enough for Heidi to switch tits. Kayla felt better, top and bottom, but her mouth and throat still burned, and her body thrummed.\n\nThe sisters both reached nominally fulfilling orgasms, riding their brother's cock and tongue. Both felt lust radiating like solar flares. Both wanted, no they NEEDED, more, much more.\n\nHeidi pushed her big sister. Kayla fell sideways, her cunt and Willard's cock separating with an audible POP! \n\n\"You've had him there long enough,\" Heidi proclaimed. \"We trade places now or I'll tell Mom on you.\" She did not need to specify which terrible secrets she could reveal... Any would do. \"And Willy hasn't cum yet so you won't get his mouth all goopy.\"\n\nHeidi scooted off Willard's face, scooted down his torso, scooted into place over his groin, and scooted him into her needy depths. Kayla sighed, picked herself up, and lowered her wet pussy on his face. His tongue adroitly attacked her, slithering along her taint, around her clit (she quaked), and through her well-tended, luscious labia into her tunnel of joy, licking her into a tongue-fuck frenzy.\n\n\"Suck *my* tits now, bitch,\" Heidi demanded, and pulled her big sister to her. Kayla licked and drooled, amazed at her enjoyment of suckling her not-too-little sister.\n\nThe action was the same as before but with the topside players in new places. Willard, underneath it all, was just as happy, no matter who he pleased and poked with what. \n\nThis could not last forever. He came thunderously into Heidi's hidey-hole, a tornado of spunk swirling into her toddling twat. She came then too, her cunt-muscles clenching his fuming cock like a spasming fist. His semen filled her womb but not her needs.\n\nKayla came more than once on Willard's treacherous tongue, which eased her vamping vagina but left the rest of her bothered body seething and grasping for relief. \n\nThe visions did not help. Both sisters saw glowing possibilities spark before their addled eyes. Willard's painting pigments contained DMT, a short-term hallucinogen. They saw Heaven, but holy ecstasy had not yet crushed them. They prayed for magic.\n\n\"Oh, Hi-Hi-Heidi,\" hungry Kayla cried, \"Willy spewed in you, didn't he? I need that!\"\n\nThe older sister pushed the younger off their brother's cock, forced Heidi's legs apart, and dove in to clean her cunt, slurping and swallowing the curdled organic stew. \n\n\"Oh yeah,\" Kayla gurgled, looking up from Heidi's vee, \"my throat feels better now.\"\n\n\"Hey, me too!\" Heidi croaked. She pulled Kayla up so they were both mouth-to-pussy, the eldest atop the youngest. They ferociously slurped and shivered.\n\nWillard had seen this behavior only the night before. What was the cause? He moved back to his chair and scribbled notes while watching the 69 show and stroking his dick.\n\nThat did not last. Kayla looked up from her lascivious position and implored, \"Willy-Willy, you haven't cum in me yet. You've got to do that now. Please please please...\" Then she returned to licking the pussy under her face. She also spread her legs a little wider, giving better access to both Heidi's tongue and Willard's cock when he kneed-up behind her and nicely skewered her.\n\nWillard had loved seeing this position in porn. It was even better being there in person.\n\nThe three siblings finally fucked themselves into oblivion. They slept, huddled in a puppy-pile in Willard's wide bed. They woke with dawn's light creeping through the cellar's glass-brick clerestory windows. The sisters were a bit embarrassed, but still felt deeply for their magical brother. They would all need to fuck each other again.\n\nNaked sisters, side by side, Kayla's leg over Heidi's, him nestling on them, his fingers inside both cunts when not stroking their thighs or grazing their nipples. His mouth, moving from pussy to sisterly pussy. Then they twisted and double-blew him. Yes, the tormentors were atoning nicely for their past attitudes. \n\n=====\n\nFamily breakfast on this first day of April brooked no conversation. The siblings glanced askance at each other but kept quiet. Their mother Marcia was preoccupied, dreading a chaotic day on the job, and many uncouth pranks by her cruder cow-orkers.\n\nThe table cleared, all were dressed for the day, and quickly out to their obligations.\n\nWillard's Brautigan paper was a success; he was happy. His sisters breezed through their classes but seemed distant to their friends, as if visiting far-away places. Marcia only endured a few stupid pranks but was relieved when her workday ended early.\n\nWillard's school day also ended early. He was at his desk in his cellar, the storm door open for fresh outside air.\n\nHe heard a familiar Vespa scooter putt-putting outside. \n\nThe engine stopped. Feet descended the cellar's exterior steps. His well-exercised grandma Beryl swooped inside. Clothes fell from her taut body as she strode to him.\n\n\"Willy, you devil! I was at home, and I just opened your joke card, and I'm all a-glow! It made me realize how I feel about you! What are you doing there? Get up! Get naked! Let me show how much I love you!\" \n\nWhat, had she gone crazed?\n\nBeryl pulled Willard from his swivel chair, quickly stripped him naked, tossed him on his bed, and leapt on him like a panther taking her prey. A few cock-slurps stiffened him. Amazed, he gazed at his GILFy grandmother as she pounced on his loins and took him directly into her. A few up-and-down strokes, and he was deeply embedded.\n\nShe leaned forward to place a well-kept boob in his face.\n\n\"Suck me, boy! Fuck me, boy! Something's raging inside me and I know you're the only cure!\" Her thighs pounded his. \"Oh yeah, that's what I need!\" She pounded harder.\n\nWillard's subconscious threw out a scientific speculation for his being targeted in the repeated situation, something about his DNA mixed with psychoactive components. But being nearly raped by his foxy grandmother shook that thought away.\n\nMarcia parked her Audi coupe at the house. She saw her mother's Vespa outside the open storm-cellar door and wondered... but she had a coming-home routine to follow. Gather the mail. Get out of the corporate clone suit and into comfortable garb. A long dashiki, reaching to mid-thigh and barely hiding her black panties, would do. \n\nShe mixed a tall Harvey Wallbanger, drank half right away, and opened the mail. That pretty joke card from Willy was cute and she felt a flash from it. What? \n\nShe pushed past that body flash and searched the house for any sign of Beryl. Not upstairs &mdash; maybe down in the cellar with Willy? But why? Beryl had never been especially close to her cerebral grandson. Maybe they were sharing jokes.\n\nBarefoot, Marcia quietly walked down the steps and opened the cellar door. She saw the two sharing more than jokes &mdash; intimacy and body fluids, obviously.\n\nLike her sister Megyn, she knew better than to shout, \"What the fuck are you two doing?\" The DMT she had absorbed from handling the painted card started flipping her mind. She saw pulsating stars and galaxies, and phosphorescent rainbows and sexual auras, and love. She unconsciously stripped off her panties and dashiki. She was ready.\n\nHer aching nude body, driven by the pigments' nefarious mix, told her, \"I need this too!\" But how? Her corporate experience told her that direct action was called for.\n\nMarcia saw her mother contort in orgasm, saw her son's body tense as if ready to deliver a sperm-filled load into a two-generations-up-the-line womb, and knew she had to have that load herself. Naked, she rushed forward the few feet from doorway to bed, pushed her mother off that throbbing cock, and settled herself into place, impaled.\n\n\"Leave him alone, Mama!\" Marcia cried. \"I've got this! I've got this!\"\n\nBeryl looked on in frustration as Marcia rode Willard to her vigorous climax. Marcia was now happier, but not totally. Willard's eruption of fresh semen into his own mother felt like a cool springtime rain in her steaming snatch. But her body remained wrought-up.\n\n\"Oh, that was fine!\" Marcia swore. \"But I feel electrocuted! My tits are like I'm plugged in a wall socket! Willy, Mama, you both gotta suck my tits, keep me from overloading!\" \n\nMarcia lowered her breast to her son's mouth and felt his cock re-hardening inside her. Shrugging, Beryl lay beside her grandson, her head next to his, so she could nurse her daughter's other buxom boob. Beryl selfishly took WIllard's free hand and forced him to slide two fingers into her wet wazoo. That helped, somewhat.\n\nBut like her daughter, Beryl's excited body was only partly mollified. She noticed signs that Willard was nearing penile resurrection. Fair was only fair, she thought. She pushed Marcia off her grandson, much as she had been displaced, and then pulled him up and crouched before him on her hands and knees.\n\n\"Give it to me, Willy! Fuck me like the animal I am! Put out my fire! Hose me down!\"\n\nKnee-walking to Beryl's butt and sliding into her love canal, he wondered: Should he have expected this? After the last two incidents, what would surprise him now? Could he have foretold what happened next?\n\n\"You gonna be like that, Mama?\" Marcia screeched. \"You want my boy's jizm to slake your thirst? Well, come get it second-hand. It's still pretty fresh. Clean me out, Mama!\"\n\nMarcia lay in front of Beryl's face with her legs spread and scooted her goopy snatch under her mother's chin. Beryl felt a familiar urge. She had not sucked a creampie for a long time, and never from her daughter, but it seemed so RIGHT now! She dove in.\n\nWillard's testicles took quite a few minutes to reload, so he spent some quality time doggy-fucking his grandma while she licked his mom's pussy clean. His lean hips loudly slapped Beryl's taut buns, wap-wap-wap! Everyone grunted and groaned sensually, the women regularly enduring hot orgasms, till he growled and gave his gravy to granny.",
        "He was physically drained; his now-limp dick dropped from Beryl's funbox and his body fell aside. He was not totally surprised by the next moves.\n\n\"Mama,\" morose Marcia, pleaded, \"you just got a fresh supply! You always told Megyn and me to share, and I've told my kids to share, so you should share that with me! C'mere now!\"\n\nShe tugged at her mother, who spun and dropped her dripping cunny to Marcia's face. Both slurped energetically. Limbs entangled, they rolled, and rocked, and rolled again. They showed no signs of slowing down.\n\nMarcia was atop their 69 now. Willard, witnessing the wild women, felt his cock regain vigor. Marcia lifted her face to take a breath, and glanced at her son's resurgent rod.\n\n\"Willy! You're not done yet! Get back here and fuck me! Let your balls bounce off Mama's forehead! That'll serve her right!\" She dove back in for more cunnilingus.\n\nWillard rarely disobeyed his mother's orders and was not about to begin now. He knee-walked behind Marcia, positioned her legs for access, carefully avoided pulling Beryl's hair, and fucked into the portal through which he had entered the world so long ago.\n\nThey made sounds. Wap-wap-wap of thighs on buttocks. Slap-slap-slap of bloated scrotum on forehead. Ungh-ungh-ungh of exertions. Ohh-ohh-ohh of female orgasms.\n\nTime passed. Willard was ready to deliver again. Uh-uh-uh and spew-spew-spew... and Beryl pulled her grandson's prick from her daughter's pussy and took him into her mouth, vacuuming the last of his vital fluids down her throat.\n\nThat final shot was indeed his last for now. He moved aside and watched their endless writhing 69. They showed no hint of slowing down. He shook his head, rose from his bed, and staggered to his shower. No need to jerk-off behind the shower curtains now.\n\nCleaned and dried, he came back to his cellar space. Damn, they were still at it! He pulled on shorts and a tee and went upstairs... might as well watch some TV. The Twilight Zone marathon was well underway when he heard Grandma Beryl's clean Vespa putt-putt away. He gave his mom time to clear out of his room and head for her own bath. I gotta change the sheets, he thought.\n\n=====\n\nDinner was a little skimpy and late, and so were his sisters, but that was okay, nobody whined. All drank jug wine with their microwaved pizzas and bagged salads. All seemed distracted. Willard felt eyes looking at him, then averted when he glanced back. He felt... used. He ate and drank quickly, rinsed his tableware, and escaped downstairs.\n\nHe sat at his untidy desk and reviewed his chemistry notes. What exactly had he used for his card-painting pigments? He thought that was the only common link. Girls he had drawn joke cards for this year had smiled at him. Women who touched the cards he painted jumped on him and each other. What was it?\n\nHe pondered the puzzle. He drew chemical diagrams, listed properties, calculated probabilities, reached hypotheses, and shivered with tension.\n\nHe heard the phone ring upstairs. His mother called down to him, \"Willy, it's Sandi on the line for you.\"\n\n\"Thanks Mom,\" he yelled back, and picked up his ringerless extension phone.\n\n\"Oh baby,\" Sandi enthused, \"I'm at the gym with my brother Karl and the team.\" Karl was a hulking fullback on the college football squad. \"I was helping some of them with classwork and I opened your joke card. It's beautiful! And funny! I passed it around, and everyone really enjoyed it. They all seem excited. The whole team wants to come over and see you. Is now a good time?\"\n\nWhat, those macho, muscle-bound turf-burners had touched his pigments? He had a bad feeling about this, no joke.\n\n===== The End? =====\n\nAuthor's note: This unlikely fiction, muchly written on an Android tablet, is copyright \u00a9 2021 by Hypoxia Smurf. Constructive comments are always welcome. If you like this  entry, join the 1%ers and VOTE, dammit!"
    ],
    "authorname": "Hypoxia",
    "tags": [
        "chemistry",
        "compulsion",
        "incest",
        "april fools",
        "aphrodisiac",
        "gilf",
        "milf",
        "pigments"
    ],
    "category": "Humor & Satire",
    "url": "https://www.literotica.com/s/it-aint-no-joke"
}
{
    "title": "Calm Before The Storm Ch. 02",
    "pages": [
        "The chronological order of my stories is now listed in WifeWatchman's biography.\n\nFeedback and constructive criticism is very much appreciated, and I encourage feedback for ideas.\n\nThis story contains graphic scenes, language and actions that might be extremely offensive to some people. These scenes, words and actions are used only for the literary purposes of this story. The author does not condone murder, racial language, violence, rape or violence against women, and any depictions of any of these in this story should not be construed as acceptance of the above.\n\n*****\n\nPart 7 - Dinner Parties \n\n\"This is Bettina Wurtzburg, KXTC Channel Two News!\" yelled the lovely MILF reporterette at 7:00am, Tuesday, December 1st. \"Channel Two News has learned that the Town & County Council's meeting next week will discuss the budget cuts called for by the Town & County Assembly in their budget proposal, which was passed last night!\"\n\nThe Assembly was the County's legislative body that elected 30 people from equal-population zones, without regard to the Town's city limits line. The Assembly was the only body that could set taxes and produce a budget. The Council was semi-executive, and was ten Members plus the Mayor, but the zones were half Town and half outside County, and not necessarily equal in population; ergo, the Assembly existed to prevent the U.S. Department of Justice from coming in with a complaint.\n\nBettina continued: \"The Assembly has mandated that all Town & County Government functions institute austerity measures during these tough economic times. It is not known yet where the Council will make cuts, which departments will be the most deeply cut, nor which or how many jobs will be lost.\n\n\"In other news, 'Black Friday', the day after Thanksgiving, was considered a disappointment by the Town & County's businesses, as the biggest malls in the County report lower sales than the previous few years. Cyber-shopping, purchases on the Internet, are also down from previous years, both locally and nationally. We now go to Nick Eastwood for the Sports report. Nick!\"\n\n\"Thank you, Bettina!\" shouted Nick from outside University Stadium. \"The Wildcats and the Tigers are prepping for the Conference Championship game, which will be held in the City on Saturday evening. The undefeated, No. 1 Wildcats are favored to win, but the Tigers will be a tough opponent. The two teams did not face each other in the regular season.\"\n\nNick continued: \"And the Wildcats will have to prepare with the possibility of losing their defensive coordinator. The Bulldogs asked for and received permission to interview Coach Ted Thrasher for their vacant head coaching position, and he is widely believed to be the top candidate for the job. The Wildcats have even gone so far as to state that Coach Erskine 'Iron Man' Marshall will be promoted to defensive coordinator if Coach Thrasher leaves for the Bulldogs. Back to you, Bettina!\"\n\n\"Thank you, Nick!\" said Bettina, \"and let me just say in the Thanksgiving spirit that we are very thankful to have you with us at KXTC, Nick!\"\n\n\"Wow!\" said Joanne Cummings, \"she must be hot for him.\"\n\n\"Or else she had him this past weekend.\" said Cindy Ross, just coming into the room. Laughter ensued as Bettina continued:\n\n\"And this weekend is the Policeman's Ball, as well as their Orange Order honorary induction ceremony!\" said Bettina. \"This will be the last year the Policeman's Ball is held at the University Hotel, as the new Civic Center and Library will be completed next to the State Office Building on Courthouse Square by next year...\"\n\n\"So they're cutting our budget,\" said Tanya, \"but they have money to build the new Civic Center.\"\n\n\"That was budgeted for this past year,\" I said, \"and they just started building it a few weeks ago. It'll have a big auditorium room that can be rented for big events, meeting rooms, places for the old folks instead of that little Community Center they're in, and a new library, which I'll be glad to see.\"\n\n\"The old folks love that little Community Center.\" said Joanne. \"They were fiercely opposed to the parts of the Civic Center plan that would force them out. They are trying to buy the property, but the Council is blocking them.\"\n\n\"Oh really?\" I said. \"I'm going to check into that. If I find that Thomas P. Cook has any inside track on buying it, I might just have to give Bettina an interview.\"\n\n\"Woe betide Thomas P. Cook.\" said Cindy. \"Crowbars a'comin' at him.\"\n\n\"Commander, are we going to be hit by the budget cuts?\" asked Theo Washington.\n\n\"I've been working hard with the Chief and Sheriff to have the Council accept our plan of reducing our numbers through attrition... retirements, resignations to go to other jobs, kicking the Sharples-types out, and not hiring and not promoting as many people as we usually do.\"\n\nI decided to change the subject by asking out loud \"By the way, has everyone voted for the Orange Order yet?\"\n\n\"Got my ballot, but I didn't fill it out yet.\" said Martin Nash. There was general concurrence with that.\n\n\"I've already voted.\" said Tanya Perlman. \"But really, only two people will make it this year?\"\n\n\"Unfortunately, yes.\" I said. \"Like I said, we're shrinking through attrition, and we had a bigger-than-normal class last year.\" I did not add that the bigger class the previous year was so that Cindy and I could be inducted without taking away from two others. \"Captain Ross, have you voted yet?\"\n\n\"Nope.\" Cindy said simply. \"I've been having too much fun babysitting my new nephew, and less fun dealing with my fianc\u00e9e. But I know who I'm voting for, so I'll go fill that out now.\" With that, she turned and stalked out of the room.\n\n\"I'll leave you guys to decide who to vote for.\" I said. \"Of course I would never tell you guys who to vote for, but if you happen to see my filled-out ballot sitting here by the coffeemaker in the next few minutes, I won't mind if you happen to vote the same way. Or not. It's up to you.\"\n\nI drank coffee and watched Bettina talk about the planned Christmas festivities for the next month as, by curious coincidence, every Detective came up to refill his or her coffee mug...\n\n* * * * * * * * * * * * * * * *\n\n\"Okay, I'll be alert.\" said Molly. \"Love you, too. Bye.\" After disconnecting the cellphone call, she resumed making up her bed in The Cabin.\n\n\"I really appreciate all of your help.\" she told Pamela Feeley, who was feeding baby Ian. Molly had been breastfeeding Ian, but Dr. Fredricson had advised adding some formula at least once a day; it was like adults or children taking a vitamin once a day.\n\n\"Oh, I'm happy to do it.\" said Pamela. \"Little Pete is beginning to grow up, and it's a joy to be able to help with sweet little boys like Ian. By the way, that phone call sounded a bit ominous.\"\n\n\"That was Don.\" said Molly. \"He got wind of a ring of crooks that steal things from hospitals... including organs for donations, and occasionally actual babies. He's going to be at the Hospital all afternoon with the Sheriff, the Campus Police, and Hospital Security, implementing tighter security measures there. So, what would you like for lunch?\"\n\n\"We should probably finish off those leftovers.\" said Pamela. \"Or we can have soup and sandwiches, and you can have the leftovers tonight.\"\n\n\"That's what I'll do, then.\" Molly said.\n\nIt did not take long, and soon they were eating warmed up ham soup and grilled cheese sandwiches. Little Pete was more interested in baby Ian than his own food.\n\n\"I wonder why babies are so fascinated with other babies.\" Molly mused as they ate. \"Don and Laura both talk about how much Carole loves all the other babies.\"\n\n\"I don't know.\" said Pamela. \"Pete, little Pete's father, was an only child, but he always loved the other babies in the nursery at church.\"\n\n\"Which church do you go to?\" Molly asked.\n\n\"First Methodist... 'Only' Methodist in this Town.\" Pamela said with a hint of humor. \"I grew up going to First Baptist with my parents, but ended up going to the Methodist Church with my husband Mark. That was a long time ago... and when almost everyone went to church. Now... Pastor Westboro says it's only a quarter of what it used to be.\"\n\n\"He grew up here, too, didn't he?\" asked Molly. \"So he's seen the changes.\"\n\n\"Oh yes.\" said Pamela. \"I was in school with Raymond, that's Pastor Westboro. I was a couple of years old than him. I went to the Junior-Senior Prom with him my Junior year. Then I met Mark that summer, and we began dating, and Mark took me to the Prom my Senior year.\"\n\n\"You were the belle of the ball, I'm sure.\" said Molly. \"So did you marry him out of high school?\"\n\n\"Oh no, I went to college, here at the University.\" Pamela said. \"Mark's grades were not that good, and he wasn't accepted. So he ended up going to Midtown College, which was a two-year school back then.\"\n\n\"I guess Pastor Westboro went to Divinity School?\" Molly asked.\n\n\"No, not at first.\" said Pamela. \"He went to City University, but I have no idea what he majored in. I think he went to the City Theological Seminary later on, then came back here. By then I was married to Mark. But I didn't marry Mark right away. I dated several men while in college and just afterwards, including Sidney Wellman.\"\n\n\"He's older than you, isn't he?\" Molly asked.\n\n\"Oh yes.\" Pamela said. \"And he was a cad then, just as he is now. But you know how young girls are attracted to bad boys.\"\n\n\"Yes, I do.\" said Molly. \"And I made the mistake of marrying one. But I divorced him and left him in the dust.\"\n\n\"Sidney Wellman was definitely what they call a 'player'.\" said Pamela. \"I should've known better. There was just something about him, an underlying... 'badness' about Sidney. I guess it is what he needed to get to where he is...\"\n\n\"Anyway,\" Pamela continued after a pause, \"Mark got his associates degree, then ended up at the Police Academy. We began dating again, and got married. He left the Police Force after only a few years, and became a Security officer at Crown Chemicals. He was involved in all that mess with Proactive Citizens of Greenworld. That situation took away years of his life.\"\n\n\"How so?\" Molly asked. \"Was he injured?\"\n\n\"No, he was lucky,\" said Pamela, \"but he was one of those that opened fire on the protestors that charged the fence. He doesn't know for sure if he personally killed any of them, but many died. But that wasn't the worst of it. That incident really divided the Town, and a lot of people held it against Mark that he'd defended the company at all, much less with the use of deadly force. Of course others supported him, but he lost friends, and it really hurt him that people openly vilified him to his face after he did what he knew was his job, and that he was protecting other people.\"\n\n\"That's too bad.\" Molly said. \"It's that way for us police officers now. Some people just hate us. I'm afraid that things are going to get really ugly with the black community in the next few years.\"\n\n\"Yes.\" said Pamela. \"I think Mark was secretly happy when Pete went to the Police Academy, even though he openly encouraged Pete to consider other things. But that boy wanted to be a police officer from the minute he knew what it was. He wanted to be like his dad, but there must've been more. I was hoping Pete would do something else, also, but he was set on being a police officer...\" She did not finish the sentence, and Molly knew what Pamela was thinking... that her son was the first TCPD officer to die in the line of duty since Pamela had attended the prom...\n\n* * * * * * * * * * * * * * * *\n\n\"So how was your day, darling?\" asked Laura as I came into the Mountain Nest.\n\n\"It was pretty good.\" I said. \"Hi Bowser.\" I said to the dog as he bounded up to greet me. I reached down and gave him a good petting, then headed into the den.\n\n\"Daddy!\" yelled Carole.\n\n\"Da-da!\" said little Jim, smiling brightly. I picked him up and sat down on the sofa, and Carole came running over to me.\n\n\"You've got a few minutes, but we have to get ready for the dinner party tonight.\" Laura said.\n\n\"Why don't you go get ready now, and I'll follow you.\" I said, knowing that my wife, like a great many wives, would take considerably more time getting ready than me, the husband would. And it gave me time to spend with Carole and little Jim, which was something I never, ever, took for granted...\n\n* * * * * * * * * * * * * * * *\n\nThe dinner party was not formal, so Laura wore a dress that was relatively nice for work, but not 'dressy'. She also wore medium heels; she would be taller than everyone at the dinner (except me), even without them. I wore one of the gray suits I often wear to work, but with a button-down white shirt and a tie. Despite the occasion, I had my badge and gun under my jacket, as always.\n\nDr. Stephanie Steele was a hostess that knew etiquette. She sat at the end of the dining table, with her husband Edward Steele at the other end. I was seated to her right and Laura to his right, per protocol. The other two people at the dinner were the Steele's daughter Selena, sitting to my right and her father's left, and J.P. Goldman, sitting to Stephanie's left and Laura's right.\n\nThe conversation at dinner was fairly innocuous. Dr. Steele talked about her astrophysics studies, which involved gravity and black holes... and we are not talking about apples falling from the trees nor my son Jim's ability to consume large quantities of food. I was able to follow Stephanie's talk to a point.\n\n\"You know,\" I said, seeing that J.P. Goldman was lost, \"I remember seeing in my calculus class in college that some of the equations you use in your physics work are the same ones that apply to advanced economics that banks use, such as rates of decay and even more complex ones.\"\n\n\"That is true.\" said Mr. Goldman. \"I should've paid attention in those physics classes, I guess. But in my day, the physicists of the time were barely getting started with Professor Einstein's work, and landing on the moon was still a goal yet to be reached.\"\n\n\"Oh, you are not that old, J.P.\" said Stephanie with a grin. \"And you must've studied something, because you have one of the best banks in the nation, while others are going under or struggling.\"\n\n\"And I have your daughter to thank for much of that.\" said J.P. Goldman. That got Selena's attention, as she had been talking to Laura and Edward Steele.\n\n\"Mr. Goldman, are you taking my name in vain again?\" Selena asked playfully.\n\n\"Not at all. Not at all.\" said Goldman. \"I was just telling your mother of the wonderful job you are doing at my Bank. My most able and trustworthy associate.\"\n\n\"Aw, thank you sir. Speaking of wonderful jobs,\" said Selena, \"Commander Troy has been at it again. Taking down the CEO of a company like BigPharmaCorp is walking where angels fear to tread.\" I did not say that that my Angels did not fear to tread anywhere...\n\n\"Well,\" said Stephanie, \"that does not compare to what he did to save you, my girl. I still don't understand why that Harlan woman targeted my Selena, though.\"\n\n\"I'm not totally clear on that, either.\" I said. \"But Mr. Goldman mentioned 'trustworthy', and I can tell you that I am grateful Chief Griswold and ADA Patterson trusted me enough to give me an hour before arresting Selena. That literally was the difference in that case.\"\n\n\"So your family is originally from Texas, Mr. Steele?\" Laura asked. \"I grew up there myself.\" My wife had just rescued me; I was beginning to think of the Black Widow case, and the tremendous cost extracted by Angela Harlan before she was exterminated. Laura had given me time to recover my wits.\n\n\"Yes and no, Laura.\" said Edward. \"By that I mean that my parents separated and divorced. My mother was from Eastphalia, and we moved back there and her family. My father did live in Texas, so every summer for two months I'd live down there with him. I ended up meeting Stephanie at the University here, and we got married.\"\n\nSteele continued: \"By chance, I had the opportunity to develop some projects in the Dallas area, and so I went down there quite a bit. Selena spent the large part of her teen years down there while Stephanie was on astronomy trips, and went to college down there. Then Selena made her way up here... though we didn't know she was being followed by that despicable woman...\" He stopped there.\n\n\"Laura,\" said Stephanie, rescuing her husband, \"you were at other Schools before coming here, weren't you?\"\n\n\"Yes.\" Laura said. \"I had a couple of sabbaticals to Europe while my late first husband was assigned there with the Army. Then I was at Don's school for a few years, including while he was a student there, but I never met him.\"\n\n\"Too bad.\" I said. \"I would've changed physics and the Time Line if I'd met you then.\" I said with a grin. Laura smiled briefly.\n\n\"Aw, that's sweet.\" said Selena. \"And despite my mother's views of theoretical physics, you two were destined to meet no matter what the Time Line said.\"\n\n\"Yes, 'Destiny' is an interesting subject.\" said J.P. Goldman. \"And I'm glad it was the Commander's destiny to come here, and clean up our Town as well as he has been doing.\"\n\n\"Thank you, sir.\" I said. \"But there's still much to be done.\" Both Goldman and Steele nodded, and I knew they understood... perhaps more than I realized.\n\n* * * * * * * * * * * * * * * *\n\nMeanwhile, Cindy had been invited to a more informal supper. She arrived at the home of Mrs. Veasley. Also there were Mrs. Williams and the Widow Athena Jones, wearing her trademark shawl as usual.\n\nAs they ate dinner, Cindy said \"So you were in the military, Mrs. Veasley?\"\n\n\"Oh my, I never knew that.\" said Mrs. Williams. \n\n\"I am not in the habit of telling people that.\" said Mrs. Veasley. \"But to answer your question, Child, yes I was. You are a perceptive young woman, like your father.\"\n\n\"I'd like to think I got some of it from my cousin.\" said Cindy, then added with a cryptic grin, \"and of course from his mother's efforts to drill some things into me.\"\n\n\"And well needed,\" said Mrs. Veasley, \"to prepare you for your work with the Iron Crowbar. So, did you look up my record?\"\n\n\"Only after observing that pin on your jacket when I saw you at the Community Center.\" said Cindy. \"Military Order of the Purple Heart. You're the leader of this region's volunteers that help our returning wounded combat veterans. So, on a slow day at Headquarters, I looked up your record as an Army Nurse.\"\n\n\"And very honorable service, too.\" said the Widow Jones in her scratchy voice. \"Why don't you tell Miss Ross how you came to be wounded, and in that wheelchair, Mrs. Veasley.\"\n\n\"Since you were also badly wounded in the line of duty, Child,\" said Mrs. Veasley, \"I shall tell the story to you. Yes, I was an Army Nurse, and was a Lieutenant Colonel in charge of the Nurses in a field hospital during the First Gulf War, the liberation of Kuwait. The Media has not told the stories of some of the horrors inflicted by Saddam Hussein upon the Kuwaiti People; it is almost as if the Media was taking his side against the American and Allied armies liberating the Kuwaitis from the evil of Saddam. But I digress...\"\n\nAfter a pause, Mrs. Veasley said \"I was actually traveling in a vehicle with some other people as part of a convoy. We were going to a PX that had been set up to buy essential things like toothpaste, soap and shampoo in a place where our hosts, the Saudis, would not see women purchasing such things. What we did not know was that to our north, the Iraqis made an incursion. They began shelling the road with their artillery, trying to hit the troops that began coming up to defend the border.\"\n\n\"A shell exploded near our vehicle.\" said Mrs. Veasley. \"Everyone was hit and wounded, but fortunately the rest of them were not wounded badly. However, the one fragment that hit me did so in my lower back, and damaged my spinal cord. I do have some feeling in my legs, and I still have my bodily functions, but despite my best efforts, I have never been able to walk again.\"",
        "\"I'm sorry.\" said Cindy.\n\n\"Do not be, Child.\" said Mrs. Veasley affectionately. \"At first, it was hard. I was awarded the Purple Heart... and was medically discharged from the Army. I became very depressed, and thought of ending my life. But fortunately, your father, Dr. Eckhart, had set up several recovery homes for our returning veterans, a couple which are still in operation today. Much like what Mr. Trump did at his Maralago Resort in Florida for our veterans.\" Cindy nodded in understanding.\n\n\"While I was at Dr. Eckhart's facility, I could see that his young associates were very happy as they assisted us in our physical as well as emotional recoveries, so I knew that this was a special group of people within an special organization. And then one day, Dr. Eckhart himself came to visit. \n\n\"After one five-minute conversation, I knew I had a purpose to live. And I wanted to be one of his volunteers, as well as learn from him. And so I've worked with the Military Order of the Purple Heart, and I've studied with him at his facility in Coltrane County.\"\n\n\"The funny thing is,\" said Mrs. Veasley thoughtfully, \"is that it was as if he singled me out among all the people there to talk to, that he came specifically to see me.\"\n\n\"He did.\" said Cindy. \"He told me.\" Catching herself, she said \"And please don't tell him I told you.\"\n\n\"Yes, Child, we shall keep that one between us.\" said Mrs. Veasley.\n\n\"Well, such an uplifting story.\" said Mrs. Williams. \"I've heard both good and bad things about Dr. Eckhart, but stories like that make me inclined to believe the good.\"\n\n\"I would say that the best of him is right here with us, in his daughter and her accomplishments.\" said the Widow Jones. Only Cindy caught the slightest bit of acerbity in her voice...\n\n* * * * * * * * * * * * * * * *\n\nAfter dinner, we basically separated into two groups, the men in the study and the women in the living room. I handed Mr. Steele and Mr. Goldman real cigars with blue ribbons in celebration of my new son. I'd secretly given Selena one so she could enjoy it later; she and Melina were women that liked a good cigar. Laura liked them too, but rarely indulged.\n\nAs we sipped the very fine cognac Mr. Steele had poured us, he got right down to the point of the discussion.\n\n\"I am sure, Don,\" Steele said, \"that you have noticed that Stephanie is not Selena's birth mother.\"\n\n\"I thought that was likely.\" I replied. \"I originally thought she was adopted, but I can see that she is definitely your daughter.\"\n\n\"Yes, that is correct.\" said Steele. \"I thought it might be a good idea to share with you the entire story. Not only do you deserve to know, having saved my daughter from that atrocious woman, but it might be helpful to you going forward.\"\n\nI leaned forward, paying attention, but also breathing a bit harder. I was putting myself 'into the zone', a mental zone of heightened alertness and readiness. This was something I'd learned from my Aikido teacher years before, and it was something P. Harvey Eckhart taught at his Enlightenment Camp.\n\n\"Don, J.P. and I both know that you and your wife have what some would call an 'open' marriage.\" said Edward Steele. \"Stephanie and I had something very similar. She didn't travel all that often, but when she did it was for stretches at a time, and we both knew that we were not going to remain celibate in the prime of our lives.\"\n\n\"I understand.\" I said.\n\n\"As I said at dinner,\" Steele said, \"I was down in Texas a good bit. I was also up here a good bit; J.P. here and I met while I was in college, and we became very good friends. He financed several of my development projects, and in turn I made his bank a lot of money. He's also like a second father to Selena, and I daresay he influenced Selena's decisions to major in Finance and become a Bank executive herself.\"\n\nSteele went on: \"While I was up here, I met a woman one evening at a bar. She was very lovely, she said she was recently divorced, and she was lonely. Her name was Alice, which is Selena's middle name. Alice came to my apartment with me that night, and we began an affair. For the next two weeks while I was up here, she stayed with me.\"\n\n\"To make a long story short,\" said Steele (too late), \"I went down to Texas, and two months later Alice shows up at my doorstep. Pregnant. She said she knew I was married, but she was leaving this Town, and her past life, behind. She only asked that I help set her up so that she could continue her life hidden from her ex. She said that under his false veneer he showed the Public, he was a deeply evil man inside, and she feared him. She was trembling even as she spoke of him.\"\n\n\"Did she tell you his name?\" I asked.\n\n\"No, she never did.\" Edward said. \"And I never asked. Anyway, I set her up in a house, got her a job in a Title Deed company I'd created down there. I think most people thought she was my wife.\"\n\n\"Anyway,\" he went on, \"she had the baby, but she began hemorrhaging... and she died with Selena in her arms. Of course I rightfully claimed Selena as my daughter, which she was. And I told Stephanie. She may be telling your wife right now that she had some issue that meant she could not have children, so she considered Selena a blessing and has been Selena's mother ever since.\"\n\n\"Just one moment, sir.\" I said. I got up, taking out my bug-detection device, and scanned the room. I found no bugs.\n\n\"Sorry about that, sir, but I'm paranoid and wanted to make sure we're not being heard.\" I said.\n\n\"You're not paranoid.\" said J.P. Goldman. \"Selena and I sweep our banks' offices for bugs once a week, and our houses as well. Edward does the same.\"\n\n\"Oh yes.\" said Edward. \"You see, Don... we know what you're going through, what you're trying to do, what you're trying to destroy. When Chief Griswold hired you, he secretly told us that you were our only hope of saving this Town. He was right.\"\n\n\"Yes, son.\" said J.P. Goldman. \"I didn't get to be what and who I am without knowing some things. I could see what Harold Malone was doing. I thought about leaving, especially after my wife passed on, but I knew that if I did that, Malone and his racist gang would gain control of the other banks in the area, and this Town would become as deeply infected as your home town of Apple Grove is right now.\"\n\nI must've looked startled when I heard that, as both older men nodded. \"Oh yes, we're aware. I don't know what you're going to do to solve that one, but at least you defeated Malone here. And Edward and I wanted you to know we have your back, Don. Not just because you saved Selena, though that showed us you alone are capable of defeating what is infecting our Town, but because we know you will save us all.\"\n\n\"Do you know who the Mastermind behind all of this is?\" I asked.\n\n\"Not for sure.\" said Goldman. \"We thought Henry Wargrave was the man, and to an extent he was. But even his death last summer has not stopped the creeping malevolence.\"\n\n\"There are several forces at work here.\" I said. \"One is the race group that Malone was part of. They're national, and they are indeed insidious, and I'm working with the FBI to kick them to the kerb. But there's another entity, a Spider that has spun a huge web, ensnaring this Town as Sheriff Spaulding has ensnared Apple Grove. This Spider is the Enemy we must destroy to liberate our home here.\"\n\n\"Do you know who he is?\" asked Steele.\"\n\n\"Not enough to tell you.\" I said, lying through my teeth. \"And it would be better if you don't know. Once he found out you knew, he'd kill your families, and then I'd find your dead bodies hung up at Ebenezer & King Food Industries like we found those two guys all those months ago. I'd rather have you having my back on the Town & County Council.\"\n\n\"We understand.\" said Steele. \"We'll help you any way we can. With us and Colby and Schoen, you have a firm block on the Council. Cook, Adams, and Carnes are solidly against you. McGhillie is generally on your side, as his son is one of your police officers, but he and Westboro are the swing votes.\"\n\nI nodded. \"I appreciate it. And I am going to need that help, when the days get very dark for me. By the way, do you remember Mr. Harkins, of the Second National Bank?\" I noticed the two men make eye contact with each other briefly.\n\n\"Yes, I knew him pretty well, before he disappeared.\" said Goldman.\n\n\"I knew him, though not all that well.\" said Steele. \"Why?\"\n\n\"Well, you mentioned that if J.P. Goldman Bank left Town, the Bad Boys would corrupt another one. I think that's what they were trying to do with Harkins, but he bugged out. I hope he's safe and alive, wherever he is. If you ever find out anything about him, please let me know. If he's still alive, he might be the only direct human witness to this Spider, that could put the bastard away forever.\"\n\n* * * * * * * * * * * * * * * *\n\nDriving home from the Heritage Cloisters to the Mountain Nest, I was silent. Laura noticed.\n\n\"Stephanie explained to me, and Selena,\" my wife said, \"about how Selena came to be conceived and then adopted. Selena had known the story, but not all the details.\"\n\n\"Yes, they told me the same story.\" I said, my voice seemingly far away.\n\n\"And it's affected you.\" said Laura. \"So share with your psychiatrist.\"\n\n\"I will, when we get home.\" I said. We drove in silence the rest of the way.\n\nAs we came into the den, my mom looked up at me over the book she was reading. \"It must have been a very interesting evening.\" Phyllis said knowingly.\n\n\"Mom, can you stay here with the kids for a minute, while Laura and I take the dog out?\" \n\n\"Uh, certainly, son.\" my mother said, her brow furrowing a bit. She'd expected me to tell her as well as Laura, but I collected the dog (easy enough, he was sitting right there looking up at me) and my wife and I went out back.\n\nWe sat down on the patio love seat as Bowser went to do his business. \"Okay, I guess it's safe enough out here, and this has to stay just between you and me.\"\n\n\"Sure.\" said Laura. \"What is it? I've rarely seen you so affected.\"\n\n\"This one is a doozy.\" I replied. \"You remember how I first reacted when I saw Dr. Steele at the Wellman's reception?\"\n\n\"Yes.\" Laura said.\n\n\"When I saw that,\" I said, \"I realized that Stephanie Steele was not Selena's birth mother, but Edward Steele was her birth father. Ergo, either Mr. Steele was previously married, or had had an affair which produced Selena. I happen to know the biographies of all of our esteemed Town & County Council members, and I knew that the Steeles were married before Selena made her way into the world. So at that time, I realized that whoever Selena's birth mother was... had to be at least part of the reason Angela Harlan went after Selena.\"\n\n\"I'm following you.\" said Laura.\n\n\"So... tonight Mr. Steele told me his side of the story, of the divorc\u00e9e with whom he had an affair, who gave birth to Selena. This woman died in childbirth, and Edward Steele raised Selena.\"\n\n\"Yes, Stephanie told us that.\" Laura said. \"She also told us that she and Edward had an honest, open relationship, like you and I have, and that she treasures Selena as her daughter as much as any mother ever could. They were both emotional for a few minutes, there.\"\n\n\"Yes.\" I replied. \"So, what I've connected... is that this woman that Steele had an affair with, whom he claims he didn't know who she was or is, must've had a tie-in with a man so full of hatred that he wanted that child, Selena, to be humiliated, imprisoned, and put to death. By doing that, he would inflict death upon the child of the woman who'd spurned him, and would cause great pain to the Steele's, especially Edward. And do I even need to say who that monstrously evil person is?\"\n\n\"No, you do not.\" Laura replied. \"Did you tell either Mr. Steele or Mr. Goldman?\"\n\n\"No.\" I said. \"If they don't know, then it's best they don't know... nor that Selena finds out until that bastard is sitting in my jails... and then I will take great pleasure letting both her and him know the truth...\"\n\nPart 8 - Orange Order, Inner Circle \n\n\"This is Bettina Wurtzburg, KXTC Channel Two News!\" yelled the lovely reporterette from outside University Hospital at 7:00am, Thursday, December 3d. \"Channel Two News has learned that University Hospital is seriously upgrading their security measures, after learning of potential threats!\"\n\nBettina went on: \"Sources tell Channel Two News that the Town & County Police Department learned of the possibility of thieves stealing drugs, tissues, donated organs, and even live babies from Hospitals. The Maternity Ward is now highly secure, and new procedures for the handling of prescription drugs as well as tissues and organs has been implemented. Neither the Hospital nor the TCPD would comment on what those security measures are.\"\n\n\"In other news,\" said Bettina, \"Channel Two News has learned that there will be a press conference this afternoon to announce that Coach Ted Thrasher has been hired as the Bulldogs's new head coach! Coach Thrasher will continue as Defensive Coordinator of the Wildcats in the Conference Title game, but there has been no announcement if he'll be asked to stay on for the National Title game if the Wildcats win...\"\n\n\"You got poached, buddy.\" I heard a voice behind me. It was my favorite Bulldog, one Captain Cindy Ross (Laura doesn't count; she just works there). Cindy was pouring coffee, and I made her re-fill my mug, as well.\n\n\"Yes, yes we did.\" I said. \"Not hard to understand why, either. Coach Thrasher will make the Bulldogs' football program a lot better.\"\n\n* * * * * * * * * * * * * * * *\n\nAt the morning 'Angels' meeting in my office, I said \"I am not even supposed to tell you this, but Captain Ross and I will go to lunch and not return until the end of the day, if at all.\"\n\n\"As Joseph Stalin said,\" said Tanya Perlman in the form of a quotation: \"It's not who votes, but who counts the votes that matters.\" \n\n\"Very true.\" I said with a grin. \"But I can assure you the count will be accurate and correct with the Voters' wishes. Anyway, we're not to be called unless something absolutely catastrophic happens. Put out the word that voting ends at noon today. Captain Ross and I will be picking up the ballot boxes of today's votes, if any, from the Precincts.\"\n\n* * * * * * * * * * * * * * * *\n\nAt 9:30am, the Special Advisor to the Police Commander on Data and Information Systems, that being one Mary Mahoney Milton, came to my office.\n\n\"Sir,\" she said as she sat down at my invitation, \"Miltie and I have come across some data transactions that we thought you should know about.\" She handed me a printout of some data.\n\n\"Hmmm, so Detective Nash and Lt. Perlman have both been accessing what we have on my dear sister Elizabeth.\" I said as I perused the data.\n\n\"Yes sir.\" said Mary. \"That in itself is not suspicious; after all, we just had a case where your sister's name came up. What interested me is that they accessed the data from their homes, not from here at Headquarters. When I showed it to Miltie, he saw something, and he followed it up.\" She handed me another piece of paper. \n\n\"By the way,\" she said. \"Miltie and I can go into their computers and see what they've been up to with that data, if you want us to.\"\n\n\"Oh.\" I said, looking at the data on the paper. \"Well, nothing I didn't know already. Tell you what, just let me know what they access, and don't fuck with their computers. Thanks for bringing me this.\" \n\nI then grinned slyly. \"By the way, it's going to be fun seeing you and Myron in standard uniform tomorrow.\"\n\n\"Ah, my one day I have to conform. But it's for a good cause.\" said Goth Girl Mary. \"So who's going to be inducted?\"\n\n\"I have no idea.\" I said. \"Voting doesn't end until noon. Got your ballot in?\"\n\n\"You betcha.\" Mary replied.\n\n* * * * * * * * * * * * * * * *\n\nJust before noon, Cindy and I left Headquarters. We had picked up the ballot box from my assistant Helena, maintaining two-man control. We also gave Helena a bouquet of roses for keeping the ballot boxes for us. She'd gone by each Precinct every day and collected ballots, and kept them all in her lockbox in her desk. A lot of work for the Cause, and I'd vote her into the Orange Order if she were an actual police officer.\n\nWe went to all the Precincts, collecting the remaining boxes. Of course there were a number of ballots; like everyone else, police officers seem to wait until the last minute to do important things. We took the time at each place to do a walk-through inspection... to put a little fear of Crowbars into the Precinct leaders. Then we headed for the Orange Order meeting place.\n\n\"Where do we meet?\" Cindy asked.\n\n\"City Hall.\" I said. \"So that the votes may be counted by the most powerful person in this County... which ain't us.\"\n\nWe went to City Hall, parking in the basement parking lot area. Going up to the 2nd floor, we went to the office of Mrs. Peabody, the Intendent. She led us to a meeting room nearby, in which 24 chairs were in a circle. Most of the Orange Order members were already present, among them Sergeant Rudistan, Sr. Patrolmen Morton and Hicks, Sergeant Janice Holloway, Captain Della Harlow, Corporal Ronnie Kirkpatrick, Sergeant Charles, Sergeant Briscoe... and no party would be complete without Chief Emeritus Griswold.\n\n\"There they are!\" Griswold growled happily. \"Give these guys crowbars and they think they can walk in any old time.\"\n\n\"The fact we have crowbars is why we're the Guardians of the Ballot Boxes.\" I replied sonorously. \"How are you doing, Chief?\"\n\n\"Wonderful!\" growled the Chief. \"I always love seeing all you young whippersnappers. Okay, it's time to count the votes. Mrs. Peabody, would you do the honors?\"\n\nWhat I had not known was that Mrs. Peabody and Corporal Kirkpatrick actually counted the ballots as we watched. The Orange Order medal is an official TCPD Police Medal, and she would make out the certifications for those to be inducted. The Council would rubber-stamp the awards at their next meeting.\n\nThe process was laborious. Each police officer in the TCPD had been given one ballot. On it was a stub with a number. The number was assigned to the police officer. When the ballots were turned in, that stub had to be attached and was checked against the list, ensuring each officer voted only once.\n\nNo one said anything. I was a bit surprised how tense everyone was in anticipation of seeing who would join our ranks. For me, I spent my time admiring Mrs. Peabody's luscious MILF body as she bent over the table, remembering how fine that ass of hers felt pressed against my groin during those times I fucked her from the rear. I then had to work to keep from getting a huge boner, and thus embarrassing myself.\n\n\"Okay, here are the results.\" said Mrs. Peabody. First, the members of the Inner Circle came over and examined the results. The Inner Circle was like the Board of Directors within the Orange Order, and handled all the 'stuff' that was needed to be done on the Order's behalf. Captain Harlow, Corporal Kirkpatrick, and Chief Emeritus Griswold were Inner Circle members.\n\nThe Inner Circle had its own medal, which replaced the Orange Order medal; recipients did not wear both at the same time. The Orange Order drape (and ribbon) was an orange field with lime green edges and a white stripe between the green and orange. The Inner Circle medal and ribbon were the same, except that a lime green stripe went right down the middle of the drape, that green stripe bordered in white. The Orange Order medal had a green colored lantern hanging from the drape by its handle; the Inner Circle medal had an orange lantern so hanging.\n\n\"Okay, everyone,\" said Corporal Kirkpatrick, \"here are the results. He named the two names. Everyone nodded.\n\n\"Do we accept these Officers as members of our Order?\" asked Kirkpatrick. \"All who agree, raise your hand.\" Every hand was raised.",
        "\"Okay, that's done.\" said Kirkpatrick. \"Now, for our other business. There is one vacancy for the Inner Circle this year, unfortunately only one. This will be Chief Griswold's last year actively working with the Inner Circle, so his replacement will be chosen next year. The Inner Circle has its own traditions and induction process, and that begins by asking everyone to stand, put the chairs aside, and stand in a circle. Would the Inner Circle members please stand in the center of the circle.\"\n\nWe all stood up in a circle. Corporal Kirkpatrick went behind a screen for a moment, then came out with what looked like a monk's robe and a lantern with orange-colored glass. He came inside the circle and walked around it in front of us, going around a full three times, then stopping...\n\n... in front of me, Your Iron Crowbar.\n\n\"Commander Troy,\" said Kirkpatrick formally, \"if you accept that responsibilities and rewards of being a member of the Orange Order Inner Circle, signify so by taking this lantern.\n\nI reached out and took the lantern. The Inner Circle members began applauding, followed by everyone else joining in.\n\n\"Okay, everyone who is not an Inner Circle member or inductee may leave. We will gather again tomorrow at 3:30 at the Main Conference Room of Police Headquarters.\" said Kirkpatrick. Everyone filed out, including Cindy, who gave me a 'thumbs up' as she went out the door.\n\n\"Congratulations, Commander.\" Mrs. Peabody said brightly. \"If everyone will excuse me, I'll go put in the paperwork for these medals.\" She left the room, giving a little flirtatious look back at me as she left. I had to work hard again to keep from being embarrassed by my 'little crowbar'. Fortunately, my attention was distracted.\n\n\"Here's what happens, Don.\" said Chief Griswold. \"We're all equals, here; no ranks, no insignia. We make decisions as a group. Kirkpatrick is our elected Chairman. You get to vote on that next year. As you know, there's an induction process; you will lead the new inductees on the Patrol of Honor tomorrow night. Are you physically up to that?\"\n\n\"Yes sir.\" I said.\n\n\"Eat a lot tonight anyway.\" said the Chief. \"Drink some beer, too. Corporal?\"\n\n\"Commander,\" said Ronnie Kirkpatrick, \"you'll wear your Orange Order medal tomorrow. You'll get your Inner Circle medal right before the inductees get theirs Saturday morning. You saw all that last year, so you know how it goes.\" I nodded.\n\n\"So the only other thing to do is for the ceremonial lighting of your lantern and donning your robes. You'll wear the robes when you lead the inductees tomorrow.\"\n\nWith that, they had me light the orange lantern. I was hoping the fire alarm wouldn't go off as I did. Then the lights to the room were turned off, and only the orange lantern gave off any light, casting the room in an eerie light. Then they had me put on the robes and the hood. Give me a scythe and I'm Death, the Destroyer of Worlds, I thought to myself. Oh, never mind, I have a crowbar already...\n\nThen the weird stuff started. The others started walking around me in a counterclockwise direction, chanting strange-sounding words. Sanskrit? I thought to myself. I'd learn those words, and what they meant, the next day.\n\n\"Kneel, Inductee of the Inner Circle.\" ordered Kirkpatrick. I knelt down on my knees, and everyone laid hands upon my head or shoulders. \"We take this Police Officer into our Inner Circle, praying that he receives and uses the Wisdom of the Prince of Orange and leaders of Police everywhere to guide our Order into the future.\"\n\nAnd that was basically it. The lights were turned on, I put out the lantern, which I was admonished to be sure to bring with me tomorrow when we set up the Junction Station Depot for the induction.\n\nPart 9 - The Gathering \n\n(Author's note: the Orange Order induction is described fully in 'Case of the Paper Trail, Ch. 3'.)\n\nYou know how the day starts: Bettina!\n\n\"This is Bettina Wurtzburg, KXTC Channel Two News!\" she shouted from in front of Police Headquarters at 7:00am, Friday December 4th. \"Today is the Town & County Police Force's Orange Order Day! Two Officers will be inducted into the honor fraternity tonight, as they follow a tradition going back four hundred years to the days of the Prince of Orange in Holland! As part of the tradition, all police officers today will be wearing standard dark blue uniforms, but lest any criminals think they can become active, the Police will be on full patrols as always! The Fire Department will have their honorary induction next weekend...\"\n\nWe were gathered in MCD, all of the MCD and Vice Detectives, as well as their Lieutenants, their Captain and her Commander. We all were wearing standard dark blue uniforms, the same colored neckties virtually invisible and tucked into the shirt. No MOV or Purple Order squares: only unadorned nametags, badges, \"T.C.P.D\" insignia on the collars, and ranks on the shoulder epaulets, or in the case of Sergeants and Corporals, sewn onto their shirt sleeves.\n\n\"Well, just look at this outstanding bunch of Officers!\" a voice growled behind me. In walked Chief Griswold, also wearing the standard uniform. His gold badge said \"Chief Emeritus\" and his ranks were eagles and arrows (like an Army Colonel), but bronzed instead of the normal silver.\n\n\"Hey Chief!\" I said. \"Let me get you a cup of coffee.\"\n\n\"See, Nash!\" said Griswold as I poured him a cup. \"This man still knows how to kiss ass properly!\" Everyone laughed, then Griswold said \"Damn fine job nailing that Stevens guy, Nash!\"\n\n\"Thank you, sir.\" said Nash. It was unusual seeing him in uniform at all, much less the standard one.\n\n\"I've heard good things about all of you, and the great job all of you are doing.\" said Griswold. \"And I'll tell ya, I miss you guys. Especially this redheaded stepchild here.\" he said, lightly punching my arm.\n\n\"So much for pouring you a cup of coffee.\" I shot back.\n\nEveryone laughed, then Cindy said \"We miss you too, Chief.\"\n\n\"They sure do.\" said another voice. Chief Moynahan came in, wearing the same standard uniform, and silver eagles on his shoulders. \"How are you, Grizz?\" he said, shaking the old Chief's hand warmly.\n\n\"Couldn't be better, Cav.\" said Griswold. \"You keeping these guys in line?\"\n\n\"Heck, my job is too easy.\" said Moynahan. \"I just let these guys run the store, they bring in the bad guys, and I sign off on applications for medals.\"\n\n\"What is that modesty line you always use, Chief Griswold?\" I said.\n\n\"Yeah, I'm excusing this blatant display of modesty.\" said Griswold. \"Cav, I've heard about some of the things you've added to processing crime scenes, and they're working well. I need to interview-- well, let's just say I'd like to talk to you about them.\" \n\n\"Sure.\" said Chief Moynahan. Griswold was looking over at me, to see if I'd caught his slip of the tongue. I had, but I watched the television set and pretended I didn't hear it.\n\n\"Chief Griswold,\" I said, \"last year we had Captain Charles talk about past police traditions. How about you give yours to us today?\" There was an acclaim, and for the next hour a very attentive audience, including me, learned a lot of new things about old-school crime fighting...\n\n* * * * * * * * * * * * * * * *\n\n\"I'm glad you don't wear ribbons for this.\" said Chief Moynahan as Chief Griswold and I sat in chairs in front of the desk in the Chief's office. \"I don't have any. They said I could wear my Midtown P.D. ribbons and medals, and we wear military ribbons, if we have them, on formal occasions. But I do like seeing you guys, and Captain Ross, wearing those red rectangles with the silver borders.\"\n\n\"Not today, Chief.\" I said. \"Everyone is equal, except for ranks of course.\"\n\n\"I like what you've done with this office.\" said Chief Griswold, looking around at the room he called 'home' for several years. \"Little bit brighter paint, more lights.\" \n\nI looked around. Chief Moynahan had finally brought in his stuff on December 1st, his first 'official' day as Chief. He'd put up a few framed military and police citations, pictures of his team in Midtown, which had him with Molly, Wes 'Coldiron' Masters, and Frank Soltis. There was also a framed flag of the Cavalry Troop he'd commanded. (Infantry has 'companies', Artillery has 'batteries', the Cavalry has 'troops'.)\n\nAnd on the other side, to his right and our left... whiteboards. Making a point, I observed.\n\n\"Okay, gentlemen,\" said Moynahan, sitting down behind the desk. \"Before this day begins, I need to discuss two things with the two of you. The first is the budget and how we are going to address the cuts that will befall us. We are actually fortunate that we already have some plans in motion. The Fire Department is going to get crushed.\"\n\n\"It won't be them that gets crushed.\" I said. \"It'll be the EMTs that take it in the gut and on the chin.\"\n\n\"Yes, that's true.\" said Chief Moynahan. \"The second item is Robert Brownlee. I went and visited him in the hospital. He is still a very sick man. And by that, Mr. Crowbar...\" he said, pointing his finger at me as I'd grinned at his words, \"I mean he's still physically in bad shape, not what you're thinking.\"\n\n\"Sorry, Chief.\" I said.\n\n\"Hell, don't apologize.\" said Chief Griswold. \"I thought the same damn thing myself.\"\n\n\"Yesss,\" said Moynahan. \"I have not had the same experiences as you two, but I can tell that he is a very unpleasant man. I am talking with the Sheriff about Mr. Brownlee not rejoining this Police Force, especially as Deputy Chief, no matter how well he re-cov-errrrssss.\"\n\nMy face probably showed that my heart was surging with hope at the moment...\n\n* * * * * * * * * * * * * * * *\n\nAt 3:30pm the members of the Orange Order gathered in the Main Conference Room. We put on our Orange Order medals over our right pockets, and proceeded to figure out our route to get our two Inductees. Once that was done, we started out.\n\nEvery police officer not on third shift was expected to be at Headquarters at 3:45pm. The Precinct buildings were nearly empty, only Auxiliary Police Officers were manning the Duty Desks and key functions at each of them. The County Jail was normally staffed by Sheriff Department personnel as well as TCPD officers; the Sheriff had extra men on duty to help us out. \n\nMost Officers went on into the auditorium and sat down or stood around and talked. Some found other places to congregate, including the breakrooms. The back breakroom near the Interrogation Rooms had been commandeered by the 'brass': the Precinct Captains and the various Lieutenants had gathered there.\n\nIt was at this room that the procession of Orange Order members stopped. Corporal Kirkpatrick, followed by me, went into the room.\n\n\"Captain Thompson,\" said Kirkpatrick, \"would you please come with us?\" Amongst acclaim and congratulations from his fellow officers, Precinct Captain Damien Thompson followed me into the hall, where he was placed in line behind Captain Harlow, who was the line leader.\n\nWe headed down the hallway to get our next Inductee. People were forbidden to follow us down the hallway, but they were looking out doors, wondering where we would stop... and who the second inductee would be.\n\nWe rounded a corner and stopped in front of a door. I looked at Captain Ross and said \"Go get the candidate.\"\n\n* * * * * * * * * * * * * * * *\n\nLieutenants Teresa Croyle and Tanya Perlman were in their offices. I'd advised them that this was a very good time to make a dent in their paperwork. Teresa was just about finished. Making huge busts like the Viscottis and the Beanstalk Gang was great, she thought to herself, but it sure generates a boatload of paperwork.\n\nShe sat back and happened to look up at the picture on the wall of her and her sister Alexis, the one the Commander had given her after learning of her personal torture every Christmas. She knew that after the Policeman's Ball, she'd be essentially restricted to Desk Duty. Well, it wasn't that bad, she could lead major operations if she needed to, but she knew the Commander would expect her to be at her desk or at home.\n\nShe was grateful to Commander Troy, who had saved her career, stood up for her when even Captain Malone was wobbly about it, then had brought her up with him. If staying on desk duty and not giving the Commander a problem at Christmas was the price she had to pay, she had no complaint to make. She knew that she still had a long way to go to prove to him, to everyone, to herself even, that she was worthy of his trust.\n\nAs she looked at the pictures, then at the flag that had covered her father's casket in it's triangular box, she felt a presence... almost as if Alexis were here with her. She'd seen visions of her sister before, actual visions, but this felt different... more supportive, just being there. She knew she had great friends like Cindy, and her 'friend with benefits' Todd, but she still wondered, as always, what it would've been... should've been like if Alexis were here.\n\nStop these recriminations! she thought to herself. It is what it is. And as soon as this Orange Order thing is overwith, she thought to herself, I'm going to go home and have a couple of shots, a few beers, and go to sleep. I'm tired...\n\nShe heard the door to her office open. Cindy came in and stood in front of the desk, a strange, serious look on her face. Corporal Kirkpatrick was in the doorway behind Cindy. Teresa could not believe what she heard next:\n\n\"Lieutenant Croyle,\" said Captain Ross solemnly, \"would you please come with us?\"\n\nTo be continued."
    ],
    "authorname": "WifeWatchman",
    "tags": [
        "mystery",
        "crime drama",
        "police drama"
    ],
    "category": "Non-Erotic",
    "url": "https://www.literotica.com/s/calm-before-the-storm-ch-02-1"
}
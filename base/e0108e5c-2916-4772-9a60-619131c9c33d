{
    "title": "Ian and Wes Pt. 03",
    "pages": [
        "I think I have a boyfriend.\n\nHoly shit.\n\nA week ago I was fully convinced that I had a snowflake's chance in hell of having any sexual (let alone romantic) encounters until college. Until AT LEAST college.\n\nOver the years, I had learned that relationships were for other people. I was the only gay kid in school as far as I knew.\n\nAnd even then, I only had about 1 leg out of the closet.\n\nMy mom reminded me as often as she could that straight boys were not to be messed with. That expressing interest in the wrong person was the surest way to get beaten to a pulp.\n\nSo I basically took that as, if a guy didn't have a flashing neon rainbow sign hanging above him, then he was off limits.\n\nCelibacy wasn't all bad. Based on the hookup horror stories from my friends, I may have even been better off.\n\nThen Wesley Houston moved back to town and turned my whole world upside down.\n\nOne look at him while back-to-school shopping with my mom and my entire life changed.\n\nI could spend all day describing his looks\u2014tall, dark, and handsome doesn't even begin to cover it. He's a football player, offensive line. His shoulders are broad, his body is ripped, his thighs are like sculpted tree trunks. And his cock... don't get me started...\n\nHis deep brown eyes electrify me when they sparkle with mischief\u2014even more when they harden with lust.\n\nBut the more time I spend with Wes, I realize I can't get enough of the little moments. Like when he's lost in thought. When he's concentrating on something but doesn't think I'm looking. When his eyebrows scrunch together and a small line forms in the middle of his forehead and he sticks his tongue between his teeth.\n\nOr when he's holding my hand. Or when I look up at him at the end of a soft kiss.\n\nHe's my strong, dominant, somewhat kinky alpha male. But he's not just a hot piece of ass\u2014he's also my friend.\n\nAnd he's frustratingly, maddeningly, stubborn as all hell.\n\nLike I said, I'd kinda gotten used to living my life mostly alone. Then he swoops in and fucks up all my plans.\n\nLike our first day at school after we'd had \"the talk\" about our relationship.\n\nI had my routine. I'd get to school, met up with the guys next to the front steps, and we'd shoot the shit until the first bell rang.\n\nApparently this wasn't what Wes had in mind.\n\nHe waltzed over to our group that morning and grabbed my hand. He sent a charming smile to my friends Jared, Kevin, and Steve before pulling my arm nearly out of the socket to drag me over to HIS group. Though we'd attended the same school for years, I'd never talked to most of the football players, cheerleaders, and other groupies that Wes normally hung out with. I wouldn't even know what to say to them.\n\nI glared at him as I realized where we were heading. Wes either didn't notice or pretended not to notice.\n\n\"Hey everybody! This is Ian. Ian, this is everybody.\" Wes shouted to the large group cheerfully.\n\nI saw a lot of confused expressions from the others. Their faces looked even more alarmed when Wes moved behind me and wrapped his arms around my waist.\n\n\"Uh. Hey,\" a few kids grunted at me. Most of them didn't seem to care, but I saw a few looks of disgust scattered through the group.\n\nPanic rose in my chest. My head felt dizzy and my legs felt like jelly.\n\nThe other kids resumed their conversations, but I couldn't get the judgmental stares out of my head. Even if they had known I'm gay, they didn't know that Wes and I were together. I imagined them all holding pitchforks, coming after me for \"turning\" their golden stud.\n\nIt was so fucking awkward and uncomfortable. The seconds ticked on and it became even more obvious that they were deliberately ignoring Wes and I. Especially considering his grand announcement of our presence.\n\nI couldn't handle this. I wasn't ready for this.\n\nMaybe if I'd had time to prepare. Maybe if he gave me a fucking clue that he was gonna pull something like this.\n\nI turned to Wes, pushing his arms off of me. A fire was burning in my belly.\n\nAnd for the first time, this fire he caused was not driven by lust.\n\n\"What the fuck do you think you're doing?!\" I whisper-shouted at him.\n\nHe looked amused. That made me even more pissed off. \"Excuse me,\" I mumbled to no one in particular as I shoved past Wes towards the school. I shoulder-checked him as forcefully as I could.\n\nHe probably didn't even notice. The big oaf.\n\nHe did follow me though, \"Ian. Ian, come on.\" I ignored him and continued walking. \"Ian, STOP!\" His loud voice boomed through the school yard, echoing off the walls.\n\nI turned on my heels, face reddening with anger. I pointed a finger into his chest, \"Look, I don't know who THE FUCK you think you are, but I'm not playing your games right now. I've got class.\" I turned back toward school and didn't dare look back.\n\nI ignored the series of text notifications that buzzed on my phone during my first few morning classes. Fuck him. He doesn't get to just pull shit like that without discussing it with me first.\n\nAnd what? I'm just supposed to forgive him over an \"I'm sorry\" text?\n\nDid he think he could just win me over that easily?\n\nOkay, okay. Deep down, I knew he COULD win me over just that easily. And if I was really honest with myself, that's why I wasn't checking my phone. I knew the second I saw his messages, I'd fall right back into his arms.\n\nI had to show him I'm not a pushover. I'd happily let him overpower me in the bedroom, but I still control my own life, he had to know that.\n\nI took a deep breath before entering AP Biology, my only class together with Wes. He was sitting in the seat next to mine, a change from his normal spot in the back row. I contemplated moving to a new spot just to keep punishing him.\n\nI looked at his face, brown eyes soft and full of concern. I knew dragging this out longer would punish me just as much as it punished him. I sighed and took my seat next to him.\n\n\"Hey,\" he said gently.\n\n\"Um. Hey,\" I muttered. I shuffled my textbook and notebook around, buying myself some time to think of something to say.\n\n\"So...\" Wes didn't wait for me to get my thoughts together before continuing, \"Too much too fast?\"\n\nI bit the inside of my cheek. I glanced up at him then looked back to my desk. \"It's... It's complicated, ok?\"\n\nHe nodded, his messy dark hair shaking at the movement. \"I get that. Look, I'm sorry. I thought you were, you know...\" he looked subtly over each shoulder, checking for eavesdroppers, before lowering his voice, \"Out.\"\n\nI pressed my lips together, still staring at my desk to avoid his intense gaze.\n\nMrs. Smith started class.\n\nI spent about 10% of class listening to the lecture. I brainstormed ways to explain myself to Wes for the other 90%. I tried to think of how to explain it to him. How to distill my thoughts and feelings formed after 18 years of existence into a few words. I really wanted him to understand.\n\nWhen lunch time came, I asked Wes if he would join me on a bench off to the side away from any prying eyes and ears.\n\nWell, that didn't work out so well. We definitely had a fair amount of onlookers. After all, Wes and I hanging out together, let alone dating, was still very hot gossip that day. And probably would continue to be big news for the rest of the week.\n\nRemind me never to become a celebrity. I have no clue how people deal with actual paparazzi. Stares from a few handfuls of teenagers were enough to make consider faking sick for the rest of the day.\n\nWes began eating his lunch quietly, clearly waiting for me to say whatever it was that I needed to say.\n\nMy mouth went dry.\n\n\"I... So... Look...\" Fuck. This was not off to a good start.\n\nHe just watched me attentively. No sign of judgment or rush.\n\nDammit, it'd be a lot easier to be mad at him if he wasn't so great.\n\nI took a deep breath and started again, \"I've never done this before. I'm not used to people making decisions for me.\" Ok, so far so good. That sounded reasonably intelligent. Keep it up, Ian. \"And, like, this morning I felt like you made a pretty big decision for me.\"\n\nHe opened his lips.\n\nI pressed on quickly before he could start, \"I'm not ashamed of us or anything. And I am out, kind of. I don't know.... It hasn't really come up too much, if that makes sense?\" Wes nodded. \"I just... I don't know, I wasn't prepared for all that.\"\n\nI glanced around at the faces whispering and staring at us.\n\n\"Fuck 'em,\" Wes said simply.\n\nI looked back at him confused. \"Yeah, that's pretty easy for you\u2014\"\n\n\"And for you to say, too, Ian.\" He looked positively convinced. He gestured around at the crowd with his thick arm speckled with dark hair. \"All these people here, how many of them do you think you'll remember in 5 years?\"\n\nI rolled my eyes at him.\n\nHe stared blankly at me and continued waiting for my response, his hand still extended towards the crowd of our peers.\n\nI blinked, considering his question. If I was honest.... \"Maybe a few? I guess.... Just my friends probably.\"\n\n\"Exactly!\" Wes exclaimed confidently. \"If they don't like me, or the shit that I do? Fuck 'em.\" He brushed the dark blond hair off of my forehead. \"I don't give a shit if they even remember me. But I want you to remember me.\" The breath left my chest. I was stunned into stillness by his words. \"I think I fucked up this morning. I'm sorry, Ian. I am. I'm sorry I put you in a position that made you uncomfortable. But I'm not sorry for being who I am, and for wanting to show people what you mean to me.\" I lifted my blue eyes to meet his. \"I'm never gonna be sorry for that.\"\n\nFuck 'em.\n\nI kissed him.\n\nI kissed him right there in front of everyone who was watching. He was right. He was absolutely right.\n\nFuck 'em.\n\nLife's too short.\n\nI kissed him, hopefully passing along all the words I couldn't say through the movement of my lips and tongue. Wes happily offered me replies of his own.\n\nI only came up for air when I heard a teacher yell, \"Alright, alright, break it up! Come on guys. You know this isn't the place.\"\n\nI blushed, but I noticed my cheeks didn't feel nearly as red as they would've been even a day ago. Wes grabbed my chin between his index finger and thumb and winked at me before pulling away to his side of the bench.\n\n\"So I guess that settles it then?\" He asked me before taking a big bite of his sandwich.\n\nI laughed, \"Yeah... I guess so.\"\n\n\"Nice.\" His mouth was full but his broad smile was obvious.\n\nAnd just like that, our first fight was behind us.\n\nLater that day I scored a goal at the soccer game while my boyfriend cheered for me from the bleachers.\n\nI felt on top of the fucking the world. Absolutely unstoppable.\n\nI was riding the positivity wave hard after the game. We all went out for burgers afterwards. It was me, Wes, Jared, Jared's girlfriend/friend/hookup/I-have-no-idea Lindsay, Steve, and Kevin.\n\nLindsay and Wes had gotten to know each other after sitting in the stands together during the game. She was actually starting to breathe normally around him. I was on the bench when he first arrived after football practice ended (of course I took my head out of the game to notice his arrival). Lindsay looked like she'd seen a ghost as he plopped down next to her and extended his hand in greeting.\n\nI chuckled. He still had that effect on me. And we'd had our cocks in each other's mouths.\n\nHis impact on people wasn't even fair.\n\nWes caught the look in my eye and casually rubbed his elbow against mine.\n\nWell, I thought it was casual. Kevin read a little more into it, \"You know, you should probably wait to be out of public before you start fucking this time.\" Everyone cracked up, but Wes's laugh rang out the loudest.\n\nSteve chimed in, \"Ah, but that isn't really their style, remember? Didn't you see that little show at lunch today?!\"\n\nI swear Wes actually puffed his chest out the slightest bit. Of course he was proud.\n\nLindsay snorted, \"Yeah, for real. That was crazy... Like, literally, the last thing anyone saw coming. The absolutely last.\" She laughed again loudly.\n\n\"Why's that?\" Wes cocked an eyebrow at her. He wasn't laughing anymore.\n\nLindsay's face fell as she noticed Wes's tone had changed, \"Umm... I just mean... you know...\"\n\n\"Clearly I don't know. Why don't you explain it to me. Why is Ian and I being together so crazy?\" Wes pressed, his deep voice dripping with authority.\n\nJared glanced quickly between his girlfriend and Wes. I swear he broke out into a sweat. He looked at me, urging me to step in and save the situation.\n\n\"'Cause I'm obviously too good for you. It's basically an act of charity for me to even be seen with you right now.\" I slapped Wes on the back with one hand and grabbed onto his thigh under the table with the other. Luckily my comment got a huge laugh and broke the tension.\n\nI was not offended in the least by Lindsay's comment. I know she didn't mean it as a real insult. I also know she wasn't expecting that kind of reaction out of Wes.\n\nBut I gotta say, seeing Wes get riled up to defend my honor got me really hot and bothered.\n\nSuddenly I was ready for my big strong caveman to throw me over his shoulder, take me home, and fuck me.\n\nAlas, we were still in a restaurant surrounded by my friends.\n\nA guy can dream.\n\nApparently Wes was picking up what I was putting down because he grabbed my hand that was on his thigh and moved it up, closer to his crotch. He was wearing roomy basketball shorts that left little to the imagination. I chanced a quick peek down at his lap before inconspicuously reaching for another sip of my drink.\n\nYep, Wes was definitely aroused.\n\nI extended a finger and ran a slow stroke along the curve of one of his big balls.\n\nMy body was close enough to his that I both heard and felt the deep rumble that rippled from his chest.\n\nSteve and Jared were rehashing the game earlier when I enveloped my boyfriend's clothed dick in my hand.\n\nWes choked on his french fry.\n\nA bunch of concerned looked came his way and he assured the group that he was fine, and the conversation continued.\n\n\"Yeah but did you see that one forward? His ball handling was garbage!\" Steve insisted.\n\nI took the inspiration and returned to handling Wes's balls. He seemed to pick up on the invisible double entendre and chuckled.\n\nSteve pointed at Wes, \"See, he saw it too! Anyone could see that!\" I laughed under my breath at Steve's ignorance to what was happening under the table.\n\n\"Yeah, but it's not always about being aggressive and attacking the ball non-stop,\" Jared argued.\n\nI squeezed Wes's balls in my grip the slightest bit. I felt the larger man's body tense.\n\n\"You gotta have finesse,\" Jared continued. I released Wes's nuts and pulled his cock in a long stroke.\n\n\"Yeah, yeah, I hear you,\" Steve nodded. \"But some people just suck.\"\n\nWes raised his eyebrow at me, daring me to act on THIS double entendre. I licked my lips. His dark eyes tracked my tongue as it swiped across my bottom lip. I heard what sounded like a growl.\n\nI slowly pulled my hand from his package, sure that I was tempting fate far too much.\n\nWes leaned in close and with that unbearably sexy deep voice whispered in my ear, \"I don't tolerate starting something you can't finish, Ian.\"\n\nI ran a hand through my hair and saw his pupils widen the slightest bit. He loved playing with my hair. My voice was husky as I whispered back to him, \"Who said I don't intend to finish?\"\n\nHe held my gaze for a minute or two before nodding slightly and returning back to the conversation.\n\nThe group stayed at the restaurant a little while longer. I made it a point to watch Jared and Lindsay\u2014yeah, they're definitely boyfriend/girlfriend. At least that question was answered. Towards the end, they were almost as bad as Wes and I with the public displays of affection.\n\nAlmost.\n\nI hopped in Wes's Jeep and buckled my seatbelt. He was surprisingly silent. It was unnerving.\n\nHe drove the opposite direction of either of our houses. But he didn't explain why. He didn't say anything at all. My unease was growing quickly.\n\n\"Um... is everything okay?\" I asked after a while, unable to hold in the question any longer.\n\nHis large hands gripped the steering wheel, knuckles turning white. He inhaled deeply. His eyes still on the road, he responded after a beat, \"I've been trying to fight the urge to throw you down and fuck you since your little game at the restaurant.\"\n\nI gulped.\n\nWell whatever I expected him to say, it certainly wasn't that.\n\nBut it suddenly hit me how badly I wanted it. Wanted him to throw me down. Wanted his dick sliding into me. Taking me.\n\nMy legs were shaking.\n\nWes brought the Jeep to a halt. I looked out the window and recognized that we were at a local park. The sun had set, there were no other people there. I closed my eyes and took a deep breath. When I turned back to look at him, I'm certain he could see the fire that was growing within me. The need that was growing.\n\nHe grunted at me and licked his lips, \"I'm not gonna fuck you in the Jeep.\" I must've looked devastated. \"At least not right now. But someday,\" His teeth gleamed as he shot me that charming smile.\n\nWell now I'm confused.\n\n\"Baby,\" He started. I melted. He didn't have to say another word. I was putty in his hands at one small endearment.\n\nWhat had I been saying earlier about showing him that I can hold my own?\n\nHe continued, \"Your first time is not gonna be rushed in the backseat. It'll be better than that, I'll make damn sure of it.\"\n\nI smiled at him, touched that he wanted to make it special for me. I almost told him don't bother, I was so ready for him right then and there.\n\nBut I've waited this long to lose my virginity, what's a little longer?\n\nI lowered my chin and looked up at him through my eyelashes, \"So what did you have in mind?\"\n\nHe chuckled and rubbed his rough stubble, \"I'm glad you asked. Now, I heard somewhere about someone not starting something they can't finish?\" He leaned back against the door, turning his legs and lap towards me.\n\nThe bulge in his lap was obscene. God, being that fucking sexy should be illegal. What chance in hell would I ever have to resist him?\n\nI licked my lips and continued to stare.\n\n\"See something you like?\" He asked cockily. \"Come and get it then.\"\n\nHe didn't have to tell me twice. I unbuckled my seatbelt and leaned over to his lap in record time. I opened my mouth, breathing heavily on his length. My hot breath penetrated the fabric of his shorts. He raised his arms and crossed his fingers behind his head, letting me do my work.\n\nThankfully he did move his hips up to allow me to pull his shorts down. I don't think I could've managed that on my own.\n\nI wrapped my lips around his cock, bringing his length home. My tongue lovingly caressed all sides of the shaft. I licked him like I was memorizing every inch. Every curve, that vein... I circled the head, sucking on the mushroom tip. His nectar was sweet on my tongue. I straightened my tongue and pointed it at the hole at the end of his cock.\n\nThat's when I felt the hands in my hair and all was finally right with the world.\n\nHe gripped roughly. \"That's it, Ian. Ah fuck. Now suck on my balls!\"\n\nI huffed before moving to his suggested destination, making a show of the request being a big inconvenience (as if we both didn't know full well that I'd end up with my mouth on his balls eventually). But fine, if that's what my man wants, I am all too happy to deliver.\n\nI lapped the heavy sacs. The smell was potent. It going me going even more.\n\n\"Yeah, you like that, don't you? You like sticking your nose in my balls? You like my big cock resting on your face?\" He tugged on my hair harder.\n\n\"Yesssss, you know I do,\" I moaned as I ran my tongue around one of the globes of his balls before sucking it into my mouth. I let it fall out then took his entire length in my mouth.",
        "I admit, I wasn't fully prepared and I choked a little.\n\nWes laughed throatily, \"Oh, is this dick too big for you? Can't handle it after all, huh?\" He looked down at me with a look of smug cockiness.\n\nI opened my throat and gave it another shot. This time I felt the tip slip down the back. I held my breath and tried to keep my cool as Wes's mouth opened in a silent \"O\".\n\nI gave him another long suck before letting it pop out of my mouth. I rubbed the tip of his across my lips and looked up at him, unadulterated naughtiness of my face, \"You were saying? Remind me, what can't I handle?\"\n\nHe was breathing heavily. He gripped the back of my head and forced his dick back into his mouth. I welcomed it. I licked and sucked and swirled.\n\n\"That's it, cocksucker.\"\n\nThere it is.\n\nI moaned on his dick and brought my hands up to his shaft to join my mouth, working him every which way I knew how.\n\n\"Yeah, you like it when I feed you this cock? Taking this dick so good? You're such a good cocksucker. Made to suck this cock. Are you my cocksucker?\"\n\nI continued to fuck my face on his shaft. He grabbed my hair harder and pulled my head off his lap.\n\n\"I SAID,\" he asked roughly, \"Are you my cocksucker?\"\n\nI bit my lip and moaned out, \"Ungh, fuck yeah.\"\n\n\"That's right. Now get back to sucking this dick. I'm getting close, Ian. I better not see a single drop spilled.\" He looked deep in my eyes, raw power radiating.\n\n\"Yes, sir.\" I whispered.\n\nHe closed his eyes and pushed my head back down onto him. He wasn't lying about being close, less than a minute after I returned to his cock I felt his balls tighten and he started to spasm in my mouth, my name on his lips. His cream shot down my throat in spurts. I had to really concentrate to fulfill his command not to waste his precious cum.\n\nI swallowed it all. Every single delicious drop.\n\nThe whole event had me really riled up, especially considering I hadn't touched my own dick at all.\n\nAfter catching his breath, he reached over to unzip my jeans.\n\nHe brought my dick out of its enclosure and circled it with his large palms. His hands were warm, but slightly rough. The very slight friction felt oddly amazing.\n\n\"Oh, does someone want to cum?\" He taunted.\n\n\"Fuck yes, please.\" I begged him.\n\nHe raised a mischievous eyebrow at me, \"Do you think you deserve it?\"\n\nI nodded profusely, \"Yes, please. Please.\" I repeated the words mindlessly.\n\nHe leaned in, lips close to mine and whispered, \"You're so fucking beautiful when you beg.\"\n\nI shivered. \"Please, Wes. Please let me cum. I've been such a good cocksucker for you.\"\n\nHis hands on my dick picked up speed, forcing me to close my eyes to focus on the sensation. \"I suppose you're right about that... You DID swallow all of my cum.... How was it by the way?\" His hands paused abruptly, awaiting my response.\n\nI whined pathetically, \"Ungh it was so fucking good. Tastes so good. I love your cum. So good.\" The words came out in a rush, hoping he'd get back to rubbing my cock.\n\nThe hands on my dick mercifully resumed their stroking. Wes kissed me hard, sticking his tongue in my mouth roughly. He pulled back, whispering against my lips, \"Mmm. You're such a good boy.\"\n\nI gasped as his head swiftly accepted my hard length between his lips. A few more sucks and licks and I blew my load into his mouth with a roar.\n\nWes licked all over my dick and balls as the aftershocks ran through me. He pulled my shirt up to kiss up my abs on his way back to my mouth.\n\nI think I was still catching my breath by the time we pulled up to my house.\n\nBut I quickly lost my breath again as we exchanged good night kisses that turned into a good night makeout session.\n\nI was just about ready for round 2 in my driveway when he said he had to go. He told me that he had plans with his parents for the next couple days so we wouldn't be able to hang out after school and practice.\n\nI tried to hide my disappointment as I gave him an extra-long kiss. As I waved him goodbye from my driveway, I realized I already missed him.\n\n***\n\nAfter that night, our schedules got really out of sync. Between friends, sports, family, and school, we were each pretty busy. We only had time for rushed making out or quick handjobs. Not that I was complaining. I'd take whatever I could get.\n\nWe texted constantly.\n\nOur physical cooling-off period was probably for the best. With the overwhelming urge to hookup being forced to take a backseat, Wes and I talked. And talked. And talked.\n\nHe's a big history nerd, did you know that?\n\nI hate history so much\u2014he completely loves it. I remember his face one day when he was telling me a story about one of the Treaties of Versailles (\"Yes, there's more than one!\" He had insisted... I'm still not convinced). His face was rapt with delight, absolutely consumed by boyish glee.\n\nStill, there's only one Battle of the Bulge I care to discuss.\n\nYeah, Wes didn't enjoy that pun so much either.\n\nHe talks a lot about studying abroad in Europe for a semester or two in college. Something about seeing all the old buildings and churches firsthand really calls to him. He said he wants to take me to Scotland to trace my ancestry.\n\nI try to avoid thinking too much about the fact that he's making plans for us years down the road. I don't succeed at that.\n\nI really want to go to Scotland with him.\n\nI want to go everywhere with him.\n\nWes says he wants to be a teacher. With the enthusiasm for the subject that practically radiates off of him, I think he'd be awesome at it. I really think he has enough natural charisma to do just about anything.\n\nSometimes I just stare at him.\n\nI was doing just that one day at lunch when he stopped his train of thought abruptly, \"Hey what do you think about next Saturday?\"\n\nI tried to picture my schedule, but I couldn't think of anything. \"I should be free, why? What do you want to do?\"\n\n\"Ian. It's the homecoming dance.\" He raised an eyebrow at me, \"What do you say?\"\n\nMy jaw dropped a little. I was getting much more comfortable being publicly affectionate with him after Wes's many reminders that most people don't care, and the ones that do care don't matter. I wasn't concerned about having a male date in public. I was just surprised that Wes actually wanted to go to our silly school dance. \"Uhh... Yeah, I mean, if that's what you want to do?\" I replied, as non-committal as possible.\n\n\"C'mon Ian. It's your senior year. All the guys are going. I figured you'd want to be a part of it?\" The excited look in his eye gave me the nagging feeling that Wes really wanted to go, too, even if he was insinuating that we'd be going for me.\n\nHe'd had a relatively rough ride with high school, never being at the same school 2 years in a row. I doubt he'd even let himself put down roots enough to really enjoy all the classic high school traditions.\n\nI smiled at him, \"Ok, let's do it.\" He smiled back broadly before leaning in for a quick kiss. I giggled, \"So, should we get matching outfits or what?\"\n\n\"Hell yeah. I want you to have the full experience!\" He insisted excitedly.\n\nYeah, he definitely wanted to go. Like really badly.\n\nGod, he's cute.\n\nOver the next few days, he planned everything\u2014he coordinated the colors of our rental tuxedos (baby blue, \"To bring out your eyes,\" he said), organized the limo with Jared, Steve, and Kevin, and even worked out time for pictures with his parents and my mom.\n\nBy the time the day of the dance rolled around, I barely had to do anything other than get myself into my tux.\n\nMy mom was an emotional mess. She cried like she was sending me off to war instead of the high school gym full of sweaty, horny teenagers.\n\n\"I just never thought I'd get to have this moment for your big dance!\" She blubbered as Wes's parents' SUV rolled down the street towards our house.\n\n\"Mom, come on! This isn't even prom!\" I tried to explain it to her for the four millionth time.\n\n\"Hush and let me have this!\" She said sharply, trying desperately (completely in vain, by the way) to save her mascara before Wes and his parents came any closer.\n\n\"OH, Frank, Claudia! Hello!!\" She called out, instantly switching to her uber-friendly public persona. A smile was plastered on her face and she made a big show of waving.\n\nI had to hand it to her, she could've fooled me.\n\nWes's parents walked over and said hello to my mom and I, but honestly I couldn't give a shit about anything in the world at that moment. My boyfriend was walking toward me.\n\nOkay, so, the man looks good enough to eat in basketball shorts. In a well-fitted tux, dark hair parted and slicked back, five-o-clock shadow perfectly trimmed up\u2014my man was sin incarnate.\n\nI think some actual drool fell from my lips.\n\nHe chuckled as he approached me, one hand in his pocket, one behind his back. He stood close, towering over me. The manly scent of his cologne overpowered my nostrils.\n\nI had to actively stop myself from sinking to me knees to take his cock into my mouth.\n\n\"Hello to you, too.\" He lifted my chin and placed a kiss on my lips, \"You look so fucking good.\" He whispered against me.\n\nI choked and stared at him, \"Have you seen yourself?! Damn...\" I ran my palm down one of his lapels, feeling the firm muscles of his chest.\n\nMy mom cleared her throat, \"Oh Wesley, dear! Don't you look....\" God, she still gets flustered around him. \"Wow, what a lovely couple!\" Yeah, nice save, Mom.\n\nWes was over our house one day when I finally confessed the truth of our relationship to my mom. I thought I was gonna need to go get an AED machine. The woman legit fell out of her chair.\n\nI'm still convinced she was mostly just disappointed that she didn't have a shot with him anymore.\n\nI can't blame her. He's fucking hot.\n\nI remember meeting the Houstons was much less eventful. Wes's parents both worked a lot. They struck me as the type of people who just didn't have the mental energy to dedicate to getting worked up about much of anything. Mr. Houston (\"Frank, please!\"... Yeah, no. Not gonna happen) shook my hand and talked to me about sports for a bit. Mrs. Houston had all of Wes's charm (or he had hers, I guess)\u2014she brought me in for a warm hug and gave me a standing invitation to dinner or other family events.\n\nMy mom was jumping out of her skin watching Wes pin on me the boutonniere that he'd had hidden behind his back. We had matching white roses. I had to admit, we did look pretty sharp together.\n\nAt my mom's insistence, we took approximately ten thousand photos in my front yard. Though he'd probably never admit it, Wes was in his glory. His eyes gleamed as we took the classic \"prom pose\" photos, his arms wrapped around my waist.\n\nMercifully, the limo finally pulled up. My friends\u2014our friends\u2014were already inside with their dates. Wes and I were the last to be picked up.\n\nMy mom pulled me in for one last hug, tears once again present in her big blue eyes, \"I love you so much, Ian. Have fun. I'll see you tomorrow.\"\n\n\"I love you too, Mom. Really. Thanks for... for everything.\" Damn, was someone cutting onions in here? I felt a prick of tears in my own eyes.\n\nI rushed into the limo after waving goodbye to the Houstons, eager to run away from the wave of emotions threatening to overpower me.\n\nWes slid into the limo beside me, confidently placing my hand in his.\n\nI heard the loud whoops and hollers of my friends. Everyone cleaned up nicely. Jared wore a red vest to match Lindsay's bright red strapless gown. She looked great, even if she didn't do anything for me that way. Lindsay had quickly become a member of our group just like Wes. Those two were like brothers-in-arms, trying to understand and make sense of years' worth of inside jokes and stories among Jared, Kevin, Steve, and I. The two \"outsiders\" were good sports though, I had to hand it to both of them.\n\nSteve had a very quiet sophomore with him (quick the scandal, I hear, for a senior to take a sophomore). Oh well, that just means less eyes on Wes and I as the token odd couple. Kevin was with one of the cheerleaders, a love connection that Wes helped facilitate once he started to integrate more into our group.\n\nI was brimming with joy.\n\nI could barely contain myself.\n\nI turned to Wes and gripped his hands tighter. I brought his fingers to my lips and placed a soft kiss. I looked at him, the wave of emotions really starting to hit me, \"Thank you for making this all happen. This is awesome.\"\n\nWes leaned in and kissed me passionately, \"It's my pleasure.\"\n\nI stuck my tongue down his throat and didn't come up for air til the wolf whistles filled the limo.\n\nI pulled back and caught my breath. Damn, I could really get lost in him.\n\n\"So...\" I started, \"My mom said 'See you tomorrow'.... Any idea what that's about?\" I eyed him playfully.\n\nWes looked at me with a crooked smile, \"I shoulda known she can't keep a secret.\" We both laughed, \"Yeah, I got us a hotel room... Well, as far as our parents know, I got us TWO hotel rooms; one for each of us,\" He chuckled softly, \"It was supposed to be a surprise....\"\n\nI kissed him again.\n\nBest. Night. Ever.\n\nAnd it had barely started.\n\nThe decorating committee had really outdone themselves. The theme of the dance was Classic Love Stories. There were pictures of Beauty and the Beast, Romeo and Juliet, even Bonnie and Clyde (not sure how the faculty supervisor let that one slide through). There were large bouquets of flowers everywhere. There was even an ice sculpture of Cupid.\n\nIt was cheesy, but it was perfect. I couldn't help but smile from ear-to-ear.\n\nWe got our pictures taken yet again at the entryway. We got one of just the couples, then a photo with all 8 of us. As the photographer clicked the button to snap the photo, I realized that this was a memory I'd have forever. I was sure of it. I wished hard that I could stop time and just bask in that moment.\n\nWes and I danced our hearts out. I never, ever, in a million years, would've guessed that I'd attend the homecoming dance, let alone be out in the middle of the dancefloor breaking it down with my hot piece of ass boyfriend.\n\nWe were by no means the best dancers out there. In fact, I'm pretty sure we looked like complete fools. But I can bet no one was having as much fun as we were.\n\nWes's mantra about prying eyes echoed in my ears: \"Fuck 'em.\"\n\nWhen a slow song came on, Wes grabbed my hips aggressively and brought me in close. We pressed our bodies against each other, relishing the contact. I gripped his thick biceps. He slipped a strong thigh between my legs, applying slight pressure under my balls.\n\nHe swiped his hand through my hair quickly. My eyes immediately snapped to his. Hair pulling was kind of his thing-- well, OUR thing, let's be honest-- during our... extra-curricular activities. When his heavy hand touched my dark blond hair, it sent a shockwave straight to my dick. I suspect it had the same effect on him, too.\n\nWith all the close contact, I was just about bursting at the seams by the time the lights came on at the end of the night.\n\nWe were the last to enter the limo on the way to the dance, but we were the first out on the way back. The guys gave me fist bumps as Wes and I climbed our way over the others to exit the limo.\n\nKevin called out just before I closed the door, \"Remember, don't do anything I wouldn't do!\" I laughed, remembering he'd yelled the exact same phrase that time that the guys had blocked off the locker room showers for Wes and I.\n\nA pleasant shiver ran up my spine at the memory.\n\nWes tangled his fingers in mine and led me confidently through the lobby, head held high. He checked us in, never taking his hand from mine. The front desk clerk gave us a knowing smile as he handed us our room keys, his eyes lingering on Wes's broad chest just a little too long. I inched just a bit closer to Wes\u2014this hunk was MINE.\n\nWes wrapped his arm around my waist and guided me to the elevator. Once the doors were closed, he slapped my ass hard. I turned to him quickly, \"What was that for?\" I asked, breathless at the sensation.\n\n\"Because I wanted to,\" He replied cockily.\n\nI groaned.\n\nThe hotel room housed a single large king bed. I realized as I looked down at the bed that this was it. Tonight's the night.\n\nThe night I'd finally lose my virginity.\n\nWes came up behind me and rubbed my shoulders. He seemed to take the tension for hesitation and whispered in my ear, \"Whatever you say goes. We only go as far as you want to.\"\n\nI turned back to him, blushing. \"It's... Well, thank you, um, for saying that. It's... it's just that I didn't bring anything....\"\n\nWes chuckled and gestured to a duffle bag that I'd overlooked in the corner of the room. Apparently he'd arranged for his mom to drop off \"just a change of clothes and some essentials\" while we were at the dance.\n\nIn this particular instance, \"some essentials\" happened to include condoms, lube, and an enema kit.\n\nSomehow I don't think his mom realized what she'd done. That was just fine with me.\n\nI grabbed the enema kit and ran to the bathroom. I was already halfway into the task when I heard a knock, \"Do you know how to use that?\" He sounded concerned.\n\nI laughed, \"This might be my first time, but this isn't my first rodeo with things in my ass, man,\" I called back to him.\n\nWes's laughter boomed from the other side of the door, \"Well alright then! I'll leave you to it.\"\n\nOnce that was all taken care of, I walked back into the room to Wes laying naked in the middle of the bed, legs spread, arms crossed behind his head. Ungh, his body was ripped. Every bump and curve of his abs was visible in the light of the bedside lamp. Soft black hair ran down his legs and up to the patch at his crotch.\n\nHe was already hard for me.\n\nI licked my lips. He gestured me over to him with a nod of his head.\n\nHe didn't have to tell me twice.\n\nI climbed on the bed onto all fours and took his cock into my mouth. It was somehow different this time, knowing that my end goal wasn't to get him to cum down my throat. I just wanted to worship his cock and pay it the respect it deserves before he'd stick it in me and give me what I'd been waiting for.\n\nHe leaned forward and I gasped as I felt his hand on my ass. His fingers tickled my cheeks, teasing me by going closer to my hole, then backing away.\n\nI heard, then felt, the loud SLAP of his hand on my ass. I yelped around his dick in my mouth.\n\n\"Mmmm,\" he groaned, then circled my rosebud with his fingers. I heard the snap of a lid, then his fingers returned, this time much more slippery than before.\n\nHe stuck a thick finger into me up to the first knuckle.\n\n\"MMhhmm,\" I moaned on his dick. I focused on relaxing, willing myself to open for him.\n\nHe must've noticed because his deep voice rumbled, \"Such a good boy, already ready for me, huh?\"\n\nI allowed his dick to slip from my mouth and rolled onto my side, giving him better access. \"I've been ready for you since I first saw you,\" I breathed.\n\n\"Is that right? You wanted me to take you in the department store? That can be arranged... they have dressing rooms, you know.\" He smiled mischievously down at me.\n\nI laughed, but as it trailed off, I looked up at him adoringly, \"Whatever you want.\"\n\nHe closed his eyes and whispered, \"Fuck, baby. The things you do to me.\"\n\nI flipped onto my back and opened my thighs wide, \"Why don't you show me?\" I raised an eyebrow at him, daring him.\n\nHe growled and stuck another finger in my ass, scissoring his fingers. Precum leaked from my dick. I'm not sure how, but it felt different and so much better when he prepared my hole than when I did it alone in my bedroom. He had the magic touch.\n\nWes stopped his ministrations to slide the condom onto his thick prick. He applied lube all over his cock then looked up at me, member swollen with a reddening tip, \"You sure you're ready for me?\"",
        "\"Please fuck me, Wes.\" I sobbed. There was nothing in the world I wanted more than this man. He was everything I had ever wanted. He was sexy, but he had substance. I knew I could count on him. I knew he would never intentionally hurt me.\n\nI knew that I...\n\nFuck it.\n\nI knew that I love him.\n\nI did.\n\nI absolutely, 100% love him.\n\nThe realization hit me like a ton of bricks just as Wes inserted the tip of his dick into my ass. I sucked in a breath, forcing myself to relax.\n\nWes didn't move. He simply stared down at me, watching my face and my reaction. When I finally looked up at him with sureness in my eyes and nodding, he planted a kiss on my lips. His mouth ventured from my mouth to my jaw, placing wet kisses in a trail over to my neck. I knew he was marking my neck again with a hickey for all to see.\n\n\"Ungh, yeah, Wes. Make me yours!\" I called to him, egging him on. He sucked harder on the flesh. His teeth grazed the sensitive skin beneath my ear when his cock finally slipped further into me.\n\nI gasped, feeling the sweet, sweet fullness. It was a tight fit to be sure, but it was nothing I couldn't handle.\n\nWes continued sucking and licking at my ear. I finally felt his balls touch my ass and realized that I'd taken him all the way to the hilt. I reached my arms around his strong body and held onto him.\n\nHe began pumping in and out, slowly at first, then gradually picking up speed.\n\nHe let go of my ear and gripped my hair, forcing me to look at his eyes. They were wild with lust and power and something else I didn't have words for. Something deeper. I was completely consumed by him. I couldn't think of anything other than the feeling of our bodies slamming together.\n\nHe stared deep into my eyes as he continued to pound my hole. \"Ian. You're mine. Fuck! You're mine.\" He repeated the words over and over as if it were a prayer. I could only nod, completely lost for any words that could come close to the emotion racing through me.\n\nHe adjusted the angle of his hips and I jumped beneath him. He was prodding my prostate with his cockhead. Repeatedly. Pounding it. Slamming his hard cock into me. Filling me completely. Giving me all of himself. In and out. In and out. Over. And over. Forcing his way deeper and deeper inside me.\n\n\"I... I.... I need to touch my dick!\" I screamed as he continued the assault on my inner button.\n\n\"Do it, baby! Fuck, stroke yourself, Ian. Work that dick like I'm working that ass!\" He instructed me fiercely.\n\nI reached down and after just a few strokes of my dick in between our grinding, sweaty bodies, I felt the orgasm start to build within me.\n\n\"I can't last, Wes! Fuck baby, I'm so close!\"\n\nWes sped up, well on the way to his own release. \"Yes, that's it, Ian. I'm almost there!\"\n\nA scream echoed throughout the room. I'm honestly not sure if it came from me or Wes, or maybe both of us. Cum flew from my dick, splashing our bodies. My ass gripped him tightly with the force of my orgasm. Wes pumped his own cum into the condom deep within my ass.\n\nHe rolled to his side next to me, both of us breathing heavily, attempting to come down from that incredible high. He grabbed my hand and brought it to his chest. I looked at him, skin beaded with sweat, hair soaking, cheeks flushed.\n\nI couldn't hold it in for another second.\n\nI couldn't help myself.\n\n\"I love you,\" I said quickly in between pants, staring at his dark brown eyes.\n\nHe smiled at me tenderly and kissed my fingers. He rolled closer to me and took my chin in his hand. He kissed me deeply, sensually. His tongue gently parted my lips, working its way inside. He caressed my tongue with his, exploring my mouth as if for the first time. He ran a hand through my hair then separated from me with a sigh.\n\n\"And I love you,\" he said, resting his forehead against mine, \"So fucking much.\"\n\nI wrapped my arms around him and reveled in the embrace of my man.\n\nAnd that's the story of how I met and lost my virginity to the love of my life. And to this day, he's still everything I've ever wanted.\n\nTHE END."
    ],
    "authorname": "Gar28",
    "tags": [
        "blowjob",
        "first love",
        "first time",
        "friends",
        "gay drama",
        "gay romance",
        "high school",
        "drama",
        "18 year old"
    ],
    "category": "Gay Male",
    "url": "https://www.literotica.com/s/ian-and-wes-pt-03"
}
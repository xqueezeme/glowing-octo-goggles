{
    "title": "There and Back Again Ch. 138",
    "pages": [
        "A/N:\n\nSomeone has been posting anonymous threats, claiming I've been manipulating the voting system on Literotica. I promise I haven't -- I'm not that tech savvy! -- but I will say this -- any threats will be deleted, and any further incidences will have me locking down my posts so anonymous comments aren't allowed. I don't want to do that, but I won't tolerate threats. This is the one and only warning!\n\nChapter One Hundred Thirty-Eight: * Fires that Burn\n\nThe trip back to Amaranthine was uneventful; the group of us, including the covered cart with our precious cargo, caught up to the army on the second day, and then proceeded to leave them to head slowly back to Amaranthine as we continued at a faster pace back to the Vigil. Nathaniel was going to meet with his sister in the city, and then join us back at the Vigil a day or so later.\n\nThe plan was for the army to stay around Amaranthine for a couple of months in case the escaped sentient darkspawn caused problems in the area, before they headed back to Denerim. The Wardens, too, would stay until we could confirm that the 'Thaw' was progressing normally -- and until we caught both the Architect and the sentient darkspawn, if possible. That also allowed enough time for Soldier's Peak to finish the renovations.\n\nOn the last day of our trip, I was reflecting on just how much things had changed in Thedas because of my knowledge. And while I was generally happy with the outcomes -- the Mother, dead before she could build an army to destroy Amaranthine or the Vigil; the Architect, if not dead, at least limited in how many darkspawn he could turn, thanks to a lack of Grey Warden blood; the Archdemon dead without destroying Denerim; Cailan alive and on his throne, finally being the King Ferelden needed -- I was also anxious. The Architect was in the wind. Justice would never merge with Anders -- but what did that mean for Kirkwall? Leliana would not become the Divine's Left Hand -- and the future Divine was currently the Grand Cleric in Ferelden. What would all of the changes mean? Will I come to regret some of them, if the future doesn't work out as well as I hope?\n\nWhen we approached the Vigil late in the afternoon after four long days of travel, we discovered there were more changes than even I had predicted. The first clues that something had happened while we were gone were the plumes of smoke visible from the road. We had been sauntering along, knowing we'd make it well in time for supper, but when it became clear that something was burning, as a group we turned and sprinted the last mile until we came within sight of the walls.\n\nI'll never forget the image of Anders standing on the walkway above the walls, a veritable torrent of fire roaring from his fingertips as he roasted a handful of darkspawn that had been clawing at the gates. There were no more live 'spawn visible, but piles of still-smoking ashes scattered around the perimeter made it clear this hadn't been the first group they'd repelled. I counted six recent fires, each with enough ash to account for probably a dozen corpses, if they'd been piled properly before being burned. It's sad that I've seen enough piles of burning darkspawn to know that.\n\nThe mage greeted us with a cheerful enough shout that my anxiety was immediately abated; if the 'spawn had breached the walls, if people had died or Faren worsened in our absence, it would have been obvious from his tone. \"Aren't you glad I had Jowan teach me that fire spell?\" I chuckled, remembering more than a few burns and missing eyebrows travelling between Orzammar and Redcliffe. The gates swung open when we got close, to see the combined forces we'd left at the Vigil assembled and waiting in the courtyard, though there were fewer soldiers present than I would have expected.\n\nAnders jogged down the stairs to join us as a group of soldiers with shovels headed out the gates. They had the practiced look of people who'd done this before, and indeed they began shoveling ash away from the gates with little fuss. The mage didn't stop or even say hi before grabbing Solona, lifting the petite blonde off her feet and planting a fervent kiss directly on her lips. I snickered and leaned into Alistair's side, watching with amusement as Aedan fidgeted, clearly impatient for a report but unwilling to step into the middle of the reunion.\n\nFinally, laughing, I broke up the increasingly passionate demonstration. \"Alright, alright, get a room already! After you tell us what in the Void is going on around here!\"\n\nSlinging an arm around Solona's shoulders and gesturing for us to follow him, Anders led us through the gates. \"Three days ago the attacks started. At first I thought it was just random -- small groups of darkspawn, maybe this Thaw we'd been warned about? But it was too persistent, and with each attack, the numbers have increased.\"\n\nSigrun, weaving between groups of soldiers in the courtyard, popped up in front of us with a weary half-smile. She nodded her head in greeting, then joined in Anders' report. \"They got smarter, too. They'd coordinate attacks on opposite sides of the Keep to see if we could handle two groups at once, and they'd try a different area each time -- like they were looking for weaknesses.\" The usually perky dwarf looked troubled. \"I didn't know darkspawn did that. The attacks weren't hard to repel, but Anders and I have been taking turns staying awake so we'd have warning when the attacks were coming.\"\n\nThose of us who'd just returned from the Dragonbone Wastes exchanged anxious glances. Finally Aedan asked something that had been on my mind since the gates had swung open: \"Where are the rest of the soldiers we left behind? And the Legion?\"\n\nAnders' drawn-out sigh was the next sign that something else unexpected had happened. \"We got messages from Amaranthine that they'd been attacked as well. The gates were holding, but some of the local farm people had been trapped outside, and the guards were hard-pressed to keep the city safe. We made the decision -- with Varel -- to send most of the soldiers back to reinforce the city. The last messengers this morning reported a few uncoordinated attacks, but the city is fine so far.\"\n\n\"And Trevian decided to take the Legion and see if they could find where the darkspawn were coming from.\" Sigrun frowned. \"They left here two days ago. I was sort of hoping you'd have run across them on your way back.\"\n\nI shook my head; we'd certainly seen no sign of dwarves on our travels.\n\n\"We'll find them, Sigrun.\" Alistair patted her shoulder reassuringly, and I smiled gratefully at him.\n\n\"How's Faren?\" I was almost afraid to ask. I'd confronted my feelings about what had happened before we'd left, but knowing that my guilt was irrational didn't stop the sick feeling in my stomach when I thought of my friend lying unconscious in his room upstairs.\n\n\"No change,\" Anders rushed to interrupt Sigrun, who'd opened her mouth to reply. The interaction was odd, and for the first time I felt a strange tension there I hadn't expected. \"I haven't exactly had a lot of time to research a cure, and Gerrin left with the rest of the Legion.\"\n\n\"At least he isn't worse.\" I shook my head sadly, and felt my brother pat my shoulder softly.\n\n\"There's something else you should know.\" Anders' tone made my shoulders slump. What now? What else could possibly happen? We all waited for a moment, looking at him expectantly, while he turned to glance to the side. \"I couldn't wait; if I'd waited until you got back to make the decision, it would have been too late.\"\n\nHe gestured, and an unfamiliar elf approached wearing somewhat tattered clothing. I wondered if he was one of the servants, but Nate's staff were all well-dressed, and I was quite sure I'd never seen him before. I wasn't about to make the same mistake I'd made with the Weisshaupt Warden by assuming anything, so I just looked at him blankly. He didn't stand out in any way, with unkempt, shoulder-length brown hair, ruddy skin that had seen more than a few sunny days, a nose too large to be traditionally attractive, and a mouth slightly too wide. His expression seemed to denote irritation, at best, and the lines around his face made me think the expression was rather permanent.\n\nAnders waved his hand in the elf's direction. \"This is Vander. The soldiers who went to Amaranthine sent him back with a patrol.\" The mage stared at us expectantly; I looked from him, to Vander, to Aedan and Alistair...who were looking at the elf with surprise. Clearly I'm the only one not getting it. \n\nAnd then it occurred to me that I could not only see that sour facial expression -- I could feel it. He's a Warden! What the hell?\n\n\"Explain?\" Aedan demanded, shifting his gaze between the elf and the mage.\n\n\"He w-\" Anders began.\n\nVander interrupted. \"I think I can speak for myself.\" Anders winced. \"I was tainted, and this shem offered me the Joining. I survived.\" He scowled. \"Just so you know, shemlen, just because you are the Warden-Commanders, doesn't mean I trust you. I didn't have a choice about Joining, but I won't be treated like a slave.\"\n\nI stared at the elf, open-mouthed; Anders' strained smirk and Sigrun's grunt of irritation told me this wasn't the first such conversation he'd had. Oh great, he's going to be the resentful kind. Had to know we'd get one eventually.\n\nTo my surprise, both Seranni and Zevran stepped forward from where they had been listening behind us. Zevran's back was stiff, his expression artfully blank -- I could tell he was feeling quite defensive.\n\nSeranni, on the other hand, smiled warmly. \"I think you'll be surprised,\" she tried to reassure him. \"There are several of us elves that are Wardens, and we're all treated like equals.\"\n\nHe sneered down at the blonde. \"Us? Several of us? Since when do the Dalish see those of us from Alienages as equals? I'm just a flat-ear, isn't that right? Your reassurances mean nothing more to me than those of this shem.\" How he was able to maintain his ire in the face of Seranni's pout, her eyes filling with tears as she turned away, I'll never know.\n\nZevran reached out, clamping a hand around the Vander's upper arm, turning to gesture to Wulf, who nodded and grabbed the elf's other arm. \"Please excuse us, Commanders, cara mia; I believe I feel the need to show our new brother around the Vigil.\" Aedan nodded, stunned; I almost giggled at the look of outrage Vander shot him. \"Perhaps we shall start with the ramparts, yes?\"\n\nWe all watched in shocked silence as the two elves dragged the newest Warden away; I could only hope Zevran didn't mean to throw him off the ramparts, if he kept up his behaviour. Aedan dismissed the rest of our group to go unpack and clean up, with a pointed look thrown at Conrad, who nodded and headed back to the cart; Aedan, Alistair and I stayed with Anders. We turned to look at the mage as everyone scattered. His cheeks were pink as he stood ruefully pinching the bridge of his nose with two fingers.\n\n\"I know, I know. He was too sick to be so...feisty, when I offered him the Joining. If I'd known...\"\n\n\"What in the Void, Anders?\" Aedan sounded more tired than outraged. I sympathised.\n\nAnders sighed again. \"From what the patrol told me, a bunch of farm workers got trapped outside the city when the darkspawn attacked. The guards wouldn't risk opening the gates with 'spawn right outside. Everyone fled into one of those abandoned houses outside the gates, but the darkspawn followed them. Vander picked up a sword from one of the fallen hurlocks, and defended the whole group of them until the army arrived. He was tainted in the fighting.\"\n\nThe mage gestured, and we followed him slowly inside. \"By the time he reached here, he was delirious. I couldn't risk waiting, and I couldn't stand the thought of just letting him die after everything he'd done. He saved a handful of people from certain death -- and two women from being taken as Broodmothers. What should I have done?\"\n\nAnders led us towards the hallway that held our quarters, weaving through groups of bustling servants and soldiers. \"It wasn't until he woke up that I realised how much he hates humans. He's been a total complainer ever since. I actually thought Trevian might kill him at one point -- apparently he thought that the dwarves would be more sympathetic, or something. I think it's half the reason the Legion left.\"\n\n\"Any idea what his story is?\" I was curious. After meeting Dariel, I was more than aware that the life of an elf in the Alienage -- especially in Amaranthine -- wasn't a very happy one. I wondered what had happened to make him so bitter.\n\nAnders shook his head. \"Let's hope Zevran finds out before he pushes him off the roof.\"\n\nI chuckled, and the smirks on my brother's and husband's faces told me we'd all had the same thought. I felt sorry for Vander for all of a second, before I remembered that Zev and Wulf had been fighting and travelling as hard as the rest of us had, and thanks to our newest 'brother', they weren't able to relax and clean up like everyone else. I'll probably have more sympathy later, once I learn his story, big softie that I am.\n\nFinally arriving at our rooms, I bid goodnight to Anders and my brother, then dropped my pack on the floor inside the door of the suite I shared with Alistair. \"Love?\" I bit my lip, pondering how to approach my husband with what I wanted to do next.\n\nHe smiled at me and leaned in to kiss my forehead. \"I know. I'll go get food and then run us a bath; you go see Faren.\"\n\nI should have known. \"Thank you.\" I cupped his cheek, grateful again for having such an understanding, incredible man in my life. \"I'll join you in the bath as soon as I can.\"\n\n\"I'll be waiting.\" He winked at me, leaning in to whisper huskily, \"Don't take too long.\"\n\nI grinned at him and swatted his behind playfully; he would barely have felt it, given his armour, but he squeaked adorably and I giggled all the way down the hallway to the Wardens' quarters.\n\nI found Sigrun in Faren's room, slowly dripping water into the dwarf's open mouth and massaging his throat so he would swallow; I sat down beside her with a sigh, watching the former Legionnaire work. He'd actually managed to at least maintain his weight, if not gain back what he'd lost while being held by the Architect, so it was clear she'd been doing a really good job.\n\nSigrun smiled at me as I sat down. \"No change, obviously.\" She put aside the skin she'd been pouring water out of and turned to look at me. \"How are you feeling?\"\n\nI considered. \"Mostly fine. I don't think I'll ever not feel guilty for this, but I'm starting to accept it wasn't totally my fault. I'm mostly angry the Architect got away again,\" I complained.\n\n\"What happened?\"\n\nI told her about our mission -- the two Broodmothers we'd slain, as well as the Mother and her Children. \"But there's still a bunch of sentient darkspawn out there somewhere -- presumably they're responsible for the attacks here and the city -- and the Architect. I don't even know where to start with dealing with all that.\"\n\nShe patted my hand. \"I trust you -- and the Commanders. You'll figure it out.\" She looked down at Faren's sleeping face, his beard scraggly and unkempt, his hair getting long and unruly; her expression was wistful, a strange mix of longing and affection that surprised me given how short their acquaintance had been. \"You're lucky, you know. Not just for escaping, but for having people who will always come for you.\"\n\nI nodded, wondering where she was going with the conversation. \"I am very lucky.\"\n\nShe looked at me again with an earnest, intense expression. \"I doubt you even know how much. You should have seen Commander Alistair, when he found out you'd been taken. I've never seen a man so...distraught. It was like watching him burn from within. He didn't sleep, barely ate; just kept driving us to dig deeper, keep going, push ourselves to find you. It was like he was possessed. And when we found you...\" She trailed off, staring off to the side, eyes blank as she remembered. \"He wouldn't let anyone else near you. We offered to help take care of you, clean you up and help with things, but he refused. He was so focused, so intent...he carried you the whole way, rode with you in his arms, bathed you and dressed you.\"\n\nI blushed, thinking about the things he would have had to deal with while I was out. There would have been bodily functions no woman ever wanted her husband to have to help with...I grimaced.\n\nSigrun interrupted my uncomfortable musings. \"He loves you so much. I truly think it would have killed him if anything had happened to you. Well,\" she amended, \"anything permanent. Obviously something happened. I never believed in true love, not really, until I saw him like that. He burned.\" She reached over to run a hand through Faren's hair distractedly, giving me a direct look. \"I hope you don't take him, take that sort of love, for granted.\"\n\nHer point made, I flushed again, pleased by her obvious respect for my husband and her protectiveness, but also somewhat defensive at the implication that I didn't appreciate him enough.\n\n\"Never.\" I decided that being honest, reassuring her, was my best course of action. \"I know every minute of every day how fortunate I am. I try every day to be worthy of him.\" I hoped she could sense my sincerity.\n\nShe searched my face for a moment, then finally nodded, looking down at Faren and picking up the skin again to coax some more water into him. \"Good. It gives some of us hope for our own futures.\" She smiled ruefully then, and it felt like her attitude changed, somehow -- I felt less defensive, without knowing why. \"You don't know how much some of us wish we had someone who looked at us like that.\" She stroked the dwarf's cheek softly as she worked, in a gesture that was sweet but somehow made me a bit uncomfortable at the same time.\n\nI shook my head, realising how tired I was, and how much I wanted to get back to my devoted husband. I didn't feel up to tackling whatever was going on with Sigrun. Maybe tomorrow. The former Legionnaire had dark circles under her eyes, her complexion more pale than normal as well. \"Good night, Sigrun. Make sure you get some rest, okay?\"\n\nShe muttered something that sounded like agreement, and I left her there to head back to my room. I slipped inside, noticing a platter of food on the little desk in the nook; I shucked out of my armour, leaving it in a pile by the door for cleaning, and headed into the bathroom where I assumed my husband would be waiting for me.\n\nAnd I was right, sort of; I found the enormous bathtub half-full of warm water, the scent of one of the expensive soaps Leliana always bought us in the air, and Alistair naked, in the bath, fast asleep. He didn't stir as I entered the bathroom in my arming clothes, and I spent a few moments just gazing at my husband, appreciating his relaxed face, chiselled jaw with just a hint of stubble; his bronze skin, damp and shiny from the bath, dotted with scars from various battles; his thick biceps and broad shoulders, slender waist and well-defined six pack; the dusting of reddish blond hair that started with a patch on his chest, trailed down his belly like a treasure map, and disappeared below the surface of the water.\n\nI tried to imagine him as Sigrun had described, my sweet, funny, silly husband caring for me when I was unconscious, burning for me...and suddenly I couldn't wait any longer. I needed to touch him, to love him in return, to show him how much I appreciated him. I quickly peeled myself out of my arming clothes, tossing them indiscriminately on the floor; Alistair finally stirred, one eye opening with a lazy smile as he watched me strip and cross the floor to kneel beside the tub.",
        "I kissed him before he could say anything, sealing my lips to his with an intensity that left me feeling almost breathless. He had opened his mouth -- to tease me, knowing him, or maybe just in surprise -- and I took advantage of his shock, sweeping my tongue into his mouth aggressively. Kissing Alistair was always astonishing, his taste so sweet and addictive, his lips so soft and pliable yet somehow demanding, his tongue so gentle and playful, and this was no exception. I gripped the edge of the tub with one hand for balance, and carded my fingers into his damp hair with the other, holding him to me desperately.\n\nI don't know how long I knelt there; it could have been a minute or an hour, as I stroked his tongue with mine, took in his intoxicating taste and scent and feel. He tried to reach for me, but instead I finally pulled back, touching my finger to his lips to stop him from asking questions, and climbing over the edge of the tub. I shuddered as the warm water enveloped me. Straddling my husband's thighs, I kissed him again, both hands now buried in his hair as I devoured him hungrily.\n\nWithout breaking the kiss I finally reached underneath him, pulling the plug and allowing the water to start draining out of the tub. I felt Alistair twitch in surprise, but I bit his lip playfully and then stroked his tongue with mine again, distracting him; his hands came up to grip my hips as he groaned helplessly under the onslaught. As the water continued to drain, I continued my seduction, pulling away from his lips only to tilt his head and take an earlobe into my mouth, sucking softly as I stroked the helix with my fingers.\n\n\"Sierra?\" He moaned my name in a confused, husky voice, and I felt a flash of heat travel down my spine to settle in my core deliciously. \"What...\"\n\n\"Shh,\" I admonished him, biting his earlobe playfully. \"Relax. I've got you.\"\n\nI kissed my way down from there, nibbling and sucking on the tight cord of muscle in his neck, using his gasps and twitches to lavish attention on the sensitive spots with my lips, teeth, and tongue. By the time I reached his collar bone, the water in the tub was only a few inches deep, hiding nothing, and I pushed the plug back into the drain as I started nipping my way along his clavicle. I stroked his shoulders, his biceps, and his chest as I went, relishing the feel of his damp skin and powerful muscles under my fingertips.\n\nHis head fell back against the rim of the tub when I descended further, kissing my way down his chest to reach one tiny, pebbled nipple; he gasped as I suckled it, teasing the tip with flicks of my tongue. I switched to the opposite side, getting the same response, before continuing my descent. I swirled my fingers through his little bush of chest hair, following the trail down to his navel, then repeated the action with my lips. I dipped my tongue into the indent of his belly button, and he twitched, a strangled noise that was half giggle and half moan encouraging me to do it again.\n\nI could feel his erection pressing against me, and took the opportunity to capture it between my breasts as I followed his 'happy trail' south. A string of expletives issuing forth made me smirk, and, wet from the bath, I pressed my breasts together to give him a bit of pressure as he struggled not to thrust up into my cleavage. This would have been fun with my bigger, Earth boobs -- not that he's complaining. I giggled as he panted and twitched underneath me.\n\nEnjoying my teasing, I sat back to appreciate the sight laid out before me. My gorgeous husband, reclining in the tub, head thrown back while breath panted through his parted lips, eyes closed in bliss, his skin shiny with sweat and bathwater, his incredible body on display and his erection straining towards me. I spared a brief moment for a prayer of thanks -- to whom, I couldn't say, and it didn't matter -- before continuing my mission to watch him fall apart.\n\nI finally approached his engorged length, pressing fervent kisses to the purple head, gathering a bead of fluid that escaped on my tongue as he stuttered his own prayer to the Maker; taking pity on him, I finally engulfed him in my mouth, bracing my hands on his hips as he bucked involuntarily under me. Water splashed around us and I sputtered for a moment as he murmured frantic apologies; with a smirk and a giggle, I returned to my efforts, bobbing slowly on his length, swirling my tongue around the tip each time I pulled up. I kept my pace slow, tantalizing and inflaming him until he was trembling with the effort to hold still.\n\nHis moan of disappointment as I released him and sat up quickly morphed into one of relief as I shuffled forward and sank my dripping core down onto his length in one quick move. His hands returned to my hips as I rode him, not teasing anymore, just taking him hard and fast as he gripped me desperately. He tried to stop me, to slow things down, but I grabbed his hands, lacing our fingers together and leaning forward to kiss away his objections. I slammed down onto him again and again, feeling him unravel under me, until he shuddered and cried out, letting go of my hands to wrap his arms around me as he emptied himself inside me.\n\nI stroked his hair, pressing kisses to his forehead and cheeks as he slowly returned to himself, his softening erection still inside me. Finally he collapsed back, holding me against his chest as he caught his breath.\n\n\"What brought that on? Not that I'm complaining,\" he chuckled. \"I just want to know so I can do whatever it was again sometime.\"\n\nI smiled, though I knew he couldn't see it with my head under his chin. \"Nothing in specific. I just wanted to.\"\n\n\"Well feel free, any time,\" he teased. \"Really, my schedule is wide open.\"\n\nI sat up, giggling, only to let out a strangled groan when my nipple grazed across his wiry chest hair.\n\nHe was immediately solicitous. \"Love? Oh, you didn't...you're still unsatisfied.\" His thumb grazed my other nipple, and I twitched away, still sensitive. \"I could-\"\n\n\"I'm fine,\" I protested, taking his hand in mine. \"Really. I wanted to do this for you.\"\n\n\"And that means you don't get any relief? Why? Sierra...\"\n\n\"Just me appreciating you. I love you, so much.\" I cupped his cheek, smiling softly at him, blinking away the happy tears threatening to fall. \"I'm the luckiest girl in Thedas. I just wanted you to know that I know that. I wanted you to know that I don't take you for granted, that I never will.\"\n\n\"So...this was some sort of...reward?\" He cocked one eyebrow up, a mischievous smile on his handsome face.\n\nI chuckled. \"Sort of, I suppose.\"\n\nHe tried to pout, the effect ruined by the satisfied grin that still quirked up the corners of his lips. \"Well, if it's my reward...don't I get some say in choosing it?\"\n\nI scowled at him halfheartedly. \"Are you saying you didn't enjoy it? And here I thought I had a standing invitation to repeat the experience.\"\n\n\"Oh, it was fantastic,\" he assured me pleadingly, kissing my chin softly, \"I just have another reward in mind also.\"\n\nI could feel his erection, which had softened and had been threatening to slip out of me, twitch slightly and lengthen inside me, and I rolled my eyes in amusement. Boys! \"Oh? Do tell.\"\n\n\"Well, I don't think it will come as a surprise to you, but seeing you receiving pleasure is one of the things I like best.\" His voice had dropped into that husky range that always made me shiver, and his purposeful emphasis on the word pleasure sent a bolt of warmth directly to my core. His fingers were making circles on my hips, distracting me, and his length had continued to grow, spreading me and ratcheting up my desire even more.\n\n\"Yes?\" I responded vaguely, struggling to focus on his words instead of the heat inside me that had begun building when I first saw him in the tub and hadn't yet been satisfied. \"What are you trying to say?\"\n\nHe pulled me closer to whisper in my ear, his breath caressing my skin as my nipples came into contact with his wiry patch of chest hair again. \"I want to watch,\" he murmured. \"Use your hands, your fingers, use me to take your pleasure.\" I could feel him twitch inside me again, demonstrating his interest in what he was saying. \"Show me, Sierra. Come for me, sweetheart.\"\n\nI gasped, his dirty talk filling my head with lascivious images, the heat in my core boiling over into an inferno. Almost involuntarily I squeezed down on his length, the need for friction becoming overwhelming. \"You're such a pervert,\" I murmured, chuckling as he nodded, agreeing happily with my assessment. \"I've created a monster.\"\n\nI had to admit, though, that as self-conscious as I was, as silly as I felt, there was an appeal to his idea. The thought of him watching me as I rode him, his eyes blown with lust as I touched myself for him...Oh yes. I squeezed him with my pelvic muscles again, even as I rose slightly and dropped myself firmly back down into his lap. My hands left his shoulders, where they'd been holding on for balance, and made their way to my neck, stroking and tickling me there in imitation of his lips. I closed my eyes and threw my head back, relying on his strong hands on my hips to keep me from falling.\n\nAnd then I rode him again, but slowly, savouring the stretch in my most intimate place as one hand wandered down to squeeze my breast and the other continued to stroke my neck. It wasn't going to take long, I could tell -- between the arousal I'd built in making him come apart for me, and that he stirred in my with his naughty ideas and husky voice, I was close to my peak already. In moments I was gyrating in his lap, both hands kneading my breasts and rolling my nipples firmly, little sparks of lightning sizzling down my nerves to pool at my core.\n\nI needed another hand, though, I realised. I was unwilling to release one breast to address the roaring need lower down, but I desperately wanted some pressure on my clitoris. Frustrated, I opened my eyes and risked a glimpse down to see those intense eyes watching me, moving from my flushed face to my soapy breasts and swollen nipples, his irises almost entirely swallowed by black pupils, his mouth open as he panted frantically. He licked his lips, a prayer to the Maker under his breath, and the vivid memory of exactly what he'd said when he'd talked me into this hit me: \"...use me to take your pleasure.\" I knew exactly what I needed to do.\n\nI released one breast to snake my hand around behind his head, drawing him forward; I presented the other breast to him like a gift, pressing my pebbled nipple to his lower lip. Getting the hint, he drew it into his mouth and suckled gently, and I almost came on the spot. I cried out wantonly, returning one hand to my neglected breast as the other wiggled down between our two sweaty bodies. I didn't wait, didn't tease or test the waters slowly; I attacked my pearl, pinching and rubbing it desperately as I slammed myself down on his length again and again.\n\nIt took only a minute of that before my peak overtook me; I was crying out, sobbing with pleasure, too overwhelmed to even know what was happening next; when I was finally aware again, he had somehow moved, pinning my back against the side of the tub, arching me back over the edge as his lips continued to torment my nipple, my legs wrapped around his hips as he held me up and pounded into me from underneath. I was only just able to loop my arms around his neck, holding on desperately, before I came again, feeling the swelling and spasming inside me that indicated he'd finished as well.\n\nExhausted, I slumped in his arms as he slowly lowered us both back into the tub.\n\n\"Maker's breath, Sierra...\"\n\nI hummed in agreement, too tired to even lift my head; he fumbled for something, and I felt blessed warm water spray over my back as he filled the tub again with my little shower head.\n\n\"Are you alright, love?\"\n\nI basked in the warmth, both of his arms and the water, and finally lifted myself up enough to allow his now soft length to slip out of me. I met his smug grin with a lazy, satisfied smile of my own, and both of us started to giggle softly.\n\n\"I assume milord is satisfied with his requested reward?\"\n\nHe blushed adorably, which was hilarious considering what he'd talked me into mere minutes before. \"Ah, yes. Completely. Thank you.\" I cracked up and collapsed against his chest again, shoulders shaking with laughter, and he chuckled. \"I had no idea that would be quite so...stimulating. You may prove right about the pervert thing yet.\"\n\nWhen I didn't move, he proceeded to wash me, gently scrubbing away sweat and grime with a washcloth, before I returned the favour. He massaged shampoo into my scalp and helped me rinse out conditioner, finally standing and scooping my mostly limp body out of the bottom of the tub once the water had drained again. We dried off and I hastily braided my damp hair back before both of us crawled into bed. We spent a few minutes feeding each other the snack he'd pinched from the kitchen, and finally slept curled tightly together, dreamless and deep."
    ],
    "authorname": "ElyssaCousland",
    "tags": [
        "fantasy",
        "fanfiction",
        "dragon age",
        "modern girl in thedas",
        "romance"
    ],
    "category": "Celebrities & Fan Fiction",
    "url": "https://www.literotica.com/s/there-and-back-again-ch-138"
}
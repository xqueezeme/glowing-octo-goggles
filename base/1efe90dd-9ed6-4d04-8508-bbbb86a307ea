{
    "title": "Bent Ch. 04",
    "pages": [
        "Into the Wild\n\nAs the intense summer heat dissipates, our lives have taken a peculiar, yet curiously tolerable rhythm. It seems that the very high notes and the very low notes can't be heard by anyone but us. They involve only us and no-one else knows about them. We don't talk about them and once they are over, we are able to live in the mid-tones. In the open.\n\nBizarrely, in the mid-tones, we are developing what one could consider a friendship at the hand of our girlfriends, who seem to enjoy nothing more than organizing double dates. We picnic in the park, go for hikes, nights out and even the odd run together. Though I must confess, there have been brief, animalistic interludes in male bathrooms and more than one run has ended with in us in an alleyway, behind industrial bins, frenetically jerking each other off.\n\nHonestly, if you got the chance to run behind Ethan, seeing the easy way he moves, the way his calves flex with each step, his hamstrings pleated with lines that run all the way to his... Put it this way, I don't care who you are, male or female, you'd have a damned good chance of ending up behind a dumpster, just like me.\n\nTonight, the four of us are grabbing milkshakes in the village. He and Liza are sitting across from me in a booth, and Jess is tucked neatly up against me. Conversation is flowing easily, though I'm becoming increasingly aware of his heat. He's leaning back against his seat, the angle of his head emphasizing the razor-like line of his jaw. I'm watching the way his Adam's apple bobs up and down slightly when he talks and can almost make out the beat of his pulse at his jugular, although, maybe, that's my heart I feel throbbing. Under the table, I can feel how close his legs are to mine. We aren't touching, but that's only making it worse.\n\n\"Do you, Oliver?\" The sound of Liza's voice breaks through the fog in my brain, like the shrill call of an alarm going off in the morning.\n\n\"Ah, pardon?\" I stammer.\n\nShe shakes her head and says with a patient little smile, \"I said, do you like fishing?\"\n\nI seem to have missed a large part of the conversation, as I have no idea what she's talking about but with an almost imperceptible glance at Ethan, I say quickly and with great gusto, \"Yeah, sure. I love it.\"\n\nJust to be clear, I haven't been fishing since I was eight and even at that point, I had no strong feelings about it either way. Liza gives Ethan a little nudge and a look, as if to say, 'go on, ask him'. He looks at me with a wry smile, \"What do you say? Want to go fishing next week-end?\"\n\nI don't skip a beat.\n\n\"Sure.\" I say, impressed at how neutral my voice sounds, \"sounds good.\" Inside, my heart is pounding so hard I'm surprised Jess can't hear it.\n\n*\n\nThe days leading up to the fishing trip seem to drag by. I don't see Ethan at all and I'm jonesing badly. Like, badly. I'm hanging on by a thread, but neither of us can risk meeting up when the girls know we are going to be spending the whole week-end together.\n\nHe picks me up from work and we leave the city behind. Bob Dylan plays on his tinny car speakers, as concrete finally gives way to lush green. Even though I never consciously feel that I can't breathe in the city, we open the windows as we leave the tarmac, and as I fill my lungs with air, I'm instantly aware of how different it feels. Clean air. Wide open space.\n\nFreedom.\n\nWe must lose signal as we head down the narrow, dirt track to the cabin, because Dylan stops playing and the silence is quickly replaced with that same old charge. It's familiar now, but still, no less shocking every time it happens. He slams the truck into park, leaving a little cloud of dust settling behind us, as we leap out, doors banging shut, bags and groceries all but forgotten.\n\nHe leads the way into the woods, not looking back as he lifts his shirt over his head, quickly followed by his jeans and a quick little hop as he pulls each shoe off. I follow suit, matching each garment he loses, with my own. He spins me around so fast, I hardly know what's happening as I bend and brace myself by grabbing the rough bark of the tree in front of me, and then, with a grunt he's inside me. Hard. Thick. Long. Loud. I take everything he has to give me. I take it over and over again. Long deep strokes. I take it all.\n\nGratefully. \n\nI glance around quickly as soon as we're done, I have no idea where we are in relation to other cabins or people.\n\n\"Did anyone hear?\" I ask, mildly panicked, as I look for my clothes.\n\n\"Nah,\" he laughs, \"and even if they did, no way anyone would think those sounds were human.\"\n\nHe has a point. \n\n \n\n*\n\n \n\nBack in the cabin, it's not much different. I could barely tell you what it looked like in there, other than to say there was a lot of wood, the smell of pine needles and a bed. There was definitely a bed. I couldn't tell you what we ate, though I'm sure we must have had something. All I can tell you is that we fuck. Again and again and again. Both of us completely insatiable.\n\nI'd kind of wondered how things would work out with sleeping arrangements. Back home, both of us tend to get away from each other as fast as we can when we're done, but being stuck in a cabin, miles from anyone else, things are different and I'd wondered if he was going to be weird about where we sleep. Are we going to fuck and then awkwardly head to separate bedrooms?\n\nAs it turns out, when we finally do sleep, we pass out, more than falling asleep. Him on his side and me on my back next to him. I don't know if it's the quiet darkness of the woods, or the warmth and weight of his body next to me, anchoring me down, but I sleep like the dead, unmoving, waking only when the morning light filters through the cracks in the curtains.\n\nHe's still sleeping. His face looks so different. So peaceful, hard lines softened. His dark eyelashes casting long shadows across his cheeks. The intensity of my gaze must rouse him, as he opens one eye, taking in his surroundings and probably, registering the fact that I'm gawking at him. He grabs a pillow and shoves it over my face playfully, but still, I'm a little embarrassed that he caught me watching him sleep.\n\nMy embarrassment doesn't last long though, as he reaches for me, wrapping his leg up around me, hands wondering downward. I'm hard, and not just because I always have morning wood. He pulls me toward him, chest touching chest, mouths touching too. He runs his fingers down my crack, expertly seeking my hole, brushing against me, circling slowly before gently pressing in.\n\n\"Aaahh, shit!\" I whimper, as I buck to get away.\n\n\"Are you okay?\" He asks, concern written across his face.\n\n\"Oh, shit,\" I say again.\n\nHe giggles remorsefully, \"Oh, fuck. Did I wreck your ass?\"\n\nThe answer, it turns out, is yes. It seems that no matter how willing, there really is only so much an ass can take and we appear to have stretched the boundaries of what's possible. I'm always tender when I've been with him, but this time feels like the very, very edge of good-sore and damned close to you're-going-to-find-yourself-needing-medical-attention-sore.\n\n\"I'll be fine,\" I say.\n\n\"Come 'ere, let me see.\" He smiles cheekily. Fuck no, I think. My ass is no laughing matter! I scramble with the bedsheet, trying to get my ass under wraps. He throws himself onto my back, digging his fingers into my ribs. I'm ticklish as hell, so I have no choice but to giggle helplessly and hysterically as he alternates between tickling me, and performing a very humiliating inspection of my plundered hole.\n\n\"It looks okay,\" he says, when I finally stop my wild flailing, \"you probably just need a little break.\"\n\n\"Sorry.\" I mumble into the pillow, when I finally catch my breath.\n\n\"Sorry?\" he says, \"Don't be sorry.\" He gives me that look, the one that gets me all twisted inside. \"What do you think we have hands and mouths for? Hmm?\"\n\nHis deep, rumbling laughter fills the room. It's a beautiful sound. Honest to God, I've never heard anything like it. Like bells tolling. I'm filled with an absurd sense of pride at having caused it, however unintentionally.\n\nAnd he's right. We do have mouths and we do have hands, and boy, do we use them. We take turns going down on each other, a never-ending succession. Him and then me. One of us recovered and ready, as soon as the other is spent. Him and then me.\n\nI'm unsteady when we finally stagger to the shower. As the steaming water hits us, we trade hand jobs until the hot water runs cold. Our last go, rendering no more than a pitiful drop leaking weakly out of either of us.\n\nSpent, I think with relief, after months and months of mania, I'm finally spent.\n\nNo sooner had that thought hit me, when the next biological drive announces itself. Hunger. It's after midday and I am ravenous.\n\nMaybe we didn't get around to dinner last night after all? \n\n \n\nEthan whips up a breakfast of champions. Eggs, bacon, fried tomato and hash browns, each in generous helping. I can't remember anything ever tasting better. We eat in relative silence, aside from the odd appreciative sigh.\n\nAfterwards, we each stretch out on a sofa and collapse into sleep, as my exhausted, satiated body relaxes at last and then switches off completely.\n\n*\n\nTwo, maybe three hours must have passed, as the light is starting to change, when I'm woken by a gentle prod at my side.\n\n\"Come on,\" he says, \"we've got to get going.\"\n\n\"What?\" I mumble. I was sleeping so deeply, I hardly know where I am. \"Where are we going?\"\n\n\"Fishing!\" he exclaims, as if it should be obvious.\n\n\"Nooo,\" I moan, \"I have to sleep.\"\n\n\"Come on\" he says, shaking me insistently.\n\n\"Can't, it too cold.\" It's unseasonably cold for September and I've misjudged the weather. I haven't packed anything warm enough for being at the lake in the evening.\n\nHe pulls me to my feet and tosses his jacket to me.\n\n\"What about you?\" I ask.\n\n\"I'll be okay,\" he shrugs, \"I brought a sweater.\"\n\nHe pulls his sweater over his head, as I put on his green army jacket. I can't help noticing that his sweater is one of those cream, cable knit types that makes him look as if he's stepped straight off a Ralf Lauren catalogue.\n\nHe carries the fishing gear and I bring the camping chairs and beers, as we make our way down to the lake. On the way, he explains happily that we will be fly fishing and that the great challenge of fishing is to catch the biggest fish with the smallest line. I grumble along as we go, though his enthusiasm is infectious and it isn't long before I'm having fun, despite myself.\n\nHe shows me how to tie the lures, though he says we have to call them 'flies', and teaches me how to cast. Demonstrating a few times, before standing behind me, placing his hand over mine on my rod and showing me how to flick my wrist just enough to send the line sailing through the air. He curls his other arm around me, gently placing his hand on my side under his jacket. That hand doesn't need to be there, I think, that hand wants to be there. \n\n \n\nWe fish in earnest for a while, before cracking open a few beers and taking in the lake views. He catches a good-sized trout and I get a miniscule bass. He shows me how to unhook it and releases it. Holding it in the water gently, cradling it in his big hands as he lets it recover.\n\nLucky fish.\n\nAs I sink back into my chair, I glance over at him. He's smiling. His face shining in the pink glow of twilight. As I look out over the water, I take a long swig of my beer and realize that sitting there at that lake, listening to him waxing lyrical about reels and lines, warm in a jacket that smells like him, might just be the happiest I've ever been.\n\n \n\n\"Hey, Ethan,\" I say, speaking before the thought is fully formed, \"you know what's just occurred to me?\" I don't wait for him to answer, as I continue, casting my line, sending it through the air and into the water with a satisfying plop. \"There are going to be two assholes in that cabin tonight and only one of them has been compromised.\"\n\n\"Huh?\" he splutters, one eyebrow raised. I hold his gaze, as I watch his eyes widen slightly. He opens his mouth to start talking, but then seems to think better of it, as he closes it again and swallows hard instead.\n\nThough he can't seem to ask it, I answer his question with a pointed, deliberate nod. Yes.\n\nHe tries to cast his line, but fumbles with the bail. I smile to myself; I've finally managed to fluster the indomitable Mr. Ethan Quinn. We fish in silence as my proposition weighs heavy around us, closing in like mist on the water. Until finally, he gets up. <br >\n\n\"It's getting dark, we better head back.\" There's a little catch in his voice. So small, you wouldn't know it was there if you weren't looking for it. But I am looking. The same way I'm always looking at him.\n\n*\n\nWhen we get back to the cabin, he begins his elaborate ritual of organizing and stowing his fishing gear. Big hands picking at delicate flies, putting them into tiny containers, before putting those into slightly larger containers. This pedantic procedure would be painful to watch under normal circumstances, but now, the tension between us is like fine shards of glass, one hard breath, all it would take to shatter the space between us.\n\nNow that the thought of having him has occurred to me, it's all I can think of. It's all that I want. At last, I can take it no longer and I grab his wrist, roughly snapping his tackle box shut as I march him unceremoniously to the bathroom.\n\nOnce there, I waste no time gleefully explaining the in's and out's cleaning himself out. He buries his face in one hand and keeps shaking his head slightly. I can't help sniggering a little at his discomfort. Pay back sure is a bitch.\n\n\"Ah, fuck,\" he says as he wrinkles his nose, \"I'm not sure I can do this.\"\n\n\"Well,\" I say helpfully, \"you can either do this yourself, or I can do it to you.\"\n\nHe screws one eye shut, \"Fine,\" he says, pushing me toward the door, \"just get out.\"\n\nI'd feel sorry for him, truly, I would, except I can feel the electricity of his excitement and I know that look in his eyes. That dark shine, the tell-tale flicker of desire.\n\nI undress as I wait, my eyes not leaving the bathroom door for a second. By the time he finally comes out, I am fully loaded. I couldn't tell you the answer to 1 + 1 right then, but I can tell you exactly how he looked. Every detail is etched into my mind like a photograph. He was fresh out of the shower, a white towel wrapped low on his waist, his damp hair falling forward across his forehead, a fine mist of water droplets glistening on his smooth, muscular chest.\n\nI swear, nothing, or no-one has ever looked better than he did right then, walking across that room to me. I stand to meet him as he nears the bed. I bite my bottom lip as I reach out for the towel, unable to resist a devilish smile as I whip the towel off him with a quick tug.\n\n\"Mmm,\" I murmur involuntarily as I take in the sight of his fully erect cock. It stands politely to greet me. I just love the honesty of it. Neither of us has the slightest ability to hide our desire.\n\nI'm close to him now, my dick grazing his hip gently as I inhale deeply, taking in the intoxicating smell of vetiver, black pepper and an underlying note of his own individual musk. Why does he have to smell so good?\n\nI run my hand down the curve of his ass, I smile at the tan line, the whiteness of his cheeks a stark comparison to the golden brown of his back. A target, I think, as I raise my hand and slap his left cheek hard. A quick, stinging blow. He yelps in surprise and jumps a little, but not before I've tended to his other cheek just as sharply.\n\nHe looks at me in surprise, asking, \"How's that supposed to relax me?\"\n\n\"It's not supposed to relax you,\" I murmur ominously, \"it's supposed to get you used to a little pain.\"\n\n\"Oh, fuck,\" he says, pressing his thumb to his teeth, \"this shit's going to hurt, isn't it?\"\n\nI wrap my hand around his neck, pulling him to me, as I tease, \"Don't worry, Tough Guy, I'll be gentle.\"\n\nI mean it though, as much as I want to pound the living hell out of him, even more than that, I want to make him feel good. I want that more than anything.\n\n\"Bend over.\" I say, realizing at the precise moment the words leave my mouth, that this is something I've wanted to say to him from the first second I met him.\n\nHe leans forward, feet on the floor, elbows on the bed. I kneel behind him, licking him, stroking him, taking as much of his dick in my mouth as I can, until I hear that now familiar, sweet little sigh from him. I move my attentions upward. Pausing at his balls, only to continue north until his thighs quiver. I run my tongue up, missing his hole by no more than a hair. Teasing, until I see the slightest arch, that subtle little push-back of his hips that I've been waiting for. I drive my tongue up again, this time running it broadly across his hole, drawing a quick little gasp from him. I begin in earnest now, tonguing him as if my life depends on it. Mashing my face between his legs, tongue thrusting in, panting. This is not just rimming, this is eating. Devouring him. I'm starving and I can't get enough, but that doesn't stop me from trying.\n\n\"Aarrrg, oh, fuck, oh fuck.\" He chants, as I get the lube and move to standing behind him. I've lost my peripheral vision now, and all I can see is his back, his thighs and his utterly historic ass, as a strange centered feeling locks into me, target acquired, I trace the tiny ridges of his puckered hole. I press gently, feeling the tension, as he takes my lubed digit with a strangled moan. I work him over with one finger and then two, slowly, until I am faint with desire and absolutely positive that he is ready to take me.\n\nI kneel behind him on the bed, rolling on the condom as quickly as I can with my hands shaking so badly. I rub my slick cock up and down, over his hole until I see that tell-tale, slow wink. I take the invitation and enter him with a slow, true thrust. He freezes and I feel every muscle in his body contract as he utters, the smallest \"Ow\".\n\nThat tiny word, undoes me. Just one syllable, but coming from him, nearly cracks my soul open. I still. I pull him towards me so his back is up against my belly and, sitting back on my heels, I guide him down onto me, letting him set the pace.\n\n\"Slowly, slowly\" I croon, stroking his back to soothe him, \"push out a little where it stings.\" He looks back at me, his eyes are hooded and dull with arousal.\n\n\"It's okay, nothing bad will happen.\" I promise. My arm is around his chest, holding him securely, as I feel him softly give way. Though every cell in my body is screaming \"THRUST\", I move slowly, gently easing into him, as he gasps and sits back, effectively impaling himself on my cock. God, he's tight. He's crushing my dick with his thick, rubbery sphincter.\n\nHis teeth are clenched and the veins in his neck are protruding slightly, as I tenderly teach his ass. Slow, smooth strokes, giving him time to adjust, to relax and to stretch.\n\n\"Arrrgh, fuck!\" He groans with each thrust. His teeth clenched in a grimace and his face flushed a dark shade of red as he struggles to take what I'm giving him.\n\n\"Mmmh, oh shit, oh shit.\" He moans. I'm being as gentle as I can, but I guess, a bit of a struggle is par for the course when you take a dick for the first time.\n\nHe flops forward on the bed, holding himself up on his elbows and when they give way, sinking his face into the mattress as I plough him relentlessly. His arms are spread out on either side of him, like a crucifix, biceps bulging as he desperately clutches tight balls of the sheet in each fist. The muscles in his back ripple like the fluttering wings of a butterfly, each time he strains.",
        "The sight of my cock disappearing into his skintight ass, along with the desperate, feral sounds coming out of him are driving me rapidly to the point of no return.\n\n\"Jerk it,\" I rasp, \"I can't hold back much longer.\"\n\nI don't need to tell him twice, he goes to town fervently and I feel him rapidly rising, quickening, on the edge of release. I'm so far out on the ledge, that I'm clenching everything I have and my entire body is shaking with the effort not to shoot. When he finally let's go, he throws his head back and shouts his release, the deep sound reverberating from every surface in the cabin. I follow him into the abyss with an orgasm so powerful, my entire body gives way and I collapse heavily onto him as I convulse helplessly.\n\nLater, once we've come undone, the lights are out and the cabin is silent except for the quiet hum of the old gas fridge.\n\nHe whispers hoarsely into the dark, \"You've been holding out on me, Irish.\"\n\nWe fall asleep with my arm slung over his chest and our bodies pressed close together.\n\n*\n\nI wake the next morning to cool, crisp bedsheets and the smell of coffee wafting through the air. He must've been up for a while. I pull the covers up and sigh in contentment, as I wonder if he's gone fishing. I'm contemplating getting up, when he walks into the bedroom.\n\n\"Where've you been?\" I ask by way of greeting.\n\nHe gives a little shrug and treats me to a very sheepish grin, as he gestures to the bathroom. I raise my eyebrows.\n\n\"Again?\" I ask, unable to hide my delight.\n\nHe presses his lips together, giving a slight, cheeky nod as he comes back to bed.\n\nWe take our time, each leaving no part of the other's body unexplored, as we lick, suck and stroke. He's on his back this time, legs spread, holding his knees back for me. I can't tell you what seeing him like that does to me. I study his face intently as I take him. Every little micro expression he has, branded into my mind for eternity. He's so beautiful, I think, so, so beautiful. I'm delirious with pleasure and, even as I fuck him, I already know I want him again.\n\nHis head is thrown back and the sounds he's making are driving me wild. Guttural. Raw.\n\n\"Mmmmphhh\" he gasps.\n\n\"D'you like that? I ask, through clenched teeth.\n\n\"Mmmm,\" he says, biting his bottom lip.\n\n\"Say it!\" I bark.\n\nHe looks up at me, he eyes dark, vulnerable, as he nods dumbly again, before licking his lips and saying \"Mmh, yeah, oh God, I do.\" His abs are quivering slightly with the effort of speaking. \"I really, really do love it, aaarghh.\"\n\nIntense warmth floods my body and as I study his beautiful face, I catch myself thinking, and I really, really love y..\"\n\nWait! What??\n\nJesus! Get yourself together, man! That's not what this is.\n\nWhat the fuck is wrong with me?\n\n \n\n*\n\nThe city looms up ahead of us, as we hurtle along to the strained sounds of the Rolling Stones. A small pit forming in my gut, at the thought of returning to normal life. Reality. The pit only grows as he drives up my driveway, parks and gets out to help me get my bag and the leftover beers.\n\n\"So, er, thanks.\" I say, hoisting my bag over my shoulder. It feels so strange to be back, I'm suddenly awkward and a little unsure how to act. \"See ya, I guess.\"\n\n\"Hey, Ollie.\" He says, as I turn to leave, catching me by the arm and pulling me back, ducking behind the carport wall. His eyes dart left and right, a quick look-out, before he grabs my neck and pulls me toward him, kissing me softly, leaving me breathless.\n\nI watch, stunned, as he drives off. He's never kissed me like that. Kissing is part of fucking for us. We kiss right before and during. Never after, and sure as hell, never like that. I run the back of my fingers slowly across my lips.\n\nI'm tingling.\n\n \n"
    ],
    "authorname": "herdirtymind",
    "tags": [
        "anal",
        "first time",
        "gay romance",
        "oral",
        "spanking",
        "tickling"
    ],
    "category": "Gay Male",
    "url": "https://www.literotica.com/s/bent-ch-04"
}
{
    "title": "Spiced-Up Marriage: A Big Surprise",
    "pages": [
        "Summary: Husband and wife explore same-sex curiosity together.\n\nNote 1: This is a 2020 Valentine's Day Story so please vote.\n\nThanks to:Tex Beethoven and Robert for editing this story.\n\nSpiced-Up Marriage: A Big Surprise\n\n\"Do I have a surprise for you later tonight,\" my wife smiled, as she rubbed her nylon-clad foot on my crotch under the table at a five-star restaurant on Valentine's Day.\n\n\"I can't wait,\" I moaned softly, her foot on my crotch getting me hard in no time.\n\n\"You have no idea,\" she smiled, rubbing up and down.\n\n\"Although if you keep doing this, it may be very anti-climactic,\" I joked.\n\n\"So, I shouldn't give you a foot job with my new Wolford nylons?\" she asked.\n\n\"Wolfords?\" I asked, as my hand went down to touch her nylon-clad foot and found they were the softest I'd ever felt.\n\n\"Yes, I learned they're the top-ranked nylons in the world\" she said. \"I bought them on eBay, and they just arrived yesterday.\"\n\n\"Wow,\" I said, my hand rubbing her sheer and silky-clad foot. I had a nylon fetish, always had. One that bordered on unhealthy. If a girl was in nylons, I was checking her out. My even bigger fetish was feet in nylons, driving me to stare at a woman in heels and pray she'd slip her foot out of them to allow me to see her delicate toes, hopefully with her nails painted, in the nylons.\n\nSome guys were tit guys, I wasn't.\n\nSome guys were ass guys, I wasn't.\n\nSome guys were legs guys, I was too... if they were in nylons.\n\nIn all truth, I had a nylon foot fetish.\n\nIf I saw a nylon-clad foot, I got hard instantly. I wanted to touch that foot and feel the silky nylon. I wanted to suck on the toes. I wanted to lick up the sweet sweat on the soles of their feet. Yes, I'm weird. But I discovered, thanks to the internet, I'm not alone. Foot fetishes are not as rare as I once thought, although nylon foot fetishes are rarer. There are even websites and models dedicated to foot fetish videos.\n\nI was first attracted to my wife Pam back in college because she wore nylons every day to class... the only girl I knew who did so. I was attracted to her before I got a good look at her face or even heard her voice.\n\nLuckily, Pam is a very beautiful woman, not in the model or movie star way, just a beautiful soul. She is pretty, although she sees herself as bland with brown eyes, brown hair, smallish boobs, and a chubby ass. She also based on her mother who was a bit of a player, that nylons enhanced an outfit, and thus she wore them every day. She also knew, like I did, her legs were her strongest asset.\n\nDouble luckily, Pam not only tolerated my fetish (most previous girlfriends wore them because I wanted them to and not because they were turned on by doing it... most of them thought my fetish weird), she got turned on by it too. She knew if she wanted to get me horny all she had to do was put on her nylons... wiggle her toes... and I was ready for action.\n\nTriple luckily, she loved wearing a wide range of hosiery. Besides pantyhose, which she usually wore to work, she often wore thigh high stockings when we went out, had a few garter-belt and stockings outfits and two full nylon crotchless body suits.\n\nSo, I was a lucky man... even if our sex life had stagnated a little during the last couple years. Time will do that, it seems.\n\nTwenty-two years.\n\nTwo teenage kids.\n\nWork.\n\nLife.\n\nSex used to be a few times a week, then at least a couple times a week, then a few times a month, then a couple times a month and then monthly, and now it seemed to be only on special occasions when society said we should fuck. New Year's Eve, birthdays and Valentine's Day, for example.\n\nNow before I really get into my wife's surprise, I need to go back to where I began to question who I was as a man.\n\n.....\n\nThe internet has had many major impacts on the world. Some good, some bad, but for sure, porn that was hard to find when I was a kid is now available at the click of a button. And every conceivable type of porn. I mean the first time I discovered there was Scooby Doo porn, I was aghast. That led me to discover Archie porn and actual adult comics where the Archie gang have sex. This being way before Riverdale made them cool again. Betty and Veronica in a 69 was really hot.\n\nAnyway, I traveled a lot on business, and that meant I was watching a lot of porn while I was at hotels. Mostly lesbian and straight, always with girls in nylons. Eventually, I discovered fetish sites that catered to nylon perverts like me. Sometimes they were hard core, but mostly they were foot worship: nylon massages, nylon foot licking, nylon crotch rubbing. Each of those turned me on.\n\nI'm also an avid reader. So I read a lot of erotica. I would often watch videos on my iPad while reading on my phone (and people say men can't multitask).\n\nI read a variety of stories and themes... again, mostly lesbian or straight. The odd incest (not because I ever wanted to do such a thing, but the taboo of it turned me on for some reason), as well as, for some reason I couldn't really explain, I really enjoyed mind control stories. I loved watching good girls become bad.\n\nNow I really don't know how it began exactly, but I eventually began reading gay stories. Mostly gay stories of straight men who become fascinated with sucking cock. Sometimes it was BBC based, although that didn't turn me on any more than a white cock did, but before I knew it, I was reading almost exclusively gay stories.\n\nI watched a few gay videos, but they did nothing for me. I didn't and don't find men attractive, but for some reason I was nonetheless enthralled by a dick.\n\nMaybe it was because everyone's is so different.\n\nLong, medium or small.\n\nThick or thin.\n\nHairy or shaved.\n\nStraight or curved.\n\nCircumcised or uncut.\n\nFat and long.\n\nFat and short.\n\nBlack. Asian. White.\n\nLike two snowflakes are never alike, neither are two dicks.\n\nI did start watching, almost exclusively, blow job videos. It was always girls giving the blow jobs, but where the old me would have been admiring her mouth, her tits and her body, I was now equally admiring the cock.\n\nSo, once I discovered hypno sissy videos, I became addicted to them too. They seemed weird at first. Quick video clips of girls sucking dicks, but with female voice-overs calling me a sissy, a faggot, and a cock sucker.\n\nThe name-calling turned me on, even though I wasn't a sissy. I had worn pantyhose a few times out of curiosity, but never panties or other girls' wear.\n\nI didn't find men remotely attractive, nor did the idea of getting fucked by a guy turn me on.\n\nNor had I actually sucked a cock. Yet the idea of sucking a cock was now my biggest fantasy.\n\nBut how do you say to your wife: 'Honey, I love you, but I really want to suck a dick'?\n\nSo, for months I jerked off to hypno sissy videos. I even had some audios on my phone to listen to while I drove.\n\nI didn't want to be a sissy.\n\nI didn't want to be a faggot.\n\nI was just curious what it would be like to suck a cock.\n\nThen, fate intervened.\n\nPam also likes porn. We used to watch a lot of it together. But on my birthday a couple weeks ago, the kids both gone to different school events for the evening, we ended up in our bed, with my pretty wife wearing some sexy red lingerie.\n\n\"Want to watch some porn first?\" she asked, something we hadn't done in at least a couple of years.\n\n\"Does your lingerie get me hard?\" I asked, a rhetorical answer that obviously meant 'yes, yes, yes!'\n\nShe grabbed my iPad and said, \"Let's see what you've been watching.\"\n\n\"What? No!\" I said, reacting a little too guiltily.\n\nShe moved off the bed, looking so hot in all red lingerie and nylons, and typed in my password, \"So that automatically makes me wonder: what is my man so ashamed to be caught watching?\" she asked, her tone playful and curious.\n\n\"Nothing!\" I blurted quicker than thought, which of course was patently untrue.\n\nTruth was, we hadn't really kept any of our fantasies a secret from each other or details about our sexual pasts.\n\nI had been in two threesomes, both two guys and a girl, but no gay stuff. I'd gotten blown by my ex-girlfriend's sister two days after we broke up, and I joined the mile-high club with a woman in her sixties when I was twenty.\n\nPam has been in a threesome too, where she was spit-roasted, took it up the ass once but didn't really like it, gave simultaneous head to a trio of guys at a party while really drunk, and had twice been with women.\n\nMy biggest fantasy was watching her with another woman.\n\nHer biggest fantasies were being gangbanged, and also BBC.\n\nNeither had been fulfilled, but when we were younger and wilder and hornier, she would tell me in vivid detail of her past experiences, and even make some up, based on girls we'd met that day or week.\n\nI bought a black ten-inch dildo that was four inches bigger than my cock, and would fuck her with it on occasion.\n\n\"Ohhhhh,\" she said, surprise in her voice.\n\n\"What?\" I asked nervously.\n\n\"It must be that 'nothing' you mentioned,\" she said, as she turned up the volume.\n\n\"You love big cock,\" a feminine voice said from my iPad. \"You were made to suck big cock.\"\n\n\"I can explain,\" I said, although I wasn't sure I could. All my other fantasies I had shared in the past were heterosexual, or nylon based, or her with another woman, and this was none of those.\n\n\"You're a sissy faggot, born to please alpha males' bigger dicks,\" the voice continued, as my wife watched with an undeniable look of shock and confusion on her face.\n\n\"Please... shut it off,\" I pleaded, as I felt my cheeks burn hot with embarrassment.\n\n\"Say it, say you love sucking cock,\" the voice ordered.\n\n\"Do you usually obey her orders?\" Pam asked.\n\n\"Please stop it,\" I repeated, as the truth was, I always repeated any phrase I was asked or ordered to repeat by the all-powerful feminine narrator.\n\n\"Say it, cock sucker,\" the voice said with sexy authority, \"You're a sissy faggot whose sole purpose is to worship big fat cock.\"\n\n\"Oh, God!\" I said, mortified.\n\nPam finally paused the video, moved back onto the bed and asked, a look of concern in her voice and eyes, \"So, are you gay now?\"\n\n\"No, no, no,\" I said.\n\n\"So, you don't like men?\"\n\n\"I don't find men attractive at all,\" I stressed.\n\n\"Not even Ryan Reynolds?\" she asked with a playful grin, my answer seeming to reassure her.\n\n\"Well, maybe Ryan Reynolds,\" I smiled; he was number one on her list of five celebrities she had my permission to fuck if the opportunity ever presented itself.\n\n\"But you want to suck a cock?\" she asked, her question somehow making my cock flinch, as it sounded so surreally hot coming out of her mouth.\n\n\"I don't know,\" I replied sheepishly. After a pause I added, \"Sometimes I wonder.\"\n\n\"About sucking a cock?\" she asked.\n\n\"Yeah,\" I admitted.\n\n\"Huh,\" she said, in a tone that didn't tell me anything other than she seemed as baffled by this as I did.\n\n\"I would never do it,\" I clarified after an extremely long silence.\n\n\"Never?\"\n\n\"No more likely than you eating a pussy,\" I said.\n\n\"Or my getting fucked by a big black cock?\" she smiled wickedly, as her hand went to my raging hard-on.\n\nPlaying along, seeing she wasn't completely disgusted with me from what she'd just discovered, I said, \"Well, only if I got to suck it first.\"\n\n\"That seems fair. And would you spit or swallow?\" she asked playfully, as she slowly stroked my cock, rolling her finger around its head.\n\n\"Ooh,\" I moaned, as that always felt so good. \"Well, I'd swallow of course.\"\n\n\"Like a good cock sucker,\" she purred.\n\nI don't know why I said it, other than the conversation was already way past surreal, \"Or maybe I'd take a facial.\"\n\n\"That would be so hot to watch,\" she said, as she lowered her head down to my cock.\n\n\"That would turn you on?\" I asked, wondering what a facial would indeed feel like. Pam used to take facials, but that had been a few years ago at least. I, of course, also wondered what cum would taste like. Pam still swallowed on occasion... like on my birthday or Father's Day.\n\n\"I don't know,\" she admitted, as she seemed to be processing this revelation.\n\n\"It's just a fantasy,\" I reminded her.\n\n\"Well, your fantasy of sucking a big cock has you rock hard and leaking pre-cum,\" she pointed out.\n\n\"That's all you,\" I said, assuming it was a mixture of the conversation, her lingerie and her hand.\n\n\"Nope,\" she asserted as she licked the pre-cum off my head, \"I think you're horny thinking of a big dick passing between your lips.\"\n\n\"Oh, God,\" I moaned, which gave away it was definitely that, as well as her talking about it so nastily.\n\n\"Would you like a big cock in your mouth right now, baby?\" she asked, as she swirled her tongue around my cock.\n\n\"Oh fuck,\" I moaned, as her words, her tongue, and her hand slowly stroking me, had my balls already boiling.\n\n\"Tell me, baby,\" she purred, as she deep throated my cock for a moment. \"Tell me what you want to do to a big fat dick.\"\n\n\"Fuck,\" I groaned, afraid to say the words, but also wanting to say them. \"Yes,\" I admitted.\n\n\"Yes, what?\" She asked, as she stroked my cock. \"Yes, you want to be on your knees with a big fat cock in your mouth?\"\n\n\"Oh, God,\" I moaned, about to come.\n\n\"I'd love to see you on your knees bobbing on a big dick, while I had a pretty blonde eating my pussy,\" she said, which was too much to handle and sent me over the top.\n\n\"Oh, fuck,\" I grunted, and trembled as I gave her an accidental facial, my first rope splattering directly onto my wife's cheek.\n\n\"Oh, you do want a big fat dick between your lips,\" she continued jerking me off as she the second rope hit her chin, and then she opened wide to catch the rest of my unusually big load.\n\n\"Fuck,\" I repeated, my body still spasming in the aftermath of the intense orgasm.\n\n\"I bet you'd also love to see me with my head buried in some hot chick,\" she added, as she took my cock back in her mouth and nursed the last remnants of my cum out.\n\n\"So much,\" I admitted, this the most intense orgasm I'd had in years.\n\nA moment later she sat up and asked, \"How long have you been thinking of sucking a cock?\"\n\n\"A few months,\" I admitted.\n\n\"Why didn't you tell me?\" She asked.\n\n\"It seemed a little gay,\" I said. \"You know, unmanly.\"\n\n\"It's a lot gay,\" she smiled. \"But also kind of hot.\"\n\n\"Really?\" I asked.\n\n\"Yeah, I can't say I'd ever fantasized or even thought of a guy sucking another guy, but now that you got caught and I got a visual in my head, it's really quite intriguing,\" she admitted.\n\n\"I probably could never do it,\" I said, \"but the idea is hot.\"\n\n\"I probably could never get triple teamed,\" she shrugged, as she straddled my face, \"but the idea is hot.\"\n\n\"You dirty slut,\" I teased, something I used to call her back in our wild days, but that had been years ago.\n\n\"You sissy cock sucker,\" she countered, as she lowered her very wet pussy onto my face.\n\nI brought her to a quicker than usual orgasm (my cock sucking fantasy apparently turning her on too), and we drifted to sleep.\n\nThat was three weeks ago.\n\nUnfortunately, the next morning I was worried what our conversation would be, any next day regrets, any deeper questions with embarrassing answers, but instead she seemed to pretend it didn't happen.\n\nLife went back to normal.\n\nWhich meant no more wild sex.\n\nYet tonight she seemed ready for a long evening of wild passion.\n\n.....\n\nHer feet kept rubbing my cock ever so slowly, a constant tease, throughout dinner. As we finished eating, I asked, \"Do you have room for dessert?\"\n\n\"Actually, we're going somewhere else for dessert,\" she informed me, as she put some extra pressure on my cock.\n\n\"We are?\" I asked. \"Where?\"\n\n\"That is a surprise,\" she said, giving me a mischievous look I hadn't seen in a long time, other than her wickedness a few weeks ago when she talked all nasty about my sucking a dick.\n\n\"You know I hate surprises,\" I said.\n\n\"And yet I'm not telling you,\" she shrugged, \"so deal with it,\" as she looked at her watch. \"Actually, we need to get going ASAP. We don't want to be late.\"\n\n\"Late for what?\" I asked, as she moved her foot away.\n\n\"Dessert, silly,\" she said, as she finished her third glass of wine.\n\n\"You're tipsy,\" I pointed out.\n\n\"You know what happens when I'm drunk,\" she said, which was true. She got wilder and her boundaries became more liberated.\n\n\"It's usually a good time for me,\" I smiled, as I finished my third scotch.\n\n\"A very, very, good time for you,\" she smiled, as the waitress returned. \"May we have the bill please?\"\n\n\"No dessert?\" she asked.\n\n\"No, we have other...\" my wife paused and then added, \"... plans.\"\n\n\"Ohhh,\" the waitress smiled knowingly. \"I'll be right back.\"\n\nAs she left, in a black skirt and matching pantyhose Pam asked, \"Think her pussy would taste good?\"\n\nI actually spewed some of my precious scotch onto the table.\n\n\"Or would it be hotter with her between my legs?\"\n\n\"What's gotten into you?\" I asked, shocked by her naughty words.\n\n\"Not your dick,\" she shrugged. \"Remember last time? You came before you could fuck me.\"\n\n\"Sorry, I...\" I began, and then wasn't sure what to say. Sorry, the idea of sucking a dick got me too excited, and I came before I could make love to my wife?\n\n\"It's okay, you wanted dick that night, and so did I,\" she shrugged again, \"and you were thoughtful to give me some very good head,\" a tipsy Pam also a much franker Pam.\n\n\"Please, keep it down,\" I said, looking around. No one seemed any wiser to our blunt conversation, but still.\n\n\"Sorry, I'm just really horny,\" she admitted.\n\n\"I am too,\" I said, her nylon foot rub having kept me revved up for the last hour.\n\n\"For pussy or dick?\" She asked.\n\n\"Pussy,\" I answered.\n\n\"Too bad,\" she said, before adding, \"and you never answered my question.\"\n\n\"What question?\"\n\n\"Would you rather see me licking another woman, or another woman licking me?\"\n\n\"Couldn't I have both?\" I asked.\n\n\"I imagine you can,\" she said, as the waitress arrived. I noticed she said 'can' instead of 'could', which was an interesting choice\n\n\"You look beautiful,\" my wife complimented the college-aged waitress as she handed me the bill.\n\nI took the bill and opened it as the waitress replied, \"Thank you, you're very pretty, too.\"\n\nI handed her my credit card and she slipped it into the handheld machine. \"Isn't she beautiful, Mike?\"\n\n\"Yes, she's very pretty,\" I said, playing along and knowing this wasn't a trap like many wives would spring.\n\n\"No, the word is 'beautiful',\" Pam insisted. \"Look at her. Beautiful face, beautiful full body, and she's even wearing pantyhose.\"\n\nThe waitress's face went red as I nodded, \"Yes, she beautiful.\"\n\n\"Is she the kind of woman you'd like to see me with?\" Pam asked, as the waitress handed me my receipt.\n\n\"Pam!\" I gasped, knowing this was making the waitress uncomfortable.\n\n\"What? I'm just getting some guidelines,\" Pam shrugged.\n\n\"I'm sorry,\" I apologized. \"My wife has had a little too much to drink.\"\n\n\"No worries,\" she smiled awkwardly.\n\nAs she left, Pam stood up, as did I, and she whispered in my ear, \"I bet you'd love to see me with my face buried between her legs.\"\n\n\"I wouldn't look away,\" I admitted, as she tugged on my ear.\n\n\"Let's go, the night is just getting started,\" she said, giving my cock a quick squeeze. \"I see you're hard.\"\n\n\"Have been all night,\" I acknowledged.\n\n\"Well, wait until your dessert,\" she said, taking my hand and leading me out of the restaurant.\n\n\"I am starving,\" I said, as I followed her.\n\nOutside, an Uber was already waiting for us. \"I ordered it while you were imagining my head buried between our waitress's legs.\"\n\n\"I'm going to come in my pants, if you keep talking like that,\" I pointed out, as I followed her into the Uber.",
        "The Uber started driving and I asked again, \"Where are we going?\"\n\n\"For dessert,\" she repeated, before leaning in and kissing me passionately. The kind of kiss that sparks inner fires, the kind of kiss that never happens once you have kids. Once the passion settles down into love and commitment.\n\nWe kissed for seven minutes. No more, no less.\n\nJust kissing.\n\nUntil the Uber driver said, \"We're here.\"\n\nI looked up and saw we were in front of a house. \"Who lives here?\"\n\n\"Dessert,\" she said unhelpfully, as she kissed me quickly and got out of the car.\n\n\"Thanks,\" I said to the Uber and got out on my side, still confused, actually even more confused.\n\nShe took my hand and said, \"Ready for our dessert?\"\n\n\"Yes, but I'm still confused.\" I said, as she led me up the walkway. \"Who lives here?\"\n\n\"Kimberly and Doug,\" Pam answered, two names that meant nothing to me.\n\n\"Who?\" I asked as she rang the doorbell.\n\n\"You'll see,\" Pam warbled, all sing-song.\n\nA moment later the door opened and a beautiful young blonde answered it, \"Hi! You made it!\"\n\n\"We did,\" Pam said, as I checked out the blonde-haired, blue-eyed beauty, especially her legs, that were showcased in black nylons, her cute red painted toenails open for viewing without any shoes on.\n\n\"Come on in,\" she invited us warmly as I confirmed to myself I'd never met this woman before in my life. Some of Pam's friends I couldn't name or even pick out in a police line-up, but there is no way I wouldn't remember this hottie.\n\n\"Thank you,\" Pam said, leading me, still by the hand, into the home.\n\nPam slipped out of her heels and catching on, me my shoes, and we followed the blonde, whose nylons I was now discovering had a seam going up the back of them... so hot.\n\nShe led us into a living room, where Kimberly introduced her husband to us. \"Honey, this is Pam and Mike; Pam and Mike, this is my man Doug.\"\n\nDoug got up from the couch, walked over to me and shook my hand, \"Nice to meet you.\"\n\n\"Uh, you too,\" I said, still completely confused why we were here.\n\n\"You're even cuter in person,\" Pam said to Doug.\n\n\"As are you,\" Doug said, kissing my wife's hand. He was in his mid-twenties I would guess, his wife maybe even younger. He also was built like a brickhouse... or a linebacker.\n\n\"And you, Mike,\" Kimberly smiled, literally checking me out, her gaze travelling way south, \"are way hotter than I imagined.\"\n\n\"Uh, thanks,\" I said, flattered to get a compliment from such an utter beauty, yet still completely baffled at what was happening and how Pam knew this couple.\n\n\"Mike has no idea why we're here,\" my wife revealed.\n\n\"For dessert, is all I was told,\" I joked awkwardly.\n\n\"You didn't tell him?\" Kimberly asked, surprised.\n\n\"I wanted it to be a surprise,\" Pam said.\n\n\"Well,\" Kimberly said, smiling at me, \"you, my new friend, are in for one hell of a surprise.\"\n\nAnd before I could speak, she walked over to my wife and kissed her. Passionately.\n\nMy eyes went wide and my jaw dropped like Roger Rabbit as I witnessed two women, one being my wife, the other being perhaps the prettiest woman I'd ever seen in person, kissing in front of me. My wife returned the kiss.\n\nDoug offered, acting totally unconcerned about his wife making out with mine, \"May I get you a drink?\"\n\n\"A scotch, if you have it,\" I answered distractedly, not taking my eyes off the kiss.\n\n\"That's what I'm drinking, too,\" he said.\n\n\"Great,\" I replied, struggling to continue the conversation even as I watched the shocking turn of events before my eyes. Why had Pam brought us here? She couldn't be planning a foursome, could she? That wasn't something we'd seriously talked about... like ever.\n\nWhen the kiss ended, Pam said, \"That's right, I told him we were coming here for dessert.\"\n\n\"Hmmmmm,\" Kimberly smiled at her. \"Well, your desert has been marinating for a couple of hours.\"\n\n\"Sounds delicious,\" my wife replied.\n\n\"Do you want it right here, right now?\" Kimberly asked, as she glanced over at me.\n\n\"I do,\" she nodded. \"I'm utterly starving for some of your homemade dessert.\"\n\n\"Well, come and get it,\" Kimberly said, as she raised her dress up and over her head, and my wife dropped to her knees before her.\n\nI gasped at the stunning, cock raging, sight of this beautiful blonde suddenly wearing only a garter-belt, stockings and large firm tits, as well as my wife now on her knees just inches away from a completely shaved pussy.\n\nMy wife looked at me for the first time since she'd kissed Kimberly and asked, \"Darling, may I begin my dessert?\"\n\n\"Y-y-yeah,\" I stammered, turned on but stunned. I never thought I'd ever get to see my biggest fantasy of my wife with another woman.\n\n\"You're sure?\" she asked, as Kimberly's hand went to the back of her head.\n\n\"Definitely,\" I nodded, as I watched my wife turn her head towards the pussy as it was gently guided closer by Kimberly.\n\n\"There you go,\" Kimberly moaned ever so softly as my wife began licking her. She then looked at me and asked, \"Does seeing your wife eating another woman's pussy turn you on?\"\n\n\"Yeah,\" I nodded, staring at the two of them.\n\n\"Here ya go,\" Doug said, drawing me out of my stunned stare as he handed me a glass tinkling with floating ice.\n\n\"Uh, yeah, thanks,\" I said, taking the glass.\n\n\"First time seeing your wife with another woman?\" he asked, as he stood beside me and watched my wife servicing his.\n\n\"Yeah,\" I said, as we stood side by side, each watching our wives or each other's wives in the ultimate act of male fantasy.\n\n\"Your wife is pretty hot,\" he complimented.\n\n\"Yours too,\" I responded back, still shell shocked at what I was witnessing, and the outwardly casual conversation we were having.\n\n\"It's a little surreal the first time,\" he said.\n\n\"Yes,\" I agreed, \"yes, it certainly is.\"\n\n\"But it's fucking hot as hell,\" he added.\n\n\"Yes, yes indeed it is,\" I repeated, unable to say much more than the bare minimum.\n\n\"You two,\" Kimberly queried archly, as she enjoyed my wife's tongue. \"Why are you still dressed?\"\n\n\"Just admiring you two beautiful women,\" Doug complimented.\n\n\"Actually, why are you still dressed?\" Kimberly wanted to know, looking down at my wife, as she let go of the back of her head.\n\n\"Good question,\" my wife replied as she stood up, turned around and asked, \"Would you unzip me?\"\n\n\"Of course,\" Kimberly agreed, as she slowly, seductively, pulled the zipper down.\n\nOnce unzipped, Pam let her dress drop to the floor to reveal she too was in a garter-belt and stockings, no panties, her nylons mocha coloured, my favourite, and the garter belt black. She was also wearing a lace black bra I'd never seen before. How long has she been planning this?\n\n\"How does she look, boys?\" Kimberly asked.\n\n\"Fucking hot,\" Doug said, as he stared at my wife. A mixture of jealousy and pride swarmed through me. Jealousy as she was my wife and I wasn't sure I liked another guy seeing her like this regardless of our past role playing; pride as I conversely loved the idea of someone else seeing my wife the way I saw her.\n\n\"But this bra has got to go,\" Kimberly said.\n\n\"Of course,\" my wife agreed as Kimberly unclasped it and tossed it at us two horny husbands.\n\n\"Want to keep dining on your dessert?\" Kimberly asked, as she turned my wife around to face her.\n\n\"God, yes,\" my wife said, displaying the same lustful hunger she had when we were young and wild.\n\n\"Boys, do you want to watch Pam eat my pussy?\" Kimberly asked in a sultry way.\n\n\"Fuck yeah,\" Doug said in the same way you'd be excited if your favourite team had just signed the top free agent.\n\n\"Yeah,\" I agreed.\n\n\"Just yeah?\" Kimberly asked me.\n\n\"Yeah, honey,\" Pam asked me. \"Haven't you fantasized about my eating a younger woman's pussy for years?\"\n\n\"Yes, baby, I want you to eat that young ripe cunt,\" I said bluntly, deciding to go along with this totally unexpected scenario without any reservation, and employing the 'C' word which I used very sparingly in the heat of passion, which was the only time my wife allowed the word. When she horny and drunk the word dissolved her inhibitions, any other time it was a major no-no.\n\n\"That's much better,\" Kimberly approved, as she took my wife by the hand and led her to the couch. She sat down, spread her legs wide open and said, \"Go ahead, Pam, show your man what kind of cunt-licking lesbian you can be.\"\n\n\"Mmmmmm, yes,\" Pam said, not looking at me at all, transfixed just on the pussy before her, as she lowered herself again to her knees and dove back into the wet pussy.\n\n\"And you two,\" Kimberly instructed, \"get yourselves fucking undressed.\"\n\nDoug downed his drink, set it on the table and pulled his t-shirt over his head, he the only one not really dressed up for the night.\n\nI followed his lead, downing my drink in one throat-burning swallow, placed the empty glass down and took off my tie.\n\n\"That's it, for someone who hasn't eaten pussy in decades, you're a natural,\" Kimberly moaned. What had Pam shared with her? And when?\n\n\"It's been way too long,\" my wife responded as she lapped away.\n\n\"She's making up for lost time,\" I joked, going with the flow, as this 'dessert' was definitely happening.\n\n\"You will be too, very soon,\" Kimberly replied with a sly smile.\n\n\"I hope so,\" I said, as I unbuttoned my dress shirt, the idea of fucking Kimberly having my cock raging hard. As was, of course, watching my wife lick her pussy. It was so surreally hot.\n\n\"Tonight is all about living out your secret fantasies,\" Kimberly said.\n\nI took off my shirt as she checked me out, \"Nice pecs.\"\n\n\"I work out,\" I said, happy to get a compliment about my body, something oddly my wife hadn't done since I began working out four months ago, losing twenty pounds and now at my proper weight. I'd gained a lot of muscle as well, and my beer gut was gone.\n\n\"So I see,\" she approved. \"But now I want to see your dick.\"\n\n\"Oh, okay,\" I said, as I glanced at Doug for the first time and realized he was already completely naked, and his large shaved penis was standing erect. It was then, suddenly, even though it should have been obvious from the beginning, that I realized Kimberly's meaning behind 'you will be too, very soon' as well as what my wife was planning my dessert to be. Doug's dick. His very large dick.\n\n\"Doug has a huge dick,\" Kimberly informed me as if I hadn't already noticed.\n\n\"A lot bigger than mine,\" I admitted as I undid my belt, suddenly feeling self-conscious about my size. I was six inches. About as average as a dick can be. Not too big, not too small... my wife said it was just right. Yet I couldn't help but wonder what she would think once she got that approximately nine-inch monster inside her.\n\n\"Size isn't everything,\" Kimberly said, although she didn't say 'size doesn't matter' which, of course, is one of the biggest lies in the world. Size always matters... in everything. Dick size, TV inches, diamond ring carats\n\nPam looked up from her submissive position between Kimberly's nylon-clad legs and checked out my new friend as I pulled my pants down. \"Oh my, it's as big as you said it was!\"\n\n\"Nine inches of mouth-filling, pussy-pounding and ass-plugging perfection,\" Kimberly described wickedly and vividly, as I wondered if Kimberly was a take-it-in-the-ass kind of girl... it seemed that she was.\n\n\"Delicious,\" my wife said, checking the big dick out.\n\n\"As is this,\" Kimberly said, as she grabbed my wife's head and guided it back between her legs.\n\n\"Yes, it is,\" my wife concurred before she resumed her tasty dessert.\n\nIn just my SAXX underwear, I paused, again looking at Doug's big dick. Part of me was insecure about my size as well as how my wife would react in future when given the opportunity to have it back inside her; another part of me was curious what Doug's would feel and taste like in my hand and in my mouth. I was pretty sure that was why we were here, for me to suck my first dick. Yet now that the moment was suddenly here, I was a bundle of nerves.\n\n\"Underwear too, abs guy,\" Kimberly ordered.\n\n\"Yes. Sorry,\" I apologized, \"it's just your husband and I are in different stratospheres in dick size.\"\n\n\"I love dicks of all shapes and sizes,\" she asserted.\n\n\"Okay, here goes,\" I said, as I pulled my underwear down.\n\n\"That's a decent-sized dick,\" Kimberly said. \"Isn't it, Doug?\"\n\n\"Yeah, man, that's nothing to be ashamed of,\" he said, checking out my dick.\n\n\"Thanks,\" I said, thinking that was the weirdest thank you I'd ever given anyone.\n\n\"Slowly stroke yourself while you watch your wife get me off,\" Kimberly ordered.\n\n\"Can do,\" I smiled.\n\n\"That's it, Pam, suck on my clit,\" Kimberly moaned, as she closed her eyes and allowed my wife to pleasure her.\n\n\"Looks like my wife is really enjoying your wife,\" Doug said conversationally, as he began slowly stroking his cock.\n\n\"Yeah, and it seems my wife is really enjoying scarfing down your wife's dessert,\" I replied.\n\n\"Yeah, there's nothing hotter than two women playing together,\" he said.\n\n\"Agreed,\" I nodded, as my eyes went back and forth between my wife licking pussy and Doug slowly stroking himself as I stroked myself.\n\n\"A guy sucking another guy's dick is pretty fucking hot too,\" Kimberly said.\n\n\"Yeah, that's pretty hot too,\" Doug agreed, as he lowered himself before me. \"May I?\"\n\n\"Doug is an amazing cock sucker, way better than any woman,\" Kimberly informed me, which sounded so crazy to hear out loud.\n\n\"Um, I, um,\" I began, stunned as he began to stroke my cock. I had imagined sucking cock, but I had never imagined getting my own cock sucked by a guy. This wasn't something I was remotely prepared for.\n\nPam lifted her head, her face glistening with wetness and said, \"Let him suck your cock, baby.\"\n\n\"You sure?\" I asked, even though she'd just said as much.\n\n\"Yeah, I want to see you get your dick sucked by a hot young man,\" she confirmed.\n\n\"Okay,\" I said, as I watched Doug open his mouth and take my cock into it.\n\n\"Oh, fuck,\" I groaned, stunned by the reality of what was happening. I was getting my dick sucked by a ridiculously good-looking, well-hung man while my wife watched.\n\n\"Oh yeah, baby, suck that dick,\" Kimberly encouraged, as she again grabbed my wife's head, this time more roughly back into her pussy. Kimberly watched her husband deep throating my... adequate?... cock as she began grinding on my wife's face.\n\n\"Oh, fuck,\" I repeated, as he deep throated my cock with ease.\n\n\"Oh yes, baby, suck that dick, swallow it whole,\" she encouraged him with a moan. Apparently, watching her husband suck dick turned her on the same way watching my wife eat pussy was turning me on.\n\nI couldn't believe how good it felt to have a guy sucking my dick. It didn't feel gay at all, just amazing. And although my wife delivered a great blow job, there was something extraordinary about what Doug was doing. His lips were like a vacuum, his tongue was also active, and there was so much saliva inside his mouth that I felt my cock was in a hot tub with the water jets turned on.\n\n\"I'm close Pam, don't stop baby, eat my pussy while my man sucks that cock,\" Kimberly exhorted, seeming close to orgasm.\n\nUnfortunately, the amazing blow job, my wife going down on another woman, Kimberly's intense breathing and verbal encouragement, and all my wife's earlier foot rub teasing at the restaurant had my balls boiling in just a minute or so of Doug's sucking.\n\nI warned, a little embarrassed I was about to come so quickly, \"I'm going to come.\"\n\n\"Come in my man's cock sucking mouth, Mike, he loves a big hot load of man cum,\" Kimberly said, as Doug began bobbing faster and she began grinding faster on my wife's face.\n\n\"Suck that dick, swallow that load,\" she encouraged just before she screamed, \"Oh, fuck yes Pam, you're making me come.\"\n\nAs Kimberly came on my wife's face, I came down her husband's throat, as I grunted and spewed a few big wads of cum into his amazing mouth. Unlike my wife, who slowed down while I erupted, he didn't miss a beat as he swallowed every drop, while continuing to suck my cock with expert perfection.\n\n\"Oh man, that's so good,\" I groaned, as he kept extracting my load.\n\n\"Isn't he a great cock sucker?\" Kimberly asked, as she enjoyed her own orgasm, my wife still between her legs, assumedly licking up her cum.\n\n\"The best,\" I agreed, this easily the best blow job I'd ever experienced, albeit due to my own lack of control, also the briefest... usually I could last quite a while when getting head, but tonight I was completely at his mercy.\n\n\"Yeah, the Boy Scouts were really good for him,\" she said scandalously. \"So much dick, so much downtime.\"\n\n\"I just collected merit badges,\" I said, thinking my experience was a lot different.\n\n\"He collected gallons of cum,\" Kimberly said, as she finally released my wife's head.\n\nMy wife looked up and said, \"Thanks, that was the best dessert ever.\"\n\n\"I'm told my pussy is quite tasty,\" Kimberly said.\n\n\"They were telling the truth,\" Pam said, as she looked over to me, still with my dick in another guy's mouth. \"Ready for your dessert?\"\n\n\"Yeah,\" I nodded, thinking I'd possibly never have an opportunity like this again.\n\nKimberly said, \"Come sit down beside me baby, and let Mike return the favour.\"\n\nMike allowed my cock to leave his mouth and wordlessly walked over and sat down beside his wife.\n\n\"And I'm a little hungry too,\" Kimberly said, as she stood up, pulled my wife up and kissed her. She then playfully pushed her onto the couch beside her man.\n\n\"Well, get over here, Mike, that dick isn't going to suck itself,\" Kimberly dicktated, before burying her face between my wife's legs.\n\n\"Oh yes, fuck,\" Pam moaned, as she got licked. \"Get over here, baby, I want to see you get your dessert.\"\n\nAs I walked to the couch, she added, \"Because I really want to watch you suck a cock.\"\n\n\"This is so crazy,\" I said, as I reached them.\n\n\"But it's what you want, right?\" She asked, as I looked at Kimberly between her legs, slowly exploring my wife's pussy.\n\n\"Yeah, but....\" I began.\n\n\"No buts,\" she said, interrupting me and then barked an order at me in the most dominant tone I'd ever heard come from her, \"Get on your knees and take that big hard cock in your mouth.\"\n\n\"Okay,\" I said, still stunned by the whole domino of events that had led us to this moment. I lowered myself to my knees, a position I had imagined being in for many months, although not with my wife literally right beside me. Her nylon leg was actually leaning against my shoulder.\n\n\"Take it in your hand,\" she ordered.\n\nI did. It was so hard. Just as I imagined a cock that wasn't mine might feel like. I stared at it. It was just so big. I couldn't fathom even trying to take it all in my mouth, but as I slowly stroked it, and stared at it with a sense of majestic awe, my mouth watered and I knew I had to suck it.\n\n\"Isn't it a nice cock?\" my wife asked.\n\n\"It's an amazing cock,\" I said, entranced by it.\n\n\"So big and majestic,\" she appraised.\n\n\"I was just thinking that very word... that it's majestic,\" I said, looking up at my wife.\n\nShe mouthed, 'I love you, baby,' before she said, \"Now make your fantasy come true. Suck his big cock.\"\n\n\"You don't have to keep reminding me it's big,\" I teased. \"I know it's big.\"\n\n\"No, it's fucking huge,\" Pam corrected me.\n\n\"Yes, it's a huge fucking cock,\" I agreed.\n\nOddly, Doug hasn't said a word during this entire weird interaction, nor had I looked up at him at all. This wasn't about Doug the man; it was about his cock. Which needed to be sucked. Worshipped.\n\nI leaned forward, lifted myself up a little and opened my mouth. A rush of adrenaline coursed through me before it even reached my mouth.\n\nA second rush of adrenaline coursed through me as I wrapped my lips around his cock.\n\n\"So hot, baby,\" Pam moaned. Her sincere encouragement made this crazy life-altering moment even better. I didn't have to feel guilty for being a (now actual) cock sucker; no, I had her undying love and support. Such acceptance is almost impossible to find in this world, and I had it from my caring life partner.",
        "I wasn't sure what to do once it was inside my mouth. Funny, I had fantasized this exact moment hundreds of times, but I hadn't actually considered what I would do when it happened... because, of course, I'd never seriously considered this would ever actually happen.\n\nSo, I swirled my tongue around his head, like Pam did to me. I always enjoyed that.\n\nDoug made his first sound during this whole wicked ordeal, just a soft groan, but one that let me know he was liking it.\n\n\"Baby, Kimberly is eating my pussy so good right now,\" she said.\n\nPart of me wanted to watch that, yet I had a big task at hand. Suck this amazing cock. So I started slowly bobbing.\n\n\"That's it, baby, bob on that magnificent cock,\" she moaned.\n\nKimberly spoke a moment later, \"Dear, do you like your new cock sucker?\"\n\n\"Yeah, he's a natural,\" Doug responded.\n\n\"Yeah, I bet now that he's had a taste, he'll come over here, or even go to you at work, and suck you anytime you need a cock sucker,\" Kimberly said, as I wondered if I would do just that. Probably. This was easily the biggest sexual rush of my life, and I didn't want it to end.\n\nSo, as they talked about me in glowing terms, the three of them, if the word 'glowing' works in this context, I just continued getting as acquainted with the big cock as I could as I kept bobbing, trying to take just a little more of it each time.\n\n\"I'm sure he'd crawl under your desk, suck you in your car, or come over at a moment's notice,\" my wife spoke for me.\n\n\"I'll likely have a couple loads a week for him if he wants them,\" Doug agreed.\n\n\"Does that sound good? Do you want to be Doug's regular cock sucker, baby?\" my wife asked.\n\n\"His regular cum deposit?\" Kimberly added.\n\n\"Suck on my balls, Mike,\" Doug ordered.\n\nI took his cock out of my mouth and looked up at my wife and admitted, \"I'll suck this cock anytime and anyplace... with your permission, of course.\"\n\n\"You have it, baby,\" Pam approved, \"so long as you let me be a regular cunt-licker,\" as she took the back of Kimberly's head and guided it back between her legs.\n\n\"That goes without saying; I just can't believe this,\" I said again, as I lowered my head to his big shaved balls. I should shave my balls, I thought to myself as I sucked his bag into my mouth and found a big ball. I wondered how anyone possibly could be so hairless. I then recalled the scene in Bad Moms Christmas, where a stripper got his entire lower region shaved. What would that even cost?\n\n\"I can't believe it either, baby,\" she moaned. \"But it's fucking amazing.\"\n\nI found the other ball and washed it with infinite care, before moving back up to his cock and taking it back in my mouth. I couldn't believe how natural having a cock in my mouth felt. How good it made me feel. Shit, my cock was already hard again, something that didn't happen too much anymore, my recovery time after an orgasm usually being hours, not minutes.\n\n\"Yes, baby, I love watching you suck his dick,\" Pam encouraged with a moan.\n\nThe idea of my sucking dick turning her on, just like my watching her eat pussy was turning me on was wickedly wild.\n\nI began bobbing faster and Doug instructed, \"Use your hand to stroke me, too.\"\n\nI obeyed, using my left hand to slowly stroke his cock, my masturbation hand, even though I'm normally right-handed, while trying to bob at the same pace.\n\n\"You look so hot with a cock in your mouth, baby,\" Pam moaned.\n\n\"He's a natural,\" Doug groaned again, as I found a rhythm of sucking and stroking in unison.\n\n\"Yeah, he likes to be the best at everything he does,\" Pam said.\n\n\"He's going to be a great cock sucker,\" Doug moaned. \"He's getting better by the minute.\"\n\n\"Your cock looks great in his mouth.\"\n\n\"And you look hot with my wife munching on that pussy of yours,\" Doug replied back.\n\n\"She's one hot number,\" Pam moaned.\n\n\"Yeah, she's my wild little minx.\"\n\n\"You're a lucky man,\" Pam moaned, before adding, \"and she's a lucky girl.\"\n\n\"You two are pretty lucky yourselves,\" he reciprocated.\n\n\"Yes, we are,\" Pam agreed, the conversation so strange as they were both being serviced by each other's significant other.\n\nYet they were both right. Meanwhile, I kept multitasking: sucking and stroking. What I wanted now was to make him come. So I could taste his cum.\n\nPam moaned, \"Yes baby, suck that big cock. Go for that yummy dessert.\"\n\n\"I want my dessert too,\" Kimberly interjected.\n\n\"Keep doing what you're doing and you'll get it real soon,\" Pam replied, her breathing getting a little more erratic... a hint that her orgasm was imminent.\n\n\"Keep sucking Mike, you have a great mouth,\" Doug complimented me, which was crazy to hear.\n\n\"God, I love seeing you sucking his dick, you man-slut,\" Pam moaned. \"I love a cock between those cock sucking lips.\"\n\nHer name calling and encouraging words turned me on even more. I wanted to be a great cock sucker, and still her husband. When I first started getting turned on by the idea of sucking dick, I was worried. I feared if I ever made this fantasy into a reality, I'd have to do it secretly and cheat on my wife... and perhaps destroy my marriage. Yet as it was turning out, I could have it all: suck my cock and have my wife's pie as well.\n\n\"Oh yes, eat my pussy while my husband sucks your man's big dick,\" my wife moaned, her seeming to be as turned on by my dick sucking as she was from getting her pussy eaten by this ridiculously hot younger woman.\n\n\"Come all over my face,\" Kimberly begged.\n\n\"Oh yes, suck that dick, baby, get that cum,\" my wife moaned loudly.\n\n\"I'm close, Mike,\" Doug warned.\n\n\"Oh yes, my faggot baby, swallow that load,\" Pam continued to encourage and demean me, as I bobbed faster, stroked faster wanting that load, wanting to impress my wife and somehow accepting at the moment I was a faggot.\n\n\"Oh yeah, shit,\" Doug grunted a few seconds later.\n\n\"Oh yes baby, swallow that cum, take it all down, my cock sucking husband,\" she moaned loudly, clearly near her own orgasm.\n\nAnd as warm, gooey cum shot into my mouth, my wife yelled, \"Yes, yes, yes!\"\n\nDid she come from the oral licking, or from watching me swallow a load? Or both? It didn't matter, as I slowed down and swallowed a creamy load of man-cum.\n\nI'd been worried that when I sucked a cock, if I ever did suck a cock, I'd feel gay or disgusted with myself... I did not.\n\nI'd worried I would hate the taste of cum... I did not.\n\nNo, I felt another rush of adrenaline as I swallowed his entire load.\n\n\"Shit, that was great,\" Doug groaned.\n\n\"I knew he'd be a great dick smoker,\" my wife said, even while her orgasm was clearly going through her.\n\n\"Yeah, I've never had a first timer suck me that well,\" he said.\n\n\"And I doubt it will be his last,\" my wife said.\n\nI allowed the cock to slip out of my mouth and said, \"It definitely will not be my last.\"\n\n\"Come fuck me, Doug,\" Kimberly ordered, \"unless Mike, you want to sample some strange.\"\n\n\"You can fuck my wife if you want, man,\" Doug offered, even as his cock was still hard in my hand.\n\n\"We haven't talked about that,\" Pam said, speaking for me and then added after a couple seconds' pause, \"yet.\"\n\n\"We'd love to have you guys over again and perhaps play even more,\" Kimberly said.\n\n\"I think we'd like that too,\" Pam said. \"But for tonight, I'd decided it would just be same sex exploration.\"\n\n\"I understand,\" Kimberly nodded. As she stood up, she leaned over so I got an amazing view of her ass as she kissed my wife.\n\n\"I don't kiss men,\" Doug said to me. \"Just saying.\"\n\n\"Me neither, I just suck,\" I laughed.\n\n\"I fuck guys too, and take it in the ass, if you ever want to try those out,\" he added... just one more surprise, and he said it so nonchalantly.\n\n\"I honestly hadn't thought about that,\" I said, before joking, \"although I imagine this thing would kill me.\" I realized I was still holding it in my hand, so I finally let it go.\n\nHe laughed, \"Yes, that does take some getting used to, especially the bottoming.\"\n\n\"But once you do, it's fucking amazing,\" Kimberly said. \"But you should probably peg his ass first Pam, if he ever wants to take a real dick in his ass.\"\n\n\"Peg?\" My wife asked.\n\n\"Wear a strap-on and fuck him with it,\" she said. \"Best to begin small and work your way up. That way when you both decide his ass is ready for Doug, he'll be ready.\"\n\nMy wife's response both scared the shit out of me and turned me on. \"Ooooooh, fun!\"\n\n\"It really is,\" Kimberly said, as she turned around and straddled Doug reverse cowboy as I watched from the floor, able to see her pussy up close and personal. \"I fuck Doug a couple times a month, but these days he prefers a real dick in his ass.\"\n\n\"You have a strap-on?\" My wife asked.\n\n\"I have a few,\" she said, as she surprised me by not lowering on his cock in her pussy, but in her ass.\n\nMy eyes went wide as I watched that huge cock disappear inside her ass.\n\n\"I need to get myself one,\" my wife said.\n\n\"To fuck me with, or your man?\" she asked, as she was suddenly sitting with nine inches of dick impaled in her ass.\n\n\"Now that you've planted the idea in my head, both,\" my wife smiled, as she winked at me.\n\n\"Different dicks for different chicks,\" she moaned, as she began slowly riding the cock, \"and different asses.\"\n\n\"Yes I think you're right; I should start small first,\" my wife nodded, before asking me, \"isn't that right, honey?\"\n\n\"I'm not sure I'm ready for that yet,\" I said.\n\n\"Doesn't a dick in your ass feel amazing, baby?\" Kimberly asked, as she somehow rode that nine-incher with ease.\n\n\"Yes, baby,\" he groaned, obviously loving his dick in her ass.\n\n\"Prostate orgasms are the most intense ones a guy can have,\" Kimberly continued discussing the compelling reasons for me to get my ass fucked as she got hers fucked.\n\n\"Is that true?\" Pam asked.\n\nDoug answered, \"Oh yeah, prostate milkings are intense.\"\n\nKimberly explained, \"That's when he has a dick in his ass while he's simultaneously getting his dick sucked.\n\n\"Oh, that sounds hot,\" Pam gushed\n\n\"Yeah, and hearing my man squeal like a little girl is also fucking hot,\" Kimberly said, as she began bouncing more vigorously on the cock.\n\n\"Sold. We'll have to try it,\" Pam said in a tone that guaranteed she'd already decided we'd be trying it.\n\n\"I can help get him ready if you want,\" Kimberly added.\n\n\"I may take you up on that offer,\" Pam said as she winked at me.\n\nThis entire time I was listening to the girls talk about sodomizing me, while I watched in awe the magical disappearing act of Doug's big dick in her small ass.\n\n\"So how many strap-ons so you have?\" Pam asked.\n\n\"Six, I think,\" she said. She then asked, \"Why? Do you want to fuck me with one tonight?\"\n\n\"God, yes,\" Pam answered, before adding, \"that would keep my original same sex rule intact.\"\n\n\"How about you double penetrate me with Doug?\" she suggested.\n\n\"That would be awesome,\" Pat said. \"Honey, do you want to watch me fuck Kimberly?\"\n\n\"A million times yes,\" I replied.\n\nKimberly climbed off the big dick and said, \"I'll be right back.\"\n\n\"Hurry,\" Pam called after her.\n\nSuddenly the big hard dick was right in front of me again. It didn't faze Doug at all as he said, \"You've really got to allow yourself to begin having prostate orgasms. They may make you question your masculinity, but in fact they're very masculine.\"\n\n\"How so?\" I asked, thinking of the pain, which was my biggest concern. Sucking cock didn't seem overly gay to me, but taking it in the ass did. It made you a faggot, based on all the videos I watched. Yet Doug obviously took it in the ass and he was definitely not the least bit faggot-like, and very masculine.\n\n\"A complete man accepts that he has more than one side,\" he explained. \"What I mean by that is yes I'm a man, but I also have a feminine side, and allowing my wife to be in charge and me to be the vulnerable one, setting aside my rank in the social hierarchy I was given at birth because of my gender, not only evens the playing field relationship-wise, it also builds an unbelievable trust between us.\"\n\n\"That makes sense,\" my wife said, as she undoubtably was staring at his cock.\n\n\"Yeah, it does,\" I agreed. \"But,\" I paused. I understood his point, I was even intrigued by his philosophy, but I wasn't sure I wanted our relationship hierarchy, as he put it, altered.\n\n\"But what?\" He asked, looking down at me with genuine concern.\n\n\"It's just that I see myself as the man of the house,\" I said, \"although I know that's silly since we both make the same amount of money, give or take, and even in the bedroom it's give and take.\" I realized I was actually proving his point as I spoke.\n\n\"The only reason not to explore pegging is a complete fear of the potential discomfort of having anal sex,\" he said, \"which I totally understand. My dad is old school, I grew up as a linebacker in high school until my knee gave out, and I was raised to be very homophobic. Yet once you accept who you are, instead of what society says you are, and once you get past the sexual stereotypes society labels men with, only then can you discover your true sexual self.\"\n\n\"Is Doug going all philosophical?\" Kimberly asked as she rejoined us.\n\n\"Yes, and it's interesting,\" Pam said, standing up and accepting the strap-on from Kimberly's hand.\n\n\"Just helping this lovely couple hopefully to become liberated like you did for me,\" Doug said.\n\n\"He wasn't an easy man to break,\" Kimberly said, as she helped my wife put the harness on.\n\n\"I hate when you put it that you broke me,\" he said, his tone even hinting at annoyance.\n\n\"Sorry, baby,\" she apologized. \"I mean when I liberated you from the male hierarchy you were brainwashed into taking for granted.\"\n\n\"That's better,\" he laughed awkwardly.\n\n\"So, who gets which hole?\" Kimberly asked.\n\n\"I don't care which hole, but I want to do the fucking,\" my wife said excitedly.\n\n\"I'll lie down and let you ride me whichever way you decide,\" Doug shrugged.\n\n\"Well, lie down then,\" Kimberly ordered.\n\nDoug lay on the carpeted floor, and I moved onto the couch, my knees a little sore. A hazard of getting older and well, of being on my knees for fifteen or twenty minutes.\n\nKimberly lowered her pussy onto his cock, then looked back at my wife and asked, \"Are you going to fuck my ass, or what?\"\n\n\"Should I fuck her ass, baby?\" Pam asked me, looking so hot in her nylons and a strap-on cock.\n\nI joked, then wondered why I said it, \"Well, you'd better get in some practice for back home.\"\n\n\"Yes, I should indeed,\" she smiled and winked at me, before lowering herself behind Kimberly.\n\nShit, I technically just offered up my ass to my wife. Did I want that? I didn't know. Was I curious? Yeah. Was I ready to get ass fucked? Not sure, not sure at all. Yet I'd had those same thoughts when sucking a cock first popped out of my subconscious. No... well, maybe... no... well maybe... no... well, if the right opportunity presented itself maybe... no, no, no... well.... this cycle had continued for months until today's life-altering yes, yes, yes!\n\n\"Just shove it in my ass, baby,\" Kimberly ordered. \"Doug's big cock already gaped me.\"\n\n\"Okay,\" Pam said, as she slid her cock into Kimberly's ass.\n\n\"Oh yes, now fuck me hard, Pam,\" Kimberly moaned. \"Pound my ass.\"\n\nI watched, my cock again rock hard, as my wife ass fucked not only another woman, but a much younger woman, a beautiful woman, and was finally doing her first double penetration, although not the way round she'd fantasized.\n\nIt was so hot. Was it hotter than watching her eat pussy? Was it hotter than watching Kimberly eat hers? Was it hotter than Kimberly riding Doug's dick in her ass? I don't know. Each of these moments were around twenty-three on a scale of one to ten.\n\n\"Fuck this is fun,\" Pam said, looking back at me. She saw my dick and added, \"I see you're enjoying the show.\"\n\n\"Best live show ever,\" I smiled. My wife loved making me go to Broadway plays and musicals and they were always okay, but I never enjoyed them the way she did.\n\n\"Maybe we should make this into a musical,\" she joked.\n\n\"No!\" I stressed.\n\n\"Harder, Pam, slam that dick up my asshole,\" Kimberly demanded, as she began moving her hips and riding not one, but two cocks.\n\n\"Such a rush,\" Pam said, clearly intoxicated with the power of being the giver instead of the taker. As I watched, I couldn't help but wonder what it would feel like to be the taker. If Doug could take it in the ass and Kimberly was now moaning like a wild bitch in heat, it had to be pleasurable.\n\n\"Oh yes, fuck, you have to try this one day, Pam,\" Kimberly said.\n\n\"I don't know, I sure like being the one wearing this cock,\" Pam admitted.\n\n\"And you're fucking great at it,\" Kimberly moaned, as she bounced back to meet my wife's hard forward thrusts.\n\n\"I'm a quick learner,\" Pam said, as she bucked her hips with such nasty sensuality, I couldn't help but imagine it being me taking her cock, something I knew we'd be talking about soon, probably on our way home.\n\nBoth of you fuck my fucking holes,\" Kimberly demanded, as her moaning got louder and she seemed to be losing her coordination as her orgasm rose.\n\nI continued to watch in awe as the threesome occurred before my eyes. Did I want to play a part in it? Of course. Yet I wasn't sure where I would fit in this DP session. Alas, I just watched. As much as I'd love to plough one of Kimberly's holes, I knew it wouldn't be tonight. And next time she might be one of the ones ploughing mine. Shit, why was I even thinking shit like that?\n\n\"Oh yes, fuck, oh yes,\" Kimberly moaned, as she leaned forward and I got an amazing view of the two cocks pistoning in and out of her like a well-oiled machine.\n\n\"Come, Kimberly, come for me,\" Pam ordered, as she glistened with perspiration from the intense workout she was receiving by being the fucker.\n\n\"I will; just keep drilling my asshole,\" Kimberly moaned, clearly close.\n\nPam did, and after another couple dozen deep thrusts, and Kimberly, who was moaning loudly throughout, screamed just one word, \"Fuck!\"\n\nShe then bucked Pam off of her, rolled off Doug, and collapsed onto her back as she quaked euphorically.\n\nDoug walked over to me and slid his cock in my mouth, and unlike last time when I sucked him, this time he fucked my mouth. Not roughly, but he was in charge. I focused on breathing through my nose, which I'd read about when researching cock sucking techniques, ones I never thought I'd ever use. It was then I realized I was tasting Kimberly on his dick.\n\nWas this cheating? I hoped not. My wife didn't seem concerned as she said, \"Yes Doug, face fuck my husband's hungry mouth.\"\n\nGod, I loved her nasty talk. It was like we were young again, but this time we'd upped the ante of our sex life.\n\n\"Oh yeah, you have a velvet mouth, Mike,\" Doug said, as he pumped half his cock in and out.\n\nI moaned to let him know I appreciated the compliment.\n\n\"He looks so natural with his mouth full of cock,\" my wife said.\n\n\"Yeah, some men are just born to suck dick,\" Doug agreed. \"Too bad it took so long for him to discover his true calling.\"\n\n\"Oh, we'll be sure to make up for lost time,\" my wife said in an ominous way, like she already had detailed plans for what we would do next.\n\n\"My turn with the strap-on,\" Kimberly said.\n\n\"Are you going to fuck me?\" My wife asked all innocently.\n\n\"I'm going to pound that pussy until you come like a racehorse,\" she said.\n\nI never understood that simile, but whatever. I focused on the cock in my mouth and listening to Doug's moans getting louder.\n\n\"Pull out and come on his face,\" my wife surprised me.\n\n\"Yeah, give your slut a nice facial,\" Kimberly agreed. Obviously I was bottom bitch here, but after hearing Doug's philosophical ramble earlier, I didn't seem to mind.\n\n\"All right,\" Doug said, as he fucked my face faster, pulled out and shot a big wad right in my eye.",
        "\"Close your eyes, dummy,\" my wife yelled, but it was too late.\n\nI closed them as more cum hit me, warmer than I would have expected, but in a nice soothing way, not humiliating at all like I thought it would be.\n\n\"So hot,\" Pam said.\n\n\"Bend over,\" Kimberly ordered someone. Pam?\n\nI suddenly felt hands on my thighs and opened my one eye not coated with cum to see my wife facing me from a few inches away.\n\n\"Enjoying your Valentine's Day surprise?\"\n\n\"A little,\" I smiled, feeling cum dripping off my chin.\n\n\"Do you mind if I clean some of that cum off your face?\" she asked, and then moaned as she obviously had a dick inside her, no doubt the plastic one.\n\n\"Sure,\" I said.\n\n\"With my tongue?\"\n\n\"Sure.\"\n\nShe scooted closer, I leaned closer, and she began licking, kissing and sucking my face, eating Doug's cum.\n\nI joked, \"Hey, leave some of that for me.\"\n\nShe then licked some off my face and tongued it into my mouth with a kiss.\n\n\"You two are so cute,\" Kimberly said.\n\n\"I know,\" Pam said, breaking the kiss before she ordered, \"now fuck me.\"\n\n\"As you wish,\" Kimberly said, as my wife bent down and took my cock in her mouth, suddenly getting spit roasted.\n\n\"I love that position,\" Kimberly said, as she fucked my wife while my wife bobbed on my cock hungrily... like she used to.\n\nDoug urged, \"Fuck her harder, baby.\"\n\n\"Okay, okay,\" she laughed, as she began really pounding Pam, who tried to keep sucking me, but couldn't last long.\n\n\"Sorry, honey, apparently I'm suddenly not much of a multi-tasker,\" she apologized, before turning her head back to look at Kimberly. \"Yes, fuck me, fuck my wet cunt.\"\n\n\"I'm not stopping until you come all over my cock,\" Kimberly said as she slammed into my wife.\n\nPam turned back to me and asked, \"Do you like watching me get fucked?\"\n\n\"God, yes,\" I answered.\n\n\"Because I don't want this to be a one-night thing,\" she said.\n\n\"Me neither,\" I said, thrilled to hear her say that. I then joked, \"How could it be, since you already offered me to be Doug's on-call cock sucker?\"\n\n\"And Pam, I expect you to be my on-call pussy pleaser,\" Kimberly added.\n\n\"Anytime,\" my wife agreed, as we apparently both had agreed to serve as submissive standby sex servants for the younger couple.\n\n\"I fuck my cock suckers sometimes,\" Doug chipped in for the first time in a while.\n\n\"Then I guess I'll have to train his ass for you,\" my wife said, looking directly at me.\n\n\"You really want to fuck me, don't you?\" I asked.\n\n\"I really want to peg your ass, baby,\" she admitted. \"Is that okay?\"\n\n\"Do I have a say in it?\" I smiled slyly.\n\n\"Of course you do,\" she grinned back saucily. \"You can either eagerly take my strap-on, or I can forcefully take your ass.\"\n\n\"Hmmmmm, tough choice,\" I joked, again wondering what that would feel like.\n\n\"Oh yes, harder, I'm getting so close,\" Pam moaned as she looked me in the eyes. Seeing her desperate look of lust was so hot.\n\n\"Come, baby, come all over her cock,\" I encouraged.\n\n\"Oh yes, fuck baby, I love you,\" my wife moaned, clearly near a state of apocalyptic orgasm.\n\n\"I love you too, baby,\" I said back, a strange intimate moment as my wife was fucked by another woman while I had sticky man-cum on my face.\n\n\"Oh yes, yes, fucking yes,\" her voice babbled and screamed as her orgasm hit her.\n\nShe collapsed headfirst onto my leg, just missing my dick, as she came.\n\nKimberly pulled out of my wife a moment later and announced the scorecard, \"so at this point in the proceedings I've come twice, my man has come twice, and now Pam has come twice, so it's just you left, Mike.\"\n\nI wanted to fuck Kimberly, badly, but I knew that wasn't part of today's plans. Yet the other three had all fucked someone, all had taken a turn at being the fucker.\n\n\"So. Do you want Doug to suck you off again or,\" Kimberly paused for dramatic effect, \"you can fuck his ass.\"\n\n\"Hey, don't speak for me,\" Doug said, before adding, \"although I could use a nice ass fucking.\"\n\n\"Really?\" I said, thinking even though he'd said he took it in the ass, he wouldn't want to take my dick that way.\n\n\"Yeah, baby, I really want to see you fuck Doug,\" my wife coaxed me as she rested on my leg, reached over and stroked my cock.\n\n\"Really?\" I repeated, this strange wild night just getting stranger and wilder.\n\n\"Fuck yeah,\" she said. \"You think two girls are hot, I think two guys are hot.\"\n\n\"Really?\" I repeated like a parrot, this being new information. Or not; I was losing track.\n\nKimberly offered, \"I'll go get the lube.\"\n\n\"So stud, are you going to fuck Doug for me?\" Pam asked.\n\n\"I don't know,\" I said, I'd always just imagined myself sucking a dick, never sucking one, taking one in my ass, and never fucking a guy. Yet if my wife was allowing it and wanting to watch, then why not? I mean she didn't let me fuck her ass, so this was something we didn't do at home. Or at least not yet, perhaps tonight had opened up lots of new doors between us.\n\n\"That's all right, I know,\" she said, as she swirled her tongue around my cock head. \"You're going to fuck Doug. End of discussion.\"\n\n\"Only if he wants to do it,\" Doug said. \"Mate, I don't want you doing anything you don't want to do.\"\n\n\"I do want to,\" I said decisively, my cock so hard again and so desperately needing release.\n\n\"You want to what?\" My wife asked demurely.\n\n\"I want to fuck Doug,\" I admitted, as my wife took my cock in her mouth.\n\n\"Awesome,\" Doug said, \"I haven't had a real dick in my ass for quite a while.\"\n\n\"Doesn't it hurt?\" I asked, no longer worried if it was gay, but rather worried about the pain.\n\n\"The first time or two,\" he admitted, \"but there are ways of easing you into it, so you two have some homework to do before next time. But for now, I just need some lube to loosen the area up.\"\n\n\"Cool,\" I moaned, as my wife continued sucking my cock.\n\n\"Bend over, baby,\" Kimberly said, as I looked over at her with a bottle of lube.\n\nDoug didn't say anything, he just turned around on the couch, knelt and rested his hands on the backrest.\n\n\"He has a great ass,\" Kimberly said, as Pam stopped sucking me to watch.\n\n\"Yes, he does,\" my wife admired.\n\n\"Hey!\" I mock got offended,\n\n\"You have a fine ass too,\" my wife smiled, before adding, \"so cute and fuckable.\"\n\n\"Cute?\"\n\n\"And fuckable.\" With an ominous grin.\n\nKimberly coated Doug's ass with lube and then handed the bottle to Pam. \"Lube up his probe.\"\n\nPam took the bottle, poured a generous amount into her hand, and then stroked my cock; the hand job felt really good.\n\nKimberly then said, \"Now come around here and fuck my man.\"\n\n\"An invitation I never thought I'd hear,\" I laughed, as I got off the couch feeling horny and a little nervous.\n\n\"Did you think you'd ever see your wife wield a strap-on?\" Kimberly asked.\n\n\"Or eat a pussy?\" Pam added.\n\n\"Or get eaten by a hot bombshell?\" Kimberly added, as she posed her naked bod sexily, cocking a knee and cupping both of her shapely breasts.\n\n\"No, no, and no,\" I laughed as I moved into position behind Doug.\n\n\"Put your hands on his hips, and just slide your dick in,\" Kimberly explained.\n\n\"Yeah Mike, just treat my ass like a pussy,\" he said. \"I can take it.\"\n\n\"Okay,\" I said, as I moved my dick close to his ass, just as my wife placed her hand on my dick.\n\n\"Let me guide you in,\" she said.\n\n\"Okay,\" I said, as my wife positioned my dick against another man's hole. She placed her other hand on my ass and gently pushed me forward.\n\nThen my dick was disappearing into the warm, tight ass of a man I'd just met this evening. It was a lot warmer than a pussy and way tighter, although as I slowly started fucking him, I realized the tightness was mostly at the entrance.\n\n\"Oh yeah, fuck me,\" he groaned, in a way a lot less masculine than his six-foot two linebacker body type would imply he could sound.\n\n\"So hot,\" my wife moaned, collapsing onto the couch and moving her hand to her pussy.\n\n\"Hey, you already came twice,\" I joked.\n\n\"We can come all night,\" Kimberly said from behind me, \"we've got girl bits.\"\n\n\"The perks of being a woman,\" I said, as I slowly fucked Doug. It didn't feel gay at all, it felt natural.\n\n\"Yes, baby, fuck that ass,\" Pam moaned, getting turned on watching us.\n\n\"You like watching me fuck another man?\"\n\n\"It's so hot,\" she said. \"So... taboo.\"\n\n\"Go faster man, fuck me,\" Doug moaned.\n\n\"Hottest things ever are guy orgies,\" Kimberly said.\n\n\"Guy orgies?\" Pam asked.\n\n\"Yeah, they occur at some level at almost every swingers' party we go to,\" Kimberly revealed.\n\n\"Swingers' parties?\" My wife asked, \"around here?\" as I thought the same thing.\n\n\"Yeah, there are. There's a big swinger's community in the area,\" she informed us.\n\n\"And you're part of it?\" Pam asked, clearly as intrigued as I was, as I began fucking Doug faster, the tightness so amazing.\n\n\"Oh yeah, there are meetings every second Saturday,\" she revealed.\n\n\"I want in,\" Pam said, shocking me again. A swingers' party was a whole different level from tonight's activities.\n\n\"I can get you in,\" Kimberly smiled. \"You'll love it there, and you'll be shocked by some of the people who'll be there.\"\n\n\"Like who?\" Pam asked, as I again thought the same thing.\n\n\"No, slam that hot rod into my ass, fuck me like you would a hot slut,\" Doug begged in a surprisingly feminine voice.\n\n\"Okay,\" I said, slamming into his ass.\n\n\"Those are secrets you only discover once you join,\" Kimberly said. \"The next one is tomorrow, but we can't get you signed up that quickly. But I'm sure we can for the special leap year one.\"\n\n\"That sounds awesome,\" Pam said, as Doug's whimpers increased.\n\n\"Plus, I think we four would like one or two more play sessions first,\" Kimberly added.\n\n\"Me too,\" Pam said.\n\nMy balls were boiling with the hot future the two women were discussing, plus of course, the tight ass I was fucking.\n\nKimberly noticed as she said, \"You're welcome to come in his ass, he loves that.\"\n\n\"Yes, shoot that load in my asshole, Mike,\" Doug huffed.\n\n\"Okay,\" I agreed, doing just that, a few deep thrusts later.\n\n\"Yes, fill my ass,\" Doug moaned, as I continued to spurt.\n\n\"Doug says there is nothing like the feeling of cum spewing in his ass,\" Kimberly said, as she then asked, \"Still horny? Perhaps an old fashioned 69 for a nightcap?\" she asked.\n\n\"Fuck yes,\" my wife eagerly agreed. \"Watching my man fuck your man was a real turn-on.\"\n\n\"I know,\" Kimberly agreed, as she pulled my wife onto the floor, and they were soon dining on each other's pussies.\n\nMy load deposited, I pulled out and said, \"That was amazing.\"\n\n\"Yeah,\" Doug agreed, as he stood up and said, \"Excuse me; I need to go clean up.\"\n\nI sat down and watched the two women in a hot 69.\n\n.....\n\nTwenty minutes later, we were in an Uber on the way home and my wife asked, \"Did you enjoy yourself?\"\n\n\"Did you?\"\n\n\"I asked you first.\"\n\n\"I asked you second.\"\n\n\"Let's be honest,\" she said. \"We both enjoyed ourselves.\"\n\n\"Yes, we definitely did.\"\n\n\"Do you want to fuck Kimberly?\"\n\n\"Do you want to fuck Doug?\"\n\n\"I do,\" she admitted.\n\n\"And I want to fuck Kimberly,\" I admitted.\n\n\"She invited us to a games night with two other couples next weekend,\" she said.\n\n\"An actual games night?\"\n\nShe shrugged, \"I think so.\"\n\n\"I'm in,\" I said.\n\n\"And maybe a supper and playtime on Wednesday,\" she added. \"With the same-sex rule revoked, so we can all be freely bisexual.\"\n\n\"If you're in, I'm in,\" I said, knowing there was no going back after what we had just done.\n\n\"I love you so much,\" she said, holding my hand.\n\n\"I love you too.\"\n\n\"And tomorrow we go shopping,\" she said.\n\n\"For what?\" I asked.\n\n\"A strap-on cock,\" she said. \"Kimberly says I can get the strap and cocks in a variety of sizes to get you broken in.\"\n\n\"Oh,\" I said.\n\n\"I can't wait to fuck your ass,\" she said.\n\nI shook my head as the driver looked astonished in the rear-view mirror, \"She wants to peg me.\"\n\n\"Meaning I want to pound his ass until he whimpers like a bitch in heat,\" she amplified.\n\n\"Just to clarify, I'm still the man, right?\" I asked.\n\n\"When I want you to be,\" she said. \"Let's not pretend I haven't always worn the pants in our house.\"\n\nI laughed as she rubbed my dick, which was somehow hard from this conversation, \"that's so true.\"\n\n\"I'm so sucking this dick once we get home,\" she said.\n\n\"And I'm fucking your cunt,\" I added. \"I can't have the last dick inside you not being mine.\"\n\n\"Well, thank God we're almost home, then,\" she said.\n\nYes, thank God,\" I agreed.\n\nAs she looked in my eyes, she said, \"By the way your eye looks a little rough.\"\n\n\"Yeah, my dad never told me when he gave me the birds and bees speech to close my eyes when taking a big load of man cum.\"\n\n\"Fucking useless father,\" she smiled.\n\n\"I know,\" I laughed.\n\n.....\n\nFive minutes later, she was sucking my cock in the garage as the kids were home by now; we'd barely taken the time to close the door behind us.\n\nFive minutes after that, I was fucking her in the bedroom as she no longer cared if the kids heard us, something that had definitely been a factor in the decline of our sex life.\n\nTen minutes later, she was snoring beside me and I lay there, my wife's head on my chest, wondering just how much we had awakened the giant.\n\nTHE END FOR NOW\n\nI loved this couple and plan to write more for sure. Actually, I've already started the pegging chapter.\n\n \n\nMy question is would you like to read the same story from Pam's point of view? Her thoughts, her lesbian lust, etc or is that too repetitive based on this story and/or redundant?\n\nSo, potential sequel ideas:\n\nA Bigger Shock\n\nPam's story.\n\nSpiced-Up Marriage: A Pegging\n\nA discussion the next morning, some shopping, and some exploration with a strap-on cock (already in works).\n\nSpiced-Up Marriage: A Play Night\n\nThe two couples explore their new bisexual lives without conditions.\n\nSpiced-Up Marriage: A Sex Roulette\n\nAn eight-some game night leads to an orgy.\n\nSpiced-Up Marriage: A Wild Orgy\n\nA leap year swinger's orgy night including first a daisy chain of women, then a pile of men."
    ],
    "authorname": "silkstockingslover",
    "tags": [
        "anal",
        "cocksucker",
        "gay",
        "lesbian",
        "nylons",
        "orgy",
        "romance",
        "stockings",
        "straight",
        "wife"
    ],
    "category": "Fetish",
    "url": "https://www.literotica.com/s/spiced-up-marriage-a-big-surprise"
}
{
    "title": "He Knows Pt. 03",
    "pages": [
        "This is the third and final part of a fictional story and not intended to suggest anything about real-life BDSM play, consent, or relationships. I welcome your comments and suggestions for this story. Thank you.\n\n*****\n\nOn Sunday, Matthew honored my tenderness by only kissing me to orgasm with the steel plug in my ass.\n\nOn Monday, he fucked me with the steel plug firmly in place.\n\nOn Tuesday, he slowly and sensuously slid Steven, the medium sized dildo, in and out of me until I more of what I suppose could be considered \"anal\" orgasms washed over me, then went to sleep without taking his own pleasure.\n\nOn Wednesday, he inserted Dirk again, inflated him to at least 2 and a half inches across, then made me kneel so he could fuck my mouth until he came. He spanked my breasts as he pressed into my mouth, then made me masturbate to orgasm while he watched, Dirk still spreading me wide.\n\nOn Thursday he knew I wanted more.\n\n***\n\nI got the call at 11:42. \"I am going to paddle your ass so hard.\" His whisper echoed in my telephone receiver. I had gotten wise and did not answer the phone on speaker any more.\n\n\"I am going to spank you tonight. You're going to have a dildo inside your cunt, and another in your ass. I'm going to tie you up and yank you over my knees, then I'm going to spank you. Over and over. You're going to feel those dildos pressed up inside you with every blow.\"\n\n\"Matthew...\" I complained a bit as I squirmed in my swivel chair. \"Jesus...\"\n\n\"You will be blindfolded, gagged, your hands arms bound behind you, your thighs spread wide and tied there. You will be entirely at my mercy. I bought a paddle,\" he continued. \"After I spank you until my hand hurts, I'm going to start with the paddle. Softly at first, to build you up into that luscious trance you go into, then harder and harder. I'm going to make your ass electric red.\"\n\nI just listened now, transfixed.\n\n\"I will clamp your clit with clothespins. Perhaps I will tie them to something, so that if you squirm you will yank on them. Or if I spank you especially hard. Of course, you will have a safeword gesture, so I'll stop if you force me to.\"\n\nI could hear him panting a little.\n\n\"Are you ready?\"\n\nI cleared my throat. \"I think I'm not feeling so well,\" I said. \"Perhaps I'm coming down with something. I'm all flushed and hot. I think I better go home from work now.\"\n\nMatthew laughed. \"I hoped you would say that\u2014I'm leaving early and will be home at 1.\"\n\n***\n\nFriday morning I was off of work. I'd had a scheduled doctor appointment but the doctor's office had called this morning to reschedule for some reason. Now I laid in bed and thought about what was happening to me.\n\nThe play last night had been mind-blowingly hot, of course. I don't think Matthew and I had ever had quite this much sex before. I could tell he was taking his vow of \"every day until you beg\" quite seriously. But I wasn't sure how I felt about this anymore.\n\nMy ass was tender all the time now. Not in pain, but noticeable much more than usual. I was marinating in heavy chemical stews of arousal and oxytocin with all these orgasms, but I still wasn't entirely certain I wanted what he wanted. After all, what if he decided he'd rather fuck my ass than my pussy? What if he only wanted that? How would sex be then?\n\nAnd while I didn't think anal sex was sinful or bad, I had to admit, it felt pretty deviant to do it every day. It seemed more deviant than the BDSM-lite we played around with. Was I going to turn into some kind of anal slut? I thought of some of the porn I'd seen and flushed. Was that arousal or shame I was feeling?\n\nMy phone chimed. Matthew's text read, \"You must be exhausted. Only a massage today, OK? Unless you ask for more ;)\"\n\nI just looked at my phone for a very long time. Once again, he knew.\n\n***\n\nSaturday morning I awoke in the half light of a very early morning. Matthew was snuggled behind me. I wasn't sure what had woken me so early, but then I felt it: his right hand was rubbing over my ass. In his sleep. I thought, \"This is a man who loves ass.\" And I smiled and fell back asleep.\n\nA few hours later, I awoke once more to a sensation on my ass. This time it was a tongue. I drowsed as Matthew's soft mouth kissed over my skin, woke more fully as he licked over my labia, and suckled my clit.\n\nHe rolled me back and pushed my legs open. \"Can I give you an early morning orgasm or do you need the bathroom first?\"\n\n\"Go ahead,\" I murmured. He settled in for a leisurely lick. After several minutes I began to squirm and twitch. I wanted to come. He kept his touches deliberately light and arrhythmic. Frustrating.\n\n\"Matthew...\" I moaned.\n\n\"What do you want, love?\" he asked.\n\n\"Please.\"\n\n\"You have to ask for it,\" he replied.\n\n\"What?\"\n\nHe chuckled against my thigh. \"You know what.\"\n\n\"Ohhh,\" I groaned. \"But...\" I didn't want to stop. I wanted to just come. \n\nHe continued to lick and suck in the erratic way that would never get me to orgasm. It felt amazing, but I was becoming more and more agitated. I felt a huge surge of need hit me, and I began to thrust up against his mouth. I went to grab his hair in my hands to press him into me, to grind myself to pleasure, but he backed away laughing.\n\n\"None of that,\" he said.\n\nI groaned in frustration. I knew the rule now\u2014always something in my ass, or I don't get to come. I didn't really want anything in my ass, did I? I was tender still. But I definitely wanted the orgasm that was building inside me. Soon. Because I also wanted to go pee. I looked at Matthew. \"What if I ask you to stop so I can go the the bathroom first, and then come back for more?\"\n\nHe smiled slightly. \"You can go. But as soon as you get out of this bed, we're done for the day.\"\n\n\"But...!\" I tried to bargain. \"I would like you to press something into my ass and make me come, but just let me go to the bathroom first.\"\n\nHe shook his head. \"You get up, we're done.\"\n\nI focused on the full sensation in my bladder, weighed it against my desire to come. I thought I could hold out. I felt like I'd come very soon.\n\n\"OK,\" I said, \"But please pick a very small thing to put in me so you don't push too much on my bladder.\"\n\n\"Of course,\" he said.\n\nHe pushed a waterproof pad underneath me\u2014as we always did when we had sex. I can get pretty wet, and the pad saves our bedding from needing to be changed every day. Then he asked if he could tie me up.\n\nFool that I was, I agreed. After all, I love being tied up. However, once I was spread and immobilized I started to feel some concern. His back was to me as he rummaged through our sex toy box. I really did have to go, and being tied would delay my ability to spring up for the restroom if I needed to. \"Hey, Matthew, maybe I shouldn't be tied in case I have to hurry...\" \n\nMy voice trailed off as he turned back to me. He wasn't holding a small dildo, but Dirk\u2014all lubed up and ready to go. \"That's not small!\" I gasped.\n\nHe raised an eyebrow. \"Do you want to safeword and be done for the day?\"\n\n\"No, but I can't take that monster right now!\" He simply chuckled. Then he began to slowly ease it into my bottom. I was getting used to objects there now, so at first it wasn't so bad. But then Matthew started pumping it up. One, two, three pumps...five pumps. My ass was so full, and now I could feel the dildo pressing into my bladder. \n\n\"Damn you!\" I panted.\n\nHe laughed again, then brought out the vibrator. I knew then that I was doomed. We had never done any water sports. I wasn't interested in them, and I thought he wasn't either, but now I wondered. Was he trying to make me wet the bed, or just torturing me? \n\nHe clicked the on switch on the vibrator, then pressed it against my clit. Immediately I felt inundated with electric pleasure. I could feel the orgasmic energy build right off. Then two of his fingers pressed into my vagina. He set down the vibrator for a moment, and pumped Dirk up twice more. Now the dildo was stretching me wider than I had ever been before, and with Matthew's fingers adding pressure, my bladder was about to explode. \n\nHe pressed the vibrator back against me, wriggling the tip of it to exactly the right spot, just under my clit, and then he pulled it up and circled around the tip of my clit.\n\nI felt the imminence of the orgasm seize me suddenly, with a fierce contraction clamping down against all that pressure. I was coming in white-hot bursts of sensation. I started to panic partway through, however; I could feel my urgent need for a bathroom suddenly escalate to unbearable. I whimpered and tried to pull away, but his fingers hooked into me, holding me fast, and pressing even harder into my gspot.\n\n\"Do it,\" he ordered.\n\n\"No!\" I wailed, but it was too late. I came again with an enormous rush of contractions. And pee. My burning ass, the hooked fingers beckoning into me, the hot liquid streaming over his hand...I screamed with both pleasure and angry frustration at him forcing this to happen. But I looked up at him, ready to yell at him and saw such an excited, mischievous smile. He was grinning at me, then he said, \"Oh god, thank you, that was amazing.\"\n\nI was confused. I did not want to play games like this, did I? He was so happy though. And he was continuing to curl his fingers into my gspot. I came again, hard, with more gushing, this time of pee or female ejaculate, or whatever. I didn't care. I was coming. And coming. And coming.\n\n***\n\nAfter we stripped the bedding and took our showers, we sat and had breakfast together. Matthew was deeply repentant. \"I'm so sorry I pushed you. It was so hot, and I knew you'd say no if I asked, so I forced the issue.\" He looked a little distraught. \"I never should have done that.\"\n\nI rolled my eyes. \"Did I 'yellow?' or 'red?'\"\n\n\"No, but...\"\n\n\"Give me some respect, then, for knowing my own mind and deciding I was willing to do that. I could have safeworded out any time, you know.\" I was a little irritated. \n\nMatthew sighed. \"I know I pushed you though. You didn't really consent because you were all amped up. I took advantage of that.\"\n\nI laughed. \"We take advantage of each other in that way all the time. That's what our games are all about\u2014sometimes pushing or pulling the other person along with us on our fantasies. We're both perfectly capable of putting a stop to things. And that's why we do talk about most of this stuff before and after\u2014to check in with each other. So, thanks for checking in, but I'm good.\"\n\nHe could see that I was starting to feel offended, that I felt as if he didn't trust me to be able to take care of myself. He backed off, but somewhat unconvincingly.\n\n\"Of course, I just...\" he trailed off as he took a bite of granola. \"I really liked it though.\"\n\nI was less sure I'd liked it exactly. Or if I ever wanted to do it again. I said so. I could see his disappointment, but he simply said, \"I won't push it on you again when you're in a state where you may be too turned on to refuse.\" Then he grinned, \"Or will I?\" I rolled my eyes. So much for worrying about pushing too hard, I thought.\n\nBut all that day, I thought about his concerns. He seemed to really think he was forcing me into some acts, I realized. As if he were using orgasms as a way to lure me into a dark sexual forest that frightened me or I didn't want to explore. He was so wrong, and he needed to know this.\n\nThat night, as we prepared for bed, I took extra pains to shave and slather myself in softly scented oil. I put on my sexiest stockings and lacy bodysuit. When I strolled into the bedroom, Matthew's eyebrows shot up. I normally wore a t-shirt to bed, if I wore anything at all. Before he could comment, I rushed forward, \"I would like you to fuck my ass, please. Hard. Just like you want it.\"\n\nThis was one of the hardest things I'd ever said. I was embarrassed. I was also unsure I really did want that, but I wanted to want it, and that would have to do.\n\nHe looked into my eyes for a moment, searching for some clue about whether I meant what I said. Then he said, \"Good thing I didn't come this morning. I want to fill you up with come.\" And grinned.\n\nI shivered. And shivered again when he commanded, \"On your knees, my beloved slut.\" I folded myself onto the floor, and began to worship his cock with my mouth and hands. I loved this. I loved his moans and thrusts. I loved the feel of him in my mouth, the taste of him, his delicious warm scent. I loved the overwhelming feel of his cock just about to gag me, of him rubbing into the opening of my throat.\n\nAfter several minutes of cock sucking, he told me to lay on the bed, face up. We kissed, touched. He licked and rubbed my nipples, nibbling occasionally. Since he knew that an edge of pain turned me on even more, he sometimes slapped or bit hard. But mostly his touches were sensual rather than painful. Again and again he sucked my nipples into his mouth, switching back and forth between them.\n\nHis fingers continued to tug and rub my tits as his mouth meandered downward, until he was licking my clit in time with the tugging at my nipples. He knew that drove me absolutely insane. He was going to flip every trigger I have, I could tell. Because he stood after a few minutes, left me, and swiftly returned with nipple clamps and a flogger. \n\nHe clamped me, and told me to kneel up, facing the headboard. He then tied a cord to the chain connecting the clamps, and fastened it to the hook over the window behind the bed. He pulled this cord tight, so my nipples were pulled upward, stretching my breasts in a taut, exhilarating way. \n\n\"Hold onto the headboard,\" he commanded.\n\nI gripped it, kneeling with my knees spread. I couldn't bend forward much, or my nipples would be pulled too tightly to bear. But then I felt the flogger swat against my right buttock. The snap sent me forward, tugging the cord and chain violently against the clamps. My breasts shook, and I shrieked a loud, \"Oh!\"\n\nA flurry of smacks followed, each one vibrating through my body to shake my tits painfully. My fingers grew sore with how tightly I held the headboard, but still he continued to flog me. At one particularly sharp slap, I felt myself drop suddenly and completely, down into subspace. The hits took on a hot, hazy edge, and the yanking of my nipples just blended into one wash of fire. I moaned a deep, low moan. \n\nWhen he brought the flogger down and began to swat my vulva with it, I was already in a place that tolerated, even welcomed, the increased sensation. I could tell that the blows should be hurting as they rained onto my clit, but I only felt the tidal shifts in pleasure that each blow caused. \n\nAfter several moments or hours of this\u2014I no longer had any sense of time\u2014he leaned forward and asked, \"Are you ready to come?\"\n\nI felt my head sag backward toward him in a posture of happy abandonment of all control over my body. \"Yes,\" I sighed.\n\nHe pressed his body up against mine and slid one hand downward, where he began to stroke my labia, then my clit. The long sweet wet sensations that his hand gave me swiftly ratcheted me upwards towards my orgasm. His other hand reached up toward my breasts. There he began to softly rub my tight-pulled nipples in their tied clamps. The combination of sharp-tender pain and pleasure joined the succulent swirls of his fingers on my clitoris.\n\nI was falling towards my pleasure when I noticed that I felt empty. My pussy had been slightly penetrated by his fingers, but I longed for a cock. And my ass, my ass was also wishing it were being stretched and aching with too much sensation, like when a dildo filled me to the brim.\n\nI began to whimper, \"Please, please...\"\n\n\"Please what?\" he asked. \"Please get a vibrator?\"\n\n\"No, no,\" I moaned.\n\n\"Please fill your pussy with a dildo?\"\n\nI hesitated at that. I did want that, so much. But...\n\n\"Please fill your ass?\" he whispered.\n\n\"Yesss,\" I rubbed back against him.\n\n\"With what?\" he asked. One of his fingers swirled in a different spot now, directly over my asshole.\n\n\"With what?\" His fingers stopped.\n\n\"With your cock,\" I pleaded. \"Please, I want it. I want you to fuck my ass, hard, please. I am begging you.\" \n\n\"Are you sure?\" he taunted.\n\n\"Matthew, please!\"\n\n\"Are you really begging?\"\n\nI glared at him over my shoulder. \"I am begging, you bastard.\"\n\n\"Then say what you want again,\" he demanded.\n\n\"I want you to fuck my ass hard, with your cock, and come inside me.\"\n\nHe gave me a brief fierce hug, then leaned back onto his heels. I could hear him slicking lube onto his cock in long, slow motions.\n\nThen he pushed me forward, so the chain tugging my nipples was eased, and I felt him long and hard, rubbing up the crack of my bottom. I felt him start to probe me with the very tip of his cock. He started so gently, it felt immediately delicious, like when he'd licked my ass before. \n\nThen the probing became more purposive. I had a sensation of heat and so much pressure I felt my body would be split in half. His cock was sliding smoothly, steadily, deeper. When he hilted himself inside of me, he paused for a moment.\n\n\"Please,\" I sighed.\n\n\"Please what?\" he murmured. \n\n\"Please fuck me hard.\"\n\nHe didn't answer in words. Instead he pulled my hips backward sharply, which surprised me and canted my torso forwards. This pulled the tied nipple clamps that still gripped me, and they were suddenly very tight. Excruciatingly tight.\n\n\"Hold onto the bed,\" he said. \"Hold on.\" I gripped the bed still, crouching bent half-forward, my face pressed into the upholstery of the headboard. As soon as I was bent and holding on, he let go. He began to push sharply into me, to pull almost all the way out, then pound in again. It was too much; almost immediately I could feel an orgasm kindle in my ass, in my nipples. Both were equally causing the tightening ascendance of pleasure inside me. \n\nAs Matthew held my hips and threw himself into my body, the orgasm began. I came in huge gushing spurts of pleasure. His cock immediately felt ten times larger, more intrusive. The clenching bursts of muscle contractions seemed to make everything tighten. The rapid ballooning of intensity thrust me almost immediately into my second orgasm. \n\nI bucked against him, no longer caring that the nipple clamps were being tugged intolerably hard. Then the left one tugged loose from my nipple. The burst of pain was chased by more waves of pleasure. I began to come again.\n\nThe third orgasm evidently unleashed a tsunami of fierce thrusts and a hand at my right breast, yanking the chain that still bound it so that the nipple flamed in the most wonderful pain. When the chain pulled off, I was instantly thrown into the fourth orgasm and into a subsequent seemingly-unending orgy of pain and pleasure. With this, Matthew seemed to became inspired to a sort of madness. He began to thrust erratically and somewhat violently against me.\n\n\"Yes, yes, yes, yes...\" I was repeating myself in a sort of trance. With each \"yes,\" I felt another shock of pleasure plow through me. But it was all too much. This time the pulsing feel of my ass all round him pushed him over the edge until he, too, was coming. His cock pulsed into my ass, and I felt immediately slicker. Even that sensation made me come. I began to sink down to the bed, flattening myself in a puddle of satiety. He rode me down, still thrusting. With a last few gravity-assisted falls of his body into mine, he pumped the last of his orgasm into me, gasping and shaking.\n\nThen he lay limply atop me. I was sweaty and juicy from coming so much. He was sliding around on my wet skin. I think we dozed for a bit, or were in such a daze of pleasure that I didn't notice anything more for a long while.\n\nWhen I returned to full consciousness, he was laying next to me, holding me. I was cuddled against his shoulder. My ass was throbbing still, sore and used feeling. My pussy was drenched and still felt a little electric, as though the slightest breeze could make me come once more.",
        "\"That was good?\" he asked. He sounded somewhat nervous.\n\n\"It was good,\" I replied.\n\nI felt him smile against the top of my head. \"So, so good,\" he agreed.\n\nWe slept.\n\n***\n\nFor a week or so afterward, Matthew didn't touch my ass. Instead he reveled in my pussy, fucking me repeatedly, telling me how much he adored every part of my body. Then, he fucked my ass again. It was just as delicious as before, even though this time he did it in long sensuous slow thrusts.\n\nI've lost my concern about being an anal slut\u2014so what if I am? I love all the ways we fuck each other, just as I love him. And he knows the dark secrets of me, every one of them, now."
    ],
    "authorname": "agens_minaci",
    "tags": [
        "anal",
        "water sports",
        "loving wives",
        "training",
        "bdsm",
        "nipple clamps"
    ],
    "category": "Anal",
    "url": "https://www.literotica.com/s/he-knows-pt-03"
}
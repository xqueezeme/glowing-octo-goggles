{
    "title": "Wild Times in Scotland",
    "pages": [
        "Mary Roberts was 21 went she went to university. Originally, she wasn't going to, but getting a job working in a library, and seeing the strict career structure based upon qualifications, she realized a degree in English Literature would definitely be an advantage. So, in September, along with a large group of other people, she started her first term at a Redbrick university in England. Mary was a slim, small breasted young lady of about 5'9 with light brown hair and blue eyes.\n\nInitially, there were quite a few social activities to allow students to connect with their new home and new fellow-travelers, and at one of these she met Peter. He was a year older, from a quite well-heeled family, good looking and knew it, and had a sports car. Of all the queen bees swarming around his honeypot, he chose Mary. Her virginity versus his persuasion lasted a week. They were an item for the whole of the first year, and he even spent part of the summer at her home visiting with her family. For some reason, she didn't think it strange that she didn't get to meet his family.\n\nTowards the end of the second year, when she was visiting Peter in his dorm room, she noticed he was packing up many of his things. \"Are you changing rooms, or moving off campus?\" she asked him.\n\n\"Neither. Next year I shall be up at Cambridge.\"\n\n\"Cambridge? What about me?\"\n\n\"What do you mean, 'what about you'? You won't be there, you'll be here. It's been great these past couple of years, but my family's plan was always Cambridge after a preliminary two years here to get some grounding. That's life, onwards and upwards.\"\n\n\"So when were you going to tell me?\"\n\n\"At the end of term dance! You didn't really think that you and I were headed anywhere long term did you? You were a great partner while I was here - good looking and not bad in bed - but that was always as far as it was meant to go.\"\n\nIt took Mary six seconds to leave his room, two spent slapping his face, two spent kicking him in a very personal area, and two to go through the door and slam it as hard as possible. A further 5 seconds was what it took to commit to herself not to commit to a boy ever again. In fact, she also committed to never using his name again. From now on, he would be \"That Boy\".\n\nSomehow, she had always felt this was the summer she would be with Peter and meet his family. Clearly that was never going to happen. And she really couldn't face going home and linking back up with all the people she had introduced Peter to last summer. As she was walking by the Student Union office, she saw a notice board for summer jobs. One caught her eye, headlined \"Wild Times in Scotland\".\n\nShe read it quickly and then unpinned it from the board. In her room, she ready so many times she could recite it by heart.\n\n\"I am in my late 50s and run a four room Bed and Breakfast Farmhouse, maximum number of guests 8. Needed, someone to take over the housekeeping role - laundry, cleaning, etc. for the summer, Some occasional help with cooking. Full board and lodging provided together with 60 pounds per week. Nearest town is 20 miles away, but limited use of my car is available. Lots of fresh local food, clean water and clean air. Would suit an avid reader.\" Then followed an email address to a 'jamesmcleod'\n\nWhat better place for Mary for summer? A maximum of 9 people around her, all strangers, no groups of young men hanging around, plenty of opportunity for her summer reading schedule, and a chance to get Peter completely out of her system. It was, she thought, divine inspiration that had put this in her path, and her application email was zipping through the internet inside the hour, which proved at least that he was not completely out in the wilderness.\n\nHis reply came first thing the next morning. The season was from Saturday, April 27th to September 7th, which fitted in with Mary's term schedule. He thanked her for a very full description of her background and for offering the vicar in her home town as a reference. However, from the personality of her writing, and the fact she could even offer a clergyman as a reference, he was offering her the position and wouldn't be bothering the vicar. The farmhouse was 'aways north of Glasgow', towards Gairlochy, if she still wanted the job. By that evening, everything was arranged, including the fact that James had to go to Glasgow for an appointment with a lawyer, and so he had scheduled it for the day Mary would arrive, April 25th, and they could get to know each other on the drive back to the farm. Mary loaded up a big portion of her reading list on her Kindle, packed her summer clothes plus a couple of heavy skirts and sweaters and was on her way a couple of days later. The only thing that spoilt her victory was seeing, from her taxi on the way to the station, Peter with some new blonde in his car. \"At least, she won't be riding around in that for much longer,\" she thought. And so, at the start of summer 2019, Mary set off on her first summer without her family.\n\nShe had described herself to James as 'tallish for a girl, with longish light brown hair' to which he had replied \"I'll meet you directly under the clock. I've got a beard.\" Fortunately at Glasgow station there was only one bearded man waiting, and he had a choice of only two girls matching Mary's description, but only one of them was lugging two suitcases along, so they met up very easily. After a formal introduction, James said, \"The car's parked where it shouldn't be, so I suggest we go straight to it and get the hell out of the city. And when the countryside looks good, we'll find a pub for late lunch.\" As a result, about halfway through their trip they pulled into a nice looking pub. A simple Ploughman's Lunch of fresh bread, some well-aged cheese, and pickles, with beer for James and a glass of wine for Mary, sufficed as an ice breaker and by the end of the meal, they were both quite comfortable with each other. Over lunch, Mary got to look properly at James. He was about 6 foot, salt and pepper hair and matching full-set beard. Broad shoulders and a decent sized chest hinted at a fairly strong and fit man.\n\nMary found one thing about James that really endeared him to her, his laugh. He had a full-blooded hearty laugh that came from deep inside, a good \"belly laugh\" as her Dad used to say. And he laughed often and easily. For example, very early in the trip she had asked James if anyone ever called him Jim, and he let out his laugh and said, \"Only once, never twice.\"\n\nThey arrived at the farm while it was still very light, daytime in Scotland being much longer in the summer than further south, and Mary loved the setting immediately. Sheltered by a row of firs, and at the base of a small hill, it was just as she imagined only much bigger. James took a leg of lamb already roasted out of the fridge and in no time at all they had a simple supper of cold meat, boiled potatoes and peas. James explained that he got most of his food sourced locally, and himself caught salmon and trout \"at the appropriate times, or when the gillie isn't around,\" and let out his laugh again.\n\nHe showed Mary her room. It was in the attic, but quite nicely appointed and with space enough for her needs. It also had its own small bathroom and shower cabinet. The bed was new so that was one bonus. He showed her the four guest rooms, each with a shower, washbasin and toilet. He also showed her the laundry room - on the same floor as the guest rooms to save lugging stuff up and down stairs - with the extra large washing machine and dryer to launder the bedding and towels in. \"That's the most important part of the job,\" he explained, \"as I can't afford an unlimited supply of linens, so as soon as a guest goes, it's off with the dirty, on with the clean, and everything in the washer. If all four rooms are changing over, you can get all the bed linens done as one load, and all the towels, plus our own towels and what have you in a second. Today's Thursday and there's no-one in tomorrow or Saturday, so you'll have chance to find out where everything is. Saturday we're often without guests, as that's when people start or finish holidays, normally somewhere busier.\"\n\nAll in all, when she went to bed, Mary was feeling very comfortable with James, very comfortable with the surroundings and comfortable with herself that she could survive approximately 18 weeks up here. At 60 pounds a week, and nowhere to spend any money, she figured she'd have about a thousand pounds saved towards her next year in university. A profitable recuperation from a broken heart.\n\nNow the weather in the wilds of Scotland can be pretty bleak, even in summer, but when it is nice, it's beautiful, and the end of April and start of May were nice and warm. With the first guests coming in on Sunday, she had time to learn where everything she needed for her job was kept. She learned from James this was only his third year in the B and B business, so most of the stuff was modern.\n\nOn the Saturday evening, over a nice dinner of poached (but not poached) Spring Salmon, boiled potatoes and asparagus, she asked James where he learned to cook and was surprised to learn he wasn't from Scotland, which is why he had a few Scottish phrasings but no real Scottish accent. As a young man. after university, he had run away to sea and worked in the galley of a chartered yacht under a very experienced chef who was happy to let James handle the food while the chef handled the wine, so to speak.\n\nJames explained that after a few years at sea, he met a girl and settled down to use his Computer Science degree. He started a small software company that got larger and after he turned 50 he sold it intending to retire. He and his wife had stayed here for a few nights, when the previous owner was running it, and when he announced he was selling up at the end of the season, James and his wife decided to buy the place. The first summer was great, as was the winter holiday in Costa Rica, but Susan, his wife, started to get bored in the second season. \"The novelty wore off,\" said James, \"and all she could see was dirty laundry. A man with a big car and a fat wallet checked in for a whole week at the end of last season, and when he left, Susan went with him. My guess is his wallet is a whole load slimmer now. I know mine is healthier for her being gone.\" There was that laugh again, albeit a bit ruefully.\n\nJames had debated whether to sell up, but just didn't fancy trying to sell at the end of a season, and if staying to the next season - this one - he may as well be still in business. \"Plus,\" he said, \"you'll understand if I am off women a bit at the moment.\"\n\nMary laughed. \"I know exactly what you mean,\" she said, and told him all about her two years, almost, with That Boy, including the manner of her 'dumping'.\n\n\"Well,\" said James, \"I guess we're fellow travelers. We've guests arriving tomorrow afternoon, so let's celebrate the unfortunate end of one phase of your life, and the start of another. A new season for us both, you might say.\" He crossed to a tall cupboard and unlocked it. \"This is where I keep my really good stuff, stuff too good to sell to the tourists.\"\n\nHe took out an almost full bottle of a light gold liquid and poured two small glasses. \"Now take your time with this stuff, it's a bit of an acquired taste, especially for one so young as you. Believe it or not, the stuff in this bottle in almost as old as you.\" He proposed a toast to a 'happy and rewarding season'.\n\nAnd so they sat, quietly, in the light of one table lamp, and watched through the windows as the hillsides around them faded into the night, and drank their Scotch. Mary was expecting it to be a bit rough, as some of the whiskies That Boy had bought were, but soon realized that this 'good stuff' was really very smooth and when sipped slowly was a very comfortable, warming, soothing experience, as was just sitting here quietly with James. When his glass was empty, he stood, gave Mary a little bow and said \"See you in the morning,\" and went to his room at the far end of the ground floor, the other side of the kitchen. Mary took another ten minutes to finish her Scotch, rinsed her glass, and climbed up to the attic above the laundry room. She was amazed at just how quickly they had become comfortable, she and this man who was a good ten years older than her father. This was only her third night, but already she felt quite at home. But tomorrow the real work started. James also explained that while they did not serve lunch and dinner to guests, they could order in the evening a packed lunch to take with them, usually cold deli meats, tomatoes, cheese, and an apple or banana, with a bottle of water, and making those during breakfast was part of Mary's job. \"We don't do too many of them, but if they're heading up to the highlands they like to know they at least have a lunch.\"\n\nThe ground floor of the farmhouse started at one end with the Guests' Dining Room, which contained a big table with seating for 10. That was entered from the main hallway at the foot of the stairs that led to the four bedrooms. The other side of the hall from the dining room was the Library, where guests could sit in the evening, and James, and soon Mary, could sell them 'a night cap'. The library was a comfortable room, and Mary was pleased to see it had both fiction and non-fiction, including some good books on local history.\n\nA doorway next to the library opened off the hallway into James and Mary's sitting and dining area, where James had his computer and a desk for his business papers. Next to that room was the kitchen, which had quite the equipment. Eight gas hobs gave flexibility to preparing breakfasts, there was a gas oven and a separate gas-heated convection oven which James claimed he 'loved' more than his soon-to-be-ex wife. Mary, on hearing his tale about her departure had already figured that his appointment in Glasgow the day she came to Scotland was probably about the divorce.\n\nA staircase from the kitchen led up to the laundry room, and a staircase from there led to Mary's attic room. Beyond the kitchen was James' bedroom, with his one luxury - a brand new queen-sized bed. She had seen his room when he gave her the grand tour, and during dinner when he left the door open, and commented to James about how the bed was nicely made. That was the only time she had seen him blush.\n\n\"I learned living on a boat in limited space to always make my bed. When Susan left, I dumped our marital bed and got a new one with all new bedlinen. Should I ever meet a lady I get serious about, I don't want any trace of that person anywhere around.\"\n\nSunday, James explained the check-in procedure at the table in the hall, and got Mary to lay the table for the next morning's breakfast. \"It saves having to dash around when guests come down in dribs and drabs,\" he explained.\n\nThey soon settled into a routine, with Mary helping serve breakfast and then doing any room that had a departure. The practice was always to do the room immediately so that \"it is ready in case we get an unexpected booking,\" said James. Then the table was laid, always for 10 so as to give the guests some flexibility. Evenings were spent, after dinner was cleared, reading and playing music from James very extensive vinyl collection. He was into musicals and soft jazz mainly, but there was some light classical and a bit of Caribbean music from his days at sea on the charter. The collection rounded off with some music from the 50s and 60s that James claimed he inherited from his father. They laughed and teased each other easily, much as friends rather than boss and worker, and Mary was making great progress through her reading schedule.\n\nHer fourth Saturday, May 18th, turned out to be hot even by the time they had finished clearing breakfast. After breakfast, James called Mary to put some walking shoes on and go with him. He was carrying a backpack. They went up over the hill and down into a small hollow. A gentle stream flowed in to the first of three pools of water. James explained that because the pools changed their water slowly, it was pretty warm in the summer. \"Ideal for skinny dipping,\" he explained, and turning his back on her, stripped and jumped straight in, naked.\n\nMary was quite surprised. She had never skinny dipped in her life, so far as she could remember. She was tempted because of the heat, so walked to the third of the three pools and stripped off and jumped in. James called to her that \"That pool is always the warmest because of the time it takes water to flow through the three pools. The water is always clean, as the wild life and sheep don't care for warm water.\"\n\nOut of curiosity, Mary climbed over the rocks separating the third and second pool, and found it noticeably cooler. Climbing into the first pool, where James was, she found that one to be the best temperature on a day like today, cool and refreshing, and she swam around for a while. James remained at a respectful distance.\n\nAs she went to get out, she felt a sharp jab in her foot and she cried out in pain. Looking down, she saw the water start going red with blood. James was over to her instantly. \"Turn your back towards me,\" he said, and he then scooped her up in his arms. She could feel her bare skin against his, and knew that he could see not only her breasts but also the bush of dark, unruly hair at her groin. She tried to cover her breasts with an arm, but that was about all she could manage. She was red with embarrassment. Fortunately for Mary, the way he was carrying her stopped her from seeing his private parts\n\nUnperturbed, James carried her out of the pool and over to her clothes. He went back to his clothes, where he had the backpack with some towels, and brought two over. \"Dry and dress yourself and then I'll look at that foot.\" he said. He had discretely wrapped a towel around his waist.\n\nHe returned a few minutes later, dressed, after he had called over to ask if she was dressed. He took out a clean handkerchief and bound it around her foot. \"At least with the water being pretty clean, we have little chance of infection. Here, you put the backpack on, then I'll carry you back home.\" He picked her up easily in a fire-man's lift and set off up the hill.\n\nIt took a while, even though James was obviously pretty strong, but eventually he deposited her on to the garden swing by the front door and went inside. He returned with a bowl of warm water, clean face cloths and towels and a box of band aids and some bandages. \"I put Dettol in the water,\" he announced.\n\nMary grimaced. \"That stuff? That was always Mum's go to for cuts and scrapes. Stings like hell. We used to call it Deathol as kids.\" James laughed. \"Aye, maybe,\" he said, \"but it works.\"\n\nFortunately, the cut was under the instep not on the ball of the foot, so after properly dressing it, Mary could walk without much pain.\n\nOver dinner, Mary kept expressing her apologies, and her embarrassment, especially James having to carry her while both were naked. He laughed. \"You're not the first naked lady I have seen, and certainly neither the ugliest nor the fattest, so don't worry about it.\n\n\"But you were so proper and correct, trying to spare my blushes and doing your best to retain my dignity. You were so gallant. My own father could not have behaved more respectfully.\"\n\nJames actually blushed, but then said he did have one question. \"Lassie,\" he said, \"you have a bonnie body, with all the right curves, so why cover it up in so many chunky sweaters and skirts. You know now that I am respectful, and we are both capable of keeping the proper relationship, so dress more 'you' and let us all enjoy your good looks.\" That speech had both of them blushing. However, when she came down for breakfast on the Sunday, Mary had a nice light blue blouse tucked in to a darker blue skirt that was just above her knees. When James gave her an appreciative smile, she smiled back.",
        "The fifth Saturday, the 25th of May, the pair went in James' Land Rover into Gairlochy and Mary was able to buy a few personal items she needed, especially at the Chemists. They had an early dinner in a pub to save cooking, and drove home. On the way, Mary had the opportunity to thank James again for allowing her to be in Scotland, and how comfortable she felt, both with her duties at work and with sharing a house with him. James smiled, and said \"That cuts both ways, lassie, you're doing a grand job and it's a pleasure working with you.\"\n\nThe next two weeks were busy. They were actually full every night, and even turning away people phoning hopefully for a reservation. The week after, ending on the 15th of June, was not quite so hectic and they were going to be empty on the Saturday night. Their mail was brought in by the van from the General Store that brought in much of their food and supplies, as the post office was in the store, and the week leading up to the 15th brought Mary a small pile of gaily colored envelopes. \"That can only mean one thing - someone has a birthday coming up!\" pronounced James. Mary told him that it was actually on the coming Saturday and she would be 23.\n\n\"Well,\" said James, \"how about I make reservations at a nice steak house in Gairlochy for us both? Not much of a party, I admit, but it could be a pleasant evening, if you don't mind a date with an old man.\" Mary laughed and told him that he was not old, and indeed was the best looking and youngest man around.\n\n\"Aye, the only man around!\" he muttered, but he did smile.\n\nSaturday rolled around, and they set off in late afternoon for Gairlochy. Mary had put on her best white blouse, which was semi-sheer material, and her flimsy, laciest bra was kind of visible through it. She had a nice floral pattern skirt that flared somewhat. She wore a white cardigan casually over her shoulders. James put on a smart pair of dark trousers and a sports jacket. He even wore a white dress shirt, open at the neck.\n\nThe restaurant was softly lit, and a piano player and a bass player provided some nice relaxing music. They had a wonderful meal, with a good Argentinian Shiraz, and lemon meringue for dessert, which James declared was not quite as good as his. Some people had even started to dance. The music struck up with \"Red Sails in the Sunset\" and Mary commented that this was her parents' special tune. \"Let's dance to it, then,\" said James.\n\nOn the floor, he held her respectfully, but closely. It was the first time he had held her since the incident with her foot. She felt very comfortable. They danced several dances, and each one felt closer, emotionally and physically, than the one before. Mary realized that gradually James had wrapped his arms right around her, her head was on his shoulder, and their bodies were blending into the music. It felt very romantic. She could feel her hard nipples rubbing against his chest, protected by only a flimsy bra and a light-weight blouse. He asked her, quietly, whispering into her ear \"Are you okay with dancing like this?\" She murmured \"Oh, yes, best birthday ever!\"\n\nAt the end of the next dance, she looked up at his face, just as he looked down at hers. Their lips were no more than an inch apart, and as a new tune started, somehow each moved just a little, and they were kissing. It was a quite circumspect kiss, but a kiss, nevertheless. It only lasted a few seconds, but it was repeated as that tune finished. His beard on her face was so soft, she was surprised. Her nipples felt like they were on fire. Ironically, Mary recognized the tune as an old Frank Sinatra one, 'Something Stupid'.\n\nAt the end of that dance, James escorted Mary off the floor and went to pay the bill. On his return, he announced that they should be going, and they left the restaurant. Mary decided to be very brave, and slip her arm through his as they walked to the Land Rover. James opened her door and helped her in.\n\nThere were rain clouds building as they left, but at one point as they breasted a hill, there was a gap in the clouds, and a lake was illuminated by a shaft of brilliant moonlight. \"James, please stop.\"\n\nMary got out of the car and stood just looking at the moonlight on the water. James came and stood behind her and put his hands on her shoulders. \"Well, I lived up to that song, didn't I?\"\n\n\"What do you mean?\"\n\n\"I did something stupid.....\"\n\n\"Not at all. You were the perfect date, and a perfect gentleman.\"\n\nShe turned, looked at him straight in the eye, drew herself up on her tiptoes and kissed him. \"Let's go home.\"\n\nThey were no sooner back in the Land Rover than the heavens opened. Even knowing the road well, James had to slow down, so it was well past midnight when they pulled up by the kitchen door.\n\nJames jumped out of the car, and ran around to Mary's side, opened the door and carried her to the back door, to save her shoes and skirt from the mud of the yard. Once inside, he put Mary down on the bottom step of the staircase up to the laundry room and attic. Standing there, their faces were at a level.\n\n\"Good night, Miss Roberts.\" he said formally.\n\nWas it the wine, was it the dancing, physical as it was? Or was it something else that took control of her right then, but Mary put a finger on his lips, touching his beard with her hand for the first time. She looked him in the eye. \"James McLeod,\" she said, \"If you do not take me into your room, remove all my clothes, and make love to me right this minute I will call the police and claim domestic abuse. You cannot be so wonderful an escort all evening and not finish the job; if it isn't against the law, it should be.\" And then she smiled at him.\n\nJames didn't smile back. \"Are you absolutely, absolutely sure?\" he asked.\n\nShe looked him in the eye and pressed her breasts against him. \"Absolutely, absolutely sure.\"\n\nJames scooped her up into his arms. and smiled at her. \"Your wish is my command,\" he said. \"It had better be,\" she replied with a smile, and kicked off her shoes.\n\nJames carried Mary into his bedroom, and put her down on her feet in front of his wardrobe, which had a full-length mirror on the door. She was facing the mirror with him standing behind her. He lifted off the cardigan she had slipped over her shoulders while in the car, and laid it in the chair. With his left hand, James pulled back the right side of Mary's hair and very, very gently kissed her neck. Prior to tonight, she had never been kissed by a man with a beard or a moustache, and was again surprised how soft they were on her skin. She felt his hand slide around her, under her armpit. and cover her right breast. Her nipple seemed incredibly engorged and he had no difficulty finding it and holding it between finger and thumb through the two layers of fabric covering it. His left hand slid around and held her other nipple in the same way. That boy would have had her on her back and naked by now, but this man had patience. She could tell by his breathing that he was not without lust, but he had self control.....\n\nIn the mirror she watched as he started to unbutton her blouse, slowly after each button brushing his finger tips down her body to find the next button. She wanted to rip her blouse off and shout \"Take me\" but she knew that that was not James' style. If she wanted him to make love to her, it had to be his way. She was starting to realize that his way would take a lot longer and be a lot more pleasurable than that boy's way, and so she smiled at him in the mirror, and he smiled back. There were six buttons on the blouse and he took his time with each one. When it was completely undone, he pulled the bottom of the blouse out of her skirt and slowly slid it down her back and arms until it was free of her, and then tossed it on to the chair. Kissing her shoulder, he undid her bra at the back, and gently pulled it down her arms and away without as much as touching her chest or belly.\n\nHe stepped back slightly and removed his own shirt, throwing it on the chair before pulling her back by her shoulders against his chest. She could feel the hairs of his chest on her skin, and his hands finding her nipples again. She could also feel the hardness inside his trousers against the top of her bum and her lower back. The anticipation of his next action was causing her to breathe very quickly but very shallowly. He found the belt of her skirt and undid it. He found the short zipper by her right hip and slid it down as far as it would go. She felt him clutch the skirt by each hip and give the skirt a downwards tug, and in the mirror she watched it obligingly slide down to the floor. Mary lifted her feet out of it one at a time, and kicked it out of the way. She felt his hands take hold of the waistband of her sheer and flimsy panties, and as he knelt down behind her, she watched them slide down her legs, and she kicked them to one side.\n\nShe was now as naked as she had been at the pools, but with one big difference. The dark bush protecting her mons veneris was gone. She had shaved that off after the earlier trip to Gairlochy, in the hope that exactly this situation would occur at some point before summer was out. Before standing up, James kissed both her buttocks, then turned her around, and kissed exactly where her bush had been.....\n\nJames picked her up and laid her down the middle of the bed. She opened her legs a little, and lay patiently waiting for him. He removed his shoes and socks, and then trousers and briefs, and from the foot of the bed, crawled up between her legs until his face was above hers. He kissed her forehead, and then her nose, and then her lips. His tongue traced the line between her lips and she opened them in response. He was resting his weight on his elbows, barely putting any weight on her at all, but she could feel his manhood touching her belly. That boy would have driven himself in by now, but not this man.\n\nInstead, she felt kisses on her neck, she felt his tongue find a nipple and lick it so tenderly, then go to the other nipple. She felt him almost brush her nipples with his beard, as if to tease them to be as big and hard and burning as possible. HIs beard traveled down over her tummy and brushed her belly button before going down over her hairless mons. He must have noticed the bush at the pools when he carried her, and must by now have noticed it was gone. but he said nothing. She felt his hands slide under her thighs and wrap around in front of her so he could open her clit hood and rub her clit with his thumbs, and then - oh my god - he licked her labia, big and small, He sucked on them, penetrated them with his tongue, even bit them gently with his teeth. This was a completely new experience for Mary, Her one previous lover had never offered any such sensuality and sexuality, or such patience. She felt like she had been laying on the bed for at least half an hour, maybe more, and he still had not penetrated her with his manhood. She could feel it hard and warm against her legs, patiently, like its master, waiting for the right time, the right moment, to possess her completely. She wanted to scream out \"For God's sake, take me\" but knew that whatever happened, whenever it happened, would be at James' rhythm. That boy's cock was always in a self-interested hurry, this man's manhood knew the value of time and patience.\n\nShe felt him kissing back up her body, and as he did, she felt his manhood moving closer to her womanhood. Eventually she felt the tip of his cock against her already wet lips. He looked at her, and raised his eyebrows in a question. She smiled at him and nodded, and without anything being said, she felt the penetration start. He was rocking to and fro, each movement gaining a little more penetration. She felt her vagina being stretched by him as the head made a full entry into her. The pushes got progressively longer in distance and longer in time. Her legs wrapped around him to open her up to him as much as possible, and her arms grabbed him across his back. She could feel her finger nails running through the hair on his back - not really hairy but enough to assert his masculinity. And then he was all the way in. She could feel his balls against her, pressing then moving back, then pressing again. What parts of his face her lips could reach, she kissed. She kissed his shoulders, she moaned into his ear. She surrendered herself completely. She had given her virginity to that boy, but she had never, ever, been seduced like this. She had never surrendered like this. Every nerve in her body was under his control. Every pleasure point was being teased and tormented with such excruciating sensations. In the space of an hour of this level of love making, she went from being a girl with a crush to a woman in love.\n\nHe lowered his head to her ear, and she heard him whisper, very clearly, \"Do I need to take precautions?\" She shook her head. One thing she had learned while with that boy, after her first time with him, when he didn't take precautions, was that she couldn't get pregnant. Now was not the time to explain that. They moved together, so he was traveling up and down inside her vagina. Their bodies got hotter, their skin got sweatier, the groans got louder, they clung to each other even harder...\n\nAnd then she felt his penis surge inside her, felt the semen ejaculate into her, hot and wet, and then she came. She felt like she had almost passed out but she felt so different, so complete, so loved. It had never felt like this before, ever, and she clung to James like she would be washed out to sea if she didn't.\n\nShe took about 15 minutes for her body to calm down. James had rolled off her, and was cuddling her against him, she part prone, with her breasts on his chest. After calming down, she maneuvered herself to where she could look into his eyes. Clear blue, they looked back at her and he smiled - not a self-satisfied smile of a victorious lover, but the gentle smile of a man simply happy to have made his lover happy.\n\n\"No details, now, but thank you for asking about precautions. I can't have babies, that's all.\" She buried her face into his neck and shoulder. He simply ran his hand sensitively up and down her spine and otherwise let her be.\n\nMary got control of her emotions. She was tired but happy, but there was something she wanted before they went to sleep. She started to kiss his chest, and slowly, very slowly, kissed down towards his manhood. That boy always wanted her to suck him, but she instinctively knew that with James it would feel completely different, be completely different. Her hand found his manhood before her mouth, and she stroked it gently, feeling it come back to life as she did. Her mouth found the tip, and she tentatively licked it, getting a pleasured groan from James. That set her off, and she took his penis and possessed it. Long licks, nibbles on its head, and then the gradual swallowing of it. She couldn't take it all - he was so much more man than that boy, but what she could take she did and she could hear from her lover the pleasure she was giving him. When she had him really hard she knelt up, straddled him, and lowered herself on to his penis, using her own hand to hold it upright as she devoured it with her body. Keeping herself upright she settled right down until she could feel him so deep inside her. Their pubic bones met. She grabbed his hands and pressed them against her small breasts. the nipples protruding out so hard and proud. Then she started to raise and lower herself up and down, feeling his cock dig in deep and then pull back. They had both already had a major climax, so the second one took longer and was nowhere near as strong, but it was still extremely, mutually satisfying. After they came, she lowered herself down on to him, her head to his shoulder, and with him still buried inside her, they let themselves drift off to sleep.\n\nWhen Mary woke up, they had moved to a spooning position. She could tell by James' breathing he was still sleeping. She quietly slipped out of bed, went to the bathroom, then found her cardigan that had been over her shoulders, put it on and went outside. The sun was already warming the hills and she could see the eagles taking advantage of the forming thermals. She sat on the swing in the front garden, naked except for her cardigan, and realized exactly what she had done.\n\nIt was a good half-hour later before James came out, wearing just trousers. As he approached her, she stood up and said. \"I will pack my things, and if you would be so kind as to give me a lift to the bus, I will go back home. I was so wrong to you last night. Just because I fell in love with you as we danced, I assumed you were in love with me. I didn't ask or wait, I just ordered you to take me. I'm so sorry....\"\n\nHe said nothing, but just put his hands on her shoulders and pushed her back down on to the garden swing.\n\nHe still said nothing. She looked at the ground and tears started to form in her eyes. \"Mary, Mary, Mary. I think if you had phoned Sergeant Johnston at the Gairlochy police station to report a domestic abuse because I did not seduce you, you would have caused the greatest laughter that station has ever heard, especially as Johnston knows me so well, and has been known to stop by for a glass of the good stuff.\"\n\nShe looked up at him, and was surprised to see he had a handkerchief in his hand to wipe her tears. James was smiling now. \"Listen, lassie,\" he said, \"I have been falling in love with you for weeks. Seeing you naked was a temptation I admit, and I sometimes regretted not giving into it. But knowing how you looked up to me because of it, I was glad. The problem was, I was scared of letting myself believe you might just fall in love with me, and so I was always defensive, always kept you at arm's length to protect you. Last night, what you said made me realize that you did have feelings for me that I read, felt, correctly as we danced. I was prepared to let you go to bed alone - but I admit I didn't want you to - and when you said what you said, well, meet the happiest man on earth. And another thing - you can't leave as I have just spent the last 20 minutes moving all your things into our bedroom...\"\n\nWhen he said \"our bedroom\" she leapt up and leaped straight at him, wrapping her legs around him. Only his quick reactions, and perhaps his sailor's sense of balance, prevented them from both falling to the ground, but now he could feel her naked breasts and hard nipples against his chest yet again.\n\n\"What time to the guests arrive?,\" she asked.\n\n\"Around 5\" he replied.\n\n\"Then take me to bed until 4, please, and show me how much you love me.\"\n\nHe hooked his hands together under her bum and they headed for their bedroom.\n\nThey lay on the bed and looked at each other. \"Are you sure you want to love this old breakfast cook?\" he asked. She laughed. \"I have never been so sure of anything in my life, the way you made love to me when we got home was so incredible, so erotic, so sensual, so stimulating, so satisfying, so....\"\n\nHe shut her up with a kiss. \"Sometimes actions speak louder than words,\" he said after the kiss. \"Then keep going, Action Man, please.....\"\n\nFor almost an hour, they lay there, touching, caressing, kissing. Nothing too erotic but all loving, Then he let his fingers wiggle their way down her belly. When he got to her bald pubic bone, he said \"I like the new style,\" and she laughed. \"I did it after you saw my big thick bush, and really hoped that one day before I left you would see it. But now it looks like I won't be leaving.\"\n\n\"What do you mean?\" he asked, \"You're due back at university in September.\"\n\nShe sat up. \"I have decided that if we, you and I, feel like this next Sunday, I shall be staying here, if you'll have me. I shall be writing two letters. One will withdraw me from university - I can learn more about life and about me here than there. The other will be to my parents to tell them everything that's happening with a full explanation as to why, and how I am old enough now to know my own heart.\"",
        "\"Ok, I give in, I'll go for that. But lay down, I had important plans for those fingers and you interrupted them.\"\n\nLaughing she laid down, and as he kissed her, she felt the fingers back on her nether lips, caressing, touching, separating them, She felt his fingers enter her, she felt them explore her, feeling for that one sensitive spot. She breathed \"Oh, yes\" into his ear as he found it, and within moments she was twisting and bouncing on the bed totally under James' control. \"You are as good at plucking my strings as Segovia is with guitar strings,\" she said.\n\nHe laughed. \"I like that,\" he said, \"the Segovia of the Vagina. However, I'm better than Segovia for one reason, at least. He's been dead since 1987!\"\n\nJust as she started to laugh, the climax hit her. \"Oh my God, that's incredible, that feeling you can create, and you ask me if I am sure I want to stay here and be treated like this? Do you not know how much treating me like this makes me love you? And they say sex is the most fun you can have without laughing, but laughing and sex together is something else.\"\n\n\"Want to do something really daring?\"\n\n\"Yes, what?\"\n\n\"Get dressed, we'll have a brunch when we get back. Just put jeans and a top on, nothing else.\"\n\nSo dressed as he asked, they got in the Land Rover and he drove to the swimming holes. \"Why waste time walking, eh, lassie?\"\n\nAs soon as James stopped by the pools, Mary leapt out of the car and stripped off, only this time, she stood right in front of him, stark naked. \"Look all you want, you have made me so proud of my body and my femininity that everything you see is yours.\"\n\nHe stripped too, and for a while they just stood and looked at each other - no embarrassment or hesitation, no reservation, just a desire to be as open and as intimate as possible. James scooped her up in his arms, walked to the coolest pool, lifted her so he could suck on her breast and jumped in, still holding her, still sucking her.\n\nThat was the deepest part of the pool, as James well knew, and they went completely under, still clinging to each other. They embraced in the water, and kissed and laughed, totally at ease with each other, unlike their first visit.\n\nAfter a while, they climbed out and James threw a blanket on the ground, and pulled her down against him. They entwined legs and arms, and rubbed their most intimate parts together, and before long James' penis started to lengthen and harden. As their wet bodies rubbed together, reducing friction between their skin, James positioned himself and entered her as far as he could go. He generated heat with his thrusting into her and they soon were dry everywhere except where they were coupled.\n\nEventually, they rolled apart satiated, and looked up at the clouds. They were puffy and white. Mary looked at James and asked, \"Have you made love to anyone up here before?\"\n\n\"I can honestly say 'No'. My ex wouldn't skinny dip up here, and wasn't too keen on anything other than Missionary on a Saturday night. She would never do it when guests were here, even though their rooms are so far away upstairs.\"\n\n\"We'll fix that omission tonight,\" said Mary with a wink. \"So I guess we can claim this is magic water that makes people realize they are in love, eh? Do you thinks that's true?\"\n\n\"Well, being highly logical, which love isn't, but I am, I would say, based on the evidence so far, that it's true. The waters here even made an old fart like me fall in love.\"\n\n\"Sometime, I would like to come up here and make naked love in the rain. Does that sound weird?\" she said.\n\n\"Yes, but so what - if that's what you want, that you shall have.\"\n\nMary lay silent for a few minutes. Then she said, \"I did really only have one person before you - that boy who shall remain nameless for evermore - and you have, in the last few hours, made love to me more times than he ever did. In fact he never did make love to me - he made love to himself using my body. We had sex, we never made love.\"\n\n\"Well, here's to hoping we never have sex, and only ever make love, lassie\"\n\nAnd once again, she replied by climbing on his body and lowering herself on to him. They drove home naked, just for the hell of it, their new found uninhibited comfort being just so simple and na\u00efve and exciting. They got into James walk-in shower and washed each other all over. Like many men who have had active lives, James' body showed some scars of the world, and she searched each one out and asked about them. They were all pretty mundane. \"You mean, there's no scars from defending a lady's honor?\" she asked.\n\n\"Well, you're the first real lady in my life, so there's time yet. Especially if I ever meet that boy.\" And then came that laugh again.\n\nThe guests arrived at 5 p.m. and were checked in. Mary and James had had a decent sized meal when they got back from the swimming holes, and, when asked, the guests were not interested in having the bar in the library opened, so James and Mary had a drop of the 'good stuff' to celebrate their new relationship as lovers, and were in bed by 8, and the prior omission was fully rectified by 9.\n\nTheir routine was pretty well the same as before, with evenings spent listening to music, sometimes reading, but now, sometimes dancing, slowly and intimately. They would still watch the darkness creep in around the homestead, but now, when they went to bed, the attic remained empty.\n\nMary wrote a very long letter to her parents early on the Saturday afternoon after her birthday. She told them everything, so they would understand. The incident at the swimming holes, James' very proper behavior, and the events on her birthday leading up to them realizing they were in love. She let James read the letter. \"Don't know,\" he said, \"I mean, every word is true, but isn't it too much information?\"\n\n\"Well,\" she said, \"they need to understand why I am so certain about what I want to do with my life, and they can't know that unless they know what happened to make me think that way.\"\n\n\"Well, I hope your dad is different to me, then, 'cos I think I would up here asap to save my daughter from an old man who has kidnapped my daughter's heart and common sense.\"\n\n\"Good job you're not my dad, then. And I am 23 now.\" she said as she kissed him.\n\nMonday morning, the guy from the General Store took her letters, including the one to the university withdrawing from her course. They had spent time also thinking about what they would do for the winter, and settled on a week in Amsterdam in late October to see the new Rijksmuseum, followed by a week on a river cruise to Vienna, to stay for a few days to listen to some music. For Christmas they would visit Mary's family, and then after new year they would go to Aruba for two months. James had invested the proceeds from his company well, so these trips did not depend on the takings from the B and B. The planned travel was also covered in the letter home.\n\nOn the Friday of the following week, they got a reply from Mary's parents. Much of it was written by her mother, who expressed surprise that Mary was withdrawing from the university, but understood that she could not do that and be with James in Scotland, or do the traveling. On the other hand, looking at where they were going and what they would see, hear and learn, there was much to gain by doing that. Of course they were both welcome for Christmas, and they would put a queen-sized bed in Mary's room for them. But the best part of the letter was what dad wrote at the bottom. He never wrote anything in response to letters home, that was always left to mum, but this time he felt compelled to say something, so he did.\n\nHe wrote: \"Age is a number. But when two people treat each other with an abundance of love, respect, and friendship, that number becomes inconsequential. Hopefully you will both be as happy as your mum and I.\" Mary had a lump in her throat and a tear in her eye when she showed the letter to James.\n\nAnd so the season ran on, July and the first part of August they were continuously full, including a couple of Saturday nights. Mary checked the booking register and saw that no-one had booked in for the last week, from August 31st to September 7th. \"Ah, lassie, that's typical, and then at the last minute some Sassenachs decide to come here. We stick to the original dates.\"\n\nAs it happened, August 31st dawned hot and cloudless, so as soon as the last guests had gone, they packed a picnic lunch and towels, and hiked over the hills to the swimming holes. They had a wonderful, happy, totally naked day, in and out of the water as they got hot; a nice packed lunch of smoked salmon and champagne, and each other for dessert. But then, suddenly at four o'clock, James announced they had to return home, as there were some VIP guests arriving at five, and they would need to be there to greet them. When Mary inquired as to who, all James said was \"Dinna not tell you there's always some Sassenachs turn up at the last minute?\"\n\nSo they packed up, got dressed, and started home. They were almost back at the farmhouse when Mary saw a car turn into the track from the road to the front door. \"That car looks almost like..... That car is Dad's,\" she shouted and ran down the hill, leaving James to lug the picnic hamper and towels on his own.\n\nShe got to the front door just as the car pulled up, and, sure enough, Mum and Dad got out. They had just finished hugging when James turned up and dropped what he was carrying. \"Good afternoon, Mr. and Mrs. Roberts,\" he started to say, but was cut-off by Dad. \"Please, Bill and Margaret, the rest sounds so formal.\"\n\n\"So what are you two doing here, anyway? I hope this isn't some crazy scheme to rescue me from a wicked old man who has kidnapped me....\"\n\n\"Good lord no,\" laughed Dad, \"when you explained in your letter about skinny dipping in magic water that makes people realize how in love they are, your Mum and I decided we had to try it. A fresh top up of realizing how much we're in love would be just the ticket, and won't go amiss, so here we are, ready to go skinny dipping.\"\n\nMary looked at her Dad like she could not believe what she had just heard. \"You drove all the way up here just to go skinny dipping?\"\n\n\"Well, James did write and invite us,\" said Mum.\n\n\"And you're planning to go skinny dipping with us?\" asked Mary.\n\n\"Why not, when you were 3 we used to skinny dip all the time and it didn't bother you at all.\"\n\n\"Dad, now I am 23 not 3 and.....\"\n\n\"And no matter how old you get, you'll always be my little girl, and so we're skinny dipping and that's final.\"\n\n\"And you agreed to this, James?\" asked Mary, giving James a look.\n\n\"All I will say in my defense is that when I read your father's reply to my letter inviting them up here, I knew where you get your determination from as to how things will be. I realized that, if you can't beat 'em, join 'em.\"\n\n\"Well, James, I do come bearing a peace offering for wanting to invade yours and Mary's personal romance spot.\" Reaching into the back seat of the car, he produced two bottles of what James called \"really, really good stuff\", with the result that after a nice steak dinner and red wine, they all got pleasantly sleepy with night-caps.\n\nIt was a kind of working holiday for Mary, as Mum and Dad were the only two guests, but Mum insisted that \"as the room comes with Maid Service, I positively refuse to make my own bed.\" James' cooking lived up to its reputation, and all in all, they had a great week, including trips to the swimming holes. Mary survived the embarrassment of skinny dipping with her parents. James said that he had been told by his father that if you want to know how a young lady will age, look at the mother, and in the circumstances he was quite looking forward to seeing the more mature version of Mary, a comment that drew a look of shock from Mary, and giggles from Mum.\n\nDad got James to reserve the steakhouse in Gairlochy for Friday evening, saying \"My treat\", and after a nice meal, both couples danced to 'Red Sails in the Sunset'. Being back in the restaurant made Mary positively glow, and she danced every dance, except the one with Dad, buried closely against James' body.\n\nSaturday morning was bitter sweet. Mary had learned so much about her parents in the week, now that they recognized her as a grown woman, as good as married. Their relationship was different, much more balanced. James fitted in well with Dad, and they would chat well into the evening on all sorts of topics while Mum and Mary just listened. Mum confessed to Mary during their last dinner on the Friday that the water in the swimming holes definitely worked as and she and Dad had not had that much love making in a while. \"Mind you, we needed to keep at it like rabbits just to burn up the calories in James' cooking.\"\n\nSo, after a round of hugs and tears, they drove off. James and Mary sat on the garden swing and watched until they were out of sight, whereupon Mary stripped off all her clothes and announced, \"If you can catch me, you can have me.\" James pulled his clothes off before grabbing the backpack of towels he had placed inside the front door and chasing after her, but still caught her up by the top of the hill. \"Make love here, or at the pools?\" he asked.\n\nMary laughed. \"Both\". So they did. As they lay drying in the sun, from a quick dip after some really sweat-generating love making, James said, \"Well, Mrs. McLeod we should be making our way home before it cools off.\"\n\n\"You can't call me Mrs. McLeod. We too new for common law, and there's no ring for married.\"\n\nJames laughed his laugh. He rummaged in the side pocket of the backpack and produced a small white box. He gave it to Mary, with a rather bashful smile on his face. Inside was a beautiful white gold ring with a single large stone on it, and a row of little stones either side of it, decorating the top half of the ring.\n\n\"Mary, will you marry me?'\n\nMary put on the ring, and offered it to James to kiss it. She looked at the ring, and at him, and at his naked manhood just starting to show signs of life again.\n\n\"By the powers invested in me as Lady of the Swimming Holes, and in the name of the mystery of love contained in their waters, I declare that if you make love to me here and now, I will become Mrs. McLeod.\"\n\nAnd so, sometime later, they walked home as Mr. and Mrs. McLeod, after, of course, James had kissed the bride..."
    ],
    "authorname": "barry240646",
    "tags": [
        "older man",
        "younger woman"
    ],
    "category": "Mature",
    "url": "https://www.literotica.com/s/wild-times-in-scotland"
}
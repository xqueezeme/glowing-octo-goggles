{
    "title": "Toofy Ch. 16",
    "pages": [
        "Toofy's eyes sprang open as the smells hit her nostrils. The cat scrambled from her perch, and was through the door before it was open wide enough to fit the width of her shoulders.\n\nShe was into the main eating area where the grill was fired up and frying meat before anyone even heard her coming. Crash tackled excitedly into the succubus sitting at one of the tables.\n\n\"Saia!\" She squealed excitedly, rubbing her face into the woman's chest and mewling happily.\n\nThe succubus laughed, and hugged her, \"Mistress. You really are here... With... Isn't that the salamander that attacked you when you were a kitten?\"\n\n\"Mmm.\" Toofy continued rubbing and trying to climb inside Saia. A deep and happy purr emerged from her, as she pulled her legs up to sit in the woman's lap. \"You really here with that bastard lord?\"\n\nWestcolm smiled tightly at her, \"Lady Twenty Four. It appears you have yet to lose your mind. That's a good sign.\"\n\n\"You smell bad.\" She growled at him, and then went back to rubbing her scent all over the succugirl. She playfully grabbed for Saia's tail that quickly yanked itself out of her reach.\n\nSaia sighed heavily, \"I'm still sore, Toofy. Because first Efina, and then the palace guard, fucked me over. You let me get caught. Efina's scheduled for execution, by the way.\"\n\n\"What?\" Toofy said and then turned slowly and glowered, \"Oh, you fucker! Toofy smells your guilt! The Westcolm had to protect Lord Yu. Had to take advantage to get rid of the Efina, didn't he? Couldn't just wait for Toofy to burn the priestess.\"\n\nThe man glared back at her, \"I am the Grand Inquisitor. I did my job.\"\n\n\"No, you were fucking stupid. I'm disappointed in you.\" Toofy snapped, \"You, stupid bastard. Where did Lady Efina get Menes' book? She didn't find it on her own. Emperor said he destroyed it. You fucking idiot.\"\n\nWestcolm frowned, \"You know, then, that it was the magic of Menes. That his magic is the magic now rotting your soul.\"\n\n\"Toofy's soul has nothing to do with Menes. She never looked at his spells.\" She shook her head, giggling, \"She's not that stupid. She doesn't know why she knows what is in book, but she never touched it. Toofy just knows things, sometimes.\"\n\nThe lord frowned, \"But... There is something wrong with your soul, isn't there, Madame Sai?\"\n\n\"Wrong? Mmm... No.\" She shook her head and cuddled into her succubus. Kissing frantically across her face, and briefly scratching her horns with her teeth.\n\n\"Gods. I forgot how determined you are.\" Saia muttered, \"This is serious, Toofy. Menes' magic is...\"\n\n\"Evil incarnate.\" A tired voice said, as Tyre and the elf stumbled in. The groundskeeper waved to Lord Westcolm, and gave a yawn. \"What are you doing here, asshole?\"\n\n\"He chases the stars as well.\" The elf said esoterically, \"All of us are bound to this moment, and the fucking bitch cat. Feeling a bit less rude, this morning, cunt?\"\n\nToofy stuck out her tongue at her, and then went back to kissing Saia. She enjoyed playing with her succugirl, especially when she was about to have to tell her about the horror to come.\n\nShe sniffled as she remembered it, bursting into tears.\n\n\"Don't.\" Saia misread it, growling at the elf. \"I'm not in the mood, and I will do worse than scratch your eyes out, elf.\"\n\n\"Princess Trician.\" Tyre said with a yawn, and bowed to Saia, \"I would be tempted to fulfil our deal, Elia, but it looks like someone else is in the way.\"\n\n\"The Godkiller.\" Westcolm said in surprise, \"You tried to kill Astadia, didn't you? But failed. Too bad. Your sister is not as stable an empress as you would have been.\"\n\nThe last member of their party arrived. The salamander drifted in, gnawing on a nekan thighbone. She looked around, made an annoyed growl, and then curled up at Saia's feet.\n\nToofy sighed heavily, \"The pieces in place. Stupid elf can start.\"\n\n\"Stupid is a step down from insane, I suppose.\" Trician said, sitting down but making a face as the chef offered her some fried bacon. \"The world is ending. The goddess of mischief chose Lady Twenty Four as her avatar, and bound me to her. All of us, to her. I have no idea why.\"\n\nWestcolm frowned, \"The world. Ending.\"\n\n\"I saw an army of draug, leaving the border, and heading inland into our empire.\" Tyre said quietly, \"Trust me, m'lord, our world is in danger. A lich, would be my suspicion. Though I don't see all the pieces, yet.\"\n\nToofy took a deep breath, \"Emperor recently sent Meerakeilian to kill Toofy. To eat her up. Thankfully, Mia wasn't entirely stupid. Surrendered when Toofy used the Devourer's Rite.\"\n\n\"He... Saw you as a threat. Curious.\" Westcolm stated.\n\nShe shook her head, \"Not curious. Fucking obvious. The Westcolm is still too slow. Toofy was sent off to die. Her master, though, was sent to die at ork hands.\"\n\nTyre suddenly sucked in his breath, \"Oh, shit. We're all connected. Each of us...\"\n\n\"Mmm.\" She nodded, and looked back to the lord, \"The Westcolm is slow. Does he remember how Menes fucked him up?\"\n\n\"Hundreds died.\" He snarled, \"Of course, I remember. I remember everything that bastard did to me.\"\n\n\"Nekos. Hundreds of nekos.\" Toofy whispered and let out a ragged sigh, \"But Menes' magic is ork magic. Sacrificing orks in massacre, after Sai losing battle as excuse, makes much more evil magic than just nekos.\"\n\nWestcolm's face fell, \"He's planning to make more of us?\"\n\n\"Uh uh.\" She shook her head, \"Saia's turn. When she was looking for present for Isaac, she found penpal of master. Say.\"\n\n\"Astadia. The princess you tried to kill, elf.\" The succubus said in confusion. \"Why is it important that Astadia wrote to Sai, regularly? There were no responses. Probably some kind of report.\"\n\nWestcolm slammed a fist on the table, \"Fuck! Astadia was the apprentice. She has to be the one that Menes was training, before he was killed.\"\n\n\"Menes was purified before dying.\" Toofy said quietly, \"Orks hated him bad. Astadia... Got fucking royal burial. Because the insane elf wasn't the one who killed her. Astadia knew Menes' magic. Astadia had rotted soul.\"\n\nWestcolm twitched, \"You said a lich, Tyre? I think we know who. The draug are supposed to protect the elves. She could do it. She would do it, if our emperor asked... Why does he need both an undead army, and an army of dead orks?\"\n\n\"Orks are sacrifices. Menes' made emperor a demigod.\" Toofy said quietly, \"Not enough. He wants more. Emperor wants to ascend. Which is why all the gods are currently fucking with Toofy!\"\n\nTrician sighed heavily, \"Why you, cat? Why does everything hinge on a bitch of a kitten who was raised to be a whore?\"\n\nThe salamander stirred dangerously, but Toofy thrust her back onto the ground with a booted foot to her shoulder. \"Because, insane elf, Toofy has no fate. Go ahead. Try and read her.\"\n\nThe elf looked at her in consternation, \"What the... Fuck? Everyone has a fate. How in the hell were you born without one?\"\n\n\"Toofy was. It just... Didn't happen.\" She said quietly, \"That's why gods fuck with her. Always fuck with her. She hates it. Hates all of the gods. She will become empress, and they will leave her be.\"\n\nSaia wrapped her arms around her waist, \"None of this is a surprise to you, is it, mistress?\"\n\n\"Bits.\" She mewled, \"She... She knows that the Sai cheated on her. With kitsune.\"\n\nThe succubus started, \"Lord Sai cheated on you?\"\n\n\"With orkgirl and motherfucking fox.\" Toofy wailed, and shoved her face into the woman's chest. Curling into a tighter ball.\n\nWestcolm twitched, \"How the hell do you know that? How do you know any of this, neko? You're not a prophetess, like the elf. What the fucking hell are you?\"\n\n\"Angry. Toofy is... Angry.\" She breathed out slowly, \"She hates being manipulated. 'Specially by gods. She wanted to deal with emperor, her way, in her time. But now she has to stop a lich, and stop a war.\"\n\nSaia kissed at her head gently, \"You have all of us, apparently. I guess those divine assholes arranged it because they have a plan.\"\n\n\"Bad one.\" Toofy sneered.\n\nWestcolm laughed, \"Really? You just enjoy the role of heretic so much, don't you, cat?\"\n\n\"Gods plan to stop emperor. But that is all. He stays emperor. He waits, and then one day he tries again.\" Toofy growled. \"Bad plan. Stupid plan. He not try again, when Toofy is done with him.\"\n\n\"So, it will be treason, then?\"\n\nToofy smiled at him sweetly, \"She was planning to let the Westcolm live. He is useful to her. Protecting her Arina. Blackmailing Lord Castelle, over little Lady Vanhern. Protecting Toofy, from assassins.\"\n\nHe sneered, \"You can't kill me, cat.\"\n\n\"Not Toofy.\" She shook her head, \"She thought it odd, when Mia told her that emperor bragged that he killed Irrlichdan. Emperor didn't fight on frontline. He may be the Immortal, but he only fought when nekos overrun defences. He was emperor and acted as emperor. Was defended by a bodyguard.\"\n\nWestcolm frowned, \"Yes, I had that dubious honour, after the black salamander attacked the emperor.\"\n\nThe cat looked down and smiled, \"Do whatever you feel like, Mia. Only spawn of Irrlichdan.\"\n\nSaia swept the both of them out of the way as there was an eruption of blue flames. The neko snuggled into her, shielding her face from the sudden and very violent destruction that had the tavern owner ducking for cover.\n\nIt was unfortunate.\n\nWestcolm was a powerful ally, but he was also one of the Sons of Menes. Their green eyes weren't just a reflection that they had been tainted by evil magic.\n\nToofy wasn't sure how she was going to free her Sai, but she knew that so long as any of the abominations continued to live, then so too would the emperor.\n\nWhen the opportunity presented itself, she would have to follow through. Westcolm had been the idiot to try and make himself a thorn in her paw, right when she was at her strongest.\n\nToofy gave a brief glance towards the fight, unsure of who would win it.\n\nWestcolm would not make the same childish mistakes that Daen had.\n\nHowever, Mia was utterly enraged to be facing the one who had killed her ancestor. The salamander was a flying ball of flame and claws, protected from most attacks by her scales and bones.\n\nLord Westcolm was an expert in almost everything exotic. He had memorised more about more species, than any other warrior in the human empire... And he was a skilled warrior.\n\nToofy frowned, thinking for a moment, and then gave a small wink.\n\nWestcolm's sword unexpectedly snapped in the air, mid-strike. The end of the blade melting to bluntness. Mia had been ignoring the swing anyway, but the one she was attacking was knocked off-balance.\n\nThe catgirl hugged Saia tighter, and whispered, \"She didn't mean for her to get hurt. She really thought Yu would end up dead. Toofy is sorry. She has to try harder.\"\n\n\"The bastard on his back is quite good at the game.\" The succubus acknowledged, \"Are you punishing the salamander for breaking your arm? You're not really helping her.\"\n\n\"Mia wouldn't forgive Toofy if she realised she interfered. Dragon pride is annoying.\" She whispered, \"Toofy means it. Yu is her priority, now. Saia has to get what she was promised.\"\n\n\"An army of undead, a lich, a possible genocide.\" The succubus said tiredly, \"I don't exactly figure into things.\"\n\n\"Yu dies first. Dies in pain.\" Toofy growled angrily, \"Until that happens, Toofy refuses to help the gods with their own fucking problems. Toofy is just a cat. Why should she care about big things?\"\n\nSaia laughed, red eyes twinkling, \"Oh, this is why I love you, mistress. The world comes ranting and raving to your feet. Telling you to fix it all. You look sweetly at it... And tell it to fuck off.\"\n\n\"Toofy isn't heroine. Toofy is just Toofy.\" She said happily and kissed her chin, \"Speaking of... Mia is getting aggressive with Toofy. Wants to mate with her. Can Toofy maybe... Steal Saia?\"\n\nThe succubus laughed, \"You get me back, and instantly want to sleep with me?\"\n\n\"Mmm.\" She nodded.\n\nThe woman frowned, \"I want to say yes... But I also want to say that I want to have some rough and angry sex with Tyre. Who you hate.\"\n\n\"Blegh.\" Toofy stuck out her tongue, \"Saia wants a threeway with man who smells like wet dog? Blegh.\"\n\n\"I wasn't expecting you to share. More like... Can he use me first, and then you have me after?\" Saia asked, her heart frantic in her chest.\n\n\"No.\" Toofy pouted.\n\nThe succubus sighed, \"I understand.\"\n\n\"If Saia has to be stupid and love the monster, then Toofy has to share. She gets to do anything she wants with Saia's tail, when he's inside her.\" The catgirl stated firmly.\n\nRed eyes looked at her in excitement and surprise, \"You'll share me?\"\n\n\"Saia is Saia. Toofy is Toofy. We don't change just because we love someone. Toofy is angry at Sai for cheating on her, but she still plans to go to him. Slap him, too... But also love him.\" The catgirl shrugged.\n\n\"You're my mistress. You named me.\" The succubus said slowly, \"You don't have to tolerate anything. You can order me around... And well... You know I like it when you do.\"\n\nThe catgirl grinned, \"Oh, she knows. And she really wants to suck Saia's tail in front of everyone, just to watch her squirm... But Toofy also loves her Little Saia. So she will share, not because she has to, but because Saia will be happier if she does.\"\n\nThe succubus shivered, \"I am so fucking wet, right now.\"\n\n\"Then go to Toofy's room and tie herself to the bed.\" The catgirl ordered, \"She and the Tyre have to talk about rules. Toofy will come to her, when she's good and ready.\"\n\n\"Oh, fuck.\" Saia whispered excitedly, before turning and walking away.\n\nToofy sidled up to the servant, putting a hand over her face to cover her nose. \"He was listening.\"\n\n\"I was.\" Tyre frowned, looking at the battle still taking place in the room, \"Frankly, I'm surprised you're not more concerned that Westcolm might survive.\"\n\n\"If he does, he does. Toofy doesn't care.\" She shrugged, and gagged into her hand, \"Can't he do anything about his smell? She doesn't want to throw up when we play.\"\n\nThe man rolled his eyes, \"I assure you, I have already bathed this morning. I am not certain what more I could do to not trigger your sensitivities, Madame Sai.\"\n\n\"He is not to touch Toofy, during.\" She stated firmly into her hand, \"We share the girl, not each other. Unless Toofy changes her mind.\"\n\nHe frowned, \"You haven't asked me, if I am okay with sharing her.\"\n\n\"You either are, or aren't.\" She shrugged, \"So either Toofy gets to play with her Saia, alone, or with smelly company. But he stinks of lust.\"\n\nTyre nodded slowly, \"I heard her say that you named her. Is that why she no longer wears a collar? You freed her, and made her your equal?\"\n\n\"Mmm.\" She nodded, still clasping her hands to her face tightly. \"Saia is pretty. Named like Toofy's master.\"\n\nHe rubbed at his chin, \"She and I... They were not kind dalliances. She wanted me to lie with her, before speaking to her. She likes... Bruises.\"\n\n\"She is a succugirl.\" Toofy rolled her eyes, \"Also, she all tied up, now. Succubus like it rough. Toofy has very sharp teeth. She won't like it if the smelly one hurts her Saia, or degrades her, but Toofy has no problem with roughness. Saia can cum if you shove her by her horns. It's adorable.\"\n\nTyre chuckled, \"I must confess, I have never had a conversation of the likes of this one. A lover, tied to a bed, whilst I discuss methodology with her mistress.\"\n\n\"Toofy has an idea. She thinks Tyre might enjoy it, too.\" She said cheekily as her golden eyes lit up, \"Would he like to hear it?\"\n\n---\n\nThe elf smiled at him, one hand sliding down his arm, \"I've been instructed to assist you, m'lord, in whatever capacity you see fit.\"\n\n\"The belongings of the catgirl.\" He restated firmly, ignoring Esmerelda's poor attempts to seduce him. He was well aware that she was owned by Domina Florence, but was still on Lord Yu's payroll.\n\nSince Elia had been purchased by Lady Twenty Four, this elf had stepped into the gap. She had been quite active, tangentially connected to the poisonings of four ministers.\n\nHan just hadn't had the time yet to find the proof necessary to nail her to the wall. He would, but other concerns were currently more pressing.\n\nEsmerelda gave a cute and disappointed sigh, walking away with a hip sway to make the bell on her hip jingle. \"This way, m'lord. We're not sure we found everything. She didn't keep things in a travelling case like the rest of us. Liked to hide things in the walls.\"\n\nShe showed him into a room where several piles of objects had been laid out carefully onto tables. The elf smiled tightly, \"They're categorised by location where we found them. I can tell you more, if you only ask. M'lord.\"\n\nHe drifted over the items.\n\nSeveral ragged robes. Acolyte outfits, in the main. One of them was child-sized, but bloodied and torn. So, she kept the one from when the salamander scarred her. Curious.\n\n\"She took none of this with her, when she went to the House of Sai?\" He asked in surprise. She'd kept some of these objects for two decades, and then suddenly abandoned them.\n\nThe elf nodded, \"Yes, sir. As far as I'm aware, she took a single outfit of clothing with her, and her bell of course, when she became Madame Sai. She didn't attempt to take anything, and she didn't send for anything.\"\n\nThe neko had started a new life, and abandoned her previous one. Not an altogether surprising approach, but her motivations for doing so might assist his investigations.\n\n\"This. A scorpion skeleton.\" He tapped it lightly, \"Has Lady Twenty Four always been associated with scorpions, at the temple?\"\n\nThe elf frowned, \"I'm not sure that associated is the right term, m'lord. She always enjoyed them for a snack. And if you annoyed her, she tended to have one tucked away in her cheek she'd use on you... My memory is not flawless, but the first time I saw her eating a scorpion would have been the day after she dominated Meerakeilian. Ate the tip of her tail, sir.\"\n\n\"I'm aware of the event.\" He said absent-mindedly, tucking away the factoid for later. He wasn't sure exactly what it meant, but elven memories were long and tended to be accurate.\n\nHe paused as he found something surprising.\n\nPaper was expensive, the domain of lords and ladies. Yet, here was a pile of the stuff, loosely bound together with two rusting hairclips. The contents of the papers was boring, and not the neko's work. Reports and letters.\n\nHowever, someone had used dyed beeswax to draw haphazard and strange images all over the papers. Possibly stealing them from some archive to make the artwork.\n\n\"What can you tell me of this?\"\n\nEsmerelda frowned, \"I'm afraid, not much, m'lord. That particular set of items was found in the chambers of Lady Efina. They were in a trunk at the back of her wardrobe, with the number twenty four scratched into the lid. Things we believe she confiscated. There were other, similar trunks, for other girls.\"\n\nThe hair clips came back to his attention. They had rusted badly, but they were of slightly higher detail than he would expect an acolyte to wear. Efina had clipped the papers together.\n\nHe picked it up, detaching the clips carefully and began laying out the papers on the marble flaw. His hunch had been correct, the images weren't random. They were part of a greater whole.\n\nThe entire stack was one singular artwork.\n\nHe spread them out, carefully matching every side to every other side, until it covered most of the floor in the room, but he could look at it and see it, complete.\n\nEsmerelda frowned, looking disturbed by the imagery, and he couldn't blame her.\n\nAt the bottom of the artwork, was depicted an underground city. Within it, two groups of people were fighting. An army of orks, with two banners, was attacking from one side.\n\nOne of the banners was known to Han. It was the banner of Hammerhand. The terrifying warlock who had managed to destroy Menes, and stop the emperor's slaughter of the orks.",
        "The other banner was strange. Han felt that it was familiar to him somehow, but he couldn't place it. It showed a cross within a loveheart, stamped beneath a neko's paw.\n\nOn the other side of that battlefield, were the humans. They were pouring into the underground city, and into the fight, led by a certain blonde-haired youth who looked to be Lord Castelle the Younger. He fought beneath the Castelle banner, at least.\n\nThe humans, breaking into the underground city, were fleeing from another army who was above the ground level. This other army was shambling, monstrous, and very clearly undead of some kind.\n\nDraug, if Han had to make a guess of it. Bestial, but still retaining enough of their former selves to wield weapons and muster some small level of coordination.\n\nThe undead were controlled by an elf, and a man. The elf wore a crown of gold, and was sitting on a hilltop. Possibly a reference to the Golden Mountain, the subjugated empire of the elves.\n\nThe man was green-eyed, and his chest was torn open. He was in the process of pulling out his own heart, whilst shadows gathered behind him. Han didn't want to guess what that symbol represented.\n\nThe entire scene, however, was just the detailing at the bottom. Above it, at almost life-sized scale, was the scene of a coronation.\n\nA neko woman with red eyes was on one knee, receiving the crown of the emperor. She had multiple overlapping shadows, but not all of them were cat shaped.\n\nShe was flanked by several strange individuals.\n\nOne, Han would have said was Lord Sai. The face was certainly the man's, right down to the scars. Except the eyes were a bright and vibrant blue, almost grey, and not the green he actually had.\n\nBeside the man was a salamander, but the species wasn't one that Han recognised. Some of the scales were red, and some of them were black, instead of being one or the other. The tip of her tail was missing, however.\n\nTwo more humans stood close by. He recognised one of them immediately. It was impossible not to, having recently seen her nearly die. It was the neko's handmaiden... Arina. The woman held a scythe, the blade broader than her shoulders.\n\nThe other human, he didn't recognise at all. This one was far younger. Barely an adult, at a guess. She held a mage's staff, which was in itself an oddity. Few mages could afford to purchase or create something of such enormous difficulty, even if it came with a promise of power.\n\nOne of the neko's other companions was a figure that he recognised, which chilled him to the bone. Eratigan the Undying. That's why the banner was familiar, in the underground city. Her eyes.\n\nThe final companion was an elf, wearing a silver crown. She, he didn't recognise. The depiction was large and detailed enough he vaguely recognised her as being possibly a member of the royal family of the Golden Mountain.\n\nThe last figure was the one placing the crown onto the neko's head, and made him just feel confused. They were a kitsune. A fox. This particular one had nine tails, representing perfection. Yet, Han had never heard of any neko and kitsune meeting without the fur flying.\n\nBehind the coronation scene, perhaps sourced from the neko, was a large and imposing shadow. Four horns protruding from the head, and two tails rising up. A demon of some kind.\n\nHe shivered as he considered it, and then the age of the picture. It is difficult to date a wax image, but it was cracked and faded. Several years, at the least. \"Did you ever see her draw any of these?\"\n\nEsmerelda swallowed nervously, \"Yes, m'lord... But... Never the whole. Only ever a single page. I thought it was artistic nonsense. But, the picture actually... Made sense. I never realised. Didn't see that it was part of a whole.\"\n\n\"That may have been intentional. She hid this. And Lady Efina found out about it, and hid it as well.\" He said slowly, \"Try and be specific. When was the earliest you saw one of these items being drawn?\"\n\nShe crouched and pointed at part of the underground city, \"This one. I recall that she was drawing it at a dinner party. The red, it came from one of the candlesticks. Efina was incensed. Bloodied Twenty Four's lip, and stomped on her tail to break it.\"\n\n\"When.\" He said, unmoved by yet another story of the priestess' cruelty towards the cat.\n\nEsmerelda swallowed, \"Twelve years ago. The party was on the Feast of the Silver Eggshells. A celebration the temple held a year after the death of Irrlichdan was confirmed.\"\n\nHan tried to keep his face still and emotionless.\n\nIf the elf's timing was correct, and he had not a single reason to doubt it, then Lady Twenty Four had created this artwork, years before half of the people in it were of the age depicted.\n\nThis was a prophecy, a vision.\n\nHe rubbed his chin and crouched, considering it. \"Elf... You and she had a rivalry of sorts, did you not?\"\n\n\"Everyone did, at one time or another.\" She replied stiffly, \"Meerakeilian was the uncontested ruler of us girls, until the cat made her retreat into herself and her art. I tried to take over at one point, but Elia made me regret trying. M'lord.\"\n\nHe ignored the politics, \"Did Lady Twenty Four ever brag about something that... Just sounded... Unlike something she should say, as a temple acolyte?\"\n\n\"All the time, sir.\" Esmerelda chuckled nervously, \"It was... Perhaps treasonous. But she'd been saying it since she was a kitten, so none of us really paid it any attention. Turned a blind eye. But it was less bragging, and more... She didn't bring it up, often. Just said it as fact, and treated it as fact.\"\n\n\"I am not here to punish you, elf.\" He stated, \"Lady Efina is already dying in a prison cell. Let the sin be hers. Speak.\"\n\n\"Twenty Four always claimed she would one day become the empress. And not just of the empire, but the entire world.\" Esmerelda said quickly, nervously.\n\nHan nodded slowly.\n\nIt wasn't something he hadn't heard, and it was right there in the artwork in front of him. The neko, that he suspected of political assassination, was looking towards a takeover.\n\nHowever, this changed things.\n\n\"Did she... Ever know things, that she shouldn't?\" He asked slowly, \"I'm not asking did she find out secrets. I am sure you have managed to find secrets from the other acolytes. I'm talking about things that nobody should know. Secrets shared with no one at all.\"\n\nEsmerelda swallowed nervously, \"Maybe. Sometimes she'd... Talk about things that hadn't happened yet. Not by long, a day or two. And she was vague enough that I was never certain if it was just coincidence. M'lord.\"\n\n\"Shit.\" He swore and pushed himself up slowly, \"She's a prophetess. The phantom... That has to be her patron.\"\n\n\"That's a demon, isn't it?\" She said, fearfully. \"They were... Banished, along with the betrayer gods. They were practically demigods, too. But they were sent beyond the divine gate, trapped in the everlasting void.\"\n\nHan nodded grimly, \"That's the mythos.\"\n\nHe had met a demon, once. The mythic race of creatures that had sided with the wrong divines in the war of the gods, and been completely wiped out for that sin.\n\nMenes had managed to briefly drag a demon beyond the gate, proving their existence. Stolen the blood of the creature, as one of the ingredients he had used in creating his supersoldiers for the emperor.\n\nTwisting Sai and Tyre, Westcolm, the emperor himself... All of that magic had only been possible because of the blood of a demon.\n\nHan had never been so terrified, as when he had met that beast.\n\nHe began to gather up the artwork, \"Speak of what you have seen here, wench, and I will have you tortured. Not to death. You will be forgotten in a cell, for the rest of your life. The rats eating your toes as fungus grows in your privates.\"\n\n\"Yes, m'lord.\" She said with appropriate deference.\n\n---\n\nKhild walked alongside Sai, chuckling to herself as the soldiers muttered to each other about him and her. Some of them clearly gossiping that she was a screamer, and not knowing about his fox.\n\nWas she his fox?\n\nSai saw the delegation from the orks just outside the camp, and called over one of his subcommanders. \"Move the horses back. They'll panic from the smell if this turns into an attack.\"\n\n\"Yessir.\"\n\nKhild frowned, \"You seem certain, master, that my old master is going to try and kill.\"\n\n\"He'd be an idiot not to test me.\" Sai replied, \"I am a Son of Menes. A twisting of ork magic. However, more than that, I am an exiled Slag. Attacking me is the law. Hammerhand may use either excuse. But he would be stupid not to test us. The orks have all the advantages.\"\n\nShe nodded sadly, \"If battle is rejoined, it would only be time before all here fell.\"\n\n\"Exactly.\" He agreed, and then reached over and squeezed her hand, \"But, I think my father mostly wants to see the Thunderstep I am so famous for. I have no intention of showing it to him... But that will depend on Tammy actually stepping in.\"\n\nKhild chuckled, \"That one wants your cubs. She will do what it takes to defend you.\"\n\n\"The fox is erratic, and mostly seems to like me because she hates my mistress. I wouldn't count on it.\"\n\nThe ork stopped him, turning him to face her, \"Master... You seem not to know, so punish me if I have overstepped... A fox may leave her mate for a time, travel freely... But they mate for life. Always returning to the same. You are mated.\"\n\nHe felt his stomach twist into knots, \"They mate for life?\"\n\n\"One partner.\" Khild nodded slowly, \"One alone. They do not form family. Travel freely... But mating season, they always return to the same.\"\n\n\"Oh, fuck. Fuck me with a pike.\" He cursed, regretting it all.\n\nHe might have succeeded in getting the upper hand he needed on the kitsune, to bring her to bear when he needed to. But in doing so he had definitely sinned against Toofy.\n\nKhild smiled at him, \"You did not know, master.\"\n\n\"Thanks.\" He said tiredly, \"Anyways... Let's go meet my father. Try not to get in his way when he tries to kill me. I very much doubt Tammy will even try and protect you.\"\n\nThe ork chuckled, \"That is truth.\"\n\nSai was joined by the previous commander of the camp. A rundown subcommander who looked like he hadn't slept in a decade. A distant cousin of a titled noble, he wasn't technically either a peasant or a noble.\n\n\"Subcommander Erich.\" Sai nodded to the man, \"You gave the men my warning?\"\n\n\"Yessir. They will refrain from reacting.\" The man nodded, and looked out nervously, \"The chieftain, and the warlock. Are you certain about this, sir? If they attack us... We could win this, just by -\"\n\n\"The emperor himself failed to kill Hammerhand. Don't go believing this rabid mob ever could.\" Sai warned him.\n\n\"You ever fight him, sir?\"\n\nHe shook his head, \"Not to date. Lord Westcolm was the last warrior I know of to survive engaging him in battle. The man finds it too unpleasant to speak of.\"\n\n\"Is it true you fought a neko bucktooth, sir? That would go a long way to improving morale.\"\n\nSai nodded grimly, \"Several, in fact. I can point out the scars, if it would make you more comfortable. But, if I must answer your unspoken question, I have killed three of those formidable warlocks, alone. Many more with Tyre by my side.\"\n\nKhild grunted in surprise, \"I did not know my master was so accomplished. His children will be worthy of orkflesh.\"\n\n\"You better not be pregnant. Got enough problems on my plate.\" He muttered.\n\nA small group of ten warriors flanked the three of them, as they headed out through the gates.\n\nThe chieftain raised a hand in peaceful greeting, \"Frak'no nak nora, lak, tan Reich.\"\n\n\"He greets you. Calls himself chieftain.\" Khild translated, falling into her role with only a slight hint of disgust with the deceit.\n\nHe bowed his head, \"I am Lord Sai, of the House of Sai, chosen representative and ambassador of Emperor Kaden VI, God-King of Mankind, and the Immortal of the Menes.\"\n\n\"Sai, dak na Sai. Mektoa, Immortalis.\" Khild roughly translated. Only Kaden would have earned the creation of a new curse word in orkish, the bastard.\n\nHammerhand chuckled, and spoke with a voice like gravel in a mortar, \"We speak human, Lord Sai. The translator is unnecessary. Unless you are returning her, I suggest she returns to the camp.\"\n\nIt was a double implication.\n\nFirst, to check that Sai had actually bedded her, and taken ownership of Khild. Which his adoptive father probably found infinitely amusing, considering what had opened the rift between them.\n\nSecond, that Khild should be protected. She was being offered a kindness, because Hammerhand was about to attack and it was going to big, loud, and violent. Bystanders would die.\n\nSai gave her a nod.\n\nKhild's top lip lifted, and she went to growl at the insult of him shielding her from the thrill of a fight. However, before she made the noise, she saw his eyes momentarily light up.\n\nHe saw her throat bob nervously, and the ork grudgingly went on her way.\n\nThe chieftain glanced at the warlock in annoyance. Apparently not having known that Sai would receive any advance warning of an attack.\n\nHe winced, knowing what was coming next.\n\nSai casually shoved Erich out of the way as the chieftain attacked. Hammerhand was getting sick of sharing authority, and wanted to use his son as a weapon to remove the thorn in his side.\n\nThe orkish chieftain spun, rippling muscle and mass aiming a fist towards Sai.\n\nThere was an awe-inspiring flash as Tammy appeared. Golden light glowing as it surrounded her. Tiny yellow flakes of metal drifting through the air as the impulse to fight back was quelled by a forcibly imposed feeling of peace.\n\nThe chieftain was frozen, midswing, staring at her in wonder.\n\nThen, Tammy spoke and ruined the illusion. \"If anybo'y be pissin' on Sai, it done gonna be ma.\"\n\nThe dark-skinned ork shook off the effect of her arrival and let loose a ground-shaking bellow of rage as he pushed himself into a berserk state.\n\nThe fox's tails splayed out, revealing all nine, and she patted the ork on the head.\n\nHe squealed as he died.\n\nShe turned to Sai with a playful grin, \"Noaw, you done be owing ma a fuck. Don' get dead 'fore.\"\n\nShe disappeared as rapidly as she had appeared.\n\nThe red-skinned ork leaned on his staff, shaken to the core. \"That, boy, was... Unexpected.\"\n\n\"That is certainly one way to describe her.\" Sai replied more calmly than he felt, \"Now, can I assume that this incident brings to a close whatever petty overtures you wished to make? We have a peace treaty to arrange, which will be quite draining.\"\n\n\"It... Wasn't an overture, boy. I intended that you die.\" He growled, \"With that one at your beck and call, however, the odds are stacked against me. Khild, you, and that thing. I could actually lose.\"\n\nSai frowned, \"You weren't looking for a demonstration.\"\n\n\"You are tainted, boy.\" The ork growled, \"A piece of Menes' accursed soul is inside yours. Burrowing away. Keeping the motherless traitor alive. Giving him a chance to return. That's what you are. A vessel, for his return.\"\n\nSai nodded slowly, \"Huh. I suppose that... Might be possible. Well, that's quite disturbing.\"\n\n---\n\nEvery precaution was taken, after her torturers had turned up... Apparently the goddess hadn't killed them. Instead, they still breathed, but there was no mind to be found. No way to wake them.\n\nEmpty shells.\n\nSo, Efina found herself bound hand and foot, blindfolded and sitting within a magical seal. Four guards surrounding her, changed out at regular intervals.\n\nShe counted the time off to the next changing of the guard with their steady and practised breaths. Their footsteps told her that they were trained as true royal guards.\n\nMen trained to deal with magic, and to act with extreme prejudice and little hesitancy. However, only men. There were no women among those that currently guarded her.\n\nThat oversight was about to be her opportunity for escape.\n\nThe goddess may have stolen her womanhood from her, but she still possessed her magic, her hatred, and her looks, and that was more than enough for her to twist reality to her purpose.\n\nThe count was right. The new guards were just beyond the doorway. The old were in tired anticipation of being able to leave their hyper-vigilant task behind. They were distracted, expecting something from one direction, and not another.\n\nShe breathed out slowly, knowing that a black fog was emerging from her lips and falling to the ground.\n\nShe gave a small smile as she felt the tiniest of cracks open in the seal around her. She heard the breathing of one guard change, captured by her charm before he could notice the seal.\n\nShe whispered into his ear, claiming his soul without moving an inch, or speaking aloud, \"Kill the others, and I will be yours.\"\n\nThe royal guards are brutal, and efficient. Acting without hesitancy, even when the orders they feel compelled to follow made little sense.\n\nEfina blinked as the man removed her blindfold, \"My love.\"\n\nShe reached up to the man touching his cheek ever so gently, before she took his head in both her hands and shoved her thumbs through his eyes. She bit his tongue as he went to scream, tearing it free.\n\nThe priestess stood up, and her shackles fell away as the runes on them crackled and sparked.\n\nShe limped weakly over to one of the walls, grasping the stonework briefly before wrapping it around her and disappearing.\n\nThe door opened, and the new guards entered.\n\n\"What the fuck!?\" One yelled, \"Sound the... The...\"\n\nThe smoke filled their lungs, and they forgot what they were worried about. Forgot everything, except the desire to bed Efina, who they no longer thought was in the room.\n\nThe guard turned to one of the others, throwing them against the wall, \"What have you done with her? Where have you taken her!?\"\n\nChoosing only men, and only men who desired women, was a foolish mistake when attempting to guard the head priestess of a temple where women trained in all the desires of the flesh.\n\n---\n\nToofy had ended up borrowing a bright blue balaclava from the frightened little Orli, before she and Tyre had returned to her room to find her Saia. The succubus already writhing from being ignored for so long, in such a vulnerable position.\n\nShe had the knitted hood turned down so that it only covered the lower half of her mouth, blocking some of Tyre's scent, with Orli's newly-made womanly smell, but it meant she wouldn't get to suck on Saia's tail.\n\nSaia had tied herself to the bed, both wrists bound together and to the headboard by a red silk. One of her ankles was tied to the side of the bed, but the other leg was free.\n\nThe succubus struggled to lean up as the two of them entered, red eyes flashing in excitement as she saw them. \"Oh, this looks dangerous. The two of you, talking and in agreement.\"\n\nToofy pounced, snagging Saia's tail from where it was flicking. She purred and nuzzled at the sensitive end, before grabbing the moving tip firmly between thumb and forefinger. Squeezing it as she rubbed a little circle.\n\nTyre followed through with Toofy's plan, saying nothing as he dropped his pants and approached the succubus. His face diving into her coal-black snatch without a single word.\n\nHer red eyes widened at the dual assault to her senses, and the succubus pulled weakly at her restraints as her muscles tensed up.\n\nToofy let out a tiny growl, telling the human to stop with the foreplay, and move on to the next step.\n\nSaia would appreciate the lack of gentleness.\n\nHe sat up, and then lined himself up onto her opening. The succubus' eyes glittering as she practically drooled in anticipation of being taken like this.\n\nHe thrust roughly into her.\n\nIn a human, not taking the time to warm up would do nothing but hurt. In a succugirl, it was practically a guarantee that she would meet her orgasm before the invasion was complete.",
        "Saia let out a tiny wail, and the limb in Toofy's hands flickered frantically, trying to escape from her clutches.\n\nThe catgirl struggled not to giggle at her mistress' excitement.\n\nShe moved closer, releasing the tail to use her only good arm to roughly grab one of Saia's horns, and shoved the woman's head firmly down and into the bed.\n\nExpertly using one of her claws to just barely nick the tip of the horn as she did so. Saia's face immediately became defiant, and even more lustful.\n\n\"You're just going to fuck me, then? The two of you. Fucking me, like you own me?\" Saia growled playfully.\n\nTyre began to sluice in and out of her, and Toofy could hear just how excited the succugirl's little pussy was. Overflowing in delight as he held her hips and showed Toofy he actually did know a little about how to fuck.\n\nToofy leaned her head down, pressing the two women's foreheads together, and let out a playful snarl in answer to Saia's statement.\n\n\"Oh gods.\" The woman sucked in her breath, \"Oh gods... Oh, Toofy. Mistress. Oh, I want you. Please.\"\n\nToofy didn't want to retch and gag, which she would if she breathed in Tyre at this close distance. Especially now that he was aroused.\n\nHowever, she also desperately wanted to kiss her woman. Saia was not the only one whose privates were running as freely as a river.\n\nToofy's hesitation became a moot point as she felt the agile little tail slip right through her undergarments, pausing only to slide along her length twice... Before pushing into her.\n\nShe let out a loud miaow into Saia's face as the succubus pushed her tail deeply into the catgirl's snatch. The wings of the tip batted briefly around, as Saia wormed her way in to where she could curl against Toofy's sensitive spot.\n\nToofy's golden eyes stared in amazement at the succubus who was fucking her, whilst Tyre pounded into her with abandon. Her red-eyed beauty's ability to multitask was either divine, or demonic.\n\nThe sounds coming from Saia's wet snatch, the smells, were almost enough to block out the distant sounds of battle.\n\nMore than enough to awaken a deep hunger inside Toofy.\n\nShe regretfully reached down and ever slowly extracted Saia's tail, whilst the succubus fought against it. Trying to worm her way deeper inside her.\n\nToofy scampered out of reach, and undid the scarf around the succubus' ankle, smirking beneath her mask and nodding to Tyre.\n\nHe pulled himself out, to a scream of frustration from Saia. \"What are you two playing at!? I was close!\"\n\nTyre grabbed her ankles, and flipped her over. Her wrists twisting even tighter together, before Toofy lightly retied one leg to the bed. Not that any tie would last if Saia wanted out.\n\nThe catgirl leaned in, extraordinarily gently taking the base of Saia's tail in her hand. Firmly guiding it upwards and out of the way, and causing the succubus to shudder.\n\n\"Oh, no. Oh, no, no, no.\" The woman shook her head, \"That was your game. No. I haven't done that before. You can't.\"\n\nToofy smiled to herself, \"Tyre will be gentle. The Saia will like it, or Toofy will stop it.\"\n\n\"Mmm...\" Saia made a sound of irritated frustration, \"Okay, yes... I want to try it. But you two have been so fucking rough with me. I can't. Not like that.\"\n\nThe catgirl hesitated, and then pulled down her mask. She held her nose with one hand as she slurped Tyre's cock into her mouth, making him grown and shudder.\n\nShe briefly sucked at him, before pulling back and drooling the triune fluids of human, succubus and neko spit down and onto Saia's virgin asshole.\n\nToofy gently rubbed it around and in, part numbing the area. Wincing as she let Tyre invade her senses. \"No being rough with her. Show her that you love her, human.\"\n\nHe pushed ever so gently at the succugirl's backdoor. Saia winced and bit into her pillow... But also lifted her hips towards him.\n\nToofy slipped a finger underneath and into the writhing and widened mess that was Saia's well-fucked channel. Curling it to brush Saia's most sensitive of places.\n\n\"Oh, oh sh-shit.\" The succubus moaned, \"More. More, Tyre! Put that dick inside my ass. Please.\"\n\nThe man grunted, \"Gods above, you're tight.\"\n\nToofy felt an explosion of rabid jealousy. Not that her succugirl was having sex with someone else. That Saia could screw her love, whilst Toofy's was a cheating bastard.\n\nAs Tyre grunted, and began to thrust gently against the succubus, the catgirl took the tip of the woman's tail and placed it into his mouth. He sucked on it gently, green eyes focused entirely on Saia's pleasure.\n\nThen with grunts and moans ringing in her ears, Toofy crept out of the room. Tears beginning to slip from her eyes.\n\n---\n\n\"Stupid freaking slut of a cat.\" Trician growled, kicking at the dust outside the tavern.\n\nAn abomination and a salamander were having a grudge match and threatening to level the entire peaceful town. Ruining the slice of paradise that these people had found beneath the White Witch.\n\nAnother abomination, a succubus, and the goddess' chosen one, were busy ignoring that, and ignoring the horrors yet to come, by fucking each other's brains out. Loudly.\n\nNone of them cared that the future was slipping away.\n\nEvery sacrifice that Trician had made up until this point was being wasted by people who were simply too selfish to give a shit about the future.\n\nMaybe the world deserved to die.\n\nThe elf looked up in confusion as she saw the mangled corpse golem she had cursed herself to create. She'd ordered it into hiding outside the town, but here it was, wandering into the town.\n\nTrician nearly destroyed it on the spot, unleashing all the rage that had building up in her since the cat had rejected her.\n\nA soft hand caught her wrist, and she started as she saw invisibility magic dropping away from the still-sniffling neko. Their gold eyes were fixed on the golem.\n\nNo, beyond the golem.\n\nTrician's ears pulled back in fright, \"Draug.\"\n\n\"Hunting. Followed you.\" Twenty Four said accusingly, and turned to her and sneered, \"Clean up your mess. Then maybe Toofy will think about helping the insane elf.\"\n\n\"That's an army, you fucking cat!\" She exploded, \"They killed Kal, they nearly killed Tyre and me! How am I supposed to -\"\n\nToofy rolled her eyes, putting a hand over Trician's mouth, \"Stop complaining. You depend on gods. Of course you never think things through. You don't need to kill them all. Even Toofy wouldn't try. Just need to stop them being controlled, dumb elf. Break the connection, they go back and do their job. Protect elf empire.\"\n\nTrician cocked her head, \"You say that like it's easy and not fucking impossible. You can't break a lich from their slaves!\"\n\n\"Pff.\" The neko blew out her cheeks and turned, \"Fine. Toofy helps you this once. But next time, elf is on her own. She's too stupid to live.\"\n\nHer ears pulled back as she went to hiss, when she suddenly found herself scrambling backwards on the ground and threatening to piss herself in terror.\n\nThe neko was surrounded in shadow, and it was growing.\n\nHer golden eyes had been swallowed up into darkness, but there was a sparkling of red in them. Like it was trying to break free, but was being actively suppressed.\n\nToofy smiled lopsidedly, as her hair began to float up around her. Fur lifting on end and every single follicle suddenly sporting a tiny blue flame, engulfing the woman.\n\n\"You claim that destiny rules us.\" The catgirl's voice reverberated, twisting Trician's stomach into frightened knots. \"You dare to claim that we must follow some fated path. That the gods themselves declare what it is, that we must do!\"\n\nHer hands curled into angry fists, knuckles cracking audibly, \"You think of this lich, as something so strong and terrifying. All things have a soul. Not all things deserve it.\"\n\nThe catgirl lifted a hand and casually snapped her fingers.\n\nThe sun went out.\n\nTrician stared, horrified.\n\nThe neko's black eyes turned to her, and she gave a small snarl, \"So precious. So little. So weak. You are -\"\n\nA hand smacked over the back of the cat's head. The sun immediately reappeared, and Twenty Four dropped to her knees, crying and rubbing at her head, \"Why!?\"\n\nEratigan stood there, crossing her arms, \"Bad kitty. That's what I'm supposed to say, isn't it? Bad girl. You know you're not supposed to play like that. You're supposed to be a good girl. Remember what happened to Saia last time.\"\n\nThe catgirl whined, but nodded.\n\nTrician stared at the two of them, \"The fuck is going on!?\"\n\n\"Oh, Tai just told me that Death was throwing a temper tantrum. Said I had to keep my daughter in line and to call her a bad girl.\" Eratigan shrugged, and looked up at the undead swarming into the edges of the village, \"Well. This looks like fun. I'm not supposed to stay around... But...\"\n\n\"It isn't a party.\" Toofy said with irritation, and stood up slowly, \"Stupid gods. Telling Toofy what she can and can't do. Bastards. Just 'cause Toofy knows magic that they don't like. Wasn't Toofy's choice. Elatham knew it, and he hurt Toofy, so she had to steal it to live.\"\n\nEratigan tapped her chin, \"Elatham... Elatham... Oh! That was the elf, wasn't it? The one that your friend lord made... Disappear? Something.\"\n\n\"He was the one who raped Toofy.\" She snarled angrily, \"And she will gut anyone who reminds her!\"\n\nTrician stared in surprise.\n\nShe wasn't the only one who had been forced to make sacrifices on the journey to this place, then. Such a traumatic thing, and yet the neko could still stand proud.\n\nTrician had damned her own soul, when she lost Kaleid. What had the cat done in her grief?\n\nEratigan burst into tears, \"I wish I could understand. I want to understand! Toofy.\"\n\n\"Just shut up, mother. Shut up and leave Toofy alone. Forever.\" The cat said tiredly, one hand rubbing her face in exhaustion.\n\nThe witch sniffed, \"I love you.\"\n\n\"I hate you. I have always hated you. You should have just let me die in the rain.\" Toofy said emotionlessly.\n\nTrician saw the dullness in her golden eyes, saw all the years of pain and abuse. She hadn't expected it. That the wild cat who laughed and bounced around was such a tortured soul.\n\nA scream jerked the elf's attention, and her eyes widened as she saw one of the draug on top of a human woman. Pinning her and trying to bite at her face.\n\n\"Witch! Protect your town!\"\n\n\"No.\" Eratigan whispered, and then she was gone.\n\n\"Fuck! Eratigan!\" Trician swore loudly, and then punched Toofy in the shoulder, \"This is your fault, now. You drove the guardian away. Help me protect these people.\"\n\n\"Astadia.\" Toofy said glumly, \"Summon Astadia. She's the lich. You knew her, you can find her spirit.\"\n\nWith that, the neko turned away, and walked back inside the tavern with her tail dragging behind her.\n\nTrician launched herself across the space, ordering her creature to attack. She skidded into the creature attacking the human, grabbing it by the neck and tossing it flying.\n\nShe clapped her hands together, calling out urgently to the goddess, before spinning to face the next attacking draug. \"You alive, human?\"\n\n\"Y-yes.\" The woman stammered from behind her, standing up slowly.\n\nTrician knocked back a half dozen of the beasts, \"Get the fuck inside, then. You're going to die, out here.\"\n\n\"Give me your hand.\"\n\n\"Trying not to die, here!\" Trician hissed.\n\nThe human seized her hand, glaring at her for a moment, and then lifted her other hand into the sky. \"Don't fight. For the love of the holy ones, don't fight it.\"\n\nTrician's eyes rolled back into her head as she suddenly became a conduit for more magic than she had ever felt before. She heard a hoarse and weak gasp emerge from her own throat.\n\nEven when she touched the goddess, she didn't feel something like this.\n\nThe divine was of a greater magnitude, but this... This was entirely under her own control. It was burning through her, begging to her.\n\nTrician's eyes lit up excitedly and she clenched her hand tightly to the human's. She struggled to breathe as the power ripped away at her, and then she spoke, \"Astadia.\"\n\nFor the second time, the sun disappeared.\n\n---\n\nHalf the scales tore from Meerakeilian's face as Westcolm froze it with a gust of wind. The pain did nothing but fan the flames of her anger, her utter rage at the thing that had killed the one that spawned her.\n\nThe best of all salamanders.\n\nShe felt the raw skin crinkling up as her flames returned to where he had attacked her. Scarred her as he dared to attack his better.\n\nShe slashed at the man, claws raking at his hastily deployed shield of magic. First scratching, and then shattering, the frail attempt to stop her from taking his flesh from him.\n\nThe lord screamed in pain as her hand removed his own face from him. Before he could recover, her tail swung around and drummed him into the ground.\n\nThe bastard managed to get off another spell from the dirt, tossing her backwards and right through a house. Shattering wood and stone with her spine.\n\nShe flicked herself onto her feet with a solid thud and cracking of the ground. She screamed her defiance in a ball of green balefire that turned the building she had just been sent through into nothing but ash.\n\nWestcolm barely shielded himself in time from the inextinguishable flames, tossing up several feet of ice that she completely melted away. He was saved only by her running out of breath.\n\nAs she faltered, he attacked again. A spear of ice lancing through the air and into her shoulder, rocking her on her feet. She rolled her shoulder, shattering the weapon inside her with a flex of muscle.\n\nMeerakeilian bared her fangs to him, her tail repeatedly striking the ground behind her. She spread her hands and growled.\n\n\"How in the godsdamned fuck did the cat ever get the drop on you?\" He swore in frustration.\n\nShe sneered, \"How you kill Irrlichdan? How you kill most precious dragon!?\"\n\nHe swirled both his hands, and a dozen more ice spears shot across the space between them. Every single hit its mark, burning as they shattered her red scales and ripped right through her.\n\nShe tensed and rolled the muscles of her body, breaking the weapons embedded in her, before letting out a deep and angry snarl. Feeling a deeper wrath somehow still rising up into her from somewhere down below.\n\nHer skin crinkled and puckered, her flames continued to grow, and she felt something rising up in her throat. A tickling as the glands of her throat swelled up, nearly closing up altogether.\n\n\"Die already! Realise you're dead!\" Westcolm screamed, hurling an ice spear that shattered on her forehead. Blasting away her soft skin, and burning all around it.\n\nMeerakeilian felt whatever was coming up final bubble free. It tore out of her with a scream of rage that cracked and shook the ground itself.\n\nBlack flames came free from her mouth, spewing outwards in a column that the murderer in front of her never had a single chance of escaping. It ripped through his magical shield, through his ice shield, through his enchanted clothing, and boiled the skin and flesh from his bones.\n\nShe stood there, staring in confusion, shaking with the effort of what she had just done.\n\nShe lifted her trembling hands, and looked at her scales on the backs of them in wonder and confusion. Her red scales, most of them, had darkened. Some had even become black apart from the red in their glossy reflection.\n\nIn taking her vengeance... She had become something more.\n\nThe salamander walked over and crushed the skull of her enemy with a single firm stomp. Feeling a thrill running through her entire body as she accepted his sacrifice to her, making her into a black salamander.\n\nShe truly was... Irrlichdan's heir.\n\nMeerakeilian screamed out her voice of triumph into the sky, letting the roar carry the news on the wind to the four corners of the world.\n\nThe Queen of all Dragonkind had awoken.\n\n---\n\n\"M'lady.\" Xivian knelt beside the woman currently up to her elbows in dirt, tending to her garden and still looking shaken from whatever had transpired when Arina had awoken.\n\nLady Castelle brushed her hair back with the crook of her arm, leaving a smear of dirt on her forehead. \"What is it, Xivian?\"\n\n\"A letter has arrived for you, m'lady. It appears to have been mailed the day Lady Twenty Four left us, to take up role as ambassador.\" The handmaiden said quietly, holding it out.\n\nElizabeth shrugged, \"Please. What does it say?\"\n\nShe cracked open the seal, and withdrew the letter inside. Showing that it had been written by a flowering hand, with a tendency towards an elaborate design.\n\nAlong with the letter was a small pouch, pressed flat.\n\n\"My Liz,\" Xivian began, \"By the time this reaches you, the world will have caved in on Toofy's head. She will not return to you as the little kitten you know, but as a cat with a heavy heart. She would never pray to those useless gods, but if she were to, she would pray that you forgive her for this.\"\n\nElizabeth looked at Xivian in concern, \"She writes as if the world is ending. What has our rascal done, this time?\"\n\n\"So, to fight the fears that Lady Liz is no doubt feeling, Toofy found a local tea. Very special, very rare. If the Liz were to feel as Toofy does, then she would find it soothing. A final delicacy.\"\n\nXivian held out the pouch to her lady, who took it curiously, opening it to reveal a handful of small and purple leaves that had been carefully dried and pressed.\n\n\"Ever misbehaving, Toofy.\" She finished reading.\n\nLady Castelle closed the bag again slowly, and took a deep breath. \"Well. It seems that our neko always does fulfil her promises, Xivian. Even if you found the letter, and knew what was implied, you would assume Lady Twenty Four was offering to assist my suicide, not... Her true purpose.\"\n\nHer eyes widened in surprise and she stared at the bag, \"Is she...?\"\n\n\"Yes. This is for my husband.\" Lady Castelle whispered, \"He has not yet awakened, but it would be easier for the both of us if he were to pass. My son would take control of the estate. His reluctance to do anything seemingly like work, would allow me the freedom to act.\"\n\nXivian smiled sadly, \"Yet, that path is fraught with danger. Lord Han is still investigating Lady Twenty Four. He returns here, often. M'lady.\"\n\n\"Indeed.\" The woman nodded her head, \"It may well be that Lady Twenty Four wishes to simply tempt me to take an action. Her letter is too carefully written for her to take any blame. She may wish to bring us harm, rather than freedom. She only promised to help me to remove my husband, not that it would be safe to do so.\"\n\nThe half-elf swallowed nervously, \"I feel I must also caution, out of my own inconsiderate feelings, that we betrayed the trust that Lady Twenty Four showed towards us, m'lady.\"\n\nLiz patted her knee gently and kissed her cheek, \"That one is on me, Xivian. I love you, my sweet thing. It is why I hesitate, now. If I did not have you, I would feel the risks were worth it.\"\n\n\"She was so different than what I expected.\" Xivian confessed, \"I expected a haughty woman of culture, m'lady. But Lady Twenty Four... She is... Her mind is so very devious.\"\n\n\"And deviant.\" Liz shivered, \"Daring to climb into our bed, just as an excuse to irritate my husband... I think I will make the tea. Prepare a route for us, if we find ourselves needing to flee from Lord Han, Xivian.\"\n\n---\n\n\"Toofy's long gone.\" Saia hissed, \"Tell me what you need, to fill me up, Tyre. Fuck. Tell me what you want me to look like.\"\n\nHe groaned weakly, as his balls slapped against her pussy. Burying himself repeatedly into her taint. \"Tell me you want this.\"\n\n\"Me?\" She smirked back at him, her red eyes lighting up with excitement, \"He finally wants the... Shit... Real me. Mmm. And... Fuck... Has me... All to himself. Ooh. All tied up, as he fucks my... Ass.\"\n\nHe grabbed her horns, jerking her head towards him. The man leaning down to bite her neck. Roughly sinking his teeth into her, as he continued to thrust into her forbidden abyss.",
        "She squirmed, her restraints burning at her wrists as she refused to relinquish them. He might not suck her tail as well as Toofy, but he filled her out, and the anticipation of him spilling his seed was too much for her.\n\n\"Fuck, yes. Ooh, fuck my ass. Fuck my virgin ass.\" She cooed.\n\nHe finally reached his limit.\n\nShe did her best to clench down on him, as he swelled up inside her. Trying to hold onto him as he grunted and unleashed himself into her.\n\nSaia let out a happy and breathless sound as she felt him spilling from her star, and running down and across her other hot and stretched entrance.\n\nShe sighed as he pulled away, and rolled over tiredly, \"Ow. If you were trying to make sure I couldn't walk, that wasn't a bad shot. I mean, virgin ass. And you took that friggin' long?\"\n\n\"I confess I was afraid that Lady Twenty Four would kill me if she witnessed me climax within you.\" Tyre said, sweating as he shifted back on the bed so he could lean against the wall.\n\nSaia glared at him, \"Dude, don't get comfortable. Hear that? Shit is going down. Not like I can help, my ass is burning. You're a slick shit -\"\n\nHer teasing was cut off by a dragon's roar that rattled the building to its foundations. Cracking the walls and shaking dust out of the ceiling.\n\nTyre raised an eyebrow.\n\nThe succubus laughed, \"Fair enough. I guess the bitch won.\"\n\nHe frowned, and scratched at his chin, \"You're acting differently. Something between you and Lady Twenty Four, at a guess.\"\n\n\"Pff... Well, I am hers, now. Properly. Named me, Saia.\" She replied to him, not particularly wanting to tell him what was on her mind. \"Westcolm tried to kill me. Efina's probably dead... What else have you missed? Were you there when Toofy went batshit and managed to tell Death itself to fuck off, and basically ripped my entire body to fucking shreds to do it?\"\n\nTyre gave a small smile, \"I missed a lot. I'm sorry... But I hope you don't expect me to say I wish I could have protected you. We don't have that kind of a relationship.\"\n\n\"No. We don't.\" She agreed, \"Did you realise that Toofy is now hunting down all you green-eyed bastards?\"\n\nHe nodded slowly, \"I noticed. Lady Trician told me she could free me from that. But I'd lose my magic.\"\n\n\"Bitch ass clown.\" Saia rolled her eyes, \"Your soul has some kind of graft. Another soul that has been growing into yours. You can rip it out without taking your magic. Well, a succubus full of cum can.\"\n\nTyre looked at her fearfully, \"Oh. Shit. That's what you were thinking about.\"\n\n\"I was thinking that it's going to hurt, and you still might die... But you also hurt my butt. Also that Toofy is definitely going to kill you if I don't do it. Maybe not today... But the moment you're no longer useful.\" She shrugged.\n\nHe sighed, \"Seems worth the risk. And your butt is awesome. I appreciate the great sacrifice.\"\n\n\"Might let you play with it again, another day.\" She said excitedly. \"For now... Let's fuck with your soul.\""
    ],
    "authorname": "shakna",
    "tags": [
        "neko",
        "catgirl",
        "succubus",
        "anal",
        "threesome"
    ],
    "category": "NonHuman",
    "url": "https://www.literotica.com/s/toofy-ch-16"
}
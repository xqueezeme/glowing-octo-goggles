{
    "title": "The Sleep Over Pt. 05",
    "pages": [
        "A story of 4 high school friends set in the days before internet or smart phone porn. All involved are over 18 years of age.\n\n\"Ok, I'll be quiet,\" I said and with that I put my underwear back on, lifted the hatch and slowly and quietly made my way down the steps.\n\nI slowly and quietly descended the stairs. When I got to the bottom I inched along the corridor. There was no light coming from the lounge so I guessed Mr Johnstone had gone to bed. Even though it was dark I didn't put the light on as I didn't want to take the risk of being seen. I got to the bathroom, closed the door and put the light on.\n\nI looked at my reflection in the mirror and saw what a mess I looked with spunk on my face. I ran the taps, leant forward and splashed water over my face. I used the hand towel to dry my face. I could feel that I was a bit wet in my underwear from the cum that was seeping out of my recently deflowered hole. I felt a little sore too.\n\nI pulled my underwear down and sat on the toilet for a while and tried to push some of the cum out. I was still feeling a bit euphoric and had a tingling feeling in my balls and arse. I got up wiped myself clean and flushed. As I pulled my underwear back up I noticed the laundry basket. I don't know why but I lifted the lid. There were a couple of t-shirts, some shorts and underwear in there. It didn't look like the type of clothing that Tony would wear so guessed it belonged to Mr Johnstone.\n\nI rummaged around and saw some socks and football socks and then there was this pouch thing with straps. I picked it up and looked at it a bit closer. It was off white in colour and looked quite stained with sweat and some piss dribbles. I brought it up to my face and held it under my nose and sniffed deeply. The masculine aroma made me groan. I could imagine Mr Johnstones big cock and sweaty hairy balls inside the pouch. I put some of it in my mouth and sucked on it, trying to taste Mr Johnstone.\n\nI than ran it over my body, pushed my underwear back down and wrapped it around my cock and gave myself a few jerks imagining Mr Johnstone rubbing his cock over mine. I leaked some precum in it, then returned it to the laundry basket and pulled my underwear back up.\n\nI opened the bathroom door and turned the light off. I started to go back down the hallway to the stairs when I heard some voices. This startled me and I froze on the spot. I couldn't hear what was being said but they seemed to be coming from the other end of the hallway where Mr Johnstones bedroom was.\n\nI didn't know what to think. Was it burglars or did Mr Johnstone have company. I know I should have just gone back up to the room but curiosity got the better of me. I tiptoed down the hallway towards Mr Johnstones room where the voices were coming from. The door was slightly open and there was a bit of light in the room. I got to the door and stayed as silent as I could and listened.\n\n\"Yeah that's it, suck his cock. Fuck his arse, fuck him harder! \" came from the room.\n\nI peered through the crack in the door and I could see that Mr Johnstone had a TV in his room and he was watching porn. And gay porn too! I had never seen a porn film before, let alone a gay porn, and here I was looking through the crack of the bedroom door of my mates dads bedroom and he was watching gay porn!\n\nOMG was all I could think as all sorts of images ran through my head. I couldn't see much of the bed, but what I could see was that Mr Johnstone was lying on his bed, naked, legs spread a bit wide wanking what looked like a huge hard cock. It had looked big in his shorts, but it looked massive now. I tried to peek a bit more trying my hardest not to be heard, but I somehow lost my balance and fell against the door, which opened and I fell onto the bedroom floor.\n\n\"What the fuck!\" I heard Mr Johnstone exclaim as he flicked on the lamp next to the bed.\n\nI lifted myself up off the floor and looked at Mr Johnstone.\n\n\"Tom, what the fuck are you doing!\" he exclaimed. \"Do you usually go creeping around peoples bedrooms?\"\n\n\"I'm sorry Mr Johnstone, I heard some noises and thought it was a burglar and I came to investigate and I lost my balance and fell,\" I stammered.\n\n\"Well you can see that there isn't a burglar here,\" he went on.\n\n\"Well not unless he stole all your clothes!\" I replied.\n\nMr Johnstone was now kneeling on the bed looking over at me and the porn was still playing on the TV. I could help but look at his cock as well as what was on the TV. Mr Johnstone noticed this and said\n\n\"Like what you see?\" he asked.\n\n\"Hmmm yeah,\" I sheepishly replied.\n\n\"Well why don't you come and join me then?\"\n\n\"What?\"\n\n\"Don't be shy Tom. I saw you sucking their cocks earlier. I came up to tell you all to be quiet but you were all too busy to notice me. You looked like you were enjoying it. Why don't you come and suck mine!\"\n\nI felt my face go red and I felt a bit flustered that he had watched me but then things started to fall in place. The comments in the kitchen, the men's magazine and now the porn.\n\nI climbed on to the bed and joined him. He lay back down and I got between his legs. His cock was massive. He was only semi hard but it looked as big as Grants 8 incher. He had 2 big hairy balls that hung down between his legs. I reached out with one hand and grabbed it and began wanking him, whilst playing with his balls with the other. As he got harder, I wanked a bit harder until he was totally hard. He must have been at least 9 inches and thick. There was quite a gap between my fingers and thumb as my hand was wrapped around his shaft.\n\nI pulled the skin of his shaft up and down exposing his big dark purple head, Precum was forming on his head.\n\n\"Give it a lick Tom,\" Mr Johnstone instructed.\n\nI leant forward and licked the precum of his head and started flicking my tongue over his piss slit.\n\n\"Yeah, that's it boy,\" he went on. \"Now put it in your mouth and suck it!\"\n\nI opened my mouth as wide as I could and lowered my mouth over his cock. The head was so big it filled my mouth. As I took his cock in my mouth I heard home softly moan. I gripped the base with my hand and lowered my mouth as far as I could, but didn't get much more than 4 inches in when he hit the back of my tonsils. I wanked the shaft with my hand as I sucked. His cock was leaking precum which I swallowed eagerly. His tasted different to the lads, a bit more salty but it wasn't unpleasant.\n\nAfter a few minutes of sucking his cock he told me to lick his balls. I held them in my hands and marvelled at the size and the weight. I then moved closer and nuzzled with them with my nose, inhaling his manly masculine scent. I let out and groan and started licking them. They were a bit sweaty and tasted a bit salty. I licked all over them then sucked each one into my mouth. They were far too big to fit both in my mouth.\n\nI had my head to one side on the bed between Mr Johnstone legs licking his balls. It was at the angle that I could really appreciate the size of his cock. As I was licking balls, he was gently wanking it with one hand, rubbing the precum in to his head with the thumb of his other hand. I looked massive towering up. There was a thick vein running all the way down the underside from the head to the base. His cock was as big, or bigger than any I had seen in the porn magazines. He slapped it down on my face a couple of times and it felt like a rod of iron.\n\nHe then sat up and bit, reached down and grabbed me under the arms and pulled me up with his strong muscular arms, dragging me over his cock and up to his chest. His chest hair tickled a bit. His chest was very firm and I ran my hands over his pecs and brushed his nipples. He seemed to like this so I gently kissed, licked and nibbled on them. He made a bit of a growling noise and then rolled us over so that I was now on my back and he was lying on top of me. He was supporting some of his weight on his elbows but he still felt heavy. I was powerless and defenceless underneath him.\n\nHe rubbed one of his thumbs over my nipples. They were really sensitive and I squirmed a bit. He leant in and licked and nibbled mine like I did to him, causing me to giggle a bit. He planted soft kisses on my chest and started working his way down my belly, kissing my belly button. He hooked his fingers under the waist band of my underwear and pulled them over my cock and down my thighs, all the way to my ankles and then off.\n\nMy cock was hard again and Mr Johnstone took me in his mouth. He had no trouble in taking me all in and I felt my cock head hit the back of his throat, and then go even further in as his nose went right into my pubes. It felt amazing and he was very good at it, bobbing his head up and down, taking my whole length at a time. This was the first time anyone had sucked my cock. His mouth felt so soft and warm, and I could feel his tongue swirling all around my cock head.\n\nHe took my cock out of his mouth and ran his tongue down the underside to my balls, licking them and sucking them into his mouth. All the while he was caressing and tweaking my nipples. It felt amazing to be on the receiving end. He kept licking my balls and moved lower and starting licking underneath and behind. He moved his hands off my nipples and place them under my thighs and began to lift them up, giving him more access under my balls.\n\n\"Lift your legs up and hold them behind your knees,\" he instructed.\n\nI lifted my legs up and grabbed them behind my knees and brought them up to my chest, leaving my arse exposed.\n\n\"Mmmm nice,\" he muttered and started to run his hands over my arse, spreading my cheeks. He ran his fingers up and down my arse crack and circled my hole, gently prodding the entrance. He then pushed his finger in which made me gasp a little. Despite being fucked earlier my hole was still quite tight. He jabbed his finger in and out a few times and then leant in closer and kissed my arsehole\n\nHe licked all around my hole and then ran his tongue up and down my crack. The feel of his stubble made me moan and squirm. He ground his face into my crack and hole.\n\n\"Oooohhhh,\" I moaned.\n\nThis seemed to encourage him and he ground in harder. He then kissed my hole and again and started to use his tongue, licking all around and pressing his tongue in. It felt amazing and I continued to moan and gasp.\n\n\"Did they fuck you?\" he asked.\n\n\"Yes,\" I answered.\n\n\"Who fucked you?\" he continued between probing my hole with his tongue.\n\n\"They all did,\" I gasped.\n\n\"Mmmmm,\" he murmured and pressed his tongue deeper in.\n\n\"Did they cum in you?\" he asked.\n\n\"Yes, Grant and Tony did.\" I answered.\n\nI thought that this would make him stop knowing his son had cum up my arse but it did the opposite. He made a growling noise and started sucking on my hole and lapping up any remaining cum that was still inside me.\n\n\"So my boy came up your arse did he? Do you want his Dad to fuck you and cum in your arse too?\"\n\n\"Yes,\" I said.\n\n\"Say it properly,\" he said.\n\n\"Yes I want his Dads cum up my arse!\"\n\n\"Good boy,\" he replied. \"It looks like they have loosened you up a bit, but as you can see my cock is a lot bigger than theirs. We'll need some more lube.\"\n\nHe moved to the nightstand telling me not to move and got some lube. He smeared some on my hole and massaged it in. 1, 2 then 3 fingers went inside up to the third knuckle. He took his time easing his fingers in and out, rotating them and pressing on that magical spot inside me. He told me that it was my prostate, and when stimulated and massaged gave great pleasure. I knew that already. He then withdrew his fingers and smeared some lube all over his cock. It looked even bigger.\n\nI was still on back. He hooked my legs under his arms and placed them on his shoulders. I was completely under his control.\n\nHe lined up his huge cock head with my hole and began to press in. I tensed and my hole squeezed shut. He told me too relax and to push out, like I was trying to push that cum out. As I did so his massive cock head made its way past my sphincter.\n\n\"Haaaahhh,\" I gasped as my ring stretched, the pain returning.\n\n\"Shhhhhh,\" he soothed. \"Just relax and breathe deeply.\"\n\nI tried to breathe deeply and relax, but his cock was so big. He was very being very gentle and just held his cock in situ, just inside my hole. He was caressing my nipples and then kissed me softly on the lips. I wasn't expecting this. His thick stubble scratched my lips. He kissed all around my mouth and then on my neck. It gave me goose bumps. I began to relax and the pain started to fade. Mr Johnstone noticed too and started to push in slowly, one big inch at a time. I felt like I was being split in two. He was so much bigger than Grants cock.\n\nWhen he was about half way in he stopped and flexed his cock. I could feel it pulse in side. He began to inch out a little, then pressed in again. He kept this going for a while, gradually loosening my hole and going in deeper and deeper. He was looking down directly into my eyes when I felt his pubes start to touch my arse cheeks. It felt so good. Finally I felt his skin touch mine and I realised he had bottomed out. It was in so deep it felt like it would come out of my mouth!\n\nHe started a slow rhythmic in and out motion all the while looking down at me.\n\n\"Does it feel good boy?\" he asked.\n\n\"Yes Mr Johnstone,\" I gasped.\n\n\"Mr Johnstone,\" he smirked. \"I think we are way past formalities now, don't you?\"\n\n\"Errr yes, I guess so,\" I replied. \"What shall I call you then?\" I continued, thinking how weird this was having a conversation about names when his monster cock was buried deep inside my arse.\n\n\"Call me Steve,\" he replied.\n\n\"Ok Steve,\" I said.\n\nHe smiled a bit more and then a frown appeared on his face. I thought he was suddenly unhappy about something but when he started to thrust a bit more vigorously I realised it was an expression of lust. He started pulling out further and pumping me harder. He was right over me and my knees were against my chest, almost folding me in half. He then withdrew his cock and grabbed my ankles and pulled me towards the edge of the bed. He was now standing at end of the bed, my arse practically hanging over the edge. He held my legs up by the ankles, lined his cock up with my arse and thrust right in.\n\n\"Ahhhhhhh,\" I moaned in mixture of pain and pleasure.\n\nHe was passing over my prostate as he glided in, then he seemed to hit a wall inside me which gave even more pleasure. In, out, in out he thrust and that familiar slapping sound of skin on skin returned. His big balls were swinging with each thrust and slapping against my arse. I realised that the TV was still on and saw that there was a younger guy on his back being fucked by an older muscled guy. This was the scene in the bedroom too. Steve must like this type of porn and sex.\n\nHe was fucking me quite hard now and sweat was beginning to build up on his forehead and chest. My cock was rock hard and bouncing up and down with each thrust, leaking precum like a tap. Steve let go of my legs and leant forward. I wrapped my legs around his back as he put his arms under my back. He then stood and lifted me up in his big strong arms. I was still impaled on his big cock as he bounced me up and down. He pulled me off his cock and put me back down on the bed.\n\n\"Get on your hands and knees,\" he instructed.\n\nAs I got to all fours I looked at the TV screen and the young lad on the screen was now getting pounded from behind. It seemed Steve wanted to act out the scenes in movie. He pulled my ankles back so that my knees were at the edge of the bed. Steve was in a standing position. He slapped my arse a couple of times and then lined up his cock with my now not so tight hole.\n\nHe pushed in to the hilt in one go. The force pushed me forward but Steve grabbed hold of my hips to keep me in position.\n\n\"Oh fuck Tom, your arse feels so good on my cock,\" he said.\n\n\"You're cock feels so good in my arse,\" I replied.\n\n\"You want me to fuck you hard?\"\n\n\"Yes!\"\n\nHe grabbed my hips and pulled me towards him as he thrust towards me. He started to really forcefully fuck me. The slapping sounds of our skin on skin were getting louder, as was my groaning and his breathing. My arse was loosening up with the onslaught of his monster cock being buried to the hilt. He pulled right out and I could feel I was still open, before he thrust all the way in, his big balls slapping against me. The force knocked me forward and my chest and face ended up on the bed. Steve was pressing on my back with his hands as he jack hammered my arse.\n\n\"You like that don't you boy?\" he growled.\n\n\"Yeah,\" I gasped.\n\n\"You like having my big cock up your arse don't you?\"\n\n\"Yeah I do,\" I said.\n\n\"This is what happens to bad boys who spy on their mates Dad. They get their arse fucked by his big Daddy cock!\" he went on.\n\n\"Yeah, take my Daddy cock boy!\"\n\n\"Yeah, fuck me Daddy!\" I moaned.\n\nThis seemed to turn Steve on more and he fucked me harder than I thought was possible. My cock was bouncing wildly between my legs and his big balls were slapping forward against mine on every thrust. He started making grunting noises as he was fucking me hard.\n\n\"Yeah get ready for Daddys cum boy,\" he growled.\n\n\"Give me all your cum, let me feel Daddy cum in my arse,\" I said.\n\n\"Oh fuck boy, I'm gonna fill your arse up with my hot cum...get ready for Daddy's cum, oh yeah, fuck!\"\n\nSteve pummelled my arse of all he was worth before he let out a guttural growl.\n\n\"Aaarrrrgggghhhhh fuck , I'm cuming!\"\n\nI could feel the hot thick jets of cum shoot out of his big cock and fill my insides. Each spurt was accompanied by his cock spasming and a loud groan. He shot 8 or 9 huge loads into me. He continued to fuck me albeit with less vigour. I could feel some on his cum leaking out of my arse as he pulled out and there was a sloppy sound as he pushed in.\n\nFinally he came to a halt and collapsed on top of me. His sweaty chest was on my back and he was breathing hard into my ear. His big cock was still buried deep inside me although I could feel it slowly deflating\n\n\"Fuck, you dirty boy Tom,\" he breathed into my ear. \"You sure know how to take cock!\"\n\nHe lay on top of me before withdrawing his cock, making a plopping noise as he came out. I could feel my hole was still gaping open and cum was dribbling out of my arse. I felt Steves hand and fingers around my hole and then I felt his mouth and tongue. He was licking his cum out of my battered arse.\n\nHe flipped me over onto my back, learnt down and kissed me, pushing his tongue and the contents of his mouth into mine. I had a mouth full of his cum. He then scooted up on his knees over my chest dangling his softening cum covered cock over my face.\n\n\"Lick it clean boy!\" he ordered.\n\nI opened my mouth and took as much of his cock in my mouth, licking and sucking his cum and my arse juice off his cock. He knelt over me and dangled his big nuts over my mouth and I licked and sucked those clean too. When I was done, Steve grinned down at me, grabbed his cock and slapped my face a few times. Even in its softening state it still felt heavy. He laughed and then rolled over onto his back letting out a loud satisfying sigh.\n\nHe pulled me into him I found my nose buried into his sweaty musky armpit. I sniffed and savoured the smell of his manly aroma. He was running his hand through my hair and planted a kiss on my forehead. He pulled me up so my head was on his chest.\n\n\"Mmmmmm,\" he muttered all contented as I stroked his chest hair and nipples.\n\nHis hand had found his way down to my arse and began to caress my cheeks and a finger poked into my cummy bubbling hole. My arse lips felt sore and puffy.\n\n\"You better not get too comfortable and fall asleep,\" he said. \"I think you should go back and sleep upstairs with the others,\" he added and slapped my arse.",
        "\"Yes ok,\" I said feeling a bit disappointed. I wanted to lay on Steve's chest and fall asleep in his muscular arms.\n\nHe pulled my face up to his and kissed me sensually on the lips.\n\n\"And I think it would be better if we kept this to ourselves too. Not sure how Tony would react if he found out that his Dad had fucked his mate,\" he added.\n\n\"Yeah sure,\" I agreed.\n\n\"But maybe we will do this again one day,\" he said.\n\n\"I'd like that a lot,\" I enthusiastically replied.\n\nI got up and put my underwear back on and made my way to the door.\n\n\"Night Steve,\" I said.\n\n\"Goodnight Tom, sleep well,\" he replied as I left his bedroom and made my way down the hallway.\n\nTo be continued..."
    ],
    "authorname": "Gaymale2021",
    "tags": [],
    "category": "Gay Male",
    "url": "https://www.literotica.com/s/the-sleep-over-pt-05"
}
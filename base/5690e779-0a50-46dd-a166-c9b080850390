{
    "title": "E-Beth Ch. 04",
    "pages": [
        "****\n\n-- CHAPTER 4: After \"I Love You\" --\n\n****\n\n*-- APRIL 2007 --*\n\n\"I told you. My old man thinks it 'builds character'.\" Teddy sighed. \"You think I *want* to work in a stockroom?\"\n\n\"No, no...\" Stella waved her chopsticks in lieu of shaking her head. \"It's just... we're the same age, and I'd do *anything* to climb out of this dead-end job. I mean, right now I'm a freakin' secretary. You think I want to be a secretary all my life? I want to be more. It's my own damn fault for not going to college. But I'm taking classes now and I really think I'm learning things that'll help me find something better.\"\n\nStella sighed, shoving around her orange chicken. The three of us were having lunch together at Wok 'N Roll, our local Chinese dive, eating 2-item combos with chow mein. She reached across the table and covered Teddy's hand with her own. \"Believe me, I'd hate to see you leave Argen; but you're brilliant, Teddy. You deserve better. You need to tell your old man 'screw you' and go find a job that really challenges you.\"\n\nMy boyfriend fidgeted and then looked pointedly at us. \"And leave you two? No way. I'd rather work a dead-end job and see you both every day than risk going away.\"\n\n\"We're always around. It's not like you don't know where we live.\" Stella shook her head. \"And there's always weekends. C'mon, E-Beth. Help me out.\"\n\n\"He can do whatever he wants to do,\" I exhaled quietly and looked away. Stella looked disappointed in me, then turned back to Teddy, rubbing his hand and leaning forward as she urged him on.\n\nHow had I not seen it sooner? How had I not realized what I was creating? Was I so na\u00efve to think that Teddy and Stella would be able to continue seeing each other without me, continue fucking each other without me, and NOT develop some sort of close bond?\n\nIt was happening again. I suppose it was my own fault. I never should have invited the cute blonde into our bed. I mean, yeah, *I* was horny and craving some pussy. But maybe I should have insisted it just be a one-time thing. Even after the incredible weekend, maybe I should have told Stella that it was the one and only time I'd share my boyfriend with her, and we'd move on with our own lives just as friends.\n\nBut it all just seemed so perfect. I like girls. I love their softness in contrast with a man's hardness. I love their tenderness and grace. I love their smell. And I love their taste. And who better than a close friend who *promised* me she would never betray me? Who better than someone who had already resisted the temptation to sleep with my boyfriend behind my back? Had I given Stella too much leeway? Was she now falling in love with my boyfriend and stealing him away from me, even if she hadn't intended to?\n\nIt was my own fault. Stella's a size zero with C-cup tits, a tiny little ass, and an angel's face. I'm just me. I don't work out enough. My butt and thighs are too fat. I don't like my cheekbones. And my skin could be clearer. Stella's a green-eyed blonde babe. I'm just frumpy me. I should have known Teddy would pick her over me, given the choice.\n\n\"E-Beth?\" Stella touched my arm. \"You've been really quiet today. You okay?\"\n\nI took a deep breath and pasted a smile on my face. \"I'm fine. I'm fine.\"\n\nShe looked at me sweetly with concern, then patted my knee and went back to gazing adoringly at Teddy. And the whole time, I couldn't get their words out of my head.\n\nTeddy: *'Stella, I love you.'*\n\nStella: *'I love you, too.'*\n\nFUCK.\n\n****\n\nI sighed. \"Up here, Teddy.\"\n\nThe cute boy with the nice hair blushed and pulled his gaze up from my chest. He tapped his clipboard with his index finger and grinned. \"What? I'm suddenly not allowed to stare anymore?\"\n\n\"Not here.\" I looked up and down the hallway, wondering if any of our coworkers were around while I stood at the counter to the stockroom.\n\nHe pouted. \"But I haven't really seen 'em since your birthday,\" he complained in a whiny, but joking, tone.\n\n\"It's only been three days.\"\n\n\"And I don't want to wait a minute more than I have to.\"\n\n\"Jeez, is that all I am to you?\" I suddenly snapped. \"A pair of tits?\"\n\nTeddy's eyes popped open and he pulled his head back, looking at me in confusion. \"You okay?\"\n\nI grimaced and took a deep breath, looking around again to make sure we were alone. \"I'm fine, I'm fine. Can I just get my samples, please?\"\n\n\"Uh, sure. Gimme a minute.\" He turned away from the counter and headed into the racks.\n\nI took another deep breath and calmed myself. Was I blowing this all out of proportion? For three days, I'd studied my boyfriend and best friend, scrutinizing them to see if anything had changed. For three days, everything seemed normal. The two were friendly with each other, but not physically affectionate in public. Teddy was just as endearingly cute with me as always, acting like a schoolboy in love with me. He still talked to me every day, either visiting during lunch or calling me in the evening. As far as I could tell, he hadn't met up with Stella outside of work, as I had made calls to both of them and separate calls to their apartments to chat with their roommates just to be *sure* that Teddy really WAS playing video games and Stella really WAS out shopping with Katie. Yeah, I know it was a little stalkerish, but I had my concerns.\n\nBut I couldn't act on my concerns. All I really had were the faint memories of exchanged \"I love yous\" milliseconds before I passed out. Had they even really said them? Was it all in my head? Was there some context that I didn't know about?\n\nIf Stella and Teddy had started acting differently, I might have said something. But they were the same as always, and both still friendly and affectionate with me. And the last thing I wanted was to come off like some psycho-obsessive girlfriend. Heck, Teddy and I had been together for less than three months.\n\nBut it still gnawed at me in the back of my head.\n\n\"Here ya go.\" Teddy returned with a carrying case of vials filled with liquids in various shades of blue. He set them on the counter and slid them over to me with a smile. \"Don't I get a kiss for that?\"\n\nI blushed, pleased that he would still want an affectionate kiss from me. It showed that he still was into me. And after once again glancing around to make sure the coast was clear, I leaned in and pecked him.\n\n\"We still on tonight?\" he asked, hope in his voice. It was a Friday night, our usual date night, after having a drink with the girls at Monahan's.\n\n\"Sure,\" I smiled.\n\n\"Great. Stella and I were talking about going to Wingnuts for dinner. They're running a promo on Honey Barbecue.\" \n\n*Stella?* Right. She'd come out with us the past two Friday night dates. After all, her roommates expected her to be out with Teddy. And of course, so far I'd welcomed her presence in our bed. So it would be me, my boyfriend... and *her*. \"Uh, sounds good,\" I mumbled.\n\nTeddy grinned and then leaned across the counter for another kiss. \"I love you.\"\n\nI kissed him and then sighed, feeling almost melancholy. \"I love you, too.\"\n\n****\n\nI watched Teddy and Stella carefully at Wingnuts. Teddy sat next to me in our booth for four, his left arm around my neck and his fingers walking down my chest every so often until I spanked his hand and shot him a teasing look. He just grinned and went back to the conversation.\n\nStella was doing her usual chatterbox thing, flirting casually but not doing anything that really pushed the boundaries of opposite-sex friendship. I was with my boyfriend, and she was across the way just acting like a friend. And once again, I found myself wondering if I had imagined the whole thing. There was nothing going on between them beyond what Stella had promised: friends, fuck-buddies... but nothing more.\n\nSo I relaxed. I'd been quiet for most of the evening, blaming things on work and being tired. But now I came alive, flirting back with both of my friends like always, reminding myself just how much I loved them, and even moving my boob into Teddy's palm every now and again to get a comforting squeeze.\n\nAs usual, we returned to my condo for a pleasant threesome. Now that we were all getting used to the routine, we were able to take things a bit slower, not worrying about time.\n\nI awoke the next morning to find my two lovers screwing on the bed beside me. I had a momentary panic attack, but once Stella realized I was awake, she promptly kissed me and pulled my legs around so that she could eat my pussy while still riding up and down Teddy's cock. The girl may have been a lesbian rookie, but she was learning fast. And we all had a nice screwing before splitting apart for the rest of the weekend.\n\nBut then came the following Thursday. It was the worst day of my life.\n\n****\n\n*-- MAY 2007 --*\n\n\"Elizabeth, I'm sorry.\" Alfred leaned back in his chair and steepled his fingers. \"It's just not working.\"\n\n\"I can *make* it work,\" I repeated through clenched teeth. \"I just need more time!\"\n\n\"You've already spent two months trying to come up with a work-around,\" he said patiently, but firmly. \"I can't let you waste any more time. It's okay. You can't win them all. And even with this failure, you still have an incredibly high success rate.\"\n\n*'Failure'. He just *HAD* to use the word 'failure'.*\n\n\"I can make it work,\" I repeated insistently.\n\nAlfred sighed and gave me a stern look, the grandfatherly disposition finally dropping to be replaced by the harder-edged manager I knew my director could be. \"I've read your reports. There's just no way around the trifluoperazine interaction. And without it, you don't have a drug.\"\n\n\"I'm not done yet. This variant of tetrapterys methystica has shown promise, and I'm just now ready to conduct the tests on it!\"\n\n\"Fine, do your tests.\" Alfred conceded, sensing that this compromise would at least end the argument. \"But this is the final attempt. If it doesn't work, I'm going to have to pull the plug on the project and put you on something else. Radinsky can use your help.\"\n\n\"Radinsky?\" I scowled, thinking of the mid-40s researcher who *really* resented not only my youth, but that I was a female *daring* to play at being a chemist. \"He HATES me!\"\n\n\"He doesn't hate you.\" Alfred shook his head before sighing, and then once again the concerned grandfather was back. \"You look tense, Elizabeth. You've been accumulating more vacation days again. Perhaps a short break would be good for you.\"\n\n\"I'll make the tetrapterys work.\"\n\n\"I hope you do.\"\n\n****\n\n*FUCK!!!*\n\nBad reaction. Bad chemical reaction. Bad.\n\nFailure.\n\nIt's a failure.\n\nAnd Alfred's going to pull the plug on my project. SIX MONTHS of work... All for nothing.\n\n*\"FUCK!!!\"* I yelled aloud, kicking the cabinet hard enough to make the door pop loose of its clasp and swing open.\n\n\"E-Beth!\" Steve barked from across the room. He put down the tray he was holding and stepped up to me, putting a hand on my arm.\n\n\"I'm fine, I'm fine.\" I shrugged loose from him and took three steps away, my hands on my hips. I steamed for a few seconds before coming to a stop and stretching out my neck. I took a deep breath and then looked up at the clock. 11:45am. \n\nExhaling, I started pulling off my gloves and took my lab glasses off. \"Let's break for lunch,\" I told my lab technician. \"We'll clean up after that.\"\n\nAfter taking another look to make sure I was alright, Steve nodded. And then with an apologetic shrug, he left.\n\nI didn't leave for lunch. I put my gloves and glasses back on. Just *one* more try...\n\n****\n\n\"E-Beth, did you even eat anything?\" Steve sighed when he returned and saw me hunched over the lab bench, almost desperately running and re-running the tests.\n\nI glanced up at him and then darted my eyes to the clock. *Is it one o'clock already? Crap!*\n\nI looked back at Steve and shrugged. He took a deep breath and walked up to me, patting my back gently. \"E-Beth, it's a lost cause.\"\n\nI sighed and let my head fall forward. A long strand of my bangs came loose and hung over my face. Sitting up straight again, I brushed it back and sighed, \"Not my day. What else can go wrong?\"\n\nSteve immediately paled and looked away.\n\n\"What?\"\n\nHe sort of gave me a weak smile and turned to start cleaning up the materials. \"What? Oh, nothing.\"\n\n\"That's not 'nothing', Steve. What?\" I stared intently at the bespectacled, slightly-balding man until he paled again.\n\n\"Really, it's nothing.\"\n\n\"Steve!\"\n\nHe sighed and slouched. For someone who looked like a middle-aged guy more interested in beer and pizza, Steve had always surprisingly been in the loop when it came to office gossip. He'd heard something, and he was trying to keep it from me. \"I'm not sure I should be telling you this.\"\n\n\"Is it about me?\"\n\n\"Well, uh...\"\n\n\"Then you should be telling me!\" I barked.\n\nHe jumped and then wilted. \"It's just... You know Reggie?\"\n\nI nodded. Reggie was another lab tech, someone Steve often met up with in the lunchroom.\n\nSteve wouldn't meet my eyes. \"Well... uh...\" He took a deep breath and then just spat out the rest. \"Reggie saw Teddy and Stella coming out of the janitor's closet at lunch. Teddy had lipstick on his cheek and Stella was fixing her skirt. They held hands for a few seconds before Stella giggled and then darted away from him. Teddy went straight into a bathroom, looking bashful, no doubt to clean up his face.\"\n\nI was shock-still, absolutely rigid. Only my eyelids moved as I blinked several times, just trying to process everything. And after thirty seconds of me being a complete statue, Steve took a concerned step toward me.\n\nThat's when I exploded. My fists balled. My arms tensed. And I suddenly whirled to the side, once again kicking out at a cabinet hard enough to not only pop the door open, but also put a nice dent in the front of my pointy-toed shoes.\n\n*\"FUCK!!!\"*\n\nThe next time I blinked, I realized I was in the hallway outside of the lab, stomping like an enraged Godzilla. Once I got amongst the cubicle farm, I half-thought about going on a rampage, destroying fuzzy-felt walls like little Tokyo buildings. But then a middle-aged woman gave me a weird look as I stomped past, and I realized how strange I must look.\n\nThe need to not make people think I was weird momentarily overrode my anger, and I slowed down to a calmer, but still hurried, pace.\n\nStella was at her cube. I marched straight up and barked, \"Stella, come in here. I need to talk to you.\"\n\nIf she noticed my tone, she didn't show it. Her eyes simply lit up at the mere sight of me and she giggled while getting to her feet. She skedaddled into my office and then closed the door behind her without having to be told by me. And once closed, she excitedly chirped, \"Oh, I've got something I've GOT to tell you!\"\n\n\"YOU FUCKING CHEATED ON ME!\" I barked, cutting her off.\n\n\"What?\"\n\n\"You cheated on me!\" I yelled loud enough for my voice to carry through the door, even if the words might be muffled. I quickly grimaced to try and force myself to speak more softly.\n\n\"E-Beth, what are you talking about?\"\n\n\"*Today*. At *lunch*. A tech SAW you and Teddy coming out of the janitor's closet!\"\n\nStella's face went ghost white. Her eyes popped wide open and there was no mistaking the guilty expression on her face before she clapped her hands over her mouth. She looked absolutely horrified. And getting that kind of confirmation only made me even more enraged.\n\n\"You cold-hearted, manipulative bitch!\" I barked.\n\n\"Whoa, whoa!\" Stella held her hands up. \"Wait, no-no-no! That's what I was JUST going to tell you! Teddy and I had a quickie at lunch and I was all excited to come tell you about it! I just can't believe we got caught! We checked the hallway to make sure the coast was clear and Teddy rushed to the bathroom to make sure he didn't have any of my makeup on him!\"\n\n\"Ohhh...\" I drawled, my eyes rolling. \"So you thought you'd get away with it!\"\n\n\"E-Beth! It was just sex! Same thing Teddy and I have been doing for a month now! You told me we could, as long as I told you about it! Well I'm telling you about it!\"\n\nI just glared at my supposed friend. I folded my arms and coldly hissed, \"And when did you fall in love with my boyfriend?\"\n\nStella's eyebrows furrowed in confusion. \"Huh?\"\n\n\"I heard you,\" I spat just as coldly. \"I heard you say you loved him; and I heard him say it back.\"\n\nStella winced, shaking her head. \"E-Beth, that's not what it sounds like.\"\n\nI couldn't take any more. I just shook my head in disgust, grabbed my purse, and then bolted out of my office.\n\n\"E-Beth, wait!\" Stella came after me.\n\nI marched straight over to Alfred's office, this time not caring if anyone saw me stomping like an out-of-control, radioactively-mutated lizard. I burst in, surprising him. I simply barked, \"Fine. I'm taking a vacation. I'll see you next week.\" And then just as quickly, I stormed away.\n\nStella was right behind me, grabbing at my hand outside Alfred's office. \"E-Beth!\" she pleaded.\n\nI shrugged her off my arm and whirled on her, holding up a finger in her face. \"Fuck off and die, you backstabbing bitch!\"\n\nIt wasn't the most common phrase heard in the middle of our department floor. Three heads had already been poking up above the cubicle walls when I went raging into Alfred's office. At the words \"backstabbing bitch\", the rest of the heads in our department popped up.\n\nIgnoring them, I left Stella standing there in absolute shock. And I quickly flew out of the building.\n\n****\n\nTeddy tried calling me first. I held the phone in my hand, staring at the display screen, wondering if I should answer it. I really wanted to talk to him. I loved him. It was crazy, but I loved him.\n\nWhy the fuck did I love him? I was smarter than this. I was more logical than this. I had only ever really loved one man before: David. And I knew exactly why I loved him so much.\n\nDavid had been the first boy to see me as a girl worth getting to know. Yeah, it may have started off because of that stupid Chemistry experiment in High School, but he didn't have to become my friend over it. He had. He'd given me the motivation to get in shape and to start taking care of my body. Then I'd started to fall in love with him during my Prom. I'd given him my virginity. And even though we had nothing else bonding us together, he'd become my boyfriend and we'd shared a wonderful year of romance together.\n\nI'd screwed up that relationship by breaking up with him. I'd wanted to explore myself, to move beyond him. I won't say it was the biggest mistake of my life. A lot of good things came of it and David found his soulmate in Amber. But there were many, many times over the last seven years that I'd wondered how things might have turned out if I hadn't done that. David had been my one and only love, and I still loved him in my own way.\n\nBut Teddy? Yeah, we'd known each other since he started working at Argen almost a year ago. But we'd never really *known* each other until that night of the Holiday Party, only five months ago. And everything had been such a whirlwind since then. We'd started dating in February, only three months ago. And heck, I'd seduced and brought Stella into our relationship two months ago. He'd been fucking her for almost as long as he'd been fucking me!\n\nWhy the hell would I feel in love with Teddy? I'd dated other guys: Marcus, Vic, and Chad. All of them I spent more time with than with Teddy. And while I'd enjoyed their company, and even exchanged the L-word a time or two, I'd never FELT this kind of attachment. When those relationships failed, I'd felt angry, but deep down they didn't really *hurt*.\n\nThis one hurt. Maybe it was because with all the other guys, in the back of my head I kind of *expected* them to betray me. They were bad boys. They were players. They were walking penises just waiting to screw up and put themselves into a cunt they weren't supposed to.",
        "But Teddy? He was a nice guy. He'd been crushing on me for months before anything happened. And once we did get together, he'd treated me like a princess. He'd been young, eager, and sooo devoted to me, like a little puppy. And yet, when I needed him to become the big dog, he could do that too. He fixed things. He opened doors. And he savagely *took* me when I wanted him to.\n\nOne might think that adding Stella to the relationship would have distracted him. Actually, he became even more attentive to me. Yeah, he made a lot of time for her, especially in the last couple of weeks while pretending to be her boyfriend for the sake of her roommates. But he somehow managed to never let me feel neglected or underappreciated. We still had our dates and spent a lot of quality time together. And I always saw the love he had for me in his eyes.\n\nAnd I loved *him* for it. In three months, Teddy had already become the best boyfriend I'd ever had since David.\n\nBut did that just make him an even better player than Marcus, Vic, or Chad? Had he somehow tricked me with his youth and innocence and nerdiness into not realizing he was somehow manipulating me?\n\nOr was he just a kid in a candy store with too many options? Maybe Teddy was really just a good guy, caught up in an impossible situation that *I'd* created. He had me, and if I'd left things like that he might very well have been with me to the very end. But nooo... *I* had to go and bring a prettier, younger, skinnier girl into our relationship, and a natural blonde to boot. I was the comfortable hamburger that Teddy would have been satisfied to dine on... up until *I* served him the prime rib that would be even tastier. What should I have expected? It was my own fucking fault.\n\nWhat could Teddy say to me on the phone? That he was sorry? That he never meant to hurt me? That he just had more in common with Stella and they fit together better than me? I worked too much. I was too focused on my career. I spent some time with Teddy on weekends but didn't give him much on weekdays. I had my kinks, but I wasn't wild and impulsive like Stella, who would seduce him into a quickie in the janitor's closet. Teddy was young. Stella was young. I was a boring old fart. He'd traded me in for a better model.\n\nI didn't want to talk to him. So I didn't answer the call.\n\nStella was calling me, too. I didn't want to talk to her either. The lying bitch had promised to my face that she would never do anything to jeopardize my relationship with Teddy. But behind my back she'd somehow gotten him to tell her he loved her. Some friend.\n\nNow I just turned OFF my phone.\n\nI was angry. I was hurt. And there was only one place in the world I wanted to go.\n\n****\n\nThe door popped open and David stood before me. \"E-Beth!\" he exclaimed and then opened his arms for a big hug.\n\nA shudder of relief went through my body. After driving away from Argen, I'd headed straight to the airport and booked myself on the next commuter jet flight back to the old college town. Even though it was a one-hour flight, plus getting through security and boarding and all those other delays, I'd left early enough in the day that I worried David and Amber wouldn't be home from work yet. I didn't really know how much longer I could hold up, and I was so thankful that at least David was already home.\n\n\"Surprise,\" I said only half-heartedly. It was our usual greeting whenever I showed up unannounced like this, but I was just too drained to muster any enthusiasm, no matter how happy I was to see him.\n\nDavid immediately looked concerned, and he stepped through the doorway and onto the porch to hug me. \"Are you okay?\"\n\nThe instant his strong arms wrapped around me, I cracked. My knees buckled and I started dropping to the ground. But David caught me and pulled me up to my feet. My strength returned enough for me to bear-hug him desperately. And I started crying against his chest.\n\n\"Shhh...\" David soothed, holding me up with his left hand and reaching for my cheek with his right. He stroked me gently, repeating his soothing sounds. But he didn't try to say anything for a few minutes while I simply stood there and bawled my little head off.\n\nBut eventually, I got myself under control. I tilted my head back to look up at him, seeing the warmth in my old lover's eyes. And for the moment, at least, I felt safe.\n\n\"Come on, let's get you inside,\" he said tenderly.\n\nI managed to nod and then raised my eyebrows questioningly. \"Amber?\"\n\nDavid shrugged. \"At the hospital. But her shift ends at six.\"\n\nI nodded again and let David carry me inside. I'd tell him my story first. And then hopefully I'd have a better handle on it when I told Amber later.\n\n****\n\nThey say pregnant women have a glow about them. It's true. I happen to know the biochemical reactions that go into it. First, blood volume in a pregnant woman increases by 50%, causing a woman's whole body to appear more flushed, especially in the cheeks. Pregnancy hormones also increase oil production, leaving a woman's face shinier.\n\nBut I also think a part of it is in the way a woman carries herself. Amber, now five months pregnant, certainly walked around as if her every movement said, 'Yes, I'm happily married to my soulmate and pregnant with our first child. I'm about to have everything I ever dreamed of, and I couldn't be more thrilled with my life.'\n\nAs much as I loved my friends, just to see Amber made me even more depressed. We were the same age. Actually, I was a few months older than her. And yet she really did have everything she'd ever dreamed of. She had her soulmate husband. She owned a fantastic house with the big yard in which to raise a gaggle of kids. She was working her dream job as a doctor, she drove a shiny BMW, and on top of all that, she was the most gorgeous woman in the world.\n\nShe was everything I was not.\n\nNot that Amber tried to rub it in my face or anything. David called her at the hospital to let her know that I'd come by. And when my best friend returned home, she'd immediately come to hug me. That's right: \"best friend\". I'd briefly given over that designation to Stella, but the backstabbing bitch didn't deserve it anymore.\n\nThe three of us sat down on the couches in the living room, Amber with me, and David in the easy chair. And a little more clearly than before, I told Amber my story.\n\nShe'd already known about the Holiday Party, as I'd explained the situation to my friends in Hawaii before their wedding. I'd also already told them when I'd started dating Teddy. But for some reason, I'd never gotten around to mentioning that I'd invited Stella into bed with me and my boyfriend. And both David and Amber were at rapt attention as I explained the developments of our three-way relationship from one-time threesome to Stella's pretend-boyfriend to their declarations of \"I love you\" to each other.\n\n\"This always happens,\" I complained. \"I bring some hot, young babe into bed with us and the next thing I know, my boyfriend's got it in his head that he's some sort of sex god and runs off with someone else.\"\n\n\"Maybe you should stop bringing girls into your bed,\" David drawled.\n\n\"I can't help it!\" I whimpered. \"I blame you, Amber. If it weren't for you, I'd just be a normal, *straight* woman looking for love. But *nooo*, now I NEED female attention, too. Vic was right: I need another girl in bed with me to really get off.\"\n\nDavid and Amber looked at each other, communicating something between each other with their eyes.\n\n\"And now it's happened again,\" I sighed in resignation. \"I did what we'd discussed. I found a 'nice guy' instead of giving into my arousal for the 'bad boy'. But my nice guy still ended up choosing a hot young girl over me.\"\n\nDavid snorted. \"E-Beth, how many times do I have to tell you: *You're* a hot young girl.\"\n\n\"Am not,\" I scowled. \"I'm over the hill.\"\n\n\"Yeah, right,\" Amber drawled. \"You turned 26 what, a week ago?\"\n\n\"That's still technically 'late-20s',\" I complained. \"Stella's only 23, same as him.\"\n\n\"Coupla years,\" David waved me off. \"It's not like you LOOK older.\"\n\n\"Don't I?\" I picked at my hair and squeezed my own cheeks. \"I'm running out of time here. I'm not very pretty to begin with-\"\n\n\"Nonsense,\" David cut me off.\n\nI ignored him and just kept going. \"The older I get, the worse I'm gonna look. And it's hard enough for me to find quality guys as it is.\"\n\n\"Will you STOP it!\" Amber barked shrilly. Her sudden outburst was surprising enough to make me pull my head back. My best friend then exhaled and gave me a plaintive look. \"Good lord, E-Beth. Will you stop complaining about your looks? You're beautiful! And it's really annoying when you keep harping on this delusional perception that you're not!\"\n\n\"Easy for you to say.\"\n\n\"Fine,\" Amber huffed. \"I'm ugly! I'm unattractive! So there!\"\n\nI rolled my eyes. \"Don't be ridiculous. You're the most gorgeous woman in the world, Amber, even pregnant.\"\n\n\"Am I? Well, I don't believe you,\" she spat.\n\n\"Of course you are!\"\n\n\"And why should I believe you?\"\n\n\"Because it's true!\"\n\n\"You're just saying that because you're my friend.\"\n\nI rolled my eyes. \"Pull a hundred guys off the street and ask each one of them if they think you're gorgeous, and every single one of them will say you are.\"\n\nAmber arched an eyebrow at me. \"Is that what it's gonna take for you, too? Do we have to bring you out to a mall and ask a hundred guys if they think you're beautiful? Will THAT get the point through your thick skull?\"\n\nI blushed. \"Well... maybe... But you're still light years ahead of me.\"\n\n\"Am I?\"\n\n\"Sure. You're tall and thin and elegant. You're not stuck with my nose or this facial structure or my thick thighs.\"\n\n\"I think my nose is too pointy and doesn't have the right shape. I think my cheekbones make me look too gaunt and skeletal. I think my hair is too thin and I can never pull off the full-bodied styles that I really want. And my hips are too skinny and not womanly enough, making me look top heavy with these boobs. My torso isn't proportioned right. And right now I freaking have a massive exercise ball attached to my waist!\"\n\nI blinked a few times in surprise, not sure how to respond to that.\n\n\"Sometimes I wish I had *your* curves, E-Beth. Every girl has things they'd like to improve about their appearance, even me,\" Amber sighed. \"When are you going to realize that you're beautiful?\"\n\n\"You're a ten, Amber.\" I shot a glare right at David. \"Honestly, what am I?\"\n\nDavid shrugged. \"You're a ten, too.\"\n\nI rolled my eyes. \"Please.\"\n\n\"E-Beth, you're beautiful,\" David said sincerely, looking right at me. \"Are you exactly the same as Amber? Of course not. Different heights, different curves, different hair and eye colors. So what? Are you really so shallow as to put all your stock of self-worth into how you look?\"\n\n\"I'm not shallow,\" I retorted defensively.\n\n\"Then why is this such a big deal?\"\n\n\"Big deal? The big deal is that my boyfriend left me because I wasn't pretty enough for him!\"\n\n\"You sure that's the reason?\" David cocked an eyebrow.\n\nAmber added, \"Are you even sure he left you? From what you told me, Teddy is just as in love with you as ever. You're basing all of this on a lunch quickie he had with your third lover! It's not like they hadn't been screwing all this time without your permission. And what if she really WAS about to tell you? It doesn't even sound like he was going to break up with you or anything. It was just another ordinary day.\"\n\n\"It doesn't matter,\" I whimpered. \"He's going to pick her.\"\n\n\"Why would you think that?\"\n\n\"Because she's younger and prettier than me.\"\n\nDavid facepalmed.\n\n\"Okay, fine, fine,\" I conceded, taking a deep breath. \"Maybe I'm not a two out of ten. But he still told her he loves her. Where does that leave me?\"\n\n\"Did he tell you he loves you?\" Amber asked.\n\nI blinked. \"Yes.\"\n\n\"Do you believe him?\"\n\nI blinked twice. \"I did... But now... I dunno...\"\n\n\"So you believe him when he says the L-word to her, but you're 'I dunno' when he says the L-word to you?\"\n\nI frowned, \"It's complicated.\"\n\n\"How?\" Amber sighed. \"Look, there're really just two possibilities: One, like most guys, he doesn't really mean it when he says 'I love you', which means he doesn't love *either* of you. In that case, he's a dirtbag you'd be better off without. Or Two, he loves the both of you, in your own unique ways. And when he says he loves you, he really means it. Did you ever think of that?\"\n\n\"What?\"\n\n\"C'mon, look at us right here. David, do you love me?\"\n\n\"Of course I love you, honey,\" David told his wife.\n\n\"Do you love E-Beth?\"\n\nDavid turned his warm smile to me. \"I love you, Elizabeth.\"\n\nMy heart melted.\n\n\"And do you love him, too?\" Amber added, pointing from me to him.\n\n\"Yes, of course I still love you,\" I said to my ex-boyfriend. \"Not romantically. But I'll always love you.\"\n\nAmber waved her hand. \"And there you have it. This is the same situation you're in with Teddy and Stella.\"\n\nI blinked and frowned. \"Wait, wait, no. This is completely different. What I have with the two of you is special.\"\n\n\"Special, I'll agree.\" David nodded. \"But not necessarily unique. From everything you've told us, from your friendship with Stella to the devotion Teddy's shown you up until this point, the three of you have some of that same potential.\"\n\n\"Do you want to steal David from me?\" Amber asked casually.\n\n\"What? Of course not!\" I shook my head at the very thought.\n\n\"Then what's got you convinced that Stella's trying to steal Teddy from you?\" Amber raised her eyebrows.\n\n\"I... uh...\" My jaw waggled up and down a few times. \"She... uh...\" My mind raced over everything I had seen between them. Really, Stella *hadn't* done anything to show that she was trying to take Teddy away from me. Join us, sure, but take him away? No. Maybe that meant she was being manipulative and sneaky and being very careful about how she got her hooks into him without me watching.\n\nThen again, maybe Stella was being true to what she'd promised. She was my friend. And she would never do anything to jeopardize my relationship with Teddy, not intentionally at least.\n\nBut I wasn't sure. Whimpering, I reached both my hands up to hold my head and bent over, clenching my eyes as if I could shut the world away.\n\nIt had been a really shitty day.\n\n****\n\nI didn't really want to bitch about the Teddy/Stella situation all night; and as supportive as they were, David and Amber didn't want to listen to me bitching all night, either. At first, I fretted that I had to come up with SOME resolution in my head as to what was going on before it was too late. But then Amber reassured me by saying, \"If he really loves you, he'll understand. And if he doesn't, then he's not worth it anyways.\"\n\nWe also had company. Cherys and Danielle were dropping by to visit with little Ellie. It had become a regular Thursday night thing to have dinner together as a big extended family. It gave David a chance to see his 8-month-old daughter and Amber some time to practice being a mommy. Cherys and Danielle were just happy to delegate away babycare duties for a couple of hours.\n\nFor me, the dinner with old friends and playing with baby Ellie were welcome distractions from my own troubles. And by the time Cherys and Danielle returned home at 8pm to put the baby to sleep, I was feeling much calmer about everything.\n\nAmber told me to turn my phone back on and let Teddy and Stella know that I was alive, at least. But I shook my head in the negative and just sagged deeper into the couch. \"If me being gone like this for one night pushes the two of them into forming a relationship with each other -- and without me -- then so be it. I'd be better off without them.\"\n\nDavid and Amber looked concerned, but let it pass. In the end, we spent the next several hours catching up on THEIR lives before going through our nightly routines in preparation for sleep.\n\nIt was probably the first time I'd visited that the three of us *didn't* end up fucking right away. My best friends sensed that I wasn't in that kind of mood, and didn't pressure me. But they still welcomed me into their bed, and I snuggled happily beneath the covers on my left side, with my head pillowed on David's chest while he lay on his back, Amber mirroring me on his other side. We all talked quietly as the drowsiness overtook us. Amber caressed my cheek. And then I drifted away to the pleasant dreams of one who feels safely cocooned beneath a loving man's arm.\n\n****\n\nAs shitty as Thursday had been, Friday *more* than made up for it, in multiple ways.\n\nFirst came the multiple orgasms. *<grin>*\n\nI woke with a strong man spooned around my back. At first, I thought it was Teddy and a flush of warmth spread through my whole body. Relief, happiness, and lust shot through me, waking me up quickly. But then I looked around the room and recognized David's and Amber's master bedroom, and I quickly sank back to reality.\n\nBut that was okay. Far from being disappointed, I sighed with an old remembered contentment feeling David's arm wrapped around me. We'd pivoted in our sleep, so that I was facing the edge of the bed with David's broad chest flush against my back. His left arm had wrapped around my side, and his hand was underneath my borrowed T-shirt so that he could cup and hold onto one of my big titties. As I began to move, he reflexively squeezed his fingers to grip my breast tighter; and my own stretching made his coarse palm scratch against my nipple.\n\nDavid's cock was awake before he was. I felt the big weapon splitting the cleft of my buttcheeks, his dented boxer shorts digging the strap of my thong panties deeper into my crack. I hadn't been in a sex mood last night, otherwise we might very well have slept without any underwear. And this morning, I wish we had. I would have loved to feel the rigid but surprisingly soft skin of his bare cock against my fully naked buttcheeks.\n\nAt least I didn't have to wait long. David woke up while I was grinding my ass against his morning wood. I heard the change in his breathing as he came awake and realized he was squeezing my tit and bear-hugging me from behind. And then I felt his hot breath against my neck just before he bent and kissed me behind my ear. \"Good morning, Elizabeth,\" he breathed in such a sexy, deep voice.\n\n\"Mmm... morning, David.\"\n\n\"Morning, E-Beth,\" Amber suddenly chirped in front of me, startling me as I popped my eyes open and realized my best friend was kneeling on the floor right in front of me. She leaned over and quickly pecked my lips. And then before I could react, she slid herself beneath the covers, pulled my panties down to my knees, and took a long lick at my already moistening pussy.\n\n\"Oh, shit...\" I whimpered.\n\nAll three of us were very sexual people. We hadn't had sex last night. So we made up for it this morning. After the first lick, Amber paused long enough to drag my panties the rest of the way off my body before rolling me onto my back, spreading my legs to the sides, and then parking herself between my thighs. She looked adorably cute with the bedsheets covering her head right to her forehead, but no farther; and her angelically beautiful face then descended into my lovenest to resume her cuntlapping.\n\nMeanwhile, David was tugging my shirt upwards to get at my round melons. He kissed me with a raw, fierce passion that set my heart racing. And I was very quickly so turned on that I couldn't decide whether to flail out and grab his cock or work my shirt off so that he could begin suckling my teats. In the end, I did both, but with his help. He shoved his boxers down his thighs so that I could wrap my left hand around his turgid tool. And he helped me drag my shirt over my head while I worked the other side of it with my right hand. Together, we accomplished both goals, and soon he was licking and kissing and fondling to both of our hearts' content.",
        "I had almost reached my first orgasm, what with Amber's expert cunnilingus and David's attention to my upper body and face. But just before I got there, Amber suddenly pulled away from my crotch and reached to her husband. She grabbed his hips and rolled him over me. And then holding David's cock in her hands, she guided him to my entrance and spanked his ass to get him to plow all the way into me with a single thrust.\n\n\"AAAAAAAAAAHHHHHHH!!!\" I screamed, the sudden penetration just perfect to put me over the top. My feet kicked down and bounced both mine and David's hips a few inches off the mattress, our groins pressed completely together. His tongue re-invaded my mouth even while I howled the ecstasy of my climax. Plus, before my orgasm abated, David suddenly hunched upwards, driving his shaft into the upper part of my pussy so his pelvic bone could rub against my clit. And it also gave Amber enough room to dive into our joining, her tongue on his balls and on my pussylips, titillating my senses enough that I quickly jerked and spasmed in an aftershock climax to follow the first.\n\nMy friends let me rest for a minute to recover after that. While I lay flat on my back, panting rapidly as I came down from my high, Amber came around to kiss me and playfully slobber my own orgasmic nectar all over my face. David remained at full depth inside me, his cock pulsing with his own need, a pleasant vibration deep within my vaginal tunnel.\n\nI looked at the two of them and then chuckled. \"You know, this is the first time I've ever slept with a married man.\"\n\nAmber and David looked at each other before breaking into their own grins. And then Amber cocked an eyebrow at me. \"You trying to steal my husband?\"\n\nI shook my head. \"Of course not.\"\n\nShe nodded. \"I believe you. And because I believe you, I'm just going to sit back here and rub this basketball on my belly while I watch my husband fuck the shit outta you. Okay?\"\n\nI grinned. \"Okay.\"\n\n****\n\nAmber didn't *quite* just sit back and watch. She helped out quite a bit by leaning over to kiss me and suck on my sensitive nipples while David rhythmically humped his gorgeous dick in and out of my pussy. In the end, he nutted his load deep inside me. And Amber had been rubbing herself several inches *below* her belly, so that she came at the same time David did, the tension in her eyes showing how turned on she was to watch her husband sperming me.\n\nAnd of course, she just HAD to slurp all that sperm out of my cunt and then snowball it all right back into my mouth.\n\n*Yummy.*\n\nAnyways, David had to go to work then. Amber herself was already working reduced hours in preparation for her maternity leave, and she was able to spend the day at home with me. I made myself useful by puttering around, helping her clean up and take care of a few things she'd just been too lazy to do with her baby preparations and general lack of energy at this stage of her pregnancy.\n\nI'd forgotten just how much I missed my college friends. While I was IN college, I took for granted that Amber, David, Diane, and Phyllis would be just down the hallway in my own house. I took for granted that I would see my other friends every day on campus, in my classes, or just walking down the sidewalk. For four years now, I'd carved out my own little world where I lived alone in my condo, worked 60 hours a week at the office and in the labs, and only really came out to socialize with the girls at lunches or on Friday afternoons at Monahan's.\n\nSure, I'd had boyfriends. Even if I didn't have *close* friends in the city, I knew people who'd invite me out to bars and the like, putting me in position to meet cute guys. But I'd never formed a clique, a base, or a close-knit circle like I had with David and Amber before. Outside of those brief dating relationships, I'd never even spent more than a few hours over an entire *week* with someone socially.\n\nWell, not until Teddy and Stella. I'd been spending every weekend with my lovers. And we had a few weeknights thrown in as well. I missed them, but if those relationships failed, then I'd be back to square one. And as I pondered those looming failures, I seriously worried about my appeal and ability to find people to replace them.\n\n\"I'm not hot enough to find or land the really awesome guys like David,\" I complained. Of course, Amber quickly started beating me over the head with how annoyed she was by my lack of self-esteem.\n\nAnd then she asked me the most important questions: \"Do you really want to find another guy? Or do you want Teddy?\"\n\nI sighed. \"I want Teddy. I know it doesn't make sense. He's not a devastatingly handsome and charming guy that makes me wet just to look at him. He's not older and mature. He's not fabulously wealthy or highly accomplished. He's nothing I told myself I wanted before. But he just adores me. He's worshipped me for a year, and he treats me like a queen. He embraces my sexual kinks, and he's got such a youthful enthusiasm that when I'm with him, I feel so... alive.\"\n\n\"Maybe that's *why* he's the right one for you,\" Amber smiled and patted my back. \"He's nothing you told yourself you wanted, but he's everything you really *need*.\"\n\nI pondered that for a little while. And then Amber squeezed my hand and looked at me a little wistfully. \"And this isn't *only* about your boyfriend, either. Would you really want to replace your best friend? Or do you really like being with Stella?\"\n\nI sighed and thought about that. There was a reason Stella and I had hit it off so well right from the beginning. She had the bubbly, youthful, and optimistic attitude that kept me from sinking into my constant anxieties and depressions. At the same time, she'd always taken a genuine interest in my well-being, whether it be supporting me during the whole Grant thing or just keeping me in the loop with the latest office gossip. On top of that, she'd really taken to exploring her bi-curious side, and there was no denying my physical attraction to the perky blonde. As hard as it had been for me to find an authentically nice guy like Teddy, I would probably have an even harder time finding someone quite like Stella.\n\nI sighed, \"I miss my friends.\"\n\nAmber nodded. \"Then maybe you should call them back.\"\n\n****\n\nI probably should have called Teddy and Stella immediately. It had already been more than 24 hours since I'd walked out of Argen in a rage, turning off my cell phone and flying away without telling anyone. If they were the people I truly thought they were, they'd be worried about me.\n\nBut I wasn't ready just yet. I didn't know what I'd say to them, other than that I was okay and that I would eventually come home. I also didn't know how they would react. I'd done a pretty dramatic thing to them, walking out and cutting off all contact. If they were still my friends, if they still cared about me, they'd probably feel a little hurt that I didn't understand. If they really WERE cheating on me, then this would be their opportunity to get rid of me and start their own relationship, and I didn't think I could cope if that was the case.\n\nLife is like one big chemistry experiment. Even when you know all the elements involved, they can react in unexpected ways. Sometimes the unexpected reactions are good; sometimes they're not. On occasion, the reactions are even explosive.\n\nStill, it's best to have an *idea* of what reaction you're going to get *before* you start mixing the chemicals. And I needed more time to think.\n\nWell, and I wanted more time to fuck, too. I hadn't seen my best friends since their wedding five months ago, and the morning's quick session wasn't nearly enough. Amber accepted my decision not to call Teddy or Stella just yet. And then she went into planning mode for how best to greet her husband.\n\nWe settled for what works best: boobs. Amber dolled herself up in lacy red lingerie with a matching transparent red peignoir that she left unbelted to expose her round belly and expose her cleavage. While not yet as big as my 34DDs, Amber's tits had been growing as her pregnancy progressed, and she told me her nipples were extra-sensitive as well.\n\nAs for me, I was still stuck with the clothes and underwear I'd worn directly from the office yesterday, which meant my lingerie was more functional than titillating. There was no way my wider hips would fit into Amber's skinny panties, but we managed to find a black shelf-bra with that would support my melons if we pushed it to the very last set of hooks. The bra was designed to expose the nipples, so it really just meant there was more breast meat jiggling on top of the half-cups than usual. And even though my boobs weren't swelling in preparation for milk-production, I'd always had extremely sensitive nipples, and Amber wasted no time leaning over and suckling on the tender teats.\n\nAmber was still suckling when David got home from work. Amber knew his schedule, and right when he walked in the bedroom door, I was sitting up against the headboard while she was on all fours, getting a nice face-full of E-Beth tits.\n\nI watched David's jaw go slack as he first zeroed in on his wife's ass, semi-covered by the transparent peignoir and lace panties. I then watched as he tracked upwards to my chest, his eyes widening as he took in my glorious breasts put on full display by the shelf-bra. Just for good measure, I then reached a finger down to tilt Amber's chin up to me. And I swear David nearly came in his shorts when he saw me and his gorgeous blonde wife exchange a sloppy, wet, tongue-filled kiss.\n\nI started giggling then. Amber giggled with me before turning her head around and grinning back at her husband. \"Welcome home, honey.\"\n\nDavid just grinned and started pulling off his clothing.\n\nOld habits die hard. And even though we hadn't been together for months, and hadn't seen nearly enough of each other in the four years since graduation, the three of us still came together like we'd been screwing as a threesome every day of our lives. No words were needed. All the communication took place with our eyes and hands. We simply *moved* together.\n\nOnce naked, David first went to Amber for a welcoming kiss. They affectionately locked lips, as much in love as ever, before turning their dual attention to me. David kissed me as well before joining Amber in nursing at my tits. But after a few minutes, I pushed him away and gestured him over behind his wife.\n\nAmber got the hint and shuffled down the bed. She took the time to drag my black panties away, tossing them off the bed before ducking her head to begin slurping at me. She paused for a few seconds when David entered her, but once he established a steady rhythm, she went right back to work on me.\n\nI got one good orgasm that way. Only a few people in the world knew just how to eat me, and Amber was one of the best. But I had a craving for cock, and after dumping my first load of honey into Amber's face, I moved around and parked myself on all fours right next to my best friend.\n\nBut Amber was in a playful mood. The instant David started to withdraw from her and switch over to me, she reached back and grabbed his ass, holding him inside her. David arched an eyebrow questioningly, but Amber shook her head and grinned, fucking herself back on her husband's prick. I got it: she was getting fucked and didn't want to give up her cock just yet.\n\nI whimpered pitifully, but Amber just grinned and shook her head. 'Me, first,' was the message in her eyes. And then closing her eyes and thrusting her jaw out, she groaned ecstatically and began fucking her husband harder.\n\nDavid didn't totally neglect me. He reached over and caressed my ass with his right hand. He even dipped his fingers into my honeypot, stirring them around while dragging out my natural lubrication and using it to rub my clit quite pleasurably. But he didn't pull out and switch over to fucking me. I whimpered and turned my head around to him, begging with my eyes. But David just grinned and shook his head. And then he reached out to my hand and tugged it over into Amber's crotch.\n\nDavid WAS a loving and considerate husband, after all. And he knew the score: If I wanted to get fucked, I had to satisfy Amber first.\n\nSo I rolled onto my side and focused on fingering my best friend. David could still get to my crotch with his own hand when he wanted, and I could do a better job on Amber. With David's thick dick pistoning in and out of her tight pussy, and my fingers rubbing at her love button and tweaking her nipples, the gorgeous blonde soon tensed up and moaned, gasping, \"Ohhhh...\" as a pleasant orgasm swept through her.\n\nNow that Amber had been taken care of, I sighed in relief and dropped my hands away. I rolled onto my back and spread my legs in anticipation of getting pounded. But Amber giggled and glanced over at me. \"Not yet. I'm not done yet.\"\n\n\"Awww...\" I whined, but at the gleam in Amber's eyes, I nodded. She wasn't doing it to be mean. We both knew that delaying my gratification would pay off in the long run.\n\nStill, Amber was getting tired, so she rolled onto her back as well. David then reached down and pulled his wife's hips to the edge of the bed, pushing her legs back until she was in a horizontal split. And then he re-entered her to begin thrusting away. This new position also gave me full access to her chest, and after parting the gossamer robe and unsnapping the front-loading bra, it was my turn to feast my lips on the blonde's sensitive teats.\n\n*One more orgasm,* I promised myself. *One more and she'll let him fuck me.* With renewed determination, I sought out all of Amber's hot spots, tweaking nipples, caressing nerve bundles, and making out with my best friend with sloppy, lustful kisses.\n\nAmber got her orgasm. Unfortunately for me, so did David. I *felt* more than heard the blonde's breath tightening as I kissed her. She whimpered as the fires stoked within her core, building and building and building before suddenly exploding with a powerful intensity. Her whole body shook and shuddered as she screamed out, \"AAAAHHHH!!!\"\n\nAnd then a second later, David joined her by growling, \"HHRRRKKKK!\" as he slammed forward a final time and began filling his wife with his creamy load.\n\nDAMMIT!\n\nExpectedly, David deflated inside of Amber's snatch. After panting to catch their breaths, the happy couple slowly disengaged and David moved around to sit beside his wife, reaching down to caress her sweaty brow.\n\nMeanwhile, I whimpered with pent-up need. \"Pleeeease?\" I was even too wound up to slurp out the creampie. I needed cock. And I needed it NOW.\n\nAmber giggled and flashed me a naughty look. The twinkle in her blue eyes was even more annoying. But at least she said, \"Okay. Gimme one more orgasm, and I'll let him fuck you.\"\n\n\"Promise?\" I whined like a petulant teenager.\n\nAmber grinned. \"I promise.\"\n\nThankfully, Amber kept her word. We repositioned her so that her head was hanging off the edge of the bed, her legs spread wide as I ducked between her thighs and began slurping jism out. The taste of David was enough to keep my lust at bay... for now... But at the same time, it made me even more anxious to feel his big dick inside me. At the other end, David stood next to the bed and fed his cock into his wife's mouth. Upside-down, Amber nursed at it, feeling it grow from her ministrations and slowly elongate until it was pushing into her throat.\n\nI'm not sure what turned Amber on more, my cunnilingus, or feeling her husband's cock stretching her mouth. Whatever it was, the moment she finally deep-throated his renewed erection, her eyes popped open and she moaned a muffled, \"Mmph!\" as she came.\n\nThe instant I heard it, as well as felt the sudden tension in her legs, I picked my head up. I scrambled up my best friend's half-naked body, and from inches away, I desperately whined, \"Okay, you got your orgasm. Now PLEASE will you let him fuck me?\"\n\nIt was funny to watch Amber try to giggle with David's cock still in her throat. But he pulled back, and Amber nodded while coughing slightly. Unwilling to wait a second longer, I flipped around and parked myself on all fours right beside her, presenting my ass to David. And Amber herself reached back and fed his rock hard erection into my wet pussy.\n\nI started moaning happily the instant the head penetrated, and David rammed the last few inches in one thrust, causing me to groan, \"Fuck yeahhhh...\"\n\nStill on her back, Amber then slid her head under me and directly beneath my joining with her husband. Her tongue reached up to wrap around my clit while David was rhythmically pumping me. And I was quickly moaning up a storm in mixed pleasure and relief. *FINALLY.*\n\nIn. Out. Stretch. Release. It felt so gooood. But at the same time, it was just physical. I loved David. I would tell him I loved him. But it wasn't such a different love from what I felt for Amber. They were both my friends. And we were intimate. But we weren't romantic. I saw no conflict between what I was doing with them and what I felt for Teddy.\n\nAnd if there was no conflict, then why NOT get these *wonderful* feelings as often as humanly possible? Amber ate me with a skill and experience that was simply amazing. And David, the man who had taken my virginity all those years ago, still knew *exactly* how to push my buttons.\n\nSpeaking of buttons, I had no warning before Amber suddenly reached up and grabbed onto my asscheeks, holding them apart. I was just craning my head around to see what was going on as I felt the first squirt of lube shooting up my rectum. And then before I got turned around, I felt David swiftly exit my cunt, center his cock, and then ram it up my ass.\n\nI shrieked in surprise. And then as I felt him burrowing even deeper into my bowels, I giggled and screamed, \"Oh, I'm going to get you for that!\"\n\nDespite my words, I made no moves to stop either of my lovers. I just threw my hips back against David's invading cock, trying to cram an extra half-inch up my asshole to savor every possible feeling of fullness I could get.\n\nDavid grabbed onto my hips, using them as leverage to really pound his way up my back door. Amber laughed into my crotch, the vibrations adding even more pleasure to my overstimulated pussy. And all at once, I felt my entire body tense up, my sphincter clench, and a nuclear blast of pleasure detonate deep inside me.\n\n\"AAAAUUUUGHHH!\" I screamed as I came.\n\n\"NNNNGHHH!\" David grunted as he began erupting hot lava up my ass.\n\n\"YES!\" Amber giggled, still munching on my clit.\n\nAnd then we collapsed on the bed.\n\nBreathing heavily, I lay flat on my belly, my big tits crushed against the mattress beneath me. I was pinned in place by David, who had tumbled onto my back when I fell. His cock was still lodged in my rectum, slowly softening amidst a pool of his own jism floating around my bowels. And Amber managed to slide herself out of the way before my legs buckled, so she was lying next to us with a goofy grin on her face.\n\n\"Welcome home, honey,\" Amber giggled.\n\n\"Nnnrrrnngh...\" David and I seemed to groan at the same time.\n\nBut we couldn't just lie there and relax. A new sound got our collective attention.\n\n*[DING-DONG!]*\n\n****\n\n*[DING-DONG!]*\n\nThe three of us collectively looked at each other, wondering if one of the others knew what was going on. It sounded like the doorbell to me, and David picked his head up to ask, \"Expecting anyone?\"\n\nAmber frowned and shook her head. \"Uh, no.\"\n\nAt that, David quickly scrambled up, slowly extracting his cock from my asshole and then grabbing a tissue to wipe himself up before jumping into his shorts. Amber tossed him his white undershirt, and messily dressed, David headed out for the front door.\n\nThe doorbell rang once more before David got to it, but then Amber and I heard the sounds of male voices talking. There was a tone of surprise in David's voice, but nothing alarming. Still, Amber glanced over at me and nodded to my clothes.",
        "Since Amber and I had just been lounging around the house together, and since I hadn't packed any spare clothing for this spontaneous trip, I just pulled on the T-shirt I'd been borrowing from David. I also slipped into my panties, although I didn't bother with the revealing shelf-bra.\n\nSimilarly, Amber didn't get back into her seduction lingerie. She went to the closet and pulled on more utilitarian underwear, along with pajama bottoms and a T-shirt. And so clad, the two of us poked our heads outside to see what was going on.\n\nFrom the hallway, we peeked into the living room. And as soon as I saw who had come knocking at the door, I gasped in loud surprise, \"Teddy!\"\n\nBoth David and my boyfriend turned their heads at my gasp. There was no point in hiding anymore, so Amber and I emerged from the hallway and went into the living room. My heart was racing and I had a million questions on my mind. At the top of that list was: How in the hell did he find me?\n\nFor his part, Teddy was dressed casually in a fitted polo shirt, jeans, and brown Sketchers. He took one look at me, bra-less, wearing a man's T-shirt, and without any pants, and he paled. He looked more closely at David's slightly-disheveled appearance and Amber's similar state of undress. And then looking at me, Teddy stood up and mumbled, \"Uh, maybe I came at a bad time.\"\n\nHe looked ready to bolt, and without thinking about it, I hurried across the living room and launched myself at him. Teddy just managed to open his arms in time to meet my hug, but I still nearly knocked him off his feet when I jumped up and wrapped my legs around his waist while clutching his shoulders and neck like my life depended on it. \"Teddy!\"\n\nNeither of us said anything for a moment. I simply reveled in the pure joy of hugging my boyfriend, the man I'd started to fall in love with, after our time apart. It had been little more than 24-hours, but it still felt like an eternity. And I hugged him like I never wanted to let him go. There was no more time for second thoughts or doubts. There was no more time for \"what ifs\" or other paranoid worries. Teddy was here; and since he was here, I was going to enjoy his presence for as long as I could.\n\nIn the meantime, David and Amber looked at each other significantly before inconspicuously backing away. By the time I pulled my head off of Teddy's shoulder, my best friends were out of the room. And looking around myself, I dropped to the floor and then tugged Teddy to sit back down on the couch. \"How in the hell did you find me?\" I finally blurted.\n\nTeddy was panting a little both from the surprise and from holding me up. But he caught his breath and looked at me plainly. \"Well, you always talked about your best friends and roommates from college. You once told me that whenever you needed somewhere to turn, you'd always go to them.\"\n\nI nodded, only partly understanding. \"But *how*? How did you find *them*?\"\n\nMy cute boy shrugged. \"I've got a friend who went to Uni, and he owes me some favors. He talked to someone in Administration, who was able to find out who your college roommate was. Once we got Amber's and David's names, I know someone in the county assessor's office, and he pulled the public records from when your friends bought the house.\"\n\nI was nodding along, impressed by both Teddy's ingenuity in tracking me down as well as his apparent connections in making it all happen within a single day. \"But isn't that... illegal?\"\n\nTeddy blushed again, one of those blushes I like that goes pink all the way down his neck. But he stared at me intently with those blue-gray eyes and stated, \"I had to find you.\"\n\nI nearly swooned into his arms right at that. But Teddy took a deep breath and finished his story. \"Once I had an address, it was just a matter of buying a plane ticket and getting here as fast as I could.\"\n\nImpulsively, I reached forward and hugged him again. It felt so good to be loved and adored and *wanted* so desperately that someone like Teddy would go all these lengths to find me. *He loves me. He really loves me.*\n\nBut... while I'd been momentarily distracted, I hadn't forgotten what sent me here in the first place. The warmth went out of my hug and I stiffened up. Teddy sensed the change in me and pulled back at about the same time I did. And then he looked at me carefully while I collected myself and then stated, \"Tell me about Stella.\"\n\nHe sighed and blinked a couple of times. Then he looked at me, pleading with his eyes for me to understand. And he said, \"Nothing has changed with me and Stella. We're the same friends we were a week ago. And there's nothing more between us than that. Stella and I are friends... very *close* friends. But I'm *your* boyfriend.\"\n\nI blinked. \"Then the janitor's closet...?\"\n\nTeddy shook his head. \"We did. It was just a quickie. We were planning to go to lunch with you, but when we stopped by the lab you were all engrossed in your experiment. I figured you wouldn't want to be disturbed, so we were just going to head out and grab some fast food. But as we were passing the closet, Stella got this gleam in her eye and dragged me inside. It was fun. I won't deny that. But it was kinda uncomfortable. There's not a lot of room and you can't even hold onto the shelves because they'll make this banging noise that you just KNOW will be heard out in the hallway.\"\n\n\"That's it?\"\n\nHe shrugged. \"That's it.\"\n\n\"You told her you loved her,\" I said with a much harder edge in my voice. \"Explain *that*.\"\n\nTeddy took a deep breath. He put his hands on my knees, rubbing them softly as he looked down and collected himself. Clearly, he realized that this was a critical issue, and he was trying to very carefully choose his words. \"We love each other.\"\n\nMy eyes were hard slits. Not a good choice of words.\n\nTeddy saw me blanch and he quickly added, \"But not in that way! Stella's like my sister!\" He winced. \"Only... not. I mean, that would be gross. She doesn't look anything LIKE my sister. I mean, that would be WEIRD.\"\n\nTeddy was fumbling and I was giving him the evil eye, making him fumble even more. He winced and babbled incoherently for a couple of seconds before finally saying, \"We're intimate. We're close. I think I've shared more with Stella and I feel closer to Stella than any girlfriend I've ever had before you. BUT... and this is *important*... Stella and I aren't romantic in the slightest!\"\n\n*Yeah, right.* I frowned and folded my arms over my chest, clearly not believing him.\n\n\"You've GOT to believe me,\" Teddy pleaded. \"When I look at you, I see my future. I think about what it would be like to be married to you, cuddling in a hammock on a tropical beach sipping mai tais and watching the waves cresting. I undress you with my eyes and think about seducing you with wine and music, sensuously exploring every inch of your body with a feather and spending all night getting twisted up in the sheets together. I think of holding your face in my hands, staring into the depths of your deep brown eyes. And I think about how out-of-my-mind in love with you I am.\"\n\nI blinked and looked at him skeptically. \"So? Can't you see those things with her?\"\n\nTeddy shrugged and shook his head. \"I don't. Stella's... different. I lust for her, sure. She's got a hot bod and she loves sex. Watching her and you go at it is just... wow... I mean... *WOW*! But that's it. There's no romance, no tenderness. Every time we're alone together only two things happen: we screw, and we joke around. The last time I visited her apartment for one of our cover dates, we didn't even go out. We just went in her room and fucked like rabbits for an hour. And then we spent the rest of the time lying in bed drinking beer and having burping contests. We talked about everything... stupid shit... like I would with one of my boys, you know? Only she's NOT one of my boys, so I can tell her things I wouldn't want the rest of my friends to know. They're guys, but they're insufferable gossips, too.\"\n\nI frowned. \"How come you don't tell me those things, then?\"\n\n\"I do!\" he protested. \"What's the most embarrassing moment of my life?\"\n\nI grinned and thought back to a month ago when Stella, Teddy, and I all swapped embarrassing stories. \"Graduation. Your friends dared you all to go without pants or underwear underneath your graduation gowns, and they didn't tell you they'd cut a big hole out of the butt of your gown.\"\n\n\"See?\"\n\nI frowned. \"So there's nothing you've told Stella that you can't tell me?\"\n\n\"Of course not!\" Teddy blurted, but then he immediately blushed and looked away.\n\nMy eyes popped open. He WAS hiding something. \"What?\" I barked accusingly.\n\n\"E-Beth, it's not what you think...\"\n\n\"WHAT?\" I roared a little louder.\n\n\"I... uh...\" Teddy's blush was bright pink down to his *navel* now... He closed his eyes and took a deep breath. And then after another few seconds to work up his nerve, he looked at me and said, \"I told her that I wanted to marry you.\"\n\nMy eyes popped WIDE open. \"Teddy!\"\n\nHe whimpered and looked crushed that I didn't seem overly happy. \"I'm serious.\"\n\n\"We've been dating for... what, three *months*?\"\n\nHe shrugged. \"I know it sounds like a childish fantasy. But when you know... you *know*... You know?\"\n\nI blinked rapidly. \"How can you even say that to me when... when you tell me that you and Stella love each other?\"\n\n\"I TOLD you: we don't love each other like THAT.\" Teddy exhaled slowly, shaking his head. \"It's different... okay? Stella and I are very close now. We've been fucking for months. We've been spending a lot of time together. She's very insecure, always trying to make sure she's not fucking up my relationship with you, even though she wants to spend more and more time with us. She always complains about getting in our way, and we've both tried to reassure her that we enjoy her presence, and not just for the sex. I appreciate her. I like her. But since we're intimate, and we're so close, the word 'like' just doesn't seem like enough, does it?\"\n\nI just frowned at him.\n\n\"Look, a couple of weeks back, Stella and I talked about how to term our relationship. We both agreed that we more than 'liked' each other. She finally said that she loved me, even though she wasn't 'in love' with me. I agreed, so every now and again, yeah, we tell each other we love them. I love Stella, in her own way.\" Teddy took a deep breath and then gave me a curious look. \"I mean, don't *you*?\"\n\nI paused and thought about my friend. I thought about how she was always there for me, to help keep me from going off the deep end whenever I would get emotional, whether it be about a breakup or dating Grant or whatever. I thought about making love with her, cuddling with her, and sharing Teddy with her. I pictured her pretty face, all blonde hair and green eyes dancing playfully. Teddy was right: 'like' wasn't enough. In my own way, I loved Stella, too.\n\nAnd then I realized, I loved Stella like I loved Amber. And I thought Stella felt the same way about me. So though I didn't verbally answer Teddy, I bent my head and nodded.\n\nTeddy squeezed my knee. He was looking around the room, his lips pressed together in a hard line, a concerned expression etched across his face. Taking a deep breath, he squeezed my knee again and looked up, staring right into my eyes. \"E-Beth... I have to ask... Did you have sex with David and Amber?\"\n\nI paled. The answer was 'yes'. Technically, I had cheated on my boyfriend, even though I knew in my heart that sleeping with my old college friends didn't change the way I felt about Teddy. But there was no denying that sex acts had taken place. Indeed, I even had David's cum leaking out of my asshole, staining my panties at this very moment.\n\nI took a deep breath, and looking my boyfriend in his eyes, I nodded.\n\nHe took a deep breath of his own, processing that. But instead of getting mad, he looked contemplative about it. And after a few more seconds of thought, he looked at me again and asked, \"How do you feel about them?\"\n\nI blinked a few times and then replied, \"I've told you about them before. They've been my best friends forever. I've known them since High School, and David was my very first boyfriend.\"\n\nTeddy nodded. \"Do you love them?\"\n\n\"Yes,\" I answered without hesitation.\n\nTeddy's eyebrows went up. \"But do you interfere in their relationship?\"\n\nI frowned and furrowed my eyebrows. \"No!\" I stated emphatically.\n\nTeddy then shrugged. \"Then how are we... and Stella... any different?\"\n\nI was blinking again in surprise. Teddy had bypassed the cheating issue entirely and gone straight back to reinforcing his stance on Stella in our relationship. My jaw hung slightly open as I asked, \"Aren't you upset with me? For sleeping with someone else?\"\n\nTeddy blinked, glancing at the hallway where David and Amber had theoretically disappeared. I wouldn't have put it past my friends to be eavesdropping around the corner, and it looked like Teddy wouldn't have, either. He just shrugged and replied, \"You told me, months ago, that you'd been sleeping with them ever since your freshman year of college. You even told me you'd slept with them at their wedding. And yet you still came to love me. I'm not worried about them. They had a prior claim on you long before I ever showed up.\"\n\nI covered my open mouth while feeling a mountain load of relief slide off my shoulders. \"That's very understanding of you.\"\n\nTeddy nodded, and then shot me a little smirk. \"Just because I'm three years younger than you doesn't mean I can't be mature about the situation.\"\n\nI smiled as well, and with an intense gaze, Teddy slid his hands up and grasped mine. Staring right into my eyes, he said quietly, \"Come home, Elizabeth. Please... I need you.\"\n\nI didn't answer except to close my eyes and tilt my head to the side. And finally, for the first time since he'd arrived, Teddy and I kissed.\n\n****\n\nTeddy and I booked flights to return home that evening. At the airport curbside, Teddy watched as both David and Amber kissed me on the lips goodbye. David asked that I not wait another five months between visits. At the very least, Amber was due to pop around the end of August/early September and they'd love for me to come see the baby.\n\n\"Cum again soon,\" Amber teased.\n\nHand-in-hand, Teddy and I were then on our way. And we didn't let go of each other the rest of the way home.\n\n****\n\nStella met us at the airport. I still felt bad for walking out on both her and Teddy, running away without giving them any way of contacting me or making sure that I was okay. Even though *I* was supposedly the older one, I'd had the most childish reaction to the situation.\n\nThe minute I saw her, I rushed over to hug my friend. It wasn't until after our hug that I remembered exactly *why* I'd run away in the first place, and I stepped back and rather nervously gawked at Teddy and Stella, waiting to see how they would greet each other.\n\nBoth of them noticed my paranoid gaze, and it made the both of them stiffen up. In the end, they exchanged an awkwardly chaste hug and then separated, Teddy quickly moving to my side and wrapping an arm around me as if to reassure me that he was indeed with me and not with her.\n\nThe two of them didn't look guilty. They weren't defensive, and it didn't look at all like they were trying to hide something from me. I remembered the time my little brother Eric was 8-years-old, watching football, and tried to copy some of their moves. He'd mimed tackling the lamp, and wound up actually knocking the thing over and shattering the glass bowl of the light fixture. And when Mom came to ask what had happened, he had such a look of mixed terror, guilt, and deception on his face that it was laughable when he tried to claim he hadn't done it. Neither Teddy nor Stella looked anything like that.\n\nIf anything, they just looked concerned for me. And I decided right then and there that I believed in my friends. They *weren't* trying to cheat on me. Stella was *not* trying to steal Teddy from me. And Teddy was just as in love with me as ever.\n\nMaybe I could have been wrong. But I didn't care. I loved both of these people enough to give them the benefit of doubt. And I wouldn't let my own paranoias control me any longer.\n\nTaking a deep breath, I looked right at my best friend and smiled. \"Thanks for picking us up.\"\n\nStill uncertain that everything would be alright between us, Stella only gave me a hesitant smile in return. But she nodded and replied, \"Of course.\" And then she gestured back with her head, to where her car was parallel parked on the curb.\n\nI patted Teddy's hand, which was resting on my waist, and then I moved forward to get in. \"You guys want to pick up some dinner on the way home?\"\n\nWe'd reached the car, and Teddy opened the rear passenger door. Stella was already by the driver's side of her green Corolla, and she looked over the roof back at us. Specifically, she looked at Teddy, and then she said, \"No, that's okay. Why don't I just get you two home?\"\n\n\"No, really,\" I insisted. \"It'll be my treat.\"\n\nStella looked wistfully at the two of us, but at the last she shook her head. \"I'd like to. But right now, I think it's important that you and Teddy have tonight alone, okay?\"\n\n\"Stella, you don't have to.\"\n\n\"Yes,\" she said firmly, staring at me with a haunted look in her eyes. \"I do.\"\n\nI looked at Teddy, who just shrugged.\n\nStella then chirped, \"We'll meet up tomorrow, okay?\" Again, her smile was a little hesitant.\n\nI looked back at my boyfriend, and then my best friend, and my momentary good mood started to fade. The three of us, who had once been so completely comfortable -- intimate, even -- with each other, were now standing around awkwardly as if we didn't know how to just *be* with each other anymore. By jumping to the wrong conclusion and running away from the problem instead of giving my friends the chance to explain themselves, I'd ruined a perfect situation.\n\nI stepped up next to the car, leaning forward so that my forearms were on top of the hood. And in a sincere voice, I stated, \"Stella, I made a mistake. I let my own jealousies get the best of me, and I didn't trust the two of you. But that's just it: a mistake. And I want us all to go back to the way things were. Let's just forget it all, Let's go out to dinner and chat and just be 'us', okay?\"\n\nBut Stella looked at Teddy, and I swear I could see her heart cracking. She looked at him with a longing, and for a second I worried that I was still misreading my friend. While she had always been honest with me, hadn't hidden anything in what she was doing with Teddy, Stella HAD developed some sort of feelings for him. After all, they \"loved\" each other, didn't they? And as she brought her gaze back to me, she gave me a look of both apology and resignation. \"No, I can't anymore.\"\n\nThere was an underlying meaning in her words. Not only was she saying she couldn't go out to dinner with us tonight, but she also said she couldn't be with 'us' anymore. She couldn't be our third lover. There was no going back.\n\nWith a sad smile, Stella looked at me and said, \"It was fun. It was wonderful. And after all the frustrations with Chuck, being with the two of you made me so incredibly happy. But we all knew it couldn't last forever. And what's happened between us just proves that our time is up.\"\n\n\"It doesn't have to be.\"\n\nStella shook her head. \"Yes, it does. Teddy and I went as far in our relationship as we could go. I swore I'd never interfere in what you have with him, and we've reached the point where I've started to interfere. That means it's time for me to back off.\" \n\nAt the finality in her voice, my shoulders slumped. Teddy looked sad as well, but accepting. And he pulled in with his arm around my waist, tugging me tighter as he hugged me firmly. He'd made his choice. And he was choosing me. I should have been happy about it.",
        "But all I could think of was Stella. She'd been my best friend for years, and had even become my lover. But now it felt like we were breaking up. And even though I wanted to believe that we all cared enough about each other to get through anything, I sincerely worried if our friendship would ever recover.\n\n****\n\n*-- JUNE 2007 --*\n\nIt was nearing 6pm when Teddy stopped by my office to pick me up. It was just an ordinary weeknight, but my boyfriend and I had made plans to go to Primavera's for dinner and then back to my place for sex. \n\nOf course, I had completely lost track of the time. Radinsky was an absolute moron and had refused to even consider the possibility that triglycerides would work just fine as a bonding agent for a new product. They may have been cheap and common, but they worked just fine. But Radinsky claimed that such a solution wouldn't be \"elegant\".\n\nI muttered under my breath how annoyed I was with Alfred for sticking me on this project and didn't even notice someone had come into my office until I felt Teddy's hands on my neck. I stiffened in momentary surprise, but he was already stroking and soothing my muscles, causing me to let my head dip down as the pleasant sensations worked their way up my spine.\n\n\"Mmm... That feels great...\" I moaned with my eyes closed.\n\n\"I should do it more often then,\" Teddy chuckled.\n\n\"I am the luckiest girl on Earth,\" I replied with a smile, sighing happily as Teddy continued his neck massage.\n\nJust then, I saw a figure stand up and exit the cubicle just outside my office. Stella's blonde hair swished as she turned around and caught sight of us through my open door. She gave us a little smile before turning and walking away quickly, perhaps heading to the copy machine or the coffee break room or whatever.\n\nAt the same time, I felt Teddy's fingers tighten ever so noticeably against my neck. The sudden pressure was almost painful, and I tensed my shoulder muscles in response.\n\nIt was only for a moment. Teddy quickly relaxed and went back to stroking my neck and shoulders, resuming his massage. But it was enough.\n\nReaching a hand back, I covered one of Teddy's in a gesture for him to stop. He did, and I tilted my head back so I could look at my boyfriend. And in a soft voice, I asked, \"You miss her, don't you?\"\n\nTeddy pursed his lips, momentarily thinking of some dismissive comment. But after another beat, he just shrugged and replied, \"Of course.\" His eyebrows popped and then he quickly added, \"As a friend.\"\n\nI shrugged at his qualification. And then looking back to the open doorway, I thought of all the things we used to do together. Even though I'd had my boyfriend all to myself, the past month hadn't been easy for me. Not only did I miss the closeness I'd once shared with my best friend, but I really missed having a girl in bed with us, too. \"I'll bet you miss that tight pussy,\" I commented quietly.\n\nTeddy sighed and patted my shoulders. \"You're all the woman I need. You know that.\"\n\nI exhaled, \"I know.\" And I probably was. I was as horny as a teenaged boy, and Teddy never complained about getting enough. And whenever I saw Teddy and Stella talking together, it really seemed that they missed the closeness of their friendship, not the sex.\n\n*But *I* miss her tight pussy, too.*\n\n\"You miss her too, don't you?\" Teddy's voice came out of nowhere, echoing my thoughts.\n\nI exhaled slowly and then shrugged. \"I see her all the time. We still go out to Monahan's most Fridays.\"\n\n\"But it's not the same.\" Teddy sighed. \"You two aren't the friends you used to be. Everyone can tell. You know most people think that *I* came between you two? Audrey cornered me yesterday and practically accused me of trying to seduce Stella; and that THAT'S why everything's been so awkward between the three of us.\"\n\n\"What?\" I sat up straight and turned around in my seat.\n\nTeddy nodded, and then he looked out the open door with some longing in his eyes. I did too. I knew my boyfriend loved me, and only me, at least romantically. But there was still a big hole in his heart where Stella used to be. And to be honest, there was a hole in my heart, too. Even though Stella stepping back from me and Teddy was supposed to help my relationship with my boyfriend grow, it felt like we'd just been treading water ever since, making no progress forward.\n\nThis was stupid. I missed Stella. Teddy missed Stella. And she missed us. It was like she was the glue that held us together, and without her, even love wasn't enough for Teddy and me. The three of us HAD to figure out how to work this out.\n\nIf only I knew how.\n\nTeddy took a deep breath first, rubbing my back before standing up straight and then reaching a hand down to me. \"Come on, sweetie. Let's get to dinner. We'll gorge ourselves on heavenly tapas, drink some nice wine, and then cuddle on your couch watching reruns. Okay?\"\n\nI put my hand into Teddy's and let him pull me up. And then reaching up to cup both of his cheeks, I kissed him softly, with all the tenderness and affection I felt for him inside. After years of dating jerks, I had finally found a quality man I could depend on. I had finally found someone who showed me loyalty and devotion equal to my own. And yet, I was thinking of doing something that could potentially lead me to lose him.\n\nBut not tonight. Tonight, he was all mine. So I pulled away from our kiss, looked my boyfriend in his clear blue-gray eyes, and answered, \"Okay. Let's go.\"\n\n****\n\nI stopped by Stella's cube and knocked against the plastic of a side wall. \"C'mon, honey. Time to go.\"\n\nThe pretty blonde, less bubbly than usual for the past month, looked up at me and sighed. \"Oh, uh, y'know I think I'm just going to skip this week. I'm absolutely buried and I wanna get this done before the weekend.\"\n\n\"This isn't a request,\" I said firmly with raised eyebrows. \"It's 5pm on a Friday, and you're coming with us.\"\n\nStella smiled wanly but shook her head. \"No, really. I'm fine.\"\n\nI grinned as I simply stepped into her cubicle, grabbed the back of her desk chair, and wheeled her away from her keyboard. \"We're going. And that's it. You very much look like you need a Vodka Cranberry, and you're gonna get one.\"\n\nStella exhaled slowly, then looked up at me with a defeated expression. But at the last, she smiled and nodded. \"Fine.\" And she reached out to grab her purse.\n\nA few minutes later, the two of us strolled into Monahan's. Audrey and Paula were already waiting for us at our usual table. And as soon as we sat down, our usual waiter came by to grab our orders. \"The usual?\" he asked me and Stella.\n\n\"Sure.\" I nodded and looked to Stella, who nodded as well.\n\nI sighed and looked at Audrey. \"Are we THAT predictable?\" I jerked a thumb at the departing waiter. \"He's only been here what, six weeks? And he's already figured out our 'usual'?\"\n\nAudrey shrugged. \"We're getting old and boring.\"\n\n\"Speak for yourself,\" Paula said huffily, but with a playful smile on her face. \"Some of us are still having new and fun adventures.\"\n\n\"Oh, really?\" Audrey chuckled. \"And just what new adventure did you have this week?\"\n\n\"Nuh-uh,\" I interrupted, eyeing Paula carefully. \"I know that look. What new *guy* did you meet this week?\"\n\nPaula's smug grin immediately vanished and she carefully studied the bottom of her glass. \"Oh, nobody.\"\n\nStella was on top of things. \"*Paula*...\" she drawled. \"Don't hold out on us.\"\n\nPaula's eyes darted to Stella, and then to me, and then she frowned and blushed. \"I... uh... oh... I don't know if I should...\"\n\n\"*Paula!*\" Audrey whined. \"No secrets, remember? Spill it.\"\n\nPaula looked straight at me. She sighed and then gave me an apologetic look before gathering herself and saying, \"Grant asked me out.\"\n\n\"Grant?\" Stella sputtered. \"As in... *Grant?*\"\n\nPaula looked ashamed. \"I'm meeting him at Torreta's at eight. I'm sorry, I know I probably should have told you first, but this is the first time I've seen you and I figured that things have been going so well with you and Teddy that you wouldn't mi-\"\n\n\"It's fine,\" I cut her off, holding a hand up. \"It's fine, really.\"\n\n\"You sure?\" Paula bit her lower lip, looking nervous. \"Because I don't want things to be all weird between us. Not like you and...\" her voice died out as she glanced at Stella. Then Paula's eyes tracked back to me and she finished lamely, \"Uh, I mean, if you're not okay with this, then I can still call-\"\n\n\"It's fine,\" I cut her off again. \"Nothing ever happened. Grant wasn't right for me. I found Teddy. Everything's cool.\" I took a deep breath. \"Grant's a charming guy. Just... be careful with him, okay?\"\n\nPaula nodded. \"I know. I always am.\"\n\n\"For God's sake,\" Audrey sighed. \"Don't sleep with him on the first date.\"\n\n\"I only did that once!\" Paula complained. Then she rolled her eyes and flopped against the booth backrest huffily. That just got the other three of us to giggle in amusement; and after a couple of seconds, Paula joined in as well.\n\n\"So anyways,\" Paula continued. \"I'll have to leave soon to get ready.\"\n\nEveryone nodded, and then Stella added quietly. \"Me, too.\"\n\nAudrey was the first to raise an eyebrow. \"What? Do *you* have a hot date, too?\"\n\nStella pinched her lips, looking at the table for a moment before glancing over at me and nodding. \"Yeah. I do.\" That heartbroken look of longing in Stella's eyes was back.\n\n\"Well spill it!\" Audrey insisted. \"Who's the guy?\"\n\n\"Yeah!\" Paula chimed in.\n\nI just looked at Stella curiously.\n\nStella glanced at the girls and shrugged. \"Guy I met at the gym, actually. He's nice. Little overmuscled and stocky for my taste, but he seems really sweet. He's been flirting with me for months now, and I guess I decided to finally give him a chance.\"\n\n\"'Bout time, girlfriend,\" Paula reached over and slapped Stella's hand. \"You and Chuck broke up what, four months ago?\"\n\n\"Yeah...\" Stella sighed, once again staring right at me with a sad look in her eyes. \"I guess it's time that I moved on.\"\n\n****\n\nAfter the one round, with two of our number leaving early to prep for dates, we decided to call it a night. We collectively wished Paula and Stella good luck on their dates. But after Paula and Audrey went in one direction, I followed Stella to her car. \"You really have a date tonight?\" I asked curiously.\n\nStella furrowed her eyebrows and looked at me like I was crazy. \"Yeah,\" she chuckled. \"You think I just made it all up?\"\n\n\"No, no, of course not. But...\" I trailed off, not sure where I was going with that.\n\n\"But what?\"\n\nMy shoulders slumped. As much as Teddy and I loved each other, our relationship had slowly been fraying over the past month. We still clearly cared about each other, but we both had missed the spark and presence that Stella brought to our relationship. Her absence was just a downer from which we hadn't been able to recover. And just last night I'd decided that I wanted to find a way to get her back.\n\nSo I took a deep breath, gave my best friend an honest look, and I said, \"We miss you, Stella. Both me and Teddy. We miss hanging out with you. We miss having you closely in our lives. Frankly, we want you back.\"\n\nStella stared at me, the haunted look back in her eyes. She shook her head in the negative and replied wearily, \"I told you. I would never intentionally do anything to interfere in your relationship.\"\n\n\"I know! I trust you. I trust that you wouldn't try to steal him from me. And that's why we want this. We want to go back to the way things were.\"\n\nStella looked at me sadly. \"The way things were? I was hurt, and lonely, and vulnerable. I'd broken up with my long-term boyfriend and I needed some affection and love. I got that with you guys. It was great while it lasted. But now?\" Stella shrugged. \"I'd never be anything more than a third wheel to you guys. You're the couple in love. I'm just the extra pussy. Are you really asking me to go back to that?\"\n\n\"No, of course not!\" I blinked in surprise. \"That's not the way it would be!\" I said defensively.\n\n\"And how would it be?\"\n\n\"I don't know! I just... we miss you Stella. We BOTH miss you.\"\n\n\"And I miss you both, too. But that's a dead-end relationship for me.\" The pretty blonde sighed. And then she picked her head up and fixed me with a piercing green gaze. \"You often talked about how close you were to your college friends, David and Amber. You were sleeping with the both of them, weren't you?\"\n\nI blinked rapidly. \"Uh, yeah.\"\n\n\"Do they love you?\"\n\n\"Yes.\"\n\n\"But do you have a future with them? Did being with them fulfill you? Last you told me, they got married and have a baby on the way. They're living their lives and moving on. But could they take you with them?\"\n\nI bit my lip and my shoulders sagged even more. \"No,\" I admitted.\n\n\"Of course not. You had to move on, to find your own relationship. And you've done that. You've got Teddy. Now I don't know if the two of you will last forever. You're both young and it's really only been five months that you've *actually* been together. But there's promise there. There's hope there. You have a potential future together.\"\n\nI just looked down. I had no answer to that.\n\nStella sighed and then collected herself once again. \"I've got to do the same. I've got to find my own way. Maybe Nicolas, this guy from the gym, is the one for me. Maybe not. Either way, I owe it to myself to find out.\"\n\nI exhaled slowly. And in resignation, I nodded. \"I understand.\"\n\nStella gave me a wistful smile, and then she stepped forward and hugged me. \"I love you, E-Beth. I love Teddy, too. I learned so much about myself while I was with you. But I need to move on with my own life.\"\n\nI nodded and hugged her back, softly patting her shoulder.\n\nEventually, we broke apart. I squeezed her one more time and then held Stella at arm's length. \"Good luck tonight. I hope it works out for you.\"\n\nStella shrugged, but gave me a soft smile. \"Me, too.\"\n\n\"And however this works out, don't be a stranger with me and Teddy, okay? We're all best friends. We really should act like it a bit more. I have no fear of you and him, so stop trying to be such a 'good girl' by keeping your distance, okay?\"\n\nStella blushed and bent her head. But she nodded and grinned. \"Okay.\"\n\nI turned to leave, but just before I did, Stella tugged on my hand, pulling me to her. And grabbing my cheeks, she leaned forward and softly kissed me.\n\nIt was beautiful.\n\nAnd it was over just as suddenly as it had started. There was a little smile on Stella's face. And with the cute giggle I hadn't heard out of her in a full month, she turned back to her car and unlocked it.\n\nMaybe there was some hope yet.\n\n****\n\n*-- JULY 2007 --*\n\n\"So I hear congratulations are in order,\" Audrey beamed over at Teddy. \"Got a promotion?\"\n\nMy boyfriend squeezed my hand on top of the table and blushed. I squeezed back, and Stella even reached across and patted Teddy's hand from the other side of the table, looking almost as proud of him as I was. The girls, my boyfriend, and I were at Monahan's, just enjoying a few drinks on a Friday night before heading our separate ways for the weekend. Well, most of us; Paula had called in sick and wasn't at work today.\n\n\"It's no big deal,\" Teddy replied modestly.\n\nI rolled my eyes. \"He's a junior researcher,\" I pointed out. \"They more than doubled his salary, it's full-time, and he's getting a cubicle out in the farm with the rest of us. It IS a big deal.\"\n\nAudrey fixed me with a raised eyebrow. \"You pull any strings for this?\"\n\nI held my hands up immediately. \"No-no. It was all him.\"\n\nStella nodded. \"I was there when this coterie of researchers all went to Alfred's office. Apparently, Teddy had been giving them advice whenever they came to the stockroom. So after realizing he had such a good chemistry background, they banded together and ordered Alfred to hire him. Even Radinsky vouched for him.\"\n\nTeddy blushed again, and I was positively fawning over my man by now.\n\n\"So you got a promotion. Well you know what this means,\" Audrey drawled.\n\n\"What?\" Teddy took the bait.\n\nAudrey grinned. \"First round is on *you*.\"\n\nWe all got a laugh out of that. But then Audrey switched gears to rather unsubtly pry into Stella's dating life, asking about this Nicolas guy from the gym she'd been seeing for the past month-and-a-half. And just when Stella was about to try and deflect Audrey's more probing questions, a blonde hurricane stormed into the bar.\n\n\"Fucking piece of shit ASSHOLE!\"\n\nWe all turned to look, and Stella was the first to exclaim, \"Paula?\"\n\nThe buxom bottle-blonde stomped over to our table, a look of pure rage etched across her face. She promptly went over to the table next to us, next to me, really. And turning straight to me, she practically snarled, \"What did Grant tell you about his ex-fianc\u00e9e and all that?\"\n\n\"Wh- what? Grant?\" I blinked, still caught off-guard.\n\n\"Yes, Grant! Who else?\" Paula barked shrilly. \"Our first date, he was so smooth and charming and chivalrous. Oh, he's *really* good that one. I might've slept with him on that first date if it wasn't for Audrey's nagging voice in the back of my head scolding me for even thinking about it. But then our second date, he was telling me this sweetly romantic story about how he met Maggie in a bar at Mardi Gras. How she gave him a fake name, of course, but how things had progressed and developed and turned into something pure. Now I know it's not supposed to be a good thing whenever a guy talks about an ex, but he continued on and told me about how they were engaged and all ready to get married. He started choking up a bit and he looked like such a wounded animal that I couldn't help but feel sorry for the guy. Can you imagine me being maternal and comforting? *Me?* I couldn't, but there I was, wanting desperately to comfort him. He told me about how he came home one day to find his fianc\u00e9e banging his *brother*. And he talked about how he'd had to just pick up and move away to try and recover the pieces of his heart.\"\n\nI was nodding along. It was a sweet, if sad, story. That had been the night that I nearly slept with him, only to decide at the very last moment that I wasn't ready for intimacy just yet. Grant had promptly disappeared on me for the next week or so, before I bumped into him again at the Holiday Party and belatedly found out he'd called off our budding relationship.\n\n\"It was all bullshit!\" Paula screeched. \"He just said that to get me to sleep with him!\"\n\n\"Wait, WHAT?\" My eyes flew WIDE open.\n\n\"Oh, he met Maggie at Mardi Gras. And they did get engaged. But what he *didn't* tell me was that HE'S A LYING, CHEATING BASTARD!\" Paula screamed that last part loud enough for the entire bar to hear.\n\n\"Hey, hey,\" Audrey was quickly on her feet, hovering over Paula and trying to get our friend to calm down. \"What happened?\"\n\nPaula buried her face in her hands. \"Grant got this impulsive idea to run away for the weekend. You know, a spontaneous stay-cation, just the two of us here in the city. We'd go out to nice restaurants and get spa treatments and maybe see a show. It sounded so exciting and wonderful so I called in sick and we left. We got this hotel room downtown and promptly started screwing like bunnies. But about an hour ago, Grant got this call on his cell phone. His eyes went wide and he tried to turn away from me as he chatted with whoever, mumbling angrily about how he'd call them back later and being all secretive and stuff. Now I've been around guys that were cheating on me, and I know those kinds of looks and the way they try to hide things. I suspected that it was some other girl that Grant was banging, and he realized I was giving him some cold looks. So he kind of retreated into the bathroom to compose himself or something. But he left his cell phone in the room, so I picked it up and called back the last received number.\"",
        "By now, Teddy, Stella, Audrey, and I were at rapt attention, leaning forward in anticipation of what was coming next.\n\nPaula just shook her head in agony. \"It WAS a girl on the other end. Her name is Melissa, and get this, she's *Maggie's* little sister. Maggie: as in Grant's *ex- fianc\u00e9e*. Grant didn't catch Maggie screwing his brother. *Maggie* caught GRANT screwing her little sister! And Melissa fucking got pregnant! THAT'S why Grant ran away! Melissa just had the baby a few weeks ago. And she had a DNA test run to confirm that the baby is GRANT'S! She wants child support. *That's* why he was freaking out. Because he's a LYING, CHEATING, *BASTARD*!!!\"\n\nNobody stopped Paula from screaming that time. Audrey just sat down next to her, wrapping her arms around Paula in a warm hug. The rest of us just stared in stunned silence.\n\nThrough her sobs, Paula finally picked her head up and stared at me with red-rimmed eyes. \"I should have known when he was such a callous jerk to you, E-Beth. You should be so glad you didn't end up sleeping with him. I made such a mistake. And right now, I feel so... dirty... knowing I let that sonovabitch into me.\" She put her face back in her hands, and went on bawling.\n\nTeddy patted my arm, and only then did I realize I was squeezing his hand so tightly I was surprised I hadn't deformed his fingers. I relaxed my grip, and then looking up into my loving man's clear blue-gray eyes, I sighed happily. Yeah, I was really glad I'd found Teddy instead.\n\n****\n\n*-- AUGUST 2007 --*\n\n\"Ohmigod, ohmigod, ohmigod,\" Teddy babbled as he literally *ran* into my office. He circled around my desk and rather spastically shooed me away from the keyboard. So bewildered, I rolled my chair back to give my boyfriend space.\n\nHe promptly went down on one knee (facing the keyboard, not me), and started toggling over and rapid-clicking the mouse. Buried in my projects folder, he called up my old project, the one with the trifluoperazine problem. And then he started tapping out a sequence of commands.\n\n\"What are you doing?\" I asked curiously.\n\n\"Wait, wait,\" he stammered, his eyes wide open and glued to the monitor.\n\n\"That's a dead project. Believe me, I tried everything.\"\n\n\"WAIT,\" Teddy said firmly, and then started giggling. That's right: my manly boyfriend was *giggling*.\n\n\"What are you *doing*?\" I huffed.\n\n\"Jeez, take a *hint* woman!\" Teddy turned his head to me, a twinkle in his eyes to match the buoyancy of his grin. And then he went back to typing.\n\nI took a deep breath and started analyzing what Teddy was doing. He was using our computer modeling software to call up a new chemical and add it to my compound. \"That's an aliphatic compound,\" I pointed out. \"That'll make the extrapyramidal side-effects worse, not better.\"\n\n\"Not this one. It's a variant on levomepromazine. I was working with Jenkins in the lab when I came across it. It jogged my memory, and I immediately thought about this old project. And I THINK it just might work!\" Teddy continued tapping out commands, changing parameters. And a few seconds later, he finished up and hit the buttons to spit out a diagnostic feedback.\n\n\"Shit,\" Teddy groaned. \"The sedative effects are off the charts! This'll put the patient to sleep! Dammit!\" Teddy spanked the desk, making a loud slapping noise. And then he put his forehead down on the tabletop.\n\nHe looked sincerely disappointed, but I reached over and patted his shoulder. \"It was a really good idea. And hey, the computer isn't always right. Believe me. I KNOW. This might still work in the labs.\"\n\nTeddy scowled. \"The sedative numbers won't be THAT far off.\" And sighing, he rocked back on his heels and put a hand to his forehead. \"I THOUGHT I had it.\"\n\nHuffing, Teddy put his head back down and looked dejected. But my eyes were glued to the monitor. *It couldn't work, could it?* Silently, I rolled forward in my chair, reached out to the keyboard tray, and swung it over to myself. And almost mindlessly, I began typing out a series of commands.\n\n\"What are you doing? It doesn't work.\" Teddy sighed. \"It'll never work.\"\n\n\"Typical Capricorn,\" I commented with a smirk. \"Pessimistic and fatalistic when things aren't going your way.\"\n\nTeddy chuckled at that, then stood back up and leaned over the desk. He moved to the side so that I could roll into my normal position and type even faster. \"Wait... what are you...? You can't do that!\"\n\n\"Why not?\" I hummed, a grin spreading across my face.\n\n\"It's not... that's just a common element... I mean, that solution just isn't... isn't...\"\n\n\"Elegant?\" I queried.\n\nTeddy grunted.\n\n\"Yeah, I've heard that a lot lately. But...\" I finished out with three final keystrokes, and the diagnostic began scrolling across the screen. \"Voil\u00e0!\"\n\nTeddy's jaw dropped. \"But... but...\"\n\n\"You said the sedative was the problem. I fixed it.\"\n\n\"By slapping a piece of duct tape over it!\"\n\nI shrugged. \"The screw socket for a leg on my foyer table wore down, making the whole thing wiggle. I slapped a piece of duct tape over it to keep the screw in place. Been like that for years since before I knew you. And I'll bet you've never noticed it.\" \n\nTeddy blinked rapidly. Staring at the screen. And then after another few seconds, he turned and stared at me with a big grin on his face. \"Elizabeth, you're a genius!\"\n\nI grinned, \"I know. Dontcha love me?\"\n\nHe bent, took my face in his hands, and kissed me. \"You know I do.\"\n\nI giggled. \"C'mon. Let's get down to the lab. I wanna see if this actually *works*!\"\n\n****\n\nIt worked. No one was more impressed than Alfred when we turned in the report. And I was quick to give Teddy credit. \"It was his idea to use the levomepromazine-variant.\"\n\nTeddy shook his head. \"But E-Beth was the one who made it work. I *never* would have thought of that last step.\"\n\nAlfred chuckled in that warm, grandfatherly way he had. \"You *both* should be congratulated. That was brilliant chemistry, all around. We'll get started on the FDA filing right away.\"\n\nI couldn't help myself. I did a little happy dance and then turned and flung myself at Teddy, wrapping my arms around his neck and my legs around his waist as I hugged him fiercely.\n\n\"Whoa, whoa, children,\" Alfred's voice grounded me, making me quickly drop to the floor and fix my skirt. But there was still a smile on his face. \"We're not done yet. I suggest you get to work on all the forms.\"\n\n\"Yes, sir.\" I nodded. Teddy nodded as well. And then together, we skipped out of Alfred's office.\n\nI was still giggling when we passed Stella's cubicle on the way to my office. The perky blonde raised her eyebrows at us and commented, \"You two look to be in a good mood.\"\n\n\"We solved the trifluoperazine problem!\" I gushed happily.\n\n\"Okay...\" Stella drawled. \"I'll pretend that I have a clue what the hell you just said.\"\n\nI just rushed into Stella's cubicle, grabbed her arms, and yanked her up onto her feet. And then holding onto the blonde's hands, I promptly did my happy dance, bouncing around and dragging her up with me.\n\nTen seconds later, I let go of Stella's hands. At least she was giggling with me. And then with a beaming smile, I said, \"Call the girls. We're going to Monahan's. And the drinks are on ME!\"\n\nTwenty minutes later, all five of us were at our usual table at Monahan's. \n\nThirty minutes after that, all five of us were nicely buzzed, although we pretty much stopped at that point to make sure nobody got too drunk.\n\nAnd then twenty minutes after that, Audrey stood up and told us she had to go home. \"It's a Wednesday,\" she said by way of apology. \"I've got to get home before my husband starts to worry.\"\n\nWe all chuckled at that and bade her goodbye. Paula took her cue to leave as well. \"I don't have a husband to worry about, but I've got a class at the gym I need to make if I ever want to *find* one.\"\n\nThat got the girls scolding Paula about her figure, which was dynamite, by the way. So Audrey and Paula left, leaving me alone with my two favorite people in the world: Teddy and Stella.\n\nRather than go home, Stella called over the waiter for another round. And once we all got our drinks, she raised her glass and toasted me, \"To E-Beth, congratulations for finally figuring out the next great w\u00fcnderdrug that will improve peoples' lives, and more importantly, improve my bank account when profit sharing comes down.\"\n\n\"Hear, hear,\" Teddy cheered.\n\n\"And to Teddy,\" Stella added. \"For making it all possible. Not only did you give E-Beth the idea she needed to finish her design, but you've made my best friend the absolute happiest girl in the world. And she deserves it. You both deserve each other. I love you both.\"\n\n\"Aww,\" I gushed and immediately leaned over to hug my best friend. I patted her back, and felt the tiniest of shudders go through her body. Instantly, I knew that something was wrong, so I pulled back and stared at my friend. \"Hey... what is it?\"\n\nStella sighed and tried to put up a brave smile. \"It's nothing really.\"\n\nI raised my eyebrows. \"Stella...\"\n\n\"No, really. It's nothing...\"\n\nI just gave her The Look, and Stella crumbled. \"Nicolas and I broke up,\" she sighed. \"It just wasn't working out.\"\n\n\"Oh, honey...\" I hugged my friend again. \"Why didn't you tell me?\"\n\n\"I was going to. But then you had this big success and you wanted to go out and celebrate and the last thing I wanted to do was be a downer.\" Stella sighed. \"It's okay. I'm okay.\"\n\nI glanced behind me to Teddy, who was watching us with sympathetic concern. I read his eyes, and then I turned back to my friend, suggesting, \"Why don't you come home with us tonight? We can talk everything out, take as much time as you need.\"\n\n\"Oh, I couldn't,\" Stella looked over at Teddy. \"Today's your big day. I'm sure you want to celebrate, and I know you, E-Beth. 'Celebrating' means *celebrating*.\" Her eyebrows waggled suggestively.\n\nI let my hand drop down onto Stella's thigh. And without even thinking about it, I said softly, \"Then come 'celebrate' with us.\"\n\nStella got the hint immediately. Her breath quickened, and she searched through my eyes. I didn't want to pressure her, so I just left my gaze one of casual interest. But I hadn't been with another girl since Stella had split apart from me and Teddy, and my blonde friend was right: I wanted to *celebrate*.\n\n\"We're all friends,\" I said quietly. \"No commitments. Nothing permanent. Just... you look like you could use some company after the whole thing with Nicolas. And it's not like we haven't done this before.\"\n\nStella's eyes glanced over to Teddy, gauging the interest in his eyes as well. And then she flicked her gaze back to me. \"Just as friends?\"\n\n\"Well,\" I smiled. \"Special friends.\"\n\nStella reached down and caressed the back of my hand, which was still on her thigh. \"Let's go.\"\n\n****\n\nWe were in my bedroom, back where it had all begun so many months before. As far as I knew, Stella hadn't been with any other girls since me, and I didn't want to rush her. But it was Stella who took the initiative by sitting down on my bed and beckoning me to her with a curled finger.\n\nI sat beside her while Teddy patiently waited just inside the door. I moved forward, enough so that my big breast bumped into hers. And then tilting her head, Stella wrapped a hand behind my ear, tugged me closer, and brushed her lips across mine.\n\nLike a snowball rolling downhill, we simply built and built from there.\n\nStella turned and curled a finger to Teddy when I began kissing my way down her neck. The two of them made out while I unbuttoned her blouse and unsnapped her bra. And a few seconds later, Teddy and I had pushed the pretty blonde onto her back while we each feasted on an engorged nipple.\n\nI got myself topless while Teddy removed Stella's skirt, panties, and shoes. And then I fed my own engorged nipples to my best friend while my boyfriend knelt between her legs and gently lapped at her slit.\n\nI stripped away the rest of my clothes, leaving me buck naked, just like Stella. I straddled her face so that she could eat her first pussy since leaving us, and I could feel my best friend's tongue. Meanwhile, Teddy got himself undressed as well. I called my boyfriend over to me, taking his semi-hard dick in hand and eagerly sucking to turn it into the thick, rigid tool of pleasure both Stella and I wanted.\n\nOnce he was hard, I rolled myself onto my back and then took a page out of Stella's book by curling my finger to her. She grinned -- a wet, sloppy grin with my fluids coating her lips -- and then moved over to me, kissing me and rubbing my own juices over my face before repositioning herself into a sixty-nine on top of me. And then I was taking my first licks of Stella's snatch since she split up from us.\n\n*Yummy.*\n\nBut licking wasn't all I wanted to do to her. I had plans. For one, I curled my finger to Teddy. I'd deliberately lain across the bed sideways, with my head almost hanging off the edge. This put Stella's waving ass just above me, and in the perfect position for Teddy. And with my guidance, he grabbed onto the petite blonde's hips and swiftly buried his cock to the root inside her tight tunnel.\n\n\"Unnnghhh!\" Stella grunted loudly, pulling her face out of my crotch.\n\nI held Teddy's ass, holding him deep inside her until she got adjusted to his presence. And then I reached down with my other hand, pushing her face back into my crotch so she could resume munching on me. Only then did I let my boyfriend start to pump in and out of my best friend's cunt.\n\n\"Fuck her, big boy,\" I growled to Teddy. \"Fuck her brains out tonight. I want her screaming in ecstasy and crying out for more. Play your cards right, and we'll have her in our bed again and again and again...\"\n\nTeddy groaned as his thrusting picked up speed. I gripped Stella's tight buttcheeks, holding her in place while my tongue went to town on her clit. And from millimeters away, I watched excitedly as my boyfriend's cock slid in and out of her lewdly-stretched pussy lips.\n\nIt didn't take long for Stella to cum. Actually, it didn't take long for me to cum, as turned on as I was just watching it. But while I was coming down from my first orgasm, and Stella was ramping up to her second, a wicked idea popped into my head.\n\nI tapped Teddy's leg to get his attention and then indicated with my eyes to the bedside table. Teddy knew what I had stored in there, and his eyebrows went up. Still licking, I nodded excitedly. And you won't believe the thrill that shot through me when Teddy mouthed 'I love you' before reaching out with his left hand to slide open the drawer.\n\nStella had no warning before I was suddenly holding open her asscheeks to the sides while Teddy squirted the lube into her rectum. The petite blonde stopped her urgent thrusting and craned her head around to see what the hell was going on. But then Teddy smoothly popped out of her pussy and swiftly rammed his cock up her ass, forcing Stella to whip her head forward and shriek in shock. \"Aaaaaahhh, FUCK!!! Oh, I'm going to get you for that!\" she screamed at both of us.\n\nI was laughing into Stella's crotch, lost to my own inside joke while Teddy started pounding away. Stella simply let her head fall back down into my crotch, concentrating on throwing her hips back to meet each thrust of Teddy's invading prick. And that left her pussy free for me to shove three fingers inside while I wrapped my lips around her clit and hummed.\n\n\"Oh! Oh! FUUUUUUUCKKKK!!!\" Stella screamed as her entire body clenched up. I watched the contraction of muscles above me, from her abs through her crotch and even to the buttcheeks I still held in my hands. Teddy himself must have felt the sudden clamping, because I watched his thrusts slow down against the incredible friction. And at last, he held himself at maximum depth inside Stella's bowels and started jerking as he emptied out his load into her ass.\n\nWhat felt like five minutes later, my boyfriend staggered back. And as if his cock had been the only thing holding her up, Stella's legs promptly buckled and she collapsed on top of me.\n\nThis put her crotch right on my chest, right beneath my chin. And with my hands spreading her buttcheeks to the sides, I saw the cum bubble rising up out of her stretched sphincter.\n\n*Yummy.*\n\n****\n\nI got mine about an hour later. After the first session, we all played around in the shower for a bit. At first, Teddy and I teamed up on Stella, the both of us just happy to have her intimately in our lives once again. Then Stella and I smothered Teddy with an abundance of soapy tits and asses. And ultimately, Teddy reminded Stella that this was MY celebration for solving the trifluoperazine problem, and the two of *them* teamed up to give me a squealing orgasm right there beneath the shower spray.\n\nThat idea of celebrating *me* continued out of the shower. The three of us tumbled naked onto my bed. Teddy made out with me and nursed at my tits while Stella sucked Teddy to a fresh erection. Then my boyfriend spooned behind me and entered me from behind while Stella sandwiched me from the other side, kissing and fondling me while presenting her own nubile body to my roaming hands.\n\nI got my next orgasm with Stella strumming my clitty while Teddy stroked my pussy. I got another when Teddy rolled me into a missionary position and pounded my pussy while Stella alternately shoved her tongue down my throat and wrapped it around my sensitive nipples.\n\nAnd I got my last orgasms when Teddy rolled us over so that I was on top. Stella retrieved my strap-on dildo (the actual strap-on, not the double-ended). She lubed up and started fucking my asshole from behind while Teddy pumped me from below. And she even reached around with one hand so that I could suck on two of her fingers while I shivered and groaned in ecstasy at the triple-penetration.\n\nI think I heard some dogs whining in pain when I had my orgasm. I certainly came close to shattering Teddy's eardrum, since my mouth was right next to his head when I went off.\n\nBut as great as all the orgasms were, the single thing that made me the happiest came after we were completely done. All three of us went to sleep in my bed fully naked and with our arms wrapped around each other. And with my boyfriend on one side and my best friend on the other, I drifted away to a land of pleasant dreams and unbelievable bliss.\n\nFor years I had been the third wheel to David and Amber. For years, I had wondered when it would be my turn to settle down and find true happiness. And now I had.\n\nI knew this particular arrangement wouldn't last forever. After all, just as I had eventually found that special guy for me, Stella would grow up and leave us again. But not yet. In the meantime, I would enjoy this for what it was.\n\nAnd in the morning, when Stella had to run home for a change of clothes before meeting up with us at the office, both Teddy and I kissed her goodbye. \"Cum again soon,\" I teased.\n\nFrom the grin on Stella's face, I knew she would.\n\n****\n\n*-- SIX MONTHS LATER, FEBRUARY 2008 --*\n\nI was staring at my monitor, working to create the next great w\u00fcnderdrug, when a familiar face arrived at an unfamiliar location.\n\n*[knock, knock]*\n\nI looked up to see a bespectacled, slightly-balding man looking at me from my doorway. \"Steve!\" I said in surprise. \"What brings you to this neck of the woods?\"\n\n\"Uh, there's kind of an issue in the lab. I was wondering if you could come take a look at it.\"\n\nI blinked and frowned. While I did a lot of my lab work myself, there were still many, many tests that could be run by the techs without my being there. Steve and the others were quite capable, and very rarely had anything gone wrong to the point where they came to me for further guidance. Even then, Steve usually just called me. \"Um... okay, sure. Just gimme a minute.\"\n\nI closed out the program I was running and locked my workstation for ISM regulations on security. Then I stood up and smoothened out my skirt while settling myself on my heels. I hadn't planned on going into the lab, so I wasn't exactly dressed for it. But after brushing my hair back behind my ears, I gestured and then followed Steve out and down the hallway.",
        "It was a short walk to the labs. Steve kept us going at a pretty fast pace though, so I focused on keeping up with him in my three-inch pumps and didn't bother glancing around. But the instant he opened the door, I looked around in surprise and came to a dead stop.\n\nIt wasn't the lab setup I'd been expecting.\n\nInstead, laid in a row across the main countertop were fourteen squat cylinders. They were made of clear glass, laboratory grade, and filled with a variety of substances. I turned to look at Steve in confusion, but he just smiled and pointed me over to the cylinders.\n\nCurious, I stepped up to the countertop and briefly began examining them without touching them. The first one contained a lumpy, silverish rock. The second contained a violet-colored fluid. The third and fourth were purplish rocks, and so on. A couple of cylinders contained what looked like an empty vial each, stoppered to be airtight. One cylinder looked like it just had a piece of paper in it. And my analytical brain immediately started trying to identify each object.\n\nTungsten. The first lumpy, silverish rock was Tungsten. The violet-colored fluid looked like Iodine. But what was the point? What did the two things have in common? I went to the piece of paper, but it was an atomic symbol, the one for uranium, I thought. Well that made sense; Uranium was a controlled-substance, not easily found. But why the representation of it?\n\nOnly then did I notice the stickers on the sides of the cylinders. I turned around the one containing tungsten, and I was met with a perfect square printout of the Tungsten box from the Periodic Table of Elements. Upper left: the number 74. In the middle: the big block letter \"W\". And at the bottom: 183.85 atomic weight.\n\nSo that confirmed it for me. It WAS Tungsten.\n\nThe violet fluid was labeled Iodine. No biggie.\n\nThe next two purplish rocks were both Lithium. Only then did I notice that the \"L\" in the Lithium was emphasized with a black sharpie marker. The \"i\" was small and faint.\n\nTungsten... Iodine... Lithium... Lithium... Yttrium... Oxygen... Uranium... Magnesium... Argon... Rubidium... Rubidium... Yttrium... Magnesium... Helium. Again, with all of the two-lettered elements, only the first letter was emphasized with the permanent marker. \n\nOnly one of the two-lettered elements had the second letter emphasized, Helium's \"e\". Why would that one be different? And then suddenly I understood. \n\nHe couldn't. Not like this. Oh. My. *Gawd!*\n\n\"Holy shit!\" I squealed, clapping both hands over my mouth.\n\nJust then, Teddy walked up next to the counter, a broad smile on his face. I glanced at him briefly, and then hurriedly I spun all the cylinders to face the same direction, putting the labels facing outward:\n\nW... I... L... L... Y... O... U... M... A... R... R... Y... M... e.\n\nAnd then Teddy was at the end, kneeling on one knee.\n\nA black velvet box was in his hand, opened up to show me a truly MASSIVE diamond ring.\n\nMy jaw dropped.\n\nMy left hand went forward.\n\nMy head started nodding up and down.\n\nAnd then the ring was on my fourth finger.\n\n*HOLY FUCKING SHIT!*\n\n\"Ohmigod...\" I moaned, staring at the big, sparkling rock on my finger.\n\n\"I think she likes it,\" Stella giggled behind me.\n\nI whirled around and saw that there were a good twenty people crowding into the lab behind me. Everyone from Alfred to Stella to Steve and even Edward Reed -- the freakin' CEO of the whole damn company -- was standing behind me, watching as Teddy stood up and took me into his arms. \"Ohmigod,\" I gasped again.\n\n\"Will you marry me?\" Teddy asked sweetly, now holding my hand and staring deeply at me with those gorgeous blue-gray eyes.\n\nMy jaw flapped but I nodded, \"Yes. Yes!\" I sputtered.\n\nThe room erupted in applause. Teddy grinned and kissed me tenderly, making me swoon as my legs gave out. He caught me easily, and turned it into a graceful dip just like in the movies. And the applause only got even higher, with a few whistles and catcalls thrown in for good measure.\n\nBut eventually Teddy stood me up, and rubbing his nose against mine, he sighed happily. \"I love you, Elizabeth.\"\n\nI beamed right back at him. \"I love you, too.\" Teddy loved me. He really, really loved me. And I loved *him* for it. So he wasn't wealthy. So he wasn't the most devastatingly handsome man I'd ever met. So he didn't have charm oozing out of his ears. He loved me. And that was all that mattered.\n\nTurns out, I was wrong about one of those things.\n\nStill clapping, CEO Edward Reed approached us, his arms open. He didn't hug me, not exactly. But he reached out and held my elbows with his hands, a warm smile on his face. \"Congratulations, Elizabeth.\"\n\nI smiled back and demurely replied, \"Thank you.\"\n\nMr. Reed reached out to Teddy, patted his shoulder, and then he turned and walked away.\n\nOnce Mr. Reed left, the rest of the crowd moved in to give us their well-wishes and congratulations. But as they approached, I stared after the CEO, still a little in shock that he'd been there to witness Teddy proposing. \"That was weird. Did he just happen to be passing by?\"\n\nTeddy's eyes flicked up to Mr. Reed's departing form. He took a deep breath and then gave me a look. And with an almost apologetic face, he said, \"E-Beth, there's something I need to tell you.\"\n\n****\n\n\"Ohmigod! You're getting married!\" Amber squealed into the phone.\n\nJust thinking about it made me do my little happy dance once again. Giggling uncontrollably, I turned and flopped backward across my bed. And then I proceeded to tell her the whole story, from Steve coming to fetch me out of my office to the fourteen cylinders in the lab to Teddy down on one knee. Amber oohed and ahhed appropriately, stoking my mood even higher.\n\n\"And ohmigod, you won't even *believe* this last part!\" I gushed. \"Get this, it turns out that Teddy is LOADED. He's like, richer than YOU.\"\n\n\"What?\" Amber squawked. \"I thought he was a stockroom clerk? Well, junior researcher. What?\"\n\nI giggled. \"That was all some stupid cover. Teddy's full name is Edward Harrison *Reed*, Junior. His dad is the CEO of the company, and rather than let Teddy be put in as some nepotistic Vice President, his dad made him start at the bottom and *earn* the respect of the employees. Even now, Stella and I are like the only non-Director-level people to even know about it!\"\n\n\"Holy crap!\"\n\n\"I *know*!\"\n\n\"Well... does it make a difference? I mean, you said 'yes' before he told you, right?\"\n\n\"Of course, of course. I knew I loved him WAY before,\" I sighed dreamily. \"But it IS some pretty nice icing on the cake.\"\n\n*[DING-DONG!]*\n\n\"Oops. There's Teddy.\" I sat up straight and checked the clock. \"We're going out tonight to celebrate the engagement.\"\n\n\"Sounds like fun. Wish I could be there.\"\n\n\"We'll celebrate later. I promise. Who knows, depending on how David and Teddy get along, we might ALL get to celebrate sometime.\" I giggled as images of a foursome popped into my head.\n\nAmber laughed right along with me. She congratulated me again while I headed for the door. And I hung up just as I opened the door.\n\n\"Hey, baby...\" Teddy bent at the knees and opened his arms just in time for me to leap at him. He lifted me as I wrapped my legs around his waist and then spun me around while I did my best to plaster my mouth over his.\n\nI still had a few of my own insecurities. Having Teddy propose did wonders for reassuring me that I was a desirable babe. Having him so easily spin me around reassured me even more that I wasn't too fat or anything. And the way his paws squeezed my buttcheeks while he smothered his face in my cleavage was pretty nice as well.\n\nI giggled as he finally set me down. And beaming at me, he asked, \"Ready to go?\"\n\nI checked my watch again and raised my eyebrows. \"Not quite yet.\"\n\nTeddy frowned. \"Why not?\"\n\n\"Wait a minute...\"\n\n\"Huh?\"\n\n\"Waiiit...\" I intoned, still staring at my watch. \"Annnd....\" I drawled, my finger waving in the air.\n\n\"Hi, guys!\" Stella appeared behind Teddy, exactly at the time I told her to be here, and dressed for a night out.\n\nTeddy turned around to our special friend and I moved myself against his side, wrapping my arm around his waist and hugging him tightly. \"I introduce my beloved betrothed. Do you possess the desire to engage in a shared incident of coital bonding?\"\n\nStella gawked at me in confusion. \"Huh?\"\n\nI grinned. \"Meet my fianc\u00e9. Wanna fuck us?\"\n\nI'd finally found my happiness."
    ],
    "authorname": "bluedragonauthor",
    "tags": [
        "threesome",
        "anal",
        "mff"
    ],
    "category": "Group Sex",
    "url": "https://www.literotica.com/s/e-beth-ch-04"
}
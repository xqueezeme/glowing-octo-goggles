{
    "title": "Surefoot 03: Field Trip Ch. 04",
    "pages": [
        "Planet Luntanu, Alpha Squad Base Camp:\n\nEydiir pushed the girl out of the way and flung her kligat at a large, four-legged creature with a tusk-flanked muzzle, striking one of the tusks and bouncing off as the creature invaded the campsite, emitting a terrible bellow.\n\nSasha grabbed a large branch from the ground and raised it. \"Everybody get out of the way!\"\n\nThe creature was like a Terran warthog or Klingon targ, waist-high and muscular and shaggy and now stampeding around camp, knocking over the rack with the drying uniforms and sending them into the fire, slamming into units and chairs and threatening to do the same to the Away team - until Neraxis stunned it with her phaser. It went down on its side, but was still breathing, albeit rapidly. It also stank, as did most every animal on this planet, it seemed.\n\n\"Is everyone all right?\" Sasha asked.\n\n\"Better than Tusky here,\" Giles quipped, suddenly cursing. \"Look! Your uniforms!\"\n\nAll turned to see the three uniforms now smouldering on the fire, and moved to rescue them, The material was meant to be fireproof - but it was now charred in places.\n\nSasha stood there, feeling her temper fray. She began pacing, wincing as her bare feet stepped on sharp stones. Now she swore loudly. \"That is it! I am done! This was supposed to be an adventure for us! We were gonna win the competition! Now look at us! I have us waste time and space bringing down unnecessary equipment! Giles damages an alien building! Kit gets sick on bugs! I eat monkey crap! And now a pig invades our camp and burns our uniforms!\"\n\nShe looked at Giles. \"You and Neraxis do a sweep of the immediate area, then work out a security plan to keep any more animals from coming in here! Eydiir, you and Kit check out the animal, make sure it's okay! Jonas, get that fakakta heater turned into a cooler! And I'll have all of you know for the record that later on I'm going over to Jared Miro's tent and spend the evening salvaging this terrible experience and lose my virginity! Assuming that any lingering stink of monkey crap on me doesn't put him off!\"\n\nShe stormed off to her own shelter and entered, collapsing onto her stomach on the top of her sleeping bag, running her fingers through her hair and feeling like seven shades of bad. \n\nShe wanted to cry. She had such high hopes for her first real Away Mission! Now they're sitting around in the heat and bugs with unnecessary equipment and crap food and the wildlife are attacking them and her secret boyfriend was outing their relationship to all and sundry, risking their positions- and then she does the same to her own squad, friends that she just yelled at. She hoped for another Tusky to charge through and trample all over her.\n\nShe grabbed her PADD and began collating the data and compiling her report. They had gathered and catalogued a great deal of data, despite all their setbacks, mistakes and misadventures. The shelter was small, waist-high, and the heat within was stifling, oppressive, and she really hoped that Jonas could make them a cooling unit. Otherwise, they might have to work up a rota for the Squad to sleep in the shuttle.\n\nNot her, though. She didn't deserve it, treating them all like dirt the way she did. She tried to listen to them, but the soundproofed material of her shelter wouldn't let her her anything distinct.\n\nSweat was beading down her back and the backs of her legs, but she ignored it.\n\nShe didn't ignore the tap on the shelter frame from outside, however. \"What?\"\n\nThe shelter door was pulled open, and Giles half-knelt there. \"Hi. Can I come in?\"\n\nSasha had been lying there, with only the backlight from her PADD to illuminate her. Now she reached up to switch on the light on the supporting bar holding up the circular roof of the shelter. \"Were you the one they chose to come in here and assassinate me?\"\n\n\"We drew lots.\" He crawled in, leaving the shelter flap door open to let in some air as he sat cross-legged. \"Sorry to bother you, but I thought as second in command I should report in. Jonas thinks he'll have us a cooler in an hour or so. Neraxis and I have worked out something... unusual... to protect our camp from any further intruders. And Eydiir and Kit have examined Tusky, and can wake him up with a stimulant.\"\n\n\"Thanks.\" Sasha grunted, reaching for one of the water bottles. \"I was an ass out there to everyone.\"\n\n\"Agreed. That's usually my job.\"\n\n\"And then I'm boasting about going off to have sex with Jared.\"\n\n\"To be fair, that's pretty boastworthy. I know I was like that, with my first when I was fifteen. Couldn't stop telling everyone.\" \n\nShe drank again. \"Giles... are you really a virgin?\"\n\nHe didn't answer.\n\n\"I wasn't asking to make fun of you, it's none of my-\"\n\n\"Yes,\" he admitted, breathing out, all his swagger gone. \"Yes, I am. I mean, there have been times when I could have been with a girl or two, of course. Lots of girls were willing... I think...\" He glanced out at the camp once. \"But then I say too much and ruin my chances. I can talk a good game. I... I just don't know when to shut up. I probably try too hard.\"\n\nShe nodded. \"I've been too busy the last couple of years to think about it... much... now, it feels like it's another qualification I have to make to get into adulthood.\" She smiled at him. \"You don't mind if I get there first, do you?\"\n\nHe smiled back. \"You're the Squad Leader.\"\n\nShe sighed, staring out the shelter door. \"Yes, I am. And I'd better start earning my keep.\"\n\nIn the camp, everyone was crowded around the still-unmoving animal, but then rose as Sasha and Giles approached, Sasha declaring, \"I'll keep this short: I've been a jerk to all of you, and I'm sorry.\" She nodded to Eydiir. \"Let's get this smelly bastard out of here.\"\n\nThe Capellan nodded, producing a hypospray. indicating the animal. \"I suggest everyone back off and give it space. I have no desire to repair puncture wounds from those tusks.\"\n\nThey did so, as Eydiir prepared a hypospray and returned to the pig-thing, getting just close enough to press the business end of the spray into its hindquarters, before joining the others. Tusky jolted, like it had just been disturbed from a nap, before finally rising, looking a little wobbly as it staggered about. Sasha noticed that Neraxis and Giles had phasers drawn, but pointed to the ground before them: good.\n\nThey watched silently as Tusky seemed to be surveying the area, before moving over to the remains of their replicated rations, stuck its snout into one half-finished meal - then promptly bolted out the far end of the clearing with a noise of disgust.\n\n\"I don't blame you,\" Sasha called after it. \"Thank you, Eydiir. You too, Kit.\"\n\nNow Neraxis spoke up. \"And we've come up with a solution to the wildlife problem. Tusky apparently is the Shriekers' main predator here, so they'll stay away from their territory. And territory is universally marked with urine.\"\n\n\"You want to invite Tusky back to spray around the area for us?\"\n\n\"No need,\" Eydiir explained, \"Our own urine has sufficient hormones to act as an effective substitute for the predator's. It'll keep both the Shriekers and the other Tuskies away.\"\n\nSasha nodded. \"A simple and non-lethal approach. Good work.\"\n\n\"We'll all have to pitch in and pee out in the open,\" Neraxis pointed out, heading towards the edge of the campsite. \"Hope no one's bladder shy.\"\n\n\"If we are, we'll be cured of it soon enough.\" Sasha smiled. \"Thank you. All of you.\" She looked back in the direction of the other camp, and Jared. The others were right; no one on the Surefoot would know... She considered walking away to have a discreet conversation, but instead just slapped her combadge. \"Private Message: Squad Leader Hrelle to Squad Leader Miro.\"\n\nA second later, the familiar voice made her smile, and her heart race. \"Hello, Sweetness.\"\n\nSasha felt herself blush. \"I was wondering... I was wondering if that invitation to visit your shelter later was still open?\"\n\nThere was a pause, and for a brief heartbeat she feared Jared would change her mind. But then the Argelian's voice returned. \"Absolutely, lover. I should warn you, though, I sleep in the nude. And so will you.\"\n\nSasha felt herself blush, ignoring the looks from her Squad. \"You're outrageous. How about 2100 Hours? It'll give us a chance to eat and work on our reports beforehand?\"\n\n\"Fine, Miss Professional. But I swear if you bring up work while you're with me, you'll be getting a spanking. Jared out.\"\n\nSasha's heart was racing now, and she couldn't get the stupid grin off her face as she helped the others straighten up and store the collected samples.\n\n*\n\nUSS Surefoot, Deck 1, Bridge:\n\nCommander T'Varik leaned back in her chair, having detected a private transmission between the two Squad Leaders; after a moment's decryption, she listened to its contents. Her brow furrowed, and she only half-monitored the rest of the incoming data on the stations she had set up to secretly observe the progress of the three cadet squads. \n\nShe swivelled her chair around to see Captain Hrelle conversing with Lt Velkovsky at the helm. \"Captain, would you please monitor my stations for any possible emergencies, while I have a word with the Counselor?\"\n\nHe looked up at her. \"Of course. Is there anything I can help with?\"\n\nShe considered it, given that it involved his stepdaughter. However, it was that same factor that made her reply, \"Not at this time. That may change, however. If you will excuse me?\"\n\nHe waved her off. She rose and departed without further preamble.\n\n*\n\nShe found Kami in the dining hall, eagerly devouring a Caitian dish of fried meats and minimal vegetables. \"Counselor, may I disturb you?\"\n\nShe looked up from her plate. \"You're not having any of this.\"\n\n\"I will contain my disappointment. I am seeking your counsel on a matter involving the cadets.\"\n\nKami stopped eating and straightened up. \"Well, it's quiet here, but if you want to discuss this in my office-\"\n\n\"This will be suitable.\" The Vulcan took the seat opposite her, her voice low and confidential in tone. \"As you are aware, I have been monitoring the cadets planetside. During this time, I have discovered that Ms Hrelle and Mr Miro are romantically involved. I am not certain when this commenced, or the extent of the relationship, but I am certain that clandestine coitus has been scheduled for 2100 Hours tonight.\"\n\nKami smiled. \"You Vulcans are such romantics.\"\n\nT'Varik raised an eyebrow. \"Were you aware of this relationship?\"\n\n\"I... suspected.\"\n\n\"But you chose to not warn them of the dangers?\"\n\n\"What dangers? All cadets have birth control implants and are in good health.\"\n\n\"I should not need to remind you of Starfleet Academy Regulation 121: 'Cadets before their fourth year of study are forbidden from engaging in sexual activity of any kind, either with other cadets, Academy staff or with civilians, regardless of the age of said cadets, their legal or marital status.'\"\n\nKami extended the claw on her forefinger and picked at her teeth. \"I know. That was a dealbreaker for my cub.\"\n\n\"'Dealbreaker'?\"\n\n\"An issue or condition with an individual, group or organisation that you can't ignore, one that ultimately outweighs any redeeming qualities they might otherwise have. For you, for instance, a dealbreaker with a potential suitor might be if he forced you to eat meat-\"\n\n\"She.\"\n\n\"Excuse me?\"\n\n\"The proper personal pronoun for describing a potential suitor for me would be 'she'. I prefer women.\"\n\n\"Hmm, guess I won't be setting you up with my brother. Anyway, for my cub, who really, really enjoys sex, he'd sooner be a pilot in a private shipping firm and bed the females as and when he likes.\" She smiled. \"He has no regrets.\"\n\n\"Regulation 121 is a logical and necessary rule. It protects underclassmen from possible exploitation by more experienced individuals-\"\n\n\"Balls.\"\n\n\"-And allows them to stay focused on their academic studies by eliminating distractions.\"\n\n\"Balls.\"\n\n\"Repeatedly responding with the Terran slang for testicles does not validate your opinion.\"\n\n\"We already have regulations in place to protect underclassmen from exploitation. And 121 doesn't deactivate a person's sex drive. If the Academy ever added a regulation prohibiting masturbation, the poor kids would be exploding all over the place.\"\n\n\"Nevertheless, the regulation is explicit. My next course of action is clear.\"\n\nKami tilted a head, smiling. \"I think that if that were the case, you wouldn't have come to me for counsel.\"\n\nT'Varik paused, silently acceding the point. \"I must admit a... personal bias, given one of the individuals involved.\"\n\n\"I'm guessing you don't mean Jared?\"\n\n\"Jared Miro is gifted and personable, if overly concerned with his own sensual appetites, as is typical for his culture. I have no feelings of either a positive or negative nature for him. However, I found Sasha to be... intriguing, long before I met her stepfather. Indeed, before it was known that the Captain was alive, and innocent of the charges levelled against him...\"\n\n*\n\nStarfleet Academy, Two Years Ago:\n\nCommander T'Varik had been sitting in the rear of the classroom, silently evaluating Lt. McKinley, the new Federation History instructor for the freshmen cadets on their first day at class, when there had been an unexpected visitor, a Starfleet officer of commander whom T'Varik did not recognise. \"Sorry to interrupt, Lieutenant, I'll only be a minute.\"\n\nMcKinley, a young, fresh-faced human, glanced at the back of the class in T'Varik's direction, before returning to the intruder. \"Excuse me, Sir, but who are you?\"\n\n\"Commander Matthew Arrington, Starfleet Intelligence. I'm here on official business, and I'll only be a minute. Okay? Good.\" The older man, tall and pale and balding and gimlet-eyed, didn't wait for a response from the instructor, looking out at the classroom of new cadets and barking, \"Where's Cadet Sasha Eismann?\"\n\nThe name sparked murmurs and looks among the cadets, and a raised eyebrow from T'Varik. She was aware of the cadet, remembering the incident years before on Station Salem Four, when the then-child had managed to save her teacher and class during the Bel-Zon raid that had killed her mother among others, receiving the Starfleet Medal of Commendation for exceptional valour, the youngest recipient of the medal to date. \n\nT'Varik was also aware that her stepfather, Captain Esek Hrelle, remained at large, having been found guilty of aiding and abetting the criminal gang in the raid on the station, as well as the deaths of his crew on the border vessel USS Furyk. However, that fact did not prevent the girl from receiving an exceptional number of letters of recommendation from Starfleet officers, crew and noted civilian personnel years later, when she applied for a position at Starfleet Academy.\n\nAmong the class, a short blonde human with a mature figure rose, her voice clear as she announced, \"Cadet Sasha Eismann, reporting as order, Sir!\"\n\nT'Varik watched the reaction on Arrington's face to the girl's response - it reminded her of some of the some of the more cruel upperclassmen who still mistakenly believed it was an Academy tradition to harass the younger plebes. He barked again, \"Front and centre, Cadet! Now!\"\n\nEismann complied, quickly walking between the columns of desks to stand at attention in front of her class and the Commander. Arrington stood a head taller than her, and drew closer, giving her an intimidating glare that made T'Varik distinctly uncomfortable. The man kept scowling at the sixteen-year-old, who impressively stayed fully at attention with no reaction, but he kept his voice raised for the benefit of the captive audience. \"Proud, are we? Standing there in a cadet's uniform you don't deserve to wear? Do your teachers and friends know who your stepfather was?\"\n\nNear the podium, Lt. McKinley spoke up again, \"Excuse me, Commander, with all due respect-\"\n\nArrington never even looked at him. \"Just stay put, son, this won't take long.\" He drew even closer, until he was practically in Cadet Eismann's face, as if trying to make her shake, to involuntarily back away, though she remained admirably still as he continued loudly, \"You may have sneaked in here under the name Eismann, but I know that your stepfather was the criminal traitor, Esek Hrelle!\"\n\nHe paused to let the revelation sink in among the cadets, who murmured and whispered even more loudly than before, while the instructor paled. T'Varik, however, was inwardly appalled that the man would reveal confidential information like that in public. And she was concerned that Lt. McKinley was doing nothing to try and regain control over his classroom.\n\nArrington continued. \"And his influence is evident in you. You painted yourself out to be some hero at Salem Four, taking advantage of the terrible crimes your stepfather committed, including the death of your own mother, to get yourself a place here. And now you have the gall to stand there in that uniform? You're not fit to be here! And if you had any sense, you'd resign and crawl off somewhere, because I promise you, if you stay, you'll live to regret it!\"\n\nAnd now T'Varik understood the reason for his visit; amidst the court martial in absentia for Captain Hrelle's action, Arrington's own office had received substantial criticism for their lack of intelligence in warning about the Bel-Zon's threat, and it was implied at the time that their continued attacks on Hrelle was an attempt to deflect that criticism. The Vulcan was frankly astonished that he would come here to try an intimidate a young person in such a petty fashion.\n\nShe had been waiting for McKinley to finally intervene, but when it became apparent that the younger instructor was too intimidated by the intruder to do so, T'Varik began to rise and do so herself. However, Cadet Eismann, red-faced and almost shaking, spoke up. \"Permission to speak freely, Sir?\"\n\n\"Oh, go right ahead, Cadet.\" He looked pleased, as if waiting for a challenge.\n\nHe shouldn't have been. T'Varik stood still as she saw the change in the young woman's stance and expression, the face tight with rage, the angry finger rising up to point in the man's face as she snarled loudly and proudly, \"I couldn't give two tugs of a dead dog's cock what you have to say about my stepfather! Your opinion of him isn't worth the shit under my boots! There isn't a quantum microscope in the Galaxy powerful enough to measure how little of a fuck I give about the opinion of a miserable, cowardly little man who has never commanded, never served on a starship, but spends his time skulking around the back corridors of Starfleet like some anal parasite, feeding off the shit that comes his way!\"\n\nGasps of shock ran through the assembled group, and if T'Varik did not possess the emotional control of a Vulcan she would have reacted in the same way. So she stood there and witnessed the remarkable reversal of personality and status, which had been as profound as it had been immediate.\n\nAnd it was Arrington who was suddenly looking intimidated, literally stepping back as the first-year cadet, twenty years younger and a head shorter than Arrington, was stepping forward, pressing her verbal assault. \"You and your pathetic office isn't fit to lick Captain Hrelle's tail, let alone stand in judgement of him without all the facts! Without giving him due process, without giving him the presumption of innocence, or taking his long and distinguished career serving the Federation into account!\"\n\nHer voice grew until it filled the classroom. \"And you have the GALL to come in here and bring my mother into this? A woman who's worth a hundred of you and every member of your miserable fucking family? You shameless fakakta little prick! Let me tell you something, shithead, if you think you can come along here and try to scare me off, then you can KISS MY FURRY ASS!\"",
        "Commander Arrington looked like he's been physically struck. He didn't really recover until T'Varik finally stepped forward and escorted him and Cadet Eismann to the Superintendent's office, where his bluster had resurfaced. \"She publicly insulted a superior commissioned officer! I demand that you expel the insubordinate little bitch immediately!\"\n\nThe Superintendent, an older, pale-skinned human with swept-back snow-white hair and a soft, lined face, sat behind her desk and narrowed her steely gaze at Arrington. \"Commander, never demand anything of me, and *never* use that term about any woman in my presence again.\"\n\nNearby, Cadet Eismann remained fully at attention, with T'Varik beside her, addressing the Superintendent. \"I should remind the Commander that he gave the cadet permission to speak freely.\"\n\nHe scowled at her. \"That doesn't give her the right to tell me to kiss her furry ass, whatever the hell *that* means!\"\n\n\"In point of fact, it literally does give her that right.\"\n\nThe Superintendent looked at Eismann now. \"'Furry ass', Cadet?\"\n\n\"Yes, Ma'am,\" the girl replied formally, still at attention. \"I was quoting a favourite expression of my stepfather; as you can imagine, being Caitian, his ass was quite furry.\"\n\n\"Of course,\" the Superintendent agreed, trying to keep a straight face.\n\n\"I should clarify, Ma'am, that my ass is *not* furry - however, I want it understood that the invitation I gave Commander Arrington to kiss it still stands.\"\n\nArrington's face reddened even further. \"You see? That bi- that girl doesn't deserve to be here!\"\n\n\"There are fifty-three authors of letters of recommendation on her file that say differently,\" T'Varik informed him coolly. \"Including five admirals, nine Captains, eighteen senior officers-\"\n\n\"If my father was still Superintendent here-\"\n\n\"Commander Arrington,\" the present Superintendent spoke up, her voice remaining calm - and very, very cold. \"I haven't given *you* permission to speak freely. Bear that in mind if you wish to continue your present train of thought.\"\n\nArrington stiffened, but seemed to visibly regain control of himself as he continued. \"Ma'am, be advised that I will be making an official complaint about Cadet Eismann's behaviour today.\"\n\n\"If you do,\" T'Varik countered, before her superior officer did. \"So shall I, regarding your own actions.\"\n\nArrington faced the Vulcan. \"Mine? What have *I *done?\"\n\nShe faced him, standing between him and the cadet. \"You entered Starfleet Academy grounds without prior authorisation from this office. You interrupted a class in session. You engaged in a conversation with an underage cadet without obtaining prior clearance. You revealed confidential information about her to her classmates and class instructor. You implied that she exploited her mother's death to obtain a place at the Academy. And you made veiled threats to her safety should she choose to remain.\" Her face tightened. \"As Cadet Eismann's personal Academy Liaison, and her de facto guardian during her time here, I will not permit any of that to go unchallenged.\"\n\n\"Enough.\" The Superintendent rose from behind her desk and looked at the three of them in turn, stopping with Arrington. \"Commander... you will leave these grounds, and you will not return or make any further contact with Cadet Eismann without direct permission from myself. Otherwise, you'll be kissing my ass, furry or not. Is that understood?\"\n\nArrington almost looked ready to argue. But the man had enough intelligence to just stand at attention himself and reply, \"Yes, Ma'am.\"\n\n\"I will also be contacting your superior and informing her of your activities here today, because I doubt very much if she has sanctioned any of them. Dismissed.\"\n\nArrington stiffened again and departed the office. The Superintendent relaxed a little now as she focused on T'Varik. \"Commander, I was under the impression that Lt. Masters was Cadet Eismann's Academy Liaison. When did you take over the position?\"\n\nThe Vulcan shifted in place. \"Approximately 32.71 seconds ago, it seems.\"\n\nThe Superintendent smiled. \"Good. I have a feeling she might need you in the future.\" Now the older woman looked at Eismann. \"Is there anything you need before you return to class, Cadet?\"\n\nThe girl's lips pursed. \"There is, Ma'am. If I may, I would like to make an immediate amendment to my personal record.\"\n\n\"What sort of amendment?\"\n\n\"My surname, Ma'am. 'Eismann' was my biological father's name, and the name of his parents, who raised me on Earth after my mother died; they had been the ones who convinced me to use it when I applied, to avoid any potential confrontations like the one that happened today. \n\nI will always honour my birth father, and what he meant to my mother... but I never knew him. He never had the chance to be my father, the way my stepfather had been. Commander Arrington was correct about one thing: Captain Esek Hrelle shaped me, guided me, helped set me on my present course, and will continue to guide me, for the rest of my life.\" \n\nShe somehow straightened up even further, looking proud. \"So from now on, I wish to be known on the record as Cadet Sasha Hrelle. That way, if anyone else wishes to come and express their opinion of my stepfa- my father - they'll know where to find me...\" \n\n*\n\nKami was laughing. \"I'd have given my right boob to have been in the classroom that day.\"\n\nT'Varik offered a raised eyebrow. \"Your willingness to exchange mammary body parts notwithstanding, I must admit that I am... fond of the girl. It is not logical. But it is true.\"\n\nKami smiled warmly. \"Well, I promise not to tell the Vulcan High Council about such an emotional admission. So what's the problem? Look the other way. Let the girl have some fun, she deserves it.\"\n\n\"I am not accustomed to ignoring regulations.\"\n\n\"These are not regulations that apply to all of us, throughout our time in Starfleet. They're regulations specifically aimed at the thousands of cadets at the Academy, typical adolescents acting as full-time students and living in the midst of a major city with so many distractions and temptations and comparatively fewer supervisors. \n\nBut the cadets in the AWE Program are not like them. They're out here in the middle of nowhere, and expected to perform like ordinary officers and crewmen, despite their lack of age and experience. It's... illogical that they can be considered adults under Federation law, that they're expected to take on the responsibilities of adults, but not allow them to have sex, or drink, or have any of the other privileges of adulthood.\"\n\n\"And if they cannot manage these privileges?\"\n\n\"Then we offer them the guidance required to do so, as and when necessary.\"\n\nT'Varik considered Kami's words, rising again. \"Thank you, Counselor. I will consider it.\"\n\nShe left, having already might up her mind...\n\nTO BE CONTINUED"
    ],
    "authorname": "Surefoot",
    "tags": [
        "star trek",
        "science fiction",
        "space",
        "federation",
        "caitian",
        "starfleet",
        "starfleet academy",
        "starship",
        "alien11111"
    ],
    "category": "Celebrities & Fan Fiction",
    "url": "https://www.literotica.com/s/surefoot-field-trip-ch-04"
}
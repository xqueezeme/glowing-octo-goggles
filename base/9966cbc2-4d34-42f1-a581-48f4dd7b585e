{
    "title": "Bike Ride",
    "pages": [
        "Fog hung thick in the air this morning as I prepared for a solo bike ride through the woods. While I laced up my shoes and pulled on a zip up jacket I thought about the last time I had been to this specific trail. \n\nI had been talking with a friend on the phone last summer and thought it would be nice to sit somewhere secluded and quiet as we chatted. We'd fooled around before, and talking together always got me worked up. \n\nThe thought of it ignited a flame in my belly. \n\nWhile we were talking, he had asked me where I was and what I was doing, which led to him suggesting I open my top and expose myself to nature. I obliged. My only regret was that he was not there to actually watch me being naughty for him. Not many people pass down that part of the trail, but I continued to keep a watchful eye on passers-by, while I explored the dampness clinging to my inner thighs. I had an amazing orgasm sitting on that bench as we continued our kinky conversation. My breasts were exposed to the warm summer air as I brought myself to climax by tapping quickly on my clit, and a second time with two fingers deep within my tight, throbbing pussy. \n\nI shook the memory away, bringing myself back to the present, but the slow burn was building, and I knew it wouldn't go away quietly. I was dressed and ready to go, but as I stood in my bedroom thinking, I decided I wanted to make this ride extra fun. First, I unzipped my jacket and removed the bra from underneath my t-shirt. I wanted them free to play with, and the idea of wind rushing as I rode, my nipples hard as pebbles, made my aching pussy drip a little. This was good... but not enough. My plan evolved again: I wanted to ensure an orgasm while on this ride. A few moments passed until the idea came to me: I hadn't used my Ben Wa balls in quite some time. This ride was a great opportunity to test them out again. I turned to my dresser and fished for them in the bottom of my sock drawer. I felt the velvet fabric of the box and pulled it out, socks flying to the floor. \n\nMy hands shook with anticipation as I opened the box, revealing two shiny, smooth, stainless steel balls. My reflection in the steel smiled back at me as I took them out and pushed down my black leggings and green, silk panties. I was tempted to play with my clit right there, but held the urge back, knowing it would be more intense once the balls were in, and I was cruising on my bicycle. I held each ball and they warmed to my touch. I slowly parted my thighs and my outer labia opened like blooming petals of a flower. A very wet flower. I pressed the first ball to my entrance and rolled it through my warm, creamy juices before pushing it deep into my pulsing tunnel. My middle finger pressed the ball in, up to my second knuckle, then slowly retreated through compressing walls. The second ball followed and I pushed both as deep as I could. I moved my pelvis in circles, encouraging them further, until they were deep inside of me. \n\nEventually, I snapped out of my aroused fog and stood, pulled my panties and leggings up, and prepared for the journey. Despite the fog, visibility was decent for biking so my anxious thoughts of not being able to see very far disappeared as I made my way outside to load my bike on the car, and set off to the trail near my house. The balls deep in my cunt moved with me. Every now and then I felt the weights inside of them shift, causing a wave of pleasure to roll through my loins. I wondered how long I would last before cumming the first time. That made me smile and my cheeks flushed. The first test was to make sure I did not cum while driving to the trail. The road was winding and bumpy, and I wanted to press my clit hard against the leather interior of my seat, but refrained. My clit was throbbing hard, and aching to be touched, flicked, licked, and sucked. My thoughts began to whirl out of control into a filthy tornado of lust until I finally reached my destination, and refocused on getting my bike unloaded. \n\nI wheeled to the beginning of the bike trail and swung my right leg over the seat. Anticipating a wonderful sensation, I lowered my ass slowly to the soft saddle and pressed my cunt down firmly. My eyes rolled as the balls moved, passing a wave of pleasure through me again. \n\n\"Breathe,\" I reminded myself. I needed to be able to ride and not get injured in the process! It took great will power to breathe the powerful sensations away, but it made me hungry for more. My feet pressed each pedal down and the bike began to glide down the smooth black track. I focused on the winding of the path to distract myself from the pressure building against my cervix. My seat gently vibrated as my pace quickened. I couldn't hold back the need to press my clit into the seat. \n\n\"Oooohhh fuck!\" I gasped. Thankfully no one was around to hear me moan to myself as I mashed my clit against the smooth point of the saddle. I could easily have cum, but forced myself to stop. By this point my slippery slit was dripping and my panties were completely soaked. I could hear my heart thumping in my ears in time with the pounding ache of my throbbing cunt.\n\nI began to pant with need. I was not going to make it much longer, and I had only just begun! If I went over even the smallest bump, I knew I was going to explode. Cruising at a steady speed, I pressed my pussy over the pointed front of the seat, spreading my lips deliciously. My leggings were soaked through and my lips molded over either side of the front piece of the saddle. I remember choosing this particular style of racing saddle because of the long firm point - the idea of having something so like a hard cock against my pussy was particularly appealing. \n\nMy mind started to wander to a very dirty place. \"I wonder if I could fuck my seat,\" I thought to myself. What a nasty, slutty thing to think, especially with these balls deep in my cunt. The image made my clit throb harder. Concentrating on the trail, I gripped the handle bars and pressed my pelvis down hard, smashing my clit into the firm seat. \n\nIt was enough. My feet stopped pedaling and my core began to shake as the orgasm tore through my insides. I could barely manage to keep my ass on the seat as I struggled to maintain my balance. What a rush! The wind roared past my ears and the coolness in the air kept my nipples hard as I zipped along, enjoying the rush of the downhill ride - and the surge of my first orgasm. The balls in my cunt were being squeezed by my contracting muscles, and the top one pressed hard against my g-spot. My pussy wouldn't stop contracting and I was on the cusp of another orgasm, only I didn't think I would be able to maintain control any longer. The urge was building quickly and I decided to hit the brakes. I would wreck my bicycle at the rate I was going. I stopped at a familiar spot in a wooded area with a bench. \"This bench and I have history,\" I thought to myself, grinning. \n\nI parked my bike and as my leg swung over the side, it hit me hard. The top ball moved just enough to press my soft, g-spot just perfectly, sending another mind-melting orgasm through me. I gripped the back of the bench and knelt on the seat, cumming hard, soaking my leggings even more. If anyone passed me, they would probably think I was injured as I moaned and howled in ecstacy. I was being such a naughty slut. I kept wishing for someone with a big, thick cock to stop and fuck my throbbing cunt, right here on this bench. Thinking of being filled with a creamy load of cum started the rise towards another orgasm. I reached into my panties and felt my very wet, swollen clit with my middle finger. With only a few flicks of my fingernail, I was convulsing again in ecstasy. I had forgotten how explosive, and rapid my orgasms were with my balls. My clenching muscles held them snugly in place. \n\nThe orgasm finally tapered off, and I was able to sit down to catch my breath. I sat on the bench panting with drool running down the corner of my mouth. I was sweating hard and completely soaked. My pussy wanted more. I looked around and no one was visible on the trails, so I propped each foot on the bench and reached into my panties. Two fingers slid easily into my needy, wet cunt and the tips met the lower ball, deep inside. I played with it, and pressed it gently, moving both of them inside my hot tunnel, making myself moan and shiver. I spread my fingers a little wider and began to fuck myself. The squish of my juices was audible over the breeze and singing of the birds. With my other hand, I reached under my shirt and squeezed my left nipple hard, spraying milk into my shirt and not caring that I was making a complete mess of myself. I finger fucked myself hard and fast, pushing the lower ball with each thrust. My milk sprayed into my shirt with each pinch of the nipple. I was soaked at both ends and loved every second of it. Finally the tingle began to grow in my belly and I knew I was close to cumming. I shoved a third digit into my hungry cunt and fucked hard and fast. My head dropped back and my orgasm burst out of my pussy, saturating my leggings with squirting, warm juices. I was moaning hard and could not stop cumming. My pussy was sloppy wet with cum, my lips sliding wetly around my hand. When my insides were too sensitive to withstand being fucked, I cupped my cunt and mashed my clit into my palm. \"One more cum. I need another. I'm a dirty fucking whore,\" I told myself. \n\nIn less than a minute, I felt my cunt squeezing the balls tightly and I came once more over the palm of my hand. My body shook so hard, and every nerve ending was firing. The balls needed to come out or I would not stop cumming! Slowly, I reached in for the string and pulled the first ball out. It was coated in creamy, white juices. The second was even creamier. I marveled at the sight of them before taking each into my mouth and cleaning them, tasting my own juices. They would have to sit in my pocket until I could properly clean them at home. I was in no condition to ride just yet. My hair was plastered to my face, and I had sweat dripping from every pore. I sat back on the bench with my legs spread wide, and my shirt lifted over my tits. Imagine the sight a passer-by would catch - sadly no virile cyclist arrived, and I giggled to myself about what I had just done. I was such a naughty whore, cumming all over this park bench."
    ],
    "authorname": "sally_sparrow",
    "tags": [
        "ben wa balls",
        "masturbation",
        "public",
        "public masturbation",
        "toys"
    ],
    "category": "Toys & Masturbation",
    "url": "https://www.literotica.com/s/bike-ride-12"
}
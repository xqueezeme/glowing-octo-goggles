{
    "title": "Relatives from Out of Town - A Hall",
    "pages": [
        "I think the wee folk are playing with me, but this is the story the Pixies gave me for this year's Halloween specials. It rolls some Celtic traditions in with some other traditions from the old times to present a tale of a witch who isn't really a witch... except that she is.\n\nI'm putting it in the Humor category because it doesn't really fit anywhere, and that is the closest.\n\n= = = = = = = = = = = = = = = = = = = =\n\nWARNING! This warning is not needed for this particular story, but I am including it because it is needed for most of my stories. If you decide to read other of my stories make sure that you read the disclosures and warnings at the beginning of each story.\n\nAll of my writing is intended for adults over the age of 18 ONLY. Stories may contain strong or even extreme sexual content. All people and events depicted are fictional and any resemblance to persons living or dead is purely coincidental. Actions, situations, and responses are fictional ONLY and should not be attempted in real life.\n\nIf you are under the age or 18 or do not understand the difference between fantasy and reality or if you reside in any state, province, nation, or tribal territory that prohibits the reading of acts depicted in these stories, please stop reading immediately and move to somewhere that exists in the twenty-first century.\n\nArchiving and reposting of this story is permitted, but only if acknowledgment of copyright and statement of limitation of use is included with the article. This story is copyright (c) 2018 by The Technician.\n\nIndividual readers may archive and/or print single copies of this story for personal, non-commercial use. Production of multiple copies of this story on paper, disk, or other fixed format is expressly forbidden.\n\n= = = = = = = = = = = = = = = = = = = =\n\n* * * * * * * * * * * * \n\nIt all started when cousin Bridget made her prophecy. Bridget has always been a very weird little girl. Perhaps I should say she has always been a very weird... and very little... girl. Aunt Nora used to say that Bridget must have been kissed by the Fey as she drew her first breath. \n\nShortly after Bridget started talking, she began telling everyone that she would remain a child forever. Then, at about age seven, she just stopped growing. She didn't seem to get any older mentally and she didn't get any bigger physically. Everything just stopped. They took her to all sorts of doctors and did all sorts of tests, but no one could explain what had happened. They tried growth hormone shots and several experimental procedures, but Bridget continued to remain a small child... just as she had said she would.\n\nBut that wasn't all. Shortly after she stopped growing, Bridget started having these \"fits.\" She would freeze up-- sometimes in the middle of a sentence-- and then say something really weird in a really strange, high-pitched voice that was almost a squeak. Once, when we were at Grandma O'Rourke's for a family reunion, right in the middle of dinner, she froze up and said, \"Mham\u00f3 you have such a beautiful house with such beautiful things. It's too bad that it will all burn tonight.\"\n\nWe all laughed it off-- sort of-- but then right after midnight a severe thunderstorm suddenly brewed up. The lightening and thunder was almost continuous. Everyone was awake and looking out the windows when suddenly Bridget began screaming in that high-pitched voice, \"Everyone downstairs, NOW!\"\n\nThat we couldn't laugh off. We took off running. Grandma was the last one to come down the stairs. She had barely made it into the living room with the rest of us when two huge bolts of lightening struck the house almost simultaneously. It was like an explosion as windows broke and pictures fell from the walls. The air inside the house turned blue for what seemed like at least a minute or two and an acrid taste filled our mouths. Then everything was orange with fire.\n\n\"The barn!\" Grandma yelled. \"Everyone run for the barn.\"\n\nWe were all standing in the big doorway to the barn watching the house burn when the fire trucks arrived. The fire captain ran up to us and yelled, \"Is everyone out of the house?\"\n\nGrandma O'Rourke smiled at him and said, \"Yes, our sweet little sprite warned us it would happen and we were all downstairs when the lightening hit.\"\n\nBridget looked up at her and asked in her innocent, tiny little girl voice, \"What did I do, Mham\u00f3?\"\n\nLittle Bridget, as most of the world calls her, is always totally unaware of what she says while she is \"away.\" That is frustrating for her. When people are staring at her in shock, she will often ask in a troubled voice, \"Was I away again?\"\n\nIt's doubly frustrating, however, for the person to whom she gives the prophecy. Her words are often ambiguous and the true meaning is hard to comprehend. And it doesn't do any good to ask her what she meant, because she doesn't know what she just said.\n\nIt is triply frustrating for me because last week she walked up to me in the grocery store and said, \"This Night of All Hallows, before the sun comes up, a true witch from the old country will cast a spell over you and take you as her eternal lover. Every Night of Darkness on the Mountain, she will summon you to her bed so that she may produce children.\" She then smiled at me and skipped off as if nothing had happened.\n\nSome people would just laugh that off. Even some Irish named O'Rourke might shake their heads and not believe. But I know this child. I know that she is little Bridget of the Fey. And as far as anyone can remember, she has never been wrong in any of her predictions or prophecies. What she said meant only one thing, a witch was after me.\n\nLike I said, it doesn't do any good to ask Bridget for more details because she doesn't remember what she said. All I knew was that a witch from the old country was coming for me on Halloween and would force me to make love to her every Halloween FOREVER.\n\nI knew that having to take an ugly old hag to bed would really take the joy out of Halloween for me for years to come, so I immediately started planning my defense. Bridget may have never been wrong, but that didn't mean I couldn't change things.\n\nAfter a lot of thought, I came up with a really simple plan. All I had to do was make sure that there were no real witches, goblins, wee persons, members of the Fey, or any other truly magical creatures anywhere near me this Halloween.\n\nI know, that is easier said than done because any of those magical beings could disguise themselves as something else and I would never know, but there is a witch up on the crag overlooking town who owes me a favor. I don't trust her, and I'm not going to get into what I did for her, but she owes me. So, if I made my request totally and absolutely clear so she couldn't make it do something I didn't want, she would have to grant me what I needed.\n\nI spent almost a whole day figuring out exactly what to ask and exactly how to say it. Then I headed up to see Granny. I don't know her real name, no one does, but everyone in the town calls her Granny. I went walking up the path to the crag just as the sun was setting. A lot of folks avoid the mountain when the sun is low, but I knew Granny would be around then, probably out back of her shack gathering herbs or maybe brewing something up in her small cauldron.\n\nI also knew it would have been a lot less scary to go see her in the daylight, but I don't know that anyone has ever seen her in the daylight. For that matter, I don't of anyone who has ever found her shack with the sun shining on it.\n\nShe was out back leaning on the fence watching me walk up the path. \"Hi, Granny,\" I said as I approached. \"I need a small favor.\"\n\n\"Ye've earned more than a small favor, Bobby, me boy,\" she replied in her raspy voice. Just as everyone calls her Granny, she calls everyone-- boy or girl-- Bobby.\n\nI started to explain what I wanted, but she held up her hand to cut me off. \"I canna' give ye exactly what ye want,\" she said slowly. \"You want to be able to see someone for what they truly be this Halloween night. No matter what disguise or concealment a person-- even a magical person-- might have, ye want to see through it an' see the real being.\"\n\nI gave a deep sigh of defeat. She had stated it exactly as I had planned but said that she couldn't do it.\n\n\"I had hoped you had that kind of magic,\" I said slowly. \"I guess even you aren't that powerful.\"\n\nShe began laughing and soon the laugh dissolved into a cackle. \"I dinna say I wasn't powerful enough,\" she finally said. Then looking at me with her lopsided smile, she said firmly, \"I be too powerful.\"\n\nI looked back at her in shock and confusion.\n\n\"I can gi' ye that power,\" she said in her aged voice, \"but it would take powerful magic that cannot be limited to a single night. If I give it to you, it is yours forever.\"\n\n\"Then I would always be able to see someone for what they truly were?\" I asked.\n\n\"Be careful what ye wish for,\" she said quietly. Then she held up a small bottle and said. \"But if that is what ye truly want, drink this and thine eyes shall be opened.\"\n\nI pulled the stopper out of the bottle and wiggled it toward my nose. It smelled awful... more than awful. It was the kind of smell that your nose refuses to recognize. Instead all smell and taste shuts down and your entire body screams at you, \"Don't drink that!!!!\"\n\nMy mind overruled my body. I tipped the bottle to my lips and emptied it in one gulp. That was followed by several more gulps and gasps and coughs as I tried to keep my stomach from hurling the foul mixture back up onto the ground.\n\nWhen I had finally regained control, I was on my knees facing back down toward the town. I stood up and turned around. Granny was gone. In her place was a young, beautiful, naked woman. She smiled at me in an embarrassed way and said, \"People expect witches to be old hags who talk like pirates from the movies.\" She shrugged and said, \"They find that more acceptable than...\" she reached around to hold up her pointed tail.\n\nIt wasn't until then that I realized that her skin was a deep shade of red and there were small red horns peeking out of her coal black hair. Her eyes were a brown so deep that they almost also looked black. Between her legs was a neatly trimmed patch of extremely curly, extremely black hair covering her sex.\n\n\"You wanted to see,\" she said once my eyes finally returned to her face.\n\n\"Are you a demon?\" I asked. I could hear more than a little fear in my voice.\n\nShe again laughed. This time it was a normal, almost musical, woman's laugh. \"No,\" she said, \"I am not a demon. I am a spirit of the woods and the hills who can take on physical form once the sun has set.\"\n\nShe gestured down at her body and said, \"Unfortunately, your ancestors chose this form as the image of their evil one.\"\n\nShe paused and then said, \"I think it is time for you to return to your home.\" As I turned to leave she said, \"You have the sight. But remember this...\" I turned to face her once again and she continued slowly, \"... even when you can see the real being, you may not be seeing what they truly are.\"\n\nI nodded my head and turned once again toward the trail down the hill. After I was far enough away so she couldn't hear me-- I hoped-- I muttered loudly, \"I hate magical beings. They never tell you the whole story and what they tell you is always hidden in rhymes and riddles.\"\n\n\"I heard that,\" a voice called from above me. She laughed again and said, \"And it is all true.\"\n\nBy the time I had walked home, I had discovered that a witch, two fairies, and a ghoul all live near me. The ghoul works in the local flower shop. Everyone in town thinks he's gay. Maybe he is, but, if so, he is a gay ghoul.\n\nThe plan, at least so far, was working. I could tell if a disguised witch or any other magical creature was sneaking up on me. Now all I had to do was to be somewhere with no witches, goblins, wee persons, members of the Fey, or other magical beings anywhere near me. After what I had seen walking home, that might be a bit harder to arrange than I first thought.\n\nThen I remembered Kevin. Kevin also owed me a big favor, and more importantly, Kevin was rich... extremely rich. I knew that Kevin loved Halloween and that every year he would have this fabulous party at his lake house. If you were one of the lucky ones, you might get invited out onto his \"party barge\" for a moonlight cruise on the lake.\n\nThe barge-- named \"Victory\"-- was actually a large yacht with an expansive flat deck and several cabins below where Kevin and his friends would stay when they were out on the lake for extended periods. In some ways, Victory looked like a miniature aircraft carrier. I think Kevin had even landed his helicopter on the upper deck when he needed to arrive late or leave early from their summer cruises, but there was no way a plane had enough room to land.\n\nRumors were that the moonlight cruise was a floating orgy, but I have never even attended the main party at the house, so I couldn't say for sure. What I did know is that \"Victory\" was moored at the end of a long dock. Getting on the barge wasn't really an invitation. It was more of a selection process like at the doors of a really posh club. First you got invited to the party itself. Then, as it got close to dark, you walked up to the shore gate for the dock. If the guards opened the gate for you, you were in. If not, you walked back up to the main house and rejoined the party there. The guards, obviously, didn't make the decisions on their own. Kevin was watching through the security cameras and signaled yes or no to the guards.\n\nIt was a perfect plan. If I could get Kevin to allow me to veto any of his selections, then I could be sure that no magical creatures got on board... maybe. Granny's words about seeing someone but not knowing what they truly were worried me. But Bridget had specifically said that it was a true witch from the old country. If I said no to anyone who looked Irish, I should be safe.\n\nI was hoping for a very chilly Halloween that might keep the interest in a moonlight cruise down a little, but it was a warm evening when I arrived at Kevin's mansion. I was early, but I wanted to be aboard the \"Victory\" before sunset-- and before anyone else so I could be sure that only those I felt safe with were allowed on board.\n\nI have no idea what was going on up at the main house, but I assume it was a fine party. Several times, guests came wandering out into the back yard to talk, or to seek some privacy among the trees. I kept a careful eye on everyone. I could tell immediately if a person were a magical creature. If I concentrated, I could see what they looked like beneath their masks and makeup. If I concentrated a little harder, I could even see what they looked like beneath their clothing.\n\nAs the evening wore on, I discovered several things. One was that there are more magical creatures around us than I ever imaged. Another is that some cross-dressers look really nice even in very skimpy clothing. The man who hustled the naughty nurse in the almost nothing costume into the shadows came back with a smug smile on his face, probably after a blowjob. I wondered what he would be looking like if he had seen what I could see.\n\nClose to midnight, Kevin and his entourage came walking down from the house. I used a pair of binoculars to carefully scan him and everyone who was with him. None were magical creatures, but the slightly older woman dressed in a full, Halloween-style, witch's costume with black skirt, pointy hat, and everything was packing. She had two pistols strapped to her waist, a small one at her ankle and another up between her shoulder blades. There were also at least a half-dozen knives strapped here and there on her arms, legs, and body.\n\n\"Do you know that the old witch is packing serious heat?\" I asked Kevin through his earpiece.\n\nHe laughed slightly and turned to look over at the witch. \"She'd better be,\" he said. \"She's my head of security.\"\n\nI went back to checking out the mob of people following Kevin to the boat. \"I don't know how you can see it,\" his voice said over the speaker, \"but please say 'No' to anyone other than Dame Alice... and my guards... who is carrying.\"\n\nI smiled. Maybe I would come out of this on the plus side of favors owed after all.\n\nI said 'No' to anyone with red hair, anyone who looked like anyone in my entire extended family, any magical creatures... and, of course, anyone carrying weapons. One succubus looked directly at me and hissed. I know she saw me watching because when she hissed, smoke came out of the tips of my binoculars.\n\nI was really tempted to let the Fey come aboard. She was wearing a Tinkerbell costume, but everything, including her rapidly-beating transparent wings, was real. She had evidently used an enlarging spell on herself. She also knew what I was doing, but just stuck her tongue out at me and then laughed as she dragged her partner toward the darkness of the trees.\n\nAt exactly midnight, the Victory's horn gave three loud blasts and we cast off. We were not scheduled to return to the dock until morning, so, if my plan was working, I was safe.\n\nI couldn't hide on the bridge forever, though. Besides, the captain had been pretty emphatic that once we were underway he didn't want anyone other than crew on the bridge. I had no real choice but to go to the party.\n\nI had given a lot of thought to my costume. I originally thought of going as a Leprechaun, but since I stand a little over six feet tall, I didn't want to put up with \"Aren't you a little tall to be a Leprechaun?\" all night. I thought of doing something from Star Wars, but Chewbacca suits are horribly hot and if you go as a storm trooper, no matter what size you are, you have to put up with \"Aren't you a little small to be a storm trooper?\" I finally decided to stick with an Irish persona and went as Merlin the Magician.\n\nI know that Merlin is Welsh, but Welsh and Irish are both Celtic, so it's all in the same family. Besides, the Merlin robe allowed me to wear just a swimsuit under it so if things started to go south, I could dive overboard to escape whoever was after me.\n\nSometimes rumors are based on facts. When I stepped out of the captain's bridge and onto the deck, it looked like someone was expecting us to have to abandon ship. At least it looked like there were several dozen life rafts inflated and ready for use scattered around the deck. When I looked a little closer, however, I realized that these weren't rafts at all, but instead inflatable mattresses which were scattered around, ready for a somewhat different use.\n\nI'm not an exhibitionist. In fact, I'm a little shy, especially when it comes to public sex. I was trying to figure out what to do when a soft voice next to me asked, \"Would you please help me get down to the lower foredeck?\"\n\nI turned and Glenda, the Good Witch of the North, was standing next to me. The costume was perfect and she even had the high-pitched voice and giggle exact.\n\n\"What do you mean?\" I asked.\n\n\"I can't make it down the ladder,\" she said sweetly. On a ship all stairs are called ladders, but the one from the upper deck to the open lower foredeck was truly almost a ladder. Unless you were really agile or limber, you had to turn and go down it backwards.\n\n\"If I try to go down backwards, like you are supposed to,\" she said, \"my skirt catches on my heels in the back.\" Pointing at the ladder, she continued. \"And if I pull my skirt around from the back, it twists everything up in the front so it will tangle my feet or cause me to step on my dress and the ladder at the same time.\"\n\n\"What do you want me to do?\" I asked, trying to be as helpful as I could to this blond, blue-eyed beauty.\n\n\"If you could go down before me,\" she said, \"and lift the back of my skirt so my heels don't catch, I can get down the ladder.\" She smiled and added in her silvery voice, \"Then you can join me for a drink while we watch the waves sparkle in the moonlight.\"",
        "I nodded my agreement and headed for the steep stairway. I went down and then turned around. She was at the top of the ladder. I had to step up one step to be able to grab the hem of her dress and the many layers of petticoats beneath it.\n\nI pulled slightly back on the hems and she started down the ladder. As she did, I stepped down until I was on the deck. At that point her dress was starting to be pulled farther and farther out from her body revealing everything that was underneath. Her legs were as beautiful as her face and they went all the way up to a tiny pair of white panties which covered none of her ass and barely covered the area between her legs.\n\n\"I think you can let go now,\" she said sweetly, but a little louder than before.\n\nI suddenly realized that she was standing on the deck in front of me and I was holding the back of her dress about half-way up to her waist.\n\n\"Sorry,\" I stuttered out. \"I... I... I...\"\n\n\"You looked up my dress, saw my ass, and froze,\" she said, smiling at me. Then she said, \"You are such a sweet boy. Come have a drink with me.\"\n\nThere were tables set up on the lower foredeck and one was empty right over the bow. I offered to get the drinks and she told me what she wanted. She was seated at the table by the time I got back from the bar.\n\nAs I sat down, I looked into those huge, blue eyes and said, \"You're not Irish, are you?\"\n\nI immediately wanted to kick myself but she just gave one of her silvery laughs and said, \"No, I'm from Sweden. My name is Merga. I'm visiting some friends for the holidays.\"\n\nThen she looked at me and said, \"You're Irish, though, aren't you?\"\n\n\"Full blood,\" I answered. \"Well, as full blood as anyone can be.\"\n\n\"Any witches in your family?\" she asked.\n\n\"No,\" I answered warily, \"but I've got a cousin whose been kissed by the Fey. Why do you ask?\"\n\n\"Irish and their Halloween witches get on my nerves,\" she said almost angrily. \"They think they invented witchcraft and everything has to be exactly as it was when Merlin walked the earth or when the Celtic Queens called forth their armies to battle the Romans. It's as if Walpurgis doesn't even exist.\"\n\nI chuckled. \"I've got a couple relatives who are like that,\" I said. \"But I'm a little more open minded.\"\n\n\"Enough about witches and goblins,\" she said firmly, taking a sip of her drink. \"Sit next to me and watch the waves.\"\n\nI scooted my chair over next to hers. I had to shift the table slightly so we were alongside each other facing over the bow. After a few minutes, it was as if we were alone together, skimming over the waves. I felt her hand on my leg, softly stroking me through the thin fabric of my costume. I found myself stroking the front of her breasts above her heavy dress. Then we were no longer watching the waves, but were locked in a long, long, kiss.\n\nWhen we finally came up for air, she said softly, \"I think things would be a little more private in one of the cabins.\"\n\n\"They're probably all in use,\" I answered glumly.\n\nShe held up a key and said, \"Not all of them.\"\n\nI followed her through the hatch behind the ladder and down the narrow hallway to the stern. She put her key in the last door on the port side and opened it. Then she gave me a smile and one of her silvery laughs and stepped inside.\n\nThe room was small, but well-furnished. The bed appeared to be almost queen-sized, but seemed shorter than normal. I pulled down the covers while she stood in the narrow space alongside the bed. \n\nAs I lifted the magician's robe over my head, I said, \"My costume is a little easier to get out of than yours.\"\n\nShe just laughed again and said, \"Men\" with a slight huff. She then slipped the sleeves over her arms and pushed down on the large hips of the costume. The whole thing slid off her and she stepped out of it. She was now standing there in just her tiny pair of white panties.\n\n\"Why don't you take off your swimsuit?\" she asked. \"And then you can slide my panties down my legs.\" After a pause and another smile, she added, \"I think we will both like that.\"\n\nI hurried to do what she asked. My swimsuit was on the floor in an instant and then I knelt in front of her and began to slowly slide that small triangle of white down her legs. Kneeling where I was put my eyes even with her sex which was covered with a very fine down of very wavy blond hair. In fact, the hair was so fine that her labia and clit were as visible as if she was totally shaved.\n\nMy nose was also even with her sex. I could smell her, but she didn't smell like any other woman I had ever been with. Maybe she used a special perfume down there. Or maybe Swedish women smell different than Irish women.\n\nShe reached down and lifted up on my hands so that I would rise from my knees. As we stood up, she pulled us both over onto the bed. We kissed fervently. I suckled at her pert, pink breasts while she moaned in joy. Somehow, even her moans were light and silvery.\n\nShe didn't object when I trailed kisses down her stomach and began to lap at her labia. Her moans became even more high-pitched and silvery as I slid my tongue between her nether lips and nibbled lightly at her clit.\n\nWhen she started to buck in passion, however, she pulled me upward and said, almost hoarsely, \"Enter me.\"\n\nI lined myself up on her more than ready pussy and pushed myself in. Soon she was matching, and more than matching, my thrusts as we took each other higher and higher and higher. I thrust one last time into her and shuddered as I erupted. She clutched me tight and gave a very loud, very deep, groan. Then we both lay still.\n\nI must have fallen asleep on her breasts-- or passed out-- because the next thing I knew it was morning. I lifted my head slowly and said, \"Sorry about that. That's never happened before.\"\n\nThen I realized that I was lying on the lower foredeck near the bow. Kevin was standing over me. I pushed myself up so I was sitting on the deck.\n\n\"Are you OK?\" he asked. \"I checked the security videos and saw that you came down here with Little Bo Peep.\"\n\n\"Glenda, the Good Witch of the North,\" I answered in a slurred voice.\n\n\"Well, whoever she was,\" he said firmly, \"she evidently spiked your drink. You sat with her at the bow for a while and then put your head on the table. She got up and rubbed your head for a few minutes and then you both disappeared.\"\n\n\"Where'd she go?\" I asked. My head was clearing rapidly but I was starting to get a really bad feeling deep down.\n\n\"Like I said,\" Kevin answered with a shrug, \"you disappeared. You both faded out of the picture. One minute you were here and the next you were gone. When it got light, the guards found you lying here on the deck and we checked the tapes.\"\n\nHe shook my shoulder as if trying to wake me up and asked, \"Did she say who she was?\"\n\nI shook my head trying to clear the cobwebs. \"I think she said her name was Merga,\" I said slowly. \"She said she was from Sweden.\"\n\nI shook my head again and muttered, \"She seemed pissed that the Irish don't care about wall plugs or something like that.\"\n\nKevin's head of security, still wearing the witch's costume suddenly grabbed me by the shoulders and turned my entire body around so that I was facing her. \"Did she say Walpurgis?\" she almost yelled at me. \"Think!\" she said loudly. \"Was it Walpurgis? This is important!\"\n\n\"Yeah, yeah,\" I said, trying to stand on my feet, but dropping instead into a chair, \"it was Walpurgis. And she said her name was Merga.\"\n\nThe witchy security head turned to Kevin and said, \"Merga Bien... at least she wasn't after you this time.\"\n\n\"She's a witch isn't she?\" I said, trying not to cry. \"At least she isn't ugly. Maybe next Halloween won't be so bad after all.\"\n\nKevin stooped down so he was face to face with me. His whole body was tight like he didn't want to say something. Finally he let out a deep breath and said, \"I don't think you have to worry about next Halloween. But I would be worried about next April thirtieth. That's Walpurgis night. It's sort of like a Swedish Halloween. They say that on that dark night, the witches dance on the mountains. Some even call it The Night of Darkness on the Mountains.\"\n\nI was now fully awake and standing straight up. That's what Bridget had said, The Night of Darkness on the Mountains. \"What if she isn't really beautiful?\" I screamed out. \"What if I end up having to make love to an old hag every year for all eternity?\"\n\nFor just a moment, something like a large soap bubble appeared behind Kevin's shoulder. \"I really am beautiful,\" a silvery voice said loudly. No one else moved, so possibly I was the only one who could hear it. \"And after last night, I think I may have changed my opinion of Halloween. Maybe I will come to your party... or whatever... next year, too.\"\n\nI dropped back into my chair. The soap bubble drifted over in front of the table, \"And I've been told that the Winter and Summer Solstices are rather enjoyable, too.\" The bubble then popped and disappeared.\n\n\"She will tire of you eventually,\" Kevin said quietly.\n\nI looked at him in shock as he continued, \"But she holds no grudges when you leave. She even lets you keep the perks of the arrangement.\"\n\n\"Perks?\" I asked, trying to keep my voice sounding at least somewhat natural.\n\n\"Wealth... immortality... eternal youth... the sorts of things you need to keep her happy for a long while.\" he answered with a smile.\n\n\"How long?\" I asked.\n\n\"Well, let's put it this way,\" he said with a chuckle. \"There have probably been one or two since me, but before I met Merga, I was pulling an oar with about forty other Norsemen as we sailed south to go Viking along the English coast.\n\n\"Oh,\" I replied. Then in a much more positive tone of voice I asked, \"Can Merga and I come to your party next Halloween?\"\n\n\"I couldn't stop her if I wanted to,\" he replied, again laughing softly.\n\n\"Will you keep our cabin open for us?\"\n\n\"Which one?\"\n\n\"Last one on the port side,\" I answered and he began laughing very loudly as did his head of security.\n\n\"What's so funny?\" I asked angrily.\n\n\"That's the engine room,\" he said, still laughing. \"But I'm sure it will be available for you and your little Swedish witch if she wants it.\"\n\n = = = = = = = = = = = = = = = = = = = = \n\nEND OF STORY\n\nPlease remember to vote \n\nby clicking on one of the stars at the end of the story. \n\nIf you really liked it, click 5. \n\nIf you really hated it, click 1, but please click something.\n\n= = = = = = = = = = = = = = = = = = = ="
    ],
    "authorname": "The_Technician",
    "tags": [
        "halloween",
        "walpurgis",
        "magic",
        "consensual sex"
    ],
    "category": "Humor & Satire",
    "url": "https://www.literotica.com/s/relatives-from-out-of-town-a-hall"
}
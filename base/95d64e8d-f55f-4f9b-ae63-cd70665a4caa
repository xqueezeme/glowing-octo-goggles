{
    "title": "How to Eat Pussy (Instructional)",
    "pages": [
        "This is the best way to give a girl head. This is less of a story, and more of a, how to, public service announcement.\n\n1 Ask\n\n\u25cf Say, \"is it cool if I give you head?\"\n\n\u25cf Play a game: I give you head for 10 mins, you give me head for 10 mins. And then set a timer.\n\n\u25cf Be more vocal and communicative.\n\n2 Kiss your way down her body\n\n\u25cf Put the girl's butt under a pillow.\n\n\u25cf Touch everything\n\n\u25cf Match your breath to hers: breath when she breaths, moan when she moans.\n\n\u25cf Kiss and noble at the inside of her thighs.\n\n3 Kiss her sex, and then suck.\n\n\u25cf Place your mouth to the outside and suck.\n\n\u25cf DONT EAT PUSSY, SUCK CLIT.\n\n\u25cf Shape your mouth like you are eating a price of fruit and are trying to keep the juice from spilling out.\n\n\u25cf Use your tongue as the bottom half of the suction. Suck her between your tongue and upper lip.\n\n\u25cf Focus more on the upper part of the pussy lips, where the clit is.\n\n\u25cf\n\n4 Use your hands.\n\n\u25cf Use your off hand, left hand, to spread her upper lips. I usually spread the lips with my thumb and pointer finger.\n\n\u25cf Use a finger, right hand, and insert it and press down in her sex towards her anus. THIS FEELS MORE LIKE FUCKING\n\n\u25cf Always start with one finger. I like to use my middle finger, and then add in my ring finger later.\n\n\u25cf PUSH DOWN AND IN, not sliding in and out. Press the bottom wall of her pussy.\n\n\u25cf Finger down and into her, as you suck her with your tongue and upper lip: Suck + press in and down, stop sucking + pull out a little.\n\n5. Patience\n\n\u25cf Be willing to spend 15-30 minutes here. It takes a while.\n\n\u25cf Hump the bed and stay horny and in it.\n\n\u25cf Look up more: make eye contact. What color are her eyes?\n\n\u25cf Keep rhythm with her breath\n\nExample:\n\nJill and Jackie (ff)\n\nJill and I laid back on her bed and undressed one another as we kissed.\n\nJill's fingers found the elastic band of my Calvin Klein panties and pulled me into her.\n\nI rubbed Jill through her tiny pink panties.\n\nI could feel her wetness and excitement.\n\nJill pulled down my panties, revealing me.\n\nFollowing her motion, I slipped my panties down off my ankles.\n\nJill did the same.\n\nWe were now completely naked.\n\nJill touched me. I toucher her.\n\nI moved my lips from Jill\"s, and nibbled my way down her neck, my lips tracing and tasting her body.\n\nI took my time and kissed each part of Jill.\n\nI kept one hand lightly against her sex as I worked my way down.\n\nI reached her hip bone and pelvis.\n\nI continued my descent.\n\nMy mouth traced down her left hip and thigh.\n\nI kissed the inside of Jill's left thigh.\n\nSlowly, I worked my lips to Jill's mound.\n\nI kissed Jill, my hands running up and down the inside of her legs.\n\nMy lips found the top of Jill's mound, at the crescendo where splits open in two.\n\nMy kissing gave way to light licks and gentle sucking.\n\nI licked and kissed all of Jill's mound.\n\nI used my left thumb and pointer finger to spread Jill against my mouth.\n\nI focused on the top, on the peak, on the zenith; On the place where her tiny button sprouts; On the hidden spring of the woods.\n\nI used my upper lip and tongue to lightly suck at Jill.\n\nJill moaned out and began to breathe heavily.\n\nI matched my breath to Jill's, and breathed heavy into her mound as I gently sucked at her.\n\nI removed my mouth from Jill's sex, found a pillow on the bed, and slid it under her hips.\n\nJill was now bared to me. She was mine.\n\nI sucked at her lightly. Like a cat pawing at a ball of string.\n\nMy right middle finger teased the entrance of her sex.\n\nLet just the tip of my finger enter her.\n\nShe was wet against my finger.\n\nJill began to rock into me, into my face and hands.\n\nI kept my mouth against her.\n\nI forced myself to salivate and let my face be messy and wet.\n\nI let my face be heavy into Jill's mound. I could feel the bones of her pelvis.\n\nI slid my finger in Jill, sucking her all the while.\n\nJill moaned her loudest moan yet: \"Fuck yes, like that Jackie.\"\n\nI kept my finger still inside her.\n\nI humped the bed as I tasted Jill. I couldn't help it, I was crazy horny.\n\nI straddled one of Jill's legs and humped it.\n\nI felt my horniness against Jill's shinbone.\n\nLike a puppy in heat; I just wanted my master to be happy; I just wanted to be a good pet.\n\nI pushed my finger down inside Jill's sex, towards the bed and her anus.\n\nJill was wet against my face and around my finger.\n\nI slid my right ring finger in Jill.\n\nIt joined my middle finger and pressed down and into Jill.\n\nI matched the pressing of my hands with the sucking of my slutty mouth.\n\nJill rocked her pelvis into my face, matching me and my motions.\n\nOne of Jill's hands found the back of my head and pressed me into her sex.\n\nLike a good girl, I kept my slutty lips and tongue to her.\n\nI sucked her rhythmically, taking my time.\n\nMy breath was hot and heavy against Jill's sex.\n\nThere was nowhere I would rather be.\n\nI pressed my fingers down and against the bottom wall of Jill's pretty pink pussy.\n\nJill grinded into me.\n\nThe wetness of my mouth mixed with Jill's.\n\nI sucked Jill in rhythm as my fingers fucked her.\n\nThe ring on my right finger teased Jill's sex. The cold silver added to the sensation.\n\nI looked up and Saw Jill touching her tiny tits.\n\nI looked back down and kept my rhythm.\n\nI kept my face heavy. My entire face, from my chin to my nose, was wet with Jill's sex.\n\nI kept my rhythm as Jill climaxed against me.\n\nHer legs wrapped around my shoulders and her pelvis shuttered.\n\nJill rocked up and down.\n\nLike a good girl, I kept my mouth and fingers against Jill."
    ],
    "authorname": "AnonymousNin",
    "tags": [
        "instructional",
        "how to",
        "cunnilingus",
        "for men",
        "for women",
        "guide",
        "informative",
        "how to get a girl off",
        "how to give head"
    ],
    "category": "How To",
    "url": "https://www.literotica.com/s/how-to-eat-pussy-instructional"
}
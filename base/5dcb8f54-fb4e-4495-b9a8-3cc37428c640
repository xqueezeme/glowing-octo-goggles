{
    "title": "Sneaking a Quickie Ch. 01",
    "pages": [
        "Author's note: Be aware that this is a much shorter story than the typical bluedragon story. Expect more fun than plot in this \"quickie\" of a story.\n\nAt the home of her parents, my girlfriend tells me to sneak into her bedroom for an anal quickie while everyone's asleep.\n\n***\n\n\"Aww, fuck...\" I groaned. I let my head loll back, and then rotated it in a full circle to mimic the circular motion Christina's tongue was making on the mushroom head of my cock. And when she dropped her head, her mouth forming a tight ring around me and lowering down the shaft, my head snapped back up to watch.\n\nHer jet-black hair was in a functional ponytail, and she was still wearing her sexy- librarian glasses. She glanced up into my face while she slurped on my dick, small flames dancing in her irises at the wide smile across my face.\n\n\"Baby, you are so good at that,\" I mumbled to her.\n\nI thanked my lucky stars every day for Christina. We met during our college's freshman orientation, and my shy, nice guy demeanor let her get comfortable enough to let me see her shy, nice girl demeanor. A sweet, innocent romance quickly developed and, over the next two years, built into a beautiful relationship of trust.\n\nEven as her teeth lightly grazed against the ridge of my cock, my trust in her allowed me to take the adrenaline panic and let it feed the ecstatic sensations in my brain.\n\nChristina was a studious, proper girl, doe-eyed with delicate features. She also had a killer body and during two years of sexual experimentation with me she'd become an absolute hellcat in the sack. We made a pact to trust each other enough to admit our deepest fantasies and carry them out, no matter how dirty they seemed or how much they clashed with our strict upbringings. We each had a partner who would not judge, but rather be open minded and willing to try anything once.\n\nShe had been nervous and hesitant when I first asked her to go down on me. But after seeing how much it thrilled me, it was rare that I went more than two days without receiving a fantastic blowjob.\n\nAnd tonight, as her hand gripped my shaft and started jacking, I felt my balls squeeze and then contract, and I was spewing thick jets of cum into the back of her mouth. \"Aw, crap yeah...\" I growled as I fired away.\n\nGiggling around the shaft, Christina swallowed quickly. A few drops leaked out and began their slow descent down her chin. At last, I was drained, and she reached up a delicate hand to wipe her chin.\n\nWhen I caught my breath I lifted her to me and brought her head to mine for a tender kiss. Then I stood her up and told her to take off her shirt while I went to her shorts. I unbuttoned her and slid both her shorts and panties down her toned legs, supporting her waist while she stepped out of them. Then I looked up to see she had taken care of the top half of her body, leaving Christina completely naked, her perky breasts in my face and capped with pretty nipples standing at my attention.\n\nI couldn't resist suckling a breast as I wrapped my hands around her waist and thighs, lifting her straight up and carrying her the few steps to my bed. At the last moment, I tossed her, Christina shrieking for a second as she ascended a few inches and fell the last foot onto my soft mattress.\n\nShe had not yet recovered from being startled when I whipped my own shirt off and dove my head between her legs, sinking my tongue into her moist channel.\n\nChristina was instantly moaning as I tongued her pussy, a familiar sound that spurred me on to eat her out more energetically. She was making little \"oh\" noises, and managed to let out a breathy \"mmm... yes...\"\n\nThe more I worked at her the more she kept panting, \"yes... yes... YES!\" I had added two fingers to the mix, her hips squirmed even more, and her thighs clamped around my ears as she screamed and came.\n\nI drank down everything she had to give me, and then bore down even harder to bring her off again. I'd gone a week already without having sex, and my newly- recharged pecker was screaming at me to bury itself in the spasming folds before me. But the main course would have to wait just a little longer out of my love for Christina.\n\nAmidst my oral attention, I knew exactly how to extract a quick orgasm from her. My expert tongue and lips going to town on her distended clit, and then I began to lick my way down the extremely sensitive skin between her pussy and asshole. Christina bucked into my face, pushing my neck back at the sensation, and then absolutely went nuts when my tongue rimmed her asshole.\n\nHer whimpers and cries filled the air, and when I finally dipped my tongue into the tender hole, Christina's feet planted on the bed and she thrust her crotch at me, forcing my tongue a half inch deeper into her ass while she screamed and climaxed, creaming a fresh load of nectar into my face.\n\nShe kept quaking for another minute, neurons firing seemingly at random throughout her joints until she finally came down and let out a long, breathy moan. After catching most of her honey in my mouth as possible, I got up and wiped my face with the back of my hand before standing up and stripping my jeans off the rest of the way, leaving us both completely nude.\n\nChristina grinned in the afterglow of her climax, spreading her legs and reaching her arms out to me. I clambered onto the bed, dropping my body onto hers and dipping my tongue into her mouth, letting her taste her own orgasmic nectar.\n\nChristina paused to suckle on my tongue, tugging almost too hard. When she let go her eyes danced looking at me. \"Hmm, girlcum tastes so sweet. Maybe I should taste another girl's juices for comparison.\"\n\nI groaned at the mental picture, and she giggled when I attacked her with fresh energy, rolling us both over until we were comfortably positioned missionary style. Christina arched her back, pressing her breasts into my chest while wriggling her hips in search of my dick.\n\nI figured I'd been waiting long enough, and so with careful aim, I thrust forward. I growled as my shaft made its descent deep into Christina's willing body, and she hooked her legs inside my thighs, pulling me even tighter to her until my mushroom head was nudging against her womb.\n\nI was in heaven, making love with my girlfriend while she whimpered and cooed into my ear, urging me on with soft \"fuck me\"s and squeezing my shaft with her inner muscles. \"Mmm... harder... FUCK ME!\"\n\nI started to hammer my body against her, drilling deep down her tunnel with each push and slamming our hips together on each thrust. The more aggressive fucking had the desired effect as Christina began clutching me more tightly, the whimpers louder in my ear before she finally just bit down hard on my shoulder as she climaxed again.\n\nI growled at the pain shooting up my left side, letting it feed my own pleasure and driving me to fuck her even harder in the middle of her orgasm.\n\nI was so focused on my pounding of her that I was caught off guard when she regained control of her limbs and flipped us both over. My pecker slipped out and then I was suddenly flat on my back. And Christina climbed back onto me, shoving my meat inside in one lunge as she picked up right where we left off.\n\nShe rode me as if I was a mechanical bull, howling like she had an audience cheering her on. My eyes flared watching Christina's breasts gyrate with her bucking motions. And then I felt myself getting close, my thrusting motions spilling out of my control and rapidly speeding up.\n\nChristina moaned and simply held on for the ride as I accelerated towards orgasm. My hands were on her hips jacking her light body against me, and I let the palm of my right hand drift across the drum-tight skin of her ass, until my middle finger found her asshole and pressed its way inside.\n\nThe reaction was immediate. Christina's thighs suddenly clamped together and squeezed her pussy tightly around me. She threw her head back and screamed \"Aaaaahhhhh!\" as one final climax ripped through her body, and I was joining her as my jizz erupted straight up in a massive explosion inside of her body.\n\nOver and over I spurted, coating Christina's insides with glob after glob of my sperm. Then at last we were both drained, and Christina's naked body collapsed onto my sweaty chest.\n\n***\n\nChristina and I had a wonderful relationship. We shared a tender love and wild sex. And neither of us gave the other any reason to worry about straying.\n\nNow, we were approaching the Thanksgiving break of our third year in college. My family was clear across the country, and I never went home for the short vacation. Christina's family, however, lived only an hour away. And she had invited me to join her family for the long weekend. Four days, three nights, trapped with the strict parents of my girlfriend. Nowhere to run, nowhere to hide.\n\n\"Nervous?\"\n\nI looked up to see May, Christina's roommate, hovering over me. Then I realized that both of my knees were bouncing uncontrollably. I placed my palms on both kneecaps to quiet their quaking. Calming myself, I looked back up at May's pretty face and for the first time just saw her as a friend instead of the pretty girl I'd been secretly lusting after ever since I met her. It was perhaps the only secret I was keeping from my girlfriend. But it was an innocent attraction, so I figured that as long as I didn't act on the impulse, I was fine.\n\nThen Christina came out of her room, ready to go. She glanced down at me and fished out her car keys.\n\n\"Hey, I can drive,\" I interjected.\n\n\"Honey, you know you can't see ANYTHING in the dark,\" Christina teased me. \"I just want to make sure we have a smooth trip.\"\n\n\"Fine, fine,\" I gave up quickly. My poor night vision was a sore blow to my ego. But at least now I didn't have to worry about crashing on the way to Christine's parents' house. It was one less thing for me to worry about.\n\nBeyond the driving, I wondered at the wisdom of visiting my girlfriend's parents at such a young age. True, we'd been dating for more than 2 years and I could imagine eventually marrying Christina. But every Asian kid knew that you didn't bring a girlfriend or boyfriend home unless you were serious. It was like a test. If a boyfriend still wanted to date you after your parents tortured him, then he was a keeper.\n\nI looked over at Christina's smiling face. I wanted to be a keeper.\n\nMay gave both of us a warm hug just before we left. \"You'll be great,\" she told me. I thanked her, then Christina looped onto my arm and we headed out.\n\n***\n\nChristina introduced me to her parents with a casual, \"This is my mom and my dad.\"\n\nI greeted them formally in Mandarin, and both Mr. and Mrs. Wang were delighted at my proper manners. They offered me tea and we sat down for the inevitable grilling: my major, my family, all the little details of my life that they would use to judge me by.\n\nI spent the next ten minutes explaining my career goals. We continued that with fifteen minutes explaining what my parents did, and the career of my older brother. The elder members of my family reflected heavily upon me, and I was happy to have successful stories to tell Christina's parents.\n\nChristina, meanwhile, quickly bored of the subject and kept glancing around, looking for some excuse to get away. We had already discussed this; I didn't need her around for moral support. \"Where's Amy?\" referring to her younger sister and the last member of the family.\n\n\"She's out with her friends. Probably won't be back until late.\"\n\nUnable to come up with a sufficient excuse, Christina settled in next to me to endure what was to come. The interrogation then continued on me.\n\n***\n\nChristina was sitting close to me on the couch and wrapped an arm behind my lower back in a half hug. Her parents had finally ended their inquisition and left us alone.\n\n\"You did well,\" she told me.\n\n\"Thanks,\" I let out a big breath I didn't realize I was holding, and started to let out the nervous tension in my limbs. I wanted desperately to reach out and pull her head to me for a searing kiss that would do wonders for my soul. But we were still in an exposed location, and could not risk any forms of public affection.\n\nChristina seemed to also resist her urges, and with a gleam in her eye leaned in conspiratorially and whispered in my ear, \"I'll make it up to you. Tonight, after my parents go to sleep, I want you to sneak into my room for a quickie.\"\n\n\"What?\" I hissed in a low voice. My mind raced, imagining both the potential rewards and the ultimate failure. \"What if we get caught? Your dad will execute me!\"\n\nShe shook her head. \"My parents are heavy sleepers, and their room is at that end of the house.\" She pointed off to the far right. \"My room is down that hallway.\" She pointed to the left, and I did realize that the master suite was quite separated from the other bedrooms.\n\nChristina leaned in then and put her lips right against my ear, her hot breath tickling my earlobe. \"I want you to fuck me in the ass tonight,\" she breathed.\n\nI backed my head away and looked at her as if she'd sprouted a third head. But the lustful grin she gave me assuaged my concerns. We had discovered anal sex only a month ago after a year of knowing she enjoyed me playing with her asshole. And I felt a stirring in my cock already at the mental picture. I nodded eagerly.\n\nChristina smiled, then moved her mouth back to my ear and whispered, \"Wait until midnight. I'll crack my door open if the coast is clear.\"\n\n***\n\nIt was 11:45pm when my cell phone buzzed in my pocket and my eyes fluttered open. I huddled under a blanket on the couch, having only slept fitfully for a couple of hours, anxious for the night's activities.\n\nFor the next several minutes as my body fully awoke, I took to staring straight at the ornate clock on the wall, and I felt like it was toying with me as the minute hand got slower and slower. I could swear it went backwards one minute when I blinked. \n\nBy 11:53pm I couldn't handle the suspense any longer and figured it was close enough to midnight already. I slipped off the couch, my dick already fully erect at the night's possibilities. As quietly as possible, I padded to the left hallway, glancing in the other direction to ensure her parents were not up and about.\n\nThe first door I came across was wide open and revealed a hallway bathroom. So I continued down and found the next door, cracked open just enough to allow a sliver of moonlight to peer through.\n\nI peeked inside to see the feminine room, lit only by the moon and decorated in soft purples, which was Christina's favorite color. I felt a little sigh of happiness at finally seeing her bedroom for the first time.\n\nI slipped inside, squinting to see the old posters of Christina's favorite movies, some of which she'd forced me to endure with her on DVD. Quickly I turned and closed the door, wincing at the noise it made when it shut against the doorjamb. The figure on the bed stirred. I assumed Christina had fallen asleep waiting for me as well.\n\nI lifted the covers and spooned in behind her, contouring my body against her relative warmth. She was in the usual loose T-shirt and tight panties. Her jet black hair draped gracefully across the pillow and I softly kissed the back of her head. My left arm slid underneath her pillow to get out my way while my right hand immediately went to Christina's ass, tightly outlined by the sheer fabric.\n\nShe stirred a little more while I stroked her leg and nuzzled her back. After a little more petting of her bare leg she let out a deep breath that seemed to indicate that she was awake and enjoying my touch.\n\nI took that as my cue and slid my hand down between her legs. And before she could react I'd slid the thin strap of her panties to the side and pressed a finger into the moist folds of her pussy. She gasped loudly as my middle finger slipped easily into her tunnel all the way to the knuckle, and then I pulled my hand back so that my wet fingertips could start rubbing at her clit.\n\nChristina's moans were music to my ears, and she began to grind her hips while I continued to finger her. Quickly, I sped up my ministrations, tickling until she came to a small climax, letting out a relieved gasping moan while her thighs trembled. I loved hearing her sweet voice audibly telling me how much she was enjoying this.\n\nWhen she finished, I rotated her onto her stomach, her head pressed into the pillow with her hair covering her. I tugged at her panties to drag them down her legs and off her body while she remained acquiescent to my moves. Then quickly, I stripped myself and then returned to the bed.\n\nKnowing I should not linger too long and desperate to embed my dick inside of her, I kneaded at Christina's firm asscheeks and then pried at her legs to move her into position. She moved readily and got to her knees, sticking her bare ass into the air while burying her face almost directly into the pillow. The hem of her T-shirt began to slide down her back from the angle, and I helped the process along with my hands until her shirt was around her shoulders and I was able to reach my hands down to palm her firm breasts. The nipples were rock hard to my touch, and I tweaked them while my cock came up between her legs.\n\nIn the dim moonlight all I could see was the pleasant shape of her ass and naked back, her pussy hidden by the shadows. With erection in hand I searched around blindly until the tip was able to find her sopping wet pussy. And then placing my other head into her moist folds, I leaned in with my hips and slowly buried my dick inside of wet vaginal tunnel.\n\nI was so horny and engorged with blood, either my dick felt bigger or she felt even tighter than I'd remembered.\n\nReaching my right hand around to her clit again, I flicked at it furiously while I pumped my shaft in and out. Christina moaned a low \"yes... yes...\" before trying to quiet her noises and stuffing her face into the pillow again. I understood the need to remain silent and held back my own grunting while I drilled in and out of her tight tunnel.\n\nAfter a few minutes with my fingers at her love button, I fucked her to a climax, Christina's shriek muffled by the pillow. I carved my shaft inside of her for another minute, making sure it was as saturated as possible by her orgasmic honey.\n\nNow it was time to seize my prize. I pulled out, my erection glistening in the moonlight from the heavy coatings of fluid, and redirected myself at her asshole. She couldn't help but moan loudly into the pillow as the large head began to stretch her asshole wide, and her whimpers almost became too loud before the crown of my cock finally popped through her sphincter.\n\nChristina's body shuddered as my dick penetrated her. And just inside of her ass, I waited for a minute, letting her get adjusted to my pole splitting her in half, until finally her tremors subsided.\n\nOnce she'd calmed down enough, I leaned my hips forward, and then had to fight back a sigh of my own as the supertight tunnel constricted around my sensitive skin and vibrated against my shaft. I was in a dry, hot hell and loving every second of it.\n\nShe let out a new breathy moan as I burrowed deeper and deeper down her chute, and sighed happily once I hit bottom, my pubic hair nestled against her asscheeks. \"Aw, fuck...\" I couldn't help grunting.\n\nChristina didn't respond, but merely settled her knees more properly so that when I pulled back, she began to thrust her hips back to meet me as I drove forward, our bodies coming together with a meaty slap.\n\nOur joining was still hidden in the shadows, but my imagination filled in the most amazing sight of my thick shaft sliding in and out between her perfect asscheeks. I fought to keep quiet, but simply could not stop my low grunts and Christina appeared to get even more turned on listening to me vocalizing while I violated her nether hole.",
        "Very quickly, I felt the sperm in my balls begin to simmer as her tight ass muscles clenched and unclenched rhythmically. My hips began their acceleration to inevitability, and Christina lifted her torso to get fully on her hands and knees as she flung herself back at me as fast as I could pound her.\n\nAll at once, I felt the sperm in my balls reach boiling point, and then I gasped as I distinctly felt the cum race up my shaft. I grunted a quiet, \"Oh, FUCK!\" and then I was blowing my wad into this beautiful ass before me.\n\nShe let out a low hissing \"yesss...\" as she felt the first jet splatter against her insides, and her ass muscles were clenching and unclenching around my vibrating shaft while I continued to pump out my load into her bowels.\n\nI kept thrusting back and forth as my cum shot out to fill up her anal cavity, and finally the last drops had been coaxed out of me to dribble into her chute.\n\nChristina collapsed down onto the bed, and my semi-hard cock pulled out with a wet sploosh. Almost immediately, she was panting with her face back against the pillow. I leaned down and kissed her on the cheek quickly, but she waved me away.\n\nI realized we'd spent too much time and made too much noise already, so I gathered my clothes and got dressed quickly. Christina was already curled up to go back to sleep, so I quietly exited her bedroom and shut the door behind me.\n\nI went into the bathroom to clean up and flush away any evidence. Then, exhausted, I returned to my spot on the couch and fell asleep almost immediately.\n\n***\n\nI didn't get nearly enough sleep by the time I awoke in the morning to the sound of breakfast being made. Mrs. Wang was doing her best to be quiet, but I still woke up. So groggily I worked to put on my polite and respectfully attentive face.\n\nI went to the hallway bathroom to take a shower and brush my teeth, and then returned to the living room. I went to the kitchen to see if I could help out, but Mrs. Wang shooed me away and told me to watch the football game.\n\nA pretty, young girl was the first one to emerge and join us. She saw me and immediately bounced up to greet me. \"Good morning! I'm Amy.\"\n\nI introduced myself, and engaged her in a casual conversation. Amy must have come home after we all went to bed, and she gave me the lite version of her parents' interrogation. After all, she wanted to know what kind of guy was dating her big sister.\n\nI was amazed at the resemblance. Amy looked and sounded just like her sister, with the same friendly personality and killer body. There were only a few slight differences in her face and eyes to tell the difference and indicate that she was a little bit younger, along with her somewhat more naive attitude.\n\nWe chatted for a bit about college life. Amy was a senior in High School still, and right in the middle of college application season. It was scaring her to death, and she said more than once, \"Thanks for your help. Your experience makes me feel much more comfortable about the whole situation.\"\n\nChristina came out then, smiling upon seeing her sister for the first time in months. They greeted each other warmly; the pair of similar giggles sounding like a stereo in my ears.\n\nThey promised to catch up with each other later, but Amy had to go help out their mother in the kitchen.\n\nOnce we were alone, Christina turned so that only I could see her face, and she gave me rather irritated look. \"What the hell happened last night?\" she hissed.\n\nDid I do something wrong? She'd seemed to enjoy our sex romp. My blank face did nothing to mollify her.\n\n\"You were supposed to wake me up at midnight and you never came. Did you set your alarm? Because that was your big opportunity and I'm not sure we'll get another one.\"\n\nNever came to wake her up? Missed opportunity? What the? And in the corner of my eye, just past Christina's shoulder, I saw Amy standing in the kitchen looking at us with a gleam in her eye. Amy caught my gaze, and in a horrifying moment, she smiled and winked at me.\n\nOh, SHIT.\n\n***\n\nNEXT PART 2"
    ],
    "authorname": "bluedragonauthor",
    "tags": [
        "18-year-old",
        "college",
        "anal",
        "quickie",
        "asian"
    ],
    "category": "Anal",
    "url": "https://www.literotica.com/s/sneaking-a-quickie-ch-01"
}
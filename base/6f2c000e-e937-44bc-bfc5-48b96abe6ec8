{
    "title": "Ideal Suburbia Ch. 12b",
    "pages": [
        "This is a series of stories that are a sort of sequel to two text-adventure games. Each installment is a complete story on its own, but for a full understanding, the reader may want to start with Chapter 1.\n\nThis installment is again a fairly vanilla bridge between meatier stories.\n\n+++++\n\n\"Listen, Larry,\" I said to one of my smaller but quite reliable clients as we sat in his office, \"next time I come in to see you, let's do it at the end of the day. We can go have a drink somewhere and go over our performance for you in a more comfortable seat than this damned thing.\" Larry liked to joke that the chairs provided in his office were medieval instrument of torture. They really weren't. They were just shit chairs.\n\n\"Sounds great,\" he replied enthusiastically. Larry didn't control a lot of business, so nobody who called on him spent a lot of money entertaining him, including me. I just thought that he deserved a couple of drinks... and I didn't want to sit in his chairs any more. \"There's a fancy cocktail bar out in the western 'burbs a friend told me about. Mind going there?\"\n\nMy budget for customers like Larry was more like beer and wings at BW3 than fancy craft cocktails, but I told him I'd check it out.\n\nI promptly forgot about checking out the bar and by the time I remembered, a week or so later, I had forgotten the name of it. I pulled up the maps website on my egregiously large-screened office computer and started searching the area where I thought it was, which was out near where I lived. As I scrolled around, clicking on pins, something caught my eye as I transitioned from one commercial area to another. There was a huge, blank, nearly rectangular-shaped area with nothing in it. No roads, houses, or businesses. Nothing. I switched to satellite view and stared. It looked like a farm. I lunged for my drawer and grabbed a ruler. I measured the space, compared it to the scale of the map and did a quick calculation. It was a big ass farm, covering almost 800 acres, including the tree line that completely surrounded it.\n\nAnd it was right there, smack in between two of the nicer suburbs on the western side of the city!\n\nThis was hugely important to me, because I had been planning for months, trying to find a way to build a country club in that area, which had lots of money, and no golf. The hiccup had been that I would have to put together at least 500-600 acres for a top course, club facilities, and enough housing plots to make it work financially. I had begun to despair that there was that much contiguous land left available anywhere closer than 15 miles beyond the city's perimeter interstate, yet here was nearly eight hundred acres in a near rectangle, with a natural stream cutting across the northeast corner, and it was barely three miles from the interstate, and less than a mile from the US highway that served as the main artery into the city.\n\nPlease Lord, let the owner be open to selling! Had there been any crop failures or droughts lately that I missed in the news? There was no information on the map, or online anywhere, that said word one about this farm. Damn.\n\nI printed out a screenshot of the farm for future research and went back to finding the bar Larry wanted to go to. I found it pretty quickly. It was in an old commercial downtown of a village that had been completely absorbed by the city's expansion who knew how long ago. It was not very far from where I lived, and I resolved to check it out on my way home that evening.\n\nI found Two Creeks Lounge to be in a former store-front bank. I could tell it was a bank long ago because the limestone facade still said \"Two Creeks State Bank\" in huge, slightly eroded letters. When was the last time you heard of a state bank, rather than federal? Since I usually leave work early on Wednesdays, I arrived just minutes after the place opened, and I was the first customer through the door, it seemed.\n\nThe seating in what had once been the bank lobby was all deep, leather armchairs around low tables. Booths lined both walls. The ceiling was almost ridiculously high, as if to add an air of grandiosity to this one time small town bank. The bar seemed converted from the old teller counter, was wide, and looked to be of very sturdy mahogany. Behind, the back wall was counter to ceiling shelves, filled with a very impressive collection of bottles. To the left was the old vault, with its door still intact and appearing to be functional. It stood wide open, and you could see inside to even more racks of liquid inventory. Soft jazz played at a low volume.\n\nI mentally filed this place away as a good choice to bring lots of clients besides Larry, and probably for a date as well, given the right woman.\n\nI shrugged off the deservedness of the place and strode over to the bar, easing onto a wide and very comfortable stool. As I did so, a bartender appeared from inside the vault, carrying a box of liquor. She started when she saw me and hastily moved to set the box down where she was going to need it. \"I'm sorry, I didn't see you come in,\" she said apologetically, and I waved it off, replying that I had literally just walked in. \"I'm Sheila,\" she went on, sliding a glass of water in front of me, along with a small, detailed cocktail menu. \"I'll let you look over the menu while I get this box put away. Just wave if you have questions, or are ready to order,\" she went on briskly, before turning to swiftly restock the well and some lower shelves with bottles from the box.\n\nI scanned the menu, but as is my wont, my attention was mostly on Sheila as she worked. She was dressed hipster bartender style in loose black slacks and a white tuxedo shirt with no tie. Old-time garters around her upper arms held her rolled up sleeves well clear of her wrists and any stray liquids. There was a large tattoo of something visible on her right forearm. She was quite trim, thin really, and the loose but fitted cut of her trousers showed little promise for any curves. Her tuxedo blouse was unbuttoned down far enough to show some cleavage, but said cleavage looked like it was trying a bit too hard. It looked squished, betraying a lot of work by a pushup bra.\n\nOverall, I decided Sheila was pleasant enough looking, but not attractive to me, and I set my full attention to the cocktail menu. A few of the offerings looked interesting, but most were more elaborate than I felt necessary. Before I could order, a second bartender entered, still tying her small apron around her waist. She thanked Sheila for setting up, but then issued a number of directives for things that still needed to be done. Sheila pointed me out and then slid off to the back. It was clear who was the boss.\n\nThe Boss observed that I was still perusing the menu, waved at me, and busied herself with shifting around the way Sheila had set up things. This woman was an entirely different kettle of fish. Like Sheila, she was dressed in similar old-time bartender style, but the details of both the clothes and the wearer were dramatically different. Her black pants were loose and flowy below the knee and no where else, showing off a round, sleek, and enticing ass, generous hips, and long legs. Her white shirt was, like her co-worker/subordinate's, unbuttoned to the cleavage display point, but she also wore a tightly buttoned black vest that helped frame that display. The ample size, depth, and separation of what she was showing made it clear that the swell on her chest was all flesh, no push-up underwear. The vest's buttons and the apron conspired to show off that her waist was quite narrow as well. Her hair was curly and black, and framed her rather plain but pleasant features well.\n\nI set down the menu I had not been looking at for some time. She noticed and came over. \"Thanks for waiting,\" she said, leaning over the bar conversationally in a pose that (coincidentally, I'm sure) gave me an even better look down her front. \"I'm Tonya. What can we get you?\"\n\nI introduced myself in turn and ordered one of the more promising cocktails on the menu. Tonya pursed her lips in approval and began to assemble my drink. She was quick, skilled, and her long fingers made excellent, sweeping motions as she stirred. She produced an elegant little glass and strained the cocktail into it, added a lovely, hand-carved citrus peel garnish and slid the cocktail toward me with a smile. \"Let me know if you like it,\" she said over her shoulder as she turned to a cutting board to make some more garnishes like I had just been served.\n\nThe drink was good, but rather smallish. At least it was not $15.\n\nIt didn't take me long to drink, and as I did so, I let my gaze run over the high wall of shelves. Way at the top, I saw that they had a bottle of a hard to find rye whiskey that I particularly liked. I grinned to myself, and finished my cocktail with deliberate haste.\n\nI slid the empty glass forward, and Tonya noticed the movement. She put down her knife and peelers and returned to me leaning over once more. \"What else can I get you?\" she asked.\n\nI considered for a moment, then asked for my go to cocktail, a Manhattan.\n\n\"Sure thing! Rye or bourbon?\" she asked.\n\n\"Rye, of course,\" I smiled.\n\nShe nodded in agreement and asked if I preferred a brand. Without looking up, I named the brand of the bottle I had noticed earlier and asked if she had it available. She craned around to look for the bottle, saw it, and told me that it looked as if they had enough left to make a Manhattan. She then stepped to the end of the bar and slid a library-style ladder on wheels over to nearly right in front of me and began to climb. Looking up at her legs and backside as she climbed was a truly excellent view. I suddenly imagined hopping the bar and stroking my hand upward along one of those sleek inner thighs above me....\n\nAs Tonya began to reach for the bottle, I observed, \"Well, that is quite a sight.\" She paused, then turned atop the ladder, adding some excellent profile views up at her chest to go along with the legs and ass show. She looked down at me with a skeptically raised eyebrow. \"What an incredible selection of liquor on that back wall,\" I smiled blandly up at her. \"No wonder you need the ladder.\"\n\nShe smirked, as if to say, \"well played,\" and as if in payment, she held that arresting pose atop the ladder over me as she replied aloud, \"Yep. The owner is competitive about our inventory. But it ties up a terrifying amount of cash in bottles just sitting on the shelves,\" she added, waving at the collection expansively, and attractively. Then she began to climb back down, the bottle of rye in one hand--an awkward process that seemed to legitimately require more waving of her tush than had been needed on the way up.\n\nWhen she reached the ground, it was if she decided the show was over as she swiftly and expertly assembled my cocktail and slid it toward me, sweeping away my first empty glass at the same time. \"Are you good for right now?\" she asked briskly. \"I need to figure out where Sheila has gone and hidden herself.\" With that, she spun and left toward the back of the building.\n\nThat woman, I reflected, had the art of extracting maximum tips from men down to a science.\n\nI sipped my Manhattan in a peaceful reverie, extending the experience in my mind, but the moment was fully shattered when the door opened to admit a group of chattering older women. Sheila re-appeared to serve them.\n\nI resolved that Larry, as well as other clients, were definitely going to be treated to visits here. I finished my drink, paid the bill, tipped heavily, and exited to the bright outdoors.\n\nGetting into my car, I realized that my route home would take me near the mysterious farm or whatever that was stirring my development hopes. I resolved to explore its perimeter at least on my way. The main surface road from this little old downtown to the next one out from the city actually ran along the south edge of the parcel, so I took it instead of the highway, suffering through the periodic clusters of traffic lights. As I neared the farm, both sides of the road were a series of small to medium-sized housing developments of varying ages. A few of the older ones seemed less deluxe, but most of the homes I could see from the road were relatively new, large, and expensive-looking.\n\nThe road along this route was lined with lots of trees, screening or simply protecting the neighborhoods, but when I reached the stretch where the land parcel was, the trees on that side were denser and much more old growth with lots of underbrush. There was an old, but maintained barbed-wire fence a tree or two in. As I reached the end of the stretch of the farm's frontage on this road, I spied an entrance. It was dirt, but very wide and clearly well-traveled. Beside it were two old mailboxes. There was no signage. I turned in, but stopped immediately. There was a closed gate a few feet in with a sign that simply said \"Posted\". The tree band was actually quite narrow, and I could see the land open up completely just a few yards beyond. The dirt road led off to a small compound of two houses, two farm buildings, and an impressive set of grain silos. But I could still find nothing to give me any idea of how to contact the owner. I might just have to suck it up and walk up to the front door.\n\nI drove on home, lost in thought."
    ],
    "authorname": "Publius68",
    "tags": [
        "ass",
        "cleavage",
        "story",
        "bar",
        "bartender"
    ],
    "category": "Humor & Satire",
    "url": "https://www.literotica.com/s/ideal-suburbia-ch-12b-1"
}
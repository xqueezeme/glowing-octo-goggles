{
    "title": "The Pulse Pt. 08",
    "pages": [
        "I slowly became aware of a beeping sound. It seemed very loud. As I became slightly more aware I heard more background noise, feet walking back and forth, voices raised in discussion, someone crying in pain. I groaned, my head hurting as I moved it slightly.\n\n\"Jake? Oh Jake, can you hear me?\"\n\nWhy was Tina sounding so upset?\n\n\"Jake?\"\n\nI groaned again and I slowly opened my eyes. It took me a couple of moments to focus and then I saw Tina's tear-streaked face close to mine.\n\n\"Oh Jake. ThankyouThankyouThankyou...\"\n\nAnd I was suddenly wrapped in a huge hug.\n\nThere was a sharp jab from something in my forearm and I hissed with pain. I looked down and saw a needle in my arm leading up to a drip of some kind suspended from a metal frame by the bed. Tina must have moved it when she hugged me.\n\n\"I'm sorry Jake!\" She looked very drawn and worried but so relieved.\n\n\"Where am I?\" I croaked.\n\n\"You're at The Royal Berks, Mr Conway, in Accident and Emergency.\"\n\nThe voice came from a middle aged lady in a dark blue medical outfit.\n\n\"You collapsed and after checking that you were breathing your quick thinking friend here drove you to the hospital. And for the last three hours we've been trying to figure out what might have caused you to faint.\"\n\n\"Faint?\" Memory began to return along with a stinking headache.\n\n\"We were getting into the car after the concert. Do you remember?\" Tina was helpfully holding up the t-shirt that I'd bought.\n\n\"Yes, I remember.\"\n\nMy head hurt. I'd used the Pulse. A lot. God my head hurt. Suddenly the most ludicrous thing occurred to me.\n\n\"Tina! We need to get you home. Your parents will be so worried.\"\n\nShe turned to the nurse with an 'I told you so' look on her face.\n\n\"Your girlfriend has called her parents who in turn have called yours. They will probably be here any minute.\"\n\n\"You shouldn't have, I was just tired.\"\n\n\"Tired? We couldn't wake you Mr Conway. You've been on fluids and without availability for an EKG tonight we've just been concentrating on maintaining your vitals. Has anything like this happened before?\"\n\n\"When I get really tired I just need to rest. And I didn't have much to eat this evening...\"\n\nI got a very old fashioned look from the nurse who clearly thought that I was on drugs.\n\n\"Look, I'm feeling fine now. Sorry to have scared you Tina but I'm OK. Nothing a Coke and Mars bar won't fix.\"\n\nI started to sit up and tried to ignore the headache.\n\n\"You need a proper evaluation including a medical history. Please lie down.\"\n\nBetween the two of them and my splitting headache I gave in and lay back. It wasn't long afterwards that a chestnut brown-haired blur flew into my arms. Fiona kissed my face all over reassuring herself that I appeared to be mostly healthy before holding me by my shoulders.\n\n\"Don't you ever do that to me again. Don't scare me like that. What on earth happened?\"\n\nMum and Dad joined Fiona by the bed and also seemed to need to touch me to make sure that I was real.\n\n\"I'm fine, I just fainted or something I suppose.\"\n\n\"Three hours unconscious points to something a bit more serious than low blood sugar, Jake!\"\n\nI looked embarrassed as my parents scolded me for not looking after myself. The nurse quickly pulled my parents aside to get a detailed medical history in an attempt to help me.\n\nFiona finally let go of me and seemed to notice Tina for the first time. Tina had faded into the background when everyone else appeared and looked rather uncomfortable now that it was just the three of us.\n\n\"Fiona, I'd like you to meet Tina. Tina, Fiona.\"\n\n\"Hi.\"\n\n\"Hello.\"\n\nThere was an uncomfortable embarrassed silence and then Fiona surprised us both by hugging Tina.\n\n\"Thank you for getting him here and calling. You must have been really scared.\"\n\n\"I didn't know what else to do. I've only had two driving lessons and wasn't really sure where the hospital was but I knew that it would be quicker than waiting for an ambulance on a Saturday night.\"\n\n\"You drove me here? In my car?\"\n\nThe girls looked at each other and burst into laughter at the surprise and indignation in my voice.\n\n\"You managed to drive him here after only two driving lessons?\"\n\nTina nodded.\n\n\"Wow. You're braver than me. I would have been a mess.\"\n\n\"It seemed like the best worst option,\" Tina shrugged, looking a little embarrassed but with a small smile as she enjoyed the praise.\n\nIt seemed to break the ice and they sat on the bed as Tina told the whole story of what happened at the concert.\n\n\"And that was your first concert experience?\" Fiona asked.\n\n\"And my last. I'm cursed.\"\n\n\"You are not!\" Fiona and I both said at the same time.\n\n\"There's no legislating for idiots,\" said Fiona firmly. \"Just focus on what you've done tonight. You've really helped Jake. Thank you.\"\n\nJust then the nurse came back with a doctor in tow.\n\n\"Mr Conway? I'm Dr Anders. We've had a good discussion and with the uncertainty about what may have caused this we'd like to err on the side of caution and keep you in for the night.\"\n\nMy shoulders slumped. I knew I was just taking up a bed for no reason.\n\n\"And in the morning we can schedule a brain scan to rule out a number of other things.\"\n\n\"No!\"\n\nI must have gone white with fear.\n\n\"I beg your pardon?\"\n\nI had to avoid being scanned at all costs. What would they find? What if they found something abnormal and wanted to experiment on me. What if they reported me as some kind of freak? There was no way that I was putting myself through that. I didn't want to become anyone's experiment. I had to get out of here.\n\nDespite my headache I reached.\n\nPulse.\n\n\"No. You don't need to do that.\"\n\nBlue power flowed briefly.\n\n\"I don't agree to being kept in here when I'm obviously fine. I just have low blood sugar and this drip has obviously helped rectify that. I'm checking myself out.\"\n\n\"It could just be blood sugar...\" the doctor said.\n\n\"So I can check out after all then?\"\n\n\"Yes...\"\n\n\"Now, just a minute,\" said Dad, \"you were just saying that he should stay in overnight.\"\n\n\"He's a healthy young man and he will have people around to look after him. No strenuous activity for a few days and then see your GP for a test to check for hypoglycaemia. Now, please excuse me.\"\n\n\"Hey...\"\n\nBut Dr Anders was gone, heading off to the next ward. I severed the blue thread as he went through the swing doors between the wards.\n\n\"Great, that's all sorted then,\" I said, swinging my legs over the edge of the bed.\n\nThe nurse looked confused but came forward and helped remove my drip. My parents and the two girls were also looking concerned but the way that I'd bounced up from my bed seemed to help and I gritted my teeth through the pain of the headache. And I needed fuel!\n\n\"Any chance of a coke and a kebab?\"\n\n\"There's not much wrong with him!\" Fiona gave me a relieved hug and I wrapped an arm around Fiona's waist with my other arm over Tina's shoulders.\n\n\"Do you want to drive us home, Tina? Via the kebab van if it's still open?\"\n\n\"What?! I can't drive your car?\"\n\n\"You already have. And besides I'm a poor invalid and need to conserve my strength,\" I used my most piteous, quavering voice.\n\nI walked back through the hospital, very happy to have two beautiful women at my side. My grumbling parents followed behind us muttering about how we paid these people's salaries and wasn't their son supposed to get the best possible care?\n\nWe reached the front door and split up as we headed for our separate cars.\n\n\"We'll see you at home,\" said Dad.\n\nFiona and I grinned and waved as my parents headed off and I took another relieved deep breath of fresh air outside yet another public institution. Tina showed us where she'd mostly abandoned my car and protested again at being made to drive.\n\nTina was not a good driver.\n\nBeing in my pride and joy obviously made her nervous and having me as her teacher probably wasn't ideal either. But the roads were empty and she didn't mangle the clutch too badly.\n\n\"I'm sorry, I'm sorry!\"\n\n\"If you apologise once more for stalling then I'm going to tell your father that you were flirting with the whole crowd, flashed your tits at them and nearly started a riot at the concert which is why I was at A&E.\"\n\n\"You wouldn't!\"\n\n\"Try me. Now relax.\"\n\nThe gears grated again and I tried not to grimace. I felt Fiona's hand on my shoulder and her warmth relaxed me. As I relaxed, Tina relaxed and she even managed not to stall again for the rest of the journey.\n\nWe arrived back at Tina's house full of kebab and coke. I felt immeasurably better and just needed sleep. The lights were still on and the worried Lathan's met us out on the drive.\n\n\"I'm sorry that we're late back, Mr Lathan. And for the worry. It looks like Tina saved me this time.\"\n\nTina flushed a little with the praise and started to protest.\n\n\"Nonsense, pet! We're very proud of how you handled yourself. We just need to get you some more driving lessons don't we?\"\n\n\"Thanks Daddy.\"\n\n\"Bye Mr Lathan, Tina.\"\n\n\"Goodbye Jake. I hope to be in touch soon with some news.\"\n\n\"That would be great. Thank you.\"\n\nFiona and I got in the car and drove home. It had been a ridiculous day and I was exhausted despite my unintended three hour 'sleep' earlier on. Thankfully Fiona had zero expectations and after getting ready for bed we simply slipped under the covers. The last thing I remembered was my lovely girlfriend snuggling up next to me.\n\nThe next day I very slowly clawed my way back to consciousness. As I lay there with my eyes closed I felt rested and refreshed. I also realised that I had a major case of morning wood and desperately needed to pee. I checked to make sure that I wasn't going to disturb Fiona and as I opened my eyes I saw only rumpled sheets where she had slept.\n\nI slowly eased myself upright, expecting my movement to trigger another migraine but thankfully the headache was almost entirely gone. I looked at my clock radio and couldn't believe the time. It was one in the afternoon!\n\nI rushed to the bathroom but the door was locked. I knocked.\n\n\"Can you hurry? I have to go!\"\n\nThe door unlocked and Fiona stood there wrapped in a towel ready for a shower.\n\nI rushed in and not trusting my aim with a hard dick I sat on the loo and let go. The relief was immense. It was a few seconds before I looked up and realised that Fiona was laughing at me.\n\n\"Your face is a picture! I don't think that I've ever had to go that badly.\"\n\nI was embarrassed sitting there pissing while she watched. I don't know why but I just was.\n\n\"Sorry...\" I muttered, blushing slightly.\n\nEver sensitive to people's mood, Fiona stopped laughing, as she saw that I was uncomfortable.\n\n\"Jake, don't be silly. I don't particularly want to be in here if you need to poop but there are four of us in this house and only one proper bathroom. Besides...\" and she dropped her towel, exposing her lithe swimmer's figure, \"your parents have gone out shopping. I still need a shower. Would you like to join me..?\"\n\nShe did a little pirouette which did the most wonderful things to her breasts and rear. The pirouette elongated the muscles of her long shapely legs, acting like a pair of high heels to accentuate every aspect. She finished her turn, her hands over her head, pert breasts high on her chest and a naughty smile on her lips.\n\nMy jaw had dropped open watching her, my mouth agape in awed lust. The way I was staring at her I must have looked like all rational thought had left me. All the blood had rushed to the little head and I was having difficulty keeping my dick pointing into the toilet bowl.\n\nShe flashed her pussy at me as she stepped into the bath, looking at me over her shoulder to see the effect her little show was having on me.\n\nI finally finished peeing and climbed into the bath behind her as quickly as I could. She bent down to turn the shower on. I stroked her beautiful buttocks with my hands, loving the feel of them. The water began to flow and she shrieked and jumped back into my grateful arms to avoid the cold water as the shower started.\n\nI wrapped myself around her and my wandering hands each grabbed a solid handful of beautiful breast. My lips started to kiss down her neck making her squirm. She began to grind her arse up against my still hard cock as I mauled her tits. She turned towards me and we kissed long and passionately.\n\n\"I was so worried that I'd lost you,\" she whispered, her eyes full of emotion and concern. She'd been so strong last night that I hadn't realised how worried she'd been.\n\n\"I honestly feel fine. You really don't need to worry.\"\n\nShe kissed me again and then smiled slyly.\n\n\"But the doctor said that you shouldn't do anything strenuous...\"\n\nShe slowly sank to her haunches and grasping my cock pulled me towards her and the now warm shower water. She slowly tongued around my engorged head, licking up and down the full length. Water streamed down her back, her face, her hair. It washed on to me as we both squeezed under the jets and she began to take me into her mouth. I gasped at the warm sensation of being inside her warm wet mouth whilst the shower water flowed around where we were joined.\n\nShe began to work up and down my shaft, poking her tongue out and licking around the shaft as she took me slowly deeper. I was in heaven. My hands moved to her head and I began to enjoy the sensation of slowly rocking back and forth into her mouth.\n\nI saw her left hand dip down between her legs while her right stroked me. After another minute or two of bliss her mouth slipped off me and she smiled at my groan of disappointment. She stood up and kissed me before turning away and placing her hands against the tiled wall sexily looking over her shoulder at me. I didn't need any more encouragement and crouching slightly, I slowly worked my cockhead up and down her wet slit.\n\nWe laughed as we struggled to find a comfortable angle but it felt all wrong. I used a hand on her hip to support her and then lifted her leg up onto the inside ledge of the bath, exposing her pussy and winking rosebud. She looked so hot like that, looking over her shoulder at me, her need for me etched into her lovely face. She was the perfect height now.\n\nI slowly slid inside her, listening to her groan as I got deeper and deeper. Eventually my hips were right up against her arse and I began to pull back slowly, loving the feel of every contour inside her body. But she was in no mood for taking things slowly. She started bucking backwards and forwards, fucking back on to my cock.\n\n\"Fuck me Jake. Fuck me hard. I need your cock. I need you deep inside me. Take me. Just like that. Oh fuck yes, just like that!\"\n\nI grabbed her hips and started to pound her. She felt unbelievable, I could feel every part of her wonderful pussy gripping me. She let out a little shriek as she had a mini-orgasm.\n\n\"Oh yeeeessssss! Fill me up Jake. Harder, harder!\"\n\nI could feel my dick swelling and felt like I even touched her cervix as I fucked her as hard as I could. I couldn't last long like this.\n\n\"Oh god I'm going to cum! Don't stop! Keep fucking me. Yes! Yes!\"\n\nI reached round with one of my hands and flicked her clit. She howled as she came. The ripples and feeling up and down her cunt were unbelievable. I could feel myself about to burst when I suddenly realised that I wasn't wearing a condom.\n\nI pulled out just in time as cum flew out of my cock, over her arse and up her back.\n\nWe looked at each other, our breath rasping, the water still flowing over us. I felt like a naughty schoolboy who'd been caught red-handed.\n\n\"Shit, that was close. I'm sorry, I wasn't thinking.\"\n\n\"Don't be. I wasn't thinking either.\" A naughty look crossed her face, \"I liked it though.\"\n\n\"You felt amazing!\"\n\nShe stood up and we kissed again as I washed the cum off her back. We finally started cleaning ourselves properly and were getting dressed in the bedroom by the time my parents got home.\n\nThey hadn't been home long when the doorbell rang. I opened the door and Mr Lathan was standing there with Tina.\n\n\"Good afternoon Jake, I hope we're not disturbing you.\"\n\n\"No, of course not. We're just having a late lunch. Come in.\"\n\nHe ushered Tina in first, ever the gentleman, and they came through to the kitchen.\n\n\"Would you like a coffee or something?\"\n\n\"That would be great, thank you.\"\n\n\"Tina?\"\n\n\"Just some water, thank you.\"\n\nMum had already moved to the kettle and I grabbed a glass for Tina.\n\n\"I have some news for you and Tina was determined to come and see for herself that you didn't need to be taken back to hospital,\" he said with a grin as he looked fondly at his daughter.\n\n\"Daddy!\" Tina flushed bright red as she turned to me. \"I just wanted to make sure that you were OK.\"\n\n\"I'm fine thank you, Tina. Nothing that some food and a good night's sleep couldn't fix. What news, Mr Lathan?\"\n\n\"Please Jake, my name's Joe.\"\n\n\"Sorry, Joe.\"\n\n\"I finally tracked down Lenny.\"\n\n\"You did? That's brilliant. Who is he?\"\n\n\"It's Leonard Sawyer.\"\n\n\"Sawyer?! Jennifer's father?\"\n\n\"That's the one. Apparently that's where this all started. I was relying on a friend of mine who's a member there. But he wouldn't have found out without some help from a retired judge that seems to have taken an interest in this.\"\n\n\"Mr Davison is our next door neighbour.\"\n\n\"Aaaahhhh! That explains a lot. The question is what can we do about this? We don't have any proof. And I doubt that we'll be able to get a sworn statement from anyone.\"\n\nMr Lathan began to pace as he thought. There was no room in our crowded kitchen and frustrated, he settled back against the counter.\n\n\"We did meet up with a friend yesterday and she told us that Harry Youle and Jennifer Sawyer were the source of the rumours.\"\n\n\"So everything points to the Sawyers,\" rumbled Mr Lathan. \"But why, Jake? What have you done to them?\"\n\n\"I told you everything. Jennifer felt slighted because she saw Tina hugging me. That's really all that I can think of. And Youle the tool has been bullying me for years. Presumably he blames me for what happened to his rapist friends.\"\n\nTina's face fell.\n\n\"It's all my fault isn't it?\"\n\nThere was a chorus of denial from all round the room and Mr Lathan took her in his arms.\n\n\"Of course not, baby girl. None of this is your fault. You're just seeing what happens when spiteful bullies don't get their own way. You're the strong one. The one that is totally innocent in all of this.\"\n\n\"Your dad's right Tina. Jennifer's always been stuck up and Harry Youle's the very definition of a moron,\" said Fiona. \"You really shouldn't kick yourself because you happen to have been caught in the crossfire of whatever they're doing.\"\n\nTina nodded but held on to her father, obviously taking some reassurance from what they said.\n\n\"Well, let's not do anything rash. Now we know where it came from, we need to come up with a plan to discredit them. Maybe we can see if Mr Davison knows anyone that specialises in this area of law? We could see what can be done legally.\" Mr Lathan had taken this whole thing personally and was obviously determined to help.\n\n\"Thank you Mr L... Joe. Let's see what we can all come up with and maybe meet up again in a day or two?\"\n\n\"Why don't you come over to our house for a BBQ on Wednesday night? We can have a council of war and maybe you can convince Mr Davison to join us?\"\n\n\"Thank you Joe. We'd like that. What can we bring?\" asked my mother.\n\n\"Just yourselves and some ideas. There's always too much food and drink anyway.\"\n\n\"Not even a dessert?\"\n\n\"I'm sure that Wendy would be delighted if you could bring something.\" Mum looked relieved.\n\nMr Lathan drained his coffee. \"That's settled then. We'll look forward to seeing you all on Wednesday. Can I ask you to extend the invitation to Mr Davison? I don't know him and wouldn't want to intrude.\"",
        "\"Of course.\"\n\nThey said their goodbyes and Tina gave me a big hug and a kiss on the cheek. As we waved to them from the door Fiona said,\n\n\"That girl has got it for you bad.\"\n\nI sighed, \"I know.\"\n\n\"She's cute. I like her.\"\n\n\"She is really nice. Her heart's in the right place. I've only really got to know her a little over the last few weeks though.\"\n\n\"For someone that you don't know very well, she's got a knack for getting you in trouble.\"\n\n\"Yes she has!\" I said with feeling. \"It's never her fault though. I think she's just really innocent and keeps putting herself and other people in situations that with a little bit more nowse she wouldn't.\"\n\n\"Nowse?\"\n\n\"You know, being a bit streetwise; having some common sense. I think she's been kept in a bit of a bubble all her life. If I was her Dad I'm sure that I'd want to do the same thing, trying to wrap her up in cotton wool. But she's going to need to find out about the real world sometime.\"\n\n\"Well we need to use our 'nowse' to figure out what we can do about Jennifer and Youle the Tool. Come on.\"\n\nWe headed upstairs and sat on the bed in my room for hours talking through every option that we could think of. We went from the weird to the obscure but we were suffering from a lack of knowledge. We didn't have anyone close to them. We didn't know how stable their relationship was. We didn't know what else they might be planning. It was maddening. And we had no proof.\n\nI was desperately tempted to use the Pulse to spy on them but at the same time I was scared. I'd nearly killed myself the other day and yesterday I'd drained myself so badly that I ended up in A&E. I had to be more circumspect until I understood the limits of what I could do. Maybe another day or so of recovery made sense before pushing myself again.\n\nBesides, I kept being distracted by Fiona.\n\nShe wasn't trying to be distracting. She just was. She'd twirl her lovely brown hair round a finger. She'd chew at the end of a pen. Her eyes would flash with anger at the people that we were discussing. It seemed that almost everything she did made my cock twitch. There she went again, pulling her skirt down and flashing...\n\n\"Jake!\"\n\n\"What? Err...pardon?\"\n\n\"Oh you! Have you heard a word that I've been saying?\"\n\n\"No, I've been too busy looking at you.\"\n\nShe looked angry and happy at the same time. She drew breath to scold me again so I leaned in and kissed her. Hard. She practically threw me back on the bed, grabbing my hands and holding them above my head. Her t-shirt covered breasts swayed below her, hovering just out of reach of my mouth and her lips reached down and grazed my face with a butterflies touch. Her lower legs were splayed over my thighs. As she kissed me she occasionally ground herself onto the bulge in my jeans.\n\nI was so turned on it hurt.\n\n\"Do I have your attention yet?\"\n\n\"Always,\" I gasped.\n\nShe kissed around my neck and mashed her tits into my chest. I could feel her erect nipples rubbing across mine, her breath teasing my ear as she very slowly kissed every bit of exposed skin on my face.\n\n\"That's good to hear. Can you tell me what we're going to do about Jenny and the Tool then?\"\n\nShe'd never taken control like this but she was forcing me to focus on her.\n\n\"Err...I don't know. We need more information. Do you know anyone that's close to them? Anyone that they might have confided in?\"\n\nShe continued her torture, not allowing me to move an inch.\n\n\"No. Jennifer was always a rich bitch. Very proud. And I stayed as far away from the rugby crowd as I could. They gave me the creeps.\"\n\n\"Do you think that Ami might be able to help?\"\n\n\"I think she would have already told us if there was anything else that she could have done.\"\n\nWe continued to talk through everyone that we knew that might be able to help. Fiona kept me in a constant state of high arousal, practically humping my leg one minute and shoving a breast in my face the next before quickly pulling it away before she could lose control. The minutes ticked by and my cock was painfully hard, dripping with precum as she took her time teasing me mercilessly. I almost couldn't think I wanted her so badly. I wanted to...I wanted...\n\nPulsePulse.\n\nYellow and red power surrounded us.\n\nI dragged my arms from over my head and pulled her teasing body into mine. At every point that our bodies were touching there were little nips and strokes as my power teased her nerve endings in the same way that she had teased mine. The flow of yellow power made sure that I knew exactly where her most sensitive points were and in my haze of lust I used my power to play her like a musical instrument.\n\nBehind the knees, her inner thighs, the base of her neck, her big toes, her sex, her nipples, her lips. My power reached through to every part of her and toyed with her senses. I was kissing her on her beautiful lips, my hands making free with her buttocks and hers on mine when she came for the first time. She was panting as she looked at me in wonderment.\n\n\"What..?\"\n\nAnd then she spasmed again as my powers rippled over her body. Her back arched, pressing her mons into my straining cock, her nipples standing out hard and proud through her t-shirt.\n\n\"Jake!\"\n\nI was like a glutton presented with a buffet of all my favourite things. The sheer joy of pleasuring the woman that I loved was a wonder to me. As my passions grew she quivered again from the constant touching, stroking, pinching and licking. Happening all over her body, all at the same time. Taken to another place, she was in a swirling maelstrom of pleasure. I could feel it flowing through her barely conscious body.\n\nI was drunk with my power. I twisted our bodies over, strumming on her nerve endings, touching her in a symphony of pleasure. We floated as if weightless.\n\nI looked past her down onto the mattress and realised that we were hovering five feet above the bed.\n\nFiona spasmed with another orgasm and the power beckoned to me again. My mind exalted with the thought of being able to pleasure her in every way possible. I could enter her in all three holes at the same time, spark every sensory point until she was lost in pleasu...\n\n\"Please...please...stop.\"\n\nHer pained plea penetrated my power lust and I forced myself to take back control. Forced myself to release my hold and lower us back to the bed. Forced myself to stop, to withdraw the tendrils, to shut off the oh-so-beguiling power, to sever the threads.\n\nWe both lay on the bed overcome, she with pleasure, me with remorse.\n\nFiona was only semi-aware and it took her several minutes to regain control of her senses. The overload of pleasure had been far too much, almost to the point of pain. I rolled to one side, falling off the bed and onto the floor trying to distance myself from what I'd done. I curled into a ball rocking backwards and forwards.\n\nI was horrified that I'd lost control again. Who knows what damage I could have done to Fiona? Had I hurt her?\n\nConcern for her brought me back to my senses and I crawled up alongside her and gently brushed her sweaty hair out of her eyes. She was still suffering the aftershocks of what I'd done to her, small shudders rushing across her body. The smell of female excitement filled the room and I went to the bathroom and got a warm face cloth and carefully removed her sodden panties and wiped her legs and sex.\n\n\"No! No more!\"\n\nShe was wracked with more spasms and shook at my touch. I opened the window and sat back down on the bed desperate to touch her, to hold her, to never hurt her like this ever again.\n\nNearly ten minutes passed. I sat with tears streaming down my face, unable to do anything for fear of making it worse. The spasms had stopped and she slowly opened her eyes. She'd bitten her lip in her ecstasy and there was a little blood coming out of the side of her mouth.\n\n\"What..? What did you do to me? You were everywhere. I felt you everywhere. My skin was almost on fire. What did you...how did you...?\"\n\nShe looked scared. Scared of me and what I'd done.\n\n\"Fiona...\"\n\n\"What was that?\"\n\n\"I...I...\"\n\nI reached to hold her and she shrank from me.\n\n\"Just stay away from me Jake.\"\n\n\"Fiona! No!\"\n\n\"No! Stay away!\"\n\n\"Please Fiona, you don't understand...\"\n\n\"Then make me understand. What was that?\"\n\nI looked at her, helpless.\n\n\"Didn't you enjoy it?\"\n\n\"Enjoy it? I came so hard it hurt. Every pore of my skin is aching. I feel like I've had pins and needles in every part of my body, my skin is tingling so much. I feel fantastic and scared and wonderful and terrified. I am so afraid right now.\"\n\nShe sat up and pulled herself up into a ball near the headboard, her feet and legs in front of her as a barrier to me.\n\n\"What happened Jake? Because that was...that was indescribable and I can't...I don't want...\"\n\nShe was looking at me with such horror that I couldn't help myself.\n\n\"Let me show you.\"\n\nI held out my hand.\n\nShe shook her head.\n\n\"Show me what?\"\n\n\"Take my hand and let me show you.\"\n\nShe shook, almost white with fear. She shook her head.\n\n\"I can't. That was...that was...I can't.\"\n\n\"I just want to show you. To help you understand. Please trust me.\"\n\nThe pain and fear in her face was tearing me apart. She was looking at my outstretched hand like a snake. In a very small voice she said,\n\n\"What if it happens again?\"\n\n\"It won't. I promise. That will never happen again.\"\n\nShe looked at me for what seemed like forever. Her gaze poured through my eyes and into my soul. It was probably the bravest thing that I'd ever seen when she reached her hand out to take mine. Everything in her face said that she didn't want to. That she feared what had happened and that she dreaded what might happen if she touched me again. Her hand was shaking so much it took me two goes to take her hand in mine.\n\nBut she did it anyway. Because she loved me and trusted me.\n\nI took her hand in mine.\n\nPulsePulsePulse.\n\nI have no idea what I did. Colours flared around me in a rainbow as I took her hand. I drew her with me, careful to monitor her breathing, and led her through the multi-coloured, swirling clouds of my mind. I knew that she was with me. I could feel her presence beside me. I hoped that she could see what I was showing her in the same way that I could. I could feel the whirl of her thoughts through our contact but refused to be drawn into spying on her like that.\n\nI had never had to work my way past the clouds of colour before. A more analytical part of my brain was making guesses about their purpose. Potentially a defense mechanism? It was all I could think of.\n\nI felt her physically gasp as the clouds parted to show the orb of power. I felt totally naked. Exposed and totally vulnerable as we took in the sight before us. The orb pulsed and turned gently. It was a familiar and reassuring sight but what would Fiona think? Did it look threatening to someone that had just been abused by its power?\n\nI circled us around it so that she could see the various coloured threads, woven together and pulsing. For the first time I saw movement, as if the threads were in constant, undulating motion, tangled together in the strangest dance you ever saw. I showed her the threads that I was currently using to do this - a mixture of blue, yellow and purple that produced an oscillating teal coloured link.\n\nI reminded her body to breathe as we circled the orb and then we were retreating back through the colour clouds and I supported her as she became aware of her surroundings again.\n\nI was still holding her hand as her head came up, eyes wide, her mouth open in a silent O of shock.\n\nI was so scared.\n\nI was scared that she might be repulsed by what she'd seen. I was scared that she might never want to touch me again. I was scared that she might feel that I had somehow forced her to love me. That last left a cold lump deep in my heart.\n\nI finally met her eyes as I braced myself for her reaction.\n\n\"What did we just...? Was that real? How did you...? Jake, talk to me. I'm scared. Talk to me.\"\n\n\"I wanted to show you the source of my powers. The swirl of threads that you saw, the coloured lines that made up that rotating ball..?\"\n\nShe nodded, reassuring me that she had been seeing what I had seen.\n\n\"Each one gives me the ability to affect the world around me. The colours do different things. I'm sorry. This is the first time that I've tried to explain it to anyone.\"\n\n\"You mean you've never mentioned this to anyone before? Not your parents, Jamie? No one?\"\n\nI shrugged.\n\n\"What would I say? 'Mum, Dad, your son is a wack job and can control things and people with his mind.' \"\n\n\"How long have you known about these...this...thing?\"\n\n\"I discovered that I had these abilities by accident just over three weeks ago.\"\n\n\"By accident?\"\n\n\"Chris Waite was obviously bored and had decided that his fists needed a workout. I felt this weird feeling behind my forehead...a bit like when you feel your pulse..? And there was a swirl of blue and suddenly I was talking and he just stopped.\"\n\n\"He stopped?\"\n\n\"Almost as if I'd convinced him through the power of my words.\"\n\n\"This is insane.\"\n\n\"I know! I can't tell you how weird this has been. And I'm so scared in case anyone finds out and I suddenly get taken away to be studied like some kind of new species.\"\n\n\"So the doctor...that's why he let you go? That's why you didn't want the brain scan!\"\n\n\"No one else can know. I'd be in a laboratory for the rest of my life as a test subject, being prodded and poked. And who knows what they might try and make me do? They'd only have to threaten you or my parents and I'd do anything they wanted.\"\n\n\"So what happened when you...you made me... when you did what you did to me?\"\n\n\"Most of the time I need to call the power to use it. But when I get highly stressed or scared or...well...horny it can be triggered without me being in control.\"\n\n\"Horny? You mean every time that we've made love...?\"\n\nShe looked completely disgusted.\n\n\"Nononononono. Please understand, every time we've made love has been us. No weird mental shit. Nothing different, no uncontrolled mind stuff. Please believe me. What we have is special.\"\n\nShe slowly nodded.\n\n\"But you had me so turned on for such a long period of time. You were driving me crazy. I just lost control and it triggered somehow. I wanted to give you pleasure. I wanted to please you. And it was obviously way too much and I'm so, so sorry.\"\n\nFiona was still sitting in a ball. She still looked at me as if I might bite.\n\n\"I think that the depth of my feelings make a difference to how powerful the impact of the powers are. I love you Fiona. Heart, body and soul. I love you so much. And it obviously spilled over somehow making the experience much more intense. I'm so sorry that this happened. But this is all new to me. I don't fully understand what I can do. I don't really understand how I showed you what I did. I just knew that I could. I don't understand where these powers came from. I've slowly deduced how to use them and what they could potentially be used to do but I'm working almost completely blind.\"\n\nI saw her eyes widen as I spoke and tears began to appear. Her head shaking from side to side.\n\n\"NoNoNoNoNoNoNo!!!\"\n\n\"What? What have I said? What have I done?\"\n\nShe looked up with tears streaming down her face. Her expression was tender but she was obviously frustrated and angry too.\n\n\"Jake Conway! You cannot tell me you love me like this. When I'm scared and need reassurance. When you're the only person in my world. You can't do that damn you!\"\n\nShe started to hit my chest with her fists, tears flowing down her face. I caught her fists in my hands and she threw herself into my arms, sobbing.\n\nI was terrified, not knowing what to do, desperate not to make things worse than I already had done. Did she want me to hold her? Would she think that I was influencing her somehow if I did?\n\nIn the end I couldn't help myself. I held her like it was my last chance to hold her to me and kissed the top of head, rocking slightly back and forth, praying that she still wanted to be with me.\n\nThere was a knock at the door.\n\n\"Is everything alright Jake? I..\"\n\n\"Not now Mum.\"\n\n\"But I...\"\n\n\"Please Mrs Conway, not now,\" said Fiona through her tears.\n\nThere was a tangible silence from beyond the door. I could picture Mum's expression on the other side of the door and it didn't bode well.\n\n\"Ok then. But you two need to come down and eat and tell me that you're OK.\"\n\n\"We will Mum, we just need a few minutes.\"\n\nWe heard her going back down the stairs and turned back to each other. I continued to hold her but just lightly touching her shoulders, desperately trying to convey my sincerity.\n\n\"Fiona...\"\n\n\"Jake. Please listen. I've been waiting to hear you say those words and they mean so much to me. But I don't want to feel like you're saying it to me as part of some apology. I want it to mean something. It's...you're too important to me to hear you use those words without meaning them.\"\n\n\"I'm sorry. I should have said them days ago. But I wanted you to understand where this was coming from. It was coming from a place of love, not just because I could or because I have some warped and twisted designs on making you expire from pleasure. But I'm so new to relationships and these powers that it caught me out and I'm so sorry that you had to experience it. I couldn't possibly mean those words any more even if I do have lousy timing. I. Love. You.\"\n\nEmotions were washing through us both like the highest of spring tides and her eyes glistened with tears. She looked away from me, closing her eyes briefly, fighting her feelings under control again. She took my hands from her shoulders and moved them back down in front of us before slowly releasing them.\n\n\"Let's go downstairs, apologise to your Mum and have something to eat. Afterwards we can talk again. I still have so many questions. And my emotions are all over the place right now. Is that OK? Can we talk after dinner?\"\n\nI nodded sadly, feeling absolutely crushed.\n\nWe got ourselves tidied up and went downstairs. Mum had cooked roast chicken with all the trimmings, roast potatoes, roast parsnips, sage and onion stuffing, some green beans and some lovely thick gravy. It was delicious.\n\nWe were settling back in our chairs after eating our fill when Mum ambushed us.\n\n\"So what was going on upstairs? Are you alright Fiona?\"\n\n\"I am now thank you.\"\n\n\"Care to elaborate?\"\n\n\"I...I just miss my parents.\"\n\n\"Oh sweetie!\"\n\n\"It's not that you haven't made me feel incredibly welcome. I can't thank you enough. I just miss the relationship that I thought I had with them and I was upstairs when I realised that it was never going to be the same again. That's all. I'm sorry, it's embarrassing.\"\n\n\"No sweetie, it's not. It's been a lot to take in these last few days. It must have hit you like a ton of bricks. Let me get you some cocoa and maybe we can settle down for a bit of a chat while the boys go and watch something on the TV.\"\n\nI watched helplessly as my mother took over and banished Dad and me through to the sitting room. Neither of us was really interested in the game and we ended up getting the chess board out for the first time in years.\n\n\"I'm going to miss this, you know.\"\n\n\"What? Missing getting beaten at chess?\" I joked.\n\n\"Being a family. Spending time with you and Fiona. And your Mum.\"\n\n\"Is it too late for you both?\"\n\n\"I think so. The last few years have been truly toxic and we should have done something about it years ago. But we were worried about you. Maybe it would have been better if we'd split up before now. Too much has been said, too many things that we can't take back. It's over. Besides, I'm moving into my new flat in a week.\"\n\n\"I'm sorry that it didn't work out Dad.\"",
        "\"So am I son, but I'm sure it will be for the best. I will miss our time together but then you'll be leaving us for university soon anyway. Promise to come back and have a beer with your old man from time to time?\"\n\n\"Of course Dad.\"\n\nWe both got a little choked up and he covered it up by packing away the chess pieces and the board. I turned the TV on. We wallowed in an old repeat of 'Porridge', enjoying a bit of time together and even managing to get back into the kitchen for a couple of beers. It was a good evening.\n\nBut all the time, my mind was churning over, wondering what Fiona would say. What she'd do.\n\nIt was a relief when they came into the room and sat down for the final few minutes of the show. Fiona looked less stressed and Mum had a sort of satisfied smile on her face. She kissed me on the top of the head.\n\n\"I'm going to bed. I think you two should go upstairs and have a talk.\"\n\nI looked at Fiona hopefully and she nodded, a tight smile on her face.\n\nThanking Mum for dinner and wishing both parents good night we headed upstairs, completed our bathroom routines and got ready for bed. Fiona hadn't said a word. I was waiting for her as she moved across the room with her usual grace and sat down on the edge of the mattress. We looked at each other.\n\nI was incredibly nervous.\n\n\"So...\" I said. No real idea how to begin the conversation. \"Did you have a good chat with Mum?\"\n\n\"She's lovely Jake. Really lovely. She didn't buy my story for a minute and wanted to be absolutely sure that everything was alright between us. I told her that we'd had a stupid fight and that I was only crying because you'd told me that you loved me for the first time.\"\n\nShe smiled at the memory.\n\n\"She called you all sorts of names for doing something like that at such an insensitive time.\"\n\n\"I'll bet she did.\"\n\n\"But she told me to trust my gut when it came to my relationship with you because you're guileless. And decent. And honest. And she's right.\"\n\nShe got up and came and sat on my lap, wrapping an arm around my shoulders.\n\n\"I know that you didn't mean to hurt me or scare me. I just needed time to realise that the man that I love could never do that intentionally and that doing it, however unintentionally, has probably hurt you more than it's hurt me.\"\n\n\"But please don't do it again. It was scary to be that helpless, however pleasurable it was meant to be. I want to help you understand your powers. I want to know more about them and what's happened with them so far. I'll even help you experiment a bit if you think that will help. But that was way too much.\"\n\nThe relief on my face as I realised that she had forgiven me must have been a sight to see. She smiled and kissed me so thoroughly that an erection began to make itself known.\n\n\"And no I didn't tell your mum about your powers. Now come and make love to me the old fashioned way.\"\n\nSo I did.\n\n= = = = = = = = = =\n\nWe enjoyed each other quietly before falling asleep. I was mentally and emotionally exhausted and slept like death itself.\n\nThe next day was spent analysing every use of my power. I told her everything. Twice. It was very difficult, particularly when it came to my first use of the power on her. And Celia Sawyer.\n\n\"So you've fucked her twice and didn't think to mention it?\"\n\n\"Well, only once and to be fair it was her that used me both times. But no. I didn't think that it made any difference and I was terrified of telling you.\"\n\n\"I can't say that I'm pleased about it because I'm not but it was before we were serious wasn't it?\"\n\nI nodded.\n\n\"But how could you think that this wasn't relevant? Did you somehow think that Leonard Sawyer just didn't like you? Or maybe, just maybe, he was spreading rumours on behalf of his pissed off wife and his equally pissed off daughter? I thought that you were smart, Jake.\"\n\nShe smiled to take the sting out of her words but she was right.\n\n\"I'm really sorry. After finding out what they really thought of me I assumed that it was all done with. They'd want nothing more to do with me and I could just get on with life. I obviously got that wrong.\"\n\n\"And using your powers on me, just to get me all hot and wanting you like that.\"\n\nWe had been over this a couple of times and I saw the slight hint of a smile on her face as she said it. But I couldn't resist the bait.\n\n\"I told you! I had no idea what I was doing and you wouldn't listen to me. And I did stop you before things went any further.\"\n\nShe laughed.\n\n\"You did.\" She looked at me from behind her hair, her head at a slight angle biting her lip. \"That would have been sexy though wouldn't it? Having sex on the desk in Mayhew's?\"\n\n\"Any time that I'm making love to you feels sexy.\"\n\n\"Smooth talker.\"\n\nShe kissed me softly and I held her in my arms, thanking my lucky stars for the woman in my life.\n\n\"How are you feeling Jake?\"\n\n\"Blissfully happy to have you in my life.\"\n\nShe blushed.\n\n\"No, silly. How are you feeling after all the times that you've used the Pulse recently? It was only about thirty-six hours ago that you were in hospital unconscious.\"\n\n\"I feel pretty good. So long as I eat plenty of food and get some sleep then I seem to recover fairly quickly. The headache tends to be the giveaway if I'm overdoing things.\"\n\n\"Do you feel up to trying something? Something to help you with your control?\"\n\n\"Yes, of course. What did you have in mind?\"\n\n\"Do you remember in the layby? After our night out at Sweeney's?\"\n\n\"How could I forget!\"\n\n\"Well you did something with your tongue and your thumb that no one's ever done to me before and...well...it gets me excited just thinking about it.\"\n\n\"You mean when I played with your arse?\"\n\nShe nodded, bright red.\n\n\"I don't see how doing that again will do anything other than challenge my self-control.\"\n\nShe smiled, \"how about if you used your powers, and lots of lube, to...to...enter me while your cock is in my pussy. Do you think you could do that?\"\n\nMy cock was fully erect just thinking about it. She smiled fully aware of what she'd done to me.\n\n\"Are you sure Fiona? I'd be worried about trying to do something while I was...well, inside you already. Could we start off trying the idea out first using my powers and then work our way up to it?\"\n\nShe bit her lip and nodded, obviously turned on beyond belief.\n\n\"What now?\"\n\n\"Well your parents are at work. Unless you don't want to...\"\n\nMy clothes were off faster than a quick change artist at the theatre. My brain then began to engage and I went downstairs and got some olive oil and an old towel that was going to be thrown out.\n\nFiona had slowly undressed and looked hugely turned on. Her chest was already flushed and she was breathing fast.\n\n\"Where do you want me?\"\n\nThere were too many possible answers to that question. I walked up to her and kissed her long and hard. My cock was pressed between her beautiful thigh gap and she shuddered, already close to orgasm as I slowly rubbed back and forth against her lips. Just thinking about what we were going to try had her biting her lip and trying not to come.\n\nI laid out the towel on the bed and slowly lowered her down onto her back. I knelt down on the edge of the bed and pushed her eager legs apart. Her stunning pussy was on full display with her rosebud exposed to me too. I was so hard.\n\nI began to lick her around her pussy lips, down to her arsehole and then back again. I was doing my best to get her all wet before we did anything and it didn't take long for her to be dripping with excitement. I used my fingers to lubricate around her arsehole and then, with no warning, pushed my tongue inside her. She screamed and came from the build up of sensations.\n\nI pushed a finger slowly past her tight anal ring, slowly pushing it backwards and forwards as her butt began to relax. She was huffing and puffing at this point as I obviously began to fulfil a major fantasy of hers.\n\n\"Are you ready?\" I asked.\n\n\"Mmmmhmmm!\" was the only response she could manage.\n\nPulsePulse\n\nI reached for a red thread and split it into eight. I did the same to a green thread and then wove the two together. I used the red to generate a long thin shape about three times as long as my index finger but a similar width. The green thread provided the same feel and sensations as real flesh. I applied some oil to her ring using my finger, just to be sure, and then slowly pushed the invisible dildo at her rosebud.\n\nIt was incredibly erotic, listening to her moans, seeing her hole distend despite being unable to see the thing that was doing this to her. I began to push my creation back and forth inside her. She began to pant as it reached further inside her before I moved it back out again.\n\n\"How was that?\"\n\n\"God, don't stop!\"\n\nFairly confident that I could maintain that sort of shape and size fairly easily I rolled a condom into place and used my oily hand to lubricate my sheathed cock before slowly easing into her tight warmth. At the same time I pushed my mental dildo into her arse.\n\n\"I can feel it rubbing against me inside you!\" I exclaimed, totally unprepared for that sensation.\n\n\"Uuuunnnggghhh!\"\n\nShe had her heels on my arse pulling me into her. I began to thrust into her using long and slow strokes. She was so wet! At the same time my creation pushed into her arsehole.\n\n\"Fuckfuckfuckfuckfuck!!!\"\n\nI drew out of her and then very slightly widened the dildo to more of a thumb width, and then slid into her again. It was always heavenly being inside her but seeing her this turned on was something else. After a minute or two I upped the ante again until the invisible dildo was opening her out a full inch.\n\n\"So full. Please...please...please...keep fucking me...god yes. Fuck me in both my holes you fucking magician...oh faster...faster...deeper....CUMMING!!\"\n\nIt seemed to catch her by surprise and the ripples that went through her pussy were amazing. My focus on the dildo was slowing my own excitement and I was some way off my own orgasm. I let her come down a bit before starting again. She stopped me with her hand and I was concerned that I'd hurt her.\n\n\"I want to feel the real you back there.\"\n\n\"Are you sure? I'm a fair bit bigger than what I've created.\"\n\nShe turned on to her hands and knees, her breasts swaying, her arse wiggling at me and looked me straight in the eye.\n\n\"Put it in there.\"\n\nI didn't need any encouragement and pushed my cock into her arsehole. It was so tight. Thankfully she had been slowly loosened up or I wondered if I would have made it into her depths at all. She started swearing as it reached the halfway point and I stopped pushing, just slowly easing back and forth in that position.\n\nAs the swearing came under control I used more oil around her entrance and the condom and pushed again. At the same time I used my creation to push between her pussy lips. The feeling as I slid into both her holes together was indescribable. She was a mewling, swearing mess and as the pace increased I felt another orgasm ripple through her body.\n\nIn just another minute or so it was all too much for me and I exploded inside the condom, my twitching cock being rubbed by the relentless dildo in the pussy.\n\n\"That's enough Jake, please, that's enough. No more.\"\n\nI cut the threads and saw her pussy lips come back together again as the incorporeal dildo winked out of existence. I eased my rapidly softening cock out of her arse and disposed of it in some tissues.\n\nFiona lay there in an orgasmic heap.\n\n\"How do you feel?\"\n\nShe laughed, exhausted and happy.\n\n\"Amazing. Even better than my fantasy.\"\n\n\"What fantasy?\"\n\nShe turned to me on her side and stroked her fingers up and down my chest as she explained.\n\n\"For years now I've dreamt of being fucked by two men at the same time. They were always faceless beings that drove their cocks into me at the same time, one in my pussy and one in my arse. I always came so hard after that. But I always felt like such a slut afterwards because...after all that's two guys at once. I wasn't comfortable with the idea at all but my body obviously was. So it's been a guilty pleasure for a long time. But now...knowing that both the cocks inside my body belong to you, to the man I love, the guilt part is gone and oh my days the pleasure...!\"\n\nShe kissed me long and hard before looking into my eyes.\n\n\"Any headaches? Any other issues?\"\n\n\"No, none,\" I grinned at her, \"other than an overwhelming desire to fuck you in the arse every chance I get.\"\n\nShe blushed bright red.\n\n===============================================\n\nOnce again, thank you to everyone for their encouragement and their patience. The story is there in my mind, just not fully formed. So when it takes unexpected twists it takes me a while to adjust. I hope that you enjoy this part as much as I've enjoyed writing it."
    ],
    "authorname": "golasgil",
    "tags": [
        "mf",
        "anal",
        "anal play",
        "love",
        "shower"
    ],
    "category": "Mind Control",
    "url": "https://www.literotica.com/s/the-pulse-pt-08"
}
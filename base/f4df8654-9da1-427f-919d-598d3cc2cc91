{
    "title": "Erotica Author Cuckolds Fans Ch. 01",
    "pages": [
        "Authors note: A big thank you to all my fans. I appreciate the feedback. Keep favoriting, voting, sending emails, and leaving comments. I love them. They are what keep me writing. I don't need many fans to keep writing. I will write for those I have. \n\nI know it's been over a month since I published. Truthfully when I started I had so many in my head they just churned out. I am still writing, they're just taking longer to finish. I have at least 4 more concepts in the queue and who knows what experiences will trigger more. \n\nPeople ask where I get my ideas. If you want to know, I've updated my biography to include that.\n\nTo my detractors. Feel free to email and leave comments. I do have to say that I will be deleting many of your comments. I used to find them funny. Now they are just boring. The ones that are valid or interesting I will keep. I may even respond. \n\n==========================\n\nAs a writer of erotic stories I get a lot of feedback from my fans. I get a lot of hate mail too, but that's just part of the game. I try to respond to any non-anonymous email. \n\nA lot of my male fans want pictures, to sext, or role play through email with me. I'm clear up front that I get enough sex and stimulation. I've done almost everything and sexting or role playing with random men is not interesting to me. \n\nI clear them out pretty quick. I tell them that the role play I want is about them. The conversation usually goes like this:\n\n\"Tell me about, your wife.\"\n\n\"She's not really into sex.\"\n\n\"Ok, do you have kids over 18?\"\n\n\"I don't want to talk about them.\"\n\nI always respond, \"Well, those are the things I want to talk about. So our interests aren't the same.\" That usually ends it. \n\nThe topics I am interested in, and write about, are cuckolding, incest, and group sex. In my stories I like turning a woman into a slut. I am not interested in cuckolding my husband. I love it when he cuckold's someone else's husband. It's happened in the past and was exciting. I'm not interested in anyone in my or my husband's family. I'm interested in making a woman do something with her family. Pushing her limits. I don't want her forced, or intoxicated to the point she does something she wouldn't normally do. I want it to be a conscious choice. If there are others involved, I want them to act by free choice also. My husband and I share the same fantasies. \n\nSometimes men say they want help trying to get their wives to cuckold them. The first thing I ask is 'have you told her your fantasy'. I offer to help but only if they prove they're real. In those cases I ask for pics. G-Rated. One of the wife and one of him with her. Usually they claim they don't have them, can't get them, or try to send something they downloaded from the Internet. \n\nI've been a swinger, I'm good at spotting fakes. \n\nSometimes they're interested in their daughters. To prove their not just trying to sext with me i'll ask for a pic with them and their daughters. I've never received one. \n\nI also get a lot of fan mail from women. Most are men pretending to be women. They want the same things as above, sext, role play, pictures. I weed them out pretty quick. \n\nI do get female fans who say they want to talk. I always ask about them. Age? Married? Kids? Work? If they won't tell me I just tell them we have different interests. \n\nHowever, once in awhile I get a true fan. Someone excited by what she read. I'm always interested in these. Some, most, just want to tell me they enjoyed a specific story. Sometimes they just want to talk about the story. Sometimes they tell me they can see themselves in the role in the story. \n\nI always respond and ask what they specifically liked about the particular story, or if they don't mention a story, which one they liked best. \n\nThe rare fan, the one I want, is pretty, wants to explore, and is afraid. She's the one I like the best, the one I want to talk to. Usually she wants to be convinced or even controlled to do the things she really wants to do. \n\nThis story is about one such fan. \n\nI received the following email. Nothing about it was unusual. \n\n\"I just wanted to write and tell you how much I love your stories. My husband introduced me to them. Sometimes we read them together sometimes alone. My husband loves the cuckold and wife watching stories. They turn me on too but we'd never be brave enough to bring a man into our lives, let alone to control us. \n\nI responded as I always do. \"Thank you so much for writing. Which of my stories did you enjoy the most, and what did you like about them?\" \n\nUsually, I either don't get an answer or I get a vague answer and then ignore the sender. This time that didn't happen. \n\nThe woman wrote back and mentioned 3 different stories. Each story involved a man entering their lives and seducing the wife. She described how they made her feel. I wrote back asking about her husband's reaction to those stories. She told me how excited they made him as well. \n\nShe then asked about my experiences. This is where I get suspicious. I told her, as I tell everyone, I don't mind sharing my experiences, but I get a lot of email from people pretending to be people they're not and who just want to get off on them. I explained that I would not mind sharing them, but only if the person was real and wanted to know, not to get off, but to understand how they happened. As usual I told her she'd have to prove she was who she said she was. \n\nNow to be honest, this was a situation I wanted to know more about. I was willing to stretch my rules a bit to really see if she was real and take my time. As a swinger, I was used to sending my pictures to strangers and I really didn't worry about it too much. In that case it really depends on who initiated the contact and what your gut tells you. On the other hand I understood that other people did not have that comfort level. \n\nIn this case, she'd initiated the contact and was interested in pursuing but so was I. On the other hand I was less skittish. \n\nI told her that I usually ask for a picture of the person I'm chatting with and one of them with their spouse. Most times people don't respond. She wrote back that she wasn't comfortable sharing pictures yet and asked if there was something else she could do. \n\nI thought about it. It was a situation I was interested in so I decided to let my normal standards go and figured I would talk with them until they creeped me out. \n\nWe started exchanging emails. \n\nShe asked me about cuckolding experiences. I explained that as a woman, I'd only once been with a married man when my husband and the other woman were present. Before I married I admitted I had a one night stand, at a conference, with someone I had known a long time but lived in a different state. I wasn't proud of it, it happened as my then current relationship was ending. He wanted to pursue it, I realized he and I had to solve our own problems and that what we did was wrong. \n\nI also explained that I was always sexually open but before I married my current husband I'd never had a 3some or been with a girl. \n\nMy husband, Kyle, on the other hand was a self described slut. He says that when he got divorced he actually didn't like women very much. AOL made it easy to meet women and he took full advantage of it. \n\nEven when we first met we were basically booty calls. I was OK with it at the time. He was smart, handsome, fun, and sexy. I was just out of my relationship with my child's father, and didn't really want anything serious or someone in my child's life. \n\nThe friendship, and lack of looking for a long term relationship, left a lot of room to discuss and explore fantasies. I told him I was curious about other women. Eventually we became swingers. Not a lot, but we went to a few parties, met people, and had group sex. We also had a few spontaneous experiences but they were not cuckolding, more group sex. \n\nI started telling her about my experiences. \n\nMy first cuckolding experience was with my husband before we married. I knew that, before we married, my husband had had a few cuckold experiences. The first one I was involved in was with a couple we'd become friends with. \n\nContrary to the stories, cuckolding, as far as my experience, doesn't happen spontaneously. It takes awhile to build a relationship with the woman and the husband. She has to be interested and attracted to you. In real cuckold relationships neither partner wants the marriage to end, they really love each other. The husband often feels that he is not adequate at satisfying his wife and wants to see her satisfied by someone better than him. Usually the husband is sweet \n\nand kind but not the take control type of guy. \n\nThe wife on the other hand misses a stronger man. Sometimes she wants to be treated like a slut not sweetly like a wife. She wants a man to grab her hair and fuck her with lust. \n\nIn this case we had met the couple at a local winery. We were at a wine release party. We saw them again at a local bar the next week. We hit it off and started hanging out together. The husband was a nice guy. She definitely had a more sexual air about her. \n\nAfter a few weeks of knowing them my husband told me that he thought the husband wanted to be a cuckold. I didn't believe him. He explained the signs. The husband always let my husband be in charge. When together he would make sure she sat next to my husband even if he had to sit away from us. He would point out when guys noticed his wife and tell us how hot that was. \n\nThe next few times we were together I watched for the things my husband had mentioned. He was right on all of them. Sometimes my husband would do things to make the guy react just so I could see the behavior. I started to think my husband was right. \n\nOne night we went out dancing. The guy sat the dances out while she danced with my husband and me. This night we were having fun. We were both hanging on my husband and grinding on him. At one point I kissed my husband while dancing. He then turned to her, pulled her close, and kissed her as well. It wasn't too long a kiss but it was definitely a sexual kiss. It was hot to watch. \n\nWhen we sat back down my husband told the guy his wife was really hot tonight and a great kisser. The guy agreed she was hot and said the kiss looked hot too. We eventually went back to their place. \n\nAs soon as we walked in my husband grabbed her and said, \"I think I need another kiss.\"\n\nShe molded into him and kissed him. I was standing with her husband. \n\n\"Wow, that's hot,\" I said.\n\nHe just watched. \n\n\"Why don't we sit down?\" I suggested. \n\nI led him to a chair. He sat down, I grabbed another chair and sat next to him. \n\nMy husband undressed the woman in front of us. All the time telling her husband how hot she was and how he was going to fuck her. The husband just sat there. \n\nI thought the scene was hot too. As I sat there I kept asking the husband what he thought and telling him how hot it looked. \n\nAs my husband was fucking her he told me to come over. I went to him and he told me to undress. I did. My husband told the guy we were moving to the bedroom and he was welcome to come watch. We retreated to the bedroom, he followed. The three of us got on the bed and continued to fuck. He watched.\n\nAfter that, whenever we saw them, my husband fucked her. Sometimes I joined in, sometimes I watched. Sometimes she would call me and say she was horny and ask if she could come over. \n\nEventually, as with most fires, it started to fizzle out, but even to this day my husband fucks her sometimes. \n\nAfter that email my new friend wrote back how hot the story made her. She asked a lot of questions about the husband's reactions, details on the sex, what I thought the woman was thinking and feeling. We sent emails back and forth for a week. \n\nDuring the week I learned a bit about her. Her name was Lisa. His name was John. She was 25 and her husband was 27. They'd been married for 3 years. He was her 3rd lover. She was his second. \n\nAfter emailing for a week she asked me if we could text. We were going back and forth with emails, but that made the conversation slow. She wanted faster responses. I offered to text her if she'd send me a picture. She agreed.\n\nI texted her and she sent the pic. It was a selfie she'd just taken. She was very pretty. I couldn't tell from the pic, but she told me after, she was 5'3\". She had a short pixie haircut, and a very pretty face. She had a tiny frame and a cute figure. The thing that stood out is she looked like she was pregnant. I wasn't sure, she may have only been 3 months along, but it looked it. I didn't say anything. \n\nFair was fair. I sent one back. We were 20+ years older than them, but I really didn't think much of it. We weren't planning to meet them and I wasn't thinking of impressing her or anything sexual. \n\nWe started chatting everyday. Not just fantasies but day to day stuff. Sometimes after they'd go out, she'd tell me how some guy was checking her out and how much she and her husband liked it. During that time she'd send me a few selfies. One was in panties and a little T. She definitely had a small baby bump. \n\nWe talked about her husband. He was 5'7\" and about 150. He was a nice looking slight guy with a great smile. I asked her if her husband knew we were chatting. She told me that he did, and that when I shared one of my husband's or my cuckolding experiences, she would tell him about it. He'd always get turned on. \n\nWe talked about my sex life, and hers. She liked hearing about the nights, or days, my husband fucked me. There is a difference between fucking and making love. We did both. She always asked for details when I told her I'd been fucked the night before. \n\nI realized that she had never been fucked. She'd had sex, neither loving or wild, just sex. She and her husband made love. He was tender and sweet. Always. She knew she should be thrilled that he treated her that way, but my stories, and the ones they found online, had led her to fantasize about wilder sex. Sex that was not so loving, but where she was treated as an object of passion. \n\nHer husband also got off on the stories. He'd tried, but it wasn't him. He couldn't really be that passionate lover. He couldn't pull it off, but the thought of her in the throes of such passion really turned him on. They knew that could only happen with another man, so as they were having sex they (mostly she) would talk about scenarios where they'd meet a man who seduced her and fucked her passionately. These scenarios would drive him wild. Often when she started one he would cum in about 2 minutes. \n\nAs we chatted we also sexted a bit. It was not the majority of our conversations, but it happened. I am bi, so sometimes the conversation was about what I'd do to her. She had never been with a woman, and the conversations intrigued and excited her. \n\nSometimes I'd insert my husband in the mix either as a 3some with her or him cuckolding her husband. Sometimes she'd masturbate during these conversations, and cum. She'd tell me when she was doing it. \n\nI had told her I liked woman in cute sundresses, so once in awhile, when she had one on, she'd send me a picture. \n\nIf you're familiar with online relationships you know they can become intimate fairly fast. Somehow the anonymity of the Internet allows you to be more free with yourself, as well as not see people's flaws. \n\nWe had been in contact for about a month when I asked her if she was pregnant. Something she had said about missing having an occasional beer gave me the opening. She told me she was about 4 months along and that her husband was getting even more gentle than usual. He was treating her like she'd break and it was driving her nuts. In fact, he was avoiding sex somewhat, not because he didn't find her attractive, but he was afraid he'd hurt her. No matter how much she told him it was ok, he did not feel comfortable. \n\nIt was around this time she mentioned where she lived. It turned out they were about 150 miles north of us. I think it surprised her we were so near. Even more that my husband was often up there on business. For a few days her texts dropped off a bit. I understood, having these conversations was a little intimate so I figured she was putting distance between us. \n\nAfter about 4 days she started communicating again. We went right back to the same relationship although she now talked about how close we were and wouldn't it be interesting if we 'bumped into' each other.\n\nI asked her how her husband felt about us being so close. She said he'd talk about it every few days and, the times they did have sex, he'd always bring it up.\n\nOf course I'd been telling my husband about all these conversations. \n\nOne day he suggested we go spend a weekend where they live. The next time Lisa texted me I mentioned we were going to be in town in two weeks and asked if they'd like to go out for dinner. \n\nLisa told me she'd have to think about it and ask her husband \n\nHaving been here before, often first time swingers need reassurance, I told her that it was just dinner and no expectations. I explained that we'd met people as swingers and often at dinner there was no connection. I also explained that even if something did happen, no always means no. However in this case, I said we were just suggesting dinner.\n\nLater that day Lisa texted me and said dinner would be fine. We agreed to meet. \n\nDuring the next two weeks, we'd discuss things about dinner. What should she wear? Where should we go? She also expressed her and John's excitement and apprehension about meeting. Neither of them had ever met someone off the internet. It was an exciting adventure. \n\nEven though she was apprehensive we still sexted about the situation. Me playing with her pussy under the table. My husband fucking her in the restroom at the restaurant. A lot of fun ideas. Each time, after she came, she'd get shy and say, \"This is just fun, we don't plan on doing any of this.\" \n\nI assured her it was OK.\n\nThe weekend arrived and my husband and I drove to where they lived. We got a room at a local motel and checked in. We had made plans to meet them at 7 at a local restaurant so we decided to go to a local national park and do a little hiking. That would give us plenty of time for a nap before dinner. \n\nThe day was beautiful. It was a crisp day. Since we were off season the park seemed empty and we saw no other hikers along the way. We hiked out to a small clearing by a stream. \n\nAll of a sudden my husband grabbed me, pushed me up against a tree and kissed me. I loved it. I kissed back. Unlike a lot of marriages we still had explosive passion in ours. His tongue entered my mouth and I responded with a moan. I pulled him close and pressed my body against him. In our jeans, hiking boots, and fleece jackets we were not a sexy looking couple but the fresh air, sunshine, and running water made it a vibrant day and the kiss made me feel frisky. \n\nMy husband pulled away from the kiss. He had that laughing teasing look in his eye. He turned me around in his arms and started kissing my neck and ears. I threw my head back and opened my senses to all the sensations surrounding me. \n\nI could smell the trees and the stream, I could hear the crash of a small cascade upstream, and his hot breath on my neck and ears made my senses feel alive. With his arms around me I leaned back into him. \n\nWith an,\"Mmmm,\" I pushed my ass against his pants and felt his hard cock against it.\n\nHis hands dropped to my belt buckle.\n\n\"What are you doing?\" I asked playfully.\n\nHe bit my earlobe softly. \"Taking advantage of nature,\" he replied. \n\n\"You think you can just take me here, in the woods, just like that?\" I asked.\n\n\"Yes,\" he said as he pushed my jeans and panties down around my thighs. \n\n\"You're right,\" I said and I leaned forward against the tree giving him access to my pussy.",
        "I heard his zipper and then felt his familiar cock against my pussy. I didn't need any foreplay. I was wet. He slid right in. \n\nHe started with long slow strokes. In my position, bent over and leaning against the tree, my jeans and panties around my thighs, I couldn't really fuck back. I just closed my eyes and let myself experience everything around me. In this setting his cock felt so primal. I felt like I was one with nature and that we were meant to be joined like this. \n\nI didn't say anything, neither did he. The only sound I made was moaning with each thrust. His hands were on my hips. Everytime he pushed his cock into me I moaned. Sometimes it was long slow easy strokes. Sometimes he would pull his cock back till just the tip was inside me. \n\nI'd groan and try to push my hips back so he'd fill my pussy, but he had control. I'd almost whimper for him to push his cock back in me, but he was in no rush. The head of his cock would sit right inside my pussy opening. \n\nI should probably mention that I love my husband's cock. I always say it's just on the sweet side of too big. It's about between 7 and 8 inches and about 2 inches thick. The head's a little thicker. When we were swingers if he wasn't the biggest cock in the room, he was close. \n\nThe head of his cock just tantalizingly held my pussy opening stretched at the widest he could. I felt like I was just stuck in anticipation. After a minute he would thrust all the way into me. He repeated this again. Long slow strokes, then keeping me in a state of anticipation, and then plunging into me. \n\n\"Stop teasing me,\" I said. \"Fuck me.\"\n\nHe slid his cock a little deeper into me. \n\n\"I am fucking you,\" he said with a laugh in his voice.\n\n\"Fuck me hard!\" I explained. \n\n\"If I do will you cum all over my cock?\" he asked. As he asked he started with slow half strokes. Never filling me. Not quite satisfying. \n\n\"God yes,\" I begged. \"I'll cum for you. Fuck me. Make me cum.\" \n\nWith that he grabbed my hips and started fucking me with long hard strokes. Everytime he thrust his cock into me I felt full. I could feel my orgasm building. \n\n\"God, yes. Yes yes yes,\" I grunted with each thrust. \n\nThen it happened. A wave of orgasm ran through my body. My knees buckled and he had to use his hands to hold me up so I didn't fall. I could feel my pussy soak his cock. \n\nI stayed in that position catching my breath. After a moment I pulled towards the tree and let his cock slide out of me. Without pulling my jeans or panties up I turned to face him, dropped to my knees, and took his cock in my mouth. \n\nI loved the taste of pussy on his cock. Especially mine. I could never get his whole cock in my mouth. I took as much as I could then wrapped my hand around the rest and started stroking him. Every once in awhile I'd pull off his cock, look him in the eyes, and lick my lips. \n\nAfter a few minutes I felt him stiffen up. I felt the first spurt hit me against the back of my throat. Then a flood of spurts filled my mouth. Even swallowing as fast as I could I could rarely swallow the load he gave me. Today was no exception. Some dripped out my lips, onto the shaft of his cock and down my chin. \n\nWhen I felt the last spurt I used my finger to scoop the cum off my chin and lick it clean. I then took his softening cock into my mouth and cleaned it off. \n\nI stood up and with my jeans and panties still around my thighs I reached down, put his cock back in his pants, and zipped them up. Then I reached down to pull my jeans and panties up. As I did I happened to glance to the side. \n\nThere, at the opening of the trail that led to the clearing we were in, was a young couple. At first I got scared. What if they reported us? But, almost immediately, I noticed that he had his cock out and she was stroking it. \n\nI took my husband's hand and headed towards the path. As we walked by them I said, \"Hope you liked the show.\" Before they could reply I looked at her and said, \"Suck it, I would.\" \n\nAs we left them behind I turned to look. She was on her knees in front of him, head going back and forth. We headed back to our room for a quick nap. \n\nAfter our nap we showered and got dressed for dinner. I love getting dressed in front of my husband. I love the way he looks to see what I'm going to be wearing under, hidden from view. \n\nI sat naked on the bed and started rolling a thigh high sheer black stocking up my leg. I could see him watching as he shaved. I did the same with my other stocking. Then I put on my heels. He looked at me.\n\n\"Don't want to risk ruining my stockings,\" I said. \n\nHe laughed. \n\nThe room had a full length mirror. I stood in front of it. At 46 I was comfortable with my body. At 5'6\" 140. I had nice curves. My 36c tits didn't sag too much. My shaved pussy and the stockings made me feel hot and sexy. \n\nMy husband came up behind me, naked. He wrapped his arms around me and his semi hard cock pressed against my ass. I wiggled my ass against it teasingly. He reached up to cup my breasts. I wriggled away and gave him a pouty look. \n\n\"Go get dressed,\" I said. \"We'll be late for dinner.\" \n\nI watched him get dressed. I loved watching him. In a crowd you wouldn't pick him out. 5'11\", 220, blue eyes, bald on top but keeps the rest close cropped. However I knew better. I knew how much people were attracted to him when they met him. I'd seen him pick up a woman in a bar and convince her to join us for a 3 some, and I knew what a great fuck he was. \n\nAs he dressed I did my hair and makeup, still naked except for stockings and heels. When I was done I pulled on a small pair sheer panties. I made sure I was facing away from him as I stepped into them and pulled them up. I knew he loved my ass. When I was done I turned and looked at him. Sure enough he was watching me. \n\nI slipped my dress on over my head. It was a little black dress. The hem came just below my stocking tops and I knew they would show when I sat down. The dress had a tight top so I could go braless. The neckline scooped down to show a lot of cleavage. \n\n\"God, I could fuck you right now,\" said my husband.\n\nI laughed. \"We'd be late for dinner,\" I said. \"Besides, don't you want to see if you can push their cuckold fantasy?\" \n\nHe laughed, \"What kind of pervert wife wants to watch her husband cuckold another man,\" he said.\n\nI put my arms around his neck, \"Your pervert wife,\" I answered. \n\nI grabbed my purse and we headed out the door. \n\nWe arrived at the restaurant almost the same time. We introduced each other in the lobby. It was all perfectly normal. Like meeting any other couple. \n\nBy that time Lisa was almost 5 months pregnant. She had the cutest little baby belly. The gentle swell was just the beginning of motherhood. Just at the point where people start to realize she was pregnant. She was dressed in a pink dress. It had a peasant style top that showed a lot of cleavage. If you looked you could see the top of her pink bra. The dress was short. Not too short for a 25 year old, but shorter than mine. I know I'd told her what kind of dresses my husband liked. This one was perfect. As we walked to the table I took her hand.\n\n\"You look beautiful,\" I said.\n\n\"Oh sure,\" she said. \"I'm almost 5 months. I feel fat.\"\n\n\"Fat?\" I replied. \"No way, if we weren't in a public place I'd want to... Well, never mind, but you're not fat and I would.\" \n\nShe giggled. \n\nWe sat at our table, it was a square table. The men sat across from each other as did Lisa and I. Conversation flowed easily. Well, conversation between my husband, Lisa, and I flowed easily. My husband would ask John questions to include him. His answers were short. Not rude, but it was like he wanted to watch what was going on rather than participate. \n\nAs the evening wore on the conversation went to my stories and how Lisa and I met. My husband asked John how he liked the cuckold stories. John admitted he liked them but didn't go into a lot of detail. Lisa, my husband, and I talked about the stories and about our favorite scenes. \n\nThroughout the evening my husband would complement Lisa and tell John how hot he thought Lisa was. Often he would talk about Lisa as if she were an object as he addressed either John or me. He would also reach out and pat her arm, hand, or even knee. His hand always lingered longer than it should. \n\n\"So John,\" said my husband. \"I know you like the stories. What do you think it would feel like to be cuckolded by Lisa in real life.\" As he said it he put his arm pulled Lisa's chair closer to him and put his arm around her. \n\nJohn looked around. He looked at Lisa and then at me. He looked like a deer caught in the headlights. \n\nMy husband continued, \"it's ok. I've watched my wife fuck. We were swingers for a while. It's actually kind of hot. Of course, I was fucking someone else while she was getting fucked. In your case you'd probably only get to watch.\n\n\"Do you think that would be as hot as the stories?\"\n\nJohn looked from, me, to my husband, and then to Lisa. \"Yes,\" he croaked.\n\n\"I do too,\" said my husband. \n\nWe chatted a bit more. Lisa seemed to be looking at me expectantly. My husband almost left John out of the rest of the evening's conversation completely. Eventually it was time to go. We all walked outside and said our goodbye's in the parking lot.  \n\nMy husband and I both shook John's hand I opened my arms to hug Lisa. As I hugged her I gave her a kiss on the cheek and told her that we had fun. \n\nWhen I was done I almost handed her to my husband to hug. His arms went around her waist, her's around his neck. They hugged. My husband, holding his hands on her hips, pulled back a bit, her arms remained on his shoulders. Looking at her face, he pulled her back in and kissed her on the lips. Nothing wildly passionate, but more than a friendly peck. After that he pulled her close. With her head on his chest he slid his hands down to her ass and cupped it so John could see. \n\n\"You've got a very sexy wife,\" he said to John. \n\nHe then released Lisa and took my hand. \"We had a great time but now it's time to get this sexy woman back to the hotel and fuck her.\" \n\nWe said our final good nights. As we walked away, I put my arm around his waist. He reached down and pulled the back of my dress up to my waist. My stockings and panty covered ass were completely on display. I looked over my shoulder to where they were standing and watching and gave a little wave. \n\nWhen we got to the car my husband pushed me up against the passenger side and kissed me. His hand went under my dress and he started to pull my panties off. \n\n\"What do you think you're doing?\" I said in mock anger.\n\n\"I'm getting these panties off you so I can finger fuck you while we drive home,\" he answered. \n\n\"Oh? Some little slut gets you all hot and bothered and you think I'm going to take care of it and fuck you?\" I asked. \n\n\"You bet your ass,\" he said.\n\n\"My ass?\" I responded. \"Sounds fun.\"\n\nI let him pull the panties halfway down then sat in my seat with my legs out the door. I lifted my feet so he could pull them the rest of the way off me. I swung my legs into the car and he closed the door. \n\nHe climbed in his side and shut the door. He immediately pulled me too him and kissed me. His hand went right to my pussy and I spread my legs to give him access. As he kissed me he payed with my pussy. He slid two fingers into me and fucked me with them. Then he pulled them out and circled my clit. I moaned and pushed my hips towards him. He pulled his hand away. Leaving my dress practically around my waist he turned in his seat and started the car. \n\nAs we drove he reached over and took my left hand and using his hand he guided mine to my pussy. With his fingers on top of mine, he used my hand to play with my clit as we drove. I moaned. He forced my fingers inside of me along with his fingers. I arched my back and pushed my hips into our fingers. I placed my other hand on top of his pushing his hand and my finger deep into me. \n\nI came. \n\n\"See what you did?\" I teased. \"I probably left a stain on the car seat.\"\n\n\"Good,\" he said. \"I love your pussy.\"\n\n\"Is it my pussy you want? Or that hot little pregnant girl,\" I teased. \n\n\"Yes.\" \n\nAs he said it we pulled into the hotel parking lot. He leaned over and kissed me again. \n\n\"You pig,\" I laughed, pulling away from him. \n\n\"Oink,\" he said, grabbing after me.\n\nWe chased each other up to the room laughing, grabbing and kissing along the way. As we exited the elevator, he reached for me. I spun away, pulled my dress off over my head and threw it at him. Then I turned and, in just stockings and heels walked to our room. \n\nWe reached our room and he pushed me onto the bed. \n\n\"Dammit, I need your pussy,\" he said.\n\n\"Mine?\" I smirked.\n\n\"Yeah, yours is always my favorite pussy,\" he replied. \n\nHe stepped out of his shoes and pulled off his shirt. He lay down on the bed next to me and kissed me. This time it was the kiss of lovers, my husband.\n\n\"I love you,\" he said. \n\nI was still feeling dirty. His kiss was reassuring, but it wasn't what I was looking for. It just told me I was safe in being who I wanted to be tonight. \n\n\"Does that mean I'm not going to get fucked?\" I pouted. \n\nHe smiled. \"I'll show you fuck,\" he grinned. \n\nMy husband pushed me back on the bed and straddled me. As he did my phone text alarm went off. \n\nUsually I would not stop what I was doing to check a text, but we weren't home and it was late, it might have been important. \n\nIt was a text from Lisa. I showed my husband\n\n'Thank you for tonight,' she texted. 'We had a great time.'\n\n\"Go ahead, answer her,\" he said.\n\n'We had a good time too. What did John say?' I texted back. \n\n\"John had a good time too\"\n\n\"Thank you, did he say anything?\"\"\n\n\"He asked how I felt around your husband\" \n\n\"And?\"\n\n\"I told him I enjoyed the flirting\" \n\n\"Nice, I enjoyed watching him flirt with you too.\"\n\nShe sent back a smiley face.\n\n\"When do you guys head home?\" she asked\n\nWe had planned to leave the next day.\n\n\"Tomorrow,\" I texted back\n\nI got a frownie face in reply. \n\n\"We'll be back sometime,\" I responded. \n\n\"That's nice, we'd like to have you guys over for dinner.\"\n\nI showed my husband the conversation. \n\n\"No reason we can't come back Saturday,\" he said. \n\nMy inner pervert kicked in. The idea of seeing that cute little pregnant girl being fucked by my husband with John watching sent an actual chill of excitement up my spine. I've seen my husband fuck women, I liked it, but it was no longer that sexual thrill for either of us that it had been the first few times. We hadn't done it for a while. However this whole situation turned me on. The fact that they were fans, that it would be a first for them, and how dirty it was that she was pregnant, just turned me on. \n\n\"We could do it Saturday,\" I texted. \n\n\"Next week?\" \n\n\"If you wanted, we don't have to,\" I replied\n\nThere was a pause again. \n\n\"Saturday's cool,\" \n\n\"Great, I have to go fuck my husband, you interrupted us. TTYL,\" I typed.\n\nI got a big grin smiley face back. \"TTYL, tell me about it tomorrow.\" \n\nI put down the phone and turned to my husband. Standing there in just my heels and stockings, I looked lustfully at my husband and said, \"Fuck me.\"\n\nHe quickly removed the rest of his clothes, grabbed my hair, and pulled me in for a rough kiss.\n\n\"What's up baby? You like the idea of your husband turning that cute little pregnant girl into a slut?\" he teased.\n\nHe pulled my hair pulling my lips from his. He looked me in the eyes. \n\n\"Yes,\" I hissed.\n\n\"So now you're all horny and want me to take care of it?\" he prodded.\n\nAgain I said, \"yes.\" \n\n\"If you want me to fuck you, show me how much.\" He had a smug smile on his face. \n\nPulling my hair down he pulled me to my knees. His semi hard cock level with my face. I took his cock in my hand. I loved the way it's thickness barely let me get my hand around it. I anticipated taking it in my mouth and I could almost feel the way it stretched my lips before I put my lips around it. \n\nBefore I took him in my mouth ran my tongue around the tip. I tasted the drop of precum on the tip savoring the taste. Then I took him in my mouth. I got the head through my lips and about one inch of the shaft. That was my limit. As I bobbed my head on his cock, I let some saliva drip out and as I stroked the shaft with my hand I covered it with my saliva for lubrication. \n\n\"Is this what you want to see Lisa doing?\" he said. \n\n\"Mmm hmmm,\" I mumbled while still sucking his cock.\n\n\"Aren't you the little pervert,\" he teased.\n\nI just moaned around his cock. \n\nHe pulled out of my mouth. \n\n\"Get up on the bed \" he ordered. \n\nI got up off my knees and climbed on the bed with my ass pointing towards him. On my hands and knees I looked back at him and said, \"Is this good?\"\n\nHe slapped my ass. \"Perfect.\"\n\nHe lined his cock up with my pussy and pushed right in driving my face and shoulders down to the mattress. \n\n\"Fuck yes,\" I said. \n\nHe started pumping my pussy. He grabbed my hips and pulled me towards him as he thrust into me. \n\n\"Tell me what you want,\" he said.\n\n\"I want you to fuck me. Make me cum all over that gorgeous cock,\" I replied. \n\n\"No, tell me why you're so fucking horny,\" he pushed.\n\nI knew why. The thoughts went through my head. As they did I came. The vision in my head was so real. \n\n\"Oh my god,\" I moaned. \"Don't make me say it.\" \n\n\"Tell me,\" he pushed.\n\n\"I want to see you fuck her,\" I panted as he thrust into me. \"She's been such a good girl. I love the idea of her being a slut.\" \n\n\"Whose slut?\" he demanded. \n\n\"Your slut,\" I came again. \"I want you to fuck her. I want to see John's face as you take his innocent little wife in front of him. I want to see you make her cum the way you make me cum.\" \n\nHe started pumping me harder.\n\n\"That's it fuck me. Pull out, cum on my ass. Cover me with cum.\"\n\n\"Yeah?\" he asked. \"Do you want me to cum on the little slut too?\"\n\n\"Yes, cum on her pregnant little belly as her husband watches. Let me lick it off her.\"\n\nHe pulled his cock out of me and groaned. I knew that he had his hand around his cock and was jacking off. I dropped one hand to my pussy. \n\n\"That's it baby, cum on my ass. Jack off all over me.\" \n\nMy fingers were in my pussy. I was soaking wet. \n\nI heard him gasp and felt the first shot cum cum hit my ass, hot sticky. I came on my fingers. Spurt after spurt hit my ass. I sighed happily as it covered me. I pulled my fingers out of my pussy and licked them clean. \n\nAfter I just stayed there in that position. My husband went to the bathroom. I felt the cum drying on my ass. I loved the feeling of cum on my skin. I played with my pussy a bit more and had one more small orgasm. \n\nHe came out of the bathroom with a warm towel and started cleaning the cum of my ass. It felt good, I sighed.\n\n\"You're a pervert,\" he said matter of factly.\n\n\"I know,\" I smirked. \"How do you think I write such dirty stories.\" \n\n\"Slut,\" he laughed.\n\n\"I prefer cum slut or fuck slut,\" I replied in a haughty tone.\n\nHe tackled me, pulled me on the bed, and kissed me. I fell asleep in his arms.\n\nWe were driving home when Lisa texted. \n\n\"How was your fuck?\" she texted. \n\nI replied, \"LOL. I got fucked good.\" Smiley face.\n\n\"Tell me\" she responded.\n\nSmiley face \"Let's see. I got fingered in the car on my way to the hotel, took off my dress in the hall, walked that way to my room, gave hubby a BJ, got fucked from behind, he came on my ass. I came at least 3-4 times. You?\"\n\n\"OMG, that sounds amazing,\" she responded.\n\n\"It was,\" I texted. \"And you?\"\n\nFrownie face. \"I was so hot when we got home. So was he. As soon as we got in the door I pushed him on the couch, unzipped his pants, and took out his cock. I pulled off my panties and straddled him on the couch, my pussy was so wet he went right in, but he came in like 1 minute.\" ",
        "\"Oh no,\" Frownie face, I responded. \n\n\"We went to bed, we tried again later, but he couldn't stay hard.\"\n\nI was telling my husband the conversation as we texted. \n\n\"Ask her what she wanted,\" he prompted. \n\n\"What did you want?\" I asked. \n\n\"I want to get fucked like you.\" Evil grin face, she said. \n\n\"I do get well fucked,\" I replied. I looked my husband. He raised a questioning eye. I told him what we texted. \n\n\"God that sounded so good,\" she texted. \"How do I get John to fuck me like that?\" \n\n\"Doesn't seem the type. May have to get my husband to do it.\" \n\nThere was a pause. \n\n\"John and I talked about that last night.\" \n\n\"About what?\" I played coy. I wanted her to spell it out.\n\nAnother Pause\n\n\"What it would be like for Kyle to fuck me.\" \n\n\"Oh? What did you say?\"\n\n\"I said I loved John and didn't need anyone else.\" \n\n\"And?\" I pressed.\n\n\"He said when we were in the restaurant he pictured your husband fucking me. That's why he came so quickly when we got home.\"\n\n\"How'd that make you feel?\" I asked.\n\nAgain a pause.\n\n\"I jacked off after John fell to sleep.\" \n\n\"Did you tell John?\" \n\n\"No,\" \n\n\"Why not?\" I asked. \n\nAnother pause\n\n\"I didn't think he deserved to know.\" Frownie face. \n\nI didn't know what to respond. I changed the subject.\n\n\"Well, we had fun this weekend. We look forward to seeing you again.\"\n\n\"I can't wait to see you again also,\" she said. \n\nI closed the text. My husband asked, \"How is she?\" \n\n\"Horny,\" I laughed.\n\n\"I like horny,\" he replied.\n\n\"We'll see, but I think you're going to be happy with her type of horny,\" I laughed. \n\n\"And him?\" he asked.\n\n\"You're really curious. Why? Do you want to fuck her that badly?\" I teased. \n\n\"Look who's talking,\" he said. \"Little miss fuck me while I talk about her.\" \n\nI laughed. We laughed and teased each other the rest of the ride home. \n\nOur week went by normally. Truthfully, except for when Lisa texted me, I barely thought about it. We'd had planned to meet couples before. Even couples I knew we were going to fuck. It's like any other plans for the weekend. I thought about, but didn't dwell on it. \n\nLisa texted me at least twice a day. Our typical flirtatious chat took a back seat. It was still there, just more understated and less often. The topics were ones I expected. \n\nHow nervous and excited she was.\n\nHow Her husband seemed standoffish, but talked about our visit and next visit a lot. \n\nWhat my husband liked in bed\n\nThen some normal girl stuff. What should she wear? What should she serve? What did we drink?\n\nI reminded her that nothing needed to happen, and even if it did, no means no. If we do do something, the moment anyone wants to stop, we stop. \n\nShe seemed particularly focused on what. She should wear. I told her both Kyle and I were partial to dresses, stockings, heels, and cute little panties. \n\n\"I wish we'd met before I got pregnant,\" Frownie face.\n\nI assured her we both found her adorable.\n\n\"I feel fat,\" she texted \n\n\"You're adorable,\" I replied. \n\nHer next text changed the topic\n\n\"Stockings with garters?\" she asked.\n\n\"Both, with and without,\" \n\nI got a smiley face back. \n\nI kept my husband apprised of the conversations. The whole week we had great sex every night. Most of it revolving around stuff we wanted to do to Lisa. It was a fun week. \n\nFinally Saturday rolled around. We headed out a little early so we could get a nap. We checked into our hotel, unpacked, and snuggled in each other's arms. \n\nWe always sleep naked. My hand slid down his body to his cock. It was semi hard. I started to lightly stroke it. He smiled at me. \n\n\"Want something?\" he asked. \n\n\"I figured I should get some now, it might be busy later,\" I responded. \n\nHe rolled me over and positioned his now hard cock between my legs. \n\n\"It's yours,\" he answered. \"I would never do anything unless you wanted me to. Do you want me to fuck her?\" \n\n\"Yes, I think it would be hot.\" Then I laughed. \"Besides, it will give me something to write about.\" \n\nHe entered me. I didn't need any more foreplay than kisses. I was already wet. We made love. This is something between me and him. It's slow, tender, loving. I get lost in it. Mostly long slow strokes. Lots of kissing. His lips on my neck, shoulders, ears, chest, nipples. His warm breath against my skin. His hands caressed me. At times his hands held mine, holding me lightly down. Me giving my body to him, him taking me. Together like we belong. \n\nI felt my orgrasm building. This was a slow burn. It started in my hips and moved through my body. I swear I could feel it in my fingers. I felt a warm gush soak his cock inside of me. I wrapped my legs around him and pulled him into me. As I did, I felt him shudder and come. I could feel it deep inside me. I moaned and came again. \n\nAfter a moment he rolled to my side bringing me with him. My leg over his hip he was still inside me. We always did this. At almost twice my weight, this allowed us to cuddle as I felt his cock shrink inside me. \n\nWe fell asleep in that position. \n\nWe woke up with plenty of time to get ready for dinner. We jumped into the shower together. Soaping each other up I started to get hot again so I got on my knees and started sucking his cock. I loved sucking his cock. It's both submissive and being in control. He put his hands on the back of my head. I pulled away..\n\nHe had a pouty look on his face. \n\nI kissed the tip of his cock. \"Gotta save this. You may need it tonight.\"\n\nLisa texted again confirming we were coming over. She asked what we did that afternoon. I described what my husband and I did. \n\n\"Mmmmm,\" she said. \"Even that sounds great right now.\"\n\n\"Well, we'll see what we can do.\" Winky face, I replied. \n\nThen just to make sure she knew, I reassured Lisa again. No expectations. No means no. \n\n\"See you soon,\" she replied. Smiley face. \n\nKyle was almost dressed. A pair of black boxer briefs, dressy jeans, and a collared button down shirt. I loved that shirt. It was a deep blue and brought out the blue in his eyes. He left it untucked. I loved the way he looked. A small dash of my favorite cologne and he looked so sexy I almost didn't want to go out. \n\nI got dressed. A sheer black thong, black stockings and garter belt, and a matching bra. Over that I wore a black long sleeved sheath dress that hugged my every curve. When standing still it just barely covered the tops of my stockings. \n\nMy husband looked at me. I love it when he looks at me that way. \"Wow, you look like you want to get fucked,\" he said. \n\n\"Not tonight,\" I said. \"Tonight I'm dressed to set an atmosphere. To be looked at, but not touched.\"\n\n\"I'm not guaranteeing I won't touch you,\" he laughed.\n\n\"You, and Lisa for that matter, can touch all you want,\" I assured him. \"John gets to look.\"\n\n\"Lisa?\" he said with a raised eyebrow.\n\n\"Never know,\" I smiled. \"Let's go.\" \n\nWe got in our car and headed for Lisa and John's place. Kyle fingered my pussy the during the whole ride. I worried about staining the seats. \n\nHe laughed and said, \"it's better than that new car smell.\" \n\nThey lived in a nice apartment complex. All the upper units had a balcony. The lower units a small fenced yard. Their apartment was 208 so we figured second floor. \n\nWe went up to the apartment and rang the bell. Lisa answered. She looked adorable. She was wearing an outfit only a girl in her young 20s could get away with. It was kind of sexy sweet. First thing I noticed was her over the knee socks. They were not thigh high stockings. They were the cute semi stockings you see on younger girls. They were white and light pink with a ruffle at the top of white edged with a darker pink. With the stockings she had on dark pink heels. \n\nHer dress was a white long sleeved jumper. The material hinted at her curves and her belly. It came about 2 inches below her ass. There was plenty of thigh between her stockings and hem. I could tell she was wearing a bra under it. She looked sexy adorable. \n\nJohn was behind her. He looked nervous. \n\n\"Come on in,\" said Lisa. \n\nAs I stepped through the door Lisa gave me a big hug and a kiss on the cheek. I remarked how nice she looked. \n\nShe stepped back and did a slow twirl. \"You like it? John helped me pick it out.\" \n\n\"It's adorable,\" I said. \"Kinda sexy too.\" \n\nShe smiled. \"Kind of what I was going for,\" she said. \n\nKyle was behind me still in the doorway. She went to hug him. Her hug matched the one she gave him when we left the restaurant last week. Her arms went around his neck, his hands to her hips. She stretched up to kiss him on the lips. \n\nThis time, instead of letting it go at that, my husband pulled her to him. Her body pushed against him and they kissed. This time it was a real kiss. It didn't last long, but we all knew what it was. \n\nI turned to John and shook his hand. \"Your wife looks delicious tonight,\" I said. \n\nHe couldn't take his eyes off Kyle and Lisa. \"Thank you,\" he mumbled. \n\nLisa turned, and with Kyle's arm still around her waist, and hers around his, said, \"Come on in and sit down. John will put the chicken on the grille.\" They had a grille out on the balcony. \n\nThe apartment wasn't big. Standard 2 bedroom fair with a living room/eating area and a galley kitchen. Maybe 1000 sq feet. It was cute and tastefully, if not cheaply decorated. The living room had a couch and a chair. Kyle escorted Lisa to the couch and they sat down. I sat in the chair. \n\nWhen I sat down my dress slid up and my stockings showed. John was watching through the sliding glass door that led to the balcony. I noticed his eyes go to my legs. I smiled. He also looked at Kyle and Lisa on the couch. Kyle had his arm around Lisa's shoulder and they were sitting with their bodies touching. \n\nAfter he put the chicken on he came to join us. There was nowhere for him to sit. He took a chair from the kitchen table and sat down. \n\nLisa jumped in and started by commenting on my dress. \n\n\"I love that dress,\" she said. \"I'm not sure I'd be able to wear it with garters like you do. I don't think I'd feel comfortable in public.\" \n\n\"Well, we'll have to go out in public and get you used to it,\" I laughed.\n\nKyle placed his hand on Lisa's bare thigh. \"I think you look great,\" he said. If I were John I'd take you out and show you off all the time.\" \n\n\"I don't think John would be comfortable with that,\" she replied? \"Would you John?\"\n\nJohn almost didn't realize she was talking to him. His eyes were focused on Kyle's hand moving up and down Lisa's thigh. It ran from the hem of her dress to her stocking top and back. His fingertips lightly sliding under the hem a bit. \n\n\"I would love to see her out like that. I love it when men look at Lisa, but I'd be embarrassed to have those men looking at me also. Lisa's so beautiful and I can just imagine all those men thinking 'What's she doing with him'.\"\n\nI changed the subject. \"So Lisa tells me you enjoy my stories. Which ones do you like the most?\" \n\nHe named 2 stories. Both of them cuckold stories. \n\n\"Why those?\" I asked. \n\n\"Well,\" he replied. \"It's the idea of a man taking a woman to a place her husband can't take her.\"\n\n\"Wow,\" I said. \"You seem to really be in touch with that.\"\n\n\"With the help of your stories Lisa and I have been able to discuss how we feel.\"\n\nThen he asked, \"Where do you get the ideas for your stories?\" \n\n\"They come from all over,\" I said. \"Some from real life encounters. Some are my fantasies, some are Kyle's. Sometimes there is a scene in another story. Just one moment that I find so hot, I write a story around it. Every once in awhile a fan asks me to write a story. If I can get into it I do. I like stories where the woman discovers her inner slut. Usually, if they've already been slutty, it's not something I can get into.\" \n\n\"And your cuckold stories?\" he asked. \n\n\"Well, as you know, Kyle has experience there. The idea of turning someone (I paused) someone like Lisa into a slut and you into a cuckold just turns me on. \n\nJohn said, \"I have to check the chicken.\" \n\nI looked at Kyle and Lisa, Kyle still had his hand on Lisa's thigh and his arm around her. Lisa was turned in to face him. \n\nLisa stood up. \"I should help John,\" she said. \n\nLisa leaned in to kiss my husband. I could see John watching from the balcony. This kiss was not anything but a sexy kiss. I could see her mouth part and her tongue dart into his mouth. Kyle's hand slid the hem of her dress up as he pulled her in. \n\nLisa got up and walked out on the balcony. She gave John a quick kiss on the lips and they talked for a minute. Lisa then went in the kitchen and started bringing out the rest of the food. \n\nIt was fun to watch as when she bent over the dress would slide up. Not so much that it would show anything but the tease is always fun. \n\nJohn brought the chicken in and we all sat down to eat. My husband was the first speak. \n\n\"Your wife is a great kisser,\" he said to John. \"I also like watching her. The outfit you picked out is perfect. I love watching the expanse of her thigh between her stockings and her dress.\n\n\"It's Fun when you know someone's looking isn't it?\"\n\nJohn nodded\n\n\"Did you have to go out and buy the outfit,\" Kyle asked, \" or did you already have it?\"\n\nLisa answered, \"We went shopping. It was really fun and John had an erection the whole time. Didn't you John?\" \n\nJohn didn't answer. I looked at him and asked, \"is that true John? Did it make you hard thinking about picking out a dress for my husband to see?\" \n\nJohn nodded. \n\n\"Well you did a great job,\" I said. \n\nJohn smiled, he seemed pleased with himself. \n\nThrough dinner we continued the conversation about my stories. We went into detail about which stories were triggered by true events or were fantasies. We even brought them up on his iPad so we could go through and make sure we didn't miss any. \n\nDinner was coming to an end and Lisa got up to help clear the table. As she was standing, bent over beside my husband picking up dishes my husband reached out and ran his hand up the back of her thighs up under her dress. You could tell his hand was on her ass. \n\nLisa just stood where she was. She looked up from the dishes and looked John in the eye. \n\nHe looked at her, then looked down. He looked embarrassed. A small smile came to Lisa's face. \n\nShe stood up straight and looked at Kyle. She smiled. \n\nLooking back at her husband she said, \"That feels nice.\" \n\nHe looked up again. He looked scared, but there was something else there. \n\nKyle looked at me. \"She's wearing a thong. I wonder what color it is?\" \n\nI looked at Lisa. \"Come here sweetie.\" I motioned her between me and her husband. \n\nShe was standing looking at me with her back to her husband and mine. I pulled her dress up in front so they couldn't see. \n\n\"Those are adorable,\" I said.\n\n\"Thank you,\" she replied.\n\nThen I told her to turn around. She did and was facing her husband. \n\n\"John,\" I said. \"My husband wants to see what color thong your wife is wearing. Do you want him to?\" \n\nHe looked from her face to mine and back. I could tell she was looking at him. \n\n\"Yes,\" John said.\n\nI stood up behind Lisa, reached out, grabbed the hem of her dress and slowly pulled it up. Lisa didn't move as I did. I could see John's eyes follow the hem of the dress as it went up. I could see her cute little ass as it came into view. I knew the front of her thong was beginning to show. \n\nI pulled the dress up over her pregnant belly. She had that adorable bump that you get 5 months in. \n\nThe thong was light pink and white like the dress with dark pink trim around a ruffled waist band. She looked adorable. An innocent pink and white dream from her heels to her dress now pulled up over her belly. \n\nI caught my husbands eyes. He smiled at me. I blew him a kiss. \n\n\"John,\" said my husband. \"Did you help pick out the matching thong too?\" \n\nJohn nodded. Lisa spoke up. Looking at her husband she said, \"John actually picked it out himself. He brought it home the day after we bought everything else.\" \n\n\"John,\" I said. He turned his head to look at me. \"You bought this thong for this moment. So we, or more specifically, my husband would see it. Tell me how it feels. Is it what you expected?\" \n\nHis eyes went from me, to his wife, to Kyle and back to me. He nodded. \n\nI smiled. \"You're not getting away that easy. Tell us how it feels, how you feel.\" \n\nHe looked around the room again. He looked down at the table Lisa put her hand under his chin and guided his eyes back to her's. \n\nShe was standing there still exposed. Looking at her husband she said, \"Tell us.\" \n\nJohn mumbled something about good. \n\n\"Speak up,\" Lisa told him.\n\n\"It's amazing,\" he said. It's more intense than I imagined, and I've imagined a moment like this for a long time.\" Then he added, \"I'm sorry.\"\n\nWith her hand on his face Lisa said, \"Don't be sorry, I'm your wife. I love you, I want to make you happy. I love the way this feels too.\" \n\nThen she teased him a bit. \"Now that he's seen them. You know they're going to come off soon. Don't you?\" \n\n\"Yes,\" said John. \n\n\"Me too,\" said Lisa. \n\nThey were giving each other permission to do this. \n\nAlthough it was clear they were consenting, I wanted to push John a bit more. This wasn't just about sharing, this was about cuckolding. \n\n\"John, why don't you clean up the dishes while we go into the living room.\" \n\nI took Lisa's hand and walked to the couch. Kyle followed. \n\nI reached the couch and turned to face Lisa. I pulled her face to me and kissed her on the lips. Her lips parted and I felt her tongue dart into my mouth. We kissed like that for a few moments. \n\nWhen we stopped I said, \"My husband's going to fuck the hell out of you.\"\n\nI saw John watching. I turned Lisa to my husband. She looked at him shyly. His hands reached under her dress. Grabbing her by the ass and the small of her back he pulled her to him and kissed her. She put her arms around his neck. Her ass was completely exposed. Kyle's hand almost covered an entire cheek. \n\n\"Are you done with the dishes?\" I said to John.\n\n\"Almost,\" he replied.\n\n\"Well, hurry up. You don't want to miss your wife getting fucked,\" I said. \n\nJohn sped up. I watched Lisa and my husband kiss. His hands still under her dress. It was now around her waist and he had one hand caressing her pregnant belly as he kissed her. It would slide from the waist of her panties to just below her bra and back. She gave a light moan. \n\nJohn finished the dishes and came over. Lisa's dress had a zipper in back. I unzipped it. Lisa kissed my husband more passionately as I did. \n\nI was enjoying this. I was loving the look on John's face as he was being cuckolded. My husband was right. I'm such a pervert. I love orchestrating the scene as a woman let's out her inner slut. \n\nJohn was standing there not sure what to do.\n\n\"Why don't you help Lisa out of that dress,\" I said. \n\nJohn looked from me to Lisa. Lisa stopped kissing my husband and looked at John expectantly. Her shyness was leaving her. The girl I had chatted with, sexted with, and read my stories was starting to come out. She was taking cues from my stories. \n\n\"Yes John, I want to fuck Kyle. He can't very well fuck me if I'm still dressed. Help get this dress off me so he can see your wife.\" \n\nJohn came up behind her. Again he first looked at all our faces. Lisa and I smiled at him.\n\nKyle spoke to him. \"It's ok John, but if you want to see your wife fucked, you'll have to help undress her.\" \n\nJohn reached for the hem of her dress and pulled it up over her head. She raised her arms to make it easier. \n\nThe dress came off over her head. Lisa looked at her husband and said, \"Thank you John.\"\n\nLisa looked like a dream. That firm 25 year old skin. She was all pink and white. The bra matched the thong. From behind you could barely tell she was pregnant. When she turned you could see how her thong sat right below the gentle swelling of her belly. ",
        "\"God you're beautiful,\" I said.\n\n\"Really?\" she asked.\n\n\"Really,\" my husband and I almost responded in unison.\n\n\"You don't think I'm fat?\" she asked.\n\n\"Fat?\" laughed Kyle. \"God no. You have a very sexy, totally fuckable body.\"\n\n\"Fuckable?\" she laughed. \"Fuckable, I like that.\"\n\n\"Did you hear that John. He thinks I'm fuckable,\" she said. \n\n\"Show me those tits,\" Kyle told her.\n\nShe reached behind her. unclasped the bra, and let it drop to her hand. \n\n\"Give it to your husband,\" said Kyle. \n\nLisa turned and took a step towards John. \"Here darling,\" she said as she handed it to him. \"\n\nHe just looked at it for a moment. \"Take it John,\" I want to go back and let Kyle look at my tits.\" \n\nHe reached out and took it. Lisa returned to my husband. \n\nKyle caressed Lisa's tits. She moaned as he did. Kyle whispered something in her ear. I had an idea what he told her. \n\nShe returned to John. She was in her stockings, heels, and pink thong. I knew what she was going to do. We'd talked about a scenario in some stories. We both thought it was hot. As she stood in front of him he looked up at her.\n\n\"John, we're here,\" she started. \"We've talked about this and now I'm standing \u00bd naked in front of a man who's willing to let you, no that's not right. In front of a man who can show you how a real man fucks. Are you ready?\" \n\nJohn looked at each of our faces and nodded. \n\n\"Well, I want to fuck Kyle. I want him to fuck me in ways you never have. She's told me how Kyle fucks her, I want to be fucked that way. Do you understand?\"\n\nAgain John nodded.\n\n\"OK,\" she said. \"If you want this. Now is when you choose. I still have my panties on. The moment they come off, I become Kyle's slut, and I won't promise it ends there. Do you understand? After tonight I won't be the same girl.\"\n\nAgain he nodded. I noticed his cock was hard in his jeans. \n\n\"Then it's your move,\" she said. \n\nShe stood in front of him looking at his face. He looked from her face, to mine, to Kyle's. He looked like he was struggling. Finally he sighed. Looking down at the ground he put his hands in the waistband of Lisa's thong and slowly pulled them down over her hips and thighs. They fell to the floor and he held them as she stepped out of them. \n\nAs he did Kyle took off his shirt. \n\nShe bent over and kissed John on the top of his head. Then she turned back to Kyle. \n\n\"Fuck me,\" she said. \n\n\"Not that easy slut,\" Kyle said.. \"Suck my cock, show me that you're worth fucking.\"\n\nLisa dropped to her knees in front of him, undid his zipper, and pulled Kyle's cock out. She held it in her hand. It was not completely hard, but almost and it was already impressive in thickness. She looked at me. \n\n\"Wow, you weren't kidding,\" she said. \n\nAs she was looking at it, she stroked it. \n\n\"Look at this cock John,\" she said as she held it. \"He's not even hard and he's bigger than you.\"\n\nJohn just stared. His hands were in his lap on top of the bulge is his pants. \n\nLisa turned her attention to Kyle's cock. There was a drop of precum on the tip. She ran her finger through it and brought it to her lips. \"Mmmmmmmm.\" She made a big show of tasting the pre cum. \n\nKyle put his hands on the back of her head. \"Suck it,\" \n\nLisa licked the tip and swirled her tongue around it. She had her hand wrapped around the shaft. Her fingers barely touched. She stretched her mouth over the tip. Like me she could suck the tip and maybe an inch. She used her hands to stroke it. As she did it reached its full size. \n\nShe stopped. \"Oh my god John. When was the last time I sucked your cock. This feels amazing. Do you like watching your pregnant little wife with a big cock in her mouth?\" She teased. \n\nJohn was watching still rubbing his cock through his pants. \n\n\"Pull it out sweetie,\" Lisa said to John. \"Let's see how it compares to Kyle's.\" \n\nLisa went back to sucking Kyle's cock. John looked at me. \n\n\"Go ahead,\" I said. \"Pull it out. You can jack off while you watch.\"\n\nJohn unzipped his pants. Lisa didn't even look. She was working on Kyle's cock. \n\nJohn pulled his cock out. It was perfectly adequate. Average sized at about 6 inches but compared to Kyle's it did look small. \n\nKyle addressed John. \"Your pregnant little wife here is pretty good at this. I like fucking her mouth.\" \n\nThen to Lisa, \"Have you ever sucked a cock this big before?\"\n\nLisa shook her head no. Kyle pushed her away and sat on the couch. \"Undress me,\" he said. \n\nLisa did as she was told. Starting with his socks and shoes then pants and underwear. She was still in her heels and half stockings. \n\nAs soon as she was done she started sucking Kyle's cock again her naked little ass and pussy were facing her husband and I. It was hot. \n\n\"Kyle,\" I said. \"Wait till you fuck the little slut from behind. She has the cutest ass and pussy.\" Then to John, \"it's fun to watch her, isn't it.\" \n\nJohn was stroking his cock. He looked at me. My dress had slid up over my stockings, showing my garters and the bottom of my panties. \n\n\"I guess there's no harm in you looking,\" I said. I pulled my dress up to my hips. \n\nI returned my attention to Kyle and Lisa. Kyle had a handful of her hair. His cock was covered in her saliva. He had his hand wrapped around his cock. He'd slide it between her lips, then pull it out and rub his wet cock across her lips and cheeks. \n\nShe reached and and replaced his hand with hers, licking his cock, and imitating what he did. She moaned as she slid his wet cock across her cheek. \n\n\"Mmmm,\" she moaned, arching her head back. \"God, I love a nice cock. I forgot how much.\" \n\nShe took his cock back in her mouth. \n\nKyle grabbed her head and pulled her up off his cock. \"Stand up,\" he said. She stood up in front of him.\n\n\"Is your pussy wet?\" he asked her. \n\n\"God yes,\" she said. \n\n\"Show me,\" he said. \n\nStanding in front of him, facing him she widened her stance a bit. I could see her shoulders hunch forward as she slid her fingers in her pussy. She pulled them out and showed them to Kyle. I could see them glistening with her juices from where I was sitting. So could John. \n\n\"Suck them clean,\" ordered Kyle. \n\nLisa brought her fingers to her lips and licked them clean. Kyle pulled her down and hissed her. \n\n\"Mmmm,\" he said to John. \"I love the way your wife's lips taste covered in pussy.\" \n\nJohn was still stroking his cock. \n\n\"Turn around slut,\" ordered Kyle. Lisa turned and was facing us. I saw Lisa widen her stance a bit. One of Kyle's arms wrapped around her belly to steady her. We could see him slip his other hand under her legs from behind and start playing with her pussy. \n\nShe put her hands on the arm that was around her belly to steady herself. She sighed and rolled her hips on his fingers as they entered her. There was a sharp intake of breath as we saw his fingers play with her clit. She had her eyes closed and head arched back. She was trying to fuck Kyle's fingers as hard as she could.\n\n\"John,\" said Kyle. \"Can you see how wet your pregnant little wife is?\" \n\nLisa opened her eyes and looked at John.\n\n\"Yes,\" said John.\n\n\"Lisa, does John make you this wet?\" asked Kyle. \n\nLooking right at John she said, \"No.\"\n\n\"Cool,\" said Kyle. Then to me he asked, \"Ready to go?\" \n\nI knew what he was doing. I saw a look of fear in Lisa's eyes.\n\n\"Sure,\" I said. \n\nLisa burst out, \"Please don't go. Please.\" She looked at me and said, \"Please let Kyle fuck me. Please.\" \n\nI looked at Kyle. \"Do you want to fuck the slut?\" \n\n\"Yes, I'll fuck her. I like the idea of fucking the pregnant little slut in front of her husband. But only if he asks me too.\" \n\nWe all looked at John. \n\n\"Please,\" said Lisa.\n\nJohn nodded.\n\n\"I'm sorry John, what was that?\" Kyle replied.\n\nJohn looked from me to Kyle and back to his wife's pleading eyes.\n\n\"Please fuck her,\" said John. \n\n\"Gladly,\" said Kyle. \n\nWith Lisa still facing us he pulled her back onto his lap. We could see his cock line up with her pussy. He slowly let her sink down on it. \n\n\"Ohhhhhhh,\" Lisa moaned as she sat all the way back and took in his entire cock. \n\n\"Oh my god John. I feel so full,\" she told her husband. \n\nShe started rocking her hips back and forth on Kyle's cock. Kyle reached around her and cupped her breasts. He lightly pulled on her nipples. She moaned again. One hand played with her tits the other slid over her pregnant belly. He pulled her back against his chest. We could see his cock in her pussy glistening with her juices.\n\nWith one hand he played with her tits. The other played over her belly and down to her clit. As he fucked her he continued to play with her tits as he started to rub her clit. Her body was splayed out so John and I could see everything. \n\nLisa was moaning and rocking herself on Kyle's cock. All of a sudden she let out a small yelp followed by a sigh. It was so cute I couldn't help but laugh. \n\n\"Is that how you cum?\" I asked. \n\n\"Sometimes,\" she said shyly.\n\n\"Kyle, get this girl somewhere you can really fuck her. I want to hear her really cum hard.\" \n\nWhen I said that John moaned. He tried to cover his cock with his hand but some came through his fingers and onto his pants. He shot a huge messy load all over his shirt and pants. I forgot how much young guys cum. \n\nKyle continued fucking Lisa. \"Lisa,\" he said. \"Did you like watching your husband cum while I fucked you.\" \n\n\"God yes,\" she moaned. \"I feel so fucking dirty. Used.\" \n\n\"Play with your pussy. Make yourself come again,\" Kyle ordered. \n\nLisa leaned back against Kyle. Legs spread over his lap. You could clearly see his cock stretching her pussy open. Her little baby belly stood straight out. She lowered her hands to her pussy and started playing with her clit and moaning. Her innocent little pink stockings and heels made it even dirtier. \n\nI couldn't take anymore. I stuck my fingers in my panties and started jacking off. I couldn't help it. I loved seeing this cute young thing displayed in such a slutty way. My pussy was soaked and my clit on fire. \n\nJohn wasn't sure where to look. He took his cum covered hand and wiped it on his pants. His limp cock still hanging out. His eyes went from Lisa to me.\n\nLisa saw me jacking off. Her eyes met mine and she started playing with her clit and grinding on Kyle's cock even harder. \n\nAs I watched her I moaned, \"God yes. That's it you little slut. Cum on my husbands cock. Look at you. Look at you all exposed being fucked in front of your husband.\"\n\n\"What else will you make the slut do?\" I asked Kyle. \"Show her off on public? Make her suck a strangers cock? Maybe make her fuck one of John's friends in front of him?\" \n\nAll those dirty ideas were making me rub my clit furiously. I could see them having the same effect on Lisa. I also noticed John's cock starting to come to life again. \n\nLisa was moaning. \"Oh my god. That is so slutty. John do you want me to be that much of a slut? Do you want your friends to know what a slut I can be? Oh my god John, oh my god,\" she hissed as her whole body shuddered and she came again. \n\nShe fell back against Kyle catching her breath. As she did I came.\n\n\"Fuck yes, you little slut,\" I said as I came. \"Fuck yes.\"\n\nI stopped to catch my breath. \n\n\"Take off that dress and come over here,\" Kyle ordered me. It felt nice. Sometimes I like being the slut too. \n\nI took the dress off and got down on my knees in front of them. Kyle's cock was still in Lisa's pussy. She had one finger still playing with her clit. Her fingers on both hands were glistening from the juices seeping out around Kyle's cock. I knelt in front of them. Then I took the hand Lisa was not using to play with her clit and started licking her fingers clean. Lisa sighed, moaned, shuddered and came again. \n\nKyle gently pulled out of Lisa and helped her to stand up. As he did he said, \"Let's go fuck this slut in their bed.\" \n\nKyle, Lisa, and I started walking to their bedroom. Lisa in her pink stockings and heels. Me in my matching thong, bra, garter belt and stockings, and Kyle naked. John was still sitting in his chair, not sure what to do. \n\nKyle turned to John, \"You can come watch, but stay off the bed.\" \n\nJohn jumped up and followed us into the room. It was an apartment size bedroom. Barely room for the bed and dressers nowhere for John to sit. He leaned against the wall. I climbed on the bed on my knees and reached for Lisa. I pulled her onto the bed on her knees and pulled her close to me. Both of us kneeling on the bed, face to face, I kissed her. She kissed back. I felt her naked skin against mine as we kissed, her pregnant belly pressed against me. \n\nMy hands cupped that perfect ass. I pulled my face away from her lips. \"Having fun?' I asked.\n\n\"Oh my god, yes,\" she replied. \"I want more.\" \n\n\"Good,\" I said. As I moved back and pushed her head and shoulders down on the bed. She was now on her knees head and shoulders down. Ass sticking up in the air. \n\nI looked at my naked husband. That beautiful cock was standing out straight and hard. He knelt on the bed behind Lisa. His cock touching her pussy. I took my fingers and jammed them in her pussy to get them wet. \n\n\"Mmmmmm, wet,\" I said as she moaned. \n\nI got my fingers all wet then I spread her juices all over the head of my husband cock. I lined his cock up with her pussy and guided him in. As his cock penetrated her she moaned. He started pumping her pussy I kept playing with her clit as he did. When my fingers were slick with her juices I brought them to her mouth to lick clean. \n\nAs I did my husband started pounding her from behind. Long hard strokes. She grunted each time he thrust into her. \n\nI lay down on my side next to them and started playing with my pussy. It was hot and I was wet. Every once in awhile I'd pull my fingers out of my pussy and stick them in Lisa's mouth and she'd suck them clean with an \"Mmmmmmm.\" \n\nLisa's grunting turned to moaning. \"Fuck yes, yes, God yes. Fuck me. God fuck me. Uhn uhn, harder harder HARDER.\" \n\nMy husband pounded away at her pussy. I started rubbing my clit harder. I notice that John's cock was hard again and he was stroking it. \n\nLisa let out a loud, \"Oh my god, I'm coming.\" Her whole body shuddered as she grabbed at the bed sheets and held on. \n\nKyle stopped pumping her and let her catch her breath. \n\nLisa looked at me. \"I've never been fucked like that. That was awesome.\" Her breathing was still heavy. She was panting. \n\nJohn was still at the side of the bed watching. Lisa looked at him. \"Was it what you expected?\" she asked. \n\n\"You're beautiful,\" John responded.\n\nKyle pulled out of Lisa. She whimpered as he did. \"Get over here and fuck her,\" he said to John. She's not going to break. Fuck her hard. \n\nJohn climbed up behind her. I reached out and grabbed his cock just like I did Kyles and guided him in. \n\n\"Now fuck the little slut,\" I said. \"She just fucked another man. Fuck her like the slut she is. Not like your wife.\" \n\nJohn started pounding his wife. \"You like that? You like that you slut? You like being fucked by another guy in front of me? Your husband?\"\n\nLisa was more than thrilled. \"God yes. I'm your slut wife. Fuck me. Fuck me. God yes. Yes. Oh my God.\" \n\nKyle pushed me back on the bed and actually ripped my panties off me. I mean tore. With the material stuck in my garter belt he pushed me down on my back and rammed his cock into me. I yelped but as he started pounding me I got the rhythm. I loved his cock and watching Lisa getting fucked beside me was fucking hot. \n\nI grabbed Lisa's face and started kissing her as we were being fucked. She moaned into my mouth. \n\n\"Slut,\" I said.\n\n\"Fuck yes,\" she replied. \n\nI closed my eyes as I felt my climax come. God I loved being fucked. I loved creating a slutty situation. The whole scene was s fantasy come true. I came.\n\n\"Fuck Kyle. This is so fucking hot. I love you,\" I said. \n\nI think watching me cum was the end for John. His whole body shook as he rammed his cock into her one more time. We could tell he was coming. \n\nWith a \"Fuck yes,\" Lisa came again. \n\nThe only person who hadn't cum at all was Kyle. That wasn't uncommon. Kyle could fuck for an hour and sometimes didn't cum at all, but, I knew his triggers. I told Lisa to lay on her back \n\n\"Cum on baby. Cum for me. When you're about to cum pull out and cum on the little slut's belly. I'll lick it all clean. I'll eat every drop.\"\n\nKyle started pumping me hard. \n\n\"That's it baby. Pump me hard. Then cum all over her belly.\"\n\nLisa got the message. She spread her legs and started playing with her pussy. \n\n\"That's it baby! Cum on her slutty little pregnant belly,\" I coaxed. I want to eat your cum off of her. I want to show you what a slut I can be. Give her that cum, so she can give it to me.\" \n\nMy fingers were were playing with my clit. \n\n\"Please,\" begged Lisa.\n\nThat did it. Kyle pulled out of me and knelt over her belly stroking his cock. He unloaded on her pussy, her hand on her clit, her belly, and tits. I watched spurt after spurt of hot cum hit her body. I came again. As I came I could see Lisa cum all over her fingers as the hot jets hit her. \n\n\"Oh god, Mmmmmmm,\" she moaned. \n\nI couldn't wait. I leaned over Lisa and started sucking the cum off her body. I spent extra time on her tits and clit. \n\nKyle placed his cock over Lisa's mouth and said, \"Clean my cock.\"\n\nLisa didn't hesitate she wrapped her lips around his cock. Soft she could get most of it in her mouth. \n\nAfter she cleaned Kyle's cock he pulled me up and made me straddle her face. She didn't hesitate. Her tongue dipped right between my lips. She licked all the way up my slit and around my clit. I shuddered a little. Then she lightly sucked on my pussy lips and clit, then running her tongue around my clit. \n\nI know she'd never done this before, but whatever she was doing, she was doing it right. I shuddered and came on her face. I climbed off her and kissed her lips. I could taste my pussy and my husbands cum on her lips. I cleaned her face with my tongue. \n\nShe lay down next to me, between Kyle and I. He and I held hands across her belly. As we did she lightly played with her pussy. \n\n\"Well, we should get going,\" Kyle said. \n\n\"It's getting late,\" said Lisa. Why don't you stay here tonight.\" \n\nKyle and I agreed and Lisa set up the other room. \n\nI was exhausted and Kyle and I fell asleep in each other's arms.\n\nI woke in the middle of the night to the sounds of Lisa moaning. The bed was shaking. Lisa was straddling my husband and fucking him. Her head was thrown back and she was moaning as she ground her pussy into him. \n\nKyle had his hands on either side of her belly. \n\n\"That's it you pregnant little slut. Couldn't wait to fuck me again? How much my slut are you,\" Kyle Was saying.\n\n\"Fuck me. I'm your slut. I'll do anything for the 2 of you. My body is yours tell me what to do and I'll do it. I love John, but I'm your slut. John can learn, but you taught him first.\" \n\nAs I watched I started playing with my clit. \n\n\"Whose John's best friend?\" I asked. \n\nShe told me.\n\n\"If we made you fuck him, would you?\" I pressed. \n\n\"God yes,\" she moaned. \n\n\"Will you tell John when he wakes up?\" I asked. \n\n\"John's awake. I told him I was coming back with a cum filled pussy for him to fuck,\" she replied. \n\n\"Call him in here,\" I said. \n\nLisa called him in. \"They want to make me fuck Jim while they watch with you,\" she said.\n\nJohn looked down. \"Ok,\" he replied. \n\n\"God yes,\" she said. \"I'm going to love being your slut. I'll do anything. I've read your stories. Anything.\"\n\nI thought about my stories, cuckolding, incest, groups. I wondered about her family. I knew she had siblings. Her parents were actually younger than we were. I was still playing with my clit. Those thoughts made me cum again. \n\nI saw Kyle stiffen up. I could tell he was about to cum. ",
        "\"Fill her up. Cum in the little slut,\" I said. \n\nKyle came inside her. \n\nShe climbed off him. \"Clean him up,\" I said\n\nShe didn't hesitate. She took his cum covered cock in her mouth and cleaned it off. \n\nI looked at John. His cock was hard as a rock.\n\nLisa got of the bed and stroked it a bit. \"Come on honey,\" she said. Let's go to bed so you can fuck my cum soaked pussy. \n\nThe went back to bed. \n\nKyle kissed me and we fell back asleep. \n\nWhen we woke up the sun was shining. I pulled on my dress and put my underwear in my purse. I had clothes at the hotel. Kyle also dressed. We went out of the kitchen. Lisa was there in a little pair of boy shorts and a tank top that did not quite cover her belly. \n\n\"John had some stuff to do,\" she said. \"Want coffee?\" \n\nWe both took a cup. Lisa started babbling in that way only a 25 year old could. \n\n\"Oh my god, that was amazing. I've never been fucked like that. Jesus, I didn't know sex could be so hot.\" \n\nDid John like it?\" I asked. \n\n\"Yes,\" she replied. \"He wanted to ask you to visit again.\"\n\n\"We will,\" I promised. \n\nKyle looked at Lisa. \"Get those panties off.\" \n\nShe didn't even hesitate. \n\n\"Lean over the table.\" \n\nShe did so. Her legs apart a bit. She had a big smile on her face. \n\nKyle got behind her and pulled his cock out. He rubbed it up and down her slit a bit and then slid in her. \n\nI watched Kyle fuck her as I drank my coffee. She just grunted every time Kyle's cock thrust into her. \n\nWe heard the door and John walked in. \"Just fucking her goodbye,\" said Kyle. \n\nJohn came over, sat down at the table and watched. \n\nKyle looked at the clock. It was getting late, we had to check out of our hotel. He pulled out of Lisa. She groaned. \n\n\"We gotta get going,\" he said, and then to John, \"why don't you finish fucking the slut.\" \n\nJohn didn't hesitate. He unzipped his pants and started fucking Lisa where Kyle left off. We said goodbye and left. \n\nAs we stood outside the door we put our arms around each other and kissed. \"Let's do that again.\" I said. Kyle didn't argue. We headed for our hotel grabbed our stuff and headed home. \n\nWe visited them a few more times, Kyle always fucked her. She did say that John had become a little more forceful in their sex but also more careful as the pregnancy went on. She said he was more forceful after he watched Kyle fuck her. \n\nShe came to visit us just to get fucked and she and I also spent a night just the two of us. She told me she was dressing in more revealing clothes. As much as her pregnant body would let her. Especially when they went out or had friends over. She'd send me pics of her in cute dresses, naked, panties and bra. I always shared with Kyle. \n\nLisa and I continue to text and FaceTime. She often asks me if we had anymore plans for her. I've promised her we would after the baby was born. \n\n==============================\n\nI'm ending this story here. I'm calling it chapter #1. The baby is due in April. I'm not promising a chapter 2, but if there is one, I'll write about it."
    ],
    "authorname": "Imstillfun",
    "tags": [
        "cuckold",
        "pregnant",
        "fmf",
        "slut wife"
    ],
    "category": "Loving Wives",
    "url": "https://www.literotica.com/s/erotica-author-cuckolds-fans-ch-01"
}
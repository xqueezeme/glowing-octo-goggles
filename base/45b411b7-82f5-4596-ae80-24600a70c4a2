{
    "title": "Stray Cats Ch. 07 - Final Chapter",
    "pages": [
        "This is the last chapter of a story that I first posted in 2015 on this site. It's still relevant, well most of it is. I hope you enjoy it.\n\nOh, as a reminder, you might consider going back to read the opening chapters as much of who these characters are established there, But, as always, it's your choice.\n\nPlease leave a comment when you've finished, feedback is the lifeblood of a writer. \n\n-Dreamweaver594\n\nSudden changes.\n\n=ONE=\n\n\"Amanda's legs were spread wide as Dr. Julian Rogers, her OB-GYN, hovered around. The first baby was nearly crowning as Amanda pushed again. Dr. Rogers sat down between Amanda's legs and lifted the sheet back. Several nurses stood by waiting for the first delivery.\n\n\"Oh fuck this hurts!\" Amanda screamed, grabbing onto Alex's hand and squeezing tightly.\n\n\"One more push, Mrs. Wells, the first one is crowning, almost here,\" said Dr. Rogers.\n\nOutside in the waiting area, Kyle and Wendy burst through the entry doors to find Kim and Ray sitting quietly in a corner.\n\n\"We just got back from Vegas an hour ago,\" said Kyle, breathless. It was a long overdue wedding adventure that Wendy and Kyle promised to witness for his Uncle Willie and his wife Denise.\n\nKim jumped up, followed by Ray, and they both hugged Wendy then Kyle. \"Welcome home,\" Kim said with a big grin. \"How was it?\"\n\n\"It was a crazy ride,\" Wendy replied. \"How's Amanda?\"\n\n\"Still in labor as far as we know. She went into the delivery room about four hours ago.\"\n\n\"Alex will let us know as soon as possible, so what happened?\" Ray said gesturing for them to all sit down.\n\nKyle laughed out loud and Wendy just beamed. \"Picture a sixty year old man with a scraggly beard and a bad Elvis wig standing next to a woman who looks like she could chop down a tree with one swing of an axe. She was wearing a pink ball gown and a plastic Priscilla Presley wig. They were both leaning out of the moon roof of a solid gold Cadillac limousine screaming their heads off.\" Wendy shook her head in wonder. \"It was priceless.\"\n\n\"Gotta love family,\" Kyle grinned.\n\n\"We're glad you're back,\" Kim added with another hug for Wendy.\"\n\n\"As Amanda strained to push the first baby out there was a brief pause between contractions. She looked over to Alex sitting nearby. He was holding her hand, and coaching her to breathe. Her mind flashed to everything that had led up to this moment, from the look on his face as her stuff was dumped on the front lawn of Reilly's apartment house to the moment she pulled him into her to conceive this child.\n\nTears began to fall as she thought of Alex standing in the middle of Tom Reilly's backyard with his arms spread wide and a huge grin on his face. \"I think you live a very charmed life, Amanda Simpson, you got a 'do-over'. It's what happens when the universe deals you a hand that is so terribly wrong that in one fell swoop things are reset and you get to start again fresh. You are very blessed Amanda, and that is nothing to be sad about.\" He finished his announcement with a flourish and a bow.\n\nThat moment faded into an image of Alex leaning into her old boss Simmons's face and hissing, \"Believe me you little fuck, if you touch her I'll find you and fucking kill you,\" he whispered those words vehemently, barely audible, but loud enough for her to hear.\n\nThe impulse to push came once again and she squeezed his hand; then, as if to let her catch her breath, her contractions paused, albeit briefly.\n\nShe saw Alex dressed as April walking out of a shoe store in four-inch stilettos, her face flushed crimson. \"You are simply too dangerous to shop with,\" April whispered through clenched teeth. \"I was so incredibly embarrassed when that clerk fondled my ankles.\"\n\n\"Oh pooh,\" she remembered replying with a smirk. \"Tell me you didn't enjoy all that attention. You probably made that poor boy's week.\"\n\nShe closed her eyes and screamed as the baby pushed harder against her vaginal wall. \"Fffffuuuuuuuccccckkkkk!\"\n\n\"Hold on Amanda, sweetheart, you're almost there,\" Alex said using his free hand to dab her forehead with a damp cloth.\n\nShe looked up at him and smiled always wanting to remember this moment as she pushed harder. \"Oooohhh Mmmmyyy Goddd!\" And then release. The baby slipped free of her womb and into the waiting hands of her doctor.\n\nThe first child was born. \n\n\"It's a girl,\" Mrs. Wells,\" said Dr. Rogers and the delivery room was filled with the wailing of a newborn child. \"And she's a screamer!\"\n\n\"That girl has a healthy set of lungs,\" said a nurse, holding the remains of the umbilical cord.\n\n\"Do you want to cut the cord, Mr. Wells? It's customary these days,\" Dr. Rogers said offering Alex a pair of surgical scissors.\n\nAlex moved over closer to his daughter, held gently on her mother's belly as she screamed her head off. He took the scissors from Dr. Rogers and snipped the umbilical cord where the nurse indicated while the doctor quickly tied it off. Then the baby was passed to a second delivery nurse to be wrapped in swaddling and wait for her sibling.\n\n\"It looks like it's time for number two,\" said the nurse.\n\n\"The second one is nearly here, Mrs. Wells,\" the doctor said, taking up her position in front of Amanda. \"I can see the crown.\"\n\nAmanda looked across to Rachel. She reached out to hold her hand as she pushed again. She remembered the first moment when Rachel marched across Alex's room and shoved Amanda's hand into her crotch. \"Still want to be my friend?\" Rachel demanded. She remembered the piercing glare from her eyes that suddenly glistened as Amanda grinned and said, \"yes, I do.\"\n\nShe remembered watching Rachel, wearing a soft and flowing nightgown, walk softly across the living room floor of her apartment to kneel down in front of Amanda and Alex. Rachel leaned forward and laid her head into Amanda's lap as Amanda gently brushed Rachel's hair out of her eyes.\n\n\"I wish it could always be like this moment,\" murmured Rachel sweetly.\n\n\"So do I love,\" she whispered. \"So do I.\"\n\nFinally, she remembered the moment of recognition when Rachel understood what Amanda had done the night the three of them made love nine months ago.\n\nRachel glanced across to an exhausted April trying to catch her breath after such intense lovemaking. She leaned up on an elbow and gazed at Amanda's blissful expression. Then a curious thought played across her face. \"You're off the pill aren't you?\"\n\nAmanda remembered blushing as she smiled sweetly and nodded. \"I want your babies. I want a part of both of you to grow inside of me.\"\n\nRachel glanced across to April. Amanda could see the shocked expression on April's face grow from surprise into a wondrous smile as tears began to fall across her cheeks.\n\nHuge tears began to fill Amanda's eyes as well. \"I want to have your children, is that okay?\"\n\nRachel looked down at Amanda and then to April whose face was glowing, her eyes glistened in the candlelight. She looked back to Amanda and nodded whispering, \"Yes, thank you.\" How her eyes glistened the moment she understood the enormity of the gift that Amanda wanted to give to her and Alex.\n\n\"Holy Mother Of Gooooooddddd!!\"\n\nThe second child slipped from her mother's womb and landed gracefully into the waiting arms of Amanda's doctor. \n\n\"It was another girl,\" Dr. Rogers announced gleefully.\n\n\"And another screamer,\" added a nurse nearby with a wide grin.\n\n\"It apparently runs in the family,\" Alex said laughing as he watched the doctor place the second child on her mother's belly.\n\n\"Time to cut the cord, Mr. Wells,\" said Dr. Rogers.\n\nAlex glanced over to Rachel and smiled. \"I think it's Rachel's turn.\"\n\nAfter the cord was cut the babies were wrapped in swaddling and the nurses took both babies to the weighing station to run a series of tests. \"Both girls are nearly seven pounds, which is good. Responses are positive, everything checks out well,\" said the delivery nurse.\n\nShortly after that, Amanda was moved to her hospital room for recovery.\n\n\"Rachel, would you stay with Amanda while I step outside for a minute to let the rest of the family know what's going on?\"\n\nRachel nodded and looked down at her sleeping wife. \"She's going to be a beautiful mother, isn't she?\"\n\n\"Our children are blessed,\" he said as he slipped quietly out of the room.\n\nAlex walked through a set of double doors into the waiting area to find everyone sitting quietly. \n\nAs he entered the waiting area Wendy was the first to rush up and hug him. \"Well Dad, what's the news?\" Kyle, Kim and Ray joined her standing around Alex.\n\n\"Two beautiful girls, both healthy and real screamers, according to the nurses,\" Alex said with a chuckle. \"They're both nearly seven pounds which is good, and their mother is recovering in her room. The doctor said it would be a little bit before she's ready for guests, but it shouldn't be too long. I'll let you know as soon as she's ready.\"\n\n\"Congratulations! We can't wait to give her a hug,\" Kim and Wendy replied almost in unison.\n\nAmanda opened her eyes and saw Rachel sitting in a chair nearby. She was nodding off, trying to stay awake. It had been a long night of labor and delivery. Then she looked up to see Alex come back into the room.\n\n\"Hi sweetie, how's the mother of my children doing?\"\n\n\"I'm exhausted beyond description, but blissfully so,\" Amanda replied softly.\n\nRachel, roused from her slumber, reached forward to caress Amanda's forehead, pushing back a damp strand of hair. \"Are you okay, hon? Can I get you something?\"\n\nAmanda sighed and shook her head. \"Just stay with me that's all I have ever wanted.\"\n\n\"Forever, Sis, forever.\"\n\nAlex pulled a chair over and sat down. \"The delivery nurse just asked me for the names of the girls. I know we talked the other night but...\" His voice tapered off then he shrugged.\n\nAmanda smiled then she looked over at Rachel who took her hand and gave it a squeeze. \"I thought a lot about it after our discussion the other night. If I ever have a choice,\" she began slowly, \"I'd like to name my first born girl Ella, after my grandmother.\" She turned to Rachel. \"Rachel?\"\n\nRachel glanced at Amanda then to Alex who nodded with a smile. \"If I have a choice I'd like to name a girl Abigail, after my aunt who took me in and cared for me like I was her own when I was kicked out of my home.\"\n\n\"Those are both beautiful names,\" Alex said as he leaned back in his chair. \"Then, shall I tell the delivery nurse that Ella and Abby would love to see their mother as soon as they're able?\"\n\n\"Thank you,\" Amanda and Rachel whispered, their eyes glistening with tears.\n\nTwo weeks after Amanda returned from the hospital they had a baby shower and Rachel, Amanda, and Alex invited all their friends over for a big backyard bash in the Tom Reilly style of backyard bashes. Of course that included Tom and his wife, Nancy, Wendy and Kyle, Margaret and her husband Carl, some people from Amanda's job, some folks from Rachel's job, a couple of students from school, Kim and Ray of course, and Inez from the convenience store.\n\nAmanda chuckled about their new neighborhood. She met several of the neighbors and there seemed to be a bit of confusion on their part. \"The neighbors can't figure out if three girls live here or two girls and a boy or three girls and a boy.\"\n\n\"Every neighborhood has at least one or two old snoops. My neighborhood has at least a half dozen!\" Amanda exclaimed coming into the house one day. \"It's like we live on Wisteria Lane for God's sake.\n\nThe party was in full swing. Alex had installed a fire ring, like the one Tom Reilly had in his backyard, but learning from Tom, he set it far enough away from the deck so as not to catch anything on fire. Kim and Ray sat tending the bonfire and several of Kim's friends from the college joined them. Alex hadn't met them before as they were mostly first years.\n\nTom Reilly commandeered the grill, flipping burgers and hotdogs like a master chef. Nancy, his wife was helping Amanda and a couple of her friends from her office with the salads as Alex brought out another cooler filled with iced down beer. It was looking to be a great party.\n\nThe phone began to ring. \"I'll get it,\" Rachel shouted as she dashed into the kitchen and grabbed the house phone off the cradle.\n\nRachel stood in stunned silence as the person on the phone spoke to her. Alex glanced at Amanda and gestured to take his hand then he led her into the kitchen to stand next to Rachel. \n\n\"Yes, thank you doctor, I understand,\" murmured Rachel. She held the receiver a moment then replaced it in the cradle on the counter. \"That was Doctor Barnes, my mom's doctor in Springfield.\" Alex took Rachel's hand and led her to a chair at the kitchen table. Rachel sat dejected.\n\n\"The doctor said that my mom had fallen again and that she was in the hospital with a broken hip.\"\n\nAmanda pulled another chair up and sat down to wrap her arms around Rachel.\n\n\"He said Mom couldn't be on her own anymore. She has moments of disorientation that may lead to blackouts. It hasn't happened yet, but it could.\" Rachel looked into Alex's eyes then she hugged Amanda. \"I don't know what we are going to do. She can't afford assisted living and she's too active for a nursing home. Even that would be a stretch on our income.\"\n\nAlex ran his hand across her shoulders as she began to cry softly. \"I have no choice. I'm going to have to move to Springfield and back in with my mom. This sucks!\" She shouted then buried her face on Amanda's shoulder. \n\n\"It's okay, everything will work out, okay?\" Amanda softly stroked Rachel's hair. \"This will always be your home, my love, even when you living far away.\"\n\nRachel glanced up at Amanda then at Alex. \"But what about the mortgage?\"\n\n\"It's not an issue love, I'll cover your share until you come back,\" Amanda said.\n\n\"I don't know when I'll be back, it could be years!\"\n\n\"It's okay, sweetheart, we're in this together, right? We're a family, that's what families do, they help each other,\" Amanda murmured as Alex nodded.\n\nThe rest of the evening was much more somber, there were still moments of merriment but overall; the spirit of the evening was dampened by Rachel's news. Before the evening was over Alex and Amanda decided privately to follow Rachel up to Springfield next Friday and see what they could do to help.\n\nThe next morning Alex and Amanda drove Rachel to the airport. At the security gate they both gave Rachel a big hug. Wendy and Kyle were watching the twins.\n\n\"Don't forget to call us the minute you get to the hospital. We both want to know what's going on,\" Alex said giving her another kiss on the cheek. \"Promise?\n\nRachel nodded. \"I'm going to miss our twins!\" She kissed Amanda again then she turned to enter the security area. A moment later she disappeared down the concourse towards her gate and was gone.\n\nThe following Friday, Amanda and Alex traveled to Springfield to visit with Rachel and her mother Rhea. The twins were nestled in car seats strapped securely in the back.\n\nAmanda glanced over to Alex as he drove up the freeway towards Springfield. \"Did Rachel say anything to the law firm? About her leaving or quitting or anything?\"\n\n\"I don't think so, it all happened too fast. I think she's taking some vacation time this week. She might be planning on turning in her notice next week.\" Amanda gestured off to the right. \"I think that's the exit.\" \n\nIn fact, Rachel hadn't quit her job yet, and Alex was right, she was on vacation time at the moment. It was her plan to give the law firm two weeks notice after she flew back down at the end of the following week. Meanwhile she was in the middle of making arrangements for her mother to have weekly in-home care when Alex and Amanda arrived. \n\n\"I'm sorry,\" Rachel said to the receptionist on the phone, \"someone's at the door. Can I call you back in a few minutes? Thanks.\" She hung up the phone and walked to the front door. As she opened the door she was greeted with a huge hug from the Alex as Amanda shoved one of the twins into her arms and hugged her as well.\n\n\"What are you guys doing here?\"\n\n\"What do you think, dummy,\" said Amanda strolling into the living room like she lived there. \"We're here to help out. Now where's your mom? We'd like to finally meet her.\"\n\n\"Mom, we have company,\" Rachel shouted as she led Alex and Amanda through the hallway to the back bedroom.\n\nWhat they found was a spry old woman who was full of spunk but her body was failing her. Her eyes still had the glow of someone full of life while her hip was the only thing holding her back, but only for the moment.\n\nAs Alex walked into her bedroom it dawned on him that Rhea should return with them to Wilmington and live in the family home until they could find an assisted living facility to fit her budget. \n\n\"You know,\" he said, \"There are a lot of new programs that offer assistance to the elderly on fixed incomes. \"\n\n\"Besides,\" said Rhea, nodding, \"I want to see more of my grandkids!\"\n\n\"Excellent idea,\" Amanda said as tears began to stream down Rachel's face. \"I'll start on the arrangements this afternoon. We can look into selling this home as soon as your mother is settled into ours.\"\n\nTwo weeks later, with Rhea comfortably ensconced in the former guest room, Amanda woke up from a much-needed nap. She walked out into the hallway and looked around. The house was way too quiet. By now, the twins should be screaming their heads off needing to nurse. She wondered where Alex and Rachel were? She remembered that she mentioned something about having to supplement the twin's feeding with formula; although she hated the idea. Maybe they went out to buy some.\n\nShe walked down the hallway that led to the nursery and quietly opened the door. Inside, Alex and Rachel sat rocking, each girl with a twin nursing at their breasts.\n\nShe tiptoed into the room and whispered softly. \"How did this happen?\"\n\nAlex smiled as he looked down at baby Ella nursing on his breast. \"Two weeks ago I just started producing milk,\" he said as he glanced over to Rachel. \"She always has had some milk but about a week ago her breasts began to really produce. So, we thought, since you were exhausted we should help out. I hope you don't mind.\"\n\n\"Mind? This is brilliant!\" Amanda raced over and hugged them both. \"I was afraid that I wouldn't have enough and we'd have to go on formula. Oh, this is perfect!\" She knelt next to Rachel and brushes a tiny curl out of Abby's face. She leaned forward and kissed her on the cheek as Abby nursed contentedly from Rachel's breast.\n\nAmanda glanced over to Ella quietly suckling from Alex's breast and smiled. \"Our children are truly blessed.\"\n\n\"We can't let you have all the fun,\" Rachel said, her eyes twinkling.\n\nAmanda's cellphone began to ring. \"Hi Margaret, I'm in the nursery, let me step out for a minute,\" she whispered. She turned to Alex with a grin. \"I'll just take this outside, you guys are marvelous.\" She stepped to the door and opened it quietly. Then shut it behind her as she walked into the living room and stood in the middle of the room. \"Okay, what's up? Late afternoon calls on a Sunday are pretty rare.\"\n\n\"Carl and I are moving.\"\n\n\"What?\"\n\n\"Several of the senior staff members in Seattle are retiring and we need to move part of our operation to Seattle. At first I thought we could send you out as a senior analyst but Carl had a better idea.\"\n\nAmanda staggered a bit as she sat down on the couch.\n\n\"Carl thought it a better if I were to spearhead the Seattle office and leave you in charge of our fifteen employees here in Wilmington. We can shift our focus to international sales on the east coast as well. Plus, there's no need to be in New York when it's only an hour away by train and everything is done electronically anyway.\"\n\n\"But...\" Amanda stuttered, struggling with the curve that Margaret just threw to her.",
        "\"Everybody loves you here, they already work more for you than they do for me.\"\n\n\"That's not true!\" She protested as Rachel and Alex walked into the living room carrying the twins, an expression of concern on their faces. \n\nMargaret continued. \"Yes it is and you know it. This is perfect! Carl has been after me to move to the west coast for decades but I always resisted it because of my work here. You, my wonderful prot\u00e9g\u00e9, are my ticket to martial bliss and a larger share of the market! Besides, most of your clients are on this coast.\"\n\n\"But...\"\n\n\"No buts dear, I'll send you an email this afternoon with more details. Kiss your babies for me.\" The phone clicked silent when she hung up. Amanda looked shell shocked.\n\nAlex sat down on the couch next to her, Ella on his shoulder ready to be burped. \"What happened?\"\n\nAmanda looked at Rachel then at Alex. \"I think I've just been promoted to partner.\"\n\nRachel shifted Abby to her shoulder. \"What?\"\n\n\"In two weeks Margaret and Carl are moving to Seattle to head up the west coast operation leaving me to handle things here in Wilmington. You were so right Alex; I do lead a charmed life. You two, now four, are the best thing that could ever have happened to me.\"\n\nRachel and Alex grinned and the twins burped.\n\n=EPILOGUE=\n\nLife goes on for the Wells' family. The twins are growing stronger and taller every day, Alex now writes for the Wilmington Times doing features, he just landed a byline, and Rachel still handles the accounts at the law firm. Amanda has moved into the corner office, her staff couldn't be happier. The international accounts have soared on the stock exchange and most of the firm's clients are ecstatic. Several curmudgeons complain that it's not like it was in the old days. Well, you can't have everything.\n\nKim and Ray finished up their studies and Kim now teaches at the local community college while Ray stays at home with their new baby (yes, their bundle of joy arrived last month and the family is overjoyed. He is working on his first novel). Rhea volunteers at the community center, and Wendy is finally planning that wedding she always wanted, only this time with the love of her life, Kyle Upton. \n\nAs Alex once said in Riley's backyard so many years ago: our life is blessed, we all got a fantastic do-over.\n\nAnd now.\n\nIt's been three years since the twins were born and the family was gathered on the front steps of the Wells family home on a sunny day in June. It was a birthday party for the twins. Everyone was there. Wendy and Kyle brought their two adopted children, Jin Lee and Lilly, two sisters from China, Ray and Kim were there (Kim is pregnant with a boy, their second), and Alex/April, Rachel, and Amanda with the two twin birthday girls, Ella (after Amanda's grandmother), and Abigail (after Rachel's aunt). \n\nThey were gathered for a family photograph. It was a beautiful day, a snapshot of life.\n\nAlex, in addition to doing print advertising for Amanda's firm and working at the Wilmington Times, got his first novel, \"Stray Cats\", published with a small publisher who focused on books and anthologies dealing with gender issues. Rachel's mother moved to an assisted living facility nearby so she could still be close to her granddaughters. Rachel opened the doors on her own accounting firm two months ago. She now handles the books for Amanda's firm and, in addition, she has several new clients. \n\nKim and Ray graduated two years ago. Ray is still working on his first novel while watching the kids and Kim teaches part-time while writing feature articles for a local online community based e-magazine. \n\nThe children are beautiful, and love is abundant.\n\nLife is good.\n\nA NOTE FROM THE AUTHOR:\n\nThe author copyrights Stray Cats and all of its parts. The reproduction of any part of Stray Cats without the written permission of the author is expressly prohibited.\n\nThis story is a work of fiction. All of the characters, their names and the places they visit, are purely from the imagination of the author. Any resemblance to persons, places, or things is not intentional and purely coincidental.\n\n\u00a9 2015/ Dreamweaver594"
    ],
    "authorname": "Dreamweaver594",
    "tags": [
        "menage e trois",
        "romance",
        "transsexual",
        "romantic"
    ],
    "category": "Transgender & Crossdressers",
    "url": "https://www.literotica.com/s/stray-cats-ch-07-final-chapter"
}
{
    "title": "There and Back Again Ch. 095-096",
    "pages": [
        "Chapter Ninety-Five: Royal Bastard \n\nIt was a night to remember; we made love and slept, snuggled and laughed \u2013 and made love some more. We fed each other breakfast in bed, thoughtfully ordered by Leliana, and then slept again, waking well into the afternoon. \n\nAlistair gave me a wedding gift in bed; it was a small leather tube like the one he carried his drawings in. Excited, like a kid on Christmas, I opened it at Alistair's nod. Two pieces of vellum \u2013 high quality parchment \u2013 slid out when I upended the tube. \n\nThe first was a picture of me and Alistair. The details of our clothes were hazy, but it was clearly meant to be our wedding. Our hands were clasped, our rings visible; our faces were close together, foreheads almost touching. Alistair's expression was heartrendingly tender, his lips pulled back in a beatific smile. My answering smile was impish but sweet, and my eyes practically sparkled. \n\n\"Now I can draw your dress,\" he explained. \"I know on Earth you'd have taken pictures to remember; this is the closest I could get.\" \n\nI leaned in and kissed him, sweetly and softly, relishing the warmth in my belly from the thoughtful gesture. \n\nThe second piece of vellum took my breath away. There were seven, exquisitely detailed figures on the small piece of parchment: myself, Aedan, and what must have been our parents, as well as Fergus, Oriana, and Oren. Our parents were in the back, arms around those of us in front. I sat in the middle, with Aedan on one side and Fergus and Oriana on the other; Oren sat in front of us, leaning against my knees. Both of my brothers, as well as my parents, had either a hand on my shoulder or an arm around me, and we all looked content and happy. \n\nTears slipped down my face, unbidden, and I pushed the vellum away so as not to get it wet. I pressed my face into Alistair's shoulder and bawled as he carefully put the two pictures back into their tube. \n\n\"You drew me a family.\" I sobbed and clung to him, and he wrapped his arms around me tightly. \n\n\"Aedan helped. Described what they looked like. He said it was pretty close. I thought we could have frames made and you could hang them wherever we end up.\" \n\n\"Thank you.\" I pulled him down and pressed my lips against his hard, urgency outweighing subtlety. \"Thank you.\" \n\nI kissed him again, leaning against him until he got the picture and flopped back onto the mattress; I fell with him, then climbed to my knees between his legs and proceeded to show him, in detail, with my fingers and lips and tongue how much I loved my wedding present. \n\nFinally picking ourselves up, after a playful bath, we changed, gathered our wedding attire, and reluctantly left our little sanctuary to face the outside world. \n\nMarried now, we decided we no longer needed the fiction of separate rooms, and Alistair asked a servant to help move his things into my slightly larger guest room. Then, on mutual unspoken consent, we went looking for Theron and Aedan. We found both men in a discussion with Eamon in the library; Eamon huffed when we entered, and excused himself, leaving us alone. \n\nI sighed. \"He's never getting over this, is he?\" \n\nAlistair wrapped his arm around my shoulders. \"I don't care. He can go to the Void, for all his opinion matters to me.\" \n\nI looked up at him in surprise, and he smiled ruefully at me. \"I've been thinking about what you \u2013 what everyone \u2013 has been saying. About how he treated me, growing up, and about how he's acted since this all started. He's important to our cause, so I can be polite, but I'm not going to allow him to treat me like the unwanted bastard anymore, never mind letting him treat you poorly.\" \n\nHe kissed my forehead, and I turned into his embrace, squeezing him close. \"I'm sorry.\" \n\n\"I'm not. It's his loss. I have a family, now, and he can't hurt me anymore.\" \n\nTheron stood and clapped his hand on Alistair's shoulder. \"Not that you need it, but I will help in any way I can. And I truly think Eamon will get over it, out of pragmatism if nothing else \u2013 he needs me, and knows you have my protection if necessary.\" \n\n\"Speaking of which,\" Alistair said with a weird almost-smile, \"mind telling me what that's all about, brother?\" \n\nTheron flushed, and gestured to the chairs, seating himself in a comfortable armchair. I snuggled up with Alistair on a small couch, Aedan sitting in a chair to my left. \n\n\"I suppose that wasn't the best way to inform you-\" \n\n\"How about you start at the beginning?\" I offered. \n\nTheron nodded. \"My reign has been at risk since my coronation because of the lack of an heir. I refused to admit it was a problem for a long time \u2013 denial, I suppose, of what I didn't want to hear \u2013 and some of those who are less happy with how much influence the MacTir's have at court have used that as an excuse to plot against me. Loghain was good at rooting out those problems, but it didn't change everyone's opinions. \n\n\"I don't know what I'm going to do about the situation. Anora...well, it's complicated. But while I figure it out, having an heir will stabilise the succession, appease the bannorn to some extent. You're a Theirin, Alistair, as much as it may pain you. Had I died at Ostagar, it would have been your duty to assume the throne. That won't be the case now, Maker willing, but I still have no heir. So my first act, when I take my throne back, will be to formally recognise you as a Theirin and my heir, until such a time as I have children of my own.\" \n\nHe looked nervous; Alistair looked...shell-shocked. Wait, is that a thing, in Thedas? After what had been said the night before, I assumed this would be the case; clearly Alistair had been better at blocking it out. \n\n\"I have a question, if I may.\" Theron nodded, but I turned to Aedan instead. \"Why aren't you surprised, dear brother?\" \n\nHe looked briefly startled, before smiling at me. \"I didn't know anything, Sierra, I assure you. I merely assumed that if Theron here was smart, he would do exactly this. Call it political savvy, I suppose.\" \n\nI narrowed my eyes at him, but reluctantly had to believe him. It really isn't so surprising, I suppose...I just hadn't considered it. \n\nAlistair finally stirred. \"But, but...I don't want to be King!\" \n\nTheron laughed, and Aedan and I grinned. \"I suppose we had better make sure I stay alive, then, right, brother?\" \n\n\"But I'm a Grey Warden. I can't even hold a title.\" \n\n\"As we've heard, it seems Weisshaupt is ready to ignore that rule when required. Having a Grey Warden as a member of the royal family can only benefit them; I'm sure they can be convinced of that. And it isn't like you'd have land titles or an Arling to run.\" \n\nAlistair didn't look all that reassured, and I giggled. He squeezed me against his side, fingers digging into my ribs, tickling me. \"You laugh, Sierra, but just wait until everyone starts calling you Princess.\" \n\nThe appalled look on my face made all three men crack up in hysterical laughter. \n\nI stuck my tongue out at Alistair, then turned to Aedan. \"What, exactly, does it take to have a marriage annulled in Ferelden?\" \n\nAedan just laughed harder, and Alistair pulled me into his lap for a sweet kiss. \n\n\"Considering half the village of Redcliffe must be aware that the marriage was consummated last night, good luck with that, your Highness!\" Theron wore a smug grin; Alistair and I both blushed crimson, and I hid my face in his shoulder while he groaned. \n\n\"I hate you,\" I pouted at Theron. \n\nHe chuckled. \"You have to love me. I'm family!\" \n\nWe laughed and chatted a while longer; at some point Zev joined us and nonchalantly stole my spot on the couch, as I was still in Alistair's lap. The rest of our companions trickled in slowly; I could feel the taint of the various Grey Wardens as they approached, and noticed something odd as I did. \n\nThere were extras, taint signatures I didn't recognise. One was rapidly approaching with Duncan. \n\n\"Riordan!\" I jumped up off Alistair's lap, going over to peer out into the hallway. Sure enough, there he was in the flesh. \n\nHe wore some armour that was all black, sleek and deadly, sort of like the rest of him, really. He was of an age with Duncan, but looked a lot less haggard than he had in game. He was a little bulkier, and a lot cleaner. His hair was long and silky, tied out of his face; his facial hair was more Aragorn than the rather bushy mess I recalled from the game. \n\nBelatedly, it occurred to me that the others were going to wonder how I'd known Riordan was coming. With no one being able to sense my taint, we had kept my Warden-ish status a secret, and while there'd been plenty of clues along the way, I'd just totally blown it. \n\nI ducked back into the library, hoping no one noticed; I moved to stand beside Alistair and waited to be introduced. The two senior Grey Wardens came into the room one after the other. Duncan was smiling, while Riordan looked very serious. The lines on his face indicated he was always that serious, which jived with what I remembered from the game. \n\n\"This is Warden Riordan. Please introduce yourselves.\" \n\n\"Aedan Cousland.\" Riordan and Aedan nodded at each other. \n\nZevran, Sten, Oghren, Bel, Faren, Solona, Jowan, Anders, Leliana, Wynne, and Gorim all said their names. Then he turned to Alistair. \"I remember you, Alistair. It is good to see you again.\" \n\nAlistair nodded, then turned slightly towards me. \"And this is Sierra Theirin. My wife.\" \n\nI thought he puffed his chest out just a little when he said the word 'wife'; it was ridiculously cute and I stifled a giggle. \n\nRiordan raised one eyebrow and then eyed me critically. \"Wife?\" He glanced at Duncan, who seemed unconcerned, and changed the subject. \"I've heard much about you, Sierra. I would like the chance to talk with you more at a later time.\" \n\nAedan and Alistair both stiffened slightly, and I squeezed Alistair's hand and put my other hand on Aedan's shoulder. \"Sounds good.\" I trusted Riordan, though I'd be taking at least Duncan, if not Aedan and Alistair with me when we spoke. \n\nDuncan cleared his throat. \"Riordan has brought us two other Wardens as well; we will meet them later. Tomorrow the Dalish scouts, the former werewolves, and some of Redcliffe's soldiers will be dispatched on patrol to keep an eye on the movement of the horde; Riordan and the other two will accompany them.\" \n\n\"Only two?\" Aedan asked, clearly sounding aggravated. His expression was a combination of angry and depressed; Zevran put his hand on Aedan's other shoulder and squeezed. \n\nI wasn't surprised, unfortunately. \n\nDuncan shot Aedan a look, and he subsided, still a bit petulant. Duncan continued. \"Arl Eamon tells me we will depart for Denerim two days from now. You all have some time to rest; I suggest you make use of it.\" He turned to Aedan, Alistair, and me. \"You three, with us please?\" \n\nI sighed and followed Duncan; he led us out of the Castle and a ways down the road, out of sight of anyone watching. He picked a large tree and leaned against it casually. \"I thought we could talk out here, where we won't be overheard.\" He gave Aedan a look; Aedan flushed slightly. \n\nSighing, I went to lean against a tree of my own, but Alistair stood behind me so I could lean back against him instead, his body heat keeping me from shivering. It was sort of weird being outside without armour on, but nice too. Aedan stood beside me, and Riordan watched attentively. \n\n\"Sierra?\" Duncan nodded to me, bobbing his head at Riordan, and I sighed again. \n\n\"I don't know much about Riordan, Duncan. Um...\" I turned to the Warden in question. \"You are from Highever, or thereabouts. Your Joining was at the same time as Duncan's, but you've served in Orlais since. When Loghain closed the borders to the Orlesian forces, you were chosen to sneak across the border and see what you could find out. You went to Ostagar, or at least you were planning to \u2013 I don't know if Duncan interrupted you before you got there. And then you were going to go to Denerim and see what was happening there. In the game, you were tricked by Howe, imprisoned, and tortured, but obviously that hasn't happened. I truly know nothing else about you.\" I looked back at Duncan. \"Sorry. The game didn't go into details.\" \n\nAedan interrupted, \"Look, we can convince you about Sierra later. Why did you bring only two Wardens?\" \n\nI scowled; I knew exactly why. Riordan gestured at me, indicating he wanted to hear what I was thinking. \n\n\"They won't come without the Chevaliers. The other Grey Wardens have decided that, if Ferelden isn't going to take all of their help, it won't get any. They are making a point for the rest of Thedas \u2013 play nice with the Wardens, or else. They'll gather in force at the borders and wait for Ferelden to fall. I'm actually surprised you brought any at all.\" \n\nRiordan grimaced. \"You are correct. Commander Clarel refused my request for aid. The two I brought...are technically deserters, now, as am I. They were both Fereldan before joining and being transferred to Jader. None of us was willing to sit and watch while Ferelden either fell or defeated the Blight on its own.\" \n\nAedan swore, and Alistair paled; I could practically see the wheels turning. I felt sorry for him; he'd idolized the Grey Warden order, made it out to be something noble, in his head, and now was getting brutal confirmation of what I'd said \u2013 they were as political as any other group in Thedas, and could be far more ruthless. \n\nDuncan didn't look surprised, or even that disappointed; he just looked tired. \"Well, we know from Sierra's game that the Blight can be defeated with just three Wardens. We now have eleven. It will have to be enough.\" He turned to Riordan. \"And for the record, I hereby officially conscript the three of you into the Grey Wardens of Ferelden.\" \n\nWe slowly made our way back to the castle. I was eager to meet the other Wardens, and Duncan had indicated we would be putting the three of them through the new Joining that evening. We arrived back to see a crowd in the training yard; the two newest additions to our crazy band of misfits were getting ready to spar, with our other companions and a large group of Redcliffe soldiers watching while Oghren took bets. \n\nI took a moment to inspect the two men. The first was an older man, I guessed as much as ten years older than Duncan. He had a shock of short grey hair sticking up in all directions, and grey stubble to match. He was short and stocky, roughly my height but probably double my weight, and he carried a two-handed maul that might even have been heavier than Sten's Asala. The other was younger, maybe in his early thirties, his hair a brilliant ginger, but well-coifed. He was tall, clean-shaven, and handsome. He carried a dagger and a longsword, and I noticed a bow sitting nearby. \n\nBoth men were stretching and warming up; watching them, it was clear they were just pandering to the crowd, not really needing a warm-up. Oghren was almost overwhelmed with bets, and I wandered over to see what odds he was offering. It seemed pretty even, no one knowing whether the reach and heft of the maul could make up for the assumed speed of the younger rogue. \n\nRiordan rolled his eyes and told the two that if they were going to do it, they'd best get on with it; the two men gripped their weapons and squared off. \n\nBoth men had what appeared to be impeccable skill. The two-hander swung and drove the younger man back, while the dual-wielder leaped around, never staying where the older man expected him to be. Neither was getting in any hits, however. I thought it would have been fun to compare Zevran to the ginger-haired man in technique \u2013 they seemed similar. Indeed when I found the assassin, he was watching critically, arms crossed over his chest. I thought he looked a bit pouty, actually, and I wondered if he was worried he couldn't compare. \n\nThen I spotted Aedan, and the real reason for Zev's sulk became apparent. Aedan was watching the sparring with open appreciation written on his face; his gaze never left the younger of the opponents, and his mouth hung slightly agape. \n\nI sighed, squeezed Zev's shoulder sympathetically, and then tapped Aedan lightly on the shoulder. He spared me a quick glance and a smile, then went back to watching. \n\n\"You might want to close your mouth, brother, before you get drool on your new shirt.\" \n\n\"Wha...? Huh? I'm not drooling.\" But he snapped his mouth shut, and shot a guilty look in Zevran's direction. Spotting Zevran's unusually serious face, he sighed and backed up to stand with the former Crow. Zevran ignored him, watching the sparring, making Aedan twitch. I suppressed a grin; they were so committed to each other, yet so totally terrified of admitting it. \n\nFinally Aedan slipped behind the elf, putting his hands on Zev's shoulders and pulling back so the Antivan leaned against Aedan's chest. Zevran finally relaxed, and I saw Aedan whisper something in his ear. Zevran nodded and smirked, leaning back further, and I smiled softly. Adorable, though they wouldn't thank me for saying so... \n\nI turned my attention back to the fight to see the older Warden hit the younger with the haft of his maul, knocking him onto his arse, and swinging the head down to bump lightly against his chest plate. The younger man yielded, an embarrassed look on his face, and I snickered; whatever impression the handsome young man had hoped to make in Redcliffe hadn't worked out like he'd wished. \n\nAfter a lot of cheering, cursing, and settling of debts, the crowd finally cleared, leaving the new additions with most of our group. We were introduced, one-by-one, to Conrad, the younger of the two Wardens, and Dougal, the older. The two men were joking with each other good-naturedly, and I gathered their sparring sessions were something of a common occurrence. I got a curious raised eyebrow from each when Alistair claimed me as his wife; nothing else was said, but I gathered that there would be an interesting discussion later between Duncan, Riordan, and the other two Wardens when I wasn't around. I almost wanted to be a fly on the wall for that. \n\nConrad immediately began flirting with Leliana and Solona; he was so obvious about it, though, that both women exchanged incredulous glances and walked away. Even Anders wasn't jealous. Aedan was very restrained with the handsome Warden, to my amusement, and kept a hand or arm possessively touching Zevran the entire time. The assassin looked positively smug, though I knew he wouldn't appreciate that being pointed out either. There's a lot no one points out for those two... \n\nAs not an 'official' Grey Warden, I barely saw my husband or any of the senior Wardens for the rest of the afternoon. They had various meetings with Theron, the Arl, and Duncan, which I knew I'd hear about later, and instead I spent the afternoon being teased mercilessly by the girls about my Prince and our night at the tavern. \n\nI saw Isolde a couple of times, as we sat in the main hall; if looks could kill, we'd both be dead. I sighed; it seemed that was one relationship I would forever have trouble with. I wasn't particularly disappointed \u2013 the woman made me crazy \u2013 but having Eamon as an adversary wasn't the way I'd have wanted to start out. \n\nSupper was a raucous affair, with eleven Wardens, all of our other companions, as well as the castle inhabitants. The amount of food consumed was enormous, and that was with me holding back to avoid suspicion from Conrad, Dougal, and Riordan. Alistair promised to steal us some food from the kitchens after supper, so I ate lightly. \n\nI was allowed to stay for the modified Joining; Duncan explained that I had made a deal with Avernus to study my blood in return for the improved formula. I doubted it would help Dougal much, but it would potentially add a handful of years to Conrad's life expectancy, which was good. No one looked surprised at Duncan's explanation, so I assumed part of the afternoon meetings had been convincing the three Orlesian Grey Wardens of my origin. ",
        "All three men did the thing with the screaming and their eyes rolling back in their heads; Jowan had been taught how to make the potion by Morrigan, so no non-Wardens were present except me. All three recovered well, looking slightly shaken but otherwise fine. \n\nAlistair and I spent the rest of the night making love, slowly and sweetly, falling asleep tangled together and content. Every time I looked at him \u2013 my husband, my sweet, silly Prince \u2013 I felt like my heart was going to explode out of my chest. I briefly wished there was someone I could share a 'The Grinch Who Stole Christmas' reference with \u2013 I was sure my heart had grown three sizes since the wedding \u2013 but being with my Alistair was more important, and I didn't regret anything. \n\nThe three recent arrivals, Riordan, Dougal, and Conrad, left the next morning to patrol, travelling into the Wilds to try to determine the movements of the Horde. The rest of us bought supplies and prepared to leave for Denerim the next day. \n\nI was interrupted in our packing by a nervous servant approaching me, Blake at his side. \n\n\"I'm sorry, my Lady, I wouldn't bother you, but the young one here insisted that...\" He was looking at the floor, wringing his hands nervously, quite clearly expecting abuse of some sort. I hate Isolde more every day. \n\nI took pity on him, reaching out to still his hands. \"Relax, friend. Call me Sierra. There's nothing to be afraid of. What's going on?\" \n\n\"Th-Thank you, my Lady. There is, well, there's an elf here to see you. I'd have sent him away, filthy wretch that he is, but Blake insisted you would want to know.\" \n\n\"I definitely do! He asked for me? Personally?\" \n\n\"He asked for the Lady of the Grey Wardens, my Lady. I don't know anyone else who fits that description.\" \n\n\"That's the weirdest title I've ever heard. Where is this elf?\" \n\n\"In the training yard,\" Blake answered, cutting the servant off with a cheeky grin. \"He wants to be a Grey Warden.\" \n\nI blinked, confused. Who would want to be a Warden, and more than that, who would know me, and call me the Grey Wardens' Lady? I dismissed the servant, ruffled Blake's hair \u2013 which, I noted, had been cut and combed nicely \u2013 and turned to my brother and my husband. \n\n\"Love? Aedan? Will you come with me for a minute?\" \n\nThey both followed me out, and I explained about the odd description given to me by the servant and Blake's assurance someone wanted to join the Wardens. They seemed as confused as I, so the three of us trooped curiously into the training yard. \n\nWayne was drilling the knights and recruits, and the training yard was a disorganised array of sweaty male humanity. With one exception: a small pocket of space against the castle wall where nothing moved, and one elf stood quietly. \n\nHe was lean, like most elves, but taller than average; he had auburn hair so dark that the red only showed when the sunlight glinted off of it. He was dressed in ragged armour, mismatched pieces with spots of rust. He carried a bow that looked to be handmade, with a small quiver of arrows at his waist. I saw a glint from a wicked, long, curved blade hanging down by one leg. \n\nHis hair was wild, cut too short to put in a ponytail, but too long to be neat; it stood up from his head in all directions, with sections that hung down in his face. His ears were long and elegant, his face \u2013 like all elves \u2013 hairless; his expression was grim. I couldn't see his eyes; he was focused on the ground at his feet, ignoring the chaos around him. \n\nHe reminded me of a trapped wild animal \u2013 caged, cornered, pacified for now, but dangerous. There was a tangible violence lurking just underneath his skin. \n\nAlistair reached out to stop me from approaching, but I shrugged him off. I couldn't have said from where or how, but I knew him. And he had asked for me, so I would hear him out. \n\nHe glanced up as I stopped in front of him, and I almost gasped. He had heterochromia, something I had known of only from the most classic of fantasy or horror films back on Earth. One eye was a piercing, startling pale blue, the other a warm, almost amber brown. I felt a pull to choose one eye, to lock gazes with just one, but I avoided it, settling on looking straight at his nose instead. \n\nHe smirked, and I wondered if he got that reaction a lot. \n\nAlistair slid up behind me, wrapping a protective arm around my waist, and I leaned back against his chest comfortably. \n\n\"I know you. Somehow. I'm Sierra; may I have your name?\" \n\nHe looked away, seeming uncomfortable with being recognised. \"You never knew my name, but when we met it would have been Stormwalker.\" \n\nI pondered the unusual name for a second. I'd definitely never heard it before. And then something clicked \u2013 the name, the eyes, the barely restrained violence... \n\n\"You were one of Witherfang's. A werewolf.\" \n\nChapter Ninety-Six: Learning \n\n\"You were one of Witherfang's. A werewolf.\" \n\nI could feel Alistair shift at my back, and Aedan took a protective half-step forward. \n\nI suddenly felt like I'd been transported into a teen romance novel instead of a fantasy RPG. \n\nA bitter smile passed across his lips, and he visibly relaxed his tense shoulders, keeping his hands up and away from his weapons. \n\n\"Yes, I was. I was there, when...the Lady died.\" \n\n\"I am-\" \n\nHe cut me off. \"Don't say you're sorry.\" His tone was clipped, his voice louder than I expected, and at my flinch, he struggled to control himself again. When he spoke next, it was quiet, subdued. \"You did as she asked. I do not blame you for it, though for some of us, it was not the freedom we had expected.\" \n\n\"Please, Stormwalker-\" \n\n\"Wulf.\" \n\n\"Wulf?\" I blinked, confused. \n\n\"I needed a first name. One that people could use. I chose Wulf. Short for Mornwulf Stormwalker. I liked the irony.\" \n\n\"...okay. Wulf, please, would you come inside with us? We should talk, and I think Duncan should be there, and it will all be a lot easier if we can sit down, and maybe have something to eat?\" I was babbling, but I couldn't seem to stop. \n\nHis gaze strayed to the open portcullis of the castle's gate, and for a moment I thought he'd run. Not that we'd have chased him, or stopped him, but the longing to get away was clear on his face. His expression was vulnerable, in that moment, and I wondered exactly how young Wulf was. \n\nAfter a moment, though, he clenched his jaw and turned his fascinating, but slightly creepy eyes back to me. He nodded, once, reluctantly, and pushed off the wall to follow me inside. \n\nAedan ran ahead to find Duncan, and I flagged down a servant in the hallway, requesting that a light meal for 'five Grey Wardens' be brought into the library. I knew the four of us could always eat, and looking at Wulf, he hadn't been eating that well in a while. Alistair, still clearly nervous, stayed close to me as we walked, and I took comfort from his warm presence against my side. The library was empty when we arrived, and I gestured to a chair for Wulf, while Alistair and I took the sofa. \n\nWe sat in silence, Wulf examining the bookshelves around him with some interest. I took the opportunity to inspect him in more detail. He was dirty, obviously not having had a bath for some time. Not that it was a surprise \u2013 armed elves wandering around Ferelden were unlikely to get a hospitable reception anywhere that a bath tub was to be found. His armour was even worse than I'd originally thought, half of it held together with nothing more than leather straps. \n\nHe shifted uncomfortably, and I realised he'd caught me staring. I flushed and looked away, drawing a confused, concerned glance from Alistair. I was saved from having to explain by the arrival of Aedan and Duncan, with food being brought in on their heels. \n\nI introduced Wulf to Duncan, and then we settled in to eat in silence for a few minutes. I'd been right in my assumption; Wulf was starving, polishing off a Warden meal and then some. Finally finished stuffing ourselves, Duncan turned his gaze on Wulf. \n\n\"I'm interested to hear how you ended up as a werewolf, if you'll indulge us, Wulf.\" \n\nHe grimaced, but nodded. \"My parents were Dalish, I think. Or perhaps servants travelling with a caravan; I have no way of knowing. I don't remember my life from before. From what I was able to piece together later, we were attacked by werewolves in the Brecilian Forest. I was bitten, and somehow got left behind when the others fled \u2013 or maybe they were killed. I can only assume they thought I was dead.\" \n\n\"How old were you?\" I was horrified. \n\n\"I don't know. Perhaps six? I turned, and for several years \u2013 I don't know how long, really \u2013 I ran with a pack of young werewolves, mindless, acting on instincts. And then the Lady found me.\" \n\nHe sighed. \"Race didn't matter when we were all werewolves, but being the only former elf, I was small. The others protected me, kept me safe until I finished growing. I found a family with the Lady and Swiftrunner.\" \n\n\"And then we came.\" I felt guilty, despite knowing we'd made the best choice we could at the time. \n\n\"Yes. And you released us from our 'curse'. Only, while the others had somewhere to go \u2013 back to families, or to a new human settlement they are building bordering the Brecilian \u2013 I was an elf. There was no place for me. \n\n\"I travelled for a while; I went to the Dalish, who tried to accept me, but I didn't fit in. I didn't know their history, didn't have Vallaslin...I was an outsider. Keeper Lanaya offered to try to find my clan after the Blight ended, but we can't even be sure my parents were Dalish. And even then, I'd still be different. I learned to hunt, to fight without claws and teeth, but finally I left them. I tried to go to the village of former werewolves, only to discover that race matters very much to those without fur. I didn't fit in, again.\" \n\n\"And now you are here,\" Aedan finished. \"Looking to join the Grey Wardens, Blake said?\" \n\n\"The Dalish told stories of the Grey Wardens. Brave, honourable, good fighters. That they have a purpose, and take anyone, whether human or elven.\" \n\nThe four of us exchanged glances. I didn't know what Duncan was thinking, but the other three of us were pained. The poor kid deserves better than an early death, after all he's been through. Even if it's not as early as it once was. \n\n\"I-\" Alistair, Aedan and I all spoke at once, and I nodded at Aedan that he should continue. \"Wulf, being a Warden...it's dangerous work. Fighting darkspawn for the rest of your life isn't exactly a picnic. And there's no taking it back \u2013 you're stuck being a Warden forever.\" He looked apologetically at Duncan, then cleared his throat and continued despite the glare he received in return. \"If I had a choice, if I had known...well, I'm not sure this is what I'd do. You should really rethink-\" \n\nHe was interrupted by a low growl, so canine-sounding I almost had to look to make sure he hadn't transformed back. \"Rethink,\" Wulf scoffed. \"I've done nothing but, since I became elven again. But answer me this \u2013 where else should I go? To an Alienage, to be treated like a servant, not allowed to carry weapons or defend myself? Back to the Dalish, where I will be an outsider forever, not permitted to marry or have a family myself? I am a wolf, not a sheep, and I am prepared for whatever sacrifice this life requires. At least my choice would be my own.\" \n\nWe exchanged glances again, and finally Duncan spoke. \"I'm not saying no, but I'm not saying yes. We need Grey Wardens, Maker knows, but I must be sure you are appropriate. If you truly wish to Join, you will travel with us as a companion as we head to Denerim. We will talk, and I will evaluate your skills, and I may choose to recruit you. That's the best I can offer.\" \n\nWulf agreed, reluctant and maybe a little bitter; Aedan took him down to the village to purchase him some better armour, as well as clothing and whatever other supplies he needed. We introduced him to the group at supper, and everyone welcomed him warmly. They started peppering him with questions about being a werewolf, which he answered with a barely polite monosyllable as often as possible, and after a while everyone got the hint and quit pestering him. We found him accommodations at the castle, and he went to his room early. \n\nLeaving in the morning took, figuratively, forever. First we had to wait for Isolde to finish packing, then for her things to be put onto carts, then for the few horses in Eamon's stables to be harnessed to a carriage for Isolde, Connor, and Eamon. Teagan and Theron rode, Blake riding in front of Theron's saddle, and I imagined they might be relieved not to be riding in the carriage also. The rest of us were on foot, as usual, but given that the carts and carriage could only travel at any sort of speed on snow-packed roads, half the time walking was going to be faster than riding anyway. A templar accompanied us on horseback, presumably to watch over Connor; Wynne and the mage tutor assigned to Connor travelled in the carriage. \n\nWith all the delays, we only made a few miles the first day before stopping early to have Eamon's pavilion set up. Our group set up camp nearby but separate, for which I was thankful; even so, we could still hear Isolde complaining about her accommodations, demanding to know why we weren't staying with whatever minor noble lived nearby. I almost laughed at Eamon having to justify it, but not being able to trust anyone not to turn us in was no laughing matter. \n\nTeagan and Theron abandoned Eamon and Isolde at their first opportunity to join us by our fire with our simple tents. Blake came with them and fell asleep cuddled up to me by the fire; Alistair carried him carefully to his own bedroll near Theron's when everyone went to bed. \n\nWe made slightly better time for the next several days, as Eamon had put his foot down and refused to allow the Arlessa to unpack much off the carts. Despite that, the trip, which would normally take two weeks, was going to take at least three. Eamon assured us that we'd likely still be to the capitol earlier than most of the other nobles, given they'd all be travelling with families as well. \n\nAs we swung through the bannorn, just north of Lothering, the Grey Wardens and I took to ranging out in front of the carriage, scouting for trouble. We did run into a few isolated bands of darkspawn, which we defeated easily; Wulf didn't panic at his first sight of darkspawn, and managed to put an arrow into one of their eyes, which was a good sign. \n\nWulf set his tent up away from the rest of us and kept to himself for the most part; I wondered if he was afraid of getting close and being sent away, or if he was just that unsociable. Not that I could blame him \u2013 being quite literally raised by wolves, only to be turned away from them as an adult, probably wouldn't make someone comfortable with chit chat. \n\nWe were ambushed one night by a group of darkspawn much larger than we'd seen in a while; it was almost like they'd been looking for us, though at least we didn't have any Archdemon dreams to start it off. I woke with a start when Jowan, who'd been on watch, started shouting. We'd taken to sleeping in armour again, so Alistair and I both sat up, grabbed weapons from where we'd left them near our bedrolls, and were basically ready to fight. \n\nAs soon as I woke I could feel them \u2013 I wasn't as precise as Duncan was able to be, but it felt like there were a lot of them. \n\nWe scrambled out of the tent, to find the rest of our camp rising as well; the Arl's camp wasn't getting up as quickly, and we all soon realised what a liability that pavilion was. Darkspawn weren't smart, but they were generally clever enough to aim for those who seem to be leaders. \n\nWe had to hope that sensing the Wardens would draw them away. \n\nAnd it seemed to work, at first \u2013 the initial wave of darkspawn broke on the Warden's part of the camp, and after long experience, we all worked together to carve through them. There were archers out in the darkness somewhere, though, and first Sten, and then Aedan were both hit. \n\nWith a snarl, Wulf just vanished into the night. I gawked for a moment at where he'd been \u2013 he'd just faded into the shadows, and was gone. The rest of us regrouped, huddled behind shields and tents to escape from the archers' aim. \n\nThe next wave, however, came from the opposite side of the camp. As a unit, the Grey Wardens turned and headed towards Eamon's pavilion, and our companions followed. Alistair and Bel stayed at the back, blocking arrows with their shields; it proved unnecessary, as Wulf slunk out of the shadows, blood streaking his face, with a feral grin; no more arrows came our way. \n\nAt Duncan's shouted command, I stayed next to Eamon's pavilion in case any darkspawn made it through. Leli and Wynne stayed with me, while Anders was still rapidly firing healing spells at Sten and Aedan, who seemed to be refusing to hold still long enough for him to heal. The soldiers in Eamon's camp had finally found some sort of formation, but they couldn't predict where the attacks would come from, and they were scared and many were inexperienced. \n\nA shriek made it through the lines of soldiers, ghosting through gaps they hadn't even noticed, disemboweling a soldier as it came; Leliana was drawn away to fight it when it veered off to one side, leaving Wynne and I. I wasn't too worried; Leli was more than capable of managing one shriek, never mind whatever soldiers might be over there to help. \n\nNext, Wynne got called forward; Anders had been injured, and needed healing. I nodded to her, and she reluctantly left me alone. I hadn't heard anything from the pavilion; I hoped Theron, Teagan, and Eamon were arming themselves and staying inside to defend should the worst happen. \n\nAnd then I felt it; the greasy, disgusting aura of magic that signalled an emissary was nearby. I reached out and gripped the mana, shutting down the casting of whatever spell he'd been working on, and I heard a startled yelp from the direction the aura had originated. But then there was a second aura, and I grabbed hold of that as well. When the third began to cast, I was desperate; I didn't think I could hold anymore. I frantically threw shields up on myself as well as the soldiers I could see nearby, which lowered the pressure enough for me to grab the third's mana just as a fireball ripped through the ranks of soldiers. \n\nA cluster of darkspawn pressed through the hole; the three emissaries, but also an archer and a couple of hurlocks wielding wicked-looking swords. They were looking around, clearly trying to find something. I could only assume it was me, given that I'd stolen their mana, but it was unusual for them to even realise what was happening. I gripped my daggers, slipping around the group to slice the archer across the neck and move away; the remaining hurlocks turned and swung their swords through the space I'd been standing in moments before. They know about me. They know I'm here. I felt sick, but I had no choice. Someone needed to stop them before they attacked the pavilion. \n\nI snuck behind one of the hurlocks and jammed my daggers into a gap in its armour, before twisting as Zevran had taught me and pulling them back out. Black blood poured out of the wounds, and the hurlock dropped with a gurgle. I turned just in time to catch the second hurlock's blade on my crossed daggers, thankful for Sten's teaching as well. After deflecting, I leaped away, dodging another wild swing, just in time to hear a shout and see an armoured form with a greatsword smash into the hurlock from the side. \n\nI turned to deal with the emissaries; disoriented from having their mana cut off, they made easy targets. I finished them off, dodging a few half-hearted swings from a staff, to see Theron standing over the still form of a hurlock. ",
        "\"Thanks.\" I scanned the darkness, trying to sense if any more darkspawn were coming. The numbers seemed to be dwindling, and I didn't think any would be breaking through the lines again. \n\n\"My pleasure, my Lady.\" He grinned at me, black blood streaking his face. He appeared uninjured. \"I couldn't let you stand out here defending us all alone.\" His expression was odd, as I turned him to face the light. I heard whispering behind me, and realised Eamon and Isolde had witnessed the exchange. \n\n\"Hold still, and keep your mouth shut for a sec.\" I pulled out a rag and carefully wiped the darkspawn blood away from his mouth and nose. \"You're going to need a bath.\" \n\nHe chuckled, but I missed what he said next, turning to look out into the darkness again. I could feel sunshine, and in a moment I was rewarded with the sight of a brilliant smile on the face of my husband. He ran up and swept me into his arms, twirling me and kissing me softly. \n\n\"Thank the Maker. I saw this group break through, and I couldn't stop them. I was too hard pressed to follow right away.\" \n\n\"I'm fine.\" I kissed him again, a chaste, reassuring peck. \"Let's check for survivors?\" \n\nSending Theron back inside the pavilion \u2013 grumbling the whole way \u2013 Alistair and I weaved our way through darkspawn corpses, finding only charred victims of the fireball I hadn't been able to stop. We made it out to where the others were, slitting throats of wounded darkspawn and separating enemy from friendly corpses. Alistair and I lent a hand, dragging darkspawn into a pile to be burned, laying the soldiers out for a pyre later. \n\nI ran into Wynne, who assured me Anders was fine \u2013 he had a new set of scars, but she'd healed him right up. He was sitting with his back to one of the wagons, Solona kneeling at his side awkwardly, not touching him, just fluttering anxiously. It was sweet, and I smiled softly. The rest of our companions were bumped and bruised but otherwise unharmed, and were helping out with sorting the bodies, Leli praying over our dead. Surviving soldiers had begun collecting wood for pyres. \n\nIt was exhausting, and when the pyres were finally lit and the darkspawn burned, we all collapsed around the fire at our camp. \n\n\"We have a problem, Duncan,\" I began, uncertain how to phrase my concern. \n\n\"Only the one?\" Alistair teased, and I flashed him a brief half-hearted smile, before turning back to the older Warden. \n\n\"The darkspawn know about me.\" \n\n\"Pardon?\" \n\n\"Look, that group that broke through...they were testing. Looking for me. Checking to see if they could locate me, seeing how much power I could absorb.\" \n\n\"What makes you say that?\" To his credit, Duncan didn't brush me off or ignore my vague warning. \n\n\"They were expecting me. When I killed one of them, the others had been waiting for it, attacking the spot they figured I must have been standing in. They couldn't sense me, see me, but they knew I had to be there somewhere. And those emissaries...they were spacing out their casting. One started, and when I stole its mana, the next began. It was like they were waiting to see how much I could take.\" I swallowed, remembering the gut-wrenching fear when I guessed what they were up to. \"Which is two, if you're curious. I had to expend some of it in shields before I could get the third. \n\n\"Duncan...they're learning.\" \n\nAlistair paled, reaching out to wrap his arm around my shoulders. Duncan looked thoughtful. \n\n\"How would that help them?\" Aedan looked like he felt sick. \"You killed them. They learned nothing.\" \n\n\"The darkspawn...it is possible the Archdemon can not only direct their actions, but also see what they see.\" Duncan stood, pacing back and forth. \"And even if not, he could be learning through failure \u2013 sending increasingly larger groups until one succeeds. Testing your strength.\" \n\nI pulled my knees up, wrapping my arms around them and putting my forehead on one knee. \"So what now?\" \n\nDuncan knelt in front of me, putting his hand on my shoulder. \"Now nothing. We continue. But we don't leave you alone to fight the darkspawn. Someone has to remain with you.\" He squeezed my shoulder reassuringly. \"We will be ready for them next time. \n\n\"And for right now, we need to move,\" Duncan stated, to a chorus of groans. \"Would you like to camp among the corpses? Besides, if Sierra is right, that means they know where we are.\" \n\nReluctantly we all began packing up. Aedan and Duncan went to talk to Eamon, so we packed their tents as well. When Aedan returned, his expression indicated extreme murderous intent, thinly-veiled. Duncan just looked tired. Without a word, both men shouldered their packs and headed off, as though they didn't even care if the Arl followed. \n\nWe stopped in the early afternoon at the first decent campsite we found with a stream for getting cleaned up. Eamon's men had indeed followed, and his pavilion was set up quickly nearby. Aedan had barely spoken a word to anyone; he went to the stream to wash up, and retired to his tent early, Zev following him. I hoped Zev gave him one of those Antivan massages he was always bragging about. \n\nI insisted Duncan go to bed early as well, and presented him with one of Anders' sleeping potions when he was done washing. He started to object, but the expression on my face must have been either much scarier, or more likely, more stubborn-looking than he was prepared to deal with, and he drank the potion with a sigh and disappeared for the rest of the night. \n\nThe rest of the Grey Wardens and I split watch, excluding Anders due to his need for rest after healing. I drew last watch with Wulf, while Alistair had one of the middle watches; we went to bed early as well. \n\nWe made love, both desperate to reassure ourselves that we were both alive and well; changing back into armour afterwards just sucked. I sighed as I cuddled into Alistair's side as well as I could with his ridiculously bulky plate, and slept. \n\nMy watch with Wulf was quiet; we chatted a little bit, but he wasn't much of a conversationalist. He asked questions about the Wardens, which I prevaricated; it was clear he'd realised I knew more about them than our other non-Warden companions. I told him I'd promised Duncan to keep Warden secrets, and that my knowledge was from the game we'd told him about. In return, I asked questions about his life as a werewolf, which he dodged. It was awkward. \n\nAt least I'd gotten used to his eyes, and no longer struggled with where to look when we spoke. \n\nI complimented him on his poise in the face of darkspawn, and he shrugged. \"Fought bears, wolves, some of them Blighted; heard enough about darkspawn to know what to expect. Wish they smelled better, though.\" \n\n\"Is your sense of smell more sensitive?\" \n\nHe shrugged. \"Than what? Seems to be, but is that because I was a werewolf, or just because of how I was made?\" \n\nI contemplated that for a minute, and then sighed. \"You could die.\" He looked at me curiously, the firelight reflecting strangely in his eyes. \"In the Joining,\" I clarified. \n\nHe nodded. \"I gathered as much.\" \n\n\"So, then, why?\" I really, really wanted to know. \n\nHe fidgeted for a moment uncomfortably. \"I need something. To have made a choice. I'm limited by my background, by these pointed ears, by the choices of others. I can't fit in with the elves, the humans won't accept me, and the only home I can remember is gone, a crumbling ruin empty of life. I need something that is mine, not just what I got stuck with when all was said and done. Somewhere I can use my skills without being arrested.\" \n\nIt was depressing, but he was right. What else was there for an elven, non-Dalish, almost feral former wolf in Thedas? I sighed. \n\n\"If Duncan asks me, I'll support you Joining the Wardens.\" \n\n\"Thank you.\" \n\nWe passed the rest of the watch in silence, waking the camp shortly after first light. Wulf had slipped out into the bushes and come back with some fresh fish and a handful of rabbits; the others set to skinning them while I made the porridge. I wasn't as disgusted by the necessity of catching and cleaning animals anymore, but it was still something I didn't think I'd be able to do. Oghren teased me, calling me a Princess, offering me some dried, salted nug from his pack instead; I gagged, and Leli grabbed Schmooples and shut him in her tent, shooting the dwarf dirty looks."
    ],
    "authorname": "ElyssaCousland",
    "tags": [
        "fantasy",
        "fanfiction",
        "dragon age",
        "modern girl in thedas",
        "romance"
    ],
    "category": "Celebrities & Fan Fiction",
    "url": "https://www.literotica.com/s/there-and-back-again-ch-95-96"
}
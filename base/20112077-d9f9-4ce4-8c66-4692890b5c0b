{
    "title": "CvsN 05: Altogether Now",
    "pages": [
        "Part 5 of Convenience vs. Need\n\nWherein Jack (that's me), a man of extreme horniness and questionable morals, invites his new girlfriend, his other new girlfriend, his best friend, and his best friend's wife into his bed. \n\nYou might want to read the other parts of this story first, starting with Convenience vs. Need, if you haven't already.\n\n* * * *\n\nI had to pee so badly, I thought I would explode. I was alone in my bed, but the memories of the previous evening, and that morning, were more vivid then most of my waking moments. I rushed to the bathroom, and struggled to start my stream. I had to pee so bad I couldn't, and finally with a sigh, I managed to start, and finally felt the release my bladder so badly craved.\n\nAfter about 20 minutes, or so it seemed, I wandered out. I had heard some low noise, and thought the TV was on, but no one was in the living room. I followed the sound to the kitchen where I found Beth and Debbie, deep in a whispered conversation, giggling. Debbie was dressed in shorts and tee shirt, her favorite attire, and Beth was dressed in a tee shirt of mine, which reached to her knees. \n\nThey both looked at me, and laughed out loud. \n\n\"It's about time, lazy!\" Beth teased, rushing to my arms, and giving me a warm kiss.\n\nDebbie was flipping some pancakes I realized. She was smiling, as she turned off the burner, stacked the three perfectly round, perfectly browned pancakes, and opening the oven, placed them with several others already there. She turned to me as well, slipping into my arms, and received a kiss for her efforts.\n\n\"I see you had a busy night,\" Debbie teased me. \"I would say breakfast is ready, but it's past noon. Go in and I'll bring you lunch.\"\n\nI slipped into the bedroom for a pair of boxers, and returned to my seat at the head of the table. It was set for three, and the girls joined me. Breakfast was some reheated sausage from the previous night, and pancakes.\n\n\"You know Jack, Debbie and I were talking. I bet we could have a pretty successful little day care business if we wanted. You know we're good with children, and my friend Anne would work with us if she had a chance.\"\n\n\"There's lots of room on the property, and it wouldn't be too expensive to set up.\" Debbie added.\n\n\"Debbie's watching two already, and I'm watching several, but I don't make anything off of them, they pay us almost nothing.\" Beth chimed in, almost before Debbie had stopped speaking.\n\n\"Slow down, girls. Don't you need some kind of licensing?\" I asked, between bites.\n\n\"It's just a formality, they check your background for criminal charges, and inspect the property to make sure it's safe. We could have the main floor set up in just a few days.\" Beth was awfully eager.\n\n\"If you're going to do something like that, I won't have you doing it half-assed. We'll put an add-on on the side of the house, with a daycare room, and kitchenette and bathroom for the kids. But you've got to be sure about this. You guys hardly know each other. And then there's the whole weird relationship thing here.\"\n\nThe girls looked at me like I'd grown a third head.\n\n\"How would you afford something like that?\" Debbie asked. \"You could barely get in that house.\"\n\n\"Well, aren't you the silly thing now. I put over 20% down on that house, when all I was paying for was the value of the property. If I were to get it appraised right now, it would appraise for double what I paid for it, easy. If it passes city inspection, I can get a home improvement loan that I can fold back into the price of the house. Once we're done with this first set of repairs, we can easily get enough to add on a place for you guys.\"\n\nThey still stared at me, in shock. \n\n\"Better yet, we could improve that back building. It's got plumbing, and electricity. It would be really easy to extend the garage area into a bigger care room. Add a bathroom, and prepare the meals in the main house. Enclose a play yard back there. Did you know that this property was previously subdivided into four separate lots? That's why the garage has an entrance from a different street. We could incorporate, lease the property to the day care company, save money, and protect ourselves from liability.\"\n\n\"What do you mean, weird relationship?\" Beth asked.\n\nOops. \"You know, three different women in my life. Two living with me, one living at home, all the confusion, and I still don't know how you're all going to get along.\"\n\n\"How we get along is our problem, I would think.\" This from Debbie, who was a veritable chatterbox this morning.\n\n\"Girls, I'll tell you what, let's do one thing at a time. Let's get these house repairs done, get the place cleaned and inspected. Let's get moved in, and out of this stupid apartment. If we work hard, I think we can be ready by the start of next week. If you still like the idea, we'll sit down then and write up the paperwork to get you established as a day-care company. Does that sound fair?\"\n\nSeveral long moments passed. \n\n\"I can't believe you would do this.\" Debbie finally spoke.\n\n\"Why not. I like the idea a lot. It'll make you more independent, and I believe it will make you happy. What could be better than being surrounded by beautiful, happy, independent women?\"\n\n\"Beautiful, happy, horny, independent women?\" Beth teased.\n\n\"Ok, you got me there. You know what I'd like to do now?\" I smiled.\n\n\"I hope whatever it is includes showering.\" Debbie joked, crinkling up her nose.\n\n\"Well, it could. I'd like to take a shower with one of the loves of my life, and then have both of us join the other back in my bedroom.\" \n\n\"God, you are incorrigible. You can't really be serious!\" Beth exclaimed.\n\nDebbie was surprisingly direct. \"If you take the shower, I'll clean up in here, and I'll wait for you in the bedroom.\" Without waiting for a response, she started clearing the table.\n\n\"Join me?\" I extended my hand to Beth, who just shook her head, but stood up anyway, placed her hand in mine, and followed me to the shower.\n\nI started the water running, then pulled my shirt off of Beth. Her body was as beautiful as I remembered. I dropped my shorts and took her in my arms.\n\n\"Do you still love me?\" Beth asked.\n\n\"I can't believe how much.\" I replied, kissing her neck and holding her tight.\n\n\"But you still want to do Debbie?\" Beth asked.\n\n\"You know, I think I love her too. You guys are killing me.\" I continued kissing her and holding her, leaning back against the wall, pulling her to me.\n\n\"I suppose you love Karen too?\"\n\n\"No. Karen I like, and I enjoy being with, and I'm very comfortable around, and she even turns me on, though I'm not sure why, but that's not love.\" \n\n\"But you'll still fuck her, won't you.\"\n\n\"Yes. But if you and Debbie wanted me to stop, I would. I would still let her live with me.\"\n\n\"Because you promised?\" she asked.\n\n\"Absolutely.\" I took her hand and led her back into the shower. We took a long time, once again enjoying exploring each other, soaping each other down, and cleaning our hair. The water was cooling again.\n\n\"You are going to make my water bills go sky high.\" I teased.\n\n\"Oh, and is that such a high price to pay for this?\" she laughed, holding her breasts, and pirouetting before me.\n\n\"Hell, no!\" I answered, grabbing her and kissing her again. \n\nThe cleaning wizard had struck. The bedroom was neatened up, and the bed remade. Sitting at the edge, was my blonde goddess.\n\nI walked to her, helping her to her feet. Beth watched as I undressed her.\n\n\"She is so beautiful,\" Beth spoke softly.\n\nDebbie blushed deeply.\n\n\"You are both so beautiful.\" I answered, as I removed the last of Debbie's clothing.\n\nI climbed into the bed, and opened my arms. \"Please, come to me.\"\n\nThe girls came to me, and cuddled up, one to each side.\n\n\"I just wanted to say something here. I think I'm the luckiest guy in the world to have such beautiful women in my life. I don't know why, but I am crazy about the both of you, in different ways, and yet I can't imagine how I lived this long without you two.\"\n\nI leaned over and kissed first Debbie, and then Beth.\n\n\"I need to know if you are ok with what we're doing here. I want to love both of you, heart and soul, and I want to be with you both, but I don't want you to be unhappy, and I don't want you angry and jealous of each other.\"\n\nThey looked at each other, and at me.\n\n\"I'll take what you have to offer, whatever you want, you know that.\" Debbie's whispered reply was almost inaudible. \n\n\"Debbie. Please, what do you feel? What do you want? I don't want you to accept whatever, I want to know.\" \n\n\" I just want to be happy for a while. And you make me happier then anyone I've ever known.\" She was burying her face in my side, her hand reaching across, holding me desperately, her fingers digging into my skin. \"I'll do anything to keep you happy, anything to stay with you, please.\" Debbie was crying and once again I felt like a heel, and I didn't even know why.\n\n\"He loves you, silly.\" Beth, reached across, brushing the tears from Debbie's cheeks. \"He told me. He's never going to let you go.\"\n\nThis only caused Debbie to cry more inconsolably, shuddering and shaking in my arm.\n\nI still don't understand Beth, she does more things to make me wonder then anyone. In this case, she climbed off the bed, and climbed back on behind Debbie, wrapping her in her arms as well. Debbie almost broke down then, and turned to Beth, clinging to her, and crying her little wounded soul out. I watched Beth tenderly kiss her tears away, holding her.\n\nI don't cry of course. So I just lay there holding them both in my arms, wiping the sweat out of my eyes on occasion, and bemoaning the fact it looked like I might be coming down with a cold, my eyes kept watering, and I seemed to have the sniffles.\n\nI don't know who kissed whom, but there was no doubt the girls were kissing. In spite of my cold, the sight of that proceeded to do the magic on me, and I found myself hard again, with two naked women in my arms.\n\nBeth broke the kiss, pushed Debbie back towards me, and whispered, \"Go to him.\"\n\nDebbie clung to me, her sobbing finally diminishing, planting a couple of tiny kisses on my shoulder. I pulled her over on top of me, and kissed her lips. \"It's true. I do love you. I love both of you.\"\n\nSweet Beth reached down between my legs, and guided my stiff cock into Debbie, placing the head at her smooth opening. We both shifted smoothly, she down, and me up, and I entered her. I just held her there, impaled on my cock, tasting her lips, and telling her how much I loved to be in her, with her, around her.\n\nBeth crawled to my side, her head against mine. \"I can't believe how sexy that looked, your big cock going in her smooth pussy. Deb, would you help me shave my pussy later?\"\n\nDebbie, sniffed, then giggled a bit. \"Only if we can get him to shave down there. I hate getting those hairs in my teeth.\" \n\n\"He told me he would, we'll just have to hold him to it.\"\n\nDebbie smiled and whispered conspiratorially, \"He'll say anything when he's hard.\"\n\n\"Hey, HEY. I'm still here, don't talk about me like I'm not here.\" To emphasize my point, I thrust up into Debbie, reminding her she was in the midst of getting drilled.\n\nBoth girls laughed, and Debbie closed her eyes with a sigh, and rested her head on my shoulder. I turned to Beth, mouthing a silent thank you, and kissing her. The kiss grew more and more passionate, and I found myself thrusting up into Debbie, excitedly, while Beth kissed me hard.\n\nBeth broke off the kiss. \"Jack?\"\n\n\"MmmHmm?\" I answered, kissing Debbie now.\n\n\"You remember what we did last night?\" \n\n\"MmmHmm!\" I answered; I remembered it all.\n\n\"Would you lick me again?\" \n\nI broke off my kiss. \"Of course I will. Debbie, sit up.\" Debbie did, settling deeper onto my cock. \"Now come straddle my face, Beth.\"\n\nBeth pulled the pillows out of the way, then stood over me, and with a girlish giggle lowered herself down onto my face. \n\nThere was no finesse to my eating her out, or to my screwing Debbie. Beth just pushed her pussy down into my face and I licked what I could reach. When possible I sucked on her clit, or drove my tongue into her pussy. Debbie, on the other hand, screwed me at her leisure this time, maintaining a constant slow pace, driving me crazy. I eventually freed my hands, and was able to use them to pleasure Beth. I shifted her forward, and stuck my tongue up her sweet little ass, while I reached around and slipped two fingers in her pussy. The combination pushed her to the edge and over, and when I felt her cumming, I slid my tongue back into her pussy, and slipped a finger from my other hand back into her tight little rear entrance, that my tongue had just vacated.\n\nShe squealed, cumming hard on my face, pushing down, almost smothering me. She finally rolled off clutching her hands to her pussy. Debbie bent over and using her tongue, cleaned Beth's juices from my face.\n\nIt was at this inopportune moment that the doorbell rang.\n\n\"Shit.\" I moaned, gently dislodging Debbie from her perch, and tossing on my robe. I went to the door and peaked out. Cathy and Joe were there.\n\nI opened the door. Joe marched in laughing. \n\n\"It's about time you finally did her.\" He laughed. \"I swear she was becoming almost unbearable.\"\n\n\"Hi Joe, Cathy, I\u2026\"\n\n\"You gave me the worst bruises, you bastard. Joe had to know every detail.\" Cathy closed the door behind her, and walked into my arms, kissing me.\n\n\"I thought that maybe I could help you this time,\" Joe said, stepping up behind his wife, and grabbing her breasts, through her shirt, while she ground her crotch into me.\n\n\"Umm, I have company, in the back.\" I tried to be quiet. Cathy tensed up like a steel spring.\n\nCathy peaked around my side, to see both Debbie and Beth peaking back from around the corner.\n\nCathy blanched, Beth turned bright red, Debbie ducked back into the room, and Joe laughed like a hyena. \n\n\"I can't believe you! Jesus man, I'm a fan!\" He put up his hand for a high five, and I couldn't resist smacking it.\n\nIn for a penny, in for a pound, I thought.\n\nI reached my arm around Cathy, and guided her back to the bedroom, with Joe on my heels. \n\n\"I think that we need to catch everyone up on the news.\" I said, loudly enough for the girls in the bedroom to hear me. When we entered the room, they were both in the bed under the covers. I was still surprised that Cathy had followed along so docilely.\n\n\"Debbie, Beth, you remember Cathy? Well, yesterday, just before lunch, she and I came over her and we had sex.\" I was standing beside her, and I pulled her shirt off over her head. \"She and Joe have wanted me to be with her for a while now, and I just was too dense to know.\" I dropped to my knees and undid her belt and unsnapped her pants. \"That's why she was so mad, and that's why she's here now. They didn't know I had company.\" I pulled down her pants, and she kicked off her shoes and stepped out of the pants.\n\n\"Cathy, last night Beth came over, and we talked things out.\" I pulled Cathy's panties down, and helped her step out of them. \"We ended up in bed, and we've been in and out of it ever since.\" I stood back up and removed Cathy's bra. \"Debbie came over to help me clean up, and was good enough to join Beth and I in some play.\" I took Cathy's hand, and led her to the foot of the bed. \n\n\"Joe, I'm sorry I didn't talk to you before I screwed your wife yesterday, but I didn't know what else to do to clear up what was between us.\" I looked over to Joe who was still fully dressed. \n\n\"Beth, Debbie, would you mind if Cathy and Joe joined us?\" I asked. Now for the moment of truth.\n\nBeth reached forward, and pulled Cathy into the middle of the bed, giggling. \"Welcome to Jack's harem, Cathy. I'm so glad you could join us.\" Even Debbie had to laugh at the formality of the tone in Beth's voice. \n\n\"Jack, I don't think even you could satisfy all three of us, so I guess Joe will have to join us.\" Debbie pronounced, adding her implicit ok.\n\n\"Yeehaa!\" Joe cried out practically jumping out of his pants, while tearing his shirt off.\n\n\"Look at what you did to her poor legs, you beast!\" Beth exclaimed, seeing the dark bruised running across the front of both Cathy's legs. She leaned down and kissed the bruise on the leg nearest her, and Debbie, taking her cue from young Beth, did the same on the other side.\n\n\"Wait!\" I cried out before things got out of hand. \"This is awful sudden. So I want to take a moment here.\" The others sat up, expectantly.\n\nI sat next to Debbie, and took her in my arms. \"Debbie. I'm not going to go around, giving you out to my friends. You don't really know these people. And if you don't want to do anything, you don't have to.\" I held her hands in mine, trying to reassure her.\n\n\"I know Joe. Joe is one of the main reasons why we're going to have a place to live at the end of this week. When I saw that place, I didn't think it ever would be livable.\" Debbie, pulled her hands from mine, stood and went to Joe. \"Thank you, Joe.\" She kissed him, then escorted him by the hand back to the bed.\n\n\"If it's ok with you Jack, Joe can join us here. I\u2026I don't want to make love to anyone but you, but I'd like to show Joe my appreciation, in other ways.\" She reached out to Joe's cock, which was standing at attention, and gave it a little squeeze.\n\n\"Thank you, God, thank you.\" Joe added, as he turned his head to heaven and we all got a small chuckle.\n\n\"And you Beth,\" I crawled across the bed to her, a little awkwardly, since it involved climbing over Cathy. \"This must be a little overwhelming to you, and whatever you want, you know I'll go along with. Even if that means asking Joe and Cathy to leave.\" \n\n\"Jack. Cathy has been my mentor, setting us up, giving me advice that I was too hard-headed to take.\" Beth reached out and took Cathy's hand in her own. \"I should have known how she felt, she was such a fan of yours, trying to get me set up with you. If not for her I wouldn't be here.\n\n\"And Joe? I love Joe. Joe, I'm going to have to show you what Jack taught me last night. I think you'll enjoy it.\" Her devilish grin was all the invite Jack needed and he leaped into the bed, reaching for Beth.\n\n\"Wait! Cathy came here expecting to be shared, but not with women, and not to have her husband shared as well. What do you say, Cathy?\"\n\n\"I say it's about time you shut up and stuck that big sweet dick inside me you jerk.\" That was all the encouragement I needed, and who was I to deny such a good, sweet-talking friend?\n\nAmid the chuckles, I crawled between Cathy's legs, pulled her down, and did just as she'd asked. I entered her in one smooth stroke.\n\nI guess Joe was crowded on his side of the bed. He reached out and pushed his wife sideways in the bed. \"You always hog the bed,\" he told her, and I slid with her, moving her to the side, and commencing the screwing.\n\nI leaned over and gave her a kiss. \"Thanks for coming over.\"\n\n\"Don't mention it, now shut up and fuck me you fool, and let me watch my poor hubby get tore up.\"\n\nI couldn't help but chuckle. I pulled out, and turned her on her side. I placed two pillows under her head, and curled her legs up towards her chest. With just the slightest of searching, I was back inside her, enjoying her, while she was able to watch the activities.\n\nBoth my girls were giggling, competing to kiss and suck Joe's cock. He had a substantial member, long and thin, leaving lots of room for the girls to play with. He watched the two young beauties eventually take turns gobbling him. Debbie was on her hands and knees, and her ass was well within my reach. I reached out and squeezed her cheeks, then slipped a couple of fingers up inside her.\n\nJoe looked over to see me plowing his wife, and his tender side peeked out for just a moment, as he reached over, and brushed her hair from her face. She reached out and took that hand in hers, holding it tight, while she bounced under my unrelenting attention.",
        "Beth was whispering to Debbie, and they both pulled back.\n\n\"Joe, stand up a second.\" Beth said.\n\n\"As you wish,\" he quipped, standing as requested.\n\nBeth lay on the bed, her head hanging over the side, her legs ending up on top of Cathy's. \"Today is your lucky day, you get to be the second person ever to fuck my mouth, Joe.\"\n\nFor once, Joe was dumbstruck. He guided his cock to her mouth, and slid it in a short distance. Beth reached behind him, and as she had done with me, guided the pace, until she pulled him deep into her throat.\n\n\"Oh, fuck! Cathy! Do you see this?\" Joe gasped, thrusting slowly in and out of her mouth, to a measure beat. Short, short, short, deeeeep. \n\n\"Harder, Jack, please, I'm going to cum\u2026\" Cathy pleaded, watching her husband fuck that tender young mouth. She reached down between her legs and Beth's ass, and I could see her pushing her fingers into Beth. Beth's legs spread apart at the intrusion, and I had a bird's eye view of Cathy's middle two fingers thrusting away at one end of Beth, while her husband filled the other end.\n\nI picked up the pace, and fucked her mercilessly. Debbie had moved behind me, and was fondling my balls, while she whispered to me. \"Fuck her, Jack, fuck her hard.\"\n\nCathy's cry alerted me to her first orgasm of the evening. I slowed a bit, fucking her with long hard strokes, grunting as I pounded into her. She was cumming continuously, and her release coincided with Joe's own, as he pulled out of Beth, and jerked off on her tits, splattering her with his seed.\n\nWhen Cathy stopped cumming, I slowed, and then stopped altogether. I reached down to between her cheeks, and slid a fingertip into her butt. \"Remember what I told you yesterday?\" I told her, slowly working my finger into her tight ass.\n\n\"Don't you do it.\" She warned me. At the same time she pushed her ass back hard onto my finger. I had no doubt what she wanted.\n\n\"Joe, want to watch me fuck your wife's ass?\" I had backed out, pulling my cock out of her, and was bent over her ass, pushing a second finger inside. \n\nCathy was clutching her legs tight to her chest, leaving herself wide open to my assault. She closed her eyes. \"God, Jack you are such a bastard. Don't fuck my poor ass.\"\n\nAll the action around me had ceased, and Cathy was clearly the center of attention. \n\n\"Jack\u2026\" Beth spoke up for the first time. \n\n\"Hush, baby, while I fuck her up her ass,\" I said. I took my cock in hand and pressed the head against her little puckered opening.\n\n\"Oh, God, you're going to do it, aren't you?\" Cathy moaned.\n\n\"Joe, how is her ass?\" I asked, pushing just a little.\n\n\"Fuck if I know, she won't let me touch it.\" \n\n\"Well, when I'm done here, you can have a turn. In the meantime, if she speaks again, I'd appreciate it if you'd fill her brazen mouth for me.\" \n\n\"You got it, buddy.\"\n\n\"Stop him you wimp, are you going to let him stick his huge dick in my butt?\"\n\n\"Damn right I am.\"\n\nI chucked at the interplay, and pushed hard, driving a good two inches into that cherry ass.\n\n\"Ooww, ow, ow. Stop Jack, you're splitting me. Stop you beast.\"\n\n\"Cathy, you know I'm going to be balls deep in your ass in just a minute, now relax and enjoy it.\"\n\n\"Fuck you, you asshole.\" She was now rocking back and forth against my cock, trying to force more of it inside.\n\nI obliged, pushing a little harder, and then working those few inches in and out. Every few strokes I would get in a little farther, to her loud moans, until I was all the way in.\n\n\"How does it feel, Cathy.\"\n\n\"Just do it, get it over with. Prick.\" \n\nI pulled out and slammed my whole cock back into her ass. It was painfully tight. She cried out. I could hear her barely pronounced words, fuck, fuck, fuck.\n\nI did it again. This time she responded loudly. \n\n\"Fuck me! Fuck my ass you bastard. FUCK ME!\"\n\nJoe was hard again, with the help of Beth's talented hand, and he climbed up the bed, and stuck his cock in his wife's mouth. She looked up at him, eyes burning, as he grabbed her hair, pulling her down onto his cock. She sucked him, stopping every few strokes to moan about the reaming that her ass was taking.\n\nI pulled out, and she whimpered. I pulled her to her knees, and pushed her face back down to Joe's cock, as he seated himself in front of her. Debbie decided to get in on the action, and crawled underneath Cathy sideways, her face under her dangling breasts. She kissed and sucked them, occasionally whispering soothing words to Cathy.\n\nI spread Cathy's legs wide, pushing her knees forward a bit, and plunged my cock back into that tight rear passage. Holding her ass cheeks tight, I renewed my efforts to screw her butt.\n\nBeth must have felt left out. I felt her between my legs, and looked back to see her working her head between my legs from the back. I pulled my cock out and looked down to see her reaching up, and licking Cathy's pussy, while my cocked worked in and out just beyond her tongue. \n\nBack to the task at hand. I fucked her ass, hard and fast, unrelenting. No more talking, no more repositioning, no more joking. I worked her ass, pounding away, while she wilted under the attack. After a few minutes Joe was fucking her slack mouth, as she lay there, arms outstretched, and he used her hair to pump her face up and down on his cock. Her legs gave out, and her full weight came down on Beth's face. Beth kept her mouth at work, and I tried to hold up some of her weight by her hips.\n\nI felt her shudder as she came, but I varied my assault not a whit. The sweat was trickling down my chest, and droplets splattered on her back. Debbie tried to sooth her, kneeling at her side, caressing her, to no avail.\n\nAt last, I could feel my end approaching. Grunting, I slammed home into her ass with long, hard strokes, hammering at her. Each thrust forced her mouth down over Joe's cock, pushing him down her throat. Beth pulled back a little, not able to take the pressure against her face, and watched the finish from between my legs.\n\n\"FUCK!\" I cried, driving into her one last time, and pumping my seed deep into her bowels.\n\n\"AAAAHHHH,\" Cathy cried, pulling her head back off Joe's demanding cock, her eyes rolling back in her head, as she felt the burning heat of my cum filling her ass.\n\nWith a few last strokes, I finished I her ass, and pulled out, looking down to see how her tight little hole gaped open long after I was out. I collapsed on the bed beside her, gasping for breath. She crawled over to me, lying across my chest.\n\n\"I can't believe you fucked my ass, even though I told you not to.\" She whined.\n\n\"I'll do it again.\" I told her, pulling her mouth to mine, and kissing her deeply. She responded passionately, until I pulled away, to try to catch my breath.\n\n\"I know you will. Whenever you want.\" She whispered, pressing her lips to my neck."
    ],
    "authorname": "Tx Tall Tales",
    "tags": [
        "ffm",
        "cunnilingus",
        "oral",
        "fffmm",
        "deep throat",
        "first anal",
        "double penetration",
        "oral anal dp",
        "18-year-old",
        "mature"
    ],
    "category": "Loving Wives",
    "url": "https://www.literotica.com/s/cvsn-05-altogether-now"
}
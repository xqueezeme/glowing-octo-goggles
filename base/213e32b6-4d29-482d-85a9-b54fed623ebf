{
    "title": "Women's Studies Ch. 10",
    "pages": [
        "\"Oh, fuck. That's it bitch. Take that you cum guzzling little cunt,\" I cried. \"I'm gonna ride that ass like it's Prom Night!\"\n\n\"Who's my little girl?\" I asked sweetly. \"You are...I hope you prepacked that ass with Vaseline because you're getting fucked!\" I yelled into my headset.\n\n\"Yeah, yeah, yeah, I fucked your mom,\" I said, replying to some kid halfway around the world. \"Hell, I fucked your dad too,\" I added offhandedly. \"Did you know you suck more cock than he does? BOOM BITCH!\" I shouted throwing down my controller, reveling in the victory music coming in through my headphones and blasting from the surround sound system.\n\nI had just finished annihilating a group of kids in Call of Duty, and trash talking being a hallmark of a good gamer, I had worked up my skills into an art form.\n\nI had gotten back to the dorms from Christmas break late Friday night, and not accounting for sleep, I had been playing the new Call of Duty ever since. With the new elite controller my sister Audrey gave me for Christmas, I had been dominating the competition like never before.\n\n\"You're not a very nice person,\" some young squeaker named HeAd_ShOtZ_KiLlA said through the microphone as the final score popped up on the screen showcasing my glorious victory.\n\nAnother gamer on the other team shouting, \"You're such a fucking faggot! Get a life asshole!\"\n\n\"Jeez! Settle down!\" I said in an offended tone. \"You don't have to be a poor sport about it.\"\n\nAll of a sudden, I had this feeling like I wasn't alone. I quickly turned around to see nearly all the girls from my dorm suite staring back at me.\n\nRipping off my headset, I stood to face them, \"I...um. Sorry. I didn't realize anyone else was here.\"\n\nKennedy just burst out laughing and the other girls followed suit. \"Get a little carried away, did we?\" she asked.\n\n\"Yeah, kind of,\" I said blushing.\n\nTo be honest, I had just been getting warmed up. This had only been a light demonstration of how vulgar I could become while playing video games. I didn't know what it was, but slaughtering my foes on the field of battle just worked me up into a frenzy that could only be sated by my spewing out profanities in an attempt to dominate their minds as well as their virtual bodies.\n\n\"Did you see that game though?\" I asked bashfully. \"It was good right?\"\n\nMore laughs erupted from the girls as they broke up, hauling luggage and settling back in from break now that the show was over. Now more than ever, I was grateful that Gamer Girls weren't an oddity any longer. Still, I needed to keep a grip on myself...and not in a my parents aren't home and I just discovered internet porn kind of way.\n\n\"How long have you been playing?\" Kennedy asked, taking a long look at me.\n\n\"Only for a little while,\" I responded defensively. \"Wait, what day is today?\"\n\n\"It's Sunday,\" Abigail responded, shaking her head and chuckling.\n\n\"Sunday?\" I asked not believing it. \"What happened to Saturday?\"\n\n\"Yeah, Sunday,\" Abigail stated. \"It's almost noon.\"\n\n\"Since you're done berating juveniles like a drunken sailor, do you think you could help us with our bags?\" Kennedy asked. \"There are still more downstairs in the car.\"\n\nStill a little embarrassed with having my entire dorm unit hearing the awful things I was saying, I quickly turned off my console and put everything away. In only a few minutes I was heading down the stairs and out of Evens hall toward the parking lot to help with their bags.\n\nI had definitely noted how much more luggage I required since becoming Lexi, but by the sheer volume of bags the two of them required, I still had a few things to learn about packing as a woman. It took two full trips with our arms loaded to get all of their things to our room. To be fair, Abigail's bags contained the lions share. Her father had obviously taken her shopping on vacation, evidence from the brand-new Louis Vuitton suitcases.\n\n\"Did you load this thing with bricks?\" Kennedy asked as she heaved the last case onto our jumbo bed. \"This thing weighs a ton!\"\n\n\"I think that one has my shoes,\" Abigail commented, inspecting the tag on the handle.\n\n\"Break was only like two weeks!\" Kennedy exclaimed. \"How many shoes do you need?\"\n\n\"Those are the shoes I bought on vacation...\" Abigail trailed off with a slight blush. \"They're not all for me...I got you guys something too,\" she defended.\n\n\"Shoes?\" I asked, perking up at her words.\n\n\"Yeah, give me a second to find them.\" With that, Abigail dove into the case and began carefully pulling out pair after pair of expensive shoes that were strategically wedged inside like a female version of Tetris.\n\n\"I got you each a pair of these red sole Christian Louboutin open toe pumps,\" Abigail said handing each of us a pair. \"And...\" she continued to dig.\n\n\"Christian Louboutin?\" Kennedy asked shocked. \"These must have cost a fortune!\"\n\n\"Daddy pitched in too,\" Abigail confessed. \"We did a lot of shopping and he thought it would be nice if I got my best friends something nice.\"\n\n\"This is a little more than just nice,\" I said, trying not to drool over my beautiful new shoes.\n\nI was immediately in love with them. A small part of me twisted at how expensive a gift like this was. We all knew Abigail and her dad were loaded, but we never treated her like an ATM. We always pulled our own weight and paid our own way. I didn't resent her for her wealth, but I did feel more than slightly outclassed in the gift giving department.\n\n\"...we have purses,\" Abigail finally finished as she pulled out two handbags. \"We have the black and white Chanel with the silver hardware, and this cute Louis Vuitton handbag,\" she said holding them up for us in either hand, giving them a little spin like some hot show girl on The Price Is Right. \"I figured I would let you guys decide which ones you wanted.\"\n\n\"The Louis Vuitton,\" Kennedy said quickly, obviously having no qualms about accepting such a lavish gift. \"This is so cool!\" she nearly squealed, rubbing the fabric of the purse against her cheek smiling.\n\n\"That leaves the Chanel for you,\" Abigail said handing me the bag.\n\nI was more than happy with the Chanel bag, personally. I liked the way the silver hardware looked against the fabric, and all around it suited my style better. Still, it seemed like too much.\n\n\"Are you sure about this?\" I asked Abigail. \"This stuff has to have cost a fortune.\"\n\n\"Don't worry about it,\" Abigail said, brushing it off. \"My father always says that a gift should be something someone wants, but would never buy for themselves. Besides, he insisted.\"\n\n\"He did?\" I asked.\n\n\"Well, he insisted on the purses,\" Abigail said. \"I got the shoes for a steal after I nearly cleared them out buying stuff for myself,\" she admitted. \"Wipe that worry away and just enjoy it. You guys are worth it.\"\n\n\"Thanks Abby,\" I said pulling her into a hug. \"These are really great.\"\n\n\"Yeah, thanks Abigail!\" Kennedy chimed in with a smile as she slipped on her new shoes.\n\n\"I uh...got you guys something as well,\" I said.\n\nThere was no way I could top Abigail's gifts, but since she started the gift giving, I couldn't really hold out now. I went to my bag in the closet and pulled them out.\n\n\"This is for you,\" I said, handing Abigail a small velvet pouch. As Abigail opened it, I explained what it was. \"It's one of the hundred dollar chips I won with you and your dad. I had it made into a key chain and had our names engraved into it.\"\n\n\"This is so thoughtful!\" Abigail said tearing up slightly, surprising me. \"Now I feel like a real fool.\"\n\n\"What? Why?\" I asked confused.\n\n\"You obviously spent a lot of time thinking about this gift...and then going and getting it made. All I did was by you something expensive,\" Abigail said.\n\n\"I love my gift,\" I said truthfully, trying to comfort her.\n\nI was honestly surprised she was taking my gift so well.\n\nAfter another hug from Abigail, it was time for Kennedy.\n\n\"I asked a friend to help me with yours, Kennedy,\" I said as I carefully handed her a thin rectangular package wrapped in thick brown paper. \"Be very careful opening it,\" I warned.\n\n\"This isn't going to explode glitter all over me?\" Kennedy asked quirking an eye at me.\n\n\"No,\" I laughed. \"I just don't want you to tear what's inside.\"\n\nKennedy slowly made her way through the wrapping as Abigail and I watched.\n\n\"Wait...is this mine?\" Kennedy asked as soon as the obviously well used Playboy came into sight.\n\n\"Yeah,\" I replied.\n\n\"You know I was looking all over for this before I left my moms house,\" Kennedy admonished. \"I thought I lost it.\"\n\n\"I had to borrow it for a little while,\" I smiled. \"Open the centerfold.\"\n\nAs she eagerly opened the magazine, the beautiful Goddess looked just as excited as a thirteen-year-old boy with his first nudie magazine.\n\n\"She signed it!\" she exclaimed with a huge grin, her lips moving as she read the inscription to herself.\n\nI already knew it by heart.\n\n \n\nDearest Kennedy, I can see this magazine has kept you warm on those lonely nights. The next time I see you, it won't be this magazine keeping you warm. With Lust, Audrey Allen.\n\n\"This might be the best gift I've ever gotten,\" Kennedy smiled, gently setting the magazine down on the bed before throwing her arms around me.\n\n\"Isn't that your friend, Dreya?\" Abigail asked. Noticing the picture on the cover.\n\n\"Yeah, Kennedy has a little bit of a crush on her,\" I answered.\n\n\"A little?\" Kennedy asked \"The moment I saw her photo back in high school, I knew that I liked women. She turned me gay in the best possible way.\"\n\n\"You never mentioned that she was in Playboy,\" Abigail commented.\n\n\"She doesn't like to spread it around that much,\" I explained. \"She's not ashamed of it or anything, she just doesn't like the attention that some guys give her when they recognize her in public. Some of them seem to think that just because she took her clothes off for a magazine, that she will take them off for them. Or they just want to screw a porn star without ever really caring about who she is.\"\n\n\"I guess that could be kind of rough,\" Abigail said thoughtfully. \"It makes me kind of glad that my father has gone out of his way to keep my picture out of magazines and newspapers.\"\n\nAfterwards, Kennedy presented us with cute pajama sets from Victoria Secret; pajama pants and tops made out of extremely soft material that felt wonderful against our skin. With gift giving out of the way we ordered in some Chinese for lunch. After doing rock-paper-scissors to see who would fight through the onslaught of returning coeds, Abigail ran down to pick up our food from downstairs. As convenient as it would have been, delivery boys were never allowed past the front entrance of the dorm buildings.\n\n\"I'm getting boobs,\" I told Abigail and Kennedy as I tried to wrangle a piece of spicy sesame chicken into my mouth with chopsticks.\n\n\"What?\" Kennedy asked, a little surprised by my abrupt segue from our conversation about the merits of airbrush makeup over traditional.\n\n\"Did you just say you're getting boobs?\" Abigail asked, just as startled by the abrupt topic change.\n\n\"Yeah,\" I smiled.\n\nEver since I had brought it up to my sister a few days ago, it had been a constant thought at the forefront of my mind. I had been thinking about it for a lot longer, but getting implants would be a huge step. I knew that I loved being Lexi, but once you started getting surgery, there really was no turning back. I had finally made up my mind though. As far as I was concerned, Alex was gone forever, and Lexi was here to stay.\n\n\"When are you getting them? How big?\" Kennedy asked, perking up from her slouch on the bed. She seemed eager to dive right into this topic change.\n\n\"Where are you going to get them done at?\" Abigail followed, almost on top of Kennedy. \"Make sure you find some place reputable. I've heard horror stories.\" Count on Abigail to be the pragmatist.\n\n\"I don't know!\" I said, excitedly answering both of them. \"I just know I want them.\"\n\n\"What made you decide?\" Kennedy asked.\n\nI told them all about the conversation I had with my sister over break, and about the thoughts I'd been having on the subject for the last few months. Abigail sat with concentrated interest, whereas Kennedy seemed to be losing focus. By the little smile on her lips, and the glossed-over look on her wandering eyes, I could tell she was already imagining what my breasts would look like.\n\n\"I've already researched some of the places near here,\" I said, setting down my chopsticks and Chinese container to reach for my laptop. \"It looks like the going price is around five to seven grand, so I'm not really worried about cost. I'm just looking for the one with the best reviews,\" I said, opening the windows I had earmarked.\n\n\"This is one subject I have no knowledge on,\" Abigail said honestly as she leaned forward to take a closer look at one of the web pages I had opened.\n\n\"Just make sure you get the extended warranty,\" Kennedy said crawling onto the bed behind me to rest her chin on my shoulder. \"I plan on putting those babies through a workout,\" she said, slipping her hands around me to give my breast forms a squeeze.\n\nAbigail didn't comment on this, but by her smile and blushes as she studiously examined the web page, I was sure she was thinking much the same thing.\n\nWith my new announcement of breasts, we spent most of the afternoon sitting in bed around two open laptops doing some research. Abigail and I focused on finding possible surgeons, while Kennedy focused on a different aspect all together.\n\n\"What about these puppies!\" she laughed, angling her screen toward Abigail and I. \"What do you think? They're nice, right?\"\n\n\"Don't you think those are a little big?\" Abigail asked.\n\nAbigail was being nice with her estimate of little. The breasts Kennedy was showing us were massive, at least an E cup. On me they would have been humongous.\n\n\"I'm looking for breasts, Kennedy, not a lower back injury,\" I admonished.\n\n\"All right, all right!\" Kennedy said laughing. \"I was just kidding. What about these?\"\n\nShe closed the open window, and underneath it was a picture of a woman on her knees, naked. The first thing I noticed, were the two naked gentlemen to either side of her, their hard cocks in her outstretched hands, pointing straight at her face.\n\n\"Are you using this as an excuse to look at porn?\" I asked laughing.\n\n\"Who says I needed an excuse?\" Kennedy replied smoothly. \"Seriously though, Lexi, just look at her boobs!\"\n\n\"They are nice,\" Abigail commented from my other side.\n\n\"Nice?\" Kennedy asked wryly. \"They're spectacular, Abigail. And she's about the same size as you, Lexi, so it's a good comparison.\"\n\nTime seemed to escape us as we talked about my future breasts. It certainly didn't feel like we had been lounging around talking and looking up things on our computers for six hours when Skylar knocked at our door. She came to let us know about the end of holiday bash at The Library tonight. After our last little mishap there, I wasn't feeling so inclined to go.\n\n\"Can we just skip this one?\" I asked my friends. \"I'm not really in the mindset tonight. I'm really happy right now and I don't want to have to go through any crap.\"\n\nIt wasn't anything too extraordinary, but it was still more than I cared to deal with. Some of the underclassmen had been giving us a hard time lately about our unusual relationship with each other. Not only were we all partaking in the sapphic delights, but the three of us were all sleeping together. The upperclassmen didn't seem to care so much, but most of these girls were from well-to-do families, and raised to believe that this kind of thing was immoral on many different levels.\n\n\"Forget those bitches!\" Kennedy exclaimed. \"You can't let them stop you from having a good time.\"\n\n\"The last time we had a good time, I beat up Grace Arlington and nearly got expelled. Add to that Abigail ended up having to come out to her father just to get me out of trouble,\" I said.\n\n\"That bitch had it coming,\" Kennedy said offhandedly. \"And it's not like Abigail can come out to her dad a second time. My mom already knows I'm a proud member of the Pearl Divers Assosiation, so you don't have to worry about me.\"\n\n\"I think I'm siding with Lexi,\" Abigail said a little uncomfortably. \"With all the things people were saying before break, I don't think I would have come back if it wasn't for you two.\"\n\n\"Come on, girls!\" Kennedy said putting on a pouty face. \"I don't want to just sit around while everyone else parties.\"\n\n\"We don't have to go to The Library,\" Abigail offered. \"We can go somewhere else.\"\n\n\"I can handle that, I guess,\" Kennedy said. \"As long as they have alcohol.\"\n\nWe didn't bother getting fancy, or really dressed up, we just threw on some jeans and cute tops and grabbed our jackets before heading out.\n\nIt took a little driving around before we found a quiet little dive sporting the name The Chunder Club...whatever that was. The outside was so unassuming we almost missed it. It's saving grace was a neon Budweiser sign lit up outside the door. There were probably five people inside, including the bartender, all of them sitting at the well-worn bar, watching a football game on a flat screen hanging above the bar.\n\nTo be honest, the inside was more than I expected. From the outside, I was anticipating something a little more grimy that might require a tetanus booster, but even though the furniture and fixtures were severely dated, the place seemed well maintained.\n\n\"ID's?\" The bartender quickly asked seeing three young looking girls approaching.\n\nWe quickly handed over our cards, and after a quick glance from picture to face, he handed them back to us.\n\n\"What will you have?\" he asked leaning on the bar. \"Just to warn you, we don't really mix drinks here.\"\n\n\"That's fine,\" I said casually. \"We'll take three shots of Patron and a pitcher of Budweiser.\"\n\nHe poured our shots, and after laying down some cash for him, we clinked our little glasses together and quickly downed the potent liquid. A moment later our pitcher was ready along with three glasses. I grabbed the pitcher and Abigail grabbed the glasses. It only took me a second to find my direction. In the back corner was a wrap-around booth that looked perfect for us.\n\n\"I'm going to put some money in the jukebox,\" Kennedy announced peeling away from us.\n\n\"This doesn't taste very good,\" Abigail said taking a small sip of her beer.\n\n\"It's not really supposed to,\" I said smiling slightly. \"Just drink faster. After a few big swallows you won't really taste it anymore,\" Abigail gave me a slightly questioning look, but began taking measurably larger drinks.\n\nIt didn't take long for music to begin coming out of the speakers around the bar. It seemed Kennedy was in the mood for rock and roll. AC/DC began playing, and moments later she came skipping and dancing back to us as she carelessly shimmied and shook her ass for anyone who cared to see.\n\n\"You seem chipper,\" I smiled to her as she slid into the booth next to me.\n\n\"Why shouldn't I be?\" she asked, quickly taking her glass in hand and pouring nearly the entire thing down her throat. \"I got my best girls with me, some good music and possibly more liquor than I can drink.\" She laughed.\n\n\"In all seriousness though,\" Kennedy said as she began refilling her glass from the pitcher, \"I need stories. Tell me you guys got into some trouble over the holiday, because mine was pretty mild in that regard.\"\n\n\"There was some good skiing,\" Abigail offered in between wincing swallows of her beer. \"You already know about the shopping. As much fun as I had though, I'm glad classes are starting up again. My legs are sore.\"\n\n\"Sore huh?\" Kennedy asked slyly. \"Which parts? The insides of your thighs perhaps?\"",
        "\"I guess,\" Abigail answered, oblivious to Kennedy's innuendo as she continued to fiddle with her glass. \"The soreness is all over really.\"\n\n\"Stop it, Kennedy,\" I laughed.\n\n\"What?\" Abigail asked, finally looking up to see the wide grin on Kennedy's face.\n\n\"She was implying that you're sore from all the sex you were having,\" I illuminated her.\n\n\"Ewww!\" Abigail squealed shaking her head. \"I was there with my dad!\"\n\n\"I didn't say it had to be with him,\" Kennedy laughed. \"Though, I probably wouldn't say no to him. You didn't meet any nice boys out on the slopes?\"\n\n\"No,\" Abigail blushed. \"I did not.\"\n\n\"What about you Kennedy?\" I asked, trying to shift the focus from the embarrassed Abigail. \"Did you have a good holiday?\"\n\n\"I got a little mistletoe action,\" Kennedy shrugged before turning the conversation on me. \"Nothing compared to you, I'm sure.\"\n\n\"What do you mean by that,\" I asked.\n\n\"You didn't see your special friend when you went home?\" Kennedy asked with a knowing smile.\n\n\"How do you know about Josh?\" I asked surprised. I hadn't even told them about it yet.\n\n\"Josh?\" Kennedy asked, even more intrigued now. \"I was talking about your friend Dreya, but we can come back to that. Who's Josh?\"\n\n\"Yeah, who's Josh?\" Abigail asked smiling, effectively teaming up on me now.\n\n\"Do you remember me telling you where I learned to fight?\" I asked. \"That's Josh.\"\n\n\"That's the who, now we want details,\" Kennedy said leaning forward slightly.\n\n\"There's no details,\" I said innocently.\n\n\"We were all talking about sex and you bring up this Josh guy,\" Kennedy said. \"I'm not buying it. Spill it girl.\"\n\nI had never planned on keeping it a secret from them, but I hadn't planned on being put on the spot like this.\n\n\"I had to pretend to be Alex when I went home. It was horrible. Nearly the whole time I felt disgusting and awkward. I couldn't wait for it to end so I could come back here and be Lexi again. Dreya knew how I was feeling, and she took me out for New Year's as Lexi,\" I told them. \"It was going great, and it felt amazing to be myself again.\"\n\n\"I didn't plan on it, but I ran right into Josh at the club we were at,\" I continued. \"He didn't recognize me at first, but I slipped up I guess and then...he knew. He wasn't disgusted or anything, and he was really nice. He hung out with us for the rest of the night and at midnight he kissed me. After that we danced, and one thing led to another, and then I was at his place and we were...having sex,\" I finished slowly.\n\n\"You popped your cherry?\" Kennedy asked excitedly.\n\n\"If you want to get technical, you did that,\" I said.\n\n\"That doesn't count,\" Kennedy dismissed with a wave of her hand. \"You really did it? He put his dick inside of you?\"\n\n\"Yeah. He did,\" I blushed, hiding my embarrassment in my glass.\n\n\"What did it feel like?\" Abigail asked.\n\n\"It was incredible,\" I answered honestly. \"It was a little painful at first, but once we got going it was wonderful. I came so hard.\"\n\n\"Wow!\" Kennedy breathed, taking another long swallow of her beer. \"I mean, I figured it would happen eventually, but I'm surprised it happened so soon,\" she smiled.\n\n\"I didn't plan for it,\" I said. \"I didn't even know I was ready for that, but when I ran into him, everything just felt right. He was nice and sincere, and when we got back to his place, he was so gentle...It just felt...right,\" I said again, unable to find any other words.\n\n\"Isn't it uncomfortable though?\" Abigail asked. \"I mean, things aren't supposed to go up there.\"\n\n\"They might not be supposed to, but oh-my-god did it feel amazing after the pain faded,\" I sighed remembering.\n\nThe alcohol in me had already started to take effect, and any reservations I had about sharing details was apparently fading fast.\n\n\"So, what about Dreya?\" Kennedy asked.\n\n\"Your Playboy friend?\" Abigail asked. \"Did you guys have a thing? It seemed like you guys had a thing.\"\n\n \n\n\"If by a thing you mean, had sex on multiple occasions, including outside the Library up against the wall during the back to school bash...then yes,\" Kennedy said smiling. \"So, how about it? Did you and she get some alone time?\"\n\n\"You totally did!\" Kennedy laughed seeing my blushes.\n\n\"In the church...at the Christmas party after Christmas Mass...on the altar,\" I told them.\n\n\"Oh my god!\" Kennedy exclaimed.\n\n\"You did not have sex in a church!\" Abigail gasped at the same time, shocked.\n\n\"Keep your voice down!\" I scolded as I took a look around to see if anyone noticed. \"We were both there...for the party, and things just sort of happened,\" I explained.\n\nI knew neither of them was upset that I had sex with someone else. We were really close friends who loved each other, and occasionally made each other feel good. There weren't any delusions between us about what our sexual relationship was, and we were all happy with it.\n\nOne thing that was awkward though, was talking about having sex with Dreya. Dreya was the name that my sister sometimes used when she wanted to fly under the radar. Being a famous Playboy model and porn star, sometimes people would approach her in public wanting autographs, or just guys wanting to try and flirt with her because they had seen her naked.\n\nKennedy knew who Dreya really was, but Abigail still didn't. It was a secret I didn't want to keep from her, but how exactly do you tell your best friend that you've fucked your own sister multiple times, and on several different occasions? What, no good ideas? Me either.\n\n\"That sounds so hot!\" Kennedy said, her hand unconsciously slipping off the table to rest by her crotch.\n\n\"Weren't you afraid of getting caught?\" Abigail asked.\n\n\"My heart was pounding the whole time,\" I said. \"But after we got into it, a bomb probably could have gone off without us knowing.\"\n\nAfter my little tale, Kennedy got up to get us another round of drinks. She returned with three more shots and another pitcher of beer. We slammed our new shots, and after a few moments of silence as we let the liquid settle, Abigail spoke up.\n\n\"I kissed a boy!\" Abigail blurted out. \"He was staying at our hotel and we kept running into each other. He was cute and we kissed and stuff,\" she said blushing profusely.\n\n\"Good for you!\" I said, putting an arm around her and giving her a kiss on the cheek.\n\n\"And stuff?\" Kennedy asked, picking up on her vagueness. \"I want to hear about this and stuff.\"\n\n\"You know...\" Abigail said. \"we touched and stuff.\"\n\n\"Did you touch his penis?\" Kennedy asked excitedly. \"Did he finger you?\"\n\n\"Yes,\" Abigail said shyly. Her cheeks were so bright with embarrassment now.\n\n\"Way to go Abby!\" Kennedy exclaimed.\n\nIt must have taken a lot of courage for Abigail to tell us that. After she finished speaking, she buried her rosy cheeks into her cup, taking a long pull on her beer. Abigail had a habit of being deathly shy and accident prone around boys. For her to find herself making out and groping with a boy, and without Kennedy and I for support...It was a big deal.\n\n \n\nWe spent most of our evening laughing and drinking in almost equal measures. It was only half past eleven when we had to call it quits. We payed out the tab that we eventually opened, and leaving Kennedy's car, we called a cab. There was no way any of us was fit to drive.\n\nAs we rode back to the dorms in a fit of giggles in the back of the cab, I had a feeling like I had somehow slipped into the perfect life. Everything felt perfect at that moment. The drunken pessimist inside of me should have known better than to let me jinx myself.\n\n\"Lexi and Josh, sitting in a tree, K-I-S-S-I-N-G!\" my friends sang drunkenly as we carried each other up the stairs. \"First comes love, then comes marriage...\"\n\n\"For Christ's sake,\" I cut them off. \"We slept together once. That's it!\"\n\nAfter a quick look between each other from either side of me, they giggled and began again. \"Lexi and Josh, sitting in a tree...\"\n\nI was glad that the dorms were still mostly empty and there weren't that many people, if any, to hear them. Their voices echoed off the wood and plaster walls, all the way down the hall and into our common room. As soon as we made it into our room the wonder twins finally cut off as they flopped onto the bed.\n\n\"I think we drank too much,\" Abigail mumbled. \"We shouldn't have done those last shots,\" she slurred.\n\n\"You ordered them,\" I giggled.\n\n\"They were so good though,\" Kennedy sighed happily.\n\nBeing the most sober one of the group, and not by much, I began peeling off their shoes from their feet hanging off the edge of the bed.\n\n\"This girl is sho pretty,\" Abigail slurred, shifting and picking up Kennedy's Playboy that was still lying on the bed. \"I would sho do her. Would you do her with me?\" Abigail asked tilting her head to gaze at Kennedy lying beside her.\n\n\"Oh yeah,\" Kennedy said, tilting her head to the side so that their faces were only inches apart.\n\n\"Let's see her naked!\" Abigail laughed as I began to peel off my own clothes.\n\nAbigail began to drunkenly flip through the pages near the center trying to find what she was looking for. It took some time to get out of my skintight jeans, and during that whole time the two of them were giggling and oohing and ahhing over what they were seeing. They sounded like every thirteen-year-old that saw his first porno...if thirteen-year-old's slurred that much. I found the whole thing hilarious.\n\n\"Wait, this isn't her!\" Abigail slurred, sounding shocked and a little upset as the two of them stared at the centerfold. \"This says Audrey, not Dreya. Where's Dreya? I want to see Dreya!\"\n\n\"Trust me, it's her,\" Kennedy said. \"I would know that body anywhere.\"\n\n\"Hey Lexi!\" Abigail nearly shouted to me only a few feet away. \"This girl's last name is Allen too! You could be sisters!\"\n\nAs soon as those words left her mouth, I flinched as if I had been struck. In the brief moment of silence that followed, I prayed that her drunken mind would go back to staring at the naked woman on the page and forget whatever she might be thinking. I prayed, but everything still fell apart. I guess that's what I get for desecrating a house of God with my own sister.\n\n\"Wait a second,\" Abigail said pulling herself up in a seated position. \"this is Dreya. What? Why?\" she tried shaking the cobwebs from her head. \"Why does Dreya have your name? And why is Dreya's name Audrey Allen?\"\n\n\"I think you really have had too much to drink,\" I said, reaching for the magazine, trying desperately to get her to drop this. \"I think it's bedtime.\"\n\n\"Is Dreya your sister?\" Abigail asked, the pieces finally clicking together for her. \"Why didn't you tell me?\" she asked, looking hurt now.\n\n\"It's nothing,\" I tried. Now I was just desperately hoping she would be too drunk to remember this in the morning.\n\n\"It's not nothing!\" Abigail shouted. \"You said you wouldn't keep secrets from me! You lied to me! You both lied to me!\" she continued, shouting as she stumbled out of bed and onto her feet, now facing Kennedy as well.\n\n\"You knew who she was all along!\" Abigail accused her. \"You had to, you had this!\" she said holding up the magazine. \"And you,\" she said, turning her anger back on me, \"you had sex with your sister?\" she asked with a look I can only call revulsion.\n\nHer words hurt, but that look...that look nearly took the wind out of me. I wanted so badly to tell her that it wasn't what she thought, but how could I? It was exactly what she thought it was. I slept with my own sister.\n\n\"You're disgusting!\" Abigail said looking at me.\n\n\"Abigail!\" I pleaded.\n\n\"No!\" she shouted, stopping me. \"You're a freak!\"\n\nI didn't know what it was, but something in me seemed to snap. This girl really was my best friend. I kept one small thing from her, and she was treating me like I was something repulsive? How exactly was I supposed to tell someone I had just met, and hardly knew, that I slept with my own sister? Hey, my name's Lexi. I'm your dormmate. I have a penis, and I like to use it to fuck my own sister. That wasn't something you could just go sharing around. Kennedy wouldn't have even known if it wasn't for her insane crush on my sister since she herself was in puberty.\n\n\"Fuck you!\" I shouted back. \"You don't get to judge me! I'm my own woman! I can do what I want, and who I want. Maybe if you weren't such a sheltered daddy's girl you would know that not everyone is as perfect and innocent as you!\"\n\nAs soon as I ran out of breath, I knew I had gone too far, but that look she had on her face was more than I could take in my current condition. I wanted to say something, anything to take back what I had just said, but I couldn't.\n\nThe silence that followed was deafening as both Kennedy and Abigail watched me. Finally, Abigail grabbed her pillow and stormed out of the room, slamming the door on her way out.\n\n\"Shit,\" Kennedy nearly whispered as the door clicked shut. \"That could have gone better.\"\n\n\"I just want to go to sleep,\" I said, trying to diffuse any opening for further conversation.\n\nI peeled off my top and climbed under the covers, and a few moments later Kennedy shut out the light and joined me. The room felt like it was spinning as I tried to fall asleep, and I couldn't stop thinking about what had just happened.\n\nWhen Kennedy had found out my secret, she found out about everything all at once. It was such a relief when she told me she was okay with everything. To be honest, almost everything had been going well for me lately. All the people that new about me being a girl now had been super accepting about it. I had been starting to think that it might not be so bad for people to know about the real me. The world had been changing over the last few years, but I guess incest was still something that hardly anyone was ready to accept.\n\nIn the beginning, I tried to find a way to fix what had just happened, but the longer I thought about it, the more upset I was. By the time I slipped into my drunken unconsciousness, I was furious.\n\n*** *** ***\n\nI woke up with a massive headache. My temples were throbbing and even my eyes hurt. The light was shining in through the window, and the bed felt surprisingly empty with only Kennedy sprawled out next to me. For a few moments, I wondered where Abigail was, until I remembered the fight we'd had the night before.\n\nI was hoping that Abigail had been so wasted that she had forgotten all about our fight. It wouldn't be a stretch; we all had a lot to drink. At the same time, I was still upset about what she had said to me. Whether she remembered or not, I didn't think I could ever forget what she said, or the way she looked at me.\n\nAfter checking the clock on the stand next to me, I groaned and pulled myself out of bed. Being careful not to wake Kennedy, who smartly only had afternoon classes on Mondays, I grabbed my things and went to take a quick shower before classes.\n\nThe warm water felt great against my skin and eased some of my hangover. Afterwards I quickly dressed and applied some makeup before rushing off to my first class of the semester.\n\nAs shitty as I felt, both emotionally and physically, I should have just stayed in bed. All the instructor did was slowly go through the syllabus and explain some of the lab equipment, which I already knew most of. I sat in the back rubbing my temples for the first fifteen minutes before pulling out my laptop to continue my quest for breasts.\n\nThere honestly wasn't that much more work to do. I had already narrowed down my choice for surgeon to two finalists, and the first one that could see me would probably be the one doing the deed. All I really did was flip through the pictures that Kennedy had emailed me of different breast sizes and shapes.\n\nAs soon as we were dismissed, I was hurrying out the door five steps ahead of anyone else, with my phone already in my hand. As I walked back to the dorm, I called to make an appointment for a consultation. The woman on the other end of the line took my information, and before I got back to my room, I had an appointment for Wednesday.\n\n\"Hey,\" I said, lacking any of my usual pep, as I entered my room to see a very disheveled Kennedy sitting up in bed, obviously having just woken up.\n\n\"Hey,\" she called back groggily, scratching the sleep from her eyes. \"You just getting back?\"\n\n\"Yeah. It's almost noon,\" I said, unloading a couple of books from my bag and replacing them with two more of equal weight. \"Are you going to class today, or are you skipping it, sleepy head?\"\n\n\"Haven't decided yet,\" she mumbled, falling back down onto her pillow. \"We drank too much last night.\"\n\n\"Where's Abigail?\" Kennedy asked.\n\n\"I don't know...class I guess,\" I replied. \"She wasn't here when I woke up.\"\n\n\"Last night...blew donkey balls,\" she finished. \"Stupid fucking magazine. We were all blitzed, how did she even put all that together. I mean who reads anything when they're looking at a girly mag? Even the names.\"\n\n\"I don't know how she did it, but...\" I paused. \"I don't know.\"\n\n\"She was really mad,\" Kennedy said uncomfortably.\n\n\"She called me a freak,\" I said, feeling my anger rising again remembering it.\n\n\"I'm sure she didn't mean it,\" Kennedy assured me. \"She was drunk. I'll talk to her. Who knows, maybe she doesn't even remember it.\"\n\n\"Only if my luck has changed,\" I sighed.\n\nThe things Abigail said really hurt, and not enjoying that sinking feeling that they were causing in my stomach, I changed the subject and told Kennedy about my appointment for a breast consultation. We spent the next half hour talking about it, until I had to go to my next class, and Kennedy had to finally get ready for her first one.\n\nIt wasn't until later that night that I saw Kennedy again. Abigail was still out when Kennedy came back to the room.\n\n\"Well, she remembers,\" Kennedy said, tossing her book bag across the room. \"And she's not talking to me either. I saw her after my Econ class, and she wouldn't even unclench her teeth long enough to tell me to go to hell. All she did was avoid me like I had the Herp.\"\n\n\"Why is she mad at you?\" I asked. \"It's not like you did anything wrong.\"\n\n\"Don't ask me,\" Kennedy said, half throwing up her hands. \"It's not like she told me or anything.\"\n\nWhen we came back from dinner, I finally saw Abigail. She was sitting at the table in the kitchen area of our suite with her laptop and two books open, doing schoolwork presumably. She looked up long enough to notice us, and without a word went back to what appeared to be some vicious typing on her laptop. Again, she slept out on the couch in the common area.\n\nThe next day was filled with a mix of emotions. I was thrilled and excited about the breasts I was going to be getting soon, but furious and upset about the rift between Abigail and I. I understood that incest was a pretty taboo area, but I just couldn't see why she would be this upset about it. It had nothing to do with her. I would have thought this would have been the least of my transgressions. Hell, she took finding out about my cock pretty damn well, and we had been living together in the same room for months before she found out.\n\nSince there was nothing I could see to do about Abigail, I tried to focus on my breasts. Right now, it was really the only thing that could lift my spirits.\n\nLate Tuesday night, I lie awake in bed next to Kennedy trying to fall asleep. With my doctor's appointment the next morning, and other thoughts about my personal life swimming through my mind, I just couldn't fall asleep.\n\nI knew I wasn't going to be having surgery on my first visit, but just doing anything that moved me closer to my breasts was exciting. As for the other, more personal things, it felt awkward sleeping in such a huge bed without Abigail with us. Having Kennedy next to me was nice, but without Abigail, it felt like I was missing a part of myself.",
        "I hated feeling like that. This whole rift was her fault anyway. If she could have only just accepted what she learned, we could all still be together, our warm flesh pressing against each other, and three sets of soft hands caressing our smooth skin. Possibly even fooling around a little before we drifted off to sleep.\n\n\"I can't sleep,\" I whispered to Kennedy, knowing that she too was still awake.\n\nUnder the covers, I rolled onto my side to face her and scooted closer, catching a concentrated scent from her herbal shampoo and citrisy body wash. I laid my head on her bosom and let my fingers trace lines across her smooth stomach causing her to sigh at my touch.\n\n\"Me neither,\" Kennedy sighed, pulling her arm around me to stroke my back.\n\nBeing this close to her, and feeling her against me, caused my feelings to stir. Letting my fingers wander, they eventually found themselves tracing the thin waistband of her panties just above her enticing pussy.\n\n\"I can think of something that can help tire us out,\" I said coyly, giving the inside of her breast a kiss as I let my fingertips slip underneath her panties.\n\nKennedy moaned as my fingers ran along the short curly hairs of her landing strip, but as soon as I reached her sensitive clit, she pulled away.\n\n\"Not right now,\" Kennedy said, pulling my hand gently from her panties. \"It just doesn't feel right with Abigail out there on the couch.\"\n\n\"That's her choice,\" I tried, giving her more small kisses on her chest.\n\n\"I love you babe,\" Kennedy began, \"but just because she's mad at us, doesn't mean I don't love her too. With everything going on right now, I'm just not in the mood.\"\n\nI was frustrated, and even more irritated with Abigail, but I understood where Kennedy was coming from. Just because I wasn't particularly caring of Abigail's feelings right now, didn't mean Kennedy had to be.\n\n\"I understand,\" I said, settling back onto her bosom. \"Goodnight, Love.\"\n\n\"Goodnight, Lexi,\" Kennedy replied, a little more sleepy now, as she gently stroked my back.\n\n*** *** ***\n\nMy appointment was for nine a.m. and I was so anxious I arrived almost an hour before. The clock on my phone seemed to crawl as I sat in the waiting room for them to call my name. When I was finally called back into the exam room, I had butterflies swimming the four hundred meter in my stomach.\n\nAs soon as we began, the doctor dropped a bomb. Due to my condition, he was required by law to have a signed letter from a therapist before he could perform any procedure on me. This was a huge blow. Natural women, I guess, can get plastic surgery on a whim, but someone like me needs a permission slip from a shrink? It was disheartening.\n\nSince I was already there, and it would have to be done anyway once I got the okay, we went through the standard evaluation just to get it out of the way. I showed him a few of the pictures that Kennedy had found for me (I cropped out any dicks that might have been present) to give him an idea of what I was looking for. The skin around my breast area was surprisingly elastic, probably due to carrying the weight of my breast forms for so long, and the doctor told me the size I was shooting for would be completely feasible.\n\nIt was embarrassing, being bare chested in front of him without my breast forms, and I was relieved when he had me try on the fitter. It was basically a bra with silicone inserts, an easy way to judge the amount of cc's I would require for my desired outcome. We tried several sizes until I found the size and shape I liked most. It was basically the same thing as wearing my breast forms, but the knowledge that soon I would never again have to be embarrassed about my breasts, or glue them on for that matter, was elating.\n\nLeaving the doctor's office brought me back down to reality though. I hadn't really thought about there being problems with me getting implants. It was my body after all. Women got breast implants and face lifts all the time. The last thing I wanted to do was see a therapist. I knew that I wasn't exactly normal, and I was afraid someone like that would have a field day with me.\n\nSo, what if I wasn't normal? I liked who I was.\n\nThe doctor had given me a short list of therapists I could see, and as I sat in my car in the parking lot, I began calling them one by one to see when I could get an appointment. Across the four names, two of them didn't have any openings for at least two weeks, and the third number wasn't accepting new patients at this time. The fourth number was the jackpot. She had an opening for Friday afternoon.\n\n*** *** ***\n\nKnowing that my desires for cleavage rested on this meeting, I felt more than just a little anxious. My foot was tapping uncontrollably on the nice carpets of the waiting room as I sat awaiting my fate.\n\nIt was Friday, and I had opted to skip class today to get this out of the way. With Abigail still being a bitch, and Kennedy not wanting to fool around lately, I had become more than just a little on edge.\n\n\"Dr. Price will see you now,\" the receptionist stated, raising her head over her computer screen.\n\nTaking a deep breath, I grabbed my purse and walked into her office. I didn't know what to expect, really, but part of me felt a little let down. In movies and TV, therapist's offices were always so large and well decorated. While this room was still somewhat spacious, it was smaller than I imagined it would be. There was however a nice couch and some plush armchairs.\n\n\"Hello, Lexi,\" the woman said in a lilting British accent as she stood to shake my hand. \"I'm Dr. Price.\"\n\n\"It's nice to meet you,\" I said nervously.\n\n\"I sincerely doubt that,\" she laughed kindly. \"You've been sent to see me for permission to change something about your own body. That's hardly a nice place to start a relationship, wouldn't you say?\"\n\n\"I guess not,\" I said, this time with a little smile.\n\nJust that quickly I felt better. With her warm smile and her open attitude, it was hard not to feel at ease.\n\n\"Shall we sit?\" she asked, gesturing to the couch while she took one of the armchairs across from it.\n\n\"Well, you are here for a standard evaluation prior to breast augmentation,\" she stated. \"But if you don't mind, I would like to get to know you before we dive into that.\"\n\n\"What would you like to know?\" I asked.\n\n\"What kinds of things do you like to do?\" she said, opening a leather-bound folder on her lap.\n\n\"Video games, martial arts, dancing with my friends, shopping...I don't know, a lot of things really,\" I listed.\n\n\"Martial arts?\" she probed\n\n\"Yeah. I started near the beginning of high school,\" I said. \"I was bullied a lot, so it was nice to learn how to defend myself.\"\n\n\"What level are you?\" she asked. \"If you don't mind my asking.\"\n\n\"I don't really know,\" I answered honestly. \"I wasn't trained formally. What I mean is, a friend of mine was an instructor at a local dojo and he taught me privately. We never talked about levels or belts. We just practiced together. If I were to guess, I would say I'm towards the higher end, but I might be biased.\"\n\n\"Do you find yourself having to defend yourself often?\" she asked making a note.\n\n\"Not anymore,\" I said. \"Well, sometimes, but it's rare.\"\n\n\"But I assume it's nice knowing that you can if you have to,\" she mused.\n\n\"It doesn't hurt,\" I laughed a little nervously.\n\n\"How is your home life?\" she asked.\n\n\"Right now? It's not that great,\" I said. \"Before I left after the holidays, my mother and I had a fight.\"\n\n\"About your lifestyle?\" she asked.\n\n\"No, she doesn't know about that, not yet anyway,\" I said. \"It was about how she's been treating my sister, Audrey.\"\n\n\"How does she treat her?\" Dr. Price asked.\n\n\"Like crap,\" I said flatly. \"My mother is extremely religious, and my sister is a porn star. She berates her and humiliates her at every turn. Even if I do something wrong, she gets the blame, because it must have been her that corrupted me.\"\n\n\"We fell asleep on the couch watching TV, and when she found us in the morning, she went off on Audrey saying that we were being totally indecent, and that Audrey had been trying to seduce me. And if it's not stuff like that, it's something else. It's sickening to listen to, and I had finally had enough.\"\n\n\"Your mother thought you were having a sexual relationship with each other?\" she asked.\n\n\"Yeah,\" I said. \"Just because she found us both fully clothed, asleep on the couch.\"\n\n\"Do you ever plan on telling the rest of your family?\" she asked after making another note in her folder.\n\n\"As far as I'm concerned, I already have. If my mother found out about me, she would disown me and say such horrible things to me. And no doubt, she would blame my sister for this as well. I know it sounds bad, but I don't like my mother enough to even try to have her accept who I am.\"\n\n\"Do any of your friends know about you?\" she asked.\n\n\"My best friends do. We go to school together,\" I replied.\n\n\"How do they see your lifestyle?\" she asked. \"Are they accepting?\"\n\n\"Absolutely,\" I responded. \"More than I could have ever hoped for.\" Thinking of Abigail, I cringed slightly.\n\n\"Right there,\" she said, catching my sudden aversion. \"What were you thinking about just then.\"\n\nSomething about her mannerisms, and the way she engaged with me, made me feel comfortable instead of angry that she was prying. I couldn't put my finger on why exactly, but I wanted to tell her things.\n\n\"My friend Abigail isn't really talking to me right now,\" I confided. \"She found out I...slept with my sister. She's having some trouble accepting that.\"\n\n\"You're having a sexual relationship with your sister?\" she asked. \"I thought you said you weren't?\"\n\n\"Umm,\" I said thinking back. \"You asked if our mother thought we were having a sexual relationship. You never asked if we were.\"\n\n\"To be frank,\" she began, closing her folder and sitting forward a little, \"incest is more common than society would like to believe. They really can't get accurate numbers on that statistic because of the taboo nature. No one wants to disclose that they may have had a sexual relationship with a family member.\"\n\n\"I'm assuming it was consensual?\" she asked, getting back to business.\n\n\"Yeah,\" I assured her.\n\n\"When did this start?\" she continued, reopening her folder.\n\n\"The same time I started becoming Lexi,\" I answered. \"Before I was just Alex, but as she helped me find Lexi, the lines became a little blurred, and we both began developing an attraction. Well to be honest, I've always been a little attracted to Audrey. She became a porn star while I was in high school. I was curious and looked up some of her photos and she was amazing. I had always known that she was pretty, but seeing her in a sexual way was extremely arousing. I'm sorry!\" I said, realizing I was getting a little carried away.\n\n\"No, it's completely fine,\" she assured me. \"These sessions are about you, and about the things that you feel, and essentially about what makes you, you. Has this sexual relationship persisted?\"\n\n\"We've had sex on numerous occasions, if that's what you're asking,\" I said. \"It wasn't a onetime thing.\"\n\n\"I see. Well, we've come a little afield,\" she said. \"We were originally talking about how your friend feels about this revelation.\"\n\n\"She took it badly,\" I began. I told her everything that happened that night and everything that was said. The whole time she just nodded her head and made the occasional note in her folder.\n\n\"Moving away from family and friends for now,\" she said after I finished my story, \"when did you first have the feeling that you were really a woman?\"\n\n\"That's a tough one,\" I sighed. \"I guess I didn't really feel like I was a woman until I first put on girl's clothing, but my whole life I've felt like something was wrong, even when I was little.\"\n\n\"If you didn't know what you were feeling, what made you want to put on women's clothing?\" she asked interested.\n\n\"Well, ah...that was my sister,\" I began. \"I came to Arizona to go to college. When we got here, we found out that the school that I had gotten a scholarship to was an all-girls university. I was so devastated. I knew I would have to go back home and get a job so that I could pay for community college. My sister and I decided to stay in Arizona for a while and do some drinking to drown my sorrows. After several drinks, she convinced me to try on some of her clothes, saying that I could easily pass for a girl and go to this school.\"\n\n\"So, you became a girl to go to school?\" Dr. Price asked me.\n\nI knew I had said the wrong thing.\n\n\"It started out that way,\" I said quickly trying to explain. \"That's not what this is anymore. I love being Lexi. It's who I am. It's who I've been for a long time. The moment I put those clothes on, things changed. At first, I didn't even want to admit it to myself, let alone aloud, but the more I wore them the more comfortable I felt. I am a girl. I know that in my bones.\"\n\nI told her all about how I felt when I had to become Alex again for the winter holiday when I went back home. How awkward and repulsive it felt and how refreshing it was to change back to Lexi as quickly as I could. The whole time she listened patiently, nodding as she took notes in her leather folder.\n\n\"If I called your school,\" she began after I finished, \"and told them that you were really a boy, would you still be Lexi when they kicked you out?\" she asked seriously.\n\n\"Yes,\" I said a little more fiercely than I intended.\n\nDr. Price held my eyes for a few moments, her steady gaze scrutinizing me with impunity. After a few moments, she finally spoke again.\n\n\"I see,\" she said simply, the seriousness in her features melting away. \"Well, from what I can tell, this isn't just some fluke for you. You really do seem to be committed to this. I could sign off on your surgery right now, but I would like to see you again if you don't mind.\"\n\nHer words evaporated any anger that was building up inside of me. She was going to say yes!\n\n\"You want to see me again?\" I asked, not sure how I should be taking this news on top of her endorsement of my surgery.\n\n\"I think it would be good for you,\" she said, closing the leather folder that she was taking notes in. \"You spend so much energy keeping most of your life a secret. It would be beneficial for you to speak to someone with whom you know will keep your secrets. It seems like you have a lot bottled up, and if you avoid sorting through all of those issues, it could eventually become a burden that is too much to carry alone.\"\n\n\"While I think most of these issues are stemming from your transition, I don't believe that your transition is the problem, more the circumstances you are being forced to navigate, or feel you are being forced to navigate,\" she clarified. \"Just think of me as a friendly ear.\"\n\nHer offer was tempting. I hadn't really let my mind settle on all of my problems at once, but now that I had begun talking about just a few of them, there did seem to be a lot of them piling up on me. The stress of keeping my secret, my expanding sexuality, ridicule from some of my classmates, the incestuous relationship with my sister, and Abigail hating me for it now that she found out, even the tangle of my love life.\n\nSure, I loved the relationship that Kennedy, Abigail and I had, or at least Kennedy and I right now. We cared for each other deeply and made each other feel incredible during our intimate moments, but that was the deep love of friendship being expressed in a different way. I was sure that neither of us saw a committed future between us. When they finally found someone else to share their lives with, who would I have? I loved being a woman, but not a lot of people would be accepting of what I had to offer...if you catch my drift.\n\n\"I think I would like that,\" I said.\n\n\"Great!\" she exclaimed. \"Sadly, we are out of time for today, but if you set up an appointment with Jessica outside, we can pick this up where we left off next week.\"\n\nAfter shaking her hand, I stepped outside to schedule my next visit. This session had been eye opening to all the things I had been balancing, but at the same time it felt refreshing to actually talk about all the things that had been working their way through my brain behind the scenes.\n\n*** *** ***\n\nWhen I made it back to the dorms, Kennedy was waiting for me in our room. I spotted her as soon as I opened the door. She was wearing a cute white summer dress that laced up under the bodice. It was a far cry from Kennedy's usual roguish dress style, but she looked rather sweet like this.\n\n\"How did it go?\" she asked from her perch on the end of our bed. \"She didn't give you a hard time, did she?\"\n\n\"Not at all. She said yes!\" I said excitedly. \"Aren't you freezing?\" I asked commenting on her dress. \"I'm in jeans and it's still a little chilly outside for me.\"\n\n\"It's warm enough inside, and I don't plan on going outside like this,\" Kennedy said offhandedly. \"I'm so happy for you though. When are you going to have your surgery?\"\n\n\"I haven't called the doctor yet,\" I said, putting my stuff down on my desk.\n\nAfter I had left Dr. Price, my mind had been preoccupied with some of the things we had discussed during our session.\n\n\"I would have thought that would have been the first thing you would've done,\" Kennedy commented smiling.\n\n\"I'll call him in a bit,\" I sighed. \"I've been thinking about some stuff.\"\n\n\"Have you changed your mind?\" Kennedy asked.\n\n\"God no!\" I said confidently. \"Operation Boob Job is still a go.\"\n\nThis whole time, Kennedy still hadn't moved from her seat on the edge of the bed. Her hands were still folded neatly in her lap, and that smile that never left her face was starting to make the hair on the back of my neck rise.\n\n\"What's going on?\" I asked, then thinking I might have walked in on something. \"Where's Abigail?\"\n\n\"She's still out,\" Kennedy stated. \"She won't be back for at least a couple of hours.\"\n\n\"You're starting to freak me out,\" I said. \"You're wearing a dress I would never think you'd wear, and you haven't moved since I got here.\"\n\n\"You don't like my dress?\" Kennedy asked, still smiling as she slightly twisted her body as if to show herself off. \"I thought it looked sweet.\"\n\n\"It's nice,\" I replied.\n\n\"I have a surprise for you,\" Kennedy said biting her lip nervously.\n\n\"Really?\" I asked, curious and a little excited.\n\nBy the way she was behaving, it was a good surprise, and with everything that was happening with Abigail, one more piece of good news would be great right now.\n\nHer hands slowly moved down from her lap to grab the hem of her dress. She slowly inched the white fabric up her smooth tanned legs, and I couldn't help but lick my lips at what I thought was coming. It was going to be one of those surprises!\n\nIt seemed that Kennedy was finally in the mood again, which was a relief. This cold shoulder from Abigail, and Kennedy not being in the mood for sex, had been leaving me in a frustrated place.\n\nAs her dress rose higher, her legs slowly parted, exposing the seductive flesh of her inner thighs. A little over halfway up her thighs, something light pink peeked from beneath the hem of her dress. It was a cock! My jaw immediately dropped as soon as the confusion faded away, and Kennedy began giggling.\n\n\"You like?\" she asked coyly. \"I got this just for you. I remember how much you loved it when I fingered you, and you said you loved how hard you came when your friend fucked you...Well... I want to fuck you,\" she finished nervously.\n\nShe stood slowly, her dress still pulled up to her waist, exposing the length of her realistic looking cock between her legs. She moved closer to me and placed a soft kiss on my lips, then began trailing sweet kisses down my jaw line to my neck.\n\n\"Please baby,\" she cooed into my ear.",
        "I could feel her hot breath on my neck, and her cock pressing against my thigh. It might not have been real, but it felt real enough to me. My own cock was making a mad dash for rigidity, only being thwarted by its current predicament of being tightly tucked away.\n\nTaking my silence as assent, Kennedy began prying open the buttons on my jeans, one by one, before roughly tugging them down my hips and over my ass. Her tongue continued to suck and lick at my neck and earlobe as she slowly inched down my skin-tight jeans.\n\nAs soon as my jeans were past the hard part, I began to wiggle out of them, until finally, I kicked them off. Without my jeans, my cock was making an even more concentrated effort to surge to full strength. Before I could reach to free myself, Kennedy began pulling my top up over my head.\n\n\"I think it's time to see you put those pretty lips to work.\" Kennedy smiled, nudging me down by my shoulders.\n\nI had never sucked a cock before, but I had been sexually starved recently, and was willing to do anything Kennedy wanted me to, so long as I kept her in the mood. As I slowly knelt down in front of her though, I realized I really wanted to try this. With one hand holding up the front of her dress, her other caressed my cheek as she slowly guided my mouth to her.\n\nI didn't know what I was doing. I had seen Kennedy and my sister do this to me several times, and even Abigail a couple of times, but on this end of the equation... As the pink flesh-like cock brushed against my mouth, I slowly parted my lips to wrap around its tip.\n\nI let my tongue flick out, testing the waters. It felt strange, a combination of hard and soft all at the same time. My cock had grown painful, and I let one hand slip between my legs to ease it free of my panties. With one hand resting on my own hardness, I let more of Kennedy's cock slip into my mouth.\n\n\"That's a good girl,\" Kennedy whispered seductively. \"Just like that.\"\n\nThe hand on my cheek moved around to the back of my head. She was gentle as ever, but with each slow bob I made on her cock, she urged me to take more and more, until eventually I began to feel the tip pressing on the back of my throat, causing my gag reflex to kick in. Every time I reached that point, Kennedy would ease back for a few bobs before urging me on again. I never fully got past it, but with every attempt my gag response became smaller.\n\n\"You're doing such a good job,\" Kennedy would say as encouragement as she smiled down at me. \"You look so pretty down there with my cock in your mouth.\"\n\nI felt so slutty on my knees with a cock in my mouth, real or not, and oddly enough, womanly as well. The smooth texture, and the way it filled my mouth was exciting, and the shear submissiveness of this act was something I didn't know I would enjoy so much.\n\nThe longer I sucked on her cock, the more I stroked my own. The act itself was arousing, but with the added stimulation of my own cock I began to moan around the shaft in my mouth. I could feel the heat of my skin rising as my body thrilled at this experience.\n\n\"You know what's next, don't you?\" Kennedy asked as she stroked my cheek.\n\nI slowly nodded my head around the tip of her cock as I looked up and into her smiling eyes.\n\nKennedy finally pulled her dress up and over her head, exposing her bare body. The only thing she had on underneath was the harness holding her cock in place. The nipples on her round breasts stood hard at attention, and even though I couldn't see it, I could smell her sweet sex in the air.\n\nShe grabbed a hold of the shaft of her cock and eased it out of my mouth before lifting me to my feet. Her lips came to mine hungrily as her hands pawed at my body. It didn't take long for her thumbs to find my panties and push them down my hips, causing them to fall to the floor around my ankles.\n\nKennedy had been really sweet up until now. Her fingers gripping my hair tighter as she forced our lips together startled me, and her teeth nipping at my bottom lip was exciting. Her other hand was squeezing my bare ass, digging her nails into my flesh greedily. I was surprised by her aggression, but I loved it all the same.\n\nUnless Kennedy was screwing with me in public, like she was prone to, I was always the one in control. Being the submissive one for a change was a thrill. I knew she would never really hurt me but giving up that control itself made me feel vulnerable in a way I had never experienced.\n\nWithout warning Kennedy spun me, pushing me onto the bed. I bounced gently on the soft mattress, landing on my stomach facing the headboard. Kennedy straddled the backs of my thighs, her breasts resting on my lower back. I could feel the tickles from her hair, and the feel of her kisses as she worked her way up my spine. I could also feel her hard cock pressing against my bottom.\n\n\"You don't know how long I've been waiting to fuck your cute little ass,\" Kennedy whispered into my ear, giving it a playful bite. \"Tell me you want my cock.\"\n\n\"Mmmm,\" I moaned, wiggling my ass back into her.\n\n\"Nu-uh,\" she said, grinding her hips against me. \"I want you to say it.\"\n\n\"I want your cock,\" I moaned into the mattress.\n\n\"Tell me you want to be fucked like the dirty girl you are.\"\n\nMy cock was already aching, and that familiar tingle around my hole was begging for the attention it now craved as well.\n\n\"Please, fuck me Kennedy,\" I pleaded. \"I need it!\"\n\nKennedy eased off my back, and with more force than necessary, grabbed my hips, jerking me up to my knees. I sat there, kneeling in front of her on my knees and elbows as she applied a cool slick fluid to my sensitive pucker. The next thing I felt was the tip of her cock brushing against me gently before she began to apply pressure.\n\nIt took only a little work for her to break through and slip the head of her cock into my ass causing me to gasp at the feeling. Thankfully she held still for a few moments before she began making small gentle thrusts in and out of me.\n\nKennedy's hands held tight to my hips as she slowly fucked her cock into me, until finally, I could feel her warm hips resting against my ass. I felt so slutty, on my knees getting fucked from behind. It was deliciously wicked.\n\nKennedy began making longer and longer thrusts into my ass as she truly began fucking me. I arched my back slightly and with the adjustment, her next thrust brushed against that wonderful pleasure spot, sending warm jolts throughout my body.\n\nAs she began to fuck me harder, I began rocking back to meet her thrusts, causing the skin between us to make a slight slapping sound.\n\n\"Ooh!\" Kennedy said, giving my ass a little smack. \"You are a little slut! You love my cock in your ass, don't you?\"\n\n\"Oh God!\" I moaned.\n\n\"You're such a bad girl!\" she purred, thrusting harder, causing me to scoot up the bed across the slick sheets.\n\nThe harder she fucked me, the more I slid forward until I was being pressed against the headboard.\n\n\"I think you need to be punished,\" Kennedy said, giving my ass a hard smack, causing me to cry out from pleasure. \"God, I love your sexy ass!\"\n\nIt was at this moment, with my cheek pressed against the headboard as I was roughly fucked from behind, that I realized the familiarity of the position I was in. A long while ago, I had fucked Kennedy just like this, only I was the aggressor. Now I was the woman. I didn't know why, but knowing that I was getting the same treatment that I had once given her was exhilarating. I began pushing back harder onto her cock as she slammed herself into me to a steady smack, smack, smack.\n\n\"Oh God!\" I cried. \"Fuck me! Fuck me harder!\"\n\n\"There's my slut!\" Kennedy laughed gaily. \"You want more huh?\"\n\n\"Yes!\" I cried. \"I'm your slut! Punish me! Punish me! Punish my ass!\"\n\nKennedy reached forward and wrenched my head back by my hair, arching my back as she began fucking me even harder. I began to let out one long moan, broken only by gasping breath as she pummeled my tiny hole, bringing me closer and closer to oblivion. I could feel it rising deep inside of me. With every thrust, her cock brushed against my spot, steadily ramping up my pleasure until I finally peaked.\n\n\"OH FUCK!\" I screamed.\n\nA massive wave of pleasure crashed through my body, filling me from head to toe in ecstasy. Cum began to seep from the end of my throbbing cock, left ignored, swinging rigidly between my thighs. Kennedy continued to drive into my ass, torturing me with the added pleasure from each assault until finally, I cried out for her to stop.\n\n\"Please!\" I begged. \"No more!\"\n\nAfter one final thrust, she buried herself deep into me and held still. I felt Kennedy's arms wrap around me and her breasts mash into my back as she hugged me from behind. She gently kissed the back of my neck through her own panting breaths.\n\n\"You are incredible!\" Kennedy cooed.\n\nShe slowly eased herself out of me and collapsed beside me on the bed. I gingerly turned over to lay beside her.\n\n\"I was incredible?\" I asked. \"You're the one who did all the work! Besides I was the one that got the pleasure out of that.\"\n\n\"Don't sell yourself short,\" Kennedy sighed as she unbuckled her strap-on.\n\nWith the buckles undone, she slowly eased what appeared to be another cock out of her own drenched pussy.\n\n\"It was great for me too,\" Kennedy sighed, letting her double ended strap-on fall to the bed beside her.\n\n\"I can't believe how good that was,\" I said.\n\n\"I thought you said you already did it...with that Josh guy,\" Kennedy commented looking over to me.\n\n\"We did,\" I assured her. \"But it wasn't anything like that. He was gentle and sensual. This was...raw and...\"\n\n\"Hot?\" Kennedy offered.\n\n\"More than that,\" I said thinking of the right word. \"Primal. Him and I made love. You and I-\"\n\n\"I fucked the hell out of you,\" Kennedy cut me off with a giggle before rolling onto her side to give me a sweet kiss on the cheek.\n\n\"Well...yeah,\" I blushed.\n\n*** *** ***\n\nIf I could have forgotten about the fucking Kennedy gave me, my ass would never have stood for it. For the next few days I had a steady reminder of exactly what she had done to me. It wasn't exactly painful, just sore. The good kind of sore though. The slow, warm pulsing throbbing sensation.\n\nI didn't know if anyone in our dorms had heard us that afternoon. The plaster walls did a pretty good job about sound for the most part, and the odds were that most if not all of the other girls in our suite had class around that time. If they had heard us, I wasn't sure if I really minded though. Spectacular was the only way I could describe the experience.\n\nAfter we both calmed down from our fucking, Kennedy reminded me to call my doctor to schedule my breast surgery. In two and a half weeks I would be the proud owner of my very own breasts. Ones that I didn't have to glue on. I was over-the-moon excited. The only thing that could even try to pull me down was Abigail. She still wasn't talking to either of us.\n\nAfter the first couple of days, Abigail began sleeping in Kennedy's room. Well, it hadn't really been her room since she moved in with us, but Skylar seemed to be more than willing to accommodate her and let her use Kennedy's old bed.\n\nI tried talking to her a couple of times, but any time I got close to her she would give me a hurt look and walk away. It was beginning to really get on my nerves. I had hoped she would've gotten past this shit by now. It wasn't like I was asking her to have sex with her sister. Well she didn't have a sister, but the principal still applied. I didn't understand how something that had absolutely nothing to do with her, something that didn't even affect any aspect of her own life, could be this upsetting for her.\n\n*** *** ***\n\n\"So how are things back at school?\" Dr. Price asked me at our next visit.\n\nIt was the next week, and the only thing that had really changed was I was one week closer to getting my new breasts.\n\n\"They're good!\" I smiled automatically.\n\n\"Lexi,\" Dr. Price said, peering at me over her glasses, \"I'm not your mother. I know it's a hard habit to break, but you don't have to give me those kinds of automatic answers to placate me. I'm asking because I actually want to know.\"\n\n\"Sorry,\" I said, cringing slightly.\n\n\"Don't be sorry, just tell me how things are going,\" she encouraged me.\n\n\"My classes aren't too hard,\" I began. \"No one else has found out about me, so that's good I guess.\"\n\n\"You guess?\" she asked. \"What do you mean by that?\"\n\n\"I don't know,\" I began.\n\n\"You obviously meant something by it,\" Dr. Price offered, sitting forward a little as she reached for her coffee cup. \"I have found that most people say the truest things when they're not meaning to.\"\n\n\"I guess I'm getting kind of tired of hiding who I am,\" I said, turning to stare out the window. \"I don't even know if I'm ready to really come out, but being at school, surrounded by all of these people all the time... If the wrong person finds out I could be in serious trouble. If I was out, and someone found out about me, it wouldn't be as much of a big deal. But I can't come out because I'm going there...Do you understand what I'm trying to say?\"\n\n\"I think so,\" she said. \"Even though you're not ready to come out exactly, you feel trapped inside this closet by circumstance. Even though you wouldn't necessarily make that choice, you feel robbed of having the choice at all,\" she said. \"It's completely normal.\"\n\n\"What about your friend Abigail?\" she continued, nudging our conversation along. \"How have things been going with her?\"\n\n\"Not great,\" I sighed. \"She still isn't talking to me.\"\n\n\"Do you think she might be angry enough to tell people about you?\" she inquired.\n\n\"No way,\" I said immediately. \"I can't believe she would do that, no matter how mad she was.\"\n\n\"You seem so sure of her,\" Dr. Price commented.\n\n\"She's just not like that,\" I said. \"She's just being a bitch right now.\"\n\n\"The reason she is upset with you,\" Dr. Price began, \"do you think it's really about the incest?\"\n\n\"What else would it be about?\" I asked. \"The moment she heard about that she went off the handle.\"\n\n\"She found out something else at the same time,\" Dr. Price said. \"Why is she mad at Kennedy? Did Kennedy sleep with her own sister as well?\"\n\n\"Kennedy doesn't have any siblings,\" I answered. \"I don't know why she's mad at Kennedy.\"\n\n\"She became mad at you both at the same exact time, right?\" she asked.\n\n\"Yeah, I guess,\" I said, thinking about it. \"It has to be about the incest though. You should have heard the things she said to me. She called me a freak!\"\n\n\"She was angry. Angry people say things they don't mean all the time,\" Dr. Price said. \"Do you think it may be even the smallest bit possible, that she was mad about the secret you kept?\" she finally got to her point.\n\nI sat quietly for a few minutes while I thought about it.\n\n\"Dreya?\" I said finally. \"My sister Audrey I mean.\"\n\n\"Bingo,\" she said, raising a finger like she was ringing a bell.\n\n\"But why would she be so mad about that?\" I asked.\n\n\"Both you and Kennedy, her best friends, knew about this, and she did not,\" she said. \"Maybe she felt like you made a fool out of her every time Dreya was ever brought up in conversation. It could even be as simple as you two leaving her out.\"\n\nThe more I thought about it as our conversation shifted, the more I realized that this had nothing to do with my sister and I having sex. Very early on, Abigail felt hurt when we kept her out of our plans to break into the school the first time. She was heartbroken because she thought we were friends and we were keeping things from her.\n\n\"What about your love life?\" Dr. Price asked later on in our session.\n\n\"It's going good,\" I responded thinking about Kennedy.\n\n\"I don't just mean your friends. I mean a real romantic relationship,\" she clarified. \"The companionship of a close friend is a good thing, but what I'm talking about is romantic love.\"\n\n\"Nothing like that I'm afraid,\" I said. \"It's a little hard to manage that right now.\"\n\n\"Really?\" she asked. \"I'm sure you would have no shortage of willing suitors.\"\n\n\"Not a lot of people are looking for something as complicated as me,\" I said.\n\n\"That boy from back home didn't seem to mind very much,\" she observed. \"Neither did your two friends, or your own sister for that matter. I think you aren't giving yourself enough credit. You're a very attractive young woman.\"\n\nIt's just-\" I began before the buzzing of my phone distracted me. \"Sorry, I thought I turned this off.\"\n\nI could have sworn I had powered it down in the waiting room. I quickly swiped my screen to stop the incessant buzzing and saw the text message I had just received. It was Danny!\n\nWe hadn't talked since before Christmas. I had been slowly distancing myself from him hoping whatever relationship we had would eventually evaporate for both of our sake. I liked him a lot, but there was no way I could tell him about the real me. Especially after we had already made out like we did, and danced the way we had.\n\n~Hey. I've missed talking to you. How was your holiday? Danny~\n\n\"Who was that?\" Dr. Price asked curiously.\n\n\"Oh, it was nobody,\" I said trying to move past our interruption.\n\n\"It didn't look like nobody,\" she prodded. \"The moment you looked at your screen, your face lit up like I haven't seen before. So, who was this mystery caller?\"\n\n\"It was a guy I met a few months ago when I first became Lexi,\" I admitted.\n\n\"Is he special to you?\"\n\n\"No,\" I said reluctantly. \"We've hung out a few times, but he doesn't know about me.\"\n\n\"But you like him,\" she stated more than asked.\n\n\"He's a great guy, but if I told him about me, he might take it badly,\" I admitted. \"I sort of let myself get carried away with him a few times, and we kissed and touched each other and stuff. I really screwed that up. If I tell him, and it goes badly, he could ruin me out of spite.\"\n\n\"I only ask, because eventually you will want someone in your life like that,\" she said.\n\nWhile I had to admit that having Danny in my life like that would be nice, it just wasn't in the cards for me right now. The strange thing was, no matter how much I tried to distance him, he never really stopped messaging me, and thoughts of him always found a way to wiggle themselves into my mind. You really had to give him points for persistence. As endearing a trait as it was, it made it harder for me to keep my resolve of not talking to him again.\n\nThe conversation moved on and we spent the next twenty minutes talking about my feelings, and what I wanted for my future. Before I really knew it, our session was over, and I was once again feeling mentally lighter.\n\n*** *** ***\n\nI spent a lot of the rest of the day thinking about what had happened between Abigail and us. At least I now had a pretty good idea about why she was this upset. All I needed now was a way to make it up to her.\n\nI wracked my brain for some time, trying to come up with a solution. I doubted flowers would cut it for something like this, and a pretty gift would mean nothing to her at this point. I had to make this right. Not only did I feel miserable about missing one of my best friends, I really wanted to wear those cute heels, and I just couldn't bring myself to put them on while Abigail was still upset with me.\n\n\"We need to make things right with Abby,\" I told Kennedy as soon as she walked into our room that night.\n\n\"She's the one that went ballistic on us!\" Kennedy said defensively. \"You were the last person I thought would be looking for peace. She was awful to you.\"\n\n\"My shrink kind of opened my eyes,\" I said.\n\nI sat Kennedy down and explained why I thought Abigail was really mad at us, and she grudgingly agreed that I was probably right. It only took me another hour to get her to agree with my idea to win our friend back.",
        "\"Are you ready?\" I asked as we stood outside the door to Kennedy's old room.\n\n\"This is so not cool,\" Kennedy said crossing her arms.\n\nI took that as her affirmative and opened the door. Skylar was lying on her bed, chewing on her pen as she read her Ethics book, and Abigail lay on the other bed reading a book from her side. As soon as Abigail saw us, she froze, locking eyes with us.\n\n\"Skylar, can we have a couple minutes with Abigail?\" I asked.\n\nAfter a quick, wary glance to Abigail, she rolled off her bed, onto her feet, and grabbed her jacket.\n\n\"I don't care if you're here to kill her or fuck her,\" Skylar said, looking at both Kennedy and I seriously. \"Not. On. My. Bed.\"\n\nAfter that she closed the door behind her. Abigail made a move to follow her, but Kennedy and I moved shoulder to shoulder to block her only way out. She wasn't going to run from us this time. This was going to be hard enough to do in private. The last thing we wanted was an audience for this.\n\n\"I have a sexual relationship with my sister,\" I said quickly.\n\n\"I want to have a sexual relationship with her sister,\" Kennedy said right after me, trying to contain a little smirk.\n\n\"I already know that,\" Abigail said, watching us from behind angry eyes.\n\nThis was where it would get...interesting.\n\n\"I've masturbated thinking about your dad,\" Kennedy said, cringing a little bit.\n\n\"I bought a butt plug,\" I said. \"I love having my ass played with so much that I wear it in classes or when I'm driving in my car. I had it in when we went to the bar last week.\"\n\nOur confessions came quicker and quicker, one of us following the other. We dug deep, sharing some of our most embarrassing secrets that we had never told anyone. It was a desperate ploy, but I was hoping that she would see this for what it was, the baring of our souls to her in an act of redemption.\n\n\"I blew a security guard in high school so that he wouldn't call the cops on me for breaking and entering,\" Kennedy admitted. \"He was pretty good looking, but yeah, I still blew him, and I didn't go to jail.\"\n\n\"I used to have a body pillow in high school that I pretended was my girlfriend, and I would hold it when I went to sleep every night,\" I added.\n\n\"I like Justin Bieber,\" Kennedy said firmly, seeing Abigail's steely resolve finally crumbling, causing all of us to laugh.\n\nThere were a couple of tears in Abigail's eyes as she finally threw her arms around us in forgiveness. We all held tight to each other as that massive weight of turmoil melted away.\n\n\"I'm really sorry we kept Audrey from you,\" I said as we all hugged. \"I just didn't know how to tell you that we slept together.\"\n\n\"That is a little weird,\" Abigail admitted. \"But I certainly understand why you couldn't resist.\"\n\n\"I know, right?\" Kennedy laughed. \"What a Goddess!\"\n\n\"You're a Goddess,\" I said kissing Kennedy on the cheek. \"And so are you, Abby,\" I finished, kissing her as well.\n\n\"I've missed you calling me Abby,\" Abigail smiled.\n\n\"There's something else you missed,\" Kennedy smiled mischievously. \"Something you definitely have to try.\"\n\nShe leaned in to whisper in Abigail's ear conspiratorially. Abigail's eyes widened, and lit up as she stared at me, and the smile on her lips was almost wicked enough to give Kennedy a run for her money. Part of me was scared, but it was only a small part. The rest of me was excited for what was to come...I could already feel that eager tingling rising in my bottom. "
    ],
    "authorname": "Son_of_Battles",
    "tags": [
        "transsexual",
        "college",
        "anal",
        "therapy",
        "surprise",
        "fight",
        "boobs"
    ],
    "category": "Transgender & Crossdressers",
    "url": "https://www.literotica.com/s/womens-studies-ch-10"
}
{
    "title": "Lessons from Days Gone By Ch. 01",
    "pages": [
        "Monday, March 12, 2018\n\nI was sitting in my office today, reading the online newspaper from my home city. I didn't log in over the weekend and was trying to catch up. I scrolled down clicking on articles that caught my eye. I saw one that was titled, 'Heiress, Charitable Foundation Head Loses Heroic Battle with Cancer.' I felt as if my heart stopped.\n\nI read the name in the first line and stopped. Laura Parker. No, it couldn't be. I scrolled further down and there was her picture. In the photo, she was older than I remembered, but I would never forget those eyes or that smile, as long as I lived. I scrolled down to the bottom of the article and saw that her funeral was planned for tomorrow. I knew I had to go. I buzzed Emily and asked her to book my flight. Then I called my Aunt Evelyn to let her know I would be in town tonight and would like to take her to dinner.\n\nEmily, my 27-year-old administrative assistant, walked in a few minutes later and handed me my boarding passes and rental car confirmation. She walked behind my desk and sat on my lap. She wrapped her arms around me, pulling my head to her chest. In addition to being my day-to-day right hand, Emily had been my lover since shortly after she started working for me 7 years before. She looked at the news story still displayed on my laptop.\n\n\"I'm so sorry, baby,\" she said comfortingly.\n\n\"She's finally gone...,\" I answered. As I held my sweet Emily against me, I began to remember days gone by.\n\n--------------------------------------------------------------\n\nI'd met Laura on May 21<sup>st</sup>, 1992, when I knocked on the door of her palatial home, hoping to talk her into letting me handle her yard care that summer. I'd graduated from high school the previous Monday night and I was desperate to earn some more spending money for college. I'd been fortunate enough to add two other large yards in her neighborhood to my schedule that same morning. Competition was keen in that area, and I was eager to win new clients as I knew that those people typically gave generous tips in addition to the weekly rate.\n\nShe answered the door politely, \"May I help you?\"\n\nI still vividly remember seeing her for the first time. She was a gorgeous brunette, in her early 30's, I guessed. She wore a beautiful, red dress and black heels. Silky, tan nylons graced her legs. She was a remarkably attractive woman and had a warm, friendly smile. I stood there dumbstruck for an uncomfortable moment, just looking at her.\n\n\"Um, yes, ma'am. I was hoping that maybe I could help you. I'm Mike Tanner.\" I handed her one of the business cards my mom insisted on having printed. \"I was wondering if I could give you a bid to take care of your lawn work this summer.\"\n\n\"It's funny that you stopped by, I was just thinking about that. My husband typically takes care of all that. Well, he used to anyway. We recently divorced and I'm learning to do some of the things that he would take care of,\" she explained.\n\n\"Oh, I'm sorry to hear that.\" I said.\n\nShe smiled again, \"Thank you. So, what do you think you'll charge?\"\n\n\"Could I look at the back yard, first,\" I asked.\n\n\"Yes, you certainly may, follow me,\" she smiled and waved me through the door. I followed her through the massive house. I couldn't imagine the cost of a place like this. I'd grown up the son of a successful doctor and attorney, but our 4,000-square foot home was like a wing of this palace. I couldn't have imagined meeting such a beautiful woman that morning, either. I admired her figure as she walked in front of me. We weaved through what seemed a maze of hallways, before we finally reached the large, ornate glass doors that led to the back yard. There was very little grass to mow due to a large concrete patio, huge swimming pool and hot tub. There was also a large pool house. I noted several large shrubs that hadn't been trimmed back properly the previous summer, but the remaining landscaping generally consisted of low-maintenance species.\n\n\"So, what do you think,\" she asked with a smile.\n\n\"You have a beautiful home, ma'am. Those shrubs really need a good trimming. I think $250 for the first time, and $175 a week after that would be fair.\"\n\n\"Are you sure,\" she asked. \"I believe my ex-husband was paying much more than that.\"\n\n\"No ma'am. I think that's fair,\" I replied.\n\n\"Fine, I just don't want to take advantage of you. I'm Laura Parker by the way,\" she said. We shook hands.\n\n\"It's nice to meet you, ma'am.\" I pulled my note pad out of my back pocket and wrote down her name. \"Will Friday mornings work for you?\"\n\n\"Yes, that should be fine. I'm usually here most mornings, though. I'll give you my phone number in case you need to reschedule,\" she offered. She wrote her phone number on my note pad. I pointed out my pager number on the business card, in case something changed on her end.\n\n\"Thank you, ma'am. I look forward to doing a good job for you. I'll see you tomorrow morning,\" I said.\n\n\"Fine, but please call me Laura and save the ma'am for your mother! You make me feel like an old lady,\" she smiled and gave me a wink. I still couldn't get over how beautiful she was.\n\nShe led me back through the house and I walked down the sidewalk hoping to find more customers. I'd be very lucky to find another client as beautiful as Laura, I thought to myself.\n\nThe next morning, I showed up at her house. I unloaded my mower from my trailer and was already working when I saw her walk out the front door. She waved at me, retrieved her mail and then went back inside. She was wearing a dress again, except this time it was black and she wore black nylons. The dress was cut just right, showing off her hourglass figure. She was older than me obviously, but I couldn't believe how great she looked.\n\nIt struck me as funny that I was admiring Laura so much, like I would have any chance with a woman like her. I could barely even talk to the girls I went to school with. I was a three-time all-state football player and wrestler with a perfect GPA, but I completely fell apart when I was in front of pretty girl. I was about 6'3\" and a solid 220 pounds at that time. I wore glasses and had an unruly head of blond hair. The girls at school always said I was \"nice\" or \"sweet\", but not dateable for some reason. My jock friends continually made fun of me about my lack of charm, but no one seemed to have any advice regarding the \"keys to success.\" I assumed they were hardly any better off than I was.\n\nAfter mowing, I trimmed the shrubs in the back yard. I was loading my mower and the shrub clippings when Laura came back out. She had an envelope in her hand.\n\n\"The yard looks great,\" she smiled and handed me the envelope.\n\n\"Thank you, Laura. I always try to do my best. If you ever see something you don't like, let me know immediately, and I'll fix it.\"\n\n\"Oh, I think you'll do just fine,\" she said. I looked at her closely. I wondered what she looked like when she was my age. She was still undeniably gorgeous.\n\n\"I was telling Valerie, one of my girlfriends, that you were going to take care of my yard work this summer. She said you were a big-time football hero. Her daughter graduated with you,\" Laura said.\n\n\"Oh really? Who's that,\" I asked, with a smile.\n\n\"Clarice Jennings,\" she replied.\n\n\"Yeah, I know Clarice. We had a lot of classes together. She's a really nice girl,\" I said. I'd had a crush on Clarice since middle school, but never found the courage to ask her out.\n\n\"Yes, she is. A real sweetheart, like her mom. She wanted me to ask you where you going to be playing next year.\"\n\n\"I'm going to school at State, but I'm not going to play football,\" I said.\n\n\"No? Why not? Valerie said you were really good,\" she replied.\n\n\"Mostly, it's because I know it's going to be different than playing in high school. It's a full-time job in college. My dad played when he was in school, and he told me it was hard to play and stay on top of schoolwork,\" I said.\n\n\"I can imagine that was a very difficult decision for you to make.\"\n\n\"Yeah, it was. There were a lot of my friends that told me I was stupid, but my school is paid for at State because of academics. So, I still get free school and I don't have to tackle anybody for it,\" I smiled.\n\n\"Ha,\" she laughed. \"That's funny.\"\n\n\"Thanks.\" I had this amazing feeling. I was standing there talking to this beautiful woman and I wasn't making a complete ass of myself like usual.\n\n\"You have a great sense of humor. The girls must love that about you,\" Laura said.\n\n\"Nah, most of them don't seem notice,\" I replied.\n\n\"No? That's really a pity. I like a handsome man with a sense of humor,\" she smiled. She gave me another one of those little winks I'd noticed the first day. \"So, what do your parents do,\" she asked.\n\n\"My mom is attorney, my dad was an obstetrician, but we lost him to cancer last summer,\" I said.\n\n\"Oh, I'm very sorry to hear that. I lost my father when I was about the same age,\" she said.\n\nI nodded my understanding. \"It was hard. He was a great guy,\" I said.\n\n\"I can imagine so.\"\n\n\"I should be going. I have a lot more to do today,\" I said.\n\n\"I'm sure you do. Have a great rest of your day,\" she said.\n\n\"You too,\" I replied. She gave me a very sweet smile. If she'd been my age, I would have taken that as a very good sign! When I got in the truck, I opened the envelope. There was $250 in there, but also a piece of folded pink stationary. I unfolded it and saw two additional crisp Ben Franklins. At the top of the stationary it read, 'A Note from a Very Sensuous Woman.' I read what she'd wrote below that.\n\n'Michael,\n\nNever cheat yourself in life.\n\nLaura'\n\nThat struck me as curious. Only my mother called me Michael.\n\n----------------\n\nThe next week, she came out again to talk and pay me after I'd finished. She must have just returned from the gym because she was in a sports bra and spandex shorts. She had her long brown hair pulled back in a ponytail, and I couldn't believe how good she looked. Every bit as good as the 18-year old girls I'd graduated with.\n\n\"Did you just get back from the gym,\" I asked.\n\n\"Yeah. I was doing some things around the house and hadn't changed. You work out a lot too, don't you,\" she asked.\n\n\"Yeah, I lift weights. I'm trying to get a little leaner this summer.\"\n\n\"I think you look just fine.\" She grabbed my right biceps and gave it a gentle squeeze. I felt like electricity surged through me when she touched me.\n\n\"Thanks. What do you do at the gym,\" I asked.\n\n\"Usually just aerobics and the Stairmaster,\" she smiled.\n\n\"You can't argue with the results,\" I blurted out. That surprised both of us. She got a very devilish look on her face.\n\n\"You think so, do you,\" she asked.\n\n\"Yes, you're so fit-,\" I said.\n\n\"For a woman my age, you mean,\" she asked, with a sly smile. I immediately started trying to backtrack.\n\n\"No, no, I'm sorry. I don't mean it that way, I meant for any age. You're in better shape than a lot of girls I graduated with,\" I tried to explain.\n\n\"Thank you, but I doubt that. I'm not 18 anymore.\"\n\n\"Your body looks it, Laura,\" I replied. Where this sudden influx of confidence came from, I still don't know. For some reason, I just felt more at ease with her than I did the girls from school.\n\n\"Thank you.\" She gave my arm another squeeze. \"I guess I should let you get going.\"\n\nI wanted nothing more than to stay right there on the sidewalk talking to her, but I did have several other yards to mow and I was going out with my friends that night.\n\n\"Yeah, I probably should. I'll see you next week,\" I said finally.\n\n\"Not, if I see you first,\" she laughed.\n\n\"Yeah, I guess so,\" I grinned.\n\n\"Get going.\" She smiled at me and turned to walk up the sidewalk to her door. I stood there for a moment watching her. Her ass was a masterpiece in those spandex shorts. I always loved when girls wore spandex, but none had ever done them justice like Laura did. Her hips had more curve and her ass was so much fuller and rounder than the girls at school. She glanced back over her shoulder and caught me staring. She smiled and shook her head. I waved to hide my embarrassment, before getting in my truck.\n\nThe next week, I didn't see her until I was just about to leave. She pulled up in a cherry red Ferrari that I'd never seen before. I admired the car and the gorgeous brunette that got out of it. She swung those toned legs out of the car as I watched. She was wearing tan nylons I saw, with red heels and another sexy red dress. Damn, she was just amazing. She saw me staring and smiled, shaking her head. She walked over and took off her sunglasses. She looked up at me with those brilliant green eyes.\n\n\"I'm probably old enough to be your mother. You know that, right,\" she asked.\n\n\"I'm sorry, but you just really look great today.\"\n\n\"Thank you. I gave a speech at a ladies' breakfast this morning,\" she replied.\n\n\"Oh, okay.\"\n\n\"You're all finished, I see,\" she said.\n\n\"Yes, I was just getting ready to leave. I was hoping I got to see you first,\" I smiled.\n\n\"Please,\" she said, rolling her eyes. \"Let me get my purse.\" She walked back to the Ferrari. I watched those sexy legs as she walked. She had an amazing set of calves, accentuated by her sexy high heels. Naturally, she turned around and caught me watching her.\n\n\"You really should take a picture. It'll last longer,\" she laughed, as she walked back towards me.\n\n\"I don't have a camera,\" I replied.\n\n\"Are you flirting with me, young man,\" she asked.\n\n\"Maybe, I guess. I'm not really good at flirting with girls,\" I admitted.\n\n\"I'm not a girl. I'm a woman. There is a difference between the two, you know.\"\n\n\"I can tell,\" I said, as I looked her up and down.\n\n\"You are impetuous. How old is your mother,\" she asked.\n\n\"45.\"\n\n\"How old do you think I am,\" she replied.\n\n\"32,\" I said.\n\n\"I'll be 38 next month.\"\n\n\"So, I was wrong,\" I smiled.\n\n\"You shouldn't flirt with women twice your age. That can be dangerous for a young man like you,\" Laura said. She flashed me a wicked smile and squeezed my arm. I made a note to wear a tank top every day I came over. I loved having her touch me.\n\nShe handed me the envelope for mowing.\n\n\"Thanks, for doing a great job, again,\" she smiled.\n\n\"You're welcome. I'll see you next week,\" I said.\n\n\"Do you mow on Saturday and Sunday, as well,\" she asked.\n\n\"Just Saturday. I like having one day off,\" I replied.\n\n\"Yes, I can understand that. I hate to ask, but would you mind helping me on Sunday,\" she asked.\n\n\"Doing what,\" I asked.\n\n\"I need to move some furniture. I hate to hire someone for such a small thing. I thought maybe you might want the extra money,\" she replied.\n\n\"Sure, how long do you think it will take?\"\n\n\"Maybe just a couple hours,\" she said.\n\n\"Okay. After lunch, maybe?\"\n\n\"Yes, that'll be fine,\" she said.\n\n\"Sounds great. I'll see you then,\" I said. She smiled and winked at me again. As I drove home, I kept thinking about getting to spend more time with her. I really enjoyed talking to her and trying to flirt with her. I felt my confidence grow each time we talked. I was sure that was going to help me meet girls when I got to school in the fall.\n\n--------------\n\nSunday arrived and I was having lunch with my mom. I explained that I was going to help one of my lawn clients move furniture.\n\n\"Oh, that's nice of you,\" Mom said.\n\n\"Yeah, she's really nice and she said she'd pay me,\" I said.\n\n\"Oh, I see,\" Mom replied. \"I need to go to the office this afternoon anyway. The Centrex trial starts Wednesday and I have a ton of things I need to do.\"\n\n\"Mom, you haven't taken a day off in three months,\" I said.\n\n\"Michael, this is an important case,\" she replied.\n\n\"Mom, they've all been really important since Dad died,\" I said.\n\n\"Honey, we've been through this. Everyone deals with things differently. I'm not going to just mope around here all day every weekend by myself. You're going to be gone today anyway,\" she countered.\n\n\"I'll just be gone for a couple hours, Mom,\" I said. I should have known better than argue with a lady that did that for a living, but I kept trying.\n\n\"Let me go to the office and see what I can get done. I'll page you later and let you know when I'm on my way home,\" she said. She smiled, but I don't think she believed a word of it any more than I did.\n\n\"Okay, Mom. Good luck at the office,\" I replied. I helped her clear the table and told her I'd wash the dishes when I got home. I kissed her on the cheek and left. On the drive to Laura's house, I thought about my Mom. Until Dad passed away, she rarely worked on weekends. Now, it was all the time. I secretly hoped she'd met a new man and was just sneaking away to see him. Deep down though, I knew she was just working. I wasn't sure how I was going to help her.\n\nI pulled up in front of Laura's house. I noticed the Ferrari was sitting in the covered driveway as I rang the doorbell. I was dying to ask her for a ride in it. Maybe before the end of the summer, I thought. I'd grown up watching Magnum, P.I. and a little red Ferrari always made my heart race. Not to mention when they were driven by a beautiful lady like the one whose high heels I heard clicking towards the door.\n\nShe opened the door and glanced at her watch. \"Right on time. I love a man that is punctual.\" She gave me another one of those smiles that gave my stomach butterflies.\n\n\"I try to be,\" I smiled.\n\n\"Come in,\" she said, waving me past her. She was wearing a black dress that day. It fit her well, showing off her hips and bust. I wondered what her wardrobe had cost, as everything she wore looked so good on her. I looked up and noticed she had caught me staring again. She smiled and led me to her spacious living area.\n\n\"Okay, first thing I want to do, is move this couch over there where the chair is and then put the chair over there.\" She pointed to where she wanted it. \"My ex-husband liked having it where it's at and I always thought it was out of place.\"\n\n\"Okay, I can do that,\" I smiled.\n\n\"I need to make a phone call. I'll be back shortly,\" she smiled and winked at me.\n\nShe turned to walk out of the room. My eyes followed her, watching her ass and toned nylon-covered legs. When she turned around the corner, she glanced back and saw me looking. She shook her head and smiled.\n\n\"Please get to work,\" she jokingly chided me.\n\n\"I am, I am,\" I replied.\n\nI'd just finished moving everything when she walked back in.\n\n\"Oh nice! Doesn't that look better,\" she asked. She had a big smile on her face.\n\n\"Yeah, I think so,\" I answered. I wasn't sure there was that much of a difference, but she thought there was, and that's all that mattered to me.\n\n\"You want a soda or something,\" she asked.\n\n\"Sure, that would be great.\"\n\n\"I'll get you one, have a seat,\" she said.\n\nI sat down on the couch I'd just moved and waited for her. When she returned she had a can of Coke for me and a glass of wine for herself. She sat down on the couch next to me.\n\n\"Thanks,\" I said as she handed me the can of soda.\n\n\"You're very welcome. So, I'm curious, how can you be so shy with girls at school, but be daring with a woman my age?\"\n\n\"You think I'm daring,\" I asked, smiling.\n\n\"Yes, I do,\" she said.\n\n\"Maybe it's because I know that I don't have a shot with you, and that I can't really mess anything up. I can just be myself,\" I said with a smile.\n\n\"You could use a bit of self-confidence. Women like that, you know.\"\n\n\"Ha, yes, I know. It's true with you, though. You must have guys falling all over themselves to take you out,\" I said.\n\n\"You might be surprised. Single men my age, are usually looking for a twenty-something. That's not me. I'm an old hag. And I'm not at the point in my life where I'm willing to accept some old man.\"\n\n\"Laura, you are not a hag. You're the sexiest woman I've ever met,\" I said.\n\n\"Surely, that's not true,\" she smiled.",
        "\"Yes, it is.\"\n\n\"It's very sweet of you to say that, though. I appreciate you coming over and helping me today,\" she said.\n\n\"It's no problem. Is that all you needed? I thought you said it might be a couple hours' worth of work,\" I replied.\n\n\"Yes, that's all the furniture I needed moved,\" she smiled. I studied her facial expression. I wasn't sure what to make of it. She'd never looked at me that way before.\n\n\"Oh, okay,\" I said as I sipped my Coke. I was getting nervous, as we continued to look at one another. I was afraid I was going to say something stupid.\n\n\"I just thought it might be nice to sit and talk. I really enjoying talking to you, even though you're constantly flirting with me or giving me the eye.\"\n\n\"Wow, am I that bad,\" I asked with a smile.\n\n\"Yes, you're pretty bad, but I think it's cute. I haven't had someone pay as much attention to me as you do in quite some time,\" she said.\n\n\"That's a real shame.\"\n\n\"Yes, it is. So, what do you want to do with your life,\" she asked.\n\n\"I want to be an engineer. I want to design and build things.\"\n\n\"That's a good goal. I'm sure you'll do great things,\" she smiled at me. \"I'm going to have another glass of wine, would you like one?\"\n\n\"Yeah, sure. That would be great,\" I said. She kicked off her pumps and walked to her kitchen. She soon returned.\n\n\"I say we have a little toast,\" she raised her glass. \"To the future.\" Our glasses clinked together.\n\nWe sipped our wine in silence. I would occasionally look at her shapely, silky legs. How I yearned to touch and caress them. She caught me looking again and smiled.\n\n\"I do have something else you could do for me,\" she said. She looked at me in a way no other woman had until that point in my life.\n\n\"Sure. What do you need,\" I asked.\n\n\"My feet hurt. Would you massage them for me?\"\n\n\"Uh, yeah, sure,\" I said, barely containing my excitement.\n\nShe repositioned herself on the couch so that she was resting against the armrest. She placed her nylon clad feet in my lap. I still remember the bright red of her toe nail polish through the reinforced toes of her light tan nylons.\n\nI approached her feet nervously, as I'd never done that. I took one in my hands and began to slowly rub it. There was almost an electrical feel to the silky fabric as I touched her. I looked over at her.\n\nShe smiled and sipped her wine.\n\n\"First time, I guess,\" she asked.\n\n\"Yes,\" I managed to sputter.\n\n\"It feels really good. A good foot massage is a great way to keep a woman happy. Don't forget the other one. It's getting jealous,\" she said. I did as I was told and switched feet. When I did, I felt the one I had been rubbing start sliding against my suddenly hard dick. I was just wearing baggy jean shorts as I hated wearing underwear. To my virgin cock, I might as well have been wearing nothing at all.\n\n\"Someone likes what you're doing,\" she said.\n\n\"I'm sorry. It's embarrassing,\" I replied.\n\n\"You are just too sweet. There's nothing wrong with getting excited when you're with a woman. It's good for her ego, especially when all she's done is let you rub her feet,\" she smiled.\n\n\"I am enjoying myself,\" I admitted. \"I love the way your feet feel in these nylons.\"\n\n\"Please, be my guest. You're doing great. My feet feel better already,\" she smiled.\n\nI continued to rub and caress her soft, nylon covered feet as I looked at her. She casually sipped her wine and looked back at me. I wasn't sure where this was headed, but I was very eager to find out. My hands gradually worked their way up past her ankles. I was dying to run my hands over her calves, as I'd always admired them. I was not disappointed, they were so supple and sexy. My hands made it to her knees and I ran my hands around the back of them. I soon learned she was quite sensitive there. Her expression changed and she pursed her lips in surprise.\n\n\"Let's not get too carried away. Let's just focus on my calves right now. That felt great,\" she said.\n\nI was disappointed with her halting my exploration, but I reminded myself that my hands on a very sexy woman. She'd asked me to and she told me I was making her feel good. She was in control and I was totally under her spell.\n\n\"Mmmm. Yeah, just like that. You're catching on very fast,\" she purred.\n\nI smiled at her for her compliment and really wanted to make her happy. Her toes had found my cock again. She poked and teased me with them. I would have given anything to have her little toes on my bare cock.\n\n\"That feels like quite the cock you have in there,\" she said. That was the first time I'd heard her say something even vaguely profane. It drove me crazy hearing her say that, especially since it was mine she was talking about.\n\n\"You want to see it,\" I asked hopefully.\n\n\"All in due time, Michael.\" That still caught me off guard. Only my mother called me that. \"We need to have a little talk first.\"\n\n\"About what,\" I asked.\n\n\"Have you ever been with a woman?\"\n\nI felt my chest tighten. \"No, I haven't. Only kissed a few. Like I said, I'm really shy with girls.\"\n\n\"You've been pretty forward with me,\" she said, her eyebrows raised.\n\n\"I can't really explain it. I'm just really at ease with you, which is strange since you're the sexiest woman I've ever met.\"\n\n\"You've already got your foot in the door, mister. You don't have to keep piling on the bullshit,\" she said.\n\n\"You are though,\" I replied.\n\n\"Thank you, Michael. You don't know how good it feels to hear that. I've had a hard time since Steve and I split up.\"\n\n\"Why did you,\" I asked.\n\n\"Sweetie, he left me for another woman. She was about your age. A waitress in a bar. He thought she was an improvement over me,\" she explained. Her continued pain over her divorce was evident on her face.\n\n\"What an idiot,\" I said.\n\n\"Yeah. I guess. I mean we'd been married almost 15 years. I stayed with him even despite the fact he couldn't give me babies,\" she said sadly.\n\n\"I'm sorry, Laura,\" I said sadly. How anyone could walk away from her, I couldn't imagine.\n\n\"Thank you, Michael.\" She reached down and took my hand.\n\n\"So, why not find a new guy and have babies,\" I asked.\n\n\"I'm a little old for babies now. My body isn't working the way it used to. I've accepted that fact. I have my charities. That's what makes me happy,\" she smiled.\n\n\"Laura, I don't mean to be nosey, but you don't seem to really work. I'm just 18, but this house must have cost a fortune,\" I said.\n\nA big smile appeared on her face, \"You don't mean to be nosey. Michael, if you ever have any questions, feel free to ask, okay?\" I nodded at her, before she continued. \"Have you ever heard the name J. Walter Pettyjohn?\"\n\n\"Of course. There's a huge building downtown named after him. He invented some type of circuit board. We studied about him in a business class I took,\" I said.\n\n\"Yeah, that's close enough. I don't really understand what it was either, but it made him extremely wealthy,\" she said.\n\n\"Yeah, I can imagine, but what's that got to do with you, Laura?\"\n\n\"He was my grandfather,\" she smiled.\n\n\"You're joking?\"\n\n\"No, I'm not,\" she said.\n\n\"So, you don't have to work then?\"\n\n\"No, just on things I want to, like my charities,\" she replied.\n\n\"That's crazy. I never would've imagined. He was worth several hundred million dollars, wasn't he,\" I asked.\n\n\"Yes, and then some,\" she nodded.\n\n\"Does it make you feel weird,\" I asked. I couldn't imagine growing up like that.\n\n\"It used to. I hated being the rich girl. My parents sent me and my sister Veronica to private schools with girls from other well-off families. Most of them were spoiled, little bitches and it was completely impossible to be around them. Roni and I always felt out of place. That's why, when Daddy passed away and I finished college, I started my charities. I wanted to use our money to make the world a better place,\" she said.\n\n\"That's really cool,\" I smiled.\n\n\"Thank you. I appreciate that. I also appreciate that the entire time you were hearing my life story, you have not stopped massaging my feet,\" she smiled.\n\n\"I was enjoying myself,\" I said.\n\n\"You just might be a keeper, mister.\"\n\n\"I hope so,\" I laughed.\n\n\"Gosh, it's almost 4, do you need to be anywhere?\"\n\n\"No, I'm enjoying what I'm doing right now,\" I replied.\n\n\"Are you sure,\" she asked.\n\n\"Yeah. I'm sure.\"\n\n\"Won't your mother be expecting you for dinner, especially with you moving away in a couple months,\" she asked.\n\n\"No, she went to the office. She probably won't be home until late,\" I said sadly.\n\n\"Oh. She works a lot,\" Laura asked.\n\n\"Yeah, it's kind of complicated,\" I replied.\n\n\"It sounds like we have time. I'm a good listener. Especially when I'm getting my feet rubbed,\" she grinned.\n\n\"Are you sure,\" I asked.\n\n\"Yes, but why don't you get us another glass of wine first?\"\n\n\"Sure,\" I said as she handed me her empty glass. I found the bottle in the kitchen and refilled our glasses.\n\nWhen I returned to the couch, I handed her glass to her and her silky little feet returned to my lap.\n\n\"Now, tell me what's on your mind,\" she said.\n\nI told her about losing my dad and how my mom had buried herself in work since then. I even explained my boyfriend theory. She nodded her understanding as she took my hand and gave me a reassuring smile.\n\n\"Michael, I know it's hard for you. Grief is a difficult thing, and not everyone deals with it the same way. Maybe you let it all out last fall playing football, because that's something you and your father had in common. It's different with your mother. You just need to be strong for her and continue to try for her. It will get better. I promise you,\" Laura said.\n\n\"Okay. Laura. Thanks for listening to me,\" I said.\n\n\"Anytime, sweetie,\" she smiled. \"It's almost six now, you should be going. I'm leaving for a few days and I need to pack.\"\n\n\"Okay,\" I smiled.\n\nShe scooted down the couch and took my hands in hers.\n\n\"I still can't believe that I'm doing any of this.\" She leaned her head back and sighed. \"But you have made me feel really good about myself again. I know I should stop myself, since you're, let's just say a 'little' younger than me, but I don't really want to,\" she smiled wickedly.\n\nI looked at her not knowing what to say.\n\n\"You don't know how good it's felt to have your eyes never leave me and hear the things you've said, even as ridiculous as they are,\" she smiled.\n\n\"Hey, those were all true,\" I interjected.\n\n\"Whatever!\"\n\n\"Laura, you are the sexiest woman I've ever seen,\" I said confidently.\n\n\"I don't believe you for a second, but you don't know how that makes me feel. I've been dressing a lot sexier than I normally do since Steve left. You're the only one that's seemed to notice, under the age of 60 that is,\" she smiled.\n\n\"I don't believe that.\"\n\n\"It's true. I like who noticed though,\" she said. I remember reading something one time about someone having hunger in their eyes. I never knew what that meant until that night. \"Michael, if you will just be patient, I think you and I can have some wonderful experiences together.\"\n\nI stared at her in disbelief. \"Laura, are you serious?\"\n\n\"Yes, Michael, I'm very serious, but remember I said patient. I also expect you to be very discreet,\" she said seriously.\n\n\"Yes, of course,\" I said.\n\n\"Come on, let me walk you out,\" she said. She took my hand and led me to the door.\n\nShe stopped and looked up to me. Not being in heels, I was a good 8 or 9 inches taller than her. She wrapped her arms around my waist and hugged me. She put her head against my chest. Finally, she looked up. I knew what she wanted, so I leaned my head down and kissed her bright red lips.\n\n\"Really,\" she asked.\n\n\"What?\"\n\n\"Kiss me like you've been thinking about,\" she demanded.\n\n\"Okay,\" I smiled. I leaned down and kissed her again. It was quite the experience. No one had ever kissed me like she did. I felt like I was floating as our tongues met and twirled. Finally, she broke away.\n\n\"That was much better. You're pretty good at that,\" she smiled.\n\nI was giddy, \"You're pretty good, too.\"\n\n\"I've had a bit more practice,\" she smiled.\n\n\"Yeah, I suppose so,\" I said as she opened the door for me. \"See you on Friday?\"\n\n\"Yes, see you on Friday. Have a good week.\" She took my hand and lightly squeezed it.\n\n\"You too, Laura. Have a safe trip.\" I turned to walk down the sidewalk to my truck.\n\n\"Thank you. Oh, you might want to wipe that lipstick off before you get home to your mother,\" she called after me. When I turned around, she'd already walked back inside. I got to my truck and looked in the rearview mirror. Sure enough, I had bright red lipstick smeared all over my lips. I grabbed a gym towel that was lying in the seat and quickly wiped it off. I started my truck and drove off. I couldn't believe what had happened and what the future could hold. I looked forward to it.\n\nThe coming week dragged on slowly, as I waited to see Laura on Friday. I thought of her constantly. I reminded myself to be patient, as she'd repeatedly said. I was certain that it would be worth it. To my disappointment, she wasn't home on Friday morning. I'd finished mowing before I realized it. I checked my pager and saw a number I didn't recognize. I guess I'd got the page when I was on the mower. I hoped it was from Laura. Damn, I needed to find a pay phone.\n\nI pulled into a gas station since the truck and mower both needed fuel. After they were both topped off, I walked over to the pay phone and dropped in my quarter, before dialing the number. A lady answered the phone.\n\n\"Worldwide Charities, this is Alicia speaking. How may I direct your call?\" The voice said. It must have been Laura then.\n\n\"Yes ma'am. I was trying to reach Laura Parker, please.\" I replied.\n\n\"May I tell her who's calling,\" Alicia asked.\n\n\"Yes. I'm Michael Tanner,\" I replied.\n\n\"One moment, please.\"\n\nI heard the line click as the call was transferred. It couldn't have been more than 10 seconds, but it seemed like an hour before she picked up.\n\n\"Hello, Michael. I was beginning to wonder,\" she said. Her warm tone gave me a shiver.\n\n\"Sorry, I missed the page,\" I explained.\n\n\"It's okay. I'm sorry I missed you this morning, but being out of town this week, I had some catching up to do at the office,\" she said.\n\n\"I understand,\" I said.\n\n\"Do you have plans tonight,\" she asked.\n\n\"No, nothing that I wouldn't cancel for you,\" I replied, as smoothly as an 18-year-old virgin could manage.\n\n\"Is that so? In that case, why don't you be at my front door at 7, sharp,\" she said.\n\n\"Sure. Am I taking you to dinner,\" I asked hopefully.\n\n\"No, I'm making you dinner.\"\n\n\"Okay. Sounds great,\" I said.\n\n\"Good. I'm looking forward to seeing you again,\" she said.\n\n\"Yes. Me too,\" I agreed enthusiastically.\n\n\"Goodbye, Michael.\"\n\n\"Yes, bye.\"\n\nDamn I thought. I certainly couldn't wait to see her again. I busted my butt the rest of the day to get done as early as I could, finally finishing a little after four. I thought I should bring her something, but I couldn't think of anything. What could I get a woman that had more money than she knew what do with? I finally decided I would take her some roses. She had numerous large rose bushes, so I assumed she'd like that. I stopped by a florist and a helpful sales girl loaded me up with a dozen and relieved me of my earnings from one of the yards I'd mowed.\n\nI stopped by home to shower and change clothes. I checked the answering machine and I saw there was a message from Mom. She apologized and said she wouldn't be home until 10. Of course, I thought. I left her a note on the fridge saying I had a date and I'd be home before too late. I showered and dressed. I put on a button up shirt and slacks. I knew Laura would be looking her best and I wanted to as well. I debated briefly before I put on a tie and jacket, as well.\n\nI left the house and made the drive over to her house. I was early, so I drove around her neighborhood for a while. I pulled up right on time. I rang the doorbell, and the intercom buzzed.\n\n\"It's unlocked. Come in,\" she said.\n\nWhen I entered, I could smell something delicious. I followed the smell to the kitchen. She was just putting food on the plates. It looked like a delicious stir fry.\n\n\"Talk about a man with timing,\" she smiled. I stopped in the entryway and admired her. She was wearing a dark blue, wraparound dress. It looked like it had been made for her personally, it fit her so well. A single strand of pearls hung from her neck.\n\n\"I couldn't be late to see you,\" I answered with a smile.\n\n\"I like to hear that. Oh, and roses. That's very thoughtful. They're beautiful,\" she smiled.\n\n\"Like you,\" I said walking over to her.\n\n\"Would you stop,\" she laughed. \"Why don't you open the wine. The corkscrew is in the top drawer over there.\" She pointed to the location.\n\nHer kitchen was immense. My parent's kitchen was pretty impressive, as they'd both loved cooking, but this one was more than I'd ever imagined. I'd been amazed the previous weekend, when I saw it the first time. I found the cork screw and opened the wine. She walked up beside me with glasses in her hands, before she sat them on the countertop.\n\n\"You should let the wine breathe for just a minute. Besides, you missed an important step when you got here,\" she smiled. I knew immediately what that was and took her in my arms. We kissed slowly and deeply. I rubbed my hands up and down her back. I loved the way her silky dress felt, but not as much as the way she felt under it.\n\n\"Mmmm,\" she said. \"That was wonderful. I think we should eat. We can have dessert later,\" she smiled.\n\nMy mind was reeling from kissing her. I was certainly looking forward to dessert. I poured the wine and she took the glasses. I picked up our plates and followed her to the dining room, placing them where she already had silverware set. Having watched too many old movies growing up, I moved to pull out her chair for her. She smiled and touched my cheek.\n\n\"And people say that gentlemen are all dead and gone,\" she laughed.\n\nI took my place to her right. She raised her glass.\n\n\"To the start of new adventures,\" she said. Our glasses clinked together. We each took a sip. I looked at her beautiful face, and she caught me watching.\n\n\"What,\" she asked.\n\n\"Nothing. I just like looking at you, Laura,\" I smiled.\n\n\"I'm glad you do. Now, try your food,\" she insisted.\n\nI was not surprised the food was absolutely delicious. I ate as quickly as conversation and politeness would allow. She told me about her trip to New York earlier in the week.\n\n\"I've always wanted to go,\" I admitted.\n\n\"Really? I go once a month,\" she replied.\n\n\"Wow. That's awesome,\" I said.\n\n\"You should come with me some time,\" she smiled.\n\n\"Seriously?\"\n\n\"Of course. We won't even have to fly commercial,\" she grinned.\n\n\"You have your own airplane,\" I asked in disbelief.\n\nShe simply nodded, as she swirled her wine in her glass.\n\n\"I can't believe that,\" I said.\n\n\"I love to travel, so it's useful,\" she smiled simply.\n\nI looked across the table at her and I had to smile. I couldn't believe that I was in the situation I was. Just a few weeks before, I'd met her trying to get lawn work. Now she was offering to take me to New York with her in her private jet.\n\n\"Let's clear the table and get another glass of wine,\" she suggested.\n\nI stood up, grabbing the plates and silverware. We walked to the kitchen and I put everything in the sink. She handed me the wine glasses to pour. I handed her glass to her.\n\n\"Let me rinse those plates off,\" I said.\n\n\"You're too much,\" she laughed.\n\n\"What? I wash dishes at home all the time. I don't want the sauce to stick. Those plates look expensive.\"\n\n\"You're going to make someone a great husband someday,\" she laughed, as I cleaned the dishes.\n\n\"You think so, huh,\" I asked.\n\n\"Yes, I do.\" She reached for my hand and pulled me to her. Our lips met and we kissed passionately. My hands roamed over her back and shoulders. Eventually, down to her magnificent ass. It was perfectly firm. She broke our kissing.",
        "\"You've been dying to do that, haven't you?\"\n\n\"Have I ever,\" I replied enthusiastically.\n\n\"You've certainly stared at it enough.\"\n\n\"I have it memorized,\" I laughed.\n\n\"You're a crazy young man.\" She said.\n\n\"You're the only thing I'm crazy about.\" I smiled.\n\nShe shook her head. \"Come on, Mr. Charm. Let's go somewhere comfortable.\" She led me to another living area that I hadn't previously seen. I still had not seen upstairs yet. The room looked very comfortable and inviting. She led me to a large oversized couch, and gently pushed me back on it. She then knelt next to me and we resumed kissing. I tried to remember her words about being patient, but kissing her was driving me crazy. My hands roamed over her body as she leaned over me. I enjoyed the feeling of rubbing the backs of her thighs, my hands moving over her silky black nylons. I gradually worked my way up until I was at the hem of her dress. Not sensing any resistance on her part, my hands continued upwards. The silky material on her legs suddenly changed textures. It felt like lace. What was she wearing I wondered?\n\n\"Are you enjoying yourself,\" Laura asked me between kisses. Her voice was sultry and sexy.\n\n\"Yes, I am. What do you have on under here,\" I asked.\n\n\"Patience, remember?\"\n\nI nodded as she kissed me deeply, once again. I felt the lace end and my fingertips suddenly found bare skin. She was wearing stockings, I realized. I'd never seen a girl, or woman, for that matter, in stockings except maybe in a copy of Playboy in the locker room. I'd always thought they were so sexy. I couldn't believe my luck. I was passionately kissing the sexiest woman I'd ever met, and she was wearing stockings to boot! As my hands continued to roam under her dress, I felt the little straps the held the stockings in place and the lace of her panties. My mind raced with thoughts of what she what was under the dress.\n\nShe had my tie loose and I felt her start unbuttoning my shirt. Soon, she had it open almost to my waist. Her soft hands ran across my pecs. She smiled approvingly as she did. Seeing that look on her face made every second of exercise worth it.\n\n\"You have a great body,\" she said.\n\n\"Thanks. So, do you,\" I replied.\n\n\"We're going to have a lot of fun together, Michael.\" She moved over to straddle my legs.\n\nI could only nod.\n\n\"There's one thing that I should have mentioned last weekend, but I didn't. Before anything else happens, we need to talk about it.\" She moved her hands to my shoulders.\n\n\"Yeah, what,\" I asked, wondering what it could possibly be.\n\n\"This is just going to be fun, Michael. Nothing more. Do you understand,\" she asked with a very serious look on her face. I thought I knew and I nodded agreement.\n\n\"Okay. I just wanted you know where things stood,\" she said.\n\n\"I understand, Laura.\"\n\n\"Good,\" she replied. She stood up from the sofa and I watched as she reached for the sash around her waist. She untied it and she seductively opened her dress, revealing herself to me. I sat there in astonishment. She was wearing the sexiest lingerie I could have imagined. As I'd partially figured out, it was predominantly lace. Her bra, panties and garter belt were black and had multi-colored roses stitched on them. The rose pattern was repeated on the lacy tops of her stockings.\n\n\"Well,\" she asked, as she let her dress slip from her shoulders.\n\n\"You're fucking gorgeous Laura,\" I said. It was taking all of my self-control not to stand up and grab her.\n\nShe smiled. \"Thank you. Come with me,\" she said, extending her hand. I stood up and she led me to the stair case. We walked up the wide staircase holding hands. I kept looking at her fearing this was all just a dream. She led me to her bedroom where she laid seductively on the bed.\n\n\"Michael, are you ready to learn how to make me happy,\" she asked.\n\n\"Yes. I am,\" I said.\n\nShe propped herself up on pillows and beckoned me to her. I walked slowly to the bed, taking time to discard my unbuttoned shirt and shoes. I joined her on the bed and we kissed. My hands roamed over her smooth skin as if they had a mind of their own. With her nearly naked, I had an even greater appreciation for her body. Her skin was so smooth and soft. Her curves tight and supple. My hands roamed across her abdomen to her breasts. I tentatively ran my hands over them. I knew that things had gone pretty far, but I was still uncertain if there were boundaries we weren't going to cross yet. I heard her moan, so I assumed I was in the clear.\n\nHer breasts were so warm and soft. She was a C cup as I'd later learn. I'd never touched a girl like that, so it was an immense thrill all on its own, not to mention who I was touching.\n\n\"Michael, take off my bra. It clasps in the front,\" she said.\n\nI looked at the bra closely and saw what she meant. I fumbled around briefly before I got it opened. I peeled back the right side revealing a beautiful sight. I just had to touch her. As I slowly massaged her, I felt her hard nipple grazing along my palm. I looked up at her and smiled. Remembering the foot massage, I didn't want the other one getting jealous. I peeled back the other side of her bra and repeated my slow, tender massage.\n\n\"Kiss them,\" she said. When I leaned down to her chest she took my head in her hands. I lightly kissed her breasts all over. I loved having my lips on her, smelling her perfume, smelling her, becoming acquainted with her. I knew her nipples were sensitive so I started lightly licking them. She moaned in approval. \"Suck them.\"\n\nI took one in my mouth and began lightly sucking.\n\n\"That's it. Just gentle at first, later you can be more firm,\" she purred. I was the most excited I'd ever been. I felt like my skin was on fire as I alternated back and forth between her hard nipples.\n\n\"Touch me, Michael,\" she moaned. I knew immediately what she meant. I ran my hand down her abs to the top of her garter belt and then across her lacy panties. I instinctively cupped her sex in my hands. I'd heard a few of the guys talk in the locker room, but I was pretty clueless as what to do. I looked up from her breasts to see her smiling. She'd noticed the worried look on my face.\n\n\"My sweet Michael. It's okay. I'll teach you,\" she said. \"Put your hand inside my panties.\"\n\nI quickly complied. I realized she was smooth and bare. I looked back up at her.\n\n\"I have it waxed,\" she answered the question that was obvious on my face. \"Now, just rub me. Gently at first. Get familiar with everything down there.\"\n\nI did as she instructed. It was interesting feeling around, and I couldn't wait to see what I was rubbing. There was wetness everywhere it seemed. It felt slick to the touch. I realized as my hand moved around the wetness was spread, allowing my hand and fingers to glide over her more smoothly. I encountered her slit and slid a finger inside of her. It felt so warm and wet. I looked back at her and she just nodded. She was biting her lip as she looked at me. I moved my finger around inside her. I was looking for her clitoris, as I knew that was the magical spot. I grazed a hard, little nub in the wetness and she shook slightly.\n\n\"That's the most important spot. Always be gentle with that at first. As a woman gets more excited, you can generally stimulate it more, but be gentle at first. Just run your finger around it. Tease me,\" she said. I did as she instructed, and I was rewarded with a low groan from her.\n\n\"That's it, sweet baby. Just like that,\" she purred. She pulled my head back to her breasts and I resumed teasing and sucking her hard nipples.\n\n\"Mmmm, taste me, Michael,\" she said. \"Lick your fingers.\"\n\nI pulled my hand from her panties and brought my fingers to my mouth. They glistened with her juices. I smelled them and immediately loved her scent. I took my index finger in my mouth. It was like nothing else in the world. She watched me, smiling.\n\n\"Do you like it,\" she asked.\n\n\"Yes, I want more of it,\" I said.\n\n\"Good, I'm ready for your mouth on me.\" She reached down and pulled her panties down. She also kicked off her pumps. I repositioned myself so that I was between her legs. I rubbed my hands up and down her thighs as I looked at her womanhood. It was beautiful. Her outer labia were tight and puffy from her arousal. Her lips glistened with her excitement.\n\nI lowered my face to her wet slit smelling her. I had no idea what I was doing so like everything else that night, I started slow. I planted slow gentle kisses all round. On her inner thighs, on her labia, on her mons. She took my head in her hand, her fingers gliding through my hair. I began licking her labia, picking up her sweet taste, before working my way into her slit. Her excitement flowed from her like honey and I lapped it up. I used my hands to spread her lips so I could see more of her. It was a wonderful sight. I glanced up at her and she was watching me.\n\n\"Are you having fun down there,\" she asked with a giggle.\n\n\"Yes, I am,\" I smiled.\n\n\"Good, you'll have plenty of time for your research. I want you to make me cum,\" Laura purred.\n\n\"How,\" I asked.\n\n\"Just do what comes naturally, and I'll help you.\" Her grip on my head increased and I felt her direct me. \"Just lick me like you're licking an ice cream cone. Mmmm, yeah, that's it. Don't go for the clit all at once, slowly. Mmmm. It's been so long since I've felt this,\" she purred.\n\nI was in sensory overload. The sounds, the smell, the taste, were just overpowering.\n\n\"Mmmm, that's it baby. Finger me too,\" Laura directed. I used my index and middle fingers to probe as I continued to lick her. I loved the way she felt on the inside, so warm and wet. I imagined how it would feel to my cock. I was anxious thinking about my first time. I hoped I wouldn't be a complete disappointment to her.\n\n\"Oh, that feels so good Michael,\" she cooed. \"I love when a man devours me. You're going to get lots of practice doing this for me. Every woman you meet will be grateful.\"\n\nDamn, I thought to myself, talk about an education. I was eager to learn, particularly with respects to what the gorgeous brunette in front of me enjoyed. I licked her continuously, making love to her sweet sex with my mouth. Her hands held my head and her fingers ran through my hair. I loved hearing her passionate moans and words of encouragement. I yearned to make her happy. Her motions intensified and I felt her hips move more. She began grinding against my face. Her hands sought to control my head as her wet sex moved up and my tongue.\n\n\"Mmmm, you're not really going to have to work for it. I'm ready, baby. Yeah, don't stop. Don't stop. Eat my pussy, Michael. Oh, yes,\" she moaned. \"Oh, Michael. Oh, I'm cumming. I'm cumming for you!!\"\n\nHer grip on my head intensified and I felt her body go rigid. She panted and finally rested limply on the bed. My head swam with excitement and confidence after she'd cum. That made me feel great. I couldn't wait to hear her moaning my name again. I looked up at her as she rested. She was lightly running her fingers through my hair.\n\n\"Come up here and kiss me,\" she directed. We kissed and I ran my hands over her luscious body.\n\n\"What did you think of that,\" she asked.\n\n\"That was great. I loved doing that for you,\" I said.\n\n\"Good, because you are going to be doing that a lot. I love when a man makes me the center of attention. I've not known that often in my life,\" she said.\n\n\"Really,\" I asked.\n\n\"No, not often,\" she said. \"I don't want to get into specifics, but that's something I've missed out on in life.\"\n\n\"Your husband didn't do that for you,\" I asked.\n\n\"Rarely, he was an adequate lover, but nothing special. I'm going to teach you to be different,\" she smiled. \"Would you like that?\"\n\n\"Yes, I'd love that. I want to learn everything with you, Laura,\" I said.\n\n\"That's good, baby,\" she replied. \"I think you'll be a good student.\" We kissed again and I felt her rubbing my cock through my slacks. I was about to burst from my excitement.\n\n\"My, you're in terrible shape here. I should take care of this for you. Lay back,\" she said as she continued to rub me. I felt her undo my belt and then my slacks.\n\n\"You always go without underwear,\" she asked.\n\n\"Yes,\" I replied.\n\n\"That's good to know.\" She reached in my pants and I felt her grab my cock. She looked at me and smiled. \"You're really big!\" She pulled it out and stroked it lightly.\n\n\"Oh, my Michael. It's beautiful. So, big and thick,\" she cooed.\n\n\"You think so?\"\n\n\"Yes. I know so. I haven't seen too many, but this is the biggest,\" she smiled.\n\nI could only smile, as that made me happy beyond belief. I was dying to make love to her, but she had other plans.\n\n\"I'm going to give you a blow job. We'll make love next time,\" she said.\n\nMy face showed my disappointment.\n\n\"Sweetie. It's late. I have a full morning tomorrow and I know you have your work. I want your first time to be really special. Remember what I said about patience,\" she asked.\n\n\"Yes, I remember,\" I said reluctantly.\n\n\"I don't think I'll have any complaints in a few minutes,\" she said. \"Mmmm. I'm going to enjoy this.\"\n\nI watched as she lowered her beautiful face to my cock. Her mouth opened and I gasped as she took about half of my cock in her warm mouth. The feeling was exquisite as her mouth began moving up and down my shaft.\n\n\"Oh, Laura,\" I moaned.\n\n\"Mmmmm,\" she responded. I stared in disbelief as this gorgeous older woman's red lips moved up and down my shaft in a steady rhythm. Each downstroke taking more and more in her throat. I heard her cough just an inch or so from the bottom. Her eyes were watering as she raised back up.\n\n\"You're too thick and I'm out of practice,\" she said quickly before she resumed. I didn't know what it would be like when she was in game shape, but I knew she was about to make me explode. I'd been her mouth less than a minute.\n\n\"Mmmm,\" she moaned. I could only agree. I rubbed her silky, brown hair as she continued to suck and pleasure me. I could feel it coming and fast. I decided to warn her.\n\n\"Laura, I'm going to cum. It feels so good. Oh, Laura,\" I groaned.\n\nHer only response was to increase her pace, sucking the life out of me that much quicker.\n\n\"Oh, Laura,\" I grunted as I felt the first spurt leave my cock. She never missed a beat and kept moving her mouth up and down my shaft. I emptied my balls in her mouth and fell back against her bed. I held her head as she sucked me until I was limp. I finally felt her mouth let go of me and my limp cock flopped against my lower belly. I realized I still had my slacks on. I felt her crawl up my body until she was crouching over me.\n\n\"I'll say you needed that, Michael.\"\n\n\"God, I did.\" I pulled her down on top of me and we kissed. Finally, she broke away.\n\n\"Come on, you need to get going. If you keep kissing me like that, we'll be here all night.\"\n\n\"I wouldn't mind,\" I said.\n\n\"I know you wouldn't and neither would I, but neither of us would be worth much in the morning.\"\n\n\"Okay, you can kick me out,\" I said.\n\n\"You'll be back I promise. You have real potential,\" she said. She gave my cock a quick squeeze.\n\n\"Good. So, do you,\" I laughed.\n\n\"Is that so,\" she asked smiling.\n\n\"Yes, you might work out for some fun this summer.\"\n\n\"I hope so. And remember what I said, earlier,\" she said.\n\n\"Yes, it's just fun,\" I said rolling my eyes.\n\n\"Okay. Now get dressed. I need to run back downstairs.\"\n\nShe got up and walked out of the room. I stood on wobbly legs and got my slacks buttoned. I was just buttoning my shirt when she walked back in, with her dress over one arm. Her right hand was holding something.\n\n\"Here. Take this,\" she said. I held out my hand and she gave me a key.\n\n\"What's this for?\"\n\n\"You never know,\" she smiled. \"Plus, you can let yourself out tonight and I can go take a shower before bed.\"\n\n\"Okay,\" I smiled.\n\n\"Come here,\" she said, her arms outstretched. We hugged and shared a few more moments of passionate kissing. \"Tonight, was wonderful.\"\n\n\"Yes, it was Laura. I hope we have many more nights like this.\"\n\n\"We will. Now go,\" she said. As I turned she gave me a playful swat on the ass.\n\n\"Goodnight.\" I said.\n\n\"Goodnight Michael.\"\n\nI walked downstairs and out the front door, stopping to lock it. When I started my truck, I realized it was almost midnight. I drove home thinking about all that happened. It was like a dream. I looked forward to learning and sharing everything with her. I knew I had to be the luckiest 18-year-old in the world.\n\nI saw Mom's car was parked in the drive. At least she was home, I thought. I found her asleep on the couch, with the TV on. An empty wine glass sat on the coffee table. I tried to wake her, but she wouldn't budge. Finally, I decided to carry her to bed. She was already in comfortable clothes, so after I turned down her bed, I carried her to her room. She stirred as I carried her and she mumbled my Dad's name. I just looked at her and shook my head. I felt so bad that I hadn't been able to help her more. I laid her in bed and covered her up, placing her glasses on her night stand. I turned off the lamp and headed to my own bed. "
    ],
    "authorname": "nosebone",
    "tags": [
        "college",
        "older woman",
        "secret affair",
        "younger man",
        "stockings",
        "lingerie",
        "his first time",
        "milf",
        "male virgin",
        "college virgin"
    ],
    "category": "First Time",
    "url": "https://www.literotica.com/s/lessons-from-days-gone-by-ch-01"
}
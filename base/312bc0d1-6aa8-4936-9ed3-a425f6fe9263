{
    "title": "See Through Me Ch. 16",
    "pages": [
        "Notes from the author:\n\nNo, it's not the last chapter. I keep thinking this will be it, but I can't bring myself to cut things short, nor can I bring myself to wait for another month just to add one or two more pages for those who like longer chapters. Some readers may feel that things are becoming monotonous, but if you have ever been in a state of constant conflict--felt the repetitious inner torment and self-questioning that can be associated with love, you will understand why. Life is not a perfect composition. It does not go seamlessly because we plan well and dedicate ourselves to excellence. We are at life's mercy. It is an emotional roller coaster in which we torture ourselves beyond what is necessary. And that is what I am going for. This is yet another chapter without closure, so if you want to wait until the story is complete before diving into another chapter, I totally get it. At least I have been consistent about continuing to post once a month, whereas some of my fave authors will make me wait easily a year between updates. Anyhoos, enjoy and happy holidays to all. I will be bogged down with work the next couple weeks, but with any luck, I should have the conclusion the first week of the new year! --J\n\n*****\n\nChapter 16\n\nI was cold below me, and warm above me. I shifted towards the warmth, and felt it envelop me. The warmth squeezed me, and I sighed in contentment. It felt so nice, and smelled so nice. It smelled like...\n\nI felt a pulsing beneath my hand, on the warmth. The smell, the pulsing, was leading me back. The warmth roamed over me, hands rubbing my back, lips kissing my head. That smell...\n\n\"My babygirl.\" \n\nIt was Joe. Joe was the smell. Joe was the warmth. What were we doing here? I didn't want to open my eyes, but I knew it was Joe. I was exhausted. \n\n\"Just rest baby.\"\n\nThat command was easy enough to obey, and I drifted off to sleep, satisfied and content within the warmth.\n\n--\n\nWhen I came to, Joe was snoozing alongside me and had me wrapped up in his arms. The warmth. I heard his light snore, and smiled. \n\nSitting up a bit, I recognized the sand, the surf, and in the distance, our ship. And it came back to me.\n\nThe lotion. The humiliation. The brazenness. The abyss of pleasure. It must have taken hold of me. And now here I was, spooning with Joe on his towel. I had no memory between the two experiences, but I felt...content. Content yet bewildered. Had it all been a dream?\n\nI looked down at Joe, running my hand gently across his chest. I loved his fur. It was so warm. \n\nLoved.\n\nHow could the word \"love\" even enter my mind? How? I may have been a bit foggy-headed, but I knew that things between us were still questionable at best.\n\nI tried to recall the details of what transpired here. The last thing I remembered was Joe's firm voice commanding me to rub lotion on myself. The voice gave me chills and made me hot between my legs. I looked downward to find my bikini had almost completely disappeared between my pussy lips. Oh God. The whole beach, at least those in closer proximity, had witnessed my brazen act at Joe's behest. But apparently it was of little consequence, since here I was, unscathed. Un-bothered. Un-harassed. No one around except a few surfers in the distance.\n\n\"Joe,\" I stroked his arm, trying to wake him gently. He stirred suddenly, and looked up at me.\n\nThe look on his face was one of recognition and relief. Relief. As if he'd been afraid to wake up and find me gone. Was I imagining this? Fabricating the idea that he truly wanted me? \n\nFor the first time since I'd woken up, I felt discomfort. A pain in my chest at the brief consideration that Joe might not want me. That this was all some magnificent scheme that would unravel abruptly when I confessed my feelings to Joe, only to be met with an uncomfortable look as he explained that this was just for kicks. But looking into his eyes now, I felt that there could be no other explanation for his expression but that he wanted me. Nothing else seemed plausible. \n\nIt wasn't like the look that Scott had given me...a charming grin with a hint of mischief, betraying sexual thoughts. Joe's eyes conveyed something much more significant. Whether it was love was yet to be seen, but I knew that it couldn't be nothing. As conniving and demanding as Joe was, I detected a vulnerability and tenderness beneath. I saw it in him, as I felt it in myself. It couldn't be conjured from nothing, could it?\n\n\"Darling, I could wake up to you every day,\" Joe said softly, reaching for my hand. \n\nAnd for a moment, all feelings of insecurity were vanquished.\n\nJoe tugged me gently back down to him and wrapped his leg around both of mine, pulling me close.\n\nReaching between us to finger my pendant, Joe whispered in a low voice, \"I'm so sorry Kate. God, I'm just sorry.\" \n\nI was stunned by his apology. The look of sadness on Joe's face was so ridiculously foreign. It made my gut twist, so I chose to gaze down at his chest, trailing my hand over his soft fur.\n\n\"Say something Kate, please.\"\n\nShaking my head, I whispered, \"I don't know what to say Joe. What exactly are you sorry for?\"\n\n\"I'm sorry for pushing you too hard. I was caught up in the moment, and it was stupid of me. I fucked up. I feel like I can't control myself around you. But I'm going to try like hell to make sure I never do that to you again.\"\n\nWhat could I say? This blatant display of remorse was totally unlike Joe. \n\n\"Okay,\" I whispered.\n\nJoe pulled me close and kissed the top of my head. I felt a cold feeling in the pit of my stomach. It was fear. Fear that I was being na\u00efve and stupid. That he would let me go, and I would be cursing myself later for allowing myself to be conned. Allowing myself to fall. I was falling.\n\nThe ocean breeze was picking up a bit, and I shivered against him.\n\n\"I think it's time we got you into that dress,\" Joe mused. \"Or did you just want to get back to the ship?\"\n\n\"What were the other options?\" I asked cautiously.\n\n\"Well I was thinking of this bar up the beach. We could get something to drink, maybe some appetizers. Then dinner on the ship?\"\n\nGeez, he sure was talking like we were a couple. I chanced a glance up into Joe's eyes. He looked sincere.\n\n\"Okay,\" I agreed softly.\n\n\"Okay? To which?\" Joe frowned.\n\n\"Drinks...and then head back to the ship,\" I replied.\n\n\"Mmm, sounds good,\" Joe kissed my head again before helping me up and quickly wrapping me in the towel.\n\n\"I saw some changing tents near the parking lot. Let's head over there,\" Joe directed.\n\nI nodded. Anything to get out of this measly excuse for a bathing suit. The finer details of my production today on the beach were starting to come back to me, and I willed the crude thoughts away as we trudged across the dunes.\n\n\"You change baby. I'll be right here standing guard,\" Joe winked.\n\nI smirked at him. \"Gee, thanks.\"\n\nJoe's eyes narrowed, but he grinned. \"Be quick pet, or I'll be forced to come and assist you.\"\n\nI turned away from him before he could see my own naughty grin.\n\nIt took a while, and I heard Joe clear his throat a couple times, but he didn't come inside. Between the skimpy, sinfully tight dress and my Joe-approved scarf, I felt slightly more at ease, and I hurried out to meet Joe.\n\nHe cast a devilish grin at me, his eyes raking over my form, every inch of my flesh straining against the thin white fabric. It was a grotesquely tight-fitting garment, but a noticeable improvement from the virtually invisible bikini I was thrilled to abandon. I blushed as Joe took my hand to accompany me down the beach. \n\n--\n\nThe awkward silence continued, and I pondered whether things could ever be normal between us--if we could ever talk like normal human beings. Like a normal couple.\n\nWe arrived relatively quickly at the small tiki bar. It was charming and quiet. There were only a few other couples there, and I was grateful for the mellow and calm atmosphere.\n\n\"What can I get you?\" the waiter prompted, smiling.\n\n\"Kate?\" Joe nodded to me.\n\n\"I'll have a Jack and Coke please,\" I replied. It was one of the few cocktails I could tolerate, and I needed something to ease the persistent tension between us.\n\n\"Same,\" Joe added. \n\nWe sat in silence, Joe staring at me, me staring at the checkered plastic tablecloth. It wasn't until he took my hand in his warm one that I looked up.\n\n\"I'd ask what's wrong, but I have an idea,\" Joe sighed. \n\n\"This is new for me too Kate. I'm sorry for all that's happened the past few days, and yet, I'm not sorry at all.\"\n\nI listened as he echoed my own secret musings.\n\nHe continued, \"All I can say at this point is that I just like being with you. I didn't like it when you kept leaving, even just to see your friend. I've never cared before.\"\n\n\"And I've never tolerated outrageous shit before,\" I muttered, before I could think better of it.\n\nJoe laughed, surprising me.\n\n\"You're right. This is outrageous shit.\"\n\n\"Then how come you keep doing it?\" I pressed, confused, and yet understanding with complete clarity beneath the surface. \n\nI knew why I kept doing it. Because I wanted it. I'd always wanted it. There was something seriously wrong with me. Signals were misfiring in my brain, but I didn't care enough to stop.\n\n\"Because I don't care enough to stop. I want you,\" Joe answered, voicing my thoughts once again.\n\nI knew it was time to ask him the question that had been burning on my tongue ever since that second night, when I realized what he truly wanted. I didn't want to anger him, but it was time to cut the shit.\n\n\"What about the baby you've probably fucked into me by now?\" I whispered across the table. \"What about the poor innocent kid that will grow up without a father?\"\n\nJoe's gaze sharpened, he narrowed his eyes, his jaw clenched.\n\n\"Kate, I will take care of you. And our child.\"\n\nMy heart melted at his words, but I pressed on.\n\n\"And what about my life? What about the life you have completely flipped onto its ass?\"\n\nJoe frowned at the table and shook his head, fists clenched. Anyone encountering him this way in a dark alley would not have to think twice before running away. For the first time in our fucked up relationship, Joe seemed genuinely unnerved. Could it be that calm cool and collected Joe did not have a master plan?\n\nI had barely a chance to appreciate his twisted features before Joe reigned in his anger. But the neutral expression he assumed was no less severe, and it made me tingle.\n\n\"Tell me about that life Kate,\" Joe pressed, his voice dripping with condescension. \"Tell me about the life I flipped on its ass. What is it you'll be missing exactly? I've been trying to understand who you are, what you like, and what you aspire to, but you either refuse to share those things with me, or you believe you have nothing to share. So tell me, which is it?\"\n\nI was furious that he was attempting, and very nearly succeeding, to pick me apart. To make me crumble and confess the truth to him. The truth he did not deserve.\n\n\"I don't believe I owe you anything Joe. Least of all details about my personal life and aspirations. You have exercised your power over my body, but maybe I'm trying to keep control of the one thing I have left to myself! Did that not occur to you?\" I challenged.\n\n\"Here we are!\" the waiter announced cheerfully, producing our drinks. \"You would like anything to munch on? Chips, or maybe our shrimp cocktail?\"\n\nThe man was so nice, I couldn't help but offer half a smile. Especially with Joe a chair away, looking forbidding to say the least, almost ignorant to his presence. \n\n\"Chips would be great,\" I replied, Joe sitting there like stone.\n\n\"No problem! I'll be back in a moment with chips!\" the waiter was off like a shot. I had to give him kudos for not letting Joe impact his enthusiasm.\n\nI chanced another glance at Joe. He was fuming. I knew I was already pushing him, and despite my desire to put him in his place, I decided to give him some time to breathe.\n\n\"Maybe we shouldn't discuss this here,\" I said softly.\n\n\"Agreed,\" Joe conceded, his expression still grim.\n\nI'd begun playing with my napkin when I saw a vaguely familiar lady with wavy hair approach our table, her husband or boyfriend in tow.\n\n\"Hey!\" she greeted cheerfully.\n\n\"Umm, hey?\" I replied, not sure what to make of her and her companion, who was standing off to the side looking apprehensive.\n\nJoe and I exchanged glances, he apparently also surprised by the lady's sudden approach.\n\n\"Sorry for the intrusion...I just wanted to tell you how beautiful you were today. Your exhibition was inspiring. So passionate and bold! We just wanted to thank you.\"\n\nI looked over at her husband briefly, who nodded slowly in affirmation.\n\nI was stunned, nearly robbed of speech from embarrassment.\n\n\"It...it wasn't exactly planned. But thank you,\" I mumbled, my eyes once again glued to the tablecloth.\n\n\"No, thank you!\" she laughed. \"Anyway, have a nice night you two,\" the odd wavy-haired lady winked and hurried away with her companion. \n\nI frowned and shook my head, disbelieving of this whole scenario, especially the lady who seemed to genuinely admire my \"exhibition\".\n\n\"See baby? You are beautiful and fucking sexy,\" Joe rumbled, the sparkle of lust in his eyes mingling deliciously with his agitation.\n\n\"Joe, you forced me to go out there,\" I scolded.\n\n\"I did. And I'm sorry. Believe that, if nothing else,\" said Joe, his features softening slightly. \"But she's right Kate. You were captivating. Out there on the sand, you glowed like fucking Aphrodite. I swear most of those men wanted you like nothing else. Myself included,\" he whispered, his hand roaming over my thigh beneath the table. \n\nHis hand was firm. I dared not attempt to remove it. Both because I doubted my ability to overpower him, and because I loved the feeling.\n\n\"Here you are!\" our waiter declared, arriving with the chips.\n\nThe bowl was huge. The chips looked fresh and hot, and appetizing enough to momentarily distract from Joe's firm grip on my leg.\n\n\"Can I get you anything else?\" he offered.\n\n\"Another round of drinks, and we should be good,\" Joe piped up.\n\n\"Yes, for sure, for sure!\"\n\nMoments later, we had our second round waiting, and were chowing down on chips and salsa. Joe had released my thigh for the moment. Maybe I just needed to keep food in front of us. His hold always seemed to loosen when we ate together...at least his physical hold. His mental hold on me seemed ever-present. \n\nGod the chips were good. I groaned in satisfaction, immersing myself in the pleasure of the warm oily chips crumbling in my mouth, the salty, crispy indulgence one of my absolute favorites.\n\n\"Someday you'll do that with my cock buried inside of you.\"\n\nI startled, my eyes snapping open at Joe. I couldn't believe he would say that aloud, here in a restaurant. But then, I shouldn't have been at all surprised. \n\n\"I'm not going to debate that here in a public restaurant Joe,\" I admonished softly.\n\n\"You can't debate that at all. As God as my witness, I will put that look of pure satisfaction on your face. Not a trace of distress or regret will be left.\"\n\n\"That would be quite something,\" I dismissed, secretly enjoying his hands gripping the table as he looked at me.\n\n\"Indeed it will be,\" Joe whispered, grabbing another chip for himself and delving it into the salsa.\n\n\"I love fresh tortilla chips, especially with salsa, but I tend to fill up on them,\" I admitted through a mouthful, sitting back in my chair.\n\n\"If it puts that look on your face Kate, then by all means, fuck dinner,\" Joe grinned.\n\n\"Whatever Joe,\" I said blankly, finishing off my first cocktail, and moving on to my second.\n\n\"You're sassing me again,\" Joe warned, making me look up at him. \"Don't you know I enjoy it when you sass?\"\n\n\"Why? Because it gives you a poor excuse to punish me?\" I teased.\n\n\"Correct,\" Joe answered plainly, his eyes lowering to my cleavage, peeling away the minimal covering with his penetrating gaze.\n\nHe needn't have yelled, or threatened, or even touched me. He needn't have done anything more than look at me to make me quiver, inside and out. I could see the torrid and demented thoughts running through his head, and they synced with my own. \n\nWhy did I have to meet Joe? Why did he have to do this? Why did he have to give me what I'd assumed would never be? Why did he have to show me how good my fantasy really was, and how I could never be satisfied with anything less?\n\nBefore this cruise, I'd thought it a hopeless and borderline psychotic prospect that I could keep concealed in the deepest recesses of my soul. No one needed to know. I could remain the good girl, the innocent and sweet good girl. \n\nI would meet a nice man who would court me, marry me, and build a family with me. We'd go camping, enjoy Disney vacations, and run ourselves ragged with diapers, dance recitals, and soccer practices. We'd live happily ever after. That was the plan. But the miniature Dr. Phil in my brain was asking, \"How's that working for you?\"\n\nIt wasn't. \n\n\"What are you thinking now Darling?\" Joe asked slyly. \"Or will you hide that from me as well?\"\n\nCollecting myself, I cast Joe a sharp look, and as luck would have it, something new and more urgent came to the forefront of my mind.\n\n\"I have to pee,\" I declared flatly.\n\nAs always, I couldn't hold my liquor. \n\n\"Oh good,\" Joe drawled. \"Shall I join you?\"\n\n\"No! Joe, just stay there,\" I hissed, rising from the table.\n\n\"Think of me,\" Joe purred, his finger grazing my arm on my way past.\n\nThere was no way I would not be thinking of him. That much was certain. The bastard.\n\nLooking around, I spotted a dark hall in the far corner of the restaurant that must have led to the restrooms. My bladder was starting to yell at me, so I moved quickly. The lighting was very poor, and I had to watch my step on the uneven tile floor. I headed to the back of the dim hallway and into the ladies room, intent on making this quick.\n\nFor a beachside tiki bar, the bathroom wasn't in the worst shape. Thank goodness. As I sat down more gingerly than usual, I thought of Joe. As he'd commanded me to. \n\nWhy had I chosen to obey such a ludicrous order? I hated him, and yet I obeyed him. It blew my mind. Every single time.\n\nI closed my eyes, and released my stream. The act itself was not arousing per se. But as I pictured Joe standing over me with his sexy piercing gaze, I felt myself clench at nothingness. I recalled his aggressive assault on my mouth only hours ago as I peed. I recalled his hands gripping my hair as he fucked my throat and called me harsh names. I recalled the look of complete sexual domination in his eyes when he slowly pulled his cock free of my lips, and growled, \"Taste my cum Kate. Savor it. Love it.\" \n\nLicking my lips, I could still taste his salty cum in my mouth. I could feel it nearly spilling out as I struggled not to swallow. My cunt clenched, and I ached for Joe to fill me. Fill my mouth. Fill my pussy. Fill all of me. \n\nI had long since finished, but my pussy was tingling, my nipples hard as ever, and I had to remind myself to breathe. I swallowed the extra saliva that had collected during my brief retreat from the present, and flushed the toilet. \n\nI'd washed my hands and was doing my best to open the door without touching the handle, when I was forced back into the tight space by a dark figure. My first instinct told me it was Joe, but as aggressively taboo as Joe was, something seemed off. The man shoved me back quickly, and turned to lock the door behind us. \n\n\"Scott!\" I gasped as he came into the light.\n\n\"Yeah Kate, it's me,\" he affirmed. His voice was familiar but now had a dark threatening edge to it.\n\n\"What the fuck Scott?\" I scolded. \"What are you doing here?\"\n\n\"If anyone should be doing the explaining Kate, it is you,\" Scott countered, moving closer to me.",
        "I felt inevitable butterflies at his approach. His movements were so similar to Joe's. But Scott's eyes were cold, devoid of any emotion or compassion. The handsome flirtatious Nike rep was gone. In his place, a dark and sinister stranger. And I actually felt...fear. Genuine fear. \n\n\"Scott please get out,\" I pleaded gently. \"You can't be in here.\" \n\nA weak argument at best, but it was all I could manage.\n\n\"What? Are you shy?\" Scott mocked. \"From what I understand, you are nothing more than a whore. A lying, manipulative, tease of a whore. You had me completely fooled.\"\n\nScott was so close now. I could feel his breath on my face, his masculine musk bombarding my senses.\n\n\"I saw you on the beach today, putting yourself on display like fucking gutter trash. Your Daddy was right about you,\" Scott hissed, closing the small distance between us. \"But I suppose it's just as well. You are looking delicious, and your little show on the beach still has me hard as fuck.\" \n\n\"Scott please,\" I whimpered. In the dark I saw his heated eyes promising nothing but torment. I didn't want to anger him further, but I needed to get out of here.\n\n\"Don't worry baby, I'll be quick. You can run back to Daddy afterward. I'm gonna take what should have been mine to begin with.\"\n\nAnd with that final declaration, Scott grabbed my wrists and crushed his lips to mine.\n\n\"Mmmmm!!\" I squealed into his mouth before he forced his tongue between my lips.\n\nI struggled against him, my body aflame with passion while my mind prayed for salvation. There was bitterness in Scott's kiss. It was punishing and cruel. \n\nScott growled into my mouth and secured both my wrists in one hand above my head.\n\nRipping my mouth from his, I cried, \"Scott stop, please! You don't understand!\"\n\n\"Shut it bitch!\" he spat. \n\nI winced as he grabbed my breast with his free hand, his sharp nails digging into my sensitive flesh. As Scott twisted my breast harshly, I felt pain radiating through me. The wrong kind of pain. \n\n\"Owwwfuck!!\" I hissed before he conquered my mouth again.\n\n\"Mmmhhh,\" Scott moaned, kneeing my legs apart.\n\nI squirmed in retaliation, trying to throw him off of me with my hips.\n\nPulling away, Scott chided, \"Look at you, you little minx. You fucking want it!\" \n\n\"No! Fuck you! Let me go!\" I demanded.\n\n\"Not a chance sweetheart,\" Scott snickered. \"I'm gonna fuck this pussy.\"\n\nScott consumed my mouth yet again, and through the buzzing in my ears, I heard the jangle of a belt buckle.\n\n\"Mmmmm!!\" I screeched. My lips were starting to bruise under his aggressive kiss, and my wrists ached. I could barely feel my hands. \n\nThis was rape. THIS was rape. Scott, the dashing gentleman from the bar, was raping me. The chiseled, hard, fit body I had admired was heavy and cold against me.\n\nScott's free hand scraped at my thigh, hastily attempting to shove my dress up my legs. For once, I was thankful it was so tight, as it was obviously causing him trouble.\n\n\"Bitch, hold still!\" Scott barked, releasing my mouth.\n\nThis was it. This was it. THIS was what it was like. I felt the distant and shameful tingling between my legs, but it was terror that dominated me now. \n\n\"Nooo!\" I cried.\n\nScott had finally managed to wrench my dress up to my hips.\n\n\"Shut up whore. I'm going to make this pussy mine!\" Scott hissed into my face.\n\nMy mind was awash with fear and conflict. Joe had raped me. And now Scott was raping me. So why was it that the one thing I could think of was Joe? Where was he? Would he save me? How wrong was it, that I wanted that son-of-a-bitch to save me?\n\nReal tears began spilling over my cheeks. This was my fault. I was sick. I had wanted this, apparently all my life. So why did I now feel nauseated at the thought of Scott's impending penetration of my body?\n\nI felt Scott's warm shaft slap against my thigh as it popped from his fly, causing my sobs to ring louder through the air. I knew my body would soon betray me, again.\n\nAs I waited for him to force his way into me, a huge bang shocked both of us. Before I knew what was happening, Scott's weight was off me, and I fell to the floor. Joe.\n\n\"Fuck! What the hell??\" Scott cursed.\n\n\"Stay here,\" Joe growled, I presumed at me, because in a flash, he and Scott were gone.\n\n---\n\nI very nearly went after her as she hurried off to relieve herself. That tight white dress was truly sinful, and made her shapely ass all the more glorious.\n\nThat ass of hers...mmmm. I thought back to that first night in the elevator, admiring her perfect rounded globes as she fidgeted in front of me. I had to have her one last time, if for no other reason than to grip that ass in my hands. Grip it, maul it, spank it, claim it until she brought me to release with her screams and the clench of her tight channel.\n\nIt was then I noticed how hard I was beneath the table. I had to calm down. Well, I didn't have to, but I was having a difficult enough time controlling myself around Kate when I wasn't rock hard. When I was...\n\nI took a swift gulp of Jack and called the waiter to bring us some water.\n\nI was halfway through my water when I noticed Kate still was not back. I grinned as I considered that she may have taken my command to \"Think of me\" a bit too seriously. Perhaps she was on the toilet fingering herself silly, panting, imagining my cock hitting the back of her throat, her abundant pussy juices dripping steadily into the bowl. What a deliciously wicked image. \n\nDammit, I couldn't think like that. But what else could she be doing?\n\nMy cocky smirk was sobered instantly when I realized that she had been gone long enough to possibly sneak out without me noticing. Was there a rear exit? \n\nShit.\n\nI was being paranoid. Women take longer in the bathroom. Every guy knows that. I would give her another five minutes before I worried.\n\nStaring at my watch during that five minutes was torture. I was worried already, but I wanted to give Kate the benefit of the doubt, as I had this morning. She had come back after breakfast with her friend. But I had upset her this evening with my digging. Perhaps it was all she needed to get up the nerve to run.\n\nI cursed myself as I pushed my chair away from the table one minute early. She undid me. I just couldn't risk waiting another minute. \n\nSignaling for the check, I headed towards the hallway Kate had disappeared into. I frowned as I noticed how dark it was. But the hair stood on the back of my neck when I heard her muffled shriek. \n\nI bolted to the ladies room entrance and kicked the fucking door in. \n\nA man had Kate against the far wall, and his belt was loose. I saw red.\n\nLunging forward, I grabbed him by his hair and shirt, wrenching him away from Kate.\n\n\"Fuck! What the hell??\" the man yelled.\n\n\"Stay here,\" I commanded Kate. \n\nShe had slipped to the floor and looked very shaken up. Tears shone on her face. I would need to make quick work of this asshole. Quick work.\n\nI dragged the fucker into the men's room, shoving him toward the wall before I locked the door.\n\nI needed to end the fucker. Blinking away the red, I realized that the man looked familiar. Holy shit. It was...Scott. I think. Pretty Boy.\n\nBefore he could orient himself, I moved on him quickly, grabbing him by the throat.\n\n\"You're the little shit that tried to move in on my woman. Apparently you were still trying to move in. Well let me assure you, you will not be moving easily for a while.\"\n\n\"Jjssshhh!\" was the only noise he could emit with my grip on his windpipe, but his eyes said it all.\n\nI leaned in closer, my words clipped.\n\n\"Listen up you little shit. I would love to kill you right now. I. Would. Love. It. But I haven't the time to make it look like much of an accident. So I'm going to issue a warning. She is mine. If you do happen to make it back to the ship, just know that if I see you, the last thing you ever see will be blue.\"\n\nScott's face was turning red, probably a combination of fury and lack of oxygen. His eyes burned with a vengeance. I wanted so badly to kill him. So badly. But every second I wasted on this fucker was a second I could not attend to Kate. \n\nWith that thought, I swiftly twisted his head to the side, the impact against the wall knocking him unconscious. He fell to the floor with a thud, his fly still hanging open. Shaking my head in disgust, I pulled his wallet from the pocket of his shorts. \n\nMaking quick note of the address on his driver's license, I swiped one of his business cards for safekeeping. I would send it to my P.I. as soon as I got back to Chicago. Scott had seen my face, and there was the risk that he might try to press assault charges later. If he tried anything, anything at all, I would make the necessary calls and he would regret it. He was in deep enough as it was.\n\nSatisfied that he would be out long enough for us to get back to the ship without issue, I rushed back to Kate.\n\nKate was still slumped on the tile floor, her face stricken.\n\nHer eyes were swollen from tears, her skirt had been shoved up her thighs, and her leg had a cut that was bleeding. As I knelt down before her, I saw that her lip was also swollen and bleeding.\n\nThe fucker. He would pay. I desperately wanted to drown his ass in the toilet, but Kate needed me now.\n\n\"Darling, I'm here now. Are you okay?\" I asked gently, wiping the tears from her cheeks.\n\nKate was silent. My stomach turned as I took in her traumatized expression.\n\n\"Baby it's okay now. I'm gonna take care of you.\"\n\nShe had this vacant stare that froze the blood in my veins. Shaking my head, I crouched and lifted her up. We had to hurry out of here before people started asking questions.\n\n\"Come on baby,\" was the last order I issued as we proceeded back through the bar. \n\nI set her gently on a chair before flagging our waiter and forking over a few hundred for his discretion. Thankfully, there were multiple cabs waiting in the parking lot.\n\n\"The pier please, and hurry,\" I prompted the driver, who nodded.\n\n--\n\nI had spent most of the ride back to the ship quietly seething over Scott's attempt to rape Kate. I held Kate's hand in an attempt to comfort her, to show her I was here to protect her, but she remained cold and distant. \n\nWhat the hell was I going to do? Explain to a woman I had raped that I was the only one allowed to rape her? That I was different from him? That I was better because I actually cared about her? \n\nOur situation was more twisted than ever. I regretted the day we came into contact. The day her innocence and vulnerability had snatched my heart, and my desire. I wanted to wipe the slate clean. But as I looked at her, staring out the window at the shoreline, I saw the happy times we could have. The laughs and tears. The first Christmas with our baby. My insides warmed, and I inadvertently squeezed her hand. \n\nThe elevator ride to our suite was just as uncomfortable. This was the first time we had ridden together without sexual tension. It was a different kind of tension, and much less pleasant. I knew that Kate had been through a traumatic experience, traumatic experiences rather, and needed comfort now. And while I was perfectly willing to provide that comfort, I doubted if I was really the one she needed.\n\nI guided her into the suite, and proceeded straight to the bathroom to draw a warm bath. I cursed softly when I couldn't find any bubble bath. Weren't these fucking places supposed to have bubble bath? Not that I indulged in such things, but I imagined Kate probably would, and I wanted to give her that. Whatever.\n\nTesting the water temperature, I turned to Kate, who stood waiting in the doorway staring at the floor.\n\nI approached her slowly, drawing her inside to disrobe. The scarf and sandals were easy enough, but I found that the dress was indeed too tight to remove with any degree of ease. Knowing that this dress would probably do little more than act as a symbol of today's incident, I quickly tore the material, making quick work of freeing her from the restrictive garment. I had so loved the way she looked in it, but even I had to admit, this was not how I wanted it to be.\n\nShe startled as I ripped away the fabric, but continued to stare at the floor. \n\nI however, was focused on her skin. Experiencing a fury I had never known.\n\nKate had bruises on her left breast, the cut on her thigh, the drying blood on her lip, some bruising on her wrists, and to put the icing on the cake, my mark on the right side of her neck. I was enraged. And wracked with guilt.\n\nIt was really for the best that Kate's eyes were elsewhere, or she may have fled from my no doubt murderous expression. Doing my best to smooth my features, I undressed as well and got into the bath, helping her in after me.\n\nI lathered her gently, slowly, seeking more to soothe her than to wash her. I wanted to give her peace, respite from the horror of this afternoon. Really, the horror of this whole fucked up voyage. I wanted that for her. But I knew what that ultimately meant, and it had my stomach in knots. Tomorrow morning. Tomorrow I would let her go. But tonight she needed me, if for nothing else but a warm body to enfold her and absorb her tears.\n\nOnce Kate was all dry, I wrapped her in a robe and guided her to sit on the bed. I opened my suitcase, and reached into one of the inside compartments for my first aid kit. I always kept at least the essentials with me for liability reasons.\n\nI started with the cut on her leg, disinfecting it and coating it heavily with antibiotic ointment before applying a bandage. \n\nFor the first time in hours, Kate's eyes flew to mine as I moved her hair to the side, and treated my own mark with ointment.\n\n\"Why are you doing this?\" Kate asked softly. She seemed genuinely confused that I would treat not only her wounds from Scott, but the mark I had given her as well.\n\n\"Because I want to,\" I answered plainly. It was the truth, as cut and dried as I could make it. \n\nI applied a tiny bit of ointment to her lip. The damage there was not significant, but I wanted to be diligent in my care of her. While I could.\n\nThe rest of the evening passed in almost complete silence. I ordered dinner for us, and some cold compresses for Kate's wrists while we watched another bland chick flick.\n\nAs I pulled her closer to me under the covers, kissing the top of her head, my heart ached. My mind swam with hopeless dreams and harsh realities. The dreams of Kate's belly rounded with our babe. The reality that my life was a complex puzzle of strict boundaries and murky shadows. What could I do?\n\nI closed my eyes, banishing the dark thoughts, and held her tighter to me, enjoying her peaceful sigh tickling my chest. Once I heard her tell-tale whisper like snore, I relaxed and waited for sleep to claim me as well.\n\nTomorrow. Tomorrow I would let her go.\n\n----\n\nTo be continued..."
    ],
    "authorname": "joodle",
    "tags": [
        "non consent",
        "bdsm",
        "impregnation",
        "non-con",
        "noncon"
    ],
    "category": "NonConsent/Reluctance",
    "url": "https://www.literotica.com/s/see-through-me-ch-16"
}
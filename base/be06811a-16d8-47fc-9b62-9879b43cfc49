{
    "title": "A Ring Named Ezzie Pt. 03",
    "pages": [
        "I want to Thank you all for the great reviews and comments on Part 1. i have a good general outline of where the story is going, but i love hearing the readers thoughts. as always reviews, comments or questions are always welcomed\n\n**********************\n\nNext thing I know I am waking up to sunshine and no Karen in bed. I panic just a tad.\n\n\"Ben, she is out on the deck having coffee. She didn't want to wake you.\" Says Ezzie.\n\nNow that she says it, I smell the coffee. I get up and throw on a pair of shorts and a tee shirt. I make it to the kitchen and pour myself a cup of coffee in the biggest mug I can find, and walk out onto the deck.\n\nKaren hears the slider and turns to me. \"Good morning.\" She says.\n\n\"Good morning.\" I take a seat beside her on the wicker couch on the deck. She has on a pair of the shorts and tank top I got her. The tank top hugs her perfectly.\n\nKaren leans over and kisses me. \"So I guess your ring works.\"\n\nI am hoping she just means the lucky part. \"Did you ever doubt me?\" I say with a smile.\n\nShe gives me a big smile. \"I will never doubt you again. I definitely feel lucky after last night.\"\n\n\"It was really weird though. I know we were all alone, but I could have sworn I heard a woman moan as I was riding you.\" Karen says.\n\n\"Must have been an animal or something in the woods.\" I say.\n\n\"Or I was just delirious from cumming so hard.\" She giggles. \"Oh and by the way. I know I told you harder, and in the moment it did feel good. In the future, try to go easy.\" She rubs her boobs through her shirt. \"I won't say they hurt, but I definitely know you were rough last night.\n\n\"Oh shit! Karen, I am so Sorry.\" I say upset.\n\nShe runs her hand on my cheek. \"It's ok Ben. I know you didn't mean to and I egged you on.\"\n\nI put my coffee down and turn to her with a smile. \"Maybe I could kiss them and make them better?\" I say as I reach out and run my fingers over her nipples. She smiles and sighs.\n\nWell it's not a no. I pull up her shirt and as gently as I can I kiss and lick her nipples. Karen lets out a deep sigh. I know she likes this.\n\nShe puts her hands on my head and pushes me away with a sigh. \"I can't Ben. I am sore all over. I Loved every minute of it, but you killed me last night.\"\n\nI am horrified that I hurt her. \"I am so sorry!\"\n\nShe holds my face in her hands. \"NO, Ben! Don't you dare feel bad. I LOVED IT ALL! It's like a good workout. The next day you know you pushed it.\"\n\nShe hugs me tight. \"Ben, please don't feel bad.\" She says as she kisses my neck. \"Do you know what the best part of last night was?\"\n\nShe pulls back and looks me in the eyes. I can't even answer. \"When you carried me inside. The way you picked me up and cradled me in your arms. I have never felt more loved in my life.\"\n\nShe bends forward and softly kisses me. \"Now you sit here. Enjoy your coffee and I will cook breakfast.\"\n\n\"I can help.\" I say.\n\nShe smiles. \"Nope, the grill is your thing. Breakfast is mine. Sit!\"\n\nI smile at her. \"Yes ma'am\"\n\nI watch Karen walk in the cabin. Those shorts I got hug her butt just right.\n\nI smile and shake my head. \"Ezzie, I am guessing you were the moaning Karen heard.\"\n\n\"Ben, I tried to be quiet as you asked. I just couldn't. Her emotions were so overwhelming. They overwhelmed me. I couldn't help it. It was like nothing I have ever felt before. It was amazing.\" She says almost rapid fire.\n\n\"I was hoping you might connect with a woman better during sex. I am not mad at you Ezzie. You have been so good to me I wanted to try and do something nice for you. And my options are very limited.\" I think as I sip my coffee.\n\n\"Ben, while Karen had me on her finger I felt All her thoughts and emotions. She truly loves you. When you first slid me on her finger she was a jumble of emotions. First and foremost she said Yes many times over in her head, but she was then concerned your parents would think you were rushing things. I wanted you to know.\" Ezzie tells me.\n\n\"I kind of already knew that Ezzie but Thank you for confirming it. So let me ask you something personal.\"\n\nShe hesitates just a tad. \"I can feel a little concern in her thoughts. Did my plan work? Did you feel better during sex with Karen than you do with me?\"\n\n\"Oh yes Ben. It was the most intense thing I have ever felt since I got trapped in this ring. And to know you did it for me. Thinking of my feelings. I would have to say I guess I feel love for you. I don't know how else to explain it. You have been so kind to me. I am at a loss for words.\n\nI can feel Ezzie being overwhelmed right now. \"Ezzie, you deserve to be treated nicely. You have helped me so much in a short time. It was the only thing I could think of to thank you. Ezzie I am not saying you can't feel love for me, but you were young when this happened to you. You realize I love Karen right. You realize I can't love you like that. I can care a lot for you, but it's just not possible.\"\n\nEzzie is quiet for a moment. \"I realize that Ben. I have known that for a long long time, but in my heart I do care for you and because of your feelings for Karen I can feel. I feel for Karen too. I guess it's my way of telling you how much I appreciate you and your kindness. I have had to serve some very ugly and distasteful men over the years. But I have never had the pleasure of serving someone who was so kind to me.\"\n\nKaren interrupts my thoughts. \"Breakfast is served!\" She has two plates with eggs, a pile of bacon and english muffins.\n\n\"Wow. That all looks delicious.\" I tell Karen. She drops the plates, runs back inside and comes out with two glasses of OJ.\n\nAs we sit there eating breakfast the people next door pull up. We heard them going past us on the road. The crunching gravel under the tires can't be missed.\n\nI look at Karen. \"Well there goes sex in the yard under the stars again.\"\n\nKaren smiles back. \"One night like that is enough in one weekend. I don't think I could make it through a repeat of last night.\"\n\nI laugh. \"So next weekend?\"\n\n\"Shut up.\" She says as she laughs with me. \"I want to lay out for a while in your sexy bikini before our friends show up.\"\n\nI start to smile. She laughs again. \"And I am just fine with tan lines.\"\n\n\"Aawww. Party pooper.\"\n\n\"Do you want my Dad to notice I don't have tan lines when I get home?\" She asks.\n\n\"Um no!\" I answer quickly\n\n\"Ok then. My bikini stays on.\" She says.\n\nI mumble my best Yosemite Sam impression. Sass a frassing..etc. I go into the yard and grab the blanket and backpack.\n\nIt takes me a few tries but I get the blanket rolled and stuffed in the bag. I take the two butt plugs and walk into the cabin to wash them.\n\nKaren comes to the kitchen sink to see what I am doing. \"Are those the toys from last night?\"\n\n\"Yes they are.\" I say as I am soaping up the small one.\n\n\"I never actually saw them. Can I see them?\" She asks.\n\n\"Sure, grab the dish towel.\" I hand her the small one. She dries it and holds it in her hand. While she does that I rinse off the vibrating one I had already washed, and hand it to her.\n\nShe has them both side by side. \"Oh wow. No wonder it felt big.\"\n\n\"I got the small one because it was a small starter size. The other one was thicker than me at its thickest, but about my size at the end that would be lodged in your actual asshole. I wanted you to be ready for when I tried to fuck your ass. The vibrating part was just a plus.\" I tell her.\n\nShe turns and looks at me. \"You really did research this didn't you?\"\n\n\"Yes. I get all sorts of fucked up ads to prove it.\" I tell her.\n\n\"You are always thinking of me aren't you?\" She asked me with a serious look on her face.\n\n\"For a longtime. Yes.\" I answer.\n\nShe leans in and kisses me. \"I Love You!\" She says.\n\nWe are just staring into each other's eyes. \"I have always Loved You.\" I tell her. She wraps her arms around my neck and hugs me.\n\nNot ten seconds later my phone dings. God damn it. She kisses my cheek with a sigh. I turn and grab my phone.\n\n\"Aaawwww fuck.\" I say.\n\n\"What's wrong?\" She asks.\n\n\"Joe got called into work, and won't be up until late tomorrow morning.\"\n\nKaren smiles at me. \"So you get to listen to me and Beth catch up, serve us drinks and cook us dinner.\"\n\n\"Oh Can I?\" I say with fake enthusiasm.\n\nShe comes up to me and hugs me tight. \"I Love You.\" She says.\n\nI just hold her to me. I look down at her and wiggle my eyebrows at her.\n\n\"Go take a cold shower!\" She tells me laughing.\n\nAfter yesterday's sun tan lotion and last nights sex a shower isn't a bad idea. I give her a raspberry, and head into the bathroom to take a shower.\n\nI come out of the bathroom with a towel around my waist and Karen is walking out of the bedroom with a towel around her. She hugs me to her resting her head on my chest. \"I really wanted to join you, but I didn't want to tease you.\" She says as she looks up into my eyes.\n\nI know she is saying she is still feeling last night. I smile at her. \"Tonight?\"\n\nShe kisses my chest. \"Oh definitely tonight.\" She walks around me and into the bathroom.\n\nI sigh and walk into the bedroom to put on a pair of shorts and a tee shirt. I grab a bluetooth speaker I brought along and head down to the chaise lounges by the lake. I turn on some music and lay there and veg out.\n\nI am looking out at the lake and wish it were a better lake for swimming. All around the shoreline the lake is covered in some sort of lily pad type plants for the first 15 feet out. Fine for boating, but sucks to swim in.\n\nI should have asked Mr B to bring his canoe. We could paddle around the lake. Ah well maybe for Labor Day. I get a smile on my face when I think of how I won the weekends from Ray. I can't help but think. \"Thank You Ezzie.\"\n\n\"You are Welcome Ben. Ben look behind you.\"\n\nI turn and look. Karen is walking towards me in the sexy bikini. She smiles and waves when she sees me turn. God she is beautiful. Her hair just flowing freely over her shoulders. She has a bright beautiful smile. Her boobs jiggle just right as she walks towards me with her hips swaying just a bit.\n\nI just stare as she comes towards me. I pick up my phone and take a few pictures.\n\nShe lays back on the chaise. She smiles at me. \"Problem?\"\n\n\"No, no. I thought you would have the other suit on.\" I tell her.\n\n\"I did tell you I would wear it for you. Until Beth gets here, it is just us. Would you prefer I go put on the other one?\"\n\n\"Nope. I am good.\"\n\n\"I thought you might be.\" She says as she starts rubbing in sun tan lotion. I know she is teasing me as she does it. Spreading her legs, holding them up high in the air, rubbing the lotion under the strings and top so she doesn't burn.\n\nShe hands me the bottle. \"Take off your shirt and join me. A few hours of relaxing in the sun won't kill you.\"\n\nThat's exactly what we do. My biggest thrill is rubbing lotion on her back, but it is nice to just relax with her.\n\nIt's an hour or two later when we hear crunching gravel. We look up and a small car pulls into the driveway. Karen gets super excited, screams \"BETH!\" She hops up and runs for the driveway. The only thing I see is the bikini in her ass crack and her butt cheeks flexing and shaking as she runs.\n\nOut of the car steps out I am assuming Beth. I have never actually met her. She is a friend from college. Wait, I know that face. That's who Beth saw in her head at the lake when we were talking about her having sex with a woman.\n\n\"Yes Ben, that is the woman she saw that day.\" Ezzie verifies for me.\n\nI start walking up to the driveway. I can see them now breaking a hug and looking at me.\n\nEzzie tells me. \"They are talking about you. Beth is asking 'Is that him?' Karen is saying yes. Beth thinks you are cute.\"\n\nI am close enough now. Karen bounces to me and wraps her arm around me, while she stands beside me. \"Ben this is my friend Beth, Beth this is Ben.\" Karen says.\n\nI reach out to shake her hand. Beth moves in for the hug. \"God, she talks so much about you I feel like I already know you.\" She gives me a friendly, friend hug.\n\nBeth looks over at Karen. \"Girl that is a teeny weeny bikini.\"\n\nKaren hooks her thumb at me. \"Blame him. He challenged me to find the smallest bikini I could find to wear just for him. You are an hour or so early. I was going to get changed before you arrived.\"\n\n\"No way Karen, you look great.\" Beth says.\n\n\"See I told you!\" I say.\n\nBeth goes to her trunk and pulls out a medium suitcase and a duffle. She looks at Karen. \"Show me to my room so I can get changed and we can get to some serious tanning.\"\n\nThey come back out a few minutes later. Karen is still in her white bikini. Beth is in a more modest one. It's more of a standard bikini with solid bottoms not ones that tie, and a bit of a bigger top.\n\nI really notice Beth is larger up top than Karen. She has to be a C/D cup. A smaller top would have trouble covering her properly.\n\nKaren comes up to me and puts her hand on my chest. \"Do you mind if we have some alone time to have girl talk and catch up.\"\n\nI hold her hands and smile. \"I don't mind. I will put on my headphones and veg out on the deck.\"\n\n\"Oh Thank You Ben.\" She stretches up and kisses me.\n\nThe two of them walk down to the chaise lounges and lay out. I grab a beer, my headphones and I stretch out on a deck chair with Ezzie.\n\n\"So Ezzie tell me how was last night. Did you really feel the difference between me and Karen?\" I ask as my music plays in my ears.\n\n\"Oh my yes Ben. You were right, I did connect better with Karen. Her responses to everything were so much more emotional than yours. I really felt it. I mean it feels good with you. You know that, and have felt my enjoyment as I have yours, but Karen was just Wow.\" Ezzie says.\n\nI laugh in my head. \"I am glad I was able to give you some extra enjoyment, Ezzie. I really am happy for you. We will have to do that for you more often. Can I ask a favor?\"\n\n\"Of course.\"\n\n\"Can you listen in and let me know when they are talking about me or last night. I know they will.\" I ask.\n\n\"They already are Ben.\"\n\n\"Of course.\" I laugh. \"I don't need word for word, but can you fill me in.\"\n\n\"Karen is telling Beth as soft and as loving your first time together was she told her about last night was hard fucking.\"\n\n\"Wait. So she told Beth about our first time in her room already?\" I ask.\n\n\"Yes, the next day. They talk often.\" Ezzie tells me. \"Beth now can't believe you took anal so slow with Karen. All her boyfriends have tried to just ram it in and it hurt. Karen is telling her she has to try it again and do it right.\"\n\nSo Karen is telling her bisexual crush she has to try anal.\n\n\"They are laughing now Beth says Karen's new nickname should be Anal Queen.\" Says Ezzie.\n\nI lay back, drink my beer and rock out. A few minutes later Ezzie tells me they are lying quietly now.\n\nNext thing I know Karen is kissing me trying to wake me up. Mmmm, I like this wake up call. I open my eyes and the two of them are looking down at me. She is sitting on the edge of the couch. I reach out and my hand lands on her hip.\n\nI can see her talking, but I just hear my music. Karen reaches forward and pulls off my headphones. She smiles at me. \"I said hi sleepyhead.\"\n\n\"Hi!\" I say.\n\n\"Sleeping late this morning wasn't enough for you?\" She asks.\n\n\"You did wear me out last night.\" I say.\n\n\"I worn you out? HA!\" Says Karen.\n\nBeth is behind Karen. \"Oh God. TMI! Stop!\" She says laughing.\n\n\"We are hungry and want to go into town to a nice pizza place. We want drinks and pizza.\" Karen tells me.\n\nI look her up and down in her bikini. \"Wearing your bikini?\" I ask.\n\nBeth moans. \"God, all men are pigs.\"\n\nI look over at Beth. \"Hey, I am taking two beautiful women to lunch. Can't I dream for a moment?\"\n\nKaren rubs my chest and giggles. \"You are awake now. We are going to get changed.\"\n\nKaren stands up and I watch both of them walk in. Beth's ass isn't bad either.\n\nWe head into town and Karen directs me to the pizza place. It's more of a bar that sells pizza but it works. We order our food, I get a beer and the girls get the fruity frozen drink special. They slurp down those before the pizza ever comes and we are ordering a second round. Pizza comes and round three is ordered.\n\nBy the time we leave the girls are happy and giggling. They want to walk around the small town center shopping area. They wind up arm in arm, and I am walking behind them.\n\nIt's the standard shops. The girls get tee shirts. They stop by a handmade shop and get matching necklaces. Then we stop outside a bathing suit shop.\n\nI hear Beth giggle to Karen. \"If I get a teeny weeny bikini like yours will Ben buy it for me too?\"\n\nThey both giggle. I speak up. \"I will if you both promise to wear them for me for the rest of the day.\"\n\nThis stops Beth cold. She looks back at me and I just smile. \"Ezzie what's is she thinking?\"\n\n\"She is not sure if she can wear it in front of you.\" Says Ezzie.\n\n\"Ezzie has she thought about Karen sexually?\"\n\n\"Yes she has.\" Ezzie tells me.\n\n\"Ezzie have her do it for Karen. She wants to look sexy for Karen. She knows I will look because I am a guy, but she kind of likes the idea of teasing me too.\" I tell Ezzie\n\nBeth looks at Karen and then me. \"Ok your on.\"\n\nInto the bathing suit shop we go. They look around, and wind up getting a tie dye design. The bottoms tie on the side like Karen's, the top looks bigger but it has more boob to cover. In reality I think it will cover about the same.\n\nKaren sees a cute cover up. She holds it to her and smiles at me. I get closer to her. \"No wearing it this weekend, or you must be naked under it.\"\n\nKaren smiles at me. \"I wouldn't have it any other way.\"\n\nBeth comes over and sees the cover up. \"Oh that's cute.\"\n\nI smile at Karen. \"It's on me if she can follow the same rule.\" I turn and walk to the front of the store.\n\nThe girls come up just a few minutes later. Beth has a small, and I mean like smaller than Olympic divers small Speedo dangling from her finger. \"We have a rule too.\" She says with a smile.\n\nI shrug my shoulders. \"No problem. Fair is fair.\" I take the items to the cashier, and pay for them. The girls are giggling behind me.\n\nWe walk out and the girls see a liquor store. They make a beeline for it. We leave there with two bottles of a frozen mixer, a bottle of booze, a half a dozen pre frozen slushie drinks and 10lbs of ice. It's going to be a fun day.\n\nWe get home and the girls want drinks. I turn away with the box from the liquor store. \"Bikinis first!\"\n\nKaren takes Beth into our room and they close the door. I barely have the stuff put away and the ladies come out of the bedroom.\n\nI love Karen and think she is sexy as hell, but dear god Beth Really fills out the bikini top. Fuck!\n\nKaren comes and hugs me in the kitchen. \"Yes she has bigger boobs than me.\"\n\nI smile at her. \"I hadn't noticed.\"\n\nShe laughs. \"Yeah, good try.\" She holds up the new Speedo. \"Get changed and bring us some drinks please.\" She reaches up and pulls my head down to hers for a kiss. I swear she was trying to steal my soul with the kiss.\n\nShe breaks the kiss and looks into my eyes. I smile at her. \"You do realize I am a guy. I will still look, but it's you I have always wanted.\"\n\nHer look softens. \"It's a good thing I believe you.\" She reaches down between us and squeezes me. My eyes go wide in surprise. She smiles. \"I want you to look good in your new suit.\"\n\nShe pats my chest and she and Beth head outside. I don't even bother going to the bedroom. I strip naked. I toss my shirt and shorts on a kitchen chair and put on the Speedo.\n\nI grab 2 slush mixes each and pour them into big tumblers and grab a beer. I put the drinks down. Karen wants me to fill out the suit. No Problem. I start rubbing myself thinking of the two of them having lesbian sex. In no time I am fully hard. I tuck myself back in the Speedo.",
        "I am about to walk outside when I notice the dish towel from earlier with the butt plugs half wrapped up in it. I peel back the white towel a bit to expose most of the plugs. The dark blue and black rubber stand out against the white towel. Let's see if this gets noticed.\n\nAs I walk outside with the drinks in hand Karen sees me first and her eyes go wide and she smiles. Beth turns and gasps out \"Oh God!\" As she giggles.\n\nKaren looks at me with a big smile. \"Really?\"\n\n\"What, I have two sexy women in bikinis in front of me and you groped me in the kitchen on the way out. What did you expect?\" I say.\n\nBeth laughs. \"Karen, you dirty girl.\" She looks at me and then laughs. \"Or should I say lucky girl.\"\n\nThey both start laughing and tap their plastic tumblers together.\n\n\"Ezzie, I want to egg them on a bit. Can you make them both imagine the three of us having a threesome and tell me what they think.\"\n\n\"Karen, is imagining her and Beth naked side by side with you going back and forth fucking each of them. Beth's thoughts are a little more chaotic. She jumps from kissing Karen, to Karen going down on her and fingering her bum, and then you fucking her in the bum.\" Ezzie says.\n\nHoly Shit! I have to play this right. With any luck I can bring them both to a slow boil and have this naturally happen.\n\n\"Ezzie, has Beth ever had sex with a woman?\"\n\n\"No Ben, but she is still thinking of Karen. She is imagining very vividly sucking on Karen's nipples while her hand rubs her through her bikini bottoms.\" Ezzie says.\n\n\"Wow! Ezzie, can you keep an eye on both of them and let me know if they are having any dirty thoughts?\"\n\n\"Of course Ben.\"\n\nThey ask for another round, which I am happy to get. They then decide they want to go lay out as I bring out the drinks. Beth says she has to use the little girls room.\n\nAs she gets up I get a great idea. Why wait for chance. \"Ezzie, can you make Beth look at the toys on the dish towel as she walks by the sink?\"\n\n\"Of course Ben.\" She says.\n\nI decide to work over Karen a bit. I pull her out of her chair and into my lap. She giggles as I pull her to me. I wrap my arms around her and land my hand over her pussy.\n\n\"Ben!\" She tries to pull my hand away, but I use my other hand and hold hers.\n\n\"So I see you looking at Beth.\" I say.\n\n\"What?\" She says confused and then she gets it. \"No!\" She giggles.\n\nI rub her a tad harder. \"You say No, but your giggle and your blushing says differently.\"\n\nShe moans as I rub her. \"Karen, what have I asked all along about feeling free to tell each other everything?\"\n\nHer eyes are half closed enjoying the sensations I am giving her as I rub her. \"Please be truthful with me Karen. I just want us to be truthful with each other. I will admit the thought of it turns me on, but if you don't think of her that is absolutely fine too.\"\n\n\"Oh god how do you always seem to know. Yes I have thought about Beth. One time when we were drunk coming back from a party, I was horny. I had watched two girls kissing and groping each other to turn on the guys. I watched Beth strip down to her panties and get into bed, and I couldn't stop thinking of us doing what those girls were doing.\" She sighs as she leans her head against me.\n\nI stop rubbing her and hug her to me. She hugs me back and gives a relaxed sigh as I hold her.\n\nI smile inside my mind. Baby steps. I nuzzle Karen's neck. \"Does it feel better to talk about it?\" I ask.\n\nShe looks at me. \"Honestly?\"\n\n\"Of course Honey!\" I say.\n\nShe sighs. \"Between you and my thoughts I am very worked up.\"\n\nI smile at her. \"Really? What thoughts would those be? And worked up for what?\"\n\nShe looks towards the door for Beth, and then back at me. \"Karen, answer me truthfully?\"\n\n\"Would you want to try having sex with Beth? I will be honest, I have seen her peeking at you. I think she would be up for it.\" I say.\n\nKaren's eyes open wide in shock. Her hand goes to her mouth.\n\n\"Karen, I need you to answer me. Would you like to try being alone with Beth? I could go to the store. Or would you want me there?\"\n\nKaren just stares at me. She takes my hand and holds it over her heart. \"I always want you with me.\"\n\nI smile at her \"Karen it thrills me to hear you say that. I want to be clear. If it were to happen, would you want a threesome to happen.\"\n\nKaren just looks at me. \"Ezzie, what is she thinking?\"\n\n\"She is seeing both of them naked in front of you on their knees.\" Ezzie says.\n\n\"Ezzie, give her the courage to say yes and act on her thoughts please.\"\n\n\"It is done. Here comes Beth.\"\n\nJust as Beth walks out. Karen nuzzles into my neck. \"Yes I would like you, me and Beth to have a threesome.\"\n\nShe sits up and smiles at Beth. \"Took you long enough. What else were you doing in there?\" Karen says giggling.\n\nBeth says. \"Eeeewww. In a strange bathroom? Bad enough it might happen in a strange bed tonight.\"\n\nThe two of them start laughing and head back down to the lounges. I let them get settled. As they lay back I start rubbing myself again to get nice and hard. I grab the blanket and my headphones.\n\nI walk down to them and lay the blanket out where it was. They are looking back at me. \"I thought I would get some sun too.\" I lay back my dick tenting in my Speedo, put on my headphones and close my eyes.\n\n\"Ezzie, what are they thinking?\" I ask as I rock out.\n\n\"Beth is wondering if those toys really work and how Karen took you in her bum. Karen is wondering what Beth tastes like.\" Ezzie says.\n\n\"Ezzie, I want you to do two different things for me please. Have Beth ask Karen how she did anal with me. Let Karen get a tad embarrassed by the question and then have her tell her step by step ending with me fucking and cumming in her ass.\"\n\nThere is just a fraction of a heartbeat hesitation and Ezzie says in \"Done.\"\n\n\"Ezzie, can you let me know how Beth reacts to the step by step story? And of course what they both are thinking after that.\" I ask.\n\n\"Of course Ben.\" There is the slightest delay. \"Beth is listening. She can't imagine anal being gentle. She is imagining the three of you together and you are playing with her bum.\"\n\nEzzie pauses for a moment or two. \"Beth is afraid if it ever happened or led to more, Karen would think she is trying to take you away from her.\"\n\nHmm I hadn't thought of that. \"Ezzie, what does Karen think about sharing me with Beth? How would she feel if Beth and I had sex while we had a threesome?\"\n\n\"She loves Beth. She knows Beth has been without a boyfriend for a while. She would like to see you have sex with Beth and make her orgasm. She isn't afraid of Beth stealing you.\" Ezzie says.\n\n\"Ezzie, how does Beth feel? Does she want to have sex with just Karen or Karen and me?\" I ask.\n\n\"Oh Ben, definitely both of you, she is nervous about trying anal.\" She says.\n\n\"Ezzie let them go in together and get fresh drinks. Have them sneak past me so I don't know. While they are fixing the drinks let them both see the toys and talk about how I was so gentle with Karen's ass. When they come back out, have them bring me a beer please.\"\n\n\"Of course Ben.\" Ezzie says\n\nI actually lay back and relax. Before I know it I can feel someone on the blanket. I open my eyes and they are both standing over me. I smile and take off my headphones. \"Man I thought waking up to one beautiful woman beside me was nice, now I have two.\"\n\nKaren laughs. \"Beth, I think he is still dreaming.\"\n\n\"If I were dreaming you two wouldn't be standing there clothed.\" I say.\n\n\"Oh Jesus!\" Says Beth.\n\nKaren screeches my name. \"Benjamin!\"\n\n\"Hey you started it.\" I laugh\n\nKaren nudges me with her foot. \"Scoot over. Beth, let's lay here. This blanket is a whole lot more comfortable for laying face down.\n\nKaren lays next to me. Beth lays next to her. I ask Karen if she needs lotion. She laughs. \"Last time you lotioned my back I wound up topless.\"\n\nBeth giggles.\n\nI quickly say. \"I didn't want you to have tan lines.\"\n\nBeth looks at Karen. \"Well he isn't wrong.\"\n\n\"Oh god!\" Karen sighs.\n\n\"Come on Karen. It's not like we haven't seen each other before.\" Says Beth.\n\nKaren lays flat with her head on her arms. \"Have at it Ben.\"\n\nI straddle Karen's thighs, making sure she can feel me against her. I untie both knots and flip the string off her. I push her hair to the side, and fold the top of her bottoms down. \"I don't want to get lotion on them.\" I say.\n\nI squirt on the lotion. I know Beth is watching. I not only lotion up Karen, but I give her a great neck & back rub too. I give a little bit of a reach down from her ribs to her boobs. Just a tick. After a few minutes and two coats of lotion I announce Karen done.\n\nBeth has a bit of a nervous look on her face. \"Ezzie is she ok?\"\n\n\"She is excited to feel you against her.\" She says.\n\n\"Hhhmm good to know.\"\n\nI move from Karen to Beth. I look up and realize the girls are watching each other. I see Karen mouth the word. \"OK?\"\n\nI see Beth nod her head yes, as I roll her bottoms down a bit. I reach for her arms. She flinches as I touch her arms. She moves them up. She bunches the blanket in her arms for a pillow, and puts her head down. She then makes a strange face.\n\n\"Ezzie, why is Beth making a strange face?\" I ask Ezzie.\n\n\"She is smelling something on the blanket and isn't sure what. Oh wait, she knows what it is.\"\n\nJust as she says that in my head I see Beth smile at Karen.\n\n\"Beth is realizing she is smelling sex smells. She is smelling Karen.\"\n\nWow and she is smiling. I think as I push her hair to the side. I pull on the knot at her neck and push the string off her neck. I reach down to the knot on her back. I untie it and use my hands to push each side off her back. My hands travel almost far enough down her ribs. I feel Beth stiffen a tick.\n\nI am not sure if it was nerves or anticipation so I back off. \"Ezzie, is she nervous excited, or nervous scared?\"\n\n\"Definitely not scared Ben.\" Says Ezzie.\n\nI grab the lotion and pour a line down her spine. She arches her back and gasps at the cold. I look at Karen and she is watching me with an odd look.\n\n\"Ezzie, what is Karen thinking? Is she mad at me?\"\n\n\"She is a little jealous because you stopped, and it felt so good. She is happy because Beth is happy, and she is very turned thinking of where tonight is going.\" Ezzie says.\n\n\"Ezzie correct me if I am wrong, but you are telling me both of these ladies are hot to trot. If I do this right, I could be having a threesome with them, and all I asked you to do is to nudge them to do what they really wanted to.\"\n\n\"Yes Ben. If you would prefer I could just make them want to do it.\"\n\n\"No no Ezzie. I never want to force something like this on Karen. Will you promise to remind me of that if I ever ask you to force Karen to do something?\"\n\n\"Of course I will, Ben.\"\n\nI have been rubbing Beth's neck and shoulders while talking with Ezzie. Beth moans as I start rubbing down her back. I rub from her spine out to the sides, and I let my hands go a little too far. I would swear I heard a small sigh. I do the same move again. This time a tad lower and just a tick slower.\n\nBeth definitely sighed. I look up and Karen is definitely giving me a sexy smile. She is enjoying the show. I stop rubbing and get off Beth's thighs. As I get up I am sure to pivot my hips so she can clearly feel my hardon against her legs.\n\nBeth moans out. \"Nnnooooo. That was so nice.\"\n\nKaren giggles. \"Anything more would require an R rated massage, the neighbors to not be on their deck, and the sun to go down so everyone on the lake can't watch.\"\n\n\"So I can get more later.\" Beth giggles.\n\nI lay back beside Karen and say. \"Ladies, if we are on the blanket after dark. I will rub Any body part not covered by clothing.\"\n\nI lay on the blanket with my eyes closed. I can feel them moving and whispering. I think about asking Ezzie but nah. I am good. I just lay there and try to relax. I am going to have sex with both of these sexy ladies in just a few hours. I just know it.\n\nWe lay out for about another hour. I ask who is hungry. The ladies just want some salad, and another drink. I need food.\n\nI grab a couple of burgers and dogs for myself. While they are cooking I eat a little salad with them and then take the meat off the grill. They had made a new blender full of the premixed stuff and added more booze.\n\nThe have been on the edge all afternoon. They get giggling and then stop drinking. Then a little while later they have more. Now it's getting late enough. I think an extra drink or two will help them.\n\nWe sit on the deck for a bit. They finish off the pitcher and Beth looks at Karen and giggles. \"I have a Great idea.\" She tells Karen.\n\nKaren smiles. \"What?\"\n\nBeth stands up and takes Karen's hand. \"I have to show you. Come on.\"\n\nKaren sighs but let's Beth lead her inside.\n\nHhhmm. This is curious. \"Ezzie, don't tell me what, but am I going to like what they are up to?\"\n\n\"Oh yes Ben. I think you will like it.\" Ezzie tells me.\n\nI sip my beer. I can wait a bit. I lean back and look up at the sky. The sun has set. It is definitely dark. Some clouds are rolling in. I should look at my phone and check the weather.\"\n\nJust then Beth and Karen come walking out the slider without a word. Karen has something in her far hand. I can't see what. They each have some short robe on, and are walking for the blanket. What the hell are they doing? Next thing I know they are almost completely obscured by darkness, but I see the robes get tossed in the air.\n\nOh shit wait. They aren't robes. They are the cover ups I bought earlier. I told them if they were going to wear them they had to be naked!\n\nI almost fall trying to get up so fast. I get to the blanket and they are lying side by side with an arm around each other stark naked.\n\nI am tongue tied. \"Um wow. I mean Hi.\"\n\nKaren laughs. \"Something wrong Ben?\"\n\n\"Wrong? Hell no. I am trying to decide how I got so lucky.\" I say.\n\nKaren grins at me. \"I guess your lucky ring does work.\"\n\n\"I guess it does.\" I say. In my head I am screaming \"THANK YOU EZZIE!\"\n\nI swear Ezzie giggled as she said \"You are Welcome!\"\n\nKaren smiles at me. She points to the opposite corner of the blanket. \"Take a seat Ben.\"\n\nI look to the corner. \"Over there??\"\n\n\"Just for now Ben. Please.\" Says Karen.\n\nI sit in the far corner. I see the girls look at each other and smile. They start talking quietly. I can just barely hear them.\n\nKaren looks at Beth. \"Are we sure?\"\n\nBeth answers. \"I am very sure.\"\n\n\"Me too.\" Says Karen.\n\nBeth asks. \"Honey, are you sure you are ok if something happens with me and Ben? I don't want any of this to ruin Any friendship or relationship.\"\n\nKaren runs her hand along Beth's cheek. \"Honey, you need a man. I am happy to share Ben with you.\" She looks over at me watching them waiting to pounce. She giggles \"l am pretty sure he is ok with it too, and part of me wants to watch.\"\n\n\"And what about us?\" Asks Beth.\n\n\"Honestly Beth, I have thought about this for a long time. I have never wanted to do it with anyone, but you.\" Says Karen.\n\nBeth reaches out and holds Karen's face as she pulls her face forward and kisses her. At first it's a gentle kiss. She pulls back and looks at Karen. Karen reaches up for Beth and pulls her forward to kiss her again. This time it's more opened mouth lips on lips. One pulling the other one's lip into her mouth and letting it go. They then sigh and they start slipping their tongues back and forth into each other's mouth. They moan with almost Every kiss.\n\nKaren slips her hand down to Beth's boobs. First she is just trying to squeeze as much of it into her hand as she can as she squeezes and releases her boob. That changes quickly. Karen reaches down and starts softly pinching and pulling on Beth's hard nipples. Unlike Karen's puffy nipples, Beth's are more the standard darker flesh with a decent sized nipple poking out from the center.\n\nKaren pinches a little too hard for Beth. Beth hisses as she puts her hand over Karen's \"Not too hard. I like it soft.\"\n\nKaren smiles \"Sorry I like it hard.\"\n\nBeth takes Karen's hand and kisses it. \"I will remember that.\"\n\nKaren rolls Beth onto her back. \"Don't even think about it. Just like Ben did to me last night. The first thing tonight for you is Intro to Anal.\" Karen holds up her wiggling fingers. \"First I am going to finger your bum while I distract you with my tongue.\"\n\n\"Oh Fuck.\" Moans Beth.\n\nI speak up softly. \"Beth, do you know what a safe word is?\"\n\n\"Yes.\" She says.\n\n\"If at any time you want, or anyone wants things to stop just say Independence ok. I say.\n\n\"Ok.\" Says Beth.\n\nWhile I was talking Karen had slipped down Beth's body. She is on the blanket between her legs. She drops her head and starts kissing Beth's stomach and thighs.\n\nBeth just sighs. Karen pulls back. She looks closely at Beth's pussy. I can see it from here. While I can't see the fine detail I can see Beth has real fleshy lips.\n\nKaren leans down. She starts up high at her clit and kisses her over and over as she slides down. When she gets to the bottom she runs her tongue up and down three times in a row.\n\nShe crawls back up Beth's body and kisses her deep. \"You are delicious.\"\n\nI hear a soft \"Thank you.\" From Beth.\n\nKaren kisses her way back down her body making a brief pit stop at each nipple. First she kissed it and softly sucked it into her mouth. Beth just sighs as each one gets sucked into Karen's mouth.\n\nKaren gets back between her legs and pulls Beth's legs up, and then pushes them back to Beth's body. \"Hold them up for a bit, Beth. I want to play with your bum.\"\n\nBeth reaches out and holds her legs. \"Oh shit.\" She moans.\n\nKaren laughs. \"Please don't.\"\n\nBeth giggles until Karen's tongue licks her asshole. The giggles are stopped by a gasp.\n\nAs Karen licks Beth her hand reaches out for the back pack, and takes the dish towel the plugs were drying in. She reaches in again and pulls out the lube. She squeezes some on her finger. She stops licking Beth's ass and rubs the lube in and pushes her finger in.\n\nBeth lets out a small surprised gasp as Karen's whole finger slips right in all the way to the hand. After a few back and forths Karen pulls out her finger.\n\nShe reaches for the small plug. Beth has been looking down at Karen watching her. Karen holds up the shiny slippery plug.\n\n\"Honey, you took my fingers no problem. I think you can move to the plugs. Do you remember the safe word?\" Karen asks.\n\nYou can hear in her voice Beth is nervous. \"Independence.\"\n\n\"Ok here we go. Just a little at a time. Back and forth until you take it all. Do you know what happens then?\" Karen asks.\n\nBeth looks nervous. \"No.\"\n\nKaren kisses Beth's thigh. \"I lick you to orgasm.\"\n\nBeth smiles and sighs. \"I can't wait.\"\n\nKaren kisses her thigh again. \"Neither can I.\" Karen lines up and pushes the plug in. About a \u2153 of it pops in.\n\nBeth lets out a surprised. \"Ooohhh.\"\n\nKaren softly pushes in and out. Back in a little more each time. After the fourth push Beth's ass sucks it in and holds it. She lets out a bit of an. \"Ooohhh.\"\n\nKaren kisses Beth's thighs again. She pulls them down out of Beth's hands. As she lays them over her shoulders she looks right at Beth. \"Are you ready to have a woman make you orgasm?\"\n\n\"Oh My God YES. Please Karen, I want it to be you.\"\n\nFrom my vantage point all I see is Karen's head move down. I hear the licking and slurping, and Karen moan out. \"Oh God. That is So Nice.\"\n\nI hear Karen. \"I don't want you to have a nice orgasm. I want it to be Amazing.\"\n\nThe slurping and licking sound's intensify.\n\nFor the most part Beth just lays there. Her hands are rolling her nipples and she is panting and moaning.\n\nKaren never moves her mouth off Beth. She changes from licking to kissing to sucking, but never moves off her pussy.\n\nThis continues for a few minutes. I sit there behind Karen watching her eat out Beth. Between the darkness, and my position behind Karen I can't see the action, but I can certainly hear it.",
        "I can watch Beth's face though. At first it was more of a surprise. Kind of like Oh My God I can't believe this is happening. That then changes to an Oh this feels nice expression.\n\nThat brings us to now. Now there is no doubt Beth is enjoying this. Her face and body are starting to show her enjoyment. I am sure she is getting close to orgasm. Beth reaches out and softly holds Karen's head as she starts to arch her back and hump her hips.\n\n\"Oh God, Karen please don't stop. Please. OH GOD.\" Beth says getting louder.\n\nI hop up pulling off my shirt. I put it over her mouth holding it with my hand. Beth's eyes go wide eyed as she stares at me.\n\n\"Neighbors Beth. You can't be loud.\" I say. She clamps her hand over mine holding the gag to her mouth. She stares at me and screams into my tee shirt as Karen makes her orgasm.\n\nKaren lifts her face away from Beth and her face is wet in Beth's juices. I lean forward and kiss Karen deep. I break the kiss and look at Beth. Her head is rolled back, and she is softly panting enjoying the afterglow of her orgasm.\n\nI call her name. \"Beth\"\n\nShe opens her eyes and looks at me. \"Karen was right, you are delicious. Now after we swap out the small plug for the larger plug, you are going to get to taste Karen's delicious pussy. Are you ready for that?\"\n\nBeth looks at Karen and smiles. \"Am I ready to taste my first woman? Am I ready to taste my BFF's pussy? Oh yes! I will admit I am a little nervous about the other part.\"\n\n\"And you know what happens after you make Karen cum?\" I ask.\n\nBeth looks at me worried. \"You Promise me to be gentle, and stop if I say stop?\"\n\nI don't even get a chance to answer. Karen is crawling up over Beth. \"Beth, you trust me right?\"\n\nBeth takes Karen's face in her hands. \"Of course I do.\"\n\nKaren smiles and kisses her. \"I Promise you he will be kind, gentle and slow. I want you to experience what I did. I want you to know there are nice guys out there. Not like the two losers we dated last year.\"\n\nBeth hugs Karen hard. Obviously Karen wasn't the only one that had her heart broken last year.\n\nKaren slips off Beth to the side. She hooks her arms under Beth's legs and pulls them up. She reaches down and pulls on the plug. Not 15 seconds later it is popping out. Beth lets out the smallest of grunts.\n\nShe stays there rubbing Beth's pussy and ass so softly. She looks at me. \"Ben, give me the lube and the black plug.\"\n\nI hand them over, and Karen holds up the plug for Beth to look at. She puts it down, and squeezes more lube on Beth's ass.\n\nShe puts just the tip in Beth's semi open ass, and starts telling Beth why I got it. \"Beth did you know Ben admitted to me that he stayed up all night one night reviewing how to do anal gently for a woman. He told me he got this plug because it's about the thickness of him at the base.\"\n\nKaren now has it a little more than halfway in Beth's ass. Just nice slow in and out. \"He told me he wanted me to be stretched for him so it wouldn't hurt. This lube we are using. He got it because it numbs things a little to make it easier.\"\n\nBeth is moaning and grunting a bit as the plug is just at the widest spot. Another half an inch and her ass will pull it in. Karen gives it another nudge and Beth gasps as the widest part slips in and her ass grips the base pushing it in. Leaving the base gripped in her asshole.\n\nKaren smiles. \"You did it!\"\n\nBeth smiles and looks at Karen. \"God that feels big in there, but right now I don't care. Right now I am wet with excitement. All I want to do is go down on you.\"\n\nThey pull each other into a loving hug and kiss. This ends in a wet sloppy passionate kiss. Beth breaks the kiss and smiles at Karen as she bends down and sucks a nipple into her mouth.\n\nBeth hisses and gasps out. I know that hiss. Beth hasn't forgotten Karen likes her nipples played with hard. Beth leans into Karen forcing her backwards.\n\nKaren lands against my thighs. I am thinking I will have to move out of the way, until Karen pivots and pulls against me. I see what she is doing. She wants to lay against my legs while Beth goes down on her.\n\nKaren lays her head against my stomach as she lays backwards against me between my legs. Beth is now kissing her way down Karen's body.\n\nKaren laughs as Beth tickles her as she goes. Just like Karen did. Beth kisses above and beside Karen's pussy at first. She is just staring down at Karen. Beth reaches out with her hand and runs her fingers through her pussy lips. Karen lets out a soft moan.\n\nBeth gets to the top of her pussy and feels Karen's clit. \"Oh yours is a little bigger than mine. It is the perfect size to rub.\" She leans forward and softly kissed it. Karen lets out a soft sigh. \"And to kiss.\" She leans back down and licks her. \"And lick.\" She leans back again. \"And to suck on.\" Karen lets out a soft moan.\n\nBeth leans down again, and before Beth can come back up for air. Karen hisses out. \"OH SHIT!\"\n\nBeth looks up at Karen with a big smile. \"I was wondering if you would like it rough on your clit like you do on your nipples.\"\n\nKaren has a big smile on her face. \" Oh you bitch.\"\n\nBeth giggles. \"You know it.\" Beth leans back down and slowly sticks out her tongue and runs it up between Karen's pussy lips.\n\nKaren almost begs. \"Beth please! No more teasing. Lick me, and make me cum.\"\n\nBeth's only answer is to drop her head down into Karen's pussy. She is doing a hell of a job licking, kissing and sucking Karen all over. Karen's ead is resting against me. Her hands are resting on each leg squeezing as Beths licking sends jolts of pleasure through her.\n\nI have the perfect view from here. Karen is resting against me. Her nipples are puffy and hard. Beth has her face pretty much buried in Karen's pussy doing her best to make Karen orgasm. My gaze drifts down Beth's ass. I know she has the big plug in it, and once she makes Karen cum I am going to fuck her ass. Wait, she has the vibrating plug in her ass. PLEASE let the remote be in the bag. I pull the bag to me and reach in. Ah Ha! My hand closes around the remote.\n\nI pull it out and turn to watch Beth. I click it once, putting it on low.\n\nBeth yelps in surprise. Her eyes are wide. \"Seriously? It vibrates?\"\n\nI hold up the remote. \"It serves two purposes. #1 Incentive. The longer it takes you to make Karen cum the fast it gets. #2 It gets you turned on.\"\n\nBeth smiles. \"Karen never said you have an evil streak.\"\n\nKaren reaches for the remote, and clicks the button. \"I am the evil one. I just forgot it was there.\" Beth lets out a small gasp as it jumps to medium. You can tell by Beth's face she likes the feeling, but doesn't argue. She bends back down and keeps licking.\n\nI can see Karen getting close. I know she is going to cum. She is breathing harder, her hips are giving little humps up and down. \"Beth, you are going to make her cum. Keep going, and enjoy the plug.\" I click the remote on high. Beth moans into Karen but never moves her mouth. Karen is squeezing my legs so hard it hurts.\n\nOut of nowhere Karen gets very loud. \"OH. OH...\". I clamp my hand over her mouth. Her eyes pop open and look at me and she screams as she cums. 90% of the scream was muffled by my hand.\n\nBeth looks up from between her legs, and smiles. Her smile lessens when I say. \"Now I get to fuck your ass.\"\n\nKaren lets me roll her over my leg. I sit up and crawl towards Beth. I roll her onto her back and straddle her. The moment of truth is here. Beth looks at me a little wearily. \"Ben, you promise. I say the word and it all stops.\"\n\nKaren answers for me. \"Of course he will Beth, because I am putting him in you.\" We turn to look at her as she is crawling over to us. \"I want to hold him as he pushes inside of you. I promise you need things to stop, they will stop.\"\n\nI put my knees between Beth's legs. She parts them as I kneel between them. I lift her thighs. You can see the black base of the plug blinking, and you can hear it buzzing. Karen grabs the base, clicks off the power and starts pulling. Just a few seconds later it pops out of Beth's ass. Beth lets out a small moan.\n\nKaren wastes no time squeezing lube in her hand, rubbing it on my hardon and point me at Beth's ass. I move forward a tad and the head of my dick slips almost entirely into her open asshole. Karen pulls me forward so I push a little more. About two inches slip in. Karen holds her to my stomach to stop me.\n\nKaren says so softly and sweetly. \"Beth, are you ok? How does it feel?\"\n\n\"Wow, it's certainly different. It doesn't hurt like before. He feels Huge. I know he's not.\" She then giggles and looks at me. \"Sorry Ben!\"\n\n\"Beth it is OK! If I were huge you ladies would never let me near your bums. I am happy with what I have.\" I say.\n\nKaren pushes gently on my ass. Beth sighs and moans as I push all the way in. Beth grabs my hands. \"OH Wow. Don't move. I need a moment.\"\n\nKaren lays down next to Beth. So with a turn of the head they are face to face. \"What do you think Beth, are you ready to have Ben gently fuck your ass?\"\n\nBeth looks her in the eyes. \"Stay here with me?\"\n\n\"Of course sweetie.\" Karen says. Karen looks at me and gives me a small nod. I pull back a little and push back in.\n\nBeth looks at me with her eyes wide. \"Everything ok? Maybe you want to say a special word?\" I ask.\n\n\"No. I am ok. So far so good.\" Beth says.\n\nI take that as a cue to do a little more. I pull about halfway out and push back in slowly. Beth looks at Karen. \"You were right. It does feel different. I feel like it's deep inside me.\"\n\nKaren takes Beth's hand and pulls it down her body. Beth gives her an odd look. \"Finger yourself Beth.\"\n\n\"What?\" Beth laughs.\n\n\"Beth, finger yourself. You will feel him moving inside you.\" Says Karen.\n\nI see Beth's two fingers slip in her pussy. I get so distracted watching. I almost pull all the way out. I push back in giving Beth a full in and out stroke.\n\nBeth moans rather loud. \"Oh god that is full. Please don't stop Ben.\"\n\nI feel her fingers against me inside of her. Her fingers are rubbing against my head just right for a few strokes. Jesus it feels good. I need more though. I want to cum in her ass, but I need to fuck her harder.\n\nKaren must see it on my face. \"Beth, can you take a little more? I think Ben needs it a little harder to cum. If I promise to rub your clit can Ben fuck you a little harder?\"\n\nBeth giggles. \"I was just going to ask him to try it a little harder.\"\n\nI don't bother saying anything. I just start fucking her a little faster and a little harder.\n\n\"Oh Fuck!\" She grunts as I grab her left leg tight against me and start fucking her harder. This turns her a little on her side towards Karen.\n\nBeth is grunting and moaning as I fuck her and Karen rubs her clit. \"UGH. UGH. UGH.\" Her hips are backing against me a bit. She gasps out. \"Faster!\"\n\nI honestly don't know if she means me or Karen, but I start going a little faster. I can't stop now. \"Karen I am going cum in your ass.\" I tell her.\n\nHer leg actually starts trembling in my arms. She starts shrieking out. Karen clamps a hand over her mouth. Her ass squeezes me tight almost like a machine gun, squeeze release, squeeze release. That does it for me. I push into her ass one last time and cum in her ass.\n\nI feel like blast a gallon of cum into her. I am holding tight to her leg as she shivers, and my stomach muscles spasm with each shot of cum.\n\nIt takes a moment, but I release Beth's leg and lay back on the blanket. Karen is quick to move in with the lube.\n\nBeth sees Karen lube her fingers. Breathlessly she says. \"Karen please no. I can't.\"\n\nKaren rubs Beth's leg. \"Ssshhh! Honey, it's ok. I am just rubbing it in. It has some numbing stuff in it. It will help?\"\n\nBeth just nods her head. Karen lifts her top cheek as Beth lays on her side. My cum is already drooling out. Karen giggles as she grabs the towel the plugs were in. \"Jesus Ben you made a mess of her.\" She gently wipes Beth clean and relubes her fingers since most of the lube ended up on the towel.\n\nBeth moans softly as Karen rubs in the lube. Karen pulls Beth up a bit on the blanket and holds her on her right side. She opens her left for me. I lay beside her. She smiles at me. \"Now it's cuddle time. Pull the blanket over us.\"\n\nI reach over and flip it over us. I am looking across Karen's chest at Beth. \"Beth, are you ok? Was I too hard at the end?\"\n\n\"Too hard No! At the end as my orgasm started to build everything felt amazing. I felt so full with you in my bum.\" Beth looks at Karen and rubs her cheek. \"And this one rubbing my clit like a mad woman. Beth looks at me. Thank you Ben for being so patient with me.\"\n\n\"You are thanking me??? Dear god I should be thanking you and sending you both flowers later. Last night Karen let me take her Virgin Bum and tonight you let me fuck your bum too. You two deserve a thank you from me!\" I say with a big smile.\n\nKaren turns to me. \"You are so sweet.\" She kisses me so softly. She turns to Beth. \"You made me so happy tonight. I am so glad we did this.\"\n\nBeth reaches out and hugs her. Things settle down a bit from there. We all just sort of relax for a few.\n\nBeth catches my eye. She looks at Karen's nipple. Then her nipple again. Her hand comes up and she pinches her fingers together. I smile and bring up my hand. She mouthed out the words Three, Two, One. We both reach down and pinch her nipples.\n\nKaren's eyes fly wide open. \"OH FUCK!\" She sees the two of us pinching and pulling on her nipples. \"WOW. I guess cuddle time is over.\"\n\nBeth says. \"What gave you that idea.\" As she leans over and sucks Karen's nipple into her mouth.\n\nNot to be out done I suck the nipple closest to me into my mouth. I nibble, chew and pull on it almost all at the same time.\n\nKaren hisses out \"Oh shit. Oh Fuck that hurts so good.\" She is holding each head to her chest with each hand. \"Ben, I need you inside me. Please.\"\n\n\"I was lying here thinking about that. Karen I Love You and want to make love to you, but you said Beth needs a man too. It would be rude to leave her out. I say you both lay side by side. The one that isn't getting fucked plays with the woman that is getting fucked however she wants to, and I will swap back and forth from one beautiful sexy woman to another.\"\n\n\"Now he thinks he is Casanova.\" Beth says to Karen laughing.\n\n\"I know. He has two beautiful, naked women that want him and he thinks he is special.\" Says Karen.\n\nThe both start giggling. Just like that it starts pouring. I never noticed the clouds get so bad. The sky's open. It is POURING!\n\nThe girls shirk and run for the house. I am right behind them. I bolt of lightning Cracks and lights up the sky. For a split second I can see the two naked girls running for the house. At the same time I notice the neighbors in the window looking out. They definitely saw us with the lightning flash.\n\nWe get into the house, and we are all soaked. Karen looks back. \"What about our stuff?\"\n\n\"Feel free to go get it.\" I laugh. I walk to the closet and grab a few towels. I walk up to Beth and put it over her shoulders. I turn to Karen and start drying her off. Softly running the towel all over her body. She sighs and smiles at me.\n\nI put the towel on her head for her to dry her hair, and turn to Beth. She is drying her hair. I nudge her hands away and take the towel. I repeat the process on Beth.\n\nThey both seem to have the same idea. They step up to me. Beth in front and Karen behind me. They start rubbing me dry.\n\nLike I did for them, they crouch down to dry my legs. Beth has my hardon in front of her face. She starts softly drying me, and just stares at my hardon.\n\nKaren comes from behind me staring at Beth. They just stare at each other for a moment. Karen reaches out and nudges Beth's hand and towel away. She points me at Beth's mouth. Beth looks at my hardon, at Karen, and back again.\n\nKaren smiles and nods. She puts her hand on Beth's neck and nudges her forward. Beth opens her mouth and allows Karen to nudge her forward again.\n\n\"Oh Fuck!\" I sigh. Beth is softly moaning with me in her mouth. Karen is softly holding her by her hair pushing her mouth up and down on me. This is just a fantasy come true.\n\nKaren holds Beth's face and pushes her off me and kisses her. They push their tongues back and forth into each other's mouths. Beth breaks the kiss and looks up at me lust in her eyes.\n\nShe moves her mouth to one side of my dick and pulls Karen to the other. They kiss each other around the head of my dick. \"FUCK!\" I groan.\n\nI reach down and grab them by their arms. They let me pull them up. Beth is up first. I kiss her hard. She moans as I kiss her. I slap her ass. \"Go get on the bed.\"\n\nI hug Karen to me. We kiss like we haven't seen each other in months. I break the kiss. \"God you are so hot!\" I say.\n\nShe giggles. \"So you like having two girls blow you?\"\n\n\"I love you doing it. I am ecstatic with both of you doing it. I never thought in my life I would see two women on their knees blowing me.\" I say.\n\nShe kisses my chest. \"If we stop talking and go to the bedroom those same two women will let you fuck them.\"\n\nI smack her ass. \"Get on that bed. I want to fuck you while Beth plays with you.\"\n\nKaren yelps and heads to the bedroom. I walk in behind her and the two of them are side by side on the bed kissing.\n\nFuck I am a lucky guy. I reach up, grab Karen's ankles and pull her to the edge of the bed. Pull her legs up in the air and against me. Karen looks at me a tad concerned.\n\nShe uses air quotes. \"Hard is ok. No 'Taking' me like last night. I don't think I can take that two nights in a row.\"\n\nI kiss her calves. \"Karen, if it's too much just say the word, I don't want to hurt you.\"\n\n\"Ben, you would never hurt me. I know that in my heart.\" Karen says.\n\nMy answer is to push forward into Karen. I just groan as her warm wetness squeezes me. \"Fuck you feel ssoooo Nice.\"\n\nKaren sighs, and smiles at me. \"Yes you do.\"\n\nBeth crawls next to Karen and starts kissing Karen's neck and ear while she rubs her nipples.\n\nKaren has her head turned away from Beth to give her access, and is sighing as she kisses her neck.\n\nI reach up for Beth's hand. I take her hand and pull it to Karen's clit. \"Beth, I need your help. Karen likes it rough, and she wanted it rough last night. Tonight she can't take it rough, she needs it to be gentle. I need you to help me make her cum by being gentle. Can you gently rub her clit while I gently make love to her?\"\n\nBeth reaches down and gives Karen a big hug. They hold each other in a fierce hug. They then start whispering in each other's ear and I can't hear them.\n\n\"Ezzie, what are they saying to each other?\"\n\n\"Beth is very happy you and Karen are together and that you care so much for her. She has never known a guy to care about her, or her needs and wants during sex like you do with Karen. Beth thought when the threesome started coming together she and Karen would get fucked by you. But she thought the real fun would be with Karen. You have been so good to both of them all night she can't wait to have sex with you.\" Ezzie says just as they break their hug.\n\nBeth kisses Karen softly on the lips. \"Now you lay back and relax while Ben and I bring you to orgasm.\"\n\n\"Oh God.\" Moans Karen.\n\nI keep an nice steady pace up while I fuck Karen. Since I came not that long ago I can go at this pace for a while. Beth has her fingers rubbing Karen's clit. Beth looks up at me. I look at Karen's boobs flopping around a little. I click my teeth together. Beth gives me an evil smile.\n\nBeth moves her head to Karen's nearest nipple. I am guessing by Karen's reaction Beth at first just sucked it into her mouth. Karen just let out a soft moan.\n\nThat moan quickly turned to a hiss. \"Oh you Bitch!\" Karen says.\n\nI smile. I know Beth is biting Karen's nipple\n\nBeth just stares down at my hardon pushing in and out of Karen. \"Wow.\" Says Beth.",
        "I laugh. \"Wow?\"\n\n\"I have never watched someone else have sex. It's so hot watching her lips wrap around you as you fuck her.\" Beth says.\n\n\"Ezzie, what is Beth thinking right now.\" I ask.\n\n\"Right now she wants you inside of her. She wants her lips wrapping around you like that.\" Says Ezzie.\n\n\"Ezzie, tell me what she thinks about this.\" I say.\n\n\"Beth, all we have to do is make Karen cum and then you are next. After I cum in you I want to watch Karen lick you clean.\"\n\n\"Ben, she is seeing you fucking her from behind, and on top. She then is imagining Karen licking your cum out of her. She is glad she stayed on the pill after breaking up with her boyfriend.\" Says Ezzie.\n\nI was about to ask Ezzie another question about what or how Beth likes. When my concentration is broken by Karen humping her hips a bit.\n\n\"Karen, are you getting closer?\" I ask but I don't get an answer. \"Karen do Beth and I need to stop?\"\n\nThat gets her talking. \"If you two ever want this to happen again you will not stop.\" Karen looks at Beth. \"Please just a little harder? I want to orgasm knowing it was both of you that made me orgasm.\"\n\nBeth looks at Karen. \"Only if you promise to hold me while Ben fucks me.\"\n\n\"Oh god I would love that.\" Says Karen.\n\nI can see Beth pushing down harder on Karen's clit and her fingers now moving faster.\n\nKaren is getting closer and closer. To be honest I could be too. I need to be careful. I still have another woman to fuck.\n\nThank god Karen is almost there. A few strokes later and she squeezes me tight and cums. I pull out as her pussy is orgasming. She moans as I pull out, but Beth keeps rubbing her until Karen's hand reaches down and pulls Beth's hand away. Beth snuggles up against Karen and hold her for a minute or two.\n\nThe two of them start giggling. I look at them, and they giggle more.\n\n\"Ezzie why are they laughing at me?\"\n\n\"Karen is saying she could feel you getting excited. She isn't sure how long you can last for Beth. She is afraid you will disappoint her and become Quick Draw. What does she mean..... oh.\" Says Ezzie.\n\nJesus, I could swear I hear Ezzie giggle. Now even my wingman, the magic ring is laughing at me.\n\n\"I am sorry Ben, I don't mean to laugh at you\". Says Ezzie with some concern.\n\n\"Ezzie, I promise you I am not mad. It's ok. I was just venting in my head. I know it's funny. Sometimes I forget you are always there.\" I say\n\nThe concern is still in her voice. \"I am sorry Ben.\"\n\n\"Ezzie, please stop apologizing. I am not mad. I am very thankful you are here, and now I owe you a thank you.\"\n\n\"You do?\" Ezzie asks.\n\n\"Yes, our little back and forth calmed me down a bit. It distracted me. Now I won't be Quick Draw.\" I think to Ezzie\n\nI look at Beth. \"I believe I made you a promise.\" I reach up and grab her ankles and pull her to me like I did Karen. I then reach up and pull down Karen. I roll Karen onto her side facing Beth. I pull Beth closer. I roll Beth on her side facing Karen. I bend her legs up so her ass is on the edge of the bed and Karen's legs are between Beth's. They catch on and move their bodies closer to hug and hold each other.\n\nI rub my fingers along Beth's pussy. She is wet as could be. I aim myself and push in with a moan. I slip about halfway in.\n\nBeth moans. \"Oh that's better than the vibrator I have.\"\n\nBoth girls giggle. I push again and bottom out in Beth. Just like Karen she is so warm, wet & tight. I moan as I start fucking her.\n\nKaren smiles at me. \"You like having sex with Karen? Does she feel good?\"\n\n\"I hate to say it but yes. It's like you are twins. You both feel fantastic.\" I say.\n\nKaren has a huge grin. She turns to Beth. \"Honey, how do you like Ben?\"\n\nBeth looks at Karen. \"God, you are a lucky girl. He feels so good.\" Beth's face gets concerned. \"Karen, are you sure you are OK with this?\"\n\nOk enough of these worries. \"Ezzie?\"\n\nEzzie is just starting to enjoy this. \"Yes Ben.\"\n\nOk I want to be careful here. Let's not create a monster. \"Ezzie anytime we are having sex for the rest of the weekend. No one should be worried about anyone's feelings. We all love each other, and we know it's just sex. We just want to make the other people cum.\"\n\n\"It's done Ben.\" Says Ezzie.\n\nBeth's expression changes a tad. Karen answers her with a passionate kiss. She breaks the kiss and Beth smiles.\n\nI grab Beth and fuck her a little harder and faster. Beth moans. \"Oh yeah.\" She is giving little moans and grunts on my harder thrusts.\n\nKaren has been alternating reaching down to rub Beth's clit, and softly teasing her nipples.\n\nBeth tries to hump back against me but the position isn't good for it. She looks back at me. \"Ben, I want you to do something for me.\"\n\nI slow down just a tad. \"What can I do for you Beth?\"\n\nShe looks embarrassed for a moment. Karen puts her hand on Beth's cheek. \"Just say it sweetie.\"\n\nBeth smiles at Karen. \"Since you told me about Ben Taking you last night. I want to try that. No one has ever just Taken me.\"\n\nI pull out of Beth and roll her on her back. I roll Karen on her back with her feet braced on the floor.\n\nI put a little tone in my voice. \"If you want to be taken, get over Karen on your hands and knees. No safe word. I will fuck you until I cum inside of you making you mine. You and Karen will be mine for the rest of the weekend.\"\n\nBeth looks at me a bit in shock at my tone. Karen is laying there smiling with her arms out for Beth to come to her. Beth sighs and crawls over Karen.\n\nAs I step up to the bed and Beth's pussy I see Karen wrap her arms around her in a hug.\n\n\"Ezzie please listen to Beth. If I am ever truly hurting her please let me know.\"\n\n\"I will Ben.\"\n\nI spread her cheeks with my thumbs and push in. Once I make contact with her pussy I shove in hard. Beth gasps and moans loudly in surprise.\n\nKaren hugs her tight. I can hear her soothing Beth as I start some real hard fucking. \"Beth, he is going to Take you just like you asked. He is going to fuck you hard and I am going hold you, and love you.\"\n\nFuck! Beth feels every bit as good as Karen. I have to slow down for a bit or I will cum too quick. I smack Beth's ass. \"Beth, Karen had me Take her Ass like this. Do you think you would like that?\"\n\n\"PLEASE NO!\" Beth gasps out.\n\nI smile. \"Are you sure?\"\n\n\"Oh God, I couldn't.\" Beth looks at Karen. \"How could you?\"\n\nKaren smiles. \"It was so hard and full and oh god. It felt good having him just pound me. I felt it all day today though. I told him this morning my bum was off limits.\"\n\nBeth starts to laugh. \"So tonight is my ass, and now he is Taking Me?\"\n\nKaren holds her face and kisses her. She breaks the kiss and hugs her tight. Karen looks at me. \"Fuck her Ben. Let me feel you pound her into me. Take her. Make her yours.\"\n\nBeth yelps out as I grab her hips and pull her back to me as I shove back in. Karen knows I am nearing the end.\n\nBeth is grunting with every stroke as I bounce off her ass. She is grunting. Her pussy is making wet slapping sounds as I fuck her. I am panting. The bed is squeaking in protest, and Karen is egging me on, while holding Karen in a hug and stroking her hair.\n\n\"Do it Ben. Let her know what it's like to have someone take you. Let her know what it's like to get fucked by someone that cares. Make her cum while I hold her to me.\" Karen says.\n\n\"Make her orgasm nice and hard Ben and maybe I will let you have my ass again tomorrow.\"\n\nI look up at that one.\n\n\"Oh.\" Karen laughs. \"You like that idea don't you. Fuck her Ben. Make her scream. Fill her up with cum.\"\n\nI am fucking Beth for all I am worth. If you heard just Beth's moans, gasps and noises you would swear she was being hurt. I am holding her hips so tight. I swear if I pop out of I am going to break my hardon if I miss her pussy on the way back in.\n\nI don't know if Beth was panting softly beside Karen. It seems like suddenly she is chanting. \"FUCK. FUCK. FUCK. FFFUUCCCKKKK!\"\n\nHer pussy spasms as she orgasms. I am not quite there yet. The Fucks have changed to screams as I continue to Fuck her Hard.\n\nKaren is holding her tight. Beth is trying to slump down away from me but between Karen's tight hug, and my tight grip on her hips she can't fall away.\n\nBeth starts gasping as I continue slamming into her. \"PLEASE. PLEASE.\" I can feel her pussy clenching as I fuck into her. It is kind of helping me get closer. It's a firm squeeze as I try to pull out.\n\nAny coherent words from Beth are gone. It's grunting and small screams as I fuck her.\n\nKaren looks me in the eye. She knows Beth is about to tap out. \"Do it Ben. Do it. Spray your cum inside of her. I promise I will lick it all out. Do you want to watch me lick your cum out of her?\"\n\nWhat the Fuck! Beth screams.....is she peeing?? I don't care. I shove in one last time. I give a deep grunt and cum. God it feels so good it almost hurts.\n\nI finish cumming in Beth and I slump onto the bed. Beth falls over to the other side of Karen. I look and she is actually shivering.\n\nKaren rolls into her and hugs Beth. She gently holds her and is rubbing her back. I notice the wet spot. I don't smell pee. I rub my fingers in it, and smell them. No, that's not pee. Oh shit! Beth squirted. Holy shit!!!\n\nI walk around and lay down beside Beth. I reach down for her. She looks up at me. \"Sshhh. It's ok. Come here.\" I tell her as I pull her up the bed to me by her armpits.\n\nI hold her in one arm and brush her hair back. She looks ready to pass out. \"Are you ok?\" I ask. \"Was I too hard?\"\n\nShe sighs. \"Almost.\"\n\n\"Almost what Beth.\" I ask.\n\n\"I almost said the word, and then my world exploded. I didn't think an orgasm could be so intense.\" She just sighs like saying so much was an effort.\n\nKaren is laying there watching us with a smile. I roll Beth onto her back. I say to both of them. \"One more thing to do.\"\n\nI start to lift Beth's legs back so her knees are bent and her feet on the mattress. I smile and look at Karen. \"You have clean up duty.\"\n\nBeth moans. \"Nnooo please. I can't.\"\n\nI lean down next to Beth. \"Sshhh this is just a cleaning. She will go down on you another time. Karen get a warm cloth to clean Beth.\"\n\nKaren hops up and gets a cloth. She softly wipes Beth clean. She looks at me and bends over sucking me into her mouth. She sucks and swirls her tongue around me while smiling.\n\n\"Careful Karen. I could get used to this.\" I say.\n\nShe pulls off me with a Pop. \"Today you definitely deserve it.\"\n\nI grab her and pull her up my body so I can kiss her. It's an odd taste. Lip gloss with a little bit of Beth and me. I don't care. I love this woman.\n\nAll is quiet as we all lay there snuggled together. It is Storming outside. It's a good night to be snuggled in a bed naked with 2 beautiful women."
    ],
    "authorname": "ao1701e",
    "tags": [
        "threesome",
        "ffm",
        "lesbian",
        "lesbian sex",
        "group",
        "group sex"
    ],
    "category": "Mind Control",
    "url": "https://www.literotica.com/s/a-ring-named-ezzie-pt-03"
}
{
    "title": "Fire Flies",
    "pages": [
        "Sometimes summer is more than just a season. Sometimes it's an entire world; it's lifetimes; it's emotions. In this world, these lives and these hearts, summer burns from within.\n\n<p align=\"center\">*** *** ***</p>\n\nI knew I had a problem on my hands when the sight of her painted toenails captivated me. There was plenty to catch a man's eye, no lie. But her pink nails were the flashing warning lights for me.\n\n<p align=\"center\">***</p>\n\nOn the first sunset of summer -- weeks before -- the only pink in my life had been the sunflowers Linda Hani brought to my house. Long stems, intense petals, deeply sweet fragrance.\n\n\"Can you believe this colour??\" She was a woman as neat and precise as the cornrows she favoured; her excitement evident only in the slight lift in her tone. \"I planted dozens when we first moved in -- and struggled with them every year until our daughter was finally born. I'd specifically ordered purple because I was curious to see purple sunflowers. The ones I planted for my son were meant to be red. Every single bloom turned out pink. Umhlolo wodwa, I tell you.\"\n\n\"They're beautiful, Lin. Thank you.\"\n\nShe was arranging them in a tall vase I didn't even know had been in one of my cupboards -- but her gaze kept flitting around up high. \"You have a tiny guest.\"\n\n\"Yeah, I know.\" I didn't bother looking up. \"I don't know how it got in.\"\n\n\"Bees in the home mean you will have a visitor.\"\n\n\"I've had a month from hell constructing contracts for a huge sponsorship initiative -- the manpower on the original concept has quadrupled and I keep getting called in for duties outside my own.\" I rubbed my eyes to ease the ache behind them. \"So, it's a good thing that's a firefly and not a bee. I'm in no mood for visitors for a while.\"\n\n\"You never are.\" Subtle admonishment. \"It's not natural spending so much time alone in this huge, quiet house.\"\n\n\"I've only been alone for seven years -- so far. And, if I'd known it would be this nice, I would've done it sooner.\"\n\nMy feeble joke was ignored as the enormous bouquet took shape. I decided to distract myself by opening a beer, hoping it would wash down the aftertaste of my words.\n\nLinda went to place the arrangement in the formal lounge then returned. She patted my back sympathetically.\n\nBut it was with a smile that she tracked my tiny airborne intruder.\n\n\"Fireflies are even better,\" she stated. \"They bring you your soulmate.\"\n\n<p align=\"center\">***</p>\n\nThe car company wanted a summer promotional campaign to debut along with the sponsorship programme. Numerous site visits and meetings have done little to clarify how many inhouse members versus how many external experts, freelancers and temps would be combined to form their team. They'd pitched the tip of the concept to me and were now incrementally dropping the rest of the iceberg.\n\nIt pissed me off when clients expected to wheedle free consultancy advice out of the man strictly contracted for... contracts.\n\nI spent the next few days home revising my agreement with them to include a working fee, analysis and consultancy agreement for what they were now hoping I'd slip in gratis. I spent that Sunday in my study after sending it through.\n\nZama Hani called just before sunset to check if I was home. At my confirmation, he announced he'd be over in five minutes -- with a surprise.\n\nI barely registered his presence when he finally did step through my door.\n\nMy eyes were glued to her. \"Olivia...\"\n\nShe walked straight into my arms.\n\nHer afro was much larger than it had been five years ago. Her face lit up as she responded to my compliment with an explanation about her new natural hair treatments; teeth brightly white as she laughed at my blatant confusion. I made a point of not taking in the opulence of her breasts and the tempting lusciousness of the tummy roll that engendered nothing but disdain when I held her on that first day back and said she'd grown.\n\nIt occurred to me that I'd never had to make myself not look before.\n\nHer reply was, \"If nothing else, I've proven indisputably that I'm better at growing fat than I am at growing up.\"\n\nThe self-deprecating humour still there after all these years as she pursed her lips. I shook my head as her remark could not have been further from the truth -- but scepticism met my opinion.\n\n\"Mama tells me all the fireflies had disappeared for a while.\"\n\nShe still had me wrapped in her warmth.\n\n\"Every day you were gone,\" I told her.\n\n\"It's a good thing I'm home then.\" Her lips curled and her light brown eyes did that thing where they filled the whole house with the warmth of her joy. \"And... I knew you'd say the perfect thing to make me feel better about being back here, you know.\"\n\nHer father, my best friend in the world, was laughing. \"Isn't this just beautiful, old friend? I would not have wished unemployment on my daughter per se -- but, after years of begging her to visit home instead of making her poor parents chase after her, I am just the happiest man alive to have my sunshine home.\"\n\nOlivia smiled up at me.\n\nYes. Just beautiful.\n\n<p align=\"center\">***</p>\n\nHer first week home flew by.\n\nHer parents threw a lavish dinner that Saturday and announced to all guests that Olivia was down but most definitely not out. She would rise again and slay her dragons. I felt stupid for being the only one with a gift; more so for having brought something so childish.\n\n\"I haven't made or worn these in years.\" Her words, spoken in a tone low and smooth, jerked me into the realisation that she wasn't a little girl anymore.\n\n\"I'm sorry. I haven't seen you in five years... I forgot that you aren't eighteen anymore.\"\n\nShe turned the little wristband loom kit over then met my gaze with a raised eyebrow. \"Yeah, but I haven't made these since I was thirteen...\"\n\n\"Shit.\" I wondered how rude it would be to leave before dinner was even served. \"Sorry.\"\n\n\"Ten years ago.\"\n\n\"My apology can never express how moronic I feel right now.\"\n\nShe laughed. Her makeup had a shimmer to it that made even her musical laugh seem to glow around us.\n\nAt the beginning of her second week, I went down to my kitchen to find her sipping coffee and reading a book. Dostoevsky. Of course. She told me she'd come over at four-thirty, right before her parents woke up. I scratched my beard and tried to make sense of the lit candles all around the breakfast nook.\n\nShe pulled out a chair for me. \"Not everything has to come with practical reasons, you know. Come enjoy my early indoor sunrise with me.\"\n\nThe warm flicker of lights all around me did make it feel like I was standing at the center of the rising sun.\n\nOlivia wore loose layers of clothing that I couldn't identify as individual items. I sat down, and she poured two coffees then served me the biggest plate of breakfast I'd ever seen. We talked about the five years we'd spent apart, gradually stitching our separate experiences together to close the time-apart gap while she stole bites from my plate.\n\nShe didn't even notice how often she stopped her food pilfering to tap and trace my bare arm with the tips of her fingers. Like a thousand times before. No one but the two of us knew that she found my freckles somewhat mesmerising, and would often get lost \"counting\" them or \"connnecting the dots\".\n\nI realised how much I'd missed her as I was forced to eat with my left hand so she could have her way with my right arm.\n\nWhen the actual sun finally rose, we barely noticed it.\n\n\"You're greying.\"\n\nI chewed on.\n\n\"Your hair,\" she clarified unnecessarily. \"I mean, there were already a few grey hairs before I left -- but now... they're kind of everywhere, aren't they?\"\n\nI glared at her. \"Thanks.\"\n\n\"I like it.\"\n\nI shook my head.\n\n\"No, really,\" she insisted. \"Who knew red hair --\n\n\"Brown.\"\n\n\"Red.\"\n\n\"Brown.\"\n\n\"That reddish hair would look this nice with grey through it? If it makes you feel any better your beard is still red. Well. Mostly.\"\n\nI leaned back in my seat, pinning her with the full magnitude of my glare. \"Are you punishing me by calling me old?\"\n\n\"Who said anything about 'old', Ian? And what possible reason on earth could I have for wanting to punish you... you, the man who bought me a child's gift? Hm?\" She was giggling softly as she worked her way through the cluster of button mushrooms on my plate. \"No, seriously now. I really do like the grey; it goes with your eyes.\"\n\nMy coffee was finished, so I took her mug.\n\n\"And I like your hair short like that -- and the obsessively neat beard,\" she continued, \"even if you only tidied up to hide all the grey.\"\n\n\"I tidied up because I've outgrown the unkempt rockstar look.\"\n\n\"The shaggy puppy look, you mean.\"\n\n\"I am a highly esteemed entrepreneur, a master of business law, who has locked down some of the biggest contracts this country will never know about -- and does not need to put up with name-calling.\"\n\n\"You should be getting to your study to get some more work done. I'm sure there are huge corporations dying for more magic from the master rainmaker, not old news about old deals.\"\n\nShe got to her feet and began tidying up.\n\nShe insisted on this -- helping, working -- even when a guest in another's home or around people employed to do the work. I finished her coffee while watching her.\n\nI rose to my full height but, where this might have caused another to do a double-take, she barely blinked. I was tall, but not vastly so -- there was just something about the fullness of my presence that gave others pause. My full height, the deepest tones of my voice, the full intensity of my attention. People seemed to prefer me in small measures -- so, I liked that I didn't need to hold back with Olivia. Never have.\n\nShe told me a bit about the tiny flat she'd lived in before coming back home; how she was almost certain it could fit in my enormous kitchen -- but mostly she worked in silence. At one point, she propped her fist on her hip to express impatience. I stepped out of her way with a smile, a little baffled by how often my eyes returned to those hips.\n\nI could not work out when -- or how -- they had come to curve quite like that.\n\nAll evidence of her surprise breakfast disappeared in a matter of minutes.\n\n\"Walk me home, will you?\" The flowing layers of light material swished in delayed response as she turned to me. \"You could do with a little leg stretch, old man.\"\n\nWe lived at the top of what was technically a cul-de-sac though it didn't look anything like the generic sets in popular series and sitcoms. No music skipped along, depicting characters' moods; no gleaming cars or fake-looking housewives...\n\nNo other people at all, in fact.\n\nOur houses, half a kilometre apart, were significantly removed from our neighbours who were nestled way back from the elevated plateau we shared. The streets down that way were far busier and a little too brightly lit. We liked the fact that our corner of paradise was so quiet and often overlooked as most people didn't know there were two more properties past the sharp road curve up the slope from our neighbours.\n\nThat walk from my house to theirs and back was such a familiar part of our families' routines that I felt a thankful burst of appreciation for suddenly feeling like Olivia was truly home. We were talking and walking again. Together again.\n\n<p align=\"center\">*** *** ***</p>\n\nShe snapped in her third week.\n\nHer parents were driving her up the wall -- inundating her with information and contacts, pushing her to get back out there. Network; get another job; excel. Climb that ladder -- never look down, just climb and climb and climb.\n\nShe spent even more time at my house; and, eventually, pieces of her previous job entered our chats until I could put together a picture that showed how overwhelmed she'd been right from the beginning.\n\nIt was a miracle she'd lasted a year and a half.\n\n\"I shouldn't have ventured anywhere near accounting.\" She was sorting my books out -- apparently I'd shelved my entire library \"wrong\".\n\n\"You can't know that after one job.\"\n\n\"I know it after one job and one hundred future potentials my parents are shoving down my throat, Ian.\"\n\n\"Most people don't have a hundred options, Liv.\"\n\nShe stopped abruptly. \"You think I'm being ungrateful? That I don't know how fortunate I am to have what I have? Acknowledging wrong choices is not the same as ingratitude.\"\n\nThe sun was setting and I was still wearing the suit I'd returned in an hour ago. Whisky in hand. The waning light reached out to her, seeking contact with her brown skin.\n\n\"I'm saying you need to live a little more before making sweeping judgements.\"\n\nHer eyes were darkening. All I was thinking was that I liked that there were still things from the eighteen years of her I knew that lived on in the woman now in her twenties. Anger and sadness always made her eyes look darker.\n\n\"I know how hard my folks worked to earn what we have -- and I am thankful for that, for having options at all.\" She sat down on the top step of the small ladder she'd been standing on. \"And you're right: I can't judge things I haven't experienced. I guess the more accurate statement is that I should never have let my parents lead me by the nose as much as I have. Chasing the chartered accountant dream was their idea, not mine.\"\n\nThe sky was red as I walked her home.\n\nThe ferociousness of the heat in the fourth week knocked all sense from me.\n\nWinter was my preferred season. People stayed indoors and the summer brightness dimmed right down to something I could tolerate. Soft colours everywhere soothed me -- greys, cloudy blues, the dark browns of stark bark standing vigil around my house.\n\nIn winter I could breathe. In a measured and relaxed way that fueled peak performance.\n\nIn summer I panted.\n\nI switched to taking my runs before dawn, so that I could cool down in the pool by the time the sun was rising. I did my work with the study blinds closed and planned meals around cold ingredients.\n\nOlivia opened my kitchen door on the hottest afternoon of the month and my first thought at seeing her was that I wanted no one else sharing that sight. The thought that she had come up the road in nothing but a bikini and a sarong, bright bag hooked on her arm, a small cooler bag in the other hand, hair back in an enormous soft puff... well, that thought didn't sit well with me. Her feet were bare as she'd left her white flipflops by the door.\n\nHer toenails were a vibrant pink; one of those shades that looked both cute and sexy. A foreign inner voice warned me to look away, to stop staring at her toenails and the bare parts of the rest of her.\n\nBare for just anyone to see.\n\nI rolled my shoulders to make the strange protectiveness slide down my back and off me.\n\n\"Can I have a quick swim?\" She pulled a red tub from the cooler bag. \"I'll trade you some ice cream for one afternoon of peace.\"\n\n\"Your parents love you.\" I hoped she wouldn't misread the roughness in my tone.\n\n\"Too much sometimes, yes.\"\n\nI was wondering if the last five years showed as harshly on me as they did shine beautifully through her newfound adulthood. Olivia -- now so suddenly a woman with unexpected insights and a disconcerting directness that matched my own.\n\nWhere had the years gone?\n\nAnd when had this queen risen from a young girl's dreams?\n\n\"There's no such thing as too much parental love.\" I smiled to curb her mild irritation.\n\nZama and Linda, her parents, were aggressively energetic go-getters.\n\nI'd met Zama in high school -- an angry Black boy who was raised by a single mom who could barely afford anything beyond covering the loan payments for their little two-bedroom home and his school fees. He'd spat out any words to do with how much they struggled. He'd snarled the rest. I was the only kid in school willing to fight with him long enough to become his friend.\n\nHe'd married Linda straight out of university and the two have never looked back since. Transformation, security and success had been non-negotiable for Zama.\n\nThe Hani family now lived in the biggest house in the area with a pantry the size of a mini-mart and eight people in their personal employ on the property. Eighty more in Zama's company.\n\n\"So, what drove you out today?\" My fingers brushed Olivia's as I took the cold tub from her. \"A new list of job ads?\"\n\n\"Motivational speech.\"\n\n\"That's not too bad.\"\n\n\"This one came with mantras.\"\n\nI chuckled as I stepped aside to let her in. I liked the new womanly sway to her walk.\n\nShe'd always been comfortable in her skin -- and that confidence was now enhanced by the maturity of being twenty-three and the survivor of her first big challenge. Women dance their evolution in the way they walk, make coffee, shop, garden, embrace another... everything they do.\n\nOlivia's steps into my house were already showing sketches of her fierce femininity.\n\n\"Tell me the worst ones,\" I prompted.\n\nShe shook her head. \"I'm here to forget them, not rehearse them.\"\n\n\"Come on, humour your ol' Uncle Ian.\" I managed to annoy myself with my lame attempt at a joke. So stupid to call myself that when she never ever had.\n\nHer skin was a rich chocolate hue, a tone she acquired each summer with all the swimming she did. Her skin normally matched the creamy cappuccino tones of her mother's lighter skin throughout the year -- then deepened by mid-spring. She was a child of the sun, a flame herself -- and an dedicated devotee to passing hours outdoors worshipping nature.\n\nAnd, oh, what a paradise her parents have created for her.\n\nWe lived at the tip of a very long, very quiet street. Quiet because Zama had purchased about twenty acres of land stretching along our plateaued paradise. He'd built his own haven on three acres, sold me and Helen three acres for a song -- and the rest was left untouched.\n\nTrees, bushes and wild flowers grew freely along the gentle slopes; and our respective houses nestled in the green and gold of flora and sunlight. Serenely overlooking the city. The rest of the suburb's houses were a couple kilometres away, beyond the sharp road curve, where \"civilisation\" began. Too far back to share our view.\n\nThis was the secluded yet luxuriant world in which Liv grew up, dancing about barefoot and now visiting my home half-dressed.\n\nShe fetched a towel from the closet outside the downstairs guest bathroom then returned. Her expression was speculative though amusement was twinkling in her light brown eyes now.\n\n\"I am proud to be positive, inspired, empowered and pumped.\" Her full lips compressed, making her cheeks dimple.\n\nI laughed a little louder than before.\n\nShe grinned and gave me another of her mantras. \"YES and no less. YES and no stress. My YES is my bless.\"\n\nAfter raiding the fridge, I led the way to the pool area out back. \"My 'bless'...?\"\n\n\"I think that one only works if it rhymes.\"\n\nIt was a blindingly beautiful blue-sky day.\n\nI had joined her outside without thinking. It was only as I set the lemonade, beer and fruit platter on the poolside table then opened the large umbrella, that I wondered if she wanted no company at all. We all have keys, codes and access to each others' properties, have for over two decades now, often visiting unannounced and using what we need. She'd specifically come here to escape her parents and her stress. Did that mean she wouldn't want me around for the day either?\n\n\"You have always made the best lemonade.\" Her praise came after chugging a full glass.\n\n\"I had to make something of my life.\" I relaxed into a seat at her inviting demeanour and put my feet up. \"Mastering lemonade seemed a respectable accomplishment.\"\n\n\"Now you're just fishing for compliments -- you know you rule in the kitchen,\" she scoffed. \"In fact, if you had left instead of Helen, I'd stand a better chance of shaking off these damn fat rolls...\"",
        "By the time she got to the word 'damn' I picked up the change in her tone. Her ice clinked unsteadily as she set her glass down a little too fast. I was waiting for the familiar pain at her words, but it was fainter than expected, so I simply watched her.\n\nLiv's cognac eyes never left mine. \"I am so sorry, Ian. I didn't mean... I am glad that you're here and of course I wish that Helen was as well.\"\n\n\"I don't -- not anymore.\" They were the last words I'd expected out my mouth; and even more surprising was the calm certainty with which I meant them. \"I tried for longer than I should have to make Helen stay; and after she left me I did hurt for a very long time. But I want you to know that I'm okay now -- and you don't have to tiptoe around talking about her or making jokes about the past.\"\n\n\"All right.\"\n\n\"Do me a favour, though: quit poking fun at yourself all the time. You don't need to lose any weight. You're beautiful.\"\n\nShe got to her feet, shaking her head. \"You're either blind or too kind.\"\n\n\"Rubbish.\"\n\nLiv undid her striped sarong with a shrug and dove into the sparkling water. The way she glided through the water defied resistance. When she was younger, she'd seemed all straight lines and muted colouring -- maybe because I'd never looked past her school uniform as I suddenly was now. Out of the blue, there she was, all at once voluptuous and fluid; a body of strength and sensuality.\n\nPink nails matching her bikini and the flowers that filled my home with such a precious scent.\n\nSomewhere out there was a young man dreaming of a woman exactly like her.\n\nI watched mesmerised as her curves worked together to make the water obey her, flow with her. A few seconds later she surfaced at the shallow end.\n\nAfter a few minutes I joined her. I suppose we raced a few times, but can hardly call it that considering how disorganised the direction of our swimming was and the abandon with which Liv laughed as she blatantly cheated. She teased me when I got out twenty minutes later and sought sanctuary in the shade.\n\n\"Remember the time we were all up in Zanzibar and you got sunburnt on the first day?\"\n\n\"I take exception to the glee in your tone.\"\n\nOutright laughter burst from her as she continued treading water. \"Helen was so mad that she had to spend the rest of the week nursing and coddling your pale arse.\"\n\n\"Hey, language!\"\n\nHer head dipped under and she resurfaced laughing even harder and coughing a little bit. \"Seriously?? You can't be serious.\"\n\nI had been.\n\nJust two days ago Olivia had lectured me on updating my website and my sorely lacking SEO knowledge. I'd chosen self-employment eighteen years ago -- yet still needed lectures on my professional image and selling my work. She'd also sourced me -- in two hours flat, astoundingly -- an IT and design genius to replace the team of four I'd been pissing away money on for the last two years.\n\nAnd today I was admonishing her for saying a word in a way I shouldn't have liked.\n\n\"I meant how dare you call me pale,\" I lied.\n\nI'd always liked Olivia, but in an amused sort of manner a not-quite-familiar friend would. I had a few things in common with her, but loved watching her learn her own things and piece herself together. Helen and I used to babysit her; and after Helen left I was kept alive by sharing a love of literature with Liv through the last of her high school years. I must have bored her to tears, but couldn't help enjoying how new the world was to her. She was nowhere as cynical and jaded as some of my colleagues and friends.\n\nShe found beauty in Dostoevsky's most melancholic lines.\n\nWhat is hell? I maintain that it is the suffering of being unable to love.\n\nThe way she saw life and the mechanics of her mind were just a couple of my favourite things about her.\n\n\"You know why you're broody, right?\" Helen had always teased after each of my days of teaching Liv something way beyond her years and returning from one of our walks full of excitement; not only at her sage grasp of adult concepts, but her questions and theories on matters most teens abhorred. \"You want kids and now you're hogging Linda's.\"\n\n\"Linda has another kid,\" I'd joked. \"She won't miss this one.\"\n\n\"So, you do admit that you like the idea of a daughter in the house.\"\n\n\"That is not what I said. And it's not what my time with Liv is about -- she's a gifted kid, Helen. I don't understand why you don't get that. She's one of those people who show you life through a new lens.\"\n\nAnd then Helen left.\n\nTurned out she was the one feeling broody, hoping year after year that my love for Olivia would evolve into a desire for kids and that we'd get to go back on our decision not to have children of our own. It didn't. I didn't. I'd meant that choice at thirty and even more so at forty-one. My love for Liv had always been an enjoyment and celebration of whom she was, not some fatherly attachment. Helen had never understood that.\n\nTwo years after Helen, Olivia left as well.\n\nStrangely, I'd spent those two years believing -- hoping desperately -- that Helen would come back. Yet, on the very day of Olivia's departure, I'd accepted that she was off to start her life and would never return. Once her studies were done, she'd find a job and a place of her own, no doubt. She'd appear on holidays and take up space without ever really being there...\n\nBut that isn't what happened. My expectations were flipped: Helen never looked back, never called to say she still loved me and wanted to return. Instead Liv was the one to change her mind five years after leaving, and announce that she'd be home indefinitely.\n\nNow she was facing her biggest challenge to date and confiding in me more than her own parents.\n\nOne does need a step back from the closest loved ones at times, so I was happy to let her lean on me. Cry on my shoulder, so to speak.\n\nLosing her coveted job after struggling to keep up with it had scared her -- yet she spoke of the fear with the attentive acceptance it had taken me years to cultivate after losing Helen. Sure, she had come home to take stock of how thin she'd spread herself and how dismally she'd done in the dream environment she spent years studying for. It was frightening to suddenly be part of the unemployment statistic, yes; crushing to suddenly doubt who you are and question the choices you've made, absolutely. But none of that had broken her.\n\nHer voice and spirit stopped me in my tracks.\n\nAs did her glistening skin after her swim.\n\n\"In any case, I'm not here because of getting fired.\" She bit into a large strawberry. \"I'm here because of Derek.\"\n\n<p align=\"center\">***</p>\n\nI was in the sort of physical shape that meant I needn't have spent the last seven years with as little female company as I had. And I was proud of the shape I was in. I was confident -- considered somewhat intimidating, truth be told. But I'd never considered myself aggressive exactly.\n\nLiv said that name in a way that made me want to hunt down whoever that was. Size him up. I knew nothing about him and I already wanted to punch him.\n\nShe hadn't bothered to towel off. My chair was securely under the umbrella, but she'd pulled hers back a few centimetres into the sun. Sparkling drops of water fell from her hair, her chin and elbows.\n\nI hoped my sunglasses were dark enough to shield my alertness. \"And who is Derek?\"\n\n\"A guy I was hoping would love me back.\"\n\nMy heart was a beast ramming against the bars of its cage. \"And... he doesn't?\"\n\n\"I met him when I started my new job, and thought he was the perfect Prince Charming.\" She pulled sunscreen from her bag and started applying some. \"Intelligence, ambition and stunning blue eyes... What more could a girl want?\"\n\n\"Requited love?\"\n\nHer smile was wry. \"Indeed, Mr Macallan -- how impressively observant of you. Now, how did I not think of that at the time?\"\n\n\"Because you are twenty-three and in love --\"\n\n\"Was in love... and barely brinking on love, mind you.\"\n\nI spoke on without falter. \"-- yet you still know more than I did at that age. Hell, since you've been back, I've been thinking you know more than I do at forty-eight.\"\n\nShe was perched on the edge of her chair, legs stretched out and crossed at the ankle whilst her hands rubbed thick sunscreen into her arms and chest. Helen had done the same for her many times a couple decades ago, and then Liv would giggle whenever Helen joked that the oily cream loved her skin so much she was soft and shiny as a baby seal. I couldn't remember that giggle clearly anymore; it had been replaced by her current sultry chuckle.\n\n\"Love is torturous enough when everything does work out,\" she declared. \"There should be a law against being tricked by love into thinking it's all working when it actually isn't.\"\n\n\"Tell me about it.\" I reached for my beer and tapped her lemonade glass.\n\nA new line of water trickled from her hair, skimming over the freshly applied sunscreen. Liv tugged her wet headband off and gave her hair one more thorough wring. More water flowed.\n\nHer bikini top now clung to her, making me realise I could just make out the outline of dark nipples. I shifted in my chair and turned to study the pool instead.\n\n\"I've been watching out for the wrong thing all this time, you see.\" She looked around her for something then got up to search her bag that lay on the table. \"I had always told myself that not getting someone I want would be fine; even being dumped would be fine. That is what I had decided -- ages before Derek.\"\n\nI looked up at her. \"How sensible.\"\n\nShe stopped suddenly, alarm and regret on her face. \"No! I'm sorry, Ian -- I didn't mean that Helen's choice should have been a breeze for you or --\"\n\n\"Come now, lovely, I hadn't been thinking that at all.\" I reached out for her hand.\n\nShe misread my movement and bent down to meet me halfway... then tried to retreat swiftly when she realised I wasn't leaning forward to embrace her. Her jerky withdrawal was totally off-kilter. The result was a cute albeit high-pitched squeal followed by me grabbing her to keep her from tipping the wrong way and banging into the iron table.\n\nLiv instinctively trusted my grip and went with it. The shape of her was so pronounced, I was a little surprised at how easily my large hands managed to steer her to safety. She landed in my lap, breath caught for a few more beats and eyes wide. Once sure she was safe, a short laugh burst from somewhere around her thudding heart.\n\n\"You okay?\" I smiled at her shaky recovery. \"Sorry, I was just reaching for your hand.\"\n\nHer nose crinkled with what appeared to be self-consciousness, but she did eventually nod. Something bothered me, something I took a while defining: I didn't understand why she was embarrassed; her mistake hadn't been that big a deal. Or was it that she'd wanted me to put my arms around her? Did she...?\n\nNo. That was a crazy thought not even worth completion.\n\nShe reached for my beer. \"Hey, I get to do this legally now...\"\n\nHer breath was still coming a little fast, but otherwise she seemed relaxed. No surprise, really. She used to do this as a kid. While the others played with her brother, splashing in the water or running about and climbing the jungle gym, Liv would sneak into Zama's lap while I kept Linda occupied and he'd let her have a sip of his beer. The occurrences had been very rare through her teens; and the final one had been at eighteen, a few weeks before she'd left for varsity.\n\nThree sips. From age eight to eighteen, she'd always only ever taken three sips -- and it was the tradition of our rules and tactics that had the three of us knowing that what we did was more about the closeness of that bond than the beer itself. In fact, I was somewhat certain Liv never quite grew to like the taste.\n\n\"I wonder if it'll still feel as precious without the thrill of having to sneak three sips past mom...\" She put the bottle to her lips. \"God, Ian, have you still not found a better beer?\"\n\nI plucked my bottle back. \"It's not the beer that's the problem -- it's your tastebuds.\"\n\n\"I told Derek to buy this, but he'd never heard of it.\" Her tone and gaze were thoughtful. \"Are you sure this is gourmet stuff?\"\n\n\"Gourmet?\"\n\n\"Or whatever. Fancy stuff.\"\n\n\"Why did you want Derek to start drinking my beer?\"\n\n\"Haven't a clue.\" A shrug. \"I brought it up last year, purely on impulse... Maybe I missed you?\"\n\nI poked her. \"What the hell do you mean 'maybe'??\"\n\nHer smile was big as she neatly heisted my bottle again with both hands. \"Okay, I definitely missed you. I just meant that I wasn't consciously thinking of you when I suddenly suggested this to Derek.\"\n\nSomething rose up my spine, pouring heat into my bones.\n\n\"Okay, quit stalling and tell me about love's injustice.\" I leaned all the way back, sinking into the thick cushion behind me. \"What could possibly be worse than outright rejection or being dumped?\"\n\n\"I was minding my own business -- and he just came along and made me see and love him.\"\n\n\"I thought you barely made it to the brink of love.\"\n\n\"What are you, the precision police?\" Sip number two. \"Yes, I did say that. But you should know a woman in self-preservation mode when you see one.\"\n\nShe had pulled an elasticised hairband from her bag earlier and slipped it onto her wrist. My eyes were on that red band as she took her final sip. It was red and sturdy-looking, her fingers elegant as she tipped my bottle. It was a strange combination to witness: Olivia, girly with her bright ensemble, her frilly red band... yet so undeniably grown with her wry sense of humour and graceful hands.\n\n\"We didn't work at the same place, but for some reason our paths kept crossing. He was a bit of a pretty boy -- a little vain, a little cocky. I was sure he wasn't my type. But a few months into bumping into him on a weekly basis, I realised I liked his sense of humour and that his cockiness hadn't turned him selfish at all. We started hangin' out and I just couldn't get over the fact that a guy that gorgeous and sauve actually liked me.\"\n\n\"I'm surprised at guys who don't.\" My hand came up to give her shoulder a reprimanding nudge, but ended up lingering in a reassuring squeeze. \"I don't know how you manage to be so confident while also being so harsh on yourself.\"\n\nShe was still warm from the sun.\n\n\"I'm not harsh on myself.\" Her head tilted. \"... Am I?\"\n\nHer jawline cut a distinct line of regal femininity. My eyes followed its path then skated down her throat to the slopes of her shoulders.\n\n\"You believe in yourself in most ways,\" I conceded. \"I just don't understand where the physical self-criticism comes from.\"\n\n\"They don't put girls like me on magazine covers, Ian.\"\n\n\"I've seen the girls they put on magazine covers, Ms Hani -- and you're intelligent enough to know you're out of their league. They haven't figured out how to line up depth, strength and a loony sense of humour with beauty in their cover shots just yet.\"\n\n\"And, by 'loony sense of humour', you mean 'irresistible charm and wit', right?\"\n\n\"Naturally.\"\n\nShe rewarded me with a grape.\n\nHer fingertips slowly traced the back of my hand. \"Derek spent a year getting to know me. Granted, the first few months were totally coincidental -- but even that meant something, surely? Why else would he have spent the next few pursuing me like he did?\"\n\nI sat up and touched the tip of a wet kink. \"You have a light about you, lovely. You draw people in.\"\n\nShe bit back her words right on the verge of protest. \"You think so? I just don't know anymore... Either way, I finally let him catch me. I let myself fall for him. And just when I started dreaming of what our second year together would be like, what a real relationship with him could be... he asked me to help him win Katie's heart.\"\n\n\"Katie?\"\n\nShe tugged the hair I held from my fingers. I watched her pull her hair back a little too tight; curl it into a bun a little too proficiently; and tie her bright red hairband around the bun with snappy motions that were a little too quick.\n\n\"Liv?\" I touched my palm to the back of her bare neck. \"Who's Katie?\"\n\nHer hands stilled. \"My flatmate.\"\n\nThe pool water was still and heartbreakingly crystal blue.\n\n\"I met her at varsity,\" she elaborated. \"Katie is tall and elegant -- so beautiful to watch.\"\n\nThis uttered by the most beautiful woman I knew.\n\nBeauty is mysterious as well as terrible. God and the devil are fighting there, and the battlefield is the heart of man.\n\nI found safer words to speak. \"Beauty is a matter of opinion -- not fact.\"\n\n\"Well, then the only fact that matters is that Derek's opinion confirmed her beauty.\"\n\n\"Is that really all that matters?\" My hand moved from her neck to rest behind her heart. \"Look, I know you're hurting, but... some guys are too stupid to make out treasures that are right in front of them.\"\n\n\"Nah, it wasn't that.\" Her gaze surfed along the pool's sparkling surface. \"I wasn't the girl for him -- I need to accept that. It was stupid of me to fall the way I did in the first place.\"\n\n\"Or you're just more woman than a boy like that can handle right now.\"\n\nShe turned suddenly. I wasn't sure if the corner of her mouth was curling in amusement or intrigue.\n\n\"Woman, huh?\" It was intrigue. \"I wasn't sure how you see me.\"\n\nAnd in that instant I knew without hesitation that I needed to get her off my lap.\n\n\"Not that my perception of you matters,\" I rejoined hastily, pushing forward just enough to indicate I needed her to move so I could rise to my feet.\n\nOlivia let me come close, but didn't get up. And, once I was close enough, she pressed her lips to mine.\n\nI should have pushed her away. But it didn't surprise me that I didn't.\n\nWhat did surprise me was that I'd never seen this coming before. Not consciously.\n\nAll those days and years of learning and laughing with her? Then the five years of longing for her when I should have been thinking of Helen? I'd told myself that I missed Helen and wanted her back; and I'd believed that -- until Olivia had left and I got a true taste of losing a part of myself.\n\nI loved Helen -- but with Liv I'd forged a strange connection free of labels, expectations and the dramas of any type of recognised relationship. Not once had it ever been romantic, definitely not sexual -- it was beyond basic affection, attraction and camaraderie. It was... strange. We each instinctively and easily followed the simple rule of letting the other be themselves, year after year. We'd lived together in a way, shared our lives -- yet applied none of the conventional rules of cohabitation to our proximity.\n\nWhen she'd left I couldn't compute the loss. So, I'd shut down all emotion. I told myself I was learning to accept Helen's departure and maturely letting go of Liv and wishing her well. But really I had simply switched to survival mode by turning off my feelings.\n\nI had created a winter inside myself, one of greyness and solitude.\n\nI should've recognised from the beginning that more was different than Olivia's maturity. I was so stuck on her being a woman that the new feelings rising to the surface, summoned by this woman I had to get to know from scratch, my feelings had slipped by unnoticed.\n\nMy lips parted. I knew I had to stop her; I was desperately searching for the right words. All I needed was the strength to grip her arms firmly and push her away.\n\nBut then the tip of her tongue touched the inside of my lip. And my world shattered in silence. I could taste her; with each inhalation, I could make out hints of lemonade, strawberry and her.\n\nThat fire returned to forge my bones from within. The beast inside roared at its sudden release. I felt as if my veins were being flooded with the warmth and electricity of feeling again. The world was coming to life again, filling with light and colour.",
        "My gift to her a month ago made sense now -- in a way. Something in me must have panicked at the sight of this woman and what she made me feel, so it fought back by clinging to the memory of the girl Liv had been and that's why I'd bought her a child's gift.\n\nHer tongue found mine and all that I was supposed to do evaporated. I couldn't push her away. I didn't want to. The heat of her in my arms and the peace of having her palms brush down my short hair made so much sense -- felt so right -- that I gave in to my selfishness. I kissed her back.\n\nHer arms went around my neck.\n\nIn the next instant all the sweetly singing birds in the nearby trees took flight, as one and for no apparent reason. The whoosh of their wings was the first sound I heard -- then Liv's tumbling gasps. It was almost painful how good she sounded; almost terrible how much I craved to make her moan my name.\n\nFinally I broke the kiss.\n\nI didn't have to explain my move. She already knew.\n\n\"I... need to go.\" Her eyes were large and bright. \"I'm sorry. I thought I had this under control.\"\n\nThat day was the second time watching her walk away brought me agony.\n\n<p align=\"center\">*** *** ***</p>\n\nThe following month passed by slowly as if to make up for the swiftness with which the previous one had flown by.\n\nI saw Liv once in all that time. She didn't come by my house anymore and I avoided hers as much as possible. I fetched the oversized vase from the formal lounge and threw out the dying flowers.\n\nThe day Linda asked me over, I first made sure Liv wouldn't be there. Unfortunately, either I arrived early or she left late -- whichever was true resulted in me parking in the driveway just as Liv walked out. She was wearing a black dress and holding roses. A young man in a suit was laughing at something Zama was saying. Linda took the roses from her daughter and shooed her out the door.\n\n\"The point of a romantic dinner is to go out before the night is over,\" Linda laughed. \"Oh, hi, Ian. I was worried you'd back out of coming over. Doesn't Liv look adorable?\"\n\n\"Linda Hani!\"\n\nThe way Linda's eyes widened reminded me of her daughter's eyes in playful moments. \"Hayi wena, don't call me that!\"\n\n\"Then don't call me cute, mama.\"\n\n\"I didn't. I said you were adorable.\"\n\nZama grinned over at me. \"I'm thinking of going into hiding with you, my friend. I'm too old to constantly be reminded of saying things this one doesn't condone; and too young to risk being killed by her mother when I refuse to back her up in moments like these.\"\n\nThe young man laughed a little too loudly.\n\n\"Ian, this is Lonwabo.\"\n\nI ignored Zama's words and the young man's outstretched hand. Liv's thick hair was blown out and tied back... and my fingers itched to undo it.\n\n\"You look beautiful,\" I said.\n\n\"Thank you.\"\n\nThe weeks I'd just gone without her company were nothing compared to the pain of seeing her like this. The only way I could wish her happiness with that young man with the showy car was by blocking out the memory of our kiss.\n\nI owed that much to Zama, my closest friend in the world. And I owed it to Olivia above all. And so the longest month of my life was the one in which I saw her only once -- looking exactly like my dream come true.\n\nAfter they'd driven off, Linda linked her arm through mine and drew me into the house. \"I was quite surprised to see her getting ready for a date tonight -- surprised but happy. She's been cooped up in the house for weeks. It's good that she was no longer hounding you, but I didn't want her so isolated either.\"\n\n\"She never hounded me, Linda.\"\n\n\"Oh, you know what I mean.\" She led me through to their tv room. \"When she was young, her peers were constantly talking about boys, clothes and movies. My daughter was obsessed with books... and you. I kept telling her not to intrude so much on your time and your marriage.\"\n\n\"She's brilliant, and I've always enjoyed her company.\" Little ripples appeared in the drink Zama handed me, so I immediately placed it on the coffee table to hide how shaken I was. \"My marriage suffered trauma far more serious than a bright girl in love with the books in my library and the fireflies at the bottom end of my land.\"\n\n\"Bright is right,\" Unfortunately Zama, as usual, sided with me. \"That young lady is walking sunshine -- and I don't blame you for adoring her light like a sunflower.\"\n\n\"I'm well over six feet tall and can make a fist the size of your head.\" I narrowed my eyes at my grinning friend. \"No insult to the bouquet your wife brought me a couple months ago, but I'd be happy to complete my days without being called a delicate flower ever again.\"\n\n\"Actually sunflowers are symbols of strength and loyalty,\" Linda corrected helpfully. \"A description that fits you perfectly. Even I admit that you're the only person I know who's loved and protected our children as we have. And been more loyal to Olivia than anyone I know.\"\n\n\"Linda...\"\n\n\"No, Ian. Zama is spot on: everywhere she goes you turn to watch... obviously she is your sun.\"\n\nLame jokes were my forte. And I knew that I was merely the victim of the lame teasing that had been passed around our little circle for decades. But this time they were inadvertently poking fun at a raw truth burning at the centre of me. All the reason I stayed away for the weeks that followed\n\nOlivia was, indeed, my light. My sun.\n\nChrist.\n\nWhat breed of swine longed for his best friend's daughter?\n\n<p align=\"center\">*** *** ***</p>\n\nOn the last day of summer, I was startled from my nap by a knock at the door. I hadn't noticed sleep take me, but supposed it was to be expected after a couple months of little sleep. It was disorienting to wake to a darkening sky, so it took me a minute to understand what the knocking was and that I needed to go answer it.\n\n\"Hi.\"\n\nI blinked. \"Liv...\"\n\n\"Look what I made.\" She held her arm up to show me a woven bracelet that hung a little loose on her wrist. \"Not a masterpiece, I'm afraid. Told you it's been ages since I've had any practice.\"\n\n\"You should have just given that blasted kit to one of your little cousins.\"\n\n\"Oh, never.\" A small smile played on her lips as she shook her head. \"I was raised better than to regift, Ian. You know that.\"\n\nI dropped my eyes at the way my name sounded on her lips. The sun would be gone soon.\n\n\"Why are you barefoot -- again?\"\n\n\"I was just out in our garden. I didn't know I was on my way here until I was halfway up the road.\"\n\nI inhaled as she entered. I'm sure we could be anywhere in the world and the scent of her would always remind me of summer in our paradise.\n\nSomething drifted past us and her eyes lit up with delight.\n\n\"Look who just followed me in,\" she smiled. \"You know, I'm rather sweet on the thought that the fireflies followed me home this year.\"\n\n\"Goddess of sunflowers and fireflies. According to your mother, your worshippers would be guarunteed endless sunshine and eternal love.\"\n\nHer gaze held mine. \"I thought I was happy when you started calling me a woman. Now... Well, I've never been called a goddess before.\"\n\nHer hair was all over the place, fluffy and blowing into her eyes, and the dress she wore was short. Its colours matched the whites, blues, greys and gold of the woven band on her wrist. It took conscious effort not to step back from the pull I could never again deny.\n\n\"I'm sorry about...\" I didn't know what to say. \"Sorry.\"\n\n\"No, you aren't.\" She pushed her hair back. \"And neither am I.\"\n\nShe was right. I supposed we couldn't spend as much time together as we had -- especially all this past summer -- and not be able to read each other. I didn't regret the kiss. Maybe if I did, I would have been able to trust myself to let remorse rein me in. Instead the passion the kiss had awakened had shaken me enough to make me keep my distance for the last couple months.\n\n\"You'd make a great Claus character -- you've always lived with equal ease in both reality and fantasy.\" I turned and headed to the bar room, sure that she would follow. \"Remember the time we read 'Bride in the Morning' and watched 'The Sacrament' on the same day?\"\n\n\"How could I forget? You made me beg for a year before agreeing to explore his works with me.\"\n\nShe beat me to the crystal decanters and poured me a whisky. Knowing that we were in an unusual moment even for us, she deftly mixed herself a martini without hesitation. The smoothness of her movements made me take deliberate pause.\n\nWho was in charge here?\n\nI gathered my thoughts. \"I'd already put you through Chekhov and Dostoevsky that year -- Nietzsche and Sartre the year before. I was simply trying to give you a break before your exposure to Claus.\"\n\n\"Liar.\"\n\nIt was remarkable that I'd strayed this far from the truth within five minutes in her company. More so that she was so good at calling me out on it.\n\n\"You're terrible at respecting your elders.\" My joke came out deeper than intended.\n\n\"As are you at respecting your crush.\"\n\nThe whisky burned me. I coughed. Even as my brained barked that my reaction looked guilty in its exaggerated chaos, more coughs exploded as my body tried to eject the thing in me that she had pinpointed so succinctly.\n\n\"Liv, I don't know what you think --\"\n\n\"What I remember most about our Claus days -- aside from how you so predictably and obviously were stalling reading my picks with me because you were waiting for me to be 'old enough',\" her pink manicure danced the air-quote, \"was the quote by that director. Remember that quote? I remember it because I asked you what one line meant and you gave me some unimaginative answer.\"\n\nI knew her well enough to know that she wasn't about to back down any time soon.\n\nI had to confront her head-on. \"Where is this heading?\"\n\nOlivia sipped her drink; the oversized wristband slipped down her arm a little. \"The line that stayed with me was 'Claus constantly sets desires against inescapable reality, the children's flights of fantasy against the grim reality of the adults.' That was the line that led to your generic bullshit.\"\n\n\"Liv.\" Deep-toned warning again.\n\n\"Desires set against inescapable reality... Ain't life a bitch?\"\n\n\"Olivia --\"\n\n\"Yes, I know: language.\"\n\n\"No, I was going to say...\"\n\nWhat??\n\nShe came around to the front of the bar counter and stood before me. Her dress, though short was also loose, and her movements made it pick up the light. The greys got highlighted as silver.\n\nShe put her palms to my cheeks, but the rest of her didn't touch me. \"What is it, Ian? I think it's been long enough, don't you? How about a little straightforward honesty now?\"\n\nIt was strange how I felt both electrified and numb at the same time.\n\n\"I wasn't going to berate your language,\" I said. \"But I wasn't going to confess to some generic decoy either. I meant my answer back then.\"\n\nShe stepped back. As soon as her touch left me, I was sure that I needed it. Strange how immediately and intensely we miss the things that matter.\n\n\"Oh. I'm sorry.\" Her words came out on something of a desperate laugh. \"I thought... I was so sure that you felt... Well, shit, it doesn't matter, does it? The result is still --\"\n\n\"Olivia, for the love of all the angels, please shut up.\"\n\nHer next laugh was louder, also more disjointed. \"All the angels, really? They're all at risk, are they?\"\n\n\"The literary saints at very least.\"\n\n\"Well... Gosh.\" I appreciated her ability to stabilise me and our world with humour. \"Considering the umpteenth novel about a witless girl being groomed by a love-professing, emotionally stunted, sadistic billionaire I've seen published... I'm actually going to take your plea seriously and pay attention so we don't lose better thought-out works due to the demise of the muses and saints.\"\n\nThis made me want to laugh with her. To shatter all the complications between us so I could simply have a good time with her.\n\nAs strange as getting to know Liv had been in the last three months, I enjoyed knowing she'd delight me in endless new ways. She'd always be herself and let me be me. And I could count on her to be there should I need someone to pull me back from the brink of insanity.\n\n\"We're all inspired in different ways, Liv.\"\n\n\"True,\" she half-nodded. \"But I do mourn not finding bookclubs with anything other than glittery vampires and delusional misogynists anymore. Who does a girl have to pay to discuss a little existentialism, tantric sex and the best brownie recipes like in the good ol' days??\"\n\n\"Tantra? We've never ever --\"\n\n\"Catch up already, Ian.\" She caressed my cheek again. \"What must I do to make you see I'm all grown up?\"\n\n\"I know that already.\" My own cravings made the words come out dark and sensual.\n\n\"Do you?\" She watched me with complete challenge and zero pressure.\n\nHow did she know how to do that?\n\nI took her hand in mine. \"I've known your father for thirty-five years, Liv.\"\n\n\"I've known him for twenty-three.\"\n\n\"I'm not kidding.\"\n\n\"And I am?\" She pulled back and regarded me neutrally. \"It's time to get your head out of your sexy bum and reallly listen to me, Ian Macallan.\"\n\n\"My head is in my arse simply because I'm not saying what you would prefer to hear??\"\n\n\"No, it's in your arse because you've been denying the last seven years.\"\n\nThe birds were back, chirping in the front garden this time. Their music was actually incredily beautiful in unison, but it pissed me off nonetheless. Olivia was vulnerable and I didn't want to hurt her. But I could shut up the intruding birds with acceptable reason.\n\nShe spoke on. \"When Helen left, something started changing... inside me. I warned myself against embarrasing myself with this stupid crush. I was bloody young yet into things way beyond my years and it needed to stop. So, I focused on the books and was content with our walks.\"\n\nI kept my gaze trained out the window. The birds were out of sight, but I felt I might be able to quiet them from where I was on sheer will alone. There were articles, writings I couldn't remember clearly in the moment, but works on energy and frequency. Surely, the birds would feel me, sense my displeasure, and stop with those beautiful sounds I didn't want to hear?\n\n\"When Helen left, I was sixteen. Gods, how ridiculous it always sounds when I express my life in numbers...\" Her words joined the excruciating chorus outside. \"But I have always been very realistic about the difference between what I feel and what I am. So, at eighteen, I was really relieved that the university I'd chosen also chose me. It was wonderful both because it's the best in the country... and because it's at the other end of the country.\"\n\nMy shoulders were tensed, my fists clenching. I knew I had to put my glass down before I crushed it, but couldn't bring myself to move just yet.\n\n\"Being that far away helped. I developed daily routines; I had adventures, I explored new places. Sure, I travelled each vacation to avoid coming home and making an idiot of myself -- but I did genuinely enjoy experiencing the places I'd read so much about. I met... new people.\"\n\nI downed the rest of my drink. Again came the urge to punch a man I'd never met.\n\n\"Ian look at me.\"\n\nI couldn't.\n\nHer sigh was a plea. \"So much happened in my five years away. I really and truly became me... Yet the moment I walked into your arms a few months ago, I instantly understood the feeling I'd spent five years fleeing. Something inside me is only alive when I am with you. Something burns bright in my heart. I don't know what it's called -- I just know it's been in hibernation for years and years.\"\n\nThe room was dark now. One little winged light fluttered in circles above us.\n\n\"Ian.\"\n\nI looked at her. Olivia, home three months now.\n\nOlivia, no longer the clumsy girl with more books than she could carry. No longer asking me what certain words meant or why I didn't like rollercoasters as much as she did. The lessons and library trips faded, as did the backpack and school uniform.\n\nSuddenly, all I had in front of me was the woman who had reorganised my house, advised me on business and cooked me breakfast after hacking her way into my kitchen and my heart. The woman who walked a certain way and told jokes better than the decade-old ones I still repeated.\n\nI finally saw the Olivia who had kissed me with water dripping from her hair. The woman saying excruciatingly beautiful things.\n\n\"I used to help your father sneak you sips of beer.\"\n\nOne corner of her mouth curled. \"Yes, you did. And you never stopped seeing me within that decade-long beer adventure. You saw all the parts that could fit in it, in the child-like innocence and harmless pranks and lessons, but not what I am now. Do you see me clearly now, Ian?\"\n\nShe had no idea the Pandora's box she was cracking.\n\n\"It doesn't matter.\"\n\n\"Of course it does.\"\n\n\"Why??\"\n\n\"Because I love you, you honourable dunderhead.\" She took a step back. \"Heavens bless me, how did I end up here?! In love with a dashing prince who healed me within weeks, but nurses his own wounds indefinitely! Here, patiently relearning the newness of someone who'd started out as an arts encyclopaedia to me most of my life... then suddenly stood a man before me this year...\"\n\nShe took one last sip from her glass then placed it on the counter. Her body was a sculpture of resignation.\n\nI stepped closer, feeling like a hypocritical hound for wanting to stem the flow of blood from a wound I was inflicting.\n\n\"I came home in professional humiliation determined to secretly nurse my broken heart then get back out there once ready...\" Her breaths were ragged. \"But something happened... I saw you and something new happened.\"\n\nI had to say something and wanted to. It was too much: to go through this turmoil and have it overwhelm me, then have that exprience confirmed as reciprocated in words even better than any I knew. I had to say something.\n\n\"You don't know what you're saying, Olivia.\"\n\nShe took another step back. After a deep breath, she took one more.\n\nI took one forward. \"Olivia, listen to me. Zama is my friend.\"\n\n\"No shit.\"\n\n\"My best friend, a brother. I'm crossing a line by feeling... I have no right to violate his trust like this.\"\n\n\"By feeling what?\"\n\n\"It doesn't matter.\"\n\n\"Damn it, stop tossing that around as an answer.\"\n\n\"Then stop asking all the wrong questions.\"\n\nShe headed back to the entertainment area. It had one of the four doors that opened onto my huge patio.\n\nLiv stopped with her hand on the doorknob. \"Are you ever going to let anyone in again, Ian...?\"\n\nNo words. I wasn't sure if I knew how.\n\nShe took that silence as my answer and walked out into warmth of the deepening darkness. From this end of my property, the city lights could be seen far below. Distant man-made fireflies.\n\n\"I told you that Claus was a realist!\" My unscripted need pursued her out the door. \"You asked me about the children's escape into fantasy in that play -- and I insisted that Claus was a realist. That the characters alternated their existences between reality and fantasy, but their creator was a realist.\"\n\nMy words stopped her as she was about to step off the end of my huge patio. The motion-sensor light flashed on.\n\nI'd complained when it was first being conceptualised, but this was one of my favourite spaces now. A built-in braai and fire pit were to the far left, benches surrounding the pit. The middle was open paving, potted plants and sculptures guarding its corners. And to my right was one of my favourite reading spots: a covered area with expensive patio furniture and the kind of elegance that I repeatedly credit to Linda Hani's eye for artistry. I've often come out to find Olivia snuggled in the custom-made oversized daybed to the far right beyond the patio set.\n\nI walked to where she stood, right at the end of the paved platform.",
        "She kept her back to me.\n\n\"I did mean those words, Liv.\" My statement made her tremble.\n\nThat was the moment the birds chose to go quiet. In fact, the whole world was resting, at peace. Our turmoil was observed only by the stars, peeking out one by one to witness my most monumental fuck up to date.\n\n\"You asked me about the fantasies in those plays, and I told you Claus was a very much a realist. I meant that.\"\n\nShe addressed me over her shoulder. \"Meaning I had to stop projecting my wishful self on his writing or... anything else.\"\n\n\"I didn't know back then what you were... feeling or wishing... but that's not what I was saying.\"\n\n\"Yes...\"\n\n\"No. I was trying to say he was my favourite realist... the one who believed there was so much more to reality than just the concrete. There's the subtle, unconscious elements. There's perspective and subjectivity.\" My voiced dropped. \"In the pursuit of truth and freedom, there are challenges, forbidden boundaries... and this insatiable longing.\"\n\nThis time she faced me.\n\nI had stepped out of the lit area and -- as programmed by their timer -- the lights switched off as I neared her. I took her in. Her eyes were large and bright with the lights on. With the night and moonlight outlining her, she was stunning. Ethereal. Divine.\n\nShit. \"Tell me you understand.\"\n\nShe took the last two steps back to me, rose up on her toes and pulled me down to her. And there it was again: the touch of her lips reminding me how much I'd longed for her kiss. My muscles seem to take form as she touched me -- my shoulders existinig only because she was running her palms along them; my arms reaching for her as soon as her grip tightened on my biceps to hold herself up.\n\nI pulled her to my chest. A brief flicker of concern warned me not to hurt her, but I still couldn't stop myself from pulling her closer, and closer still. I'd never had to hold anything back, though -- not with Liv.\n\nWhen my embrace tightened enough to make her feet leave the ground and her heart mesh with mine, she simply sighed and wrapped her legs around me. She held me even tighter. She deepened the kiss and stole the oxygen from my world.\n\nI had one arm around her, my other hand under her thigh. The pleasure centres in my brain flared up and hummed as my hand slowly smoothed its way up to her arse. An eternity was all I needed, forever -- to hold her like that and touch her until she melted.\n\nOlivia, this woman made of the unbearable curves that outlined and shaped my whole world, was light enough to embrace forever. Lifting her was nothing. Holding her meant everyting.\n\nWhen I put both hands on her behind, she ground herself against me. Thoroughly displeased with my t-shirt, she pulled at its neckline so her mouth could access the base of my throat. Open-mouthed, she sucked at my flesh and my steely cock nearly cut through my track pants.\n\nI knew my fingers had to be hurting her, bruising her behind, but I couldn't ease my grip. I couldn't restrain the growl that shook our quiet haven.\n\nHer fingers worked the bottom of my t-shirt up, her lips smiling against my skin. Soft palms slipped under the material to stroke my sides; hungry nails raked up my back.\n\n\"Watch those nails, woman.\"\n\nShe was used to my voice being deep, but she'd never heard it this gravelly before. Her breath caught at the sound of my lust. She stared into my stormy gaze long enough to show me something new too: I was very familiar with the darkness of both her anger and her sadness -- what I'd never seen before was the way flecks of gold depicted her arousal.\n\nHer nails dug into my shoulderblades. \"And if I can't help myself...?\"\n\n\"Do you really want to find out?\"\n\n\"Yes.\"\n\nI stepped up to the daybed and tossed her on it. She squealed, breathless laughter making her chest heave. Her eyes were wide and a little unsure as I braced myself over her.\n\nMy lips were right above hers when I whispered, \"Are you sure?\"\n\n\"Ian...\"\n\nI kissed her. Never had anyone ever made me want to taste their words as much as Olivia did. She spoke my name in a way that always had me grateful to hear it, made me crave her.\n\nAnyone watching us undress each other would never guess we'd never done it before. They might not note my sharp intake of breath at the sight of her, nor would they know I had to force in every inhalation after.\n\nCould just the sight of a naked woman keep a man alive?\n\nHer skin was endless chocolate, soft at the base of her throat, dipping into the secret parts of her navel and the backs of her knees. She looked up at me with such large, fearless eyes, I just knew I'd never need another breath. Just her, looking at me invitingly.\n\nThere were so many parts of her calling out to me -- tempting my eyes and hands -- but I found myself mating my lips with hers again. This kiss was deeper, sweeter. Her tongue, so precious, was more than I could stand. The taste of her, more than I deserved. My lips bruised hers; I felt it even as it was happening -- but I couldn't draw back and she wouldn't let me.\n\nI shifted and moved my hips more comfortably between her legs. That got her attention.\n\nOur kiss ended on her gasp.\n\nShe could feel the hard length of me pressed against her, but had no idea how close the intensity of that moment got me to embarrassing myself. Fucking imagine that -- decades of doing everything imaginable with experienced women... only to be brought to my knees by one so new to the powers she held. Especially over me.\n\nI pinned her wrists down above her head, one hand large enough to hold her in place. My other palm mapped its way up her side, but I stopped just below her breast. Her dark nipple, hard and upright, was the greatest temptation I'd faced up until that point -- but I couldn't allow myself to cup her. Not yet.\n\nQuizical concern coloured her gaze when she noticed the clenching of my jaw. All I could do was shake my head. Hers tilted a little in question.\n\nMy exhalation was ragged enough to be the answer she needed.\n\nWithout a smile fully forming, her cheek dimpled slightly. Followed by the slow yet deliberate rise of her hips. Fuck...\n\n\"You don't want to do that right now.\" My voice was rougher still, making surprise light up her eyes again. \"Seriously, Liv.\"\n\nBut she was too far gone. Even if she'd wanted to listen -- which the bloody woman rarely did -- her own body was giving off the sort of heat that meant I couldn't fault her for rocking a little faster. She was already so wet, coating the length of my cock as she pushed up until the base of me was pressed against her entrance, then all the way back down until her slippery clit rubbed up near the head.\n\n\"We need to work on your listening skills, lovely.\"\n\nIt was said to draw her back in line. Instead it coaxed a smile from her.\n\n\"You think so?\" she asked. \"I was just thinking it's about damn time you met your match...\"\n\nWatching her move like that was just too much.\n\nThe way her stomach muscles tightened so her hips could lift; the definition in her thighs when she planted her spread feet and thrust up more insistently... the mesmerising way her tongue wet her swollen lips. Trust me to find the one person who could kill me just by being with me... yet had left me feeling like I was dying when she was gone.\n\nI lowered myself on top of her and brushed her hair back. It was a mess -- covering the pillow beneath her head, sticking up or getting into her eyes at times, kinking at her temples where her sweat was gathering like dew.\n\nHer brow furrowed and I picked up the slight increase in her pace now that I was right on top of her. She ran her tongue along my shoulder up to the base of my throat. When her teeth sank into the flesh there, I cursed -- long and loudly.\n\n\"Okay, that's it.\" My grip on her wrists tightened as I rose up on my knees. \"When I am done with you, just remember one thing: you asked for every ounce of this.\"\n\nI started at her throat. My lips trailed that elegant column until my tongue pinpointed her pulse. By the time I worked my way down to her chest, her moans had started taking shape.\n\nI actually had to steady myself again before letting my mouth touch her breast. Her effect on me was something that would take getting used to -- but could never be denied. Overwhelmed by flashbacks of sunflower perfume and the lusciousness of strawberries on her tongue, the moment I took her nipple into my mouth I knew I was tasting the embodiment of summer. I rolled her nipple up against the roof of her mouth; I nibbled and sucked on her until the rolling of her hips began to jerk rather than roll. And, when her moans became my name again, I moved to the other breast.\n\n\"Ian!\"\n\nThe cry that pierced my highly wired brain made me realise the other sounds she'd been making had been loud cries as well. I had no idea how long I'd kept her pinned there, making love to nothing but her breasts -- but I did feel how the time had slowly shifted the balance between us. I still wanted to fuck myself into the deepest parts of her until the very sky split in two... but I was in better control now. Not something I could say about my fierce flame, however.\n\nOlivia's entire body gleamed.\n\nThe moonlight clad her in blueish silver, picking up the sheen of the sweat shimmering from her forehead to her calves. Her eyes were pleading with me, begging me for whatever her lips couldn't utter yet. But I was done following her lead.\n\n\"Hold on, lovely.\" My lips neared one of her nipples again. \"You're gonna want to hold on really tight this time.\"\n\nI laced the fingers of one hand with hers and used the other to still her hips. My tongue circled the nipple before me until her stomach clench involuntarily. That's when I took it in my mouth.\n\nWith all the time in the world, I drove her to the brink of madness again and again. Just as she had done me. Her back arched and her fingers felt set to break my hand -- a feeling that made me smile as I allowed her a few seconds reprieve while I lapped at the dew in the valley between her breasts.\n\nWhen I returned to the cooling breast without warning, it happened. Her face was turned up and to the east, as if seeking out the moon; her mouth open, to let out a deep moan so much like ecstatic sobbing.\n\nOlivia's body spasmed and rocked as she came.\n\nI kept her hands pinned above her head, but my other arm slipped beneath the arch of her back to hold her to me. I suckled on. I licked and nibbled her until she went limp, her ragged breaths beyond her control.\n\n\"Holy...\"\n\nThe moment she managed that one word, I knew she could take more. She was trying to beckon me up -- to kiss her, to make love to her, no doubt -- but I ignored the gesture.\n\n\"Please, Ian... I need you so much.\"\n\n\"And that's exactly what I'm giving you, baby -- all of me.\"\n\nExploring the curve of her hips, the dip of her navel, the gentle rise of her pelvic area with my hands and lips... that was a private ecstasy I could never describe. Not even to her. I could never make her understand how much of a woman those parts of her made her in my eyes; nor what it felt like to touch and kiss them for the first time. I could never explain how I already knew that an eternity adoring her body would never be enough. Not for the man who didn't deserve even the day he was granted.\n\nThe kiss I placed right at the peak of her left hip almost brought tears to my eyes. Maybe those would explain more than words ever could.\n\nHer legs were trembling as I widened her parted thighs. Sexual energy vibrated all the way up through her, making her glow even more. When I put my lips to her innner thigh, an instant shock of pleasure punch right into my skull and gushed down my spine. God almighty, the scent of her. Not flowers, not water... Olivia. \n\nIt was only her next cry that awakened me to the fact that my teeth had a grip on her tender flesh... and that her hips were rolling urgently again.\n\nI soothed her, licking the bite and rubbing my hands along her torso. \"Not yet...\"\n\n\"What are you doing to me...?\" Her words were as shaky as the hands she used to cup my face. \"Shit... Baby, I don't think I can take much m--\"\n\nHer last word transformed into a long moan when I licked at the edge of her cunt. A brief lap up her labia; then another. A gasp from her when I moved on to her other thigh, only to have her jerk again when I returned to the centre of her.\n\nHer trembles increased when I finally took her clitoris in my mouth. It was slick, swollen, and so sweet covered in her juices. I wanted more, pushed her thighs further apart so she couldn't keep any iota of her essence from me.\n\nBy the time I pushed my tongue into her pink heat, she was dripping. I drove deeper, past the ridge of her entrace and onwards until I couldn't reach more. Curling my arms under her thighs steadied them enough to keep from flopping all over the place; reaching over to spread her pussy open exposed her enough for me to see all she was offering and taste all I wanted.\n\nHer moans built back up to the keening sobs again. Fuck, she made orgasms sound so primal -- I could live on just knowing I did that to her. Her fingers combed through my short hair, got a good grip, and pulled me even deeper.\n\nMore. I couldn't get enough... and she wanted more.\n\nTwo fingers. I didn't have to worry about easing into her -- I knew she could take them. I smoothly pushed two fingers right up into the centre of her, curled them, and rubbed as I sucked her clit back into my mouth.\n\nMy name was the only warning I got before she soaked me. Her orgasm wracked her body, yanking her until she half curled in on herself. And still my mouth stayed on her. This time the spasms took longer to subside, so I eased my way back up her body and held her until the little gasps and sighs petered out.\n\nAfter a few minutes silence, I smoothed her hair back and looked down at her. \"You okay, baby?\"\n\nHer eyes were a little unfocused, a little amazed. \"How did you...?\"\n\nI grinned. \"Let's just say I've been doing this a while.\"\n\nShe tried to laugh, but it came out as soundless exhalations. \"Someone... ought to hand you... an honorary doctorate or something... A medal... at the very least.\"\n\nThat got me. I was so hard I was practically seeing double -- and she could still make me chuckle. \"If you have energy for kidding around, I'll take that to mean you definitely have energy to get started.\"\n\nHer eyes widened in shock once more. \"Started? You turn my whole world and everything I've ever experienced in it inside out... then tell we haven't even started yet??\"\n\n\"I'm right here when you need to hold on, lovely.\"\n\nWhatever she'd planned on saying next died before it formed. I was holding the head of my cock right at her entrance. She was ready, more than ready -- but I needed her to know before entering her. Despite all we'd already done, I had the urge to check with her one more time; despite her declaration inside my house, I needed to make sure the moon heard it, too.\n\nI wasn't sure what to say or ask. In the end, that didn't matter.\n\nOlivia tilted her hips forward and pulled me to her.\n\nMy cock was undoubtedly more to take than my fingers -- so, though her wetness and hunger helped -- I held myself in check the moment the head nudged in. Total chaos erupted inside me, but I gritted my teeth and watched her. With each inhalation, I felt her relax and take a little more of me in.\n\nJesus, nothing had prepared me for the searing heat of her.\n\nAbout halfway in, I distracted her from taking any more of me. I kissed her, I savoured the moment and breathed with her. And, when my senses were somewhat coherent... I pushed the rest of the way into her.\n\nOlivia gasped. And I could feel the formation of that sharp intake all around my cock.\n\n\"Ian, I've never...\"\n\n\"I know. I know, lovely...\" I pushed deeper, making her moan. \"Me neither.\"\n\nWe began to move together, as if each sensed the other was ready. In desperate agony. Olivia had her legs wrapped around me, her hands gripping my arse. I demanded nothing less, holding her to me as I pumped into her, my grunts urging stronger thrusts from her.\n\nGod help me, the more she gave, the more I craved.\n\nI'd always been the sort of man to hone my attention on the woman in my arms, make sure I held back to give her all she needed. But Olivia had me weak and unfocused. I couldn't restrain the savage pistoning of my hips anymore than I could the pumping of my heart.\n\nHer name. As I felt her clench repeatedly on my cock, I said her name. I repeated it until I was yelling it between her cries and my grunts. And I only stopped when she silenced me with her lips and tongue.\n\nWhatever she was moaning as she orgasmed melted in my mouth. I wouldn't have understood it anyway -- the way she tightened on me erased everything else from my mind and I just let go. I growled as I shoved myself into her.\n\nThen I came so hard I was convinced the stars had fallen to the ground.\n\nIt went on for so long, I'm not even sure when I reentered my own body, when I started feeling my own heart and Liv and the warm air around us again. When I opened my eyes, the diamonds had returned to the heavens, and Liv was watching me through half-closed lids.\n\nI kissed her temple. \"You never cease to amaze me.\"\n\n\"Look who's talking.\" Her response held only a fraction of her usual sass. \"Your perfect suits and cool demeanour are highly misleading, Mr Macallan...\"\n\n\"When you said you never...? I meant it when I told you me neither.\" I was serious as I took her in. \"I've never felt or done anything like this, Liv. Not with anyone.\"\n\nHer eyes closed for a few moments. When she opened them again, they were full of warmth and happiness -- and a little curiosity.\n\n\"Does 'never' include...?\" Her eyes flicked downward between us then back up to mine.\n\nI knew what she was talking about. \"That'll go down... soon.\"\n\n\"But you did come, right?\"\n\n\"Enough to momentarily lose my mind.\"\n\n\"Because there is way too much of a mess down there for that to be all me again.\" Flecks of gold were rebuilding in her light brown eyes. \"Although, after the mess you made of me with your tongue and -- hmm...\"\n\nHer sentence cut off as the brief memory made her moan sharply and clench on me.\n\n\"Well, fuck, woman...\"\n\n\"I'm not doing anything. I honestly can't help... this.\" She took a few breaths, smoothing her palms down my back to my arse. \"If anyone is up to something, you are. Who on Gaia's green grass stays hard after all that?!\"\n\n\"Not me. Not usually.\" I rubbed the side of my nose against the side of her, giving an experimental thrust. \"Not since I was a kid anyway -- when nothing short of a lightning strike between the legs could've gotten it to go down.\"\n\nShe was serious now, the gold brighter now, watching me as I watched her. I didn't go limp as expected. Instead my thrusts allowed me to take in the slick heat of her, the smooth tightness. I pushed all the way until I felt the bump of her cervix -- a small sound escaped her. As I pulled out, I was aware of the ridges just inside her entrance and the way her opening clung to me. It was too sweet, so I pushed back in to do it all again.\n\nI was just enjoying her, loving our time together -- but not trying to start anything again.\n\nUntil I felt her arch her back slightly and fit her hips to mine again. The feeling was too exquisite not to have an effect even on a man way past his boyhood prowess. One moment I was about to explain that I rarely got it up twice a night anymore, let alone staying hard for two orgasms in a row... and the next I was thrusting slow and deep, feeling the heat gather up the backs of my legs and shoulders.\n\nI didn't really expect it to lead anywhere. But the more I told myself that, the more I felt the buildup. Her goosebumps and hard nipples. The possessive hold of her hands over my arse. The fire in my chest... The unbearable heat of Olivia's clenching as her cunt reawakened and began milking me making my balls tighten.",
        "Through all of it, I kept my thrusts deep and steady. Through all of that I grew even harder.\n\n\"Ian...?\"\n\n\"One more, baby.\" I lightly nipped at her lower lip. \"Ready to give me one more?\"\n\n\"I don't think...\"\n\n\"Here.\" I lifted first one leg then the other, hooking them over my arms before tucking a pillow under her. \"I'll do it for us. You just take... this. Aah, fuck, yes. Take me, baby.\"\n\nIt was a test of her limits, I knew that. Not just driving her to yet another orgasm, but the way I was doing it. I was not a man easily taken in full measure... especially in the bedroom.\n\nYet, as in every other room in my house and every chamber of my heart, Liv let me be me, took it all in... and replaced what I gave with herself.\n\nPace unchanged, I was took in the way her breath was speeding up as she held onto my shoulders. Fuck, the sight of her falling apart like that made me want to drive even deeper, to shred my own flesh and tear everything she ever was or knew apart... so we could create something new that night, something ours alone.\n\nLooking down between us at the sight of my cock, coated in her juices and plunging again and again into her dark beauty, powered me on even more. I thrust and pushed until she couldn't find her own voice anymore and her eyes blazed gold, tiny teardrops on the tips of her lashes. I'd trade my soul for those -- to make more happy tears and to stem the anguished ones.\n\n\"You ready, baby...?\" I couldn't take much more myself. \"You're ready to come for me?\"\n\n\"Fuck... I love you so much.\"\n\nI wanted to respond, but her nails were already digging into me as she cried out. Christ. A sort of white blindness crept in on me as my thrusts lost their smooth rhythm and I ended up rutting into her, making her take more than anyone else could've handled as I exploded. Slamming in as far as I could go until my legs went weak and my arms shook.\n\nI collapsed on top her, finally releasing her legs so she could lower them. Even as I worried about being too heavy for her, Liv wrapped her arms around me in a shaky embrace.\n\nAfter a few minutes she mumbled something about needing to breathe then held on as I rolled onto my back. I apologised for crushing her, but she was already asleep by then and didn't hear me. I pulled a nearby throw over us then tucked her more snugly in my arms with her head on my chest.\n\nA faint voice of reason whispered that l'd just shattered the gates of hell... but I barely heard it in my contentment. Staring up at the stars I knew that, even if I were given another chance for every shining light up there, I'd choose to end this night with Olivia Hani in my arms. A billion times over.\n\nI fell asleep with no idea what morning would bring, but a grateful smile on my face.\n\n<p align=\"center\">***</p>\n\nThe blasted birds again.\n\nThe sky was turning pink and the birds were ecstatic. The fresh smell of grass and flowers surprised me a little, as did the cool air. Then I remembered where I was.\n\nMemory of the previous night had me reaching out next to me before my brain had even pieced together coherent thoughts. \"I love you, too, Liv.\"\n\nNothing.\n\nAlert now, I sat up and looked around. No one.\n\nThe only thing left of Olivia was the wristband now on my wrist.\n\nI panicked, wondering if she regretted our night together, feeling like a wretched arsehole for not keeping my hands off her after managing it for months. She must have hated me to sneak away like that. And Zama? Fuck knows what he would do once he found out.\n\nI wanted to stay in that bed and pretend the rest of the world didn't exist. But there was a shit storm to face.\n\nI pulled on my pants and grabbed the rest of my stuff. The wristband, loose on her, was a perfect fit on me.\n\nAs I walked through the house turning off lights before my shower, muted sounds reached me from the kitchen.\n\nLiv...\n\nShe wasn't furious or devastated, after all.\n\nMy heart filled up so suddenly it hurt.\n\nWe could have breakfast together. Talk. Sort through what we're feeling and how we want to handle... things.\n\nI rushed into the kitchen. To find Linda Hani pouring herself freshly made coffee. She was undoubtedly surprised to see me in the state I was in, but barely showed it.\n\nThere was a heaviness about her shoulders. \"I'm so sorry, Ian, I was trying not to wake you. The plan was to make a brew and just sit here quietly. I can't believe this was loud enough to wake you upstairs... I hope it's okay, me being here. Zama's taking Liv to the airport, and I suddenly felt so sad and alone in the house.\"\n\nSomething was closing in on me. \"Alone?\"\n\n\"It's ridiculous, I know -- Liv hasn't lived here in five years.\" She was adding cream to her mug, oblivious to my tone and the blood rushing from my face. \"Still, having her home for three months made it difficult to say goodbye again.\"\n\n\"Airport...?\"\n\n\"Yes. Didn't she tell you? Now, that is just unforgivable.\" This time she did look up. \"She accepted a new job offer a couple days ago. Just yesterday she was saying she couldn't leave without seeing you one last time. She was meant to come over last night, but must have fallen asleep or something. I'm sure she was worn out after the emotional day she'd had preparing to leave again, poor thing.\"\n\n\"Where is she going?\"\n\n\"She's off to three months of intensive training -- then pretty much a lot of learning on the job. There's a clothing group that expect her to do some exciting continent-hopping over the next year or two -- which will be her crash course in how trends are formed, how the company she'll be based in operates, getting her settled into assembling and running their future women's basics lines. I'm sure she'll be much more comfortable with those types of deals and numbers than the ones in her previous job.\"\n\nI slowly walked out without excusing myself.\n\n\"Are you sure you should be up this early, Ian?\" Linda was concerned now. \"You don't look so great... Why don't you try get some more sleep?\"\n\n\"I'll take a shower.\"\n\nShe was right in front of me, telling me she loved me. And I didn't say it back when I had the chance.\n\nThe house had that feeling I hated again, that emptiness. The quiet greyness of summer's departure. And I didn't know how to pretend anymore that I loved it when my world dulled and my sun departed.\n\nI shut the door to my bedroom, trying to figure a way out of my own pain.\n\nThat is when I noticed the book on my bed. A collection of Doris Lessing works.\n\nA note peeked out from between the pages of \"The Grandmothers\":\n\nI'm so sorry, Ian.\n\nI tried to say goodbye. And failed miserably.\n\nI don't know when I'll be back, but please keep the wristband until then. Hopefully when I return for it, I'll have figured how to take my heart back as well.\n\nThank you for a night I will never forget...\n\nYours,\n\nLiv\n\nShower forgotten, I wandered back downstairs.\n\nLinda was standing at the first set of patio doors, looking out over the garden.\n\n\"Your little guest is gone.\"\n\nI caught her meaning immediately and looked up. No little flying insect. \"Must have left in the night.\"\n\n\"A pity,\" she huffed. \"I was looking forward to meeting your soulmate.\"\n\nI watched the carefree birds for a while before answering. \"Maybe it's best this way.\"\n\nFor once she didn't argue. I didn't have the strength to face another lecture on my love life, but her silence this time hooked into my already bleeding heart.\n\n\"There goes Helios,\" she murmured, \"heading on high to travel beside my Livvie.\"\n\n\"You were right about her, Lin -- about her light and her spirit. And, much as it hurts, you're right to give her the whole sky to fill and explore.\" I blinked at the sun rising to our right. \"You're right about so many things.\"\n\n\"All I know in this moment is the beauty and truth of one thing.\"\n\nI nodded, touching a palm to the glass door. I knew it, too, and that gave me the strength to send Liv my love and wish her well.\n\n\"Fire flies,\" I whispered.\n\n<p align=\"center\">*** *** ***</p>"
    ],
    "authorname": "BaalatErotas",
    "tags": [
        "summer",
        "fireflies",
        "sunflowers",
        "sun",
        "swimming",
        "paradise",
        "black woman",
        "white man",
        "older man",
        "exhibitionism"
    ],
    "category": "Interracial Love",
    "url": "https://www.literotica.com/s/fire-flies"
}
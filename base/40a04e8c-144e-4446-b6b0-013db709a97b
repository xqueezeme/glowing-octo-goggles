{
    "title": "The Interview",
    "pages": [
        "I don't know why I agreed to this. There was a reason why I avoided these kinds of conversations. I had a sinking feeling in my stomach that this wasn't going to go well.\n\nRounding the corner, I saw the coffee shop. There was safety in being in a public place, and I picked up my pace. The sooner we started, the sooner we got it over with.\n\nAs soon as I walked through the door, I saw him. He looked exactly like he did in the selfie he sent me, so at least he wasn't hiding or trying to be fake... yet. I walked quickly over to where he was sitting and threw my purse on the table, just a little too hard. Oh well.\n\nHe looked up and a broad smile lit up his face. \"Hi!\" he said, excited.\n\n\"Hello,\" I replied, somewhat coolly.\n\nHis smile wavered briefly, but didn't falter completely. \"Thank you for coming,\" he said, cheerfully.\n\n\"Sure,\" I said. \"Whatever.\"\n\nI was being a rude bitch, which wasn't normally my style, but I was bracing myself for the inevitable personal questions.\n\nHe picked up on this. \"Are you okay?\" he asked. He seemed genuinely concerned.\n\n\"Yeah, why wouldn't I be?\" I challenged.\n\nHis mood seemed to be turning more cautious. \"Well, you seem to be upset about something,\" he said, choosing his words carefully. \"When we were talking online, you seemed a bit more...\"\n\n\"Easy?\" I challenged. Might as well get it all out up front. Then I could get home sooner.\n\nHe flinched as if I had slapped him. \"Approachable,\" he said quietly.\n\nI sized him up for a moment. He was a lot shorter than I had expected. True, I had been expecting some neckbeard wanna-be granola \"alternative\" writer, but this guy was so clean cut I wasn't sure if he belonged to the Young Republicans Club or something. I'm of average height for a woman, but even sitting down he looked like he was shorter than me.\n\nI relaxed a little. He certainly wasn't a threat. Short cropped blond hair, slight build. The only thing missing from his non-threatening look was an argyle sweater.\n\n\"Look,\" I said, trying to relax my tone but winding up sounding exasperated. \"I've been doing some thinking since we chatted online. I know what this is going to be, and I just want to get it over with.\"\n\n\"I'm sorry,\" he said. I think his apology was genuine. \"I didn't mean to upset you. We don't have to do this.\"\n\nHe started closing up his laptop and putting his things away. \"Can I at least buy you a coffee for your trouble?\"\n\nI was a bit stunned. He gave up really easily. Maybe he wasn't going to be a dick after all.\n\nI reached out and put my hand on his arm. My bright red fingernail polish seemed vibrant against his pale skin. \"No, wait,\" I said. He stopped. \"I'm just...\"\n\nI sighed. \"Look, let me go get my own coffee, and we can start again.\"\n\n\"I can -\" he began.\n\n\"No,\" I said, firmly, pressing against his arm a little more. \"I'll get it.\" The last thing I wanted is to have him think I owed him anything, whether it be private information or something else. Not for a fucking coffee, I thought to myself.\n\nI grabbed my purse and headed to the coffee line. Relax, Cherie, I scolded myself. He hasn't done anything wrong, and after all, you agreed to this. \n\nI stood and waited for my drink, knowing that they were going to mispronounce my name. Just one more irritation in a day that seemed to be determined to keep me in a bad mood.\n\n\"Cherry?\"\n\nSigh. I went and got my drink.\n\nWhen I returned to the table, he raised an eyebrow. \"Cherry?\" he asked.\n\n\"Oh yeah,\" I said. \"People seem to have incredible difficulty saying it properly. Sometimes I think I should just change it to Sherry so that people can pronounce it more closely.\"\n\n\"Mais oui, c'est tres jolie, le nom Cherie, ma cherie, he grinned. \"C'est dommage que personne ne peut pas pronconer correctement.\"\n\nI smiled despite myself. Maybe it wasn't perfect French, but it'd do. \"Yes,\" I agreed. \"I think it's a pretty name too. And yes, I don't think it's too much to ask for people to at least try to pronounce it correctly.\"\n\n\"Do you get called 'Cherry' a lot, then?\" he asked.\n\n\"Ever since I was a little girl. That was fun, let me tell you.\" Memories of being teased in the girls' locker rooms during puberty began to resurface. Once again, I wasn't sure why I agreed to this.\n\nHe must have read the look on my face. \"I'm sorry,\" he apologized again. I could see that this was going to be a big part of his personality.\n\nI shook my head. \"No, it's okay,\" I said. \"That's why we're here, right?\"\n\n\"Only if you want to be. We can simply have a nice chat, or you can leave if you wish, I don't want you to feel obligated,\" he said, trying to give me an out. I had the choice to take it or leave it, but if I continued then I couldn't keep holding my mood against him. It wouldn't be fair.\n\n\"Look... you know, I'm sorry, I can't remember your real name. All I know is the handle you use online,\" I said.\n\nHe smiled. \"Bubba,\" he said without missing a beat.\n\nI reacted. The what the...? look on my face must have been comical, because he laughed so hard he began to wheeze.\n\n\"Okay, okay, sorry,\" he said between gasps for air. \"The look on your face... so funny...\"\n\nI had to confess, he had a demeanor around him that was very difficult to remain stand-offish. He did have a way of lightening the mood.\n\n\"Tommy,\" he said, finally.\n\n\"Tommy?\" I asked. \"How old are you, twelve?\" Bitch mode, again.\n\nHe didn't rise to the bait. \"It's completely mercenary,\" he said, leaning in conspiratorially. \"I'm not a very big guy, as you may have noticed, and I've found that it's easier for people to engage if I use the name 'Tommy' instead of 'Tom' or 'Thomas.'\"\n\n\"Why?\" I asked, genuinely curious.\n\nHe shrugged. \"People like to feel like they are in charge,\" he explained. \"I can often avoid conflict because people don't need to see me as a threat. It just makes my life easier.\"\n\nI knew what he meant, and told him so. \"But,\" I continued, \"Tommy, I know I agreed to help you with this, but I have to tell you, I've been asked about this stuff for a long, long time. I'm tired of being treated like a freak or abnormal. I'm just a girl. I'm a bit nervous about where this conversation is going to go.\"\n\nHe nodded. \"I can understand that,\" he said. \"I don't want to give you any reason to be worried. If you want to stop at any time, just say so.\"\n\nI took a sip of my latte. Tommy looked at me, expectantly, and I suddenly felt a pang of guilt for being so rude to him when I first arrived. There was something about him, something delicate, that made me trust him a little more.\n\n\"Okay,\" I said, sighing. \"Let's get this out of the way, then. I'm 27 years old, 5'7\" tall, 130 pounds. I'm 36-26-34, and I have a six inch penis...\"\n\n\"Whoa, whoa!\" he said, a look of true shock on his face. \"Wait a minute!\"\n\nI stopped, surprised. \"What? Isn't that what you want to know?\"\n\n\"No!\" he practically exclaimed, and then realized he was in public and lowered his voice. \"I mean, no!\"\n\nI was confused. \"I don't understand,\" I said. \"I thought that's why we were here.\"\n\nHe shook his head. \"It really doesn't matter what your measurements are,\" he said, his eyes flicking over my body. \"Any of them. What matters is who you are as a person.\"\n\nI simply looked back at him. I wasn't sure what he wanted.\n\n\"Look, you've agreed to help me out because I want to be a writer,\" he continued. \"I want to know about who you are, not what your parts are. There's no way I can calibrate my experience to yours - I don't think anyone can. Whether you are 100 lbs or 300 lbs, whether you are 'average' or whatever - doesn't do anything special.\"\n\nI hesitated, thinking. \"Okay, so what do you want to know, then?\" I asked.\n\nHe paused. \"Sorry,\" he mumbled. \"Now all I can think of are these 'parts' questions.\"\n\n\"Go for it,\" I sighed. So much for a departure from the normal interrogations.\n\n\"Can you get pregnant?\"\n\nI wasn't expecting that question yet. Normally people want to ask me about whether I used to be a boy (No, I've always been a girl), if I've had treatments (my breasts are natural, thank you), what was I born like (like, oh my god! like, I was born, like, exactly the way I, like, am now. Like.), that sort of thing.\n\n\"No,\" I said. \"The plumbing isn't fully formed, because there needs to be room made for the other plumbing.\" I hoped that was clear enough. I really didn't want to go into a deep anatomy class.\n\n\"And to your next question,\" I continued, \"No, I can't get anyone else pregnant for the same reasons.\"\n\n\"Do you mind if I take notes?\" Tommy asked, indicating his laptop. I shrugged. He started typing.\n\n\"So you don't have any testes?\" Clinical question, but a reasonable one.\n\nI shook my head. \"No,\" I said. \"Do you want to see?\" It was supposed to come off as a joke, but it came out considerably more harsh. Stop being a bitch, Cherie!\n\nTommy politely took my snark with a small smile, and ignored the comment completely. Good for him. \"Have you ever met anyone like you?\" he asked.\n\nThis was a new question, and I was curious as to where he was going with this. \"Not in real life,\" I admitted. \"There were a few people online who claimed to be intersexed or futanari, but I have a feeling they were just role-players.\"\n\nHe looked at me. \"Why?\"\n\n\"Things that they said,\" I said, shrugging. \"I don't live and breathe by my genitals, but they did.\"\n\nI thought about the times when I was in my teenage years, trying to make sense of my body and the world around me. I read through the literature for both boys and girls, reading about how the changes to their bodies were normal, how certain milestones were reached. None of them ever applied to me. I never had wet dreams, I never got periods. I simply didn't have the equipment for either of them.\n\nWhen I was going through puberty and suddenly realizing that people were looking at my forming breasts was hard enough. Needing to explain why I got special permission to avoid gym class to anyone and everyone who asked - student and teacher alike - didn't help.\n\nI explained to Tommy that I couldn't simply ask anyone else that I knew, and my parents didn't believe in therapy, so I could only really look online or in medical journals to find out what was going on with me. Everything I found happened to be listed as \"abnormal,\" even though I didn't feel that way. Whatever happening to me was normal - for me. I just didn't know it.\n\nGrowing up, I met people online who wanted to help, but by and large they were simply looking for a cure for their fetish. Once they realized I was underage, most of them - fortunately - disappeared for good. Others didn't, but I was smart enough to never put out my real name or pictures of myself. \n\nThat was more than ten years ago, and being a stoic woman today only belied the daily angst of feeling like I was about to be discovered at any moment. I could only imagine how much of an impact such an upbringing still had on me.\n\n\"Do you think that there are other people like you?\" Tommy asked, a welcome barge into my reflections.\n\n\"Oh, I know there are,\" I said.\n\n\"Do you want to meet them?\" he asked.\n\nI was really grateful he asked that question. Most of the time people simply didn't think about what I wanted. \"Actually, no.\" I confessed. \"I know you meet people who have something in common with you, but that's just not the way I want to establish a relationship.\"\n\n\"It's kind of how we met in person,\" Tommy said, challenging me.\n\n\"Do you have a pussy, too, Tommy?\" I said, this time with a grin.\n\nBless him, he blushed bright pink. \"No,\" he said, looking down.\n\n\"Well, then, there you go,\" I said. I couldn't help but keep smiling at his reaction. He actually did look pretty cute.\n\n\"When do people find out about your...\" he trailed off, uncertain how to finish the sentence.\n\n\"Condition?\" I prompted.\n\n\"No,\" he said, thoughtfully. \"I was thinking about how it must be difficult to find the right time to let people know that you're different, because it's not as if there's a point in time when you reveal this to people. No one else has to choose a time to talk about their genitals unless they're going to see it, right?\"\n\nI was a bit stunned. Tommy seemed to be remarkably insightful. He was looking off to the side, his mind working, but he continued.\n\n\"It seems like there would be a constant pressure on the relationship, then, a risk to your friendships, the possibility that they may react negatively either because you're different, or because you kept a secret from them.\"\n\nHe looked straight at me. I wasn't sure, but I began to think I saw his eyes were just a bit moist. Could he be internalizing my situation? All I could do was nod.\n\n\"Do you have many close friends?\" he asked.\n\n\"A few,\" I answered. But then quickly added, \"but not everyone knows.\"\n\nHe nodded, understanding. \"How do you prefer to let them know, when you do?\"\n\n\"Oh, I just whip it out,\" I said, flopping my arm onto the table, palm up. I smiled, but I don't think it was very convincing.\n\nHe humored me by laughing nonetheless. \"Pardon me while I whip this out,\" he joked, quoting Blazing Saddles.\n\n\"I love that movie!\" I squealed, letting my guard down. For the first time, I started feeling a bit more comfortable with Tommy as a person, rather than just as an interviewer. God bless Mel Brooks.\n\nHe grinned like the Cheshire Cat. \"Yeah, not too many people our age have seen it, I think,\" he said.\n\nI cocked my head. \"How old are you, Tommy?\"\n\n\"Twenty-three.\"\n\n\"So tell me,\" I said, turning the tables. \"Why are you so interested in me? Are you a perrrrverrrt?\" I drew out the last word on purpose in an effort to keep the lighthearted tone going, more for my sake than his.\n\n\"Oh, absolutely!\" he said. \"My psychosexual proclivities will keep me in counseling for decades.\"\n\nI giggled, despite myself, covering my mouth with my fingers. Suddenly I felt like I wanted to flirt with him, and I didn't know why. That would be a bad, bad idea, though.\n\n\"Honestly,\" he said, looking around to see if we were being overheard. Confident that we weren't, he said, \"I want to learn as much as I can about sex.\"\n\nThe implications about this statement hit me. \"Tommy,\" I said softly, \"Are you a virgin?\"\n\nHe shook his head. \"No, but that's actually what I mean. What I've experienced has told me that there is so much more to learn.\"\n\n\"Like what?\" I asked, genuinely curious.\n\n\"Well, I want to be a writer, which is why I'm really grateful for you to spend the time with me today,\" he said, indicating his laptop. \"But personally, I know that people can feel all kinds of sensations and pleasures that are unique - and I'm dying to find out about them.\"\n\nMy desire to flirt with him began to dissipate, and I started feeling a bit bitchy again. He read the look on my face and the change in my posture, and held out his hands to show me he meant no harm. \"What I mean is,\" he said, \"I know that there are people who are attracted to people of the opposite sex, or people of the same sex. With you, all of those ideas go out the window.\"\n\n\"Go on,\" I said, fighting back my urge to walk out the door.\n\n\"When I think of your situation, I see some very intense trade-offs,\" he said. \"I see someone I envy because of the different experiences you can have, but I also see someone who possibly is so much more limited because none of the rules apply any more.\"\n\nI put my purse back on the table, not even aware that I had picked it up and had been clutching it. I started to feel a bit of a twist in my chest.\n\n\"I don't want to overstep my bounds,\" he continued, \"But my imagination often runs away with me. As I said, I'm trying to be a writer. But it seems that if I were in your shoes, relationships that everyone takes for granted would be impossible. You can't simply let a relationship grow from friendship into intimacy, not in any natural way. You have to worry about things that no one else has to worry about. You have risks no one else has.\"\n\nTommy's ability to put himself in my shoes was astounding, and I wasn't sure how to react. Part of me wanted to be on my guard because he was able to figure a lot of this stuff out, and part of me wanted to open up to him completely, fill in the gaps of his understanding. If anyone seemed worth the effort, he was.\n\n\"Have you ever been in an intimate relationship?\" he asked, suddenly.\n\n\"Sort of,\" I said. \"I'm not quite a virgin.\"\n\n\"With a boy or a girl?\"\n\n\"A girl,\" I confessed.\n\n\"So do you consider yourself a lesbian?\"\n\nI shook my head. \"No,\" I said. \"I like boys. Bitches be crazy.\"\n\nWe both laughed. I explained to him that during my college years my best friend was at my dorm for a sleepover. The night had progressed as it usually did with two girls, including primping, preening, fashion shows, gossip, and lots and lots of talk about sex, even though neither one of us had any practical experience with it at all.\n\nOf course, we talked about boys. Both of us had been completely boy crazy at the time, and we shared our secret and not-so-secret crushes, and what we would allow cute boys to do to us. It was the first time that I had become aroused in the presence of another girl, and there was no hiding my erection inside my cropped underwear. \n\nFor my friend, it wasn't the first time she had ever seen a penis in person, much less an erect one. It was, however, the first time she had ever seen one on a girl. Try as I could, I couldn't get it to go down, and I couldn't hide it. She begged me to touch it, and I didn't really want her to. She convinced me that she needed to 'practice' so that she would be able to impress all those cute boys, and before I knew it she was trying to deep throat, using me as her guinea pig.\n\nEven after so many years, I could still remember how amazing the feeling was. The sensation of her lips wrapping around my dick electrified my entire body. I wanted her to finger me, too, but she seemed to avoid my soaked entrance. Instead she seemed content to grip onto my cock with her hands and mouth, sucking me for all she was worth. \n\nShe brought me close several times, but I couldn't come like that alone. Desperate to feel something inside me, I rocked my hips slightly to the side and reached behind my ass so that I could get access to my pussy. Feeling my fingers inserted and probing made me complete, and I began to try to fuck myself with my first and second finger while fucking her mouth. \n\nI felt a pressure on my anus, and realized that she was trying to finger me there. My pussy was so wet that I had began leaking down towards that hole, and she had enough lubricant to easily slip inside my ass. \n\nI had just enough time to marvel that she had no problem fingering my ass, but wouldn't go anywhere near my pussy, when my orgasm finally unleashed. I didn't even realize I had been holding her head in place with my free hand until she started moaning and pushing back against it. \n\nMy entire lower midsection seemed to be in a concert of convulsions. My cock pulsed in her mouth, firing like a canon, while my ass gripped her finger as if that's what it was built for. My own pussy was shuddering against my two fingers so wildly that it almost seemed confused as to what it should be doing. \n\nWhen I was done emptying myself into her mouth, I felt her withdraw her finger, and I reluctantly did the same with mine. I felt remarkably empty, suddenly, and wanted to continue. As hesitant as I had been to start with, my engine was now purring and I felt like I was just getting started.\n\nWe tried having sex, but after I had come down her throat she had a sudden change of heart. It was too \"weird\" for her to be pentrated by another girl, and we had to stop before I could completely slip inside her. We contented ourselves with the blowjob, but I never got the chance to enter her completely, because she was too scared. ",
        "It was only much later that I realized that she would only touch the parts on me that I shared with boys. I don't know how difficult it must have been for her to see me as a girl, after she had touched me \"like a boy,\" but it apparently was too much for her. We drifted apart almost immediately and rarely spoke again.\n\nThe memory faded in a mist, and I focused back on Tommy. \"Have you ever had sex with a boy, then?\" he asked, bringing me completely back to the present.\n\nI shook my head, sadly. \"I wanted to,\" I said, \"but you are right. It's not been easy to broach the subject with men. I have too many curves for guys who like dick, and too much dick for guys who like curves.\"\n\nHe nodded, solemnly, but politely smiled at my word play. \"I can imagine,\" he said. \"I'm sorry.\"\n\n\"That's sweet,\" I said, \"But it's not your fault.\"\n\n\"I can sympathize,\" he said, suddenly. \"I'm very, very popular with gay men, but no woman wants to be with someone smaller than them.\"\n\n\"You don't like guys?\" I asked. It was a genuine question, as I had automatically assumed that he was, in fact, gay. Tommy was a very pretty boy, not effeminate in either stature or behavior, but I guess I had a hard time seeing him as someone that most women would find appealing. If he wasn't gay, then, his life must be considerably harder than I thought. I suddenly felt ashamed at my assumption.\n\nHe smiled ruefully. \"No,\" he said. \"Sometimes I wish that I did, because it would make my sex life a bit more active. But guys like to be protective, and I'm the right size for guys like that. What's that word, 'cub? Yeah, a lot of gay men see me that way.\n\n\"I'm too small for most women, who want to be protected by their guys,\" he continued. \"It's been my experience that most women want to be cuddled, they don't want to actually be the cuddler.\"\n\nI looked at Tommy with fresh eyes, suddenly far more sympathetic than I had been. I really did feel like a complete bitch, and was instantly sorry for my earlier attitude.\n\nAnother thought struck me. \"Tommy,\" I said, gently. \"Have you ever had sex with a girl?\"\n\nHe lowered his eyes. Here I was, thinking that I would be the one being vulnerable during this interview, and now the tables had turned. He shook his head.\n\nI swallowed, not sure if I wanted to ask the next question. \"Did you want to have sex, when you had it?\"\n\nHe looked up and smiled softly. \"Yes,\" he said. \"I was desperate to have some kind of sex, and the offer was there, so I took it.\"\n\nI was relieved. I didn't know what I would have said or done had his answer been anything else. \"But you like girls?\" I prompted.\n\nI swear I saw a sparkle in his eye. \"Oh yes,\" he said. \"I have no real emotional bond with men, but sometimes a little bit of attention is better than none at all.\"\n\nI pushed my shoulders forward, giving him a show of my cleavage. \"Well,\" I said, \"I'm a girl.\"\n\nI don't know who was more shocked at my forwardness - him or me. I'd never, ever done that before. For some reason that I couldn't explain, I looked at Tommy sitting across from me and wanted very much to take him and be taken by him. It was so out of character for me that I almost wanted to pretend that it was a joke, but I had already been enough of a cruel bitch to the boy.\n\n\"Wh-what?\" he asked, completely taken aback. \"What are you saying?\"\n\nA thought occurred to me. \"You said you wanted to know what it was like for me,\" I said. \"Here's your chance to find out in real time.\"\n\nI couldn't believe what I was doing. Visions of bending him over and sliding into him flashed through my head, replaced by other images of him on top of me, breaking into me. I found myself getting erect, and I took my purse and placed it on my lap to hide myself. I wasn't big, but if I wasn't careful my miniskirt would leave absolutely nothing to the imagination.\n\nHe swallowed, and began to get his things together. As he stood up, I handed him my empty latte cup. \"Would you throw this away for me?\" I asked, purring. \"I'm afraid I can't stand up quite yet.\"\n\nTommy turned a lovely shade of beet red, blushing as he got my drift. He looked down at my lap, but since my purse was hiding everything all he could do was imagine. Apparently it was enough, and I saw a twinge of activity underneath his zipper. I couldn't help but smile to myself.\n\nThe day had gone so differently than I had expected. I had been angry, rude, a complete bitch, but somehow Tommy's vulnerability had reached inside me and brought out something completely different. I... felt something.\n\n\"Where are we going?\" I asked, standing up. I held my purse in front of me, and pressed it against my erection. I tried to remain as lady-like as I could, but once again I had no control over my erection. I felt just as horny as I had as a co-ed when my friend was seducing me. My cock shifted in my underwear, uncomfortable as the elastic band rolled down the side of my shaft and placed me at an awkward angle. Even so, it was quite arousing, too. I felt naughty.\n\nTommy led the way, and I followed him. I was about two inches taller than he, and I wasn't even sure who weighed more. I could see what he meant - he must have been hit on by gay men every day of his life. He was only 23, but his slight build and vulnerable disposition made it impossible not to feel almost predatory.\n\nBut I did feel predatory, and it was a feeling I wasn't used to. All my life I've been the prey, the curiosity, the abnormality. People wanted to use me, to explore me, to take me, but I knew it wasn't me that they wanted, it was what I had between my legs. I'd spent my entire life keeping people blocked away and protecting myself from being their prey - and here I was on the other side.\n\nCrazy thoughts ran through my mind, thoughts I'd never had before. As he walked in front of me, I wanted to pounce on him, rip his clothes off. Then I wanted to curl up around him, press my breasts into his back, hold him safe and cuddle him.\n\nThen I wanted to slip my dick inside his ass.\n\nMy God, what is happening to me?\n\nTommy held open the passenger door for me to climb in, like a gentleman. I sat down on the seat and swung my legs in, my purse falling to the side a little and exposing myself. I saw that Tommy caught it, and my initial horror at being discovered changed quickly into a thrill as I saw his reaction.\n\nHe climbed in and started the car, and I shifted my weight so that I could see him. This was uncharted territory for both of us, it seemed, and since this appeared to be my idea, I thought it was up to me to say something.\n\n\"Tommy,\" I said, trying to sound seductive without sounding corny.\n\nHe glanced over at me. \"I don't want to be presumptuous,\" I said, and he laughed. \"Well, any more presumptuous than I already am. Do you think I'm... pretty?\"\n\nTommy looked at me as if I had seven heads. \"I think you're gorgeous,\" he said. I couldn't tell if he meant it, but I felt flattered nevertheless.\n\nI suddenly felt very self-conscious. \"I've never done this before,\" I said.\n\nTommy looked as if I had just said the magic \"no\" words. \"We don't have to do anything if you don't want,\" he said.\n\n\"Tommy,\" I said slowly. This seduction thing was new to me, and I had no idea if this was how I was supposed to do it or not. This was how they did it in the movies, right? \"Does it look like I don't want to do this?\"\n\nI moved my purse out of the way completely, my miniskirt threatening to lift completely up and out of the way. I was harder than I could remember being, and my pussy was sopping wet. Tommy's jaw dropped open, and I couldn't suppress a giggle.\n\nThe car lurched back into the correct lane as Tommy realized he needed to pay attention to the road. \"Careful, Tommy,\" I chastised him.\n\n\"Sorry,\" he mumbled.\n\n\"Anything you want to ask me while we have some time?\" I asked, suggestively.\n\nHe shifted in his seat, uncomfortably. I knew what it was like to have an erection when there was no place for it to go, and I sympathized.\n\n\"Have you ever had an orgasm?\" he asked.\n\nAt that I laughed out loud, and placed my hand over my mouth. \"Oh, Tommy!\" I said. \"Of course I have!\"\n\n\"Which way?\" he asked, glancing down at my bulge through my skirt.\n\n\"Both ways,\" I said, coyly, one finger in my mouth. \"If we're lucky, then you can see for yourself.\"\n\nHe smiled, and again the car began to drift. I needed to go easier on the poor boy for the moment.\n\n\"At the same time?\" he asked.\n\n\"I don't know,\" I said, pensively. \"That's never happened. Usually once I come one way, I'm done, and I don't bother trying to come the other way.\"\n\n\"Do they feel different?\" he asked.\n\n\"Looks like you're getting your interview in after all,\" I said, playing with my blouse's neckline. He smiled. \"Yes, they feel quite different.\"\n\n\"Which one is better?\" he asked.\n\nI struggled with that one. I never really examined my orgasms so closely before. They just... happened. \"I don't know,\" I said, truthfully. \"They're just different. When I have an orgasm through my penis - or would you prefer I say, cock, Tommy?\"\n\nHe shivered, slightly, as I said his name. He swallowed, but it looked like his throat was too dry. \"Whatever you like, Cherie.\"\n\n\"When I come from my cock,\" I said, leaning back in the seat and spreading my legs slightly to give my erection room, \"It feels like a slingshot. There's a buildup, a stretch, and then it explodes out of my cock like a rocket.\n\n\"But my pussy, that's completely different,\" I said, and I couldn't help but bring my hand between my legs. Cherie, what are you doing? Since when did you become an exhibitionist?\n\n\"How so?\" he croaked.\n\n\"Well, that seems to come from inside my tummy,\" I said, using the word on purpose. It implied an innocence that I felt I had to break through. \"When that happens, it kind of rumbles throughout my body like thunder until I explode from the inside out.\"\n\nI thought about it a little. \"I honestly don't even know if it's possible to have both at the same time. They seem to come from completely different places.\"\n\n\"I'm envious,\" he said, and I believed him.\n\nWe hit a pause in the conversation, until he turned to me and said, \"Can I see?\"\n\n\"Oh, Tommy,\" I said, playfully. \"I know I don't have a horse cock, but surely you can see from there!\"\n\nHe laughed, but there was a curious twinge of sadness to it. \"I just mean...\" he said.\n\n\"It's okay,\" I said. \"I'm just teasing. I don't see why not.\"\n\nAgain, I wondered where this boldness came from. I just met this guy today. Hell, I wasn't even sure of his name until less than an hour ago!\n\nNevertheless, I was desperate to show him. I suddenly felt tremendous pride with what was between my legs. I wanted to show off, whereas for my entire life I had been trying to hide it, too ashamed to even acknowledge that I was different from other girls. Dammit, what was it about this guy?\n\nI lifted my miniskirt to my waist level, and slipped a finger into my panties. The tip of my cock was peeking out above the cotton, and I bathed in his gaze. I didn't want him to wreck the car, so I knew I was playing with fire. \"Only a quick peek,\" I teased, and tugged on my panties. I exposed myself to him completely, my cock disappearing into the folds of my pussy, my wetness so obvious that I didn't even need to touch myself to know I was practically a fountain.\n\nAs I covered myself up, he said, \"That was... the most beautiful... sight I've ever seen.\"\n\nIt was my turn to blush. I really enjoyed that. I'd never flashed anyone before, never exposed myself to tease someone. Watching Tommy's reaction, though, it was intoxicating and addictive. I wanted to do it again, and again, and again, just to get his reaction burned into my brain.\n\n\"We're here,\" he said, and pulled into a parking space. I finally took a look at my surroundings, and found myself in an apartment complex. \"Mine is the end unit.\"\n\nI straightened out my clothing, and once more placed my purse in front of me like a shield. Getting out of the car, I then followed him up the stairs to his apartment, giving him just enough distance to watch his ass as he climbed the stairs. There was nothing feminine about him, exactly. He was definitely built like a man, just small and lithe; a delicate version of masculinity, but still a form of maleness.\n\nOnce more the predatory urges overwhelmed me. I wanted him far more than I ever remembered wanting anything in my life. My cock strained against my underwear, pushing against my purse, like a homing rocket looking for a home. I wanted to take him, to penetrate him. I thought back to talking about the feeling of my slingshot orgasm, and I suddenly wanted to shoot inside of him.\n\nHis door unlocked, and he opened it. The gentleman that he was, he waited for me to cross the threshold before following and closing the door.\n\nBefore I knew what I was doing, I grabbed him and turned him so that I could wrap my arms around him from behind.\n\n\"Tommy,\" I breathed. My voice sounded foreign, alien. \"I've never done this before, and I don't even know why I'm doing this.\"\n\n\"Me neither,\" he said, shocked at being embraced in this fashion. He pressed backwards against my erection, almost as if to make sure it was still there. I wrapped my arms around him, one arm under his, the other draped over his shoulder. If I had wanted, I could have placed my fingers around his neck. If I was truly honest with myself, I wanted to.\n\n\"There's something about you, Tommy,\" I said, using his name again. \"I don't know what it is. But somehow you make me want to do things I wouldn't ever do.\"\n\nHe gulped. My mouth was right next to his ear, and I playfully nibbled on his ear lobe. \"Like what?\" he asked. His voice was small, timid. Was this his mating call, this vulnerability? If so, why was I responding to it so strongly?\n\n\"Everything,\" I said, my hand sliding down his front to his crotch. As I cupped him from the front, he stiffened.\n\n\"I'm... you're...\" he stuttered.\n\n\"What is it, Tommy?\" I purred. I kissed him on his neck.\n\n\"You're bigger than I am,\" he finally said, and deflated in my arms.\n\nI could feel what he was talking about, now. Underneath my hand I could feel his erection, but it wasn't very big. He must have been dreading this moment from the time we left the coffee shop. Like me, he must have been feeling this strange attraction and dread at the same time. The predator instinct in me gave way once again to the protective side.\n\n\"Oh, sweetie,\" I said comfortingly. I began to stroke him from outside his pants. \"I think you might be perfect.\"\n\n\"You don't have to say things like that,\" he said, dejectedly.\n\nI unzipped his pants. \"Oh, I'm not just saying it,\" I said, releasing him. \"I can't take anything too big.\"\n\nIt was true. One of the reasons why I didn't like talking about my anatomy was because I was afraid of it. I'd tried every type of sex toy you can imagine, and my girlfriends always talked about how big their boyfriends were, or how big they wanted them to be. When I tried my first dildos, I thought that I had done irreparable damage - everything seemed too big. My \"plumbing\" just couldn't get out of the way.\n\nHis dick stuck out from between the flaps of his zipper, and he was right. I had at least an extra inch on him, plus a little more girth. Even so, there was a very strong possibility that he might find me too tight a fit.\n\n\"Trust me,\" I said. \"You'll do just fine.\"\n\nHe relaxed into me, and reached behind his back to feel my cock stretching out my miniskirt. After feeling him in my hand, and seeing his hand on my own cock, the predatory feeling started to return.\n\nI turned him around and kissed him. It was the first time in a long time that I've felt someone else's mouth on mine, and his tongue tasted delicious. His pants fell down his thighs, and I let go of his cock to grab his face with both of my hands. I could feel his penis poke into my own, and his hands lifted my skirt.\n\nAs we faced off, I felt confused as I saw his penis against my cock. I hadn't lied - I had a very average six inches to play with, but as I gazed between the valley of my breasts to see the comparison between us, I suddenly felt like an Amazon.\n\n\"Suck me,\" I demanded. It wasn't an order, as much as a flat statement, but I pulled his face downwards. He sank to his knees and I watched in utter fascination as a man took my hardness into his mouth for the first time in my life.\n\nIt had been more than ten years since my teenage girlfriend \"practiced\" on me, but it felt completely different. He was good, but not in the way she had been. Tommy had the distinct advantage of having one of these himself, and it showed.\n\n\"Stick your tongue in my pussy!\" I commanded, and this time it was, indeed, an order. My college girlfriend was perfectly happy to suck my cock, but she balked at going down on me. \"I'm not a lesbian,\" she said at the time, something I never got over. It was such an odd thing to say. I'm not a boy, and you're kneeling between my legs sucking on a girl, you bitch!\n\nTommy lifted my cock and dove between my legs. I spread my thighs further, ripping my panties to shreds. I didn't care, and neither did Tommy. His tongue snaked inside my pussy and I thought I was going to pass out from pleasure. Had I known this was going to feel so good I might not have been so rigid in turning people away.\n\n\"Oh god, Tommy,\" I sputtered, my hands flying to his head to keep him in place. \"Please don't stop!\"\n\nIt didn't seem like he had any intention of that. He ravaged my inner core as if he'd never tasted pussy before, which, it dawned on me, he probably hadn't.\n\nI watched him, mildly amused as my cock bounced across his forehead as he ate me out. My drenched pussy swirled and convulsed as he flicked his tongue in and out. He slipped a finger inside of me, and seemed to be playing around his tongue with it.\n\nMy back arched and I threw my head back, not intending to be as dramatic as it seemed. I pressed his head harder between my legs. I'd never had anyone go down on me before, much less orgasmed as a result of it, but I could feel that familiar burning inside my tummy as he continued.\n\n\"Tommy, I -\" And then it happened. My insides felt like they were becoming my outsides, my pussy quivered and gushed over his face. My hips shook violently with each contraction, my orgasm running rampant over my ability to control myself. Every molecule in my body felt like it was trying to vibrate out of me.\n\nI started to sink down, my legs giving out. Tommy sat down and then lay back as I collapsed on top of him, his hard cock pressing up against my thighs. Without even thinking, I took his penis in my hand and aimed it under my cock towards my pussy entrance.\n\nPoor Tommy flinched as he entered me, his self-consciousness about his size completely dominating his libido. Even so, if I hadn't been as wet as I was, I'm not sure he would have fit. His penis wormed his way inside me, and I could feel my insides adjust to accommodate him.\n\nSuddenly, it was my turn to be self conscious. \"Tommy,\" I asked, worried. \"Are you sure you've never been with a girl before?\"\n\nHe stared up at me, confused. I realized it was a strange question. \"I just mean,\" I said, trying to focus on the words as my body got distracted by his invasion, \"I'm not built like normal women. I have parts that they don't have.\"\n\nAs if to prove the point, my cock slapped down on his flat stomach as I rode him. He touched it with his hand, and I gasped. I giggled, despite myself. \"I mean, on the inside.\"\n\n\"I know,\" he said, smiling. It was the first genuine smile I think I've seen from him since we entered the apartment.\n\n\"I've never had a real man inside me until now,\" I said, riding up and down on him. I think I felt him clutch tighter as I called him a \"real man.\" For as tight as I was, he might as well have been over a foot long. \"Does it hurt?\" I asked, worriedly.",
        "His look changed instantly. Suddenly he was back out of his own head. \"Oh, Cherie,\" he said, \"No, not at all. It feels wonderful.\"\n\nThat made me feel better. He felt so good inside me that I didn't want to be hurting him because of my extra parts.\n\nI really didn't know what I was doing. I kept raising myself off of him and slamming down again, just like I did with my tiny dildos. It never dawned on me what might be happening to him. My cock kept slapping against his belly, and he just stared at me with wide eyes.\n\n\"Cherie - \" he said, his voice quivering.\n\nI was lost in my own world, and could only muster a half-hearted acknowledgment.\n\n\"Cherie,\" his voice was slightly more insistent.\n\nI reached between my legs and began stroking my cock out of habit. My god, this felt good. Why had I waited so long?\n\n\"Cherie!\" he warned, but at that point I finally understood. His eyes were glued on my masturbation, but his cock was releasing into me like a busted firehose. I could feel every pulse, every jet of his come as it splashed inside me. Each rope of come he emptied into me ratcheted my sexual arousal to a new level.\n\n\"Yes!\" I found myself saying, over and over. I looked down at him, and saw him in a completely new light. Once again the predator in me took over. I had him.\n\n\"Did you come?\" he asked, innocently. He genuinely did not know.\n\n\"Not just then, but I did earlier,\" I said, \"when you were eating me out. Did you know you were that good at that?\"\n\nHe blushed, and it was cute. It just made me want him all the more. \"And I want to come again,\" I said.\n\nHe began pushing inside of me again, but I stopped him. \"Not like that,\" I said, and looked down at my cock. He pulled himself up onto his elbows and tried to reach for my cockhead with his mouth, but I pushed him back down onto the floor.\n\n\"Not like that either,\" I said, with a mischievous look in my eye.\n\nUnderstanding began to dawn on him, and he said, \"Come with me.\"\n\nHe led me back to his bedroom, in which a giant queen sized bed dominated a room that was too small for it. I shed the remainder of my clothes, standing completely naked in the room as he fished in a drawer for something.\n\nI caught myself in the mirror, completely nude, hard cock in my hand. I reached underneath with my free hand and dipped it into my pussy, still soaked from my arousal and his come. Looking at him, and then back at my reflection, it looked a little strange not to have any balls to play with, but that's what I was used to. I suddenly found myself eager to play with his and gain some experience there. What did those feel like? Well, that was something that he would know, and I could only imagine.\n\nHe came back to me, having completely disrobed as well and held a small bottle in his hand. I took his hands in mine, and brought him closer to me to kiss me. I could taste myself on his lips, and it excited me.\n\nOur size difference was slight, I was only taller than him by about two inches, but his small frame made me feel like I was completely in control. I felt like I could do anything to him, take him, comfort him. He was naked, vulnerable, small in my arms. It gave me a sense of tremendous power... and responsibility.\n\nI felt his hands on my body, a thick layer of lubrication rubbed into his palms. He caressed my breasts, leaving them shiny and my nipples erect. Suddenly, one of his hands grabbed my cock and I felt a large amount of liquid fall along the shaft. He gripped it, and worked the lubricant around until it was completely coated.\n\n\"Tommy,\" I said conspiratorially, \"you've done this before.\"\n\n\"Maybe,\" he said coyly, smiling. \"But I've never wanted anyone to do it to me as much as I want you to.\"\n\n\"Oh, I will,\" I said, knowing I had his fully enthusiastic support. \"I've never fucked anyone before, so let me know if I'm doing it wrong.\"\n\nHe squeezed my cock in reassurance. \"Cherie,\" he said. \"I don't think you could do anything wrong. But just do me a favor.\"\n\n\"Anything,\" I said, and I meant it. I found myself impatient to get inside him.\n\n\"When you come,\" he said, his eyes searching for something in mine. \"Look me in the eyes.\"\n\nOnce again, there was so much implied in his simple words. I nodded, and he turned around. I looked at his beautiful body, completely hairless and smooth. I noticed that it was flawless, too, no moles or marks of any kind. Little Tommy looked like perfection to me.\n\nHe backed up against me, and took my cock in his hands and placed it against his hole. Having had far more experience in this than I did, I let him guide me inside.\n\n\"Just let me...\" he began, but didn't finish his sentence. I felt the tip of my cock begin to penetrate his body, a sensation that was strangely familiar and yet wholly alien at the same time. The resistance to my invasion was intense, and I seriously wondered if his ass could break my cock off.\n\nSuddenly I felt the flare of my cockhead breach something, and he seemed to open up to me. I still only had the head and a little bit of my cock in, but I no longer felt any resistance whatsoever. Instead, it felt soft, warm, and smooth.\n\n\"Oh Tommy,\" I gasped.\n\n\"Wait, just a second,\" he said, as he breathed deep.\n\n\"Tommy, this looks so good,\" I said. I started to push.\n\n\"Not yet,\" he said. \"Just a second.\"\n\nI froze. \"Okay,\" I said, but every fiber of my being just wanted to plow into him. His vulnerability had finally come to a head, and here I was in exactly the place I had fantasized about since the coffee shop. I just wanted to make him beg, I wanted to take him, I wanted to make him mine.\n\n\"Tommy...\" I said. I didn't want to wait any more. He just felt too good.\n\n\"Not yet.\"\n\nI waited, he breathed. I could see a sheen of sweat building across his back. I looked down and saw my naked tits, and beyond that my hard cock splitting open his ass. On its own, I could feel my cock sliding forwards. I hadn't pushed, but it seemed like his ass was drawing me in. I tried, desperately, to stay still.\n\n\"Tommy, please,\" I warned. I could hear the edge in my voice, my frustrating mounting.\n\n\"Almost,\" he said.\n\nI was halfway in his ass, and the pleasure was indescribable. I could feel him squeezing his ass, contracting his sphincter around my cock, and staying in one place was impossible. My cock started to slide forward and there was nothing I could do to stop it. Worse, as it slide it picked up speed, until the final three inches were buried inside of him, and his ass cheeks were pressed up against my hip bone.\n\n\"Tommy, I'm sorry,\" I said, as I began to fuck him. \"I can't help myself. I can't stop.\"\n\nI grabbed his hips and fucked him, my cock diving inside his body and then withdrawing. With all my masturbation, and even using toys like a Fleshlight, nothing could compare to this. Tommy's body was mine, his ass was mine, and I was going to fuck him for all he was worth.\n\nI began to feel the inevitable climax starting to build, the stretching of the slingshot bringing me to higher and higher planes. I knew that I had about five, maybe six more strokes of plowing his ass before I was going to explode inside of him.\n\nSuddenly, I remembered what he asked me, and I pulled out, and forcibly turned him over. I grabbed his legs and pulled his ass to the edge of the bed, and aimed my cock back at his asshole and plunged. Once more I felt the raw heat wrapped around my cock, and I was instantly back in the race.\n\nI was shocked to find that he was smiling broadly, as if he knew the world's funniest joke. \"I wondered how long I could make you wait,\" he giggled.\n\n\"Oh, you bitch!\" I shouted at him, but I wasn't angry. Even so, I picked up my pace and fucked him. Hard.\n\nMy breasts bounced against my chest as I fucked him, and I felt the rise of the pressure of my impending orgasm. There was something animalistic in me, a pent-up sexual rage that was mixed in with my arousal. Tommy had brought something out of me, a side to me that had lain dormant my entire life. \n\nI felt selfish, and focused, and I fucked him with a sense of victory and triumph. I wasn't sure over what, but definitely over some demon that had been holding me back. From his position lying on his back, he was helpless to my attack on his ass. He could only press back at me as I entered him, trying to match my rhythm with small movements of his own. \n\nAs I promised, I looked at him directly in the eyes, and saw a small, sweet smile on his face. I couldn't tell what the emotion was, but it certainly looked an awful lot like... trust. \n\nI stared down at him, trying to register what was happening to me. I felt remarkably possessive of him. I felt that he was mine. I could take him however I wanted, whenever I wanted, but I was also responsible for him. In that moment I could see that he knew it too, and he trusted me to do it. \n\n\"Please,\" he said, and once more there was far more implied in his simple plea. It pushed me past the breaking point.\n\nMy slingshot had reached its apogee, and suddenly I felt the familiar rush coursing through my body. I slammed my cock home to its final resting place inside his body, and released into him. Our eyes locked, and I didn't know how to interpret the look on his face.\n\nI leaned down and kissed him, my cock still pulsing the remains of my ejaculate into his body. His kisses were sweet and tender, but also submissive.\n\nI straightened up, and looked down to where our bodies joined. He was hard, and I reached down to stroke his cock. With my other hand, I cupped his balls, unsure of what to do. His reaction, though, told me that I had done the right thing.\n\n\"Oh, Cherie,\" he said, his eyes rolling back in his head. His ass squeezed my cock as his own responded.\n\n\"Oh, little Tommy likes this,\" I teased, and marveled as his penis responded in my hand.\n\n\"Yes,\" he said, as though the single syllable was too difficult to say.\n\n\"You are very sweet, Tommy,\" I said, gently. \"You deserve to be treated right.\"\n\nI don't know what made me say that, it's certainly not something I would say to any other man. For some reason, though, it just felt like the right thing to say to him. My intuition seemed to be correct, though, as he moaned and pressed back into my hands.\n\n\"Don't worry, baby,\" I cooed. \"I'm going to treat my little Tommy right.\"\n\nTommy's penis jumped in my hands, and I could feel his balls shift in my palm. He ground his ass down around my cock, which was staying semi-erect thanks to his tight grip.\n\n\"Come for me,\" I urged. \"Show me how my little Tommy trusts me.\"\n\nOnce again, my intuition was right. He responded violently as soon as I used the word trust, and suddenly his penis was a geyser of come, spraying all over both of us. I aimed it upwards and let if splash across my tits and belly, and felt the scalding fluid cool almost immediately against my skin.\n\nI stood there with a cock that was not my own, drenched in come that was not my own. My pussy was still soaked, and even though I had just taken him I had never felt more like a woman in my entire life. Somehow vulnerability had brought out my own femininity, and I appreciated him for it.\n\nWe separated so I could maneuver behind him, and got into a spooning position. My cock rested between his legs, and I could feel a strange sensation of his balls flattening around my shaft as I rested together. I reached around and lazily played with him. \n\n\"You are really something,\" I said. \"I'm sorry I was so bitchy when we first met.\"\n\n\"I think it all turned out well,\" he said, and we both laughed.\n\n\"I think so too,\" I agreed. \"You are an incredible person,\" I said after a moment's pause.\n\nI realized that I couldn't bring myself to say, 'incredible man,' but I wasn't sure why. Tommy was definitely a man - all man - but there was a part of him that defied proper definition. He did not instill any sense that he could protect me, physically, but I got the sense that I could trust him with my life. I got the sudden and distinct vibe that he would worship me, all of me, and be happy to let me do whatever to him that I wished. All I would have to do would be to appreciate him for who he was, and realize that his smaller stature was just as much of an advantage as my futanari nature.\n\nEither neither of us were abnormal, or both of us were. Either way, it appeared we both had found someone who brought out the missing pieces in the other.\n\n\"Tommy?\" I asked. \"Are we going to finish that interview?\"\n\nI felt, rather than heard, him chuckle. \"Oh, I have so many questions.\"\n\nWe both laughed. At least there were many ways to answer them."
    ],
    "authorname": "perfectfuta",
    "tags": [
        "anal",
        "blowjob",
        "fingering",
        "futa",
        "futanari",
        "pussy licking"
    ],
    "category": "Transgender & Crossdressers",
    "url": "https://www.literotica.com/s/the-interview-150"
}
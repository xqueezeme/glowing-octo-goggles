{
    "title": "Red-faced on the Red-eye Pt. 01",
    "pages": [
        "Red-Faced on the Red-Eye Part 1 \n\nSara boarded her first-ever international flight wearing a long, pink, scoop-back sundress a bright smile on her face, thrilled about her plans for her upcoming vacation. \n\nThe slender Irish co-ed had been invited by her American friend Rosie to spend a beach vacation together, and the two 21-year-olds decided to meet at an appealing middle point between California and Ireland: the Caribbean. \n\n\"Welcome aboard,\" said the blonde flight attendant as Sara bounced in off the jetway. \"You certainly look excited.\" \n\n\"It's my first time abroad,\" Sara bubbled to the lovely woman, vaguely captivated by how her pink lipstick set off her well-tanned skin. \n\n\"And you're headed for the tropics - oh my, that is exciting. Well you'd better be careful or that lovely Gaelic skin of yours will get burned to a crisp. What seat are you in?\" \n\nSara showed her boarding pass and the flight attendant directed her to the coach section at the rear of the plane with a light pat on her butt to nudge the girl along. \n\nBut Sara had a bigger reason to feel excited about her vacation than it being her first trip out of the country, or her first visit to the tropics - or even that it was the first time she'd see Rosie in nearly two years. \n\nThe two close friends had learned they happened to share a kink - they were both wannbe exhibitionists and ENF enthusiasts - so when they planned their vacation, they agreed to stay at a tiny resort that had a private, clothing-optional beach. And their plan was that every day, they would start out nude at that part of the beach, but then head into the waves and swim up the coast, far into the regular public beach, before coming out of the water and walking (or running!) back to the private beach, where they would repeat the escapade in the opposite direction. \n\nThey agreed to have all their meals at the resort's clothing-optional beachfront restaurant, and sneak off for nude strolls along the public beaches at night. Of course, being mostly exhibitionist wannabes, they both knew they would probably chicken out of most of these daring plans, but they vowed to spend as much of their vacation in the nude as they could stand. \n\nLittle did Sara know, however, that her ENF adventure would begin long before she arrived... \n\nHer flight from Dublin was an overnight \"red-eye,\" and Sara had long ago made a rule for herself that she had to sleep in the nude every night. So, she had resolved to take off her clothes and sleep naked under her airline blanket when the lights went out. \n\nAfter boarding, Sara was delighted to find out that she didn't have a seatmate, and the only person seated across the aisle from her was a middle-aged woman who immediately popped some sleeping pills and dozed off. As the commotion of passengers boarding and stowing luggage subsided, Sara started getting excited about her upcoming antics and just couldn't wait to see how it would feel to be naked in the airline seat under the blanket. She felt the urge building, and decided to just quickly try out how it would work. \n\nThe slender college student covered herself with the blanket, then pulled the straps of her sundress down over her shoulders and quickly shimmied out of it (that was all she needed to take off since she had already decided to go \"panty-free\" for the whole vacation). The airline blanket easily covered her petite, 5-foot-2, 109-lbs frame, and she felt confident that her naughty secret would be safe overnight once the cabin lights went down. \n\nBut as Sara started to succumb to the heady thrill of being so very nearly naked in the crowded airline cabin, she felt an impulse to push her test run just a little bit further. That's when she made a fateful decision: to stuff her dress and flipflops into her carryon bag and put it away under the seat, out of easy reach - just for a moment - to see how it would feel. \n\nAs she zipped up the bag and tried to cram it under the forward seat, she had trouble getting it to fit. She was considering putting her dress back on and stowing the bag in the overhead bin, when she heard a woman's voice from above her. \n\n\"Tsk, tsk. No, that won't do.\" \n\nSara looked up and brushed her loose curls of mousey brown hair out of her face to see the same stunning, blonde flight attendant standing in the aisle, eying her with a mischievous smile. Sara realized too late that as she was leaning forward and struggling with her bag, the blanket had slipped, revealing her slender back all the way down to her bare butt. This tall, curvy, well-tanned woman - \"Anna\" by her nametag - knew that she was naked. \n\nBefore Sara could say anything, Anna reached down and grabbed her bag. \n\n\"No, we never should have let you bring this on the plane as a carryon,\" she said. \"You'll have to check this on the jetway before we can take off. But don't get up,\" she said with a wink, \"I'll be happy to handle it for you.\" \n\nWith that, Sara watched helplessly as Anna disappeared up the aisle and past the curtain towards the front of the plane with her bag - and all her clothes \u2014 and then returned with a bright red luggage-tag stub. Sara was sure that her face was even redder than the tag that the beautiful flight attendant ever-so-politely handed her. \n\n\"Be sure not to lose this, or you won't be able to collect your bag when you get off the plane.\" \n\n\"But...\" \n\n\"Don't worry, sweetie,\" Anna said with a wink. \"If you need anything during the flight, just press the call button and I'll be here for you.\" \n\nAnna then went back to the front of the coach section where she and the other flight attendant started running though the pre-flight lecture on seatbelts and flotation devices. As she went through all the motions, Anna kept looking over at the increasingly nervous girl, and smiling that devilish smile. She seemed to be maybe in her mid-thirties, but her wavy blonde hair and flawless makeup made her look to Sara more like a supermodel than an airline stewardess. \n\nA few minutes after the safety lecture, Sara was just getting her breathing back under control when Anna suddenly appeared beside her again, making her huddle deeper under the thin blanket. \n\n\"Seatbelt?\" Anna asked. \n\n\"Ah, um, yes. I'm wearing it.\" \n\n\"I'm sorry, you don't understand - I have to see.\" \n\n\"What?!?\" \n\n\"I have to visually confirm that every passenger has their seatbelt properly fastened before we can leave the gate,\" Anna said, twirling her finger to indicate that Sara had to pull the blanket away and expose herself. \n\n\"But... I can't... please!\" \n\n\"If any passenger fails to cooperate, it could delay our takeoff and we may lose our runway slot,\" Anna said loudly, prompting annoyed murmurs from throughout the cabin. \"I may even have to pull you right up out of that seat and eject you from the flight,\" she said in a lower voice as she leaned in toward Sara with a look of mock sternness. \"And of course,\" she whispered, leaning even closer and fingering the soft blanket, \"we couldn't allow you to leave the plane with airline property...\" \n\n\"B-but...\" said Sara meekly. \n\n\"Show me,\" Anna said in a whisper so soft and sultry that it made Sara moist. \n\nAnna stood back up and smiled down at the blushing girl, who obediently slid the blanket off to show the demanding flight attendant her full, naked body - from her pert, b-cup breasts, to her narrow waist and taut stomach, to her neatly trimmed bush and long, slender legs. Sara was transfixed by Anna's piercing green eyes as they looked her up and down as if she was eyeing a delicious ice cream sundae dripping with chocolate sauce. \n\nSara had never imagined herself as bisexual, or even particularly curious, but feeling the heat of this beautiful woman's lustful gaze all over her nude body aroused her more than she would have ever believed possible. She sat there frozen, heart pounding, staring up helplessly at the gorgeous flight attendant, not even thinking about the dozens of oblivious strangers surrounding them just a few feet away as she brazenly presented her naked body for this captivating woman's appraisal. \n\nShe had no idea how much time had passed before Anna abruptly snapped Sara out of her erotic daze with stern look and a nod at her lap. \n\nMortified, Sara looked down between her legs, afraid that Anna might have spied the wetness building up there... \n\nBut no, she just wasn't wearing her seatbelt after all. \n\nSara frantically snapped the buckle over her slim hips and dove back under her blanket, humiliated not only by the exposure, but by how aroused it had so clearly made her. Anna just winked and gave her a lingering smirk before continuing her pre-flight routine as if nothing had happened. \n\nAfter takeoff, Sara had done her best to calm down, but she remained flushed and anxious as she squirmed naked in her seat, unsure how this ill-advised escapade was going to turn out now that all of her clothes were down in the cargo hold and she was trapped for the next 12 hours naked on a plane with this beautiful and manipulative woman who knew her secret and seemed determined to torment her with it. \n\nEventually the cabin lights went down and so did Sara's anxiety, at least somewhat. Everybody seemed more interested in the in-flight movie than looking at her. But just as she started breathing easier, Sara heard a familiar voice. \n\n\"How is your flight experience so far?\" Anna said with a grin. \n\n\"Pretty nerve-wracking, to be honest,\" said Sara, smiling for the first time since she lost her dress. \n\n\"Not used to flying this far?\" asked Anna, leaning close again. \n\n\"Not used to flying this naked,\" Sara whispered, trying not to stare at the woman's fulsome cleavage. \n\nThey shared a quiet giggle and Anna's finger drifted down to the girl's exposed shoulder, swirling over her soft skin. Even though she was relatively warm under the blanket, Sara was suddenly covered in goosebumps, and her heart started racing just like it did when Anna made her expose herself completely. While she knew she was technically fully covered, Anna's touch on that small patch of bare skin - along with her wicked, knowing smile - somehow made Sara feel more naked than she had ever felt before. \n\nAnd again, even though she had never seriously thought of other girls sexually before, this magnetic woman's attention felt so erotic that Sara couldn't ignore an intense attraction building inside her. \n\n\"I think I know just what you need to relieve some of this anxiety,\" Anna whispered in a husky voice that made the naked girl squirm, her face slowing drawing ever closer to Sara's as she looked deep into the girl's wide, blue eyes. \n\nFeeling like she was in a dream, the quivering, mesmerized girl leaned in and closed her eyes, as if readying herself for a deep kiss. \n\n\"You need a drink,\" said Anna, suddenly standing. \n\nAfter being aroused and then mortified by this woman for a second time, Sara both literally and figuratively melted into her seat as the seductive flight attendant sauntered back up the aisle past the curtain, leaving her naked passenger panting. But Sara was barely able to shake herself out of her erotic daze before her tormentor reappeared with a plastic cup full of red wine. \n\n\"I hope you like red. It was all I could sneak out of First Class,\" she said. \n\n\"I - sure, that's fine,\" said Sara, gratefully reaching up from under her blanket. \n\nBut rather than handing it to her, Anna quite deliberately upended the cup over Sara's blanket, dousing it with wine. \n\n\"Oh, I'm so sorry to spoil your blanket like that!\" she said with mock surprise. \"Don't worry, I'll get you a new one right away.\" \n\nAnd before Sara could even react, Anna snatched up the soiled blanket and disappeared up the aisle of the darkened cabin, leaving the naked girl completely exposed just as the in-flight movie ended and the lights started to come up. Sara frantically grabbed the airline magazine and duty-free catalogue from her seat pocket, draping one over her lap, and hiding the rest of herself as best she could as she pretended to read the other. \n\nSara cowered behind the glossy pages for what seemed like hours as passengers got up and went forward to line up for the bathroom between Business Class and coach. She dared not make any eye contact, but Sara could tell that some of them stared at her as they passed in the aisle, and she could only hope they just assumed she was somehow legitimately dressed in some ultra-skimpy beach outfit that they couldn't quite see. They were flying to the Caribbean, after all! \n\nAfter what felt like every passenger on the plane marched past her and ogled her magazine ensemble, Sara felt a wave of relief when she spied out of the corner of her eye a flight attendant's uniform at the front of the coach section. But when she looked up, it wasn't Anna with her new blanket - it was the other flight attendant, pushing the dinner-service cart. \n\nAs Anna's colleague made painfully slow progress down the aisle handing out dinner trays, Sara saw Anna start making her way behind with the drinks cart. When Sara caught her eye, Anna smiled and held up the blanket she had promised more than a half-hour ago, casually motioning that she would bring it as fast as the carts would allow, as if Sara had asked for an extra packet of peanuts rather the only possible covering for her naked body on a crowded airplane. \n\nSara waited anxiously, having absolutely no idea what she could possibly say to the other flight attendant when she got to her row and saw that Sara was completely and inexplicably naked. \n\nWhen the dinner cart finally made it down the dozen rows to Sara's seat, the attendant's eyes widened when she saw Sara trying and failing to hide her nakedness with the magazines. Sara was paralyzed. What could she say? What possible excuse could seem remotely plausible for why she was sitting there completely nude in the middle of an airplane on a 12-hour flight? \n\nThe naked, humiliated girl was about start babbling incoherently to the older women when the flight attendant suddenly just rolled her eyes. \n\n\"Anna's at it again,\" she said, shaking her head. \"Vegetarian or beef?\" \n\n\"Um, vegetarian,\" Sara croaked as she blushed an even deeper shade of red than the wine Anna had dumped on her. \n\nAs the dinner cart trundled on, Anna finally arrived with the drinks - and her blanket. \n\n\"And what would you like to drink, miss?\" she said brightly. \n\n\"A blanket, please,\" muttered Sara, resisting her urge to throw her dinner plate in Anna's face. \n\n\"Oh, is that a cocktail of some sort?\" Anna taunted with feigned confusion. \"What are the ingredients?\" \n\n\"Can you please just give me the blanket?\" Sara whispered with an earnest look that moved Anna to lean in close again. \n\n\"Well, if you want a cocktail, you know that costs extra...\" she whispered suggestively. \n\n\"What? What more do you want from me?\" pleaded Sara. \n\nAnna reached out and snatched the magazine off Sara's lap, making the naked girl clutch the other even tighter against her apple breasts. \n\n\"Let me take some of this trash away for you,\" Anna said, holding out her hand for the last bit of covering Sara had. \n\nReluctantly, Sara handed over the magazine and clamped her hands over her private parts as Anna grinned triumphantly, and then silently collected the neighboring seats' magazines, as well as the safety cards and all other potential coverings from both seat pockets - leaving Sara dumbstruck and absolutely bare. \n\nAfter taking an excruciatingly long moment to admire Sara's blushing nakedness, Anna finally pulled out a blanket and tossed it in the nude girl's lap. As the wicked flight attendant casually poured a cup of orange juice, Sara unfurled her new cover to find it wasn't a full blanket at all, but just a tiny piece of one - barely enough to cover her from lap to chest and tuck around her body on each side. \n\n\"Wait, this isn't a blanket - it's barely a napkin!\" she said. \n\n\"Oh, you're not satisfied with this one?\" Anna asked, holding the orange juice menacingly above Sara's 'napkin.' \"If you like, I can take it back and bring you another - after dinner service is over...\" \n\n\"No! This is fine! Please let me keep it!\" Sara said quickly, fully believing that this woman was prepared to take it away and leave her there completely naked with absolutely no cover for the rest of the flight. \n\nSara couldn't even think about eating - her stomach was so full of butterflies already - so when Anna came back up the aisle a half hour later collecting everyone's trash, the squirming, barely covered girl dumped the untouched plate into the bag. But Anna didn't move on. \n\n\"Is the anything else I can take while I'm here?\" she said teasingly, leaning over and playfully tugging on the tiny 'blanket' Sara clutched over her nakedness. \n\n\"Oh no, I'm fine!\" said Sara, totally flustered. \n\nThe beautiful flight attendant leaned close again and ran her fingertips up and down Sara's now entirely bare arm, unleashing another cascade of goosebumps all over her slender body. \n\n\"I know you're loving this,\" Anna whispered softly in the quivering girl's ear. \"This is why you took your dress of in the first place - why you put it away in your bag. You wanted this, you naughty little girl... You were hoping for something just like this, and you know it.\" \n\nAnna's finger suddenly slipped under Sara's 'blanket' and flicked her stiffened nipple, making the nearly nude girl almost leap out of her seat. \n\n\"Remember, if you need anything from me tonight, just press the call button,\" Anna whispered in her ear as she stood up again and carried on with her duties. \n\nThe lights finally dimmed again for the night, and Sara started to relax as much as she could given her circumstances. But she couldn't stop thinking about Anna - her amazing green eyes, that wicked and beguiling smile - how this magnetic and manipulative woman seemed to see right through Sara's exhibitionist desires, and how she seemed determined to exploit them for her own amusement. What else did Anna have planned for her? What other exposures and humiliations were in store for her before they landed? And what then? With all her clothes down in the cargo hold, how would she even get off the plane? Was Anna really going to make her go get her bag wearing only this scrap of fabric that she couldn't even wrap around herself? \n\nSara's heart started to race again... \n\nAnd... was Anna right, after all? Sara wondered - as she recalled all the embarrassments and humiliations Anna had already inflicted on her, and reflected on the excitement and deep arousal they had incited inside her - did she really want this? \n\nSara's fingers drifted between her legs as she replayed the moment Anna had first made her pull her blanket down and reveal her naked body, and remembered the helpless thrill she felt as that gorgeous stranger looked down at her with her devilish smile, so clearly enjoying her power to make this young, nervous girl expose herself to her so completely. Sara flushed when she pictured Anna's piercing green eyes lustily looking her naked body up and down, and she squirmed when she recalled the woman's sultry, teasing whispers in her ear. \n\nSara's body felt steamy under even that tiny scrap of cloth, and sweat stared to glisten on her chest as she remembered that taunting, triumphant grin after she surrendered the magazines and Anna had finally stripped her once and for all of any possible covering. And Sara relived the humiliation - and, yes, elation - of that moment as she squirmed, naked and helpless, under this beautiful woman's appreciating gaze, knowing that she depended entirely on her to provide any chance at modesty or dignity. \n\nSara started breathing heavier as she recalled the humbling, titillating fear she felt when she cowered under the meager scrap of cover Anna had offered, begging to be allowed to keep it, and knowing it was totally within this woman's power to take it away and leave her naked and exposed in a cabin full of strangers for the rest of the flight. ",
        "Yes, it was thrilling to be stripped and teased like this. Yes, it was an electrifying, mortifying, exhilarating experience to be so hopelessly naked and feel so completely at this woman's mercy. Yes, this was just the sort of titillating, embarrassing, heart-pounding experience that she had fantasized about having on this vacation. \n\nYes, Anna was right, Sara finally admitted to herself as her hips bucked against the seatbelt and her other hand gripped the armrest. She wanted this. \n\nAs Sara panted weakly and hastily covered herself again after she let her tiny covering fall away while pleasuring herself. Then, her head still swimming with erotic reveries about Anna, and before she could even think clearly about the implications, her moist fingers reached for the call button. \n\nAnna emerged from behind the curtain at the front of the darkened coach section as if she was expecting the call, and slowly sauntered down the dozen rows to where Sara waited, still breathing heavy and glistening with sweat. \n\n\"Well, I see you're enjoying the flight,\" said Anna with raised eyebrows and that wicked smirk. \n\n\"You're right,\" whispered Sara, almost too softly to hear. \n\nAnna leaned in very close and locked eyes with her. \"Say that again.\" \n\n\"I said... you're right.\" \n\n\"About what?\" she prompted as she ran her finger across Sara's sweaty chest. \n\n\"A-about me wanting this.\" \n\n\"Wanting what?\" Anna asked, putting her salty finger in her mouth. \n\n\"About you doing this to me,\" Sara whispered, suddenly feeling ashamed of what she was saying, and yet even more aroused by it. \"Teasing me, taking my clothes away, making me expose myself for you.\" \n\n\"So, you enjoy me playing with you like this.\" \n\n\"Yes.\" \n\n\"You're my naked little toy, and you're loving it.\" \n\n\"Yes...\" \n\n\"And you want... more.\" \n\n\"Y-yes...\" \n\n\"Well then, my horny little exhibitionist, you're going to have to come join me behind the curtain at the front of the section,\" said Anna. \"Oh, and I'm taking this with me,\" she said, tugging at Sara's tiny blanket. \"Don't worry, sweetie, everybody's asleep.\" \n\nSara submissively released her grip and once again let Anna take away her only covering, leaving her totally naked in her seat. It was many excruciating moments after the flight attendant disappeared behind the curtain before Sara was finally able to muster the courage to follow. \n\nStanding naked in the darkened aisle, feeling the dry air suddenly all over her moist skin, Sara felt so exhilaratingly bare and exposed that she thought her heart might leap out of her chest. With each slow, timid step forward, her hands the only thing hiding her privates, she was thrillingly aware that any one of the sleeping passengers around her could stir at any moment and catch her nude, literally streaking up the aisle of an airplane. By the time she reached the curtain at the front, Sara was so aroused that she was almost dripping. \n\nBehind the curtain, Anna was waiting for her in the dimly lit catering area, and her devouring eyes made Sara feel like an ice cream sundae all over again. Then Anna twirled her finger, directing Sara to turn around for her, and the naked girl meekly obeyed, turning slowly, even as she blushed, making sure to give this demanding woman a good look at her nude body from every angle. \n\nWhen they faced each other again, Anna reached out and casually caressed Sara's firm breast, making her flinch slightly. \n\n\"You've never been with a woman before, have you, my naked little toy?\" said Anna, not taking her hand away, but instead reaching out with the other to stroke Sara's bare butt, making the nervous girl jump again. \n\n\"No... um, I... I...\" Sara's voice trailed off as she was distracted by Anna's delicate touch, anxious about where her hands would go next, but excited to find out. \n\n\"Never even considered it?\" \n\n\"Well, I-I mean... not really... b-but I...\" Sara stammered nervously, her voice fading again as she lost herself in Anna's brilliant green eyes. \n\n\"You know what I think?\" said Anna, taking her hands and drawing Sara closer until her nipples brushed the front of the flight attendant's blouse, making the naked girl's heart flutter. \"I think it doesn't really matter to you that I'm a woman - you're just so damn turned on that I can get you naked and make you do such naughty things.\" \n\nFinally, Anna kissed her gently and Sara swooned, leaning in for more. As they kissed more deeply, the woman's hands glided across what felt like every inch of the naked girl's pale, bare skin, and Sara eagerly moved her feet apart when Anna's fingers arrived between her legs. \n\nAs her naked body flooded with arousal, Sara unconsciously arched her back and raised one leg, rubbing her inner thigh against Anna's skirt and curling her leg around to pull the woman closer. Anna returned Sara's passion, pressing the girl back against the wall, and the sudden feeling of the cold plastic against the full length of her naked body made Sara gasp with shock and arousal at the stark reminder of her total nudity. \n\n\"Shhh!\" said Anna, putting her moist finger against Sara's lips. \"You don't want to wake up the other passengers. Trust me.\" \n\nThey resumed making out, and Anna continued to stroke and caress Sara all over her nude body, never letting the girl forget for even a second that she was completely naked, in the middle of an airplane, in the arms of a stranger who hadn't even asked her name. \n\nOnce Anna had gotten Sara so worked up that her legs were shaking, she broke off the kiss and stepped back. \n\n\"Do you want more?\" she asked. \n\n\"Yes, please,\" Sara panted desperately, her mind swimming, \"more, please.\" \n\n\"Do you want it enough to do something more for me, my naked little toy?\" she asked. \"Something even more daring and scary than anything you've done for me so far?\" \n\n\"W-whatever you want,\" Sara stammered as she twisted her legs together wantonly, unable to imagine anything worse than what she'd done already, but now equally incapable of saying no. \n\n\"Well then, I'm going to go all the way to the back of the plane, and I want you to join me there. But I need you to wait until I get there before you follow me, because I want to watch my naked toy walk all the way down the entire length of the cabin, past all those sleeping passengers, completely naked and exposed. Will you do that for me?\" \n\n\"Oh god, all that way? Past all those people? I-I don't know...\" \n\nAnna just smirked and swirled her finger between Sara's legs again, stirring her up once more. \n\n\"If you do this for me, sweetie, I promise I'll give you something that you want,\" she whispered, taking her finger away again right at the crucial moment. \n\n\"Okay,\" Sara whimpered, \"I-I'll do it.\" \n\n\"You'll do it for me.\" said Anna firmly, locking eyes with the squirming, naked girl. \n\n\"Yes, I'll do it for you,\" said Sara with an anguished look. \"But can I... can I just ask one thing from you?\" \n\n\"Oh, getting bold, are we?\" said Anna, tweaking Sara's erect nipple. \"Well, you can certainly ASK, my little toy, but I can't promise you what I'll answer.\" \n\n\"Can I...\" Sara whimpered awkwardly as she shifted from one foot to the other. \"Can I please pee first? I just realized I've really gottta go!\" \n\nAnna laughed out loud before she caught herself and then silently chuckled at Sara, who was now clasping both hands between her legs and hopping on one foot. \n\n\"Well, I have to say, it's soooo adorable that you felt the need to ask my permission first that I'm almost moved to say yes,\" said Anna, flashing that wicked, controlling grin and pinching Sara's cheek. \"But I'm thinking you might need that little extra motivation to get your naked ass moving down that aisle. So, I'm going to make you wait you until you get to the loo at the back of the plane.\" \n\n\"B-but...\" \n\n\"Tut-tut,\" said Anna, again putting a moist finger to Sara's lips. \"Backtalk will only delay your relief - and your reward. So, let's get you ready for that long, naked walk.\" \n\nWith that, Anna untied the kerchief of her flight attendant uniform, and for a brief moment Sara thrilled at the hope that Anna was about to undo her blouse and show the naked girl her well-rounded breasts. But alas, the beautiful woman remained fully clothed, and instead turned Sara around, pulled her hands behind her back, and tied them tightly together. \n\n\"What are you doing?\" said Sara in a panic. \n\n\"I saw you covering yourself like a naughty girl on your way up here,\" Anna said, playfully smacking Sara's bare ass. \"We can't have my naked little toy doing that on your way to meet me for your reward. I said I wanted to see you do it naked and exposed...\" \n\nStill standing behind her, Anna reached around to tease Sara between her legs one more time, pulling her back to press the girl's naked ass against her hips and putting her lips right up to Sara's ear. \n\n\"And in case you get any ideas about chickening out on me along the way, my little plaything, do keep in mind that from where I'll be standing, I can turn all the cabin lights back on with the flip of a switch, at any moment I choose.\" \n\nWhen Anna disappeared beyond the curtain, leaving her alone, naked and bound, Sara almost had a panic attack. Picturing herself caught completely nude, her hands tied behind her back, in the middle of the airplane cabin as it suddenly flooded with light was almost too much for her to bear. Her heart pounded, her chest tightened, but also... her nipples stiffened sharply \u2014 and not just from the air conditioning on her sweaty, naked skin. As scared as she was, Sara was also hugely aroused, and she felt quite slippery between her legs as she shifted nervously from foot to foot. \n\nYes indeed, Anna was right \u2014 Sara wanted this... \n\nBut could she actually do it? \n\nSara peeked out from behind the curtain and saw Anna waiting for her at the far end of the cabin, beckoning her with the same teasing finger \u2014 even the same motion \u2014 the woman had used so skillfully to entice the anxious girl into this predicament in the first place. To be sure, Sara was in desperate need of the \"reward\" Anna had promised her, but she realized she also felt nearly as compelling a desire to please this magnetic, demanding woman. A good deal of her blushing when Anna was making her expose herself, Sara realized in retrospect, was actually from how flattered she felt that this gorgeous woman wanted \u2014 indeed, demanded \u2014 to see her naked, and also from the lasciviously approving gaze she received when she complied. \n\nSara had to go through with it, however frightened she was. This was what she wanted \u2014 but almost more importantly, this is what Anna wanted. Anna was in control now, and Sara was her naked toy. \n\nTaking a deep breath, Sara stepped out from behind the curtain and looked out at the long coach cabin filled with sleeping passengers. She noticed with alarm that a few in the window seats actually had their reading lights on, but mercifully, they all seemed to have dozed off in their books. As Sara took her first tentative steps down the aisle, her eyes kept jumping from face to face up and down the three dozen rows of seats, hoping to reassure herself that they were all still asleep, but looking at so many individual faces, knowing that any one of them, at any moment, could open their eyes and catch her strolling naked through the cabin only made her heart pound harder. \n\nEvery movement from any passenger - shifting in their seat, repositioning their head - made Sara jump as she made her way down the aisle. One snoring businessman suddenly snorted and lolled his head just as Sara was walking past, making her freeze like a gazelle, but Anna's demanding gaze compelled her to keep moving. \n\nSara couldn't help but strain against her bindings at moments like that, so powerful was her instinct to cover herself. Anna was smart to tie her hands, the frightened girl realized, if she really wanted to be sure to see her naked toy walking exposed. \n\nAs she made her way slowly down the aisle, twitching at every movement around her, Sara was struck with a lightning bolt of fear when she saw a man in a window seat a few rows ahead of her suddenly wake up and open his eyes. \n\nHe was looking straight at her, eyes wide. \n\nReflexively, Sara ducked down and crouched in the aisle so the rows between them shielded her from his view. \n\n\"What the fuck?\" he muttered quietly to himself. \"Was she... naked?\" \n\nShe held her breath as she listened to him shift in his seat as if craning to get another look at what he was sure he had just seen. From her crouch, Sara could see just the very top of his bald head barely bobbing above the edge of the seat that was shielding her, still blocking his view. \n\nThen she heard him unbuckle his seatbelt to stand up. \n\nSara dropped to her knees in a panic and lowered her head to the floor. Desperate to get herself as low as possible, the terrified, naked girl spread her legs wide apart until they touched the seats on either side, and pressed her bare belly against the carpet. All she could do was hope she had gotten too low for the man to see her, and pray that he would soon lose interest and go back to sleep. \n\nAs her heartbeat thundered in her chest, Sara imagined what a sight she must be to Anna right then: naked and prostrated towards her like a worshiper at a temple, hands bound behind her back like a slavegirl to be sacrificed. And the mortified girl couldn't bear to even picture the spectacle that her well-spread butt cheeks would present to anyone behind her who might happen to turn in their seats and look down the aisle. \n\nEventually, the noises from the window seat died down and Sara dared raise her head. After a few moments she shuffled forward on her knees to peek between the seats in the row in front of him, and to her great relief, she saw the man dozing soundly again. \n\nBut that slight comfort was immediately replaced with renewed terror when Anna cleared her throat(!!) and theatrically reached behind the curtain for the light switch she had warned Sara about. The naked girl quickly got to her feet and shook her head with a plaintive look, scampering forward a few steps to prove to her tormentor that she wasn't going to chicken out. \n\nAnna's smug grin made Sara feel so utterly helpless and vulnerable. There she was, completely nude, all her clothes down in the cargo hold, walking stark naked down the aisle of an airplane with her hands bound behind her back - and she had just very nearly been caught by someone - yet Sara knew she couldn't stop, she had to keep going, or else this wicked vixen was surely going to flip on the cabin lights so she would be caught naked by everyone. \n\nSara had never felt so exposed in her life as she made her way down the aisle in front of dozens and dozens of total strangers, all seated facing her. She felt like a naked stripper on stage in a theater full of people - but a stripper who wasn't getting paid for this act, and hadn't even signed up for it, but was just stripped bare and shoved out in front of the crowd by her \"manager,\" Anna - who was now waiting for her, practically tapping her foot, at the far end of the cabin. \n\nAnd that, Sara was now able to admit to herself, did give this maddening escapade a special thrill. The fact that Anna had this control over her - to make her \"naked toy\" risk such humiliating exposure for her own amusement - turned Sara on far more than if she had somehow found the courage to do this on her own. But of course, Sara knew she could never have even imagined doing something as thrilling and risky as this if Anna hadn't pushed her into it. Every moment of arousing exposure, every heart-pounding thrill of near-humiliation that Sara had experienced since the moment she took off her dress, she knew she owed to Anna. And as excruciating as all of Anna's manipulative games had been, Sara felt strangely grateful. \n\nBut that gratitude was immediately put to the test when Sara heard an indignant gasp from an elderly woman in a seat just ahead of her. \n\n\"Young lady, you're naked,\" she whispered scoldingly, as if Sara was somehow unaware. \n\n\"Shhh, oh god, please,\" said Sara in a hushed voice, crouching next to her and scrambling to come up with some explanation. \"Please, please don't make a fuss, ma'am. My, um, my school friends and I are on holiday and they just dared me to make a naked dash to the bathroom - just for a laugh.\" \n\n\"Running around naked on an airplane?\" the old lady hissed with a disgusted look. \"I should think a girl could get arrested for such a thing, you shameless little hussy.\" \n\n\"Oh god no, please don't say anything,\" begged the naked, blushing girl as she glanced around, fearful that this awkward conversation might wake someone else up. Sara desperately wanted to cover herself, but knew she couldn't even try - so she just knelt there, thoroughly humiliated, displaying her naked body to this prudish old crone as she scolded her as a hussy. \"I know it's foolish, ma'am, but please forgive me - we had quite a few drinks on the plane.\" \n\n\"It certainly is foolish,\" sniffed the old woman, \"but nothing less than what I would expect from you young people today.\" \n\n\"Yes, ma'am, terribly foolish,\" Sara agreed humbly as she sidled past the scornful dowager, carefully angling her body so the woman wouldn't see her bound hands and realize just how foolish Sara actually was. \"I'm a very silly, foolish girl.\" \n\n\"When I was your age, a girl would get the strap for such antics...\" the old lady muttered, her head drooping as she nodded back in indignant slumber. \n\nWhen Sara finally reached the back of the plane, her heart still pounding from her twin traumas, Anna held up her hand for her to stop. Sara squirmed in front of her, naked and bound, as Anna reached out and cupped her breast, stroking the nipple with her thumb. This covered Sara with fresh goosebumps and made her glance frantically around at the nearby passengers to make sure they were all still asleep. \n\n\"Please,\" she mouthed without a sound, but Sara somehow knew better than to try to move behind the curtain before she was invited. \n\nThen with that same beguiling, triumphant grin, Anna ran her finger down from Sara's breast to between her legs, and slid it inside the naked girl, making her choke back a gasp. Then Anna curled her finger and pulled, expertly pressing Sara's g-spot and leading the quivering girl behind the curtain. \n\n\"It seems almost a shame to untie you,\" Anna said as she ran her hands over the naked girl's breasts and tweaked her nipples. \"You're so deliciously helpless and vulnerable now.\" Then she ran her fingers down Sara's ticklish sides, making her twitch and catch her breath. \"It's almost more fun to play with you like this.\" \n\nSara just whimpered and squirmed as the woman's fingertips ventured towards her bare belly, fully accepting her utter helplessness at Anna's hands, but when she unconsciously started hopping from one foot to another Anna stopped her tickling torment and reached behind her to grab one end of the kerchief binding Sara's wrists. \n\n\"You were very brave, sweetie, walking all that way in the nude for me,\" said Anna as she again teased Sara between her legs. \"I saw you got into some trouble, but you didn't let that stop you from doing what I told you to.\" \n\n\"Thank you, ma'am. I did my best,\" said Sara, her hips already grinding with Anna's touch. \n\n\"So, I guess the least I can do it let you relieve yourself,\" she said, withdrawing her fingers and nodding toward the rear restroom as she tugged the end of the kerchief to release Sara's hands. \n\nSara let out an involuntary whimper at the lost stimulation, but then immediately clutched her crotch and gratefully dashed for the loo. ",
        "Inside, the light seemed blinding and terrifying to the nude girl who had just spent the last half-hour creeping around naked in the dark. But as her eyes adjusted, Sara got a good look at herself in the mirror. Strands of her shoulder-length hair clung with sweat to her burning-red face, and Anna's bright pink lipstick was smeared around her mouth. Her chest was flushed as if she had a fever, and the nipples on her apple breasts were sharp with wanton excitement. Most shameful of all, the gap between her skinny thighs glistened with the fruits of her arousal. \n\nSara looked away from the whorish image and dropped down to the seat, burying her face in her hands. Was that really her? Was she really that horny, naked slut with a lipstick-smeared face, her body on fire from the touch of a woman who clearly delighted in her humiliation? \n\nWhen she was finally done, the long-awaited relief combined with her intense feelings of shame almost brought Sara to tears, but when she reached down between her legs to daub herself dry, other feelings quickly took over again. \n\nSara dropped the tissue and started touching herself, recalling Anna's expertly titillating fingers. Her breath quickened, and her shame was subsumed in the thrill she recalled from walking down the aisle for Anna, completely naked and exposed. Sara marveled at the wetness her escapade had created, and as her heart quickened along with her fingers, her arousal built closer and closer to the point of no return, until... \n\nKNOCK, KNOCK, KNOCK! \n\n\"You know I have a key that unlocks this door, right?\" said Anna, as Sara leapt up from the seat, somehow more embarrassed by this than being caught by the old woman. \n\n\"Sorry! I'm coming,\" she said as she flushed the toilet and frantically washed her hands. \n\n\"You'd better not be,\" Anna chuckled as the naked, hopelessly horny girl emerged from the bathroom. \"You're not allowed to do that until I say so.\" \n\n\"N-no, I didn't - I mean... I wouldn't,\" said Sara sheepishly, surprising herself with how easily she surrendered control of her climax. \n\n\"Now, I'd like to see how well my toy can behave for me when your hands aren't tied,\" said Anna, placing Sara's hands on her head. \"You'll hold still like a good girl while I play with you, won't you, my naked little toy?\" \n\n\"Y-yes,\" Sara answered, unsure exactly what she was in for. \n\nAnna's hands danced all over Sara's naked body as she lightly kissed the girl's eager lips. The woman's fingertips seemed to find all the most sensitive and intimate places on Sara's body, making her flinch and squirm - but Sara never took her hands off her head, fearful that it would make Anna halt her sensual ministrations. \n\nThen, when Sara was so worked up she was panting and shaking and about to explode, Anna once again stepped back, making the desperate, naked girl almost cry. \n\n\"Please! You promised that if I did this for you, you'd give me what I want,\" Sara whimpered, \"and I want to... finish.\" \n\n\"No, my little toy... I told you I'd give you something you want,\" said Anna, reaching into a cabinet. \"And I do believe you may want this...\" \n\nThe woman pulled out Sara's sundress and dangled it in front of her. \n\n\"Oh, thank god you still have it!\" said Sara, reaching for the pink dress. But Anna pulled it just out of reach. \n\n\"Well what I'm really going to give you is a choice,\" she said, \"between this... and something I think you want even more.\" \n\nAnna swung the long dress back and forth as if to hypnotize Sara, so obviously enjoying her power over the naked, squirming girl. \n\n\"I could give you this dress back right now, and then you can go back to your seat and spend the rest of the flight relaxing as a normal, fully dressed passenger... But that's all you will be to me. We're done. I won't even look at you again \u2014 and even if you press the call button, I'll send Beverly to you instead.\" \n\nAnna then held the dress away and returned her other hand to slowly stroking Sara between her legs. \n\n\"Or... You can choose to remain my naked little toy... That means, you will give this lovely dress to me as a gift to keep, so that you know it will be entirely my choice when \u2014 or if \u2014 I decide to let you 'borrow' it at some point before you have to get off the plane. And it means that even after I finish turning you into a hot mess back here, I will continue playing with my naked little toy however I want, for as long as I want, and you will have to do whatever naughty, naked things I say.\" \n\nSurrendering so completely to this demanding woman when she was so close to an escape to normality made absolutely no sense, Sara knew... but the very thought of it turned her on so much that she almost climaxed right then. But Anna's fingers once again pulled away tauntingly. \n\n\"So... what's it going to be?\" she asked, dangling the dress. \"Choose wisely...\" \n\n\"I\u2014 I want...\" said Sara, biting her lip, \"I want to be your naked toy.\" \n\nAt that, Anna dropped the dress and pushed Sara against the wall again, making the naked girl gasp loudly once more at the cold shock against her back and bare ass. But this time Anna muffled the sound with a kiss so deep that it made Sara almost \u2014 almost\u2014 forget where she was. But that feeling ended abruptly when Anna pulled the curtain open and turned Sara's head to make her look back into the darkened cabin full of strangers that she had just walked through completely nude. \n\n\"You know that any, or all, of those people could have \u2014 and may still \u2014 see you naked before we're done,\" Anna said, as she teased Sara between her legs. \"And it's going to be entirely up to me when and how you expose yourself to them, understand?\" \n\n\"Yes ma'am...\" \n\n\"Your naked body is my toy to play with,\" she continued, tweaking the squirming girl's nipple as her fingers went deeper inside her. \"And I can do anything I want with it, isn't that right?\" \n\n\"Yes ma'am,\" Sara panted, \"yes, anything \u2014 anything you want...\" \n\n\"And if I decide I want to show off my little toy, to anyone I want, you're going to obey me, right?\" \n\n\"Yes ma'am, yes, whatever you say...\" \n\n\"You have no more right to modesty, no expectation of the privilege of covering yourself,\" said Anna matter-of-factly, as she worked one hand between Sara's legs and the other caressed her breasts and bare butt. \"You've surrendered that to me entirely in exchange for the sexual thrills I can give you in return.\" \n\n\"Yes ma'am, I surrender to you,\" said Sara, unprompted, humping Anna's hand furiously. \n\n\"Why?\" \n\n\"Because... because I'm your naked toy.\" \n\n\"Good girl,\" said Anna, patting Sara's bare butt and pulling the curtain closed again. \"Yes, you are... And you love it, don't you?\" \n\n\"Yes ma'am, I love it.\" \n\n\"So, if I do decide to give you a blanket later on, so my exhausted little exhibitionist can maybe try and get some sleep tonight, then you know you're still not allowed to cover yourself with it without my permission, right?\" Anna said, pulling her fingers away again. \n\n\"Yessss...\" whimpered Sara. \n\n\"Mmm?\" \n\n\"Yes ma'am, because I'm your naked toy.\" \n\n\"And...?\" \n\n\"And I love it!\" \n\n\"Very good!\" said Anna, rewarding Sara with renewed - but devilishly light - attention between her legs. \"And if I decide at any time tonight that I would like to take a look at my naked toy's lovely little body, and I suddenly show up next to your seat... you're going to drop the blanket - without being asked - turn on your reading light, and wait patiently - under a spotlight, on full display - until I'm done looking at you and I walk away. Correct?\" \n\n\"Yes, I will,\" said Sara, grinding her hips over Anna's fingers. \n\n\"Because...\" Anna said slowly, drawing her hand back slightly. \n\n\"Because I'm your naked toy and I love it!\" pleaded Sara, her hands clinched atop her head as she thrusted her hips forward, desperately chasing Anna's touch. \"Please play with me! Please play with your naked toy!\" \n\nAs if genuinely moved by Sara's earnest plea, Anna plunged deep inside her, lifting the naked girl up onto her toes and making her gasp with pleasure. \n\n\"Yes, thank you, thank you! Please play with me! Please let your naked toy cum for you!\" said Sara so loudly that Anna had to cover her mouth with a kiss. \n\nIn that very moment, Sara's body quaked with an otherworldly climax. Had Anna's strong hand not been supporting her like a saddle, Sara surely would have dissolved into a quivering puddle on the floor. The woman's other arm expertly swooped to support the small of her back when Sara arched and writhed in prolonged ecstasy as Anna manipulated her g-spot in the way only another woman can. \n\nWhen Anna finally released her from the extended orgasm, Sara barely knew where she was anymore - only that she was totally alive, naked, and wanting more... \n\n\"Oh... oh god, thank you...\" mumbled the delirious, nude girl as she struggled to get her footing on her wobbly legs. \"That was... amazing...\" \n\n\"Yes, yes it was, baby,\" said Anna, rubbing Sara all over like a racehorse after a run. \"That orgasm was quite impressive. You must have been wanting something like this for a long time.\" \n\n\"I\u2014I guess so...\" \n\nBefore Sara could even get oriented in her post-coital headrush, Anna got to work stirring her up again, licking her nipples and teasing her clit. \n\n\"But of course, now that you've chosen to be my naked toy, you must know that I've only just begun to play with you...\" \n\nBoth unable and unwilling to stop her seductress, Sara allowed herself to be taken to an even higher plane of arousal. She felt a profound desire to let Anna do whatever she wanted - and to do whatever Anna wanted her to do... \n\n\"Now, let's see how well my naked little toy can behave for me when she's not waiting for a reward,\" Anna said, turning Sara around to face the curtain hiding them from the rest of the cabin. \n\nShe took Sara by the wrists and put her hands high up on either side of the doorway, and then nudged Sara's bare feet wide apart with her shoe. Next Anna ran her hands over Sara's naked body, sculpting her pose like an artist. \n\n\"Back arched, tits up, butt out,\" she said, then she reached around between Sara's legs and literally lifted her up by her clit. \"And up on your toes.\" \n\nSpread-eagled and posed like this, Sara felt even more exposed than when her hands were bound behind her back, and that feeling multiplied exponentially when Anna reached forward and drew back the curtain in front of her as if revealing the prize on a game show. \n\n\"Now, I want my naked little toy to stay completely still for me, no matter what I do to you,\" Anna whispered in Sara's ear as she trailed her fingertips ever-so-lightly down her arms. \"And I guess I don't have to remind you not to make any noise.\" \n\nSara's worst fears were realized when Anna's fingers reached her armpits and swirled around. The naked girl shivered from head to toe and had to bite her lip to keep from squealing. Anna's delicately tickling fingertips then drifted down to swirl around her breasts, then slowly made their way down her ribs, making Sara's breath catch and quiver. She had to strain with all her might to keep her outstretched fingertips touching the sides of the doorway and hold the wanton posture Anna had imposed on her. Sara's skin was so sensitive right after her colossal climax that Anna's slightest touch sent shockwaves through her body and made her every muscle twitch. When the woman's fingertips made their way toward her taut tummy, Sara was about to beg \"please, no!\" but she suddenly had to choke back the words to avoid erupting into peals of laughter. \n\nIt took every modicum of Sara's self-control to keep herself from curling up into a quivering, squealing ball, but she remained in her achingly vulnerable pose as Anna's deft hands teased and tickled the most sensitive parts of her naked body, covering her again with goosebumps head to toe - all while Sara bit her lip and stared out at the airplane cabin filled with (hopefully!) sleeping passengers. \n\nAs the tormenting tickles neared the point where Sara felt she could no longer endure them, Anna mercifully moved one hand down to rub her squirming toy's clit, and put her lips to the girl's ear. \n\n\"And now, my wonderfully obedient, naked little toy, this is what you're going to do for me next to prove what a shameless exhibitionist you really are... You're going to take a loooong, sloooow walk of shame back to your seat - completely naked, with your hands at your sides - and when you sit down, you're going to pull up your window shade and turn on your reading light. Then you're going bask in that spotlight and touch yourself as you look at your reflection in the window, watching yourself masturbate - totally naked and exposed - sitting in an airplane filled with strangers...\" \n\n\"Oh god,\" Sara whispered, equally thrilled and horrified at the thought. \"I\u2014I...\" \n\n\"You're going to do this for me, right?\" insisted Anna, as she simultaneously teased Sara's clit and tickled her breasts. \n\n\"Y-yes ma'am...\" stammered Sara, her horny, delirious brain barely able to grasp what she was committing to. \n\n\"Because...?\" \n\n\"Because I'm your naked toy... and I love it.\" \n\n\"And you're not going to stop, no matter what, until you finish. And even after you're done, you're still not going to turn your light off - you're just going to press the call button and wait for me, naked and on display under the spotlight, until I come to you. You're going to this for me, right?\" \n\n\"Yes ma'am,\" Sara panted, \"because I'm your naked toy - and I love it.\" \n\n\"Very good, sweetie,\" said Anna, giving Sara's neck a gentle kiss. \"And if you can be a good little naked toy for me, and you do everything I say for the rest of the flight, then I promise that at some point after we land, I'll make sure you have something more than a blanket to wear when you get off the plane.\" \n\nThen she gave Sara's bare ass a little shove up the aisle. \n\n\"Now you'd better get going, sweetie. It's a long walk, and your legs still look a little wobbly,\" Anna said, running her finger down Sara's spine. \"But walk slowly - I want to watch my naked toy work her cute little bum for me.\" \n\nSara's first steps were indeed wobbly, her mind still delirious from her climax, and her body still tingling all over from Anna's tickling touch. But she carried on up the aisle towards her seat, where she had committed to doing the most brazen and shameless thing she could possibly imagine. \n\nAs terrified as Sara was thinking about the task that awaited her, this walk was somehow easier than the last. Partly, of course, that was because she was looking at the backs of the seats instead of people's faces. And partly because the lingering euphoria of her recent climax masked her fear. But mostly, Sara realized, it was because she knew why she was doing it. \n\nShe was doing it because that beautiful, captivating woman behind her had turned Sara into her naked toy, and she told her to do it. Sara was doing it for her. \n\nSara strode ever more confidently up the aisle, making sure her walk was as seductive and sexy as she could manage - up on her toes, hips swinging, shoulders rolling - hoping to please the woman who commanded it. She barely hesitated even as she neared that scolding old woman, whom Sara could tell was awake a fidgety. \n\n\"Tsk, tsk, girls these days are such trashy little harlots,\" hissed the dowager as she passed. \n\nThe accusation made Sara feel humiliated, but also thrilled, and she gave her butt an extra little wiggle as she proceeded on. She somehow didn't care how many judgmental grandmas or skeevy businessmen might be staring at her swishing ass and she sashayed up that aisle - because she knew Anna was watching too, and Sara was doing this for her. \n\nWhen she finally reached her seat, Sara turned and struck a lascivious pose, looking back down the aisle, past the faces of all the dozens of strangers to find the only one that mattered: the woman who was forcing her - no, inspiring her - to do all of this. Seeing Anna's bright, approving smile shining from the back of the darkened cabin filled Sara's naked body with a warm glow. \n\nThen Sara took her seat - and a deep breath - before sliding up her window shade. With her eyes fully adjusted to the darkness, she could already see her reflection as clearly as in the bathroom mirror - her slender, naked body slumped low in the seat, her small breasts punctuated with erect, beadlike nipples, her eager fingers already venturing below her neatly trimmed bush, her chest and taut stomach rising and falling with every nervous breath. And looking deeper into the dark reflection, she noticed that she could also see the sleeping woman across the aisle in her row - just as clearly as that woman would be able to see her if she woke up during Sara's shameless display. \n\nRealizing this, her sense of embarrassment and fear returned, quickly burning through her erotic fog, and it was with a reluctant, shaky hand that Sara slowly reached up to turn on her reading lamp. \n\nThe blinding flood of light stunned her. Reflecting off her pale skin, the light suddenly made Sara's nude body incandescent in the darkness. She felt like a lighthouse beacon, visible for miles around, begging to be noticed. Sara knew that if anyone did see her naked like this, the sight would be seared into their mind forever. \n\nLooking at her radiant reflection in the window, she ran her fingers up and down her body from her thighs to her breasts before plunging them into her sex, marveling at the sight of this wanton, naked slut - which she knew to somehow be herself - masturbating in an airplane seat where anybody walking by could see. \n\nSara had never looked at lesbian porn, or even solo female masturbation videos. She had never even watched herself masturbate in a mirror as some of her straight friends like Rosie had. But the sight of herself naked and masturbating - teasing her breasts and rubbing her clit - turned Sara on more than she thought possible. \n\nSeeing herself under such a hot spotlight, spreading her legs and pleasuring her naked body, Sara couldn't help but feel like she was on a stage at some sleazy sex club, putting on a profane show for a crowd of horny pervs like some whore. And to her surprise and shame, that disturbing thought only heightened her arousal as she dug deeper into herself. \n\nAs Sara neared her third(?) orgasm of the evening, her breath came in frantic pants, the faintest hint of a moan creeping into each one despite her desperation to stay quiet. She watched her reflection as her naked body bucked and writhed, her chest heaving with every breath, one hand working furiously between her legs and the other squeezing her breasts and twisting her nipples. \n\nWith the pressure building, Sara finally stopped watching her slutty performance and just surrendered herself to the sensations boiling inside her. Her bare skin felt electric as she ran her free hand all over her naked body. Each twist of every squirming joint felt synchronized in an orchestra of arousal, and she thrashed her head from side to side in the near agony of her approaching erotic crescendo... \n\nThen, just as she bit her lip and pressed hard on her clit to fling herself over the edge into orgasm, Sara opened her eyes to see that the woman across the aisle was no longer asleep, but instead quite awake and staring straight at her, totally aghast. \n\nUnable to stop her cresting climax, Sara could only meet the woman's gaze, their shocked eyes locked, as her naked body writhed and quaked helplessly in front of her. \n\nIt seemed like an eternity before Sara regained control of her limbs and managed to clench her arms over her privates, her entire, nude body blushing under the woman's appalled stare. The passenger leaned forward and moved her mouth as if she was trying to speak, but no sound came out and her eyes rolled around in her head. The woman's heavy eyelids drooped and rose, and Sara realized that she must be fighting the sleeping pills she had downed before they took off. With any luck, hoped the naked girl as the woman appeared to drift off again, she wouldn't even remember what she saw when she woke up the next day when they landed. ",
        "Even after the woman went back to sleep, Sara still desperately wanted to turn off her reading lamp, naked as she was under the blinding spotlight. But she knew better than to indulge her modesty instead of obeying Anna's instructions, so after a few deep breaths, Sara reached up and pressed her call button. \n\nAfter an excruciating wait, Sara looked up to see Anna standing over her with that smug-yet-beguiling smile as she stared down at her obedient, naked toy. \n\n\"You know I heard you in the back,\" said Anna, taking the seat beside her. \"You were really moaning right there at the end.\" \n\n\"Oh god I know,\" said Sara, sinking into her seat. \"The woman across from me actually woke up and saw me!\" \n\n\"Don't mind her,\" said Anna, putting her arm around Sara and stroking her hair. \"She's an auto-parts heiress who makes this trip at least twice a month, totally doped up, both ways - and probably most of the time in between. She won't remember a thing.\" \n\nThen Anna tipped Sara's chin up to look into her eyes and started caressing the naked girl's body all over. \n\n\"What I'm more concerned about,\" Anna said as her fingertips drifted closer to the slippery crevice between Sara's thighs, \"is that you remember what happened tonight.\" \n\n\"Oh jeez, oh my god, are you kidding me?\" said Sara with a weak chuckle. \"I'm going to be thinking about tonight for the rest of my life.\" \n\n\"So, it was what you wanted - what you were hoping for when you stashed away your dress...\" \n\n\"Yes, yes it was,\" confessed Sara, gasping slightly as Anna's fingers slithered between her legs. \"This whole vacation with me and my friend, actually - it was meant to be some sort of exhibitionist adventure for us. But what you made me do on this flight was just... wow, so far beyond anything we were planning.\" \n\n\"Oh? Your friend?\" prompted Anna, her other hand teasing Sara's breasts, circling her nipple with a red-polished fingernail. \n\n\"Ah! ooh, yes... um, Rosie... I-I met her on her semester abroad and she suggested we take a beach vacation together...\" Sara squirmed as Anna's fingers delved inside her, somehow cranking up her arousal yet again as if she hadn't just moments ago had yet another body-shaking climax. \"We - we planned to stay at the Coral Cay...\" \n\n\"Oh yes, that resort has a nude beach, doesn't it?\" \n\n\"C-clothing optional, yes,\" said Sara, her breath coming in shorter pants. \n\n\"So, you and your little friend really are aspiring exhibitionists, aren't you?\" \n\n\"W-well, yes... we have this plan, to swim naked up the coast to a regular beach and - oh!\" said Sara, as Anna's finger found her g-spot. \"And... and then maybe come out of the water there and - oooh! - um, and then make our way home along the beach...\" \n\n\"Oh my, how daring!\" said Anna, as her other hand danced across Sara's bare, super-sensitive skin. \"You and Rosie are such naughty little girls, aren't you?\" \n\n\"Yes ma'am, I-I mean, I guess so...\" said Sara, suddenly blushing again without really knowing why. \n\n\"Say it,\" insisted Anna, tipping Sara's chin up again. \n\n\"We're - we're naughty little girls...\" said Sara, losing herself once more in Anna's piercing green eyes. \n\n\"And you can't wait to run around naked where you're not supposed to,\" said Anna, with a nodding prompt for Sara to repeat it. \n\n\"A-and we can't wait to run around naked where we're not supposed to-ooh!\" recited Sara, rewarded by a swirl of Anna's thumb on her clit. \n\n\"You know, if you really want to feel naked on those little escapades, you definitely need to get rid of this,\" said Anna, running her thumb over Sara's brown muff. \"You won't believe how exposed you'll feel once you've shaved - especially if you've never been bare down there before.\" \n\n\"I will, ma'am, I promise I will,\" said Sara between quickening pants, though not exactly sure why she felt the need to make such a pledge. \n\n\"Such a good girl!\" Anna chuckled, teasing Sara's nipple and marveling at her eagerness to please. \"Well, I have a present for you, my obedient little toy,\" Anna said, withdrawing her fingers from between Sara's legs - which made the horny, naked girl whimper slightly - and reaching behind her back to bring out a blue airline blanket. \"I promise this one is regular sized.\" \n\n\"Oh god, thank you,\" said Sara, clutching the folded blanket to her chest, but somehow not even thinking of covering herself with it in Anna's presence. \"I think I'm going to need this in a bit to get some sleep. I feel like I've run a marathon - naked.\" \n\n\"Well, you're not getting any sleep until I'm done with you, sweetie,\" said Anna planting a deep kiss on Sara's lips and plunging her fingers back into the girl's slippery nethers. \n\nHer naked toy arched her back and moaned into their kiss as Anna's fingers returned to Sara's g-spot and her thumb swirled over her clit. She rubbed with a rhythm that quickened with the girl's breath as Sara bucked her hips at the same pace. The woman's other arm held Sara tight as her entire body began to writhe and gyrate, then Anna placed a fingertip on Sara's g-spot and her thumb on her clit, paused for a moment, and then pinched them together. \n\nSara's hands clawed at her seat cushion as she ground her hips wantonly on Anna's hand and her toes curled at the ends of her rigid, shaking legs. Her naked body tensed and vibrated like she had licked a light socket, and the aftershocks continued as the pressure of the woman's masterful fingers pulsed between long moments of swirling strokes. Sara surely would have screamed if her mouth weren't consumed by Anna's lips. \n\nWhen the naked girl slowly drifted down from her fourth(?!?) climax of the evening, she was quivering and delirious, feeling utterly spent and exhausted. \n\n\"That... that was unreal...\" said Sara, unconsciously curling up her legs and snuggling into Anna's arm. \n\n\"Shhh, my little toy, it was all very real...\" cooed Anna as she stroked Sara's hair. \"I don't want you to go to sleep and wake tomorrow up thinking all this was all just a dream.\" \n\n\"Oh god, I wish my dreams could be this good!\" said Sara with a weak chuckle. \n\n\"You are a beautiful, sexy, daring young woman,\" said Anna. \"Your whole life could be this good, Sara.\" \n\n\"Wait, what? You know my name? But when\u2014?\" \n\n\"As soon as you got on board,\" said Anna lightly pinching Sara's bare butt. \"The moment I saw this perky, petite little pink gumdrop bounce onto my plane, I made damn sure I got a look at your boarding pass with your name and seat number.\" \n\n\"But... but if you knew all along...\" mumbled Sara, her weary eyelids starting to droop. \n\n\"Well I guess I just preferred calling you my naked little toy,\" said Anna, giving Sara a soft kiss. \n\n\"Hmmm... Me too...\" said Sara tucking up under the woman's arm and resting her head on Anna's full, warm breast. \n\nNestled under Anna's arm, totally drained, Sara felt her weariness start to overtake her. As she drifted off, Sara vaguely registered Anna laying her down across the two seats and covering her sweaty, naked body with the blanket. Then she leaned down and kissed Sara on the head before whispering something that surely would have made the nude girl sit bolt upright if she hadn't been so thoroughly exhausted. \n\n\"Better rest up sweetie... you still have to make it off this airplane tomorrow morning when we land...\" was the last thing Sara heard before she passed out. \n\n-- \n\nStay tuned for the sequel - Red-Faced Part 2: Sunburn"
    ],
    "authorname": "LasciviaDelicioso",
    "tags": [
        "enf",
        "exhibitionism",
        "forced exhibitionism",
        "lesbian",
        "lesbian domination",
        "lesbian seduction",
        "public nudity",
        "reluctant",
        "tickling"
    ],
    "category": "Exhibitionist & Voyeur",
    "url": "https://www.literotica.com/s/red-faced-on-the-red-eye-pt-01"
}